:orphan:

:py:mod:`neural_compressor.common.base_config`
==============================================

.. py:module:: neural_compressor.common.base_config


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   neural_compressor.common.base_config.BaseConfig
   neural_compressor.common.base_config.ComposableConfig



Functions
~~~~~~~~~

.. autoapisummary::

   neural_compressor.common.base_config.register_config



.. py:function:: register_config(framework_name='None', algo_name=None)

   Register config decorator.

   The register the configuration classes for different algorithms within specific frameworks.

   Usage example:
       @register_config(framework_name="PyTorch", algo_name="ExampleAlgorithm")
       class ExampleAlgorithmConfig:
           # Configuration details for the ExampleAlgorithm

   :param framework_name: the framework name. Defaults to "None".
   :param algo_name: the algorithm name. Defaults to None.


.. py:class:: BaseConfig(white_list: Optional[List[neural_compressor.common.utility.OP_NAME_OR_MODULE_TYPE]] = DEFAULT_WHITE_LIST)




   The base config for all algorithm configs.


.. py:class:: ComposableConfig(configs: List[BaseConfig])




   The base config for all algorithm configs.


