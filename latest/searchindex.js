Search.setIndex({"docnames": ["autoapi/block_mask/index", "autoapi/neural_compressor/adaptor/adaptor/index", "autoapi/neural_compressor/adaptor/index", "autoapi/neural_compressor/adaptor/keras/index", "autoapi/neural_compressor/adaptor/keras_utils/conv2d/index", "autoapi/neural_compressor/adaptor/keras_utils/dense/index", "autoapi/neural_compressor/adaptor/keras_utils/depthwise_conv2d/index", "autoapi/neural_compressor/adaptor/keras_utils/index", "autoapi/neural_compressor/adaptor/keras_utils/pool2d/index", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index", "autoapi/neural_compressor/adaptor/keras_utils/separable_conv2d/index", "autoapi/neural_compressor/adaptor/mxnet/index", "autoapi/neural_compressor/adaptor/mxnet_utils/index", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index", "autoapi/neural_compressor/adaptor/onnxrt/index", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index", "autoapi/neural_compressor/adaptor/ox_utils/calibrator/index", "autoapi/neural_compressor/adaptor/ox_utils/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/norm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/reduce/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/unary_op/index", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index", "autoapi/neural_compressor/adaptor/ox_utils/smooth_quant/index", "autoapi/neural_compressor/adaptor/ox_utils/util/index", "autoapi/neural_compressor/adaptor/ox_utils/weight_only/index", "autoapi/neural_compressor/adaptor/pytorch/index", "autoapi/neural_compressor/adaptor/query/index", "autoapi/neural_compressor/adaptor/tensorflow/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/dequantize_cast_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_schema/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/tf2onnx_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index", "autoapi/neural_compressor/adaptor/tf_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_calibration/index", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_scaler/index", "autoapi/neural_compressor/adaptor/tf_utils/tf2onnx_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index", "autoapi/neural_compressor/adaptor/tf_utils/util/index", "autoapi/neural_compressor/adaptor/torch_utils/auto_round/index", "autoapi/neural_compressor/adaptor/torch_utils/autoround/autoround/index", "autoapi/neural_compressor/adaptor/torch_utils/autoround/export/index", "autoapi/neural_compressor/adaptor/torch_utils/autoround/index", "autoapi/neural_compressor/adaptor/torch_utils/autoround/model_wrapper/index", "autoapi/neural_compressor/adaptor/torch_utils/autoround/sign_sgd/index", "autoapi/neural_compressor/adaptor/torch_utils/awq/index", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index", "autoapi/neural_compressor/adaptor/torch_utils/gptq/index", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index", "autoapi/neural_compressor/adaptor/torch_utils/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/modified_pickle/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/quantize/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/torch_load/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/utils/index", "autoapi/neural_compressor/adaptor/torch_utils/mixed_precision/index", "autoapi/neural_compressor/adaptor/torch_utils/model_wrapper/index", "autoapi/neural_compressor/adaptor/torch_utils/pattern_detector/index", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index", "autoapi/neural_compressor/adaptor/torch_utils/teq/index", "autoapi/neural_compressor/adaptor/torch_utils/util/index", "autoapi/neural_compressor/adaptor/torch_utils/waq/auto_alpha/index", "autoapi/neural_compressor/adaptor/torch_utils/waq/calibration/index", "autoapi/neural_compressor/adaptor/torch_utils/waq/graph_trace/index", "autoapi/neural_compressor/adaptor/torch_utils/waq/index", "autoapi/neural_compressor/adaptor/torch_utils/waq/smooth_quant/index", "autoapi/neural_compressor/adaptor/torch_utils/waq/utils/index", "autoapi/neural_compressor/adaptor/torch_utils/weight_only/index", "autoapi/neural_compressor/algorithm/algorithm/index", "autoapi/neural_compressor/algorithm/fast_bias_correction/index", "autoapi/neural_compressor/algorithm/index", "autoapi/neural_compressor/algorithm/smooth_quant/index", "autoapi/neural_compressor/algorithm/weight_correction/index", "autoapi/neural_compressor/benchmark/index", "autoapi/neural_compressor/common/base_config/index", "autoapi/neural_compressor/common/base_tuning/index", "autoapi/neural_compressor/common/index", "autoapi/neural_compressor/common/tuning_param/index", "autoapi/neural_compressor/common/utils/constants/index", "autoapi/neural_compressor/common/utils/index", "autoapi/neural_compressor/common/utils/logger/index", "autoapi/neural_compressor/common/utils/utility/index", "autoapi/neural_compressor/compression/callbacks/index", "autoapi/neural_compressor/compression/distillation/criterions/index", "autoapi/neural_compressor/compression/distillation/index", "autoapi/neural_compressor/compression/distillation/optimizers/index", "autoapi/neural_compressor/compression/distillation/utility/index", "autoapi/neural_compressor/compression/hpo/index", "autoapi/neural_compressor/compression/hpo/sa_optimizer/index", "autoapi/neural_compressor/compression/hpo/search_algorithms/index", "autoapi/neural_compressor/compression/hpo/search_space/index", "autoapi/neural_compressor/compression/index", "autoapi/neural_compressor/compression/pruner/criteria/index", "autoapi/neural_compressor/compression/pruner/dsnot/index", "autoapi/neural_compressor/compression/pruner/index", "autoapi/neural_compressor/compression/pruner/model_slim/auto_slim/index", "autoapi/neural_compressor/compression/pruner/model_slim/index", "autoapi/neural_compressor/compression/pruner/model_slim/pattern_analyzer/index", "autoapi/neural_compressor/compression/pruner/model_slim/weight_slim/index", "autoapi/neural_compressor/compression/pruner/patterns/base/index", "autoapi/neural_compressor/compression/pruner/patterns/index", "autoapi/neural_compressor/compression/pruner/patterns/mha/index", "autoapi/neural_compressor/compression/pruner/patterns/ninm/index", "autoapi/neural_compressor/compression/pruner/patterns/nxm/index", "autoapi/neural_compressor/compression/pruner/pruners/base/index", "autoapi/neural_compressor/compression/pruner/pruners/basic/index", "autoapi/neural_compressor/compression/pruner/pruners/block_mask/index", "autoapi/neural_compressor/compression/pruner/pruners/index", "autoapi/neural_compressor/compression/pruner/pruners/mha/index", "autoapi/neural_compressor/compression/pruner/pruners/pattern_lock/index", "autoapi/neural_compressor/compression/pruner/pruners/progressive/index", "autoapi/neural_compressor/compression/pruner/pruners/retrain_free/index", "autoapi/neural_compressor/compression/pruner/pruners/sparse_gpt/index", "autoapi/neural_compressor/compression/pruner/pruning/index", "autoapi/neural_compressor/compression/pruner/regs/index", "autoapi/neural_compressor/compression/pruner/schedulers/index", "autoapi/neural_compressor/compression/pruner/tf_criteria/index", "autoapi/neural_compressor/compression/pruner/utils/index", "autoapi/neural_compressor/compression/pruner/wanda/index", "autoapi/neural_compressor/compression/pruner/wanda/prune/index", "autoapi/neural_compressor/compression/pruner/wanda/utils/index", "autoapi/neural_compressor/compression/pruner/wanda/wrapper/index", "autoapi/neural_compressor/conf/config/index", "autoapi/neural_compressor/conf/dotdict/index", "autoapi/neural_compressor/conf/index", "autoapi/neural_compressor/conf/pythonic_config/index", "autoapi/neural_compressor/config/index", "autoapi/neural_compressor/contrib/index", "autoapi/neural_compressor/contrib/strategy/index", "autoapi/neural_compressor/contrib/strategy/sigopt/index", "autoapi/neural_compressor/contrib/strategy/tpe/index", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/data/dataloaders/dataloader/index", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/data/dataloaders/fetcher/index", "autoapi/neural_compressor/data/dataloaders/index", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/data/dataloaders/sampler/index", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/data/datasets/bert_dataset/index", "autoapi/neural_compressor/data/datasets/coco_dataset/index", "autoapi/neural_compressor/data/datasets/dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/data/datasets/index", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/data/filters/coco_filter/index", "autoapi/neural_compressor/data/filters/filter/index", "autoapi/neural_compressor/data/filters/index", "autoapi/neural_compressor/data/index", "autoapi/neural_compressor/data/transforms/coco_transform/index", "autoapi/neural_compressor/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/data/transforms/index", "autoapi/neural_compressor/data/transforms/postprocess/index", "autoapi/neural_compressor/data/transforms/tokenization/index", "autoapi/neural_compressor/data/transforms/transform/index", "autoapi/neural_compressor/experimental/benchmark/index", "autoapi/neural_compressor/experimental/common/criterion/index", "autoapi/neural_compressor/experimental/common/dataloader/index", "autoapi/neural_compressor/experimental/common/index", "autoapi/neural_compressor/experimental/common/metric/index", "autoapi/neural_compressor/experimental/common/model/index", "autoapi/neural_compressor/experimental/common/optimizer/index", "autoapi/neural_compressor/experimental/common/postprocess/index", "autoapi/neural_compressor/experimental/common/torch_utils/index", "autoapi/neural_compressor/experimental/component/index", "autoapi/neural_compressor/experimental/compression/index", "autoapi/neural_compressor/experimental/contrib/index", "autoapi/neural_compressor/experimental/contrib/strategy/index", "autoapi/neural_compressor/experimental/contrib/strategy/sigopt/index", "autoapi/neural_compressor/experimental/contrib/strategy/tpe/index", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index", "autoapi/neural_compressor/experimental/data/dataloaders/index", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/index", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index", "autoapi/neural_compressor/experimental/data/filters/filter/index", "autoapi/neural_compressor/experimental/data/filters/index", "autoapi/neural_compressor/experimental/data/index", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/experimental/data/transforms/index", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index", "autoapi/neural_compressor/experimental/data/transforms/transform/index", "autoapi/neural_compressor/experimental/distillation/index", "autoapi/neural_compressor/experimental/export/index", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index", "autoapi/neural_compressor/experimental/export/tf2onnx/index", "autoapi/neural_compressor/experimental/export/torch2onnx/index", "autoapi/neural_compressor/experimental/graph_optimization/index", "autoapi/neural_compressor/experimental/index", "autoapi/neural_compressor/experimental/metric/bleu/index", "autoapi/neural_compressor/experimental/metric/bleu_util/index", "autoapi/neural_compressor/experimental/metric/coco_label_map/index", "autoapi/neural_compressor/experimental/metric/coco_tools/index", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index", "autoapi/neural_compressor/experimental/metric/f1/index", "autoapi/neural_compressor/experimental/metric/index", "autoapi/neural_compressor/experimental/metric/metric/index", "autoapi/neural_compressor/experimental/mixed_precision/index", "autoapi/neural_compressor/experimental/model_conversion/index", "autoapi/neural_compressor/experimental/nas/basic_nas/index", "autoapi/neural_compressor/experimental/nas/dynas/index", "autoapi/neural_compressor/experimental/nas/index", "autoapi/neural_compressor/experimental/nas/nas/index", "autoapi/neural_compressor/experimental/nas/nas_utils/index", "autoapi/neural_compressor/experimental/nas/search_algorithms/index", "autoapi/neural_compressor/experimental/pruner_legacy/gradient_sensitivity/index", "autoapi/neural_compressor/experimental/pruner_legacy/group_lasso/index", "autoapi/neural_compressor/experimental/pruner_legacy/index", "autoapi/neural_compressor/experimental/pruner_legacy/magnitude/index", "autoapi/neural_compressor/experimental/pruner_legacy/pattern_lock/index", "autoapi/neural_compressor/experimental/pruner_legacy/pruner/index", "autoapi/neural_compressor/experimental/pruning/index", "autoapi/neural_compressor/experimental/pruning_recipes/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index", "autoapi/neural_compressor/experimental/pruning_v2/index", "autoapi/neural_compressor/experimental/pytorch_pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index", "autoapi/neural_compressor/experimental/quantization/index", "autoapi/neural_compressor/experimental/scheduler/index", "autoapi/neural_compressor/experimental/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/experimental/strategy/basic/index", "autoapi/neural_compressor/experimental/strategy/bayesian/index", "autoapi/neural_compressor/experimental/strategy/exhaustive/index", "autoapi/neural_compressor/experimental/strategy/index", "autoapi/neural_compressor/experimental/strategy/mse/index", "autoapi/neural_compressor/experimental/strategy/mse_v2/index", "autoapi/neural_compressor/experimental/strategy/random/index", "autoapi/neural_compressor/experimental/strategy/strategy/index", "autoapi/neural_compressor/experimental/strategy/utils/constant/index", "autoapi/neural_compressor/experimental/strategy/utils/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_space/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/experimental/strategy/utils/utility/index", "autoapi/neural_compressor/index", "autoapi/neural_compressor/metric/bleu/index", "autoapi/neural_compressor/metric/bleu_util/index", "autoapi/neural_compressor/metric/coco_label_map/index", "autoapi/neural_compressor/metric/coco_tools/index", "autoapi/neural_compressor/metric/evaluate_squad/index", "autoapi/neural_compressor/metric/f1/index", "autoapi/neural_compressor/metric/index", "autoapi/neural_compressor/metric/metric/index", "autoapi/neural_compressor/mix_precision/index", "autoapi/neural_compressor/model/base_model/index", "autoapi/neural_compressor/model/index", "autoapi/neural_compressor/model/keras_model/index", "autoapi/neural_compressor/model/model/index", "autoapi/neural_compressor/model/mxnet_model/index", "autoapi/neural_compressor/model/nets_factory/index", "autoapi/neural_compressor/model/onnx_model/index", "autoapi/neural_compressor/model/tensorflow_model/index", "autoapi/neural_compressor/model/torch_model/index", "autoapi/neural_compressor/objective/index", "autoapi/neural_compressor/onnxrt/algorithms/index", "autoapi/neural_compressor/onnxrt/algorithms/layer_wise/core/index", "autoapi/neural_compressor/onnxrt/algorithms/layer_wise/index", "autoapi/neural_compressor/onnxrt/algorithms/smoother/calibrator/index", "autoapi/neural_compressor/onnxrt/algorithms/smoother/core/index", "autoapi/neural_compressor/onnxrt/algorithms/smoother/index", "autoapi/neural_compressor/onnxrt/algorithms/weight_only/awq/index", "autoapi/neural_compressor/onnxrt/algorithms/weight_only/gptq/index", "autoapi/neural_compressor/onnxrt/algorithms/weight_only/index", "autoapi/neural_compressor/onnxrt/algorithms/weight_only/rtn/index", "autoapi/neural_compressor/onnxrt/algorithms/weight_only/utility/index", "autoapi/neural_compressor/onnxrt/index", "autoapi/neural_compressor/onnxrt/quantization/algorithm_entry/index", "autoapi/neural_compressor/onnxrt/quantization/autotune/index", "autoapi/neural_compressor/onnxrt/quantization/calibrate/index", "autoapi/neural_compressor/onnxrt/quantization/config/index", "autoapi/neural_compressor/onnxrt/quantization/index", "autoapi/neural_compressor/onnxrt/quantization/quantize/index", "autoapi/neural_compressor/onnxrt/utils/index", "autoapi/neural_compressor/onnxrt/utils/onnx_model/index", "autoapi/neural_compressor/onnxrt/utils/utility/index", "autoapi/neural_compressor/profiling/index", "autoapi/neural_compressor/profiling/parser/factory/index", "autoapi/neural_compressor/profiling/parser/index", "autoapi/neural_compressor/profiling/parser/onnx_parser/factory/index", "autoapi/neural_compressor/profiling/parser/onnx_parser/index", "autoapi/neural_compressor/profiling/parser/onnx_parser/parser/index", "autoapi/neural_compressor/profiling/parser/parser/index", "autoapi/neural_compressor/profiling/parser/result/index", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/factory/index", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/index", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/parser/index", "autoapi/neural_compressor/profiling/profiler/factory/index", "autoapi/neural_compressor/profiling/profiler/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/factory/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/profiler/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/utils/index", "autoapi/neural_compressor/profiling/profiler/profiler/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/factory/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/profiler/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/utils/index", "autoapi/neural_compressor/quantization/index", "autoapi/neural_compressor/strategy/auto/index", "autoapi/neural_compressor/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/strategy/basic/index", "autoapi/neural_compressor/strategy/bayesian/index", "autoapi/neural_compressor/strategy/conservative/index", "autoapi/neural_compressor/strategy/exhaustive/index", "autoapi/neural_compressor/strategy/hawq_v2/index", "autoapi/neural_compressor/strategy/index", "autoapi/neural_compressor/strategy/mse/index", "autoapi/neural_compressor/strategy/mse_v2/index", "autoapi/neural_compressor/strategy/random/index", "autoapi/neural_compressor/strategy/strategy/index", "autoapi/neural_compressor/strategy/utils/constant/index", "autoapi/neural_compressor/strategy/utils/index", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/strategy/utils/tuning_space/index", "autoapi/neural_compressor/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/strategy/utils/utility/index", "autoapi/neural_compressor/template/api_doc_example/index", "autoapi/neural_compressor/template/index", "autoapi/neural_compressor/tensorflow/algorithms/index", "autoapi/neural_compressor/tensorflow/algorithms/smoother/calibration/index", "autoapi/neural_compressor/tensorflow/algorithms/smoother/core/index", "autoapi/neural_compressor/tensorflow/algorithms/smoother/index", "autoapi/neural_compressor/tensorflow/algorithms/smoother/scaler/index", "autoapi/neural_compressor/tensorflow/algorithms/static_quant/index", "autoapi/neural_compressor/tensorflow/algorithms/static_quant/keras/index", "autoapi/neural_compressor/tensorflow/algorithms/static_quant/tensorflow/index", "autoapi/neural_compressor/tensorflow/index", "autoapi/neural_compressor/tensorflow/keras/index", "autoapi/neural_compressor/tensorflow/keras/layers/conv2d/index", "autoapi/neural_compressor/tensorflow/keras/layers/dense/index", "autoapi/neural_compressor/tensorflow/keras/layers/depthwise_conv2d/index", "autoapi/neural_compressor/tensorflow/keras/layers/index", "autoapi/neural_compressor/tensorflow/keras/layers/pool2d/index", "autoapi/neural_compressor/tensorflow/keras/layers/quantizer/index", "autoapi/neural_compressor/tensorflow/keras/layers/separable_conv2d/index", "autoapi/neural_compressor/tensorflow/keras/quantization/config/index", "autoapi/neural_compressor/tensorflow/keras/quantization/index", "autoapi/neural_compressor/tensorflow/quantization/algorithm_entry/index", "autoapi/neural_compressor/tensorflow/quantization/autotune/index", "autoapi/neural_compressor/tensorflow/quantization/config/index", "autoapi/neural_compressor/tensorflow/quantization/index", "autoapi/neural_compressor/tensorflow/quantization/quantize/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_converter/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_converter_without_calib/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/bf16/bf16_convert/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/bf16/dequantize_cast_optimizer/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/bf16/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_add_to_biasadd/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_layout/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_leakyrelu/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_nan_to_random/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_placeholder_to_const/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/dilated_contraction/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/dummy_biasadd/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/expanddims_optimizer/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fetch_weight_from_reshape/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fold_batch_norm/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fold_constant/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_biasadd_add/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_column_wise_mul/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_conv_with_math/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_decomposed_bn/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_decomposed_in/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_gelu/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_layer_norm/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_pad_with_conv/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_reshape_transpose/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/graph_cse_optimizer/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/grappler_pass/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/insert_print_node/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/move_squeeze_after_relu/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/pre_optimize/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/remove_training_nodes/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/rename_batch_norm/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/split_shared_input/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/strip_equivalent_nodes/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/strip_unused_nodes/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/switch_optimizer/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/graph_base/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/freeze_fake_quant/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/freeze_value/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/freeze_value_without_calib/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/fuse_conv_requantize/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/fuse_matmul_requantize/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/meta_op_optimizer/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/post_hostconst_converter/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/post_quantized_op_cse/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/rnn_convert/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/scale_propagation/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/qdq/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/qdq/insert_qdq_pattern/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/qdq/merge_duplicated_qdq/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/qdq/share_qdq_y_pattern/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_util/index", "autoapi/neural_compressor/tensorflow/quantization/utils/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/fake_quantize/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_config/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_helper/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_layers/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_layers/optimize_layer/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_wrapper/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_bn/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_concatv2/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_conv/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_deconv/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_in/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_matmul/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_pooling/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/optimize_qdq/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_base/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_bn/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_concatv2/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_conv/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_for_intel_cpu/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_matmul/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_pooling/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph_common/index", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/bias_correction/index", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/graph_transform_base/index", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/index", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/insert_logging/index", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/rerange_quantized_concat/index", "autoapi/neural_compressor/tensorflow/quantization/utils/utility/index", "autoapi/neural_compressor/tensorflow/utils/constants/index", "autoapi/neural_compressor/tensorflow/utils/data/index", "autoapi/neural_compressor/tensorflow/utils/index", "autoapi/neural_compressor/tensorflow/utils/model/index", "autoapi/neural_compressor/tensorflow/utils/model_wrappers/index", "autoapi/neural_compressor/tensorflow/utils/nets_factory/index", "autoapi/neural_compressor/tensorflow/utils/utility/index", "autoapi/neural_compressor/torch/algorithms/habana_fp8/fp8_quant/index", "autoapi/neural_compressor/torch/algorithms/habana_fp8/index", "autoapi/neural_compressor/torch/algorithms/habana_fp8/modules/index", "autoapi/neural_compressor/torch/algorithms/habana_fp8/observer/index", "autoapi/neural_compressor/torch/algorithms/index", "autoapi/neural_compressor/torch/algorithms/layer_wise/index", "autoapi/neural_compressor/torch/algorithms/layer_wise/load/index", "autoapi/neural_compressor/torch/algorithms/layer_wise/modified_pickle/index", "autoapi/neural_compressor/torch/algorithms/layer_wise/utils/index", "autoapi/neural_compressor/torch/algorithms/static_quant/index", "autoapi/neural_compressor/torch/algorithms/static_quant/static_quant/index", "autoapi/neural_compressor/torch/algorithms/static_quant/utility/index", "autoapi/neural_compressor/torch/algorithms/weight_only/awq/index", "autoapi/neural_compressor/torch/algorithms/weight_only/gptq/index", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/bitpack/index", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/config/index", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/core/index", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/index", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/optimizer/index", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/qtensor/index", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/quant_api/index", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/quantizer/index", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/utility/index", "autoapi/neural_compressor/torch/algorithms/weight_only/index", "autoapi/neural_compressor/torch/algorithms/weight_only/modules/index", "autoapi/neural_compressor/torch/algorithms/weight_only/rtn/index", "autoapi/neural_compressor/torch/algorithms/weight_only/teq/index", "autoapi/neural_compressor/torch/algorithms/weight_only/utility/index", "autoapi/neural_compressor/torch/amp/autocast/index", "autoapi/neural_compressor/torch/amp/fp8/functions/index", "autoapi/neural_compressor/torch/amp/fp8/index", "autoapi/neural_compressor/torch/amp/index", "autoapi/neural_compressor/torch/index", "autoapi/neural_compressor/torch/quantization/algorithm_entry/index", "autoapi/neural_compressor/torch/quantization/autotune/index", "autoapi/neural_compressor/torch/quantization/config/index", "autoapi/neural_compressor/torch/quantization/index", "autoapi/neural_compressor/torch/quantization/modules/index", "autoapi/neural_compressor/torch/quantization/quantize/index", "autoapi/neural_compressor/torch/utils/auto_accelerator/index", "autoapi/neural_compressor/torch/utils/constants/index", "autoapi/neural_compressor/torch/utils/environ/index", "autoapi/neural_compressor/torch/utils/index", "autoapi/neural_compressor/torch/utils/utility/index", "autoapi/neural_compressor/training/index", "autoapi/neural_compressor/utils/collect_layer_histogram/index", "autoapi/neural_compressor/utils/constant/index", "autoapi/neural_compressor/utils/create_obj_from_config/index", "autoapi/neural_compressor/utils/index", "autoapi/neural_compressor/utils/kl_divergence/index", "autoapi/neural_compressor/utils/load_huggingface/index", "autoapi/neural_compressor/utils/logger/index", "autoapi/neural_compressor/utils/neural_insights_utils/index", "autoapi/neural_compressor/utils/options/index", "autoapi/neural_compressor/utils/pytorch/index", "autoapi/neural_compressor/utils/utility/index", "autoapi/neural_compressor/utils/weights_details/index", "autoapi/neural_compressor/version/index", "docs/build_docs/source/index", "docs/source/CODE_OF_CONDUCT", "docs/source/CONTRIBUTING", "docs/source/FX", "docs/source/NAS", "docs/source/SECURITY", "docs/source/Welcome", "docs/source/adaptor", "docs/source/add_new_adaptor", "docs/source/add_new_data_type", "docs/source/api-doc/adaptor", "docs/source/api-doc/adaptor/onnxrt", "docs/source/api-doc/adaptor/torch_utils", "docs/source/api-doc/api_doc_example", "docs/source/api-doc/apis", "docs/source/api-doc/benchmark", "docs/source/api-doc/compression", "docs/source/api-doc/config", "docs/source/api-doc/mix_precision", "docs/source/api-doc/model", "docs/source/api-doc/objective", "docs/source/api-doc/quantization", "docs/source/api-doc/strategy", "docs/source/api-doc/training", "docs/source/benchmark", "docs/source/calibration", "docs/source/coding_style", "docs/source/dataloader", "docs/source/dataset", "docs/source/design", "docs/source/diagnosis", "docs/source/distillation", "docs/source/distillation_quantization", "docs/source/distributed", "docs/source/examples_readme", "docs/source/export", "docs/source/faq", "docs/source/framework_yaml", "docs/source/get_started", "docs/source/incompatible_changes", "docs/source/infrastructure", "docs/source/installation_guide", "docs/source/legal_information", "docs/source/llm_recipes", "docs/source/metric", "docs/source/migration", "docs/source/mixed_precision", "docs/source/model", "docs/source/neural_coder/README", "docs/source/neural_coder/docs/AWSSageMakerSupport", "docs/source/neural_coder/docs/BigDLNanoSupport", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting", "docs/source/neural_coder/docs/PythonAPI", "docs/source/neural_coder/docs/PythonLauncher", "docs/source/neural_coder/docs/Quantization", "docs/source/neural_coder/docs/SupportMatrix", "docs/source/neural_coder/docs/release_notes/v0.4", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart", "docs/source/neural_insights/README", "docs/source/neural_insights/docs/source/onnx_accuracy_debug", "docs/source/neural_insights/docs/source/pytorch_nlp_cli_mode", "docs/source/neural_insights/docs/source/tf_accuracy_debug", "docs/source/neural_insights/gui/README", "docs/source/neural_solution/README", "docs/source/neural_solution/docs/source/README", "docs/source/neural_solution/docs/source/description_api", "docs/source/neural_solution/docs/source/ns_design_doc", "docs/source/neural_solution/docs/source/template/task_request_description", "docs/source/neural_solution/examples/README", "docs/source/neural_solution/examples/custom_models_optimized/tf_example1/README", "docs/source/neural_solution/examples/hf_models/README", "docs/source/neural_solution/examples/hf_models_grpc/README", "docs/source/neural_solution/frontend/README", "docs/source/objective", "docs/source/orchestration", "docs/source/pruning", "docs/source/publication_list", "docs/source/pythonic_style", "docs/source/quantization", "docs/source/quantization_layer_wise", "docs/source/quantization_mixed_precision", "docs/source/quantization_weight_only", "docs/source/releases_info", "docs/source/sigopt_strategy", "docs/source/smooth_quant", "docs/source/tensorboard", "docs/source/transform", "docs/source/tuning_strategies", "docs/source/user_guide", "docs/source/user_yaml", "docs/source/validated_model_list", "index"], "filenames": ["autoapi/block_mask/index.rst", "autoapi/neural_compressor/adaptor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/keras/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/conv2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/dense/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/depthwise_conv2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/pool2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/separable_conv2d/index.rst", "autoapi/neural_compressor/adaptor/mxnet/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index.rst", "autoapi/neural_compressor/adaptor/onnxrt/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibrator/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/norm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/reduce/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/unary_op/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/smooth_quant/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/util/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/weight_only/index.rst", "autoapi/neural_compressor/adaptor/pytorch/index.rst", "autoapi/neural_compressor/adaptor/query/index.rst", "autoapi/neural_compressor/adaptor/tensorflow/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/dequantize_cast_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_schema/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/tf2onnx_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_calibration/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_scaler/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/tf2onnx_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/util/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/auto_round/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/autoround/autoround/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/autoround/export/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/autoround/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/autoround/model_wrapper/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/autoround/sign_sgd/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/awq/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/gptq/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/modified_pickle/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/quantize/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/torch_load/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/utils/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/mixed_precision/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/model_wrapper/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/pattern_detector/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/teq/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/util/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/waq/auto_alpha/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/waq/calibration/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/waq/graph_trace/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/waq/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/waq/smooth_quant/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/waq/utils/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/weight_only/index.rst", "autoapi/neural_compressor/algorithm/algorithm/index.rst", "autoapi/neural_compressor/algorithm/fast_bias_correction/index.rst", "autoapi/neural_compressor/algorithm/index.rst", "autoapi/neural_compressor/algorithm/smooth_quant/index.rst", "autoapi/neural_compressor/algorithm/weight_correction/index.rst", "autoapi/neural_compressor/benchmark/index.rst", "autoapi/neural_compressor/common/base_config/index.rst", "autoapi/neural_compressor/common/base_tuning/index.rst", "autoapi/neural_compressor/common/index.rst", "autoapi/neural_compressor/common/tuning_param/index.rst", "autoapi/neural_compressor/common/utils/constants/index.rst", "autoapi/neural_compressor/common/utils/index.rst", "autoapi/neural_compressor/common/utils/logger/index.rst", "autoapi/neural_compressor/common/utils/utility/index.rst", "autoapi/neural_compressor/compression/callbacks/index.rst", "autoapi/neural_compressor/compression/distillation/criterions/index.rst", "autoapi/neural_compressor/compression/distillation/index.rst", "autoapi/neural_compressor/compression/distillation/optimizers/index.rst", "autoapi/neural_compressor/compression/distillation/utility/index.rst", "autoapi/neural_compressor/compression/hpo/index.rst", "autoapi/neural_compressor/compression/hpo/sa_optimizer/index.rst", "autoapi/neural_compressor/compression/hpo/search_algorithms/index.rst", "autoapi/neural_compressor/compression/hpo/search_space/index.rst", "autoapi/neural_compressor/compression/index.rst", "autoapi/neural_compressor/compression/pruner/criteria/index.rst", "autoapi/neural_compressor/compression/pruner/dsnot/index.rst", "autoapi/neural_compressor/compression/pruner/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/auto_slim/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/pattern_analyzer/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/weight_slim/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/base/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/mha/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/ninm/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/nxm/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/base/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/basic/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/block_mask/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/mha/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/pattern_lock/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/progressive/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/retrain_free/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/sparse_gpt/index.rst", "autoapi/neural_compressor/compression/pruner/pruning/index.rst", "autoapi/neural_compressor/compression/pruner/regs/index.rst", "autoapi/neural_compressor/compression/pruner/schedulers/index.rst", "autoapi/neural_compressor/compression/pruner/tf_criteria/index.rst", "autoapi/neural_compressor/compression/pruner/utils/index.rst", "autoapi/neural_compressor/compression/pruner/wanda/index.rst", "autoapi/neural_compressor/compression/pruner/wanda/prune/index.rst", "autoapi/neural_compressor/compression/pruner/wanda/utils/index.rst", "autoapi/neural_compressor/compression/pruner/wanda/wrapper/index.rst", "autoapi/neural_compressor/conf/config/index.rst", "autoapi/neural_compressor/conf/dotdict/index.rst", "autoapi/neural_compressor/conf/index.rst", "autoapi/neural_compressor/conf/pythonic_config/index.rst", "autoapi/neural_compressor/config/index.rst", "autoapi/neural_compressor/contrib/index.rst", "autoapi/neural_compressor/contrib/strategy/index.rst", "autoapi/neural_compressor/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/data/dataloaders/index.rst", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/data/datasets/index.rst", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/data/filters/filter/index.rst", "autoapi/neural_compressor/data/filters/index.rst", "autoapi/neural_compressor/data/index.rst", "autoapi/neural_compressor/data/transforms/coco_transform/index.rst", "autoapi/neural_compressor/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/data/transforms/index.rst", "autoapi/neural_compressor/data/transforms/postprocess/index.rst", "autoapi/neural_compressor/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/benchmark/index.rst", "autoapi/neural_compressor/experimental/common/criterion/index.rst", "autoapi/neural_compressor/experimental/common/dataloader/index.rst", "autoapi/neural_compressor/experimental/common/index.rst", "autoapi/neural_compressor/experimental/common/metric/index.rst", "autoapi/neural_compressor/experimental/common/model/index.rst", "autoapi/neural_compressor/experimental/common/optimizer/index.rst", "autoapi/neural_compressor/experimental/common/postprocess/index.rst", "autoapi/neural_compressor/experimental/common/torch_utils/index.rst", "autoapi/neural_compressor/experimental/component/index.rst", "autoapi/neural_compressor/experimental/compression/index.rst", "autoapi/neural_compressor/experimental/contrib/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/index.rst", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/index.rst", "autoapi/neural_compressor/experimental/data/index.rst", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/experimental/data/transforms/index.rst", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/experimental/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/distillation/index.rst", "autoapi/neural_compressor/experimental/export/index.rst", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index.rst", "autoapi/neural_compressor/experimental/export/tf2onnx/index.rst", "autoapi/neural_compressor/experimental/export/torch2onnx/index.rst", "autoapi/neural_compressor/experimental/graph_optimization/index.rst", "autoapi/neural_compressor/experimental/index.rst", "autoapi/neural_compressor/experimental/metric/bleu/index.rst", "autoapi/neural_compressor/experimental/metric/bleu_util/index.rst", "autoapi/neural_compressor/experimental/metric/coco_label_map/index.rst", "autoapi/neural_compressor/experimental/metric/coco_tools/index.rst", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/experimental/metric/f1/index.rst", "autoapi/neural_compressor/experimental/metric/index.rst", "autoapi/neural_compressor/experimental/metric/metric/index.rst", "autoapi/neural_compressor/experimental/mixed_precision/index.rst", "autoapi/neural_compressor/experimental/model_conversion/index.rst", "autoapi/neural_compressor/experimental/nas/basic_nas/index.rst", "autoapi/neural_compressor/experimental/nas/dynas/index.rst", "autoapi/neural_compressor/experimental/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas_utils/index.rst", "autoapi/neural_compressor/experimental/nas/search_algorithms/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/gradient_sensitivity/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/group_lasso/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/magnitude/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/pattern_lock/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/pruner/index.rst", "autoapi/neural_compressor/experimental/pruning/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_v2/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index.rst", "autoapi/neural_compressor/experimental/quantization/index.rst", "autoapi/neural_compressor/experimental/scheduler/index.rst", "autoapi/neural_compressor/experimental/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/experimental/strategy/basic/index.rst", "autoapi/neural_compressor/experimental/strategy/bayesian/index.rst", "autoapi/neural_compressor/experimental/strategy/exhaustive/index.rst", "autoapi/neural_compressor/experimental/strategy/index.rst", "autoapi/neural_compressor/experimental/strategy/mse/index.rst", "autoapi/neural_compressor/experimental/strategy/mse_v2/index.rst", "autoapi/neural_compressor/experimental/strategy/random/index.rst", "autoapi/neural_compressor/experimental/strategy/strategy/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/constant/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/utility/index.rst", "autoapi/neural_compressor/index.rst", "autoapi/neural_compressor/metric/bleu/index.rst", "autoapi/neural_compressor/metric/bleu_util/index.rst", "autoapi/neural_compressor/metric/coco_label_map/index.rst", "autoapi/neural_compressor/metric/coco_tools/index.rst", "autoapi/neural_compressor/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/metric/f1/index.rst", "autoapi/neural_compressor/metric/index.rst", "autoapi/neural_compressor/metric/metric/index.rst", "autoapi/neural_compressor/mix_precision/index.rst", "autoapi/neural_compressor/model/base_model/index.rst", "autoapi/neural_compressor/model/index.rst", "autoapi/neural_compressor/model/keras_model/index.rst", "autoapi/neural_compressor/model/model/index.rst", "autoapi/neural_compressor/model/mxnet_model/index.rst", "autoapi/neural_compressor/model/nets_factory/index.rst", "autoapi/neural_compressor/model/onnx_model/index.rst", "autoapi/neural_compressor/model/tensorflow_model/index.rst", "autoapi/neural_compressor/model/torch_model/index.rst", "autoapi/neural_compressor/objective/index.rst", "autoapi/neural_compressor/onnxrt/algorithms/index.rst", "autoapi/neural_compressor/onnxrt/algorithms/layer_wise/core/index.rst", "autoapi/neural_compressor/onnxrt/algorithms/layer_wise/index.rst", "autoapi/neural_compressor/onnxrt/algorithms/smoother/calibrator/index.rst", "autoapi/neural_compressor/onnxrt/algorithms/smoother/core/index.rst", "autoapi/neural_compressor/onnxrt/algorithms/smoother/index.rst", "autoapi/neural_compressor/onnxrt/algorithms/weight_only/awq/index.rst", "autoapi/neural_compressor/onnxrt/algorithms/weight_only/gptq/index.rst", "autoapi/neural_compressor/onnxrt/algorithms/weight_only/index.rst", "autoapi/neural_compressor/onnxrt/algorithms/weight_only/rtn/index.rst", "autoapi/neural_compressor/onnxrt/algorithms/weight_only/utility/index.rst", "autoapi/neural_compressor/onnxrt/index.rst", "autoapi/neural_compressor/onnxrt/quantization/algorithm_entry/index.rst", "autoapi/neural_compressor/onnxrt/quantization/autotune/index.rst", "autoapi/neural_compressor/onnxrt/quantization/calibrate/index.rst", "autoapi/neural_compressor/onnxrt/quantization/config/index.rst", "autoapi/neural_compressor/onnxrt/quantization/index.rst", "autoapi/neural_compressor/onnxrt/quantization/quantize/index.rst", "autoapi/neural_compressor/onnxrt/utils/index.rst", "autoapi/neural_compressor/onnxrt/utils/onnx_model/index.rst", "autoapi/neural_compressor/onnxrt/utils/utility/index.rst", "autoapi/neural_compressor/profiling/index.rst", "autoapi/neural_compressor/profiling/parser/factory/index.rst", "autoapi/neural_compressor/profiling/parser/index.rst", "autoapi/neural_compressor/profiling/parser/onnx_parser/factory/index.rst", "autoapi/neural_compressor/profiling/parser/onnx_parser/index.rst", "autoapi/neural_compressor/profiling/parser/onnx_parser/parser/index.rst", "autoapi/neural_compressor/profiling/parser/parser/index.rst", "autoapi/neural_compressor/profiling/parser/result/index.rst", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/factory/index.rst", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/index.rst", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/parser/index.rst", "autoapi/neural_compressor/profiling/profiler/factory/index.rst", "autoapi/neural_compressor/profiling/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/factory/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/utils/index.rst", "autoapi/neural_compressor/profiling/profiler/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/factory/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/utils/index.rst", "autoapi/neural_compressor/quantization/index.rst", "autoapi/neural_compressor/strategy/auto/index.rst", "autoapi/neural_compressor/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/strategy/basic/index.rst", "autoapi/neural_compressor/strategy/bayesian/index.rst", "autoapi/neural_compressor/strategy/conservative/index.rst", "autoapi/neural_compressor/strategy/exhaustive/index.rst", "autoapi/neural_compressor/strategy/hawq_v2/index.rst", "autoapi/neural_compressor/strategy/index.rst", "autoapi/neural_compressor/strategy/mse/index.rst", "autoapi/neural_compressor/strategy/mse_v2/index.rst", "autoapi/neural_compressor/strategy/random/index.rst", "autoapi/neural_compressor/strategy/strategy/index.rst", "autoapi/neural_compressor/strategy/utils/constant/index.rst", "autoapi/neural_compressor/strategy/utils/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/strategy/utils/utility/index.rst", "autoapi/neural_compressor/template/api_doc_example/index.rst", "autoapi/neural_compressor/template/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/smoother/calibration/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/smoother/core/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/smoother/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/smoother/scaler/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/static_quant/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/static_quant/keras/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/static_quant/tensorflow/index.rst", "autoapi/neural_compressor/tensorflow/index.rst", "autoapi/neural_compressor/tensorflow/keras/index.rst", "autoapi/neural_compressor/tensorflow/keras/layers/conv2d/index.rst", "autoapi/neural_compressor/tensorflow/keras/layers/dense/index.rst", "autoapi/neural_compressor/tensorflow/keras/layers/depthwise_conv2d/index.rst", "autoapi/neural_compressor/tensorflow/keras/layers/index.rst", "autoapi/neural_compressor/tensorflow/keras/layers/pool2d/index.rst", "autoapi/neural_compressor/tensorflow/keras/layers/quantizer/index.rst", "autoapi/neural_compressor/tensorflow/keras/layers/separable_conv2d/index.rst", "autoapi/neural_compressor/tensorflow/keras/quantization/config/index.rst", "autoapi/neural_compressor/tensorflow/keras/quantization/index.rst", "autoapi/neural_compressor/tensorflow/quantization/algorithm_entry/index.rst", "autoapi/neural_compressor/tensorflow/quantization/autotune/index.rst", "autoapi/neural_compressor/tensorflow/quantization/config/index.rst", "autoapi/neural_compressor/tensorflow/quantization/index.rst", "autoapi/neural_compressor/tensorflow/quantization/quantize/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_converter/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_converter_without_calib/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/bf16/bf16_convert/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/bf16/dequantize_cast_optimizer/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/bf16/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_add_to_biasadd/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_layout/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_leakyrelu/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_nan_to_random/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_placeholder_to_const/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/dilated_contraction/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/dummy_biasadd/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/expanddims_optimizer/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fetch_weight_from_reshape/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fold_batch_norm/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fold_constant/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_biasadd_add/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_column_wise_mul/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_conv_with_math/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_decomposed_bn/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_decomposed_in/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_gelu/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_layer_norm/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_pad_with_conv/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_reshape_transpose/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/graph_cse_optimizer/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/grappler_pass/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/insert_print_node/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/move_squeeze_after_relu/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/pre_optimize/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/remove_training_nodes/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/rename_batch_norm/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/split_shared_input/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/strip_equivalent_nodes/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/strip_unused_nodes/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/switch_optimizer/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/graph_base/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/freeze_fake_quant/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/freeze_value/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/freeze_value_without_calib/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/fuse_conv_requantize/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/fuse_matmul_requantize/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/meta_op_optimizer/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/post_hostconst_converter/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/post_quantized_op_cse/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/rnn_convert/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/scale_propagation/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/qdq/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/qdq/insert_qdq_pattern/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/qdq/merge_duplicated_qdq/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/qdq/share_qdq_y_pattern/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_util/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/fake_quantize/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_config/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_helper/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_layers/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_layers/optimize_layer/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_wrapper/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_bn/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_concatv2/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_conv/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_deconv/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_in/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_matmul/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_pooling/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/optimize_qdq/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_base/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_bn/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_concatv2/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_conv/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_for_intel_cpu/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_matmul/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_pooling/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph_common/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/bias_correction/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/graph_transform_base/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/insert_logging/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/rerange_quantized_concat/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/utility/index.rst", "autoapi/neural_compressor/tensorflow/utils/constants/index.rst", "autoapi/neural_compressor/tensorflow/utils/data/index.rst", "autoapi/neural_compressor/tensorflow/utils/index.rst", "autoapi/neural_compressor/tensorflow/utils/model/index.rst", "autoapi/neural_compressor/tensorflow/utils/model_wrappers/index.rst", "autoapi/neural_compressor/tensorflow/utils/nets_factory/index.rst", "autoapi/neural_compressor/tensorflow/utils/utility/index.rst", "autoapi/neural_compressor/torch/algorithms/habana_fp8/fp8_quant/index.rst", "autoapi/neural_compressor/torch/algorithms/habana_fp8/index.rst", "autoapi/neural_compressor/torch/algorithms/habana_fp8/modules/index.rst", "autoapi/neural_compressor/torch/algorithms/habana_fp8/observer/index.rst", "autoapi/neural_compressor/torch/algorithms/index.rst", "autoapi/neural_compressor/torch/algorithms/layer_wise/index.rst", "autoapi/neural_compressor/torch/algorithms/layer_wise/load/index.rst", "autoapi/neural_compressor/torch/algorithms/layer_wise/modified_pickle/index.rst", "autoapi/neural_compressor/torch/algorithms/layer_wise/utils/index.rst", "autoapi/neural_compressor/torch/algorithms/static_quant/index.rst", "autoapi/neural_compressor/torch/algorithms/static_quant/static_quant/index.rst", "autoapi/neural_compressor/torch/algorithms/static_quant/utility/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/awq/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/gptq/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/bitpack/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/config/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/core/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/optimizer/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/qtensor/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/quant_api/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/quantizer/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/utility/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/modules/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/rtn/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/teq/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/utility/index.rst", "autoapi/neural_compressor/torch/amp/autocast/index.rst", "autoapi/neural_compressor/torch/amp/fp8/functions/index.rst", "autoapi/neural_compressor/torch/amp/fp8/index.rst", "autoapi/neural_compressor/torch/amp/index.rst", "autoapi/neural_compressor/torch/index.rst", "autoapi/neural_compressor/torch/quantization/algorithm_entry/index.rst", "autoapi/neural_compressor/torch/quantization/autotune/index.rst", "autoapi/neural_compressor/torch/quantization/config/index.rst", "autoapi/neural_compressor/torch/quantization/index.rst", "autoapi/neural_compressor/torch/quantization/modules/index.rst", "autoapi/neural_compressor/torch/quantization/quantize/index.rst", "autoapi/neural_compressor/torch/utils/auto_accelerator/index.rst", "autoapi/neural_compressor/torch/utils/constants/index.rst", "autoapi/neural_compressor/torch/utils/environ/index.rst", "autoapi/neural_compressor/torch/utils/index.rst", "autoapi/neural_compressor/torch/utils/utility/index.rst", "autoapi/neural_compressor/training/index.rst", "autoapi/neural_compressor/utils/collect_layer_histogram/index.rst", "autoapi/neural_compressor/utils/constant/index.rst", "autoapi/neural_compressor/utils/create_obj_from_config/index.rst", "autoapi/neural_compressor/utils/index.rst", "autoapi/neural_compressor/utils/kl_divergence/index.rst", "autoapi/neural_compressor/utils/load_huggingface/index.rst", "autoapi/neural_compressor/utils/logger/index.rst", "autoapi/neural_compressor/utils/neural_insights_utils/index.rst", "autoapi/neural_compressor/utils/options/index.rst", "autoapi/neural_compressor/utils/pytorch/index.rst", "autoapi/neural_compressor/utils/utility/index.rst", "autoapi/neural_compressor/utils/weights_details/index.rst", "autoapi/neural_compressor/version/index.rst", "docs/build_docs/source/index.rst", "docs/source/CODE_OF_CONDUCT.md", "docs/source/CONTRIBUTING.md", "docs/source/FX.md", "docs/source/NAS.md", "docs/source/SECURITY.md", "docs/source/Welcome.md", "docs/source/adaptor.md", "docs/source/add_new_adaptor.md", "docs/source/add_new_data_type.md", "docs/source/api-doc/adaptor.rst", "docs/source/api-doc/adaptor/onnxrt.rst", "docs/source/api-doc/adaptor/torch_utils.rst", "docs/source/api-doc/api_doc_example.rst", "docs/source/api-doc/apis.rst", "docs/source/api-doc/benchmark.rst", "docs/source/api-doc/compression.rst", "docs/source/api-doc/config.rst", "docs/source/api-doc/mix_precision.rst", "docs/source/api-doc/model.rst", "docs/source/api-doc/objective.rst", "docs/source/api-doc/quantization.rst", "docs/source/api-doc/strategy.rst", "docs/source/api-doc/training.rst", "docs/source/benchmark.md", "docs/source/calibration.md", "docs/source/coding_style.md", "docs/source/dataloader.md", "docs/source/dataset.md", "docs/source/design.md", "docs/source/diagnosis.md", "docs/source/distillation.md", "docs/source/distillation_quantization.md", "docs/source/distributed.md", "docs/source/examples_readme.md", "docs/source/export.md", "docs/source/faq.md", "docs/source/framework_yaml.md", "docs/source/get_started.md", "docs/source/incompatible_changes.md", "docs/source/infrastructure.md", "docs/source/installation_guide.md", "docs/source/legal_information.md", "docs/source/llm_recipes.md", "docs/source/metric.md", "docs/source/migration.md", "docs/source/mixed_precision.md", "docs/source/model.md", "docs/source/neural_coder/README.md", "docs/source/neural_coder/docs/AWSSageMakerSupport.md", "docs/source/neural_coder/docs/BigDLNanoSupport.md", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting.md", "docs/source/neural_coder/docs/PythonAPI.md", "docs/source/neural_coder/docs/PythonLauncher.md", "docs/source/neural_coder/docs/Quantization.md", "docs/source/neural_coder/docs/SupportMatrix.md", "docs/source/neural_coder/docs/release_notes/v0.4.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart.md", "docs/source/neural_insights/README.md", "docs/source/neural_insights/docs/source/onnx_accuracy_debug.md", "docs/source/neural_insights/docs/source/pytorch_nlp_cli_mode.md", "docs/source/neural_insights/docs/source/tf_accuracy_debug.md", "docs/source/neural_insights/gui/README.md", "docs/source/neural_solution/README.md", "docs/source/neural_solution/docs/source/README.md", "docs/source/neural_solution/docs/source/description_api.md", "docs/source/neural_solution/docs/source/ns_design_doc.md", "docs/source/neural_solution/docs/source/template/task_request_description.md", "docs/source/neural_solution/examples/README.md", "docs/source/neural_solution/examples/custom_models_optimized/tf_example1/README.md", "docs/source/neural_solution/examples/hf_models/README.md", "docs/source/neural_solution/examples/hf_models_grpc/README.md", "docs/source/neural_solution/frontend/README.md", "docs/source/objective.md", "docs/source/orchestration.md", "docs/source/pruning.md", "docs/source/publication_list.md", "docs/source/pythonic_style.md", "docs/source/quantization.md", "docs/source/quantization_layer_wise.md", "docs/source/quantization_mixed_precision.md", "docs/source/quantization_weight_only.md", "docs/source/releases_info.md", "docs/source/sigopt_strategy.md", "docs/source/smooth_quant.md", "docs/source/tensorboard.md", "docs/source/transform.md", "docs/source/tuning_strategies.md", "docs/source/user_guide.md", "docs/source/user_yaml.md", "docs/source/validated_model_list.md", "index.rst"], "titles": ["<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">block_mask</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.dense</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.depthwise_conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.pool2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.separable_conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.onnxrt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.calibration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.calibrator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.activation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.argmax</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.attention</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.binary_op</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.direct_q8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.embed_layernorm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gather</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gavgpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gemm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.lstm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.maxpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.ops</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.reduce</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.resize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.split</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.unary_op</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.weight_only</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.query</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph_common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.smooth_quant_calibration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.smooth_quant_scaler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.tf2onnx_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.insert_logging</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.auto_round</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.autoround.autoround</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.autoround.export</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.autoround</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.autoround.model_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.autoround.sign_sgd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.awq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.gptq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.hawq_metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.layer_wise_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.layer_wise_quant.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.model_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.pattern_detector</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.symbolic_trace</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.teq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.waq.auto_alpha</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.waq.calibration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.waq.graph_trace</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.waq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.waq.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.waq.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.weight_only</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.fast_bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.weight_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.common.base_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.common.base_tuning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.common.tuning_param</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.common.utils.constants</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.common.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.common.utils.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.common.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.callbacks</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation.criterions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation.optimizers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.hpo</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.hpo.sa_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.hpo.search_algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.hpo.search_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.criteria</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.dsnot</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.auto_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.pattern_analyzer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.weight_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns.base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns.mha</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns.ninm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns.nxm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.block_mask</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.mha</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.pattern_lock</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.progressive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.retrain_free</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.sparse_gpt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.regs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.schedulers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.tf_criteria</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.wanda</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.wanda.prune</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.wanda.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.wanda.wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.dotdict</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.pythonic_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.sigopt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.tpe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.coco_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.criterion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.component</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.compression</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib.strategy.sigopt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib.strategy.tpe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.distillation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.qlinear2qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.tf2onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.torch2onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.model_conversion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.basic_nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.search_algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.gradient_sensitivity</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.group_lasso</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.magnitude</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.pattern_lock</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.tile_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.prune_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.auto_mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.bayesian</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.exhaustive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.mse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.mse_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.tuning_sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.tuning_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.tuning_structs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.mix_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.base_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.keras_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.mxnet_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.nets_factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.onnx_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.tensorflow_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.torch_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.objective</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.algorithms.layer_wise.core</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.algorithms.layer_wise</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.algorithms.smoother.calibrator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.algorithms.smoother.core</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.algorithms.smoother</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.algorithms.weight_only.awq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.algorithms.weight_only.gptq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.algorithms.weight_only</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.algorithms.weight_only.rtn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.algorithms.weight_only.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.quantization.algorithm_entry</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.quantization.autotune</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.quantization.calibrate</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.quantization.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.quantization.quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.utils.onnx_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.onnx_parser.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.onnx_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.onnx_parser.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.tensorflow_parser.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.tensorflow_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.tensorflow_parser.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.auto</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.auto_mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.bayesian</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.conservative</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.exhaustive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.hawq_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_structs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.template.api_doc_example</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.template</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.smoother.calibration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.smoother.core</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.smoother</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.smoother.scaler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.static_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.static_quant.keras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.static_quant.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.keras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.keras.layers.conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.keras.layers.dense</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.keras.layers.depthwise_conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.keras.layers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.keras.layers.pool2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.keras.layers.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.keras.layers.separable_conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.keras.quantization.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.keras.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.algorithm_entry</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.autotune</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_converter_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.dequantize_cast_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_fake_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.meta_op_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_hostconst_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_quantized_op_cse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.rnn_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.scale_propagation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.insert_qdq_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.merge_duplicated_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.share_qdq_y_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.fake_quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.qat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_helper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.optimize_layer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_deconv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.optimize_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_for_intel_cpu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph_common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.transform_graph.bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.transform_graph.graph_transform_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.transform_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.transform_graph.insert_logging</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.transform_graph.rerange_quantized_concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.utils.constants</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.utils.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.utils.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.utils.model_wrappers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.utils.nets_factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.habana_fp8.fp8_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.habana_fp8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.habana_fp8.modules</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.habana_fp8.observer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.layer_wise</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.layer_wise.load</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.layer_wise.modified_pickle</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.layer_wise.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.static_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.static_quant.static_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.static_quant.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only.awq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only.gptq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only.hqq.bitpack</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only.hqq.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only.hqq.core</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only.hqq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only.hqq.optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only.hqq.qtensor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only.hqq.quant_api</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only.hqq.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only.hqq.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only.modules</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only.rtn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only.teq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.amp.autocast</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.amp.fp8.functions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.amp.fp8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.amp</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.quantization.algorithm_entry</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.quantization.autotune</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.quantization.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.quantization.modules</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.quantization.quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.utils.auto_accelerator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.utils.constants</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.utils.environ</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.training</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.collect_layer_histogram</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.create_obj_from_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.kl_divergence</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.load_huggingface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.neural_insights_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.options</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.weights_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.version</span></code>", "Intel\u00ae Neural Compressor Documentation", "Contributor Covenant Code of Conduct", "Contribution Guidelines", "FX", "Neural Architecture Search", "Security Policy", "Intel\u00ae Neural Compressor", "Adaptor", "How to Add An Adaptor", "How to Support New Data Type, Like Int4, with a Few Line Changes", "Adaptor", "ONNX Runtime", "Torch Utils", "API Document Example", "APIs", "Benchmark", "Compression", "Config", "Mix Precision", "Model", "Objective", "Quantization", "Strategy", "Training", "Benchmarking", "Calibration Algorithms in Quantization", "INC Coding Conventions", "DataLoader", "Dataset", "Design", "Diagnosis", "Distillation", "Distillation for Quantization", "Distributed Training and Inference (Evaluation)", "Examples", "Export", "Frequently Asked Questions", "Framework YAML Configuration Files", "Getting Started", "Incompatible changes between v1.2 and v1.1", "Infrastructure of Intel\u00ae Neural Compressor", "Installation", "Legal Information", "LLMs Quantization Recipes", "Metrics", "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X", "Mixed Precision", "Model", "Neural Coder", "AWS Amazon SageMaker Support", "BigDL Nano Support", "Intel CPU Platforms: Best Performance Setting", "Neural Coder as Python API", "Python Launcher", "Neural Coder for Quantization", "Supported Optimization Features", "v0.4", "Changelog", "neural_compressor_ext_lab", "Intel\u00ae Neural Compressor as JupyterLab Extension", "Making a new release of neural_compressor_ext_lab", "Changelog", "neural_compressor_ext_lab_alibaba", "Making a new release of neural_compressor_ext_lab_alibaba", "Change Log", "Neural Coder", "Welcome to your VS Code Extension", "Neural Insights", "Step by step example how to debug accuracy with Neural Insights", "Step by step example how to dump weights data for PyTorch model with Neural Insights", "Step by step example how to debug accuracy with Neural Insights", "Getting Started with Create React App", "What\u2019s Neural Solution?", "Get started", "Neural Solution API", "Design Doc for Optimization as a Service [WIP]", "Task request description", "Examples List", "An end-to-end example: quantize a custom model with Neural Solution", "An end-to-end example: quantize a Hugging Face model with Neural Solution", "An end-to-end example: quantize a Hugging Face model with Neural Solution gRPC API", "Client", "Objective", "Optimization Orchestration", "Pruning", "Full Publications/Events (79)", "Pythonic Style Access for Configurations", "Quantization", "Layer Wise Quantization (LWQ)", "Turn OFF Auto Mixed Precision during Quantization", "Weight Only Quantization (WOQ)", "Release", "SigOpt Strategy", "Smooth Quant", "TensorBoard", "Transform", "Tuning Strategies", "User Guide", "User YAML Configuration Files", "Validated Models", "Intel\u00ae Neural Compressor Documentation"], "terms": {"block": [0, 44, 150, 167, 170, 177, 202, 213, 216, 221, 227, 347, 388, 396, 399, 451, 588, 589, 604, 675, 717, 719, 725, 731], "mask": [0, 202, 209, 211, 214, 216, 220, 221, 251, 294, 320, 349, 373, 719, 734], "adaptor_registri": [1, 642], "cl": [1, 164, 178, 193, 195, 199, 200, 209, 214, 223, 224, 225, 253, 260, 268, 270, 275, 296, 303, 309, 331, 338, 342, 347, 349, 351, 362, 377, 388, 444, 576, 585, 632, 661], "sourc": [1, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 113, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 150, 151, 154, 155, 156, 157, 158, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 187, 190, 191, 192, 193, 195, 196, 199, 200, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 235, 236, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 282, 283, 284, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 306, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 336, 337, 338, 339, 342, 343, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 365, 366, 367, 368, 369, 370, 371, 373, 374, 375, 377, 378, 379, 381, 382, 383, 384, 385, 386, 387, 388, 390, 392, 393, 395, 396, 398, 399, 401, 402, 403, 404, 408, 409, 411, 413, 415, 416, 417, 418, 420, 421, 423, 425, 426, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 447, 448, 449, 450, 451, 454, 455, 457, 459, 460, 470, 472, 473, 474, 476, 477, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 525, 526, 527, 528, 529, 531, 532, 533, 534, 537, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 569, 571, 573, 574, 575, 576, 583, 584, 585, 587, 588, 589, 590, 592, 599, 601, 602, 603, 604, 605, 610, 611, 612, 615, 616, 620, 621, 622, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 638, 641, 677, 680, 693, 695, 697, 698, 700, 720], "The": [1, 3, 11, 14, 16, 34, 54, 74, 113, 119, 121, 140, 148, 150, 151, 154, 163, 165, 170, 176, 177, 178, 183, 184, 185, 187, 191, 192, 193, 195, 199, 200, 202, 203, 207, 209, 211, 212, 214, 215, 216, 221, 222, 223, 224, 225, 226, 227, 232, 233, 235, 236, 239, 240, 241, 251, 252, 253, 254, 255, 259, 260, 268, 270, 273, 275, 278, 282, 283, 284, 294, 295, 296, 297, 298, 302, 303, 309, 310, 315, 317, 318, 319, 321, 322, 324, 326, 327, 328, 330, 331, 333, 334, 336, 337, 338, 339, 342, 344, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 366, 368, 370, 371, 372, 374, 375, 377, 378, 386, 388, 401, 402, 409, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 448, 450, 451, 454, 455, 459, 472, 473, 476, 483, 503, 537, 543, 545, 569, 571, 574, 576, 583, 588, 599, 605, 610, 611, 615, 620, 621, 622, 624, 626, 627, 631, 632, 633, 636, 638, 639, 642, 643, 644, 645, 647, 651, 654, 657, 659, 660, 661, 662, 663, 665, 666, 668, 670, 672, 674, 675, 676, 678, 679, 680, 681, 682, 685, 686, 688, 691, 693, 694, 695, 697, 698, 700, 701, 702, 703, 705, 706, 707, 708, 709, 710, 711, 713, 717, 718, 719, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734], "decor": [1, 16, 34, 67, 68, 70, 148, 176, 178, 184, 191, 195, 199, 200, 209, 214, 223, 225, 268, 275, 309, 324, 331, 338, 342, 347, 349, 351, 362, 365, 377, 388, 409, 444, 496, 497, 499, 569, 576, 599, 605, 620, 632, 638, 639, 642, 731], "us": [1, 13, 16, 34, 42, 43, 44, 48, 49, 70, 103, 105, 116, 141, 150, 151, 154, 158, 163, 165, 170, 177, 183, 193, 195, 199, 200, 202, 207, 209, 214, 218, 219, 223, 225, 226, 229, 233, 235, 236, 239, 240, 249, 250, 251, 252, 253, 254, 255, 258, 267, 268, 269, 270, 275, 282, 283, 292, 293, 294, 295, 296, 297, 298, 301, 308, 309, 313, 314, 315, 317, 318, 320, 324, 325, 326, 331, 338, 339, 342, 344, 347, 349, 350, 351, 352, 353, 356, 359, 362, 365, 366, 370, 371, 373, 377, 388, 395, 396, 398, 399, 409, 426, 431, 432, 436, 439, 441, 444, 448, 450, 451, 457, 459, 460, 476, 477, 478, 499, 540, 571, 576, 583, 587, 588, 589, 602, 604, 605, 615, 616, 620, 621, 622, 623, 624, 625, 627, 632, 636, 637, 638, 639, 642, 643, 659, 660, 661, 663, 665, 666, 667, 668, 670, 672, 674, 676, 677, 680, 681, 682, 683, 684, 685, 687, 688, 691, 693, 695, 697, 698, 700, 702, 703, 704, 705, 706, 713, 714, 715, 717, 719, 720, 721, 722, 723, 724, 725, 726, 727, 729, 730, 731, 733, 734], "regist": [1, 16, 34, 161, 163, 176, 178, 184, 193, 195, 199, 200, 202, 204, 209, 210, 214, 217, 223, 224, 225, 226, 253, 260, 268, 270, 275, 296, 303, 309, 324, 331, 338, 342, 347, 349, 351, 362, 365, 377, 388, 409, 444, 450, 470, 576, 583, 584, 616, 620, 629, 639, 642, 661, 663, 668, 679, 680, 701, 717, 728, 731], "all": [1, 13, 16, 34, 44, 45, 63, 97, 157, 163, 164, 170, 177, 178, 180, 183, 184, 192, 195, 200, 204, 209, 217, 227, 235, 236, 241, 242, 249, 253, 260, 268, 269, 275, 278, 284, 292, 296, 303, 309, 314, 317, 320, 322, 324, 331, 338, 342, 343, 347, 353, 362, 365, 370, 373, 375, 377, 379, 388, 444, 450, 470, 492, 526, 571, 574, 576, 583, 585, 588, 589, 590, 624, 632, 636, 637, 641, 642, 643, 644, 661, 662, 663, 668, 672, 676, 680, 683, 691, 694, 695, 698, 699, 700, 701, 702, 705, 706, 708, 709, 713, 714, 715, 718, 719, 720, 722, 724, 725, 728, 730, 731], "subclass": [1, 16, 34, 176, 178, 195, 199, 200, 209, 214, 223, 225, 246, 250, 253, 260, 268, 275, 289, 293, 296, 303, 309, 324, 331, 338, 342, 347, 349, 351, 362, 365, 377, 388, 444, 642], "paramet": [1, 11, 13, 14, 16, 42, 43, 44, 45, 67, 68, 70, 86, 105, 116, 132, 140, 141, 148, 150, 151, 154, 156, 157, 158, 163, 164, 168, 170, 176, 177, 178, 183, 184, 185, 187, 191, 192, 193, 195, 197, 199, 200, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 230, 232, 233, 235, 236, 239, 240, 250, 251, 253, 260, 264, 268, 270, 275, 282, 283, 293, 294, 296, 303, 306, 309, 310, 312, 313, 314, 315, 317, 318, 320, 321, 322, 324, 326, 327, 328, 330, 331, 332, 333, 334, 336, 337, 338, 339, 342, 344, 347, 348, 349, 350, 351, 352, 356, 362, 366, 368, 370, 371, 373, 374, 375, 377, 378, 382, 386, 388, 390, 395, 396, 398, 399, 402, 409, 426, 431, 432, 436, 444, 448, 450, 451, 454, 457, 472, 476, 496, 497, 499, 515, 540, 556, 569, 574, 576, 583, 585, 587, 588, 589, 590, 599, 602, 604, 605, 615, 616, 620, 621, 624, 627, 628, 629, 631, 632, 638, 643, 662, 663, 666, 668, 675, 679, 680, 694, 700, 701, 702, 703, 708, 713, 714, 719, 722, 723, 725, 727, 728, 730, 731, 733], "framework_specific_info": [1, 3, 11, 14, 45, 47, 459, 460, 642], "base": [1, 11, 13, 14, 16, 34, 46, 47, 86, 105, 116, 120, 122, 132, 144, 150, 154, 158, 161, 167, 170, 178, 184, 185, 192, 199, 200, 201, 202, 204, 210, 217, 224, 226, 236, 241, 244, 249, 251, 253, 260, 268, 278, 284, 287, 292, 294, 296, 303, 309, 324, 330, 332, 338, 339, 342, 344, 349, 359, 362, 366, 377, 379, 386, 387, 388, 395, 403, 441, 444, 448, 460, 515, 540, 544, 546, 556, 565, 571, 574, 584, 588, 639, 641, 642, 643, 644, 661, 663, 667, 668, 672, 680, 681, 688, 689, 691, 700, 703, 708, 711, 714, 715, 719, 720, 722, 725, 727, 728, 729, 731, 734], "framework": [1, 3, 11, 13, 14, 45, 154, 183, 184, 193, 195, 204, 210, 214, 217, 221, 222, 223, 237, 238, 242, 243, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 262, 265, 268, 270, 271, 275, 280, 281, 285, 286, 288, 290, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 305, 307, 309, 315, 324, 325, 352, 360, 366, 377, 378, 379, 380, 382, 442, 448, 459, 470, 624, 641, 642, 644, 660, 661, 665, 668, 669, 673, 674, 675, 676, 679, 680, 681, 702, 703, 719, 720, 722, 726, 729, 730, 731, 732, 733, 734], "layer": [1, 3, 11, 14, 46, 47, 116, 117, 118, 119, 121, 122, 150, 157, 160, 162, 164, 175, 176, 177, 181, 193, 196, 205, 207, 208, 209, 213, 218, 227, 230, 231, 235, 236, 270, 277, 347, 348, 390, 396, 398, 459, 460, 540, 541, 542, 543, 545, 546, 576, 582, 585, 590, 602, 622, 624, 632, 641, 642, 643, 644, 667, 675, 703, 719, 725, 726, 732], "mxnet_util": 2, "util": [2, 12, 17, 105, 110, 111, 139, 142, 156, 158, 159, 160, 168, 184, 194, 201, 204, 228, 235, 236, 277, 316, 318, 348, 358, 369, 371, 390, 392, 393, 395, 396, 398, 404, 424, 429, 440, 472, 473, 476, 581, 582, 612, 643, 644, 645, 660, 661, 668, 680, 683, 703, 719, 722, 731, 732], "ox_util": 2, "oper": [2, 17, 43, 104, 110, 140, 148, 207, 208, 213, 231, 235, 236, 264, 306, 347, 426, 431, 454, 534, 569, 638, 659, 662, 665, 670, 700, 706, 719, 722, 725, 728, 730, 731], "activ": [2, 17, 29, 44, 141, 155, 170, 177, 196, 235, 236, 277, 366, 395, 448, 450, 457, 589, 642, 643, 644, 660, 665, 667, 672, 680, 701, 702, 705, 713, 714, 715, 721, 722, 725, 728, 729, 733], "argmax": [2, 17, 29], "attent": [2, 17, 29, 167, 205, 207, 218, 235, 236, 251, 294, 588, 636, 666, 719], "binary_op": [2, 17, 29], "concat": [2, 17, 29, 147, 568], "conv": [2, 17, 29, 58, 62, 66, 71, 72, 73, 92, 109, 181, 235, 236, 404, 487, 491, 495, 500, 501, 502, 521, 533, 638, 643, 644, 680, 719, 721, 722, 731], "direct_q8": [2, 17, 29], "embed_layernorm": [2, 17, 29], "gather": [2, 13, 17, 29, 235, 236, 347], "gavgpool": [2, 17, 29], "gemm": [2, 17, 29, 235, 236, 404], "lstm": [2, 17, 29], "matmul": [2, 17, 29, 44, 53, 59, 65, 73, 94, 109, 128, 137, 213, 235, 236, 347, 395, 396, 398, 399, 404, 474, 482, 488, 494, 502, 523, 533, 552, 561, 672, 703, 725, 731], "maxpool": [2, 17, 29, 129, 138, 553, 562, 672], "norm": [2, 17, 29], "op": [2, 13, 17, 29, 45, 51, 53, 65, 66, 67, 68, 69, 70, 71, 72, 74, 78, 81, 85, 88, 91, 92, 93, 94, 96, 105, 107, 109, 123, 124, 125, 131, 133, 134, 135, 136, 141, 143, 146, 148, 156, 158, 168, 170, 177, 181, 207, 235, 236, 314, 359, 366, 367, 426, 431, 437, 439, 441, 448, 449, 450, 457, 480, 482, 494, 495, 496, 497, 498, 499, 500, 501, 503, 507, 510, 514, 517, 520, 521, 522, 523, 525, 531, 533, 547, 548, 549, 555, 557, 558, 559, 560, 564, 567, 569, 587, 588, 604, 605, 620, 626, 632, 642, 643, 644, 665, 672, 680, 681, 704, 705, 719, 722, 724, 726, 728, 729, 731, 733], "pad": [2, 17, 29, 44, 71, 72, 251, 268, 294, 309, 399, 500, 501, 663, 730], "pool": [2, 17, 29, 710], "reduc": [2, 17, 29, 235, 236, 642, 660, 667, 680, 681, 700, 701, 719, 720, 722, 723, 724, 725, 728, 731, 733], "resiz": [2, 17, 29, 251, 252, 264, 268, 294, 295, 306, 309, 663, 730], "split": [2, 17, 29, 43, 82, 150, 177, 267, 268, 308, 309, 511, 589, 602, 638, 723, 725, 728, 730], "unary_op": [2, 17, 29], "calibr": [2, 11, 13, 14, 17, 44, 49, 89, 90, 140, 170, 177, 183, 235, 236, 239, 240, 282, 283, 315, 352, 390, 393, 394, 395, 396, 399, 401, 402, 432, 456, 472, 476, 478, 518, 519, 587, 589, 604, 615, 626, 642, 644, 663, 674, 675, 719, 722, 725, 731, 732, 733], "quantiz": [2, 11, 13, 14, 16, 17, 42, 43, 44, 48, 49, 88, 92, 94, 96, 99, 107, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 150, 151, 155, 156, 157, 158, 159, 160, 164, 165, 166, 169, 170, 175, 177, 181, 183, 185, 190, 192, 235, 236, 239, 240, 264, 271, 278, 282, 283, 306, 314, 315, 316, 326, 353, 359, 365, 369, 390, 392, 393, 395, 396, 398, 399, 409, 437, 439, 441, 450, 454, 455, 457, 459, 460, 582, 585, 587, 588, 589, 590, 597, 601, 602, 603, 604, 621, 622, 626, 627, 631, 632, 642, 649, 661, 662, 663, 668, 669, 672, 674, 675, 679, 682, 683, 688, 690, 691, 694, 707, 709, 710, 712, 718, 720, 726, 729, 730, 731, 732, 733], "smooth_quant": [2, 17, 162, 170, 180, 235, 236, 369, 661, 722, 728], "weight_onli": [2, 17, 236, 631, 661, 723, 725], "tf_util": 2, "graph_rewrit": [2, 111], "bf16": [2, 44, 87, 111, 156, 235, 236, 366, 395, 396, 398, 399, 448, 516, 642, 643, 672, 680, 685, 690, 694, 700, 724, 731, 734], "gener": [2, 13, 48, 49, 87, 111, 122, 148, 157, 170, 183, 187, 207, 227, 239, 240, 241, 250, 253, 254, 255, 256, 268, 282, 283, 284, 293, 296, 297, 298, 299, 309, 317, 325, 356, 370, 378, 404, 427, 432, 436, 451, 470, 474, 477, 478, 516, 546, 569, 571, 590, 612, 621, 637, 638, 642, 644, 662, 666, 679, 680, 681, 683, 688, 693, 695, 697, 698, 700, 702, 703, 717, 719, 720, 722, 724, 725, 728, 729, 730, 731], "int8": [2, 18, 19, 43, 44, 87, 111, 123, 124, 125, 131, 133, 134, 135, 136, 143, 148, 177, 182, 183, 235, 236, 264, 306, 312, 313, 314, 366, 368, 395, 396, 398, 399, 409, 448, 450, 470, 474, 516, 547, 548, 549, 555, 557, 558, 559, 560, 564, 569, 604, 631, 632, 637, 638, 641, 642, 643, 644, 659, 663, 667, 672, 678, 680, 681, 685, 688, 690, 691, 694, 700, 703, 705, 720, 721, 722, 724, 725, 726, 727, 728, 729, 730, 733], "onnx": [2, 14, 15, 16, 29, 41, 43, 44, 87, 111, 142, 181, 235, 236, 247, 290, 312, 313, 314, 378, 385, 390, 393, 395, 396, 398, 399, 401, 402, 408, 409, 426, 630, 637, 641, 642, 643, 645, 662, 665, 669, 670, 672, 673, 675, 681, 682, 685, 690, 691, 703, 720, 721, 725, 726, 728, 731], "qdq": [2, 42, 87, 111, 112, 113, 142, 170, 177, 235, 236, 312, 313, 314, 516, 535, 536, 537, 604, 642, 665, 670, 675, 690, 691, 722, 726, 728], "graph_bas": [2, 87, 111, 516], "quantize_graph": [2, 111, 535], "qat": [2, 111, 112, 168, 236, 326, 386, 535, 536, 574, 667, 668, 675, 680, 722], "quantize_graph_bas": [2, 111, 112, 535, 536], "quantize_graph_bn": [2, 111, 112, 535, 536], "quantize_graph_concatv2": [2, 111, 112, 535, 536], "quantize_graph_conv": [2, 111, 112, 535, 536], "quantize_graph_for_intel_cpu": [2, 111, 112, 535, 536], "quantize_graph_matmul": [2, 111, 112, 535, 536], "quantize_graph_pool": [2, 111, 112, 535, 536], "transform_graph": [2, 111, 535], "bias_correct": [2, 111, 145, 535, 566], "graph_transform_bas": [2, 111, 145, 535, 566], "insert_log": [2, 111, 145, 535, 566], "rerange_quantized_concat": [2, 111, 145, 535, 566], "graph_convert": [2, 111, 535], "graph_converter_without_calib": [2, 111, 535], "graph_util": [2, 111, 535], "quantize_graph_common": [2, 111, 535], "smooth_quant_calibr": [2, 111], "smooth_quant_scal": [2, 111], "tf2onnx_convert": [2, 111], "torch_util": [2, 272, 316, 369, 723, 728], "layer_wise_qu": [2, 159, 236, 390, 404, 723], "modified_pickl": [2, 159, 160, 581, 582], "torch_load": [2, 159, 160], "bf16_convert": [2, 52, 87, 111, 159, 481, 516], "hawq_metr": [2, 159], "model_wrapp": [2, 15, 152, 159, 572], "pattern_detector": [2, 159], "symbolic_trac": [2, 159], "tensorflow": [2, 52, 54, 75, 76, 77, 87, 95, 101, 102, 103, 104, 105, 106, 110, 111, 112, 114, 117, 130, 140, 141, 142, 145, 148, 193, 195, 226, 235, 236, 250, 251, 252, 253, 256, 258, 260, 268, 275, 293, 294, 295, 296, 299, 301, 303, 309, 313, 314, 315, 318, 320, 324, 325, 326, 352, 360, 371, 373, 377, 378, 386, 425, 426, 430, 431, 432, 442, 632, 637, 639, 641, 642, 643, 660, 661, 662, 665, 666, 667, 669, 672, 673, 675, 676, 680, 681, 682, 690, 691, 702, 705, 719, 720, 721, 727, 728, 731, 733], "kerasadaptor": [3, 459], "mxnetadaptor": 11, "do": [11, 14, 154, 157, 192, 223, 235, 236, 250, 251, 293, 294, 310, 314, 317, 320, 350, 370, 373, 590, 631, 636, 643, 661, 663, 668, 672, 675, 679, 680, 695, 698, 719, 724, 726, 728, 731], "inspect": [11, 14, 726, 729], "tensor": [11, 13, 14, 15, 16, 43, 44, 70, 105, 140, 148, 150, 151, 154, 158, 163, 164, 170, 177, 202, 204, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 226, 236, 268, 309, 312, 314, 347, 349, 359, 386, 399, 441, 454, 499, 569, 574, 576, 583, 585, 588, 604, 605, 627, 631, 632, 638, 644, 661, 662, 663, 665, 719, 722, 726, 729, 730, 731], "dict": [11, 13, 14, 44, 45, 116, 148, 150, 151, 154, 156, 157, 158, 163, 170, 177, 178, 183, 195, 199, 202, 204, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 230, 233, 235, 236, 239, 240, 250, 269, 275, 282, 283, 293, 312, 314, 319, 320, 321, 322, 324, 327, 330, 331, 332, 339, 342, 344, 347, 348, 349, 350, 351, 356, 359, 365, 368, 372, 373, 374, 375, 377, 378, 386, 390, 395, 396, 398, 402, 404, 432, 447, 450, 451, 460, 470, 473, 474, 540, 569, 574, 576, 583, 588, 589, 590, 602, 604, 610, 611, 621, 622, 624, 631, 632, 638, 643, 661, 670, 679, 719, 721, 722, 728, 729, 731], "specif": [11, 14, 42, 46, 104, 116, 154, 177, 183, 184, 195, 227, 231, 235, 236, 251, 252, 253, 254, 258, 260, 275, 294, 295, 296, 297, 301, 303, 333, 334, 336, 337, 338, 377, 432, 540, 571, 602, 605, 629, 636, 639, 642, 643, 660, 661, 662, 665, 666, 672, 674, 678, 679, 680, 681, 682, 683, 687, 688, 690, 694, 700, 702, 708, 717, 719, 721, 725, 731, 733], "configur": [11, 13, 14, 45, 118, 150, 156, 170, 177, 183, 184, 227, 232, 235, 236, 239, 240, 242, 253, 256, 269, 274, 282, 283, 296, 299, 310, 314, 315, 326, 327, 328, 330, 339, 344, 348, 352, 353, 359, 377, 378, 388, 432, 441, 450, 472, 476, 542, 588, 602, 615, 621, 623, 624, 630, 631, 638, 639, 642, 643, 663, 665, 680, 687, 701, 708, 713, 714, 715, 717, 719, 722, 725, 726, 728, 730, 731, 734], "mxnetqueri": 11, "local_config_fil": [11, 14, 47, 459, 460], "defin": [11, 14, 46, 86, 154, 158, 187, 199, 200, 207, 209, 214, 215, 216, 221, 222, 223, 224, 225, 235, 236, 239, 240, 282, 283, 327, 328, 330, 331, 332, 339, 344, 347, 348, 349, 351, 378, 403, 432, 515, 621, 631, 636, 639, 642, 643, 662, 663, 666, 667, 672, 675, 679, 680, 701, 718, 719, 722, 725, 727, 728, 729, 731, 733], "queri": [11, 13, 14, 47, 148, 170, 207, 218, 235, 236, 459, 460, 569, 588, 643, 644, 710, 722], "interfac": [11, 14, 46, 86, 113, 232, 315, 339, 344, 352, 353, 515, 537, 624, 675, 680, 691, 709, 722, 726], "each": [11, 14, 46, 141, 148, 158, 163, 170, 177, 227, 235, 236, 249, 253, 256, 264, 268, 292, 296, 299, 306, 309, 318, 320, 321, 322, 359, 371, 373, 374, 375, 441, 457, 569, 583, 604, 632, 637, 642, 643, 644, 661, 663, 665, 666, 667, 672, 680, 685, 691, 694, 700, 708, 710, 717, 719, 723, 725, 727, 729, 730, 731, 732], "adapt": [11, 14, 46, 150, 636, 641, 643, 663, 691, 720], "should": [11, 14, 46, 55, 115, 116, 163, 192, 205, 207, 218, 235, 236, 239, 240, 249, 251, 253, 268, 273, 282, 283, 292, 294, 296, 309, 314, 318, 371, 377, 378, 432, 451, 484, 539, 540, 583, 605, 621, 632, 638, 639, 642, 643, 644, 663, 666, 668, 679, 680, 686, 695, 698, 700, 702, 703, 717, 719, 722, 725, 730, 731, 733], "implement": [11, 14, 46, 110, 143, 147, 154, 155, 163, 239, 240, 246, 249, 250, 251, 253, 282, 283, 289, 292, 293, 294, 296, 317, 370, 378, 388, 432, 439, 534, 564, 568, 583, 621, 644, 662, 663, 679, 680, 691, 701, 719, 722, 725, 726, 729, 731, 733], "inherit": [11, 14, 46, 192, 193, 219, 220, 225, 235, 248, 268, 270, 278, 291, 309, 349, 351, 616, 639, 642, 643, 663], "backend": [11, 14, 15, 41, 42, 46, 181, 195, 235, 236, 237, 238, 242, 243, 247, 251, 252, 254, 255, 256, 257, 258, 262, 265, 268, 274, 275, 280, 281, 285, 286, 288, 290, 294, 295, 297, 298, 299, 300, 301, 305, 307, 309, 325, 360, 378, 379, 380, 382, 442, 638, 644, 665, 668, 674, 675, 680, 681, 689, 708, 713, 714, 715, 721, 725, 730, 731, 733], "own": [11, 14, 46, 74, 163, 249, 268, 292, 309, 388, 503, 583, 639, 643, 662, 663, 675, 679, 702, 706, 717, 725, 727, 732], "mxnet": [12, 13, 16, 236, 246, 250, 253, 256, 260, 268, 289, 293, 296, 299, 303, 309, 315, 324, 352, 377, 378, 383, 432, 637, 641, 642, 643, 660, 662, 669, 672, 675, 676, 680, 681, 682, 721, 731, 733], "init": [12, 17, 42, 180, 194, 204, 206, 228, 663, 679, 731], "optyp": [13, 235, 236, 312, 643], "enum": 13, "type": [13, 16, 42, 43, 44, 45, 74, 96, 105, 116, 122, 132, 140, 148, 150, 156, 157, 158, 163, 170, 177, 178, 187, 193, 195, 199, 200, 203, 207, 208, 209, 214, 223, 224, 225, 227, 230, 233, 235, 236, 249, 251, 253, 260, 268, 270, 275, 292, 294, 296, 303, 309, 314, 317, 318, 320, 324, 331, 338, 342, 347, 349, 351, 356, 362, 366, 368, 370, 371, 373, 377, 386, 388, 390, 395, 396, 398, 399, 409, 436, 437, 444, 448, 450, 451, 454, 472, 476, 503, 525, 540, 546, 556, 569, 574, 576, 583, 588, 589, 590, 602, 604, 605, 620, 631, 632, 642, 643, 663, 665, 668, 670, 672, 675, 680, 681, 701, 703, 708, 709, 713, 714, 722, 723, 725, 727, 730, 731, 732, 733], "isiter": 13, "obj": [13, 105, 204, 227, 250, 293, 310, 315, 326, 327, 328, 330, 339, 344, 348, 352, 378, 388, 432, 621, 624, 632], "bool": [13, 42, 43, 44, 141, 148, 150, 151, 154, 157, 163, 168, 170, 177, 191, 203, 209, 235, 236, 251, 253, 264, 268, 294, 296, 306, 309, 314, 318, 324, 347, 365, 371, 377, 395, 396, 398, 404, 409, 447, 451, 457, 470, 474, 569, 583, 589, 590, 602, 604, 605, 612, 615, 627, 631, 632, 662, 663, 679, 711, 721, 730], "check": [13, 44, 67, 68, 105, 148, 150, 170, 177, 227, 242, 253, 296, 312, 348, 409, 496, 497, 569, 576, 589, 631, 632, 641, 665, 668, 676, 684, 686, 688, 695, 698, 699, 703, 706, 709, 710, 726], "whether": [13, 43, 44, 105, 116, 148, 150, 151, 154, 157, 163, 170, 177, 209, 235, 236, 249, 251, 264, 268, 292, 294, 306, 309, 318, 320, 324, 347, 371, 373, 377, 395, 396, 398, 409, 540, 569, 576, 583, 587, 589, 590, 602, 604, 605, 624, 627, 631, 632, 642, 663, 679, 722, 725, 728, 730], "object": [13, 42, 43, 44, 45, 74, 86, 105, 116, 132, 148, 150, 154, 156, 158, 161, 163, 168, 170, 183, 192, 202, 204, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 232, 233, 235, 236, 239, 240, 241, 251, 252, 253, 268, 269, 271, 282, 283, 284, 294, 295, 296, 309, 310, 315, 320, 328, 330, 333, 334, 336, 337, 338, 339, 344, 347, 348, 349, 350, 351, 352, 356, 369, 373, 377, 378, 386, 387, 426, 431, 432, 436, 450, 503, 515, 540, 556, 569, 571, 574, 576, 583, 584, 588, 592, 604, 620, 621, 624, 631, 632, 638, 639, 643, 649, 659, 661, 662, 663, 671, 679, 680, 682, 718, 719, 721, 722, 730, 731, 732, 734], "i": [13, 43, 44, 45, 48, 49, 51, 54, 55, 60, 64, 70, 82, 85, 105, 132, 143, 148, 150, 151, 154, 157, 158, 161, 163, 165, 168, 170, 177, 182, 183, 185, 187, 192, 195, 196, 202, 203, 207, 208, 214, 219, 220, 221, 222, 223, 224, 226, 227, 235, 236, 239, 240, 241, 249, 250, 251, 252, 253, 254, 255, 258, 260, 264, 268, 269, 271, 275, 277, 278, 282, 283, 284, 292, 293, 294, 295, 296, 297, 298, 301, 303, 306, 309, 317, 320, 322, 324, 326, 331, 339, 344, 348, 349, 353, 360, 370, 373, 375, 377, 378, 388, 399, 402, 409, 415, 416, 420, 432, 437, 442, 450, 451, 477, 478, 480, 483, 484, 489, 493, 499, 511, 514, 556, 564, 569, 571, 576, 583, 584, 588, 589, 590, 592, 602, 604, 605, 621, 627, 631, 632, 636, 637, 638, 639, 642, 643, 644, 645, 647, 651, 654, 657, 659, 660, 661, 662, 663, 665, 666, 667, 668, 670, 671, 672, 675, 676, 677, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 691, 693, 694, 695, 697, 698, 700, 701, 702, 703, 705, 706, 707, 708, 709, 710, 711, 713, 715, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 733, 734], "iter": [13, 15, 105, 140, 148, 150, 154, 170, 177, 183, 208, 214, 221, 225, 235, 236, 239, 240, 244, 249, 253, 254, 271, 282, 283, 287, 292, 296, 297, 349, 351, 378, 392, 432, 454, 472, 476, 569, 571, 588, 589, 592, 604, 621, 624, 638, 639, 642, 659, 662, 663, 680, 719, 721, 722, 728, 729, 731, 733], "return": [13, 16, 44, 45, 54, 67, 68, 70, 74, 105, 116, 148, 150, 154, 156, 157, 158, 163, 168, 170, 176, 177, 178, 183, 193, 195, 199, 200, 203, 204, 207, 209, 210, 214, 217, 223, 224, 225, 227, 230, 233, 239, 240, 253, 260, 264, 268, 269, 270, 275, 282, 283, 296, 303, 306, 309, 314, 317, 318, 320, 321, 322, 324, 330, 331, 338, 342, 347, 348, 349, 351, 356, 362, 366, 368, 370, 371, 373, 374, 375, 377, 378, 382, 386, 388, 390, 395, 396, 398, 399, 404, 409, 426, 431, 432, 436, 444, 448, 450, 451, 470, 472, 474, 476, 483, 496, 497, 499, 503, 540, 569, 574, 576, 583, 587, 588, 589, 590, 592, 602, 604, 612, 615, 620, 621, 624, 629, 631, 632, 638, 639, 643, 644, 662, 663, 668, 679, 682, 713, 714, 715, 717, 719, 722, 725, 728, 729, 731], "true": [13, 43, 44, 85, 113, 146, 148, 150, 151, 157, 163, 177, 183, 199, 203, 235, 236, 249, 251, 253, 254, 267, 268, 269, 292, 294, 296, 297, 308, 309, 314, 318, 324, 342, 365, 371, 377, 388, 395, 396, 398, 404, 432, 447, 451, 470, 474, 514, 537, 567, 569, 571, 583, 587, 589, 590, 602, 603, 604, 605, 612, 615, 624, 627, 631, 632, 643, 662, 663, 665, 668, 672, 679, 680, 683, 686, 687, 702, 703, 704, 705, 711, 713, 721, 722, 723, 725, 728, 729, 730, 731, 733], "els": [13, 148, 154, 177, 236, 249, 292, 388, 569, 604, 629, 688, 725, 729], "fals": [13, 14, 15, 41, 42, 43, 44, 47, 48, 49, 71, 72, 89, 92, 99, 102, 103, 105, 113, 131, 136, 143, 146, 147, 148, 150, 151, 154, 155, 157, 162, 163, 168, 170, 177, 183, 193, 196, 229, 235, 236, 241, 243, 248, 250, 251, 253, 264, 268, 269, 270, 271, 277, 284, 286, 291, 293, 294, 296, 306, 309, 320, 324, 373, 377, 388, 396, 398, 404, 409, 432, 451, 460, 474, 477, 478, 500, 501, 518, 521, 528, 537, 555, 560, 564, 567, 568, 569, 571, 583, 589, 590, 602, 604, 612, 624, 627, 631, 632, 642, 643, 662, 663, 672, 679, 680, 693, 697, 703, 711, 714, 715, 721, 722, 725, 728, 729, 730, 731, 733], "boolean": [13, 150], "ensure_list": 13, "x": [13, 55, 74, 150, 157, 208, 235, 236, 250, 268, 293, 309, 356, 436, 451, 484, 503, 590, 660, 661, 665, 668, 681, 682, 708, 709, 713, 714, 716, 722, 723, 728, 729, 730, 732], "ensur": [13, 268, 309, 356, 436, 668, 722, 730], "list": [13, 42, 43, 44, 54, 105, 140, 148, 150, 154, 156, 157, 158, 167, 170, 183, 184, 185, 187, 200, 207, 208, 213, 218, 223, 227, 230, 235, 236, 239, 240, 244, 251, 264, 268, 269, 282, 283, 287, 294, 306, 309, 313, 314, 317, 318, 320, 321, 322, 324, 331, 339, 344, 347, 350, 365, 370, 371, 373, 374, 375, 377, 378, 386, 392, 393, 395, 396, 398, 399, 402, 404, 409, 415, 416, 420, 432, 447, 451, 454, 470, 473, 474, 476, 483, 569, 574, 588, 590, 604, 611, 612, 621, 622, 632, 638, 641, 642, 663, 670, 672, 676, 678, 680, 683, 688, 690, 693, 694, 697, 705, 708, 710, 711, 717, 719, 721, 722, 724, 728, 729, 731], "input": [13, 15, 42, 43, 44, 45, 54, 60, 64, 67, 68, 70, 71, 72, 74, 82, 83, 85, 86, 105, 109, 110, 116, 122, 141, 148, 150, 151, 154, 156, 166, 168, 169, 170, 175, 176, 177, 181, 207, 208, 227, 235, 236, 239, 240, 251, 252, 253, 255, 264, 267, 268, 273, 282, 283, 294, 295, 296, 298, 306, 308, 309, 312, 313, 314, 377, 378, 382, 386, 393, 399, 402, 432, 457, 483, 489, 493, 496, 497, 499, 500, 501, 503, 511, 512, 514, 515, 533, 534, 540, 546, 569, 571, 574, 588, 601, 602, 603, 604, 605, 620, 621, 627, 629, 631, 632, 639, 642, 643, 659, 660, 662, 663, 665, 666, 667, 668, 670, 672, 674, 679, 680, 681, 682, 683, 688, 719, 721, 722, 725, 728, 729, 730, 733], "check_mx_vers": 13, "version": [13, 54, 104, 150, 154, 166, 170, 207, 236, 313, 314, 369, 483, 601, 636, 638, 642, 661, 672, 676, 677, 680, 693, 695, 697, 698, 720, 728, 731, 732], "str": [13, 42, 43, 44, 140, 150, 151, 156, 158, 163, 164, 167, 168, 170, 176, 177, 178, 184, 187, 191, 193, 195, 204, 207, 230, 235, 236, 251, 252, 253, 260, 264, 268, 270, 274, 275, 294, 295, 296, 303, 306, 309, 313, 314, 317, 318, 320, 322, 324, 331, 342, 365, 368, 370, 371, 373, 375, 377, 390, 392, 393, 395, 396, 398, 399, 401, 402, 404, 409, 417, 425, 427, 430, 431, 447, 450, 451, 454, 470, 473, 474, 476, 576, 583, 585, 588, 602, 604, 605, 610, 612, 616, 620, 624, 627, 629, 632, 633, 661, 662, 663, 679, 711, 721, 729, 730], "mx": 13, "__version__": [13, 161, 584, 661], "combine_cap": 13, "current": [13, 70, 104, 175, 177, 202, 204, 207, 210, 214, 217, 235, 236, 326, 333, 334, 336, 337, 338, 347, 349, 356, 360, 436, 442, 499, 604, 632, 638, 639, 642, 644, 660, 661, 668, 672, 680, 683, 687, 700, 708, 717, 719, 722, 725, 728, 731], "new": [13, 16, 44, 148, 150, 176, 183, 187, 241, 253, 268, 269, 284, 296, 309, 348, 388, 399, 569, 571, 604, 605, 616, 637, 641, 643, 668, 680, 681, 694, 700, 701, 702, 703, 709, 710, 713, 714, 719, 720, 722, 725, 726, 727, 730, 732, 733], "combin": [13, 170, 185, 235, 236, 239, 240, 264, 278, 282, 283, 306, 378, 432, 576, 588, 621, 632, 638, 642, 675, 680, 718, 720, 722, 724, 725, 730, 731], "capabl": [13, 47, 366, 448, 460, 643, 644, 659, 672, 680, 681, 691, 702, 707, 719, 721, 722, 731, 733], "contain": [13, 67, 68, 70, 74, 139, 148, 150, 158, 163, 170, 177, 183, 192, 204, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 227, 235, 236, 239, 240, 251, 252, 253, 282, 283, 294, 295, 296, 310, 314, 315, 320, 321, 322, 326, 339, 342, 344, 347, 348, 349, 350, 351, 352, 373, 374, 375, 378, 432, 496, 497, 499, 503, 563, 569, 583, 589, 621, 624, 631, 660, 663, 666, 675, 679, 701, 708, 713, 714, 715, 719, 725, 729, 731, 732], "make_nc_model": 13, "target": [13, 42, 43, 102, 150, 151, 154, 157, 170, 207, 225, 227, 236, 348, 351, 356, 436, 590, 627, 663, 668, 680, 719, 729, 730, 731, 733], "sym_model": 13, "ctx": 13, "input_desc": 13, "convert": [13, 43, 48, 49, 50, 53, 54, 55, 56, 57, 66, 74, 86, 99, 100, 102, 103, 104, 105, 131, 136, 140, 142, 151, 156, 170, 207, 235, 236, 251, 264, 267, 268, 294, 306, 308, 309, 313, 320, 326, 348, 366, 373, 448, 451, 454, 459, 460, 477, 478, 479, 482, 483, 484, 485, 486, 495, 503, 515, 528, 529, 555, 560, 638, 643, 680, 681, 685, 722, 724, 725, 728, 730, 731], "symbol": [13, 43, 156, 168, 170, 317, 370, 378, 432, 638, 682], "model": [13, 15, 16, 29, 41, 42, 43, 44, 45, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 116, 118, 140, 141, 142, 148, 150, 151, 154, 155, 156, 157, 158, 162, 163, 164, 165, 167, 168, 169, 170, 175, 176, 177, 181, 183, 185, 192, 199, 204, 205, 207, 214, 215, 216, 219, 221, 222, 223, 225, 227, 229, 235, 236, 239, 240, 247, 250, 251, 253, 268, 269, 272, 273, 282, 283, 290, 293, 294, 296, 309, 310, 312, 313, 314, 315, 316, 324, 325, 326, 327, 330, 333, 334, 336, 337, 338, 339, 344, 348, 349, 350, 351, 352, 353, 356, 357, 359, 360, 361, 362, 369, 377, 378, 388, 390, 392, 393, 395, 396, 398, 399, 401, 402, 408, 409, 425, 430, 431, 432, 433, 436, 437, 438, 439, 441, 442, 443, 444, 450, 451, 454, 457, 472, 473, 476, 477, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 498, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 525, 526, 527, 528, 529, 531, 532, 533, 540, 542, 569, 574, 576, 583, 585, 587, 588, 589, 590, 602, 603, 604, 605, 610, 611, 615, 620, 621, 627, 629, 631, 632, 634, 637, 638, 639, 641, 642, 644, 649, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 674, 675, 677, 679, 681, 683, 688, 690, 691, 694, 700, 702, 707, 709, 710, 711, 712, 717, 718, 720, 722, 726, 727, 729, 730, 731, 732, 733], "an": [13, 67, 68, 70, 105, 141, 143, 148, 150, 154, 158, 161, 163, 170, 177, 182, 196, 214, 235, 236, 244, 249, 253, 268, 272, 277, 287, 292, 296, 309, 316, 317, 321, 322, 330, 331, 353, 369, 370, 374, 375, 378, 426, 431, 432, 451, 457, 496, 497, 499, 564, 569, 583, 584, 592, 604, 605, 616, 621, 632, 634, 636, 638, 639, 641, 642, 644, 660, 662, 663, 664, 665, 670, 678, 679, 680, 681, 683, 687, 688, 691, 700, 703, 704, 705, 708, 711, 717, 719, 720, 722, 725, 727, 728, 729, 730, 731], "neural": [13, 158, 183, 192, 195, 209, 210, 211, 212, 223, 235, 236, 263, 264, 265, 268, 269, 272, 275, 278, 306, 307, 309, 311, 316, 323, 324, 326, 339, 344, 347, 350, 352, 353, 358, 364, 369, 376, 377, 378, 382, 410, 432, 439, 440, 446, 573, 629, 634, 637, 642, 643, 644, 659, 660, 661, 663, 664, 666, 667, 668, 669, 670, 671, 672, 673, 674, 677, 678, 681, 682, 684, 685, 688, 690, 691, 693, 695, 697, 698, 699, 711, 717, 718, 720, 722, 725, 726, 728, 729, 730, 731, 733, 734], "compressor": [13, 183, 192, 195, 211, 212, 223, 235, 236, 263, 264, 265, 268, 269, 272, 275, 278, 306, 307, 309, 311, 316, 323, 324, 326, 347, 350, 352, 353, 358, 364, 369, 376, 377, 378, 382, 410, 432, 440, 446, 573, 629, 634, 637, 639, 642, 643, 644, 659, 660, 661, 663, 664, 666, 667, 668, 669, 670, 671, 672, 673, 674, 677, 678, 681, 682, 683, 684, 688, 690, 691, 693, 695, 697, 698, 699, 702, 703, 704, 705, 707, 708, 715, 717, 718, 719, 720, 722, 725, 726, 728, 729, 730, 731, 732, 733, 734], "tupl": [13, 105, 148, 170, 200, 236, 239, 240, 264, 268, 282, 283, 306, 309, 314, 365, 378, 399, 432, 447, 569, 588, 592, 610, 621, 631, 643, 661, 663, 679, 680, 722, 730], "symnet": 13, "arg": [13, 54, 105, 150, 170, 177, 251, 252, 253, 294, 295, 296, 347, 356, 390, 401, 436, 451, 483, 590, 604, 610, 627, 628, 663, 668, 680, 689, 719, 722, 725, 728, 729, 730], "aux": 13, "data": [13, 42, 43, 44, 56, 105, 140, 148, 150, 158, 163, 170, 175, 177, 181, 207, 235, 236, 239, 240, 269, 271, 282, 283, 314, 316, 356, 366, 368, 369, 378, 393, 399, 403, 409, 425, 430, 432, 436, 448, 450, 454, 472, 476, 485, 569, 572, 576, 583, 588, 604, 621, 624, 629, 632, 641, 642, 660, 662, 663, 668, 672, 673, 676, 679, 680, 681, 702, 703, 705, 708, 713, 714, 722, 724, 725, 726, 727, 728, 729, 730, 731, 732], "descript": [13, 132, 203, 451, 556, 638, 643, 644, 662, 708, 712, 728], "ncmodel": 13, "fuse": [13, 58, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 91, 92, 93, 94, 96, 131, 136, 168, 170, 181, 487, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 520, 521, 522, 523, 525, 555, 560, 588, 638, 728, 729], "suppli": 13, "get_framework_nam": 13, "get": [13, 42, 43, 44, 45, 67, 68, 70, 104, 105, 148, 150, 157, 164, 170, 176, 183, 191, 195, 196, 200, 202, 204, 205, 207, 210, 217, 224, 225, 226, 227, 233, 236, 244, 268, 269, 275, 277, 287, 309, 314, 347, 349, 351, 359, 366, 368, 377, 386, 396, 403, 409, 432, 441, 448, 450, 470, 496, 497, 499, 569, 574, 576, 585, 588, 590, 599, 604, 620, 624, 627, 629, 632, 643, 660, 671, 675, 676, 678, 680, 686, 703, 705, 713, 714, 720, 725, 728, 731, 732, 735], "name": [13, 43, 45, 54, 67, 68, 70, 104, 105, 110, 116, 140, 148, 150, 151, 156, 157, 158, 163, 164, 168, 170, 176, 177, 178, 183, 184, 185, 187, 196, 199, 200, 202, 207, 209, 214, 217, 218, 223, 224, 225, 226, 227, 230, 233, 235, 236, 251, 252, 253, 256, 260, 266, 268, 269, 273, 276, 277, 294, 295, 296, 299, 303, 309, 312, 313, 314, 319, 324, 342, 347, 349, 351, 366, 368, 372, 377, 382, 386, 388, 402, 409, 432, 448, 450, 454, 483, 496, 497, 499, 534, 540, 569, 574, 576, 583, 585, 588, 590, 604, 616, 620, 622, 624, 629, 632, 637, 638, 644, 661, 663, 665, 668, 670, 672, 677, 679, 680, 682, 686, 693, 697, 701, 702, 708, 719, 722, 726, 727, 729, 731, 733, 734], "context": [13, 605, 632, 721, 725], "prepare_model_data": 13, "nc_model": [13, 339, 344], "data_x": 13, "prepar": [13, 44, 170, 399, 638, 641, 663, 668, 673, 702, 713, 714, 715, 719, 722], "dataload": [13, 15, 42, 44, 140, 141, 150, 155, 157, 158, 170, 175, 177, 183, 204, 205, 207, 223, 227, 229, 239, 240, 251, 262, 272, 282, 283, 294, 305, 310, 316, 339, 344, 353, 369, 392, 393, 402, 425, 430, 432, 454, 457, 571, 589, 590, 603, 604, 621, 624, 638, 641, 642, 643, 665, 666, 667, 668, 673, 674, 680, 681, 702, 703, 718, 719, 722, 723, 724, 725, 728, 729, 730, 732, 733], "need": [13, 42, 105, 109, 151, 175, 177, 183, 187, 207, 223, 236, 239, 240, 241, 249, 250, 253, 260, 268, 271, 273, 274, 282, 283, 284, 292, 293, 296, 303, 309, 314, 353, 359, 377, 378, 388, 393, 432, 441, 533, 571, 589, 621, 631, 632, 638, 642, 661, 662, 663, 665, 666, 668, 675, 680, 683, 685, 686, 689, 693, 694, 695, 697, 698, 700, 701, 702, 703, 704, 705, 707, 711, 713, 719, 721, 722, 723, 724, 725, 726, 728, 730, 731, 733], "run": [13, 140, 148, 163, 177, 183, 214, 227, 235, 236, 239, 240, 250, 267, 269, 282, 283, 293, 308, 348, 349, 356, 378, 432, 436, 454, 569, 583, 590, 603, 605, 621, 642, 659, 668, 671, 672, 680, 683, 685, 687, 688, 689, 691, 693, 694, 695, 697, 698, 700, 708, 709, 710, 711, 713, 714, 715, 720, 722, 725, 726, 727, 729, 731, 733], "loader": [13, 140, 239, 240, 282, 283, 378, 432, 454, 472, 476, 621, 627, 662, 722], "dataloaderwrap": 13, "prepare_model": 13, "create_data_exampl": 13, "creat": [13, 16, 105, 161, 187, 235, 236, 241, 251, 253, 271, 284, 294, 296, 320, 330, 331, 366, 373, 402, 426, 431, 448, 450, 451, 571, 584, 616, 624, 636, 639, 642, 663, 682, 693, 695, 697, 698, 701, 713, 714, 715, 719, 722, 727, 729, 731, 732], "exampl": [13, 44, 150, 154, 158, 163, 170, 177, 183, 184, 185, 187, 200, 207, 208, 223, 235, 236, 251, 252, 253, 264, 268, 294, 295, 296, 306, 309, 320, 321, 322, 324, 350, 373, 374, 375, 377, 378, 388, 395, 396, 398, 409, 432, 450, 451, 576, 583, 589, 602, 604, 616, 620, 621, 631, 632, 636, 641, 643, 644, 649, 674, 675, 683, 686, 687, 688, 691, 708, 711, 724, 726, 730, 731, 732, 735], "prepare_dataload": 13, "io": [13, 163, 583, 706], "ndarray_to_devic": 13, "ndarrai": [13, 42, 43, 67, 68, 70, 268, 309, 496, 497, 499, 622, 671, 730], "devic": [13, 79, 89, 90, 91, 92, 93, 94, 97, 107, 131, 136, 147, 150, 151, 157, 162, 163, 165, 170, 177, 204, 207, 208, 223, 227, 229, 235, 236, 508, 518, 519, 520, 521, 522, 523, 526, 531, 555, 560, 568, 583, 590, 605, 627, 643, 662, 666, 680, 681, 683, 686, 691, 700, 719, 721, 723, 725], "is_model_quant": 13, "query_quantizable_nod": 13, "node": [13, 42, 43, 44, 50, 54, 55, 56, 57, 60, 62, 64, 67, 68, 70, 74, 77, 80, 82, 83, 84, 98, 102, 103, 105, 110, 132, 140, 148, 207, 312, 314, 386, 399, 409, 431, 454, 479, 483, 484, 485, 486, 489, 491, 493, 496, 497, 499, 503, 506, 509, 511, 512, 513, 527, 534, 556, 569, 574, 642, 665, 668, 703, 707, 710, 713, 714, 715, 723, 729, 731, 734], "given": [13, 16, 43, 67, 68, 70, 104, 105, 116, 148, 150, 164, 170, 230, 268, 309, 320, 373, 432, 496, 497, 499, 540, 569, 585, 592, 604, 620, 639, 644, 719, 728, 730], "map": [13, 43, 105, 148, 163, 170, 236, 268, 309, 312, 314, 315, 319, 321, 322, 324, 339, 344, 349, 352, 372, 374, 375, 377, 569, 583, 661, 663, 668, 679, 680, 693, 697, 705, 719, 722, 725], "quantize_sym_model": 13, "qconfig": [13, 151, 170, 631, 725, 729], "accord": [13, 122, 170, 183, 235, 236, 251, 252, 253, 268, 294, 295, 296, 309, 359, 439, 441, 546, 624, 639, 642, 663, 668, 703, 708, 713, 714, 715, 719, 724, 728, 730, 731], "run_forward": 13, "b_filter": 13, "collector": [13, 158, 622], "none": [13, 14, 41, 43, 44, 45, 47, 48, 49, 63, 89, 102, 104, 105, 110, 116, 142, 148, 150, 154, 155, 157, 158, 162, 163, 164, 165, 166, 169, 170, 175, 177, 183, 184, 185, 187, 191, 192, 193, 200, 202, 204, 205, 207, 211, 223, 227, 229, 231, 232, 233, 235, 236, 239, 240, 241, 243, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 264, 268, 269, 270, 271, 278, 282, 283, 284, 286, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 306, 309, 310, 313, 314, 315, 320, 324, 325, 326, 327, 330, 339, 344, 348, 352, 356, 357, 359, 360, 361, 362, 366, 373, 377, 378, 388, 390, 402, 425, 430, 431, 432, 433, 436, 437, 438, 439, 441, 442, 443, 444, 448, 451, 459, 460, 470, 472, 473, 474, 476, 477, 478, 492, 518, 534, 540, 569, 571, 576, 583, 585, 588, 589, 590, 599, 601, 603, 604, 605, 611, 612, 615, 621, 622, 624, 627, 629, 631, 632, 642, 643, 662, 663, 679, 703, 722, 725, 729, 730, 731], "pre_batch": 13, "post_batch": 13, "forward": [13, 150, 170, 227, 605, 643, 680, 702, 719, 721, 722, 725, 728, 729], "propag": [13, 100, 529], "filter": [13, 251, 252, 253, 254, 255, 256, 258, 262, 294, 295, 296, 297, 298, 299, 301, 305, 316, 369, 571, 576, 632, 644, 663, 675, 719, 729], "which": [13, 42, 56, 83, 110, 150, 154, 157, 158, 163, 175, 177, 184, 202, 207, 208, 210, 214, 215, 216, 218, 221, 222, 223, 225, 227, 235, 236, 251, 252, 253, 264, 269, 294, 295, 296, 306, 317, 322, 331, 333, 334, 336, 337, 338, 342, 347, 348, 349, 351, 356, 370, 375, 377, 382, 388, 393, 396, 409, 432, 436, 485, 512, 534, 576, 583, 589, 590, 620, 632, 636, 638, 639, 642, 643, 644, 660, 662, 663, 665, 666, 668, 671, 672, 675, 679, 680, 681, 682, 684, 688, 691, 694, 700, 701, 702, 705, 708, 713, 714, 715, 718, 719, 721, 722, 723, 724, 725, 726, 728, 729, 730, 731, 732, 733], "batch": [13, 150, 170, 177, 241, 243, 244, 249, 250, 271, 284, 286, 287, 292, 293, 571, 604, 621, 662, 666, 667, 680, 718, 719, 722, 728, 730, 731, 734], "infer": [13, 43, 105, 140, 151, 170, 177, 207, 315, 352, 386, 388, 409, 432, 454, 574, 588, 589, 604, 605, 621, 642, 643, 660, 666, 667, 680, 681, 700, 717, 719, 720, 722, 725, 728, 729, 731], "collect": [13, 16, 43, 150, 170, 185, 266, 268, 271, 273, 274, 276, 309, 322, 324, 375, 377, 576, 622, 632, 643, 722, 729, 731], "inform": [13, 150, 158, 202, 204, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 236, 239, 240, 271, 273, 274, 282, 283, 347, 349, 350, 351, 353, 377, 392, 632, 636, 637, 640, 641, 642, 643, 644, 645, 647, 651, 654, 657, 660, 661, 666, 672, 680, 682, 695, 698, 701, 702, 705, 706, 708, 709, 713, 714, 719, 724, 725, 726, 728, 729, 733, 734, 735], "dure": [13, 161, 163, 209, 213, 225, 235, 236, 347, 351, 388, 402, 583, 584, 632, 643, 665, 680, 682, 707, 717, 718, 719, 722, 728, 729, 733], "call": [13, 42, 163, 175, 178, 207, 215, 216, 221, 320, 349, 373, 393, 583, 605, 638, 639, 642, 662, 674, 689, 691, 701, 719, 722, 728, 729, 730], "prior": [13, 88, 517, 731], "after": [13, 78, 148, 151, 170, 205, 209, 214, 216, 221, 235, 236, 251, 264, 268, 271, 294, 306, 309, 349, 437, 451, 507, 569, 627, 632, 639, 643, 663, 665, 666, 667, 670, 675, 679, 680, 693, 694, 697, 701, 705, 717, 718, 719, 722, 724, 725, 727, 728, 729, 730, 731], "count": [13, 639, 663, 725], "int": [13, 16, 42, 43, 44, 105, 140, 148, 150, 151, 155, 167, 170, 177, 187, 191, 205, 235, 236, 250, 251, 252, 264, 268, 293, 294, 295, 306, 309, 313, 314, 318, 320, 324, 331, 371, 373, 377, 392, 395, 396, 398, 399, 404, 409, 417, 426, 431, 450, 451, 454, 455, 459, 472, 473, 476, 569, 588, 589, 602, 604, 612, 627, 632, 661, 662, 663, 679, 680, 711, 721, 725, 730], "make_symbol_block": 13, "gluon": [13, 378, 432, 682], "symbolblock": 13, "make_modul": 13, "parse_tune_config": 13, "tune_cfg": [13, 148, 156, 170, 569, 587, 588, 642, 644, 731], "quantizable_nod": 13, "strategi": [13, 170, 221, 235, 236, 237, 253, 280, 296, 316, 369, 641, 642, 643, 644, 649, 660, 661, 662, 668, 675, 680, 688, 700, 705, 720, 721, 722, 724, 725, 726, 732, 733], "config": [13, 44, 115, 116, 118, 122, 170, 183, 184, 185, 187, 191, 202, 204, 205, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 235, 239, 240, 251, 282, 283, 294, 333, 334, 336, 337, 338, 339, 344, 347, 348, 349, 350, 351, 366, 367, 369, 378, 390, 395, 396, 398, 401, 402, 426, 431, 448, 449, 450, 451, 455, 459, 460, 476, 539, 540, 542, 546, 587, 588, 621, 624, 631, 632, 639, 641, 643, 644, 649, 659, 661, 662, 665, 666, 667, 668, 670, 673, 675, 679, 680, 681, 682, 702, 703, 718, 719, 721, 722, 724, 725, 727, 729, 731], "tune": [13, 45, 150, 176, 177, 183, 184, 185, 190, 235, 236, 239, 240, 251, 253, 282, 283, 294, 296, 315, 352, 354, 355, 356, 357, 359, 360, 361, 362, 365, 366, 367, 368, 378, 388, 402, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 447, 448, 449, 450, 473, 611, 621, 632, 642, 643, 660, 661, 662, 663, 665, 668, 675, 677, 680, 681, 700, 704, 707, 709, 710, 717, 719, 720, 724, 726, 727, 729, 733], "from": [13, 43, 45, 61, 67, 68, 70, 105, 148, 150, 151, 154, 163, 164, 170, 176, 177, 183, 185, 187, 192, 193, 200, 202, 204, 210, 211, 212, 213, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 235, 236, 239, 240, 241, 244, 248, 251, 252, 253, 254, 255, 256, 258, 263, 264, 270, 271, 274, 282, 283, 284, 287, 291, 294, 295, 296, 297, 298, 299, 301, 306, 310, 312, 313, 314, 317, 320, 321, 322, 326, 331, 347, 348, 349, 351, 366, 368, 370, 373, 374, 375, 378, 386, 388, 395, 409, 432, 448, 450, 451, 459, 490, 496, 497, 499, 569, 571, 574, 576, 583, 585, 588, 592, 602, 604, 621, 624, 627, 631, 632, 636, 637, 638, 639, 642, 644, 659, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 673, 675, 678, 679, 681, 682, 683, 687, 688, 689, 691, 701, 703, 705, 706, 710, 713, 714, 715, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732], "distribute_calib_tensor": 13, "calib_tensor": 13, "calib_cfg": 13, "tensor_to_nod": 13, "distribut": [13, 16, 143, 182, 235, 236, 241, 243, 244, 248, 249, 250, 271, 284, 286, 287, 291, 292, 293, 395, 564, 571, 626, 641, 643, 662, 666, 676, 695, 698, 702, 705, 713, 720, 722, 725, 726, 728, 732, 734], "depend": [13, 239, 240, 269, 282, 283, 378, 432, 621, 637, 671, 672, 706, 721, 722, 731], "algorithm": [13, 44, 154, 157, 170, 184, 187, 199, 232, 236, 317, 324, 332, 369, 370, 377, 402, 409, 576, 620, 624, 626, 639, 642, 643, 644, 661, 666, 667, 672, 675, 678, 689, 694, 719, 722, 729, 733], "set": [13, 43, 51, 96, 105, 115, 148, 150, 163, 170, 176, 177, 183, 185, 191, 195, 227, 233, 235, 236, 239, 240, 241, 251, 253, 256, 268, 269, 274, 275, 282, 283, 284, 294, 296, 299, 309, 320, 326, 339, 344, 348, 353, 373, 377, 378, 386, 396, 398, 431, 432, 451, 459, 480, 525, 539, 569, 571, 574, 583, 604, 620, 621, 629, 632, 636, 639, 643, 659, 662, 663, 666, 668, 670, 672, 674, 675, 676, 679, 680, 681, 683, 685, 687, 701, 702, 703, 704, 705, 706, 710, 713, 719, 721, 722, 725, 727, 728, 731, 733], "kl": [13, 16, 235, 236, 622, 626, 643, 644, 660, 672, 680, 731, 733], "minmax": [13, 16, 474, 643, 644, 660, 672, 722, 733], "calib_model": 13, "qsym_model": 13, "calib_data": [13, 162], "calibdata": 13, "threshold": [13, 179, 203, 622, 626, 679], "amp_convert": 13, "amp_cfg": 13, "support": [13, 42, 43, 44, 97, 104, 150, 175, 177, 181, 184, 193, 195, 204, 210, 217, 221, 222, 235, 236, 239, 240, 250, 251, 253, 260, 264, 268, 270, 271, 272, 275, 282, 283, 293, 294, 296, 303, 306, 309, 316, 324, 326, 331, 347, 349, 353, 360, 366, 369, 377, 378, 382, 388, 393, 395, 396, 398, 399, 402, 409, 432, 442, 448, 451, 526, 621, 624, 626, 627, 632, 634, 641, 643, 661, 678, 680, 683, 688, 691, 694, 700, 707, 708, 711, 720, 724, 727, 731, 732], "amp": [13, 150, 177, 683, 690, 709, 725], "wrap": [13, 105, 116, 150, 193, 231, 270, 320, 373, 476, 540, 605, 638, 668, 695, 698], "dataiterload": 13, "data_it": [13, 207], "collectorbas": 13, "calibcollector": 13, "include_tensors_kl": 13, "include_tensors_minmax": 13, "num_bin": [13, 16, 622], "8001": [13, 622, 708, 713, 714, 715], "tensorcollector": 13, "include_nod": 13, "qtensor_to_tensor": 13, "build": [13, 42, 44, 115, 178, 179, 181, 182, 327, 330, 381, 383, 385, 386, 387, 399, 408, 539, 574, 642, 643, 644, 676, 682, 693, 695, 697, 698, 701, 720, 731], "up": [13, 100, 218, 268, 309, 348, 529, 588, 668, 669, 672, 675, 691, 695, 698, 700, 719, 720, 721, 722, 727, 730, 731, 733], "namecollector": 13, "cache_kl": 13, "cache_minmax": 13, "tensors_kl": 13, "tensors_minmax": 13, "onnxruntimeadaptor": 14, "rt": 14, "onnxrt_weightonlyadaptor": 14, "onnxrt_qlinearopsadaptor": [14, 642], "onnxrt_integeropsadaptor": 14, "onnxrt_qdqadaptor": 14, "onnxrtqueri": 14, "dynam": [14, 150, 163, 177, 236, 241, 284, 314, 366, 448, 571, 583, 642, 662, 666, 670, 675, 680, 683, 688, 689, 690, 691, 694, 700, 720, 731, 734], "static": [14, 41, 42, 47, 175, 181, 207, 236, 314, 366, 393, 432, 448, 459, 460, 470, 472, 474, 615, 642, 643, 644, 665, 670, 675, 680, 683, 688, 689, 690, 691, 694, 700, 703, 711, 713, 714, 715, 723, 728, 731, 734], "format": [14, 18, 43, 54, 148, 151, 170, 235, 236, 251, 252, 253, 294, 295, 296, 314, 320, 326, 366, 373, 448, 451, 459, 460, 483, 569, 627, 641, 643, 644, 661, 663, 668, 670, 679, 680, 681, 682, 683, 705, 708, 720, 722, 725, 726], "onnxrtaug": 15, "dump_op_typ": 15, "black_nod": 15, "white_nod": 15, "cpuexecutionprovid": [15, 41, 42, 44, 392, 393, 395, 396, 398, 404, 681, 722], "reduce_rang": [15, 41, 42, 235, 236, 409, 644, 721], "kwarg": [15, 43, 105, 122, 123, 124, 125, 126, 127, 128, 129, 132, 133, 135, 137, 138, 150, 164, 170, 177, 205, 235, 236, 253, 266, 268, 273, 276, 296, 309, 365, 367, 377, 378, 379, 381, 383, 385, 386, 387, 390, 392, 401, 404, 408, 432, 447, 449, 451, 546, 547, 548, 549, 550, 551, 552, 553, 556, 557, 559, 561, 562, 574, 585, 590, 602, 604, 610, 621, 627, 628, 631, 632, 662], "augment": 15, "dump": [15, 161, 170, 183, 314, 392, 576, 584, 588, 632, 637, 705, 722, 726, 729], "calib_registri": 16, "calib_method": 16, "calibratorbas": 16, "minmaxcalibr": 16, "percentilecalibr": 16, "2048": [16, 150, 157, 177, 576, 590, 612, 632, 725], "percentil": [16, 44, 140, 177, 398, 399, 454, 474, 602, 604, 660], "99": [16, 185, 474, 734], "999": [16, 474, 733], "option": [16, 44, 105, 150, 151, 154, 163, 170, 177, 187, 191, 209, 235, 236, 239, 240, 251, 268, 282, 283, 294, 309, 313, 314, 320, 326, 347, 353, 366, 369, 373, 377, 378, 390, 395, 396, 398, 399, 409, 432, 448, 450, 451, 576, 583, 589, 599, 602, 604, 605, 621, 625, 627, 632, 643, 644, 661, 662, 663, 672, 676, 680, 694, 708, 711, 713, 714, 715, 719, 722, 725, 727, 728, 730, 731, 733], "number": [16, 44, 67, 68, 105, 140, 150, 151, 170, 177, 184, 200, 203, 205, 211, 212, 235, 236, 249, 252, 264, 268, 292, 295, 306, 309, 321, 322, 324, 347, 356, 374, 375, 377, 395, 396, 398, 399, 426, 431, 436, 451, 454, 496, 497, 589, 604, 616, 624, 632, 659, 662, 663, 668, 679, 708, 710, 719, 722, 725, 727, 728, 730, 731], "bin": [16, 163, 164, 576, 583, 585, 632, 671], "histogram": [16, 576, 622, 632, 702, 729], "valu": [16, 43, 44, 56, 67, 68, 70, 89, 90, 105, 143, 148, 150, 163, 170, 182, 183, 185, 200, 202, 207, 208, 218, 226, 227, 233, 235, 236, 239, 240, 251, 254, 255, 264, 268, 269, 282, 283, 294, 297, 298, 306, 309, 320, 324, 348, 356, 359, 366, 373, 377, 378, 396, 409, 432, 436, 441, 448, 450, 451, 485, 496, 497, 499, 518, 519, 564, 569, 571, 583, 588, 592, 605, 621, 622, 624, 632, 638, 643, 644, 660, 663, 665, 672, 679, 680, 681, 686, 703, 705, 711, 717, 719, 721, 722, 725, 726, 728, 730, 731, 733], "default": [16, 44, 97, 148, 150, 151, 154, 163, 170, 177, 184, 185, 187, 191, 203, 227, 233, 235, 236, 239, 240, 243, 251, 252, 253, 264, 268, 282, 283, 286, 294, 295, 296, 306, 309, 313, 314, 317, 326, 348, 368, 370, 377, 386, 390, 395, 396, 398, 399, 404, 409, 450, 470, 474, 526, 569, 574, 576, 583, 589, 599, 602, 604, 605, 612, 615, 624, 627, 632, 638, 642, 661, 662, 663, 672, 675, 676, 679, 680, 681, 688, 691, 693, 697, 705, 708, 713, 714, 715, 717, 719, 721, 722, 724, 725, 727, 728, 730, 731, 733], "float": [16, 43, 44, 140, 141, 150, 154, 158, 177, 185, 203, 209, 214, 224, 227, 235, 236, 251, 264, 294, 306, 318, 320, 321, 322, 349, 371, 373, 374, 375, 396, 399, 404, 447, 451, 454, 457, 474, 587, 602, 604, 612, 615, 616, 629, 632, 661, 663, 679, 721, 722, 728, 730], "A": [16, 55, 74, 75, 103, 116, 140, 141, 148, 150, 161, 170, 184, 185, 190, 192, 199, 200, 202, 204, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 235, 236, 253, 268, 271, 273, 274, 296, 309, 310, 317, 320, 321, 322, 324, 327, 330, 331, 332, 339, 342, 344, 347, 348, 349, 350, 351, 356, 370, 373, 374, 375, 377, 378, 382, 386, 436, 454, 457, 484, 503, 504, 540, 569, 573, 574, 576, 584, 587, 604, 616, 621, 632, 637, 643, 661, 662, 663, 669, 672, 679, 680, 682, 693, 694, 697, 700, 708, 719, 720, 722, 725, 728, 730, 731, 733], "between": [16, 42, 143, 182, 220, 235, 236, 268, 309, 321, 324, 374, 377, 426, 431, 564, 632, 638, 642, 643, 644, 660, 665, 666, 675, 679, 680, 691, 722, 725, 726, 727, 728, 730, 731], "0": [16, 43, 44, 54, 90, 105, 148, 150, 151, 154, 162, 163, 170, 177, 179, 181, 184, 185, 193, 200, 202, 203, 205, 227, 229, 231, 235, 236, 241, 243, 248, 250, 251, 254, 255, 258, 264, 268, 270, 271, 284, 286, 291, 293, 294, 297, 298, 301, 306, 309, 314, 315, 324, 331, 339, 344, 352, 377, 388, 395, 396, 398, 399, 402, 404, 409, 432, 437, 451, 474, 483, 519, 569, 571, 583, 588, 602, 604, 612, 616, 627, 638, 661, 662, 663, 666, 668, 670, 671, 672, 676, 677, 679, 680, 681, 686, 688, 693, 697, 703, 713, 714, 719, 721, 722, 723, 725, 726, 727, 728, 729, 730, 731, 733], "100": [16, 183, 184, 185, 200, 203, 235, 236, 253, 296, 404, 451, 472, 473, 476, 616, 659, 663, 668, 674, 680, 705, 721, 722, 730, 731, 733, 734], "klcalibr": 16, "128": [16, 44, 150, 155, 157, 170, 177, 229, 251, 254, 255, 268, 294, 297, 298, 309, 396, 404, 571, 589, 590, 604, 663, 680, 722, 725, 730, 734], "num_quantized_bin": 16, "histogramcollector": 16, "collctor": 16, "smooth_distribut": 16, "p": [16, 154, 701, 702, 725], "ep": [16, 182, 681], "0001": [16, 200, 235, 236, 666, 680, 721], "smooth": [16, 140, 141, 148, 175, 181, 235, 236, 365, 392, 401, 404, 454, 455, 457, 474, 569, 661, 719, 731], "discret": [16, 200, 731], "mai": [16, 148, 161, 163, 333, 334, 336, 337, 338, 451, 569, 583, 584, 605, 636, 637, 643, 660, 661, 665, 670, 671, 677, 681, 693, 697, 703, 706, 708, 720, 722, 725, 728, 731], "have": [16, 74, 83, 141, 148, 163, 204, 208, 210, 217, 249, 271, 292, 317, 320, 347, 349, 370, 373, 377, 432, 450, 451, 457, 503, 512, 569, 583, 636, 637, 643, 644, 661, 662, 663, 665, 668, 672, 677, 679, 680, 681, 683, 700, 703, 706, 708, 713, 714, 715, 717, 719, 722, 723, 725, 728, 731, 732], "been": [16, 150, 163, 204, 210, 217, 317, 347, 349, 370, 409, 576, 583, 639, 644, 661, 666, 680, 681, 700, 725, 728], "normal": [16, 33, 268, 309, 322, 375, 680, 709, 717, 725, 728, 730], "1": [16, 42, 43, 44, 55, 74, 89, 105, 109, 113, 146, 148, 150, 151, 154, 163, 166, 170, 175, 177, 179, 181, 182, 183, 185, 193, 200, 202, 203, 215, 216, 218, 235, 236, 241, 243, 248, 250, 251, 252, 254, 255, 258, 259, 264, 268, 269, 270, 271, 284, 286, 291, 293, 294, 295, 297, 298, 301, 302, 306, 309, 315, 320, 321, 322, 324, 339, 344, 349, 352, 353, 373, 374, 375, 377, 388, 393, 395, 396, 398, 399, 402, 409, 432, 450, 451, 455, 484, 503, 518, 533, 537, 567, 569, 571, 576, 583, 588, 589, 601, 602, 604, 612, 624, 627, 632, 636, 638, 641, 642, 644, 660, 662, 663, 665, 666, 670, 672, 673, 676, 678, 679, 681, 684, 686, 702, 703, 710, 711, 713, 714, 715, 717, 718, 719, 721, 722, 723, 725, 726, 727, 728, 729, 730, 731, 732, 733], "replac": [16, 150, 164, 170, 176, 177, 322, 375, 585, 589, 604, 661, 668, 680, 691, 726], "zero": [16, 43, 44, 150, 151, 157, 177, 214, 227, 268, 309, 349, 396, 399, 409, 590, 604, 632, 641, 705, 719, 722, 725, 728, 730, 731], "multipli": [16, 235, 236, 725], "scale": [16, 43, 44, 100, 141, 143, 150, 157, 166, 169, 170, 175, 176, 177, 181, 182, 264, 268, 306, 309, 395, 396, 399, 409, 457, 529, 564, 589, 590, 601, 602, 603, 604, 722, 725, 727, 728, 730, 731], "factor": [16, 141, 154, 457, 725, 728, 734], "take": [16, 209, 236, 239, 240, 244, 268, 273, 282, 283, 287, 309, 347, 356, 377, 378, 432, 436, 621, 636, 638, 639, 662, 665, 666, 672, 680, 700, 719, 722, 724, 725, 730, 731, 733], "correspond": [16, 158, 207, 218, 235, 236, 251, 294, 317, 320, 324, 370, 373, 377, 605, 624, 632, 642, 672, 680, 719, 721, 722, 727, 731], "amount": [16, 728], "off": [16, 67, 68, 70, 496, 497, 499, 637, 725], "non": [16, 348, 632, 638, 665, 725, 731], "ref": [16, 148, 569], "http": [16, 157, 158, 202, 203, 211, 212, 221, 222, 223, 229, 251, 253, 294, 296, 317, 318, 320, 321, 322, 347, 349, 350, 370, 371, 373, 374, 375, 377, 403, 432, 590, 612, 638, 641, 663, 665, 673, 676, 677, 680, 689, 695, 698, 702, 704, 705, 706, 707, 708, 711, 713, 714, 715, 719, 726], "hanj": 16, "c": [16, 74, 253, 296, 503, 632, 663, 671, 676, 725, 731], "illinoi": 16, "edu": [16, 253, 296, 663], "cs412": 16, "bk3": 16, "diverg": [16, 622, 626, 644, 660, 666, 731], "pdf": [16, 203, 229], "github": [16, 158, 211, 212, 223, 251, 294, 317, 318, 321, 322, 347, 350, 370, 371, 374, 375, 377, 403, 432, 637, 641, 663, 665, 669, 676, 677, 680, 689, 695, 698, 702, 704, 705, 706, 707, 708, 711, 714, 715, 726], "com": [16, 158, 211, 212, 223, 251, 294, 317, 318, 321, 322, 347, 350, 370, 371, 374, 375, 377, 403, 432, 636, 641, 661, 663, 665, 673, 676, 677, 680, 683, 689, 702, 704, 705, 707, 708, 711, 714, 715, 726, 727, 734], "apach": [16, 677], "incub": 16, "blob": [16, 158, 211, 212, 317, 318, 321, 322, 347, 370, 371, 374, 375, 377, 403, 432, 680, 689, 711, 714, 715], "master": [16, 211, 212, 223, 317, 318, 321, 322, 347, 350, 370, 371, 374, 375, 377, 432, 680, 731], "python": [16, 75, 148, 161, 163, 253, 272, 296, 316, 369, 403, 451, 504, 569, 576, 583, 584, 632, 634, 638, 661, 663, 665, 668, 671, 676, 680, 685, 691, 694, 700, 704, 705, 707, 708, 710, 713, 715, 719, 720, 730], "contrib": [16, 316, 369], "py": [16, 148, 158, 183, 214, 235, 236, 318, 320, 321, 322, 349, 371, 373, 374, 375, 403, 451, 569, 638, 642, 661, 665, 668, 676, 680, 685, 687, 688, 689, 695, 698, 702, 704, 705, 707, 708, 710, 711, 713, 714, 715, 722, 726, 729], "microsoft": [16, 403, 641, 642], "onnxruntim": [16, 235, 236, 247, 253, 260, 290, 296, 303, 325, 403, 426, 642, 660, 662, 675, 676, 681, 703, 721], "main": [16, 157, 195, 200, 218, 223, 275, 350, 401, 402, 403, 472, 473, 476, 590, 610, 611, 615, 638, 662, 665, 668, 680, 687, 689, 701, 710, 719, 722, 725], "tool": [16, 148, 313, 403, 569, 632, 641, 642, 680, 693, 697, 703, 706, 707, 708, 719, 720, 722], "arrai": [16, 43, 44, 148, 163, 268, 309, 320, 331, 373, 399, 409, 569, 583, 632, 730], "small": [16, 67, 68, 69, 70, 439, 496, 497, 498, 499, 639, 705, 706, 719, 725, 731, 734], "probabl": [16, 235, 236, 626, 725], "activationoper": 18, "onnx_quant": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40], "onnx_nod": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 87, 101, 111], "removableactivationoper": 18, "remov": [18, 43, 51, 57, 60, 74, 80, 83, 84, 85, 96, 98, 140, 205, 218, 322, 375, 454, 480, 486, 489, 503, 509, 512, 513, 514, 525, 527, 636, 680, 693, 697, 706, 713, 714, 719, 729], "qactivationoper": 18, "children": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 34, 35, 36, 38, 39, 164, 585], "initi": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 34, 35, 36, 38, 39, 42, 43, 44, 105, 116, 148, 154, 163, 193, 214, 239, 240, 248, 251, 270, 282, 283, 291, 294, 348, 349, 366, 399, 432, 448, 540, 569, 583, 592, 621, 639, 644, 663, 679, 699, 719, 722, 728, 731], "qoper": [18, 34, 235, 236, 670, 703], "float16activationoper": 18, "float16": [18, 21, 43, 150, 151, 605, 627, 663, 725], "argmaxoper": 19, "qargmaxoper": 19, "attentionoper": 20, "qattentionoper": 20, "qattent": 20, "binari": [21, 148, 324, 377, 569, 671, 679, 695, 698, 726], "binaryoper": 21, "binarydirect8bitoper": 21, "qbinaryoper": 21, "qbinari": 21, "float16binaryoper": 21, "concatoper": 22, "qconcatoper": 22, "qconcat": 22, "convoper": 23, "qconvoper": 23, "qlinearconv": 23, "direct8bit": 24, "direct8bitoper": 24, "qdirectoper": 24, "qdirect": 24, "embedlayernorm": 25, "embedlayernormalizationoper": 25, "qembedlayernormalizationoper": 25, "qembedlayernorm": 25, "gatheroper": 26, "qgatheroper": 26, "qgather": 26, "globalaveragepool": 27, "globalaveragepooloper": 27, "qglobalaveragepooloper": 27, "qlinearglobalaveragepool": 27, "gemmoper": 28, "qgemmoper": 28, "qgemm": 28, "lstmoper": 30, "matmuloper": 31, "qmatmuloper": 31, "qlinearmatmul": 31, "fusedmatmuloper": 31, "fusedmatmul": 31, "maxpooloper": 32, "qmaxpooloper": 32, "qmaxpool": 32, "batchnormalizationoper": 33, "batchnorm": [33, 62, 67, 121, 491, 496, 545, 638, 728], "normalizationoper": 33, "op_registri": 34, "op_typ": [34, 140, 141, 148, 230, 367, 404, 449, 454, 457, 474, 569, 588], "qop_registri": 34, "padoper": 35, "qpadoper": 35, "qpad": 35, "averagepool": 36, "pooloper": 36, "qpooloper": 36, "qlinearaveragepool": 36, "reduceoper": 37, "reduceminmaxoper": 37, "reducemin": 37, "reducemax": 37, "resizeoper": 38, "qresizeoper": 38, "qresiz": 38, "splitoper": 39, "qsplitoper": 39, "qsplit": 39, "unari": 40, "unaryoper": 40, "unarydirect8bitoper": 40, "q_config": [41, 170, 314, 642], "mode": [41, 42, 43, 45, 110, 163, 175, 260, 303, 320, 366, 373, 386, 393, 409, 448, 534, 574, 583, 615, 629, 631, 632, 642, 643, 665, 675, 693, 697, 705, 706, 722, 724, 725, 731], "quantization_param": 41, "op_types_to_quant": 41, "fallback_list": 41, "fp32": [41, 42, 44, 79, 131, 136, 143, 170, 177, 182, 235, 236, 239, 240, 282, 283, 313, 314, 324, 359, 366, 377, 395, 396, 398, 399, 404, 437, 441, 448, 472, 476, 508, 555, 560, 564, 576, 589, 602, 604, 624, 627, 631, 632, 637, 641, 642, 644, 665, 672, 673, 679, 680, 681, 690, 702, 703, 704, 705, 721, 722, 724, 725, 726, 727, 728, 729, 731, 733, 734], "add_qdq_pair_to_weight": [41, 235, 236, 722], "optypes_to_exclude_output_qu": [41, 235, 236, 722], "dedicated_qdq_pair": [41, 235, 236, 722], "smoothquant": [42, 170, 175, 176, 181, 393, 455, 641, 678, 720, 725, 732], "onnxrt": [42, 43, 44, 251, 253, 260, 268, 294, 296, 303, 309, 324, 377, 425, 630, 642, 665, 681, 702, 722, 734], "get_quant_dequant_output": 42, "input_data": [42, 662], "output_data": 42, "loss": [42, 185, 193, 235, 236, 270, 315, 324, 339, 344, 352, 377, 605, 621, 660, 665, 666, 667, 668, 669, 678, 679, 680, 681, 691, 703, 705, 718, 719, 720, 722, 725, 728, 731, 733], "output": [42, 43, 44, 51, 54, 59, 74, 98, 105, 110, 148, 150, 151, 170, 176, 177, 196, 207, 208, 213, 227, 233, 235, 236, 239, 240, 273, 277, 282, 283, 313, 314, 317, 347, 370, 377, 378, 386, 399, 432, 480, 483, 488, 503, 527, 534, 569, 574, 576, 588, 602, 604, 605, 621, 627, 628, 632, 638, 642, 643, 666, 667, 668, 670, 672, 674, 679, 680, 682, 691, 700, 701, 703, 708, 709, 713, 714, 715, 718, 719, 721, 722, 725, 726, 728, 729, 730, 731, 733], "numpi": [42, 43, 67, 68, 70, 105, 148, 268, 309, 320, 331, 373, 399, 496, 497, 499, 569, 671, 728, 730], "7": [42, 177, 183, 203, 235, 236, 388, 404, 409, 604, 644, 659, 671, 672, 680, 719, 722, 726, 728, 731, 734], "bit": [42, 44, 150, 155, 170, 177, 235, 236, 395, 396, 398, 399, 409, 450, 589, 602, 604, 612, 644, 660, 667, 681, 720, 722, 725, 728], "execut": [42, 43, 54, 157, 163, 183, 214, 215, 216, 235, 236, 349, 353, 355, 396, 431, 432, 433, 435, 483, 583, 587, 590, 621, 624, 631, 632, 665, 666, 667, 680, 681, 685, 686, 693, 694, 700, 701, 702, 703, 707, 710, 718, 719, 722, 725, 727, 731, 734], "provid": [42, 43, 44, 102, 105, 110, 150, 207, 239, 240, 268, 282, 283, 309, 315, 320, 339, 344, 352, 353, 373, 378, 392, 393, 395, 396, 398, 399, 404, 432, 534, 616, 621, 625, 627, 639, 641, 642, 643, 644, 659, 662, 665, 667, 668, 669, 675, 676, 678, 679, 680, 681, 682, 683, 687, 691, 694, 700, 701, 702, 708, 709, 719, 721, 722, 725, 728, 729, 731, 732, 733, 734], "make_sub_graph": 42, "opset": [42, 102, 104, 105, 236, 313, 314, 670], "ir_vers": 42, "thi": [42, 45, 86, 110, 132, 139, 143, 147, 150, 154, 158, 161, 163, 170, 177, 182, 185, 187, 192, 196, 199, 205, 207, 209, 211, 212, 213, 214, 218, 219, 220, 221, 223, 224, 225, 231, 235, 236, 239, 240, 250, 251, 252, 253, 254, 255, 256, 258, 268, 271, 277, 278, 282, 283, 293, 294, 295, 296, 297, 298, 299, 301, 309, 317, 320, 321, 322, 324, 333, 334, 336, 337, 338, 339, 344, 347, 349, 351, 352, 353, 356, 359, 370, 373, 374, 375, 377, 378, 388, 432, 436, 441, 450, 451, 515, 534, 556, 563, 564, 568, 571, 583, 584, 588, 589, 605, 621, 631, 632, 636, 637, 638, 639, 642, 643, 644, 660, 661, 662, 663, 666, 667, 668, 670, 671, 672, 675, 677, 678, 679, 680, 681, 682, 683, 685, 686, 688, 689, 691, 693, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 708, 709, 713, 714, 715, 719, 722, 724, 725, 726, 727, 728, 729, 730, 731, 732], "quant_dequant_data": 42, "qtype": [42, 43, 409, 642], "3": [42, 44, 148, 150, 151, 163, 185, 203, 216, 236, 253, 268, 296, 309, 320, 373, 395, 396, 398, 399, 404, 451, 569, 583, 632, 638, 639, 641, 660, 661, 662, 663, 666, 668, 670, 672, 673, 676, 679, 680, 681, 683, 687, 691, 693, 697, 702, 707, 708, 710, 711, 713, 717, 719, 721, 722, 725, 726, 727, 728, 730, 731, 734], "scheme": [42, 43, 44, 150, 155, 166, 170, 177, 395, 396, 398, 399, 409, 589, 601, 602, 604, 642, 643, 644, 662, 672, 691, 725, 731, 733], "sym": [42, 43, 44, 150, 151, 177, 409, 589, 602, 604, 643, 644, 672, 722, 725, 733], "dequant": [42, 43, 44, 51, 88, 91, 92, 93, 94, 96, 150, 158, 170, 177, 399, 480, 517, 520, 521, 522, 523, 525, 576, 604, 632, 638, 643, 728, 729], "asym": [42, 43, 44, 150, 155, 166, 170, 177, 395, 396, 398, 399, 409, 589, 601, 602, 604, 644, 672, 725, 733], "ortsmoothqu": 42, "fake": [42, 44, 113, 166, 175, 177, 181, 187, 393, 450, 537, 589, 601, 602, 604, 680, 722, 725, 728], "channel": [42, 43, 44, 143, 151, 175, 176, 177, 181, 182, 205, 208, 213, 235, 236, 264, 268, 306, 309, 347, 393, 396, 564, 602, 604, 627, 641, 642, 644, 675, 676, 683, 685, 690, 705, 719, 725, 730, 734], "For": [42, 44, 150, 170, 177, 181, 187, 203, 207, 208, 211, 212, 223, 236, 253, 268, 296, 309, 321, 322, 324, 347, 350, 374, 375, 377, 378, 393, 395, 396, 398, 432, 589, 602, 604, 636, 638, 640, 642, 644, 666, 667, 668, 670, 672, 675, 683, 685, 686, 688, 691, 702, 703, 708, 719, 724, 725, 728, 729, 731, 733, 734], "more": [42, 148, 150, 175, 181, 185, 187, 211, 212, 268, 309, 347, 393, 569, 605, 639, 640, 641, 643, 660, 661, 663, 666, 668, 670, 673, 675, 676, 678, 680, 681, 683, 691, 695, 698, 703, 708, 717, 718, 719, 724, 725, 728, 731, 732, 734], "detail": [42, 154, 175, 181, 184, 185, 207, 268, 309, 393, 632, 633, 636, 641, 643, 644, 660, 661, 666, 672, 673, 674, 678, 679, 680, 681, 683, 691, 700, 708, 709, 719, 725, 726, 727, 728, 729, 731, 732], "pleas": [42, 150, 157, 158, 175, 181, 202, 211, 212, 213, 221, 222, 223, 235, 236, 251, 252, 253, 256, 294, 295, 296, 299, 347, 349, 350, 377, 393, 432, 451, 590, 638, 639, 640, 641, 642, 659, 660, 663, 667, 668, 670, 676, 678, 679, 681, 683, 684, 688, 691, 707, 708, 709, 719, 722, 724, 725, 726, 727, 728, 731, 732], "refer": [42, 150, 157, 158, 175, 181, 202, 211, 212, 213, 221, 222, 223, 227, 235, 236, 251, 294, 317, 318, 324, 347, 349, 350, 370, 371, 377, 393, 432, 451, 590, 638, 642, 643, 659, 662, 663, 665, 667, 668, 670, 674, 676, 677, 679, 680, 681, 683, 688, 691, 702, 703, 705, 707, 708, 709, 717, 721, 723, 726, 730, 731], "accur": [42, 157, 175, 181, 222, 393, 590, 612, 719, 725, 728], "effici": [42, 175, 181, 393, 639, 641, 660, 662, 666, 683, 708, 718, 719, 720, 725, 728, 731], "post": [42, 97, 98, 157, 175, 181, 221, 236, 239, 240, 282, 283, 393, 432, 526, 527, 590, 612, 636, 641, 642, 643, 665, 667, 668, 670, 675, 676, 683, 689, 700, 710, 719, 720, 723, 725, 728, 729, 731], "train": [42, 57, 80, 150, 157, 175, 177, 181, 192, 215, 216, 219, 221, 222, 235, 236, 239, 240, 251, 253, 268, 278, 282, 283, 294, 296, 309, 310, 326, 349, 369, 393, 432, 486, 509, 590, 612, 624, 639, 641, 642, 643, 649, 663, 665, 666, 667, 670, 675, 681, 683, 689, 700, 705, 713, 718, 720, 723, 725, 727, 728, 731, 733], "larg": [42, 43, 175, 181, 222, 393, 641, 662, 666, 678, 680, 720, 723, 725, 728, 734], "languag": [42, 175, 181, 222, 317, 370, 393, 636, 641, 670, 678, 704, 720, 723, 725, 728], "2": [42, 43, 44, 54, 74, 105, 109, 150, 151, 163, 175, 177, 179, 181, 183, 185, 203, 209, 215, 216, 229, 235, 236, 252, 269, 295, 320, 322, 324, 349, 356, 373, 375, 377, 388, 393, 395, 396, 398, 399, 409, 436, 451, 483, 503, 533, 583, 589, 602, 604, 632, 638, 642, 660, 662, 663, 665, 666, 672, 675, 676, 677, 678, 679, 681, 704, 710, 711, 713, 714, 715, 717, 719, 720, 722, 723, 725, 726, 727, 728, 730, 731, 732], "spiq": [42, 175, 181, 393, 728], "free": [42, 175, 181, 221, 239, 240, 282, 283, 393, 432, 636, 689, 694, 702, 710, 717, 727, 728], "per": [42, 43, 44, 175, 177, 181, 183, 235, 236, 269, 393, 396, 399, 604, 605, 626, 642, 644, 662, 708, 719, 724, 725, 734], "we": [42, 43, 67, 68, 70, 74, 86, 143, 151, 163, 175, 181, 182, 183, 185, 207, 211, 218, 235, 236, 250, 269, 271, 293, 317, 320, 370, 373, 393, 403, 409, 439, 496, 497, 499, 503, 515, 564, 583, 636, 638, 642, 643, 644, 661, 662, 665, 668, 670, 672, 678, 679, 680, 687, 688, 691, 695, 698, 700, 701, 703, 706, 713, 714, 715, 717, 718, 719, 721, 722, 723, 725, 726, 727, 728, 729, 731, 732], "onli": [42, 44, 54, 63, 70, 86, 109, 115, 143, 163, 169, 175, 177, 181, 182, 183, 195, 200, 204, 210, 217, 235, 236, 251, 269, 271, 275, 294, 314, 326, 347, 349, 360, 393, 399, 402, 404, 432, 442, 450, 451, 483, 492, 499, 515, 533, 539, 564, 583, 590, 603, 605, 612, 632, 641, 642, 643, 644, 659, 660, 662, 665, 666, 668, 671, 672, 678, 680, 681, 688, 701, 719, 720, 721, 722, 723, 728, 729, 731, 732, 733], "inplac": [42, 175, 393, 587, 602, 615], "mean": [42, 44, 150, 175, 177, 209, 218, 235, 236, 264, 268, 306, 309, 322, 324, 347, 359, 375, 377, 393, 441, 602, 638, 643, 644, 662, 665, 668, 672, 679, 680, 686, 705, 719, 722, 723, 725, 728, 730, 731, 733, 734], "weight": [42, 43, 44, 60, 61, 122, 140, 141, 143, 148, 150, 151, 154, 155, 158, 169, 170, 175, 176, 177, 182, 185, 202, 204, 208, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 224, 226, 235, 236, 314, 347, 349, 366, 377, 393, 395, 396, 398, 399, 402, 404, 409, 432, 439, 448, 450, 454, 457, 489, 490, 546, 564, 569, 576, 589, 590, 603, 604, 605, 612, 632, 633, 641, 642, 643, 644, 660, 665, 667, 672, 674, 678, 680, 702, 713, 717, 719, 720, 721, 722, 723, 728, 729, 731, 732, 733], "chang": [42, 96, 143, 150, 151, 175, 182, 215, 216, 218, 219, 221, 222, 225, 235, 236, 349, 351, 393, 439, 525, 564, 632, 637, 643, 662, 668, 671, 677, 680, 683, 693, 694, 697, 700, 706, 719, 729, 730, 731], "you": [42, 163, 175, 235, 236, 249, 251, 292, 294, 349, 377, 393, 432, 583, 605, 637, 638, 643, 661, 662, 663, 665, 668, 676, 677, 679, 681, 683, 685, 686, 688, 693, 697, 700, 701, 702, 703, 704, 705, 706, 708, 719, 722, 725, 726, 727, 728, 729, 732], "can": [42, 43, 44, 143, 154, 158, 163, 175, 182, 185, 199, 207, 208, 209, 214, 222, 223, 225, 235, 236, 239, 240, 250, 253, 268, 269, 271, 282, 283, 293, 296, 309, 320, 322, 324, 347, 349, 351, 373, 375, 377, 378, 388, 393, 399, 409, 432, 564, 583, 605, 621, 632, 638, 639, 641, 642, 643, 644, 659, 661, 662, 663, 665, 666, 667, 668, 670, 672, 675, 676, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 689, 691, 693, 694, 695, 697, 698, 700, 701, 703, 705, 706, 707, 708, 710, 717, 718, 719, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 733, 734], "recov": [42, 175, 393, 631, 632, 642, 667], "helper": [43, 45, 110, 116, 148, 170, 251, 252, 253, 267, 294, 295, 296, 308, 312, 313, 314, 386, 409, 534, 540, 569, 574, 616, 630], "get_node_original_nam": 43, "origin": [43, 44, 140, 148, 150, 164, 170, 176, 203, 207, 219, 227, 229, 236, 251, 268, 269, 294, 309, 333, 334, 336, 337, 338, 348, 349, 368, 399, 409, 437, 450, 454, 569, 585, 604, 627, 632, 637, 663, 688, 719, 722, 730, 731, 733], "simple_progress_bar": [43, 409], "total": [43, 214, 268, 309, 324, 349, 377, 409, 663, 665, 719, 725, 730, 734], "progress": [43, 201, 204, 217, 253, 296, 409, 694, 700, 702, 719, 722], "bar": [43, 253, 296, 409, 700, 720], "case": [43, 70, 74, 154, 163, 177, 183, 185, 236, 250, 267, 268, 269, 293, 308, 309, 315, 339, 344, 352, 388, 409, 499, 503, 583, 589, 644, 661, 662, 666, 667, 668, 672, 674, 679, 684, 688, 700, 701, 702, 705, 711, 714, 715, 717, 719, 720, 722, 725, 726, 728, 730, 732, 733, 734], "where": [43, 154, 163, 235, 236, 320, 324, 373, 377, 409, 450, 583, 632, 644, 660, 665, 666, 693, 697, 701, 728, 729], "tqdm": [43, 409, 680], "t": [43, 67, 68, 70, 143, 154, 163, 182, 209, 235, 236, 268, 271, 309, 322, 375, 409, 496, 497, 499, 564, 583, 638, 642, 661, 665, 666, 668, 680, 681, 701, 706, 719, 722, 725, 731, 733], "dtype_to_nam": 43, "dtype_map": 43, "dtype": [43, 44, 102, 105, 151, 235, 236, 254, 255, 264, 268, 297, 298, 306, 309, 399, 571, 602, 604, 605, 612, 627, 643, 644, 663, 665, 670, 672, 683, 705, 721, 722, 725, 728, 729, 730, 733], "its": [43, 60, 96, 148, 158, 207, 216, 219, 221, 227, 236, 247, 253, 268, 290, 296, 309, 312, 318, 319, 349, 356, 371, 372, 436, 489, 525, 569, 636, 663, 666, 677, 679, 681, 691, 693, 697, 700, 701, 719, 725, 727, 730, 731], "string": [43, 45, 116, 148, 150, 157, 161, 163, 183, 191, 193, 195, 199, 200, 207, 209, 214, 223, 224, 225, 227, 232, 235, 236, 253, 270, 275, 296, 310, 315, 317, 320, 326, 327, 328, 330, 331, 339, 344, 347, 348, 349, 350, 351, 352, 370, 373, 382, 386, 409, 540, 569, 574, 576, 583, 584, 590, 599, 624, 629, 632, 679, 730], "represent": [43, 161, 584, 636, 638, 660, 667, 719, 722], "quanttyp": [43, 450], "repres": [43, 209, 213, 214, 223, 224, 227, 253, 258, 296, 301, 320, 322, 324, 373, 375, 377, 395, 396, 398, 399, 636, 644, 660, 663, 670, 708, 719, 722, 723, 731], "make_quant_nod": 43, "axi": [43, 236], "make": [43, 105, 143, 182, 199, 209, 214, 223, 225, 249, 292, 347, 349, 351, 564, 632, 636, 642, 643, 659, 661, 662, 672, 679, 680, 688, 693, 697, 700, 702, 719, 722, 723, 724, 725, 727, 728, 731], "quantizelinear": 43, "make_dquant_nod": 43, "dequantizelinear": 43, "is_b_transpos": [43, 409], "inuput": [43, 409], "b": [43, 74, 150, 154, 177, 251, 294, 409, 503, 632, 637, 660, 663, 679, 719, 725, 728, 731], "transpos": [43, 73, 151, 213, 264, 268, 309, 313, 347, 409, 502, 725, 730], "split_shared_bia": 43, "share": [43, 44, 82, 98, 109, 141, 150, 177, 399, 457, 511, 527, 533, 589, 602, 604, 671, 672, 725, 728, 731], "float_to_float16": 43, "float_to_bfloat16": 43, "bfloat16": [43, 605, 681, 683, 691, 724], "cast_tensor": 43, "is_large_model": 43, "tensorproto": [43, 105], "raw": [43, 183, 252, 256, 259, 295, 299, 302, 359, 441, 679, 704, 731], "remove_init_from_model_input": 43, "collate_pr": 43, "result": [43, 148, 158, 170, 185, 264, 268, 306, 309, 317, 320, 321, 322, 324, 370, 373, 374, 375, 377, 412, 432, 439, 569, 588, 621, 631, 632, 636, 639, 641, 662, 665, 666, 668, 675, 677, 679, 680, 688, 689, 700, 701, 704, 708, 709, 710, 711, 717, 719, 720, 722, 725, 727, 728, 729, 730, 731, 732, 734], "quantize_data_with_scale_zero": 43, "zero_point": [43, 44, 399], "point": [43, 44, 150, 177, 264, 306, 321, 322, 331, 356, 374, 375, 396, 399, 409, 436, 604, 632, 679, 700, 705, 706, 722, 725, 728, 730, 731], "To": [43, 320, 373, 388, 409, 637, 643, 644, 661, 663, 665, 668, 681, 684, 687, 693, 695, 697, 698, 702, 706, 719, 721, 724, 725, 726, 728, 731, 733], "pack": [43, 61, 409, 490], "comput": [43, 44, 105, 150, 154, 158, 170, 317, 318, 321, 322, 324, 370, 371, 374, 375, 377, 395, 396, 398, 399, 409, 605, 621, 632, 660, 662, 667, 670, 679, 680, 681, 683, 694, 703, 719, 720, 722, 725, 728, 731], "linear": [43, 150, 151, 157, 166, 169, 170, 177, 181, 205, 207, 208, 213, 218, 227, 230, 235, 236, 347, 409, 590, 601, 603, 604, 638, 666, 670, 680, 719, 725, 728, 731], "transform": [43, 50, 143, 145, 146, 147, 150, 157, 167, 169, 221, 251, 252, 253, 254, 255, 256, 258, 260, 262, 294, 295, 296, 297, 298, 299, 301, 303, 305, 316, 369, 409, 479, 564, 566, 567, 568, 571, 587, 588, 590, 603, 612, 638, 639, 641, 660, 663, 666, 667, 668, 669, 673, 678, 680, 683, 688, 689, 690, 691, 703, 711, 714, 715, 719, 720, 724, 725, 728, 729, 731, 733, 734], "when": [43, 54, 64, 70, 148, 161, 163, 185, 208, 214, 219, 227, 235, 236, 251, 252, 260, 268, 294, 295, 303, 309, 318, 348, 349, 371, 409, 432, 483, 493, 499, 569, 583, 584, 605, 621, 636, 639, 643, 661, 662, 663, 680, 691, 693, 694, 697, 701, 702, 705, 706, 707, 709, 713, 719, 722, 725, 728, 730, 731], "uint8": [43, 177, 264, 306, 320, 368, 373, 409, 450, 604, 642, 663, 672, 721, 722, 730, 733], "rmin": [43, 409, 722], "rmax": [43, 409, 722], "m": [43, 158, 177, 211, 212, 235, 236, 347, 409, 604, 637, 666, 676, 683, 685, 688, 691, 695, 698, 708, 719, 734], "max": [43, 104, 143, 150, 177, 182, 185, 200, 203, 235, 236, 268, 309, 321, 322, 356, 374, 375, 409, 436, 564, 576, 604, 632, 641, 665, 676, 680, 703, 705, 719, 722, 725, 728, 730, 731], "ab": [43, 157, 177, 202, 221, 222, 349, 409, 590, 604, 612, 719, 722, 728], "np": [43, 268, 309, 356, 399, 436, 668, 710, 728, 730, 731], "calculate_scale_zp": 43, "quantize_rang": [43, 409], "calcul": [43, 60, 170, 202, 211, 227, 236, 254, 255, 297, 298, 321, 322, 347, 349, 359, 374, 375, 441, 489, 571, 622, 632, 660, 663, 679, 680, 691, 703, 717, 719, 722, 725, 727, 728, 731, 733], "quantize_data": [43, 409], "add": [43, 53, 64, 109, 119, 148, 195, 227, 235, 236, 251, 253, 275, 294, 296, 348, 366, 409, 448, 482, 493, 533, 543, 569, 632, 637, 638, 644, 662, 663, 668, 670, 672, 679, 680, 695, 698, 702, 703, 710, 713, 714, 727, 728, 729, 731, 732], "necessari": [43, 223, 409, 636, 639, 643, 682, 701, 719, 727, 731], "intermedi": [43, 158, 193, 235, 236, 270, 409, 638, 675, 722], "full": [43, 150, 151, 177, 251, 252, 253, 294, 295, 296, 409, 627, 632, 641, 660, 663, 665, 671, 677, 701, 706, 719, 725, 726], "equat": [43, 322, 324, 375, 377, 409, 722, 728], "r": [43, 143, 182, 409, 564, 665, 676, 701, 702, 704, 705, 707, 708, 722, 734], "": [43, 44, 105, 143, 148, 163, 182, 207, 208, 209, 213, 214, 215, 216, 219, 221, 222, 227, 230, 232, 233, 235, 236, 250, 253, 267, 268, 269, 271, 273, 293, 296, 308, 309, 322, 347, 349, 375, 377, 378, 382, 396, 409, 432, 564, 569, 576, 583, 592, 604, 605, 629, 632, 636, 637, 639, 643, 644, 661, 665, 666, 668, 670, 672, 675, 680, 681, 688, 691, 693, 697, 700, 703, 705, 708, 718, 719, 720, 721, 722, 725, 726, 727, 728, 731, 732, 733, 734], "q": [43, 44, 107, 109, 131, 409, 531, 533, 555, 725, 728], "z": [43, 409, 660, 661, 666, 728], "real": [43, 254, 271, 297, 409, 571, 643, 660, 668, 702, 709, 720, 722], "quantize_data_per_channel": 43, "dequantize_data_with_scale_zero": 43, "tensor_valu": 43, "scale_valu": 43, "zo_valu": 43, "dequantize_data": 43, "valueinfo": 43, "tensor_nam": [43, 148, 163, 164, 569, 583, 585], "new_dtyp": 43, "cast": [43, 51, 480, 724, 730], "info": [43, 170, 177, 211, 212, 227, 266, 271, 276, 347, 382, 576, 588, 589, 627, 628, 632, 638, 661, 665, 682, 710, 715], "quantizedvalu": 43, "new_quantized_nam": 43, "scale_nam": 43, "zero_point_nam": 43, "quantized_value_typ": 43, "quint8": 43, "linearli": 43, "quantizediniti": 43, "quantized_data": 43, "quantizationmod": 43, "quantizedvaluetyp": 43, "quantformat": 43, "quantize_nparrai": 43, "arr": [43, 576, 632], "low": [43, 150, 151, 177, 239, 240, 254, 255, 282, 283, 297, 298, 315, 325, 352, 378, 571, 642, 643, 659, 660, 663, 668, 680, 681, 705, 720, 722, 725, 728, 731], "high": [43, 254, 255, 297, 298, 571, 663, 665, 676, 705, 720, 731], "attribute_to_kwarg": 43, "attribut": [43, 83, 104, 105, 148, 170, 207, 218, 233, 236, 512, 569, 605, 632, 642, 662, 672, 674, 680, 721, 733], "make_nod": 43, "find_by_nam": [43, 409], "item_list": [43, 409], "find": [43, 67, 68, 70, 105, 148, 230, 324, 331, 356, 377, 409, 436, 496, 497, 499, 569, 632, 642, 665, 678, 686, 693, 697, 700, 701, 703, 705, 719, 725, 727, 728, 729, 731], "item": [43, 227, 233, 235, 236, 267, 308, 348, 366, 409, 448, 576, 592, 660, 668, 719, 728, 731], "trt_env_setup": 43, "environ": [43, 183, 269, 636, 659, 693, 697, 700, 708, 711, 713, 714, 715, 731], "variabl": [43, 161, 183, 224, 235, 236, 253, 269, 296, 356, 436, 450, 584, 676, 719, 731], "tensorrt": [43, 660, 681, 722], "to_numpi": 43, "infer_shap": 43, "in_mp": 43, "int_max": 43, "31": [43, 734], "auto_merg": 43, "guess_output_rank": 43, "verbos": [43, 314, 356, 436], "base_dir": 43, "shape": [43, 44, 105, 148, 150, 209, 254, 255, 264, 268, 297, 298, 306, 309, 320, 373, 399, 409, 569, 571, 641, 663, 672, 673, 680, 702, 703, 725, 728, 730], "weightonli": 44, "get_blob_s": 44, "group_siz": [44, 150, 155, 166, 170, 177, 395, 396, 398, 399, 450, 589, 601, 602, 604, 612, 725], "has_zp": 44, "blob_siz": 44, "how": [44, 150, 163, 177, 185, 192, 202, 209, 215, 216, 221, 222, 235, 236, 268, 309, 310, 347, 399, 583, 602, 604, 637, 638, 640, 642, 662, 663, 666, 667, 668, 674, 679, 680, 694, 695, 698, 699, 700, 702, 713, 714, 715, 719, 720, 722, 728, 730, 731, 732, 733], "mani": [44, 150, 177, 377, 399, 432, 602, 604, 661, 662, 676, 725, 731, 733], "element": [44, 150, 177, 185, 211, 212, 227, 249, 292, 320, 347, 373, 399, 602, 604, 632, 663, 675, 679, 719, 725, 728], "one": [44, 109, 110, 115, 150, 151, 163, 170, 177, 183, 209, 213, 218, 221, 222, 223, 225, 268, 278, 309, 317, 320, 324, 326, 347, 350, 351, 370, 373, 377, 399, 533, 534, 539, 583, 588, 602, 604, 605, 639, 642, 660, 666, 667, 668, 672, 675, 676, 679, 680, 681, 683, 684, 688, 689, 691, 693, 694, 697, 700, 701, 702, 705, 706, 707, 708, 710, 717, 718, 719, 721, 722, 723, 725, 726, 728, 730, 731], "zp": [44, 150, 177, 399, 602, 604, 728], "make_matmul_weight_only_nod": [44, 399], "weight_shap": [44, 399], "num_bit": [44, 113, 150, 166, 170, 177, 395, 396, 398, 399, 537, 601, 728], "k_block": [44, 399], "q_weight": [44, 399], "accuracy_level": [44, 395, 396, 398, 399, 404], "matmulfpq4": [44, 399], "accuraci": [44, 183, 185, 227, 235, 236, 239, 240, 282, 283, 310, 315, 324, 339, 344, 352, 377, 378, 388, 395, 396, 398, 399, 402, 432, 437, 451, 605, 621, 629, 638, 641, 643, 644, 660, 662, 663, 665, 667, 668, 669, 670, 678, 679, 680, 691, 700, 702, 709, 710, 713, 714, 717, 718, 719, 720, 721, 725, 726, 727, 728, 729, 732, 733, 734], "level": [44, 187, 207, 395, 396, 398, 399, 437, 451, 628, 636, 710, 728, 731], "unset": [44, 395, 396, 398, 399], "jbla": [44, 395, 396, 398, 399], "kernel": [44, 181, 235, 236, 395, 396, 398, 399, 642, 643, 731], "fp16": [44, 177, 236, 366, 395, 396, 398, 399, 448, 722], "4": [44, 54, 150, 151, 155, 166, 170, 177, 183, 203, 209, 218, 235, 236, 260, 263, 264, 268, 303, 306, 309, 317, 318, 320, 370, 371, 373, 395, 396, 398, 399, 402, 404, 450, 451, 483, 589, 601, 602, 604, 612, 636, 642, 644, 659, 668, 669, 672, 675, 676, 679, 680, 688, 708, 710, 714, 719, 722, 725, 728, 730, 731, 734], "matmulnbit": [44, 399], "new_init": [44, 399], "matmul_weight_only_nod": [44, 399], "quant_tensor": [44, 399, 604], "32": [44, 150, 155, 177, 205, 395, 396, 398, 399, 404, 450, 589, 602, 604, 612, 668, 674, 725, 734], "ratio": [44, 143, 182, 209, 214, 227, 235, 236, 264, 268, 306, 309, 349, 398, 399, 564, 663, 680, 703, 719, 730, 734], "group": [44, 150, 151, 154, 177, 224, 334, 395, 396, 398, 399, 604, 641, 675, 719, 725, 729, 730, 731, 734], "clip": [44, 177, 395, 398, 399, 589, 602, 604, 725, 728], "qdq_tensor": [44, 399], "quant": [44, 148, 150, 170, 177, 235, 236, 366, 392, 395, 396, 398, 399, 401, 404, 448, 459, 460, 470, 474, 569, 589, 602, 604, 638, 661, 678, 680, 722], "pad_tensor": [44, 399], "rowi": [44, 399], "so": [44, 105, 268, 309, 399, 450, 638, 642, 665, 671, 675, 681, 686, 688, 704, 705, 706, 722, 724, 725, 728, 729, 730, 732], "divis": [44, 399], "pade": [44, 399], "rtn_quantiz": [44, 177, 398, 602], "weight_config": [44, 150, 151, 155, 157, 169, 177, 390, 395, 396, 398, 589, 590, 602, 603], "round": [44, 143, 150, 177, 182, 398, 404, 564, 602, 612, 641, 720, 722, 725, 728], "nearst": [44, 177, 398], "method": [44, 141, 143, 150, 161, 163, 170, 177, 199, 224, 235, 236, 244, 249, 250, 251, 253, 260, 268, 271, 287, 292, 293, 294, 296, 303, 309, 330, 331, 332, 366, 395, 396, 398, 448, 450, 457, 564, 583, 584, 589, 602, 605, 624, 625, 627, 628, 638, 639, 641, 660, 661, 662, 663, 665, 666, 667, 679, 680, 718, 719, 722, 724, 725, 728, 730, 731], "modelproto": [44, 312, 378, 390, 393, 395, 396, 398, 399, 401, 402, 409, 682], "onnxmodel": [44, 385, 390, 392, 393, 395, 396, 398, 399, 408, 425], "fc2": [44, 170, 177, 395, 396, 398, 589, 602, 604], "rtn": [44, 170, 401, 404, 474, 610, 612, 661, 723, 725], "get_weight_scal": 44, "apply_awq_scal": 44, "absorb_pair": 44, "output_dict": 44, "appli": [44, 113, 126, 127, 128, 131, 133, 137, 148, 150, 166, 169, 192, 218, 220, 278, 318, 371, 395, 396, 398, 401, 472, 537, 550, 551, 552, 555, 557, 561, 569, 601, 603, 610, 636, 643, 644, 680, 683, 685, 691, 700, 704, 705, 710, 718, 719, 722, 724, 727, 728, 731, 732, 733], "salient": [44, 177, 589, 719, 725], "apply_awq_clip": 44, "mse": [44, 170, 177, 235, 236, 316, 324, 358, 369, 377, 396, 404, 432, 440, 589, 632, 665, 679, 705, 721, 725, 726], "prepare_input": [44, 399], "n_sampl": [44, 150, 155, 170, 177, 589, 604], "sampl": [44, 77, 150, 170, 177, 185, 235, 236, 244, 249, 251, 252, 253, 264, 268, 287, 292, 294, 295, 296, 306, 309, 324, 331, 356, 377, 436, 506, 589, 604, 639, 662, 663, 669, 675, 701, 722, 725, 728, 730, 731, 733, 734], "session": [44, 148, 250, 293, 386, 399, 569, 574, 680, 729], "awq_quant": [44, 177, 395, 589], "enable_auto_scal": [44, 177, 395, 404, 725], "enable_mse_search": [44, 177, 395, 404, 725], "awar": [44, 155, 158, 177, 192, 236, 278, 326, 347, 395, 439, 589, 621, 642, 643, 644, 660, 667, 668, 670, 675, 700, 710, 718, 720, 725, 731], "awq": [44, 177, 401, 404, 723, 725], "enabl": [44, 109, 150, 154, 158, 177, 214, 235, 236, 349, 533, 589, 605, 643, 644, 668, 676, 681, 683, 685, 688, 689, 691, 702, 704, 705, 707, 710, 719, 720, 728, 731], "gptq": [44, 177, 401, 404, 612, 661, 723, 725], "w": [44, 157, 268, 309, 590, 719, 728, 730], "h": [44, 235, 236, 268, 309, 668, 708, 709, 713, 714, 715, 730], "blocksiz": [44, 396, 404], "percdamp": [44, 396, 404, 612, 725], "01": [44, 150, 185, 235, 236, 395, 396, 404, 612, 680, 721, 725, 731, 733, 734], "actord": [44, 396, 404, 725], "perchannel": [44, 396, 404], "hessian": [44, 158, 396, 439, 725, 731], "matrix": [44, 377, 432, 641, 691, 732], "percent": 44, "averag": [44, 321, 322, 324, 374, 375, 377, 396, 679, 680, 725, 731, 734], "diagon": [44, 396, 725], "dampen": [44, 154], "rearrang": [44, 221, 396, 719, 725], "consid": [44, 148, 154, 324, 377, 569, 636, 660, 661, 666, 701, 731], "diag": 44, "error": [44, 105, 150, 158, 163, 177, 324, 359, 377, 396, 441, 583, 628, 665, 679, 684, 705, 706, 709, 725, 728, 731], "gptq_quantiz": [44, 177, 396, 590], "get_ops_recurs": 45, "prefix": [45, 148, 156, 163, 164, 168, 170, 183, 569, 583, 585, 604, 683, 688, 729], "graph_info": 45, "templateadaptor": 45, "tampl": 45, "dictionari": [45, 67, 68, 70, 148, 150, 156, 158, 163, 170, 177, 199, 230, 233, 235, 236, 267, 308, 320, 327, 330, 332, 373, 409, 496, 497, 499, 569, 576, 583, 588, 620, 632], "yaml": [45, 227, 233, 236, 239, 240, 251, 253, 269, 282, 283, 294, 296, 310, 315, 326, 327, 328, 330, 339, 344, 352, 353, 459, 631, 632, 642, 644, 674, 679, 680, 717, 721, 729, 730], "file": [45, 105, 148, 161, 163, 164, 170, 180, 196, 223, 227, 232, 235, 236, 239, 240, 251, 252, 253, 256, 267, 268, 274, 277, 282, 283, 294, 295, 296, 299, 308, 309, 310, 315, 320, 326, 327, 328, 330, 339, 344, 348, 350, 352, 353, 373, 378, 388, 415, 416, 420, 432, 569, 576, 583, 584, 585, 631, 632, 637, 639, 642, 643, 644, 668, 671, 674, 677, 679, 680, 682, 686, 695, 698, 699, 700, 701, 703, 704, 705, 706, 708, 709, 713, 714, 715, 717, 721, 722, 725, 729, 730], "pytorchadaptor": 45, "api": [45, 70, 75, 110, 154, 157, 279, 315, 320, 352, 365, 366, 373, 377, 432, 447, 448, 451, 499, 504, 534, 576, 590, 597, 632, 638, 645, 647, 651, 654, 657, 665, 670, 675, 676, 680, 685, 689, 690, 691, 707, 708, 712, 726, 727, 731, 735], "pytorch_ipexadaptor": 45, "intel": [45, 195, 211, 212, 223, 272, 275, 311, 316, 323, 324, 347, 350, 358, 364, 369, 376, 377, 410, 432, 440, 446, 576, 634, 636, 637, 639, 640, 642, 643, 644, 660, 663, 664, 666, 667, 669, 670, 672, 673, 677, 678, 681, 682, 683, 688, 690, 691, 702, 703, 704, 705, 707, 708, 717, 718, 719, 720, 722, 724, 725, 726, 728, 729, 731, 732, 733], "extens": [45, 161, 163, 576, 583, 584, 632, 639, 641, 642, 672, 675, 676, 678, 680, 681, 682, 684, 689, 690, 691, 695, 698, 699, 703, 719, 720, 722, 725, 728, 731, 732, 733], "ipex": [45, 165, 170, 235, 236, 588, 631, 675, 680, 681, 685, 689, 690, 728], "pytorch_fxadaptor": 45, "fx": [45, 170, 235, 360, 442, 675, 681, 689, 690, 704, 720, 722, 724], "graph": [45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 112, 113, 114, 117, 130, 132, 136, 139, 142, 143, 145, 146, 147, 148, 207, 250, 293, 315, 379, 386, 431, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 538, 541, 554, 556, 560, 563, 564, 566, 567, 568, 569, 574, 638, 642, 663, 666, 668, 674, 682, 683, 702, 705, 722, 723, 724, 729], "pytorchweightonlyadaptor": 45, "querybackendcap": [46, 642, 643], "tensorflowadaptor": [47, 460], "stock": [47, 460, 689, 728], "spr": [47, 460], "tensorflow_itexadaptor": [47, 460], "itex": [47, 109, 235, 236, 313, 460, 533, 681, 722, 728], "tensorflowqueri": [47, 460, 642], "performance_onli": [47, 48, 49, 107, 131, 136, 147, 235, 460, 477, 478, 531, 555, 560, 568, 680], "itex_mod": [47, 48, 89, 107, 131, 136, 460, 477, 518, 531, 555, 560], "quant_mod": [47, 366, 448, 460, 643, 644], "graphconvert": [48, 477], "qt_config": [48, 477], "recip": [48, 207, 235, 236, 315, 352, 477, 641, 680, 723, 725, 728, 731], "int8_sequ": [48, 477], "fp32_op": [48, 50, 107, 477, 479, 531], "bf16_op": [48, 50, 107, 477, 479, 531, 643, 724], "data_load": [48, 49, 477, 478, 642], "calib_func": [48, 155, 170, 177, 432, 477, 589, 603, 604, 724], "fake_qu": [48, 88, 107, 131, 136, 477, 517, 531, 555, 560], "qdq_enabl": [48, 477], "new_api": [48, 49, 71, 72, 77, 79, 92, 99, 131, 136, 143, 477, 478, 500, 501, 506, 508, 521, 528, 555, 560, 564], "use_bf16": [48, 49, 235, 477, 478, 721], "without": [49, 90, 148, 203, 219, 268, 309, 349, 368, 450, 478, 519, 569, 636, 666, 668, 680, 691, 702, 705, 719, 720, 721, 731, 732], "graphconverterwithoutcalib": [49, 478], "recover_config": [49, 478], "rewrit": [50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 106, 107, 108, 109, 204, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533], "bf16convert": [50, 479, 724], "rerewrit": [51, 480], "dequantizecastoptim": [51, 480], "b16": [51, 480], "dequantize_cast_optim": [52, 87, 111, 481, 516], "biasadd": [53, 59, 64, 66, 109, 482, 488, 493, 495, 533, 672], "convertaddtobiasaddoptim": [53, 482], "conv2d": [53, 59, 60, 61, 65, 66, 71, 125, 135, 143, 157, 474, 482, 488, 489, 490, 494, 495, 500, 549, 559, 564, 590, 643, 644, 665, 670, 672, 705, 728, 729, 731], "addv2": [53, 69, 482, 498, 672], "layout": [54, 483], "convertlayoutoptim": [54, 483], "convers": [54, 55, 236, 326, 483, 484, 637, 642, 643, 680, 681, 722, 724, 728], "optim": [54, 74, 75, 79, 80, 116, 118, 148, 150, 154, 194, 197, 198, 199, 201, 204, 207, 216, 221, 232, 235, 236, 272, 278, 315, 316, 332, 352, 356, 369, 436, 483, 503, 504, 508, 509, 540, 542, 569, 621, 622, 629, 632, 639, 641, 659, 661, 665, 666, 667, 668, 672, 673, 675, 676, 678, 680, 682, 683, 685, 687, 688, 691, 694, 702, 705, 706, 707, 709, 711, 720, 721, 722, 724, 725, 727, 728, 729, 731, 733], "nchw": [54, 264, 483], "nhwc": [54, 264, 483], "It": [54, 163, 177, 190, 192, 196, 209, 239, 240, 277, 282, 283, 322, 324, 331, 347, 352, 359, 375, 377, 378, 432, 437, 441, 483, 583, 604, 621, 642, 643, 644, 660, 665, 666, 680, 686, 689, 694, 700, 701, 702, 703, 705, 706, 708, 719, 722, 725, 726, 727, 731, 733], "exist": [54, 183, 233, 269, 386, 483, 574, 576, 632, 670, 679, 687, 731], "abov": [54, 483, 642, 643, 644, 666, 702, 703, 705, 708, 719, 722, 728, 731], "graph_def": [54, 140, 141, 148, 313, 378, 386, 431, 432, 454, 457, 483, 569, 574], "leakyrelu": [55, 484, 728], "convertleakyreluoptim": [55, 484], "below": [55, 66, 74, 235, 236, 353, 377, 403, 432, 484, 495, 503, 637, 638, 641, 642, 643, 644, 662, 665, 666, 668, 674, 679, 683, 685, 693, 694, 697, 700, 703, 708, 717, 718, 719, 721, 722, 725, 727, 728, 729, 731, 732], "subgraph": [55, 66, 105, 168, 484, 495, 723, 731], "mul": [55, 65, 66, 69, 177, 181, 484, 494, 495, 498, 589, 670, 725, 728], "maximum": [55, 150, 177, 185, 209, 214, 235, 236, 251, 268, 294, 309, 318, 349, 356, 371, 386, 436, 484, 574, 644, 660, 663, 665, 680, 719, 722, 728, 730], "note": [55, 161, 213, 320, 360, 373, 442, 484, 584, 639, 641, 643, 644, 661, 662, 665, 668, 670, 672, 676, 678, 680, 685, 688, 693, 697, 700, 702, 706, 708, 710, 719, 722, 725, 728, 729, 731, 732, 733], "coeffici": [55, 150, 224, 484, 719], "less": [55, 148, 170, 235, 236, 484, 576, 604, 632, 659, 666, 680, 707, 719], "than": [55, 148, 251, 268, 294, 309, 484, 576, 605, 632, 639, 641, 659, 663, 674, 705, 713, 717, 718, 719, 722, 725, 727, 730, 731], "valid": [55, 67, 68, 105, 190, 214, 217, 227, 235, 236, 253, 296, 320, 348, 349, 373, 386, 484, 496, 497, 574, 639, 641, 642, 663, 665, 666, 669, 672, 675, 677, 680, 691, 705, 719, 722, 725, 726], "nan": [56, 485], "random": [56, 148, 150, 177, 191, 199, 235, 236, 264, 268, 306, 309, 316, 332, 356, 358, 369, 436, 440, 485, 569, 576, 632, 639, 680, 719, 721, 730, 733], "convertnantorandom": [56, 485], "const": [56, 57, 63, 64, 67, 68, 70, 82, 98, 485, 486, 492, 493, 496, 497, 499, 511, 527], "consist": [56, 63, 485, 492, 637, 638, 661, 708, 728, 731], "placehold": [57, 249, 292, 486, 661], "convertplaceholdertoconst": [57, 486], "dilat": [58, 487], "contract": [58, 487], "dilatedcontract": [58, 487], "spacetobatchnd": [58, 487], "batchtospacend": [58, 487], "pattern": [58, 59, 61, 78, 96, 107, 108, 109, 131, 136, 170, 199, 200, 201, 202, 204, 207, 208, 214, 215, 216, 217, 219, 221, 222, 224, 232, 235, 236, 253, 296, 316, 337, 338, 340, 345, 349, 366, 369, 448, 487, 488, 490, 507, 525, 531, 532, 533, 555, 560, 642, 661, 663, 672, 675, 680, 701, 718, 721, 728, 731, 734], "inject": [59, 488, 680], "dummi": [59, 207, 254, 255, 297, 298, 324, 377, 488, 571, 641, 663, 673, 679, 680, 702], "injectdummybiasaddoptim": [59, 488], "fusion": [59, 61, 70, 78, 109, 126, 127, 128, 131, 132, 133, 137, 488, 490, 499, 507, 533, 550, 551, 552, 555, 556, 557, 561, 638, 642, 672], "expanddim": [60, 489], "expanddimsoptim": [60, 489], "next": [60, 244, 287, 451, 489, 639, 643, 644, 662, 721, 725, 731], "fetch": [61, 170, 180, 244, 287, 490, 643, 663, 713, 714, 715], "reshap": [61, 67, 68, 73, 176, 490, 496, 497, 502, 728], "fetchweightfromreshapeoptim": [61, 490], "handl": [61, 148, 175, 181, 190, 490, 569, 628, 638, 640, 661, 662, 708, 728], "fold": [62, 63, 170, 177, 314, 404, 474, 491, 492, 589, 603, 604, 672, 725, 728], "foldbatchnormnodesoptim": [62, 491], "graphfoldconstantoptim": [63, 492], "sequenc": [63, 105, 150, 177, 208, 211, 212, 235, 236, 251, 267, 268, 294, 308, 309, 318, 322, 347, 371, 375, 492, 592, 642, 663, 672, 719, 725, 730], "self": [63, 170, 177, 207, 235, 236, 388, 492, 589, 604, 605, 642, 643, 662, 663, 675, 679, 702, 727, 729, 731], "supported_op_typ": [63, 492], "fusebiasaddandaddoptim": [64, 493], "second": [64, 163, 208, 235, 236, 251, 294, 437, 493, 583, 632, 665, 680, 693, 697, 701, 713, 714, 725, 728, 731, 733], "columnwis": [65, 494], "fusecolumnwisemuloptim": [65, 494], "depthwiseconv2dn": [65, 71, 125, 135, 494, 500, 549, 559, 672], "math": [66, 495, 722], "fuseconvwithmathoptim": [66, 495], "elimin": [66, 495, 707], "sub": [66, 170, 183, 207, 269, 495, 588, 639, 661, 731], "realdiv": [66, 69, 495, 498], "decompos": [67, 68, 496, 497], "fusedecomposedbnoptim": [67, 496], "input_graph_def": [67, 68, 70, 496, 497, 499], "node_name_from_input": [67, 68, 70, 496, 497, 499], "node_nam": [67, 68, 70, 148, 386, 417, 496, 497, 499, 569, 574, 643], "strip": [67, 68, 70, 83, 84, 148, 496, 497, 499, 512, 513, 569, 729], "port": [67, 68, 70, 496, 497, 499, 702, 709], "other": [67, 68, 70, 150, 154, 161, 175, 181, 250, 293, 322, 375, 386, 496, 497, 499, 574, 584, 636, 638, 643, 644, 661, 665, 672, 675, 677, 680, 682, 703, 717, 719, 722, 728, 730, 731, 734], "underli": [67, 68, 70, 163, 496, 497, 499, 583], "node_from_map": [67, 68, 70, 496, 497, 499], "node_map": [67, 68, 70, 496, 497, 499], "pull": [67, 68, 70, 496, 497, 499], "def": [67, 68, 70, 185, 239, 240, 282, 283, 409, 432, 451, 496, 497, 499, 576, 605, 620, 621, 638, 642, 661, 662, 663, 666, 667, 668, 679, 680, 722, 728, 729, 731], "entri": [67, 68, 70, 158, 195, 275, 315, 353, 401, 402, 472, 473, 476, 496, 497, 499, 610, 611, 615, 632, 661, 677], "index": [67, 68, 70, 105, 183, 227, 236, 244, 249, 253, 287, 292, 296, 331, 496, 497, 499, 632, 663, 679, 701, 705, 725, 728], "everi": [67, 68, 70, 209, 212, 214, 235, 236, 347, 349, 496, 497, 499, 642, 662, 688, 693, 697, 723, 725, 731], "identifi": [67, 68, 70, 163, 320, 373, 386, 496, 497, 499, 574, 583, 708, 719, 725], "want": [67, 68, 70, 207, 235, 236, 249, 251, 292, 294, 349, 437, 496, 497, 499, 605, 621, 638, 642, 662, 663, 668, 680, 688, 700, 701, 708, 717, 722, 725, 727, 729, 731], "nodedef": [67, 68, 70, 496, 497, 499], "rais": [67, 68, 70, 105, 161, 163, 170, 204, 210, 217, 227, 320, 347, 348, 349, 373, 378, 451, 496, 497, 499, 583, 584, 604, 641, 661, 702, 719, 720], "valueerror": [67, 68, 70, 170, 320, 373, 451, 496, 497, 499, 604, 671], "If": [67, 68, 70, 74, 163, 177, 183, 187, 235, 236, 239, 240, 253, 268, 282, 283, 296, 309, 348, 378, 432, 451, 496, 497, 499, 503, 583, 592, 604, 605, 621, 637, 638, 643, 659, 661, 662, 663, 668, 676, 677, 679, 680, 686, 694, 695, 698, 700, 706, 711, 717, 719, 722, 725, 727, 728, 729, 730, 731], "isn": [67, 68, 70, 496, 497, 499], "present": [67, 68, 70, 496, 497, 499, 665, 708, 720, 728], "values_from_const": [67, 68, 70, 496, 497, 499], "node_def": [67, 68, 70, 496, 497, 499], "extract": [67, 68, 70, 148, 207, 253, 296, 368, 450, 496, 497, 499, 569, 663], "ha": [67, 68, 70, 74, 150, 157, 163, 213, 214, 269, 317, 347, 349, 370, 409, 451, 496, 497, 499, 503, 576, 583, 590, 637, 639, 642, 643, 644, 662, 670, 675, 680, 681, 686, 700, 705, 706, 708, 711, 719, 721, 722, 724, 727, 728, 731], "access": [67, 68, 70, 233, 236, 496, 497, 499, 627, 632, 695, 698, 702], "valid_reshape_input": [67, 68, 496, 497], "reshape_in0_ndef": [67, 68, 496, 497], "reshape_in1_ndef": [67, 68, 496, 497], "ar": [67, 68, 105, 151, 163, 170, 209, 214, 215, 216, 221, 222, 235, 236, 251, 268, 294, 309, 320, 324, 331, 347, 348, 349, 353, 355, 356, 373, 377, 395, 396, 398, 402, 433, 435, 436, 450, 451, 496, 497, 583, 588, 605, 624, 631, 632, 636, 637, 638, 639, 642, 643, 661, 662, 663, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 686, 688, 691, 694, 700, 702, 703, 705, 706, 707, 708, 711, 717, 718, 719, 720, 722, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733], "bypass_reshap": [67, 68, 496, 497], "input_node_map": [67, 68, 496, 497], "input_nam": [67, 68, 102, 142, 236, 313, 314, 496, 497, 670], "get_const_dim_count": [67, 68, 496, 497], "dimens": [67, 68, 105, 150, 243, 268, 286, 309, 496, 497, 663, 666, 725, 730], "instancenorm": [68, 497, 728], "fusedecomposedinoptim": [68, 497], "gelu": [69, 498], "fusegeluoptim": [69, 498], "sqrt": [69, 498, 665], "erf": [69, 498], "layernorm": [70, 499, 728], "fuselayernormoptim": [70, 499], "remap": [70, 163, 499, 583], "smaller": [70, 268, 309, 499, 666, 680, 719, 730], "fusedbatcnormv3": [70, 499], "And": [70, 499, 637, 638, 659, 661, 680, 686, 728], "further": [70, 236, 499, 636, 681, 682, 683, 685, 694, 700, 722], "restrict": [70, 163, 235, 236, 499, 583, 719, 727], "2d": [70, 499, 728], "3d": [70, 499, 720, 728], "kera": [70, 116, 195, 207, 227, 236, 253, 260, 275, 296, 303, 381, 386, 473, 476, 499, 540, 574, 576, 643, 662, 668, 682, 690, 691], "fusepadwithconv2doptim": [71, 500], "excluded_op_nam": [71, 72, 232, 235, 236, 500, 501, 680, 719], "cfg": [71, 72, 170, 232, 366, 448, 500, 501, 588, 624, 643, 644], "itex_qdq_mod": [71, 72, 500, 501], "conv3d": [71, 125, 500, 549], "fusepadwithfp32conv2doptim": [72, 501], "fusetransposereshapeoptim": [73, 502], "cse": [74, 98, 503, 527], "graphcseoptim": [74, 503], "introduc": [74, 503, 642, 643, 644, 672, 680, 722, 725, 726, 728, 732], "ident": [74, 80, 208, 503, 509, 636, 666], "three": [74, 227, 251, 294, 355, 433, 435, 503, 638, 642, 643, 660, 676, 681, 694, 708, 718, 722, 724, 727, 728, 729], "d": [74, 170, 503, 588, 666, 674, 701, 703, 709, 719, 734], "those": [74, 163, 359, 441, 503, 583, 632, 665, 666, 667, 674, 680, 681, 718, 719, 722, 731], "child": [74, 157, 164, 503, 585, 590, 729], "b1": [74, 503], "c1c2": [74, 503], "d1": [74, 503, 632], "c1": [74, 503], "c2": [74, 503], "memori": [74, 150, 151, 170, 177, 315, 339, 344, 352, 388, 390, 503, 604, 632, 660, 662, 667, 680, 681, 683, 717, 719, 722, 723, 725, 728, 731, 734], "bound": [74, 183, 200, 268, 309, 320, 356, 373, 436, 503, 679, 730], "like": [74, 96, 98, 148, 150, 163, 187, 207, 227, 236, 239, 240, 241, 253, 282, 283, 284, 296, 315, 324, 349, 352, 353, 377, 386, 402, 432, 503, 525, 527, 569, 571, 574, 583, 621, 637, 638, 639, 642, 643, 665, 666, 667, 675, 688, 703, 705, 718, 719, 722, 725, 726, 728, 731], "relu": [74, 78, 109, 503, 507, 533, 638, 672, 728, 729], "relu6": [74, 503, 672], "updat": [74, 154, 164, 170, 202, 203, 209, 227, 349, 377, 432, 503, 585, 629, 671, 678, 679, 680, 686, 691, 694, 710, 719, 725, 728, 731, 732], "graphdef": [74, 148, 386, 431, 503, 569, 574, 682], "grappler": [75, 504, 672], "grappleroptim": [75, 504], "input_output_nam": [75, 504], "opt_cfg": [75, 504], "wrapper": [75, 102, 103, 104, 105, 122, 140, 150, 156, 166, 169, 193, 204, 250, 268, 270, 271, 273, 274, 293, 309, 320, 324, 373, 377, 382, 386, 454, 504, 546, 573, 574, 601, 603, 724], "leverag": [75, 151, 504, 627, 639, 641, 666, 670, 683, 700, 718, 722, 725, 731], "built": [75, 195, 218, 237, 238, 242, 247, 251, 252, 257, 259, 261, 262, 264, 265, 268, 273, 275, 280, 281, 285, 288, 290, 294, 295, 300, 302, 304, 305, 306, 307, 309, 353, 377, 380, 388, 432, 504, 592, 621, 639, 642, 663, 668, 680, 693, 697, 717, 722, 727, 730, 731, 733], "convert_add_to_biasadd": [76, 87, 111, 505, 516], "convert_layout": [76, 87, 111, 505, 516], "convert_leakyrelu": [76, 87, 111, 505, 516], "convert_nan_to_random": [76, 87, 111, 505, 516], "convert_placeholder_to_const": [76, 87, 111, 505, 516], "dilated_contract": [76, 87, 111, 505, 516], "dummy_biasadd": [76, 87, 111, 505, 516], "expanddims_optim": [76, 87, 111, 505, 516], "fetch_weight_from_reshap": [76, 87, 111, 505, 516], "fold_batch_norm": [76, 87, 111, 505, 516], "fold_const": [76, 87, 111, 505, 516], "fuse_biasadd_add": [76, 87, 111, 505, 516], "fuse_column_wise_mul": [76, 87, 111, 505, 516], "fuse_conv_with_math": [76, 87, 111, 505, 516], "fuse_decomposed_bn": [76, 87, 111, 505, 516], "fuse_decomposed_in": [76, 87, 111, 505, 516], "fuse_gelu": [76, 87, 111, 505, 516], "fuse_layer_norm": [76, 87, 111, 505, 516], "fuse_pad_with_conv": [76, 87, 111, 505, 516], "fuse_pad_with_fp32_conv": [76, 87, 111, 505, 516], "fuse_reshape_transpos": [76, 87, 111, 505, 516], "graph_cse_optim": [76, 87, 111, 505, 516], "grappler_pass": [76, 87, 111, 505, 516], "insert_print_nod": [76, 87, 111, 505, 516], "move_squeeze_after_relu": [76, 87, 111, 505, 516], "pre_optim": [76, 87, 111, 505, 516], "remove_training_nod": [76, 87, 111, 505, 516], "rename_batch_norm": [76, 87, 111, 505, 516], "split_shared_input": [76, 87, 111, 505, 516], "strip_equivalent_nod": [76, 87, 111, 148, 505, 516, 569], "strip_unused_nod": [76, 87, 111, 148, 505, 516, 569], "switch_optim": [76, 87, 111, 505, 516], "insert": [77, 105, 107, 109, 113, 146, 150, 176, 181, 506, 531, 533, 537, 567, 604, 638, 643, 662, 675, 680, 683, 719, 722, 724, 725, 728, 729], "print": [77, 157, 158, 207, 324, 377, 451, 506, 590, 632, 668, 679, 680, 702, 703, 719, 728, 731], "insertprintminmaxnod": [77, 506], "pre_node_nam": [77, 506], "post_node_nam": [77, 506], "pass": [77, 148, 150, 161, 163, 183, 191, 377, 402, 432, 506, 569, 576, 583, 584, 599, 605, 631, 632, 637, 638, 642, 659, 663, 666, 667, 668, 674, 679, 680, 701, 708, 719, 721, 722, 724, 728, 733], "move": [78, 150, 163, 176, 507, 583, 638, 706, 721, 725, 726], "squeez": [78, 507, 638], "movesqueezeafterreluoptim": [78, 507], "match": [78, 102, 163, 207, 320, 321, 373, 374, 507, 583, 666, 701, 725], "pre": [79, 116, 164, 207, 239, 240, 251, 282, 283, 294, 378, 432, 508, 540, 585, 612, 621, 661, 663, 666, 667, 680, 688, 705, 719, 720, 722, 725, 729, 731], "entranc": [79, 200, 242, 508], "preoptim": [79, 508], "removetrainingnodesoptim": [80, 509], "protected_nod": [80, 509], "types_to_splic": [80, 509], "checknumer": [80, 509], "stopgradi": [80, 509], "renam": [81, 510, 726], "fusedbatchnorm": [81, 510], "fusedbatchnormv2": [81, 510], "renamebatchnormoptim": [81, 510], "splitsharedinputoptim": [82, 511], "equival": [83, 169, 512, 603, 641, 720, 725, 728], "stripequivalentnodesoptim": [83, 512], "output_node_nam": [83, 84, 131, 132, 136, 148, 512, 513, 555, 556, 560, 569], "same": [83, 141, 148, 151, 177, 185, 203, 221, 236, 251, 268, 294, 309, 320, 373, 457, 512, 569, 589, 592, 605, 632, 642, 644, 659, 662, 663, 666, 668, 672, 680, 684, 688, 693, 697, 719, 721, 722, 725, 728, 729, 730, 731], "unus": [84, 148, 513, 569], "stripunusednodesoptim": [84, 513], "input_node_nam": [84, 131, 136, 148, 513, 555, 560, 569], "switch": [85, 514, 683, 729], "switchoptim": [85, 514], "condit": [85, 251, 252, 253, 268, 294, 295, 296, 309, 355, 433, 435, 514, 663, 677, 730, 731], "graphrewriterbas": [86, 515], "abstract": [86, 192, 200, 268, 309, 310, 315, 352, 515, 642, 644, 674], "freeze_fake_qu": [87, 95, 111, 516, 524], "freeze_valu": [87, 95, 111, 516, 524], "freeze_value_without_calib": [87, 95, 111, 516, 524], "fuse_conv_redundant_dequant": [87, 95, 111, 516, 524], "fuse_conv_requant": [87, 95, 111, 516, 524], "fuse_matmul_redundant_dequant": [87, 95, 111, 516, 524], "fuse_matmul_requant": [87, 95, 111, 516, 524], "meta_op_optim": [87, 95, 111, 516, 524], "post_hostconst_convert": [87, 95, 111, 516, 524], "post_quantized_op_cs": [87, 95, 111, 516, 524], "rnn_convert": [87, 95, 111, 516, 524], "scale_propag": [87, 95, 111, 516, 524], "onnx_graph": [87, 101, 111], "onnx_schema": [87, 101, 111], "tf2onnx_util": [87, 101, 111], "insert_qdq_pattern": [87, 106, 111, 516, 530], "merge_duplicated_qdq": [87, 106, 111, 516, 530], "share_qdq_y_pattern": [87, 106, 111, 516, 530], "freez": [88, 89, 90, 148, 517, 518, 519, 569, 683, 719], "fakequ": [88, 517], "freezefakequantopoptim": [88, 517], "follow": [88, 110, 185, 208, 253, 296, 317, 320, 370, 373, 517, 534, 636, 637, 638, 639, 642, 643, 644, 661, 662, 663, 666, 667, 668, 672, 676, 677, 679, 680, 681, 682, 683, 684, 685, 693, 697, 702, 704, 705, 708, 713, 718, 719, 721, 722, 725, 728, 729, 731], "freezevaluetransform": [89, 518], "max_min_data": [89, 90, 518, 519], "postfix": [89, 90, 518, 519], "tensor_data": [89, 518, 576, 632, 633], "th": [89, 90, 518, 519], "gpu": [89, 90, 97, 150, 163, 177, 235, 236, 518, 519, 526, 583, 605, 641, 659, 675, 680, 681, 685, 691, 700, 721, 722, 723], "freezevaluewithoutcalibtransform": [90, 519], "95": [90, 324, 377, 519, 679, 734], "quantizedconv": [91, 92, 520, 521], "quantizeddeconv": [91, 520], "redund": [91, 93, 520, 522], "fuseconvredundantdequantizetransform": [91, 520], "cpu": [91, 92, 93, 94, 150, 151, 157, 162, 163, 165, 170, 235, 236, 520, 521, 522, 523, 576, 583, 590, 605, 627, 632, 641, 643, 659, 660, 675, 680, 681, 683, 685, 691, 700, 708, 720, 721, 722, 723, 724, 725, 729], "_quantizedconv": [91, 520], "_quantizeddeconv": [91, 520], "successor": [91, 92, 93, 94, 520, 521, 522, 523], "requant": [92, 94, 521, 523, 729], "fuseconvrequantizetransform": [92, 521], "quantizedmatmul": [93, 94, 522, 523], "fusematmulredundantdequantizetransform": [93, 522], "_quantizedmatmul": [93, 94, 522, 523], "fusematmulrequantizedequantizetransform": [94, 523], "quantizedmatmulwithbiasanddequant": [94, 523], "fusematmulrequantizetransform": [94, 523], "fusematmulrequantizedequantizenewapitransform": [94, 523], "fusematmulrequantizenewapitransform": [94, 523], "newapi": [94, 523], "meta": [96, 525, 678, 720, 734], "metainfochangingmemopoptim": [96, 525], "metaop": [96, 525], "With": [96, 388, 525, 638, 642, 644, 662, 680, 688, 693, 697, 701, 707, 717, 719, 720, 727, 728, 731, 734], "better": [96, 235, 236, 239, 240, 282, 283, 331, 378, 432, 525, 621, 661, 667, 679, 681, 719, 720, 722, 725, 727, 728, 731], "perform": [96, 140, 150, 154, 183, 224, 235, 236, 251, 263, 264, 269, 294, 306, 315, 339, 344, 352, 359, 377, 388, 432, 437, 441, 454, 455, 525, 605, 637, 638, 639, 642, 643, 659, 663, 664, 665, 667, 669, 670, 675, 676, 679, 680, 681, 682, 683, 685, 689, 691, 694, 700, 706, 717, 718, 719, 720, 721, 722, 723, 724, 725, 728, 729, 731, 733, 734], "hostconst": [97, 526], "posthostconstconvert": [97, 526], "just": [97, 241, 266, 268, 271, 273, 274, 276, 284, 309, 388, 526, 571, 639, 680, 690, 694, 700, 708, 718, 722, 728, 730, 731], "postcseoptim": [98, 527], "duplic": [98, 108, 356, 436, 527, 532], "quantizev2": [98, 527], "decreas": [98, 527, 705, 719], "size": [98, 150, 177, 185, 211, 212, 243, 244, 250, 253, 259, 264, 268, 286, 287, 293, 296, 302, 306, 309, 347, 386, 388, 395, 396, 398, 527, 574, 604, 632, 636, 643, 662, 663, 668, 671, 680, 700, 701, 717, 719, 722, 723, 725, 728, 730, 733, 734], "rnn": [99, 528], "quantizedrnnconvert": [99, 528], "calibration_data": [99, 107, 528, 531], "rnn_detail": [99, 528], "scalepropagationtransform": [100, 529], "direct": [100, 213, 347, 529, 719], "export": [101, 236, 316, 320, 369, 373, 641, 673, 686, 701, 703, 729, 732], "onnxgraph": 102, "output_shap": 102, "extra_opset": 102, "output_nam": [102, 142, 236, 313, 314, 670], "is_subgraph": 102, "graph_nam": 102, "manipul": [102, 103], "onnxnod": 103, "skip_convers": 103, "schema": [104, 177, 604], "onnxopschema": 104, "domain": [104, 105, 235, 236, 719, 731], "since_vers": 104, "get_schema": 104, "max_inclusive_opset_vers": 104, "within": [104, 184, 215, 216, 221, 222, 230, 315, 320, 352, 373, 386, 426, 431, 574, 636, 638, 644, 660, 681, 693, 697, 700, 708, 719, 720, 728, 731], "get_max_supported_opset_vers": 104, "packag": [104, 642, 671, 676, 700, 701, 720, 726, 731], "set_nam": 105, "find_opset": 105, "assert_error": 105, "bool_val": 105, "error_msg": 105, "messag": [105, 146, 567, 637, 708, 709, 713, 714, 715, 731], "map_numpy_to_onnx_dtyp": 105, "np_dtype": 105, "map_onnx_to_numpy_typ": 105, "onnx_typ": 105, "add_port_to_nam": 105, "nr": 105, "get_tensorflow_node_attr": 105, "pars": [105, 148, 170, 251, 252, 264, 268, 294, 295, 306, 309, 415, 416, 420, 569, 588, 643, 644, 730], "get_tensorflow_tensor_shap": 105, "get_tensorflow_node_shape_attr": 105, "attr": [105, 148, 207, 569], "map_tensorflow_dtyp": 105, "get_tensorflow_tensor_data": 105, "convert_tensorflow_tensor_to_onnx": 105, "read_tensorflow_node_attr": 105, "read": [105, 148, 163, 256, 268, 299, 309, 348, 569, 583, 663, 724, 727], "infer_onnx_shape_dtyp": 105, "opset_vers": [105, 142, 236, 313, 314, 670], "input_shap": [105, 255, 298, 571, 663], "input_dtyp": 105, "sometim": [105, 638, 665, 722], "make_onnx_shap": 105, "seqtyp": 105, "tensor_dtyp": 105, "around": 105, "signifi": 105, "make_onnx_inputs_output": 105, "elem_typ": 105, "text": [105, 150, 154, 223, 267, 268, 308, 309, 317, 322, 350, 370, 375, 670, 677, 689, 711, 714, 715, 719, 720, 725, 728, 730, 734], "datatyp": [105, 170, 724, 731, 734], "save_protobuf": 105, "path": [105, 140, 148, 151, 164, 170, 207, 223, 227, 232, 251, 252, 253, 268, 294, 295, 296, 309, 310, 313, 314, 315, 326, 327, 328, 330, 339, 344, 348, 350, 352, 353, 366, 378, 386, 390, 393, 395, 396, 398, 401, 402, 409, 431, 432, 448, 454, 569, 574, 576, 585, 627, 629, 632, 638, 639, 642, 663, 665, 668, 674, 679, 680, 681, 682, 686, 689, 700, 703, 705, 708, 713, 714, 715, 718, 725, 730, 733], "as_text": 105, "save": [105, 148, 162, 163, 204, 227, 235, 236, 253, 296, 313, 314, 353, 386, 390, 432, 569, 574, 576, 583, 621, 622, 627, 632, 638, 642, 674, 680, 681, 682, 684, 688, 693, 697, 703, 708, 713, 714, 715, 718, 722, 723, 725, 728], "protobuf": [105, 386, 574, 703], "is_onnx_domain": 105, "is_list_or_tupl": 105, "are_shapes_equ": 105, "src": [105, 701], "dest": 105, "equal": [105, 143, 148, 182, 451, 564, 576, 632, 719, 725], "get_subgraphs_from_onnx": 105, "model_proto": 105, "over": [105, 163, 253, 296, 324, 377, 583, 643, 669, 673, 675, 679, 691, 700, 706, 710, 719, 721, 728, 731], "df": 105, "initialize_name_count": 105, "avoid": [105, 163, 170, 177, 251, 294, 583, 589, 604, 638, 661, 729], "conflict": [105, 661, 671], "counter": 105, "make_nam": 105, "get_index_from_strided_slice_of_shap": 105, "outputs_to_valu": 105, "stride": [105, 268, 309, 730], "slice": 105, "compute_const_folding_using_tf": 105, "g": [105, 150, 154, 163, 209, 235, 236, 583, 605, 637, 666, 669, 673, 683, 688, 719, 725, 726, 728, 731], "const_node_valu": 105, "graph_output": 105, "constant": [105, 314, 316, 356, 358, 364, 369, 436, 440, 446, 625, 661, 662, 672, 703, 730], "tf": [105, 116, 141, 148, 207, 227, 250, 251, 252, 253, 268, 293, 294, 295, 296, 309, 384, 386, 457, 474, 476, 540, 569, 573, 574, 575, 576, 661, 668, 676, 682, 720, 724, 730], "generategraphwithqdqpattern": [107, 531], "op_wise_config": [107, 131, 136, 531, 555, 560, 643], "quantized_nod": [107, 531], "llm_weight_minmax": [107, 531], "dq": [107, 109, 131, 531, 533, 555, 728], "pair": [107, 235, 236, 531, 643, 662, 680, 681, 726], "befor": [107, 109, 151, 157, 181, 199, 209, 214, 216, 221, 223, 225, 235, 236, 251, 294, 347, 349, 351, 531, 533, 590, 637, 644, 662, 663, 666, 667, 668, 671, 672, 676, 680, 695, 698, 704, 705, 722, 725, 727, 729, 731], "merg": [108, 243, 286, 366, 448, 532, 695, 698, 729, 731], "mergeduplicatedqdqoptim": [108, 532], "y": [109, 235, 236, 268, 309, 356, 436, 533, 661, 665, 671, 686, 728, 730], "shareqdqforitexypatternoptim": [109, 533], "break": [109, 533, 668, 680], "graphanalyz": [110, 534], "extend_engin": [110, 534], "analyz": [110, 207, 386, 534, 574, 727, 728, 729], "under": [110, 151, 235, 236, 253, 296, 409, 534, 576, 605, 620, 627, 631, 637, 639, 641, 663, 677, 679, 680, 683, 688, 689, 700, 708, 718, 719, 720, 723, 725, 729, 731], "singleton": [110, 534, 576, 632], "specifi": [110, 150, 163, 170, 183, 187, 227, 235, 236, 239, 240, 268, 269, 282, 283, 309, 315, 320, 324, 326, 327, 330, 339, 344, 352, 353, 373, 377, 378, 432, 451, 534, 583, 587, 588, 592, 621, 631, 632, 643, 644, 668, 672, 679, 680, 688, 702, 708, 712, 713, 714, 715, 717, 719, 721, 725, 730, 731, 733], "graphrewriterhelp": [110, 534], "encapsul": [110, 239, 240, 282, 283, 378, 432, 534, 621, 682], "quantize_lay": [111, 112, 114, 535, 536, 538], "fake_quant": [111, 112, 114, 535, 536, 538], "quantize_config": [111, 112, 114, 535, 536, 538, 643], "quantize_help": [111, 112, 114, 535, 536, 538], "quantize_wrapp": [111, 112, 114, 535, 536, 538], "fuse_qdq_bn": [111, 112, 130, 535, 536, 554], "fuse_qdq_concatv2": [111, 112, 130, 535, 536, 554], "fuse_qdq_conv": [111, 112, 130, 535, 536, 554], "fuse_qdq_deconv": [111, 112, 130, 535, 536, 554], "fuse_qdq_in": [111, 112, 130, 535, 536, 554], "fuse_qdq_matmul": [111, 112, 130, 535, 536, 554], "fuse_qdq_pool": [111, 112, 130, 535, 536, 554], "optimize_qdq": [111, 112, 130, 535, 536, 554], "optimize_lay": [112, 114, 117, 536, 538, 541], "quantize_layer_add": [112, 114, 117, 536, 538, 541], "quantize_layer_bas": [112, 114, 117, 536, 538, 541], "quantize_layer_bn": [112, 114, 117, 536, 538, 541], "fakequantizebas": [113, 537], "abc": [113, 322, 375, 537, 616, 642, 729, 731], "fakequant": [113, 537], "per_channel": [113, 537, 643, 644, 672, 722, 733], "8": [113, 150, 163, 177, 235, 236, 267, 308, 402, 537, 583, 604, 612, 638, 643, 660, 661, 672, 676, 707, 708, 719, 720, 725, 728, 731, 734], "channel_axi": [113, 179, 182, 537], "symmetr": [113, 150, 151, 395, 396, 398, 537, 627, 644, 722, 725, 730, 731], "narrow_rang": [113, 537], "quantizeconfig": [115, 116, 539, 540], "custom": [115, 150, 161, 170, 177, 183, 236, 353, 377, 388, 539, 584, 589, 604, 631, 659, 666, 667, 683, 706, 707, 708, 712, 714, 715, 719, 720, 725, 727], "There": [115, 353, 355, 433, 435, 539, 661, 665, 666, 672, 675, 680, 683, 705, 707, 708, 725, 728, 731, 733], "instanc": [115, 116, 183, 203, 235, 236, 239, 240, 269, 282, 283, 321, 322, 324, 327, 330, 333, 334, 336, 337, 338, 356, 368, 374, 375, 377, 378, 432, 436, 450, 539, 540, 605, 621, 629, 632, 636, 637, 638, 642, 659, 680, 685, 691, 725, 731, 733, 734], "global": [115, 209, 235, 236, 333, 334, 336, 337, 338, 347, 450, 539, 632, 638, 680, 719, 721, 731], "class": [116, 153, 161, 170, 176, 204, 210, 217, 331, 378, 432, 476, 540, 584, 614, 638, 639, 643, 661, 662, 663, 666, 679, 680, 691, 717, 718, 722, 726, 729, 731, 733], "init_quantize_config": [116, 540], "quantize_recip": [116, 540], "begin": [116, 154, 215, 216, 221, 349, 540, 661, 662, 666, 667, 680, 719, 731], "process": [116, 140, 150, 158, 177, 183, 190, 209, 214, 215, 216, 223, 225, 227, 235, 236, 239, 240, 251, 252, 253, 264, 268, 269, 282, 283, 294, 295, 296, 306, 309, 347, 349, 351, 355, 356, 378, 432, 433, 435, 436, 454, 540, 587, 605, 621, 631, 632, 639, 642, 643, 644, 660, 662, 663, 666, 667, 668, 670, 680, 684, 705, 707, 708, 710, 718, 719, 722, 723, 725, 728, 729, 730, 733], "model_nam": [116, 235, 236, 540], "special": [116, 163, 207, 388, 540, 583, 638, 662, 679, 680, 717, 719, 725, 732], "decid": [116, 185, 235, 236, 318, 349, 371, 540, 642, 643, 680, 722, 726, 731], "qat_clone_funct": [116, 540], "leav": [116, 540, 694], "quantizewrapp": [116, 122, 540, 546], "wrapped_lay": [116, 203, 540], "config_quantizable_lay": [118, 542], "quantizelayeradd": [119, 543], "quantizelay": [120, 544], "quantizelayerbas": [120, 544], "quantizelayerbatchnorm": [121, 545], "quantizewrapperbas": [122, 546], "fusedbatchnormv3": [123, 133, 547, 557], "fusenodestartwithfusedbatchnormv3": [123, 133, 547, 557], "_quantizedfusedbatchnorm": [123, 547], "concatv2": [124, 134, 147, 548, 558, 568, 672], "fusenodestartwithconcatv2": [124, 134, 548, 558], "quantizedconcatv2": [124, 134, 548, 558], "fusenodestartwithconv2d": [125, 135, 549, 559], "conv2dbackpropinput": [126, 550], "conv3dbackpropinputv2": [126, 550], "fusenodestartwithdeconv2d": [126, 550], "fusedinstancenorm": [127, 551], "fusenodestartwithfusedinstancenorm": [127, 551], "batchmatmul": [128, 552], "batchmatmulv2": [128, 552], "fusenodestartwithmatmul": [128, 137, 552, 561], "avgpool": [129, 138, 553, 562, 672], "fusenodestartwithpool": [129, 138, 553, 562], "optimizeqdqgraph": [131, 555], "input_graph": [131, 136, 143, 427, 431, 555, 560, 564, 642], "op_wise_sequ": [131, 136, 555, 560], "quantizegraph": [132, 556], "quantizegraphbas": [132, 556], "quantizenodebas": [132, 556], "quantizegraphforintel": [136, 560], "common": [139, 161, 163, 199, 236, 266, 316, 326, 330, 331, 332, 369, 402, 404, 470, 472, 473, 474, 476, 563, 583, 584, 611, 612, 615, 624, 636, 661, 663, 667, 668, 670, 674, 676, 680, 722, 728], "herlper": [139, 563], "quantizegraphhelp": [139, 563], "sever": [139, 225, 268, 309, 351, 353, 563, 639, 665, 666, 667, 675, 680, 681, 693, 697, 708, 719, 721, 723, 728, 730, 731, 733], "staticmethod": [139, 563], "function": [139, 140, 161, 175, 190, 215, 216, 221, 235, 236, 239, 240, 252, 282, 283, 295, 327, 330, 339, 344, 393, 454, 563, 584, 637, 638, 639, 642, 643, 644, 659, 662, 666, 667, 670, 674, 675, 676, 678, 679, 680, 681, 691, 701, 707, 708, 719, 722, 725, 726, 727, 728, 729, 731, 732], "smoothquantcalibr": [140, 454], "dataset": [140, 141, 150, 170, 177, 223, 239, 240, 241, 243, 244, 248, 249, 250, 262, 271, 282, 283, 284, 286, 287, 291, 292, 293, 305, 316, 320, 321, 322, 324, 353, 369, 373, 374, 375, 377, 378, 432, 454, 457, 571, 604, 621, 624, 639, 641, 642, 643, 662, 668, 673, 679, 680, 688, 702, 703, 713, 719, 722, 725, 726, 728, 731, 733, 734], "outlier": [140, 454, 643, 660, 665, 705, 725, 728], "smoothquantcalibrationllm": [140, 454], "model_path": [140, 148, 177, 454, 569, 590, 612, 665, 713], "temp_path": [140, 454], "weight_name_map": [140, 454], "llm": [140, 141, 150, 157, 222, 454, 457, 590, 641, 719, 720, 723, 725, 728], "eval_func": [140, 239, 240, 282, 283, 353, 356, 357, 359, 360, 361, 362, 378, 432, 433, 436, 437, 438, 439, 441, 442, 443, 444, 451, 454, 621, 638, 662, 663, 665, 666, 667, 668, 680, 703, 722, 723, 724, 725, 731, 733], "temporari": [140, 170, 454, 632, 636], "store": [140, 200, 202, 204, 207, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 226, 235, 236, 253, 296, 342, 349, 454, 674], "median": [140, 454], "autotrack": [140, 148, 454, 569], "smoothquantscal": [141, 457], "alpha": [141, 162, 166, 181, 202, 224, 404, 457, 474, 601, 661, 722, 731], "scales_per_op": [141, 404, 457, 474], "individu": [141, 209, 347, 426, 431, 457, 636, 708, 719, 728], "smoothquantscalerllm": [141, 457], "tensorflowqdqtoonnxqdqconvert": 142, "shape_overrid": 142, "inputs_as_nchw": [142, 313], "default_opset_vers": 142, "bia": [143, 235, 236, 564, 725, 729], "correct": [143, 182, 227, 235, 236, 320, 321, 322, 324, 348, 373, 374, 375, 377, 564, 636, 683], "biascorrect": [143, 564], "fp32_graph": [143, 564], "weight_empir": [143, 564], "Will": [143, 564, 666, 675], "our": [143, 170, 235, 236, 403, 564, 639, 641, 670, 680, 701, 702, 705, 727, 732], "task": [143, 251, 258, 294, 301, 324, 377, 564, 663, 666, 667, 670, 675, 679, 680, 703, 707, 710, 719, 723, 725, 728, 734], "close": [143, 182, 564, 660, 709], "w_int8": [143, 182, 564], "u": [143, 182, 564, 683, 702, 707], "w_fp32": [143, 182, 564], "varianc": [143, 182, 203, 564, 665], "differ": [143, 154, 178, 182, 184, 187, 193, 199, 218, 235, 236, 244, 253, 268, 270, 287, 296, 309, 315, 324, 330, 332, 341, 352, 377, 388, 564, 626, 636, 638, 639, 643, 662, 663, 665, 666, 668, 669, 674, 675, 679, 680, 682, 693, 697, 702, 705, 708, 717, 719, 722, 725, 728, 729, 730, 731], "wise": [143, 160, 162, 164, 177, 182, 235, 236, 356, 359, 396, 398, 436, 437, 441, 564, 582, 585, 602, 641, 643, 675, 705, 719, 725, 728, 729, 731, 732, 733], "minim": [143, 154, 182, 356, 436, 564, 643, 644, 660, 666, 669, 679, 680, 693, 697, 719, 722, 731], "scale_c": [143, 182, 564], "shift": [143, 182, 264, 306, 564, 701, 730], "notic": [143, 182, 269, 564, 677, 681, 703, 726], "first": [143, 150, 163, 170, 182, 184, 208, 233, 235, 236, 251, 294, 320, 366, 373, 437, 448, 564, 576, 583, 604, 632, 638, 639, 642, 643, 644, 663, 665, 676, 681, 685, 694, 695, 698, 701, 703, 704, 705, 721, 722, 724, 725, 727, 728, 729, 731, 733], "empir": [143, 182, 564], "solut": [143, 182, 564, 641, 642, 643, 671, 685, 689, 694, 720, 725, 726, 728, 731, 732], "don": [143, 182, 209, 235, 236, 564, 638, 706, 719, 731], "min": [143, 150, 177, 182, 200, 236, 404, 564, 576, 604, 632, 665, 703, 705, 719, 722, 725, 728, 730, 731], "graphtransform": [144, 565], "graphtransformbas": [144, 565], "input_pb": [144, 146, 147, 565, 567, 568], "log": [146, 183, 190, 207, 415, 416, 420, 567, 628, 638, 691, 713, 714, 715, 727, 729, 731], "insertlog": [146, 567], "node_name_list": [146, 567], "show_nam": [146, 567], "show_op": [146, 567], "first_n": [146, 567], "summar": [146, 567, 661, 666], "1024": [146, 253, 296, 567, 686], "dump_fp32": [146, 567], "rerang": [147, 568], "rerangequantizedconcat": [147, 568], "rerange_quant": [147, 568], "version1_lt_version2": [148, 576, 632], "version1": [148, 576, 632], "version2": [148, 576, 632], "version1_gt_version2": [148, 576, 632], "greater": [148, 576, 632, 713, 719, 731], "version1_eq_version2": [148, 576, 632], "version1_gte_version2": [148, 576, 632], "version1_lte_version2": [148, 576, 632], "disable_random": [148, 569, 576], "seed": [148, 150, 177, 191, 199, 235, 236, 332, 569, 576, 632, 680, 733], "disabl": [148, 235, 236, 569, 576, 636, 700, 705, 724, 725, 728], "read_graph": [148, 569], "in_graph": [148, 569], "in_graph_is_binari": [148, 569], "write_graph": [148, 569], "out_graph_def": [148, 569], "out_graph_fil": [148, 569], "write": [148, 260, 303, 569, 632, 668, 674, 680, 683, 729], "is_ckpt_format": [148, 569], "ckpt": [148, 378, 386, 432, 569, 574, 734], "folder": [148, 253, 258, 296, 301, 378, 432, 569, 631, 663, 688, 693, 697, 706, 713, 714, 715, 725, 729], "is_saved_model_format": [148, 569], "saved_model": [148, 326, 569, 723], "get_estimator_graph": 148, "estim": [148, 150, 324, 377, 386, 574, 731], "input_fn": [148, 386, 574], "get_tensor_by_nam": [148, 569], "try_cnt": [148, 569], "import": [148, 154, 183, 185, 200, 235, 236, 326, 378, 388, 432, 451, 569, 576, 621, 632, 638, 639, 641, 644, 659, 662, 663, 665, 666, 667, 668, 670, 673, 679, 680, 681, 682, 683, 687, 689, 702, 703, 711, 717, 718, 719, 721, 722, 723, 724, 726, 727, 728, 729, 730, 731, 732], "scope": [148, 569, 637, 643, 680], "onc": [148, 163, 195, 225, 275, 351, 355, 433, 435, 569, 583, 643, 644, 662, 700, 706, 719, 720, 731, 734], "both": [148, 151, 185, 236, 569, 636, 639, 642, 667, 680, 684, 703, 705, 707, 719, 721, 722, 725, 728, 731], "compat": [148, 386, 569, 574, 637, 668, 682, 695, 698, 700, 719, 726], "v1": [148, 263, 264, 306, 321, 322, 324, 374, 375, 377, 386, 569, 574, 668, 670, 671, 679, 682, 704, 719, 726, 727, 728, 734], "suffix": [148, 569], "time": [148, 163, 185, 191, 203, 235, 236, 268, 309, 324, 356, 377, 388, 436, 569, 576, 583, 599, 632, 643, 662, 665, 668, 671, 680, 688, 690, 693, 697, 700, 701, 706, 709, 713, 714, 717, 719, 720, 722, 725, 727, 728, 729, 730, 731], "got": [148, 569, 643, 671, 729], "iterator_sess_run": [148, 569], "sess": [148, 386, 569, 574], "iter_op": [148, 569], "feed_dict": [148, 250, 293, 569], "output_tensor": [148, 386, 569, 574], "measur": [148, 269, 378, 569, 626, 639, 642, 659, 665, 666, 679, 680, 725, 729, 731, 734], "integr": [148, 193, 270, 569, 642, 680, 701, 702, 707, 725], "makeiter": [148, 569], "feed": [148, 250, 293, 569, 666, 719], "end": [148, 154, 214, 215, 216, 221, 235, 236, 251, 267, 268, 294, 308, 309, 349, 355, 433, 435, 569, 642, 643, 644, 666, 667, 672, 676, 680, 694, 710, 717, 719, 729, 730, 731], "predict": [148, 268, 273, 309, 317, 321, 322, 324, 370, 374, 375, 377, 432, 569, 639, 666, 679, 691, 725, 728, 729, 730], "pred": [148, 324, 377, 569, 679], "collate_tf_pr": [148, 569], "collat": [148, 170, 569], "get_input_output_node_nam": [148, 569], "fix_ref_type_of_graph_def": [148, 569], "fix": [148, 219, 221, 251, 294, 349, 569, 662, 663, 687, 719, 722, 725, 731], "strip_unused_lib": [148, 569], "offici": [148, 317, 321, 322, 370, 374, 375, 569, 636, 728], "r1": [148, 569], "15": [148, 569, 672, 676, 714], "branch": [148, 569, 637], "get_graph_def": [148, 569], "auto_input_output": [148, 569], "get_model_input_shap": [148, 569], "get_tensor_val_from_graph_nod": [148, 569], "graph_node_name_map": [148, 569], "kei": [148, 150, 158, 163, 164, 176, 207, 218, 227, 233, 235, 236, 331, 348, 386, 451, 569, 574, 576, 583, 585, 604, 622, 624, 632, 641, 643, 702, 703, 709, 720, 725, 729, 731], "val": [148, 227, 253, 256, 296, 299, 348, 569, 665, 680, 705], "tensor_v": [148, 569], "int8_node_name_revers": [148, 569], "revers": [148, 569, 703], "tf_diagnosis_help": [148, 569], "fp32_model": [148, 158, 170, 314, 569, 632, 642, 723, 725], "quan_model": [148, 569], "save_path": [148, 313, 314, 569, 642, 682], "diagnosi": [148, 235, 236, 569, 680, 703, 704, 705, 720, 726, 732], "generate_feed_dict": [148, 569], "input_tensor": [148, 203, 386, 569, 574], "get_weight_from_input_tensor": [148, 569], "input_tensor_nam": [148, 386, 569, 574], "associ": [148, 163, 320, 373, 569, 583], "search": [148, 157, 177, 199, 200, 207, 221, 232, 236, 239, 240, 282, 283, 315, 317, 327, 330, 331, 332, 352, 356, 370, 395, 436, 569, 590, 602, 604, 632, 641, 661, 675, 679, 683, 684, 694, 719, 720, 725, 728, 729, 731, 732], "look": [148, 218, 569, 642, 644, 672, 679, 702, 703, 705, 728, 733], "sq_weight_tensor": [148, 569], "sq_weights_nod": [148, 569], "two": [148, 158, 163, 183, 208, 213, 220, 225, 253, 258, 269, 296, 301, 320, 347, 351, 353, 360, 373, 442, 569, 583, 632, 637, 638, 639, 661, 662, 663, 666, 668, 670, 672, 680, 681, 707, 708, 710, 719, 722, 724, 725, 727, 728, 731, 733], "apply_inlin": [148, 569], "func": [148, 170, 569, 604, 632, 722, 733], "inlin": [148, 569, 683, 688, 691], "definit": [148, 153, 166, 244, 249, 287, 292, 569, 601, 614], "concret": [148, 569, 731], "new_graph_def": [148, 569], "construct_function_from_graph_def": [148, 569], "frozen_func": [148, 569], "rebuild": [148, 569, 684, 693, 697], "reconstruct": [148, 569, 720], "new_func": [148, 569], "parse_saved_model": [148, 569], "output_tensor_nam": [148, 386, 569, 574], "_saved_model": [148, 569], "load": [148, 161, 163, 164, 251, 267, 268, 294, 308, 309, 378, 386, 432, 569, 574, 576, 581, 582, 584, 585, 631, 632, 643, 662, 693, 697, 701, 703, 721, 722, 723, 728], "reconstruct_saved_model": [148, 569], "trackabl": [148, 569], "destin": [148, 312, 326, 569], "quant_weight_asym": 150, "v": [150, 154, 691, 700, 719, 731, 733], "min_scal": 150, "max_scal": 150, "asymmetr": [150, 644, 722, 725, 731], "e": [150, 163, 209, 235, 236, 583, 605, 636, 637, 666, 669, 673, 683, 688, 689, 693, 697, 719, 725, 728, 731], "perturb": 150, "minimum": [150, 209, 235, 236, 644, 660, 665, 680, 691, 719, 728, 731], "quant_weight_sym": 150, "quant_weight_actor": 150, "quant_weight": [150, 177], "hand": [150, 639], "issu": [150, 636, 637, 640, 641, 676, 703, 705, 722, 729], "quant_weight_w_scal": [150, 177, 604], "round_st": 150, "torch": [150, 151, 153, 154, 156, 157, 158, 159, 160, 163, 164, 166, 167, 168, 170, 176, 177, 181, 204, 207, 208, 210, 218, 232, 235, 236, 314, 378, 432, 627, 631, 638, 641, 644, 645, 666, 668, 670, 680, 681, 682, 683, 688, 691, 703, 722, 725, 728, 729], "straight": 150, "through": [150, 158, 239, 240, 282, 283, 377, 378, 432, 641, 659, 672, 674, 675, 679, 686, 707, 717, 718, 719, 721, 722, 725], "omniqu": 150, "saveinput": 150, "seqlen": [150, 177], "256": [150, 258, 264, 301, 306, 612, 663, 668, 680, 730], "block_nam": 150, "cach": [150, 251, 294, 605, 671, 722, 725], "get_modul": [150, 164, 176, 585, 604], "nn": [150, 153, 157, 164, 166, 170, 176, 177, 207, 208, 218, 230, 235, 236, 314, 378, 432, 585, 588, 589, 590, 601, 604, 605, 610, 611, 614, 615, 620, 627, 631, 638, 666, 680, 682, 725, 728, 729], "set_modul": [150, 170, 176, 604, 620], "new_modul": [150, 164, 170, 176, 585, 604, 620], "get_scale_shap": 150, "wrapper_block": 150, "enable_minmax_tun": [150, 177], "conv1d": [150, 157, 230, 590, 644], "indic": [150, 163, 184, 185, 192, 203, 235, 236, 244, 249, 251, 287, 292, 294, 310, 320, 331, 373, 395, 396, 398, 583, 616, 638, 662, 671, 703, 708, 729], "unwrapper_block": 150, "unwrap": 150, "wrapperlinear": 150, "wrappertransformerconv1d": 150, "sampling_input": 150, "input_id": [150, 251, 268, 294, 309, 680], "input_oth": 150, "length": [150, 177, 218, 235, 236, 251, 268, 294, 309, 320, 373, 641, 663, 679, 720, 722, 725, 730], "id": [150, 183, 267, 269, 308, 317, 319, 320, 321, 322, 370, 372, 373, 374, 375, 679, 708, 709, 713, 714, 715, 727, 731], "current_input_id": 150, "current_input_oth": 150, "move_input_to_devic": 150, "check_is_cpu": 150, "otherwis": [150, 163, 253, 268, 296, 309, 583, 632, 636, 643, 663, 695, 698, 721, 725, 730], "block_forward": 150, "amp_dtyp": 150, "automat": [150, 177, 205, 207, 208, 235, 236, 253, 256, 263, 264, 296, 299, 306, 315, 325, 352, 638, 641, 659, 663, 675, 680, 681, 683, 685, 688, 689, 691, 693, 694, 695, 697, 698, 700, 707, 710, 718, 719, 722, 728, 730, 731], "mix": [150, 156, 165, 177, 235, 236, 354, 366, 378, 434, 448, 605, 641, 642, 649, 675, 683, 689, 690, 691, 732], "precis": [150, 156, 165, 177, 235, 236, 239, 240, 282, 283, 315, 322, 324, 325, 352, 354, 366, 375, 377, 378, 388, 434, 437, 448, 460, 605, 632, 641, 642, 643, 649, 659, 660, 667, 668, 672, 675, 683, 689, 690, 691, 720, 721, 722, 725, 728, 731, 732], "collect_round_v": 150, "collect_minmax_scal": 150, "get_batch_dim": 150, "posit": [150, 185, 203, 268, 309, 615, 636, 679, 683, 708, 713, 714, 715], "dim": [150, 176, 268, 309, 728, 730], "wrappermultiblock": 150, "module_list": 150, "act": [150, 227, 249, 292, 636], "singl": [150, 185, 202, 225, 235, 236, 244, 251, 268, 287, 294, 309, 320, 349, 351, 373, 377, 402, 432, 476, 638, 663, 665, 676, 706, 719, 723, 728], "get_block_nam": 150, "network": [150, 158, 202, 209, 210, 349, 439, 605, 639, 660, 666, 667, 670, 680, 702, 720, 722, 728, 731], "get_tokenizer_funct": 150, "token": [150, 177, 251, 262, 265, 268, 294, 305, 307, 309, 316, 317, 318, 369, 370, 371, 627, 663, 679, 680, 702, 703, 725, 727, 728, 730, 731], "truncat": [150, 251, 268, 294, 309, 663, 730], "field": [150, 185, 235, 236, 253, 296, 320, 373, 638, 642, 644, 668, 680, 727, 731, 733], "get_dataload": 150, "data_nam": 150, "neelnanda": [150, 177], "pile": [150, 177], "10k": [150, 177, 669, 673], "42": [150, 177, 199, 236, 332, 734], "test": [150, 183, 235, 236, 268, 309, 637, 641, 665, 676, 708, 713, 734], "shuffl": [150, 241, 243, 248, 250, 271, 284, 286, 291, 293, 571, 662, 680, 722], "enable_full_rang": [150, 151, 155, 177, 604, 627, 723, 725], "cuda": [150, 163, 177, 227, 583, 605, 616, 681, 683, 685, 719, 722], "lr_schedul": [150, 177, 680, 719], "dataset_nam": [150, 177, 704], "dataset_split": [150, 177], "use_quant_input": [150, 177], "lr": [150, 154, 177, 235, 236, 666, 668, 680], "005": [150, 177, 725], "minmax_lr": [150, 177], "low_gpu_mem_usag": [150, 177], "200": [150, 177, 267, 308, 638, 709, 731], "512": [150, 177], "sampler": [150, 177, 185, 241, 243, 245, 248, 250, 271, 284, 286, 288, 291, 293, 305, 316, 365, 447, 571, 662, 668], "rand": [150, 177, 683, 728], "n_block": [150, 177, 589, 725], "gradient_accumulate_step": [150, 177], "not_use_ms": 150, "dynamic_max_gap": [150, 177], "data_typ": [150, 155, 177, 368, 450, 589], "signround": 150, "advanc": [150, 158, 235, 236, 636, 641, 643, 649, 678, 719, 722, 725, 733], "cheng": 150, "wenhua": 150, "et": [150, 154, 158, 660, 725, 728], "al": [150, 154, 158, 660, 725, 728], "via": [150, 315, 339, 344, 352, 636, 641, 668, 675, 680, 683, 700, 719, 720], "sign": [150, 203, 368, 450, 637, 641, 644, 660, 702, 720, 722, 725, 727], "gradient": [150, 154, 177, 202, 333, 641, 675, 680, 719, 720, 734], "descent": [150, 154, 207, 641, 720], "arxiv": [150, 157, 202, 203, 221, 222, 229, 349, 590, 612, 641, 660, 719, 720, 725, 728], "preprint": [150, 660, 719, 725, 728], "2309": 150, "05516": 150, "2023": [150, 641, 715, 719, 725, 728, 734], "pytorch": [150, 177, 193, 195, 196, 204, 207, 210, 213, 214, 217, 222, 223, 230, 235, 236, 250, 251, 253, 256, 260, 268, 270, 275, 277, 293, 294, 296, 299, 303, 309, 314, 315, 324, 325, 345, 347, 350, 352, 360, 369, 377, 378, 387, 432, 442, 625, 632, 637, 638, 639, 641, 642, 643, 644, 660, 661, 662, 666, 667, 669, 672, 675, 676, 678, 680, 681, 682, 683, 685, 688, 689, 690, 691, 700, 702, 711, 714, 715, 719, 720, 721, 725, 726, 728, 731, 733], "empti": [150, 164, 177, 185, 235, 236, 585, 592, 686, 723], "layer1": [150, 177, 207, 235, 236, 680, 719, 722], "layer_nam": [150, 176, 177, 231, 236, 719], "rang": [150, 151, 177, 254, 255, 268, 297, 298, 309, 395, 409, 451, 571, 589, 602, 604, 621, 627, 641, 642, 644, 660, 663, 665, 666, 667, 668, 680, 703, 705, 718, 719, 722, 725, 728, 730], "learn": [150, 154, 177, 641, 642, 643, 662, 663, 670, 674, 675, 676, 680, 681, 683, 685, 688, 689, 691, 694, 695, 698, 700, 719, 720, 722, 728, 729, 731, 732], "rate": [150, 154, 177, 680, 719, 722], "schedul": [150, 177, 201, 204, 214, 215, 216, 221, 222, 224, 235, 236, 316, 345, 349, 369, 680, 707, 708, 710, 718], "futur": [150, 177, 181, 239, 240, 271, 282, 283, 675, 678, 680, 691, 713, 714, 715, 732], "accumul": [150, 177, 365, 447, 731], "step": [150, 154, 177, 202, 213, 214, 215, 216, 220, 221, 225, 235, 236, 347, 349, 351, 621, 643, 644, 665, 666, 667, 668, 680, 695, 698, 700, 713, 714, 715, 718, 719, 721, 724, 725, 727, 728, 729, 731], "squar": [150, 177, 324, 359, 377, 441, 665, 679, 705, 731], "gap": [150, 177, 665, 682], "addit": [150, 170, 177, 236, 621, 643, 644, 666, 694, 702, 708, 725, 726, 731], "keyword": [150, 163, 177, 236, 583], "argument": [150, 163, 177, 236, 451, 583, 592, 615, 639, 665, 704, 705, 708, 711, 713, 714, 715, 725], "autooptround": 150, "adamw": [150, 195, 275], "autoadamround": 150, "export_compressed_model": [151, 590, 602, 612, 627, 725], "compression_dtyp": [151, 627, 725], "int32": [151, 177, 589, 602, 627, 663, 725], "compression_dim": [151, 627, 725], "scale_dtyp": [151, 177, 627, 725], "float32": [151, 254, 255, 268, 297, 298, 309, 320, 373, 571, 627, 642, 659, 663, 680, 722, 725, 728, 730], "use_optimum_format": [151, 627, 725], "weightonlylinear": [151, 725], "json": [151, 170, 252, 268, 295, 309, 631, 663, 682, 701, 708, 709, 713, 714, 715, 725, 730], "compress": [151, 157, 316, 339, 344, 369, 388, 590, 621, 627, 634, 641, 649, 666, 675, 680, 700, 702, 717, 718, 719, 720, 722, 728, 732, 734], "comoress": [151, 627], "select": [151, 177, 224, 227, 236, 251, 294, 602, 604, 627, 638, 639, 660, 675, 676, 700, 719, 722, 725, 729, 731], "choos": [151, 177, 253, 296, 589, 602, 604, 627, 675, 688, 720, 726, 728, 731, 733], "popular": [151, 316, 369, 634, 641, 642, 643, 660, 666, 669, 670, 673, 678, 680, 719, 722, 725, 731, 732], "huggingfac": [151, 207, 218, 251, 294, 627, 663, 669, 673, 688, 689, 690, 691, 711, 712, 714, 715, 728, 734], "why": [151, 728, 729], "g_idx": 151, "instead": [151, 154, 233, 236, 250, 293, 632, 686, 688, 691, 706, 719, 725], "record": [151, 158, 170, 193, 196, 251, 252, 253, 259, 270, 277, 294, 295, 296, 302, 604, 632, 663, 705, 725, 727, 729, 731], "order": [151, 162, 170, 185, 203, 317, 318, 353, 356, 359, 368, 370, 371, 396, 436, 441, 450, 638, 665, 679, 703, 721, 725, 728, 729, 731], "packed_weight": 151, "qweight": 151, "5": [151, 162, 181, 185, 193, 203, 235, 236, 255, 264, 270, 298, 306, 324, 377, 402, 404, 432, 474, 642, 663, 670, 672, 676, 679, 680, 705, 710, 713, 714, 719, 721, 722, 725, 728, 730, 731, 733, 734], "alwai": [151, 185, 273, 320, 373, 377, 432, 665, 679, 680, 705, 725], "even": [151, 723, 725, 728], "modul": [153, 159, 160, 204, 210, 217, 329, 335, 345, 346, 582, 600, 613, 638, 661, 662, 666, 675, 679, 680, 682, 719, 721, 724, 725, 729, 732], "sgd": [154, 195, 235, 236, 275, 666, 680, 721, 733], "param": [154, 170, 176, 183, 187, 195, 241, 269, 275, 284, 324, 356, 377, 436, 571, 632, 642, 682, 731], "requir": [154, 170, 177, 235, 236, 242, 353, 386, 431, 574, 589, 604, 605, 638, 642, 643, 659, 660, 662, 665, 667, 668, 672, 680, 681, 682, 684, 694, 700, 702, 707, 708, 711, 714, 715, 719, 722, 725, 726, 727, 728, 729, 731, 733], "momentum": [154, 202, 349, 675, 680, 719, 733], "weight_decai": [154, 200, 680, 733], "nesterov": [154, 680, 733], "maxim": [154, 680, 719, 731], "foreach": 154, "differenti": 154, "stochast": 154, "align": [154, 268, 309, 636, 725, 730], "rule": [154, 665, 683, 719], "110mm": 154, "4pt": 154, "textbf": 154, "gamma": 154, "theta_0": 154, "f": [154, 163, 204, 583, 661, 666, 668, 722, 725, 728], "theta": 154, "lambda": [154, 163, 583, 723], "decai": 154, "hspace": 154, "13mm": 154, "mu": [154, 665], "tau": 154, "textit": 154, "ex": 154, "ldot": 154, "5mm": 154, "g_t": 154, "leftarrow": 154, "nabla_": 154, "f_t": 154, "theta_": 154, "neq": 154, "10mm": 154, "15mm": 154, "_t": 154, "_": [154, 239, 240, 282, 283, 432, 638, 639, 641, 642, 643, 660, 665, 666, 668, 670, 672, 680, 681, 682, 683, 689, 693, 695, 697, 698, 705, 708, 709, 717, 719, 722, 725, 726, 727, 728, 729, 731, 733], "g_": 154, "theta_t": 154, "bf": 154, "formula": [154, 719, 728], "On": [154, 722, 734], "deep": [154, 233, 576, 641, 642, 643, 662, 675, 676, 680, 681, 683, 685, 688, 689, 691, 694, 700, 720, 722, 731, 732, 734], "l2": [154, 236, 719], "penalti": [154, 317, 318, 370, 371, 679], "xdoctest": [154, 163, 583], "skip": [154, 163, 583, 729, 731], "9": [154, 202, 235, 236, 638, 676, 680, 719, 721, 728, 731, 733, 734], "zero_grad": [154, 668, 680, 719], "loss_fn": 154, "backward": [154, 605, 621, 666, 667, 668, 680, 718, 719, 722, 726], "subtli": 154, "sutskev": 154, "some": [154, 205, 207, 235, 236, 251, 294, 348, 643, 644, 661, 663, 665, 670, 676, 679, 680, 702, 703, 704, 705, 708, 717, 719, 722, 724, 725, 728, 729, 731, 732, 734], "written": [154, 680], "v_": 154, "p_": 154, "denot": [154, 728], "veloc": 154, "respect": [154, 636, 672, 719, 728, 733], "contrast": [154, 209, 347, 730], "emploi": 154, "form": [154, 322, 375, 665, 666, 700], "analog": 154, "modifi": [154, 218, 253, 296, 431, 450, 638, 644, 668, 672, 704, 705, 719, 733], "d_p_list": 154, "momentum_buffer_list": 154, "has_sparse_grad": 154, "see": [154, 161, 203, 229, 268, 309, 317, 370, 584, 605, 636, 637, 638, 640, 661, 677, 680, 693, 694, 697, 700, 701, 705, 706, 725, 728, 729, 731], "actawareweightqu": 155, "example_input": [155, 165, 169, 170, 175, 177, 235, 236, 314, 587, 588, 589, 603, 604, 615, 631, 670], "algo": [155, 187, 390, 459, 460, 624], "bf16modulewrapp": 156, "bf16modul": 156, "mixed_precision_model": 156, "bf16_symbolic_trac": 156, "fx_sub_module_list": 156, "trace": [156, 158, 168, 170, 207, 235, 236, 314, 439, 587, 588, 615, 638, 690, 731], "_description_": [156, 390], "is_leaf": [157, 590], "judg": [157, 590], "trace_gptq_target_block": [157, 590], "module_typ": [157, 590], "modulelist": [157, 590], "sequenti": [157, 185, 249, 292, 353, 355, 433, 435, 590, 731], "stack": [157, 590], "structur": [157, 208, 219, 220, 235, 236, 349, 367, 449, 590, 632, 675, 699, 701, 704, 713, 719, 720, 722, 729, 732, 734], "critic": [157, 218, 590, 636], "gptq_related_block": [157, 590], "embed": [157, 170, 590, 660, 719], "transformers_pr": [157, 590], "todo": [157, 185, 187, 251, 254, 294, 297, 320, 366, 373, 448, 571, 590], "transformers_nam": [157, 590], "find_lay": [157, 230, 590], "find_layers_nam": [157, 590], "log_quantizable_layers_per_transform": [157, 590], "transformer_block": [157, 590], "maxq": [157, 590], "gptquantiz": [157, 590], "nsampl": [157, 177, 229, 590, 725], "use_max_length": [157, 177, 590, 725], "pad_max_length": [157, 177, 725], "layer_wis": [157, 177, 581, 631, 723], "pretrain": [157, 590, 627, 683, 689], "url": [157, 253, 296, 590, 637, 677, 711, 712, 719], "org": [157, 202, 203, 221, 222, 229, 320, 349, 373, 590, 612, 638, 665, 676, 695, 698, 719], "2210": [157, 590, 612, 725], "17323": [157, 590, 612, 725], "node_collector": 158, "hook": [158, 192, 196, 218, 277, 278, 339, 344, 624, 666, 667, 680, 719, 728, 729], "hessiantrac": 158, "q_model": [158, 162, 236, 326, 432, 472, 476, 588, 638, 641, 662, 663, 665, 668, 670, 673, 674, 679, 680, 682, 702, 703, 722, 723, 724, 725], "criterion": [158, 185, 192, 194, 195, 201, 202, 209, 214, 215, 216, 218, 221, 222, 226, 235, 236, 272, 275, 316, 369, 666, 667, 680, 719, 722, 728, 731, 733], "yao": 158, "zhewei": 158, "pyhessian": 158, "len": [158, 236, 268, 309, 663, 668, 730], "2020": 158, "ieee": [158, 681, 728], "intern": [158, 249, 292, 366, 448, 662, 663, 679, 719], "confer": [158, 719, 728], "big": [158, 665, 725], "dong": 158, "zhen": 158, "hawq": [158, 439, 731], "v2": [158, 439, 662, 668, 670, 671, 676, 689, 726, 728, 731, 732, 734], "system": [158, 163, 183, 269, 583, 632, 659, 686, 719, 734], "33": [158, 734], "18518": 158, "18529": 158, "openvinotoolkit": 158, "nncf": 158, "develop": [158, 187, 388, 637, 638, 661, 676, 680, 681, 683, 689, 700, 706, 719, 720, 724, 727], "hessian_trac": 158, "compare_weight": 158, "float_dict": 158, "ani": [158, 163, 187, 320, 322, 365, 373, 375, 426, 431, 447, 451, 583, 605, 615, 616, 629, 632, 636, 641, 644, 661, 668, 683, 688, 701, 702, 706, 707, 719, 727, 731], "quantized_dict": 158, "compar": [158, 324, 377, 632, 667, 679, 703, 719, 722, 725, 727, 729, 731], "being": [158, 320, 373, 644, 708], "wt_compare_dict": 158, "float_model": 158, "state_dict": [158, 668, 725, 729], "qmodel": 158, "compute_error": 158, "state": [158, 208, 605, 644, 686, 719], "weight_dict": 158, "hawq_top": 158, "enable_act": 158, "portabl": [161, 584], "serial": [161, 163, 583, 584], "copyreg": [161, 584], "mechan": [161, 202, 584, 719, 727, 732], "pickler": [161, 584], "pickletool": [161, 584], "comment": [161, 584, 636, 643, 663, 679, 680, 725, 730], "unpickl": [161, 163, 583, 584], "misc": [161, 584, 677], "format_vers": [161, 584], "compatible_format": [161, 584], "except": [161, 163, 451, 583, 584, 632, 661, 706, 722, 723], "pickleerror": [161, 584], "pickl": [161, 163, 583, 584], "picklingerror": [161, 584], "unpicklingerror": [161, 584], "problem": [161, 251, 294, 324, 377, 584, 679, 681, 701], "secur": [161, 584, 641, 702, 720, 735], "violat": [161, 584], "also": [161, 208, 250, 253, 268, 293, 296, 309, 317, 370, 377, 388, 432, 584, 605, 637, 639, 642, 643, 644, 662, 665, 669, 673, 675, 679, 680, 683, 688, 693, 694, 697, 700, 701, 702, 705, 706, 717, 719, 720, 722, 724, 725, 728, 731], "includ": [161, 193, 202, 207, 209, 224, 226, 235, 236, 251, 253, 260, 268, 270, 294, 296, 303, 309, 315, 325, 347, 352, 451, 584, 605, 632, 636, 642, 643, 644, 662, 663, 665, 676, 677, 678, 679, 680, 683, 686, 689, 694, 706, 710, 713, 714, 715, 719, 722, 724, 725, 729, 731], "necessarili": [161, 584], "limit": [161, 200, 356, 436, 584, 632, 641, 665, 666, 678, 722, 725, 726, 729], "attributeerror": [161, 451, 584], "eoferror": [161, 584], "importerror": [161, 584, 671], "indexerror": [161, 584], "layerwisequ": 162, "pretrained_model_name_or_path": [162, 164, 585], "op_cfg": 162, "output_dir": [162, 627, 680, 688, 689, 704, 705, 711, 714, 715], "memomeri": 162, "file_lik": [163, 583], "map_loc": [163, 583], "pickle_modul": [163, 204, 583], "weights_onli": [163, 583], "pickle_load_arg": [163, 583], "facil": [163, 583], "treat": [163, 583, 662], "storag": [163, 583, 641, 673, 679, 702, 705, 725, 728], "thei": [163, 269, 451, 583, 636, 661, 666, 672, 680, 688, 703, 706, 717], "deseri": [163, 583], "were": [163, 324, 377, 583, 686, 719], "fail": [163, 583, 638, 662, 670, 709], "becaus": [163, 185, 213, 218, 268, 309, 347, 583, 638, 705, 722, 728, 730, 731], "doesn": [163, 268, 309, 583, 642, 668, 680, 681, 701, 733], "certain": [163, 230, 583, 727], "howev": [163, 583, 706, 719, 725, 728], "altern": [163, 235, 236, 432, 583], "callabl": [163, 235, 236, 322, 375, 390, 402, 455, 472, 473, 476, 583, 610, 615, 616, 621, 661, 662], "locat": [163, 178, 227, 268, 309, 583, 668, 686, 693, 697, 700, 708, 722, 726, 730, 733], "resid": [163, 583], "tag": [163, 386, 574, 583, 728, 729], "wa": [163, 235, 236, 583, 642, 680, 705, 706, 709, 720, 731], "builtin": [163, 583, 668], "device_id": [163, 583], "either": [163, 236, 320, 373, 583, 684, 688, 708, 718, 721, 722], "final": [163, 207, 214, 227, 349, 583, 643, 680, 686, 717, 719, 722, 726, 731], "alreadi": [163, 183, 253, 267, 269, 296, 308, 583, 642, 663, 675, 695, 698, 702, 711, 731], "right": [163, 264, 306, 320, 373, 583, 636, 637, 638, 700, 706, 728, 730], "fall": [163, 170, 583], "back": [163, 170, 268, 274, 309, 583, 665, 700, 706], "behavior": [163, 583, 636, 642, 643, 644, 672, 682, 725, 729, 731, 733], "wasn": [163, 583], "appear": [163, 583, 636, 694, 700, 702], "ones": [163, 320, 373, 583, 719], "put": [163, 253, 296, 583, 663, 666], "user": [163, 183, 195, 207, 219, 227, 235, 236, 239, 240, 253, 256, 260, 268, 269, 275, 282, 283, 296, 299, 303, 309, 315, 339, 344, 350, 352, 353, 377, 378, 388, 432, 437, 450, 583, 588, 621, 632, 638, 639, 641, 642, 643, 644, 649, 659, 661, 662, 666, 667, 670, 672, 675, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 689, 691, 694, 700, 707, 708, 709, 710, 713, 714, 715, 717, 718, 719, 720, 722, 723, 724, 726, 728, 729, 730, 731, 735], "register_packag": [163, 583], "readlin": [163, 583], "tell": [163, 377, 432, 583, 721], "seek": [163, 583, 725], "o": [163, 451, 583, 661, 676, 685, 703], "pathlik": [163, 583], "metadata": [163, 583], "primit": [163, 583], "unless": [163, 583, 672], "implicitli": [163, 187, 583], "known": [163, 271, 356, 436, 583, 680, 719, 722, 729, 731], "insecur": [163, 583, 702], "possibl": [163, 269, 583, 605, 665, 702, 718, 719, 723, 724, 731], "construct": [163, 251, 254, 255, 258, 266, 271, 273, 274, 276, 294, 297, 298, 301, 377, 382, 386, 450, 571, 573, 574, 583, 624, 636, 643, 644, 663, 668, 719, 731], "malici": [163, 583], "arbitrari": [163, 583, 680, 718], "code": [163, 207, 239, 240, 269, 282, 283, 326, 350, 353, 432, 583, 621, 638, 641, 642, 643, 644, 663, 666, 667, 668, 674, 675, 677, 679, 683, 685, 687, 688, 689, 691, 694, 700, 704, 705, 707, 708, 709, 717, 718, 719, 720, 721, 722, 727, 728, 729, 730], "never": [163, 583, 731], "could": [163, 175, 181, 209, 239, 240, 253, 282, 283, 296, 353, 378, 432, 583, 621, 636, 638, 667, 680, 718, 719, 722, 725, 728, 732], "come": [163, 583, 678, 731], "untrust": [163, 583], "unsaf": [163, 583], "tamper": [163, 583], "trust": [163, 583, 665, 702], "load_state_dict": [163, 583], "ram": [163, 583], "surg": [163, 583], "checkpoint": [163, 386, 574, 583, 631, 682], "By": [163, 207, 235, 236, 317, 370, 583, 643, 644, 679, 682, 693, 694, 697, 719, 720, 725, 731], "decod": [163, 263, 264, 306, 317, 370, 583, 679, 730], "byte": [163, 583], "utf": [163, 267, 308, 583], "unicodedecodeerror": [163, 583], "ascii": [163, 583], "codec": [163, 583], "0x": [163, 583], "incorrect": [163, 583], "extra": [163, 322, 375, 583, 680, 725], "encod": [163, 320, 373, 583, 703, 730], "latin1": [163, 583], "them": [163, 207, 251, 294, 583, 638, 644, 662, 665, 670, 672, 674, 703, 706, 718, 719, 725, 731], "keep": [163, 218, 227, 348, 437, 583, 638, 642, 661, 699, 700, 726], "later": [163, 175, 181, 583, 661, 707, 708, 729], "byte_arrai": [163, 583], "undefin": [163, 227, 348, 583], "filepath": [163, 583, 632, 661], "pt": [163, 583, 631, 676, 682, 704, 720, 722, 724, 725], "onto": [163, 583], "loc": [163, 583], "bytesio": [163, 583], "open": [163, 272, 316, 369, 583, 624, 634, 636, 641, 670, 671, 680, 695, 698, 701, 702, 706, 707, 708, 720], "rb": [163, 583], "buffer": [163, 583], "get_children": [164, 585], "get_named_children": [164, 585], "dowload_hf_model": [164, 585], "repo_id": [164, 585], "cache_dir": [164, 585], "repo_typ": [164, 585], "revis": [164, 585], "download": [164, 253, 296, 585, 663, 665, 676, 705, 711, 726], "hug": [164, 585, 641, 707, 720], "face": [164, 585, 636, 641, 649, 683, 687, 707, 709, 720, 726, 734], "hf": [164, 585, 678, 728, 734], "hub": [164, 585, 641, 669, 673, 691], "load_empty_model": [164, 585, 723], "automodelforcausallm": [164, 585], "get_super_module_by_nam": [164, 585], "module_nam": [164, 202, 204, 214, 215, 216, 217, 219, 220, 221, 222, 224, 226, 349, 576, 585, 632], "father": [164, 207, 585], "update_modul": [164, 585], "load_layer_wise_quantized_model": [164, 585], "load_tensor_from_shard": [164, 585], "shard": [164, 585], "load_tensor": [164, 585], "ipex_mixed_precis": 165, "fakeaffinetensorquantfunct": [166, 601], "affin": [166, 601, 722], "teqlinearfakequ": [166, 601], "orig_lay": [166, 601], "mullinear": [166, 177, 589, 601], "input_scal": [166, 601], "detector": 167, "transformerbasedmodelblockpatterndetector": [167, 588], "pattern_lst": [167, 588], "block_pattern": [167, 588], "detect": [167, 170, 207, 235, 236, 320, 324, 373, 377, 382, 588, 637, 638, 683, 690, 691, 719, 731], "ffn": [167, 218, 588], "trace_and_fuse_sub_graph": 168, "is_qat": 168, "traced_model": [168, 175], "tequant": [169, 603], "absorb_to_lay": [169, 170, 177, 603, 604], "extra_config": [169, 177], "trainabl": [169, 603, 641, 720, 725], "move_input_devic": 170, "auto": [170, 176, 184, 205, 207, 235, 236, 354, 369, 402, 434, 440, 473, 611, 632, 638, 660, 683, 686, 688, 690, 691, 719, 722, 725], "kind": [170, 680], "forward_wrapp": 170, "get_embedding_contigu": 170, "contigu": 170, "is_fused_modul": 170, "_propagate_qconfig_help": 170, "collate_torch_pr": 170, "collate_result": 170, "input2tupl": 170, "append_attr": 170, "fx_model": 170, "fx_white_list": 170, "append": [170, 353, 356, 436, 638, 667, 680, 718], "graphmodul": [170, 638, 724], "dir": [170, 251, 294, 627, 631, 663, 671, 674], "generate_activation_observ": 170, "smooth_quant_en": 170, "observ": [170, 644, 725, 727, 729, 731], "what": [170, 214, 249, 292, 377, 432, 621, 636, 720], "check_cfg_and_qconfig": 170, "op_infos_from_cfg": [170, 588], "output_tensor_ids_op_nam": [170, 588], "paser_cfg": [170, 588], "ops_nam": [170, 588], "get_quantizable_ops_from_cfg": [170, 588], "input_tensor_ids_op_nam": [170, 588], "update_sq_scal": 170, "ipex_config_path": 170, "smoothquant_scale_info": 170, "ipex_config": 170, "auto_copi": 170, "fetch_modul": [170, 604, 620], "op_nam": [170, 232, 235, 236, 367, 449, 588, 604, 620, 632, 633, 643, 680, 719, 729], "simple_infer": [170, 588], "get_example_input": [170, 604], "example_inp": [170, 604], "get_fallback_ord": 170, "confidence_batch": [170, 731], "fallback": [170, 236, 359, 360, 439, 441, 442, 670, 681, 703, 724, 731], "requantize_cfg": 170, "confid": 170, "ordered_op": 170, "get_mse_order_per_fp32": 170, "influenc": [170, 719], "last": [170, 176, 202, 227, 235, 236, 662, 681, 683, 685, 690, 694, 722, 725, 728], "fallback_ord": 170, "get_mse_order_per_int8": 170, "get_torch_vers": 170, "match_datatype_pattern": 170, "calculate_quant_min_max": 170, "unsign": [170, 368, 450, 644, 725], "qmin": 170, "qmax": 170, "get_depth": [170, 588], "depth": [170, 588, 666, 724], "get_dict_at_depth": [170, 588], "target_depth": [170, 588], "nest": [170, 233, 576, 588], "get_element_under_depth": [170, 588], "ops_lst": [170, 588], "get_op_type_by_nam": 170, "quantizable_op": [170, 588], "collect_weight_info": 170, "fc": [170, 236, 719], "_type_": [170, 390, 627], "get_module_input_output": [170, 604], "module_hook_config": [170, 604], "input_func": [170, 604], "output_func": [170, 604], "help": [170, 196, 277, 326, 604, 661, 678, 682, 683, 689, 700, 708, 713, 714, 715, 725, 731, 732], "module_name_list": [170, 604], "fc1": [170, 177, 589, 604], "preprocess": [170, 235, 236, 251, 268, 294, 309, 450, 604, 624, 668, 730], "usag": [170, 184, 185, 187, 250, 293, 320, 326, 353, 373, 409, 451, 576, 604, 616, 620, 643, 663, 668, 669, 683, 691, 702, 708, 713, 714, 715, 717, 721, 725, 730], "input_valu": [170, 604], "output_valu": [170, 604], "total_valu": [170, 604], "get_absorb_lay": [170, 604], "supported_lay": [170, 604], "no_absorb_lay": [170, 604], "allow": [170, 356, 436, 604, 605, 666, 668, 679, 680, 681, 702, 707, 719, 721, 725, 728, 731, 733], "absorpt": [170, 604], "eg": [170, 233, 253, 296, 576, 604, 663, 721], "absorb": [170, 175, 177, 181, 589, 604, 725], "absorbed_1": [170, 604], "xx": [170, 604], "get_block_prefix": [170, 604], "block_list": [170, 604], "block_num": [170, 604], "block_prefix": [170, 604], "get_hidden_st": [170, 604], "calib": [170, 604, 643], "rest": [170, 604, 707, 708, 713, 714, 715], "part": [170, 205, 214, 347, 349, 604, 638, 676, 681, 695, 698, 708, 710, 719, 723, 728, 732], "total_block_kwarg": [170, 604], "total_block_arg": [170, 604], "torchsmoothqu": [175, 728], "q_func": [175, 239, 240, 282, 283, 356, 357, 359, 360, 361, 362, 433, 436, 437, 438, 439, 441, 442, 443, 444, 642, 643, 680, 731], "whose": [175, 181, 209, 348, 386, 574, 674, 728, 731], "reshape_in_channel_to_last": 176, "reshape_scale_as_input": 176, "featur": [176, 235, 236, 251, 252, 264, 268, 294, 295, 306, 309, 637, 641, 659, 662, 664, 666, 680, 681, 682, 683, 687, 688, 691, 700, 702, 706, 719, 720, 726, 730], "reshape_scale_as_weight": 176, "depthwis": 176, "orig": 176, "register_autotun": 176, "quantize_4bit": [177, 604], "quantil": [177, 602, 604, 731], "nf4": [177, 602, 604, 641, 725], "return_int": [177, 589, 604, 725], "fp4": [177, 602, 604, 641, 725], "q_tensor": [177, 604], "qdq_weight_asym": [177, 604], "qdq_weight_sym": [177, 604], "full_rang": [177, 604], "amax": [177, 604], "qdq_weight_actor": [177, 604], "place": [177, 587, 604, 667, 676, 713, 719, 729, 731], "search_clip": [177, 604], "best": [177, 185, 192, 268, 309, 310, 315, 352, 359, 395, 441, 604, 636, 639, 661, 676, 683, 689, 700, 706, 717, 722, 725, 728, 730, 731], "num": [177, 602, 604, 632], "best_clip_ratio": [177, 604], "group_dim": [177, 602, 612, 725], "gptq_perm": 177, "perm": [177, 268, 309, 730], "absorb_lay": [177, 589], "absorb_dict": [177, 589], "absorbed_lay": [177, 589], "fc3": [177, 589], "oom": [177, 589], "teq_quant": [177, 603], "autoround_quant": 177, "not_use_best_ms": 177, "autoround": 177, "temporarili": [177, 636], "mandatori": [177, 239, 240, 282, 283, 432, 680, 733], "algorithm_registri": 178, "algorithm_typ": 178, "registr": [178, 253, 260, 268, 296, 303, 309, 342], "algorithmschedul": 178, "conf": [178, 183, 192, 236, 239, 240, 269, 282, 283, 326, 333, 334, 336, 337, 338, 339, 344, 356, 357, 359, 360, 361, 362, 366, 378, 388, 432, 433, 436, 437, 438, 439, 441, 442, 443, 444, 448, 451, 621, 638, 639, 641, 644, 659, 666, 673, 674, 680, 681, 682, 702, 704, 705, 718, 722, 723, 724, 725, 727, 728, 731], "control": [178, 235, 236, 638, 680, 706, 719, 731], "phase": [178, 639, 680, 719, 722, 724, 731], "fastbiascorrect": [179, 182], "fast_bias_correct": [180, 235, 236, 369, 722], "weight_correct": [180, 235, 236, 369, 722], "weightcorrect": 182, "1e": [182, 728, 733], "05": [182, 236, 324, 377, 404, 679, 728, 734], "evalu": [183, 185, 192, 209, 235, 239, 240, 251, 269, 282, 283, 294, 310, 317, 320, 321, 322, 324, 326, 370, 373, 374, 375, 377, 378, 388, 402, 432, 621, 624, 639, 642, 643, 661, 663, 666, 667, 674, 675, 678, 679, 680, 681, 683, 689, 691, 694, 700, 717, 719, 722, 727, 728, 729, 731, 733], "set_env_var": [183, 269], "env_var": [183, 269], "overwrite_exist": [183, 269], "env": [183, 269, 671, 713, 714, 715], "set_all_env_var": [183, 269], "physic": [183, 269, 636, 659, 708], "core": [183, 235, 236, 269, 394, 637, 659, 677, 693, 697, 708, 734], "get_architectur": [183, 269], "architectur": [183, 269, 327, 330, 641, 659, 666, 680, 707, 719, 720, 725, 732], "get_threads_per_cor": [183, 269], "thread": [183, 235, 236, 269, 426, 431, 605, 662, 710], "get_thread": [183, 269], "get_physical_id": [183, 269], "socket": [183, 269, 632, 708, 710, 734], "get_core_id": [183, 269], "get_bounded_thread": [183, 269], "core_id": [183, 269], "bind": [183, 269], "run_inst": 183, "b_dataload": [183, 235, 236, 659, 680], "b_func": [183, 659], "benchmarkconfig": [183, 235, 236, 659, 665, 680], "goal": [183, 185, 310, 315, 339, 344, 352, 378, 432, 643, 662, 718, 722, 731], "prefer": [183, 315, 352, 432, 719, 725], "space": [183, 199, 200, 215, 216, 221, 222, 235, 236, 239, 240, 282, 283, 315, 322, 327, 330, 331, 332, 352, 356, 359, 366, 375, 378, 432, 436, 441, 448, 636, 637, 639, 642, 643, 644, 661, 719, 722, 728, 733], "etc": [183, 192, 267, 308, 310, 315, 322, 339, 344, 352, 375, 378, 432, 631, 641, 666, 675, 702, 706, 719, 727, 731], "generate_prefix": 183, "core_list": 183, "command": [183, 269, 621, 665, 668, 683, 685, 688, 693, 697, 701, 702, 704, 705, 706, 708], "numactl": [183, 671, 686, 694], "call_on": 183, "cmd": 183, "log_fil": [183, 425, 430], "window": [183, 659, 676, 700, 701], "config_inst": 183, "raw_cmd": 183, "multi": [183, 205, 207, 218, 320, 373, 377, 432, 639, 662, 663, 675, 680, 717, 719, 722, 731], "trigger": [183, 214, 349], "summary_benchmark": 183, "summari": [183, 621, 665, 695, 698, 729, 734], "profil": [183, 236, 369], "benchmark_with_raw_cmd": 183, "fit_with_raw_cmd": 183, "cores_per_inst": [183, 235, 236, 659, 680, 721], "num_of_inst": [183, 235, 236, 659, 680, 721], "fit": [183, 209, 235, 236, 356, 378, 432, 436, 451, 621, 638, 641, 659, 662, 663, 665, 668, 673, 674, 679, 680, 681, 682, 702, 703, 719, 722, 723, 724, 725], "pb": [183, 235, 236, 378, 386, 432, 574, 641, 659, 668, 673, 680, 682, 702, 705, 713, 729, 734], "eval_dataload": [183, 235, 236, 239, 240, 282, 283, 353, 356, 357, 359, 360, 361, 362, 378, 432, 433, 436, 437, 438, 439, 441, 442, 443, 444, 621, 659, 674, 679, 680, 702, 722, 723, 731], "register_config": [184, 661], "framework_nam": [184, 661], "algo_nam": [184, 661], "prioriti": [184, 616, 661, 711], "examplealgorithm": 184, "examplealgorithmconfig": 184, "larger": [184, 616, 643, 719, 725, 728], "higher": [184, 235, 236, 239, 240, 282, 283, 331, 378, 432, 616, 621, 638, 665, 666, 670, 679, 703, 719, 722, 727], "tri": [184, 236, 661, 731], "stage": [184, 355, 360, 433, 435, 442, 666, 719, 729, 731], "baseconfig": [184, 187, 470, 472, 476, 615, 661], "white_list": [184, 404, 470, 474, 612], "op_name_or_module_typ": [184, 404, 470, 474, 612], "default_white_list": [184, 404, 470, 474, 612], "composableconfig": [184, 661], "register_supported_configs_for_fwk": 184, "fwk_name": [184, 661], "eval_acc": [185, 402], "eval_perf": [185, 402], "mold": 185, "user_eval_fns1": 185, "user_eval_fns2": 185, "eval_fn": [185, 402, 473, 611], "user_eval_fns3": 185, "user_eval_fns4": 185, "sequentialsampl": [185, 249, 292], "config_sourc": 185, "_configset": 185, "tuningconfig": [185, 402, 473, 611], "config_set": [185, 402], "max_trial": [185, 235, 236, 680, 731], "default_sampl": 185, "tolerable_loss": [185, 235, 236, 680, 731], "found": [185, 192, 310, 641, 661, 666, 678, 681, 688, 705, 709, 728, 731, 734], "from_fwk_config": 185, "configset": 185, "timeout": [185, 235, 236, 680, 721, 731, 733], "exit": [185, 235, 236, 355, 433, 435, 680, 708, 713, 714, 715, 733], "much": [185, 192, 202, 235, 236, 268, 309, 310, 666, 694, 728, 730], "metric": [185, 192, 235, 236, 239, 240, 272, 282, 283, 310, 315, 316, 331, 339, 344, 352, 353, 369, 378, 432, 621, 624, 639, 642, 643, 663, 665, 668, 680, 681, 702, 722, 727, 728, 729, 731, 732, 733, 734], "accept": [185, 235, 236, 451, 636, 659, 661, 662, 702, 725], "rel": [185, 203, 235, 236, 388, 680, 703, 721, 731, 733, 734], "neg": [185, 203], "refin": [185, 674, 719], "tune_config": [185, 402, 473, 611, 643], "config1": 185, "config2": 185, "toler": [185, 705], "fp32_baselin": [185, 624, 642], "config1_metr": 185, "config2_metr": 185, "98": [185, 235, 236, 680, 719, 721, 734], "trial": [185, 731], "config3_metr": 185, "97": [185, 680, 734], "Not": [185, 365, 366, 447, 448, 576, 632, 639, 661], "achiev": [185, 315, 352, 670, 678, 680, 703, 718, 719, 720, 722, 728, 729, 731], "config_metr": 185, "reach": [185, 209, 225, 235, 236, 351, 637, 662, 702, 719, 731], "paramlevel": 187, "enumer": [187, 331, 621, 642, 666, 667, 668, 680, 718, 719, 729], "deriv": [187, 192, 202, 211, 212, 213, 219, 220, 221, 222, 223, 224, 225, 226, 310, 347, 349, 351], "tuningparam": 187, "default_v": 187, "tunable_typ": 187, "op_level": 187, "tunabl": 187, "fakealgoconfig": 187, "params_list": [187, 402], "simpl": [187, 268, 309, 676, 680, 719, 727, 728, 731], "give": [187, 643, 700, 731], "enough": [187, 722], "simple_attr": 187, "complex": [187, 661, 680, 681, 719], "explicitli": [187, 235, 236, 674, 719], "complex_attr": 187, "model_attr": 187, "model_level": 187, "explain": [187, 644, 665, 728], "logger": [189, 316, 345, 369, 576, 588, 622, 625, 632], "tuninglogg": 190, "unifi": [190, 315, 352, 642, 643, 644, 662, 674, 675, 679, 680, 682], "assist": [190, 726], "team": [190, 322, 375, 636, 724], "retriev": [190, 249, 292, 719], "dump_elapsed_tim": [191, 576, 599, 632, 642], "customized_msg": [191, 576, 599, 632], "elaps": [191, 576, 599, 632], "set_random_se": [191, 235, 236, 632], "set_workspac": [191, 235, 236, 632], "workspac": [191, 235, 236, 631, 632, 682, 708, 713, 714, 715], "set_resume_from": [191, 235, 236, 632], "resume_from": [191, 235, 236, 632], "set_tensorboard": [191, 235, 236, 632], "tensorboard": [191, 235, 236, 624, 632, 642, 680, 703], "compon": [192, 310, 316, 353, 369, 638, 661, 665, 668, 676, 677, 683, 700, 708, 718, 719], "quantizationawaretrainingcallback": 192, "pruningcallback": 192, "distillationcallback": 192, "basecallback": 192, "design": [192, 250, 273, 278, 293, 377, 437, 639, 641, 680, 688, 691, 719, 722, 732], "mainli": [192, 225, 278, 351, 641, 680, 719, 722], "prune": [192, 201, 202, 204, 205, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 235, 236, 278, 279, 316, 333, 334, 336, 337, 338, 342, 344, 345, 347, 348, 349, 351, 353, 369, 632, 641, 668, 669, 672, 673, 675, 718, 720, 732, 733], "distil": [192, 201, 235, 236, 270, 277, 278, 316, 369, 641, 669, 673, 675, 718, 732, 733], "In": [192, 211, 212, 213, 218, 219, 220, 224, 236, 250, 278, 293, 320, 347, 349, 373, 388, 605, 636, 638, 639, 641, 642, 643, 662, 663, 665, 666, 667, 668, 679, 680, 690, 693, 694, 697, 703, 704, 705, 706, 713, 714, 715, 717, 718, 719, 722, 724, 725, 727, 728, 729, 730, 731, 732], "adaptor": [192, 235, 236, 368, 450, 459, 460, 624, 641, 644, 675, 723, 724, 726, 728, 729, 732], "pipelin": [192, 310, 327, 328, 353, 637, 667, 680, 718], "knowledg": [192, 193, 235, 236, 270, 310, 667, 669, 673, 675, 680, 682, 733], "transfer": [192, 258, 301, 310, 663, 666, 667, 680, 728], "teacher": [192, 235, 236, 310, 666, 667, 680, 734], "student": [192, 196, 235, 236, 251, 277, 294, 310, 663, 666, 667, 734], "distillation_conf": [192, 232, 310], "_epoch_ran": [192, 310], "integ": [192, 213, 214, 235, 236, 310, 320, 324, 331, 347, 349, 373, 377, 451, 642, 644, 660, 722, 725, 728, 731], "epoch": [192, 215, 216, 221, 310, 349, 621, 662, 666, 667, 668, 680, 718, 719, 733], "ran": [192, 310], "eval_frequ": [192, 310], "frequenc": [192, 214, 235, 236, 310, 349, 680, 719, 733], "term": [192, 215, 216, 221, 222, 224, 310, 637, 660, 666, 677, 679, 717, 718, 731], "best_scor": [192, 310], "best_model": [192, 310, 631, 725], "critet": [193, 270], "tensorflowcrossentropyloss": [193, 270], "pytorchcrossentropyloss": [193, 270], "tensorflowsparsecategoricalcrossentropi": 193, "tensorflowknowledgedistillationloss": [193, 270], "pytorchknowledgedistillationloss": [193, 270, 680], "pytorchintermediatelayersknowledgedistillationloss": [193, 270], "tensorflowcriterion": [193, 270], "pytorchcriterion": [193, 270], "criterion_registri": [193, 270], "criterion_typ": [193, 270], "registry_criterion": [193, 270], "param_dict": [193, 195, 270, 275], "crossentropyloss": [193, 235, 236, 666, 680], "sparsecategoricalcrossentropyloss": 193, "knowledgedistillationframework": [193, 270], "student_model": [193, 236, 270, 680], "teacher_model": [193, 235, 236, 270, 666, 667, 680], "knowledgedistillationloss": [193, 270, 680, 733], "temperatur": [193, 235, 236, 270, 680, 733], "loss_typ": [193, 199, 235, 236, 270, 680, 733], "ce": [193, 235, 236, 270, 680, 733], "loss_weight": [193, 235, 236, 270, 680, 733], "pytorchknowledgedistillationlosswrapp": [193, 270], "tensorflowknowledgedistillationlosswrapp": 193, "tensorflowknowledgedistillationlossextern": [193, 270], "intermediatelayersknowledgedistillationloss": [193, 270], "layer_map": [193, 236, 270, 666], "add_origin_loss": [193, 236, 270], "pytorchintermediatelayersknowledgedistillationlosswrapp": [193, 270], "selfknowledgedistillationloss": [193, 270], "selfknowledg": [193, 270], "pytorchselfknowledgedistillationloss": 193, "pytorchselfknowledgedistillationlosswrapp": 193, "multipl": [195, 205, 237, 238, 242, 243, 251, 252, 254, 255, 256, 257, 258, 262, 265, 268, 275, 280, 281, 285, 286, 288, 294, 295, 297, 298, 299, 300, 301, 305, 307, 309, 325, 378, 379, 380, 382, 388, 605, 659, 663, 670, 680, 707, 710, 718, 719, 727, 728, 731], "tensorflowoptim": [195, 275], "pytorchoptim": [195, 275], "optimizer_registri": [195, 275], "optimizer_typ": [195, 275], "cross": [195, 275, 324, 377, 674, 731], "tensorflowsgd": [195, 275], "tensorflowadamw": [195, 275], "tensorflow_addon": [195, 275], "tensorflowadam": 195, "adam": [195, 733], "pytorchsgd": [195, 275], "record_output": [196, 277], "output_process": [196, 277], "get_activ": [196, 277], "hyper": [197, 733], "sa_optim": [197, 201], "simul": [198, 644], "anneal": 198, "register_search": 199, "searcher": [199, 207, 236, 332], "registri": [199, 200, 202, 209, 214, 223, 224, 225, 226, 347, 349, 351, 639], "sure": [199, 209, 214, 223, 225, 347, 349, 351, 659, 702], "search_spac": [199, 232, 236, 327, 330, 331, 332], "gridsearch": [199, 332], "grid": [199, 236, 332, 639, 719], "whole": [199, 332, 644, 702, 722, 734], "exhaust": [199, 236, 316, 332, 358, 369, 440, 721], "randomsearch": [199, 332], "randomli": [199, 268, 309, 332, 356, 436, 639, 728, 730, 731], "bayesianoptimizationsearch": [199, 332], "bayesian": [199, 236, 316, 332, 358, 369, 440, 639, 719, 721], "xgbsearcher": 199, "higher_is_bett": [199, 235, 236, 377, 432, 731, 733], "reg": [199, 201, 204, 215, 216, 221, 222, 236], "min_train_sampl": [199, 236], "10": [199, 235, 236, 253, 296, 356, 436, 641, 659, 663, 670, 676, 680, 702, 703, 719, 721, 730, 731, 734], "xgboost": [199, 719], "searchspac": 200, "factori": [200, 384, 412, 414, 419, 422, 424, 429, 575], "actual": [200, 324, 377, 668], "interv": [200, 220, 719], "continu": [200, 212, 320, 347, 373, 639, 678, 680, 701, 719, 732], "learning_r": [200, 235, 236, 680, 721, 733], "001": [200, 253, 296, 663, 668, 728, 733], "num_train_epoch": [200, 680, 719], "20": [200, 268, 309, 705, 708, 713, 714, 715, 719, 730, 733, 734], "register_searchspac": 200, "pruner": [200, 201, 316, 333, 334, 335, 336, 337, 339, 344, 345, 347, 350, 369, 680, 719, 733], "basesearchspac": 200, "discretesearchspac": 200, "continuoussearchspac": 200, "hpo": [201, 239, 282, 719], "model_slim": [201, 204, 218], "auto_slim": [201, 204, 206], "pattern_analyz": [201, 204, 206], "weight_slim": [201, 204, 206, 218], "mha": [201, 204, 210, 217, 719], "ninm": [201, 204, 210], "nxm": [201, 204, 210, 220, 235, 236, 343, 347, 719], "basic": [201, 204, 207, 209, 217, 235, 236, 267, 308, 316, 327, 347, 358, 362, 365, 369, 440, 444, 447, 621, 675, 676, 680, 702, 721, 727], "block_mask": [201, 202, 204, 217], "pattern_lock": [201, 204, 217, 235, 236, 316, 335, 369], "retrain_fre": [201, 202, 204, 217, 719], "wanda": [201, 204], "criteria": [201, 204, 235, 236, 315, 339, 344, 347, 349, 352, 638, 700, 728], "tf_criteria": [201, 204], "callback": [201, 339, 344, 621, 624, 638, 680, 718, 719, 722], "register_criterion": [202, 226], "get_criterion": 202, "pruningcriterion": [202, 226], "about": [202, 226, 632, 636, 661, 662, 680, 705, 706, 719, 724, 731, 732, 734], "score": [202, 209, 214, 218, 226, 235, 236, 317, 318, 320, 321, 322, 324, 349, 370, 371, 373, 374, 375, 377, 439, 624, 638, 679, 703, 717, 719, 727, 731], "magnitudecriterion": [202, 226], "magnitud": [202, 226, 235, 236, 316, 324, 335, 369, 377, 675, 719], "criterion_class": [202, 226], "determin": [202, 209, 214, 226, 235, 236, 626, 636, 638, 660, 719, 722], "gradientcriterion": 202, "absolut": [202, 235, 236, 324, 377, 679, 680, 719, 722, 731], "snipcriterion": 202, "snip": [202, 235, 236, 349, 675, 719, 734], "product": [202, 641, 675, 681, 683, 684, 700, 706, 720, 722, 727, 731], "shot": [202, 221, 222, 225, 278, 349, 351, 639, 675, 680, 719, 720, 725], "connect": [202, 349, 700, 702, 709, 719, 727], "sensit": [202, 333, 349, 675, 719], "1810": [202, 349], "02340": [202, 349], "snipmomentumcriterion": 202, "snip_momentum": [202, 235, 236, 680, 719], "preserv": [202, 660, 719, 725], "beta": 202, "blockmaskcriterion": 202, "retrainfreecriterion": 202, "return_reorder_indic": 203, "6": [203, 235, 236, 672, 722, 728, 731, 734], "remain": [203, 688], "unchang": 203, "flip": [203, 264, 268, 306, 309, 730], "initial_metr": 203, "sparsity_ratio": [203, 229], "prune_n": [203, 229], "prune_m": [203, 229], "pow_of_var_regrow": 203, "max_cycle_tim": 203, "without_same_sign": 203, "update_threshold": 203, "power": [203, 666, 680, 694, 720], "cycl": [203, 639], "paper": [203, 229, 666, 719, 725, 728], "2310": 203, "08915": 203, "pickle_protocol": 204, "_use_new_zipfile_seri": 204, "prepare_prun": [204, 719], "loss_func": [204, 223], "assertionerror": [204, 210, 217, 227, 347, 348, 349, 378], "slim": [205, 206, 207, 320, 373, 384, 386, 574, 575, 682, 719], "round_multipli": 205, "spars": [205, 219, 349, 663, 720], "model_slim_ffn2": 205, "perman": [205, 636, 719], "obtain": [205, 207, 216, 221, 224, 227, 348, 605, 638, 643, 708, 719, 727, 728, 731], "acceler": [205, 616, 666, 680, 683, 691, 700, 703, 707, 719, 720, 724, 725, 728, 731], "directli": [205, 235, 236, 250, 293, 320, 324, 348, 373, 377, 679, 680, 687, 719, 721, 722, 729], "sprase": 205, "model_slim_mha": 205, "parse_auto_slim_config": [205, 719], "ffn2_sparsiti": [205, 719], "mha_spars": [205, 719], "generate_ffn2_pruning_config": 205, "consecut": [205, 207, 208, 719], "generate_mha_pruning_config": 205, "head": [205, 207, 211, 218, 227, 719, 734], "get_attribut": 207, "get_common_modul": 207, "layer2": [207, 680, 719, 722], "nearest": [207, 268, 309, 404, 602, 612, 725, 730], "print_iter": 207, "recipesearch": 207, "root": [207, 251, 252, 253, 256, 294, 295, 296, 299, 324, 377, 663, 668, 679, 680, 733], "levelwis": 207, "wai": [207, 252, 253, 256, 295, 296, 299, 616, 639, 644, 662, 663, 665, 679, 680, 683, 686, 701, 702, 706, 707, 708, 718, 719, 722, 725, 728, 731, 733], "bert": [207, 236, 247, 250, 251, 268, 290, 293, 294, 309, 641, 663, 666, 679, 681, 688, 711, 714, 715, 719, 730, 734], "recipe_sampl": 207, "bertattent": 207, "dens": [207, 225, 235, 236, 351, 703, 719, 734], "searching_result": 207, "jitbasicsearch": 207, "placeholder_shap": 207, "placeholder_dtyp": 207, "jit": [207, 235, 683, 685, 690, 728, 729], "script": [207, 317, 318, 321, 322, 370, 371, 374, 375, 605, 637, 668, 675, 683, 687, 690, 691, 694, 711, 713, 720], "static_graph": 207, "flatten_static_graph": 207, "target_lay": 207, "linear2linearsearch": 207, "target_op_lut": 207, "lookup": 207, "tabl": [207, 218, 632, 644, 665, 670, 703, 705, 734], "current_pattern": 207, "statu": [207, 629, 636, 662, 710, 713, 714, 715, 717, 719], "selfmhasearch": 207, "classifierheadsearch": 207, "classifi": [207, 227, 251, 294, 324, 377, 663, 666], "classifierheadsearchertf": 207, "squeezer": 208, "postcompressionutil": 208, "librari": [208, 272, 316, 369, 426, 634, 641, 676, 680, 681, 685, 694, 700, 720, 722], "relat": [208, 224, 310, 320, 339, 344, 347, 373, 450, 624, 644, 683, 707, 708, 719, 733], "linearcompress": 208, "root_linear": 208, "target_linear": 208, "while": [208, 219, 227, 349, 356, 436, 605, 642, 643, 663, 669, 675, 681, 683, 688, 700, 702, 719, 721, 722, 725, 728], "hidden": [208, 213, 347, 642], "layer_1": 208, "act_fn": 208, "layer_2": 208, "linearcompressioniter": 208, "linear_pattern": 208, "register_pattern": [209, 347], "basepattern": [209, 211, 213], "unit": [209, 347, 637, 708, 719], "4x1": [209, 235, 236, 343, 680, 719, 734], "is_glob": [209, 347], "local": [209, 235, 236, 347, 576, 605, 632, 661, 693, 697, 702, 709, 710, 719, 727], "keep_mask_lay": 209, "invalid_lay": 209, "max_sparsity_ratio_per_op": [209, 214, 232, 235, 236, 680, 719], "sparsiti": [209, 211, 212, 214, 215, 216, 219, 221, 222, 225, 227, 235, 236, 349, 351, 632, 641, 663, 675, 680, 732, 734], "min_sparsity_ratio_per_op": [209, 232, 235, 236, 680, 719], "target_spars": [209, 232, 235, 236, 680, 719, 721, 733], "pytorchbasepattern": [209, 224], "kerasbasepattern": 209, "get_pattern": [210, 347], "patternmha": 211, "doc": [211, 212, 235, 236, 347, 365, 366, 377, 432, 447, 448, 451, 576, 632, 679, 680, 695, 698, 706], "md": [211, 212, 235, 236, 347, 377, 432], "n": [211, 212, 235, 236, 252, 268, 295, 309, 318, 347, 371, 451, 644, 661, 663, 665, 666, 708, 719, 722, 728, 730], "pytorchpatternninm": 212, "out": [212, 235, 236, 251, 252, 253, 294, 295, 296, 315, 347, 352, 587, 637, 638, 641, 663, 683, 688, 693, 694, 695, 697, 698, 700, 706, 719, 721, 722, 725], "pytorchpatternnxm": 213, "kept": [213, 347], "block_siz": [213, 347, 612, 725], "height": [213, 264, 268, 306, 309, 347, 668, 730, 733], "width": [213, 264, 268, 306, 309, 347, 660, 668, 719, 722, 730, 733], "vertic": [213, 268, 309, 347, 730], "keraspatternnxm": 213, "register_prun": [214, 223, 349], "baseprun": [214, 219, 221, 223], "current_sparsity_ratio": [214, 349], "global_step": [214, 349], "start_step": [214, 232, 235, 236, 349, 680, 719, 721], "end_step": [214, 232, 235, 236, 349, 680, 719, 721], "pruning_frequ": [214, 232, 235, 236, 680, 719], "target_sparsity_ratio": [214, 349], "show": [214, 632, 636, 666, 668, 680, 686, 701, 702, 703, 705, 708, 713, 714, 715, 728, 731, 732], "pytorchbaseprun": [214, 222], "kerasbaseprun": 214, "pytorchbasicprun": 215, "arrang": [215, 216, 221, 222, 252, 253, 256, 295, 296, 299, 663, 719], "proce": [215, 216, 221, 222], "regul": [215, 216, 221, 222], "kerasbasicprun": 215, "pytorchblockmaskprun": 216, "grad": [216, 221], "parse_valid_pruner_typ": 217, "get_prun": [217, 349], "pythonmultiheadattentionprun": 218, "mha_modul": 218, "partial": [218, 719, 722], "qkv": 218, "feedward": 218, "simultan": [218, 683, 707, 718, 721], "qkv_name": 218, "query_layer_nam": 218, "key_layer_nam": 218, "value_layer_nam": 218, "ffn_name": 218, "attention_ffn_nam": 218, "mha_nam": 218, "qkv_modul": 218, "ffn_modul": 218, "mha_compress": 218, "mhacompress": 218, "linear_lay": 218, "independ": [218, 426, 431, 644], "4x": [218, 639, 722], "subsequ": [218, 643, 683, 700], "head_mask": 218, "mha_head_s": 218, "similar": [218, 232, 680, 704, 721, 728, 731, 733], "mha_scor": 218, "lock": [219, 337, 338, 675, 718, 719], "pytorchpatternlockprun": 219, "parent": [219, 220, 225, 343, 349, 351, 729], "pytorchprogressiveprun": 220, "basicprun": [220, 223], "interpol": [220, 268, 309, 679, 719, 730], "fine": [220, 251, 294, 661, 663, 686, 719, 720, 722], "grain": [220, 719, 720, 731], "improv": [220, 605, 637, 660, 661, 680, 683, 700, 701, 703, 719, 720, 722, 724, 725, 731, 732, 734], "ad": [220, 251, 294, 317, 356, 370, 396, 436, 643, 644, 665, 681, 683, 688, 691, 695, 698, 708, 719, 725, 729], "retrain": [221, 667], "pytorchretrainfreeprun": 221, "pruner_class": [221, 222], "fast": [221, 235, 236, 641, 719, 720, 725], "retrainfreeprun": [221, 223], "effect": [221, 641, 642, 719, 720], "2204": 221, "09656": 221, "sparsegptprun": [222, 223], "most": [222, 235, 236, 324, 377, 665, 680, 681, 719, 722, 725, 728, 731, 734], "sparsegpt": [222, 223, 719], "massiv": [222, 719], "One": [222, 644, 661, 663, 668, 675, 705, 719, 720, 731], "2301": [222, 719], "00774": [222, 719], "opt": [223, 641, 678, 688, 719, 728, 731, 734], "least": [223, 350, 637, 680, 719, 731], "templat": [223, 350, 680, 719], "tree": [223, 350, 366, 448, 708], "nlp": [223, 235, 236, 350, 688, 704, 719, 722], "huggingface_model": [223, 350, 704], "classif": [223, 251, 268, 294, 309, 324, 350, 377, 666, 670, 679, 689, 703, 711, 714, 715, 719, 720], "pytorch_prun": [223, 316, 369], "eager": [223, 350, 431, 668, 675, 722, 724, 729], "config_file_path": [223, 350], "pruner_info": [223, 350], "pruning_class": 223, "avail": [223, 235, 236, 382, 645, 647, 651, 654, 657, 661, 669, 671, 673, 675, 693, 697, 702, 707, 708, 709, 713, 714, 715, 719, 731, 734], "regular": [224, 317, 348, 370], "register_reg": 224, "regulariz": 224, "get_reg_typ": 224, "get_reg": 224, "basereg": 224, "grouplasso": 224, "coeff": 224, "lasso": [224, 334, 675, 719], "reg_term": 224, "register_schedul": [225, 351], "get_schedul": [225, 351], "pruningschedul": 225, "gradual": [225, 351, 719], "oneshotschedul": [225, 351], "iterativeschedul": [225, 351], "get_tf_criterion": 226, "get_sparsity_ratio": 227, "elementwise_over_matmul_gemm_conv": 227, "elementwise_over_al": 227, "blockwise_over_matmul_gemm_conv": 227, "get_sparsity_ratio_tf": 227, "check_config": [227, 348], "prune_config": [227, 348], "everyth": [227, 348, 688], "reset_none_to_default": 227, "update_param": 227, "process_weight_config": 227, "global_config": [227, 333, 334, 336, 337, 338], "local_config": [227, 235, 236, 333, 334, 336, 337, 338], "default_config": 227, "pruners_info": 227, "process_yaml_config": 227, "check_key_valid": 227, "template_config": 227, "user_config": 227, "process_and_check_config": [227, 348], "process_config": [227, 348], "parse_last_linear": 227, "often": [227, 662, 666, 705, 718, 719], "might": [227, 638, 661, 702, 731], "caus": [227, 643, 662, 684, 703, 705, 719, 725], "drop": [227, 320, 348, 373, 637, 680, 681, 694, 719, 725, 728, 734], "parse_last_linear_tf": 227, "parse_to_prun": [227, 348], "parse_to_prune_tf": 227, "generate_pruner_config": 227, "dotdict": [227, 232, 236, 388, 632], "get_lay": 227, "collect_layer_input": 227, "layer_idx": 227, "layer_input": 227, "previou": [227, 643, 644, 680, 719, 726, 728, 729, 731, 732, 734], "prune_wanda": 229, "use_vari": 229, "low_mem_usag": 229, "dsnot": 229, "sij": 229, "wij": 229, "xj": 229, "2306": [229, 725], "11695": 229, "recurs": [230, 632], "wrappedgpt": 231, "layer_id": 231, "gpt": [231, 641, 678, 704, 719, 728, 734], "prunerv2": 232, "pruning_typ": [232, 235, 236, 680, 719], "pruning_scop": [232, 235, 236, 680, 719], "sparsity_decay_typ": [232, 235, 236, 680, 719], "pruning_op_typ": [232, 235, 236, 680, 719], "reg_typ": 232, "criterion_reduce_typ": 232, "resume_from_pruned_checkpoint": 232, "cfg_fname": 232, "parser": 232, "quantization_conf": 232, "pruning_conf": 232, "graph_optimization_conf": [232, 315], "mixedprecision_conf": 232, "benchmark_conf": 232, "nasconfig": [232, 236, 328, 330, 639], "approach": [232, 235, 236, 327, 328, 330, 638, 639, 660, 663, 666, 675, 680, 688, 700, 703, 711, 713, 714, 715, 719, 720, 721, 723, 725, 731, 733], "search_algorithm": [232, 236, 316, 329, 369, 639], "na": [232, 236, 316, 369, 382, 675, 734], "procedur": [232, 639, 719, 731], "deep_get": [233, 388, 576], "dot": [233, 576, 681, 722], "person": [233, 576, 636, 720], "john": [233, 576], "deep_set": [233, 388], "sex": [233, 636], "male": 233, "notat": [233, 236, 632], "pythonic_config": 234, "random_se": [235, 236, 356, 436, 680, 733], "1978": [235, 236], "default_workspac": [235, 236], "directori": [235, 236, 252, 253, 295, 296, 386, 574, 576, 627, 629, 631, 632, 663, 668, 671, 693, 695, 697, 698, 704, 706, 729], "histori": [235, 236, 631, 632, 700, 704, 731], "nc_workspac": [235, 236, 703, 704], "datetim": [235, 236], "now": [235, 236, 268, 309, 638, 639, 644, 663, 668, 691, 721, 730, 731], "strftime": [235, 236], "d_": [235, 236], "resum": [235, 236, 239, 240, 282, 283, 357, 360, 361, 362, 433, 436, 437, 438, 439, 441, 442, 443, 444], "flag": [235, 236, 318, 371, 665], "visual": [235, 236, 641, 691, 700, 727, 729, 731, 732], "displai": [235, 236, 365, 366, 447, 448, 576, 632, 700, 703], "2022": [235, 236, 641, 677, 719, 725, 728, 734], "workspace_path": [235, 236], "accuracycriterion": [235, 236, 680, 731], "accuracy_criterion": [235, 236, 388, 680, 704, 717, 721, 731, 733], "warmup": [235, 236, 659, 680, 721], "inter_num_of_thread": [235, 236, 426, 431, 680, 721], "intra_num_of_thread": [235, 236, 426, 431, 680, 721], "benchmark": [235, 236, 271, 316, 353, 369, 388, 632, 641, 649, 682, 683, 687, 691, 694, 700, 703, 731, 732, 733, 734], "onnxrt_trt_ep": [235, 236, 681, 722], "onnxrt_cuda_ep": [235, 236, 681, 722], "inter": [235, 236], "intra": [235, 236], "quantizationconfig": 235, "post_training_static_qu": [235, 663, 680, 721, 731], "calibration_sampling_s": [235, 236, 680, 705], "op_type_dict": [235, 236, 644, 721, 722, 725, 731], "op_name_dict": [235, 236, 665, 680, 703, 705, 722, 731], "strategy_kwarg": [235, 236, 727, 731], "quant_level": [235, 236, 703, 725, 728, 731], "posttrainingquantconfig": [235, 236, 432, 638, 641, 644, 662, 665, 670, 673, 679, 680, 682, 702, 703, 704, 705, 722, 723, 724, 725, 727, 728, 731], "quantizationawaretrainingconfig": [235, 236, 621, 638, 667, 670, 680, 722, 724, 731], "cv": [235, 236, 719], "object_detect": [235, 236, 320, 373], "recommendation_system": [235, 236], "overrid": [235, 236, 632, 661], "quantiztaion": [235, 236], "smooth_quant_arg": [235, 236, 722, 728], "gemm_to_matmul": [235, 236, 722], "graph_optimization_level": [235, 236, 721, 722], "disable_al": [235, 236, 721], "enable_bas": [235, 236], "enable_extend": [235, 236], "enable_al": [235, 236], "first_conv_or_matmul_quant": [235, 236, 722], "last_conv_or_matmul_quant": [235, 236, 722], "pre_post_process_quant": [235, 236, 722], "postprocess": [235, 236, 262, 265, 268, 272, 309, 316, 369, 377, 432, 624, 642, 680, 729, 730], "dedic": [235, 236], "quant_format": [235, 236, 314, 670, 703], "constraint": [235, 236, 315, 352, 680, 719, 727, 731, 733], "conv1": [235, 236, 722, 733], "tuning_strategi": [235, 236], "guarante": [235, 236, 680], "models": [235, 236, 388, 680, 717, 721], "footprint": [235, 236, 315, 339, 344, 352, 388, 667, 680, 717, 719, 721, 723], "earli": [235, 236, 680, 722, 731, 733], "stop": [235, 236, 680, 731, 732, 733], "excluded_precis": [235, 236, 724], "exclud": [235, 236, 642, 660, 724], "conserv": [235, 236, 369, 440], "use_distributed_tun": 235, "weightpruningconfig": [235, 236, 680, 718, 719], "pruning_config": [235, 236, 680, 719], "exp": [235, 236, 680, 719], "link": [235, 236, 251, 294, 377, 403, 432, 660, 663, 670, 693, 697, 700, 725, 734], "90": [235, 236, 723, 733, 734], "magnitude_progress": [235, 236], "snip_progress": [235, 236], "snip_momentum_progress": [235, 236], "feasibl": [235, 236], "situat": [235, 236, 668, 719], "unstructur": [235, 236, 343, 675, 719, 734], "8x1": [235, 236], "channelx1": [235, 236, 719], "1xchannel": [235, 236, 719], "itrex": [235, 236, 728], "start": [235, 236, 268, 309, 320, 373, 437, 676, 705, 720, 730, 731, 732, 735], "togeth": [235, 236, 268, 309, 666, 676, 687, 720, 729, 730], "sort": [235, 236, 359, 396, 441, 665, 703, 725, 731], "sinc": [235, 236, 315, 317, 339, 344, 352, 370, 666, 670, 676, 679, 694, 700, 705, 718, 725, 726], "lead": [235, 236, 661, 666, 680, 681, 705, 719, 725, 728], "increas": [235, 236, 396, 664, 675, 683, 700, 705, 725, 731], "cube": [235, 236, 719], "update_config": [235, 236], "knowledgedistillationlossconfig": [235, 236, 666, 667, 680, 718], "hyperparamet": [235, 236, 365, 727, 728, 731], "entropi": [235, 236, 660, 731], "groundtruth": [235, 236, 320, 373], "label": [235, 236, 239, 240, 251, 253, 254, 255, 256, 259, 264, 268, 273, 282, 283, 294, 296, 297, 298, 299, 302, 306, 309, 317, 319, 324, 370, 372, 377, 378, 432, 571, 621, 638, 662, 663, 665, 679, 680, 722, 730], "sum": [235, 236, 324, 377, 665, 666], "distillationconfig": [235, 236, 621, 666, 667, 680, 718], "prepare_compress": [235, 236, 621, 638, 666, 667, 680, 718, 719, 722], "criterion_conf": [235, 236], "d_conf": [235, 236, 667, 680, 718], "compression_manag": [235, 236, 621, 638, 666, 667, 680, 718, 719, 722], "distil_loss": [235, 236, 680], "ni_workload_nam": 236, "onnxrt_dnnl_ep": [236, 681, 722], "onnxrt_dml_ep": [236, 722], "tuningcriterion": [236, 680, 717, 727, 731], "tuning_criterion": [236, 680, 717, 727, 731], "npu": [236, 722], "xpu": [236, 605, 691, 722], "ptq": [236, 432, 638, 665, 668, 675, 680, 705, 722, 728, 729, 731], "meet": [236, 242, 353, 355, 433, 435, 638, 643, 717, 720, 721, 722, 725, 729, 731], "mse_v2": [236, 316, 358, 369, 440], "hawq_v2": [236, 369, 440], "docstr": [236, 451], "workload": [236, 629, 632, 702, 720], "insight": [236, 629, 641, 665, 720, 726, 731, 732], "copi": [236, 348, 632, 661, 662, 706], "deepcopi": [236, 661], "model_origin": [236, 432, 724], "qat_op_name_dict": 236, "low_memory_usag": 236, "hpoconfig": 236, "xgb": 236, "bo": 236, "intermediatelayersknowledgedistillationlossconfig": [236, 666], "relationship": [236, 702], "student_layer_nam": 236, "student_layer_output_process": 236, "teacher_layer_nam": 236, "teacher_layer_output_process": 236, "desir": [236, 264, 268, 306, 309, 643, 644, 719, 728, 730], "serv": [236, 386, 574, 605, 708, 713, 714, 715], "numer": [236, 324, 377, 396, 644, 681, 720, 722, 725], "abbrevi": 236, "l1": 236, "selfknowledgedistillationlossconfig": [236, 666, 680], "student1_layer_name1": 236, "teacher_layer_name1": 236, "student2_layer_name1": 236, "student1_layer_name2": 236, "teacher_layer_name2": 236, "student2_layer_name2": 236, "soft": 236, "hard": [236, 662, 665], "resblock": 236, "deepst": 236, "02": [236, 734], "mixedprecisionconfig": [236, 378, 451, 680, 681], "mixedprecis": [236, 325, 680], "won": [236, 722, 725], "work": [236, 315, 352, 605, 640, 643, 661, 662, 666, 695, 698, 706, 724, 725, 726, 728, 729], "mix_precis": [236, 369, 451, 680, 681], "converted_model": [236, 378, 680, 681], "exportconfig": 236, "14": [236, 313, 314, 670, 676, 715, 734], "dynamic_ax": [236, 314, 670], "qlinear": [236, 253, 260, 296, 303, 324, 377, 642, 690], "ax": [236, 314], "onnxqlinear2qdqconfig": 236, "onnxqlinear2qdq": 236, "torch2onnxconfig": [236, 670], "torch2onnx": [236, 311, 316, 369], "qdq_op_fp32_bia": 236, "qdq_op_int32_bia": 236, "qdq_op_fp32_bias_qdq": 236, "resnet50": [236, 641, 665, 668, 670, 681, 683, 687, 719, 722, 727, 734], "int8_onnx_config": [236, 670], "randn": [236, 670], "224": [236, 264, 306, 641, 663, 668, 670, 673, 680, 683, 702, 730, 733], "batch_siz": [236, 241, 243, 248, 249, 250, 251, 252, 271, 284, 286, 291, 292, 293, 294, 295, 314, 571, 639, 662, 663, 668, 670, 674, 680, 683, 722], "tf2onnxconfig": [236, 670], "tf2onnx": [236, 311, 316, 369], "output_graph": 236, "dyna": [236, 316, 329, 369, 639, 675, 721], "sigopt": [237, 238, 280, 281, 316, 369, 720], "tpe": [237, 238, 280, 281, 316, 369], "sigopttunestrategi": [239, 282], "q_dataload": [239, 240, 282, 283, 356, 357, 359, 360, 361, 362, 433, 436, 437, 438, 439, 441, 442, 443, 444, 674, 731], "eval_metr": [239, 240, 378, 432, 433, 436, 437, 438, 439, 441, 442, 443, 444, 621, 679, 702, 722], "q_hook": [239, 240, 282, 283, 356, 357, 359, 360, 361, 362, 433, 436, 437, 438, 439, 441, 442, 443, 444], "yield": [239, 240, 249, 271, 282, 283, 292, 356, 378, 432, 436, 451, 621, 662, 722, 731], "well": [239, 240, 282, 283, 378, 432, 621, 639, 641, 661, 663, 719, 722, 726, 728, 733], "taken": [239, 240, 282, 283, 378, 432, 621, 722], "reserv": [239, 240, 282, 283], "abl": [239, 240, 282, 283, 378, 432, 621, 691, 700, 722], "tuner": [239, 240, 282, 283, 315, 352, 378, 432, 621, 722], "scalar": [239, 240, 282, 283, 378, 432, 621, 679, 722, 731], "pseudo": [239, 240, 282, 283, 432, 621, 725, 729], "someth": [239, 240, 253, 282, 283, 296, 432, 621], "fefin": [240, 283], "tpetunestrategi": [240, 283], "basedatalod": [241, 284, 571], "basedataload": [241, 246, 248, 284, 289, 291, 571], "last_batch": [241, 243, 248, 250, 271, 284, 286, 291, 293, 571, 662], "rollov": [241, 243, 248, 250, 271, 284, 286, 291, 293, 571, 662], "collate_fn": [241, 243, 244, 248, 250, 271, 284, 286, 287, 291, 293, 571, 662, 663], "batch_sampl": [241, 243, 248, 250, 271, 284, 286, 291, 293, 571, 662], "num_work": [241, 243, 248, 250, 271, 284, 286, 291, 293, 571, 662, 680, 722], "pin_memori": [241, 243, 248, 250, 271, 284, 286, 291, 293, 571, 662], "_generate_dataload": [241, 284, 571], "check_dataload": 242, "default_col": [243, 286], "outer": [243, 286], "defaultdataload": [243, 250, 286, 293], "style": [244, 258, 287, 301, 451, 661, 663, 674], "drop_last": [244, 249, 287, 292], "iterablefetch": [244, 287], "indexfetch": [244, 287], "base_dataload": [245, 288, 305, 316], "default_dataload": [245, 288, 305, 316], "fetcher": [245, 288, 305, 316], "mxnet_dataload": [245, 288, 305, 316], "onnxrt_dataload": [245, 288, 305, 316, 425], "pytorch_dataload": [245, 288, 305, 316], "tensorflow_dataload": [245, 288, 305, 316, 430], "mxnetdataload": [246, 289], "onnxrtbertdataload": [247, 290], "variant": [247, 290], "onnxrtdataload": [247, 290, 425], "pytorchdataload": [248, 291], "data_sourc": [249, 292, 624], "__iter__": [249, 253, 292, 296, 662, 663, 680], "matter": [249, 292, 724], "iterablesampl": [249, 292], "squential": [249, 292], "your": [249, 251, 292, 294, 605, 637, 661, 662, 663, 665, 668, 677, 680, 683, 686, 687, 688, 693, 694, 695, 697, 698, 700, 702, 706, 708, 713, 714, 715, 719, 720, 727, 729, 731, 732], "clear": [249, 292, 642, 672, 679, 680], "iterabledataset": [249, 253, 292, 296], "try": [249, 292, 638, 665, 703, 719, 722, 728, 731], "indexdataset": [249, 292], "__getitem__": [249, 253, 268, 292, 296, 309, 662, 663, 680], "__len__": [249, 253, 292, 296, 663], "batchsampl": [249, 292], "tfdatadataload": [250, 293], "tensorflow1": [250, 293], "coupl": [250, 293], "satisfi": [250, 293, 665, 676, 706], "tf1": [250, 293, 682], "although": [250, 293, 727], "tensorflowbertdataload": [250, 293], "tensorflowmodelzoobertdataload": [250, 293], "zoo": [250, 268, 293, 309, 641, 669, 673, 734], "tensorflowdataload": [250, 293, 430], "pytorchbertdataset": [251, 294], "model_typ": [251, 294, 632, 663], "tensordataset": [251, 294, 663], "repo": [251, 294, 635, 637, 663, 669, 693, 695, 697, 698, 735], "easi": [251, 294, 352, 670, 680, 703, 707, 720, 722, 725, 727], "squad": [251, 268, 294, 309, 321, 322, 324, 374, 375, 377, 663, 679, 719, 730, 734], "distilbert": [251, 294, 641, 663, 681, 720, 734], "xlnet": [251, 294, 663, 734], "xlm": [251, 294, 663, 734], "101": [251, 294, 324, 377, 679, 709, 728, 734], "2043": [251, 294], "2001": [251, 294], "onnxrtbertdataset": [251, 294], "data_dir": [251, 294, 663], "model_name_or_path": [251, 294, 663, 680, 688, 689, 704, 711, 714, 715, 723], "max_seq_length": [251, 268, 294, 309, 590, 663, 730], "do_lower_cas": [251, 267, 268, 294, 308, 309, 663, 730], "mrpc": [251, 294, 324, 377, 663, 679, 688, 711, 714, 715, 719, 731, 734], "dynamic_length": [251, 294, 663], "shortcut": [251, 294, 663], "longer": [251, 268, 294, 309, 663, 730], "shorter": [251, 268, 294, 309, 663, 730], "lowercas": [251, 294, 663], "choic": [251, 294, 642, 663, 679, 706, 728], "qqp": [251, 294, 663, 679, 734], "qnli": [251, 294, 663, 679, 734], "rte": [251, 294, 663, 679, 734], "st": [251, 294, 663, 679], "cola": [251, 294, 663, 679, 734], "mnli": [251, 294, 663, 679, 734], "wnli": [251, 294, 663, 679], "mobilebert": [251, 294, 663, 666, 734], "roberta": [251, 294, 663, 734], "uncas": [251, 268, 294, 309, 663, 730, 734], "load_and_cache_exampl": [251, 294], "convert_examples_to_featur": [251, 268, 294, 309], "max_length": [251, 294], "label_list": [251, 294, 324, 377], "output_mod": [251, 294], "pad_token": [251, 294], "pad_token_segment_id": [251, 294], "mask_padding_with_zero": [251, 294], "inputfeatur": [251, 268, 294, 309], "properti": [251, 294, 450, 677], "vocabulari": [251, 267, 268, 294, 308, 309, 730], "attention_mask": [251, 294, 680], "usual": [251, 294, 643, 665, 666, 705, 718, 719, 722, 723, 728], "NOT": [251, 294, 672], "token_type_id": [251, 294, 680], "segment": [251, 294, 318, 320, 371, 373, 637], "portion": [251, 294], "regress": [251, 294, 637, 665], "seq_length": [251, 294], "tensorflowbertdataset": [251, 294], "label_fil": [251, 268, 294, 309, 663, 730], "tfrecord": [251, 252, 253, 294, 295, 296, 663], "guid": [251, 294, 638, 641, 661, 663, 666, 676, 683, 691, 700, 735], "parsedecodebert": [251, 294], "tensorflowmodelzoobertdataset": [251, 252, 294, 295], "num_cor": [251, 252, 256, 294, 295, 299, 663], "28": [251, 252, 256, 294, 295, 299, 663, 734], "coco": [252, 259, 263, 295, 302, 320, 324, 373, 377, 679, 719], "parsedecodecoco": [252, 295], "cocorecorddataset": [252, 295], "interleav": [252, 295, 663], "parallel": [252, 295, 426, 431, 605, 663, 680, 707, 710, 731], "cocoraw": [252, 295, 663], "img_dir": [252, 295, 663], "val2017": [252, 295, 663], "anno_dir": [252, 295, 663], "annot": [252, 295, 320, 373, 451, 643, 644, 663, 679, 719, 731], "instances_val2017": [252, 295, 663], "jpg": [252, 256, 258, 295, 299, 301, 641, 663], "imag": [252, 253, 256, 258, 264, 268, 295, 296, 299, 301, 306, 309, 320, 373, 663, 668, 670, 719, 721, 728, 729, 730, 734], "coconpi": [252, 295, 663], "npy_dir": [252, 295, 663], "npy": [252, 295, 663], "tensorflowdataset": [253, 296], "pytorchdataset": [253, 296], "mxnetdataset": [253, 296], "onnxrtqldataset": [253, 296], "onnxrtitdataset": [253, 296], "IT": [253, 260, 296, 303, 720], "pytorchmxnetwrapdataset": [253, 296], "datafunc": [253, 296], "pytorchmxnetwrapfunct": [253, 268, 296, 309], "framework_dataset": [253, 296], "convent": [253, 296, 320, 373, 637, 666], "imageclassifi": [253, 296], "tensorflow_itex": [253, 256, 258, 260, 296, 299, 301, 303, 662, 721], "onnxrt_qdq": [253, 260, 296, 303, 721], "onnxrt_qlinearop": [253, 260, 268, 296, 303, 309, 721], "onnxrt_integerop": [253, 260, 268, 296, 303, 309, 721], "pytorch_ipex": [253, 260, 296, 303, 680, 721, 733], "pytorch_fx": [253, 260, 296, 303, 680, 721], "dataset_registri": [253, 296], "dataset_typ": [253, 296], "dataset_format": [253, 296], "data_format": [253, 264, 296, 306], "raw_imag": [253, 296], "overwrit": [253, 296, 693, 697], "download_url": [253, 296], "filenam": [253, 296, 576, 632, 663, 706], "md5": [253, 296], "address": [253, 296, 636, 661, 681, 702, 705, 708, 720], "gen_bar_updat": [253, 296], "check_integr": [253, 296], "fpath": [253, 296], "checksum": [253, 296], "calculate_md5": [253, 296], "chunk_siz": [253, 296], "cifar10": [253, 296, 663], "cifar100": [253, 296, 663], "databas": [253, 296, 708], "www": [253, 296, 663, 734], "toronto": [253, 296, 663], "kriz": [253, 296, 663], "cifar": [253, 296, 663, 734], "tar": [253, 296, 663, 665, 695, 698], "gz": [253, 296, 663, 665, 695, 698], "manual": [253, 296, 663, 683, 689, 691, 694, 708, 713, 714, 715, 719], "subset": [253, 256, 296, 299, 663, 705], "internet": [253, 296, 663, 702], "again": [253, 296, 663, 703, 705, 724], "pytorchcifar10": [253, 296], "mxnetcifar10": [253, 296], "tensorflowcifar10": [253, 296], "pytorchcifar100": [253, 296], "mxnetcifar100": [253, 296], "tensorflowcifar100": [253, 296], "mnist": [253, 296, 663, 668], "nation": [253, 296, 636], "institut": [253, 296], "standard": [253, 268, 296, 309, 616, 637, 643, 661, 665, 670, 679, 730, 731], "technologi": [253, 296, 678, 680], "fashionmnist": [253, 296, 663], "npz": [253, 296, 663], "idx1": [253, 296, 663], "ubyt": [253, 296, 663], "idx3": [253, 296, 663], "t10k": [253, 296, 663], "pytorchmnist": [253, 296], "mxnetmnist": [253, 296], "tensorflowmnist": [253, 296], "pytorchfashionmnist": [253, 296], "mxnetfashionmnist": [253, 296], "tensorflowfashionmnist": [253, 296], "imagefold": [253, 296, 663, 668, 680], "expect": [253, 296, 636, 637, 671, 678, 700, 722, 725, 731], "subfold": [253, 296, 703], "belong": [253, 296, 382, 722], "class_1": [253, 296, 663], "xxx": [253, 296, 663, 680], "png": [253, 296, 663], "xxy": [253, 296, 663], "xxz": [253, 296, 663], "class_n": [253, 296, 663], "123": [253, 296, 663, 730], "nsdf3": [253, 296, 663], "asd932_": [253, 296, 663], "categori": [253, 296, 319, 372, 659, 663, 690], "mxnetimagefold": [253, 296], "tensorflowtfrecorddataset": [253, 296], "tensorflowimagerecord": [253, 296], "imagenet": [253, 256, 264, 296, 299, 306, 639, 665, 680, 689, 705, 719, 729, 730, 733, 734], "000": [253, 296, 641, 663], "099": [253, 296, 663], "tensorflowvocrecord": [253, 296], "pascal": [253, 296], "voc": [253, 296, 324, 377], "2012": [253, 296], "00000": [253, 296], "00004": [253, 296], "00001": [253, 296], "00003": [253, 296], "dummydataset": [254, 255, 297, 298, 571], "127": [254, 255, 297, 298, 571, 663, 722, 728, 734], "stand_norm": [254, 255, 297, 298, 571, 663], "dummy_v2": [255, 298, 571, 663], "sparse_dummy_v2": [255, 298, 663], "label_shap": [255, 298, 571, 663], "sparsedummydataset": [255, 298], "dense_shap": [255, 298, 663], "sparse_ratio": [255, 298, 663], "imagenetraw": [256, 299, 663], "data_path": [256, 299, 663], "image_list": [256, 299, 663], "img1": [256, 299, 663], "img2": [256, 299, 663], "imgx": [256, 299, 663], "val_map": [256, 299, 663], "txt": [256, 299, 663, 665, 676, 702, 704, 705, 707, 708], "pytorchimagenetraw": [256, 299], "mxnetimagenetraw": [256, 299], "tensorflowimagenetraw": [256, 299], "inteltensorflow": [256, 258, 299, 301, 676], "tensorflowimagenetdataset": [256, 299], "onnxrtimagenetdataset": [256, 299], "bert_dataset": [257, 262, 300, 305, 316, 369], "coco_dataset": [257, 262, 300, 305, 316, 369], "dummy_dataset": [257, 262, 300, 305, 316, 369], "dummy_dataset_v2": [257, 262, 300, 305, 316, 369], "imagenet_dataset": [257, 262, 300, 305, 316, 369], "style_transfer_dataset": [257, 262, 300, 305, 316, 369], "styletransferdataset": [258, 301], "content_fold": [258, 301, 663], "style_fold": [258, 301, 663], "crop_ratio": [258, 301, 663], "resize_shap": [258, 301, 663], "image_format": [258, 301, 663], "holder": [258, 301, 663], "labelbalancecocorecordfilt": [259, 302], "balanc": [259, 302, 725, 728], "labelbalancecocorawfilt": [259, 302], "tensorflowfilt": [260, 303], "onnxrtqlfilt": [260, 303], "onnxrtitfilt": [260, 303], "pytorchfilt": [260, 303], "mxnetfilt": [260, 303], "filter_registri": [260, 303], "filter_typ": [260, 303], "__call__": [260, 303], "coco_filt": [261, 262, 304, 305, 316, 369], "imagenet_transform": [262, 265, 305, 307, 316, 369], "parsedecodecocotransform": 263, "quantizedinput": [264, 306, 730], "labelshift": [264, 306, 730], "label_shift": [264, 306, 730], "parsedecodeimagenet": [264, 306, 730], "proto": [264, 268, 306, 309, 730], "parsedecodeimagenettransform": [264, 306], "tensorflowtransposelastchannel": 264, "tensorflowshiftrescal": 264, "rescal": [264, 268, 309, 730], "tensorflowresizecropimagenettransform": [264, 306], "random_crop": [264, 306, 730], "resize_sid": [264, 306, 730], "resize_method": [264, 306], "bilinear": [264, 268, 306, 309, 730], "random_flip_left_right": [264, 306, 730], "mean_valu": [264, 306, 730], "channels_last": [264, 306, 683], "subpixel": [264, 306], "rgb": [264, 306], "seri": [264, 306, 641, 676, 680, 730], "applic": [264, 306, 644, 670, 683, 700, 702, 708, 709, 713, 714, 720, 725, 728, 729, 730, 732], "crop": [264, 268, 306, 309, 663, 730], "left": [264, 268, 306, 309, 694, 700, 728, 730], "std": [264, 268, 306, 309, 680, 730], "bilinearimagenettransform": [264, 306], "central_fract": [264, 306, 730], "875": [264, 306, 730], "fraction": [264, 306, 730], "onnxbilinearimagenettransform": [264, 306], "onnxresizecropimagenettransform": [264, 306], "std_valu": [264, 306], "229": [264, 306, 680], "225": [264, 306, 680], "resizewithaspectratio": [264, 306], "87": [264, 306, 734], "inter_pol": [264, 306], "cv2": [264, 306], "inter_area": [264, 306], "aspect": [264, 268, 306, 309, 730], "postprocess_cl": [266, 276, 680], "user_postprocess": [266, 276], "convert_to_unicod": [267, 308], "unicod": [267, 308], "assum": [267, 308, 320, 331, 373, 642, 672, 700], "load_vocab": [267, 308], "vocab_fil": [267, 268, 308, 309, 730], "convert_by_vocab": [267, 308], "vocab": [267, 308], "whitespace_token": [267, 308], "whitespac": [267, 308, 322, 375], "clean": [267, 308, 680], "piec": [267, 308, 317, 370, 679, 725], "fulltoken": [267, 308], "tokenzi": [267, 308], "basictoken": [267, 308], "punctuat": [267, 308, 317, 322, 370, 375], "lower": [267, 268, 308, 309, 322, 375, 437, 667, 719, 720, 722, 728, 730, 731], "wordpiecetoken": [267, 308], "unk_token": [267, 308], "unk": [267, 308], "max_input_chars_per_word": [267, 308], "wordpiec": [267, 268, 308, 309, 730], "concat_gener": [268, 309], "inc": [268, 309, 476, 636, 643, 683, 690, 700, 702, 707, 720, 721, 726, 731], "tensorflowtransform": [268, 309], "mxnettransform": [268, 309], "pytorchtransform": [268, 309], "onnxrtqltransform": [268, 309], "onnxrtittransform": [268, 309], "transform_registri": [268, 309], "transform_typ": [268, 309], "basetransform": [268, 309], "tensorflowwrapfunct": [268, 309], "transform_func": [268, 309], "pytorchmxnettransform": [268, 309], "get_torchvision_map": [268, 309], "torchvis": [268, 309, 669, 673, 683, 689, 703], "composetransform": [268, 309], "transform_list": [268, 309, 730], "compos": [268, 309, 624, 730], "croptoboundingbox": [268, 309, 730], "offset_height": [268, 309, 730], "offset_width": [268, 309, 730], "target_height": [268, 309, 730], "target_width": [268, 309, 730], "box": [268, 309, 320, 324, 373, 377, 638, 679, 683, 694, 700, 729, 730, 731], "coordin": [268, 309, 356, 436, 707, 730, 731], "top": [268, 309, 315, 324, 339, 344, 352, 377, 637, 679, 700, 703, 705, 730], "corner": [268, 309, 637, 642, 644, 730], "horizont": [268, 309, 730], "mxnetcroptoboundingbox": [268, 309], "onnxrtcroptoboundingbox": [268, 309], "tensorflowcroptoboundingbox": [268, 309], "resizewithratio": [268, 309, 730], "min_dim": [268, 309, 730], "800": [268, 309, 730], "max_dim": [268, 309, 730], "1365": [268, 309, 730], "constant_valu": [268, 309], "longest": [268, 309, 730], "side": [268, 309, 663, 694, 730], "exce": [268, 309, 725, 730], "tensorflowresizewithratio": [268, 309], "permut": [268, 309, 730], "tensorflowtranspos": [268, 309], "mxnettranspos": [268, 309], "pytorchtranspos": [268, 309], "randomverticalflip": [268, 309, 730], "tensorflowrandomverticalflip": [268, 309], "randomhorizontalflip": [268, 309, 680, 730], "tensorflowrandomhorizontalflip": [268, 309], "toarrai": [268, 309, 730], "pil": [268, 309, 730], "casttftransform": [268, 309], "castonnxtransform": [268, 309], "castpytorchtransform": [268, 309], "centercroptftransform": [268, 309], "center": [268, 309, 640, 641, 676, 730, 731], "paddedcentercroptransform": [268, 309], "crop_pad": [268, 309], "resizetftransform": [268, 309], "bicub": [268, 309, 730], "resizepytorchtransform": [268, 309], "randomcroptftransform": [268, 309], "randomresizedcroppytorchtransform": [268, 309], "08": [268, 309, 730, 734], "randomresizedcropmxnettransform": [268, 309], "randomresizedcroptftransform": [268, 309], "normalizetftransform": [268, 309], "deviat": [268, 309, 665, 730], "broadcast": [268, 309, 668, 730], "rescalekeraspretraintransform": [268, 309], "rescaletftransform": [268, 309], "rescaletransform": [268, 309], "alignimagechanneltransform": [268, 309], "must": [268, 309, 320, 373, 605, 637, 638, 643, 659, 662, 676, 722, 730], "pytorchalignimagechannel": [268, 309], "tondarraytransform": [268, 309], "resizemxnettransform": [268, 309], "resizetransform": [268, 309], "cropresizetftransform": [268, 309], "boundari": [268, 309, 730], "area": [268, 309, 320, 373, 679, 730], "pytorchcropresizetransform": [268, 309], "mxnetcropresizetransform": [268, 309], "cropresizetransform": [268, 309], "centercroptransform": [268, 309], "mxnetnormalizetransform": [268, 309], "pytorchnormalizetransform": [268, 309], "normalizetransform": [268, 309], "randomcroptransform": [268, 309], "randomresizedcroptransform": [268, 309], "get_final_text": [268, 309], "pred_text": [268, 309], "orig_text": [268, 309], "project": [268, 309, 635, 636, 637, 706, 720, 727, 731, 735], "squadexampl": [268, 309], "qas_id": [268, 309], "question_text": [268, 309], "doc_token": [268, 309], "orig_answer_text": [268, 309], "start_posit": [268, 309], "end_posit": [268, 309], "is_imposs": [268, 309], "answer": [268, 309, 321, 322, 374, 375, 636, 705, 719, 730, 734], "unique_id": [268, 309], "example_index": [268, 309], "doc_span_index": [268, 309], "token_to_orig_map": [268, 309], "token_is_max_context": [268, 309], "input_mask": [268, 309, 680], "segment_id": [268, 309, 680], "read_squad_exampl": [268, 309], "input_fil": [268, 309], "doc_strid": [268, 309, 730], "max_query_length": [268, 309, 730], "output_fn": [268, 309], "inputbatch": [268, 309], "collecttransform": [268, 309], "10833": [268, 309], "tfsquadv1posttransform": [268, 309], "n_best_siz": [268, 309, 730], "384": [268, 309, 730], "64": [268, 309, 639, 725, 728, 730, 734], "max_answer_length": [268, 309, 730], "30": [268, 309, 669, 673, 675, 730, 734], "nbest_predict": [268, 309, 730], "question": [268, 309, 321, 322, 374, 375, 636, 637, 641, 642, 676, 683, 707, 719, 728, 730, 734], "anoth": [268, 309, 317, 326, 370, 632, 665, 666, 693, 697, 730, 731], "long": [268, 309, 661, 671, 725, 730], "document": [268, 309, 451, 643, 644, 649, 668, 678, 681, 685, 695, 698, 699, 706, 707, 709, 719, 726, 730, 732], "chunk": [268, 309, 730], "tfmodelzoocollecttransform": [268, 309], "tfsquadv1modelzooposttransform": [268, 309], "squadv1": [268, 309, 730], "parsedecodevoctransform": [268, 309], "conf_fname_or_obj": [269, 278, 310, 315, 325, 326, 327, 328, 330, 339, 344, 352], "unnecessari": [269, 680], "setter": 271, "calib_dataload": [271, 353, 432, 455, 472, 473, 476, 638, 641, 662, 663, 665, 673, 674, 679, 680, 702, 703, 722, 723, 724, 725], "reason": [271, 636, 643, 662, 705, 725, 729, 731], "know": [271, 661, 668, 726], "metric_cl": [273, 377, 432, 680], "user_metr": [273, 377, 432], "recommend": [273, 377, 605, 642, 663, 672, 691, 694, 699, 701, 719, 721, 731], "set_backend": 274, "tensorflowimagefold": 296, "qlinear2qdq": [311, 316, 369], "qlinearop": [312, 665, 675, 691, 722, 734], "check_model": 312, "onnx_qlinear_to_qdq": 312, "input_name_to_nod": 312, "tf_to_fp32_onnx": 313, "tf_to_int8_onnx": 313, "int8_model": [313, 314, 642], "get_node_map": 314, "fp32_onnx_path": 314, "module_node_map": 314, "get_quantizable_onnx_op": 314, "quantize_nod": 314, "dynamic_quant_export": 314, "pt_fp32_model": 314, "pt_int8_model": 314, "weight_typ": 314, "s8": 314, "static_quant_export": 314, "_quantiz": [314, 399], "torch_to_fp32_onnx": 314, "do_constant_fold": 314, "torch_to_int8_onnx": 314, "across": [315, 325, 352, 378, 664, 680, 707, 710, 719, 723, 728, 731], "variou": [315, 325, 352, 378, 644, 675, 683, 710, 719, 721, 723], "dl": [315, 325, 339, 344, 352, 378, 665, 674, 687, 700, 720, 734], "bring": [315, 352, 694, 707, 728], "vari": [315, 339, 344, 352, 705, 719, 728, 734], "roc": [315, 324, 339, 344, 352, 377], "flexibl": [315, 339, 344, 352, 641, 666, 707, 719, 725], "techniqu": [316, 369, 634, 641, 675, 680, 683, 702, 718, 719, 720, 721, 722, 732, 733, 734], "bleu": [316, 318, 323, 369, 371, 376, 679, 719], "bleu_util": [316, 323, 369, 376], "coco_label_map": [316, 323, 369, 376], "coco_tool": [316, 323, 369, 376], "evaluate_squad": [316, 323, 369, 376], "f1": [316, 321, 323, 324, 369, 374, 376, 377, 668, 679, 680, 703, 727, 734], "basic_na": [316, 329, 369], "nas_util": [316, 329, 369], "pruner_legaci": [316, 369], "gradient_sensit": [316, 335, 369], "group_lasso": [316, 335, 369], "pruning_recip": [316, 369], "tile_pattern": [316, 340, 341], "prune_util": [316, 345, 369], "tuning_sampl": [316, 358, 364, 369, 440, 446], "tuning_spac": [316, 358, 364, 365, 367, 369, 440, 446, 447, 449], "tuning_struct": [316, 358, 364, 365, 366, 369, 440, 446, 447, 448], "auto_mixed_precis": [316, 358, 369, 440], "graph_optim": [316, 369], "mixed_precis": [316, 369, 378, 680], "model_convers": [316, 369], "pruning_v2": [316, 369], "unicoderegex": [317, 370], "hoc": [317, 370], "hack": [317, 370], "recogn": [317, 370, 731], "nondigit_punct_r": [317, 370], "compil": [317, 370, 680], "express": [317, 370, 636], "preced": [317, 370, 728, 731], "digit": [317, 370, 632, 720], "punct_nondigit_r": [317, 370], "symbol_r": [317, 370], "bleu_token": [317, 370], "mose": [317, 370], "smt": [317, 370], "mosesdecod": [317, 370], "mteval": [317, 370], "v14": [317, 370], "pl": [317, 370], "l954": [317, 370], "l983": [317, 370], "bilingu": [317, 370], "understudi": [317, 370], "qualiti": [317, 370, 661], "machin": [317, 370, 670, 676, 686, 700, 702, 708, 720, 728, 729], "translat": [317, 318, 370, 371, 719, 731], "natur": [317, 370, 670], "approxim": [317, 318, 370, 371, 643, 679, 725], "glue": [317, 324, 370, 377, 663, 679, 680, 689], "word": [317, 370, 661, 679, 719, 725, 734], "ngram": [317, 370, 679], "breviti": [317, 318, 370, 371, 679], "doe": [317, 370, 450, 661, 662, 663, 679, 680, 725, 726, 730], "beam": [317, 370, 679], "tensor2tensor": [318, 371], "bleu_hook": [318, 371], "compute_bleu": [318, 371], "reference_corpu": [318, 371], "translation_corpu": [318, 371], "max_ord": [318, 371], "use_bp": [318, 371], "against": [318, 371], "gram": [318, 371], "bleu_scor": [318, 371], "third": [320, 373, 637, 677], "parti": [320, 373, 637, 677, 722], "pycocotool": [320, 373, 671, 676], "noth": [320, 373, 731], "thu": [320, 373, 605, 680, 719, 722], "cannot": [320, 373, 638, 661, 671, 725, 729], "jonathanhuang": [320, 373], "image_id": [320, 373, 679], "invok": [320, 373, 605, 643], "groundtruth_dict": [320, 373], "exportgroundtruthtococo": [320, 373], "groundtruth_boxes_list": [320, 373], "groundtruth_classes_list": [320, 373], "max_num_class": [320, 373], "output_path": [320, 373], "detections_list": [320, 373], "exportdetectionstococo": [320, 373], "detection_boxes_list": [320, 373], "detection_scores_list": [320, 373], "detection_classes_list": [320, 373], "cocowrapp": [320, 373], "loadannot": [320, 373], "cocoevalwrapp": [320, 373], "agnostic_mod": [320, 373], "computemetr": [320, 373], "detection_typ": [320, 373], "bbox": [320, 373, 638, 679], "hold": [320, 356, 373, 436, 663], "iou_typ": [320, 373], "iou_thr": [320, 324, 373, 377, 679], "map_point": [320, 324, 373, 377, 679], "cocoev": [320, 373], "mscoco": [320, 373], "Then": [320, 373, 643, 665, 693, 695, 697, 698, 705, 728, 731], "exportsingleimagegroundtruthtococo": [320, 373], "next_annotation_id": [320, 373], "category_id_set": [320, 373], "groundtruth_box": [320, 373], "groundtruth_class": [320, 373], "groundtruth_mask": [320, 373], "groundtruth_is_crowd": [320, 373], "ingest": [320, 373], "here": [320, 373, 451, 643, 663, 668, 669, 670, 672, 673, 678, 679, 688, 695, 698, 700, 703, 706, 708, 722, 726, 727, 728, 734], "exportsingleimagedetectionstococo": [320, 373], "uniqu": [320, 353, 373, 722], "assign": [320, 373, 632, 668, 721, 731], "num_gt_box": [320, 373], "num_detect": [320, 324, 373, 377, 679, 680, 733], "image_height": [320, 373], "image_width": [320, 373], "detection_mask": [320, 373], "crowd": [320, 373], "insid": [320, 373, 605, 666, 667, 701, 719, 723, 731], "exportsingleimagedetectionboxestococo": [320, 373], "detection_box": [320, 373, 680, 733], "detection_scor": [320, 373, 680, 733], "detection_class": [320, 373, 680, 733], "exporsingleimagedetectionboxestococo": [320, 373], "exportsingleimagedetectionmaskstococo": [320, 373], "allenai": [321, 322, 374, 375], "bi": [321, 322, 374, 375], "att": [321, 322, 374, 375], "flow": [321, 322, 374, 375, 638, 639, 680], "f1_score": [321, 322, 374, 375], "ground_truth": [321, 322, 374, 375], "ground": [321, 322, 374, 375], "truth": [321, 322, 374, 375], "metric_max_over_ground_truth": [321, 322, 374, 375], "metric_fn": [321, 322, 374, 375], "exact_match_scor": [321, 374], "exact": [321, 374], "articl": [321, 322, 374, 375], "paragraph": [321, 322, 374, 375], "qa": [321, 322, 374, 375, 641], "normalize_answ": [322, 375], "newlin": [322, 375, 632], "tab": [322, 375, 700, 729], "harmon": [322, 324, 375, 377], "recal": [322, 324, 375, 377], "answer_start": [322, 375], "177": [322, 375, 734], "denver": [322, 375], "bronco": [322, 375], "nfl": [322, 375], "afc": [322, 375], "super": [322, 375, 639], "bowl": [322, 375], "50": [322, 375, 639, 643, 705, 719, 728, 734], "56be4db0acb8001400a502ec": [322, 375], "percentag": [322, 375, 396, 660, 725, 733], "tensorflowmetr": [324, 377], "maintain": [324, 377, 605, 636, 637, 661, 682, 683, 695, 698, 702, 707, 708, 719, 725, 726], "pytorchmetr": [324, 377], "mxnetmetr": [324, 377], "onnxrtqlmetr": [324, 377], "onnxrtitmetr": [324, 377], "metric_registri": [324, 377], "metric_typ": [324, 377], "decorator_metr": [324, 377], "basemetr": [324, 377, 432], "single_output": [324, 377], "hvd": [324, 377, 668], "wrappytorchmetr": [324, 377], "wrapmxnetmetr": [324, 377], "wraponnxrtmetr": [324, 377], "proport": [324, 377], "pred_list": [324, 377], "pytorchloss": [324, 377], "mae": [324, 377, 679], "compare_label": [324, 377, 432, 679], "rmse": [324, 377, 679, 731], "tensorflowtopk": [324, 377], "k": [324, 377, 432, 679, 702, 719], "among": [324, 377, 694, 728], "outcom": [324, 377], "num_correct": [324, 377], "num_sampl": [324, 377], "generaltopk": [324, 377], "cocomapv2": [324, 377, 679], "anno_path": [324, 377, 679], "map_kei": [324, 377], "detectionboxes_precis": [324, 377], "output_index_map": [324, 377, 679], "tensorflowmap": [324, 377], "tensorflowcocomap": [324, 377], "tensorflowvocmap": [324, 377], "squadf1": [324, 377, 679], "miou": [324, 377], "num_class": [324, 377], "21": [324, 377, 688, 689, 711, 714, 715, 720, 728, 734], "iou": [324, 377], "intersect": [324, 377, 642, 679], "union": [324, 377, 390, 395, 396, 398, 402, 409, 621, 679, 711], "onnxrtglu": [324, 377], "dlrm": [324, 377], "modelconvers": 326, "typic": [326, 353, 639, 641, 667, 669, 673, 705, 719, 734], "basicna": 327, "model_build": [327, 330], "conf_fnam": 327, "nasbas": [330, 639], "nas_registri": 331, "nas_method": 331, "create_search_space_pool": 331, "idx": [331, 663], "find_pareto_front": 331, "pareto": [331, 639], "front": [331, 639], "n_point": 331, "n_metric": 331, "n_pareto_point": 331, "gradientsensitivityprun": 333, "pytorchmodel": [333, 334, 336, 337, 338, 387], "overwritten": [333, 334, 336, 337, 338, 688], "grouplassoprun": 334, "legaci": 335, "basicmagnitudeprun": 336, "patternlockprun": [337, 349], "pruner_registri": 338, "clase": 338, "pruningconf": [339, 344], "tfpruningcallback": [339, 344], "input_model": [339, 344, 682, 703, 704, 705, 729], "pure": [339, 344, 719], "pattern_registri": 342, "pattern_typ": 342, "patternbas": 342, "mask_shap": [342, 343], "is_contigu": 342, "tile": [343, 661], "tilepatternbas": 343, "tilepattern_1x1": 343, "1x1": [343, 666, 680, 719], "tilepattern_2x2": 343, "2x2": [343, 728], "tilepattern_1x16": 343, "1x16": 343, "tilepattern_4x1": 343, "tilepattern_1x2": 343, "1x2": [343, 728], "patternnxm": 347, "patternninm": 347, "reset_non_value_to_default": 348, "parse_not_to_prun": 348, "update_frequency_on_step": [349, 721], "max_sparsity_ratio_per_lay": [349, 721], "magnitudeprun": 349, "snipprun": 349, "snipmomentumprun": 349, "moreoev": 349, "quantconf": 352, "separ": [353, 636, 661, 674, 677, 708, 710, 718, 721], "opt_model": [353, 680], "fulli": [353, 680, 708, 722, 728], "train_func": [353, 621, 668, 680, 722], "automixedprecisiontunestrategi": [354, 434], "basictunestrategi": [355, 435], "polici": [355, 359, 433, 435, 441, 636, 641, 733, 735], "bayesiantunestrategi": [356, 436], "acq_max": [356, 436], "ac": [356, 436], "gp": [356, 436], "y_max": [356, 436], "n_warmup": [356, 436], "10000": [356, 436, 719], "n_iter": [356, 436], "acquisit": [356, 436], "gaussian": [356, 436, 731], "relev": [356, 436, 643, 644, 661, 705, 719], "acq": [356, 436], "randomst": [356, 436], "scipi": [356, 436], "x_max": [356, 436], "targetspac": [356, 436], "pbound": [356, 436], "9527": [356, 436, 680, 733], "bayesianoptim": [356, 436], "exhaustivetunestrategi": [357, 438], "msetunestrategi": [359, 441], "mse_v2tunestrategi": [360, 442], "revert": [360, 368, 442, 450, 731], "randomtunestrategi": [361, 443], "strategy_registri": [362, 444, 731], "tunestrategi": [362, 444, 731], "tuningsamplerregistri": 365, "tuningsampl": [365, 447], "tuningord": [365, 447], "tuningspac": [365, 366, 447, 448], "tuning_order_lst": [365, 447], "initial_op_tuning_cfg": [365, 447], "modelwisetuningsampl": [365, 447], "tuning_items_prior": [365, 447], "op_dtype_dict": [365, 447], "optuningconfig": [365, 366, 367, 447, 448, 449], "optypewisetuningsampl": [365, 447], "opwisetuningsampl": [365, 447], "fallbacktuningsampl": [365, 447], "op_dtyp": [365, 447], "skip_first": [365, 447], "smoothquantsampl": [365, 447], "tuningitem": [366, 448], "item_typ": [366, 448], "pattern_to_intern": [366, 448], "default_dtyp": [366, 448], "pattern_to_path": [366, 448], "quant_mode_from_pattern": [366, 448], "internal_pattern": [366, 448], "initial_tuning_cfg_with_quant_mod": [366, 448], "op_name_typ": [366, 448], "step1": [366, 448], "step2": [366, 448], "complet": [366, 448, 642, 643, 719, 722, 731, 733, 734], "step3": [366, 448], "step4": [366, 448], "step5": [366, 448], "op_quant_mod": [367, 449], "ordereddefaultdict": [368, 450], "extract_data_typ": [368, 450], "reverted_data_typ": [368, 450], "signed_flag": [368, 450], "get_adaptor_nam": [368, 450], "experiment": [369, 639, 663, 667, 668, 670, 676, 680, 719, 721, 722, 726, 730], "base_model": [369, 380], "keras_model": [369, 380], "mxnet_model": [369, 380], "nets_factori": [369, 380, 572], "onnx_model": [369, 380, 390, 392, 393, 395, 396, 398, 407, 425, 703], "tensorflow_model": [369, 380, 430, 705], "torch_model": [369, 380], "collect_layer_histogram": [369, 625], "create_obj_from_config": [369, 625], "kl_diverg": [369, 625], "load_huggingfac": [369, 625, 680], "neural_insights_util": [369, 625], "weights_detail": [369, 625], "sub_class": [377, 432], "register_customer_metr": 377, "topk": [377, 432, 668, 679, 680, 702, 722], "frozen": [378, 386, 432, 574, 682], "savedmodel": [378, 386, 432, 574, 734], "onnx_ml_pb2": [378, 682], "hybirdblock": [378, 432], "basemodel": [379, 472, 473, 476, 574], "plai": [379, 574, 720, 725, 728], "role": [379, 574, 725, 728], "kerasmodel": [381, 574], "get_model_fwk_nam": 382, "fwk": 382, "mxnetmodel": 383, "net": [384, 575], "tfslimnetsfactori": [384, 575], "get_model_typ": [386, 574], "validate_graph_nod": [386, 574], "validate_and_inference_input_output": [386, 574], "graph_sess": [386, 574], "graph_def_sess": [386, 574], "frozen_pb_sess": [386, 574], "load_saved_model": [386, 574], "saved_model_tag": [386, 574], "signatur": [386, 574], "metagraphdef": [386, 574], "keras_sess": [386, 574], "slim_sess": [386, 574], "checkpoint_sess": [386, 574], "estimator_sess": [386, 574], "saved_model_sess": [386, 574], "tensorflowbasemodel": [386, 430, 574], "tensorflowsavedmodelmodel": [386, 574], "tensorflowllmmodel": [386, 574], "exceed": [386, 574], "2gb": [386, 574], "tensorflowqatmodel": [386, 574], "tensorflowcheckpointmodel": [386, 574], "tensorflowmodel": [386, 574], "pytorchbasemodel": 387, "pytorchfxmodel": 387, "ipexmodel": 387, "driven": [388, 641, 680, 700, 717, 729], "objective_registri": 388, "objective_custom_registri": 388, "obj_cl": 388, "eural_compressor": 388, "objective_cl": 388, "user_object": 388, "__class__": 388, "__name__": 388, "objective_cfg": 388, "usr_cfg": 388, "user_obj_cfg": 388, "easili": [388, 642, 684, 688, 700, 717, 728], "peak": [388, 717], "multiobject": 388, "metric_criterion": 388, "metric_weight": 388, "obj_criterion": 388, "obj_weight": 388, "is_measur": 388, "pathlib": [390, 393, 395, 396, 398, 401, 402], "quant_func": 390, "data_read": [390, 395, 396, 399], "calibrationdataread": [390, 392, 393, 395, 396, 399, 401, 402, 403], "weight_dtyp": [395, 396, 398, 404, 470, 474], "weight_bit": [395, 396, 398, 402, 404, 643], "weight_group_s": [395, 396, 398, 404], "weight_sym": [395, 396, 398, 404, 470, 474], "91": [395, 725, 728, 734], "apply_awq_on_model": 395, "quant_config": [395, 396, 398, 401, 409, 459, 460, 472, 476, 576, 615, 620], "calibration_data_read": [395, 396, 401, 402], "nnx": 395, "return_modelproto": [396, 398], "stabil": [396, 725], "optionm": [396, 398], "apply_gptq_on_model": 396, "apply_rtn_on_model": 398, "nodeproto": 399, "reader": 399, "smooth_quant_entri": [401, 661], "smoohquantconfig": [401, 404], "rtn_quantize_entri": 401, "rtnconfig": [401, 402, 404, 409, 610, 612, 620], "gptq_quantize_entri": 401, "gptqconfig": [401, 402, 404, 612], "awq_quantize_entri": 401, "awqconfig": [401, 404], "model_input": 402, "base_tun": [402, 473, 611], "expand": 402, "eatch": 402, "eval": [402, 638, 661, 662, 665, 683, 722, 729], "l139": 403, "act_dtyp": [404, 470, 474], "get_default_rtn_config": [404, 612], "get_default_gptq_config": [404, 612], "get_default_awq_config": 404, "fusedconv": 404, "calib_it": 404, "auto_alpha_arg": [404, 474, 728], "alpha_min": [404, 728], "alpha_max": [404, 728], "alpha_step": [404, 728], "attn_method": 404, "get_default_sq_config": [404, 474], "register_algo": [409, 576, 620, 661], "algos_map": [409, 576, 620], "example_algo": [409, 576, 620], "get_qrange_for_qtyp": 409, "check_model_with_infer_shap": 409, "parserfactori": 411, "onnxrtparserfactori": 413, "onnxprofilingpars": 415, "respons": [415, 416, 420, 713, 714, 715, 722], "profilingpars": 416, "profilingresult": 417, "total_execution_tim": 417, "accelerator_execution_tim": 417, "cpu_execution_tim": 417, "op_run": 417, "op_defin": 417, "tensorflowparserfactori": 418, "tensorflowprofilingpars": 420, "profilerfactori": [421, 423, 428], "create_onnx_config": 426, "ort": 426, "sessionopt": 426, "delete_assign": 431, "create_tf_config": 431, "tf_modul": 431, "configproto": 431, "set_eager_execut": 431, "entir": [432, 621, 638, 643, 644, 660, 707, 719], "autotunestrategi": 433, "conservativetunestrategi": 437, "o0": [437, 731], "who": [437, 636], "hawq_v2tunestrategi": 439, "made": [439, 642, 722, 726, 731], "impact": [439, 719, 726, 731], "tunestrategymeta": 444, "metaclass": 444, "lowerbitssampl": 447, "blockfallbacktuningsampl": 447, "op_block_lst": 447, "target_dtyp": 447, "alpha_list": 447, "weightonlyquantsampl": 447, "quantopt": 450, "quant_typ": 450, "quant_opt": 450, "preprocess_user_cfg": 450, "op_user_cfg": 450, "op_user_cfg_modifi": 450, "build_slave_faker_model": 450, "slave": [450, 731], "virtual": [450, 720], "classregist": 450, "fun": 451, "attribute1": 451, "module_debug_level1": 451, "debug": [451, 628, 665, 693, 697, 701, 731, 732], "function1": 451, "param1": 451, "param2": 451, "parameter1": 451, "parameter2": 451, "function2": 451, "pep": [451, 661], "484": [451, 734], "output_model": [451, 680, 703, 705, 729], "function3": 451, "section": [451, 644, 661, 665, 666, 667, 700, 703, 706, 719, 721, 725, 733], "restructuredtext": 451, "liter": 451, "generator1": 451, "example_gener": 451, "exampleclass": 451, "param3": 451, "public": [451, 636, 695, 698], "attr1": 451, "attr2": 451, "attr5": 451, "api_doc_exampl": 452, "smoothquantconfig": [455, 474], "calib_iter": [455, 459, 472, 473, 476, 643], "scaler": 456, "kerasqueri": 459, "kerasconfigconvert": 459, "staticquantconfig": [459, 460, 470, 474, 576], "tensorflowconfig": 460, "tensorflowconfigconvert": 460, "weight_granular": [470, 474], "per_tensor": [470, 474, 643, 644, 672, 722, 733], "act_sym": [470, 474], "act_granular": [470, 474], "base_config": [470, 472, 474, 476, 615], "get_all_registered_config": 470, "get_default_static_quant_config": [470, 474], "static_quant_entri": 472, "weight_algorithm": 474, "act_algorithm": 474, "record_max_info": 474, "weight_clip": 474, "default_sq_alpha_arg": 474, "quantize_model": 476, "quantize_model_with_single_config": 476, "dummydatasetv2": 571, "itex_instal": 576, "instal": [576, 668, 671, 673, 683, 685, 688, 691, 695, 698, 700, 701, 703, 704, 705, 735], "combine_histogram": [576, 632], "old_hist": [576, 632], "old": [576, 632, 680, 726], "get_all_fp32_data": [576, 632], "get_tensor_histogram": [576, 632], "scale_info": [576, 632], "dequantize_weight": [576, 632], "weight_tensor": [576, 632], "min_filter_tensor": [576, 632], "max_filter_tensor": [576, 632], "dump_data_to_loc": [576, 632], "pkl": [576, 632, 704], "load_data_from_pkl": [576, 632], "cpuinfo": [576, 632], "statist": [576, 588, 632, 633], "header": [576, 588, 632, 671], "field_nam": [576, 588, 632], "output_handl": [576, 588, 632], "printer": [576, 588, 632], "captureoutputtofil": [576, 632], "tmp_file_path": [576, 632], "stream": [576, 632, 734], "sy": [576, 632, 661, 686], "stderr": [576, 632], "captur": [576, 632], "lazyimport": [576, 632], "lazi": [576, 632], "till": [576, 632, 731], "static_quant": 587, "run_fn": [587, 590, 611, 615], "carri": [587, 719], "warm": 588, "dump_model_op_stat": 588, "get_quantizable_ops_recurs": 588, "use_auto_scal": 589, "use_mse_search": [589, 602, 612], "use_full_rang": [589, 602, 612], "use_layer_wis": [590, 612], "run_arg": [590, 611, 615], "hqqmoduleconfig": 592, "immut": 592, "constructor": 592, "quant_api": 594, "device_typ": 605, "_dtype": 605, "cache_en": 605, "manag": [605, 621, 624, 680, 683, 684, 694], "region": [605, 728], "chosen": [605, 643, 660], "enter": [605, 694, 700, 708], "half": [605, 681, 691], "hpu": 605, "float8_e4m3fn": 605, "autocastmodel": 605, "affect": [605, 728], "dataparallel": 605, "distributeddataparallel": 605, "torch_dtyp": [605, 644], "rtn_entri": 610, "configs_map": 610, "use_sym": 612, "use_double_qu": 612, "double_quant_dtyp": 612, "double_quant_bit": 612, "double_quant_use_sym": 612, "double_quant_group_s": 612, "act_ord": 612, "static_group": [612, 725], "get_default_hqq_config": 612, "hqqconfig": 612, "hqq": 612, "register_acceler": 616, "ellipsi": 616, "cuda_acceler": 616, "cpu_acceler": 616, "loop": [621, 638, 639, 643, 644, 672, 710, 727, 731], "compressionmanag": 621, "deal": 621, "pruningconfig": 621, "orchestr": [621, 641, 675, 732], "on_train_begin": [621, 638, 666, 667, 680, 718, 719, 722], "train_loop": [621, 680, 718], "on_epoch_begin": [621, 624, 666, 667, 680, 718], "on_step_begin": [621, 624, 666, 667, 680, 718, 719], "on_after_compute_loss": [621, 666, 667, 680, 718], "on_before_optimizer_step": [621, 666, 667, 680, 718, 719], "on_step_end": [621, 624, 666, 667, 680, 718], "on_epoch_end": [621, 624, 666, 667, 680, 718], "on_train_end": [621, 666, 667, 680, 718, 719, 722], "path_to_sav": 621, "top1": [621, 679, 702, 719, 722, 734], "callbacks_list": 621, "layerhistogramcollector": 622, "layer_tensor": 622, "include_lay": 622, "get_func_from_config": 624, "func_dict": 624, "get_preprocess": 624, "get_metr": 624, "get_postprocess": 624, "get_algorithm": 624, "create_dataset": 624, "cfg_preprocess": 624, "cfg_filter": 624, "create_dataload": 624, "dataloader_cfg": 624, "create_eval_func": 624, "postprocess_cfg": 624, "baselin": [624, 727, 728, 729], "create_train_func": 624, "train_cfg": 624, "Their": 624, "auxiliari": 625, "optimizedmodel": 627, "from_pretrain": [627, 680], "save_for_huggingface_upstream": [627, 680], "saved_dir": [627, 725], "msg": [628, 709, 713, 714], "fatal": 628, "warn": [628, 661], "alia": [628, 632, 685, 690], "register_neural_insights_workload": 629, "workload_loc": [629, 632], "workload_mod": 629, "workload_nam": 629, "uuid": 629, "update_neural_insights_workload": 629, "workload_uuid": 629, "update_neural_insights_workload_accuracy_data": 629, "baseline_accuraci": 629, "optimized_accuraci": 629, "get_model_path": 629, "is_int8_model": 631, "load_weight_onli": 631, "checkpoint_dir": 631, "history_cfg": 631, "best_configur": 631, "best_model_weight": 631, "snapshot": [631, 704], "recover_model_from_json": 631, "json_file_path": 631, "cfg_from_fil": 632, "yaml_fil": [632, 663, 668], "time_limit": 632, "get_siz": 632, "seen": [632, 642], "compute_spars": 632, "fault_tolerant_fil": 632, "equal_dict": 632, "d2": 632, "compare_kei": 632, "ignore_kei": 632, "ignor": [632, 660, 663, 725, 728, 731], "get_tuning_histori": 632, "tuning_history_path": 632, "offlin": [632, 636, 680, 722, 728], "str2arrai": 632, "global_st": 632, "show_memory_info": 632, "hint": 632, "dump_class_attr": 632, "compare_object": 632, "obj1": 632, "obj2": 632, "ignore_attr": 632, "comparison": [632, 725, 726, 729], "alias_param": 632, "param_nam": 632, "param_alia": 632, "alias": [632, 661], "print_tabl": 632, "column_map": 632, "table_entri": 632, "titl": [632, 677, 701, 731], "insert_newlin": 632, "prettyt": 632, "column": [632, 725, 728], "handler": [632, 731], "row": [632, 665, 703, 728], "decim": 632, "get_tensors_info": 632, "get_weights_detail": 632, "weightdetail": 632, "dump_tabl": 632, "file_typ": 632, "csv": [632, 639, 703, 704], "dump_table_to_csv": 632, "get_number_of_socket": 632, "platform": [632, 641, 675, 683, 691, 710, 720, 722], "opentri": 632, "activation_min": 632, "activation_max": 632, "print_op_list": 632, "get_op_list": 632, "minmax_file_path": 632, "input_model_tensor": 632, "optimized_model_tensor": 632, "activation_min_max": 632, "calculate_ms": 632, "mse_metric_gap": 632, "fp32_tensor": 632, "dequantize_tensor": 632, "euclidean": [632, 666], "distanc": [632, 666], "check_key_exist": 632, "weightsdetail": 633, "input_tensor_data": 633, "optimized_tensor_data": 633, "weightsstatist": 633, "welcom": [635, 636, 637, 641, 702, 709, 735], "interest": [636, 641, 702, 729], "foster": 636, "particip": [636, 710], "commun": [636, 702], "harass": 636, "experi": [636, 683, 705, 727, 728, 731], "everyon": 636, "regardless": 636, "ag": 636, "bodi": 636, "ethnic": 636, "characterist": 636, "gender": 636, "educ": 636, "socio": 636, "econom": 636, "race": 636, "religion": 636, "sexual": 636, "orient": 636, "contribut": [636, 641, 719], "inclus": 636, "Being": 636, "viewpoint": 636, "gracefulli": 636, "focus": [636, 642], "empathi": 636, "toward": [636, 666], "member": [636, 642], "unaccept": 636, "imageri": 636, "unwelcom": 636, "troll": 636, "insult": 636, "derogatori": 636, "polit": 636, "attack": 636, "privat": 636, "publish": [636, 677, 678, 681, 701, 728], "electron": 636, "explicit": 636, "permiss": 636, "inappropri": 636, "profession": 636, "clarifi": 636, "appropri": [636, 660, 728], "fair": 636, "action": [636, 695, 698], "edit": 636, "reject": 636, "commit": [636, 637], "wiki": 636, "ban": 636, "deem": 636, "threaten": 636, "offens": 636, "harm": 636, "mail": 636, "social": [636, 720], "media": [636, 720], "account": [636, 727, 731], "appoint": 636, "onlin": [636, 727], "event": [636, 729], "abus": 636, "report": [636, 637, 641, 710, 727], "contact": [636, 726, 727], "complaint": 636, "review": [636, 637, 641, 720], "investig": [636, 661, 705], "circumst": [636, 721], "oblig": [636, 706], "confidenti": [636, 702], "regard": [636, 724], "incid": 636, "good": [636, 722, 731], "faith": 636, "repercuss": 636, "leadership": 636, "faq": [636, 641], "page": [636, 637, 702, 705, 706], "send": [637, 643], "view": [637, 641, 669, 691, 700, 706, 726], "star": 637, "repositori": [637, 695, 698], "button": [637, 675, 694, 700], "fork": [637, 695, 698], "clone": [637, 665, 676, 693, 697, 702, 704, 705, 707, 708], "pc": 637, "git": [637, 665, 671, 676, 702, 704, 705, 707, 708], "modif": [637, 642, 672, 688, 707], "checkout": 637, "my": 637, "push": [637, 719, 725, 728], "cover": [637, 670, 674, 720], "would": [637, 680, 704, 719, 722, 728], "adopt": [637, 683, 719, 720, 728], "certif": [637, 702], "agre": 637, "pr": [637, 662, 679, 695, 698, 726], "At": [637, 643, 706, 710, 731], "approv": 637, "solv": [637, 722, 726], "licens": 637, "azur": [637, 641, 720], "devop": 637, "ci": 637, "cloud": [637, 641, 710, 720], "deploi": [637, 666, 680, 706, 710, 725, 731], "e16": 637, "v5": 637, "scan": [637, 641], "pylint": 637, "bandit": 637, "copyright": [637, 677], "docstyl": 637, "spellcheck": 637, "dco": 637, "pytest": 637, "No": [637, 661, 671, 680, 708, 709, 720], "failur": [637, 638], "fault": 637, "coverag": 637, "runtim": [637, 641, 642, 643, 645, 662, 665, 669, 672, 675, 681, 685, 690, 691, 721, 725, 726, 731], "submit": [637, 707, 710, 720], "bug": [637, 641], "intend": 637, "safe": 637, "collabor": [637, 641, 685, 691], "adher": 637, "toolkit": [638, 676, 683, 691, 720, 732], "tracer": 638, "resolv": [638, 640], "floatfunct": 638, "cat": [638, 670, 686, 713, 714, 715], "done": [638, 666, 667, 684, 700, 709, 713, 714, 719, 722], "10004": [638, 639, 642, 662, 666, 667, 668, 672, 675, 681, 718, 721, 723, 725, 733], "neural_compressor": [638, 639, 641, 644, 659, 661, 662, 663, 665, 666, 667, 668, 670, 673, 674, 679, 680, 681, 682, 702, 703, 717, 718, 719, 721, 722, 723, 724, 726, 727, 728, 730, 731, 733], "conduct": [638, 680, 688, 700, 731, 732], "imper": 638, "therefor": [638, 680, 703, 705, 719, 722, 723, 726, 728], "lot": [638, 705, 728], "As": [638, 643, 662, 666, 679, 680, 694, 705, 719, 725, 731], "successfulli": [638, 668, 709, 713, 714, 715, 720], "suggest": [638, 661, 727], "traceabl": 638, "proxi": 638, "tutori": [638, 691, 720, 732], "prototyp": 638, "html": [638, 641, 643, 660, 668, 675, 695, 698, 701, 703, 709, 713, 722], "highlight": 638, "untrac": 638, "ssd": [638, 670, 734], "resnet34": [638, 734], "r34": 638, "bboxes_labels_scor": 638, "prob": 638, "45": [638, 734], "max_output": 638, "zip": [638, 709, 713, 714], "dbox": 638, "dlabel": 638, "dscore": 638, "decode_singl": 638, "autom": [639, 683, 700, 701, 720, 728], "artifici": 639, "ann": 639, "par": [639, 710], "outperform": 639, "propos": [639, 642, 666, 681, 725, 728], "potenti": [639, 665], "lie": [639, 660], "predictor": 639, "shown": [639, 662, 665, 666, 679, 680, 694, 703, 705, 717, 718, 719, 723, 728, 731], "figur": [639, 693, 694, 697, 723], "popul": 639, "inner": 639, "evolutionari": 639, "until": [639, 643, 731], "conclud": 639, "met": [639, 672, 722, 729], "yet": [639, 695, 698, 701, 708, 722], "simplest": [639, 660, 686], "launcher": [639, 641, 666, 667, 691, 732], "agent": 639, "nsga2": 639, "supernet": 639, "ofa_mbv3_d234_e346_k357_w1": 639, "acc": [639, 710, 719, 729, 734], "mac": [639, 701], "num_ev": 639, "250": [639, 719], "results_csv_path": 639, "search_result": 639, "dataset_path": 639, "ilsvrc2012": 639, "aim": [639, 641, 678, 683, 719, 728, 731, 732], "mobilenetv3": 639, "lt": [639, 663, 734], "wmt": 639, "en": 639, "de": 639, "guidelin": [640, 641], "mainstream": [641, 732], "workflow": [641, 643, 644, 665, 666, 670, 676, 681, 695, 698, 702, 729, 732], "particular": [641, 719, 725], "wide": [641, 669, 681, 719, 722, 734], "hardwar": [641, 642, 666, 675, 680, 700, 719, 720, 721], "xeon": [641, 676, 677, 678, 681, 720, 722, 724, 734], "scalabl": [641, 676, 678, 681, 720, 722, 724], "processor": [641, 678, 681, 708, 720, 722, 724], "flex": [641, 676], "amd": [641, 676, 734], "arm": [641, 675, 676, 734], "nvidia": [641, 660, 675, 676, 734], "llama2": 641, "falcon": [641, 678, 719, 728, 734], "j": [641, 678, 704, 719, 728, 734], "bloom": [641, 719, 728, 734], "broad": [641, 675, 689, 732], "stabl": [641, 676, 719, 720], "diffus": [641, 720], "vision": [641, 670, 687, 728], "coder": [641, 675, 684, 685, 688, 691, 694, 707, 711, 720], "marketplac": [641, 701, 720], "googl": [641, 661, 681, 720], "amazon": [641, 683, 691], "web": [641, 702, 708, 713, 714, 715, 729], "servic": [641, 700, 707, 720], "softwar": [641, 677, 719, 720, 726], "alibaba": [641, 690, 697, 698, 720], "tencent": [641, 720], "taco": [641, 720], "oliv": [641, 720], "ai": [641, 683, 720, 724, 732], "ecosystem": [641, 720], "lightn": [641, 690], "pip": [641, 665, 668, 671, 673, 676, 685, 688, 693, 695, 697, 698, 702, 703, 704, 705, 726], "wget": [641, 665, 671, 673, 702, 705], "googleapi": [641, 673, 702, 705], "v1_6": [641, 673, 702, 705], "mobilenet_v1_1": [641, 673, 702, 713], "0_224_frozen": [641, 673, 702, 713], "overview": [641, 731], "jupyterlab": [641, 683, 689, 691, 693, 697, 732], "studio": [641, 691, 700, 710, 732], "topic": 641, "int4": [641, 678, 722, 734], "fp8": [641, 720], "innov": [641, 691, 720], "blog": [641, 720], "oct": [641, 720], "emnlp": [641, 720], "teq": [641, 720, 723, 725], "sep": [641, 720], "neurip": [641, 720], "quala": [641, 720], "minilm": [641, 720, 734], "releas": [641, 676, 689, 691, 693, 697, 699, 711, 714, 715, 735], "legal": [641, 735], "request": [641, 708, 709, 710, 713, 714, 715, 722], "ask": [641, 676], "email": 641, "research": [641, 677, 728, 734], "idea": [641, 702, 719, 728, 731], "discord": 641, "join": [641, 703, 708, 713, 714], "technic": 641, "discuss": 641, "wechat": [641, 720], "img": 641, "bridg": [642, 643, 675], "vanilla": [642, 643, 675], "abcadaptor": 642, "__init__": [642, 661, 662, 663, 679, 731], "query_fw_cap": [642, 644], "query_fused_pattern": 642, "he": 642, "besid": [642, 666, 705, 725], "describ": [642, 644, 661, 665, 672, 702, 729], "past": [642, 725], "mainten": 642, "difficult": [642, 728], "abil": [642, 643, 663, 672, 728], "fragment": 642, "scenario": [642, 659, 666, 680, 719, 725], "granular": [642, 643, 644, 672, 675, 686, 722, 728, 733], "semant": [642, 672], "mla": [642, 681, 722], "becom": [642, 670, 719, 725], "explor": 642, "inspect_tensor": 642, "op_list": [642, 729], "iteration_list": 642, "inspect_typ": 642, "save_to_disk": 642, "quantization_cfg": 642, "set_tensor": 642, "tensor_dict": 642, "diagnosis_help": 642, "fw": 643, "outlin": [643, 644], "instruct": [643, 644, 666, 676, 681, 695, 698, 702, 703, 704, 705, 719, 720, 721, 722, 728, 734], "extend": [643, 644], "accommod": [643, 644], "incorpor": [643, 644, 667, 719, 731], "diagram": [643, 644, 665, 731], "illustr": [643, 644, 667, 731], "sequencediagram": [643, 644, 710], "autonumb": [643, 644], "query_framework_cap": 643, "opwis": 643, "optypewis": 643, "travers": [643, 644, 725, 731], "\u2776": 643, "\u2777": 643, "\u2778": 643, "\u2779": 643, "\u277a": 643, "\u277b": 643, "\u277c": 643, "These": [643, 675, 703], "chapter": 643, "node_op": 643, "confirm": 643, "int8_conv_config": 643, "optype_wise_": 643, "tuning_cfg_to_fw": 643, "Its": [643, 660, 719], "dispatch": [643, 675, 707, 710], "is_perchannel": 643, "is_asymmetr": 643, "convert_bf16": 643, "somewhat": 643, "distort": 643, "line": [643, 661, 668, 675, 683, 688, 689, 708, 729], "let": [644, 672, 688, 719, 721, 733], "overal": [644, 708, 733], "drive": 644, "uint4": 644, "kullback": [644, 666], "leibler": [644, 666], "pytorch_cpu": 644, "1_11_capabl": 644, "cap_s8_1_11": 644, "cap_s8_1_11_conv1d": 644, "per_channel_symmetr": 644, "addition": [644, 668, 719, 731], "per_tensor_symmetr": 644, "due": [644, 670, 719, 722, 728, 729], "nativ": 644, "with_arg": 644, "qscheme": 644, "quant_min": 644, "quant_max": 644, "linux": [659, 671, 676, 694, 700], "x86_64": 659, "aarch64": 659, "prove": [660, 725, 728], "benefici": 660, "uniform": [660, 725], "\u03b2": 660, "\u03b1": 660, "fundament": [660, 680], "primari": [660, 731], "focu": [660, 731], "essenti": [660, 671], "remaind": 660, "enhanc": [660, 683, 719, 720, 724], "resolut": 660, "extrem": 660, "still": [660, 680, 706, 720, 722, 724], "retain": 660, "noteworthi": 660, "vanhouck": 660, "vincent": 660, "andrew": 660, "senior": 660, "mark": 660, "mao": 660, "speed": [660, 680, 691, 719, 720, 722, 731], "2011": 660, "szymon": 660, "migacz": 660, "2017": 660, "mckinstri": 660, "jeffrei": 660, "l": [660, 666, 729, 731], "discov": [660, 729], "1809": 660, "04191": 660, "2018": 660, "mostli": 661, "overli": 661, "argu": 661, "decis": [661, 679], "subprocess": [661, 662], "popen": 661, "pipe": 661, "sub_modul": 661, "namespac": 661, "pollut": 661, "long_str": 661, "extran": 661, "pager": 661, "getenv": 661, "readabl": 661, "seem": 661, "worth": [661, 719], "4f": 661, "65421": 661, "sentenc": 661, "eval_result": 661, "declar": [661, 701], "typealia": 661, "_lossandgradi": 661, "complextfmap": 661, "xx_func": 661, "ordereddict": 661, "plug": [661, 720], "pylanc": 661, "cheeseshopaddress": 661, "chees": 661, "shop": 661, "outofcheeseerror": 661, "crbug": 661, "192795": 661, "cpufreq": [661, 686], "deprec": [661, 695, 698, 726, 730], "facilit": [661, 683], "__all__": 661, "get_all_config_set_from_config_registri": 661, "algorithm_entri": 661, "autotun": 661, "static_qu": 661, "snippet": [661, 675], "rtn_algo_entri": 661, "vscode": [661, 699, 701], "settings_recommend": 661, "encount": 662, "consum": 662, "previous": 662, "lack": [662, 671], "faster": [662, 664, 670, 720, 731, 734], "Of": 662, "evenli": 662, "divid": [662, 710, 728, 731], "discard": 662, "throw": 662, "awai": 662, "draw": [662, 727, 731], "pin": [662, 693, 697], "reshuffl": 662, "manner": [662, 666, 682], "newdataload": 662, "customis": [662, 663, 679], "ensp": [663, 730], "imagerecord": [663, 668, 733], "image_nam": 663, "cocorecord": 663, "gt": [663, 728, 730], "int64": 663, "offer": 663, "style_transf": 663, "content": [663, 708, 709, 713, 714, 715], "tfrecorddataset": 663, "labelbal": 663, "300": [663, 719, 734], "16": [663, 676, 713, 725, 734], "helloworld": [663, 681, 730], "aid": 664, "deploy": [664, 683, 700, 720, 723, 728], "infrastructur": 664, "diagnos": 665, "gui": [665, 675, 705, 719], "termin": [665, 693, 694, 697, 703], "repeat": [665, 731], "durat": [665, 709, 713, 714, 727], "cd": [665, 668, 676, 702, 704, 705, 707, 708, 713, 714, 715], "setup": [665, 672, 676, 695, 698, 702, 704, 705, 707, 708, 719], "ilsvr2012": 665, "caff": 665, "berkeleyvis": 665, "caffe_ilsvrc12": 665, "xvzf": 665, "image_recognit": [665, 705, 729], "resnet50_torchvis": 665, "ptq_static": [665, 704], "resnet50_v1": [665, 668, 680], "dataset_loc": [665, 705, 713, 729], "label_path": 665, "quantiti": 665, "vec": 665, "frac": [665, 728], "sigma": 665, "var": 665, "happen": 665, "dispers": [665, 703], "v0": [665, 705, 728, 729], "cg": [665, 705, 729], "conv0": [665, 705, 729], "expens": [666, 680, 731], "mobil": [666, 680, 734], "produc": 666, "logit": 666, "softmax": 666, "kd": 666, "patient": 666, "compact": [666, 680, 686, 719], "agnost": 666, "resourc": [666, 707, 710, 731], "convolut": [666, 720], "ia": 666, "attach": [666, 680, 728], "shallow": 666, "deepest": 666, "deeper": 666, "10006": [666, 667], "student_output": [666, 667], "student_loss": [666, 667], "training_func_for_nc": [666, 667], "distil_loss_conf": 666, "accordingli": [666, 691, 728], "promis": [667, 680, 719], "huge": [667, 705, 719, 723], "heavi": 667, "light": 667, "booster": 667, "degrad": [667, 719, 731], "novel": [667, 683, 694, 700], "comb": 667, "distillation_criterion": [667, 680, 718], "q_conf": 667, "horovod": 668, "program": [668, 677, 683, 700], "enable_eager_execut": 668, "yaml_file_path": 668, "pre_process": 668, "simpli": [668, 682, 683, 685, 688, 700, 708], "evaluation_result": 668, "evaluation_time_cost": 668, "partit": [668, 719], "distributedsampl": 668, "train_sampl": 668, "train_dataset": [668, 722], "num_replica": 668, "rank": 668, "train_load": 668, "train_kwarg": 668, "adadelta": 668, "distributedoptim": 668, "named_paramet": 668, "broadcast_paramet": 668, "root_rank": 668, "broadcast_optimizer_st": 668, "set_epoch": 668, "batch_idx": 668, "nll_loss": 668, "log_interv": 668, "0f": 668, "tloss": 668, "6f": 668, "dry_run": 668, "test_func": 668, "host": [668, 708, 710, 713, 714, 715], "num_of_process": 668, "002": 668, "ssh": [668, 700], "prompt": 668, "readm": [668, 713], "exactli": [668, 684], "recognit": [668, 670, 719, 729], "resizecropimagenet": [668, 730], "realiz": [668, 717, 724, 727], "tow": 668, "node1": [668, 713, 714], "node2": [668, 713, 714], "TO": [668, 685, 705], "your_node1_nam": 668, "your_node2_nam": 668, "resnet50_fp32_pretrained_model": 668, "nc_resnet50_v1": 668, "resnet": [668, 734], "varieti": [669, 721, 731], "demonstr": [669, 683, 713, 714, 715, 729], "speedup": [669, 675, 722], "2x": [669, 675], "vnni": [669, 675, 721, 722], "exchang": 670, "hope": 670, "inc_model": [670, 682], "fp32_onnx_config": 670, "verifi": [670, 678], "vgg16": [670, 734], "mobilenet": [670, 727, 734], "rcnn": 670, "torchscript": [670, 723, 728], "unsupport": [670, 680, 719], "add_relu": 670, "conv1d_relu": 670, "conv2d_relu": 670, "group_norm": 670, "hardswish": 670, "instance_norm": 670, "layer_norm": 670, "leaky_relu": 670, "sigmoid": 670, "toolchain": [671, 720], "bare": 671, "metal": 671, "sudo": [671, 686], "apt": [671, 676, 686, 694], "python3": 671, "dev": [671, 693, 697], "distutil": 671, "libgl1": 671, "mesa": 671, "glx": 671, "libglib2": 671, "ln": 671, "sf": 671, "usr": 671, "incompat": 671, "88": [671, 727, 734], "80": [671, 723, 729, 734], "pyobject": 671, "reinstal": 671, "libgl": 671, "yum": [671, 676], "opencv": [671, 676, 694], "conda": [671, 676, 686, 694, 713, 714, 715, 726], "13": [671, 676, 702, 726, 728], "pend": [671, 709], "sqlalchemi": 671, "27": [671, 734], "alemb": 671, "forg": [671, 676], "quick": [672, 681, 719, 732, 733], "friendli": [672, 680, 720, 728, 732, 733], "dive": [672, 732], "purpos": [672, 681, 700, 702, 721, 722], "syntax": 672, "go": [672, 695, 698, 706, 721, 725, 730], "up1": 672, "up2": 672, "valid_mixed_precis": 672, "addn": 672, "grappler_optim": 672, "constfold": 672, "arithmet": 672, "debug_stripp": 672, "major": [674, 705, 722, 728], "concept": [674, 727, 732], "rather": [674, 725], "custom_metr": 674, "420": 675, "geomean": 675, "upload": [675, 695, 698], "click": [675, 683, 684, 691, 694, 700, 705, 720, 729], "qintegerop": [675, 722], "plan": 675, "oneapi": [676, 720, 732], "analyt": [676, 720, 732], "success": [676, 702], "11": [676, 679, 681, 702, 728, 731, 734], "frequent": 676, "pypi": [676, 695, 698], "nightli": 676, "headless": [676, 694], "fastai": 676, "esri": 676, "consolid": 676, "latest": [676, 720, 726], "eas": [676, 685, 720], "along": [676, 719, 725], "streamlin": [676, 707, 720], "scienc": 676, "websit": 676, "anaconda": [676, 707, 708], "suit": [676, 701, 729], "formerli": 676, "skylak": 676, "cascad": 676, "lake": [676, 681, 720], "cooper": [676, 681, 720], "ic": [676, 720], "sapphir": [676, 678], "rapid": [676, 678], "hbm": 676, "arctic": 676, "sound": 676, "pont": 676, "vecchio": 676, "cento": [676, 734], "ubuntu": 676, "22": [676, 734], "04": [676, 734], "maco": 676, "ventura": 676, "fortensorflow": 676, "forpytorch": 676, "12": [676, 702, 734], "tf_enable_onednn_opt": 676, "onednn": [676, 681, 722], "newer": 676, "subject": 677, "accompani": [677, 731], "wish": 677, "bibtex": 677, "author": 677, "feng": 677, "tian": 677, "hanwen": 677, "haihao": [677, 719], "shen": [677, 719], "suyu": 677, "chen": 677, "howpublish": 677, "year": 677, "logo": 677, "atom": 677, "phi": 677, "pentium": 677, "vtune": 677, "corpor": 677, "subsidiari": 677, "brand": 677, "claim": 677, "sq": [678, 728], "woq": 678, "4th": [678, 720, 722], "gen": [678, 681, 720, 722, 724], "codenam": [678, 681], "quickli": [678, 731, 732], "eleutherai": [678, 704, 728, 734], "6b": [678, 704, 728, 734], "facebook": [678, 706, 728, 734], "3b": [678, 728], "30b": [678, 728, 734], "llama": [678, 719, 720, 723, 725, 728, 734], "7b": [678, 728, 734], "13b": [678, 728, 734], "70b": [678, 734], "tiiuae": [678, 728, 734], "40b": 678, "soon": 678, "popularli": 679, "industri": [679, 720], "label_map": 679, "ap": 679, "curv": 679, "turn": [679, 694, 723], "target_boxes_num": 679, "str_label": 679, "int_label": 679, "inturn": 679, "cocomap": 679, "vocmap": 679, "categor": 679, "multiclass": 679, "multilabel": 679, "newmetr": 679, "reset": 679, "reflect": [679, 730], "new_metr": 679, "deliv": [680, 720, 726], "conveni": [680, 707], "upgrad": 680, "veri": [680, 701, 705, 722, 725, 731, 732], "comprehens": [680, 732], "resort": 680, "automodelforsequenceclassif": 680, "autotoken": 680, "val_dataset": [680, 722], "val_dataload": [680, 722], "worker": [680, 710, 713, 714, 715, 722], "ping_memori": [680, 722], "formul": 680, "effort": 680, "onnxrt_integ": [680, 733], "onnxrt_qlinear": [680, 733], "image_tensor": [680, 733], "post_training_dynamic_qu": [680, 721, 731], "1000": [680, 709, 733], "2000": 680, "sampling_s": [680, 733], "model_wis": [680, 733], "op_dict": 680, "op_wis": [680, 729, 733], "sigopt_api_token": [680, 727, 731], "sigopt_project_id": [680, 727, 731], "sigopt_experiment_nam": [680, 727, 731], "demo": 680, "600": 680, "training_arg": 680, "emul": [680, 722], "trainer": [680, 691], "briefli": [680, 728], "pruning_func": 680, "train_dataload": [680, 719, 722], "n_gpu": 680, "gradient_accumulation_step": 680, "clip_grad_norm_": 680, "max_grad_norm": 680, "start_epoch": [680, 721, 733], "end_epoch": [680, 721, 733], "newli": [680, 719], "on_after_optimizer_step": [680, 719], "layer3": [680, 719], "0004": 680, "randomresizedcrop": [680, 730], "totensor": [680, 730], "485": 680, "456": [680, 734], "406": [680, 734], "nepoch": 680, "cnt": 680, "loss_sum": 680, "iter_bar": 680, "desc": 680, "teacher_logit": 680, "train_fun": 680, "training_func": 680, "recent": [680, 681], "growth": [680, 681, 719], "significantli": [680, 681, 703, 705, 719, 731], "bandwidth": [680, 681, 725], "exit_polici": [680, 733], "determinist": 680, "meaning": [680, 718], "reli": [680, 728], "prune_conf": 680, "quantization_aware_training_conf": 680, "aforement": 680, "inset": 680, "p_conf": [680, 718], "ssd_mobilenet_v1": 680, "benchmarkconf": 680, "sixteen": 681, "launch": [681, 701, 706], "3rd": [681, 720, 722, 724], "boost": [681, 684, 700, 719, 720], "x86": 681, "avx512": [681, 722], "vcvtne2ps2bf16": 681, "vcvtneps2bf16": 681, "vdpbf16p": 681, "fbgemm": [681, 722], "tensorrtexecutionprovid": [681, 722], "cudaexecutionprovid": [681, 722], "dnnlexecutionprovid": [681, 722], "avx512_bf16": 681, "plu": 681, "resnet18": [681, 685, 734], "persist": 682, "brought": [682, 684, 691, 722], "tf2": 682, "h5": 682, "hybridblock": 682, "0000": 682, "saved_result": [682, 704, 725], "simplifi": [683, 694, 700, 719, 720], "acquir": 683, "analysi": [683, 700, 719, 727], "heurist": [683, 700], "great": 683, "autocast": 683, "my_model": 683, "no_grad": 683, "memory_format": 683, "112": 683, "plugin": [683, 701], "aw": [683, 691, 710, 720, 734], "sagemak": [683, 691], "neural_cod": [683, 685, 687, 688, 689, 691], "bench": 683, "superbench": 683, "enjoi": [684, 688, 691], "reload": [684, 701, 703, 706], "modern": [685, 725], "democrat": [685, 720], "programm": [685, 691, 700], "nano_bf16_channels_last": 685, "nano_bf16_ipex_channels_last": 685, "nano_bf16_ipex": 685, "nano_bf16": 685, "nano_fp32_channels_last": 685, "nano_fp32_ipex_channels_last": 685, "nano_fp32_ipex": 685, "nano_gpu_to_cpu": 685, "nano_int8": 685, "nano_jit_bf16_channels_last": 685, "nano_jit_bf16_ipex_channels_last": 685, "nano_jit_bf16_ipex": 685, "nano_jit_bf16": 685, "nano_jit_fp32_channels_last": 685, "nano_jit_fp32_ipex_channels_last": 685, "nano_jit_fp32_ipex": 685, "nano_jit_fp32": 685, "nano_onnxruntime_fp32": 685, "nano_onnxruntime_int8_qlinear": 685, "openvino": 685, "nano_openvino_fp32": 685, "nano_openvino_int8": 685, "bc": [686, 694], "conda_prefix": 686, "echo": 686, "tradit": [686, 719], "libjemalloc": 686, "libiomp5": 686, "home": 686, "lib": 686, "ld_preload": 686, "malloc_conf": 686, "oversize_threshold": 686, "background_thread": 686, "metadata_thp": 686, "dirty_decay_m": 686, "9000000000": 686, "muzzy_decay_m": 686, "kmp_affin": 686, "kmp_blocktim": 686, "dnnl_primitive_cache_capac": 686, "governor": 686, "scaling_governor": 686, "powersav": 686, "tee": 686, "pytorch_jit_script": [687, 690], "pytorch_channels_last": [687, 690], "run_bench": 687, "patch": [687, 700], "patch_path": 687, "your_patch_path": 687, "sweep": 687, "sweep_object": 687, "bench_config": 687, "bench_featur": 687, "sai": 688, "run_glu": [688, 689, 711, 714, 715], "requisit": 688, "task_nam": [688, 689, 711, 714, 715], "do_ev": [688, 689, 704, 711, 714, 715], "itself": [688, 719], "run_glue_optim": 688, "static_ipex": 688, "auto_qu": 689, "v4": [689, 711, 714, 715, 734], "albert": [689, 734], "sst2": 689, "alexnet": [689, 734], "pytorch_amp": 690, "optimize_for_infer": 690, "pytorch_jit_trac": 690, "pytorch_jit_script_ofi": 690, "pytorch_jit_trace_ofi": 690, "torchdynamo": 690, "pytorch_torchdynamo_jit_script": 690, "pytorch_torchdynamo_jit_trac": 690, "pytorch_torchdynamo_jit_script_ofi": 690, "pytorch_torchdynamo_jit_trace_ofi": 690, "pytorch_inc_bf16": 690, "pytorch_inc_static_quant_fx": 690, "pytorch_inc_static_quant_ipex": 690, "pytorch_inc_static_quant_ipex_xpu": 690, "pytorch_inc_dynamic_qu": 690, "pytorch_ipex_fp32": 690, "pytorch_ipex_bf16": 690, "pytorch_ipex_int8_static_qu": 690, "pytorch_ipex_int8_dynamic_qu": 690, "blade": 690, "disc": 690, "pytorch_aliblad": 690, "pytorch_lightning_bf16_cpu": 690, "tensorflow_amp": 690, "keras_amp": 690, "tensorflow_inc": 690, "keras_inc": 690, "onnx_inc_static_quant_qlinear": 690, "onnx_inc_static_quant_qdq": 690, "onnx_inc_dynamic_qu": 690, "optimum": [690, 691, 703, 725], "pytorch_inc_huggingface_optimum_stat": 690, "pytorch_inc_huggingface_optimum_dynam": 690, "intel_extension_for_transform": 690, "bigdl": [690, 691], "nano": [690, 691], "nano_": 690, "inc_auto": 690, "delight": 691, "announc": 691, "500": [691, 709, 734], "jupyt": [691, 693, 694, 697], "isa": 691, "adjust": [691, 722, 728], "delta": 691, "acc_delta": 691, "int8_acc": 691, "fp32_acc": 691, "ext": [693, 695, 697, 698, 699], "lab": [693, 694, 695, 697, 698], "nodej": [693, 697], "jlpm": [693, 697], "yarn": [693, 697], "npm": [693, 694, 697], "lieu": [693, 697], "labextens": [693, 694, 697], "typescript": [693, 697], "watch": [693, 697, 706], "immedi": [693, 697, 719], "refresh": [693, 697], "browser": [693, 697, 702, 706], "wait": [693, 697, 700, 710], "rebuilt": [693, 697], "easier": [693, 697, 700, 702, 720], "symlink": [693, 697], "down": 694, "finish": [694, 710], "blank": 694, "cell": 694, "gain": [694, 718, 720], "mkl": 694, "jemalloc": 694, "pip3": 694, "pyproject": [695, 698], "toml": [695, 698], "twine": [695, 698], "whl": [695, 698], "dist": [695, 698], "sdist": [695, 698], "bdist_wheel": [695, 698], "frontend": [695, 698, 708, 715], "login": [695, 698, 727], "cut": [695, 698], "admin_github_token": [695, 698], "pypi_token": [695, 698], "npm_token": [695, 698], "secret": [695, 698], "panel": [695, 698, 700], "draft": [695, 698], "changelog": [695, 698, 699], "pkg": [695, 698], "bot": [695, 698], "pick": [695, 698, 701], "feedstock": [695, 698], "hatch": 698, "notabl": 699, "daili": 700, "advantag": [700, 719, 721, 731], "remot": 700, "server": [700, 702, 705, 708, 713, 714, 715], "re": [700, 706, 725], "market": 700, "uninstal": 700, "fill": [700, 727, 730, 731], "upper": 700, "sidebar": 700, "hover": 700, "track": [700, 727], "argpars": 700, "pop": [700, 710], "diff": 700, "manifest": 701, "palett": 701, "registercommand": 701, "amodio": 701, "tsl": 701, "matcher": 701, "dbaeumer": 701, "eslint": [701, 706], "press": 701, "f5": 701, "ctrl": 701, "hello": 701, "world": 701, "breakpoint": 701, "consol": [701, 706], "relaunch": 701, "toolbar": 701, "node_modul": 701, "viewlet": 701, "dropdown": 701, "runner": [701, 706], "startup": 701, "bundl": 701, "neural_insight": [702, 704, 705], "tl": 702, "ui": 702, "5000": 702, "338174d13706855fc6924cec7b3a8ae8": 702, "listen": 702, "firewal": 702, "8080": 702, "cert": 702, "path_to_cert": 702, "crt": 702, "path_to_private_kei": 702, "encrypt": 702, "expos": 702, "forfeit": 702, "client": [702, 708, 715], "extern": 702, "threat": 702, "diagnost": 702, "skill": 702, "feel": [702, 706], "layoutlmv3": [703, 734], "seqev": 703, "sentencepiec": 703, "timm": 703, "fvcore": 703, "pillow": 703, "einop": 703, "textdist": 703, "setuptool": 703, "cli": 703, "hypjudi": 703, "finetun": [703, 719, 725, 734], "funsd": [703, 734], "calib_dataset": 703, "incdataset": 703, "eval_dataset": 703, "poor": [703, 729], "9049": 703, "2989": 703, "66": [703, 734], "9631": 703, "glob": 703, "panda": 703, "pd": 703, "set_opt": 703, "max_row": 703, "max_column": 703, "getmtim": 703, "activations_t": 703, "weights_tabl": [703, 704], "read_csv": 703, "nweight": 703, "descend": 703, "sorted_data": 703, "sort_valu": 703, "ascend": 703, "evid": 703, "tip": 703, "8981": 703, "7502": 703, "run_clm": 704, "wikitext": [704, 734], "dataset_config_nam": 704, "do_train": 704, "inspect_sav": 704, "inspect_result": 704, "quan": 704, "model_summari": 704, "incept": [705, 734], "v3": [705, 734], "inception_v3": [705, 729], "inceptionv3_fp32_pretrained_model": [705, 729], "bash": [705, 729], "prepare_dataset": 705, "sh": [705, 729], "raw_dir": 705, "img_raw": 705, "delet": [705, 719], "run_tun": 705, "nc_inception_v3": 705, "highest": [705, 711, 731], "satisfactori": 705, "webpag": 705, "spike": 705, "bottom": 705, "chart": [705, 722, 727, 729], "concentr": 705, "But": 705, "bigger": 705, "bootstrap": 706, "localhost": [706, 708, 713, 714], "3000": 706, "lint": 706, "interact": [706, 727], "correctli": 706, "hash": [706, 709], "readi": [706, 719], "aren": 706, "transit": 706, "webpack": 706, "babel": 706, "tweak": 706, "ever": 706, "curat": 706, "suitabl": 706, "middl": [706, 728], "shouldn": 706, "understand": [706, 722, 729, 732], "wouldn": 706, "couldn": 706, "troubleshoot": 706, "effortlessli": 707, "grpc": [707, 708, 712, 713, 714, 716], "queue": 707, "seamlessli": [707, 719, 731], "mpi": [707, 708, 731], "neural_solut": [707, 708, 713, 714, 715], "task_monitor_port": [708, 713, 714, 715], "22222": [708, 713, 714, 715], "result_monitor_port": [708, 713, 714, 715], "33333": [708, 713, 714, 715], "restful_api_port": [708, 713, 714, 715], "hostfil": [708, 710, 713, 714, 715], "grpc_api_port": [708, 713, 714, 715], "api_typ": [708, 713, 714, 715], "conda_env": [708, 713, 714, 715], "upload_path": [708, 713, 714, 715], "8000": [708, 713, 714, 715], "monitor": [708, 713, 714, 715], "3333": [708, 713, 714, 715], "2222": [708, 713, 714, 715], "ns_workspac": [708, 713, 714, 715], "hf_model": [708, 712, 714, 715], "curl": [708, 709, 713, 714], "task_id": [708, 713, 714, 715], "usernam": 708, "db": [708, 710], "serve_log": [708, 713, 714, 715], "frontend_grpc": 708, "task_log": 708, "task_bdf0bd1b2cc14bc19bce12d4f9b333c7": 708, "task_workspac": 708, "bdf0bd1b2cc14bc19bce12d4f9b333c7": 708, "aliv": 708, "properli": 708, "commonli": [708, 719], "hostnam": 708, "breakdown": 708, "ip": 708, "hous": 708, "host1": [708, 713, 714], "host2": [708, 713, 714], "query_id": 708, "oaa": 709, "host_ip": 709, "task_request": [709, 713, 714, 715], "tuning_info": [709, 713], "optimization_result": [709, 713], "result_path": [709, 713, 714], "closur": 709, "404": [709, 719, 734], "health": 709, "healthi": 709, "quantized_model": [709, 713, 714], "400": [709, 734], "alloc": 710, "incom": 710, "taskmonitor": 710, "cluster": [710, 713, 714, 731], "tasklaunch": 710, "resultmonitor": 710, "receiv": [710, 727], "p1": 710, "notif": 710, "p2": 710, "p3": 710, "mpirun": [710, 731], "perf": 710, "p4": 710, "four": [710, 729, 734], "classdiagram": 710, "taskdb": 710, "get_statu": 710, "update_statu": 710, "task_collect": 710, "append_task": 710, "get_all_pending_task": 710, "update_task_statu": 710, "task_db": 710, "wait_new_task": 710, "schedule_task": 710, "dispatch_task": 710, "launch_task": 710, "query_task_statu": 710, "node_list": 710, "reserve_resourc": 710, "get_node_statu": 710, "gcp": [710, 720], "script_url": [711, 713, 714, 715], "archiv": 711, "tf_example1": [712, 713, 714], "hf_models_grpc": [712, 715], "00173": 713, "01024": 713, "task_request_distribut": 713, "custom_models_optim": 713, "7602cd63d4c849e7a686a8165a77f69d": [713, 714], "151": [713, 734], "8617": 713, "17": [713, 734], "8213": [713, 734], "number_of_socket": [713, 714], "number_of_thread": [713, 714], "cdf419910f9b4d2a8320d0e420ac1d0a": 714, "optimized_result": 714, "58": [714, 734], "3162": 714, "6488": [714, 734], "06": [715, 733, 734], "34": [715, 734], "55": [715, 734], "d3e10a49326449fb9d0d62f2bfc1cb43": 715, "fastapi": 716, "multi_object": 717, "benefit": 718, "instanti": 718, "neuron": 719, "art": 719, "grown": 719, "unpreced": 719, "increasingli": 719, "crucial": 719, "stand": [719, 731], "shrink": 719, "contextu": 719, "scene": 719, "haven": 719, "color": [719, 723], "lowest": [719, 731], "emsp": 719, "downstream": 719, "prone": 719, "co": 719, "discourag": 719, "penal": 719, "parameter": 719, "lightweight": 719, "perceptron": 719, "mlp": 719, "valuabl": [719, 729], "basi": 719, "billion": 719, "dolli": [719, 728, 734], "mpt": [719, 728, 734], "lm": [719, 734], "lamini": [719, 728], "mention": [719, 725], "tend": 719, "exemplifi": 719, "complement": 719, "fortieth": 719, "miss": [719, 722], "pruner2": 719, "few": [719, 720, 728, 731], "lm_head": 719, "yourself": 719, "uncertain": 719, "auto_config": 719, "quit": 719, "straightforward": [719, 725, 728], "pruning_pattern": 719, "pruning_start": 719, "pruning_end": 719, "sparse_gpt": 719, "embed_out": 719, "card": 719, "hesit": 719, "causal": 719, "clm": 719, "sst": [719, 734], "25": [719, 734], "63": [719, 734], "24": [719, 731, 734], "35": [719, 734], "flan": 719, "t5": [719, 734], "english": 719, "romanian": 719, "381": 719, "yolov5": 719, "75": [719, 734], "2x1": [719, 734], "801": 719, "7895": 719, "signific": [719, 720, 723, 728], "reduct": [719, 723, 733], "namhoon": 719, "lee": 719, "thalaiyasingam": 719, "ajanthan": 719, "philip": 719, "torr": 719, "2019": 719, "zafrir": 719, "ofir": 719, "ariel": 719, "larei": 719, "boudoukh": 719, "mosh": 719, "wasserblat": 719, "2111": 719, "05754": 719, "2021": 719, "kwon": 719, "kim": 719, "mahonei": 719, "hassoun": 719, "keutzer": 719, "gholami": 719, "pp": 719, "24101": 719, "24116": 719, "frantar": [719, 725], "alistarh": 719, "medium": 720, "aug": 720, "juli": 720, "onnxcommunitymeetup2023": 720, "chatbot": 720, "june": 720, "msft": 720, "netflix": 720, "apr": 720, "mlperf": [720, 734], "5x": 720, "\u96c6\u6210\u82f1\u7279\u5c14": 720, "\u817e\u8baf\u4e91taco": 720, "kit\u4e3aai\u5e94\u7528\u5e26\u6765\u9ad8\u6548\u5f02\u6784\u52a0\u901f\u670d\u52a1": 720, "mar": 720, "heterogen": 720, "jan": 720, "busi": 720, "amx": 720, "journei": 720, "dec": 720, "mleffici": 720, "deepen": 720, "foundat": 720, "intellig": 720, "vmware": 720, "applianc": 720, "bitnami": 720, "nov": 720, "sota": 720, "twitter": 720, "linkedin": 720, "zone": 720, "land": 720, "pat": 720, "keynot": 720, "intelon": 720, "chines": 720, "purif": 720, "sacrif": 720, "jun": 720, "partner": 720, "feb": 720, "joint": 720, "bilibili": 720, "gestalt": 720, "ml": 720, "doubl": 720, "abound": 720, "lpot": [720, 726], "nextplatform": 720, "cern": 720, "gan": 720, "3dgan": 720, "iml": 720, "workshop": 720, "asplo": 720, "18": [720, 734], "highli": [720, 725], "intelcaff": 720, "aris": 721, "henc": 721, "onnxrt_qoper": 721, "quant_aware_train": 721, "weight_compress": [721, 733], "initial_spars": [721, 733], "prune_typ": [721, 733], "basic_magnitud": [721, 733], "update_frequ": 721, "prune_domain": 721, "tile_pattern_1x1": 721, "invent": 722, "cost": [722, 725], "theoret": [722, 725], "zeropoint": 722, "255": [722, 728], "overflow": 722, "unseen": 722, "peopl": 722, "mimic": 722, "fact": 722, "ultim": 722, "pain": 722, "lossi": 722, "philosophi": 722, "neither": 722, "nor": 722, "val_load": 722, "avg": 722, "themselv": 722, "dmlexecutionprovid": 722, "meanwhil": 723, "substanti": 723, "pose": 723, "challeng": 723, "greatli": [723, 725], "constrain": 723, "grei": 723, "blue": 723, "rectangl": 723, "w8a8": [723, 725], "10005": 723, "rtn_arg": [723, 725], "ouput_dir": 723, "fp32_model_path": 723, "int8_model_path": 723, "ON": 724, "forc": 724, "postposttrainingquantconfig": 724, "bf16wrapper": 724, "retrac": 724, "preval": 725, "grow": 725, "demand": 725, "trade": 725, "bottleneck": 725, "roughli": 725, "speak": 725, "capac": [725, 727], "flop": 725, "famou": 725, "approx": 725, "bmm": 725, "100x": 725, "excel": 725, "stai": [725, 728], "quantif": [725, 728], "think": 725, "intuit": [725, 728], "uniformli": 725, "qlora": 725, "invers": 725, "restor": 725, "protect": 725, "inspir": 725, "c_": 725, "normalfloat": 725, "e2m1": 725, "bnb": 725, "805": 725, "awq_arg": 725, "gptq_arg": 725, "mitig": 725, "date": 725, "sym_full_rang": 725, "qweight_config_path": 725, "gptq_config_path": 725, "gptq_config": 725, "use_full_length": 725, "compressed_model": 725, "omit": 725, "rtn_g32asym": 725, "gptq_g32asym": 725, "gptq_g32asym_disable_last_matmul": 725, "gptq_g128asym": 725, "awq_g32asym": 725, "xiao": [725, 728], "guangxuan": [725, 728], "2211": [725, 728], "10438": [725, 728], "wei": [725, 728], "xiui": [725, 728], "suppress": [725, 728], "2209": [725, 728], "13325": [725, 728], "lin": 725, "ji": 725, "00978": 725, "elia": 725, "dettmer": 725, "tim": 725, "2305": 725, "14314": 725, "site": 726, "sed": 726, "your_script": 726, "backbon": 727, "sigopt_experiment_id": 727, "nc": [727, 731], "suffici": 727, "ordinari": 727, "latenc": [727, 731], "8266": 727, "8372": 727, "2132": 727, "83": [727, 728, 734], "7495": 727, "8299": 727, "8294": 727, "85": [727, 728, 734], "0837": 727, "8291": 727, "4469": 727, "gigant": 728, "systemat": 728, "migrat": [728, 732], "difficulti": 728, "mathemat": 728, "allevi": 728, "coarsest": 728, "finer": [728, 731], "matric": 728, "similarli": 728, "finest": 728, "consumpt": 728, "suppos": 728, "6839": 728, "4741": 728, "7451": 728, "9301": 728, "1742": 728, "6835": 728, "q_min": 728, "q_max": 728, "q_x": 728, "clamp_": 728, "round_": 728, "w_q": 728, "00296431384049356": 728, "59": [728, 734], "172": [728, 734], "192": 728, "w_dq": 728, "2220": 728, "1510": 728, "2420": 728, "2570": 728, "0500": 728, "1890": 728, "mseloss": 728, "1983354538679123": 728, "6848": 728, "4743": 728, "7440": 728, "9308": 728, "1749": 728, "385297635664756e": 728, "07": [728, 733, 734], "quantize_per_channel": 728, "x_tmp": 728, "detach": 728, "keepdim": 728, "dequantize_per_channel": 728, "0029": [728, 734], "0036": 728, "162": [728, 734], "48": [728, 734], "72": [728, 734], "93": [728, 734], "207": 728, "139": [728, 734], "6837": 728, "4734": 728, "1751": 728, "6821": 728, "637690492221736e": 728, "6376e": 728, "3852e": 728, "cdot": 728, "quantize_per_tensor_absmax": 728, "n_bit": 728, "div_": 728, "0806": 728, "7589": 728, "6038": 728, "3815": 728, "5040": 728, "7174": 728, "5444": 728, "5826": 728, "7772": 728, "5555": 728, "3740": 728, "3253": 728, "0698": 728, "1381": 728, "5972": [728, 734], "0086": 728, "0737": 728, "8298": 728, "6883": 728, "2991": 728, "1601": 728, "6506": 728, "8246": 728, "3924": 728, "3845": 728, "8768": 728, "w_scale": 728, "x_q": 728, "x_scale": 728, "84": [728, 734], "120": 728, "0059755356051027775": 728, "89": [728, 734], "119": 728, "57": [728, 734], "006533813662827015": 728, "y_q": 728, "17509": 728, "7608": 728, "4055": 728, "16599": 728, "21020": 728, "10016": 728, "9860": 728, "22444": 728, "y_dq": 728, "6836": 728, "2970": 728, "1583": 728, "6481": 728, "8207": 728, "3911": 728, "3850": 728, "8763": 728, "though": 728, "simplic": 728, "fp1": 728, "fp2": 728, "subsect": [728, 733], "x1": [728, 731], "x2": [728, 731], "herebi": 728, "optdecoderlay": 728, "blockwis": 728, "waq": 728, "overhead": 728, "hardtanh": 728, "t5norm": 728, "llamanorm": 728, "groupnorm": 728, "lambada": 728, "openai": [728, 734], "sweet": 728, "spot": 728, "bigscienc": [728, 734], "560m": 728, "354": 728, "3542": 728, "1b7": 728, "4634": 728, "4936": 728, "518": 728, "5185": 728, "7b1": [728, 734], "5764": [728, 734], "5977": 728, "bloomz": [728, 734], "3947": 728, "3930": 728, "4828": 728, "4906": 728, "5018": 728, "4980": 728, "5593": [728, 734], "5552": 728, "125m": 728, "379": 728, "3757": 728, "350m": 728, "4516": 728, "4533": 728, "5789": 728, "5742": 728, "6365": 728, "6404": 728, "6769": [728, 734], "6804": [728, 734], "6872": 728, "6814": 728, "7149": 728, "7128": 728, "66b": 728, "7398": 728, "7326": 728, "7361": [728, 734], "7357": 728, "7627": [728, 734], "7590": 728, "7759": [728, 734], "7840": 728, "65b": 728, "7908": 728, "7957": 728, "7392": [728, 734], "7335": [728, 734], "chat": [728, 734], "7058": [728, 734], "6994": 728, "7677": [728, 734], "7615": [728, 734], "6831": [728, 734], "mbzuai": 728, "124m": 728, "3804": 728, "3887": 728, "774m": 728, "5048": 728, "5057": 728, "5b": 728, "5443": [728, 734], "5436": 728, "mosaicml": [728, 734], "655": [728, 734], "6499": 728, "stabilityai": 728, "stablelm": 728, "4172": 728, "4149": 728, "togethercomput": 728, "redpajama": 728, "incit": 728, "6542": 728, "6735": 728, "6718": 728, "6740": [728, 734], "6569": 728, "6621": 728, "7143": 728, "7221": 728, "6895": 728, "6953": [728, 734], "databrick": [728, 734], "6866": [728, 734], "6297": 728, "6247": 728, "6437": [728, 734], "6392": 728, "7332": 728, "7632": 728, "asterisk": 728, "consider": 728, "arang": 728, "tolist": 728, "default_alpha": 728, "step_siz": 728, "shared_criterion": 728, "do_blockwis": 728, "jason": 728, "emerg": 728, "transact": 728, "yvinec": 728, "edouard": 728, "proceed": 728, "cvf": 728, "winter": 728, "instrument": 729, "writer": 729, "_pre_eval_hook": 729, "_post_eval_hook": 729, "submodul": 729, "whitelist": 729, "_recordingobserv": 729, "output_tensors_dict": 729, "current_it": 729, "get_tensor_valu": 729, "_observer_forward_hook": 729, "activation_post_process": 729, "_add_observer_": 729, "named_children": 729, "leaf": 729, "add_modul": 729, "register_forward_hook": 729, "dump_tim": 729, "summarywrit": 729, "_acc": 729, "tune_": 729, "add_graph": 729, "get_observer_dict": 729, "observer_dict": 729, "is_quant": 729, "add_histogram": 729, "shell": 729, "bind_al": 729, "logdir_spec": 729, "tune_0_acc0": 729, "tune_1": 729, "tune_1_acc0": 729, "79": [729, 734], "baseline_acc_0": 729, "776": 729, "tune_1_acc_0": 729, "095": 729, "runs_v3": 729, "run_tuning_dump_tensor": 729, "inceptionv3": 729, "run_quant": 729, "topologi": 729, "nc_inceptionv3": 729, "inceptionv3_dump_tensor": 729, "eightbit": 729, "disappear": 729, "centercrop": 730, "randomcrop": 730, "cropres": 730, "decodeimag": 730, "jpeg": 730, "encodejp": 730, "alignimagechannel": 730, "68": [730, 734], "116": 730, "78": [730, 734], "103": 730, "94": [730, 734], "017": 730, "bilinearimagenet": [730, 733], "topilimag": 730, "padding_mod": 730, "border": 730, "pixel": 730, "edg": 730, "colorjitt": 730, "bright": 730, "satur": 730, "hue": 730, "jitter": 730, "tondarrai": 730, "o1": 731, "human": 731, "aggress": 731, "classic": 731, "flowchart": 731, "htmllabel": 731, "td": 731, "classdef": 731, "itemstyl": 731, "cce5ff": 731, "stroke": 731, "99ccff": 731, "s1": 731, "s2": 731, "s3": 731, "s4": 731, "s5": 731, "s6": 731, "s7": 731, "nbsp": 731, "subgraphstyl": 731, "ffffff": 731, "attempt": 731, "post_training_auto_qu": 731, "increment": 731, "ii": 731, "spent": 731, "hawq_v2_loss": 731, "model_loss": 731, "black": 731, "compli": 731, "posterior": 731, "short": 731, "loglevel": 731, "endlessli": 731, "perspect": 731, "smbo": 731, "appl": 731, "surrog": 731, "densiti": 731, "parzen": 731, "greatest": 731, "hour": 731, "dai": 731, "next_tune_cfg": 731, "overridden": 731, "replic": 731, "replica": 731, "fed": 731, "synchron": 731, "number_of_process": 731, "run_cmd": 731, "abctunestrategi": 731, "familiar": 732, "notebook": 732, "introduct": 732, "organ": 733, "logic": 733, "mobilenet_v1": 733, "40": [733, 734], "beta_1": 733, "beta_2": 733, "epsilon": 733, "sparsecategoricalcrossentropi": 733, "sum_over_batch_s": 733, "from_logit": 733, "54": [733, 734], "19": [733, 734], "09": 734, "1x": 734, "platinum": 734, "8480": 734, "8ghz": 734, "56": 734, "ht": 734, "turbo": 734, "256gb": 734, "16x16gb": 734, "ddr5": 734, "4800": 734, "mt": 734, "bio": 734, "3a14": 734, "tel2p1": 734, "microcod": 734, "0x2b0001b0": 734, "gcc": 734, "20210514": 734, "red": 734, "hat": 734, "visit": 734, "1s4c14ins1bsthroughput": 734, "sec": 734, "74": 734, "2914": 734, "621": 734, "69x": 734, "76": 734, "23": 734, "46": 734, "2160": 734, "545": 734, "47": 734, "96x": 734, "resnet101": 734, "77": 734, "37": 734, "1508": 734, "428": 734, "53x": 734, "70": 734, "44": 734, "69": 734, "3290": 734, "1229": 734, "68x": 734, "38": 734, "73": 734, "2404": 734, "1048": 734, "49": 734, "29x": 734, "71": 734, "1669": 734, "33x": 734, "1073": 734, "245": 734, "38x": 734, "374": 734, "52": 734, "18x": 734, "96": 734, "5478": 734, "1756": 734, "12x": 734, "4133": 734, "1748": 734, "36x": 734, "1534": 734, "236": 734, "62": 734, "49x": 734, "vgg19": 734, "1377": 734, "197": 734, "resnetv2": 734, "39": 734, "1125": 734, "656": 734, "71x": 734, "709": 734, "367": 734, "00": 734, "93x": 734, "152": 734, "03": 734, "497": 734, "265": 734, "87x": 734, "densenet": 734, "121": 734, "557": 734, "67": 734, "61": 734, "22x": 734, "161": 734, "29": 734, "353": 734, "235": 734, "50x": 734, "169": 734, "65": 734, "41": 734, "435": 734, "385": 734, "13x": 734, "efficientnet": 734, "b0": 734, "786": 734, "723": 734, "09x": 734, "130": 734, "23x": 734, "1291": 734, "683": 734, "89x": 734, "61x": 734, "1295": 734, "453": 734, "85x": 734, "242": 734, "31x": 734, "cnn": 734, "80x": 734, "43": 734, "81x": 734, "166": 734, "07x": 734, "16x": 734, "26": 734, "173": 734, "yolov3": 734, "82": 734, "230": 734, "92": 734, "36": 734, "37x": 734, "58x": 734, "86": 734, "416": 734, "35x": 734, "88x": 734, "51": 734, "17x": 734, "75552": 734, "50803": 734, "1s56c1ins1bsthroughput": 734, "60": 734, "64x": 734, "1673": 734, "653": 734, "56x": 734, "1170": 734, "329": 734, "55x": 734, "977": 734, "335": 734, "91x": 734, "resnest50": 734, "81": 734, "10x": 734, "resnext101_32x8d": 734, "562": 734, "109": 734, "efficientnet_b0": 734, "696": 734, "667": 734, "04x": 734, "efficientnet_b3": 734, "508": 734, "397": 734, "28x": 734, "efficientnet_b7": 734, "234": 734, "149": 734, "57x": 734, "peleenet": 734, "858": 734, "588": 734, "46x": 734, "se_resnext50_32x4d": 734, "739": 734, "283": 734, "yolo": 734, "141": 734, "99x": 734, "174": 734, "camembert": 734, "395": 734, "171": 734, "30x": 734, "53": 734, "795": 734, "341": 734, "744": 734, "343": 734, "163": 734, "funnel": 734, "182": 734, "65x": 734, "399": 734, "21x": 734, "407": 734, "412": 734, "stsb": 734, "413": 734, "39x": 734, "409": 734, "75x": 734, "401": 734, "70x": 734, "76x": 734, "reform": 734, "crime": 734, "punish": 734, "446": 734, "398": 734, "lvwerra": 734, "pegasu": 734, "samsum": 734, "102": 734, "770": 734, "450": 734, "14x": 734, "whisper": 734, "25x": 734, "abeja": 734, "neox": 734, "japanes": 734, "90x": 734, "1646": 734, "657": 734, "1098": 734, "322": 734, "41x": 734, "568": 734, "19x": 734, "1383": 734, "761": 734, "82x": 734, "32x": 734, "5701": 734, "1593": 734, "2090": 734, "685": 734, "05x": 734, "resnext101_32x16d_wsl": 734, "556": 734, "01x": 734, "86x": 734, "558": 734, "11x": 734, "lambada_openai": 734, "hellaswag": 734, "winogrand": 734, "piqa": 734, "word_perplex": 734, "4954": 734, "6409": 734, "7541": 734, "6434": 734, "8816": 734, "gptqw4g128asym": 734, "679": 734, "4895": 734, "6433": 734, "7476": 734, "6399": 734, "9945": 734, "0999": 734, "gptqw4g32asym": 734, "6829": 734, "4923": 734, "6401": 734, "7486": 734, "6410": 734, "9963": 734, "0141": 734, "gptqw4g128sym": 734, "4907": 734, "6361": 734, "7443": 734, "6390": 734, "9932": 734, "1498": 734, "gptqw4g32sym": 734, "6911": 734, "4899": 734, "6448": 734, "7497": 734, "6439": 734, "0008": 734, "0927": 734, "5049": 734, "6543": 734, "7628": 734, "6497": 734, "2862": 734, "4984": 734, "6535": 734, "7568": 734, "6473": 734, "9962": 734, "4193": 734, "6885": 734, "4973": 734, "753": 734, "6455": 734, "9935": 734, "4607": 734, "decapoda": 734, "5642": 734, "6709": 734, "7835": 734, "6887": 734, "4202": 734, "7244": 734, "5603": 734, "6614": 734, "6824": 734, "9909": 734, "5881": 734, "5911": 734, "7009": 734, "7878": 734, "7106": 734, "212": 734, "7518": 734, "5843": 734, "6961": 734, "7911": 734, "4319": 734, "7572": 734, "5898": 734, "7056": 734, "7894": 734, "7105": 734, "9998": 734, "3429": 734, "7596": 734, "5841": 734, "6977": 734, "7905": 734, "7080": 734, "4916": 734, "6266": 734, "7277": 734, "8096": 734, "7350": 734, "2384": 734, "778": 734, "624": 734, "7269": 734, "8047": 734, "7334": 734, "9979": 734, "4237": 734, "7706": 734, "6239": 734, "7285": 734, "8058": 734, "7322": 734, "4697": 734, "7836": 734, "6195": 734, "7337": 734, "9983": 734, "5604": 734, "5732": 734, "648": 734, "7715": 734, "6746": 734, "7107": 734, "6982": 734, "5637": 734, "6527": 734, "7704": 734, "6713": 734, "9950": 734, "9702": 734, "5682": 734, "6575": 734, "7758": 734, "6742": 734, "9994": 734, "9317": 734, "567": 734, "6902": 734, "7353": 734, "6622": 734, "7829": 734, "6862": 734, "9942": 734, "9635": 734, "7246": 734, "5617": 734, "6756": 734, "7797": 734, "6854": 734, "9931": 734, "2799": 734, "7312": 734, "6059": 734, "7103": 734, "7077": 734, "2213": 734, "7273": 734, "6018": 734, "7088": 734, "7742": 734, "7030": 734, "9934": 734, "2538": 734, "083": 734, "7283": 734, "6053": 734, "7024": 734, "7764": 734, "7031": 734, "1889": 734, "727": 734, "5997": 734, "7018": 734, "9916": 734, "2504": 734, "7122": 734, "8984": 734, "5933": 734, "689": 734, "7851": 734, "7075": 734, "1556": 734, "448": 734, "7675": 734, "5934": 734, "7856": 734, "7111": 734, "9984": 734, "1514": 734, "927": 734, "7566": 734, "5899": 734, "7032": 734, "9953": 734, "1374": 734, "728": 734, "4628": 734, "6456": 734, "6029": 734, "6438": 734, "5799": 734, "4542": 734, "6004": 734, "9957": 734, "0626": 734, "4789": 734, "6134": 734, "7432": 734, "5525": 734, "4731": 734, "6504": 734, "7617": 734, "6094": 734, "7828": 734, "5098": 734, "7622": 734, "6505": 734, "3242": 734, "6878": 734, "5058": 734, "6393": 734, "7633": 734, "6491": 734, "9978": 734, "5514": 734, "6864": 734, "5084": 734, "6519": 734, "6509": 734, "0006": 734, "4728": 734, "6876": 734, "5045": 734, "6474": 734, "9952": 734, "6379": 734, "5282": 734, "614": 734, "7448": 734, "6312": 734, "6377": 734, "5228": 734, "5991": 734, "6261": 734, "9919": 734, "4096": 734, "neo": 734, "6224": 734, "4271": 734, "577": 734, "722": 734, "5871": 734, "9359": 734, "6123": 734, "4227": 734, "5738": 734, "7203": 734, "5823": 734, "9917": 734, "3377": 734, "615": 734, "4259": 734, "5714": 734, "7247": 734, "9951": 734, "2083": 734, "6154": 734, "4208": 734, "5777": 734, "7198": 734, "5834": 734, "9937": 734, "3121": 734, "20b": 734, "7233": 734, "5359": 734, "7753": 734, "195": 734, "7186": 734, "5328": 734, "7699": 734, "6687": 734, "9922": 734, "3463": 734, "7268": 734, "533": 734, "659": 734, "6726": 734, "2897": 734, "5718": 734, "6859": 734, "7927": 734, "6890": 734, "9324": 734, "7006": 734, "5655": 734, "6803": 734, "7965": 734, "6857": 734, "1515": 734, "5752": 734, "6748": 734, "7845": 734, "6724": 734, "5951": 734, "6472": 734, "5716": 734, "6685": 734, "784": 734, "6678": 734, "8539": 734, "6918": 734, "5819": 734, "678": 734, "6861": 734, "8863": 734, "5765": 734, "6827": 734, "7873": 734, "6832": 734, "9958": 734, "1451": 734, "storywrit": 734, "693": 734, "5477": 734, "663": 734, "6719": 734, "9125": 734, "6661": 734, "7813": 734, "6693": 734, "9961": 734, "1137": 734, "rw": 734, "6604": 734, "5419": 734, "6598": 734, "6594": 734, "7616": 734, "6484": 734, "5369": 734, "7807": 734, "6559": 734, "9947": 734, "9411": 734, "6571": 734, "5398": 734, "6582": 734, "6579": 734, "8809": 734, "652": 734, "535": 734, "7682": 734, "6532": 734, "9906": 734, "0048": 734, "5177": 734, "6669": 734, "7824": 734, "5053": 734, "6301": 734, "5142": 734, "6654": 734, "6483": 734, "9933": 734, "8146": 734, "517": 734, "9941": 734, "1566": 734, "724": 734, "1567": 734, "716": 734, "1414": 734, "718": 734, "97x": 734, "1459": 734, "721": 734, "02x": 734, "1582": 734, "752": 734, "7139": 734, "4289": 734, "66x": 734, "4080": 734, "7236": 734, "4299": 734, "6842": 734, "4496": 734, "52x": 734, "591": 734, "178": 734, "183": 734, "590": 734, "179": 734, "42x": 734, "5703": 734, "2578": 734, "5610": 734, "2603": 734, "shufflenet": 734, "6689": 734, "3690": 734, "5692": 734, "3758": 734, "51x": 734, "googlenet": 734, "1792": 734, "1111": 734, "1821": 734, "1104": 734, "squeezenet": 734, "9472": 734, "5582": 734, "9861": 734, "5566": 734, "77x": 734, "caffenet": 734, "3348": 734, "1141": 734, "3509": 734, "1142": 734, "2426": 734, "987": 734, "2208": 734, "1016": 734, "zfnet": 734, "930": 734, "532": 734, "919": 734, "417": 734, "1880": 734, "1159": 734, "62x": 734, "1798": 734, "1151": 734, "2890": 734, "1380": 734, "2548": 734, "1362": 734, "507": 734, "94x": 734, "1286": 734, "904": 734, "1121": 734, "856": 734, "829": 734, "1044": 734, "790": 734, "849": 734, "627": 734, "79x": 734, "yolov4": 734, "duc": 734, "tini": 734, "1119": 734, "ultra": 734, "8537": 734, "1934": 734, "emot": 734, "ferplu": 734, "3568": 734, "arcfac": 734, "494": 734, "244": 734, "226": 734, "392": 734, "223": 734, "integerop": 734, "473": 734, "548": 734, "964": 734, "540": 734, "394": 734, "602": 734, "487": 734, "222": 734, "20x": 734, "189": 734, "146": 734, "125": 734, "bidaf": 734, "2757": 734, "2277": 734, "gpt2": 734, "360": 734, "213": 734, "490": 734, "304": 734, "214": 734, "347": 734, "272": 734, "216": 734, "26x": 734, "489": 734, "27x": 734, "l12": 734, "h384": 734, "1054": 734, "585": 734, "1072": 734, "890": 734, "746": 734, "268": 734, "211": 734, "l6": 734, "1958": 734, "1130": 734, "73x": 734, "electra": 734, "discrimin": 734, "1797": 734, "1077": 734, "67x": 734, "1930": 734, "1139": 734, "mini": 734, "5510": 734, "3334": 734, "5627": 734, "3365": 734, "108": 734, "110": 734, "bart": 734, "15x": 734, "deberta": 734, "168": 734, "145": 734, "spanbert": 734, "63x": 734, "multilingu": 734, "113": 734, "159": 734, "40x": 734, "distilgpt2": 734, "layoutlm": 734, "layoutlmv2": 734, "codebert": 734, "47x": 734, "fcn": 734, "perplex": 734, "2788": 734, "7002": 734, "4124": 734, "9921": 734, "3950": 734, "5711": 734, "9892": 734, "9163": 734, "7240": 734, "9902": 734, "0438": 734, "7634": 734, "1186": 734, "9944": 734, "1276": 734, "7543": 734, "6181": 734, "rtnw4g32asym": 734, "6496": 734, "9967": 734, "7964": 734, "6612": 734, "rtnw4g32sym": 734, "7941": 734, "7243": 734, "9971": 734, "taskdataset": 734, "accuracyspars": 734, "ratiospars": 734, "commentsbalancedor": 734, "unbalanc": 734, "answeringsquad": 734, "87f1": 734, "momentumunbalanc": 734, "momentumbalanc": 734, "90f1": 734, "59f1": 734, "23f1": 734, "classificationmrpc": 734, "52f1": 734, "26f1": 734, "classificationsst": 734, "61accuraci": 734, "recognitionimagenet": 734, "95top1": 734, "v5s6": 734, "detectioncoco": 734, "ap0": 734, "6ap0": 734, "393": 734, "584": 734, "34f1": 734, "lassounbalanc": 734, "classificationmnli": 734, "mm": 734, "allbalanc": 734, "32accuraci": 734, "sensitivitybalanc": 734, "classificationqqp": 734, "classificationqnli": 734, "54accuraci": 734, "em": 734, "mobilenetv2": 734, "wideresnet40": 734, "9522": 734, "8178": 734, "0213": 734, "8235": 734, "027": 734, "5494": 734, "7153": 734, "5540": 734, "0046": 734, "5523": 734, "vgg": 734, "bn": 734, "7022": 734, "7415": 734, "7025": 734, "0003": 734, "6739": 734, "7399": 734, "6845": 734, "0106": 734, "blendcnn": 734, "7034": 734, "8382": 734, "bilstm": 734, "8314": 734, "9403": 734, "9048": 734, "0734": 734, "7323": 734, "8256": 734, "8084": 734, "8814": 734, "7442": 734, "8371": 734, "0119": 734, "0115": 734, "tinybert": 734, "8018": 734, "8044": 734, "8363": 734, "8411": 734, "8025": 734, "8074": 734, "0007": 734, "0030": 734, "8626": 734, "9091": 734, "8782": 734, "8684": 734, "8259": 734, "0058": 734, "distilroberta": 734, "6057": 734, "6187": 734, "0130": 734, "c6i": 734, "2xlarg": 734, "c6a": 734, "c6g": 734, "a100cuda": 734, "executionprovid": 734}, "objects": {"": [[0, 0, 0, "-", "block_mask"], [369, 0, 0, "-", "neural_compressor"]], "neural_compressor": [[2, 0, 0, "-", "adaptor"], [180, 0, 0, "-", "algorithm"], [183, 0, 0, "-", "benchmark"], [186, 0, 0, "-", "common"], [201, 0, 0, "-", "compression"], [234, 0, 0, "-", "conf"], [236, 0, 0, "-", "config"], [237, 0, 0, "-", "contrib"], [262, 0, 0, "-", "data"], [316, 0, 0, "-", "experimental"], [376, 0, 0, "-", "metric"], [378, 0, 0, "-", "mix_precision"], [380, 0, 0, "-", "model"], [388, 0, 0, "-", "objective"], [400, 0, 0, "-", "onnxrt"], [410, 0, 0, "-", "profiling"], [432, 0, 0, "-", "quantization"], [440, 0, 0, "-", "strategy"], [452, 0, 0, "-", "template"], [461, 0, 0, "-", "tensorflow"], [609, 0, 0, "-", "torch"], [621, 0, 0, "-", "training"], [625, 0, 0, "-", "utils"], [634, 0, 0, "-", "version"]], "neural_compressor.adaptor": [[1, 0, 0, "-", "adaptor"], [3, 0, 0, "-", "keras"], [7, 0, 0, "-", "keras_utils"], [11, 0, 0, "-", "mxnet"], [12, 0, 0, "-", "mxnet_utils"], [14, 0, 0, "-", "onnxrt"], [17, 0, 0, "-", "ox_utils"], [45, 0, 0, "-", "pytorch"], [46, 0, 0, "-", "query"], [47, 0, 0, "-", "tensorflow"], [111, 0, 0, "-", "tf_utils"], [159, 0, 0, "-", "torch_utils"]], "neural_compressor.adaptor.adaptor": [[1, 1, 1, "", "Adaptor"], [1, 2, 1, "", "adaptor_registry"]], "neural_compressor.adaptor.keras": [[3, 1, 1, "", "KerasAdaptor"]], "neural_compressor.adaptor.keras_utils": [[4, 0, 0, "-", "conv2d"], [5, 0, 0, "-", "dense"], [6, 0, 0, "-", "depthwise_conv2d"], [8, 0, 0, "-", "pool2d"], [9, 0, 0, "-", "quantizer"], [10, 0, 0, "-", "separable_conv2d"]], "neural_compressor.adaptor.mxnet": [[11, 1, 1, "", "MXNetQuery"], [11, 1, 1, "", "MxNetAdaptor"]], "neural_compressor.adaptor.mxnet_utils": [[13, 0, 0, "-", "util"]], "neural_compressor.adaptor.mxnet_utils.util": [[13, 1, 1, "", "CalibCollector"], [13, 1, 1, "", "CalibData"], [13, 1, 1, "", "CollectorBase"], [13, 1, 1, "", "DataIterLoader"], [13, 1, 1, "", "DataLoaderWrap"], [13, 1, 1, "", "NameCollector"], [13, 1, 1, "", "OpType"], [13, 1, 1, "", "TensorCollector"], [13, 2, 1, "", "amp_convert"], [13, 2, 1, "", "calib_model"], [13, 2, 1, "", "check_mx_version"], [13, 2, 1, "", "combine_capabilities"], [13, 2, 1, "", "create_data_example"], [13, 2, 1, "", "distribute_calib_tensors"], [13, 2, 1, "", "ensure_list"], [13, 2, 1, "", "fuse"], [13, 2, 1, "", "get_framework_name"], [13, 2, 1, "", "is_model_quantized"], [13, 2, 1, "", "isiterable"], [13, 2, 1, "", "make_module"], [13, 2, 1, "", "make_nc_model"], [13, 2, 1, "", "make_symbol_block"], [13, 2, 1, "", "ndarray_to_device"], [13, 2, 1, "", "parse_tune_config"], [13, 2, 1, "", "prepare_dataloader"], [13, 2, 1, "", "prepare_model"], [13, 2, 1, "", "prepare_model_data"], [13, 2, 1, "", "quantize_sym_model"], [13, 2, 1, "", "query_quantizable_nodes"], [13, 2, 1, "", "run_forward"]], "neural_compressor.adaptor.onnxrt": [[14, 1, 1, "", "ONNXRTQuery"], [14, 1, 1, "", "ONNXRT_IntegerOpsAdaptor"], [14, 1, 1, "", "ONNXRT_QDQAdaptor"], [14, 1, 1, "", "ONNXRT_QLinearOpsAdaptor"], [14, 1, 1, "", "ONNXRT_WeightOnlyAdaptor"], [14, 1, 1, "", "ONNXRUNTIMEAdaptor"]], "neural_compressor.adaptor.ox_utils": [[15, 0, 0, "-", "calibration"], [16, 0, 0, "-", "calibrator"], [29, 0, 0, "-", "operators"], [41, 0, 0, "-", "quantizer"], [42, 0, 0, "-", "smooth_quant"], [43, 0, 0, "-", "util"], [44, 0, 0, "-", "weight_only"]], "neural_compressor.adaptor.ox_utils.calibration": [[15, 1, 1, "", "ONNXRTAugment"]], "neural_compressor.adaptor.ox_utils.calibrator": [[16, 1, 1, "", "CalibratorBase"], [16, 1, 1, "", "HistogramCollector"], [16, 1, 1, "", "KLCalibrator"], [16, 1, 1, "", "MinMaxCalibrator"], [16, 1, 1, "", "PercentileCalibrator"], [16, 2, 1, "", "calib_registry"], [16, 2, 1, "", "smooth_distribution"]], "neural_compressor.adaptor.ox_utils.operators": [[18, 0, 0, "-", "activation"], [19, 0, 0, "-", "argmax"], [20, 0, 0, "-", "attention"], [21, 0, 0, "-", "binary_op"], [22, 0, 0, "-", "concat"], [23, 0, 0, "-", "conv"], [24, 0, 0, "-", "direct_q8"], [25, 0, 0, "-", "embed_layernorm"], [26, 0, 0, "-", "gather"], [27, 0, 0, "-", "gavgpool"], [28, 0, 0, "-", "gemm"], [30, 0, 0, "-", "lstm"], [31, 0, 0, "-", "matmul"], [32, 0, 0, "-", "maxpool"], [33, 0, 0, "-", "norm"], [34, 0, 0, "-", "ops"], [35, 0, 0, "-", "pad"], [36, 0, 0, "-", "pooling"], [37, 0, 0, "-", "reduce"], [38, 0, 0, "-", "resize"], [39, 0, 0, "-", "split"], [40, 0, 0, "-", "unary_op"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[18, 1, 1, "", "ActivationOperator"], [18, 1, 1, "", "Float16ActivationOperator"], [18, 1, 1, "", "QActivationOperator"], [18, 1, 1, "", "RemovableActivationOperator"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[19, 1, 1, "", "ArgMaxOperator"], [19, 1, 1, "", "QArgMaxOperator"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[20, 1, 1, "", "AttentionOperator"], [20, 1, 1, "", "QAttentionOperator"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[21, 1, 1, "", "BinaryDirect8BitOperator"], [21, 1, 1, "", "BinaryOperator"], [21, 1, 1, "", "Float16BinaryOperator"], [21, 1, 1, "", "QBinaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[22, 1, 1, "", "ConcatOperator"], [22, 1, 1, "", "QConcatOperator"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[23, 1, 1, "", "ConvOperator"], [23, 1, 1, "", "QConvOperator"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[24, 1, 1, "", "Direct8BitOperator"], [24, 1, 1, "", "QDirectOperator"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[25, 1, 1, "", "EmbedLayerNormalizationOperator"], [25, 1, 1, "", "QEmbedLayerNormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[26, 1, 1, "", "GatherOperator"], [26, 1, 1, "", "QGatherOperator"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[27, 1, 1, "", "GlobalAveragePoolOperator"], [27, 1, 1, "", "QGlobalAveragePoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[28, 1, 1, "", "GemmOperator"], [28, 1, 1, "", "QGemmOperator"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[30, 1, 1, "", "LSTMOperator"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[31, 1, 1, "", "FusedMatMulOperator"], [31, 1, 1, "", "MatMulOperator"], [31, 1, 1, "", "QMatMulOperator"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[32, 1, 1, "", "MaxPoolOperator"], [32, 1, 1, "", "QMaxPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.norm": [[33, 1, 1, "", "BatchNormalizationOperator"], [33, 1, 1, "", "NormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[34, 1, 1, "", "Operator"], [34, 1, 1, "", "QOperator"], [34, 2, 1, "", "op_registry"], [34, 2, 1, "", "qop_registry"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[35, 1, 1, "", "PadOperator"], [35, 1, 1, "", "QPadOperator"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[36, 1, 1, "", "PoolOperator"], [36, 1, 1, "", "QPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.reduce": [[37, 1, 1, "", "ReduceMinMaxOperator"], [37, 1, 1, "", "ReduceOperator"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[38, 1, 1, "", "QResizeOperator"], [38, 1, 1, "", "ResizeOperator"]], "neural_compressor.adaptor.ox_utils.operators.split": [[39, 1, 1, "", "QSplitOperator"], [39, 1, 1, "", "SplitOperator"]], "neural_compressor.adaptor.ox_utils.operators.unary_op": [[40, 1, 1, "", "UnaryDirect8BitOperator"], [40, 1, 1, "", "UnaryOperator"]], "neural_compressor.adaptor.ox_utils.quantizer": [[41, 1, 1, "", "Quantizer"]], "neural_compressor.adaptor.ox_utils.smooth_quant": [[42, 1, 1, "", "ORTSmoothQuant"], [42, 2, 1, "", "get_quant_dequant_output"], [42, 2, 1, "", "make_sub_graph"], [42, 2, 1, "", "quant_dequant_data"]], "neural_compressor.adaptor.ox_utils.util": [[43, 1, 1, "", "QuantFormat"], [43, 1, 1, "", "QuantType"], [43, 1, 1, "", "QuantizationMode"], [43, 1, 1, "", "QuantizedInitializer"], [43, 1, 1, "", "QuantizedValue"], [43, 1, 1, "", "QuantizedValueType"], [43, 1, 1, "", "ValueInfo"], [43, 2, 1, "", "attribute_to_kwarg"], [43, 2, 1, "", "calculate_scale_zp"], [43, 2, 1, "", "cast_tensor"], [43, 2, 1, "", "collate_preds"], [43, 2, 1, "", "dequantize_data"], [43, 2, 1, "", "dequantize_data_with_scale_zero"], [43, 2, 1, "", "dtype_to_name"], [43, 2, 1, "", "find_by_name"], [43, 2, 1, "", "float_to_bfloat16"], [43, 2, 1, "", "float_to_float16"], [43, 2, 1, "", "get_node_original_name"], [43, 2, 1, "", "infer_shapes"], [43, 2, 1, "", "is_B_transposed"], [43, 2, 1, "", "make_dquant_node"], [43, 2, 1, "", "make_quant_node"], [43, 2, 1, "", "quantize_data"], [43, 2, 1, "", "quantize_data_per_channel"], [43, 2, 1, "", "quantize_data_with_scale_zero"], [43, 2, 1, "", "quantize_nparray"], [43, 2, 1, "", "remove_init_from_model_input"], [43, 2, 1, "", "simple_progress_bar"], [43, 2, 1, "", "split_shared_bias"], [43, 2, 1, "", "to_numpy"], [43, 2, 1, "", "trt_env_setup"]], "neural_compressor.adaptor.ox_utils.weight_only": [[44, 2, 1, "", "apply_awq_clip"], [44, 2, 1, "", "apply_awq_scale"], [44, 2, 1, "", "awq_quantize"], [44, 2, 1, "", "get_blob_size"], [44, 2, 1, "", "get_weight_scale"], [44, 2, 1, "", "gptq"], [44, 2, 1, "", "gptq_quantize"], [44, 2, 1, "", "make_matmul_weight_only_node"], [44, 2, 1, "", "pad_tensor"], [44, 2, 1, "", "prepare_inputs"], [44, 2, 1, "", "qdq_tensor"], [44, 2, 1, "", "quant_tensor"], [44, 2, 1, "", "rtn_quantize"]], "neural_compressor.adaptor.pytorch": [[45, 1, 1, "", "PyTorchAdaptor"], [45, 1, 1, "", "PyTorchWeightOnlyAdaptor"], [45, 1, 1, "", "PyTorch_FXAdaptor"], [45, 1, 1, "", "PyTorch_IPEXAdaptor"], [45, 1, 1, "", "TemplateAdaptor"], [45, 2, 1, "", "get_ops_recursively"]], "neural_compressor.adaptor.query": [[46, 1, 1, "", "QueryBackendCapability"]], "neural_compressor.adaptor.tensorflow": [[47, 1, 1, "", "TensorFlowAdaptor"], [47, 1, 1, "", "TensorflowQuery"], [47, 1, 1, "", "Tensorflow_ITEXAdaptor"]], "neural_compressor.adaptor.tf_utils": [[48, 0, 0, "-", "graph_converter"], [49, 0, 0, "-", "graph_converter_without_calib"], [87, 0, 0, "-", "graph_rewriter"], [110, 0, 0, "-", "graph_util"], [112, 0, 0, "-", "quantize_graph"], [139, 0, 0, "-", "quantize_graph_common"], [140, 0, 0, "-", "smooth_quant_calibration"], [141, 0, 0, "-", "smooth_quant_scaler"], [142, 0, 0, "-", "tf2onnx_converter"], [145, 0, 0, "-", "transform_graph"], [148, 0, 0, "-", "util"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[48, 1, 1, "", "GraphConverter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[49, 1, 1, "", "GraphConverterWithoutCalib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[52, 0, 0, "-", "bf16"], [76, 0, 0, "-", "generic"], [86, 0, 0, "-", "graph_base"], [95, 0, 0, "-", "int8"], [101, 0, 0, "-", "onnx"], [106, 0, 0, "-", "qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[50, 0, 0, "-", "bf16_convert"], [51, 0, 0, "-", "dequantize_cast_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[50, 1, 1, "", "BF16Convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer": [[51, 1, 1, "", "DequantizeCastOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[53, 0, 0, "-", "convert_add_to_biasadd"], [54, 0, 0, "-", "convert_layout"], [55, 0, 0, "-", "convert_leakyrelu"], [56, 0, 0, "-", "convert_nan_to_random"], [57, 0, 0, "-", "convert_placeholder_to_const"], [58, 0, 0, "-", "dilated_contraction"], [59, 0, 0, "-", "dummy_biasadd"], [60, 0, 0, "-", "expanddims_optimizer"], [61, 0, 0, "-", "fetch_weight_from_reshape"], [62, 0, 0, "-", "fold_batch_norm"], [63, 0, 0, "-", "fold_constant"], [64, 0, 0, "-", "fuse_biasadd_add"], [65, 0, 0, "-", "fuse_column_wise_mul"], [66, 0, 0, "-", "fuse_conv_with_math"], [67, 0, 0, "-", "fuse_decomposed_bn"], [68, 0, 0, "-", "fuse_decomposed_in"], [69, 0, 0, "-", "fuse_gelu"], [70, 0, 0, "-", "fuse_layer_norm"], [71, 0, 0, "-", "fuse_pad_with_conv"], [72, 0, 0, "-", "fuse_pad_with_fp32_conv"], [73, 0, 0, "-", "fuse_reshape_transpose"], [74, 0, 0, "-", "graph_cse_optimizer"], [75, 0, 0, "-", "grappler_pass"], [77, 0, 0, "-", "insert_print_node"], [78, 0, 0, "-", "move_squeeze_after_relu"], [79, 0, 0, "-", "pre_optimize"], [80, 0, 0, "-", "remove_training_nodes"], [81, 0, 0, "-", "rename_batch_norm"], [82, 0, 0, "-", "split_shared_input"], [83, 0, 0, "-", "strip_equivalent_nodes"], [84, 0, 0, "-", "strip_unused_nodes"], [85, 0, 0, "-", "switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[53, 1, 1, "", "ConvertAddToBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[54, 1, 1, "", "ConvertLayoutOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[55, 1, 1, "", "ConvertLeakyReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[56, 1, 1, "", "ConvertNanToRandom"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[57, 1, 1, "", "ConvertPlaceholderToConst"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[58, 1, 1, "", "DilatedContraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[59, 1, 1, "", "InjectDummyBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[60, 1, 1, "", "ExpandDimsOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[61, 1, 1, "", "FetchWeightFromReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[62, 1, 1, "", "FoldBatchNormNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[63, 1, 1, "", "GraphFoldConstantOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[64, 1, 1, "", "FuseBiasAddAndAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[65, 1, 1, "", "FuseColumnWiseMulOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[66, 1, 1, "", "FuseConvWithMathOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[67, 1, 1, "", "FuseDecomposedBNOptimizer"], [67, 2, 1, "", "bypass_reshape"], [67, 2, 1, "", "get_const_dim_count"], [67, 2, 1, "", "node_from_map"], [67, 2, 1, "", "node_name_from_input"], [67, 2, 1, "", "valid_reshape_inputs"], [67, 2, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[68, 1, 1, "", "FuseDecomposedINOptimizer"], [68, 2, 1, "", "bypass_reshape"], [68, 2, 1, "", "get_const_dim_count"], [68, 2, 1, "", "node_from_map"], [68, 2, 1, "", "node_name_from_input"], [68, 2, 1, "", "valid_reshape_inputs"], [68, 2, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[69, 1, 1, "", "FuseGeluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[70, 1, 1, "", "FuseLayerNormOptimizer"], [70, 2, 1, "", "node_from_map"], [70, 2, 1, "", "node_name_from_input"], [70, 2, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[71, 1, 1, "", "FusePadWithConv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[72, 1, 1, "", "FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[73, 1, 1, "", "FuseTransposeReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[74, 1, 1, "", "GraphCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[75, 1, 1, "", "GrapplerOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[77, 1, 1, "", "InsertPrintMinMaxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[78, 1, 1, "", "MoveSqueezeAfterReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[79, 1, 1, "", "PreOptimization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[80, 1, 1, "", "RemoveTrainingNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[81, 1, 1, "", "RenameBatchNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[82, 1, 1, "", "SplitSharedInputOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[83, 1, 1, "", "StripEquivalentNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[84, 1, 1, "", "StripUnusedNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[85, 1, 1, "", "SwitchOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[86, 1, 1, "", "GraphRewriterBase"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[88, 0, 0, "-", "freeze_fake_quant"], [89, 0, 0, "-", "freeze_value"], [90, 0, 0, "-", "freeze_value_without_calib"], [91, 0, 0, "-", "fuse_conv_redundant_dequantize"], [92, 0, 0, "-", "fuse_conv_requantize"], [93, 0, 0, "-", "fuse_matmul_redundant_dequantize"], [94, 0, 0, "-", "fuse_matmul_requantize"], [96, 0, 0, "-", "meta_op_optimizer"], [97, 0, 0, "-", "post_hostconst_converter"], [98, 0, 0, "-", "post_quantized_op_cse"], [99, 0, 0, "-", "rnn_convert"], [100, 0, 0, "-", "scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[88, 1, 1, "", "FreezeFakeQuantOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[89, 1, 1, "", "FreezeValueTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[90, 1, 1, "", "FreezeValueWithoutCalibTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[91, 1, 1, "", "FuseConvRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[92, 1, 1, "", "FuseConvRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[93, 1, 1, "", "FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[94, 1, 1, "", "FuseMatMulRequantizeDequantizeNewAPITransformer"], [94, 1, 1, "", "FuseMatMulRequantizeDequantizeTransformer"], [94, 1, 1, "", "FuseMatMulRequantizeNewAPITransformer"], [94, 1, 1, "", "FuseMatMulRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[96, 1, 1, "", "MetaInfoChangingMemOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[97, 1, 1, "", "PostHostConstConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[98, 1, 1, "", "PostCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[99, 1, 1, "", "QuantizedRNNConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[100, 1, 1, "", "ScaleProPagationTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[102, 0, 0, "-", "onnx_graph"], [103, 0, 0, "-", "onnx_node"], [104, 0, 0, "-", "onnx_schema"], [105, 0, 0, "-", "tf2onnx_utils"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[102, 1, 1, "", "OnnxGraph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[103, 1, 1, "", "OnnxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[104, 1, 1, "", "OnnxOpSchema"], [104, 2, 1, "", "get_max_supported_opset_version"], [104, 2, 1, "", "get_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[105, 1, 1, "", "SeqType"], [105, 2, 1, "", "add_port_to_name"], [105, 2, 1, "", "are_shapes_equal"], [105, 2, 1, "", "assert_error"], [105, 2, 1, "", "compute_const_folding_using_tf"], [105, 2, 1, "", "convert_tensorflow_tensor_to_onnx"], [105, 2, 1, "", "find_opset"], [105, 2, 1, "", "get_index_from_strided_slice_of_shape"], [105, 2, 1, "", "get_subgraphs_from_onnx"], [105, 2, 1, "", "get_tensorflow_node_attr"], [105, 2, 1, "", "get_tensorflow_node_shape_attr"], [105, 2, 1, "", "get_tensorflow_tensor_data"], [105, 2, 1, "", "get_tensorflow_tensor_shape"], [105, 2, 1, "", "infer_onnx_shape_dtype"], [105, 2, 1, "", "initialize_name_counter"], [105, 2, 1, "", "is_list_or_tuple"], [105, 2, 1, "", "is_onnx_domain"], [105, 2, 1, "", "make_onnx_inputs_outputs"], [105, 2, 1, "", "make_onnx_shape"], [105, 2, 1, "", "map_numpy_to_onnx_dtype"], [105, 2, 1, "", "map_onnx_to_numpy_type"], [105, 2, 1, "", "map_tensorflow_dtype"], [105, 2, 1, "", "read_tensorflow_node_attrs"], [105, 2, 1, "", "save_protobuf"], [105, 2, 1, "", "set_name"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[107, 0, 0, "-", "insert_qdq_pattern"], [108, 0, 0, "-", "merge_duplicated_qdq"], [109, 0, 0, "-", "share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[107, 1, 1, "", "GenerateGraphWithQDQPattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[108, 1, 1, "", "MergeDuplicatedQDQOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[109, 1, 1, "", "ShareQDQForItexYPatternOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_util": [[110, 1, 1, "", "GraphAnalyzer"], [110, 1, 1, "", "GraphRewriterHelper"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[114, 0, 0, "-", "qat"], [130, 0, 0, "-", "qdq"], [132, 0, 0, "-", "quantize_graph_base"], [133, 0, 0, "-", "quantize_graph_bn"], [134, 0, 0, "-", "quantize_graph_concatv2"], [135, 0, 0, "-", "quantize_graph_conv"], [136, 0, 0, "-", "quantize_graph_for_intel_cpu"], [137, 0, 0, "-", "quantize_graph_matmul"], [138, 0, 0, "-", "quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[113, 0, 0, "-", "fake_quantize"], [115, 0, 0, "-", "quantize_config"], [116, 0, 0, "-", "quantize_helper"], [117, 0, 0, "-", "quantize_layers"], [122, 0, 0, "-", "quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[113, 1, 1, "", "FakeQuantize"], [113, 1, 1, "", "FakeQuantizeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[115, 1, 1, "", "QuantizeConfig"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[116, 2, 1, "", "init_quantize_config"], [116, 2, 1, "", "qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[118, 0, 0, "-", "optimize_layer"], [119, 0, 0, "-", "quantize_layer_add"], [120, 0, 0, "-", "quantize_layer_base"], [121, 0, 0, "-", "quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[118, 2, 1, "", "config_quantizable_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[119, 1, 1, "", "QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[120, 1, 1, "", "QuantizeLayerBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[121, 1, 1, "", "QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[122, 1, 1, "", "QuantizeWrapper"], [122, 1, 1, "", "QuantizeWrapperBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[123, 0, 0, "-", "fuse_qdq_bn"], [124, 0, 0, "-", "fuse_qdq_concatv2"], [125, 0, 0, "-", "fuse_qdq_conv"], [126, 0, 0, "-", "fuse_qdq_deconv"], [127, 0, 0, "-", "fuse_qdq_in"], [128, 0, 0, "-", "fuse_qdq_matmul"], [129, 0, 0, "-", "fuse_qdq_pooling"], [131, 0, 0, "-", "optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[123, 1, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[124, 1, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[125, 1, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[126, 1, 1, "", "FuseNodeStartWithDeconv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[127, 1, 1, "", "FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[128, 1, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[129, 1, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[131, 1, 1, "", "OptimizeQDQGraph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[132, 1, 1, "", "QuantizeGraphBase"], [132, 1, 1, "", "QuantizeNodeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[133, 1, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[134, 1, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[135, 1, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[136, 1, 1, "", "QuantizeGraphForIntel"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[137, 1, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[138, 1, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[139, 1, 1, "", "QuantizeGraphHelper"]], "neural_compressor.adaptor.tf_utils.smooth_quant_calibration": [[140, 1, 1, "", "SmoothQuantCalibration"], [140, 1, 1, "", "SmoothQuantCalibrationLLM"]], "neural_compressor.adaptor.tf_utils.smooth_quant_scaler": [[141, 1, 1, "", "SmoothQuantScaler"], [141, 1, 1, "", "SmoothQuantScalerLLM"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[142, 1, 1, "", "TensorflowQDQToOnnxQDQConverter"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[143, 0, 0, "-", "bias_correction"], [144, 0, 0, "-", "graph_transform_base"], [146, 0, 0, "-", "insert_logging"], [147, 0, 0, "-", "rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[143, 1, 1, "", "BiasCorrection"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[144, 1, 1, "", "GraphTransformBase"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[146, 1, 1, "", "InsertLogging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[147, 1, 1, "", "RerangeQuantizedConcat"]], "neural_compressor.adaptor.tf_utils.util": [[148, 2, 1, "", "apply_inlining"], [148, 2, 1, "", "collate_tf_preds"], [148, 2, 1, "", "construct_function_from_graph_def"], [148, 2, 1, "", "disable_random"], [148, 2, 1, "", "fix_ref_type_of_graph_def"], [148, 2, 1, "", "generate_feed_dict"], [148, 2, 1, "", "get_estimator_graph"], [148, 2, 1, "", "get_graph_def"], [148, 2, 1, "", "get_input_output_node_names"], [148, 2, 1, "", "get_model_input_shape"], [148, 2, 1, "", "get_tensor_by_name"], [148, 2, 1, "", "get_tensor_val_from_graph_node"], [148, 2, 1, "", "get_weight_from_input_tensor"], [148, 2, 1, "", "int8_node_name_reverse"], [148, 2, 1, "", "is_ckpt_format"], [148, 2, 1, "", "is_saved_model_format"], [148, 2, 1, "", "iterator_sess_run"], [148, 2, 1, "", "parse_saved_model"], [148, 2, 1, "", "read_graph"], [148, 2, 1, "", "reconstruct_saved_model"], [148, 2, 1, "", "strip_equivalent_nodes"], [148, 2, 1, "", "strip_unused_nodes"], [148, 2, 1, "", "tf_diagnosis_helper"], [148, 2, 1, "", "version1_eq_version2"], [148, 2, 1, "", "version1_gt_version2"], [148, 2, 1, "", "version1_gte_version2"], [148, 2, 1, "", "version1_lt_version2"], [148, 2, 1, "", "version1_lte_version2"], [148, 2, 1, "", "write_graph"]], "neural_compressor.adaptor.torch_utils": [[149, 0, 0, "-", "auto_round"], [152, 0, 0, "-", "autoround"], [155, 0, 0, "-", "awq"], [156, 0, 0, "-", "bf16_convert"], [157, 0, 0, "-", "gptq"], [158, 0, 0, "-", "hawq_metric"], [160, 0, 0, "-", "layer_wise_quant"], [165, 0, 0, "-", "mixed_precision"], [166, 0, 0, "-", "model_wrapper"], [167, 0, 0, "-", "pattern_detector"], [168, 0, 0, "-", "symbolic_trace"], [169, 0, 0, "-", "teq"], [170, 0, 0, "-", "util"], [174, 0, 0, "-", "waq"], [177, 0, 0, "-", "weight_only"]], "neural_compressor.adaptor.torch_utils.autoround": [[150, 0, 0, "-", "autoround"], [151, 0, 0, "-", "export"], [153, 0, 0, "-", "model_wrapper"], [154, 0, 0, "-", "sign_sgd"]], "neural_compressor.adaptor.torch_utils.autoround.autoround": [[150, 1, 1, "", "AutoAdamRound"], [150, 1, 1, "", "AutoOPTRound"], [150, 1, 1, "", "AutoRound"], [150, 1, 1, "", "SaveInputs"], [150, 1, 1, "", "WrapperMultiblock"], [150, 2, 1, "", "block_forward"], [150, 2, 1, "", "check_is_cpu"], [150, 2, 1, "", "collect_minmax_scale"], [150, 2, 1, "", "collect_round_v"], [150, 2, 1, "", "get_batch_dim"], [150, 2, 1, "", "get_block_names"], [150, 2, 1, "", "get_dataloader"], [150, 2, 1, "", "get_module"], [150, 2, 1, "", "get_scale_shape"], [150, 2, 1, "", "get_tokenizer_function"], [150, 2, 1, "", "move_input_to_device"], [150, 2, 1, "", "quant_weight"], [150, 2, 1, "", "quant_weight_actor"], [150, 2, 1, "", "quant_weight_asym"], [150, 2, 1, "", "quant_weight_sym"], [150, 2, 1, "", "quant_weight_w_scale"], [150, 2, 1, "", "round_ste"], [150, 2, 1, "", "sampling_inputs"], [150, 2, 1, "", "set_module"], [150, 2, 1, "", "unwrapper_block"], [150, 2, 1, "", "wrapper_block"]], "neural_compressor.adaptor.torch_utils.autoround.export": [[151, 2, 1, "", "export_compressed_model"]], "neural_compressor.adaptor.torch_utils.autoround.sign_sgd": [[154, 1, 1, "", "SGD"], [154, 2, 1, "", "sgd"]], "neural_compressor.adaptor.torch_utils.awq": [[155, 1, 1, "", "ActAwareWeightQuant"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[156, 1, 1, "", "BF16ModuleWrapper"], [156, 2, 1, "", "Convert"], [156, 2, 1, "", "bf16_symbolic_trace"]], "neural_compressor.adaptor.torch_utils.gptq": [[157, 1, 1, "", "GPTQ"], [157, 1, 1, "", "GPTQuantizer"], [157, 2, 1, "", "find_layers"], [157, 2, 1, "", "find_layers_name"], [157, 2, 1, "", "is_leaf"], [157, 2, 1, "", "log_quantizable_layers_per_transformer"], [157, 2, 1, "", "quantize"], [157, 2, 1, "", "trace_gptq_target_blocks"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[158, 1, 1, "", "HessianTrace"], [158, 1, 1, "", "Node_collector"], [158, 2, 1, "", "compare_weights"], [158, 2, 1, "", "hawq_top"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant": [[161, 0, 0, "-", "modified_pickle"], [162, 0, 0, "-", "quantize"], [163, 0, 0, "-", "torch_load"], [164, 0, 0, "-", "utils"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle": [[161, 3, 1, "", "PickleError"], [161, 3, 1, "", "PicklingError"], [161, 3, 1, "", "UnpicklingError"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize": [[162, 1, 1, "", "LayerWiseQuant"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load": [[163, 2, 1, "", "load"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils": [[164, 2, 1, "", "dowload_hf_model"], [164, 2, 1, "", "get_children"], [164, 2, 1, "", "get_module"], [164, 2, 1, "", "get_named_children"], [164, 2, 1, "", "get_super_module_by_name"], [164, 2, 1, "", "load_empty_model"], [164, 2, 1, "", "load_layer_wise_quantized_model"], [164, 2, 1, "", "load_tensor"], [164, 2, 1, "", "load_tensor_from_shard"], [164, 2, 1, "", "update_module"]], "neural_compressor.adaptor.torch_utils.mixed_precision": [[165, 2, 1, "", "ipex_mixed_precision"]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[166, 1, 1, "", "FakeAffineTensorQuantFunction"], [166, 1, 1, "", "MulLinear"], [166, 1, 1, "", "TEQLinearFakeQuant"]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[167, 1, 1, "", "TransformerBasedModelBlockPatternDetector"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[168, 2, 1, "", "symbolic_trace"], [168, 2, 1, "", "trace_and_fuse_sub_graph"]], "neural_compressor.adaptor.torch_utils.teq": [[169, 1, 1, "", "TEQuantizer"]], "neural_compressor.adaptor.torch_utils.util": [[170, 2, 1, "", "append_attr"], [170, 2, 1, "", "auto_copy"], [170, 2, 1, "", "calculate_quant_min_max"], [170, 2, 1, "", "calibration"], [170, 2, 1, "", "check_cfg_and_qconfig"], [170, 2, 1, "", "collate_torch_preds"], [170, 2, 1, "", "collect_weight_info"], [170, 2, 1, "", "fetch_module"], [170, 2, 1, "", "forward_wrapper"], [170, 2, 1, "", "generate_activation_observer"], [170, 2, 1, "", "get_absorb_layers"], [170, 2, 1, "", "get_block_prefix"], [170, 2, 1, "", "get_depth"], [170, 2, 1, "", "get_dict_at_depth"], [170, 2, 1, "", "get_element_under_depth"], [170, 2, 1, "", "get_embedding_contiguous"], [170, 2, 1, "", "get_example_input"], [170, 2, 1, "", "get_fallback_order"], [170, 2, 1, "", "get_hidden_states"], [170, 2, 1, "", "get_module_input_output"], [170, 2, 1, "", "get_mse_order_per_fp32"], [170, 2, 1, "", "get_mse_order_per_int8"], [170, 2, 1, "", "get_op_type_by_name"], [170, 2, 1, "", "get_quantizable_ops_from_cfgs"], [170, 2, 1, "", "get_torch_version"], [170, 2, 1, "", "input2tuple"], [170, 2, 1, "", "is_fused_module"], [170, 2, 1, "", "match_datatype_pattern"], [170, 2, 1, "", "move_input_device"], [170, 2, 1, "", "paser_cfgs"], [170, 2, 1, "", "set_module"], [170, 2, 1, "", "simple_inference"], [170, 2, 1, "", "update_sq_scale"]], "neural_compressor.adaptor.torch_utils.waq": [[171, 0, 0, "-", "auto_alpha"], [172, 0, 0, "-", "calibration"], [173, 0, 0, "-", "graph_trace"], [175, 0, 0, "-", "smooth_quant"], [176, 0, 0, "-", "utils"]], "neural_compressor.adaptor.torch_utils.waq.smooth_quant": [[175, 1, 1, "", "TorchSmoothQuant"]], "neural_compressor.adaptor.torch_utils.waq.utils": [[176, 2, 1, "", "get_module"], [176, 2, 1, "", "register_autotune"], [176, 2, 1, "", "reshape_in_channel_to_last"], [176, 2, 1, "", "reshape_scale_as_input"], [176, 2, 1, "", "reshape_scale_as_weight"], [176, 2, 1, "", "set_module"]], "neural_compressor.adaptor.torch_utils.weight_only": [[177, 2, 1, "", "autoround_quantize"], [177, 2, 1, "", "awq_quantize"], [177, 2, 1, "", "gptq_quantize"], [177, 2, 1, "", "qdq_weight_actor"], [177, 2, 1, "", "qdq_weight_asym"], [177, 2, 1, "", "qdq_weight_sym"], [177, 2, 1, "", "quant_weight"], [177, 2, 1, "", "quant_weight_w_scale"], [177, 2, 1, "", "quantize_4bit"], [177, 2, 1, "", "rtn_quantize"], [177, 2, 1, "", "search_clip"], [177, 2, 1, "", "teq_quantize"]], "neural_compressor.algorithm": [[178, 0, 0, "-", "algorithm"], [179, 0, 0, "-", "fast_bias_correction"], [181, 0, 0, "-", "smooth_quant"], [182, 0, 0, "-", "weight_correction"]], "neural_compressor.algorithm.algorithm": [[178, 1, 1, "", "ALGORITHMS"], [178, 1, 1, "", "Algorithm"], [178, 1, 1, "", "AlgorithmScheduler"], [178, 2, 1, "", "algorithm_registry"]], "neural_compressor.algorithm.fast_bias_correction": [[179, 1, 1, "", "FastBiasCorrection"]], "neural_compressor.algorithm.smooth_quant": [[181, 1, 1, "", "SmoothQuant"]], "neural_compressor.algorithm.weight_correction": [[182, 1, 1, "", "WeightCorrection"]], "neural_compressor.benchmark": [[183, 2, 1, "", "benchmark_with_raw_cmd"], [183, 2, 1, "", "call_one"], [183, 2, 1, "", "config_instance"], [183, 2, 1, "", "fit"], [183, 2, 1, "", "generate_prefix"], [183, 2, 1, "", "get_architecture"], [183, 2, 1, "", "get_bounded_threads"], [183, 2, 1, "", "get_core_ids"], [183, 2, 1, "", "get_physical_ids"], [183, 2, 1, "", "get_threads"], [183, 2, 1, "", "get_threads_per_core"], [183, 2, 1, "", "profile"], [183, 2, 1, "", "run_instance"], [183, 2, 1, "", "set_all_env_var"], [183, 2, 1, "", "set_env_var"], [183, 2, 1, "", "summary_benchmark"]], "neural_compressor.common": [[184, 0, 0, "-", "base_config"], [185, 0, 0, "-", "base_tuning"], [187, 0, 0, "-", "tuning_param"], [189, 0, 0, "-", "utils"]], "neural_compressor.common.base_config": [[184, 1, 1, "", "BaseConfig"], [184, 1, 1, "", "ComposableConfig"], [184, 2, 1, "", "register_config"], [184, 2, 1, "", "register_supported_configs_for_fwk"]], "neural_compressor.common.base_tuning": [[185, 1, 1, "", "Evaluator"], [185, 1, 1, "", "SequentialSampler"], [185, 1, 1, "", "TuningConfig"]], "neural_compressor.common.tuning_param": [[187, 1, 1, "", "ParamLevel"], [187, 1, 1, "", "TuningParam"]], "neural_compressor.common.utils": [[188, 0, 0, "-", "constants"], [190, 0, 0, "-", "logger"], [191, 0, 0, "-", "utility"]], "neural_compressor.common.utils.logger": [[190, 1, 1, "", "Logger"], [190, 1, 1, "", "TuningLogger"]], "neural_compressor.common.utils.utility": [[191, 2, 1, "", "dump_elapsed_time"], [191, 2, 1, "", "set_random_seed"], [191, 2, 1, "", "set_resume_from"], [191, 2, 1, "", "set_tensorboard"], [191, 2, 1, "", "set_workspace"]], "neural_compressor.compression": [[192, 0, 0, "-", "callbacks"], [194, 0, 0, "-", "distillation"], [197, 0, 0, "-", "hpo"], [204, 0, 0, "-", "pruner"]], "neural_compressor.compression.callbacks": [[192, 1, 1, "", "BaseCallbacks"], [192, 1, 1, "", "DistillationCallbacks"], [192, 1, 1, "", "PruningCallbacks"], [192, 1, 1, "", "QuantizationAwareTrainingCallbacks"]], "neural_compressor.compression.callbacks.DistillationCallbacks": [[192, 4, 1, "", "_epoch_ran"], [192, 4, 1, "", "best_model"], [192, 4, 1, "", "best_score"], [192, 4, 1, "", "eval_frequency"]], "neural_compressor.compression.distillation": [[193, 0, 0, "-", "criterions"], [195, 0, 0, "-", "optimizers"], [196, 0, 0, "-", "utility"]], "neural_compressor.compression.distillation.criterions": [[193, 1, 1, "", "Criterions"], [193, 1, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [193, 1, 1, "", "KnowledgeDistillationFramework"], [193, 1, 1, "", "KnowledgeDistillationLoss"], [193, 1, 1, "", "PyTorchCriterions"], [193, 1, 1, "", "PyTorchCrossEntropyLoss"], [193, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [193, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [193, 1, 1, "", "PyTorchKnowledgeDistillationLoss"], [193, 1, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [193, 1, 1, "", "PyTorchSelfKnowledgeDistillationLoss"], [193, 1, 1, "", "PyTorchSelfKnowledgeDistillationLossWrapper"], [193, 1, 1, "", "SelfKnowledgeDistillationLoss"], [193, 1, 1, "", "TensorFlowCrossEntropyLoss"], [193, 1, 1, "", "TensorFlowSparseCategoricalCrossentropy"], [193, 1, 1, "", "TensorflowCriterions"], [193, 1, 1, "", "TensorflowKnowledgeDistillationLoss"], [193, 1, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [193, 1, 1, "", "TensorflowKnowledgeDistillationLossWrapper"], [193, 2, 1, "", "criterion_registry"]], "neural_compressor.compression.distillation.optimizers": [[195, 1, 1, "", "Optimizers"], [195, 1, 1, "", "PyTorchOptimizers"], [195, 1, 1, "", "PyTorchSGD"], [195, 1, 1, "", "TensorFlowAdam"], [195, 1, 1, "", "TensorFlowAdamW"], [195, 1, 1, "", "TensorFlowSGD"], [195, 1, 1, "", "TensorflowOptimizers"], [195, 2, 1, "", "optimizer_registry"]], "neural_compressor.compression.distillation.utility": [[196, 2, 1, "", "get_activation"], [196, 2, 1, "", "record_output"]], "neural_compressor.compression.hpo": [[198, 0, 0, "-", "sa_optimizer"], [199, 0, 0, "-", "search_algorithms"], [200, 0, 0, "-", "search_space"]], "neural_compressor.compression.hpo.search_algorithms": [[199, 1, 1, "", "BayesianOptimizationSearcher"], [199, 1, 1, "", "GridSearcher"], [199, 1, 1, "", "RandomSearcher"], [199, 1, 1, "", "Searcher"], [199, 1, 1, "", "XgbSearcher"], [199, 2, 1, "", "register_searcher"]], "neural_compressor.compression.hpo.search_space": [[200, 1, 1, "", "BaseSearchSpace"], [200, 1, 1, "", "ContinuousSearchSpace"], [200, 1, 1, "", "DiscreteSearchSpace"], [200, 1, 1, "", "SearchSpace"], [200, 2, 1, "", "register_searchspace"]], "neural_compressor.compression.pruner": [[202, 0, 0, "-", "criteria"], [203, 0, 0, "-", "dsnot"], [206, 0, 0, "-", "model_slim"], [210, 0, 0, "-", "patterns"], [204, 2, 1, "", "prepare_pruning"], [217, 0, 0, "-", "pruners"], [223, 0, 0, "-", "pruning"], [224, 0, 0, "-", "regs"], [204, 2, 1, "", "save"], [225, 0, 0, "-", "schedulers"], [226, 0, 0, "-", "tf_criteria"], [227, 0, 0, "-", "utils"], [228, 0, 0, "-", "wanda"]], "neural_compressor.compression.pruner.criteria": [[202, 1, 1, "", "BlockMaskCriterion"], [202, 1, 1, "", "GradientCriterion"], [202, 1, 1, "", "MagnitudeCriterion"], [202, 1, 1, "", "PruningCriterion"], [202, 1, 1, "", "RetrainFreeCriterion"], [202, 1, 1, "", "SnipCriterion"], [202, 1, 1, "", "SnipMomentumCriterion"], [202, 2, 1, "", "get_criterion"], [202, 2, 1, "", "register_criterion"]], "neural_compressor.compression.pruner.criteria.BlockMaskCriterion": [[202, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.GradientCriterion": [[202, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.MagnitudeCriterion": [[202, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.PruningCriterion": [[202, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion": [[202, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipCriterion": [[202, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion": [[202, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.dsnot": [[203, 2, 1, "", "DSnoT"], [203, 2, 1, "", "return_reorder_indice"]], "neural_compressor.compression.pruner.model_slim": [[205, 0, 0, "-", "auto_slim"], [207, 0, 0, "-", "pattern_analyzer"], [208, 0, 0, "-", "weight_slim"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[205, 2, 1, "", "generate_ffn2_pruning_config"], [205, 2, 1, "", "generate_mha_pruning_config"], [205, 2, 1, "", "model_slim"], [205, 2, 1, "", "model_slim_ffn2"], [205, 2, 1, "", "model_slim_mha"], [205, 2, 1, "", "parse_auto_slim_config"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[207, 1, 1, "", "ClassifierHeadSearcher"], [207, 1, 1, "", "ClassifierHeadSearcherTF"], [207, 1, 1, "", "JitBasicSearcher"], [207, 1, 1, "", "Linear2LinearSearcher"], [207, 1, 1, "", "RecipeSearcher"], [207, 1, 1, "", "SelfMHASearcher"], [207, 2, 1, "", "get_attributes"], [207, 2, 1, "", "get_common_module"], [207, 2, 1, "", "print_iterables"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher": [[207, 4, 1, "", "device"], [207, 4, 1, "", "flatten_static_graph"], [207, 4, 1, "", "model"], [207, 4, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF": [[207, 4, 1, "", "device"], [207, 4, 1, "", "flatten_static_graph"], [207, 4, 1, "", "model"], [207, 4, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher": [[207, 4, 1, "", "device"], [207, 4, 1, "", "flatten_static_graph"], [207, 4, 1, "", "model"], [207, 4, 1, "", "searching_results"], [207, 4, 1, "", "static_graph"], [207, 4, 1, "", "target_layers"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher": [[207, 4, 1, "", "current_pattern"], [207, 4, 1, "", "device"], [207, 4, 1, "", "flatten_static_graph"], [207, 4, 1, "", "model"], [207, 4, 1, "", "searching_results"], [207, 4, 1, "", "static_graph"], [207, 4, 1, "", "target_layers"], [207, 4, 1, "", "target_op_lut"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher": [[207, 4, 1, "", "model"], [207, 4, 1, "", "recipe"], [207, 4, 1, "", "searching_results"], [207, 4, 1, "", "targets"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher": [[207, 4, 1, "", "device"], [207, 4, 1, "", "flatten_static_graph"], [207, 4, 1, "", "model"], [207, 4, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[208, 1, 1, "", "LinearCompression"], [208, 1, 1, "", "LinearCompressionIterator"], [208, 1, 1, "", "PostCompressionUtils"]], "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression": [[208, 4, 1, "", "device"], [208, 4, 1, "", "layer_1"], [208, 4, 1, "", "layer_2"]], "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator": [[208, 4, 1, "", "linear_patterns"]], "neural_compressor.compression.pruner.patterns": [[209, 0, 0, "-", "base"], [210, 2, 1, "", "get_pattern"], [211, 0, 0, "-", "mha"], [212, 0, 0, "-", "ninm"], [213, 0, 0, "-", "nxm"]], "neural_compressor.compression.pruner.patterns.base": [[209, 1, 1, "", "BasePattern"], [209, 1, 1, "", "KerasBasePattern"], [209, 1, 1, "", "PytorchBasePattern"], [209, 2, 1, "", "register_pattern"]], "neural_compressor.compression.pruner.patterns.base.BasePattern": [[209, 4, 1, "", "config"], [209, 4, 1, "", "invalid_layers"], [209, 4, 1, "", "is_global"], [209, 4, 1, "", "keep_mask_layers"], [209, 4, 1, "", "max_sparsity_ratio_per_op"], [209, 4, 1, "", "min_sparsity_ratio_per_op"], [209, 4, 1, "", "modules"], [209, 4, 1, "", "pattern"], [209, 4, 1, "", "target_sparsity"]], "neural_compressor.compression.pruner.patterns.base.KerasBasePattern": [[209, 4, 1, "", "config"], [209, 4, 1, "", "invalid_layers"], [209, 4, 1, "", "is_global"], [209, 4, 1, "", "keep_mask_layers"], [209, 4, 1, "", "max_sparsity_ratio_per_op"], [209, 4, 1, "", "min_sparsity_ratio_per_op"], [209, 4, 1, "", "modules"], [209, 4, 1, "", "pattern"], [209, 4, 1, "", "target_sparsity"]], "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern": [[209, 4, 1, "", "config"], [209, 4, 1, "", "invalid_layers"], [209, 4, 1, "", "is_global"], [209, 4, 1, "", "keep_mask_layers"], [209, 4, 1, "", "max_sparsity_ratio_per_op"], [209, 4, 1, "", "min_sparsity_ratio_per_op"], [209, 4, 1, "", "modules"], [209, 4, 1, "", "pattern"], [209, 4, 1, "", "target_sparsity"]], "neural_compressor.compression.pruner.patterns.mha": [[211, 1, 1, "", "PatternMHA"]], "neural_compressor.compression.pruner.patterns.mha.PatternMHA": [[211, 4, 1, "", "M"], [211, 4, 1, "", "N"]], "neural_compressor.compression.pruner.patterns.ninm": [[212, 1, 1, "", "PytorchPatternNInM"]], "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM": [[212, 4, 1, "", "M"], [212, 4, 1, "", "N"]], "neural_compressor.compression.pruner.patterns.nxm": [[213, 1, 1, "", "KerasPatternNxM"], [213, 1, 1, "", "PytorchPatternNxM"]], "neural_compressor.compression.pruner.patterns.nxm.KerasPatternNxM": [[213, 4, 1, "", "block_size"]], "neural_compressor.compression.pruner.patterns.nxm.PytorchPatternNxM": [[213, 4, 1, "", "block_size"]], "neural_compressor.compression.pruner.pruners": [[214, 0, 0, "-", "base"], [215, 0, 0, "-", "basic"], [216, 0, 0, "-", "block_mask"], [217, 2, 1, "", "get_pruner"], [218, 0, 0, "-", "mha"], [217, 2, 1, "", "parse_valid_pruner_types"], [219, 0, 0, "-", "pattern_lock"], [220, 0, 0, "-", "progressive"], [221, 0, 0, "-", "retrain_free"], [222, 0, 0, "-", "sparse_gpt"]], "neural_compressor.compression.pruner.pruners.base": [[214, 1, 1, "", "BasePruner"], [214, 1, 1, "", "KerasBasePruner"], [214, 1, 1, "", "PytorchBasePruner"], [214, 2, 1, "", "register_pruner"]], "neural_compressor.compression.pruner.pruners.base.BasePruner": [[214, 4, 1, "", "config"], [214, 4, 1, "", "current_sparsity_ratio"], [214, 4, 1, "", "end_step"], [214, 4, 1, "", "global_step"], [214, 4, 1, "", "masks"], [214, 4, 1, "", "max_sparsity_ratio_per_op"], [214, 4, 1, "", "modules"], [214, 4, 1, "", "pattern"], [214, 4, 1, "", "pruning_frequency"], [214, 4, 1, "", "scheduler"], [214, 4, 1, "", "scores"], [214, 4, 1, "", "start_step"], [214, 4, 1, "", "target_sparsity_ratio"]], "neural_compressor.compression.pruner.pruners.base.KerasBasePruner": [[214, 4, 1, "", "config"], [214, 4, 1, "", "current_sparsity_ratio"], [214, 4, 1, "", "end_step"], [214, 4, 1, "", "global_step"], [214, 4, 1, "", "masks"], [214, 4, 1, "", "max_sparsity_ratio_per_op"], [214, 4, 1, "", "modules"], [214, 4, 1, "", "pattern"], [214, 4, 1, "", "pruning_frequency"], [214, 4, 1, "", "scheduler"], [214, 4, 1, "", "scores"], [214, 4, 1, "", "start_step"], [214, 4, 1, "", "target_sparsity_ratio"]], "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner": [[214, 4, 1, "", "config"], [214, 4, 1, "", "current_sparsity_ratio"], [214, 4, 1, "", "end_step"], [214, 4, 1, "", "global_step"], [214, 4, 1, "", "masks"], [214, 4, 1, "", "max_sparsity_ratio_per_op"], [214, 4, 1, "", "modules"], [214, 4, 1, "", "pattern"], [214, 4, 1, "", "pruning_frequency"], [214, 4, 1, "", "scheduler"], [214, 4, 1, "", "scores"], [214, 4, 1, "", "start_step"], [214, 4, 1, "", "target_sparsity_ratio"]], "neural_compressor.compression.pruner.pruners.basic": [[215, 1, 1, "", "KerasBasicPruner"], [215, 1, 1, "", "PytorchBasicPruner"]], "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner": [[215, 4, 1, "", "criterion"], [215, 4, 1, "", "pattern"], [215, 4, 1, "", "reg"], [215, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner": [[215, 4, 1, "", "criterion"], [215, 4, 1, "", "pattern"], [215, 4, 1, "", "reg"], [215, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.block_mask": [[216, 1, 1, "", "PytorchBlockMaskPruner"]], "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner": [[216, 4, 1, "", "criterion"], [216, 4, 1, "", "pattern"], [216, 4, 1, "", "reg"], [216, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.mha": [[218, 1, 1, "", "PythonMultiheadAttentionPruner"]], "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner": [[218, 4, 1, "", "head_masks"], [218, 4, 1, "", "linear_layers"], [218, 4, 1, "", "mha_compressions"], [218, 4, 1, "", "mha_scores"]], "neural_compressor.compression.pruner.pruners.pattern_lock": [[219, 1, 1, "", "PytorchPatternLockPruner"]], "neural_compressor.compression.pruner.pruners.progressive": [[220, 1, 1, "", "PytorchProgressivePruner"]], "neural_compressor.compression.pruner.pruners.retrain_free": [[221, 1, 1, "", "PytorchRetrainFreePruner"]], "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner": [[221, 4, 1, "", "criterion"], [221, 4, 1, "", "pattern"], [221, 4, 1, "", "reg"], [221, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.sparse_gpt": [[222, 1, 1, "", "SparseGPTPruner"]], "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner": [[222, 4, 1, "", "criterion"], [222, 4, 1, "", "pattern"], [222, 4, 1, "", "reg"], [222, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruning": [[223, 1, 1, "", "BasePruning"], [223, 1, 1, "", "BasicPruning"], [223, 1, 1, "", "RetrainFreePruning"], [223, 1, 1, "", "SparseGPTPruning"], [223, 2, 1, "", "register_pruning"]], "neural_compressor.compression.pruner.pruning.BasePruning": [[223, 4, 1, "", "config_file_path"], [223, 4, 1, "", "model"], [223, 4, 1, "", "pruner_info"], [223, 4, 1, "", "pruners"]], "neural_compressor.compression.pruner.pruning.BasicPruning": [[223, 4, 1, "", "config_file_path"], [223, 4, 1, "", "model"], [223, 4, 1, "", "pruner_info"], [223, 4, 1, "", "pruners"]], "neural_compressor.compression.pruner.pruning.RetrainFreePruning": [[223, 4, 1, "", "config_file_path"], [223, 4, 1, "", "model"], [223, 4, 1, "", "pruner_info"], [223, 4, 1, "", "pruners"]], "neural_compressor.compression.pruner.regs": [[224, 1, 1, "", "BaseReg"], [224, 1, 1, "", "GroupLasso"], [224, 2, 1, "", "get_reg"], [224, 2, 1, "", "get_reg_type"], [224, 2, 1, "", "register_reg"]], "neural_compressor.compression.pruner.regs.GroupLasso": [[224, 4, 1, "", "alpha"], [224, 4, 1, "", "reg_terms"]], "neural_compressor.compression.pruner.schedulers": [[225, 1, 1, "", "IterativeScheduler"], [225, 1, 1, "", "OneshotScheduler"], [225, 1, 1, "", "PruningScheduler"], [225, 2, 1, "", "get_scheduler"], [225, 2, 1, "", "register_scheduler"]], "neural_compressor.compression.pruner.schedulers.PruningScheduler": [[225, 4, 1, "", "config"]], "neural_compressor.compression.pruner.tf_criteria": [[226, 1, 1, "", "MagnitudeCriterion"], [226, 1, 1, "", "PruningCriterion"], [226, 2, 1, "", "get_tf_criterion"], [226, 2, 1, "", "register_criterion"]], "neural_compressor.compression.pruner.tf_criteria.MagnitudeCriterion": [[226, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.tf_criteria.PruningCriterion": [[226, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.utils": [[227, 2, 1, "", "check_config"], [227, 2, 1, "", "check_key_validity"], [227, 2, 1, "", "collect_layer_inputs"], [227, 2, 1, "", "generate_pruner_config"], [227, 2, 1, "", "get_layers"], [227, 2, 1, "", "get_sparsity_ratio"], [227, 2, 1, "", "get_sparsity_ratio_tf"], [227, 2, 1, "", "parse_last_linear"], [227, 2, 1, "", "parse_last_linear_tf"], [227, 2, 1, "", "parse_to_prune"], [227, 2, 1, "", "parse_to_prune_tf"], [227, 2, 1, "", "process_and_check_config"], [227, 2, 1, "", "process_config"], [227, 2, 1, "", "process_weight_config"], [227, 2, 1, "", "process_yaml_config"], [227, 2, 1, "", "reset_none_to_default"], [227, 2, 1, "", "update_params"]], "neural_compressor.compression.pruner.wanda": [[229, 0, 0, "-", "prune"], [230, 0, 0, "-", "utils"], [231, 0, 0, "-", "wrapper"]], "neural_compressor.compression.pruner.wanda.prune": [[229, 2, 1, "", "prune_wanda"]], "neural_compressor.compression.pruner.wanda.utils": [[230, 2, 1, "", "find_layers"]], "neural_compressor.compression.pruner.wanda.wrapper": [[231, 1, 1, "", "WrappedGPT"]], "neural_compressor.conf": [[232, 0, 0, "-", "config"], [233, 0, 0, "-", "dotdict"], [235, 0, 0, "-", "pythonic_config"]], "neural_compressor.conf.config": [[232, 1, 1, "", "Benchmark_Conf"], [232, 1, 1, "", "Conf"], [232, 1, 1, "", "Distillation_Conf"], [232, 1, 1, "", "Graph_Optimization_Conf"], [232, 1, 1, "", "MixedPrecision_Conf"], [232, 1, 1, "", "NASConfig"], [232, 1, 1, "", "PrunerV2"], [232, 1, 1, "", "Pruning_Conf"], [232, 1, 1, "", "Quantization_Conf"]], "neural_compressor.conf.dotdict": [[233, 1, 1, "", "DotDict"], [233, 2, 1, "", "deep_get"], [233, 2, 1, "", "deep_set"]], "neural_compressor.conf.pythonic_config": [[235, 1, 1, "", "AccuracyCriterion"], [235, 1, 1, "", "BenchmarkConfig"], [235, 1, 1, "", "DistillationConfig"], [235, 1, 1, "", "KnowledgeDistillationLossConfig"], [235, 1, 1, "", "Options"], [235, 1, 1, "", "QuantizationConfig"], [235, 1, 1, "", "WeightPruningConfig"]], "neural_compressor.config": [[236, 1, 1, "", "AccuracyCriterion"], [236, 1, 1, "", "BenchmarkConfig"], [236, 1, 1, "", "DistillationConfig"], [236, 1, 1, "", "DotDict"], [236, 1, 1, "", "ExportConfig"], [236, 1, 1, "", "HPOConfig"], [236, 1, 1, "", "IntermediateLayersKnowledgeDistillationLossConfig"], [236, 1, 1, "", "Keras"], [236, 1, 1, "", "KnowledgeDistillationLossConfig"], [236, 1, 1, "", "MXNet"], [236, 1, 1, "", "MixedPrecisionConfig"], [236, 1, 1, "", "NASConfig"], [236, 1, 1, "", "ONNX"], [236, 1, 1, "", "ONNXQlinear2QDQConfig"], [236, 1, 1, "", "Options"], [236, 1, 1, "", "PostTrainingQuantConfig"], [236, 1, 1, "", "PyTorch"], [236, 1, 1, "", "QuantizationAwareTrainingConfig"], [236, 1, 1, "", "SelfKnowledgeDistillationLossConfig"], [236, 1, 1, "", "TF2ONNXConfig"], [236, 1, 1, "", "TensorFlow"], [236, 1, 1, "", "Torch2ONNXConfig"], [236, 1, 1, "", "TuningCriterion"], [236, 1, 1, "", "WeightPruningConfig"]], "neural_compressor.contrib": [[238, 0, 0, "-", "strategy"]], "neural_compressor.contrib.strategy": [[239, 0, 0, "-", "sigopt"], [240, 0, 0, "-", "tpe"]], "neural_compressor.contrib.strategy.sigopt": [[239, 1, 1, "", "SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[240, 1, 1, "", "TpeTuneStrategy"]], "neural_compressor.data": [[245, 0, 0, "-", "dataloaders"], [257, 0, 0, "-", "datasets"], [261, 0, 0, "-", "filters"], [265, 0, 0, "-", "transforms"]], "neural_compressor.data.dataloaders": [[241, 0, 0, "-", "base_dataloader"], [242, 0, 0, "-", "dataloader"], [243, 0, 0, "-", "default_dataloader"], [244, 0, 0, "-", "fetcher"], [246, 0, 0, "-", "mxnet_dataloader"], [247, 0, 0, "-", "onnxrt_dataloader"], [248, 0, 0, "-", "pytorch_dataloader"], [249, 0, 0, "-", "sampler"], [250, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.data.dataloaders.base_dataloader": [[241, 1, 1, "", "BaseDataLoader"]], "neural_compressor.data.dataloaders.dataloader": [[242, 1, 1, "", "DataLoader"], [242, 2, 1, "", "check_dataloader"]], "neural_compressor.data.dataloaders.default_dataloader": [[243, 1, 1, "", "DefaultDataLoader"], [243, 2, 1, "", "default_collate"]], "neural_compressor.data.dataloaders.fetcher": [[244, 1, 1, "", "Fetcher"], [244, 1, 1, "", "IndexFetcher"], [244, 1, 1, "", "IterableFetcher"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[246, 1, 1, "", "MXNetDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[247, 1, 1, "", "ONNXRTBertDataLoader"], [247, 1, 1, "", "ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[248, 1, 1, "", "PyTorchDataLoader"]], "neural_compressor.data.dataloaders.sampler": [[249, 1, 1, "", "BatchSampler"], [249, 1, 1, "", "IterableSampler"], [249, 1, 1, "", "Sampler"], [249, 1, 1, "", "SequentialSampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[250, 1, 1, "", "TFDataDataLoader"], [250, 1, 1, "", "TensorflowBertDataLoader"], [250, 1, 1, "", "TensorflowDataLoader"], [250, 1, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.data.datasets": [[251, 0, 0, "-", "bert_dataset"], [252, 0, 0, "-", "coco_dataset"], [253, 0, 0, "-", "dataset"], [254, 0, 0, "-", "dummy_dataset"], [255, 0, 0, "-", "dummy_dataset_v2"], [256, 0, 0, "-", "imagenet_dataset"], [258, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.data.datasets.bert_dataset": [[251, 1, 1, "", "InputFeatures"], [251, 1, 1, "", "ONNXRTBertDataset"], [251, 1, 1, "", "ParseDecodeBert"], [251, 1, 1, "", "PytorchBertDataset"], [251, 1, 1, "", "TensorflowBertDataset"], [251, 1, 1, "", "TensorflowModelZooBertDataset"], [251, 2, 1, "", "convert_examples_to_features"], [251, 2, 1, "", "load_and_cache_examples"]], "neural_compressor.data.datasets.coco_dataset": [[252, 1, 1, "", "COCONpy"], [252, 1, 1, "", "COCORaw"], [252, 1, 1, "", "COCORecordDataset"], [252, 1, 1, "", "ParseDecodeCoco"]], "neural_compressor.data.datasets.dataset": [[253, 1, 1, "", "CIFAR10"], [253, 1, 1, "", "CIFAR100"], [253, 1, 1, "", "Dataset"], [253, 1, 1, "", "Datasets"], [253, 1, 1, "", "FashionMNIST"], [253, 1, 1, "", "ImageFolder"], [253, 1, 1, "", "IterableDataset"], [253, 1, 1, "", "MNIST"], [253, 1, 1, "", "MXNetCIFAR10"], [253, 1, 1, "", "MXNetCIFAR100"], [253, 1, 1, "", "MXNetDatasets"], [253, 1, 1, "", "MXNetFashionMNIST"], [253, 1, 1, "", "MXNetImageFolder"], [253, 1, 1, "", "MXNetMNIST"], [253, 1, 1, "", "ONNXRTITDatasets"], [253, 1, 1, "", "ONNXRTQLDatasets"], [253, 1, 1, "", "PyTorchDatasets"], [253, 1, 1, "", "PytorchCIFAR10"], [253, 1, 1, "", "PytorchCIFAR100"], [253, 1, 1, "", "PytorchFashionMNIST"], [253, 1, 1, "", "PytorchMNIST"], [253, 1, 1, "", "PytorchMxnetWrapDataset"], [253, 1, 1, "", "PytorchMxnetWrapFunction"], [253, 1, 1, "", "Tensorflow"], [253, 1, 1, "", "TensorflowCIFAR10"], [253, 1, 1, "", "TensorflowCIFAR100"], [253, 1, 1, "", "TensorflowDatasets"], [253, 1, 1, "", "TensorflowFashionMNIST"], [253, 1, 1, "", "TensorflowImageRecord"], [253, 1, 1, "", "TensorflowMNIST"], [253, 1, 1, "", "TensorflowTFRecordDataset"], [253, 1, 1, "", "TensorflowVOCRecord"], [253, 2, 1, "", "calculate_md5"], [253, 2, 1, "", "check_integrity"], [253, 2, 1, "", "dataset_registry"], [253, 2, 1, "", "download_url"], [253, 5, 1, "", "framework_datasets"], [253, 2, 1, "", "gen_bar_updater"]], "neural_compressor.data.datasets.dummy_dataset": [[254, 1, 1, "", "DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[255, 1, 1, "", "DummyDataset"], [255, 1, 1, "", "SparseDummyDataset"]], "neural_compressor.data.datasets.imagenet_dataset": [[256, 1, 1, "", "ImagenetRaw"], [256, 1, 1, "", "MXNetImagenetRaw"], [256, 1, 1, "", "ONNXRTImagenetDataset"], [256, 1, 1, "", "PytorchImagenetRaw"], [256, 1, 1, "", "TensorflowImagenetDataset"], [256, 1, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.data.datasets.style_transfer_dataset": [[258, 1, 1, "", "StyleTransferDataset"]], "neural_compressor.data.filters": [[259, 0, 0, "-", "coco_filter"], [260, 0, 0, "-", "filter"]], "neural_compressor.data.filters.coco_filter": [[259, 1, 1, "", "LabelBalanceCOCORawFilter"], [259, 1, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.filter": [[260, 1, 1, "", "FILTERS"], [260, 1, 1, "", "Filter"], [260, 1, 1, "", "MXNetFilters"], [260, 1, 1, "", "ONNXRTITFilters"], [260, 1, 1, "", "ONNXRTQLFilters"], [260, 1, 1, "", "PyTorchFilters"], [260, 1, 1, "", "TensorflowFilters"], [260, 2, 1, "", "filter_registry"]], "neural_compressor.data.transforms": [[263, 0, 0, "-", "coco_transform"], [264, 0, 0, "-", "imagenet_transform"], [266, 0, 0, "-", "postprocess"], [267, 0, 0, "-", "tokenization"], [268, 0, 0, "-", "transform"]], "neural_compressor.data.transforms.coco_transform": [[263, 1, 1, "", "ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.imagenet_transform": [[264, 1, 1, "", "BilinearImagenetTransform"], [264, 1, 1, "", "LabelShift"], [264, 1, 1, "", "ONNXResizeCropImagenetTransform"], [264, 1, 1, "", "OnnxBilinearImagenetTransform"], [264, 1, 1, "", "ParseDecodeImagenet"], [264, 1, 1, "", "ParseDecodeImagenetTransform"], [264, 1, 1, "", "QuantizedInput"], [264, 1, 1, "", "ResizeWithAspectRatio"], [264, 1, 1, "", "TensorflowResizeCropImagenetTransform"], [264, 1, 1, "", "TensorflowShiftRescale"], [264, 1, 1, "", "TensorflowTransposeLastChannel"]], "neural_compressor.data.transforms.postprocess": [[266, 1, 1, "", "Postprocess"]], "neural_compressor.data.transforms.tokenization": [[267, 1, 1, "", "BasicTokenizer"], [267, 1, 1, "", "FullTokenizer"], [267, 1, 1, "", "WordpieceTokenizer"], [267, 2, 1, "", "convert_by_vocab"], [267, 2, 1, "", "convert_to_unicode"], [267, 2, 1, "", "load_vocab"], [267, 2, 1, "", "whitespace_tokenize"]], "neural_compressor.data.transforms.transform": [[268, 1, 1, "", "AlignImageChannelTransform"], [268, 1, 1, "", "BaseTransform"], [268, 1, 1, "", "CastONNXTransform"], [268, 1, 1, "", "CastPyTorchTransform"], [268, 1, 1, "", "CastTFTransform"], [268, 1, 1, "", "CenterCropTFTransform"], [268, 1, 1, "", "CenterCropTransform"], [268, 1, 1, "", "CollectTransform"], [268, 1, 1, "", "ComposeTransform"], [268, 1, 1, "", "CropResizeTFTransform"], [268, 1, 1, "", "CropResizeTransform"], [268, 1, 1, "", "CropToBoundingBox"], [268, 1, 1, "", "InputFeatures"], [268, 1, 1, "", "MXNetCropResizeTransform"], [268, 1, 1, "", "MXNetCropToBoundingBox"], [268, 1, 1, "", "MXNetNormalizeTransform"], [268, 1, 1, "", "MXNetTransforms"], [268, 1, 1, "", "MXNetTranspose"], [268, 1, 1, "", "NormalizeTFTransform"], [268, 1, 1, "", "NormalizeTransform"], [268, 1, 1, "", "ONNXRTCropToBoundingBox"], [268, 1, 1, "", "ONNXRTITTransforms"], [268, 1, 1, "", "ONNXRTQLTransforms"], [268, 1, 1, "", "PaddedCenterCropTransform"], [268, 1, 1, "", "ParseDecodeVocTransform"], [268, 1, 1, "", "PyTorchAlignImageChannel"], [268, 1, 1, "", "PyTorchCropResizeTransform"], [268, 1, 1, "", "PyTorchNormalizeTransform"], [268, 1, 1, "", "PyTorchTransforms"], [268, 1, 1, "", "PyTorchTranspose"], [268, 1, 1, "", "PytorchMxnetTransform"], [268, 1, 1, "", "PytorchMxnetWrapFunction"], [268, 1, 1, "", "RandomCropTFTransform"], [268, 1, 1, "", "RandomCropTransform"], [268, 1, 1, "", "RandomHorizontalFlip"], [268, 1, 1, "", "RandomResizedCropMXNetTransform"], [268, 1, 1, "", "RandomResizedCropPytorchTransform"], [268, 1, 1, "", "RandomResizedCropTFTransform"], [268, 1, 1, "", "RandomResizedCropTransform"], [268, 1, 1, "", "RandomVerticalFlip"], [268, 1, 1, "", "RescaleKerasPretrainTransform"], [268, 1, 1, "", "RescaleTFTransform"], [268, 1, 1, "", "RescaleTransform"], [268, 1, 1, "", "ResizeMXNetTransform"], [268, 1, 1, "", "ResizePytorchTransform"], [268, 1, 1, "", "ResizeTFTransform"], [268, 1, 1, "", "ResizeTransform"], [268, 1, 1, "", "ResizeWithRatio"], [268, 1, 1, "", "SquadExample"], [268, 1, 1, "", "TFModelZooCollectTransform"], [268, 1, 1, "", "TFSquadV1ModelZooPostTransform"], [268, 1, 1, "", "TFSquadV1PostTransform"], [268, 1, 1, "", "TRANSFORMS"], [268, 1, 1, "", "TensorflowCropToBoundingBox"], [268, 1, 1, "", "TensorflowRandomHorizontalFlip"], [268, 1, 1, "", "TensorflowRandomVerticalFlip"], [268, 1, 1, "", "TensorflowResizeWithRatio"], [268, 1, 1, "", "TensorflowTransform"], [268, 1, 1, "", "TensorflowTransforms"], [268, 1, 1, "", "TensorflowTranspose"], [268, 1, 1, "", "TensorflowWrapFunction"], [268, 1, 1, "", "ToArray"], [268, 1, 1, "", "ToNDArrayTransform"], [268, 1, 1, "", "Transforms"], [268, 1, 1, "", "Transpose"], [268, 2, 1, "", "convert_examples_to_features"], [268, 2, 1, "", "get_final_text"], [268, 2, 1, "", "get_torchvision_map"], [268, 2, 1, "", "read_squad_examples"], [268, 2, 1, "", "transform_registry"]], "neural_compressor.experimental": [[269, 0, 0, "-", "benchmark"], [272, 0, 0, "-", "common"], [278, 0, 0, "-", "component"], [279, 0, 0, "-", "compression"], [280, 0, 0, "-", "contrib"], [305, 0, 0, "-", "data"], [310, 0, 0, "-", "distillation"], [311, 0, 0, "-", "export"], [315, 0, 0, "-", "graph_optimization"], [323, 0, 0, "-", "metric"], [325, 0, 0, "-", "mixed_precision"], [326, 0, 0, "-", "model_conversion"], [329, 0, 0, "-", "nas"], [335, 0, 0, "-", "pruner_legacy"], [339, 0, 0, "-", "pruning"], [340, 0, 0, "-", "pruning_recipes"], [344, 0, 0, "-", "pruning_v2"], [345, 0, 0, "-", "pytorch_pruner"], [352, 0, 0, "-", "quantization"], [353, 0, 0, "-", "scheduler"], [358, 0, 0, "-", "strategy"]], "neural_compressor.experimental.benchmark": [[269, 1, 1, "", "Benchmark"], [269, 2, 1, "", "get_architecture"], [269, 2, 1, "", "get_bounded_threads"], [269, 2, 1, "", "get_core_ids"], [269, 2, 1, "", "get_physical_ids"], [269, 2, 1, "", "get_threads"], [269, 2, 1, "", "get_threads_per_core"], [269, 2, 1, "", "set_all_env_var"], [269, 2, 1, "", "set_env_var"]], "neural_compressor.experimental.common": [[270, 0, 0, "-", "criterion"], [271, 0, 0, "-", "dataloader"], [273, 0, 0, "-", "metric"], [274, 0, 0, "-", "model"], [275, 0, 0, "-", "optimizer"], [276, 0, 0, "-", "postprocess"], [277, 0, 0, "-", "torch_utils"]], "neural_compressor.experimental.common.criterion": [[270, 1, 1, "", "Criterions"], [270, 1, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [270, 1, 1, "", "KnowledgeDistillationFramework"], [270, 1, 1, "", "KnowledgeDistillationLoss"], [270, 1, 1, "", "PyTorchCriterions"], [270, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [270, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [270, 1, 1, "", "PyTorchKnowledgeDistillationLoss"], [270, 1, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [270, 1, 1, "", "SelfKnowledgeDistillationLoss"], [270, 1, 1, "", "TensorflowCriterions"], [270, 1, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [270, 2, 1, "", "criterion_registry"]], "neural_compressor.experimental.common.dataloader": [[271, 1, 1, "", "DataLoader"]], "neural_compressor.experimental.common.metric": [[273, 1, 1, "", "Metric"]], "neural_compressor.experimental.common.model": [[274, 1, 1, "", "Model"], [274, 2, 1, "", "set_backend"]], "neural_compressor.experimental.common.optimizer": [[275, 1, 1, "", "Optimizers"], [275, 1, 1, "", "PyTorchOptimizers"], [275, 1, 1, "", "PyTorchSGD"], [275, 1, 1, "", "TensorFlowAdamW"], [275, 1, 1, "", "TensorFlowSGD"], [275, 1, 1, "", "TensorflowOptimizers"], [275, 2, 1, "", "optimizer_registry"]], "neural_compressor.experimental.common.postprocess": [[276, 1, 1, "", "Postprocess"]], "neural_compressor.experimental.common.torch_utils": [[277, 2, 1, "", "get_activation"], [277, 2, 1, "", "record_output"]], "neural_compressor.experimental.component": [[278, 1, 1, "", "Component"]], "neural_compressor.experimental.contrib": [[281, 0, 0, "-", "strategy"]], "neural_compressor.experimental.contrib.strategy": [[282, 0, 0, "-", "sigopt"], [283, 0, 0, "-", "tpe"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[282, 1, 1, "", "SigOptTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.tpe": [[283, 1, 1, "", "TpeTuneStrategy"]], "neural_compressor.experimental.data": [[288, 0, 0, "-", "dataloaders"], [300, 0, 0, "-", "datasets"], [304, 0, 0, "-", "filters"], [307, 0, 0, "-", "transforms"]], "neural_compressor.experimental.data.dataloaders": [[284, 0, 0, "-", "base_dataloader"], [285, 0, 0, "-", "dataloader"], [286, 0, 0, "-", "default_dataloader"], [287, 0, 0, "-", "fetcher"], [289, 0, 0, "-", "mxnet_dataloader"], [290, 0, 0, "-", "onnxrt_dataloader"], [291, 0, 0, "-", "pytorch_dataloader"], [292, 0, 0, "-", "sampler"], [293, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[284, 1, 1, "", "BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[286, 1, 1, "", "DefaultDataLoader"], [286, 2, 1, "", "default_collate"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[287, 1, 1, "", "Fetcher"], [287, 1, 1, "", "IndexFetcher"], [287, 1, 1, "", "IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[289, 1, 1, "", "MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[290, 1, 1, "", "ONNXRTBertDataLoader"], [290, 1, 1, "", "ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[291, 1, 1, "", "PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[292, 1, 1, "", "BatchSampler"], [292, 1, 1, "", "IterableSampler"], [292, 1, 1, "", "Sampler"], [292, 1, 1, "", "SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[293, 1, 1, "", "TFDataDataLoader"], [293, 1, 1, "", "TensorflowBertDataLoader"], [293, 1, 1, "", "TensorflowDataLoader"], [293, 1, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.datasets": [[294, 0, 0, "-", "bert_dataset"], [295, 0, 0, "-", "coco_dataset"], [296, 0, 0, "-", "dataset"], [297, 0, 0, "-", "dummy_dataset"], [298, 0, 0, "-", "dummy_dataset_v2"], [299, 0, 0, "-", "imagenet_dataset"], [301, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[294, 1, 1, "", "InputFeatures"], [294, 1, 1, "", "ONNXRTBertDataset"], [294, 1, 1, "", "ParseDecodeBert"], [294, 1, 1, "", "PytorchBertDataset"], [294, 1, 1, "", "TensorflowBertDataset"], [294, 1, 1, "", "TensorflowModelZooBertDataset"], [294, 2, 1, "", "convert_examples_to_features"], [294, 2, 1, "", "load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[295, 1, 1, "", "COCONpy"], [295, 1, 1, "", "COCORaw"], [295, 1, 1, "", "COCORecordDataset"], [295, 1, 1, "", "ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.dataset": [[296, 1, 1, "", "CIFAR10"], [296, 1, 1, "", "CIFAR100"], [296, 1, 1, "", "Dataset"], [296, 1, 1, "", "Datasets"], [296, 1, 1, "", "FashionMNIST"], [296, 1, 1, "", "ImageFolder"], [296, 1, 1, "", "IterableDataset"], [296, 1, 1, "", "MNIST"], [296, 1, 1, "", "MXNetCIFAR10"], [296, 1, 1, "", "MXNetCIFAR100"], [296, 1, 1, "", "MXNetDatasets"], [296, 1, 1, "", "MXNetFashionMNIST"], [296, 1, 1, "", "MXNetImageFolder"], [296, 1, 1, "", "MXNetMNIST"], [296, 1, 1, "", "ONNXRTITDatasets"], [296, 1, 1, "", "ONNXRTQLDatasets"], [296, 1, 1, "", "PyTorchDatasets"], [296, 1, 1, "", "PytorchCIFAR10"], [296, 1, 1, "", "PytorchCIFAR100"], [296, 1, 1, "", "PytorchFashionMNIST"], [296, 1, 1, "", "PytorchMNIST"], [296, 1, 1, "", "PytorchMxnetWrapDataset"], [296, 1, 1, "", "PytorchMxnetWrapFunction"], [296, 1, 1, "", "TensorflowCIFAR10"], [296, 1, 1, "", "TensorflowCIFAR100"], [296, 1, 1, "", "TensorflowDatasets"], [296, 1, 1, "", "TensorflowFashionMNIST"], [296, 1, 1, "", "TensorflowImageFolder"], [296, 1, 1, "", "TensorflowImageRecord"], [296, 1, 1, "", "TensorflowMNIST"], [296, 1, 1, "", "TensorflowTFRecordDataset"], [296, 1, 1, "", "TensorflowVOCRecord"], [296, 2, 1, "", "calculate_md5"], [296, 2, 1, "", "check_integrity"], [296, 2, 1, "", "dataset_registry"], [296, 2, 1, "", "download_url"], [296, 5, 1, "", "framework_datasets"], [296, 2, 1, "", "gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[297, 1, 1, "", "DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[298, 1, 1, "", "DummyDataset"], [298, 1, 1, "", "SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[299, 1, 1, "", "ImagenetRaw"], [299, 1, 1, "", "MXNetImagenetRaw"], [299, 1, 1, "", "ONNXRTImagenetDataset"], [299, 1, 1, "", "PytorchImagenetRaw"], [299, 1, 1, "", "TensorflowImagenetDataset"], [299, 1, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[301, 1, 1, "", "StyleTransferDataset"]], "neural_compressor.experimental.data.filters": [[302, 0, 0, "-", "coco_filter"], [303, 0, 0, "-", "filter"]], "neural_compressor.experimental.data.filters.coco_filter": [[302, 1, 1, "", "LabelBalanceCOCORawFilter"], [302, 1, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.filter": [[303, 1, 1, "", "FILTERS"], [303, 1, 1, "", "Filter"], [303, 1, 1, "", "MXNetFilters"], [303, 1, 1, "", "ONNXRTITFilters"], [303, 1, 1, "", "ONNXRTQLFilters"], [303, 1, 1, "", "PyTorchFilters"], [303, 1, 1, "", "TensorflowFilters"], [303, 2, 1, "", "filter_registry"]], "neural_compressor.experimental.data.transforms": [[306, 0, 0, "-", "imagenet_transform"], [308, 0, 0, "-", "tokenization"], [309, 0, 0, "-", "transform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[306, 1, 1, "", "BilinearImagenetTransform"], [306, 1, 1, "", "LabelShift"], [306, 1, 1, "", "ONNXResizeCropImagenetTransform"], [306, 1, 1, "", "OnnxBilinearImagenetTransform"], [306, 1, 1, "", "ParseDecodeImagenet"], [306, 1, 1, "", "ParseDecodeImagenetTransform"], [306, 1, 1, "", "QuantizedInput"], [306, 1, 1, "", "ResizeWithAspectRatio"], [306, 1, 1, "", "TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.tokenization": [[308, 1, 1, "", "BasicTokenizer"], [308, 1, 1, "", "FullTokenizer"], [308, 1, 1, "", "WordpieceTokenizer"], [308, 2, 1, "", "convert_by_vocab"], [308, 2, 1, "", "convert_to_unicode"], [308, 2, 1, "", "load_vocab"], [308, 2, 1, "", "whitespace_tokenize"]], "neural_compressor.experimental.data.transforms.transform": [[309, 1, 1, "", "AlignImageChannelTransform"], [309, 1, 1, "", "BaseTransform"], [309, 1, 1, "", "CastONNXTransform"], [309, 1, 1, "", "CastPyTorchTransform"], [309, 1, 1, "", "CastTFTransform"], [309, 1, 1, "", "CenterCropTFTransform"], [309, 1, 1, "", "CenterCropTransform"], [309, 1, 1, "", "CollectTransform"], [309, 1, 1, "", "ComposeTransform"], [309, 1, 1, "", "CropResizeTFTransform"], [309, 1, 1, "", "CropResizeTransform"], [309, 1, 1, "", "CropToBoundingBox"], [309, 1, 1, "", "InputFeatures"], [309, 1, 1, "", "MXNetCropResizeTransform"], [309, 1, 1, "", "MXNetCropToBoundingBox"], [309, 1, 1, "", "MXNetNormalizeTransform"], [309, 1, 1, "", "MXNetTransforms"], [309, 1, 1, "", "MXNetTranspose"], [309, 1, 1, "", "NormalizeTFTransform"], [309, 1, 1, "", "NormalizeTransform"], [309, 1, 1, "", "ONNXRTCropToBoundingBox"], [309, 1, 1, "", "ONNXRTITTransforms"], [309, 1, 1, "", "ONNXRTQLTransforms"], [309, 1, 1, "", "PaddedCenterCropTransform"], [309, 1, 1, "", "ParseDecodeVocTransform"], [309, 1, 1, "", "PyTorchAlignImageChannel"], [309, 1, 1, "", "PyTorchCropResizeTransform"], [309, 1, 1, "", "PyTorchNormalizeTransform"], [309, 1, 1, "", "PyTorchTransforms"], [309, 1, 1, "", "PyTorchTranspose"], [309, 1, 1, "", "PytorchMxnetTransform"], [309, 1, 1, "", "PytorchMxnetWrapFunction"], [309, 1, 1, "", "RandomCropTFTransform"], [309, 1, 1, "", "RandomCropTransform"], [309, 1, 1, "", "RandomHorizontalFlip"], [309, 1, 1, "", "RandomResizedCropMXNetTransform"], [309, 1, 1, "", "RandomResizedCropPytorchTransform"], [309, 1, 1, "", "RandomResizedCropTFTransform"], [309, 1, 1, "", "RandomResizedCropTransform"], [309, 1, 1, "", "RandomVerticalFlip"], [309, 1, 1, "", "RescaleKerasPretrainTransform"], [309, 1, 1, "", "RescaleTFTransform"], [309, 1, 1, "", "RescaleTransform"], [309, 1, 1, "", "ResizeMXNetTransform"], [309, 1, 1, "", "ResizePytorchTransform"], [309, 1, 1, "", "ResizeTFTransform"], [309, 1, 1, "", "ResizeTransform"], [309, 1, 1, "", "ResizeWithRatio"], [309, 1, 1, "", "SquadExample"], [309, 1, 1, "", "TFModelZooCollectTransform"], [309, 1, 1, "", "TFSquadV1ModelZooPostTransform"], [309, 1, 1, "", "TFSquadV1PostTransform"], [309, 1, 1, "", "TRANSFORMS"], [309, 1, 1, "", "TensorflowCropToBoundingBox"], [309, 1, 1, "", "TensorflowRandomHorizontalFlip"], [309, 1, 1, "", "TensorflowRandomVerticalFlip"], [309, 1, 1, "", "TensorflowResizeWithRatio"], [309, 1, 1, "", "TensorflowTransform"], [309, 1, 1, "", "TensorflowTransforms"], [309, 1, 1, "", "TensorflowTranspose"], [309, 1, 1, "", "TensorflowWrapFunction"], [309, 1, 1, "", "ToArray"], [309, 1, 1, "", "ToNDArrayTransform"], [309, 1, 1, "", "Transforms"], [309, 1, 1, "", "Transpose"], [309, 2, 1, "", "convert_examples_to_features"], [309, 2, 1, "", "get_final_text"], [309, 2, 1, "", "get_torchvision_map"], [309, 2, 1, "", "read_squad_examples"], [309, 2, 1, "", "transform_registry"]], "neural_compressor.experimental.distillation": [[310, 1, 1, "", "Distillation"]], "neural_compressor.experimental.distillation.Distillation": [[310, 4, 1, "", "_epoch_ran"], [310, 4, 1, "", "best_model"], [310, 4, 1, "", "best_score"], [310, 4, 1, "", "eval_frequency"]], "neural_compressor.experimental.export": [[312, 0, 0, "-", "qlinear2qdq"], [313, 0, 0, "-", "tf2onnx"], [314, 0, 0, "-", "torch2onnx"]], "neural_compressor.experimental.export.qlinear2qdq": [[312, 2, 1, "", "check_model"], [312, 2, 1, "", "onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.tf2onnx": [[313, 2, 1, "", "tf_to_fp32_onnx"], [313, 2, 1, "", "tf_to_int8_onnx"]], "neural_compressor.experimental.export.torch2onnx": [[314, 2, 1, "", "dynamic_quant_export"], [314, 2, 1, "", "get_node_mapping"], [314, 2, 1, "", "get_quantizable_onnx_ops"], [314, 2, 1, "", "static_quant_export"], [314, 2, 1, "", "torch_to_fp32_onnx"], [314, 2, 1, "", "torch_to_int8_onnx"]], "neural_compressor.experimental.graph_optimization": [[315, 1, 1, "", "Graph_Optimization"]], "neural_compressor.experimental.metric": [[317, 0, 0, "-", "bleu"], [318, 0, 0, "-", "bleu_util"], [319, 0, 0, "-", "coco_label_map"], [320, 0, 0, "-", "coco_tools"], [321, 0, 0, "-", "evaluate_squad"], [322, 0, 0, "-", "f1"], [324, 0, 0, "-", "metric"]], "neural_compressor.experimental.metric.bleu": [[317, 1, 1, "", "BLEU"], [317, 1, 1, "", "UnicodeRegex"], [317, 2, 1, "", "bleu_tokenize"]], "neural_compressor.experimental.metric.bleu.BLEU": [[317, 4, 1, "", "labels"], [317, 4, 1, "", "predictions"]], "neural_compressor.experimental.metric.bleu.UnicodeRegex": [[317, 4, 1, "", "nondigit_punct_re"], [317, 4, 1, "", "punct_nondigit_re"], [317, 4, 1, "", "symbol_re"]], "neural_compressor.experimental.metric.bleu_util": [[318, 2, 1, "", "compute_bleu"]], "neural_compressor.experimental.metric.coco_tools": [[320, 1, 1, "", "COCOEvalWrapper"], [320, 1, 1, "", "COCOWrapper"], [320, 2, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [320, 2, 1, "", "ExportSingleImageDetectionMasksToCoco"], [320, 2, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.experimental.metric.coco_tools.COCOWrapper": [[320, 4, 1, "", "dataset"], [320, 4, 1, "", "detection_type"]], "neural_compressor.experimental.metric.evaluate_squad": [[321, 2, 1, "", "evaluate"], [321, 2, 1, "", "exact_match_score"], [321, 2, 1, "", "f1_score"], [321, 2, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[322, 2, 1, "", "evaluate"], [322, 2, 1, "", "f1_score"], [322, 2, 1, "", "metric_max_over_ground_truths"], [322, 2, 1, "", "normalize_answer"]], "neural_compressor.experimental.metric.metric": [[324, 1, 1, "", "Accuracy"], [324, 1, 1, "", "BaseMetric"], [324, 1, 1, "", "COCOmAPv2"], [324, 1, 1, "", "F1"], [324, 1, 1, "", "GeneralTopK"], [324, 1, 1, "", "Loss"], [324, 1, 1, "", "MAE"], [324, 1, 1, "", "METRICS"], [324, 1, 1, "", "MSE"], [324, 1, 1, "", "MXNetMetrics"], [324, 1, 1, "", "ONNXRTGLUE"], [324, 1, 1, "", "ONNXRTITMetrics"], [324, 1, 1, "", "ONNXRTQLMetrics"], [324, 1, 1, "", "PyTorchLoss"], [324, 1, 1, "", "PyTorchMetrics"], [324, 1, 1, "", "RMSE"], [324, 1, 1, "", "ROC"], [324, 1, 1, "", "SquadF1"], [324, 1, 1, "", "TensorflowCOCOMAP"], [324, 1, 1, "", "TensorflowMAP"], [324, 1, 1, "", "TensorflowMetrics"], [324, 1, 1, "", "TensorflowTopK"], [324, 1, 1, "", "TensorflowVOCMAP"], [324, 1, 1, "", "WrapMXNetMetric"], [324, 1, 1, "", "WrapONNXRTMetric"], [324, 1, 1, "", "WrapPyTorchMetric"], [324, 1, 1, "", "mIOU"], [324, 2, 1, "", "metric_registry"]], "neural_compressor.experimental.metric.metric.Accuracy": [[324, 4, 1, "", "label_list"], [324, 4, 1, "", "pred_list"], [324, 4, 1, "", "sample"]], "neural_compressor.experimental.metric.metric.GeneralTopK": [[324, 4, 1, "", "k"], [324, 4, 1, "", "num_correct"], [324, 4, 1, "", "num_sample"]], "neural_compressor.experimental.metric.metric.Loss": [[324, 4, 1, "", "sample"], [324, 4, 1, "", "sum"]], "neural_compressor.experimental.metric.metric.MAE": [[324, 4, 1, "", "compare_label"], [324, 4, 1, "", "label_list"], [324, 4, 1, "", "pred_list"]], "neural_compressor.experimental.metric.metric.METRICS": [[324, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.MSE": [[324, 4, 1, "", "compare_label"], [324, 4, 1, "", "label_list"], [324, 4, 1, "", "pred_list"]], "neural_compressor.experimental.metric.metric.MXNetMetrics": [[324, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTITMetrics": [[324, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics": [[324, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.PyTorchMetrics": [[324, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.RMSE": [[324, 4, 1, "", "mse"]], "neural_compressor.experimental.metric.metric.TensorflowMetrics": [[324, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.TensorflowTopK": [[324, 4, 1, "", "k"], [324, 4, 1, "", "num_correct"], [324, 4, 1, "", "num_sample"]], "neural_compressor.experimental.mixed_precision": [[325, 1, 1, "", "MixedPrecision"]], "neural_compressor.experimental.model_conversion": [[326, 1, 1, "", "ModelConversion"]], "neural_compressor.experimental.nas": [[327, 0, 0, "-", "basic_nas"], [328, 0, 0, "-", "dynas"], [330, 0, 0, "-", "nas"], [331, 0, 0, "-", "nas_utils"], [332, 0, 0, "-", "search_algorithms"]], "neural_compressor.experimental.nas.basic_nas": [[327, 1, 1, "", "BasicNAS"]], "neural_compressor.experimental.nas.dynas": [[328, 1, 1, "", "DyNAS"]], "neural_compressor.experimental.nas.nas": [[330, 1, 1, "", "NAS"], [330, 1, 1, "", "NASBase"]], "neural_compressor.experimental.nas.nas_utils": [[331, 2, 1, "", "create_search_space_pool"], [331, 2, 1, "", "find_pareto_front"], [331, 2, 1, "", "nas_registry"]], "neural_compressor.experimental.nas.search_algorithms": [[332, 1, 1, "", "BayesianOptimizationSearcher"], [332, 1, 1, "", "GridSearcher"], [332, 1, 1, "", "RandomSearcher"], [332, 1, 1, "", "Searcher"]], "neural_compressor.experimental.pruner_legacy": [[333, 0, 0, "-", "gradient_sensitivity"], [334, 0, 0, "-", "group_lasso"], [336, 0, 0, "-", "magnitude"], [337, 0, 0, "-", "pattern_lock"], [338, 0, 0, "-", "pruner"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[333, 1, 1, "", "GradientSensitivityPruner"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[334, 1, 1, "", "GroupLassoPruner"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[336, 1, 1, "", "BasicMagnitudePruner"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[337, 1, 1, "", "PatternLockPruner"]], "neural_compressor.experimental.pruner_legacy.pruner": [[338, 1, 1, "", "Pruner"], [338, 2, 1, "", "pruner_registry"]], "neural_compressor.experimental.pruning": [[339, 1, 1, "", "Pruning"], [339, 1, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning.Pruning": [[339, 4, 1, "", "conf"], [339, 4, 1, "", "pruners"]], "neural_compressor.experimental.pruning_recipes": [[341, 0, 0, "-", "patterns"]], "neural_compressor.experimental.pruning_recipes.patterns": [[342, 0, 0, "-", "pattern"], [343, 0, 0, "-", "tile_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[342, 1, 1, "", "PATTERNS"], [342, 1, 1, "", "PatternBase"], [342, 2, 1, "", "pattern_registry"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS": [[342, 4, 1, "", "patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[343, 1, 1, "", "TilePatternBase"], [343, 1, 1, "", "TilePattern_1x1"], [343, 1, 1, "", "TilePattern_1x16"], [343, 1, 1, "", "TilePattern_1x2"], [343, 1, 1, "", "TilePattern_2x2"], [343, 1, 1, "", "TilePattern_4x1"]], "neural_compressor.experimental.pruning_v2": [[344, 1, 1, "", "Pruning"], [344, 1, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning_v2.Pruning": [[344, 4, 1, "", "conf"], [344, 4, 1, "", "pruners"]], "neural_compressor.experimental.pytorch_pruner": [[346, 0, 0, "-", "logger"], [347, 0, 0, "-", "patterns"], [348, 0, 0, "-", "prune_utils"], [349, 0, 0, "-", "pruner"], [350, 0, 0, "-", "pruning"], [351, 0, 0, "-", "scheduler"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[347, 1, 1, "", "Pattern"], [347, 1, 1, "", "PatternNInM"], [347, 1, 1, "", "PatternNxM"], [347, 2, 1, "", "get_pattern"], [347, 2, 1, "", "register_pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.Pattern": [[347, 4, 1, "", "is_global"], [347, 4, 1, "", "pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM": [[347, 4, 1, "", "M"], [347, 4, 1, "", "N"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM": [[347, 4, 1, "", "block_size"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[348, 2, 1, "", "check_config"], [348, 2, 1, "", "parse_not_to_prune"], [348, 2, 1, "", "parse_to_prune"], [348, 2, 1, "", "process_and_check_config"], [348, 2, 1, "", "process_config"], [348, 2, 1, "", "reset_non_value_to_default"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[349, 1, 1, "", "MagnitudePruner"], [349, 1, 1, "", "PatternLockPruner"], [349, 1, 1, "", "Pruner"], [349, 1, 1, "", "SnipMomentumPruner"], [349, 1, 1, "", "SnipPruner"], [349, 2, 1, "", "get_pruner"], [349, 2, 1, "", "register_pruners"]], "neural_compressor.experimental.pytorch_pruner.pruner.Pruner": [[349, 4, 1, "", "config"], [349, 4, 1, "", "current_sparsity_ratio"], [349, 4, 1, "", "end_step"], [349, 4, 1, "", "global_step"], [349, 4, 1, "", "masks"], [349, 4, 1, "", "max_sparsity_ratio_per_layer"], [349, 4, 1, "", "modules"], [349, 4, 1, "", "pattern"], [349, 4, 1, "", "scheduler"], [349, 4, 1, "", "scores"], [349, 4, 1, "", "start_step"], [349, 4, 1, "", "target_sparsity_ratio"], [349, 4, 1, "", "update_frequency_on_step"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[350, 1, 1, "", "Pruning"]], "neural_compressor.experimental.pytorch_pruner.pruning.Pruning": [[350, 4, 1, "", "config_file_path"], [350, 4, 1, "", "model"], [350, 4, 1, "", "pruner_info"], [350, 4, 1, "", "pruners"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[351, 1, 1, "", "IterativeScheduler"], [351, 1, 1, "", "OneshotScheduler"], [351, 1, 1, "", "Scheduler"], [351, 2, 1, "", "get_scheduler"], [351, 2, 1, "", "register_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler": [[351, 4, 1, "", "config"]], "neural_compressor.experimental.quantization": [[352, 1, 1, "", "Quantization"]], "neural_compressor.experimental.scheduler": [[353, 1, 1, "", "Scheduler"]], "neural_compressor.experimental.strategy": [[354, 0, 0, "-", "auto_mixed_precision"], [355, 0, 0, "-", "basic"], [356, 0, 0, "-", "bayesian"], [357, 0, 0, "-", "exhaustive"], [359, 0, 0, "-", "mse"], [360, 0, 0, "-", "mse_v2"], [361, 0, 0, "-", "random"], [362, 0, 0, "-", "strategy"], [364, 0, 0, "-", "utils"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[354, 1, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.experimental.strategy.basic": [[355, 1, 1, "", "BasicTuneStrategy"]], "neural_compressor.experimental.strategy.bayesian": [[356, 1, 1, "", "BayesianOptimization"], [356, 1, 1, "", "BayesianTuneStrategy"], [356, 1, 1, "", "TargetSpace"], [356, 2, 1, "", "acq_max"]], "neural_compressor.experimental.strategy.exhaustive": [[357, 1, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.experimental.strategy.mse": [[359, 1, 1, "", "MSETuneStrategy"]], "neural_compressor.experimental.strategy.mse_v2": [[360, 1, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.experimental.strategy.random": [[361, 1, 1, "", "RandomTuneStrategy"]], "neural_compressor.experimental.strategy.strategy": [[362, 1, 1, "", "TuneStrategy"], [362, 2, 1, "", "strategy_registry"]], "neural_compressor.experimental.strategy.utils": [[363, 0, 0, "-", "constant"], [365, 0, 0, "-", "tuning_sampler"], [366, 0, 0, "-", "tuning_space"], [367, 0, 0, "-", "tuning_structs"], [368, 0, 0, "-", "utility"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[365, 1, 1, "", "FallbackTuningSampler"], [365, 1, 1, "", "ModelWiseTuningSampler"], [365, 1, 1, "", "OpTypeWiseTuningSampler"], [365, 1, 1, "", "OpWiseTuningSampler"], [365, 1, 1, "", "SmoothQuantSampler"], [365, 1, 1, "", "TuningOrder"], [365, 1, 1, "", "TuningSampler"], [365, 1, 1, "", "TuningSamplerRegistry"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[366, 1, 1, "", "TuningItem"], [366, 1, 1, "", "TuningSpace"], [366, 2, 1, "", "initial_tuning_cfg_with_quant_mode"], [366, 2, 1, "", "pattern_to_internal"], [366, 2, 1, "", "pattern_to_path"], [366, 2, 1, "", "quant_mode_from_pattern"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[367, 1, 1, "", "OpTuningConfig"]], "neural_compressor.experimental.strategy.utils.utility": [[368, 1, 1, "", "OrderedDefaultDict"], [368, 2, 1, "", "extract_data_type"], [368, 2, 1, "", "get_adaptor_name"], [368, 2, 1, "", "reverted_data_type"]], "neural_compressor.metric": [[370, 0, 0, "-", "bleu"], [371, 0, 0, "-", "bleu_util"], [372, 0, 0, "-", "coco_label_map"], [373, 0, 0, "-", "coco_tools"], [374, 0, 0, "-", "evaluate_squad"], [375, 0, 0, "-", "f1"], [377, 0, 0, "-", "metric"]], "neural_compressor.metric.bleu": [[370, 1, 1, "", "BLEU"], [370, 1, 1, "", "UnicodeRegex"], [370, 2, 1, "", "bleu_tokenize"]], "neural_compressor.metric.bleu.BLEU": [[370, 4, 1, "", "labels"], [370, 4, 1, "", "predictions"]], "neural_compressor.metric.bleu.UnicodeRegex": [[370, 4, 1, "", "nondigit_punct_re"], [370, 4, 1, "", "punct_nondigit_re"], [370, 4, 1, "", "symbol_re"]], "neural_compressor.metric.bleu_util": [[371, 2, 1, "", "compute_bleu"]], "neural_compressor.metric.coco_tools": [[373, 1, 1, "", "COCOEvalWrapper"], [373, 1, 1, "", "COCOWrapper"], [373, 2, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [373, 2, 1, "", "ExportSingleImageDetectionMasksToCoco"], [373, 2, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.metric.coco_tools.COCOWrapper": [[373, 4, 1, "", "dataset"], [373, 4, 1, "", "detection_type"]], "neural_compressor.metric.evaluate_squad": [[374, 2, 1, "", "evaluate"], [374, 2, 1, "", "exact_match_score"], [374, 2, 1, "", "f1_score"], [374, 2, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[375, 2, 1, "", "evaluate"], [375, 2, 1, "", "f1_score"], [375, 2, 1, "", "metric_max_over_ground_truths"], [375, 2, 1, "", "normalize_answer"]], "neural_compressor.metric.metric": [[377, 1, 1, "", "Accuracy"], [377, 1, 1, "", "BaseMetric"], [377, 1, 1, "", "COCOmAPv2"], [377, 1, 1, "", "F1"], [377, 1, 1, "", "GeneralTopK"], [377, 1, 1, "", "Loss"], [377, 1, 1, "", "MAE"], [377, 1, 1, "", "METRICS"], [377, 1, 1, "", "MSE"], [377, 1, 1, "", "MXNetMetrics"], [377, 1, 1, "", "Metric"], [377, 1, 1, "", "ONNXRTGLUE"], [377, 1, 1, "", "ONNXRTITMetrics"], [377, 1, 1, "", "ONNXRTQLMetrics"], [377, 1, 1, "", "PyTorchLoss"], [377, 1, 1, "", "PyTorchMetrics"], [377, 1, 1, "", "RMSE"], [377, 1, 1, "", "ROC"], [377, 1, 1, "", "SquadF1"], [377, 1, 1, "", "TensorflowCOCOMAP"], [377, 1, 1, "", "TensorflowMAP"], [377, 1, 1, "", "TensorflowMetrics"], [377, 1, 1, "", "TensorflowTopK"], [377, 1, 1, "", "TensorflowVOCMAP"], [377, 1, 1, "", "WrapMXNetMetric"], [377, 1, 1, "", "WrapONNXRTMetric"], [377, 1, 1, "", "WrapPyTorchMetric"], [377, 1, 1, "", "mIOU"], [377, 2, 1, "", "metric_registry"], [377, 2, 1, "", "register_customer_metric"]], "neural_compressor.metric.metric.Accuracy": [[377, 4, 1, "", "label_list"], [377, 4, 1, "", "pred_list"], [377, 4, 1, "", "sample"]], "neural_compressor.metric.metric.GeneralTopK": [[377, 4, 1, "", "k"], [377, 4, 1, "", "num_correct"], [377, 4, 1, "", "num_sample"]], "neural_compressor.metric.metric.Loss": [[377, 4, 1, "", "sample"], [377, 4, 1, "", "sum"]], "neural_compressor.metric.metric.MAE": [[377, 4, 1, "", "compare_label"], [377, 4, 1, "", "label_list"], [377, 4, 1, "", "pred_list"]], "neural_compressor.metric.metric.METRICS": [[377, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.MSE": [[377, 4, 1, "", "compare_label"], [377, 4, 1, "", "label_list"], [377, 4, 1, "", "pred_list"]], "neural_compressor.metric.metric.MXNetMetrics": [[377, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTITMetrics": [[377, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTQLMetrics": [[377, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.PyTorchMetrics": [[377, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.RMSE": [[377, 4, 1, "", "mse"]], "neural_compressor.metric.metric.TensorflowMetrics": [[377, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.TensorflowTopK": [[377, 4, 1, "", "k"], [377, 4, 1, "", "num_correct"], [377, 4, 1, "", "num_sample"]], "neural_compressor.mix_precision": [[378, 2, 1, "", "fit"]], "neural_compressor.model": [[379, 0, 0, "-", "base_model"], [381, 0, 0, "-", "keras_model"], [382, 0, 0, "-", "model"], [383, 0, 0, "-", "mxnet_model"], [384, 0, 0, "-", "nets_factory"], [385, 0, 0, "-", "onnx_model"], [386, 0, 0, "-", "tensorflow_model"], [387, 0, 0, "-", "torch_model"]], "neural_compressor.model.base_model": [[379, 1, 1, "", "BaseModel"]], "neural_compressor.model.keras_model": [[381, 1, 1, "", "KerasModel"]], "neural_compressor.model.model": [[382, 1, 1, "", "Model"], [382, 2, 1, "", "get_model_fwk_name"]], "neural_compressor.model.mxnet_model": [[383, 1, 1, "", "MXNetModel"]], "neural_compressor.model.nets_factory": [[384, 1, 1, "", "TFSlimNetsFactory"]], "neural_compressor.model.onnx_model": [[385, 1, 1, "", "ONNXModel"]], "neural_compressor.model.tensorflow_model": [[386, 1, 1, "", "TensorflowBaseModel"], [386, 1, 1, "", "TensorflowCheckpointModel"], [386, 1, 1, "", "TensorflowLLMModel"], [386, 1, 1, "", "TensorflowModel"], [386, 1, 1, "", "TensorflowQATModel"], [386, 1, 1, "", "TensorflowSavedModelModel"], [386, 2, 1, "", "checkpoint_session"], [386, 2, 1, "", "estimator_session"], [386, 2, 1, "", "frozen_pb_session"], [386, 2, 1, "", "get_model_type"], [386, 2, 1, "", "graph_def_session"], [386, 2, 1, "", "graph_session"], [386, 2, 1, "", "keras_session"], [386, 2, 1, "", "load_saved_model"], [386, 2, 1, "", "saved_model_session"], [386, 2, 1, "", "slim_session"], [386, 2, 1, "", "validate_and_inference_input_output"], [386, 2, 1, "", "validate_graph_node"]], "neural_compressor.model.torch_model": [[387, 1, 1, "", "IPEXModel"], [387, 1, 1, "", "PyTorchBaseModel"], [387, 1, 1, "", "PyTorchFXModel"], [387, 1, 1, "", "PyTorchModel"]], "neural_compressor.objective": [[388, 1, 1, "", "Accuracy"], [388, 1, 1, "", "Footprint"], [388, 1, 1, "", "ModelSize"], [388, 1, 1, "", "MultiObjective"], [388, 1, 1, "", "Objective"], [388, 1, 1, "", "Performance"], [388, 2, 1, "", "objective_custom_registry"], [388, 2, 1, "", "objective_registry"]], "neural_compressor.onnxrt": [[389, 0, 0, "-", "algorithms"], [405, 0, 0, "-", "quantization"], [407, 0, 0, "-", "utils"]], "neural_compressor.onnxrt.algorithms": [[391, 0, 0, "-", "layer_wise"], [394, 0, 0, "-", "smoother"], [397, 0, 0, "-", "weight_only"]], "neural_compressor.onnxrt.algorithms.layer_wise": [[390, 0, 0, "-", "core"]], "neural_compressor.onnxrt.algorithms.layer_wise.core": [[390, 2, 1, "", "layer_wise_quant"]], "neural_compressor.onnxrt.algorithms.smoother": [[392, 0, 0, "-", "calibrator"], [393, 0, 0, "-", "core"]], "neural_compressor.onnxrt.algorithms.smoother.calibrator": [[392, 1, 1, "", "Calibrator"]], "neural_compressor.onnxrt.algorithms.smoother.core": [[393, 1, 1, "", "Smoother"]], "neural_compressor.onnxrt.algorithms.weight_only": [[395, 0, 0, "-", "awq"], [396, 0, 0, "-", "gptq"], [398, 0, 0, "-", "rtn"], [399, 0, 0, "-", "utility"]], "neural_compressor.onnxrt.algorithms.weight_only.awq": [[395, 2, 1, "", "apply_awq_on_model"], [395, 2, 1, "", "awq_quantize"]], "neural_compressor.onnxrt.algorithms.weight_only.gptq": [[396, 2, 1, "", "apply_gptq_on_model"], [396, 2, 1, "", "gptq_quantize"]], "neural_compressor.onnxrt.algorithms.weight_only.rtn": [[398, 2, 1, "", "apply_rtn_on_model"], [398, 2, 1, "", "rtn_quantize"]], "neural_compressor.onnxrt.algorithms.weight_only.utility": [[399, 2, 1, "", "make_matmul_weight_only_node"], [399, 2, 1, "", "pad_tensor"], [399, 2, 1, "", "prepare_inputs"], [399, 2, 1, "", "qdq_tensor"], [399, 2, 1, "", "quant_tensor"]], "neural_compressor.onnxrt.quantization": [[401, 0, 0, "-", "algorithm_entry"], [402, 0, 0, "-", "autotune"], [403, 0, 0, "-", "calibrate"], [404, 0, 0, "-", "config"], [406, 0, 0, "-", "quantize"]], "neural_compressor.onnxrt.quantization.algorithm_entry": [[401, 2, 1, "", "awq_quantize_entry"], [401, 2, 1, "", "gptq_quantize_entry"], [401, 2, 1, "", "rtn_quantize_entry"], [401, 2, 1, "", "smooth_quant_entry"]], "neural_compressor.onnxrt.quantization.autotune": [[402, 2, 1, "", "autotune"]], "neural_compressor.onnxrt.quantization.calibrate": [[403, 1, 1, "", "CalibrationDataReader"]], "neural_compressor.onnxrt.quantization.config": [[404, 1, 1, "", "AWQConfig"], [404, 1, 1, "", "GPTQConfig"], [404, 1, 1, "", "RTNConfig"], [404, 1, 1, "", "SmoohQuantConfig"], [404, 2, 1, "", "get_default_awq_config"], [404, 2, 1, "", "get_default_gptq_config"], [404, 2, 1, "", "get_default_rtn_config"], [404, 2, 1, "", "get_default_sq_config"]], "neural_compressor.onnxrt.utils": [[408, 0, 0, "-", "onnx_model"], [409, 0, 0, "-", "utility"]], "neural_compressor.onnxrt.utils.onnx_model": [[408, 1, 1, "", "ONNXModel"]], "neural_compressor.onnxrt.utils.utility": [[409, 2, 1, "", "check_model_with_infer_shapes"], [409, 2, 1, "", "find_by_name"], [409, 2, 1, "", "get_qrange_for_qType"], [409, 2, 1, "", "is_B_transposed"], [409, 2, 1, "", "quantize_data"], [409, 2, 1, "", "register_algo"], [409, 2, 1, "", "simple_progress_bar"]], "neural_compressor.profiling": [[412, 0, 0, "-", "parser"], [422, 0, 0, "-", "profiler"]], "neural_compressor.profiling.parser": [[411, 0, 0, "-", "factory"], [414, 0, 0, "-", "onnx_parser"], [416, 0, 0, "-", "parser"], [417, 0, 0, "-", "result"], [419, 0, 0, "-", "tensorflow_parser"]], "neural_compressor.profiling.parser.factory": [[411, 1, 1, "", "ParserFactory"]], "neural_compressor.profiling.parser.onnx_parser": [[413, 0, 0, "-", "factory"], [415, 0, 0, "-", "parser"]], "neural_compressor.profiling.parser.onnx_parser.factory": [[413, 1, 1, "", "OnnxrtParserFactory"]], "neural_compressor.profiling.parser.onnx_parser.parser": [[415, 1, 1, "", "OnnxProfilingParser"]], "neural_compressor.profiling.parser.parser": [[416, 1, 1, "", "ProfilingParser"]], "neural_compressor.profiling.parser.result": [[417, 1, 1, "", "ProfilingResult"]], "neural_compressor.profiling.parser.tensorflow_parser": [[418, 0, 0, "-", "factory"], [420, 0, 0, "-", "parser"]], "neural_compressor.profiling.parser.tensorflow_parser.factory": [[418, 1, 1, "", "TensorFlowParserFactory"]], "neural_compressor.profiling.parser.tensorflow_parser.parser": [[420, 1, 1, "", "TensorFlowProfilingParser"]], "neural_compressor.profiling.profiler": [[421, 0, 0, "-", "factory"], [424, 0, 0, "-", "onnxrt_profiler"], [427, 0, 0, "-", "profiler"], [429, 0, 0, "-", "tensorflow_profiler"]], "neural_compressor.profiling.profiler.factory": [[421, 1, 1, "", "ProfilerFactory"]], "neural_compressor.profiling.profiler.onnxrt_profiler": [[423, 0, 0, "-", "factory"], [425, 0, 0, "-", "profiler"], [426, 0, 0, "-", "utils"]], "neural_compressor.profiling.profiler.onnxrt_profiler.factory": [[423, 1, 1, "", "ProfilerFactory"]], "neural_compressor.profiling.profiler.onnxrt_profiler.profiler": [[425, 1, 1, "", "Profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.utils": [[426, 2, 1, "", "create_onnx_config"]], "neural_compressor.profiling.profiler.profiler": [[427, 1, 1, "", "Profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler": [[428, 0, 0, "-", "factory"], [430, 0, 0, "-", "profiler"], [431, 0, 0, "-", "utils"]], "neural_compressor.profiling.profiler.tensorflow_profiler.factory": [[428, 1, 1, "", "ProfilerFactory"]], "neural_compressor.profiling.profiler.tensorflow_profiler.profiler": [[430, 1, 1, "", "Profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.utils": [[431, 2, 1, "", "create_tf_config"], [431, 2, 1, "", "delete_assign"], [431, 2, 1, "", "set_eager_execution"]], "neural_compressor.quantization": [[432, 2, 1, "", "fit"]], "neural_compressor.strategy": [[433, 0, 0, "-", "auto"], [434, 0, 0, "-", "auto_mixed_precision"], [435, 0, 0, "-", "basic"], [436, 0, 0, "-", "bayesian"], [437, 0, 0, "-", "conservative"], [438, 0, 0, "-", "exhaustive"], [439, 0, 0, "-", "hawq_v2"], [441, 0, 0, "-", "mse"], [442, 0, 0, "-", "mse_v2"], [443, 0, 0, "-", "random"], [444, 0, 0, "-", "strategy"], [446, 0, 0, "-", "utils"]], "neural_compressor.strategy.auto": [[433, 1, 1, "", "AutoTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[434, 1, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.basic": [[435, 1, 1, "", "BasicTuneStrategy"]], "neural_compressor.strategy.bayesian": [[436, 1, 1, "", "BayesianOptimization"], [436, 1, 1, "", "BayesianTuneStrategy"], [436, 1, 1, "", "TargetSpace"], [436, 2, 1, "", "acq_max"]], "neural_compressor.strategy.conservative": [[437, 1, 1, "", "ConservativeTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[438, 1, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[439, 1, 1, "", "HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.mse": [[441, 1, 1, "", "MSETuneStrategy"]], "neural_compressor.strategy.mse_v2": [[442, 1, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.strategy.random": [[443, 1, 1, "", "RandomTuneStrategy"]], "neural_compressor.strategy.strategy": [[444, 1, 1, "", "TuneStrategy"], [444, 1, 1, "", "TuneStrategyMeta"], [444, 2, 1, "", "strategy_registry"]], "neural_compressor.strategy.utils": [[445, 0, 0, "-", "constant"], [447, 0, 0, "-", "tuning_sampler"], [448, 0, 0, "-", "tuning_space"], [449, 0, 0, "-", "tuning_structs"], [450, 0, 0, "-", "utility"]], "neural_compressor.strategy.utils.tuning_sampler": [[447, 1, 1, "", "BlockFallbackTuningSampler"], [447, 1, 1, "", "FallbackTuningSampler"], [447, 1, 1, "", "LowerBitsSampler"], [447, 1, 1, "", "ModelWiseTuningSampler"], [447, 1, 1, "", "OpTypeWiseTuningSampler"], [447, 1, 1, "", "OpWiseTuningSampler"], [447, 1, 1, "", "SmoothQuantSampler"], [447, 1, 1, "", "TuningOrder"], [447, 1, 1, "", "TuningSampler"], [447, 1, 1, "", "WeightOnlyQuantSampler"]], "neural_compressor.strategy.utils.tuning_space": [[448, 1, 1, "", "TuningItem"], [448, 1, 1, "", "TuningSpace"], [448, 2, 1, "", "initial_tuning_cfg_with_quant_mode"], [448, 2, 1, "", "pattern_to_internal"], [448, 2, 1, "", "pattern_to_path"], [448, 2, 1, "", "quant_mode_from_pattern"]], "neural_compressor.strategy.utils.tuning_structs": [[449, 1, 1, "", "OpTuningConfig"]], "neural_compressor.strategy.utils.utility": [[450, 1, 1, "", "ClassRegister"], [450, 1, 1, "", "OrderedDefaultDict"], [450, 1, 1, "", "QuantOptions"], [450, 1, 1, "", "QuantType"], [450, 2, 1, "", "build_slave_faker_model"], [450, 2, 1, "", "extract_data_type"], [450, 2, 1, "", "get_adaptor_name"], [450, 2, 1, "", "preprocess_user_cfg"], [450, 2, 1, "", "reverted_data_type"]], "neural_compressor.template": [[451, 0, 0, "-", "api_doc_example"]], "neural_compressor.template.api_doc_example": [[451, 1, 1, "", "ExampleClass"], [451, 4, 1, "", "attribute1"], [451, 2, 1, "", "function1"], [451, 2, 1, "", "function2"], [451, 2, 1, "", "function3"], [451, 2, 1, "", "generator1"], [451, 5, 1, "", "module_debug_level1"]], "neural_compressor.template.api_doc_example.ExampleClass": [[451, 4, 1, "", "attr1"], [451, 4, 1, "", "attr2"], [451, 4, 1, "", "attr5"]], "neural_compressor.tensorflow": [[453, 0, 0, "-", "algorithms"], [462, 0, 0, "-", "keras"], [475, 0, 0, "-", "quantization"], [572, 0, 0, "-", "utils"]], "neural_compressor.tensorflow.algorithms": [[456, 0, 0, "-", "smoother"], [458, 0, 0, "-", "static_quant"]], "neural_compressor.tensorflow.algorithms.smoother": [[454, 0, 0, "-", "calibration"], [455, 0, 0, "-", "core"], [457, 0, 0, "-", "scaler"]], "neural_compressor.tensorflow.algorithms.smoother.calibration": [[454, 1, 1, "", "SmoothQuantCalibration"], [454, 1, 1, "", "SmoothQuantCalibrationLLM"]], "neural_compressor.tensorflow.algorithms.smoother.core": [[455, 1, 1, "", "SmoothQuant"]], "neural_compressor.tensorflow.algorithms.smoother.scaler": [[457, 1, 1, "", "SmoothQuantScaler"], [457, 1, 1, "", "SmoothQuantScalerLLM"]], "neural_compressor.tensorflow.algorithms.static_quant": [[459, 0, 0, "-", "keras"], [460, 0, 0, "-", "tensorflow"]], "neural_compressor.tensorflow.algorithms.static_quant.keras": [[459, 1, 1, "", "KerasAdaptor"], [459, 1, 1, "", "KerasConfigConverter"], [459, 1, 1, "", "KerasQuery"]], "neural_compressor.tensorflow.algorithms.static_quant.tensorflow": [[460, 1, 1, "", "TensorFlowAdaptor"], [460, 1, 1, "", "TensorFlowConfig"], [460, 1, 1, "", "TensorflowConfigConverter"], [460, 1, 1, "", "TensorflowQuery"], [460, 1, 1, "", "Tensorflow_ITEXAdaptor"]], "neural_compressor.tensorflow.keras": [[466, 0, 0, "-", "layers"], [471, 0, 0, "-", "quantization"]], "neural_compressor.tensorflow.keras.layers": [[463, 0, 0, "-", "conv2d"], [464, 0, 0, "-", "dense"], [465, 0, 0, "-", "depthwise_conv2d"], [467, 0, 0, "-", "pool2d"], [468, 0, 0, "-", "quantizer"], [469, 0, 0, "-", "separable_conv2d"]], "neural_compressor.tensorflow.keras.quantization": [[470, 0, 0, "-", "config"]], "neural_compressor.tensorflow.keras.quantization.config": [[470, 1, 1, "", "StaticQuantConfig"], [470, 2, 1, "", "get_all_registered_configs"], [470, 2, 1, "", "get_default_static_quant_config"]], "neural_compressor.tensorflow.quantization": [[472, 0, 0, "-", "algorithm_entry"], [473, 0, 0, "-", "autotune"], [474, 0, 0, "-", "config"], [476, 0, 0, "-", "quantize"], [535, 0, 0, "-", "utils"]], "neural_compressor.tensorflow.quantization.algorithm_entry": [[472, 2, 1, "", "static_quant_entry"]], "neural_compressor.tensorflow.quantization.autotune": [[473, 2, 1, "", "autotune"]], "neural_compressor.tensorflow.quantization.config": [[474, 1, 1, "", "SmoothQuantConfig"], [474, 1, 1, "", "StaticQuantConfig"], [474, 2, 1, "", "get_default_sq_config"], [474, 2, 1, "", "get_default_static_quant_config"]], "neural_compressor.tensorflow.quantization.quantize": [[476, 2, 1, "", "quantize_model"], [476, 2, 1, "", "quantize_model_with_single_config"]], "neural_compressor.tensorflow.quantization.utils": [[477, 0, 0, "-", "graph_converter"], [478, 0, 0, "-", "graph_converter_without_calib"], [516, 0, 0, "-", "graph_rewriter"], [534, 0, 0, "-", "graph_util"], [536, 0, 0, "-", "quantize_graph"], [563, 0, 0, "-", "quantize_graph_common"], [566, 0, 0, "-", "transform_graph"], [569, 0, 0, "-", "utility"]], "neural_compressor.tensorflow.quantization.utils.graph_converter": [[477, 1, 1, "", "GraphConverter"]], "neural_compressor.tensorflow.quantization.utils.graph_converter_without_calib": [[478, 1, 1, "", "GraphConverterWithoutCalib"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter": [[481, 0, 0, "-", "bf16"], [505, 0, 0, "-", "generic"], [515, 0, 0, "-", "graph_base"], [524, 0, 0, "-", "int8"], [530, 0, 0, "-", "qdq"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16": [[479, 0, 0, "-", "bf16_convert"], [480, 0, 0, "-", "dequantize_cast_optimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.bf16_convert": [[479, 1, 1, "", "BF16Convert"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.dequantize_cast_optimizer": [[480, 1, 1, "", "DequantizeCastOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic": [[482, 0, 0, "-", "convert_add_to_biasadd"], [483, 0, 0, "-", "convert_layout"], [484, 0, 0, "-", "convert_leakyrelu"], [485, 0, 0, "-", "convert_nan_to_random"], [486, 0, 0, "-", "convert_placeholder_to_const"], [487, 0, 0, "-", "dilated_contraction"], [488, 0, 0, "-", "dummy_biasadd"], [489, 0, 0, "-", "expanddims_optimizer"], [490, 0, 0, "-", "fetch_weight_from_reshape"], [491, 0, 0, "-", "fold_batch_norm"], [492, 0, 0, "-", "fold_constant"], [493, 0, 0, "-", "fuse_biasadd_add"], [494, 0, 0, "-", "fuse_column_wise_mul"], [495, 0, 0, "-", "fuse_conv_with_math"], [496, 0, 0, "-", "fuse_decomposed_bn"], [497, 0, 0, "-", "fuse_decomposed_in"], [498, 0, 0, "-", "fuse_gelu"], [499, 0, 0, "-", "fuse_layer_norm"], [500, 0, 0, "-", "fuse_pad_with_conv"], [501, 0, 0, "-", "fuse_pad_with_fp32_conv"], [502, 0, 0, "-", "fuse_reshape_transpose"], [503, 0, 0, "-", "graph_cse_optimizer"], [504, 0, 0, "-", "grappler_pass"], [506, 0, 0, "-", "insert_print_node"], [507, 0, 0, "-", "move_squeeze_after_relu"], [508, 0, 0, "-", "pre_optimize"], [509, 0, 0, "-", "remove_training_nodes"], [510, 0, 0, "-", "rename_batch_norm"], [511, 0, 0, "-", "split_shared_input"], [512, 0, 0, "-", "strip_equivalent_nodes"], [513, 0, 0, "-", "strip_unused_nodes"], [514, 0, 0, "-", "switch_optimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd": [[482, 1, 1, "", "ConvertAddToBiasAddOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout": [[483, 1, 1, "", "ConvertLayoutOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu": [[484, 1, 1, "", "ConvertLeakyReluOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random": [[485, 1, 1, "", "ConvertNanToRandom"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const": [[486, 1, 1, "", "ConvertPlaceholderToConst"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction": [[487, 1, 1, "", "DilatedContraction"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd": [[488, 1, 1, "", "InjectDummyBiasAddOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer": [[489, 1, 1, "", "ExpandDimsOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape": [[490, 1, 1, "", "FetchWeightFromReshapeOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm": [[491, 1, 1, "", "FoldBatchNormNodesOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant": [[492, 1, 1, "", "GraphFoldConstantOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add": [[493, 1, 1, "", "FuseBiasAddAndAddOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul": [[494, 1, 1, "", "FuseColumnWiseMulOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math": [[495, 1, 1, "", "FuseConvWithMathOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn": [[496, 1, 1, "", "FuseDecomposedBNOptimizer"], [496, 2, 1, "", "bypass_reshape"], [496, 2, 1, "", "get_const_dim_count"], [496, 2, 1, "", "node_from_map"], [496, 2, 1, "", "node_name_from_input"], [496, 2, 1, "", "valid_reshape_inputs"], [496, 2, 1, "", "values_from_const"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in": [[497, 1, 1, "", "FuseDecomposedINOptimizer"], [497, 2, 1, "", "bypass_reshape"], [497, 2, 1, "", "get_const_dim_count"], [497, 2, 1, "", "node_from_map"], [497, 2, 1, "", "node_name_from_input"], [497, 2, 1, "", "valid_reshape_inputs"], [497, 2, 1, "", "values_from_const"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu": [[498, 1, 1, "", "FuseGeluOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm": [[499, 1, 1, "", "FuseLayerNormOptimizer"], [499, 2, 1, "", "node_from_map"], [499, 2, 1, "", "node_name_from_input"], [499, 2, 1, "", "values_from_const"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv": [[500, 1, 1, "", "FusePadWithConv2DOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[501, 1, 1, "", "FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose": [[502, 1, 1, "", "FuseTransposeReshapeOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer": [[503, 1, 1, "", "GraphCseOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass": [[504, 1, 1, "", "GrapplerOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node": [[506, 1, 1, "", "InsertPrintMinMaxNode"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu": [[507, 1, 1, "", "MoveSqueezeAfterReluOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize": [[508, 1, 1, "", "PreOptimization"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes": [[509, 1, 1, "", "RemoveTrainingNodesOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm": [[510, 1, 1, "", "RenameBatchNormOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input": [[511, 1, 1, "", "SplitSharedInputOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes": [[512, 1, 1, "", "StripEquivalentNodesOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes": [[513, 1, 1, "", "StripUnusedNodesOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer": [[514, 1, 1, "", "SwitchOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base": [[515, 1, 1, "", "GraphRewriterBase"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8": [[517, 0, 0, "-", "freeze_fake_quant"], [518, 0, 0, "-", "freeze_value"], [519, 0, 0, "-", "freeze_value_without_calib"], [520, 0, 0, "-", "fuse_conv_redundant_dequantize"], [521, 0, 0, "-", "fuse_conv_requantize"], [522, 0, 0, "-", "fuse_matmul_redundant_dequantize"], [523, 0, 0, "-", "fuse_matmul_requantize"], [525, 0, 0, "-", "meta_op_optimizer"], [526, 0, 0, "-", "post_hostconst_converter"], [527, 0, 0, "-", "post_quantized_op_cse"], [528, 0, 0, "-", "rnn_convert"], [529, 0, 0, "-", "scale_propagation"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_fake_quant": [[517, 1, 1, "", "FreezeFakeQuantOpOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value": [[518, 1, 1, "", "FreezeValueTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value_without_calib": [[519, 1, 1, "", "FreezeValueWithoutCalibTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[520, 1, 1, "", "FuseConvRedundantDequantizeTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_requantize": [[521, 1, 1, "", "FuseConvRequantizeTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[522, 1, 1, "", "FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize": [[523, 1, 1, "", "FuseMatMulRequantizeDequantizeNewAPITransformer"], [523, 1, 1, "", "FuseMatMulRequantizeDequantizeTransformer"], [523, 1, 1, "", "FuseMatMulRequantizeNewAPITransformer"], [523, 1, 1, "", "FuseMatMulRequantizeTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.meta_op_optimizer": [[525, 1, 1, "", "MetaInfoChangingMemOpOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_hostconst_converter": [[526, 1, 1, "", "PostHostConstConverter"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_quantized_op_cse": [[527, 1, 1, "", "PostCseOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.rnn_convert": [[528, 1, 1, "", "QuantizedRNNConverter"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.scale_propagation": [[529, 1, 1, "", "ScaleProPagationTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq": [[531, 0, 0, "-", "insert_qdq_pattern"], [532, 0, 0, "-", "merge_duplicated_qdq"], [533, 0, 0, "-", "share_qdq_y_pattern"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.insert_qdq_pattern": [[531, 1, 1, "", "GenerateGraphWithQDQPattern"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.merge_duplicated_qdq": [[532, 1, 1, "", "MergeDuplicatedQDQOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.share_qdq_y_pattern": [[533, 1, 1, "", "ShareQDQForItexYPatternOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_util": [[534, 1, 1, "", "GraphAnalyzer"], [534, 1, 1, "", "GraphRewriterHelper"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph": [[538, 0, 0, "-", "qat"], [554, 0, 0, "-", "qdq"], [556, 0, 0, "-", "quantize_graph_base"], [557, 0, 0, "-", "quantize_graph_bn"], [558, 0, 0, "-", "quantize_graph_concatv2"], [559, 0, 0, "-", "quantize_graph_conv"], [560, 0, 0, "-", "quantize_graph_for_intel_cpu"], [561, 0, 0, "-", "quantize_graph_matmul"], [562, 0, 0, "-", "quantize_graph_pooling"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat": [[537, 0, 0, "-", "fake_quantize"], [539, 0, 0, "-", "quantize_config"], [540, 0, 0, "-", "quantize_helper"], [541, 0, 0, "-", "quantize_layers"], [546, 0, 0, "-", "quantize_wrapper"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.fake_quantize": [[537, 1, 1, "", "FakeQuantize"], [537, 1, 1, "", "FakeQuantizeBase"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_config": [[539, 1, 1, "", "QuantizeConfig"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_helper": [[540, 2, 1, "", "init_quantize_config"], [540, 2, 1, "", "qat_clone_function"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers": [[542, 0, 0, "-", "optimize_layer"], [543, 0, 0, "-", "quantize_layer_add"], [544, 0, 0, "-", "quantize_layer_base"], [545, 0, 0, "-", "quantize_layer_bn"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.optimize_layer": [[542, 2, 1, "", "config_quantizable_layers"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[543, 1, 1, "", "QuantizeLayerAdd"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[544, 1, 1, "", "QuantizeLayerBase"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[545, 1, 1, "", "QuantizeLayerBatchNormalization"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_wrapper": [[546, 1, 1, "", "QuantizeWrapper"], [546, 1, 1, "", "QuantizeWrapperBase"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq": [[547, 0, 0, "-", "fuse_qdq_bn"], [548, 0, 0, "-", "fuse_qdq_concatv2"], [549, 0, 0, "-", "fuse_qdq_conv"], [550, 0, 0, "-", "fuse_qdq_deconv"], [551, 0, 0, "-", "fuse_qdq_in"], [552, 0, 0, "-", "fuse_qdq_matmul"], [553, 0, 0, "-", "fuse_qdq_pooling"], [555, 0, 0, "-", "optimize_qdq"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_bn": [[547, 1, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_concatv2": [[548, 1, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_conv": [[549, 1, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_deconv": [[550, 1, 1, "", "FuseNodeStartWithDeconv2d"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_in": [[551, 1, 1, "", "FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_matmul": [[552, 1, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_pooling": [[553, 1, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.optimize_qdq": [[555, 1, 1, "", "OptimizeQDQGraph"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base": [[556, 1, 1, "", "QuantizeGraphBase"], [556, 1, 1, "", "QuantizeNodeBase"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_bn": [[557, 1, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_concatv2": [[558, 1, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_conv": [[559, 1, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_for_intel_cpu": [[560, 1, 1, "", "QuantizeGraphForIntel"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_matmul": [[561, 1, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_pooling": [[562, 1, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph_common": [[563, 1, 1, "", "QuantizeGraphHelper"]], "neural_compressor.tensorflow.quantization.utils.transform_graph": [[564, 0, 0, "-", "bias_correction"], [565, 0, 0, "-", "graph_transform_base"], [567, 0, 0, "-", "insert_logging"], [568, 0, 0, "-", "rerange_quantized_concat"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.bias_correction": [[564, 1, 1, "", "BiasCorrection"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.graph_transform_base": [[565, 1, 1, "", "GraphTransformBase"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.insert_logging": [[567, 1, 1, "", "InsertLogging"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.rerange_quantized_concat": [[568, 1, 1, "", "RerangeQuantizedConcat"]], "neural_compressor.tensorflow.quantization.utils.utility": [[569, 2, 1, "", "apply_inlining"], [569, 2, 1, "", "collate_tf_preds"], [569, 2, 1, "", "construct_function_from_graph_def"], [569, 2, 1, "", "disable_random"], [569, 2, 1, "", "fix_ref_type_of_graph_def"], [569, 2, 1, "", "generate_feed_dict"], [569, 2, 1, "", "get_graph_def"], [569, 2, 1, "", "get_input_output_node_names"], [569, 2, 1, "", "get_model_input_shape"], [569, 2, 1, "", "get_tensor_by_name"], [569, 2, 1, "", "get_tensor_val_from_graph_node"], [569, 2, 1, "", "get_weight_from_input_tensor"], [569, 2, 1, "", "int8_node_name_reverse"], [569, 2, 1, "", "is_ckpt_format"], [569, 2, 1, "", "is_saved_model_format"], [569, 2, 1, "", "iterator_sess_run"], [569, 2, 1, "", "parse_saved_model"], [569, 2, 1, "", "read_graph"], [569, 2, 1, "", "reconstruct_saved_model"], [569, 2, 1, "", "strip_equivalent_nodes"], [569, 2, 1, "", "strip_unused_nodes"], [569, 2, 1, "", "tf_diagnosis_helper"], [569, 2, 1, "", "write_graph"]], "neural_compressor.tensorflow.utils": [[570, 0, 0, "-", "constants"], [571, 0, 0, "-", "data"], [573, 0, 0, "-", "model"], [574, 0, 0, "-", "model_wrappers"], [575, 0, 0, "-", "nets_factory"], [576, 0, 0, "-", "utility"]], "neural_compressor.tensorflow.utils.data": [[571, 1, 1, "", "BaseDataLoader"], [571, 1, 1, "", "DummyDataset"], [571, 1, 1, "", "DummyDatasetV2"]], "neural_compressor.tensorflow.utils.model": [[573, 1, 1, "", "Model"]], "neural_compressor.tensorflow.utils.model_wrappers": [[574, 1, 1, "", "BaseModel"], [574, 1, 1, "", "KerasModel"], [574, 1, 1, "", "TensorflowBaseModel"], [574, 1, 1, "", "TensorflowCheckpointModel"], [574, 1, 1, "", "TensorflowLLMModel"], [574, 1, 1, "", "TensorflowModel"], [574, 1, 1, "", "TensorflowQATModel"], [574, 1, 1, "", "TensorflowSavedModelModel"], [574, 2, 1, "", "checkpoint_session"], [574, 2, 1, "", "estimator_session"], [574, 2, 1, "", "frozen_pb_session"], [574, 2, 1, "", "get_model_type"], [574, 2, 1, "", "graph_def_session"], [574, 2, 1, "", "graph_session"], [574, 2, 1, "", "keras_session"], [574, 2, 1, "", "load_saved_model"], [574, 2, 1, "", "saved_model_session"], [574, 2, 1, "", "slim_session"], [574, 2, 1, "", "validate_and_inference_input_output"], [574, 2, 1, "", "validate_graph_node"]], "neural_compressor.tensorflow.utils.nets_factory": [[575, 1, 1, "", "TFSlimNetsFactory"]], "neural_compressor.tensorflow.utils.utility": [[576, 1, 1, "", "CaptureOutputToFile"], [576, 1, 1, "", "CpuInfo"], [576, 2, 1, "", "Dequantize"], [576, 1, 1, "", "LazyImport"], [576, 1, 1, "", "Statistics"], [576, 2, 1, "", "combine_histogram"], [576, 2, 1, "", "deep_get"], [576, 2, 1, "", "dequantize_weight"], [576, 2, 1, "", "disable_random"], [576, 2, 1, "", "dump_data_to_local"], [576, 2, 1, "", "dump_elapsed_time"], [576, 2, 1, "", "get_all_fp32_data"], [576, 2, 1, "", "get_tensor_histogram"], [576, 2, 1, "", "itex_installed"], [576, 2, 1, "", "load_data_from_pkl"], [576, 2, 1, "", "register_algo"], [576, 2, 1, "", "singleton"], [576, 2, 1, "", "version1_eq_version2"], [576, 2, 1, "", "version1_gt_version2"], [576, 2, 1, "", "version1_gte_version2"], [576, 2, 1, "", "version1_lt_version2"], [576, 2, 1, "", "version1_lte_version2"]], "neural_compressor.torch": [[581, 0, 0, "-", "algorithms"], [608, 0, 0, "-", "amp"], [613, 0, 0, "-", "quantization"], [619, 0, 0, "-", "utils"]], "neural_compressor.torch.algorithms": [[578, 0, 0, "-", "habana_fp8"], [582, 0, 0, "-", "layer_wise"], [586, 0, 0, "-", "static_quant"], [600, 0, 0, "-", "weight_only"]], "neural_compressor.torch.algorithms.habana_fp8": [[577, 0, 0, "-", "fp8_quant"], [579, 0, 0, "-", "modules"], [580, 0, 0, "-", "observer"]], "neural_compressor.torch.algorithms.layer_wise": [[583, 0, 0, "-", "load"], [584, 0, 0, "-", "modified_pickle"], [585, 0, 0, "-", "utils"]], "neural_compressor.torch.algorithms.layer_wise.load": [[583, 2, 1, "", "load"]], "neural_compressor.torch.algorithms.layer_wise.modified_pickle": [[584, 3, 1, "", "PickleError"], [584, 3, 1, "", "PicklingError"], [584, 3, 1, "", "UnpicklingError"]], "neural_compressor.torch.algorithms.layer_wise.utils": [[585, 2, 1, "", "dowload_hf_model"], [585, 2, 1, "", "get_children"], [585, 2, 1, "", "get_module"], [585, 2, 1, "", "get_named_children"], [585, 2, 1, "", "get_super_module_by_name"], [585, 2, 1, "", "load_empty_model"], [585, 2, 1, "", "load_layer_wise_quantized_model"], [585, 2, 1, "", "load_tensor"], [585, 2, 1, "", "load_tensor_from_shard"], [585, 2, 1, "", "update_module"]], "neural_compressor.torch.algorithms.static_quant": [[587, 0, 0, "-", "static_quant"], [588, 0, 0, "-", "utility"]], "neural_compressor.torch.algorithms.static_quant.static_quant": [[587, 2, 1, "", "static_quantize"]], "neural_compressor.torch.algorithms.static_quant.utility": [[588, 1, 1, "", "Statistics"], [588, 1, 1, "", "TransformerBasedModelBlockPatternDetector"], [588, 2, 1, "", "dump_model_op_stats"], [588, 2, 1, "", "get_depth"], [588, 2, 1, "", "get_dict_at_depth"], [588, 2, 1, "", "get_element_under_depth"], [588, 2, 1, "", "get_quantizable_ops_from_cfgs"], [588, 2, 1, "", "get_quantizable_ops_recursively"], [588, 2, 1, "", "paser_cfgs"], [588, 2, 1, "", "simple_inference"]], "neural_compressor.torch.algorithms.weight_only": [[589, 0, 0, "-", "awq"], [590, 0, 0, "-", "gptq"], [594, 0, 0, "-", "hqq"], [601, 0, 0, "-", "modules"], [602, 0, 0, "-", "rtn"], [603, 0, 0, "-", "teq"], [604, 0, 0, "-", "utility"]], "neural_compressor.torch.algorithms.weight_only.awq": [[589, 2, 1, "", "awq_quantize"]], "neural_compressor.torch.algorithms.weight_only.gptq": [[590, 1, 1, "", "GPTQ"], [590, 1, 1, "", "GPTQuantizer"], [590, 2, 1, "", "find_layers"], [590, 2, 1, "", "find_layers_name"], [590, 2, 1, "", "gptq_quantize"], [590, 2, 1, "", "is_leaf"], [590, 2, 1, "", "log_quantizable_layers_per_transformer"], [590, 2, 1, "", "quantize"], [590, 2, 1, "", "trace_gptq_target_blocks"]], "neural_compressor.torch.algorithms.weight_only.hqq": [[591, 0, 0, "-", "bitpack"], [592, 0, 0, "-", "config"], [593, 0, 0, "-", "core"], [595, 0, 0, "-", "optimizer"], [596, 0, 0, "-", "qtensor"], [597, 0, 0, "-", "quant_api"], [598, 0, 0, "-", "quantizer"], [599, 0, 0, "-", "utility"]], "neural_compressor.torch.algorithms.weight_only.hqq.config": [[592, 1, 1, "", "HQQModuleConfig"]], "neural_compressor.torch.algorithms.weight_only.hqq.utility": [[599, 2, 1, "", "dump_elapsed_time"]], "neural_compressor.torch.algorithms.weight_only.modules": [[601, 1, 1, "", "FakeAffineTensorQuantFunction"], [601, 1, 1, "", "MulLinear"], [601, 1, 1, "", "TEQLinearFakeQuant"]], "neural_compressor.torch.algorithms.weight_only.rtn": [[602, 2, 1, "", "rtn_quantize"]], "neural_compressor.torch.algorithms.weight_only.teq": [[603, 1, 1, "", "TEQuantizer"], [603, 2, 1, "", "teq_quantize"]], "neural_compressor.torch.algorithms.weight_only.utility": [[604, 2, 1, "", "calibration"], [604, 2, 1, "", "fetch_module"], [604, 2, 1, "", "get_absorb_layers"], [604, 2, 1, "", "get_block_prefix"], [604, 2, 1, "", "get_example_input"], [604, 2, 1, "", "get_hidden_states"], [604, 2, 1, "", "get_module"], [604, 2, 1, "", "get_module_input_output"], [604, 2, 1, "", "qdq_weight_actor"], [604, 2, 1, "", "qdq_weight_asym"], [604, 2, 1, "", "qdq_weight_sym"], [604, 2, 1, "", "quant_tensor"], [604, 2, 1, "", "quant_weight_w_scale"], [604, 2, 1, "", "quantize_4bit"], [604, 2, 1, "", "search_clip"], [604, 2, 1, "", "set_module"]], "neural_compressor.torch.amp": [[605, 0, 0, "-", "autocast"], [607, 0, 0, "-", "fp8"]], "neural_compressor.torch.amp.autocast": [[605, 1, 1, "", "autocast"]], "neural_compressor.torch.amp.fp8": [[606, 0, 0, "-", "functions"]], "neural_compressor.torch.quantization": [[610, 0, 0, "-", "algorithm_entry"], [611, 0, 0, "-", "autotune"], [612, 0, 0, "-", "config"], [614, 0, 0, "-", "modules"], [615, 0, 0, "-", "quantize"]], "neural_compressor.torch.quantization.algorithm_entry": [[610, 2, 1, "", "rtn_entry"]], "neural_compressor.torch.quantization.autotune": [[611, 2, 1, "", "autotune"]], "neural_compressor.torch.quantization.config": [[612, 1, 1, "", "GPTQConfig"], [612, 1, 1, "", "RTNConfig"], [612, 2, 1, "", "get_default_gptq_config"], [612, 2, 1, "", "get_default_hqq_config"], [612, 2, 1, "", "get_default_rtn_config"]], "neural_compressor.torch.quantization.quantize": [[615, 2, 1, "", "quantize"]], "neural_compressor.torch.utils": [[616, 0, 0, "-", "auto_accelerator"], [617, 0, 0, "-", "constants"], [618, 0, 0, "-", "environ"], [620, 0, 0, "-", "utility"]], "neural_compressor.torch.utils.auto_accelerator": [[616, 1, 1, "", "Auto_Accelerator"], [616, 1, 1, "", "CPU_Accelerator"], [616, 1, 1, "", "CUDA_Accelerator"], [616, 2, 1, "", "register_accelerator"]], "neural_compressor.torch.utils.utility": [[620, 2, 1, "", "fetch_module"], [620, 2, 1, "", "register_algo"], [620, 2, 1, "", "set_module"]], "neural_compressor.training": [[621, 1, 1, "", "CallBacks"], [621, 1, 1, "", "CompressionManager"], [621, 2, 1, "", "fit"], [621, 2, 1, "", "prepare_compression"]], "neural_compressor.utils": [[622, 0, 0, "-", "collect_layer_histogram"], [623, 0, 0, "-", "constant"], [624, 0, 0, "-", "create_obj_from_config"], [626, 0, 0, "-", "kl_divergence"], [627, 0, 0, "-", "load_huggingface"], [628, 0, 0, "-", "logger"], [629, 0, 0, "-", "neural_insights_utils"], [630, 0, 0, "-", "options"], [631, 0, 0, "-", "pytorch"], [632, 0, 0, "-", "utility"], [633, 0, 0, "-", "weights_details"]], "neural_compressor.utils.collect_layer_histogram": [[622, 1, 1, "", "LayerHistogramCollector"]], "neural_compressor.utils.create_obj_from_config": [[624, 2, 1, "", "create_dataloader"], [624, 2, 1, "", "create_dataset"], [624, 2, 1, "", "create_eval_func"], [624, 2, 1, "", "create_train_func"], [624, 2, 1, "", "get_algorithm"], [624, 2, 1, "", "get_func_from_config"], [624, 2, 1, "", "get_metrics"], [624, 2, 1, "", "get_postprocess"], [624, 2, 1, "", "get_preprocess"]], "neural_compressor.utils.kl_divergence": [[626, 1, 1, "", "KL_Divergence"]], "neural_compressor.utils.load_huggingface": [[627, 1, 1, "", "OptimizedModel"], [627, 2, 1, "", "export_compressed_model"], [627, 2, 1, "", "save_for_huggingface_upstream"]], "neural_compressor.utils.logger": [[628, 1, 1, "", "Logger"], [628, 2, 1, "", "debug"], [628, 2, 1, "", "error"], [628, 2, 1, "", "fatal"], [628, 2, 1, "", "info"], [628, 2, 1, "", "log"], [628, 2, 1, "", "warn"], [628, 2, 1, "", "warning"]], "neural_compressor.utils.neural_insights_utils": [[629, 2, 1, "", "get_model_path"], [629, 2, 1, "", "register_neural_insights_workload"], [629, 2, 1, "", "update_neural_insights_workload"], [629, 2, 1, "", "update_neural_insights_workload_accuracy_data"]], "neural_compressor.utils.options": [[630, 1, 1, "", "onnxrt"]], "neural_compressor.utils.pytorch": [[631, 2, 1, "", "is_int8_model"], [631, 2, 1, "", "load"], [631, 2, 1, "", "load_weight_only"], [631, 2, 1, "", "recover_model_from_json"]], "neural_compressor.utils.utility": [[632, 1, 1, "", "CaptureOutputToFile"], [632, 1, 1, "", "CpuInfo"], [632, 2, 1, "", "Dequantize"], [632, 1, 1, "", "DotDict"], [632, 1, 1, "", "GLOBAL_STATE"], [632, 1, 1, "", "LazyImport"], [632, 1, 1, "", "MODE"], [632, 1, 1, "", "OpEntry"], [632, 1, 1, "", "Statistics"], [632, 2, 1, "", "alias_param"], [632, 2, 1, "", "calculate_mse"], [632, 2, 1, "", "check_key_exist"], [632, 2, 1, "", "combine_histogram"], [632, 2, 1, "", "compare_objects"], [632, 2, 1, "", "compute_sparsity"], [632, 2, 1, "", "dequantize_weight"], [632, 2, 1, "", "dump_class_attrs"], [632, 2, 1, "", "dump_data_to_local"], [632, 2, 1, "", "dump_elapsed_time"], [632, 2, 1, "", "dump_table"], [632, 2, 1, "", "dump_table_to_csv"], [632, 2, 1, "", "equal_dicts"], [632, 2, 1, "", "fault_tolerant_file"], [632, 2, 1, "", "get_all_fp32_data"], [632, 2, 1, "", "get_number_of_sockets"], [632, 2, 1, "", "get_op_list"], [632, 2, 1, "", "get_size"], [632, 2, 1, "", "get_tensor_histogram"], [632, 2, 1, "", "get_tensors_info"], [632, 2, 1, "", "get_tuning_history"], [632, 2, 1, "", "get_weights_details"], [632, 2, 1, "", "load_data_from_pkl"], [632, 2, 1, "", "mse_metric_gap"], [632, 2, 1, "", "print_op_list"], [632, 2, 1, "", "print_table"], [632, 2, 1, "", "recover"], [632, 2, 1, "", "set_random_seed"], [632, 2, 1, "", "set_resume_from"], [632, 2, 1, "", "set_tensorboard"], [632, 2, 1, "", "set_workspace"], [632, 2, 1, "", "show_memory_info"], [632, 2, 1, "", "singleton"], [632, 2, 1, "", "str2array"], [632, 2, 1, "", "time_limit"], [632, 2, 1, "", "version1_eq_version2"], [632, 2, 1, "", "version1_gt_version2"], [632, 2, 1, "", "version1_gte_version2"], [632, 2, 1, "", "version1_lt_version2"], [632, 2, 1, "", "version1_lte_version2"]], "neural_compressor.utils.weights_details": [[633, 1, 1, "", "WeightsDetails"], [633, 1, 1, "", "WeightsStatistics"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:function", "3": "py:exception", "4": "py:attribute", "5": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "function", "Python function"], "3": ["py", "exception", "Python exception"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "data", "Python data"]}, "titleterms": {"block_mask": [0, 216], "neural_compressor": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634], "adaptor": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 642, 643, 645], "modul": [1, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 113, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 150, 151, 154, 155, 156, 157, 158, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 187, 190, 191, 192, 193, 195, 196, 199, 200, 202, 203, 205, 207, 208, 209, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 235, 236, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 263, 264, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 282, 283, 284, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 306, 308, 309, 310, 312, 313, 314, 315, 317, 318, 320, 321, 322, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 336, 337, 338, 339, 342, 343, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 365, 366, 367, 368, 370, 371, 373, 374, 375, 377, 378, 379, 381, 382, 383, 384, 385, 386, 387, 388, 390, 392, 393, 395, 396, 398, 399, 401, 402, 403, 404, 408, 409, 411, 413, 415, 416, 417, 418, 420, 421, 423, 425, 426, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 447, 448, 449, 450, 451, 454, 455, 457, 459, 460, 470, 472, 473, 474, 476, 477, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 525, 526, 527, 528, 529, 531, 532, 533, 534, 537, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 569, 571, 573, 574, 575, 576, 579, 583, 584, 585, 587, 588, 589, 590, 591, 592, 593, 596, 597, 599, 601, 602, 603, 604, 605, 610, 611, 612, 614, 615, 616, 620, 621, 622, 624, 626, 627, 628, 629, 630, 631, 632, 633], "content": [1, 2, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 113, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 150, 151, 154, 155, 156, 157, 158, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 190, 191, 192, 193, 195, 196, 199, 200, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 365, 366, 367, 368, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 409, 411, 413, 415, 416, 417, 418, 420, 421, 423, 425, 426, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 447, 448, 449, 450, 451, 454, 455, 457, 459, 460, 470, 472, 473, 474, 476, 477, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 525, 526, 527, 528, 529, 531, 532, 533, 534, 537, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 569, 571, 573, 574, 575, 576, 583, 584, 585, 587, 588, 589, 590, 591, 592, 593, 596, 597, 599, 601, 602, 603, 604, 605, 610, 611, 612, 615, 616, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 641, 710], "class": [1, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 113, 115, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 150, 154, 155, 156, 157, 158, 162, 166, 167, 169, 175, 178, 179, 180, 181, 182, 184, 185, 186, 187, 190, 192, 193, 195, 199, 200, 202, 207, 208, 209, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 231, 232, 233, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 282, 283, 284, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 315, 316, 317, 320, 323, 324, 325, 326, 327, 328, 330, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 365, 366, 367, 368, 370, 373, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 392, 393, 394, 400, 403, 404, 405, 407, 408, 411, 413, 415, 416, 417, 418, 420, 421, 423, 425, 427, 428, 430, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 447, 448, 449, 450, 451, 454, 455, 457, 459, 460, 470, 474, 477, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 525, 526, 527, 528, 529, 531, 532, 533, 534, 537, 539, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 571, 573, 574, 575, 576, 588, 590, 591, 592, 593, 596, 601, 603, 604, 605, 612, 616, 621, 622, 625, 626, 627, 628, 630, 632, 633, 642, 710], "function": [1, 13, 16, 34, 42, 43, 44, 45, 67, 68, 70, 104, 105, 116, 118, 148, 150, 151, 154, 156, 157, 158, 163, 164, 165, 168, 170, 176, 177, 178, 180, 183, 184, 185, 186, 191, 193, 195, 196, 199, 200, 202, 203, 204, 205, 207, 209, 210, 214, 217, 223, 224, 225, 226, 227, 229, 230, 233, 242, 243, 251, 253, 257, 260, 261, 262, 265, 267, 268, 269, 270, 272, 274, 275, 277, 286, 294, 296, 300, 303, 304, 305, 307, 308, 309, 312, 313, 314, 317, 318, 320, 321, 322, 323, 324, 331, 338, 342, 347, 348, 349, 351, 356, 362, 366, 368, 370, 371, 373, 374, 375, 376, 377, 378, 382, 386, 388, 389, 390, 391, 395, 396, 398, 399, 400, 401, 402, 404, 405, 409, 426, 431, 432, 436, 444, 448, 450, 451, 470, 472, 473, 474, 476, 496, 497, 499, 540, 542, 569, 574, 576, 583, 585, 587, 588, 589, 590, 597, 599, 602, 603, 604, 606, 610, 611, 612, 615, 616, 620, 621, 624, 625, 627, 628, 629, 631, 632, 668], "subpackag": [2, 17, 87, 111, 112, 114, 159, 201, 204, 237, 262, 280, 305, 316, 340, 358, 369, 440, 516, 535, 536, 538, 581], "submodul": [2, 12, 17, 29, 52, 76, 87, 95, 101, 106, 111, 112, 114, 117, 130, 145, 152, 159, 160, 180, 189, 194, 197, 201, 204, 206, 210, 217, 228, 234, 238, 245, 257, 261, 265, 272, 281, 288, 300, 304, 307, 311, 316, 323, 329, 335, 341, 345, 358, 364, 369, 376, 380, 394, 407, 412, 414, 419, 422, 424, 429, 440, 446, 452, 456, 458, 481, 505, 516, 524, 530, 535, 536, 538, 541, 554, 566, 572, 582, 594, 600, 613, 625], "packag": [2, 29, 180, 186, 204, 210, 217, 245, 257, 261, 262, 265, 272, 288, 300, 304, 305, 307, 316, 323, 335, 340, 341, 358, 376, 380, 389, 391, 394, 400, 405, 407, 440, 625, 693, 695, 697, 698], "kera": [3, 459, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471], "keras_util": [4, 5, 6, 7, 8, 9, 10], "conv2d": [4, 463], "dens": [5, 464], "depthwise_conv2d": [6, 465], "pool2d": [8, 467], "quantiz": [9, 41, 162, 352, 401, 402, 403, 404, 405, 406, 432, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 598, 610, 611, 612, 613, 614, 615, 638, 641, 643, 644, 656, 660, 665, 667, 670, 673, 676, 678, 680, 681, 689, 700, 702, 703, 704, 705, 713, 714, 715, 721, 722, 723, 724, 725, 728, 734], "separable_conv2d": [10, 469], "mxnet": [11, 663, 679, 722, 730], "mxnet_util": [12, 13], "util": [13, 43, 148, 164, 170, 176, 188, 189, 190, 191, 196, 227, 230, 363, 364, 365, 366, 367, 368, 399, 407, 408, 409, 426, 431, 445, 446, 447, 448, 449, 450, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 585, 588, 599, 604, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 647], "onnxrt": [14, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 663, 679, 730], "ox_util": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44], "calibr": [15, 16, 172, 392, 403, 454, 643, 660], "oper": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 643, 644], "activ": [18, 703], "argmax": 19, "attent": 20, "binary_op": 21, "concat": 22, "conv": 23, "direct_q8": 24, "embed_layernorm": 25, "gather": 26, "gavgpool": 27, "gemm": 28, "lstm": 30, "matmul": [31, 728], "maxpool": 32, "norm": 33, "op": [34, 670], "pad": 35, "pool": 36, "reduc": 37, "resiz": 38, "split": [39, 706], "unary_op": 40, "smooth_quant": [42, 175, 181], "weight_onli": [44, 177, 395, 396, 397, 398, 399, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604], "pytorch": [45, 631, 663, 668, 670, 679, 704, 722, 723, 724, 729, 730, 734], "queri": [46, 642, 708, 713, 714, 715], "tensorflow": [47, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 663, 668, 670, 679, 722, 724, 729, 730, 734], "tf_util": [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148], "graph_convert": [48, 477], "graph_converter_without_calib": [49, 478], "graph_rewrit": [50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533], "bf16": [50, 51, 52, 479, 480, 481, 681], "bf16_convert": [50, 156, 479], "dequantize_cast_optim": [51, 480], "gener": [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 643], "convert_add_to_biasadd": [53, 482], "convert_layout": [54, 483], "convert_leakyrelu": [55, 484], "convert_nan_to_random": [56, 485], "convert_placeholder_to_const": [57, 486], "dilated_contract": [58, 487], "dummy_biasadd": [59, 488], "expanddims_optim": [60, 489], "fetch_weight_from_reshap": [61, 490], "fold_batch_norm": [62, 491], "fold_const": [63, 492], "fuse_biasadd_add": [64, 493], "fuse_column_wise_mul": [65, 494], "fuse_conv_with_math": [66, 495], "fuse_decomposed_bn": [67, 496], "fuse_decomposed_in": [68, 497], "fuse_gelu": [69, 498], "fuse_layer_norm": [70, 499], "fuse_pad_with_conv": [71, 500], "fuse_pad_with_fp32_conv": [72, 501], "fuse_reshape_transpos": [73, 502], "graph_cse_optim": [74, 503], "grappler_pass": [75, 504], "insert_print_nod": [77, 506], "move_squeeze_after_relu": [78, 507], "pre_optim": [79, 508], "remove_training_nod": [80, 509], "rename_batch_norm": [81, 510], "split_shared_input": [82, 511], "strip_equivalent_nod": [83, 512], "strip_unused_nod": [84, 513], "switch_optim": [85, 514], "graph_bas": [86, 515], "int8": [88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 670, 734], "freeze_fake_qu": [88, 517], "freeze_valu": [89, 518], "freeze_value_without_calib": [90, 519], "fuse_conv_redundant_dequant": [91, 520], "fuse_conv_requant": [92, 521], "fuse_matmul_redundant_dequant": [93, 522], "fuse_matmul_requant": [94, 523], "meta_op_optim": [96, 525], "post_hostconst_convert": [97, 526], "post_quantized_op_cs": [98, 527], "rnn_convert": [99, 528], "scale_propag": [100, 529], "onnx": [101, 102, 103, 104, 105, 646, 676, 722, 723, 734], "onnx_graph": 102, "onnx_nod": 103, "onnx_schema": 104, "tf2onnx_util": 105, "qdq": [106, 107, 108, 109, 123, 124, 125, 126, 127, 128, 129, 130, 131, 530, 531, 532, 533, 547, 548, 549, 550, 551, 552, 553, 554, 555, 734], "insert_qdq_pattern": [107, 531], "merge_duplicated_qdq": [108, 532], "share_qdq_y_pattern": [109, 533], "graph_util": [110, 534], "quantize_graph": [112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562], "qat": [113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 734], "fake_quant": [113, 537], "quantize_config": [115, 539], "quantize_help": [116, 540], "quantize_lay": [117, 118, 119, 120, 121, 541, 542, 543, 544, 545], "optimize_lay": [118, 542], "quantize_layer_add": [119, 543], "quantize_layer_bas": [120, 544], "quantize_layer_bn": [121, 545], "quantize_wrapp": [122, 546], "fuse_qdq_bn": [123, 547], "fuse_qdq_concatv2": [124, 548], "fuse_qdq_conv": [125, 549], "fuse_qdq_deconv": [126, 550], "fuse_qdq_in": [127, 551], "fuse_qdq_matmul": [128, 552], "fuse_qdq_pool": [129, 553], "optimize_qdq": [131, 555], "quantize_graph_bas": [132, 556], "quantize_graph_bn": [133, 557], "quantize_graph_concatv2": [134, 558], "quantize_graph_conv": [135, 559], "quantize_graph_for_intel_cpu": [136, 560], "quantize_graph_matmul": [137, 561], "quantize_graph_pool": [138, 562], "quantize_graph_common": [139, 563], "smooth_quant_calibr": 140, "smooth_quant_scal": 141, "tf2onnx_convert": 142, "transform_graph": [143, 144, 145, 146, 147, 564, 565, 566, 567, 568], "bias_correct": [143, 564], "graph_transform_bas": [144, 565], "insert_log": [146, 567], "rerange_quantized_concat": [147, 568], "torch_util": [149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 277], "auto_round": 149, "autoround": [150, 151, 152, 153, 154], "export": [151, 311, 312, 313, 314, 670, 725], "model_wrapp": [153, 166, 574], "sign_sgd": 154, "awq": [155, 395, 589], "gptq": [157, 396, 590], "hawq_metr": 158, "layer_wise_qu": [160, 161, 162, 163, 164], "modified_pickl": [161, 584], "torch_load": 163, "mixed_precis": [165, 325], "pattern_detector": 167, "symbolic_trac": 168, "teq": [169, 603], "waq": [171, 172, 173, 174, 175, 176], "auto_alpha": 171, "graph_trac": 173, "algorithm": [178, 179, 180, 181, 182, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 453, 454, 455, 456, 457, 458, 459, 460, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 660, 725, 728, 731], "fast_bias_correct": 179, "weight_correct": 182, "benchmark": [183, 269, 650, 659, 665, 680, 721], "common": [184, 185, 186, 187, 188, 189, 190, 191, 270, 271, 272, 273, 274, 275, 276, 277, 638, 671], "base_config": 184, "attribut": [184, 185, 186, 190, 245, 253, 262, 296, 305, 316, 340, 380, 404, 407, 409, 451, 592, 604, 625, 636], "base_tun": 185, "tuning_param": 187, "constant": [188, 363, 445, 570, 617, 623], "logger": [190, 346, 628, 661], "compress": [192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 279, 651, 725], "callback": 192, "distil": [193, 194, 195, 196, 310, 666, 667, 680, 721, 734], "criterion": [193, 270], "optim": [195, 275, 595, 690, 700, 710, 713, 714, 715, 718, 719, 732], "hpo": [197, 198, 199, 200], "sa_optim": 198, "search_algorithm": [199, 332], "search_spac": 200, "pruner": [202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 338, 349], "criteria": [202, 637, 719, 731], "dsnot": 203, "model_slim": [205, 206, 207, 208], "auto_slim": 205, "pattern_analyz": 207, "weight_slim": 208, "pattern": [209, 210, 211, 212, 213, 341, 342, 343, 347, 719], "base": [209, 214, 676, 709, 732], "mha": [211, 218], "ninm": 212, "nxm": 213, "basic": [215, 355, 435, 639, 731], "pattern_lock": [219, 337], "progress": [220, 706], "retrain_fre": 221, "sparse_gpt": 222, "prune": [223, 229, 339, 350, 680, 719, 721, 734], "reg": 224, "schedul": [225, 351, 353, 719], "tf_criteria": 226, "wanda": [228, 229, 230, 231], "wrapper": 231, "conf": [232, 233, 234, 235], "config": [232, 236, 404, 470, 474, 592, 612, 652, 663, 717], "dotdict": 233, "pythonic_config": 235, "contrib": [237, 238, 239, 240, 280, 281, 282, 283], "strategi": [238, 239, 240, 281, 282, 283, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 657, 727, 731], "sigopt": [239, 282, 727, 731], "tpe": [240, 283, 731], "data": [241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 571, 643, 644, 665, 669, 704], "dataload": [241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 271, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 662, 663], "base_dataload": [241, 284], "default_dataload": [243, 286], "fetcher": [244, 287], "mxnet_dataload": [246, 289], "onnxrt_dataload": [247, 290], "pytorch_dataload": [248, 291], "sampler": [249, 292], "tensorflow_dataload": [250, 293], "dataset": [251, 252, 253, 254, 255, 256, 257, 258, 294, 295, 296, 297, 298, 299, 300, 301, 663, 665, 674, 705], "bert_dataset": [251, 294], "coco_dataset": [252, 295], "dummy_dataset": [254, 297], "dummy_dataset_v2": [255, 298], "imagenet_dataset": [256, 299], "style_transfer_dataset": [258, 301], "filter": [259, 260, 261, 302, 303, 304], "coco_filt": [259, 302], "transform": [263, 264, 265, 266, 267, 268, 306, 307, 308, 309, 674, 730], "coco_transform": 263, "imagenet_transform": [264, 306], "postprocess": [266, 276], "token": [267, 308], "experiment": [269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368], "metric": [273, 317, 318, 319, 320, 321, 322, 323, 324, 370, 371, 372, 373, 374, 375, 376, 377, 674, 679], "model": [274, 379, 380, 381, 382, 383, 384, 385, 386, 387, 573, 643, 654, 670, 673, 676, 678, 680, 682, 689, 703, 704, 705, 713, 714, 715, 719, 723, 725, 728, 734], "compon": 278, "qlinear2qdq": 312, "tf2onnx": 313, "torch2onnx": 314, "graph_optim": 315, "bleu": [317, 370], "bleu_util": [318, 371], "coco_label_map": [319, 372], "coco_tool": [320, 373], "evaluate_squad": [321, 374], "f1": [322, 375], "model_convers": 326, "na": [327, 328, 329, 330, 331, 332, 639, 721], "basic_na": 327, "dyna": 328, "nas_util": 331, "pruner_legaci": [333, 334, 335, 336, 337, 338], "gradient_sensit": 333, "group_lasso": 334, "magnitud": 336, "pruning_recip": [340, 341, 342, 343], "tile_pattern": 343, "pruning_v2": 344, "pytorch_prun": [345, 346, 347, 348, 349, 350, 351], "prune_util": 348, "auto_mixed_precis": [354, 434], "bayesian": [356, 436, 731], "exhaust": [357, 438, 731], "mse": [359, 441, 731], "mse_v2": [360, 442, 731], "random": [361, 443, 731], "tuning_sampl": [365, 447], "tuning_spac": [366, 448], "tuning_struct": [367, 449], "mix_precis": 378, "base_model": 379, "keras_model": 381, "mxnet_model": 383, "nets_factori": [384, 575], "onnx_model": [385, 408], "tensorflow_model": 386, "torch_model": 387, "object": [388, 655, 713, 714, 715, 717], "layer_wis": [390, 391, 582, 583, 584, 585], "core": [390, 393, 455, 593], "smoother": [392, 393, 394, 454, 455, 456, 457], "rtn": [398, 602], "algorithm_entri": [401, 472, 610], "autotun": [402, 473, 611], "profil": [410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 665], "parser": [411, 412, 413, 414, 415, 416, 417, 418, 419, 420], "factori": [411, 413, 418, 421, 423, 428], "onnx_pars": [413, 414, 415], "result": [417, 703, 705, 713, 714, 715], "tensorflow_pars": [418, 419, 420], "onnxrt_profil": [423, 424, 425, 426], "tensorflow_profil": [428, 429, 430, 431], "auto": [433, 694, 700, 724, 728, 731], "conserv": [437, 731], "hawq_v2": [439, 731], "templat": [451, 452, 637], "api_doc_exampl": 451, "scaler": 457, "static_qu": [458, 459, 460, 586, 587, 588], "layer": [463, 464, 465, 466, 467, 468, 469, 666, 723, 728], "torch": [577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 647, 734], "habana_fp8": [577, 578, 579, 580], "fp8_quant": 577, "observ": 580, "load": 583, "hqq": [591, 592, 593, 594, 595, 596, 597, 598, 599], "bitpack": 591, "qtensor": 596, "quant_api": 597, "amp": [605, 606, 607, 608], "autocast": 605, "fp8": [606, 607], "auto_acceler": 616, "environ": [618, 676, 686], "train": [621, 638, 658, 668, 680, 719, 722], "collect_layer_histogram": 622, "create_obj_from_config": 624, "kl_diverg": 626, "load_huggingfac": 627, "neural_insights_util": 629, "option": [630, 668, 688], "weights_detail": 633, "version": 634, "intel": [635, 641, 662, 665, 675, 676, 679, 680, 686, 694, 700, 734, 735], "neural": [635, 638, 639, 641, 662, 665, 675, 676, 679, 680, 683, 687, 689, 694, 700, 702, 703, 704, 705, 707, 708, 709, 713, 714, 715, 719, 727, 732, 735], "compressor": [635, 638, 641, 662, 665, 675, 676, 679, 680, 694, 700, 727, 735], "document": [635, 641, 648, 735], "section": [635, 735], "contributor": [636, 637], "coven": [636, 637], "code": [636, 637, 639, 661, 680, 701, 706, 725, 732], "conduct": [636, 637], "our": [636, 728], "pledg": 636, "standard": 636, "respons": [636, 709], "scope": [636, 719], "enforc": 636, "contribut": [637, 693, 697], "guidelin": 637, "creat": [637, 706], "pull": 637, "request": [637, 681, 711], "step": [637, 702, 703, 704, 705], "checklist": 637, "accept": 637, "statu": [637, 708, 709], "check": 637, "overview": [637, 710, 732], "support": [637, 638, 639, 642, 644, 659, 660, 662, 663, 665, 666, 667, 668, 670, 672, 675, 676, 679, 681, 682, 684, 685, 689, 690, 717, 718, 719, 721, 722, 723, 725, 728, 729, 730, 733], "fx": 638, "introduct": [638, 639, 642, 643, 644, 659, 660, 662, 663, 665, 666, 667, 668, 670, 672, 675, 679, 681, 682, 700, 703, 704, 705, 717, 718, 719, 721, 722, 723, 725, 727, 728, 729, 730, 731, 733], "mode": [638, 734], "matrix": [638, 639, 642, 659, 660, 662, 663, 665, 666, 667, 668, 670, 672, 675, 679, 681, 682, 685, 717, 718, 719, 721, 722, 723, 725, 728, 729, 733], "get": [638, 639, 641, 642, 659, 662, 663, 665, 666, 667, 668, 672, 673, 679, 681, 683, 694, 701, 702, 706, 707, 708, 709, 717, 718, 719, 721, 722, 729, 733], "start": [638, 639, 641, 642, 659, 662, 663, 665, 666, 667, 668, 672, 673, 679, 681, 683, 684, 688, 694, 702, 706, 707, 708, 713, 714, 715, 717, 718, 719, 721, 722, 729, 733], "post": [638, 680, 709, 722], "static": [638, 722], "dynam": [638, 639, 722], "awar": [638, 680, 719, 722], "exampl": [638, 639, 642, 648, 659, 662, 663, 665, 666, 667, 668, 669, 670, 679, 680, 681, 682, 685, 689, 702, 703, 704, 705, 707, 712, 713, 714, 715, 717, 718, 719, 722, 723, 725, 728, 729, 734], "note": [638, 726], "detail": 638, "problem": 638, "architectur": [639, 664, 675, 676], "search": [639, 700], "api": [639, 641, 642, 643, 648, 649, 659, 662, 663, 666, 667, 668, 673, 674, 679, 681, 683, 687, 701, 702, 709, 715, 717, 718, 719, 721, 732], "usag": [639, 689, 700, 709, 728, 729, 731], "1": [639, 668, 671, 674, 680, 700, 707, 708, 734], "python": [639, 641, 662, 673, 679, 683, 687, 688, 695, 698, 702, 721, 732], "yaml": [639, 643, 663, 668, 672, 733], "2": [639, 668, 671, 674, 680, 700, 707, 708, 734], "onli": [639, 725], "advanc": [639, 706, 732], "custom": [639, 662, 679, 713, 731], "secur": [640, 668], "polici": [640, 731], "report": 640, "vulner": 640, "instal": [641, 665, 676, 684, 686, 693, 694, 697, 702, 707, 708], "from": [641, 643, 676, 680, 702, 707, 708], "pypi": [641, 689, 702], "select": [641, 694], "public": [641, 661, 720], "event": [641, 720], "addit": 641, "commun": 641, "work": [642, 707, 722], "flow": [642, 722], "background": [642, 661, 700], "ad": 642, "new": [642, 644, 695, 698, 731], "backend": [642, 722], "capabl": [642, 725], "implement": [642, 643], "onnxrtadaptor": 642, "how": [643, 644, 665, 703, 704, 705, 707], "add": [643, 708], "an": [643, 713, 714, 715], "list": [643, 669, 712, 730], "need": 643, "design": [643, 664, 710, 731], "framework": [643, 662, 663, 670, 672, 682, 721, 723, 725, 728], "query_fw_cap": 643, "accord": [643, 644], "tune_cfg": 643, "prepar": [643, 665, 703, 704, 705, 727], "fp32": [643, 670], "graph": 643, "run": [643, 665, 701, 703, 704, 705, 706], "sampl": [643, 673], "iter": 643, "calcul": 643, "rang": 643, "type": [644, 661, 719], "like": 644, "int4": 644, "few": 644, "line": 644, "chang": [644, 674, 699, 701, 726], "defin": [644, 668], "abil": 644, "specif": [644, 663], "invok": 644, "kernel": 644, "tune": [644, 722, 725, 728, 731], "configur": [644, 668, 672, 706, 721, 727, 733], "us": [644, 662, 679, 707, 708, 728], "summari": [644, 703], "runtim": [646, 676, 722, 723, 734], "mix": [653, 680, 681, 724], "precis": [653, 680, 681, 724], "refer": [660, 661, 719, 722, 725, 728], "inc": 661, "convent": 661, "rule": [661, 722], "import": 661, "string": 661, "annot": 661, "comment": 661, "todo": 661, "intern": 661, "interfac": 661, "folder": [661, 701], "structur": 661, "recommend": 661, "v": [661, 701], "set": [661, 665, 686, 700], "json": 661, "build": [662, 671, 679, 706, 707, 708], "file": [663, 672, 733], "user": [663, 668, 674, 721, 725, 732, 733], "workflow": [664, 710], "diagnosi": [665, 702], "featur": [665, 668, 672, 675, 689, 690, 694, 721, 722, 729, 733], "modifi": 665, "script": [665, 706], "see": 665, "do": [665, 683], "paramet": [665, 709], "descript": [665, 709, 711], "suggest": 665, "fallback": 665, "knowledg": [666, 734], "intermedi": 666, "self": 666, "distribut": [668, 689, 731], "infer": 668, "evalu": 668, "pure": 668, "horovodrun": 668, "execut": 668, "releas": [669, 695, 698, 726], "appendix": 670, "frequent": 671, "ask": 671, "question": 671, "issu": [671, 726], "3": [671, 684, 700], "4": [671, 691, 700, 720], "quick": [673, 688], "valid": [673, 676, 728, 734], "incompat": [674, 726], "between": 674, "v1": 674, "face": [674, 714, 715], "built": [674, 676, 679], "infrastructur": 675, "prerequisit": [676, 707, 708], "binari": 676, "sourc": [676, 702, 704, 705, 707, 708], "ai": 676, "kit": 676, "system": 676, "requir": [676, 693, 697, 703, 704, 705, 713], "hardwar": [676, 681, 734], "cpu": [676, 686, 734], "64": 676, "compat": 676, "processor": 676, "gpu": 676, "": [676, 701, 707], "xe": 676, "multipl": [676, 717, 734], "vendor": 676, "through": [676, 728, 734], "softwar": [676, 681], "legal": 677, "inform": 677, "licens": 677, "citat": 677, "trademark": 677, "llm": 678, "recip": [678, 722], "ipex": [678, 722], "kei": 678, "migrat": 680, "x": 680, "orchestr": [680, 718], "fp16": 681, "dure": [681, 724], "accuraci": [681, 703, 705, 722, 731], "driven": 681, "coder": [683, 687, 689, 700, 732], "what": [683, 701, 707], "we": 683, "offer": 683, "jupyt": [683, 684, 695, 698], "lab": [683, 684], "extens": [683, 693, 694, 697, 700, 701, 710, 734], "launcher": [683, 688], "contact": [683, 707], "aw": 684, "amazon": 684, "sagemak": 684, "For": 684, "studio": 684, "notebook": 684, "instanc": 684, "guid": [684, 732], "bigdl": 685, "nano": 685, "platform": [686, 727], "best": [686, 694], "perform": [686, 727], "mkl": 686, "openmp": 686, "jemalloc": 686, "numa": 686, "control": 686, "variabl": 686, "frequenc": 686, "govern": 686, "enabl": [687, 694, 700], "bench": 687, "superbench": 687, "argument": 688, "v0": 691, "highlight": 691, "other": 691, "changelog": [692, 696], "neural_compressor_ext_lab": [693, 695], "uninstal": [693, 697], "develop": [693, 697], "jupyterlab": 694, "Or": 694, "let": 694, "u": 694, "help": 694, "you": 694, "pre": 694, "requisit": 694, "make": [695, 698, 701, 706], "manual": [695, 698], "npm": [695, 698, 706], "autom": [695, 698], "publish": [695, 698], "conda": [695, 698], "forg": [695, 698], "neural_compressor_ext_lab_alibaba": [697, 698], "log": [699, 708, 709], "unreleas": 699, "vscode": 700, "open": [700, 705], "icon": 700, "5": 700, "welcom": 701, "your": 701, "setup": 701, "up": 701, "straight": 701, "awai": 701, "explor": 701, "test": [701, 706], "go": 701, "further": 701, "insight": [702, 703, 704, 705], "tensor": [702, 728], "dump": [702, 704], "research": 702, "collabor": 702, "debug": [703, 705], "analyz": [703, 705, 706], "weight": [703, 704, 705, 725], "histogram": 705, "react": 706, "app": 706, "avail": 706, "eject": 706, "learn": [706, 707], "more": [706, 707], "bundl": 706, "size": 706, "web": 706, "deploy": [706, 719], "fail": 706, "minifi": 706, "solut": [707, 708, 709, 713, 714, 715], "why": 707, "doe": 707, "method": [707, 708], "pip": [707, 708], "end": [707, 713, 714, 715], "servic": [708, 710, 713, 714, 715], "submit": [708, 709, 713, 714, 715], "task": [708, 709, 711, 713, 714, 715], "stop": [708, 713, 714, 715], "inspect": 708, "manag": [708, 713, 714], "resourc": [708, 713, 714], "node": 708, "state": 708, "cluster": [708, 709], "remov": 708, "url": 709, "endpoint": 709, "task_id": 709, "websocket": 709, "screen": 709, "ping": 709, "download": [709, 713, 714], "doc": 710, "wip": 710, "oaa": 710, "definit": 710, "diagram": 710, "hug": [714, 715], "grpc": 715, "client": 716, "singl": 717, "One": 718, "shot": 718, "network": 719, "sparsiti": 719, "decai": 719, "regular": 719, "larg": 719, "languag": 719, "retrain": 719, "free": 719, "spars": 719, "hyperparamet": 719, "full": 720, "79": 720, "2023": 720, "25": 720, "2022": 720, "35": 720, "2021": 720, "15": [720, 734], "2018": 720, "2020": 720, "style": 721, "access": 721, "fundament": [722, 728], "scheme": 722, "approach": 722, "With": 722, "without": 722, "specifi": 722, "devic": 722, "wise": 723, "lwq": 723, "turn": 724, "off": 724, "woq": [725, 734], "known": 726, "benefit": 727, "comparison": 727, "differ": 727, "smooth": 728, "quant": 728, "per": 728, "channel": 728, "limit": 728, "smoothquant": 728, "enhanc": 728, "alpha": 728, "engin": 728, "fix": 728, "determin": 728, "entir": 728, "each": 728, "block": 728, "tensorboard": 729, "space": 731, "exit": 731, "process": 731, "zero": 732, "topic": 732, "innov": 732, "product": 732, "13": 734, "0": 734, "ptq": 734}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"block_mask": [[0, "module-block_mask"]], "neural_compressor.adaptor.adaptor": [[1, "module-neural_compressor.adaptor.adaptor"]], "Module Contents": [[1, "module-contents"], [3, "module-contents"], [11, "module-contents"], [13, "module-contents"], [14, "module-contents"], [15, "module-contents"], [16, "module-contents"], [18, "module-contents"], [19, "module-contents"], [20, "module-contents"], [21, "module-contents"], [22, "module-contents"], [23, "module-contents"], [24, "module-contents"], [25, "module-contents"], [26, "module-contents"], [27, "module-contents"], [28, "module-contents"], [30, "module-contents"], [31, "module-contents"], [32, "module-contents"], [33, "module-contents"], [34, "module-contents"], [35, "module-contents"], [36, "module-contents"], [37, "module-contents"], [38, "module-contents"], [39, "module-contents"], [40, "module-contents"], [41, "module-contents"], [42, "module-contents"], [43, "module-contents"], [44, "module-contents"], [45, "module-contents"], [46, "module-contents"], [47, "module-contents"], [48, "module-contents"], [49, "module-contents"], [50, "module-contents"], [51, "module-contents"], [53, "module-contents"], [54, "module-contents"], [55, "module-contents"], [56, "module-contents"], [57, "module-contents"], [58, "module-contents"], [59, "module-contents"], [60, "module-contents"], [61, "module-contents"], [62, "module-contents"], [63, "module-contents"], [64, "module-contents"], [65, "module-contents"], [66, "module-contents"], [67, "module-contents"], [68, "module-contents"], [69, "module-contents"], [70, "module-contents"], [71, "module-contents"], [72, "module-contents"], [73, "module-contents"], [74, "module-contents"], [75, "module-contents"], [77, "module-contents"], [78, "module-contents"], [79, "module-contents"], [80, "module-contents"], [81, "module-contents"], [82, "module-contents"], [83, "module-contents"], [84, "module-contents"], [85, "module-contents"], [86, "module-contents"], [88, "module-contents"], [89, "module-contents"], [90, "module-contents"], [91, "module-contents"], [92, "module-contents"], [93, "module-contents"], [94, "module-contents"], [96, "module-contents"], [97, "module-contents"], [98, "module-contents"], [99, "module-contents"], [100, "module-contents"], [102, "module-contents"], [103, "module-contents"], [104, "module-contents"], [105, "module-contents"], [107, "module-contents"], [108, "module-contents"], [109, "module-contents"], [110, "module-contents"], [113, "module-contents"], [115, "module-contents"], [116, "module-contents"], [118, "module-contents"], [119, "module-contents"], [120, "module-contents"], [121, "module-contents"], [122, "module-contents"], [123, "module-contents"], [124, "module-contents"], [125, "module-contents"], [126, "module-contents"], [127, "module-contents"], [128, "module-contents"], [129, "module-contents"], [131, "module-contents"], [132, "module-contents"], [133, "module-contents"], [134, "module-contents"], [135, "module-contents"], [136, "module-contents"], [137, "module-contents"], [138, "module-contents"], [139, "module-contents"], [140, "module-contents"], [141, "module-contents"], [142, "module-contents"], [143, "module-contents"], [144, "module-contents"], [146, "module-contents"], [147, "module-contents"], [148, "module-contents"], [150, "module-contents"], [151, "module-contents"], [154, "module-contents"], [155, "module-contents"], [156, "module-contents"], [157, "module-contents"], [158, "module-contents"], [161, "module-contents"], [162, "module-contents"], [163, "module-contents"], [164, "module-contents"], [165, "module-contents"], [166, "module-contents"], [167, "module-contents"], [168, "module-contents"], [169, "module-contents"], [170, "module-contents"], [175, "module-contents"], [176, "module-contents"], [177, "module-contents"], [178, "module-contents"], [179, "module-contents"], [181, "module-contents"], [182, "module-contents"], [183, "module-contents"], [184, "module-contents"], [185, "module-contents"], [187, "module-contents"], [190, "module-contents"], [191, "module-contents"], [192, "module-contents"], [193, "module-contents"], [195, "module-contents"], [196, "module-contents"], [199, "module-contents"], [200, "module-contents"], [202, "module-contents"], [203, "module-contents"], [205, "module-contents"], [207, "module-contents"], [208, "module-contents"], [209, "module-contents"], [211, "module-contents"], [212, "module-contents"], [213, "module-contents"], [214, "module-contents"], [215, "module-contents"], [216, "module-contents"], [218, "module-contents"], [219, "module-contents"], [220, "module-contents"], [221, "module-contents"], [222, "module-contents"], [223, "module-contents"], [224, "module-contents"], [225, "module-contents"], [226, "module-contents"], [227, "module-contents"], [229, "module-contents"], [230, "module-contents"], [231, "module-contents"], [232, "module-contents"], [233, "module-contents"], [235, "module-contents"], [236, "module-contents"], [239, "module-contents"], [240, "module-contents"], [241, "module-contents"], [242, "module-contents"], [243, "module-contents"], [244, "module-contents"], [246, "module-contents"], [247, "module-contents"], [248, "module-contents"], [249, "module-contents"], [250, "module-contents"], [251, "module-contents"], [252, "module-contents"], [253, "module-contents"], [254, "module-contents"], [255, "module-contents"], [256, "module-contents"], [258, "module-contents"], [259, "module-contents"], [260, "module-contents"], [263, "module-contents"], [264, "module-contents"], [266, "module-contents"], [267, "module-contents"], [268, "module-contents"], [269, "module-contents"], [270, "module-contents"], [271, "module-contents"], [273, "module-contents"], [274, "module-contents"], [275, "module-contents"], [276, "module-contents"], [277, "module-contents"], [278, "module-contents"], [282, "module-contents"], [283, "module-contents"], [284, "module-contents"], [286, "module-contents"], [287, "module-contents"], [289, "module-contents"], [290, "module-contents"], [291, "module-contents"], [292, "module-contents"], [293, "module-contents"], [294, "module-contents"], [295, "module-contents"], [296, "module-contents"], [297, "module-contents"], [298, "module-contents"], [299, "module-contents"], [301, "module-contents"], [302, "module-contents"], [303, "module-contents"], [306, "module-contents"], [308, "module-contents"], [309, "module-contents"], [310, "module-contents"], [312, "module-contents"], [313, "module-contents"], [314, "module-contents"], [315, "module-contents"], [317, "module-contents"], [318, "module-contents"], [320, "module-contents"], [321, "module-contents"], [322, "module-contents"], [324, "module-contents"], [325, "module-contents"], [326, "module-contents"], [327, "module-contents"], [328, "module-contents"], [330, "module-contents"], [331, "module-contents"], [332, "module-contents"], [333, "module-contents"], [334, "module-contents"], [336, "module-contents"], [337, "module-contents"], [338, "module-contents"], [339, "module-contents"], [342, "module-contents"], [343, "module-contents"], [344, "module-contents"], [347, "module-contents"], [348, "module-contents"], [349, "module-contents"], [350, "module-contents"], [351, "module-contents"], [352, "module-contents"], [353, "module-contents"], [354, "module-contents"], [355, "module-contents"], [356, "module-contents"], [357, "module-contents"], [359, "module-contents"], [360, "module-contents"], [361, "module-contents"], [362, "module-contents"], [365, "module-contents"], [366, "module-contents"], [367, "module-contents"], [368, "module-contents"], [370, "module-contents"], [371, "module-contents"], [373, "module-contents"], [374, "module-contents"], [375, "module-contents"], [377, "module-contents"], [378, "module-contents"], [379, "module-contents"], [381, "module-contents"], [382, "module-contents"], [383, "module-contents"], [384, "module-contents"], [385, "module-contents"], [386, "module-contents"], [387, "module-contents"], [388, "module-contents"], [390, "module-contents"], [392, "module-contents"], [393, "module-contents"], [395, "module-contents"], [396, "module-contents"], [398, "module-contents"], [399, "module-contents"], [401, "module-contents"], [402, "module-contents"], [403, "module-contents"], [404, "module-contents"], [408, "module-contents"], [409, "module-contents"], [411, "module-contents"], [413, "module-contents"], [415, "module-contents"], [416, "module-contents"], [417, "module-contents"], [418, "module-contents"], [420, "module-contents"], [421, "module-contents"], [423, "module-contents"], [425, "module-contents"], [426, "module-contents"], [427, "module-contents"], [428, "module-contents"], [430, "module-contents"], [431, "module-contents"], [432, "module-contents"], [433, "module-contents"], [434, "module-contents"], [435, "module-contents"], [436, "module-contents"], [437, "module-contents"], [438, "module-contents"], [439, "module-contents"], [441, "module-contents"], [442, "module-contents"], [443, "module-contents"], [444, "module-contents"], [447, "module-contents"], [448, "module-contents"], [449, "module-contents"], [450, "module-contents"], [451, "module-contents"], [454, "module-contents"], [455, "module-contents"], [457, "module-contents"], [459, "module-contents"], [460, "module-contents"], [470, "module-contents"], [472, "module-contents"], [473, "module-contents"], [474, "module-contents"], [476, "module-contents"], [477, "module-contents"], [478, "module-contents"], [479, "module-contents"], [480, "module-contents"], [482, "module-contents"], [483, "module-contents"], [484, "module-contents"], [485, "module-contents"], [486, "module-contents"], [487, "module-contents"], [488, "module-contents"], [489, "module-contents"], [490, "module-contents"], [491, "module-contents"], [492, "module-contents"], [493, "module-contents"], [494, "module-contents"], [495, "module-contents"], [496, "module-contents"], [497, "module-contents"], [498, "module-contents"], [499, "module-contents"], [500, "module-contents"], [501, "module-contents"], [502, "module-contents"], [503, "module-contents"], [504, "module-contents"], [506, "module-contents"], [507, "module-contents"], [508, "module-contents"], [509, "module-contents"], [510, "module-contents"], [511, "module-contents"], [512, "module-contents"], [513, "module-contents"], [514, "module-contents"], [515, "module-contents"], [517, "module-contents"], [518, "module-contents"], [519, "module-contents"], [520, "module-contents"], [521, "module-contents"], [522, "module-contents"], [523, "module-contents"], [525, "module-contents"], [526, "module-contents"], [527, "module-contents"], [528, "module-contents"], [529, "module-contents"], [531, "module-contents"], [532, "module-contents"], [533, "module-contents"], [534, "module-contents"], [537, "module-contents"], [539, "module-contents"], [540, "module-contents"], [542, "module-contents"], [543, "module-contents"], [544, "module-contents"], [545, "module-contents"], [546, "module-contents"], [547, "module-contents"], [548, "module-contents"], [549, "module-contents"], [550, "module-contents"], [551, "module-contents"], [552, "module-contents"], [553, "module-contents"], [555, "module-contents"], [556, "module-contents"], [557, "module-contents"], [558, "module-contents"], [559, "module-contents"], [560, "module-contents"], [561, "module-contents"], [562, "module-contents"], [563, "module-contents"], [564, "module-contents"], [565, "module-contents"], [567, "module-contents"], [568, "module-contents"], [569, "module-contents"], [571, "module-contents"], [573, "module-contents"], [574, "module-contents"], [575, "module-contents"], [576, "module-contents"], [583, "module-contents"], [584, "module-contents"], [585, "module-contents"], [587, "module-contents"], [588, "module-contents"], [589, "module-contents"], [590, "module-contents"], [591, "module-contents"], [592, "module-contents"], [593, "module-contents"], [596, "module-contents"], [597, "module-contents"], [599, "module-contents"], [601, "module-contents"], [602, "module-contents"], [603, "module-contents"], [604, "module-contents"], [605, "module-contents"], [610, "module-contents"], [611, "module-contents"], [612, "module-contents"], [615, "module-contents"], [616, "module-contents"], [620, "module-contents"], [621, "module-contents"], [622, "module-contents"], [624, "module-contents"], [626, "module-contents"], [627, "module-contents"], [628, "module-contents"], [629, "module-contents"], [630, "module-contents"], [631, "module-contents"], [632, "module-contents"], [633, "module-contents"]], "Classes": [[1, "classes"], [3, "classes"], [11, "classes"], [13, "classes"], [14, "classes"], [15, "classes"], [16, "classes"], [18, "classes"], [19, "classes"], [20, "classes"], [21, "classes"], [22, "classes"], [23, "classes"], [24, "classes"], [25, "classes"], [26, "classes"], [27, "classes"], [28, "classes"], [30, "classes"], [31, "classes"], [32, "classes"], [33, "classes"], [34, "classes"], [35, "classes"], [36, "classes"], [37, "classes"], [38, "classes"], [39, "classes"], [40, "classes"], [41, "classes"], [42, "classes"], [43, "classes"], [45, "classes"], [46, "classes"], [47, "classes"], [48, "classes"], [49, "classes"], [50, "classes"], [51, "classes"], [53, "classes"], [54, "classes"], [55, "classes"], [56, "classes"], [57, "classes"], [58, "classes"], [59, "classes"], [60, "classes"], [61, "classes"], [62, "classes"], [63, "classes"], [64, "classes"], [65, "classes"], [66, "classes"], [67, "classes"], [68, "classes"], [69, "classes"], [70, "classes"], [71, "classes"], [72, "classes"], [73, "classes"], [74, "classes"], [75, "classes"], [77, "classes"], [78, "classes"], [79, "classes"], [80, "classes"], [81, "classes"], [82, "classes"], [83, "classes"], [84, "classes"], [85, "classes"], [86, "classes"], [88, "classes"], [89, "classes"], [90, "classes"], [91, "classes"], [92, "classes"], [93, "classes"], [94, "classes"], [96, "classes"], [97, "classes"], [98, "classes"], [99, "classes"], [100, "classes"], [102, "classes"], [103, "classes"], [104, "classes"], [105, "classes"], [107, "classes"], [108, "classes"], [109, "classes"], [110, "classes"], [113, "classes"], [115, "classes"], [119, "classes"], [120, "classes"], [121, "classes"], [122, "classes"], [123, "classes"], [124, "classes"], [125, "classes"], [126, "classes"], [127, "classes"], [128, "classes"], [129, "classes"], [131, "classes"], [132, "classes"], [133, "classes"], [134, "classes"], [135, "classes"], [136, "classes"], [137, "classes"], [138, "classes"], [139, "classes"], [140, "classes"], [141, "classes"], [142, "classes"], [143, "classes"], [144, "classes"], [146, "classes"], [147, "classes"], [150, "classes"], [154, "classes"], [155, "classes"], [156, "classes"], [157, "classes"], [158, "classes"], [162, "classes"], [166, "classes"], [167, "classes"], [169, "classes"], [175, "classes"], [178, "classes"], [179, "classes"], [180, "classes"], [181, "classes"], [182, "classes"], [184, "classes"], [185, "classes"], [186, "classes"], [187, "classes"], [190, "classes"], [192, "classes"], [193, "classes"], [195, "classes"], [199, "classes"], [200, "classes"], [202, "classes"], [207, "classes"], [208, "classes"], [209, "classes"], [211, "classes"], [212, "classes"], [213, "classes"], [214, "classes"], [215, "classes"], [216, "classes"], [218, "classes"], [219, "classes"], [220, "classes"], [221, "classes"], [222, "classes"], [223, "classes"], [224, "classes"], [225, "classes"], [226, "classes"], [231, "classes"], [232, "classes"], [233, "classes"], [235, "classes"], [236, "classes"], [239, "classes"], [240, "classes"], [241, "classes"], [242, "classes"], [243, "classes"], [244, "classes"], [245, "classes"], [246, "classes"], [247, "classes"], [248, "classes"], [249, "classes"], [250, "classes"], [251, "classes"], [252, "classes"], [253, "classes"], [254, "classes"], [255, "classes"], [256, "classes"], [257, "classes"], [258, "classes"], [259, "classes"], [260, "classes"], [261, "classes"], [262, "classes"], [263, "classes"], [264, "classes"], [265, "classes"], [266, "classes"], [267, "classes"], [268, "classes"], [269, "classes"], [270, "classes"], [271, "classes"], [272, "classes"], [273, "classes"], [274, "classes"], [275, "classes"], [276, "classes"], [278, "classes"], [282, "classes"], [283, "classes"], [284, "classes"], [286, "classes"], [287, "classes"], [289, "classes"], [290, "classes"], [291, "classes"], [292, "classes"], [293, "classes"], [294, "classes"], [295, "classes"], [296, "classes"], [297, "classes"], [298, "classes"], [299, "classes"], [300, "classes"], [301, "classes"], [302, "classes"], [303, "classes"], [304, "classes"], [305, "classes"], [306, "classes"], [307, "classes"], [308, "classes"], [309, "classes"], [310, "classes"], [315, "classes"], [316, "classes"], [317, "classes"], [320, "classes"], [323, "classes"], [324, "classes"], [325, "classes"], [326, "classes"], [327, "classes"], [328, "classes"], [330, "classes"], [332, "classes"], [333, "classes"], [334, "classes"], [336, "classes"], [337, "classes"], [338, "classes"], [339, "classes"], [340, "classes"], [341, "classes"], [342, "classes"], [343, "classes"], [344, "classes"], [347, "classes"], [349, "classes"], [350, "classes"], [351, "classes"], [352, "classes"], [353, "classes"], [354, "classes"], [355, "classes"], [356, "classes"], [357, "classes"], [359, "classes"], [360, "classes"], [361, "classes"], [362, "classes"], [365, "classes"], [366, "classes"], [367, "classes"], [368, "classes"], [370, "classes"], [373, "classes"], [376, "classes"], [377, "classes"], [379, "classes"], [380, "classes"], [381, "classes"], [382, "classes"], [383, "classes"], [384, "classes"], [385, "classes"], [386, "classes"], [387, "classes"], [388, "classes"], [389, "classes"], [392, "classes"], [393, "classes"], [394, "classes"], [400, "classes"], [403, "classes"], [404, "classes"], [405, "classes"], [407, "classes"], [408, "classes"], [411, "classes"], [413, "classes"], [415, "classes"], [416, "classes"], [417, "classes"], [418, "classes"], [420, "classes"], [421, "classes"], [423, "classes"], [425, "classes"], [427, "classes"], [428, "classes"], [430, "classes"], [433, "classes"], [434, "classes"], [435, "classes"], [436, "classes"], [437, "classes"], [438, "classes"], [439, "classes"], [441, "classes"], [442, "classes"], [443, "classes"], [444, "classes"], [447, "classes"], [448, "classes"], [449, "classes"], [450, "classes"], [451, "classes"], [454, "classes"], [455, "classes"], [457, "classes"], [459, "classes"], [460, "classes"], [470, "classes"], [474, "classes"], [477, "classes"], [478, "classes"], [479, "classes"], [480, "classes"], [482, "classes"], [483, "classes"], [484, "classes"], [485, "classes"], [486, "classes"], [487, "classes"], [488, "classes"], [489, "classes"], [490, "classes"], [491, "classes"], [492, "classes"], [493, "classes"], [494, "classes"], [495, "classes"], [496, "classes"], [497, "classes"], [498, "classes"], [499, "classes"], [500, "classes"], [501, "classes"], [502, "classes"], [503, "classes"], [504, "classes"], [506, "classes"], [507, "classes"], [508, "classes"], [509, "classes"], [510, "classes"], [511, "classes"], [512, "classes"], [513, "classes"], [514, "classes"], [515, "classes"], [517, "classes"], [518, "classes"], [519, "classes"], [520, "classes"], [521, "classes"], [522, "classes"], [523, "classes"], [525, "classes"], [526, "classes"], [527, "classes"], [528, "classes"], [529, "classes"], [531, "classes"], [532, "classes"], [533, "classes"], [534, "classes"], [537, "classes"], [539, "classes"], [543, "classes"], [544, "classes"], [545, "classes"], [546, "classes"], [547, "classes"], [548, "classes"], [549, "classes"], [550, "classes"], [551, "classes"], [552, "classes"], [553, "classes"], [555, "classes"], [556, "classes"], [557, "classes"], [558, "classes"], [559, "classes"], [560, "classes"], [561, "classes"], [562, "classes"], [563, "classes"], [564, "classes"], [565, "classes"], [567, "classes"], [568, "classes"], [571, "classes"], [573, "classes"], [574, "classes"], [575, "classes"], [576, "classes"], [588, "classes"], [590, "classes"], [591, "classes"], [592, "classes"], [593, "classes"], [596, "classes"], [601, "classes"], [603, "classes"], [604, "classes"], [605, "classes"], [612, "classes"], [616, "classes"], [621, "classes"], [622, "classes"], [625, "classes"], [626, "classes"], [627, "classes"], [628, "classes"], [630, "classes"], [632, "classes"], [633, "classes"]], "Functions": [[1, "functions"], [13, "functions"], [16, "functions"], [34, "functions"], [42, "functions"], [43, "functions"], [44, "functions"], [45, "functions"], [67, "functions"], [68, "functions"], [70, "functions"], [104, "functions"], [105, "functions"], [116, "functions"], [118, "functions"], [148, "functions"], [150, "functions"], [151, "functions"], [154, "functions"], [156, "functions"], [157, "functions"], [158, "functions"], [163, "functions"], [164, "functions"], [165, "functions"], [168, "functions"], [170, "functions"], [176, "functions"], [177, "functions"], [178, "functions"], [180, "functions"], [183, "functions"], [184, "functions"], [185, "functions"], [186, "functions"], [191, "functions"], [193, "functions"], [195, "functions"], [196, "functions"], [199, "functions"], [200, "functions"], [202, "functions"], [203, "functions"], [204, "functions"], [205, "functions"], [207, "functions"], [209, "functions"], [210, "functions"], [214, "functions"], [217, "functions"], [223, "functions"], [224, "functions"], [225, "functions"], [226, "functions"], [227, "functions"], [229, "functions"], [230, "functions"], [233, "functions"], [242, "functions"], [243, "functions"], [251, "functions"], [253, "functions"], [257, "functions"], [260, "functions"], [261, "functions"], [262, "functions"], [265, "functions"], [267, "functions"], [268, "functions"], [269, "functions"], [270, "functions"], [272, "functions"], [274, "functions"], [275, "functions"], [277, "functions"], [286, "functions"], [294, "functions"], [296, "functions"], [300, "functions"], [303, "functions"], [304, "functions"], [305, "functions"], [307, "functions"], [308, "functions"], [309, "functions"], [312, "functions"], [313, "functions"], [314, "functions"], [317, "functions"], [318, "functions"], [320, "functions"], [321, "functions"], [322, "functions"], [323, "functions"], [324, "functions"], [331, "functions"], [338, "functions"], [342, "functions"], [347, "functions"], [348, "functions"], [349, "functions"], [351, "functions"], [356, "functions"], [362, "functions"], [366, "functions"], [368, "functions"], [370, "functions"], [371, "functions"], [373, "functions"], [374, "functions"], [375, "functions"], [376, "functions"], [377, "functions"], [378, "functions"], [382, "functions"], [386, "functions"], [388, "functions"], [389, "functions"], [390, "functions"], [391, "functions"], [395, "functions"], [396, "functions"], [398, "functions"], [399, "functions"], [400, "functions"], [401, "functions"], [402, "functions"], [404, "functions"], [405, "functions"], [409, "functions"], [426, "functions"], [431, "functions"], [432, "functions"], [436, "functions"], [444, "functions"], [448, "functions"], [450, "functions"], [451, "functions"], [470, "functions"], [472, "functions"], [473, "functions"], [474, "functions"], [476, "functions"], [496, "functions"], [497, "functions"], [499, "functions"], [540, "functions"], [542, "functions"], [569, "functions"], [574, "functions"], [576, "functions"], [583, "functions"], [585, "functions"], [587, "functions"], [588, "functions"], [589, "functions"], [590, "functions"], [597, "functions"], [599, "functions"], [602, "functions"], [603, "functions"], [604, "functions"], [610, "functions"], [611, "functions"], [612, "functions"], [615, "functions"], [616, "functions"], [620, "functions"], [621, "functions"], [624, "functions"], [625, "functions"], [627, "functions"], [628, "functions"], [629, "functions"], [631, "functions"], [632, "functions"]], "neural_compressor.adaptor": [[2, "module-neural_compressor.adaptor"]], "Subpackages": [[2, "subpackages"], [17, "subpackages"], [87, "subpackages"], [111, "subpackages"], [112, "subpackages"], [114, "subpackages"], [159, "subpackages"], [201, "subpackages"], [204, "subpackages"], [237, "subpackages"], [262, "subpackages"], [280, "subpackages"], [305, "subpackages"], [316, "subpackages"], [340, "subpackages"], [358, "subpackages"], [369, "subpackages"], [440, "subpackages"], [516, "subpackages"], [535, "subpackages"], [536, "subpackages"], [538, "subpackages"], [581, "subpackages"]], "Submodules": [[2, "submodules"], [12, "submodules"], [17, "submodules"], [29, "submodules"], [52, "submodules"], [76, "submodules"], [87, "submodules"], [95, "submodules"], [101, "submodules"], [106, "submodules"], [111, "submodules"], [112, "submodules"], [114, "submodules"], [117, "submodules"], [130, "submodules"], [145, "submodules"], [152, "submodules"], [159, "submodules"], [160, "submodules"], [180, "submodules"], [189, "submodules"], [194, "submodules"], [197, "submodules"], [201, "submodules"], [204, "submodules"], [206, "submodules"], [210, "submodules"], [217, "submodules"], [228, "submodules"], [234, "submodules"], [238, "submodules"], [245, "submodules"], [257, "submodules"], [261, "submodules"], [265, "submodules"], [272, "submodules"], [281, "submodules"], [288, "submodules"], [300, "submodules"], [304, "submodules"], [307, "submodules"], [311, "submodules"], [316, "submodules"], [323, "submodules"], [329, "submodules"], [335, "submodules"], [341, "submodules"], [345, "submodules"], [358, "submodules"], [364, "submodules"], [369, "submodules"], [376, "submodules"], [380, "submodules"], [394, "submodules"], [407, "submodules"], [412, "submodules"], [414, "submodules"], [419, "submodules"], [422, "submodules"], [424, "submodules"], [429, "submodules"], [440, "submodules"], [446, "submodules"], [452, "submodules"], [456, "submodules"], [458, "submodules"], [481, "submodules"], [505, "submodules"], [516, "submodules"], [524, "submodules"], [530, "submodules"], [535, "submodules"], [536, "submodules"], [538, "submodules"], [541, "submodules"], [554, "submodules"], [566, "submodules"], [572, "submodules"], [582, "submodules"], [594, "submodules"], [600, "submodules"], [613, "submodules"], [625, "submodules"]], "Package Contents": [[2, "package-contents"], [29, "package-contents"], [180, "package-contents"], [186, "package-contents"], [204, "package-contents"], [210, "package-contents"], [217, "package-contents"], [245, "package-contents"], [257, "package-contents"], [261, "package-contents"], [262, "package-contents"], [265, "package-contents"], [272, "package-contents"], [288, "package-contents"], [300, "package-contents"], [304, "package-contents"], [305, "package-contents"], [307, "package-contents"], [316, "package-contents"], [323, "package-contents"], [335, "package-contents"], [340, "package-contents"], [341, "package-contents"], [358, "package-contents"], [376, "package-contents"], [380, "package-contents"], [389, "package-contents"], [391, "package-contents"], [394, "package-contents"], [400, "package-contents"], [405, "package-contents"], [407, "package-contents"], [440, "package-contents"], [625, "package-contents"]], "neural_compressor.adaptor.keras": [[3, "module-neural_compressor.adaptor.keras"]], "neural_compressor.adaptor.keras_utils.conv2d": [[4, "module-neural_compressor.adaptor.keras_utils.conv2d"]], "neural_compressor.adaptor.keras_utils.dense": [[5, "module-neural_compressor.adaptor.keras_utils.dense"]], "neural_compressor.adaptor.keras_utils.depthwise_conv2d": [[6, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"]], "neural_compressor.adaptor.keras_utils": [[7, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.pool2d": [[8, "module-neural_compressor.adaptor.keras_utils.pool2d"]], "neural_compressor.adaptor.keras_utils.quantizer": [[9, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "neural_compressor.adaptor.keras_utils.separable_conv2d": [[10, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"]], "neural_compressor.adaptor.mxnet": [[11, "module-neural_compressor.adaptor.mxnet"]], "neural_compressor.adaptor.mxnet_utils": [[12, "module-neural_compressor.adaptor.mxnet_utils"]], "neural_compressor.adaptor.mxnet_utils.util": [[13, "module-neural_compressor.adaptor.mxnet_utils.util"]], "neural_compressor.adaptor.onnxrt": [[14, "module-neural_compressor.adaptor.onnxrt"]], "neural_compressor.adaptor.ox_utils.calibration": [[15, "module-neural_compressor.adaptor.ox_utils.calibration"]], "neural_compressor.adaptor.ox_utils.calibrator": [[16, "module-neural_compressor.adaptor.ox_utils.calibrator"]], "neural_compressor.adaptor.ox_utils": [[17, "module-neural_compressor.adaptor.ox_utils"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[18, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[19, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[20, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[21, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[22, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[23, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[24, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[25, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[26, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[27, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[28, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[29, "module-neural_compressor.adaptor.ox_utils.operators"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[30, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[31, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[32, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "neural_compressor.adaptor.ox_utils.operators.norm": [[33, "module-neural_compressor.adaptor.ox_utils.operators.norm"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[34, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[35, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[36, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "neural_compressor.adaptor.ox_utils.operators.reduce": [[37, "module-neural_compressor.adaptor.ox_utils.operators.reduce"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[38, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "neural_compressor.adaptor.ox_utils.operators.split": [[39, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "neural_compressor.adaptor.ox_utils.operators.unary_op": [[40, "module-neural_compressor.adaptor.ox_utils.operators.unary_op"]], "neural_compressor.adaptor.ox_utils.quantizer": [[41, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "neural_compressor.adaptor.ox_utils.smooth_quant": [[42, "module-neural_compressor.adaptor.ox_utils.smooth_quant"]], "neural_compressor.adaptor.ox_utils.util": [[43, "module-neural_compressor.adaptor.ox_utils.util"]], "neural_compressor.adaptor.ox_utils.weight_only": [[44, "module-neural_compressor.adaptor.ox_utils.weight_only"]], "neural_compressor.adaptor.pytorch": [[45, "module-neural_compressor.adaptor.pytorch"]], "neural_compressor.adaptor.query": [[46, "module-neural_compressor.adaptor.query"]], "neural_compressor.adaptor.tensorflow": [[47, "module-neural_compressor.adaptor.tensorflow"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[48, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[49, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer": [[51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[109, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_util": [[110, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "neural_compressor.adaptor.tf_utils": [[111, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[112, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[138, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[139, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "neural_compressor.adaptor.tf_utils.smooth_quant_calibration": [[140, "module-neural_compressor.adaptor.tf_utils.smooth_quant_calibration"]], "neural_compressor.adaptor.tf_utils.smooth_quant_scaler": [[141, "module-neural_compressor.adaptor.tf_utils.smooth_quant_scaler"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[142, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[143, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[144, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[145, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[146, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[147, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.util": [[148, "module-neural_compressor.adaptor.tf_utils.util"]], "neural_compressor.adaptor.torch_utils.auto_round": [[149, "module-neural_compressor.adaptor.torch_utils.auto_round"]], "neural_compressor.adaptor.torch_utils.autoround.autoround": [[150, "module-neural_compressor.adaptor.torch_utils.autoround.autoround"]], "neural_compressor.adaptor.torch_utils.autoround.export": [[151, "module-neural_compressor.adaptor.torch_utils.autoround.export"]], "neural_compressor.adaptor.torch_utils.autoround": [[152, "module-neural_compressor.adaptor.torch_utils.autoround"]], "neural_compressor.adaptor.torch_utils.autoround.model_wrapper": [[153, "module-neural_compressor.adaptor.torch_utils.autoround.model_wrapper"]], "neural_compressor.adaptor.torch_utils.autoround.sign_sgd": [[154, "module-neural_compressor.adaptor.torch_utils.autoround.sign_sgd"]], "neural_compressor.adaptor.torch_utils.awq": [[155, "module-neural_compressor.adaptor.torch_utils.awq"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[156, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "neural_compressor.adaptor.torch_utils.gptq": [[157, "module-neural_compressor.adaptor.torch_utils.gptq"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[158, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[159, "module-neural_compressor.adaptor.torch_utils"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant": [[160, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle": [[161, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize": [[162, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load": [[163, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils": [[164, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.utils"]], "neural_compressor.adaptor.torch_utils.mixed_precision": [[165, "module-neural_compressor.adaptor.torch_utils.mixed_precision"]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[166, "module-neural_compressor.adaptor.torch_utils.model_wrapper"]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[167, "module-neural_compressor.adaptor.torch_utils.pattern_detector"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[168, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "neural_compressor.adaptor.torch_utils.teq": [[169, "module-neural_compressor.adaptor.torch_utils.teq"]], "neural_compressor.adaptor.torch_utils.util": [[170, "module-neural_compressor.adaptor.torch_utils.util"]], "}": [[170, "id3"]], "neural_compressor.adaptor.torch_utils.waq.auto_alpha": [[171, "module-neural_compressor.adaptor.torch_utils.waq.auto_alpha"]], "neural_compressor.adaptor.torch_utils.waq.calibration": [[172, "module-neural_compressor.adaptor.torch_utils.waq.calibration"]], "neural_compressor.adaptor.torch_utils.waq.graph_trace": [[173, "module-neural_compressor.adaptor.torch_utils.waq.graph_trace"]], "neural_compressor.adaptor.torch_utils.waq": [[174, "module-neural_compressor.adaptor.torch_utils.waq"]], "neural_compressor.adaptor.torch_utils.waq.smooth_quant": [[175, "module-neural_compressor.adaptor.torch_utils.waq.smooth_quant"]], "neural_compressor.adaptor.torch_utils.waq.utils": [[176, "module-neural_compressor.adaptor.torch_utils.waq.utils"]], "neural_compressor.adaptor.torch_utils.weight_only": [[177, "module-neural_compressor.adaptor.torch_utils.weight_only"]], "neural_compressor.algorithm.algorithm": [[178, "module-neural_compressor.algorithm.algorithm"]], "neural_compressor.algorithm.fast_bias_correction": [[179, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[180, "module-neural_compressor.algorithm"]], "neural_compressor.algorithm.smooth_quant": [[181, "module-neural_compressor.algorithm.smooth_quant"]], "neural_compressor.algorithm.weight_correction": [[182, "module-neural_compressor.algorithm.weight_correction"]], "neural_compressor.benchmark": [[183, "module-neural_compressor.benchmark"]], "neural_compressor.common.base_config": [[184, "module-neural_compressor.common.base_config"]], "Attributes": [[184, "attributes"], [185, "attributes"], [186, "attributes"], [190, "attributes"], [245, "attributes"], [253, "attributes"], [262, "attributes"], [296, "attributes"], [305, "attributes"], [316, "attributes"], [340, "attributes"], [380, "attributes"], [404, "attributes"], [407, "attributes"], [409, "attributes"], [451, "attributes"], [592, "attributes"], [604, "attributes"], [625, "attributes"]], "neural_compressor.common.base_tuning": [[185, "module-neural_compressor.common.base_tuning"]], "neural_compressor.common": [[186, "module-neural_compressor.common"]], "neural_compressor.common.tuning_param": [[187, "module-neural_compressor.common.tuning_param"]], "neural_compressor.common.utils.constants": [[188, "module-neural_compressor.common.utils.constants"]], "neural_compressor.common.utils": [[189, "module-neural_compressor.common.utils"]], "neural_compressor.common.utils.logger": [[190, "module-neural_compressor.common.utils.logger"]], "neural_compressor.common.utils.utility": [[191, "module-neural_compressor.common.utils.utility"]], "neural_compressor.compression.callbacks": [[192, "module-neural_compressor.compression.callbacks"]], "neural_compressor.compression.distillation.criterions": [[193, "module-neural_compressor.compression.distillation.criterions"]], "neural_compressor.compression.distillation": [[194, "module-neural_compressor.compression.distillation"]], "neural_compressor.compression.distillation.optimizers": [[195, "module-neural_compressor.compression.distillation.optimizers"]], "neural_compressor.compression.distillation.utility": [[196, "module-neural_compressor.compression.distillation.utility"]], "neural_compressor.compression.hpo": [[197, "module-neural_compressor.compression.hpo"]], "neural_compressor.compression.hpo.sa_optimizer": [[198, "module-neural_compressor.compression.hpo.sa_optimizer"]], "neural_compressor.compression.hpo.search_algorithms": [[199, "module-neural_compressor.compression.hpo.search_algorithms"]], "neural_compressor.compression.hpo.search_space": [[200, "module-neural_compressor.compression.hpo.search_space"]], "neural_compressor.compression": [[201, "module-neural_compressor.compression"]], "neural_compressor.compression.pruner.criteria": [[202, "module-neural_compressor.compression.pruner.criteria"]], "neural_compressor.compression.pruner.dsnot": [[203, "module-neural_compressor.compression.pruner.dsnot"]], "neural_compressor.compression.pruner": [[204, "module-neural_compressor.compression.pruner"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[205, "module-neural_compressor.compression.pruner.model_slim.auto_slim"]], "neural_compressor.compression.pruner.model_slim": [[206, "module-neural_compressor.compression.pruner.model_slim"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[207, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[208, "module-neural_compressor.compression.pruner.model_slim.weight_slim"]], "neural_compressor.compression.pruner.patterns.base": [[209, "module-neural_compressor.compression.pruner.patterns.base"]], "neural_compressor.compression.pruner.patterns": [[210, "module-neural_compressor.compression.pruner.patterns"]], "neural_compressor.compression.pruner.patterns.mha": [[211, "module-neural_compressor.compression.pruner.patterns.mha"]], "neural_compressor.compression.pruner.patterns.ninm": [[212, "module-neural_compressor.compression.pruner.patterns.ninm"]], "neural_compressor.compression.pruner.patterns.nxm": [[213, "module-neural_compressor.compression.pruner.patterns.nxm"]], "neural_compressor.compression.pruner.pruners.base": [[214, "module-neural_compressor.compression.pruner.pruners.base"]], "neural_compressor.compression.pruner.pruners.basic": [[215, "module-neural_compressor.compression.pruner.pruners.basic"]], "neural_compressor.compression.pruner.pruners.block_mask": [[216, "module-neural_compressor.compression.pruner.pruners.block_mask"]], "neural_compressor.compression.pruner.pruners": [[217, "module-neural_compressor.compression.pruner.pruners"]], "neural_compressor.compression.pruner.pruners.mha": [[218, "module-neural_compressor.compression.pruner.pruners.mha"]], "neural_compressor.compression.pruner.pruners.pattern_lock": [[219, "module-neural_compressor.compression.pruner.pruners.pattern_lock"]], "neural_compressor.compression.pruner.pruners.progressive": [[220, "module-neural_compressor.compression.pruner.pruners.progressive"]], "neural_compressor.compression.pruner.pruners.retrain_free": [[221, "module-neural_compressor.compression.pruner.pruners.retrain_free"]], "neural_compressor.compression.pruner.pruners.sparse_gpt": [[222, "module-neural_compressor.compression.pruner.pruners.sparse_gpt"]], "neural_compressor.compression.pruner.pruning": [[223, "module-neural_compressor.compression.pruner.pruning"]], "neural_compressor.compression.pruner.regs": [[224, "module-neural_compressor.compression.pruner.regs"]], "neural_compressor.compression.pruner.schedulers": [[225, "module-neural_compressor.compression.pruner.schedulers"]], "neural_compressor.compression.pruner.tf_criteria": [[226, "module-neural_compressor.compression.pruner.tf_criteria"]], "neural_compressor.compression.pruner.utils": [[227, "module-neural_compressor.compression.pruner.utils"]], "neural_compressor.compression.pruner.wanda": [[228, "module-neural_compressor.compression.pruner.wanda"]], "neural_compressor.compression.pruner.wanda.prune": [[229, "module-neural_compressor.compression.pruner.wanda.prune"]], "neural_compressor.compression.pruner.wanda.utils": [[230, "module-neural_compressor.compression.pruner.wanda.utils"]], "neural_compressor.compression.pruner.wanda.wrapper": [[231, "module-neural_compressor.compression.pruner.wanda.wrapper"]], "neural_compressor.conf.config": [[232, "module-neural_compressor.conf.config"]], "neural_compressor.conf.dotdict": [[233, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[234, "module-neural_compressor.conf"]], "neural_compressor.conf.pythonic_config": [[235, "module-neural_compressor.conf.pythonic_config"]], "neural_compressor.config": [[236, "module-neural_compressor.config"]], "neural_compressor.contrib": [[237, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[238, "module-neural_compressor.contrib.strategy"]], "neural_compressor.contrib.strategy.sigopt": [[239, "module-neural_compressor.contrib.strategy.sigopt"]], "neural_compressor.contrib.strategy.tpe": [[240, "module-neural_compressor.contrib.strategy.tpe"]], "neural_compressor.data.dataloaders.base_dataloader": [[241, "module-neural_compressor.data.dataloaders.base_dataloader"]], "neural_compressor.data.dataloaders.dataloader": [[242, "module-neural_compressor.data.dataloaders.dataloader"]], "neural_compressor.data.dataloaders.default_dataloader": [[243, "module-neural_compressor.data.dataloaders.default_dataloader"]], "neural_compressor.data.dataloaders.fetcher": [[244, "module-neural_compressor.data.dataloaders.fetcher"]], "neural_compressor.data.dataloaders": [[245, "module-neural_compressor.data.dataloaders"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[246, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[247, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[248, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "neural_compressor.data.dataloaders.sampler": [[249, "module-neural_compressor.data.dataloaders.sampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[250, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.data.datasets.bert_dataset": [[251, "module-neural_compressor.data.datasets.bert_dataset"]], "neural_compressor.data.datasets.coco_dataset": [[252, "module-neural_compressor.data.datasets.coco_dataset"]], "neural_compressor.data.datasets.dataset": [[253, "module-neural_compressor.data.datasets.dataset"]], "neural_compressor.data.datasets.dummy_dataset": [[254, "module-neural_compressor.data.datasets.dummy_dataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[255, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "neural_compressor.data.datasets.imagenet_dataset": [[256, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[257, "module-neural_compressor.data.datasets"]], "neural_compressor.data.datasets.style_transfer_dataset": [[258, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "neural_compressor.data.filters.coco_filter": [[259, "module-neural_compressor.data.filters.coco_filter"]], "neural_compressor.data.filters.filter": [[260, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[261, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[262, "module-neural_compressor.data"]], "neural_compressor.data.transforms.coco_transform": [[263, "module-neural_compressor.data.transforms.coco_transform"]], "neural_compressor.data.transforms.imagenet_transform": [[264, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[265, "module-neural_compressor.data.transforms"]], "neural_compressor.data.transforms.postprocess": [[266, "module-neural_compressor.data.transforms.postprocess"]], "neural_compressor.data.transforms.tokenization": [[267, "module-neural_compressor.data.transforms.tokenization"]], "neural_compressor.data.transforms.transform": [[268, "module-neural_compressor.data.transforms.transform"]], "neural_compressor.experimental.benchmark": [[269, "module-neural_compressor.experimental.benchmark"]], "neural_compressor.experimental.common.criterion": [[270, "module-neural_compressor.experimental.common.criterion"]], "neural_compressor.experimental.common.dataloader": [[271, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[272, "module-neural_compressor.experimental.common"]], "neural_compressor.experimental.common.metric": [[273, "module-neural_compressor.experimental.common.metric"]], "neural_compressor.experimental.common.model": [[274, "module-neural_compressor.experimental.common.model"]], "neural_compressor.experimental.common.optimizer": [[275, "module-neural_compressor.experimental.common.optimizer"]], "neural_compressor.experimental.common.postprocess": [[276, "module-neural_compressor.experimental.common.postprocess"]], "neural_compressor.experimental.common.torch_utils": [[277, "module-neural_compressor.experimental.common.torch_utils"]], "neural_compressor.experimental.component": [[278, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.compression": [[279, "module-neural_compressor.experimental.compression"]], "neural_compressor.experimental.contrib": [[280, "module-neural_compressor.experimental.contrib"]], "neural_compressor.experimental.contrib.strategy": [[281, "module-neural_compressor.experimental.contrib.strategy"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[282, "module-neural_compressor.experimental.contrib.strategy.sigopt"]], "neural_compressor.experimental.contrib.strategy.tpe": [[283, "module-neural_compressor.experimental.contrib.strategy.tpe"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[284, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[285, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[286, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[287, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[288, "module-neural_compressor.experimental.data.dataloaders"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[289, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[290, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[291, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[292, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[293, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[294, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[295, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "neural_compressor.experimental.data.datasets.dataset": [[296, "module-neural_compressor.experimental.data.datasets.dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[297, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[298, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[299, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[300, "module-neural_compressor.experimental.data.datasets"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[301, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "neural_compressor.experimental.data.filters.coco_filter": [[302, "module-neural_compressor.experimental.data.filters.coco_filter"]], "neural_compressor.experimental.data.filters.filter": [[303, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[304, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[305, "module-neural_compressor.experimental.data"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[306, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[307, "module-neural_compressor.experimental.data.transforms"]], "neural_compressor.experimental.data.transforms.tokenization": [[308, "module-neural_compressor.experimental.data.transforms.tokenization"]], "neural_compressor.experimental.data.transforms.transform": [[309, "module-neural_compressor.experimental.data.transforms.transform"]], "neural_compressor.experimental.distillation": [[310, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[311, "module-neural_compressor.experimental.export"]], "neural_compressor.experimental.export.qlinear2qdq": [[312, "module-neural_compressor.experimental.export.qlinear2qdq"]], "neural_compressor.experimental.export.tf2onnx": [[313, "module-neural_compressor.experimental.export.tf2onnx"]], "neural_compressor.experimental.export.torch2onnx": [[314, "module-neural_compressor.experimental.export.torch2onnx"]], "neural_compressor.experimental.graph_optimization": [[315, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[316, "module-neural_compressor.experimental"]], "neural_compressor.experimental.metric.bleu": [[317, "module-neural_compressor.experimental.metric.bleu"]], "neural_compressor.experimental.metric.bleu_util": [[318, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[319, "module-neural_compressor.experimental.metric.coco_label_map"]], "neural_compressor.experimental.metric.coco_tools": [[320, "module-neural_compressor.experimental.metric.coco_tools"]], "neural_compressor.experimental.metric.evaluate_squad": [[321, "module-neural_compressor.experimental.metric.evaluate_squad"]], "neural_compressor.experimental.metric.f1": [[322, "module-neural_compressor.experimental.metric.f1"]], "neural_compressor.experimental.metric": [[323, "module-neural_compressor.experimental.metric"]], "neural_compressor.experimental.metric.metric": [[324, "module-neural_compressor.experimental.metric.metric"]], "neural_compressor.experimental.mixed_precision": [[325, "module-neural_compressor.experimental.mixed_precision"]], "neural_compressor.experimental.model_conversion": [[326, "module-neural_compressor.experimental.model_conversion"]], "neural_compressor.experimental.nas.basic_nas": [[327, "module-neural_compressor.experimental.nas.basic_nas"]], "neural_compressor.experimental.nas.dynas": [[328, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas": [[329, "module-neural_compressor.experimental.nas"]], "neural_compressor.experimental.nas.nas": [[330, "module-neural_compressor.experimental.nas.nas"]], "neural_compressor.experimental.nas.nas_utils": [[331, "module-neural_compressor.experimental.nas.nas_utils"]], "neural_compressor.experimental.nas.search_algorithms": [[332, "module-neural_compressor.experimental.nas.search_algorithms"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[333, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[334, "module-neural_compressor.experimental.pruner_legacy.group_lasso"]], "neural_compressor.experimental.pruner_legacy": [[335, "module-neural_compressor.experimental.pruner_legacy"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[336, "module-neural_compressor.experimental.pruner_legacy.magnitude"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[337, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"]], "neural_compressor.experimental.pruner_legacy.pruner": [[338, "module-neural_compressor.experimental.pruner_legacy.pruner"]], "neural_compressor.experimental.pruning": [[339, "module-neural_compressor.experimental.pruning"]], "neural_compressor.experimental.pruning_recipes": [[340, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[341, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[342, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[343, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "neural_compressor.experimental.pruning_v2": [[344, "module-neural_compressor.experimental.pruning_v2"]], "neural_compressor.experimental.pytorch_pruner": [[345, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[346, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[347, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[348, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[349, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[350, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[351, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "neural_compressor.experimental.quantization": [[352, "module-neural_compressor.experimental.quantization"]], "neural_compressor.experimental.scheduler": [[353, "module-neural_compressor.experimental.scheduler"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[354, "module-neural_compressor.experimental.strategy.auto_mixed_precision"]], "neural_compressor.experimental.strategy.basic": [[355, "module-neural_compressor.experimental.strategy.basic"]], "neural_compressor.experimental.strategy.bayesian": [[356, "module-neural_compressor.experimental.strategy.bayesian"]], "neural_compressor.experimental.strategy.exhaustive": [[357, "module-neural_compressor.experimental.strategy.exhaustive"]], "neural_compressor.experimental.strategy": [[358, "module-neural_compressor.experimental.strategy"]], "neural_compressor.experimental.strategy.mse": [[359, "module-neural_compressor.experimental.strategy.mse"]], "neural_compressor.experimental.strategy.mse_v2": [[360, "module-neural_compressor.experimental.strategy.mse_v2"]], "neural_compressor.experimental.strategy.random": [[361, "module-neural_compressor.experimental.strategy.random"]], "neural_compressor.experimental.strategy.strategy": [[362, "module-neural_compressor.experimental.strategy.strategy"]], "neural_compressor.experimental.strategy.utils.constant": [[363, "module-neural_compressor.experimental.strategy.utils.constant"]], "neural_compressor.experimental.strategy.utils": [[364, "module-neural_compressor.experimental.strategy.utils"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[365, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[366, "module-neural_compressor.experimental.strategy.utils.tuning_space"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[367, "module-neural_compressor.experimental.strategy.utils.tuning_structs"]], "neural_compressor.experimental.strategy.utils.utility": [[368, "module-neural_compressor.experimental.strategy.utils.utility"]], "neural_compressor": [[369, "module-neural_compressor"]], "neural_compressor.metric.bleu": [[370, "module-neural_compressor.metric.bleu"]], "neural_compressor.metric.bleu_util": [[371, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[372, "module-neural_compressor.metric.coco_label_map"]], "neural_compressor.metric.coco_tools": [[373, "module-neural_compressor.metric.coco_tools"]], "neural_compressor.metric.evaluate_squad": [[374, "module-neural_compressor.metric.evaluate_squad"]], "neural_compressor.metric.f1": [[375, "module-neural_compressor.metric.f1"]], "neural_compressor.metric": [[376, "module-neural_compressor.metric"]], "neural_compressor.metric.metric": [[377, "module-neural_compressor.metric.metric"]], "neural_compressor.mix_precision": [[378, "module-neural_compressor.mix_precision"]], "neural_compressor.model.base_model": [[379, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[380, "module-neural_compressor.model"]], "neural_compressor.model.keras_model": [[381, "module-neural_compressor.model.keras_model"]], "neural_compressor.model.model": [[382, "module-neural_compressor.model.model"]], "neural_compressor.model.mxnet_model": [[383, "module-neural_compressor.model.mxnet_model"]], "neural_compressor.model.nets_factory": [[384, "module-neural_compressor.model.nets_factory"]], "neural_compressor.model.onnx_model": [[385, "module-neural_compressor.model.onnx_model"]], "neural_compressor.model.tensorflow_model": [[386, "module-neural_compressor.model.tensorflow_model"]], "neural_compressor.model.torch_model": [[387, "module-neural_compressor.model.torch_model"]], "neural_compressor.objective": [[388, "module-neural_compressor.objective"]], "neural_compressor.onnxrt.algorithms": [[389, "module-neural_compressor.onnxrt.algorithms"]], "neural_compressor.onnxrt.algorithms.layer_wise.core": [[390, "module-neural_compressor.onnxrt.algorithms.layer_wise.core"]], "neural_compressor.onnxrt.algorithms.layer_wise": [[391, "module-neural_compressor.onnxrt.algorithms.layer_wise"]], "neural_compressor.onnxrt.algorithms.smoother.calibrator": [[392, "module-neural_compressor.onnxrt.algorithms.smoother.calibrator"]], "neural_compressor.onnxrt.algorithms.smoother.core": [[393, "module-neural_compressor.onnxrt.algorithms.smoother.core"]], "neural_compressor.onnxrt.algorithms.smoother": [[394, "module-neural_compressor.onnxrt.algorithms.smoother"]], "neural_compressor.onnxrt.algorithms.weight_only.awq": [[395, "module-neural_compressor.onnxrt.algorithms.weight_only.awq"]], "neural_compressor.onnxrt.algorithms.weight_only.gptq": [[396, "module-neural_compressor.onnxrt.algorithms.weight_only.gptq"]], "neural_compressor.onnxrt.algorithms.weight_only": [[397, "module-neural_compressor.onnxrt.algorithms.weight_only"]], "neural_compressor.onnxrt.algorithms.weight_only.rtn": [[398, "module-neural_compressor.onnxrt.algorithms.weight_only.rtn"]], "neural_compressor.onnxrt.algorithms.weight_only.utility": [[399, "module-neural_compressor.onnxrt.algorithms.weight_only.utility"]], "neural_compressor.onnxrt": [[400, "module-neural_compressor.onnxrt"]], "neural_compressor.onnxrt.quantization.algorithm_entry": [[401, "module-neural_compressor.onnxrt.quantization.algorithm_entry"]], "neural_compressor.onnxrt.quantization.autotune": [[402, "module-neural_compressor.onnxrt.quantization.autotune"]], "neural_compressor.onnxrt.quantization.calibrate": [[403, "module-neural_compressor.onnxrt.quantization.calibrate"]], "neural_compressor.onnxrt.quantization.config": [[404, "module-neural_compressor.onnxrt.quantization.config"]], "neural_compressor.onnxrt.quantization": [[405, "module-neural_compressor.onnxrt.quantization"]], "neural_compressor.onnxrt.quantization.quantize": [[406, "module-neural_compressor.onnxrt.quantization.quantize"]], "neural_compressor.onnxrt.utils": [[407, "module-neural_compressor.onnxrt.utils"]], "neural_compressor.onnxrt.utils.onnx_model": [[408, "module-neural_compressor.onnxrt.utils.onnx_model"]], "neural_compressor.onnxrt.utils.utility": [[409, "module-neural_compressor.onnxrt.utils.utility"]], "neural_compressor.profiling": [[410, "module-neural_compressor.profiling"]], "neural_compressor.profiling.parser.factory": [[411, "module-neural_compressor.profiling.parser.factory"]], "neural_compressor.profiling.parser": [[412, "module-neural_compressor.profiling.parser"]], "neural_compressor.profiling.parser.onnx_parser.factory": [[413, "module-neural_compressor.profiling.parser.onnx_parser.factory"]], "neural_compressor.profiling.parser.onnx_parser": [[414, "module-neural_compressor.profiling.parser.onnx_parser"]], "neural_compressor.profiling.parser.onnx_parser.parser": [[415, "module-neural_compressor.profiling.parser.onnx_parser.parser"]], "neural_compressor.profiling.parser.parser": [[416, "module-neural_compressor.profiling.parser.parser"]], "neural_compressor.profiling.parser.result": [[417, "module-neural_compressor.profiling.parser.result"]], "neural_compressor.profiling.parser.tensorflow_parser.factory": [[418, "module-neural_compressor.profiling.parser.tensorflow_parser.factory"]], "neural_compressor.profiling.parser.tensorflow_parser": [[419, "module-neural_compressor.profiling.parser.tensorflow_parser"]], "neural_compressor.profiling.parser.tensorflow_parser.parser": [[420, "module-neural_compressor.profiling.parser.tensorflow_parser.parser"]], "neural_compressor.profiling.profiler.factory": [[421, "module-neural_compressor.profiling.profiler.factory"]], "neural_compressor.profiling.profiler": [[422, "module-neural_compressor.profiling.profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.factory": [[423, "module-neural_compressor.profiling.profiler.onnxrt_profiler.factory"]], "neural_compressor.profiling.profiler.onnxrt_profiler": [[424, "module-neural_compressor.profiling.profiler.onnxrt_profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.profiler": [[425, "module-neural_compressor.profiling.profiler.onnxrt_profiler.profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.utils": [[426, "module-neural_compressor.profiling.profiler.onnxrt_profiler.utils"]], "neural_compressor.profiling.profiler.profiler": [[427, "module-neural_compressor.profiling.profiler.profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.factory": [[428, "module-neural_compressor.profiling.profiler.tensorflow_profiler.factory"]], "neural_compressor.profiling.profiler.tensorflow_profiler": [[429, "module-neural_compressor.profiling.profiler.tensorflow_profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.profiler": [[430, "module-neural_compressor.profiling.profiler.tensorflow_profiler.profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.utils": [[431, "module-neural_compressor.profiling.profiler.tensorflow_profiler.utils"]], "neural_compressor.quantization": [[432, "module-neural_compressor.quantization"]], "neural_compressor.strategy.auto": [[433, "module-neural_compressor.strategy.auto"]], "neural_compressor.strategy.auto_mixed_precision": [[434, "module-neural_compressor.strategy.auto_mixed_precision"]], "neural_compressor.strategy.basic": [[435, "module-neural_compressor.strategy.basic"]], "neural_compressor.strategy.bayesian": [[436, "module-neural_compressor.strategy.bayesian"]], "neural_compressor.strategy.conservative": [[437, "module-neural_compressor.strategy.conservative"]], "neural_compressor.strategy.exhaustive": [[438, "module-neural_compressor.strategy.exhaustive"]], "neural_compressor.strategy.hawq_v2": [[439, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[440, "module-neural_compressor.strategy"]], "neural_compressor.strategy.mse": [[441, "module-neural_compressor.strategy.mse"]], "neural_compressor.strategy.mse_v2": [[442, "module-neural_compressor.strategy.mse_v2"]], "neural_compressor.strategy.random": [[443, "module-neural_compressor.strategy.random"]], "neural_compressor.strategy.strategy": [[444, "module-neural_compressor.strategy.strategy"]], "neural_compressor.strategy.utils.constant": [[445, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[446, "module-neural_compressor.strategy.utils"]], "neural_compressor.strategy.utils.tuning_sampler": [[447, "module-neural_compressor.strategy.utils.tuning_sampler"]], "neural_compressor.strategy.utils.tuning_space": [[448, "module-neural_compressor.strategy.utils.tuning_space"]], "neural_compressor.strategy.utils.tuning_structs": [[449, "module-neural_compressor.strategy.utils.tuning_structs"]], "neural_compressor.strategy.utils.utility": [[450, "module-neural_compressor.strategy.utils.utility"]], "neural_compressor.template.api_doc_example": [[451, "module-neural_compressor.template.api_doc_example"]], "neural_compressor.template": [[452, "module-neural_compressor.template"]], "neural_compressor.tensorflow.algorithms": [[453, "module-neural_compressor.tensorflow.algorithms"]], "neural_compressor.tensorflow.algorithms.smoother.calibration": [[454, "module-neural_compressor.tensorflow.algorithms.smoother.calibration"]], "neural_compressor.tensorflow.algorithms.smoother.core": [[455, "module-neural_compressor.tensorflow.algorithms.smoother.core"]], "neural_compressor.tensorflow.algorithms.smoother": [[456, "module-neural_compressor.tensorflow.algorithms.smoother"]], "neural_compressor.tensorflow.algorithms.smoother.scaler": [[457, "module-neural_compressor.tensorflow.algorithms.smoother.scaler"]], "neural_compressor.tensorflow.algorithms.static_quant": [[458, "module-neural_compressor.tensorflow.algorithms.static_quant"]], "neural_compressor.tensorflow.algorithms.static_quant.keras": [[459, "module-neural_compressor.tensorflow.algorithms.static_quant.keras"]], "neural_compressor.tensorflow.algorithms.static_quant.tensorflow": [[460, "module-neural_compressor.tensorflow.algorithms.static_quant.tensorflow"]], "neural_compressor.tensorflow": [[461, "module-neural_compressor.tensorflow"]], "neural_compressor.tensorflow.keras": [[462, "module-neural_compressor.tensorflow.keras"]], "neural_compressor.tensorflow.keras.layers.conv2d": [[463, "module-neural_compressor.tensorflow.keras.layers.conv2d"]], "neural_compressor.tensorflow.keras.layers.dense": [[464, "module-neural_compressor.tensorflow.keras.layers.dense"]], "neural_compressor.tensorflow.keras.layers.depthwise_conv2d": [[465, "module-neural_compressor.tensorflow.keras.layers.depthwise_conv2d"]], "neural_compressor.tensorflow.keras.layers": [[466, "module-neural_compressor.tensorflow.keras.layers"]], "neural_compressor.tensorflow.keras.layers.pool2d": [[467, "module-neural_compressor.tensorflow.keras.layers.pool2d"]], "neural_compressor.tensorflow.keras.layers.quantizer": [[468, "module-neural_compressor.tensorflow.keras.layers.quantizer"]], "neural_compressor.tensorflow.keras.layers.separable_conv2d": [[469, "module-neural_compressor.tensorflow.keras.layers.separable_conv2d"]], "neural_compressor.tensorflow.keras.quantization.config": [[470, "module-neural_compressor.tensorflow.keras.quantization.config"]], "neural_compressor.tensorflow.keras.quantization": [[471, "module-neural_compressor.tensorflow.keras.quantization"]], "neural_compressor.tensorflow.quantization.algorithm_entry": [[472, "module-neural_compressor.tensorflow.quantization.algorithm_entry"]], "neural_compressor.tensorflow.quantization.autotune": [[473, "module-neural_compressor.tensorflow.quantization.autotune"]], "neural_compressor.tensorflow.quantization.config": [[474, "module-neural_compressor.tensorflow.quantization.config"]], "neural_compressor.tensorflow.quantization": [[475, "module-neural_compressor.tensorflow.quantization"]], "neural_compressor.tensorflow.quantization.quantize": [[476, "module-neural_compressor.tensorflow.quantization.quantize"]], "neural_compressor.tensorflow.quantization.utils.graph_converter": [[477, "module-neural_compressor.tensorflow.quantization.utils.graph_converter"]], "neural_compressor.tensorflow.quantization.utils.graph_converter_without_calib": [[478, "module-neural_compressor.tensorflow.quantization.utils.graph_converter_without_calib"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.bf16_convert": [[479, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.dequantize_cast_optimizer": [[480, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.dequantize_cast_optimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16": [[481, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd": [[482, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout": [[483, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu": [[484, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random": [[485, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const": [[486, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction": [[487, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd": [[488, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer": [[489, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape": [[490, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm": [[491, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant": [[492, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add": [[493, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul": [[494, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math": [[495, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn": [[496, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in": [[497, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu": [[498, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm": [[499, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv": [[500, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[501, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose": [[502, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer": [[503, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass": [[504, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic": [[505, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node": [[506, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu": [[507, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize": [[508, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes": [[509, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm": [[510, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input": [[511, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes": [[512, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes": [[513, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer": [[514, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base": [[515, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter": [[516, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_fake_quant": [[517, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_fake_quant"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value": [[518, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value_without_calib": [[519, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value_without_calib"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[520, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_requantize": [[521, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_requantize"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[522, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize": [[523, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8": [[524, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.meta_op_optimizer": [[525, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.meta_op_optimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_hostconst_converter": [[526, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_hostconst_converter"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_quantized_op_cse": [[527, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_quantized_op_cse"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.rnn_convert": [[528, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.rnn_convert"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.scale_propagation": [[529, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq": [[530, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.insert_qdq_pattern": [[531, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.insert_qdq_pattern"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.merge_duplicated_qdq": [[532, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.share_qdq_y_pattern": [[533, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "neural_compressor.tensorflow.quantization.utils.graph_util": [[534, "module-neural_compressor.tensorflow.quantization.utils.graph_util"]], "neural_compressor.tensorflow.quantization.utils": [[535, "module-neural_compressor.tensorflow.quantization.utils"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph": [[536, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.fake_quantize": [[537, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat": [[538, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_config": [[539, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_config"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_helper": [[540, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_helper"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers": [[541, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.optimize_layer": [[542, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[543, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[544, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[545, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_wrapper": [[546, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_wrapper"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_bn": [[547, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_bn"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_concatv2": [[548, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_conv": [[549, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_conv"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_deconv": [[550, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_deconv"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_in": [[551, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_in"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_matmul": [[552, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_matmul"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_pooling": [[553, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq": [[554, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.optimize_qdq": [[555, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.optimize_qdq"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base": [[556, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_bn": [[557, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_bn"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_concatv2": [[558, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_concatv2"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_conv": [[559, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_conv"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_for_intel_cpu": [[560, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_for_intel_cpu"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_matmul": [[561, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_matmul"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_pooling": [[562, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_pooling"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph_common": [[563, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph_common"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.bias_correction": [[564, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.bias_correction"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.graph_transform_base": [[565, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.graph_transform_base"]], "neural_compressor.tensorflow.quantization.utils.transform_graph": [[566, "module-neural_compressor.tensorflow.quantization.utils.transform_graph"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.insert_logging": [[567, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.insert_logging"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.rerange_quantized_concat": [[568, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.rerange_quantized_concat"]], "neural_compressor.tensorflow.quantization.utils.utility": [[569, "module-neural_compressor.tensorflow.quantization.utils.utility"]], "neural_compressor.tensorflow.utils.constants": [[570, "module-neural_compressor.tensorflow.utils.constants"]], "neural_compressor.tensorflow.utils.data": [[571, "module-neural_compressor.tensorflow.utils.data"]], "neural_compressor.tensorflow.utils": [[572, "module-neural_compressor.tensorflow.utils"]], "neural_compressor.tensorflow.utils.model": [[573, "module-neural_compressor.tensorflow.utils.model"]], "neural_compressor.tensorflow.utils.model_wrappers": [[574, "module-neural_compressor.tensorflow.utils.model_wrappers"]], "neural_compressor.tensorflow.utils.nets_factory": [[575, "module-neural_compressor.tensorflow.utils.nets_factory"]], "neural_compressor.tensorflow.utils.utility": [[576, "module-neural_compressor.tensorflow.utils.utility"]], "neural_compressor.torch.algorithms.habana_fp8.fp8_quant": [[577, "module-neural_compressor.torch.algorithms.habana_fp8.fp8_quant"]], "neural_compressor.torch.algorithms.habana_fp8": [[578, "module-neural_compressor.torch.algorithms.habana_fp8"]], "neural_compressor.torch.algorithms.habana_fp8.modules": [[579, "module-neural_compressor.torch.algorithms.habana_fp8.modules"]], "neural_compressor.torch.algorithms.habana_fp8.observer": [[580, "module-neural_compressor.torch.algorithms.habana_fp8.observer"]], "neural_compressor.torch.algorithms": [[581, "module-neural_compressor.torch.algorithms"]], "neural_compressor.torch.algorithms.layer_wise": [[582, "module-neural_compressor.torch.algorithms.layer_wise"]], "neural_compressor.torch.algorithms.layer_wise.load": [[583, "module-neural_compressor.torch.algorithms.layer_wise.load"]], "neural_compressor.torch.algorithms.layer_wise.modified_pickle": [[584, "module-neural_compressor.torch.algorithms.layer_wise.modified_pickle"]], "neural_compressor.torch.algorithms.layer_wise.utils": [[585, "module-neural_compressor.torch.algorithms.layer_wise.utils"]], "neural_compressor.torch.algorithms.static_quant": [[586, "module-neural_compressor.torch.algorithms.static_quant"]], "neural_compressor.torch.algorithms.static_quant.static_quant": [[587, "module-neural_compressor.torch.algorithms.static_quant.static_quant"]], "neural_compressor.torch.algorithms.static_quant.utility": [[588, "module-neural_compressor.torch.algorithms.static_quant.utility"]], "neural_compressor.torch.algorithms.weight_only.awq": [[589, "module-neural_compressor.torch.algorithms.weight_only.awq"]], "neural_compressor.torch.algorithms.weight_only.gptq": [[590, "module-neural_compressor.torch.algorithms.weight_only.gptq"]], "neural_compressor.torch.algorithms.weight_only.hqq.bitpack": [[591, "module-neural_compressor.torch.algorithms.weight_only.hqq.bitpack"]], "neural_compressor.torch.algorithms.weight_only.hqq.config": [[592, "module-neural_compressor.torch.algorithms.weight_only.hqq.config"]], "neural_compressor.torch.algorithms.weight_only.hqq.core": [[593, "module-neural_compressor.torch.algorithms.weight_only.hqq.core"]], "neural_compressor.torch.algorithms.weight_only.hqq": [[594, "module-neural_compressor.torch.algorithms.weight_only.hqq"]], "neural_compressor.torch.algorithms.weight_only.hqq.optimizer": [[595, "module-neural_compressor.torch.algorithms.weight_only.hqq.optimizer"]], "neural_compressor.torch.algorithms.weight_only.hqq.qtensor": [[596, "module-neural_compressor.torch.algorithms.weight_only.hqq.qtensor"]], "neural_compressor.torch.algorithms.weight_only.hqq.quant_api": [[597, "module-neural_compressor.torch.algorithms.weight_only.hqq.quant_api"]], "neural_compressor.torch.algorithms.weight_only.hqq.quantizer": [[598, "module-neural_compressor.torch.algorithms.weight_only.hqq.quantizer"]], "neural_compressor.torch.algorithms.weight_only.hqq.utility": [[599, "module-neural_compressor.torch.algorithms.weight_only.hqq.utility"]], "neural_compressor.torch.algorithms.weight_only": [[600, "module-neural_compressor.torch.algorithms.weight_only"]], "neural_compressor.torch.algorithms.weight_only.modules": [[601, "module-neural_compressor.torch.algorithms.weight_only.modules"]], "neural_compressor.torch.algorithms.weight_only.rtn": [[602, "module-neural_compressor.torch.algorithms.weight_only.rtn"]], "neural_compressor.torch.algorithms.weight_only.teq": [[603, "module-neural_compressor.torch.algorithms.weight_only.teq"]], "neural_compressor.torch.algorithms.weight_only.utility": [[604, "module-neural_compressor.torch.algorithms.weight_only.utility"]], "neural_compressor.torch.amp.autocast": [[605, "module-neural_compressor.torch.amp.autocast"]], "neural_compressor.torch.amp.fp8.functions": [[606, "module-neural_compressor.torch.amp.fp8.functions"]], "neural_compressor.torch.amp.fp8": [[607, "module-neural_compressor.torch.amp.fp8"]], "neural_compressor.torch.amp": [[608, "module-neural_compressor.torch.amp"]], "neural_compressor.torch": [[609, "module-neural_compressor.torch"]], "neural_compressor.torch.quantization.algorithm_entry": [[610, "module-neural_compressor.torch.quantization.algorithm_entry"]], "neural_compressor.torch.quantization.autotune": [[611, "module-neural_compressor.torch.quantization.autotune"]], "neural_compressor.torch.quantization.config": [[612, "module-neural_compressor.torch.quantization.config"]], "neural_compressor.torch.quantization": [[613, "module-neural_compressor.torch.quantization"]], "neural_compressor.torch.quantization.modules": [[614, "module-neural_compressor.torch.quantization.modules"]], "neural_compressor.torch.quantization.quantize": [[615, "module-neural_compressor.torch.quantization.quantize"]], "neural_compressor.torch.utils.auto_accelerator": [[616, "module-neural_compressor.torch.utils.auto_accelerator"]], "neural_compressor.torch.utils.constants": [[617, "module-neural_compressor.torch.utils.constants"]], "neural_compressor.torch.utils.environ": [[618, "module-neural_compressor.torch.utils.environ"]], "neural_compressor.torch.utils": [[619, "module-neural_compressor.torch.utils"]], "neural_compressor.torch.utils.utility": [[620, "module-neural_compressor.torch.utils.utility"]], "neural_compressor.training": [[621, "module-neural_compressor.training"]], "neural_compressor.utils.collect_layer_histogram": [[622, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[623, "module-neural_compressor.utils.constant"]], "neural_compressor.utils.create_obj_from_config": [[624, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[625, "module-neural_compressor.utils"]], "neural_compressor.utils.kl_divergence": [[626, "module-neural_compressor.utils.kl_divergence"]], "neural_compressor.utils.load_huggingface": [[627, "module-neural_compressor.utils.load_huggingface"]], "neural_compressor.utils.logger": [[628, "module-neural_compressor.utils.logger"]], "neural_compressor.utils.neural_insights_utils": [[629, "module-neural_compressor.utils.neural_insights_utils"]], "neural_compressor.utils.options": [[630, "module-neural_compressor.utils.options"]], "neural_compressor.utils.pytorch": [[631, "module-neural_compressor.utils.pytorch"]], "neural_compressor.utils.utility": [[632, "module-neural_compressor.utils.utility"]], "neural_compressor.utils.weights_details": [[633, "module-neural_compressor.utils.weights_details"]], "neural_compressor.version": [[634, "module-neural_compressor.version"]], "Intel\u00ae Neural Compressor Documentation": [[635, "intel-neural-compressor-documentation"], [735, "intel-neural-compressor-documentation"]], "Sections": [[635, "sections"], [735, "sections"]], "Contributor Covenant Code of Conduct": [[636, "contributor-covenant-code-of-conduct"], [637, "contributor-covenant-code-of-conduct"]], "Our Pledge": [[636, "our-pledge"]], "Our Standards": [[636, "our-standards"]], "Our Responsibilities": [[636, "our-responsibilities"]], "Scope": [[636, "scope"]], "Enforcement": [[636, "enforcement"]], "Attribution": [[636, "attribution"]], "Contribution Guidelines": [[637, "contribution-guidelines"]], "Create Pull Request": [[637, "create-pull-request"]], "Step-by-Step guidelines": [[637, "step-by-step-guidelines"]], "Pull Request Checklist": [[637, "pull-request-checklist"]], "Pull Request Template": [[637, "pull-request-template"]], "Pull Request Acceptance Criteria": [[637, "pull-request-acceptance-criteria"]], "Pull Request Status Checks Overview": [[637, "pull-request-status-checks-overview"]], "Support": [[637, "support"]], "FX": [[638, "fx"]], "Introduction": [[638, "introduction"], [639, "introduction"], [642, "introduction"], [643, "introduction"], [644, "introduction"], [659, "introduction"], [660, "introduction"], [662, "introduction"], [663, "introduction"], [666, "introduction"], [667, "introduction"], [668, "introduction"], [670, "introduction"], [672, "introduction"], [675, "introduction"], [679, "introduction"], [681, "introduction"], [682, "introduction"], [703, "introduction"], [704, "introduction"], [705, "introduction"], [717, "introduction"], [718, "introduction"], [719, "introduction"], [721, "introduction"], [723, "introduction"], [725, "introduction"], [727, "introduction"], [728, "introduction"], [729, "introduction"], [730, "introduction"], [731, "introduction"], [733, "introduction"]], "FX Mode Support Matrix in Neural Compressor": [[638, "fx-mode-support-matrix-in-neural-compressor"]], "Get Started": [[638, "get-started"], [665, "get-started"], [707, "get-started"], [722, "get-started"]], "Post Training Static Quantization": [[638, "post-training-static-quantization"], [722, "post-training-static-quantization"]], "Post Training Dynamic Quantization": [[638, "post-training-dynamic-quantization"], [722, "post-training-dynamic-quantization"]], "Quantization-Aware Training": [[638, "quantization-aware-training"]], "Examples": [[638, "examples"], [639, "examples"], [659, "examples"], [662, "examples"], [663, "examples"], [666, "examples"], [667, "examples"], [668, "examples"], [669, "examples"], [670, "examples"], [680, "examples"], [681, "examples"], [682, "examples"], [718, "examples"], [719, "examples"], [722, "examples"], [723, "examples"], [725, "examples"], [729, "examples"]], "Note": [[638, "note"]], "Details": [[638, "details"]], "Common Problem": [[638, "common-problem"]], "Dynamic Quantization": [[638, "dynamic-quantization"]], "Static Quantization & Quantization Aware Training": [[638, "static-quantization-quantization-aware-training"]], "Neural Architecture Search": [[639, "neural-architecture-search"]], "Basic NAS": [[639, "basic-nas"]], "Dynamic NAS": [[639, "dynamic-nas"]], "NAS Support Matrix": [[639, "nas-support-matrix"]], "Get Started with NAS API": [[639, "get-started-with-nas-api"]], "Basic Usage": [[639, "basic-usage"]], "1. Python code + YAML": [[639, "python-code-yaml"]], "2. Python code only": [[639, "python-code-only"]], "Advanced Usage (Custom NAS)": [[639, "advanced-usage-custom-nas"]], "Security Policy": [[640, "security-policy"]], "Report a Vulnerability": [[640, "report-a-vulnerability"]], "Intel\u00ae Neural Compressor": [[641, "intel-neural-compressor"], [700, "intel-neural-compressor"]], "Installation": [[641, "installation"], [676, "installation"], [676, "id1"], [694, "installation"], [702, "installation"], [707, "installation"]], "Install from pypi": [[641, "install-from-pypi"], [702, "install-from-pypi"]], "Getting Started": [[641, "getting-started"], [673, "getting-started"], [702, "getting-started"]], "Quantization with Python API": [[641, "quantization-with-python-api"], [673, "quantization-with-python-api"], [702, "quantization-with-python-api"]], "Documentation": [[641, "documentation"]], "Selected Publications/Events": [[641, "selected-publications-events"]], "Additional Content": [[641, "additional-content"]], "Communication": [[641, "communication"]], "Adaptor": [[642, "adaptor"], [645, "adaptor"]], "Adaptor Support Matrix": [[642, "adaptor-support-matrix"]], "Working Flow": [[642, "working-flow"], [722, "working-flow"]], "Get Started with Adaptor API": [[642, "get-started-with-adaptor-api"]], "Query API": [[642, "query-api"]], "Background": [[642, "background"], [661, "background"]], "Query API Introduction": [[642, "query-api-introduction"]], "Example of Adding a New Backend Support": [[642, "example-of-adding-a-new-backend-support"]], "Capability": [[642, "capability"]], "Implement ONNXRTAdaptor Class": [[642, "implement-onnxrtadaptor-class"]], "How to Add An Adaptor": [[643, "how-to-add-an-adaptor"]], "API List that Need to Implement": [[643, "api-list-that-need-to-implement"]], "Design the framework YAML": [[643, "design-the-framework-yaml"]], "Add query_fw_capability to Adaptor": [[643, "add-query-fw-capability-to-adaptor"]], "Add quantize API according to tune_cfg": [[643, "add-quantize-api-according-to-tune-cfg"]], "Prepare calibration model from fp32 graph": [[643, "prepare-calibration-model-from-fp32-graph"]], "Run sampling iterations of the fp32 graph to calibrate quantizable operators.": [[643, "run-sampling-iterations-of-the-fp32-graph-to-calibrate-quantizable-operators"]], "Calculate the data range and generate quantized model": [[643, "calculate-the-data-range-and-generate-quantized-model"]], "How to Support New Data Type, Like Int4, with a Few Line Changes": [[644, "how-to-support-new-data-type-like-int4-with-a-few-line-changes"]], "Define the Quantization Ability of the Specific Operator": [[644, "define-the-quantization-ability-of-the-specific-operator"]], "Invoke the Operator Kernel According to the Tuning Configuration": [[644, "invoke-the-operator-kernel-according-to-the-tuning-configuration"]], "Use the New Data Type": [[644, "use-the-new-data-type"]], "Summary": [[644, "summary"]], "ONNX Runtime": [[646, "onnx-runtime"]], "Torch Utils": [[647, "torch-utils"]], "API Document Example": [[648, "api-document-example"]], "APIs": [[649, "apis"]], "Benchmark": [[650, "benchmark"], [680, "benchmark"], [721, "benchmark"]], "Compression": [[651, "compression"]], "Config": [[652, "config"]], "Mix Precision": [[653, "mix-precision"], [680, "mix-precision"]], "Model": [[654, "model"], [682, "model"], [703, "model"], [705, "model"]], "Objective": [[655, "objective"], [713, "objective"], [714, "objective"], [715, "objective"], [717, "objective"]], "Quantization": [[656, "quantization"], [721, "quantization"], [722, "quantization"]], "Strategy": [[657, "strategy"]], "Training": [[658, "training"]], "Benchmarking": [[659, "benchmarking"]], "Benchmark Support Matrix": [[659, "benchmark-support-matrix"]], "Get Started with Benchmark API": [[659, "get-started-with-benchmark-api"]], "Calibration Algorithms in Quantization": [[660, "calibration-algorithms-in-quantization"]], "Calibration Algorithms": [[660, "calibration-algorithms"]], "Support Matrix": [[660, "support-matrix"], [685, "support-matrix"]], "Reference": [[660, "reference"], [661, "reference"], [719, "reference"], [722, "reference"], [725, "reference"], [728, "reference"]], "INC Coding Conventions": [[661, "inc-coding-conventions"]], "Rules": [[661, "rules"]], "Imports": [[661, "imports"]], "Strings": [[661, "strings"]], "Logger": [[661, "logger"]], "Type Annotations": [[661, "type-annotations"]], "Comments": [[661, "comments"]], "TODO Comments": [[661, "todo-comments"]], "Public and Internal Interfaces": [[661, "public-and-internal-interfaces"]], "Folder structure": [[661, "folder-structure"]], "Recommend VS Code settings.json": [[661, "recommend-vs-code-settings-json"]], "DataLoader": [[662, "dataloader"]], "Supported Framework Dataloader Matrix": [[662, "supported-framework-dataloader-matrix"]], "Get Started with DataLoader": [[662, "get-started-with-dataloader"]], "Use Intel\u00ae Neural Compressor DataLoader API": [[662, "use-intel-neural-compressor-dataloader-api"]], "Build Custom Dataloader with Python API": [[662, "build-custom-dataloader-with-python-api"]], "Dataset": [[663, "dataset"]], "Supported Framework Dataset Matrix": [[663, "supported-framework-dataset-matrix"]], "TensorFlow": [[663, "tensorflow"], [679, "tensorflow"], [730, "tensorflow"]], "PyTorch": [[663, "pytorch"], [679, "pytorch"], [724, "pytorch"]], "MXNet": [[663, "mxnet"], [679, "mxnet"], [730, "mxnet"]], "ONNXRT": [[663, "onnxrt"], [679, "onnxrt"], [730, "onnxrt"]], "Get start with Dataset API": [[663, "get-start-with-dataset-api"]], "Config dataloader in a yaml file": [[663, "config-dataloader-in-a-yaml-file"]], "User-specific dataset": [[663, "user-specific-dataset"]], "Design": [[664, "design"], [731, "design"], [731, "id1"], [731, "id3"], [731, "id5"], [731, "id7"], [731, "id9"], [731, "id11"], [731, "id13"], [731, "id15"], [731, "id17"], [731, "id19"], [731, "id21"]], "Architecture": [[664, "architecture"], [675, "architecture"]], "Workflow": [[664, "workflow"]], "Diagnosis": [[665, "diagnosis"]], "Diagnosis Introduction": [[665, "diagnosis-introduction"]], "Supported Feature Matrix": [[665, "supported-feature-matrix"], [668, "supported-feature-matrix"], [672, "supported-feature-matrix"], [675, "supported-feature-matrix"], [721, "supported-feature-matrix"], [722, "supported-feature-matrix"], [729, "supported-feature-matrix"], [733, "supported-feature-matrix"]], "Install Intel\u00ae Neural Compressor": [[665, "install-intel-neural-compressor"]], "Modify script": [[665, "modify-script"]], "Quantization diagnosis": [[665, "quantization-diagnosis"]], "Benchmark diagnosis": [[665, "benchmark-diagnosis"]], "Example": [[665, "example"], [679, "example"], [685, "example"], [689, "example"], [717, "example"]], "Prepare dataset": [[665, "prepare-dataset"]], "Run quantization script": [[665, "run-quantization-script"]], "Run benchmark script": [[665, "run-benchmark-script"]], "See quantization data": [[665, "see-quantization-data"]], "How to do diagnosis": [[665, "how-to-do-diagnosis"]], "Parameter description": [[665, "parameter-description"]], "Diagnosis suggestions": [[665, "diagnosis-suggestions"]], "Fallback setting example": [[665, "fallback-setting-example"]], "See profiling data": [[665, "see-profiling-data"]], "Distillation": [[666, "distillation"], [680, "distillation"], [721, "distillation"]], "Knowledge Distillation": [[666, "knowledge-distillation"]], "Intermediate Layer Knowledge Distillation": [[666, "intermediate-layer-knowledge-distillation"]], "Self Distillation": [[666, "self-distillation"]], "Distillation Support Matrix": [[666, "distillation-support-matrix"]], "Get Started with Distillation API": [[666, "get-started-with-distillation-api"]], "Distillation for Quantization": [[667, "distillation-for-quantization"]], "Distillation for Quantization Support Matrix": [[667, "distillation-for-quantization-support-matrix"]], "Get Started with Distillation for Quantization API": [[667, "get-started-with-distillation-for-quantization-api"]], "Distributed Training and Inference (Evaluation)": [[668, "distributed-training-and-inference-evaluation"]], "Get Started with Distributed Training and Inference API": [[668, "get-started-with-distributed-training-and-inference-api"]], "Option 1: Pure Yaml Configuration": [[668, "option-1-pure-yaml-configuration"]], "Option 2: User Defined Training Function": [[668, "option-2-user-defined-training-function"]], "Horovodrun Execution": [[668, "horovodrun-execution"]], "Security": [[668, "security"]], "PyTorch Examples:": [[668, "pytorch-examples"]], "TensorFlow Examples:": [[668, "tensorflow-examples"]], "Example List": [[669, "example-list"]], "Release Data": [[669, "release-data"]], "Export": [[670, "export"]], "Supported Framework Model Matrix": [[670, "supported-framework-model-matrix"], [682, "supported-framework-model-matrix"], [723, "supported-framework-model-matrix"], [725, "supported-framework-model-matrix"]], "PyTorch Model": [[670, "pytorch-model"]], "FP32 Model Export": [[670, "fp32-model-export"], [670, "id1"]], "INT8 Model Export": [[670, "int8-model-export"], [670, "id2"]], "Tensorflow Model": [[670, "tensorflow-model"]], "Appendix": [[670, "appendix"]], "Supported quantized ops": [[670, "supported-quantized-ops"]], "Frequently Asked Questions": [[671, "frequently-asked-questions"]], "Common Build Issues": [[671, "common-build-issues"]], "Issue 1:": [[671, "issue-1"]], "Issue 2:": [[671, "issue-2"]], "Issue 3:": [[671, "issue-3"]], "Issue 4:": [[671, "issue-4"]], "Framework YAML Configuration Files": [[672, "framework-yaml-configuration-files"]], "Get started with Framework YAML Files": [[672, "get-started-with-framework-yaml-files"]], "Quick Samples": [[673, "quick-samples"]], "Validated Models": [[673, "validated-models"], [728, "validated-models"], [734, "validated-models"]], "Incompatible changes between v1.2 and v1.1": [[674, "incompatible-changes-between-v1-2-and-v1-1"]], "User-facing APIs": [[674, "user-facing-apis"]], "Built-in transform/dataset/metric APIs": [[674, "built-in-transform-dataset-metric-apis"]], "Infrastructure of Intel\u00ae Neural Compressor": [[675, "infrastructure-of-intel-neural-compressor"]], "Prerequisites": [[676, "prerequisites"], [707, "prerequisites"], [708, "prerequisites"]], "Install from Binary": [[676, "install-from-binary"]], "Install from Source": [[676, "install-from-source"], [702, "install-from-source"]], "Install from AI Kit": [[676, "install-from-ai-kit"]], "System Requirements": [[676, "system-requirements"]], "Validated Hardware Environment": [[676, "validated-hardware-environment"]], "Intel\u00ae Neural Compressor supports CPUs based on Intel 64 architecture or compatible processors:": [[676, "intel-neural-compressor-supports-cpus-based-on-intel-64-architecture-or-compatible-processors"]], "Intel\u00ae Neural Compressor supports GPUs built on Intel\u2019s Xe architecture:": [[676, "intel-neural-compressor-supports-gpus-built-on-intel-s-xe-architecture"]], "Intel\u00ae Neural Compressor quantized ONNX models support multiple hardware vendors through ONNX Runtime:": [[676, "intel-neural-compressor-quantized-onnx-models-support-multiple-hardware-vendors-through-onnx-runtime"]], "Validated Software Environment": [[676, "validated-software-environment"]], "Legal Information": [[677, "legal-information"]], "License": [[677, "license"]], "Citation": [[677, "citation"]], "Trademarks": [[677, "trademarks"]], "LLMs Quantization Recipes": [[678, "llms-quantization-recipes"]], "IPEX key models": [[678, "ipex-key-models"]], "Metrics": [[679, "metrics"]], "Supported Built-in Metric Matrix": [[679, "supported-built-in-metric-matrix"]], "Get Started with Metric": [[679, "get-started-with-metric"]], "Use Intel\u00ae Neural Compressor Metric API": [[679, "use-intel-neural-compressor-metric-api"]], "Build Custom Metric with Python API": [[679, "build-custom-metric-with-python-api"]], "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X": [[680, "code-migration-from-intel-neural-compressor-1-x-to-intel-neural-compressor-2-x"]], "Model Quantization": [[680, "model-quantization"]], "Post-training Quantization": [[680, "post-training-quantization"]], "Quantization Aware Training": [[680, "quantization-aware-training"], [722, "quantization-aware-training"], [722, "id1"]], "Pruning": [[680, "pruning"], [719, "pruning"], [721, "pruning"]], "Orchestration": [[680, "orchestration"]], "Mixed Precision": [[681, "mixed-precision"]], "Mixed Precision Support Matrix": [[681, "mixed-precision-support-matrix"]], "Hardware and Software requests for BF16": [[681, "hardware-and-software-requests-for-bf16"]], "Hardware and Software requests for FP16": [[681, "hardware-and-software-requests-for-fp16"]], "During quantization mixed precision": [[681, "during-quantization-mixed-precision"]], "Accuracy-driven mixed precision": [[681, "accuracy-driven-mixed-precision"]], "Get Started with Mixed Precision API": [[681, "get-started-with-mixed-precision-api"]], "Neural Coder": [[683, "neural-coder"], [700, "neural-coder"], [700, "id1"]], "What do we offer?": [[683, "what-do-we-offer"]], "Getting Started!": [[683, "getting-started"], [694, "getting-started"]], "Jupyter Lab Extension": [[683, "jupyter-lab-extension"]], "Python Launcher": [[683, "python-launcher"], [688, "python-launcher"]], "Python API": [[683, "python-api"]], "Contact": [[683, "contact"], [707, "contact"]], "AWS Amazon SageMaker Support": [[684, "aws-amazon-sagemaker-support"]], "Start Jupyter Lab 3": [[684, "start-jupyter-lab-3"]], "For SageMaker Studio": [[684, "for-sagemaker-studio"]], "For SageMaker Notebook instance": [[684, "for-sagemaker-notebook-instance"]], "Installation Guide": [[684, "installation-guide"]], "BigDL Nano Support": [[685, "bigdl-nano-support"]], "Intel CPU Platforms: Best Performance Setting": [[686, "intel-cpu-platforms-best-performance-setting"]], "Install MKL, OpenMP and JEMALLOC": [[686, "install-mkl-openmp-and-jemalloc"]], "Install NUMA Controller": [[686, "install-numa-controller"]], "Environment Variables": [[686, "environment-variables"]], "Frequency Governers": [[686, "frequency-governers"]], "Neural Coder as Python API": [[687, "neural-coder-as-python-api"]], "Enable": [[687, "enable"]], "Bench": [[687, "bench"]], "SuperBench": [[687, "superbench"]], "Quick-Start": [[688, "quick-start"]], "Launcher Arguments (Optional)": [[688, "launcher-arguments-optional"]], "Neural Coder for Quantization": [[689, "neural-coder-for-quantization"]], "Features Supported": [[689, "features-supported"]], "Models Supported": [[689, "models-supported"]], "Usage": [[689, "usage"], [709, "usage"], [709, "id2"], [709, "id6"], [709, "id9"], [709, "id16"], [709, "id19"], [709, "id22"], [709, "id25"], [728, "usage"], [729, "usage"], [729, "id1"], [731, "usage"], [731, "id2"], [731, "id4"], [731, "id6"], [731, "id8"], [731, "id10"], [731, "id12"], [731, "id14"], [731, "id16"], [731, "id18"], [731, "id20"], [731, "id22"]], "PyPI distribution:": [[689, "pypi-distribution"]], "Supported Optimization Features": [[690, "supported-optimization-features"]], "v0.4": [[691, "v0-4"]], "Highlights": [[691, "highlights"]], "Others": [[691, "others"]], "Changelog": [[692, "changelog"], [696, "changelog"]], "neural_compressor_ext_lab": [[693, "neural-compressor-ext-lab"]], "Requirements": [[693, "requirements"], [697, "requirements"], [703, "requirements"], [704, "requirements"], [705, "requirements"], [713, "requirements"]], "Install": [[693, "install"]], "Uninstall": [[693, "uninstall"]], "Contributing": [[693, "contributing"], [697, "contributing"]], "Development install": [[693, "development-install"], [697, "development-install"]], "Development uninstall": [[693, "development-uninstall"], [697, "development-uninstall"]], "Packaging the extension": [[693, "packaging-the-extension"], [697, "packaging-the-extension"]], "Intel\u00ae Neural Compressor as JupyterLab Extension": [[694, "intel-neural-compressor-as-jupyterlab-extension"]], "Auto-enable a feature": [[694, "auto-enable-a-feature"]], "Or let us help you auto-select the best feature": [[694, "or-let-us-help-you-auto-select-the-best-feature"]], "Pre-requisites": [[694, "pre-requisites"]], "Making a new release of neural_compressor_ext_lab": [[695, "making-a-new-release-of-neural-compressor-ext-lab"]], "Manual release": [[695, "manual-release"], [698, "manual-release"]], "Python package": [[695, "python-package"], [698, "python-package"]], "NPM package": [[695, "npm-package"], [698, "npm-package"]], "Automated releases with the Jupyter Releaser": [[695, "automated-releases-with-the-jupyter-releaser"], [698, "automated-releases-with-the-jupyter-releaser"]], "Publishing to conda-forge": [[695, "publishing-to-conda-forge"], [698, "publishing-to-conda-forge"]], "neural_compressor_ext_lab_alibaba": [[697, "neural-compressor-ext-lab-alibaba"]], "Making a new release of neural_compressor_ext_lab_alibaba": [[698, "making-a-new-release-of-neural-compressor-ext-lab-alibaba"]], "Change Log": [[699, "change-log"]], "[Unreleased]": [[699, "unreleased"]], "Background Introduction": [[700, "background-introduction"]], "Neural Coder Extension in VSCode": [[700, "neural-coder-extension-in-vscode"]], "Neural Coder Extension Usage": [[700, "neural-coder-extension-usage"]], "1. Open": [[700, "open"]], "2. Search": [[700, "search"]], "3. Setting": [[700, "setting"]], "4. Icon": [[700, "icon"]], "5. optimization (quantization)": [[700, "optimization-quantization"]], "5.1 Enable": [[700, "enable"]], "5.2 Auto": [[700, "auto"]], "Welcome to your VS Code Extension": [[701, "welcome-to-your-vs-code-extension"]], "What\u2019s in the folder": [[701, "what-s-in-the-folder"]], "Setup": [[701, "setup"]], "Get up and running straight away": [[701, "get-up-and-running-straight-away"]], "Make changes": [[701, "make-changes"]], "Explore the API": [[701, "explore-the-api"]], "Run tests": [[701, "run-tests"]], "Go further": [[701, "go-further"]], "Neural Insights": [[702, "neural-insights"]], "Start the Neural Insights": [[702, "start-the-neural-insights"]], "Tensor dump examples": [[702, "tensor-dump-examples"]], "Step by Step Diagnosis Example": [[702, "step-by-step-diagnosis-example"]], "Research Collaborations": [[702, "research-collaborations"]], "Step by step example how to debug accuracy with Neural Insights": [[703, "step-by-step-example-how-to-debug-accuracy-with-neural-insights"], [705, "step-by-step-example-how-to-debug-accuracy-with-neural-insights"]], "Preparation": [[703, "preparation"], [704, "preparation"], [705, "preparation"], [727, "preparation"]], "Running the quantization": [[703, "running-the-quantization"], [704, "running-the-quantization"], [705, "running-the-quantization"]], "Analyzing the result of quantization": [[703, "analyzing-the-result-of-quantization"], [705, "analyzing-the-result-of-quantization"]], "Weights summary": [[703, "weights-summary"]], "Activations summary": [[703, "activations-summary"]], "Step by step example how to dump weights data for PyTorch model with Neural Insights": [[704, "step-by-step-example-how-to-dump-weights-data-for-pytorch-model-with-neural-insights"]], "Source": [[704, "source"], [705, "source"]], "Prepare the dataset": [[705, "prepare-the-dataset"]], "Analyzing weight histograms": [[705, "analyzing-weight-histograms"]], "Open Neural Insights": [[705, "open-neural-insights"]], "Getting Started with Create React App": [[706, "getting-started-with-create-react-app"]], "Available Scripts": [[706, "available-scripts"]], "npm start": [[706, "npm-start"]], "npm test": [[706, "npm-test"]], "npm run build": [[706, "npm-run-build"]], "npm run eject": [[706, "npm-run-eject"]], "Learn More": [[706, "learn-more"], [707, "learn-more"]], "Code Splitting": [[706, "code-splitting"]], "Analyzing the Bundle Size": [[706, "analyzing-the-bundle-size"]], "Making a Progressive Web App": [[706, "making-a-progressive-web-app"]], "Advanced Configuration": [[706, "advanced-configuration"]], "Deployment": [[706, "deployment"]], "npm run build fails to minify": [[706, "npm-run-build-fails-to-minify"]], "What\u2019s Neural Solution?": [[707, "what-s-neural-solution"]], "Why Neural Solution?": [[707, "why-neural-solution"]], "How does Neural Solution Work?": [[707, "how-does-neural-solution-work"]], "Method 1. Using pip:": [[707, "method-1-using-pip"]], "Method 2. Building from source:": [[707, "method-2-building-from-source"]], "End-to-end examples": [[707, "end-to-end-examples"]], "Get started": [[708, "get-started"]], "Install Neural Solution": [[708, "install-neural-solution"]], "Method 1. Using pip": [[708, "method-1-using-pip"]], "Method 2. Building from source": [[708, "method-2-building-from-source"]], "Start service": [[708, "start-service"]], "Submit task": [[708, "submit-task"]], "Query task status": [[708, "query-task-status"]], "Stop service": [[708, "stop-service"]], "Inspect logs": [[708, "inspect-logs"]], "Manage resource": [[708, "manage-resource"], [713, "manage-resource"], [714, "manage-resource"]], "Node States": [[708, "node-states"]], "Query cluster": [[708, "query-cluster"]], "Add node": [[708, "add-node"]], "Remove node": [[708, "remove-node"]], "Neural Solution API": [[709, "neural-solution-api"]], "Base URL": [[709, "base-url"]], "Endpoints": [[709, "endpoints"]], "GET /": [[709, "get"]], "Description": [[709, "description"], [709, "id1"], [709, "id4"], [709, "id8"], [709, "id12"], [709, "id15"], [709, "id18"], [709, "id21"], [709, "id24"]], "Responses": [[709, "responses"], [709, "id3"], [709, "id7"], [709, "id11"], [709, "id14"], [709, "id17"], [709, "id20"], [709, "id23"], [709, "id26"]], "POST /task/submit": [[709, "post-task-submit"]], "Parameters": [[709, "parameters"], [709, "id5"], [709, "id10"], [709, "id13"]], "GET /task/status/{task_id}": [[709, "get-task-status-task-id"]], "GET /task/log/{task_id}": [[709, "get-task-log-task-id"]], "WebSocket /task/screen/{task_id}": [[709, "websocket-task-screen-task-id"]], "GET /ping": [[709, "get-ping"]], "GET /cluster": [[709, "get-cluster"]], "GET /download/{task_id}": [[709, "get-download-task-id"]], "GET /description": [[709, "get-description"]], "Design Doc for Optimization as a Service [WIP]": [[710, "design-doc-for-optimization-as-a-service-wip"]], "Contents": [[710, "contents"]], "Overview": [[710, "overview"], [732, "overview"]], "Workflow of OaaS": [[710, "workflow-of-oaas"]], "Class definition diagram": [[710, "class-definition-diagram"]], "Extensibility": [[710, "extensibility"]], "Task request description": [[711, "task-request-description"]], "Examples List": [[712, "examples-list"]], "An end-to-end example: quantize a custom model with Neural Solution": [[713, "an-end-to-end-example-quantize-a-custom-model-with-neural-solution"]], "Start the Neural Solution Service": [[713, "start-the-neural-solution-service"], [714, "start-the-neural-solution-service"], [715, "start-the-neural-solution-service"]], "Submit optimization task": [[713, "submit-optimization-task"], [714, "submit-optimization-task"], [715, "submit-optimization-task"]], "Query optimization result": [[713, "query-optimization-result"], [714, "query-optimization-result"], [715, "query-optimization-result"]], "Download optimized model": [[713, "download-optimized-model"], [714, "download-optimized-model"]], "Stop the service": [[713, "stop-the-service"], [714, "stop-the-service"], [715, "stop-the-service"]], "An end-to-end example: quantize a Hugging Face model with Neural Solution": [[714, "an-end-to-end-example-quantize-a-hugging-face-model-with-neural-solution"]], "An end-to-end example: quantize a Hugging Face model with Neural Solution gRPC API": [[715, "an-end-to-end-example-quantize-a-hugging-face-model-with-neural-solution-grpc-api"]], "Client": [[716, "client"]], "Single Objective": [[717, "single-objective"]], "Multiple Objectives": [[717, "multiple-objectives"]], "Objective Support Matrix": [[717, "objective-support-matrix"]], "Get Started with Objective API": [[717, "get-started-with-objective-api"]], "Config Single Objective": [[717, "config-single-objective"]], "Config Multiple Objectives": [[717, "config-multiple-objectives"]], "Optimization Orchestration": [[718, "optimization-orchestration"]], "One-shot": [[718, "one-shot"]], "Orchestration Support Matrix": [[718, "orchestration-support-matrix"]], "Get Started with Orchestration API": [[718, "get-started-with-orchestration-api"]], "Neural Network Pruning": [[719, "neural-network-pruning"]], "Pruning Patterns": [[719, "pruning-patterns"]], "Pruning Criteria": [[719, "pruning-criteria"]], "Pruning Types": [[719, "pruning-types"]], "Pruning Schedules": [[719, "pruning-schedules"]], "Pruning Scope": [[719, "pruning-scope"]], "Sparsity Decay Types": [[719, "sparsity-decay-types"]], "Regularization": [[719, "regularization"]], "Large Language Model Pruning": [[719, "large-language-model-pruning"]], "Pruning Support Matrix": [[719, "pruning-support-matrix"]], "Get Started with Pruning API": [[719, "get-started-with-pruning-api"]], "Training-aware pruning API": [[719, "training-aware-pruning-api"]], "Retrain-free Pruning API": [[719, "retrain-free-pruning-api"]], "Sparse Model Deployment": [[719, "sparse-model-deployment"]], "Pruning with Hyperparameter Optimization": [[719, "pruning-with-hyperparameter-optimization"]], "Full Publications/Events (79)": [[720, "full-publications-events-79"]], "2023 (25)": [[720, "id1"]], "2022 (35)": [[720, "id2"]], "2021 (15)": [[720, "id3"]], "2018 - 2020 (4)": [[720, "id4"]], "Pythonic Style Access for Configurations": [[721, "pythonic-style-access-for-configurations"]], "Pythonic API for User Configurations": [[721, "pythonic-api-for-user-configurations"], [721, "id1"]], "Pythonic API for Framework Configurations": [[721, "pythonic-api-for-framework-configurations"], [721, "id2"]], "Get Started with Pythonic API for Configurations": [[721, "get-started-with-pythonic-api-for-configurations"]], "NAS": [[721, "nas"]], "Quantization Introduction": [[722, "quantization-introduction"]], "Quantization Fundamentals": [[722, "quantization-fundamentals"], [728, "quantization-fundamentals"]], "Quantization Support Matrix": [[722, "quantization-support-matrix"]], "Quantization Scheme in TensorFlow": [[722, "quantization-scheme-in-tensorflow"]], "Quantization Scheme in PyTorch": [[722, "quantization-scheme-in-pytorch"]], "Quantization Scheme in IPEX": [[722, "quantization-scheme-in-ipex"]], "Quantization Scheme in MXNet": [[722, "quantization-scheme-in-mxnet"]], "Quantization Scheme in ONNX Runtime": [[722, "quantization-scheme-in-onnx-runtime"]], "Quantization Approaches": [[722, "quantization-approaches"]], "With or Without Accuracy Aware Tuning": [[722, "with-or-without-accuracy-aware-tuning"]], "Post Training Quantization": [[722, "post-training-quantization"]], "Specify Quantization Rules": [[722, "specify-quantization-rules"]], "Specify Quantization Recipes": [[722, "specify-quantization-recipes"]], "Specify Quantization Backend and Device": [[722, "specify-quantization-backend-and-device"]], "Layer Wise Quantization (LWQ)": [[723, "layer-wise-quantization-lwq"]], "PyTorch framework example": [[723, "pytorch-framework-example"]], "ONNX Runtime framework example": [[723, "onnx-runtime-framework-example"]], "Turn OFF Auto Mixed Precision during Quantization": [[724, "turn-off-auto-mixed-precision-during-quantization"]], "Tensorflow": [[724, "tensorflow"]], "Weight Only Quantization (WOQ)": [[725, "weight-only-quantization-woq"]], "Quantization Capability": [[725, "quantization-capability"]], "Export Compressed Model": [[725, "export-compressed-model"]], "User Code Example": [[725, "user-code-example"]], "WOQ Algorithms Tuning": [[725, "woq-algorithms-tuning"]], "User code example": [[725, "id1"]], "Release": [[726, "release"]], "Release Notes": [[726, "release-notes"]], "Known Issues": [[726, "known-issues"]], "Incompatible Changes": [[726, "incompatible-changes"]], "SigOpt Strategy": [[727, "sigopt-strategy"]], "SigOpt Platform": [[727, "sigopt-platform"]], "Neural Compressor Configuration": [[727, "neural-compressor-configuration"]], "Performance": [[727, "performance"]], "Benefit of SigOpt Strategy": [[727, "benefit-of-sigopt-strategy"]], "Performance Comparison of Different Strategies": [[727, "performance-comparison-of-different-strategies"]], "Smooth Quant": [[728, "smooth-quant"]], "Per-tensor & Per-channel": [[728, "per-tensor-per-channel"]], "Per-tensor example": [[728, "per-tensor-example"]], "Per-channel example": [[728, "per-channel-example"]], "Matmul quantization example": [[728, "matmul-quantization-example"]], "Per-channel limitation": [[728, "per-channel-limitation"]], "SmoothQuant and Our Enhancement": [[728, "smoothquant-and-our-enhancement"]], "SmoothQuant": [[728, "smoothquant"]], "Our enhancement:": [[728, "our-enhancement"]], "Algorithm: Auto-tuning of $\\alpha$.": [[728, "algorithm-auto-tuning-of-alpha"]], "Engineering": [[728, "engineering"]], "Using a fixed alpha": [[728, "using-a-fixed-alpha"]], "Determining the alpha through auto-tuning": [[728, "determining-the-alpha-through-auto-tuning"]], "Auto-tune the alpha for the entire model": [[728, "auto-tune-the-alpha-for-the-entire-model"]], "Auto-tune the alpha for each layer/block": [[728, "auto-tune-the-alpha-for-each-layer-block"]], "Supported Framework Matrix": [[728, "supported-framework-matrix"]], "TensorBoard": [[729, "tensorboard"]], "Get Started with TensorBoard": [[729, "get-started-with-tensorboard"]], "PyTorch TensorBoard": [[729, "pytorch-tensorboard"]], "TensorFlow Tensorboard": [[729, "tensorflow-tensorboard"]], "PyTorch Examples": [[729, "pytorch-examples"]], "TensorFlow Examples": [[729, "tensorflow-examples"]], "Transform": [[730, "transform"]], "Transform Support List": [[730, "transform-support-list"]], "Pytorch": [[730, "pytorch"]], "Tuning Strategies": [[731, "tuning-strategies"]], "Strategy Design": [[731, "strategy-design"]], "Tuning Space": [[731, "tuning-space"]], "Exit Policy": [[731, "exit-policy"]], "Accuracy Criteria": [[731, "accuracy-criteria"]], "Tuning Process": [[731, "tuning-process"]], "Tuning Algorithms": [[731, "tuning-algorithms"]], "Auto": [[731, "auto"]], "Conservative Tuning": [[731, "conservative-tuning"]], "Basic": [[731, "basic"]], "MSE": [[731, "mse"]], "MSE_V2": [[731, "mse-v2"]], "HAWQ_V2": [[731, "hawq-v2"]], "Bayesian": [[731, "bayesian"]], "Exhaustive": [[731, "exhaustive"]], "Random": [[731, "random"]], "SigOpt": [[731, "sigopt"]], "TPE": [[731, "tpe"]], "Distributed Tuning": [[731, "distributed-tuning"]], "Customize a New Tuning Strategy": [[731, "customize-a-new-tuning-strategy"]], "User Guide": [[732, "user-guide"]], "Python-based APIs": [[732, "python-based-apis"]], "Neural Coder (Zero-code Optimization)": [[732, "neural-coder-zero-code-optimization"]], "Advanced Topics": [[732, "advanced-topics"]], "Innovations for Productivity": [[732, "innovations-for-productivity"]], "User YAML Configuration Files": [[733, "user-yaml-configuration-files"]], "Get started with User YAML Files": [[733, "get-started-with-user-yaml-files"]], "Validated Quantization Examples": [[734, "validated-quantization-examples"]], "TensorFlow Models with Intel TensorFlow 2.13.0": [[734, "tensorflow-models-with-intel-tensorflow-2-13-0"]], "PyTorch Models with Torch 2.0.1+cpu in PTQ Mode": [[734, "pytorch-models-with-torch-2-0-1-cpu-in-ptq-mode"]], "PyTorch Models with Torch 2.0.1+cpu in QAT Mode": [[734, "pytorch-models-with-torch-2-0-1-cpu-in-qat-mode"]], "PyTorch Models with Intel\u00ae Extension for PyTorch* 2.0.1+cpu": [[734, "pytorch-models-with-intel-extension-for-pytorch-2-0-1-cpu"]], "PyTorch Models with Torch 2.0.1+cpu in WOQ Mode": [[734, "pytorch-models-with-torch-2-0-1-cpu-in-woq-mode"]], "ONNX Models with ONNX Runtime 1.15.1": [[734, "onnx-models-with-onnx-runtime-1-15-1"]], "ONNX Models with ONNX Runtime 1.15.0 in WOQ Mode": [[734, "onnx-models-with-onnx-runtime-1-15-0-in-woq-mode"]], "Validated Pruning Examples": [[734, "validated-pruning-examples"]], "Validated Knowledge Distillation Examples": [[734, "validated-knowledge-distillation-examples"]], "Validated ONNX QDQ INT8 Models on Multiple Hardware through ONNX Runtime": [[734, "validated-onnx-qdq-int8-models-on-multiple-hardware-through-onnx-runtime"]]}, "indexentries": {"block_mask": [[0, "module-block_mask"]], "module": [[0, "module-block_mask"], [1, "module-neural_compressor.adaptor.adaptor"], [2, "module-neural_compressor.adaptor"], [3, "module-neural_compressor.adaptor.keras"], [4, "module-neural_compressor.adaptor.keras_utils.conv2d"], [5, "module-neural_compressor.adaptor.keras_utils.dense"], [6, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"], [7, "module-neural_compressor.adaptor.keras_utils"], [8, "module-neural_compressor.adaptor.keras_utils.pool2d"], [9, "module-neural_compressor.adaptor.keras_utils.quantizer"], [10, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"], [11, "module-neural_compressor.adaptor.mxnet"], [12, "module-neural_compressor.adaptor.mxnet_utils"], [13, "module-neural_compressor.adaptor.mxnet_utils.util"], [14, "module-neural_compressor.adaptor.onnxrt"], [15, "module-neural_compressor.adaptor.ox_utils.calibration"], [16, "module-neural_compressor.adaptor.ox_utils.calibrator"], [17, "module-neural_compressor.adaptor.ox_utils"], [18, "module-neural_compressor.adaptor.ox_utils.operators.activation"], [19, "module-neural_compressor.adaptor.ox_utils.operators.argmax"], [20, "module-neural_compressor.adaptor.ox_utils.operators.attention"], [21, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"], [22, "module-neural_compressor.adaptor.ox_utils.operators.concat"], [23, "module-neural_compressor.adaptor.ox_utils.operators.conv"], [24, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"], [25, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"], [26, "module-neural_compressor.adaptor.ox_utils.operators.gather"], [27, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"], [28, "module-neural_compressor.adaptor.ox_utils.operators.gemm"], [29, "module-neural_compressor.adaptor.ox_utils.operators"], [30, "module-neural_compressor.adaptor.ox_utils.operators.lstm"], [31, "module-neural_compressor.adaptor.ox_utils.operators.matmul"], [32, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"], [33, "module-neural_compressor.adaptor.ox_utils.operators.norm"], [34, "module-neural_compressor.adaptor.ox_utils.operators.ops"], [35, "module-neural_compressor.adaptor.ox_utils.operators.pad"], [36, "module-neural_compressor.adaptor.ox_utils.operators.pooling"], [37, "module-neural_compressor.adaptor.ox_utils.operators.reduce"], [38, "module-neural_compressor.adaptor.ox_utils.operators.resize"], [39, "module-neural_compressor.adaptor.ox_utils.operators.split"], [40, "module-neural_compressor.adaptor.ox_utils.operators.unary_op"], [41, "module-neural_compressor.adaptor.ox_utils.quantizer"], [42, "module-neural_compressor.adaptor.ox_utils.smooth_quant"], [43, "module-neural_compressor.adaptor.ox_utils.util"], [44, "module-neural_compressor.adaptor.ox_utils.weight_only"], [45, "module-neural_compressor.adaptor.pytorch"], [46, "module-neural_compressor.adaptor.query"], [47, "module-neural_compressor.adaptor.tensorflow"], [48, "module-neural_compressor.adaptor.tf_utils.graph_converter"], [49, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"], [50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"], [51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer"], [52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"], [53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"], [54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"], [55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"], [56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"], [57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"], [58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"], [59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"], [60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"], [61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"], [62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"], [63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"], [64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"], [65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"], [66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"], [67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"], [68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"], [69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"], [70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"], [71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"], [72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"], [73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"], [74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"], [75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"], [76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"], [77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"], [78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"], [79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"], [80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"], [81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"], [82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"], [83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"], [84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"], [85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"], [86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"], [87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"], [88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"], [89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"], [90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"], [91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"], [92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"], [93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"], [94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"], [95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"], [96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"], [97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"], [98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"], [99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"], [100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"], [101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"], [102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"], [103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"], [104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"], [105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"], [106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"], [107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"], [108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"], [109, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"], [110, "module-neural_compressor.adaptor.tf_utils.graph_util"], [111, "module-neural_compressor.adaptor.tf_utils"], [112, "module-neural_compressor.adaptor.tf_utils.quantize_graph"], [113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"], [114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"], [115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"], [116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"], [117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"], [118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"], [119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"], [120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"], [121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"], [122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"], [123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"], [124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"], [125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"], [126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"], [127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"], [128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"], [129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"], [130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"], [131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"], [132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"], [133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"], [134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"], [135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"], [136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"], [137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"], [138, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"], [139, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"], [140, "module-neural_compressor.adaptor.tf_utils.smooth_quant_calibration"], [141, "module-neural_compressor.adaptor.tf_utils.smooth_quant_scaler"], [142, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"], [143, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"], [144, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"], [145, "module-neural_compressor.adaptor.tf_utils.transform_graph"], [146, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"], [147, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"], [148, "module-neural_compressor.adaptor.tf_utils.util"], [149, "module-neural_compressor.adaptor.torch_utils.auto_round"], [150, "module-neural_compressor.adaptor.torch_utils.autoround.autoround"], [151, "module-neural_compressor.adaptor.torch_utils.autoround.export"], [152, "module-neural_compressor.adaptor.torch_utils.autoround"], [153, "module-neural_compressor.adaptor.torch_utils.autoround.model_wrapper"], [154, "module-neural_compressor.adaptor.torch_utils.autoround.sign_sgd"], [155, "module-neural_compressor.adaptor.torch_utils.awq"], [156, "module-neural_compressor.adaptor.torch_utils.bf16_convert"], [157, "module-neural_compressor.adaptor.torch_utils.gptq"], [158, "module-neural_compressor.adaptor.torch_utils.hawq_metric"], [159, "module-neural_compressor.adaptor.torch_utils"], [160, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant"], [161, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle"], [162, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize"], [163, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load"], [164, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.utils"], [165, "module-neural_compressor.adaptor.torch_utils.mixed_precision"], [166, "module-neural_compressor.adaptor.torch_utils.model_wrapper"], [167, "module-neural_compressor.adaptor.torch_utils.pattern_detector"], [168, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"], [169, "module-neural_compressor.adaptor.torch_utils.teq"], [170, "module-neural_compressor.adaptor.torch_utils.util"], [171, "module-neural_compressor.adaptor.torch_utils.waq.auto_alpha"], [172, "module-neural_compressor.adaptor.torch_utils.waq.calibration"], [173, "module-neural_compressor.adaptor.torch_utils.waq.graph_trace"], [174, "module-neural_compressor.adaptor.torch_utils.waq"], [175, "module-neural_compressor.adaptor.torch_utils.waq.smooth_quant"], [176, "module-neural_compressor.adaptor.torch_utils.waq.utils"], [177, "module-neural_compressor.adaptor.torch_utils.weight_only"], [178, "module-neural_compressor.algorithm.algorithm"], [179, "module-neural_compressor.algorithm.fast_bias_correction"], [180, "module-neural_compressor.algorithm"], [181, "module-neural_compressor.algorithm.smooth_quant"], [182, "module-neural_compressor.algorithm.weight_correction"], [183, "module-neural_compressor.benchmark"], [184, "module-neural_compressor.common.base_config"], [185, "module-neural_compressor.common.base_tuning"], [186, "module-neural_compressor.common"], [187, "module-neural_compressor.common.tuning_param"], [188, "module-neural_compressor.common.utils.constants"], [189, "module-neural_compressor.common.utils"], [190, "module-neural_compressor.common.utils.logger"], [191, "module-neural_compressor.common.utils.utility"], [192, "module-neural_compressor.compression.callbacks"], [193, "module-neural_compressor.compression.distillation.criterions"], [194, "module-neural_compressor.compression.distillation"], [195, "module-neural_compressor.compression.distillation.optimizers"], [196, "module-neural_compressor.compression.distillation.utility"], [197, "module-neural_compressor.compression.hpo"], [198, "module-neural_compressor.compression.hpo.sa_optimizer"], [199, "module-neural_compressor.compression.hpo.search_algorithms"], [200, "module-neural_compressor.compression.hpo.search_space"], [201, "module-neural_compressor.compression"], [202, "module-neural_compressor.compression.pruner.criteria"], [203, "module-neural_compressor.compression.pruner.dsnot"], [204, "module-neural_compressor.compression.pruner"], [205, "module-neural_compressor.compression.pruner.model_slim.auto_slim"], [206, "module-neural_compressor.compression.pruner.model_slim"], [207, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"], [208, "module-neural_compressor.compression.pruner.model_slim.weight_slim"], [209, "module-neural_compressor.compression.pruner.patterns.base"], [210, "module-neural_compressor.compression.pruner.patterns"], [211, "module-neural_compressor.compression.pruner.patterns.mha"], [212, "module-neural_compressor.compression.pruner.patterns.ninm"], [213, "module-neural_compressor.compression.pruner.patterns.nxm"], [214, "module-neural_compressor.compression.pruner.pruners.base"], [215, "module-neural_compressor.compression.pruner.pruners.basic"], [216, "module-neural_compressor.compression.pruner.pruners.block_mask"], [217, "module-neural_compressor.compression.pruner.pruners"], [218, "module-neural_compressor.compression.pruner.pruners.mha"], [219, "module-neural_compressor.compression.pruner.pruners.pattern_lock"], [220, "module-neural_compressor.compression.pruner.pruners.progressive"], [221, "module-neural_compressor.compression.pruner.pruners.retrain_free"], [222, "module-neural_compressor.compression.pruner.pruners.sparse_gpt"], [223, "module-neural_compressor.compression.pruner.pruning"], [224, "module-neural_compressor.compression.pruner.regs"], [225, "module-neural_compressor.compression.pruner.schedulers"], [226, "module-neural_compressor.compression.pruner.tf_criteria"], [227, "module-neural_compressor.compression.pruner.utils"], [228, "module-neural_compressor.compression.pruner.wanda"], [229, "module-neural_compressor.compression.pruner.wanda.prune"], [230, "module-neural_compressor.compression.pruner.wanda.utils"], [231, "module-neural_compressor.compression.pruner.wanda.wrapper"], [232, "module-neural_compressor.conf.config"], [233, "module-neural_compressor.conf.dotdict"], [234, "module-neural_compressor.conf"], [235, "module-neural_compressor.conf.pythonic_config"], [236, "module-neural_compressor.config"], [237, "module-neural_compressor.contrib"], [238, "module-neural_compressor.contrib.strategy"], [239, "module-neural_compressor.contrib.strategy.sigopt"], [240, "module-neural_compressor.contrib.strategy.tpe"], [241, "module-neural_compressor.data.dataloaders.base_dataloader"], [242, "module-neural_compressor.data.dataloaders.dataloader"], [243, "module-neural_compressor.data.dataloaders.default_dataloader"], [244, "module-neural_compressor.data.dataloaders.fetcher"], [245, "module-neural_compressor.data.dataloaders"], [246, "module-neural_compressor.data.dataloaders.mxnet_dataloader"], [247, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"], [248, "module-neural_compressor.data.dataloaders.pytorch_dataloader"], [249, "module-neural_compressor.data.dataloaders.sampler"], [250, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"], [251, "module-neural_compressor.data.datasets.bert_dataset"], [252, "module-neural_compressor.data.datasets.coco_dataset"], [253, "module-neural_compressor.data.datasets.dataset"], [254, "module-neural_compressor.data.datasets.dummy_dataset"], [255, "module-neural_compressor.data.datasets.dummy_dataset_v2"], [256, "module-neural_compressor.data.datasets.imagenet_dataset"], [257, "module-neural_compressor.data.datasets"], [258, "module-neural_compressor.data.datasets.style_transfer_dataset"], [259, "module-neural_compressor.data.filters.coco_filter"], [260, "module-neural_compressor.data.filters.filter"], [261, "module-neural_compressor.data.filters"], [262, "module-neural_compressor.data"], [263, "module-neural_compressor.data.transforms.coco_transform"], [264, "module-neural_compressor.data.transforms.imagenet_transform"], [265, "module-neural_compressor.data.transforms"], [266, "module-neural_compressor.data.transforms.postprocess"], [267, "module-neural_compressor.data.transforms.tokenization"], [268, "module-neural_compressor.data.transforms.transform"], [269, "module-neural_compressor.experimental.benchmark"], [270, "module-neural_compressor.experimental.common.criterion"], [271, "module-neural_compressor.experimental.common.dataloader"], [272, "module-neural_compressor.experimental.common"], [273, "module-neural_compressor.experimental.common.metric"], [274, "module-neural_compressor.experimental.common.model"], [275, "module-neural_compressor.experimental.common.optimizer"], [276, "module-neural_compressor.experimental.common.postprocess"], [277, "module-neural_compressor.experimental.common.torch_utils"], [278, "module-neural_compressor.experimental.component"], [279, "module-neural_compressor.experimental.compression"], [280, "module-neural_compressor.experimental.contrib"], [281, "module-neural_compressor.experimental.contrib.strategy"], [282, "module-neural_compressor.experimental.contrib.strategy.sigopt"], [283, "module-neural_compressor.experimental.contrib.strategy.tpe"], [284, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"], [285, "module-neural_compressor.experimental.data.dataloaders.dataloader"], [286, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"], [287, "module-neural_compressor.experimental.data.dataloaders.fetcher"], [288, "module-neural_compressor.experimental.data.dataloaders"], [289, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"], [290, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"], [291, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"], [292, "module-neural_compressor.experimental.data.dataloaders.sampler"], [293, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"], [294, "module-neural_compressor.experimental.data.datasets.bert_dataset"], [295, "module-neural_compressor.experimental.data.datasets.coco_dataset"], [296, "module-neural_compressor.experimental.data.datasets.dataset"], [297, "module-neural_compressor.experimental.data.datasets.dummy_dataset"], [298, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"], [299, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"], [300, "module-neural_compressor.experimental.data.datasets"], [301, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"], [302, "module-neural_compressor.experimental.data.filters.coco_filter"], [303, "module-neural_compressor.experimental.data.filters.filter"], [304, "module-neural_compressor.experimental.data.filters"], [305, "module-neural_compressor.experimental.data"], [306, "module-neural_compressor.experimental.data.transforms.imagenet_transform"], [307, "module-neural_compressor.experimental.data.transforms"], [308, "module-neural_compressor.experimental.data.transforms.tokenization"], [309, "module-neural_compressor.experimental.data.transforms.transform"], [310, "module-neural_compressor.experimental.distillation"], [311, "module-neural_compressor.experimental.export"], [312, "module-neural_compressor.experimental.export.qlinear2qdq"], [313, "module-neural_compressor.experimental.export.tf2onnx"], [314, "module-neural_compressor.experimental.export.torch2onnx"], [315, "module-neural_compressor.experimental.graph_optimization"], [316, "module-neural_compressor.experimental"], [317, "module-neural_compressor.experimental.metric.bleu"], [318, "module-neural_compressor.experimental.metric.bleu_util"], [319, "module-neural_compressor.experimental.metric.coco_label_map"], [320, "module-neural_compressor.experimental.metric.coco_tools"], [321, "module-neural_compressor.experimental.metric.evaluate_squad"], [322, "module-neural_compressor.experimental.metric.f1"], [323, "module-neural_compressor.experimental.metric"], [324, "module-neural_compressor.experimental.metric.metric"], [325, "module-neural_compressor.experimental.mixed_precision"], [326, "module-neural_compressor.experimental.model_conversion"], [327, "module-neural_compressor.experimental.nas.basic_nas"], [328, "module-neural_compressor.experimental.nas.dynas"], [329, "module-neural_compressor.experimental.nas"], [330, "module-neural_compressor.experimental.nas.nas"], [331, "module-neural_compressor.experimental.nas.nas_utils"], [332, "module-neural_compressor.experimental.nas.search_algorithms"], [333, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"], [334, "module-neural_compressor.experimental.pruner_legacy.group_lasso"], [335, "module-neural_compressor.experimental.pruner_legacy"], [336, "module-neural_compressor.experimental.pruner_legacy.magnitude"], [337, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"], [338, "module-neural_compressor.experimental.pruner_legacy.pruner"], [339, "module-neural_compressor.experimental.pruning"], [340, "module-neural_compressor.experimental.pruning_recipes"], [341, "module-neural_compressor.experimental.pruning_recipes.patterns"], [342, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"], [343, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"], [344, "module-neural_compressor.experimental.pruning_v2"], [345, "module-neural_compressor.experimental.pytorch_pruner"], [346, "module-neural_compressor.experimental.pytorch_pruner.logger"], [347, "module-neural_compressor.experimental.pytorch_pruner.patterns"], [348, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"], [349, "module-neural_compressor.experimental.pytorch_pruner.pruner"], [350, "module-neural_compressor.experimental.pytorch_pruner.pruning"], [351, "module-neural_compressor.experimental.pytorch_pruner.scheduler"], [352, "module-neural_compressor.experimental.quantization"], [353, "module-neural_compressor.experimental.scheduler"], [354, "module-neural_compressor.experimental.strategy.auto_mixed_precision"], [355, "module-neural_compressor.experimental.strategy.basic"], [356, "module-neural_compressor.experimental.strategy.bayesian"], [357, "module-neural_compressor.experimental.strategy.exhaustive"], [358, "module-neural_compressor.experimental.strategy"], [359, "module-neural_compressor.experimental.strategy.mse"], [360, "module-neural_compressor.experimental.strategy.mse_v2"], [361, "module-neural_compressor.experimental.strategy.random"], [362, "module-neural_compressor.experimental.strategy.strategy"], [363, "module-neural_compressor.experimental.strategy.utils.constant"], [364, "module-neural_compressor.experimental.strategy.utils"], [365, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"], [366, "module-neural_compressor.experimental.strategy.utils.tuning_space"], [367, "module-neural_compressor.experimental.strategy.utils.tuning_structs"], [368, "module-neural_compressor.experimental.strategy.utils.utility"], [369, "module-neural_compressor"], [370, "module-neural_compressor.metric.bleu"], [371, "module-neural_compressor.metric.bleu_util"], [372, "module-neural_compressor.metric.coco_label_map"], [373, "module-neural_compressor.metric.coco_tools"], [374, "module-neural_compressor.metric.evaluate_squad"], [375, "module-neural_compressor.metric.f1"], [376, "module-neural_compressor.metric"], [377, "module-neural_compressor.metric.metric"], [378, "module-neural_compressor.mix_precision"], [379, "module-neural_compressor.model.base_model"], [380, "module-neural_compressor.model"], [381, "module-neural_compressor.model.keras_model"], [382, "module-neural_compressor.model.model"], [383, "module-neural_compressor.model.mxnet_model"], [384, "module-neural_compressor.model.nets_factory"], [385, "module-neural_compressor.model.onnx_model"], [386, "module-neural_compressor.model.tensorflow_model"], [387, "module-neural_compressor.model.torch_model"], [388, "module-neural_compressor.objective"], [389, "module-neural_compressor.onnxrt.algorithms"], [390, "module-neural_compressor.onnxrt.algorithms.layer_wise.core"], [391, "module-neural_compressor.onnxrt.algorithms.layer_wise"], [392, "module-neural_compressor.onnxrt.algorithms.smoother.calibrator"], [393, "module-neural_compressor.onnxrt.algorithms.smoother.core"], [394, "module-neural_compressor.onnxrt.algorithms.smoother"], [395, "module-neural_compressor.onnxrt.algorithms.weight_only.awq"], [396, "module-neural_compressor.onnxrt.algorithms.weight_only.gptq"], [397, "module-neural_compressor.onnxrt.algorithms.weight_only"], [398, "module-neural_compressor.onnxrt.algorithms.weight_only.rtn"], [399, "module-neural_compressor.onnxrt.algorithms.weight_only.utility"], [400, "module-neural_compressor.onnxrt"], [401, "module-neural_compressor.onnxrt.quantization.algorithm_entry"], [402, "module-neural_compressor.onnxrt.quantization.autotune"], [403, "module-neural_compressor.onnxrt.quantization.calibrate"], [404, "module-neural_compressor.onnxrt.quantization.config"], [405, "module-neural_compressor.onnxrt.quantization"], [406, "module-neural_compressor.onnxrt.quantization.quantize"], [407, "module-neural_compressor.onnxrt.utils"], [408, "module-neural_compressor.onnxrt.utils.onnx_model"], [409, "module-neural_compressor.onnxrt.utils.utility"], [410, "module-neural_compressor.profiling"], [411, "module-neural_compressor.profiling.parser.factory"], [412, "module-neural_compressor.profiling.parser"], [413, "module-neural_compressor.profiling.parser.onnx_parser.factory"], [414, "module-neural_compressor.profiling.parser.onnx_parser"], [415, "module-neural_compressor.profiling.parser.onnx_parser.parser"], [416, "module-neural_compressor.profiling.parser.parser"], [417, "module-neural_compressor.profiling.parser.result"], [418, "module-neural_compressor.profiling.parser.tensorflow_parser.factory"], [419, "module-neural_compressor.profiling.parser.tensorflow_parser"], [420, "module-neural_compressor.profiling.parser.tensorflow_parser.parser"], [421, "module-neural_compressor.profiling.profiler.factory"], [422, "module-neural_compressor.profiling.profiler"], [423, "module-neural_compressor.profiling.profiler.onnxrt_profiler.factory"], [424, "module-neural_compressor.profiling.profiler.onnxrt_profiler"], [425, "module-neural_compressor.profiling.profiler.onnxrt_profiler.profiler"], [426, "module-neural_compressor.profiling.profiler.onnxrt_profiler.utils"], [427, "module-neural_compressor.profiling.profiler.profiler"], [428, "module-neural_compressor.profiling.profiler.tensorflow_profiler.factory"], [429, "module-neural_compressor.profiling.profiler.tensorflow_profiler"], [430, "module-neural_compressor.profiling.profiler.tensorflow_profiler.profiler"], [431, "module-neural_compressor.profiling.profiler.tensorflow_profiler.utils"], [432, "module-neural_compressor.quantization"], [433, "module-neural_compressor.strategy.auto"], [434, "module-neural_compressor.strategy.auto_mixed_precision"], [435, "module-neural_compressor.strategy.basic"], [436, "module-neural_compressor.strategy.bayesian"], [437, "module-neural_compressor.strategy.conservative"], [438, "module-neural_compressor.strategy.exhaustive"], [439, "module-neural_compressor.strategy.hawq_v2"], [440, "module-neural_compressor.strategy"], [441, "module-neural_compressor.strategy.mse"], [442, "module-neural_compressor.strategy.mse_v2"], [443, "module-neural_compressor.strategy.random"], [444, "module-neural_compressor.strategy.strategy"], [445, "module-neural_compressor.strategy.utils.constant"], [446, "module-neural_compressor.strategy.utils"], [447, "module-neural_compressor.strategy.utils.tuning_sampler"], [448, "module-neural_compressor.strategy.utils.tuning_space"], [449, "module-neural_compressor.strategy.utils.tuning_structs"], [450, "module-neural_compressor.strategy.utils.utility"], [451, "module-neural_compressor.template.api_doc_example"], [452, "module-neural_compressor.template"], [453, "module-neural_compressor.tensorflow.algorithms"], [454, "module-neural_compressor.tensorflow.algorithms.smoother.calibration"], [455, "module-neural_compressor.tensorflow.algorithms.smoother.core"], [456, "module-neural_compressor.tensorflow.algorithms.smoother"], [457, "module-neural_compressor.tensorflow.algorithms.smoother.scaler"], [458, "module-neural_compressor.tensorflow.algorithms.static_quant"], [459, "module-neural_compressor.tensorflow.algorithms.static_quant.keras"], [460, "module-neural_compressor.tensorflow.algorithms.static_quant.tensorflow"], [461, "module-neural_compressor.tensorflow"], [462, "module-neural_compressor.tensorflow.keras"], [463, "module-neural_compressor.tensorflow.keras.layers.conv2d"], [464, "module-neural_compressor.tensorflow.keras.layers.dense"], [465, "module-neural_compressor.tensorflow.keras.layers.depthwise_conv2d"], [466, "module-neural_compressor.tensorflow.keras.layers"], [467, "module-neural_compressor.tensorflow.keras.layers.pool2d"], [468, "module-neural_compressor.tensorflow.keras.layers.quantizer"], [469, "module-neural_compressor.tensorflow.keras.layers.separable_conv2d"], [470, "module-neural_compressor.tensorflow.keras.quantization.config"], [471, "module-neural_compressor.tensorflow.keras.quantization"], [472, "module-neural_compressor.tensorflow.quantization.algorithm_entry"], [473, "module-neural_compressor.tensorflow.quantization.autotune"], [474, "module-neural_compressor.tensorflow.quantization.config"], [475, "module-neural_compressor.tensorflow.quantization"], [476, "module-neural_compressor.tensorflow.quantization.quantize"], [477, "module-neural_compressor.tensorflow.quantization.utils.graph_converter"], [478, "module-neural_compressor.tensorflow.quantization.utils.graph_converter_without_calib"], [479, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.bf16_convert"], [480, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.dequantize_cast_optimizer"], [481, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16"], [482, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd"], [483, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout"], [484, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu"], [485, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random"], [486, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const"], [487, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction"], [488, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd"], [489, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer"], [490, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape"], [491, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm"], [492, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant"], [493, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add"], [494, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul"], [495, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math"], [496, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn"], [497, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in"], [498, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu"], [499, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm"], [500, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv"], [501, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"], [502, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose"], [503, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer"], [504, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass"], [505, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic"], [506, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node"], [507, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu"], [508, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize"], [509, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes"], [510, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm"], [511, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input"], [512, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes"], [513, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes"], [514, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer"], [515, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base"], [516, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter"], [517, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_fake_quant"], [518, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value"], [519, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value_without_calib"], [520, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"], [521, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_requantize"], [522, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"], [523, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize"], [524, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8"], [525, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.meta_op_optimizer"], [526, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_hostconst_converter"], [527, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_quantized_op_cse"], [528, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.rnn_convert"], [529, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.scale_propagation"], [530, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq"], [531, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.insert_qdq_pattern"], [532, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.merge_duplicated_qdq"], [533, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.share_qdq_y_pattern"], [534, "module-neural_compressor.tensorflow.quantization.utils.graph_util"], [535, "module-neural_compressor.tensorflow.quantization.utils"], [536, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph"], [537, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.fake_quantize"], [538, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat"], [539, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_config"], [540, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_helper"], [541, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers"], [542, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.optimize_layer"], [543, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_add"], [544, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_base"], [545, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"], [546, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_wrapper"], [547, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_bn"], [548, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_concatv2"], [549, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_conv"], [550, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_deconv"], [551, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_in"], [552, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_matmul"], [553, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_pooling"], [554, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq"], [555, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.optimize_qdq"], [556, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base"], [557, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_bn"], [558, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_concatv2"], [559, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_conv"], [560, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_for_intel_cpu"], [561, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_matmul"], [562, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_pooling"], [563, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph_common"], [564, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.bias_correction"], [565, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.graph_transform_base"], [566, "module-neural_compressor.tensorflow.quantization.utils.transform_graph"], [567, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.insert_logging"], [568, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.rerange_quantized_concat"], [569, "module-neural_compressor.tensorflow.quantization.utils.utility"], [570, "module-neural_compressor.tensorflow.utils.constants"], [571, "module-neural_compressor.tensorflow.utils.data"], [572, "module-neural_compressor.tensorflow.utils"], [573, "module-neural_compressor.tensorflow.utils.model"], [574, "module-neural_compressor.tensorflow.utils.model_wrappers"], [575, "module-neural_compressor.tensorflow.utils.nets_factory"], [576, "module-neural_compressor.tensorflow.utils.utility"], [577, "module-neural_compressor.torch.algorithms.habana_fp8.fp8_quant"], [578, "module-neural_compressor.torch.algorithms.habana_fp8"], [579, "module-neural_compressor.torch.algorithms.habana_fp8.modules"], [580, "module-neural_compressor.torch.algorithms.habana_fp8.observer"], [581, "module-neural_compressor.torch.algorithms"], [582, "module-neural_compressor.torch.algorithms.layer_wise"], [583, "module-neural_compressor.torch.algorithms.layer_wise.load"], [584, "module-neural_compressor.torch.algorithms.layer_wise.modified_pickle"], [585, "module-neural_compressor.torch.algorithms.layer_wise.utils"], [586, "module-neural_compressor.torch.algorithms.static_quant"], [587, "module-neural_compressor.torch.algorithms.static_quant.static_quant"], [588, "module-neural_compressor.torch.algorithms.static_quant.utility"], [589, "module-neural_compressor.torch.algorithms.weight_only.awq"], [590, "module-neural_compressor.torch.algorithms.weight_only.gptq"], [591, "module-neural_compressor.torch.algorithms.weight_only.hqq.bitpack"], [592, "module-neural_compressor.torch.algorithms.weight_only.hqq.config"], [593, "module-neural_compressor.torch.algorithms.weight_only.hqq.core"], [594, "module-neural_compressor.torch.algorithms.weight_only.hqq"], [595, "module-neural_compressor.torch.algorithms.weight_only.hqq.optimizer"], [596, "module-neural_compressor.torch.algorithms.weight_only.hqq.qtensor"], [597, "module-neural_compressor.torch.algorithms.weight_only.hqq.quant_api"], [598, "module-neural_compressor.torch.algorithms.weight_only.hqq.quantizer"], [599, "module-neural_compressor.torch.algorithms.weight_only.hqq.utility"], [600, "module-neural_compressor.torch.algorithms.weight_only"], [601, "module-neural_compressor.torch.algorithms.weight_only.modules"], [602, "module-neural_compressor.torch.algorithms.weight_only.rtn"], [603, "module-neural_compressor.torch.algorithms.weight_only.teq"], [604, "module-neural_compressor.torch.algorithms.weight_only.utility"], [605, "module-neural_compressor.torch.amp.autocast"], [606, "module-neural_compressor.torch.amp.fp8.functions"], [607, "module-neural_compressor.torch.amp.fp8"], [608, "module-neural_compressor.torch.amp"], [609, "module-neural_compressor.torch"], [610, "module-neural_compressor.torch.quantization.algorithm_entry"], [611, "module-neural_compressor.torch.quantization.autotune"], [612, "module-neural_compressor.torch.quantization.config"], [613, "module-neural_compressor.torch.quantization"], [614, "module-neural_compressor.torch.quantization.modules"], [615, "module-neural_compressor.torch.quantization.quantize"], [616, "module-neural_compressor.torch.utils.auto_accelerator"], [617, "module-neural_compressor.torch.utils.constants"], [618, "module-neural_compressor.torch.utils.environ"], [619, "module-neural_compressor.torch.utils"], [620, "module-neural_compressor.torch.utils.utility"], [621, "module-neural_compressor.training"], [622, "module-neural_compressor.utils.collect_layer_histogram"], [623, "module-neural_compressor.utils.constant"], [624, "module-neural_compressor.utils.create_obj_from_config"], [625, "module-neural_compressor.utils"], [626, "module-neural_compressor.utils.kl_divergence"], [627, "module-neural_compressor.utils.load_huggingface"], [628, "module-neural_compressor.utils.logger"], [629, "module-neural_compressor.utils.neural_insights_utils"], [630, "module-neural_compressor.utils.options"], [631, "module-neural_compressor.utils.pytorch"], [632, "module-neural_compressor.utils.utility"], [633, "module-neural_compressor.utils.weights_details"], [634, "module-neural_compressor.version"]], "adaptor (class in neural_compressor.adaptor.adaptor)": [[1, "neural_compressor.adaptor.adaptor.Adaptor"]], "adaptor_registry() (in module neural_compressor.adaptor.adaptor)": [[1, "neural_compressor.adaptor.adaptor.adaptor_registry"]], "neural_compressor.adaptor.adaptor": [[1, "module-neural_compressor.adaptor.adaptor"]], "neural_compressor.adaptor": [[2, "module-neural_compressor.adaptor"]], "kerasadaptor (class in neural_compressor.adaptor.keras)": [[3, "neural_compressor.adaptor.keras.KerasAdaptor"]], "neural_compressor.adaptor.keras": [[3, "module-neural_compressor.adaptor.keras"]], "neural_compressor.adaptor.keras_utils.conv2d": [[4, "module-neural_compressor.adaptor.keras_utils.conv2d"]], "neural_compressor.adaptor.keras_utils.dense": [[5, "module-neural_compressor.adaptor.keras_utils.dense"]], "neural_compressor.adaptor.keras_utils.depthwise_conv2d": [[6, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"]], "neural_compressor.adaptor.keras_utils": [[7, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.pool2d": [[8, "module-neural_compressor.adaptor.keras_utils.pool2d"]], "neural_compressor.adaptor.keras_utils.quantizer": [[9, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "neural_compressor.adaptor.keras_utils.separable_conv2d": [[10, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"]], "mxnetquery (class in neural_compressor.adaptor.mxnet)": [[11, "neural_compressor.adaptor.mxnet.MXNetQuery"]], "mxnetadaptor (class in neural_compressor.adaptor.mxnet)": [[11, "neural_compressor.adaptor.mxnet.MxNetAdaptor"]], "neural_compressor.adaptor.mxnet": [[11, "module-neural_compressor.adaptor.mxnet"]], "neural_compressor.adaptor.mxnet_utils": [[12, "module-neural_compressor.adaptor.mxnet_utils"]], "calibcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CalibCollector"]], "calibdata (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CalibData"]], "collectorbase (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CollectorBase"]], "dataiterloader (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.DataIterLoader"]], "dataloaderwrap (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.DataLoaderWrap"]], "namecollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.NameCollector"]], "optype (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.OpType"]], "tensorcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.TensorCollector"]], "amp_convert() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.amp_convert"]], "calib_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.calib_model"]], "check_mx_version() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.check_mx_version"]], "combine_capabilities() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.combine_capabilities"]], "create_data_example() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.create_data_example"]], "distribute_calib_tensors() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.distribute_calib_tensors"]], "ensure_list() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.ensure_list"]], "fuse() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.fuse"]], "get_framework_name() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.get_framework_name"]], "is_model_quantized() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.is_model_quantized"]], "isiterable() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.isiterable"]], "make_module() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.make_module"]], "make_nc_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.make_nc_model"]], "make_symbol_block() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.make_symbol_block"]], "ndarray_to_device() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.ndarray_to_device"]], "neural_compressor.adaptor.mxnet_utils.util": [[13, "module-neural_compressor.adaptor.mxnet_utils.util"]], "parse_tune_config() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.parse_tune_config"]], "prepare_dataloader() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.prepare_dataloader"]], "prepare_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.prepare_model"]], "prepare_model_data() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.prepare_model_data"]], "quantize_sym_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.quantize_sym_model"]], "query_quantizable_nodes() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.query_quantizable_nodes"]], "run_forward() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.run_forward"]], "onnxrtquery (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRTQuery"]], "onnxrt_integeropsadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_IntegerOpsAdaptor"]], "onnxrt_qdqadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_QDQAdaptor"]], "onnxrt_qlinearopsadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_QLinearOpsAdaptor"]], "onnxrt_weightonlyadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_WeightOnlyAdaptor"]], "onnxruntimeadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor"]], "neural_compressor.adaptor.onnxrt": [[14, "module-neural_compressor.adaptor.onnxrt"]], "onnxrtaugment (class in neural_compressor.adaptor.ox_utils.calibration)": [[15, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment"]], "neural_compressor.adaptor.ox_utils.calibration": [[15, "module-neural_compressor.adaptor.ox_utils.calibration"]], "calibratorbase (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.CalibratorBase"]], "histogramcollector (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.HistogramCollector"]], "klcalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.KLCalibrator"]], "minmaxcalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.MinMaxCalibrator"]], "percentilecalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.PercentileCalibrator"]], "calib_registry() (in module neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.calib_registry"]], "neural_compressor.adaptor.ox_utils.calibrator": [[16, "module-neural_compressor.adaptor.ox_utils.calibrator"]], "smooth_distribution() (in module neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.smooth_distribution"]], "neural_compressor.adaptor.ox_utils": [[17, "module-neural_compressor.adaptor.ox_utils"]], "activationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator"]], "float16activationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.Float16ActivationOperator"]], "qactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.QActivationOperator"]], "removableactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.RemovableActivationOperator"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[18, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "argmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[19, "neural_compressor.adaptor.ox_utils.operators.argmax.ArgMaxOperator"]], "qargmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[19, "neural_compressor.adaptor.ox_utils.operators.argmax.QArgMaxOperator"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[19, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "attentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[20, "neural_compressor.adaptor.ox_utils.operators.attention.AttentionOperator"]], "qattentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[20, "neural_compressor.adaptor.ox_utils.operators.attention.QAttentionOperator"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[20, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "binarydirect8bitoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[21, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryDirect8BitOperator"]], "binaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[21, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator"]], "float16binaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[21, "neural_compressor.adaptor.ox_utils.operators.binary_op.Float16BinaryOperator"]], "qbinaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[21, "neural_compressor.adaptor.ox_utils.operators.binary_op.QBinaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[21, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "concatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[22, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator"]], "qconcatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[22, "neural_compressor.adaptor.ox_utils.operators.concat.QConcatOperator"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[22, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "convoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[23, "neural_compressor.adaptor.ox_utils.operators.conv.ConvOperator"]], "qconvoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[23, "neural_compressor.adaptor.ox_utils.operators.conv.QConvOperator"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[23, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "direct8bitoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[24, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator"]], "qdirectoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[24, "neural_compressor.adaptor.ox_utils.operators.direct_q8.QDirectOperator"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[24, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "embedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[25, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.EmbedLayerNormalizationOperator"]], "qembedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[25, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.QEmbedLayerNormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[25, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "gatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[26, "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator"]], "qgatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[26, "neural_compressor.adaptor.ox_utils.operators.gather.QGatherOperator"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[26, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "globalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[27, "neural_compressor.adaptor.ox_utils.operators.gavgpool.GlobalAveragePoolOperator"]], "qglobalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[27, "neural_compressor.adaptor.ox_utils.operators.gavgpool.QGlobalAveragePoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[27, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "gemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[28, "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator"]], "qgemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[28, "neural_compressor.adaptor.ox_utils.operators.gemm.QGemmOperator"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[28, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[29, "module-neural_compressor.adaptor.ox_utils.operators"]], "lstmoperator (class in neural_compressor.adaptor.ox_utils.operators.lstm)": [[30, "neural_compressor.adaptor.ox_utils.operators.lstm.LSTMOperator"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[30, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "fusedmatmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[31, "neural_compressor.adaptor.ox_utils.operators.matmul.FusedMatMulOperator"]], "matmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[31, "neural_compressor.adaptor.ox_utils.operators.matmul.MatMulOperator"]], "qmatmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[31, "neural_compressor.adaptor.ox_utils.operators.matmul.QMatMulOperator"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[31, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "maxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[32, "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator"]], "qmaxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[32, "neural_compressor.adaptor.ox_utils.operators.maxpool.QMaxPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[32, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "batchnormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.norm)": [[33, "neural_compressor.adaptor.ox_utils.operators.norm.BatchNormalizationOperator"]], "normalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.norm)": [[33, "neural_compressor.adaptor.ox_utils.operators.norm.NormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.norm": [[33, "module-neural_compressor.adaptor.ox_utils.operators.norm"]], "operator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.Operator"]], "qoperator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.QOperator"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[34, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "op_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.op_registry"]], "qop_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.qop_registry"]], "padoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[35, "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator"]], "qpadoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[35, "neural_compressor.adaptor.ox_utils.operators.pad.QPadOperator"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[35, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "pooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[36, "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator"]], "qpooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[36, "neural_compressor.adaptor.ox_utils.operators.pooling.QPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[36, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "reduceminmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.reduce)": [[37, "neural_compressor.adaptor.ox_utils.operators.reduce.ReduceMinMaxOperator"]], "reduceoperator (class in neural_compressor.adaptor.ox_utils.operators.reduce)": [[37, "neural_compressor.adaptor.ox_utils.operators.reduce.ReduceOperator"]], "neural_compressor.adaptor.ox_utils.operators.reduce": [[37, "module-neural_compressor.adaptor.ox_utils.operators.reduce"]], "qresizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[38, "neural_compressor.adaptor.ox_utils.operators.resize.QResizeOperator"]], "resizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[38, "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[38, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "qsplitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[39, "neural_compressor.adaptor.ox_utils.operators.split.QSplitOperator"]], "splitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[39, "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator"]], "neural_compressor.adaptor.ox_utils.operators.split": [[39, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "unarydirect8bitoperator (class in neural_compressor.adaptor.ox_utils.operators.unary_op)": [[40, "neural_compressor.adaptor.ox_utils.operators.unary_op.UnaryDirect8BitOperator"]], "unaryoperator (class in neural_compressor.adaptor.ox_utils.operators.unary_op)": [[40, "neural_compressor.adaptor.ox_utils.operators.unary_op.UnaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.unary_op": [[40, "module-neural_compressor.adaptor.ox_utils.operators.unary_op"]], "quantizer (class in neural_compressor.adaptor.ox_utils.quantizer)": [[41, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer"]], "neural_compressor.adaptor.ox_utils.quantizer": [[41, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "ortsmoothquant (class in neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.ORTSmoothQuant"]], "get_quant_dequant_output() (in module neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.get_quant_dequant_output"]], "make_sub_graph() (in module neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.make_sub_graph"]], "neural_compressor.adaptor.ox_utils.smooth_quant": [[42, "module-neural_compressor.adaptor.ox_utils.smooth_quant"]], "quant_dequant_data() (in module neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.quant_dequant_data"]], "quantformat (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantFormat"]], "quanttype (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantType"]], "quantizationmode (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizationMode"]], "quantizedinitializer (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizedInitializer"]], "quantizedvalue (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizedValue"]], "quantizedvaluetype (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizedValueType"]], "valueinfo (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.ValueInfo"]], "attribute_to_kwarg() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.attribute_to_kwarg"]], "calculate_scale_zp() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.calculate_scale_zp"]], "cast_tensor() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.cast_tensor"]], "collate_preds() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.collate_preds"]], "dequantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.dequantize_data"]], "dequantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.dequantize_data_with_scale_zero"]], "dtype_to_name() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.dtype_to_name"]], "find_by_name() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.find_by_name"]], "float_to_bfloat16() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.float_to_bfloat16"]], "float_to_float16() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.float_to_float16"]], "get_node_original_name() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.get_node_original_name"]], "infer_shapes() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.infer_shapes"]], "is_b_transposed() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.is_B_transposed"]], "make_dquant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.make_dquant_node"]], "make_quant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.make_quant_node"]], "neural_compressor.adaptor.ox_utils.util": [[43, "module-neural_compressor.adaptor.ox_utils.util"]], "quantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_data"]], "quantize_data_per_channel() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_data_per_channel"]], "quantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_data_with_scale_zero"]], "quantize_nparray() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_nparray"]], "remove_init_from_model_input() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.remove_init_from_model_input"]], "simple_progress_bar() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.simple_progress_bar"]], "split_shared_bias() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.split_shared_bias"]], "to_numpy() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.to_numpy"]], "trt_env_setup() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.trt_env_setup"]], "apply_awq_clip() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.apply_awq_clip"]], "apply_awq_scale() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.apply_awq_scale"]], "awq_quantize() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.awq_quantize"]], "get_blob_size() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.get_blob_size"]], "get_weight_scale() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.get_weight_scale"]], "gptq() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.gptq"]], "gptq_quantize() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.gptq_quantize"]], "make_matmul_weight_only_node() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.make_matmul_weight_only_node"]], "neural_compressor.adaptor.ox_utils.weight_only": [[44, "module-neural_compressor.adaptor.ox_utils.weight_only"]], "pad_tensor() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.pad_tensor"]], "prepare_inputs() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.prepare_inputs"]], "qdq_tensor() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.qdq_tensor"]], "quant_tensor() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.quant_tensor"]], "rtn_quantize() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.rtn_quantize"]], "pytorchadaptor (class in neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.PyTorchAdaptor"]], "pytorchweightonlyadaptor (class in neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.PyTorchWeightOnlyAdaptor"]], "pytorch_fxadaptor (class in neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor"]], "pytorch_ipexadaptor (class in neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor"]], "templateadaptor (class in neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.TemplateAdaptor"]], "get_ops_recursively() (in module neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.get_ops_recursively"]], "neural_compressor.adaptor.pytorch": [[45, "module-neural_compressor.adaptor.pytorch"]], "querybackendcapability (class in neural_compressor.adaptor.query)": [[46, "neural_compressor.adaptor.query.QueryBackendCapability"]], "neural_compressor.adaptor.query": [[46, "module-neural_compressor.adaptor.query"]], "tensorflowadaptor (class in neural_compressor.adaptor.tensorflow)": [[47, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor"]], "tensorflowquery (class in neural_compressor.adaptor.tensorflow)": [[47, "neural_compressor.adaptor.tensorflow.TensorflowQuery"]], "tensorflow_itexadaptor (class in neural_compressor.adaptor.tensorflow)": [[47, "neural_compressor.adaptor.tensorflow.Tensorflow_ITEXAdaptor"]], "neural_compressor.adaptor.tensorflow": [[47, "module-neural_compressor.adaptor.tensorflow"]], "graphconverter (class in neural_compressor.adaptor.tf_utils.graph_converter)": [[48, "neural_compressor.adaptor.tf_utils.graph_converter.GraphConverter"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[48, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "graphconverterwithoutcalib (class in neural_compressor.adaptor.tf_utils.graph_converter_without_calib)": [[49, "neural_compressor.adaptor.tf_utils.graph_converter_without_calib.GraphConverterWithoutCalib"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[49, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "bf16convert (class in neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert)": [[50, "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.BF16Convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "dequantizecastoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer)": [[51, "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer.DequantizeCastOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer": [[51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "convertaddtobiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd)": [[53, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "convertlayoutoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout)": [[54, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "convertleakyreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu)": [[55, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "convertnantorandom (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random)": [[56, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "convertplaceholdertoconst (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const)": [[57, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "dilatedcontraction (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction)": [[58, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.DilatedContraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "injectdummybiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd)": [[59, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "expanddimsoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer)": [[60, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "fetchweightfromreshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape)": [[61, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "foldbatchnormnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm)": [[62, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "graphfoldconstantoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant)": [[63, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "fusebiasaddandaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add)": [[64, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "fusecolumnwisemuloptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul)": [[65, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "fuseconvwithmathoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "fusedecomposedbnoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.FuseDecomposedBNOptimizer"]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.bypass_reshape"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.values_from_const"]], "fusedecomposedinoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.FuseDecomposedINOptimizer"]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.bypass_reshape"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.values_from_const"]], "fusegeluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu)": [[69, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "fuselayernormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_name_from_input"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.values_from_const"]], "fusepadwithconv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv)": [[71, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "fusepadwithfp32conv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv)": [[72, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "fusetransposereshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose)": [[73, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "graphcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer)": [[74, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "grappleroptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass)": [[75, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "insertprintminmaxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node)": [[77, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "movesqueezeafterreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu)": [[78, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "preoptimization (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize)": [[79, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.PreOptimization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "removetrainingnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes)": [[80, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "renamebatchnormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm)": [[81, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "splitsharedinputoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input)": [[82, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "stripequivalentnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes)": [[83, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "stripunusednodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes)": [[84, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "switchoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer)": [[85, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "graphrewriterbase (class in neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base)": [[86, "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "freezefakequantopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "freezevaluetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value)": [[89, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "freezevaluewithoutcalibtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "fuseconvredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "fuseconvrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize)": [[92, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "fusematmulredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "fusematmulrequantizedequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer"]], "fusematmulrequantizedequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer"]], "fusematmulrequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer"]], "fusematmulrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "metainfochangingmemopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "posthostconstconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "postcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "quantizedrnnconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "scalepropagationtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"]], "onnxgraph (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph)": [[102, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"]], "onnxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"]], "onnxopschema (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.OnnxOpSchema"]], "get_max_supported_opset_version() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.get_max_supported_opset_version"]], "get_schema() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.get_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"]], "seqtype (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.SeqType"]], "add_port_to_name() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.add_port_to_name"]], "are_shapes_equal() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.are_shapes_equal"]], "assert_error() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.assert_error"]], "compute_const_folding_using_tf() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.compute_const_folding_using_tf"]], "convert_tensorflow_tensor_to_onnx() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.convert_tensorflow_tensor_to_onnx"]], "find_opset() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.find_opset"]], "get_index_from_strided_slice_of_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_index_from_strided_slice_of_shape"]], "get_subgraphs_from_onnx() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_subgraphs_from_onnx"]], "get_tensorflow_node_attr() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_node_attr"]], "get_tensorflow_node_shape_attr() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_node_shape_attr"]], "get_tensorflow_tensor_data() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_tensor_data"]], "get_tensorflow_tensor_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_tensor_shape"]], "infer_onnx_shape_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.infer_onnx_shape_dtype"]], "initialize_name_counter() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.initialize_name_counter"]], "is_list_or_tuple() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.is_list_or_tuple"]], "is_onnx_domain() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.is_onnx_domain"]], "make_onnx_inputs_outputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.make_onnx_inputs_outputs"]], "make_onnx_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.make_onnx_shape"]], "map_numpy_to_onnx_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_numpy_to_onnx_dtype"]], "map_onnx_to_numpy_type() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_onnx_to_numpy_type"]], "map_tensorflow_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_tensorflow_dtype"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"]], "read_tensorflow_node_attrs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.read_tensorflow_node_attrs"]], "save_protobuf() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.save_protobuf"]], "set_name() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.set_name"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "generategraphwithqdqpattern (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern)": [[107, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "mergeduplicatedqdqoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq)": [[108, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "shareqdqforitexypatternoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern)": [[109, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[109, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "graphanalyzer (class in neural_compressor.adaptor.tf_utils.graph_util)": [[110, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer"]], "graphrewriterhelper (class in neural_compressor.adaptor.tf_utils.graph_util)": [[110, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper"]], "neural_compressor.adaptor.tf_utils.graph_util": [[110, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "neural_compressor.adaptor.tf_utils": [[111, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[112, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "fakequantize (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[113, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantize"]], "fakequantizebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[113, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "quantizeconfig (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config)": [[115, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "init_quantize_config() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[116, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.init_quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "qat_clone_function() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[116, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "config_quantizable_layers() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer)": [[118, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer.config_quantizable_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "quantizelayeradd (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add)": [[119, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add.QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "quantizelayerbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base)": [[120, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base.QuantizeLayerBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "quantizelayerbatchnormalization (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn.QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "quantizewrapper (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper"]], "quantizewrapperbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn)": [[123, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2)": [[124, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv)": [[125, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "fusenodestartwithdeconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv)": [[126, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "fusenodestartwithfusedinstancenorm (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in)": [[127, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul)": [[128, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling)": [[129, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "optimizeqdqgraph (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq)": [[131, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "quantizegraphbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[132, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase"]], "quantizenodebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[132, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2)": [[134, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "quantizegraphforintel (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu)": [[136, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul)": [[137, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling)": [[138, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[138, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "quantizegraphhelper (class in neural_compressor.adaptor.tf_utils.quantize_graph_common)": [[139, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[139, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "smoothquantcalibration (class in neural_compressor.adaptor.tf_utils.smooth_quant_calibration)": [[140, "neural_compressor.adaptor.tf_utils.smooth_quant_calibration.SmoothQuantCalibration"]], "smoothquantcalibrationllm (class in neural_compressor.adaptor.tf_utils.smooth_quant_calibration)": [[140, "neural_compressor.adaptor.tf_utils.smooth_quant_calibration.SmoothQuantCalibrationLLM"]], "neural_compressor.adaptor.tf_utils.smooth_quant_calibration": [[140, "module-neural_compressor.adaptor.tf_utils.smooth_quant_calibration"]], "smoothquantscaler (class in neural_compressor.adaptor.tf_utils.smooth_quant_scaler)": [[141, "neural_compressor.adaptor.tf_utils.smooth_quant_scaler.SmoothQuantScaler"]], "smoothquantscalerllm (class in neural_compressor.adaptor.tf_utils.smooth_quant_scaler)": [[141, "neural_compressor.adaptor.tf_utils.smooth_quant_scaler.SmoothQuantScalerLLM"]], "neural_compressor.adaptor.tf_utils.smooth_quant_scaler": [[141, "module-neural_compressor.adaptor.tf_utils.smooth_quant_scaler"]], "tensorflowqdqtoonnxqdqconverter (class in neural_compressor.adaptor.tf_utils.tf2onnx_converter)": [[142, "neural_compressor.adaptor.tf_utils.tf2onnx_converter.TensorflowQDQToOnnxQDQConverter"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[142, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"]], "biascorrection (class in neural_compressor.adaptor.tf_utils.transform_graph.bias_correction)": [[143, "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.BiasCorrection"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[143, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "graphtransformbase (class in neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base)": [[144, "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[144, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[145, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "insertlogging (class in neural_compressor.adaptor.tf_utils.transform_graph.insert_logging)": [[146, "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.InsertLogging"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[146, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "rerangequantizedconcat (class in neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat)": [[147, "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[147, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "apply_inlining() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.apply_inlining"]], "collate_tf_preds() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.collate_tf_preds"]], "construct_function_from_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.construct_function_from_graph_def"]], "disable_random() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.disable_random"]], "fix_ref_type_of_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.fix_ref_type_of_graph_def"]], "generate_feed_dict() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.generate_feed_dict"]], "get_estimator_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_estimator_graph"]], "get_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_graph_def"]], "get_input_output_node_names() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_input_output_node_names"]], "get_model_input_shape() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_model_input_shape"]], "get_tensor_by_name() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_tensor_by_name"]], "get_tensor_val_from_graph_node() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_tensor_val_from_graph_node"]], "get_weight_from_input_tensor() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_weight_from_input_tensor"]], "int8_node_name_reverse() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.int8_node_name_reverse"]], "is_ckpt_format() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.is_ckpt_format"]], "is_saved_model_format() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.is_saved_model_format"]], "iterator_sess_run() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.iterator_sess_run"]], "neural_compressor.adaptor.tf_utils.util": [[148, "module-neural_compressor.adaptor.tf_utils.util"]], "parse_saved_model() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.parse_saved_model"]], "read_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.read_graph"]], "reconstruct_saved_model() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.reconstruct_saved_model"]], "strip_equivalent_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.strip_equivalent_nodes"]], "strip_unused_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.strip_unused_nodes"]], "tf_diagnosis_helper() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.tf_diagnosis_helper"]], "version1_eq_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.version1_lte_version2"]], "write_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.write_graph"]], "neural_compressor.adaptor.torch_utils.auto_round": [[149, "module-neural_compressor.adaptor.torch_utils.auto_round"]], "autoadamround (class in neural_compressor.adaptor.torch_utils.autoround.autoround)": [[150, "neural_compressor.adaptor.torch_utils.autoround.autoround.AutoAdamRound"]], "autooptround (class in neural_compressor.adaptor.torch_utils.autoround.autoround)": [[150, "neural_compressor.adaptor.torch_utils.autoround.autoround.AutoOPTRound"]], "autoround (class in neural_compressor.adaptor.torch_utils.autoround.autoround)": [[150, "neural_compressor.adaptor.torch_utils.autoround.autoround.AutoRound"]], "saveinputs (class in neural_compressor.adaptor.torch_utils.autoround.autoround)": [[150, "neural_compressor.adaptor.torch_utils.autoround.autoround.SaveInputs"]], "wrappermultiblock (class in neural_compressor.adaptor.torch_utils.autoround.autoround)": [[150, "neural_compressor.adaptor.torch_utils.autoround.autoround.WrapperMultiblock"]], "block_forward() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[150, "neural_compressor.adaptor.torch_utils.autoround.autoround.block_forward"]], "check_is_cpu() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[150, "neural_compressor.adaptor.torch_utils.autoround.autoround.check_is_cpu"]], "collect_minmax_scale() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[150, "neural_compressor.adaptor.torch_utils.autoround.autoround.collect_minmax_scale"]], "collect_round_v() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[150, "neural_compressor.adaptor.torch_utils.autoround.autoround.collect_round_v"]], "get_batch_dim() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[150, "neural_compressor.adaptor.torch_utils.autoround.autoround.get_batch_dim"]], "get_block_names() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[150, "neural_compressor.adaptor.torch_utils.autoround.autoround.get_block_names"]], "get_dataloader() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[150, "neural_compressor.adaptor.torch_utils.autoround.autoround.get_dataloader"]], "get_module() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[150, "neural_compressor.adaptor.torch_utils.autoround.autoround.get_module"]], "get_scale_shape() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[150, "neural_compressor.adaptor.torch_utils.autoround.autoround.get_scale_shape"]], "get_tokenizer_function() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[150, "neural_compressor.adaptor.torch_utils.autoround.autoround.get_tokenizer_function"]], "move_input_to_device() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[150, "neural_compressor.adaptor.torch_utils.autoround.autoround.move_input_to_device"]], "neural_compressor.adaptor.torch_utils.autoround.autoround": [[150, "module-neural_compressor.adaptor.torch_utils.autoround.autoround"]], "quant_weight() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[150, "neural_compressor.adaptor.torch_utils.autoround.autoround.quant_weight"]], "quant_weight_actor() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[150, "neural_compressor.adaptor.torch_utils.autoround.autoround.quant_weight_actor"]], "quant_weight_asym() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[150, "neural_compressor.adaptor.torch_utils.autoround.autoround.quant_weight_asym"]], "quant_weight_sym() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[150, "neural_compressor.adaptor.torch_utils.autoround.autoround.quant_weight_sym"]], "quant_weight_w_scale() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[150, "neural_compressor.adaptor.torch_utils.autoround.autoround.quant_weight_w_scale"]], "round_ste() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[150, "neural_compressor.adaptor.torch_utils.autoround.autoround.round_ste"]], "sampling_inputs() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[150, "neural_compressor.adaptor.torch_utils.autoround.autoround.sampling_inputs"]], "set_module() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[150, "neural_compressor.adaptor.torch_utils.autoround.autoround.set_module"]], "unwrapper_block() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[150, "neural_compressor.adaptor.torch_utils.autoround.autoround.unwrapper_block"]], "wrapper_block() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[150, "neural_compressor.adaptor.torch_utils.autoround.autoround.wrapper_block"]], "export_compressed_model() (in module neural_compressor.adaptor.torch_utils.autoround.export)": [[151, "neural_compressor.adaptor.torch_utils.autoround.export.export_compressed_model"]], "neural_compressor.adaptor.torch_utils.autoround.export": [[151, "module-neural_compressor.adaptor.torch_utils.autoround.export"]], "neural_compressor.adaptor.torch_utils.autoround": [[152, "module-neural_compressor.adaptor.torch_utils.autoround"]], "neural_compressor.adaptor.torch_utils.autoround.model_wrapper": [[153, "module-neural_compressor.adaptor.torch_utils.autoround.model_wrapper"]], "sgd (class in neural_compressor.adaptor.torch_utils.autoround.sign_sgd)": [[154, "neural_compressor.adaptor.torch_utils.autoround.sign_sgd.SGD"]], "neural_compressor.adaptor.torch_utils.autoround.sign_sgd": [[154, "module-neural_compressor.adaptor.torch_utils.autoround.sign_sgd"]], "sgd() (in module neural_compressor.adaptor.torch_utils.autoround.sign_sgd)": [[154, "neural_compressor.adaptor.torch_utils.autoround.sign_sgd.sgd"]], "actawareweightquant (class in neural_compressor.adaptor.torch_utils.awq)": [[155, "neural_compressor.adaptor.torch_utils.awq.ActAwareWeightQuant"]], "neural_compressor.adaptor.torch_utils.awq": [[155, "module-neural_compressor.adaptor.torch_utils.awq"]], "bf16modulewrapper (class in neural_compressor.adaptor.torch_utils.bf16_convert)": [[156, "neural_compressor.adaptor.torch_utils.bf16_convert.BF16ModuleWrapper"]], "convert() (in module neural_compressor.adaptor.torch_utils.bf16_convert)": [[156, "neural_compressor.adaptor.torch_utils.bf16_convert.Convert"]], "bf16_symbolic_trace() (in module neural_compressor.adaptor.torch_utils.bf16_convert)": [[156, "neural_compressor.adaptor.torch_utils.bf16_convert.bf16_symbolic_trace"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[156, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "gptq (class in neural_compressor.adaptor.torch_utils.gptq)": [[157, "neural_compressor.adaptor.torch_utils.gptq.GPTQ"]], "gptquantizer (class in neural_compressor.adaptor.torch_utils.gptq)": [[157, "neural_compressor.adaptor.torch_utils.gptq.GPTQuantizer"]], "find_layers() (in module neural_compressor.adaptor.torch_utils.gptq)": [[157, "neural_compressor.adaptor.torch_utils.gptq.find_layers"]], "find_layers_name() (in module neural_compressor.adaptor.torch_utils.gptq)": [[157, "neural_compressor.adaptor.torch_utils.gptq.find_layers_name"]], "is_leaf() (in module neural_compressor.adaptor.torch_utils.gptq)": [[157, "neural_compressor.adaptor.torch_utils.gptq.is_leaf"]], "log_quantizable_layers_per_transformer() (in module neural_compressor.adaptor.torch_utils.gptq)": [[157, "neural_compressor.adaptor.torch_utils.gptq.log_quantizable_layers_per_transformer"]], "neural_compressor.adaptor.torch_utils.gptq": [[157, "module-neural_compressor.adaptor.torch_utils.gptq"]], "quantize() (in module neural_compressor.adaptor.torch_utils.gptq)": [[157, "neural_compressor.adaptor.torch_utils.gptq.quantize"]], "trace_gptq_target_blocks() (in module neural_compressor.adaptor.torch_utils.gptq)": [[157, "neural_compressor.adaptor.torch_utils.gptq.trace_gptq_target_blocks"]], "hessiantrace (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[158, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace"]], "node_collector (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[158, "neural_compressor.adaptor.torch_utils.hawq_metric.Node_collector"]], "compare_weights() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[158, "neural_compressor.adaptor.torch_utils.hawq_metric.compare_weights"]], "hawq_top() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[158, "neural_compressor.adaptor.torch_utils.hawq_metric.hawq_top"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[158, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[159, "module-neural_compressor.adaptor.torch_utils"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant": [[160, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant"]], "pickleerror": [[161, "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle.PickleError"], [584, "neural_compressor.torch.algorithms.layer_wise.modified_pickle.PickleError"]], "picklingerror": [[161, "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle.PicklingError"], [584, "neural_compressor.torch.algorithms.layer_wise.modified_pickle.PicklingError"]], "unpicklingerror": [[161, "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle.UnpicklingError"], [584, "neural_compressor.torch.algorithms.layer_wise.modified_pickle.UnpicklingError"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle": [[161, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle"]], "layerwisequant (class in neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize)": [[162, "neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize.LayerWiseQuant"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize": [[162, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize"]], "load() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load)": [[163, "neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load.load"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load": [[163, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load"]], "dowload_hf_model() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[164, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.dowload_hf_model"]], "get_children() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[164, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.get_children"]], "get_module() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[164, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.get_module"]], "get_named_children() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[164, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.get_named_children"]], "get_super_module_by_name() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[164, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.get_super_module_by_name"]], "load_empty_model() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[164, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.load_empty_model"]], "load_layer_wise_quantized_model() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[164, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.load_layer_wise_quantized_model"]], "load_tensor() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[164, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.load_tensor"]], "load_tensor_from_shard() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[164, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.load_tensor_from_shard"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils": [[164, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.utils"]], "update_module() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[164, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.update_module"]], "ipex_mixed_precision() (in module neural_compressor.adaptor.torch_utils.mixed_precision)": [[165, "neural_compressor.adaptor.torch_utils.mixed_precision.ipex_mixed_precision"]], "neural_compressor.adaptor.torch_utils.mixed_precision": [[165, "module-neural_compressor.adaptor.torch_utils.mixed_precision"]], "fakeaffinetensorquantfunction (class in neural_compressor.adaptor.torch_utils.model_wrapper)": [[166, "neural_compressor.adaptor.torch_utils.model_wrapper.FakeAffineTensorQuantFunction"]], "mullinear (class in neural_compressor.adaptor.torch_utils.model_wrapper)": [[166, "neural_compressor.adaptor.torch_utils.model_wrapper.MulLinear"]], "teqlinearfakequant (class in neural_compressor.adaptor.torch_utils.model_wrapper)": [[166, "neural_compressor.adaptor.torch_utils.model_wrapper.TEQLinearFakeQuant"]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[166, "module-neural_compressor.adaptor.torch_utils.model_wrapper"]], "transformerbasedmodelblockpatterndetector (class in neural_compressor.adaptor.torch_utils.pattern_detector)": [[167, "neural_compressor.adaptor.torch_utils.pattern_detector.TransformerBasedModelBlockPatternDetector"]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[167, "module-neural_compressor.adaptor.torch_utils.pattern_detector"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[168, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "symbolic_trace() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[168, "neural_compressor.adaptor.torch_utils.symbolic_trace.symbolic_trace"]], "trace_and_fuse_sub_graph() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[168, "neural_compressor.adaptor.torch_utils.symbolic_trace.trace_and_fuse_sub_graph"]], "tequantizer (class in neural_compressor.adaptor.torch_utils.teq)": [[169, "neural_compressor.adaptor.torch_utils.teq.TEQuantizer"]], "neural_compressor.adaptor.torch_utils.teq": [[169, "module-neural_compressor.adaptor.torch_utils.teq"]], "append_attr() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.append_attr"]], "auto_copy() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.auto_copy"]], "calculate_quant_min_max() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.calculate_quant_min_max"]], "calibration() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.calibration"]], "check_cfg_and_qconfig() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.check_cfg_and_qconfig"]], "collate_torch_preds() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.collate_torch_preds"]], "collect_weight_info() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.collect_weight_info"]], "fetch_module() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.fetch_module"]], "forward_wrapper() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.forward_wrapper"]], "generate_activation_observer() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.generate_activation_observer"]], "get_absorb_layers() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_absorb_layers"]], "get_block_prefix() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_block_prefix"]], "get_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_depth"]], "get_dict_at_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_dict_at_depth"]], "get_element_under_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_element_under_depth"]], "get_embedding_contiguous() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_embedding_contiguous"]], "get_example_input() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_example_input"]], "get_fallback_order() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_fallback_order"]], "get_hidden_states() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_hidden_states"]], "get_module_input_output() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_module_input_output"]], "get_mse_order_per_fp32() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_fp32"]], "get_mse_order_per_int8() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_int8"]], "get_op_type_by_name() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_op_type_by_name"]], "get_quantizable_ops_from_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_quantizable_ops_from_cfgs"]], "get_torch_version() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_torch_version"]], "input2tuple() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.input2tuple"]], "is_fused_module() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.is_fused_module"]], "match_datatype_pattern() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.match_datatype_pattern"]], "move_input_device() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.move_input_device"]], "neural_compressor.adaptor.torch_utils.util": [[170, "module-neural_compressor.adaptor.torch_utils.util"]], "paser_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.paser_cfgs"]], "set_module() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.set_module"]], "simple_inference() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.simple_inference"]], "update_sq_scale() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.update_sq_scale"]], "neural_compressor.adaptor.torch_utils.waq.auto_alpha": [[171, "module-neural_compressor.adaptor.torch_utils.waq.auto_alpha"]], "neural_compressor.adaptor.torch_utils.waq.calibration": [[172, "module-neural_compressor.adaptor.torch_utils.waq.calibration"]], "neural_compressor.adaptor.torch_utils.waq.graph_trace": [[173, "module-neural_compressor.adaptor.torch_utils.waq.graph_trace"]], "neural_compressor.adaptor.torch_utils.waq": [[174, "module-neural_compressor.adaptor.torch_utils.waq"]], "torchsmoothquant (class in neural_compressor.adaptor.torch_utils.waq.smooth_quant)": [[175, "neural_compressor.adaptor.torch_utils.waq.smooth_quant.TorchSmoothQuant"]], "neural_compressor.adaptor.torch_utils.waq.smooth_quant": [[175, "module-neural_compressor.adaptor.torch_utils.waq.smooth_quant"]], "get_module() (in module neural_compressor.adaptor.torch_utils.waq.utils)": [[176, "neural_compressor.adaptor.torch_utils.waq.utils.get_module"]], "neural_compressor.adaptor.torch_utils.waq.utils": [[176, "module-neural_compressor.adaptor.torch_utils.waq.utils"]], "register_autotune() (in module neural_compressor.adaptor.torch_utils.waq.utils)": [[176, "neural_compressor.adaptor.torch_utils.waq.utils.register_autotune"]], "reshape_in_channel_to_last() (in module neural_compressor.adaptor.torch_utils.waq.utils)": [[176, "neural_compressor.adaptor.torch_utils.waq.utils.reshape_in_channel_to_last"]], "reshape_scale_as_input() (in module neural_compressor.adaptor.torch_utils.waq.utils)": [[176, "neural_compressor.adaptor.torch_utils.waq.utils.reshape_scale_as_input"]], "reshape_scale_as_weight() (in module neural_compressor.adaptor.torch_utils.waq.utils)": [[176, "neural_compressor.adaptor.torch_utils.waq.utils.reshape_scale_as_weight"]], "set_module() (in module neural_compressor.adaptor.torch_utils.waq.utils)": [[176, "neural_compressor.adaptor.torch_utils.waq.utils.set_module"]], "autoround_quantize() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[177, "neural_compressor.adaptor.torch_utils.weight_only.autoround_quantize"]], "awq_quantize() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[177, "neural_compressor.adaptor.torch_utils.weight_only.awq_quantize"]], "gptq_quantize() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[177, "neural_compressor.adaptor.torch_utils.weight_only.gptq_quantize"]], "neural_compressor.adaptor.torch_utils.weight_only": [[177, "module-neural_compressor.adaptor.torch_utils.weight_only"]], "qdq_weight_actor() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[177, "neural_compressor.adaptor.torch_utils.weight_only.qdq_weight_actor"]], "qdq_weight_asym() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[177, "neural_compressor.adaptor.torch_utils.weight_only.qdq_weight_asym"]], "qdq_weight_sym() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[177, "neural_compressor.adaptor.torch_utils.weight_only.qdq_weight_sym"]], "quant_weight() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[177, "neural_compressor.adaptor.torch_utils.weight_only.quant_weight"]], "quant_weight_w_scale() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[177, "neural_compressor.adaptor.torch_utils.weight_only.quant_weight_w_scale"]], "quantize_4bit() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[177, "neural_compressor.adaptor.torch_utils.weight_only.quantize_4bit"]], "rtn_quantize() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[177, "neural_compressor.adaptor.torch_utils.weight_only.rtn_quantize"]], "search_clip() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[177, "neural_compressor.adaptor.torch_utils.weight_only.search_clip"]], "teq_quantize() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[177, "neural_compressor.adaptor.torch_utils.weight_only.teq_quantize"]], "algorithms (class in neural_compressor.algorithm.algorithm)": [[178, "neural_compressor.algorithm.algorithm.ALGORITHMS"]], "algorithm (class in neural_compressor.algorithm.algorithm)": [[178, "neural_compressor.algorithm.algorithm.Algorithm"]], "algorithmscheduler (class in neural_compressor.algorithm.algorithm)": [[178, "neural_compressor.algorithm.algorithm.AlgorithmScheduler"]], "algorithm_registry() (in module neural_compressor.algorithm.algorithm)": [[178, "neural_compressor.algorithm.algorithm.algorithm_registry"]], "neural_compressor.algorithm.algorithm": [[178, "module-neural_compressor.algorithm.algorithm"]], "fastbiascorrection (class in neural_compressor.algorithm.fast_bias_correction)": [[179, "neural_compressor.algorithm.fast_bias_correction.FastBiasCorrection"]], "neural_compressor.algorithm.fast_bias_correction": [[179, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[180, "module-neural_compressor.algorithm"]], "smoothquant (class in neural_compressor.algorithm.smooth_quant)": [[181, "neural_compressor.algorithm.smooth_quant.SmoothQuant"]], "neural_compressor.algorithm.smooth_quant": [[181, "module-neural_compressor.algorithm.smooth_quant"]], "weightcorrection (class in neural_compressor.algorithm.weight_correction)": [[182, "neural_compressor.algorithm.weight_correction.WeightCorrection"]], "neural_compressor.algorithm.weight_correction": [[182, "module-neural_compressor.algorithm.weight_correction"]], "benchmark_with_raw_cmd() (in module neural_compressor.benchmark)": [[183, "neural_compressor.benchmark.benchmark_with_raw_cmd"]], "call_one() (in module neural_compressor.benchmark)": [[183, "neural_compressor.benchmark.call_one"]], "config_instance() (in module neural_compressor.benchmark)": [[183, "neural_compressor.benchmark.config_instance"]], "fit() (in module neural_compressor.benchmark)": [[183, "neural_compressor.benchmark.fit"]], "generate_prefix() (in module neural_compressor.benchmark)": [[183, "neural_compressor.benchmark.generate_prefix"]], "get_architecture() (in module neural_compressor.benchmark)": [[183, "neural_compressor.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.benchmark)": [[183, "neural_compressor.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.benchmark)": [[183, "neural_compressor.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.benchmark)": [[183, "neural_compressor.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.benchmark)": [[183, "neural_compressor.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.benchmark)": [[183, "neural_compressor.benchmark.get_threads_per_core"]], "neural_compressor.benchmark": [[183, "module-neural_compressor.benchmark"]], "profile() (in module neural_compressor.benchmark)": [[183, "neural_compressor.benchmark.profile"]], "run_instance() (in module neural_compressor.benchmark)": [[183, "neural_compressor.benchmark.run_instance"]], "set_all_env_var() (in module neural_compressor.benchmark)": [[183, "neural_compressor.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.benchmark)": [[183, "neural_compressor.benchmark.set_env_var"]], "summary_benchmark() (in module neural_compressor.benchmark)": [[183, "neural_compressor.benchmark.summary_benchmark"]], "baseconfig (class in neural_compressor.common.base_config)": [[184, "neural_compressor.common.base_config.BaseConfig"]], "composableconfig (class in neural_compressor.common.base_config)": [[184, "neural_compressor.common.base_config.ComposableConfig"]], "neural_compressor.common.base_config": [[184, "module-neural_compressor.common.base_config"]], "register_config() (in module neural_compressor.common.base_config)": [[184, "neural_compressor.common.base_config.register_config"]], "register_supported_configs_for_fwk() (in module neural_compressor.common.base_config)": [[184, "neural_compressor.common.base_config.register_supported_configs_for_fwk"]], "evaluator (class in neural_compressor.common.base_tuning)": [[185, "neural_compressor.common.base_tuning.Evaluator"]], "sequentialsampler (class in neural_compressor.common.base_tuning)": [[185, "neural_compressor.common.base_tuning.SequentialSampler"]], "tuningconfig (class in neural_compressor.common.base_tuning)": [[185, "neural_compressor.common.base_tuning.TuningConfig"]], "neural_compressor.common.base_tuning": [[185, "module-neural_compressor.common.base_tuning"]], "neural_compressor.common": [[186, "module-neural_compressor.common"]], "paramlevel (class in neural_compressor.common.tuning_param)": [[187, "neural_compressor.common.tuning_param.ParamLevel"]], "tuningparam (class in neural_compressor.common.tuning_param)": [[187, "neural_compressor.common.tuning_param.TuningParam"]], "neural_compressor.common.tuning_param": [[187, "module-neural_compressor.common.tuning_param"]], "neural_compressor.common.utils.constants": [[188, "module-neural_compressor.common.utils.constants"]], "neural_compressor.common.utils": [[189, "module-neural_compressor.common.utils"]], "logger (class in neural_compressor.common.utils.logger)": [[190, "neural_compressor.common.utils.logger.Logger"]], "tuninglogger (class in neural_compressor.common.utils.logger)": [[190, "neural_compressor.common.utils.logger.TuningLogger"]], "neural_compressor.common.utils.logger": [[190, "module-neural_compressor.common.utils.logger"]], "dump_elapsed_time() (in module neural_compressor.common.utils.utility)": [[191, "neural_compressor.common.utils.utility.dump_elapsed_time"]], "neural_compressor.common.utils.utility": [[191, "module-neural_compressor.common.utils.utility"]], "set_random_seed() (in module neural_compressor.common.utils.utility)": [[191, "neural_compressor.common.utils.utility.set_random_seed"]], "set_resume_from() (in module neural_compressor.common.utils.utility)": [[191, "neural_compressor.common.utils.utility.set_resume_from"]], "set_tensorboard() (in module neural_compressor.common.utils.utility)": [[191, "neural_compressor.common.utils.utility.set_tensorboard"]], "set_workspace() (in module neural_compressor.common.utils.utility)": [[191, "neural_compressor.common.utils.utility.set_workspace"]], "basecallbacks (class in neural_compressor.compression.callbacks)": [[192, "neural_compressor.compression.callbacks.BaseCallbacks"]], "distillationcallbacks (class in neural_compressor.compression.callbacks)": [[192, "neural_compressor.compression.callbacks.DistillationCallbacks"]], "pruningcallbacks (class in neural_compressor.compression.callbacks)": [[192, "neural_compressor.compression.callbacks.PruningCallbacks"]], "quantizationawaretrainingcallbacks (class in neural_compressor.compression.callbacks)": [[192, "neural_compressor.compression.callbacks.QuantizationAwareTrainingCallbacks"]], "_epoch_ran (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[192, "neural_compressor.compression.callbacks.DistillationCallbacks._epoch_ran"]], "best_model (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[192, "neural_compressor.compression.callbacks.DistillationCallbacks.best_model"]], "best_score (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[192, "neural_compressor.compression.callbacks.DistillationCallbacks.best_score"]], "eval_frequency (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[192, "neural_compressor.compression.callbacks.DistillationCallbacks.eval_frequency"]], "neural_compressor.compression.callbacks": [[192, "module-neural_compressor.compression.callbacks"]], "criterions (class in neural_compressor.compression.distillation.criterions)": [[193, "neural_compressor.compression.distillation.criterions.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[193, "neural_compressor.compression.distillation.criterions.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.compression.distillation.criterions)": [[193, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[193, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationLoss"]], "pytorchcriterions (class in neural_compressor.compression.distillation.criterions)": [[193, "neural_compressor.compression.distillation.criterions.PyTorchCriterions"]], "pytorchcrossentropyloss (class in neural_compressor.compression.distillation.criterions)": [[193, "neural_compressor.compression.distillation.criterions.PyTorchCrossEntropyLoss"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[193, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[193, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[193, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[193, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLossWrapper"]], "pytorchselfknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[193, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLoss"]], "pytorchselfknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[193, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[193, "neural_compressor.compression.distillation.criterions.SelfKnowledgeDistillationLoss"]], "tensorflowcrossentropyloss (class in neural_compressor.compression.distillation.criterions)": [[193, "neural_compressor.compression.distillation.criterions.TensorFlowCrossEntropyLoss"]], "tensorflowsparsecategoricalcrossentropy (class in neural_compressor.compression.distillation.criterions)": [[193, "neural_compressor.compression.distillation.criterions.TensorFlowSparseCategoricalCrossentropy"]], "tensorflowcriterions (class in neural_compressor.compression.distillation.criterions)": [[193, "neural_compressor.compression.distillation.criterions.TensorflowCriterions"]], "tensorflowknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[193, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLoss"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.compression.distillation.criterions)": [[193, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossExternal"]], "tensorflowknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[193, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossWrapper"]], "criterion_registry() (in module neural_compressor.compression.distillation.criterions)": [[193, "neural_compressor.compression.distillation.criterions.criterion_registry"]], "neural_compressor.compression.distillation.criterions": [[193, "module-neural_compressor.compression.distillation.criterions"]], "neural_compressor.compression.distillation": [[194, "module-neural_compressor.compression.distillation"]], "optimizers (class in neural_compressor.compression.distillation.optimizers)": [[195, "neural_compressor.compression.distillation.optimizers.Optimizers"]], "pytorchoptimizers (class in neural_compressor.compression.distillation.optimizers)": [[195, "neural_compressor.compression.distillation.optimizers.PyTorchOptimizers"]], "pytorchsgd (class in neural_compressor.compression.distillation.optimizers)": [[195, "neural_compressor.compression.distillation.optimizers.PyTorchSGD"]], "tensorflowadam (class in neural_compressor.compression.distillation.optimizers)": [[195, "neural_compressor.compression.distillation.optimizers.TensorFlowAdam"]], "tensorflowadamw (class in neural_compressor.compression.distillation.optimizers)": [[195, "neural_compressor.compression.distillation.optimizers.TensorFlowAdamW"]], "tensorflowsgd (class in neural_compressor.compression.distillation.optimizers)": [[195, "neural_compressor.compression.distillation.optimizers.TensorFlowSGD"]], "tensorflowoptimizers (class in neural_compressor.compression.distillation.optimizers)": [[195, "neural_compressor.compression.distillation.optimizers.TensorflowOptimizers"]], "neural_compressor.compression.distillation.optimizers": [[195, "module-neural_compressor.compression.distillation.optimizers"]], "optimizer_registry() (in module neural_compressor.compression.distillation.optimizers)": [[195, "neural_compressor.compression.distillation.optimizers.optimizer_registry"]], "get_activation() (in module neural_compressor.compression.distillation.utility)": [[196, "neural_compressor.compression.distillation.utility.get_activation"]], "neural_compressor.compression.distillation.utility": [[196, "module-neural_compressor.compression.distillation.utility"]], "record_output() (in module neural_compressor.compression.distillation.utility)": [[196, "neural_compressor.compression.distillation.utility.record_output"]], "neural_compressor.compression.hpo": [[197, "module-neural_compressor.compression.hpo"]], "neural_compressor.compression.hpo.sa_optimizer": [[198, "module-neural_compressor.compression.hpo.sa_optimizer"]], "bayesianoptimizationsearcher (class in neural_compressor.compression.hpo.search_algorithms)": [[199, "neural_compressor.compression.hpo.search_algorithms.BayesianOptimizationSearcher"]], "gridsearcher (class in neural_compressor.compression.hpo.search_algorithms)": [[199, "neural_compressor.compression.hpo.search_algorithms.GridSearcher"]], "randomsearcher (class in neural_compressor.compression.hpo.search_algorithms)": [[199, "neural_compressor.compression.hpo.search_algorithms.RandomSearcher"]], "searcher (class in neural_compressor.compression.hpo.search_algorithms)": [[199, "neural_compressor.compression.hpo.search_algorithms.Searcher"]], "xgbsearcher (class in neural_compressor.compression.hpo.search_algorithms)": [[199, "neural_compressor.compression.hpo.search_algorithms.XgbSearcher"]], "neural_compressor.compression.hpo.search_algorithms": [[199, "module-neural_compressor.compression.hpo.search_algorithms"]], "register_searcher() (in module neural_compressor.compression.hpo.search_algorithms)": [[199, "neural_compressor.compression.hpo.search_algorithms.register_searcher"]], "basesearchspace (class in neural_compressor.compression.hpo.search_space)": [[200, "neural_compressor.compression.hpo.search_space.BaseSearchSpace"]], "continuoussearchspace (class in neural_compressor.compression.hpo.search_space)": [[200, "neural_compressor.compression.hpo.search_space.ContinuousSearchSpace"]], "discretesearchspace (class in neural_compressor.compression.hpo.search_space)": [[200, "neural_compressor.compression.hpo.search_space.DiscreteSearchSpace"]], "searchspace (class in neural_compressor.compression.hpo.search_space)": [[200, "neural_compressor.compression.hpo.search_space.SearchSpace"]], "neural_compressor.compression.hpo.search_space": [[200, "module-neural_compressor.compression.hpo.search_space"]], "register_searchspace() (in module neural_compressor.compression.hpo.search_space)": [[200, "neural_compressor.compression.hpo.search_space.register_searchspace"]], "neural_compressor.compression": [[201, "module-neural_compressor.compression"]], "blockmaskcriterion (class in neural_compressor.compression.pruner.criteria)": [[202, "neural_compressor.compression.pruner.criteria.BlockMaskCriterion"]], "gradientcriterion (class in neural_compressor.compression.pruner.criteria)": [[202, "neural_compressor.compression.pruner.criteria.GradientCriterion"]], "magnitudecriterion (class in neural_compressor.compression.pruner.criteria)": [[202, "neural_compressor.compression.pruner.criteria.MagnitudeCriterion"]], "pruningcriterion (class in neural_compressor.compression.pruner.criteria)": [[202, "neural_compressor.compression.pruner.criteria.PruningCriterion"]], "retrainfreecriterion (class in neural_compressor.compression.pruner.criteria)": [[202, "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion"]], "snipcriterion (class in neural_compressor.compression.pruner.criteria)": [[202, "neural_compressor.compression.pruner.criteria.SnipCriterion"]], "snipmomentumcriterion (class in neural_compressor.compression.pruner.criteria)": [[202, "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion"]], "get_criterion() (in module neural_compressor.compression.pruner.criteria)": [[202, "neural_compressor.compression.pruner.criteria.get_criterion"]], "neural_compressor.compression.pruner.criteria": [[202, "module-neural_compressor.compression.pruner.criteria"]], "register_criterion() (in module neural_compressor.compression.pruner.criteria)": [[202, "neural_compressor.compression.pruner.criteria.register_criterion"]], "scores (neural_compressor.compression.pruner.criteria.blockmaskcriterion attribute)": [[202, "neural_compressor.compression.pruner.criteria.BlockMaskCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.gradientcriterion attribute)": [[202, "neural_compressor.compression.pruner.criteria.GradientCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.magnitudecriterion attribute)": [[202, "neural_compressor.compression.pruner.criteria.MagnitudeCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.pruningcriterion attribute)": [[202, "neural_compressor.compression.pruner.criteria.PruningCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.retrainfreecriterion attribute)": [[202, "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.snipcriterion attribute)": [[202, "neural_compressor.compression.pruner.criteria.SnipCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.snipmomentumcriterion attribute)": [[202, "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion.scores"]], "dsnot() (in module neural_compressor.compression.pruner.dsnot)": [[203, "neural_compressor.compression.pruner.dsnot.DSnoT"]], "neural_compressor.compression.pruner.dsnot": [[203, "module-neural_compressor.compression.pruner.dsnot"]], "return_reorder_indice() (in module neural_compressor.compression.pruner.dsnot)": [[203, "neural_compressor.compression.pruner.dsnot.return_reorder_indice"]], "neural_compressor.compression.pruner": [[204, "module-neural_compressor.compression.pruner"]], "prepare_pruning() (in module neural_compressor.compression.pruner)": [[204, "neural_compressor.compression.pruner.prepare_pruning"]], "save() (in module neural_compressor.compression.pruner)": [[204, "neural_compressor.compression.pruner.save"]], "generate_ffn2_pruning_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[205, "neural_compressor.compression.pruner.model_slim.auto_slim.generate_ffn2_pruning_config"]], "generate_mha_pruning_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[205, "neural_compressor.compression.pruner.model_slim.auto_slim.generate_mha_pruning_config"]], "model_slim() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[205, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim"]], "model_slim_ffn2() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[205, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim_ffn2"]], "model_slim_mha() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[205, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim_mha"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[205, "module-neural_compressor.compression.pruner.model_slim.auto_slim"]], "parse_auto_slim_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[205, "neural_compressor.compression.pruner.model_slim.auto_slim.parse_auto_slim_config"]], "neural_compressor.compression.pruner.model_slim": [[206, "module-neural_compressor.compression.pruner.model_slim"]], "classifierheadsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[207, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher"]], "classifierheadsearchertf (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[207, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF"]], "jitbasicsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[207, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher"]], "linear2linearsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[207, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher"]], "recipesearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[207, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher"]], "selfmhasearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[207, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher"]], "current_pattern (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[207, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.current_pattern"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[207, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[207, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[207, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[207, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[207, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.device"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[207, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[207, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[207, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[207, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[207, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.flatten_static_graph"]], "get_attributes() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[207, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.get_attributes"]], "get_common_module() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[207, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.get_common_module"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[207, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[207, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[207, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[207, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[207, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[207, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.model"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[207, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"]], "print_iterables() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[207, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.print_iterables"]], "recipe (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[207, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.recipe"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[207, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.searching_results"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[207, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.searching_results"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[207, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.searching_results"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[207, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[207, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[207, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[207, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[207, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.static_graph"]], "target_layers (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[207, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.target_layers"]], "target_layers (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[207, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.target_layers"]], "target_op_lut (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[207, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.target_op_lut"]], "targets (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[207, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.targets"]], "linearcompression (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[208, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression"]], "linearcompressioniterator (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[208, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator"]], "postcompressionutils (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[208, "neural_compressor.compression.pruner.model_slim.weight_slim.PostCompressionUtils"]], "device (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[208, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.device"]], "layer_1 (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[208, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.layer_1"]], "layer_2 (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[208, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.layer_2"]], "linear_patterns (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompressioniterator attribute)": [[208, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator.linear_patterns"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[208, "module-neural_compressor.compression.pruner.model_slim.weight_slim"]], "basepattern (class in neural_compressor.compression.pruner.patterns.base)": [[209, "neural_compressor.compression.pruner.patterns.base.BasePattern"]], "kerasbasepattern (class in neural_compressor.compression.pruner.patterns.base)": [[209, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern"]], "pytorchbasepattern (class in neural_compressor.compression.pruner.patterns.base)": [[209, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern"]], "config (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[209, "neural_compressor.compression.pruner.patterns.base.BasePattern.config"]], "config (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[209, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.config"]], "config (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[209, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.config"]], "invalid_layers (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[209, "neural_compressor.compression.pruner.patterns.base.BasePattern.invalid_layers"]], "invalid_layers (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[209, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.invalid_layers"]], "invalid_layers (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[209, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.invalid_layers"]], "is_global (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[209, "neural_compressor.compression.pruner.patterns.base.BasePattern.is_global"]], "is_global (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[209, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.is_global"]], "is_global (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[209, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.is_global"]], "keep_mask_layers (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[209, "neural_compressor.compression.pruner.patterns.base.BasePattern.keep_mask_layers"]], "keep_mask_layers (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[209, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.keep_mask_layers"]], "keep_mask_layers (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[209, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.keep_mask_layers"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[209, "neural_compressor.compression.pruner.patterns.base.BasePattern.max_sparsity_ratio_per_op"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[209, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.max_sparsity_ratio_per_op"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[209, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.max_sparsity_ratio_per_op"]], "min_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[209, "neural_compressor.compression.pruner.patterns.base.BasePattern.min_sparsity_ratio_per_op"]], "min_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[209, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.min_sparsity_ratio_per_op"]], "min_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[209, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.min_sparsity_ratio_per_op"]], "modules (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[209, "neural_compressor.compression.pruner.patterns.base.BasePattern.modules"]], "modules (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[209, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.modules"]], "modules (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[209, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.modules"]], "neural_compressor.compression.pruner.patterns.base": [[209, "module-neural_compressor.compression.pruner.patterns.base"]], "pattern (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[209, "neural_compressor.compression.pruner.patterns.base.BasePattern.pattern"]], "pattern (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[209, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.pattern"]], "pattern (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[209, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.pattern"]], "register_pattern() (in module neural_compressor.compression.pruner.patterns.base)": [[209, "neural_compressor.compression.pruner.patterns.base.register_pattern"]], "target_sparsity (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[209, "neural_compressor.compression.pruner.patterns.base.BasePattern.target_sparsity"]], "target_sparsity (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[209, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.target_sparsity"]], "target_sparsity (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[209, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.target_sparsity"]], "get_pattern() (in module neural_compressor.compression.pruner.patterns)": [[210, "neural_compressor.compression.pruner.patterns.get_pattern"]], "neural_compressor.compression.pruner.patterns": [[210, "module-neural_compressor.compression.pruner.patterns"]], "m (neural_compressor.compression.pruner.patterns.mha.patternmha attribute)": [[211, "neural_compressor.compression.pruner.patterns.mha.PatternMHA.M"]], "n (neural_compressor.compression.pruner.patterns.mha.patternmha attribute)": [[211, "neural_compressor.compression.pruner.patterns.mha.PatternMHA.N"]], "patternmha (class in neural_compressor.compression.pruner.patterns.mha)": [[211, "neural_compressor.compression.pruner.patterns.mha.PatternMHA"]], "neural_compressor.compression.pruner.patterns.mha": [[211, "module-neural_compressor.compression.pruner.patterns.mha"]], "m (neural_compressor.compression.pruner.patterns.ninm.pytorchpatternninm attribute)": [[212, "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM.M"]], "n (neural_compressor.compression.pruner.patterns.ninm.pytorchpatternninm attribute)": [[212, "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM.N"]], "pytorchpatternninm (class in neural_compressor.compression.pruner.patterns.ninm)": [[212, "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM"]], "neural_compressor.compression.pruner.patterns.ninm": [[212, "module-neural_compressor.compression.pruner.patterns.ninm"]], "keraspatternnxm (class in neural_compressor.compression.pruner.patterns.nxm)": [[213, "neural_compressor.compression.pruner.patterns.nxm.KerasPatternNxM"]], "pytorchpatternnxm (class in neural_compressor.compression.pruner.patterns.nxm)": [[213, "neural_compressor.compression.pruner.patterns.nxm.PytorchPatternNxM"]], "block_size (neural_compressor.compression.pruner.patterns.nxm.keraspatternnxm attribute)": [[213, "neural_compressor.compression.pruner.patterns.nxm.KerasPatternNxM.block_size"]], "block_size (neural_compressor.compression.pruner.patterns.nxm.pytorchpatternnxm attribute)": [[213, "neural_compressor.compression.pruner.patterns.nxm.PytorchPatternNxM.block_size"]], "neural_compressor.compression.pruner.patterns.nxm": [[213, "module-neural_compressor.compression.pruner.patterns.nxm"]], "basepruner (class in neural_compressor.compression.pruner.pruners.base)": [[214, "neural_compressor.compression.pruner.pruners.base.BasePruner"]], "kerasbasepruner (class in neural_compressor.compression.pruner.pruners.base)": [[214, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner"]], "pytorchbasepruner (class in neural_compressor.compression.pruner.pruners.base)": [[214, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner"]], "config (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[214, "neural_compressor.compression.pruner.pruners.base.BasePruner.config"]], "config (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[214, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.config"]], "config (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[214, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.config"]], "current_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[214, "neural_compressor.compression.pruner.pruners.base.BasePruner.current_sparsity_ratio"]], "current_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[214, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.current_sparsity_ratio"]], "current_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[214, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.current_sparsity_ratio"]], "end_step (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[214, "neural_compressor.compression.pruner.pruners.base.BasePruner.end_step"]], "end_step (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[214, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.end_step"]], "end_step (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[214, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.end_step"]], "global_step (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[214, "neural_compressor.compression.pruner.pruners.base.BasePruner.global_step"]], "global_step (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[214, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.global_step"]], "global_step (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[214, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.global_step"]], "masks (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[214, "neural_compressor.compression.pruner.pruners.base.BasePruner.masks"]], "masks (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[214, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.masks"]], "masks (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[214, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.masks"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[214, "neural_compressor.compression.pruner.pruners.base.BasePruner.max_sparsity_ratio_per_op"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[214, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.max_sparsity_ratio_per_op"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[214, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.max_sparsity_ratio_per_op"]], "modules (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[214, "neural_compressor.compression.pruner.pruners.base.BasePruner.modules"]], "modules (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[214, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.modules"]], "modules (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[214, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.modules"]], "neural_compressor.compression.pruner.pruners.base": [[214, "module-neural_compressor.compression.pruner.pruners.base"]], "pattern (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[214, "neural_compressor.compression.pruner.pruners.base.BasePruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[214, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[214, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.pattern"]], "pruning_frequency (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[214, "neural_compressor.compression.pruner.pruners.base.BasePruner.pruning_frequency"]], "pruning_frequency (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[214, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.pruning_frequency"]], "pruning_frequency (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[214, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.pruning_frequency"]], "register_pruner() (in module neural_compressor.compression.pruner.pruners.base)": [[214, "neural_compressor.compression.pruner.pruners.base.register_pruner"]], "scheduler (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[214, "neural_compressor.compression.pruner.pruners.base.BasePruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[214, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[214, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.scheduler"]], "scores (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[214, "neural_compressor.compression.pruner.pruners.base.BasePruner.scores"]], "scores (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[214, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.scores"]], "scores (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[214, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.scores"]], "start_step (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[214, "neural_compressor.compression.pruner.pruners.base.BasePruner.start_step"]], "start_step (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[214, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.start_step"]], "start_step (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[214, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.start_step"]], "target_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[214, "neural_compressor.compression.pruner.pruners.base.BasePruner.target_sparsity_ratio"]], "target_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[214, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.target_sparsity_ratio"]], "target_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[214, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.target_sparsity_ratio"]], "kerasbasicpruner (class in neural_compressor.compression.pruner.pruners.basic)": [[215, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner"]], "pytorchbasicpruner (class in neural_compressor.compression.pruner.pruners.basic)": [[215, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner"]], "criterion (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[215, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.criterion"]], "criterion (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[215, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.criterion"]], "neural_compressor.compression.pruner.pruners.basic": [[215, "module-neural_compressor.compression.pruner.pruners.basic"]], "pattern (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[215, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[215, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.pattern"]], "reg (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[215, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.reg"]], "reg (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[215, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.reg"]], "scheduler (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[215, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[215, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.scheduler"]], "pytorchblockmaskpruner (class in neural_compressor.compression.pruner.pruners.block_mask)": [[216, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner"]], "criterion (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[216, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.criterion"]], "neural_compressor.compression.pruner.pruners.block_mask": [[216, "module-neural_compressor.compression.pruner.pruners.block_mask"]], "pattern (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[216, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.pattern"]], "reg (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[216, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.reg"]], "scheduler (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[216, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.scheduler"]], "get_pruner() (in module neural_compressor.compression.pruner.pruners)": [[217, "neural_compressor.compression.pruner.pruners.get_pruner"]], "neural_compressor.compression.pruner.pruners": [[217, "module-neural_compressor.compression.pruner.pruners"]], "parse_valid_pruner_types() (in module neural_compressor.compression.pruner.pruners)": [[217, "neural_compressor.compression.pruner.pruners.parse_valid_pruner_types"]], "pythonmultiheadattentionpruner (class in neural_compressor.compression.pruner.pruners.mha)": [[218, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner"]], "head_masks (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[218, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.head_masks"]], "linear_layers (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[218, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.linear_layers"]], "mha_compressions (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[218, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.mha_compressions"]], "mha_scores (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[218, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.mha_scores"]], "neural_compressor.compression.pruner.pruners.mha": [[218, "module-neural_compressor.compression.pruner.pruners.mha"]], "pytorchpatternlockpruner (class in neural_compressor.compression.pruner.pruners.pattern_lock)": [[219, "neural_compressor.compression.pruner.pruners.pattern_lock.PytorchPatternLockPruner"]], "neural_compressor.compression.pruner.pruners.pattern_lock": [[219, "module-neural_compressor.compression.pruner.pruners.pattern_lock"]], "pytorchprogressivepruner (class in neural_compressor.compression.pruner.pruners.progressive)": [[220, "neural_compressor.compression.pruner.pruners.progressive.PytorchProgressivePruner"]], "neural_compressor.compression.pruner.pruners.progressive": [[220, "module-neural_compressor.compression.pruner.pruners.progressive"]], "pytorchretrainfreepruner (class in neural_compressor.compression.pruner.pruners.retrain_free)": [[221, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner"]], "criterion (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[221, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.criterion"]], "neural_compressor.compression.pruner.pruners.retrain_free": [[221, "module-neural_compressor.compression.pruner.pruners.retrain_free"]], "pattern (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[221, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.pattern"]], "reg (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[221, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.reg"]], "scheduler (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[221, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.scheduler"]], "sparsegptpruner (class in neural_compressor.compression.pruner.pruners.sparse_gpt)": [[222, "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner"]], "criterion (neural_compressor.compression.pruner.pruners.sparse_gpt.sparsegptpruner attribute)": [[222, "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner.criterion"]], "neural_compressor.compression.pruner.pruners.sparse_gpt": [[222, "module-neural_compressor.compression.pruner.pruners.sparse_gpt"]], "pattern (neural_compressor.compression.pruner.pruners.sparse_gpt.sparsegptpruner attribute)": [[222, "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner.pattern"]], "reg (neural_compressor.compression.pruner.pruners.sparse_gpt.sparsegptpruner attribute)": [[222, "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner.reg"]], "scheduler (neural_compressor.compression.pruner.pruners.sparse_gpt.sparsegptpruner attribute)": [[222, "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner.scheduler"]], "basepruning (class in neural_compressor.compression.pruner.pruning)": [[223, "neural_compressor.compression.pruner.pruning.BasePruning"]], "basicpruning (class in neural_compressor.compression.pruner.pruning)": [[223, "neural_compressor.compression.pruner.pruning.BasicPruning"]], "retrainfreepruning (class in neural_compressor.compression.pruner.pruning)": [[223, "neural_compressor.compression.pruner.pruning.RetrainFreePruning"]], "sparsegptpruning (class in neural_compressor.compression.pruner.pruning)": [[223, "neural_compressor.compression.pruner.pruning.SparseGPTPruning"]], "config_file_path (neural_compressor.compression.pruner.pruning.basepruning attribute)": [[223, "neural_compressor.compression.pruner.pruning.BasePruning.config_file_path"]], "config_file_path (neural_compressor.compression.pruner.pruning.basicpruning attribute)": [[223, "neural_compressor.compression.pruner.pruning.BasicPruning.config_file_path"]], "config_file_path (neural_compressor.compression.pruner.pruning.retrainfreepruning attribute)": [[223, "neural_compressor.compression.pruner.pruning.RetrainFreePruning.config_file_path"]], "model (neural_compressor.compression.pruner.pruning.basepruning attribute)": [[223, "neural_compressor.compression.pruner.pruning.BasePruning.model"]], "model (neural_compressor.compression.pruner.pruning.basicpruning attribute)": [[223, "neural_compressor.compression.pruner.pruning.BasicPruning.model"]], "model (neural_compressor.compression.pruner.pruning.retrainfreepruning attribute)": [[223, "neural_compressor.compression.pruner.pruning.RetrainFreePruning.model"]], "neural_compressor.compression.pruner.pruning": [[223, "module-neural_compressor.compression.pruner.pruning"]], "pruner_info (neural_compressor.compression.pruner.pruning.basepruning attribute)": [[223, "neural_compressor.compression.pruner.pruning.BasePruning.pruner_info"]], "pruner_info (neural_compressor.compression.pruner.pruning.basicpruning attribute)": [[223, "neural_compressor.compression.pruner.pruning.BasicPruning.pruner_info"]], "pruner_info (neural_compressor.compression.pruner.pruning.retrainfreepruning attribute)": [[223, "neural_compressor.compression.pruner.pruning.RetrainFreePruning.pruner_info"]], "pruners (neural_compressor.compression.pruner.pruning.basepruning attribute)": [[223, "neural_compressor.compression.pruner.pruning.BasePruning.pruners"]], "pruners (neural_compressor.compression.pruner.pruning.basicpruning attribute)": [[223, "neural_compressor.compression.pruner.pruning.BasicPruning.pruners"]], "pruners (neural_compressor.compression.pruner.pruning.retrainfreepruning attribute)": [[223, "neural_compressor.compression.pruner.pruning.RetrainFreePruning.pruners"]], "register_pruning() (in module neural_compressor.compression.pruner.pruning)": [[223, "neural_compressor.compression.pruner.pruning.register_pruning"]], "basereg (class in neural_compressor.compression.pruner.regs)": [[224, "neural_compressor.compression.pruner.regs.BaseReg"]], "grouplasso (class in neural_compressor.compression.pruner.regs)": [[224, "neural_compressor.compression.pruner.regs.GroupLasso"]], "alpha (neural_compressor.compression.pruner.regs.grouplasso attribute)": [[224, "neural_compressor.compression.pruner.regs.GroupLasso.alpha"]], "get_reg() (in module neural_compressor.compression.pruner.regs)": [[224, "neural_compressor.compression.pruner.regs.get_reg"]], "get_reg_type() (in module neural_compressor.compression.pruner.regs)": [[224, "neural_compressor.compression.pruner.regs.get_reg_type"]], "neural_compressor.compression.pruner.regs": [[224, "module-neural_compressor.compression.pruner.regs"]], "reg_terms (neural_compressor.compression.pruner.regs.grouplasso attribute)": [[224, "neural_compressor.compression.pruner.regs.GroupLasso.reg_terms"]], "register_reg() (in module neural_compressor.compression.pruner.regs)": [[224, "neural_compressor.compression.pruner.regs.register_reg"]], "iterativescheduler (class in neural_compressor.compression.pruner.schedulers)": [[225, "neural_compressor.compression.pruner.schedulers.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.compression.pruner.schedulers)": [[225, "neural_compressor.compression.pruner.schedulers.OneshotScheduler"]], "pruningscheduler (class in neural_compressor.compression.pruner.schedulers)": [[225, "neural_compressor.compression.pruner.schedulers.PruningScheduler"]], "config (neural_compressor.compression.pruner.schedulers.pruningscheduler attribute)": [[225, "neural_compressor.compression.pruner.schedulers.PruningScheduler.config"]], "get_scheduler() (in module neural_compressor.compression.pruner.schedulers)": [[225, "neural_compressor.compression.pruner.schedulers.get_scheduler"]], "neural_compressor.compression.pruner.schedulers": [[225, "module-neural_compressor.compression.pruner.schedulers"]], "register_scheduler() (in module neural_compressor.compression.pruner.schedulers)": [[225, "neural_compressor.compression.pruner.schedulers.register_scheduler"]], "magnitudecriterion (class in neural_compressor.compression.pruner.tf_criteria)": [[226, "neural_compressor.compression.pruner.tf_criteria.MagnitudeCriterion"]], "pruningcriterion (class in neural_compressor.compression.pruner.tf_criteria)": [[226, "neural_compressor.compression.pruner.tf_criteria.PruningCriterion"]], "get_tf_criterion() (in module neural_compressor.compression.pruner.tf_criteria)": [[226, "neural_compressor.compression.pruner.tf_criteria.get_tf_criterion"]], "neural_compressor.compression.pruner.tf_criteria": [[226, "module-neural_compressor.compression.pruner.tf_criteria"]], "register_criterion() (in module neural_compressor.compression.pruner.tf_criteria)": [[226, "neural_compressor.compression.pruner.tf_criteria.register_criterion"]], "scores (neural_compressor.compression.pruner.tf_criteria.magnitudecriterion attribute)": [[226, "neural_compressor.compression.pruner.tf_criteria.MagnitudeCriterion.scores"]], "scores (neural_compressor.compression.pruner.tf_criteria.pruningcriterion attribute)": [[226, "neural_compressor.compression.pruner.tf_criteria.PruningCriterion.scores"]], "check_config() (in module neural_compressor.compression.pruner.utils)": [[227, "neural_compressor.compression.pruner.utils.check_config"]], "check_key_validity() (in module neural_compressor.compression.pruner.utils)": [[227, "neural_compressor.compression.pruner.utils.check_key_validity"]], "collect_layer_inputs() (in module neural_compressor.compression.pruner.utils)": [[227, "neural_compressor.compression.pruner.utils.collect_layer_inputs"]], "generate_pruner_config() (in module neural_compressor.compression.pruner.utils)": [[227, "neural_compressor.compression.pruner.utils.generate_pruner_config"]], "get_layers() (in module neural_compressor.compression.pruner.utils)": [[227, "neural_compressor.compression.pruner.utils.get_layers"]], "get_sparsity_ratio() (in module neural_compressor.compression.pruner.utils)": [[227, "neural_compressor.compression.pruner.utils.get_sparsity_ratio"]], "get_sparsity_ratio_tf() (in module neural_compressor.compression.pruner.utils)": [[227, "neural_compressor.compression.pruner.utils.get_sparsity_ratio_tf"]], "neural_compressor.compression.pruner.utils": [[227, "module-neural_compressor.compression.pruner.utils"]], "parse_last_linear() (in module neural_compressor.compression.pruner.utils)": [[227, "neural_compressor.compression.pruner.utils.parse_last_linear"]], "parse_last_linear_tf() (in module neural_compressor.compression.pruner.utils)": [[227, "neural_compressor.compression.pruner.utils.parse_last_linear_tf"]], "parse_to_prune() (in module neural_compressor.compression.pruner.utils)": [[227, "neural_compressor.compression.pruner.utils.parse_to_prune"]], "parse_to_prune_tf() (in module neural_compressor.compression.pruner.utils)": [[227, "neural_compressor.compression.pruner.utils.parse_to_prune_tf"]], "process_and_check_config() (in module neural_compressor.compression.pruner.utils)": [[227, "neural_compressor.compression.pruner.utils.process_and_check_config"]], "process_config() (in module neural_compressor.compression.pruner.utils)": [[227, "neural_compressor.compression.pruner.utils.process_config"]], "process_weight_config() (in module neural_compressor.compression.pruner.utils)": [[227, "neural_compressor.compression.pruner.utils.process_weight_config"]], "process_yaml_config() (in module neural_compressor.compression.pruner.utils)": [[227, "neural_compressor.compression.pruner.utils.process_yaml_config"]], "reset_none_to_default() (in module neural_compressor.compression.pruner.utils)": [[227, "neural_compressor.compression.pruner.utils.reset_none_to_default"]], "update_params() (in module neural_compressor.compression.pruner.utils)": [[227, "neural_compressor.compression.pruner.utils.update_params"]], "neural_compressor.compression.pruner.wanda": [[228, "module-neural_compressor.compression.pruner.wanda"]], "neural_compressor.compression.pruner.wanda.prune": [[229, "module-neural_compressor.compression.pruner.wanda.prune"]], "prune_wanda() (in module neural_compressor.compression.pruner.wanda.prune)": [[229, "neural_compressor.compression.pruner.wanda.prune.prune_wanda"]], "find_layers() (in module neural_compressor.compression.pruner.wanda.utils)": [[230, "neural_compressor.compression.pruner.wanda.utils.find_layers"]], "neural_compressor.compression.pruner.wanda.utils": [[230, "module-neural_compressor.compression.pruner.wanda.utils"]], "wrappedgpt (class in neural_compressor.compression.pruner.wanda.wrapper)": [[231, "neural_compressor.compression.pruner.wanda.wrapper.WrappedGPT"]], "neural_compressor.compression.pruner.wanda.wrapper": [[231, "module-neural_compressor.compression.pruner.wanda.wrapper"]], "benchmark_conf (class in neural_compressor.conf.config)": [[232, "neural_compressor.conf.config.Benchmark_Conf"]], "conf (class in neural_compressor.conf.config)": [[232, "neural_compressor.conf.config.Conf"]], "distillation_conf (class in neural_compressor.conf.config)": [[232, "neural_compressor.conf.config.Distillation_Conf"]], "graph_optimization_conf (class in neural_compressor.conf.config)": [[232, "neural_compressor.conf.config.Graph_Optimization_Conf"]], "mixedprecision_conf (class in neural_compressor.conf.config)": [[232, "neural_compressor.conf.config.MixedPrecision_Conf"]], "nasconfig (class in neural_compressor.conf.config)": [[232, "neural_compressor.conf.config.NASConfig"]], "prunerv2 (class in neural_compressor.conf.config)": [[232, "neural_compressor.conf.config.PrunerV2"]], "pruning_conf (class in neural_compressor.conf.config)": [[232, "neural_compressor.conf.config.Pruning_Conf"]], "quantization_conf (class in neural_compressor.conf.config)": [[232, "neural_compressor.conf.config.Quantization_Conf"]], "neural_compressor.conf.config": [[232, "module-neural_compressor.conf.config"]], "dotdict (class in neural_compressor.conf.dotdict)": [[233, "neural_compressor.conf.dotdict.DotDict"]], "deep_get() (in module neural_compressor.conf.dotdict)": [[233, "neural_compressor.conf.dotdict.deep_get"]], "deep_set() (in module neural_compressor.conf.dotdict)": [[233, "neural_compressor.conf.dotdict.deep_set"]], "neural_compressor.conf.dotdict": [[233, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[234, "module-neural_compressor.conf"]], "accuracycriterion (class in neural_compressor.conf.pythonic_config)": [[235, "neural_compressor.conf.pythonic_config.AccuracyCriterion"]], "benchmarkconfig (class in neural_compressor.conf.pythonic_config)": [[235, "neural_compressor.conf.pythonic_config.BenchmarkConfig"]], "distillationconfig (class in neural_compressor.conf.pythonic_config)": [[235, "neural_compressor.conf.pythonic_config.DistillationConfig"]], "knowledgedistillationlossconfig (class in neural_compressor.conf.pythonic_config)": [[235, "neural_compressor.conf.pythonic_config.KnowledgeDistillationLossConfig"]], "options (class in neural_compressor.conf.pythonic_config)": [[235, "neural_compressor.conf.pythonic_config.Options"]], "quantizationconfig (class in neural_compressor.conf.pythonic_config)": [[235, "neural_compressor.conf.pythonic_config.QuantizationConfig"]], "weightpruningconfig (class in neural_compressor.conf.pythonic_config)": [[235, "neural_compressor.conf.pythonic_config.WeightPruningConfig"]], "neural_compressor.conf.pythonic_config": [[235, "module-neural_compressor.conf.pythonic_config"]], "accuracycriterion (class in neural_compressor.config)": [[236, "neural_compressor.config.AccuracyCriterion"]], "benchmarkconfig (class in neural_compressor.config)": [[236, "neural_compressor.config.BenchmarkConfig"]], "distillationconfig (class in neural_compressor.config)": [[236, "neural_compressor.config.DistillationConfig"]], "dotdict (class in neural_compressor.config)": [[236, "neural_compressor.config.DotDict"]], "exportconfig (class in neural_compressor.config)": [[236, "neural_compressor.config.ExportConfig"]], "hpoconfig (class in neural_compressor.config)": [[236, "neural_compressor.config.HPOConfig"]], "intermediatelayersknowledgedistillationlossconfig (class in neural_compressor.config)": [[236, "neural_compressor.config.IntermediateLayersKnowledgeDistillationLossConfig"]], "keras (class in neural_compressor.config)": [[236, "neural_compressor.config.Keras"]], "knowledgedistillationlossconfig (class in neural_compressor.config)": [[236, "neural_compressor.config.KnowledgeDistillationLossConfig"]], "mxnet (class in neural_compressor.config)": [[236, "neural_compressor.config.MXNet"]], "mixedprecisionconfig (class in neural_compressor.config)": [[236, "neural_compressor.config.MixedPrecisionConfig"]], "nasconfig (class in neural_compressor.config)": [[236, "neural_compressor.config.NASConfig"]], "onnx (class in neural_compressor.config)": [[236, "neural_compressor.config.ONNX"]], "onnxqlinear2qdqconfig (class in neural_compressor.config)": [[236, "neural_compressor.config.ONNXQlinear2QDQConfig"]], "options (class in neural_compressor.config)": [[236, "neural_compressor.config.Options"]], "posttrainingquantconfig (class in neural_compressor.config)": [[236, "neural_compressor.config.PostTrainingQuantConfig"]], "pytorch (class in neural_compressor.config)": [[236, "neural_compressor.config.PyTorch"]], "quantizationawaretrainingconfig (class in neural_compressor.config)": [[236, "neural_compressor.config.QuantizationAwareTrainingConfig"]], "selfknowledgedistillationlossconfig (class in neural_compressor.config)": [[236, "neural_compressor.config.SelfKnowledgeDistillationLossConfig"]], "tf2onnxconfig (class in neural_compressor.config)": [[236, "neural_compressor.config.TF2ONNXConfig"]], "tensorflow (class in neural_compressor.config)": [[236, "neural_compressor.config.TensorFlow"]], "torch2onnxconfig (class in neural_compressor.config)": [[236, "neural_compressor.config.Torch2ONNXConfig"]], "tuningcriterion (class in neural_compressor.config)": [[236, "neural_compressor.config.TuningCriterion"]], "weightpruningconfig (class in neural_compressor.config)": [[236, "neural_compressor.config.WeightPruningConfig"]], "neural_compressor.config": [[236, "module-neural_compressor.config"]], "neural_compressor.contrib": [[237, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[238, "module-neural_compressor.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.contrib.strategy.sigopt)": [[239, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.sigopt": [[239, "module-neural_compressor.contrib.strategy.sigopt"]], "tpetunestrategy (class in neural_compressor.contrib.strategy.tpe)": [[240, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[240, "module-neural_compressor.contrib.strategy.tpe"]], "basedataloader (class in neural_compressor.data.dataloaders.base_dataloader)": [[241, "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader"]], "neural_compressor.data.dataloaders.base_dataloader": [[241, "module-neural_compressor.data.dataloaders.base_dataloader"]], "dataloader (class in neural_compressor.data.dataloaders.dataloader)": [[242, "neural_compressor.data.dataloaders.dataloader.DataLoader"]], "check_dataloader() (in module neural_compressor.data.dataloaders.dataloader)": [[242, "neural_compressor.data.dataloaders.dataloader.check_dataloader"]], "neural_compressor.data.dataloaders.dataloader": [[242, "module-neural_compressor.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.data.dataloaders.default_dataloader)": [[243, "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader"]], "default_collate() (in module neural_compressor.data.dataloaders.default_dataloader)": [[243, "neural_compressor.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.data.dataloaders.default_dataloader": [[243, "module-neural_compressor.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.data.dataloaders.fetcher)": [[244, "neural_compressor.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.data.dataloaders.fetcher)": [[244, "neural_compressor.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.data.dataloaders.fetcher)": [[244, "neural_compressor.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.data.dataloaders.fetcher": [[244, "module-neural_compressor.data.dataloaders.fetcher"]], "neural_compressor.data.dataloaders": [[245, "module-neural_compressor.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.data.dataloaders.mxnet_dataloader)": [[246, "neural_compressor.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[246, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[247, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[247, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[247, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.data.dataloaders.pytorch_dataloader)": [[248, "neural_compressor.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[248, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.data.dataloaders.sampler)": [[249, "neural_compressor.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.data.dataloaders.sampler)": [[249, "neural_compressor.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.data.dataloaders.sampler)": [[249, "neural_compressor.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.data.dataloaders.sampler)": [[249, "neural_compressor.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.data.dataloaders.sampler": [[249, "module-neural_compressor.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[250, "neural_compressor.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[250, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[250, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[250, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[250, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.data.datasets.bert_dataset)": [[251, "neural_compressor.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[251, "neural_compressor.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.data.datasets.bert_dataset)": [[251, "neural_compressor.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[251, "neural_compressor.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[251, "neural_compressor.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[251, "neural_compressor.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.data.datasets.bert_dataset)": [[251, "neural_compressor.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.data.datasets.bert_dataset)": [[251, "neural_compressor.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.data.datasets.bert_dataset": [[251, "module-neural_compressor.data.datasets.bert_dataset"]], "coconpy (class in neural_compressor.data.datasets.coco_dataset)": [[252, "neural_compressor.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.data.datasets.coco_dataset)": [[252, "neural_compressor.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.data.datasets.coco_dataset)": [[252, "neural_compressor.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.data.datasets.coco_dataset)": [[252, "neural_compressor.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.data.datasets.coco_dataset": [[252, "module-neural_compressor.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.data.datasets.dataset)": [[253, "neural_compressor.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.data.datasets.dataset)": [[253, "neural_compressor.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.data.datasets.dataset)": [[253, "neural_compressor.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.data.datasets.dataset)": [[253, "neural_compressor.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.data.datasets.dataset)": [[253, "neural_compressor.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.data.datasets.dataset)": [[253, "neural_compressor.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.data.datasets.dataset)": [[253, "neural_compressor.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.data.datasets.dataset)": [[253, "neural_compressor.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.data.datasets.dataset)": [[253, "neural_compressor.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.data.datasets.dataset)": [[253, "neural_compressor.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.data.datasets.dataset)": [[253, "neural_compressor.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.data.datasets.dataset)": [[253, "neural_compressor.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.data.datasets.dataset)": [[253, "neural_compressor.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.data.datasets.dataset)": [[253, "neural_compressor.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.data.datasets.dataset)": [[253, "neural_compressor.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.data.datasets.dataset)": [[253, "neural_compressor.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.data.datasets.dataset)": [[253, "neural_compressor.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.data.datasets.dataset)": [[253, "neural_compressor.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.data.datasets.dataset)": [[253, "neural_compressor.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.data.datasets.dataset)": [[253, "neural_compressor.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.data.datasets.dataset)": [[253, "neural_compressor.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.data.datasets.dataset)": [[253, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.datasets.dataset)": [[253, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflow (class in neural_compressor.data.datasets.dataset)": [[253, "neural_compressor.data.datasets.dataset.Tensorflow"]], "tensorflowcifar10 (class in neural_compressor.data.datasets.dataset)": [[253, "neural_compressor.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.data.datasets.dataset)": [[253, "neural_compressor.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.data.datasets.dataset)": [[253, "neural_compressor.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.data.datasets.dataset)": [[253, "neural_compressor.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagerecord (class in neural_compressor.data.datasets.dataset)": [[253, "neural_compressor.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.data.datasets.dataset)": [[253, "neural_compressor.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.data.datasets.dataset)": [[253, "neural_compressor.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.data.datasets.dataset)": [[253, "neural_compressor.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.data.datasets.dataset)": [[253, "neural_compressor.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.data.datasets.dataset)": [[253, "neural_compressor.data.datasets.dataset.check_integrity"]], "dataset_registry() (in module neural_compressor.data.datasets.dataset)": [[253, "neural_compressor.data.datasets.dataset.dataset_registry"]], "download_url() (in module neural_compressor.data.datasets.dataset)": [[253, "neural_compressor.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.data.datasets.dataset)": [[253, "neural_compressor.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.data.datasets.dataset)": [[253, "neural_compressor.data.datasets.dataset.gen_bar_updater"]], "neural_compressor.data.datasets.dataset": [[253, "module-neural_compressor.data.datasets.dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset)": [[254, "neural_compressor.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset": [[254, "module-neural_compressor.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[255, "neural_compressor.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[255, "neural_compressor.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[255, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[256, "neural_compressor.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[256, "neural_compressor.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[256, "neural_compressor.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[256, "neural_compressor.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[256, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[256, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.data.datasets.imagenet_dataset": [[256, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[257, "module-neural_compressor.data.datasets"]], "styletransferdataset (class in neural_compressor.data.datasets.style_transfer_dataset)": [[258, "neural_compressor.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.data.datasets.style_transfer_dataset": [[258, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.data.filters.coco_filter)": [[259, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.data.filters.coco_filter)": [[259, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.coco_filter": [[259, "module-neural_compressor.data.filters.coco_filter"]], "filters (class in neural_compressor.data.filters.filter)": [[260, "neural_compressor.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.data.filters.filter)": [[260, "neural_compressor.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.data.filters.filter)": [[260, "neural_compressor.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.data.filters.filter)": [[260, "neural_compressor.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.data.filters.filter)": [[260, "neural_compressor.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.data.filters.filter)": [[260, "neural_compressor.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.data.filters.filter)": [[260, "neural_compressor.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.data.filters.filter)": [[260, "neural_compressor.data.filters.filter.filter_registry"]], "neural_compressor.data.filters.filter": [[260, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[261, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[262, "module-neural_compressor.data"]], "parsedecodecocotransform (class in neural_compressor.data.transforms.coco_transform)": [[263, "neural_compressor.data.transforms.coco_transform.ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.coco_transform": [[263, "module-neural_compressor.data.transforms.coco_transform"]], "bilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[264, "neural_compressor.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.data.transforms.imagenet_transform)": [[264, "neural_compressor.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[264, "neural_compressor.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[264, "neural_compressor.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.data.transforms.imagenet_transform)": [[264, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[264, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.data.transforms.imagenet_transform)": [[264, "neural_compressor.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.data.transforms.imagenet_transform)": [[264, "neural_compressor.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[264, "neural_compressor.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "tensorflowshiftrescale (class in neural_compressor.data.transforms.imagenet_transform)": [[264, "neural_compressor.data.transforms.imagenet_transform.TensorflowShiftRescale"]], "tensorflowtransposelastchannel (class in neural_compressor.data.transforms.imagenet_transform)": [[264, "neural_compressor.data.transforms.imagenet_transform.TensorflowTransposeLastChannel"]], "neural_compressor.data.transforms.imagenet_transform": [[264, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[265, "module-neural_compressor.data.transforms"]], "postprocess (class in neural_compressor.data.transforms.postprocess)": [[266, "neural_compressor.data.transforms.postprocess.Postprocess"]], "neural_compressor.data.transforms.postprocess": [[266, "module-neural_compressor.data.transforms.postprocess"]], "basictokenizer (class in neural_compressor.data.transforms.tokenization)": [[267, "neural_compressor.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.data.transforms.tokenization)": [[267, "neural_compressor.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.data.transforms.tokenization)": [[267, "neural_compressor.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.data.transforms.tokenization)": [[267, "neural_compressor.data.transforms.tokenization.convert_by_vocab"]], "convert_to_unicode() (in module neural_compressor.data.transforms.tokenization)": [[267, "neural_compressor.data.transforms.tokenization.convert_to_unicode"]], "load_vocab() (in module neural_compressor.data.transforms.tokenization)": [[267, "neural_compressor.data.transforms.tokenization.load_vocab"]], "neural_compressor.data.transforms.tokenization": [[267, "module-neural_compressor.data.transforms.tokenization"]], "whitespace_tokenize() (in module neural_compressor.data.transforms.tokenization)": [[267, "neural_compressor.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.data.transforms.transform)": [[268, "neural_compressor.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.data.transforms.transform)": [[268, "neural_compressor.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.data.transforms.transform)": [[268, "neural_compressor.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.data.transforms.transform)": [[268, "neural_compressor.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.data.transforms.transform)": [[268, "neural_compressor.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.data.transforms.transform)": [[268, "neural_compressor.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.data.transforms.transform)": [[268, "neural_compressor.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.data.transforms.transform)": [[268, "neural_compressor.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.data.transforms.transform)": [[268, "neural_compressor.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.data.transforms.transform)": [[268, "neural_compressor.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.data.transforms.transform)": [[268, "neural_compressor.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.data.transforms.transform)": [[268, "neural_compressor.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.data.transforms.transform)": [[268, "neural_compressor.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.data.transforms.transform)": [[268, "neural_compressor.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[268, "neural_compressor.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.data.transforms.transform)": [[268, "neural_compressor.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.data.transforms.transform)": [[268, "neural_compressor.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.data.transforms.transform)": [[268, "neural_compressor.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.data.transforms.transform)": [[268, "neural_compressor.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.data.transforms.transform)": [[268, "neural_compressor.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[268, "neural_compressor.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.data.transforms.transform)": [[268, "neural_compressor.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.data.transforms.transform)": [[268, "neural_compressor.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.data.transforms.transform)": [[268, "neural_compressor.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.data.transforms.transform)": [[268, "neural_compressor.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.data.transforms.transform)": [[268, "neural_compressor.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.data.transforms.transform)": [[268, "neural_compressor.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.data.transforms.transform)": [[268, "neural_compressor.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.data.transforms.transform)": [[268, "neural_compressor.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.data.transforms.transform)": [[268, "neural_compressor.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.data.transforms.transform)": [[268, "neural_compressor.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.transforms.transform)": [[268, "neural_compressor.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.data.transforms.transform)": [[268, "neural_compressor.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.data.transforms.transform)": [[268, "neural_compressor.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[268, "neural_compressor.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.data.transforms.transform)": [[268, "neural_compressor.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.data.transforms.transform)": [[268, "neural_compressor.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.data.transforms.transform)": [[268, "neural_compressor.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.data.transforms.transform)": [[268, "neural_compressor.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.data.transforms.transform)": [[268, "neural_compressor.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.data.transforms.transform)": [[268, "neural_compressor.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.data.transforms.transform)": [[268, "neural_compressor.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.data.transforms.transform)": [[268, "neural_compressor.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.data.transforms.transform)": [[268, "neural_compressor.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.data.transforms.transform)": [[268, "neural_compressor.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.data.transforms.transform)": [[268, "neural_compressor.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.data.transforms.transform)": [[268, "neural_compressor.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.data.transforms.transform)": [[268, "neural_compressor.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.data.transforms.transform)": [[268, "neural_compressor.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.data.transforms.transform)": [[268, "neural_compressor.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.data.transforms.transform)": [[268, "neural_compressor.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.data.transforms.transform)": [[268, "neural_compressor.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.data.transforms.transform)": [[268, "neural_compressor.data.transforms.transform.TRANSFORMS"], [268, "neural_compressor.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[268, "neural_compressor.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[268, "neural_compressor.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.data.transforms.transform)": [[268, "neural_compressor.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.data.transforms.transform)": [[268, "neural_compressor.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.data.transforms.transform)": [[268, "neural_compressor.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.data.transforms.transform)": [[268, "neural_compressor.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.data.transforms.transform)": [[268, "neural_compressor.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.data.transforms.transform)": [[268, "neural_compressor.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.data.transforms.transform)": [[268, "neural_compressor.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.data.transforms.transform)": [[268, "neural_compressor.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.data.transforms.transform)": [[268, "neural_compressor.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.data.transforms.transform)": [[268, "neural_compressor.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.data.transforms.transform)": [[268, "neural_compressor.data.transforms.transform.get_final_text"]], "get_torchvision_map() (in module neural_compressor.data.transforms.transform)": [[268, "neural_compressor.data.transforms.transform.get_torchvision_map"]], "neural_compressor.data.transforms.transform": [[268, "module-neural_compressor.data.transforms.transform"]], "read_squad_examples() (in module neural_compressor.data.transforms.transform)": [[268, "neural_compressor.data.transforms.transform.read_squad_examples"]], "transform_registry() (in module neural_compressor.data.transforms.transform)": [[268, "neural_compressor.data.transforms.transform.transform_registry"]], "benchmark (class in neural_compressor.experimental.benchmark)": [[269, "neural_compressor.experimental.benchmark.Benchmark"]], "get_architecture() (in module neural_compressor.experimental.benchmark)": [[269, "neural_compressor.experimental.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.experimental.benchmark)": [[269, "neural_compressor.experimental.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.experimental.benchmark)": [[269, "neural_compressor.experimental.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.experimental.benchmark)": [[269, "neural_compressor.experimental.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.experimental.benchmark)": [[269, "neural_compressor.experimental.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.experimental.benchmark)": [[269, "neural_compressor.experimental.benchmark.get_threads_per_core"]], "neural_compressor.experimental.benchmark": [[269, "module-neural_compressor.experimental.benchmark"]], "set_all_env_var() (in module neural_compressor.experimental.benchmark)": [[269, "neural_compressor.experimental.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.experimental.benchmark)": [[269, "neural_compressor.experimental.benchmark.set_env_var"]], "criterions (class in neural_compressor.experimental.common.criterion)": [[270, "neural_compressor.experimental.common.criterion.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[270, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.experimental.common.criterion)": [[270, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[270, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss"]], "pytorchcriterions (class in neural_compressor.experimental.common.criterion)": [[270, "neural_compressor.experimental.common.criterion.PyTorchCriterions"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[270, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[270, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[270, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[270, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[270, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss"]], "tensorflowcriterions (class in neural_compressor.experimental.common.criterion)": [[270, "neural_compressor.experimental.common.criterion.TensorflowCriterions"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.experimental.common.criterion)": [[270, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal"]], "criterion_registry() (in module neural_compressor.experimental.common.criterion)": [[270, "neural_compressor.experimental.common.criterion.criterion_registry"]], "neural_compressor.experimental.common.criterion": [[270, "module-neural_compressor.experimental.common.criterion"]], "dataloader (class in neural_compressor.experimental.common.dataloader)": [[271, "neural_compressor.experimental.common.dataloader.DataLoader"]], "neural_compressor.experimental.common.dataloader": [[271, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[272, "module-neural_compressor.experimental.common"]], "metric (class in neural_compressor.experimental.common.metric)": [[273, "neural_compressor.experimental.common.metric.Metric"]], "neural_compressor.experimental.common.metric": [[273, "module-neural_compressor.experimental.common.metric"]], "model (class in neural_compressor.experimental.common.model)": [[274, "neural_compressor.experimental.common.model.Model"]], "neural_compressor.experimental.common.model": [[274, "module-neural_compressor.experimental.common.model"]], "set_backend() (in module neural_compressor.experimental.common.model)": [[274, "neural_compressor.experimental.common.model.set_backend"]], "optimizers (class in neural_compressor.experimental.common.optimizer)": [[275, "neural_compressor.experimental.common.optimizer.Optimizers"]], "pytorchoptimizers (class in neural_compressor.experimental.common.optimizer)": [[275, "neural_compressor.experimental.common.optimizer.PyTorchOptimizers"]], "pytorchsgd (class in neural_compressor.experimental.common.optimizer)": [[275, "neural_compressor.experimental.common.optimizer.PyTorchSGD"]], "tensorflowadamw (class in neural_compressor.experimental.common.optimizer)": [[275, "neural_compressor.experimental.common.optimizer.TensorFlowAdamW"]], "tensorflowsgd (class in neural_compressor.experimental.common.optimizer)": [[275, "neural_compressor.experimental.common.optimizer.TensorFlowSGD"]], "tensorflowoptimizers (class in neural_compressor.experimental.common.optimizer)": [[275, "neural_compressor.experimental.common.optimizer.TensorflowOptimizers"]], "neural_compressor.experimental.common.optimizer": [[275, "module-neural_compressor.experimental.common.optimizer"]], "optimizer_registry() (in module neural_compressor.experimental.common.optimizer)": [[275, "neural_compressor.experimental.common.optimizer.optimizer_registry"]], "postprocess (class in neural_compressor.experimental.common.postprocess)": [[276, "neural_compressor.experimental.common.postprocess.Postprocess"]], "neural_compressor.experimental.common.postprocess": [[276, "module-neural_compressor.experimental.common.postprocess"]], "get_activation() (in module neural_compressor.experimental.common.torch_utils)": [[277, "neural_compressor.experimental.common.torch_utils.get_activation"]], "neural_compressor.experimental.common.torch_utils": [[277, "module-neural_compressor.experimental.common.torch_utils"]], "record_output() (in module neural_compressor.experimental.common.torch_utils)": [[277, "neural_compressor.experimental.common.torch_utils.record_output"]], "component (class in neural_compressor.experimental.component)": [[278, "neural_compressor.experimental.component.Component"]], "neural_compressor.experimental.component": [[278, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.compression": [[279, "module-neural_compressor.experimental.compression"]], "neural_compressor.experimental.contrib": [[280, "module-neural_compressor.experimental.contrib"]], "neural_compressor.experimental.contrib.strategy": [[281, "module-neural_compressor.experimental.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.experimental.contrib.strategy.sigopt)": [[282, "neural_compressor.experimental.contrib.strategy.sigopt.SigOptTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[282, "module-neural_compressor.experimental.contrib.strategy.sigopt"]], "tpetunestrategy (class in neural_compressor.experimental.contrib.strategy.tpe)": [[283, "neural_compressor.experimental.contrib.strategy.tpe.TpeTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.tpe": [[283, "module-neural_compressor.experimental.contrib.strategy.tpe"]], "basedataloader (class in neural_compressor.experimental.data.dataloaders.base_dataloader)": [[284, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[284, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[285, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.experimental.data.dataloaders.default_dataloader)": [[286, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader"]], "default_collate() (in module neural_compressor.experimental.data.dataloaders.default_dataloader)": [[286, "neural_compressor.experimental.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[286, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[287, "neural_compressor.experimental.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[287, "neural_compressor.experimental.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[287, "neural_compressor.experimental.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[287, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[288, "module-neural_compressor.experimental.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.experimental.data.dataloaders.mxnet_dataloader)": [[289, "neural_compressor.experimental.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[289, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[290, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[290, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[290, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.experimental.data.dataloaders.pytorch_dataloader)": [[291, "neural_compressor.experimental.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[291, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[292, "neural_compressor.experimental.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[292, "neural_compressor.experimental.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[292, "neural_compressor.experimental.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[292, "neural_compressor.experimental.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.sampler": [[292, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[293, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[293, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[293, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[293, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[293, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[294, "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[294, "neural_compressor.experimental.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[294, "neural_compressor.experimental.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[294, "neural_compressor.experimental.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[294, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[294, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[294, "neural_compressor.experimental.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[294, "neural_compressor.experimental.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[294, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "coconpy (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[295, "neural_compressor.experimental.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[295, "neural_compressor.experimental.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[295, "neural_compressor.experimental.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[295, "neural_compressor.experimental.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[295, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[296, "neural_compressor.experimental.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[296, "neural_compressor.experimental.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.experimental.data.datasets.dataset)": [[296, "neural_compressor.experimental.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.experimental.data.datasets.dataset)": [[296, "neural_compressor.experimental.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[296, "neural_compressor.experimental.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[296, "neural_compressor.experimental.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.experimental.data.datasets.dataset)": [[296, "neural_compressor.experimental.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.experimental.data.datasets.dataset)": [[296, "neural_compressor.experimental.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[296, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[296, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[296, "neural_compressor.experimental.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[296, "neural_compressor.experimental.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[296, "neural_compressor.experimental.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[296, "neural_compressor.experimental.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[296, "neural_compressor.experimental.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[296, "neural_compressor.experimental.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[296, "neural_compressor.experimental.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[296, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[296, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[296, "neural_compressor.experimental.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[296, "neural_compressor.experimental.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.experimental.data.datasets.dataset)": [[296, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.datasets.dataset)": [[296, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflowcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[296, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[296, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[296, "neural_compressor.experimental.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[296, "neural_compressor.experimental.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[296, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageFolder"]], "tensorflowimagerecord (class in neural_compressor.experimental.data.datasets.dataset)": [[296, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[296, "neural_compressor.experimental.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.experimental.data.datasets.dataset)": [[296, "neural_compressor.experimental.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.experimental.data.datasets.dataset)": [[296, "neural_compressor.experimental.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.experimental.data.datasets.dataset)": [[296, "neural_compressor.experimental.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.experimental.data.datasets.dataset)": [[296, "neural_compressor.experimental.data.datasets.dataset.check_integrity"]], "dataset_registry() (in module neural_compressor.experimental.data.datasets.dataset)": [[296, "neural_compressor.experimental.data.datasets.dataset.dataset_registry"]], "download_url() (in module neural_compressor.experimental.data.datasets.dataset)": [[296, "neural_compressor.experimental.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.experimental.data.datasets.dataset)": [[296, "neural_compressor.experimental.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.experimental.data.datasets.dataset)": [[296, "neural_compressor.experimental.data.datasets.dataset.gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dataset": [[296, "module-neural_compressor.experimental.data.datasets.dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset)": [[297, "neural_compressor.experimental.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[297, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[298, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[298, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[298, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[299, "neural_compressor.experimental.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[299, "neural_compressor.experimental.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[299, "neural_compressor.experimental.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[299, "neural_compressor.experimental.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[299, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[299, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[299, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[300, "module-neural_compressor.experimental.data.datasets"]], "styletransferdataset (class in neural_compressor.experimental.data.datasets.style_transfer_dataset)": [[301, "neural_compressor.experimental.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[301, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[302, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[302, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.coco_filter": [[302, "module-neural_compressor.experimental.data.filters.coco_filter"]], "filters (class in neural_compressor.experimental.data.filters.filter)": [[303, "neural_compressor.experimental.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.experimental.data.filters.filter)": [[303, "neural_compressor.experimental.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.experimental.data.filters.filter)": [[303, "neural_compressor.experimental.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.experimental.data.filters.filter)": [[303, "neural_compressor.experimental.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.experimental.data.filters.filter)": [[303, "neural_compressor.experimental.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.experimental.data.filters.filter)": [[303, "neural_compressor.experimental.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.experimental.data.filters.filter)": [[303, "neural_compressor.experimental.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.experimental.data.filters.filter)": [[303, "neural_compressor.experimental.data.filters.filter.filter_registry"]], "neural_compressor.experimental.data.filters.filter": [[303, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[304, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[305, "module-neural_compressor.experimental.data"]], "bilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[306, "neural_compressor.experimental.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[306, "neural_compressor.experimental.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[306, "neural_compressor.experimental.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[306, "neural_compressor.experimental.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[306, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[306, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[306, "neural_compressor.experimental.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[306, "neural_compressor.experimental.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[306, "neural_compressor.experimental.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[306, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[307, "module-neural_compressor.experimental.data.transforms"]], "basictokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[308, "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[308, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[308, "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[308, "neural_compressor.experimental.data.transforms.tokenization.convert_by_vocab"]], "convert_to_unicode() (in module neural_compressor.experimental.data.transforms.tokenization)": [[308, "neural_compressor.experimental.data.transforms.tokenization.convert_to_unicode"]], "load_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[308, "neural_compressor.experimental.data.transforms.tokenization.load_vocab"]], "neural_compressor.experimental.data.transforms.tokenization": [[308, "module-neural_compressor.experimental.data.transforms.tokenization"]], "whitespace_tokenize() (in module neural_compressor.experimental.data.transforms.tokenization)": [[308, "neural_compressor.experimental.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.experimental.data.transforms.transform)": [[309, "neural_compressor.experimental.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.experimental.data.transforms.transform)": [[309, "neural_compressor.experimental.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.experimental.data.transforms.transform)": [[309, "neural_compressor.experimental.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[309, "neural_compressor.experimental.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.experimental.data.transforms.transform)": [[309, "neural_compressor.experimental.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[309, "neural_compressor.experimental.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[309, "neural_compressor.experimental.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[309, "neural_compressor.experimental.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.experimental.data.transforms.transform)": [[309, "neural_compressor.experimental.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[309, "neural_compressor.experimental.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[309, "neural_compressor.experimental.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[309, "neural_compressor.experimental.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.experimental.data.transforms.transform)": [[309, "neural_compressor.experimental.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[309, "neural_compressor.experimental.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[309, "neural_compressor.experimental.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[309, "neural_compressor.experimental.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.experimental.data.transforms.transform)": [[309, "neural_compressor.experimental.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.experimental.data.transforms.transform)": [[309, "neural_compressor.experimental.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[309, "neural_compressor.experimental.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[309, "neural_compressor.experimental.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[309, "neural_compressor.experimental.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.experimental.data.transforms.transform)": [[309, "neural_compressor.experimental.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.experimental.data.transforms.transform)": [[309, "neural_compressor.experimental.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[309, "neural_compressor.experimental.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.experimental.data.transforms.transform)": [[309, "neural_compressor.experimental.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.experimental.data.transforms.transform)": [[309, "neural_compressor.experimental.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[309, "neural_compressor.experimental.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[309, "neural_compressor.experimental.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[309, "neural_compressor.experimental.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[309, "neural_compressor.experimental.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[309, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[309, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[309, "neural_compressor.experimental.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[309, "neural_compressor.experimental.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[309, "neural_compressor.experimental.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[309, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[309, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[309, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[309, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[309, "neural_compressor.experimental.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.experimental.data.transforms.transform)": [[309, "neural_compressor.experimental.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.experimental.data.transforms.transform)": [[309, "neural_compressor.experimental.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.experimental.data.transforms.transform)": [[309, "neural_compressor.experimental.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[309, "neural_compressor.experimental.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[309, "neural_compressor.experimental.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[309, "neural_compressor.experimental.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[309, "neural_compressor.experimental.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[309, "neural_compressor.experimental.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.experimental.data.transforms.transform)": [[309, "neural_compressor.experimental.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[309, "neural_compressor.experimental.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.experimental.data.transforms.transform)": [[309, "neural_compressor.experimental.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.experimental.data.transforms.transform)": [[309, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.experimental.data.transforms.transform)": [[309, "neural_compressor.experimental.data.transforms.transform.TRANSFORMS"], [309, "neural_compressor.experimental.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[309, "neural_compressor.experimental.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[309, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[309, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[309, "neural_compressor.experimental.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.experimental.data.transforms.transform)": [[309, "neural_compressor.experimental.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[309, "neural_compressor.experimental.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[309, "neural_compressor.experimental.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[309, "neural_compressor.experimental.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.experimental.data.transforms.transform)": [[309, "neural_compressor.experimental.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.experimental.data.transforms.transform)": [[309, "neural_compressor.experimental.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.experimental.data.transforms.transform)": [[309, "neural_compressor.experimental.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.transforms.transform)": [[309, "neural_compressor.experimental.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.experimental.data.transforms.transform)": [[309, "neural_compressor.experimental.data.transforms.transform.get_final_text"]], "get_torchvision_map() (in module neural_compressor.experimental.data.transforms.transform)": [[309, "neural_compressor.experimental.data.transforms.transform.get_torchvision_map"]], "neural_compressor.experimental.data.transforms.transform": [[309, "module-neural_compressor.experimental.data.transforms.transform"]], "read_squad_examples() (in module neural_compressor.experimental.data.transforms.transform)": [[309, "neural_compressor.experimental.data.transforms.transform.read_squad_examples"]], "transform_registry() (in module neural_compressor.experimental.data.transforms.transform)": [[309, "neural_compressor.experimental.data.transforms.transform.transform_registry"]], "distillation (class in neural_compressor.experimental.distillation)": [[310, "neural_compressor.experimental.distillation.Distillation"]], "_epoch_ran (neural_compressor.experimental.distillation.distillation attribute)": [[310, "neural_compressor.experimental.distillation.Distillation._epoch_ran"]], "best_model (neural_compressor.experimental.distillation.distillation attribute)": [[310, "neural_compressor.experimental.distillation.Distillation.best_model"]], "best_score (neural_compressor.experimental.distillation.distillation attribute)": [[310, "neural_compressor.experimental.distillation.Distillation.best_score"]], "eval_frequency (neural_compressor.experimental.distillation.distillation attribute)": [[310, "neural_compressor.experimental.distillation.Distillation.eval_frequency"]], "neural_compressor.experimental.distillation": [[310, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[311, "module-neural_compressor.experimental.export"]], "check_model() (in module neural_compressor.experimental.export.qlinear2qdq)": [[312, "neural_compressor.experimental.export.qlinear2qdq.check_model"]], "neural_compressor.experimental.export.qlinear2qdq": [[312, "module-neural_compressor.experimental.export.qlinear2qdq"]], "onnx_qlinear_to_qdq() (in module neural_compressor.experimental.export.qlinear2qdq)": [[312, "neural_compressor.experimental.export.qlinear2qdq.onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.tf2onnx": [[313, "module-neural_compressor.experimental.export.tf2onnx"]], "tf_to_fp32_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[313, "neural_compressor.experimental.export.tf2onnx.tf_to_fp32_onnx"]], "tf_to_int8_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[313, "neural_compressor.experimental.export.tf2onnx.tf_to_int8_onnx"]], "dynamic_quant_export() (in module neural_compressor.experimental.export.torch2onnx)": [[314, "neural_compressor.experimental.export.torch2onnx.dynamic_quant_export"]], "get_node_mapping() (in module neural_compressor.experimental.export.torch2onnx)": [[314, "neural_compressor.experimental.export.torch2onnx.get_node_mapping"]], "get_quantizable_onnx_ops() (in module neural_compressor.experimental.export.torch2onnx)": [[314, "neural_compressor.experimental.export.torch2onnx.get_quantizable_onnx_ops"]], "neural_compressor.experimental.export.torch2onnx": [[314, "module-neural_compressor.experimental.export.torch2onnx"]], "static_quant_export() (in module neural_compressor.experimental.export.torch2onnx)": [[314, "neural_compressor.experimental.export.torch2onnx.static_quant_export"]], "torch_to_fp32_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[314, "neural_compressor.experimental.export.torch2onnx.torch_to_fp32_onnx"]], "torch_to_int8_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[314, "neural_compressor.experimental.export.torch2onnx.torch_to_int8_onnx"]], "graph_optimization (class in neural_compressor.experimental.graph_optimization)": [[315, "neural_compressor.experimental.graph_optimization.Graph_Optimization"]], "neural_compressor.experimental.graph_optimization": [[315, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[316, "module-neural_compressor.experimental"]], "bleu (class in neural_compressor.experimental.metric.bleu)": [[317, "neural_compressor.experimental.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.experimental.metric.bleu)": [[317, "neural_compressor.experimental.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.experimental.metric.bleu)": [[317, "neural_compressor.experimental.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.experimental.metric.bleu.bleu attribute)": [[317, "neural_compressor.experimental.metric.bleu.BLEU.labels"]], "neural_compressor.experimental.metric.bleu": [[317, "module-neural_compressor.experimental.metric.bleu"]], "nondigit_punct_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[317, "neural_compressor.experimental.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.experimental.metric.bleu.bleu attribute)": [[317, "neural_compressor.experimental.metric.bleu.BLEU.predictions"]], "punct_nondigit_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[317, "neural_compressor.experimental.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[317, "neural_compressor.experimental.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.experimental.metric.bleu_util)": [[318, "neural_compressor.experimental.metric.bleu_util.compute_bleu"]], "neural_compressor.experimental.metric.bleu_util": [[318, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[319, "module-neural_compressor.experimental.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.experimental.metric.coco_tools)": [[320, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.experimental.metric.coco_tools)": [[320, "neural_compressor.experimental.metric.coco_tools.COCOWrapper"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.experimental.metric.coco_tools)": [[320, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.experimental.metric.coco_tools)": [[320, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.experimental.metric.coco_tools)": [[320, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "dataset (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[320, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[320, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.experimental.metric.coco_tools": [[320, "module-neural_compressor.experimental.metric.coco_tools"]], "evaluate() (in module neural_compressor.experimental.metric.evaluate_squad)": [[321, "neural_compressor.experimental.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[321, "neural_compressor.experimental.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[321, "neural_compressor.experimental.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.evaluate_squad)": [[321, "neural_compressor.experimental.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.evaluate_squad": [[321, "module-neural_compressor.experimental.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.experimental.metric.f1)": [[322, "neural_compressor.experimental.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.experimental.metric.f1)": [[322, "neural_compressor.experimental.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.f1)": [[322, "neural_compressor.experimental.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[322, "module-neural_compressor.experimental.metric.f1"]], "normalize_answer() (in module neural_compressor.experimental.metric.f1)": [[322, "neural_compressor.experimental.metric.f1.normalize_answer"]], "neural_compressor.experimental.metric": [[323, "module-neural_compressor.experimental.metric"]], "accuracy (class in neural_compressor.experimental.metric.metric)": [[324, "neural_compressor.experimental.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.experimental.metric.metric)": [[324, "neural_compressor.experimental.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.experimental.metric.metric)": [[324, "neural_compressor.experimental.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.experimental.metric.metric)": [[324, "neural_compressor.experimental.metric.metric.F1"]], "generaltopk (class in neural_compressor.experimental.metric.metric)": [[324, "neural_compressor.experimental.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.experimental.metric.metric)": [[324, "neural_compressor.experimental.metric.metric.Loss"]], "mae (class in neural_compressor.experimental.metric.metric)": [[324, "neural_compressor.experimental.metric.metric.MAE"]], "metrics (class in neural_compressor.experimental.metric.metric)": [[324, "neural_compressor.experimental.metric.metric.METRICS"]], "mse (class in neural_compressor.experimental.metric.metric)": [[324, "neural_compressor.experimental.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.experimental.metric.metric)": [[324, "neural_compressor.experimental.metric.metric.MXNetMetrics"]], "onnxrtglue (class in neural_compressor.experimental.metric.metric)": [[324, "neural_compressor.experimental.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.experimental.metric.metric)": [[324, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.experimental.metric.metric)": [[324, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.experimental.metric.metric)": [[324, "neural_compressor.experimental.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.experimental.metric.metric)": [[324, "neural_compressor.experimental.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.experimental.metric.metric)": [[324, "neural_compressor.experimental.metric.metric.RMSE"]], "roc (class in neural_compressor.experimental.metric.metric)": [[324, "neural_compressor.experimental.metric.metric.ROC"]], "squadf1 (class in neural_compressor.experimental.metric.metric)": [[324, "neural_compressor.experimental.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.experimental.metric.metric)": [[324, "neural_compressor.experimental.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.experimental.metric.metric)": [[324, "neural_compressor.experimental.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.experimental.metric.metric)": [[324, "neural_compressor.experimental.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.experimental.metric.metric)": [[324, "neural_compressor.experimental.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.experimental.metric.metric)": [[324, "neural_compressor.experimental.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.experimental.metric.metric)": [[324, "neural_compressor.experimental.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.experimental.metric.metric)": [[324, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.experimental.metric.metric)": [[324, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.experimental.metric.metric.mae attribute)": [[324, "neural_compressor.experimental.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.experimental.metric.metric.mse attribute)": [[324, "neural_compressor.experimental.metric.metric.MSE.compare_label"]], "k (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[324, "neural_compressor.experimental.metric.metric.GeneralTopK.k"]], "k (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[324, "neural_compressor.experimental.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[324, "neural_compressor.experimental.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mae attribute)": [[324, "neural_compressor.experimental.metric.metric.MAE.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mse attribute)": [[324, "neural_compressor.experimental.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.experimental.metric.metric)": [[324, "neural_compressor.experimental.metric.metric.mIOU"]], "metric_registry() (in module neural_compressor.experimental.metric.metric)": [[324, "neural_compressor.experimental.metric.metric.metric_registry"]], "metrics (neural_compressor.experimental.metric.metric.metrics attribute)": [[324, "neural_compressor.experimental.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.experimental.metric.metric.mxnetmetrics attribute)": [[324, "neural_compressor.experimental.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtitmetrics attribute)": [[324, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtqlmetrics attribute)": [[324, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.pytorchmetrics attribute)": [[324, "neural_compressor.experimental.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.tensorflowmetrics attribute)": [[324, "neural_compressor.experimental.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.experimental.metric.metric.rmse attribute)": [[324, "neural_compressor.experimental.metric.metric.RMSE.mse"]], "neural_compressor.experimental.metric.metric": [[324, "module-neural_compressor.experimental.metric.metric"]], "num_correct (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[324, "neural_compressor.experimental.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[324, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[324, "neural_compressor.experimental.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[324, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[324, "neural_compressor.experimental.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mae attribute)": [[324, "neural_compressor.experimental.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mse attribute)": [[324, "neural_compressor.experimental.metric.metric.MSE.pred_list"]], "sample (neural_compressor.experimental.metric.metric.accuracy attribute)": [[324, "neural_compressor.experimental.metric.metric.Accuracy.sample"]], "sample (neural_compressor.experimental.metric.metric.loss attribute)": [[324, "neural_compressor.experimental.metric.metric.Loss.sample"]], "sum (neural_compressor.experimental.metric.metric.loss attribute)": [[324, "neural_compressor.experimental.metric.metric.Loss.sum"]], "mixedprecision (class in neural_compressor.experimental.mixed_precision)": [[325, "neural_compressor.experimental.mixed_precision.MixedPrecision"]], "neural_compressor.experimental.mixed_precision": [[325, "module-neural_compressor.experimental.mixed_precision"]], "modelconversion (class in neural_compressor.experimental.model_conversion)": [[326, "neural_compressor.experimental.model_conversion.ModelConversion"]], "neural_compressor.experimental.model_conversion": [[326, "module-neural_compressor.experimental.model_conversion"]], "basicnas (class in neural_compressor.experimental.nas.basic_nas)": [[327, "neural_compressor.experimental.nas.basic_nas.BasicNAS"]], "neural_compressor.experimental.nas.basic_nas": [[327, "module-neural_compressor.experimental.nas.basic_nas"]], "dynas (class in neural_compressor.experimental.nas.dynas)": [[328, "neural_compressor.experimental.nas.dynas.DyNAS"]], "neural_compressor.experimental.nas.dynas": [[328, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas": [[329, "module-neural_compressor.experimental.nas"]], "nas (class in neural_compressor.experimental.nas.nas)": [[330, "neural_compressor.experimental.nas.nas.NAS"]], "nasbase (class in neural_compressor.experimental.nas.nas)": [[330, "neural_compressor.experimental.nas.nas.NASBase"]], "neural_compressor.experimental.nas.nas": [[330, "module-neural_compressor.experimental.nas.nas"]], "create_search_space_pool() (in module neural_compressor.experimental.nas.nas_utils)": [[331, "neural_compressor.experimental.nas.nas_utils.create_search_space_pool"]], "find_pareto_front() (in module neural_compressor.experimental.nas.nas_utils)": [[331, "neural_compressor.experimental.nas.nas_utils.find_pareto_front"]], "nas_registry() (in module neural_compressor.experimental.nas.nas_utils)": [[331, "neural_compressor.experimental.nas.nas_utils.nas_registry"]], "neural_compressor.experimental.nas.nas_utils": [[331, "module-neural_compressor.experimental.nas.nas_utils"]], "bayesianoptimizationsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[332, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher"]], "gridsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[332, "neural_compressor.experimental.nas.search_algorithms.GridSearcher"]], "randomsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[332, "neural_compressor.experimental.nas.search_algorithms.RandomSearcher"]], "searcher (class in neural_compressor.experimental.nas.search_algorithms)": [[332, "neural_compressor.experimental.nas.search_algorithms.Searcher"]], "neural_compressor.experimental.nas.search_algorithms": [[332, "module-neural_compressor.experimental.nas.search_algorithms"]], "gradientsensitivitypruner (class in neural_compressor.experimental.pruner_legacy.gradient_sensitivity)": [[333, "neural_compressor.experimental.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[333, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"]], "grouplassopruner (class in neural_compressor.experimental.pruner_legacy.group_lasso)": [[334, "neural_compressor.experimental.pruner_legacy.group_lasso.GroupLassoPruner"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[334, "module-neural_compressor.experimental.pruner_legacy.group_lasso"]], "neural_compressor.experimental.pruner_legacy": [[335, "module-neural_compressor.experimental.pruner_legacy"]], "basicmagnitudepruner (class in neural_compressor.experimental.pruner_legacy.magnitude)": [[336, "neural_compressor.experimental.pruner_legacy.magnitude.BasicMagnitudePruner"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[336, "module-neural_compressor.experimental.pruner_legacy.magnitude"]], "patternlockpruner (class in neural_compressor.experimental.pruner_legacy.pattern_lock)": [[337, "neural_compressor.experimental.pruner_legacy.pattern_lock.PatternLockPruner"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[337, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"]], "pruner (class in neural_compressor.experimental.pruner_legacy.pruner)": [[338, "neural_compressor.experimental.pruner_legacy.pruner.Pruner"]], "neural_compressor.experimental.pruner_legacy.pruner": [[338, "module-neural_compressor.experimental.pruner_legacy.pruner"]], "pruner_registry() (in module neural_compressor.experimental.pruner_legacy.pruner)": [[338, "neural_compressor.experimental.pruner_legacy.pruner.pruner_registry"]], "pruning (class in neural_compressor.experimental.pruning)": [[339, "neural_compressor.experimental.pruning.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning)": [[339, "neural_compressor.experimental.pruning.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning.pruning attribute)": [[339, "neural_compressor.experimental.pruning.Pruning.conf"]], "neural_compressor.experimental.pruning": [[339, "module-neural_compressor.experimental.pruning"]], "pruners (neural_compressor.experimental.pruning.pruning attribute)": [[339, "neural_compressor.experimental.pruning.Pruning.pruners"]], "neural_compressor.experimental.pruning_recipes": [[340, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[341, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "patterns (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[342, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS"]], "patternbase (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[342, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[342, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "pattern_registry() (in module neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[342, "neural_compressor.experimental.pruning_recipes.patterns.pattern.pattern_registry"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns.pattern.patterns attribute)": [[342, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS.patterns"]], "tilepatternbase (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[343, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase"]], "tilepattern_1x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[343, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x1"]], "tilepattern_1x16 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[343, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x16"]], "tilepattern_1x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[343, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x2"]], "tilepattern_2x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[343, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_2x2"]], "tilepattern_4x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[343, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_4x1"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[343, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "pruning (class in neural_compressor.experimental.pruning_v2)": [[344, "neural_compressor.experimental.pruning_v2.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning_v2)": [[344, "neural_compressor.experimental.pruning_v2.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning_v2.pruning attribute)": [[344, "neural_compressor.experimental.pruning_v2.Pruning.conf"]], "neural_compressor.experimental.pruning_v2": [[344, "module-neural_compressor.experimental.pruning_v2"]], "pruners (neural_compressor.experimental.pruning_v2.pruning attribute)": [[344, "neural_compressor.experimental.pruning_v2.Pruning.pruners"]], "neural_compressor.experimental.pytorch_pruner": [[345, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[346, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "m (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[347, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.M"]], "n (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[347, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.N"]], "pattern (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[347, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern"]], "patternninm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[347, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM"]], "patternnxm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[347, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM"]], "block_size (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm attribute)": [[347, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.block_size"]], "get_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[347, "neural_compressor.experimental.pytorch_pruner.patterns.get_pattern"]], "is_global (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[347, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.is_global"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[347, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "pattern (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[347, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.pattern"]], "register_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[347, "neural_compressor.experimental.pytorch_pruner.patterns.register_pattern"]], "check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[348, "neural_compressor.experimental.pytorch_pruner.prune_utils.check_config"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[348, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "parse_not_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[348, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_not_to_prune"]], "parse_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[348, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_to_prune"]], "process_and_check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[348, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_and_check_config"]], "process_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[348, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_config"]], "reset_non_value_to_default() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[348, "neural_compressor.experimental.pytorch_pruner.prune_utils.reset_non_value_to_default"]], "magnitudepruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[349, "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner"]], "patternlockpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[349, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner"]], "pruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[349, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner"]], "snipmomentumpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[349, "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner"]], "snippruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[349, "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner"]], "config (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[349, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.config"]], "current_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[349, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.current_sparsity_ratio"]], "end_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[349, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.end_step"]], "get_pruner() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[349, "neural_compressor.experimental.pytorch_pruner.pruner.get_pruner"]], "global_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[349, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.global_step"]], "masks (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[349, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.masks"]], "max_sparsity_ratio_per_layer (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[349, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.max_sparsity_ratio_per_layer"]], "modules (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[349, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.modules"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[349, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "pattern (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[349, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.pattern"]], "register_pruners() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[349, "neural_compressor.experimental.pytorch_pruner.pruner.register_pruners"]], "scheduler (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[349, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scheduler"]], "scores (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[349, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scores"]], "start_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[349, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.start_step"]], "target_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[349, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.target_sparsity_ratio"]], "update_frequency_on_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[349, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.update_frequency_on_step"]], "pruning (class in neural_compressor.experimental.pytorch_pruner.pruning)": [[350, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning"]], "config_file_path (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[350, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.config_file_path"]], "model (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[350, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.model"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[350, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "pruner_info (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[350, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruner_info"]], "pruners (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[350, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruners"]], "iterativescheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[351, "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[351, "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler"]], "scheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[351, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler"]], "config (neural_compressor.experimental.pytorch_pruner.scheduler.scheduler attribute)": [[351, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler.config"]], "get_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[351, "neural_compressor.experimental.pytorch_pruner.scheduler.get_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[351, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "register_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[351, "neural_compressor.experimental.pytorch_pruner.scheduler.register_scheduler"]], "quantization (class in neural_compressor.experimental.quantization)": [[352, "neural_compressor.experimental.quantization.Quantization"]], "neural_compressor.experimental.quantization": [[352, "module-neural_compressor.experimental.quantization"]], "scheduler (class in neural_compressor.experimental.scheduler)": [[353, "neural_compressor.experimental.scheduler.Scheduler"]], "neural_compressor.experimental.scheduler": [[353, "module-neural_compressor.experimental.scheduler"]], "automixedprecisiontunestrategy (class in neural_compressor.experimental.strategy.auto_mixed_precision)": [[354, "neural_compressor.experimental.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[354, "module-neural_compressor.experimental.strategy.auto_mixed_precision"]], "basictunestrategy (class in neural_compressor.experimental.strategy.basic)": [[355, "neural_compressor.experimental.strategy.basic.BasicTuneStrategy"]], "neural_compressor.experimental.strategy.basic": [[355, "module-neural_compressor.experimental.strategy.basic"]], "bayesianoptimization (class in neural_compressor.experimental.strategy.bayesian)": [[356, "neural_compressor.experimental.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.experimental.strategy.bayesian)": [[356, "neural_compressor.experimental.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.experimental.strategy.bayesian)": [[356, "neural_compressor.experimental.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.experimental.strategy.bayesian)": [[356, "neural_compressor.experimental.strategy.bayesian.acq_max"]], "neural_compressor.experimental.strategy.bayesian": [[356, "module-neural_compressor.experimental.strategy.bayesian"]], "exhaustivetunestrategy (class in neural_compressor.experimental.strategy.exhaustive)": [[357, "neural_compressor.experimental.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.experimental.strategy.exhaustive": [[357, "module-neural_compressor.experimental.strategy.exhaustive"]], "neural_compressor.experimental.strategy": [[358, "module-neural_compressor.experimental.strategy"]], "msetunestrategy (class in neural_compressor.experimental.strategy.mse)": [[359, "neural_compressor.experimental.strategy.mse.MSETuneStrategy"]], "neural_compressor.experimental.strategy.mse": [[359, "module-neural_compressor.experimental.strategy.mse"]], "mse_v2tunestrategy (class in neural_compressor.experimental.strategy.mse_v2)": [[360, "neural_compressor.experimental.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.experimental.strategy.mse_v2": [[360, "module-neural_compressor.experimental.strategy.mse_v2"]], "randomtunestrategy (class in neural_compressor.experimental.strategy.random)": [[361, "neural_compressor.experimental.strategy.random.RandomTuneStrategy"]], "neural_compressor.experimental.strategy.random": [[361, "module-neural_compressor.experimental.strategy.random"]], "tunestrategy (class in neural_compressor.experimental.strategy.strategy)": [[362, "neural_compressor.experimental.strategy.strategy.TuneStrategy"]], "neural_compressor.experimental.strategy.strategy": [[362, "module-neural_compressor.experimental.strategy.strategy"]], "strategy_registry() (in module neural_compressor.experimental.strategy.strategy)": [[362, "neural_compressor.experimental.strategy.strategy.strategy_registry"]], "neural_compressor.experimental.strategy.utils.constant": [[363, "module-neural_compressor.experimental.strategy.utils.constant"]], "neural_compressor.experimental.strategy.utils": [[364, "module-neural_compressor.experimental.strategy.utils"]], "fallbacktuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[365, "neural_compressor.experimental.strategy.utils.tuning_sampler.FallbackTuningSampler"]], "modelwisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[365, "neural_compressor.experimental.strategy.utils.tuning_sampler.ModelWiseTuningSampler"]], "optypewisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[365, "neural_compressor.experimental.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler"]], "opwisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[365, "neural_compressor.experimental.strategy.utils.tuning_sampler.OpWiseTuningSampler"]], "smoothquantsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[365, "neural_compressor.experimental.strategy.utils.tuning_sampler.SmoothQuantSampler"]], "tuningorder (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[365, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningOrder"]], "tuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[365, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningSampler"]], "tuningsamplerregistry (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[365, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningSamplerRegistry"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[365, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"]], "tuningitem (class in neural_compressor.experimental.strategy.utils.tuning_space)": [[366, "neural_compressor.experimental.strategy.utils.tuning_space.TuningItem"]], "tuningspace (class in neural_compressor.experimental.strategy.utils.tuning_space)": [[366, "neural_compressor.experimental.strategy.utils.tuning_space.TuningSpace"]], "initial_tuning_cfg_with_quant_mode() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[366, "neural_compressor.experimental.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[366, "module-neural_compressor.experimental.strategy.utils.tuning_space"]], "pattern_to_internal() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[366, "neural_compressor.experimental.strategy.utils.tuning_space.pattern_to_internal"]], "pattern_to_path() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[366, "neural_compressor.experimental.strategy.utils.tuning_space.pattern_to_path"]], "quant_mode_from_pattern() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[366, "neural_compressor.experimental.strategy.utils.tuning_space.quant_mode_from_pattern"]], "optuningconfig (class in neural_compressor.experimental.strategy.utils.tuning_structs)": [[367, "neural_compressor.experimental.strategy.utils.tuning_structs.OpTuningConfig"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[367, "module-neural_compressor.experimental.strategy.utils.tuning_structs"]], "ordereddefaultdict (class in neural_compressor.experimental.strategy.utils.utility)": [[368, "neural_compressor.experimental.strategy.utils.utility.OrderedDefaultDict"]], "extract_data_type() (in module neural_compressor.experimental.strategy.utils.utility)": [[368, "neural_compressor.experimental.strategy.utils.utility.extract_data_type"]], "get_adaptor_name() (in module neural_compressor.experimental.strategy.utils.utility)": [[368, "neural_compressor.experimental.strategy.utils.utility.get_adaptor_name"]], "neural_compressor.experimental.strategy.utils.utility": [[368, "module-neural_compressor.experimental.strategy.utils.utility"]], "reverted_data_type() (in module neural_compressor.experimental.strategy.utils.utility)": [[368, "neural_compressor.experimental.strategy.utils.utility.reverted_data_type"]], "neural_compressor": [[369, "module-neural_compressor"]], "bleu (class in neural_compressor.metric.bleu)": [[370, "neural_compressor.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.metric.bleu)": [[370, "neural_compressor.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.metric.bleu)": [[370, "neural_compressor.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.metric.bleu.bleu attribute)": [[370, "neural_compressor.metric.bleu.BLEU.labels"]], "neural_compressor.metric.bleu": [[370, "module-neural_compressor.metric.bleu"]], "nondigit_punct_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[370, "neural_compressor.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.metric.bleu.bleu attribute)": [[370, "neural_compressor.metric.bleu.BLEU.predictions"]], "punct_nondigit_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[370, "neural_compressor.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[370, "neural_compressor.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.metric.bleu_util)": [[371, "neural_compressor.metric.bleu_util.compute_bleu"]], "neural_compressor.metric.bleu_util": [[371, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[372, "module-neural_compressor.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.metric.coco_tools)": [[373, "neural_compressor.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.metric.coco_tools)": [[373, "neural_compressor.metric.coco_tools.COCOWrapper"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.metric.coco_tools)": [[373, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.metric.coco_tools)": [[373, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.metric.coco_tools)": [[373, "neural_compressor.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "dataset (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[373, "neural_compressor.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[373, "neural_compressor.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.metric.coco_tools": [[373, "module-neural_compressor.metric.coco_tools"]], "evaluate() (in module neural_compressor.metric.evaluate_squad)": [[374, "neural_compressor.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.metric.evaluate_squad)": [[374, "neural_compressor.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.metric.evaluate_squad)": [[374, "neural_compressor.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.evaluate_squad)": [[374, "neural_compressor.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.metric.evaluate_squad": [[374, "module-neural_compressor.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.metric.f1)": [[375, "neural_compressor.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.metric.f1)": [[375, "neural_compressor.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.f1)": [[375, "neural_compressor.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[375, "module-neural_compressor.metric.f1"]], "normalize_answer() (in module neural_compressor.metric.f1)": [[375, "neural_compressor.metric.f1.normalize_answer"]], "neural_compressor.metric": [[376, "module-neural_compressor.metric"]], "accuracy (class in neural_compressor.metric.metric)": [[377, "neural_compressor.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.metric.metric)": [[377, "neural_compressor.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.metric.metric)": [[377, "neural_compressor.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.metric.metric)": [[377, "neural_compressor.metric.metric.F1"]], "generaltopk (class in neural_compressor.metric.metric)": [[377, "neural_compressor.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.metric.metric)": [[377, "neural_compressor.metric.metric.Loss"]], "mae (class in neural_compressor.metric.metric)": [[377, "neural_compressor.metric.metric.MAE"]], "metrics (class in neural_compressor.metric.metric)": [[377, "neural_compressor.metric.metric.METRICS"]], "mse (class in neural_compressor.metric.metric)": [[377, "neural_compressor.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.metric.metric)": [[377, "neural_compressor.metric.metric.MXNetMetrics"]], "metric (class in neural_compressor.metric.metric)": [[377, "neural_compressor.metric.metric.Metric"]], "onnxrtglue (class in neural_compressor.metric.metric)": [[377, "neural_compressor.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.metric.metric)": [[377, "neural_compressor.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.metric.metric)": [[377, "neural_compressor.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.metric.metric)": [[377, "neural_compressor.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.metric.metric)": [[377, "neural_compressor.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.metric.metric)": [[377, "neural_compressor.metric.metric.RMSE"]], "roc (class in neural_compressor.metric.metric)": [[377, "neural_compressor.metric.metric.ROC"]], "squadf1 (class in neural_compressor.metric.metric)": [[377, "neural_compressor.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.metric.metric)": [[377, "neural_compressor.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.metric.metric)": [[377, "neural_compressor.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.metric.metric)": [[377, "neural_compressor.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.metric.metric)": [[377, "neural_compressor.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.metric.metric)": [[377, "neural_compressor.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.metric.metric)": [[377, "neural_compressor.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.metric.metric)": [[377, "neural_compressor.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.metric.metric)": [[377, "neural_compressor.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.metric.metric.mae attribute)": [[377, "neural_compressor.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.metric.metric.mse attribute)": [[377, "neural_compressor.metric.metric.MSE.compare_label"]], "k (neural_compressor.metric.metric.generaltopk attribute)": [[377, "neural_compressor.metric.metric.GeneralTopK.k"]], "k (neural_compressor.metric.metric.tensorflowtopk attribute)": [[377, "neural_compressor.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.metric.metric.accuracy attribute)": [[377, "neural_compressor.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.metric.metric.mae attribute)": [[377, "neural_compressor.metric.metric.MAE.label_list"]], "label_list (neural_compressor.metric.metric.mse attribute)": [[377, "neural_compressor.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.metric.metric)": [[377, "neural_compressor.metric.metric.mIOU"]], "metric_registry() (in module neural_compressor.metric.metric)": [[377, "neural_compressor.metric.metric.metric_registry"]], "metrics (neural_compressor.metric.metric.metrics attribute)": [[377, "neural_compressor.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.metric.metric.mxnetmetrics attribute)": [[377, "neural_compressor.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtitmetrics attribute)": [[377, "neural_compressor.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtqlmetrics attribute)": [[377, "neural_compressor.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.metric.metric.pytorchmetrics attribute)": [[377, "neural_compressor.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.metric.metric.tensorflowmetrics attribute)": [[377, "neural_compressor.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.metric.metric.rmse attribute)": [[377, "neural_compressor.metric.metric.RMSE.mse"]], "neural_compressor.metric.metric": [[377, "module-neural_compressor.metric.metric"]], "num_correct (neural_compressor.metric.metric.generaltopk attribute)": [[377, "neural_compressor.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.metric.metric.tensorflowtopk attribute)": [[377, "neural_compressor.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.metric.metric.generaltopk attribute)": [[377, "neural_compressor.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.metric.metric.tensorflowtopk attribute)": [[377, "neural_compressor.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.metric.metric.accuracy attribute)": [[377, "neural_compressor.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.metric.metric.mae attribute)": [[377, "neural_compressor.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.metric.metric.mse attribute)": [[377, "neural_compressor.metric.metric.MSE.pred_list"]], "register_customer_metric() (in module neural_compressor.metric.metric)": [[377, "neural_compressor.metric.metric.register_customer_metric"]], "sample (neural_compressor.metric.metric.accuracy attribute)": [[377, "neural_compressor.metric.metric.Accuracy.sample"]], "sample (neural_compressor.metric.metric.loss attribute)": [[377, "neural_compressor.metric.metric.Loss.sample"]], "sum (neural_compressor.metric.metric.loss attribute)": [[377, "neural_compressor.metric.metric.Loss.sum"]], "fit() (in module neural_compressor.mix_precision)": [[378, "neural_compressor.mix_precision.fit"]], "neural_compressor.mix_precision": [[378, "module-neural_compressor.mix_precision"]], "basemodel (class in neural_compressor.model.base_model)": [[379, "neural_compressor.model.base_model.BaseModel"]], "neural_compressor.model.base_model": [[379, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[380, "module-neural_compressor.model"]], "kerasmodel (class in neural_compressor.model.keras_model)": [[381, "neural_compressor.model.keras_model.KerasModel"]], "neural_compressor.model.keras_model": [[381, "module-neural_compressor.model.keras_model"]], "model (class in neural_compressor.model.model)": [[382, "neural_compressor.model.model.Model"]], "get_model_fwk_name() (in module neural_compressor.model.model)": [[382, "neural_compressor.model.model.get_model_fwk_name"]], "neural_compressor.model.model": [[382, "module-neural_compressor.model.model"]], "mxnetmodel (class in neural_compressor.model.mxnet_model)": [[383, "neural_compressor.model.mxnet_model.MXNetModel"]], "neural_compressor.model.mxnet_model": [[383, "module-neural_compressor.model.mxnet_model"]], "tfslimnetsfactory (class in neural_compressor.model.nets_factory)": [[384, "neural_compressor.model.nets_factory.TFSlimNetsFactory"]], "neural_compressor.model.nets_factory": [[384, "module-neural_compressor.model.nets_factory"]], "onnxmodel (class in neural_compressor.model.onnx_model)": [[385, "neural_compressor.model.onnx_model.ONNXModel"]], "neural_compressor.model.onnx_model": [[385, "module-neural_compressor.model.onnx_model"]], "tensorflowbasemodel (class in neural_compressor.model.tensorflow_model)": [[386, "neural_compressor.model.tensorflow_model.TensorflowBaseModel"]], "tensorflowcheckpointmodel (class in neural_compressor.model.tensorflow_model)": [[386, "neural_compressor.model.tensorflow_model.TensorflowCheckpointModel"]], "tensorflowllmmodel (class in neural_compressor.model.tensorflow_model)": [[386, "neural_compressor.model.tensorflow_model.TensorflowLLMModel"]], "tensorflowmodel (class in neural_compressor.model.tensorflow_model)": [[386, "neural_compressor.model.tensorflow_model.TensorflowModel"]], "tensorflowqatmodel (class in neural_compressor.model.tensorflow_model)": [[386, "neural_compressor.model.tensorflow_model.TensorflowQATModel"]], "tensorflowsavedmodelmodel (class in neural_compressor.model.tensorflow_model)": [[386, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel"]], "checkpoint_session() (in module neural_compressor.model.tensorflow_model)": [[386, "neural_compressor.model.tensorflow_model.checkpoint_session"]], "estimator_session() (in module neural_compressor.model.tensorflow_model)": [[386, "neural_compressor.model.tensorflow_model.estimator_session"]], "frozen_pb_session() (in module neural_compressor.model.tensorflow_model)": [[386, "neural_compressor.model.tensorflow_model.frozen_pb_session"]], "get_model_type() (in module neural_compressor.model.tensorflow_model)": [[386, "neural_compressor.model.tensorflow_model.get_model_type"]], "graph_def_session() (in module neural_compressor.model.tensorflow_model)": [[386, "neural_compressor.model.tensorflow_model.graph_def_session"]], "graph_session() (in module neural_compressor.model.tensorflow_model)": [[386, "neural_compressor.model.tensorflow_model.graph_session"]], "keras_session() (in module neural_compressor.model.tensorflow_model)": [[386, "neural_compressor.model.tensorflow_model.keras_session"]], "load_saved_model() (in module neural_compressor.model.tensorflow_model)": [[386, "neural_compressor.model.tensorflow_model.load_saved_model"]], "neural_compressor.model.tensorflow_model": [[386, "module-neural_compressor.model.tensorflow_model"]], "saved_model_session() (in module neural_compressor.model.tensorflow_model)": [[386, "neural_compressor.model.tensorflow_model.saved_model_session"]], "slim_session() (in module neural_compressor.model.tensorflow_model)": [[386, "neural_compressor.model.tensorflow_model.slim_session"]], "validate_and_inference_input_output() (in module neural_compressor.model.tensorflow_model)": [[386, "neural_compressor.model.tensorflow_model.validate_and_inference_input_output"]], "validate_graph_node() (in module neural_compressor.model.tensorflow_model)": [[386, "neural_compressor.model.tensorflow_model.validate_graph_node"]], "ipexmodel (class in neural_compressor.model.torch_model)": [[387, "neural_compressor.model.torch_model.IPEXModel"]], "pytorchbasemodel (class in neural_compressor.model.torch_model)": [[387, "neural_compressor.model.torch_model.PyTorchBaseModel"]], "pytorchfxmodel (class in neural_compressor.model.torch_model)": [[387, "neural_compressor.model.torch_model.PyTorchFXModel"]], "pytorchmodel (class in neural_compressor.model.torch_model)": [[387, "neural_compressor.model.torch_model.PyTorchModel"]], "neural_compressor.model.torch_model": [[387, "module-neural_compressor.model.torch_model"]], "accuracy (class in neural_compressor.objective)": [[388, "neural_compressor.objective.Accuracy"]], "footprint (class in neural_compressor.objective)": [[388, "neural_compressor.objective.Footprint"]], "modelsize (class in neural_compressor.objective)": [[388, "neural_compressor.objective.ModelSize"]], "multiobjective (class in neural_compressor.objective)": [[388, "neural_compressor.objective.MultiObjective"]], "objective (class in neural_compressor.objective)": [[388, "neural_compressor.objective.Objective"]], "performance (class in neural_compressor.objective)": [[388, "neural_compressor.objective.Performance"]], "neural_compressor.objective": [[388, "module-neural_compressor.objective"]], "objective_custom_registry() (in module neural_compressor.objective)": [[388, "neural_compressor.objective.objective_custom_registry"]], "objective_registry() (in module neural_compressor.objective)": [[388, "neural_compressor.objective.objective_registry"]], "neural_compressor.onnxrt.algorithms": [[389, "module-neural_compressor.onnxrt.algorithms"]], "layer_wise_quant() (in module neural_compressor.onnxrt.algorithms.layer_wise.core)": [[390, "neural_compressor.onnxrt.algorithms.layer_wise.core.layer_wise_quant"]], "neural_compressor.onnxrt.algorithms.layer_wise.core": [[390, "module-neural_compressor.onnxrt.algorithms.layer_wise.core"]], "neural_compressor.onnxrt.algorithms.layer_wise": [[391, "module-neural_compressor.onnxrt.algorithms.layer_wise"]], "calibrator (class in neural_compressor.onnxrt.algorithms.smoother.calibrator)": [[392, "neural_compressor.onnxrt.algorithms.smoother.calibrator.Calibrator"]], "neural_compressor.onnxrt.algorithms.smoother.calibrator": [[392, "module-neural_compressor.onnxrt.algorithms.smoother.calibrator"]], "smoother (class in neural_compressor.onnxrt.algorithms.smoother.core)": [[393, "neural_compressor.onnxrt.algorithms.smoother.core.Smoother"]], "neural_compressor.onnxrt.algorithms.smoother.core": [[393, "module-neural_compressor.onnxrt.algorithms.smoother.core"]], "neural_compressor.onnxrt.algorithms.smoother": [[394, "module-neural_compressor.onnxrt.algorithms.smoother"]], "apply_awq_on_model() (in module neural_compressor.onnxrt.algorithms.weight_only.awq)": [[395, "neural_compressor.onnxrt.algorithms.weight_only.awq.apply_awq_on_model"]], "awq_quantize() (in module neural_compressor.onnxrt.algorithms.weight_only.awq)": [[395, "neural_compressor.onnxrt.algorithms.weight_only.awq.awq_quantize"]], "neural_compressor.onnxrt.algorithms.weight_only.awq": [[395, "module-neural_compressor.onnxrt.algorithms.weight_only.awq"]], "apply_gptq_on_model() (in module neural_compressor.onnxrt.algorithms.weight_only.gptq)": [[396, "neural_compressor.onnxrt.algorithms.weight_only.gptq.apply_gptq_on_model"]], "gptq_quantize() (in module neural_compressor.onnxrt.algorithms.weight_only.gptq)": [[396, "neural_compressor.onnxrt.algorithms.weight_only.gptq.gptq_quantize"]], "neural_compressor.onnxrt.algorithms.weight_only.gptq": [[396, "module-neural_compressor.onnxrt.algorithms.weight_only.gptq"]], "neural_compressor.onnxrt.algorithms.weight_only": [[397, "module-neural_compressor.onnxrt.algorithms.weight_only"]], "apply_rtn_on_model() (in module neural_compressor.onnxrt.algorithms.weight_only.rtn)": [[398, "neural_compressor.onnxrt.algorithms.weight_only.rtn.apply_rtn_on_model"]], "neural_compressor.onnxrt.algorithms.weight_only.rtn": [[398, "module-neural_compressor.onnxrt.algorithms.weight_only.rtn"]], "rtn_quantize() (in module neural_compressor.onnxrt.algorithms.weight_only.rtn)": [[398, "neural_compressor.onnxrt.algorithms.weight_only.rtn.rtn_quantize"]], "make_matmul_weight_only_node() (in module neural_compressor.onnxrt.algorithms.weight_only.utility)": [[399, "neural_compressor.onnxrt.algorithms.weight_only.utility.make_matmul_weight_only_node"]], "neural_compressor.onnxrt.algorithms.weight_only.utility": [[399, "module-neural_compressor.onnxrt.algorithms.weight_only.utility"]], "pad_tensor() (in module neural_compressor.onnxrt.algorithms.weight_only.utility)": [[399, "neural_compressor.onnxrt.algorithms.weight_only.utility.pad_tensor"]], "prepare_inputs() (in module neural_compressor.onnxrt.algorithms.weight_only.utility)": [[399, "neural_compressor.onnxrt.algorithms.weight_only.utility.prepare_inputs"]], "qdq_tensor() (in module neural_compressor.onnxrt.algorithms.weight_only.utility)": [[399, "neural_compressor.onnxrt.algorithms.weight_only.utility.qdq_tensor"]], "quant_tensor() (in module neural_compressor.onnxrt.algorithms.weight_only.utility)": [[399, "neural_compressor.onnxrt.algorithms.weight_only.utility.quant_tensor"]], "neural_compressor.onnxrt": [[400, "module-neural_compressor.onnxrt"]], "awq_quantize_entry() (in module neural_compressor.onnxrt.quantization.algorithm_entry)": [[401, "neural_compressor.onnxrt.quantization.algorithm_entry.awq_quantize_entry"]], "gptq_quantize_entry() (in module neural_compressor.onnxrt.quantization.algorithm_entry)": [[401, "neural_compressor.onnxrt.quantization.algorithm_entry.gptq_quantize_entry"]], "neural_compressor.onnxrt.quantization.algorithm_entry": [[401, "module-neural_compressor.onnxrt.quantization.algorithm_entry"]], "rtn_quantize_entry() (in module neural_compressor.onnxrt.quantization.algorithm_entry)": [[401, "neural_compressor.onnxrt.quantization.algorithm_entry.rtn_quantize_entry"]], "smooth_quant_entry() (in module neural_compressor.onnxrt.quantization.algorithm_entry)": [[401, "neural_compressor.onnxrt.quantization.algorithm_entry.smooth_quant_entry"]], "autotune() (in module neural_compressor.onnxrt.quantization.autotune)": [[402, "neural_compressor.onnxrt.quantization.autotune.autotune"]], "neural_compressor.onnxrt.quantization.autotune": [[402, "module-neural_compressor.onnxrt.quantization.autotune"]], "calibrationdatareader (class in neural_compressor.onnxrt.quantization.calibrate)": [[403, "neural_compressor.onnxrt.quantization.calibrate.CalibrationDataReader"]], "neural_compressor.onnxrt.quantization.calibrate": [[403, "module-neural_compressor.onnxrt.quantization.calibrate"]], "awqconfig (class in neural_compressor.onnxrt.quantization.config)": [[404, "neural_compressor.onnxrt.quantization.config.AWQConfig"]], "gptqconfig (class in neural_compressor.onnxrt.quantization.config)": [[404, "neural_compressor.onnxrt.quantization.config.GPTQConfig"]], "rtnconfig (class in neural_compressor.onnxrt.quantization.config)": [[404, "neural_compressor.onnxrt.quantization.config.RTNConfig"]], "smoohquantconfig (class in neural_compressor.onnxrt.quantization.config)": [[404, "neural_compressor.onnxrt.quantization.config.SmoohQuantConfig"]], "get_default_awq_config() (in module neural_compressor.onnxrt.quantization.config)": [[404, "neural_compressor.onnxrt.quantization.config.get_default_awq_config"]], "get_default_gptq_config() (in module neural_compressor.onnxrt.quantization.config)": [[404, "neural_compressor.onnxrt.quantization.config.get_default_gptq_config"]], "get_default_rtn_config() (in module neural_compressor.onnxrt.quantization.config)": [[404, "neural_compressor.onnxrt.quantization.config.get_default_rtn_config"]], "get_default_sq_config() (in module neural_compressor.onnxrt.quantization.config)": [[404, "neural_compressor.onnxrt.quantization.config.get_default_sq_config"]], "neural_compressor.onnxrt.quantization.config": [[404, "module-neural_compressor.onnxrt.quantization.config"]], "neural_compressor.onnxrt.quantization": [[405, "module-neural_compressor.onnxrt.quantization"]], "neural_compressor.onnxrt.quantization.quantize": [[406, "module-neural_compressor.onnxrt.quantization.quantize"]], "neural_compressor.onnxrt.utils": [[407, "module-neural_compressor.onnxrt.utils"]], "onnxmodel (class in neural_compressor.onnxrt.utils.onnx_model)": [[408, "neural_compressor.onnxrt.utils.onnx_model.ONNXModel"]], "neural_compressor.onnxrt.utils.onnx_model": [[408, "module-neural_compressor.onnxrt.utils.onnx_model"]], "check_model_with_infer_shapes() (in module neural_compressor.onnxrt.utils.utility)": [[409, "neural_compressor.onnxrt.utils.utility.check_model_with_infer_shapes"]], "find_by_name() (in module neural_compressor.onnxrt.utils.utility)": [[409, "neural_compressor.onnxrt.utils.utility.find_by_name"]], "get_qrange_for_qtype() (in module neural_compressor.onnxrt.utils.utility)": [[409, "neural_compressor.onnxrt.utils.utility.get_qrange_for_qType"]], "is_b_transposed() (in module neural_compressor.onnxrt.utils.utility)": [[409, "neural_compressor.onnxrt.utils.utility.is_B_transposed"]], "neural_compressor.onnxrt.utils.utility": [[409, "module-neural_compressor.onnxrt.utils.utility"]], "quantize_data() (in module neural_compressor.onnxrt.utils.utility)": [[409, "neural_compressor.onnxrt.utils.utility.quantize_data"]], "register_algo() (in module neural_compressor.onnxrt.utils.utility)": [[409, "neural_compressor.onnxrt.utils.utility.register_algo"]], "simple_progress_bar() (in module neural_compressor.onnxrt.utils.utility)": [[409, "neural_compressor.onnxrt.utils.utility.simple_progress_bar"]], "neural_compressor.profiling": [[410, "module-neural_compressor.profiling"]], "parserfactory (class in neural_compressor.profiling.parser.factory)": [[411, "neural_compressor.profiling.parser.factory.ParserFactory"]], "neural_compressor.profiling.parser.factory": [[411, "module-neural_compressor.profiling.parser.factory"]], "neural_compressor.profiling.parser": [[412, "module-neural_compressor.profiling.parser"]], "onnxrtparserfactory (class in neural_compressor.profiling.parser.onnx_parser.factory)": [[413, "neural_compressor.profiling.parser.onnx_parser.factory.OnnxrtParserFactory"]], "neural_compressor.profiling.parser.onnx_parser.factory": [[413, "module-neural_compressor.profiling.parser.onnx_parser.factory"]], "neural_compressor.profiling.parser.onnx_parser": [[414, "module-neural_compressor.profiling.parser.onnx_parser"]], "onnxprofilingparser (class in neural_compressor.profiling.parser.onnx_parser.parser)": [[415, "neural_compressor.profiling.parser.onnx_parser.parser.OnnxProfilingParser"]], "neural_compressor.profiling.parser.onnx_parser.parser": [[415, "module-neural_compressor.profiling.parser.onnx_parser.parser"]], "profilingparser (class in neural_compressor.profiling.parser.parser)": [[416, "neural_compressor.profiling.parser.parser.ProfilingParser"]], "neural_compressor.profiling.parser.parser": [[416, "module-neural_compressor.profiling.parser.parser"]], "profilingresult (class in neural_compressor.profiling.parser.result)": [[417, "neural_compressor.profiling.parser.result.ProfilingResult"]], "neural_compressor.profiling.parser.result": [[417, "module-neural_compressor.profiling.parser.result"]], "tensorflowparserfactory (class in neural_compressor.profiling.parser.tensorflow_parser.factory)": [[418, "neural_compressor.profiling.parser.tensorflow_parser.factory.TensorFlowParserFactory"]], "neural_compressor.profiling.parser.tensorflow_parser.factory": [[418, "module-neural_compressor.profiling.parser.tensorflow_parser.factory"]], "neural_compressor.profiling.parser.tensorflow_parser": [[419, "module-neural_compressor.profiling.parser.tensorflow_parser"]], "tensorflowprofilingparser (class in neural_compressor.profiling.parser.tensorflow_parser.parser)": [[420, "neural_compressor.profiling.parser.tensorflow_parser.parser.TensorFlowProfilingParser"]], "neural_compressor.profiling.parser.tensorflow_parser.parser": [[420, "module-neural_compressor.profiling.parser.tensorflow_parser.parser"]], "profilerfactory (class in neural_compressor.profiling.profiler.factory)": [[421, "neural_compressor.profiling.profiler.factory.ProfilerFactory"]], "neural_compressor.profiling.profiler.factory": [[421, "module-neural_compressor.profiling.profiler.factory"]], "neural_compressor.profiling.profiler": [[422, "module-neural_compressor.profiling.profiler"]], "profilerfactory (class in neural_compressor.profiling.profiler.onnxrt_profiler.factory)": [[423, "neural_compressor.profiling.profiler.onnxrt_profiler.factory.ProfilerFactory"]], "neural_compressor.profiling.profiler.onnxrt_profiler.factory": [[423, "module-neural_compressor.profiling.profiler.onnxrt_profiler.factory"]], "neural_compressor.profiling.profiler.onnxrt_profiler": [[424, "module-neural_compressor.profiling.profiler.onnxrt_profiler"]], "profiler (class in neural_compressor.profiling.profiler.onnxrt_profiler.profiler)": [[425, "neural_compressor.profiling.profiler.onnxrt_profiler.profiler.Profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.profiler": [[425, "module-neural_compressor.profiling.profiler.onnxrt_profiler.profiler"]], "create_onnx_config() (in module neural_compressor.profiling.profiler.onnxrt_profiler.utils)": [[426, "neural_compressor.profiling.profiler.onnxrt_profiler.utils.create_onnx_config"]], "neural_compressor.profiling.profiler.onnxrt_profiler.utils": [[426, "module-neural_compressor.profiling.profiler.onnxrt_profiler.utils"]], "profiler (class in neural_compressor.profiling.profiler.profiler)": [[427, "neural_compressor.profiling.profiler.profiler.Profiler"]], "neural_compressor.profiling.profiler.profiler": [[427, "module-neural_compressor.profiling.profiler.profiler"]], "profilerfactory (class in neural_compressor.profiling.profiler.tensorflow_profiler.factory)": [[428, "neural_compressor.profiling.profiler.tensorflow_profiler.factory.ProfilerFactory"]], "neural_compressor.profiling.profiler.tensorflow_profiler.factory": [[428, "module-neural_compressor.profiling.profiler.tensorflow_profiler.factory"]], "neural_compressor.profiling.profiler.tensorflow_profiler": [[429, "module-neural_compressor.profiling.profiler.tensorflow_profiler"]], "profiler (class in neural_compressor.profiling.profiler.tensorflow_profiler.profiler)": [[430, "neural_compressor.profiling.profiler.tensorflow_profiler.profiler.Profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.profiler": [[430, "module-neural_compressor.profiling.profiler.tensorflow_profiler.profiler"]], "create_tf_config() (in module neural_compressor.profiling.profiler.tensorflow_profiler.utils)": [[431, "neural_compressor.profiling.profiler.tensorflow_profiler.utils.create_tf_config"]], "delete_assign() (in module neural_compressor.profiling.profiler.tensorflow_profiler.utils)": [[431, "neural_compressor.profiling.profiler.tensorflow_profiler.utils.delete_assign"]], "neural_compressor.profiling.profiler.tensorflow_profiler.utils": [[431, "module-neural_compressor.profiling.profiler.tensorflow_profiler.utils"]], "set_eager_execution() (in module neural_compressor.profiling.profiler.tensorflow_profiler.utils)": [[431, "neural_compressor.profiling.profiler.tensorflow_profiler.utils.set_eager_execution"]], "fit() (in module neural_compressor.quantization)": [[432, "neural_compressor.quantization.fit"]], "neural_compressor.quantization": [[432, "module-neural_compressor.quantization"]], "autotunestrategy (class in neural_compressor.strategy.auto)": [[433, "neural_compressor.strategy.auto.AutoTuneStrategy"]], "neural_compressor.strategy.auto": [[433, "module-neural_compressor.strategy.auto"]], "automixedprecisiontunestrategy (class in neural_compressor.strategy.auto_mixed_precision)": [[434, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[434, "module-neural_compressor.strategy.auto_mixed_precision"]], "basictunestrategy (class in neural_compressor.strategy.basic)": [[435, "neural_compressor.strategy.basic.BasicTuneStrategy"]], "neural_compressor.strategy.basic": [[435, "module-neural_compressor.strategy.basic"]], "bayesianoptimization (class in neural_compressor.strategy.bayesian)": [[436, "neural_compressor.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.strategy.bayesian)": [[436, "neural_compressor.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.strategy.bayesian)": [[436, "neural_compressor.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.strategy.bayesian)": [[436, "neural_compressor.strategy.bayesian.acq_max"]], "neural_compressor.strategy.bayesian": [[436, "module-neural_compressor.strategy.bayesian"]], "conservativetunestrategy (class in neural_compressor.strategy.conservative)": [[437, "neural_compressor.strategy.conservative.ConservativeTuneStrategy"]], "neural_compressor.strategy.conservative": [[437, "module-neural_compressor.strategy.conservative"]], "exhaustivetunestrategy (class in neural_compressor.strategy.exhaustive)": [[438, "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[438, "module-neural_compressor.strategy.exhaustive"]], "hawq_v2tunestrategy (class in neural_compressor.strategy.hawq_v2)": [[439, "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[439, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[440, "module-neural_compressor.strategy"]], "msetunestrategy (class in neural_compressor.strategy.mse)": [[441, "neural_compressor.strategy.mse.MSETuneStrategy"]], "neural_compressor.strategy.mse": [[441, "module-neural_compressor.strategy.mse"]], "mse_v2tunestrategy (class in neural_compressor.strategy.mse_v2)": [[442, "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.strategy.mse_v2": [[442, "module-neural_compressor.strategy.mse_v2"]], "randomtunestrategy (class in neural_compressor.strategy.random)": [[443, "neural_compressor.strategy.random.RandomTuneStrategy"]], "neural_compressor.strategy.random": [[443, "module-neural_compressor.strategy.random"]], "tunestrategy (class in neural_compressor.strategy.strategy)": [[444, "neural_compressor.strategy.strategy.TuneStrategy"]], "tunestrategymeta (class in neural_compressor.strategy.strategy)": [[444, "neural_compressor.strategy.strategy.TuneStrategyMeta"]], "neural_compressor.strategy.strategy": [[444, "module-neural_compressor.strategy.strategy"]], "strategy_registry() (in module neural_compressor.strategy.strategy)": [[444, "neural_compressor.strategy.strategy.strategy_registry"]], "neural_compressor.strategy.utils.constant": [[445, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[446, "module-neural_compressor.strategy.utils"]], "blockfallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[447, "neural_compressor.strategy.utils.tuning_sampler.BlockFallbackTuningSampler"]], "fallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[447, "neural_compressor.strategy.utils.tuning_sampler.FallbackTuningSampler"]], "lowerbitssampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[447, "neural_compressor.strategy.utils.tuning_sampler.LowerBitsSampler"]], "modelwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[447, "neural_compressor.strategy.utils.tuning_sampler.ModelWiseTuningSampler"]], "optypewisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[447, "neural_compressor.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler"]], "opwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[447, "neural_compressor.strategy.utils.tuning_sampler.OpWiseTuningSampler"]], "smoothquantsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[447, "neural_compressor.strategy.utils.tuning_sampler.SmoothQuantSampler"]], "tuningorder (class in neural_compressor.strategy.utils.tuning_sampler)": [[447, "neural_compressor.strategy.utils.tuning_sampler.TuningOrder"]], "tuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[447, "neural_compressor.strategy.utils.tuning_sampler.TuningSampler"]], "weightonlyquantsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[447, "neural_compressor.strategy.utils.tuning_sampler.WeightOnlyQuantSampler"]], "neural_compressor.strategy.utils.tuning_sampler": [[447, "module-neural_compressor.strategy.utils.tuning_sampler"]], "tuningitem (class in neural_compressor.strategy.utils.tuning_space)": [[448, "neural_compressor.strategy.utils.tuning_space.TuningItem"]], "tuningspace (class in neural_compressor.strategy.utils.tuning_space)": [[448, "neural_compressor.strategy.utils.tuning_space.TuningSpace"]], "initial_tuning_cfg_with_quant_mode() (in module neural_compressor.strategy.utils.tuning_space)": [[448, "neural_compressor.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode"]], "neural_compressor.strategy.utils.tuning_space": [[448, "module-neural_compressor.strategy.utils.tuning_space"]], "pattern_to_internal() (in module neural_compressor.strategy.utils.tuning_space)": [[448, "neural_compressor.strategy.utils.tuning_space.pattern_to_internal"]], "pattern_to_path() (in module neural_compressor.strategy.utils.tuning_space)": [[448, "neural_compressor.strategy.utils.tuning_space.pattern_to_path"]], "quant_mode_from_pattern() (in module neural_compressor.strategy.utils.tuning_space)": [[448, "neural_compressor.strategy.utils.tuning_space.quant_mode_from_pattern"]], "optuningconfig (class in neural_compressor.strategy.utils.tuning_structs)": [[449, "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig"]], "neural_compressor.strategy.utils.tuning_structs": [[449, "module-neural_compressor.strategy.utils.tuning_structs"]], "classregister (class in neural_compressor.strategy.utils.utility)": [[450, "neural_compressor.strategy.utils.utility.ClassRegister"]], "ordereddefaultdict (class in neural_compressor.strategy.utils.utility)": [[450, "neural_compressor.strategy.utils.utility.OrderedDefaultDict"]], "quantoptions (class in neural_compressor.strategy.utils.utility)": [[450, "neural_compressor.strategy.utils.utility.QuantOptions"]], "quanttype (class in neural_compressor.strategy.utils.utility)": [[450, "neural_compressor.strategy.utils.utility.QuantType"]], "build_slave_faker_model() (in module neural_compressor.strategy.utils.utility)": [[450, "neural_compressor.strategy.utils.utility.build_slave_faker_model"]], "extract_data_type() (in module neural_compressor.strategy.utils.utility)": [[450, "neural_compressor.strategy.utils.utility.extract_data_type"]], "get_adaptor_name() (in module neural_compressor.strategy.utils.utility)": [[450, "neural_compressor.strategy.utils.utility.get_adaptor_name"]], "neural_compressor.strategy.utils.utility": [[450, "module-neural_compressor.strategy.utils.utility"]], "preprocess_user_cfg() (in module neural_compressor.strategy.utils.utility)": [[450, "neural_compressor.strategy.utils.utility.preprocess_user_cfg"]], "reverted_data_type() (in module neural_compressor.strategy.utils.utility)": [[450, "neural_compressor.strategy.utils.utility.reverted_data_type"]], "exampleclass (class in neural_compressor.template.api_doc_example)": [[451, "neural_compressor.template.api_doc_example.ExampleClass"]], "attr1 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[451, "neural_compressor.template.api_doc_example.ExampleClass.attr1"]], "attr2 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[451, "neural_compressor.template.api_doc_example.ExampleClass.attr2"]], "attr5 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[451, "neural_compressor.template.api_doc_example.ExampleClass.attr5"]], "attribute1 (in module neural_compressor.template.api_doc_example)": [[451, "neural_compressor.template.api_doc_example.attribute1"]], "function1() (in module neural_compressor.template.api_doc_example)": [[451, "neural_compressor.template.api_doc_example.function1"]], "function2() (in module neural_compressor.template.api_doc_example)": [[451, "neural_compressor.template.api_doc_example.function2"]], "function3() (in module neural_compressor.template.api_doc_example)": [[451, "neural_compressor.template.api_doc_example.function3"]], "generator1() (in module neural_compressor.template.api_doc_example)": [[451, "neural_compressor.template.api_doc_example.generator1"]], "module_debug_level1 (in module neural_compressor.template.api_doc_example)": [[451, "neural_compressor.template.api_doc_example.module_debug_level1"]], "neural_compressor.template.api_doc_example": [[451, "module-neural_compressor.template.api_doc_example"]], "neural_compressor.template": [[452, "module-neural_compressor.template"]], "neural_compressor.tensorflow.algorithms": [[453, "module-neural_compressor.tensorflow.algorithms"]], "smoothquantcalibration (class in neural_compressor.tensorflow.algorithms.smoother.calibration)": [[454, "neural_compressor.tensorflow.algorithms.smoother.calibration.SmoothQuantCalibration"]], "smoothquantcalibrationllm (class in neural_compressor.tensorflow.algorithms.smoother.calibration)": [[454, "neural_compressor.tensorflow.algorithms.smoother.calibration.SmoothQuantCalibrationLLM"]], "neural_compressor.tensorflow.algorithms.smoother.calibration": [[454, "module-neural_compressor.tensorflow.algorithms.smoother.calibration"]], "smoothquant (class in neural_compressor.tensorflow.algorithms.smoother.core)": [[455, "neural_compressor.tensorflow.algorithms.smoother.core.SmoothQuant"]], "neural_compressor.tensorflow.algorithms.smoother.core": [[455, "module-neural_compressor.tensorflow.algorithms.smoother.core"]], "neural_compressor.tensorflow.algorithms.smoother": [[456, "module-neural_compressor.tensorflow.algorithms.smoother"]], "smoothquantscaler (class in neural_compressor.tensorflow.algorithms.smoother.scaler)": [[457, "neural_compressor.tensorflow.algorithms.smoother.scaler.SmoothQuantScaler"]], "smoothquantscalerllm (class in neural_compressor.tensorflow.algorithms.smoother.scaler)": [[457, "neural_compressor.tensorflow.algorithms.smoother.scaler.SmoothQuantScalerLLM"]], "neural_compressor.tensorflow.algorithms.smoother.scaler": [[457, "module-neural_compressor.tensorflow.algorithms.smoother.scaler"]], "neural_compressor.tensorflow.algorithms.static_quant": [[458, "module-neural_compressor.tensorflow.algorithms.static_quant"]], "kerasadaptor (class in neural_compressor.tensorflow.algorithms.static_quant.keras)": [[459, "neural_compressor.tensorflow.algorithms.static_quant.keras.KerasAdaptor"]], "kerasconfigconverter (class in neural_compressor.tensorflow.algorithms.static_quant.keras)": [[459, "neural_compressor.tensorflow.algorithms.static_quant.keras.KerasConfigConverter"]], "kerasquery (class in neural_compressor.tensorflow.algorithms.static_quant.keras)": [[459, "neural_compressor.tensorflow.algorithms.static_quant.keras.KerasQuery"]], "neural_compressor.tensorflow.algorithms.static_quant.keras": [[459, "module-neural_compressor.tensorflow.algorithms.static_quant.keras"]], "tensorflowadaptor (class in neural_compressor.tensorflow.algorithms.static_quant.tensorflow)": [[460, "neural_compressor.tensorflow.algorithms.static_quant.tensorflow.TensorFlowAdaptor"]], "tensorflowconfig (class in neural_compressor.tensorflow.algorithms.static_quant.tensorflow)": [[460, "neural_compressor.tensorflow.algorithms.static_quant.tensorflow.TensorFlowConfig"]], "tensorflowconfigconverter (class in neural_compressor.tensorflow.algorithms.static_quant.tensorflow)": [[460, "neural_compressor.tensorflow.algorithms.static_quant.tensorflow.TensorflowConfigConverter"]], "tensorflowquery (class in neural_compressor.tensorflow.algorithms.static_quant.tensorflow)": [[460, "neural_compressor.tensorflow.algorithms.static_quant.tensorflow.TensorflowQuery"]], "tensorflow_itexadaptor (class in neural_compressor.tensorflow.algorithms.static_quant.tensorflow)": [[460, "neural_compressor.tensorflow.algorithms.static_quant.tensorflow.Tensorflow_ITEXAdaptor"]], "neural_compressor.tensorflow.algorithms.static_quant.tensorflow": [[460, "module-neural_compressor.tensorflow.algorithms.static_quant.tensorflow"]], "neural_compressor.tensorflow": [[461, "module-neural_compressor.tensorflow"]], "neural_compressor.tensorflow.keras": [[462, "module-neural_compressor.tensorflow.keras"]], "neural_compressor.tensorflow.keras.layers.conv2d": [[463, "module-neural_compressor.tensorflow.keras.layers.conv2d"]], "neural_compressor.tensorflow.keras.layers.dense": [[464, "module-neural_compressor.tensorflow.keras.layers.dense"]], "neural_compressor.tensorflow.keras.layers.depthwise_conv2d": [[465, "module-neural_compressor.tensorflow.keras.layers.depthwise_conv2d"]], "neural_compressor.tensorflow.keras.layers": [[466, "module-neural_compressor.tensorflow.keras.layers"]], "neural_compressor.tensorflow.keras.layers.pool2d": [[467, "module-neural_compressor.tensorflow.keras.layers.pool2d"]], "neural_compressor.tensorflow.keras.layers.quantizer": [[468, "module-neural_compressor.tensorflow.keras.layers.quantizer"]], "neural_compressor.tensorflow.keras.layers.separable_conv2d": [[469, "module-neural_compressor.tensorflow.keras.layers.separable_conv2d"]], "staticquantconfig (class in neural_compressor.tensorflow.keras.quantization.config)": [[470, "neural_compressor.tensorflow.keras.quantization.config.StaticQuantConfig"]], "get_all_registered_configs() (in module neural_compressor.tensorflow.keras.quantization.config)": [[470, "neural_compressor.tensorflow.keras.quantization.config.get_all_registered_configs"]], "get_default_static_quant_config() (in module neural_compressor.tensorflow.keras.quantization.config)": [[470, "neural_compressor.tensorflow.keras.quantization.config.get_default_static_quant_config"]], "neural_compressor.tensorflow.keras.quantization.config": [[470, "module-neural_compressor.tensorflow.keras.quantization.config"]], "neural_compressor.tensorflow.keras.quantization": [[471, "module-neural_compressor.tensorflow.keras.quantization"]], "neural_compressor.tensorflow.quantization.algorithm_entry": [[472, "module-neural_compressor.tensorflow.quantization.algorithm_entry"]], "static_quant_entry() (in module neural_compressor.tensorflow.quantization.algorithm_entry)": [[472, "neural_compressor.tensorflow.quantization.algorithm_entry.static_quant_entry"]], "autotune() (in module neural_compressor.tensorflow.quantization.autotune)": [[473, "neural_compressor.tensorflow.quantization.autotune.autotune"]], "neural_compressor.tensorflow.quantization.autotune": [[473, "module-neural_compressor.tensorflow.quantization.autotune"]], "smoothquantconfig (class in neural_compressor.tensorflow.quantization.config)": [[474, "neural_compressor.tensorflow.quantization.config.SmoothQuantConfig"]], "staticquantconfig (class in neural_compressor.tensorflow.quantization.config)": [[474, "neural_compressor.tensorflow.quantization.config.StaticQuantConfig"]], "get_default_sq_config() (in module neural_compressor.tensorflow.quantization.config)": [[474, "neural_compressor.tensorflow.quantization.config.get_default_sq_config"]], "get_default_static_quant_config() (in module neural_compressor.tensorflow.quantization.config)": [[474, "neural_compressor.tensorflow.quantization.config.get_default_static_quant_config"]], "neural_compressor.tensorflow.quantization.config": [[474, "module-neural_compressor.tensorflow.quantization.config"]], "neural_compressor.tensorflow.quantization": [[475, "module-neural_compressor.tensorflow.quantization"]], "neural_compressor.tensorflow.quantization.quantize": [[476, "module-neural_compressor.tensorflow.quantization.quantize"]], "quantize_model() (in module neural_compressor.tensorflow.quantization.quantize)": [[476, "neural_compressor.tensorflow.quantization.quantize.quantize_model"]], "quantize_model_with_single_config() (in module neural_compressor.tensorflow.quantization.quantize)": [[476, "neural_compressor.tensorflow.quantization.quantize.quantize_model_with_single_config"]], "graphconverter (class in neural_compressor.tensorflow.quantization.utils.graph_converter)": [[477, "neural_compressor.tensorflow.quantization.utils.graph_converter.GraphConverter"]], "neural_compressor.tensorflow.quantization.utils.graph_converter": [[477, "module-neural_compressor.tensorflow.quantization.utils.graph_converter"]], "graphconverterwithoutcalib (class in neural_compressor.tensorflow.quantization.utils.graph_converter_without_calib)": [[478, "neural_compressor.tensorflow.quantization.utils.graph_converter_without_calib.GraphConverterWithoutCalib"]], "neural_compressor.tensorflow.quantization.utils.graph_converter_without_calib": [[478, "module-neural_compressor.tensorflow.quantization.utils.graph_converter_without_calib"]], "bf16convert (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.bf16_convert)": [[479, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.bf16_convert.BF16Convert"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.bf16_convert": [[479, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.bf16_convert"]], "dequantizecastoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.dequantize_cast_optimizer)": [[480, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.dequantize_cast_optimizer.DequantizeCastOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.dequantize_cast_optimizer": [[480, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.dequantize_cast_optimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16": [[481, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16"]], "convertaddtobiasaddoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd)": [[482, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd": [[482, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd"]], "convertlayoutoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout)": [[483, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout": [[483, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout"]], "convertleakyreluoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu)": [[484, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu": [[484, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu"]], "convertnantorandom (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random)": [[485, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random": [[485, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random"]], "convertplaceholdertoconst (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const)": [[486, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const": [[486, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const"]], "dilatedcontraction (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction)": [[487, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction.DilatedContraction"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction": [[487, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction"]], "injectdummybiasaddoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd)": [[488, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd": [[488, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd"]], "expanddimsoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer)": [[489, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer": [[489, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer"]], "fetchweightfromreshapeoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape)": [[490, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape": [[490, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "foldbatchnormnodesoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm)": [[491, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm": [[491, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm"]], "graphfoldconstantoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant)": [[492, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant": [[492, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant"]], "fusebiasaddandaddoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add)": [[493, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add": [[493, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add"]], "fusecolumnwisemuloptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul)": [[494, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul": [[494, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul"]], "fuseconvwithmathoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math)": [[495, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math": [[495, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math"]], "fusedecomposedbnoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn)": [[496, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn.FuseDecomposedBNOptimizer"]], "bypass_reshape() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn)": [[496, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn.bypass_reshape"]], "get_const_dim_count() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn)": [[496, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn.get_const_dim_count"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn": [[496, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn"]], "node_from_map() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn)": [[496, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn.node_from_map"]], "node_name_from_input() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn)": [[496, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn)": [[496, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn)": [[496, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn.values_from_const"]], "fusedecomposedinoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in)": [[497, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in.FuseDecomposedINOptimizer"]], "bypass_reshape() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in)": [[497, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in.bypass_reshape"]], "get_const_dim_count() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in)": [[497, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in.get_const_dim_count"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in": [[497, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in"]], "node_from_map() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in)": [[497, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in.node_from_map"]], "node_name_from_input() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in)": [[497, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in)": [[497, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in)": [[497, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in.values_from_const"]], "fusegeluoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu)": [[498, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu": [[498, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu"]], "fuselayernormoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm)": [[499, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm": [[499, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm"]], "node_from_map() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm)": [[499, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm.node_from_map"]], "node_name_from_input() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm)": [[499, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm.node_name_from_input"]], "values_from_const() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm)": [[499, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm.values_from_const"]], "fusepadwithconv2doptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv)": [[500, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv": [[500, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv"]], "fusepadwithfp32conv2doptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv)": [[501, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[501, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "fusetransposereshapeoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose)": [[502, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose": [[502, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose"]], "graphcseoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer)": [[503, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer": [[503, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer"]], "grappleroptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass)": [[504, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass": [[504, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic": [[505, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic"]], "insertprintminmaxnode (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node)": [[506, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node": [[506, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node"]], "movesqueezeafterreluoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu)": [[507, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu": [[507, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu"]], "preoptimization (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize)": [[508, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize.PreOptimization"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize": [[508, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize"]], "removetrainingnodesoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes)": [[509, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes": [[509, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes"]], "renamebatchnormoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm)": [[510, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm": [[510, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm"]], "splitsharedinputoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input)": [[511, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input": [[511, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input"]], "stripequivalentnodesoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes)": [[512, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes": [[512, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes"]], "stripunusednodesoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes)": [[513, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes": [[513, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes"]], "switchoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer)": [[514, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer": [[514, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer"]], "graphrewriterbase (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base)": [[515, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base.GraphRewriterBase"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base": [[515, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter": [[516, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter"]], "freezefakequantopoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_fake_quant)": [[517, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_fake_quant": [[517, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_fake_quant"]], "freezevaluetransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value)": [[518, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value": [[518, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value"]], "freezevaluewithoutcalibtransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value_without_calib)": [[519, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value_without_calib": [[519, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value_without_calib"]], "fuseconvredundantdequantizetransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_redundant_dequantize)": [[520, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[520, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "fuseconvrequantizetransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_requantize)": [[521, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_requantize": [[521, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_requantize"]], "fusematmulredundantdequantizetransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize)": [[522, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[522, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "fusematmulrequantizedequantizenewapitransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize)": [[523, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer"]], "fusematmulrequantizedequantizetransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize)": [[523, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer"]], "fusematmulrequantizenewapitransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize)": [[523, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer"]], "fusematmulrequantizetransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize)": [[523, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize": [[523, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8": [[524, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8"]], "metainfochangingmemopoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.meta_op_optimizer)": [[525, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.meta_op_optimizer": [[525, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.meta_op_optimizer"]], "posthostconstconverter (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_hostconst_converter)": [[526, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_hostconst_converter": [[526, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_hostconst_converter"]], "postcseoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_quantized_op_cse)": [[527, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_quantized_op_cse": [[527, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_quantized_op_cse"]], "quantizedrnnconverter (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.rnn_convert)": [[528, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.rnn_convert": [[528, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.rnn_convert"]], "scalepropagationtransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.scale_propagation)": [[529, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.scale_propagation": [[529, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq": [[530, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq"]], "generategraphwithqdqpattern (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.insert_qdq_pattern)": [[531, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.insert_qdq_pattern": [[531, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.insert_qdq_pattern"]], "mergeduplicatedqdqoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.merge_duplicated_qdq)": [[532, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.merge_duplicated_qdq": [[532, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "shareqdqforitexypatternoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.share_qdq_y_pattern)": [[533, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.share_qdq_y_pattern": [[533, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "graphanalyzer (class in neural_compressor.tensorflow.quantization.utils.graph_util)": [[534, "neural_compressor.tensorflow.quantization.utils.graph_util.GraphAnalyzer"]], "graphrewriterhelper (class in neural_compressor.tensorflow.quantization.utils.graph_util)": [[534, "neural_compressor.tensorflow.quantization.utils.graph_util.GraphRewriterHelper"]], "neural_compressor.tensorflow.quantization.utils.graph_util": [[534, "module-neural_compressor.tensorflow.quantization.utils.graph_util"]], "neural_compressor.tensorflow.quantization.utils": [[535, "module-neural_compressor.tensorflow.quantization.utils"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph": [[536, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph"]], "fakequantize (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.fake_quantize)": [[537, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.fake_quantize.FakeQuantize"]], "fakequantizebase (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.fake_quantize)": [[537, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.fake_quantize": [[537, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat": [[538, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat"]], "quantizeconfig (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_config)": [[539, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_config.QuantizeConfig"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_config": [[539, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_config"]], "init_quantize_config() (in module neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_helper)": [[540, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_helper.init_quantize_config"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_helper": [[540, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_helper"]], "qat_clone_function() (in module neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_helper)": [[540, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_helper.qat_clone_function"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers": [[541, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers"]], "config_quantizable_layers() (in module neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.optimize_layer)": [[542, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.optimize_layer.config_quantizable_layers"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.optimize_layer": [[542, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "quantizelayeradd (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_add)": [[543, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_add.QuantizeLayerAdd"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[543, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "quantizelayerbase (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_base)": [[544, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_base.QuantizeLayerBase"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[544, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "quantizelayerbatchnormalization (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_bn)": [[545, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_bn.QuantizeLayerBatchNormalization"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[545, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "quantizewrapper (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_wrapper)": [[546, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper"]], "quantizewrapperbase (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_wrapper)": [[546, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_wrapper": [[546, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_wrapper"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_bn)": [[547, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_bn": [[547, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_concatv2)": [[548, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_concatv2": [[548, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_conv)": [[549, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_conv": [[549, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_conv"]], "fusenodestartwithdeconv2d (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_deconv)": [[550, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_deconv": [[550, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_deconv"]], "fusenodestartwithfusedinstancenorm (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_in)": [[551, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_in": [[551, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_in"]], "fusenodestartwithmatmul (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_matmul)": [[552, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_matmul": [[552, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_matmul"]], "fusenodestartwithpooling (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_pooling)": [[553, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_pooling": [[553, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq": [[554, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq"]], "optimizeqdqgraph (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.optimize_qdq)": [[555, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.optimize_qdq": [[555, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.optimize_qdq"]], "quantizegraphbase (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base)": [[556, "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base.QuantizeGraphBase"]], "quantizenodebase (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base)": [[556, "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base.QuantizeNodeBase"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base": [[556, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_bn)": [[557, "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_bn": [[557, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_concatv2)": [[558, "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_concatv2": [[558, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_conv)": [[559, "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_conv": [[559, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_conv"]], "quantizegraphforintel (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_for_intel_cpu)": [[560, "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_for_intel_cpu": [[560, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_for_intel_cpu"]], "fusenodestartwithmatmul (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_matmul)": [[561, "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_matmul": [[561, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_matmul"]], "fusenodestartwithpooling (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_pooling)": [[562, "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_pooling": [[562, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_pooling"]], "quantizegraphhelper (class in neural_compressor.tensorflow.quantization.utils.quantize_graph_common)": [[563, "neural_compressor.tensorflow.quantization.utils.quantize_graph_common.QuantizeGraphHelper"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph_common": [[563, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph_common"]], "biascorrection (class in neural_compressor.tensorflow.quantization.utils.transform_graph.bias_correction)": [[564, "neural_compressor.tensorflow.quantization.utils.transform_graph.bias_correction.BiasCorrection"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.bias_correction": [[564, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.bias_correction"]], "graphtransformbase (class in neural_compressor.tensorflow.quantization.utils.transform_graph.graph_transform_base)": [[565, "neural_compressor.tensorflow.quantization.utils.transform_graph.graph_transform_base.GraphTransformBase"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.graph_transform_base": [[565, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.graph_transform_base"]], "neural_compressor.tensorflow.quantization.utils.transform_graph": [[566, "module-neural_compressor.tensorflow.quantization.utils.transform_graph"]], "insertlogging (class in neural_compressor.tensorflow.quantization.utils.transform_graph.insert_logging)": [[567, "neural_compressor.tensorflow.quantization.utils.transform_graph.insert_logging.InsertLogging"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.insert_logging": [[567, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.insert_logging"]], "rerangequantizedconcat (class in neural_compressor.tensorflow.quantization.utils.transform_graph.rerange_quantized_concat)": [[568, "neural_compressor.tensorflow.quantization.utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.rerange_quantized_concat": [[568, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.rerange_quantized_concat"]], "apply_inlining() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[569, "neural_compressor.tensorflow.quantization.utils.utility.apply_inlining"]], "collate_tf_preds() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[569, "neural_compressor.tensorflow.quantization.utils.utility.collate_tf_preds"]], "construct_function_from_graph_def() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[569, "neural_compressor.tensorflow.quantization.utils.utility.construct_function_from_graph_def"]], "disable_random() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[569, "neural_compressor.tensorflow.quantization.utils.utility.disable_random"]], "fix_ref_type_of_graph_def() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[569, "neural_compressor.tensorflow.quantization.utils.utility.fix_ref_type_of_graph_def"]], "generate_feed_dict() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[569, "neural_compressor.tensorflow.quantization.utils.utility.generate_feed_dict"]], "get_graph_def() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[569, "neural_compressor.tensorflow.quantization.utils.utility.get_graph_def"]], "get_input_output_node_names() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[569, "neural_compressor.tensorflow.quantization.utils.utility.get_input_output_node_names"]], "get_model_input_shape() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[569, "neural_compressor.tensorflow.quantization.utils.utility.get_model_input_shape"]], "get_tensor_by_name() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[569, "neural_compressor.tensorflow.quantization.utils.utility.get_tensor_by_name"]], "get_tensor_val_from_graph_node() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[569, "neural_compressor.tensorflow.quantization.utils.utility.get_tensor_val_from_graph_node"]], "get_weight_from_input_tensor() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[569, "neural_compressor.tensorflow.quantization.utils.utility.get_weight_from_input_tensor"]], "int8_node_name_reverse() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[569, "neural_compressor.tensorflow.quantization.utils.utility.int8_node_name_reverse"]], "is_ckpt_format() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[569, "neural_compressor.tensorflow.quantization.utils.utility.is_ckpt_format"]], "is_saved_model_format() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[569, "neural_compressor.tensorflow.quantization.utils.utility.is_saved_model_format"]], "iterator_sess_run() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[569, "neural_compressor.tensorflow.quantization.utils.utility.iterator_sess_run"]], "neural_compressor.tensorflow.quantization.utils.utility": [[569, "module-neural_compressor.tensorflow.quantization.utils.utility"]], "parse_saved_model() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[569, "neural_compressor.tensorflow.quantization.utils.utility.parse_saved_model"]], "read_graph() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[569, "neural_compressor.tensorflow.quantization.utils.utility.read_graph"]], "reconstruct_saved_model() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[569, "neural_compressor.tensorflow.quantization.utils.utility.reconstruct_saved_model"]], "strip_equivalent_nodes() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[569, "neural_compressor.tensorflow.quantization.utils.utility.strip_equivalent_nodes"]], "strip_unused_nodes() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[569, "neural_compressor.tensorflow.quantization.utils.utility.strip_unused_nodes"]], "tf_diagnosis_helper() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[569, "neural_compressor.tensorflow.quantization.utils.utility.tf_diagnosis_helper"]], "write_graph() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[569, "neural_compressor.tensorflow.quantization.utils.utility.write_graph"]], "neural_compressor.tensorflow.utils.constants": [[570, "module-neural_compressor.tensorflow.utils.constants"]], "basedataloader (class in neural_compressor.tensorflow.utils.data)": [[571, "neural_compressor.tensorflow.utils.data.BaseDataLoader"]], "dummydataset (class in neural_compressor.tensorflow.utils.data)": [[571, "neural_compressor.tensorflow.utils.data.DummyDataset"]], "dummydatasetv2 (class in neural_compressor.tensorflow.utils.data)": [[571, "neural_compressor.tensorflow.utils.data.DummyDatasetV2"]], "neural_compressor.tensorflow.utils.data": [[571, "module-neural_compressor.tensorflow.utils.data"]], "neural_compressor.tensorflow.utils": [[572, "module-neural_compressor.tensorflow.utils"]], "model (class in neural_compressor.tensorflow.utils.model)": [[573, "neural_compressor.tensorflow.utils.model.Model"]], "neural_compressor.tensorflow.utils.model": [[573, "module-neural_compressor.tensorflow.utils.model"]], "basemodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[574, "neural_compressor.tensorflow.utils.model_wrappers.BaseModel"]], "kerasmodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[574, "neural_compressor.tensorflow.utils.model_wrappers.KerasModel"]], "tensorflowbasemodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[574, "neural_compressor.tensorflow.utils.model_wrappers.TensorflowBaseModel"]], "tensorflowcheckpointmodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[574, "neural_compressor.tensorflow.utils.model_wrappers.TensorflowCheckpointModel"]], "tensorflowllmmodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[574, "neural_compressor.tensorflow.utils.model_wrappers.TensorflowLLMModel"]], "tensorflowmodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[574, "neural_compressor.tensorflow.utils.model_wrappers.TensorflowModel"]], "tensorflowqatmodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[574, "neural_compressor.tensorflow.utils.model_wrappers.TensorflowQATModel"]], "tensorflowsavedmodelmodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[574, "neural_compressor.tensorflow.utils.model_wrappers.TensorflowSavedModelModel"]], "checkpoint_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[574, "neural_compressor.tensorflow.utils.model_wrappers.checkpoint_session"]], "estimator_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[574, "neural_compressor.tensorflow.utils.model_wrappers.estimator_session"]], "frozen_pb_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[574, "neural_compressor.tensorflow.utils.model_wrappers.frozen_pb_session"]], "get_model_type() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[574, "neural_compressor.tensorflow.utils.model_wrappers.get_model_type"]], "graph_def_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[574, "neural_compressor.tensorflow.utils.model_wrappers.graph_def_session"]], "graph_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[574, "neural_compressor.tensorflow.utils.model_wrappers.graph_session"]], "keras_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[574, "neural_compressor.tensorflow.utils.model_wrappers.keras_session"]], "load_saved_model() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[574, "neural_compressor.tensorflow.utils.model_wrappers.load_saved_model"]], "neural_compressor.tensorflow.utils.model_wrappers": [[574, "module-neural_compressor.tensorflow.utils.model_wrappers"]], "saved_model_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[574, "neural_compressor.tensorflow.utils.model_wrappers.saved_model_session"]], "slim_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[574, "neural_compressor.tensorflow.utils.model_wrappers.slim_session"]], "validate_and_inference_input_output() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[574, "neural_compressor.tensorflow.utils.model_wrappers.validate_and_inference_input_output"]], "validate_graph_node() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[574, "neural_compressor.tensorflow.utils.model_wrappers.validate_graph_node"]], "tfslimnetsfactory (class in neural_compressor.tensorflow.utils.nets_factory)": [[575, "neural_compressor.tensorflow.utils.nets_factory.TFSlimNetsFactory"]], "neural_compressor.tensorflow.utils.nets_factory": [[575, "module-neural_compressor.tensorflow.utils.nets_factory"]], "captureoutputtofile (class in neural_compressor.tensorflow.utils.utility)": [[576, "neural_compressor.tensorflow.utils.utility.CaptureOutputToFile"]], "cpuinfo (class in neural_compressor.tensorflow.utils.utility)": [[576, "neural_compressor.tensorflow.utils.utility.CpuInfo"]], "dequantize() (in module neural_compressor.tensorflow.utils.utility)": [[576, "neural_compressor.tensorflow.utils.utility.Dequantize"]], "lazyimport (class in neural_compressor.tensorflow.utils.utility)": [[576, "neural_compressor.tensorflow.utils.utility.LazyImport"]], "statistics (class in neural_compressor.tensorflow.utils.utility)": [[576, "neural_compressor.tensorflow.utils.utility.Statistics"]], "combine_histogram() (in module neural_compressor.tensorflow.utils.utility)": [[576, "neural_compressor.tensorflow.utils.utility.combine_histogram"]], "deep_get() (in module neural_compressor.tensorflow.utils.utility)": [[576, "neural_compressor.tensorflow.utils.utility.deep_get"]], "dequantize_weight() (in module neural_compressor.tensorflow.utils.utility)": [[576, "neural_compressor.tensorflow.utils.utility.dequantize_weight"]], "disable_random() (in module neural_compressor.tensorflow.utils.utility)": [[576, "neural_compressor.tensorflow.utils.utility.disable_random"]], "dump_data_to_local() (in module neural_compressor.tensorflow.utils.utility)": [[576, "neural_compressor.tensorflow.utils.utility.dump_data_to_local"]], "dump_elapsed_time() (in module neural_compressor.tensorflow.utils.utility)": [[576, "neural_compressor.tensorflow.utils.utility.dump_elapsed_time"]], "get_all_fp32_data() (in module neural_compressor.tensorflow.utils.utility)": [[576, "neural_compressor.tensorflow.utils.utility.get_all_fp32_data"]], "get_tensor_histogram() (in module neural_compressor.tensorflow.utils.utility)": [[576, "neural_compressor.tensorflow.utils.utility.get_tensor_histogram"]], "itex_installed() (in module neural_compressor.tensorflow.utils.utility)": [[576, "neural_compressor.tensorflow.utils.utility.itex_installed"]], "load_data_from_pkl() (in module neural_compressor.tensorflow.utils.utility)": [[576, "neural_compressor.tensorflow.utils.utility.load_data_from_pkl"]], "neural_compressor.tensorflow.utils.utility": [[576, "module-neural_compressor.tensorflow.utils.utility"]], "register_algo() (in module neural_compressor.tensorflow.utils.utility)": [[576, "neural_compressor.tensorflow.utils.utility.register_algo"]], "singleton() (in module neural_compressor.tensorflow.utils.utility)": [[576, "neural_compressor.tensorflow.utils.utility.singleton"]], "version1_eq_version2() (in module neural_compressor.tensorflow.utils.utility)": [[576, "neural_compressor.tensorflow.utils.utility.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.tensorflow.utils.utility)": [[576, "neural_compressor.tensorflow.utils.utility.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.tensorflow.utils.utility)": [[576, "neural_compressor.tensorflow.utils.utility.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.tensorflow.utils.utility)": [[576, "neural_compressor.tensorflow.utils.utility.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.tensorflow.utils.utility)": [[576, "neural_compressor.tensorflow.utils.utility.version1_lte_version2"]], "neural_compressor.torch.algorithms.habana_fp8.fp8_quant": [[577, "module-neural_compressor.torch.algorithms.habana_fp8.fp8_quant"]], "neural_compressor.torch.algorithms.habana_fp8": [[578, "module-neural_compressor.torch.algorithms.habana_fp8"]], "neural_compressor.torch.algorithms.habana_fp8.modules": [[579, "module-neural_compressor.torch.algorithms.habana_fp8.modules"]], "neural_compressor.torch.algorithms.habana_fp8.observer": [[580, "module-neural_compressor.torch.algorithms.habana_fp8.observer"]], "neural_compressor.torch.algorithms": [[581, "module-neural_compressor.torch.algorithms"]], "neural_compressor.torch.algorithms.layer_wise": [[582, "module-neural_compressor.torch.algorithms.layer_wise"]], "load() (in module neural_compressor.torch.algorithms.layer_wise.load)": [[583, "neural_compressor.torch.algorithms.layer_wise.load.load"]], "neural_compressor.torch.algorithms.layer_wise.load": [[583, "module-neural_compressor.torch.algorithms.layer_wise.load"]], "neural_compressor.torch.algorithms.layer_wise.modified_pickle": [[584, "module-neural_compressor.torch.algorithms.layer_wise.modified_pickle"]], "dowload_hf_model() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[585, "neural_compressor.torch.algorithms.layer_wise.utils.dowload_hf_model"]], "get_children() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[585, "neural_compressor.torch.algorithms.layer_wise.utils.get_children"]], "get_module() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[585, "neural_compressor.torch.algorithms.layer_wise.utils.get_module"]], "get_named_children() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[585, "neural_compressor.torch.algorithms.layer_wise.utils.get_named_children"]], "get_super_module_by_name() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[585, "neural_compressor.torch.algorithms.layer_wise.utils.get_super_module_by_name"]], "load_empty_model() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[585, "neural_compressor.torch.algorithms.layer_wise.utils.load_empty_model"]], "load_layer_wise_quantized_model() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[585, "neural_compressor.torch.algorithms.layer_wise.utils.load_layer_wise_quantized_model"]], "load_tensor() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[585, "neural_compressor.torch.algorithms.layer_wise.utils.load_tensor"]], "load_tensor_from_shard() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[585, "neural_compressor.torch.algorithms.layer_wise.utils.load_tensor_from_shard"]], "neural_compressor.torch.algorithms.layer_wise.utils": [[585, "module-neural_compressor.torch.algorithms.layer_wise.utils"]], "update_module() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[585, "neural_compressor.torch.algorithms.layer_wise.utils.update_module"]], "neural_compressor.torch.algorithms.static_quant": [[586, "module-neural_compressor.torch.algorithms.static_quant"]], "neural_compressor.torch.algorithms.static_quant.static_quant": [[587, "module-neural_compressor.torch.algorithms.static_quant.static_quant"]], "static_quantize() (in module neural_compressor.torch.algorithms.static_quant.static_quant)": [[587, "neural_compressor.torch.algorithms.static_quant.static_quant.static_quantize"]], "statistics (class in neural_compressor.torch.algorithms.static_quant.utility)": [[588, "neural_compressor.torch.algorithms.static_quant.utility.Statistics"]], "transformerbasedmodelblockpatterndetector (class in neural_compressor.torch.algorithms.static_quant.utility)": [[588, "neural_compressor.torch.algorithms.static_quant.utility.TransformerBasedModelBlockPatternDetector"]], "dump_model_op_stats() (in module neural_compressor.torch.algorithms.static_quant.utility)": [[588, "neural_compressor.torch.algorithms.static_quant.utility.dump_model_op_stats"]], "get_depth() (in module neural_compressor.torch.algorithms.static_quant.utility)": [[588, "neural_compressor.torch.algorithms.static_quant.utility.get_depth"]], "get_dict_at_depth() (in module neural_compressor.torch.algorithms.static_quant.utility)": [[588, "neural_compressor.torch.algorithms.static_quant.utility.get_dict_at_depth"]], "get_element_under_depth() (in module neural_compressor.torch.algorithms.static_quant.utility)": [[588, "neural_compressor.torch.algorithms.static_quant.utility.get_element_under_depth"]], "get_quantizable_ops_from_cfgs() (in module neural_compressor.torch.algorithms.static_quant.utility)": [[588, "neural_compressor.torch.algorithms.static_quant.utility.get_quantizable_ops_from_cfgs"]], "get_quantizable_ops_recursively() (in module neural_compressor.torch.algorithms.static_quant.utility)": [[588, "neural_compressor.torch.algorithms.static_quant.utility.get_quantizable_ops_recursively"]], "neural_compressor.torch.algorithms.static_quant.utility": [[588, "module-neural_compressor.torch.algorithms.static_quant.utility"]], "paser_cfgs() (in module neural_compressor.torch.algorithms.static_quant.utility)": [[588, "neural_compressor.torch.algorithms.static_quant.utility.paser_cfgs"]], "simple_inference() (in module neural_compressor.torch.algorithms.static_quant.utility)": [[588, "neural_compressor.torch.algorithms.static_quant.utility.simple_inference"]], "awq_quantize() (in module neural_compressor.torch.algorithms.weight_only.awq)": [[589, "neural_compressor.torch.algorithms.weight_only.awq.awq_quantize"]], "neural_compressor.torch.algorithms.weight_only.awq": [[589, "module-neural_compressor.torch.algorithms.weight_only.awq"]], "gptq (class in neural_compressor.torch.algorithms.weight_only.gptq)": [[590, "neural_compressor.torch.algorithms.weight_only.gptq.GPTQ"]], "gptquantizer (class in neural_compressor.torch.algorithms.weight_only.gptq)": [[590, "neural_compressor.torch.algorithms.weight_only.gptq.GPTQuantizer"]], "find_layers() (in module neural_compressor.torch.algorithms.weight_only.gptq)": [[590, "neural_compressor.torch.algorithms.weight_only.gptq.find_layers"]], "find_layers_name() (in module neural_compressor.torch.algorithms.weight_only.gptq)": [[590, "neural_compressor.torch.algorithms.weight_only.gptq.find_layers_name"]], "gptq_quantize() (in module neural_compressor.torch.algorithms.weight_only.gptq)": [[590, "neural_compressor.torch.algorithms.weight_only.gptq.gptq_quantize"]], "is_leaf() (in module neural_compressor.torch.algorithms.weight_only.gptq)": [[590, "neural_compressor.torch.algorithms.weight_only.gptq.is_leaf"]], "log_quantizable_layers_per_transformer() (in module neural_compressor.torch.algorithms.weight_only.gptq)": [[590, "neural_compressor.torch.algorithms.weight_only.gptq.log_quantizable_layers_per_transformer"]], "neural_compressor.torch.algorithms.weight_only.gptq": [[590, "module-neural_compressor.torch.algorithms.weight_only.gptq"]], "quantize() (in module neural_compressor.torch.algorithms.weight_only.gptq)": [[590, "neural_compressor.torch.algorithms.weight_only.gptq.quantize"]], "trace_gptq_target_blocks() (in module neural_compressor.torch.algorithms.weight_only.gptq)": [[590, "neural_compressor.torch.algorithms.weight_only.gptq.trace_gptq_target_blocks"]], "neural_compressor.torch.algorithms.weight_only.hqq.bitpack": [[591, "module-neural_compressor.torch.algorithms.weight_only.hqq.bitpack"]], "hqqmoduleconfig (class in neural_compressor.torch.algorithms.weight_only.hqq.config)": [[592, "neural_compressor.torch.algorithms.weight_only.hqq.config.HQQModuleConfig"]], "neural_compressor.torch.algorithms.weight_only.hqq.config": [[592, "module-neural_compressor.torch.algorithms.weight_only.hqq.config"]], "neural_compressor.torch.algorithms.weight_only.hqq.core": [[593, "module-neural_compressor.torch.algorithms.weight_only.hqq.core"]], "neural_compressor.torch.algorithms.weight_only.hqq": [[594, "module-neural_compressor.torch.algorithms.weight_only.hqq"]], "neural_compressor.torch.algorithms.weight_only.hqq.optimizer": [[595, "module-neural_compressor.torch.algorithms.weight_only.hqq.optimizer"]], "neural_compressor.torch.algorithms.weight_only.hqq.qtensor": [[596, "module-neural_compressor.torch.algorithms.weight_only.hqq.qtensor"]], "neural_compressor.torch.algorithms.weight_only.hqq.quant_api": [[597, "module-neural_compressor.torch.algorithms.weight_only.hqq.quant_api"]], "neural_compressor.torch.algorithms.weight_only.hqq.quantizer": [[598, "module-neural_compressor.torch.algorithms.weight_only.hqq.quantizer"]], "dump_elapsed_time() (in module neural_compressor.torch.algorithms.weight_only.hqq.utility)": [[599, "neural_compressor.torch.algorithms.weight_only.hqq.utility.dump_elapsed_time"]], "neural_compressor.torch.algorithms.weight_only.hqq.utility": [[599, "module-neural_compressor.torch.algorithms.weight_only.hqq.utility"]], "neural_compressor.torch.algorithms.weight_only": [[600, "module-neural_compressor.torch.algorithms.weight_only"]], "fakeaffinetensorquantfunction (class in neural_compressor.torch.algorithms.weight_only.modules)": [[601, "neural_compressor.torch.algorithms.weight_only.modules.FakeAffineTensorQuantFunction"]], "mullinear (class in neural_compressor.torch.algorithms.weight_only.modules)": [[601, "neural_compressor.torch.algorithms.weight_only.modules.MulLinear"]], "teqlinearfakequant (class in neural_compressor.torch.algorithms.weight_only.modules)": [[601, "neural_compressor.torch.algorithms.weight_only.modules.TEQLinearFakeQuant"]], "neural_compressor.torch.algorithms.weight_only.modules": [[601, "module-neural_compressor.torch.algorithms.weight_only.modules"]], "neural_compressor.torch.algorithms.weight_only.rtn": [[602, "module-neural_compressor.torch.algorithms.weight_only.rtn"]], "rtn_quantize() (in module neural_compressor.torch.algorithms.weight_only.rtn)": [[602, "neural_compressor.torch.algorithms.weight_only.rtn.rtn_quantize"]], "tequantizer (class in neural_compressor.torch.algorithms.weight_only.teq)": [[603, "neural_compressor.torch.algorithms.weight_only.teq.TEQuantizer"]], "neural_compressor.torch.algorithms.weight_only.teq": [[603, "module-neural_compressor.torch.algorithms.weight_only.teq"]], "teq_quantize() (in module neural_compressor.torch.algorithms.weight_only.teq)": [[603, "neural_compressor.torch.algorithms.weight_only.teq.teq_quantize"]], "calibration() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[604, "neural_compressor.torch.algorithms.weight_only.utility.calibration"]], "fetch_module() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[604, "neural_compressor.torch.algorithms.weight_only.utility.fetch_module"]], "get_absorb_layers() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[604, "neural_compressor.torch.algorithms.weight_only.utility.get_absorb_layers"]], "get_block_prefix() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[604, "neural_compressor.torch.algorithms.weight_only.utility.get_block_prefix"]], "get_example_input() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[604, "neural_compressor.torch.algorithms.weight_only.utility.get_example_input"]], "get_hidden_states() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[604, "neural_compressor.torch.algorithms.weight_only.utility.get_hidden_states"]], "get_module() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[604, "neural_compressor.torch.algorithms.weight_only.utility.get_module"]], "get_module_input_output() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[604, "neural_compressor.torch.algorithms.weight_only.utility.get_module_input_output"]], "neural_compressor.torch.algorithms.weight_only.utility": [[604, "module-neural_compressor.torch.algorithms.weight_only.utility"]], "qdq_weight_actor() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[604, "neural_compressor.torch.algorithms.weight_only.utility.qdq_weight_actor"]], "qdq_weight_asym() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[604, "neural_compressor.torch.algorithms.weight_only.utility.qdq_weight_asym"]], "qdq_weight_sym() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[604, "neural_compressor.torch.algorithms.weight_only.utility.qdq_weight_sym"]], "quant_tensor() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[604, "neural_compressor.torch.algorithms.weight_only.utility.quant_tensor"]], "quant_weight_w_scale() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[604, "neural_compressor.torch.algorithms.weight_only.utility.quant_weight_w_scale"]], "quantize_4bit() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[604, "neural_compressor.torch.algorithms.weight_only.utility.quantize_4bit"]], "search_clip() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[604, "neural_compressor.torch.algorithms.weight_only.utility.search_clip"]], "set_module() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[604, "neural_compressor.torch.algorithms.weight_only.utility.set_module"]], "autocast (class in neural_compressor.torch.amp.autocast)": [[605, "neural_compressor.torch.amp.autocast.autocast"]], "neural_compressor.torch.amp.autocast": [[605, "module-neural_compressor.torch.amp.autocast"]], "neural_compressor.torch.amp.fp8.functions": [[606, "module-neural_compressor.torch.amp.fp8.functions"]], "neural_compressor.torch.amp.fp8": [[607, "module-neural_compressor.torch.amp.fp8"]], "neural_compressor.torch.amp": [[608, "module-neural_compressor.torch.amp"]], "neural_compressor.torch": [[609, "module-neural_compressor.torch"]], "neural_compressor.torch.quantization.algorithm_entry": [[610, "module-neural_compressor.torch.quantization.algorithm_entry"]], "rtn_entry() (in module neural_compressor.torch.quantization.algorithm_entry)": [[610, "neural_compressor.torch.quantization.algorithm_entry.rtn_entry"]], "autotune() (in module neural_compressor.torch.quantization.autotune)": [[611, "neural_compressor.torch.quantization.autotune.autotune"]], "neural_compressor.torch.quantization.autotune": [[611, "module-neural_compressor.torch.quantization.autotune"]], "gptqconfig (class in neural_compressor.torch.quantization.config)": [[612, "neural_compressor.torch.quantization.config.GPTQConfig"]], "rtnconfig (class in neural_compressor.torch.quantization.config)": [[612, "neural_compressor.torch.quantization.config.RTNConfig"]], "get_default_gptq_config() (in module neural_compressor.torch.quantization.config)": [[612, "neural_compressor.torch.quantization.config.get_default_gptq_config"]], "get_default_hqq_config() (in module neural_compressor.torch.quantization.config)": [[612, "neural_compressor.torch.quantization.config.get_default_hqq_config"]], "get_default_rtn_config() (in module neural_compressor.torch.quantization.config)": [[612, "neural_compressor.torch.quantization.config.get_default_rtn_config"]], "neural_compressor.torch.quantization.config": [[612, "module-neural_compressor.torch.quantization.config"]], "neural_compressor.torch.quantization": [[613, "module-neural_compressor.torch.quantization"]], "neural_compressor.torch.quantization.modules": [[614, "module-neural_compressor.torch.quantization.modules"]], "neural_compressor.torch.quantization.quantize": [[615, "module-neural_compressor.torch.quantization.quantize"]], "quantize() (in module neural_compressor.torch.quantization.quantize)": [[615, "neural_compressor.torch.quantization.quantize.quantize"]], "auto_accelerator (class in neural_compressor.torch.utils.auto_accelerator)": [[616, "neural_compressor.torch.utils.auto_accelerator.Auto_Accelerator"]], "cpu_accelerator (class in neural_compressor.torch.utils.auto_accelerator)": [[616, "neural_compressor.torch.utils.auto_accelerator.CPU_Accelerator"]], "cuda_accelerator (class in neural_compressor.torch.utils.auto_accelerator)": [[616, "neural_compressor.torch.utils.auto_accelerator.CUDA_Accelerator"]], "neural_compressor.torch.utils.auto_accelerator": [[616, "module-neural_compressor.torch.utils.auto_accelerator"]], "register_accelerator() (in module neural_compressor.torch.utils.auto_accelerator)": [[616, "neural_compressor.torch.utils.auto_accelerator.register_accelerator"]], "neural_compressor.torch.utils.constants": [[617, "module-neural_compressor.torch.utils.constants"]], "neural_compressor.torch.utils.environ": [[618, "module-neural_compressor.torch.utils.environ"]], "neural_compressor.torch.utils": [[619, "module-neural_compressor.torch.utils"]], "fetch_module() (in module neural_compressor.torch.utils.utility)": [[620, "neural_compressor.torch.utils.utility.fetch_module"]], "neural_compressor.torch.utils.utility": [[620, "module-neural_compressor.torch.utils.utility"]], "register_algo() (in module neural_compressor.torch.utils.utility)": [[620, "neural_compressor.torch.utils.utility.register_algo"]], "set_module() (in module neural_compressor.torch.utils.utility)": [[620, "neural_compressor.torch.utils.utility.set_module"]], "callbacks (class in neural_compressor.training)": [[621, "neural_compressor.training.CallBacks"]], "compressionmanager (class in neural_compressor.training)": [[621, "neural_compressor.training.CompressionManager"]], "fit() (in module neural_compressor.training)": [[621, "neural_compressor.training.fit"]], "neural_compressor.training": [[621, "module-neural_compressor.training"]], "prepare_compression() (in module neural_compressor.training)": [[621, "neural_compressor.training.prepare_compression"]], "layerhistogramcollector (class in neural_compressor.utils.collect_layer_histogram)": [[622, "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector"]], "neural_compressor.utils.collect_layer_histogram": [[622, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[623, "module-neural_compressor.utils.constant"]], "create_dataloader() (in module neural_compressor.utils.create_obj_from_config)": [[624, "neural_compressor.utils.create_obj_from_config.create_dataloader"]], "create_dataset() (in module neural_compressor.utils.create_obj_from_config)": [[624, "neural_compressor.utils.create_obj_from_config.create_dataset"]], "create_eval_func() (in module neural_compressor.utils.create_obj_from_config)": [[624, "neural_compressor.utils.create_obj_from_config.create_eval_func"]], "create_train_func() (in module neural_compressor.utils.create_obj_from_config)": [[624, "neural_compressor.utils.create_obj_from_config.create_train_func"]], "get_algorithm() (in module neural_compressor.utils.create_obj_from_config)": [[624, "neural_compressor.utils.create_obj_from_config.get_algorithm"]], "get_func_from_config() (in module neural_compressor.utils.create_obj_from_config)": [[624, "neural_compressor.utils.create_obj_from_config.get_func_from_config"]], "get_metrics() (in module neural_compressor.utils.create_obj_from_config)": [[624, "neural_compressor.utils.create_obj_from_config.get_metrics"]], "get_postprocess() (in module neural_compressor.utils.create_obj_from_config)": [[624, "neural_compressor.utils.create_obj_from_config.get_postprocess"]], "get_preprocess() (in module neural_compressor.utils.create_obj_from_config)": [[624, "neural_compressor.utils.create_obj_from_config.get_preprocess"]], "neural_compressor.utils.create_obj_from_config": [[624, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[625, "module-neural_compressor.utils"]], "kl_divergence (class in neural_compressor.utils.kl_divergence)": [[626, "neural_compressor.utils.kl_divergence.KL_Divergence"]], "neural_compressor.utils.kl_divergence": [[626, "module-neural_compressor.utils.kl_divergence"]], "optimizedmodel (class in neural_compressor.utils.load_huggingface)": [[627, "neural_compressor.utils.load_huggingface.OptimizedModel"]], "export_compressed_model() (in module neural_compressor.utils.load_huggingface)": [[627, "neural_compressor.utils.load_huggingface.export_compressed_model"]], "neural_compressor.utils.load_huggingface": [[627, "module-neural_compressor.utils.load_huggingface"]], "save_for_huggingface_upstream() (in module neural_compressor.utils.load_huggingface)": [[627, "neural_compressor.utils.load_huggingface.save_for_huggingface_upstream"]], "logger (class in neural_compressor.utils.logger)": [[628, "neural_compressor.utils.logger.Logger"]], "debug() (in module neural_compressor.utils.logger)": [[628, "neural_compressor.utils.logger.debug"]], "error() (in module neural_compressor.utils.logger)": [[628, "neural_compressor.utils.logger.error"]], "fatal() (in module neural_compressor.utils.logger)": [[628, "neural_compressor.utils.logger.fatal"]], "info() (in module neural_compressor.utils.logger)": [[628, "neural_compressor.utils.logger.info"]], "log() (in module neural_compressor.utils.logger)": [[628, "neural_compressor.utils.logger.log"]], "neural_compressor.utils.logger": [[628, "module-neural_compressor.utils.logger"]], "warn() (in module neural_compressor.utils.logger)": [[628, "neural_compressor.utils.logger.warn"]], "warning() (in module neural_compressor.utils.logger)": [[628, "neural_compressor.utils.logger.warning"]], "get_model_path() (in module neural_compressor.utils.neural_insights_utils)": [[629, "neural_compressor.utils.neural_insights_utils.get_model_path"]], "neural_compressor.utils.neural_insights_utils": [[629, "module-neural_compressor.utils.neural_insights_utils"]], "register_neural_insights_workload() (in module neural_compressor.utils.neural_insights_utils)": [[629, "neural_compressor.utils.neural_insights_utils.register_neural_insights_workload"]], "update_neural_insights_workload() (in module neural_compressor.utils.neural_insights_utils)": [[629, "neural_compressor.utils.neural_insights_utils.update_neural_insights_workload"]], "update_neural_insights_workload_accuracy_data() (in module neural_compressor.utils.neural_insights_utils)": [[629, "neural_compressor.utils.neural_insights_utils.update_neural_insights_workload_accuracy_data"]], "neural_compressor.utils.options": [[630, "module-neural_compressor.utils.options"]], "onnxrt (class in neural_compressor.utils.options)": [[630, "neural_compressor.utils.options.onnxrt"]], "is_int8_model() (in module neural_compressor.utils.pytorch)": [[631, "neural_compressor.utils.pytorch.is_int8_model"]], "load() (in module neural_compressor.utils.pytorch)": [[631, "neural_compressor.utils.pytorch.load"]], "load_weight_only() (in module neural_compressor.utils.pytorch)": [[631, "neural_compressor.utils.pytorch.load_weight_only"]], "neural_compressor.utils.pytorch": [[631, "module-neural_compressor.utils.pytorch"]], "recover_model_from_json() (in module neural_compressor.utils.pytorch)": [[631, "neural_compressor.utils.pytorch.recover_model_from_json"]], "captureoutputtofile (class in neural_compressor.utils.utility)": [[632, "neural_compressor.utils.utility.CaptureOutputToFile"]], "cpuinfo (class in neural_compressor.utils.utility)": [[632, "neural_compressor.utils.utility.CpuInfo"]], "dequantize() (in module neural_compressor.utils.utility)": [[632, "neural_compressor.utils.utility.Dequantize"]], "dotdict (class in neural_compressor.utils.utility)": [[632, "neural_compressor.utils.utility.DotDict"]], "global_state (class in neural_compressor.utils.utility)": [[632, "neural_compressor.utils.utility.GLOBAL_STATE"]], "lazyimport (class in neural_compressor.utils.utility)": [[632, "neural_compressor.utils.utility.LazyImport"]], "mode (class in neural_compressor.utils.utility)": [[632, "neural_compressor.utils.utility.MODE"]], "opentry (class in neural_compressor.utils.utility)": [[632, "neural_compressor.utils.utility.OpEntry"]], "statistics (class in neural_compressor.utils.utility)": [[632, "neural_compressor.utils.utility.Statistics"]], "alias_param() (in module neural_compressor.utils.utility)": [[632, "neural_compressor.utils.utility.alias_param"]], "calculate_mse() (in module neural_compressor.utils.utility)": [[632, "neural_compressor.utils.utility.calculate_mse"]], "check_key_exist() (in module neural_compressor.utils.utility)": [[632, "neural_compressor.utils.utility.check_key_exist"]], "combine_histogram() (in module neural_compressor.utils.utility)": [[632, "neural_compressor.utils.utility.combine_histogram"]], "compare_objects() (in module neural_compressor.utils.utility)": [[632, "neural_compressor.utils.utility.compare_objects"]], "compute_sparsity() (in module neural_compressor.utils.utility)": [[632, "neural_compressor.utils.utility.compute_sparsity"]], "dequantize_weight() (in module neural_compressor.utils.utility)": [[632, "neural_compressor.utils.utility.dequantize_weight"]], "dump_class_attrs() (in module neural_compressor.utils.utility)": [[632, "neural_compressor.utils.utility.dump_class_attrs"]], "dump_data_to_local() (in module neural_compressor.utils.utility)": [[632, "neural_compressor.utils.utility.dump_data_to_local"]], "dump_elapsed_time() (in module neural_compressor.utils.utility)": [[632, "neural_compressor.utils.utility.dump_elapsed_time"]], "dump_table() (in module neural_compressor.utils.utility)": [[632, "neural_compressor.utils.utility.dump_table"]], "dump_table_to_csv() (in module neural_compressor.utils.utility)": [[632, "neural_compressor.utils.utility.dump_table_to_csv"]], "equal_dicts() (in module neural_compressor.utils.utility)": [[632, "neural_compressor.utils.utility.equal_dicts"]], "fault_tolerant_file() (in module neural_compressor.utils.utility)": [[632, "neural_compressor.utils.utility.fault_tolerant_file"]], "get_all_fp32_data() (in module neural_compressor.utils.utility)": [[632, "neural_compressor.utils.utility.get_all_fp32_data"]], "get_number_of_sockets() (in module neural_compressor.utils.utility)": [[632, "neural_compressor.utils.utility.get_number_of_sockets"]], "get_op_list() (in module neural_compressor.utils.utility)": [[632, "neural_compressor.utils.utility.get_op_list"]], "get_size() (in module neural_compressor.utils.utility)": [[632, "neural_compressor.utils.utility.get_size"]], "get_tensor_histogram() (in module neural_compressor.utils.utility)": [[632, "neural_compressor.utils.utility.get_tensor_histogram"]], "get_tensors_info() (in module neural_compressor.utils.utility)": [[632, "neural_compressor.utils.utility.get_tensors_info"]], "get_tuning_history() (in module neural_compressor.utils.utility)": [[632, "neural_compressor.utils.utility.get_tuning_history"]], "get_weights_details() (in module neural_compressor.utils.utility)": [[632, "neural_compressor.utils.utility.get_weights_details"]], "load_data_from_pkl() (in module neural_compressor.utils.utility)": [[632, "neural_compressor.utils.utility.load_data_from_pkl"]], "mse_metric_gap() (in module neural_compressor.utils.utility)": [[632, "neural_compressor.utils.utility.mse_metric_gap"]], "neural_compressor.utils.utility": [[632, "module-neural_compressor.utils.utility"]], "print_op_list() (in module neural_compressor.utils.utility)": [[632, "neural_compressor.utils.utility.print_op_list"]], "print_table() (in module neural_compressor.utils.utility)": [[632, "neural_compressor.utils.utility.print_table"]], "recover() (in module neural_compressor.utils.utility)": [[632, "neural_compressor.utils.utility.recover"]], "set_random_seed() (in module neural_compressor.utils.utility)": [[632, "neural_compressor.utils.utility.set_random_seed"]], "set_resume_from() (in module neural_compressor.utils.utility)": [[632, "neural_compressor.utils.utility.set_resume_from"]], "set_tensorboard() (in module neural_compressor.utils.utility)": [[632, "neural_compressor.utils.utility.set_tensorboard"]], "set_workspace() (in module neural_compressor.utils.utility)": [[632, "neural_compressor.utils.utility.set_workspace"]], "show_memory_info() (in module neural_compressor.utils.utility)": [[632, "neural_compressor.utils.utility.show_memory_info"]], "singleton() (in module neural_compressor.utils.utility)": [[632, "neural_compressor.utils.utility.singleton"]], "str2array() (in module neural_compressor.utils.utility)": [[632, "neural_compressor.utils.utility.str2array"]], "time_limit() (in module neural_compressor.utils.utility)": [[632, "neural_compressor.utils.utility.time_limit"]], "version1_eq_version2() (in module neural_compressor.utils.utility)": [[632, "neural_compressor.utils.utility.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.utils.utility)": [[632, "neural_compressor.utils.utility.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.utils.utility)": [[632, "neural_compressor.utils.utility.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.utils.utility)": [[632, "neural_compressor.utils.utility.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.utils.utility)": [[632, "neural_compressor.utils.utility.version1_lte_version2"]], "weightsdetails (class in neural_compressor.utils.weights_details)": [[633, "neural_compressor.utils.weights_details.WeightsDetails"]], "weightsstatistics (class in neural_compressor.utils.weights_details)": [[633, "neural_compressor.utils.weights_details.WeightsStatistics"]], "neural_compressor.utils.weights_details": [[633, "module-neural_compressor.utils.weights_details"]], "neural_compressor.version": [[634, "module-neural_compressor.version"]]}})