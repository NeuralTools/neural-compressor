Search.setIndex({"docnames": ["autoapi/block_mask/index", "autoapi/neural_compressor/adaptor/adaptor/index", "autoapi/neural_compressor/adaptor/index", "autoapi/neural_compressor/adaptor/keras/index", "autoapi/neural_compressor/adaptor/keras_utils/conv2d/index", "autoapi/neural_compressor/adaptor/keras_utils/dense/index", "autoapi/neural_compressor/adaptor/keras_utils/depthwise_conv2d/index", "autoapi/neural_compressor/adaptor/keras_utils/index", "autoapi/neural_compressor/adaptor/keras_utils/pool2d/index", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index", "autoapi/neural_compressor/adaptor/keras_utils/separable_conv2d/index", "autoapi/neural_compressor/adaptor/mxnet/index", "autoapi/neural_compressor/adaptor/mxnet_utils/index", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index", "autoapi/neural_compressor/adaptor/onnxrt/index", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index", "autoapi/neural_compressor/adaptor/ox_utils/calibrator/index", "autoapi/neural_compressor/adaptor/ox_utils/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/norm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/reduce/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/unary_op/index", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index", "autoapi/neural_compressor/adaptor/ox_utils/smooth_quant/index", "autoapi/neural_compressor/adaptor/ox_utils/util/index", "autoapi/neural_compressor/adaptor/ox_utils/weight_only/index", "autoapi/neural_compressor/adaptor/pytorch/index", "autoapi/neural_compressor/adaptor/query/index", "autoapi/neural_compressor/adaptor/tensorflow/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/dequantize_cast_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_schema/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/tf2onnx_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index", "autoapi/neural_compressor/adaptor/tf_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_calibration/index", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_scaler/index", "autoapi/neural_compressor/adaptor/tf_utils/tf2onnx_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index", "autoapi/neural_compressor/adaptor/tf_utils/util/index", "autoapi/neural_compressor/adaptor/torch_utils/auto_round/index", "autoapi/neural_compressor/adaptor/torch_utils/awq/index", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index", "autoapi/neural_compressor/adaptor/torch_utils/gptq/index", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index", "autoapi/neural_compressor/adaptor/torch_utils/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/modified_pickle/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/quantize/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/torch_load/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/utils/index", "autoapi/neural_compressor/adaptor/torch_utils/mixed_precision/index", "autoapi/neural_compressor/adaptor/torch_utils/model_wrapper/index", "autoapi/neural_compressor/adaptor/torch_utils/pattern_detector/index", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index", "autoapi/neural_compressor/adaptor/torch_utils/teq/index", "autoapi/neural_compressor/adaptor/torch_utils/util/index", "autoapi/neural_compressor/adaptor/torch_utils/waq/auto_alpha/index", "autoapi/neural_compressor/adaptor/torch_utils/waq/calibration/index", "autoapi/neural_compressor/adaptor/torch_utils/waq/graph_trace/index", "autoapi/neural_compressor/adaptor/torch_utils/waq/index", "autoapi/neural_compressor/adaptor/torch_utils/waq/smooth_quant/index", "autoapi/neural_compressor/adaptor/torch_utils/waq/utils/index", "autoapi/neural_compressor/adaptor/torch_utils/weight_only/index", "autoapi/neural_compressor/algorithm/algorithm/index", "autoapi/neural_compressor/algorithm/fast_bias_correction/index", "autoapi/neural_compressor/algorithm/index", "autoapi/neural_compressor/algorithm/smooth_quant/index", "autoapi/neural_compressor/algorithm/weight_correction/index", "autoapi/neural_compressor/benchmark/index", "autoapi/neural_compressor/common/base_config/index", "autoapi/neural_compressor/common/base_tuning/index", "autoapi/neural_compressor/common/index", "autoapi/neural_compressor/common/tuning_param/index", "autoapi/neural_compressor/common/utils/constants/index", "autoapi/neural_compressor/common/utils/index", "autoapi/neural_compressor/common/utils/logger/index", "autoapi/neural_compressor/common/utils/save_load/index", "autoapi/neural_compressor/common/utils/utility/index", "autoapi/neural_compressor/compression/callbacks/index", "autoapi/neural_compressor/compression/distillation/criterions/index", "autoapi/neural_compressor/compression/distillation/index", "autoapi/neural_compressor/compression/distillation/optimizers/index", "autoapi/neural_compressor/compression/distillation/utility/index", "autoapi/neural_compressor/compression/hpo/index", "autoapi/neural_compressor/compression/hpo/sa_optimizer/index", "autoapi/neural_compressor/compression/hpo/search_algorithms/index", "autoapi/neural_compressor/compression/hpo/search_space/index", "autoapi/neural_compressor/compression/index", "autoapi/neural_compressor/compression/pruner/criteria/index", "autoapi/neural_compressor/compression/pruner/dsnot/index", "autoapi/neural_compressor/compression/pruner/index", "autoapi/neural_compressor/compression/pruner/model_slim/auto_slim/index", "autoapi/neural_compressor/compression/pruner/model_slim/index", "autoapi/neural_compressor/compression/pruner/model_slim/pattern_analyzer/index", "autoapi/neural_compressor/compression/pruner/model_slim/weight_slim/index", "autoapi/neural_compressor/compression/pruner/patterns/base/index", "autoapi/neural_compressor/compression/pruner/patterns/index", "autoapi/neural_compressor/compression/pruner/patterns/mha/index", "autoapi/neural_compressor/compression/pruner/patterns/ninm/index", "autoapi/neural_compressor/compression/pruner/patterns/nxm/index", "autoapi/neural_compressor/compression/pruner/pruners/base/index", "autoapi/neural_compressor/compression/pruner/pruners/basic/index", "autoapi/neural_compressor/compression/pruner/pruners/block_mask/index", "autoapi/neural_compressor/compression/pruner/pruners/index", "autoapi/neural_compressor/compression/pruner/pruners/mha/index", "autoapi/neural_compressor/compression/pruner/pruners/pattern_lock/index", "autoapi/neural_compressor/compression/pruner/pruners/progressive/index", "autoapi/neural_compressor/compression/pruner/pruners/retrain_free/index", "autoapi/neural_compressor/compression/pruner/pruners/sparse_gpt/index", "autoapi/neural_compressor/compression/pruner/pruning/index", "autoapi/neural_compressor/compression/pruner/regs/index", "autoapi/neural_compressor/compression/pruner/schedulers/index", "autoapi/neural_compressor/compression/pruner/tf_criteria/index", "autoapi/neural_compressor/compression/pruner/utils/index", "autoapi/neural_compressor/compression/pruner/wanda/index", "autoapi/neural_compressor/compression/pruner/wanda/prune/index", "autoapi/neural_compressor/compression/pruner/wanda/utils/index", "autoapi/neural_compressor/compression/pruner/wanda/wrapper/index", "autoapi/neural_compressor/conf/config/index", "autoapi/neural_compressor/conf/dotdict/index", "autoapi/neural_compressor/conf/index", "autoapi/neural_compressor/conf/pythonic_config/index", "autoapi/neural_compressor/config/index", "autoapi/neural_compressor/contrib/index", "autoapi/neural_compressor/contrib/strategy/index", "autoapi/neural_compressor/contrib/strategy/sigopt/index", "autoapi/neural_compressor/contrib/strategy/tpe/index", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/data/dataloaders/dataloader/index", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/data/dataloaders/fetcher/index", "autoapi/neural_compressor/data/dataloaders/index", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/data/dataloaders/sampler/index", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/data/datasets/bert_dataset/index", "autoapi/neural_compressor/data/datasets/coco_dataset/index", "autoapi/neural_compressor/data/datasets/dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/data/datasets/index", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/data/filters/coco_filter/index", "autoapi/neural_compressor/data/filters/filter/index", "autoapi/neural_compressor/data/filters/index", "autoapi/neural_compressor/data/index", "autoapi/neural_compressor/data/transforms/coco_transform/index", "autoapi/neural_compressor/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/data/transforms/index", "autoapi/neural_compressor/data/transforms/postprocess/index", "autoapi/neural_compressor/data/transforms/tokenization/index", "autoapi/neural_compressor/data/transforms/transform/index", "autoapi/neural_compressor/experimental/benchmark/index", "autoapi/neural_compressor/experimental/common/criterion/index", "autoapi/neural_compressor/experimental/common/dataloader/index", "autoapi/neural_compressor/experimental/common/index", "autoapi/neural_compressor/experimental/common/metric/index", "autoapi/neural_compressor/experimental/common/model/index", "autoapi/neural_compressor/experimental/common/optimizer/index", "autoapi/neural_compressor/experimental/common/postprocess/index", "autoapi/neural_compressor/experimental/common/torch_utils/index", "autoapi/neural_compressor/experimental/component/index", "autoapi/neural_compressor/experimental/compression/index", "autoapi/neural_compressor/experimental/contrib/index", "autoapi/neural_compressor/experimental/contrib/strategy/index", "autoapi/neural_compressor/experimental/contrib/strategy/sigopt/index", "autoapi/neural_compressor/experimental/contrib/strategy/tpe/index", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index", "autoapi/neural_compressor/experimental/data/dataloaders/index", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/index", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index", "autoapi/neural_compressor/experimental/data/filters/filter/index", "autoapi/neural_compressor/experimental/data/filters/index", "autoapi/neural_compressor/experimental/data/index", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/experimental/data/transforms/index", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index", "autoapi/neural_compressor/experimental/data/transforms/transform/index", "autoapi/neural_compressor/experimental/distillation/index", "autoapi/neural_compressor/experimental/export/index", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index", "autoapi/neural_compressor/experimental/export/tf2onnx/index", "autoapi/neural_compressor/experimental/export/torch2onnx/index", "autoapi/neural_compressor/experimental/graph_optimization/index", "autoapi/neural_compressor/experimental/index", "autoapi/neural_compressor/experimental/metric/bleu/index", "autoapi/neural_compressor/experimental/metric/bleu_util/index", "autoapi/neural_compressor/experimental/metric/coco_label_map/index", "autoapi/neural_compressor/experimental/metric/coco_tools/index", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index", "autoapi/neural_compressor/experimental/metric/f1/index", "autoapi/neural_compressor/experimental/metric/index", "autoapi/neural_compressor/experimental/metric/metric/index", "autoapi/neural_compressor/experimental/mixed_precision/index", "autoapi/neural_compressor/experimental/model_conversion/index", "autoapi/neural_compressor/experimental/nas/basic_nas/index", "autoapi/neural_compressor/experimental/nas/dynas/index", "autoapi/neural_compressor/experimental/nas/index", "autoapi/neural_compressor/experimental/nas/nas/index", "autoapi/neural_compressor/experimental/nas/nas_utils/index", "autoapi/neural_compressor/experimental/nas/search_algorithms/index", "autoapi/neural_compressor/experimental/pruner_legacy/gradient_sensitivity/index", "autoapi/neural_compressor/experimental/pruner_legacy/group_lasso/index", "autoapi/neural_compressor/experimental/pruner_legacy/index", "autoapi/neural_compressor/experimental/pruner_legacy/magnitude/index", "autoapi/neural_compressor/experimental/pruner_legacy/pattern_lock/index", "autoapi/neural_compressor/experimental/pruner_legacy/pruner/index", "autoapi/neural_compressor/experimental/pruning/index", "autoapi/neural_compressor/experimental/pruning_recipes/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index", "autoapi/neural_compressor/experimental/pruning_v2/index", "autoapi/neural_compressor/experimental/pytorch_pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index", "autoapi/neural_compressor/experimental/quantization/index", "autoapi/neural_compressor/experimental/scheduler/index", "autoapi/neural_compressor/experimental/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/experimental/strategy/basic/index", "autoapi/neural_compressor/experimental/strategy/bayesian/index", "autoapi/neural_compressor/experimental/strategy/exhaustive/index", "autoapi/neural_compressor/experimental/strategy/index", "autoapi/neural_compressor/experimental/strategy/mse/index", "autoapi/neural_compressor/experimental/strategy/mse_v2/index", "autoapi/neural_compressor/experimental/strategy/random/index", "autoapi/neural_compressor/experimental/strategy/strategy/index", "autoapi/neural_compressor/experimental/strategy/utils/constant/index", "autoapi/neural_compressor/experimental/strategy/utils/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_space/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/experimental/strategy/utils/utility/index", "autoapi/neural_compressor/index", "autoapi/neural_compressor/metric/bleu/index", "autoapi/neural_compressor/metric/bleu_util/index", "autoapi/neural_compressor/metric/coco_label_map/index", "autoapi/neural_compressor/metric/coco_tools/index", "autoapi/neural_compressor/metric/evaluate_squad/index", "autoapi/neural_compressor/metric/f1/index", "autoapi/neural_compressor/metric/index", "autoapi/neural_compressor/metric/metric/index", "autoapi/neural_compressor/mix_precision/index", "autoapi/neural_compressor/model/base_model/index", "autoapi/neural_compressor/model/index", "autoapi/neural_compressor/model/keras_model/index", "autoapi/neural_compressor/model/model/index", "autoapi/neural_compressor/model/mxnet_model/index", "autoapi/neural_compressor/model/nets_factory/index", "autoapi/neural_compressor/model/onnx_model/index", "autoapi/neural_compressor/model/tensorflow_model/index", "autoapi/neural_compressor/model/torch_model/index", "autoapi/neural_compressor/objective/index", "autoapi/neural_compressor/onnxrt/algorithms/index", "autoapi/neural_compressor/onnxrt/algorithms/layer_wise/core/index", "autoapi/neural_compressor/onnxrt/algorithms/layer_wise/index", "autoapi/neural_compressor/onnxrt/algorithms/smoother/calibrator/index", "autoapi/neural_compressor/onnxrt/algorithms/smoother/core/index", "autoapi/neural_compressor/onnxrt/algorithms/smoother/index", "autoapi/neural_compressor/onnxrt/algorithms/weight_only/awq/index", "autoapi/neural_compressor/onnxrt/algorithms/weight_only/gptq/index", "autoapi/neural_compressor/onnxrt/algorithms/weight_only/index", "autoapi/neural_compressor/onnxrt/algorithms/weight_only/rtn/index", "autoapi/neural_compressor/onnxrt/algorithms/weight_only/utility/index", "autoapi/neural_compressor/onnxrt/index", "autoapi/neural_compressor/onnxrt/quantization/algorithm_entry/index", "autoapi/neural_compressor/onnxrt/quantization/autotune/index", "autoapi/neural_compressor/onnxrt/quantization/calibrate/index", "autoapi/neural_compressor/onnxrt/quantization/config/index", "autoapi/neural_compressor/onnxrt/quantization/index", "autoapi/neural_compressor/onnxrt/quantization/quantize/index", "autoapi/neural_compressor/onnxrt/utils/index", "autoapi/neural_compressor/onnxrt/utils/onnx_model/index", "autoapi/neural_compressor/onnxrt/utils/utility/index", "autoapi/neural_compressor/profiling/index", "autoapi/neural_compressor/profiling/parser/factory/index", "autoapi/neural_compressor/profiling/parser/index", "autoapi/neural_compressor/profiling/parser/onnx_parser/factory/index", "autoapi/neural_compressor/profiling/parser/onnx_parser/index", "autoapi/neural_compressor/profiling/parser/onnx_parser/parser/index", "autoapi/neural_compressor/profiling/parser/parser/index", "autoapi/neural_compressor/profiling/parser/result/index", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/factory/index", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/index", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/parser/index", "autoapi/neural_compressor/profiling/profiler/factory/index", "autoapi/neural_compressor/profiling/profiler/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/factory/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/profiler/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/utils/index", "autoapi/neural_compressor/profiling/profiler/profiler/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/factory/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/profiler/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/utils/index", "autoapi/neural_compressor/quantization/index", "autoapi/neural_compressor/strategy/auto/index", "autoapi/neural_compressor/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/strategy/basic/index", "autoapi/neural_compressor/strategy/bayesian/index", "autoapi/neural_compressor/strategy/conservative/index", "autoapi/neural_compressor/strategy/exhaustive/index", "autoapi/neural_compressor/strategy/hawq_v2/index", "autoapi/neural_compressor/strategy/index", "autoapi/neural_compressor/strategy/mse/index", "autoapi/neural_compressor/strategy/mse_v2/index", "autoapi/neural_compressor/strategy/random/index", "autoapi/neural_compressor/strategy/strategy/index", "autoapi/neural_compressor/strategy/utils/constant/index", "autoapi/neural_compressor/strategy/utils/index", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/strategy/utils/tuning_space/index", "autoapi/neural_compressor/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/strategy/utils/utility/index", "autoapi/neural_compressor/template/api_doc_example/index", "autoapi/neural_compressor/template/index", "autoapi/neural_compressor/tensorflow/algorithms/index", "autoapi/neural_compressor/tensorflow/algorithms/smoother/calibration/index", "autoapi/neural_compressor/tensorflow/algorithms/smoother/core/index", "autoapi/neural_compressor/tensorflow/algorithms/smoother/index", "autoapi/neural_compressor/tensorflow/algorithms/smoother/scaler/index", "autoapi/neural_compressor/tensorflow/algorithms/static_quant/index", "autoapi/neural_compressor/tensorflow/algorithms/static_quant/keras/index", "autoapi/neural_compressor/tensorflow/algorithms/static_quant/tensorflow/index", "autoapi/neural_compressor/tensorflow/index", "autoapi/neural_compressor/tensorflow/keras/index", "autoapi/neural_compressor/tensorflow/keras/layers/conv2d/index", "autoapi/neural_compressor/tensorflow/keras/layers/dense/index", "autoapi/neural_compressor/tensorflow/keras/layers/depthwise_conv2d/index", "autoapi/neural_compressor/tensorflow/keras/layers/index", "autoapi/neural_compressor/tensorflow/keras/layers/layer_initializer/index", "autoapi/neural_compressor/tensorflow/keras/layers/pool2d/index", "autoapi/neural_compressor/tensorflow/keras/layers/separable_conv2d/index", "autoapi/neural_compressor/tensorflow/keras/quantization/config/index", "autoapi/neural_compressor/tensorflow/keras/quantization/index", "autoapi/neural_compressor/tensorflow/quantization/algorithm_entry/index", "autoapi/neural_compressor/tensorflow/quantization/autotune/index", "autoapi/neural_compressor/tensorflow/quantization/config/index", "autoapi/neural_compressor/tensorflow/quantization/index", "autoapi/neural_compressor/tensorflow/quantization/quantize/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_converter/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_converter_without_calib/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/bf16/bf16_convert/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/bf16/dequantize_cast_optimizer/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/bf16/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_add_to_biasadd/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_layout/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_leakyrelu/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_nan_to_random/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_placeholder_to_const/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/dilated_contraction/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/dummy_biasadd/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/expanddims_optimizer/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fetch_weight_from_reshape/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fold_batch_norm/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fold_constant/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_biasadd_add/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_column_wise_mul/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_conv_with_math/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_decomposed_bn/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_decomposed_in/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_gelu/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_layer_norm/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_pad_with_conv/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_reshape_transpose/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/graph_cse_optimizer/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/grappler_pass/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/insert_print_node/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/move_squeeze_after_relu/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/pre_optimize/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/remove_training_nodes/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/rename_batch_norm/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/split_shared_input/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/strip_equivalent_nodes/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/strip_unused_nodes/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/switch_optimizer/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/graph_base/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/freeze_fake_quant/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/freeze_value/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/freeze_value_without_calib/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/fuse_conv_requantize/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/fuse_matmul_requantize/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/meta_op_optimizer/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/post_hostconst_converter/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/post_quantized_op_cse/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/rnn_convert/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/scale_propagation/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/qdq/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/qdq/insert_qdq_pattern/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/qdq/merge_duplicated_qdq/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/qdq/share_qdq_y_pattern/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_util/index", "autoapi/neural_compressor/tensorflow/quantization/utils/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/fake_quantize/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_config/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_helper/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_layers/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_layers/optimize_layer/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_wrapper/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_bn/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_concatv2/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_conv/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_deconv/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_in/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_matmul/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_pooling/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/optimize_qdq/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_base/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_bn/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_concatv2/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_conv/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_for_intel_cpu/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_matmul/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_pooling/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph_common/index", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/bias_correction/index", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/graph_transform_base/index", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/index", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/insert_logging/index", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/rerange_quantized_concat/index", "autoapi/neural_compressor/tensorflow/quantization/utils/utility/index", "autoapi/neural_compressor/tensorflow/utils/constants/index", "autoapi/neural_compressor/tensorflow/utils/data/index", "autoapi/neural_compressor/tensorflow/utils/index", "autoapi/neural_compressor/tensorflow/utils/model/index", "autoapi/neural_compressor/tensorflow/utils/model_wrappers/index", "autoapi/neural_compressor/tensorflow/utils/nets_factory/index", "autoapi/neural_compressor/tensorflow/utils/utility/index", "autoapi/neural_compressor/torch/algorithms/base_algorithm/index", "autoapi/neural_compressor/torch/algorithms/habana_fp8/fp8_quant/index", "autoapi/neural_compressor/torch/algorithms/habana_fp8/index", "autoapi/neural_compressor/torch/algorithms/habana_fp8/modules/index", "autoapi/neural_compressor/torch/algorithms/habana_fp8/observer/index", "autoapi/neural_compressor/torch/algorithms/habana_fp8/save_load/index", "autoapi/neural_compressor/torch/algorithms/habana_fp8/scale/index", "autoapi/neural_compressor/torch/algorithms/habana_fp8/tensor/index", "autoapi/neural_compressor/torch/algorithms/index", "autoapi/neural_compressor/torch/algorithms/layer_wise/index", "autoapi/neural_compressor/torch/algorithms/layer_wise/load/index", "autoapi/neural_compressor/torch/algorithms/layer_wise/modified_pickle/index", "autoapi/neural_compressor/torch/algorithms/layer_wise/utils/index", "autoapi/neural_compressor/torch/algorithms/pt2e_quant/core/index", "autoapi/neural_compressor/torch/algorithms/pt2e_quant/index", "autoapi/neural_compressor/torch/algorithms/smooth_quant/index", "autoapi/neural_compressor/torch/algorithms/smooth_quant/save_load/index", "autoapi/neural_compressor/torch/algorithms/smooth_quant/smooth_quant/index", "autoapi/neural_compressor/torch/algorithms/smooth_quant/utility/index", "autoapi/neural_compressor/torch/algorithms/static_quant/index", "autoapi/neural_compressor/torch/algorithms/static_quant/save_load/index", "autoapi/neural_compressor/torch/algorithms/static_quant/static_quant/index", "autoapi/neural_compressor/torch/algorithms/static_quant/utility/index", "autoapi/neural_compressor/torch/algorithms/weight_only/autoround/index", "autoapi/neural_compressor/torch/algorithms/weight_only/awq/index", "autoapi/neural_compressor/torch/algorithms/weight_only/gptq/index", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/bitpack/index", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/config/index", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/core/index", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/index", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/optimizer/index", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/qtensor/index", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/quantizer/index", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/utility/index", "autoapi/neural_compressor/torch/algorithms/weight_only/index", "autoapi/neural_compressor/torch/algorithms/weight_only/modules/index", "autoapi/neural_compressor/torch/algorithms/weight_only/rtn/index", "autoapi/neural_compressor/torch/algorithms/weight_only/teq/index", "autoapi/neural_compressor/torch/algorithms/weight_only/utility/index", "autoapi/neural_compressor/torch/amp/autocast/index", "autoapi/neural_compressor/torch/amp/fp8/functions/index", "autoapi/neural_compressor/torch/amp/fp8/index", "autoapi/neural_compressor/torch/amp/index", "autoapi/neural_compressor/torch/index", "autoapi/neural_compressor/torch/quantization/algorithm_entry/index", "autoapi/neural_compressor/torch/quantization/autotune/index", "autoapi/neural_compressor/torch/quantization/config/index", "autoapi/neural_compressor/torch/quantization/index", "autoapi/neural_compressor/torch/quantization/load_entry/index", "autoapi/neural_compressor/torch/quantization/quantize/index", "autoapi/neural_compressor/torch/utils/auto_accelerator/index", "autoapi/neural_compressor/torch/utils/constants/index", "autoapi/neural_compressor/torch/utils/environ/index", "autoapi/neural_compressor/torch/utils/index", "autoapi/neural_compressor/torch/utils/utility/index", "autoapi/neural_compressor/training/index", "autoapi/neural_compressor/utils/collect_layer_histogram/index", "autoapi/neural_compressor/utils/constant/index", "autoapi/neural_compressor/utils/create_obj_from_config/index", "autoapi/neural_compressor/utils/index", "autoapi/neural_compressor/utils/kl_divergence/index", "autoapi/neural_compressor/utils/load_huggingface/index", "autoapi/neural_compressor/utils/logger/index", "autoapi/neural_compressor/utils/neural_insights_utils/index", "autoapi/neural_compressor/utils/options/index", "autoapi/neural_compressor/utils/pytorch/index", "autoapi/neural_compressor/utils/utility/index", "autoapi/neural_compressor/utils/weights_details/index", "autoapi/neural_compressor/version/index", "docs/build_docs/source/index", "docs/source/CODE_OF_CONDUCT", "docs/source/CONTRIBUTING", "docs/source/FX", "docs/source/NAS", "docs/source/SECURITY", "docs/source/Welcome", "docs/source/adaptor", "docs/source/add_new_adaptor", "docs/source/add_new_data_type", "docs/source/api-doc/adaptor", "docs/source/api-doc/adaptor/onnxrt", "docs/source/api-doc/adaptor/torch_utils", "docs/source/api-doc/api_doc_example", "docs/source/api-doc/apis", "docs/source/api-doc/benchmark", "docs/source/api-doc/compression", "docs/source/api-doc/config", "docs/source/api-doc/mix_precision", "docs/source/api-doc/model", "docs/source/api-doc/objective", "docs/source/api-doc/quantization", "docs/source/api-doc/strategy", "docs/source/api-doc/training", "docs/source/benchmark", "docs/source/calibration", "docs/source/coding_style", "docs/source/dataloader", "docs/source/dataset", "docs/source/design", "docs/source/diagnosis", "docs/source/distillation", "docs/source/distillation_quantization", "docs/source/distributed", "docs/source/examples_readme", "docs/source/export", "docs/source/faq", "docs/source/framework_yaml", "docs/source/get_started", "docs/source/incompatible_changes", "docs/source/infrastructure", "docs/source/installation_guide", "docs/source/legal_information", "docs/source/llm_recipes", "docs/source/metric", "docs/source/migration", "docs/source/mixed_precision", "docs/source/model", "docs/source/neural_coder/README", "docs/source/neural_coder/docs/AWSSageMakerSupport", "docs/source/neural_coder/docs/BigDLNanoSupport", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting", "docs/source/neural_coder/docs/PythonAPI", "docs/source/neural_coder/docs/PythonLauncher", "docs/source/neural_coder/docs/Quantization", "docs/source/neural_coder/docs/SupportMatrix", "docs/source/neural_coder/docs/release_notes/v0.4", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart", "docs/source/neural_insights/README", "docs/source/neural_insights/docs/source/onnx_accuracy_debug", "docs/source/neural_insights/docs/source/pytorch_nlp_cli_mode", "docs/source/neural_insights/docs/source/tf_accuracy_debug", "docs/source/neural_insights/gui/README", "docs/source/neural_solution/README", "docs/source/neural_solution/docs/source/README", "docs/source/neural_solution/docs/source/description_api", "docs/source/neural_solution/docs/source/ns_design_doc", "docs/source/neural_solution/docs/source/template/task_request_description", "docs/source/neural_solution/examples/README", "docs/source/neural_solution/examples/custom_models_optimized/tf_example1/README", "docs/source/neural_solution/examples/hf_models/README", "docs/source/neural_solution/examples/hf_models_grpc/README", "docs/source/neural_solution/frontend/README", "docs/source/objective", "docs/source/orchestration", "docs/source/pruning", "docs/source/publication_list", "docs/source/pythonic_style", "docs/source/quantization", "docs/source/quantization_layer_wise", "docs/source/quantization_mixed_precision", "docs/source/quantization_weight_only", "docs/source/releases_info", "docs/source/sigopt_strategy", "docs/source/smooth_quant", "docs/source/tensorboard", "docs/source/transform", "docs/source/tuning_strategies", "docs/source/user_guide", "docs/source/user_yaml", "docs/source/validated_model_list", "index"], "filenames": ["autoapi/block_mask/index.rst", "autoapi/neural_compressor/adaptor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/keras/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/conv2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/dense/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/depthwise_conv2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/pool2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/separable_conv2d/index.rst", "autoapi/neural_compressor/adaptor/mxnet/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index.rst", "autoapi/neural_compressor/adaptor/onnxrt/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibrator/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/norm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/reduce/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/unary_op/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/smooth_quant/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/util/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/weight_only/index.rst", "autoapi/neural_compressor/adaptor/pytorch/index.rst", "autoapi/neural_compressor/adaptor/query/index.rst", "autoapi/neural_compressor/adaptor/tensorflow/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/dequantize_cast_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_schema/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/tf2onnx_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_calibration/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_scaler/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/tf2onnx_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/util/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/auto_round/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/awq/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/gptq/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/modified_pickle/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/quantize/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/torch_load/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/utils/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/mixed_precision/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/model_wrapper/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/pattern_detector/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/teq/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/util/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/waq/auto_alpha/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/waq/calibration/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/waq/graph_trace/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/waq/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/waq/smooth_quant/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/waq/utils/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/weight_only/index.rst", "autoapi/neural_compressor/algorithm/algorithm/index.rst", "autoapi/neural_compressor/algorithm/fast_bias_correction/index.rst", "autoapi/neural_compressor/algorithm/index.rst", "autoapi/neural_compressor/algorithm/smooth_quant/index.rst", "autoapi/neural_compressor/algorithm/weight_correction/index.rst", "autoapi/neural_compressor/benchmark/index.rst", "autoapi/neural_compressor/common/base_config/index.rst", "autoapi/neural_compressor/common/base_tuning/index.rst", "autoapi/neural_compressor/common/index.rst", "autoapi/neural_compressor/common/tuning_param/index.rst", "autoapi/neural_compressor/common/utils/constants/index.rst", "autoapi/neural_compressor/common/utils/index.rst", "autoapi/neural_compressor/common/utils/logger/index.rst", "autoapi/neural_compressor/common/utils/save_load/index.rst", "autoapi/neural_compressor/common/utils/utility/index.rst", "autoapi/neural_compressor/compression/callbacks/index.rst", "autoapi/neural_compressor/compression/distillation/criterions/index.rst", "autoapi/neural_compressor/compression/distillation/index.rst", "autoapi/neural_compressor/compression/distillation/optimizers/index.rst", "autoapi/neural_compressor/compression/distillation/utility/index.rst", "autoapi/neural_compressor/compression/hpo/index.rst", "autoapi/neural_compressor/compression/hpo/sa_optimizer/index.rst", "autoapi/neural_compressor/compression/hpo/search_algorithms/index.rst", "autoapi/neural_compressor/compression/hpo/search_space/index.rst", "autoapi/neural_compressor/compression/index.rst", "autoapi/neural_compressor/compression/pruner/criteria/index.rst", "autoapi/neural_compressor/compression/pruner/dsnot/index.rst", "autoapi/neural_compressor/compression/pruner/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/auto_slim/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/pattern_analyzer/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/weight_slim/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/base/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/mha/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/ninm/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/nxm/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/base/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/basic/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/block_mask/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/mha/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/pattern_lock/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/progressive/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/retrain_free/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/sparse_gpt/index.rst", "autoapi/neural_compressor/compression/pruner/pruning/index.rst", "autoapi/neural_compressor/compression/pruner/regs/index.rst", "autoapi/neural_compressor/compression/pruner/schedulers/index.rst", "autoapi/neural_compressor/compression/pruner/tf_criteria/index.rst", "autoapi/neural_compressor/compression/pruner/utils/index.rst", "autoapi/neural_compressor/compression/pruner/wanda/index.rst", "autoapi/neural_compressor/compression/pruner/wanda/prune/index.rst", "autoapi/neural_compressor/compression/pruner/wanda/utils/index.rst", "autoapi/neural_compressor/compression/pruner/wanda/wrapper/index.rst", "autoapi/neural_compressor/conf/config/index.rst", "autoapi/neural_compressor/conf/dotdict/index.rst", "autoapi/neural_compressor/conf/index.rst", "autoapi/neural_compressor/conf/pythonic_config/index.rst", "autoapi/neural_compressor/config/index.rst", "autoapi/neural_compressor/contrib/index.rst", "autoapi/neural_compressor/contrib/strategy/index.rst", "autoapi/neural_compressor/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/data/dataloaders/index.rst", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/data/datasets/index.rst", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/data/filters/filter/index.rst", "autoapi/neural_compressor/data/filters/index.rst", "autoapi/neural_compressor/data/index.rst", "autoapi/neural_compressor/data/transforms/coco_transform/index.rst", "autoapi/neural_compressor/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/data/transforms/index.rst", "autoapi/neural_compressor/data/transforms/postprocess/index.rst", "autoapi/neural_compressor/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/benchmark/index.rst", "autoapi/neural_compressor/experimental/common/criterion/index.rst", "autoapi/neural_compressor/experimental/common/dataloader/index.rst", "autoapi/neural_compressor/experimental/common/index.rst", "autoapi/neural_compressor/experimental/common/metric/index.rst", "autoapi/neural_compressor/experimental/common/model/index.rst", "autoapi/neural_compressor/experimental/common/optimizer/index.rst", "autoapi/neural_compressor/experimental/common/postprocess/index.rst", "autoapi/neural_compressor/experimental/common/torch_utils/index.rst", "autoapi/neural_compressor/experimental/component/index.rst", "autoapi/neural_compressor/experimental/compression/index.rst", "autoapi/neural_compressor/experimental/contrib/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/index.rst", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/index.rst", "autoapi/neural_compressor/experimental/data/index.rst", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/experimental/data/transforms/index.rst", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/experimental/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/distillation/index.rst", "autoapi/neural_compressor/experimental/export/index.rst", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index.rst", "autoapi/neural_compressor/experimental/export/tf2onnx/index.rst", "autoapi/neural_compressor/experimental/export/torch2onnx/index.rst", "autoapi/neural_compressor/experimental/graph_optimization/index.rst", "autoapi/neural_compressor/experimental/index.rst", "autoapi/neural_compressor/experimental/metric/bleu/index.rst", "autoapi/neural_compressor/experimental/metric/bleu_util/index.rst", "autoapi/neural_compressor/experimental/metric/coco_label_map/index.rst", "autoapi/neural_compressor/experimental/metric/coco_tools/index.rst", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/experimental/metric/f1/index.rst", "autoapi/neural_compressor/experimental/metric/index.rst", "autoapi/neural_compressor/experimental/metric/metric/index.rst", "autoapi/neural_compressor/experimental/mixed_precision/index.rst", "autoapi/neural_compressor/experimental/model_conversion/index.rst", "autoapi/neural_compressor/experimental/nas/basic_nas/index.rst", "autoapi/neural_compressor/experimental/nas/dynas/index.rst", "autoapi/neural_compressor/experimental/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas_utils/index.rst", "autoapi/neural_compressor/experimental/nas/search_algorithms/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/gradient_sensitivity/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/group_lasso/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/magnitude/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/pattern_lock/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/pruner/index.rst", "autoapi/neural_compressor/experimental/pruning/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_v2/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index.rst", "autoapi/neural_compressor/experimental/quantization/index.rst", "autoapi/neural_compressor/experimental/scheduler/index.rst", "autoapi/neural_compressor/experimental/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/experimental/strategy/basic/index.rst", "autoapi/neural_compressor/experimental/strategy/bayesian/index.rst", "autoapi/neural_compressor/experimental/strategy/exhaustive/index.rst", "autoapi/neural_compressor/experimental/strategy/index.rst", "autoapi/neural_compressor/experimental/strategy/mse/index.rst", "autoapi/neural_compressor/experimental/strategy/mse_v2/index.rst", "autoapi/neural_compressor/experimental/strategy/random/index.rst", "autoapi/neural_compressor/experimental/strategy/strategy/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/constant/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/utility/index.rst", "autoapi/neural_compressor/index.rst", "autoapi/neural_compressor/metric/bleu/index.rst", "autoapi/neural_compressor/metric/bleu_util/index.rst", "autoapi/neural_compressor/metric/coco_label_map/index.rst", "autoapi/neural_compressor/metric/coco_tools/index.rst", "autoapi/neural_compressor/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/metric/f1/index.rst", "autoapi/neural_compressor/metric/index.rst", "autoapi/neural_compressor/metric/metric/index.rst", "autoapi/neural_compressor/mix_precision/index.rst", "autoapi/neural_compressor/model/base_model/index.rst", "autoapi/neural_compressor/model/index.rst", "autoapi/neural_compressor/model/keras_model/index.rst", "autoapi/neural_compressor/model/model/index.rst", "autoapi/neural_compressor/model/mxnet_model/index.rst", "autoapi/neural_compressor/model/nets_factory/index.rst", "autoapi/neural_compressor/model/onnx_model/index.rst", "autoapi/neural_compressor/model/tensorflow_model/index.rst", "autoapi/neural_compressor/model/torch_model/index.rst", "autoapi/neural_compressor/objective/index.rst", "autoapi/neural_compressor/onnxrt/algorithms/index.rst", "autoapi/neural_compressor/onnxrt/algorithms/layer_wise/core/index.rst", "autoapi/neural_compressor/onnxrt/algorithms/layer_wise/index.rst", "autoapi/neural_compressor/onnxrt/algorithms/smoother/calibrator/index.rst", "autoapi/neural_compressor/onnxrt/algorithms/smoother/core/index.rst", "autoapi/neural_compressor/onnxrt/algorithms/smoother/index.rst", "autoapi/neural_compressor/onnxrt/algorithms/weight_only/awq/index.rst", "autoapi/neural_compressor/onnxrt/algorithms/weight_only/gptq/index.rst", "autoapi/neural_compressor/onnxrt/algorithms/weight_only/index.rst", "autoapi/neural_compressor/onnxrt/algorithms/weight_only/rtn/index.rst", "autoapi/neural_compressor/onnxrt/algorithms/weight_only/utility/index.rst", "autoapi/neural_compressor/onnxrt/index.rst", "autoapi/neural_compressor/onnxrt/quantization/algorithm_entry/index.rst", "autoapi/neural_compressor/onnxrt/quantization/autotune/index.rst", "autoapi/neural_compressor/onnxrt/quantization/calibrate/index.rst", "autoapi/neural_compressor/onnxrt/quantization/config/index.rst", "autoapi/neural_compressor/onnxrt/quantization/index.rst", "autoapi/neural_compressor/onnxrt/quantization/quantize/index.rst", "autoapi/neural_compressor/onnxrt/utils/index.rst", "autoapi/neural_compressor/onnxrt/utils/onnx_model/index.rst", "autoapi/neural_compressor/onnxrt/utils/utility/index.rst", "autoapi/neural_compressor/profiling/index.rst", "autoapi/neural_compressor/profiling/parser/factory/index.rst", "autoapi/neural_compressor/profiling/parser/index.rst", "autoapi/neural_compressor/profiling/parser/onnx_parser/factory/index.rst", "autoapi/neural_compressor/profiling/parser/onnx_parser/index.rst", "autoapi/neural_compressor/profiling/parser/onnx_parser/parser/index.rst", "autoapi/neural_compressor/profiling/parser/parser/index.rst", "autoapi/neural_compressor/profiling/parser/result/index.rst", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/factory/index.rst", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/index.rst", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/parser/index.rst", "autoapi/neural_compressor/profiling/profiler/factory/index.rst", "autoapi/neural_compressor/profiling/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/factory/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/utils/index.rst", "autoapi/neural_compressor/profiling/profiler/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/factory/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/utils/index.rst", "autoapi/neural_compressor/quantization/index.rst", "autoapi/neural_compressor/strategy/auto/index.rst", "autoapi/neural_compressor/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/strategy/basic/index.rst", "autoapi/neural_compressor/strategy/bayesian/index.rst", "autoapi/neural_compressor/strategy/conservative/index.rst", "autoapi/neural_compressor/strategy/exhaustive/index.rst", "autoapi/neural_compressor/strategy/hawq_v2/index.rst", "autoapi/neural_compressor/strategy/index.rst", "autoapi/neural_compressor/strategy/mse/index.rst", "autoapi/neural_compressor/strategy/mse_v2/index.rst", "autoapi/neural_compressor/strategy/random/index.rst", "autoapi/neural_compressor/strategy/strategy/index.rst", "autoapi/neural_compressor/strategy/utils/constant/index.rst", "autoapi/neural_compressor/strategy/utils/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/strategy/utils/utility/index.rst", "autoapi/neural_compressor/template/api_doc_example/index.rst", "autoapi/neural_compressor/template/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/smoother/calibration/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/smoother/core/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/smoother/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/smoother/scaler/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/static_quant/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/static_quant/keras/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/static_quant/tensorflow/index.rst", "autoapi/neural_compressor/tensorflow/index.rst", "autoapi/neural_compressor/tensorflow/keras/index.rst", "autoapi/neural_compressor/tensorflow/keras/layers/conv2d/index.rst", "autoapi/neural_compressor/tensorflow/keras/layers/dense/index.rst", "autoapi/neural_compressor/tensorflow/keras/layers/depthwise_conv2d/index.rst", "autoapi/neural_compressor/tensorflow/keras/layers/index.rst", "autoapi/neural_compressor/tensorflow/keras/layers/layer_initializer/index.rst", "autoapi/neural_compressor/tensorflow/keras/layers/pool2d/index.rst", "autoapi/neural_compressor/tensorflow/keras/layers/separable_conv2d/index.rst", "autoapi/neural_compressor/tensorflow/keras/quantization/config/index.rst", "autoapi/neural_compressor/tensorflow/keras/quantization/index.rst", "autoapi/neural_compressor/tensorflow/quantization/algorithm_entry/index.rst", "autoapi/neural_compressor/tensorflow/quantization/autotune/index.rst", "autoapi/neural_compressor/tensorflow/quantization/config/index.rst", "autoapi/neural_compressor/tensorflow/quantization/index.rst", "autoapi/neural_compressor/tensorflow/quantization/quantize/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_converter/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_converter_without_calib/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/bf16/bf16_convert/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/bf16/dequantize_cast_optimizer/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/bf16/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_add_to_biasadd/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_layout/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_leakyrelu/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_nan_to_random/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_placeholder_to_const/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/dilated_contraction/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/dummy_biasadd/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/expanddims_optimizer/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fetch_weight_from_reshape/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fold_batch_norm/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fold_constant/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_biasadd_add/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_column_wise_mul/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_conv_with_math/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_decomposed_bn/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_decomposed_in/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_gelu/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_layer_norm/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_pad_with_conv/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_reshape_transpose/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/graph_cse_optimizer/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/grappler_pass/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/insert_print_node/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/move_squeeze_after_relu/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/pre_optimize/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/remove_training_nodes/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/rename_batch_norm/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/split_shared_input/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/strip_equivalent_nodes/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/strip_unused_nodes/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/switch_optimizer/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/graph_base/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/freeze_fake_quant/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/freeze_value/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/freeze_value_without_calib/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/fuse_conv_requantize/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/fuse_matmul_requantize/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/meta_op_optimizer/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/post_hostconst_converter/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/post_quantized_op_cse/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/rnn_convert/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/scale_propagation/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/qdq/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/qdq/insert_qdq_pattern/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/qdq/merge_duplicated_qdq/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/qdq/share_qdq_y_pattern/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_util/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/fake_quantize/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_config/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_helper/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_layers/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_layers/optimize_layer/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_wrapper/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_bn/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_concatv2/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_conv/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_deconv/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_in/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_matmul/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_pooling/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/optimize_qdq/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_base/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_bn/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_concatv2/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_conv/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_for_intel_cpu/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_matmul/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_pooling/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph_common/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/bias_correction/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/graph_transform_base/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/insert_logging/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/rerange_quantized_concat/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/utility/index.rst", "autoapi/neural_compressor/tensorflow/utils/constants/index.rst", "autoapi/neural_compressor/tensorflow/utils/data/index.rst", "autoapi/neural_compressor/tensorflow/utils/index.rst", "autoapi/neural_compressor/tensorflow/utils/model/index.rst", "autoapi/neural_compressor/tensorflow/utils/model_wrappers/index.rst", "autoapi/neural_compressor/tensorflow/utils/nets_factory/index.rst", "autoapi/neural_compressor/tensorflow/utils/utility/index.rst", "autoapi/neural_compressor/torch/algorithms/base_algorithm/index.rst", "autoapi/neural_compressor/torch/algorithms/habana_fp8/fp8_quant/index.rst", "autoapi/neural_compressor/torch/algorithms/habana_fp8/index.rst", "autoapi/neural_compressor/torch/algorithms/habana_fp8/modules/index.rst", "autoapi/neural_compressor/torch/algorithms/habana_fp8/observer/index.rst", "autoapi/neural_compressor/torch/algorithms/habana_fp8/save_load/index.rst", "autoapi/neural_compressor/torch/algorithms/habana_fp8/scale/index.rst", "autoapi/neural_compressor/torch/algorithms/habana_fp8/tensor/index.rst", "autoapi/neural_compressor/torch/algorithms/index.rst", "autoapi/neural_compressor/torch/algorithms/layer_wise/index.rst", "autoapi/neural_compressor/torch/algorithms/layer_wise/load/index.rst", "autoapi/neural_compressor/torch/algorithms/layer_wise/modified_pickle/index.rst", "autoapi/neural_compressor/torch/algorithms/layer_wise/utils/index.rst", "autoapi/neural_compressor/torch/algorithms/pt2e_quant/core/index.rst", "autoapi/neural_compressor/torch/algorithms/pt2e_quant/index.rst", "autoapi/neural_compressor/torch/algorithms/smooth_quant/index.rst", "autoapi/neural_compressor/torch/algorithms/smooth_quant/save_load/index.rst", "autoapi/neural_compressor/torch/algorithms/smooth_quant/smooth_quant/index.rst", "autoapi/neural_compressor/torch/algorithms/smooth_quant/utility/index.rst", "autoapi/neural_compressor/torch/algorithms/static_quant/index.rst", "autoapi/neural_compressor/torch/algorithms/static_quant/save_load/index.rst", "autoapi/neural_compressor/torch/algorithms/static_quant/static_quant/index.rst", "autoapi/neural_compressor/torch/algorithms/static_quant/utility/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/autoround/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/awq/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/gptq/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/bitpack/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/config/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/core/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/optimizer/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/qtensor/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/quantizer/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/utility/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/modules/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/rtn/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/teq/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/utility/index.rst", "autoapi/neural_compressor/torch/amp/autocast/index.rst", "autoapi/neural_compressor/torch/amp/fp8/functions/index.rst", "autoapi/neural_compressor/torch/amp/fp8/index.rst", "autoapi/neural_compressor/torch/amp/index.rst", "autoapi/neural_compressor/torch/index.rst", "autoapi/neural_compressor/torch/quantization/algorithm_entry/index.rst", "autoapi/neural_compressor/torch/quantization/autotune/index.rst", "autoapi/neural_compressor/torch/quantization/config/index.rst", "autoapi/neural_compressor/torch/quantization/index.rst", "autoapi/neural_compressor/torch/quantization/load_entry/index.rst", "autoapi/neural_compressor/torch/quantization/quantize/index.rst", "autoapi/neural_compressor/torch/utils/auto_accelerator/index.rst", "autoapi/neural_compressor/torch/utils/constants/index.rst", "autoapi/neural_compressor/torch/utils/environ/index.rst", "autoapi/neural_compressor/torch/utils/index.rst", "autoapi/neural_compressor/torch/utils/utility/index.rst", "autoapi/neural_compressor/training/index.rst", "autoapi/neural_compressor/utils/collect_layer_histogram/index.rst", "autoapi/neural_compressor/utils/constant/index.rst", "autoapi/neural_compressor/utils/create_obj_from_config/index.rst", "autoapi/neural_compressor/utils/index.rst", "autoapi/neural_compressor/utils/kl_divergence/index.rst", "autoapi/neural_compressor/utils/load_huggingface/index.rst", "autoapi/neural_compressor/utils/logger/index.rst", "autoapi/neural_compressor/utils/neural_insights_utils/index.rst", "autoapi/neural_compressor/utils/options/index.rst", "autoapi/neural_compressor/utils/pytorch/index.rst", "autoapi/neural_compressor/utils/utility/index.rst", "autoapi/neural_compressor/utils/weights_details/index.rst", "autoapi/neural_compressor/version/index.rst", "docs/build_docs/source/index.rst", "docs/source/CODE_OF_CONDUCT.md", "docs/source/CONTRIBUTING.md", "docs/source/FX.md", "docs/source/NAS.md", "docs/source/SECURITY.md", "docs/source/Welcome.md", "docs/source/adaptor.md", "docs/source/add_new_adaptor.md", "docs/source/add_new_data_type.md", "docs/source/api-doc/adaptor.rst", "docs/source/api-doc/adaptor/onnxrt.rst", "docs/source/api-doc/adaptor/torch_utils.rst", "docs/source/api-doc/api_doc_example.rst", "docs/source/api-doc/apis.rst", "docs/source/api-doc/benchmark.rst", "docs/source/api-doc/compression.rst", "docs/source/api-doc/config.rst", "docs/source/api-doc/mix_precision.rst", "docs/source/api-doc/model.rst", "docs/source/api-doc/objective.rst", "docs/source/api-doc/quantization.rst", "docs/source/api-doc/strategy.rst", "docs/source/api-doc/training.rst", "docs/source/benchmark.md", "docs/source/calibration.md", "docs/source/coding_style.md", "docs/source/dataloader.md", "docs/source/dataset.md", "docs/source/design.md", "docs/source/diagnosis.md", "docs/source/distillation.md", "docs/source/distillation_quantization.md", "docs/source/distributed.md", "docs/source/examples_readme.md", "docs/source/export.md", "docs/source/faq.md", "docs/source/framework_yaml.md", "docs/source/get_started.md", "docs/source/incompatible_changes.md", "docs/source/infrastructure.md", "docs/source/installation_guide.md", "docs/source/legal_information.md", "docs/source/llm_recipes.md", "docs/source/metric.md", "docs/source/migration.md", "docs/source/mixed_precision.md", "docs/source/model.md", "docs/source/neural_coder/README.md", "docs/source/neural_coder/docs/AWSSageMakerSupport.md", "docs/source/neural_coder/docs/BigDLNanoSupport.md", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting.md", "docs/source/neural_coder/docs/PythonAPI.md", "docs/source/neural_coder/docs/PythonLauncher.md", "docs/source/neural_coder/docs/Quantization.md", "docs/source/neural_coder/docs/SupportMatrix.md", "docs/source/neural_coder/docs/release_notes/v0.4.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart.md", "docs/source/neural_insights/README.md", "docs/source/neural_insights/docs/source/onnx_accuracy_debug.md", "docs/source/neural_insights/docs/source/pytorch_nlp_cli_mode.md", "docs/source/neural_insights/docs/source/tf_accuracy_debug.md", "docs/source/neural_insights/gui/README.md", "docs/source/neural_solution/README.md", "docs/source/neural_solution/docs/source/README.md", "docs/source/neural_solution/docs/source/description_api.md", "docs/source/neural_solution/docs/source/ns_design_doc.md", "docs/source/neural_solution/docs/source/template/task_request_description.md", "docs/source/neural_solution/examples/README.md", "docs/source/neural_solution/examples/custom_models_optimized/tf_example1/README.md", "docs/source/neural_solution/examples/hf_models/README.md", "docs/source/neural_solution/examples/hf_models_grpc/README.md", "docs/source/neural_solution/frontend/README.md", "docs/source/objective.md", "docs/source/orchestration.md", "docs/source/pruning.md", "docs/source/publication_list.md", "docs/source/pythonic_style.md", "docs/source/quantization.md", "docs/source/quantization_layer_wise.md", "docs/source/quantization_mixed_precision.md", "docs/source/quantization_weight_only.md", "docs/source/releases_info.md", "docs/source/sigopt_strategy.md", "docs/source/smooth_quant.md", "docs/source/tensorboard.md", "docs/source/transform.md", "docs/source/tuning_strategies.md", "docs/source/user_guide.md", "docs/source/user_yaml.md", "docs/source/validated_model_list.md", "index.rst"], "titles": ["<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">block_mask</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.dense</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.depthwise_conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.pool2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.separable_conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.onnxrt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.calibration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.calibrator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.activation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.argmax</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.attention</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.binary_op</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.direct_q8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.embed_layernorm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gather</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gavgpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gemm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.lstm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.maxpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.ops</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.reduce</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.resize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.split</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.unary_op</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.weight_only</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.query</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph_common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.smooth_quant_calibration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.smooth_quant_scaler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.tf2onnx_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.insert_logging</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.auto_round</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.awq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.gptq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.hawq_metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.layer_wise_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.layer_wise_quant.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.model_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.pattern_detector</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.symbolic_trace</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.teq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.waq.auto_alpha</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.waq.calibration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.waq.graph_trace</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.waq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.waq.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.waq.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.weight_only</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.fast_bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.weight_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.common.base_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.common.base_tuning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.common.tuning_param</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.common.utils.constants</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.common.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.common.utils.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.common.utils.save_load</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.common.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.callbacks</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation.criterions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation.optimizers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.hpo</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.hpo.sa_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.hpo.search_algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.hpo.search_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.criteria</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.dsnot</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.auto_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.pattern_analyzer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.weight_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns.base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns.mha</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns.ninm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns.nxm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.block_mask</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.mha</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.pattern_lock</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.progressive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.retrain_free</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.sparse_gpt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.regs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.schedulers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.tf_criteria</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.wanda</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.wanda.prune</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.wanda.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.wanda.wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.dotdict</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.pythonic_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.sigopt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.tpe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.coco_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.criterion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.component</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.compression</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib.strategy.sigopt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib.strategy.tpe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.distillation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.qlinear2qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.tf2onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.torch2onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.model_conversion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.basic_nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.search_algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.gradient_sensitivity</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.group_lasso</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.magnitude</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.pattern_lock</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.tile_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.prune_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.auto_mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.bayesian</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.exhaustive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.mse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.mse_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.tuning_sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.tuning_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.tuning_structs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.mix_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.base_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.keras_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.mxnet_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.nets_factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.onnx_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.tensorflow_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.torch_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.objective</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.algorithms.layer_wise.core</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.algorithms.layer_wise</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.algorithms.smoother.calibrator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.algorithms.smoother.core</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.algorithms.smoother</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.algorithms.weight_only.awq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.algorithms.weight_only.gptq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.algorithms.weight_only</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.algorithms.weight_only.rtn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.algorithms.weight_only.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.quantization.algorithm_entry</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.quantization.autotune</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.quantization.calibrate</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.quantization.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.quantization.quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.utils.onnx_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.onnx_parser.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.onnx_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.onnx_parser.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.tensorflow_parser.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.tensorflow_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.tensorflow_parser.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.auto</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.auto_mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.bayesian</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.conservative</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.exhaustive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.hawq_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_structs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.template.api_doc_example</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.template</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.smoother.calibration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.smoother.core</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.smoother</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.smoother.scaler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.static_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.static_quant.keras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.static_quant.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.keras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.keras.layers.conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.keras.layers.dense</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.keras.layers.depthwise_conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.keras.layers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.keras.layers.layer_initializer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.keras.layers.pool2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.keras.layers.separable_conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.keras.quantization.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.keras.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.algorithm_entry</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.autotune</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_converter_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.dequantize_cast_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_fake_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.meta_op_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_hostconst_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_quantized_op_cse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.rnn_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.scale_propagation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.insert_qdq_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.merge_duplicated_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.share_qdq_y_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.fake_quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.qat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_helper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.optimize_layer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_deconv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.optimize_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_for_intel_cpu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph_common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.transform_graph.bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.transform_graph.graph_transform_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.transform_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.transform_graph.insert_logging</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.transform_graph.rerange_quantized_concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.utils.constants</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.utils.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.utils.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.utils.model_wrappers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.utils.nets_factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.base_algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.habana_fp8.fp8_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.habana_fp8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.habana_fp8.modules</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.habana_fp8.observer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.habana_fp8.save_load</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.habana_fp8.scale</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.habana_fp8.tensor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.layer_wise</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.layer_wise.load</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.layer_wise.modified_pickle</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.layer_wise.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.pt2e_quant.core</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.pt2e_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.smooth_quant.save_load</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.smooth_quant.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.smooth_quant.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.static_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.static_quant.save_load</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.static_quant.static_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.static_quant.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only.autoround</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only.awq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only.gptq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only.hqq.bitpack</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only.hqq.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only.hqq.core</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only.hqq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only.hqq.optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only.hqq.qtensor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only.hqq.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only.hqq.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only.modules</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only.rtn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only.teq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.amp.autocast</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.amp.fp8.functions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.amp.fp8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.amp</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.quantization.algorithm_entry</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.quantization.autotune</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.quantization.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.quantization.load_entry</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.quantization.quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.utils.auto_accelerator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.utils.constants</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.utils.environ</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.training</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.collect_layer_histogram</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.create_obj_from_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.kl_divergence</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.load_huggingface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.neural_insights_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.options</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.weights_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.version</span></code>", "Intel\u00ae Neural Compressor Documentation", "Contributor Covenant Code of Conduct", "Contribution Guidelines", "FX", "Neural Architecture Search", "Security Policy", "Intel\u00ae Neural Compressor", "Adaptor", "How to Add An Adaptor", "How to Support New Data Type, Like Int4, with a Few Line Changes", "Adaptor", "ONNX Runtime", "Torch Utils", "API Document Example", "APIs", "Benchmark", "Compression", "Config", "Mix Precision", "Model", "Objective", "Quantization", "Strategy", "Training", "Benchmarking", "Calibration Algorithms in Quantization", "INC Coding Conventions", "DataLoader", "Dataset", "Design", "Diagnosis", "Distillation", "Distillation for Quantization", "Distributed Training and Inference (Evaluation)", "Examples", "Export", "Frequently Asked Questions", "Framework YAML Configuration Files", "Getting Started", "Incompatible changes between v1.2 and v1.1", "Infrastructure of Intel\u00ae Neural Compressor", "Installation", "Legal Information", "LLMs Quantization Recipes", "Metrics", "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X", "Mixed Precision", "Model", "Neural Coder", "AWS Amazon SageMaker Support", "BigDL Nano Support", "Intel CPU Platforms: Best Performance Setting", "Neural Coder as Python API", "Python Launcher", "Neural Coder for Quantization", "Supported Optimization Features", "v0.4", "Changelog", "neural_compressor_ext_lab", "Intel\u00ae Neural Compressor as JupyterLab Extension", "Making a new release of neural_compressor_ext_lab", "Changelog", "neural_compressor_ext_lab_alibaba", "Making a new release of neural_compressor_ext_lab_alibaba", "Change Log", "Neural Coder", "Welcome to your VS Code Extension", "Neural Insights", "Step by step example how to debug accuracy with Neural Insights", "Step by step example how to dump weights data for PyTorch model with Neural Insights", "Step by step example how to debug accuracy with Neural Insights", "Getting Started with Create React App", "What\u2019s Neural Solution?", "Get started", "Neural Solution API", "Design Doc for Optimization as a Service [WIP]", "Task request description", "Examples List", "An end-to-end example: quantize a custom model with Neural Solution", "An end-to-end example: quantize a Hugging Face model with Neural Solution", "An end-to-end example: quantize a Hugging Face model with Neural Solution gRPC API", "Client", "Objective", "Optimization Orchestration", "Pruning", "Full Publications/Events (80)", "Pythonic Style Access for Configurations", "Quantization", "Layer Wise Quantization (LWQ)", "Turn OFF Auto Mixed Precision during Quantization", "Weight Only Quantization (WOQ)", "Release", "SigOpt Strategy", "Smooth Quant", "TensorBoard", "Transform", "Tuning Strategies", "User Guide", "User YAML Configuration Files", "Validated Models", "Intel\u00ae Neural Compressor Documentation"], "terms": {"block": [0, 44, 162, 165, 172, 198, 209, 212, 217, 223, 343, 384, 392, 395, 447, 595, 611, 682, 724, 726, 732, 738], "mask": [0, 198, 205, 207, 210, 212, 216, 217, 247, 290, 316, 345, 369, 726, 741], "adaptor_registri": [1, 649], "cl": [1, 159, 173, 187, 189, 191, 195, 196, 205, 210, 219, 220, 221, 249, 256, 264, 266, 271, 292, 299, 305, 327, 334, 338, 343, 345, 347, 358, 373, 384, 440, 572, 585, 639, 668], "sourc": [1, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 113, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 150, 151, 152, 153, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 182, 185, 186, 187, 188, 189, 191, 192, 195, 196, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 231, 232, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 278, 279, 280, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 302, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 332, 333, 334, 335, 338, 339, 340, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 361, 362, 363, 364, 365, 366, 367, 369, 370, 371, 373, 374, 375, 377, 378, 379, 380, 381, 382, 383, 384, 386, 388, 389, 391, 392, 394, 395, 397, 398, 399, 400, 404, 405, 407, 409, 411, 412, 413, 414, 416, 417, 419, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 437, 438, 439, 440, 443, 444, 445, 446, 447, 450, 451, 453, 455, 456, 466, 468, 469, 470, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 521, 522, 523, 524, 525, 527, 528, 529, 530, 533, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 564, 565, 567, 569, 570, 571, 572, 573, 583, 584, 585, 589, 590, 591, 594, 595, 596, 597, 598, 600, 605, 606, 608, 609, 610, 611, 612, 617, 618, 619, 622, 623, 627, 628, 629, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 645, 648, 684, 687, 700, 702, 704, 705, 707, 727], "The": [1, 3, 11, 14, 16, 34, 54, 74, 113, 119, 121, 140, 148, 158, 160, 165, 171, 172, 173, 178, 179, 180, 182, 187, 188, 189, 191, 195, 196, 198, 199, 203, 205, 207, 208, 210, 211, 212, 217, 218, 219, 220, 221, 222, 223, 228, 229, 231, 232, 235, 236, 237, 247, 248, 249, 250, 251, 255, 256, 264, 266, 269, 271, 274, 278, 279, 280, 290, 291, 292, 293, 294, 298, 299, 305, 306, 311, 313, 314, 315, 317, 318, 320, 322, 323, 324, 326, 327, 329, 330, 332, 333, 334, 335, 338, 340, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 362, 364, 366, 367, 368, 370, 371, 373, 374, 382, 384, 397, 398, 405, 428, 429, 430, 431, 432, 433, 434, 435, 437, 438, 439, 440, 444, 446, 447, 450, 451, 455, 468, 469, 472, 479, 499, 533, 539, 541, 565, 567, 570, 572, 573, 583, 591, 594, 595, 596, 597, 598, 605, 606, 609, 610, 612, 617, 618, 619, 622, 627, 628, 629, 631, 633, 634, 638, 639, 640, 643, 645, 646, 649, 650, 651, 652, 654, 658, 661, 664, 666, 667, 668, 669, 670, 672, 673, 675, 677, 679, 681, 682, 683, 685, 686, 687, 688, 689, 692, 693, 695, 698, 700, 701, 702, 704, 705, 707, 708, 709, 710, 712, 713, 714, 715, 716, 717, 718, 720, 724, 725, 726, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741], "decor": [1, 16, 34, 67, 68, 70, 148, 171, 173, 179, 187, 191, 195, 196, 205, 210, 219, 221, 264, 271, 305, 320, 327, 334, 338, 343, 345, 347, 358, 361, 373, 384, 405, 440, 492, 493, 495, 572, 591, 606, 612, 627, 639, 645, 646, 649, 738], "us": [1, 13, 16, 34, 42, 43, 44, 48, 49, 70, 103, 105, 116, 141, 153, 158, 160, 165, 172, 178, 187, 189, 191, 195, 196, 198, 203, 205, 210, 214, 215, 219, 221, 222, 225, 228, 229, 231, 232, 235, 236, 245, 246, 247, 248, 249, 250, 251, 254, 263, 264, 265, 266, 271, 278, 279, 288, 289, 290, 291, 292, 293, 294, 297, 304, 305, 309, 310, 311, 313, 314, 316, 320, 321, 322, 327, 334, 335, 338, 340, 343, 345, 346, 347, 348, 349, 352, 355, 358, 361, 362, 366, 367, 369, 373, 384, 391, 392, 394, 395, 405, 422, 427, 428, 432, 435, 437, 440, 444, 446, 447, 453, 455, 456, 472, 473, 474, 495, 536, 567, 572, 583, 590, 595, 596, 611, 612, 622, 623, 627, 628, 629, 630, 631, 632, 634, 639, 643, 644, 645, 646, 648, 649, 650, 666, 667, 668, 670, 672, 673, 674, 675, 677, 679, 681, 683, 684, 687, 688, 689, 690, 691, 692, 694, 695, 698, 700, 702, 704, 705, 707, 709, 710, 711, 712, 713, 720, 721, 722, 724, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736, 737, 738, 740, 741], "regist": [1, 16, 34, 156, 158, 171, 173, 179, 189, 191, 195, 196, 198, 200, 205, 206, 210, 213, 219, 220, 221, 222, 249, 256, 264, 266, 271, 292, 299, 305, 320, 327, 334, 338, 343, 345, 347, 358, 361, 373, 384, 405, 440, 446, 466, 572, 583, 584, 591, 623, 627, 636, 646, 649, 668, 670, 675, 686, 687, 708, 724, 735, 738], "all": [1, 13, 16, 34, 44, 45, 63, 97, 152, 158, 159, 165, 172, 173, 175, 178, 179, 188, 191, 196, 200, 205, 213, 223, 231, 232, 237, 238, 245, 249, 256, 264, 265, 271, 274, 280, 288, 292, 299, 305, 310, 313, 316, 318, 320, 327, 334, 338, 339, 343, 349, 358, 361, 366, 369, 371, 373, 375, 384, 440, 446, 466, 488, 522, 567, 570, 572, 573, 583, 585, 594, 595, 596, 597, 598, 605, 609, 610, 619, 631, 639, 643, 644, 648, 649, 650, 651, 668, 669, 670, 675, 679, 683, 687, 690, 698, 701, 702, 705, 706, 707, 708, 709, 712, 713, 715, 716, 720, 721, 722, 725, 726, 727, 729, 731, 732, 735, 737, 738], "subclass": [1, 16, 34, 171, 173, 191, 195, 196, 205, 210, 219, 221, 242, 246, 249, 256, 264, 271, 285, 289, 292, 299, 305, 320, 327, 334, 338, 343, 345, 347, 358, 361, 373, 384, 440, 591, 649], "paramet": [1, 11, 13, 14, 16, 42, 43, 44, 45, 67, 68, 70, 86, 105, 116, 132, 140, 141, 148, 151, 152, 153, 158, 159, 163, 165, 171, 172, 173, 178, 179, 180, 182, 186, 187, 188, 189, 191, 193, 195, 196, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 226, 228, 229, 231, 232, 235, 236, 246, 247, 249, 256, 260, 264, 266, 271, 278, 279, 289, 290, 292, 299, 302, 305, 306, 308, 309, 310, 311, 313, 314, 316, 317, 318, 320, 322, 323, 324, 326, 327, 328, 329, 330, 332, 333, 334, 335, 338, 340, 343, 344, 345, 346, 347, 348, 352, 358, 362, 364, 366, 367, 369, 370, 371, 373, 374, 378, 382, 384, 386, 391, 392, 394, 395, 398, 405, 422, 427, 428, 432, 440, 444, 446, 447, 450, 453, 468, 472, 492, 493, 495, 511, 536, 552, 565, 570, 572, 583, 585, 589, 590, 591, 595, 596, 598, 606, 611, 612, 622, 623, 627, 628, 631, 634, 635, 636, 638, 639, 645, 650, 669, 670, 673, 675, 682, 686, 687, 701, 707, 708, 709, 710, 715, 720, 721, 726, 729, 730, 732, 734, 735, 737, 738, 740], "framework_specific_info": [1, 3, 11, 14, 45, 47, 455, 456, 649], "base": [1, 13, 16, 34, 46, 47, 86, 105, 116, 120, 122, 132, 144, 153, 156, 162, 165, 173, 179, 188, 195, 196, 197, 198, 200, 206, 213, 220, 222, 232, 237, 240, 245, 247, 249, 256, 264, 274, 280, 283, 288, 290, 292, 299, 305, 320, 326, 328, 334, 335, 338, 340, 345, 355, 358, 362, 373, 375, 382, 383, 384, 391, 399, 437, 440, 444, 456, 511, 536, 540, 542, 552, 561, 567, 570, 573, 584, 594, 595, 596, 597, 598, 605, 609, 610, 619, 646, 648, 649, 650, 651, 668, 670, 674, 675, 679, 687, 688, 695, 696, 698, 707, 710, 715, 718, 721, 722, 726, 727, 729, 732, 734, 735, 736, 738, 741], "framework": [1, 3, 11, 13, 14, 45, 178, 179, 189, 191, 200, 206, 210, 213, 217, 218, 219, 233, 234, 238, 239, 243, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 258, 261, 264, 266, 267, 271, 276, 277, 281, 282, 284, 286, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 301, 303, 305, 311, 320, 321, 348, 356, 362, 373, 374, 375, 376, 378, 438, 444, 455, 466, 631, 648, 649, 651, 667, 668, 672, 675, 676, 680, 681, 682, 683, 686, 687, 688, 709, 710, 726, 727, 729, 733, 736, 737, 738, 739, 740, 741], "layer": [1, 3, 11, 14, 46, 47, 116, 117, 118, 119, 121, 122, 152, 155, 157, 159, 170, 171, 172, 176, 189, 192, 201, 203, 204, 205, 209, 214, 223, 226, 227, 231, 232, 266, 273, 343, 344, 386, 392, 394, 455, 456, 536, 537, 538, 539, 541, 542, 572, 582, 585, 591, 598, 629, 631, 639, 648, 649, 650, 651, 674, 682, 710, 726, 732, 733, 739], "mxnet_util": 2, "util": [2, 12, 17, 105, 110, 111, 139, 142, 151, 153, 154, 155, 163, 179, 190, 197, 200, 224, 231, 232, 273, 312, 314, 344, 354, 365, 367, 386, 388, 389, 391, 392, 394, 400, 420, 425, 436, 468, 469, 472, 581, 582, 617, 619, 650, 651, 652, 667, 668, 675, 687, 690, 710, 726, 729, 738, 739], "ox_util": 2, "oper": [2, 17, 43, 104, 110, 140, 148, 203, 204, 209, 227, 231, 232, 260, 302, 343, 422, 427, 450, 530, 565, 645, 666, 669, 672, 677, 707, 713, 726, 729, 732, 735, 737, 738], "activ": [2, 17, 29, 44, 141, 150, 165, 172, 192, 231, 232, 273, 362, 391, 444, 446, 453, 595, 649, 650, 651, 667, 672, 674, 679, 687, 708, 709, 712, 720, 721, 722, 728, 729, 732, 735, 736, 740], "argmax": [2, 17, 29], "attent": [2, 17, 29, 162, 201, 203, 214, 231, 232, 247, 290, 595, 643, 673, 726], "binary_op": [2, 17, 29], "concat": [2, 17, 29, 147, 564], "conv": [2, 17, 29, 58, 62, 66, 71, 72, 73, 92, 109, 176, 231, 232, 400, 483, 487, 491, 496, 497, 498, 517, 529, 645, 650, 651, 687, 726, 728, 729, 738], "direct_q8": [2, 17, 29], "embed_layernorm": [2, 17, 29], "gather": [2, 13, 17, 29, 231, 232, 343], "gavgpool": [2, 17, 29], "gemm": [2, 17, 29, 231, 232, 400], "lstm": [2, 17, 29], "matmul": [2, 17, 29, 44, 53, 59, 65, 73, 94, 109, 128, 137, 209, 231, 232, 343, 391, 392, 394, 395, 400, 470, 478, 484, 490, 498, 519, 529, 548, 557, 679, 710, 732, 738], "maxpool": [2, 17, 29, 129, 138, 549, 558, 679], "norm": [2, 17, 29], "op": [2, 13, 17, 29, 45, 51, 53, 65, 66, 67, 68, 69, 70, 71, 72, 74, 78, 81, 85, 88, 91, 92, 93, 94, 96, 105, 107, 109, 123, 124, 125, 131, 133, 134, 135, 136, 141, 143, 146, 148, 151, 153, 163, 165, 172, 176, 203, 231, 232, 310, 355, 362, 363, 422, 427, 433, 435, 437, 444, 445, 446, 453, 476, 478, 490, 491, 492, 493, 494, 495, 496, 497, 499, 503, 506, 510, 513, 516, 517, 518, 519, 521, 527, 529, 543, 544, 545, 551, 553, 554, 555, 556, 560, 563, 565, 590, 591, 595, 611, 612, 627, 633, 639, 648, 649, 650, 651, 672, 679, 687, 688, 711, 712, 726, 729, 731, 733, 735, 736, 738, 740], "pad": [2, 17, 29, 44, 71, 72, 247, 264, 290, 305, 395, 496, 497, 670, 737], "pool": [2, 17, 29, 717], "reduc": [2, 17, 29, 231, 232, 649, 667, 674, 687, 688, 707, 708, 726, 727, 729, 730, 731, 732, 735, 738, 740], "resiz": [2, 17, 29, 247, 248, 260, 264, 290, 291, 302, 305, 670, 737], "split": [2, 17, 29, 43, 82, 172, 263, 264, 304, 305, 507, 645, 730, 732, 735, 737], "unary_op": [2, 17, 29], "calibr": [2, 11, 13, 14, 17, 44, 49, 89, 90, 140, 165, 172, 178, 231, 232, 235, 236, 278, 279, 311, 348, 386, 389, 390, 391, 392, 395, 397, 398, 428, 452, 468, 472, 474, 514, 515, 590, 596, 611, 622, 633, 649, 651, 670, 681, 682, 726, 729, 732, 738, 739, 740], "quantiz": [2, 11, 13, 14, 16, 17, 42, 43, 44, 48, 49, 88, 92, 94, 96, 99, 107, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 150, 151, 152, 153, 154, 155, 159, 160, 161, 164, 165, 170, 172, 176, 178, 180, 185, 188, 231, 232, 235, 236, 260, 267, 274, 278, 279, 302, 310, 311, 312, 322, 349, 355, 361, 365, 386, 388, 389, 391, 392, 394, 395, 405, 433, 435, 437, 446, 450, 451, 453, 455, 456, 573, 582, 585, 589, 590, 591, 594, 595, 596, 597, 598, 608, 609, 610, 611, 628, 629, 633, 634, 638, 639, 649, 656, 668, 669, 670, 675, 676, 679, 681, 682, 686, 689, 690, 695, 697, 698, 701, 714, 716, 717, 719, 725, 727, 733, 736, 737, 738, 739, 740], "smooth_quant": [2, 17, 157, 165, 175, 231, 232, 365, 595, 668, 729, 735], "weight_onli": [2, 17, 232, 638, 648, 668, 730, 732], "tf_util": 2, "graph_rewrit": [2, 111], "bf16": [2, 44, 87, 111, 151, 231, 232, 362, 391, 392, 394, 395, 444, 512, 649, 650, 679, 687, 692, 697, 701, 707, 731, 738, 741], "gener": [2, 13, 48, 49, 87, 111, 122, 148, 152, 165, 178, 182, 203, 223, 235, 236, 237, 246, 249, 250, 251, 252, 264, 278, 279, 280, 289, 292, 293, 294, 295, 305, 313, 321, 352, 366, 374, 400, 423, 428, 432, 447, 466, 470, 473, 474, 512, 542, 565, 567, 591, 595, 598, 619, 627, 628, 644, 645, 649, 651, 669, 673, 686, 687, 688, 690, 695, 700, 702, 704, 705, 707, 709, 710, 724, 726, 727, 729, 731, 732, 735, 736, 737, 738], "int8": [2, 18, 19, 43, 44, 87, 111, 123, 124, 125, 131, 133, 134, 135, 136, 143, 148, 172, 177, 178, 231, 232, 260, 302, 308, 309, 310, 362, 364, 391, 392, 394, 395, 405, 444, 446, 466, 470, 512, 543, 544, 545, 551, 553, 554, 555, 556, 560, 565, 611, 638, 639, 644, 645, 648, 649, 650, 651, 666, 670, 674, 679, 685, 687, 688, 692, 695, 697, 698, 701, 707, 710, 712, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 740], "onnx": [2, 14, 15, 16, 29, 41, 43, 44, 87, 111, 142, 176, 231, 232, 243, 286, 308, 309, 310, 374, 381, 386, 389, 391, 392, 394, 395, 397, 398, 404, 405, 422, 637, 644, 648, 649, 650, 652, 669, 672, 676, 677, 679, 680, 682, 688, 689, 692, 697, 698, 710, 727, 728, 732, 733, 735, 738], "qdq": [2, 42, 87, 111, 112, 113, 142, 165, 172, 231, 232, 308, 309, 310, 455, 512, 531, 532, 533, 611, 649, 672, 677, 682, 697, 698, 729, 733, 735], "graph_bas": [2, 87, 111, 512], "quantize_graph": [2, 111, 531], "qat": [2, 111, 112, 163, 232, 322, 382, 531, 532, 570, 674, 675, 682, 687, 729], "quantize_graph_bas": [2, 111, 112, 531, 532], "quantize_graph_bn": [2, 111, 112, 531, 532], "quantize_graph_concatv2": [2, 111, 112, 531, 532], "quantize_graph_conv": [2, 111, 112, 531, 532], "quantize_graph_for_intel_cpu": [2, 111, 112, 531, 532], "quantize_graph_matmul": [2, 111, 112, 531, 532], "quantize_graph_pool": [2, 111, 112, 531, 532], "transform_graph": [2, 111, 531], "bias_correct": [2, 111, 145, 531, 562], "graph_transform_bas": [2, 111, 145, 531, 562], "insert_log": [2, 111, 145, 531, 562], "rerange_quantized_concat": [2, 111, 145, 531, 562], "graph_convert": [2, 111, 531], "graph_converter_without_calib": [2, 111, 531], "graph_util": [2, 111, 531], "quantize_graph_common": [2, 111, 531], "smooth_quant_calibr": [2, 111], "smooth_quant_scal": [2, 111], "tf2onnx_convert": [2, 111], "torch_util": [2, 268, 312, 365, 648, 730, 735], "layer_wise_qu": [2, 154, 232, 386, 400, 730], "modified_pickl": [2, 154, 155, 581, 582], "torch_load": [2, 154, 155], "bf16_convert": [2, 52, 87, 111, 154, 477, 512], "hawq_metr": [2, 154], "model_wrapp": [2, 15, 154, 568], "pattern_detector": [2, 154], "symbolic_trac": [2, 154], "tensorflow": [2, 52, 54, 75, 76, 77, 87, 95, 101, 102, 103, 104, 105, 106, 110, 111, 112, 114, 117, 130, 140, 141, 142, 145, 148, 189, 191, 222, 231, 232, 246, 247, 248, 249, 252, 254, 256, 264, 271, 289, 290, 291, 292, 295, 297, 299, 305, 309, 310, 311, 314, 316, 320, 321, 322, 348, 356, 367, 369, 373, 374, 382, 421, 422, 426, 427, 428, 438, 639, 644, 646, 648, 649, 650, 667, 668, 669, 672, 673, 674, 676, 679, 680, 682, 683, 687, 688, 689, 697, 698, 709, 712, 726, 727, 728, 734, 735, 738, 740], "kerasadaptor": [3, 455], "mxnetadaptor": 11, "do": [11, 14, 152, 188, 219, 231, 232, 246, 247, 289, 290, 306, 310, 313, 316, 346, 366, 369, 589, 598, 638, 643, 650, 668, 670, 675, 679, 682, 686, 687, 702, 705, 726, 731, 733, 735, 738], "inspect": [11, 14, 733, 736], "tensor": [11, 13, 14, 15, 16, 43, 44, 70, 105, 140, 148, 153, 158, 159, 165, 172, 198, 200, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 222, 232, 264, 305, 308, 310, 343, 345, 355, 382, 395, 437, 450, 495, 565, 570, 572, 583, 585, 589, 591, 595, 611, 612, 622, 634, 638, 639, 645, 651, 668, 669, 670, 672, 726, 729, 733, 736, 737, 738], "dict": [11, 13, 14, 44, 45, 116, 148, 151, 152, 153, 158, 165, 172, 173, 178, 186, 191, 195, 198, 200, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 226, 228, 229, 231, 232, 235, 236, 246, 265, 271, 278, 279, 289, 308, 310, 315, 316, 317, 318, 320, 323, 326, 327, 328, 335, 338, 340, 343, 344, 345, 346, 347, 352, 355, 361, 364, 368, 369, 370, 371, 373, 374, 382, 386, 391, 392, 394, 400, 428, 443, 446, 447, 456, 466, 470, 536, 565, 570, 572, 583, 589, 591, 595, 596, 598, 611, 617, 628, 629, 631, 638, 639, 645, 650, 668, 677, 686, 726, 728, 729, 735, 736, 738], "specif": [11, 14, 42, 46, 104, 116, 172, 178, 179, 191, 223, 227, 231, 232, 247, 248, 249, 250, 254, 256, 271, 290, 291, 292, 293, 297, 299, 329, 330, 332, 333, 334, 373, 428, 536, 567, 612, 636, 643, 646, 649, 650, 667, 668, 669, 672, 673, 679, 681, 685, 686, 687, 688, 689, 690, 694, 695, 697, 701, 707, 709, 715, 724, 726, 728, 732, 738, 740], "configur": [11, 13, 14, 45, 118, 151, 165, 172, 178, 179, 223, 228, 231, 232, 235, 236, 238, 249, 252, 265, 270, 278, 279, 292, 295, 306, 310, 311, 322, 323, 324, 326, 335, 340, 344, 348, 349, 355, 373, 374, 384, 428, 437, 446, 468, 472, 538, 589, 591, 595, 622, 628, 630, 631, 637, 638, 645, 646, 649, 650, 670, 672, 687, 694, 708, 715, 720, 721, 722, 724, 726, 729, 732, 733, 735, 737, 738, 741], "mxnet": [12, 13, 16, 232, 242, 246, 249, 252, 256, 264, 285, 289, 292, 295, 299, 305, 311, 320, 348, 373, 374, 379, 428, 644, 648, 649, 650, 667, 669, 676, 679, 682, 687, 688, 689, 728, 738, 740], "init": [12, 17, 42, 175, 190, 200, 202, 224, 670, 686, 738], "optyp": [13, 231, 232, 308, 650], "enum": 13, "type": [13, 16, 42, 43, 44, 45, 74, 96, 105, 116, 122, 132, 140, 148, 151, 152, 153, 158, 165, 172, 173, 182, 186, 189, 191, 195, 196, 199, 203, 204, 205, 210, 219, 220, 221, 223, 226, 229, 231, 232, 245, 247, 249, 256, 264, 266, 271, 288, 290, 292, 299, 305, 310, 313, 314, 316, 320, 327, 334, 338, 343, 345, 347, 352, 358, 362, 364, 366, 367, 369, 373, 382, 384, 386, 391, 392, 394, 395, 405, 432, 433, 440, 444, 446, 447, 450, 468, 472, 499, 521, 536, 542, 552, 565, 570, 572, 583, 589, 595, 598, 611, 612, 627, 638, 639, 649, 650, 670, 672, 675, 677, 679, 682, 687, 688, 708, 710, 715, 716, 720, 721, 729, 730, 732, 734, 737, 738, 739, 740], "isiter": 13, "obj": [13, 105, 200, 223, 246, 289, 306, 311, 322, 323, 324, 326, 335, 340, 344, 348, 374, 384, 428, 628, 631, 639], "bool": [13, 42, 43, 44, 141, 148, 152, 158, 163, 165, 172, 187, 199, 205, 231, 232, 247, 249, 260, 264, 290, 292, 302, 305, 310, 314, 320, 343, 361, 367, 373, 391, 392, 394, 400, 405, 443, 447, 453, 466, 470, 565, 583, 596, 598, 611, 612, 619, 622, 634, 638, 639, 669, 670, 686, 718, 728, 737], "check": [13, 44, 67, 68, 105, 148, 165, 172, 223, 238, 249, 292, 308, 344, 405, 492, 493, 565, 572, 591, 595, 638, 639, 648, 672, 675, 683, 691, 693, 695, 702, 705, 706, 710, 713, 716, 717, 733], "whether": [13, 43, 44, 105, 116, 148, 152, 158, 165, 172, 205, 231, 232, 245, 247, 260, 264, 288, 290, 302, 305, 314, 316, 320, 343, 367, 369, 373, 391, 392, 394, 405, 536, 565, 572, 583, 590, 598, 611, 612, 631, 634, 638, 639, 649, 670, 686, 729, 732, 735, 737], "object": [13, 42, 43, 44, 45, 74, 86, 105, 116, 132, 148, 151, 153, 156, 158, 163, 165, 178, 186, 188, 198, 200, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 228, 229, 231, 232, 235, 236, 237, 247, 248, 249, 264, 265, 267, 278, 279, 280, 290, 291, 292, 305, 306, 311, 316, 324, 326, 329, 330, 332, 333, 334, 335, 340, 343, 344, 345, 346, 347, 348, 352, 365, 369, 373, 374, 382, 383, 422, 427, 428, 432, 446, 499, 511, 536, 552, 565, 567, 570, 572, 583, 584, 589, 595, 600, 611, 627, 628, 631, 638, 639, 645, 646, 650, 656, 666, 668, 669, 670, 678, 686, 687, 689, 725, 726, 728, 729, 737, 738, 739, 741], "i": [13, 43, 44, 45, 48, 49, 51, 54, 55, 60, 64, 70, 82, 85, 105, 132, 143, 148, 152, 153, 156, 158, 160, 163, 165, 172, 177, 178, 180, 182, 188, 191, 192, 198, 199, 203, 204, 210, 215, 216, 217, 218, 219, 220, 222, 223, 231, 232, 235, 236, 237, 245, 246, 247, 248, 249, 250, 251, 254, 256, 260, 264, 265, 267, 271, 273, 274, 278, 279, 280, 288, 289, 290, 291, 292, 293, 294, 297, 299, 302, 305, 313, 316, 318, 320, 322, 327, 335, 340, 344, 345, 349, 356, 366, 369, 371, 373, 374, 384, 395, 398, 405, 411, 412, 416, 428, 433, 438, 446, 447, 473, 474, 476, 479, 480, 485, 489, 495, 507, 510, 552, 560, 565, 567, 572, 583, 584, 595, 596, 598, 600, 611, 612, 628, 634, 638, 639, 643, 644, 645, 646, 648, 649, 650, 651, 652, 654, 658, 661, 664, 666, 667, 668, 669, 670, 672, 673, 674, 675, 677, 678, 679, 682, 683, 684, 686, 687, 688, 689, 690, 691, 692, 693, 695, 696, 698, 700, 701, 702, 704, 705, 707, 708, 709, 710, 712, 713, 714, 715, 716, 717, 718, 720, 722, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 741], "iter": [13, 15, 105, 140, 148, 165, 172, 178, 204, 210, 217, 221, 231, 232, 235, 236, 240, 245, 249, 250, 267, 278, 279, 283, 288, 292, 293, 345, 347, 374, 388, 428, 450, 468, 472, 565, 567, 595, 596, 600, 611, 628, 631, 645, 646, 649, 666, 669, 670, 687, 726, 728, 729, 735, 736, 738, 740], "return": [13, 16, 44, 45, 54, 67, 68, 70, 74, 105, 116, 148, 151, 152, 153, 158, 163, 165, 171, 172, 173, 178, 186, 189, 191, 195, 196, 199, 200, 203, 205, 206, 210, 213, 219, 220, 221, 223, 226, 229, 235, 236, 249, 256, 260, 264, 265, 266, 271, 278, 279, 292, 299, 302, 305, 310, 313, 314, 316, 317, 318, 320, 326, 327, 334, 338, 343, 344, 345, 347, 352, 358, 362, 364, 366, 367, 369, 370, 371, 373, 374, 378, 382, 384, 386, 391, 392, 394, 395, 400, 405, 422, 427, 428, 432, 440, 444, 446, 447, 466, 468, 470, 472, 479, 492, 493, 495, 499, 536, 565, 570, 572, 583, 589, 590, 591, 595, 598, 600, 611, 619, 622, 627, 628, 631, 636, 638, 639, 645, 646, 650, 651, 669, 670, 675, 686, 689, 720, 721, 722, 724, 726, 729, 732, 735, 736, 738], "true": [13, 43, 44, 85, 113, 146, 148, 152, 158, 172, 178, 195, 199, 231, 232, 245, 247, 249, 250, 263, 264, 265, 288, 290, 292, 293, 304, 305, 310, 314, 320, 338, 361, 367, 373, 384, 391, 392, 394, 400, 428, 443, 447, 466, 470, 510, 533, 563, 565, 567, 583, 590, 591, 596, 598, 610, 611, 612, 619, 622, 631, 634, 638, 639, 648, 650, 669, 670, 672, 675, 679, 686, 687, 690, 693, 694, 709, 710, 711, 712, 718, 720, 728, 729, 730, 732, 735, 736, 737, 738, 740], "els": [13, 148, 172, 232, 245, 288, 384, 565, 611, 636, 695, 732, 736], "fals": [13, 15, 41, 42, 43, 44, 47, 48, 49, 71, 72, 89, 92, 99, 102, 103, 105, 113, 131, 136, 143, 146, 147, 148, 150, 152, 157, 158, 163, 165, 172, 178, 189, 192, 225, 231, 232, 237, 239, 242, 243, 244, 246, 247, 249, 260, 264, 265, 266, 267, 273, 280, 282, 285, 286, 287, 289, 290, 292, 302, 305, 316, 320, 369, 373, 384, 392, 394, 400, 405, 428, 447, 456, 470, 473, 474, 496, 497, 514, 517, 524, 533, 551, 556, 560, 563, 564, 565, 567, 583, 591, 595, 596, 598, 611, 619, 631, 634, 638, 639, 649, 650, 669, 670, 679, 686, 687, 700, 704, 710, 718, 721, 722, 728, 729, 732, 735, 736, 737, 738, 740], "boolean": 13, "ensure_list": 13, "x": [13, 55, 74, 152, 204, 231, 232, 246, 264, 289, 305, 352, 432, 447, 480, 499, 598, 667, 668, 672, 675, 688, 689, 715, 716, 720, 721, 723, 729, 730, 735, 736, 737, 739], "ensur": [13, 264, 305, 352, 432, 596, 675, 729, 737], "list": [13, 42, 43, 44, 54, 105, 140, 148, 151, 152, 153, 162, 165, 178, 179, 180, 182, 196, 203, 204, 209, 214, 219, 223, 226, 231, 232, 235, 236, 240, 247, 260, 264, 265, 278, 279, 283, 290, 302, 305, 309, 310, 313, 314, 316, 317, 318, 320, 327, 335, 340, 343, 346, 361, 366, 367, 369, 370, 371, 373, 374, 382, 388, 389, 391, 392, 394, 395, 398, 400, 405, 411, 412, 416, 428, 443, 447, 450, 466, 470, 472, 479, 565, 570, 595, 598, 611, 619, 628, 629, 639, 645, 648, 649, 670, 677, 679, 683, 685, 687, 690, 695, 697, 700, 701, 704, 712, 715, 717, 718, 724, 726, 728, 729, 731, 735, 736, 738], "input": [13, 15, 42, 43, 44, 45, 54, 60, 64, 67, 68, 70, 71, 72, 74, 82, 83, 85, 86, 105, 109, 110, 116, 122, 141, 148, 151, 161, 163, 164, 165, 170, 171, 172, 176, 203, 204, 223, 231, 232, 235, 236, 247, 248, 249, 251, 260, 263, 264, 269, 278, 279, 290, 291, 292, 294, 302, 304, 305, 308, 309, 310, 373, 374, 378, 382, 389, 395, 398, 428, 453, 479, 485, 489, 492, 493, 495, 496, 497, 499, 507, 508, 510, 511, 529, 530, 536, 542, 565, 567, 570, 572, 589, 591, 595, 608, 611, 612, 622, 627, 628, 634, 636, 638, 639, 646, 649, 650, 666, 667, 669, 670, 672, 673, 674, 675, 677, 679, 681, 686, 687, 688, 689, 690, 695, 726, 728, 729, 732, 735, 736, 737, 740], "check_mx_vers": 13, "version": [13, 54, 104, 161, 165, 203, 232, 309, 310, 365, 479, 608, 643, 645, 649, 668, 679, 683, 684, 687, 700, 702, 704, 705, 727, 735, 738, 739], "str": [13, 42, 43, 44, 140, 151, 153, 158, 159, 162, 163, 165, 171, 172, 173, 179, 182, 186, 187, 189, 191, 200, 203, 226, 231, 232, 247, 248, 249, 256, 260, 264, 266, 270, 271, 290, 291, 292, 299, 302, 305, 309, 310, 313, 314, 316, 318, 320, 327, 338, 361, 364, 366, 367, 369, 371, 373, 386, 388, 389, 391, 392, 394, 395, 397, 398, 400, 405, 413, 421, 423, 426, 427, 443, 446, 447, 450, 466, 469, 470, 472, 572, 583, 585, 591, 595, 596, 611, 612, 617, 619, 623, 627, 631, 634, 636, 639, 640, 668, 669, 670, 686, 718, 728, 736, 737], "mx": 13, "__version__": [13, 156, 584, 668], "combine_cap": 13, "current": [13, 70, 104, 170, 172, 198, 200, 203, 206, 210, 213, 231, 232, 322, 329, 330, 332, 333, 334, 343, 345, 352, 356, 432, 438, 495, 591, 611, 639, 645, 646, 649, 651, 667, 668, 675, 679, 687, 690, 694, 707, 715, 724, 726, 729, 732, 735, 738], "new": [13, 16, 44, 148, 171, 178, 182, 237, 249, 264, 265, 280, 292, 305, 344, 384, 395, 565, 567, 573, 591, 594, 596, 597, 598, 605, 609, 610, 611, 612, 623, 627, 644, 650, 675, 687, 688, 701, 707, 708, 709, 710, 716, 717, 720, 721, 726, 727, 729, 732, 733, 734, 737, 739, 740], "combin": [13, 165, 231, 232, 235, 236, 260, 274, 278, 279, 302, 374, 428, 572, 595, 628, 639, 645, 649, 682, 687, 725, 727, 729, 731, 732, 737, 738], "capabl": [13, 47, 362, 444, 456, 650, 651, 666, 679, 687, 688, 698, 709, 714, 726, 728, 729, 738, 740], "contain": [13, 67, 68, 70, 74, 139, 148, 153, 158, 165, 172, 178, 188, 200, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 223, 231, 232, 235, 236, 247, 248, 249, 278, 279, 290, 291, 292, 306, 310, 311, 316, 317, 318, 322, 335, 338, 340, 343, 344, 345, 346, 347, 348, 369, 370, 371, 374, 428, 492, 493, 495, 499, 559, 565, 583, 591, 595, 628, 631, 638, 648, 667, 670, 673, 682, 686, 708, 715, 720, 721, 722, 726, 732, 736, 738, 739], "make_nc_model": 13, "target": [13, 42, 43, 102, 152, 165, 203, 221, 223, 232, 344, 347, 352, 432, 455, 598, 634, 670, 675, 687, 726, 736, 737, 738, 740], "sym_model": 13, "ctx": 13, "input_desc": 13, "convert": [13, 43, 48, 49, 50, 53, 54, 55, 56, 57, 66, 74, 86, 99, 100, 102, 103, 104, 105, 131, 136, 140, 142, 151, 165, 203, 231, 232, 247, 260, 263, 264, 290, 302, 304, 305, 309, 316, 322, 344, 362, 369, 444, 447, 450, 455, 456, 473, 474, 475, 478, 479, 480, 481, 482, 491, 499, 511, 524, 525, 551, 556, 573, 594, 596, 597, 598, 605, 609, 610, 622, 645, 650, 687, 688, 692, 729, 731, 732, 735, 737, 738], "symbol": [13, 43, 151, 163, 165, 313, 366, 374, 428, 645, 689], "model": [13, 15, 16, 29, 41, 42, 43, 44, 45, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 116, 118, 140, 141, 142, 148, 150, 151, 152, 153, 157, 158, 159, 160, 162, 163, 164, 165, 170, 171, 172, 176, 178, 180, 188, 195, 200, 201, 203, 210, 211, 212, 215, 217, 218, 219, 221, 223, 225, 231, 232, 235, 236, 243, 246, 247, 249, 264, 265, 268, 269, 278, 279, 286, 289, 290, 292, 305, 306, 308, 309, 310, 311, 312, 320, 321, 322, 323, 326, 329, 330, 332, 333, 334, 335, 340, 344, 345, 346, 347, 348, 349, 352, 355, 356, 358, 365, 373, 374, 384, 386, 388, 389, 391, 392, 394, 395, 397, 398, 404, 405, 421, 426, 427, 428, 429, 432, 433, 437, 438, 440, 446, 447, 450, 453, 455, 468, 469, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 494, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 521, 522, 523, 524, 525, 527, 528, 529, 536, 538, 565, 570, 572, 573, 583, 585, 589, 590, 591, 594, 595, 596, 597, 598, 605, 609, 610, 611, 612, 617, 618, 622, 627, 628, 634, 636, 638, 639, 641, 644, 645, 646, 648, 649, 651, 656, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 681, 682, 684, 686, 688, 690, 695, 697, 698, 701, 707, 709, 714, 716, 717, 718, 719, 724, 725, 727, 729, 733, 734, 736, 737, 738, 739, 740], "an": [13, 67, 68, 70, 105, 141, 143, 148, 153, 156, 158, 165, 172, 177, 192, 210, 231, 232, 240, 245, 249, 264, 268, 273, 283, 288, 292, 305, 312, 313, 317, 318, 326, 327, 349, 365, 366, 370, 371, 374, 422, 427, 428, 447, 453, 492, 493, 495, 560, 565, 583, 584, 596, 600, 611, 612, 623, 628, 639, 641, 643, 645, 646, 648, 649, 651, 667, 669, 670, 671, 672, 677, 685, 686, 687, 688, 690, 694, 695, 698, 707, 710, 711, 712, 715, 718, 724, 726, 727, 729, 732, 734, 735, 736, 737, 738], "neural": [13, 153, 178, 188, 191, 205, 206, 207, 208, 219, 231, 232, 259, 260, 261, 264, 265, 268, 271, 274, 302, 303, 305, 307, 312, 319, 320, 322, 335, 340, 343, 346, 348, 349, 354, 360, 365, 372, 373, 374, 378, 406, 428, 435, 436, 442, 569, 636, 641, 644, 649, 650, 651, 666, 667, 668, 670, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 684, 685, 688, 689, 691, 692, 695, 697, 698, 700, 702, 704, 705, 706, 718, 724, 725, 727, 729, 732, 733, 735, 736, 737, 738, 740, 741], "compressor": [13, 178, 188, 191, 207, 208, 219, 231, 232, 259, 260, 261, 264, 265, 268, 271, 274, 302, 303, 305, 307, 312, 319, 320, 322, 343, 346, 348, 349, 354, 360, 365, 372, 373, 374, 378, 406, 428, 436, 442, 569, 636, 641, 644, 646, 649, 650, 651, 666, 667, 668, 670, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 684, 685, 688, 689, 690, 691, 695, 697, 698, 700, 702, 704, 705, 706, 709, 710, 711, 712, 714, 715, 722, 724, 725, 726, 727, 729, 732, 733, 735, 736, 737, 738, 739, 740, 741], "tupl": [13, 105, 148, 165, 196, 232, 235, 236, 260, 264, 278, 279, 302, 305, 310, 361, 374, 395, 398, 428, 443, 469, 565, 589, 595, 600, 617, 628, 638, 650, 668, 670, 686, 687, 729, 737], "symnet": 13, "arg": [13, 54, 105, 165, 172, 247, 248, 249, 290, 291, 292, 343, 352, 386, 397, 432, 447, 479, 598, 611, 617, 634, 635, 670, 675, 687, 696, 726, 729, 732, 735, 736, 737], "aux": 13, "data": [13, 42, 43, 44, 56, 105, 140, 148, 153, 158, 165, 170, 172, 176, 203, 231, 232, 235, 236, 265, 267, 278, 279, 310, 312, 352, 362, 364, 365, 374, 389, 395, 399, 405, 421, 426, 428, 432, 444, 446, 450, 468, 472, 481, 565, 568, 572, 583, 591, 595, 596, 611, 628, 631, 636, 639, 648, 649, 667, 669, 670, 675, 679, 680, 683, 686, 687, 688, 709, 710, 712, 715, 720, 721, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739], "descript": [13, 132, 199, 447, 552, 645, 650, 651, 669, 715, 719, 735], "ncmodel": 13, "fuse": [13, 58, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 91, 92, 93, 94, 96, 131, 136, 163, 165, 176, 483, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 516, 517, 518, 519, 521, 551, 556, 595, 645, 735, 736], "suppli": 13, "get_framework_nam": 13, "get": [13, 42, 43, 44, 45, 67, 68, 70, 104, 105, 148, 152, 159, 165, 171, 178, 187, 191, 192, 196, 198, 200, 201, 203, 206, 213, 220, 221, 222, 223, 229, 232, 240, 264, 265, 271, 273, 283, 305, 310, 343, 345, 347, 355, 362, 364, 373, 382, 392, 399, 405, 428, 437, 444, 446, 466, 492, 493, 495, 565, 567, 570, 572, 585, 591, 595, 598, 606, 611, 627, 631, 634, 636, 639, 650, 667, 678, 682, 683, 685, 687, 693, 710, 712, 720, 721, 727, 732, 735, 738, 739, 742], "name": [13, 43, 45, 54, 67, 68, 70, 104, 105, 110, 116, 140, 148, 151, 152, 153, 158, 159, 163, 165, 171, 172, 173, 178, 179, 180, 182, 186, 192, 195, 196, 198, 203, 205, 210, 213, 214, 219, 220, 221, 222, 223, 226, 229, 231, 232, 247, 248, 249, 252, 256, 262, 264, 265, 269, 272, 273, 290, 291, 292, 295, 299, 305, 308, 309, 310, 315, 320, 338, 343, 345, 347, 362, 364, 368, 373, 378, 382, 384, 405, 428, 444, 446, 450, 479, 492, 493, 495, 530, 536, 565, 570, 572, 583, 585, 591, 595, 598, 611, 623, 627, 629, 631, 636, 639, 644, 645, 651, 668, 670, 672, 675, 677, 679, 684, 686, 687, 689, 693, 700, 704, 708, 709, 715, 726, 729, 733, 734, 736, 738, 740, 741], "context": [13, 612, 639, 728, 732], "prepare_model_data": 13, "nc_model": [13, 335, 340], "data_x": 13, "prepar": [13, 44, 165, 395, 573, 594, 596, 597, 598, 605, 609, 610, 622, 645, 670, 675, 680, 709, 720, 721, 722, 726, 729], "dataload": [13, 15, 42, 44, 140, 141, 150, 152, 153, 165, 170, 172, 178, 200, 201, 203, 219, 223, 225, 235, 236, 247, 258, 268, 278, 279, 290, 301, 306, 312, 335, 340, 349, 365, 388, 389, 398, 421, 426, 428, 450, 453, 567, 591, 596, 598, 611, 628, 631, 645, 648, 649, 650, 672, 673, 674, 675, 680, 681, 687, 688, 709, 710, 725, 726, 729, 730, 731, 732, 735, 736, 737, 739, 740], "need": [13, 42, 105, 109, 170, 172, 178, 182, 203, 219, 232, 235, 236, 237, 245, 246, 249, 256, 264, 267, 269, 270, 278, 279, 280, 288, 289, 292, 299, 305, 310, 349, 355, 373, 374, 384, 389, 428, 437, 529, 567, 589, 591, 628, 638, 639, 645, 649, 668, 669, 670, 672, 673, 675, 682, 687, 690, 692, 693, 696, 700, 701, 702, 704, 705, 707, 708, 709, 710, 711, 712, 714, 718, 720, 726, 728, 729, 730, 731, 732, 733, 735, 737, 738, 740], "run": [13, 140, 148, 158, 172, 178, 210, 223, 231, 232, 235, 236, 246, 263, 265, 278, 279, 289, 304, 344, 345, 352, 374, 428, 432, 450, 565, 583, 612, 628, 648, 649, 666, 675, 678, 679, 687, 690, 692, 694, 695, 696, 698, 700, 701, 702, 704, 705, 707, 715, 716, 717, 718, 720, 721, 722, 727, 729, 732, 733, 734, 736, 738, 740], "loader": [13, 140, 235, 236, 278, 279, 374, 428, 450, 468, 472, 628, 634, 669, 729], "dataloaderwrap": 13, "prepare_model": 13, "create_data_exampl": 13, "creat": [13, 16, 105, 156, 182, 231, 232, 237, 247, 249, 267, 280, 290, 292, 316, 326, 327, 362, 369, 398, 422, 427, 444, 446, 447, 567, 584, 623, 631, 643, 646, 649, 670, 689, 700, 702, 704, 705, 708, 720, 721, 722, 726, 729, 734, 736, 738, 739], "exampl": [13, 44, 153, 158, 165, 172, 178, 179, 180, 182, 186, 196, 203, 204, 219, 231, 232, 247, 248, 249, 260, 264, 290, 291, 292, 302, 305, 316, 317, 318, 320, 346, 369, 370, 371, 373, 374, 384, 391, 392, 394, 405, 428, 446, 447, 572, 583, 589, 611, 623, 627, 628, 638, 639, 643, 648, 650, 651, 656, 681, 682, 690, 693, 694, 695, 698, 715, 718, 731, 733, 737, 738, 739, 742], "prepare_dataload": 13, "io": [13, 158, 583, 713], "ndarray_to_devic": 13, "ndarrai": [13, 42, 43, 67, 68, 70, 264, 305, 492, 493, 495, 629, 678, 737], "devic": [13, 79, 89, 90, 91, 92, 93, 94, 97, 107, 131, 136, 147, 152, 157, 158, 160, 165, 172, 200, 203, 204, 219, 223, 225, 231, 232, 504, 514, 515, 516, 517, 518, 519, 522, 527, 551, 556, 564, 583, 596, 598, 612, 634, 648, 650, 669, 673, 687, 688, 690, 693, 698, 707, 726, 728, 730, 732], "is_model_quant": 13, "query_quantizable_nod": 13, "queri": [13, 47, 148, 165, 203, 214, 231, 232, 455, 456, 565, 595, 650, 651, 717, 729], "node": [13, 42, 43, 44, 50, 54, 55, 56, 57, 60, 62, 64, 67, 68, 70, 74, 77, 80, 82, 83, 84, 98, 102, 103, 105, 110, 132, 140, 148, 203, 308, 310, 382, 395, 405, 427, 450, 475, 479, 480, 481, 482, 485, 487, 489, 492, 493, 495, 499, 502, 505, 507, 508, 509, 523, 530, 552, 565, 570, 649, 672, 675, 710, 714, 717, 720, 721, 722, 730, 736, 738, 741], "given": [13, 16, 43, 67, 68, 70, 104, 105, 116, 148, 159, 165, 226, 264, 305, 316, 369, 428, 492, 493, 495, 536, 565, 573, 585, 594, 596, 597, 598, 600, 605, 609, 610, 611, 622, 627, 646, 651, 726, 735, 737], "map": [13, 43, 105, 148, 158, 165, 186, 232, 264, 305, 308, 310, 311, 315, 317, 318, 320, 335, 340, 345, 348, 368, 370, 371, 373, 565, 583, 668, 670, 675, 686, 687, 700, 704, 712, 726, 729, 732], "quantize_sym_model": 13, "qconfig": [13, 165, 638, 732, 736], "accord": [13, 122, 165, 178, 231, 232, 247, 248, 249, 264, 290, 291, 292, 305, 355, 435, 437, 542, 573, 594, 596, 597, 598, 605, 609, 610, 631, 646, 649, 670, 675, 710, 715, 720, 721, 722, 726, 731, 735, 737, 738], "run_forward": 13, "b_filter": 13, "collector": [13, 153, 629], "none": [13, 41, 43, 44, 45, 47, 48, 49, 63, 89, 102, 104, 105, 110, 116, 142, 148, 150, 152, 153, 157, 158, 159, 160, 161, 164, 165, 170, 172, 178, 179, 180, 182, 187, 188, 189, 196, 198, 200, 201, 203, 207, 219, 223, 225, 227, 228, 229, 231, 232, 235, 236, 237, 239, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 260, 264, 265, 266, 267, 274, 278, 279, 280, 282, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 302, 305, 306, 309, 310, 311, 316, 320, 321, 322, 323, 326, 335, 340, 344, 348, 352, 355, 356, 358, 362, 369, 373, 374, 384, 386, 398, 421, 426, 427, 428, 429, 432, 433, 437, 438, 440, 444, 447, 455, 456, 466, 468, 469, 470, 472, 473, 474, 488, 514, 530, 536, 565, 567, 572, 573, 583, 585, 591, 595, 596, 598, 606, 608, 610, 611, 612, 618, 619, 622, 628, 629, 631, 634, 636, 638, 639, 648, 649, 650, 669, 670, 686, 710, 729, 732, 736, 737, 738], "pre_batch": 13, "post_batch": 13, "forward": [13, 165, 223, 611, 612, 650, 687, 709, 726, 728, 729, 732, 735, 736], "propag": [13, 100, 525], "filter": [13, 247, 248, 249, 250, 251, 252, 254, 258, 290, 291, 292, 293, 294, 295, 297, 301, 312, 365, 567, 572, 639, 651, 670, 682, 726, 736], "which": [13, 42, 56, 83, 110, 152, 153, 158, 170, 172, 179, 198, 203, 204, 206, 210, 211, 212, 214, 217, 218, 219, 221, 223, 231, 232, 247, 248, 249, 260, 265, 290, 291, 292, 302, 313, 318, 327, 329, 330, 332, 333, 334, 338, 343, 344, 345, 347, 352, 366, 371, 373, 378, 384, 389, 392, 405, 428, 432, 481, 508, 530, 572, 583, 591, 598, 627, 639, 643, 645, 646, 648, 649, 650, 651, 667, 669, 670, 672, 673, 675, 678, 679, 682, 686, 687, 688, 689, 691, 695, 698, 701, 707, 708, 709, 712, 715, 720, 721, 722, 725, 726, 728, 729, 730, 731, 732, 733, 735, 736, 737, 738, 739, 740], "batch": [13, 165, 172, 237, 239, 240, 245, 246, 267, 280, 282, 283, 288, 289, 567, 628, 669, 673, 674, 687, 725, 726, 729, 735, 737, 738, 741], "infer": [13, 43, 105, 140, 165, 172, 203, 311, 348, 382, 384, 405, 428, 450, 570, 595, 611, 612, 628, 648, 649, 650, 667, 673, 674, 687, 688, 707, 724, 726, 727, 729, 732, 735, 736, 738], "collect": [13, 16, 43, 165, 180, 187, 262, 264, 267, 269, 270, 272, 305, 318, 320, 371, 373, 572, 594, 597, 609, 629, 639, 650, 729, 736, 738], "inform": [13, 153, 198, 200, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 232, 235, 236, 267, 269, 270, 278, 279, 343, 345, 346, 347, 349, 373, 388, 639, 643, 644, 647, 648, 649, 650, 651, 652, 654, 658, 661, 664, 667, 668, 673, 679, 687, 689, 702, 705, 708, 709, 712, 713, 715, 716, 720, 721, 726, 731, 732, 733, 735, 736, 740, 741, 742], "dure": [13, 156, 158, 205, 209, 221, 231, 232, 343, 347, 384, 398, 583, 584, 622, 639, 650, 672, 687, 689, 714, 724, 725, 726, 729, 735, 736, 740], "call": [13, 42, 158, 170, 173, 203, 211, 212, 217, 316, 345, 369, 389, 583, 591, 612, 645, 646, 649, 669, 681, 696, 698, 708, 726, 729, 735, 736, 737], "prior": [13, 88, 513, 738], "after": [13, 78, 148, 165, 201, 205, 210, 212, 217, 231, 232, 247, 260, 264, 267, 290, 302, 305, 345, 433, 447, 503, 565, 634, 639, 646, 648, 650, 670, 672, 673, 674, 677, 682, 686, 687, 700, 701, 704, 708, 712, 724, 725, 726, 729, 731, 732, 734, 735, 736, 737, 738], "count": [13, 646, 670, 732], "int": [13, 16, 42, 43, 44, 105, 140, 148, 150, 162, 165, 172, 179, 182, 187, 201, 231, 232, 246, 247, 248, 260, 264, 289, 290, 291, 302, 305, 309, 310, 314, 316, 320, 327, 367, 369, 373, 388, 391, 392, 394, 395, 400, 405, 413, 422, 427, 446, 447, 450, 451, 455, 468, 469, 472, 565, 595, 596, 611, 619, 634, 639, 648, 668, 669, 670, 686, 687, 718, 728, 732, 737], "make_symbol_block": 13, "gluon": [13, 374, 428, 689], "symbolblock": 13, "make_modul": 13, "parse_tune_config": 13, "tune_cfg": [13, 148, 151, 165, 590, 591, 595, 649, 651, 738], "quantizable_nod": 13, "strategi": [13, 165, 217, 231, 232, 233, 249, 276, 292, 312, 365, 648, 649, 650, 651, 656, 667, 668, 669, 675, 682, 687, 695, 707, 712, 727, 728, 729, 731, 732, 733, 739, 740], "config": [13, 44, 115, 116, 118, 122, 165, 178, 179, 180, 182, 186, 187, 198, 200, 201, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 231, 235, 236, 247, 278, 279, 290, 329, 330, 332, 333, 334, 335, 340, 343, 344, 345, 346, 347, 362, 363, 365, 374, 386, 391, 392, 394, 397, 398, 422, 427, 444, 445, 446, 447, 451, 455, 456, 472, 535, 536, 538, 542, 590, 591, 595, 605, 622, 628, 631, 638, 639, 646, 648, 650, 651, 656, 666, 668, 669, 672, 673, 674, 675, 677, 680, 682, 686, 687, 688, 689, 709, 710, 725, 726, 728, 729, 731, 732, 734, 736, 738], "tune": [13, 45, 171, 172, 178, 179, 180, 185, 231, 232, 235, 236, 247, 249, 278, 279, 290, 292, 311, 348, 350, 351, 352, 353, 355, 356, 357, 358, 361, 362, 363, 364, 374, 384, 398, 428, 429, 430, 431, 432, 433, 434, 435, 437, 438, 439, 440, 443, 444, 445, 446, 469, 591, 618, 628, 639, 649, 650, 667, 668, 669, 670, 672, 675, 682, 684, 687, 688, 707, 711, 714, 716, 717, 724, 726, 727, 731, 733, 734, 736, 740], "from": [13, 43, 45, 61, 67, 68, 70, 105, 148, 158, 159, 165, 171, 172, 178, 180, 182, 186, 188, 189, 196, 198, 200, 206, 207, 208, 209, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 231, 232, 235, 236, 237, 240, 244, 247, 248, 249, 250, 251, 252, 254, 259, 260, 266, 267, 270, 278, 279, 280, 283, 287, 290, 291, 292, 293, 294, 295, 297, 302, 306, 308, 309, 310, 313, 316, 317, 318, 322, 327, 343, 344, 345, 347, 362, 364, 366, 369, 370, 371, 374, 382, 384, 391, 405, 428, 444, 446, 447, 455, 486, 492, 493, 495, 565, 567, 570, 572, 573, 583, 585, 589, 591, 594, 595, 596, 597, 598, 600, 605, 609, 610, 611, 627, 628, 631, 634, 638, 639, 643, 644, 645, 646, 649, 651, 666, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 680, 682, 685, 686, 688, 689, 690, 694, 695, 696, 698, 708, 710, 712, 713, 717, 720, 721, 722, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739], "distribute_calib_tensor": 13, "calib_tensor": 13, "calib_cfg": 13, "tensor_to_nod": 13, "distribut": [13, 16, 143, 177, 231, 232, 237, 239, 240, 242, 243, 244, 245, 246, 267, 280, 282, 283, 285, 286, 287, 288, 289, 391, 560, 567, 633, 648, 650, 669, 673, 683, 702, 705, 709, 712, 720, 727, 729, 732, 733, 735, 739, 741], "depend": [13, 235, 236, 265, 278, 279, 374, 428, 628, 644, 678, 679, 713, 728, 729, 738], "algorithm": [13, 44, 152, 165, 179, 182, 195, 228, 232, 313, 320, 328, 365, 366, 373, 398, 405, 572, 619, 627, 631, 633, 646, 648, 649, 650, 651, 668, 673, 674, 679, 682, 685, 696, 701, 726, 729, 736, 740], "set": [13, 43, 51, 96, 105, 115, 148, 158, 165, 171, 172, 178, 180, 187, 191, 223, 229, 231, 232, 235, 236, 237, 247, 249, 252, 264, 265, 270, 271, 278, 279, 280, 290, 292, 295, 305, 316, 322, 335, 340, 344, 349, 369, 373, 374, 382, 392, 394, 427, 428, 447, 455, 476, 521, 535, 565, 567, 570, 583, 591, 611, 627, 628, 636, 639, 643, 646, 648, 650, 666, 669, 670, 673, 675, 677, 679, 681, 682, 683, 686, 687, 688, 690, 692, 694, 708, 709, 710, 711, 712, 713, 717, 720, 726, 728, 729, 732, 734, 735, 738, 740], "kl": [13, 16, 231, 232, 629, 633, 650, 651, 667, 679, 687, 738, 740], "minmax": [13, 16, 470, 650, 651, 667, 679, 729, 740], "calib_model": 13, "qsym_model": 13, "calib_data": [13, 157], "calibdata": 13, "threshold": [13, 174, 199, 629, 633, 686], "amp_convert": 13, "amp_cfg": 13, "support": [13, 42, 43, 44, 97, 104, 170, 172, 176, 179, 189, 191, 200, 206, 213, 217, 218, 231, 232, 235, 236, 246, 247, 249, 256, 260, 264, 266, 267, 268, 271, 278, 279, 289, 290, 292, 299, 302, 305, 312, 320, 322, 327, 343, 345, 349, 356, 362, 365, 373, 374, 378, 384, 389, 391, 392, 394, 395, 398, 405, 428, 438, 444, 447, 522, 591, 628, 631, 633, 634, 639, 641, 648, 650, 668, 685, 687, 690, 695, 698, 701, 707, 714, 715, 718, 727, 731, 734, 738, 739], "amp": [13, 172, 596, 690, 697, 716, 732], "wrap": [13, 105, 116, 189, 227, 266, 316, 369, 472, 536, 612, 645, 675, 702, 705], "dataiterload": 13, "data_it": [13, 203], "collectorbas": 13, "calibcollector": 13, "include_tensors_kl": 13, "include_tensors_minmax": 13, "num_bin": [13, 16, 629], "8001": [13, 629, 715, 720, 721, 722], "tensorcollector": 13, "include_nod": 13, "qtensor_to_tensor": 13, "build": [13, 42, 44, 115, 173, 174, 176, 177, 323, 326, 377, 379, 381, 382, 383, 395, 404, 535, 570, 649, 650, 651, 683, 689, 700, 702, 704, 705, 708, 727, 738], "up": [13, 100, 214, 264, 305, 344, 525, 595, 648, 675, 676, 679, 682, 698, 702, 705, 707, 726, 727, 728, 729, 734, 737, 738, 740], "namecollector": 13, "cache_kl": 13, "cache_minmax": 13, "tensors_kl": 13, "tensors_minmax": 13, "onnxruntimeadaptor": 14, "rt": 14, "onnxrt_weightonlyadaptor": 14, "onnxrt_qlinearopsadaptor": [14, 649], "onnxrt_integeropsadaptor": 14, "onnxrt_qdqadaptor": 14, "onnxrtaug": 15, "dump_op_typ": 15, "black_nod": 15, "white_nod": 15, "backend": [15, 41, 42, 46, 176, 191, 231, 232, 233, 234, 238, 239, 243, 247, 248, 250, 251, 252, 253, 254, 258, 261, 264, 270, 271, 276, 277, 281, 282, 284, 286, 290, 291, 293, 294, 295, 296, 297, 301, 303, 305, 321, 356, 374, 375, 376, 378, 438, 645, 651, 672, 675, 681, 682, 687, 688, 696, 715, 720, 721, 722, 728, 732, 737, 738, 740], "cpuexecutionprovid": [15, 41, 42, 44, 388, 389, 391, 392, 394, 400, 688, 729], "reduce_rang": [15, 41, 42, 231, 232, 405, 651, 728], "kwarg": [15, 43, 105, 122, 123, 124, 125, 126, 127, 128, 129, 132, 133, 134, 135, 137, 138, 159, 165, 172, 201, 231, 232, 249, 262, 264, 269, 272, 292, 305, 361, 363, 373, 374, 375, 377, 379, 381, 382, 383, 386, 388, 397, 400, 404, 428, 443, 445, 447, 542, 543, 544, 545, 546, 547, 548, 549, 552, 553, 554, 555, 557, 558, 570, 585, 598, 611, 617, 628, 634, 635, 638, 639, 669], "augment": 15, "dump": [15, 156, 165, 178, 310, 388, 572, 584, 595, 639, 644, 712, 729, 733, 736], "calib_registri": 16, "calib_method": 16, "calibratorbas": 16, "minmaxcalibr": 16, "percentilecalibr": 16, "2048": [16, 152, 172, 572, 596, 598, 619, 639, 648, 732], "percentil": [16, 44, 140, 172, 394, 395, 450, 470, 611, 667], "99": [16, 180, 470, 685, 741], "999": [16, 470, 740], "option": [16, 44, 105, 158, 165, 172, 182, 187, 205, 231, 232, 235, 236, 247, 264, 278, 279, 290, 305, 309, 310, 316, 322, 343, 349, 362, 365, 369, 373, 374, 386, 391, 392, 394, 395, 398, 405, 428, 444, 446, 447, 572, 573, 583, 594, 596, 597, 598, 605, 606, 609, 610, 611, 612, 622, 628, 632, 634, 639, 650, 651, 668, 669, 670, 679, 683, 687, 701, 715, 718, 720, 721, 722, 726, 729, 732, 734, 735, 737, 738, 740], "number": [16, 44, 67, 68, 105, 140, 165, 172, 179, 180, 196, 199, 201, 207, 208, 231, 232, 245, 248, 260, 264, 288, 291, 302, 305, 317, 318, 320, 343, 352, 370, 371, 373, 391, 392, 394, 395, 422, 427, 432, 447, 450, 492, 493, 567, 596, 611, 623, 631, 639, 666, 669, 670, 675, 686, 715, 717, 726, 729, 732, 734, 735, 737, 738], "bin": [16, 158, 159, 572, 583, 585, 639, 678], "histogram": [16, 572, 629, 639, 709, 736], "valu": [16, 43, 44, 56, 67, 68, 70, 89, 90, 105, 143, 148, 158, 165, 177, 178, 196, 198, 203, 204, 214, 222, 223, 228, 229, 231, 232, 235, 236, 247, 250, 251, 260, 264, 265, 278, 279, 290, 293, 294, 302, 305, 316, 320, 344, 352, 355, 362, 369, 373, 374, 392, 405, 428, 432, 437, 444, 446, 447, 481, 492, 493, 495, 514, 515, 560, 565, 567, 583, 595, 600, 612, 628, 629, 631, 639, 645, 650, 651, 667, 670, 672, 679, 686, 687, 688, 693, 710, 712, 718, 724, 726, 728, 729, 732, 733, 735, 737, 738, 740], "default": [16, 44, 97, 148, 158, 165, 172, 179, 182, 187, 199, 223, 229, 231, 232, 235, 236, 239, 247, 248, 249, 260, 264, 278, 279, 282, 290, 291, 292, 302, 305, 309, 310, 313, 322, 344, 364, 366, 373, 382, 386, 391, 392, 394, 395, 400, 405, 446, 466, 470, 522, 565, 570, 572, 583, 606, 611, 612, 619, 622, 631, 634, 639, 645, 649, 668, 669, 670, 679, 682, 683, 686, 687, 688, 695, 698, 700, 704, 712, 715, 720, 721, 722, 724, 726, 728, 729, 731, 732, 734, 735, 737, 738, 740], "float": [16, 43, 44, 140, 141, 153, 172, 179, 199, 205, 210, 220, 223, 231, 232, 247, 260, 290, 302, 314, 316, 317, 318, 345, 367, 369, 370, 371, 392, 395, 400, 443, 447, 450, 453, 470, 573, 590, 594, 596, 597, 598, 605, 609, 610, 611, 619, 622, 623, 636, 639, 668, 670, 686, 728, 729, 735, 737], "A": [16, 55, 74, 75, 103, 116, 140, 141, 148, 156, 165, 179, 185, 188, 195, 196, 198, 200, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 231, 232, 249, 264, 267, 269, 270, 292, 305, 306, 313, 316, 317, 318, 320, 323, 326, 327, 328, 335, 338, 340, 343, 344, 345, 346, 347, 352, 366, 369, 370, 371, 373, 374, 378, 382, 432, 450, 453, 480, 499, 500, 536, 565, 569, 570, 572, 584, 590, 595, 611, 623, 628, 639, 644, 648, 650, 668, 669, 670, 676, 679, 686, 687, 689, 700, 701, 704, 707, 715, 726, 727, 729, 732, 735, 737, 738, 740], "between": [16, 42, 143, 177, 216, 231, 232, 264, 305, 317, 320, 370, 373, 422, 427, 560, 639, 645, 649, 650, 651, 667, 672, 673, 682, 686, 687, 698, 729, 732, 733, 734, 735, 737, 738], "0": [16, 43, 44, 54, 90, 105, 148, 157, 158, 165, 172, 174, 176, 179, 180, 189, 196, 198, 199, 201, 223, 225, 227, 231, 232, 237, 239, 242, 243, 244, 246, 247, 250, 251, 254, 260, 264, 266, 267, 280, 282, 285, 286, 287, 289, 290, 293, 294, 297, 302, 305, 310, 311, 320, 327, 335, 340, 348, 373, 384, 391, 392, 394, 395, 400, 405, 428, 433, 447, 470, 479, 515, 565, 567, 583, 595, 611, 619, 623, 634, 645, 648, 668, 669, 670, 673, 675, 677, 678, 679, 683, 684, 685, 686, 687, 688, 693, 695, 700, 704, 710, 720, 721, 726, 728, 729, 730, 732, 733, 734, 735, 736, 737, 738, 740], "100": [16, 178, 179, 180, 196, 199, 231, 232, 249, 292, 400, 447, 468, 469, 472, 623, 666, 670, 675, 681, 683, 687, 712, 728, 729, 737, 738, 740, 741], "klcalibr": 16, "128": [16, 44, 150, 152, 165, 172, 225, 247, 250, 251, 264, 290, 293, 294, 305, 392, 400, 567, 598, 619, 670, 687, 729, 732, 737, 741], "num_quantized_bin": 16, "histogramcollector": 16, "collctor": 16, "smooth_distribut": 16, "p": [16, 648, 708, 709, 732], "ep": [16, 177, 688], "0001": [16, 196, 231, 232, 673, 687, 728], "smooth": [16, 140, 141, 148, 170, 176, 231, 232, 361, 388, 397, 400, 450, 451, 453, 470, 565, 591, 668, 726, 738], "discret": [16, 196, 738], "mai": [16, 148, 156, 158, 329, 330, 332, 333, 334, 447, 565, 583, 584, 612, 643, 644, 650, 667, 668, 672, 677, 678, 684, 688, 700, 704, 710, 713, 715, 727, 729, 732, 735, 738], "have": [16, 74, 83, 141, 148, 158, 200, 204, 206, 213, 245, 267, 288, 313, 316, 343, 345, 366, 369, 373, 428, 446, 447, 453, 499, 508, 565, 583, 595, 643, 644, 650, 651, 668, 669, 670, 672, 675, 679, 684, 686, 687, 688, 690, 707, 710, 713, 715, 720, 721, 722, 724, 726, 729, 730, 732, 735, 738, 739], "been": [16, 158, 200, 206, 213, 313, 343, 345, 366, 405, 572, 583, 595, 646, 651, 668, 673, 687, 688, 707, 732, 735], "normal": [16, 33, 264, 305, 318, 371, 687, 716, 724, 732, 735, 737], "1": [16, 42, 43, 44, 55, 74, 89, 105, 109, 113, 146, 148, 158, 161, 165, 170, 172, 174, 176, 177, 178, 180, 189, 196, 198, 199, 211, 212, 214, 231, 232, 237, 239, 242, 243, 244, 246, 247, 248, 250, 251, 254, 255, 260, 264, 265, 266, 267, 280, 282, 285, 286, 287, 289, 290, 291, 293, 294, 297, 298, 302, 305, 311, 316, 317, 318, 320, 335, 340, 345, 348, 349, 369, 370, 371, 373, 384, 389, 391, 392, 394, 395, 405, 428, 446, 447, 451, 480, 499, 514, 529, 533, 563, 565, 567, 572, 583, 591, 595, 596, 608, 611, 619, 631, 634, 639, 643, 645, 648, 649, 651, 667, 669, 670, 672, 673, 677, 679, 680, 683, 685, 686, 688, 691, 693, 709, 710, 717, 718, 720, 721, 722, 724, 725, 726, 728, 729, 730, 732, 733, 734, 735, 736, 737, 738, 739, 740], "replac": [16, 159, 165, 171, 172, 318, 371, 585, 591, 611, 668, 675, 687, 698, 733], "zero": [16, 43, 44, 152, 172, 210, 223, 264, 305, 345, 392, 395, 405, 598, 611, 639, 648, 712, 726, 729, 732, 735, 737, 738], "multipli": [16, 231, 232, 732], "scale": [16, 43, 44, 100, 141, 143, 152, 161, 164, 165, 170, 171, 172, 176, 177, 260, 264, 302, 305, 391, 392, 395, 405, 453, 525, 560, 591, 598, 608, 611, 729, 732, 734, 735, 737, 738], "factor": [16, 141, 453, 732, 735, 741], "take": [16, 205, 232, 235, 236, 240, 264, 269, 278, 279, 283, 305, 343, 352, 373, 374, 428, 432, 567, 628, 643, 645, 646, 669, 672, 673, 679, 687, 707, 726, 729, 731, 732, 737, 738, 740], "correspond": [16, 153, 203, 214, 231, 232, 247, 290, 313, 316, 320, 366, 369, 373, 595, 612, 631, 639, 649, 679, 687, 726, 728, 729, 734, 738], "amount": [16, 735], "off": [16, 67, 68, 70, 492, 493, 495, 644, 732], "non": [16, 344, 639, 645, 672, 732, 738], "ref": [16, 148, 565], "http": [16, 152, 153, 198, 199, 207, 208, 217, 218, 219, 225, 247, 249, 290, 292, 313, 314, 316, 317, 318, 343, 345, 346, 366, 367, 369, 370, 371, 373, 399, 428, 598, 619, 645, 670, 672, 680, 683, 684, 687, 696, 702, 705, 709, 711, 712, 713, 714, 715, 718, 720, 721, 722, 726, 733], "hanj": 16, "c": [16, 74, 249, 292, 499, 639, 670, 678, 683, 732, 738], "illinoi": 16, "edu": [16, 249, 292, 670], "cs412": 16, "bk3": 16, "diverg": [16, 629, 633, 651, 667, 673, 738], "pdf": [16, 199, 225], "github": [16, 153, 207, 208, 219, 247, 290, 313, 314, 317, 318, 343, 346, 366, 367, 370, 371, 373, 399, 428, 644, 648, 670, 672, 676, 683, 684, 687, 696, 702, 705, 709, 711, 712, 713, 714, 715, 718, 721, 722, 733], "com": [16, 153, 207, 208, 219, 247, 290, 313, 314, 317, 318, 343, 346, 366, 367, 370, 371, 373, 399, 428, 643, 668, 670, 672, 680, 683, 684, 687, 690, 696, 709, 711, 712, 714, 715, 718, 721, 722, 733, 734, 741], "apach": [16, 684], "incub": 16, "blob": [16, 153, 207, 208, 313, 314, 317, 318, 343, 366, 367, 370, 371, 373, 399, 428, 687, 696, 718, 721, 722], "master": [16, 207, 208, 219, 313, 314, 317, 318, 343, 346, 366, 367, 370, 371, 373, 428, 687, 738], "python": [16, 75, 148, 156, 158, 187, 249, 268, 292, 312, 365, 399, 447, 500, 565, 572, 583, 584, 639, 641, 645, 648, 668, 670, 672, 675, 678, 683, 687, 692, 698, 701, 707, 711, 712, 714, 715, 717, 720, 722, 726, 727, 737], "contrib": [16, 312, 365], "py": [16, 148, 153, 178, 210, 231, 232, 314, 316, 317, 318, 345, 367, 369, 370, 371, 399, 447, 565, 645, 649, 668, 672, 675, 683, 687, 692, 694, 695, 696, 702, 705, 709, 711, 712, 714, 715, 717, 718, 720, 721, 722, 729, 733, 736], "microsoft": [16, 399, 648, 649], "onnxruntim": [16, 231, 232, 243, 249, 256, 286, 292, 299, 321, 399, 422, 649, 667, 669, 682, 683, 688, 710, 728], "main": [16, 152, 191, 196, 214, 219, 271, 346, 397, 398, 399, 468, 469, 472, 598, 617, 618, 622, 645, 669, 672, 675, 687, 694, 696, 708, 717, 726, 729, 732], "tool": [16, 148, 309, 399, 565, 639, 648, 649, 687, 700, 704, 710, 713, 714, 715, 726, 727, 729], "arrai": [16, 43, 44, 148, 158, 264, 305, 316, 327, 369, 395, 405, 565, 583, 639, 737], "small": [16, 67, 68, 69, 70, 435, 492, 493, 494, 495, 646, 712, 713, 726, 732, 738, 741], "probabl": [16, 231, 232, 633, 732], "activationoper": 18, "onnx_quant": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40], "onnx_nod": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 87, 101, 111], "removableactivationoper": 18, "remov": [18, 43, 51, 57, 60, 74, 80, 83, 84, 85, 96, 98, 140, 201, 214, 318, 371, 450, 476, 482, 485, 499, 505, 508, 509, 510, 521, 523, 643, 687, 700, 704, 713, 720, 721, 726, 736], "qactivationoper": 18, "children": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 34, 35, 36, 38, 39, 159, 585], "initi": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 34, 35, 36, 38, 39, 42, 43, 44, 105, 116, 148, 158, 189, 210, 235, 236, 244, 247, 266, 278, 279, 287, 290, 344, 345, 362, 395, 428, 444, 536, 565, 583, 600, 628, 646, 651, 670, 686, 706, 726, 729, 735, 738], "qoper": [18, 34, 231, 232, 677, 710], "format": [18, 43, 54, 148, 165, 231, 232, 247, 248, 249, 290, 291, 292, 310, 316, 322, 362, 369, 444, 447, 455, 456, 479, 565, 596, 634, 648, 650, 651, 668, 670, 675, 677, 686, 687, 688, 689, 690, 712, 715, 727, 729, 732, 733], "float16activationoper": 18, "float16": [18, 21, 43, 612, 634, 670, 732], "argmaxoper": 19, "qargmaxoper": 19, "attentionoper": 20, "qattentionoper": 20, "qattent": 20, "binari": [21, 148, 320, 373, 565, 678, 686, 702, 705, 733], "binaryoper": 21, "binarydirect8bitoper": 21, "qbinaryoper": 21, "qbinari": 21, "float16binaryoper": 21, "concatoper": 22, "qconcatoper": 22, "qconcat": 22, "convoper": 23, "qconvoper": 23, "qlinearconv": 23, "direct8bit": 24, "direct8bitoper": 24, "qdirectoper": 24, "qdirect": 24, "embedlayernorm": 25, "embedlayernormalizationoper": 25, "qembedlayernormalizationoper": 25, "qembedlayernorm": 25, "gatheroper": 26, "qgatheroper": 26, "qgather": 26, "globalaveragepool": 27, "globalaveragepooloper": 27, "qglobalaveragepooloper": 27, "qlinearglobalaveragepool": 27, "gemmoper": 28, "qgemmoper": 28, "qgemm": 28, "lstmoper": 30, "matmuloper": 31, "qmatmuloper": 31, "qlinearmatmul": 31, "fusedmatmuloper": 31, "fusedmatmul": 31, "maxpooloper": 32, "qmaxpooloper": 32, "qmaxpool": 32, "batchnormalizationoper": 33, "batchnorm": [33, 62, 67, 121, 487, 492, 541, 645, 735], "normalizationoper": 33, "op_registri": 34, "op_typ": [34, 140, 141, 148, 226, 363, 400, 445, 450, 453, 470, 565, 595], "qop_registri": 34, "padoper": 35, "qpadoper": 35, "qpad": 35, "averagepool": 36, "pooloper": 36, "qpooloper": 36, "qlinearaveragepool": 36, "reduceoper": 37, "reduceminmaxoper": 37, "reducemin": 37, "reducemax": 37, "resizeoper": 38, "qresizeoper": 38, "qresiz": 38, "splitoper": 39, "qsplitoper": 39, "qsplit": 39, "unari": 40, "unaryoper": 40, "unarydirect8bitoper": 40, "q_config": [41, 165, 310, 649], "mode": [41, 42, 43, 45, 110, 158, 170, 256, 299, 316, 362, 369, 382, 389, 405, 444, 530, 570, 583, 591, 617, 622, 627, 636, 638, 639, 649, 650, 672, 682, 700, 704, 712, 713, 729, 731, 732, 738], "static": [41, 42, 47, 170, 176, 203, 232, 310, 362, 389, 428, 444, 455, 456, 466, 468, 470, 591, 622, 649, 650, 651, 672, 677, 682, 687, 690, 695, 696, 697, 698, 701, 707, 710, 718, 720, 721, 722, 730, 735, 738, 741], "quantization_param": 41, "op_types_to_quant": 41, "fallback_list": 41, "fp32": [41, 42, 44, 79, 131, 136, 143, 165, 172, 177, 231, 232, 235, 236, 278, 279, 309, 310, 320, 355, 362, 373, 391, 392, 394, 395, 400, 433, 437, 444, 468, 472, 504, 551, 556, 560, 572, 589, 596, 611, 631, 634, 638, 639, 644, 649, 651, 672, 679, 680, 685, 686, 687, 688, 697, 709, 710, 711, 712, 728, 729, 731, 732, 733, 734, 735, 736, 738, 740, 741], "add_qdq_pair_to_weight": [41, 231, 232, 729], "optypes_to_exclude_output_qu": [41, 231, 232, 729], "dedicated_qdq_pair": [41, 231, 232, 729], "smoothquant": [42, 165, 170, 171, 176, 389, 451, 591, 648, 685, 727, 732, 739], "onnxrt": [42, 43, 44, 247, 249, 256, 264, 290, 292, 299, 305, 320, 373, 421, 637, 649, 672, 688, 709, 729, 741], "get_quant_dequant_output": 42, "input_data": [42, 669], "output_data": 42, "loss": [42, 180, 189, 231, 232, 266, 311, 320, 335, 340, 348, 373, 612, 628, 667, 672, 673, 674, 675, 676, 685, 686, 687, 688, 698, 710, 712, 725, 726, 727, 729, 732, 735, 738, 740], "output": [42, 43, 44, 51, 54, 59, 74, 98, 105, 110, 148, 165, 171, 172, 192, 203, 204, 209, 223, 229, 231, 232, 235, 236, 269, 273, 278, 279, 309, 310, 313, 343, 366, 373, 374, 382, 395, 428, 476, 479, 484, 499, 523, 530, 565, 570, 572, 591, 595, 611, 612, 622, 628, 634, 635, 639, 645, 649, 650, 673, 674, 675, 677, 679, 681, 686, 687, 689, 698, 707, 708, 710, 715, 716, 720, 721, 722, 725, 726, 728, 729, 732, 733, 735, 736, 737, 738, 740], "numpi": [42, 43, 67, 68, 70, 105, 148, 264, 305, 316, 327, 369, 395, 492, 493, 495, 565, 678, 735, 737], "7": [42, 172, 178, 199, 231, 232, 384, 400, 405, 611, 651, 666, 678, 679, 687, 726, 729, 733, 735, 738, 741], "bit": [42, 44, 150, 165, 172, 231, 232, 391, 392, 394, 395, 405, 446, 611, 619, 648, 651, 667, 674, 688, 727, 729, 732, 735], "execut": [42, 43, 54, 152, 158, 178, 210, 211, 212, 231, 232, 345, 349, 351, 392, 427, 428, 429, 431, 479, 573, 583, 590, 594, 596, 597, 598, 605, 609, 610, 628, 631, 638, 639, 672, 673, 674, 687, 688, 692, 693, 700, 701, 707, 708, 709, 710, 714, 717, 725, 726, 729, 732, 734, 738, 741], "provid": [42, 43, 44, 102, 105, 110, 203, 235, 236, 264, 278, 279, 305, 311, 316, 335, 340, 348, 349, 369, 374, 388, 389, 391, 392, 394, 395, 400, 428, 530, 623, 628, 632, 634, 646, 648, 649, 650, 651, 666, 669, 672, 674, 675, 676, 682, 683, 685, 686, 687, 688, 689, 690, 694, 698, 701, 707, 708, 709, 715, 716, 726, 728, 729, 732, 735, 736, 738, 739, 740, 741], "make_sub_graph": 42, "opset": [42, 102, 104, 105, 232, 309, 310, 677], "ir_vers": 42, "thi": [42, 45, 86, 110, 132, 139, 143, 147, 153, 156, 158, 165, 172, 177, 180, 182, 188, 192, 195, 201, 203, 205, 207, 208, 209, 210, 214, 215, 216, 217, 219, 220, 221, 227, 231, 232, 235, 236, 246, 247, 248, 249, 250, 251, 252, 254, 264, 267, 273, 274, 278, 279, 289, 290, 291, 292, 293, 294, 295, 297, 305, 313, 316, 317, 318, 320, 329, 330, 332, 333, 334, 335, 340, 343, 345, 347, 348, 349, 352, 355, 366, 369, 370, 371, 373, 374, 384, 428, 432, 437, 446, 447, 511, 530, 552, 559, 560, 564, 567, 583, 584, 595, 596, 612, 627, 628, 638, 639, 643, 644, 645, 646, 649, 650, 651, 667, 668, 669, 670, 673, 674, 675, 677, 678, 679, 682, 684, 685, 686, 687, 688, 689, 690, 692, 693, 695, 696, 698, 700, 702, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 715, 716, 720, 721, 722, 726, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739], "quant_dequant_data": 42, "qtype": [42, 43, 405, 649], "3": [42, 44, 148, 158, 180, 199, 212, 232, 249, 264, 292, 305, 316, 369, 391, 392, 394, 395, 400, 447, 565, 583, 639, 645, 646, 648, 667, 668, 669, 670, 673, 675, 677, 679, 680, 683, 686, 687, 688, 690, 694, 698, 700, 704, 709, 714, 715, 717, 718, 720, 724, 726, 727, 728, 729, 732, 733, 734, 735, 737, 738, 741], "scheme": [42, 43, 44, 150, 161, 165, 172, 391, 392, 394, 395, 405, 595, 608, 611, 649, 650, 651, 669, 679, 698, 732, 738, 740], "sym": [42, 43, 44, 172, 405, 611, 650, 651, 679, 729, 732, 740], "dequant": [42, 43, 44, 51, 88, 91, 92, 93, 94, 96, 153, 165, 172, 395, 476, 513, 516, 517, 518, 519, 521, 572, 611, 639, 645, 650, 735, 736], "asym": [42, 43, 44, 150, 161, 165, 172, 391, 392, 394, 395, 405, 608, 611, 651, 679, 732, 740], "ortsmoothqu": 42, "fake": [42, 44, 113, 161, 170, 172, 176, 182, 389, 446, 533, 591, 608, 611, 687, 729, 732, 735], "channel": [42, 43, 44, 143, 170, 171, 172, 176, 177, 201, 204, 209, 231, 232, 260, 264, 302, 305, 343, 389, 392, 560, 591, 611, 634, 648, 649, 651, 682, 683, 690, 692, 697, 712, 726, 732, 737, 741], "For": [42, 44, 165, 172, 176, 180, 182, 186, 199, 203, 204, 207, 208, 219, 232, 249, 264, 292, 305, 317, 318, 320, 343, 346, 370, 371, 373, 374, 389, 391, 392, 394, 428, 611, 643, 645, 647, 649, 651, 673, 674, 675, 677, 679, 682, 690, 692, 693, 695, 698, 709, 710, 715, 726, 731, 732, 735, 736, 738, 740, 741], "more": [42, 148, 170, 176, 182, 207, 208, 264, 305, 343, 389, 565, 591, 612, 646, 647, 648, 650, 667, 668, 670, 673, 675, 677, 680, 682, 683, 685, 687, 688, 690, 698, 702, 705, 710, 715, 724, 725, 726, 731, 732, 735, 738, 739, 741], "detail": [42, 170, 176, 179, 203, 264, 305, 389, 591, 639, 640, 643, 648, 650, 651, 667, 668, 673, 679, 680, 681, 685, 686, 687, 688, 690, 698, 707, 715, 716, 726, 732, 733, 734, 735, 736, 738, 739], "pleas": [42, 152, 153, 170, 176, 198, 207, 208, 209, 217, 218, 219, 231, 232, 247, 248, 249, 252, 290, 291, 292, 295, 343, 345, 346, 373, 389, 428, 447, 591, 598, 645, 646, 647, 648, 649, 666, 667, 670, 674, 675, 677, 683, 685, 686, 688, 690, 691, 695, 698, 714, 715, 716, 726, 729, 731, 732, 733, 734, 735, 738, 739], "refer": [42, 152, 153, 170, 176, 198, 207, 208, 209, 217, 218, 219, 223, 231, 232, 247, 290, 313, 314, 320, 343, 345, 346, 366, 367, 373, 389, 428, 447, 591, 598, 645, 648, 649, 650, 666, 669, 670, 672, 674, 675, 677, 681, 683, 684, 686, 687, 688, 690, 695, 698, 709, 710, 712, 714, 715, 716, 724, 728, 730, 733, 737, 738], "accur": [42, 152, 170, 176, 218, 389, 591, 598, 619, 726, 732, 735], "effici": [42, 170, 176, 389, 591, 646, 648, 667, 669, 673, 690, 715, 725, 726, 727, 732, 735, 738], "post": [42, 97, 98, 152, 170, 176, 217, 232, 235, 236, 278, 279, 389, 428, 522, 523, 591, 598, 619, 643, 648, 649, 650, 672, 674, 675, 677, 682, 683, 690, 696, 707, 717, 726, 727, 730, 732, 735, 736, 738], "train": [42, 57, 80, 152, 170, 172, 176, 188, 211, 212, 215, 217, 218, 231, 232, 235, 236, 247, 249, 264, 274, 278, 279, 290, 292, 305, 306, 322, 345, 365, 389, 428, 482, 505, 591, 596, 598, 619, 631, 646, 648, 649, 650, 656, 670, 672, 673, 674, 677, 682, 688, 690, 696, 707, 712, 720, 725, 727, 730, 732, 734, 735, 738, 740], "larg": [42, 43, 170, 176, 218, 389, 591, 648, 669, 673, 687, 727, 730, 732, 735, 741], "languag": [42, 170, 176, 218, 313, 366, 389, 591, 643, 648, 677, 711, 727, 730, 732, 735], "2": [42, 43, 44, 54, 74, 105, 109, 158, 170, 172, 174, 176, 178, 180, 199, 205, 211, 212, 225, 231, 232, 248, 265, 291, 316, 318, 320, 345, 352, 369, 371, 373, 384, 389, 391, 392, 394, 395, 405, 432, 447, 479, 499, 529, 583, 591, 611, 639, 645, 648, 649, 667, 669, 670, 672, 673, 679, 682, 683, 684, 685, 686, 688, 711, 717, 718, 720, 721, 722, 724, 726, 727, 729, 730, 732, 733, 734, 735, 737, 738, 739], "spiq": [42, 170, 176, 389, 591, 735], "free": [42, 170, 176, 217, 235, 236, 278, 279, 389, 428, 591, 643, 696, 701, 709, 717, 724, 734, 735], "per": [42, 43, 44, 170, 172, 176, 178, 231, 232, 265, 389, 392, 395, 591, 611, 612, 633, 649, 651, 669, 715, 726, 731, 732, 741], "we": [42, 43, 67, 68, 70, 74, 86, 143, 158, 170, 176, 177, 178, 180, 203, 207, 214, 231, 232, 246, 265, 267, 289, 313, 316, 366, 369, 389, 399, 405, 435, 492, 493, 495, 499, 511, 560, 583, 591, 643, 645, 649, 650, 651, 668, 669, 672, 675, 677, 679, 685, 686, 687, 694, 695, 698, 702, 705, 707, 708, 710, 713, 720, 721, 722, 724, 725, 726, 728, 729, 730, 732, 733, 734, 735, 736, 738, 739], "onli": [42, 44, 54, 63, 70, 86, 109, 115, 143, 158, 164, 170, 172, 176, 177, 178, 191, 196, 200, 206, 213, 231, 232, 247, 265, 267, 271, 290, 310, 322, 343, 345, 356, 389, 395, 398, 400, 428, 438, 446, 447, 479, 488, 495, 511, 529, 535, 560, 583, 591, 610, 612, 619, 639, 649, 650, 651, 666, 667, 668, 669, 672, 673, 675, 678, 679, 685, 687, 688, 695, 708, 726, 727, 728, 729, 730, 735, 736, 738, 739, 740], "inplac": [42, 170, 389, 590, 591, 622], "mean": [42, 44, 170, 172, 205, 214, 231, 232, 260, 264, 302, 305, 318, 320, 343, 355, 371, 373, 389, 437, 591, 645, 650, 651, 669, 672, 675, 679, 686, 687, 693, 712, 726, 729, 730, 732, 735, 737, 738, 740, 741], "weight": [42, 43, 44, 60, 61, 122, 140, 141, 143, 148, 150, 153, 164, 165, 170, 171, 172, 177, 180, 198, 200, 204, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 220, 222, 231, 232, 310, 343, 345, 362, 373, 389, 391, 392, 394, 395, 400, 405, 428, 435, 444, 446, 450, 453, 485, 486, 542, 560, 565, 572, 591, 610, 611, 612, 619, 639, 640, 649, 650, 651, 667, 672, 674, 679, 681, 685, 687, 709, 720, 724, 726, 727, 728, 729, 730, 735, 736, 738, 739, 740], "chang": [42, 96, 143, 170, 177, 211, 212, 214, 215, 217, 218, 221, 231, 232, 345, 347, 389, 435, 521, 560, 591, 622, 639, 644, 650, 669, 675, 678, 684, 687, 690, 700, 701, 704, 707, 713, 726, 736, 737, 738], "you": [42, 158, 170, 231, 232, 245, 247, 288, 290, 345, 373, 389, 428, 583, 591, 612, 644, 645, 650, 668, 669, 670, 672, 675, 683, 684, 686, 688, 690, 692, 693, 695, 700, 704, 707, 708, 709, 710, 711, 712, 713, 715, 726, 729, 732, 733, 734, 735, 736, 739], "can": [42, 43, 44, 143, 153, 158, 170, 177, 195, 203, 204, 205, 210, 218, 219, 221, 231, 232, 235, 236, 246, 249, 264, 265, 267, 278, 279, 289, 292, 305, 316, 318, 320, 343, 345, 347, 369, 371, 373, 374, 384, 389, 395, 405, 428, 560, 583, 591, 612, 622, 628, 639, 645, 646, 648, 649, 650, 651, 666, 668, 669, 670, 672, 673, 674, 675, 677, 679, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 694, 695, 696, 698, 700, 701, 702, 704, 705, 707, 708, 710, 712, 713, 714, 715, 717, 724, 725, 726, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 741], "recov": [42, 170, 389, 589, 591, 611, 638, 639, 649, 674], "helper": [43, 45, 110, 116, 148, 165, 247, 248, 249, 263, 290, 291, 292, 304, 308, 309, 310, 382, 405, 530, 536, 565, 570, 595, 623, 637], "get_node_original_nam": 43, "origin": [43, 44, 140, 148, 159, 165, 171, 199, 203, 215, 223, 225, 232, 247, 264, 265, 290, 305, 329, 330, 332, 333, 334, 344, 345, 364, 395, 405, 433, 446, 450, 565, 585, 591, 611, 622, 634, 639, 644, 670, 695, 726, 729, 737, 738, 740], "simple_progress_bar": [43, 405], "total": [43, 210, 264, 305, 320, 345, 373, 405, 670, 672, 726, 732, 737, 741], "progress": [43, 197, 200, 213, 249, 292, 405, 701, 707, 709, 726, 729], "bar": [43, 249, 292, 405, 707, 727], "case": [43, 70, 74, 158, 172, 178, 232, 246, 263, 264, 265, 289, 304, 305, 311, 335, 340, 348, 384, 405, 495, 499, 583, 651, 668, 669, 673, 674, 675, 679, 681, 686, 691, 695, 707, 708, 709, 712, 718, 721, 722, 724, 726, 727, 729, 732, 733, 735, 737, 739, 740, 741], "where": [43, 158, 231, 232, 316, 320, 369, 373, 405, 446, 583, 639, 651, 667, 672, 673, 700, 704, 708, 735, 736], "tqdm": [43, 405, 687], "t": [43, 67, 68, 70, 143, 158, 177, 205, 231, 232, 264, 267, 305, 318, 371, 405, 492, 493, 495, 560, 583, 645, 649, 668, 672, 673, 675, 687, 688, 708, 713, 726, 729, 732, 738, 740], "dtype_to_nam": 43, "dtype_map": 43, "dtype": [43, 44, 102, 105, 231, 232, 250, 251, 260, 264, 293, 294, 302, 305, 395, 567, 611, 612, 619, 634, 648, 650, 651, 670, 672, 677, 679, 690, 712, 728, 729, 732, 735, 736, 737, 740], "its": [43, 60, 96, 148, 153, 203, 212, 215, 217, 223, 232, 243, 249, 264, 286, 292, 305, 308, 314, 315, 345, 352, 367, 368, 432, 485, 521, 565, 643, 670, 673, 684, 686, 688, 698, 700, 704, 707, 708, 726, 732, 734, 737, 738], "string": [43, 45, 116, 148, 152, 156, 158, 178, 187, 189, 191, 195, 196, 203, 205, 210, 219, 220, 221, 223, 228, 231, 232, 249, 266, 271, 292, 306, 311, 313, 316, 322, 323, 324, 326, 327, 335, 340, 343, 344, 345, 346, 347, 348, 366, 369, 378, 382, 405, 536, 565, 570, 572, 583, 584, 598, 606, 631, 636, 639, 686, 737], "represent": [43, 156, 584, 643, 645, 667, 674, 726, 729], "quanttyp": [43, 446], "repres": [43, 205, 209, 210, 219, 220, 223, 249, 254, 292, 297, 316, 318, 320, 369, 371, 373, 391, 392, 394, 395, 643, 651, 667, 670, 677, 715, 726, 729, 730, 738], "make_quant_nod": 43, "axi": [43, 232], "make": [43, 105, 143, 177, 195, 205, 210, 219, 221, 245, 288, 343, 345, 347, 560, 639, 643, 649, 650, 666, 668, 669, 679, 686, 687, 695, 700, 704, 707, 709, 726, 729, 730, 731, 732, 734, 735, 738], "quantizelinear": 43, "make_dquant_nod": 43, "dequantizelinear": 43, "is_b_transpos": [43, 405], "inuput": [43, 405], "b": [43, 74, 172, 247, 290, 405, 499, 596, 639, 644, 667, 670, 686, 726, 732, 735, 738], "transpos": [43, 73, 209, 260, 264, 305, 309, 343, 405, 498, 732, 737], "split_shared_bia": 43, "share": [43, 44, 82, 98, 109, 141, 172, 395, 453, 507, 523, 529, 611, 678, 679, 732, 735, 738], "float_to_float16": 43, "float_to_bfloat16": 43, "bfloat16": [43, 612, 688, 690, 698, 731], "cast_tensor": 43, "is_large_model": 43, "tensorproto": [43, 105], "raw": [43, 178, 248, 252, 255, 291, 295, 298, 355, 437, 686, 711, 738], "remove_init_from_model_input": 43, "collate_pr": 43, "result": [43, 148, 153, 165, 260, 264, 302, 305, 313, 316, 317, 318, 320, 366, 369, 370, 371, 373, 408, 428, 435, 565, 595, 628, 638, 639, 643, 646, 648, 669, 672, 673, 675, 682, 684, 686, 687, 695, 696, 707, 708, 711, 715, 716, 717, 718, 724, 726, 727, 729, 732, 734, 735, 736, 737, 738, 739, 741], "quantize_data_with_scale_zero": 43, "zero_point": [43, 44, 395], "point": [43, 44, 172, 260, 302, 317, 318, 327, 352, 370, 371, 392, 395, 405, 432, 611, 639, 686, 707, 712, 713, 729, 732, 735, 737, 738], "To": [43, 316, 369, 384, 405, 573, 594, 596, 597, 598, 605, 609, 610, 644, 648, 650, 651, 668, 670, 672, 675, 688, 691, 694, 700, 702, 704, 705, 709, 713, 726, 728, 731, 732, 733, 735, 738, 740], "pack": [43, 61, 405, 486], "comput": [43, 44, 105, 153, 165, 313, 314, 317, 318, 320, 366, 367, 370, 371, 373, 391, 392, 394, 395, 405, 595, 612, 628, 639, 667, 669, 674, 677, 686, 687, 688, 690, 701, 710, 726, 727, 729, 732, 735, 738], "linear": [43, 152, 161, 164, 165, 172, 176, 201, 203, 204, 209, 214, 223, 226, 231, 232, 343, 405, 598, 608, 611, 645, 673, 677, 687, 726, 732, 735, 738], "transform": [43, 50, 143, 145, 146, 147, 152, 162, 164, 217, 247, 248, 249, 250, 251, 252, 254, 256, 258, 290, 291, 292, 293, 294, 295, 297, 299, 301, 312, 365, 405, 475, 560, 562, 563, 564, 567, 590, 595, 598, 610, 619, 645, 646, 648, 667, 670, 673, 674, 675, 676, 680, 685, 687, 690, 695, 696, 697, 698, 710, 718, 721, 722, 726, 727, 731, 732, 735, 736, 738, 740], "when": [43, 54, 64, 70, 148, 156, 158, 180, 204, 210, 215, 223, 231, 232, 247, 248, 256, 264, 290, 291, 299, 305, 314, 344, 345, 367, 405, 428, 479, 489, 495, 565, 583, 584, 612, 628, 643, 646, 650, 668, 669, 670, 687, 698, 700, 701, 704, 708, 709, 712, 713, 714, 716, 720, 726, 729, 732, 735, 737, 738], "uint8": [43, 172, 260, 302, 316, 364, 369, 405, 446, 611, 649, 670, 679, 728, 729, 737, 740], "rmin": [43, 405, 729], "rmax": [43, 405, 729], "m": [43, 153, 172, 207, 208, 231, 232, 343, 405, 611, 644, 673, 683, 690, 692, 695, 698, 702, 705, 715, 726, 741], "max": [43, 104, 143, 172, 177, 196, 199, 231, 232, 264, 305, 317, 318, 352, 370, 371, 405, 432, 560, 572, 611, 639, 648, 672, 683, 687, 710, 712, 726, 729, 732, 735, 737, 738], "ab": [43, 152, 172, 198, 217, 218, 345, 405, 598, 611, 619, 726, 729, 735], "np": [43, 264, 305, 352, 395, 432, 675, 717, 735, 737, 738], "calculate_scale_zp": 43, "quantize_rang": [43, 405], "calcul": [43, 60, 165, 180, 198, 207, 223, 232, 250, 251, 293, 294, 317, 318, 343, 345, 355, 370, 371, 437, 485, 567, 629, 639, 667, 670, 686, 687, 698, 710, 724, 726, 729, 732, 734, 735, 738, 740], "quantize_data": [43, 405], "add": [43, 53, 64, 109, 119, 148, 191, 223, 231, 232, 247, 249, 271, 290, 292, 344, 362, 405, 444, 478, 489, 529, 539, 565, 639, 644, 645, 648, 651, 669, 670, 675, 677, 679, 686, 687, 702, 705, 709, 710, 717, 720, 721, 734, 735, 736, 738, 739], "necessari": [43, 219, 405, 643, 646, 650, 689, 708, 726, 734, 738], "intermedi": [43, 153, 189, 231, 232, 266, 405, 645, 682, 729], "full": [43, 172, 247, 248, 249, 290, 291, 292, 405, 634, 639, 648, 667, 670, 672, 678, 684, 708, 713, 726, 732, 733], "equat": [43, 318, 320, 371, 373, 405, 729, 735], "r": [43, 143, 177, 405, 560, 672, 683, 708, 709, 711, 712, 714, 715, 729, 741], "": [43, 44, 105, 143, 148, 158, 177, 203, 204, 205, 209, 210, 211, 212, 215, 217, 218, 223, 226, 228, 229, 231, 232, 246, 249, 263, 264, 265, 267, 269, 289, 292, 304, 305, 318, 343, 345, 371, 373, 374, 378, 392, 405, 428, 560, 565, 572, 583, 600, 611, 612, 636, 639, 643, 644, 646, 650, 651, 668, 672, 673, 675, 677, 679, 682, 687, 688, 695, 698, 700, 704, 707, 710, 712, 715, 725, 726, 727, 728, 729, 732, 733, 734, 735, 738, 739, 740, 741], "q": [43, 44, 107, 109, 131, 405, 527, 529, 551, 732, 735], "z": [43, 405, 595, 667, 668, 673, 735], "real": [43, 250, 267, 293, 405, 567, 650, 667, 675, 709, 716, 727, 729], "quantize_data_per_channel": 43, "dequantize_data_with_scale_zero": 43, "tensor_valu": 43, "scale_valu": 43, "zo_valu": 43, "dequantize_data": 43, "valueinfo": 43, "tensor_nam": [43, 148, 158, 159, 565, 583, 585], "new_dtyp": 43, "cast": [43, 51, 476, 731, 737], "info": [43, 165, 172, 187, 207, 208, 223, 262, 267, 272, 343, 378, 572, 591, 595, 634, 635, 639, 645, 668, 672, 689, 717, 722], "quantizedvalu": 43, "new_quantized_nam": 43, "scale_nam": 43, "zero_point_nam": 43, "quantized_value_typ": 43, "quint8": 43, "linearli": 43, "quantizediniti": 43, "quantized_data": 43, "quantizationmod": 43, "quantizedvaluetyp": 43, "quantformat": 43, "quantize_nparrai": 43, "arr": [43, 572, 639], "low": [43, 172, 235, 236, 250, 251, 278, 279, 293, 294, 311, 321, 348, 374, 567, 649, 650, 666, 667, 670, 675, 687, 688, 712, 727, 729, 732, 735, 738], "high": [43, 250, 251, 293, 294, 567, 670, 672, 683, 712, 727, 738], "attribute_to_kwarg": 43, "attribut": [43, 83, 104, 105, 148, 165, 203, 214, 228, 229, 232, 508, 565, 612, 639, 649, 669, 679, 681, 687, 728, 740], "make_nod": 43, "find_by_nam": [43, 405], "item_list": [43, 405], "find": [43, 67, 68, 70, 105, 148, 226, 320, 327, 352, 373, 405, 432, 492, 493, 495, 565, 639, 649, 672, 685, 693, 700, 704, 707, 708, 710, 712, 726, 732, 734, 735, 736, 738], "item": [43, 223, 229, 231, 232, 263, 304, 344, 362, 405, 444, 572, 600, 667, 675, 726, 735, 738], "trt_env_setup": 43, "environ": [43, 178, 265, 643, 648, 666, 700, 704, 707, 715, 718, 720, 721, 722, 738], "variabl": [43, 156, 178, 220, 231, 232, 249, 265, 292, 352, 432, 446, 584, 683, 726, 738], "tensorrt": [43, 667, 688, 729], "to_numpi": 43, "infer_shap": 43, "in_mp": 43, "int_max": 43, "31": [43, 685, 741], "auto_merg": 43, "guess_output_rank": 43, "verbos": [43, 310, 352, 432], "base_dir": 43, "shape": [43, 44, 105, 148, 205, 250, 251, 260, 264, 293, 294, 302, 305, 316, 369, 395, 405, 565, 567, 648, 670, 679, 680, 687, 709, 710, 732, 735, 737], "weightonli": 44, "get_blob_s": 44, "group_siz": [44, 150, 161, 165, 172, 391, 392, 394, 395, 446, 608, 611, 619, 732], "has_zp": 44, "blob_siz": 44, "how": [44, 158, 172, 188, 198, 205, 211, 212, 217, 218, 231, 232, 264, 305, 306, 343, 395, 583, 611, 644, 645, 647, 649, 669, 670, 673, 674, 675, 681, 686, 687, 701, 702, 705, 706, 707, 709, 720, 721, 722, 726, 727, 729, 735, 737, 738, 739, 740], "mani": [44, 172, 373, 395, 428, 611, 668, 669, 683, 732, 738, 740], "element": [44, 172, 180, 207, 208, 223, 245, 288, 316, 343, 369, 395, 567, 611, 639, 670, 682, 686, 726, 732, 735], "one": [44, 109, 110, 115, 158, 165, 172, 178, 205, 209, 214, 217, 218, 219, 221, 264, 274, 305, 313, 316, 320, 322, 343, 346, 347, 366, 369, 373, 395, 529, 530, 535, 583, 595, 611, 612, 646, 649, 667, 673, 674, 675, 679, 682, 683, 686, 687, 688, 690, 691, 695, 696, 698, 700, 701, 704, 707, 708, 709, 712, 713, 714, 715, 717, 724, 725, 726, 728, 729, 730, 732, 733, 735, 737, 738], "zp": [44, 172, 395, 611, 735], "make_matmul_weight_only_nod": [44, 395], "weight_shap": [44, 395], "num_bit": [44, 113, 161, 165, 172, 391, 392, 394, 395, 533, 608, 735], "k_block": [44, 395], "q_weight": [44, 395], "accuracy_level": [44, 391, 392, 394, 395, 400], "matmulfpq4": [44, 395], "accuraci": [44, 178, 180, 223, 231, 232, 235, 236, 278, 279, 306, 311, 320, 335, 340, 348, 373, 374, 384, 391, 392, 394, 395, 428, 433, 447, 612, 628, 636, 645, 648, 650, 651, 667, 669, 670, 672, 674, 675, 676, 677, 686, 687, 698, 707, 709, 716, 717, 720, 721, 724, 725, 726, 727, 728, 732, 733, 734, 735, 736, 739, 740, 741], "level": [44, 182, 203, 391, 392, 394, 395, 433, 447, 635, 643, 717, 735, 738], "unset": [44, 391, 392, 394, 395], "jbla": [44, 391, 392, 394, 395], "kernel": [44, 176, 231, 232, 391, 392, 394, 395, 649, 650, 738], "fp16": [44, 172, 232, 362, 391, 392, 394, 395, 444, 729], "4": [44, 54, 150, 161, 165, 172, 178, 199, 205, 214, 231, 232, 256, 259, 260, 264, 299, 302, 305, 313, 314, 316, 366, 367, 369, 391, 392, 394, 395, 398, 400, 446, 447, 479, 608, 611, 619, 643, 648, 649, 651, 666, 675, 676, 679, 682, 683, 686, 687, 695, 715, 717, 721, 726, 729, 732, 735, 737, 738, 741], "matmulnbit": [44, 395], "new_init": [44, 395], "matmul_weight_only_nod": [44, 395], "quant_tensor": [44, 395, 611], "32": [44, 150, 172, 201, 391, 392, 394, 395, 400, 446, 611, 619, 675, 681, 732, 741], "ratio": [44, 143, 177, 205, 210, 223, 231, 232, 260, 264, 302, 305, 345, 394, 395, 560, 670, 685, 687, 710, 726, 737, 741], "group": [44, 172, 220, 330, 391, 392, 394, 395, 611, 648, 682, 726, 732, 736, 737, 738, 741], "clip": [44, 172, 391, 394, 395, 611, 732, 735], "qdq_tensor": [44, 395], "quant": [44, 148, 165, 172, 231, 232, 362, 388, 391, 392, 394, 395, 397, 400, 444, 455, 456, 466, 470, 565, 611, 645, 668, 685, 687, 729], "pad_tensor": [44, 395], "rowi": [44, 395], "so": [44, 105, 180, 264, 305, 395, 446, 622, 645, 649, 672, 678, 682, 688, 693, 695, 711, 712, 713, 729, 731, 732, 735, 736, 737, 739], "divis": [44, 395], "pade": [44, 395], "rtn_quantiz": [44, 172, 394], "weight_config": [44, 150, 152, 164, 172, 386, 391, 392, 394, 596, 598, 610], "round": [44, 143, 172, 177, 394, 400, 560, 619, 648, 727, 729, 732, 735], "nearst": [44, 172, 394], "method": [44, 141, 143, 156, 158, 165, 172, 195, 220, 231, 232, 240, 245, 246, 247, 249, 256, 264, 267, 283, 288, 289, 290, 292, 299, 305, 326, 327, 328, 362, 391, 392, 394, 444, 446, 453, 560, 573, 583, 584, 594, 595, 596, 597, 598, 605, 609, 610, 612, 631, 632, 634, 635, 645, 646, 648, 667, 668, 669, 670, 672, 673, 674, 686, 687, 725, 726, 729, 731, 732, 735, 737, 738], "modelproto": [44, 308, 374, 386, 389, 391, 392, 394, 395, 397, 398, 405, 689], "onnxmodel": [44, 381, 386, 388, 389, 391, 392, 394, 395, 404, 421], "fc2": [44, 165, 172, 391, 392, 394, 611], "rtn": [44, 165, 397, 400, 470, 573, 594, 596, 597, 598, 605, 610, 617, 619, 668, 730, 732], "get_weight_scal": 44, "apply_awq_scal": 44, "absorb_pair": 44, "output_dict": 44, "appli": [44, 113, 126, 127, 128, 131, 133, 137, 148, 161, 164, 188, 214, 216, 274, 314, 367, 391, 392, 394, 397, 468, 533, 546, 547, 548, 551, 553, 557, 565, 573, 594, 596, 597, 598, 605, 608, 609, 610, 617, 643, 650, 651, 687, 690, 692, 698, 707, 711, 712, 717, 725, 726, 729, 731, 734, 735, 738, 739, 740], "salient": [44, 172, 726, 732], "apply_awq_clip": 44, "mse": [44, 165, 172, 231, 232, 312, 320, 354, 365, 373, 392, 400, 428, 436, 639, 672, 686, 712, 728, 732, 733], "prepare_input": [44, 395], "n_sampl": [44, 150, 165, 172, 596], "sampl": [44, 77, 165, 172, 180, 231, 232, 240, 245, 247, 248, 249, 260, 264, 283, 288, 290, 291, 292, 302, 305, 320, 327, 352, 373, 432, 502, 567, 596, 646, 669, 670, 676, 682, 708, 729, 732, 735, 737, 738, 740, 741], "session": [44, 148, 246, 289, 382, 395, 565, 570, 687, 736], "awq_quant": [44, 172, 391], "enable_auto_scal": [44, 172, 391, 400, 732], "enable_mse_search": [44, 172, 391, 400, 732], "awar": [44, 150, 153, 172, 188, 232, 274, 322, 343, 391, 435, 628, 649, 650, 651, 667, 674, 675, 677, 682, 707, 717, 725, 727, 732, 738], "awq": [44, 172, 397, 400, 611, 730, 732], "enabl": [44, 109, 153, 172, 210, 231, 232, 345, 529, 612, 650, 651, 675, 683, 688, 690, 692, 695, 696, 698, 709, 711, 712, 714, 717, 726, 727, 735, 738], "gptq": [44, 172, 397, 400, 573, 594, 596, 597, 605, 609, 610, 619, 668, 685, 730, 732], "w": [44, 152, 264, 305, 598, 726, 735, 737], "h": [44, 231, 232, 264, 305, 675, 715, 716, 720, 721, 722, 737], "blocksiz": [44, 392, 400], "percdamp": [44, 392, 400, 619, 732], "01": [44, 180, 231, 232, 391, 392, 400, 619, 685, 687, 728, 732, 738, 740, 741], "actord": [44, 392, 400, 732], "perchannel": [44, 392, 400], "hessian": [44, 153, 392, 435, 732, 738], "matrix": [44, 373, 428, 648, 698, 739], "percent": 44, "averag": [44, 317, 318, 320, 370, 371, 373, 392, 686, 687, 732, 738, 741], "diagon": [44, 392, 732], "dampen": 44, "rearrang": [44, 217, 392, 726, 732], "consid": [44, 148, 320, 373, 565, 643, 667, 668, 673, 708, 738], "diag": 44, "error": [44, 105, 153, 158, 172, 320, 355, 373, 392, 437, 583, 596, 635, 672, 686, 691, 712, 713, 716, 732, 735, 738], "gptq_quantiz": [44, 172, 392], "get_ops_recurs": 45, "prefix": [45, 148, 151, 158, 159, 163, 165, 178, 565, 583, 585, 611, 690, 695, 736], "graph_info": 45, "templateadaptor": 45, "tampl": 45, "dictionari": [45, 67, 68, 70, 148, 151, 153, 158, 165, 172, 195, 226, 228, 229, 231, 232, 263, 304, 316, 323, 326, 328, 369, 405, 492, 493, 495, 565, 572, 583, 591, 595, 627, 639], "yaml": [45, 223, 228, 229, 232, 235, 236, 247, 249, 265, 278, 279, 290, 292, 306, 311, 322, 323, 324, 326, 335, 340, 348, 349, 455, 638, 639, 649, 651, 681, 686, 687, 724, 728, 736, 737], "file": [45, 105, 148, 156, 158, 159, 165, 175, 186, 192, 219, 223, 228, 231, 232, 235, 236, 247, 248, 249, 252, 263, 264, 270, 273, 278, 279, 290, 291, 292, 295, 304, 305, 306, 311, 316, 322, 323, 324, 326, 335, 340, 344, 346, 348, 349, 369, 374, 384, 411, 412, 416, 428, 565, 572, 583, 584, 585, 589, 591, 638, 639, 644, 646, 649, 650, 651, 675, 678, 681, 684, 686, 687, 689, 693, 702, 705, 706, 707, 708, 710, 711, 712, 713, 715, 716, 720, 721, 722, 724, 728, 729, 732, 736, 737], "pytorchadaptor": 45, "api": [45, 70, 75, 110, 152, 275, 311, 316, 348, 361, 362, 369, 373, 428, 443, 444, 447, 495, 500, 530, 572, 598, 639, 645, 648, 652, 654, 658, 661, 664, 672, 677, 682, 683, 687, 692, 696, 697, 698, 714, 715, 719, 733, 734, 738, 742], "pytorch_ipexadaptor": 45, "intel": [45, 191, 207, 208, 219, 268, 271, 307, 312, 319, 320, 343, 346, 354, 360, 365, 372, 373, 406, 428, 436, 442, 572, 641, 643, 644, 646, 647, 649, 650, 651, 667, 670, 671, 673, 674, 676, 677, 679, 680, 684, 685, 688, 689, 690, 695, 697, 698, 709, 710, 711, 712, 714, 715, 724, 725, 726, 727, 729, 731, 732, 733, 735, 736, 738, 739, 740, 741], "extens": [45, 156, 158, 572, 583, 584, 639, 646, 648, 649, 668, 679, 682, 683, 685, 687, 688, 689, 691, 696, 697, 698, 702, 705, 706, 710, 726, 727, 729, 732, 735, 738, 739, 740], "ipex": [45, 160, 165, 231, 232, 589, 595, 638, 682, 685, 687, 688, 692, 696, 697, 735], "pytorch_fxadaptor": 45, "fx": [45, 165, 231, 356, 438, 682, 688, 696, 697, 711, 727, 729, 731], "graph": [45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 112, 113, 114, 117, 130, 132, 136, 139, 142, 143, 145, 146, 147, 148, 203, 246, 289, 311, 375, 382, 427, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 532, 533, 534, 537, 550, 552, 556, 559, 560, 562, 563, 564, 565, 570, 645, 649, 670, 673, 675, 681, 689, 690, 709, 712, 729, 730, 731, 736], "pytorchweightonlyadaptor": 45, "querybackendcap": [46, 649, 650], "defin": [46, 86, 153, 182, 195, 196, 203, 205, 210, 211, 212, 217, 218, 219, 220, 221, 231, 232, 235, 236, 278, 279, 323, 324, 326, 327, 328, 335, 340, 343, 344, 345, 347, 374, 399, 428, 511, 627, 628, 638, 643, 646, 649, 650, 669, 670, 673, 674, 679, 682, 686, 687, 708, 725, 726, 729, 732, 734, 735, 736, 738, 740], "interfac": [46, 86, 113, 228, 311, 335, 340, 348, 349, 511, 533, 573, 594, 596, 597, 598, 605, 609, 610, 631, 682, 687, 698, 716, 729, 733], "each": [46, 141, 148, 153, 158, 165, 172, 223, 231, 232, 245, 249, 252, 260, 264, 288, 292, 295, 302, 305, 314, 316, 317, 318, 355, 367, 369, 370, 371, 437, 453, 565, 567, 583, 595, 611, 639, 644, 649, 650, 651, 668, 670, 672, 673, 674, 679, 687, 692, 698, 701, 707, 715, 717, 724, 726, 730, 732, 734, 736, 737, 738, 739], "adapt": [46, 643, 650, 670, 698, 727], "should": [46, 55, 115, 116, 158, 188, 201, 203, 214, 231, 232, 235, 236, 245, 247, 249, 264, 269, 278, 279, 288, 290, 292, 305, 310, 314, 367, 373, 374, 428, 447, 480, 535, 536, 583, 612, 628, 639, 645, 646, 649, 650, 651, 670, 673, 675, 686, 687, 693, 702, 705, 707, 709, 710, 724, 726, 729, 732, 737, 738, 740], "implement": [46, 110, 143, 147, 150, 158, 235, 236, 242, 245, 246, 247, 249, 278, 279, 285, 288, 289, 290, 292, 313, 366, 374, 384, 428, 435, 530, 560, 564, 573, 583, 594, 596, 597, 598, 605, 609, 610, 628, 651, 669, 670, 686, 687, 698, 708, 726, 729, 732, 733, 736, 738, 740], "inherit": [46, 188, 189, 215, 216, 221, 231, 244, 264, 266, 274, 287, 305, 345, 347, 573, 594, 596, 597, 598, 605, 609, 610, 623, 646, 649, 650, 670], "own": [46, 74, 158, 245, 264, 288, 305, 384, 499, 583, 646, 650, 669, 670, 682, 686, 709, 713, 724, 732, 734, 739], "tensorflowadaptor": [47, 456], "stock": [47, 456, 696, 735], "spr": [47, 456], "tensorflow_itexadaptor": [47, 456], "itex": [47, 109, 231, 232, 309, 456, 529, 688, 729, 735], "tensorflowqueri": [47, 456, 649], "local_config_fil": [47, 455, 456], "performance_onli": [47, 48, 49, 107, 131, 136, 147, 231, 456, 473, 474, 527, 551, 556, 564, 687], "itex_mod": [47, 48, 89, 107, 131, 136, 456, 473, 514, 527, 551, 556], "quant_mod": [47, 362, 444, 456, 650, 651], "graphconvert": [48, 473], "qt_config": [48, 473], "recip": [48, 203, 231, 232, 311, 348, 473, 648, 687, 730, 732, 735, 738], "int8_sequ": [48, 473], "fp32_op": [48, 50, 107, 473, 475, 527], "bf16_op": [48, 50, 107, 473, 475, 527, 650, 731], "data_load": [48, 49, 473, 474, 649], "calib_func": [48, 150, 165, 172, 428, 473, 611, 731], "fake_qu": [48, 88, 107, 131, 136, 473, 513, 527, 551, 556], "qdq_enabl": [48, 473], "new_api": [48, 49, 71, 72, 77, 79, 92, 99, 131, 136, 143, 473, 474, 496, 497, 502, 504, 517, 524, 551, 556, 560], "use_bf16": [48, 49, 231, 473, 474, 728], "without": [49, 90, 148, 199, 215, 264, 305, 345, 364, 446, 474, 515, 565, 643, 673, 675, 687, 698, 709, 712, 726, 727, 728, 738, 739], "graphconverterwithoutcalib": [49, 474], "recover_config": [49, 474], "rewrit": [50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 106, 107, 108, 109, 200, 475, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529], "bf16convert": [50, 475, 731], "rerewrit": [51, 476], "dequantizecastoptim": [51, 476], "b16": [51, 476], "dequantize_cast_optim": [52, 87, 111, 477, 512], "biasadd": [53, 59, 64, 66, 109, 478, 484, 489, 491, 529, 679], "convertaddtobiasaddoptim": [53, 478], "conv2d": [53, 59, 60, 61, 65, 66, 71, 125, 135, 143, 152, 470, 478, 484, 485, 486, 490, 491, 496, 545, 555, 560, 598, 650, 651, 672, 677, 679, 712, 735, 736, 738], "addv2": [53, 69, 478, 494, 679], "layout": [54, 479], "convertlayoutoptim": [54, 479], "convers": [54, 55, 232, 322, 479, 480, 644, 649, 650, 687, 688, 729, 731, 735], "optim": [54, 74, 75, 79, 80, 116, 118, 148, 190, 193, 194, 195, 197, 200, 203, 212, 217, 228, 231, 232, 268, 274, 311, 312, 328, 348, 352, 365, 432, 479, 499, 500, 504, 505, 536, 538, 565, 628, 629, 636, 639, 646, 648, 666, 668, 672, 673, 674, 675, 679, 680, 682, 683, 685, 687, 689, 690, 692, 694, 695, 698, 701, 709, 712, 713, 714, 716, 718, 727, 728, 729, 731, 732, 734, 735, 736, 738, 740], "nchw": [54, 260, 479], "nhwc": [54, 260, 479], "It": [54, 158, 172, 185, 188, 192, 205, 235, 236, 273, 278, 279, 318, 320, 327, 343, 348, 355, 371, 373, 374, 428, 433, 437, 479, 583, 596, 611, 622, 628, 649, 650, 651, 667, 672, 673, 687, 693, 696, 701, 707, 708, 709, 710, 712, 713, 715, 726, 729, 732, 733, 734, 738, 740], "exist": [54, 178, 229, 265, 382, 479, 570, 572, 639, 677, 686, 694, 738], "abov": [54, 479, 649, 650, 651, 673, 709, 710, 712, 715, 726, 729, 735, 738], "graph_def": [54, 140, 141, 148, 309, 374, 382, 427, 428, 450, 453, 479, 565, 570], "leakyrelu": [55, 480, 735], "convertleakyreluoptim": [55, 480], "below": [55, 66, 74, 231, 232, 349, 373, 399, 428, 480, 491, 499, 644, 645, 648, 649, 650, 651, 669, 672, 673, 675, 681, 686, 690, 692, 700, 701, 704, 707, 710, 715, 724, 725, 726, 728, 729, 732, 734, 735, 736, 738, 739], "subgraph": [55, 66, 105, 163, 480, 491, 730, 738], "mul": [55, 65, 66, 69, 172, 176, 480, 490, 491, 494, 677, 732, 735], "maximum": [55, 172, 180, 205, 210, 231, 232, 247, 264, 290, 305, 314, 345, 352, 367, 382, 432, 480, 570, 651, 667, 670, 672, 687, 726, 729, 735, 737], "note": [55, 156, 180, 209, 316, 356, 369, 438, 480, 573, 584, 594, 596, 597, 598, 605, 609, 610, 646, 648, 650, 651, 668, 669, 672, 675, 677, 679, 683, 685, 687, 692, 695, 700, 704, 707, 709, 713, 715, 717, 726, 729, 732, 735, 736, 738, 739, 740], "coeffici": [55, 220, 480, 726], "less": [55, 148, 165, 231, 232, 480, 572, 596, 611, 639, 666, 673, 687, 714, 726], "than": [55, 148, 247, 264, 290, 305, 480, 572, 596, 612, 639, 646, 648, 666, 670, 681, 712, 720, 724, 725, 726, 729, 732, 734, 737, 738], "valid": [55, 67, 68, 105, 185, 210, 213, 223, 231, 232, 249, 292, 316, 344, 345, 369, 382, 480, 492, 493, 570, 646, 648, 649, 670, 672, 673, 676, 679, 682, 684, 687, 698, 712, 726, 729, 732, 733], "nan": [56, 481], "random": [56, 148, 172, 187, 195, 231, 232, 260, 264, 302, 305, 312, 328, 352, 354, 365, 432, 436, 481, 572, 639, 646, 687, 726, 728, 737, 740], "convertnantorandom": [56, 481], "const": [56, 57, 63, 64, 67, 68, 70, 82, 98, 481, 482, 488, 489, 492, 493, 495, 507, 523], "consist": [56, 63, 481, 488, 644, 645, 668, 715, 735, 738], "placehold": [57, 245, 288, 482, 567, 668], "convertplaceholdertoconst": [57, 482], "dilat": [58, 483], "contract": [58, 483], "dilatedcontract": [58, 483], "spacetobatchnd": [58, 483], "batchtospacend": [58, 483], "pattern": [58, 59, 61, 78, 96, 107, 108, 109, 131, 136, 165, 195, 196, 197, 198, 200, 203, 204, 210, 211, 212, 213, 215, 217, 218, 220, 228, 231, 232, 249, 292, 312, 333, 334, 336, 341, 345, 362, 365, 444, 483, 484, 486, 503, 521, 527, 528, 529, 551, 556, 649, 668, 670, 679, 682, 687, 708, 725, 728, 735, 738, 741], "inject": [59, 484, 687], "dummi": [59, 203, 250, 251, 293, 294, 320, 373, 484, 567, 648, 670, 680, 686, 687, 709], "injectdummybiasaddoptim": [59, 484], "fusion": [59, 61, 70, 78, 109, 126, 127, 128, 131, 132, 133, 137, 484, 486, 495, 503, 529, 546, 547, 548, 551, 552, 553, 557, 645, 649, 679], "expanddim": [60, 485], "expanddimsoptim": [60, 485], "next": [60, 240, 283, 447, 485, 567, 646, 650, 651, 669, 728, 732, 738], "fetch": [61, 165, 175, 240, 283, 486, 567, 650, 670, 720, 721, 722], "reshap": [61, 67, 68, 73, 171, 486, 492, 493, 498, 591, 735], "fetchweightfromreshapeoptim": [61, 486], "handl": [61, 148, 170, 176, 185, 486, 565, 591, 635, 645, 647, 668, 669, 715, 735], "fold": [62, 63, 165, 172, 310, 400, 470, 487, 488, 610, 611, 679, 732, 735], "foldbatchnormnodesoptim": [62, 487], "graphfoldconstantoptim": [63, 488], "sequenc": [63, 105, 172, 204, 207, 208, 231, 232, 247, 263, 264, 290, 304, 305, 314, 318, 343, 367, 371, 488, 600, 649, 670, 679, 726, 732, 737], "self": [63, 165, 172, 203, 231, 232, 384, 488, 611, 612, 649, 650, 669, 670, 682, 686, 709, 734, 736, 738], "supported_op_typ": [63, 488], "fusebiasaddandaddoptim": [64, 489], "second": [64, 158, 204, 231, 232, 247, 290, 433, 489, 583, 639, 672, 687, 700, 704, 708, 720, 721, 732, 735, 738, 740], "columnwis": [65, 490], "fusecolumnwisemuloptim": [65, 490], "depthwiseconv2dn": [65, 71, 125, 135, 490, 496, 545, 555, 679], "math": [66, 491, 729], "fuseconvwithmathoptim": [66, 491], "elimin": [66, 491, 714], "sub": [66, 165, 178, 203, 265, 491, 595, 646, 668, 738], "realdiv": [66, 69, 491, 494], "decompos": [67, 68, 492, 493], "fusedecomposedbnoptim": [67, 492], "input_graph_def": [67, 68, 70, 492, 493, 495], "node_name_from_input": [67, 68, 70, 492, 493, 495], "node_nam": [67, 68, 70, 148, 382, 413, 492, 493, 495, 565, 570, 650], "strip": [67, 68, 70, 83, 84, 148, 492, 493, 495, 508, 509, 565, 736], "port": [67, 68, 70, 492, 493, 495, 709, 716], "other": [67, 68, 70, 156, 170, 176, 246, 289, 318, 371, 382, 492, 493, 495, 570, 584, 591, 643, 645, 650, 651, 668, 672, 679, 682, 684, 687, 689, 710, 724, 726, 729, 735, 737, 738, 741], "underli": [67, 68, 70, 158, 492, 493, 495, 583], "node_from_map": [67, 68, 70, 492, 493, 495], "node_map": [67, 68, 70, 492, 493, 495], "pull": [67, 68, 70, 492, 493, 495], "def": [67, 68, 70, 180, 235, 236, 278, 279, 405, 428, 447, 492, 493, 495, 572, 612, 627, 628, 645, 649, 668, 669, 670, 673, 674, 675, 686, 687, 729, 735, 736, 738], "entri": [67, 68, 70, 153, 191, 271, 311, 349, 397, 398, 468, 469, 472, 492, 493, 495, 617, 618, 622, 639, 668, 684], "index": [67, 68, 70, 105, 178, 223, 232, 240, 245, 249, 283, 288, 292, 327, 492, 493, 495, 567, 639, 670, 686, 708, 712, 732, 735], "everi": [67, 68, 70, 205, 208, 210, 231, 232, 343, 345, 492, 493, 495, 649, 669, 695, 700, 704, 730, 732, 738], "identifi": [67, 68, 70, 158, 316, 369, 382, 492, 493, 495, 570, 583, 715, 726, 732], "want": [67, 68, 70, 203, 231, 232, 245, 247, 288, 290, 345, 433, 492, 493, 495, 612, 628, 645, 649, 669, 670, 675, 687, 695, 707, 708, 715, 724, 729, 732, 734, 736, 738], "nodedef": [67, 68, 70, 492, 493, 495], "rais": [67, 68, 70, 105, 156, 158, 165, 200, 206, 213, 223, 316, 343, 344, 345, 369, 374, 447, 492, 493, 495, 583, 584, 611, 648, 668, 709, 726, 727], "valueerror": [67, 68, 70, 165, 316, 369, 447, 492, 493, 495, 611, 678], "If": [67, 68, 70, 74, 158, 172, 178, 180, 182, 231, 232, 235, 236, 249, 264, 278, 279, 292, 305, 344, 374, 428, 447, 492, 493, 495, 499, 583, 596, 600, 611, 612, 628, 644, 645, 650, 666, 668, 669, 670, 675, 683, 684, 686, 687, 693, 701, 702, 705, 707, 713, 718, 724, 726, 729, 732, 734, 735, 736, 737, 738], "isn": [67, 68, 70, 492, 493, 495], "present": [67, 68, 70, 492, 493, 495, 672, 715, 727, 735], "values_from_const": [67, 68, 70, 492, 493, 495], "node_def": [67, 68, 70, 492, 493, 495], "extract": [67, 68, 70, 148, 203, 249, 292, 364, 446, 492, 493, 495, 565, 670], "ha": [67, 68, 70, 74, 152, 158, 209, 210, 265, 313, 343, 345, 366, 405, 447, 492, 493, 495, 499, 572, 583, 598, 644, 646, 649, 650, 651, 669, 677, 682, 687, 688, 693, 707, 712, 713, 715, 718, 726, 728, 729, 731, 734, 735, 738], "access": [67, 68, 70, 228, 229, 232, 492, 493, 495, 634, 639, 702, 705, 709], "valid_reshape_input": [67, 68, 492, 493], "reshape_in0_ndef": [67, 68, 492, 493], "reshape_in1_ndef": [67, 68, 492, 493], "ar": [67, 68, 105, 158, 165, 205, 210, 211, 212, 217, 218, 231, 232, 247, 264, 290, 305, 316, 320, 327, 343, 344, 345, 349, 351, 352, 369, 373, 391, 392, 394, 398, 429, 431, 432, 446, 447, 492, 493, 573, 583, 594, 595, 596, 597, 598, 605, 609, 610, 612, 631, 638, 639, 643, 644, 645, 646, 649, 650, 668, 669, 670, 672, 673, 674, 675, 676, 677, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 693, 695, 698, 701, 707, 709, 710, 712, 713, 714, 715, 718, 724, 725, 726, 727, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740], "bypass_reshap": [67, 68, 492, 493], "input_node_map": [67, 68, 492, 493], "input_nam": [67, 68, 102, 142, 232, 309, 310, 382, 492, 493, 570, 677], "get_const_dim_count": [67, 68, 492, 493], "dimens": [67, 68, 105, 239, 264, 282, 305, 492, 493, 567, 670, 673, 732, 737], "instancenorm": [68, 493, 735], "fusedecomposedinoptim": [68, 493], "gelu": [69, 494], "fusegeluoptim": [69, 494], "sqrt": [69, 494, 672], "erf": [69, 494], "layernorm": [70, 495, 735], "fuselayernormoptim": [70, 495], "remap": [70, 158, 495, 583], "smaller": [70, 264, 305, 495, 673, 687, 726, 737], "fusedbatcnormv3": [70, 495], "And": [70, 495, 644, 645, 666, 668, 687, 693, 735], "further": [70, 232, 495, 643, 648, 688, 689, 690, 692, 701, 707, 729], "restrict": [70, 158, 231, 232, 495, 583, 726, 734], "2d": [70, 495, 735], "3d": [70, 495, 727, 735], "kera": [70, 116, 191, 203, 223, 232, 249, 256, 271, 292, 299, 377, 382, 469, 472, 495, 536, 570, 572, 650, 669, 675, 689, 697, 698], "fusepadwithconv2doptim": [71, 496], "excluded_op_nam": [71, 72, 228, 231, 232, 496, 497, 687, 726], "cfg": [71, 72, 165, 228, 362, 444, 496, 497, 591, 595, 631, 650, 651], "itex_qdq_mod": [71, 72, 496, 497], "conv3d": [71, 125, 496, 545], "fusepadwithfp32conv2doptim": [72, 497], "fusetransposereshapeoptim": [73, 498], "cse": [74, 98, 499, 523], "graphcseoptim": [74, 499], "introduc": [74, 499, 649, 650, 651, 679, 687, 729, 732, 733, 735, 739], "ident": [74, 80, 204, 499, 505, 643, 673], "three": [74, 223, 247, 290, 351, 429, 431, 499, 645, 649, 650, 667, 683, 688, 701, 715, 725, 729, 731, 734, 735, 736], "d": [74, 165, 499, 595, 673, 681, 708, 710, 716, 726], "those": [74, 158, 355, 437, 499, 583, 639, 672, 673, 674, 681, 687, 688, 725, 726, 729, 738], "child": [74, 152, 159, 499, 585, 598, 736], "b1": [74, 499], "c1c2": [74, 499], "d1": [74, 499, 639], "c1": [74, 499], "c2": [74, 499], "memori": [74, 165, 172, 311, 335, 340, 348, 384, 386, 499, 611, 639, 667, 669, 674, 687, 688, 690, 724, 726, 729, 730, 732, 735, 738, 741], "bound": [74, 178, 196, 264, 305, 316, 352, 369, 432, 499, 686, 737], "like": [74, 96, 98, 148, 158, 182, 203, 223, 232, 235, 236, 237, 249, 278, 279, 280, 292, 311, 320, 345, 348, 349, 373, 382, 398, 428, 499, 521, 523, 565, 567, 570, 583, 628, 644, 645, 646, 649, 650, 672, 673, 674, 682, 695, 710, 712, 725, 726, 729, 732, 733, 735, 738], "relu": [74, 78, 109, 499, 503, 529, 645, 679, 735, 736], "relu6": [74, 499, 679], "updat": [74, 159, 165, 198, 199, 205, 223, 345, 373, 428, 499, 585, 591, 595, 636, 678, 685, 686, 687, 693, 698, 701, 717, 726, 732, 735, 738, 739], "graphdef": [74, 148, 382, 427, 499, 565, 570, 689], "grappler": [75, 500, 679], "grappleroptim": [75, 500], "input_output_nam": [75, 500], "opt_cfg": [75, 500], "wrapper": [75, 102, 103, 104, 105, 122, 140, 151, 161, 164, 189, 200, 246, 264, 266, 267, 269, 270, 289, 305, 316, 320, 369, 373, 378, 382, 450, 500, 542, 569, 570, 608, 731], "leverag": [75, 500, 634, 646, 648, 673, 677, 690, 707, 725, 729, 732, 738], "built": [75, 191, 214, 233, 234, 238, 243, 247, 248, 253, 255, 257, 258, 260, 261, 264, 269, 271, 276, 277, 281, 284, 286, 290, 291, 296, 298, 300, 301, 302, 303, 305, 349, 373, 376, 384, 428, 500, 600, 628, 646, 649, 670, 675, 687, 700, 704, 724, 729, 734, 737, 738, 740], "convert_add_to_biasadd": [76, 87, 111, 501, 512], "convert_layout": [76, 87, 111, 501, 512], "convert_leakyrelu": [76, 87, 111, 501, 512], "convert_nan_to_random": [76, 87, 111, 501, 512], "convert_placeholder_to_const": [76, 87, 111, 501, 512], "dilated_contract": [76, 87, 111, 501, 512], "dummy_biasadd": [76, 87, 111, 501, 512], "expanddims_optim": [76, 87, 111, 501, 512], "fetch_weight_from_reshap": [76, 87, 111, 501, 512], "fold_batch_norm": [76, 87, 111, 501, 512], "fold_const": [76, 87, 111, 501, 512], "fuse_biasadd_add": [76, 87, 111, 501, 512], "fuse_column_wise_mul": [76, 87, 111, 501, 512], "fuse_conv_with_math": [76, 87, 111, 501, 512], "fuse_decomposed_bn": [76, 87, 111, 501, 512], "fuse_decomposed_in": [76, 87, 111, 501, 512], "fuse_gelu": [76, 87, 111, 501, 512], "fuse_layer_norm": [76, 87, 111, 501, 512], "fuse_pad_with_conv": [76, 87, 111, 501, 512], "fuse_pad_with_fp32_conv": [76, 87, 111, 501, 512], "fuse_reshape_transpos": [76, 87, 111, 501, 512], "graph_cse_optim": [76, 87, 111, 501, 512], "grappler_pass": [76, 87, 111, 501, 512], "insert_print_nod": [76, 87, 111, 501, 512], "move_squeeze_after_relu": [76, 87, 111, 501, 512], "pre_optim": [76, 87, 111, 501, 512], "remove_training_nod": [76, 87, 111, 501, 512], "rename_batch_norm": [76, 87, 111, 501, 512], "split_shared_input": [76, 87, 111, 501, 512], "strip_equivalent_nod": [76, 87, 111, 148, 501, 512, 565], "strip_unused_nod": [76, 87, 111, 148, 501, 512, 565], "switch_optim": [76, 87, 111, 501, 512], "insert": [77, 105, 107, 109, 113, 146, 171, 176, 455, 502, 527, 529, 533, 563, 591, 611, 622, 645, 650, 669, 682, 687, 690, 726, 729, 731, 732, 735, 736], "print": [77, 152, 153, 203, 320, 373, 447, 502, 598, 639, 675, 686, 687, 709, 710, 726, 735, 738], "insertprintminmaxnod": [77, 502], "pre_node_nam": [77, 502], "post_node_nam": [77, 502], "pass": [77, 148, 156, 158, 178, 187, 373, 398, 428, 502, 565, 572, 583, 584, 589, 606, 612, 638, 639, 644, 645, 649, 666, 670, 673, 674, 675, 681, 686, 687, 708, 715, 726, 728, 729, 731, 735, 740], "move": [78, 158, 171, 503, 583, 591, 645, 713, 728, 732, 733], "squeez": [78, 503, 645], "movesqueezeafterreluoptim": [78, 503], "match": [78, 102, 158, 203, 316, 317, 369, 370, 503, 583, 648, 673, 708, 732], "pre": [79, 116, 159, 203, 235, 236, 247, 278, 279, 290, 374, 428, 504, 536, 585, 619, 628, 668, 670, 673, 674, 687, 695, 712, 726, 727, 729, 732, 736, 738], "entranc": [79, 196, 238, 504], "preoptim": [79, 504], "removetrainingnodesoptim": [80, 505], "protected_nod": [80, 505], "types_to_splic": [80, 505], "checknumer": [80, 505], "stopgradi": [80, 505], "renam": [81, 506, 733], "fusedbatchnorm": [81, 506], "fusedbatchnormv2": [81, 506], "renamebatchnormoptim": [81, 506], "splitsharedinputoptim": [82, 507], "equival": [83, 164, 508, 610, 648, 727, 732, 735], "stripequivalentnodesoptim": [83, 508], "output_node_nam": [83, 84, 131, 132, 136, 148, 508, 509, 551, 552, 556, 565], "same": [83, 141, 148, 172, 180, 199, 217, 232, 247, 264, 290, 305, 316, 369, 453, 508, 565, 600, 612, 639, 649, 651, 666, 669, 670, 673, 675, 679, 687, 691, 695, 700, 704, 726, 728, 729, 732, 735, 736, 737, 738], "unus": [84, 148, 509, 565], "stripunusednodesoptim": [84, 509], "input_node_nam": [84, 131, 136, 148, 509, 551, 556, 565], "switch": [85, 510, 690, 736], "switchoptim": [85, 510], "condit": [85, 180, 247, 248, 249, 264, 290, 291, 292, 305, 351, 429, 431, 510, 670, 684, 737, 738], "graphrewriterbas": [86, 511], "abstract": [86, 188, 196, 264, 305, 306, 311, 348, 511, 649, 651, 681], "freeze_fake_qu": [87, 95, 111, 512, 520], "freeze_valu": [87, 95, 111, 512, 520], "freeze_value_without_calib": [87, 95, 111, 512, 520], "fuse_conv_redundant_dequant": [87, 95, 111, 512, 520], "fuse_conv_requant": [87, 95, 111, 512, 520], "fuse_matmul_redundant_dequant": [87, 95, 111, 512, 520], "fuse_matmul_requant": [87, 95, 111, 512, 520], "meta_op_optim": [87, 95, 111, 512, 520], "post_hostconst_convert": [87, 95, 111, 512, 520], "post_quantized_op_cs": [87, 95, 111, 512, 520], "rnn_convert": [87, 95, 111, 512, 520], "scale_propag": [87, 95, 111, 512, 520], "onnx_graph": [87, 101, 111], "onnx_schema": [87, 101, 111], "tf2onnx_util": [87, 101, 111], "insert_qdq_pattern": [87, 106, 111, 512, 526], "merge_duplicated_qdq": [87, 106, 111, 512, 526], "share_qdq_y_pattern": [87, 106, 111, 512, 526], "freez": [88, 89, 90, 148, 513, 514, 515, 565, 690, 726], "fakequ": [88, 455, 513], "freezefakequantopoptim": [88, 513], "follow": [88, 110, 180, 204, 249, 292, 313, 316, 366, 369, 513, 530, 573, 594, 596, 597, 598, 605, 609, 610, 643, 644, 645, 646, 648, 649, 650, 651, 668, 669, 670, 673, 674, 675, 679, 683, 684, 686, 687, 688, 689, 690, 691, 692, 700, 704, 709, 711, 712, 715, 720, 725, 726, 728, 729, 732, 735, 736, 738], "freezevaluetransform": [89, 514], "max_min_data": [89, 90, 514, 515], "postfix": [89, 90, 514, 515], "tensor_data": [89, 514, 572, 639, 640], "th": [89, 90, 514, 515], "gpu": [89, 90, 97, 158, 172, 231, 232, 514, 515, 522, 583, 612, 648, 666, 682, 687, 688, 692, 698, 707, 728, 729, 730], "freezevaluewithoutcalibtransform": [90, 515], "95": [90, 320, 373, 515, 686, 741], "quantizedconv": [91, 92, 516, 517], "quantizeddeconv": [91, 516], "redund": [91, 93, 516, 518], "fuseconvredundantdequantizetransform": [91, 516], "cpu": [91, 92, 93, 94, 152, 157, 158, 160, 165, 187, 231, 232, 516, 517, 518, 519, 572, 583, 598, 612, 634, 639, 648, 650, 666, 667, 682, 687, 688, 690, 692, 698, 707, 715, 727, 728, 729, 730, 731, 732, 736], "_quantizedconv": [91, 516], "_quantizeddeconv": [91, 516], "successor": [91, 92, 93, 94, 516, 517, 518, 519], "requant": [92, 94, 517, 519, 736], "fuseconvrequantizetransform": [92, 517], "quantizedmatmul": [93, 94, 518, 519], "fusematmulredundantdequantizetransform": [93, 518], "_quantizedmatmul": [93, 94, 518, 519], "fusematmulrequantizedequantizetransform": [94, 519], "quantizedmatmulwithbiasanddequant": [94, 519], "fusematmulrequantizetransform": [94, 519], "fusematmulrequantizedequantizenewapitransform": [94, 519], "fusematmulrequantizenewapitransform": [94, 519], "newapi": [94, 519], "meta": [96, 521, 648, 685, 727, 741], "metainfochangingmemopoptim": [96, 521], "metaop": [96, 521], "With": [96, 384, 521, 645, 649, 651, 669, 687, 695, 700, 704, 708, 714, 724, 726, 727, 734, 735, 738, 741], "better": [96, 231, 232, 235, 236, 278, 279, 327, 374, 428, 521, 628, 668, 674, 686, 688, 726, 727, 729, 732, 734, 735, 738], "perform": [96, 140, 178, 220, 231, 232, 247, 259, 260, 265, 290, 302, 311, 335, 340, 348, 355, 373, 384, 428, 433, 437, 450, 451, 521, 596, 612, 644, 645, 646, 649, 650, 666, 670, 671, 672, 674, 676, 677, 682, 683, 686, 687, 688, 689, 690, 692, 696, 698, 701, 707, 713, 724, 725, 726, 727, 728, 729, 730, 731, 732, 735, 736, 738, 740, 741], "hostconst": [97, 522], "posthostconstconvert": [97, 522], "just": [97, 237, 262, 264, 267, 269, 270, 272, 280, 305, 384, 522, 567, 646, 687, 697, 701, 707, 715, 725, 729, 735, 737, 738], "postcseoptim": [98, 523], "duplic": [98, 108, 352, 432, 523, 528], "quantizev2": [98, 523], "decreas": [98, 523, 712, 726], "size": [98, 172, 180, 207, 208, 239, 240, 246, 249, 255, 260, 264, 282, 283, 289, 292, 298, 302, 305, 343, 382, 384, 391, 392, 394, 523, 567, 570, 611, 639, 643, 650, 669, 670, 675, 678, 687, 707, 708, 724, 726, 729, 730, 732, 735, 737, 740, 741], "rnn": [99, 524], "quantizedrnnconvert": [99, 524], "calibration_data": [99, 107, 524, 527], "rnn_detail": [99, 524], "scalepropagationtransform": [100, 525], "direct": [100, 209, 343, 525, 726], "export": [101, 232, 312, 316, 365, 369, 648, 680, 693, 708, 710, 736, 739], "onnxgraph": 102, "output_shap": 102, "extra_opset": 102, "output_nam": [102, 142, 232, 309, 310, 382, 570, 677], "is_subgraph": 102, "graph_nam": 102, "manipul": [102, 103], "onnxnod": 103, "skip_convers": 103, "schema": [104, 172, 611], "onnxopschema": 104, "domain": [104, 105, 231, 232, 726, 738], "since_vers": 104, "get_schema": 104, "max_inclusive_opset_vers": 104, "within": [104, 179, 180, 211, 212, 217, 218, 226, 311, 316, 348, 369, 382, 422, 427, 570, 643, 645, 651, 667, 688, 700, 704, 707, 715, 726, 727, 735, 738], "get_max_supported_opset_vers": 104, "packag": [104, 648, 649, 668, 678, 683, 707, 708, 727, 733, 738], "set_nam": 105, "find_opset": 105, "assert_error": 105, "bool_val": 105, "error_msg": 105, "messag": [105, 146, 563, 644, 715, 716, 720, 721, 722, 738], "map_numpy_to_onnx_dtyp": 105, "np_dtype": 105, "map_onnx_to_numpy_typ": 105, "onnx_typ": 105, "add_port_to_nam": 105, "nr": 105, "get_tensorflow_node_attr": 105, "pars": [105, 148, 165, 247, 248, 260, 264, 290, 291, 302, 305, 411, 412, 416, 565, 595, 650, 651, 737], "get_tensorflow_tensor_shap": 105, "get_tensorflow_node_shape_attr": 105, "attr": [105, 148, 203, 565], "map_tensorflow_dtyp": 105, "get_tensorflow_tensor_data": 105, "convert_tensorflow_tensor_to_onnx": 105, "read_tensorflow_node_attr": 105, "read": [105, 148, 158, 252, 264, 295, 305, 344, 565, 583, 670, 731, 734], "infer_onnx_shape_dtyp": 105, "opset_vers": [105, 142, 232, 309, 310, 677], "input_shap": [105, 251, 294, 567, 670], "input_dtyp": 105, "sometim": [105, 645, 672, 729], "make_onnx_shap": 105, "seqtyp": 105, "tensor_dtyp": 105, "around": 105, "signifi": 105, "make_onnx_inputs_output": 105, "elem_typ": 105, "text": [105, 219, 263, 264, 304, 305, 313, 318, 346, 366, 371, 677, 684, 696, 718, 721, 722, 726, 727, 732, 735, 737, 741], "datatyp": [105, 165, 731, 738, 741], "save_protobuf": 105, "path": [105, 140, 148, 159, 165, 186, 203, 219, 223, 228, 247, 248, 249, 264, 290, 291, 292, 305, 306, 309, 310, 311, 322, 323, 324, 326, 335, 340, 344, 346, 348, 349, 362, 374, 382, 386, 389, 391, 392, 394, 397, 398, 405, 427, 428, 444, 450, 565, 570, 572, 585, 591, 595, 622, 634, 636, 639, 645, 646, 649, 670, 672, 675, 681, 686, 687, 688, 689, 693, 696, 707, 710, 712, 715, 720, 721, 722, 725, 732, 737, 740], "as_text": 105, "save": [105, 148, 157, 158, 186, 200, 223, 231, 232, 249, 292, 309, 310, 349, 382, 386, 428, 565, 570, 572, 583, 628, 629, 634, 639, 645, 649, 681, 687, 688, 689, 691, 695, 700, 704, 710, 715, 720, 721, 722, 725, 729, 730, 732, 735], "protobuf": [105, 382, 570, 710], "is_onnx_domain": 105, "is_list_or_tupl": 105, "are_shapes_equ": 105, "src": [105, 708], "dest": 105, "equal": [105, 143, 148, 177, 447, 560, 572, 639, 726, 732], "get_subgraphs_from_onnx": 105, "model_proto": 105, "over": [105, 158, 249, 292, 320, 373, 583, 650, 676, 680, 682, 686, 698, 707, 713, 717, 726, 728, 735, 738], "df": 105, "initialize_name_count": 105, "avoid": [105, 158, 165, 172, 247, 290, 583, 611, 645, 668, 736], "conflict": [105, 668, 678], "counter": 105, "make_nam": 105, "get_index_from_strided_slice_of_shap": 105, "outputs_to_valu": 105, "stride": [105, 264, 305, 737], "slice": 105, "compute_const_folding_using_tf": 105, "g": [105, 158, 205, 231, 232, 583, 612, 644, 673, 676, 680, 690, 695, 726, 732, 733, 735, 738], "const_node_valu": 105, "graph_output": 105, "constant": [105, 310, 312, 352, 354, 360, 365, 432, 436, 442, 632, 668, 669, 679, 710, 737], "tf": [105, 116, 141, 148, 203, 223, 246, 247, 248, 249, 264, 289, 290, 291, 292, 305, 380, 382, 453, 470, 472, 536, 565, 567, 569, 570, 571, 572, 668, 675, 683, 689, 727, 731, 737], "generategraphwithqdqpattern": [107, 527], "op_wise_config": [107, 131, 136, 527, 551, 556, 650], "quantized_nod": [107, 527], "llm_weight_minmax": [107, 527], "dq": [107, 109, 131, 527, 529, 551, 735], "pair": [107, 231, 232, 527, 650, 669, 687, 688, 733], "befor": [107, 109, 152, 176, 195, 205, 210, 212, 217, 219, 221, 231, 232, 247, 290, 343, 345, 347, 455, 527, 529, 598, 644, 651, 669, 670, 673, 674, 675, 678, 679, 683, 687, 702, 705, 711, 712, 729, 732, 734, 736, 738], "merg": [108, 239, 282, 362, 444, 528, 567, 702, 705, 736, 738], "mergeduplicatedqdqoptim": [108, 528], "y": [109, 231, 232, 264, 305, 352, 432, 529, 668, 672, 678, 693, 735, 737], "shareqdqforitexypatternoptim": [109, 529], "break": [109, 529, 675, 687], "graphanalyz": [110, 530], "extend_engin": [110, 530], "analyz": [110, 203, 382, 530, 570, 734, 735, 736], "under": [110, 231, 232, 249, 292, 405, 530, 572, 612, 627, 634, 638, 644, 646, 648, 670, 684, 686, 687, 690, 695, 696, 707, 715, 725, 726, 727, 730, 732, 736, 738], "singleton": [110, 187, 530, 572, 639], "specifi": [110, 158, 165, 178, 182, 223, 231, 232, 235, 236, 264, 265, 278, 279, 305, 311, 316, 320, 322, 323, 326, 335, 340, 348, 349, 369, 373, 374, 428, 447, 530, 583, 590, 595, 596, 600, 628, 638, 639, 650, 651, 675, 679, 686, 687, 695, 709, 715, 719, 720, 721, 722, 724, 726, 728, 732, 737, 738, 740], "graphrewriterhelp": [110, 530], "encapsul": [110, 235, 236, 278, 279, 374, 428, 530, 628, 689], "quantize_lay": [111, 112, 114, 531, 532, 534], "fake_quant": [111, 112, 114, 531, 532, 534], "quantize_config": [111, 112, 114, 531, 532, 534, 650], "quantize_help": [111, 112, 114, 531, 532, 534], "quantize_wrapp": [111, 112, 114, 531, 532, 534], "fuse_qdq_bn": [111, 112, 130, 531, 532, 550], "fuse_qdq_concatv2": [111, 112, 130, 531, 532, 550], "fuse_qdq_conv": [111, 112, 130, 531, 532, 550], "fuse_qdq_deconv": [111, 112, 130, 531, 532, 550], "fuse_qdq_in": [111, 112, 130, 531, 532, 550], "fuse_qdq_matmul": [111, 112, 130, 531, 532, 550], "fuse_qdq_pool": [111, 112, 130, 531, 532, 550], "optimize_qdq": [111, 112, 130, 531, 532, 550], "optimize_lay": [112, 114, 117, 532, 534, 537], "quantize_layer_add": [112, 114, 117, 532, 534, 537], "quantize_layer_bas": [112, 114, 117, 532, 534, 537], "quantize_layer_bn": [112, 114, 117, 532, 534, 537], "fakequantizebas": [113, 533], "abc": [113, 318, 371, 533, 623, 649, 736, 738], "fakequant": [113, 533], "per_channel": [113, 533, 650, 651, 679, 729, 740], "8": [113, 158, 172, 231, 232, 263, 304, 398, 533, 583, 596, 611, 619, 645, 650, 667, 668, 679, 683, 714, 715, 726, 727, 732, 735, 738, 741], "channel_axi": [113, 174, 177, 533], "symmetr": [113, 172, 391, 392, 394, 533, 634, 651, 729, 732, 737, 738], "narrow_rang": [113, 533], "quantizeconfig": [115, 116, 535, 536], "custom": [115, 156, 165, 172, 178, 232, 349, 373, 384, 535, 584, 611, 638, 666, 673, 674, 690, 713, 714, 715, 719, 721, 722, 726, 727, 732, 734], "There": [115, 349, 351, 429, 431, 535, 668, 672, 673, 679, 682, 687, 690, 712, 714, 715, 732, 735, 738, 740], "instanc": [115, 116, 178, 199, 231, 232, 235, 236, 265, 278, 279, 317, 318, 320, 323, 326, 329, 330, 332, 333, 334, 352, 364, 370, 371, 373, 374, 428, 432, 446, 535, 536, 612, 628, 636, 639, 643, 644, 645, 649, 666, 687, 692, 698, 732, 738, 740, 741], "global": [115, 205, 231, 232, 329, 330, 332, 333, 334, 343, 446, 535, 639, 645, 687, 726, 728, 738], "class": [116, 156, 165, 171, 200, 206, 213, 327, 374, 428, 472, 536, 584, 645, 646, 650, 668, 669, 670, 673, 686, 687, 698, 724, 725, 729, 733, 736, 738, 740], "init_quantize_config": [116, 536], "quantize_recip": [116, 536], "begin": [116, 211, 212, 217, 345, 536, 668, 669, 673, 674, 687, 726, 738], "process": [116, 140, 153, 172, 178, 180, 185, 205, 210, 211, 212, 219, 221, 223, 231, 232, 235, 236, 247, 248, 249, 260, 264, 265, 278, 279, 290, 291, 292, 302, 305, 343, 345, 347, 351, 352, 374, 428, 429, 431, 432, 450, 536, 590, 596, 612, 628, 638, 639, 646, 649, 650, 651, 667, 669, 670, 673, 674, 675, 677, 687, 691, 712, 714, 715, 717, 725, 726, 729, 730, 732, 735, 736, 737, 740], "model_nam": [116, 231, 232, 536, 648], "special": [116, 158, 203, 384, 536, 583, 645, 669, 686, 687, 724, 726, 732, 739], "decid": [116, 231, 232, 314, 345, 367, 536, 649, 650, 687, 729, 733, 738], "qat_clone_funct": [116, 536], "leav": [116, 536, 701], "quantizewrapp": [116, 122, 536, 542], "wrapped_lay": [116, 199, 536], "config_quantizable_lay": [118, 538], "quantizelayeradd": [119, 539], "quantizelay": [120, 540], "quantizelayerbas": [120, 540], "quantizelayerbatchnorm": [121, 541], "quantizewrapperbas": [122, 542], "fusedbatchnormv3": [123, 133, 543, 553], "fusenodestartwithfusedbatchnormv3": [123, 133, 543, 553], "_quantizedfusedbatchnorm": [123, 543], "concatv2": [124, 134, 147, 544, 554, 564, 679], "fusenodestartwithconcatv2": [124, 134, 544, 554], "quantizedconcatv2": [124, 134, 544, 554], "fusenodestartwithconv2d": [125, 135, 545, 555], "conv2dbackpropinput": [126, 546], "conv3dbackpropinputv2": [126, 546], "fusenodestartwithdeconv2d": [126, 546], "fusedinstancenorm": [127, 547], "fusenodestartwithfusedinstancenorm": [127, 547], "batchmatmul": [128, 548], "batchmatmulv2": [128, 548], "fusenodestartwithmatmul": [128, 137, 548, 557], "avgpool": [129, 138, 549, 558, 679], "fusenodestartwithpool": [129, 138, 549, 558], "optimizeqdqgraph": [131, 551], "input_graph": [131, 136, 143, 423, 427, 551, 556, 560, 649], "op_wise_sequ": [131, 136, 551, 556], "quantizegraph": [132, 552], "quantizegraphbas": [132, 552], "quantizenodebas": [132, 552], "quantizegraphforintel": [136, 556], "common": [139, 156, 158, 195, 232, 262, 312, 322, 326, 327, 328, 365, 398, 400, 466, 468, 469, 470, 472, 559, 583, 584, 618, 619, 622, 631, 643, 668, 670, 674, 675, 677, 681, 683, 687, 729, 735], "herlper": [139, 559], "quantizegraphhelp": [139, 559], "sever": [139, 221, 264, 305, 347, 349, 559, 646, 672, 673, 674, 682, 687, 688, 700, 704, 715, 726, 728, 730, 735, 737, 738, 740], "staticmethod": [139, 559], "function": [139, 140, 156, 170, 185, 211, 212, 217, 231, 232, 235, 236, 248, 278, 279, 291, 323, 326, 335, 340, 389, 450, 559, 584, 644, 645, 646, 649, 650, 651, 666, 669, 673, 674, 677, 681, 682, 683, 685, 686, 687, 688, 698, 708, 714, 715, 726, 729, 732, 733, 734, 735, 736, 738, 739], "smoothquantcalibr": [140, 450], "dataset": [140, 141, 165, 172, 219, 235, 236, 237, 239, 240, 242, 243, 244, 245, 246, 258, 267, 278, 279, 280, 282, 283, 285, 286, 287, 288, 289, 301, 312, 316, 317, 318, 320, 349, 365, 369, 370, 371, 373, 374, 428, 450, 453, 567, 596, 611, 628, 631, 646, 648, 649, 650, 669, 675, 680, 686, 687, 695, 709, 710, 720, 726, 729, 732, 733, 735, 738, 740, 741], "outlier": [140, 450, 650, 667, 672, 712, 732, 735], "smoothquantcalibrationllm": [140, 450], "model_path": [140, 148, 172, 450, 565, 598, 619, 672, 720], "temp_path": [140, 450], "weight_name_map": [140, 450], "llm": [140, 141, 152, 218, 450, 453, 598, 726, 727, 730, 732, 735], "eval_func": [140, 235, 236, 278, 279, 349, 352, 355, 356, 358, 374, 428, 429, 432, 433, 437, 438, 440, 447, 450, 628, 645, 669, 670, 672, 673, 674, 675, 687, 710, 729, 730, 731, 732, 738, 740], "temporari": [140, 165, 450, 591, 639, 643], "store": [140, 196, 198, 200, 203, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 222, 231, 232, 249, 292, 338, 345, 450, 681], "median": [140, 450], "autotrack": [140, 148, 450, 565], "smoothquantscal": [141, 453], "alpha": [141, 157, 161, 176, 198, 220, 400, 453, 470, 608, 668, 729, 738], "scales_per_op": [141, 400, 453, 470], "individu": [141, 205, 343, 422, 427, 453, 643, 715, 726, 735], "smoothquantscalerllm": [141, 453], "tensorflowqdqtoonnxqdqconvert": 142, "shape_overrid": 142, "inputs_as_nchw": [142, 309], "default_opset_vers": 142, "bia": [143, 231, 232, 560, 732, 736], "correct": [143, 177, 223, 231, 232, 316, 317, 318, 320, 344, 369, 370, 371, 373, 560, 643, 690], "biascorrect": [143, 560], "fp32_graph": [143, 560], "weight_empir": [143, 560], "Will": [143, 560, 673, 682], "our": [143, 165, 231, 232, 399, 560, 591, 646, 648, 677, 687, 708, 709, 712, 734, 739], "task": [143, 247, 254, 290, 297, 320, 373, 560, 670, 673, 674, 677, 682, 686, 687, 710, 714, 717, 726, 730, 732, 735, 741], "close": [143, 177, 560, 667, 716], "w_int8": [143, 177, 560], "u": [143, 177, 560, 690, 709, 714], "w_fp32": [143, 177, 560], "varianc": [143, 177, 199, 560, 672], "differ": [143, 173, 177, 179, 182, 189, 195, 214, 231, 232, 240, 249, 264, 266, 283, 292, 305, 311, 320, 326, 328, 337, 348, 373, 382, 384, 560, 570, 633, 643, 645, 646, 650, 669, 670, 672, 673, 675, 676, 681, 682, 686, 687, 689, 700, 704, 709, 712, 715, 724, 726, 729, 732, 735, 736, 737, 738], "wise": [143, 155, 157, 159, 172, 177, 231, 232, 352, 355, 392, 394, 432, 433, 437, 560, 582, 585, 648, 650, 682, 712, 726, 732, 735, 736, 738, 739, 740], "minim": [143, 177, 352, 432, 560, 650, 651, 667, 673, 676, 686, 687, 700, 704, 726, 729, 738], "scale_c": [143, 177, 560], "shift": [143, 177, 260, 302, 560, 708, 737], "notic": [143, 177, 265, 560, 684, 688, 710, 733], "first": [143, 158, 165, 177, 179, 204, 229, 231, 232, 247, 290, 316, 362, 369, 433, 444, 560, 572, 583, 611, 639, 645, 646, 648, 649, 650, 651, 670, 672, 683, 688, 692, 701, 702, 705, 708, 710, 711, 712, 728, 729, 731, 732, 734, 735, 736, 738, 740], "empir": [143, 177, 560], "solut": [143, 177, 560, 648, 649, 650, 678, 692, 696, 701, 727, 732, 733, 735, 738, 739], "don": [143, 177, 205, 231, 232, 560, 645, 713, 726, 738], "min": [143, 172, 177, 196, 232, 400, 560, 572, 611, 639, 672, 710, 712, 726, 729, 732, 735, 737, 738], "graphtransform": [144, 561], "graphtransformbas": [144, 561], "input_pb": [144, 146, 147, 561, 563, 564], "log": [146, 178, 185, 203, 411, 412, 416, 563, 596, 635, 645, 698, 720, 721, 722, 734, 736, 738], "insertlog": [146, 563], "node_name_list": [146, 563], "show_nam": [146, 563], "show_op": [146, 563], "first_n": [146, 563], "summar": [146, 563, 668, 673], "1024": [146, 249, 292, 563, 693], "dump_fp32": [146, 563], "rerang": [147, 564], "rerangequantizedconcat": [147, 564], "rerange_quant": [147, 564], "version1_lt_version2": [148, 572, 639], "version1": [148, 572, 639], "version2": [148, 572, 639], "version1_gt_version2": [148, 572, 639], "greater": [148, 572, 639, 720, 726, 738], "version1_eq_version2": [148, 572, 639], "version1_gte_version2": [148, 572, 639], "version1_lte_version2": [148, 572, 639], "disable_random": [148, 572], "seed": [148, 172, 187, 195, 231, 232, 328, 572, 596, 639, 687, 740], "disabl": [148, 231, 232, 572, 643, 707, 712, 731, 732, 735], "read_graph": [148, 565], "in_graph": [148, 565], "in_graph_is_binari": [148, 565], "write_graph": [148, 565], "out_graph_def": [148, 565], "out_graph_fil": [148, 565], "write": [148, 256, 299, 565, 639, 675, 681, 687, 690, 736], "is_ckpt_format": [148, 565], "ckpt": [148, 374, 382, 428, 565, 570, 741], "folder": [148, 249, 254, 292, 297, 374, 428, 565, 638, 670, 695, 700, 704, 713, 720, 721, 722, 732, 736], "is_saved_model_format": [148, 565], "saved_model": [148, 322, 565, 730], "get_estimator_graph": [148, 565], "estim": [148, 320, 373, 382, 565, 570, 738], "input_fn": [148, 382, 565, 570], "get_tensor_by_nam": [148, 565], "try_cnt": [148, 565], "import": [148, 178, 180, 187, 196, 231, 232, 322, 374, 384, 428, 447, 565, 572, 628, 639, 645, 646, 648, 651, 666, 669, 670, 672, 673, 674, 675, 677, 680, 686, 687, 688, 689, 690, 694, 696, 709, 710, 718, 724, 725, 726, 728, 729, 730, 731, 733, 734, 735, 736, 737, 738, 739], "scope": [148, 565, 644, 650, 687], "onc": [148, 158, 191, 221, 271, 347, 351, 429, 431, 565, 583, 650, 651, 669, 707, 713, 726, 727, 738, 741], "both": [148, 232, 565, 643, 646, 649, 674, 687, 691, 710, 712, 714, 726, 728, 729, 732, 735, 738], "compat": [148, 382, 565, 570, 644, 675, 689, 702, 705, 707, 726, 733], "v1": [148, 259, 260, 302, 317, 318, 320, 370, 371, 373, 382, 565, 570, 675, 677, 678, 686, 689, 711, 726, 733, 734, 735, 741], "suffix": [148, 565], "time": [148, 158, 187, 199, 231, 232, 264, 305, 320, 352, 373, 384, 432, 565, 572, 583, 606, 639, 650, 669, 672, 675, 678, 687, 695, 697, 700, 704, 707, 708, 713, 716, 720, 721, 724, 726, 727, 729, 732, 734, 735, 736, 737, 738], "got": [148, 565, 650, 678, 736], "iterator_sess_run": [148, 565], "sess": [148, 382, 565, 570], "iter_op": [148, 565], "feed_dict": [148, 246, 289, 565], "output_tensor": [148, 382, 565, 570], "measur": [148, 265, 374, 565, 633, 646, 649, 666, 672, 673, 686, 687, 732, 736, 738], "integr": [148, 189, 266, 565, 649, 687, 708, 709, 714, 732], "makeiter": [148, 565], "feed": [148, 246, 289, 565, 596, 673, 726], "end": [148, 210, 211, 212, 217, 231, 232, 247, 263, 264, 290, 304, 305, 345, 351, 429, 431, 565, 649, 650, 651, 673, 674, 679, 683, 687, 701, 717, 724, 726, 736, 737, 738], "predict": [148, 264, 269, 305, 313, 317, 318, 320, 366, 370, 371, 373, 428, 565, 646, 673, 686, 698, 732, 735, 736, 737], "pred": [148, 320, 373, 565, 686], "collate_tf_pr": [148, 565], "collat": [148, 165, 565], "get_input_output_node_nam": [148, 565], "fix_ref_type_of_graph_def": [148, 565], "fix": [148, 215, 217, 247, 290, 345, 565, 669, 670, 694, 726, 729, 732, 738], "strip_unused_lib": [148, 565], "offici": [148, 313, 317, 318, 366, 370, 371, 565, 643, 735], "r1": [148, 565], "15": [148, 565, 679, 683, 721], "branch": [148, 565, 644], "get_graph_def": [148, 565], "auto_input_output": [148, 565], "get_model_input_shap": [148, 565], "get_tensor_val_from_graph_nod": [148, 565], "graph_node_name_map": [148, 565], "kei": [148, 153, 158, 159, 171, 203, 214, 223, 229, 231, 232, 327, 344, 382, 447, 565, 570, 572, 583, 585, 591, 611, 629, 631, 639, 648, 650, 709, 710, 716, 727, 732, 736, 738], "val": [148, 223, 249, 252, 292, 295, 344, 565, 672, 687, 712], "tensor_v": [148, 565], "int8_node_name_revers": [148, 565], "revers": [148, 565, 710], "tf_diagnosis_help": 148, "fp32_model": [148, 153, 165, 310, 639, 649, 730, 732], "quan_model": 148, "save_path": [148, 309, 310, 649, 689], "diagnosi": [148, 231, 232, 687, 710, 711, 712, 727, 733, 739], "generate_feed_dict": [148, 565], "input_tensor": [148, 199, 382, 565, 570], "get_weight_from_input_tensor": [148, 565], "input_tensor_nam": [148, 382, 565, 570], "associ": [148, 158, 316, 369, 565, 583], "search": [148, 152, 172, 195, 196, 203, 217, 228, 232, 235, 236, 278, 279, 311, 313, 323, 326, 327, 328, 348, 352, 366, 391, 432, 565, 598, 611, 639, 648, 668, 682, 686, 690, 691, 701, 726, 727, 732, 735, 736, 738, 739], "look": [148, 214, 565, 649, 651, 679, 686, 709, 710, 712, 735, 740], "sq_weight_tensor": [148, 565], "sq_weights_nod": [148, 565], "two": [148, 153, 158, 178, 204, 209, 216, 221, 249, 254, 265, 292, 297, 316, 343, 347, 349, 356, 369, 438, 565, 583, 639, 644, 645, 646, 668, 669, 670, 673, 675, 677, 679, 687, 688, 714, 715, 717, 726, 729, 731, 732, 734, 735, 738, 740], "apply_inlin": [148, 565], "func": [148, 165, 565, 639, 729, 740], "inlin": [148, 565, 690, 695, 698], "definit": [148, 161, 240, 245, 283, 288, 565, 608], "concret": [148, 565, 738], "new_graph_def": [148, 565], "construct_function_from_graph_def": [148, 565], "frozen_func": [148, 565], "rebuild": [148, 565, 691, 700, 704], "reconstruct": [148, 565, 727], "new_func": [148, 565], "parse_saved_model": [148, 565], "output_tensor_nam": [148, 382, 565, 570], "_saved_model": [148, 565], "load": [148, 156, 158, 159, 247, 263, 264, 290, 304, 305, 374, 382, 428, 565, 570, 572, 581, 582, 584, 585, 595, 638, 639, 650, 669, 700, 704, 708, 710, 728, 729, 730, 735], "reconstruct_saved_model": [148, 565], "trackabl": [148, 565], "destin": [148, 308, 322, 565], "actawareweightqu": 150, "example_input": [150, 160, 164, 165, 170, 172, 231, 232, 310, 589, 590, 591, 595, 610, 611, 618, 622, 638, 677], "data_typ": [150, 172, 364, 446], "enable_full_rang": [150, 172, 596, 611, 634, 730, 732], "algo": [150, 182, 386, 455, 456, 631], "torch": [151, 152, 153, 154, 155, 158, 159, 161, 162, 163, 165, 171, 172, 176, 180, 186, 200, 203, 204, 206, 214, 228, 231, 232, 310, 374, 428, 634, 638, 645, 648, 651, 652, 673, 675, 677, 687, 688, 689, 690, 695, 698, 710, 729, 732, 735, 736], "bf16modulewrapp": 151, "bf16modul": 151, "mix": [151, 160, 172, 231, 232, 350, 362, 374, 430, 444, 612, 648, 649, 656, 682, 690, 696, 697, 698, 739], "precis": [151, 160, 172, 231, 232, 235, 236, 278, 279, 311, 318, 320, 321, 348, 350, 362, 371, 373, 374, 384, 430, 433, 444, 456, 612, 639, 648, 649, 650, 656, 666, 667, 674, 675, 679, 682, 690, 696, 697, 698, 727, 728, 729, 732, 735, 738, 739], "mixed_precision_model": 151, "bf16_symbolic_trac": 151, "fx_sub_module_list": 151, "trace": [151, 153, 163, 165, 203, 231, 232, 310, 435, 590, 595, 622, 645, 697, 738], "_description_": [151, 386], "is_leaf": [152, 598], "judg": [152, 598], "nn": [152, 159, 161, 165, 171, 172, 203, 204, 214, 226, 231, 232, 310, 374, 428, 585, 591, 595, 598, 608, 611, 612, 617, 618, 622, 627, 634, 638, 645, 673, 687, 689, 732, 735, 736], "trace_gptq_target_block": [152, 598], "module_typ": [152, 598], "modulelist": [152, 598], "sequenti": [152, 180, 245, 288, 349, 351, 429, 431, 567, 572, 598, 738], "stack": [152, 598, 648], "structur": [152, 204, 215, 216, 231, 232, 345, 363, 445, 598, 639, 682, 706, 708, 711, 720, 726, 727, 729, 736, 739, 741], "critic": [152, 214, 598, 643], "gptq_related_block": [152, 598], "embed": [152, 165, 598, 667, 726], "transformers_pr": [152, 598], "todo": [152, 182, 247, 250, 290, 293, 316, 362, 369, 444, 567, 598], "transformers_nam": [152, 598], "find_lay": [152, 226, 598], "conv1d": [152, 226, 598, 651], "find_layers_nam": [152, 598], "log_quantizable_layers_per_transform": [152, 598], "transformer_block": [152, 598], "maxq": [152, 598], "gptquantiz": [152, 598], "nsampl": [152, 172, 225, 598, 732], "use_max_length": [152, 172, 598, 732], "pad_max_length": [152, 172, 732], "layer_wis": [152, 172, 581, 638, 730], "compress": [152, 312, 335, 340, 365, 384, 598, 628, 634, 641, 648, 656, 673, 682, 687, 707, 709, 724, 725, 726, 727, 729, 735, 739, 741], "pretrain": [152, 598, 634, 690, 696], "url": [152, 249, 292, 598, 644, 684, 718, 719, 726], "arxiv": [152, 198, 199, 217, 218, 225, 345, 598, 619, 648, 667, 726, 727, 732, 735], "org": [152, 198, 199, 217, 218, 225, 316, 345, 369, 598, 619, 645, 672, 683, 702, 705, 726], "2210": [152, 598, 619, 732], "17323": [152, 598, 619, 732], "node_collector": 153, "hook": [153, 188, 192, 214, 273, 274, 335, 340, 631, 673, 674, 687, 726, 735, 736], "record": [153, 165, 189, 192, 247, 248, 249, 255, 266, 273, 290, 291, 292, 298, 611, 639, 670, 712, 732, 734, 736, 738], "hessiantrac": 153, "q_model": [153, 157, 232, 322, 428, 468, 472, 595, 645, 669, 670, 672, 675, 677, 680, 681, 686, 687, 689, 709, 710, 729, 730, 731, 732], "criterion": [153, 188, 190, 191, 197, 198, 205, 210, 211, 212, 214, 217, 218, 222, 231, 232, 268, 271, 312, 365, 673, 674, 687, 726, 729, 735, 738, 740], "yao": 153, "zhewei": 153, "et": [153, 667, 732, 735], "al": [153, 667, 732, 735], "pyhessian": 153, "network": [153, 198, 205, 206, 345, 435, 612, 646, 667, 673, 674, 677, 687, 709, 727, 729, 735, 738], "through": [153, 235, 236, 278, 279, 373, 374, 428, 648, 666, 679, 681, 682, 686, 693, 714, 724, 725, 726, 728, 729, 732], "len": [153, 232, 264, 305, 670, 675, 737], "2020": 153, "ieee": [153, 688, 735], "intern": [153, 245, 288, 362, 444, 567, 669, 670, 686, 726], "confer": [153, 726, 735], "big": [153, 672, 732], "dong": 153, "zhen": 153, "hawq": [153, 435, 738], "v2": [153, 435, 669, 675, 677, 678, 683, 685, 696, 733, 735, 738, 739, 741], "advanc": [153, 231, 232, 643, 648, 650, 656, 685, 726, 729, 732, 740], "system": [153, 158, 178, 265, 583, 639, 666, 693, 726, 741], "33": [153, 685, 741], "18518": 153, "18529": 153, "openvinotoolkit": 153, "nncf": 153, "develop": [153, 182, 384, 644, 645, 668, 683, 687, 688, 690, 696, 707, 713, 726, 727, 731, 734], "hessian_trac": 153, "compare_weight": 153, "float_dict": 153, "ani": [153, 158, 182, 316, 318, 361, 369, 371, 398, 422, 427, 443, 447, 469, 573, 583, 612, 622, 623, 636, 639, 643, 648, 651, 668, 675, 690, 695, 708, 709, 713, 714, 726, 734, 738], "quantized_dict": 153, "compar": [153, 320, 373, 639, 674, 686, 710, 726, 729, 732, 734, 736, 738], "being": [153, 316, 369, 651, 715], "wt_compare_dict": 153, "float_model": [153, 648], "state_dict": [153, 675, 732, 736], "qmodel": 153, "compute_error": 153, "state": [153, 204, 612, 651, 693, 726], "weight_dict": 153, "hawq_top": 153, "enable_act": 153, "modul": [154, 155, 200, 206, 213, 325, 331, 341, 342, 582, 607, 645, 668, 669, 673, 682, 686, 687, 689, 726, 728, 731, 732, 736, 739], "portabl": [156, 584], "serial": [156, 158, 583, 584], "see": [156, 199, 225, 264, 305, 313, 366, 584, 612, 643, 644, 645, 647, 668, 684, 687, 700, 701, 704, 707, 708, 712, 713, 732, 735, 736, 738], "copyreg": [156, 584], "mechan": [156, 198, 584, 726, 734, 739], "pickler": [156, 584], "pickletool": [156, 584], "comment": [156, 584, 643, 650, 670, 686, 687, 732, 737], "unpickl": [156, 158, 583, 584], "misc": [156, 584, 684], "format_vers": [156, 584], "compatible_format": [156, 584], "except": [156, 158, 447, 583, 584, 639, 668, 713, 729, 730], "pickleerror": [156, 584], "pickl": [156, 158, 583, 584], "picklingerror": [156, 584], "unpicklingerror": [156, 584], "problem": [156, 247, 290, 320, 373, 584, 686, 688, 708], "secur": [156, 584, 648, 709, 727, 742], "violat": [156, 584], "also": [156, 204, 246, 249, 264, 289, 292, 305, 313, 366, 373, 384, 428, 584, 612, 644, 646, 649, 650, 651, 669, 672, 676, 680, 682, 686, 687, 690, 695, 700, 701, 704, 707, 708, 709, 712, 713, 724, 726, 727, 729, 731, 732, 735, 738], "includ": [156, 189, 198, 203, 205, 220, 222, 231, 232, 247, 249, 256, 264, 266, 290, 292, 299, 305, 311, 321, 343, 348, 447, 573, 584, 594, 596, 597, 598, 605, 609, 610, 612, 639, 643, 649, 650, 651, 669, 670, 672, 683, 684, 685, 686, 687, 690, 693, 696, 701, 713, 717, 720, 721, 722, 726, 729, 731, 732, 736, 738], "necessarili": [156, 584], "limit": [156, 196, 352, 432, 584, 639, 648, 672, 673, 685, 729, 732, 733, 736], "attributeerror": [156, 447, 584], "eoferror": [156, 584], "importerror": [156, 584, 678], "indexerror": [156, 584], "layerwisequ": 157, "pretrained_model_name_or_path": [157, 159, 585], "op_cfg": 157, "output_dir": [157, 634, 687, 695, 696, 711, 712, 718, 721, 722], "5": [157, 176, 180, 189, 199, 231, 232, 251, 260, 266, 294, 302, 320, 373, 400, 428, 470, 649, 670, 677, 679, 683, 686, 687, 712, 717, 720, 721, 726, 728, 729, 732, 735, 737, 738, 740, 741], "order": [157, 165, 180, 199, 313, 314, 349, 352, 355, 364, 366, 367, 392, 432, 437, 446, 645, 672, 686, 710, 728, 732, 735, 736, 738], "memomeri": 157, "f": [158, 200, 583, 668, 673, 675, 729, 732, 735], "file_lik": [158, 583], "map_loc": [158, 583], "pickle_modul": [158, 200, 583], "weights_onli": [158, 583], "pickle_load_arg": [158, 583], "facil": [158, 583], "treat": [158, 583, 669], "storag": [158, 583, 680, 686, 709, 712, 732, 735], "thei": [158, 265, 447, 583, 643, 668, 673, 679, 687, 695, 710, 713, 724], "deseri": [158, 583], "were": [158, 320, 373, 583, 693, 726], "fail": [158, 583, 645, 669, 677, 716], "e": [158, 205, 231, 232, 583, 612, 643, 644, 648, 673, 676, 680, 690, 695, 696, 700, 704, 726, 732, 735, 738], "becaus": [158, 209, 214, 264, 305, 343, 583, 645, 712, 729, 735, 737, 738], "doesn": [158, 264, 305, 583, 649, 675, 687, 688, 708, 740], "certain": [158, 226, 583, 734], "howev": [158, 583, 713, 726, 732, 735], "dynam": [158, 172, 232, 237, 280, 310, 362, 444, 567, 583, 649, 669, 673, 677, 682, 687, 690, 695, 696, 697, 698, 701, 707, 727, 738, 741], "altern": [158, 231, 232, 428, 583], "argument": [158, 172, 232, 398, 447, 583, 600, 622, 646, 672, 711, 712, 715, 718, 720, 721, 722, 732], "callabl": [158, 231, 232, 318, 371, 386, 398, 451, 468, 469, 472, 583, 617, 618, 622, 623, 628, 668, 669], "locat": [158, 173, 223, 264, 305, 583, 675, 693, 700, 704, 707, 715, 729, 733, 737, 740], "resid": [158, 583], "tag": [158, 382, 570, 583, 735, 736], "wa": [158, 231, 232, 583, 649, 687, 712, 713, 716, 727, 738], "builtin": [158, 583, 675], "cuda": [158, 223, 583, 612, 623, 688, 690, 692, 726, 729], "device_id": [158, 583], "either": [158, 180, 232, 316, 369, 583, 691, 695, 715, 725, 728, 729], "final": [158, 203, 210, 223, 345, 583, 650, 687, 693, 724, 726, 729, 733, 738], "alreadi": [158, 178, 249, 263, 265, 292, 304, 583, 649, 670, 682, 702, 705, 709, 718, 738], "right": [158, 260, 302, 316, 369, 583, 643, 644, 645, 707, 713, 735, 737], "otherwis": [158, 249, 264, 292, 305, 583, 639, 643, 650, 670, 702, 705, 728, 732, 737], "fall": [158, 165, 583], "back": [158, 165, 264, 270, 305, 583, 672, 707, 713], "behavior": [158, 583, 643, 649, 650, 651, 679, 689, 732, 736, 738, 740], "wasn": [158, 583], "indic": [158, 179, 188, 199, 231, 232, 240, 245, 247, 283, 288, 290, 306, 316, 327, 369, 391, 392, 394, 567, 583, 623, 645, 669, 678, 710, 715, 736], "appear": [158, 583, 643, 701, 707, 709], "ones": [158, 316, 369, 583, 726], "put": [158, 249, 292, 583, 670, 673], "user": [158, 178, 191, 203, 215, 223, 231, 232, 235, 236, 249, 252, 256, 264, 265, 271, 278, 279, 292, 295, 299, 305, 311, 335, 340, 346, 348, 349, 373, 374, 384, 428, 433, 446, 583, 595, 628, 639, 645, 646, 648, 649, 650, 651, 656, 666, 668, 669, 673, 674, 677, 679, 682, 685, 686, 687, 688, 689, 690, 691, 692, 694, 695, 696, 698, 701, 707, 714, 715, 716, 717, 720, 721, 722, 724, 725, 726, 727, 729, 730, 731, 733, 735, 736, 737, 738, 742], "register_packag": [158, 583], "readlin": [158, 583], "tell": [158, 373, 428, 583, 728], "seek": [158, 583, 732], "o": [158, 447, 583, 668, 683, 692, 710], "pathlik": [158, 583], "metadata": [158, 583], "primit": [158, 583], "keyword": [158, 172, 232, 583], "unless": [158, 583, 679], "implicitli": [158, 182, 583], "known": [158, 267, 352, 432, 583, 687, 726, 729, 736, 738], "insecur": [158, 583, 709], "possibl": [158, 265, 583, 612, 672, 709, 725, 726, 730, 731, 738], "construct": [158, 247, 250, 251, 254, 262, 267, 269, 270, 272, 290, 293, 294, 297, 373, 378, 382, 446, 567, 569, 570, 583, 631, 643, 650, 651, 670, 675, 726, 738], "malici": [158, 583], "arbitrari": [158, 583, 687, 725], "code": [158, 203, 235, 236, 265, 278, 279, 322, 346, 349, 428, 583, 628, 645, 648, 649, 650, 651, 670, 673, 674, 675, 681, 682, 684, 686, 690, 692, 694, 695, 696, 698, 701, 707, 711, 712, 714, 715, 716, 724, 725, 726, 727, 728, 729, 734, 735, 736, 737], "never": [158, 583, 738], "could": [158, 170, 176, 205, 235, 236, 249, 278, 279, 292, 349, 374, 428, 583, 591, 628, 643, 645, 674, 687, 725, 726, 729, 732, 735, 739], "come": [158, 583, 685, 738], "untrust": [158, 583], "unsaf": [158, 583], "tamper": [158, 583], "trust": [158, 583, 672, 709], "load_state_dict": [158, 583], "ram": [158, 583], "surg": [158, 583], "checkpoint": [158, 382, 570, 583, 638, 689], "By": [158, 203, 231, 232, 313, 366, 583, 650, 651, 686, 689, 700, 701, 704, 726, 727, 732, 738], "decod": [158, 259, 260, 302, 313, 366, 583, 686, 737], "byte": [158, 583], "utf": [158, 263, 304, 583], "unicodedecodeerror": [158, 583], "ascii": [158, 583], "codec": [158, 583], "0x": [158, 583], "incorrect": [158, 583], "extra": [158, 318, 371, 583, 687, 732], "encod": [158, 316, 369, 583, 710, 737], "latin1": [158, 583], "them": [158, 203, 247, 290, 583, 645, 651, 669, 672, 677, 679, 681, 710, 713, 725, 726, 732, 738], "keep": [158, 214, 223, 344, 433, 583, 645, 649, 668, 706, 707, 733], "later": [158, 170, 176, 583, 591, 668, 714, 715, 736], "byte_arrai": [158, 583], "xdoctest": [158, 583], "skip": [158, 583, 736, 738], "undefin": [158, 223, 344, 583], "filepath": [158, 583, 639, 668], "pt": [158, 583, 638, 683, 689, 711, 727, 729, 731, 732], "onto": [158, 583], "lambda": [158, 583, 730], "loc": [158, 583], "bytesio": [158, 583], "open": [158, 268, 312, 365, 583, 631, 641, 643, 648, 677, 678, 687, 702, 705, 708, 709, 713, 714, 715, 727], "rb": [158, 583], "buffer": [158, 583], "get_modul": [159, 171, 585, 591, 611], "get_children": [159, 585], "get_named_children": [159, 585], "dowload_hf_model": [159, 585], "repo_id": [159, 585], "cache_dir": [159, 585], "repo_typ": [159, 585], "revis": [159, 585], "download": [159, 249, 292, 585, 670, 672, 683, 712, 718, 733], "hug": [159, 585, 648, 714, 727], "face": [159, 585, 643, 648, 656, 690, 694, 714, 716, 727, 733, 741], "hf": [159, 585, 685, 735, 741], "hub": [159, 585, 648, 676, 680, 698], "load_empty_model": [159, 585, 730], "automodelforcausallm": [159, 585], "empti": [159, 172, 231, 232, 585, 600, 693, 730], "get_super_module_by_nam": [159, 585], "module_nam": [159, 187, 198, 200, 210, 211, 212, 213, 215, 216, 217, 218, 220, 222, 345, 572, 585, 639], "father": [159, 203, 585], "update_modul": [159, 585], "new_modul": [159, 165, 171, 585, 591, 611, 627], "load_layer_wise_quantized_model": [159, 585], "load_tensor_from_shard": [159, 585], "shard": [159, 585], "load_tensor": [159, 585], "ipex_mixed_precis": 160, "fakeaffinetensorquantfunct": [161, 608], "affin": [161, 608, 729], "teqlinearfakequ": [161, 608], "orig_lay": [161, 608], "mullinear": [161, 172, 608], "input_scal": [161, 608], "detector": 162, "transformerbasedmodelblockpatterndetector": [162, 595], "pattern_lst": [162, 595], "block_pattern": [162, 595], "detect": [162, 165, 172, 203, 231, 232, 316, 320, 369, 373, 378, 595, 644, 645, 690, 697, 698, 726, 738], "ffn": [162, 214, 595], "trace_and_fuse_sub_graph": 163, "is_qat": 163, "traced_model": [163, 170, 591], "tequant": [164, 610], "absorb_to_lay": [164, 165, 172, 610, 611], "extra_config": [164, 172], "trainabl": [164, 610, 648, 727, 732], "move_input_devic": 165, "auto": [165, 171, 179, 180, 201, 203, 231, 232, 350, 365, 398, 430, 436, 469, 591, 618, 639, 645, 667, 690, 693, 695, 697, 698, 726, 729, 732], "kind": [165, 687], "forward_wrapp": 165, "get_embedding_contigu": 165, "contigu": 165, "is_fused_modul": 165, "_propagate_qconfig_help": 165, "collate_torch_pr": 165, "collate_result": 165, "input2tupl": 165, "append_attr": 165, "fx_model": 165, "fx_white_list": 165, "append": [165, 349, 352, 432, 645, 674, 687, 725], "graphmodul": [165, 645, 731], "addit": [165, 172, 232, 628, 650, 651, 673, 701, 709, 715, 732, 733, 738], "dir": [165, 247, 290, 634, 638, 670, 678, 681], "generate_activation_observ": [165, 595], "smooth_quant_en": [165, 595], "observ": [165, 595, 622, 651, 732, 734, 736, 738], "what": [165, 210, 245, 288, 373, 428, 595, 628, 643, 727], "check_cfg_and_qconfig": [165, 591, 595], "op_infos_from_cfg": [165, 591, 595], "output_tensor_ids_op_nam": [165, 591, 595], "paser_cfg": [165, 595], "ops_nam": [165, 595], "get_quantizable_ops_from_cfg": [165, 595], "input_tensor_ids_op_nam": [165, 595], "update_sq_scal": [165, 591], "ipex_config_path": [165, 591], "smoothquant_scale_info": [165, 591], "ipex_config": [165, 591], "json": [165, 186, 248, 264, 291, 305, 589, 591, 638, 670, 689, 708, 715, 716, 720, 721, 722, 732, 737], "auto_copi": 165, "fetch_modul": [165, 611, 627], "op_nam": [165, 228, 231, 232, 363, 445, 595, 611, 627, 639, 640, 650, 687, 726, 736], "set_modul": [165, 171, 591, 611, 627], "simple_infer": [165, 595], "get_example_input": [165, 611], "example_inp": [165, 611], "get_fallback_ord": 165, "confidence_batch": [165, 738], "fallback": [165, 232, 355, 356, 435, 437, 438, 677, 688, 710, 731, 738], "requantize_cfg": 165, "confid": 165, "ordered_op": 165, "get_mse_order_per_fp32": 165, "influenc": [165, 726], "last": [165, 171, 198, 223, 231, 232, 591, 669, 688, 690, 692, 697, 701, 729, 732, 735], "fallback_ord": 165, "get_mse_order_per_int8": 165, "get_torch_vers": 165, "match_datatype_pattern": 165, "calculate_quant_min_max": 165, "unsign": [165, 364, 446, 651, 732], "qmin": 165, "qmax": 165, "get_depth": [165, 595], "depth": [165, 595, 673, 731], "get_dict_at_depth": [165, 595], "target_depth": [165, 595], "nest": [165, 229, 572, 595], "get_element_under_depth": [165, 595], "ops_lst": [165, 595], "get_op_type_by_nam": 165, "quantizable_op": [165, 595], "collect_weight_info": 165, "fc": [165, 232, 726], "param": [165, 171, 178, 182, 191, 237, 265, 271, 280, 320, 352, 373, 432, 567, 591, 639, 649, 689, 738], "_type_": [165, 386, 634], "get_module_input_output": [165, 611], "module_hook_config": [165, 611], "input_func": [165, 611], "output_func": [165, 611], "help": [165, 192, 273, 322, 611, 668, 685, 689, 690, 696, 707, 715, 720, 721, 722, 732, 738, 739], "module_name_list": [165, 611], "requir": [165, 172, 231, 232, 238, 349, 382, 427, 570, 611, 612, 645, 649, 650, 666, 667, 669, 672, 674, 675, 679, 687, 688, 689, 691, 701, 707, 709, 714, 715, 718, 721, 722, 726, 729, 732, 733, 734, 735, 736, 738, 740], "fc1": [165, 172, 611], "preprocess": [165, 231, 232, 247, 264, 290, 305, 446, 611, 631, 675, 737], "usag": [165, 179, 180, 182, 246, 289, 316, 322, 349, 369, 405, 447, 572, 611, 623, 627, 650, 670, 675, 676, 690, 698, 709, 715, 720, 721, 722, 724, 728, 732, 737], "input_valu": [165, 611], "output_valu": [165, 611], "total_valu": [165, 611], "get_absorb_lay": [165, 611], "supported_lay": [165, 611], "no_absorb_lay": [165, 611], "allow": [165, 352, 432, 611, 612, 673, 675, 686, 687, 688, 709, 714, 726, 728, 732, 735, 738, 740], "absorpt": [165, 611], "eg": [165, 229, 249, 292, 572, 611, 670, 728], "absorb": [165, 170, 172, 176, 591, 611, 732], "absorbed_1": [165, 611], "xx": [165, 611], "get_block_prefix": [165, 611], "block_list": [165, 611], "block_num": [165, 611], "block_prefix": [165, 611], "get_hidden_st": 165, "calib": [165, 650], "rest": [165, 611, 714, 715, 720, 721, 722], "part": [165, 201, 210, 343, 345, 611, 645, 683, 688, 702, 705, 715, 717, 726, 730, 735, 739], "total_block_kwarg": 165, "total_block_arg": 165, "torchsmoothqu": [170, 591, 735], "q_func": [170, 235, 236, 278, 279, 352, 355, 356, 358, 429, 432, 433, 437, 438, 440, 591, 649, 650, 687, 738], "whose": [170, 176, 205, 344, 382, 570, 591, 681, 735, 738], "reshape_in_channel_to_last": [171, 591], "layer_nam": [171, 172, 227, 232, 591, 726], "dim": [171, 264, 305, 591, 735, 737], "reshape_scale_as_input": [171, 591], "featur": [171, 231, 232, 247, 248, 260, 264, 290, 291, 302, 305, 591, 644, 648, 666, 669, 671, 673, 687, 688, 689, 690, 694, 695, 698, 707, 709, 713, 726, 727, 733, 737], "reshape_scale_as_weight": [171, 591], "depthwis": [171, 591], "orig": [171, 591], "register_autotun": [171, 591], "quantize_4bit": [172, 611], "quantil": [172, 611, 738], "nf4": [172, 611, 648, 732], "return_int": [172, 611, 732], "fp4": [172, 611, 648, 732], "q_tensor": [172, 611], "qdq_weight_asym": [172, 611], "choos": [172, 249, 292, 611, 634, 682, 695, 727, 733, 735, 738, 740], "qdq_weight_sym": [172, 611], "full_rang": [172, 611], "rang": [172, 250, 251, 264, 293, 294, 305, 391, 405, 447, 567, 611, 628, 634, 648, 649, 651, 667, 670, 672, 673, 674, 675, 687, 710, 712, 725, 726, 729, 732, 735, 737], "amax": [172, 611], "qdq_weight_actor": [172, 611], "select": [172, 220, 223, 232, 247, 290, 611, 634, 645, 646, 667, 682, 683, 707, 726, 729, 732, 736, 738], "quant_weight": 172, "place": [172, 590, 611, 622, 674, 683, 720, 726, 736, 738], "search_clip": [172, 611], "best": [172, 188, 264, 305, 306, 311, 348, 355, 391, 437, 611, 643, 646, 648, 668, 683, 690, 696, 707, 713, 724, 729, 732, 735, 737, 738], "num": [172, 611, 639], "best_clip_ratio": [172, 611], "group_dim": [172, 619, 732], "gptq_perm": 172, "perm": [172, 264, 305, 737], "int32": [172, 634, 670, 732], "absorb_lay": 172, "absorb_dict": 172, "absorbed_lay": 172, "fc3": 172, "n_block": [172, 596, 732], "oom": 172, "teq_quant": 172, "quant_weight_w_scal": [172, 611], "autoround_quant": 172, "token": [172, 247, 258, 261, 264, 290, 301, 303, 305, 312, 313, 314, 365, 366, 367, 596, 634, 648, 670, 686, 687, 709, 710, 732, 734, 735, 737, 738], "batch_siz": [172, 232, 237, 239, 242, 243, 244, 245, 246, 247, 248, 267, 280, 282, 285, 286, 287, 288, 289, 290, 291, 310, 567, 596, 646, 669, 670, 675, 677, 681, 687, 690, 729], "lr_schedul": [172, 596, 687, 726], "dataset_nam": [172, 596, 711], "neelnanda": [172, 596], "pile": [172, 596], "10k": [172, 596, 676, 680], "dataset_split": [172, 596], "use_quant_input": [172, 596], "enable_minmax_tun": [172, 596], "lr": [172, 231, 232, 596, 673, 675, 687], "minmax_lr": [172, 596], "low_gpu_mem_usag": [172, 596], "200": [172, 263, 304, 596, 645, 716, 738], "seqlen": [172, 596, 648], "512": [172, 596], "sampler": [172, 180, 237, 239, 241, 242, 243, 244, 246, 267, 280, 282, 284, 285, 286, 287, 289, 301, 312, 361, 443, 567, 596, 669, 675], "rand": [172, 596, 690, 735], "42": [172, 195, 232, 328, 596, 685, 741], "gradient_accumulate_step": [172, 596], "not_use_best_ms": [172, 596], "dynamic_max_gap": [172, 596], "scale_dtyp": [172, 596, 634, 732], "autoround": [172, 648, 685], "pytorch": [172, 189, 191, 192, 200, 203, 206, 209, 210, 213, 218, 219, 226, 231, 232, 246, 247, 249, 252, 256, 264, 266, 271, 273, 289, 290, 292, 295, 299, 305, 310, 311, 320, 321, 341, 343, 346, 348, 356, 365, 373, 374, 383, 428, 438, 632, 639, 644, 645, 646, 648, 649, 650, 651, 667, 668, 669, 673, 674, 676, 679, 682, 683, 685, 687, 688, 689, 690, 692, 695, 696, 697, 698, 707, 709, 718, 721, 722, 726, 727, 728, 732, 733, 735, 738, 740], "temporarili": [172, 643], "mandatori": [172, 235, 236, 278, 279, 428, 687, 740], "layer1": [172, 203, 231, 232, 687, 726, 729], "automat": [172, 201, 203, 204, 231, 232, 249, 252, 259, 260, 292, 295, 302, 311, 321, 348, 645, 648, 666, 670, 682, 687, 688, 690, 692, 695, 696, 698, 700, 701, 702, 704, 705, 707, 714, 717, 725, 726, 729, 735, 737, 738], "learn": [172, 648, 649, 650, 669, 670, 677, 681, 682, 683, 687, 688, 690, 692, 695, 696, 698, 701, 702, 705, 707, 726, 727, 729, 735, 736, 738, 739], "rate": [172, 687, 726, 729], "schedul": [172, 197, 200, 210, 211, 212, 217, 218, 220, 231, 232, 312, 341, 345, 365, 687, 714, 715, 717, 725], "futur": [172, 176, 180, 235, 236, 267, 278, 279, 682, 685, 687, 698, 720, 721, 722, 739], "005": [172, 732], "length": [172, 214, 231, 232, 247, 264, 290, 305, 316, 369, 670, 686, 727, 729, 732, 737], "gradient": [172, 198, 329, 648, 682, 687, 726, 727, 741], "accumul": [172, 361, 443, 738], "step": [172, 198, 209, 210, 211, 212, 216, 217, 221, 231, 232, 343, 345, 347, 628, 650, 651, 672, 673, 674, 675, 687, 702, 705, 707, 720, 721, 722, 725, 726, 728, 731, 732, 734, 735, 736, 738], "squar": [172, 320, 355, 373, 437, 672, 686, 712, 738], "gap": [172, 672, 689], "algorithm_registri": 173, "algorithm_typ": 173, "registr": [173, 249, 256, 264, 292, 299, 305, 338], "algorithmschedul": 173, "conf": [173, 178, 188, 232, 235, 236, 265, 278, 279, 322, 329, 330, 332, 333, 334, 335, 340, 352, 355, 356, 358, 362, 374, 384, 428, 429, 432, 433, 437, 438, 440, 444, 447, 628, 645, 646, 648, 651, 666, 673, 680, 681, 687, 688, 689, 709, 711, 712, 725, 729, 730, 731, 732, 734, 735, 738], "control": [173, 231, 232, 645, 687, 713, 726, 738], "phase": [173, 646, 687, 726, 729, 731, 738], "fastbiascorrect": [174, 177], "fast_bias_correct": [175, 231, 232, 365, 729], "weight_correct": [175, 231, 232, 365, 729], "weightcorrect": 177, "1e": [177, 735, 740], "05": [177, 232, 320, 373, 400, 686, 735, 741], "evalu": [178, 180, 188, 205, 231, 235, 236, 247, 265, 278, 279, 290, 306, 313, 316, 317, 318, 320, 322, 366, 369, 370, 371, 373, 374, 384, 398, 428, 628, 631, 646, 649, 650, 668, 670, 673, 674, 681, 682, 685, 686, 687, 688, 690, 696, 698, 701, 707, 724, 726, 729, 734, 735, 736, 738, 740], "set_env_var": [178, 265], "env_var": [178, 265], "overwrite_exist": [178, 265], "env": [178, 265, 678, 720, 721, 722], "set_all_env_var": [178, 265], "physic": [178, 265, 643, 666, 715], "core": [178, 231, 232, 265, 390, 644, 666, 684, 700, 704, 715, 741], "get_architectur": [178, 265], "architectur": [178, 265, 323, 326, 648, 666, 673, 687, 714, 726, 727, 732, 739], "get_threads_per_cor": [178, 265], "thread": [178, 231, 232, 265, 422, 427, 612, 669, 717], "get_thread": [178, 265], "get_physical_id": [178, 265], "socket": [178, 265, 639, 715, 717, 741], "get_core_id": [178, 265], "id": [178, 263, 265, 304, 313, 315, 316, 317, 318, 366, 368, 369, 370, 371, 648, 686, 715, 716, 720, 721, 722, 734, 738], "get_bounded_thread": [178, 265], "core_id": [178, 265], "bind": [178, 265], "run_inst": 178, "b_dataload": [178, 231, 232, 666, 687], "b_func": [178, 666], "benchmarkconfig": [178, 231, 232, 666, 672, 687], "goal": [178, 306, 311, 335, 340, 348, 374, 428, 650, 669, 725, 729, 738], "prefer": [178, 311, 348, 428, 726, 732], "space": [178, 195, 196, 211, 212, 217, 218, 231, 232, 235, 236, 278, 279, 311, 318, 323, 326, 327, 328, 348, 352, 355, 362, 371, 374, 428, 432, 437, 444, 643, 644, 646, 649, 650, 651, 668, 726, 729, 735, 740], "etc": [178, 188, 263, 304, 306, 311, 318, 335, 340, 348, 371, 374, 428, 573, 594, 596, 597, 598, 605, 609, 610, 638, 648, 673, 682, 709, 713, 726, 734, 738], "generate_prefix": 178, "core_list": 178, "command": [178, 265, 628, 672, 675, 690, 692, 695, 700, 704, 708, 709, 711, 712, 713, 715], "numactl": [178, 678, 693, 701], "call_on": 178, "cmd": 178, "log_fil": [178, 421, 426], "window": [178, 666, 683, 707, 708], "config_inst": 178, "raw_cmd": 178, "multi": [178, 201, 203, 214, 316, 369, 373, 428, 646, 669, 670, 682, 687, 724, 726, 729, 738], "trigger": [178, 210, 345], "summary_benchmark": 178, "summari": [178, 628, 672, 702, 705, 736, 741], "profil": [178, 232, 365], "benchmark_with_raw_cmd": 178, "fit_with_raw_cmd": 178, "cores_per_inst": [178, 231, 232, 666, 687, 728], "num_of_inst": [178, 231, 232, 666, 687, 728], "test": [178, 231, 232, 264, 305, 644, 648, 672, 683, 715, 720, 741], "fit": [178, 205, 231, 232, 352, 374, 428, 432, 447, 628, 645, 648, 666, 669, 670, 672, 675, 680, 681, 686, 687, 688, 689, 709, 710, 726, 729, 730, 731, 732], "pb": [178, 231, 232, 374, 382, 428, 570, 666, 675, 680, 687, 689, 709, 712, 720, 736, 741], "eval_dataload": [178, 231, 232, 235, 236, 278, 279, 349, 352, 355, 356, 358, 374, 428, 429, 432, 433, 437, 438, 440, 628, 666, 681, 686, 687, 709, 729, 730, 738], "register_config": [179, 668], "framework_nam": [179, 668], "algo_nam": [179, 668], "prioriti": [179, 623, 668, 718], "examplealgorithm": 179, "examplealgorithmconfig": 179, "larger": [179, 623, 650, 726, 732, 735], "higher": [179, 231, 232, 235, 236, 278, 279, 327, 374, 428, 623, 628, 645, 672, 673, 677, 686, 710, 726, 729, 734], "tri": [179, 232, 668, 738], "stage": [179, 351, 356, 429, 431, 438, 673, 726, 736, 738], "baseconfig": [179, 180, 182, 466, 468, 472, 622, 668], "white_list": [179, 400, 466, 470, 619], "op_name_or_module_typ": [179, 400, 466, 470, 619], "default_white_list": [179, 400, 466, 470, 619], "composableconfig": [179, 668], "register_supported_configs_for_fwk": 179, "fwk_name": [179, 668], "deprec": [180, 668, 702, 705, 733, 737], "eval_acc": 180, "eval_perf": 180, "mold": 180, "user_eval_fns1": 180, "user_eval_fns2": 180, "eval_fn": [180, 398, 469, 618], "user_eval_fns3": 180, "user_eval_fns4": 180, "sequentialsampl": [180, 245, 288, 567], "config_sourc": 180, "alwai": [180, 269, 316, 369, 373, 428, 672, 686, 687, 712, 732], "_configset": 180, "tuningconfig": [180, 398, 469, 618], "config_set": [180, 398], "base_config": [180, 466, 468, 470, 472, 622], "default_sampl": 180, "tolerable_loss": [180, 231, 232, 687, 738], "max_trial": [180, 231, 232, 687, 738], "pipelin": [180, 188, 306, 323, 324, 349, 644, 674, 687, 725], "tune_config": [180, 398, 469, 618, 650], "config1": 180, "config2": 180, "stop": [180, 231, 232, 687, 738, 739, 740], "met": [180, 646, 679, 729, 736], "trial": [180, 738], "reach": [180, 205, 221, 231, 232, 347, 644, 669, 709, 726, 738], "metric": [180, 188, 231, 232, 235, 236, 268, 278, 279, 306, 311, 312, 327, 335, 340, 348, 349, 365, 374, 428, 628, 631, 646, 649, 650, 670, 672, 675, 687, 688, 709, 729, 734, 735, 736, 738, 739, 740, 741], "toler": [180, 712], "relative_loss": 180, "fp32_baselin": [180, 631, 649], "eval_result_of_q_model": 180, "paramlevel": 182, "enumer": [182, 327, 627, 628, 649, 673, 674, 675, 687, 725, 726, 736], "deriv": [182, 188, 198, 207, 208, 209, 215, 216, 217, 218, 219, 220, 221, 222, 306, 343, 345, 347, 627], "tuningparam": 182, "default_v": 182, "tunable_typ": 182, "op_level": 182, "tunabl": 182, "fakealgoconfig": 182, "params_list": [182, 398], "simpl": [182, 264, 305, 683, 687, 726, 734, 735, 738], "give": [182, 650, 707, 738], "enough": [182, 729], "simple_attr": 182, "complex": [182, 668, 687, 688, 726], "explicitli": [182, 231, 232, 681, 726], "complex_attr": 182, "model_attr": 182, "model_level": 182, "explain": [182, 651, 672, 735], "logger": [184, 312, 341, 365, 572, 595, 629, 632, 639], "tuninglogg": 185, "unifi": [185, 311, 348, 573, 594, 596, 597, 598, 605, 609, 610, 649, 650, 651, 669, 681, 682, 686, 687, 689], "assist": [185, 733], "team": [185, 318, 371, 643, 731], "retriev": [185, 245, 288, 567, 726], "save_config_map": 186, "config_map": 186, "qconfig_file_path": 186, "load_config_map": 186, "config_name_map": 186, "reload": [186, 691, 708, 710, 713], "configregistri": 186, "get_all_config": 186, "lazyimport": [187, 572, 639], "lazi": [187, 572, 639], "till": [187, 572, 639, 738], "cpuinfo": [187, 572, 639], "dump_elapsed_tim": [187, 572, 606, 639, 649], "customized_msg": [187, 572, 606, 639], "elaps": [187, 572, 606, 639], "set_random_se": [187, 231, 232, 639], "set_workspac": [187, 231, 232, 639], "workspac": [187, 231, 232, 638, 639, 689, 715, 720, 721, 722], "set_resume_from": [187, 231, 232, 639], "resume_from": [187, 231, 232, 639], "set_tensorboard": [187, 231, 232, 639], "tensorboard": [187, 231, 232, 631, 639, 649, 687, 710], "compon": [188, 306, 312, 349, 365, 645, 668, 672, 675, 683, 684, 690, 707, 715, 725, 726], "quantizationawaretrainingcallback": 188, "pruningcallback": 188, "distillationcallback": 188, "basecallback": 188, "design": [188, 246, 269, 274, 289, 373, 433, 646, 648, 687, 695, 698, 726, 729, 739], "mainli": [188, 221, 274, 347, 648, 687, 726, 729], "prune": [188, 197, 198, 200, 201, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 231, 232, 274, 275, 312, 329, 330, 332, 333, 334, 338, 340, 341, 343, 344, 345, 347, 349, 365, 639, 648, 675, 676, 679, 680, 682, 725, 727, 739, 740], "distil": [188, 197, 231, 232, 266, 273, 274, 312, 365, 648, 676, 680, 682, 725, 739, 740], "In": [188, 207, 208, 209, 214, 215, 216, 220, 232, 246, 274, 289, 316, 343, 345, 369, 384, 612, 643, 645, 646, 648, 649, 650, 669, 670, 672, 673, 674, 675, 686, 687, 697, 700, 701, 704, 710, 711, 712, 713, 720, 721, 722, 724, 725, 726, 729, 731, 732, 734, 735, 736, 737, 738, 739], "adaptor": [188, 231, 232, 364, 446, 455, 456, 631, 648, 651, 682, 730, 731, 733, 735, 736, 739], "knowledg": [188, 189, 231, 232, 266, 306, 674, 676, 680, 682, 687, 689, 740], "transfer": [188, 254, 297, 306, 670, 673, 674, 687, 735], "teacher": [188, 231, 232, 306, 673, 674, 687, 741], "student": [188, 192, 231, 232, 247, 273, 290, 306, 670, 673, 674, 741], "distillation_conf": [188, 228, 306], "_epoch_ran": [188, 306], "integ": [188, 209, 210, 231, 232, 306, 316, 320, 327, 343, 345, 369, 373, 447, 649, 651, 667, 729, 732, 735, 738], "much": [188, 198, 231, 232, 264, 305, 306, 673, 701, 735, 737], "epoch": [188, 211, 212, 217, 306, 345, 628, 669, 673, 674, 675, 687, 725, 726, 740], "ran": [188, 306], "eval_frequ": [188, 306], "frequenc": [188, 210, 231, 232, 306, 345, 687, 726, 740], "term": [188, 211, 212, 217, 218, 220, 306, 644, 667, 673, 684, 686, 724, 725, 738], "best_scor": [188, 306], "best_model": [188, 306, 638, 732], "found": [188, 306, 648, 668, 673, 685, 688, 695, 712, 716, 735, 738, 741], "critet": [189, 266], "tensorflowcrossentropyloss": [189, 266], "pytorchcrossentropyloss": [189, 266], "tensorflowsparsecategoricalcrossentropi": 189, "tensorflowknowledgedistillationloss": [189, 266], "pytorchknowledgedistillationloss": [189, 266, 687], "pytorchintermediatelayersknowledgedistillationloss": [189, 266], "tensorflowcriterion": [189, 266], "pytorchcriterion": [189, 266], "criterion_registri": [189, 266], "criterion_typ": [189, 266], "registry_criterion": [189, 266], "param_dict": [189, 191, 266, 271], "crossentropyloss": [189, 231, 232, 673, 687], "sparsecategoricalcrossentropyloss": 189, "knowledgedistillationframework": [189, 266], "student_model": [189, 232, 266, 687], "teacher_model": [189, 231, 232, 266, 673, 674, 687], "knowledgedistillationloss": [189, 266, 687, 740], "temperatur": [189, 231, 232, 266, 687, 740], "loss_typ": [189, 195, 231, 232, 266, 687, 740], "ce": [189, 231, 232, 266, 687, 740], "loss_weight": [189, 231, 232, 266, 687, 740], "pytorchknowledgedistillationlosswrapp": [189, 266], "tensorflowknowledgedistillationlosswrapp": 189, "tensorflowknowledgedistillationlossextern": [189, 266], "intermediatelayersknowledgedistillationloss": [189, 266], "layer_map": [189, 232, 266, 673], "add_origin_loss": [189, 232, 266], "pytorchintermediatelayersknowledgedistillationlosswrapp": [189, 266], "selfknowledgedistillationloss": [189, 266], "selfknowledg": [189, 266], "pytorchselfknowledgedistillationloss": 189, "pytorchselfknowledgedistillationlosswrapp": 189, "multipl": [191, 201, 233, 234, 238, 239, 247, 248, 250, 251, 252, 253, 254, 258, 261, 264, 271, 276, 277, 281, 282, 284, 290, 291, 293, 294, 295, 296, 297, 301, 303, 305, 321, 374, 375, 376, 378, 384, 612, 666, 670, 677, 687, 714, 717, 725, 726, 734, 735, 738], "tensorflowoptim": [191, 271], "pytorchoptim": [191, 271], "optimizer_registri": [191, 271], "optimizer_typ": [191, 271], "cross": [191, 271, 320, 373, 681, 738], "tensorflowsgd": [191, 271], "sgd": [191, 231, 232, 271, 673, 687, 728, 740], "tensorflowadamw": [191, 271], "tensorflow_addon": [191, 271], "adamw": [191, 271], "tensorflowadam": 191, "adam": [191, 740], "pytorchsgd": [191, 271], "record_output": [192, 273], "output_process": [192, 273], "get_activ": [192, 273], "hyper": [193, 740], "sa_optim": [193, 197], "simul": [194, 651], "anneal": 194, "register_search": 195, "searcher": [195, 203, 232, 328], "registri": [195, 196, 198, 205, 210, 219, 220, 221, 222, 343, 345, 347, 646], "sure": [195, 205, 210, 219, 221, 343, 345, 347, 666, 709], "search_spac": [195, 228, 232, 323, 326, 327, 328], "gridsearch": [195, 328], "grid": [195, 232, 328, 646, 726], "whole": [195, 328, 651, 709, 729, 741], "exhaust": [195, 232, 312, 328, 354, 365, 436, 728], "randomsearch": [195, 328], "randomli": [195, 264, 305, 328, 352, 432, 646, 735, 737, 738], "bayesianoptimizationsearch": [195, 328], "bayesian": [195, 232, 312, 328, 354, 365, 436, 646, 726, 728], "xgbsearcher": 195, "higher_is_bett": [195, 231, 232, 373, 428, 738, 740], "reg": [195, 197, 200, 211, 212, 217, 218, 232], "min_train_sampl": [195, 232], "10": [195, 231, 232, 249, 292, 352, 432, 648, 666, 670, 677, 683, 685, 687, 709, 710, 726, 728, 737, 738, 741], "xgboost": [195, 726], "searchspac": 196, "factori": [196, 380, 408, 410, 415, 418, 420, 425, 571], "actual": [196, 320, 373, 675], "interv": [196, 216, 726], "continu": [196, 208, 316, 343, 369, 646, 685, 687, 708, 726, 739], "learning_r": [196, 231, 232, 687, 728, 740], "001": [196, 249, 292, 670, 675, 735, 740], "num_train_epoch": [196, 687, 726], "20": [196, 264, 305, 712, 715, 720, 721, 722, 726, 737, 740, 741], "weight_decai": [196, 687, 740], "register_searchspac": 196, "pruner": [196, 197, 312, 329, 330, 331, 332, 333, 335, 340, 341, 343, 346, 365, 687, 726, 740], "basesearchspac": 196, "discretesearchspac": 196, "continuoussearchspac": 196, "hpo": [197, 235, 278, 726], "model_slim": [197, 200, 214], "auto_slim": [197, 200, 202], "pattern_analyz": [197, 200, 202], "weight_slim": [197, 200, 202, 214], "mha": [197, 200, 206, 213, 726], "ninm": [197, 200, 206], "nxm": [197, 200, 206, 216, 231, 232, 339, 343, 726], "basic": [197, 200, 203, 205, 213, 231, 232, 263, 304, 312, 323, 343, 354, 358, 361, 365, 436, 440, 443, 628, 682, 683, 687, 709, 728, 734], "block_mask": [197, 198, 200, 213], "pattern_lock": [197, 200, 213, 231, 232, 312, 331, 365], "retrain_fre": [197, 198, 200, 213, 726], "wanda": [197, 200], "criteria": [197, 200, 231, 232, 311, 335, 340, 343, 345, 348, 645, 707, 735], "tf_criteria": [197, 200], "callback": [197, 335, 340, 628, 631, 645, 687, 725, 726, 729], "register_criterion": [198, 222], "get_criterion": 198, "pruningcriterion": [198, 222], "about": [198, 222, 639, 643, 668, 669, 687, 712, 713, 726, 731, 738, 739, 741], "score": [198, 205, 210, 214, 222, 231, 232, 313, 314, 316, 317, 318, 320, 345, 366, 367, 369, 370, 371, 373, 435, 631, 645, 686, 710, 724, 726, 734, 738], "magnitudecriterion": [198, 222], "magnitud": [198, 222, 231, 232, 312, 320, 331, 365, 373, 682, 726], "criterion_class": [198, 222], "determin": [198, 205, 210, 222, 231, 232, 633, 643, 645, 667, 726, 729], "gradientcriterion": 198, "absolut": [198, 231, 232, 320, 373, 686, 687, 726, 729, 738], "snipcriterion": 198, "snip": [198, 231, 232, 345, 682, 726, 741], "product": [198, 648, 682, 688, 690, 691, 707, 713, 727, 729, 734, 738], "singl": [198, 221, 231, 232, 240, 247, 264, 283, 290, 305, 316, 345, 347, 369, 373, 428, 472, 567, 645, 670, 672, 683, 713, 726, 730, 735], "shot": [198, 217, 218, 221, 274, 345, 347, 646, 682, 687, 726, 727, 732], "connect": [198, 345, 707, 709, 716, 726, 734], "sensit": [198, 329, 345, 682, 726], "1810": [198, 345], "02340": [198, 345], "snipmomentumcriterion": 198, "snip_momentum": [198, 231, 232, 687, 726], "momentum": [198, 345, 682, 687, 726, 740], "preserv": [198, 667, 726, 732], "beta": 198, "blockmaskcriterion": 198, "9": [198, 231, 232, 645, 683, 687, 726, 728, 735, 738, 740, 741], "retrainfreecriterion": 198, "return_reorder_indic": 199, "6": [199, 231, 232, 679, 729, 735, 738, 741], "rel": [199, 231, 232, 384, 687, 710, 728, 738, 740, 741], "posit": [199, 264, 305, 398, 622, 643, 686, 690, 715, 720, 721, 722], "remain": [199, 695], "unchang": 199, "neg": 199, "flip": [199, 260, 264, 302, 305, 737], "initial_metr": 199, "sparsity_ratio": [199, 225], "prune_n": [199, 225], "prune_m": [199, 225], "pow_of_var_regrow": 199, "max_cycle_tim": 199, "without_same_sign": 199, "update_threshold": 199, "power": [199, 673, 687, 701, 727], "cycl": [199, 646], "sign": [199, 364, 446, 644, 648, 651, 667, 709, 727, 729, 732, 734], "paper": [199, 225, 673, 726, 732, 735], "2310": 199, "08915": 199, "pickle_protocol": 200, "_use_new_zipfile_seri": 200, "prepare_prun": [200, 726], "loss_func": [200, 219], "assertionerror": [200, 206, 213, 223, 343, 344, 345, 374], "slim": [201, 202, 203, 316, 369, 380, 382, 570, 571, 689, 726], "round_multipli": 201, "spars": [201, 215, 345, 670, 727], "model_slim_ffn2": 201, "some": [201, 203, 231, 232, 247, 290, 344, 650, 651, 668, 670, 672, 677, 683, 686, 687, 709, 710, 711, 712, 715, 724, 726, 729, 731, 732, 735, 736, 738, 739], "perman": [201, 643, 726], "obtain": [201, 203, 212, 217, 220, 223, 344, 612, 645, 650, 715, 726, 734, 735, 738], "acceler": [201, 623, 648, 673, 687, 690, 698, 707, 710, 714, 726, 727, 731, 732, 735, 738], "directli": [201, 231, 232, 246, 289, 316, 320, 344, 369, 373, 648, 686, 687, 694, 726, 728, 729, 736], "sprase": 201, "model_slim_mha": 201, "parse_auto_slim_config": [201, 726], "ffn2_sparsiti": [201, 726], "mha_spars": [201, 726], "generate_ffn2_pruning_config": 201, "consecut": [201, 203, 204, 726], "generate_mha_pruning_config": 201, "head": [201, 203, 207, 214, 223, 726], "get_attribut": 203, "descent": [203, 648, 727], "get_common_modul": 203, "layer2": [203, 687, 726, 729], "nearest": [203, 264, 305, 400, 619, 732, 737], "print_iter": 203, "recipesearch": 203, "root": [203, 247, 248, 249, 252, 290, 291, 292, 295, 320, 373, 670, 675, 686, 687, 740], "levelwis": 203, "wai": [203, 248, 249, 252, 291, 292, 295, 382, 570, 623, 646, 651, 669, 670, 672, 686, 687, 690, 693, 708, 709, 713, 714, 715, 725, 726, 729, 732, 735, 738, 740], "huggingfac": [203, 214, 247, 290, 634, 670, 676, 680, 695, 696, 697, 698, 718, 719, 721, 722, 735, 741], "bert": [203, 232, 243, 246, 247, 264, 286, 289, 290, 305, 648, 670, 673, 686, 688, 695, 718, 721, 722, 726, 737, 741], "recipe_sampl": 203, "bertattent": 203, "dens": [203, 221, 231, 232, 347, 710, 726, 741], "searching_result": 203, "jitbasicsearch": 203, "placeholder_shap": 203, "placeholder_dtyp": 203, "jit": [203, 231, 690, 692, 697, 735, 736], "script": [203, 313, 314, 317, 318, 366, 367, 370, 371, 612, 644, 648, 675, 682, 690, 694, 697, 698, 701, 718, 720, 727], "static_graph": 203, "flatten_static_graph": 203, "target_lay": 203, "linear2linearsearch": 203, "target_op_lut": 203, "lookup": 203, "tabl": [203, 214, 639, 651, 672, 677, 710, 712, 741], "current_pattern": 203, "statu": [203, 636, 643, 669, 717, 720, 721, 722, 724, 726], "selfmhasearch": 203, "classifierheadsearch": 203, "classifi": [203, 223, 247, 290, 320, 373, 670, 673], "classifierheadsearchertf": 203, "squeezer": 204, "postcompressionutil": 204, "librari": [204, 268, 312, 365, 422, 641, 648, 683, 687, 688, 692, 701, 707, 727, 729], "relat": [204, 220, 306, 316, 335, 340, 343, 369, 446, 631, 651, 690, 714, 715, 726, 740], "linearcompress": 204, "root_linear": 204, "target_linear": 204, "while": [204, 215, 223, 345, 352, 432, 612, 649, 650, 670, 676, 682, 688, 690, 695, 707, 709, 726, 728, 729, 732, 735], "hidden": [204, 209, 343, 649], "layer_1": 204, "act_fn": 204, "layer_2": 204, "linearcompressioniter": 204, "linear_pattern": 204, "register_pattern": [205, 343], "basepattern": [205, 207, 209], "unit": [205, 343, 644, 715, 726], "4x1": [205, 231, 232, 339, 687, 726, 741], "is_glob": [205, 343], "local": [205, 231, 232, 343, 572, 612, 639, 700, 704, 709, 716, 717, 726, 734], "contrast": [205, 343, 737], "keep_mask_lay": 205, "invalid_lay": 205, "max_sparsity_ratio_per_op": [205, 210, 228, 231, 232, 687, 726], "sparsiti": [205, 207, 208, 210, 211, 212, 215, 217, 218, 221, 223, 231, 232, 345, 347, 639, 648, 670, 682, 687, 739, 741], "min_sparsity_ratio_per_op": [205, 228, 231, 232, 687, 726], "minimum": [205, 231, 232, 651, 667, 672, 687, 698, 726, 735, 738], "target_spars": [205, 228, 231, 232, 687, 726, 728, 740], "pytorchbasepattern": [205, 220], "kerasbasepattern": 205, "get_pattern": [206, 343], "patternmha": 207, "doc": [207, 208, 231, 232, 343, 361, 362, 373, 428, 443, 444, 447, 572, 639, 686, 687, 702, 705, 713], "md": [207, 208, 231, 232, 343, 373, 428], "n": [207, 208, 231, 232, 248, 264, 291, 305, 314, 343, 367, 447, 651, 668, 670, 672, 673, 715, 726, 729, 735, 737], "pytorchpatternninm": 208, "out": [208, 231, 232, 247, 248, 249, 290, 291, 292, 311, 343, 348, 590, 644, 645, 648, 670, 690, 695, 700, 701, 702, 704, 705, 707, 713, 726, 728, 729, 732], "pytorchpatternnxm": 209, "kept": [209, 343], "block_siz": [209, 343, 619, 732], "height": [209, 260, 264, 302, 305, 343, 675, 737, 740], "width": [209, 260, 264, 302, 305, 343, 667, 675, 726, 729, 737, 740], "vertic": [209, 264, 305, 343, 737], "keraspatternnxm": 209, "register_prun": [210, 219, 345], "baseprun": [210, 215, 217, 219], "current_sparsity_ratio": [210, 345], "global_step": [210, 345], "start_step": [210, 228, 231, 232, 345, 687, 726, 728], "end_step": [210, 228, 231, 232, 345, 687, 726, 728], "pruning_frequ": [210, 228, 231, 232, 687, 726], "target_sparsity_ratio": [210, 345], "show": [210, 639, 643, 673, 675, 687, 693, 708, 709, 710, 712, 715, 720, 721, 722, 735, 738, 739], "pytorchbaseprun": [210, 218], "kerasbaseprun": 210, "pytorchbasicprun": 211, "arrang": [211, 212, 217, 218, 248, 249, 252, 291, 292, 295, 670, 726], "proce": [211, 212, 217, 218], "regul": [211, 212, 217, 218], "kerasbasicprun": 211, "pytorchblockmaskprun": 212, "grad": [212, 217], "parse_valid_pruner_typ": 213, "get_prun": [213, 345], "pythonmultiheadattentionprun": 214, "mha_modul": 214, "partial": [214, 726, 729], "qkv": 214, "feedward": 214, "simultan": [214, 690, 714, 725, 728], "qkv_name": 214, "query_layer_nam": 214, "key_layer_nam": 214, "value_layer_nam": 214, "ffn_name": 214, "attention_ffn_nam": 214, "mha_nam": 214, "qkv_modul": 214, "ffn_modul": 214, "mha_compress": 214, "mhacompress": 214, "modifi": [214, 249, 292, 427, 446, 645, 651, 675, 679, 711, 712, 726, 740], "linear_lay": 214, "independ": [214, 422, 427, 651], "4x": [214, 646, 729], "subsequ": [214, 650, 690, 707], "head_mask": 214, "mha_head_s": 214, "similar": [214, 228, 687, 711, 728, 735, 738, 740], "mha_scor": 214, "lock": [215, 333, 334, 682, 725, 726], "pytorchpatternlockprun": 215, "parent": [215, 216, 221, 339, 345, 347, 736], "pytorchprogressiveprun": 216, "basicprun": [216, 219], "interpol": [216, 264, 305, 686, 726, 737], "fine": [216, 247, 290, 668, 670, 693, 726, 727, 729], "grain": [216, 726, 727, 738], "improv": [216, 612, 644, 667, 668, 687, 690, 707, 708, 710, 726, 727, 729, 731, 732, 738, 739, 741], "ad": [216, 247, 290, 313, 352, 366, 392, 432, 650, 651, 672, 688, 690, 695, 698, 702, 705, 715, 726, 732, 736], "retrain": [217, 674], "pytorchretrainfreeprun": 217, "pruner_class": [217, 218], "fast": [217, 231, 232, 726, 727, 732], "retrainfreeprun": [217, 219], "effect": [217, 648, 649, 726, 727], "2204": 217, "09656": 217, "sparsegptprun": [218, 219], "most": [218, 231, 232, 320, 373, 672, 687, 688, 726, 729, 732, 735, 738, 741], "sparsegpt": [218, 219, 726], "massiv": [218, 726], "One": [218, 651, 668, 670, 675, 682, 712, 726, 727, 738], "2301": [218, 726], "00774": [218, 726], "opt": [219, 648, 685, 695, 726, 735, 738, 741], "least": [219, 346, 644, 687, 726, 738], "templat": [219, 346, 687, 726], "tree": [219, 346, 362, 444, 715], "nlp": [219, 231, 232, 346, 695, 711, 726, 729], "huggingface_model": [219, 346, 711], "classif": [219, 247, 264, 290, 305, 320, 346, 373, 673, 677, 686, 696, 710, 718, 721, 722, 726, 727], "pytorch_prun": [219, 312, 365], "eager": [219, 346, 427, 648, 675, 682, 729, 731, 736], "config_file_path": [219, 346], "pruner_info": [219, 346], "pruning_class": 219, "avail": [219, 231, 232, 378, 648, 652, 654, 658, 661, 664, 668, 676, 678, 680, 682, 700, 704, 709, 714, 715, 716, 720, 721, 722, 726, 738, 741], "regular": [220, 313, 344, 366], "register_reg": 220, "regulariz": 220, "get_reg_typ": 220, "get_reg": 220, "basereg": 220, "grouplasso": 220, "coeff": 220, "lasso": [220, 330, 682, 726], "reg_term": 220, "register_schedul": [221, 347], "get_schedul": [221, 347], "pruningschedul": 221, "gradual": [221, 347, 726], "oneshotschedul": [221, 347], "iterativeschedul": [221, 347], "get_tf_criterion": 222, "get_sparsity_ratio": 223, "elementwise_over_matmul_gemm_conv": 223, "elementwise_over_al": 223, "blockwise_over_matmul_gemm_conv": 223, "get_sparsity_ratio_tf": 223, "check_config": [223, 344], "prune_config": [223, 344], "everyth": [223, 344, 695], "reset_none_to_default": 223, "update_param": 223, "process_weight_config": 223, "global_config": [223, 329, 330, 332, 333, 334], "local_config": [223, 231, 232, 329, 330, 332, 333, 334], "default_config": 223, "pruners_info": 223, "process_yaml_config": 223, "check_key_valid": 223, "template_config": 223, "user_config": 223, "process_and_check_config": [223, 344], "process_config": [223, 344], "parse_last_linear": 223, "often": [223, 669, 673, 712, 725, 726], "act": [223, 245, 288, 567, 643], "might": [223, 645, 668, 709, 738], "caus": [223, 650, 669, 691, 710, 712, 726, 732], "drop": [223, 316, 344, 369, 644, 687, 688, 701, 726, 732, 735, 741], "parse_last_linear_tf": 223, "parse_to_prun": [223, 344], "parse_to_prune_tf": 223, "generate_pruner_config": 223, "dotdict": [223, 228, 232, 384, 639], "get_lay": 223, "collect_layer_input": 223, "layer_idx": 223, "layer_input": 223, "previou": [223, 650, 651, 687, 726, 733, 735, 736, 738, 739, 741], "prune_wanda": 225, "use_vari": 225, "low_mem_usag": 225, "dsnot": 225, "sij": 225, "wij": 225, "xj": 225, "2306": [225, 732], "11695": 225, "recurs": [226, 639], "wrappedgpt": 227, "layer_id": 227, "gpt": [227, 648, 685, 711, 726, 735, 741], "prunerv2": 228, "pruning_typ": [228, 231, 232, 687, 726], "pruning_scop": [228, 231, 232, 687, 726], "sparsity_decay_typ": [228, 231, 232, 687, 726], "pruning_op_typ": [228, 231, 232, 687, 726], "reg_typ": 228, "criterion_reduce_typ": 228, "resume_from_pruned_checkpoint": 228, "cfg_fname": 228, "parser": 228, "quantization_conf": 228, "pruning_conf": 228, "graph_optimization_conf": [228, 311], "mixedprecision_conf": 228, "benchmark_conf": 228, "nasconfig": [228, 232, 324, 326, 646], "approach": [228, 231, 232, 323, 324, 326, 645, 646, 648, 667, 670, 673, 682, 687, 695, 707, 710, 718, 720, 721, 722, 726, 727, 728, 730, 732, 738, 740], "search_algorithm": [228, 232, 312, 325, 365, 646], "na": [228, 232, 312, 365, 378, 682, 685, 741], "procedur": [228, 646, 726, 738], "defaultconf": 228, "instead": [228, 229, 232, 246, 289, 639, 693, 695, 698, 713, 726, 732], "notat": [228, 229, 232, 639], "deep_get": [229, 384, 572], "dot": [229, 572, 688, 729], "person": [229, 572, 643, 727], "john": [229, 572], "deep": [229, 572, 648, 649, 650, 669, 682, 683, 687, 688, 690, 692, 695, 696, 698, 701, 707, 727, 729, 738, 739], "deep_set": [229, 384], "sex": [229, 643], "male": 229, "pythonic_config": 230, "random_se": [231, 232, 352, 432, 687, 740], "1978": [231, 232], "default_workspac": [231, 232], "directori": [231, 232, 248, 249, 291, 292, 382, 570, 572, 634, 636, 638, 639, 670, 675, 678, 700, 702, 704, 705, 711, 713, 736], "histori": [231, 232, 638, 639, 707, 711, 738], "nc_workspac": [231, 232, 710, 711], "datetim": [231, 232], "now": [231, 232, 264, 305, 645, 646, 651, 670, 675, 698, 728, 737, 738], "strftime": [231, 232], "d_": [231, 232], "resum": [231, 232, 235, 236, 278, 279, 356, 358, 429, 432, 433, 437, 438, 440], "flag": [231, 232, 314, 367, 672], "visual": [231, 232, 648, 698, 707, 734, 736, 738, 739], "displai": [231, 232, 361, 362, 443, 444, 572, 639, 707, 710], "2022": [231, 232, 684, 726, 732, 735], "workspace_path": [231, 232], "accuracycriterion": [231, 232, 687, 738], "accept": [231, 232, 447, 643, 666, 668, 669, 709, 732], "accuracy_criterion": [231, 232, 384, 687, 711, 724, 728, 738, 740], "warmup": [231, 232, 666, 687, 728], "inter_num_of_thread": [231, 232, 422, 427, 687, 728], "intra_num_of_thread": [231, 232, 422, 427, 687, 728], "benchmark": [231, 232, 267, 312, 349, 365, 384, 639, 648, 656, 689, 690, 694, 698, 701, 707, 710, 738, 739, 740, 741], "onnxrt_trt_ep": [231, 232, 688, 729], "onnxrt_cuda_ep": [231, 232, 688, 729], "inter": [231, 232], "intra": [231, 232], "quantizationconfig": 231, "post_training_static_qu": [231, 670, 687, 728, 738], "calibration_sampling_s": [231, 232, 687, 712], "op_type_dict": [231, 232, 648, 651, 728, 729, 732, 738], "op_name_dict": [231, 232, 672, 687, 710, 712, 729, 738], "strategy_kwarg": [231, 232, 734, 738], "timeout": [231, 232, 687, 728, 738, 740], "quant_level": [231, 232, 710, 732, 735, 738], "posttrainingquantconfig": [231, 232, 428, 645, 648, 651, 669, 672, 677, 680, 686, 687, 689, 709, 710, 711, 712, 729, 730, 731, 732, 734, 735, 738], "quantizationawaretrainingconfig": [231, 232, 628, 645, 674, 677, 687, 729, 731, 738], "cv": [231, 232, 726], "object_detect": [231, 232, 316, 369], "recommendation_system": [231, 232], "overrid": [231, 232, 639, 668], "quantiztaion": [231, 232], "smooth_quant_arg": [231, 232, 729, 735], "gemm_to_matmul": [231, 232, 729], "graph_optimization_level": [231, 232, 728, 729], "disable_al": [231, 232, 728], "enable_bas": [231, 232], "enable_extend": [231, 232], "enable_al": [231, 232], "first_conv_or_matmul_quant": [231, 232, 729], "last_conv_or_matmul_quant": [231, 232, 729], "pre_post_process_quant": [231, 232, 729], "postprocess": [231, 232, 258, 261, 264, 268, 305, 312, 365, 373, 428, 631, 649, 687, 736, 737], "dedic": [231, 232], "quant_format": [231, 232, 310, 677, 710], "constraint": [231, 232, 311, 348, 687, 726, 734, 738, 740], "conv1": [231, 232, 729, 740], "tuning_strategi": [231, 232], "guarante": [231, 232, 687], "models": [231, 232, 384, 687, 724, 728], "footprint": [231, 232, 311, 335, 340, 348, 384, 674, 687, 724, 726, 728, 730], "earli": [231, 232, 687, 729, 738, 740], "field": [231, 232, 249, 292, 316, 369, 645, 649, 651, 675, 687, 734, 738, 740], "exit": [231, 232, 351, 429, 431, 596, 687, 715, 720, 721, 722, 740], "excluded_precis": [231, 232, 731], "exclud": [231, 232, 649, 667, 731], "conserv": [231, 232, 365, 436], "use_distributed_tun": 231, "weightpruningconfig": [231, 232, 687, 725, 726], "pruning_config": [231, 232, 687, 726], "98": [231, 232, 687, 726, 728, 741], "exp": [231, 232, 687, 726], "link": [231, 232, 247, 290, 373, 399, 428, 667, 670, 677, 700, 704, 707, 732, 741], "90": [231, 232, 685, 730, 740, 741], "magnitude_progress": [231, 232], "snip_progress": [231, 232], "snip_momentum_progress": [231, 232], "feasibl": [231, 232], "situat": [231, 232, 675, 726], "unstructur": [231, 232, 339, 682, 726, 741], "8x1": [231, 232], "channelx1": [231, 232, 726], "1xchannel": [231, 232, 726], "itrex": [231, 232, 735], "start": [231, 232, 264, 305, 316, 369, 433, 683, 712, 727, 737, 738, 739, 742], "togeth": [231, 232, 264, 305, 673, 683, 694, 727, 736, 737], "sort": [231, 232, 355, 392, 437, 672, 710, 732, 738], "sinc": [231, 232, 311, 313, 335, 340, 348, 366, 673, 677, 683, 686, 701, 707, 712, 725, 732, 733], "lead": [231, 232, 668, 673, 687, 688, 712, 726, 732, 735], "increas": [231, 232, 392, 671, 682, 690, 707, 712, 732, 738], "cube": [231, 232, 726], "update_config": [231, 232], "knowledgedistillationlossconfig": [231, 232, 673, 674, 687, 725], "hyperparamet": [231, 232, 361, 734, 735, 738], "entropi": [231, 232, 667, 738], "groundtruth": [231, 232, 316, 369], "label": [231, 232, 235, 236, 247, 249, 250, 251, 252, 255, 260, 264, 269, 278, 279, 290, 292, 293, 294, 295, 298, 302, 305, 313, 315, 320, 366, 368, 373, 374, 428, 567, 628, 645, 669, 670, 672, 686, 687, 729, 737], "sum": [231, 232, 320, 373, 672, 673], "distillationconfig": [231, 232, 628, 673, 674, 687, 725], "prepare_compress": [231, 232, 628, 645, 673, 674, 687, 725, 726, 729], "criterion_conf": [231, 232], "d_conf": [231, 232, 674, 687, 725], "compression_manag": [231, 232, 628, 645, 673, 674, 687, 725, 726, 729], "distil_loss": [231, 232, 687], "ni_workload_nam": 232, "onnxrt_dnnl_ep": [232, 688, 729], "onnxrt_dml_ep": [232, 729], "tuningcriterion": [232, 687, 724, 734, 738], "tuning_criterion": [232, 687, 724, 734, 738], "npu": [232, 729], "xpu": [232, 612, 698, 729], "ptq": [232, 428, 645, 672, 675, 682, 687, 712, 729, 735, 736, 738], "meet": [232, 238, 349, 351, 429, 431, 645, 650, 724, 727, 728, 729, 732, 736, 738], "mse_v2": [232, 312, 354, 365, 436], "hawq_v2": [232, 365, 436], "docstr": [232, 447], "workload": [232, 636, 639, 709, 727], "insight": [232, 636, 648, 672, 727, 733, 738, 739], "copi": [232, 344, 639, 669, 713], "deepcopi": 232, "model_origin": [232, 428, 731], "qat_op_name_dict": 232, "low_memory_usag": 232, "hpoconfig": 232, "xgb": 232, "bo": 232, "intermediatelayersknowledgedistillationlossconfig": [232, 673], "relationship": [232, 709], "student_layer_nam": 232, "student_layer_output_process": 232, "teacher_layer_nam": 232, "teacher_layer_output_process": 232, "desir": [232, 260, 264, 302, 305, 650, 651, 726, 735, 737], "serv": [232, 382, 570, 612, 715, 720, 721, 722], "numer": [232, 320, 373, 392, 651, 688, 727, 729, 732], "abbrevi": 232, "l1": 232, "selfknowledgedistillationlossconfig": [232, 673, 687], "student1_layer_name1": 232, "teacher_layer_name1": 232, "student2_layer_name1": 232, "student1_layer_name2": 232, "teacher_layer_name2": 232, "student2_layer_name2": 232, "soft": 232, "l2": [232, 726], "hard": [232, 669, 672], "resblock": 232, "deepst": 232, "02": [232, 741], "mixedprecisionconfig": [232, 374, 447, 687, 688], "mixedprecis": [232, 321, 687], "won": [232, 729, 732], "work": [232, 311, 348, 612, 647, 650, 668, 669, 673, 702, 705, 713, 731, 732, 733, 735, 736], "mix_precis": [232, 365, 447, 687, 688], "converted_model": [232, 374, 687, 688], "exportconfig": 232, "14": [232, 309, 310, 648, 677, 683, 722, 741], "dynamic_ax": [232, 310, 677], "qlinear": [232, 249, 256, 292, 299, 320, 373, 649, 697], "ax": [232, 310], "onnxqlinear2qdqconfig": 232, "onnxqlinear2qdq": 232, "torch2onnxconfig": [232, 677], "torch2onnx": [232, 307, 312, 365], "qdq_op_fp32_bia": 232, "qdq_op_int32_bia": 232, "qdq_op_fp32_bias_qdq": 232, "resnet50": [232, 648, 672, 675, 677, 688, 690, 694, 726, 729, 734, 741], "int8_onnx_config": [232, 677], "randn": [232, 677], "224": [232, 260, 302, 648, 670, 675, 677, 680, 687, 690, 709, 737, 740], "tf2onnxconfig": [232, 677], "tf2onnx": [232, 307, 312, 365], "output_graph": 232, "dyna": [232, 312, 325, 365, 646, 682, 728], "sigopt": [233, 234, 276, 277, 312, 365, 727], "tpe": [233, 234, 276, 277, 312, 365], "sigopttunestrategi": [235, 278], "q_dataload": [235, 236, 278, 279, 352, 355, 356, 358, 429, 432, 433, 437, 438, 440, 681, 738], "eval_metr": [235, 236, 374, 428, 429, 432, 433, 437, 438, 440, 628, 686, 709, 729], "q_hook": [235, 236, 278, 279, 352, 355, 356, 358, 429, 432, 433, 437, 438, 440], "yield": [235, 236, 245, 267, 278, 279, 288, 352, 374, 428, 432, 447, 567, 628, 669, 729, 738], "_": [235, 236, 278, 279, 428, 645, 646, 648, 649, 650, 667, 672, 673, 675, 677, 679, 687, 688, 689, 690, 696, 700, 702, 704, 705, 712, 715, 716, 724, 726, 729, 732, 733, 734, 735, 736, 738, 740], "well": [235, 236, 278, 279, 374, 428, 628, 646, 648, 668, 670, 726, 729, 733, 735, 740], "taken": [235, 236, 278, 279, 374, 428, 628, 729], "reserv": [235, 236, 278, 279], "abl": [235, 236, 278, 279, 374, 428, 628, 698, 707, 729], "tuner": [235, 236, 278, 279, 311, 348, 374, 428, 628, 729], "scalar": [235, 236, 278, 279, 374, 428, 628, 686, 729, 738], "pseudo": [235, 236, 278, 279, 428, 628, 732, 736], "someth": [235, 236, 249, 278, 279, 292, 428, 628], "fefin": [236, 279], "tpetunestrategi": [236, 279], "basedatalod": [237, 280, 567], "basedataload": [237, 242, 244, 280, 285, 287, 567], "last_batch": [237, 239, 242, 243, 244, 246, 267, 280, 282, 285, 286, 287, 289, 567, 669], "rollov": [237, 239, 242, 243, 244, 246, 267, 280, 282, 285, 286, 287, 289, 567, 669], "collate_fn": [237, 239, 240, 242, 243, 244, 246, 267, 280, 282, 283, 285, 286, 287, 289, 567, 669, 670], "batch_sampl": [237, 239, 242, 243, 244, 246, 267, 280, 282, 285, 286, 287, 289, 567, 669], "num_work": [237, 239, 242, 243, 244, 246, 267, 280, 282, 285, 286, 287, 289, 567, 669, 687, 729], "pin_memori": [237, 239, 242, 243, 244, 246, 267, 280, 282, 285, 286, 287, 289, 567, 669], "shuffl": [237, 239, 242, 243, 244, 246, 267, 280, 282, 285, 286, 287, 289, 567, 669, 687, 729], "_generate_dataload": [237, 280, 567], "check_dataload": 238, "default_col": [239, 282, 567], "outer": [239, 282, 567], "defaultdataload": [239, 246, 282, 289], "style": [240, 254, 283, 297, 447, 668, 670, 681], "drop_last": [240, 245, 283, 288, 567], "iterablefetch": [240, 283, 567], "indexfetch": [240, 283, 567], "base_dataload": [241, 284, 301, 312], "default_dataload": [241, 284, 301, 312], "fetcher": [241, 284, 301, 312], "mxnet_dataload": [241, 284, 301, 312], "onnxrt_dataload": [241, 284, 301, 312, 421], "pytorch_dataload": [241, 284, 301, 312], "tensorflow_dataload": [241, 284, 301, 312, 426], "mxnetdataload": [242, 285], "onnxrtbertdataload": [243, 286], "variant": [243, 286], "onnxrtdataload": [243, 286, 421], "pytorchdataload": [244, 287], "data_sourc": [245, 288, 631], "__iter__": [245, 249, 288, 292, 669, 670, 687], "matter": [245, 288, 731], "iterablesampl": [245, 288, 567], "squential": [245, 288], "your": [245, 247, 288, 290, 612, 644, 648, 668, 669, 670, 672, 675, 684, 687, 690, 693, 694, 695, 700, 701, 702, 704, 705, 707, 709, 713, 715, 720, 721, 722, 726, 727, 734, 736, 738, 739], "clear": [245, 288, 649, 679, 686, 687], "iterabledataset": [245, 249, 288, 292], "try": [245, 288, 382, 570, 645, 648, 672, 710, 726, 729, 735, 738], "indexdataset": [245, 288], "__getitem__": [245, 249, 264, 288, 292, 305, 669, 670, 687], "__len__": [245, 249, 288, 292, 670], "batchsampl": [245, 288, 567], "tfdatadataload": [246, 289], "tensorflow1": [246, 289], "coupl": [246, 289], "satisfi": [246, 289, 672, 683, 713], "tf1": [246, 289, 689], "although": [246, 289, 734], "tensorflowbertdataload": [246, 289], "tensorflowmodelzoobertdataload": [246, 289], "zoo": [246, 264, 289, 305, 648, 676, 680, 741], "tensorflowdataload": [246, 289, 426], "pytorchbertdataset": [247, 290], "model_typ": [247, 290, 639, 670], "tensordataset": [247, 290, 670], "repo": [247, 290, 642, 644, 670, 676, 700, 702, 704, 705, 742], "easi": [247, 290, 348, 677, 687, 710, 714, 727, 729, 732, 734], "squad": [247, 264, 290, 305, 317, 318, 320, 370, 371, 373, 670, 686, 726, 737, 741], "distilbert": [247, 290, 670, 688, 727, 741], "xlnet": [247, 290, 670], "xlm": [247, 290, 670, 741], "101": [247, 290, 320, 373, 686, 716, 735, 741], "2043": [247, 290], "2001": [247, 290], "onnxrtbertdataset": [247, 290], "data_dir": [247, 290, 670], "model_name_or_path": [247, 290, 670, 687, 695, 696, 711, 718, 721, 722, 730], "max_seq_length": [247, 264, 290, 305, 598, 670, 737], "do_lower_cas": [247, 263, 264, 290, 304, 305, 670, 737], "mrpc": [247, 290, 320, 373, 670, 686, 695, 718, 721, 722, 726, 738, 741], "dynamic_length": [247, 290, 670], "shortcut": [247, 290, 670], "longer": [247, 264, 290, 305, 670, 737], "truncat": [247, 264, 290, 305, 670, 737], "shorter": [247, 264, 290, 305, 670, 737], "lowercas": [247, 290, 670], "choic": [247, 290, 649, 670, 686, 713, 735], "qqp": [247, 290, 670, 686, 741], "qnli": [247, 290, 670, 686, 741], "rte": [247, 290, 670, 686, 741], "st": [247, 290, 670, 686], "cola": [247, 290, 670, 686, 741], "mnli": [247, 290, 670, 686, 741], "wnli": [247, 290, 670, 686], "mobilebert": [247, 290, 670, 673], "roberta": [247, 290, 670, 741], "uncas": [247, 264, 290, 305, 670, 737, 741], "load_and_cache_exampl": [247, 290], "cach": [247, 290, 612, 678, 729, 732], "convert_examples_to_featur": [247, 264, 290, 305], "max_length": [247, 290], "label_list": [247, 290, 320, 373], "output_mod": [247, 290], "pad_token": [247, 290], "pad_token_segment_id": [247, 290], "mask_padding_with_zero": [247, 290], "inputfeatur": [247, 264, 290, 305], "properti": [247, 290, 446, 684], "input_id": [247, 264, 290, 305, 687], "vocabulari": [247, 263, 264, 290, 304, 305, 737], "attention_mask": [247, 290, 687], "usual": [247, 290, 650, 672, 673, 712, 725, 726, 729, 730, 735], "NOT": [247, 290, 679], "token_type_id": [247, 290, 687], "segment": [247, 290, 314, 316, 367, 369, 644], "portion": [247, 290], "regress": [247, 290, 644, 672], "seq_length": [247, 290], "tensorflowbertdataset": [247, 290], "label_fil": [247, 264, 290, 305, 670, 737], "tfrecord": [247, 248, 249, 290, 291, 292, 670], "guid": [247, 290, 645, 648, 668, 670, 673, 683, 690, 698, 707, 742], "parsedecodebert": [247, 290], "tensorflowmodelzoobertdataset": [247, 248, 290, 291], "num_cor": [247, 248, 252, 290, 291, 295, 670], "28": [247, 248, 252, 290, 291, 295, 670, 741], "coco": [248, 255, 259, 291, 298, 316, 320, 369, 373, 686, 726], "parsedecodecoco": [248, 291], "cocorecorddataset": [248, 291], "interleav": [248, 291, 670], "parallel": [248, 291, 422, 427, 612, 670, 687, 714, 717, 738], "cocoraw": [248, 291, 670], "img_dir": [248, 291, 670], "val2017": [248, 291, 670], "anno_dir": [248, 291, 670], "annot": [248, 291, 316, 369, 447, 650, 651, 670, 686, 726, 738], "instances_val2017": [248, 291, 670], "jpg": [248, 252, 254, 291, 295, 297, 648, 670], "imag": [248, 249, 252, 254, 260, 264, 291, 292, 295, 297, 302, 305, 316, 369, 648, 670, 675, 677, 726, 728, 735, 736, 737, 741], "coconpi": [248, 291, 670], "npy_dir": [248, 291, 670], "npy": [248, 291, 670], "tensorflowdataset": [249, 292], "pytorchdataset": [249, 292], "mxnetdataset": [249, 292], "onnxrtqldataset": [249, 292], "onnxrtitdataset": [249, 292], "IT": [249, 256, 292, 299, 727], "pytorchmxnetwrapdataset": [249, 292], "datafunc": [249, 292], "pytorchmxnetwrapfunct": [249, 264, 292, 305], "framework_dataset": [249, 292], "convent": [249, 292, 316, 369, 644, 673], "imageclassifi": [249, 292], "tensorflow_itex": [249, 252, 254, 256, 292, 295, 297, 299, 669, 728], "onnxrt_qdq": [249, 256, 292, 299, 728], "onnxrt_qlinearop": [249, 256, 264, 292, 299, 305, 728], "onnxrt_integerop": [249, 256, 264, 292, 299, 305, 728], "pytorch_ipex": [249, 256, 292, 299, 687, 728, 740], "pytorch_fx": [249, 256, 292, 299, 687, 728], "dataset_registri": [249, 292], "dataset_typ": [249, 292], "dataset_format": [249, 292], "data_format": [249, 260, 292, 302], "raw_imag": [249, 292], "overwrit": [249, 292, 700, 704], "download_url": [249, 292], "filenam": [249, 292, 572, 639, 670, 713], "md5": [249, 292], "address": [249, 292, 643, 668, 688, 709, 712, 715, 727], "gen_bar_updat": [249, 292], "check_integr": [249, 292], "fpath": [249, 292], "checksum": [249, 292], "calculate_md5": [249, 292], "chunk_siz": [249, 292], "cifar10": [249, 292, 670], "cifar100": [249, 292, 670], "databas": [249, 292, 715], "www": [249, 292, 670, 741], "toronto": [249, 292, 670], "kriz": [249, 292, 670], "cifar": [249, 292, 670, 741], "tar": [249, 292, 670, 672, 702, 705], "gz": [249, 292, 670, 672, 702, 705], "manual": [249, 292, 670, 690, 696, 698, 701, 715, 720, 721, 722, 726], "subset": [249, 252, 292, 295, 670, 712], "internet": [249, 292, 670, 709], "again": [249, 292, 670, 710, 712, 731], "pytorchcifar10": [249, 292], "mxnetcifar10": [249, 292], "tensorflowcifar10": [249, 292], "pytorchcifar100": [249, 292], "mxnetcifar100": [249, 292], "tensorflowcifar100": [249, 292], "mnist": [249, 292, 670, 675], "nation": [249, 292, 643], "institut": [249, 292], "standard": [249, 264, 292, 305, 623, 644, 650, 668, 672, 677, 686, 737, 738], "technologi": [249, 292, 685, 687], "fashionmnist": [249, 292, 670], "npz": [249, 292, 670], "idx1": [249, 292, 670], "ubyt": [249, 292, 670], "idx3": [249, 292, 670], "t10k": [249, 292, 670], "pytorchmnist": [249, 292], "mxnetmnist": [249, 292], "tensorflowmnist": [249, 292], "pytorchfashionmnist": [249, 292], "mxnetfashionmnist": [249, 292], "tensorflowfashionmnist": [249, 292], "imagefold": [249, 292, 670, 675, 687], "expect": [249, 292, 643, 644, 678, 685, 707, 729, 732, 738], "subfold": [249, 292, 710], "belong": [249, 292, 378, 729], "class_1": [249, 292, 670], "xxx": [249, 292, 670, 687], "png": [249, 292, 670], "xxy": [249, 292, 670], "xxz": [249, 292, 670], "class_n": [249, 292, 670], "123": [249, 292, 670, 737], "nsdf3": [249, 292, 670], "asd932_": [249, 292, 670], "categori": [249, 292, 315, 368, 666, 670, 697], "mxnetimagefold": [249, 292], "tensorflowtfrecorddataset": [249, 292], "tensorflowimagerecord": [249, 292], "imagenet": [249, 252, 260, 292, 295, 302, 646, 672, 687, 696, 712, 726, 736, 737, 740, 741], "000": [249, 292, 648, 670], "099": [249, 292, 670], "tensorflowvocrecord": [249, 292], "pascal": [249, 292], "voc": [249, 292, 320, 373], "2012": [249, 292], "00000": [249, 292], "00004": [249, 292], "00001": [249, 292], "00003": [249, 292], "dummydataset": [250, 251, 293, 294, 567], "127": [250, 251, 293, 294, 567, 670, 729, 735], "float32": [250, 251, 264, 293, 294, 305, 316, 369, 567, 634, 649, 666, 670, 687, 729, 732, 735, 737], "stand_norm": [250, 251, 293, 294, 567, 670], "dummy_v2": [251, 294, 567, 670], "sparse_dummy_v2": [251, 294, 670], "label_shap": [251, 294, 567, 670], "sparsedummydataset": [251, 294], "dense_shap": [251, 294, 670], "sparse_ratio": [251, 294, 670], "imagenetraw": [252, 295, 670], "data_path": [252, 295, 670], "image_list": [252, 295, 670], "img1": [252, 295, 670], "img2": [252, 295, 670], "imgx": [252, 295, 670], "val_map": [252, 295, 670], "txt": [252, 295, 670, 672, 683, 709, 711, 712, 714, 715], "pytorchimagenetraw": [252, 295], "mxnetimagenetraw": [252, 295], "tensorflowimagenetraw": [252, 295], "inteltensorflow": [252, 254, 295, 297, 683], "tensorflowimagenetdataset": [252, 295], "onnxrtimagenetdataset": [252, 295], "bert_dataset": [253, 258, 296, 301, 312, 365], "coco_dataset": [253, 258, 296, 301, 312, 365], "dummy_dataset": [253, 258, 296, 301, 312, 365], "dummy_dataset_v2": [253, 258, 296, 301, 312, 365], "imagenet_dataset": [253, 258, 296, 301, 312, 365], "style_transfer_dataset": [253, 258, 296, 301, 312, 365], "styletransferdataset": [254, 297], "content_fold": [254, 297, 670], "style_fold": [254, 297, 670], "crop_ratio": [254, 297, 670], "resize_shap": [254, 297, 670], "256": [254, 260, 297, 302, 619, 670, 675, 687, 737], "image_format": [254, 297, 670], "holder": [254, 297, 670], "labelbalancecocorecordfilt": [255, 298], "balanc": [255, 298, 732, 735], "labelbalancecocorawfilt": [255, 298], "tensorflowfilt": [256, 299], "onnxrtqlfilt": [256, 299], "onnxrtitfilt": [256, 299], "pytorchfilt": [256, 299], "mxnetfilt": [256, 299], "filter_registri": [256, 299], "filter_typ": [256, 299], "__call__": [256, 299], "coco_filt": [257, 258, 300, 301, 312, 365], "imagenet_transform": [258, 261, 301, 303, 312, 365], "parsedecodecocotransform": 259, "quantizedinput": [260, 302, 737], "labelshift": [260, 302, 737], "label_shift": [260, 302, 737], "parsedecodeimagenet": [260, 302, 737], "proto": [260, 264, 302, 305, 737], "parsedecodeimagenettransform": [260, 302], "tensorflowtransposelastchannel": 260, "tensorflowshiftrescal": 260, "rescal": [260, 264, 305, 737], "tensorflowresizecropimagenettransform": [260, 302], "random_crop": [260, 302, 737], "resize_sid": [260, 302, 737], "resize_method": [260, 302], "bilinear": [260, 264, 302, 305, 737], "random_flip_left_right": [260, 302, 737], "mean_valu": [260, 302, 737], "channels_last": [260, 302, 690], "subpixel": [260, 302], "rgb": [260, 302], "seri": [260, 302, 648, 683, 687, 737], "applic": [260, 302, 651, 677, 690, 707, 709, 715, 716, 720, 721, 727, 732, 735, 736, 737, 739], "crop": [260, 264, 302, 305, 670, 737], "left": [260, 264, 302, 305, 701, 707, 735, 737], "std": [260, 264, 302, 305, 687, 737], "bilinearimagenettransform": [260, 302], "central_fract": [260, 302, 737], "875": [260, 302, 737], "fraction": [260, 302, 737], "onnxbilinearimagenettransform": [260, 302], "onnxresizecropimagenettransform": [260, 302], "std_valu": [260, 302], "229": [260, 302, 687], "225": [260, 302, 687, 741], "resizewithaspectratio": [260, 302], "87": [260, 302, 741], "inter_pol": [260, 302], "cv2": [260, 302], "inter_area": [260, 302], "aspect": [260, 264, 302, 305, 737], "postprocess_cl": [262, 272, 687], "user_postprocess": [262, 272], "convert_to_unicod": [263, 304], "unicod": [263, 304], "assum": [263, 304, 316, 327, 369, 649, 679, 707], "load_vocab": [263, 304], "vocab_fil": [263, 264, 304, 305, 737], "convert_by_vocab": [263, 304], "vocab": [263, 304], "whitespace_token": [263, 304], "whitespac": [263, 304, 318, 371], "clean": [263, 304, 687], "piec": [263, 304, 313, 366, 686, 732], "fulltoken": [263, 304], "tokenzi": [263, 304], "basictoken": [263, 304], "punctuat": [263, 304, 313, 318, 366, 371], "lower": [263, 264, 304, 305, 318, 371, 433, 674, 726, 727, 729, 735, 737, 738], "wordpiecetoken": [263, 304], "unk_token": [263, 304], "unk": [263, 304], "max_input_chars_per_word": [263, 304], "wordpiec": [263, 264, 304, 305, 737], "concat_gener": [264, 305], "inc": [264, 305, 472, 643, 648, 650, 685, 690, 697, 707, 709, 714, 727, 728, 733, 738], "tensorflowtransform": [264, 305], "mxnettransform": [264, 305], "pytorchtransform": [264, 305], "onnxrtqltransform": [264, 305], "onnxrtittransform": [264, 305], "transform_registri": [264, 305], "transform_typ": [264, 305], "basetransform": [264, 305], "tensorflowwrapfunct": [264, 305], "transform_func": [264, 305], "pytorchmxnettransform": [264, 305], "get_torchvision_map": [264, 305], "torchvis": [264, 305, 648, 676, 680, 690, 696, 710], "composetransform": [264, 305], "transform_list": [264, 305, 737], "compos": [264, 305, 631, 737], "croptoboundingbox": [264, 305, 737], "offset_height": [264, 305, 737], "offset_width": [264, 305, 737], "target_height": [264, 305, 737], "target_width": [264, 305, 737], "box": [264, 305, 316, 320, 369, 373, 645, 686, 690, 701, 707, 736, 737, 738], "coordin": [264, 305, 352, 432, 714, 737, 738], "top": [264, 305, 311, 320, 335, 340, 348, 373, 644, 686, 707, 710, 712, 737], "corner": [264, 305, 644, 649, 651, 737], "horizont": [264, 305, 737], "mxnetcroptoboundingbox": [264, 305], "onnxrtcroptoboundingbox": [264, 305], "tensorflowcroptoboundingbox": [264, 305], "resizewithratio": [264, 305, 737], "min_dim": [264, 305, 737], "800": [264, 305, 737], "max_dim": [264, 305, 737], "1365": [264, 305, 737], "constant_valu": [264, 305], "longest": [264, 305, 737], "side": [264, 305, 670, 701, 737], "exce": [264, 305, 732, 737], "tensorflowresizewithratio": [264, 305], "permut": [264, 305, 737], "tensorflowtranspos": [264, 305], "mxnettranspos": [264, 305], "pytorchtranspos": [264, 305], "randomverticalflip": [264, 305, 737], "tensorflowrandomverticalflip": [264, 305], "randomhorizontalflip": [264, 305, 687, 737], "tensorflowrandomhorizontalflip": [264, 305], "toarrai": [264, 305, 737], "pil": [264, 305, 737], "casttftransform": [264, 305], "castonnxtransform": [264, 305], "castpytorchtransform": [264, 305], "centercroptftransform": [264, 305], "center": [264, 305, 647, 648, 683, 737, 738], "paddedcentercroptransform": [264, 305], "crop_pad": [264, 305], "resizetftransform": [264, 305], "bicub": [264, 305, 737], "resizepytorchtransform": [264, 305], "randomcroptftransform": [264, 305], "randomresizedcroppytorchtransform": [264, 305], "08": [264, 305, 685, 737, 741], "randomresizedcropmxnettransform": [264, 305], "randomresizedcroptftransform": [264, 305], "normalizetftransform": [264, 305], "deviat": [264, 305, 672, 737], "broadcast": [264, 305, 675, 737], "rescalekeraspretraintransform": [264, 305], "rescaletftransform": [264, 305], "rescaletransform": [264, 305], "alignimagechanneltransform": [264, 305], "align": [264, 305, 643, 732, 737], "must": [264, 305, 316, 369, 612, 644, 645, 650, 666, 669, 683, 729, 737], "pytorchalignimagechannel": [264, 305], "tondarraytransform": [264, 305], "resizemxnettransform": [264, 305], "resizetransform": [264, 305], "cropresizetftransform": [264, 305], "boundari": [264, 305, 737], "area": [264, 305, 316, 369, 686, 737], "pytorchcropresizetransform": [264, 305], "mxnetcropresizetransform": [264, 305], "cropresizetransform": [264, 305], "centercroptransform": [264, 305], "mxnetnormalizetransform": [264, 305], "pytorchnormalizetransform": [264, 305], "normalizetransform": [264, 305], "randomcroptransform": [264, 305], "randomresizedcroptransform": [264, 305], "get_final_text": [264, 305], "pred_text": [264, 305], "orig_text": [264, 305], "project": [264, 305, 642, 643, 644, 713, 727, 734, 738, 742], "squadexampl": [264, 305], "qas_id": [264, 305], "question_text": [264, 305], "doc_token": [264, 305], "orig_answer_text": [264, 305], "start_posit": [264, 305], "end_posit": [264, 305], "is_imposs": [264, 305], "answer": [264, 305, 317, 318, 370, 371, 643, 712, 726, 737, 741], "unique_id": [264, 305], "example_index": [264, 305], "doc_span_index": [264, 305], "token_to_orig_map": [264, 305], "token_is_max_context": [264, 305], "input_mask": [264, 305, 687], "segment_id": [264, 305, 687], "read_squad_exampl": [264, 305], "input_fil": [264, 305], "doc_strid": [264, 305, 737], "max_query_length": [264, 305, 737], "output_fn": [264, 305], "inputbatch": [264, 305], "collecttransform": [264, 305], "10833": [264, 305], "tfsquadv1posttransform": [264, 305], "n_best_siz": [264, 305, 737], "384": [264, 305, 737], "64": [264, 305, 619, 646, 685, 732, 735, 737, 741], "max_answer_length": [264, 305, 737], "30": [264, 305, 676, 680, 682, 737, 741], "nbest_predict": [264, 305, 737], "question": [264, 305, 317, 318, 370, 371, 643, 644, 648, 649, 683, 690, 714, 726, 735, 737, 741], "anoth": [264, 305, 313, 322, 366, 639, 672, 673, 700, 704, 737, 738], "long": [264, 305, 668, 678, 732, 737], "document": [264, 305, 447, 650, 651, 656, 675, 685, 688, 692, 702, 705, 706, 713, 714, 716, 726, 733, 737, 739], "chunk": [264, 305, 737], "tfmodelzoocollecttransform": [264, 305], "tfsquadv1modelzooposttransform": [264, 305], "squadv1": [264, 305, 737], "parsedecodevoctransform": [264, 305], "conf_fname_or_obj": [265, 274, 306, 311, 321, 322, 323, 324, 326, 335, 340, 348], "unnecessari": [265, 687], "setter": 267, "calib_dataload": [267, 349, 428, 451, 468, 469, 472, 645, 648, 669, 670, 672, 680, 681, 686, 687, 709, 710, 729, 730, 731, 732], "reason": [267, 643, 650, 669, 712, 732, 736, 738], "know": [267, 668, 675, 733], "metric_cl": [269, 373, 428, 687], "user_metr": [269, 373, 428], "recommend": [269, 373, 612, 648, 649, 670, 679, 698, 701, 706, 708, 726, 728, 738], "set_backend": 270, "tensorflowimagefold": 292, "qlinear2qdq": [307, 312, 365], "qlinearop": [308, 672, 682, 698, 729, 741], "check_model": 308, "onnx_qlinear_to_qdq": 308, "input_name_to_nod": 308, "tf_to_fp32_onnx": 309, "tf_to_int8_onnx": 309, "int8_model": [309, 310, 649], "get_node_map": 310, "fp32_onnx_path": 310, "module_node_map": 310, "get_quantizable_onnx_op": 310, "quantize_nod": 310, "dynamic_quant_export": 310, "pt_fp32_model": 310, "pt_int8_model": 310, "weight_typ": 310, "s8": 310, "static_quant_export": 310, "_quantiz": [310, 395], "torch_to_fp32_onnx": 310, "do_constant_fold": 310, "torch_to_int8_onnx": 310, "achiev": [311, 348, 677, 685, 687, 710, 725, 726, 727, 729, 735, 736, 738], "across": [311, 321, 348, 374, 573, 594, 596, 597, 598, 605, 609, 610, 671, 687, 714, 717, 726, 730, 735, 738], "variou": [311, 321, 348, 374, 573, 594, 596, 597, 598, 605, 609, 610, 651, 682, 690, 717, 726, 728, 730], "dl": [311, 321, 335, 340, 348, 374, 672, 681, 694, 707, 727, 741], "bring": [311, 348, 701, 714, 735], "vari": [311, 335, 340, 348, 712, 726, 735, 741], "roc": [311, 320, 335, 340, 348, 373], "flexibl": [311, 335, 340, 348, 648, 673, 714, 726, 732], "via": [311, 335, 340, 348, 643, 648, 675, 682, 687, 690, 707, 726, 727], "popular": [312, 365, 641, 648, 649, 650, 667, 673, 676, 677, 680, 685, 687, 726, 729, 732, 738, 739], "techniqu": [312, 365, 641, 648, 682, 687, 690, 709, 725, 726, 727, 728, 729, 739, 740, 741], "bleu": [312, 314, 319, 365, 367, 372, 686, 726], "bleu_util": [312, 319, 365, 372], "coco_label_map": [312, 319, 365, 372], "coco_tool": [312, 319, 365, 372], "evaluate_squad": [312, 319, 365, 372], "f1": [312, 317, 319, 320, 365, 370, 372, 373, 675, 686, 687, 710, 734, 741], "basic_na": [312, 325, 365], "nas_util": [312, 325, 365], "pruner_legaci": [312, 365], "gradient_sensit": [312, 331, 365], "group_lasso": [312, 331, 365], "pruning_recip": [312, 365], "tile_pattern": [312, 336, 337], "prune_util": [312, 341, 365], "tuning_sampl": [312, 354, 360, 365, 436, 442], "tuning_spac": [312, 354, 360, 361, 363, 365, 436, 442, 443, 445], "tuning_struct": [312, 354, 360, 361, 362, 365, 436, 442, 443, 444], "auto_mixed_precis": [312, 354, 365, 436], "graph_optim": [312, 365], "mixed_precis": [312, 365, 374, 687], "model_convers": [312, 365], "pruning_v2": [312, 365], "unicoderegex": [313, 366], "hoc": [313, 366], "hack": [313, 366], "recogn": [313, 366, 738], "nondigit_punct_r": [313, 366], "compil": [313, 366, 687], "express": [313, 366, 643], "preced": [313, 366, 735, 738], "digit": [313, 366, 639, 727], "punct_nondigit_r": [313, 366], "symbol_r": [313, 366], "bleu_token": [313, 366], "mose": [313, 366], "smt": [313, 366], "mosesdecod": [313, 366], "mteval": [313, 366], "v14": [313, 366], "pl": [313, 366], "l954": [313, 366], "l983": [313, 366], "bilingu": [313, 366], "understudi": [313, 366], "qualiti": [313, 366, 668], "machin": [313, 366, 677, 683, 693, 707, 709, 715, 727, 735, 736], "translat": [313, 314, 366, 367, 726, 738], "natur": [313, 366, 677], "approxim": [313, 314, 366, 367, 650, 686, 732], "glue": [313, 320, 366, 373, 670, 686, 687, 696], "word": [313, 366, 668, 686, 726, 732, 741], "ngram": [313, 366, 686], "breviti": [313, 314, 366, 367, 686], "penalti": [313, 314, 366, 367, 686], "doe": [313, 366, 446, 668, 669, 670, 686, 687, 732, 733, 737], "beam": [313, 366, 686], "tensor2tensor": [314, 367], "bleu_hook": [314, 367], "compute_bleu": [314, 367], "reference_corpu": [314, 367], "translation_corpu": [314, 367], "max_ord": [314, 367], "use_bp": [314, 367], "against": [314, 367], "gram": [314, 367], "bleu_scor": [314, 367], "third": [316, 369, 644, 684], "parti": [316, 369, 644, 684, 729], "pycocotool": [316, 369, 678, 683], "noth": [316, 369, 738], "thu": [316, 369, 612, 687, 726, 729], "cannot": [316, 369, 645, 668, 678, 732, 736], "jonathanhuang": [316, 369], "image_id": [316, 369, 686], "invok": [316, 369, 612, 650], "groundtruth_dict": [316, 369], "exportgroundtruthtococo": [316, 369], "groundtruth_boxes_list": [316, 369], "groundtruth_classes_list": [316, 369], "max_num_class": [316, 369], "output_path": [316, 369], "detections_list": [316, 369], "exportdetectionstococo": [316, 369], "detection_boxes_list": [316, 369], "detection_scores_list": [316, 369], "detection_classes_list": [316, 369], "cocowrapp": [316, 369], "loadannot": [316, 369], "cocoevalwrapp": [316, 369], "agnostic_mod": [316, 369], "computemetr": [316, 369], "detection_typ": [316, 369], "bbox": [316, 369, 645, 686], "hold": [316, 352, 369, 432, 670], "iou_typ": [316, 369], "iou_thr": [316, 320, 369, 373, 686], "map_point": [316, 320, 369, 373, 686], "cocoev": [316, 369], "mscoco": [316, 369], "Then": [316, 369, 650, 672, 700, 702, 704, 705, 712, 735, 738], "exportsingleimagegroundtruthtococo": [316, 369], "next_annotation_id": [316, 369], "category_id_set": [316, 369], "groundtruth_box": [316, 369], "groundtruth_class": [316, 369], "groundtruth_mask": [316, 369], "groundtruth_is_crowd": [316, 369], "ingest": [316, 369], "here": [316, 369, 447, 650, 670, 675, 676, 677, 679, 680, 685, 686, 695, 702, 705, 707, 710, 713, 715, 729, 733, 734, 735, 741], "exportsingleimagedetectionstococo": [316, 369], "uniqu": [316, 349, 369, 729], "assign": [316, 369, 639, 675, 728, 738], "num_gt_box": [316, 369], "num_detect": [316, 320, 369, 373, 686, 687, 740], "image_height": [316, 369], "image_width": [316, 369], "detection_mask": [316, 369], "crowd": [316, 369], "insid": [316, 369, 612, 673, 674, 708, 726, 730, 738], "exportsingleimagedetectionboxestococo": [316, 369], "detection_box": [316, 369, 687, 740], "detection_scor": [316, 369, 687, 740], "detection_class": [316, 369, 687, 740], "exporsingleimagedetectionboxestococo": [316, 369], "exportsingleimagedetectionmaskstococo": [316, 369], "allenai": [317, 318, 370, 371], "bi": [317, 318, 370, 371], "att": [317, 318, 370, 371], "flow": [317, 318, 370, 371, 645, 646, 687], "f1_score": [317, 318, 370, 371], "ground_truth": [317, 318, 370, 371], "ground": [317, 318, 370, 371], "truth": [317, 318, 370, 371], "metric_max_over_ground_truth": [317, 318, 370, 371], "metric_fn": [317, 318, 370, 371], "exact_match_scor": [317, 370], "exact": [317, 370], "articl": [317, 318, 370, 371], "paragraph": [317, 318, 370, 371], "qa": [317, 318, 370, 371, 648], "normalize_answ": [318, 371], "newlin": [318, 371, 639], "tab": [318, 371, 707, 736], "harmon": [318, 320, 371, 373], "recal": [318, 320, 371, 373], "answer_start": [318, 371], "177": [318, 371, 741], "denver": [318, 371], "bronco": [318, 371], "nfl": [318, 371], "afc": [318, 371], "super": [318, 371, 646], "bowl": [318, 371], "50": [318, 371, 646, 650, 712, 726, 735, 741], "56be4db0acb8001400a502ec": [318, 371], "form": [318, 371, 672, 673, 707], "percentag": [318, 371, 392, 667, 732, 740], "tensorflowmetr": [320, 373], "maintain": [320, 373, 612, 643, 644, 668, 689, 690, 702, 705, 709, 714, 715, 726, 732, 733], "pytorchmetr": [320, 373], "mxnetmetr": [320, 373], "onnxrtqlmetr": [320, 373], "onnxrtitmetr": [320, 373], "metric_registri": [320, 373], "metric_typ": [320, 373], "decorator_metr": [320, 373], "basemetr": [320, 373, 428], "single_output": [320, 373], "hvd": [320, 373, 675], "wrappytorchmetr": [320, 373], "wrapmxnetmetr": [320, 373], "wraponnxrtmetr": [320, 373], "proport": [320, 373], "pred_list": [320, 373], "pytorchloss": [320, 373], "mae": [320, 373, 686], "compare_label": [320, 373, 428, 686], "rmse": [320, 373, 686, 738], "tensorflowtopk": [320, 373], "k": [320, 373, 428, 686, 709, 726], "among": [320, 373, 701, 735], "outcom": [320, 373], "num_correct": [320, 373], "num_sampl": [320, 373], "generaltopk": [320, 373], "cocomapv2": [320, 373, 686], "anno_path": [320, 373, 686], "map_kei": [320, 373], "detectionboxes_precis": [320, 373], "output_index_map": [320, 373, 686], "tensorflowmap": [320, 373], "tensorflowcocomap": [320, 373], "tensorflowvocmap": [320, 373], "squadf1": [320, 373, 686], "miou": [320, 373], "num_class": [320, 373], "21": [320, 373, 695, 696, 718, 721, 722, 727, 735, 741], "iou": [320, 373], "intersect": [320, 373, 649, 686], "union": [320, 373, 386, 391, 392, 394, 398, 405, 628, 686, 718], "onnxrtglu": [320, 373], "dlrm": [320, 373], "modelconvers": 322, "typic": [322, 349, 646, 648, 674, 676, 680, 712, 726, 741], "basicna": 323, "model_build": [323, 326], "conf_fnam": 323, "nasbas": [326, 646], "nas_registri": 327, "nas_method": 327, "create_search_space_pool": 327, "idx": [327, 670], "find_pareto_front": 327, "pareto": [327, 646], "front": [327, 646], "n_point": 327, "n_metric": 327, "n_pareto_point": 327, "gradientsensitivityprun": 329, "pytorchmodel": [329, 330, 332, 333, 334, 383], "overwritten": [329, 330, 332, 333, 334, 695], "grouplassoprun": 330, "legaci": 331, "basicmagnitudeprun": 332, "patternlockprun": [333, 345], "pruner_registri": 334, "clase": 334, "pruningconf": [335, 340], "tfpruningcallback": [335, 340], "input_model": [335, 340, 689, 710, 711, 712, 736], "pure": [335, 340, 726], "pattern_registri": 338, "pattern_typ": 338, "patternbas": 338, "mask_shap": [338, 339], "is_contigu": 338, "tile": [339, 668], "tilepatternbas": 339, "tilepattern_1x1": 339, "1x1": [339, 673, 687, 726], "tilepattern_2x2": 339, "2x2": [339, 735], "tilepattern_1x16": 339, "1x16": 339, "tilepattern_4x1": 339, "tilepattern_1x2": 339, "1x2": [339, 735], "patternnxm": 343, "patternninm": 343, "reset_non_value_to_default": 344, "parse_not_to_prun": 344, "update_frequency_on_step": [345, 728], "max_sparsity_ratio_per_lay": [345, 728], "magnitudeprun": 345, "snipprun": 345, "snipmomentumprun": 345, "moreoev": 345, "quantconf": 348, "separ": [349, 643, 668, 681, 684, 715, 717, 725, 728], "opt_model": [349, 687], "fulli": [349, 687, 715, 729, 735], "train_func": [349, 628, 675, 687, 729], "automixedprecisiontunestrategi": [350, 430], "basictunestrategi": [351, 431], "polici": [351, 355, 429, 431, 437, 643, 648, 740, 742], "bayesiantunestrategi": [352, 432], "acq_max": [352, 432], "ac": [352, 432], "gp": [352, 432], "y_max": [352, 432], "n_warmup": [352, 432], "10000": [352, 432, 726], "n_iter": [352, 432], "acquisit": [352, 432], "gaussian": [352, 432, 738], "relev": [352, 432, 650, 651, 668, 712, 726], "acq": [352, 432], "randomst": [352, 432], "scipi": [352, 432], "x_max": [352, 432], "targetspac": [352, 432], "pbound": [352, 432], "9527": [352, 432, 687, 740], "bayesianoptim": [352, 432], "exhaustivetunestrategi": [353, 434], "msetunestrategi": [355, 437], "mse_v2tunestrategi": [356, 438], "revert": [356, 364, 438, 446, 738], "randomtunestrategi": [357, 439], "strategy_registri": [358, 440, 738], "tunestrategi": [358, 440, 738], "tuningsamplerregistri": 361, "tuningsampl": [361, 443], "tuningord": [361, 443], "Not": [361, 362, 443, 444, 572, 639, 646, 668], "tuningspac": [361, 362, 443, 444], "tuning_order_lst": [361, 443], "initial_op_tuning_cfg": [361, 443], "modelwisetuningsampl": [361, 443], "tuning_items_prior": [361, 443], "op_dtype_dict": [361, 443], "optuningconfig": [361, 362, 363, 443, 444, 445], "optypewisetuningsampl": [361, 443], "opwisetuningsampl": [361, 443], "fallbacktuningsampl": [361, 443], "op_dtyp": [361, 443], "skip_first": [361, 443], "smoothquantsampl": [361, 443], "tuningitem": [362, 444], "item_typ": [362, 444], "pattern_to_intern": [362, 444], "default_dtyp": [362, 444], "pattern_to_path": [362, 444], "quant_mode_from_pattern": [362, 444], "internal_pattern": [362, 444], "initial_tuning_cfg_with_quant_mod": [362, 444], "op_name_typ": [362, 444], "step1": [362, 444], "step2": [362, 444], "complet": [362, 444, 649, 650, 726, 729, 738, 740, 741], "step3": [362, 444], "step4": [362, 444], "step5": [362, 444], "op_quant_mod": [363, 445], "ordereddefaultdict": [364, 446], "extract_data_typ": [364, 446], "reverted_data_typ": [364, 446], "signed_flag": [364, 446], "get_adaptor_nam": [364, 446], "experiment": [365, 646, 670, 674, 675, 677, 683, 687, 726, 728, 729, 733, 737], "base_model": [365, 376], "keras_model": [365, 376], "mxnet_model": [365, 376], "nets_factori": [365, 376, 568], "onnx_model": [365, 376, 386, 388, 389, 391, 392, 394, 403, 421, 710], "tensorflow_model": [365, 376, 426, 712], "torch_model": [365, 376], "collect_layer_histogram": [365, 632], "create_obj_from_config": [365, 632], "kl_diverg": [365, 632], "load_huggingfac": [365, 632, 687], "neural_insights_util": [365, 632], "weights_detail": [365, 632], "sub_class": [373, 428], "register_customer_metr": 373, "topk": [373, 428, 675, 686, 687, 709, 729], "frozen": [374, 382, 428, 570, 689], "savedmodel": [374, 382, 428, 570], "onnx_ml_pb2": [374, 689], "hybirdblock": [374, 428], "basemodel": [375, 468, 469, 472, 570], "plai": [375, 570, 727, 732, 735], "role": [375, 570, 732, 735], "kerasmodel": [377, 570], "get_model_fwk_nam": 378, "fwk": 378, "mxnetmodel": 379, "net": [380, 571, 648], "tfslimnetsfactori": [380, 571], "get_model_typ": [382, 570], "validate_graph_nod": [382, 570], "validate_and_inference_input_output": [382, 570], "graph_sess": [382, 570], "graph_def_sess": [382, 570], "frozen_pb_sess": [382, 570], "load_saved_model": [382, 570], "saved_model_tag": [382, 570], "signatur": [382, 570], "metagraphdef": [382, 570], "try_loading_kera": [382, 570], "keras_sess": [382, 570], "slim_sess": [382, 570], "checkpoint_sess": [382, 570], "estimator_sess": [382, 570], "saved_model_sess": [382, 570], "tensorflowbasemodel": [382, 426, 570], "tensorflowsavedmodelmodel": [382, 570], "tensorflowllmmodel": [382, 570], "exceed": [382, 570], "2gb": [382, 570], "tensorflowqatmodel": [382, 570], "tensorflowcheckpointmodel": [382, 570], "tensorflowmodel": [382, 570], "pytorchbasemodel": 383, "pytorchfxmodel": 383, "ipexmodel": 383, "driven": [384, 648, 687, 707, 724, 736], "objective_registri": 384, "objective_custom_registri": 384, "obj_cl": 384, "eural_compressor": 384, "objective_cl": 384, "user_object": 384, "__class__": 384, "__name__": 384, "objective_cfg": 384, "usr_cfg": 384, "user_obj_cfg": 384, "easili": [384, 649, 691, 695, 707, 724, 735], "peak": [384, 724], "multiobject": 384, "metric_criterion": 384, "metric_weight": 384, "obj_criterion": 384, "obj_weight": 384, "is_measur": 384, "pathlib": [386, 389, 391, 392, 394, 397, 398], "quant_func": 386, "data_read": [386, 391, 392, 395], "calibrationdataread": [386, 388, 389, 391, 392, 395, 397, 398, 399], "weight_dtyp": [391, 392, 394, 400, 466, 470], "weight_bit": [391, 392, 394, 398, 400, 650], "weight_group_s": [391, 392, 394, 400], "weight_sym": [391, 392, 394, 400, 466, 470], "91": [391, 732, 735, 741], "apply_awq_on_model": 391, "quant_config": [391, 392, 394, 397, 405, 455, 456, 468, 472, 572, 573, 594, 596, 597, 598, 605, 609, 610, 622, 627], "calibration_data_read": [391, 392, 397, 398], "nnx": 391, "return_modelproto": [392, 394], "stabil": [392, 732], "optionm": [392, 394], "apply_gptq_on_model": 392, "apply_rtn_on_model": 394, "nodeproto": 395, "reader": 395, "smooth_quant_entri": [397, 668], "smoohquantconfig": [397, 400], "rtn_quantize_entri": 397, "rtnconfig": [397, 398, 400, 405, 617, 619, 627], "gptq_quantize_entri": 397, "gptqconfig": [397, 398, 400, 619], "awq_quantize_entri": 397, "awqconfig": [397, 400], "model_input": 398, "base_tun": [398, 469, 618], "eval_arg": [398, 469, 618], "expand": 398, "l139": 399, "act_dtyp": [400, 466, 470], "get_default_rtn_config": [400, 619], "get_default_gptq_config": [400, 619], "get_default_awq_config": 400, "fusedconv": 400, "calib_it": 400, "auto_alpha_arg": [400, 470, 735], "alpha_min": [400, 735], "alpha_max": [400, 735], "alpha_step": [400, 735], "attn_method": 400, "get_default_sq_config": [400, 470], "register_algo": [405, 572, 627, 668], "algos_map": [405, 572, 627], "example_algo": [405, 572, 627], "get_qrange_for_qtyp": 405, "check_model_with_infer_shap": 405, "parserfactori": 407, "onnxrtparserfactori": 409, "onnxprofilingpars": 411, "respons": [411, 412, 416, 720, 721, 722, 729], "profilingpars": 412, "profilingresult": 413, "total_execution_tim": 413, "accelerator_execution_tim": 413, "cpu_execution_tim": 413, "op_run": 413, "op_defin": 413, "tensorflowparserfactori": 414, "tensorflowprofilingpars": 416, "profilerfactori": [417, 419, 424], "create_onnx_config": 422, "ort": 422, "sessionopt": 422, "delete_assign": 427, "create_tf_config": 427, "tf_modul": 427, "configproto": 427, "set_eager_execut": 427, "entir": [428, 628, 645, 650, 651, 667, 714, 726], "autotunestrategi": 429, "conservativetunestrategi": 433, "o0": [433, 738], "who": [433, 643], "hawq_v2tunestrategi": 435, "made": [435, 649, 729, 733, 738], "impact": [435, 726, 733, 738], "tunestrategymeta": 440, "metaclass": 440, "lowerbitssampl": 443, "blockfallbacktuningsampl": 443, "op_block_lst": 443, "target_dtyp": 443, "alpha_list": 443, "weightonlyquantsampl": 443, "quantopt": 446, "quant_typ": 446, "quant_opt": 446, "preprocess_user_cfg": 446, "op_user_cfg": 446, "op_user_cfg_modifi": 446, "build_slave_faker_model": 446, "slave": [446, 738], "virtual": [446, 727], "classregist": 446, "fun": 447, "attribute1": 447, "module_debug_level1": 447, "debug": [447, 635, 672, 700, 704, 708, 738, 739], "function1": 447, "param1": 447, "param2": 447, "parameter1": 447, "parameter2": 447, "function2": 447, "pep": [447, 668], "484": [447, 741], "output_model": [447, 687, 710, 712, 736], "function3": 447, "section": [447, 651, 668, 672, 673, 674, 707, 710, 713, 726, 728, 732, 740], "restructuredtext": 447, "liter": 447, "generator1": 447, "example_gener": 447, "exampleclass": 447, "param3": 447, "public": [447, 643, 702, 705], "attr1": 447, "attr2": 447, "attr5": 447, "api_doc_exampl": 448, "smoothquantconfig": [451, 470], "calib_iter": [451, 455, 468, 469, 472, 650], "scaler": 452, "kerasqueri": 455, "kerasconfigconvert": 455, "staticquantconfig": [455, 456, 466, 470, 572], "kerassurgeri": 455, "tensorflowconfig": 456, "tensorflowconfigconvert": 456, "weight_granular": [466, 470], "per_tensor": [466, 470, 650, 651, 679, 729, 740], "act_sym": [466, 470], "act_granular": [466, 470], "get_all_registered_config": 466, "get_default_static_quant_config": [466, 470], "static_quant_entri": 468, "weight_algorithm": 470, "act_algorithm": 470, "record_max_info": [470, 591], "weight_clip": 470, "default_sq_alpha_arg": 470, "quantize_model": 472, "quantize_model_with_single_config": 472, "dummydatasetv2": 567, "itex_instal": 572, "instal": [572, 675, 678, 680, 690, 692, 695, 698, 702, 705, 707, 708, 710, 711, 712, 742], "combine_histogram": [572, 639], "old_hist": [572, 639], "old": [572, 639, 687, 733], "get_all_fp32_data": [572, 639], "get_tensor_histogram": [572, 639], "scale_info": [572, 639], "dequantize_weight": [572, 639], "weight_tensor": [572, 639], "min_filter_tensor": [572, 639], "max_filter_tensor": [572, 639], "dump_data_to_loc": [572, 639], "pkl": [572, 639, 711], "load_data_from_pkl": [572, 639], "valid_keras_format": 572, "statist": [572, 595, 639, 640], "header": [572, 595, 639, 678], "field_nam": [572, 595, 639], "output_handl": [572, 595, 639], "printer": [572, 595, 639], "captureoutputtofil": [572, 639], "tmp_file_path": [572, 639], "stream": [572, 639, 741], "sy": [572, 639, 668, 693], "stderr": [572, 639], "captur": [572, 639], "recover_model_from_json": [589, 638], "json_file_path": [589, 638], "run_fn": [590, 618, 622], "carri": [590, 726], "scale_shar": 591, "staticquantquant": 594, "ordereddict": [594, 597, 609, 668], "user_cfg": 595, "get_quantizable_ops_recurs": 595, "warm": 595, "dump_model_op_stat": 595, "autoroundquant": 596, "get_autoround_default_run_fn": 596, "properli": [596, 715], "warn": [596, 635, 668], "awqquant": 597, "rawgptquant": 598, "export_compressed_model": [598, 619, 634, 732], "use_layer_wis": [598, 619], "hqqmoduleconfig": 600, "immut": 600, "constructor": 600, "hqquantiz": 605, "configmappingtyp": 605, "rtnquantiz": 609, "trainableequivalenttransform": 610, "replace_forward": 611, "recover_forward": 611, "device_typ": 612, "_dtype": 612, "cache_en": 612, "manag": [612, 628, 631, 687, 690, 691, 701], "region": [612, 735], "chosen": [612, 650, 667], "enter": [612, 701, 707, 715], "half": [612, 688, 698], "backward": [612, 628, 673, 674, 675, 687, 725, 726, 729, 733], "hpu": 612, "float8_e4m3fn": 612, "autocastmodel": 612, "affect": [612, 735], "dataparallel": 612, "distributeddataparallel": 612, "torch_dtyp": [612, 651], "rtn_entri": 617, "configs_map": 617, "run_arg": [618, 622], "use_sym": 619, "use_full_rang": 619, "use_mse_search": 619, "use_double_qu": 619, "double_quant_dtyp": 619, "double_quant_bit": 619, "double_quant_use_sym": 619, "double_quant_group_s": 619, "act_ord": 619, "static_group": [619, 732], "hqqconfig": 619, "quant_zero": 619, "quant_scal": 619, "scale_quant_group_s": 619, "skip_lm_head": 619, "get_default_hqq_config": 619, "hqq": 619, "monitor": [622, 715, 720, 721, 722], "register_acceler": 623, "ellipsi": 623, "cuda_acceler": 623, "cpu_acceler": 623, "xpu_acceler": 623, "hpu_acceler": 623, "loop": [628, 645, 646, 650, 651, 679, 717, 734, 738], "compressionmanag": 628, "deal": 628, "pruningconfig": 628, "orchestr": [628, 648, 682, 739], "on_train_begin": [628, 645, 673, 674, 687, 725, 726, 729], "train_loop": [628, 687, 725], "on_epoch_begin": [628, 631, 673, 674, 687, 725], "on_step_begin": [628, 631, 673, 674, 687, 725, 726], "on_after_compute_loss": [628, 673, 674, 687, 725], "on_before_optimizer_step": [628, 673, 674, 687, 725, 726], "on_step_end": [628, 631, 673, 674, 687, 725], "on_epoch_end": [628, 631, 673, 674, 687, 725], "on_train_end": [628, 673, 674, 687, 725, 726, 729], "path_to_sav": 628, "top1": [628, 686, 709, 726, 729, 741], "callbacks_list": 628, "layerhistogramcollector": 629, "layer_tensor": 629, "include_lay": 629, "get_func_from_config": 631, "func_dict": 631, "get_preprocess": 631, "get_metr": 631, "get_postprocess": 631, "get_algorithm": 631, "create_dataset": 631, "cfg_preprocess": 631, "cfg_filter": 631, "create_dataload": 631, "dataloader_cfg": 631, "create_eval_func": 631, "postprocess_cfg": 631, "baselin": [631, 734, 735, 736], "create_train_func": 631, "train_cfg": 631, "Their": 631, "auxiliari": 632, "optimizedmodel": 634, "from_pretrain": [634, 648, 687], "save_for_huggingface_upstream": [634, 687], "saved_dir": [634, 732], "use_optimum_format": [634, 732], "compression_dtyp": [634, 732], "compression_dim": [634, 732], "comoress": 634, "msg": [635, 716, 720, 721], "fatal": 635, "alia": [635, 639, 692, 697], "register_neural_insights_workload": 636, "workload_loc": [636, 639], "workload_mod": 636, "workload_nam": 636, "uuid": 636, "update_neural_insights_workload": 636, "workload_uuid": 636, "update_neural_insights_workload_accuracy_data": 636, "baseline_accuraci": 636, "optimized_accuraci": 636, "get_model_path": 636, "is_int8_model": 638, "load_weight_onli": 638, "checkpoint_dir": 638, "history_cfg": 638, "best_configur": 638, "best_model_weight": 638, "snapshot": [638, 711], "cfg_from_fil": 639, "yaml_fil": [639, 670, 675], "time_limit": 639, "get_siz": 639, "seen": [639, 649], "compute_spars": 639, "fault_tolerant_fil": 639, "equal_dict": 639, "d2": 639, "compare_kei": 639, "ignore_kei": 639, "ignor": [639, 667, 670, 732, 735, 738], "get_tuning_histori": 639, "tuning_history_path": 639, "offlin": [639, 643, 687, 729, 735], "str2arrai": 639, "global_st": 639, "show_memory_info": 639, "hint": 639, "dump_class_attr": 639, "compare_object": 639, "obj1": 639, "obj2": 639, "ignore_attr": 639, "comparison": [639, 732, 733, 736], "alias_param": 639, "param_nam": 639, "param_alia": 639, "alias": [639, 668], "print_tabl": 639, "column_map": 639, "table_entri": 639, "titl": [639, 684, 708, 738], "insert_newlin": 639, "prettyt": 639, "column": [639, 732, 735], "handler": [639, 738], "row": [639, 672, 710, 735], "decim": 639, "get_tensors_info": 639, "get_weights_detail": 639, "weightdetail": 639, "dump_tabl": 639, "file_typ": 639, "csv": [639, 646, 710, 711], "dump_table_to_csv": 639, "get_number_of_socket": 639, "platform": [639, 648, 682, 690, 698, 717, 727, 729], "opentri": 639, "activation_min": 639, "activation_max": 639, "print_op_list": 639, "get_op_list": 639, "minmax_file_path": 639, "input_model_tensor": 639, "optimized_model_tensor": 639, "activation_min_max": 639, "calculate_ms": 639, "mse_metric_gap": 639, "fp32_tensor": 639, "dequantize_tensor": 639, "euclidean": [639, 673], "distanc": [639, 673], "check_key_exist": 639, "weightsdetail": 640, "input_tensor_data": 640, "optimized_tensor_data": 640, "weightsstatist": 640, "welcom": [642, 643, 644, 648, 709, 716, 742], "interest": [643, 648, 709, 736], "foster": 643, "particip": [643, 717], "commun": [643, 709], "harass": 643, "experi": [643, 690, 712, 734, 735, 738], "everyon": 643, "regardless": 643, "ag": 643, "bodi": 643, "ethnic": 643, "characterist": 643, "gender": 643, "educ": 643, "socio": 643, "econom": 643, "race": 643, "religion": 643, "sexual": 643, "orient": 643, "contribut": [643, 648, 726], "inclus": 643, "Being": 643, "respect": [643, 679, 726, 735, 740], "viewpoint": 643, "gracefulli": 643, "focus": [643, 649], "empathi": 643, "toward": [643, 673], "member": [643, 649], "unaccept": 643, "imageri": 643, "unwelcom": 643, "troll": 643, "insult": 643, "derogatori": 643, "polit": 643, "attack": 643, "privat": 643, "publish": [643, 684, 685, 688, 708, 735], "electron": 643, "explicit": 643, "permiss": 643, "inappropri": 643, "profession": 643, "clarifi": 643, "appropri": [643, 667, 735], "fair": 643, "action": [643, 702, 705], "edit": 643, "reject": 643, "commit": [643, 644], "wiki": 643, "issu": [643, 644, 647, 648, 683, 710, 712, 729, 736], "ban": 643, "deem": 643, "threaten": 643, "offens": 643, "harm": 643, "mail": 643, "social": [643, 727], "media": [643, 727], "account": [643, 734, 738], "appoint": 643, "onlin": [643, 734], "event": [643, 736], "abus": 643, "report": [643, 644, 648, 717, 734], "contact": [643, 733, 734], "complaint": 643, "review": [643, 644, 648, 727], "investig": [643, 668, 712], "circumst": [643, 728], "oblig": [643, 713], "confidenti": [643, 709], "regard": [643, 731], "incid": 643, "good": [643, 729, 738], "faith": 643, "repercuss": 643, "leadership": 643, "faq": [643, 648], "page": [643, 644, 709, 712, 713], "send": [644, 650], "view": [644, 648, 676, 698, 707, 713, 733], "star": 644, "repositori": [644, 702, 705], "button": [644, 682, 701, 707], "fork": [644, 702, 705], "clone": [644, 672, 683, 700, 704, 709, 711, 712, 714, 715], "pc": 644, "git": [644, 672, 678, 683, 709, 711, 712, 714, 715], "modif": [644, 649, 679, 695, 714], "checkout": 644, "my": 644, "push": [644, 726, 732, 735], "cover": [644, 677, 681, 727], "would": [644, 687, 711, 726, 729, 735], "adopt": [644, 690, 726, 727, 735], "certif": [644, 709], "agre": 644, "pr": [644, 669, 686, 702, 705, 733], "At": [644, 650, 713, 717, 738], "approv": 644, "solv": [644, 729, 733], "licens": 644, "azur": [644, 648, 727], "devop": 644, "ci": 644, "cloud": [644, 648, 717, 727], "deploi": [644, 673, 687, 713, 717, 732, 738], "e16": 644, "v5": 644, "scan": [644, 648], "pylint": 644, "bandit": 644, "copyright": [644, 684], "docstyl": 644, "spellcheck": 644, "dco": 644, "pytest": 644, "No": [644, 668, 678, 687, 715, 716, 727], "failur": [644, 645], "fault": 644, "coverag": 644, "runtim": [644, 648, 649, 650, 652, 669, 672, 676, 679, 682, 688, 692, 697, 698, 728, 732, 733, 738], "submit": [644, 714, 717, 727], "bug": [644, 648], "intend": 644, "safe": 644, "collabor": [644, 648, 692, 698], "adher": 644, "toolkit": [645, 683, 690, 698, 727, 739], "tracer": 645, "resolv": [645, 647], "floatfunct": 645, "cat": [645, 677, 693, 720, 721, 722], "done": [645, 673, 674, 691, 707, 716, 720, 721, 726, 729], "10004": [645, 646, 649, 669, 673, 674, 675, 679, 682, 688, 725, 728, 730, 732, 740], "neural_compressor": [645, 646, 648, 651, 666, 668, 669, 670, 672, 673, 674, 675, 677, 680, 681, 686, 687, 688, 689, 709, 710, 724, 725, 726, 728, 729, 730, 731, 733, 734, 735, 737, 738, 740], "eval": [645, 668, 669, 672, 690, 729, 736], "conduct": [645, 687, 695, 707, 738, 739], "imper": 645, "therefor": [645, 687, 710, 712, 726, 729, 730, 733, 735], "lot": [645, 712, 735], "As": [645, 650, 669, 673, 686, 687, 701, 712, 726, 732, 738], "successfulli": [645, 648, 675, 716, 720, 721, 722, 727], "suggest": [645, 668, 734], "traceabl": 645, "proxi": 645, "tutori": [645, 698, 727, 739], "prototyp": 645, "html": [645, 648, 650, 667, 675, 682, 702, 705, 708, 710, 716, 720, 729], "highlight": 645, "untrac": 645, "ssd": [645, 677, 741], "resnet34": [645, 741], "r34": 645, "bboxes_labels_scor": 645, "prob": 645, "45": [645, 685, 741], "max_output": 645, "zip": [645, 716, 720, 721], "dbox": 645, "dlabel": 645, "dscore": 645, "decode_singl": 645, "autom": [646, 690, 707, 708, 727, 735], "artifici": 646, "ann": 646, "par": [646, 717], "outperform": 646, "hand": 646, "propos": [646, 649, 673, 688, 732, 735], "potenti": [646, 672], "lie": [646, 667], "predictor": 646, "shown": [646, 669, 672, 673, 686, 687, 701, 710, 712, 724, 725, 726, 730, 735, 738], "figur": [646, 700, 701, 704, 730], "popul": 646, "inner": 646, "evolutionari": 646, "until": [646, 650, 738], "conclud": 646, "yet": [646, 702, 705, 708, 715, 729], "simplest": [646, 667, 693], "launcher": [646, 648, 673, 674, 698, 739], "agent": 646, "nsga2": 646, "supernet": 646, "ofa_mbv3_d234_e346_k357_w1": 646, "acc": [646, 685, 717, 726, 736, 741], "mac": [646, 708], "num_ev": 646, "250": [646, 726], "results_csv_path": 646, "search_result": 646, "dataset_path": 646, "ilsvrc2012": 646, "aim": [646, 648, 685, 690, 726, 735, 738, 739], "mobilenetv3": 646, "lt": [646, 670], "wmt": 646, "en": 646, "de": 646, "guidelin": [647, 648], "mainstream": [648, 739], "workflow": [648, 650, 651, 672, 673, 677, 683, 688, 702, 705, 709, 736, 739], "particular": [648, 726, 732], "wide": [648, 676, 688, 726, 729], "hardwar": [648, 649, 673, 682, 687, 707, 726, 727, 728], "xeon": [648, 683, 684, 685, 688, 727, 729, 731, 741], "scalabl": [648, 683, 685, 688, 727, 729, 731], "processor": [648, 685, 688, 715, 727, 729, 731], "flex": [648, 683], "amd": [648, 683, 741], "arm": [648, 682, 683, 741], "nvidia": [648, 667, 682, 683, 741], "llama2": 648, "falcon": [648, 685, 726, 735, 741], "j": [648, 685, 711, 726, 735, 741], "bloom": [648, 685, 726, 735, 741], "broad": [648, 682, 696, 739], "stabl": [648, 683, 726, 727], "diffus": [648, 727], "vision": [648, 677, 694, 735], "coder": [648, 682, 691, 692, 695, 698, 701, 714, 718, 727], "marketplac": [648, 708, 727], "googl": [648, 668, 688, 727], "amazon": [648, 690, 698], "web": [648, 709, 715, 720, 721, 722, 736], "servic": [648, 707, 714, 727], "softwar": [648, 684, 726, 727, 733], "alibaba": [648, 697, 704, 705, 727], "tencent": [648, 727], "taco": [648, 727], "oliv": [648, 727], "ai": [648, 690, 727, 731, 739], "ecosystem": [648, 727], "lightn": [648, 697], "2024": [648, 741], "03": [648, 741], "sota": [648, 727], "gaudi2": 648, "pip": [648, 672, 675, 678, 680, 683, 692, 695, 700, 702, 704, 705, 709, 710, 711, 712, 733], "34": [648, 685, 722, 741], "program": [648, 675, 684, 690, 707], "demonstr": [648, 676, 690, 720, 721, 722, 736], "gauid2": 648, "docker": 648, "gaudi": 648, "setup": [648, 672, 679, 683, 702, 705, 709, 711, 712, 714, 715, 726], "habana": 648, "habana_visible_devic": 648, "ompi_mca_btl_vader_single_copy_mechan": 648, "cap": 648, "sys_nic": 648, "host": [648, 675, 715, 717, 720, 721, 722], "ipc": 648, "vault": 648, "ubuntu22": 648, "04": [648, 683, 685, 741], "habanalab": 648, "latest": [648, 683, 727, 733], "login": [648, 702, 705, 734], "exec": 648, "container_id": 648, "bash": [648, 712, 736], "optimum": [648, 697, 698, 710, 732], "upgrad": [648, 687], "auto_round": 648, "automodel": 648, "autotoken": [648, 687], "get_dataload": 648, "eleutherai": [648, 685, 711, 735, 741], "neo": [648, 741], "125m": [648, 735], "trust_remote_cod": 648, "woq_conf": 648, "quantized_model": [648, 716, 720, 721], "int4": [648, 685, 729, 741], "resnet18": [648, 688, 692, 741], "static_quant_conf": 648, "overview": [648, 738], "jupyterlab": [648, 690, 696, 698, 700, 704, 739], "studio": [648, 698, 707, 717, 739], "topic": 648, "fp8": [648, 727], "innov": [648, 698, 727], "blog": [648, 727], "llama": [648, 685, 726, 727, 730, 732, 735, 741], "oct": [648, 727], "2023": [648, 722, 726, 732, 735], "emnlp": [648, 727], "teq": [648, 727, 730, 732], "sep": [648, 727], "releas": [648, 683, 696, 698, 700, 704, 706, 718, 721, 722, 742], "legal": [648, 742], "request": [648, 715, 716, 717, 720, 721, 722, 729], "ask": [648, 683], "email": 648, "research": [648, 684, 735, 741], "idea": [648, 709, 726, 735, 738], "discord": 648, "join": [648, 710, 715, 720, 721], "technic": 648, "discuss": 648, "wechat": [648, 727], "img": 648, "bridg": [649, 650, 682], "vanilla": [649, 650, 682], "abcadaptor": 649, "__init__": [649, 668, 669, 670, 686, 738], "query_fw_cap": [649, 651], "query_fused_pattern": 649, "he": 649, "besid": [649, 673, 712, 732], "describ": [649, 651, 668, 672, 679, 709, 736], "past": [649, 732], "mainten": 649, "difficult": [649, 735], "abil": [649, 650, 670, 679, 735], "fragment": 649, "scenario": [649, 666, 673, 687, 726, 732], "granular": [649, 650, 651, 679, 682, 693, 729, 735, 740], "semant": [649, 679], "mla": [649, 688, 729], "becom": [649, 677, 726, 732], "explor": 649, "inspect_tensor": 649, "op_list": [649, 736], "iteration_list": 649, "inspect_typ": 649, "save_to_disk": 649, "quantization_cfg": 649, "set_tensor": 649, "tensor_dict": 649, "diagnosis_help": 649, "fw": 650, "outlin": [650, 651], "instruct": [650, 651, 673, 683, 688, 702, 705, 709, 710, 711, 712, 726, 727, 728, 729, 735, 741], "extend": [650, 651], "accommod": [650, 651], "incorpor": [650, 651, 674, 726, 738], "diagram": [650, 651, 672, 738], "illustr": [650, 651, 674, 738], "sequencediagram": [650, 651, 717], "autonumb": [650, 651], "query_framework_cap": 650, "opwis": 650, "optypewis": 650, "travers": [650, 651, 732, 738], "\u2776": 650, "\u2777": 650, "\u2778": 650, "\u2779": 650, "\u277a": 650, "\u277b": 650, "\u277c": 650, "These": [650, 682, 710], "chapter": 650, "node_op": 650, "confirm": 650, "int8_conv_config": 650, "optype_wise_": 650, "tuning_cfg_to_fw": 650, "Its": [650, 667, 726], "dispatch": [650, 682, 714, 717], "is_perchannel": 650, "is_asymmetr": 650, "convert_bf16": 650, "somewhat": 650, "distort": 650, "line": [650, 668, 675, 682, 690, 695, 696, 715, 736], "let": [651, 679, 695, 726, 728, 740], "overal": [651, 715, 740], "drive": 651, "uint4": 651, "asymmetr": [651, 729, 732, 738], "kullback": [651, 673], "leibler": [651, 673], "pytorch_cpu": 651, "1_11_capabl": 651, "cap_s8_1_11": 651, "cap_s8_1_11_conv1d": 651, "per_channel_symmetr": 651, "addition": [651, 675, 726, 738], "per_tensor_symmetr": 651, "due": [651, 677, 726, 729, 735, 736], "nativ": 651, "with_arg": 651, "qscheme": 651, "quant_min": 651, "quant_max": 651, "linux": [666, 678, 683, 701, 707], "x86_64": 666, "aarch64": 666, "prove": [667, 732, 735], "benefici": 667, "uniform": [667, 732], "\u03b2": 667, "\u03b1": 667, "fundament": [667, 687], "primari": [667, 738], "focu": [667, 738], "essenti": [667, 678], "remaind": 667, "enhanc": [667, 690, 726, 727, 731], "resolut": 667, "extrem": 667, "still": [667, 687, 713, 727, 729, 731], "retain": 667, "noteworthi": 667, "vanhouck": 667, "vincent": 667, "andrew": 667, "senior": 667, "mark": 667, "mao": 667, "speed": [667, 687, 698, 726, 727, 729, 738], "2011": 667, "szymon": 667, "migacz": 667, "2017": 667, "mckinstri": 667, "jeffrei": 667, "l": [667, 673, 736, 738], "discov": [667, 736], "preprint": [667, 726, 732, 735], "1809": 667, "04191": 667, "2018": 667, "mostli": 668, "overli": 668, "argu": 668, "decis": [668, 686], "sub_modul": 668, "namespac": 668, "pollut": 668, "subprocess": [668, 669], "popen": 668, "statement": 668, "pipe": 668, "long_str": 668, "extran": 668, "pager": 668, "getenv": 668, "readabl": 668, "seem": 668, "worth": [668, 726], "4f": 668, "65421": 668, "sentenc": 668, "eval_result": 668, "declar": [668, 708], "typealia": 668, "_lossandgradi": 668, "complextfmap": 668, "xx_func": 668, "pylanc": 668, "cheeseshopaddress": 668, "chees": 668, "shop": 668, "outofcheeseerror": 668, "crbug": 668, "192795": 668, "cpufreq": [668, 693], "facilit": [668, 690], "__all__": 668, "get_all_config_set_from_config_registri": 668, "algorithm_entri": 668, "autotun": 668, "static_qu": 668, "snippet": [668, 682], "rtn_algo_entri": 668, "vscode": [668, 706, 708], "settings_recommend": 668, "encount": 669, "consum": 669, "previous": 669, "lack": [669, 678], "faster": [669, 671, 677, 727, 738, 741], "Of": 669, "evenli": 669, "divid": [669, 717, 735, 738], "discard": 669, "throw": 669, "awai": 669, "draw": [669, 734, 738], "pin": [669, 700, 704], "reshuffl": 669, "manner": [669, 673, 689], "newdataload": 669, "customis": [669, 670, 686], "ensp": [670, 737], "imagerecord": [670, 675, 740], "image_nam": 670, "cocorecord": 670, "gt": [670, 735, 737], "int64": 670, "offer": 670, "style_transf": 670, "content": [670, 715, 716, 720, 721, 722], "tfrecorddataset": 670, "labelbal": 670, "300": [670, 726], "16": [670, 683, 720, 732, 741], "helloworld": [670, 688, 737], "aid": 671, "deploy": [671, 690, 707, 727, 730, 735], "infrastructur": 671, "diagnos": 672, "gui": [672, 682, 712, 726], "termin": [672, 700, 701, 704, 710], "repeat": [672, 738], "durat": [672, 716, 720, 721, 734], "cd": [672, 675, 683, 709, 711, 712, 714, 715, 720, 721, 722], "ilsvr2012": 672, "wget": [672, 678, 680, 709, 712], "caff": 672, "berkeleyvis": 672, "caffe_ilsvrc12": 672, "xvzf": 672, "image_recognit": [672, 712, 736], "resnet50_torchvis": 672, "ptq_static": [672, 711], "resnet50_v1": [672, 675, 687], "dataset_loc": [672, 712, 720, 736], "label_path": 672, "quantiti": 672, "vec": 672, "mu": 672, "frac": [672, 735], "sigma": 672, "var": 672, "happen": 672, "dispers": [672, 710], "rule": [672, 690, 726], "v0": [672, 685, 712, 735, 736], "cg": [672, 712, 736], "conv0": [672, 712, 736], "expens": [673, 687, 738], "mobil": [673, 687, 741], "produc": 673, "logit": 673, "softmax": 673, "kd": 673, "patient": 673, "compact": [673, 687, 693, 726], "agnost": 673, "resourc": [673, 714, 717, 738], "convolut": [673, 727], "ia": 673, "attach": [673, 687, 735], "shallow": 673, "deepest": 673, "deeper": 673, "10006": [673, 674], "student_output": [673, 674], "student_loss": [673, 674], "training_func_for_nc": [673, 674], "distil_loss_conf": 673, "accordingli": [673, 698, 735], "promis": [674, 687, 726], "huge": [674, 712, 726, 730], "heavi": 674, "light": 674, "booster": 674, "degrad": [674, 726, 738], "novel": [674, 690, 701, 707], "comb": 674, "distillation_criterion": [674, 687, 725], "q_conf": 674, "horovod": 675, "enable_eager_execut": 675, "yaml_file_path": 675, "pre_process": 675, "simpli": [675, 689, 690, 692, 695, 707, 715], "evaluation_result": 675, "evaluation_time_cost": 675, "partit": [675, 726], "distributedsampl": 675, "train_sampl": 675, "train_dataset": [675, 729], "num_replica": 675, "rank": 675, "train_load": 675, "train_kwarg": 675, "adadelta": 675, "distributedoptim": 675, "named_paramet": 675, "broadcast_paramet": 675, "root_rank": 675, "broadcast_optimizer_st": 675, "set_epoch": 675, "batch_idx": 675, "zero_grad": [675, 687, 726], "nll_loss": 675, "log_interv": 675, "0f": 675, "tloss": 675, "6f": 675, "dry_run": 675, "test_func": 675, "num_of_process": 675, "002": 675, "ssh": [675, 707], "prompt": 675, "readm": [675, 720], "exactli": [675, 691], "recognit": [675, 677, 726, 736], "resizecropimagenet": [675, 737], "realiz": [675, 724, 731, 734], "tow": 675, "node1": [675, 720, 721], "node2": [675, 720, 721], "TO": [675, 692, 712], "your_node1_nam": 675, "your_node2_nam": 675, "resnet50_fp32_pretrained_model": 675, "nc_resnet50_v1": 675, "resnet": [675, 741], "varieti": [676, 728, 738], "speedup": [676, 682, 729], "2x": [676, 682], "vnni": [676, 682, 728, 729], "exchang": 677, "hope": 677, "inc_model": [677, 689], "fp32_onnx_config": 677, "verifi": [677, 685], "vgg16": [677, 741], "mobilenet": [677, 734, 741], "rcnn": 677, "torchscript": [677, 730, 735], "unsupport": [677, 687, 726], "add_relu": 677, "conv1d_relu": 677, "conv2d_relu": 677, "group_norm": 677, "hardswish": 677, "instance_norm": 677, "layer_norm": 677, "leaky_relu": 677, "sigmoid": 677, "toolchain": [678, 727], "bare": 678, "metal": 678, "sudo": [678, 693], "apt": [678, 683, 693, 701], "python3": 678, "dev": [678, 700, 704], "distutil": 678, "libgl1": 678, "mesa": 678, "glx": 678, "libglib2": 678, "ln": 678, "sf": 678, "usr": 678, "incompat": 678, "88": [678, 734, 741], "80": [678, 685, 730, 736, 741], "pyobject": 678, "reinstal": 678, "libgl": 678, "yum": [678, 683], "opencv": [678, 683, 701], "conda": [678, 683, 693, 701, 720, 721, 722, 733], "13": [678, 683, 685, 709, 733, 735, 741], "pend": [678, 716], "sqlalchemi": 678, "27": [678, 741], "alemb": 678, "forg": [678, 683], "quick": [679, 688, 726, 739, 740], "friendli": [679, 687, 727, 735, 739, 740], "dive": [679, 739], "purpos": [679, 688, 707, 709, 728, 729], "syntax": 679, "go": [679, 702, 705, 713, 728, 732, 737], "up1": 679, "up2": 679, "valid_mixed_precis": 679, "addn": 679, "grappler_optim": 679, "constfold": 679, "arithmet": 679, "debug_stripp": 679, "googleapi": [680, 709, 712], "v1_6": [680, 709, 712], "mobilenet_v1_1": [680, 709, 720], "0_224_frozen": [680, 709, 720], "major": [681, 712, 729, 735], "concept": [681, 734, 739], "rather": [681, 732], "custom_metr": 681, "refin": [681, 726], "420": 682, "geomean": 682, "upload": [682, 702, 705], "click": [682, 690, 691, 698, 701, 707, 712, 727, 736], "qintegerop": [682, 729], "plan": 682, "oneapi": [683, 727, 739], "analyt": [683, 727, 739], "success": [683, 709], "11": [683, 685, 686, 688, 709, 735, 738, 741], "frequent": 683, "pypi": [683, 702, 705], "nightli": 683, "headless": [683, 701], "fastai": 683, "esri": 683, "consolid": 683, "eas": [683, 692, 727], "along": [683, 726, 732], "streamlin": [683, 714, 727], "scienc": 683, "websit": 683, "anaconda": [683, 714, 715], "suit": [683, 708, 736], "formerli": 683, "skylak": 683, "cascad": 683, "lake": [683, 688, 727], "cooper": [683, 688, 727], "ic": [683, 727], "sapphir": [683, 685], "rapid": [683, 685], "hbm": 683, "arctic": 683, "sound": 683, "pont": 683, "vecchio": 683, "cento": [683, 741], "ubuntu": 683, "22": [683, 685, 741], "maco": 683, "ventura": 683, "fortensorflow": 683, "forpytorch": 683, "17": [683, 720], "tf_enable_onednn_opt": 683, "onednn": [683, 688, 729], "newer": 683, "subject": 684, "accompani": [684, 738], "wish": 684, "bibtex": 684, "author": 684, "feng": 684, "tian": 684, "hanwen": 684, "haihao": [684, 726], "shen": [684, 726], "suyu": 684, "chen": 684, "howpublish": 684, "year": 684, "logo": 684, "atom": 684, "phi": 684, "pentium": 684, "vtune": 684, "corpor": 684, "subsidiari": 684, "brand": 684, "claim": 684, "sq": [685, 735], "woq": 685, "4th": [685, 727, 729], "gen": [685, 688, 727, 729, 731], "codenam": [685, 688], "quickli": [685, 738, 739], "6b": [685, 711, 735, 741], "facebook": [685, 713, 735, 741], "3b": [685, 735], "30b": [685, 735, 741], "7b": [685, 735, 741], "13b": [685, 735, 741], "70b": [685, 741], "tiiuae": [685, 735, 741], "40b": 685, "baichuan": 685, "chat": [685, 735, 741], "baichuan2": 685, "bigscienc": [685, 735, 741], "1b7": [685, 735], "databrick": [685, 735, 741], "dolli": [685, 726, 735, 741], "12b": 685, "neox": [685, 741], "20b": [685, 741], "mistralai": 685, "mistral": 685, "thudm": 685, "chatglm2": 685, "wip": 685, "chatglm3": 685, "soon": 685, "lambada_openai": [685, 741], "67": [685, 741], "57": [685, 735, 741], "68": [685, 737, 741], "23": [685, 741], "0098": 685, "0000": [685, 689], "84": [685, 735, 741], "0040": 685, "71": [685, 741], "51": [685, 741], "70": [685, 741], "89": [685, 735, 741], "9913": 685, "53": [685, 741], "0003": [685, 741], "76": [685, 741], "0035": 685, "96": [685, 741], "0043": 685, "59": [685, 735, 741], "9988": 685, "24": [685, 726, 738, 741], "9936": 685, "9963": [685, 741], "46": [685, 741], "47": [685, 741], "0356": 685, "38": [685, 741], "0009": 685, "19": [685, 740, 741], "9968": 685, "35": [685, 726, 741], "9961": [685, 741], "79": [685, 736, 741], "0070": 685, "43": [685, 741], "0018": 685, "72": [685, 735, 741], "25": [685, 726, 741], "9989": 685, "9949": 685, "54": [685, 740, 741], "9940": 685, "58": [685, 721, 741], "0033": 685, "0117": 685, "49": [685, 741], "82": [685, 741], "0046": [685, 741], "0087": 685, "77": [685, 741], "9932": [685, 741], "75": [685, 726, 741], "9997": 685, "0086": [685, 735], "55": [685, 722, 741], "9991": 685, "09": [685, 741], "0057": 685, "97": [685, 687, 741], "0041": 685, "73": [685, 741], "92": [685, 741], "0005": 685, "9942": [685, 741], "9987": 685, "0030": [685, 741], "61": [685, 741], "9962": [685, 741], "9992": 685, "52": [685, 741], "9914": 685, "0023": 685, "9986": 685, "9919": [685, 741], "9977": 685, "94": [685, 737, 741], "0093": 685, "78": [685, 737, 741], "0203": 685, "74": [685, 741], "44": [685, 741], "0237": 685, "0013": 685, "00": [685, 741], "0044": 685, "popularli": 686, "industri": [686, 727], "label_map": 686, "ap": 686, "curv": 686, "turn": [686, 701, 730], "target_boxes_num": 686, "str_label": 686, "int_label": 686, "inturn": 686, "cocomap": 686, "vocmap": 686, "categor": 686, "multiclass": 686, "multilabel": 686, "newmetr": 686, "reset": 686, "reflect": [686, 737], "new_metr": 686, "deliv": [687, 727, 733], "conveni": [687, 714], "veri": [687, 708, 712, 729, 732, 738, 739], "comprehens": [687, 739], "resort": 687, "automodelforsequenceclassif": 687, "val_dataset": [687, 729], "val_dataload": [687, 729], "worker": [687, 717, 720, 721, 722, 729], "ping_memori": [687, 729], "formul": 687, "effort": 687, "written": 687, "onnxrt_integ": [687, 740], "onnxrt_qlinear": [687, 740], "image_tensor": [687, 740], "post_training_dynamic_qu": [687, 728, 738], "1000": [687, 716, 740], "2000": 687, "sampling_s": [687, 740], "model_wis": [687, 740], "op_dict": 687, "op_wis": [687, 736, 740], "sigopt_api_token": [687, 734, 738], "sigopt_project_id": [687, 734, 738], "sigopt_experiment_nam": [687, 734, 738], "demo": 687, "600": [687, 741], "training_arg": 687, "emul": [687, 729], "trainer": [687, 698], "briefli": [687, 735], "maxim": [687, 726, 738], "pruning_func": 687, "train_dataload": [687, 726, 729], "n_gpu": 687, "gradient_accumulation_step": 687, "clip_grad_norm_": 687, "max_grad_norm": 687, "start_epoch": [687, 728, 740], "end_epoch": [687, 728, 740], "newli": [687, 726], "on_after_optimizer_step": [687, 726], "layer3": [687, 726], "0004": 687, "nesterov": [687, 740], "randomresizedcrop": [687, 737], "totensor": [687, 737], "485": 687, "456": 687, "406": [687, 741], "nepoch": 687, "cnt": 687, "loss_sum": 687, "iter_bar": 687, "desc": 687, "teacher_logit": 687, "train_fun": 687, "training_func": 687, "recent": [687, 688], "growth": [687, 688, 726], "significantli": [687, 688, 710, 712, 726, 738], "bandwidth": [687, 688, 732], "exit_polici": [687, 740], "determinist": 687, "meaning": [687, 725], "reli": [687, 735], "prune_conf": 687, "quantization_aware_training_conf": 687, "aforement": 687, "inset": 687, "p_conf": [687, 725], "ssd_mobilenet_v1": 687, "benchmarkconf": 687, "sixteen": 688, "launch": [688, 708, 713], "3rd": [688, 727, 729, 731], "boost": [688, 691, 707, 726, 727], "x86": 688, "avx512": [688, 729], "vcvtne2ps2bf16": 688, "vcvtneps2bf16": 688, "vdpbf16p": 688, "fbgemm": [688, 729], "tensorrtexecutionprovid": [688, 729], "cudaexecutionprovid": [688, 729], "dnnlexecutionprovid": [688, 729], "avx512_bf16": 688, "plu": 688, "persist": 689, "brought": [689, 691, 698, 729], "tf2": 689, "h5": 689, "hybridblock": 689, "saved_result": [689, 711, 732], "simplifi": [690, 701, 707, 726, 727], "acquir": 690, "analysi": [690, 707, 726, 734], "heurist": [690, 707], "great": 690, "autocast": 690, "my_model": 690, "no_grad": 690, "memory_format": 690, "112": 690, "plugin": [690, 708], "aw": [690, 698, 717, 727, 741], "sagemak": [690, 698], "neural_cod": [690, 692, 694, 695, 696, 698], "bench": 690, "superbench": 690, "enjoi": [691, 695, 698], "modern": [692, 732], "democrat": [692, 727], "programm": [692, 698, 707], "nano_bf16_channels_last": 692, "nano_bf16_ipex_channels_last": 692, "nano_bf16_ipex": 692, "nano_bf16": 692, "nano_fp32_channels_last": 692, "nano_fp32_ipex_channels_last": 692, "nano_fp32_ipex": 692, "nano_gpu_to_cpu": 692, "nano_int8": 692, "nano_jit_bf16_channels_last": 692, "nano_jit_bf16_ipex_channels_last": 692, "nano_jit_bf16_ipex": 692, "nano_jit_bf16": 692, "nano_jit_fp32_channels_last": 692, "nano_jit_fp32_ipex_channels_last": 692, "nano_jit_fp32_ipex": 692, "nano_jit_fp32": 692, "nano_onnxruntime_fp32": 692, "nano_onnxruntime_int8_qlinear": 692, "openvino": 692, "nano_openvino_fp32": 692, "nano_openvino_int8": 692, "bc": [693, 701], "conda_prefix": 693, "echo": 693, "tradit": [693, 726], "libjemalloc": 693, "libiomp5": 693, "home": 693, "lib": 693, "ld_preload": 693, "malloc_conf": 693, "oversize_threshold": 693, "background_thread": 693, "metadata_thp": 693, "dirty_decay_m": 693, "9000000000": 693, "muzzy_decay_m": 693, "kmp_affin": 693, "kmp_blocktim": 693, "dnnl_primitive_cache_capac": 693, "governor": 693, "scaling_governor": 693, "powersav": 693, "tee": 693, "pytorch_jit_script": [694, 697], "pytorch_channels_last": [694, 697], "run_bench": 694, "patch": [694, 707], "patch_path": 694, "your_patch_path": 694, "sweep": 694, "sweep_object": 694, "bench_config": 694, "bench_featur": 694, "sai": 695, "run_glu": [695, 696, 718, 721, 722], "requisit": 695, "task_nam": [695, 696, 718, 721, 722], "do_ev": [695, 696, 711, 718, 721, 722], "itself": [695, 726], "run_glue_optim": 695, "static_ipex": 695, "auto_qu": 696, "v4": [696, 718, 721, 722, 741], "albert": [696, 741], "sst2": 696, "alexnet": [696, 741], "pytorch_amp": 697, "optimize_for_infer": 697, "pytorch_jit_trac": 697, "pytorch_jit_script_ofi": 697, "pytorch_jit_trace_ofi": 697, "torchdynamo": 697, "pytorch_torchdynamo_jit_script": 697, "pytorch_torchdynamo_jit_trac": 697, "pytorch_torchdynamo_jit_script_ofi": 697, "pytorch_torchdynamo_jit_trace_ofi": 697, "pytorch_inc_bf16": 697, "pytorch_inc_static_quant_fx": 697, "pytorch_inc_static_quant_ipex": 697, "pytorch_inc_static_quant_ipex_xpu": 697, "pytorch_inc_dynamic_qu": 697, "pytorch_ipex_fp32": 697, "pytorch_ipex_bf16": 697, "pytorch_ipex_int8_static_qu": 697, "pytorch_ipex_int8_dynamic_qu": 697, "blade": 697, "disc": 697, "pytorch_aliblad": 697, "pytorch_lightning_bf16_cpu": 697, "tensorflow_amp": 697, "keras_amp": 697, "tensorflow_inc": 697, "keras_inc": 697, "onnx_inc_static_quant_qlinear": 697, "onnx_inc_static_quant_qdq": 697, "onnx_inc_dynamic_qu": 697, "pytorch_inc_huggingface_optimum_stat": 697, "pytorch_inc_huggingface_optimum_dynam": 697, "intel_extension_for_transform": 697, "bigdl": [697, 698], "nano": [697, 698], "nano_": 697, "inc_auto": 697, "delight": 698, "announc": 698, "v": [698, 707, 726, 738, 740], "500": [698, 716], "jupyt": [698, 700, 701, 704], "isa": 698, "adjust": [698, 729, 735], "delta": 698, "acc_delta": 698, "int8_acc": 698, "fp32_acc": 698, "ext": [700, 702, 704, 705, 706], "lab": [700, 701, 702, 704, 705], "nodej": [700, 704], "jlpm": [700, 704], "yarn": [700, 704], "npm": [700, 701, 704], "lieu": [700, 704], "labextens": [700, 701, 704], "typescript": [700, 704], "watch": [700, 704, 713], "immedi": [700, 704, 726], "refresh": [700, 704], "browser": [700, 704, 709, 713], "wait": [700, 704, 707, 717], "rebuilt": [700, 704], "easier": [700, 704, 707, 709, 727], "symlink": [700, 704], "down": 701, "finish": [701, 717], "blank": 701, "cell": 701, "gain": [701, 725, 727], "mkl": 701, "jemalloc": 701, "pip3": 701, "pyproject": [702, 705], "toml": [702, 705], "twine": [702, 705], "whl": [702, 705], "dist": [702, 705], "sdist": [702, 705], "bdist_wheel": [702, 705], "frontend": [702, 705, 715, 722], "cut": [702, 705], "admin_github_token": [702, 705], "pypi_token": [702, 705], "npm_token": [702, 705], "secret": [702, 705], "panel": [702, 705, 707], "draft": [702, 705], "changelog": [702, 705, 706], "pkg": [702, 705], "bot": [702, 705], "pick": [702, 705, 708], "feedstock": [702, 705], "hatch": 705, "notabl": 706, "daili": 707, "advantag": [707, 726, 728, 738], "remot": 707, "server": [707, 709, 712, 715, 720, 721, 722], "re": [707, 713, 732], "market": 707, "uninstal": 707, "fill": [707, 734, 737, 738], "upper": 707, "sidebar": 707, "hover": 707, "track": [707, 734], "argpars": 707, "pop": [707, 717], "diff": 707, "manifest": 708, "palett": 708, "registercommand": 708, "amodio": 708, "tsl": 708, "matcher": 708, "dbaeumer": 708, "eslint": [708, 713], "press": 708, "f5": 708, "ctrl": 708, "hello": 708, "world": 708, "breakpoint": 708, "consol": [708, 713], "relaunch": 708, "toolbar": 708, "node_modul": 708, "viewlet": 708, "dropdown": 708, "runner": [708, 713], "startup": 708, "bundl": 708, "neural_insight": [709, 711, 712], "tl": 709, "ui": 709, "12": [709, 741], "5000": 709, "338174d13706855fc6924cec7b3a8ae8": 709, "listen": 709, "firewal": 709, "8080": 709, "cert": 709, "path_to_cert": 709, "crt": 709, "path_to_private_kei": 709, "encrypt": 709, "expos": 709, "forfeit": 709, "client": [709, 715, 722], "extern": 709, "threat": 709, "diagnost": 709, "skill": 709, "feel": [709, 713], "layoutlmv3": [710, 741], "seqev": 710, "sentencepiec": 710, "timm": 710, "fvcore": 710, "pillow": 710, "einop": 710, "textdist": 710, "setuptool": 710, "cli": 710, "hypjudi": 710, "finetun": [710, 726, 732], "funsd": [710, 741], "calib_dataset": 710, "incdataset": 710, "eval_dataset": 710, "poor": [710, 736], "9049": 710, "2989": 710, "66": [710, 741], "9631": 710, "glob": 710, "panda": 710, "pd": 710, "set_opt": 710, "max_row": 710, "max_column": 710, "getmtim": 710, "activations_t": 710, "weights_tabl": [710, 711], "read_csv": 710, "nweight": 710, "descend": 710, "sorted_data": 710, "sort_valu": 710, "ascend": 710, "evid": 710, "tip": 710, "8981": 710, "7502": 710, "run_clm": 711, "wikitext": [711, 741], "dataset_config_nam": 711, "do_train": 711, "inspect_sav": 711, "inspect_result": 711, "quan": 711, "model_summari": 711, "incept": [712, 741], "v3": [712, 741], "inception_v3": [712, 736], "inceptionv3_fp32_pretrained_model": [712, 736], "prepare_dataset": 712, "sh": [712, 736], "raw_dir": 712, "img_raw": 712, "delet": [712, 726], "run_tun": 712, "nc_inception_v3": 712, "highest": [712, 718, 738], "satisfactori": 712, "webpag": 712, "spike": 712, "bottom": 712, "chart": [712, 729, 734, 736], "concentr": 712, "But": 712, "bigger": 712, "bootstrap": 713, "localhost": [713, 715, 720, 721], "3000": 713, "lint": 713, "interact": [713, 734], "correctli": 713, "hash": [713, 716], "readi": [713, 726], "aren": 713, "transit": 713, "webpack": 713, "babel": 713, "tweak": 713, "ever": 713, "curat": 713, "suitabl": 713, "middl": [713, 735], "shouldn": 713, "understand": [713, 729, 736, 739], "wouldn": 713, "couldn": 713, "troubleshoot": 713, "effortlessli": 714, "grpc": [714, 715, 719, 720, 721, 723], "queue": 714, "seamlessli": [714, 726, 738], "mpi": [714, 715, 738], "neural_solut": [714, 715, 720, 721, 722], "task_monitor_port": [715, 720, 721, 722], "22222": [715, 720, 721, 722], "result_monitor_port": [715, 720, 721, 722], "33333": [715, 720, 721, 722], "restful_api_port": [715, 720, 721, 722], "hostfil": [715, 717, 720, 721, 722], "grpc_api_port": [715, 720, 721, 722], "api_typ": [715, 720, 721, 722], "conda_env": [715, 720, 721, 722], "upload_path": [715, 720, 721, 722], "8000": [715, 720, 721, 722], "3333": [715, 720, 721, 722], "2222": [715, 720, 721, 722], "ns_workspac": [715, 720, 721, 722], "hf_model": [715, 719, 721, 722], "curl": [715, 716, 720, 721], "task_id": [715, 720, 721, 722], "usernam": 715, "db": [715, 717], "serve_log": [715, 720, 721, 722], "frontend_grpc": 715, "task_log": 715, "task_bdf0bd1b2cc14bc19bce12d4f9b333c7": 715, "task_workspac": 715, "bdf0bd1b2cc14bc19bce12d4f9b333c7": 715, "aliv": 715, "commonli": [715, 726], "hostnam": 715, "breakdown": 715, "ip": 715, "hous": 715, "host1": [715, 720, 721], "host2": [715, 720, 721], "query_id": 715, "oaa": 716, "host_ip": 716, "task_request": [716, 720, 721, 722], "tuning_info": [716, 720], "optimization_result": [716, 720], "result_path": [716, 720, 721], "closur": 716, "404": [716, 726, 741], "health": 716, "healthi": 716, "400": 716, "alloc": 717, "incom": 717, "taskmonitor": 717, "cluster": [717, 720, 721, 738], "tasklaunch": 717, "resultmonitor": 717, "receiv": [717, 734], "p1": 717, "notif": 717, "p2": 717, "p3": 717, "mpirun": [717, 738], "perf": 717, "p4": 717, "four": [717, 736, 741], "classdiagram": 717, "taskdb": 717, "get_statu": 717, "update_statu": 717, "task_collect": 717, "append_task": 717, "get_all_pending_task": 717, "update_task_statu": 717, "task_db": 717, "wait_new_task": 717, "schedule_task": 717, "dispatch_task": 717, "launch_task": 717, "query_task_statu": 717, "node_list": 717, "reserve_resourc": 717, "get_node_statu": 717, "gcp": [717, 727], "script_url": [718, 720, 721, 722], "archiv": 718, "tf_example1": [719, 720, 721], "hf_models_grpc": [719, 722], "00173": 720, "01024": 720, "task_request_distribut": 720, "custom_models_optim": 720, "7602cd63d4c849e7a686a8165a77f69d": [720, 721], "151": 720, "8617": 720, "8213": [720, 741], "number_of_socket": [720, 721], "number_of_thread": [720, 721], "cdf419910f9b4d2a8320d0e420ac1d0a": 721, "optimized_result": 721, "3162": 721, "6488": [721, 741], "06": [722, 740, 741], "d3e10a49326449fb9d0d62f2bfc1cb43": 722, "fastapi": 723, "multi_object": 724, "benefit": 725, "instanti": 725, "neuron": 726, "art": 726, "grown": 726, "unpreced": 726, "increasingli": 726, "crucial": 726, "stand": [726, 738], "shrink": 726, "contextu": 726, "scene": 726, "haven": 726, "color": [726, 730], "lowest": [726, 738], "formula": [726, 735], "emsp": 726, "downstream": 726, "prone": 726, "co": 726, "discourag": 726, "penal": 726, "parameter": 726, "lightweight": 726, "perceptron": 726, "mlp": 726, "valuabl": [726, 736], "basi": 726, "billion": 726, "mpt": [726, 735, 741], "lm": 726, "lamini": [726, 735], "mention": [726, 732], "tend": 726, "exemplifi": 726, "complement": 726, "fortieth": 726, "miss": [726, 729], "pruner2": 726, "few": [726, 727, 735, 738], "lm_head": 726, "yourself": 726, "uncertain": 726, "auto_config": 726, "quit": 726, "straightforward": [726, 732, 735], "pruning_pattern": 726, "pruning_start": 726, "pruning_end": 726, "sparse_gpt": 726, "embed_out": 726, "card": 726, "hesit": 726, "causal": 726, "clm": 726, "sst": [726, 741], "63": [726, 741], "flan": 726, "t5": 726, "english": 726, "romanian": 726, "381": 726, "yolov5": 726, "2x1": [726, 741], "801": 726, "7895": 726, "signific": [726, 727, 730, 735], "reduct": [726, 730, 740], "namhoon": 726, "lee": 726, "thalaiyasingam": 726, "ajanthan": 726, "philip": 726, "torr": 726, "2019": 726, "zafrir": 726, "ofir": 726, "ariel": 726, "larei": 726, "boudoukh": 726, "mosh": 726, "wasserblat": 726, "2111": 726, "05754": 726, "2021": 726, "kwon": 726, "kim": 726, "mahonei": 726, "hassoun": 726, "keutzer": 726, "gholami": 726, "pp": 726, "24101": 726, "24116": 726, "frantar": [726, 732], "alistarh": 726, "apr": 727, "medium": 727, "aug": 727, "juli": 727, "onnxcommunitymeetup2023": 727, "chatbot": 727, "june": 727, "msft": 727, "netflix": 727, "mlperf": [727, 741], "5x": 727, "\u96c6\u6210\u82f1\u7279\u5c14": 727, "\u817e\u8baf\u4e91taco": 727, "kit\u4e3aai\u5e94\u7528\u5e26\u6765\u9ad8\u6548\u5f02\u6784\u52a0\u901f\u670d\u52a1": 727, "mar": 727, "heterogen": 727, "jan": 727, "busi": 727, "amx": 727, "journei": 727, "dec": 727, "mleffici": 727, "deepen": 727, "foundat": 727, "intellig": 727, "vmware": 727, "applianc": 727, "bitnami": 727, "nov": 727, "neurip": 727, "quala": 727, "minilm": [727, 741], "plug": 727, "twitter": 727, "linkedin": 727, "zone": 727, "land": 727, "pat": 727, "keynot": 727, "intelon": 727, "chines": 727, "purif": 727, "sacrif": 727, "jun": 727, "partner": 727, "feb": 727, "joint": 727, "bilibili": 727, "gestalt": 727, "ml": 727, "youtub": 727, "doubl": 727, "abound": 727, "lpot": [727, 733], "nextplatform": 727, "cern": 727, "gan": 727, "3dgan": 727, "iml": 727, "workshop": 727, "asplo": 727, "18": [727, 741], "highli": [727, 732], "intelcaff": 727, "aris": 728, "henc": 728, "onnxrt_qoper": 728, "quant_aware_train": 728, "weight_compress": [728, 740], "initial_spars": [728, 740], "prune_typ": [728, 740], "basic_magnitud": [728, 740], "update_frequ": 728, "prune_domain": 728, "tile_pattern_1x1": 728, "invent": 729, "cost": [729, 732], "On": [729, 741], "theoret": [729, 732], "zeropoint": 729, "255": [729, 735], "overflow": 729, "unseen": 729, "peopl": 729, "mimic": 729, "fact": 729, "ultim": 729, "pain": 729, "lossi": 729, "philosophi": 729, "neither": 729, "nor": 729, "val_load": 729, "avg": 729, "themselv": 729, "dmlexecutionprovid": 729, "meanwhil": 730, "substanti": 730, "pose": 730, "challeng": 730, "greatli": [730, 732], "even": [730, 732, 735], "constrain": 730, "grei": 730, "blue": 730, "rectangl": 730, "w8a8": [730, 732], "10005": 730, "rtn_arg": [730, 732], "ouput_dir": 730, "fp32_model_path": 730, "int8_model_path": 730, "ON": 731, "forc": 731, "postposttrainingquantconfig": 731, "bf16wrapper": 731, "retrac": 731, "preval": 732, "grow": 732, "demand": 732, "trade": 732, "bottleneck": 732, "roughli": 732, "speak": 732, "capac": [732, 734], "flop": 732, "famou": 732, "approx": 732, "bmm": 732, "100x": 732, "excel": 732, "stai": [732, 735], "quantif": [732, 735], "think": 732, "intuit": [732, 735], "uniformli": 732, "qlora": 732, "invers": 732, "restor": 732, "protect": 732, "inspir": 732, "c_": 732, "normalfloat": 732, "e2m1": 732, "bnb": 732, "805": 732, "awq_arg": 732, "gptq_arg": 732, "mitig": 732, "weightonlylinear": 732, "date": 732, "sym_full_rang": 732, "qweight_config_path": 732, "gptq_config_path": 732, "gptq_config": 732, "use_full_length": 732, "compressed_model": 732, "omit": 732, "rtn_g32asym": 732, "gptq_g32asym": 732, "gptq_g32asym_disable_last_matmul": 732, "gptq_g128asym": 732, "awq_g32asym": 732, "xiao": [732, 735], "guangxuan": [732, 735], "2211": [732, 735], "10438": [732, 735], "wei": [732, 735], "xiui": [732, 735], "suppress": [732, 735], "2209": [732, 735, 741], "13325": [732, 735], "lin": 732, "ji": 732, "00978": 732, "elia": 732, "dettmer": 732, "tim": 732, "2305": 732, "14314": 732, "site": 733, "sed": 733, "your_script": 733, "backbon": 734, "sigopt_experiment_id": 734, "nc": [734, 738], "suffici": 734, "ordinari": 734, "latenc": [734, 738], "8266": 734, "8372": 734, "2132": 734, "83": [734, 735, 741], "7495": 734, "8299": 734, "8294": 734, "85": [734, 735, 741], "0837": 734, "8291": 734, "4469": 734, "gigant": 735, "systemat": 735, "migrat": [735, 739], "difficulti": 735, "mathemat": 735, "allevi": 735, "coarsest": 735, "finer": [735, 738], "matric": 735, "similarli": 735, "finest": 735, "consumpt": 735, "why": [735, 736], "suppos": 735, "6839": 735, "4741": 735, "7451": 735, "9301": 735, "1742": 735, "6835": 735, "q_min": 735, "q_max": 735, "q_x": 735, "clamp_": 735, "round_": 735, "w_q": 735, "00296431384049356": 735, "172": [735, 741], "192": 735, "w_dq": 735, "2220": 735, "1510": 735, "2420": 735, "2570": 735, "0500": 735, "1890": 735, "mseloss": 735, "1983354538679123": 735, "6848": 735, "4743": 735, "7440": 735, "9308": 735, "1749": 735, "385297635664756e": 735, "07": [735, 740, 741], "quantize_per_channel": 735, "x_tmp": 735, "detach": 735, "keepdim": 735, "dequantize_per_channel": 735, "0029": [735, 741], "0036": 735, "162": [735, 741], "48": [735, 741], "93": [735, 741], "207": [735, 741], "139": [735, 741], "6837": 735, "4734": 735, "1751": 735, "6821": 735, "637690492221736e": 735, "6376e": 735, "3852e": 735, "cdot": 735, "quantize_per_tensor_absmax": 735, "n_bit": 735, "div_": 735, "0806": 735, "7589": 735, "6038": 735, "3815": 735, "5040": 735, "7174": 735, "5444": 735, "5826": 735, "7772": 735, "5555": 735, "3740": 735, "3253": 735, "0698": 735, "1381": 735, "5972": [735, 741], "0737": 735, "8298": 735, "6883": 735, "2991": 735, "1601": 735, "6506": 735, "8246": 735, "3924": 735, "3845": 735, "8768": 735, "w_scale": 735, "x_q": 735, "x_scale": 735, "120": 735, "0059755356051027775": 735, "119": 735, "006533813662827015": 735, "y_q": 735, "17509": 735, "7608": 735, "4055": 735, "16599": 735, "21020": 735, "10016": 735, "9860": 735, "22444": 735, "y_dq": 735, "6836": 735, "2970": 735, "1583": 735, "6481": 735, "8207": 735, "3911": 735, "3850": 735, "8763": 735, "though": 735, "simplic": 735, "denot": 735, "fp1": 735, "fp2": 735, "subsect": [735, 740], "x1": [735, 738], "x2": [735, 738], "herebi": 735, "optdecoderlay": 735, "blockwis": 735, "waq": 735, "overhead": 735, "hardtanh": 735, "t5norm": 735, "llamanorm": 735, "groupnorm": 735, "lambada": 735, "openai": 735, "sweet": 735, "spot": 735, "560m": 735, "354": 735, "3542": 735, "4634": 735, "4936": 735, "518": 735, "5185": 735, "7b1": [735, 741], "5764": [735, 741], "5977": 735, "bloomz": [735, 741], "3947": 735, "3930": 735, "4828": 735, "4906": 735, "5018": 735, "4980": 735, "5593": [735, 741], "5552": 735, "379": 735, "3757": 735, "350m": 735, "4516": 735, "4533": 735, "5789": 735, "5742": 735, "6365": 735, "6404": 735, "6769": [735, 741], "6804": [735, 741], "6872": 735, "6814": 735, "7149": 735, "7128": 735, "66b": 735, "7398": 735, "7326": 735, "7361": [735, 741], "7357": 735, "7627": [735, 741], "7590": 735, "7759": [735, 741], "7840": 735, "65b": 735, "7908": 735, "7957": 735, "7392": [735, 741], "7335": 735, "7058": [735, 741], "6994": 735, "7677": [735, 741], "7615": [735, 741], "6831": [735, 741], "mbzuai": 735, "124m": 735, "3804": 735, "3887": 735, "774m": 735, "5048": 735, "5057": 735, "5b": 735, "5443": [735, 741], "5436": 735, "mosaicml": [735, 741], "655": [735, 741], "6499": 735, "stabilityai": 735, "stablelm": 735, "4172": 735, "4149": 735, "togethercomput": 735, "redpajama": 735, "incit": 735, "6542": 735, "6735": 735, "6718": 735, "6740": [735, 741], "6569": 735, "6621": 735, "7143": 735, "7221": 735, "6895": 735, "6953": [735, 741], "6866": [735, 741], "6297": 735, "6247": 735, "6437": [735, 741], "6392": 735, "7332": 735, "7632": 735, "asterisk": 735, "consider": 735, "arang": 735, "tolist": 735, "default_alpha": 735, "step_siz": 735, "shared_criterion": 735, "do_blockwis": 735, "jason": 735, "emerg": 735, "transact": 735, "yvinec": 735, "edouard": 735, "proceed": 735, "cvf": 735, "winter": 735, "instrument": 736, "writer": 736, "_pre_eval_hook": 736, "_post_eval_hook": 736, "submodul": 736, "whitelist": 736, "_recordingobserv": 736, "output_tensors_dict": 736, "current_it": 736, "get_tensor_valu": 736, "_observer_forward_hook": 736, "activation_post_process": 736, "_add_observer_": 736, "named_children": 736, "leaf": 736, "add_modul": 736, "register_forward_hook": 736, "dump_tim": 736, "summarywrit": 736, "_acc": 736, "tune_": 736, "add_graph": 736, "get_observer_dict": 736, "observer_dict": 736, "is_quant": 736, "add_histogram": 736, "shell": 736, "bind_al": 736, "logdir_spec": 736, "tune_0_acc0": 736, "tune_1": 736, "tune_1_acc0": 736, "baseline_acc_0": 736, "776": 736, "tune_1_acc_0": 736, "095": 736, "runs_v3": 736, "run_tuning_dump_tensor": 736, "inceptionv3": 736, "run_quant": 736, "topologi": 736, "nc_inceptionv3": 736, "inceptionv3_dump_tensor": 736, "eightbit": 736, "disappear": 736, "centercrop": 737, "randomcrop": 737, "cropres": 737, "decodeimag": 737, "jpeg": 737, "encodejp": 737, "alignimagechannel": 737, "116": 737, "103": [737, 741], "017": 737, "bilinearimagenet": [737, 740], "topilimag": 737, "padding_mod": 737, "border": 737, "pixel": 737, "edg": 737, "colorjitt": 737, "bright": 737, "satur": 737, "hue": 737, "jitter": 737, "tondarrai": 737, "o1": 738, "human": 738, "aggress": 738, "classic": 738, "flowchart": 738, "htmllabel": 738, "td": 738, "classdef": 738, "itemstyl": 738, "cce5ff": 738, "stroke": 738, "99ccff": 738, "s1": 738, "s2": 738, "s3": 738, "s4": 738, "s5": 738, "s6": 738, "s7": 738, "nbsp": [738, 741], "subgraphstyl": 738, "ffffff": 738, "attempt": 738, "post_training_auto_qu": 738, "increment": 738, "ii": 738, "spent": 738, "hawq_v2_loss": 738, "model_loss": 738, "black": 738, "compli": 738, "posterior": 738, "short": 738, "loglevel": 738, "endlessli": 738, "perspect": 738, "smbo": 738, "appl": 738, "surrog": 738, "densiti": 738, "parzen": 738, "greatest": 738, "hour": 738, "dai": 738, "next_tune_cfg": 738, "overridden": 738, "replic": 738, "replica": 738, "fed": 738, "synchron": 738, "number_of_process": 738, "run_cmd": 738, "abctunestrategi": 738, "familiar": 739, "notebook": 739, "introduct": 739, "organ": 740, "logic": 740, "mobilenet_v1": 740, "40": [740, 741], "beta_1": 740, "beta_2": 740, "epsilon": 740, "sparsecategoricalcrossentropi": 740, "sum_over_batch_s": 740, "from_logit": 740, "1x": 741, "platinum": 741, "8480": 741, "8ghz": 741, "56": 741, "ht": 741, "turbo": 741, "256gb": 741, "16x16gb": 741, "ddr5": 741, "4800": 741, "mt": 741, "bio": 741, "3a14": 741, "tel2p1": 741, "microcod": 741, "0x2b0001b0": 741, "gcc": 741, "20210514": 741, "red": 741, "hat": 741, "visit": 741, "1s4c14ins1bsthroughput": 741, "sec": 741, "1720": 741, "582": 741, "95x": 741, "1517": 741, "570": 741, "65": 741, "66x": 741, "resnet101": 741, "41": 741, "1058": 741, "382": 741, "77x": 741, "69": 741, "2080": 741, "951": 741, "19x": 741, "1587": 741, "863": 741, "37": 741, "84x": 741, "1052": 741, "434": 741, "42x": 741, "707": 741, "234": 741, "02x": 741, "320": 741, "179": 741, "79x": 741, "4312": 741, "1512": 741, "85x": 741, "2287": 741, "1406": 741, "63x": 741, "1367": 741, "59x": 741, "vgg19": 741, "1244": 741, "176": 741, "04x": 741, "resnetv2": 741, "780": 741, "34x": 741, "494": 741, "329": 741, "50x": 741, "152": 741, "349": 741, "235": 741, "48x": 741, "densenet": 741, "161": 741, "29": 741, "282": 741, "223": 741, "26x": 741, "1284": 741, "756": 741, "70x": 741, "1280": 741, "530": 741, "cnn": 741, "39": 741, "26": 741, "178": 741, "13x": 741, "yolov3": 741, "249": 741, "64x": 741, "28x": 741, "36": 741, "05x": 741, "86": 741, "390": 741, "212": 741, "83x": 741, "vit": 741, "81": 741, "230": 741, "142": 741, "62x": 741, "1989": 741, "31x": 741, "1165": 741, "303": 741, "953": 741, "302": 741, "15x": 741, "resnest50": 741, "365": 741, "21x": 741, "resnext101_32x8d": 741, "548": 741, "104": 741, "27x": 741, "efficientnet_b0": 741, "636": 741, "62": 741, "566": 741, "12x": 741, "efficientnet_b3": 741, "471": 741, "358": 741, "32x": 741, "peleenet": 741, "790": 741, "504": 741, "57x": 741, "yolo": 741, "137": 741, "88x": 741, "175": 741, "23x": 741, "camembert": 741, "393": 741, "174": 741, "783": 741, "344": 741, "684": 741, "99x": 741, "312": 741, "155": 741, "60": 741, "01x": 741, "funnel": 741, "281": 741, "395": 741, "173": 741, "373": 741, "405": 741, "30x": 741, "stsb": 741, "396": 741, "136": 741, "377": 741, "17x": 741, "391": 741, "25x": 741, "135": 741, "61x": 741, "117": 741, "93x": 741, "lvwerra": 741, "pegasu": 741, "samsum": 741, "1981": 741, "598": 741, "1095": 741, "298": 741, "67x": 741, "549": 741, "29x": 741, "375": 741, "hellaswag": 741, "winogrand": 741, "piqa": 741, "word_perplex": 741, "4954": 741, "6409": 741, "7541": 741, "6434": 741, "8816": 741, "gptqw4g128asym": 741, "679": 741, "4895": 741, "6433": 741, "7476": 741, "6399": 741, "9945": 741, "0999": 741, "gptqw4g32asym": 741, "6829": 741, "4923": 741, "6401": 741, "7486": 741, "6410": 741, "0141": 741, "gptqw4g128sym": 741, "685": 741, "4907": 741, "6361": 741, "7443": 741, "6390": 741, "1498": 741, "gptqw4g32sym": 741, "6911": 741, "4899": 741, "6448": 741, "7497": 741, "6439": 741, "0008": 741, "0927": 741, "5049": 741, "6543": 741, "7628": 741, "6497": 741, "2862": 741, "4984": 741, "6535": 741, "7568": 741, "6473": 741, "4193": 741, "6885": 741, "4973": 741, "753": 741, "6455": 741, "9935": 741, "4607": 741, "decapoda": 741, "5642": 741, "6709": 741, "7835": 741, "6887": 741, "4202": 741, "7244": 741, "5603": 741, "6614": 741, "6824": 741, "9909": 741, "5881": 741, "5911": 741, "7009": 741, "7878": 741, "7106": 741, "7518": 741, "5843": 741, "6961": 741, "7911": 741, "4319": 741, "7572": 741, "5898": 741, "7056": 741, "7894": 741, "7105": 741, "9998": 741, "3429": 741, "7596": 741, "5841": 741, "6977": 741, "7905": 741, "7080": 741, "4916": 741, "6266": 741, "7277": 741, "8096": 741, "7350": 741, "2384": 741, "778": 741, "624": 741, "7269": 741, "8047": 741, "7334": 741, "9979": 741, "4237": 741, "7706": 741, "6239": 741, "7285": 741, "8058": 741, "7322": 741, "4697": 741, "7836": 741, "6195": 741, "7337": 741, "9983": 741, "5604": 741, "5732": 741, "648": 741, "7715": 741, "6746": 741, "7107": 741, "6982": 741, "5637": 741, "6527": 741, "7704": 741, "6713": 741, "9950": 741, "9702": 741, "5682": 741, "6575": 741, "7758": 741, "6742": 741, "9994": 741, "9317": 741, "567": 741, "6902": 741, "7353": 741, "6622": 741, "7829": 741, "6862": 741, "9635": 741, "7246": 741, "5617": 741, "6756": 741, "7797": 741, "6854": 741, "9931": 741, "2799": 741, "7312": 741, "6059": 741, "7103": 741, "7077": 741, "2213": 741, "7273": 741, "6018": 741, "7088": 741, "7742": 741, "7030": 741, "9934": 741, "2538": 741, "083": 741, "7283": 741, "6053": 741, "7024": 741, "7764": 741, "7031": 741, "1889": 741, "374": 741, "727": 741, "5997": 741, "7018": 741, "9916": 741, "2504": 741, "497": 741, "7122": 741, "8984": 741, "5933": 741, "689": 741, "7851": 741, "7075": 741, "1556": 741, "448": 741, "7675": 741, "5934": 741, "7856": 741, "7111": 741, "9984": 741, "1514": 741, "927": 741, "7566": 741, "5899": 741, "7032": 741, "9953": 741, "1374": 741, "728": 741, "4628": 741, "6456": 741, "6029": 741, "6438": 741, "5799": 741, "4542": 741, "6004": 741, "9957": 741, "0626": 741, "4789": 741, "6134": 741, "7432": 741, "5525": 741, "4731": 741, "6504": 741, "7617": 741, "6094": 741, "7828": 741, "5098": 741, "7622": 741, "6505": 741, "3242": 741, "6878": 741, "5058": 741, "6393": 741, "7633": 741, "6491": 741, "9978": 741, "5514": 741, "6864": 741, "5084": 741, "6519": 741, "6509": 741, "0006": 741, "4728": 741, "6876": 741, "5045": 741, "6474": 741, "9952": 741, "6379": 741, "5282": 741, "614": 741, "7448": 741, "6312": 741, "6377": 741, "5228": 741, "5991": 741, "6261": 741, "4096": 741, "6224": 741, "4271": 741, "577": 741, "722": 741, "5871": 741, "9359": 741, "6123": 741, "4227": 741, "5738": 741, "7203": 741, "5823": 741, "9917": 741, "3377": 741, "615": 741, "4259": 741, "5714": 741, "7247": 741, "9951": 741, "2083": 741, "6154": 741, "4208": 741, "5777": 741, "7198": 741, "5834": 741, "9937": 741, "3121": 741, "7233": 741, "5359": 741, "7753": 741, "195": 741, "7186": 741, "5328": 741, "7699": 741, "6687": 741, "9922": 741, "3463": 741, "7268": 741, "533": 741, "659": 741, "6726": 741, "2897": 741, "5718": 741, "6859": 741, "7927": 741, "6890": 741, "9324": 741, "7006": 741, "5655": 741, "6803": 741, "7965": 741, "6857": 741, "1515": 741, "5752": 741, "6748": 741, "7845": 741, "6724": 741, "5951": 741, "6472": 741, "5716": 741, "6685": 741, "784": 741, "6678": 741, "8539": 741, "6918": 741, "5819": 741, "678": 741, "6861": 741, "8863": 741, "5765": 741, "6827": 741, "7873": 741, "6832": 741, "9958": 741, "1451": 741, "storywrit": 741, "693": 741, "5477": 741, "663": 741, "6719": 741, "9125": 741, "6661": 741, "7813": 741, "6693": 741, "1137": 741, "rw": 741, "6604": 741, "5419": 741, "6598": 741, "6594": 741, "7616": 741, "6484": 741, "5369": 741, "7807": 741, "6559": 741, "9947": 741, "9411": 741, "6571": 741, "5398": 741, "6582": 741, "6579": 741, "8809": 741, "652": 741, "535": 741, "7682": 741, "6532": 741, "9906": 741, "0048": 741, "5177": 741, "6669": 741, "7824": 741, "5053": 741, "6301": 741, "5142": 741, "6654": 741, "6483": 741, "9933": 741, "8146": 741, "517": 741, "9941": 741, "1666": 741, "734": 741, "1658": 741, "1495": 741, "733": 741, "1661": 741, "732": 741, "1713": 741, "767": 741, "1747": 741, "770": 741, "7519": 741, "4430": 741, "4413": 741, "72x": 741, "7190": 741, "4019": 741, "613": 741, "170": 741, "611": 741, "186": 741, "619": 741, "184": 741, "36x": 741, "623": 741, "5711": 741, "2584": 741, "6136": 741, "2630": 741, "33x": 741, "shufflenet": 741, "6820": 741, "3686": 741, "googlenet": 741, "1971": 741, "1120": 741, "76x": 741, "1838": 741, "1142": 741, "squeezenet": 741, "10163": 741, "5771": 741, "10339": 741, "6002": 741, "caffenet": 741, "2805": 741, "1077": 741, "60x": 741, "4351": 741, "822": 741, "2169": 741, "893": 741, "43x": 741, "2232": 741, "841": 741, "65x": 741, "zfnet": 741, "921": 741, "525": 741, "75x": 741, "925": 741, "534": 741, "73x": 741, "1862": 741, "1161": 741, "1956": 741, "1262": 741, "55x": 741, "efficientnet": 741, "2793": 741, "1383": 741, "beit": 741, "206": 741, "91x": 741, "duc": 741, "74x": 741, "ultra": 741, "8780": 741, "1920": 741, "emot": 741, "ferplu": 741, "6360": 741, "3067": 741, "07x": 741, "arcfac": 741, "449": 741, "511": 741, "222": 741, "18x": 741, "integerop": 741, "635": 741, "1324": 741, "244": 741, "47x": 741, "440": 741, "214": 741, "06x": 741, "715": 741, "201": 741, "03x": 741, "714": 741, "213": 741, "339": 741, "58x": 741, "215": 741, "89x": 741, "712": 741, "217": 741, "l12": 741, "h384": 741, "1209": 741, "588": 741, "1268": 741, "16x": 741, "1253": 741, "399": 741, "14x": 741, "l6": 741, "1139": 741, "94x": 741, "2365": 741, "08x": 741, "718": 741, "35x": 741, "electra": 741, "discrimin": 741, "1951": 741, "71x": 741, "2198": 741, "1129": 741, "mini": 741, "5814": 741, "3388": 741, "6396": 741, "3445": 741, "86x": 741, "bart": 741, "126": 741, "spanbert": 741, "multilingu": 741, "82x": 741, "118": 741, "46x": 741, "layoutlmv2": 741, "perplex": 741, "2788": 741, "7002": 741, "4124": 741, "9921": 741, "3950": 741, "9892": 741, "9163": 741, "7240": 741, "9902": 741, "0438": 741, "7634": 741, "1186": 741, "9944": 741, "1276": 741, "7543": 741, "6181": 741, "rtnw4g32asym": 741, "6496": 741, "9967": 741, "7964": 741, "6612": 741, "rtnw4g32sym": 741, "7941": 741, "7243": 741, "9971": 741, "taskdataset": 741, "accuracyspars": 741, "ratiospars": 741, "commentsbalancedor": 741, "unbalanc": 741, "answeringsquad": 741, "87f1": 741, "momentumunbalanc": 741, "momentumbalanc": 741, "90f1": 741, "59f1": 741, "23f1": 741, "classificationmrpc": 741, "52f1": 741, "26f1": 741, "classificationsst": 741, "61accuraci": 741, "recognitionimagenet": 741, "95top1": 741, "v5s6": 741, "detectioncoco": 741, "ap0": 741, "6ap0": 741, "584": 741, "34f1": 741, "lassounbalanc": 741, "classificationmnli": 741, "mm": 741, "allbalanc": 741, "32accuraci": 741, "sensitivitybalanc": 741, "classificationqqp": 741, "classificationqnli": 741, "54accuraci": 741, "em": 741, "mobilenetv2": 741, "wideresnet40": 741, "9522": 741, "8178": 741, "0213": 741, "8235": 741, "027": 741, "5494": 741, "7153": 741, "5540": 741, "5523": 741, "vgg": 741, "bn": 741, "7022": 741, "7415": 741, "7025": 741, "6739": 741, "7399": 741, "6845": 741, "0106": 741, "blendcnn": 741, "7034": 741, "8382": 741, "bilstm": 741, "8314": 741, "9403": 741, "9048": 741, "0734": 741, "7323": 741, "8256": 741, "8084": 741, "8814": 741, "7442": 741, "8371": 741, "0119": 741, "0115": 741, "tinybert": 741, "8018": 741, "8044": 741, "8363": 741, "8411": 741, "8025": 741, "8074": 741, "0007": 741, "8626": 741, "9091": 741, "8782": 741, "8684": 741, "8259": 741, "0058": 741, "distilroberta": 741, "6057": 741, "6187": 741, "0130": 741, "c6i": 741, "2xlarg": 741, "c6a": 741, "c6g": 741, "a100cuda": 741, "executionprovid": 741}, "objects": {"": [[0, 0, 0, "-", "block_mask"], [365, 0, 0, "-", "neural_compressor"]], "neural_compressor": [[2, 0, 0, "-", "adaptor"], [175, 0, 0, "-", "algorithm"], [178, 0, 0, "-", "benchmark"], [181, 0, 0, "-", "common"], [197, 0, 0, "-", "compression"], [230, 0, 0, "-", "conf"], [232, 0, 0, "-", "config"], [233, 0, 0, "-", "contrib"], [258, 0, 0, "-", "data"], [312, 0, 0, "-", "experimental"], [372, 0, 0, "-", "metric"], [374, 0, 0, "-", "mix_precision"], [376, 0, 0, "-", "model"], [384, 0, 0, "-", "objective"], [396, 0, 0, "-", "onnxrt"], [406, 0, 0, "-", "profiling"], [428, 0, 0, "-", "quantization"], [436, 0, 0, "-", "strategy"], [448, 0, 0, "-", "template"], [457, 0, 0, "-", "tensorflow"], [616, 0, 0, "-", "torch"], [628, 0, 0, "-", "training"], [632, 0, 0, "-", "utils"], [641, 0, 0, "-", "version"]], "neural_compressor.adaptor": [[1, 0, 0, "-", "adaptor"], [3, 0, 0, "-", "keras"], [7, 0, 0, "-", "keras_utils"], [11, 0, 0, "-", "mxnet"], [12, 0, 0, "-", "mxnet_utils"], [14, 0, 0, "-", "onnxrt"], [17, 0, 0, "-", "ox_utils"], [45, 0, 0, "-", "pytorch"], [46, 0, 0, "-", "query"], [47, 0, 0, "-", "tensorflow"], [111, 0, 0, "-", "tf_utils"], [154, 0, 0, "-", "torch_utils"]], "neural_compressor.adaptor.adaptor": [[1, 1, 1, "", "Adaptor"], [1, 2, 1, "", "adaptor_registry"]], "neural_compressor.adaptor.keras": [[3, 1, 1, "", "KerasAdaptor"]], "neural_compressor.adaptor.keras_utils": [[4, 0, 0, "-", "conv2d"], [5, 0, 0, "-", "dense"], [6, 0, 0, "-", "depthwise_conv2d"], [8, 0, 0, "-", "pool2d"], [9, 0, 0, "-", "quantizer"], [10, 0, 0, "-", "separable_conv2d"]], "neural_compressor.adaptor.mxnet": [[11, 1, 1, "", "MxNetAdaptor"]], "neural_compressor.adaptor.mxnet_utils": [[13, 0, 0, "-", "util"]], "neural_compressor.adaptor.mxnet_utils.util": [[13, 1, 1, "", "CalibCollector"], [13, 1, 1, "", "CalibData"], [13, 1, 1, "", "CollectorBase"], [13, 1, 1, "", "DataIterLoader"], [13, 1, 1, "", "DataLoaderWrap"], [13, 1, 1, "", "NameCollector"], [13, 1, 1, "", "OpType"], [13, 1, 1, "", "TensorCollector"], [13, 2, 1, "", "amp_convert"], [13, 2, 1, "", "calib_model"], [13, 2, 1, "", "check_mx_version"], [13, 2, 1, "", "combine_capabilities"], [13, 2, 1, "", "create_data_example"], [13, 2, 1, "", "distribute_calib_tensors"], [13, 2, 1, "", "ensure_list"], [13, 2, 1, "", "fuse"], [13, 2, 1, "", "get_framework_name"], [13, 2, 1, "", "is_model_quantized"], [13, 2, 1, "", "isiterable"], [13, 2, 1, "", "make_module"], [13, 2, 1, "", "make_nc_model"], [13, 2, 1, "", "make_symbol_block"], [13, 2, 1, "", "ndarray_to_device"], [13, 2, 1, "", "parse_tune_config"], [13, 2, 1, "", "prepare_dataloader"], [13, 2, 1, "", "prepare_model"], [13, 2, 1, "", "prepare_model_data"], [13, 2, 1, "", "quantize_sym_model"], [13, 2, 1, "", "query_quantizable_nodes"], [13, 2, 1, "", "run_forward"]], "neural_compressor.adaptor.onnxrt": [[14, 1, 1, "", "ONNXRT_IntegerOpsAdaptor"], [14, 1, 1, "", "ONNXRT_QDQAdaptor"], [14, 1, 1, "", "ONNXRT_QLinearOpsAdaptor"], [14, 1, 1, "", "ONNXRT_WeightOnlyAdaptor"], [14, 1, 1, "", "ONNXRUNTIMEAdaptor"]], "neural_compressor.adaptor.ox_utils": [[15, 0, 0, "-", "calibration"], [16, 0, 0, "-", "calibrator"], [29, 0, 0, "-", "operators"], [41, 0, 0, "-", "quantizer"], [42, 0, 0, "-", "smooth_quant"], [43, 0, 0, "-", "util"], [44, 0, 0, "-", "weight_only"]], "neural_compressor.adaptor.ox_utils.calibration": [[15, 1, 1, "", "ONNXRTAugment"]], "neural_compressor.adaptor.ox_utils.calibrator": [[16, 1, 1, "", "CalibratorBase"], [16, 1, 1, "", "HistogramCollector"], [16, 1, 1, "", "KLCalibrator"], [16, 1, 1, "", "MinMaxCalibrator"], [16, 1, 1, "", "PercentileCalibrator"], [16, 2, 1, "", "calib_registry"], [16, 2, 1, "", "smooth_distribution"]], "neural_compressor.adaptor.ox_utils.operators": [[18, 0, 0, "-", "activation"], [19, 0, 0, "-", "argmax"], [20, 0, 0, "-", "attention"], [21, 0, 0, "-", "binary_op"], [22, 0, 0, "-", "concat"], [23, 0, 0, "-", "conv"], [24, 0, 0, "-", "direct_q8"], [25, 0, 0, "-", "embed_layernorm"], [26, 0, 0, "-", "gather"], [27, 0, 0, "-", "gavgpool"], [28, 0, 0, "-", "gemm"], [30, 0, 0, "-", "lstm"], [31, 0, 0, "-", "matmul"], [32, 0, 0, "-", "maxpool"], [33, 0, 0, "-", "norm"], [34, 0, 0, "-", "ops"], [35, 0, 0, "-", "pad"], [36, 0, 0, "-", "pooling"], [37, 0, 0, "-", "reduce"], [38, 0, 0, "-", "resize"], [39, 0, 0, "-", "split"], [40, 0, 0, "-", "unary_op"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[18, 1, 1, "", "ActivationOperator"], [18, 1, 1, "", "Float16ActivationOperator"], [18, 1, 1, "", "QActivationOperator"], [18, 1, 1, "", "RemovableActivationOperator"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[19, 1, 1, "", "ArgMaxOperator"], [19, 1, 1, "", "QArgMaxOperator"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[20, 1, 1, "", "AttentionOperator"], [20, 1, 1, "", "QAttentionOperator"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[21, 1, 1, "", "BinaryDirect8BitOperator"], [21, 1, 1, "", "BinaryOperator"], [21, 1, 1, "", "Float16BinaryOperator"], [21, 1, 1, "", "QBinaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[22, 1, 1, "", "ConcatOperator"], [22, 1, 1, "", "QConcatOperator"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[23, 1, 1, "", "ConvOperator"], [23, 1, 1, "", "QConvOperator"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[24, 1, 1, "", "Direct8BitOperator"], [24, 1, 1, "", "QDirectOperator"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[25, 1, 1, "", "EmbedLayerNormalizationOperator"], [25, 1, 1, "", "QEmbedLayerNormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[26, 1, 1, "", "GatherOperator"], [26, 1, 1, "", "QGatherOperator"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[27, 1, 1, "", "GlobalAveragePoolOperator"], [27, 1, 1, "", "QGlobalAveragePoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[28, 1, 1, "", "GemmOperator"], [28, 1, 1, "", "QGemmOperator"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[30, 1, 1, "", "LSTMOperator"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[31, 1, 1, "", "FusedMatMulOperator"], [31, 1, 1, "", "MatMulOperator"], [31, 1, 1, "", "QMatMulOperator"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[32, 1, 1, "", "MaxPoolOperator"], [32, 1, 1, "", "QMaxPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.norm": [[33, 1, 1, "", "BatchNormalizationOperator"], [33, 1, 1, "", "NormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[34, 1, 1, "", "Operator"], [34, 1, 1, "", "QOperator"], [34, 2, 1, "", "op_registry"], [34, 2, 1, "", "qop_registry"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[35, 1, 1, "", "PadOperator"], [35, 1, 1, "", "QPadOperator"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[36, 1, 1, "", "PoolOperator"], [36, 1, 1, "", "QPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.reduce": [[37, 1, 1, "", "ReduceMinMaxOperator"], [37, 1, 1, "", "ReduceOperator"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[38, 1, 1, "", "QResizeOperator"], [38, 1, 1, "", "ResizeOperator"]], "neural_compressor.adaptor.ox_utils.operators.split": [[39, 1, 1, "", "QSplitOperator"], [39, 1, 1, "", "SplitOperator"]], "neural_compressor.adaptor.ox_utils.operators.unary_op": [[40, 1, 1, "", "UnaryDirect8BitOperator"], [40, 1, 1, "", "UnaryOperator"]], "neural_compressor.adaptor.ox_utils.quantizer": [[41, 1, 1, "", "Quantizer"]], "neural_compressor.adaptor.ox_utils.smooth_quant": [[42, 1, 1, "", "ORTSmoothQuant"], [42, 2, 1, "", "get_quant_dequant_output"], [42, 2, 1, "", "make_sub_graph"], [42, 2, 1, "", "quant_dequant_data"]], "neural_compressor.adaptor.ox_utils.util": [[43, 1, 1, "", "QuantFormat"], [43, 1, 1, "", "QuantType"], [43, 1, 1, "", "QuantizationMode"], [43, 1, 1, "", "QuantizedInitializer"], [43, 1, 1, "", "QuantizedValue"], [43, 1, 1, "", "QuantizedValueType"], [43, 1, 1, "", "ValueInfo"], [43, 2, 1, "", "attribute_to_kwarg"], [43, 2, 1, "", "calculate_scale_zp"], [43, 2, 1, "", "cast_tensor"], [43, 2, 1, "", "collate_preds"], [43, 2, 1, "", "dequantize_data"], [43, 2, 1, "", "dequantize_data_with_scale_zero"], [43, 2, 1, "", "dtype_to_name"], [43, 2, 1, "", "find_by_name"], [43, 2, 1, "", "float_to_bfloat16"], [43, 2, 1, "", "float_to_float16"], [43, 2, 1, "", "get_node_original_name"], [43, 2, 1, "", "infer_shapes"], [43, 2, 1, "", "is_B_transposed"], [43, 2, 1, "", "make_dquant_node"], [43, 2, 1, "", "make_quant_node"], [43, 2, 1, "", "quantize_data"], [43, 2, 1, "", "quantize_data_per_channel"], [43, 2, 1, "", "quantize_data_with_scale_zero"], [43, 2, 1, "", "quantize_nparray"], [43, 2, 1, "", "remove_init_from_model_input"], [43, 2, 1, "", "simple_progress_bar"], [43, 2, 1, "", "split_shared_bias"], [43, 2, 1, "", "to_numpy"], [43, 2, 1, "", "trt_env_setup"]], "neural_compressor.adaptor.ox_utils.weight_only": [[44, 2, 1, "", "apply_awq_clip"], [44, 2, 1, "", "apply_awq_scale"], [44, 2, 1, "", "awq_quantize"], [44, 2, 1, "", "get_blob_size"], [44, 2, 1, "", "get_weight_scale"], [44, 2, 1, "", "gptq"], [44, 2, 1, "", "gptq_quantize"], [44, 2, 1, "", "make_matmul_weight_only_node"], [44, 2, 1, "", "pad_tensor"], [44, 2, 1, "", "prepare_inputs"], [44, 2, 1, "", "qdq_tensor"], [44, 2, 1, "", "quant_tensor"], [44, 2, 1, "", "rtn_quantize"]], "neural_compressor.adaptor.pytorch": [[45, 1, 1, "", "PyTorchAdaptor"], [45, 1, 1, "", "PyTorchWeightOnlyAdaptor"], [45, 1, 1, "", "PyTorch_FXAdaptor"], [45, 1, 1, "", "PyTorch_IPEXAdaptor"], [45, 1, 1, "", "TemplateAdaptor"], [45, 2, 1, "", "get_ops_recursively"]], "neural_compressor.adaptor.query": [[46, 1, 1, "", "QueryBackendCapability"]], "neural_compressor.adaptor.tensorflow": [[47, 1, 1, "", "TensorFlowAdaptor"], [47, 1, 1, "", "TensorflowQuery"], [47, 1, 1, "", "Tensorflow_ITEXAdaptor"]], "neural_compressor.adaptor.tf_utils": [[48, 0, 0, "-", "graph_converter"], [49, 0, 0, "-", "graph_converter_without_calib"], [87, 0, 0, "-", "graph_rewriter"], [110, 0, 0, "-", "graph_util"], [112, 0, 0, "-", "quantize_graph"], [139, 0, 0, "-", "quantize_graph_common"], [140, 0, 0, "-", "smooth_quant_calibration"], [141, 0, 0, "-", "smooth_quant_scaler"], [142, 0, 0, "-", "tf2onnx_converter"], [145, 0, 0, "-", "transform_graph"], [148, 0, 0, "-", "util"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[48, 1, 1, "", "GraphConverter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[49, 1, 1, "", "GraphConverterWithoutCalib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[52, 0, 0, "-", "bf16"], [76, 0, 0, "-", "generic"], [86, 0, 0, "-", "graph_base"], [95, 0, 0, "-", "int8"], [101, 0, 0, "-", "onnx"], [106, 0, 0, "-", "qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[50, 0, 0, "-", "bf16_convert"], [51, 0, 0, "-", "dequantize_cast_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[50, 1, 1, "", "BF16Convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer": [[51, 1, 1, "", "DequantizeCastOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[53, 0, 0, "-", "convert_add_to_biasadd"], [54, 0, 0, "-", "convert_layout"], [55, 0, 0, "-", "convert_leakyrelu"], [56, 0, 0, "-", "convert_nan_to_random"], [57, 0, 0, "-", "convert_placeholder_to_const"], [58, 0, 0, "-", "dilated_contraction"], [59, 0, 0, "-", "dummy_biasadd"], [60, 0, 0, "-", "expanddims_optimizer"], [61, 0, 0, "-", "fetch_weight_from_reshape"], [62, 0, 0, "-", "fold_batch_norm"], [63, 0, 0, "-", "fold_constant"], [64, 0, 0, "-", "fuse_biasadd_add"], [65, 0, 0, "-", "fuse_column_wise_mul"], [66, 0, 0, "-", "fuse_conv_with_math"], [67, 0, 0, "-", "fuse_decomposed_bn"], [68, 0, 0, "-", "fuse_decomposed_in"], [69, 0, 0, "-", "fuse_gelu"], [70, 0, 0, "-", "fuse_layer_norm"], [71, 0, 0, "-", "fuse_pad_with_conv"], [72, 0, 0, "-", "fuse_pad_with_fp32_conv"], [73, 0, 0, "-", "fuse_reshape_transpose"], [74, 0, 0, "-", "graph_cse_optimizer"], [75, 0, 0, "-", "grappler_pass"], [77, 0, 0, "-", "insert_print_node"], [78, 0, 0, "-", "move_squeeze_after_relu"], [79, 0, 0, "-", "pre_optimize"], [80, 0, 0, "-", "remove_training_nodes"], [81, 0, 0, "-", "rename_batch_norm"], [82, 0, 0, "-", "split_shared_input"], [83, 0, 0, "-", "strip_equivalent_nodes"], [84, 0, 0, "-", "strip_unused_nodes"], [85, 0, 0, "-", "switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[53, 1, 1, "", "ConvertAddToBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[54, 1, 1, "", "ConvertLayoutOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[55, 1, 1, "", "ConvertLeakyReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[56, 1, 1, "", "ConvertNanToRandom"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[57, 1, 1, "", "ConvertPlaceholderToConst"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[58, 1, 1, "", "DilatedContraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[59, 1, 1, "", "InjectDummyBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[60, 1, 1, "", "ExpandDimsOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[61, 1, 1, "", "FetchWeightFromReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[62, 1, 1, "", "FoldBatchNormNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[63, 1, 1, "", "GraphFoldConstantOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[64, 1, 1, "", "FuseBiasAddAndAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[65, 1, 1, "", "FuseColumnWiseMulOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[66, 1, 1, "", "FuseConvWithMathOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[67, 1, 1, "", "FuseDecomposedBNOptimizer"], [67, 2, 1, "", "bypass_reshape"], [67, 2, 1, "", "get_const_dim_count"], [67, 2, 1, "", "node_from_map"], [67, 2, 1, "", "node_name_from_input"], [67, 2, 1, "", "valid_reshape_inputs"], [67, 2, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[68, 1, 1, "", "FuseDecomposedINOptimizer"], [68, 2, 1, "", "bypass_reshape"], [68, 2, 1, "", "get_const_dim_count"], [68, 2, 1, "", "node_from_map"], [68, 2, 1, "", "node_name_from_input"], [68, 2, 1, "", "valid_reshape_inputs"], [68, 2, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[69, 1, 1, "", "FuseGeluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[70, 1, 1, "", "FuseLayerNormOptimizer"], [70, 2, 1, "", "node_from_map"], [70, 2, 1, "", "node_name_from_input"], [70, 2, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[71, 1, 1, "", "FusePadWithConv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[72, 1, 1, "", "FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[73, 1, 1, "", "FuseTransposeReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[74, 1, 1, "", "GraphCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[75, 1, 1, "", "GrapplerOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[77, 1, 1, "", "InsertPrintMinMaxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[78, 1, 1, "", "MoveSqueezeAfterReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[79, 1, 1, "", "PreOptimization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[80, 1, 1, "", "RemoveTrainingNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[81, 1, 1, "", "RenameBatchNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[82, 1, 1, "", "SplitSharedInputOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[83, 1, 1, "", "StripEquivalentNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[84, 1, 1, "", "StripUnusedNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[85, 1, 1, "", "SwitchOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[86, 1, 1, "", "GraphRewriterBase"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[88, 0, 0, "-", "freeze_fake_quant"], [89, 0, 0, "-", "freeze_value"], [90, 0, 0, "-", "freeze_value_without_calib"], [91, 0, 0, "-", "fuse_conv_redundant_dequantize"], [92, 0, 0, "-", "fuse_conv_requantize"], [93, 0, 0, "-", "fuse_matmul_redundant_dequantize"], [94, 0, 0, "-", "fuse_matmul_requantize"], [96, 0, 0, "-", "meta_op_optimizer"], [97, 0, 0, "-", "post_hostconst_converter"], [98, 0, 0, "-", "post_quantized_op_cse"], [99, 0, 0, "-", "rnn_convert"], [100, 0, 0, "-", "scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[88, 1, 1, "", "FreezeFakeQuantOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[89, 1, 1, "", "FreezeValueTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[90, 1, 1, "", "FreezeValueWithoutCalibTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[91, 1, 1, "", "FuseConvRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[92, 1, 1, "", "FuseConvRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[93, 1, 1, "", "FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[94, 1, 1, "", "FuseMatMulRequantizeDequantizeNewAPITransformer"], [94, 1, 1, "", "FuseMatMulRequantizeDequantizeTransformer"], [94, 1, 1, "", "FuseMatMulRequantizeNewAPITransformer"], [94, 1, 1, "", "FuseMatMulRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[96, 1, 1, "", "MetaInfoChangingMemOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[97, 1, 1, "", "PostHostConstConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[98, 1, 1, "", "PostCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[99, 1, 1, "", "QuantizedRNNConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[100, 1, 1, "", "ScaleProPagationTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[102, 0, 0, "-", "onnx_graph"], [103, 0, 0, "-", "onnx_node"], [104, 0, 0, "-", "onnx_schema"], [105, 0, 0, "-", "tf2onnx_utils"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[102, 1, 1, "", "OnnxGraph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[103, 1, 1, "", "OnnxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[104, 1, 1, "", "OnnxOpSchema"], [104, 2, 1, "", "get_max_supported_opset_version"], [104, 2, 1, "", "get_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[105, 1, 1, "", "SeqType"], [105, 2, 1, "", "add_port_to_name"], [105, 2, 1, "", "are_shapes_equal"], [105, 2, 1, "", "assert_error"], [105, 2, 1, "", "compute_const_folding_using_tf"], [105, 2, 1, "", "convert_tensorflow_tensor_to_onnx"], [105, 2, 1, "", "find_opset"], [105, 2, 1, "", "get_index_from_strided_slice_of_shape"], [105, 2, 1, "", "get_subgraphs_from_onnx"], [105, 2, 1, "", "get_tensorflow_node_attr"], [105, 2, 1, "", "get_tensorflow_node_shape_attr"], [105, 2, 1, "", "get_tensorflow_tensor_data"], [105, 2, 1, "", "get_tensorflow_tensor_shape"], [105, 2, 1, "", "infer_onnx_shape_dtype"], [105, 2, 1, "", "initialize_name_counter"], [105, 2, 1, "", "is_list_or_tuple"], [105, 2, 1, "", "is_onnx_domain"], [105, 2, 1, "", "make_onnx_inputs_outputs"], [105, 2, 1, "", "make_onnx_shape"], [105, 2, 1, "", "map_numpy_to_onnx_dtype"], [105, 2, 1, "", "map_onnx_to_numpy_type"], [105, 2, 1, "", "map_tensorflow_dtype"], [105, 2, 1, "", "read_tensorflow_node_attrs"], [105, 2, 1, "", "save_protobuf"], [105, 2, 1, "", "set_name"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[107, 0, 0, "-", "insert_qdq_pattern"], [108, 0, 0, "-", "merge_duplicated_qdq"], [109, 0, 0, "-", "share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[107, 1, 1, "", "GenerateGraphWithQDQPattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[108, 1, 1, "", "MergeDuplicatedQDQOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[109, 1, 1, "", "ShareQDQForItexYPatternOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_util": [[110, 1, 1, "", "GraphAnalyzer"], [110, 1, 1, "", "GraphRewriterHelper"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[114, 0, 0, "-", "qat"], [130, 0, 0, "-", "qdq"], [132, 0, 0, "-", "quantize_graph_base"], [133, 0, 0, "-", "quantize_graph_bn"], [134, 0, 0, "-", "quantize_graph_concatv2"], [135, 0, 0, "-", "quantize_graph_conv"], [136, 0, 0, "-", "quantize_graph_for_intel_cpu"], [137, 0, 0, "-", "quantize_graph_matmul"], [138, 0, 0, "-", "quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[113, 0, 0, "-", "fake_quantize"], [115, 0, 0, "-", "quantize_config"], [116, 0, 0, "-", "quantize_helper"], [117, 0, 0, "-", "quantize_layers"], [122, 0, 0, "-", "quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[113, 1, 1, "", "FakeQuantize"], [113, 1, 1, "", "FakeQuantizeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[115, 1, 1, "", "QuantizeConfig"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[116, 2, 1, "", "init_quantize_config"], [116, 2, 1, "", "qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[118, 0, 0, "-", "optimize_layer"], [119, 0, 0, "-", "quantize_layer_add"], [120, 0, 0, "-", "quantize_layer_base"], [121, 0, 0, "-", "quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[118, 2, 1, "", "config_quantizable_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[119, 1, 1, "", "QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[120, 1, 1, "", "QuantizeLayerBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[121, 1, 1, "", "QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[122, 1, 1, "", "QuantizeWrapper"], [122, 1, 1, "", "QuantizeWrapperBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[123, 0, 0, "-", "fuse_qdq_bn"], [124, 0, 0, "-", "fuse_qdq_concatv2"], [125, 0, 0, "-", "fuse_qdq_conv"], [126, 0, 0, "-", "fuse_qdq_deconv"], [127, 0, 0, "-", "fuse_qdq_in"], [128, 0, 0, "-", "fuse_qdq_matmul"], [129, 0, 0, "-", "fuse_qdq_pooling"], [131, 0, 0, "-", "optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[123, 1, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[124, 1, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[125, 1, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[126, 1, 1, "", "FuseNodeStartWithDeconv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[127, 1, 1, "", "FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[128, 1, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[129, 1, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[131, 1, 1, "", "OptimizeQDQGraph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[132, 1, 1, "", "QuantizeGraphBase"], [132, 1, 1, "", "QuantizeNodeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[133, 1, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[134, 1, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[135, 1, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[136, 1, 1, "", "QuantizeGraphForIntel"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[137, 1, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[138, 1, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[139, 1, 1, "", "QuantizeGraphHelper"]], "neural_compressor.adaptor.tf_utils.smooth_quant_calibration": [[140, 1, 1, "", "SmoothQuantCalibration"], [140, 1, 1, "", "SmoothQuantCalibrationLLM"]], "neural_compressor.adaptor.tf_utils.smooth_quant_scaler": [[141, 1, 1, "", "SmoothQuantScaler"], [141, 1, 1, "", "SmoothQuantScalerLLM"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[142, 1, 1, "", "TensorflowQDQToOnnxQDQConverter"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[143, 0, 0, "-", "bias_correction"], [144, 0, 0, "-", "graph_transform_base"], [146, 0, 0, "-", "insert_logging"], [147, 0, 0, "-", "rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[143, 1, 1, "", "BiasCorrection"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[144, 1, 1, "", "GraphTransformBase"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[146, 1, 1, "", "InsertLogging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[147, 1, 1, "", "RerangeQuantizedConcat"]], "neural_compressor.adaptor.tf_utils.util": [[148, 2, 1, "", "apply_inlining"], [148, 2, 1, "", "collate_tf_preds"], [148, 2, 1, "", "construct_function_from_graph_def"], [148, 2, 1, "", "disable_random"], [148, 2, 1, "", "fix_ref_type_of_graph_def"], [148, 2, 1, "", "generate_feed_dict"], [148, 2, 1, "", "get_estimator_graph"], [148, 2, 1, "", "get_graph_def"], [148, 2, 1, "", "get_input_output_node_names"], [148, 2, 1, "", "get_model_input_shape"], [148, 2, 1, "", "get_tensor_by_name"], [148, 2, 1, "", "get_tensor_val_from_graph_node"], [148, 2, 1, "", "get_weight_from_input_tensor"], [148, 2, 1, "", "int8_node_name_reverse"], [148, 2, 1, "", "is_ckpt_format"], [148, 2, 1, "", "is_saved_model_format"], [148, 2, 1, "", "iterator_sess_run"], [148, 2, 1, "", "parse_saved_model"], [148, 2, 1, "", "read_graph"], [148, 2, 1, "", "reconstruct_saved_model"], [148, 2, 1, "", "strip_equivalent_nodes"], [148, 2, 1, "", "strip_unused_nodes"], [148, 2, 1, "", "tf_diagnosis_helper"], [148, 2, 1, "", "version1_eq_version2"], [148, 2, 1, "", "version1_gt_version2"], [148, 2, 1, "", "version1_gte_version2"], [148, 2, 1, "", "version1_lt_version2"], [148, 2, 1, "", "version1_lte_version2"], [148, 2, 1, "", "write_graph"]], "neural_compressor.adaptor.torch_utils": [[149, 0, 0, "-", "auto_round"], [150, 0, 0, "-", "awq"], [151, 0, 0, "-", "bf16_convert"], [152, 0, 0, "-", "gptq"], [153, 0, 0, "-", "hawq_metric"], [155, 0, 0, "-", "layer_wise_quant"], [160, 0, 0, "-", "mixed_precision"], [161, 0, 0, "-", "model_wrapper"], [162, 0, 0, "-", "pattern_detector"], [163, 0, 0, "-", "symbolic_trace"], [164, 0, 0, "-", "teq"], [165, 0, 0, "-", "util"], [169, 0, 0, "-", "waq"], [172, 0, 0, "-", "weight_only"]], "neural_compressor.adaptor.torch_utils.awq": [[150, 1, 1, "", "ActAwareWeightQuant"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[151, 1, 1, "", "BF16ModuleWrapper"], [151, 2, 1, "", "Convert"], [151, 2, 1, "", "bf16_symbolic_trace"]], "neural_compressor.adaptor.torch_utils.gptq": [[152, 1, 1, "", "GPTQ"], [152, 1, 1, "", "GPTQuantizer"], [152, 2, 1, "", "find_layers"], [152, 2, 1, "", "find_layers_name"], [152, 2, 1, "", "is_leaf"], [152, 2, 1, "", "log_quantizable_layers_per_transformer"], [152, 2, 1, "", "quantize"], [152, 2, 1, "", "trace_gptq_target_blocks"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[153, 1, 1, "", "HessianTrace"], [153, 1, 1, "", "Node_collector"], [153, 2, 1, "", "compare_weights"], [153, 2, 1, "", "hawq_top"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant": [[156, 0, 0, "-", "modified_pickle"], [157, 0, 0, "-", "quantize"], [158, 0, 0, "-", "torch_load"], [159, 0, 0, "-", "utils"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle": [[156, 3, 1, "", "PickleError"], [156, 3, 1, "", "PicklingError"], [156, 3, 1, "", "UnpicklingError"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize": [[157, 1, 1, "", "LayerWiseQuant"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load": [[158, 2, 1, "", "load"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils": [[159, 2, 1, "", "dowload_hf_model"], [159, 2, 1, "", "get_children"], [159, 2, 1, "", "get_module"], [159, 2, 1, "", "get_named_children"], [159, 2, 1, "", "get_super_module_by_name"], [159, 2, 1, "", "load_empty_model"], [159, 2, 1, "", "load_layer_wise_quantized_model"], [159, 2, 1, "", "load_tensor"], [159, 2, 1, "", "load_tensor_from_shard"], [159, 2, 1, "", "update_module"]], "neural_compressor.adaptor.torch_utils.mixed_precision": [[160, 2, 1, "", "ipex_mixed_precision"]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[161, 1, 1, "", "FakeAffineTensorQuantFunction"], [161, 1, 1, "", "MulLinear"], [161, 1, 1, "", "TEQLinearFakeQuant"]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[162, 1, 1, "", "TransformerBasedModelBlockPatternDetector"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[163, 2, 1, "", "symbolic_trace"], [163, 2, 1, "", "trace_and_fuse_sub_graph"]], "neural_compressor.adaptor.torch_utils.teq": [[164, 1, 1, "", "TEQuantizer"]], "neural_compressor.adaptor.torch_utils.util": [[165, 2, 1, "", "append_attr"], [165, 2, 1, "", "auto_copy"], [165, 2, 1, "", "calculate_quant_min_max"], [165, 2, 1, "", "calibration"], [165, 2, 1, "", "check_cfg_and_qconfig"], [165, 2, 1, "", "collate_torch_preds"], [165, 2, 1, "", "collect_weight_info"], [165, 2, 1, "", "fetch_module"], [165, 2, 1, "", "forward_wrapper"], [165, 2, 1, "", "generate_activation_observer"], [165, 2, 1, "", "get_absorb_layers"], [165, 2, 1, "", "get_block_prefix"], [165, 2, 1, "", "get_depth"], [165, 2, 1, "", "get_dict_at_depth"], [165, 2, 1, "", "get_element_under_depth"], [165, 2, 1, "", "get_embedding_contiguous"], [165, 2, 1, "", "get_example_input"], [165, 2, 1, "", "get_fallback_order"], [165, 2, 1, "", "get_hidden_states"], [165, 2, 1, "", "get_module_input_output"], [165, 2, 1, "", "get_mse_order_per_fp32"], [165, 2, 1, "", "get_mse_order_per_int8"], [165, 2, 1, "", "get_op_type_by_name"], [165, 2, 1, "", "get_quantizable_ops_from_cfgs"], [165, 2, 1, "", "get_torch_version"], [165, 2, 1, "", "input2tuple"], [165, 2, 1, "", "is_fused_module"], [165, 2, 1, "", "match_datatype_pattern"], [165, 2, 1, "", "move_input_device"], [165, 2, 1, "", "paser_cfgs"], [165, 2, 1, "", "set_module"], [165, 2, 1, "", "simple_inference"], [165, 2, 1, "", "update_sq_scale"]], "neural_compressor.adaptor.torch_utils.waq": [[166, 0, 0, "-", "auto_alpha"], [167, 0, 0, "-", "calibration"], [168, 0, 0, "-", "graph_trace"], [170, 0, 0, "-", "smooth_quant"], [171, 0, 0, "-", "utils"]], "neural_compressor.adaptor.torch_utils.waq.smooth_quant": [[170, 1, 1, "", "TorchSmoothQuant"]], "neural_compressor.adaptor.torch_utils.waq.utils": [[171, 2, 1, "", "get_module"], [171, 2, 1, "", "register_autotune"], [171, 2, 1, "", "reshape_in_channel_to_last"], [171, 2, 1, "", "reshape_scale_as_input"], [171, 2, 1, "", "reshape_scale_as_weight"], [171, 2, 1, "", "set_module"]], "neural_compressor.adaptor.torch_utils.weight_only": [[172, 2, 1, "", "autoround_quantize"], [172, 2, 1, "", "awq_quantize"], [172, 2, 1, "", "gptq_quantize"], [172, 2, 1, "", "qdq_weight_actor"], [172, 2, 1, "", "qdq_weight_asym"], [172, 2, 1, "", "qdq_weight_sym"], [172, 2, 1, "", "quant_weight"], [172, 2, 1, "", "quant_weight_w_scale"], [172, 2, 1, "", "quantize_4bit"], [172, 2, 1, "", "rtn_quantize"], [172, 2, 1, "", "search_clip"], [172, 2, 1, "", "teq_quantize"]], "neural_compressor.algorithm": [[173, 0, 0, "-", "algorithm"], [174, 0, 0, "-", "fast_bias_correction"], [176, 0, 0, "-", "smooth_quant"], [177, 0, 0, "-", "weight_correction"]], "neural_compressor.algorithm.algorithm": [[173, 1, 1, "", "ALGORITHMS"], [173, 1, 1, "", "Algorithm"], [173, 1, 1, "", "AlgorithmScheduler"], [173, 2, 1, "", "algorithm_registry"]], "neural_compressor.algorithm.fast_bias_correction": [[174, 1, 1, "", "FastBiasCorrection"]], "neural_compressor.algorithm.smooth_quant": [[176, 1, 1, "", "SmoothQuant"]], "neural_compressor.algorithm.weight_correction": [[177, 1, 1, "", "WeightCorrection"]], "neural_compressor.benchmark": [[178, 2, 1, "", "benchmark_with_raw_cmd"], [178, 2, 1, "", "call_one"], [178, 2, 1, "", "config_instance"], [178, 2, 1, "", "fit"], [178, 2, 1, "", "generate_prefix"], [178, 2, 1, "", "get_architecture"], [178, 2, 1, "", "get_bounded_threads"], [178, 2, 1, "", "get_core_ids"], [178, 2, 1, "", "get_physical_ids"], [178, 2, 1, "", "get_threads"], [178, 2, 1, "", "get_threads_per_core"], [178, 2, 1, "", "profile"], [178, 2, 1, "", "run_instance"], [178, 2, 1, "", "set_all_env_var"], [178, 2, 1, "", "set_env_var"], [178, 2, 1, "", "summary_benchmark"]], "neural_compressor.common": [[179, 0, 0, "-", "base_config"], [180, 0, 0, "-", "base_tuning"], [182, 0, 0, "-", "tuning_param"], [184, 0, 0, "-", "utils"]], "neural_compressor.common.base_config": [[179, 1, 1, "", "BaseConfig"], [179, 1, 1, "", "ComposableConfig"], [179, 2, 1, "", "register_config"], [179, 2, 1, "", "register_supported_configs_for_fwk"]], "neural_compressor.common.base_tuning": [[180, 1, 1, "", "Evaluator"], [180, 1, 1, "", "SequentialSampler"], [180, 1, 1, "", "TuningConfig"]], "neural_compressor.common.tuning_param": [[182, 1, 1, "", "ParamLevel"], [182, 1, 1, "", "TuningParam"]], "neural_compressor.common.utils": [[183, 0, 0, "-", "constants"], [185, 0, 0, "-", "logger"], [186, 0, 0, "-", "save_load"], [187, 0, 0, "-", "utility"]], "neural_compressor.common.utils.logger": [[185, 1, 1, "", "Logger"], [185, 1, 1, "", "TuningLogger"]], "neural_compressor.common.utils.save_load": [[186, 2, 1, "", "load_config_mapping"], [186, 2, 1, "", "save_config_mapping"]], "neural_compressor.common.utils.utility": [[187, 1, 1, "", "CpuInfo"], [187, 1, 1, "", "LazyImport"], [187, 2, 1, "", "dump_elapsed_time"], [187, 2, 1, "", "set_random_seed"], [187, 2, 1, "", "set_resume_from"], [187, 2, 1, "", "set_tensorboard"], [187, 2, 1, "", "set_workspace"], [187, 2, 1, "", "singleton"]], "neural_compressor.compression": [[188, 0, 0, "-", "callbacks"], [190, 0, 0, "-", "distillation"], [193, 0, 0, "-", "hpo"], [200, 0, 0, "-", "pruner"]], "neural_compressor.compression.callbacks": [[188, 1, 1, "", "BaseCallbacks"], [188, 1, 1, "", "DistillationCallbacks"], [188, 1, 1, "", "PruningCallbacks"], [188, 1, 1, "", "QuantizationAwareTrainingCallbacks"]], "neural_compressor.compression.callbacks.DistillationCallbacks": [[188, 4, 1, "", "_epoch_ran"], [188, 4, 1, "", "best_model"], [188, 4, 1, "", "best_score"], [188, 4, 1, "", "eval_frequency"]], "neural_compressor.compression.distillation": [[189, 0, 0, "-", "criterions"], [191, 0, 0, "-", "optimizers"], [192, 0, 0, "-", "utility"]], "neural_compressor.compression.distillation.criterions": [[189, 1, 1, "", "Criterions"], [189, 1, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [189, 1, 1, "", "KnowledgeDistillationFramework"], [189, 1, 1, "", "KnowledgeDistillationLoss"], [189, 1, 1, "", "PyTorchCriterions"], [189, 1, 1, "", "PyTorchCrossEntropyLoss"], [189, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [189, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [189, 1, 1, "", "PyTorchKnowledgeDistillationLoss"], [189, 1, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [189, 1, 1, "", "PyTorchSelfKnowledgeDistillationLoss"], [189, 1, 1, "", "PyTorchSelfKnowledgeDistillationLossWrapper"], [189, 1, 1, "", "SelfKnowledgeDistillationLoss"], [189, 1, 1, "", "TensorFlowCrossEntropyLoss"], [189, 1, 1, "", "TensorFlowSparseCategoricalCrossentropy"], [189, 1, 1, "", "TensorflowCriterions"], [189, 1, 1, "", "TensorflowKnowledgeDistillationLoss"], [189, 1, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [189, 1, 1, "", "TensorflowKnowledgeDistillationLossWrapper"], [189, 2, 1, "", "criterion_registry"]], "neural_compressor.compression.distillation.optimizers": [[191, 1, 1, "", "Optimizers"], [191, 1, 1, "", "PyTorchOptimizers"], [191, 1, 1, "", "PyTorchSGD"], [191, 1, 1, "", "TensorFlowAdam"], [191, 1, 1, "", "TensorFlowAdamW"], [191, 1, 1, "", "TensorFlowSGD"], [191, 1, 1, "", "TensorflowOptimizers"], [191, 2, 1, "", "optimizer_registry"]], "neural_compressor.compression.distillation.utility": [[192, 2, 1, "", "get_activation"], [192, 2, 1, "", "record_output"]], "neural_compressor.compression.hpo": [[194, 0, 0, "-", "sa_optimizer"], [195, 0, 0, "-", "search_algorithms"], [196, 0, 0, "-", "search_space"]], "neural_compressor.compression.hpo.search_algorithms": [[195, 1, 1, "", "BayesianOptimizationSearcher"], [195, 1, 1, "", "GridSearcher"], [195, 1, 1, "", "RandomSearcher"], [195, 1, 1, "", "Searcher"], [195, 1, 1, "", "XgbSearcher"], [195, 2, 1, "", "register_searcher"]], "neural_compressor.compression.hpo.search_space": [[196, 1, 1, "", "BaseSearchSpace"], [196, 1, 1, "", "ContinuousSearchSpace"], [196, 1, 1, "", "DiscreteSearchSpace"], [196, 1, 1, "", "SearchSpace"], [196, 2, 1, "", "register_searchspace"]], "neural_compressor.compression.pruner": [[198, 0, 0, "-", "criteria"], [199, 0, 0, "-", "dsnot"], [202, 0, 0, "-", "model_slim"], [206, 0, 0, "-", "patterns"], [200, 2, 1, "", "prepare_pruning"], [213, 0, 0, "-", "pruners"], [219, 0, 0, "-", "pruning"], [220, 0, 0, "-", "regs"], [200, 2, 1, "", "save"], [221, 0, 0, "-", "schedulers"], [222, 0, 0, "-", "tf_criteria"], [223, 0, 0, "-", "utils"], [224, 0, 0, "-", "wanda"]], "neural_compressor.compression.pruner.criteria": [[198, 1, 1, "", "BlockMaskCriterion"], [198, 1, 1, "", "GradientCriterion"], [198, 1, 1, "", "MagnitudeCriterion"], [198, 1, 1, "", "PruningCriterion"], [198, 1, 1, "", "RetrainFreeCriterion"], [198, 1, 1, "", "SnipCriterion"], [198, 1, 1, "", "SnipMomentumCriterion"], [198, 2, 1, "", "get_criterion"], [198, 2, 1, "", "register_criterion"]], "neural_compressor.compression.pruner.criteria.BlockMaskCriterion": [[198, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.GradientCriterion": [[198, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.MagnitudeCriterion": [[198, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.PruningCriterion": [[198, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion": [[198, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipCriterion": [[198, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion": [[198, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.dsnot": [[199, 2, 1, "", "DSnoT"], [199, 2, 1, "", "return_reorder_indice"]], "neural_compressor.compression.pruner.model_slim": [[201, 0, 0, "-", "auto_slim"], [203, 0, 0, "-", "pattern_analyzer"], [204, 0, 0, "-", "weight_slim"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[201, 2, 1, "", "generate_ffn2_pruning_config"], [201, 2, 1, "", "generate_mha_pruning_config"], [201, 2, 1, "", "model_slim"], [201, 2, 1, "", "model_slim_ffn2"], [201, 2, 1, "", "model_slim_mha"], [201, 2, 1, "", "parse_auto_slim_config"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[203, 1, 1, "", "ClassifierHeadSearcher"], [203, 1, 1, "", "ClassifierHeadSearcherTF"], [203, 1, 1, "", "JitBasicSearcher"], [203, 1, 1, "", "Linear2LinearSearcher"], [203, 1, 1, "", "RecipeSearcher"], [203, 1, 1, "", "SelfMHASearcher"], [203, 2, 1, "", "get_attributes"], [203, 2, 1, "", "get_common_module"], [203, 2, 1, "", "print_iterables"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher": [[203, 4, 1, "", "device"], [203, 4, 1, "", "flatten_static_graph"], [203, 4, 1, "", "model"], [203, 4, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF": [[203, 4, 1, "", "device"], [203, 4, 1, "", "flatten_static_graph"], [203, 4, 1, "", "model"], [203, 4, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher": [[203, 4, 1, "", "device"], [203, 4, 1, "", "flatten_static_graph"], [203, 4, 1, "", "model"], [203, 4, 1, "", "searching_results"], [203, 4, 1, "", "static_graph"], [203, 4, 1, "", "target_layers"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher": [[203, 4, 1, "", "current_pattern"], [203, 4, 1, "", "device"], [203, 4, 1, "", "flatten_static_graph"], [203, 4, 1, "", "model"], [203, 4, 1, "", "searching_results"], [203, 4, 1, "", "static_graph"], [203, 4, 1, "", "target_layers"], [203, 4, 1, "", "target_op_lut"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher": [[203, 4, 1, "", "model"], [203, 4, 1, "", "recipe"], [203, 4, 1, "", "searching_results"], [203, 4, 1, "", "targets"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher": [[203, 4, 1, "", "device"], [203, 4, 1, "", "flatten_static_graph"], [203, 4, 1, "", "model"], [203, 4, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[204, 1, 1, "", "LinearCompression"], [204, 1, 1, "", "LinearCompressionIterator"], [204, 1, 1, "", "PostCompressionUtils"]], "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression": [[204, 4, 1, "", "device"], [204, 4, 1, "", "layer_1"], [204, 4, 1, "", "layer_2"]], "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator": [[204, 4, 1, "", "linear_patterns"]], "neural_compressor.compression.pruner.patterns": [[205, 0, 0, "-", "base"], [206, 2, 1, "", "get_pattern"], [207, 0, 0, "-", "mha"], [208, 0, 0, "-", "ninm"], [209, 0, 0, "-", "nxm"]], "neural_compressor.compression.pruner.patterns.base": [[205, 1, 1, "", "BasePattern"], [205, 1, 1, "", "KerasBasePattern"], [205, 1, 1, "", "PytorchBasePattern"], [205, 2, 1, "", "register_pattern"]], "neural_compressor.compression.pruner.patterns.base.BasePattern": [[205, 4, 1, "", "config"], [205, 4, 1, "", "invalid_layers"], [205, 4, 1, "", "is_global"], [205, 4, 1, "", "keep_mask_layers"], [205, 4, 1, "", "max_sparsity_ratio_per_op"], [205, 4, 1, "", "min_sparsity_ratio_per_op"], [205, 4, 1, "", "modules"], [205, 4, 1, "", "pattern"], [205, 4, 1, "", "target_sparsity"]], "neural_compressor.compression.pruner.patterns.base.KerasBasePattern": [[205, 4, 1, "", "config"], [205, 4, 1, "", "invalid_layers"], [205, 4, 1, "", "is_global"], [205, 4, 1, "", "keep_mask_layers"], [205, 4, 1, "", "max_sparsity_ratio_per_op"], [205, 4, 1, "", "min_sparsity_ratio_per_op"], [205, 4, 1, "", "modules"], [205, 4, 1, "", "pattern"], [205, 4, 1, "", "target_sparsity"]], "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern": [[205, 4, 1, "", "config"], [205, 4, 1, "", "invalid_layers"], [205, 4, 1, "", "is_global"], [205, 4, 1, "", "keep_mask_layers"], [205, 4, 1, "", "max_sparsity_ratio_per_op"], [205, 4, 1, "", "min_sparsity_ratio_per_op"], [205, 4, 1, "", "modules"], [205, 4, 1, "", "pattern"], [205, 4, 1, "", "target_sparsity"]], "neural_compressor.compression.pruner.patterns.mha": [[207, 1, 1, "", "PatternMHA"]], "neural_compressor.compression.pruner.patterns.mha.PatternMHA": [[207, 4, 1, "", "M"], [207, 4, 1, "", "N"]], "neural_compressor.compression.pruner.patterns.ninm": [[208, 1, 1, "", "PytorchPatternNInM"]], "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM": [[208, 4, 1, "", "M"], [208, 4, 1, "", "N"]], "neural_compressor.compression.pruner.patterns.nxm": [[209, 1, 1, "", "KerasPatternNxM"], [209, 1, 1, "", "PytorchPatternNxM"]], "neural_compressor.compression.pruner.patterns.nxm.KerasPatternNxM": [[209, 4, 1, "", "block_size"]], "neural_compressor.compression.pruner.patterns.nxm.PytorchPatternNxM": [[209, 4, 1, "", "block_size"]], "neural_compressor.compression.pruner.pruners": [[210, 0, 0, "-", "base"], [211, 0, 0, "-", "basic"], [212, 0, 0, "-", "block_mask"], [213, 2, 1, "", "get_pruner"], [214, 0, 0, "-", "mha"], [213, 2, 1, "", "parse_valid_pruner_types"], [215, 0, 0, "-", "pattern_lock"], [216, 0, 0, "-", "progressive"], [217, 0, 0, "-", "retrain_free"], [218, 0, 0, "-", "sparse_gpt"]], "neural_compressor.compression.pruner.pruners.base": [[210, 1, 1, "", "BasePruner"], [210, 1, 1, "", "KerasBasePruner"], [210, 1, 1, "", "PytorchBasePruner"], [210, 2, 1, "", "register_pruner"]], "neural_compressor.compression.pruner.pruners.base.BasePruner": [[210, 4, 1, "", "config"], [210, 4, 1, "", "current_sparsity_ratio"], [210, 4, 1, "", "end_step"], [210, 4, 1, "", "global_step"], [210, 4, 1, "", "masks"], [210, 4, 1, "", "max_sparsity_ratio_per_op"], [210, 4, 1, "", "modules"], [210, 4, 1, "", "pattern"], [210, 4, 1, "", "pruning_frequency"], [210, 4, 1, "", "scheduler"], [210, 4, 1, "", "scores"], [210, 4, 1, "", "start_step"], [210, 4, 1, "", "target_sparsity_ratio"]], "neural_compressor.compression.pruner.pruners.base.KerasBasePruner": [[210, 4, 1, "", "config"], [210, 4, 1, "", "current_sparsity_ratio"], [210, 4, 1, "", "end_step"], [210, 4, 1, "", "global_step"], [210, 4, 1, "", "masks"], [210, 4, 1, "", "max_sparsity_ratio_per_op"], [210, 4, 1, "", "modules"], [210, 4, 1, "", "pattern"], [210, 4, 1, "", "pruning_frequency"], [210, 4, 1, "", "scheduler"], [210, 4, 1, "", "scores"], [210, 4, 1, "", "start_step"], [210, 4, 1, "", "target_sparsity_ratio"]], "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner": [[210, 4, 1, "", "config"], [210, 4, 1, "", "current_sparsity_ratio"], [210, 4, 1, "", "end_step"], [210, 4, 1, "", "global_step"], [210, 4, 1, "", "masks"], [210, 4, 1, "", "max_sparsity_ratio_per_op"], [210, 4, 1, "", "modules"], [210, 4, 1, "", "pattern"], [210, 4, 1, "", "pruning_frequency"], [210, 4, 1, "", "scheduler"], [210, 4, 1, "", "scores"], [210, 4, 1, "", "start_step"], [210, 4, 1, "", "target_sparsity_ratio"]], "neural_compressor.compression.pruner.pruners.basic": [[211, 1, 1, "", "KerasBasicPruner"], [211, 1, 1, "", "PytorchBasicPruner"]], "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner": [[211, 4, 1, "", "criterion"], [211, 4, 1, "", "pattern"], [211, 4, 1, "", "reg"], [211, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner": [[211, 4, 1, "", "criterion"], [211, 4, 1, "", "pattern"], [211, 4, 1, "", "reg"], [211, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.block_mask": [[212, 1, 1, "", "PytorchBlockMaskPruner"]], "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner": [[212, 4, 1, "", "criterion"], [212, 4, 1, "", "pattern"], [212, 4, 1, "", "reg"], [212, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.mha": [[214, 1, 1, "", "PythonMultiheadAttentionPruner"]], "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner": [[214, 4, 1, "", "head_masks"], [214, 4, 1, "", "linear_layers"], [214, 4, 1, "", "mha_compressions"], [214, 4, 1, "", "mha_scores"]], "neural_compressor.compression.pruner.pruners.pattern_lock": [[215, 1, 1, "", "PytorchPatternLockPruner"]], "neural_compressor.compression.pruner.pruners.progressive": [[216, 1, 1, "", "PytorchProgressivePruner"]], "neural_compressor.compression.pruner.pruners.retrain_free": [[217, 1, 1, "", "PytorchRetrainFreePruner"]], "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner": [[217, 4, 1, "", "criterion"], [217, 4, 1, "", "pattern"], [217, 4, 1, "", "reg"], [217, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.sparse_gpt": [[218, 1, 1, "", "SparseGPTPruner"]], "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner": [[218, 4, 1, "", "criterion"], [218, 4, 1, "", "pattern"], [218, 4, 1, "", "reg"], [218, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruning": [[219, 1, 1, "", "BasePruning"], [219, 1, 1, "", "BasicPruning"], [219, 1, 1, "", "RetrainFreePruning"], [219, 1, 1, "", "SparseGPTPruning"], [219, 2, 1, "", "register_pruning"]], "neural_compressor.compression.pruner.pruning.BasePruning": [[219, 4, 1, "", "config_file_path"], [219, 4, 1, "", "model"], [219, 4, 1, "", "pruner_info"], [219, 4, 1, "", "pruners"]], "neural_compressor.compression.pruner.pruning.BasicPruning": [[219, 4, 1, "", "config_file_path"], [219, 4, 1, "", "model"], [219, 4, 1, "", "pruner_info"], [219, 4, 1, "", "pruners"]], "neural_compressor.compression.pruner.pruning.RetrainFreePruning": [[219, 4, 1, "", "config_file_path"], [219, 4, 1, "", "model"], [219, 4, 1, "", "pruner_info"], [219, 4, 1, "", "pruners"]], "neural_compressor.compression.pruner.regs": [[220, 1, 1, "", "BaseReg"], [220, 1, 1, "", "GroupLasso"], [220, 2, 1, "", "get_reg"], [220, 2, 1, "", "get_reg_type"], [220, 2, 1, "", "register_reg"]], "neural_compressor.compression.pruner.regs.GroupLasso": [[220, 4, 1, "", "alpha"], [220, 4, 1, "", "reg_terms"]], "neural_compressor.compression.pruner.schedulers": [[221, 1, 1, "", "IterativeScheduler"], [221, 1, 1, "", "OneshotScheduler"], [221, 1, 1, "", "PruningScheduler"], [221, 2, 1, "", "get_scheduler"], [221, 2, 1, "", "register_scheduler"]], "neural_compressor.compression.pruner.schedulers.PruningScheduler": [[221, 4, 1, "", "config"]], "neural_compressor.compression.pruner.tf_criteria": [[222, 1, 1, "", "MagnitudeCriterion"], [222, 1, 1, "", "PruningCriterion"], [222, 2, 1, "", "get_tf_criterion"], [222, 2, 1, "", "register_criterion"]], "neural_compressor.compression.pruner.tf_criteria.MagnitudeCriterion": [[222, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.tf_criteria.PruningCriterion": [[222, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.utils": [[223, 2, 1, "", "check_config"], [223, 2, 1, "", "check_key_validity"], [223, 2, 1, "", "collect_layer_inputs"], [223, 2, 1, "", "generate_pruner_config"], [223, 2, 1, "", "get_layers"], [223, 2, 1, "", "get_sparsity_ratio"], [223, 2, 1, "", "get_sparsity_ratio_tf"], [223, 2, 1, "", "parse_last_linear"], [223, 2, 1, "", "parse_last_linear_tf"], [223, 2, 1, "", "parse_to_prune"], [223, 2, 1, "", "parse_to_prune_tf"], [223, 2, 1, "", "process_and_check_config"], [223, 2, 1, "", "process_config"], [223, 2, 1, "", "process_weight_config"], [223, 2, 1, "", "process_yaml_config"], [223, 2, 1, "", "reset_none_to_default"], [223, 2, 1, "", "update_params"]], "neural_compressor.compression.pruner.wanda": [[225, 0, 0, "-", "prune"], [226, 0, 0, "-", "utils"], [227, 0, 0, "-", "wrapper"]], "neural_compressor.compression.pruner.wanda.prune": [[225, 2, 1, "", "prune_wanda"]], "neural_compressor.compression.pruner.wanda.utils": [[226, 2, 1, "", "find_layers"]], "neural_compressor.compression.pruner.wanda.wrapper": [[227, 1, 1, "", "WrappedGPT"]], "neural_compressor.conf": [[228, 0, 0, "-", "config"], [229, 0, 0, "-", "dotdict"], [231, 0, 0, "-", "pythonic_config"]], "neural_compressor.conf.config": [[228, 1, 1, "", "Benchmark_Conf"], [228, 1, 1, "", "Conf"], [228, 1, 1, "", "DefaultConf"], [228, 1, 1, "", "Distillation_Conf"], [228, 1, 1, "", "Graph_Optimization_Conf"], [228, 1, 1, "", "MixedPrecision_Conf"], [228, 1, 1, "", "NASConfig"], [228, 1, 1, "", "PrunerV2"], [228, 1, 1, "", "Pruning_Conf"], [228, 1, 1, "", "Quantization_Conf"]], "neural_compressor.conf.dotdict": [[229, 1, 1, "", "DotDict"], [229, 2, 1, "", "deep_get"], [229, 2, 1, "", "deep_set"]], "neural_compressor.conf.pythonic_config": [[231, 1, 1, "", "AccuracyCriterion"], [231, 1, 1, "", "BenchmarkConfig"], [231, 1, 1, "", "DistillationConfig"], [231, 1, 1, "", "KnowledgeDistillationLossConfig"], [231, 1, 1, "", "Options"], [231, 1, 1, "", "QuantizationConfig"], [231, 1, 1, "", "WeightPruningConfig"]], "neural_compressor.config": [[232, 1, 1, "", "AccuracyCriterion"], [232, 1, 1, "", "BenchmarkConfig"], [232, 1, 1, "", "DistillationConfig"], [232, 1, 1, "", "DotDict"], [232, 1, 1, "", "ExportConfig"], [232, 1, 1, "", "HPOConfig"], [232, 1, 1, "", "IntermediateLayersKnowledgeDistillationLossConfig"], [232, 1, 1, "", "Keras"], [232, 1, 1, "", "KnowledgeDistillationLossConfig"], [232, 1, 1, "", "MXNet"], [232, 1, 1, "", "MixedPrecisionConfig"], [232, 1, 1, "", "NASConfig"], [232, 1, 1, "", "ONNX"], [232, 1, 1, "", "ONNXQlinear2QDQConfig"], [232, 1, 1, "", "Options"], [232, 1, 1, "", "PostTrainingQuantConfig"], [232, 1, 1, "", "PyTorch"], [232, 1, 1, "", "QuantizationAwareTrainingConfig"], [232, 1, 1, "", "SelfKnowledgeDistillationLossConfig"], [232, 1, 1, "", "TF2ONNXConfig"], [232, 1, 1, "", "TensorFlow"], [232, 1, 1, "", "Torch2ONNXConfig"], [232, 1, 1, "", "TuningCriterion"], [232, 1, 1, "", "WeightPruningConfig"]], "neural_compressor.contrib": [[234, 0, 0, "-", "strategy"]], "neural_compressor.contrib.strategy": [[235, 0, 0, "-", "sigopt"], [236, 0, 0, "-", "tpe"]], "neural_compressor.contrib.strategy.sigopt": [[235, 1, 1, "", "SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[236, 1, 1, "", "TpeTuneStrategy"]], "neural_compressor.data": [[241, 0, 0, "-", "dataloaders"], [253, 0, 0, "-", "datasets"], [257, 0, 0, "-", "filters"], [261, 0, 0, "-", "transforms"]], "neural_compressor.data.dataloaders": [[237, 0, 0, "-", "base_dataloader"], [238, 0, 0, "-", "dataloader"], [239, 0, 0, "-", "default_dataloader"], [240, 0, 0, "-", "fetcher"], [242, 0, 0, "-", "mxnet_dataloader"], [243, 0, 0, "-", "onnxrt_dataloader"], [244, 0, 0, "-", "pytorch_dataloader"], [245, 0, 0, "-", "sampler"], [246, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.data.dataloaders.base_dataloader": [[237, 1, 1, "", "BaseDataLoader"]], "neural_compressor.data.dataloaders.dataloader": [[238, 1, 1, "", "DataLoader"], [238, 2, 1, "", "check_dataloader"]], "neural_compressor.data.dataloaders.default_dataloader": [[239, 1, 1, "", "DefaultDataLoader"], [239, 2, 1, "", "default_collate"]], "neural_compressor.data.dataloaders.fetcher": [[240, 1, 1, "", "Fetcher"], [240, 1, 1, "", "IndexFetcher"], [240, 1, 1, "", "IterableFetcher"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[242, 1, 1, "", "MXNetDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[243, 1, 1, "", "ONNXRTBertDataLoader"], [243, 1, 1, "", "ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[244, 1, 1, "", "PyTorchDataLoader"]], "neural_compressor.data.dataloaders.sampler": [[245, 1, 1, "", "BatchSampler"], [245, 1, 1, "", "IterableSampler"], [245, 1, 1, "", "Sampler"], [245, 1, 1, "", "SequentialSampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[246, 1, 1, "", "TFDataDataLoader"], [246, 1, 1, "", "TensorflowBertDataLoader"], [246, 1, 1, "", "TensorflowDataLoader"], [246, 1, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.data.datasets": [[247, 0, 0, "-", "bert_dataset"], [248, 0, 0, "-", "coco_dataset"], [249, 0, 0, "-", "dataset"], [250, 0, 0, "-", "dummy_dataset"], [251, 0, 0, "-", "dummy_dataset_v2"], [252, 0, 0, "-", "imagenet_dataset"], [254, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.data.datasets.bert_dataset": [[247, 1, 1, "", "InputFeatures"], [247, 1, 1, "", "ONNXRTBertDataset"], [247, 1, 1, "", "ParseDecodeBert"], [247, 1, 1, "", "PytorchBertDataset"], [247, 1, 1, "", "TensorflowBertDataset"], [247, 1, 1, "", "TensorflowModelZooBertDataset"], [247, 2, 1, "", "convert_examples_to_features"], [247, 2, 1, "", "load_and_cache_examples"]], "neural_compressor.data.datasets.coco_dataset": [[248, 1, 1, "", "COCONpy"], [248, 1, 1, "", "COCORaw"], [248, 1, 1, "", "COCORecordDataset"], [248, 1, 1, "", "ParseDecodeCoco"]], "neural_compressor.data.datasets.dataset": [[249, 1, 1, "", "CIFAR10"], [249, 1, 1, "", "CIFAR100"], [249, 1, 1, "", "Dataset"], [249, 1, 1, "", "Datasets"], [249, 1, 1, "", "FashionMNIST"], [249, 1, 1, "", "ImageFolder"], [249, 1, 1, "", "IterableDataset"], [249, 1, 1, "", "MNIST"], [249, 1, 1, "", "MXNetCIFAR10"], [249, 1, 1, "", "MXNetCIFAR100"], [249, 1, 1, "", "MXNetDatasets"], [249, 1, 1, "", "MXNetFashionMNIST"], [249, 1, 1, "", "MXNetImageFolder"], [249, 1, 1, "", "MXNetMNIST"], [249, 1, 1, "", "ONNXRTITDatasets"], [249, 1, 1, "", "ONNXRTQLDatasets"], [249, 1, 1, "", "PyTorchDatasets"], [249, 1, 1, "", "PytorchCIFAR10"], [249, 1, 1, "", "PytorchCIFAR100"], [249, 1, 1, "", "PytorchFashionMNIST"], [249, 1, 1, "", "PytorchMNIST"], [249, 1, 1, "", "PytorchMxnetWrapDataset"], [249, 1, 1, "", "PytorchMxnetWrapFunction"], [249, 1, 1, "", "Tensorflow"], [249, 1, 1, "", "TensorflowCIFAR10"], [249, 1, 1, "", "TensorflowCIFAR100"], [249, 1, 1, "", "TensorflowDatasets"], [249, 1, 1, "", "TensorflowFashionMNIST"], [249, 1, 1, "", "TensorflowImageRecord"], [249, 1, 1, "", "TensorflowMNIST"], [249, 1, 1, "", "TensorflowTFRecordDataset"], [249, 1, 1, "", "TensorflowVOCRecord"], [249, 2, 1, "", "calculate_md5"], [249, 2, 1, "", "check_integrity"], [249, 2, 1, "", "dataset_registry"], [249, 2, 1, "", "download_url"], [249, 5, 1, "", "framework_datasets"], [249, 2, 1, "", "gen_bar_updater"]], "neural_compressor.data.datasets.dummy_dataset": [[250, 1, 1, "", "DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[251, 1, 1, "", "DummyDataset"], [251, 1, 1, "", "SparseDummyDataset"]], "neural_compressor.data.datasets.imagenet_dataset": [[252, 1, 1, "", "ImagenetRaw"], [252, 1, 1, "", "MXNetImagenetRaw"], [252, 1, 1, "", "ONNXRTImagenetDataset"], [252, 1, 1, "", "PytorchImagenetRaw"], [252, 1, 1, "", "TensorflowImagenetDataset"], [252, 1, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.data.datasets.style_transfer_dataset": [[254, 1, 1, "", "StyleTransferDataset"]], "neural_compressor.data.filters": [[255, 0, 0, "-", "coco_filter"], [256, 0, 0, "-", "filter"]], "neural_compressor.data.filters.coco_filter": [[255, 1, 1, "", "LabelBalanceCOCORawFilter"], [255, 1, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.filter": [[256, 1, 1, "", "FILTERS"], [256, 1, 1, "", "Filter"], [256, 1, 1, "", "MXNetFilters"], [256, 1, 1, "", "ONNXRTITFilters"], [256, 1, 1, "", "ONNXRTQLFilters"], [256, 1, 1, "", "PyTorchFilters"], [256, 1, 1, "", "TensorflowFilters"], [256, 2, 1, "", "filter_registry"]], "neural_compressor.data.transforms": [[259, 0, 0, "-", "coco_transform"], [260, 0, 0, "-", "imagenet_transform"], [262, 0, 0, "-", "postprocess"], [263, 0, 0, "-", "tokenization"], [264, 0, 0, "-", "transform"]], "neural_compressor.data.transforms.coco_transform": [[259, 1, 1, "", "ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.imagenet_transform": [[260, 1, 1, "", "BilinearImagenetTransform"], [260, 1, 1, "", "LabelShift"], [260, 1, 1, "", "ONNXResizeCropImagenetTransform"], [260, 1, 1, "", "OnnxBilinearImagenetTransform"], [260, 1, 1, "", "ParseDecodeImagenet"], [260, 1, 1, "", "ParseDecodeImagenetTransform"], [260, 1, 1, "", "QuantizedInput"], [260, 1, 1, "", "ResizeWithAspectRatio"], [260, 1, 1, "", "TensorflowResizeCropImagenetTransform"], [260, 1, 1, "", "TensorflowShiftRescale"], [260, 1, 1, "", "TensorflowTransposeLastChannel"]], "neural_compressor.data.transforms.postprocess": [[262, 1, 1, "", "Postprocess"]], "neural_compressor.data.transforms.tokenization": [[263, 1, 1, "", "BasicTokenizer"], [263, 1, 1, "", "FullTokenizer"], [263, 1, 1, "", "WordpieceTokenizer"], [263, 2, 1, "", "convert_by_vocab"], [263, 2, 1, "", "convert_to_unicode"], [263, 2, 1, "", "load_vocab"], [263, 2, 1, "", "whitespace_tokenize"]], "neural_compressor.data.transforms.transform": [[264, 1, 1, "", "AlignImageChannelTransform"], [264, 1, 1, "", "BaseTransform"], [264, 1, 1, "", "CastONNXTransform"], [264, 1, 1, "", "CastPyTorchTransform"], [264, 1, 1, "", "CastTFTransform"], [264, 1, 1, "", "CenterCropTFTransform"], [264, 1, 1, "", "CenterCropTransform"], [264, 1, 1, "", "CollectTransform"], [264, 1, 1, "", "ComposeTransform"], [264, 1, 1, "", "CropResizeTFTransform"], [264, 1, 1, "", "CropResizeTransform"], [264, 1, 1, "", "CropToBoundingBox"], [264, 1, 1, "", "InputFeatures"], [264, 1, 1, "", "MXNetCropResizeTransform"], [264, 1, 1, "", "MXNetCropToBoundingBox"], [264, 1, 1, "", "MXNetNormalizeTransform"], [264, 1, 1, "", "MXNetTransforms"], [264, 1, 1, "", "MXNetTranspose"], [264, 1, 1, "", "NormalizeTFTransform"], [264, 1, 1, "", "NormalizeTransform"], [264, 1, 1, "", "ONNXRTCropToBoundingBox"], [264, 1, 1, "", "ONNXRTITTransforms"], [264, 1, 1, "", "ONNXRTQLTransforms"], [264, 1, 1, "", "PaddedCenterCropTransform"], [264, 1, 1, "", "ParseDecodeVocTransform"], [264, 1, 1, "", "PyTorchAlignImageChannel"], [264, 1, 1, "", "PyTorchCropResizeTransform"], [264, 1, 1, "", "PyTorchNormalizeTransform"], [264, 1, 1, "", "PyTorchTransforms"], [264, 1, 1, "", "PyTorchTranspose"], [264, 1, 1, "", "PytorchMxnetTransform"], [264, 1, 1, "", "PytorchMxnetWrapFunction"], [264, 1, 1, "", "RandomCropTFTransform"], [264, 1, 1, "", "RandomCropTransform"], [264, 1, 1, "", "RandomHorizontalFlip"], [264, 1, 1, "", "RandomResizedCropMXNetTransform"], [264, 1, 1, "", "RandomResizedCropPytorchTransform"], [264, 1, 1, "", "RandomResizedCropTFTransform"], [264, 1, 1, "", "RandomResizedCropTransform"], [264, 1, 1, "", "RandomVerticalFlip"], [264, 1, 1, "", "RescaleKerasPretrainTransform"], [264, 1, 1, "", "RescaleTFTransform"], [264, 1, 1, "", "RescaleTransform"], [264, 1, 1, "", "ResizeMXNetTransform"], [264, 1, 1, "", "ResizePytorchTransform"], [264, 1, 1, "", "ResizeTFTransform"], [264, 1, 1, "", "ResizeTransform"], [264, 1, 1, "", "ResizeWithRatio"], [264, 1, 1, "", "SquadExample"], [264, 1, 1, "", "TFModelZooCollectTransform"], [264, 1, 1, "", "TFSquadV1ModelZooPostTransform"], [264, 1, 1, "", "TFSquadV1PostTransform"], [264, 1, 1, "", "TRANSFORMS"], [264, 1, 1, "", "TensorflowCropToBoundingBox"], [264, 1, 1, "", "TensorflowRandomHorizontalFlip"], [264, 1, 1, "", "TensorflowRandomVerticalFlip"], [264, 1, 1, "", "TensorflowResizeWithRatio"], [264, 1, 1, "", "TensorflowTransform"], [264, 1, 1, "", "TensorflowTransforms"], [264, 1, 1, "", "TensorflowTranspose"], [264, 1, 1, "", "TensorflowWrapFunction"], [264, 1, 1, "", "ToArray"], [264, 1, 1, "", "ToNDArrayTransform"], [264, 1, 1, "", "Transforms"], [264, 1, 1, "", "Transpose"], [264, 2, 1, "", "convert_examples_to_features"], [264, 2, 1, "", "get_final_text"], [264, 2, 1, "", "get_torchvision_map"], [264, 2, 1, "", "read_squad_examples"], [264, 2, 1, "", "transform_registry"]], "neural_compressor.experimental": [[265, 0, 0, "-", "benchmark"], [268, 0, 0, "-", "common"], [274, 0, 0, "-", "component"], [275, 0, 0, "-", "compression"], [276, 0, 0, "-", "contrib"], [301, 0, 0, "-", "data"], [306, 0, 0, "-", "distillation"], [307, 0, 0, "-", "export"], [311, 0, 0, "-", "graph_optimization"], [319, 0, 0, "-", "metric"], [321, 0, 0, "-", "mixed_precision"], [322, 0, 0, "-", "model_conversion"], [325, 0, 0, "-", "nas"], [331, 0, 0, "-", "pruner_legacy"], [335, 0, 0, "-", "pruning"], [336, 0, 0, "-", "pruning_recipes"], [340, 0, 0, "-", "pruning_v2"], [341, 0, 0, "-", "pytorch_pruner"], [348, 0, 0, "-", "quantization"], [349, 0, 0, "-", "scheduler"], [354, 0, 0, "-", "strategy"]], "neural_compressor.experimental.benchmark": [[265, 1, 1, "", "Benchmark"], [265, 2, 1, "", "get_architecture"], [265, 2, 1, "", "get_bounded_threads"], [265, 2, 1, "", "get_core_ids"], [265, 2, 1, "", "get_physical_ids"], [265, 2, 1, "", "get_threads"], [265, 2, 1, "", "get_threads_per_core"], [265, 2, 1, "", "set_all_env_var"], [265, 2, 1, "", "set_env_var"]], "neural_compressor.experimental.common": [[266, 0, 0, "-", "criterion"], [267, 0, 0, "-", "dataloader"], [269, 0, 0, "-", "metric"], [270, 0, 0, "-", "model"], [271, 0, 0, "-", "optimizer"], [272, 0, 0, "-", "postprocess"], [273, 0, 0, "-", "torch_utils"]], "neural_compressor.experimental.common.criterion": [[266, 1, 1, "", "Criterions"], [266, 1, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [266, 1, 1, "", "KnowledgeDistillationFramework"], [266, 1, 1, "", "KnowledgeDistillationLoss"], [266, 1, 1, "", "PyTorchCriterions"], [266, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [266, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [266, 1, 1, "", "PyTorchKnowledgeDistillationLoss"], [266, 1, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [266, 1, 1, "", "SelfKnowledgeDistillationLoss"], [266, 1, 1, "", "TensorflowCriterions"], [266, 1, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [266, 2, 1, "", "criterion_registry"]], "neural_compressor.experimental.common.dataloader": [[267, 1, 1, "", "DataLoader"]], "neural_compressor.experimental.common.metric": [[269, 1, 1, "", "Metric"]], "neural_compressor.experimental.common.model": [[270, 1, 1, "", "Model"], [270, 2, 1, "", "set_backend"]], "neural_compressor.experimental.common.optimizer": [[271, 1, 1, "", "Optimizers"], [271, 1, 1, "", "PyTorchOptimizers"], [271, 1, 1, "", "PyTorchSGD"], [271, 1, 1, "", "TensorFlowAdamW"], [271, 1, 1, "", "TensorFlowSGD"], [271, 1, 1, "", "TensorflowOptimizers"], [271, 2, 1, "", "optimizer_registry"]], "neural_compressor.experimental.common.postprocess": [[272, 1, 1, "", "Postprocess"]], "neural_compressor.experimental.common.torch_utils": [[273, 2, 1, "", "get_activation"], [273, 2, 1, "", "record_output"]], "neural_compressor.experimental.component": [[274, 1, 1, "", "Component"]], "neural_compressor.experimental.contrib": [[277, 0, 0, "-", "strategy"]], "neural_compressor.experimental.contrib.strategy": [[278, 0, 0, "-", "sigopt"], [279, 0, 0, "-", "tpe"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[278, 1, 1, "", "SigOptTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.tpe": [[279, 1, 1, "", "TpeTuneStrategy"]], "neural_compressor.experimental.data": [[284, 0, 0, "-", "dataloaders"], [296, 0, 0, "-", "datasets"], [300, 0, 0, "-", "filters"], [303, 0, 0, "-", "transforms"]], "neural_compressor.experimental.data.dataloaders": [[280, 0, 0, "-", "base_dataloader"], [281, 0, 0, "-", "dataloader"], [282, 0, 0, "-", "default_dataloader"], [283, 0, 0, "-", "fetcher"], [285, 0, 0, "-", "mxnet_dataloader"], [286, 0, 0, "-", "onnxrt_dataloader"], [287, 0, 0, "-", "pytorch_dataloader"], [288, 0, 0, "-", "sampler"], [289, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[280, 1, 1, "", "BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[282, 1, 1, "", "DefaultDataLoader"], [282, 2, 1, "", "default_collate"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[283, 1, 1, "", "Fetcher"], [283, 1, 1, "", "IndexFetcher"], [283, 1, 1, "", "IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[285, 1, 1, "", "MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[286, 1, 1, "", "ONNXRTBertDataLoader"], [286, 1, 1, "", "ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[287, 1, 1, "", "PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[288, 1, 1, "", "BatchSampler"], [288, 1, 1, "", "IterableSampler"], [288, 1, 1, "", "Sampler"], [288, 1, 1, "", "SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[289, 1, 1, "", "TFDataDataLoader"], [289, 1, 1, "", "TensorflowBertDataLoader"], [289, 1, 1, "", "TensorflowDataLoader"], [289, 1, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.datasets": [[290, 0, 0, "-", "bert_dataset"], [291, 0, 0, "-", "coco_dataset"], [292, 0, 0, "-", "dataset"], [293, 0, 0, "-", "dummy_dataset"], [294, 0, 0, "-", "dummy_dataset_v2"], [295, 0, 0, "-", "imagenet_dataset"], [297, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[290, 1, 1, "", "InputFeatures"], [290, 1, 1, "", "ONNXRTBertDataset"], [290, 1, 1, "", "ParseDecodeBert"], [290, 1, 1, "", "PytorchBertDataset"], [290, 1, 1, "", "TensorflowBertDataset"], [290, 1, 1, "", "TensorflowModelZooBertDataset"], [290, 2, 1, "", "convert_examples_to_features"], [290, 2, 1, "", "load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[291, 1, 1, "", "COCONpy"], [291, 1, 1, "", "COCORaw"], [291, 1, 1, "", "COCORecordDataset"], [291, 1, 1, "", "ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.dataset": [[292, 1, 1, "", "CIFAR10"], [292, 1, 1, "", "CIFAR100"], [292, 1, 1, "", "Dataset"], [292, 1, 1, "", "Datasets"], [292, 1, 1, "", "FashionMNIST"], [292, 1, 1, "", "ImageFolder"], [292, 1, 1, "", "IterableDataset"], [292, 1, 1, "", "MNIST"], [292, 1, 1, "", "MXNetCIFAR10"], [292, 1, 1, "", "MXNetCIFAR100"], [292, 1, 1, "", "MXNetDatasets"], [292, 1, 1, "", "MXNetFashionMNIST"], [292, 1, 1, "", "MXNetImageFolder"], [292, 1, 1, "", "MXNetMNIST"], [292, 1, 1, "", "ONNXRTITDatasets"], [292, 1, 1, "", "ONNXRTQLDatasets"], [292, 1, 1, "", "PyTorchDatasets"], [292, 1, 1, "", "PytorchCIFAR10"], [292, 1, 1, "", "PytorchCIFAR100"], [292, 1, 1, "", "PytorchFashionMNIST"], [292, 1, 1, "", "PytorchMNIST"], [292, 1, 1, "", "PytorchMxnetWrapDataset"], [292, 1, 1, "", "PytorchMxnetWrapFunction"], [292, 1, 1, "", "TensorflowCIFAR10"], [292, 1, 1, "", "TensorflowCIFAR100"], [292, 1, 1, "", "TensorflowDatasets"], [292, 1, 1, "", "TensorflowFashionMNIST"], [292, 1, 1, "", "TensorflowImageFolder"], [292, 1, 1, "", "TensorflowImageRecord"], [292, 1, 1, "", "TensorflowMNIST"], [292, 1, 1, "", "TensorflowTFRecordDataset"], [292, 1, 1, "", "TensorflowVOCRecord"], [292, 2, 1, "", "calculate_md5"], [292, 2, 1, "", "check_integrity"], [292, 2, 1, "", "dataset_registry"], [292, 2, 1, "", "download_url"], [292, 5, 1, "", "framework_datasets"], [292, 2, 1, "", "gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[293, 1, 1, "", "DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[294, 1, 1, "", "DummyDataset"], [294, 1, 1, "", "SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[295, 1, 1, "", "ImagenetRaw"], [295, 1, 1, "", "MXNetImagenetRaw"], [295, 1, 1, "", "ONNXRTImagenetDataset"], [295, 1, 1, "", "PytorchImagenetRaw"], [295, 1, 1, "", "TensorflowImagenetDataset"], [295, 1, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[297, 1, 1, "", "StyleTransferDataset"]], "neural_compressor.experimental.data.filters": [[298, 0, 0, "-", "coco_filter"], [299, 0, 0, "-", "filter"]], "neural_compressor.experimental.data.filters.coco_filter": [[298, 1, 1, "", "LabelBalanceCOCORawFilter"], [298, 1, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.filter": [[299, 1, 1, "", "FILTERS"], [299, 1, 1, "", "Filter"], [299, 1, 1, "", "MXNetFilters"], [299, 1, 1, "", "ONNXRTITFilters"], [299, 1, 1, "", "ONNXRTQLFilters"], [299, 1, 1, "", "PyTorchFilters"], [299, 1, 1, "", "TensorflowFilters"], [299, 2, 1, "", "filter_registry"]], "neural_compressor.experimental.data.transforms": [[302, 0, 0, "-", "imagenet_transform"], [304, 0, 0, "-", "tokenization"], [305, 0, 0, "-", "transform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[302, 1, 1, "", "BilinearImagenetTransform"], [302, 1, 1, "", "LabelShift"], [302, 1, 1, "", "ONNXResizeCropImagenetTransform"], [302, 1, 1, "", "OnnxBilinearImagenetTransform"], [302, 1, 1, "", "ParseDecodeImagenet"], [302, 1, 1, "", "ParseDecodeImagenetTransform"], [302, 1, 1, "", "QuantizedInput"], [302, 1, 1, "", "ResizeWithAspectRatio"], [302, 1, 1, "", "TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.tokenization": [[304, 1, 1, "", "BasicTokenizer"], [304, 1, 1, "", "FullTokenizer"], [304, 1, 1, "", "WordpieceTokenizer"], [304, 2, 1, "", "convert_by_vocab"], [304, 2, 1, "", "convert_to_unicode"], [304, 2, 1, "", "load_vocab"], [304, 2, 1, "", "whitespace_tokenize"]], "neural_compressor.experimental.data.transforms.transform": [[305, 1, 1, "", "AlignImageChannelTransform"], [305, 1, 1, "", "BaseTransform"], [305, 1, 1, "", "CastONNXTransform"], [305, 1, 1, "", "CastPyTorchTransform"], [305, 1, 1, "", "CastTFTransform"], [305, 1, 1, "", "CenterCropTFTransform"], [305, 1, 1, "", "CenterCropTransform"], [305, 1, 1, "", "CollectTransform"], [305, 1, 1, "", "ComposeTransform"], [305, 1, 1, "", "CropResizeTFTransform"], [305, 1, 1, "", "CropResizeTransform"], [305, 1, 1, "", "CropToBoundingBox"], [305, 1, 1, "", "InputFeatures"], [305, 1, 1, "", "MXNetCropResizeTransform"], [305, 1, 1, "", "MXNetCropToBoundingBox"], [305, 1, 1, "", "MXNetNormalizeTransform"], [305, 1, 1, "", "MXNetTransforms"], [305, 1, 1, "", "MXNetTranspose"], [305, 1, 1, "", "NormalizeTFTransform"], [305, 1, 1, "", "NormalizeTransform"], [305, 1, 1, "", "ONNXRTCropToBoundingBox"], [305, 1, 1, "", "ONNXRTITTransforms"], [305, 1, 1, "", "ONNXRTQLTransforms"], [305, 1, 1, "", "PaddedCenterCropTransform"], [305, 1, 1, "", "ParseDecodeVocTransform"], [305, 1, 1, "", "PyTorchAlignImageChannel"], [305, 1, 1, "", "PyTorchCropResizeTransform"], [305, 1, 1, "", "PyTorchNormalizeTransform"], [305, 1, 1, "", "PyTorchTransforms"], [305, 1, 1, "", "PyTorchTranspose"], [305, 1, 1, "", "PytorchMxnetTransform"], [305, 1, 1, "", "PytorchMxnetWrapFunction"], [305, 1, 1, "", "RandomCropTFTransform"], [305, 1, 1, "", "RandomCropTransform"], [305, 1, 1, "", "RandomHorizontalFlip"], [305, 1, 1, "", "RandomResizedCropMXNetTransform"], [305, 1, 1, "", "RandomResizedCropPytorchTransform"], [305, 1, 1, "", "RandomResizedCropTFTransform"], [305, 1, 1, "", "RandomResizedCropTransform"], [305, 1, 1, "", "RandomVerticalFlip"], [305, 1, 1, "", "RescaleKerasPretrainTransform"], [305, 1, 1, "", "RescaleTFTransform"], [305, 1, 1, "", "RescaleTransform"], [305, 1, 1, "", "ResizeMXNetTransform"], [305, 1, 1, "", "ResizePytorchTransform"], [305, 1, 1, "", "ResizeTFTransform"], [305, 1, 1, "", "ResizeTransform"], [305, 1, 1, "", "ResizeWithRatio"], [305, 1, 1, "", "SquadExample"], [305, 1, 1, "", "TFModelZooCollectTransform"], [305, 1, 1, "", "TFSquadV1ModelZooPostTransform"], [305, 1, 1, "", "TFSquadV1PostTransform"], [305, 1, 1, "", "TRANSFORMS"], [305, 1, 1, "", "TensorflowCropToBoundingBox"], [305, 1, 1, "", "TensorflowRandomHorizontalFlip"], [305, 1, 1, "", "TensorflowRandomVerticalFlip"], [305, 1, 1, "", "TensorflowResizeWithRatio"], [305, 1, 1, "", "TensorflowTransform"], [305, 1, 1, "", "TensorflowTransforms"], [305, 1, 1, "", "TensorflowTranspose"], [305, 1, 1, "", "TensorflowWrapFunction"], [305, 1, 1, "", "ToArray"], [305, 1, 1, "", "ToNDArrayTransform"], [305, 1, 1, "", "Transforms"], [305, 1, 1, "", "Transpose"], [305, 2, 1, "", "convert_examples_to_features"], [305, 2, 1, "", "get_final_text"], [305, 2, 1, "", "get_torchvision_map"], [305, 2, 1, "", "read_squad_examples"], [305, 2, 1, "", "transform_registry"]], "neural_compressor.experimental.distillation": [[306, 1, 1, "", "Distillation"]], "neural_compressor.experimental.distillation.Distillation": [[306, 4, 1, "", "_epoch_ran"], [306, 4, 1, "", "best_model"], [306, 4, 1, "", "best_score"], [306, 4, 1, "", "eval_frequency"]], "neural_compressor.experimental.export": [[308, 0, 0, "-", "qlinear2qdq"], [309, 0, 0, "-", "tf2onnx"], [310, 0, 0, "-", "torch2onnx"]], "neural_compressor.experimental.export.qlinear2qdq": [[308, 2, 1, "", "check_model"], [308, 2, 1, "", "onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.tf2onnx": [[309, 2, 1, "", "tf_to_fp32_onnx"], [309, 2, 1, "", "tf_to_int8_onnx"]], "neural_compressor.experimental.export.torch2onnx": [[310, 2, 1, "", "dynamic_quant_export"], [310, 2, 1, "", "get_node_mapping"], [310, 2, 1, "", "get_quantizable_onnx_ops"], [310, 2, 1, "", "static_quant_export"], [310, 2, 1, "", "torch_to_fp32_onnx"], [310, 2, 1, "", "torch_to_int8_onnx"]], "neural_compressor.experimental.graph_optimization": [[311, 1, 1, "", "Graph_Optimization"]], "neural_compressor.experimental.metric": [[313, 0, 0, "-", "bleu"], [314, 0, 0, "-", "bleu_util"], [315, 0, 0, "-", "coco_label_map"], [316, 0, 0, "-", "coco_tools"], [317, 0, 0, "-", "evaluate_squad"], [318, 0, 0, "-", "f1"], [320, 0, 0, "-", "metric"]], "neural_compressor.experimental.metric.bleu": [[313, 1, 1, "", "BLEU"], [313, 1, 1, "", "UnicodeRegex"], [313, 2, 1, "", "bleu_tokenize"]], "neural_compressor.experimental.metric.bleu.BLEU": [[313, 4, 1, "", "labels"], [313, 4, 1, "", "predictions"]], "neural_compressor.experimental.metric.bleu.UnicodeRegex": [[313, 4, 1, "", "nondigit_punct_re"], [313, 4, 1, "", "punct_nondigit_re"], [313, 4, 1, "", "symbol_re"]], "neural_compressor.experimental.metric.bleu_util": [[314, 2, 1, "", "compute_bleu"]], "neural_compressor.experimental.metric.coco_tools": [[316, 1, 1, "", "COCOEvalWrapper"], [316, 1, 1, "", "COCOWrapper"], [316, 2, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [316, 2, 1, "", "ExportSingleImageDetectionMasksToCoco"], [316, 2, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.experimental.metric.coco_tools.COCOWrapper": [[316, 4, 1, "", "dataset"], [316, 4, 1, "", "detection_type"]], "neural_compressor.experimental.metric.evaluate_squad": [[317, 2, 1, "", "evaluate"], [317, 2, 1, "", "exact_match_score"], [317, 2, 1, "", "f1_score"], [317, 2, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[318, 2, 1, "", "evaluate"], [318, 2, 1, "", "f1_score"], [318, 2, 1, "", "metric_max_over_ground_truths"], [318, 2, 1, "", "normalize_answer"]], "neural_compressor.experimental.metric.metric": [[320, 1, 1, "", "Accuracy"], [320, 1, 1, "", "BaseMetric"], [320, 1, 1, "", "COCOmAPv2"], [320, 1, 1, "", "F1"], [320, 1, 1, "", "GeneralTopK"], [320, 1, 1, "", "Loss"], [320, 1, 1, "", "MAE"], [320, 1, 1, "", "METRICS"], [320, 1, 1, "", "MSE"], [320, 1, 1, "", "MXNetMetrics"], [320, 1, 1, "", "ONNXRTGLUE"], [320, 1, 1, "", "ONNXRTITMetrics"], [320, 1, 1, "", "ONNXRTQLMetrics"], [320, 1, 1, "", "PyTorchLoss"], [320, 1, 1, "", "PyTorchMetrics"], [320, 1, 1, "", "RMSE"], [320, 1, 1, "", "ROC"], [320, 1, 1, "", "SquadF1"], [320, 1, 1, "", "TensorflowCOCOMAP"], [320, 1, 1, "", "TensorflowMAP"], [320, 1, 1, "", "TensorflowMetrics"], [320, 1, 1, "", "TensorflowTopK"], [320, 1, 1, "", "TensorflowVOCMAP"], [320, 1, 1, "", "WrapMXNetMetric"], [320, 1, 1, "", "WrapONNXRTMetric"], [320, 1, 1, "", "WrapPyTorchMetric"], [320, 1, 1, "", "mIOU"], [320, 2, 1, "", "metric_registry"]], "neural_compressor.experimental.metric.metric.Accuracy": [[320, 4, 1, "", "label_list"], [320, 4, 1, "", "pred_list"], [320, 4, 1, "", "sample"]], "neural_compressor.experimental.metric.metric.GeneralTopK": [[320, 4, 1, "", "k"], [320, 4, 1, "", "num_correct"], [320, 4, 1, "", "num_sample"]], "neural_compressor.experimental.metric.metric.Loss": [[320, 4, 1, "", "sample"], [320, 4, 1, "", "sum"]], "neural_compressor.experimental.metric.metric.MAE": [[320, 4, 1, "", "compare_label"], [320, 4, 1, "", "label_list"], [320, 4, 1, "", "pred_list"]], "neural_compressor.experimental.metric.metric.METRICS": [[320, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.MSE": [[320, 4, 1, "", "compare_label"], [320, 4, 1, "", "label_list"], [320, 4, 1, "", "pred_list"]], "neural_compressor.experimental.metric.metric.MXNetMetrics": [[320, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTITMetrics": [[320, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics": [[320, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.PyTorchMetrics": [[320, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.RMSE": [[320, 4, 1, "", "mse"]], "neural_compressor.experimental.metric.metric.TensorflowMetrics": [[320, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.TensorflowTopK": [[320, 4, 1, "", "k"], [320, 4, 1, "", "num_correct"], [320, 4, 1, "", "num_sample"]], "neural_compressor.experimental.mixed_precision": [[321, 1, 1, "", "MixedPrecision"]], "neural_compressor.experimental.model_conversion": [[322, 1, 1, "", "ModelConversion"]], "neural_compressor.experimental.nas": [[323, 0, 0, "-", "basic_nas"], [324, 0, 0, "-", "dynas"], [326, 0, 0, "-", "nas"], [327, 0, 0, "-", "nas_utils"], [328, 0, 0, "-", "search_algorithms"]], "neural_compressor.experimental.nas.basic_nas": [[323, 1, 1, "", "BasicNAS"]], "neural_compressor.experimental.nas.dynas": [[324, 1, 1, "", "DyNAS"]], "neural_compressor.experimental.nas.nas": [[326, 1, 1, "", "NAS"], [326, 1, 1, "", "NASBase"]], "neural_compressor.experimental.nas.nas_utils": [[327, 2, 1, "", "create_search_space_pool"], [327, 2, 1, "", "find_pareto_front"], [327, 2, 1, "", "nas_registry"]], "neural_compressor.experimental.nas.search_algorithms": [[328, 1, 1, "", "BayesianOptimizationSearcher"], [328, 1, 1, "", "GridSearcher"], [328, 1, 1, "", "RandomSearcher"], [328, 1, 1, "", "Searcher"]], "neural_compressor.experimental.pruner_legacy": [[329, 0, 0, "-", "gradient_sensitivity"], [330, 0, 0, "-", "group_lasso"], [332, 0, 0, "-", "magnitude"], [333, 0, 0, "-", "pattern_lock"], [334, 0, 0, "-", "pruner"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[329, 1, 1, "", "GradientSensitivityPruner"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[330, 1, 1, "", "GroupLassoPruner"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[332, 1, 1, "", "BasicMagnitudePruner"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[333, 1, 1, "", "PatternLockPruner"]], "neural_compressor.experimental.pruner_legacy.pruner": [[334, 1, 1, "", "Pruner"], [334, 2, 1, "", "pruner_registry"]], "neural_compressor.experimental.pruning": [[335, 1, 1, "", "Pruning"], [335, 1, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning.Pruning": [[335, 4, 1, "", "conf"], [335, 4, 1, "", "pruners"]], "neural_compressor.experimental.pruning_recipes": [[337, 0, 0, "-", "patterns"]], "neural_compressor.experimental.pruning_recipes.patterns": [[338, 0, 0, "-", "pattern"], [339, 0, 0, "-", "tile_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[338, 1, 1, "", "PATTERNS"], [338, 1, 1, "", "PatternBase"], [338, 2, 1, "", "pattern_registry"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS": [[338, 4, 1, "", "patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[339, 1, 1, "", "TilePatternBase"], [339, 1, 1, "", "TilePattern_1x1"], [339, 1, 1, "", "TilePattern_1x16"], [339, 1, 1, "", "TilePattern_1x2"], [339, 1, 1, "", "TilePattern_2x2"], [339, 1, 1, "", "TilePattern_4x1"]], "neural_compressor.experimental.pruning_v2": [[340, 1, 1, "", "Pruning"], [340, 1, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning_v2.Pruning": [[340, 4, 1, "", "conf"], [340, 4, 1, "", "pruners"]], "neural_compressor.experimental.pytorch_pruner": [[342, 0, 0, "-", "logger"], [343, 0, 0, "-", "patterns"], [344, 0, 0, "-", "prune_utils"], [345, 0, 0, "-", "pruner"], [346, 0, 0, "-", "pruning"], [347, 0, 0, "-", "scheduler"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[343, 1, 1, "", "Pattern"], [343, 1, 1, "", "PatternNInM"], [343, 1, 1, "", "PatternNxM"], [343, 2, 1, "", "get_pattern"], [343, 2, 1, "", "register_pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.Pattern": [[343, 4, 1, "", "is_global"], [343, 4, 1, "", "pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM": [[343, 4, 1, "", "M"], [343, 4, 1, "", "N"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM": [[343, 4, 1, "", "block_size"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[344, 2, 1, "", "check_config"], [344, 2, 1, "", "parse_not_to_prune"], [344, 2, 1, "", "parse_to_prune"], [344, 2, 1, "", "process_and_check_config"], [344, 2, 1, "", "process_config"], [344, 2, 1, "", "reset_non_value_to_default"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[345, 1, 1, "", "MagnitudePruner"], [345, 1, 1, "", "PatternLockPruner"], [345, 1, 1, "", "Pruner"], [345, 1, 1, "", "SnipMomentumPruner"], [345, 1, 1, "", "SnipPruner"], [345, 2, 1, "", "get_pruner"], [345, 2, 1, "", "register_pruners"]], "neural_compressor.experimental.pytorch_pruner.pruner.Pruner": [[345, 4, 1, "", "config"], [345, 4, 1, "", "current_sparsity_ratio"], [345, 4, 1, "", "end_step"], [345, 4, 1, "", "global_step"], [345, 4, 1, "", "masks"], [345, 4, 1, "", "max_sparsity_ratio_per_layer"], [345, 4, 1, "", "modules"], [345, 4, 1, "", "pattern"], [345, 4, 1, "", "scheduler"], [345, 4, 1, "", "scores"], [345, 4, 1, "", "start_step"], [345, 4, 1, "", "target_sparsity_ratio"], [345, 4, 1, "", "update_frequency_on_step"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[346, 1, 1, "", "Pruning"]], "neural_compressor.experimental.pytorch_pruner.pruning.Pruning": [[346, 4, 1, "", "config_file_path"], [346, 4, 1, "", "model"], [346, 4, 1, "", "pruner_info"], [346, 4, 1, "", "pruners"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[347, 1, 1, "", "IterativeScheduler"], [347, 1, 1, "", "OneshotScheduler"], [347, 1, 1, "", "Scheduler"], [347, 2, 1, "", "get_scheduler"], [347, 2, 1, "", "register_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler": [[347, 4, 1, "", "config"]], "neural_compressor.experimental.quantization": [[348, 1, 1, "", "Quantization"]], "neural_compressor.experimental.scheduler": [[349, 1, 1, "", "Scheduler"]], "neural_compressor.experimental.strategy": [[350, 0, 0, "-", "auto_mixed_precision"], [351, 0, 0, "-", "basic"], [352, 0, 0, "-", "bayesian"], [353, 0, 0, "-", "exhaustive"], [355, 0, 0, "-", "mse"], [356, 0, 0, "-", "mse_v2"], [357, 0, 0, "-", "random"], [358, 0, 0, "-", "strategy"], [360, 0, 0, "-", "utils"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[350, 1, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.experimental.strategy.basic": [[351, 1, 1, "", "BasicTuneStrategy"]], "neural_compressor.experimental.strategy.bayesian": [[352, 1, 1, "", "BayesianOptimization"], [352, 1, 1, "", "BayesianTuneStrategy"], [352, 1, 1, "", "TargetSpace"], [352, 2, 1, "", "acq_max"]], "neural_compressor.experimental.strategy.exhaustive": [[353, 1, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.experimental.strategy.mse": [[355, 1, 1, "", "MSETuneStrategy"]], "neural_compressor.experimental.strategy.mse_v2": [[356, 1, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.experimental.strategy.random": [[357, 1, 1, "", "RandomTuneStrategy"]], "neural_compressor.experimental.strategy.strategy": [[358, 1, 1, "", "TuneStrategy"], [358, 2, 1, "", "strategy_registry"]], "neural_compressor.experimental.strategy.utils": [[359, 0, 0, "-", "constant"], [361, 0, 0, "-", "tuning_sampler"], [362, 0, 0, "-", "tuning_space"], [363, 0, 0, "-", "tuning_structs"], [364, 0, 0, "-", "utility"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[361, 1, 1, "", "FallbackTuningSampler"], [361, 1, 1, "", "ModelWiseTuningSampler"], [361, 1, 1, "", "OpTypeWiseTuningSampler"], [361, 1, 1, "", "OpWiseTuningSampler"], [361, 1, 1, "", "SmoothQuantSampler"], [361, 1, 1, "", "TuningOrder"], [361, 1, 1, "", "TuningSampler"], [361, 1, 1, "", "TuningSamplerRegistry"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[362, 1, 1, "", "TuningItem"], [362, 1, 1, "", "TuningSpace"], [362, 2, 1, "", "initial_tuning_cfg_with_quant_mode"], [362, 2, 1, "", "pattern_to_internal"], [362, 2, 1, "", "pattern_to_path"], [362, 2, 1, "", "quant_mode_from_pattern"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[363, 1, 1, "", "OpTuningConfig"]], "neural_compressor.experimental.strategy.utils.utility": [[364, 1, 1, "", "OrderedDefaultDict"], [364, 2, 1, "", "extract_data_type"], [364, 2, 1, "", "get_adaptor_name"], [364, 2, 1, "", "reverted_data_type"]], "neural_compressor.metric": [[366, 0, 0, "-", "bleu"], [367, 0, 0, "-", "bleu_util"], [368, 0, 0, "-", "coco_label_map"], [369, 0, 0, "-", "coco_tools"], [370, 0, 0, "-", "evaluate_squad"], [371, 0, 0, "-", "f1"], [373, 0, 0, "-", "metric"]], "neural_compressor.metric.bleu": [[366, 1, 1, "", "BLEU"], [366, 1, 1, "", "UnicodeRegex"], [366, 2, 1, "", "bleu_tokenize"]], "neural_compressor.metric.bleu.BLEU": [[366, 4, 1, "", "labels"], [366, 4, 1, "", "predictions"]], "neural_compressor.metric.bleu.UnicodeRegex": [[366, 4, 1, "", "nondigit_punct_re"], [366, 4, 1, "", "punct_nondigit_re"], [366, 4, 1, "", "symbol_re"]], "neural_compressor.metric.bleu_util": [[367, 2, 1, "", "compute_bleu"]], "neural_compressor.metric.coco_tools": [[369, 1, 1, "", "COCOEvalWrapper"], [369, 1, 1, "", "COCOWrapper"], [369, 2, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [369, 2, 1, "", "ExportSingleImageDetectionMasksToCoco"], [369, 2, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.metric.coco_tools.COCOWrapper": [[369, 4, 1, "", "dataset"], [369, 4, 1, "", "detection_type"]], "neural_compressor.metric.evaluate_squad": [[370, 2, 1, "", "evaluate"], [370, 2, 1, "", "exact_match_score"], [370, 2, 1, "", "f1_score"], [370, 2, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[371, 2, 1, "", "evaluate"], [371, 2, 1, "", "f1_score"], [371, 2, 1, "", "metric_max_over_ground_truths"], [371, 2, 1, "", "normalize_answer"]], "neural_compressor.metric.metric": [[373, 1, 1, "", "Accuracy"], [373, 1, 1, "", "BaseMetric"], [373, 1, 1, "", "COCOmAPv2"], [373, 1, 1, "", "F1"], [373, 1, 1, "", "GeneralTopK"], [373, 1, 1, "", "Loss"], [373, 1, 1, "", "MAE"], [373, 1, 1, "", "METRICS"], [373, 1, 1, "", "MSE"], [373, 1, 1, "", "MXNetMetrics"], [373, 1, 1, "", "Metric"], [373, 1, 1, "", "ONNXRTGLUE"], [373, 1, 1, "", "ONNXRTITMetrics"], [373, 1, 1, "", "ONNXRTQLMetrics"], [373, 1, 1, "", "PyTorchLoss"], [373, 1, 1, "", "PyTorchMetrics"], [373, 1, 1, "", "RMSE"], [373, 1, 1, "", "ROC"], [373, 1, 1, "", "SquadF1"], [373, 1, 1, "", "TensorflowCOCOMAP"], [373, 1, 1, "", "TensorflowMAP"], [373, 1, 1, "", "TensorflowMetrics"], [373, 1, 1, "", "TensorflowTopK"], [373, 1, 1, "", "TensorflowVOCMAP"], [373, 1, 1, "", "WrapMXNetMetric"], [373, 1, 1, "", "WrapONNXRTMetric"], [373, 1, 1, "", "WrapPyTorchMetric"], [373, 1, 1, "", "mIOU"], [373, 2, 1, "", "metric_registry"], [373, 2, 1, "", "register_customer_metric"]], "neural_compressor.metric.metric.Accuracy": [[373, 4, 1, "", "label_list"], [373, 4, 1, "", "pred_list"], [373, 4, 1, "", "sample"]], "neural_compressor.metric.metric.GeneralTopK": [[373, 4, 1, "", "k"], [373, 4, 1, "", "num_correct"], [373, 4, 1, "", "num_sample"]], "neural_compressor.metric.metric.Loss": [[373, 4, 1, "", "sample"], [373, 4, 1, "", "sum"]], "neural_compressor.metric.metric.MAE": [[373, 4, 1, "", "compare_label"], [373, 4, 1, "", "label_list"], [373, 4, 1, "", "pred_list"]], "neural_compressor.metric.metric.METRICS": [[373, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.MSE": [[373, 4, 1, "", "compare_label"], [373, 4, 1, "", "label_list"], [373, 4, 1, "", "pred_list"]], "neural_compressor.metric.metric.MXNetMetrics": [[373, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTITMetrics": [[373, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTQLMetrics": [[373, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.PyTorchMetrics": [[373, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.RMSE": [[373, 4, 1, "", "mse"]], "neural_compressor.metric.metric.TensorflowMetrics": [[373, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.TensorflowTopK": [[373, 4, 1, "", "k"], [373, 4, 1, "", "num_correct"], [373, 4, 1, "", "num_sample"]], "neural_compressor.mix_precision": [[374, 2, 1, "", "fit"]], "neural_compressor.model": [[375, 0, 0, "-", "base_model"], [377, 0, 0, "-", "keras_model"], [378, 0, 0, "-", "model"], [379, 0, 0, "-", "mxnet_model"], [380, 0, 0, "-", "nets_factory"], [381, 0, 0, "-", "onnx_model"], [382, 0, 0, "-", "tensorflow_model"], [383, 0, 0, "-", "torch_model"]], "neural_compressor.model.base_model": [[375, 1, 1, "", "BaseModel"]], "neural_compressor.model.keras_model": [[377, 1, 1, "", "KerasModel"]], "neural_compressor.model.model": [[378, 1, 1, "", "Model"], [378, 2, 1, "", "get_model_fwk_name"]], "neural_compressor.model.mxnet_model": [[379, 1, 1, "", "MXNetModel"]], "neural_compressor.model.nets_factory": [[380, 1, 1, "", "TFSlimNetsFactory"]], "neural_compressor.model.onnx_model": [[381, 1, 1, "", "ONNXModel"]], "neural_compressor.model.tensorflow_model": [[382, 1, 1, "", "TensorflowBaseModel"], [382, 1, 1, "", "TensorflowCheckpointModel"], [382, 1, 1, "", "TensorflowLLMModel"], [382, 1, 1, "", "TensorflowModel"], [382, 1, 1, "", "TensorflowQATModel"], [382, 1, 1, "", "TensorflowSavedModelModel"], [382, 2, 1, "", "checkpoint_session"], [382, 2, 1, "", "estimator_session"], [382, 2, 1, "", "frozen_pb_session"], [382, 2, 1, "", "get_model_type"], [382, 2, 1, "", "graph_def_session"], [382, 2, 1, "", "graph_session"], [382, 2, 1, "", "keras_session"], [382, 2, 1, "", "load_saved_model"], [382, 2, 1, "", "saved_model_session"], [382, 2, 1, "", "slim_session"], [382, 2, 1, "", "try_loading_keras"], [382, 2, 1, "", "validate_and_inference_input_output"], [382, 2, 1, "", "validate_graph_node"]], "neural_compressor.model.torch_model": [[383, 1, 1, "", "IPEXModel"], [383, 1, 1, "", "PyTorchBaseModel"], [383, 1, 1, "", "PyTorchFXModel"], [383, 1, 1, "", "PyTorchModel"]], "neural_compressor.objective": [[384, 1, 1, "", "Accuracy"], [384, 1, 1, "", "Footprint"], [384, 1, 1, "", "ModelSize"], [384, 1, 1, "", "MultiObjective"], [384, 1, 1, "", "Objective"], [384, 1, 1, "", "Performance"], [384, 2, 1, "", "objective_custom_registry"], [384, 2, 1, "", "objective_registry"]], "neural_compressor.onnxrt": [[385, 0, 0, "-", "algorithms"], [401, 0, 0, "-", "quantization"], [403, 0, 0, "-", "utils"]], "neural_compressor.onnxrt.algorithms": [[387, 0, 0, "-", "layer_wise"], [390, 0, 0, "-", "smoother"], [393, 0, 0, "-", "weight_only"]], "neural_compressor.onnxrt.algorithms.layer_wise": [[386, 0, 0, "-", "core"]], "neural_compressor.onnxrt.algorithms.layer_wise.core": [[386, 2, 1, "", "layer_wise_quant"]], "neural_compressor.onnxrt.algorithms.smoother": [[388, 0, 0, "-", "calibrator"], [389, 0, 0, "-", "core"]], "neural_compressor.onnxrt.algorithms.smoother.calibrator": [[388, 1, 1, "", "Calibrator"]], "neural_compressor.onnxrt.algorithms.smoother.core": [[389, 1, 1, "", "Smoother"]], "neural_compressor.onnxrt.algorithms.weight_only": [[391, 0, 0, "-", "awq"], [392, 0, 0, "-", "gptq"], [394, 0, 0, "-", "rtn"], [395, 0, 0, "-", "utility"]], "neural_compressor.onnxrt.algorithms.weight_only.awq": [[391, 2, 1, "", "apply_awq_on_model"], [391, 2, 1, "", "awq_quantize"]], "neural_compressor.onnxrt.algorithms.weight_only.gptq": [[392, 2, 1, "", "apply_gptq_on_model"], [392, 2, 1, "", "gptq_quantize"]], "neural_compressor.onnxrt.algorithms.weight_only.rtn": [[394, 2, 1, "", "apply_rtn_on_model"], [394, 2, 1, "", "rtn_quantize"]], "neural_compressor.onnxrt.algorithms.weight_only.utility": [[395, 2, 1, "", "make_matmul_weight_only_node"], [395, 2, 1, "", "pad_tensor"], [395, 2, 1, "", "prepare_inputs"], [395, 2, 1, "", "qdq_tensor"], [395, 2, 1, "", "quant_tensor"]], "neural_compressor.onnxrt.quantization": [[397, 0, 0, "-", "algorithm_entry"], [398, 0, 0, "-", "autotune"], [399, 0, 0, "-", "calibrate"], [400, 0, 0, "-", "config"], [402, 0, 0, "-", "quantize"]], "neural_compressor.onnxrt.quantization.algorithm_entry": [[397, 2, 1, "", "awq_quantize_entry"], [397, 2, 1, "", "gptq_quantize_entry"], [397, 2, 1, "", "rtn_quantize_entry"], [397, 2, 1, "", "smooth_quant_entry"]], "neural_compressor.onnxrt.quantization.autotune": [[398, 2, 1, "", "autotune"]], "neural_compressor.onnxrt.quantization.calibrate": [[399, 1, 1, "", "CalibrationDataReader"]], "neural_compressor.onnxrt.quantization.config": [[400, 1, 1, "", "AWQConfig"], [400, 1, 1, "", "GPTQConfig"], [400, 1, 1, "", "RTNConfig"], [400, 1, 1, "", "SmoohQuantConfig"], [400, 2, 1, "", "get_default_awq_config"], [400, 2, 1, "", "get_default_gptq_config"], [400, 2, 1, "", "get_default_rtn_config"], [400, 2, 1, "", "get_default_sq_config"]], "neural_compressor.onnxrt.utils": [[404, 0, 0, "-", "onnx_model"], [405, 0, 0, "-", "utility"]], "neural_compressor.onnxrt.utils.onnx_model": [[404, 1, 1, "", "ONNXModel"]], "neural_compressor.onnxrt.utils.utility": [[405, 2, 1, "", "check_model_with_infer_shapes"], [405, 2, 1, "", "find_by_name"], [405, 2, 1, "", "get_qrange_for_qType"], [405, 2, 1, "", "is_B_transposed"], [405, 2, 1, "", "quantize_data"], [405, 2, 1, "", "register_algo"], [405, 2, 1, "", "simple_progress_bar"]], "neural_compressor.profiling": [[408, 0, 0, "-", "parser"], [418, 0, 0, "-", "profiler"]], "neural_compressor.profiling.parser": [[407, 0, 0, "-", "factory"], [410, 0, 0, "-", "onnx_parser"], [412, 0, 0, "-", "parser"], [413, 0, 0, "-", "result"], [415, 0, 0, "-", "tensorflow_parser"]], "neural_compressor.profiling.parser.factory": [[407, 1, 1, "", "ParserFactory"]], "neural_compressor.profiling.parser.onnx_parser": [[409, 0, 0, "-", "factory"], [411, 0, 0, "-", "parser"]], "neural_compressor.profiling.parser.onnx_parser.factory": [[409, 1, 1, "", "OnnxrtParserFactory"]], "neural_compressor.profiling.parser.onnx_parser.parser": [[411, 1, 1, "", "OnnxProfilingParser"]], "neural_compressor.profiling.parser.parser": [[412, 1, 1, "", "ProfilingParser"]], "neural_compressor.profiling.parser.result": [[413, 1, 1, "", "ProfilingResult"]], "neural_compressor.profiling.parser.tensorflow_parser": [[414, 0, 0, "-", "factory"], [416, 0, 0, "-", "parser"]], "neural_compressor.profiling.parser.tensorflow_parser.factory": [[414, 1, 1, "", "TensorFlowParserFactory"]], "neural_compressor.profiling.parser.tensorflow_parser.parser": [[416, 1, 1, "", "TensorFlowProfilingParser"]], "neural_compressor.profiling.profiler": [[417, 0, 0, "-", "factory"], [420, 0, 0, "-", "onnxrt_profiler"], [423, 0, 0, "-", "profiler"], [425, 0, 0, "-", "tensorflow_profiler"]], "neural_compressor.profiling.profiler.factory": [[417, 1, 1, "", "ProfilerFactory"]], "neural_compressor.profiling.profiler.onnxrt_profiler": [[419, 0, 0, "-", "factory"], [421, 0, 0, "-", "profiler"], [422, 0, 0, "-", "utils"]], "neural_compressor.profiling.profiler.onnxrt_profiler.factory": [[419, 1, 1, "", "ProfilerFactory"]], "neural_compressor.profiling.profiler.onnxrt_profiler.profiler": [[421, 1, 1, "", "Profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.utils": [[422, 2, 1, "", "create_onnx_config"]], "neural_compressor.profiling.profiler.profiler": [[423, 1, 1, "", "Profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler": [[424, 0, 0, "-", "factory"], [426, 0, 0, "-", "profiler"], [427, 0, 0, "-", "utils"]], "neural_compressor.profiling.profiler.tensorflow_profiler.factory": [[424, 1, 1, "", "ProfilerFactory"]], "neural_compressor.profiling.profiler.tensorflow_profiler.profiler": [[426, 1, 1, "", "Profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.utils": [[427, 2, 1, "", "create_tf_config"], [427, 2, 1, "", "delete_assign"], [427, 2, 1, "", "set_eager_execution"]], "neural_compressor.quantization": [[428, 2, 1, "", "fit"]], "neural_compressor.strategy": [[429, 0, 0, "-", "auto"], [430, 0, 0, "-", "auto_mixed_precision"], [431, 0, 0, "-", "basic"], [432, 0, 0, "-", "bayesian"], [433, 0, 0, "-", "conservative"], [434, 0, 0, "-", "exhaustive"], [435, 0, 0, "-", "hawq_v2"], [437, 0, 0, "-", "mse"], [438, 0, 0, "-", "mse_v2"], [439, 0, 0, "-", "random"], [440, 0, 0, "-", "strategy"], [442, 0, 0, "-", "utils"]], "neural_compressor.strategy.auto": [[429, 1, 1, "", "AutoTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[430, 1, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.basic": [[431, 1, 1, "", "BasicTuneStrategy"]], "neural_compressor.strategy.bayesian": [[432, 1, 1, "", "BayesianOptimization"], [432, 1, 1, "", "BayesianTuneStrategy"], [432, 1, 1, "", "TargetSpace"], [432, 2, 1, "", "acq_max"]], "neural_compressor.strategy.conservative": [[433, 1, 1, "", "ConservativeTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[434, 1, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[435, 1, 1, "", "HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.mse": [[437, 1, 1, "", "MSETuneStrategy"]], "neural_compressor.strategy.mse_v2": [[438, 1, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.strategy.random": [[439, 1, 1, "", "RandomTuneStrategy"]], "neural_compressor.strategy.strategy": [[440, 1, 1, "", "TuneStrategy"], [440, 1, 1, "", "TuneStrategyMeta"], [440, 2, 1, "", "strategy_registry"]], "neural_compressor.strategy.utils": [[441, 0, 0, "-", "constant"], [443, 0, 0, "-", "tuning_sampler"], [444, 0, 0, "-", "tuning_space"], [445, 0, 0, "-", "tuning_structs"], [446, 0, 0, "-", "utility"]], "neural_compressor.strategy.utils.tuning_sampler": [[443, 1, 1, "", "BlockFallbackTuningSampler"], [443, 1, 1, "", "FallbackTuningSampler"], [443, 1, 1, "", "LowerBitsSampler"], [443, 1, 1, "", "ModelWiseTuningSampler"], [443, 1, 1, "", "OpTypeWiseTuningSampler"], [443, 1, 1, "", "OpWiseTuningSampler"], [443, 1, 1, "", "SmoothQuantSampler"], [443, 1, 1, "", "TuningOrder"], [443, 1, 1, "", "TuningSampler"], [443, 1, 1, "", "WeightOnlyQuantSampler"]], "neural_compressor.strategy.utils.tuning_space": [[444, 1, 1, "", "TuningItem"], [444, 1, 1, "", "TuningSpace"], [444, 2, 1, "", "initial_tuning_cfg_with_quant_mode"], [444, 2, 1, "", "pattern_to_internal"], [444, 2, 1, "", "pattern_to_path"], [444, 2, 1, "", "quant_mode_from_pattern"]], "neural_compressor.strategy.utils.tuning_structs": [[445, 1, 1, "", "OpTuningConfig"]], "neural_compressor.strategy.utils.utility": [[446, 1, 1, "", "ClassRegister"], [446, 1, 1, "", "OrderedDefaultDict"], [446, 1, 1, "", "QuantOptions"], [446, 1, 1, "", "QuantType"], [446, 2, 1, "", "build_slave_faker_model"], [446, 2, 1, "", "extract_data_type"], [446, 2, 1, "", "get_adaptor_name"], [446, 2, 1, "", "preprocess_user_cfg"], [446, 2, 1, "", "reverted_data_type"]], "neural_compressor.template": [[447, 0, 0, "-", "api_doc_example"]], "neural_compressor.template.api_doc_example": [[447, 1, 1, "", "ExampleClass"], [447, 4, 1, "", "attribute1"], [447, 2, 1, "", "function1"], [447, 2, 1, "", "function2"], [447, 2, 1, "", "function3"], [447, 2, 1, "", "generator1"], [447, 5, 1, "", "module_debug_level1"]], "neural_compressor.template.api_doc_example.ExampleClass": [[447, 4, 1, "", "attr1"], [447, 4, 1, "", "attr2"], [447, 4, 1, "", "attr5"]], "neural_compressor.tensorflow": [[449, 0, 0, "-", "algorithms"], [458, 0, 0, "-", "keras"], [471, 0, 0, "-", "quantization"], [568, 0, 0, "-", "utils"]], "neural_compressor.tensorflow.algorithms": [[452, 0, 0, "-", "smoother"], [454, 0, 0, "-", "static_quant"]], "neural_compressor.tensorflow.algorithms.smoother": [[450, 0, 0, "-", "calibration"], [451, 0, 0, "-", "core"], [453, 0, 0, "-", "scaler"]], "neural_compressor.tensorflow.algorithms.smoother.calibration": [[450, 1, 1, "", "SmoothQuantCalibration"], [450, 1, 1, "", "SmoothQuantCalibrationLLM"]], "neural_compressor.tensorflow.algorithms.smoother.core": [[451, 1, 1, "", "SmoothQuant"]], "neural_compressor.tensorflow.algorithms.smoother.scaler": [[453, 1, 1, "", "SmoothQuantScaler"], [453, 1, 1, "", "SmoothQuantScalerLLM"]], "neural_compressor.tensorflow.algorithms.static_quant": [[455, 0, 0, "-", "keras"], [456, 0, 0, "-", "tensorflow"]], "neural_compressor.tensorflow.algorithms.static_quant.keras": [[455, 1, 1, "", "KerasAdaptor"], [455, 1, 1, "", "KerasConfigConverter"], [455, 1, 1, "", "KerasQuery"], [455, 1, 1, "", "KerasSurgery"]], "neural_compressor.tensorflow.algorithms.static_quant.tensorflow": [[456, 1, 1, "", "TensorFlowAdaptor"], [456, 1, 1, "", "TensorFlowConfig"], [456, 1, 1, "", "TensorflowConfigConverter"], [456, 1, 1, "", "TensorflowQuery"], [456, 1, 1, "", "Tensorflow_ITEXAdaptor"]], "neural_compressor.tensorflow.keras": [[462, 0, 0, "-", "layers"], [467, 0, 0, "-", "quantization"]], "neural_compressor.tensorflow.keras.layers": [[459, 0, 0, "-", "conv2d"], [460, 0, 0, "-", "dense"], [461, 0, 0, "-", "depthwise_conv2d"], [463, 0, 0, "-", "layer_initializer"], [464, 0, 0, "-", "pool2d"], [465, 0, 0, "-", "separable_conv2d"]], "neural_compressor.tensorflow.keras.quantization": [[466, 0, 0, "-", "config"]], "neural_compressor.tensorflow.keras.quantization.config": [[466, 1, 1, "", "StaticQuantConfig"], [466, 2, 1, "", "get_all_registered_configs"], [466, 2, 1, "", "get_default_static_quant_config"]], "neural_compressor.tensorflow.quantization": [[468, 0, 0, "-", "algorithm_entry"], [469, 0, 0, "-", "autotune"], [470, 0, 0, "-", "config"], [472, 0, 0, "-", "quantize"], [531, 0, 0, "-", "utils"]], "neural_compressor.tensorflow.quantization.algorithm_entry": [[468, 2, 1, "", "static_quant_entry"]], "neural_compressor.tensorflow.quantization.autotune": [[469, 2, 1, "", "autotune"]], "neural_compressor.tensorflow.quantization.config": [[470, 1, 1, "", "SmoothQuantConfig"], [470, 1, 1, "", "StaticQuantConfig"], [470, 2, 1, "", "get_default_sq_config"], [470, 2, 1, "", "get_default_static_quant_config"]], "neural_compressor.tensorflow.quantization.quantize": [[472, 2, 1, "", "quantize_model"], [472, 2, 1, "", "quantize_model_with_single_config"]], "neural_compressor.tensorflow.quantization.utils": [[473, 0, 0, "-", "graph_converter"], [474, 0, 0, "-", "graph_converter_without_calib"], [512, 0, 0, "-", "graph_rewriter"], [530, 0, 0, "-", "graph_util"], [532, 0, 0, "-", "quantize_graph"], [559, 0, 0, "-", "quantize_graph_common"], [562, 0, 0, "-", "transform_graph"], [565, 0, 0, "-", "utility"]], "neural_compressor.tensorflow.quantization.utils.graph_converter": [[473, 1, 1, "", "GraphConverter"]], "neural_compressor.tensorflow.quantization.utils.graph_converter_without_calib": [[474, 1, 1, "", "GraphConverterWithoutCalib"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter": [[477, 0, 0, "-", "bf16"], [501, 0, 0, "-", "generic"], [511, 0, 0, "-", "graph_base"], [520, 0, 0, "-", "int8"], [526, 0, 0, "-", "qdq"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16": [[475, 0, 0, "-", "bf16_convert"], [476, 0, 0, "-", "dequantize_cast_optimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.bf16_convert": [[475, 1, 1, "", "BF16Convert"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.dequantize_cast_optimizer": [[476, 1, 1, "", "DequantizeCastOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic": [[478, 0, 0, "-", "convert_add_to_biasadd"], [479, 0, 0, "-", "convert_layout"], [480, 0, 0, "-", "convert_leakyrelu"], [481, 0, 0, "-", "convert_nan_to_random"], [482, 0, 0, "-", "convert_placeholder_to_const"], [483, 0, 0, "-", "dilated_contraction"], [484, 0, 0, "-", "dummy_biasadd"], [485, 0, 0, "-", "expanddims_optimizer"], [486, 0, 0, "-", "fetch_weight_from_reshape"], [487, 0, 0, "-", "fold_batch_norm"], [488, 0, 0, "-", "fold_constant"], [489, 0, 0, "-", "fuse_biasadd_add"], [490, 0, 0, "-", "fuse_column_wise_mul"], [491, 0, 0, "-", "fuse_conv_with_math"], [492, 0, 0, "-", "fuse_decomposed_bn"], [493, 0, 0, "-", "fuse_decomposed_in"], [494, 0, 0, "-", "fuse_gelu"], [495, 0, 0, "-", "fuse_layer_norm"], [496, 0, 0, "-", "fuse_pad_with_conv"], [497, 0, 0, "-", "fuse_pad_with_fp32_conv"], [498, 0, 0, "-", "fuse_reshape_transpose"], [499, 0, 0, "-", "graph_cse_optimizer"], [500, 0, 0, "-", "grappler_pass"], [502, 0, 0, "-", "insert_print_node"], [503, 0, 0, "-", "move_squeeze_after_relu"], [504, 0, 0, "-", "pre_optimize"], [505, 0, 0, "-", "remove_training_nodes"], [506, 0, 0, "-", "rename_batch_norm"], [507, 0, 0, "-", "split_shared_input"], [508, 0, 0, "-", "strip_equivalent_nodes"], [509, 0, 0, "-", "strip_unused_nodes"], [510, 0, 0, "-", "switch_optimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd": [[478, 1, 1, "", "ConvertAddToBiasAddOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout": [[479, 1, 1, "", "ConvertLayoutOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu": [[480, 1, 1, "", "ConvertLeakyReluOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random": [[481, 1, 1, "", "ConvertNanToRandom"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const": [[482, 1, 1, "", "ConvertPlaceholderToConst"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction": [[483, 1, 1, "", "DilatedContraction"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd": [[484, 1, 1, "", "InjectDummyBiasAddOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer": [[485, 1, 1, "", "ExpandDimsOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape": [[486, 1, 1, "", "FetchWeightFromReshapeOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm": [[487, 1, 1, "", "FoldBatchNormNodesOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant": [[488, 1, 1, "", "GraphFoldConstantOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add": [[489, 1, 1, "", "FuseBiasAddAndAddOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul": [[490, 1, 1, "", "FuseColumnWiseMulOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math": [[491, 1, 1, "", "FuseConvWithMathOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn": [[492, 1, 1, "", "FuseDecomposedBNOptimizer"], [492, 2, 1, "", "bypass_reshape"], [492, 2, 1, "", "get_const_dim_count"], [492, 2, 1, "", "node_from_map"], [492, 2, 1, "", "node_name_from_input"], [492, 2, 1, "", "valid_reshape_inputs"], [492, 2, 1, "", "values_from_const"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in": [[493, 1, 1, "", "FuseDecomposedINOptimizer"], [493, 2, 1, "", "bypass_reshape"], [493, 2, 1, "", "get_const_dim_count"], [493, 2, 1, "", "node_from_map"], [493, 2, 1, "", "node_name_from_input"], [493, 2, 1, "", "valid_reshape_inputs"], [493, 2, 1, "", "values_from_const"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu": [[494, 1, 1, "", "FuseGeluOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm": [[495, 1, 1, "", "FuseLayerNormOptimizer"], [495, 2, 1, "", "node_from_map"], [495, 2, 1, "", "node_name_from_input"], [495, 2, 1, "", "values_from_const"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv": [[496, 1, 1, "", "FusePadWithConv2DOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[497, 1, 1, "", "FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose": [[498, 1, 1, "", "FuseTransposeReshapeOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer": [[499, 1, 1, "", "GraphCseOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass": [[500, 1, 1, "", "GrapplerOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node": [[502, 1, 1, "", "InsertPrintMinMaxNode"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu": [[503, 1, 1, "", "MoveSqueezeAfterReluOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize": [[504, 1, 1, "", "PreOptimization"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes": [[505, 1, 1, "", "RemoveTrainingNodesOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm": [[506, 1, 1, "", "RenameBatchNormOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input": [[507, 1, 1, "", "SplitSharedInputOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes": [[508, 1, 1, "", "StripEquivalentNodesOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes": [[509, 1, 1, "", "StripUnusedNodesOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer": [[510, 1, 1, "", "SwitchOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base": [[511, 1, 1, "", "GraphRewriterBase"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8": [[513, 0, 0, "-", "freeze_fake_quant"], [514, 0, 0, "-", "freeze_value"], [515, 0, 0, "-", "freeze_value_without_calib"], [516, 0, 0, "-", "fuse_conv_redundant_dequantize"], [517, 0, 0, "-", "fuse_conv_requantize"], [518, 0, 0, "-", "fuse_matmul_redundant_dequantize"], [519, 0, 0, "-", "fuse_matmul_requantize"], [521, 0, 0, "-", "meta_op_optimizer"], [522, 0, 0, "-", "post_hostconst_converter"], [523, 0, 0, "-", "post_quantized_op_cse"], [524, 0, 0, "-", "rnn_convert"], [525, 0, 0, "-", "scale_propagation"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_fake_quant": [[513, 1, 1, "", "FreezeFakeQuantOpOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value": [[514, 1, 1, "", "FreezeValueTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value_without_calib": [[515, 1, 1, "", "FreezeValueWithoutCalibTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[516, 1, 1, "", "FuseConvRedundantDequantizeTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_requantize": [[517, 1, 1, "", "FuseConvRequantizeTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[518, 1, 1, "", "FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize": [[519, 1, 1, "", "FuseMatMulRequantizeDequantizeNewAPITransformer"], [519, 1, 1, "", "FuseMatMulRequantizeDequantizeTransformer"], [519, 1, 1, "", "FuseMatMulRequantizeNewAPITransformer"], [519, 1, 1, "", "FuseMatMulRequantizeTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.meta_op_optimizer": [[521, 1, 1, "", "MetaInfoChangingMemOpOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_hostconst_converter": [[522, 1, 1, "", "PostHostConstConverter"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_quantized_op_cse": [[523, 1, 1, "", "PostCseOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.rnn_convert": [[524, 1, 1, "", "QuantizedRNNConverter"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.scale_propagation": [[525, 1, 1, "", "ScaleProPagationTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq": [[527, 0, 0, "-", "insert_qdq_pattern"], [528, 0, 0, "-", "merge_duplicated_qdq"], [529, 0, 0, "-", "share_qdq_y_pattern"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.insert_qdq_pattern": [[527, 1, 1, "", "GenerateGraphWithQDQPattern"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.merge_duplicated_qdq": [[528, 1, 1, "", "MergeDuplicatedQDQOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.share_qdq_y_pattern": [[529, 1, 1, "", "ShareQDQForItexYPatternOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_util": [[530, 1, 1, "", "GraphAnalyzer"], [530, 1, 1, "", "GraphRewriterHelper"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph": [[534, 0, 0, "-", "qat"], [550, 0, 0, "-", "qdq"], [552, 0, 0, "-", "quantize_graph_base"], [553, 0, 0, "-", "quantize_graph_bn"], [554, 0, 0, "-", "quantize_graph_concatv2"], [555, 0, 0, "-", "quantize_graph_conv"], [556, 0, 0, "-", "quantize_graph_for_intel_cpu"], [557, 0, 0, "-", "quantize_graph_matmul"], [558, 0, 0, "-", "quantize_graph_pooling"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat": [[533, 0, 0, "-", "fake_quantize"], [535, 0, 0, "-", "quantize_config"], [536, 0, 0, "-", "quantize_helper"], [537, 0, 0, "-", "quantize_layers"], [542, 0, 0, "-", "quantize_wrapper"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.fake_quantize": [[533, 1, 1, "", "FakeQuantize"], [533, 1, 1, "", "FakeQuantizeBase"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_config": [[535, 1, 1, "", "QuantizeConfig"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_helper": [[536, 2, 1, "", "init_quantize_config"], [536, 2, 1, "", "qat_clone_function"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers": [[538, 0, 0, "-", "optimize_layer"], [539, 0, 0, "-", "quantize_layer_add"], [540, 0, 0, "-", "quantize_layer_base"], [541, 0, 0, "-", "quantize_layer_bn"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.optimize_layer": [[538, 2, 1, "", "config_quantizable_layers"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[539, 1, 1, "", "QuantizeLayerAdd"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[540, 1, 1, "", "QuantizeLayerBase"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[541, 1, 1, "", "QuantizeLayerBatchNormalization"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_wrapper": [[542, 1, 1, "", "QuantizeWrapper"], [542, 1, 1, "", "QuantizeWrapperBase"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq": [[543, 0, 0, "-", "fuse_qdq_bn"], [544, 0, 0, "-", "fuse_qdq_concatv2"], [545, 0, 0, "-", "fuse_qdq_conv"], [546, 0, 0, "-", "fuse_qdq_deconv"], [547, 0, 0, "-", "fuse_qdq_in"], [548, 0, 0, "-", "fuse_qdq_matmul"], [549, 0, 0, "-", "fuse_qdq_pooling"], [551, 0, 0, "-", "optimize_qdq"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_bn": [[543, 1, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_concatv2": [[544, 1, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_conv": [[545, 1, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_deconv": [[546, 1, 1, "", "FuseNodeStartWithDeconv2d"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_in": [[547, 1, 1, "", "FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_matmul": [[548, 1, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_pooling": [[549, 1, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.optimize_qdq": [[551, 1, 1, "", "OptimizeQDQGraph"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base": [[552, 1, 1, "", "QuantizeGraphBase"], [552, 1, 1, "", "QuantizeNodeBase"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_bn": [[553, 1, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_concatv2": [[554, 1, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_conv": [[555, 1, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_for_intel_cpu": [[556, 1, 1, "", "QuantizeGraphForIntel"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_matmul": [[557, 1, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_pooling": [[558, 1, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph_common": [[559, 1, 1, "", "QuantizeGraphHelper"]], "neural_compressor.tensorflow.quantization.utils.transform_graph": [[560, 0, 0, "-", "bias_correction"], [561, 0, 0, "-", "graph_transform_base"], [563, 0, 0, "-", "insert_logging"], [564, 0, 0, "-", "rerange_quantized_concat"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.bias_correction": [[560, 1, 1, "", "BiasCorrection"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.graph_transform_base": [[561, 1, 1, "", "GraphTransformBase"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.insert_logging": [[563, 1, 1, "", "InsertLogging"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.rerange_quantized_concat": [[564, 1, 1, "", "RerangeQuantizedConcat"]], "neural_compressor.tensorflow.quantization.utils.utility": [[565, 2, 1, "", "apply_inlining"], [565, 2, 1, "", "collate_tf_preds"], [565, 2, 1, "", "construct_function_from_graph_def"], [565, 2, 1, "", "fix_ref_type_of_graph_def"], [565, 2, 1, "", "generate_feed_dict"], [565, 2, 1, "", "get_estimator_graph"], [565, 2, 1, "", "get_graph_def"], [565, 2, 1, "", "get_input_output_node_names"], [565, 2, 1, "", "get_model_input_shape"], [565, 2, 1, "", "get_tensor_by_name"], [565, 2, 1, "", "get_tensor_val_from_graph_node"], [565, 2, 1, "", "get_weight_from_input_tensor"], [565, 2, 1, "", "int8_node_name_reverse"], [565, 2, 1, "", "is_ckpt_format"], [565, 2, 1, "", "is_saved_model_format"], [565, 2, 1, "", "iterator_sess_run"], [565, 2, 1, "", "parse_saved_model"], [565, 2, 1, "", "read_graph"], [565, 2, 1, "", "reconstruct_saved_model"], [565, 2, 1, "", "strip_equivalent_nodes"], [565, 2, 1, "", "strip_unused_nodes"], [565, 2, 1, "", "write_graph"]], "neural_compressor.tensorflow.utils": [[566, 0, 0, "-", "constants"], [567, 0, 0, "-", "data"], [569, 0, 0, "-", "model"], [570, 0, 0, "-", "model_wrappers"], [571, 0, 0, "-", "nets_factory"], [572, 0, 0, "-", "utility"]], "neural_compressor.tensorflow.utils.data": [[567, 1, 1, "", "BaseDataLoader"], [567, 1, 1, "", "BatchSampler"], [567, 1, 1, "", "DummyDataset"], [567, 1, 1, "", "DummyDatasetV2"], [567, 1, 1, "", "IndexFetcher"], [567, 1, 1, "", "IterableFetcher"], [567, 1, 1, "", "IterableSampler"], [567, 1, 1, "", "SequentialSampler"], [567, 2, 1, "", "default_collate"]], "neural_compressor.tensorflow.utils.model": [[569, 1, 1, "", "Model"]], "neural_compressor.tensorflow.utils.model_wrappers": [[570, 1, 1, "", "BaseModel"], [570, 1, 1, "", "KerasModel"], [570, 1, 1, "", "TensorflowBaseModel"], [570, 1, 1, "", "TensorflowCheckpointModel"], [570, 1, 1, "", "TensorflowLLMModel"], [570, 1, 1, "", "TensorflowModel"], [570, 1, 1, "", "TensorflowQATModel"], [570, 1, 1, "", "TensorflowSavedModelModel"], [570, 2, 1, "", "checkpoint_session"], [570, 2, 1, "", "estimator_session"], [570, 2, 1, "", "frozen_pb_session"], [570, 2, 1, "", "get_model_type"], [570, 2, 1, "", "graph_def_session"], [570, 2, 1, "", "graph_session"], [570, 2, 1, "", "keras_session"], [570, 2, 1, "", "load_saved_model"], [570, 2, 1, "", "saved_model_session"], [570, 2, 1, "", "slim_session"], [570, 2, 1, "", "try_loading_keras"], [570, 2, 1, "", "validate_and_inference_input_output"], [570, 2, 1, "", "validate_graph_node"]], "neural_compressor.tensorflow.utils.nets_factory": [[571, 1, 1, "", "TFSlimNetsFactory"]], "neural_compressor.tensorflow.utils.utility": [[572, 1, 1, "", "CaptureOutputToFile"], [572, 1, 1, "", "CpuInfo"], [572, 2, 1, "", "Dequantize"], [572, 1, 1, "", "LazyImport"], [572, 1, 1, "", "Statistics"], [572, 2, 1, "", "combine_histogram"], [572, 2, 1, "", "deep_get"], [572, 2, 1, "", "dequantize_weight"], [572, 2, 1, "", "disable_random"], [572, 2, 1, "", "dump_data_to_local"], [572, 2, 1, "", "dump_elapsed_time"], [572, 2, 1, "", "get_all_fp32_data"], [572, 2, 1, "", "get_tensor_histogram"], [572, 2, 1, "", "itex_installed"], [572, 2, 1, "", "load_data_from_pkl"], [572, 2, 1, "", "register_algo"], [572, 2, 1, "", "singleton"], [572, 2, 1, "", "valid_keras_format"], [572, 2, 1, "", "version1_eq_version2"], [572, 2, 1, "", "version1_gt_version2"], [572, 2, 1, "", "version1_gte_version2"], [572, 2, 1, "", "version1_lt_version2"], [572, 2, 1, "", "version1_lte_version2"]], "neural_compressor.torch": [[581, 0, 0, "-", "algorithms"], [615, 0, 0, "-", "amp"], [620, 0, 0, "-", "quantization"], [626, 0, 0, "-", "utils"]], "neural_compressor.torch.algorithms": [[573, 0, 0, "-", "base_algorithm"], [575, 0, 0, "-", "habana_fp8"], [582, 0, 0, "-", "layer_wise"], [587, 0, 0, "-", "pt2e_quant"], [588, 0, 0, "-", "smooth_quant"], [592, 0, 0, "-", "static_quant"], [607, 0, 0, "-", "weight_only"]], "neural_compressor.torch.algorithms.base_algorithm": [[573, 1, 1, "", "Quantizer"]], "neural_compressor.torch.algorithms.habana_fp8": [[574, 0, 0, "-", "fp8_quant"], [576, 0, 0, "-", "modules"], [577, 0, 0, "-", "observer"], [578, 0, 0, "-", "save_load"], [579, 0, 0, "-", "scale"], [580, 0, 0, "-", "tensor"]], "neural_compressor.torch.algorithms.layer_wise": [[583, 0, 0, "-", "load"], [584, 0, 0, "-", "modified_pickle"], [585, 0, 0, "-", "utils"]], "neural_compressor.torch.algorithms.layer_wise.load": [[583, 2, 1, "", "load"]], "neural_compressor.torch.algorithms.layer_wise.modified_pickle": [[584, 3, 1, "", "PickleError"], [584, 3, 1, "", "PicklingError"], [584, 3, 1, "", "UnpicklingError"]], "neural_compressor.torch.algorithms.layer_wise.utils": [[585, 2, 1, "", "dowload_hf_model"], [585, 2, 1, "", "get_children"], [585, 2, 1, "", "get_module"], [585, 2, 1, "", "get_named_children"], [585, 2, 1, "", "get_super_module_by_name"], [585, 2, 1, "", "load_empty_model"], [585, 2, 1, "", "load_layer_wise_quantized_model"], [585, 2, 1, "", "load_tensor"], [585, 2, 1, "", "load_tensor_from_shard"], [585, 2, 1, "", "update_module"]], "neural_compressor.torch.algorithms.pt2e_quant": [[586, 0, 0, "-", "core"]], "neural_compressor.torch.algorithms.smooth_quant": [[589, 0, 0, "-", "save_load"], [590, 0, 0, "-", "smooth_quant"], [591, 0, 0, "-", "utility"]], "neural_compressor.torch.algorithms.smooth_quant.save_load": [[589, 2, 1, "", "recover_model_from_json"]], "neural_compressor.torch.algorithms.smooth_quant.smooth_quant": [[590, 2, 1, "", "smooth_quantize"]], "neural_compressor.torch.algorithms.smooth_quant.utility": [[591, 1, 1, "", "TorchSmoothQuant"], [591, 2, 1, "", "check_cfg_and_qconfig"], [591, 2, 1, "", "get_module"], [591, 2, 1, "", "register_autotune"], [591, 2, 1, "", "reshape_in_channel_to_last"], [591, 2, 1, "", "reshape_scale_as_input"], [591, 2, 1, "", "reshape_scale_as_weight"], [591, 2, 1, "", "set_module"], [591, 2, 1, "", "update_sq_scale"]], "neural_compressor.torch.algorithms.static_quant": [[593, 0, 0, "-", "save_load"], [594, 0, 0, "-", "static_quant"], [595, 0, 0, "-", "utility"]], "neural_compressor.torch.algorithms.static_quant.static_quant": [[594, 1, 1, "", "StaticQuantQuantizer"]], "neural_compressor.torch.algorithms.static_quant.utility": [[595, 1, 1, "", "Statistics"], [595, 1, 1, "", "TransformerBasedModelBlockPatternDetector"], [595, 2, 1, "", "check_cfg_and_qconfig"], [595, 2, 1, "", "dump_model_op_stats"], [595, 2, 1, "", "generate_activation_observer"], [595, 2, 1, "", "get_depth"], [595, 2, 1, "", "get_dict_at_depth"], [595, 2, 1, "", "get_element_under_depth"], [595, 2, 1, "", "get_quantizable_ops_from_cfgs"], [595, 2, 1, "", "get_quantizable_ops_recursively"], [595, 2, 1, "", "paser_cfgs"], [595, 2, 1, "", "simple_inference"]], "neural_compressor.torch.algorithms.weight_only": [[596, 0, 0, "-", "autoround"], [597, 0, 0, "-", "awq"], [598, 0, 0, "-", "gptq"], [602, 0, 0, "-", "hqq"], [608, 0, 0, "-", "modules"], [609, 0, 0, "-", "rtn"], [610, 0, 0, "-", "teq"], [611, 0, 0, "-", "utility"]], "neural_compressor.torch.algorithms.weight_only.autoround": [[596, 1, 1, "", "AutoRoundQuantizer"], [596, 2, 1, "", "get_autoround_default_run_fn"]], "neural_compressor.torch.algorithms.weight_only.awq": [[597, 1, 1, "", "AWQQuantizer"]], "neural_compressor.torch.algorithms.weight_only.gptq": [[598, 1, 1, "", "GPTQ"], [598, 1, 1, "", "GPTQuantizer"], [598, 1, 1, "", "RAWGPTQuantizer"], [598, 2, 1, "", "find_layers"], [598, 2, 1, "", "find_layers_name"], [598, 2, 1, "", "is_leaf"], [598, 2, 1, "", "log_quantizable_layers_per_transformer"], [598, 2, 1, "", "quantize"], [598, 2, 1, "", "trace_gptq_target_blocks"]], "neural_compressor.torch.algorithms.weight_only.hqq": [[599, 0, 0, "-", "bitpack"], [600, 0, 0, "-", "config"], [601, 0, 0, "-", "core"], [603, 0, 0, "-", "optimizer"], [604, 0, 0, "-", "qtensor"], [605, 0, 0, "-", "quantizer"], [606, 0, 0, "-", "utility"]], "neural_compressor.torch.algorithms.weight_only.hqq.config": [[600, 1, 1, "", "HQQModuleConfig"]], "neural_compressor.torch.algorithms.weight_only.hqq.quantizer": [[605, 1, 1, "", "HQQuantizer"]], "neural_compressor.torch.algorithms.weight_only.hqq.utility": [[606, 2, 1, "", "dump_elapsed_time"]], "neural_compressor.torch.algorithms.weight_only.modules": [[608, 1, 1, "", "FakeAffineTensorQuantFunction"], [608, 1, 1, "", "MulLinear"], [608, 1, 1, "", "TEQLinearFakeQuant"]], "neural_compressor.torch.algorithms.weight_only.rtn": [[609, 1, 1, "", "RTNQuantizer"]], "neural_compressor.torch.algorithms.weight_only.teq": [[610, 1, 1, "", "TEQuantizer"], [610, 1, 1, "", "TrainableEquivalentTransformation"]], "neural_compressor.torch.algorithms.weight_only.utility": [[611, 2, 1, "", "fetch_module"], [611, 2, 1, "", "get_absorb_layers"], [611, 2, 1, "", "get_block_prefix"], [611, 2, 1, "", "get_example_input"], [611, 2, 1, "", "get_module"], [611, 2, 1, "", "get_module_input_output"], [611, 2, 1, "", "qdq_weight_actor"], [611, 2, 1, "", "qdq_weight_asym"], [611, 2, 1, "", "qdq_weight_sym"], [611, 2, 1, "", "quant_tensor"], [611, 2, 1, "", "quant_weight_w_scale"], [611, 2, 1, "", "quantize_4bit"], [611, 2, 1, "", "recover_forward"], [611, 2, 1, "", "replace_forward"], [611, 2, 1, "", "search_clip"], [611, 2, 1, "", "set_module"]], "neural_compressor.torch.amp": [[612, 0, 0, "-", "autocast"], [614, 0, 0, "-", "fp8"]], "neural_compressor.torch.amp.autocast": [[612, 1, 1, "", "autocast"]], "neural_compressor.torch.amp.fp8": [[613, 0, 0, "-", "functions"]], "neural_compressor.torch.quantization": [[617, 0, 0, "-", "algorithm_entry"], [618, 0, 0, "-", "autotune"], [619, 0, 0, "-", "config"], [621, 0, 0, "-", "load_entry"], [622, 0, 0, "-", "quantize"]], "neural_compressor.torch.quantization.algorithm_entry": [[617, 2, 1, "", "rtn_entry"]], "neural_compressor.torch.quantization.autotune": [[618, 2, 1, "", "autotune"]], "neural_compressor.torch.quantization.config": [[619, 1, 1, "", "GPTQConfig"], [619, 1, 1, "", "HQQConfig"], [619, 1, 1, "", "RTNConfig"], [619, 2, 1, "", "get_default_gptq_config"], [619, 2, 1, "", "get_default_hqq_config"], [619, 2, 1, "", "get_default_rtn_config"]], "neural_compressor.torch.quantization.quantize": [[622, 2, 1, "", "convert"], [622, 2, 1, "", "prepare"], [622, 2, 1, "", "quantize"]], "neural_compressor.torch.utils": [[623, 0, 0, "-", "auto_accelerator"], [624, 0, 0, "-", "constants"], [625, 0, 0, "-", "environ"], [627, 0, 0, "-", "utility"]], "neural_compressor.torch.utils.auto_accelerator": [[623, 1, 1, "", "Auto_Accelerator"], [623, 1, 1, "", "CPU_Accelerator"], [623, 1, 1, "", "CUDA_Accelerator"], [623, 1, 1, "", "HPU_Accelerator"], [623, 1, 1, "", "XPU_Accelerator"], [623, 2, 1, "", "register_accelerator"]], "neural_compressor.torch.utils.utility": [[627, 1, 1, "", "Mode"], [627, 2, 1, "", "fetch_module"], [627, 2, 1, "", "register_algo"], [627, 2, 1, "", "set_module"]], "neural_compressor.training": [[628, 1, 1, "", "CallBacks"], [628, 1, 1, "", "CompressionManager"], [628, 2, 1, "", "fit"], [628, 2, 1, "", "prepare_compression"]], "neural_compressor.utils": [[629, 0, 0, "-", "collect_layer_histogram"], [630, 0, 0, "-", "constant"], [631, 0, 0, "-", "create_obj_from_config"], [633, 0, 0, "-", "kl_divergence"], [634, 0, 0, "-", "load_huggingface"], [635, 0, 0, "-", "logger"], [636, 0, 0, "-", "neural_insights_utils"], [637, 0, 0, "-", "options"], [638, 0, 0, "-", "pytorch"], [639, 0, 0, "-", "utility"], [640, 0, 0, "-", "weights_details"]], "neural_compressor.utils.collect_layer_histogram": [[629, 1, 1, "", "LayerHistogramCollector"]], "neural_compressor.utils.create_obj_from_config": [[631, 2, 1, "", "create_dataloader"], [631, 2, 1, "", "create_dataset"], [631, 2, 1, "", "create_eval_func"], [631, 2, 1, "", "create_train_func"], [631, 2, 1, "", "get_algorithm"], [631, 2, 1, "", "get_func_from_config"], [631, 2, 1, "", "get_metrics"], [631, 2, 1, "", "get_postprocess"], [631, 2, 1, "", "get_preprocess"]], "neural_compressor.utils.kl_divergence": [[633, 1, 1, "", "KL_Divergence"]], "neural_compressor.utils.load_huggingface": [[634, 1, 1, "", "OptimizedModel"], [634, 2, 1, "", "export_compressed_model"], [634, 2, 1, "", "save_for_huggingface_upstream"]], "neural_compressor.utils.logger": [[635, 1, 1, "", "Logger"], [635, 2, 1, "", "debug"], [635, 2, 1, "", "error"], [635, 2, 1, "", "fatal"], [635, 2, 1, "", "info"], [635, 2, 1, "", "log"], [635, 2, 1, "", "warn"], [635, 2, 1, "", "warning"]], "neural_compressor.utils.neural_insights_utils": [[636, 2, 1, "", "get_model_path"], [636, 2, 1, "", "register_neural_insights_workload"], [636, 2, 1, "", "update_neural_insights_workload"], [636, 2, 1, "", "update_neural_insights_workload_accuracy_data"]], "neural_compressor.utils.options": [[637, 1, 1, "", "onnxrt"]], "neural_compressor.utils.pytorch": [[638, 2, 1, "", "is_int8_model"], [638, 2, 1, "", "load"], [638, 2, 1, "", "load_weight_only"], [638, 2, 1, "", "recover_model_from_json"]], "neural_compressor.utils.utility": [[639, 1, 1, "", "CaptureOutputToFile"], [639, 1, 1, "", "CpuInfo"], [639, 2, 1, "", "Dequantize"], [639, 1, 1, "", "DotDict"], [639, 1, 1, "", "GLOBAL_STATE"], [639, 1, 1, "", "LazyImport"], [639, 1, 1, "", "MODE"], [639, 1, 1, "", "OpEntry"], [639, 1, 1, "", "Statistics"], [639, 2, 1, "", "alias_param"], [639, 2, 1, "", "calculate_mse"], [639, 2, 1, "", "check_key_exist"], [639, 2, 1, "", "combine_histogram"], [639, 2, 1, "", "compare_objects"], [639, 2, 1, "", "compute_sparsity"], [639, 2, 1, "", "dequantize_weight"], [639, 2, 1, "", "dump_class_attrs"], [639, 2, 1, "", "dump_data_to_local"], [639, 2, 1, "", "dump_elapsed_time"], [639, 2, 1, "", "dump_table"], [639, 2, 1, "", "dump_table_to_csv"], [639, 2, 1, "", "equal_dicts"], [639, 2, 1, "", "fault_tolerant_file"], [639, 2, 1, "", "get_all_fp32_data"], [639, 2, 1, "", "get_number_of_sockets"], [639, 2, 1, "", "get_op_list"], [639, 2, 1, "", "get_size"], [639, 2, 1, "", "get_tensor_histogram"], [639, 2, 1, "", "get_tensors_info"], [639, 2, 1, "", "get_tuning_history"], [639, 2, 1, "", "get_weights_details"], [639, 2, 1, "", "load_data_from_pkl"], [639, 2, 1, "", "mse_metric_gap"], [639, 2, 1, "", "print_op_list"], [639, 2, 1, "", "print_table"], [639, 2, 1, "", "recover"], [639, 2, 1, "", "set_random_seed"], [639, 2, 1, "", "set_resume_from"], [639, 2, 1, "", "set_tensorboard"], [639, 2, 1, "", "set_workspace"], [639, 2, 1, "", "show_memory_info"], [639, 2, 1, "", "singleton"], [639, 2, 1, "", "str2array"], [639, 2, 1, "", "time_limit"], [639, 2, 1, "", "version1_eq_version2"], [639, 2, 1, "", "version1_gt_version2"], [639, 2, 1, "", "version1_gte_version2"], [639, 2, 1, "", "version1_lt_version2"], [639, 2, 1, "", "version1_lte_version2"]], "neural_compressor.utils.weights_details": [[640, 1, 1, "", "WeightsDetails"], [640, 1, 1, "", "WeightsStatistics"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:function", "3": "py:exception", "4": "py:attribute", "5": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "function", "Python function"], "3": ["py", "exception", "Python exception"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "data", "Python data"]}, "titleterms": {"block_mask": [0, 212], "neural_compressor": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641], "adaptor": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 649, 650, 652], "modul": [1, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 113, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 150, 151, 152, 153, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 182, 185, 186, 187, 188, 189, 191, 192, 195, 196, 198, 199, 201, 203, 204, 205, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 231, 232, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 259, 260, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 278, 279, 280, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 302, 304, 305, 306, 308, 309, 310, 311, 313, 314, 316, 317, 318, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 332, 333, 334, 335, 338, 339, 340, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 361, 362, 363, 364, 366, 367, 369, 370, 371, 373, 374, 375, 377, 378, 379, 380, 381, 382, 383, 384, 386, 388, 389, 391, 392, 394, 395, 397, 398, 399, 400, 404, 405, 407, 409, 411, 412, 413, 414, 416, 417, 419, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 437, 438, 439, 440, 443, 444, 445, 446, 447, 450, 451, 453, 455, 456, 466, 468, 469, 470, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 521, 522, 523, 524, 525, 527, 528, 529, 530, 533, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 564, 565, 567, 569, 570, 571, 572, 573, 576, 583, 584, 585, 589, 590, 591, 594, 595, 596, 597, 598, 599, 600, 601, 604, 605, 606, 608, 609, 610, 611, 612, 617, 618, 619, 622, 623, 627, 628, 629, 631, 633, 634, 635, 636, 637, 638, 639, 640], "content": [1, 2, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 113, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 150, 151, 152, 153, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 185, 186, 187, 188, 189, 191, 192, 195, 196, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 231, 232, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 361, 362, 363, 364, 366, 367, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 394, 395, 396, 397, 398, 399, 400, 401, 403, 404, 405, 407, 409, 411, 412, 413, 414, 416, 417, 419, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 443, 444, 445, 446, 447, 450, 451, 453, 455, 456, 466, 468, 469, 470, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 521, 522, 523, 524, 525, 527, 528, 529, 530, 533, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 564, 565, 567, 569, 570, 571, 572, 573, 583, 584, 585, 589, 590, 591, 594, 595, 596, 597, 598, 599, 600, 601, 604, 605, 606, 608, 609, 610, 611, 612, 617, 618, 619, 622, 623, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 648, 717], "class": [1, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 113, 115, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 150, 151, 152, 153, 157, 161, 162, 164, 170, 173, 174, 175, 176, 177, 179, 180, 181, 182, 185, 187, 188, 189, 191, 195, 196, 198, 203, 204, 205, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 227, 228, 229, 231, 232, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 278, 279, 280, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 311, 312, 313, 316, 319, 320, 321, 322, 323, 324, 326, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 361, 362, 363, 364, 366, 369, 372, 373, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 388, 389, 390, 396, 399, 400, 401, 403, 404, 407, 409, 411, 412, 413, 414, 416, 417, 419, 421, 423, 424, 426, 429, 430, 431, 432, 433, 434, 435, 437, 438, 439, 440, 443, 444, 445, 446, 447, 450, 451, 453, 455, 456, 466, 470, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 521, 522, 523, 524, 525, 527, 528, 529, 530, 533, 535, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 564, 567, 569, 570, 571, 572, 573, 591, 594, 595, 596, 597, 598, 599, 600, 601, 604, 605, 608, 609, 610, 611, 612, 619, 623, 627, 628, 629, 632, 633, 634, 635, 637, 639, 640, 649, 717], "function": [1, 13, 16, 34, 42, 43, 44, 45, 67, 68, 70, 104, 105, 116, 118, 148, 151, 152, 153, 158, 159, 160, 163, 165, 171, 172, 173, 175, 178, 179, 180, 181, 186, 187, 189, 191, 192, 195, 196, 198, 199, 200, 201, 203, 205, 206, 210, 213, 219, 220, 221, 222, 223, 225, 226, 229, 238, 239, 247, 249, 253, 256, 257, 258, 261, 263, 264, 265, 266, 268, 270, 271, 273, 282, 290, 292, 296, 299, 300, 301, 303, 304, 305, 308, 309, 310, 313, 314, 316, 317, 318, 319, 320, 327, 334, 338, 343, 344, 345, 347, 352, 358, 362, 364, 366, 367, 369, 370, 371, 372, 373, 374, 378, 382, 384, 385, 386, 387, 391, 392, 394, 395, 396, 397, 398, 400, 401, 405, 422, 427, 428, 432, 440, 444, 446, 447, 466, 468, 469, 470, 472, 492, 493, 495, 536, 538, 565, 567, 570, 572, 583, 585, 589, 590, 591, 595, 596, 598, 606, 611, 613, 617, 618, 619, 622, 623, 627, 628, 631, 632, 634, 635, 636, 638, 639, 675], "subpackag": [2, 17, 87, 111, 112, 114, 154, 197, 200, 233, 258, 276, 301, 312, 336, 354, 365, 436, 512, 531, 532, 534, 581], "submodul": [2, 12, 17, 29, 52, 76, 87, 95, 101, 106, 111, 112, 114, 117, 130, 145, 154, 155, 175, 184, 190, 193, 197, 200, 202, 206, 213, 224, 230, 234, 241, 253, 257, 261, 268, 277, 284, 296, 300, 303, 307, 312, 319, 325, 331, 337, 341, 354, 360, 365, 372, 376, 390, 403, 408, 410, 415, 418, 420, 425, 436, 442, 448, 452, 454, 477, 501, 512, 520, 526, 531, 532, 534, 537, 550, 562, 568, 582, 607, 632], "packag": [2, 29, 175, 181, 200, 206, 213, 241, 253, 257, 258, 261, 268, 284, 296, 300, 301, 303, 312, 319, 331, 336, 337, 354, 372, 376, 385, 387, 390, 396, 401, 403, 436, 632, 700, 702, 704, 705], "kera": [3, 455, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467], "keras_util": [4, 5, 6, 7, 8, 9, 10], "conv2d": [4, 459], "dens": [5, 460], "depthwise_conv2d": [6, 461], "pool2d": [8, 464], "quantiz": [9, 41, 157, 348, 397, 398, 399, 400, 401, 402, 428, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 605, 617, 618, 619, 620, 621, 622, 645, 648, 650, 651, 663, 667, 672, 674, 677, 680, 683, 685, 687, 688, 696, 707, 709, 710, 711, 712, 720, 721, 722, 728, 729, 730, 731, 732, 735, 741], "separable_conv2d": [10, 465], "mxnet": [11, 670, 686, 729, 737], "mxnet_util": [12, 13], "util": [13, 43, 148, 159, 165, 171, 183, 184, 185, 186, 187, 192, 223, 226, 359, 360, 361, 362, 363, 364, 395, 403, 404, 405, 422, 427, 441, 442, 443, 444, 445, 446, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 585, 591, 595, 606, 611, 623, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 654], "onnxrt": [14, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 670, 686, 737], "ox_util": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44], "calibr": [15, 16, 167, 388, 399, 450, 650, 667], "oper": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 650, 651], "activ": [18, 710], "argmax": 19, "attent": 20, "binary_op": 21, "concat": 22, "conv": 23, "direct_q8": 24, "embed_layernorm": 25, "gather": 26, "gavgpool": 27, "gemm": 28, "lstm": 30, "matmul": [31, 735], "maxpool": 32, "norm": 33, "op": [34, 677], "pad": 35, "pool": 36, "reduc": 37, "resiz": 38, "split": [39, 713], "unary_op": 40, "smooth_quant": [42, 170, 176, 588, 589, 590, 591], "weight_onli": [44, 172, 391, 392, 393, 394, 395, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611], "pytorch": [45, 638, 670, 675, 677, 686, 711, 729, 730, 731, 736, 737, 741], "queri": [46, 649, 715, 720, 721, 722], "tensorflow": [47, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 670, 675, 677, 686, 729, 731, 736, 737, 741], "tf_util": [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148], "graph_convert": [48, 473], "graph_converter_without_calib": [49, 474], "graph_rewrit": [50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529], "bf16": [50, 51, 52, 475, 476, 477, 688], "bf16_convert": [50, 151, 475], "dequantize_cast_optim": [51, 476], "gener": [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 650], "convert_add_to_biasadd": [53, 478], "convert_layout": [54, 479], "convert_leakyrelu": [55, 480], "convert_nan_to_random": [56, 481], "convert_placeholder_to_const": [57, 482], "dilated_contract": [58, 483], "dummy_biasadd": [59, 484], "expanddims_optim": [60, 485], "fetch_weight_from_reshap": [61, 486], "fold_batch_norm": [62, 487], "fold_const": [63, 488], "fuse_biasadd_add": [64, 489], "fuse_column_wise_mul": [65, 490], "fuse_conv_with_math": [66, 491], "fuse_decomposed_bn": [67, 492], "fuse_decomposed_in": [68, 493], "fuse_gelu": [69, 494], "fuse_layer_norm": [70, 495], "fuse_pad_with_conv": [71, 496], "fuse_pad_with_fp32_conv": [72, 497], "fuse_reshape_transpos": [73, 498], "graph_cse_optim": [74, 499], "grappler_pass": [75, 500], "insert_print_nod": [77, 502], "move_squeeze_after_relu": [78, 503], "pre_optim": [79, 504], "remove_training_nod": [80, 505], "rename_batch_norm": [81, 506], "split_shared_input": [82, 507], "strip_equivalent_nod": [83, 508], "strip_unused_nod": [84, 509], "switch_optim": [85, 510], "graph_bas": [86, 511], "int8": [88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 677, 741], "freeze_fake_qu": [88, 513], "freeze_valu": [89, 514], "freeze_value_without_calib": [90, 515], "fuse_conv_redundant_dequant": [91, 516], "fuse_conv_requant": [92, 517], "fuse_matmul_redundant_dequant": [93, 518], "fuse_matmul_requant": [94, 519], "meta_op_optim": [96, 521], "post_hostconst_convert": [97, 522], "post_quantized_op_cs": [98, 523], "rnn_convert": [99, 524], "scale_propag": [100, 525], "onnx": [101, 102, 103, 104, 105, 653, 683, 729, 730, 741], "onnx_graph": 102, "onnx_nod": 103, "onnx_schema": 104, "tf2onnx_util": 105, "qdq": [106, 107, 108, 109, 123, 124, 125, 126, 127, 128, 129, 130, 131, 526, 527, 528, 529, 543, 544, 545, 546, 547, 548, 549, 550, 551, 741], "insert_qdq_pattern": [107, 527], "merge_duplicated_qdq": [108, 528], "share_qdq_y_pattern": [109, 529], "graph_util": [110, 530], "quantize_graph": [112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558], "qat": [113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 741], "fake_quant": [113, 533], "quantize_config": [115, 535], "quantize_help": [116, 536], "quantize_lay": [117, 118, 119, 120, 121, 537, 538, 539, 540, 541], "optimize_lay": [118, 538], "quantize_layer_add": [119, 539], "quantize_layer_bas": [120, 540], "quantize_layer_bn": [121, 541], "quantize_wrapp": [122, 542], "fuse_qdq_bn": [123, 543], "fuse_qdq_concatv2": [124, 544], "fuse_qdq_conv": [125, 545], "fuse_qdq_deconv": [126, 546], "fuse_qdq_in": [127, 547], "fuse_qdq_matmul": [128, 548], "fuse_qdq_pool": [129, 549], "optimize_qdq": [131, 551], "quantize_graph_bas": [132, 552], "quantize_graph_bn": [133, 553], "quantize_graph_concatv2": [134, 554], "quantize_graph_conv": [135, 555], "quantize_graph_for_intel_cpu": [136, 556], "quantize_graph_matmul": [137, 557], "quantize_graph_pool": [138, 558], "quantize_graph_common": [139, 559], "smooth_quant_calibr": 140, "smooth_quant_scal": 141, "tf2onnx_convert": 142, "transform_graph": [143, 144, 145, 146, 147, 560, 561, 562, 563, 564], "bias_correct": [143, 560], "graph_transform_bas": [144, 561], "insert_log": [146, 563], "rerange_quantized_concat": [147, 564], "torch_util": [149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 273], "auto_round": 149, "awq": [150, 391, 597], "gptq": [152, 392, 598], "hawq_metr": 153, "layer_wise_qu": [155, 156, 157, 158, 159], "modified_pickl": [156, 584], "torch_load": 158, "mixed_precis": [160, 321], "model_wrapp": [161, 570], "pattern_detector": 162, "symbolic_trac": 163, "teq": [164, 610], "waq": [166, 167, 168, 169, 170, 171], "auto_alpha": 166, "graph_trac": 168, "algorithm": [173, 174, 175, 176, 177, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 449, 450, 451, 452, 453, 454, 455, 456, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 667, 732, 735, 738], "fast_bias_correct": 174, "weight_correct": 177, "benchmark": [178, 265, 657, 666, 672, 687, 728], "common": [179, 180, 181, 182, 183, 184, 185, 186, 187, 266, 267, 268, 269, 270, 271, 272, 273, 645, 678], "base_config": 179, "attribut": [179, 180, 181, 185, 241, 249, 258, 292, 301, 312, 336, 376, 400, 403, 405, 447, 600, 611, 632, 643], "base_tun": 180, "tuning_param": 182, "constant": [183, 359, 441, 566, 624, 630], "logger": [185, 342, 635, 668], "save_load": [186, 578, 589, 593], "compress": [188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 275, 658, 732], "callback": 188, "distil": [189, 190, 191, 192, 306, 673, 674, 687, 728, 741], "criterion": [189, 266], "optim": [191, 271, 603, 697, 707, 717, 720, 721, 722, 725, 726, 739], "hpo": [193, 194, 195, 196], "sa_optim": 194, "search_algorithm": [195, 328], "search_spac": 196, "pruner": [198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 334, 345], "criteria": [198, 644, 726, 738], "dsnot": 199, "model_slim": [201, 202, 203, 204], "auto_slim": 201, "pattern_analyz": 203, "weight_slim": 204, "pattern": [205, 206, 207, 208, 209, 337, 338, 339, 343, 726], "base": [205, 210, 683, 716, 739], "mha": [207, 214], "ninm": 208, "nxm": 209, "basic": [211, 351, 431, 646, 738], "pattern_lock": [215, 333], "progress": [216, 713], "retrain_fre": 217, "sparse_gpt": 218, "prune": [219, 225, 335, 346, 687, 726, 728, 741], "reg": 220, "schedul": [221, 347, 349, 726], "tf_criteria": 222, "wanda": [224, 225, 226, 227], "wrapper": 227, "conf": [228, 229, 230, 231], "config": [228, 232, 400, 466, 470, 600, 619, 659, 670, 724], "dotdict": 229, "pythonic_config": 231, "contrib": [233, 234, 235, 236, 276, 277, 278, 279], "strategi": [234, 235, 236, 277, 278, 279, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 664, 734, 738], "sigopt": [235, 278, 734, 738], "tpe": [236, 279, 738], "data": [237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 567, 650, 651, 672, 676, 711], "dataload": [237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 267, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 669, 670], "base_dataload": [237, 280], "default_dataload": [239, 282], "fetcher": [240, 283], "mxnet_dataload": [242, 285], "onnxrt_dataload": [243, 286], "pytorch_dataload": [244, 287], "sampler": [245, 288], "tensorflow_dataload": [246, 289], "dataset": [247, 248, 249, 250, 251, 252, 253, 254, 290, 291, 292, 293, 294, 295, 296, 297, 670, 672, 681, 712], "bert_dataset": [247, 290], "coco_dataset": [248, 291], "dummy_dataset": [250, 293], "dummy_dataset_v2": [251, 294], "imagenet_dataset": [252, 295], "style_transfer_dataset": [254, 297], "filter": [255, 256, 257, 298, 299, 300], "coco_filt": [255, 298], "transform": [259, 260, 261, 262, 263, 264, 302, 303, 304, 305, 681, 737], "coco_transform": 259, "imagenet_transform": [260, 302], "postprocess": [262, 272], "token": [263, 304], "experiment": [265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364], "metric": [269, 313, 314, 315, 316, 317, 318, 319, 320, 366, 367, 368, 369, 370, 371, 372, 373, 681, 686], "model": [270, 375, 376, 377, 378, 379, 380, 381, 382, 383, 569, 650, 661, 677, 680, 683, 685, 687, 689, 696, 710, 711, 712, 720, 721, 722, 726, 730, 732, 735, 741], "compon": 274, "export": [307, 308, 309, 310, 677, 732], "qlinear2qdq": 308, "tf2onnx": 309, "torch2onnx": 310, "graph_optim": 311, "bleu": [313, 366], "bleu_util": [314, 367], "coco_label_map": [315, 368], "coco_tool": [316, 369], "evaluate_squad": [317, 370], "f1": [318, 371], "model_convers": 322, "na": [323, 324, 325, 326, 327, 328, 646, 728], "basic_na": 323, "dyna": 324, "nas_util": 327, "pruner_legaci": [329, 330, 331, 332, 333, 334], "gradient_sensit": 329, "group_lasso": 330, "magnitud": 332, "pruning_recip": [336, 337, 338, 339], "tile_pattern": 339, "pruning_v2": 340, "pytorch_prun": [341, 342, 343, 344, 345, 346, 347], "prune_util": 344, "auto_mixed_precis": [350, 430], "bayesian": [352, 432, 738], "exhaust": [353, 434, 738], "mse": [355, 437, 738], "mse_v2": [356, 438, 738], "random": [357, 439, 738], "tuning_sampl": [361, 443], "tuning_spac": [362, 444], "tuning_struct": [363, 445], "mix_precis": 374, "base_model": 375, "keras_model": 377, "mxnet_model": 379, "nets_factori": [380, 571], "onnx_model": [381, 404], "tensorflow_model": 382, "torch_model": 383, "object": [384, 662, 720, 721, 722, 724], "layer_wis": [386, 387, 582, 583, 584, 585], "core": [386, 389, 451, 586, 601], "smoother": [388, 389, 390, 450, 451, 452, 453], "rtn": [394, 609], "algorithm_entri": [397, 468, 617], "autotun": [398, 469, 618], "profil": [406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 672], "parser": [407, 408, 409, 410, 411, 412, 413, 414, 415, 416], "factori": [407, 409, 414, 417, 419, 424], "onnx_pars": [409, 410, 411], "result": [413, 710, 712, 720, 721, 722], "tensorflow_pars": [414, 415, 416], "onnxrt_profil": [419, 420, 421, 422], "tensorflow_profil": [424, 425, 426, 427], "auto": [429, 701, 707, 731, 735, 738], "conserv": [433, 738], "hawq_v2": [435, 738], "templat": [447, 448, 644], "api_doc_exampl": 447, "scaler": 453, "static_qu": [454, 455, 456, 592, 593, 594, 595], "layer": [459, 460, 461, 462, 463, 464, 465, 673, 730, 735], "layer_initi": 463, "torch": [573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 654, 741], "base_algorithm": 573, "habana_fp8": [574, 575, 576, 577, 578, 579, 580], "fp8_quant": 574, "observ": 577, "scale": 579, "tensor": [580, 709, 735], "load": 583, "pt2e_quant": [586, 587], "autoround": 596, "hqq": [599, 600, 601, 602, 603, 604, 605, 606], "bitpack": 599, "qtensor": 604, "amp": [612, 613, 614, 615], "autocast": 612, "fp8": [613, 614], "load_entri": 621, "auto_acceler": 623, "environ": [625, 683, 693], "train": [628, 645, 665, 675, 687, 726, 729], "collect_layer_histogram": 629, "create_obj_from_config": 631, "kl_diverg": 633, "load_huggingfac": 634, "neural_insights_util": 636, "option": [637, 675, 695], "weights_detail": 640, "version": 641, "intel": [642, 648, 669, 672, 682, 683, 686, 687, 693, 701, 707, 742], "neural": [642, 645, 646, 648, 669, 672, 682, 683, 686, 687, 690, 694, 696, 701, 707, 709, 710, 711, 712, 714, 715, 716, 720, 721, 722, 726, 734, 739, 742], "compressor": [642, 645, 648, 669, 672, 682, 683, 686, 687, 701, 707, 734, 742], "document": [642, 648, 655, 742], "section": [642, 742], "contributor": [643, 644], "coven": [643, 644], "code": [643, 644, 646, 668, 687, 708, 713, 732, 739], "conduct": [643, 644], "our": [643, 735], "pledg": 643, "standard": 643, "respons": [643, 716], "scope": [643, 726], "enforc": 643, "contribut": [644, 700, 704], "guidelin": 644, "creat": [644, 713], "pull": 644, "request": [644, 688, 718], "step": [644, 709, 710, 711, 712], "checklist": 644, "accept": 644, "statu": [644, 715, 716], "check": 644, "overview": [644, 717, 739], "support": [644, 645, 646, 649, 651, 666, 667, 669, 670, 672, 673, 674, 675, 677, 679, 682, 683, 686, 688, 689, 691, 692, 696, 697, 724, 725, 726, 728, 729, 730, 732, 735, 736, 737, 740], "fx": 645, "introduct": [645, 646, 649, 650, 651, 666, 667, 669, 670, 672, 673, 674, 675, 677, 679, 682, 686, 688, 689, 707, 710, 711, 712, 724, 725, 726, 728, 729, 730, 732, 734, 735, 736, 737, 738, 740], "mode": [645, 741], "matrix": [645, 646, 649, 666, 667, 669, 670, 672, 673, 674, 675, 677, 679, 682, 686, 688, 689, 692, 724, 725, 726, 728, 729, 730, 732, 735, 736, 740], "get": [645, 646, 648, 649, 666, 669, 670, 672, 673, 674, 675, 679, 680, 686, 688, 690, 701, 708, 709, 713, 714, 715, 716, 724, 725, 726, 728, 729, 736, 740], "start": [645, 646, 648, 649, 666, 669, 670, 672, 673, 674, 675, 679, 680, 686, 688, 690, 691, 695, 701, 709, 713, 714, 715, 720, 721, 722, 724, 725, 726, 728, 729, 736, 740], "post": [645, 687, 716, 729], "static": [645, 648, 729], "dynam": [645, 646, 729], "awar": [645, 687, 726, 729], "exampl": [645, 646, 649, 655, 666, 669, 670, 672, 673, 674, 675, 676, 677, 686, 687, 688, 689, 692, 696, 709, 710, 711, 712, 714, 719, 720, 721, 722, 724, 725, 726, 729, 730, 732, 735, 736, 741], "note": [645, 733], "detail": 645, "problem": 645, "architectur": [646, 671, 682, 683], "search": [646, 707], "api": [646, 649, 650, 655, 656, 666, 669, 670, 673, 674, 675, 680, 681, 686, 688, 690, 694, 708, 709, 716, 722, 724, 725, 726, 728, 739], "usag": [646, 696, 707, 716, 735, 736, 738], "1": [646, 675, 678, 681, 687, 707, 714, 715, 727, 741], "python": [646, 669, 680, 686, 690, 694, 695, 702, 705, 709, 728, 739], "yaml": [646, 650, 670, 675, 679, 740], "2": [646, 675, 678, 681, 687, 707, 714, 715, 741], "onli": [646, 648, 732], "advanc": [646, 713, 739], "custom": [646, 669, 686, 720, 738], "secur": [647, 675], "polici": [647, 738], "report": 647, "vulner": 647, "what": [648, 690, 708, 714], "": [648, 683, 708, 714], "new": [648, 649, 651, 702, 705, 738], "instal": [648, 672, 683, 691, 693, 700, 701, 704, 709, 714, 715], "from": [648, 650, 683, 687, 709, 714, 715], "pypi": [648, 696, 709], "weight": [648, 710, 711, 712, 732], "llm": [648, 685], "non": 648, "select": [648, 701], "public": [648, 668, 727], "event": [648, 727], "addit": 648, "commun": 648, "work": [649, 714, 729], "flow": [649, 729], "background": [649, 668, 707], "ad": 649, "backend": [649, 729], "capabl": [649, 732], "implement": [649, 650], "onnxrtadaptor": 649, "how": [650, 651, 672, 710, 711, 712, 714], "add": [650, 715], "an": [650, 720, 721, 722], "list": [650, 676, 719, 737], "need": 650, "design": [650, 671, 717, 738], "framework": [650, 669, 670, 677, 679, 689, 728, 730, 732, 735], "query_fw_cap": 650, "accord": [650, 651], "tune_cfg": 650, "prepar": [650, 672, 710, 711, 712, 734], "fp32": [650, 677], "graph": 650, "run": [650, 672, 708, 710, 711, 712, 713], "sampl": [650, 680], "iter": 650, "calcul": 650, "rang": 650, "type": [651, 668, 726], "like": 651, "int4": 651, "few": 651, "line": 651, "chang": [651, 681, 706, 708, 733], "defin": [651, 675], "abil": 651, "specif": [651, 670], "invok": 651, "kernel": 651, "tune": [651, 729, 732, 735, 738], "configur": [651, 675, 679, 713, 728, 734, 740], "us": [651, 669, 686, 714, 715, 735], "summari": [651, 710], "runtim": [653, 683, 729, 730, 741], "mix": [660, 687, 688, 731], "precis": [660, 687, 688, 731], "refer": [667, 668, 726, 729, 732, 735], "inc": 668, "convent": 668, "rule": [668, 729], "import": 668, "string": 668, "annot": 668, "comment": 668, "todo": 668, "intern": 668, "interfac": 668, "folder": [668, 708], "structur": 668, "recommend": 668, "v": [668, 708], "set": [668, 672, 693, 707], "json": 668, "build": [669, 678, 686, 713, 714, 715], "file": [670, 679, 740], "user": [670, 675, 681, 728, 732, 739, 740], "workflow": [671, 717], "diagnosi": [672, 709], "featur": [672, 675, 679, 682, 696, 697, 701, 728, 729, 736, 740], "modifi": 672, "script": [672, 713], "see": 672, "do": [672, 690], "paramet": [672, 716], "descript": [672, 716, 718], "suggest": 672, "fallback": 672, "knowledg": [673, 741], "intermedi": 673, "self": 673, "distribut": [675, 696, 738], "infer": 675, "evalu": 675, "pure": 675, "horovodrun": 675, "execut": 675, "releas": [676, 702, 705, 733], "appendix": 677, "frequent": 678, "ask": 678, "question": 678, "issu": [678, 733], "3": [678, 691, 707], "4": [678, 698, 707, 727], "quick": [680, 695], "valid": [680, 683, 735, 741], "incompat": [681, 733], "between": 681, "v1": 681, "face": [681, 721, 722], "built": [681, 683, 686], "infrastructur": 682, "prerequisit": [683, 714, 715], "binari": 683, "sourc": [683, 709, 711, 712, 714, 715], "ai": 683, "kit": 683, "system": 683, "requir": [683, 700, 704, 710, 711, 712, 720], "hardwar": [683, 688, 741], "cpu": [683, 693, 741], "64": 683, "compat": 683, "processor": 683, "gpu": 683, "xe": 683, "multipl": [683, 724, 741], "vendor": 683, "through": [683, 735, 741], "softwar": [683, 688], "legal": 684, "inform": 684, "licens": 684, "citat": 684, "trademark": 684, "recip": [685, 729], "larg": [685, 726], "languag": [685, 726], "accuraci": [685, 688, 710, 712, 729, 738], "migrat": 687, "x": 687, "orchestr": [687, 725], "fp16": 688, "dure": [688, 731], "driven": 688, "coder": [690, 694, 696, 707, 739], "we": 690, "offer": 690, "jupyt": [690, 691, 702, 705], "lab": [690, 691], "extens": [690, 700, 701, 704, 707, 708, 717], "launcher": [690, 695], "contact": [690, 714], "aw": 691, "amazon": 691, "sagemak": 691, "For": 691, "studio": 691, "notebook": 691, "instanc": 691, "guid": [691, 739], "bigdl": 692, "nano": 692, "platform": [693, 734], "best": [693, 701], "perform": [693, 734], "mkl": 693, "openmp": 693, "jemalloc": 693, "numa": 693, "control": 693, "variabl": 693, "frequenc": 693, "govern": 693, "enabl": [694, 701, 707], "bench": 694, "superbench": 694, "argument": 695, "v0": 698, "highlight": 698, "other": 698, "changelog": [699, 703], "neural_compressor_ext_lab": [700, 702], "uninstal": [700, 704], "develop": [700, 704], "jupyterlab": 701, "Or": 701, "let": 701, "u": 701, "help": 701, "you": 701, "pre": 701, "requisit": 701, "make": [702, 705, 708, 713], "manual": [702, 705], "npm": [702, 705, 713], "autom": [702, 705], "publish": [702, 705], "conda": [702, 705], "forg": [702, 705], "neural_compressor_ext_lab_alibaba": [704, 705], "log": [706, 715, 716], "unreleas": 706, "vscode": 707, "open": [707, 712], "icon": 707, "5": 707, "welcom": 708, "your": 708, "setup": 708, "up": 708, "straight": 708, "awai": 708, "explor": 708, "test": [708, 713], "go": 708, "further": 708, "insight": [709, 710, 711, 712], "dump": [709, 711], "research": 709, "collabor": 709, "debug": [710, 712], "analyz": [710, 712, 713], "histogram": 712, "react": 713, "app": 713, "avail": 713, "eject": 713, "learn": [713, 714], "more": [713, 714], "bundl": 713, "size": 713, "web": 713, "deploy": [713, 726], "fail": 713, "minifi": 713, "solut": [714, 715, 716, 720, 721, 722], "why": 714, "doe": 714, "method": [714, 715], "pip": [714, 715], "end": [714, 720, 721, 722], "servic": [715, 717, 720, 721, 722], "submit": [715, 716, 720, 721, 722], "task": [715, 716, 718, 720, 721, 722], "stop": [715, 720, 721, 722], "inspect": 715, "manag": [715, 720, 721], "resourc": [715, 720, 721], "node": 715, "state": 715, "cluster": [715, 716], "remov": 715, "url": 716, "endpoint": 716, "task_id": 716, "websocket": 716, "screen": 716, "ping": 716, "download": [716, 720, 721], "doc": 717, "wip": 717, "oaa": 717, "definit": 717, "diagram": 717, "hug": [721, 722], "grpc": 722, "client": 723, "singl": 724, "One": 725, "shot": 725, "network": 726, "sparsiti": 726, "decai": 726, "regular": 726, "retrain": 726, "free": 726, "spars": 726, "hyperparamet": 726, "full": 727, "80": 727, "2024": 727, "2023": 727, "25": 727, "2022": 727, "35": 727, "2021": 727, "15": [727, 741], "2018": 727, "2020": 727, "style": 728, "access": 728, "fundament": [729, 735], "scheme": 729, "ipex": 729, "approach": 729, "With": 729, "without": 729, "specifi": 729, "devic": 729, "wise": 730, "lwq": 730, "turn": 731, "off": 731, "woq": [732, 741], "known": 733, "benefit": 734, "comparison": 734, "differ": 734, "smooth": 735, "quant": 735, "per": 735, "channel": 735, "limit": 735, "smoothquant": 735, "enhanc": 735, "alpha": 735, "engin": 735, "fix": 735, "determin": 735, "entir": 735, "each": 735, "block": 735, "tensorboard": 736, "space": 738, "exit": 738, "process": 738, "zero": 739, "topic": 739, "innov": 739, "product": 739, "0": 741, "ptq": 741, "17": 741}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"block_mask": [[0, "module-block_mask"]], "neural_compressor.adaptor.adaptor": [[1, "module-neural_compressor.adaptor.adaptor"]], "Module Contents": [[1, "module-contents"], [3, "module-contents"], [11, "module-contents"], [13, "module-contents"], [14, "module-contents"], [15, "module-contents"], [16, "module-contents"], [18, "module-contents"], [19, "module-contents"], [20, "module-contents"], [21, "module-contents"], [22, "module-contents"], [23, "module-contents"], [24, "module-contents"], [25, "module-contents"], [26, "module-contents"], [27, "module-contents"], [28, "module-contents"], [30, "module-contents"], [31, "module-contents"], [32, "module-contents"], [33, "module-contents"], [34, "module-contents"], [35, "module-contents"], [36, "module-contents"], [37, "module-contents"], [38, "module-contents"], [39, "module-contents"], [40, "module-contents"], [41, "module-contents"], [42, "module-contents"], [43, "module-contents"], [44, "module-contents"], [45, "module-contents"], [46, "module-contents"], [47, "module-contents"], [48, "module-contents"], [49, "module-contents"], [50, "module-contents"], [51, "module-contents"], [53, "module-contents"], [54, "module-contents"], [55, "module-contents"], [56, "module-contents"], [57, "module-contents"], [58, "module-contents"], [59, "module-contents"], [60, "module-contents"], [61, "module-contents"], [62, "module-contents"], [63, "module-contents"], [64, "module-contents"], [65, "module-contents"], [66, "module-contents"], [67, "module-contents"], [68, "module-contents"], [69, "module-contents"], [70, "module-contents"], [71, "module-contents"], [72, "module-contents"], [73, "module-contents"], [74, "module-contents"], [75, "module-contents"], [77, "module-contents"], [78, "module-contents"], [79, "module-contents"], [80, "module-contents"], [81, "module-contents"], [82, "module-contents"], [83, "module-contents"], [84, "module-contents"], [85, "module-contents"], [86, "module-contents"], [88, "module-contents"], [89, "module-contents"], [90, "module-contents"], [91, "module-contents"], [92, "module-contents"], [93, "module-contents"], [94, "module-contents"], [96, "module-contents"], [97, "module-contents"], [98, "module-contents"], [99, "module-contents"], [100, "module-contents"], [102, "module-contents"], [103, "module-contents"], [104, "module-contents"], [105, "module-contents"], [107, "module-contents"], [108, "module-contents"], [109, "module-contents"], [110, "module-contents"], [113, "module-contents"], [115, "module-contents"], [116, "module-contents"], [118, "module-contents"], [119, "module-contents"], [120, "module-contents"], [121, "module-contents"], [122, "module-contents"], [123, "module-contents"], [124, "module-contents"], [125, "module-contents"], [126, "module-contents"], [127, "module-contents"], [128, "module-contents"], [129, "module-contents"], [131, "module-contents"], [132, "module-contents"], [133, "module-contents"], [134, "module-contents"], [135, "module-contents"], [136, "module-contents"], [137, "module-contents"], [138, "module-contents"], [139, "module-contents"], [140, "module-contents"], [141, "module-contents"], [142, "module-contents"], [143, "module-contents"], [144, "module-contents"], [146, "module-contents"], [147, "module-contents"], [148, "module-contents"], [150, "module-contents"], [151, "module-contents"], [152, "module-contents"], [153, "module-contents"], [156, "module-contents"], [157, "module-contents"], [158, "module-contents"], [159, "module-contents"], [160, "module-contents"], [161, "module-contents"], [162, "module-contents"], [163, "module-contents"], [164, "module-contents"], [165, "module-contents"], [170, "module-contents"], [171, "module-contents"], [172, "module-contents"], [173, "module-contents"], [174, "module-contents"], [176, "module-contents"], [177, "module-contents"], [178, "module-contents"], [179, "module-contents"], [180, "module-contents"], [182, "module-contents"], [185, "module-contents"], [186, "module-contents"], [187, "module-contents"], [188, "module-contents"], [189, "module-contents"], [191, "module-contents"], [192, "module-contents"], [195, "module-contents"], [196, "module-contents"], [198, "module-contents"], [199, "module-contents"], [201, "module-contents"], [203, "module-contents"], [204, "module-contents"], [205, "module-contents"], [207, "module-contents"], [208, "module-contents"], [209, "module-contents"], [210, "module-contents"], [211, "module-contents"], [212, "module-contents"], [214, "module-contents"], [215, "module-contents"], [216, "module-contents"], [217, "module-contents"], [218, "module-contents"], [219, "module-contents"], [220, "module-contents"], [221, "module-contents"], [222, "module-contents"], [223, "module-contents"], [225, "module-contents"], [226, "module-contents"], [227, "module-contents"], [228, "module-contents"], [229, "module-contents"], [231, "module-contents"], [232, "module-contents"], [235, "module-contents"], [236, "module-contents"], [237, "module-contents"], [238, "module-contents"], [239, "module-contents"], [240, "module-contents"], [242, "module-contents"], [243, "module-contents"], [244, "module-contents"], [245, "module-contents"], [246, "module-contents"], [247, "module-contents"], [248, "module-contents"], [249, "module-contents"], [250, "module-contents"], [251, "module-contents"], [252, "module-contents"], [254, "module-contents"], [255, "module-contents"], [256, "module-contents"], [259, "module-contents"], [260, "module-contents"], [262, "module-contents"], [263, "module-contents"], [264, "module-contents"], [265, "module-contents"], [266, "module-contents"], [267, "module-contents"], [269, "module-contents"], [270, "module-contents"], [271, "module-contents"], [272, "module-contents"], [273, "module-contents"], [274, "module-contents"], [278, "module-contents"], [279, "module-contents"], [280, "module-contents"], [282, "module-contents"], [283, "module-contents"], [285, "module-contents"], [286, "module-contents"], [287, "module-contents"], [288, "module-contents"], [289, "module-contents"], [290, "module-contents"], [291, "module-contents"], [292, "module-contents"], [293, "module-contents"], [294, "module-contents"], [295, "module-contents"], [297, "module-contents"], [298, "module-contents"], [299, "module-contents"], [302, "module-contents"], [304, "module-contents"], [305, "module-contents"], [306, "module-contents"], [308, "module-contents"], [309, "module-contents"], [310, "module-contents"], [311, "module-contents"], [313, "module-contents"], [314, "module-contents"], [316, "module-contents"], [317, "module-contents"], [318, "module-contents"], [320, "module-contents"], [321, "module-contents"], [322, "module-contents"], [323, "module-contents"], [324, "module-contents"], [326, "module-contents"], [327, "module-contents"], [328, "module-contents"], [329, "module-contents"], [330, "module-contents"], [332, "module-contents"], [333, "module-contents"], [334, "module-contents"], [335, "module-contents"], [338, "module-contents"], [339, "module-contents"], [340, "module-contents"], [343, "module-contents"], [344, "module-contents"], [345, "module-contents"], [346, "module-contents"], [347, "module-contents"], [348, "module-contents"], [349, "module-contents"], [350, "module-contents"], [351, "module-contents"], [352, "module-contents"], [353, "module-contents"], [355, "module-contents"], [356, "module-contents"], [357, "module-contents"], [358, "module-contents"], [361, "module-contents"], [362, "module-contents"], [363, "module-contents"], [364, "module-contents"], [366, "module-contents"], [367, "module-contents"], [369, "module-contents"], [370, "module-contents"], [371, "module-contents"], [373, "module-contents"], [374, "module-contents"], [375, "module-contents"], [377, "module-contents"], [378, "module-contents"], [379, "module-contents"], [380, "module-contents"], [381, "module-contents"], [382, "module-contents"], [383, "module-contents"], [384, "module-contents"], [386, "module-contents"], [388, "module-contents"], [389, "module-contents"], [391, "module-contents"], [392, "module-contents"], [394, "module-contents"], [395, "module-contents"], [397, "module-contents"], [398, "module-contents"], [399, "module-contents"], [400, "module-contents"], [404, "module-contents"], [405, "module-contents"], [407, "module-contents"], [409, "module-contents"], [411, "module-contents"], [412, "module-contents"], [413, "module-contents"], [414, "module-contents"], [416, "module-contents"], [417, "module-contents"], [419, "module-contents"], [421, "module-contents"], [422, "module-contents"], [423, "module-contents"], [424, "module-contents"], [426, "module-contents"], [427, "module-contents"], [428, "module-contents"], [429, "module-contents"], [430, "module-contents"], [431, "module-contents"], [432, "module-contents"], [433, "module-contents"], [434, "module-contents"], [435, "module-contents"], [437, "module-contents"], [438, "module-contents"], [439, "module-contents"], [440, "module-contents"], [443, "module-contents"], [444, "module-contents"], [445, "module-contents"], [446, "module-contents"], [447, "module-contents"], [450, "module-contents"], [451, "module-contents"], [453, "module-contents"], [455, "module-contents"], [456, "module-contents"], [466, "module-contents"], [468, "module-contents"], [469, "module-contents"], [470, "module-contents"], [472, "module-contents"], [473, "module-contents"], [474, "module-contents"], [475, "module-contents"], [476, "module-contents"], [478, "module-contents"], [479, "module-contents"], [480, "module-contents"], [481, "module-contents"], [482, "module-contents"], [483, "module-contents"], [484, "module-contents"], [485, "module-contents"], [486, "module-contents"], [487, "module-contents"], [488, "module-contents"], [489, "module-contents"], [490, "module-contents"], [491, "module-contents"], [492, "module-contents"], [493, "module-contents"], [494, "module-contents"], [495, "module-contents"], [496, "module-contents"], [497, "module-contents"], [498, "module-contents"], [499, "module-contents"], [500, "module-contents"], [502, "module-contents"], [503, "module-contents"], [504, "module-contents"], [505, "module-contents"], [506, "module-contents"], [507, "module-contents"], [508, "module-contents"], [509, "module-contents"], [510, "module-contents"], [511, "module-contents"], [513, "module-contents"], [514, "module-contents"], [515, "module-contents"], [516, "module-contents"], [517, "module-contents"], [518, "module-contents"], [519, "module-contents"], [521, "module-contents"], [522, "module-contents"], [523, "module-contents"], [524, "module-contents"], [525, "module-contents"], [527, "module-contents"], [528, "module-contents"], [529, "module-contents"], [530, "module-contents"], [533, "module-contents"], [535, "module-contents"], [536, "module-contents"], [538, "module-contents"], [539, "module-contents"], [540, "module-contents"], [541, "module-contents"], [542, "module-contents"], [543, "module-contents"], [544, "module-contents"], [545, "module-contents"], [546, "module-contents"], [547, "module-contents"], [548, "module-contents"], [549, "module-contents"], [551, "module-contents"], [552, "module-contents"], [553, "module-contents"], [554, "module-contents"], [555, "module-contents"], [556, "module-contents"], [557, "module-contents"], [558, "module-contents"], [559, "module-contents"], [560, "module-contents"], [561, "module-contents"], [563, "module-contents"], [564, "module-contents"], [565, "module-contents"], [567, "module-contents"], [569, "module-contents"], [570, "module-contents"], [571, "module-contents"], [572, "module-contents"], [573, "module-contents"], [583, "module-contents"], [584, "module-contents"], [585, "module-contents"], [589, "module-contents"], [590, "module-contents"], [591, "module-contents"], [594, "module-contents"], [595, "module-contents"], [596, "module-contents"], [597, "module-contents"], [598, "module-contents"], [599, "module-contents"], [600, "module-contents"], [601, "module-contents"], [604, "module-contents"], [605, "module-contents"], [606, "module-contents"], [608, "module-contents"], [609, "module-contents"], [610, "module-contents"], [611, "module-contents"], [612, "module-contents"], [617, "module-contents"], [618, "module-contents"], [619, "module-contents"], [622, "module-contents"], [623, "module-contents"], [627, "module-contents"], [628, "module-contents"], [629, "module-contents"], [631, "module-contents"], [633, "module-contents"], [634, "module-contents"], [635, "module-contents"], [636, "module-contents"], [637, "module-contents"], [638, "module-contents"], [639, "module-contents"], [640, "module-contents"]], "Classes": [[1, "classes"], [3, "classes"], [11, "classes"], [13, "classes"], [14, "classes"], [15, "classes"], [16, "classes"], [18, "classes"], [19, "classes"], [20, "classes"], [21, "classes"], [22, "classes"], [23, "classes"], [24, "classes"], [25, "classes"], [26, "classes"], [27, "classes"], [28, "classes"], [30, "classes"], [31, "classes"], [32, "classes"], [33, "classes"], [34, "classes"], [35, "classes"], [36, "classes"], [37, "classes"], [38, "classes"], [39, "classes"], [40, "classes"], [41, "classes"], [42, "classes"], [43, "classes"], [45, "classes"], [46, "classes"], [47, "classes"], [48, "classes"], [49, "classes"], [50, "classes"], [51, "classes"], [53, "classes"], [54, "classes"], [55, "classes"], [56, "classes"], [57, "classes"], [58, "classes"], [59, "classes"], [60, "classes"], [61, "classes"], [62, "classes"], [63, "classes"], [64, "classes"], [65, "classes"], [66, "classes"], [67, "classes"], [68, "classes"], [69, "classes"], [70, "classes"], [71, "classes"], [72, "classes"], [73, "classes"], [74, "classes"], [75, "classes"], [77, "classes"], [78, "classes"], [79, "classes"], [80, "classes"], [81, "classes"], [82, "classes"], [83, "classes"], [84, "classes"], [85, "classes"], [86, "classes"], [88, "classes"], [89, "classes"], [90, "classes"], [91, "classes"], [92, "classes"], [93, "classes"], [94, "classes"], [96, "classes"], [97, "classes"], [98, "classes"], [99, "classes"], [100, "classes"], [102, "classes"], [103, "classes"], [104, "classes"], [105, "classes"], [107, "classes"], [108, "classes"], [109, "classes"], [110, "classes"], [113, "classes"], [115, "classes"], [119, "classes"], [120, "classes"], [121, "classes"], [122, "classes"], [123, "classes"], [124, "classes"], [125, "classes"], [126, "classes"], [127, "classes"], [128, "classes"], [129, "classes"], [131, "classes"], [132, "classes"], [133, "classes"], [134, "classes"], [135, "classes"], [136, "classes"], [137, "classes"], [138, "classes"], [139, "classes"], [140, "classes"], [141, "classes"], [142, "classes"], [143, "classes"], [144, "classes"], [146, "classes"], [147, "classes"], [150, "classes"], [151, "classes"], [152, "classes"], [153, "classes"], [157, "classes"], [161, "classes"], [162, "classes"], [164, "classes"], [170, "classes"], [173, "classes"], [174, "classes"], [175, "classes"], [176, "classes"], [177, "classes"], [179, "classes"], [180, "classes"], [181, "classes"], [182, "classes"], [185, "classes"], [187, "classes"], [188, "classes"], [189, "classes"], [191, "classes"], [195, "classes"], [196, "classes"], [198, "classes"], [203, "classes"], [204, "classes"], [205, "classes"], [207, "classes"], [208, "classes"], [209, "classes"], [210, "classes"], [211, "classes"], [212, "classes"], [214, "classes"], [215, "classes"], [216, "classes"], [217, "classes"], [218, "classes"], [219, "classes"], [220, "classes"], [221, "classes"], [222, "classes"], [227, "classes"], [228, "classes"], [229, "classes"], [231, "classes"], [232, "classes"], [235, "classes"], [236, "classes"], [237, "classes"], [238, "classes"], [239, "classes"], [240, "classes"], [241, "classes"], [242, "classes"], [243, "classes"], [244, "classes"], [245, "classes"], [246, "classes"], [247, "classes"], [248, "classes"], [249, "classes"], [250, "classes"], [251, "classes"], [252, "classes"], [253, "classes"], [254, "classes"], [255, "classes"], [256, "classes"], [257, "classes"], [258, "classes"], [259, "classes"], [260, "classes"], [261, "classes"], [262, "classes"], [263, "classes"], [264, "classes"], [265, "classes"], [266, "classes"], [267, "classes"], [268, "classes"], [269, "classes"], [270, "classes"], [271, "classes"], [272, "classes"], [274, "classes"], [278, "classes"], [279, "classes"], [280, "classes"], [282, "classes"], [283, "classes"], [285, "classes"], [286, "classes"], [287, "classes"], [288, "classes"], [289, "classes"], [290, "classes"], [291, "classes"], [292, "classes"], [293, "classes"], [294, "classes"], [295, "classes"], [296, "classes"], [297, "classes"], [298, "classes"], [299, "classes"], [300, "classes"], [301, "classes"], [302, "classes"], [303, "classes"], [304, "classes"], [305, "classes"], [306, "classes"], [311, "classes"], [312, "classes"], [313, "classes"], [316, "classes"], [319, "classes"], [320, "classes"], [321, "classes"], [322, "classes"], [323, "classes"], [324, "classes"], [326, "classes"], [328, "classes"], [329, "classes"], [330, "classes"], [332, "classes"], [333, "classes"], [334, "classes"], [335, "classes"], [336, "classes"], [337, "classes"], [338, "classes"], [339, "classes"], [340, "classes"], [343, "classes"], [345, "classes"], [346, "classes"], [347, "classes"], [348, "classes"], [349, "classes"], [350, "classes"], [351, "classes"], [352, "classes"], [353, "classes"], [355, "classes"], [356, "classes"], [357, "classes"], [358, "classes"], [361, "classes"], [362, "classes"], [363, "classes"], [364, "classes"], [366, "classes"], [369, "classes"], [372, "classes"], [373, "classes"], [375, "classes"], [376, "classes"], [377, "classes"], [378, "classes"], [379, "classes"], [380, "classes"], [381, "classes"], [382, "classes"], [383, "classes"], [384, "classes"], [385, "classes"], [388, "classes"], [389, "classes"], [390, "classes"], [396, "classes"], [399, "classes"], [400, "classes"], [401, "classes"], [403, "classes"], [404, "classes"], [407, "classes"], [409, "classes"], [411, "classes"], [412, "classes"], [413, "classes"], [414, "classes"], [416, "classes"], [417, "classes"], [419, "classes"], [421, "classes"], [423, "classes"], [424, "classes"], [426, "classes"], [429, "classes"], [430, "classes"], [431, "classes"], [432, "classes"], [433, "classes"], [434, "classes"], [435, "classes"], [437, "classes"], [438, "classes"], [439, "classes"], [440, "classes"], [443, "classes"], [444, "classes"], [445, "classes"], [446, "classes"], [447, "classes"], [450, "classes"], [451, "classes"], [453, "classes"], [455, "classes"], [456, "classes"], [466, "classes"], [470, "classes"], [473, "classes"], [474, "classes"], [475, "classes"], [476, "classes"], [478, "classes"], [479, "classes"], [480, "classes"], [481, "classes"], [482, "classes"], [483, "classes"], [484, "classes"], [485, "classes"], [486, "classes"], [487, "classes"], [488, "classes"], [489, "classes"], [490, "classes"], [491, "classes"], [492, "classes"], [493, "classes"], [494, "classes"], [495, "classes"], [496, "classes"], [497, "classes"], [498, "classes"], [499, "classes"], [500, "classes"], [502, "classes"], [503, "classes"], [504, "classes"], [505, "classes"], [506, "classes"], [507, "classes"], [508, "classes"], [509, "classes"], [510, "classes"], [511, "classes"], [513, "classes"], [514, "classes"], [515, "classes"], [516, "classes"], [517, "classes"], [518, "classes"], [519, "classes"], [521, "classes"], [522, "classes"], [523, "classes"], [524, "classes"], [525, "classes"], [527, "classes"], [528, "classes"], [529, "classes"], [530, "classes"], [533, "classes"], [535, "classes"], [539, "classes"], [540, "classes"], [541, "classes"], [542, "classes"], [543, "classes"], [544, "classes"], [545, "classes"], [546, "classes"], [547, "classes"], [548, "classes"], [549, "classes"], [551, "classes"], [552, "classes"], [553, "classes"], [554, "classes"], [555, "classes"], [556, "classes"], [557, "classes"], [558, "classes"], [559, "classes"], [560, "classes"], [561, "classes"], [563, "classes"], [564, "classes"], [567, "classes"], [569, "classes"], [570, "classes"], [571, "classes"], [572, "classes"], [573, "classes"], [591, "classes"], [594, "classes"], [595, "classes"], [596, "classes"], [597, "classes"], [598, "classes"], [599, "classes"], [600, "classes"], [601, "classes"], [604, "classes"], [605, "classes"], [608, "classes"], [609, "classes"], [610, "classes"], [611, "classes"], [612, "classes"], [619, "classes"], [623, "classes"], [627, "classes"], [628, "classes"], [629, "classes"], [632, "classes"], [633, "classes"], [634, "classes"], [635, "classes"], [637, "classes"], [639, "classes"], [640, "classes"]], "Functions": [[1, "functions"], [13, "functions"], [16, "functions"], [34, "functions"], [42, "functions"], [43, "functions"], [44, "functions"], [45, "functions"], [67, "functions"], [68, "functions"], [70, "functions"], [104, "functions"], [105, "functions"], [116, "functions"], [118, "functions"], [148, "functions"], [151, "functions"], [152, "functions"], [153, "functions"], [158, "functions"], [159, "functions"], [160, "functions"], [163, "functions"], [165, "functions"], [171, "functions"], [172, "functions"], [173, "functions"], [175, "functions"], [178, "functions"], [179, "functions"], [180, "functions"], [181, "functions"], [186, "functions"], [187, "functions"], [189, "functions"], [191, "functions"], [192, "functions"], [195, "functions"], [196, "functions"], [198, "functions"], [199, "functions"], [200, "functions"], [201, "functions"], [203, "functions"], [205, "functions"], [206, "functions"], [210, "functions"], [213, "functions"], [219, "functions"], [220, "functions"], [221, "functions"], [222, "functions"], [223, "functions"], [225, "functions"], [226, "functions"], [229, "functions"], [238, "functions"], [239, "functions"], [247, "functions"], [249, "functions"], [253, "functions"], [256, "functions"], [257, "functions"], [258, "functions"], [261, "functions"], [263, "functions"], [264, "functions"], [265, "functions"], [266, "functions"], [268, "functions"], [270, "functions"], [271, "functions"], [273, "functions"], [282, "functions"], [290, "functions"], [292, "functions"], [296, "functions"], [299, "functions"], [300, "functions"], [301, "functions"], [303, "functions"], [304, "functions"], [305, "functions"], [308, "functions"], [309, "functions"], [310, "functions"], [313, "functions"], [314, "functions"], [316, "functions"], [317, "functions"], [318, "functions"], [319, "functions"], [320, "functions"], [327, "functions"], [334, "functions"], [338, "functions"], [343, "functions"], [344, "functions"], [345, "functions"], [347, "functions"], [352, "functions"], [358, "functions"], [362, "functions"], [364, "functions"], [366, "functions"], [367, "functions"], [369, "functions"], [370, "functions"], [371, "functions"], [372, "functions"], [373, "functions"], [374, "functions"], [378, "functions"], [382, "functions"], [384, "functions"], [385, "functions"], [386, "functions"], [387, "functions"], [391, "functions"], [392, "functions"], [394, "functions"], [395, "functions"], [396, "functions"], [397, "functions"], [398, "functions"], [400, "functions"], [401, "functions"], [405, "functions"], [422, "functions"], [427, "functions"], [428, "functions"], [432, "functions"], [440, "functions"], [444, "functions"], [446, "functions"], [447, "functions"], [466, "functions"], [468, "functions"], [469, "functions"], [470, "functions"], [472, "functions"], [492, "functions"], [493, "functions"], [495, "functions"], [536, "functions"], [538, "functions"], [565, "functions"], [567, "functions"], [570, "functions"], [572, "functions"], [583, "functions"], [585, "functions"], [589, "functions"], [590, "functions"], [591, "functions"], [595, "functions"], [596, "functions"], [598, "functions"], [606, "functions"], [611, "functions"], [617, "functions"], [618, "functions"], [619, "functions"], [622, "functions"], [623, "functions"], [627, "functions"], [628, "functions"], [631, "functions"], [632, "functions"], [634, "functions"], [635, "functions"], [636, "functions"], [638, "functions"], [639, "functions"]], "neural_compressor.adaptor": [[2, "module-neural_compressor.adaptor"]], "Subpackages": [[2, "subpackages"], [17, "subpackages"], [87, "subpackages"], [111, "subpackages"], [112, "subpackages"], [114, "subpackages"], [154, "subpackages"], [197, "subpackages"], [200, "subpackages"], [233, "subpackages"], [258, "subpackages"], [276, "subpackages"], [301, "subpackages"], [312, "subpackages"], [336, "subpackages"], [354, "subpackages"], [365, "subpackages"], [436, "subpackages"], [512, "subpackages"], [531, "subpackages"], [532, "subpackages"], [534, "subpackages"], [581, "subpackages"]], "Submodules": [[2, "submodules"], [12, "submodules"], [17, "submodules"], [29, "submodules"], [52, "submodules"], [76, "submodules"], [87, "submodules"], [95, "submodules"], [101, "submodules"], [106, "submodules"], [111, "submodules"], [112, "submodules"], [114, "submodules"], [117, "submodules"], [130, "submodules"], [145, "submodules"], [154, "submodules"], [155, "submodules"], [175, "submodules"], [184, "submodules"], [190, "submodules"], [193, "submodules"], [197, "submodules"], [200, "submodules"], [202, "submodules"], [206, "submodules"], [213, "submodules"], [224, "submodules"], [230, "submodules"], [234, "submodules"], [241, "submodules"], [253, "submodules"], [257, "submodules"], [261, "submodules"], [268, "submodules"], [277, "submodules"], [284, "submodules"], [296, "submodules"], [300, "submodules"], [303, "submodules"], [307, "submodules"], [312, "submodules"], [319, "submodules"], [325, "submodules"], [331, "submodules"], [337, "submodules"], [341, "submodules"], [354, "submodules"], [360, "submodules"], [365, "submodules"], [372, "submodules"], [376, "submodules"], [390, "submodules"], [403, "submodules"], [408, "submodules"], [410, "submodules"], [415, "submodules"], [418, "submodules"], [420, "submodules"], [425, "submodules"], [436, "submodules"], [442, "submodules"], [448, "submodules"], [452, "submodules"], [454, "submodules"], [477, "submodules"], [501, "submodules"], [512, "submodules"], [520, "submodules"], [526, "submodules"], [531, "submodules"], [532, "submodules"], [534, "submodules"], [537, "submodules"], [550, "submodules"], [562, "submodules"], [568, "submodules"], [582, "submodules"], [607, "submodules"], [632, "submodules"]], "Package Contents": [[2, "package-contents"], [29, "package-contents"], [175, "package-contents"], [181, "package-contents"], [200, "package-contents"], [206, "package-contents"], [213, "package-contents"], [241, "package-contents"], [253, "package-contents"], [257, "package-contents"], [258, "package-contents"], [261, "package-contents"], [268, "package-contents"], [284, "package-contents"], [296, "package-contents"], [300, "package-contents"], [301, "package-contents"], [303, "package-contents"], [312, "package-contents"], [319, "package-contents"], [331, "package-contents"], [336, "package-contents"], [337, "package-contents"], [354, "package-contents"], [372, "package-contents"], [376, "package-contents"], [385, "package-contents"], [387, "package-contents"], [390, "package-contents"], [396, "package-contents"], [401, "package-contents"], [403, "package-contents"], [436, "package-contents"], [632, "package-contents"]], "neural_compressor.adaptor.keras": [[3, "module-neural_compressor.adaptor.keras"]], "neural_compressor.adaptor.keras_utils.conv2d": [[4, "module-neural_compressor.adaptor.keras_utils.conv2d"]], "neural_compressor.adaptor.keras_utils.dense": [[5, "module-neural_compressor.adaptor.keras_utils.dense"]], "neural_compressor.adaptor.keras_utils.depthwise_conv2d": [[6, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"]], "neural_compressor.adaptor.keras_utils": [[7, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.pool2d": [[8, "module-neural_compressor.adaptor.keras_utils.pool2d"]], "neural_compressor.adaptor.keras_utils.quantizer": [[9, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "neural_compressor.adaptor.keras_utils.separable_conv2d": [[10, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"]], "neural_compressor.adaptor.mxnet": [[11, "module-neural_compressor.adaptor.mxnet"]], "neural_compressor.adaptor.mxnet_utils": [[12, "module-neural_compressor.adaptor.mxnet_utils"]], "neural_compressor.adaptor.mxnet_utils.util": [[13, "module-neural_compressor.adaptor.mxnet_utils.util"]], "neural_compressor.adaptor.onnxrt": [[14, "module-neural_compressor.adaptor.onnxrt"]], "neural_compressor.adaptor.ox_utils.calibration": [[15, "module-neural_compressor.adaptor.ox_utils.calibration"]], "neural_compressor.adaptor.ox_utils.calibrator": [[16, "module-neural_compressor.adaptor.ox_utils.calibrator"]], "neural_compressor.adaptor.ox_utils": [[17, "module-neural_compressor.adaptor.ox_utils"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[18, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[19, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[20, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[21, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[22, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[23, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[24, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[25, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[26, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[27, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[28, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[29, "module-neural_compressor.adaptor.ox_utils.operators"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[30, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[31, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[32, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "neural_compressor.adaptor.ox_utils.operators.norm": [[33, "module-neural_compressor.adaptor.ox_utils.operators.norm"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[34, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[35, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[36, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "neural_compressor.adaptor.ox_utils.operators.reduce": [[37, "module-neural_compressor.adaptor.ox_utils.operators.reduce"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[38, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "neural_compressor.adaptor.ox_utils.operators.split": [[39, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "neural_compressor.adaptor.ox_utils.operators.unary_op": [[40, "module-neural_compressor.adaptor.ox_utils.operators.unary_op"]], "neural_compressor.adaptor.ox_utils.quantizer": [[41, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "neural_compressor.adaptor.ox_utils.smooth_quant": [[42, "module-neural_compressor.adaptor.ox_utils.smooth_quant"]], "neural_compressor.adaptor.ox_utils.util": [[43, "module-neural_compressor.adaptor.ox_utils.util"]], "neural_compressor.adaptor.ox_utils.weight_only": [[44, "module-neural_compressor.adaptor.ox_utils.weight_only"]], "neural_compressor.adaptor.pytorch": [[45, "module-neural_compressor.adaptor.pytorch"]], "neural_compressor.adaptor.query": [[46, "module-neural_compressor.adaptor.query"]], "neural_compressor.adaptor.tensorflow": [[47, "module-neural_compressor.adaptor.tensorflow"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[48, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[49, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer": [[51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[109, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_util": [[110, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "neural_compressor.adaptor.tf_utils": [[111, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[112, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[138, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[139, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "neural_compressor.adaptor.tf_utils.smooth_quant_calibration": [[140, "module-neural_compressor.adaptor.tf_utils.smooth_quant_calibration"]], "neural_compressor.adaptor.tf_utils.smooth_quant_scaler": [[141, "module-neural_compressor.adaptor.tf_utils.smooth_quant_scaler"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[142, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[143, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[144, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[145, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[146, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[147, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.util": [[148, "module-neural_compressor.adaptor.tf_utils.util"]], "neural_compressor.adaptor.torch_utils.auto_round": [[149, "module-neural_compressor.adaptor.torch_utils.auto_round"]], "neural_compressor.adaptor.torch_utils.awq": [[150, "module-neural_compressor.adaptor.torch_utils.awq"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[151, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "neural_compressor.adaptor.torch_utils.gptq": [[152, "module-neural_compressor.adaptor.torch_utils.gptq"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[153, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[154, "module-neural_compressor.adaptor.torch_utils"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant": [[155, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle": [[156, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize": [[157, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load": [[158, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils": [[159, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.utils"]], "neural_compressor.adaptor.torch_utils.mixed_precision": [[160, "module-neural_compressor.adaptor.torch_utils.mixed_precision"]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[161, "module-neural_compressor.adaptor.torch_utils.model_wrapper"]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[162, "module-neural_compressor.adaptor.torch_utils.pattern_detector"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[163, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "neural_compressor.adaptor.torch_utils.teq": [[164, "module-neural_compressor.adaptor.torch_utils.teq"]], "neural_compressor.adaptor.torch_utils.util": [[165, "module-neural_compressor.adaptor.torch_utils.util"]], "}": [[165, "id3"]], "neural_compressor.adaptor.torch_utils.waq.auto_alpha": [[166, "module-neural_compressor.adaptor.torch_utils.waq.auto_alpha"]], "neural_compressor.adaptor.torch_utils.waq.calibration": [[167, "module-neural_compressor.adaptor.torch_utils.waq.calibration"]], "neural_compressor.adaptor.torch_utils.waq.graph_trace": [[168, "module-neural_compressor.adaptor.torch_utils.waq.graph_trace"]], "neural_compressor.adaptor.torch_utils.waq": [[169, "module-neural_compressor.adaptor.torch_utils.waq"]], "neural_compressor.adaptor.torch_utils.waq.smooth_quant": [[170, "module-neural_compressor.adaptor.torch_utils.waq.smooth_quant"]], "neural_compressor.adaptor.torch_utils.waq.utils": [[171, "module-neural_compressor.adaptor.torch_utils.waq.utils"]], "neural_compressor.adaptor.torch_utils.weight_only": [[172, "module-neural_compressor.adaptor.torch_utils.weight_only"]], "neural_compressor.algorithm.algorithm": [[173, "module-neural_compressor.algorithm.algorithm"]], "neural_compressor.algorithm.fast_bias_correction": [[174, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[175, "module-neural_compressor.algorithm"]], "neural_compressor.algorithm.smooth_quant": [[176, "module-neural_compressor.algorithm.smooth_quant"]], "neural_compressor.algorithm.weight_correction": [[177, "module-neural_compressor.algorithm.weight_correction"]], "neural_compressor.benchmark": [[178, "module-neural_compressor.benchmark"]], "neural_compressor.common.base_config": [[179, "module-neural_compressor.common.base_config"]], "Attributes": [[179, "attributes"], [180, "attributes"], [181, "attributes"], [185, "attributes"], [241, "attributes"], [249, "attributes"], [258, "attributes"], [292, "attributes"], [301, "attributes"], [312, "attributes"], [336, "attributes"], [376, "attributes"], [400, "attributes"], [403, "attributes"], [405, "attributes"], [447, "attributes"], [600, "attributes"], [611, "attributes"], [632, "attributes"]], "neural_compressor.common.base_tuning": [[180, "module-neural_compressor.common.base_tuning"]], "neural_compressor.common": [[181, "module-neural_compressor.common"]], "neural_compressor.common.tuning_param": [[182, "module-neural_compressor.common.tuning_param"]], "neural_compressor.common.utils.constants": [[183, "module-neural_compressor.common.utils.constants"]], "neural_compressor.common.utils": [[184, "module-neural_compressor.common.utils"]], "neural_compressor.common.utils.logger": [[185, "module-neural_compressor.common.utils.logger"]], "neural_compressor.common.utils.save_load": [[186, "module-neural_compressor.common.utils.save_load"]], "neural_compressor.common.utils.utility": [[187, "module-neural_compressor.common.utils.utility"]], "neural_compressor.compression.callbacks": [[188, "module-neural_compressor.compression.callbacks"]], "neural_compressor.compression.distillation.criterions": [[189, "module-neural_compressor.compression.distillation.criterions"]], "neural_compressor.compression.distillation": [[190, "module-neural_compressor.compression.distillation"]], "neural_compressor.compression.distillation.optimizers": [[191, "module-neural_compressor.compression.distillation.optimizers"]], "neural_compressor.compression.distillation.utility": [[192, "module-neural_compressor.compression.distillation.utility"]], "neural_compressor.compression.hpo": [[193, "module-neural_compressor.compression.hpo"]], "neural_compressor.compression.hpo.sa_optimizer": [[194, "module-neural_compressor.compression.hpo.sa_optimizer"]], "neural_compressor.compression.hpo.search_algorithms": [[195, "module-neural_compressor.compression.hpo.search_algorithms"]], "neural_compressor.compression.hpo.search_space": [[196, "module-neural_compressor.compression.hpo.search_space"]], "neural_compressor.compression": [[197, "module-neural_compressor.compression"]], "neural_compressor.compression.pruner.criteria": [[198, "module-neural_compressor.compression.pruner.criteria"]], "neural_compressor.compression.pruner.dsnot": [[199, "module-neural_compressor.compression.pruner.dsnot"]], "neural_compressor.compression.pruner": [[200, "module-neural_compressor.compression.pruner"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[201, "module-neural_compressor.compression.pruner.model_slim.auto_slim"]], "neural_compressor.compression.pruner.model_slim": [[202, "module-neural_compressor.compression.pruner.model_slim"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[203, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[204, "module-neural_compressor.compression.pruner.model_slim.weight_slim"]], "neural_compressor.compression.pruner.patterns.base": [[205, "module-neural_compressor.compression.pruner.patterns.base"]], "neural_compressor.compression.pruner.patterns": [[206, "module-neural_compressor.compression.pruner.patterns"]], "neural_compressor.compression.pruner.patterns.mha": [[207, "module-neural_compressor.compression.pruner.patterns.mha"]], "neural_compressor.compression.pruner.patterns.ninm": [[208, "module-neural_compressor.compression.pruner.patterns.ninm"]], "neural_compressor.compression.pruner.patterns.nxm": [[209, "module-neural_compressor.compression.pruner.patterns.nxm"]], "neural_compressor.compression.pruner.pruners.base": [[210, "module-neural_compressor.compression.pruner.pruners.base"]], "neural_compressor.compression.pruner.pruners.basic": [[211, "module-neural_compressor.compression.pruner.pruners.basic"]], "neural_compressor.compression.pruner.pruners.block_mask": [[212, "module-neural_compressor.compression.pruner.pruners.block_mask"]], "neural_compressor.compression.pruner.pruners": [[213, "module-neural_compressor.compression.pruner.pruners"]], "neural_compressor.compression.pruner.pruners.mha": [[214, "module-neural_compressor.compression.pruner.pruners.mha"]], "neural_compressor.compression.pruner.pruners.pattern_lock": [[215, "module-neural_compressor.compression.pruner.pruners.pattern_lock"]], "neural_compressor.compression.pruner.pruners.progressive": [[216, "module-neural_compressor.compression.pruner.pruners.progressive"]], "neural_compressor.compression.pruner.pruners.retrain_free": [[217, "module-neural_compressor.compression.pruner.pruners.retrain_free"]], "neural_compressor.compression.pruner.pruners.sparse_gpt": [[218, "module-neural_compressor.compression.pruner.pruners.sparse_gpt"]], "neural_compressor.compression.pruner.pruning": [[219, "module-neural_compressor.compression.pruner.pruning"]], "neural_compressor.compression.pruner.regs": [[220, "module-neural_compressor.compression.pruner.regs"]], "neural_compressor.compression.pruner.schedulers": [[221, "module-neural_compressor.compression.pruner.schedulers"]], "neural_compressor.compression.pruner.tf_criteria": [[222, "module-neural_compressor.compression.pruner.tf_criteria"]], "neural_compressor.compression.pruner.utils": [[223, "module-neural_compressor.compression.pruner.utils"]], "neural_compressor.compression.pruner.wanda": [[224, "module-neural_compressor.compression.pruner.wanda"]], "neural_compressor.compression.pruner.wanda.prune": [[225, "module-neural_compressor.compression.pruner.wanda.prune"]], "neural_compressor.compression.pruner.wanda.utils": [[226, "module-neural_compressor.compression.pruner.wanda.utils"]], "neural_compressor.compression.pruner.wanda.wrapper": [[227, "module-neural_compressor.compression.pruner.wanda.wrapper"]], "neural_compressor.conf.config": [[228, "module-neural_compressor.conf.config"]], "neural_compressor.conf.dotdict": [[229, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[230, "module-neural_compressor.conf"]], "neural_compressor.conf.pythonic_config": [[231, "module-neural_compressor.conf.pythonic_config"]], "neural_compressor.config": [[232, "module-neural_compressor.config"]], "neural_compressor.contrib": [[233, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[234, "module-neural_compressor.contrib.strategy"]], "neural_compressor.contrib.strategy.sigopt": [[235, "module-neural_compressor.contrib.strategy.sigopt"]], "neural_compressor.contrib.strategy.tpe": [[236, "module-neural_compressor.contrib.strategy.tpe"]], "neural_compressor.data.dataloaders.base_dataloader": [[237, "module-neural_compressor.data.dataloaders.base_dataloader"]], "neural_compressor.data.dataloaders.dataloader": [[238, "module-neural_compressor.data.dataloaders.dataloader"]], "neural_compressor.data.dataloaders.default_dataloader": [[239, "module-neural_compressor.data.dataloaders.default_dataloader"]], "neural_compressor.data.dataloaders.fetcher": [[240, "module-neural_compressor.data.dataloaders.fetcher"]], "neural_compressor.data.dataloaders": [[241, "module-neural_compressor.data.dataloaders"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[242, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[243, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[244, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "neural_compressor.data.dataloaders.sampler": [[245, "module-neural_compressor.data.dataloaders.sampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[246, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.data.datasets.bert_dataset": [[247, "module-neural_compressor.data.datasets.bert_dataset"]], "neural_compressor.data.datasets.coco_dataset": [[248, "module-neural_compressor.data.datasets.coco_dataset"]], "neural_compressor.data.datasets.dataset": [[249, "module-neural_compressor.data.datasets.dataset"]], "neural_compressor.data.datasets.dummy_dataset": [[250, "module-neural_compressor.data.datasets.dummy_dataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[251, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "neural_compressor.data.datasets.imagenet_dataset": [[252, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[253, "module-neural_compressor.data.datasets"]], "neural_compressor.data.datasets.style_transfer_dataset": [[254, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "neural_compressor.data.filters.coco_filter": [[255, "module-neural_compressor.data.filters.coco_filter"]], "neural_compressor.data.filters.filter": [[256, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[257, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[258, "module-neural_compressor.data"]], "neural_compressor.data.transforms.coco_transform": [[259, "module-neural_compressor.data.transforms.coco_transform"]], "neural_compressor.data.transforms.imagenet_transform": [[260, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[261, "module-neural_compressor.data.transforms"]], "neural_compressor.data.transforms.postprocess": [[262, "module-neural_compressor.data.transforms.postprocess"]], "neural_compressor.data.transforms.tokenization": [[263, "module-neural_compressor.data.transforms.tokenization"]], "neural_compressor.data.transforms.transform": [[264, "module-neural_compressor.data.transforms.transform"]], "neural_compressor.experimental.benchmark": [[265, "module-neural_compressor.experimental.benchmark"]], "neural_compressor.experimental.common.criterion": [[266, "module-neural_compressor.experimental.common.criterion"]], "neural_compressor.experimental.common.dataloader": [[267, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[268, "module-neural_compressor.experimental.common"]], "neural_compressor.experimental.common.metric": [[269, "module-neural_compressor.experimental.common.metric"]], "neural_compressor.experimental.common.model": [[270, "module-neural_compressor.experimental.common.model"]], "neural_compressor.experimental.common.optimizer": [[271, "module-neural_compressor.experimental.common.optimizer"]], "neural_compressor.experimental.common.postprocess": [[272, "module-neural_compressor.experimental.common.postprocess"]], "neural_compressor.experimental.common.torch_utils": [[273, "module-neural_compressor.experimental.common.torch_utils"]], "neural_compressor.experimental.component": [[274, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.compression": [[275, "module-neural_compressor.experimental.compression"]], "neural_compressor.experimental.contrib": [[276, "module-neural_compressor.experimental.contrib"]], "neural_compressor.experimental.contrib.strategy": [[277, "module-neural_compressor.experimental.contrib.strategy"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[278, "module-neural_compressor.experimental.contrib.strategy.sigopt"]], "neural_compressor.experimental.contrib.strategy.tpe": [[279, "module-neural_compressor.experimental.contrib.strategy.tpe"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[280, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[281, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[282, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[283, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[284, "module-neural_compressor.experimental.data.dataloaders"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[285, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[286, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[287, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[288, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[289, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[290, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[291, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "neural_compressor.experimental.data.datasets.dataset": [[292, "module-neural_compressor.experimental.data.datasets.dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[293, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[294, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[295, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[296, "module-neural_compressor.experimental.data.datasets"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[297, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "neural_compressor.experimental.data.filters.coco_filter": [[298, "module-neural_compressor.experimental.data.filters.coco_filter"]], "neural_compressor.experimental.data.filters.filter": [[299, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[300, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[301, "module-neural_compressor.experimental.data"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[302, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[303, "module-neural_compressor.experimental.data.transforms"]], "neural_compressor.experimental.data.transforms.tokenization": [[304, "module-neural_compressor.experimental.data.transforms.tokenization"]], "neural_compressor.experimental.data.transforms.transform": [[305, "module-neural_compressor.experimental.data.transforms.transform"]], "neural_compressor.experimental.distillation": [[306, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[307, "module-neural_compressor.experimental.export"]], "neural_compressor.experimental.export.qlinear2qdq": [[308, "module-neural_compressor.experimental.export.qlinear2qdq"]], "neural_compressor.experimental.export.tf2onnx": [[309, "module-neural_compressor.experimental.export.tf2onnx"]], "neural_compressor.experimental.export.torch2onnx": [[310, "module-neural_compressor.experimental.export.torch2onnx"]], "neural_compressor.experimental.graph_optimization": [[311, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[312, "module-neural_compressor.experimental"]], "neural_compressor.experimental.metric.bleu": [[313, "module-neural_compressor.experimental.metric.bleu"]], "neural_compressor.experimental.metric.bleu_util": [[314, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[315, "module-neural_compressor.experimental.metric.coco_label_map"]], "neural_compressor.experimental.metric.coco_tools": [[316, "module-neural_compressor.experimental.metric.coco_tools"]], "neural_compressor.experimental.metric.evaluate_squad": [[317, "module-neural_compressor.experimental.metric.evaluate_squad"]], "neural_compressor.experimental.metric.f1": [[318, "module-neural_compressor.experimental.metric.f1"]], "neural_compressor.experimental.metric": [[319, "module-neural_compressor.experimental.metric"]], "neural_compressor.experimental.metric.metric": [[320, "module-neural_compressor.experimental.metric.metric"]], "neural_compressor.experimental.mixed_precision": [[321, "module-neural_compressor.experimental.mixed_precision"]], "neural_compressor.experimental.model_conversion": [[322, "module-neural_compressor.experimental.model_conversion"]], "neural_compressor.experimental.nas.basic_nas": [[323, "module-neural_compressor.experimental.nas.basic_nas"]], "neural_compressor.experimental.nas.dynas": [[324, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas": [[325, "module-neural_compressor.experimental.nas"]], "neural_compressor.experimental.nas.nas": [[326, "module-neural_compressor.experimental.nas.nas"]], "neural_compressor.experimental.nas.nas_utils": [[327, "module-neural_compressor.experimental.nas.nas_utils"]], "neural_compressor.experimental.nas.search_algorithms": [[328, "module-neural_compressor.experimental.nas.search_algorithms"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[329, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[330, "module-neural_compressor.experimental.pruner_legacy.group_lasso"]], "neural_compressor.experimental.pruner_legacy": [[331, "module-neural_compressor.experimental.pruner_legacy"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[332, "module-neural_compressor.experimental.pruner_legacy.magnitude"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[333, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"]], "neural_compressor.experimental.pruner_legacy.pruner": [[334, "module-neural_compressor.experimental.pruner_legacy.pruner"]], "neural_compressor.experimental.pruning": [[335, "module-neural_compressor.experimental.pruning"]], "neural_compressor.experimental.pruning_recipes": [[336, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[337, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[338, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[339, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "neural_compressor.experimental.pruning_v2": [[340, "module-neural_compressor.experimental.pruning_v2"]], "neural_compressor.experimental.pytorch_pruner": [[341, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[342, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[343, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[344, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[345, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[346, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[347, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "neural_compressor.experimental.quantization": [[348, "module-neural_compressor.experimental.quantization"]], "neural_compressor.experimental.scheduler": [[349, "module-neural_compressor.experimental.scheduler"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[350, "module-neural_compressor.experimental.strategy.auto_mixed_precision"]], "neural_compressor.experimental.strategy.basic": [[351, "module-neural_compressor.experimental.strategy.basic"]], "neural_compressor.experimental.strategy.bayesian": [[352, "module-neural_compressor.experimental.strategy.bayesian"]], "neural_compressor.experimental.strategy.exhaustive": [[353, "module-neural_compressor.experimental.strategy.exhaustive"]], "neural_compressor.experimental.strategy": [[354, "module-neural_compressor.experimental.strategy"]], "neural_compressor.experimental.strategy.mse": [[355, "module-neural_compressor.experimental.strategy.mse"]], "neural_compressor.experimental.strategy.mse_v2": [[356, "module-neural_compressor.experimental.strategy.mse_v2"]], "neural_compressor.experimental.strategy.random": [[357, "module-neural_compressor.experimental.strategy.random"]], "neural_compressor.experimental.strategy.strategy": [[358, "module-neural_compressor.experimental.strategy.strategy"]], "neural_compressor.experimental.strategy.utils.constant": [[359, "module-neural_compressor.experimental.strategy.utils.constant"]], "neural_compressor.experimental.strategy.utils": [[360, "module-neural_compressor.experimental.strategy.utils"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[361, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[362, "module-neural_compressor.experimental.strategy.utils.tuning_space"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[363, "module-neural_compressor.experimental.strategy.utils.tuning_structs"]], "neural_compressor.experimental.strategy.utils.utility": [[364, "module-neural_compressor.experimental.strategy.utils.utility"]], "neural_compressor": [[365, "module-neural_compressor"]], "neural_compressor.metric.bleu": [[366, "module-neural_compressor.metric.bleu"]], "neural_compressor.metric.bleu_util": [[367, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[368, "module-neural_compressor.metric.coco_label_map"]], "neural_compressor.metric.coco_tools": [[369, "module-neural_compressor.metric.coco_tools"]], "neural_compressor.metric.evaluate_squad": [[370, "module-neural_compressor.metric.evaluate_squad"]], "neural_compressor.metric.f1": [[371, "module-neural_compressor.metric.f1"]], "neural_compressor.metric": [[372, "module-neural_compressor.metric"]], "neural_compressor.metric.metric": [[373, "module-neural_compressor.metric.metric"]], "neural_compressor.mix_precision": [[374, "module-neural_compressor.mix_precision"]], "neural_compressor.model.base_model": [[375, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[376, "module-neural_compressor.model"]], "neural_compressor.model.keras_model": [[377, "module-neural_compressor.model.keras_model"]], "neural_compressor.model.model": [[378, "module-neural_compressor.model.model"]], "neural_compressor.model.mxnet_model": [[379, "module-neural_compressor.model.mxnet_model"]], "neural_compressor.model.nets_factory": [[380, "module-neural_compressor.model.nets_factory"]], "neural_compressor.model.onnx_model": [[381, "module-neural_compressor.model.onnx_model"]], "neural_compressor.model.tensorflow_model": [[382, "module-neural_compressor.model.tensorflow_model"]], "neural_compressor.model.torch_model": [[383, "module-neural_compressor.model.torch_model"]], "neural_compressor.objective": [[384, "module-neural_compressor.objective"]], "neural_compressor.onnxrt.algorithms": [[385, "module-neural_compressor.onnxrt.algorithms"]], "neural_compressor.onnxrt.algorithms.layer_wise.core": [[386, "module-neural_compressor.onnxrt.algorithms.layer_wise.core"]], "neural_compressor.onnxrt.algorithms.layer_wise": [[387, "module-neural_compressor.onnxrt.algorithms.layer_wise"]], "neural_compressor.onnxrt.algorithms.smoother.calibrator": [[388, "module-neural_compressor.onnxrt.algorithms.smoother.calibrator"]], "neural_compressor.onnxrt.algorithms.smoother.core": [[389, "module-neural_compressor.onnxrt.algorithms.smoother.core"]], "neural_compressor.onnxrt.algorithms.smoother": [[390, "module-neural_compressor.onnxrt.algorithms.smoother"]], "neural_compressor.onnxrt.algorithms.weight_only.awq": [[391, "module-neural_compressor.onnxrt.algorithms.weight_only.awq"]], "neural_compressor.onnxrt.algorithms.weight_only.gptq": [[392, "module-neural_compressor.onnxrt.algorithms.weight_only.gptq"]], "neural_compressor.onnxrt.algorithms.weight_only": [[393, "module-neural_compressor.onnxrt.algorithms.weight_only"]], "neural_compressor.onnxrt.algorithms.weight_only.rtn": [[394, "module-neural_compressor.onnxrt.algorithms.weight_only.rtn"]], "neural_compressor.onnxrt.algorithms.weight_only.utility": [[395, "module-neural_compressor.onnxrt.algorithms.weight_only.utility"]], "neural_compressor.onnxrt": [[396, "module-neural_compressor.onnxrt"]], "neural_compressor.onnxrt.quantization.algorithm_entry": [[397, "module-neural_compressor.onnxrt.quantization.algorithm_entry"]], "neural_compressor.onnxrt.quantization.autotune": [[398, "module-neural_compressor.onnxrt.quantization.autotune"]], "neural_compressor.onnxrt.quantization.calibrate": [[399, "module-neural_compressor.onnxrt.quantization.calibrate"]], "neural_compressor.onnxrt.quantization.config": [[400, "module-neural_compressor.onnxrt.quantization.config"]], "neural_compressor.onnxrt.quantization": [[401, "module-neural_compressor.onnxrt.quantization"]], "neural_compressor.onnxrt.quantization.quantize": [[402, "module-neural_compressor.onnxrt.quantization.quantize"]], "neural_compressor.onnxrt.utils": [[403, "module-neural_compressor.onnxrt.utils"]], "neural_compressor.onnxrt.utils.onnx_model": [[404, "module-neural_compressor.onnxrt.utils.onnx_model"]], "neural_compressor.onnxrt.utils.utility": [[405, "module-neural_compressor.onnxrt.utils.utility"]], "neural_compressor.profiling": [[406, "module-neural_compressor.profiling"]], "neural_compressor.profiling.parser.factory": [[407, "module-neural_compressor.profiling.parser.factory"]], "neural_compressor.profiling.parser": [[408, "module-neural_compressor.profiling.parser"]], "neural_compressor.profiling.parser.onnx_parser.factory": [[409, "module-neural_compressor.profiling.parser.onnx_parser.factory"]], "neural_compressor.profiling.parser.onnx_parser": [[410, "module-neural_compressor.profiling.parser.onnx_parser"]], "neural_compressor.profiling.parser.onnx_parser.parser": [[411, "module-neural_compressor.profiling.parser.onnx_parser.parser"]], "neural_compressor.profiling.parser.parser": [[412, "module-neural_compressor.profiling.parser.parser"]], "neural_compressor.profiling.parser.result": [[413, "module-neural_compressor.profiling.parser.result"]], "neural_compressor.profiling.parser.tensorflow_parser.factory": [[414, "module-neural_compressor.profiling.parser.tensorflow_parser.factory"]], "neural_compressor.profiling.parser.tensorflow_parser": [[415, "module-neural_compressor.profiling.parser.tensorflow_parser"]], "neural_compressor.profiling.parser.tensorflow_parser.parser": [[416, "module-neural_compressor.profiling.parser.tensorflow_parser.parser"]], "neural_compressor.profiling.profiler.factory": [[417, "module-neural_compressor.profiling.profiler.factory"]], "neural_compressor.profiling.profiler": [[418, "module-neural_compressor.profiling.profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.factory": [[419, "module-neural_compressor.profiling.profiler.onnxrt_profiler.factory"]], "neural_compressor.profiling.profiler.onnxrt_profiler": [[420, "module-neural_compressor.profiling.profiler.onnxrt_profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.profiler": [[421, "module-neural_compressor.profiling.profiler.onnxrt_profiler.profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.utils": [[422, "module-neural_compressor.profiling.profiler.onnxrt_profiler.utils"]], "neural_compressor.profiling.profiler.profiler": [[423, "module-neural_compressor.profiling.profiler.profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.factory": [[424, "module-neural_compressor.profiling.profiler.tensorflow_profiler.factory"]], "neural_compressor.profiling.profiler.tensorflow_profiler": [[425, "module-neural_compressor.profiling.profiler.tensorflow_profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.profiler": [[426, "module-neural_compressor.profiling.profiler.tensorflow_profiler.profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.utils": [[427, "module-neural_compressor.profiling.profiler.tensorflow_profiler.utils"]], "neural_compressor.quantization": [[428, "module-neural_compressor.quantization"]], "neural_compressor.strategy.auto": [[429, "module-neural_compressor.strategy.auto"]], "neural_compressor.strategy.auto_mixed_precision": [[430, "module-neural_compressor.strategy.auto_mixed_precision"]], "neural_compressor.strategy.basic": [[431, "module-neural_compressor.strategy.basic"]], "neural_compressor.strategy.bayesian": [[432, "module-neural_compressor.strategy.bayesian"]], "neural_compressor.strategy.conservative": [[433, "module-neural_compressor.strategy.conservative"]], "neural_compressor.strategy.exhaustive": [[434, "module-neural_compressor.strategy.exhaustive"]], "neural_compressor.strategy.hawq_v2": [[435, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[436, "module-neural_compressor.strategy"]], "neural_compressor.strategy.mse": [[437, "module-neural_compressor.strategy.mse"]], "neural_compressor.strategy.mse_v2": [[438, "module-neural_compressor.strategy.mse_v2"]], "neural_compressor.strategy.random": [[439, "module-neural_compressor.strategy.random"]], "neural_compressor.strategy.strategy": [[440, "module-neural_compressor.strategy.strategy"]], "neural_compressor.strategy.utils.constant": [[441, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[442, "module-neural_compressor.strategy.utils"]], "neural_compressor.strategy.utils.tuning_sampler": [[443, "module-neural_compressor.strategy.utils.tuning_sampler"]], "neural_compressor.strategy.utils.tuning_space": [[444, "module-neural_compressor.strategy.utils.tuning_space"]], "neural_compressor.strategy.utils.tuning_structs": [[445, "module-neural_compressor.strategy.utils.tuning_structs"]], "neural_compressor.strategy.utils.utility": [[446, "module-neural_compressor.strategy.utils.utility"]], "neural_compressor.template.api_doc_example": [[447, "module-neural_compressor.template.api_doc_example"]], "neural_compressor.template": [[448, "module-neural_compressor.template"]], "neural_compressor.tensorflow.algorithms": [[449, "module-neural_compressor.tensorflow.algorithms"]], "neural_compressor.tensorflow.algorithms.smoother.calibration": [[450, "module-neural_compressor.tensorflow.algorithms.smoother.calibration"]], "neural_compressor.tensorflow.algorithms.smoother.core": [[451, "module-neural_compressor.tensorflow.algorithms.smoother.core"]], "neural_compressor.tensorflow.algorithms.smoother": [[452, "module-neural_compressor.tensorflow.algorithms.smoother"]], "neural_compressor.tensorflow.algorithms.smoother.scaler": [[453, "module-neural_compressor.tensorflow.algorithms.smoother.scaler"]], "neural_compressor.tensorflow.algorithms.static_quant": [[454, "module-neural_compressor.tensorflow.algorithms.static_quant"]], "neural_compressor.tensorflow.algorithms.static_quant.keras": [[455, "module-neural_compressor.tensorflow.algorithms.static_quant.keras"]], "neural_compressor.tensorflow.algorithms.static_quant.tensorflow": [[456, "module-neural_compressor.tensorflow.algorithms.static_quant.tensorflow"]], "neural_compressor.tensorflow": [[457, "module-neural_compressor.tensorflow"]], "neural_compressor.tensorflow.keras": [[458, "module-neural_compressor.tensorflow.keras"]], "neural_compressor.tensorflow.keras.layers.conv2d": [[459, "module-neural_compressor.tensorflow.keras.layers.conv2d"]], "neural_compressor.tensorflow.keras.layers.dense": [[460, "module-neural_compressor.tensorflow.keras.layers.dense"]], "neural_compressor.tensorflow.keras.layers.depthwise_conv2d": [[461, "module-neural_compressor.tensorflow.keras.layers.depthwise_conv2d"]], "neural_compressor.tensorflow.keras.layers": [[462, "module-neural_compressor.tensorflow.keras.layers"]], "neural_compressor.tensorflow.keras.layers.layer_initializer": [[463, "module-neural_compressor.tensorflow.keras.layers.layer_initializer"]], "neural_compressor.tensorflow.keras.layers.pool2d": [[464, "module-neural_compressor.tensorflow.keras.layers.pool2d"]], "neural_compressor.tensorflow.keras.layers.separable_conv2d": [[465, "module-neural_compressor.tensorflow.keras.layers.separable_conv2d"]], "neural_compressor.tensorflow.keras.quantization.config": [[466, "module-neural_compressor.tensorflow.keras.quantization.config"]], "neural_compressor.tensorflow.keras.quantization": [[467, "module-neural_compressor.tensorflow.keras.quantization"]], "neural_compressor.tensorflow.quantization.algorithm_entry": [[468, "module-neural_compressor.tensorflow.quantization.algorithm_entry"]], "neural_compressor.tensorflow.quantization.autotune": [[469, "module-neural_compressor.tensorflow.quantization.autotune"]], "neural_compressor.tensorflow.quantization.config": [[470, "module-neural_compressor.tensorflow.quantization.config"]], "neural_compressor.tensorflow.quantization": [[471, "module-neural_compressor.tensorflow.quantization"]], "neural_compressor.tensorflow.quantization.quantize": [[472, "module-neural_compressor.tensorflow.quantization.quantize"]], "neural_compressor.tensorflow.quantization.utils.graph_converter": [[473, "module-neural_compressor.tensorflow.quantization.utils.graph_converter"]], "neural_compressor.tensorflow.quantization.utils.graph_converter_without_calib": [[474, "module-neural_compressor.tensorflow.quantization.utils.graph_converter_without_calib"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.bf16_convert": [[475, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.dequantize_cast_optimizer": [[476, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.dequantize_cast_optimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16": [[477, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd": [[478, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout": [[479, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu": [[480, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random": [[481, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const": [[482, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction": [[483, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd": [[484, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer": [[485, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape": [[486, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm": [[487, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant": [[488, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add": [[489, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul": [[490, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math": [[491, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn": [[492, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in": [[493, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu": [[494, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm": [[495, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv": [[496, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[497, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose": [[498, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer": [[499, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass": [[500, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic": [[501, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node": [[502, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu": [[503, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize": [[504, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes": [[505, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm": [[506, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input": [[507, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes": [[508, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes": [[509, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer": [[510, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base": [[511, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter": [[512, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_fake_quant": [[513, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_fake_quant"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value": [[514, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value_without_calib": [[515, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value_without_calib"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[516, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_requantize": [[517, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_requantize"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[518, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize": [[519, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8": [[520, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.meta_op_optimizer": [[521, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.meta_op_optimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_hostconst_converter": [[522, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_hostconst_converter"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_quantized_op_cse": [[523, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_quantized_op_cse"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.rnn_convert": [[524, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.rnn_convert"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.scale_propagation": [[525, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq": [[526, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.insert_qdq_pattern": [[527, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.insert_qdq_pattern"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.merge_duplicated_qdq": [[528, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.share_qdq_y_pattern": [[529, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "neural_compressor.tensorflow.quantization.utils.graph_util": [[530, "module-neural_compressor.tensorflow.quantization.utils.graph_util"]], "neural_compressor.tensorflow.quantization.utils": [[531, "module-neural_compressor.tensorflow.quantization.utils"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph": [[532, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.fake_quantize": [[533, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat": [[534, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_config": [[535, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_config"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_helper": [[536, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_helper"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers": [[537, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.optimize_layer": [[538, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[539, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[540, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[541, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_wrapper": [[542, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_wrapper"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_bn": [[543, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_bn"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_concatv2": [[544, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_conv": [[545, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_conv"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_deconv": [[546, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_deconv"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_in": [[547, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_in"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_matmul": [[548, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_matmul"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_pooling": [[549, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq": [[550, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.optimize_qdq": [[551, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.optimize_qdq"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base": [[552, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_bn": [[553, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_bn"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_concatv2": [[554, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_concatv2"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_conv": [[555, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_conv"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_for_intel_cpu": [[556, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_for_intel_cpu"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_matmul": [[557, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_matmul"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_pooling": [[558, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_pooling"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph_common": [[559, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph_common"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.bias_correction": [[560, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.bias_correction"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.graph_transform_base": [[561, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.graph_transform_base"]], "neural_compressor.tensorflow.quantization.utils.transform_graph": [[562, "module-neural_compressor.tensorflow.quantization.utils.transform_graph"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.insert_logging": [[563, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.insert_logging"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.rerange_quantized_concat": [[564, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.rerange_quantized_concat"]], "neural_compressor.tensorflow.quantization.utils.utility": [[565, "module-neural_compressor.tensorflow.quantization.utils.utility"]], "neural_compressor.tensorflow.utils.constants": [[566, "module-neural_compressor.tensorflow.utils.constants"]], "neural_compressor.tensorflow.utils.data": [[567, "module-neural_compressor.tensorflow.utils.data"]], "neural_compressor.tensorflow.utils": [[568, "module-neural_compressor.tensorflow.utils"]], "neural_compressor.tensorflow.utils.model": [[569, "module-neural_compressor.tensorflow.utils.model"]], "neural_compressor.tensorflow.utils.model_wrappers": [[570, "module-neural_compressor.tensorflow.utils.model_wrappers"]], "neural_compressor.tensorflow.utils.nets_factory": [[571, "module-neural_compressor.tensorflow.utils.nets_factory"]], "neural_compressor.tensorflow.utils.utility": [[572, "module-neural_compressor.tensorflow.utils.utility"]], "neural_compressor.torch.algorithms.base_algorithm": [[573, "module-neural_compressor.torch.algorithms.base_algorithm"]], "neural_compressor.torch.algorithms.habana_fp8.fp8_quant": [[574, "module-neural_compressor.torch.algorithms.habana_fp8.fp8_quant"]], "neural_compressor.torch.algorithms.habana_fp8": [[575, "module-neural_compressor.torch.algorithms.habana_fp8"]], "neural_compressor.torch.algorithms.habana_fp8.modules": [[576, "module-neural_compressor.torch.algorithms.habana_fp8.modules"]], "neural_compressor.torch.algorithms.habana_fp8.observer": [[577, "module-neural_compressor.torch.algorithms.habana_fp8.observer"]], "neural_compressor.torch.algorithms.habana_fp8.save_load": [[578, "module-neural_compressor.torch.algorithms.habana_fp8.save_load"]], "neural_compressor.torch.algorithms.habana_fp8.scale": [[579, "module-neural_compressor.torch.algorithms.habana_fp8.scale"]], "neural_compressor.torch.algorithms.habana_fp8.tensor": [[580, "module-neural_compressor.torch.algorithms.habana_fp8.tensor"]], "neural_compressor.torch.algorithms": [[581, "module-neural_compressor.torch.algorithms"]], "neural_compressor.torch.algorithms.layer_wise": [[582, "module-neural_compressor.torch.algorithms.layer_wise"]], "neural_compressor.torch.algorithms.layer_wise.load": [[583, "module-neural_compressor.torch.algorithms.layer_wise.load"]], "neural_compressor.torch.algorithms.layer_wise.modified_pickle": [[584, "module-neural_compressor.torch.algorithms.layer_wise.modified_pickle"]], "neural_compressor.torch.algorithms.layer_wise.utils": [[585, "module-neural_compressor.torch.algorithms.layer_wise.utils"]], "neural_compressor.torch.algorithms.pt2e_quant.core": [[586, "module-neural_compressor.torch.algorithms.pt2e_quant.core"]], "neural_compressor.torch.algorithms.pt2e_quant": [[587, "module-neural_compressor.torch.algorithms.pt2e_quant"]], "neural_compressor.torch.algorithms.smooth_quant": [[588, "module-neural_compressor.torch.algorithms.smooth_quant"]], "neural_compressor.torch.algorithms.smooth_quant.save_load": [[589, "module-neural_compressor.torch.algorithms.smooth_quant.save_load"]], "neural_compressor.torch.algorithms.smooth_quant.smooth_quant": [[590, "module-neural_compressor.torch.algorithms.smooth_quant.smooth_quant"]], "neural_compressor.torch.algorithms.smooth_quant.utility": [[591, "module-neural_compressor.torch.algorithms.smooth_quant.utility"]], "neural_compressor.torch.algorithms.static_quant": [[592, "module-neural_compressor.torch.algorithms.static_quant"]], "neural_compressor.torch.algorithms.static_quant.save_load": [[593, "module-neural_compressor.torch.algorithms.static_quant.save_load"]], "neural_compressor.torch.algorithms.static_quant.static_quant": [[594, "module-neural_compressor.torch.algorithms.static_quant.static_quant"]], "neural_compressor.torch.algorithms.static_quant.utility": [[595, "module-neural_compressor.torch.algorithms.static_quant.utility"]], "neural_compressor.torch.algorithms.weight_only.autoround": [[596, "module-neural_compressor.torch.algorithms.weight_only.autoround"]], "neural_compressor.torch.algorithms.weight_only.awq": [[597, "module-neural_compressor.torch.algorithms.weight_only.awq"]], "neural_compressor.torch.algorithms.weight_only.gptq": [[598, "module-neural_compressor.torch.algorithms.weight_only.gptq"]], "neural_compressor.torch.algorithms.weight_only.hqq.bitpack": [[599, "module-neural_compressor.torch.algorithms.weight_only.hqq.bitpack"]], "neural_compressor.torch.algorithms.weight_only.hqq.config": [[600, "module-neural_compressor.torch.algorithms.weight_only.hqq.config"]], "neural_compressor.torch.algorithms.weight_only.hqq.core": [[601, "module-neural_compressor.torch.algorithms.weight_only.hqq.core"]], "neural_compressor.torch.algorithms.weight_only.hqq": [[602, "module-neural_compressor.torch.algorithms.weight_only.hqq"]], "neural_compressor.torch.algorithms.weight_only.hqq.optimizer": [[603, "module-neural_compressor.torch.algorithms.weight_only.hqq.optimizer"]], "neural_compressor.torch.algorithms.weight_only.hqq.qtensor": [[604, "module-neural_compressor.torch.algorithms.weight_only.hqq.qtensor"]], "neural_compressor.torch.algorithms.weight_only.hqq.quantizer": [[605, "module-neural_compressor.torch.algorithms.weight_only.hqq.quantizer"]], "neural_compressor.torch.algorithms.weight_only.hqq.utility": [[606, "module-neural_compressor.torch.algorithms.weight_only.hqq.utility"]], "neural_compressor.torch.algorithms.weight_only": [[607, "module-neural_compressor.torch.algorithms.weight_only"]], "neural_compressor.torch.algorithms.weight_only.modules": [[608, "module-neural_compressor.torch.algorithms.weight_only.modules"]], "neural_compressor.torch.algorithms.weight_only.rtn": [[609, "module-neural_compressor.torch.algorithms.weight_only.rtn"]], "neural_compressor.torch.algorithms.weight_only.teq": [[610, "module-neural_compressor.torch.algorithms.weight_only.teq"]], "neural_compressor.torch.algorithms.weight_only.utility": [[611, "module-neural_compressor.torch.algorithms.weight_only.utility"]], "neural_compressor.torch.amp.autocast": [[612, "module-neural_compressor.torch.amp.autocast"]], "neural_compressor.torch.amp.fp8.functions": [[613, "module-neural_compressor.torch.amp.fp8.functions"]], "neural_compressor.torch.amp.fp8": [[614, "module-neural_compressor.torch.amp.fp8"]], "neural_compressor.torch.amp": [[615, "module-neural_compressor.torch.amp"]], "neural_compressor.torch": [[616, "module-neural_compressor.torch"]], "neural_compressor.torch.quantization.algorithm_entry": [[617, "module-neural_compressor.torch.quantization.algorithm_entry"]], "neural_compressor.torch.quantization.autotune": [[618, "module-neural_compressor.torch.quantization.autotune"]], "neural_compressor.torch.quantization.config": [[619, "module-neural_compressor.torch.quantization.config"]], "neural_compressor.torch.quantization": [[620, "module-neural_compressor.torch.quantization"]], "neural_compressor.torch.quantization.load_entry": [[621, "module-neural_compressor.torch.quantization.load_entry"]], "neural_compressor.torch.quantization.quantize": [[622, "module-neural_compressor.torch.quantization.quantize"]], "neural_compressor.torch.utils.auto_accelerator": [[623, "module-neural_compressor.torch.utils.auto_accelerator"]], "neural_compressor.torch.utils.constants": [[624, "module-neural_compressor.torch.utils.constants"]], "neural_compressor.torch.utils.environ": [[625, "module-neural_compressor.torch.utils.environ"]], "neural_compressor.torch.utils": [[626, "module-neural_compressor.torch.utils"]], "neural_compressor.torch.utils.utility": [[627, "module-neural_compressor.torch.utils.utility"]], "neural_compressor.training": [[628, "module-neural_compressor.training"]], "neural_compressor.utils.collect_layer_histogram": [[629, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[630, "module-neural_compressor.utils.constant"]], "neural_compressor.utils.create_obj_from_config": [[631, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[632, "module-neural_compressor.utils"]], "neural_compressor.utils.kl_divergence": [[633, "module-neural_compressor.utils.kl_divergence"]], "neural_compressor.utils.load_huggingface": [[634, "module-neural_compressor.utils.load_huggingface"]], "neural_compressor.utils.logger": [[635, "module-neural_compressor.utils.logger"]], "neural_compressor.utils.neural_insights_utils": [[636, "module-neural_compressor.utils.neural_insights_utils"]], "neural_compressor.utils.options": [[637, "module-neural_compressor.utils.options"]], "neural_compressor.utils.pytorch": [[638, "module-neural_compressor.utils.pytorch"]], "neural_compressor.utils.utility": [[639, "module-neural_compressor.utils.utility"]], "neural_compressor.utils.weights_details": [[640, "module-neural_compressor.utils.weights_details"]], "neural_compressor.version": [[641, "module-neural_compressor.version"]], "Intel\u00ae Neural Compressor Documentation": [[642, "intel-neural-compressor-documentation"], [742, "intel-neural-compressor-documentation"]], "Sections": [[642, "sections"], [742, "sections"]], "Contributor Covenant Code of Conduct": [[643, "contributor-covenant-code-of-conduct"], [644, "contributor-covenant-code-of-conduct"]], "Our Pledge": [[643, "our-pledge"]], "Our Standards": [[643, "our-standards"]], "Our Responsibilities": [[643, "our-responsibilities"]], "Scope": [[643, "scope"]], "Enforcement": [[643, "enforcement"]], "Attribution": [[643, "attribution"]], "Contribution Guidelines": [[644, "contribution-guidelines"]], "Create Pull Request": [[644, "create-pull-request"]], "Step-by-Step guidelines": [[644, "step-by-step-guidelines"]], "Pull Request Checklist": [[644, "pull-request-checklist"]], "Pull Request Template": [[644, "pull-request-template"]], "Pull Request Acceptance Criteria": [[644, "pull-request-acceptance-criteria"]], "Pull Request Status Checks Overview": [[644, "pull-request-status-checks-overview"]], "Support": [[644, "support"]], "FX": [[645, "fx"]], "Introduction": [[645, "introduction"], [646, "introduction"], [649, "introduction"], [650, "introduction"], [651, "introduction"], [666, "introduction"], [667, "introduction"], [669, "introduction"], [670, "introduction"], [673, "introduction"], [674, "introduction"], [675, "introduction"], [677, "introduction"], [679, "introduction"], [682, "introduction"], [686, "introduction"], [688, "introduction"], [689, "introduction"], [710, "introduction"], [711, "introduction"], [712, "introduction"], [724, "introduction"], [725, "introduction"], [726, "introduction"], [728, "introduction"], [730, "introduction"], [732, "introduction"], [734, "introduction"], [735, "introduction"], [736, "introduction"], [737, "introduction"], [738, "introduction"], [740, "introduction"]], "FX Mode Support Matrix in Neural Compressor": [[645, "fx-mode-support-matrix-in-neural-compressor"]], "Get Started": [[645, "get-started"], [672, "get-started"], [714, "get-started"], [729, "get-started"]], "Post Training Static Quantization": [[645, "post-training-static-quantization"], [729, "post-training-static-quantization"]], "Post Training Dynamic Quantization": [[645, "post-training-dynamic-quantization"], [729, "post-training-dynamic-quantization"]], "Quantization-Aware Training": [[645, "quantization-aware-training"]], "Examples": [[645, "examples"], [646, "examples"], [666, "examples"], [669, "examples"], [670, "examples"], [673, "examples"], [674, "examples"], [675, "examples"], [676, "examples"], [677, "examples"], [687, "examples"], [688, "examples"], [689, "examples"], [725, "examples"], [726, "examples"], [729, "examples"], [730, "examples"], [732, "examples"], [736, "examples"]], "Note": [[645, "note"]], "Details": [[645, "details"]], "Common Problem": [[645, "common-problem"]], "Dynamic Quantization": [[645, "dynamic-quantization"]], "Static Quantization & Quantization Aware Training": [[645, "static-quantization-quantization-aware-training"]], "Neural Architecture Search": [[646, "neural-architecture-search"]], "Basic NAS": [[646, "basic-nas"]], "Dynamic NAS": [[646, "dynamic-nas"]], "NAS Support Matrix": [[646, "nas-support-matrix"]], "Get Started with NAS API": [[646, "get-started-with-nas-api"]], "Basic Usage": [[646, "basic-usage"]], "1. Python code + YAML": [[646, "python-code-yaml"]], "2. Python code only": [[646, "python-code-only"]], "Advanced Usage (Custom NAS)": [[646, "advanced-usage-custom-nas"]], "Security Policy": [[647, "security-policy"]], "Report a Vulnerability": [[647, "report-a-vulnerability"]], "Intel\u00ae Neural Compressor": [[648, "intel-neural-compressor"], [707, "intel-neural-compressor"]], "What\u2019s New": [[648, "what-s-new"]], "Installation": [[648, "installation"], [683, "installation"], [683, "id1"], [701, "installation"], [709, "installation"], [714, "installation"]], "Install from pypi": [[648, "install-from-pypi"], [709, "install-from-pypi"]], "Getting Started": [[648, "getting-started"], [680, "getting-started"], [709, "getting-started"]], "Weight-Only Quantization (LLMs)": [[648, "weight-only-quantization-llms"]], "Static Quantization (Non-LLMs)": [[648, "static-quantization-non-llms"]], "Documentation": [[648, "documentation"]], "Selected Publications/Events": [[648, "selected-publications-events"]], "Additional Content": [[648, "additional-content"]], "Communication": [[648, "communication"]], "Adaptor": [[649, "adaptor"], [652, "adaptor"]], "Adaptor Support Matrix": [[649, "adaptor-support-matrix"]], "Working Flow": [[649, "working-flow"], [729, "working-flow"]], "Get Started with Adaptor API": [[649, "get-started-with-adaptor-api"]], "Query API": [[649, "query-api"]], "Background": [[649, "background"], [668, "background"]], "Query API Introduction": [[649, "query-api-introduction"]], "Example of Adding a New Backend Support": [[649, "example-of-adding-a-new-backend-support"]], "Capability": [[649, "capability"]], "Implement ONNXRTAdaptor Class": [[649, "implement-onnxrtadaptor-class"]], "How to Add An Adaptor": [[650, "how-to-add-an-adaptor"]], "API List that Need to Implement": [[650, "api-list-that-need-to-implement"]], "Design the framework YAML": [[650, "design-the-framework-yaml"]], "Add query_fw_capability to Adaptor": [[650, "add-query-fw-capability-to-adaptor"]], "Add quantize API according to tune_cfg": [[650, "add-quantize-api-according-to-tune-cfg"]], "Prepare calibration model from fp32 graph": [[650, "prepare-calibration-model-from-fp32-graph"]], "Run sampling iterations of the fp32 graph to calibrate quantizable operators.": [[650, "run-sampling-iterations-of-the-fp32-graph-to-calibrate-quantizable-operators"]], "Calculate the data range and generate quantized model": [[650, "calculate-the-data-range-and-generate-quantized-model"]], "How to Support New Data Type, Like Int4, with a Few Line Changes": [[651, "how-to-support-new-data-type-like-int4-with-a-few-line-changes"]], "Define the Quantization Ability of the Specific Operator": [[651, "define-the-quantization-ability-of-the-specific-operator"]], "Invoke the Operator Kernel According to the Tuning Configuration": [[651, "invoke-the-operator-kernel-according-to-the-tuning-configuration"]], "Use the New Data Type": [[651, "use-the-new-data-type"]], "Summary": [[651, "summary"]], "ONNX Runtime": [[653, "onnx-runtime"]], "Torch Utils": [[654, "torch-utils"]], "API Document Example": [[655, "api-document-example"]], "APIs": [[656, "apis"]], "Benchmark": [[657, "benchmark"], [687, "benchmark"], [728, "benchmark"]], "Compression": [[658, "compression"]], "Config": [[659, "config"]], "Mix Precision": [[660, "mix-precision"], [687, "mix-precision"]], "Model": [[661, "model"], [689, "model"], [710, "model"], [712, "model"]], "Objective": [[662, "objective"], [720, "objective"], [721, "objective"], [722, "objective"], [724, "objective"]], "Quantization": [[663, "quantization"], [728, "quantization"], [729, "quantization"]], "Strategy": [[664, "strategy"]], "Training": [[665, "training"]], "Benchmarking": [[666, "benchmarking"]], "Benchmark Support Matrix": [[666, "benchmark-support-matrix"]], "Get Started with Benchmark API": [[666, "get-started-with-benchmark-api"]], "Calibration Algorithms in Quantization": [[667, "calibration-algorithms-in-quantization"]], "Calibration Algorithms": [[667, "calibration-algorithms"]], "Support Matrix": [[667, "support-matrix"], [692, "support-matrix"]], "Reference": [[667, "reference"], [668, "reference"], [726, "reference"], [729, "reference"], [732, "reference"], [735, "reference"]], "INC Coding Conventions": [[668, "inc-coding-conventions"]], "Rules": [[668, "rules"]], "Imports": [[668, "imports"]], "Strings": [[668, "strings"]], "Logger": [[668, "logger"]], "Type Annotations": [[668, "type-annotations"]], "Comments": [[668, "comments"]], "TODO Comments": [[668, "todo-comments"]], "Public and Internal Interfaces": [[668, "public-and-internal-interfaces"]], "Folder structure": [[668, "folder-structure"]], "Recommend VS Code settings.json": [[668, "recommend-vs-code-settings-json"]], "DataLoader": [[669, "dataloader"]], "Supported Framework Dataloader Matrix": [[669, "supported-framework-dataloader-matrix"]], "Get Started with DataLoader": [[669, "get-started-with-dataloader"]], "Use Intel\u00ae Neural Compressor DataLoader API": [[669, "use-intel-neural-compressor-dataloader-api"]], "Build Custom Dataloader with Python API": [[669, "build-custom-dataloader-with-python-api"]], "Dataset": [[670, "dataset"]], "Supported Framework Dataset Matrix": [[670, "supported-framework-dataset-matrix"]], "TensorFlow": [[670, "tensorflow"], [686, "tensorflow"], [737, "tensorflow"]], "PyTorch": [[670, "pytorch"], [686, "pytorch"], [731, "pytorch"]], "MXNet": [[670, "mxnet"], [686, "mxnet"], [737, "mxnet"]], "ONNXRT": [[670, "onnxrt"], [686, "onnxrt"], [737, "onnxrt"]], "Get start with Dataset API": [[670, "get-start-with-dataset-api"]], "Config dataloader in a yaml file": [[670, "config-dataloader-in-a-yaml-file"]], "User-specific dataset": [[670, "user-specific-dataset"]], "Design": [[671, "design"], [738, "design"], [738, "id1"], [738, "id3"], [738, "id5"], [738, "id7"], [738, "id9"], [738, "id11"], [738, "id13"], [738, "id15"], [738, "id17"], [738, "id19"], [738, "id21"]], "Architecture": [[671, "architecture"], [682, "architecture"]], "Workflow": [[671, "workflow"]], "Diagnosis": [[672, "diagnosis"]], "Diagnosis Introduction": [[672, "diagnosis-introduction"]], "Supported Feature Matrix": [[672, "supported-feature-matrix"], [675, "supported-feature-matrix"], [679, "supported-feature-matrix"], [682, "supported-feature-matrix"], [728, "supported-feature-matrix"], [729, "supported-feature-matrix"], [736, "supported-feature-matrix"], [740, "supported-feature-matrix"]], "Install Intel\u00ae Neural Compressor": [[672, "install-intel-neural-compressor"]], "Modify script": [[672, "modify-script"]], "Quantization diagnosis": [[672, "quantization-diagnosis"]], "Benchmark diagnosis": [[672, "benchmark-diagnosis"]], "Example": [[672, "example"], [686, "example"], [692, "example"], [696, "example"], [724, "example"]], "Prepare dataset": [[672, "prepare-dataset"]], "Run quantization script": [[672, "run-quantization-script"]], "Run benchmark script": [[672, "run-benchmark-script"]], "See quantization data": [[672, "see-quantization-data"]], "How to do diagnosis": [[672, "how-to-do-diagnosis"]], "Parameter description": [[672, "parameter-description"]], "Diagnosis suggestions": [[672, "diagnosis-suggestions"]], "Fallback setting example": [[672, "fallback-setting-example"]], "See profiling data": [[672, "see-profiling-data"]], "Distillation": [[673, "distillation"], [687, "distillation"], [728, "distillation"]], "Knowledge Distillation": [[673, "knowledge-distillation"]], "Intermediate Layer Knowledge Distillation": [[673, "intermediate-layer-knowledge-distillation"]], "Self Distillation": [[673, "self-distillation"]], "Distillation Support Matrix": [[673, "distillation-support-matrix"]], "Get Started with Distillation API": [[673, "get-started-with-distillation-api"]], "Distillation for Quantization": [[674, "distillation-for-quantization"]], "Distillation for Quantization Support Matrix": [[674, "distillation-for-quantization-support-matrix"]], "Get Started with Distillation for Quantization API": [[674, "get-started-with-distillation-for-quantization-api"]], "Distributed Training and Inference (Evaluation)": [[675, "distributed-training-and-inference-evaluation"]], "Get Started with Distributed Training and Inference API": [[675, "get-started-with-distributed-training-and-inference-api"]], "Option 1: Pure Yaml Configuration": [[675, "option-1-pure-yaml-configuration"]], "Option 2: User Defined Training Function": [[675, "option-2-user-defined-training-function"]], "Horovodrun Execution": [[675, "horovodrun-execution"]], "Security": [[675, "security"]], "PyTorch Examples:": [[675, "pytorch-examples"]], "TensorFlow Examples:": [[675, "tensorflow-examples"]], "Example List": [[676, "example-list"]], "Release Data": [[676, "release-data"]], "Export": [[677, "export"]], "Supported Framework Model Matrix": [[677, "supported-framework-model-matrix"], [689, "supported-framework-model-matrix"], [730, "supported-framework-model-matrix"], [732, "supported-framework-model-matrix"]], "PyTorch Model": [[677, "pytorch-model"]], "FP32 Model Export": [[677, "fp32-model-export"], [677, "id1"]], "INT8 Model Export": [[677, "int8-model-export"], [677, "id2"]], "Tensorflow Model": [[677, "tensorflow-model"]], "Appendix": [[677, "appendix"]], "Supported quantized ops": [[677, "supported-quantized-ops"]], "Frequently Asked Questions": [[678, "frequently-asked-questions"]], "Common Build Issues": [[678, "common-build-issues"]], "Issue 1:": [[678, "issue-1"]], "Issue 2:": [[678, "issue-2"]], "Issue 3:": [[678, "issue-3"]], "Issue 4:": [[678, "issue-4"]], "Framework YAML Configuration Files": [[679, "framework-yaml-configuration-files"]], "Get started with Framework YAML Files": [[679, "get-started-with-framework-yaml-files"]], "Quick Samples": [[680, "quick-samples"]], "Quantization with Python API": [[680, "quantization-with-python-api"], [709, "quantization-with-python-api"]], "Validated Models": [[680, "validated-models"], [735, "validated-models"], [741, "validated-models"]], "Incompatible changes between v1.2 and v1.1": [[681, "incompatible-changes-between-v1-2-and-v1-1"]], "User-facing APIs": [[681, "user-facing-apis"]], "Built-in transform/dataset/metric APIs": [[681, "built-in-transform-dataset-metric-apis"]], "Infrastructure of Intel\u00ae Neural Compressor": [[682, "infrastructure-of-intel-neural-compressor"]], "Prerequisites": [[683, "prerequisites"], [714, "prerequisites"], [715, "prerequisites"]], "Install from Binary": [[683, "install-from-binary"]], "Install from Source": [[683, "install-from-source"], [709, "install-from-source"]], "Install from AI Kit": [[683, "install-from-ai-kit"]], "System Requirements": [[683, "system-requirements"]], "Validated Hardware Environment": [[683, "validated-hardware-environment"]], "Intel\u00ae Neural Compressor supports CPUs based on Intel 64 architecture or compatible processors:": [[683, "intel-neural-compressor-supports-cpus-based-on-intel-64-architecture-or-compatible-processors"]], "Intel\u00ae Neural Compressor supports GPUs built on Intel\u2019s Xe architecture:": [[683, "intel-neural-compressor-supports-gpus-built-on-intel-s-xe-architecture"]], "Intel\u00ae Neural Compressor quantized ONNX models support multiple hardware vendors through ONNX Runtime:": [[683, "intel-neural-compressor-quantized-onnx-models-support-multiple-hardware-vendors-through-onnx-runtime"]], "Validated Software Environment": [[683, "validated-software-environment"]], "Legal Information": [[684, "legal-information"]], "License": [[684, "license"]], "Citation": [[684, "citation"]], "Trademarks": [[684, "trademarks"]], "LLMs Quantization Recipes": [[685, "llms-quantization-recipes"]], "Large Language Models Recipes": [[685, "large-language-models-recipes"]], "Large Language Models Accuracy": [[685, "large-language-models-accuracy"]], "Metrics": [[686, "metrics"]], "Supported Built-in Metric Matrix": [[686, "supported-built-in-metric-matrix"]], "Get Started with Metric": [[686, "get-started-with-metric"]], "Use Intel\u00ae Neural Compressor Metric API": [[686, "use-intel-neural-compressor-metric-api"]], "Build Custom Metric with Python API": [[686, "build-custom-metric-with-python-api"]], "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X": [[687, "code-migration-from-intel-neural-compressor-1-x-to-intel-neural-compressor-2-x"]], "Model Quantization": [[687, "model-quantization"]], "Post-training Quantization": [[687, "post-training-quantization"]], "Quantization Aware Training": [[687, "quantization-aware-training"], [729, "quantization-aware-training"], [729, "id1"]], "Pruning": [[687, "pruning"], [726, "pruning"], [728, "pruning"]], "Orchestration": [[687, "orchestration"]], "Mixed Precision": [[688, "mixed-precision"]], "Mixed Precision Support Matrix": [[688, "mixed-precision-support-matrix"]], "Hardware and Software requests for BF16": [[688, "hardware-and-software-requests-for-bf16"]], "Hardware and Software requests for FP16": [[688, "hardware-and-software-requests-for-fp16"]], "During quantization mixed precision": [[688, "during-quantization-mixed-precision"]], "Accuracy-driven mixed precision": [[688, "accuracy-driven-mixed-precision"]], "Get Started with Mixed Precision API": [[688, "get-started-with-mixed-precision-api"]], "Neural Coder": [[690, "neural-coder"], [707, "neural-coder"], [707, "id1"]], "What do we offer?": [[690, "what-do-we-offer"]], "Getting Started!": [[690, "getting-started"], [701, "getting-started"]], "Jupyter Lab Extension": [[690, "jupyter-lab-extension"]], "Python Launcher": [[690, "python-launcher"], [695, "python-launcher"]], "Python API": [[690, "python-api"]], "Contact": [[690, "contact"], [714, "contact"]], "AWS Amazon SageMaker Support": [[691, "aws-amazon-sagemaker-support"]], "Start Jupyter Lab 3": [[691, "start-jupyter-lab-3"]], "For SageMaker Studio": [[691, "for-sagemaker-studio"]], "For SageMaker Notebook instance": [[691, "for-sagemaker-notebook-instance"]], "Installation Guide": [[691, "installation-guide"]], "BigDL Nano Support": [[692, "bigdl-nano-support"]], "Intel CPU Platforms: Best Performance Setting": [[693, "intel-cpu-platforms-best-performance-setting"]], "Install MKL, OpenMP and JEMALLOC": [[693, "install-mkl-openmp-and-jemalloc"]], "Install NUMA Controller": [[693, "install-numa-controller"]], "Environment Variables": [[693, "environment-variables"]], "Frequency Governers": [[693, "frequency-governers"]], "Neural Coder as Python API": [[694, "neural-coder-as-python-api"]], "Enable": [[694, "enable"]], "Bench": [[694, "bench"]], "SuperBench": [[694, "superbench"]], "Quick-Start": [[695, "quick-start"]], "Launcher Arguments (Optional)": [[695, "launcher-arguments-optional"]], "Neural Coder for Quantization": [[696, "neural-coder-for-quantization"]], "Features Supported": [[696, "features-supported"]], "Models Supported": [[696, "models-supported"]], "Usage": [[696, "usage"], [716, "usage"], [716, "id2"], [716, "id6"], [716, "id9"], [716, "id16"], [716, "id19"], [716, "id22"], [716, "id25"], [735, "usage"], [736, "usage"], [736, "id1"], [738, "usage"], [738, "id2"], [738, "id4"], [738, "id6"], [738, "id8"], [738, "id10"], [738, "id12"], [738, "id14"], [738, "id16"], [738, "id18"], [738, "id20"], [738, "id22"]], "PyPI distribution:": [[696, "pypi-distribution"]], "Supported Optimization Features": [[697, "supported-optimization-features"]], "v0.4": [[698, "v0-4"]], "Highlights": [[698, "highlights"]], "Others": [[698, "others"]], "Changelog": [[699, "changelog"], [703, "changelog"]], "neural_compressor_ext_lab": [[700, "neural-compressor-ext-lab"]], "Requirements": [[700, "requirements"], [704, "requirements"], [710, "requirements"], [711, "requirements"], [712, "requirements"], [720, "requirements"]], "Install": [[700, "install"]], "Uninstall": [[700, "uninstall"]], "Contributing": [[700, "contributing"], [704, "contributing"]], "Development install": [[700, "development-install"], [704, "development-install"]], "Development uninstall": [[700, "development-uninstall"], [704, "development-uninstall"]], "Packaging the extension": [[700, "packaging-the-extension"], [704, "packaging-the-extension"]], "Intel\u00ae Neural Compressor as JupyterLab Extension": [[701, "intel-neural-compressor-as-jupyterlab-extension"]], "Auto-enable a feature": [[701, "auto-enable-a-feature"]], "Or let us help you auto-select the best feature": [[701, "or-let-us-help-you-auto-select-the-best-feature"]], "Pre-requisites": [[701, "pre-requisites"]], "Making a new release of neural_compressor_ext_lab": [[702, "making-a-new-release-of-neural-compressor-ext-lab"]], "Manual release": [[702, "manual-release"], [705, "manual-release"]], "Python package": [[702, "python-package"], [705, "python-package"]], "NPM package": [[702, "npm-package"], [705, "npm-package"]], "Automated releases with the Jupyter Releaser": [[702, "automated-releases-with-the-jupyter-releaser"], [705, "automated-releases-with-the-jupyter-releaser"]], "Publishing to conda-forge": [[702, "publishing-to-conda-forge"], [705, "publishing-to-conda-forge"]], "neural_compressor_ext_lab_alibaba": [[704, "neural-compressor-ext-lab-alibaba"]], "Making a new release of neural_compressor_ext_lab_alibaba": [[705, "making-a-new-release-of-neural-compressor-ext-lab-alibaba"]], "Change Log": [[706, "change-log"]], "[Unreleased]": [[706, "unreleased"]], "Background Introduction": [[707, "background-introduction"]], "Neural Coder Extension in VSCode": [[707, "neural-coder-extension-in-vscode"]], "Neural Coder Extension Usage": [[707, "neural-coder-extension-usage"]], "1. Open": [[707, "open"]], "2. Search": [[707, "search"]], "3. Setting": [[707, "setting"]], "4. Icon": [[707, "icon"]], "5. optimization (quantization)": [[707, "optimization-quantization"]], "5.1 Enable": [[707, "enable"]], "5.2 Auto": [[707, "auto"]], "Welcome to your VS Code Extension": [[708, "welcome-to-your-vs-code-extension"]], "What\u2019s in the folder": [[708, "what-s-in-the-folder"]], "Setup": [[708, "setup"]], "Get up and running straight away": [[708, "get-up-and-running-straight-away"]], "Make changes": [[708, "make-changes"]], "Explore the API": [[708, "explore-the-api"]], "Run tests": [[708, "run-tests"]], "Go further": [[708, "go-further"]], "Neural Insights": [[709, "neural-insights"]], "Start the Neural Insights": [[709, "start-the-neural-insights"]], "Tensor dump examples": [[709, "tensor-dump-examples"]], "Step by Step Diagnosis Example": [[709, "step-by-step-diagnosis-example"]], "Research Collaborations": [[709, "research-collaborations"]], "Step by step example how to debug accuracy with Neural Insights": [[710, "step-by-step-example-how-to-debug-accuracy-with-neural-insights"], [712, "step-by-step-example-how-to-debug-accuracy-with-neural-insights"]], "Preparation": [[710, "preparation"], [711, "preparation"], [712, "preparation"], [734, "preparation"]], "Running the quantization": [[710, "running-the-quantization"], [711, "running-the-quantization"], [712, "running-the-quantization"]], "Analyzing the result of quantization": [[710, "analyzing-the-result-of-quantization"], [712, "analyzing-the-result-of-quantization"]], "Weights summary": [[710, "weights-summary"]], "Activations summary": [[710, "activations-summary"]], "Step by step example how to dump weights data for PyTorch model with Neural Insights": [[711, "step-by-step-example-how-to-dump-weights-data-for-pytorch-model-with-neural-insights"]], "Source": [[711, "source"], [712, "source"]], "Prepare the dataset": [[712, "prepare-the-dataset"]], "Analyzing weight histograms": [[712, "analyzing-weight-histograms"]], "Open Neural Insights": [[712, "open-neural-insights"]], "Getting Started with Create React App": [[713, "getting-started-with-create-react-app"]], "Available Scripts": [[713, "available-scripts"]], "npm start": [[713, "npm-start"]], "npm test": [[713, "npm-test"]], "npm run build": [[713, "npm-run-build"]], "npm run eject": [[713, "npm-run-eject"]], "Learn More": [[713, "learn-more"], [714, "learn-more"]], "Code Splitting": [[713, "code-splitting"]], "Analyzing the Bundle Size": [[713, "analyzing-the-bundle-size"]], "Making a Progressive Web App": [[713, "making-a-progressive-web-app"]], "Advanced Configuration": [[713, "advanced-configuration"]], "Deployment": [[713, "deployment"]], "npm run build fails to minify": [[713, "npm-run-build-fails-to-minify"]], "What\u2019s Neural Solution?": [[714, "what-s-neural-solution"]], "Why Neural Solution?": [[714, "why-neural-solution"]], "How does Neural Solution Work?": [[714, "how-does-neural-solution-work"]], "Method 1. Using pip:": [[714, "method-1-using-pip"]], "Method 2. Building from source:": [[714, "method-2-building-from-source"]], "End-to-end examples": [[714, "end-to-end-examples"]], "Get started": [[715, "get-started"]], "Install Neural Solution": [[715, "install-neural-solution"]], "Method 1. Using pip": [[715, "method-1-using-pip"]], "Method 2. Building from source": [[715, "method-2-building-from-source"]], "Start service": [[715, "start-service"]], "Submit task": [[715, "submit-task"]], "Query task status": [[715, "query-task-status"]], "Stop service": [[715, "stop-service"]], "Inspect logs": [[715, "inspect-logs"]], "Manage resource": [[715, "manage-resource"], [720, "manage-resource"], [721, "manage-resource"]], "Node States": [[715, "node-states"]], "Query cluster": [[715, "query-cluster"]], "Add node": [[715, "add-node"]], "Remove node": [[715, "remove-node"]], "Neural Solution API": [[716, "neural-solution-api"]], "Base URL": [[716, "base-url"]], "Endpoints": [[716, "endpoints"]], "GET /": [[716, "get"]], "Description": [[716, "description"], [716, "id1"], [716, "id4"], [716, "id8"], [716, "id12"], [716, "id15"], [716, "id18"], [716, "id21"], [716, "id24"]], "Responses": [[716, "responses"], [716, "id3"], [716, "id7"], [716, "id11"], [716, "id14"], [716, "id17"], [716, "id20"], [716, "id23"], [716, "id26"]], "POST /task/submit": [[716, "post-task-submit"]], "Parameters": [[716, "parameters"], [716, "id5"], [716, "id10"], [716, "id13"]], "GET /task/status/{task_id}": [[716, "get-task-status-task-id"]], "GET /task/log/{task_id}": [[716, "get-task-log-task-id"]], "WebSocket /task/screen/{task_id}": [[716, "websocket-task-screen-task-id"]], "GET /ping": [[716, "get-ping"]], "GET /cluster": [[716, "get-cluster"]], "GET /download/{task_id}": [[716, "get-download-task-id"]], "GET /description": [[716, "get-description"]], "Design Doc for Optimization as a Service [WIP]": [[717, "design-doc-for-optimization-as-a-service-wip"]], "Contents": [[717, "contents"]], "Overview": [[717, "overview"], [739, "overview"]], "Workflow of OaaS": [[717, "workflow-of-oaas"]], "Class definition diagram": [[717, "class-definition-diagram"]], "Extensibility": [[717, "extensibility"]], "Task request description": [[718, "task-request-description"]], "Examples List": [[719, "examples-list"]], "An end-to-end example: quantize a custom model with Neural Solution": [[720, "an-end-to-end-example-quantize-a-custom-model-with-neural-solution"]], "Start the Neural Solution Service": [[720, "start-the-neural-solution-service"], [721, "start-the-neural-solution-service"], [722, "start-the-neural-solution-service"]], "Submit optimization task": [[720, "submit-optimization-task"], [721, "submit-optimization-task"], [722, "submit-optimization-task"]], "Query optimization result": [[720, "query-optimization-result"], [721, "query-optimization-result"], [722, "query-optimization-result"]], "Download optimized model": [[720, "download-optimized-model"], [721, "download-optimized-model"]], "Stop the service": [[720, "stop-the-service"], [721, "stop-the-service"], [722, "stop-the-service"]], "An end-to-end example: quantize a Hugging Face model with Neural Solution": [[721, "an-end-to-end-example-quantize-a-hugging-face-model-with-neural-solution"]], "An end-to-end example: quantize a Hugging Face model with Neural Solution gRPC API": [[722, "an-end-to-end-example-quantize-a-hugging-face-model-with-neural-solution-grpc-api"]], "Client": [[723, "client"]], "Single Objective": [[724, "single-objective"]], "Multiple Objectives": [[724, "multiple-objectives"]], "Objective Support Matrix": [[724, "objective-support-matrix"]], "Get Started with Objective API": [[724, "get-started-with-objective-api"]], "Config Single Objective": [[724, "config-single-objective"]], "Config Multiple Objectives": [[724, "config-multiple-objectives"]], "Optimization Orchestration": [[725, "optimization-orchestration"]], "One-shot": [[725, "one-shot"]], "Orchestration Support Matrix": [[725, "orchestration-support-matrix"]], "Get Started with Orchestration API": [[725, "get-started-with-orchestration-api"]], "Neural Network Pruning": [[726, "neural-network-pruning"]], "Pruning Patterns": [[726, "pruning-patterns"]], "Pruning Criteria": [[726, "pruning-criteria"]], "Pruning Types": [[726, "pruning-types"]], "Pruning Schedules": [[726, "pruning-schedules"]], "Pruning Scope": [[726, "pruning-scope"]], "Sparsity Decay Types": [[726, "sparsity-decay-types"]], "Regularization": [[726, "regularization"]], "Large Language Model Pruning": [[726, "large-language-model-pruning"]], "Pruning Support Matrix": [[726, "pruning-support-matrix"]], "Get Started with Pruning API": [[726, "get-started-with-pruning-api"]], "Training-aware pruning API": [[726, "training-aware-pruning-api"]], "Retrain-free Pruning API": [[726, "retrain-free-pruning-api"]], "Sparse Model Deployment": [[726, "sparse-model-deployment"]], "Pruning with Hyperparameter Optimization": [[726, "pruning-with-hyperparameter-optimization"]], "Full Publications/Events (80)": [[727, "full-publications-events-80"]], "2024 (1)": [[727, "id1"]], "2023 (25)": [[727, "id2"]], "2022 (35)": [[727, "id3"]], "2021 (15)": [[727, "id4"]], "2018 - 2020 (4)": [[727, "id5"]], "Pythonic Style Access for Configurations": [[728, "pythonic-style-access-for-configurations"]], "Pythonic API for User Configurations": [[728, "pythonic-api-for-user-configurations"], [728, "id1"]], "Pythonic API for Framework Configurations": [[728, "pythonic-api-for-framework-configurations"], [728, "id2"]], "Get Started with Pythonic API for Configurations": [[728, "get-started-with-pythonic-api-for-configurations"]], "NAS": [[728, "nas"]], "Quantization Introduction": [[729, "quantization-introduction"]], "Quantization Fundamentals": [[729, "quantization-fundamentals"], [735, "quantization-fundamentals"]], "Quantization Support Matrix": [[729, "quantization-support-matrix"]], "Quantization Scheme in TensorFlow": [[729, "quantization-scheme-in-tensorflow"]], "Quantization Scheme in PyTorch": [[729, "quantization-scheme-in-pytorch"]], "Quantization Scheme in IPEX": [[729, "quantization-scheme-in-ipex"]], "Quantization Scheme in MXNet": [[729, "quantization-scheme-in-mxnet"]], "Quantization Scheme in ONNX Runtime": [[729, "quantization-scheme-in-onnx-runtime"]], "Quantization Approaches": [[729, "quantization-approaches"]], "With or Without Accuracy Aware Tuning": [[729, "with-or-without-accuracy-aware-tuning"]], "Post Training Quantization": [[729, "post-training-quantization"]], "Specify Quantization Rules": [[729, "specify-quantization-rules"]], "Specify Quantization Recipes": [[729, "specify-quantization-recipes"]], "Specify Quantization Backend and Device": [[729, "specify-quantization-backend-and-device"]], "Layer Wise Quantization (LWQ)": [[730, "layer-wise-quantization-lwq"]], "PyTorch framework example": [[730, "pytorch-framework-example"]], "ONNX Runtime framework example": [[730, "onnx-runtime-framework-example"]], "Turn OFF Auto Mixed Precision during Quantization": [[731, "turn-off-auto-mixed-precision-during-quantization"]], "Tensorflow": [[731, "tensorflow"]], "Weight Only Quantization (WOQ)": [[732, "weight-only-quantization-woq"]], "Quantization Capability": [[732, "quantization-capability"]], "Export Compressed Model": [[732, "export-compressed-model"]], "User Code Example": [[732, "user-code-example"]], "WOQ Algorithms Tuning": [[732, "woq-algorithms-tuning"]], "User code example": [[732, "id1"]], "Release": [[733, "release"]], "Release Notes": [[733, "release-notes"]], "Known Issues": [[733, "known-issues"]], "Incompatible Changes": [[733, "incompatible-changes"]], "SigOpt Strategy": [[734, "sigopt-strategy"]], "SigOpt Platform": [[734, "sigopt-platform"]], "Neural Compressor Configuration": [[734, "neural-compressor-configuration"]], "Performance": [[734, "performance"]], "Benefit of SigOpt Strategy": [[734, "benefit-of-sigopt-strategy"]], "Performance Comparison of Different Strategies": [[734, "performance-comparison-of-different-strategies"]], "Smooth Quant": [[735, "smooth-quant"]], "Per-tensor & Per-channel": [[735, "per-tensor-per-channel"]], "Per-tensor example": [[735, "per-tensor-example"]], "Per-channel example": [[735, "per-channel-example"]], "Matmul quantization example": [[735, "matmul-quantization-example"]], "Per-channel limitation": [[735, "per-channel-limitation"]], "SmoothQuant and Our Enhancement": [[735, "smoothquant-and-our-enhancement"]], "SmoothQuant": [[735, "smoothquant"]], "Our enhancement:": [[735, "our-enhancement"]], "Algorithm: Auto-tuning of $\\alpha$.": [[735, "algorithm-auto-tuning-of-alpha"]], "Engineering": [[735, "engineering"]], "Using a fixed alpha": [[735, "using-a-fixed-alpha"]], "Determining the alpha through auto-tuning": [[735, "determining-the-alpha-through-auto-tuning"]], "Auto-tune the alpha for the entire model": [[735, "auto-tune-the-alpha-for-the-entire-model"]], "Auto-tune the alpha for each layer/block": [[735, "auto-tune-the-alpha-for-each-layer-block"]], "Supported Framework Matrix": [[735, "supported-framework-matrix"]], "TensorBoard": [[736, "tensorboard"]], "Get Started with TensorBoard": [[736, "get-started-with-tensorboard"]], "PyTorch TensorBoard": [[736, "pytorch-tensorboard"]], "TensorFlow Tensorboard": [[736, "tensorflow-tensorboard"]], "PyTorch Examples": [[736, "pytorch-examples"]], "TensorFlow Examples": [[736, "tensorflow-examples"]], "Transform": [[737, "transform"]], "Transform Support List": [[737, "transform-support-list"]], "Pytorch": [[737, "pytorch"]], "Tuning Strategies": [[738, "tuning-strategies"]], "Strategy Design": [[738, "strategy-design"]], "Tuning Space": [[738, "tuning-space"]], "Exit Policy": [[738, "exit-policy"]], "Accuracy Criteria": [[738, "accuracy-criteria"]], "Tuning Process": [[738, "tuning-process"]], "Tuning Algorithms": [[738, "tuning-algorithms"]], "Auto": [[738, "auto"]], "Conservative Tuning": [[738, "conservative-tuning"]], "Basic": [[738, "basic"]], "MSE": [[738, "mse"]], "MSE_V2": [[738, "mse-v2"]], "HAWQ_V2": [[738, "hawq-v2"]], "Bayesian": [[738, "bayesian"]], "Exhaustive": [[738, "exhaustive"]], "Random": [[738, "random"]], "SigOpt": [[738, "sigopt"]], "TPE": [[738, "tpe"]], "Distributed Tuning": [[738, "distributed-tuning"]], "Customize a New Tuning Strategy": [[738, "customize-a-new-tuning-strategy"]], "User Guide": [[739, "user-guide"]], "Python-based APIs": [[739, "python-based-apis"]], "Neural Coder (Zero-code Optimization)": [[739, "neural-coder-zero-code-optimization"]], "Advanced Topics": [[739, "advanced-topics"]], "Innovations for Productivity": [[739, "innovations-for-productivity"]], "User YAML Configuration Files": [[740, "user-yaml-configuration-files"]], "Get started with User YAML Files": [[740, "get-started-with-user-yaml-files"]], "Validated Quantization Examples": [[741, "validated-quantization-examples"]], "TensorFlow Models with TensorFlow 2.15.0": [[741, "tensorflow-models-with-tensorflow-2-15-0"]], "PyTorch Models with Torch 2.2.1+cpu in PTQ Mode": [[741, "pytorch-models-with-torch-2-2-1-cpu-in-ptq-mode"]], "PyTorch Models with Torch 2.2.1+cpu in QAT Mode": [[741, "pytorch-models-with-torch-2-2-1-cpu-in-qat-mode"]], "PyTorch Models with Torch 2.0.1+cpu in WOQ Mode": [[741, "pytorch-models-with-torch-2-0-1-cpu-in-woq-mode"]], "ONNX Models with ONNX Runtime 1.17.1": [[741, "onnx-models-with-onnx-runtime-1-17-1"]], "ONNX Models with ONNX Runtime 1.15.0 in WOQ Mode": [[741, "onnx-models-with-onnx-runtime-1-15-0-in-woq-mode"]], "Validated Pruning Examples": [[741, "validated-pruning-examples"]], "Validated Knowledge Distillation Examples": [[741, "validated-knowledge-distillation-examples"]], "Validated ONNX QDQ INT8 Models on Multiple Hardware through ONNX Runtime": [[741, "validated-onnx-qdq-int8-models-on-multiple-hardware-through-onnx-runtime"]]}, "indexentries": {"block_mask": [[0, "module-block_mask"]], "module": [[0, "module-block_mask"], [1, "module-neural_compressor.adaptor.adaptor"], [2, "module-neural_compressor.adaptor"], [3, "module-neural_compressor.adaptor.keras"], [4, "module-neural_compressor.adaptor.keras_utils.conv2d"], [5, "module-neural_compressor.adaptor.keras_utils.dense"], [6, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"], [7, "module-neural_compressor.adaptor.keras_utils"], [8, "module-neural_compressor.adaptor.keras_utils.pool2d"], [9, "module-neural_compressor.adaptor.keras_utils.quantizer"], [10, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"], [11, "module-neural_compressor.adaptor.mxnet"], [12, "module-neural_compressor.adaptor.mxnet_utils"], [13, "module-neural_compressor.adaptor.mxnet_utils.util"], [14, "module-neural_compressor.adaptor.onnxrt"], [15, "module-neural_compressor.adaptor.ox_utils.calibration"], [16, "module-neural_compressor.adaptor.ox_utils.calibrator"], [17, "module-neural_compressor.adaptor.ox_utils"], [18, "module-neural_compressor.adaptor.ox_utils.operators.activation"], [19, "module-neural_compressor.adaptor.ox_utils.operators.argmax"], [20, "module-neural_compressor.adaptor.ox_utils.operators.attention"], [21, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"], [22, "module-neural_compressor.adaptor.ox_utils.operators.concat"], [23, "module-neural_compressor.adaptor.ox_utils.operators.conv"], [24, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"], [25, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"], [26, "module-neural_compressor.adaptor.ox_utils.operators.gather"], [27, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"], [28, "module-neural_compressor.adaptor.ox_utils.operators.gemm"], [29, "module-neural_compressor.adaptor.ox_utils.operators"], [30, "module-neural_compressor.adaptor.ox_utils.operators.lstm"], [31, "module-neural_compressor.adaptor.ox_utils.operators.matmul"], [32, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"], [33, "module-neural_compressor.adaptor.ox_utils.operators.norm"], [34, "module-neural_compressor.adaptor.ox_utils.operators.ops"], [35, "module-neural_compressor.adaptor.ox_utils.operators.pad"], [36, "module-neural_compressor.adaptor.ox_utils.operators.pooling"], [37, "module-neural_compressor.adaptor.ox_utils.operators.reduce"], [38, "module-neural_compressor.adaptor.ox_utils.operators.resize"], [39, "module-neural_compressor.adaptor.ox_utils.operators.split"], [40, "module-neural_compressor.adaptor.ox_utils.operators.unary_op"], [41, "module-neural_compressor.adaptor.ox_utils.quantizer"], [42, "module-neural_compressor.adaptor.ox_utils.smooth_quant"], [43, "module-neural_compressor.adaptor.ox_utils.util"], [44, "module-neural_compressor.adaptor.ox_utils.weight_only"], [45, "module-neural_compressor.adaptor.pytorch"], [46, "module-neural_compressor.adaptor.query"], [47, "module-neural_compressor.adaptor.tensorflow"], [48, "module-neural_compressor.adaptor.tf_utils.graph_converter"], [49, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"], [50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"], [51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer"], [52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"], [53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"], [54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"], [55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"], [56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"], [57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"], [58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"], [59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"], [60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"], [61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"], [62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"], [63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"], [64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"], [65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"], [66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"], [67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"], [68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"], [69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"], [70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"], [71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"], [72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"], [73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"], [74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"], [75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"], [76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"], [77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"], [78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"], [79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"], [80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"], [81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"], [82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"], [83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"], [84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"], [85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"], [86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"], [87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"], [88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"], [89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"], [90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"], [91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"], [92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"], [93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"], [94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"], [95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"], [96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"], [97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"], [98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"], [99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"], [100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"], [101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"], [102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"], [103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"], [104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"], [105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"], [106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"], [107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"], [108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"], [109, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"], [110, "module-neural_compressor.adaptor.tf_utils.graph_util"], [111, "module-neural_compressor.adaptor.tf_utils"], [112, "module-neural_compressor.adaptor.tf_utils.quantize_graph"], [113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"], [114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"], [115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"], [116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"], [117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"], [118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"], [119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"], [120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"], [121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"], [122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"], [123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"], [124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"], [125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"], [126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"], [127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"], [128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"], [129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"], [130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"], [131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"], [132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"], [133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"], [134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"], [135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"], [136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"], [137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"], [138, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"], [139, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"], [140, "module-neural_compressor.adaptor.tf_utils.smooth_quant_calibration"], [141, "module-neural_compressor.adaptor.tf_utils.smooth_quant_scaler"], [142, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"], [143, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"], [144, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"], [145, "module-neural_compressor.adaptor.tf_utils.transform_graph"], [146, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"], [147, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"], [148, "module-neural_compressor.adaptor.tf_utils.util"], [149, "module-neural_compressor.adaptor.torch_utils.auto_round"], [150, "module-neural_compressor.adaptor.torch_utils.awq"], [151, "module-neural_compressor.adaptor.torch_utils.bf16_convert"], [152, "module-neural_compressor.adaptor.torch_utils.gptq"], [153, "module-neural_compressor.adaptor.torch_utils.hawq_metric"], [154, "module-neural_compressor.adaptor.torch_utils"], [155, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant"], [156, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle"], [157, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize"], [158, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load"], [159, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.utils"], [160, "module-neural_compressor.adaptor.torch_utils.mixed_precision"], [161, "module-neural_compressor.adaptor.torch_utils.model_wrapper"], [162, "module-neural_compressor.adaptor.torch_utils.pattern_detector"], [163, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"], [164, "module-neural_compressor.adaptor.torch_utils.teq"], [165, "module-neural_compressor.adaptor.torch_utils.util"], [166, "module-neural_compressor.adaptor.torch_utils.waq.auto_alpha"], [167, "module-neural_compressor.adaptor.torch_utils.waq.calibration"], [168, "module-neural_compressor.adaptor.torch_utils.waq.graph_trace"], [169, "module-neural_compressor.adaptor.torch_utils.waq"], [170, "module-neural_compressor.adaptor.torch_utils.waq.smooth_quant"], [171, "module-neural_compressor.adaptor.torch_utils.waq.utils"], [172, "module-neural_compressor.adaptor.torch_utils.weight_only"], [173, "module-neural_compressor.algorithm.algorithm"], [174, "module-neural_compressor.algorithm.fast_bias_correction"], [175, "module-neural_compressor.algorithm"], [176, "module-neural_compressor.algorithm.smooth_quant"], [177, "module-neural_compressor.algorithm.weight_correction"], [178, "module-neural_compressor.benchmark"], [179, "module-neural_compressor.common.base_config"], [180, "module-neural_compressor.common.base_tuning"], [181, "module-neural_compressor.common"], [182, "module-neural_compressor.common.tuning_param"], [183, "module-neural_compressor.common.utils.constants"], [184, "module-neural_compressor.common.utils"], [185, "module-neural_compressor.common.utils.logger"], [186, "module-neural_compressor.common.utils.save_load"], [187, "module-neural_compressor.common.utils.utility"], [188, "module-neural_compressor.compression.callbacks"], [189, "module-neural_compressor.compression.distillation.criterions"], [190, "module-neural_compressor.compression.distillation"], [191, "module-neural_compressor.compression.distillation.optimizers"], [192, "module-neural_compressor.compression.distillation.utility"], [193, "module-neural_compressor.compression.hpo"], [194, "module-neural_compressor.compression.hpo.sa_optimizer"], [195, "module-neural_compressor.compression.hpo.search_algorithms"], [196, "module-neural_compressor.compression.hpo.search_space"], [197, "module-neural_compressor.compression"], [198, "module-neural_compressor.compression.pruner.criteria"], [199, "module-neural_compressor.compression.pruner.dsnot"], [200, "module-neural_compressor.compression.pruner"], [201, "module-neural_compressor.compression.pruner.model_slim.auto_slim"], [202, "module-neural_compressor.compression.pruner.model_slim"], [203, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"], [204, "module-neural_compressor.compression.pruner.model_slim.weight_slim"], [205, "module-neural_compressor.compression.pruner.patterns.base"], [206, "module-neural_compressor.compression.pruner.patterns"], [207, "module-neural_compressor.compression.pruner.patterns.mha"], [208, "module-neural_compressor.compression.pruner.patterns.ninm"], [209, "module-neural_compressor.compression.pruner.patterns.nxm"], [210, "module-neural_compressor.compression.pruner.pruners.base"], [211, "module-neural_compressor.compression.pruner.pruners.basic"], [212, "module-neural_compressor.compression.pruner.pruners.block_mask"], [213, "module-neural_compressor.compression.pruner.pruners"], [214, "module-neural_compressor.compression.pruner.pruners.mha"], [215, "module-neural_compressor.compression.pruner.pruners.pattern_lock"], [216, "module-neural_compressor.compression.pruner.pruners.progressive"], [217, "module-neural_compressor.compression.pruner.pruners.retrain_free"], [218, "module-neural_compressor.compression.pruner.pruners.sparse_gpt"], [219, "module-neural_compressor.compression.pruner.pruning"], [220, "module-neural_compressor.compression.pruner.regs"], [221, "module-neural_compressor.compression.pruner.schedulers"], [222, "module-neural_compressor.compression.pruner.tf_criteria"], [223, "module-neural_compressor.compression.pruner.utils"], [224, "module-neural_compressor.compression.pruner.wanda"], [225, "module-neural_compressor.compression.pruner.wanda.prune"], [226, "module-neural_compressor.compression.pruner.wanda.utils"], [227, "module-neural_compressor.compression.pruner.wanda.wrapper"], [228, "module-neural_compressor.conf.config"], [229, "module-neural_compressor.conf.dotdict"], [230, "module-neural_compressor.conf"], [231, "module-neural_compressor.conf.pythonic_config"], [232, "module-neural_compressor.config"], [233, "module-neural_compressor.contrib"], [234, "module-neural_compressor.contrib.strategy"], [235, "module-neural_compressor.contrib.strategy.sigopt"], [236, "module-neural_compressor.contrib.strategy.tpe"], [237, "module-neural_compressor.data.dataloaders.base_dataloader"], [238, "module-neural_compressor.data.dataloaders.dataloader"], [239, "module-neural_compressor.data.dataloaders.default_dataloader"], [240, "module-neural_compressor.data.dataloaders.fetcher"], [241, "module-neural_compressor.data.dataloaders"], [242, "module-neural_compressor.data.dataloaders.mxnet_dataloader"], [243, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"], [244, "module-neural_compressor.data.dataloaders.pytorch_dataloader"], [245, "module-neural_compressor.data.dataloaders.sampler"], [246, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"], [247, "module-neural_compressor.data.datasets.bert_dataset"], [248, "module-neural_compressor.data.datasets.coco_dataset"], [249, "module-neural_compressor.data.datasets.dataset"], [250, "module-neural_compressor.data.datasets.dummy_dataset"], [251, "module-neural_compressor.data.datasets.dummy_dataset_v2"], [252, "module-neural_compressor.data.datasets.imagenet_dataset"], [253, "module-neural_compressor.data.datasets"], [254, "module-neural_compressor.data.datasets.style_transfer_dataset"], [255, "module-neural_compressor.data.filters.coco_filter"], [256, "module-neural_compressor.data.filters.filter"], [257, "module-neural_compressor.data.filters"], [258, "module-neural_compressor.data"], [259, "module-neural_compressor.data.transforms.coco_transform"], [260, "module-neural_compressor.data.transforms.imagenet_transform"], [261, "module-neural_compressor.data.transforms"], [262, "module-neural_compressor.data.transforms.postprocess"], [263, "module-neural_compressor.data.transforms.tokenization"], [264, "module-neural_compressor.data.transforms.transform"], [265, "module-neural_compressor.experimental.benchmark"], [266, "module-neural_compressor.experimental.common.criterion"], [267, "module-neural_compressor.experimental.common.dataloader"], [268, "module-neural_compressor.experimental.common"], [269, "module-neural_compressor.experimental.common.metric"], [270, "module-neural_compressor.experimental.common.model"], [271, "module-neural_compressor.experimental.common.optimizer"], [272, "module-neural_compressor.experimental.common.postprocess"], [273, "module-neural_compressor.experimental.common.torch_utils"], [274, "module-neural_compressor.experimental.component"], [275, "module-neural_compressor.experimental.compression"], [276, "module-neural_compressor.experimental.contrib"], [277, "module-neural_compressor.experimental.contrib.strategy"], [278, "module-neural_compressor.experimental.contrib.strategy.sigopt"], [279, "module-neural_compressor.experimental.contrib.strategy.tpe"], [280, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"], [281, "module-neural_compressor.experimental.data.dataloaders.dataloader"], [282, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"], [283, "module-neural_compressor.experimental.data.dataloaders.fetcher"], [284, "module-neural_compressor.experimental.data.dataloaders"], [285, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"], [286, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"], [287, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"], [288, "module-neural_compressor.experimental.data.dataloaders.sampler"], [289, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"], [290, "module-neural_compressor.experimental.data.datasets.bert_dataset"], [291, "module-neural_compressor.experimental.data.datasets.coco_dataset"], [292, "module-neural_compressor.experimental.data.datasets.dataset"], [293, "module-neural_compressor.experimental.data.datasets.dummy_dataset"], [294, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"], [295, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"], [296, "module-neural_compressor.experimental.data.datasets"], [297, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"], [298, "module-neural_compressor.experimental.data.filters.coco_filter"], [299, "module-neural_compressor.experimental.data.filters.filter"], [300, "module-neural_compressor.experimental.data.filters"], [301, "module-neural_compressor.experimental.data"], [302, "module-neural_compressor.experimental.data.transforms.imagenet_transform"], [303, "module-neural_compressor.experimental.data.transforms"], [304, "module-neural_compressor.experimental.data.transforms.tokenization"], [305, "module-neural_compressor.experimental.data.transforms.transform"], [306, "module-neural_compressor.experimental.distillation"], [307, "module-neural_compressor.experimental.export"], [308, "module-neural_compressor.experimental.export.qlinear2qdq"], [309, "module-neural_compressor.experimental.export.tf2onnx"], [310, "module-neural_compressor.experimental.export.torch2onnx"], [311, "module-neural_compressor.experimental.graph_optimization"], [312, "module-neural_compressor.experimental"], [313, "module-neural_compressor.experimental.metric.bleu"], [314, "module-neural_compressor.experimental.metric.bleu_util"], [315, "module-neural_compressor.experimental.metric.coco_label_map"], [316, "module-neural_compressor.experimental.metric.coco_tools"], [317, "module-neural_compressor.experimental.metric.evaluate_squad"], [318, "module-neural_compressor.experimental.metric.f1"], [319, "module-neural_compressor.experimental.metric"], [320, "module-neural_compressor.experimental.metric.metric"], [321, "module-neural_compressor.experimental.mixed_precision"], [322, "module-neural_compressor.experimental.model_conversion"], [323, "module-neural_compressor.experimental.nas.basic_nas"], [324, "module-neural_compressor.experimental.nas.dynas"], [325, "module-neural_compressor.experimental.nas"], [326, "module-neural_compressor.experimental.nas.nas"], [327, "module-neural_compressor.experimental.nas.nas_utils"], [328, "module-neural_compressor.experimental.nas.search_algorithms"], [329, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"], [330, "module-neural_compressor.experimental.pruner_legacy.group_lasso"], [331, "module-neural_compressor.experimental.pruner_legacy"], [332, "module-neural_compressor.experimental.pruner_legacy.magnitude"], [333, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"], [334, "module-neural_compressor.experimental.pruner_legacy.pruner"], [335, "module-neural_compressor.experimental.pruning"], [336, "module-neural_compressor.experimental.pruning_recipes"], [337, "module-neural_compressor.experimental.pruning_recipes.patterns"], [338, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"], [339, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"], [340, "module-neural_compressor.experimental.pruning_v2"], [341, "module-neural_compressor.experimental.pytorch_pruner"], [342, "module-neural_compressor.experimental.pytorch_pruner.logger"], [343, "module-neural_compressor.experimental.pytorch_pruner.patterns"], [344, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"], [345, "module-neural_compressor.experimental.pytorch_pruner.pruner"], [346, "module-neural_compressor.experimental.pytorch_pruner.pruning"], [347, "module-neural_compressor.experimental.pytorch_pruner.scheduler"], [348, "module-neural_compressor.experimental.quantization"], [349, "module-neural_compressor.experimental.scheduler"], [350, "module-neural_compressor.experimental.strategy.auto_mixed_precision"], [351, "module-neural_compressor.experimental.strategy.basic"], [352, "module-neural_compressor.experimental.strategy.bayesian"], [353, "module-neural_compressor.experimental.strategy.exhaustive"], [354, "module-neural_compressor.experimental.strategy"], [355, "module-neural_compressor.experimental.strategy.mse"], [356, "module-neural_compressor.experimental.strategy.mse_v2"], [357, "module-neural_compressor.experimental.strategy.random"], [358, "module-neural_compressor.experimental.strategy.strategy"], [359, "module-neural_compressor.experimental.strategy.utils.constant"], [360, "module-neural_compressor.experimental.strategy.utils"], [361, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"], [362, "module-neural_compressor.experimental.strategy.utils.tuning_space"], [363, "module-neural_compressor.experimental.strategy.utils.tuning_structs"], [364, "module-neural_compressor.experimental.strategy.utils.utility"], [365, "module-neural_compressor"], [366, "module-neural_compressor.metric.bleu"], [367, "module-neural_compressor.metric.bleu_util"], [368, "module-neural_compressor.metric.coco_label_map"], [369, "module-neural_compressor.metric.coco_tools"], [370, "module-neural_compressor.metric.evaluate_squad"], [371, "module-neural_compressor.metric.f1"], [372, "module-neural_compressor.metric"], [373, "module-neural_compressor.metric.metric"], [374, "module-neural_compressor.mix_precision"], [375, "module-neural_compressor.model.base_model"], [376, "module-neural_compressor.model"], [377, "module-neural_compressor.model.keras_model"], [378, "module-neural_compressor.model.model"], [379, "module-neural_compressor.model.mxnet_model"], [380, "module-neural_compressor.model.nets_factory"], [381, "module-neural_compressor.model.onnx_model"], [382, "module-neural_compressor.model.tensorflow_model"], [383, "module-neural_compressor.model.torch_model"], [384, "module-neural_compressor.objective"], [385, "module-neural_compressor.onnxrt.algorithms"], [386, "module-neural_compressor.onnxrt.algorithms.layer_wise.core"], [387, "module-neural_compressor.onnxrt.algorithms.layer_wise"], [388, "module-neural_compressor.onnxrt.algorithms.smoother.calibrator"], [389, "module-neural_compressor.onnxrt.algorithms.smoother.core"], [390, "module-neural_compressor.onnxrt.algorithms.smoother"], [391, "module-neural_compressor.onnxrt.algorithms.weight_only.awq"], [392, "module-neural_compressor.onnxrt.algorithms.weight_only.gptq"], [393, "module-neural_compressor.onnxrt.algorithms.weight_only"], [394, "module-neural_compressor.onnxrt.algorithms.weight_only.rtn"], [395, "module-neural_compressor.onnxrt.algorithms.weight_only.utility"], [396, "module-neural_compressor.onnxrt"], [397, "module-neural_compressor.onnxrt.quantization.algorithm_entry"], [398, "module-neural_compressor.onnxrt.quantization.autotune"], [399, "module-neural_compressor.onnxrt.quantization.calibrate"], [400, "module-neural_compressor.onnxrt.quantization.config"], [401, "module-neural_compressor.onnxrt.quantization"], [402, "module-neural_compressor.onnxrt.quantization.quantize"], [403, "module-neural_compressor.onnxrt.utils"], [404, "module-neural_compressor.onnxrt.utils.onnx_model"], [405, "module-neural_compressor.onnxrt.utils.utility"], [406, "module-neural_compressor.profiling"], [407, "module-neural_compressor.profiling.parser.factory"], [408, "module-neural_compressor.profiling.parser"], [409, "module-neural_compressor.profiling.parser.onnx_parser.factory"], [410, "module-neural_compressor.profiling.parser.onnx_parser"], [411, "module-neural_compressor.profiling.parser.onnx_parser.parser"], [412, "module-neural_compressor.profiling.parser.parser"], [413, "module-neural_compressor.profiling.parser.result"], [414, "module-neural_compressor.profiling.parser.tensorflow_parser.factory"], [415, "module-neural_compressor.profiling.parser.tensorflow_parser"], [416, "module-neural_compressor.profiling.parser.tensorflow_parser.parser"], [417, "module-neural_compressor.profiling.profiler.factory"], [418, "module-neural_compressor.profiling.profiler"], [419, "module-neural_compressor.profiling.profiler.onnxrt_profiler.factory"], [420, "module-neural_compressor.profiling.profiler.onnxrt_profiler"], [421, "module-neural_compressor.profiling.profiler.onnxrt_profiler.profiler"], [422, "module-neural_compressor.profiling.profiler.onnxrt_profiler.utils"], [423, "module-neural_compressor.profiling.profiler.profiler"], [424, "module-neural_compressor.profiling.profiler.tensorflow_profiler.factory"], [425, "module-neural_compressor.profiling.profiler.tensorflow_profiler"], [426, "module-neural_compressor.profiling.profiler.tensorflow_profiler.profiler"], [427, "module-neural_compressor.profiling.profiler.tensorflow_profiler.utils"], [428, "module-neural_compressor.quantization"], [429, "module-neural_compressor.strategy.auto"], [430, "module-neural_compressor.strategy.auto_mixed_precision"], [431, "module-neural_compressor.strategy.basic"], [432, "module-neural_compressor.strategy.bayesian"], [433, "module-neural_compressor.strategy.conservative"], [434, "module-neural_compressor.strategy.exhaustive"], [435, "module-neural_compressor.strategy.hawq_v2"], [436, "module-neural_compressor.strategy"], [437, "module-neural_compressor.strategy.mse"], [438, "module-neural_compressor.strategy.mse_v2"], [439, "module-neural_compressor.strategy.random"], [440, "module-neural_compressor.strategy.strategy"], [441, "module-neural_compressor.strategy.utils.constant"], [442, "module-neural_compressor.strategy.utils"], [443, "module-neural_compressor.strategy.utils.tuning_sampler"], [444, "module-neural_compressor.strategy.utils.tuning_space"], [445, "module-neural_compressor.strategy.utils.tuning_structs"], [446, "module-neural_compressor.strategy.utils.utility"], [447, "module-neural_compressor.template.api_doc_example"], [448, "module-neural_compressor.template"], [449, "module-neural_compressor.tensorflow.algorithms"], [450, "module-neural_compressor.tensorflow.algorithms.smoother.calibration"], [451, "module-neural_compressor.tensorflow.algorithms.smoother.core"], [452, "module-neural_compressor.tensorflow.algorithms.smoother"], [453, "module-neural_compressor.tensorflow.algorithms.smoother.scaler"], [454, "module-neural_compressor.tensorflow.algorithms.static_quant"], [455, "module-neural_compressor.tensorflow.algorithms.static_quant.keras"], [456, "module-neural_compressor.tensorflow.algorithms.static_quant.tensorflow"], [457, "module-neural_compressor.tensorflow"], [458, "module-neural_compressor.tensorflow.keras"], [459, "module-neural_compressor.tensorflow.keras.layers.conv2d"], [460, "module-neural_compressor.tensorflow.keras.layers.dense"], [461, "module-neural_compressor.tensorflow.keras.layers.depthwise_conv2d"], [462, "module-neural_compressor.tensorflow.keras.layers"], [463, "module-neural_compressor.tensorflow.keras.layers.layer_initializer"], [464, "module-neural_compressor.tensorflow.keras.layers.pool2d"], [465, "module-neural_compressor.tensorflow.keras.layers.separable_conv2d"], [466, "module-neural_compressor.tensorflow.keras.quantization.config"], [467, "module-neural_compressor.tensorflow.keras.quantization"], [468, "module-neural_compressor.tensorflow.quantization.algorithm_entry"], [469, "module-neural_compressor.tensorflow.quantization.autotune"], [470, "module-neural_compressor.tensorflow.quantization.config"], [471, "module-neural_compressor.tensorflow.quantization"], [472, "module-neural_compressor.tensorflow.quantization.quantize"], [473, "module-neural_compressor.tensorflow.quantization.utils.graph_converter"], [474, "module-neural_compressor.tensorflow.quantization.utils.graph_converter_without_calib"], [475, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.bf16_convert"], [476, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.dequantize_cast_optimizer"], [477, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16"], [478, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd"], [479, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout"], [480, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu"], [481, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random"], [482, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const"], [483, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction"], [484, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd"], [485, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer"], [486, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape"], [487, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm"], [488, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant"], [489, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add"], [490, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul"], [491, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math"], [492, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn"], [493, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in"], [494, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu"], [495, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm"], [496, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv"], [497, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"], [498, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose"], [499, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer"], [500, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass"], [501, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic"], [502, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node"], [503, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu"], [504, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize"], [505, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes"], [506, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm"], [507, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input"], [508, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes"], [509, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes"], [510, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer"], [511, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base"], [512, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter"], [513, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_fake_quant"], [514, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value"], [515, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value_without_calib"], [516, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"], [517, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_requantize"], [518, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"], [519, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize"], [520, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8"], [521, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.meta_op_optimizer"], [522, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_hostconst_converter"], [523, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_quantized_op_cse"], [524, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.rnn_convert"], [525, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.scale_propagation"], [526, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq"], [527, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.insert_qdq_pattern"], [528, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.merge_duplicated_qdq"], [529, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.share_qdq_y_pattern"], [530, "module-neural_compressor.tensorflow.quantization.utils.graph_util"], [531, "module-neural_compressor.tensorflow.quantization.utils"], [532, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph"], [533, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.fake_quantize"], [534, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat"], [535, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_config"], [536, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_helper"], [537, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers"], [538, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.optimize_layer"], [539, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_add"], [540, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_base"], [541, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"], [542, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_wrapper"], [543, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_bn"], [544, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_concatv2"], [545, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_conv"], [546, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_deconv"], [547, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_in"], [548, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_matmul"], [549, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_pooling"], [550, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq"], [551, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.optimize_qdq"], [552, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base"], [553, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_bn"], [554, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_concatv2"], [555, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_conv"], [556, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_for_intel_cpu"], [557, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_matmul"], [558, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_pooling"], [559, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph_common"], [560, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.bias_correction"], [561, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.graph_transform_base"], [562, "module-neural_compressor.tensorflow.quantization.utils.transform_graph"], [563, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.insert_logging"], [564, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.rerange_quantized_concat"], [565, "module-neural_compressor.tensorflow.quantization.utils.utility"], [566, "module-neural_compressor.tensorflow.utils.constants"], [567, "module-neural_compressor.tensorflow.utils.data"], [568, "module-neural_compressor.tensorflow.utils"], [569, "module-neural_compressor.tensorflow.utils.model"], [570, "module-neural_compressor.tensorflow.utils.model_wrappers"], [571, "module-neural_compressor.tensorflow.utils.nets_factory"], [572, "module-neural_compressor.tensorflow.utils.utility"], [573, "module-neural_compressor.torch.algorithms.base_algorithm"], [574, "module-neural_compressor.torch.algorithms.habana_fp8.fp8_quant"], [575, "module-neural_compressor.torch.algorithms.habana_fp8"], [576, "module-neural_compressor.torch.algorithms.habana_fp8.modules"], [577, "module-neural_compressor.torch.algorithms.habana_fp8.observer"], [578, "module-neural_compressor.torch.algorithms.habana_fp8.save_load"], [579, "module-neural_compressor.torch.algorithms.habana_fp8.scale"], [580, "module-neural_compressor.torch.algorithms.habana_fp8.tensor"], [581, "module-neural_compressor.torch.algorithms"], [582, "module-neural_compressor.torch.algorithms.layer_wise"], [583, "module-neural_compressor.torch.algorithms.layer_wise.load"], [584, "module-neural_compressor.torch.algorithms.layer_wise.modified_pickle"], [585, "module-neural_compressor.torch.algorithms.layer_wise.utils"], [586, "module-neural_compressor.torch.algorithms.pt2e_quant.core"], [587, "module-neural_compressor.torch.algorithms.pt2e_quant"], [588, "module-neural_compressor.torch.algorithms.smooth_quant"], [589, "module-neural_compressor.torch.algorithms.smooth_quant.save_load"], [590, "module-neural_compressor.torch.algorithms.smooth_quant.smooth_quant"], [591, "module-neural_compressor.torch.algorithms.smooth_quant.utility"], [592, "module-neural_compressor.torch.algorithms.static_quant"], [593, "module-neural_compressor.torch.algorithms.static_quant.save_load"], [594, "module-neural_compressor.torch.algorithms.static_quant.static_quant"], [595, "module-neural_compressor.torch.algorithms.static_quant.utility"], [596, "module-neural_compressor.torch.algorithms.weight_only.autoround"], [597, "module-neural_compressor.torch.algorithms.weight_only.awq"], [598, "module-neural_compressor.torch.algorithms.weight_only.gptq"], [599, "module-neural_compressor.torch.algorithms.weight_only.hqq.bitpack"], [600, "module-neural_compressor.torch.algorithms.weight_only.hqq.config"], [601, "module-neural_compressor.torch.algorithms.weight_only.hqq.core"], [602, "module-neural_compressor.torch.algorithms.weight_only.hqq"], [603, "module-neural_compressor.torch.algorithms.weight_only.hqq.optimizer"], [604, "module-neural_compressor.torch.algorithms.weight_only.hqq.qtensor"], [605, "module-neural_compressor.torch.algorithms.weight_only.hqq.quantizer"], [606, "module-neural_compressor.torch.algorithms.weight_only.hqq.utility"], [607, "module-neural_compressor.torch.algorithms.weight_only"], [608, "module-neural_compressor.torch.algorithms.weight_only.modules"], [609, "module-neural_compressor.torch.algorithms.weight_only.rtn"], [610, "module-neural_compressor.torch.algorithms.weight_only.teq"], [611, "module-neural_compressor.torch.algorithms.weight_only.utility"], [612, "module-neural_compressor.torch.amp.autocast"], [613, "module-neural_compressor.torch.amp.fp8.functions"], [614, "module-neural_compressor.torch.amp.fp8"], [615, "module-neural_compressor.torch.amp"], [616, "module-neural_compressor.torch"], [617, "module-neural_compressor.torch.quantization.algorithm_entry"], [618, "module-neural_compressor.torch.quantization.autotune"], [619, "module-neural_compressor.torch.quantization.config"], [620, "module-neural_compressor.torch.quantization"], [621, "module-neural_compressor.torch.quantization.load_entry"], [622, "module-neural_compressor.torch.quantization.quantize"], [623, "module-neural_compressor.torch.utils.auto_accelerator"], [624, "module-neural_compressor.torch.utils.constants"], [625, "module-neural_compressor.torch.utils.environ"], [626, "module-neural_compressor.torch.utils"], [627, "module-neural_compressor.torch.utils.utility"], [628, "module-neural_compressor.training"], [629, "module-neural_compressor.utils.collect_layer_histogram"], [630, "module-neural_compressor.utils.constant"], [631, "module-neural_compressor.utils.create_obj_from_config"], [632, "module-neural_compressor.utils"], [633, "module-neural_compressor.utils.kl_divergence"], [634, "module-neural_compressor.utils.load_huggingface"], [635, "module-neural_compressor.utils.logger"], [636, "module-neural_compressor.utils.neural_insights_utils"], [637, "module-neural_compressor.utils.options"], [638, "module-neural_compressor.utils.pytorch"], [639, "module-neural_compressor.utils.utility"], [640, "module-neural_compressor.utils.weights_details"], [641, "module-neural_compressor.version"]], "adaptor (class in neural_compressor.adaptor.adaptor)": [[1, "neural_compressor.adaptor.adaptor.Adaptor"]], "adaptor_registry() (in module neural_compressor.adaptor.adaptor)": [[1, "neural_compressor.adaptor.adaptor.adaptor_registry"]], "neural_compressor.adaptor.adaptor": [[1, "module-neural_compressor.adaptor.adaptor"]], "neural_compressor.adaptor": [[2, "module-neural_compressor.adaptor"]], "kerasadaptor (class in neural_compressor.adaptor.keras)": [[3, "neural_compressor.adaptor.keras.KerasAdaptor"]], "neural_compressor.adaptor.keras": [[3, "module-neural_compressor.adaptor.keras"]], "neural_compressor.adaptor.keras_utils.conv2d": [[4, "module-neural_compressor.adaptor.keras_utils.conv2d"]], "neural_compressor.adaptor.keras_utils.dense": [[5, "module-neural_compressor.adaptor.keras_utils.dense"]], "neural_compressor.adaptor.keras_utils.depthwise_conv2d": [[6, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"]], "neural_compressor.adaptor.keras_utils": [[7, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.pool2d": [[8, "module-neural_compressor.adaptor.keras_utils.pool2d"]], "neural_compressor.adaptor.keras_utils.quantizer": [[9, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "neural_compressor.adaptor.keras_utils.separable_conv2d": [[10, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"]], "mxnetadaptor (class in neural_compressor.adaptor.mxnet)": [[11, "neural_compressor.adaptor.mxnet.MxNetAdaptor"]], "neural_compressor.adaptor.mxnet": [[11, "module-neural_compressor.adaptor.mxnet"]], "neural_compressor.adaptor.mxnet_utils": [[12, "module-neural_compressor.adaptor.mxnet_utils"]], "calibcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CalibCollector"]], "calibdata (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CalibData"]], "collectorbase (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CollectorBase"]], "dataiterloader (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.DataIterLoader"]], "dataloaderwrap (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.DataLoaderWrap"]], "namecollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.NameCollector"]], "optype (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.OpType"]], "tensorcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.TensorCollector"]], "amp_convert() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.amp_convert"]], "calib_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.calib_model"]], "check_mx_version() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.check_mx_version"]], "combine_capabilities() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.combine_capabilities"]], "create_data_example() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.create_data_example"]], "distribute_calib_tensors() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.distribute_calib_tensors"]], "ensure_list() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.ensure_list"]], "fuse() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.fuse"]], "get_framework_name() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.get_framework_name"]], "is_model_quantized() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.is_model_quantized"]], "isiterable() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.isiterable"]], "make_module() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.make_module"]], "make_nc_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.make_nc_model"]], "make_symbol_block() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.make_symbol_block"]], "ndarray_to_device() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.ndarray_to_device"]], "neural_compressor.adaptor.mxnet_utils.util": [[13, "module-neural_compressor.adaptor.mxnet_utils.util"]], "parse_tune_config() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.parse_tune_config"]], "prepare_dataloader() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.prepare_dataloader"]], "prepare_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.prepare_model"]], "prepare_model_data() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.prepare_model_data"]], "quantize_sym_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.quantize_sym_model"]], "query_quantizable_nodes() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.query_quantizable_nodes"]], "run_forward() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.run_forward"]], "onnxrt_integeropsadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_IntegerOpsAdaptor"]], "onnxrt_qdqadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_QDQAdaptor"]], "onnxrt_qlinearopsadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_QLinearOpsAdaptor"]], "onnxrt_weightonlyadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_WeightOnlyAdaptor"]], "onnxruntimeadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor"]], "neural_compressor.adaptor.onnxrt": [[14, "module-neural_compressor.adaptor.onnxrt"]], "onnxrtaugment (class in neural_compressor.adaptor.ox_utils.calibration)": [[15, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment"]], "neural_compressor.adaptor.ox_utils.calibration": [[15, "module-neural_compressor.adaptor.ox_utils.calibration"]], "calibratorbase (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.CalibratorBase"]], "histogramcollector (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.HistogramCollector"]], "klcalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.KLCalibrator"]], "minmaxcalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.MinMaxCalibrator"]], "percentilecalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.PercentileCalibrator"]], "calib_registry() (in module neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.calib_registry"]], "neural_compressor.adaptor.ox_utils.calibrator": [[16, "module-neural_compressor.adaptor.ox_utils.calibrator"]], "smooth_distribution() (in module neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.smooth_distribution"]], "neural_compressor.adaptor.ox_utils": [[17, "module-neural_compressor.adaptor.ox_utils"]], "activationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator"]], "float16activationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.Float16ActivationOperator"]], "qactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.QActivationOperator"]], "removableactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.RemovableActivationOperator"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[18, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "argmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[19, "neural_compressor.adaptor.ox_utils.operators.argmax.ArgMaxOperator"]], "qargmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[19, "neural_compressor.adaptor.ox_utils.operators.argmax.QArgMaxOperator"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[19, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "attentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[20, "neural_compressor.adaptor.ox_utils.operators.attention.AttentionOperator"]], "qattentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[20, "neural_compressor.adaptor.ox_utils.operators.attention.QAttentionOperator"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[20, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "binarydirect8bitoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[21, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryDirect8BitOperator"]], "binaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[21, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator"]], "float16binaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[21, "neural_compressor.adaptor.ox_utils.operators.binary_op.Float16BinaryOperator"]], "qbinaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[21, "neural_compressor.adaptor.ox_utils.operators.binary_op.QBinaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[21, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "concatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[22, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator"]], "qconcatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[22, "neural_compressor.adaptor.ox_utils.operators.concat.QConcatOperator"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[22, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "convoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[23, "neural_compressor.adaptor.ox_utils.operators.conv.ConvOperator"]], "qconvoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[23, "neural_compressor.adaptor.ox_utils.operators.conv.QConvOperator"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[23, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "direct8bitoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[24, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator"]], "qdirectoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[24, "neural_compressor.adaptor.ox_utils.operators.direct_q8.QDirectOperator"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[24, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "embedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[25, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.EmbedLayerNormalizationOperator"]], "qembedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[25, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.QEmbedLayerNormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[25, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "gatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[26, "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator"]], "qgatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[26, "neural_compressor.adaptor.ox_utils.operators.gather.QGatherOperator"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[26, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "globalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[27, "neural_compressor.adaptor.ox_utils.operators.gavgpool.GlobalAveragePoolOperator"]], "qglobalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[27, "neural_compressor.adaptor.ox_utils.operators.gavgpool.QGlobalAveragePoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[27, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "gemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[28, "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator"]], "qgemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[28, "neural_compressor.adaptor.ox_utils.operators.gemm.QGemmOperator"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[28, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[29, "module-neural_compressor.adaptor.ox_utils.operators"]], "lstmoperator (class in neural_compressor.adaptor.ox_utils.operators.lstm)": [[30, "neural_compressor.adaptor.ox_utils.operators.lstm.LSTMOperator"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[30, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "fusedmatmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[31, "neural_compressor.adaptor.ox_utils.operators.matmul.FusedMatMulOperator"]], "matmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[31, "neural_compressor.adaptor.ox_utils.operators.matmul.MatMulOperator"]], "qmatmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[31, "neural_compressor.adaptor.ox_utils.operators.matmul.QMatMulOperator"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[31, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "maxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[32, "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator"]], "qmaxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[32, "neural_compressor.adaptor.ox_utils.operators.maxpool.QMaxPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[32, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "batchnormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.norm)": [[33, "neural_compressor.adaptor.ox_utils.operators.norm.BatchNormalizationOperator"]], "normalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.norm)": [[33, "neural_compressor.adaptor.ox_utils.operators.norm.NormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.norm": [[33, "module-neural_compressor.adaptor.ox_utils.operators.norm"]], "operator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.Operator"]], "qoperator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.QOperator"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[34, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "op_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.op_registry"]], "qop_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.qop_registry"]], "padoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[35, "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator"]], "qpadoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[35, "neural_compressor.adaptor.ox_utils.operators.pad.QPadOperator"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[35, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "pooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[36, "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator"]], "qpooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[36, "neural_compressor.adaptor.ox_utils.operators.pooling.QPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[36, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "reduceminmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.reduce)": [[37, "neural_compressor.adaptor.ox_utils.operators.reduce.ReduceMinMaxOperator"]], "reduceoperator (class in neural_compressor.adaptor.ox_utils.operators.reduce)": [[37, "neural_compressor.adaptor.ox_utils.operators.reduce.ReduceOperator"]], "neural_compressor.adaptor.ox_utils.operators.reduce": [[37, "module-neural_compressor.adaptor.ox_utils.operators.reduce"]], "qresizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[38, "neural_compressor.adaptor.ox_utils.operators.resize.QResizeOperator"]], "resizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[38, "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[38, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "qsplitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[39, "neural_compressor.adaptor.ox_utils.operators.split.QSplitOperator"]], "splitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[39, "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator"]], "neural_compressor.adaptor.ox_utils.operators.split": [[39, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "unarydirect8bitoperator (class in neural_compressor.adaptor.ox_utils.operators.unary_op)": [[40, "neural_compressor.adaptor.ox_utils.operators.unary_op.UnaryDirect8BitOperator"]], "unaryoperator (class in neural_compressor.adaptor.ox_utils.operators.unary_op)": [[40, "neural_compressor.adaptor.ox_utils.operators.unary_op.UnaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.unary_op": [[40, "module-neural_compressor.adaptor.ox_utils.operators.unary_op"]], "quantizer (class in neural_compressor.adaptor.ox_utils.quantizer)": [[41, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer"]], "neural_compressor.adaptor.ox_utils.quantizer": [[41, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "ortsmoothquant (class in neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.ORTSmoothQuant"]], "get_quant_dequant_output() (in module neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.get_quant_dequant_output"]], "make_sub_graph() (in module neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.make_sub_graph"]], "neural_compressor.adaptor.ox_utils.smooth_quant": [[42, "module-neural_compressor.adaptor.ox_utils.smooth_quant"]], "quant_dequant_data() (in module neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.quant_dequant_data"]], "quantformat (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantFormat"]], "quanttype (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantType"]], "quantizationmode (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizationMode"]], "quantizedinitializer (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizedInitializer"]], "quantizedvalue (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizedValue"]], "quantizedvaluetype (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizedValueType"]], "valueinfo (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.ValueInfo"]], "attribute_to_kwarg() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.attribute_to_kwarg"]], "calculate_scale_zp() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.calculate_scale_zp"]], "cast_tensor() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.cast_tensor"]], "collate_preds() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.collate_preds"]], "dequantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.dequantize_data"]], "dequantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.dequantize_data_with_scale_zero"]], "dtype_to_name() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.dtype_to_name"]], "find_by_name() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.find_by_name"]], "float_to_bfloat16() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.float_to_bfloat16"]], "float_to_float16() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.float_to_float16"]], "get_node_original_name() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.get_node_original_name"]], "infer_shapes() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.infer_shapes"]], "is_b_transposed() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.is_B_transposed"]], "make_dquant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.make_dquant_node"]], "make_quant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.make_quant_node"]], "neural_compressor.adaptor.ox_utils.util": [[43, "module-neural_compressor.adaptor.ox_utils.util"]], "quantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_data"]], "quantize_data_per_channel() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_data_per_channel"]], "quantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_data_with_scale_zero"]], "quantize_nparray() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_nparray"]], "remove_init_from_model_input() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.remove_init_from_model_input"]], "simple_progress_bar() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.simple_progress_bar"]], "split_shared_bias() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.split_shared_bias"]], "to_numpy() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.to_numpy"]], "trt_env_setup() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.trt_env_setup"]], "apply_awq_clip() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.apply_awq_clip"]], "apply_awq_scale() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.apply_awq_scale"]], "awq_quantize() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.awq_quantize"]], "get_blob_size() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.get_blob_size"]], "get_weight_scale() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.get_weight_scale"]], "gptq() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.gptq"]], "gptq_quantize() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.gptq_quantize"]], "make_matmul_weight_only_node() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.make_matmul_weight_only_node"]], "neural_compressor.adaptor.ox_utils.weight_only": [[44, "module-neural_compressor.adaptor.ox_utils.weight_only"]], "pad_tensor() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.pad_tensor"]], "prepare_inputs() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.prepare_inputs"]], "qdq_tensor() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.qdq_tensor"]], "quant_tensor() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.quant_tensor"]], "rtn_quantize() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.rtn_quantize"]], "pytorchadaptor (class in neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.PyTorchAdaptor"]], "pytorchweightonlyadaptor (class in neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.PyTorchWeightOnlyAdaptor"]], "pytorch_fxadaptor (class in neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor"]], "pytorch_ipexadaptor (class in neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor"]], "templateadaptor (class in neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.TemplateAdaptor"]], "get_ops_recursively() (in module neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.get_ops_recursively"]], "neural_compressor.adaptor.pytorch": [[45, "module-neural_compressor.adaptor.pytorch"]], "querybackendcapability (class in neural_compressor.adaptor.query)": [[46, "neural_compressor.adaptor.query.QueryBackendCapability"]], "neural_compressor.adaptor.query": [[46, "module-neural_compressor.adaptor.query"]], "tensorflowadaptor (class in neural_compressor.adaptor.tensorflow)": [[47, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor"]], "tensorflowquery (class in neural_compressor.adaptor.tensorflow)": [[47, "neural_compressor.adaptor.tensorflow.TensorflowQuery"]], "tensorflow_itexadaptor (class in neural_compressor.adaptor.tensorflow)": [[47, "neural_compressor.adaptor.tensorflow.Tensorflow_ITEXAdaptor"]], "neural_compressor.adaptor.tensorflow": [[47, "module-neural_compressor.adaptor.tensorflow"]], "graphconverter (class in neural_compressor.adaptor.tf_utils.graph_converter)": [[48, "neural_compressor.adaptor.tf_utils.graph_converter.GraphConverter"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[48, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "graphconverterwithoutcalib (class in neural_compressor.adaptor.tf_utils.graph_converter_without_calib)": [[49, "neural_compressor.adaptor.tf_utils.graph_converter_without_calib.GraphConverterWithoutCalib"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[49, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "bf16convert (class in neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert)": [[50, "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.BF16Convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "dequantizecastoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer)": [[51, "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer.DequantizeCastOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer": [[51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "convertaddtobiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd)": [[53, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "convertlayoutoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout)": [[54, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "convertleakyreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu)": [[55, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "convertnantorandom (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random)": [[56, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "convertplaceholdertoconst (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const)": [[57, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "dilatedcontraction (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction)": [[58, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.DilatedContraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "injectdummybiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd)": [[59, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "expanddimsoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer)": [[60, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "fetchweightfromreshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape)": [[61, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "foldbatchnormnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm)": [[62, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "graphfoldconstantoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant)": [[63, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "fusebiasaddandaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add)": [[64, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "fusecolumnwisemuloptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul)": [[65, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "fuseconvwithmathoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "fusedecomposedbnoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.FuseDecomposedBNOptimizer"]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.bypass_reshape"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.values_from_const"]], "fusedecomposedinoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.FuseDecomposedINOptimizer"]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.bypass_reshape"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.values_from_const"]], "fusegeluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu)": [[69, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "fuselayernormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_name_from_input"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.values_from_const"]], "fusepadwithconv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv)": [[71, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "fusepadwithfp32conv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv)": [[72, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "fusetransposereshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose)": [[73, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "graphcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer)": [[74, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "grappleroptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass)": [[75, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "insertprintminmaxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node)": [[77, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "movesqueezeafterreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu)": [[78, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "preoptimization (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize)": [[79, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.PreOptimization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "removetrainingnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes)": [[80, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "renamebatchnormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm)": [[81, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "splitsharedinputoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input)": [[82, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "stripequivalentnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes)": [[83, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "stripunusednodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes)": [[84, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "switchoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer)": [[85, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "graphrewriterbase (class in neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base)": [[86, "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "freezefakequantopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "freezevaluetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value)": [[89, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "freezevaluewithoutcalibtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "fuseconvredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "fuseconvrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize)": [[92, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "fusematmulredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "fusematmulrequantizedequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer"]], "fusematmulrequantizedequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer"]], "fusematmulrequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer"]], "fusematmulrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "metainfochangingmemopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "posthostconstconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "postcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "quantizedrnnconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "scalepropagationtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"]], "onnxgraph (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph)": [[102, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"]], "onnxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"]], "onnxopschema (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.OnnxOpSchema"]], "get_max_supported_opset_version() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.get_max_supported_opset_version"]], "get_schema() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.get_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"]], "seqtype (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.SeqType"]], "add_port_to_name() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.add_port_to_name"]], "are_shapes_equal() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.are_shapes_equal"]], "assert_error() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.assert_error"]], "compute_const_folding_using_tf() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.compute_const_folding_using_tf"]], "convert_tensorflow_tensor_to_onnx() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.convert_tensorflow_tensor_to_onnx"]], "find_opset() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.find_opset"]], "get_index_from_strided_slice_of_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_index_from_strided_slice_of_shape"]], "get_subgraphs_from_onnx() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_subgraphs_from_onnx"]], "get_tensorflow_node_attr() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_node_attr"]], "get_tensorflow_node_shape_attr() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_node_shape_attr"]], "get_tensorflow_tensor_data() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_tensor_data"]], "get_tensorflow_tensor_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_tensor_shape"]], "infer_onnx_shape_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.infer_onnx_shape_dtype"]], "initialize_name_counter() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.initialize_name_counter"]], "is_list_or_tuple() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.is_list_or_tuple"]], "is_onnx_domain() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.is_onnx_domain"]], "make_onnx_inputs_outputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.make_onnx_inputs_outputs"]], "make_onnx_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.make_onnx_shape"]], "map_numpy_to_onnx_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_numpy_to_onnx_dtype"]], "map_onnx_to_numpy_type() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_onnx_to_numpy_type"]], "map_tensorflow_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_tensorflow_dtype"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"]], "read_tensorflow_node_attrs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.read_tensorflow_node_attrs"]], "save_protobuf() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.save_protobuf"]], "set_name() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.set_name"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "generategraphwithqdqpattern (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern)": [[107, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "mergeduplicatedqdqoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq)": [[108, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "shareqdqforitexypatternoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern)": [[109, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[109, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "graphanalyzer (class in neural_compressor.adaptor.tf_utils.graph_util)": [[110, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer"]], "graphrewriterhelper (class in neural_compressor.adaptor.tf_utils.graph_util)": [[110, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper"]], "neural_compressor.adaptor.tf_utils.graph_util": [[110, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "neural_compressor.adaptor.tf_utils": [[111, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[112, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "fakequantize (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[113, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantize"]], "fakequantizebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[113, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "quantizeconfig (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config)": [[115, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "init_quantize_config() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[116, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.init_quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "qat_clone_function() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[116, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "config_quantizable_layers() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer)": [[118, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer.config_quantizable_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "quantizelayeradd (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add)": [[119, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add.QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "quantizelayerbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base)": [[120, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base.QuantizeLayerBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "quantizelayerbatchnormalization (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn.QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "quantizewrapper (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper"]], "quantizewrapperbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn)": [[123, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2)": [[124, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv)": [[125, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "fusenodestartwithdeconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv)": [[126, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "fusenodestartwithfusedinstancenorm (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in)": [[127, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul)": [[128, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling)": [[129, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "optimizeqdqgraph (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq)": [[131, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "quantizegraphbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[132, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase"]], "quantizenodebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[132, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2)": [[134, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "quantizegraphforintel (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu)": [[136, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul)": [[137, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling)": [[138, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[138, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "quantizegraphhelper (class in neural_compressor.adaptor.tf_utils.quantize_graph_common)": [[139, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[139, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "smoothquantcalibration (class in neural_compressor.adaptor.tf_utils.smooth_quant_calibration)": [[140, "neural_compressor.adaptor.tf_utils.smooth_quant_calibration.SmoothQuantCalibration"]], "smoothquantcalibrationllm (class in neural_compressor.adaptor.tf_utils.smooth_quant_calibration)": [[140, "neural_compressor.adaptor.tf_utils.smooth_quant_calibration.SmoothQuantCalibrationLLM"]], "neural_compressor.adaptor.tf_utils.smooth_quant_calibration": [[140, "module-neural_compressor.adaptor.tf_utils.smooth_quant_calibration"]], "smoothquantscaler (class in neural_compressor.adaptor.tf_utils.smooth_quant_scaler)": [[141, "neural_compressor.adaptor.tf_utils.smooth_quant_scaler.SmoothQuantScaler"]], "smoothquantscalerllm (class in neural_compressor.adaptor.tf_utils.smooth_quant_scaler)": [[141, "neural_compressor.adaptor.tf_utils.smooth_quant_scaler.SmoothQuantScalerLLM"]], "neural_compressor.adaptor.tf_utils.smooth_quant_scaler": [[141, "module-neural_compressor.adaptor.tf_utils.smooth_quant_scaler"]], "tensorflowqdqtoonnxqdqconverter (class in neural_compressor.adaptor.tf_utils.tf2onnx_converter)": [[142, "neural_compressor.adaptor.tf_utils.tf2onnx_converter.TensorflowQDQToOnnxQDQConverter"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[142, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"]], "biascorrection (class in neural_compressor.adaptor.tf_utils.transform_graph.bias_correction)": [[143, "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.BiasCorrection"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[143, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "graphtransformbase (class in neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base)": [[144, "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[144, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[145, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "insertlogging (class in neural_compressor.adaptor.tf_utils.transform_graph.insert_logging)": [[146, "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.InsertLogging"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[146, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "rerangequantizedconcat (class in neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat)": [[147, "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[147, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "apply_inlining() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.apply_inlining"]], "collate_tf_preds() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.collate_tf_preds"]], "construct_function_from_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.construct_function_from_graph_def"]], "disable_random() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.disable_random"]], "fix_ref_type_of_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.fix_ref_type_of_graph_def"]], "generate_feed_dict() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.generate_feed_dict"]], "get_estimator_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_estimator_graph"]], "get_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_graph_def"]], "get_input_output_node_names() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_input_output_node_names"]], "get_model_input_shape() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_model_input_shape"]], "get_tensor_by_name() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_tensor_by_name"]], "get_tensor_val_from_graph_node() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_tensor_val_from_graph_node"]], "get_weight_from_input_tensor() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_weight_from_input_tensor"]], "int8_node_name_reverse() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.int8_node_name_reverse"]], "is_ckpt_format() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.is_ckpt_format"]], "is_saved_model_format() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.is_saved_model_format"]], "iterator_sess_run() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.iterator_sess_run"]], "neural_compressor.adaptor.tf_utils.util": [[148, "module-neural_compressor.adaptor.tf_utils.util"]], "parse_saved_model() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.parse_saved_model"]], "read_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.read_graph"]], "reconstruct_saved_model() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.reconstruct_saved_model"]], "strip_equivalent_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.strip_equivalent_nodes"]], "strip_unused_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.strip_unused_nodes"]], "tf_diagnosis_helper() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.tf_diagnosis_helper"]], "version1_eq_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.version1_lte_version2"]], "write_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.write_graph"]], "neural_compressor.adaptor.torch_utils.auto_round": [[149, "module-neural_compressor.adaptor.torch_utils.auto_round"]], "actawareweightquant (class in neural_compressor.adaptor.torch_utils.awq)": [[150, "neural_compressor.adaptor.torch_utils.awq.ActAwareWeightQuant"]], "neural_compressor.adaptor.torch_utils.awq": [[150, "module-neural_compressor.adaptor.torch_utils.awq"]], "bf16modulewrapper (class in neural_compressor.adaptor.torch_utils.bf16_convert)": [[151, "neural_compressor.adaptor.torch_utils.bf16_convert.BF16ModuleWrapper"]], "convert() (in module neural_compressor.adaptor.torch_utils.bf16_convert)": [[151, "neural_compressor.adaptor.torch_utils.bf16_convert.Convert"]], "bf16_symbolic_trace() (in module neural_compressor.adaptor.torch_utils.bf16_convert)": [[151, "neural_compressor.adaptor.torch_utils.bf16_convert.bf16_symbolic_trace"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[151, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "gptq (class in neural_compressor.adaptor.torch_utils.gptq)": [[152, "neural_compressor.adaptor.torch_utils.gptq.GPTQ"]], "gptquantizer (class in neural_compressor.adaptor.torch_utils.gptq)": [[152, "neural_compressor.adaptor.torch_utils.gptq.GPTQuantizer"]], "find_layers() (in module neural_compressor.adaptor.torch_utils.gptq)": [[152, "neural_compressor.adaptor.torch_utils.gptq.find_layers"]], "find_layers_name() (in module neural_compressor.adaptor.torch_utils.gptq)": [[152, "neural_compressor.adaptor.torch_utils.gptq.find_layers_name"]], "is_leaf() (in module neural_compressor.adaptor.torch_utils.gptq)": [[152, "neural_compressor.adaptor.torch_utils.gptq.is_leaf"]], "log_quantizable_layers_per_transformer() (in module neural_compressor.adaptor.torch_utils.gptq)": [[152, "neural_compressor.adaptor.torch_utils.gptq.log_quantizable_layers_per_transformer"]], "neural_compressor.adaptor.torch_utils.gptq": [[152, "module-neural_compressor.adaptor.torch_utils.gptq"]], "quantize() (in module neural_compressor.adaptor.torch_utils.gptq)": [[152, "neural_compressor.adaptor.torch_utils.gptq.quantize"]], "trace_gptq_target_blocks() (in module neural_compressor.adaptor.torch_utils.gptq)": [[152, "neural_compressor.adaptor.torch_utils.gptq.trace_gptq_target_blocks"]], "hessiantrace (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[153, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace"]], "node_collector (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[153, "neural_compressor.adaptor.torch_utils.hawq_metric.Node_collector"]], "compare_weights() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[153, "neural_compressor.adaptor.torch_utils.hawq_metric.compare_weights"]], "hawq_top() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[153, "neural_compressor.adaptor.torch_utils.hawq_metric.hawq_top"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[153, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[154, "module-neural_compressor.adaptor.torch_utils"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant": [[155, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant"]], "pickleerror": [[156, "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle.PickleError"], [584, "neural_compressor.torch.algorithms.layer_wise.modified_pickle.PickleError"]], "picklingerror": [[156, "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle.PicklingError"], [584, "neural_compressor.torch.algorithms.layer_wise.modified_pickle.PicklingError"]], "unpicklingerror": [[156, "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle.UnpicklingError"], [584, "neural_compressor.torch.algorithms.layer_wise.modified_pickle.UnpicklingError"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle": [[156, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle"]], "layerwisequant (class in neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize)": [[157, "neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize.LayerWiseQuant"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize": [[157, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize"]], "load() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load)": [[158, "neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load.load"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load": [[158, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load"]], "dowload_hf_model() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[159, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.dowload_hf_model"]], "get_children() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[159, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.get_children"]], "get_module() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[159, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.get_module"]], "get_named_children() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[159, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.get_named_children"]], "get_super_module_by_name() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[159, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.get_super_module_by_name"]], "load_empty_model() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[159, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.load_empty_model"]], "load_layer_wise_quantized_model() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[159, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.load_layer_wise_quantized_model"]], "load_tensor() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[159, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.load_tensor"]], "load_tensor_from_shard() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[159, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.load_tensor_from_shard"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils": [[159, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.utils"]], "update_module() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[159, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.update_module"]], "ipex_mixed_precision() (in module neural_compressor.adaptor.torch_utils.mixed_precision)": [[160, "neural_compressor.adaptor.torch_utils.mixed_precision.ipex_mixed_precision"]], "neural_compressor.adaptor.torch_utils.mixed_precision": [[160, "module-neural_compressor.adaptor.torch_utils.mixed_precision"]], "fakeaffinetensorquantfunction (class in neural_compressor.adaptor.torch_utils.model_wrapper)": [[161, "neural_compressor.adaptor.torch_utils.model_wrapper.FakeAffineTensorQuantFunction"]], "mullinear (class in neural_compressor.adaptor.torch_utils.model_wrapper)": [[161, "neural_compressor.adaptor.torch_utils.model_wrapper.MulLinear"]], "teqlinearfakequant (class in neural_compressor.adaptor.torch_utils.model_wrapper)": [[161, "neural_compressor.adaptor.torch_utils.model_wrapper.TEQLinearFakeQuant"]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[161, "module-neural_compressor.adaptor.torch_utils.model_wrapper"]], "transformerbasedmodelblockpatterndetector (class in neural_compressor.adaptor.torch_utils.pattern_detector)": [[162, "neural_compressor.adaptor.torch_utils.pattern_detector.TransformerBasedModelBlockPatternDetector"]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[162, "module-neural_compressor.adaptor.torch_utils.pattern_detector"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[163, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "symbolic_trace() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[163, "neural_compressor.adaptor.torch_utils.symbolic_trace.symbolic_trace"]], "trace_and_fuse_sub_graph() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[163, "neural_compressor.adaptor.torch_utils.symbolic_trace.trace_and_fuse_sub_graph"]], "tequantizer (class in neural_compressor.adaptor.torch_utils.teq)": [[164, "neural_compressor.adaptor.torch_utils.teq.TEQuantizer"]], "neural_compressor.adaptor.torch_utils.teq": [[164, "module-neural_compressor.adaptor.torch_utils.teq"]], "append_attr() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.append_attr"]], "auto_copy() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.auto_copy"]], "calculate_quant_min_max() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.calculate_quant_min_max"]], "calibration() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.calibration"]], "check_cfg_and_qconfig() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.check_cfg_and_qconfig"]], "collate_torch_preds() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.collate_torch_preds"]], "collect_weight_info() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.collect_weight_info"]], "fetch_module() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.fetch_module"]], "forward_wrapper() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.forward_wrapper"]], "generate_activation_observer() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.generate_activation_observer"]], "get_absorb_layers() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.get_absorb_layers"]], "get_block_prefix() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.get_block_prefix"]], "get_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.get_depth"]], "get_dict_at_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.get_dict_at_depth"]], "get_element_under_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.get_element_under_depth"]], "get_embedding_contiguous() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.get_embedding_contiguous"]], "get_example_input() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.get_example_input"]], "get_fallback_order() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.get_fallback_order"]], "get_hidden_states() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.get_hidden_states"]], "get_module_input_output() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.get_module_input_output"]], "get_mse_order_per_fp32() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_fp32"]], "get_mse_order_per_int8() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_int8"]], "get_op_type_by_name() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.get_op_type_by_name"]], "get_quantizable_ops_from_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.get_quantizable_ops_from_cfgs"]], "get_torch_version() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.get_torch_version"]], "input2tuple() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.input2tuple"]], "is_fused_module() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.is_fused_module"]], "match_datatype_pattern() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.match_datatype_pattern"]], "move_input_device() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.move_input_device"]], "neural_compressor.adaptor.torch_utils.util": [[165, "module-neural_compressor.adaptor.torch_utils.util"]], "paser_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.paser_cfgs"]], "set_module() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.set_module"]], "simple_inference() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.simple_inference"]], "update_sq_scale() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.update_sq_scale"]], "neural_compressor.adaptor.torch_utils.waq.auto_alpha": [[166, "module-neural_compressor.adaptor.torch_utils.waq.auto_alpha"]], "neural_compressor.adaptor.torch_utils.waq.calibration": [[167, "module-neural_compressor.adaptor.torch_utils.waq.calibration"]], "neural_compressor.adaptor.torch_utils.waq.graph_trace": [[168, "module-neural_compressor.adaptor.torch_utils.waq.graph_trace"]], "neural_compressor.adaptor.torch_utils.waq": [[169, "module-neural_compressor.adaptor.torch_utils.waq"]], "torchsmoothquant (class in neural_compressor.adaptor.torch_utils.waq.smooth_quant)": [[170, "neural_compressor.adaptor.torch_utils.waq.smooth_quant.TorchSmoothQuant"]], "neural_compressor.adaptor.torch_utils.waq.smooth_quant": [[170, "module-neural_compressor.adaptor.torch_utils.waq.smooth_quant"]], "get_module() (in module neural_compressor.adaptor.torch_utils.waq.utils)": [[171, "neural_compressor.adaptor.torch_utils.waq.utils.get_module"]], "neural_compressor.adaptor.torch_utils.waq.utils": [[171, "module-neural_compressor.adaptor.torch_utils.waq.utils"]], "register_autotune() (in module neural_compressor.adaptor.torch_utils.waq.utils)": [[171, "neural_compressor.adaptor.torch_utils.waq.utils.register_autotune"]], "reshape_in_channel_to_last() (in module neural_compressor.adaptor.torch_utils.waq.utils)": [[171, "neural_compressor.adaptor.torch_utils.waq.utils.reshape_in_channel_to_last"]], "reshape_scale_as_input() (in module neural_compressor.adaptor.torch_utils.waq.utils)": [[171, "neural_compressor.adaptor.torch_utils.waq.utils.reshape_scale_as_input"]], "reshape_scale_as_weight() (in module neural_compressor.adaptor.torch_utils.waq.utils)": [[171, "neural_compressor.adaptor.torch_utils.waq.utils.reshape_scale_as_weight"]], "set_module() (in module neural_compressor.adaptor.torch_utils.waq.utils)": [[171, "neural_compressor.adaptor.torch_utils.waq.utils.set_module"]], "autoround_quantize() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[172, "neural_compressor.adaptor.torch_utils.weight_only.autoround_quantize"]], "awq_quantize() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[172, "neural_compressor.adaptor.torch_utils.weight_only.awq_quantize"]], "gptq_quantize() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[172, "neural_compressor.adaptor.torch_utils.weight_only.gptq_quantize"]], "neural_compressor.adaptor.torch_utils.weight_only": [[172, "module-neural_compressor.adaptor.torch_utils.weight_only"]], "qdq_weight_actor() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[172, "neural_compressor.adaptor.torch_utils.weight_only.qdq_weight_actor"]], "qdq_weight_asym() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[172, "neural_compressor.adaptor.torch_utils.weight_only.qdq_weight_asym"]], "qdq_weight_sym() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[172, "neural_compressor.adaptor.torch_utils.weight_only.qdq_weight_sym"]], "quant_weight() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[172, "neural_compressor.adaptor.torch_utils.weight_only.quant_weight"]], "quant_weight_w_scale() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[172, "neural_compressor.adaptor.torch_utils.weight_only.quant_weight_w_scale"]], "quantize_4bit() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[172, "neural_compressor.adaptor.torch_utils.weight_only.quantize_4bit"]], "rtn_quantize() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[172, "neural_compressor.adaptor.torch_utils.weight_only.rtn_quantize"]], "search_clip() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[172, "neural_compressor.adaptor.torch_utils.weight_only.search_clip"]], "teq_quantize() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[172, "neural_compressor.adaptor.torch_utils.weight_only.teq_quantize"]], "algorithms (class in neural_compressor.algorithm.algorithm)": [[173, "neural_compressor.algorithm.algorithm.ALGORITHMS"]], "algorithm (class in neural_compressor.algorithm.algorithm)": [[173, "neural_compressor.algorithm.algorithm.Algorithm"]], "algorithmscheduler (class in neural_compressor.algorithm.algorithm)": [[173, "neural_compressor.algorithm.algorithm.AlgorithmScheduler"]], "algorithm_registry() (in module neural_compressor.algorithm.algorithm)": [[173, "neural_compressor.algorithm.algorithm.algorithm_registry"]], "neural_compressor.algorithm.algorithm": [[173, "module-neural_compressor.algorithm.algorithm"]], "fastbiascorrection (class in neural_compressor.algorithm.fast_bias_correction)": [[174, "neural_compressor.algorithm.fast_bias_correction.FastBiasCorrection"]], "neural_compressor.algorithm.fast_bias_correction": [[174, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[175, "module-neural_compressor.algorithm"]], "smoothquant (class in neural_compressor.algorithm.smooth_quant)": [[176, "neural_compressor.algorithm.smooth_quant.SmoothQuant"]], "neural_compressor.algorithm.smooth_quant": [[176, "module-neural_compressor.algorithm.smooth_quant"]], "weightcorrection (class in neural_compressor.algorithm.weight_correction)": [[177, "neural_compressor.algorithm.weight_correction.WeightCorrection"]], "neural_compressor.algorithm.weight_correction": [[177, "module-neural_compressor.algorithm.weight_correction"]], "benchmark_with_raw_cmd() (in module neural_compressor.benchmark)": [[178, "neural_compressor.benchmark.benchmark_with_raw_cmd"]], "call_one() (in module neural_compressor.benchmark)": [[178, "neural_compressor.benchmark.call_one"]], "config_instance() (in module neural_compressor.benchmark)": [[178, "neural_compressor.benchmark.config_instance"]], "fit() (in module neural_compressor.benchmark)": [[178, "neural_compressor.benchmark.fit"]], "generate_prefix() (in module neural_compressor.benchmark)": [[178, "neural_compressor.benchmark.generate_prefix"]], "get_architecture() (in module neural_compressor.benchmark)": [[178, "neural_compressor.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.benchmark)": [[178, "neural_compressor.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.benchmark)": [[178, "neural_compressor.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.benchmark)": [[178, "neural_compressor.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.benchmark)": [[178, "neural_compressor.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.benchmark)": [[178, "neural_compressor.benchmark.get_threads_per_core"]], "neural_compressor.benchmark": [[178, "module-neural_compressor.benchmark"]], "profile() (in module neural_compressor.benchmark)": [[178, "neural_compressor.benchmark.profile"]], "run_instance() (in module neural_compressor.benchmark)": [[178, "neural_compressor.benchmark.run_instance"]], "set_all_env_var() (in module neural_compressor.benchmark)": [[178, "neural_compressor.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.benchmark)": [[178, "neural_compressor.benchmark.set_env_var"]], "summary_benchmark() (in module neural_compressor.benchmark)": [[178, "neural_compressor.benchmark.summary_benchmark"]], "baseconfig (class in neural_compressor.common.base_config)": [[179, "neural_compressor.common.base_config.BaseConfig"]], "composableconfig (class in neural_compressor.common.base_config)": [[179, "neural_compressor.common.base_config.ComposableConfig"]], "neural_compressor.common.base_config": [[179, "module-neural_compressor.common.base_config"]], "register_config() (in module neural_compressor.common.base_config)": [[179, "neural_compressor.common.base_config.register_config"]], "register_supported_configs_for_fwk() (in module neural_compressor.common.base_config)": [[179, "neural_compressor.common.base_config.register_supported_configs_for_fwk"]], "evaluator (class in neural_compressor.common.base_tuning)": [[180, "neural_compressor.common.base_tuning.Evaluator"]], "sequentialsampler (class in neural_compressor.common.base_tuning)": [[180, "neural_compressor.common.base_tuning.SequentialSampler"]], "tuningconfig (class in neural_compressor.common.base_tuning)": [[180, "neural_compressor.common.base_tuning.TuningConfig"]], "neural_compressor.common.base_tuning": [[180, "module-neural_compressor.common.base_tuning"]], "neural_compressor.common": [[181, "module-neural_compressor.common"]], "paramlevel (class in neural_compressor.common.tuning_param)": [[182, "neural_compressor.common.tuning_param.ParamLevel"]], "tuningparam (class in neural_compressor.common.tuning_param)": [[182, "neural_compressor.common.tuning_param.TuningParam"]], "neural_compressor.common.tuning_param": [[182, "module-neural_compressor.common.tuning_param"]], "neural_compressor.common.utils.constants": [[183, "module-neural_compressor.common.utils.constants"]], "neural_compressor.common.utils": [[184, "module-neural_compressor.common.utils"]], "logger (class in neural_compressor.common.utils.logger)": [[185, "neural_compressor.common.utils.logger.Logger"]], "tuninglogger (class in neural_compressor.common.utils.logger)": [[185, "neural_compressor.common.utils.logger.TuningLogger"]], "neural_compressor.common.utils.logger": [[185, "module-neural_compressor.common.utils.logger"]], "load_config_mapping() (in module neural_compressor.common.utils.save_load)": [[186, "neural_compressor.common.utils.save_load.load_config_mapping"]], "neural_compressor.common.utils.save_load": [[186, "module-neural_compressor.common.utils.save_load"]], "save_config_mapping() (in module neural_compressor.common.utils.save_load)": [[186, "neural_compressor.common.utils.save_load.save_config_mapping"]], "cpuinfo (class in neural_compressor.common.utils.utility)": [[187, "neural_compressor.common.utils.utility.CpuInfo"]], "lazyimport (class in neural_compressor.common.utils.utility)": [[187, "neural_compressor.common.utils.utility.LazyImport"]], "dump_elapsed_time() (in module neural_compressor.common.utils.utility)": [[187, "neural_compressor.common.utils.utility.dump_elapsed_time"]], "neural_compressor.common.utils.utility": [[187, "module-neural_compressor.common.utils.utility"]], "set_random_seed() (in module neural_compressor.common.utils.utility)": [[187, "neural_compressor.common.utils.utility.set_random_seed"]], "set_resume_from() (in module neural_compressor.common.utils.utility)": [[187, "neural_compressor.common.utils.utility.set_resume_from"]], "set_tensorboard() (in module neural_compressor.common.utils.utility)": [[187, "neural_compressor.common.utils.utility.set_tensorboard"]], "set_workspace() (in module neural_compressor.common.utils.utility)": [[187, "neural_compressor.common.utils.utility.set_workspace"]], "singleton() (in module neural_compressor.common.utils.utility)": [[187, "neural_compressor.common.utils.utility.singleton"]], "basecallbacks (class in neural_compressor.compression.callbacks)": [[188, "neural_compressor.compression.callbacks.BaseCallbacks"]], "distillationcallbacks (class in neural_compressor.compression.callbacks)": [[188, "neural_compressor.compression.callbacks.DistillationCallbacks"]], "pruningcallbacks (class in neural_compressor.compression.callbacks)": [[188, "neural_compressor.compression.callbacks.PruningCallbacks"]], "quantizationawaretrainingcallbacks (class in neural_compressor.compression.callbacks)": [[188, "neural_compressor.compression.callbacks.QuantizationAwareTrainingCallbacks"]], "_epoch_ran (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[188, "neural_compressor.compression.callbacks.DistillationCallbacks._epoch_ran"]], "best_model (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[188, "neural_compressor.compression.callbacks.DistillationCallbacks.best_model"]], "best_score (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[188, "neural_compressor.compression.callbacks.DistillationCallbacks.best_score"]], "eval_frequency (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[188, "neural_compressor.compression.callbacks.DistillationCallbacks.eval_frequency"]], "neural_compressor.compression.callbacks": [[188, "module-neural_compressor.compression.callbacks"]], "criterions (class in neural_compressor.compression.distillation.criterions)": [[189, "neural_compressor.compression.distillation.criterions.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[189, "neural_compressor.compression.distillation.criterions.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.compression.distillation.criterions)": [[189, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[189, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationLoss"]], "pytorchcriterions (class in neural_compressor.compression.distillation.criterions)": [[189, "neural_compressor.compression.distillation.criterions.PyTorchCriterions"]], "pytorchcrossentropyloss (class in neural_compressor.compression.distillation.criterions)": [[189, "neural_compressor.compression.distillation.criterions.PyTorchCrossEntropyLoss"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[189, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[189, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[189, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[189, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLossWrapper"]], "pytorchselfknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[189, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLoss"]], "pytorchselfknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[189, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[189, "neural_compressor.compression.distillation.criterions.SelfKnowledgeDistillationLoss"]], "tensorflowcrossentropyloss (class in neural_compressor.compression.distillation.criterions)": [[189, "neural_compressor.compression.distillation.criterions.TensorFlowCrossEntropyLoss"]], "tensorflowsparsecategoricalcrossentropy (class in neural_compressor.compression.distillation.criterions)": [[189, "neural_compressor.compression.distillation.criterions.TensorFlowSparseCategoricalCrossentropy"]], "tensorflowcriterions (class in neural_compressor.compression.distillation.criterions)": [[189, "neural_compressor.compression.distillation.criterions.TensorflowCriterions"]], "tensorflowknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[189, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLoss"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.compression.distillation.criterions)": [[189, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossExternal"]], "tensorflowknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[189, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossWrapper"]], "criterion_registry() (in module neural_compressor.compression.distillation.criterions)": [[189, "neural_compressor.compression.distillation.criterions.criterion_registry"]], "neural_compressor.compression.distillation.criterions": [[189, "module-neural_compressor.compression.distillation.criterions"]], "neural_compressor.compression.distillation": [[190, "module-neural_compressor.compression.distillation"]], "optimizers (class in neural_compressor.compression.distillation.optimizers)": [[191, "neural_compressor.compression.distillation.optimizers.Optimizers"]], "pytorchoptimizers (class in neural_compressor.compression.distillation.optimizers)": [[191, "neural_compressor.compression.distillation.optimizers.PyTorchOptimizers"]], "pytorchsgd (class in neural_compressor.compression.distillation.optimizers)": [[191, "neural_compressor.compression.distillation.optimizers.PyTorchSGD"]], "tensorflowadam (class in neural_compressor.compression.distillation.optimizers)": [[191, "neural_compressor.compression.distillation.optimizers.TensorFlowAdam"]], "tensorflowadamw (class in neural_compressor.compression.distillation.optimizers)": [[191, "neural_compressor.compression.distillation.optimizers.TensorFlowAdamW"]], "tensorflowsgd (class in neural_compressor.compression.distillation.optimizers)": [[191, "neural_compressor.compression.distillation.optimizers.TensorFlowSGD"]], "tensorflowoptimizers (class in neural_compressor.compression.distillation.optimizers)": [[191, "neural_compressor.compression.distillation.optimizers.TensorflowOptimizers"]], "neural_compressor.compression.distillation.optimizers": [[191, "module-neural_compressor.compression.distillation.optimizers"]], "optimizer_registry() (in module neural_compressor.compression.distillation.optimizers)": [[191, "neural_compressor.compression.distillation.optimizers.optimizer_registry"]], "get_activation() (in module neural_compressor.compression.distillation.utility)": [[192, "neural_compressor.compression.distillation.utility.get_activation"]], "neural_compressor.compression.distillation.utility": [[192, "module-neural_compressor.compression.distillation.utility"]], "record_output() (in module neural_compressor.compression.distillation.utility)": [[192, "neural_compressor.compression.distillation.utility.record_output"]], "neural_compressor.compression.hpo": [[193, "module-neural_compressor.compression.hpo"]], "neural_compressor.compression.hpo.sa_optimizer": [[194, "module-neural_compressor.compression.hpo.sa_optimizer"]], "bayesianoptimizationsearcher (class in neural_compressor.compression.hpo.search_algorithms)": [[195, "neural_compressor.compression.hpo.search_algorithms.BayesianOptimizationSearcher"]], "gridsearcher (class in neural_compressor.compression.hpo.search_algorithms)": [[195, "neural_compressor.compression.hpo.search_algorithms.GridSearcher"]], "randomsearcher (class in neural_compressor.compression.hpo.search_algorithms)": [[195, "neural_compressor.compression.hpo.search_algorithms.RandomSearcher"]], "searcher (class in neural_compressor.compression.hpo.search_algorithms)": [[195, "neural_compressor.compression.hpo.search_algorithms.Searcher"]], "xgbsearcher (class in neural_compressor.compression.hpo.search_algorithms)": [[195, "neural_compressor.compression.hpo.search_algorithms.XgbSearcher"]], "neural_compressor.compression.hpo.search_algorithms": [[195, "module-neural_compressor.compression.hpo.search_algorithms"]], "register_searcher() (in module neural_compressor.compression.hpo.search_algorithms)": [[195, "neural_compressor.compression.hpo.search_algorithms.register_searcher"]], "basesearchspace (class in neural_compressor.compression.hpo.search_space)": [[196, "neural_compressor.compression.hpo.search_space.BaseSearchSpace"]], "continuoussearchspace (class in neural_compressor.compression.hpo.search_space)": [[196, "neural_compressor.compression.hpo.search_space.ContinuousSearchSpace"]], "discretesearchspace (class in neural_compressor.compression.hpo.search_space)": [[196, "neural_compressor.compression.hpo.search_space.DiscreteSearchSpace"]], "searchspace (class in neural_compressor.compression.hpo.search_space)": [[196, "neural_compressor.compression.hpo.search_space.SearchSpace"]], "neural_compressor.compression.hpo.search_space": [[196, "module-neural_compressor.compression.hpo.search_space"]], "register_searchspace() (in module neural_compressor.compression.hpo.search_space)": [[196, "neural_compressor.compression.hpo.search_space.register_searchspace"]], "neural_compressor.compression": [[197, "module-neural_compressor.compression"]], "blockmaskcriterion (class in neural_compressor.compression.pruner.criteria)": [[198, "neural_compressor.compression.pruner.criteria.BlockMaskCriterion"]], "gradientcriterion (class in neural_compressor.compression.pruner.criteria)": [[198, "neural_compressor.compression.pruner.criteria.GradientCriterion"]], "magnitudecriterion (class in neural_compressor.compression.pruner.criteria)": [[198, "neural_compressor.compression.pruner.criteria.MagnitudeCriterion"]], "pruningcriterion (class in neural_compressor.compression.pruner.criteria)": [[198, "neural_compressor.compression.pruner.criteria.PruningCriterion"]], "retrainfreecriterion (class in neural_compressor.compression.pruner.criteria)": [[198, "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion"]], "snipcriterion (class in neural_compressor.compression.pruner.criteria)": [[198, "neural_compressor.compression.pruner.criteria.SnipCriterion"]], "snipmomentumcriterion (class in neural_compressor.compression.pruner.criteria)": [[198, "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion"]], "get_criterion() (in module neural_compressor.compression.pruner.criteria)": [[198, "neural_compressor.compression.pruner.criteria.get_criterion"]], "neural_compressor.compression.pruner.criteria": [[198, "module-neural_compressor.compression.pruner.criteria"]], "register_criterion() (in module neural_compressor.compression.pruner.criteria)": [[198, "neural_compressor.compression.pruner.criteria.register_criterion"]], "scores (neural_compressor.compression.pruner.criteria.blockmaskcriterion attribute)": [[198, "neural_compressor.compression.pruner.criteria.BlockMaskCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.gradientcriterion attribute)": [[198, "neural_compressor.compression.pruner.criteria.GradientCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.magnitudecriterion attribute)": [[198, "neural_compressor.compression.pruner.criteria.MagnitudeCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.pruningcriterion attribute)": [[198, "neural_compressor.compression.pruner.criteria.PruningCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.retrainfreecriterion attribute)": [[198, "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.snipcriterion attribute)": [[198, "neural_compressor.compression.pruner.criteria.SnipCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.snipmomentumcriterion attribute)": [[198, "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion.scores"]], "dsnot() (in module neural_compressor.compression.pruner.dsnot)": [[199, "neural_compressor.compression.pruner.dsnot.DSnoT"]], "neural_compressor.compression.pruner.dsnot": [[199, "module-neural_compressor.compression.pruner.dsnot"]], "return_reorder_indice() (in module neural_compressor.compression.pruner.dsnot)": [[199, "neural_compressor.compression.pruner.dsnot.return_reorder_indice"]], "neural_compressor.compression.pruner": [[200, "module-neural_compressor.compression.pruner"]], "prepare_pruning() (in module neural_compressor.compression.pruner)": [[200, "neural_compressor.compression.pruner.prepare_pruning"]], "save() (in module neural_compressor.compression.pruner)": [[200, "neural_compressor.compression.pruner.save"]], "generate_ffn2_pruning_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[201, "neural_compressor.compression.pruner.model_slim.auto_slim.generate_ffn2_pruning_config"]], "generate_mha_pruning_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[201, "neural_compressor.compression.pruner.model_slim.auto_slim.generate_mha_pruning_config"]], "model_slim() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[201, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim"]], "model_slim_ffn2() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[201, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim_ffn2"]], "model_slim_mha() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[201, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim_mha"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[201, "module-neural_compressor.compression.pruner.model_slim.auto_slim"]], "parse_auto_slim_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[201, "neural_compressor.compression.pruner.model_slim.auto_slim.parse_auto_slim_config"]], "neural_compressor.compression.pruner.model_slim": [[202, "module-neural_compressor.compression.pruner.model_slim"]], "classifierheadsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[203, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher"]], "classifierheadsearchertf (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[203, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF"]], "jitbasicsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[203, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher"]], "linear2linearsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[203, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher"]], "recipesearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[203, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher"]], "selfmhasearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[203, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher"]], "current_pattern (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[203, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.current_pattern"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[203, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[203, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[203, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[203, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[203, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.device"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[203, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[203, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[203, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[203, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[203, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.flatten_static_graph"]], "get_attributes() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[203, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.get_attributes"]], "get_common_module() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[203, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.get_common_module"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[203, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[203, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[203, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[203, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[203, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[203, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.model"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[203, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"]], "print_iterables() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[203, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.print_iterables"]], "recipe (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[203, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.recipe"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[203, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.searching_results"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[203, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.searching_results"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[203, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.searching_results"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[203, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[203, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[203, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[203, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[203, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.static_graph"]], "target_layers (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[203, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.target_layers"]], "target_layers (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[203, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.target_layers"]], "target_op_lut (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[203, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.target_op_lut"]], "targets (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[203, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.targets"]], "linearcompression (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[204, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression"]], "linearcompressioniterator (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[204, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator"]], "postcompressionutils (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[204, "neural_compressor.compression.pruner.model_slim.weight_slim.PostCompressionUtils"]], "device (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[204, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.device"]], "layer_1 (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[204, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.layer_1"]], "layer_2 (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[204, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.layer_2"]], "linear_patterns (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompressioniterator attribute)": [[204, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator.linear_patterns"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[204, "module-neural_compressor.compression.pruner.model_slim.weight_slim"]], "basepattern (class in neural_compressor.compression.pruner.patterns.base)": [[205, "neural_compressor.compression.pruner.patterns.base.BasePattern"]], "kerasbasepattern (class in neural_compressor.compression.pruner.patterns.base)": [[205, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern"]], "pytorchbasepattern (class in neural_compressor.compression.pruner.patterns.base)": [[205, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern"]], "config (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[205, "neural_compressor.compression.pruner.patterns.base.BasePattern.config"]], "config (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[205, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.config"]], "config (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[205, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.config"]], "invalid_layers (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[205, "neural_compressor.compression.pruner.patterns.base.BasePattern.invalid_layers"]], "invalid_layers (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[205, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.invalid_layers"]], "invalid_layers (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[205, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.invalid_layers"]], "is_global (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[205, "neural_compressor.compression.pruner.patterns.base.BasePattern.is_global"]], "is_global (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[205, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.is_global"]], "is_global (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[205, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.is_global"]], "keep_mask_layers (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[205, "neural_compressor.compression.pruner.patterns.base.BasePattern.keep_mask_layers"]], "keep_mask_layers (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[205, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.keep_mask_layers"]], "keep_mask_layers (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[205, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.keep_mask_layers"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[205, "neural_compressor.compression.pruner.patterns.base.BasePattern.max_sparsity_ratio_per_op"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[205, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.max_sparsity_ratio_per_op"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[205, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.max_sparsity_ratio_per_op"]], "min_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[205, "neural_compressor.compression.pruner.patterns.base.BasePattern.min_sparsity_ratio_per_op"]], "min_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[205, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.min_sparsity_ratio_per_op"]], "min_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[205, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.min_sparsity_ratio_per_op"]], "modules (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[205, "neural_compressor.compression.pruner.patterns.base.BasePattern.modules"]], "modules (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[205, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.modules"]], "modules (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[205, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.modules"]], "neural_compressor.compression.pruner.patterns.base": [[205, "module-neural_compressor.compression.pruner.patterns.base"]], "pattern (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[205, "neural_compressor.compression.pruner.patterns.base.BasePattern.pattern"]], "pattern (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[205, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.pattern"]], "pattern (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[205, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.pattern"]], "register_pattern() (in module neural_compressor.compression.pruner.patterns.base)": [[205, "neural_compressor.compression.pruner.patterns.base.register_pattern"]], "target_sparsity (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[205, "neural_compressor.compression.pruner.patterns.base.BasePattern.target_sparsity"]], "target_sparsity (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[205, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.target_sparsity"]], "target_sparsity (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[205, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.target_sparsity"]], "get_pattern() (in module neural_compressor.compression.pruner.patterns)": [[206, "neural_compressor.compression.pruner.patterns.get_pattern"]], "neural_compressor.compression.pruner.patterns": [[206, "module-neural_compressor.compression.pruner.patterns"]], "m (neural_compressor.compression.pruner.patterns.mha.patternmha attribute)": [[207, "neural_compressor.compression.pruner.patterns.mha.PatternMHA.M"]], "n (neural_compressor.compression.pruner.patterns.mha.patternmha attribute)": [[207, "neural_compressor.compression.pruner.patterns.mha.PatternMHA.N"]], "patternmha (class in neural_compressor.compression.pruner.patterns.mha)": [[207, "neural_compressor.compression.pruner.patterns.mha.PatternMHA"]], "neural_compressor.compression.pruner.patterns.mha": [[207, "module-neural_compressor.compression.pruner.patterns.mha"]], "m (neural_compressor.compression.pruner.patterns.ninm.pytorchpatternninm attribute)": [[208, "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM.M"]], "n (neural_compressor.compression.pruner.patterns.ninm.pytorchpatternninm attribute)": [[208, "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM.N"]], "pytorchpatternninm (class in neural_compressor.compression.pruner.patterns.ninm)": [[208, "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM"]], "neural_compressor.compression.pruner.patterns.ninm": [[208, "module-neural_compressor.compression.pruner.patterns.ninm"]], "keraspatternnxm (class in neural_compressor.compression.pruner.patterns.nxm)": [[209, "neural_compressor.compression.pruner.patterns.nxm.KerasPatternNxM"]], "pytorchpatternnxm (class in neural_compressor.compression.pruner.patterns.nxm)": [[209, "neural_compressor.compression.pruner.patterns.nxm.PytorchPatternNxM"]], "block_size (neural_compressor.compression.pruner.patterns.nxm.keraspatternnxm attribute)": [[209, "neural_compressor.compression.pruner.patterns.nxm.KerasPatternNxM.block_size"]], "block_size (neural_compressor.compression.pruner.patterns.nxm.pytorchpatternnxm attribute)": [[209, "neural_compressor.compression.pruner.patterns.nxm.PytorchPatternNxM.block_size"]], "neural_compressor.compression.pruner.patterns.nxm": [[209, "module-neural_compressor.compression.pruner.patterns.nxm"]], "basepruner (class in neural_compressor.compression.pruner.pruners.base)": [[210, "neural_compressor.compression.pruner.pruners.base.BasePruner"]], "kerasbasepruner (class in neural_compressor.compression.pruner.pruners.base)": [[210, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner"]], "pytorchbasepruner (class in neural_compressor.compression.pruner.pruners.base)": [[210, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner"]], "config (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[210, "neural_compressor.compression.pruner.pruners.base.BasePruner.config"]], "config (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[210, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.config"]], "config (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[210, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.config"]], "current_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[210, "neural_compressor.compression.pruner.pruners.base.BasePruner.current_sparsity_ratio"]], "current_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[210, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.current_sparsity_ratio"]], "current_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[210, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.current_sparsity_ratio"]], "end_step (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[210, "neural_compressor.compression.pruner.pruners.base.BasePruner.end_step"]], "end_step (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[210, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.end_step"]], "end_step (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[210, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.end_step"]], "global_step (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[210, "neural_compressor.compression.pruner.pruners.base.BasePruner.global_step"]], "global_step (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[210, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.global_step"]], "global_step (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[210, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.global_step"]], "masks (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[210, "neural_compressor.compression.pruner.pruners.base.BasePruner.masks"]], "masks (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[210, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.masks"]], "masks (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[210, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.masks"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[210, "neural_compressor.compression.pruner.pruners.base.BasePruner.max_sparsity_ratio_per_op"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[210, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.max_sparsity_ratio_per_op"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[210, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.max_sparsity_ratio_per_op"]], "modules (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[210, "neural_compressor.compression.pruner.pruners.base.BasePruner.modules"]], "modules (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[210, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.modules"]], "modules (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[210, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.modules"]], "neural_compressor.compression.pruner.pruners.base": [[210, "module-neural_compressor.compression.pruner.pruners.base"]], "pattern (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[210, "neural_compressor.compression.pruner.pruners.base.BasePruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[210, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[210, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.pattern"]], "pruning_frequency (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[210, "neural_compressor.compression.pruner.pruners.base.BasePruner.pruning_frequency"]], "pruning_frequency (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[210, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.pruning_frequency"]], "pruning_frequency (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[210, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.pruning_frequency"]], "register_pruner() (in module neural_compressor.compression.pruner.pruners.base)": [[210, "neural_compressor.compression.pruner.pruners.base.register_pruner"]], "scheduler (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[210, "neural_compressor.compression.pruner.pruners.base.BasePruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[210, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[210, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.scheduler"]], "scores (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[210, "neural_compressor.compression.pruner.pruners.base.BasePruner.scores"]], "scores (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[210, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.scores"]], "scores (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[210, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.scores"]], "start_step (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[210, "neural_compressor.compression.pruner.pruners.base.BasePruner.start_step"]], "start_step (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[210, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.start_step"]], "start_step (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[210, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.start_step"]], "target_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[210, "neural_compressor.compression.pruner.pruners.base.BasePruner.target_sparsity_ratio"]], "target_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[210, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.target_sparsity_ratio"]], "target_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[210, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.target_sparsity_ratio"]], "kerasbasicpruner (class in neural_compressor.compression.pruner.pruners.basic)": [[211, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner"]], "pytorchbasicpruner (class in neural_compressor.compression.pruner.pruners.basic)": [[211, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner"]], "criterion (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[211, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.criterion"]], "criterion (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[211, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.criterion"]], "neural_compressor.compression.pruner.pruners.basic": [[211, "module-neural_compressor.compression.pruner.pruners.basic"]], "pattern (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[211, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[211, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.pattern"]], "reg (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[211, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.reg"]], "reg (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[211, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.reg"]], "scheduler (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[211, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[211, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.scheduler"]], "pytorchblockmaskpruner (class in neural_compressor.compression.pruner.pruners.block_mask)": [[212, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner"]], "criterion (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[212, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.criterion"]], "neural_compressor.compression.pruner.pruners.block_mask": [[212, "module-neural_compressor.compression.pruner.pruners.block_mask"]], "pattern (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[212, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.pattern"]], "reg (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[212, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.reg"]], "scheduler (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[212, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.scheduler"]], "get_pruner() (in module neural_compressor.compression.pruner.pruners)": [[213, "neural_compressor.compression.pruner.pruners.get_pruner"]], "neural_compressor.compression.pruner.pruners": [[213, "module-neural_compressor.compression.pruner.pruners"]], "parse_valid_pruner_types() (in module neural_compressor.compression.pruner.pruners)": [[213, "neural_compressor.compression.pruner.pruners.parse_valid_pruner_types"]], "pythonmultiheadattentionpruner (class in neural_compressor.compression.pruner.pruners.mha)": [[214, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner"]], "head_masks (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[214, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.head_masks"]], "linear_layers (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[214, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.linear_layers"]], "mha_compressions (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[214, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.mha_compressions"]], "mha_scores (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[214, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.mha_scores"]], "neural_compressor.compression.pruner.pruners.mha": [[214, "module-neural_compressor.compression.pruner.pruners.mha"]], "pytorchpatternlockpruner (class in neural_compressor.compression.pruner.pruners.pattern_lock)": [[215, "neural_compressor.compression.pruner.pruners.pattern_lock.PytorchPatternLockPruner"]], "neural_compressor.compression.pruner.pruners.pattern_lock": [[215, "module-neural_compressor.compression.pruner.pruners.pattern_lock"]], "pytorchprogressivepruner (class in neural_compressor.compression.pruner.pruners.progressive)": [[216, "neural_compressor.compression.pruner.pruners.progressive.PytorchProgressivePruner"]], "neural_compressor.compression.pruner.pruners.progressive": [[216, "module-neural_compressor.compression.pruner.pruners.progressive"]], "pytorchretrainfreepruner (class in neural_compressor.compression.pruner.pruners.retrain_free)": [[217, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner"]], "criterion (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[217, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.criterion"]], "neural_compressor.compression.pruner.pruners.retrain_free": [[217, "module-neural_compressor.compression.pruner.pruners.retrain_free"]], "pattern (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[217, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.pattern"]], "reg (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[217, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.reg"]], "scheduler (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[217, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.scheduler"]], "sparsegptpruner (class in neural_compressor.compression.pruner.pruners.sparse_gpt)": [[218, "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner"]], "criterion (neural_compressor.compression.pruner.pruners.sparse_gpt.sparsegptpruner attribute)": [[218, "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner.criterion"]], "neural_compressor.compression.pruner.pruners.sparse_gpt": [[218, "module-neural_compressor.compression.pruner.pruners.sparse_gpt"]], "pattern (neural_compressor.compression.pruner.pruners.sparse_gpt.sparsegptpruner attribute)": [[218, "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner.pattern"]], "reg (neural_compressor.compression.pruner.pruners.sparse_gpt.sparsegptpruner attribute)": [[218, "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner.reg"]], "scheduler (neural_compressor.compression.pruner.pruners.sparse_gpt.sparsegptpruner attribute)": [[218, "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner.scheduler"]], "basepruning (class in neural_compressor.compression.pruner.pruning)": [[219, "neural_compressor.compression.pruner.pruning.BasePruning"]], "basicpruning (class in neural_compressor.compression.pruner.pruning)": [[219, "neural_compressor.compression.pruner.pruning.BasicPruning"]], "retrainfreepruning (class in neural_compressor.compression.pruner.pruning)": [[219, "neural_compressor.compression.pruner.pruning.RetrainFreePruning"]], "sparsegptpruning (class in neural_compressor.compression.pruner.pruning)": [[219, "neural_compressor.compression.pruner.pruning.SparseGPTPruning"]], "config_file_path (neural_compressor.compression.pruner.pruning.basepruning attribute)": [[219, "neural_compressor.compression.pruner.pruning.BasePruning.config_file_path"]], "config_file_path (neural_compressor.compression.pruner.pruning.basicpruning attribute)": [[219, "neural_compressor.compression.pruner.pruning.BasicPruning.config_file_path"]], "config_file_path (neural_compressor.compression.pruner.pruning.retrainfreepruning attribute)": [[219, "neural_compressor.compression.pruner.pruning.RetrainFreePruning.config_file_path"]], "model (neural_compressor.compression.pruner.pruning.basepruning attribute)": [[219, "neural_compressor.compression.pruner.pruning.BasePruning.model"]], "model (neural_compressor.compression.pruner.pruning.basicpruning attribute)": [[219, "neural_compressor.compression.pruner.pruning.BasicPruning.model"]], "model (neural_compressor.compression.pruner.pruning.retrainfreepruning attribute)": [[219, "neural_compressor.compression.pruner.pruning.RetrainFreePruning.model"]], "neural_compressor.compression.pruner.pruning": [[219, "module-neural_compressor.compression.pruner.pruning"]], "pruner_info (neural_compressor.compression.pruner.pruning.basepruning attribute)": [[219, "neural_compressor.compression.pruner.pruning.BasePruning.pruner_info"]], "pruner_info (neural_compressor.compression.pruner.pruning.basicpruning attribute)": [[219, "neural_compressor.compression.pruner.pruning.BasicPruning.pruner_info"]], "pruner_info (neural_compressor.compression.pruner.pruning.retrainfreepruning attribute)": [[219, "neural_compressor.compression.pruner.pruning.RetrainFreePruning.pruner_info"]], "pruners (neural_compressor.compression.pruner.pruning.basepruning attribute)": [[219, "neural_compressor.compression.pruner.pruning.BasePruning.pruners"]], "pruners (neural_compressor.compression.pruner.pruning.basicpruning attribute)": [[219, "neural_compressor.compression.pruner.pruning.BasicPruning.pruners"]], "pruners (neural_compressor.compression.pruner.pruning.retrainfreepruning attribute)": [[219, "neural_compressor.compression.pruner.pruning.RetrainFreePruning.pruners"]], "register_pruning() (in module neural_compressor.compression.pruner.pruning)": [[219, "neural_compressor.compression.pruner.pruning.register_pruning"]], "basereg (class in neural_compressor.compression.pruner.regs)": [[220, "neural_compressor.compression.pruner.regs.BaseReg"]], "grouplasso (class in neural_compressor.compression.pruner.regs)": [[220, "neural_compressor.compression.pruner.regs.GroupLasso"]], "alpha (neural_compressor.compression.pruner.regs.grouplasso attribute)": [[220, "neural_compressor.compression.pruner.regs.GroupLasso.alpha"]], "get_reg() (in module neural_compressor.compression.pruner.regs)": [[220, "neural_compressor.compression.pruner.regs.get_reg"]], "get_reg_type() (in module neural_compressor.compression.pruner.regs)": [[220, "neural_compressor.compression.pruner.regs.get_reg_type"]], "neural_compressor.compression.pruner.regs": [[220, "module-neural_compressor.compression.pruner.regs"]], "reg_terms (neural_compressor.compression.pruner.regs.grouplasso attribute)": [[220, "neural_compressor.compression.pruner.regs.GroupLasso.reg_terms"]], "register_reg() (in module neural_compressor.compression.pruner.regs)": [[220, "neural_compressor.compression.pruner.regs.register_reg"]], "iterativescheduler (class in neural_compressor.compression.pruner.schedulers)": [[221, "neural_compressor.compression.pruner.schedulers.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.compression.pruner.schedulers)": [[221, "neural_compressor.compression.pruner.schedulers.OneshotScheduler"]], "pruningscheduler (class in neural_compressor.compression.pruner.schedulers)": [[221, "neural_compressor.compression.pruner.schedulers.PruningScheduler"]], "config (neural_compressor.compression.pruner.schedulers.pruningscheduler attribute)": [[221, "neural_compressor.compression.pruner.schedulers.PruningScheduler.config"]], "get_scheduler() (in module neural_compressor.compression.pruner.schedulers)": [[221, "neural_compressor.compression.pruner.schedulers.get_scheduler"]], "neural_compressor.compression.pruner.schedulers": [[221, "module-neural_compressor.compression.pruner.schedulers"]], "register_scheduler() (in module neural_compressor.compression.pruner.schedulers)": [[221, "neural_compressor.compression.pruner.schedulers.register_scheduler"]], "magnitudecriterion (class in neural_compressor.compression.pruner.tf_criteria)": [[222, "neural_compressor.compression.pruner.tf_criteria.MagnitudeCriterion"]], "pruningcriterion (class in neural_compressor.compression.pruner.tf_criteria)": [[222, "neural_compressor.compression.pruner.tf_criteria.PruningCriterion"]], "get_tf_criterion() (in module neural_compressor.compression.pruner.tf_criteria)": [[222, "neural_compressor.compression.pruner.tf_criteria.get_tf_criterion"]], "neural_compressor.compression.pruner.tf_criteria": [[222, "module-neural_compressor.compression.pruner.tf_criteria"]], "register_criterion() (in module neural_compressor.compression.pruner.tf_criteria)": [[222, "neural_compressor.compression.pruner.tf_criteria.register_criterion"]], "scores (neural_compressor.compression.pruner.tf_criteria.magnitudecriterion attribute)": [[222, "neural_compressor.compression.pruner.tf_criteria.MagnitudeCriterion.scores"]], "scores (neural_compressor.compression.pruner.tf_criteria.pruningcriterion attribute)": [[222, "neural_compressor.compression.pruner.tf_criteria.PruningCriterion.scores"]], "check_config() (in module neural_compressor.compression.pruner.utils)": [[223, "neural_compressor.compression.pruner.utils.check_config"]], "check_key_validity() (in module neural_compressor.compression.pruner.utils)": [[223, "neural_compressor.compression.pruner.utils.check_key_validity"]], "collect_layer_inputs() (in module neural_compressor.compression.pruner.utils)": [[223, "neural_compressor.compression.pruner.utils.collect_layer_inputs"]], "generate_pruner_config() (in module neural_compressor.compression.pruner.utils)": [[223, "neural_compressor.compression.pruner.utils.generate_pruner_config"]], "get_layers() (in module neural_compressor.compression.pruner.utils)": [[223, "neural_compressor.compression.pruner.utils.get_layers"]], "get_sparsity_ratio() (in module neural_compressor.compression.pruner.utils)": [[223, "neural_compressor.compression.pruner.utils.get_sparsity_ratio"]], "get_sparsity_ratio_tf() (in module neural_compressor.compression.pruner.utils)": [[223, "neural_compressor.compression.pruner.utils.get_sparsity_ratio_tf"]], "neural_compressor.compression.pruner.utils": [[223, "module-neural_compressor.compression.pruner.utils"]], "parse_last_linear() (in module neural_compressor.compression.pruner.utils)": [[223, "neural_compressor.compression.pruner.utils.parse_last_linear"]], "parse_last_linear_tf() (in module neural_compressor.compression.pruner.utils)": [[223, "neural_compressor.compression.pruner.utils.parse_last_linear_tf"]], "parse_to_prune() (in module neural_compressor.compression.pruner.utils)": [[223, "neural_compressor.compression.pruner.utils.parse_to_prune"]], "parse_to_prune_tf() (in module neural_compressor.compression.pruner.utils)": [[223, "neural_compressor.compression.pruner.utils.parse_to_prune_tf"]], "process_and_check_config() (in module neural_compressor.compression.pruner.utils)": [[223, "neural_compressor.compression.pruner.utils.process_and_check_config"]], "process_config() (in module neural_compressor.compression.pruner.utils)": [[223, "neural_compressor.compression.pruner.utils.process_config"]], "process_weight_config() (in module neural_compressor.compression.pruner.utils)": [[223, "neural_compressor.compression.pruner.utils.process_weight_config"]], "process_yaml_config() (in module neural_compressor.compression.pruner.utils)": [[223, "neural_compressor.compression.pruner.utils.process_yaml_config"]], "reset_none_to_default() (in module neural_compressor.compression.pruner.utils)": [[223, "neural_compressor.compression.pruner.utils.reset_none_to_default"]], "update_params() (in module neural_compressor.compression.pruner.utils)": [[223, "neural_compressor.compression.pruner.utils.update_params"]], "neural_compressor.compression.pruner.wanda": [[224, "module-neural_compressor.compression.pruner.wanda"]], "neural_compressor.compression.pruner.wanda.prune": [[225, "module-neural_compressor.compression.pruner.wanda.prune"]], "prune_wanda() (in module neural_compressor.compression.pruner.wanda.prune)": [[225, "neural_compressor.compression.pruner.wanda.prune.prune_wanda"]], "find_layers() (in module neural_compressor.compression.pruner.wanda.utils)": [[226, "neural_compressor.compression.pruner.wanda.utils.find_layers"]], "neural_compressor.compression.pruner.wanda.utils": [[226, "module-neural_compressor.compression.pruner.wanda.utils"]], "wrappedgpt (class in neural_compressor.compression.pruner.wanda.wrapper)": [[227, "neural_compressor.compression.pruner.wanda.wrapper.WrappedGPT"]], "neural_compressor.compression.pruner.wanda.wrapper": [[227, "module-neural_compressor.compression.pruner.wanda.wrapper"]], "benchmark_conf (class in neural_compressor.conf.config)": [[228, "neural_compressor.conf.config.Benchmark_Conf"]], "conf (class in neural_compressor.conf.config)": [[228, "neural_compressor.conf.config.Conf"]], "defaultconf (class in neural_compressor.conf.config)": [[228, "neural_compressor.conf.config.DefaultConf"]], "distillation_conf (class in neural_compressor.conf.config)": [[228, "neural_compressor.conf.config.Distillation_Conf"]], "graph_optimization_conf (class in neural_compressor.conf.config)": [[228, "neural_compressor.conf.config.Graph_Optimization_Conf"]], "mixedprecision_conf (class in neural_compressor.conf.config)": [[228, "neural_compressor.conf.config.MixedPrecision_Conf"]], "nasconfig (class in neural_compressor.conf.config)": [[228, "neural_compressor.conf.config.NASConfig"]], "prunerv2 (class in neural_compressor.conf.config)": [[228, "neural_compressor.conf.config.PrunerV2"]], "pruning_conf (class in neural_compressor.conf.config)": [[228, "neural_compressor.conf.config.Pruning_Conf"]], "quantization_conf (class in neural_compressor.conf.config)": [[228, "neural_compressor.conf.config.Quantization_Conf"]], "neural_compressor.conf.config": [[228, "module-neural_compressor.conf.config"]], "dotdict (class in neural_compressor.conf.dotdict)": [[229, "neural_compressor.conf.dotdict.DotDict"]], "deep_get() (in module neural_compressor.conf.dotdict)": [[229, "neural_compressor.conf.dotdict.deep_get"]], "deep_set() (in module neural_compressor.conf.dotdict)": [[229, "neural_compressor.conf.dotdict.deep_set"]], "neural_compressor.conf.dotdict": [[229, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[230, "module-neural_compressor.conf"]], "accuracycriterion (class in neural_compressor.conf.pythonic_config)": [[231, "neural_compressor.conf.pythonic_config.AccuracyCriterion"]], "benchmarkconfig (class in neural_compressor.conf.pythonic_config)": [[231, "neural_compressor.conf.pythonic_config.BenchmarkConfig"]], "distillationconfig (class in neural_compressor.conf.pythonic_config)": [[231, "neural_compressor.conf.pythonic_config.DistillationConfig"]], "knowledgedistillationlossconfig (class in neural_compressor.conf.pythonic_config)": [[231, "neural_compressor.conf.pythonic_config.KnowledgeDistillationLossConfig"]], "options (class in neural_compressor.conf.pythonic_config)": [[231, "neural_compressor.conf.pythonic_config.Options"]], "quantizationconfig (class in neural_compressor.conf.pythonic_config)": [[231, "neural_compressor.conf.pythonic_config.QuantizationConfig"]], "weightpruningconfig (class in neural_compressor.conf.pythonic_config)": [[231, "neural_compressor.conf.pythonic_config.WeightPruningConfig"]], "neural_compressor.conf.pythonic_config": [[231, "module-neural_compressor.conf.pythonic_config"]], "accuracycriterion (class in neural_compressor.config)": [[232, "neural_compressor.config.AccuracyCriterion"]], "benchmarkconfig (class in neural_compressor.config)": [[232, "neural_compressor.config.BenchmarkConfig"]], "distillationconfig (class in neural_compressor.config)": [[232, "neural_compressor.config.DistillationConfig"]], "dotdict (class in neural_compressor.config)": [[232, "neural_compressor.config.DotDict"]], "exportconfig (class in neural_compressor.config)": [[232, "neural_compressor.config.ExportConfig"]], "hpoconfig (class in neural_compressor.config)": [[232, "neural_compressor.config.HPOConfig"]], "intermediatelayersknowledgedistillationlossconfig (class in neural_compressor.config)": [[232, "neural_compressor.config.IntermediateLayersKnowledgeDistillationLossConfig"]], "keras (class in neural_compressor.config)": [[232, "neural_compressor.config.Keras"]], "knowledgedistillationlossconfig (class in neural_compressor.config)": [[232, "neural_compressor.config.KnowledgeDistillationLossConfig"]], "mxnet (class in neural_compressor.config)": [[232, "neural_compressor.config.MXNet"]], "mixedprecisionconfig (class in neural_compressor.config)": [[232, "neural_compressor.config.MixedPrecisionConfig"]], "nasconfig (class in neural_compressor.config)": [[232, "neural_compressor.config.NASConfig"]], "onnx (class in neural_compressor.config)": [[232, "neural_compressor.config.ONNX"]], "onnxqlinear2qdqconfig (class in neural_compressor.config)": [[232, "neural_compressor.config.ONNXQlinear2QDQConfig"]], "options (class in neural_compressor.config)": [[232, "neural_compressor.config.Options"]], "posttrainingquantconfig (class in neural_compressor.config)": [[232, "neural_compressor.config.PostTrainingQuantConfig"]], "pytorch (class in neural_compressor.config)": [[232, "neural_compressor.config.PyTorch"]], "quantizationawaretrainingconfig (class in neural_compressor.config)": [[232, "neural_compressor.config.QuantizationAwareTrainingConfig"]], "selfknowledgedistillationlossconfig (class in neural_compressor.config)": [[232, "neural_compressor.config.SelfKnowledgeDistillationLossConfig"]], "tf2onnxconfig (class in neural_compressor.config)": [[232, "neural_compressor.config.TF2ONNXConfig"]], "tensorflow (class in neural_compressor.config)": [[232, "neural_compressor.config.TensorFlow"]], "torch2onnxconfig (class in neural_compressor.config)": [[232, "neural_compressor.config.Torch2ONNXConfig"]], "tuningcriterion (class in neural_compressor.config)": [[232, "neural_compressor.config.TuningCriterion"]], "weightpruningconfig (class in neural_compressor.config)": [[232, "neural_compressor.config.WeightPruningConfig"]], "neural_compressor.config": [[232, "module-neural_compressor.config"]], "neural_compressor.contrib": [[233, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[234, "module-neural_compressor.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.contrib.strategy.sigopt)": [[235, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.sigopt": [[235, "module-neural_compressor.contrib.strategy.sigopt"]], "tpetunestrategy (class in neural_compressor.contrib.strategy.tpe)": [[236, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[236, "module-neural_compressor.contrib.strategy.tpe"]], "basedataloader (class in neural_compressor.data.dataloaders.base_dataloader)": [[237, "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader"]], "neural_compressor.data.dataloaders.base_dataloader": [[237, "module-neural_compressor.data.dataloaders.base_dataloader"]], "dataloader (class in neural_compressor.data.dataloaders.dataloader)": [[238, "neural_compressor.data.dataloaders.dataloader.DataLoader"]], "check_dataloader() (in module neural_compressor.data.dataloaders.dataloader)": [[238, "neural_compressor.data.dataloaders.dataloader.check_dataloader"]], "neural_compressor.data.dataloaders.dataloader": [[238, "module-neural_compressor.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.data.dataloaders.default_dataloader)": [[239, "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader"]], "default_collate() (in module neural_compressor.data.dataloaders.default_dataloader)": [[239, "neural_compressor.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.data.dataloaders.default_dataloader": [[239, "module-neural_compressor.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.data.dataloaders.fetcher)": [[240, "neural_compressor.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.data.dataloaders.fetcher)": [[240, "neural_compressor.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.data.dataloaders.fetcher)": [[240, "neural_compressor.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.data.dataloaders.fetcher": [[240, "module-neural_compressor.data.dataloaders.fetcher"]], "neural_compressor.data.dataloaders": [[241, "module-neural_compressor.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.data.dataloaders.mxnet_dataloader)": [[242, "neural_compressor.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[242, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[243, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[243, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[243, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.data.dataloaders.pytorch_dataloader)": [[244, "neural_compressor.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[244, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.data.dataloaders.sampler)": [[245, "neural_compressor.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.data.dataloaders.sampler)": [[245, "neural_compressor.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.data.dataloaders.sampler)": [[245, "neural_compressor.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.data.dataloaders.sampler)": [[245, "neural_compressor.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.data.dataloaders.sampler": [[245, "module-neural_compressor.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[246, "neural_compressor.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[246, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[246, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[246, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[246, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.data.datasets.bert_dataset)": [[247, "neural_compressor.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[247, "neural_compressor.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.data.datasets.bert_dataset)": [[247, "neural_compressor.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[247, "neural_compressor.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[247, "neural_compressor.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[247, "neural_compressor.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.data.datasets.bert_dataset)": [[247, "neural_compressor.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.data.datasets.bert_dataset)": [[247, "neural_compressor.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.data.datasets.bert_dataset": [[247, "module-neural_compressor.data.datasets.bert_dataset"]], "coconpy (class in neural_compressor.data.datasets.coco_dataset)": [[248, "neural_compressor.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.data.datasets.coco_dataset)": [[248, "neural_compressor.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.data.datasets.coco_dataset)": [[248, "neural_compressor.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.data.datasets.coco_dataset)": [[248, "neural_compressor.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.data.datasets.coco_dataset": [[248, "module-neural_compressor.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.data.datasets.dataset)": [[249, "neural_compressor.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.data.datasets.dataset)": [[249, "neural_compressor.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.data.datasets.dataset)": [[249, "neural_compressor.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.data.datasets.dataset)": [[249, "neural_compressor.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.data.datasets.dataset)": [[249, "neural_compressor.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.data.datasets.dataset)": [[249, "neural_compressor.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.data.datasets.dataset)": [[249, "neural_compressor.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.data.datasets.dataset)": [[249, "neural_compressor.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.data.datasets.dataset)": [[249, "neural_compressor.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.data.datasets.dataset)": [[249, "neural_compressor.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.data.datasets.dataset)": [[249, "neural_compressor.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.data.datasets.dataset)": [[249, "neural_compressor.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.data.datasets.dataset)": [[249, "neural_compressor.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.data.datasets.dataset)": [[249, "neural_compressor.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.data.datasets.dataset)": [[249, "neural_compressor.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.data.datasets.dataset)": [[249, "neural_compressor.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.data.datasets.dataset)": [[249, "neural_compressor.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.data.datasets.dataset)": [[249, "neural_compressor.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.data.datasets.dataset)": [[249, "neural_compressor.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.data.datasets.dataset)": [[249, "neural_compressor.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.data.datasets.dataset)": [[249, "neural_compressor.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.data.datasets.dataset)": [[249, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.datasets.dataset)": [[249, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflow (class in neural_compressor.data.datasets.dataset)": [[249, "neural_compressor.data.datasets.dataset.Tensorflow"]], "tensorflowcifar10 (class in neural_compressor.data.datasets.dataset)": [[249, "neural_compressor.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.data.datasets.dataset)": [[249, "neural_compressor.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.data.datasets.dataset)": [[249, "neural_compressor.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.data.datasets.dataset)": [[249, "neural_compressor.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagerecord (class in neural_compressor.data.datasets.dataset)": [[249, "neural_compressor.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.data.datasets.dataset)": [[249, "neural_compressor.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.data.datasets.dataset)": [[249, "neural_compressor.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.data.datasets.dataset)": [[249, "neural_compressor.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.data.datasets.dataset)": [[249, "neural_compressor.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.data.datasets.dataset)": [[249, "neural_compressor.data.datasets.dataset.check_integrity"]], "dataset_registry() (in module neural_compressor.data.datasets.dataset)": [[249, "neural_compressor.data.datasets.dataset.dataset_registry"]], "download_url() (in module neural_compressor.data.datasets.dataset)": [[249, "neural_compressor.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.data.datasets.dataset)": [[249, "neural_compressor.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.data.datasets.dataset)": [[249, "neural_compressor.data.datasets.dataset.gen_bar_updater"]], "neural_compressor.data.datasets.dataset": [[249, "module-neural_compressor.data.datasets.dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset)": [[250, "neural_compressor.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset": [[250, "module-neural_compressor.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[251, "neural_compressor.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[251, "neural_compressor.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[251, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[252, "neural_compressor.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[252, "neural_compressor.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[252, "neural_compressor.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[252, "neural_compressor.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[252, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[252, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.data.datasets.imagenet_dataset": [[252, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[253, "module-neural_compressor.data.datasets"]], "styletransferdataset (class in neural_compressor.data.datasets.style_transfer_dataset)": [[254, "neural_compressor.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.data.datasets.style_transfer_dataset": [[254, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.data.filters.coco_filter)": [[255, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.data.filters.coco_filter)": [[255, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.coco_filter": [[255, "module-neural_compressor.data.filters.coco_filter"]], "filters (class in neural_compressor.data.filters.filter)": [[256, "neural_compressor.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.data.filters.filter)": [[256, "neural_compressor.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.data.filters.filter)": [[256, "neural_compressor.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.data.filters.filter)": [[256, "neural_compressor.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.data.filters.filter)": [[256, "neural_compressor.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.data.filters.filter)": [[256, "neural_compressor.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.data.filters.filter)": [[256, "neural_compressor.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.data.filters.filter)": [[256, "neural_compressor.data.filters.filter.filter_registry"]], "neural_compressor.data.filters.filter": [[256, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[257, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[258, "module-neural_compressor.data"]], "parsedecodecocotransform (class in neural_compressor.data.transforms.coco_transform)": [[259, "neural_compressor.data.transforms.coco_transform.ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.coco_transform": [[259, "module-neural_compressor.data.transforms.coco_transform"]], "bilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[260, "neural_compressor.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.data.transforms.imagenet_transform)": [[260, "neural_compressor.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[260, "neural_compressor.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[260, "neural_compressor.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.data.transforms.imagenet_transform)": [[260, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[260, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.data.transforms.imagenet_transform)": [[260, "neural_compressor.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.data.transforms.imagenet_transform)": [[260, "neural_compressor.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[260, "neural_compressor.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "tensorflowshiftrescale (class in neural_compressor.data.transforms.imagenet_transform)": [[260, "neural_compressor.data.transforms.imagenet_transform.TensorflowShiftRescale"]], "tensorflowtransposelastchannel (class in neural_compressor.data.transforms.imagenet_transform)": [[260, "neural_compressor.data.transforms.imagenet_transform.TensorflowTransposeLastChannel"]], "neural_compressor.data.transforms.imagenet_transform": [[260, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[261, "module-neural_compressor.data.transforms"]], "postprocess (class in neural_compressor.data.transforms.postprocess)": [[262, "neural_compressor.data.transforms.postprocess.Postprocess"]], "neural_compressor.data.transforms.postprocess": [[262, "module-neural_compressor.data.transforms.postprocess"]], "basictokenizer (class in neural_compressor.data.transforms.tokenization)": [[263, "neural_compressor.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.data.transforms.tokenization)": [[263, "neural_compressor.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.data.transforms.tokenization)": [[263, "neural_compressor.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.data.transforms.tokenization)": [[263, "neural_compressor.data.transforms.tokenization.convert_by_vocab"]], "convert_to_unicode() (in module neural_compressor.data.transforms.tokenization)": [[263, "neural_compressor.data.transforms.tokenization.convert_to_unicode"]], "load_vocab() (in module neural_compressor.data.transforms.tokenization)": [[263, "neural_compressor.data.transforms.tokenization.load_vocab"]], "neural_compressor.data.transforms.tokenization": [[263, "module-neural_compressor.data.transforms.tokenization"]], "whitespace_tokenize() (in module neural_compressor.data.transforms.tokenization)": [[263, "neural_compressor.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.data.transforms.transform)": [[264, "neural_compressor.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.data.transforms.transform)": [[264, "neural_compressor.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.data.transforms.transform)": [[264, "neural_compressor.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.data.transforms.transform)": [[264, "neural_compressor.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.data.transforms.transform)": [[264, "neural_compressor.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.data.transforms.transform)": [[264, "neural_compressor.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.data.transforms.transform)": [[264, "neural_compressor.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.data.transforms.transform)": [[264, "neural_compressor.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.data.transforms.transform)": [[264, "neural_compressor.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.data.transforms.transform)": [[264, "neural_compressor.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.data.transforms.transform)": [[264, "neural_compressor.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.data.transforms.transform)": [[264, "neural_compressor.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.data.transforms.transform)": [[264, "neural_compressor.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.data.transforms.transform)": [[264, "neural_compressor.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[264, "neural_compressor.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.data.transforms.transform)": [[264, "neural_compressor.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.data.transforms.transform)": [[264, "neural_compressor.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.data.transforms.transform)": [[264, "neural_compressor.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.data.transforms.transform)": [[264, "neural_compressor.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.data.transforms.transform)": [[264, "neural_compressor.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[264, "neural_compressor.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.data.transforms.transform)": [[264, "neural_compressor.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.data.transforms.transform)": [[264, "neural_compressor.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.data.transforms.transform)": [[264, "neural_compressor.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.data.transforms.transform)": [[264, "neural_compressor.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.data.transforms.transform)": [[264, "neural_compressor.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.data.transforms.transform)": [[264, "neural_compressor.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.data.transforms.transform)": [[264, "neural_compressor.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.data.transforms.transform)": [[264, "neural_compressor.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.data.transforms.transform)": [[264, "neural_compressor.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.data.transforms.transform)": [[264, "neural_compressor.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.transforms.transform)": [[264, "neural_compressor.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.data.transforms.transform)": [[264, "neural_compressor.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.data.transforms.transform)": [[264, "neural_compressor.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[264, "neural_compressor.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.data.transforms.transform)": [[264, "neural_compressor.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.data.transforms.transform)": [[264, "neural_compressor.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.data.transforms.transform)": [[264, "neural_compressor.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.data.transforms.transform)": [[264, "neural_compressor.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.data.transforms.transform)": [[264, "neural_compressor.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.data.transforms.transform)": [[264, "neural_compressor.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.data.transforms.transform)": [[264, "neural_compressor.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.data.transforms.transform)": [[264, "neural_compressor.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.data.transforms.transform)": [[264, "neural_compressor.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.data.transforms.transform)": [[264, "neural_compressor.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.data.transforms.transform)": [[264, "neural_compressor.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.data.transforms.transform)": [[264, "neural_compressor.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.data.transforms.transform)": [[264, "neural_compressor.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.data.transforms.transform)": [[264, "neural_compressor.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.data.transforms.transform)": [[264, "neural_compressor.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.data.transforms.transform)": [[264, "neural_compressor.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.data.transforms.transform)": [[264, "neural_compressor.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.data.transforms.transform)": [[264, "neural_compressor.data.transforms.transform.TRANSFORMS"], [264, "neural_compressor.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[264, "neural_compressor.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[264, "neural_compressor.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.data.transforms.transform)": [[264, "neural_compressor.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.data.transforms.transform)": [[264, "neural_compressor.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.data.transforms.transform)": [[264, "neural_compressor.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.data.transforms.transform)": [[264, "neural_compressor.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.data.transforms.transform)": [[264, "neural_compressor.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.data.transforms.transform)": [[264, "neural_compressor.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.data.transforms.transform)": [[264, "neural_compressor.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.data.transforms.transform)": [[264, "neural_compressor.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.data.transforms.transform)": [[264, "neural_compressor.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.data.transforms.transform)": [[264, "neural_compressor.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.data.transforms.transform)": [[264, "neural_compressor.data.transforms.transform.get_final_text"]], "get_torchvision_map() (in module neural_compressor.data.transforms.transform)": [[264, "neural_compressor.data.transforms.transform.get_torchvision_map"]], "neural_compressor.data.transforms.transform": [[264, "module-neural_compressor.data.transforms.transform"]], "read_squad_examples() (in module neural_compressor.data.transforms.transform)": [[264, "neural_compressor.data.transforms.transform.read_squad_examples"]], "transform_registry() (in module neural_compressor.data.transforms.transform)": [[264, "neural_compressor.data.transforms.transform.transform_registry"]], "benchmark (class in neural_compressor.experimental.benchmark)": [[265, "neural_compressor.experimental.benchmark.Benchmark"]], "get_architecture() (in module neural_compressor.experimental.benchmark)": [[265, "neural_compressor.experimental.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.experimental.benchmark)": [[265, "neural_compressor.experimental.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.experimental.benchmark)": [[265, "neural_compressor.experimental.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.experimental.benchmark)": [[265, "neural_compressor.experimental.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.experimental.benchmark)": [[265, "neural_compressor.experimental.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.experimental.benchmark)": [[265, "neural_compressor.experimental.benchmark.get_threads_per_core"]], "neural_compressor.experimental.benchmark": [[265, "module-neural_compressor.experimental.benchmark"]], "set_all_env_var() (in module neural_compressor.experimental.benchmark)": [[265, "neural_compressor.experimental.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.experimental.benchmark)": [[265, "neural_compressor.experimental.benchmark.set_env_var"]], "criterions (class in neural_compressor.experimental.common.criterion)": [[266, "neural_compressor.experimental.common.criterion.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[266, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.experimental.common.criterion)": [[266, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[266, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss"]], "pytorchcriterions (class in neural_compressor.experimental.common.criterion)": [[266, "neural_compressor.experimental.common.criterion.PyTorchCriterions"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[266, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[266, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[266, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[266, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[266, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss"]], "tensorflowcriterions (class in neural_compressor.experimental.common.criterion)": [[266, "neural_compressor.experimental.common.criterion.TensorflowCriterions"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.experimental.common.criterion)": [[266, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal"]], "criterion_registry() (in module neural_compressor.experimental.common.criterion)": [[266, "neural_compressor.experimental.common.criterion.criterion_registry"]], "neural_compressor.experimental.common.criterion": [[266, "module-neural_compressor.experimental.common.criterion"]], "dataloader (class in neural_compressor.experimental.common.dataloader)": [[267, "neural_compressor.experimental.common.dataloader.DataLoader"]], "neural_compressor.experimental.common.dataloader": [[267, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[268, "module-neural_compressor.experimental.common"]], "metric (class in neural_compressor.experimental.common.metric)": [[269, "neural_compressor.experimental.common.metric.Metric"]], "neural_compressor.experimental.common.metric": [[269, "module-neural_compressor.experimental.common.metric"]], "model (class in neural_compressor.experimental.common.model)": [[270, "neural_compressor.experimental.common.model.Model"]], "neural_compressor.experimental.common.model": [[270, "module-neural_compressor.experimental.common.model"]], "set_backend() (in module neural_compressor.experimental.common.model)": [[270, "neural_compressor.experimental.common.model.set_backend"]], "optimizers (class in neural_compressor.experimental.common.optimizer)": [[271, "neural_compressor.experimental.common.optimizer.Optimizers"]], "pytorchoptimizers (class in neural_compressor.experimental.common.optimizer)": [[271, "neural_compressor.experimental.common.optimizer.PyTorchOptimizers"]], "pytorchsgd (class in neural_compressor.experimental.common.optimizer)": [[271, "neural_compressor.experimental.common.optimizer.PyTorchSGD"]], "tensorflowadamw (class in neural_compressor.experimental.common.optimizer)": [[271, "neural_compressor.experimental.common.optimizer.TensorFlowAdamW"]], "tensorflowsgd (class in neural_compressor.experimental.common.optimizer)": [[271, "neural_compressor.experimental.common.optimizer.TensorFlowSGD"]], "tensorflowoptimizers (class in neural_compressor.experimental.common.optimizer)": [[271, "neural_compressor.experimental.common.optimizer.TensorflowOptimizers"]], "neural_compressor.experimental.common.optimizer": [[271, "module-neural_compressor.experimental.common.optimizer"]], "optimizer_registry() (in module neural_compressor.experimental.common.optimizer)": [[271, "neural_compressor.experimental.common.optimizer.optimizer_registry"]], "postprocess (class in neural_compressor.experimental.common.postprocess)": [[272, "neural_compressor.experimental.common.postprocess.Postprocess"]], "neural_compressor.experimental.common.postprocess": [[272, "module-neural_compressor.experimental.common.postprocess"]], "get_activation() (in module neural_compressor.experimental.common.torch_utils)": [[273, "neural_compressor.experimental.common.torch_utils.get_activation"]], "neural_compressor.experimental.common.torch_utils": [[273, "module-neural_compressor.experimental.common.torch_utils"]], "record_output() (in module neural_compressor.experimental.common.torch_utils)": [[273, "neural_compressor.experimental.common.torch_utils.record_output"]], "component (class in neural_compressor.experimental.component)": [[274, "neural_compressor.experimental.component.Component"]], "neural_compressor.experimental.component": [[274, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.compression": [[275, "module-neural_compressor.experimental.compression"]], "neural_compressor.experimental.contrib": [[276, "module-neural_compressor.experimental.contrib"]], "neural_compressor.experimental.contrib.strategy": [[277, "module-neural_compressor.experimental.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.experimental.contrib.strategy.sigopt)": [[278, "neural_compressor.experimental.contrib.strategy.sigopt.SigOptTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[278, "module-neural_compressor.experimental.contrib.strategy.sigopt"]], "tpetunestrategy (class in neural_compressor.experimental.contrib.strategy.tpe)": [[279, "neural_compressor.experimental.contrib.strategy.tpe.TpeTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.tpe": [[279, "module-neural_compressor.experimental.contrib.strategy.tpe"]], "basedataloader (class in neural_compressor.experimental.data.dataloaders.base_dataloader)": [[280, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[280, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[281, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.experimental.data.dataloaders.default_dataloader)": [[282, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader"]], "default_collate() (in module neural_compressor.experimental.data.dataloaders.default_dataloader)": [[282, "neural_compressor.experimental.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[282, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[283, "neural_compressor.experimental.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[283, "neural_compressor.experimental.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[283, "neural_compressor.experimental.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[283, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[284, "module-neural_compressor.experimental.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.experimental.data.dataloaders.mxnet_dataloader)": [[285, "neural_compressor.experimental.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[285, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[286, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[286, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[286, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.experimental.data.dataloaders.pytorch_dataloader)": [[287, "neural_compressor.experimental.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[287, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[288, "neural_compressor.experimental.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[288, "neural_compressor.experimental.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[288, "neural_compressor.experimental.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[288, "neural_compressor.experimental.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.sampler": [[288, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[289, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[289, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[289, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[289, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[289, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[290, "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[290, "neural_compressor.experimental.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[290, "neural_compressor.experimental.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[290, "neural_compressor.experimental.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[290, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[290, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[290, "neural_compressor.experimental.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[290, "neural_compressor.experimental.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[290, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "coconpy (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[291, "neural_compressor.experimental.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[291, "neural_compressor.experimental.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[291, "neural_compressor.experimental.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[291, "neural_compressor.experimental.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[291, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[292, "neural_compressor.experimental.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[292, "neural_compressor.experimental.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.experimental.data.datasets.dataset)": [[292, "neural_compressor.experimental.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.experimental.data.datasets.dataset)": [[292, "neural_compressor.experimental.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[292, "neural_compressor.experimental.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[292, "neural_compressor.experimental.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.experimental.data.datasets.dataset)": [[292, "neural_compressor.experimental.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.experimental.data.datasets.dataset)": [[292, "neural_compressor.experimental.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[292, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[292, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[292, "neural_compressor.experimental.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[292, "neural_compressor.experimental.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[292, "neural_compressor.experimental.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[292, "neural_compressor.experimental.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[292, "neural_compressor.experimental.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[292, "neural_compressor.experimental.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[292, "neural_compressor.experimental.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[292, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[292, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[292, "neural_compressor.experimental.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[292, "neural_compressor.experimental.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.experimental.data.datasets.dataset)": [[292, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.datasets.dataset)": [[292, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflowcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[292, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[292, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[292, "neural_compressor.experimental.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[292, "neural_compressor.experimental.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[292, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageFolder"]], "tensorflowimagerecord (class in neural_compressor.experimental.data.datasets.dataset)": [[292, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[292, "neural_compressor.experimental.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.experimental.data.datasets.dataset)": [[292, "neural_compressor.experimental.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.experimental.data.datasets.dataset)": [[292, "neural_compressor.experimental.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.experimental.data.datasets.dataset)": [[292, "neural_compressor.experimental.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.experimental.data.datasets.dataset)": [[292, "neural_compressor.experimental.data.datasets.dataset.check_integrity"]], "dataset_registry() (in module neural_compressor.experimental.data.datasets.dataset)": [[292, "neural_compressor.experimental.data.datasets.dataset.dataset_registry"]], "download_url() (in module neural_compressor.experimental.data.datasets.dataset)": [[292, "neural_compressor.experimental.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.experimental.data.datasets.dataset)": [[292, "neural_compressor.experimental.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.experimental.data.datasets.dataset)": [[292, "neural_compressor.experimental.data.datasets.dataset.gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dataset": [[292, "module-neural_compressor.experimental.data.datasets.dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset)": [[293, "neural_compressor.experimental.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[293, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[294, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[294, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[294, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[295, "neural_compressor.experimental.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[295, "neural_compressor.experimental.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[295, "neural_compressor.experimental.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[295, "neural_compressor.experimental.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[295, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[295, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[295, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[296, "module-neural_compressor.experimental.data.datasets"]], "styletransferdataset (class in neural_compressor.experimental.data.datasets.style_transfer_dataset)": [[297, "neural_compressor.experimental.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[297, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[298, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[298, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.coco_filter": [[298, "module-neural_compressor.experimental.data.filters.coco_filter"]], "filters (class in neural_compressor.experimental.data.filters.filter)": [[299, "neural_compressor.experimental.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.experimental.data.filters.filter)": [[299, "neural_compressor.experimental.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.experimental.data.filters.filter)": [[299, "neural_compressor.experimental.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.experimental.data.filters.filter)": [[299, "neural_compressor.experimental.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.experimental.data.filters.filter)": [[299, "neural_compressor.experimental.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.experimental.data.filters.filter)": [[299, "neural_compressor.experimental.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.experimental.data.filters.filter)": [[299, "neural_compressor.experimental.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.experimental.data.filters.filter)": [[299, "neural_compressor.experimental.data.filters.filter.filter_registry"]], "neural_compressor.experimental.data.filters.filter": [[299, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[300, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[301, "module-neural_compressor.experimental.data"]], "bilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[302, "neural_compressor.experimental.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[302, "neural_compressor.experimental.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[302, "neural_compressor.experimental.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[302, "neural_compressor.experimental.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[302, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[302, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[302, "neural_compressor.experimental.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[302, "neural_compressor.experimental.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[302, "neural_compressor.experimental.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[302, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[303, "module-neural_compressor.experimental.data.transforms"]], "basictokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[304, "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[304, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[304, "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[304, "neural_compressor.experimental.data.transforms.tokenization.convert_by_vocab"]], "convert_to_unicode() (in module neural_compressor.experimental.data.transforms.tokenization)": [[304, "neural_compressor.experimental.data.transforms.tokenization.convert_to_unicode"]], "load_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[304, "neural_compressor.experimental.data.transforms.tokenization.load_vocab"]], "neural_compressor.experimental.data.transforms.tokenization": [[304, "module-neural_compressor.experimental.data.transforms.tokenization"]], "whitespace_tokenize() (in module neural_compressor.experimental.data.transforms.tokenization)": [[304, "neural_compressor.experimental.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.experimental.data.transforms.transform)": [[305, "neural_compressor.experimental.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.experimental.data.transforms.transform)": [[305, "neural_compressor.experimental.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.experimental.data.transforms.transform)": [[305, "neural_compressor.experimental.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[305, "neural_compressor.experimental.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.experimental.data.transforms.transform)": [[305, "neural_compressor.experimental.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[305, "neural_compressor.experimental.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[305, "neural_compressor.experimental.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[305, "neural_compressor.experimental.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.experimental.data.transforms.transform)": [[305, "neural_compressor.experimental.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[305, "neural_compressor.experimental.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[305, "neural_compressor.experimental.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[305, "neural_compressor.experimental.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.experimental.data.transforms.transform)": [[305, "neural_compressor.experimental.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[305, "neural_compressor.experimental.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[305, "neural_compressor.experimental.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[305, "neural_compressor.experimental.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.experimental.data.transforms.transform)": [[305, "neural_compressor.experimental.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.experimental.data.transforms.transform)": [[305, "neural_compressor.experimental.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[305, "neural_compressor.experimental.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[305, "neural_compressor.experimental.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[305, "neural_compressor.experimental.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.experimental.data.transforms.transform)": [[305, "neural_compressor.experimental.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.experimental.data.transforms.transform)": [[305, "neural_compressor.experimental.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[305, "neural_compressor.experimental.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.experimental.data.transforms.transform)": [[305, "neural_compressor.experimental.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.experimental.data.transforms.transform)": [[305, "neural_compressor.experimental.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[305, "neural_compressor.experimental.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[305, "neural_compressor.experimental.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[305, "neural_compressor.experimental.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[305, "neural_compressor.experimental.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[305, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[305, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[305, "neural_compressor.experimental.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[305, "neural_compressor.experimental.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[305, "neural_compressor.experimental.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[305, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[305, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[305, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[305, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[305, "neural_compressor.experimental.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.experimental.data.transforms.transform)": [[305, "neural_compressor.experimental.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.experimental.data.transforms.transform)": [[305, "neural_compressor.experimental.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.experimental.data.transforms.transform)": [[305, "neural_compressor.experimental.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[305, "neural_compressor.experimental.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[305, "neural_compressor.experimental.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[305, "neural_compressor.experimental.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[305, "neural_compressor.experimental.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[305, "neural_compressor.experimental.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.experimental.data.transforms.transform)": [[305, "neural_compressor.experimental.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[305, "neural_compressor.experimental.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.experimental.data.transforms.transform)": [[305, "neural_compressor.experimental.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.experimental.data.transforms.transform)": [[305, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.experimental.data.transforms.transform)": [[305, "neural_compressor.experimental.data.transforms.transform.TRANSFORMS"], [305, "neural_compressor.experimental.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[305, "neural_compressor.experimental.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[305, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[305, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[305, "neural_compressor.experimental.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.experimental.data.transforms.transform)": [[305, "neural_compressor.experimental.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[305, "neural_compressor.experimental.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[305, "neural_compressor.experimental.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[305, "neural_compressor.experimental.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.experimental.data.transforms.transform)": [[305, "neural_compressor.experimental.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.experimental.data.transforms.transform)": [[305, "neural_compressor.experimental.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.experimental.data.transforms.transform)": [[305, "neural_compressor.experimental.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.transforms.transform)": [[305, "neural_compressor.experimental.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.experimental.data.transforms.transform)": [[305, "neural_compressor.experimental.data.transforms.transform.get_final_text"]], "get_torchvision_map() (in module neural_compressor.experimental.data.transforms.transform)": [[305, "neural_compressor.experimental.data.transforms.transform.get_torchvision_map"]], "neural_compressor.experimental.data.transforms.transform": [[305, "module-neural_compressor.experimental.data.transforms.transform"]], "read_squad_examples() (in module neural_compressor.experimental.data.transforms.transform)": [[305, "neural_compressor.experimental.data.transforms.transform.read_squad_examples"]], "transform_registry() (in module neural_compressor.experimental.data.transforms.transform)": [[305, "neural_compressor.experimental.data.transforms.transform.transform_registry"]], "distillation (class in neural_compressor.experimental.distillation)": [[306, "neural_compressor.experimental.distillation.Distillation"]], "_epoch_ran (neural_compressor.experimental.distillation.distillation attribute)": [[306, "neural_compressor.experimental.distillation.Distillation._epoch_ran"]], "best_model (neural_compressor.experimental.distillation.distillation attribute)": [[306, "neural_compressor.experimental.distillation.Distillation.best_model"]], "best_score (neural_compressor.experimental.distillation.distillation attribute)": [[306, "neural_compressor.experimental.distillation.Distillation.best_score"]], "eval_frequency (neural_compressor.experimental.distillation.distillation attribute)": [[306, "neural_compressor.experimental.distillation.Distillation.eval_frequency"]], "neural_compressor.experimental.distillation": [[306, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[307, "module-neural_compressor.experimental.export"]], "check_model() (in module neural_compressor.experimental.export.qlinear2qdq)": [[308, "neural_compressor.experimental.export.qlinear2qdq.check_model"]], "neural_compressor.experimental.export.qlinear2qdq": [[308, "module-neural_compressor.experimental.export.qlinear2qdq"]], "onnx_qlinear_to_qdq() (in module neural_compressor.experimental.export.qlinear2qdq)": [[308, "neural_compressor.experimental.export.qlinear2qdq.onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.tf2onnx": [[309, "module-neural_compressor.experimental.export.tf2onnx"]], "tf_to_fp32_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[309, "neural_compressor.experimental.export.tf2onnx.tf_to_fp32_onnx"]], "tf_to_int8_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[309, "neural_compressor.experimental.export.tf2onnx.tf_to_int8_onnx"]], "dynamic_quant_export() (in module neural_compressor.experimental.export.torch2onnx)": [[310, "neural_compressor.experimental.export.torch2onnx.dynamic_quant_export"]], "get_node_mapping() (in module neural_compressor.experimental.export.torch2onnx)": [[310, "neural_compressor.experimental.export.torch2onnx.get_node_mapping"]], "get_quantizable_onnx_ops() (in module neural_compressor.experimental.export.torch2onnx)": [[310, "neural_compressor.experimental.export.torch2onnx.get_quantizable_onnx_ops"]], "neural_compressor.experimental.export.torch2onnx": [[310, "module-neural_compressor.experimental.export.torch2onnx"]], "static_quant_export() (in module neural_compressor.experimental.export.torch2onnx)": [[310, "neural_compressor.experimental.export.torch2onnx.static_quant_export"]], "torch_to_fp32_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[310, "neural_compressor.experimental.export.torch2onnx.torch_to_fp32_onnx"]], "torch_to_int8_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[310, "neural_compressor.experimental.export.torch2onnx.torch_to_int8_onnx"]], "graph_optimization (class in neural_compressor.experimental.graph_optimization)": [[311, "neural_compressor.experimental.graph_optimization.Graph_Optimization"]], "neural_compressor.experimental.graph_optimization": [[311, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[312, "module-neural_compressor.experimental"]], "bleu (class in neural_compressor.experimental.metric.bleu)": [[313, "neural_compressor.experimental.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.experimental.metric.bleu)": [[313, "neural_compressor.experimental.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.experimental.metric.bleu)": [[313, "neural_compressor.experimental.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.experimental.metric.bleu.bleu attribute)": [[313, "neural_compressor.experimental.metric.bleu.BLEU.labels"]], "neural_compressor.experimental.metric.bleu": [[313, "module-neural_compressor.experimental.metric.bleu"]], "nondigit_punct_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[313, "neural_compressor.experimental.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.experimental.metric.bleu.bleu attribute)": [[313, "neural_compressor.experimental.metric.bleu.BLEU.predictions"]], "punct_nondigit_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[313, "neural_compressor.experimental.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[313, "neural_compressor.experimental.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.experimental.metric.bleu_util)": [[314, "neural_compressor.experimental.metric.bleu_util.compute_bleu"]], "neural_compressor.experimental.metric.bleu_util": [[314, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[315, "module-neural_compressor.experimental.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.experimental.metric.coco_tools)": [[316, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.experimental.metric.coco_tools)": [[316, "neural_compressor.experimental.metric.coco_tools.COCOWrapper"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.experimental.metric.coco_tools)": [[316, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.experimental.metric.coco_tools)": [[316, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.experimental.metric.coco_tools)": [[316, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "dataset (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[316, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[316, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.experimental.metric.coco_tools": [[316, "module-neural_compressor.experimental.metric.coco_tools"]], "evaluate() (in module neural_compressor.experimental.metric.evaluate_squad)": [[317, "neural_compressor.experimental.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[317, "neural_compressor.experimental.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[317, "neural_compressor.experimental.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.evaluate_squad)": [[317, "neural_compressor.experimental.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.evaluate_squad": [[317, "module-neural_compressor.experimental.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.experimental.metric.f1)": [[318, "neural_compressor.experimental.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.experimental.metric.f1)": [[318, "neural_compressor.experimental.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.f1)": [[318, "neural_compressor.experimental.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[318, "module-neural_compressor.experimental.metric.f1"]], "normalize_answer() (in module neural_compressor.experimental.metric.f1)": [[318, "neural_compressor.experimental.metric.f1.normalize_answer"]], "neural_compressor.experimental.metric": [[319, "module-neural_compressor.experimental.metric"]], "accuracy (class in neural_compressor.experimental.metric.metric)": [[320, "neural_compressor.experimental.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.experimental.metric.metric)": [[320, "neural_compressor.experimental.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.experimental.metric.metric)": [[320, "neural_compressor.experimental.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.experimental.metric.metric)": [[320, "neural_compressor.experimental.metric.metric.F1"]], "generaltopk (class in neural_compressor.experimental.metric.metric)": [[320, "neural_compressor.experimental.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.experimental.metric.metric)": [[320, "neural_compressor.experimental.metric.metric.Loss"]], "mae (class in neural_compressor.experimental.metric.metric)": [[320, "neural_compressor.experimental.metric.metric.MAE"]], "metrics (class in neural_compressor.experimental.metric.metric)": [[320, "neural_compressor.experimental.metric.metric.METRICS"]], "mse (class in neural_compressor.experimental.metric.metric)": [[320, "neural_compressor.experimental.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.experimental.metric.metric)": [[320, "neural_compressor.experimental.metric.metric.MXNetMetrics"]], "onnxrtglue (class in neural_compressor.experimental.metric.metric)": [[320, "neural_compressor.experimental.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.experimental.metric.metric)": [[320, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.experimental.metric.metric)": [[320, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.experimental.metric.metric)": [[320, "neural_compressor.experimental.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.experimental.metric.metric)": [[320, "neural_compressor.experimental.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.experimental.metric.metric)": [[320, "neural_compressor.experimental.metric.metric.RMSE"]], "roc (class in neural_compressor.experimental.metric.metric)": [[320, "neural_compressor.experimental.metric.metric.ROC"]], "squadf1 (class in neural_compressor.experimental.metric.metric)": [[320, "neural_compressor.experimental.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.experimental.metric.metric)": [[320, "neural_compressor.experimental.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.experimental.metric.metric)": [[320, "neural_compressor.experimental.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.experimental.metric.metric)": [[320, "neural_compressor.experimental.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.experimental.metric.metric)": [[320, "neural_compressor.experimental.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.experimental.metric.metric)": [[320, "neural_compressor.experimental.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.experimental.metric.metric)": [[320, "neural_compressor.experimental.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.experimental.metric.metric)": [[320, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.experimental.metric.metric)": [[320, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.experimental.metric.metric.mae attribute)": [[320, "neural_compressor.experimental.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.experimental.metric.metric.mse attribute)": [[320, "neural_compressor.experimental.metric.metric.MSE.compare_label"]], "k (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[320, "neural_compressor.experimental.metric.metric.GeneralTopK.k"]], "k (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[320, "neural_compressor.experimental.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[320, "neural_compressor.experimental.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mae attribute)": [[320, "neural_compressor.experimental.metric.metric.MAE.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mse attribute)": [[320, "neural_compressor.experimental.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.experimental.metric.metric)": [[320, "neural_compressor.experimental.metric.metric.mIOU"]], "metric_registry() (in module neural_compressor.experimental.metric.metric)": [[320, "neural_compressor.experimental.metric.metric.metric_registry"]], "metrics (neural_compressor.experimental.metric.metric.metrics attribute)": [[320, "neural_compressor.experimental.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.experimental.metric.metric.mxnetmetrics attribute)": [[320, "neural_compressor.experimental.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtitmetrics attribute)": [[320, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtqlmetrics attribute)": [[320, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.pytorchmetrics attribute)": [[320, "neural_compressor.experimental.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.tensorflowmetrics attribute)": [[320, "neural_compressor.experimental.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.experimental.metric.metric.rmse attribute)": [[320, "neural_compressor.experimental.metric.metric.RMSE.mse"]], "neural_compressor.experimental.metric.metric": [[320, "module-neural_compressor.experimental.metric.metric"]], "num_correct (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[320, "neural_compressor.experimental.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[320, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[320, "neural_compressor.experimental.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[320, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[320, "neural_compressor.experimental.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mae attribute)": [[320, "neural_compressor.experimental.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mse attribute)": [[320, "neural_compressor.experimental.metric.metric.MSE.pred_list"]], "sample (neural_compressor.experimental.metric.metric.accuracy attribute)": [[320, "neural_compressor.experimental.metric.metric.Accuracy.sample"]], "sample (neural_compressor.experimental.metric.metric.loss attribute)": [[320, "neural_compressor.experimental.metric.metric.Loss.sample"]], "sum (neural_compressor.experimental.metric.metric.loss attribute)": [[320, "neural_compressor.experimental.metric.metric.Loss.sum"]], "mixedprecision (class in neural_compressor.experimental.mixed_precision)": [[321, "neural_compressor.experimental.mixed_precision.MixedPrecision"]], "neural_compressor.experimental.mixed_precision": [[321, "module-neural_compressor.experimental.mixed_precision"]], "modelconversion (class in neural_compressor.experimental.model_conversion)": [[322, "neural_compressor.experimental.model_conversion.ModelConversion"]], "neural_compressor.experimental.model_conversion": [[322, "module-neural_compressor.experimental.model_conversion"]], "basicnas (class in neural_compressor.experimental.nas.basic_nas)": [[323, "neural_compressor.experimental.nas.basic_nas.BasicNAS"]], "neural_compressor.experimental.nas.basic_nas": [[323, "module-neural_compressor.experimental.nas.basic_nas"]], "dynas (class in neural_compressor.experimental.nas.dynas)": [[324, "neural_compressor.experimental.nas.dynas.DyNAS"]], "neural_compressor.experimental.nas.dynas": [[324, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas": [[325, "module-neural_compressor.experimental.nas"]], "nas (class in neural_compressor.experimental.nas.nas)": [[326, "neural_compressor.experimental.nas.nas.NAS"]], "nasbase (class in neural_compressor.experimental.nas.nas)": [[326, "neural_compressor.experimental.nas.nas.NASBase"]], "neural_compressor.experimental.nas.nas": [[326, "module-neural_compressor.experimental.nas.nas"]], "create_search_space_pool() (in module neural_compressor.experimental.nas.nas_utils)": [[327, "neural_compressor.experimental.nas.nas_utils.create_search_space_pool"]], "find_pareto_front() (in module neural_compressor.experimental.nas.nas_utils)": [[327, "neural_compressor.experimental.nas.nas_utils.find_pareto_front"]], "nas_registry() (in module neural_compressor.experimental.nas.nas_utils)": [[327, "neural_compressor.experimental.nas.nas_utils.nas_registry"]], "neural_compressor.experimental.nas.nas_utils": [[327, "module-neural_compressor.experimental.nas.nas_utils"]], "bayesianoptimizationsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[328, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher"]], "gridsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[328, "neural_compressor.experimental.nas.search_algorithms.GridSearcher"]], "randomsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[328, "neural_compressor.experimental.nas.search_algorithms.RandomSearcher"]], "searcher (class in neural_compressor.experimental.nas.search_algorithms)": [[328, "neural_compressor.experimental.nas.search_algorithms.Searcher"]], "neural_compressor.experimental.nas.search_algorithms": [[328, "module-neural_compressor.experimental.nas.search_algorithms"]], "gradientsensitivitypruner (class in neural_compressor.experimental.pruner_legacy.gradient_sensitivity)": [[329, "neural_compressor.experimental.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[329, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"]], "grouplassopruner (class in neural_compressor.experimental.pruner_legacy.group_lasso)": [[330, "neural_compressor.experimental.pruner_legacy.group_lasso.GroupLassoPruner"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[330, "module-neural_compressor.experimental.pruner_legacy.group_lasso"]], "neural_compressor.experimental.pruner_legacy": [[331, "module-neural_compressor.experimental.pruner_legacy"]], "basicmagnitudepruner (class in neural_compressor.experimental.pruner_legacy.magnitude)": [[332, "neural_compressor.experimental.pruner_legacy.magnitude.BasicMagnitudePruner"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[332, "module-neural_compressor.experimental.pruner_legacy.magnitude"]], "patternlockpruner (class in neural_compressor.experimental.pruner_legacy.pattern_lock)": [[333, "neural_compressor.experimental.pruner_legacy.pattern_lock.PatternLockPruner"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[333, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"]], "pruner (class in neural_compressor.experimental.pruner_legacy.pruner)": [[334, "neural_compressor.experimental.pruner_legacy.pruner.Pruner"]], "neural_compressor.experimental.pruner_legacy.pruner": [[334, "module-neural_compressor.experimental.pruner_legacy.pruner"]], "pruner_registry() (in module neural_compressor.experimental.pruner_legacy.pruner)": [[334, "neural_compressor.experimental.pruner_legacy.pruner.pruner_registry"]], "pruning (class in neural_compressor.experimental.pruning)": [[335, "neural_compressor.experimental.pruning.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning)": [[335, "neural_compressor.experimental.pruning.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning.pruning attribute)": [[335, "neural_compressor.experimental.pruning.Pruning.conf"]], "neural_compressor.experimental.pruning": [[335, "module-neural_compressor.experimental.pruning"]], "pruners (neural_compressor.experimental.pruning.pruning attribute)": [[335, "neural_compressor.experimental.pruning.Pruning.pruners"]], "neural_compressor.experimental.pruning_recipes": [[336, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[337, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "patterns (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[338, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS"]], "patternbase (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[338, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[338, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "pattern_registry() (in module neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[338, "neural_compressor.experimental.pruning_recipes.patterns.pattern.pattern_registry"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns.pattern.patterns attribute)": [[338, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS.patterns"]], "tilepatternbase (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[339, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase"]], "tilepattern_1x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[339, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x1"]], "tilepattern_1x16 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[339, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x16"]], "tilepattern_1x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[339, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x2"]], "tilepattern_2x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[339, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_2x2"]], "tilepattern_4x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[339, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_4x1"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[339, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "pruning (class in neural_compressor.experimental.pruning_v2)": [[340, "neural_compressor.experimental.pruning_v2.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning_v2)": [[340, "neural_compressor.experimental.pruning_v2.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning_v2.pruning attribute)": [[340, "neural_compressor.experimental.pruning_v2.Pruning.conf"]], "neural_compressor.experimental.pruning_v2": [[340, "module-neural_compressor.experimental.pruning_v2"]], "pruners (neural_compressor.experimental.pruning_v2.pruning attribute)": [[340, "neural_compressor.experimental.pruning_v2.Pruning.pruners"]], "neural_compressor.experimental.pytorch_pruner": [[341, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[342, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "m (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[343, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.M"]], "n (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[343, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.N"]], "pattern (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[343, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern"]], "patternninm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[343, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM"]], "patternnxm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[343, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM"]], "block_size (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm attribute)": [[343, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.block_size"]], "get_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[343, "neural_compressor.experimental.pytorch_pruner.patterns.get_pattern"]], "is_global (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[343, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.is_global"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[343, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "pattern (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[343, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.pattern"]], "register_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[343, "neural_compressor.experimental.pytorch_pruner.patterns.register_pattern"]], "check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[344, "neural_compressor.experimental.pytorch_pruner.prune_utils.check_config"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[344, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "parse_not_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[344, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_not_to_prune"]], "parse_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[344, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_to_prune"]], "process_and_check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[344, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_and_check_config"]], "process_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[344, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_config"]], "reset_non_value_to_default() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[344, "neural_compressor.experimental.pytorch_pruner.prune_utils.reset_non_value_to_default"]], "magnitudepruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[345, "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner"]], "patternlockpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[345, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner"]], "pruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[345, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner"]], "snipmomentumpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[345, "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner"]], "snippruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[345, "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner"]], "config (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[345, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.config"]], "current_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[345, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.current_sparsity_ratio"]], "end_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[345, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.end_step"]], "get_pruner() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[345, "neural_compressor.experimental.pytorch_pruner.pruner.get_pruner"]], "global_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[345, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.global_step"]], "masks (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[345, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.masks"]], "max_sparsity_ratio_per_layer (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[345, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.max_sparsity_ratio_per_layer"]], "modules (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[345, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.modules"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[345, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "pattern (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[345, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.pattern"]], "register_pruners() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[345, "neural_compressor.experimental.pytorch_pruner.pruner.register_pruners"]], "scheduler (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[345, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scheduler"]], "scores (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[345, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scores"]], "start_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[345, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.start_step"]], "target_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[345, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.target_sparsity_ratio"]], "update_frequency_on_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[345, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.update_frequency_on_step"]], "pruning (class in neural_compressor.experimental.pytorch_pruner.pruning)": [[346, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning"]], "config_file_path (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[346, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.config_file_path"]], "model (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[346, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.model"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[346, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "pruner_info (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[346, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruner_info"]], "pruners (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[346, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruners"]], "iterativescheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[347, "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[347, "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler"]], "scheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[347, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler"]], "config (neural_compressor.experimental.pytorch_pruner.scheduler.scheduler attribute)": [[347, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler.config"]], "get_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[347, "neural_compressor.experimental.pytorch_pruner.scheduler.get_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[347, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "register_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[347, "neural_compressor.experimental.pytorch_pruner.scheduler.register_scheduler"]], "quantization (class in neural_compressor.experimental.quantization)": [[348, "neural_compressor.experimental.quantization.Quantization"]], "neural_compressor.experimental.quantization": [[348, "module-neural_compressor.experimental.quantization"]], "scheduler (class in neural_compressor.experimental.scheduler)": [[349, "neural_compressor.experimental.scheduler.Scheduler"]], "neural_compressor.experimental.scheduler": [[349, "module-neural_compressor.experimental.scheduler"]], "automixedprecisiontunestrategy (class in neural_compressor.experimental.strategy.auto_mixed_precision)": [[350, "neural_compressor.experimental.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[350, "module-neural_compressor.experimental.strategy.auto_mixed_precision"]], "basictunestrategy (class in neural_compressor.experimental.strategy.basic)": [[351, "neural_compressor.experimental.strategy.basic.BasicTuneStrategy"]], "neural_compressor.experimental.strategy.basic": [[351, "module-neural_compressor.experimental.strategy.basic"]], "bayesianoptimization (class in neural_compressor.experimental.strategy.bayesian)": [[352, "neural_compressor.experimental.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.experimental.strategy.bayesian)": [[352, "neural_compressor.experimental.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.experimental.strategy.bayesian)": [[352, "neural_compressor.experimental.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.experimental.strategy.bayesian)": [[352, "neural_compressor.experimental.strategy.bayesian.acq_max"]], "neural_compressor.experimental.strategy.bayesian": [[352, "module-neural_compressor.experimental.strategy.bayesian"]], "exhaustivetunestrategy (class in neural_compressor.experimental.strategy.exhaustive)": [[353, "neural_compressor.experimental.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.experimental.strategy.exhaustive": [[353, "module-neural_compressor.experimental.strategy.exhaustive"]], "neural_compressor.experimental.strategy": [[354, "module-neural_compressor.experimental.strategy"]], "msetunestrategy (class in neural_compressor.experimental.strategy.mse)": [[355, "neural_compressor.experimental.strategy.mse.MSETuneStrategy"]], "neural_compressor.experimental.strategy.mse": [[355, "module-neural_compressor.experimental.strategy.mse"]], "mse_v2tunestrategy (class in neural_compressor.experimental.strategy.mse_v2)": [[356, "neural_compressor.experimental.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.experimental.strategy.mse_v2": [[356, "module-neural_compressor.experimental.strategy.mse_v2"]], "randomtunestrategy (class in neural_compressor.experimental.strategy.random)": [[357, "neural_compressor.experimental.strategy.random.RandomTuneStrategy"]], "neural_compressor.experimental.strategy.random": [[357, "module-neural_compressor.experimental.strategy.random"]], "tunestrategy (class in neural_compressor.experimental.strategy.strategy)": [[358, "neural_compressor.experimental.strategy.strategy.TuneStrategy"]], "neural_compressor.experimental.strategy.strategy": [[358, "module-neural_compressor.experimental.strategy.strategy"]], "strategy_registry() (in module neural_compressor.experimental.strategy.strategy)": [[358, "neural_compressor.experimental.strategy.strategy.strategy_registry"]], "neural_compressor.experimental.strategy.utils.constant": [[359, "module-neural_compressor.experimental.strategy.utils.constant"]], "neural_compressor.experimental.strategy.utils": [[360, "module-neural_compressor.experimental.strategy.utils"]], "fallbacktuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[361, "neural_compressor.experimental.strategy.utils.tuning_sampler.FallbackTuningSampler"]], "modelwisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[361, "neural_compressor.experimental.strategy.utils.tuning_sampler.ModelWiseTuningSampler"]], "optypewisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[361, "neural_compressor.experimental.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler"]], "opwisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[361, "neural_compressor.experimental.strategy.utils.tuning_sampler.OpWiseTuningSampler"]], "smoothquantsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[361, "neural_compressor.experimental.strategy.utils.tuning_sampler.SmoothQuantSampler"]], "tuningorder (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[361, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningOrder"]], "tuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[361, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningSampler"]], "tuningsamplerregistry (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[361, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningSamplerRegistry"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[361, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"]], "tuningitem (class in neural_compressor.experimental.strategy.utils.tuning_space)": [[362, "neural_compressor.experimental.strategy.utils.tuning_space.TuningItem"]], "tuningspace (class in neural_compressor.experimental.strategy.utils.tuning_space)": [[362, "neural_compressor.experimental.strategy.utils.tuning_space.TuningSpace"]], "initial_tuning_cfg_with_quant_mode() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[362, "neural_compressor.experimental.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[362, "module-neural_compressor.experimental.strategy.utils.tuning_space"]], "pattern_to_internal() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[362, "neural_compressor.experimental.strategy.utils.tuning_space.pattern_to_internal"]], "pattern_to_path() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[362, "neural_compressor.experimental.strategy.utils.tuning_space.pattern_to_path"]], "quant_mode_from_pattern() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[362, "neural_compressor.experimental.strategy.utils.tuning_space.quant_mode_from_pattern"]], "optuningconfig (class in neural_compressor.experimental.strategy.utils.tuning_structs)": [[363, "neural_compressor.experimental.strategy.utils.tuning_structs.OpTuningConfig"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[363, "module-neural_compressor.experimental.strategy.utils.tuning_structs"]], "ordereddefaultdict (class in neural_compressor.experimental.strategy.utils.utility)": [[364, "neural_compressor.experimental.strategy.utils.utility.OrderedDefaultDict"]], "extract_data_type() (in module neural_compressor.experimental.strategy.utils.utility)": [[364, "neural_compressor.experimental.strategy.utils.utility.extract_data_type"]], "get_adaptor_name() (in module neural_compressor.experimental.strategy.utils.utility)": [[364, "neural_compressor.experimental.strategy.utils.utility.get_adaptor_name"]], "neural_compressor.experimental.strategy.utils.utility": [[364, "module-neural_compressor.experimental.strategy.utils.utility"]], "reverted_data_type() (in module neural_compressor.experimental.strategy.utils.utility)": [[364, "neural_compressor.experimental.strategy.utils.utility.reverted_data_type"]], "neural_compressor": [[365, "module-neural_compressor"]], "bleu (class in neural_compressor.metric.bleu)": [[366, "neural_compressor.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.metric.bleu)": [[366, "neural_compressor.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.metric.bleu)": [[366, "neural_compressor.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.metric.bleu.bleu attribute)": [[366, "neural_compressor.metric.bleu.BLEU.labels"]], "neural_compressor.metric.bleu": [[366, "module-neural_compressor.metric.bleu"]], "nondigit_punct_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[366, "neural_compressor.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.metric.bleu.bleu attribute)": [[366, "neural_compressor.metric.bleu.BLEU.predictions"]], "punct_nondigit_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[366, "neural_compressor.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[366, "neural_compressor.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.metric.bleu_util)": [[367, "neural_compressor.metric.bleu_util.compute_bleu"]], "neural_compressor.metric.bleu_util": [[367, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[368, "module-neural_compressor.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.metric.coco_tools)": [[369, "neural_compressor.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.metric.coco_tools)": [[369, "neural_compressor.metric.coco_tools.COCOWrapper"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.metric.coco_tools)": [[369, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.metric.coco_tools)": [[369, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.metric.coco_tools)": [[369, "neural_compressor.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "dataset (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[369, "neural_compressor.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[369, "neural_compressor.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.metric.coco_tools": [[369, "module-neural_compressor.metric.coco_tools"]], "evaluate() (in module neural_compressor.metric.evaluate_squad)": [[370, "neural_compressor.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.metric.evaluate_squad)": [[370, "neural_compressor.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.metric.evaluate_squad)": [[370, "neural_compressor.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.evaluate_squad)": [[370, "neural_compressor.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.metric.evaluate_squad": [[370, "module-neural_compressor.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.metric.f1)": [[371, "neural_compressor.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.metric.f1)": [[371, "neural_compressor.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.f1)": [[371, "neural_compressor.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[371, "module-neural_compressor.metric.f1"]], "normalize_answer() (in module neural_compressor.metric.f1)": [[371, "neural_compressor.metric.f1.normalize_answer"]], "neural_compressor.metric": [[372, "module-neural_compressor.metric"]], "accuracy (class in neural_compressor.metric.metric)": [[373, "neural_compressor.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.metric.metric)": [[373, "neural_compressor.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.metric.metric)": [[373, "neural_compressor.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.metric.metric)": [[373, "neural_compressor.metric.metric.F1"]], "generaltopk (class in neural_compressor.metric.metric)": [[373, "neural_compressor.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.metric.metric)": [[373, "neural_compressor.metric.metric.Loss"]], "mae (class in neural_compressor.metric.metric)": [[373, "neural_compressor.metric.metric.MAE"]], "metrics (class in neural_compressor.metric.metric)": [[373, "neural_compressor.metric.metric.METRICS"]], "mse (class in neural_compressor.metric.metric)": [[373, "neural_compressor.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.metric.metric)": [[373, "neural_compressor.metric.metric.MXNetMetrics"]], "metric (class in neural_compressor.metric.metric)": [[373, "neural_compressor.metric.metric.Metric"]], "onnxrtglue (class in neural_compressor.metric.metric)": [[373, "neural_compressor.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.metric.metric)": [[373, "neural_compressor.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.metric.metric)": [[373, "neural_compressor.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.metric.metric)": [[373, "neural_compressor.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.metric.metric)": [[373, "neural_compressor.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.metric.metric)": [[373, "neural_compressor.metric.metric.RMSE"]], "roc (class in neural_compressor.metric.metric)": [[373, "neural_compressor.metric.metric.ROC"]], "squadf1 (class in neural_compressor.metric.metric)": [[373, "neural_compressor.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.metric.metric)": [[373, "neural_compressor.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.metric.metric)": [[373, "neural_compressor.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.metric.metric)": [[373, "neural_compressor.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.metric.metric)": [[373, "neural_compressor.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.metric.metric)": [[373, "neural_compressor.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.metric.metric)": [[373, "neural_compressor.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.metric.metric)": [[373, "neural_compressor.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.metric.metric)": [[373, "neural_compressor.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.metric.metric.mae attribute)": [[373, "neural_compressor.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.metric.metric.mse attribute)": [[373, "neural_compressor.metric.metric.MSE.compare_label"]], "k (neural_compressor.metric.metric.generaltopk attribute)": [[373, "neural_compressor.metric.metric.GeneralTopK.k"]], "k (neural_compressor.metric.metric.tensorflowtopk attribute)": [[373, "neural_compressor.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.metric.metric.accuracy attribute)": [[373, "neural_compressor.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.metric.metric.mae attribute)": [[373, "neural_compressor.metric.metric.MAE.label_list"]], "label_list (neural_compressor.metric.metric.mse attribute)": [[373, "neural_compressor.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.metric.metric)": [[373, "neural_compressor.metric.metric.mIOU"]], "metric_registry() (in module neural_compressor.metric.metric)": [[373, "neural_compressor.metric.metric.metric_registry"]], "metrics (neural_compressor.metric.metric.metrics attribute)": [[373, "neural_compressor.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.metric.metric.mxnetmetrics attribute)": [[373, "neural_compressor.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtitmetrics attribute)": [[373, "neural_compressor.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtqlmetrics attribute)": [[373, "neural_compressor.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.metric.metric.pytorchmetrics attribute)": [[373, "neural_compressor.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.metric.metric.tensorflowmetrics attribute)": [[373, "neural_compressor.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.metric.metric.rmse attribute)": [[373, "neural_compressor.metric.metric.RMSE.mse"]], "neural_compressor.metric.metric": [[373, "module-neural_compressor.metric.metric"]], "num_correct (neural_compressor.metric.metric.generaltopk attribute)": [[373, "neural_compressor.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.metric.metric.tensorflowtopk attribute)": [[373, "neural_compressor.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.metric.metric.generaltopk attribute)": [[373, "neural_compressor.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.metric.metric.tensorflowtopk attribute)": [[373, "neural_compressor.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.metric.metric.accuracy attribute)": [[373, "neural_compressor.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.metric.metric.mae attribute)": [[373, "neural_compressor.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.metric.metric.mse attribute)": [[373, "neural_compressor.metric.metric.MSE.pred_list"]], "register_customer_metric() (in module neural_compressor.metric.metric)": [[373, "neural_compressor.metric.metric.register_customer_metric"]], "sample (neural_compressor.metric.metric.accuracy attribute)": [[373, "neural_compressor.metric.metric.Accuracy.sample"]], "sample (neural_compressor.metric.metric.loss attribute)": [[373, "neural_compressor.metric.metric.Loss.sample"]], "sum (neural_compressor.metric.metric.loss attribute)": [[373, "neural_compressor.metric.metric.Loss.sum"]], "fit() (in module neural_compressor.mix_precision)": [[374, "neural_compressor.mix_precision.fit"]], "neural_compressor.mix_precision": [[374, "module-neural_compressor.mix_precision"]], "basemodel (class in neural_compressor.model.base_model)": [[375, "neural_compressor.model.base_model.BaseModel"]], "neural_compressor.model.base_model": [[375, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[376, "module-neural_compressor.model"]], "kerasmodel (class in neural_compressor.model.keras_model)": [[377, "neural_compressor.model.keras_model.KerasModel"]], "neural_compressor.model.keras_model": [[377, "module-neural_compressor.model.keras_model"]], "model (class in neural_compressor.model.model)": [[378, "neural_compressor.model.model.Model"]], "get_model_fwk_name() (in module neural_compressor.model.model)": [[378, "neural_compressor.model.model.get_model_fwk_name"]], "neural_compressor.model.model": [[378, "module-neural_compressor.model.model"]], "mxnetmodel (class in neural_compressor.model.mxnet_model)": [[379, "neural_compressor.model.mxnet_model.MXNetModel"]], "neural_compressor.model.mxnet_model": [[379, "module-neural_compressor.model.mxnet_model"]], "tfslimnetsfactory (class in neural_compressor.model.nets_factory)": [[380, "neural_compressor.model.nets_factory.TFSlimNetsFactory"]], "neural_compressor.model.nets_factory": [[380, "module-neural_compressor.model.nets_factory"]], "onnxmodel (class in neural_compressor.model.onnx_model)": [[381, "neural_compressor.model.onnx_model.ONNXModel"]], "neural_compressor.model.onnx_model": [[381, "module-neural_compressor.model.onnx_model"]], "tensorflowbasemodel (class in neural_compressor.model.tensorflow_model)": [[382, "neural_compressor.model.tensorflow_model.TensorflowBaseModel"]], "tensorflowcheckpointmodel (class in neural_compressor.model.tensorflow_model)": [[382, "neural_compressor.model.tensorflow_model.TensorflowCheckpointModel"]], "tensorflowllmmodel (class in neural_compressor.model.tensorflow_model)": [[382, "neural_compressor.model.tensorflow_model.TensorflowLLMModel"]], "tensorflowmodel (class in neural_compressor.model.tensorflow_model)": [[382, "neural_compressor.model.tensorflow_model.TensorflowModel"]], "tensorflowqatmodel (class in neural_compressor.model.tensorflow_model)": [[382, "neural_compressor.model.tensorflow_model.TensorflowQATModel"]], "tensorflowsavedmodelmodel (class in neural_compressor.model.tensorflow_model)": [[382, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel"]], "checkpoint_session() (in module neural_compressor.model.tensorflow_model)": [[382, "neural_compressor.model.tensorflow_model.checkpoint_session"]], "estimator_session() (in module neural_compressor.model.tensorflow_model)": [[382, "neural_compressor.model.tensorflow_model.estimator_session"]], "frozen_pb_session() (in module neural_compressor.model.tensorflow_model)": [[382, "neural_compressor.model.tensorflow_model.frozen_pb_session"]], "get_model_type() (in module neural_compressor.model.tensorflow_model)": [[382, "neural_compressor.model.tensorflow_model.get_model_type"]], "graph_def_session() (in module neural_compressor.model.tensorflow_model)": [[382, "neural_compressor.model.tensorflow_model.graph_def_session"]], "graph_session() (in module neural_compressor.model.tensorflow_model)": [[382, "neural_compressor.model.tensorflow_model.graph_session"]], "keras_session() (in module neural_compressor.model.tensorflow_model)": [[382, "neural_compressor.model.tensorflow_model.keras_session"]], "load_saved_model() (in module neural_compressor.model.tensorflow_model)": [[382, "neural_compressor.model.tensorflow_model.load_saved_model"]], "neural_compressor.model.tensorflow_model": [[382, "module-neural_compressor.model.tensorflow_model"]], "saved_model_session() (in module neural_compressor.model.tensorflow_model)": [[382, "neural_compressor.model.tensorflow_model.saved_model_session"]], "slim_session() (in module neural_compressor.model.tensorflow_model)": [[382, "neural_compressor.model.tensorflow_model.slim_session"]], "try_loading_keras() (in module neural_compressor.model.tensorflow_model)": [[382, "neural_compressor.model.tensorflow_model.try_loading_keras"]], "validate_and_inference_input_output() (in module neural_compressor.model.tensorflow_model)": [[382, "neural_compressor.model.tensorflow_model.validate_and_inference_input_output"]], "validate_graph_node() (in module neural_compressor.model.tensorflow_model)": [[382, "neural_compressor.model.tensorflow_model.validate_graph_node"]], "ipexmodel (class in neural_compressor.model.torch_model)": [[383, "neural_compressor.model.torch_model.IPEXModel"]], "pytorchbasemodel (class in neural_compressor.model.torch_model)": [[383, "neural_compressor.model.torch_model.PyTorchBaseModel"]], "pytorchfxmodel (class in neural_compressor.model.torch_model)": [[383, "neural_compressor.model.torch_model.PyTorchFXModel"]], "pytorchmodel (class in neural_compressor.model.torch_model)": [[383, "neural_compressor.model.torch_model.PyTorchModel"]], "neural_compressor.model.torch_model": [[383, "module-neural_compressor.model.torch_model"]], "accuracy (class in neural_compressor.objective)": [[384, "neural_compressor.objective.Accuracy"]], "footprint (class in neural_compressor.objective)": [[384, "neural_compressor.objective.Footprint"]], "modelsize (class in neural_compressor.objective)": [[384, "neural_compressor.objective.ModelSize"]], "multiobjective (class in neural_compressor.objective)": [[384, "neural_compressor.objective.MultiObjective"]], "objective (class in neural_compressor.objective)": [[384, "neural_compressor.objective.Objective"]], "performance (class in neural_compressor.objective)": [[384, "neural_compressor.objective.Performance"]], "neural_compressor.objective": [[384, "module-neural_compressor.objective"]], "objective_custom_registry() (in module neural_compressor.objective)": [[384, "neural_compressor.objective.objective_custom_registry"]], "objective_registry() (in module neural_compressor.objective)": [[384, "neural_compressor.objective.objective_registry"]], "neural_compressor.onnxrt.algorithms": [[385, "module-neural_compressor.onnxrt.algorithms"]], "layer_wise_quant() (in module neural_compressor.onnxrt.algorithms.layer_wise.core)": [[386, "neural_compressor.onnxrt.algorithms.layer_wise.core.layer_wise_quant"]], "neural_compressor.onnxrt.algorithms.layer_wise.core": [[386, "module-neural_compressor.onnxrt.algorithms.layer_wise.core"]], "neural_compressor.onnxrt.algorithms.layer_wise": [[387, "module-neural_compressor.onnxrt.algorithms.layer_wise"]], "calibrator (class in neural_compressor.onnxrt.algorithms.smoother.calibrator)": [[388, "neural_compressor.onnxrt.algorithms.smoother.calibrator.Calibrator"]], "neural_compressor.onnxrt.algorithms.smoother.calibrator": [[388, "module-neural_compressor.onnxrt.algorithms.smoother.calibrator"]], "smoother (class in neural_compressor.onnxrt.algorithms.smoother.core)": [[389, "neural_compressor.onnxrt.algorithms.smoother.core.Smoother"]], "neural_compressor.onnxrt.algorithms.smoother.core": [[389, "module-neural_compressor.onnxrt.algorithms.smoother.core"]], "neural_compressor.onnxrt.algorithms.smoother": [[390, "module-neural_compressor.onnxrt.algorithms.smoother"]], "apply_awq_on_model() (in module neural_compressor.onnxrt.algorithms.weight_only.awq)": [[391, "neural_compressor.onnxrt.algorithms.weight_only.awq.apply_awq_on_model"]], "awq_quantize() (in module neural_compressor.onnxrt.algorithms.weight_only.awq)": [[391, "neural_compressor.onnxrt.algorithms.weight_only.awq.awq_quantize"]], "neural_compressor.onnxrt.algorithms.weight_only.awq": [[391, "module-neural_compressor.onnxrt.algorithms.weight_only.awq"]], "apply_gptq_on_model() (in module neural_compressor.onnxrt.algorithms.weight_only.gptq)": [[392, "neural_compressor.onnxrt.algorithms.weight_only.gptq.apply_gptq_on_model"]], "gptq_quantize() (in module neural_compressor.onnxrt.algorithms.weight_only.gptq)": [[392, "neural_compressor.onnxrt.algorithms.weight_only.gptq.gptq_quantize"]], "neural_compressor.onnxrt.algorithms.weight_only.gptq": [[392, "module-neural_compressor.onnxrt.algorithms.weight_only.gptq"]], "neural_compressor.onnxrt.algorithms.weight_only": [[393, "module-neural_compressor.onnxrt.algorithms.weight_only"]], "apply_rtn_on_model() (in module neural_compressor.onnxrt.algorithms.weight_only.rtn)": [[394, "neural_compressor.onnxrt.algorithms.weight_only.rtn.apply_rtn_on_model"]], "neural_compressor.onnxrt.algorithms.weight_only.rtn": [[394, "module-neural_compressor.onnxrt.algorithms.weight_only.rtn"]], "rtn_quantize() (in module neural_compressor.onnxrt.algorithms.weight_only.rtn)": [[394, "neural_compressor.onnxrt.algorithms.weight_only.rtn.rtn_quantize"]], "make_matmul_weight_only_node() (in module neural_compressor.onnxrt.algorithms.weight_only.utility)": [[395, "neural_compressor.onnxrt.algorithms.weight_only.utility.make_matmul_weight_only_node"]], "neural_compressor.onnxrt.algorithms.weight_only.utility": [[395, "module-neural_compressor.onnxrt.algorithms.weight_only.utility"]], "pad_tensor() (in module neural_compressor.onnxrt.algorithms.weight_only.utility)": [[395, "neural_compressor.onnxrt.algorithms.weight_only.utility.pad_tensor"]], "prepare_inputs() (in module neural_compressor.onnxrt.algorithms.weight_only.utility)": [[395, "neural_compressor.onnxrt.algorithms.weight_only.utility.prepare_inputs"]], "qdq_tensor() (in module neural_compressor.onnxrt.algorithms.weight_only.utility)": [[395, "neural_compressor.onnxrt.algorithms.weight_only.utility.qdq_tensor"]], "quant_tensor() (in module neural_compressor.onnxrt.algorithms.weight_only.utility)": [[395, "neural_compressor.onnxrt.algorithms.weight_only.utility.quant_tensor"]], "neural_compressor.onnxrt": [[396, "module-neural_compressor.onnxrt"]], "awq_quantize_entry() (in module neural_compressor.onnxrt.quantization.algorithm_entry)": [[397, "neural_compressor.onnxrt.quantization.algorithm_entry.awq_quantize_entry"]], "gptq_quantize_entry() (in module neural_compressor.onnxrt.quantization.algorithm_entry)": [[397, "neural_compressor.onnxrt.quantization.algorithm_entry.gptq_quantize_entry"]], "neural_compressor.onnxrt.quantization.algorithm_entry": [[397, "module-neural_compressor.onnxrt.quantization.algorithm_entry"]], "rtn_quantize_entry() (in module neural_compressor.onnxrt.quantization.algorithm_entry)": [[397, "neural_compressor.onnxrt.quantization.algorithm_entry.rtn_quantize_entry"]], "smooth_quant_entry() (in module neural_compressor.onnxrt.quantization.algorithm_entry)": [[397, "neural_compressor.onnxrt.quantization.algorithm_entry.smooth_quant_entry"]], "autotune() (in module neural_compressor.onnxrt.quantization.autotune)": [[398, "neural_compressor.onnxrt.quantization.autotune.autotune"]], "neural_compressor.onnxrt.quantization.autotune": [[398, "module-neural_compressor.onnxrt.quantization.autotune"]], "calibrationdatareader (class in neural_compressor.onnxrt.quantization.calibrate)": [[399, "neural_compressor.onnxrt.quantization.calibrate.CalibrationDataReader"]], "neural_compressor.onnxrt.quantization.calibrate": [[399, "module-neural_compressor.onnxrt.quantization.calibrate"]], "awqconfig (class in neural_compressor.onnxrt.quantization.config)": [[400, "neural_compressor.onnxrt.quantization.config.AWQConfig"]], "gptqconfig (class in neural_compressor.onnxrt.quantization.config)": [[400, "neural_compressor.onnxrt.quantization.config.GPTQConfig"]], "rtnconfig (class in neural_compressor.onnxrt.quantization.config)": [[400, "neural_compressor.onnxrt.quantization.config.RTNConfig"]], "smoohquantconfig (class in neural_compressor.onnxrt.quantization.config)": [[400, "neural_compressor.onnxrt.quantization.config.SmoohQuantConfig"]], "get_default_awq_config() (in module neural_compressor.onnxrt.quantization.config)": [[400, "neural_compressor.onnxrt.quantization.config.get_default_awq_config"]], "get_default_gptq_config() (in module neural_compressor.onnxrt.quantization.config)": [[400, "neural_compressor.onnxrt.quantization.config.get_default_gptq_config"]], "get_default_rtn_config() (in module neural_compressor.onnxrt.quantization.config)": [[400, "neural_compressor.onnxrt.quantization.config.get_default_rtn_config"]], "get_default_sq_config() (in module neural_compressor.onnxrt.quantization.config)": [[400, "neural_compressor.onnxrt.quantization.config.get_default_sq_config"]], "neural_compressor.onnxrt.quantization.config": [[400, "module-neural_compressor.onnxrt.quantization.config"]], "neural_compressor.onnxrt.quantization": [[401, "module-neural_compressor.onnxrt.quantization"]], "neural_compressor.onnxrt.quantization.quantize": [[402, "module-neural_compressor.onnxrt.quantization.quantize"]], "neural_compressor.onnxrt.utils": [[403, "module-neural_compressor.onnxrt.utils"]], "onnxmodel (class in neural_compressor.onnxrt.utils.onnx_model)": [[404, "neural_compressor.onnxrt.utils.onnx_model.ONNXModel"]], "neural_compressor.onnxrt.utils.onnx_model": [[404, "module-neural_compressor.onnxrt.utils.onnx_model"]], "check_model_with_infer_shapes() (in module neural_compressor.onnxrt.utils.utility)": [[405, "neural_compressor.onnxrt.utils.utility.check_model_with_infer_shapes"]], "find_by_name() (in module neural_compressor.onnxrt.utils.utility)": [[405, "neural_compressor.onnxrt.utils.utility.find_by_name"]], "get_qrange_for_qtype() (in module neural_compressor.onnxrt.utils.utility)": [[405, "neural_compressor.onnxrt.utils.utility.get_qrange_for_qType"]], "is_b_transposed() (in module neural_compressor.onnxrt.utils.utility)": [[405, "neural_compressor.onnxrt.utils.utility.is_B_transposed"]], "neural_compressor.onnxrt.utils.utility": [[405, "module-neural_compressor.onnxrt.utils.utility"]], "quantize_data() (in module neural_compressor.onnxrt.utils.utility)": [[405, "neural_compressor.onnxrt.utils.utility.quantize_data"]], "register_algo() (in module neural_compressor.onnxrt.utils.utility)": [[405, "neural_compressor.onnxrt.utils.utility.register_algo"]], "simple_progress_bar() (in module neural_compressor.onnxrt.utils.utility)": [[405, "neural_compressor.onnxrt.utils.utility.simple_progress_bar"]], "neural_compressor.profiling": [[406, "module-neural_compressor.profiling"]], "parserfactory (class in neural_compressor.profiling.parser.factory)": [[407, "neural_compressor.profiling.parser.factory.ParserFactory"]], "neural_compressor.profiling.parser.factory": [[407, "module-neural_compressor.profiling.parser.factory"]], "neural_compressor.profiling.parser": [[408, "module-neural_compressor.profiling.parser"]], "onnxrtparserfactory (class in neural_compressor.profiling.parser.onnx_parser.factory)": [[409, "neural_compressor.profiling.parser.onnx_parser.factory.OnnxrtParserFactory"]], "neural_compressor.profiling.parser.onnx_parser.factory": [[409, "module-neural_compressor.profiling.parser.onnx_parser.factory"]], "neural_compressor.profiling.parser.onnx_parser": [[410, "module-neural_compressor.profiling.parser.onnx_parser"]], "onnxprofilingparser (class in neural_compressor.profiling.parser.onnx_parser.parser)": [[411, "neural_compressor.profiling.parser.onnx_parser.parser.OnnxProfilingParser"]], "neural_compressor.profiling.parser.onnx_parser.parser": [[411, "module-neural_compressor.profiling.parser.onnx_parser.parser"]], "profilingparser (class in neural_compressor.profiling.parser.parser)": [[412, "neural_compressor.profiling.parser.parser.ProfilingParser"]], "neural_compressor.profiling.parser.parser": [[412, "module-neural_compressor.profiling.parser.parser"]], "profilingresult (class in neural_compressor.profiling.parser.result)": [[413, "neural_compressor.profiling.parser.result.ProfilingResult"]], "neural_compressor.profiling.parser.result": [[413, "module-neural_compressor.profiling.parser.result"]], "tensorflowparserfactory (class in neural_compressor.profiling.parser.tensorflow_parser.factory)": [[414, "neural_compressor.profiling.parser.tensorflow_parser.factory.TensorFlowParserFactory"]], "neural_compressor.profiling.parser.tensorflow_parser.factory": [[414, "module-neural_compressor.profiling.parser.tensorflow_parser.factory"]], "neural_compressor.profiling.parser.tensorflow_parser": [[415, "module-neural_compressor.profiling.parser.tensorflow_parser"]], "tensorflowprofilingparser (class in neural_compressor.profiling.parser.tensorflow_parser.parser)": [[416, "neural_compressor.profiling.parser.tensorflow_parser.parser.TensorFlowProfilingParser"]], "neural_compressor.profiling.parser.tensorflow_parser.parser": [[416, "module-neural_compressor.profiling.parser.tensorflow_parser.parser"]], "profilerfactory (class in neural_compressor.profiling.profiler.factory)": [[417, "neural_compressor.profiling.profiler.factory.ProfilerFactory"]], "neural_compressor.profiling.profiler.factory": [[417, "module-neural_compressor.profiling.profiler.factory"]], "neural_compressor.profiling.profiler": [[418, "module-neural_compressor.profiling.profiler"]], "profilerfactory (class in neural_compressor.profiling.profiler.onnxrt_profiler.factory)": [[419, "neural_compressor.profiling.profiler.onnxrt_profiler.factory.ProfilerFactory"]], "neural_compressor.profiling.profiler.onnxrt_profiler.factory": [[419, "module-neural_compressor.profiling.profiler.onnxrt_profiler.factory"]], "neural_compressor.profiling.profiler.onnxrt_profiler": [[420, "module-neural_compressor.profiling.profiler.onnxrt_profiler"]], "profiler (class in neural_compressor.profiling.profiler.onnxrt_profiler.profiler)": [[421, "neural_compressor.profiling.profiler.onnxrt_profiler.profiler.Profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.profiler": [[421, "module-neural_compressor.profiling.profiler.onnxrt_profiler.profiler"]], "create_onnx_config() (in module neural_compressor.profiling.profiler.onnxrt_profiler.utils)": [[422, "neural_compressor.profiling.profiler.onnxrt_profiler.utils.create_onnx_config"]], "neural_compressor.profiling.profiler.onnxrt_profiler.utils": [[422, "module-neural_compressor.profiling.profiler.onnxrt_profiler.utils"]], "profiler (class in neural_compressor.profiling.profiler.profiler)": [[423, "neural_compressor.profiling.profiler.profiler.Profiler"]], "neural_compressor.profiling.profiler.profiler": [[423, "module-neural_compressor.profiling.profiler.profiler"]], "profilerfactory (class in neural_compressor.profiling.profiler.tensorflow_profiler.factory)": [[424, "neural_compressor.profiling.profiler.tensorflow_profiler.factory.ProfilerFactory"]], "neural_compressor.profiling.profiler.tensorflow_profiler.factory": [[424, "module-neural_compressor.profiling.profiler.tensorflow_profiler.factory"]], "neural_compressor.profiling.profiler.tensorflow_profiler": [[425, "module-neural_compressor.profiling.profiler.tensorflow_profiler"]], "profiler (class in neural_compressor.profiling.profiler.tensorflow_profiler.profiler)": [[426, "neural_compressor.profiling.profiler.tensorflow_profiler.profiler.Profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.profiler": [[426, "module-neural_compressor.profiling.profiler.tensorflow_profiler.profiler"]], "create_tf_config() (in module neural_compressor.profiling.profiler.tensorflow_profiler.utils)": [[427, "neural_compressor.profiling.profiler.tensorflow_profiler.utils.create_tf_config"]], "delete_assign() (in module neural_compressor.profiling.profiler.tensorflow_profiler.utils)": [[427, "neural_compressor.profiling.profiler.tensorflow_profiler.utils.delete_assign"]], "neural_compressor.profiling.profiler.tensorflow_profiler.utils": [[427, "module-neural_compressor.profiling.profiler.tensorflow_profiler.utils"]], "set_eager_execution() (in module neural_compressor.profiling.profiler.tensorflow_profiler.utils)": [[427, "neural_compressor.profiling.profiler.tensorflow_profiler.utils.set_eager_execution"]], "fit() (in module neural_compressor.quantization)": [[428, "neural_compressor.quantization.fit"]], "neural_compressor.quantization": [[428, "module-neural_compressor.quantization"]], "autotunestrategy (class in neural_compressor.strategy.auto)": [[429, "neural_compressor.strategy.auto.AutoTuneStrategy"]], "neural_compressor.strategy.auto": [[429, "module-neural_compressor.strategy.auto"]], "automixedprecisiontunestrategy (class in neural_compressor.strategy.auto_mixed_precision)": [[430, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[430, "module-neural_compressor.strategy.auto_mixed_precision"]], "basictunestrategy (class in neural_compressor.strategy.basic)": [[431, "neural_compressor.strategy.basic.BasicTuneStrategy"]], "neural_compressor.strategy.basic": [[431, "module-neural_compressor.strategy.basic"]], "bayesianoptimization (class in neural_compressor.strategy.bayesian)": [[432, "neural_compressor.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.strategy.bayesian)": [[432, "neural_compressor.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.strategy.bayesian)": [[432, "neural_compressor.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.strategy.bayesian)": [[432, "neural_compressor.strategy.bayesian.acq_max"]], "neural_compressor.strategy.bayesian": [[432, "module-neural_compressor.strategy.bayesian"]], "conservativetunestrategy (class in neural_compressor.strategy.conservative)": [[433, "neural_compressor.strategy.conservative.ConservativeTuneStrategy"]], "neural_compressor.strategy.conservative": [[433, "module-neural_compressor.strategy.conservative"]], "exhaustivetunestrategy (class in neural_compressor.strategy.exhaustive)": [[434, "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[434, "module-neural_compressor.strategy.exhaustive"]], "hawq_v2tunestrategy (class in neural_compressor.strategy.hawq_v2)": [[435, "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[435, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[436, "module-neural_compressor.strategy"]], "msetunestrategy (class in neural_compressor.strategy.mse)": [[437, "neural_compressor.strategy.mse.MSETuneStrategy"]], "neural_compressor.strategy.mse": [[437, "module-neural_compressor.strategy.mse"]], "mse_v2tunestrategy (class in neural_compressor.strategy.mse_v2)": [[438, "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.strategy.mse_v2": [[438, "module-neural_compressor.strategy.mse_v2"]], "randomtunestrategy (class in neural_compressor.strategy.random)": [[439, "neural_compressor.strategy.random.RandomTuneStrategy"]], "neural_compressor.strategy.random": [[439, "module-neural_compressor.strategy.random"]], "tunestrategy (class in neural_compressor.strategy.strategy)": [[440, "neural_compressor.strategy.strategy.TuneStrategy"]], "tunestrategymeta (class in neural_compressor.strategy.strategy)": [[440, "neural_compressor.strategy.strategy.TuneStrategyMeta"]], "neural_compressor.strategy.strategy": [[440, "module-neural_compressor.strategy.strategy"]], "strategy_registry() (in module neural_compressor.strategy.strategy)": [[440, "neural_compressor.strategy.strategy.strategy_registry"]], "neural_compressor.strategy.utils.constant": [[441, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[442, "module-neural_compressor.strategy.utils"]], "blockfallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[443, "neural_compressor.strategy.utils.tuning_sampler.BlockFallbackTuningSampler"]], "fallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[443, "neural_compressor.strategy.utils.tuning_sampler.FallbackTuningSampler"]], "lowerbitssampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[443, "neural_compressor.strategy.utils.tuning_sampler.LowerBitsSampler"]], "modelwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[443, "neural_compressor.strategy.utils.tuning_sampler.ModelWiseTuningSampler"]], "optypewisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[443, "neural_compressor.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler"]], "opwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[443, "neural_compressor.strategy.utils.tuning_sampler.OpWiseTuningSampler"]], "smoothquantsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[443, "neural_compressor.strategy.utils.tuning_sampler.SmoothQuantSampler"]], "tuningorder (class in neural_compressor.strategy.utils.tuning_sampler)": [[443, "neural_compressor.strategy.utils.tuning_sampler.TuningOrder"]], "tuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[443, "neural_compressor.strategy.utils.tuning_sampler.TuningSampler"]], "weightonlyquantsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[443, "neural_compressor.strategy.utils.tuning_sampler.WeightOnlyQuantSampler"]], "neural_compressor.strategy.utils.tuning_sampler": [[443, "module-neural_compressor.strategy.utils.tuning_sampler"]], "tuningitem (class in neural_compressor.strategy.utils.tuning_space)": [[444, "neural_compressor.strategy.utils.tuning_space.TuningItem"]], "tuningspace (class in neural_compressor.strategy.utils.tuning_space)": [[444, "neural_compressor.strategy.utils.tuning_space.TuningSpace"]], "initial_tuning_cfg_with_quant_mode() (in module neural_compressor.strategy.utils.tuning_space)": [[444, "neural_compressor.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode"]], "neural_compressor.strategy.utils.tuning_space": [[444, "module-neural_compressor.strategy.utils.tuning_space"]], "pattern_to_internal() (in module neural_compressor.strategy.utils.tuning_space)": [[444, "neural_compressor.strategy.utils.tuning_space.pattern_to_internal"]], "pattern_to_path() (in module neural_compressor.strategy.utils.tuning_space)": [[444, "neural_compressor.strategy.utils.tuning_space.pattern_to_path"]], "quant_mode_from_pattern() (in module neural_compressor.strategy.utils.tuning_space)": [[444, "neural_compressor.strategy.utils.tuning_space.quant_mode_from_pattern"]], "optuningconfig (class in neural_compressor.strategy.utils.tuning_structs)": [[445, "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig"]], "neural_compressor.strategy.utils.tuning_structs": [[445, "module-neural_compressor.strategy.utils.tuning_structs"]], "classregister (class in neural_compressor.strategy.utils.utility)": [[446, "neural_compressor.strategy.utils.utility.ClassRegister"]], "ordereddefaultdict (class in neural_compressor.strategy.utils.utility)": [[446, "neural_compressor.strategy.utils.utility.OrderedDefaultDict"]], "quantoptions (class in neural_compressor.strategy.utils.utility)": [[446, "neural_compressor.strategy.utils.utility.QuantOptions"]], "quanttype (class in neural_compressor.strategy.utils.utility)": [[446, "neural_compressor.strategy.utils.utility.QuantType"]], "build_slave_faker_model() (in module neural_compressor.strategy.utils.utility)": [[446, "neural_compressor.strategy.utils.utility.build_slave_faker_model"]], "extract_data_type() (in module neural_compressor.strategy.utils.utility)": [[446, "neural_compressor.strategy.utils.utility.extract_data_type"]], "get_adaptor_name() (in module neural_compressor.strategy.utils.utility)": [[446, "neural_compressor.strategy.utils.utility.get_adaptor_name"]], "neural_compressor.strategy.utils.utility": [[446, "module-neural_compressor.strategy.utils.utility"]], "preprocess_user_cfg() (in module neural_compressor.strategy.utils.utility)": [[446, "neural_compressor.strategy.utils.utility.preprocess_user_cfg"]], "reverted_data_type() (in module neural_compressor.strategy.utils.utility)": [[446, "neural_compressor.strategy.utils.utility.reverted_data_type"]], "exampleclass (class in neural_compressor.template.api_doc_example)": [[447, "neural_compressor.template.api_doc_example.ExampleClass"]], "attr1 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[447, "neural_compressor.template.api_doc_example.ExampleClass.attr1"]], "attr2 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[447, "neural_compressor.template.api_doc_example.ExampleClass.attr2"]], "attr5 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[447, "neural_compressor.template.api_doc_example.ExampleClass.attr5"]], "attribute1 (in module neural_compressor.template.api_doc_example)": [[447, "neural_compressor.template.api_doc_example.attribute1"]], "function1() (in module neural_compressor.template.api_doc_example)": [[447, "neural_compressor.template.api_doc_example.function1"]], "function2() (in module neural_compressor.template.api_doc_example)": [[447, "neural_compressor.template.api_doc_example.function2"]], "function3() (in module neural_compressor.template.api_doc_example)": [[447, "neural_compressor.template.api_doc_example.function3"]], "generator1() (in module neural_compressor.template.api_doc_example)": [[447, "neural_compressor.template.api_doc_example.generator1"]], "module_debug_level1 (in module neural_compressor.template.api_doc_example)": [[447, "neural_compressor.template.api_doc_example.module_debug_level1"]], "neural_compressor.template.api_doc_example": [[447, "module-neural_compressor.template.api_doc_example"]], "neural_compressor.template": [[448, "module-neural_compressor.template"]], "neural_compressor.tensorflow.algorithms": [[449, "module-neural_compressor.tensorflow.algorithms"]], "smoothquantcalibration (class in neural_compressor.tensorflow.algorithms.smoother.calibration)": [[450, "neural_compressor.tensorflow.algorithms.smoother.calibration.SmoothQuantCalibration"]], "smoothquantcalibrationllm (class in neural_compressor.tensorflow.algorithms.smoother.calibration)": [[450, "neural_compressor.tensorflow.algorithms.smoother.calibration.SmoothQuantCalibrationLLM"]], "neural_compressor.tensorflow.algorithms.smoother.calibration": [[450, "module-neural_compressor.tensorflow.algorithms.smoother.calibration"]], "smoothquant (class in neural_compressor.tensorflow.algorithms.smoother.core)": [[451, "neural_compressor.tensorflow.algorithms.smoother.core.SmoothQuant"]], "neural_compressor.tensorflow.algorithms.smoother.core": [[451, "module-neural_compressor.tensorflow.algorithms.smoother.core"]], "neural_compressor.tensorflow.algorithms.smoother": [[452, "module-neural_compressor.tensorflow.algorithms.smoother"]], "smoothquantscaler (class in neural_compressor.tensorflow.algorithms.smoother.scaler)": [[453, "neural_compressor.tensorflow.algorithms.smoother.scaler.SmoothQuantScaler"]], "smoothquantscalerllm (class in neural_compressor.tensorflow.algorithms.smoother.scaler)": [[453, "neural_compressor.tensorflow.algorithms.smoother.scaler.SmoothQuantScalerLLM"]], "neural_compressor.tensorflow.algorithms.smoother.scaler": [[453, "module-neural_compressor.tensorflow.algorithms.smoother.scaler"]], "neural_compressor.tensorflow.algorithms.static_quant": [[454, "module-neural_compressor.tensorflow.algorithms.static_quant"]], "kerasadaptor (class in neural_compressor.tensorflow.algorithms.static_quant.keras)": [[455, "neural_compressor.tensorflow.algorithms.static_quant.keras.KerasAdaptor"]], "kerasconfigconverter (class in neural_compressor.tensorflow.algorithms.static_quant.keras)": [[455, "neural_compressor.tensorflow.algorithms.static_quant.keras.KerasConfigConverter"]], "kerasquery (class in neural_compressor.tensorflow.algorithms.static_quant.keras)": [[455, "neural_compressor.tensorflow.algorithms.static_quant.keras.KerasQuery"]], "kerassurgery (class in neural_compressor.tensorflow.algorithms.static_quant.keras)": [[455, "neural_compressor.tensorflow.algorithms.static_quant.keras.KerasSurgery"]], "neural_compressor.tensorflow.algorithms.static_quant.keras": [[455, "module-neural_compressor.tensorflow.algorithms.static_quant.keras"]], "tensorflowadaptor (class in neural_compressor.tensorflow.algorithms.static_quant.tensorflow)": [[456, "neural_compressor.tensorflow.algorithms.static_quant.tensorflow.TensorFlowAdaptor"]], "tensorflowconfig (class in neural_compressor.tensorflow.algorithms.static_quant.tensorflow)": [[456, "neural_compressor.tensorflow.algorithms.static_quant.tensorflow.TensorFlowConfig"]], "tensorflowconfigconverter (class in neural_compressor.tensorflow.algorithms.static_quant.tensorflow)": [[456, "neural_compressor.tensorflow.algorithms.static_quant.tensorflow.TensorflowConfigConverter"]], "tensorflowquery (class in neural_compressor.tensorflow.algorithms.static_quant.tensorflow)": [[456, "neural_compressor.tensorflow.algorithms.static_quant.tensorflow.TensorflowQuery"]], "tensorflow_itexadaptor (class in neural_compressor.tensorflow.algorithms.static_quant.tensorflow)": [[456, "neural_compressor.tensorflow.algorithms.static_quant.tensorflow.Tensorflow_ITEXAdaptor"]], "neural_compressor.tensorflow.algorithms.static_quant.tensorflow": [[456, "module-neural_compressor.tensorflow.algorithms.static_quant.tensorflow"]], "neural_compressor.tensorflow": [[457, "module-neural_compressor.tensorflow"]], "neural_compressor.tensorflow.keras": [[458, "module-neural_compressor.tensorflow.keras"]], "neural_compressor.tensorflow.keras.layers.conv2d": [[459, "module-neural_compressor.tensorflow.keras.layers.conv2d"]], "neural_compressor.tensorflow.keras.layers.dense": [[460, "module-neural_compressor.tensorflow.keras.layers.dense"]], "neural_compressor.tensorflow.keras.layers.depthwise_conv2d": [[461, "module-neural_compressor.tensorflow.keras.layers.depthwise_conv2d"]], "neural_compressor.tensorflow.keras.layers": [[462, "module-neural_compressor.tensorflow.keras.layers"]], "neural_compressor.tensorflow.keras.layers.layer_initializer": [[463, "module-neural_compressor.tensorflow.keras.layers.layer_initializer"]], "neural_compressor.tensorflow.keras.layers.pool2d": [[464, "module-neural_compressor.tensorflow.keras.layers.pool2d"]], "neural_compressor.tensorflow.keras.layers.separable_conv2d": [[465, "module-neural_compressor.tensorflow.keras.layers.separable_conv2d"]], "staticquantconfig (class in neural_compressor.tensorflow.keras.quantization.config)": [[466, "neural_compressor.tensorflow.keras.quantization.config.StaticQuantConfig"]], "get_all_registered_configs() (in module neural_compressor.tensorflow.keras.quantization.config)": [[466, "neural_compressor.tensorflow.keras.quantization.config.get_all_registered_configs"]], "get_default_static_quant_config() (in module neural_compressor.tensorflow.keras.quantization.config)": [[466, "neural_compressor.tensorflow.keras.quantization.config.get_default_static_quant_config"]], "neural_compressor.tensorflow.keras.quantization.config": [[466, "module-neural_compressor.tensorflow.keras.quantization.config"]], "neural_compressor.tensorflow.keras.quantization": [[467, "module-neural_compressor.tensorflow.keras.quantization"]], "neural_compressor.tensorflow.quantization.algorithm_entry": [[468, "module-neural_compressor.tensorflow.quantization.algorithm_entry"]], "static_quant_entry() (in module neural_compressor.tensorflow.quantization.algorithm_entry)": [[468, "neural_compressor.tensorflow.quantization.algorithm_entry.static_quant_entry"]], "autotune() (in module neural_compressor.tensorflow.quantization.autotune)": [[469, "neural_compressor.tensorflow.quantization.autotune.autotune"]], "neural_compressor.tensorflow.quantization.autotune": [[469, "module-neural_compressor.tensorflow.quantization.autotune"]], "smoothquantconfig (class in neural_compressor.tensorflow.quantization.config)": [[470, "neural_compressor.tensorflow.quantization.config.SmoothQuantConfig"]], "staticquantconfig (class in neural_compressor.tensorflow.quantization.config)": [[470, "neural_compressor.tensorflow.quantization.config.StaticQuantConfig"]], "get_default_sq_config() (in module neural_compressor.tensorflow.quantization.config)": [[470, "neural_compressor.tensorflow.quantization.config.get_default_sq_config"]], "get_default_static_quant_config() (in module neural_compressor.tensorflow.quantization.config)": [[470, "neural_compressor.tensorflow.quantization.config.get_default_static_quant_config"]], "neural_compressor.tensorflow.quantization.config": [[470, "module-neural_compressor.tensorflow.quantization.config"]], "neural_compressor.tensorflow.quantization": [[471, "module-neural_compressor.tensorflow.quantization"]], "neural_compressor.tensorflow.quantization.quantize": [[472, "module-neural_compressor.tensorflow.quantization.quantize"]], "quantize_model() (in module neural_compressor.tensorflow.quantization.quantize)": [[472, "neural_compressor.tensorflow.quantization.quantize.quantize_model"]], "quantize_model_with_single_config() (in module neural_compressor.tensorflow.quantization.quantize)": [[472, "neural_compressor.tensorflow.quantization.quantize.quantize_model_with_single_config"]], "graphconverter (class in neural_compressor.tensorflow.quantization.utils.graph_converter)": [[473, "neural_compressor.tensorflow.quantization.utils.graph_converter.GraphConverter"]], "neural_compressor.tensorflow.quantization.utils.graph_converter": [[473, "module-neural_compressor.tensorflow.quantization.utils.graph_converter"]], "graphconverterwithoutcalib (class in neural_compressor.tensorflow.quantization.utils.graph_converter_without_calib)": [[474, "neural_compressor.tensorflow.quantization.utils.graph_converter_without_calib.GraphConverterWithoutCalib"]], "neural_compressor.tensorflow.quantization.utils.graph_converter_without_calib": [[474, "module-neural_compressor.tensorflow.quantization.utils.graph_converter_without_calib"]], "bf16convert (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.bf16_convert)": [[475, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.bf16_convert.BF16Convert"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.bf16_convert": [[475, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.bf16_convert"]], "dequantizecastoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.dequantize_cast_optimizer)": [[476, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.dequantize_cast_optimizer.DequantizeCastOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.dequantize_cast_optimizer": [[476, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.dequantize_cast_optimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16": [[477, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16"]], "convertaddtobiasaddoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd)": [[478, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd": [[478, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd"]], "convertlayoutoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout)": [[479, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout": [[479, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout"]], "convertleakyreluoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu)": [[480, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu": [[480, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu"]], "convertnantorandom (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random)": [[481, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random": [[481, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random"]], "convertplaceholdertoconst (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const)": [[482, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const": [[482, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const"]], "dilatedcontraction (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction)": [[483, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction.DilatedContraction"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction": [[483, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction"]], "injectdummybiasaddoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd)": [[484, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd": [[484, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd"]], "expanddimsoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer)": [[485, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer": [[485, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer"]], "fetchweightfromreshapeoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape)": [[486, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape": [[486, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "foldbatchnormnodesoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm)": [[487, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm": [[487, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm"]], "graphfoldconstantoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant)": [[488, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant": [[488, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant"]], "fusebiasaddandaddoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add)": [[489, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add": [[489, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add"]], "fusecolumnwisemuloptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul)": [[490, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul": [[490, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul"]], "fuseconvwithmathoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math)": [[491, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math": [[491, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math"]], "fusedecomposedbnoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn)": [[492, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn.FuseDecomposedBNOptimizer"]], "bypass_reshape() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn)": [[492, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn.bypass_reshape"]], "get_const_dim_count() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn)": [[492, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn.get_const_dim_count"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn": [[492, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn"]], "node_from_map() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn)": [[492, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn.node_from_map"]], "node_name_from_input() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn)": [[492, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn)": [[492, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn)": [[492, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn.values_from_const"]], "fusedecomposedinoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in)": [[493, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in.FuseDecomposedINOptimizer"]], "bypass_reshape() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in)": [[493, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in.bypass_reshape"]], "get_const_dim_count() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in)": [[493, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in.get_const_dim_count"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in": [[493, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in"]], "node_from_map() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in)": [[493, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in.node_from_map"]], "node_name_from_input() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in)": [[493, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in)": [[493, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in)": [[493, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in.values_from_const"]], "fusegeluoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu)": [[494, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu": [[494, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu"]], "fuselayernormoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm)": [[495, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm": [[495, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm"]], "node_from_map() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm)": [[495, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm.node_from_map"]], "node_name_from_input() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm)": [[495, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm.node_name_from_input"]], "values_from_const() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm)": [[495, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm.values_from_const"]], "fusepadwithconv2doptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv)": [[496, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv": [[496, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv"]], "fusepadwithfp32conv2doptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv)": [[497, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[497, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "fusetransposereshapeoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose)": [[498, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose": [[498, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose"]], "graphcseoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer)": [[499, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer": [[499, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer"]], "grappleroptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass)": [[500, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass": [[500, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic": [[501, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic"]], "insertprintminmaxnode (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node)": [[502, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node": [[502, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node"]], "movesqueezeafterreluoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu)": [[503, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu": [[503, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu"]], "preoptimization (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize)": [[504, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize.PreOptimization"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize": [[504, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize"]], "removetrainingnodesoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes)": [[505, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes": [[505, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes"]], "renamebatchnormoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm)": [[506, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm": [[506, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm"]], "splitsharedinputoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input)": [[507, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input": [[507, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input"]], "stripequivalentnodesoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes)": [[508, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes": [[508, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes"]], "stripunusednodesoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes)": [[509, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes": [[509, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes"]], "switchoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer)": [[510, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer": [[510, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer"]], "graphrewriterbase (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base)": [[511, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base.GraphRewriterBase"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base": [[511, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter": [[512, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter"]], "freezefakequantopoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_fake_quant)": [[513, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_fake_quant": [[513, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_fake_quant"]], "freezevaluetransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value)": [[514, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value": [[514, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value"]], "freezevaluewithoutcalibtransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value_without_calib)": [[515, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value_without_calib": [[515, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value_without_calib"]], "fuseconvredundantdequantizetransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_redundant_dequantize)": [[516, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[516, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "fuseconvrequantizetransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_requantize)": [[517, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_requantize": [[517, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_requantize"]], "fusematmulredundantdequantizetransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize)": [[518, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[518, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "fusematmulrequantizedequantizenewapitransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize)": [[519, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer"]], "fusematmulrequantizedequantizetransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize)": [[519, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer"]], "fusematmulrequantizenewapitransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize)": [[519, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer"]], "fusematmulrequantizetransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize)": [[519, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize": [[519, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8": [[520, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8"]], "metainfochangingmemopoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.meta_op_optimizer)": [[521, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.meta_op_optimizer": [[521, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.meta_op_optimizer"]], "posthostconstconverter (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_hostconst_converter)": [[522, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_hostconst_converter": [[522, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_hostconst_converter"]], "postcseoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_quantized_op_cse)": [[523, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_quantized_op_cse": [[523, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_quantized_op_cse"]], "quantizedrnnconverter (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.rnn_convert)": [[524, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.rnn_convert": [[524, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.rnn_convert"]], "scalepropagationtransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.scale_propagation)": [[525, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.scale_propagation": [[525, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq": [[526, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq"]], "generategraphwithqdqpattern (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.insert_qdq_pattern)": [[527, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.insert_qdq_pattern": [[527, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.insert_qdq_pattern"]], "mergeduplicatedqdqoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.merge_duplicated_qdq)": [[528, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.merge_duplicated_qdq": [[528, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "shareqdqforitexypatternoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.share_qdq_y_pattern)": [[529, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.share_qdq_y_pattern": [[529, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "graphanalyzer (class in neural_compressor.tensorflow.quantization.utils.graph_util)": [[530, "neural_compressor.tensorflow.quantization.utils.graph_util.GraphAnalyzer"]], "graphrewriterhelper (class in neural_compressor.tensorflow.quantization.utils.graph_util)": [[530, "neural_compressor.tensorflow.quantization.utils.graph_util.GraphRewriterHelper"]], "neural_compressor.tensorflow.quantization.utils.graph_util": [[530, "module-neural_compressor.tensorflow.quantization.utils.graph_util"]], "neural_compressor.tensorflow.quantization.utils": [[531, "module-neural_compressor.tensorflow.quantization.utils"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph": [[532, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph"]], "fakequantize (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.fake_quantize)": [[533, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.fake_quantize.FakeQuantize"]], "fakequantizebase (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.fake_quantize)": [[533, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.fake_quantize": [[533, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat": [[534, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat"]], "quantizeconfig (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_config)": [[535, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_config.QuantizeConfig"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_config": [[535, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_config"]], "init_quantize_config() (in module neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_helper)": [[536, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_helper.init_quantize_config"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_helper": [[536, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_helper"]], "qat_clone_function() (in module neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_helper)": [[536, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_helper.qat_clone_function"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers": [[537, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers"]], "config_quantizable_layers() (in module neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.optimize_layer)": [[538, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.optimize_layer.config_quantizable_layers"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.optimize_layer": [[538, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "quantizelayeradd (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_add)": [[539, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_add.QuantizeLayerAdd"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[539, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "quantizelayerbase (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_base)": [[540, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_base.QuantizeLayerBase"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[540, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "quantizelayerbatchnormalization (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_bn)": [[541, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_bn.QuantizeLayerBatchNormalization"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[541, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "quantizewrapper (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_wrapper)": [[542, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper"]], "quantizewrapperbase (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_wrapper)": [[542, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_wrapper": [[542, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_wrapper"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_bn)": [[543, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_bn": [[543, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_concatv2)": [[544, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_concatv2": [[544, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_conv)": [[545, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_conv": [[545, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_conv"]], "fusenodestartwithdeconv2d (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_deconv)": [[546, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_deconv": [[546, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_deconv"]], "fusenodestartwithfusedinstancenorm (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_in)": [[547, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_in": [[547, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_in"]], "fusenodestartwithmatmul (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_matmul)": [[548, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_matmul": [[548, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_matmul"]], "fusenodestartwithpooling (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_pooling)": [[549, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_pooling": [[549, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq": [[550, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq"]], "optimizeqdqgraph (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.optimize_qdq)": [[551, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.optimize_qdq": [[551, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.optimize_qdq"]], "quantizegraphbase (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base)": [[552, "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base.QuantizeGraphBase"]], "quantizenodebase (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base)": [[552, "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base.QuantizeNodeBase"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base": [[552, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_bn)": [[553, "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_bn": [[553, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_concatv2)": [[554, "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_concatv2": [[554, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_conv)": [[555, "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_conv": [[555, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_conv"]], "quantizegraphforintel (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_for_intel_cpu)": [[556, "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_for_intel_cpu": [[556, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_for_intel_cpu"]], "fusenodestartwithmatmul (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_matmul)": [[557, "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_matmul": [[557, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_matmul"]], "fusenodestartwithpooling (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_pooling)": [[558, "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_pooling": [[558, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_pooling"]], "quantizegraphhelper (class in neural_compressor.tensorflow.quantization.utils.quantize_graph_common)": [[559, "neural_compressor.tensorflow.quantization.utils.quantize_graph_common.QuantizeGraphHelper"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph_common": [[559, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph_common"]], "biascorrection (class in neural_compressor.tensorflow.quantization.utils.transform_graph.bias_correction)": [[560, "neural_compressor.tensorflow.quantization.utils.transform_graph.bias_correction.BiasCorrection"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.bias_correction": [[560, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.bias_correction"]], "graphtransformbase (class in neural_compressor.tensorflow.quantization.utils.transform_graph.graph_transform_base)": [[561, "neural_compressor.tensorflow.quantization.utils.transform_graph.graph_transform_base.GraphTransformBase"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.graph_transform_base": [[561, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.graph_transform_base"]], "neural_compressor.tensorflow.quantization.utils.transform_graph": [[562, "module-neural_compressor.tensorflow.quantization.utils.transform_graph"]], "insertlogging (class in neural_compressor.tensorflow.quantization.utils.transform_graph.insert_logging)": [[563, "neural_compressor.tensorflow.quantization.utils.transform_graph.insert_logging.InsertLogging"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.insert_logging": [[563, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.insert_logging"]], "rerangequantizedconcat (class in neural_compressor.tensorflow.quantization.utils.transform_graph.rerange_quantized_concat)": [[564, "neural_compressor.tensorflow.quantization.utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.rerange_quantized_concat": [[564, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.rerange_quantized_concat"]], "apply_inlining() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[565, "neural_compressor.tensorflow.quantization.utils.utility.apply_inlining"]], "collate_tf_preds() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[565, "neural_compressor.tensorflow.quantization.utils.utility.collate_tf_preds"]], "construct_function_from_graph_def() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[565, "neural_compressor.tensorflow.quantization.utils.utility.construct_function_from_graph_def"]], "fix_ref_type_of_graph_def() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[565, "neural_compressor.tensorflow.quantization.utils.utility.fix_ref_type_of_graph_def"]], "generate_feed_dict() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[565, "neural_compressor.tensorflow.quantization.utils.utility.generate_feed_dict"]], "get_estimator_graph() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[565, "neural_compressor.tensorflow.quantization.utils.utility.get_estimator_graph"]], "get_graph_def() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[565, "neural_compressor.tensorflow.quantization.utils.utility.get_graph_def"]], "get_input_output_node_names() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[565, "neural_compressor.tensorflow.quantization.utils.utility.get_input_output_node_names"]], "get_model_input_shape() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[565, "neural_compressor.tensorflow.quantization.utils.utility.get_model_input_shape"]], "get_tensor_by_name() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[565, "neural_compressor.tensorflow.quantization.utils.utility.get_tensor_by_name"]], "get_tensor_val_from_graph_node() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[565, "neural_compressor.tensorflow.quantization.utils.utility.get_tensor_val_from_graph_node"]], "get_weight_from_input_tensor() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[565, "neural_compressor.tensorflow.quantization.utils.utility.get_weight_from_input_tensor"]], "int8_node_name_reverse() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[565, "neural_compressor.tensorflow.quantization.utils.utility.int8_node_name_reverse"]], "is_ckpt_format() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[565, "neural_compressor.tensorflow.quantization.utils.utility.is_ckpt_format"]], "is_saved_model_format() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[565, "neural_compressor.tensorflow.quantization.utils.utility.is_saved_model_format"]], "iterator_sess_run() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[565, "neural_compressor.tensorflow.quantization.utils.utility.iterator_sess_run"]], "neural_compressor.tensorflow.quantization.utils.utility": [[565, "module-neural_compressor.tensorflow.quantization.utils.utility"]], "parse_saved_model() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[565, "neural_compressor.tensorflow.quantization.utils.utility.parse_saved_model"]], "read_graph() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[565, "neural_compressor.tensorflow.quantization.utils.utility.read_graph"]], "reconstruct_saved_model() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[565, "neural_compressor.tensorflow.quantization.utils.utility.reconstruct_saved_model"]], "strip_equivalent_nodes() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[565, "neural_compressor.tensorflow.quantization.utils.utility.strip_equivalent_nodes"]], "strip_unused_nodes() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[565, "neural_compressor.tensorflow.quantization.utils.utility.strip_unused_nodes"]], "write_graph() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[565, "neural_compressor.tensorflow.quantization.utils.utility.write_graph"]], "neural_compressor.tensorflow.utils.constants": [[566, "module-neural_compressor.tensorflow.utils.constants"]], "basedataloader (class in neural_compressor.tensorflow.utils.data)": [[567, "neural_compressor.tensorflow.utils.data.BaseDataLoader"]], "batchsampler (class in neural_compressor.tensorflow.utils.data)": [[567, "neural_compressor.tensorflow.utils.data.BatchSampler"]], "dummydataset (class in neural_compressor.tensorflow.utils.data)": [[567, "neural_compressor.tensorflow.utils.data.DummyDataset"]], "dummydatasetv2 (class in neural_compressor.tensorflow.utils.data)": [[567, "neural_compressor.tensorflow.utils.data.DummyDatasetV2"]], "indexfetcher (class in neural_compressor.tensorflow.utils.data)": [[567, "neural_compressor.tensorflow.utils.data.IndexFetcher"]], "iterablefetcher (class in neural_compressor.tensorflow.utils.data)": [[567, "neural_compressor.tensorflow.utils.data.IterableFetcher"]], "iterablesampler (class in neural_compressor.tensorflow.utils.data)": [[567, "neural_compressor.tensorflow.utils.data.IterableSampler"]], "sequentialsampler (class in neural_compressor.tensorflow.utils.data)": [[567, "neural_compressor.tensorflow.utils.data.SequentialSampler"]], "default_collate() (in module neural_compressor.tensorflow.utils.data)": [[567, "neural_compressor.tensorflow.utils.data.default_collate"]], "neural_compressor.tensorflow.utils.data": [[567, "module-neural_compressor.tensorflow.utils.data"]], "neural_compressor.tensorflow.utils": [[568, "module-neural_compressor.tensorflow.utils"]], "model (class in neural_compressor.tensorflow.utils.model)": [[569, "neural_compressor.tensorflow.utils.model.Model"]], "neural_compressor.tensorflow.utils.model": [[569, "module-neural_compressor.tensorflow.utils.model"]], "basemodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[570, "neural_compressor.tensorflow.utils.model_wrappers.BaseModel"]], "kerasmodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[570, "neural_compressor.tensorflow.utils.model_wrappers.KerasModel"]], "tensorflowbasemodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[570, "neural_compressor.tensorflow.utils.model_wrappers.TensorflowBaseModel"]], "tensorflowcheckpointmodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[570, "neural_compressor.tensorflow.utils.model_wrappers.TensorflowCheckpointModel"]], "tensorflowllmmodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[570, "neural_compressor.tensorflow.utils.model_wrappers.TensorflowLLMModel"]], "tensorflowmodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[570, "neural_compressor.tensorflow.utils.model_wrappers.TensorflowModel"]], "tensorflowqatmodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[570, "neural_compressor.tensorflow.utils.model_wrappers.TensorflowQATModel"]], "tensorflowsavedmodelmodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[570, "neural_compressor.tensorflow.utils.model_wrappers.TensorflowSavedModelModel"]], "checkpoint_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[570, "neural_compressor.tensorflow.utils.model_wrappers.checkpoint_session"]], "estimator_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[570, "neural_compressor.tensorflow.utils.model_wrappers.estimator_session"]], "frozen_pb_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[570, "neural_compressor.tensorflow.utils.model_wrappers.frozen_pb_session"]], "get_model_type() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[570, "neural_compressor.tensorflow.utils.model_wrappers.get_model_type"]], "graph_def_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[570, "neural_compressor.tensorflow.utils.model_wrappers.graph_def_session"]], "graph_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[570, "neural_compressor.tensorflow.utils.model_wrappers.graph_session"]], "keras_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[570, "neural_compressor.tensorflow.utils.model_wrappers.keras_session"]], "load_saved_model() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[570, "neural_compressor.tensorflow.utils.model_wrappers.load_saved_model"]], "neural_compressor.tensorflow.utils.model_wrappers": [[570, "module-neural_compressor.tensorflow.utils.model_wrappers"]], "saved_model_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[570, "neural_compressor.tensorflow.utils.model_wrappers.saved_model_session"]], "slim_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[570, "neural_compressor.tensorflow.utils.model_wrappers.slim_session"]], "try_loading_keras() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[570, "neural_compressor.tensorflow.utils.model_wrappers.try_loading_keras"]], "validate_and_inference_input_output() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[570, "neural_compressor.tensorflow.utils.model_wrappers.validate_and_inference_input_output"]], "validate_graph_node() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[570, "neural_compressor.tensorflow.utils.model_wrappers.validate_graph_node"]], "tfslimnetsfactory (class in neural_compressor.tensorflow.utils.nets_factory)": [[571, "neural_compressor.tensorflow.utils.nets_factory.TFSlimNetsFactory"]], "neural_compressor.tensorflow.utils.nets_factory": [[571, "module-neural_compressor.tensorflow.utils.nets_factory"]], "captureoutputtofile (class in neural_compressor.tensorflow.utils.utility)": [[572, "neural_compressor.tensorflow.utils.utility.CaptureOutputToFile"]], "cpuinfo (class in neural_compressor.tensorflow.utils.utility)": [[572, "neural_compressor.tensorflow.utils.utility.CpuInfo"]], "dequantize() (in module neural_compressor.tensorflow.utils.utility)": [[572, "neural_compressor.tensorflow.utils.utility.Dequantize"]], "lazyimport (class in neural_compressor.tensorflow.utils.utility)": [[572, "neural_compressor.tensorflow.utils.utility.LazyImport"]], "statistics (class in neural_compressor.tensorflow.utils.utility)": [[572, "neural_compressor.tensorflow.utils.utility.Statistics"]], "combine_histogram() (in module neural_compressor.tensorflow.utils.utility)": [[572, "neural_compressor.tensorflow.utils.utility.combine_histogram"]], "deep_get() (in module neural_compressor.tensorflow.utils.utility)": [[572, "neural_compressor.tensorflow.utils.utility.deep_get"]], "dequantize_weight() (in module neural_compressor.tensorflow.utils.utility)": [[572, "neural_compressor.tensorflow.utils.utility.dequantize_weight"]], "disable_random() (in module neural_compressor.tensorflow.utils.utility)": [[572, "neural_compressor.tensorflow.utils.utility.disable_random"]], "dump_data_to_local() (in module neural_compressor.tensorflow.utils.utility)": [[572, "neural_compressor.tensorflow.utils.utility.dump_data_to_local"]], "dump_elapsed_time() (in module neural_compressor.tensorflow.utils.utility)": [[572, "neural_compressor.tensorflow.utils.utility.dump_elapsed_time"]], "get_all_fp32_data() (in module neural_compressor.tensorflow.utils.utility)": [[572, "neural_compressor.tensorflow.utils.utility.get_all_fp32_data"]], "get_tensor_histogram() (in module neural_compressor.tensorflow.utils.utility)": [[572, "neural_compressor.tensorflow.utils.utility.get_tensor_histogram"]], "itex_installed() (in module neural_compressor.tensorflow.utils.utility)": [[572, "neural_compressor.tensorflow.utils.utility.itex_installed"]], "load_data_from_pkl() (in module neural_compressor.tensorflow.utils.utility)": [[572, "neural_compressor.tensorflow.utils.utility.load_data_from_pkl"]], "neural_compressor.tensorflow.utils.utility": [[572, "module-neural_compressor.tensorflow.utils.utility"]], "register_algo() (in module neural_compressor.tensorflow.utils.utility)": [[572, "neural_compressor.tensorflow.utils.utility.register_algo"]], "singleton() (in module neural_compressor.tensorflow.utils.utility)": [[572, "neural_compressor.tensorflow.utils.utility.singleton"]], "valid_keras_format() (in module neural_compressor.tensorflow.utils.utility)": [[572, "neural_compressor.tensorflow.utils.utility.valid_keras_format"]], "version1_eq_version2() (in module neural_compressor.tensorflow.utils.utility)": [[572, "neural_compressor.tensorflow.utils.utility.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.tensorflow.utils.utility)": [[572, "neural_compressor.tensorflow.utils.utility.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.tensorflow.utils.utility)": [[572, "neural_compressor.tensorflow.utils.utility.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.tensorflow.utils.utility)": [[572, "neural_compressor.tensorflow.utils.utility.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.tensorflow.utils.utility)": [[572, "neural_compressor.tensorflow.utils.utility.version1_lte_version2"]], "quantizer (class in neural_compressor.torch.algorithms.base_algorithm)": [[573, "neural_compressor.torch.algorithms.base_algorithm.Quantizer"]], "neural_compressor.torch.algorithms.base_algorithm": [[573, "module-neural_compressor.torch.algorithms.base_algorithm"]], "neural_compressor.torch.algorithms.habana_fp8.fp8_quant": [[574, "module-neural_compressor.torch.algorithms.habana_fp8.fp8_quant"]], "neural_compressor.torch.algorithms.habana_fp8": [[575, "module-neural_compressor.torch.algorithms.habana_fp8"]], "neural_compressor.torch.algorithms.habana_fp8.modules": [[576, "module-neural_compressor.torch.algorithms.habana_fp8.modules"]], "neural_compressor.torch.algorithms.habana_fp8.observer": [[577, "module-neural_compressor.torch.algorithms.habana_fp8.observer"]], "neural_compressor.torch.algorithms.habana_fp8.save_load": [[578, "module-neural_compressor.torch.algorithms.habana_fp8.save_load"]], "neural_compressor.torch.algorithms.habana_fp8.scale": [[579, "module-neural_compressor.torch.algorithms.habana_fp8.scale"]], "neural_compressor.torch.algorithms.habana_fp8.tensor": [[580, "module-neural_compressor.torch.algorithms.habana_fp8.tensor"]], "neural_compressor.torch.algorithms": [[581, "module-neural_compressor.torch.algorithms"]], "neural_compressor.torch.algorithms.layer_wise": [[582, "module-neural_compressor.torch.algorithms.layer_wise"]], "load() (in module neural_compressor.torch.algorithms.layer_wise.load)": [[583, "neural_compressor.torch.algorithms.layer_wise.load.load"]], "neural_compressor.torch.algorithms.layer_wise.load": [[583, "module-neural_compressor.torch.algorithms.layer_wise.load"]], "neural_compressor.torch.algorithms.layer_wise.modified_pickle": [[584, "module-neural_compressor.torch.algorithms.layer_wise.modified_pickle"]], "dowload_hf_model() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[585, "neural_compressor.torch.algorithms.layer_wise.utils.dowload_hf_model"]], "get_children() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[585, "neural_compressor.torch.algorithms.layer_wise.utils.get_children"]], "get_module() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[585, "neural_compressor.torch.algorithms.layer_wise.utils.get_module"]], "get_named_children() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[585, "neural_compressor.torch.algorithms.layer_wise.utils.get_named_children"]], "get_super_module_by_name() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[585, "neural_compressor.torch.algorithms.layer_wise.utils.get_super_module_by_name"]], "load_empty_model() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[585, "neural_compressor.torch.algorithms.layer_wise.utils.load_empty_model"]], "load_layer_wise_quantized_model() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[585, "neural_compressor.torch.algorithms.layer_wise.utils.load_layer_wise_quantized_model"]], "load_tensor() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[585, "neural_compressor.torch.algorithms.layer_wise.utils.load_tensor"]], "load_tensor_from_shard() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[585, "neural_compressor.torch.algorithms.layer_wise.utils.load_tensor_from_shard"]], "neural_compressor.torch.algorithms.layer_wise.utils": [[585, "module-neural_compressor.torch.algorithms.layer_wise.utils"]], "update_module() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[585, "neural_compressor.torch.algorithms.layer_wise.utils.update_module"]], "neural_compressor.torch.algorithms.pt2e_quant.core": [[586, "module-neural_compressor.torch.algorithms.pt2e_quant.core"]], "neural_compressor.torch.algorithms.pt2e_quant": [[587, "module-neural_compressor.torch.algorithms.pt2e_quant"]], "neural_compressor.torch.algorithms.smooth_quant": [[588, "module-neural_compressor.torch.algorithms.smooth_quant"]], "neural_compressor.torch.algorithms.smooth_quant.save_load": [[589, "module-neural_compressor.torch.algorithms.smooth_quant.save_load"]], "recover_model_from_json() (in module neural_compressor.torch.algorithms.smooth_quant.save_load)": [[589, "neural_compressor.torch.algorithms.smooth_quant.save_load.recover_model_from_json"]], "neural_compressor.torch.algorithms.smooth_quant.smooth_quant": [[590, "module-neural_compressor.torch.algorithms.smooth_quant.smooth_quant"]], "smooth_quantize() (in module neural_compressor.torch.algorithms.smooth_quant.smooth_quant)": [[590, "neural_compressor.torch.algorithms.smooth_quant.smooth_quant.smooth_quantize"]], "torchsmoothquant (class in neural_compressor.torch.algorithms.smooth_quant.utility)": [[591, "neural_compressor.torch.algorithms.smooth_quant.utility.TorchSmoothQuant"]], "check_cfg_and_qconfig() (in module neural_compressor.torch.algorithms.smooth_quant.utility)": [[591, "neural_compressor.torch.algorithms.smooth_quant.utility.check_cfg_and_qconfig"]], "get_module() (in module neural_compressor.torch.algorithms.smooth_quant.utility)": [[591, "neural_compressor.torch.algorithms.smooth_quant.utility.get_module"]], "neural_compressor.torch.algorithms.smooth_quant.utility": [[591, "module-neural_compressor.torch.algorithms.smooth_quant.utility"]], "register_autotune() (in module neural_compressor.torch.algorithms.smooth_quant.utility)": [[591, "neural_compressor.torch.algorithms.smooth_quant.utility.register_autotune"]], "reshape_in_channel_to_last() (in module neural_compressor.torch.algorithms.smooth_quant.utility)": [[591, "neural_compressor.torch.algorithms.smooth_quant.utility.reshape_in_channel_to_last"]], "reshape_scale_as_input() (in module neural_compressor.torch.algorithms.smooth_quant.utility)": [[591, "neural_compressor.torch.algorithms.smooth_quant.utility.reshape_scale_as_input"]], "reshape_scale_as_weight() (in module neural_compressor.torch.algorithms.smooth_quant.utility)": [[591, "neural_compressor.torch.algorithms.smooth_quant.utility.reshape_scale_as_weight"]], "set_module() (in module neural_compressor.torch.algorithms.smooth_quant.utility)": [[591, "neural_compressor.torch.algorithms.smooth_quant.utility.set_module"]], "update_sq_scale() (in module neural_compressor.torch.algorithms.smooth_quant.utility)": [[591, "neural_compressor.torch.algorithms.smooth_quant.utility.update_sq_scale"]], "neural_compressor.torch.algorithms.static_quant": [[592, "module-neural_compressor.torch.algorithms.static_quant"]], "neural_compressor.torch.algorithms.static_quant.save_load": [[593, "module-neural_compressor.torch.algorithms.static_quant.save_load"]], "staticquantquantizer (class in neural_compressor.torch.algorithms.static_quant.static_quant)": [[594, "neural_compressor.torch.algorithms.static_quant.static_quant.StaticQuantQuantizer"]], "neural_compressor.torch.algorithms.static_quant.static_quant": [[594, "module-neural_compressor.torch.algorithms.static_quant.static_quant"]], "statistics (class in neural_compressor.torch.algorithms.static_quant.utility)": [[595, "neural_compressor.torch.algorithms.static_quant.utility.Statistics"]], "transformerbasedmodelblockpatterndetector (class in neural_compressor.torch.algorithms.static_quant.utility)": [[595, "neural_compressor.torch.algorithms.static_quant.utility.TransformerBasedModelBlockPatternDetector"]], "check_cfg_and_qconfig() (in module neural_compressor.torch.algorithms.static_quant.utility)": [[595, "neural_compressor.torch.algorithms.static_quant.utility.check_cfg_and_qconfig"]], "dump_model_op_stats() (in module neural_compressor.torch.algorithms.static_quant.utility)": [[595, "neural_compressor.torch.algorithms.static_quant.utility.dump_model_op_stats"]], "generate_activation_observer() (in module neural_compressor.torch.algorithms.static_quant.utility)": [[595, "neural_compressor.torch.algorithms.static_quant.utility.generate_activation_observer"]], "get_depth() (in module neural_compressor.torch.algorithms.static_quant.utility)": [[595, "neural_compressor.torch.algorithms.static_quant.utility.get_depth"]], "get_dict_at_depth() (in module neural_compressor.torch.algorithms.static_quant.utility)": [[595, "neural_compressor.torch.algorithms.static_quant.utility.get_dict_at_depth"]], "get_element_under_depth() (in module neural_compressor.torch.algorithms.static_quant.utility)": [[595, "neural_compressor.torch.algorithms.static_quant.utility.get_element_under_depth"]], "get_quantizable_ops_from_cfgs() (in module neural_compressor.torch.algorithms.static_quant.utility)": [[595, "neural_compressor.torch.algorithms.static_quant.utility.get_quantizable_ops_from_cfgs"]], "get_quantizable_ops_recursively() (in module neural_compressor.torch.algorithms.static_quant.utility)": [[595, "neural_compressor.torch.algorithms.static_quant.utility.get_quantizable_ops_recursively"]], "neural_compressor.torch.algorithms.static_quant.utility": [[595, "module-neural_compressor.torch.algorithms.static_quant.utility"]], "paser_cfgs() (in module neural_compressor.torch.algorithms.static_quant.utility)": [[595, "neural_compressor.torch.algorithms.static_quant.utility.paser_cfgs"]], "simple_inference() (in module neural_compressor.torch.algorithms.static_quant.utility)": [[595, "neural_compressor.torch.algorithms.static_quant.utility.simple_inference"]], "autoroundquantizer (class in neural_compressor.torch.algorithms.weight_only.autoround)": [[596, "neural_compressor.torch.algorithms.weight_only.autoround.AutoRoundQuantizer"]], "get_autoround_default_run_fn() (in module neural_compressor.torch.algorithms.weight_only.autoround)": [[596, "neural_compressor.torch.algorithms.weight_only.autoround.get_autoround_default_run_fn"]], "neural_compressor.torch.algorithms.weight_only.autoround": [[596, "module-neural_compressor.torch.algorithms.weight_only.autoround"]], "awqquantizer (class in neural_compressor.torch.algorithms.weight_only.awq)": [[597, "neural_compressor.torch.algorithms.weight_only.awq.AWQQuantizer"]], "neural_compressor.torch.algorithms.weight_only.awq": [[597, "module-neural_compressor.torch.algorithms.weight_only.awq"]], "gptq (class in neural_compressor.torch.algorithms.weight_only.gptq)": [[598, "neural_compressor.torch.algorithms.weight_only.gptq.GPTQ"]], "gptquantizer (class in neural_compressor.torch.algorithms.weight_only.gptq)": [[598, "neural_compressor.torch.algorithms.weight_only.gptq.GPTQuantizer"]], "rawgptquantizer (class in neural_compressor.torch.algorithms.weight_only.gptq)": [[598, "neural_compressor.torch.algorithms.weight_only.gptq.RAWGPTQuantizer"]], "find_layers() (in module neural_compressor.torch.algorithms.weight_only.gptq)": [[598, "neural_compressor.torch.algorithms.weight_only.gptq.find_layers"]], "find_layers_name() (in module neural_compressor.torch.algorithms.weight_only.gptq)": [[598, "neural_compressor.torch.algorithms.weight_only.gptq.find_layers_name"]], "is_leaf() (in module neural_compressor.torch.algorithms.weight_only.gptq)": [[598, "neural_compressor.torch.algorithms.weight_only.gptq.is_leaf"]], "log_quantizable_layers_per_transformer() (in module neural_compressor.torch.algorithms.weight_only.gptq)": [[598, "neural_compressor.torch.algorithms.weight_only.gptq.log_quantizable_layers_per_transformer"]], "neural_compressor.torch.algorithms.weight_only.gptq": [[598, "module-neural_compressor.torch.algorithms.weight_only.gptq"]], "quantize() (in module neural_compressor.torch.algorithms.weight_only.gptq)": [[598, "neural_compressor.torch.algorithms.weight_only.gptq.quantize"]], "trace_gptq_target_blocks() (in module neural_compressor.torch.algorithms.weight_only.gptq)": [[598, "neural_compressor.torch.algorithms.weight_only.gptq.trace_gptq_target_blocks"]], "neural_compressor.torch.algorithms.weight_only.hqq.bitpack": [[599, "module-neural_compressor.torch.algorithms.weight_only.hqq.bitpack"]], "hqqmoduleconfig (class in neural_compressor.torch.algorithms.weight_only.hqq.config)": [[600, "neural_compressor.torch.algorithms.weight_only.hqq.config.HQQModuleConfig"]], "neural_compressor.torch.algorithms.weight_only.hqq.config": [[600, "module-neural_compressor.torch.algorithms.weight_only.hqq.config"]], "neural_compressor.torch.algorithms.weight_only.hqq.core": [[601, "module-neural_compressor.torch.algorithms.weight_only.hqq.core"]], "neural_compressor.torch.algorithms.weight_only.hqq": [[602, "module-neural_compressor.torch.algorithms.weight_only.hqq"]], "neural_compressor.torch.algorithms.weight_only.hqq.optimizer": [[603, "module-neural_compressor.torch.algorithms.weight_only.hqq.optimizer"]], "neural_compressor.torch.algorithms.weight_only.hqq.qtensor": [[604, "module-neural_compressor.torch.algorithms.weight_only.hqq.qtensor"]], "hqquantizer (class in neural_compressor.torch.algorithms.weight_only.hqq.quantizer)": [[605, "neural_compressor.torch.algorithms.weight_only.hqq.quantizer.HQQuantizer"]], "neural_compressor.torch.algorithms.weight_only.hqq.quantizer": [[605, "module-neural_compressor.torch.algorithms.weight_only.hqq.quantizer"]], "dump_elapsed_time() (in module neural_compressor.torch.algorithms.weight_only.hqq.utility)": [[606, "neural_compressor.torch.algorithms.weight_only.hqq.utility.dump_elapsed_time"]], "neural_compressor.torch.algorithms.weight_only.hqq.utility": [[606, "module-neural_compressor.torch.algorithms.weight_only.hqq.utility"]], "neural_compressor.torch.algorithms.weight_only": [[607, "module-neural_compressor.torch.algorithms.weight_only"]], "fakeaffinetensorquantfunction (class in neural_compressor.torch.algorithms.weight_only.modules)": [[608, "neural_compressor.torch.algorithms.weight_only.modules.FakeAffineTensorQuantFunction"]], "mullinear (class in neural_compressor.torch.algorithms.weight_only.modules)": [[608, "neural_compressor.torch.algorithms.weight_only.modules.MulLinear"]], "teqlinearfakequant (class in neural_compressor.torch.algorithms.weight_only.modules)": [[608, "neural_compressor.torch.algorithms.weight_only.modules.TEQLinearFakeQuant"]], "neural_compressor.torch.algorithms.weight_only.modules": [[608, "module-neural_compressor.torch.algorithms.weight_only.modules"]], "rtnquantizer (class in neural_compressor.torch.algorithms.weight_only.rtn)": [[609, "neural_compressor.torch.algorithms.weight_only.rtn.RTNQuantizer"]], "neural_compressor.torch.algorithms.weight_only.rtn": [[609, "module-neural_compressor.torch.algorithms.weight_only.rtn"]], "tequantizer (class in neural_compressor.torch.algorithms.weight_only.teq)": [[610, "neural_compressor.torch.algorithms.weight_only.teq.TEQuantizer"]], "trainableequivalenttransformation (class in neural_compressor.torch.algorithms.weight_only.teq)": [[610, "neural_compressor.torch.algorithms.weight_only.teq.TrainableEquivalentTransformation"]], "neural_compressor.torch.algorithms.weight_only.teq": [[610, "module-neural_compressor.torch.algorithms.weight_only.teq"]], "fetch_module() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[611, "neural_compressor.torch.algorithms.weight_only.utility.fetch_module"]], "get_absorb_layers() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[611, "neural_compressor.torch.algorithms.weight_only.utility.get_absorb_layers"]], "get_block_prefix() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[611, "neural_compressor.torch.algorithms.weight_only.utility.get_block_prefix"]], "get_example_input() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[611, "neural_compressor.torch.algorithms.weight_only.utility.get_example_input"]], "get_module() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[611, "neural_compressor.torch.algorithms.weight_only.utility.get_module"]], "get_module_input_output() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[611, "neural_compressor.torch.algorithms.weight_only.utility.get_module_input_output"]], "neural_compressor.torch.algorithms.weight_only.utility": [[611, "module-neural_compressor.torch.algorithms.weight_only.utility"]], "qdq_weight_actor() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[611, "neural_compressor.torch.algorithms.weight_only.utility.qdq_weight_actor"]], "qdq_weight_asym() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[611, "neural_compressor.torch.algorithms.weight_only.utility.qdq_weight_asym"]], "qdq_weight_sym() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[611, "neural_compressor.torch.algorithms.weight_only.utility.qdq_weight_sym"]], "quant_tensor() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[611, "neural_compressor.torch.algorithms.weight_only.utility.quant_tensor"]], "quant_weight_w_scale() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[611, "neural_compressor.torch.algorithms.weight_only.utility.quant_weight_w_scale"]], "quantize_4bit() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[611, "neural_compressor.torch.algorithms.weight_only.utility.quantize_4bit"]], "recover_forward() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[611, "neural_compressor.torch.algorithms.weight_only.utility.recover_forward"]], "replace_forward() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[611, "neural_compressor.torch.algorithms.weight_only.utility.replace_forward"]], "search_clip() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[611, "neural_compressor.torch.algorithms.weight_only.utility.search_clip"]], "set_module() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[611, "neural_compressor.torch.algorithms.weight_only.utility.set_module"]], "autocast (class in neural_compressor.torch.amp.autocast)": [[612, "neural_compressor.torch.amp.autocast.autocast"]], "neural_compressor.torch.amp.autocast": [[612, "module-neural_compressor.torch.amp.autocast"]], "neural_compressor.torch.amp.fp8.functions": [[613, "module-neural_compressor.torch.amp.fp8.functions"]], "neural_compressor.torch.amp.fp8": [[614, "module-neural_compressor.torch.amp.fp8"]], "neural_compressor.torch.amp": [[615, "module-neural_compressor.torch.amp"]], "neural_compressor.torch": [[616, "module-neural_compressor.torch"]], "neural_compressor.torch.quantization.algorithm_entry": [[617, "module-neural_compressor.torch.quantization.algorithm_entry"]], "rtn_entry() (in module neural_compressor.torch.quantization.algorithm_entry)": [[617, "neural_compressor.torch.quantization.algorithm_entry.rtn_entry"]], "autotune() (in module neural_compressor.torch.quantization.autotune)": [[618, "neural_compressor.torch.quantization.autotune.autotune"]], "neural_compressor.torch.quantization.autotune": [[618, "module-neural_compressor.torch.quantization.autotune"]], "gptqconfig (class in neural_compressor.torch.quantization.config)": [[619, "neural_compressor.torch.quantization.config.GPTQConfig"]], "hqqconfig (class in neural_compressor.torch.quantization.config)": [[619, "neural_compressor.torch.quantization.config.HQQConfig"]], "rtnconfig (class in neural_compressor.torch.quantization.config)": [[619, "neural_compressor.torch.quantization.config.RTNConfig"]], "get_default_gptq_config() (in module neural_compressor.torch.quantization.config)": [[619, "neural_compressor.torch.quantization.config.get_default_gptq_config"]], "get_default_hqq_config() (in module neural_compressor.torch.quantization.config)": [[619, "neural_compressor.torch.quantization.config.get_default_hqq_config"]], "get_default_rtn_config() (in module neural_compressor.torch.quantization.config)": [[619, "neural_compressor.torch.quantization.config.get_default_rtn_config"]], "neural_compressor.torch.quantization.config": [[619, "module-neural_compressor.torch.quantization.config"]], "neural_compressor.torch.quantization": [[620, "module-neural_compressor.torch.quantization"]], "neural_compressor.torch.quantization.load_entry": [[621, "module-neural_compressor.torch.quantization.load_entry"]], "convert() (in module neural_compressor.torch.quantization.quantize)": [[622, "neural_compressor.torch.quantization.quantize.convert"]], "neural_compressor.torch.quantization.quantize": [[622, "module-neural_compressor.torch.quantization.quantize"]], "prepare() (in module neural_compressor.torch.quantization.quantize)": [[622, "neural_compressor.torch.quantization.quantize.prepare"]], "quantize() (in module neural_compressor.torch.quantization.quantize)": [[622, "neural_compressor.torch.quantization.quantize.quantize"]], "auto_accelerator (class in neural_compressor.torch.utils.auto_accelerator)": [[623, "neural_compressor.torch.utils.auto_accelerator.Auto_Accelerator"]], "cpu_accelerator (class in neural_compressor.torch.utils.auto_accelerator)": [[623, "neural_compressor.torch.utils.auto_accelerator.CPU_Accelerator"]], "cuda_accelerator (class in neural_compressor.torch.utils.auto_accelerator)": [[623, "neural_compressor.torch.utils.auto_accelerator.CUDA_Accelerator"]], "hpu_accelerator (class in neural_compressor.torch.utils.auto_accelerator)": [[623, "neural_compressor.torch.utils.auto_accelerator.HPU_Accelerator"]], "xpu_accelerator (class in neural_compressor.torch.utils.auto_accelerator)": [[623, "neural_compressor.torch.utils.auto_accelerator.XPU_Accelerator"]], "neural_compressor.torch.utils.auto_accelerator": [[623, "module-neural_compressor.torch.utils.auto_accelerator"]], "register_accelerator() (in module neural_compressor.torch.utils.auto_accelerator)": [[623, "neural_compressor.torch.utils.auto_accelerator.register_accelerator"]], "neural_compressor.torch.utils.constants": [[624, "module-neural_compressor.torch.utils.constants"]], "neural_compressor.torch.utils.environ": [[625, "module-neural_compressor.torch.utils.environ"]], "neural_compressor.torch.utils": [[626, "module-neural_compressor.torch.utils"]], "mode (class in neural_compressor.torch.utils.utility)": [[627, "neural_compressor.torch.utils.utility.Mode"]], "fetch_module() (in module neural_compressor.torch.utils.utility)": [[627, "neural_compressor.torch.utils.utility.fetch_module"]], "neural_compressor.torch.utils.utility": [[627, "module-neural_compressor.torch.utils.utility"]], "register_algo() (in module neural_compressor.torch.utils.utility)": [[627, "neural_compressor.torch.utils.utility.register_algo"]], "set_module() (in module neural_compressor.torch.utils.utility)": [[627, "neural_compressor.torch.utils.utility.set_module"]], "callbacks (class in neural_compressor.training)": [[628, "neural_compressor.training.CallBacks"]], "compressionmanager (class in neural_compressor.training)": [[628, "neural_compressor.training.CompressionManager"]], "fit() (in module neural_compressor.training)": [[628, "neural_compressor.training.fit"]], "neural_compressor.training": [[628, "module-neural_compressor.training"]], "prepare_compression() (in module neural_compressor.training)": [[628, "neural_compressor.training.prepare_compression"]], "layerhistogramcollector (class in neural_compressor.utils.collect_layer_histogram)": [[629, "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector"]], "neural_compressor.utils.collect_layer_histogram": [[629, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[630, "module-neural_compressor.utils.constant"]], "create_dataloader() (in module neural_compressor.utils.create_obj_from_config)": [[631, "neural_compressor.utils.create_obj_from_config.create_dataloader"]], "create_dataset() (in module neural_compressor.utils.create_obj_from_config)": [[631, "neural_compressor.utils.create_obj_from_config.create_dataset"]], "create_eval_func() (in module neural_compressor.utils.create_obj_from_config)": [[631, "neural_compressor.utils.create_obj_from_config.create_eval_func"]], "create_train_func() (in module neural_compressor.utils.create_obj_from_config)": [[631, "neural_compressor.utils.create_obj_from_config.create_train_func"]], "get_algorithm() (in module neural_compressor.utils.create_obj_from_config)": [[631, "neural_compressor.utils.create_obj_from_config.get_algorithm"]], "get_func_from_config() (in module neural_compressor.utils.create_obj_from_config)": [[631, "neural_compressor.utils.create_obj_from_config.get_func_from_config"]], "get_metrics() (in module neural_compressor.utils.create_obj_from_config)": [[631, "neural_compressor.utils.create_obj_from_config.get_metrics"]], "get_postprocess() (in module neural_compressor.utils.create_obj_from_config)": [[631, "neural_compressor.utils.create_obj_from_config.get_postprocess"]], "get_preprocess() (in module neural_compressor.utils.create_obj_from_config)": [[631, "neural_compressor.utils.create_obj_from_config.get_preprocess"]], "neural_compressor.utils.create_obj_from_config": [[631, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[632, "module-neural_compressor.utils"]], "kl_divergence (class in neural_compressor.utils.kl_divergence)": [[633, "neural_compressor.utils.kl_divergence.KL_Divergence"]], "neural_compressor.utils.kl_divergence": [[633, "module-neural_compressor.utils.kl_divergence"]], "optimizedmodel (class in neural_compressor.utils.load_huggingface)": [[634, "neural_compressor.utils.load_huggingface.OptimizedModel"]], "export_compressed_model() (in module neural_compressor.utils.load_huggingface)": [[634, "neural_compressor.utils.load_huggingface.export_compressed_model"]], "neural_compressor.utils.load_huggingface": [[634, "module-neural_compressor.utils.load_huggingface"]], "save_for_huggingface_upstream() (in module neural_compressor.utils.load_huggingface)": [[634, "neural_compressor.utils.load_huggingface.save_for_huggingface_upstream"]], "logger (class in neural_compressor.utils.logger)": [[635, "neural_compressor.utils.logger.Logger"]], "debug() (in module neural_compressor.utils.logger)": [[635, "neural_compressor.utils.logger.debug"]], "error() (in module neural_compressor.utils.logger)": [[635, "neural_compressor.utils.logger.error"]], "fatal() (in module neural_compressor.utils.logger)": [[635, "neural_compressor.utils.logger.fatal"]], "info() (in module neural_compressor.utils.logger)": [[635, "neural_compressor.utils.logger.info"]], "log() (in module neural_compressor.utils.logger)": [[635, "neural_compressor.utils.logger.log"]], "neural_compressor.utils.logger": [[635, "module-neural_compressor.utils.logger"]], "warn() (in module neural_compressor.utils.logger)": [[635, "neural_compressor.utils.logger.warn"]], "warning() (in module neural_compressor.utils.logger)": [[635, "neural_compressor.utils.logger.warning"]], "get_model_path() (in module neural_compressor.utils.neural_insights_utils)": [[636, "neural_compressor.utils.neural_insights_utils.get_model_path"]], "neural_compressor.utils.neural_insights_utils": [[636, "module-neural_compressor.utils.neural_insights_utils"]], "register_neural_insights_workload() (in module neural_compressor.utils.neural_insights_utils)": [[636, "neural_compressor.utils.neural_insights_utils.register_neural_insights_workload"]], "update_neural_insights_workload() (in module neural_compressor.utils.neural_insights_utils)": [[636, "neural_compressor.utils.neural_insights_utils.update_neural_insights_workload"]], "update_neural_insights_workload_accuracy_data() (in module neural_compressor.utils.neural_insights_utils)": [[636, "neural_compressor.utils.neural_insights_utils.update_neural_insights_workload_accuracy_data"]], "neural_compressor.utils.options": [[637, "module-neural_compressor.utils.options"]], "onnxrt (class in neural_compressor.utils.options)": [[637, "neural_compressor.utils.options.onnxrt"]], "is_int8_model() (in module neural_compressor.utils.pytorch)": [[638, "neural_compressor.utils.pytorch.is_int8_model"]], "load() (in module neural_compressor.utils.pytorch)": [[638, "neural_compressor.utils.pytorch.load"]], "load_weight_only() (in module neural_compressor.utils.pytorch)": [[638, "neural_compressor.utils.pytorch.load_weight_only"]], "neural_compressor.utils.pytorch": [[638, "module-neural_compressor.utils.pytorch"]], "recover_model_from_json() (in module neural_compressor.utils.pytorch)": [[638, "neural_compressor.utils.pytorch.recover_model_from_json"]], "captureoutputtofile (class in neural_compressor.utils.utility)": [[639, "neural_compressor.utils.utility.CaptureOutputToFile"]], "cpuinfo (class in neural_compressor.utils.utility)": [[639, "neural_compressor.utils.utility.CpuInfo"]], "dequantize() (in module neural_compressor.utils.utility)": [[639, "neural_compressor.utils.utility.Dequantize"]], "dotdict (class in neural_compressor.utils.utility)": [[639, "neural_compressor.utils.utility.DotDict"]], "global_state (class in neural_compressor.utils.utility)": [[639, "neural_compressor.utils.utility.GLOBAL_STATE"]], "lazyimport (class in neural_compressor.utils.utility)": [[639, "neural_compressor.utils.utility.LazyImport"]], "mode (class in neural_compressor.utils.utility)": [[639, "neural_compressor.utils.utility.MODE"]], "opentry (class in neural_compressor.utils.utility)": [[639, "neural_compressor.utils.utility.OpEntry"]], "statistics (class in neural_compressor.utils.utility)": [[639, "neural_compressor.utils.utility.Statistics"]], "alias_param() (in module neural_compressor.utils.utility)": [[639, "neural_compressor.utils.utility.alias_param"]], "calculate_mse() (in module neural_compressor.utils.utility)": [[639, "neural_compressor.utils.utility.calculate_mse"]], "check_key_exist() (in module neural_compressor.utils.utility)": [[639, "neural_compressor.utils.utility.check_key_exist"]], "combine_histogram() (in module neural_compressor.utils.utility)": [[639, "neural_compressor.utils.utility.combine_histogram"]], "compare_objects() (in module neural_compressor.utils.utility)": [[639, "neural_compressor.utils.utility.compare_objects"]], "compute_sparsity() (in module neural_compressor.utils.utility)": [[639, "neural_compressor.utils.utility.compute_sparsity"]], "dequantize_weight() (in module neural_compressor.utils.utility)": [[639, "neural_compressor.utils.utility.dequantize_weight"]], "dump_class_attrs() (in module neural_compressor.utils.utility)": [[639, "neural_compressor.utils.utility.dump_class_attrs"]], "dump_data_to_local() (in module neural_compressor.utils.utility)": [[639, "neural_compressor.utils.utility.dump_data_to_local"]], "dump_elapsed_time() (in module neural_compressor.utils.utility)": [[639, "neural_compressor.utils.utility.dump_elapsed_time"]], "dump_table() (in module neural_compressor.utils.utility)": [[639, "neural_compressor.utils.utility.dump_table"]], "dump_table_to_csv() (in module neural_compressor.utils.utility)": [[639, "neural_compressor.utils.utility.dump_table_to_csv"]], "equal_dicts() (in module neural_compressor.utils.utility)": [[639, "neural_compressor.utils.utility.equal_dicts"]], "fault_tolerant_file() (in module neural_compressor.utils.utility)": [[639, "neural_compressor.utils.utility.fault_tolerant_file"]], "get_all_fp32_data() (in module neural_compressor.utils.utility)": [[639, "neural_compressor.utils.utility.get_all_fp32_data"]], "get_number_of_sockets() (in module neural_compressor.utils.utility)": [[639, "neural_compressor.utils.utility.get_number_of_sockets"]], "get_op_list() (in module neural_compressor.utils.utility)": [[639, "neural_compressor.utils.utility.get_op_list"]], "get_size() (in module neural_compressor.utils.utility)": [[639, "neural_compressor.utils.utility.get_size"]], "get_tensor_histogram() (in module neural_compressor.utils.utility)": [[639, "neural_compressor.utils.utility.get_tensor_histogram"]], "get_tensors_info() (in module neural_compressor.utils.utility)": [[639, "neural_compressor.utils.utility.get_tensors_info"]], "get_tuning_history() (in module neural_compressor.utils.utility)": [[639, "neural_compressor.utils.utility.get_tuning_history"]], "get_weights_details() (in module neural_compressor.utils.utility)": [[639, "neural_compressor.utils.utility.get_weights_details"]], "load_data_from_pkl() (in module neural_compressor.utils.utility)": [[639, "neural_compressor.utils.utility.load_data_from_pkl"]], "mse_metric_gap() (in module neural_compressor.utils.utility)": [[639, "neural_compressor.utils.utility.mse_metric_gap"]], "neural_compressor.utils.utility": [[639, "module-neural_compressor.utils.utility"]], "print_op_list() (in module neural_compressor.utils.utility)": [[639, "neural_compressor.utils.utility.print_op_list"]], "print_table() (in module neural_compressor.utils.utility)": [[639, "neural_compressor.utils.utility.print_table"]], "recover() (in module neural_compressor.utils.utility)": [[639, "neural_compressor.utils.utility.recover"]], "set_random_seed() (in module neural_compressor.utils.utility)": [[639, "neural_compressor.utils.utility.set_random_seed"]], "set_resume_from() (in module neural_compressor.utils.utility)": [[639, "neural_compressor.utils.utility.set_resume_from"]], "set_tensorboard() (in module neural_compressor.utils.utility)": [[639, "neural_compressor.utils.utility.set_tensorboard"]], "set_workspace() (in module neural_compressor.utils.utility)": [[639, "neural_compressor.utils.utility.set_workspace"]], "show_memory_info() (in module neural_compressor.utils.utility)": [[639, "neural_compressor.utils.utility.show_memory_info"]], "singleton() (in module neural_compressor.utils.utility)": [[639, "neural_compressor.utils.utility.singleton"]], "str2array() (in module neural_compressor.utils.utility)": [[639, "neural_compressor.utils.utility.str2array"]], "time_limit() (in module neural_compressor.utils.utility)": [[639, "neural_compressor.utils.utility.time_limit"]], "version1_eq_version2() (in module neural_compressor.utils.utility)": [[639, "neural_compressor.utils.utility.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.utils.utility)": [[639, "neural_compressor.utils.utility.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.utils.utility)": [[639, "neural_compressor.utils.utility.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.utils.utility)": [[639, "neural_compressor.utils.utility.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.utils.utility)": [[639, "neural_compressor.utils.utility.version1_lte_version2"]], "weightsdetails (class in neural_compressor.utils.weights_details)": [[640, "neural_compressor.utils.weights_details.WeightsDetails"]], "weightsstatistics (class in neural_compressor.utils.weights_details)": [[640, "neural_compressor.utils.weights_details.WeightsStatistics"]], "neural_compressor.utils.weights_details": [[640, "module-neural_compressor.utils.weights_details"]], "neural_compressor.version": [[641, "module-neural_compressor.version"]]}})