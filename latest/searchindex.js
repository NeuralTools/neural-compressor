Search.setIndex({"docnames": ["autoapi/neural_compressor/algorithm/algorithm/index", "autoapi/neural_compressor/algorithm/fast_bias_correction/index", "autoapi/neural_compressor/algorithm/index", "autoapi/neural_compressor/algorithm/smooth_quant/index", "autoapi/neural_compressor/algorithm/weight_correction/index", "autoapi/neural_compressor/benchmark/index", "autoapi/neural_compressor/config/index", "autoapi/neural_compressor/contrib/index", "autoapi/neural_compressor/contrib/strategy/index", "autoapi/neural_compressor/contrib/strategy/sigopt/index", "autoapi/neural_compressor/contrib/strategy/tpe/index", "autoapi/neural_compressor/data/datasets/bert_dataset/index", "autoapi/neural_compressor/data/datasets/coco_dataset/index", "autoapi/neural_compressor/data/datasets/dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/data/datasets/index", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/data/filters/coco_filter/index", "autoapi/neural_compressor/data/filters/filter/index", "autoapi/neural_compressor/data/filters/index", "autoapi/neural_compressor/data/index", "autoapi/neural_compressor/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/data/transforms/index", "autoapi/neural_compressor/data/transforms/postprocess/index", "autoapi/neural_compressor/data/transforms/tokenization/index", "autoapi/neural_compressor/data/transforms/transform/index", "autoapi/neural_compressor/index", "autoapi/neural_compressor/metric/bleu/index", "autoapi/neural_compressor/metric/bleu_util/index", "autoapi/neural_compressor/metric/coco_label_map/index", "autoapi/neural_compressor/metric/coco_tools/index", "autoapi/neural_compressor/metric/evaluate_squad/index", "autoapi/neural_compressor/metric/f1/index", "autoapi/neural_compressor/metric/index", "autoapi/neural_compressor/metric/metric/index", "autoapi/neural_compressor/mix_precision/index", "autoapi/neural_compressor/model/base_model/index", "autoapi/neural_compressor/model/index", "autoapi/neural_compressor/model/keras_model/index", "autoapi/neural_compressor/model/model/index", "autoapi/neural_compressor/model/mxnet_model/index", "autoapi/neural_compressor/model/nets_factory/index", "autoapi/neural_compressor/model/onnx_model/index", "autoapi/neural_compressor/model/tensorflow_model/index", "autoapi/neural_compressor/model/torch_model/index", "autoapi/neural_compressor/objective/index", "autoapi/neural_compressor/profiling/index", "autoapi/neural_compressor/quantization/index", "autoapi/neural_compressor/strategy/auto/index", "autoapi/neural_compressor/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/strategy/basic/index", "autoapi/neural_compressor/strategy/bayesian/index", "autoapi/neural_compressor/strategy/conservative/index", "autoapi/neural_compressor/strategy/exhaustive/index", "autoapi/neural_compressor/strategy/hawq_v2/index", "autoapi/neural_compressor/strategy/index", "autoapi/neural_compressor/strategy/mse/index", "autoapi/neural_compressor/strategy/mse_v2/index", "autoapi/neural_compressor/strategy/random/index", "autoapi/neural_compressor/strategy/strategy/index", "autoapi/neural_compressor/strategy/utils/constant/index", "autoapi/neural_compressor/strategy/utils/index", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/strategy/utils/tuning_space/index", "autoapi/neural_compressor/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/strategy/utils/utility/index", "autoapi/neural_compressor/training/index", "autoapi/neural_compressor/utils/collect_layer_histogram/index", "autoapi/neural_compressor/utils/constant/index", "autoapi/neural_compressor/utils/create_obj_from_config/index", "autoapi/neural_compressor/utils/export/index", "autoapi/neural_compressor/utils/export/qlinear2qdq/index", "autoapi/neural_compressor/utils/export/tf2onnx/index", "autoapi/neural_compressor/utils/export/torch2onnx/index", "autoapi/neural_compressor/utils/index", "autoapi/neural_compressor/utils/kl_divergence/index", "autoapi/neural_compressor/utils/load_huggingface/index", "autoapi/neural_compressor/utils/logger/index", "autoapi/neural_compressor/utils/neural_insights_utils/index", "autoapi/neural_compressor/utils/options/index", "autoapi/neural_compressor/utils/pytorch/index", "autoapi/neural_compressor/utils/utility/index", "autoapi/neural_compressor/utils/weights_details/index", "autoapi/neural_compressor/version/index", "docs/3x/PT_DynamicQuant", "docs/3x/PT_MXQuant", "docs/3x/PT_MixPrecision", "docs/3x/PT_SmoothQuant", "docs/3x/PT_StaticQuant", "docs/3x/PT_WeightOnlyQuant", "docs/3x/PyTorch", "docs/3x/TF_Quant", "docs/3x/TF_SQ", "docs/3x/TensorFlow", "docs/3x/autotune", "docs/3x/quantization", "docs/build_docs/source/index", "docs/source/CODE_OF_CONDUCT", "docs/source/CONTRIBUTING", "docs/source/FX", "docs/source/NAS", "docs/source/SECURITY", "docs/source/Welcome", "docs/source/adaptor", "docs/source/add_new_adaptor", "docs/source/add_new_data_type", "docs/source/api-doc/adaptor", "docs/source/api-doc/adaptor/onnxrt", "docs/source/api-doc/adaptor/torch_utils", "docs/source/api-doc/api_doc_example", "docs/source/api-doc/apis", "docs/source/api-doc/benchmark", "docs/source/api-doc/compression", "docs/source/api-doc/config", "docs/source/api-doc/mix_precision", "docs/source/api-doc/model", "docs/source/api-doc/objective", "docs/source/api-doc/quantization", "docs/source/api-doc/strategy", "docs/source/api-doc/training", "docs/source/benchmark", "docs/source/calibration", "docs/source/coding_style", "docs/source/dataloader", "docs/source/dataset", "docs/source/design", "docs/source/diagnosis", "docs/source/distillation", "docs/source/distillation_quantization", "docs/source/distributed", "docs/source/examples_readme", "docs/source/export", "docs/source/faq", "docs/source/framework_yaml", "docs/source/get_started", "docs/source/incompatible_changes", "docs/source/infrastructure", "docs/source/installation_guide", "docs/source/legal_information", "docs/source/llm_recipes", "docs/source/metric", "docs/source/migration", "docs/source/mixed_precision", "docs/source/model", "docs/source/mx_quantization", "docs/source/neural_coder/README", "docs/source/neural_coder/docs/AWSSageMakerSupport", "docs/source/neural_coder/docs/BigDLNanoSupport", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting", "docs/source/neural_coder/docs/PythonAPI", "docs/source/neural_coder/docs/PythonLauncher", "docs/source/neural_coder/docs/Quantization", "docs/source/neural_coder/docs/SupportMatrix", "docs/source/neural_coder/docs/release_notes/v0.4", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart", "docs/source/neural_insights/README", "docs/source/neural_insights/docs/source/onnx_accuracy_debug", "docs/source/neural_insights/docs/source/pytorch_nlp_cli_mode", "docs/source/neural_insights/docs/source/tf_accuracy_debug", "docs/source/neural_insights/gui/README", "docs/source/neural_solution/README", "docs/source/neural_solution/docs/source/README", "docs/source/neural_solution/docs/source/description_api", "docs/source/neural_solution/docs/source/ns_design_doc", "docs/source/neural_solution/docs/source/template/task_request_description", "docs/source/neural_solution/examples/README", "docs/source/neural_solution/examples/custom_models_optimized/tf_example1/README", "docs/source/neural_solution/examples/hf_models/README", "docs/source/neural_solution/examples/hf_models_grpc/README", "docs/source/neural_solution/frontend/README", "docs/source/objective", "docs/source/orchestration", "docs/source/pruning", "docs/source/publication_list", "docs/source/pythonic_style", "docs/source/quantization", "docs/source/quantization_layer_wise", "docs/source/quantization_mixed_precision", "docs/source/quantization_weight_only", "docs/source/releases_info", "docs/source/sigopt_strategy", "docs/source/smooth_quant", "docs/source/tensorboard", "docs/source/transform", "docs/source/tuning_strategies", "docs/source/user_guide", "docs/source/user_yaml", "docs/source/validated_model_list", "index"], "filenames": ["autoapi/neural_compressor/algorithm/algorithm/index.rst", "autoapi/neural_compressor/algorithm/fast_bias_correction/index.rst", "autoapi/neural_compressor/algorithm/index.rst", "autoapi/neural_compressor/algorithm/smooth_quant/index.rst", "autoapi/neural_compressor/algorithm/weight_correction/index.rst", "autoapi/neural_compressor/benchmark/index.rst", "autoapi/neural_compressor/config/index.rst", "autoapi/neural_compressor/contrib/index.rst", "autoapi/neural_compressor/contrib/strategy/index.rst", "autoapi/neural_compressor/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/data/datasets/index.rst", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/data/filters/filter/index.rst", "autoapi/neural_compressor/data/filters/index.rst", "autoapi/neural_compressor/data/index.rst", "autoapi/neural_compressor/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/data/transforms/index.rst", "autoapi/neural_compressor/data/transforms/postprocess/index.rst", "autoapi/neural_compressor/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/data/transforms/transform/index.rst", "autoapi/neural_compressor/index.rst", "autoapi/neural_compressor/metric/bleu/index.rst", "autoapi/neural_compressor/metric/bleu_util/index.rst", "autoapi/neural_compressor/metric/coco_label_map/index.rst", "autoapi/neural_compressor/metric/coco_tools/index.rst", "autoapi/neural_compressor/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/metric/f1/index.rst", "autoapi/neural_compressor/metric/index.rst", "autoapi/neural_compressor/metric/metric/index.rst", "autoapi/neural_compressor/mix_precision/index.rst", "autoapi/neural_compressor/model/base_model/index.rst", "autoapi/neural_compressor/model/index.rst", "autoapi/neural_compressor/model/keras_model/index.rst", "autoapi/neural_compressor/model/model/index.rst", "autoapi/neural_compressor/model/mxnet_model/index.rst", "autoapi/neural_compressor/model/nets_factory/index.rst", "autoapi/neural_compressor/model/onnx_model/index.rst", "autoapi/neural_compressor/model/tensorflow_model/index.rst", "autoapi/neural_compressor/model/torch_model/index.rst", "autoapi/neural_compressor/objective/index.rst", "autoapi/neural_compressor/profiling/index.rst", "autoapi/neural_compressor/quantization/index.rst", "autoapi/neural_compressor/strategy/auto/index.rst", "autoapi/neural_compressor/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/strategy/basic/index.rst", "autoapi/neural_compressor/strategy/bayesian/index.rst", "autoapi/neural_compressor/strategy/conservative/index.rst", "autoapi/neural_compressor/strategy/exhaustive/index.rst", "autoapi/neural_compressor/strategy/hawq_v2/index.rst", "autoapi/neural_compressor/strategy/index.rst", "autoapi/neural_compressor/strategy/mse/index.rst", "autoapi/neural_compressor/strategy/mse_v2/index.rst", "autoapi/neural_compressor/strategy/random/index.rst", "autoapi/neural_compressor/strategy/strategy/index.rst", "autoapi/neural_compressor/strategy/utils/constant/index.rst", "autoapi/neural_compressor/strategy/utils/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/strategy/utils/utility/index.rst", "autoapi/neural_compressor/training/index.rst", "autoapi/neural_compressor/utils/collect_layer_histogram/index.rst", "autoapi/neural_compressor/utils/constant/index.rst", "autoapi/neural_compressor/utils/create_obj_from_config/index.rst", "autoapi/neural_compressor/utils/export/index.rst", "autoapi/neural_compressor/utils/export/qlinear2qdq/index.rst", "autoapi/neural_compressor/utils/export/tf2onnx/index.rst", "autoapi/neural_compressor/utils/export/torch2onnx/index.rst", "autoapi/neural_compressor/utils/index.rst", "autoapi/neural_compressor/utils/kl_divergence/index.rst", "autoapi/neural_compressor/utils/load_huggingface/index.rst", "autoapi/neural_compressor/utils/logger/index.rst", "autoapi/neural_compressor/utils/neural_insights_utils/index.rst", "autoapi/neural_compressor/utils/options/index.rst", "autoapi/neural_compressor/utils/pytorch/index.rst", "autoapi/neural_compressor/utils/utility/index.rst", "autoapi/neural_compressor/utils/weights_details/index.rst", "autoapi/neural_compressor/version/index.rst", "docs/3x/PT_DynamicQuant.md", "docs/3x/PT_MXQuant.md", "docs/3x/PT_MixPrecision.md", "docs/3x/PT_SmoothQuant.md", "docs/3x/PT_StaticQuant.md", "docs/3x/PT_WeightOnlyQuant.md", "docs/3x/PyTorch.md", "docs/3x/TF_Quant.md", "docs/3x/TF_SQ.md", "docs/3x/TensorFlow.md", "docs/3x/autotune.md", "docs/3x/quantization.md", "docs/build_docs/source/index.rst", "docs/source/CODE_OF_CONDUCT.md", "docs/source/CONTRIBUTING.md", "docs/source/FX.md", "docs/source/NAS.md", "docs/source/SECURITY.md", "docs/source/Welcome.md", "docs/source/adaptor.md", "docs/source/add_new_adaptor.md", "docs/source/add_new_data_type.md", "docs/source/api-doc/adaptor.rst", "docs/source/api-doc/adaptor/onnxrt.rst", "docs/source/api-doc/adaptor/torch_utils.rst", "docs/source/api-doc/api_doc_example.rst", "docs/source/api-doc/apis.rst", "docs/source/api-doc/benchmark.rst", "docs/source/api-doc/compression.rst", "docs/source/api-doc/config.rst", "docs/source/api-doc/mix_precision.rst", "docs/source/api-doc/model.rst", "docs/source/api-doc/objective.rst", "docs/source/api-doc/quantization.rst", "docs/source/api-doc/strategy.rst", "docs/source/api-doc/training.rst", "docs/source/benchmark.md", "docs/source/calibration.md", "docs/source/coding_style.md", "docs/source/dataloader.md", "docs/source/dataset.md", "docs/source/design.md", "docs/source/diagnosis.md", "docs/source/distillation.md", "docs/source/distillation_quantization.md", "docs/source/distributed.md", "docs/source/examples_readme.md", "docs/source/export.md", "docs/source/faq.md", "docs/source/framework_yaml.md", "docs/source/get_started.md", "docs/source/incompatible_changes.md", "docs/source/infrastructure.md", "docs/source/installation_guide.md", "docs/source/legal_information.md", "docs/source/llm_recipes.md", "docs/source/metric.md", "docs/source/migration.md", "docs/source/mixed_precision.md", "docs/source/model.md", "docs/source/mx_quantization.md", "docs/source/neural_coder/README.md", "docs/source/neural_coder/docs/AWSSageMakerSupport.md", "docs/source/neural_coder/docs/BigDLNanoSupport.md", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting.md", "docs/source/neural_coder/docs/PythonAPI.md", "docs/source/neural_coder/docs/PythonLauncher.md", "docs/source/neural_coder/docs/Quantization.md", "docs/source/neural_coder/docs/SupportMatrix.md", "docs/source/neural_coder/docs/release_notes/v0.4.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart.md", "docs/source/neural_insights/README.md", "docs/source/neural_insights/docs/source/onnx_accuracy_debug.md", "docs/source/neural_insights/docs/source/pytorch_nlp_cli_mode.md", "docs/source/neural_insights/docs/source/tf_accuracy_debug.md", "docs/source/neural_insights/gui/README.md", "docs/source/neural_solution/README.md", "docs/source/neural_solution/docs/source/README.md", "docs/source/neural_solution/docs/source/description_api.md", "docs/source/neural_solution/docs/source/ns_design_doc.md", "docs/source/neural_solution/docs/source/template/task_request_description.md", "docs/source/neural_solution/examples/README.md", "docs/source/neural_solution/examples/custom_models_optimized/tf_example1/README.md", "docs/source/neural_solution/examples/hf_models/README.md", "docs/source/neural_solution/examples/hf_models_grpc/README.md", "docs/source/neural_solution/frontend/README.md", "docs/source/objective.md", "docs/source/orchestration.md", "docs/source/pruning.md", "docs/source/publication_list.md", "docs/source/pythonic_style.md", "docs/source/quantization.md", "docs/source/quantization_layer_wise.md", "docs/source/quantization_mixed_precision.md", "docs/source/quantization_weight_only.md", "docs/source/releases_info.md", "docs/source/sigopt_strategy.md", "docs/source/smooth_quant.md", "docs/source/tensorboard.md", "docs/source/transform.md", "docs/source/tuning_strategies.md", "docs/source/user_guide.md", "docs/source/user_yaml.md", "docs/source/validated_model_list.md", "index.rst"], "titles": ["neural_compressor.algorithm.algorithm", "neural_compressor.algorithm.fast_bias_correction", "neural_compressor.algorithm", "neural_compressor.algorithm.smooth_quant", "neural_compressor.algorithm.weight_correction", "neural_compressor.benchmark", "neural_compressor.config", "neural_compressor.contrib", "neural_compressor.contrib.strategy", "neural_compressor.contrib.strategy.sigopt", "neural_compressor.contrib.strategy.tpe", "neural_compressor.data.datasets.bert_dataset", "neural_compressor.data.datasets.coco_dataset", "neural_compressor.data.datasets.dataset", "neural_compressor.data.datasets.dummy_dataset", "neural_compressor.data.datasets.dummy_dataset_v2", "neural_compressor.data.datasets.imagenet_dataset", "neural_compressor.data.datasets", "neural_compressor.data.datasets.style_transfer_dataset", "neural_compressor.data.filters.coco_filter", "neural_compressor.data.filters.filter", "neural_compressor.data.filters", "neural_compressor.data", "neural_compressor.data.transforms.imagenet_transform", "neural_compressor.data.transforms", "neural_compressor.data.transforms.postprocess", "neural_compressor.data.transforms.tokenization", "neural_compressor.data.transforms.transform", "neural_compressor", "neural_compressor.metric.bleu", "neural_compressor.metric.bleu_util", "neural_compressor.metric.coco_label_map", "neural_compressor.metric.coco_tools", "neural_compressor.metric.evaluate_squad", "neural_compressor.metric.f1", "neural_compressor.metric", "neural_compressor.metric.metric", "neural_compressor.mix_precision", "neural_compressor.model.base_model", "neural_compressor.model", "neural_compressor.model.keras_model", "neural_compressor.model.model", "neural_compressor.model.mxnet_model", "neural_compressor.model.nets_factory", "neural_compressor.model.onnx_model", "neural_compressor.model.tensorflow_model", "neural_compressor.model.torch_model", "neural_compressor.objective", "neural_compressor.profiling", "neural_compressor.quantization", "neural_compressor.strategy.auto", "neural_compressor.strategy.auto_mixed_precision", "neural_compressor.strategy.basic", "neural_compressor.strategy.bayesian", "neural_compressor.strategy.conservative", "neural_compressor.strategy.exhaustive", "neural_compressor.strategy.hawq_v2", "neural_compressor.strategy", "neural_compressor.strategy.mse", "neural_compressor.strategy.mse_v2", "neural_compressor.strategy.random", "neural_compressor.strategy.strategy", "neural_compressor.strategy.utils.constant", "neural_compressor.strategy.utils", "neural_compressor.strategy.utils.tuning_sampler", "neural_compressor.strategy.utils.tuning_space", "neural_compressor.strategy.utils.tuning_structs", "neural_compressor.strategy.utils.utility", "neural_compressor.training", "neural_compressor.utils.collect_layer_histogram", "neural_compressor.utils.constant", "neural_compressor.utils.create_obj_from_config", "neural_compressor.utils.export", "neural_compressor.utils.export.qlinear2qdq", "neural_compressor.utils.export.tf2onnx", "neural_compressor.utils.export.torch2onnx", "neural_compressor.utils", "neural_compressor.utils.kl_divergence", "neural_compressor.utils.load_huggingface", "neural_compressor.utils.logger", "neural_compressor.utils.neural_insights_utils", "neural_compressor.utils.options", "neural_compressor.utils.pytorch", "neural_compressor.utils.utility", "neural_compressor.utils.weights_details", "neural_compressor.version", "Dynamic Quantization", "Microscaling Quantization", "PyTorch Mixed Precision", "PyTorch Smooth Quantization", "PyTorch Static Quantization", "PyTorch Weight Only Quantization", "Torch", "TensorFlow Quantization", "Smooth Quant", "TensorFlow", "AutoTune", "Quantization", "Intel\u00ae Neural Compressor Documentation", "Contributor Covenant Code of Conduct", "Contribution Guidelines", "FX", "Neural Architecture Search", "Security Policy", "Intel\u00ae Neural Compressor", "Adaptor", "How to Add An Adaptor", "How to Support New Data Type, Like Int4, with a Few Line Changes", "Adaptor", "ONNX Runtime", "Torch Utils", "API Document Example", "APIs", "Benchmark", "Compression", "Config", "Mix Precision", "Model", "Objective", "Quantization", "Strategy", "Training", "Benchmarking", "Calibration Algorithms in Quantization", "INC Coding Conventions", "DataLoader", "Dataset", "Design", "Diagnosis", "Distillation", "Distillation for Quantization", "Distributed Training and Inference (Evaluation)", "Examples", "Export", "Frequently Asked Questions", "Framework YAML Configuration Files", "Getting Started", "Incompatible changes between v1.2 and v1.1", "Infrastructure of Intel\u00ae Neural Compressor", "Installation", "Legal Information", "LLMs Quantization Recipes", "Metrics", "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X", "Mixed Precision", "Model", "Microscaling Quantization", "Neural Coder", "AWS Amazon SageMaker Support", "BigDL Nano Support", "Intel CPU Platforms: Best Performance Setting", "Neural Coder as Python API", "Python Launcher", "Neural Coder for Quantization", "Supported Optimization Features", "v0.4", "Changelog", "neural_compressor_ext_lab", "Intel\u00ae Neural Compressor as JupyterLab Extension", "Making a new release of neural_compressor_ext_lab", "Changelog", "neural_compressor_ext_lab_alibaba", "Making a new release of neural_compressor_ext_lab_alibaba", "Change Log", "Neural Coder", "Welcome to your VS Code Extension", "Neural Insights", "Step by step example how to debug accuracy with Neural Insights", "Step by step example how to dump weights data for PyTorch model with Neural Insights", "Step by step example how to debug accuracy with Neural Insights", "Getting Started with Create React App", "What\u2019s Neural Solution?", "Get started", "Neural Solution API", "Design Doc for Optimization as a Service [WIP]", "Task request description", "Examples List", "An end-to-end example: quantize a custom model with Neural Solution", "An end-to-end example: quantize a Hugging Face model with Neural Solution", "An end-to-end example: quantize a Hugging Face model with Neural Solution gRPC API", "Client", "Objective", "Optimization Orchestration", "Pruning", "Full Publications/Events (82)", "Pythonic Style Access for Configurations", "Quantization", "Layer Wise Quantization (LWQ)", "Turn OFF Auto Mixed Precision during Quantization", "Weight Only Quantization (WOQ)", "Release", "SigOpt Strategy", "Smooth Quant", "TensorBoard", "Transform", "Tuning Strategies", "User Guide", "User YAML Configuration Files", "Validated Models", "Intel\u00ae Neural Compressor Documentation"], "terms": {"regist": [0, 13, 20, 27, 36, 47, 61, 67, 80, 102, 105, 124, 126, 131, 142, 143, 165, 181, 192, 195], "algorithm_registri": 0, "algorithm_typ": 0, "locat": [0, 27, 90, 95, 131, 150, 157, 161, 164, 172, 186, 190, 194, 197], "sourc": [0, 1, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 23, 25, 26, 27, 28, 29, 30, 32, 33, 34, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 71, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 101, 104, 140, 143, 157, 159, 161, 162, 164, 184], "decor": [0, 27, 36, 47, 61, 83, 101, 102, 105, 195], "all": [0, 2, 5, 6, 13, 20, 27, 29, 32, 34, 36, 38, 47, 61, 67, 71, 75, 83, 89, 92, 95, 96, 97, 99, 100, 104, 105, 106, 107, 124, 125, 126, 131, 135, 139, 143, 147, 155, 158, 159, 162, 163, 164, 165, 166, 169, 170, 172, 173, 177, 178, 179, 182, 183, 184, 186, 188, 189, 192, 194, 195], "subclass": [0, 13, 20, 27, 36, 47, 61, 105], "paramet": [0, 5, 6, 9, 10, 11, 13, 20, 23, 27, 29, 30, 32, 33, 34, 36, 37, 41, 45, 47, 49, 53, 61, 65, 67, 68, 71, 73, 74, 75, 78, 79, 80, 82, 83, 87, 89, 90, 91, 94, 95, 97, 101, 106, 125, 126, 129, 131, 138, 142, 143, 146, 158, 164, 165, 166, 167, 172, 177, 178, 183, 186, 187, 189, 191, 192, 194, 195, 197], "cl": [0, 13, 20, 27, 36, 47, 61, 83, 124], "The": [0, 5, 6, 9, 10, 11, 12, 13, 14, 15, 19, 20, 27, 29, 30, 31, 33, 34, 36, 37, 45, 47, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 65, 67, 68, 69, 71, 77, 78, 82, 83, 84, 86, 87, 88, 90, 91, 92, 94, 95, 96, 97, 99, 101, 102, 105, 106, 107, 108, 110, 114, 117, 120, 122, 123, 124, 125, 126, 128, 129, 131, 133, 135, 137, 138, 139, 141, 142, 143, 144, 145, 146, 149, 150, 152, 155, 157, 158, 159, 161, 162, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 177, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198], "str": [0, 6, 11, 12, 13, 20, 23, 27, 29, 30, 32, 34, 36, 64, 67, 71, 74, 75, 78, 80, 83, 84, 91, 92, 95, 124, 125, 126, 142, 175, 185, 193, 194], "registr": [0, 13, 20, 27], "name": [0, 5, 6, 11, 12, 13, 16, 20, 25, 27, 31, 36, 41, 45, 47, 49, 65, 67, 69, 71, 73, 74, 75, 80, 83, 87, 90, 91, 92, 93, 100, 101, 107, 124, 126, 128, 131, 133, 135, 140, 142, 143, 145, 146, 150, 157, 161, 165, 166, 172, 183, 186, 190, 191, 193, 195, 197, 198], "call": [0, 32, 95, 97, 101, 102, 105, 125, 137, 153, 155, 165, 183, 186, 192, 193, 194], "return": [0, 5, 9, 10, 13, 20, 23, 27, 29, 30, 32, 33, 34, 36, 37, 41, 45, 47, 49, 53, 61, 65, 67, 68, 71, 75, 80, 82, 83, 88, 92, 93, 96, 97, 101, 102, 106, 107, 125, 126, 131, 142, 145, 177, 178, 179, 181, 183, 186, 189, 192, 193, 195], "type": [0, 6, 11, 13, 20, 27, 29, 30, 32, 36, 45, 47, 53, 54, 61, 65, 67, 75, 82, 83, 87, 88, 89, 90, 91, 92, 93, 95, 105, 106, 126, 128, 131, 133, 135, 138, 143, 144, 146, 165, 167, 172, 173, 177, 178, 186, 187, 189, 191, 194, 195, 196, 197], "build": [0, 1, 3, 4, 40, 42, 44, 45, 46, 95, 105, 106, 107, 139, 145, 157, 159, 161, 162, 165, 184, 195], "dict": [0, 5, 6, 9, 10, 31, 32, 33, 34, 36, 37, 45, 49, 64, 67, 68, 69, 71, 73, 75, 82, 83, 91, 92, 93, 101, 106, 124, 133, 142, 183, 185, 186, 192, 193, 195], "algorithmschedul": 0, "conf": [0, 5, 6, 9, 10, 37, 47, 49, 50, 53, 54, 58, 60, 61, 65, 68, 101, 102, 104, 107, 122, 129, 136, 137, 143, 144, 145, 166, 168, 169, 182, 186, 187, 188, 189, 191, 192, 195], "control": [0, 6, 101, 143, 170, 183, 195], "differ": [0, 4, 6, 13, 27, 36, 45, 47, 77, 91, 92, 95, 97, 99, 101, 102, 106, 125, 126, 128, 129, 131, 132, 137, 138, 142, 143, 145, 157, 161, 166, 169, 172, 181, 183, 186, 189, 192, 193, 194, 195], "phase": [0, 95, 97, 102, 143, 183, 186, 188, 195], "base": [0, 6, 11, 13, 20, 27, 36, 38, 45, 46, 47, 58, 61, 65, 86, 88, 89, 91, 92, 96, 97, 102, 104, 105, 106, 107, 124, 126, 130, 131, 135, 143, 144, 152, 153, 155, 164, 167, 172, 175, 178, 179, 183, 184, 186, 189, 191, 192, 193, 195, 198], "fastbiascorrect": [1, 4], "threshold": [1, 69, 77, 142], "2": [1, 3, 5, 6, 12, 32, 34, 36, 47, 53, 83, 86, 87, 89, 90, 91, 93, 94, 95, 96, 97, 101, 104, 105, 123, 125, 126, 128, 129, 135, 138, 139, 140, 141, 142, 144, 146, 168, 174, 175, 177, 178, 179, 181, 183, 184, 186, 187, 189, 190, 191, 192, 194, 195, 196], "0": [1, 3, 6, 11, 14, 15, 18, 23, 27, 36, 47, 49, 54, 75, 78, 87, 88, 89, 91, 94, 96, 97, 101, 104, 124, 125, 126, 129, 131, 133, 134, 135, 139, 140, 141, 142, 143, 144, 146, 150, 152, 157, 161, 167, 177, 178, 183, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 197], "channel_axi": [1, 4], "1": [1, 3, 4, 5, 6, 11, 12, 14, 15, 18, 19, 23, 27, 32, 33, 34, 36, 47, 49, 67, 71, 78, 83, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 99, 101, 104, 105, 107, 123, 125, 126, 128, 129, 133, 135, 136, 139, 141, 142, 144, 146, 148, 150, 166, 167, 174, 175, 177, 178, 179, 181, 182, 183, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197], "fetch": [2, 106, 126, 177, 178, 179], "file": [2, 6, 9, 10, 11, 12, 13, 16, 26, 27, 32, 37, 47, 49, 82, 83, 91, 100, 102, 105, 106, 107, 131, 134, 137, 140, 142, 143, 145, 150, 159, 162, 163, 164, 165, 167, 168, 169, 170, 172, 173, 177, 178, 179, 181, 185, 186, 189, 193, 194], "init": [2, 126, 142, 195], "fast_bias_correct": [2, 6, 186], "smooth_quant": [2, 6, 124, 186, 192], "weight_correct": [2, 6, 186], "smoothquant": [3, 89, 91, 92, 94, 97, 104, 141, 184, 189, 196], "alpha": [3, 97, 124, 186, 195], "5": [3, 6, 15, 23, 36, 49, 89, 91, 94, 97, 105, 126, 133, 135, 139, 142, 143, 169, 174, 177, 178, 183, 185, 186, 189, 192, 194, 195, 197, 198], "fake": [3, 67, 91, 97, 143, 186, 189, 192], "input": [3, 6, 9, 10, 11, 12, 13, 15, 23, 26, 27, 36, 37, 41, 45, 49, 68, 73, 74, 75, 78, 80, 82, 83, 86, 90, 91, 92, 97, 102, 105, 106, 122, 123, 125, 126, 128, 129, 130, 131, 133, 135, 137, 142, 143, 144, 145, 147, 152, 183, 185, 186, 189, 192, 193, 194, 197], "channel": [3, 4, 6, 23, 27, 78, 87, 89, 91, 104, 105, 107, 138, 139, 146, 147, 149, 154, 169, 183, 189, 194, 198], "quantiz": [3, 5, 6, 9, 10, 23, 28, 54, 56, 58, 67, 68, 69, 75, 77, 78, 82, 83, 88, 94, 96, 105, 112, 124, 125, 126, 131, 132, 135, 137, 138, 142, 145, 147, 152, 154, 155, 158, 171, 173, 174, 176, 182, 184, 190, 193, 194, 195, 196, 197], "more": [3, 27, 87, 88, 89, 91, 92, 95, 97, 102, 103, 104, 106, 123, 124, 126, 129, 131, 133, 136, 138, 139, 141, 143, 144, 146, 147, 155, 159, 162, 167, 172, 181, 182, 183, 188, 189, 192, 195, 196, 198], "detail": [3, 27, 83, 84, 88, 89, 92, 93, 94, 95, 97, 99, 104, 106, 107, 123, 124, 129, 135, 136, 137, 141, 142, 143, 144, 147, 155, 164, 172, 173, 183, 189, 190, 191, 192, 193, 195, 196], "pleas": [3, 6, 11, 12, 13, 16, 36, 49, 89, 90, 91, 92, 93, 94, 97, 101, 102, 103, 104, 105, 122, 123, 126, 130, 131, 133, 139, 141, 142, 144, 147, 148, 152, 155, 171, 172, 173, 183, 186, 188, 189, 190, 191, 192, 195, 196], "refer": [3, 6, 11, 29, 30, 36, 49, 89, 90, 92, 93, 94, 95, 101, 104, 105, 106, 122, 125, 126, 128, 130, 131, 133, 137, 139, 140, 142, 143, 144, 147, 152, 155, 166, 167, 169, 171, 172, 173, 181, 185, 187, 190, 194, 195], "accur": [3, 90, 91, 97, 183, 189, 192], "effici": [3, 90, 91, 97, 102, 104, 123, 125, 129, 147, 172, 182, 183, 184, 189, 192, 195], "post": [3, 6, 9, 10, 49, 87, 89, 90, 91, 92, 94, 96, 97, 99, 104, 105, 106, 128, 130, 131, 133, 138, 139, 146, 147, 153, 164, 174, 183, 184, 187, 189, 192, 193, 195], "train": [3, 6, 9, 10, 11, 13, 27, 28, 49, 71, 87, 88, 89, 90, 91, 92, 94, 96, 102, 104, 105, 106, 112, 126, 128, 129, 130, 133, 138, 144, 146, 147, 153, 164, 169, 177, 182, 184, 187, 189, 191, 192, 195, 197], "larg": [3, 87, 89, 91, 92, 94, 95, 97, 104, 125, 129, 143, 146, 184, 187, 189, 192, 198], "languag": [3, 29, 87, 89, 91, 92, 94, 95, 97, 99, 104, 133, 146, 168, 184, 187, 189, 192], "model": [3, 5, 6, 9, 10, 11, 13, 27, 28, 36, 37, 47, 49, 50, 53, 54, 58, 60, 61, 67, 68, 73, 74, 75, 78, 80, 82, 83, 85, 86, 87, 88, 91, 92, 93, 94, 95, 97, 100, 101, 102, 104, 105, 107, 112, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 137, 138, 140, 142, 144, 147, 152, 154, 155, 158, 164, 166, 171, 173, 174, 175, 176, 181, 182, 184, 186, 190, 191, 193, 194, 195, 196, 197], "spiq": [3, 97, 192], "data": [3, 6, 9, 10, 28, 37, 49, 53, 65, 67, 68, 71, 75, 80, 83, 86, 87, 88, 90, 91, 92, 95, 97, 104, 105, 123, 125, 126, 131, 135, 136, 139, 142, 143, 144, 146, 166, 167, 169, 172, 177, 178, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196], "free": [3, 9, 10, 49, 89, 94, 97, 99, 153, 158, 166, 174, 181, 191, 192], "per": [3, 5, 6, 77, 87, 89, 91, 105, 107, 125, 146, 172, 183, 188, 189, 198], "static": [3, 6, 49, 65, 75, 92, 105, 106, 107, 128, 133, 138, 143, 147, 152, 153, 154, 155, 158, 164, 167, 175, 177, 178, 179, 187, 192, 195, 198], "For": [3, 6, 13, 27, 33, 34, 36, 37, 49, 83, 89, 92, 93, 94, 97, 99, 101, 103, 105, 107, 129, 130, 131, 133, 135, 138, 147, 149, 150, 152, 155, 166, 167, 172, 183, 188, 189, 192, 193, 195, 197, 198], "torch": [3, 6, 37, 49, 75, 78, 82, 86, 87, 88, 89, 90, 91, 96, 97, 101, 104, 107, 108, 129, 131, 133, 143, 144, 145, 146, 147, 152, 155, 167, 186, 189, 192, 193], "backend": [3, 6, 7, 8, 11, 12, 14, 15, 16, 17, 18, 22, 24, 27, 37, 38, 39, 41, 59, 88, 91, 92, 101, 107, 128, 131, 137, 138, 143, 144, 153, 172, 177, 178, 179, 185, 189, 194, 195, 197], "we": [3, 4, 5, 6, 29, 32, 56, 86, 89, 90, 91, 92, 94, 95, 96, 97, 99, 101, 105, 106, 107, 124, 125, 128, 131, 133, 135, 141, 142, 143, 151, 152, 155, 159, 162, 164, 165, 167, 170, 177, 178, 179, 181, 182, 183, 185, 186, 187, 189, 190, 191, 192, 193, 195, 196], "onli": [3, 4, 5, 6, 11, 49, 59, 67, 75, 83, 88, 92, 96, 105, 106, 107, 122, 123, 124, 125, 128, 129, 131, 134, 135, 141, 143, 144, 152, 165, 183, 184, 185, 186, 187, 192, 193, 195, 196, 197], "handl": [3, 79, 101, 103, 124, 125, 172, 192], "layer": [3, 6, 69, 71, 83, 89, 90, 91, 92, 97, 104, 105, 106, 107, 130, 138, 167, 183, 189, 190, 196], "whose": [3, 45, 137, 192, 195], "smooth": [3, 6, 92, 124, 183, 195], "scale": [3, 4, 23, 27, 86, 87, 89, 90, 91, 95, 97, 146, 186, 189, 191, 192, 194, 195], "could": [3, 9, 10, 13, 37, 49, 68, 88, 90, 91, 93, 95, 97, 99, 101, 130, 143, 182, 183, 186, 189, 192, 196], "absorb": [3, 91, 189], "support": [3, 6, 9, 10, 11, 13, 20, 23, 27, 28, 36, 37, 41, 47, 49, 59, 65, 68, 71, 77, 78, 83, 85, 86, 90, 93, 96, 97, 104, 106, 124, 141, 143, 147, 152, 155, 158, 164, 171, 172, 175, 184, 188, 191, 195, 196], "other": [3, 34, 45, 87, 92, 95, 97, 99, 101, 106, 107, 124, 128, 135, 138, 140, 143, 145, 146, 167, 181, 183, 186, 192, 194, 195, 198], "later": [3, 86, 88, 124, 171, 172, 193], "onnx": [3, 6, 37, 44, 73, 74, 75, 81, 100, 104, 105, 106, 108, 125, 128, 132, 133, 135, 136, 138, 144, 145, 146, 149, 154, 155, 167, 184, 185, 189, 190, 192, 195], "insert": [3, 90, 91, 92, 94, 97, 101, 106, 125, 138, 143, 147, 183, 186, 188, 189, 192, 193], "mul": [3, 91, 133, 189, 192], "befor": [3, 6, 11, 91, 97, 100, 107, 125, 126, 129, 130, 131, 134, 135, 143, 159, 162, 168, 169, 186, 189, 191, 193, 195], "conv": [3, 6, 101, 106, 107, 143, 183, 185, 186, 195], "linear": [3, 6, 89, 90, 91, 97, 101, 129, 133, 143, 183, 189, 192, 195], "op": [3, 6, 54, 56, 58, 65, 66, 67, 73, 75, 77, 83, 88, 89, 92, 97, 104, 105, 106, 107, 128, 135, 143, 144, 168, 169, 183, 186, 188, 190, 192, 193, 195, 197], "fuse": [3, 101, 192, 193], "kernel": [3, 6, 91, 105, 106, 195], "futur": [3, 9, 10, 92, 138, 141, 143, 155, 177, 178, 179, 196], "weightcorrect": 4, "ep": [4, 144], "1e": [4, 97, 192, 197], "05": [4, 6, 36, 142, 192, 198], "correct": [4, 6, 32, 33, 34, 36, 99, 147], "int8": [4, 5, 6, 23, 65, 67, 73, 74, 75, 82, 83, 87, 89, 91, 92, 93, 95, 97, 100, 101, 104, 105, 106, 107, 122, 126, 130, 135, 141, 143, 144, 146, 149, 152, 154, 155, 158, 164, 167, 169, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 197], "weight": [4, 6, 36, 49, 56, 65, 67, 75, 83, 84, 86, 89, 90, 92, 93, 94, 95, 96, 105, 106, 107, 123, 128, 130, 135, 137, 141, 143, 166, 177, 181, 183, 184, 185, 186, 187, 192, 193, 195, 196, 197], "distribut": [4, 6, 77, 91, 95, 97, 104, 106, 125, 129, 139, 159, 162, 166, 169, 177, 184, 186, 189, 190, 192, 196, 198], "close": [4, 123, 173], "fp32": [4, 6, 9, 10, 36, 54, 58, 65, 71, 74, 75, 78, 82, 83, 88, 89, 90, 91, 92, 93, 95, 97, 100, 105, 107, 128, 135, 136, 141, 142, 143, 144, 154, 166, 167, 168, 169, 185, 186, 188, 189, 190, 191, 192, 193, 195, 197, 198], "r": [4, 89, 90, 91, 93, 95, 97, 128, 139, 165, 166, 168, 169, 171, 172, 186, 198], "w_int8": 4, "u": [4, 147, 166, 171], "w_fp32": 4, "i": [4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 18, 20, 23, 27, 29, 32, 34, 36, 37, 47, 49, 54, 59, 67, 68, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 99, 100, 101, 102, 104, 105, 106, 107, 108, 110, 114, 117, 120, 122, 123, 124, 125, 126, 128, 129, 130, 131, 133, 134, 135, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 155, 157, 158, 159, 161, 162, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 177, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198], "varianc": [4, 128], "ratio": [4, 6, 23, 27, 126, 141, 143, 167, 183, 194, 198], "between": [4, 6, 27, 33, 36, 83, 87, 91, 92, 95, 97, 101, 105, 106, 107, 123, 128, 129, 138, 142, 143, 146, 155, 186, 189, 190, 191, 192, 194, 195], "wise": [4, 6, 53, 54, 58, 91, 104, 106, 138, 169, 183, 189, 192, 193, 195, 196, 197], "": [4, 6, 13, 26, 27, 34, 36, 37, 41, 49, 80, 83, 86, 88, 89, 90, 91, 93, 95, 97, 99, 100, 102, 106, 107, 124, 128, 129, 131, 133, 135, 138, 143, 144, 152, 155, 157, 161, 164, 167, 169, 172, 182, 183, 184, 185, 186, 189, 190, 191, 192, 195, 196, 197, 198], "equal": [4, 83, 87, 146, 183, 189], "minim": [4, 53, 90, 91, 95, 97, 106, 107, 123, 129, 132, 142, 143, 157, 161, 183, 186, 195], "round": [4, 86, 91, 92, 97, 104, 184, 186, 189, 192], "scale_c": 4, "shift": [4, 23, 165, 194], "notic": [4, 88, 91, 140, 144, 167, 190], "can": [4, 6, 9, 10, 13, 27, 32, 34, 36, 37, 47, 49, 68, 83, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 101, 102, 104, 105, 106, 107, 122, 124, 125, 126, 128, 129, 130, 131, 133, 135, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 155, 157, 158, 159, 161, 162, 164, 165, 167, 169, 170, 171, 172, 174, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198], "chang": [4, 6, 56, 83, 92, 100, 106, 125, 131, 134, 140, 143, 147, 157, 158, 161, 164, 170, 183, 193, 194, 195], "first": [4, 6, 11, 32, 54, 65, 83, 87, 88, 91, 97, 101, 102, 104, 105, 106, 107, 126, 128, 139, 144, 146, 149, 158, 159, 162, 165, 167, 168, 169, 185, 186, 188, 189, 191, 192, 193, 195, 197], "an": [4, 6, 13, 27, 28, 29, 33, 34, 37, 49, 68, 83, 85, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 99, 101, 102, 104, 105, 107, 123, 125, 126, 127, 128, 133, 141, 142, 143, 144, 146, 147, 151, 152, 155, 164, 167, 168, 169, 172, 175, 181, 183, 184, 186, 189, 191, 192, 193, 194, 195], "empir": 4, "solut": [4, 89, 91, 94, 97, 104, 105, 106, 134, 149, 153, 158, 184, 189, 190, 192, 195, 196], "make": [4, 83, 89, 91, 94, 97, 99, 105, 106, 122, 124, 125, 135, 142, 143, 152, 157, 161, 164, 166, 183, 186, 187, 188, 189, 191, 192, 195], "thi": [4, 6, 9, 10, 11, 12, 13, 14, 15, 16, 18, 27, 29, 32, 33, 34, 36, 37, 47, 49, 53, 58, 67, 68, 82, 83, 88, 89, 90, 91, 93, 94, 95, 96, 97, 99, 100, 101, 102, 105, 106, 107, 123, 124, 125, 126, 129, 130, 131, 133, 134, 135, 138, 140, 141, 142, 143, 144, 145, 147, 149, 150, 152, 153, 155, 157, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 177, 178, 179, 183, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196], "don": [4, 6, 89, 90, 101, 170, 183, 195], "t": [4, 6, 27, 34, 88, 89, 90, 95, 101, 105, 124, 128, 129, 131, 143, 144, 165, 170, 183, 186, 189, 195, 197], "min": [4, 6, 83, 87, 91, 95, 97, 128, 146, 167, 169, 183, 186, 189, 192, 194, 195], "max": [4, 6, 27, 33, 34, 53, 83, 87, 91, 95, 97, 104, 128, 139, 143, 146, 167, 169, 183, 186, 189, 192, 194, 195], "valu": [4, 5, 6, 9, 10, 11, 14, 15, 23, 27, 32, 36, 37, 49, 53, 58, 65, 67, 68, 69, 71, 83, 86, 87, 88, 89, 91, 94, 95, 97, 101, 106, 107, 123, 126, 128, 135, 142, 143, 144, 146, 150, 167, 169, 175, 181, 183, 185, 186, 189, 190, 192, 194, 195, 197], "us": [5, 6, 9, 10, 11, 12, 13, 14, 15, 18, 26, 27, 29, 30, 32, 36, 47, 49, 53, 56, 58, 61, 65, 67, 68, 69, 70, 71, 74, 75, 76, 78, 83, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 99, 100, 101, 102, 104, 105, 106, 122, 123, 124, 126, 128, 129, 130, 131, 133, 135, 137, 139, 140, 143, 144, 145, 146, 147, 148, 149, 151, 152, 155, 157, 159, 161, 162, 164, 166, 167, 168, 169, 170, 177, 178, 179, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 197, 198], "evalu": [5, 9, 10, 11, 29, 32, 33, 34, 36, 37, 47, 49, 68, 71, 92, 94, 95, 96, 97, 102, 105, 106, 124, 126, 129, 130, 137, 138, 141, 142, 143, 144, 147, 153, 155, 158, 164, 181, 183, 186, 191, 192, 193, 195, 197], "perform": [5, 6, 11, 23, 36, 47, 49, 54, 58, 86, 88, 90, 91, 93, 95, 96, 97, 100, 101, 102, 105, 106, 122, 126, 127, 128, 130, 132, 133, 138, 139, 142, 143, 144, 145, 147, 149, 153, 155, 158, 164, 170, 181, 182, 183, 184, 185, 186, 187, 188, 189, 192, 193, 195, 197, 198], "set_env_var": 5, "env_var": 5, "overwrite_exist": 5, "fals": [5, 6, 11, 13, 23, 27, 32, 36, 47, 49, 71, 78, 82, 83, 89, 91, 93, 95, 96, 105, 106, 125, 126, 135, 142, 143, 157, 161, 167, 175, 178, 179, 185, 186, 189, 192, 193, 194, 195, 197], "set": [5, 6, 9, 10, 11, 13, 16, 27, 32, 36, 37, 45, 49, 68, 80, 83, 88, 89, 91, 92, 93, 94, 96, 97, 99, 102, 104, 106, 122, 125, 126, 129, 131, 133, 135, 137, 138, 142, 143, 144, 147, 149, 151, 165, 166, 167, 168, 169, 170, 174, 177, 183, 185, 186, 189, 191, 192, 195, 197], "specifi": [5, 6, 9, 10, 27, 32, 36, 37, 49, 68, 82, 83, 97, 106, 107, 131, 135, 142, 143, 152, 166, 172, 176, 177, 178, 179, 181, 183, 185, 189, 194, 195, 197], "environ": [5, 92, 99, 104, 122, 157, 161, 164, 172, 175, 177, 178, 179, 195], "variabl": [5, 6, 13, 53, 67, 183, 195], "new": [5, 13, 27, 47, 88, 89, 90, 91, 97, 100, 106, 131, 143, 144, 158, 164, 165, 166, 167, 173, 174, 177, 178, 183, 184, 186, 189, 190, 191, 194, 196, 197], "env": [5, 134, 177, 178, 179], "two": [5, 13, 18, 32, 59, 83, 87, 88, 90, 91, 94, 96, 97, 100, 101, 102, 124, 125, 126, 129, 131, 133, 135, 143, 144, 146, 171, 172, 174, 183, 186, 188, 189, 191, 192, 195, 197], "case": [5, 6, 26, 27, 47, 91, 95, 97, 107, 124, 125, 129, 130, 131, 135, 137, 142, 148, 152, 164, 165, 166, 169, 175, 178, 179, 181, 183, 184, 186, 189, 190, 192, 194, 196, 197, 198], "exist": [5, 45, 83, 88, 92, 133, 142, 151, 195], "alreadi": [5, 13, 26, 88, 92, 105, 126, 138, 159, 162, 166, 175, 195], "param": [5, 36, 53, 83, 105, 145, 195], "true": [5, 6, 11, 13, 14, 26, 27, 30, 36, 47, 49, 64, 71, 75, 78, 82, 83, 86, 89, 90, 91, 92, 93, 95, 96, 97, 104, 106, 125, 126, 128, 131, 135, 142, 143, 147, 150, 151, 166, 167, 168, 169, 175, 177, 185, 186, 187, 189, 192, 193, 194, 195, 197], "set_all_env_var": 5, "configur": [5, 6, 9, 10, 13, 16, 36, 37, 47, 49, 58, 67, 68, 70, 71, 75, 81, 82, 92, 96, 101, 102, 105, 106, 126, 128, 143, 151, 165, 172, 177, 178, 179, 181, 183, 186, 189, 190, 192, 194, 195, 198], "neural": [5, 6, 23, 24, 27, 28, 35, 36, 37, 41, 48, 49, 56, 57, 63, 72, 80, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 100, 105, 106, 107, 122, 123, 124, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 140, 141, 144, 145, 146, 148, 149, 152, 154, 155, 157, 159, 161, 162, 163, 175, 181, 182, 184, 186, 189, 190, 192, 193, 194, 195, 197, 198], "compressor": [5, 6, 23, 24, 27, 28, 35, 36, 37, 41, 48, 49, 57, 63, 72, 80, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 100, 102, 105, 106, 107, 122, 123, 124, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 140, 141, 144, 145, 146, 147, 148, 152, 154, 155, 157, 159, 161, 162, 163, 166, 167, 168, 169, 171, 172, 179, 181, 182, 183, 184, 186, 189, 190, 192, 193, 194, 195, 196, 197, 198], "physic": [5, 99, 122, 172], "core": [5, 6, 100, 122, 140, 157, 161, 172, 198], "get_architectur": 5, "get": [5, 6, 27, 36, 45, 49, 58, 65, 67, 71, 75, 78, 80, 83, 89, 92, 97, 106, 123, 134, 138, 139, 141, 143, 150, 167, 169, 177, 178, 184, 189, 192, 195, 196, 199], "architectur": [5, 88, 91, 97, 104, 122, 129, 143, 171, 183, 184, 189, 196], "system": [5, 83, 87, 122, 146, 150, 183, 198], "get_threads_per_cor": 5, "thread": [5, 6, 125, 174], "get_thread": 5, "list": [5, 6, 9, 10, 11, 23, 27, 29, 30, 32, 33, 34, 36, 37, 45, 49, 64, 68, 69, 74, 75, 83, 89, 92, 94, 95, 101, 104, 105, 126, 133, 135, 139, 141, 143, 147, 152, 154, 157, 158, 161, 169, 172, 174, 175, 181, 183, 185, 186, 188, 192, 193, 195], "get_physical_id": 5, "socket": [5, 83, 172, 174, 198], "get_core_id": 5, "id": [5, 26, 29, 31, 32, 33, 34, 142, 172, 173, 177, 178, 179, 191, 195], "get_bounded_thread": 5, "core_id": 5, "bind": 5, "instanc": [5, 6, 9, 10, 33, 34, 36, 37, 49, 53, 67, 68, 80, 83, 91, 99, 100, 101, 105, 122, 143, 149, 155, 189, 195, 197, 198], "run_inst": 5, "b_dataload": [5, 6, 122, 143], "none": [5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 18, 23, 27, 32, 36, 37, 47, 49, 50, 53, 54, 58, 60, 61, 65, 68, 69, 71, 74, 75, 78, 80, 82, 83, 87, 91, 92, 95, 104, 105, 106, 125, 126, 142, 146, 167, 186, 189, 193, 194, 195], "b_func": [5, 122], "run": [5, 6, 9, 10, 26, 37, 49, 53, 68, 91, 92, 95, 97, 104, 105, 122, 131, 134, 135, 143, 147, 149, 151, 152, 153, 155, 157, 158, 159, 161, 162, 164, 172, 173, 174, 175, 177, 178, 179, 184, 186, 189, 190, 191, 193, 195, 197], "object": [5, 6, 9, 10, 11, 12, 13, 27, 28, 32, 36, 37, 45, 46, 49, 53, 67, 68, 71, 82, 83, 90, 92, 95, 101, 102, 106, 112, 122, 124, 125, 126, 134, 142, 143, 145, 182, 183, 185, 186, 194, 195, 196, 198], "benchmarkconfig": [5, 6, 122, 128, 143], "contain": [5, 6, 9, 10, 11, 12, 13, 32, 33, 34, 37, 49, 68, 71, 75, 82, 91, 95, 104, 123, 126, 129, 138, 142, 165, 172, 177, 178, 179, 183, 189, 193, 195, 196], "accuraci": [5, 6, 9, 10, 36, 37, 47, 49, 54, 68, 80, 87, 89, 90, 91, 95, 96, 101, 104, 106, 107, 123, 125, 126, 128, 130, 131, 132, 133, 142, 143, 146, 155, 164, 166, 173, 174, 177, 178, 181, 182, 183, 184, 185, 189, 190, 191, 192, 193, 196, 197, 198], "goal": [5, 37, 49, 96, 97, 106, 125, 182, 186, 195], "tune": [5, 6, 9, 10, 11, 13, 37, 47, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 64, 65, 66, 67, 68, 83, 88, 89, 90, 91, 92, 96, 105, 106, 123, 124, 125, 126, 128, 131, 138, 140, 143, 144, 164, 168, 171, 173, 174, 181, 183, 184, 188, 190, 191, 193, 197], "prefer": [5, 49, 91, 97, 183, 189], "calibr": [5, 6, 9, 10, 49, 77, 90, 91, 92, 95, 97, 105, 107, 126, 137, 138, 183, 186, 189, 195, 196, 197], "space": [5, 6, 9, 10, 34, 37, 49, 53, 58, 65, 92, 96, 97, 99, 100, 102, 105, 106, 107, 124, 183, 186, 192, 197], "etc": [5, 26, 34, 37, 49, 82, 104, 129, 138, 166, 170, 183, 191, 195], "dataload": [5, 9, 10, 11, 22, 49, 68, 71, 95, 101, 104, 105, 106, 128, 129, 130, 131, 136, 137, 143, 144, 166, 167, 182, 183, 186, 187, 188, 189, 192, 193, 194, 196, 197], "framework": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 20, 22, 24, 27, 36, 37, 38, 39, 41, 59, 65, 71, 88, 90, 95, 96, 97, 104, 105, 107, 123, 124, 128, 131, 132, 136, 137, 138, 139, 142, 143, 144, 166, 167, 183, 184, 186, 190, 193, 194, 195, 196, 197, 198], "custom": [5, 6, 36, 47, 82, 92, 96, 97, 122, 129, 130, 147, 170, 171, 172, 176, 178, 179, 183, 184, 189, 191], "If": [5, 6, 9, 10, 13, 27, 37, 49, 68, 92, 95, 97, 100, 101, 106, 122, 124, 125, 126, 131, 139, 140, 142, 143, 150, 158, 159, 162, 164, 170, 175, 181, 183, 186, 189, 191, 192, 193, 194, 195], "user": [5, 6, 9, 10, 13, 16, 20, 27, 36, 37, 47, 49, 54, 67, 68, 83, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 101, 102, 104, 105, 106, 107, 112, 122, 124, 125, 129, 130, 133, 135, 138, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 155, 158, 164, 171, 172, 173, 174, 177, 178, 179, 181, 182, 183, 184, 186, 187, 188, 190, 192, 193, 194, 195, 199], "pass": [5, 36, 49, 82, 83, 91, 97, 100, 101, 105, 122, 126, 129, 130, 131, 137, 142, 143, 165, 172, 183, 185, 186, 188, 192, 197], "need": [5, 6, 9, 10, 13, 20, 27, 36, 37, 47, 49, 58, 68, 75, 82, 83, 91, 94, 96, 97, 101, 105, 124, 125, 126, 128, 129, 131, 138, 143, 147, 149, 150, 153, 157, 158, 159, 161, 162, 164, 165, 166, 167, 168, 169, 171, 175, 177, 183, 185, 186, 187, 188, 189, 190, 192, 194, 195, 197], "generate_prefix": 5, "core_list": 5, "gener": [5, 9, 10, 13, 14, 15, 16, 27, 29, 37, 49, 53, 68, 87, 88, 89, 91, 92, 93, 97, 100, 101, 105, 107, 125, 129, 142, 143, 144, 146, 147, 152, 157, 159, 161, 162, 164, 166, 167, 181, 183, 184, 186, 188, 189, 192, 193, 194, 195], "command": [5, 68, 128, 131, 147, 149, 152, 157, 161, 165, 166, 168, 169, 170, 172], "prefix": [5, 147, 152, 193], "numactl": [5, 134, 150, 158], "index": [5, 6, 13, 83, 97, 126, 142, 165, 169, 189, 192], "bound": [5, 27, 32, 53, 142, 194], "specif": [5, 6, 11, 12, 13, 14, 18, 20, 36, 49, 80, 87, 88, 90, 91, 92, 95, 99, 102, 105, 106, 123, 124, 125, 128, 129, 135, 137, 141, 142, 143, 144, 145, 146, 147, 151, 152, 154, 158, 164, 166, 172, 181, 183, 185, 189, 195, 197], "call_on": 5, "cmd": 5, "log_fil": 5, "execut": [5, 6, 49, 50, 52, 68, 71, 82, 83, 90, 91, 97, 128, 129, 130, 143, 144, 149, 150, 157, 158, 164, 165, 166, 167, 171, 174, 182, 183, 186, 189, 191, 195, 198], "one": [5, 27, 29, 32, 36, 88, 91, 92, 95, 96, 97, 102, 105, 123, 129, 130, 131, 135, 138, 139, 142, 143, 144, 147, 148, 152, 153, 155, 157, 158, 161, 164, 165, 166, 169, 170, 171, 172, 174, 181, 182, 183, 185, 186, 187, 189, 190, 192, 194, 195], "dump": [5, 75, 83, 95, 97, 100, 169, 186, 190, 193], "log": [5, 79, 101, 155, 177, 178, 179, 191, 193, 195], "window": [5, 122, 139, 164, 165], "config_inst": 5, "raw_cmd": 5, "multi": [5, 32, 36, 49, 102, 125, 126, 138, 143, 181, 183, 186, 195], "trigger": 5, "sub": [5, 102, 124, 195], "process": [5, 6, 9, 10, 11, 12, 13, 23, 27, 37, 49, 50, 52, 53, 68, 82, 83, 86, 87, 90, 94, 95, 96, 97, 102, 105, 106, 107, 123, 125, 126, 129, 130, 131, 133, 143, 146, 148, 169, 171, 172, 174, 182, 183, 186, 187, 189, 192, 193, 194, 197], "raw": [5, 12, 16, 19, 58, 142, 168, 195], "summary_benchmark": 5, "summari": [5, 68, 128, 159, 162, 193, 198], "profil": [5, 6, 28], "benchmark_with_raw_cmd": 5, "string": [5, 6, 13, 29, 32, 41, 45, 71, 80, 83, 95, 142, 194], "exampl": [5, 6, 11, 12, 13, 23, 27, 32, 33, 34, 36, 37, 47, 49, 67, 68, 82, 83, 89, 95, 96, 99, 104, 106, 107, 112, 137, 138, 147, 150, 151, 152, 155, 172, 175, 188, 190, 194, 195, 196, 199], "accord": [5, 6, 11, 12, 13, 27, 56, 58, 71, 95, 96, 97, 102, 105, 126, 131, 167, 172, 177, 178, 179, 183, 188, 192, 194, 195], "config": [5, 9, 10, 11, 28, 37, 65, 66, 67, 68, 71, 82, 83, 86, 88, 90, 91, 92, 93, 102, 104, 106, 107, 112, 122, 124, 125, 128, 129, 130, 131, 133, 136, 138, 142, 143, 144, 145, 166, 167, 182, 183, 185, 186, 188, 189, 191, 193, 195], "from": [5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 18, 23, 29, 32, 33, 34, 37, 45, 47, 49, 65, 67, 68, 71, 73, 74, 75, 78, 82, 83, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 99, 100, 101, 102, 105, 107, 122, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 136, 138, 141, 142, 144, 145, 146, 147, 151, 152, 153, 155, 165, 167, 169, 170, 174, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196], "import": [5, 6, 37, 47, 49, 68, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 101, 102, 104, 107, 122, 125, 126, 128, 129, 130, 131, 133, 136, 142, 143, 144, 145, 146, 147, 151, 153, 166, 167, 175, 181, 182, 183, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196], "fit_with_raw_cmd": 5, "iter": [5, 6, 9, 10, 13, 14, 37, 49, 68, 71, 91, 95, 96, 101, 102, 105, 122, 125, 126, 143, 183, 185, 186, 192, 193, 195, 197], "100": [5, 6, 13, 95, 97, 122, 126, 131, 137, 139, 143, 169, 185, 186, 194, 195, 197, 198], "cores_per_inst": [5, 6, 122, 143, 185], "4": [5, 6, 20, 23, 27, 29, 30, 32, 67, 86, 87, 89, 90, 91, 92, 97, 99, 104, 105, 107, 122, 131, 132, 135, 138, 139, 142, 143, 146, 152, 172, 174, 178, 183, 186, 189, 192, 194, 195, 198], "num_of_inst": [5, 6, 122, 143, 185], "7": [5, 6, 47, 89, 91, 94, 97, 107, 122, 134, 135, 143, 183, 186, 190, 192, 195, 198], "test": [5, 6, 27, 100, 104, 128, 139, 172, 177, 198], "py": [5, 6, 30, 32, 33, 34, 93, 101, 105, 124, 128, 131, 139, 143, 149, 151, 152, 153, 159, 162, 166, 168, 169, 171, 172, 174, 175, 177, 178, 179, 186, 190, 193], "fit": [5, 6, 37, 49, 53, 68, 101, 104, 122, 125, 126, 128, 131, 136, 137, 142, 143, 144, 145, 166, 167, 183, 186, 187, 188, 189], "pb": [5, 6, 37, 45, 49, 95, 122, 131, 136, 143, 145, 166, 169, 177, 193, 198], "eval_dataload": [5, 6, 9, 10, 37, 49, 50, 53, 54, 58, 60, 61, 68, 122, 137, 142, 143, 166, 186, 187, 195], "x": [6, 27, 53, 96, 97, 123, 124, 128, 131, 144, 145, 172, 173, 177, 178, 180, 186, 187, 192, 193, 194, 196], "dotdict": [6, 47, 83], "access": [6, 78, 83, 159, 162, 166], "yaml": [6, 9, 10, 11, 13, 82, 83, 105, 107, 137, 142, 143, 181, 185, 193, 194], "attribut": [6, 83, 105, 125, 135, 137, 143, 185, 197], "instead": [6, 83, 90, 150, 152, 155, 170, 183, 189], "dictionari": [6, 26, 32, 83], "notat": [6, 83], "option": [6, 9, 10, 11, 27, 32, 36, 37, 49, 65, 67, 68, 74, 75, 76, 78, 83, 91, 92, 95, 97, 106, 107, 124, 125, 126, 135, 139, 143, 158, 172, 175, 177, 178, 179, 183, 186, 189, 191, 192, 194, 195, 197], "random_se": [6, 53, 143, 197], "1978": 6, "workspac": [6, 82, 83, 145, 172, 177, 178, 179], "default_workspac": 6, "resume_from": [6, 83], "tensorboard": [6, 71, 83, 105, 143, 167], "global": [6, 67, 83, 91, 92, 93, 101, 143, 183, 185, 195], "creat": [6, 11, 13, 32, 65, 67, 71, 97, 99, 102, 105, 126, 145, 157, 159, 161, 162, 165, 177, 178, 179, 183, 186, 191, 193, 195, 196], "you": [6, 11, 36, 49, 100, 101, 106, 124, 125, 126, 128, 131, 139, 140, 142, 144, 147, 149, 150, 152, 157, 161, 164, 165, 166, 167, 168, 169, 170, 172, 183, 186, 189, 190, 191, 192, 193, 196], "want": [6, 11, 54, 68, 101, 105, 125, 126, 131, 143, 152, 164, 165, 172, 181, 186, 189, 191, 193, 195], "should": [6, 9, 10, 11, 13, 27, 30, 36, 37, 49, 68, 75, 83, 90, 92, 93, 94, 95, 97, 101, 102, 105, 106, 107, 126, 129, 131, 142, 143, 150, 159, 162, 164, 166, 167, 181, 183, 186, 189, 194, 195, 197], "function": [6, 9, 10, 12, 76, 88, 90, 91, 92, 95, 97, 100, 101, 102, 105, 106, 107, 122, 125, 129, 130, 133, 137, 138, 141, 142, 143, 144, 155, 165, 171, 172, 183, 186, 189, 190, 191, 192, 193, 195, 196], "util": [6, 28, 30, 57, 95, 106, 107, 108, 123, 124, 131, 143, 147, 167, 183, 186, 195, 196], "set_random_se": [6, 83], "seed": [6, 83, 91, 143, 197], "int": [6, 11, 12, 23, 27, 30, 32, 36, 67, 74, 75, 78, 83, 91, 95, 104, 124, 125, 126, 142, 143, 175, 185, 189, 194], "set_workspac": [6, 83], "set_resume_from": [6, 83], "set_tensorboard": [6, 83], "bool": [6, 11, 13, 23, 27, 30, 36, 64, 75, 78, 82, 83, 91, 92, 125, 126, 142, 175, 185, 194], "random": [6, 23, 27, 53, 57, 83, 91, 102, 143, 183, 185, 194, 197], "default": [6, 9, 10, 11, 12, 13, 23, 27, 29, 36, 45, 67, 71, 74, 75, 78, 83, 87, 88, 89, 91, 92, 95, 96, 101, 105, 124, 125, 126, 135, 138, 142, 143, 144, 146, 152, 155, 157, 161, 169, 172, 177, 178, 179, 181, 183, 185, 186, 188, 189, 191, 192, 194, 195, 197], "directori": [6, 12, 13, 45, 78, 80, 82, 83, 126, 131, 134, 157, 159, 161, 162, 168, 170, 193], "where": [6, 32, 36, 67, 83, 97, 107, 123, 128, 129, 157, 161, 165, 192, 193], "intermedi": [6, 97, 101, 138, 186], "histori": [6, 82, 83, 164, 168, 195], "ar": [6, 11, 27, 32, 36, 50, 52, 53, 67, 71, 82, 83, 86, 87, 88, 90, 91, 92, 94, 95, 97, 99, 100, 101, 102, 105, 106, 124, 125, 126, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 140, 141, 142, 143, 144, 146, 147, 150, 152, 155, 158, 164, 166, 167, 169, 170, 171, 172, 175, 181, 182, 183, 184, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197], "store": [6, 13, 137], "nc_workspac": [6, 167, 168], "format": [6, 11, 12, 13, 32, 65, 75, 78, 87, 88, 90, 95, 97, 104, 106, 107, 124, 126, 131, 133, 142, 143, 144, 145, 146, 147, 169, 172, 184, 186, 189, 190], "datetim": 6, "now": [6, 27, 101, 102, 107, 126, 131, 155, 185, 194, 195], "strftime": 6, "y": [6, 27, 53, 97, 124, 128, 134, 150, 192, 194], "m": [6, 100, 129, 139, 147, 149, 152, 155, 159, 162, 172, 183, 198], "d_": 6, "h": [6, 27, 131, 172, 173, 177, 178, 179, 194], "resum": [6, 9, 10, 50, 53, 54, 58, 60, 61], "wa": [6, 87, 89, 105, 143, 146, 169, 170, 173, 184, 195], "automat": [6, 13, 16, 23, 92, 95, 101, 104, 122, 126, 138, 143, 144, 147, 149, 152, 153, 155, 157, 158, 159, 161, 162, 164, 171, 174, 182, 183, 186, 192, 194, 195], "save": [6, 13, 45, 49, 68, 69, 74, 75, 78, 83, 92, 93, 97, 101, 105, 137, 143, 144, 145, 148, 152, 157, 161, 167, 172, 177, 178, 179, 182, 186, 187, 189, 192], "dure": [6, 47, 83, 89, 90, 92, 95, 97, 106, 128, 143, 145, 171, 181, 182, 183, 186, 192, 193, 197], "last": [6, 88, 89, 91, 125, 144, 147, 149, 154, 158, 186, 189, 192], "flag": [6, 30, 128], "indic": [6, 11, 32, 95, 101, 125, 134, 167, 172, 193], "whether": [6, 11, 23, 27, 30, 32, 36, 71, 78, 82, 83, 91, 105, 126, 142, 186, 189, 192, 194], "each": [6, 13, 16, 23, 27, 30, 32, 33, 34, 58, 83, 91, 94, 97, 100, 105, 106, 107, 124, 126, 128, 129, 130, 135, 143, 149, 155, 158, 164, 172, 174, 181, 183, 187, 189, 191, 193, 194, 195, 196], "visual": [6, 104, 155, 164, 191, 193, 195, 196], "displai": [6, 64, 65, 83, 164, 167], "2022": [6, 91, 97, 140, 183, 189, 192], "workspace_path": 6, "output": [6, 9, 10, 29, 36, 37, 45, 49, 68, 74, 75, 78, 79, 83, 91, 92, 93, 97, 101, 105, 106, 129, 130, 131, 133, 135, 137, 142, 143, 145, 155, 164, 165, 167, 172, 173, 177, 178, 179, 182, 183, 185, 186, 189, 190, 192, 193, 194, 195, 197], "devic": [6, 78, 88, 91, 92, 97, 104, 106, 125, 129, 143, 144, 147, 150, 155, 164, 183, 185, 187, 189], "cpu": [6, 78, 83, 88, 90, 95, 104, 106, 122, 123, 138, 143, 144, 147, 149, 155, 164, 172, 184, 185, 186, 187, 188, 189, 193], "warmup": [6, 122, 143, 185], "model_nam": [6, 104], "inter_num_of_thread": [6, 143, 185], "intra_num_of_thread": [6, 143, 185], "diagnosi": [6, 143, 167, 168, 169, 184, 190, 196], "ni_workload_nam": 6, "benchmark": [6, 28, 47, 83, 104, 112, 145, 147, 151, 155, 158, 164, 167, 195, 196, 197, 198], "A": [6, 13, 27, 29, 32, 33, 34, 36, 37, 41, 45, 53, 68, 83, 89, 91, 92, 97, 100, 104, 106, 124, 125, 126, 132, 135, 141, 142, 143, 145, 157, 158, 161, 164, 172, 183, 184, 186, 189, 192, 194, 195, 197], "empti": [6, 92, 150, 187], "includ": [6, 11, 13, 20, 27, 83, 91, 92, 95, 96, 99, 105, 106, 107, 125, 126, 128, 139, 140, 141, 142, 143, 147, 150, 153, 158, 170, 174, 177, 178, 179, 183, 186, 188, 189, 193, 195], "itex": [6, 74, 95, 144, 186, 192], "ipex": [6, 82, 88, 89, 138, 141, 143, 144, 149, 153, 154, 192], "onnxrt_trt_ep": [6, 144, 186], "onnxrt_cuda_ep": [6, 144, 186], "onnxrt_dnnl_ep": [6, 144, 186], "onnxrt_dml_ep": [6, 186], "number": [6, 12, 23, 27, 33, 34, 36, 53, 71, 83, 86, 91, 96, 97, 122, 125, 126, 131, 142, 172, 174, 183, 186, 189, 191, 192, 194, 195], "inter": 6, "oper": [6, 23, 86, 88, 89, 90, 91, 92, 93, 94, 97, 101, 122, 125, 128, 133, 164, 170, 183, 186, 189, 192, 194, 195], "intra": 6, "accuracycriterion": [6, 143, 195], "higher_is_bett": [6, 36, 49, 195, 197], "criterion": [6, 129, 130, 143, 183, 186, 192, 195, 197], "rel": [6, 47, 143, 167, 185, 195, 197, 198], "tolerable_loss": [6, 96, 143, 195], "01": [6, 91, 143, 185, 189, 195, 197, 198], "metric": [6, 9, 10, 28, 37, 49, 68, 71, 94, 102, 105, 106, 126, 128, 131, 143, 144, 166, 186, 191, 192, 193, 195, 196, 197, 198], "higher": [6, 9, 10, 37, 49, 68, 97, 101, 128, 129, 133, 142, 167, 183, 186, 189, 191], "better": [6, 9, 10, 37, 49, 68, 88, 91, 97, 124, 130, 142, 144, 183, 184, 186, 189, 191, 192, 195], "loss": [6, 36, 68, 88, 90, 91, 95, 97, 123, 128, 129, 130, 131, 132, 141, 142, 143, 144, 155, 167, 169, 182, 183, 184, 186, 189, 192, 195, 197], "absolut": [6, 36, 87, 97, 142, 143, 146, 183, 186, 195], "float": [6, 11, 23, 30, 32, 33, 34, 64, 80, 83, 86, 87, 88, 89, 90, 91, 93, 94, 96, 97, 124, 126, 142, 146, 185, 186, 192, 194], "how": [6, 27, 90, 91, 92, 93, 94, 95, 97, 100, 101, 103, 105, 125, 126, 129, 130, 131, 137, 142, 143, 158, 159, 162, 163, 164, 166, 177, 178, 179, 183, 184, 186, 192, 194, 195, 196, 197], "much": [6, 27, 97, 129, 158, 192, 194], "accept": [6, 96, 99, 122, 124, 125, 166, 189], "accuracy_criterion": [6, 47, 143, 168, 181, 185, 195, 197], "avail": [6, 41, 88, 91, 92, 104, 108, 110, 114, 117, 120, 124, 132, 134, 136, 138, 157, 161, 166, 171, 172, 173, 177, 178, 179, 183, 195, 198], "tuningcriterion": [6, 143, 181, 191, 195], "strategi": [6, 7, 13, 28, 96, 97, 104, 105, 106, 107, 112, 123, 124, 125, 131, 138, 143, 152, 164, 169, 184, 185, 186, 188, 189, 190, 196, 197], "basic": [6, 26, 57, 61, 64, 68, 87, 138, 139, 143, 146, 166, 185, 191], "strategy_kwarg": [6, 191, 195], "timeout": [6, 143, 185, 195, 197], "max_trial": [6, 88, 96, 143, 195], "doc": [6, 36, 49, 64, 65, 83, 142, 143, 159, 162, 170], "tuning_strategi": 6, "md": [6, 36, 49], "constraint": [6, 143, 183, 191, 195, 197], "guarante": [6, 143], "models": [6, 47, 143, 181, 185], "footprint": [6, 47, 130, 143, 181, 183, 185, 187], "second": [6, 11, 54, 83, 91, 97, 128, 143, 157, 161, 165, 177, 178, 189, 192, 195, 197], "which": [6, 11, 12, 13, 23, 29, 34, 36, 41, 47, 49, 53, 83, 88, 90, 91, 92, 93, 95, 96, 97, 99, 101, 102, 104, 105, 106, 107, 123, 125, 126, 128, 129, 131, 134, 135, 138, 142, 143, 144, 145, 148, 152, 155, 158, 164, 165, 166, 169, 172, 177, 178, 179, 182, 183, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197], "mean": [6, 23, 27, 34, 36, 58, 91, 93, 97, 101, 106, 107, 125, 128, 131, 135, 142, 143, 150, 169, 183, 186, 187, 189, 192, 194, 195, 197, 198], "earli": [6, 97, 143, 186, 195, 197], "stop": [6, 96, 143, 195, 196, 197], "time": [6, 27, 36, 47, 53, 83, 90, 91, 92, 94, 96, 97, 106, 125, 128, 131, 134, 143, 152, 154, 157, 161, 164, 165, 170, 173, 177, 178, 181, 183, 184, 186, 189, 191, 192, 193, 194, 195], "combin": [6, 9, 10, 23, 37, 49, 68, 83, 91, 94, 101, 105, 138, 143, 182, 184, 186, 188, 189, 194, 195], "field": [6, 13, 32, 87, 101, 105, 107, 131, 143, 146, 191, 195, 197], "decid": [6, 30, 95, 105, 106, 143, 186, 190, 195], "when": [6, 11, 12, 20, 27, 30, 49, 68, 90, 91, 95, 96, 97, 99, 102, 106, 124, 125, 126, 143, 155, 157, 158, 161, 165, 166, 169, 170, 171, 173, 177, 183, 186, 189, 192, 194, 195], "exit": [6, 50, 52, 96, 143, 172, 177, 178, 179, 197], "tuning_criterion": [6, 143, 181, 191, 195], "posttrainingquantconfig": [6, 49, 101, 104, 107, 125, 128, 133, 136, 142, 143, 145, 166, 167, 168, 169, 186, 187, 188, 189, 191, 192, 195], "domain": [6, 183, 195], "auto": [6, 51, 57, 83, 89, 92, 101, 123, 147, 150, 152, 154, 155, 183, 186, 189], "recip": [6, 87, 96, 104, 143, 146, 187, 189, 192, 195], "quant_format": [6, 75, 133, 167], "approach": [6, 90, 97, 101, 102, 104, 123, 126, 129, 138, 143, 152, 164, 167, 175, 177, 178, 179, 183, 184, 185, 187, 189, 195, 197], "calibration_sampling_s": [6, 143, 169], "op_type_dict": [6, 90, 104, 107, 185, 186, 189, 195], "op_name_dict": [6, 90, 128, 143, 167, 169, 186, 195], "reduce_rang": [6, 107, 185], "example_input": [6, 75, 82, 86, 89, 90, 91, 92, 133], "excluded_precis": [6, 188], "quant_level": [6, 167, 189, 192, 195], "gpu": [6, 91, 95, 104, 122, 138, 143, 144, 149, 155, 164, 185, 186, 187], "npu": [6, 186], "xpu": [6, 95, 155, 186], "cv": [6, 90, 92, 95, 183], "object_detect": [6, 32], "nlp": [6, 92, 95, 97, 152, 168, 183, 186], "recommendation_system": 6, "adaptor": [6, 67, 71, 104, 107, 138, 187, 188, 190, 192, 193, 196], "explicitli": [6, 90, 137, 183], "overrid": [6, 83, 124], "detect": [6, 32, 36, 41, 92, 100, 101, 147, 154, 155, 183, 195], "quantiztaion": 6, "below": [6, 36, 49, 87, 89, 91, 92, 95, 96, 97, 100, 101, 104, 105, 106, 107, 125, 128, 129, 131, 137, 142, 146, 147, 149, 157, 158, 161, 164, 167, 172, 181, 182, 183, 185, 186, 189, 191, 192, 193, 195, 196], "do": [6, 11, 29, 32, 75, 82, 92, 99, 106, 124, 126, 131, 135, 138, 142, 143, 159, 162, 183, 188, 190, 192, 195], "quant": [6, 65, 91, 97, 101, 124, 141, 143, 186], "smooth_quant_arg": [6, 186, 192], "layer_wise_qu": [6, 187], "fast": [6, 91, 95, 183, 184, 189], "bia": [6, 189, 193], "gemm_to_matmul": [6, 186], "convert": [6, 11, 23, 26, 27, 32, 65, 74, 86, 87, 88, 89, 90, 91, 92, 94, 97, 101, 106, 143, 144, 149, 186, 188, 189, 192, 194, 195], "gemm": 6, "matmul": [6, 135, 167, 189, 195], "add": [6, 11, 13, 65, 83, 89, 100, 101, 104, 107, 125, 126, 131, 133, 135, 142, 143, 159, 162, 166, 167, 174, 177, 178, 191, 192, 193, 195, 196], "valid": [6, 13, 32, 45, 102, 104, 105, 126, 128, 129, 132, 135, 138, 140, 143, 155, 169, 183, 186, 189, 190], "graph_optimization_level": [6, 185, 186], "disable_al": [6, 185], "enable_bas": 6, "enable_extend": 6, "enable_al": 6, "first_conv_or_matmul_quant": [6, 186], "last_conv_or_matmul_quant": [6, 186], "pre_post_process_quant": [6, 186], "preprocess": [6, 11, 27, 67, 71, 131, 194], "postprocess": [6, 24, 27, 36, 49, 71, 105, 143, 193, 194], "add_qdq_pair_to_weight": [6, 186], "qdq": [6, 73, 74, 75, 94, 105, 128, 133, 138, 154, 155, 186, 190, 192], "pair": [6, 88, 90, 106, 125, 143, 144, 190], "optypes_to_exclude_output_qu": [6, 186], "optyp": [6, 73, 106], "dedicated_qdq_pair": [6, 186], "dedic": 6, "qoper": [6, 133, 167], "requir": [6, 45, 88, 90, 91, 95, 97, 101, 105, 106, 122, 123, 125, 128, 130, 131, 135, 143, 144, 145, 148, 158, 164, 166, 171, 172, 175, 178, 179, 183, 186, 189, 190, 191, 192, 193, 195, 197], "onnxruntim": [6, 13, 20, 105, 123, 125, 138, 139, 144, 167, 185], "tensorflow": [6, 11, 12, 13, 16, 18, 20, 27, 30, 32, 36, 37, 45, 49, 59, 74, 75, 83, 94, 100, 102, 104, 105, 106, 123, 124, 125, 128, 129, 130, 132, 135, 136, 138, 139, 143, 144, 145, 146, 154, 155, 166, 169, 183, 184, 185, 191, 192, 195, 197], "method": [6, 11, 13, 20, 27, 65, 67, 71, 76, 78, 79, 91, 92, 93, 95, 97, 101, 102, 104, 123, 124, 125, 126, 128, 129, 130, 142, 143, 182, 183, 186, 188, 189, 192, 194, 195], "dynam": [6, 65, 75, 91, 92, 105, 125, 129, 133, 138, 143, 147, 152, 153, 154, 155, 158, 164, 184, 195, 198], "weight_onli": [6, 82, 87, 104, 124, 146, 187, 189], "ptq": [6, 49, 89, 90, 94, 95, 101, 128, 131, 138, 143, 169, 186, 192, 193, 195], "both": [6, 90, 91, 93, 97, 99, 102, 105, 130, 143, 148, 167, 169, 171, 183, 185, 186, 189, 192, 195], "tri": [6, 124, 195], "meet": [6, 50, 52, 91, 93, 95, 96, 97, 101, 106, 181, 184, 185, 186, 189, 193, 195], "criteria": [6, 96, 101, 164, 192], "bayesian": [6, 57, 102, 183, 185], "mse": [6, 36, 49, 57, 83, 91, 97, 128, 142, 169, 185, 189, 190], "mse_v2": [6, 57], "hawq_v2": [6, 57], "exhaust": [6, 57, 185], "els": [6, 47, 80, 152, 189, 193], "sampl": [6, 11, 12, 13, 23, 27, 36, 53, 91, 95, 96, 97, 102, 125, 126, 132, 138, 165, 186, 189, 192, 194, 195, 197, 198], "advanc": [6, 87, 88, 91, 93, 95, 97, 99, 104, 106, 112, 141, 146, 183, 186, 189, 197], "reduc": [6, 88, 89, 90, 91, 94, 95, 97, 105, 123, 130, 143, 144, 164, 165, 183, 184, 186, 187, 188, 189, 192, 195, 197], "dtype": [6, 14, 15, 23, 27, 78, 88, 91, 92, 97, 104, 106, 107, 126, 128, 133, 135, 147, 169, 185, 186, 189, 192, 193, 194, 197], "activ": [6, 65, 67, 86, 89, 90, 91, 94, 95, 97, 105, 106, 107, 123, 128, 130, 135, 143, 165, 166, 169, 177, 178, 179, 185, 186, 189, 192, 193, 197], "layer1": [6, 143, 183, 186], "conv1": [6, 93, 186, 197], "bit": [6, 67, 86, 87, 88, 91, 92, 97, 104, 107, 123, 130, 144, 146, 184, 186, 189, 192], "precis": [6, 9, 10, 34, 36, 37, 47, 51, 54, 65, 83, 87, 90, 91, 95, 96, 97, 104, 105, 106, 112, 122, 123, 130, 131, 135, 138, 146, 147, 153, 154, 155, 184, 185, 186, 189, 192, 195, 196], "exclud": [6, 105, 123, 188], "enabl": [6, 88, 90, 91, 106, 107, 131, 144, 147, 149, 152, 153, 155, 166, 168, 169, 171, 174, 183, 184, 192, 195], "mix": [6, 37, 51, 65, 104, 105, 112, 138, 147, 153, 154, 155, 196], "bf16": [6, 65, 105, 106, 135, 143, 149, 154, 158, 164, 188, 195, 198], "disabl": [6, 99, 164, 169, 188, 189, 192], "conserv": [6, 57], "In": [6, 32, 47, 91, 92, 95, 97, 99, 101, 102, 104, 105, 106, 125, 126, 128, 129, 130, 131, 142, 143, 154, 157, 158, 161, 167, 168, 169, 170, 177, 178, 179, 181, 182, 183, 186, 188, 189, 191, 192, 193, 194, 195, 196], "docstr": 6, "workload": [6, 80, 83, 166, 184], "insight": [6, 80, 104, 128, 184, 190, 195, 196], "quantizationawaretrainingconfig": [6, 68, 101, 130, 133, 143, 186, 188, 195], "awar": [6, 56, 68, 91, 92, 96, 105, 106, 107, 123, 130, 131, 133, 138, 164, 174, 182, 184, 189, 195], "qat": [6, 45, 130, 131, 138, 143, 186], "copi": [6, 83, 125, 170], "deepcopi": 6, "model_origin": [6, 49, 188], "qat_op_name_dict": 6, "compression_manag": [6, 68, 101, 129, 130, 143, 182, 183, 186], "prepare_compress": [6, 68, 101, 129, 130, 143, 182, 183, 186], "weightpruningconfig": [6, 143, 182, 183], "pruning_config": [6, 143, 183], "target_spars": [6, 143, 183, 185, 197], "9": [6, 89, 101, 139, 143, 183, 185, 192, 195, 197, 198], "pruning_typ": [6, 143, 183], "snip_momentum": [6, 143, 183], "pattern": [6, 13, 65, 86, 90, 94, 105, 124, 126, 135, 138, 143, 165, 182, 185, 192, 195, 198], "4x1": [6, 143, 183, 198], "op_nam": [6, 66, 83, 84, 90, 106, 143, 183, 193], "excluded_op_nam": [6, 143, 183], "start_step": [6, 143, 183, 185], "end_step": [6, 143, 183, 185], "pruning_scop": [6, 143, 183], "pruning_frequ": [6, 143, 183], "min_sparsity_ratio_per_op": [6, 143, 183], "max_sparsity_ratio_per_op": [6, 143, 183], "98": [6, 143, 183, 185, 198], "sparsity_decay_typ": [6, 143, 183], "exp": [6, 87, 143, 146, 183], "pruning_op_typ": [6, 143, 183], "low_memory_usag": 6, "kwarg": [6, 13, 25, 27, 36, 37, 38, 40, 42, 44, 45, 46, 49, 64, 66, 68, 78, 79, 82, 83, 125], "prune": [6, 83, 104, 131, 132, 135, 136, 138, 182, 184, 196, 197], "defin": [6, 9, 10, 37, 49, 68, 82, 93, 95, 96, 97, 99, 102, 105, 106, 125, 126, 129, 130, 135, 138, 142, 143, 165, 182, 183, 186, 189, 191, 192, 193, 195, 197], "singl": [6, 11, 27, 32, 36, 49, 101, 126, 128, 139, 170, 183, 187, 192], "sequenc": [6, 11, 26, 27, 30, 34, 91, 97, 105, 126, 135, 183, 189, 194], "local": [6, 83, 91, 93, 157, 161, 166, 173, 174, 183, 191], "link": [6, 11, 36, 49, 92, 123, 126, 133, 157, 161, 164, 189, 198], "out": [6, 11, 12, 13, 91, 93, 95, 97, 100, 101, 104, 126, 147, 152, 157, 158, 159, 161, 162, 164, 170, 183, 185, 186, 189], "By": [6, 29, 91, 106, 107, 142, 145, 157, 158, 161, 183, 184, 189, 195], "correspond": [6, 11, 29, 32, 36, 71, 83, 92, 97, 105, 135, 143, 183, 185, 186, 191, 195], "sparsiti": [6, 83, 91, 104, 126, 138, 143, 196, 198], "reach": [6, 100, 125, 166, 183, 195], "after": [6, 11, 23, 27, 54, 78, 83, 86, 90, 91, 94, 97, 102, 104, 106, 126, 128, 129, 130, 133, 138, 142, 143, 157, 158, 161, 165, 169, 181, 182, 183, 186, 188, 189, 191, 192, 193, 194, 195], "90": [6, 141, 187, 197, 198], "magnitud": [6, 36, 138, 183], "snip": [6, 138, 183, 198], "magnitude_progress": 6, "snip_progress": 6, "snip_momentum_progress": 6, "pattern_lock": 6, "most": [6, 36, 88, 91, 95, 97, 128, 143, 144, 183, 186, 189, 192, 195, 198], "feasibl": 6, "under": [6, 13, 78, 82, 96, 100, 102, 104, 126, 140, 142, 143, 147, 152, 153, 164, 172, 182, 183, 184, 187, 189, 193, 195], "situat": [6, 131, 183], "structur": [6, 66, 83, 92, 97, 138, 163, 165, 168, 177, 183, 184, 186, 193, 196, 198], "unstructur": [6, 138, 183, 198], "nxm": [6, 183], "e": [6, 91, 97, 99, 100, 104, 129, 132, 136, 147, 152, 153, 157, 161, 183, 189, 192, 195], "g": [6, 91, 97, 100, 129, 132, 136, 147, 152, 183, 189, 190, 192, 195], "8x1": 6, "channelx1": [6, 183], "1xchannel": [6, 183], "n": [6, 12, 27, 30, 97, 107, 124, 126, 128, 129, 141, 172, 183, 186, 192, 194], "directli": [6, 32, 36, 93, 104, 142, 143, 151, 183, 185, 186, 193], "our": [6, 87, 102, 104, 133, 143, 146, 165, 166, 169, 191, 196], "itrex": [6, 89, 192], "some": [6, 11, 91, 97, 106, 107, 124, 126, 128, 133, 139, 142, 143, 166, 167, 168, 169, 172, 181, 183, 186, 188, 189, 192, 193, 195, 196], "step": [6, 68, 86, 89, 90, 91, 97, 106, 107, 128, 129, 130, 131, 143, 159, 162, 164, 177, 178, 179, 182, 183, 185, 188, 189, 191, 192, 193, 195], "start": [6, 27, 32, 54, 139, 169, 184, 194, 195, 196, 199], "integ": [6, 32, 36, 89, 91, 94, 97, 105, 107, 123, 186, 189, 192, 195], "end": [6, 11, 26, 27, 50, 52, 105, 106, 107, 129, 130, 135, 139, 143, 158, 174, 181, 183, 189, 193, 194, 195], "determin": [6, 77, 86, 90, 96, 99, 101, 123, 183, 186], "score": [6, 29, 30, 32, 33, 34, 36, 56, 71, 101, 142, 167, 181, 183, 191, 195], "gather": 6, "togeth": [6, 27, 129, 139, 151, 184, 193, 194], "sort": [6, 58, 91, 128, 167, 189, 195], "sinc": [6, 29, 91, 97, 129, 133, 142, 158, 164, 169, 182, 189, 190], "lead": [6, 88, 91, 95, 97, 124, 129, 143, 144, 169, 183, 189, 192], "less": [6, 83, 122, 129, 143, 171, 183], "frequenc": [6, 143, 183, 197], "minimum": [6, 87, 107, 123, 128, 143, 146, 155, 183, 192, 195], "restrict": [6, 183, 191], "everi": [6, 91, 105, 125, 152, 157, 161, 187, 189, 195], "maximum": [6, 11, 27, 30, 45, 53, 91, 97, 107, 123, 126, 128, 143, 183, 186, 192, 194], "schedul": [6, 91, 143, 171, 172, 174, 182], "increas": [6, 87, 91, 127, 138, 146, 147, 164, 169, 189, 195], "cube": [6, 183], "current": [6, 53, 59, 83, 90, 92, 96, 101, 102, 105, 107, 123, 124, 131, 135, 143, 147, 151, 164, 172, 181, 183, 186, 189, 192, 195], "local_config": 6, "6": [6, 87, 89, 91, 94, 97, 135, 146, 186, 192, 195, 198], "queri": [6, 97, 106, 107, 174, 186], "kei": [6, 45, 69, 71, 83, 91, 97, 104, 106, 166, 167, 173, 184, 189, 193, 195], "self": [6, 47, 92, 105, 106, 125, 126, 138, 142, 166, 191, 193, 195], "attent": [6, 11, 99, 129, 183], "dens": [6, 167, 183, 198], "8": [6, 26, 86, 87, 89, 91, 92, 97, 101, 106, 123, 124, 135, 139, 146, 171, 172, 183, 184, 189, 192, 195, 198], "update_config": 6, "10": [6, 13, 53, 96, 104, 122, 126, 133, 139, 143, 166, 167, 183, 185, 194, 195, 198], "hpoconfig": 6, "search_spac": 6, "searcher": 6, "xgb": 6, "loss_typ": [6, 143, 197], "reg": 6, "min_train_sampl": 6, "42": [6, 91, 198], "hyperparamet": [6, 97, 191, 192, 195], "optim": [6, 53, 68, 69, 80, 83, 90, 91, 94, 95, 96, 97, 102, 104, 122, 124, 128, 129, 130, 131, 135, 136, 138, 139, 141, 143, 145, 147, 149, 151, 152, 155, 158, 166, 169, 170, 171, 173, 175, 184, 185, 186, 188, 189, 191, 192, 193, 195, 197], "search": [6, 9, 10, 29, 53, 83, 91, 92, 94, 104, 124, 138, 142, 147, 148, 158, 183, 184, 189, 192, 193, 195, 196], "algorithm": [6, 28, 29, 36, 71, 77, 91, 92, 95, 96, 97, 102, 104, 105, 106, 107, 124, 129, 130, 135, 138, 141, 153, 158, 183, 186, 193, 197], "grid": [6, 102, 183], "bo": 6, "knowledgedistillationlossconfig": [6, 129, 130, 143, 182], "temperatur": [6, 143, 197], "ce": [6, 143, 197], "loss_weight": [6, 143, 197], "knowledg": [6, 94, 130, 132, 136, 138, 143, 145, 197], "distil": [6, 104, 132, 136, 138, 182, 196, 197], "entropi": [6, 123, 195], "probabl": [6, 77, 91, 97, 189], "length": [6, 11, 27, 32, 91, 97, 126, 142, 184, 186, 189, 194], "item": [6, 26, 65, 83, 97, 123, 131, 183, 192, 195], "student": [6, 11, 126, 129, 130, 198], "groundtruth": [6, 32], "label": [6, 9, 10, 11, 13, 14, 15, 16, 19, 23, 27, 29, 31, 36, 37, 49, 68, 95, 101, 125, 126, 128, 142, 143, 186, 194], "teacher": [6, 129, 130, 143, 198], "kl": [6, 69, 77, 106, 107, 123, 135, 143, 195, 197], "sum": [6, 36, 128, 129], "multipli": [6, 86, 87, 91, 146, 189], "distillationconfig": [6, 68, 129, 130, 143, 182], "criterion_conf": 6, "d_conf": [6, 130, 143, 182], "teacher_model": [6, 129, 130, 143], "intermediatelayersknowledgedistillationlossconfig": [6, 129], "layer_map": [6, 129], "add_origin_loss": 6, "map": [6, 27, 31, 33, 34, 36, 73, 75, 91, 97, 124, 126, 131, 142, 143, 157, 161, 169, 183, 186, 189], "relationship": [6, 166], "student_layer_nam": 6, "student_layer_output_process": 6, "teacher_layer_nam": 6, "teacher_layer_output_process": 6, "bert": [6, 11, 27, 104, 126, 129, 142, 144, 152, 175, 178, 179, 183, 194, 198], "desir": [6, 23, 27, 89, 106, 107, 183, 192, 194], "its": [6, 13, 27, 30, 31, 53, 73, 91, 96, 97, 99, 126, 129, 140, 142, 144, 155, 157, 161, 164, 165, 183, 189, 191, 194, 195], "either": [6, 32, 90, 95, 96, 97, 148, 152, 172, 182, 185, 186], "take": [6, 9, 10, 27, 36, 37, 49, 53, 68, 91, 95, 99, 101, 102, 125, 128, 129, 135, 143, 164, 183, 186, 188, 189, 194, 195, 197], "serv": [6, 45, 97, 172, 177, 178, 179], "tupl": [6, 9, 10, 23, 27, 37, 49, 64, 68, 75, 82, 92, 95, 106, 124, 126, 142, 143, 186, 194], "numer": [6, 36, 87, 88, 91, 95, 107, 144, 146, 184, 186, 189], "abbrevi": 6, "same": [6, 11, 27, 32, 83, 87, 91, 96, 97, 105, 107, 122, 125, 126, 129, 131, 135, 143, 146, 148, 152, 157, 161, 183, 185, 186, 189, 192, 193, 194, 195], "further": [6, 88, 97, 99, 104, 144, 145, 147, 149, 158, 164, 186], "layer_nam": [6, 183], "student_model": [6, 143], "l1": 6, "len": [6, 27, 126, 131, 194], "origin": [6, 11, 27, 54, 67, 78, 83, 91, 92, 93, 95, 97, 100, 126, 152, 183, 186, 189, 194, 195, 197], "selfknowledgedistillationlossconfig": [6, 129, 143], "like": [6, 9, 10, 13, 36, 45, 49, 68, 91, 95, 97, 100, 101, 102, 105, 106, 128, 129, 130, 138, 152, 167, 169, 182, 183, 186, 189, 190, 192, 195], "student1_layer_name1": 6, "teacher_layer_name1": 6, "student2_layer_name1": 6, "student1_layer_name2": 6, "teacher_layer_name2": 6, "student2_layer_name2": 6, "calcul": [6, 14, 15, 33, 34, 58, 69, 83, 89, 91, 95, 97, 123, 126, 142, 143, 155, 167, 181, 183, 186, 189, 191, 192, 195, 197], "soft": 6, "l2": [6, 183], "hard": [6, 125, 128], "resblock": 6, "featur": [6, 11, 12, 23, 27, 88, 93, 97, 100, 104, 122, 125, 127, 129, 143, 144, 145, 147, 151, 152, 155, 164, 166, 170, 183, 184, 190, 194], "deepst": 6, "fc": [6, 183], "3": [6, 13, 27, 32, 83, 87, 88, 90, 91, 93, 95, 96, 97, 101, 102, 104, 123, 124, 125, 126, 129, 131, 133, 135, 136, 139, 142, 143, 144, 146, 147, 151, 155, 157, 161, 166, 171, 172, 174, 175, 177, 181, 183, 185, 186, 189, 190, 191, 192, 194, 195, 198], "02": [6, 141, 198], "nn": [6, 37, 49, 75, 78, 82, 91, 92, 97, 101, 129, 143, 145, 189, 192, 193], "crossentropyloss": [6, 129, 143], "sgd": [6, 129, 143, 185, 197], "lr": [6, 91, 129, 131, 143], "0001": [6, 129, 143, 185], "learning_r": [6, 143, 185, 197], "callabl": [6, 34, 68, 92, 95, 124, 125], "altern": [6, 49], "distil_loss": [6, 143], "mixedprecisionconfig": [6, 37, 143, 144], "mixedprecis": [6, 143], "target": [6, 53, 78, 92, 126, 131, 143, 183, 193, 194, 195, 197], "convers": [6, 88, 89, 97, 100, 105, 106, 143, 144, 186, 188, 192], "fp16": [6, 65, 97, 186], "fallback": [6, 56, 58, 59, 88, 89, 90, 133, 144, 167, 188, 195], "won": [6, 186, 189], "work": [6, 92, 97, 103, 106, 124, 125, 129, 159, 162, 170, 188, 189, 190, 192, 193], "tensor": [6, 27, 45, 58, 73, 75, 78, 82, 83, 86, 87, 92, 95, 101, 107, 124, 125, 126, 128, 146, 183, 186, 190, 193, 194, 195], "trace": [6, 56, 75, 90, 92, 101, 154, 195], "mix_precis": [6, 28, 143, 144], "converted_model": [6, 37, 143, 144], "exportconfig": 6, "opset_vers": [6, 74, 75, 133], "14": [6, 74, 75, 104, 133, 139, 141, 179, 198], "input_nam": [6, 45, 74, 75, 133], "output_nam": [6, 45, 74, 75, 133], "dynamic_ax": [6, 75, 133], "common": [6, 25, 71, 89, 93, 94, 95, 99, 124, 126, 130, 131, 133, 137, 139, 143, 186, 192], "export": [6, 32, 76, 86, 90, 104, 136, 150, 165, 167, 193, 196], "select": [6, 11, 78, 91, 97, 101, 102, 123, 138, 139, 164, 183, 186, 189, 193, 195], "opset": [6, 74, 75, 133], "version": [6, 28, 74, 75, 89, 99, 101, 105, 124, 135, 139, 140, 143, 157, 159, 161, 162, 184, 192, 195, 196], "qlinear": [6, 13, 20, 36, 73, 105, 154], "ax": [6, 75], "inform": [6, 9, 10, 36, 83, 87, 89, 91, 95, 99, 100, 103, 104, 105, 106, 107, 108, 110, 114, 117, 120, 123, 124, 129, 135, 143, 145, 146, 159, 162, 165, 166, 169, 170, 172, 173, 177, 178, 183, 188, 189, 190, 192, 193, 197, 198, 199], "onnxqlinear2qdqconfig": 6, "onnxqlinear2qdq": 6, "torch2onnxconfig": [6, 133], "torch2onnx": [6, 72], "qdq_op_fp32_bia": 6, "qdq_op_int32_bia": 6, "qdq_op_fp32_bias_qdq": 6, "resnet50": [6, 93, 104, 128, 131, 133, 144, 147, 151, 183, 186, 191, 198], "int8_onnx_config": [6, 133], "randn": [6, 133], "224": [6, 23, 104, 126, 131, 133, 136, 143, 147, 166, 194, 197], "batch_siz": [6, 11, 12, 75, 91, 102, 125, 126, 131, 133, 137, 143, 147, 186], "q_model": [6, 49, 86, 89, 90, 94, 96, 101, 125, 126, 128, 131, 133, 136, 137, 142, 143, 145, 166, 167, 186, 187, 188, 189], "tf2onnxconfig": [6, 133], "tf2onnx": [6, 72], "axi": 6, "addit": [6, 68, 91, 106, 107, 129, 158, 166, 172, 189, 190, 195], "keyword": 6, "argument": [6, 92, 95, 96, 102, 128, 168, 169, 172, 175, 177, 178, 179, 189], "output_graph": 6, "nasconfig": [6, 102], "search_algorithm": [6, 102], "dyna": [6, 102, 138, 185], "na": [6, 41, 138, 198], "mxnet": [6, 13, 16, 20, 27, 36, 37, 42, 49, 100, 104, 105, 106, 123, 125, 132, 135, 138, 143, 144, 145, 185, 195, 197], "kera": [6, 13, 20, 40, 45, 93, 95, 106, 125, 131, 145, 154, 155], "pytorch": [6, 11, 13, 16, 20, 27, 36, 37, 46, 49, 59, 75, 76, 83, 87, 92, 100, 101, 102, 104, 105, 106, 107, 123, 124, 125, 129, 130, 132, 135, 138, 139, 141, 143, 144, 145, 146, 147, 149, 152, 153, 154, 155, 164, 166, 175, 178, 179, 183, 184, 185, 189, 190, 192, 195, 197], "built": [7, 8, 11, 12, 17, 19, 21, 22, 23, 24, 27, 36, 39, 47, 49, 68, 96, 102, 105, 126, 131, 143, 157, 161, 181, 186, 191, 194, 195, 197], "multipl": [7, 8, 11, 12, 14, 15, 16, 17, 18, 22, 24, 27, 37, 38, 39, 41, 47, 95, 122, 126, 133, 143, 171, 174, 182, 183, 191, 192, 195], "sigopt": [8, 184], "tpe": 8, "provid": [9, 10, 27, 32, 37, 49, 68, 76, 78, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 102, 104, 105, 106, 107, 122, 125, 128, 130, 131, 132, 138, 139, 141, 142, 143, 144, 145, 147, 151, 155, 158, 164, 165, 166, 172, 173, 183, 185, 186, 189, 192, 193, 195, 196, 197, 198], "sigopttunestrategi": 9, "q_dataload": [9, 10, 50, 53, 54, 58, 60, 61, 137, 195], "q_func": [9, 10, 50, 53, 54, 58, 60, 61, 105, 106, 143, 195], "eval_func": [9, 10, 37, 49, 50, 53, 54, 58, 60, 61, 68, 101, 125, 126, 128, 129, 130, 131, 143, 167, 186, 187, 188, 189, 195, 197], "eval_metr": [9, 10, 37, 49, 50, 53, 54, 58, 60, 61, 68, 142, 166, 186], "q_hook": [9, 10, 50, 53, 54, 58, 60, 61], "hpo": [9, 183], "low": [9, 10, 14, 15, 37, 88, 91, 96, 97, 105, 106, 122, 123, 126, 131, 143, 144, 169, 184, 186, 189, 192, 195], "initi": [9, 10, 11, 49, 65, 68, 92, 95, 97, 102, 107, 126, 142, 163, 183, 186, 192, 195], "loader": [9, 10, 37, 49, 68, 78, 125, 186], "mandatori": [9, 10, 49, 143, 197], "It": [9, 10, 34, 36, 37, 49, 54, 58, 68, 87, 90, 91, 92, 93, 95, 96, 97, 105, 106, 107, 123, 128, 129, 143, 146, 150, 153, 158, 164, 165, 166, 167, 169, 170, 172, 183, 186, 189, 190, 191, 195, 197], "yield": [9, 10, 37, 49, 53, 68, 97, 125, 186, 195], "dataset": [9, 10, 22, 32, 33, 34, 36, 37, 49, 68, 71, 89, 91, 93, 94, 95, 97, 102, 104, 105, 106, 125, 131, 136, 142, 143, 152, 166, 167, 177, 183, 186, 189, 190, 192, 195, 197, 198], "_": [9, 10, 49, 88, 89, 91, 92, 95, 97, 101, 102, 104, 105, 106, 123, 128, 129, 131, 133, 135, 143, 144, 145, 147, 153, 157, 159, 161, 162, 169, 172, 173, 181, 183, 186, 189, 190, 191, 192, 193, 195, 197], "depend": [9, 10, 37, 49, 68, 100, 134, 135, 170, 185, 186, 195], "implement": [9, 10, 11, 13, 29, 37, 47, 49, 56, 68, 91, 107, 125, 126, 142, 143, 155, 165, 183, 186, 189, 190, 193, 195, 197], "well": [9, 10, 37, 49, 68, 87, 97, 102, 104, 124, 126, 146, 183, 186, 190, 192, 197], "taken": [9, 10, 37, 49, 68, 186], "reserv": [9, 10], "abl": [9, 10, 37, 49, 68, 95, 97, 155, 164, 186], "pre": [9, 10, 11, 37, 49, 68, 90, 91, 96, 97, 124, 126, 129, 130, 143, 152, 169, 183, 184, 186, 189, 193, 195], "through": [9, 10, 36, 37, 49, 90, 91, 92, 97, 104, 122, 135, 137, 138, 142, 150, 171, 181, 182, 183, 185, 186, 189], "tuner": [9, 10, 37, 49, 68, 186], "encapsul": [9, 10, 37, 49, 68, 145], "scalar": [9, 10, 37, 49, 68, 142, 186, 195], "pseudo": [9, 10, 49, 68, 91, 189, 193], "code": [9, 10, 49, 68, 91, 93, 101, 104, 105, 106, 107, 126, 129, 130, 131, 137, 138, 140, 142, 147, 149, 151, 152, 153, 155, 158, 164, 168, 169, 171, 172, 173, 181, 182, 183, 184, 185, 186, 191, 192, 193, 194], "someth": [9, 10, 13, 49, 68], "def": [9, 10, 49, 68, 88, 89, 92, 93, 95, 96, 97, 101, 105, 124, 125, 126, 129, 130, 131, 142, 143, 186, 192, 193, 195], "fefin": 10, "tpetunestrategi": 10, "pytorchbertdataset": 11, "task": [11, 18, 36, 89, 91, 97, 126, 129, 130, 133, 138, 142, 143, 167, 171, 174, 183, 187, 189, 192, 198], "model_typ": [11, 83, 126], "transform": [11, 12, 13, 14, 15, 16, 18, 20, 22, 89, 90, 91, 94, 97, 101, 102, 104, 123, 126, 129, 130, 131, 132, 136, 141, 143, 147, 152, 153, 154, 155, 167, 175, 178, 179, 183, 184, 188, 189, 192, 193, 195, 197], "filter": [11, 12, 13, 14, 15, 16, 18, 22, 83, 107, 126, 138, 183, 193], "construct": [11, 14, 15, 18, 25, 36, 41, 45, 67, 71, 96, 99, 106, 107, 126, 131, 183, 195], "tensordataset": [11, 126], "full": [11, 12, 13, 78, 83, 91, 104, 123, 126, 128, 134, 140, 165, 170, 183, 189, 190], "repo": [11, 98, 100, 126, 132, 157, 159, 161, 162, 199], "http": [11, 13, 29, 30, 32, 33, 34, 36, 49, 91, 101, 126, 128, 136, 139, 140, 143, 153, 159, 162, 166, 168, 169, 170, 171, 172, 175, 177, 178, 179, 183, 190], "github": [11, 29, 30, 33, 34, 36, 49, 91, 100, 104, 126, 128, 132, 139, 140, 143, 153, 159, 162, 166, 168, 169, 170, 171, 172, 175, 178, 179, 190], "com": [11, 29, 30, 33, 34, 36, 49, 99, 124, 126, 128, 136, 139, 140, 143, 147, 153, 166, 168, 169, 171, 172, 175, 178, 179, 190, 191, 198], "huggingfac": [11, 78, 87, 126, 132, 136, 146, 152, 153, 154, 155, 175, 176, 178, 179, 192, 198], "your": [11, 90, 100, 104, 124, 125, 126, 128, 131, 140, 143, 147, 150, 151, 152, 157, 158, 159, 161, 162, 164, 166, 170, 172, 177, 178, 179, 183, 184, 191, 193, 195, 196], "todo": [11, 14, 32, 65], "easi": [11, 90, 92, 95, 133, 143, 167, 171, 184, 186, 189, 191], "ad": [11, 29, 53, 86, 88, 91, 106, 107, 128, 144, 147, 152, 155, 159, 162, 172, 183, 189, 193], "load": [11, 26, 27, 37, 45, 49, 82, 83, 95, 106, 125, 157, 161, 165, 167, 185, 186, 187, 192], "arg": [11, 12, 13, 53, 78, 79, 87, 92, 126, 131, 143, 146, 153, 183, 186, 189, 192, 193, 194], "classifi": [11, 36, 126, 129], "squad": [11, 27, 33, 34, 36, 126, 142, 183, 194, 198], "distilbert": [11, 126, 144, 184, 198], "xlnet": [11, 126], "xlm": [11, 126, 198], "condit": [11, 12, 13, 27, 50, 52, 96, 126, 140, 194, 195], "101": [11, 36, 97, 142, 173, 192, 198], "2043": 11, "2001": 11, "onnxrtbertdataset": 11, "data_dir": [11, 126], "model_name_or_path": [11, 126, 143, 152, 153, 168, 175, 178, 179, 187], "max_seq_length": [11, 27, 126, 194], "128": [11, 14, 15, 27, 91, 96, 97, 126, 143, 186, 189, 194, 198], "do_lower_cas": [11, 26, 27, 126, 194], "mrpc": [11, 36, 126, 142, 152, 175, 178, 179, 183, 195, 198], "dynamic_length": [11, 126], "onnxrt": [11, 13, 20, 27, 36, 81, 105, 128, 144, 166, 186, 198], "dir": [11, 78, 82, 126, 134, 137], "path": [11, 12, 13, 27, 37, 45, 49, 65, 74, 75, 78, 80, 83, 90, 91, 92, 101, 102, 105, 126, 128, 131, 137, 142, 143, 144, 145, 150, 153, 164, 167, 169, 172, 177, 178, 179, 182, 189, 194, 197], "shortcut": [11, 126], "token": [11, 24, 27, 29, 30, 78, 89, 91, 97, 104, 126, 142, 143, 166, 167, 189, 191, 192, 194, 195], "longer": [11, 27, 126, 194], "than": [11, 27, 83, 87, 91, 97, 102, 104, 122, 126, 137, 146, 169, 177, 181, 182, 183, 186, 189, 191, 194, 195], "truncat": [11, 27, 126, 194], "shorter": [11, 27, 126, 194], "pad": [11, 27, 126, 194], "lowercas": [11, 126], "fine": [11, 92, 124, 126, 150, 183, 184, 186], "choic": [11, 91, 95, 97, 105, 126, 142, 170, 192], "qqp": [11, 126, 142, 198], "qnli": [11, 126, 142, 198], "rte": [11, 126, 142, 198], "st": [11, 126, 142], "b": [11, 83, 91, 97, 100, 123, 126, 142, 183, 189, 192, 195], "cola": [11, 126, 142, 198], "mnli": [11, 126, 142, 198], "wnli": [11, 126, 142], "mobilebert": [11, 126, 129], "roberta": [11, 126, 198], "fix": [11, 91, 125, 126, 151, 183, 186, 189, 195], "uncas": [11, 27, 126, 194, 198], "load_and_cache_exampl": 11, "cach": [11, 91, 97, 134, 186, 189], "helper": [11, 12, 13, 26, 45, 73, 74, 75, 81], "convert_examples_to_featur": [11, 27], "max_length": 11, "label_list": [11, 36], "output_mod": 11, "classif": [11, 27, 36, 129, 133, 142, 153, 167, 175, 178, 179, 183, 184], "pad_token": 11, "pad_token_segment_id": 11, "mask_padding_with_zero": 11, "inputfeatur": [11, 27], "properti": [11, 67, 140], "input_id": [11, 27, 143], "vocabulari": [11, 26, 27, 194], "attention_mask": [11, 143], "mask": [11, 32, 183, 198], "avoid": [11, 101, 124, 193], "usual": [11, 95, 97, 106, 128, 129, 169, 182, 183, 186, 187, 192], "NOT": [11, 135], "token_type_id": [11, 143], "segment": [11, 30, 32, 100], "portion": 11, "them": [11, 91, 92, 97, 101, 107, 125, 128, 133, 135, 137, 167, 170, 182, 183, 189, 195], "problem": [11, 36, 88, 142, 144, 165], "regress": [11, 100, 128], "seq_length": 11, "tensorflowbertdataset": 11, "root": [11, 12, 13, 16, 36, 126, 131, 142, 143, 197], "label_fil": [11, 27, 126, 194], "tfrecord": [11, 12, 13, 126], "guid": [11, 95, 101, 104, 124, 126, 129, 139, 147, 155, 164, 199], "parsedecodebert": 11, "tensorflowmodelzoobertdataset": [11, 12], "pars": [11, 12, 23, 27, 106, 107, 194], "num_cor": [11, 12, 16, 126], "28": [11, 12, 16, 126, 198], "three": [11, 50, 52, 88, 92, 96, 97, 101, 105, 106, 123, 139, 144, 158, 172, 182, 186, 188, 191, 192, 193], "tf": [11, 12, 13, 27, 43, 45, 93, 95, 124, 131, 139, 145, 184, 188, 194], "record": [11, 12, 13, 19, 83, 96, 126, 169, 189, 191, 193, 195], "resiz": [11, 12, 23, 27, 126, 194], "coco": [12, 19, 32, 36, 142, 183], "parsedecodecoco": 12, "cocorecorddataset": 12, "interleav": [12, 126], "parallel": [12, 126, 143, 171, 174, 195], "cocoraw": [12, 126], "img_dir": [12, 126], "val2017": [12, 126], "anno_dir": [12, 126], "annot": [12, 32, 106, 107, 126, 142, 183, 195], "instances_val2017": [12, 126], "json": [12, 27, 82, 91, 126, 145, 165, 172, 173, 177, 178, 179, 189, 194], "arrang": [12, 13, 16, 126, 183], "wai": [12, 13, 16, 45, 91, 94, 97, 102, 107, 125, 126, 128, 142, 143, 147, 150, 165, 166, 170, 171, 172, 182, 183, 186, 189, 192, 195, 197], "jpg": [12, 16, 18, 104, 126], "imag": [12, 13, 16, 18, 23, 27, 32, 97, 104, 126, 131, 133, 183, 185, 192, 193, 194, 198], "coconpi": [12, 126], "npy_dir": [12, 126], "npy": [12, 126], "tensorflowdataset": 13, "pytorchdataset": 13, "mxnetdataset": 13, "onnxrtqldataset": 13, "onnxrtitdataset": 13, "IT": [13, 20, 184], "pytorchmxnetwrapdataset": 13, "datafunc": 13, "pytorchmxnetwrapfunct": [13, 27], "framework_dataset": 13, "convent": [13, 32, 87, 100, 129, 146], "imageclassifi": 13, "choos": [13, 78, 92, 97, 138, 152, 184, 190, 192, 195, 197], "tensorflow_itex": [13, 16, 18, 20, 125, 185], "onnxrt_qdq": [13, 20, 185], "onnxrt_qlinearop": [13, 20, 27, 185], "onnxrt_integerop": [13, 20, 27, 185], "pytorch_ipex": [13, 20, 143, 185, 197], "pytorch_fx": [13, 20, 143, 185], "dataset_registri": 13, "dataset_typ": 13, "dataset_format": 13, "data_format": [13, 23], "eg": [13, 126, 185], "raw_imag": 13, "overwrit": [13, 157, 161], "__getitem__": [13, 27, 125, 126, 143], "__len__": [13, 126], "size": [13, 19, 23, 27, 45, 47, 83, 87, 90, 91, 97, 99, 106, 125, 126, 131, 134, 143, 146, 164, 165, 181, 183, 186, 187, 189, 192, 194, 197, 198], "iterabledataset": 13, "also": [13, 27, 29, 36, 47, 49, 91, 92, 93, 94, 97, 100, 102, 105, 106, 107, 125, 128, 132, 136, 138, 142, 143, 147, 152, 157, 158, 161, 164, 165, 166, 169, 170, 181, 183, 184, 186, 188, 189, 192, 195], "__iter__": [13, 125, 126, 143], "over": [13, 36, 106, 132, 136, 138, 142, 155, 164, 170, 174, 183, 185, 192, 195], "download_url": 13, "url": [13, 100, 140, 175, 176, 183], "filenam": [13, 83, 126, 170], "md5": 13, "download": [13, 126, 128, 139, 169, 175, 190], "address": [13, 88, 96, 99, 124, 144, 166, 169, 172, 184], "gen_bar_updat": 13, "progress": [13, 158, 164, 166, 183, 186], "bar": [13, 164, 184], "check_integr": 13, "fpath": 13, "check": [13, 73, 82, 83, 95, 104, 128, 131, 139, 148, 150, 152, 159, 162, 163, 167, 170, 173, 174, 190], "checksum": 13, "calculate_md5": 13, "chunk_siz": 13, "1024": [13, 150], "cifar10": [13, 126], "cifar100": [13, 126], "databas": [13, 172], "extract": [13, 67, 126], "otherwis": [13, 27, 83, 91, 99, 106, 126, 159, 162, 185, 189, 194], "www": [13, 126, 198], "c": [13, 83, 91, 97, 126, 134, 189, 195], "toronto": [13, 126], "edu": [13, 126], "kriz": [13, 126], "cifar": [13, 126, 198], "python": [13, 28, 83, 85, 101, 104, 124, 126, 128, 131, 134, 139, 143, 149, 155, 158, 164, 168, 169, 171, 172, 174, 177, 179, 183, 184, 194], "tar": [13, 126, 128, 159, 162], "gz": [13, 126, 128, 159, 162], "manual": [13, 126, 147, 153, 155, 158, 172, 177, 178, 179, 183], "subset": [13, 16, 126, 169], "internet": [13, 126, 166], "put": [13, 126, 129], "again": [13, 126, 167, 169, 188], "pytorchcifar10": 13, "mxnetcifar10": 13, "tensorflowcifar10": 13, "pytorchcifar100": 13, "mxnetcifar100": 13, "tensorflowcifar100": 13, "mnist": [13, 126, 131], "modifi": [13, 67, 101, 107, 131, 135, 168, 169, 183, 197], "nation": [13, 99], "institut": 13, "standard": [13, 27, 100, 106, 124, 128, 133, 142, 194, 195], "technologi": [13, 87, 141, 143, 146], "fashionmnist": [13, 126], "npz": [13, 126], "idx1": [13, 126], "ubyt": [13, 126], "idx3": [13, 126], "t10k": [13, 126], "pytorchmnist": 13, "mxnetmnist": 13, "tensorflowmnist": 13, "pytorchfashionmnist": 13, "mxnetfashionmnist": 13, "tensorflowfashionmnist": 13, "imagefold": [13, 126, 131, 143], "expect": [13, 91, 93, 97, 99, 100, 134, 141, 164, 186, 189, 195], "folder": [13, 18, 37, 49, 82, 91, 92, 126, 152, 157, 161, 170, 177, 178, 179, 189, 193], "subfold": [13, 167], "repres": [13, 18, 32, 34, 36, 90, 95, 97, 99, 107, 123, 126, 133, 172, 183, 186, 187, 195], "belong": [13, 41, 186], "class_1": [13, 126], "xxx": [13, 126, 143], "png": [13, 126], "xxy": [13, 126], "xxz": [13, 126], "class_n": [13, 126], "123": [13, 126, 194], "nsdf3": [13, 126], "asd932_": [13, 126], "categori": [13, 31, 122, 126, 154], "mxnetimagefold": 13, "tensorflowtfrecorddataset": 13, "tensorflowimagerecord": 13, "imagenet": [13, 16, 23, 93, 102, 128, 143, 153, 169, 183, 193, 194, 197, 198], "000": [13, 104, 126], "001": [13, 97, 126, 131, 192, 197], "099": [13, 126], "follow": [13, 29, 32, 87, 88, 89, 94, 97, 99, 100, 101, 102, 104, 105, 106, 107, 124, 125, 126, 129, 130, 131, 135, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 157, 161, 166, 168, 169, 172, 177, 182, 183, 185, 186, 189, 192, 193, 195], "tensorflowvocrecord": 13, "pascal": 13, "voc": [13, 36], "2012": 13, "val": [13, 16, 128, 143, 169], "00000": 13, "00004": 13, "00001": 13, "00003": 13, "dummi": [14, 15, 36, 95, 104, 126, 136, 142, 143, 166], "dummydataset": [14, 15, 95], "shape": [14, 15, 23, 27, 32, 91, 95, 97, 104, 126, 135, 136, 143, 166, 167, 189, 192, 194], "high": [14, 15, 95, 126, 128, 139, 169, 184, 195], "127": [14, 15, 97, 126, 186, 192], "float32": [14, 15, 27, 32, 78, 91, 97, 105, 122, 126, 143, 186, 189, 192, 194], "rang": [14, 15, 27, 68, 78, 86, 87, 88, 91, 92, 95, 97, 104, 105, 107, 123, 126, 128, 129, 130, 131, 143, 146, 167, 169, 182, 183, 186, 189, 192, 194], "stand_norm": [14, 15, 126], "real": [14, 97, 106, 123, 131, 166, 173, 184, 186], "dummy_v2": [15, 126], "sparse_dummy_v2": [15, 126], "input_shap": [15, 126], "label_shap": [15, 126], "sparsedummydataset": 15, "dense_shap": [15, 126], "sparse_ratio": [15, 126], "imagenetraw": [16, 126], "data_path": [16, 126], "image_list": [16, 126], "img1": [16, 126], "img2": [16, 126], "imgx": [16, 126], "read": [16, 27, 126, 188, 191], "val_map": [16, 126], "txt": [16, 126, 128, 139, 166, 168, 169, 171, 172], "pytorchimagenetraw": 16, "mxnetimagenetraw": 16, "tensorflowimagenetraw": 16, "inteltensorflow": [16, 18], "tensorflowimagenetdataset": 16, "onnxrtimagenetdataset": 16, "class": [17, 37, 49, 91, 92, 93, 95, 96, 101, 102, 106, 124, 125, 126, 129, 142, 143, 155, 181, 182, 186, 190, 193, 195, 197], "bert_dataset": 17, "coco_dataset": 17, "dummy_dataset": 17, "dummy_dataset_v2": 17, "imagenet_dataset": 17, "style_transfer_dataset": 17, "style": [18, 124, 126, 137], "transfer": [18, 97, 126, 129, 130, 143, 192], "styletransferdataset": 18, "content_fold": [18, 126], "style_fold": [18, 126], "crop_ratio": [18, 126], "resize_shap": [18, 126], "256": [18, 23, 126, 131, 143, 194], "image_format": [18, 126], "holder": [18, 126], "labelbalancecocorecordfilt": 19, "balanc": [19, 87, 89, 91, 95, 97, 146, 189, 192], "labelbalancecocorawfilt": 19, "tensorflowfilt": 20, "onnxrtqlfilt": 20, "mode": [20, 32, 45, 65, 80, 82, 83, 91, 92, 105, 106, 128, 138, 157, 161, 169, 170, 186, 188, 189, 195], "onnxrtitfilt": 20, "pytorchfilt": 20, "mxnetfilt": 20, "filter_registri": 20, "filter_typ": 20, "__call__": 20, "write": [20, 83, 131, 137, 143, 147, 193], "coco_filt": 21, "quantizedinput": [23, 194], "uint8": [23, 32, 67, 95, 97, 105, 126, 135, 185, 186, 194, 197], "point": [23, 33, 34, 53, 83, 86, 87, 88, 89, 90, 91, 94, 97, 142, 146, 164, 169, 170, 186, 189, 192, 194, 195], "labelshift": [23, 194], "label_shift": [23, 194], "parsedecodeimagenet": [23, 194], "proto": [23, 27, 194], "parsedecodeimagenettransform": 23, "decod": [23, 29, 142, 194], "v1": [23, 33, 34, 36, 45, 89, 131, 133, 134, 142, 145, 168, 183, 190, 191, 192, 198], "tensorflowtransposelastchannel": 23, "transpos": [23, 27, 74, 189, 194], "nhwc": 23, "nchw": 23, "tensorflowshiftrescal": 23, "rescal": [23, 27, 194], "tensorflowresizecropimagenettransform": 23, "height": [23, 27, 131, 194, 197], "width": [23, 27, 97, 123, 131, 183, 186, 194, 197], "random_crop": [23, 194], "resize_sid": [23, 194], "resize_method": 23, "bilinear": [23, 27, 194], "random_flip_left_right": [23, 194], "mean_valu": [23, 194], "channels_last": [23, 147], "subpixel": 23, "rgb": 23, "seri": [23, 104, 139, 143, 194], "applic": [23, 91, 93, 97, 107, 133, 147, 164, 166, 172, 173, 177, 178, 184, 189, 192, 193, 194, 196], "result": [23, 27, 29, 32, 33, 34, 36, 49, 56, 68, 82, 83, 86, 89, 91, 94, 96, 97, 99, 102, 104, 125, 128, 129, 131, 138, 140, 142, 143, 152, 153, 164, 165, 168, 172, 173, 174, 175, 181, 183, 184, 186, 189, 191, 192, 193, 194, 195, 196, 198], "crop": [23, 27, 126, 194], "flip": [23, 27, 194], "left": [23, 27, 97, 158, 164, 192, 194], "right": [23, 32, 97, 99, 100, 101, 164, 170, 192, 194], "std": [23, 27, 143, 194], "bilinearimagenettransform": 23, "central_fract": [23, 194], "875": [23, 194], "fraction": [23, 194], "onnxbilinearimagenettransform": 23, "onnxresizecropimagenettransform": 23, "std_valu": 23, "229": [23, 143], "225": [23, 143, 198], "resizewithaspectratio": 23, "87": [23, 198], "inter_pol": 23, "cv2": 23, "inter_area": 23, "aspect": [23, 27, 194], "imagenet_transform": 24, "postprocess_cl": [25, 143], "user_postprocess": 25, "just": [25, 27, 47, 90, 95, 97, 102, 143, 154, 158, 164, 172, 182, 186, 192, 194, 195], "collect": [25, 27, 34, 36, 69, 83, 95, 97, 106, 186, 193, 195], "info": [25, 41, 78, 79, 83, 101, 124, 128, 145, 174, 179], "convert_to_unicod": 26, "text": [26, 27, 29, 34, 87, 89, 91, 97, 133, 140, 146, 153, 175, 178, 179, 183, 184, 189, 192, 194, 198], "unicod": 26, "assum": [26, 32, 105, 135, 164], "utf": 26, "load_vocab": 26, "vocab_fil": [26, 27, 194], "convert_by_vocab": 26, "vocab": 26, "whitespace_token": 26, "whitespac": [26, 34], "clean": [26, 143], "split": [26, 27, 97, 101, 187, 189, 192, 194], "piec": [26, 29, 91, 97, 142, 189], "fulltoken": 26, "tokenzi": 26, "basictoken": 26, "punctuat": [26, 29, 34], "lower": [26, 27, 34, 54, 86, 87, 90, 95, 97, 130, 146, 183, 184, 186, 192, 194, 195], "wordpiecetoken": 26, "unk_token": 26, "unk": 26, "max_input_chars_per_word": 26, "200": [26, 91, 101, 173, 195], "wordpiec": [26, 27, 194], "concat_gener": 27, "inc": [27, 92, 95, 96, 99, 104, 106, 141, 147, 154, 164, 166, 171, 184, 185, 190, 195], "abstract": [27, 105, 107, 137], "own": [27, 47, 97, 102, 106, 125, 126, 138, 142, 166, 170, 181, 189, 191, 196], "inherit": [27, 102, 105, 106, 126], "tensorflowtransform": 27, "mxnettransform": 27, "pytorchtransform": 27, "onnxrtqltransform": 27, "onnxrtittransform": 27, "transform_registri": 27, "transform_typ": 27, "basetransform": 27, "tensorflowwrapfunct": 27, "transform_func": 27, "wrapper": [27, 32, 36, 41, 45, 95, 188], "pytorchmxnettransform": 27, "get_torchvision_map": 27, "interpol": [27, 142, 183, 194], "torchvis": [27, 104, 132, 136, 147, 153, 167], "composetransform": 27, "transform_list": [27, 194], "compos": [27, 71, 194], "sever": [27, 87, 88, 97, 102, 128, 129, 130, 138, 143, 144, 146, 157, 161, 172, 183, 185, 187, 192, 194, 195, 197], "croptoboundingbox": [27, 194], "offset_height": [27, 194], "offset_width": [27, 194], "target_height": [27, 194], "target_width": [27, 194], "box": [27, 32, 36, 101, 142, 147, 158, 164, 193, 194, 195], "vertic": [27, 194], "coordin": [27, 53, 171, 194, 195], "top": [27, 36, 100, 142, 164, 167, 169, 194], "corner": [27, 100, 105, 107, 194], "horizont": [27, 194], "mxnetcroptoboundingbox": 27, "onnxrtcroptoboundingbox": 27, "tensorflowcroptoboundingbox": 27, "resizewithratio": [27, 194], "min_dim": [27, 194], "800": [27, 194], "max_dim": [27, 194], "1365": [27, 194], "constant_valu": 27, "np": [27, 53, 131, 174, 192, 194, 195], "arrai": [27, 32, 83, 194], "smaller": [27, 87, 129, 143, 146, 183, 194], "dimens": [27, 91, 126, 129, 189, 194], "ensur": [27, 53, 90, 93, 131, 186, 194], "longest": [27, 194], "side": [27, 126, 158, 194], "doesn": [27, 88, 95, 105, 131, 143, 144, 165, 197], "exce": [27, 189, 194], "zero": [27, 83, 87, 90, 91, 97, 104, 146, 169, 183, 186, 189, 192, 194, 195], "so": [27, 67, 87, 91, 92, 95, 97, 101, 105, 128, 134, 138, 144, 146, 150, 152, 168, 169, 170, 186, 188, 189, 192, 193, 194, 196], "tensorflowresizewithratio": 27, "perm": [27, 194], "permut": [27, 194], "tensorflowtranspos": 27, "mxnettranspos": 27, "pytorchtranspos": 27, "randomverticalflip": [27, 194], "given": [27, 32, 49, 92, 96, 102, 107, 183, 192, 194], "randomli": [27, 53, 97, 102, 192, 194, 195], "tensorflowrandomverticalflip": 27, "randomhorizontalflip": [27, 143, 194], "tensorflowrandomhorizontalflip": 27, "toarrai": [27, 194], "pil": [27, 194], "ndarrai": [27, 69, 134, 194], "numpi": [27, 32, 134, 192, 194], "casttftransform": 27, "castonnxtransform": 27, "castpytorchtransform": 27, "centercroptftransform": 27, "center": [27, 103, 104, 139, 194, 195], "paddedcentercroptransform": 27, "crop_pad": 27, "resizetftransform": 27, "nearest": [27, 91, 92, 97, 189, 194], "bicub": [27, 194], "resizepytorchtransform": 27, "randomcroptftransform": 27, "randomresizedcroppytorchtransform": 27, "08": [27, 194, 198], "randomresizedcropmxnettransform": 27, "randomresizedcroptftransform": 27, "normalizetftransform": 27, "normal": [27, 34, 91, 97, 143, 173, 181, 189, 192, 194], "deviat": [27, 128, 194], "broadcast": [27, 131, 194], "rescalekeraspretraintransform": 27, "rescaletftransform": 27, "rescaletransform": 27, "alignimagechanneltransform": 27, "dim": [27, 97, 192, 194], "align": [27, 99, 189, 194], "w": [27, 89, 97, 183, 192, 194], "must": [27, 32, 100, 101, 106, 122, 125, 139, 186, 194], "pytorchalignimagechannel": 27, "tondarraytransform": 27, "resizemxnettransform": 27, "resizetransform": 27, "cropresizetftransform": 27, "boundari": [27, 194], "area": [27, 32, 87, 142, 146, 194], "pytorchcropresizetransform": 27, "mxnetcropresizetransform": 27, "cropresizetransform": 27, "centercroptransform": 27, "mxnetnormalizetransform": 27, "pytorchnormalizetransform": 27, "normalizetransform": 27, "randomcroptransform": 27, "randomresizedcroptransform": 27, "get_final_text": 27, "pred_text": 27, "orig_text": 27, "project": [27, 98, 99, 100, 170, 184, 191, 195, 199], "predict": [27, 29, 33, 34, 36, 49, 91, 97, 102, 129, 142, 155, 189, 192, 193, 194], "back": [27, 128, 164, 170], "squadexampl": 27, "qas_id": 27, "question_text": 27, "doc_token": 27, "orig_answer_text": 27, "start_posit": 27, "end_posit": 27, "is_imposs": 27, "simpl": [27, 95, 97, 139, 143, 183, 191, 192, 195], "without": [27, 67, 87, 97, 99, 129, 131, 143, 146, 155, 166, 169, 183, 184, 185, 186, 195, 196], "answer": [27, 33, 34, 99, 169, 183, 194, 198], "posit": [27, 99, 142, 147, 172, 177, 178, 179], "unique_id": 27, "example_index": 27, "doc_span_index": 27, "token_to_orig_map": 27, "token_is_max_context": 27, "input_mask": [27, 143], "segment_id": [27, 143], "read_squad_exampl": 27, "input_fil": 27, "doc_strid": [27, 194], "max_query_length": [27, 194], "output_fn": 27, "inputbatch": 27, "collecttransform": 27, "10833": 27, "tfsquadv1posttransform": 27, "n_best_siz": [27, 194], "20": [27, 169, 172, 177, 178, 179, 183, 194, 197, 198], "384": [27, 194], "64": [27, 88, 96, 97, 102, 141, 189, 192, 194, 198], "max_answer_length": [27, 194], "30": [27, 132, 136, 138, 194, 198], "total": [27, 36, 91, 126, 128, 183, 189, 194, 198], "best": [27, 58, 91, 92, 93, 94, 96, 99, 102, 104, 124, 139, 147, 153, 164, 170, 181, 186, 189, 192, 194, 195], "nbest_predict": [27, 194], "question": [27, 33, 34, 97, 99, 100, 104, 105, 139, 147, 171, 183, 192, 194, 198], "becaus": [27, 94, 97, 101, 169, 186, 192, 194, 195], "anoth": [27, 29, 83, 128, 129, 157, 161, 194, 195], "up": [27, 97, 104, 131, 132, 135, 138, 155, 159, 162, 164, 183, 184, 185, 186, 191, 194, 195, 197], "long": [27, 91, 124, 134, 189, 194], "document": [27, 88, 93, 94, 97, 106, 107, 112, 131, 141, 144, 149, 159, 162, 163, 170, 171, 173, 183, 190, 194, 196], "chunk": [27, 194], "stride": [27, 194], "tfmodelzoocollecttransform": 27, "zoo": [27, 104, 132, 136, 198], "tfsquadv1modelzooposttransform": 27, "squadv1": [27, 194], "see": [27, 29, 91, 97, 99, 100, 101, 103, 124, 140, 143, 157, 158, 161, 164, 165, 169, 170, 189, 192, 193, 195], "parsedecodevoctransform": 27, "intel": [28, 35, 36, 48, 49, 57, 63, 72, 85, 88, 89, 90, 91, 92, 93, 95, 96, 97, 99, 100, 102, 103, 105, 106, 107, 123, 126, 127, 129, 130, 132, 133, 135, 136, 140, 141, 144, 145, 147, 152, 154, 155, 166, 167, 168, 169, 171, 172, 181, 182, 183, 184, 186, 188, 189, 190, 192, 193, 195, 196, 197, 198], "open": [28, 71, 85, 99, 104, 133, 134, 143, 159, 162, 165, 166, 170, 171, 172, 184], "librari": [28, 85, 88, 95, 104, 139, 143, 144, 149, 158, 164, 184, 186], "popular": [28, 85, 92, 96, 97, 104, 105, 106, 123, 129, 132, 133, 136, 141, 143, 183, 186, 189, 195, 196], "compress": [28, 47, 68, 78, 85, 89, 91, 92, 94, 96, 97, 104, 112, 129, 138, 143, 164, 166, 181, 182, 183, 184, 186, 192, 196, 198], "techniqu": [28, 85, 90, 95, 96, 97, 104, 138, 143, 147, 166, 182, 183, 184, 185, 186, 196, 197, 198], "contrib": 28, "script": [29, 30, 33, 34, 100, 104, 131, 138, 147, 151, 154, 155, 158, 175, 177, 184], "unicoderegex": 29, "hoc": 29, "hack": 29, "recogn": [29, 195], "symbol": [29, 37, 49, 101, 145], "nondigit_punct_r": 29, "compil": [29, 86, 90, 143], "regular": 29, "express": [29, 99], "preced": [29, 97, 192, 195], "digit": [29, 83, 184], "punct_nondigit_r": 29, "symbol_r": 29, "bleu_token": 29, "offici": [29, 33, 34, 99, 192], "mose": 29, "smt": 29, "mosesdecod": 29, "blob": [29, 30, 33, 34, 36, 49, 143, 153, 175, 178, 179], "master": [29, 30, 33, 34, 36, 49, 143, 195], "mteval": 29, "v14": 29, "pl": 29, "l954": 29, "l983": 29, "comput": [29, 30, 33, 34, 36, 68, 83, 87, 88, 90, 91, 97, 123, 125, 130, 133, 142, 143, 144, 146, 147, 158, 167, 183, 184, 186, 189, 192, 195], "bilingu": 29, "understudi": 29, "qualiti": [29, 124], "ha": [29, 88, 93, 95, 97, 100, 102, 105, 106, 107, 125, 133, 138, 143, 144, 150, 164, 169, 170, 172, 175, 183, 185, 186, 188, 191, 192, 195], "been": [29, 88, 91, 95, 97, 102, 107, 124, 129, 143, 144, 164, 189, 192], "machin": [29, 91, 133, 139, 150, 164, 166, 172, 184, 192, 193], "translat": [29, 30, 87, 146, 183, 195], "natur": [29, 91, 133], "approxim": [29, 30, 91, 106, 142, 189], "glue": [29, 36, 126, 142, 143, 153], "word": [29, 91, 97, 124, 142, 183, 189, 198], "ngram": [29, 142], "order": [29, 30, 53, 58, 67, 91, 96, 97, 101, 128, 142, 167, 185, 189, 192, 193, 195], "breviti": [29, 30, 142], "penalti": [29, 30, 142], "doe": [29, 67, 90, 91, 124, 125, 126, 142, 143, 189, 190, 194], "have": [29, 32, 36, 49, 67, 87, 88, 89, 91, 96, 97, 99, 100, 106, 107, 124, 125, 126, 128, 131, 135, 140, 142, 143, 144, 146, 147, 164, 167, 170, 172, 177, 178, 179, 181, 183, 186, 187, 189, 192, 195, 196], "beam": [29, 142], "bleu": [30, 35, 142, 183], "tensor2tensor": 30, "bleu_hook": 30, "compute_bleu": 30, "reference_corpu": 30, "translation_corpu": 30, "max_ord": 30, "use_bp": 30, "against": 30, "gram": 30, "appli": [30, 87, 90, 94, 95, 96, 97, 99, 106, 107, 143, 146, 147, 149, 155, 164, 168, 169, 174, 182, 183, 186, 188, 191, 192, 195, 196, 197], "bleu_scor": 30, "third": [32, 100, 140], "parti": [32, 97, 100, 140, 186], "pycocotool": [32, 134], "within": [32, 45, 88, 99, 101, 107, 123, 144, 157, 161, 164, 172, 183, 184, 189, 192, 195], "note": [32, 59, 86, 89, 90, 91, 94, 97, 102, 104, 106, 107, 124, 125, 128, 131, 133, 135, 139, 141, 143, 149, 152, 157, 161, 164, 166, 170, 172, 174, 183, 186, 189, 192, 193, 195, 196, 197], "noth": [32, 195], "relat": [32, 67, 71, 107, 147, 171, 172, 183, 189, 197], "thu": [32, 97, 143, 183, 186], "cannot": [32, 91, 101, 124, 134, 189, 193], "slim": [32, 43, 45, 145, 183], "jonathanhuang": 32, "wrap": [32, 101, 131, 159, 162], "usag": [32, 92, 93, 97, 106, 126, 131, 132, 147, 155, 166, 172, 177, 178, 179, 181, 185, 189, 194], "image_id": [32, 142], "encod": [32, 167, 194], "element": [32, 83, 87, 91, 97, 126, 138, 142, 146, 183, 189, 192], "invok": [32, 106], "groundtruth_dict": 32, "exportgroundtruthtococo": 32, "groundtruth_boxes_list": 32, "groundtruth_classes_list": 32, "max_num_class": 32, "output_path": 32, "detections_list": 32, "exportdetectionstococo": 32, "detection_boxes_list": 32, "detection_scores_list": 32, "detection_classes_list": 32, "cocowrapp": 32, "loadannot": 32, "cocoevalwrapp": 32, "agnostic_mod": 32, "computemetr": 32, "ani": [32, 34, 64, 80, 83, 92, 95, 99, 104, 107, 124, 131, 147, 152, 165, 166, 170, 171, 183, 191, 195], "detection_typ": 32, "bbox": [32, 101, 142], "hold": [32, 53, 126], "being": [32, 107, 172], "iou_typ": 32, "iou_thr": [32, 36, 142], "map_point": [32, 36, 142], "cocoev": 32, "To": [32, 47, 87, 88, 89, 90, 91, 94, 96, 97, 100, 104, 106, 107, 124, 126, 128, 131, 144, 146, 148, 151, 157, 159, 161, 162, 166, 170, 183, 185, 188, 189, 190, 192, 195, 197], "mscoco": 32, "org": [32, 101, 128, 139, 159, 162, 183], "Then": [32, 97, 106, 128, 157, 159, 161, 162, 169, 192, 195], "exportsingleimagegroundtruthtococo": 32, "next_annotation_id": 32, "category_id_set": 32, "groundtruth_box": 32, "groundtruth_class": 32, "groundtruth_mask": 32, "groundtruth_is_crowd": 32, "ingest": 32, "api": [32, 36, 49, 64, 65, 83, 89, 91, 96, 97, 101, 104, 108, 110, 114, 117, 120, 128, 133, 138, 139, 143, 149, 153, 154, 155, 171, 172, 176, 190, 191, 195, 199], "here": [32, 89, 90, 94, 95, 97, 106, 126, 131, 132, 133, 135, 136, 141, 142, 152, 159, 162, 164, 167, 170, 172, 186, 190, 191, 192, 198], "match": [32, 33, 90, 104, 129, 165, 189], "ones": [32, 183], "exportsingleimagedetectionstococo": 32, "associ": 32, "alwai": [32, 36, 49, 96, 128, 142, 143, 169, 189], "uniqu": [32, 97, 186], "identifi": [32, 45, 96, 172, 183, 189], "assign": [32, 83, 131, 185, 195], "continu": [32, 102, 141, 143, 165, 183, 196], "drop": [32, 88, 89, 91, 97, 100, 143, 144, 158, 183, 189, 192, 198], "num_gt_box": 32, "num_detect": [32, 36, 142, 143, 197], "image_height": 32, "image_width": 32, "detection_mask": 32, "crowd": 32, "rais": [32, 37, 104, 124, 166, 183, 184], "valueerror": [32, 134], "insid": [32, 129, 130, 165, 183, 187, 195], "exportsingleimagedetectionboxestococo": 32, "detection_box": [32, 143, 197], "detection_scor": [32, 143, 197], "detection_class": [32, 143, 197], "exporsingleimagedetectionboxestococo": 32, "exportsingleimagedetectionmaskstococo": 32, "allenai": [33, 34], "bi": [33, 34], "att": [33, 34], "flow": [33, 34, 97, 101, 102, 143], "f1_score": [33, 34], "ground_truth": [33, 34], "f1": [33, 35, 36, 131, 142, 143, 167, 191, 198], "ground": [33, 34], "truth": [33, 34], "metric_max_over_ground_truth": [33, 34], "metric_fn": [33, 34], "exact_match_scor": 33, "exact": 33, "averag": [33, 34, 36, 91, 142, 143, 189, 195, 198], "articl": [33, 34], "paragraph": [33, 34], "qa": [33, 34, 104], "normalize_answ": 34, "remov": [34, 99, 143, 157, 161, 170, 177, 178, 183, 193], "extra": [34, 91, 143, 189], "replac": [34, 86, 87, 90, 124, 131, 143, 146, 155, 190], "newlin": [34, 83], "tab": [34, 164, 193], "abc": [34, 105, 193, 195], "harmon": [34, 36], "recal": [34, 36], "equat": [34, 36, 97, 186, 192], "answer_start": 34, "177": [34, 198], "denver": 34, "bronco": 34, "nfl": 34, "team": [34, 99, 188], "afc": 34, "super": [34, 102], "bowl": 34, "50": [34, 97, 102, 106, 169, 183, 192, 198], "56be4db0acb8001400a502ec": 34, "form": [34, 128, 129, 164], "percentag": [34, 91, 123, 189, 197], "bleu_util": 35, "coco_label_map": 35, "coco_tool": 35, "evaluate_squad": 35, "user_metr": [36, 49], "metric_cl": [36, 49, 143], "recommend": [36, 104, 105, 126, 135, 155, 158, 163, 165, 183, 185, 195], "design": [36, 54, 90, 92, 95, 102, 104, 143, 152, 155, 183, 186, 196], "sub_class": [36, 49], "basemetr": [36, 49], "tensorflowmetr": 36, "maintain": [36, 90, 91, 95, 97, 99, 100, 124, 145, 147, 159, 162, 166, 171, 172, 183, 189, 190], "pytorchmetr": 36, "mxnetmetr": 36, "onnxrtqlmetr": 36, "onnxrtitmetr": 36, "metric_registri": 36, "metric_typ": 36, "cross": [36, 137, 195], "decorator_metr": 36, "single_output": 36, "hvd": [36, 131], "wrappytorchmetr": 36, "wrapmxnetmetr": 36, "wraponnxrtmetr": 36, "binari": [36, 134, 142, 159, 162, 190], "proport": 36, "were": [36, 150, 183], "pred_list": 36, "pytorchloss": 36, "print": [36, 83, 97, 131, 142, 143, 166, 167, 183, 192, 195], "mae": [36, 142], "compare_label": [36, 49, 142], "error": [36, 58, 79, 91, 97, 128, 142, 148, 169, 170, 173, 189, 192, 195], "actual": [36, 90, 131], "compar": [36, 83, 87, 90, 91, 96, 97, 130, 142, 146, 167, 183, 186, 189, 191, 193, 195], "pred": [36, 142], "rmse": [36, 142, 195], "squar": [36, 58, 91, 128, 142, 169, 195], "estim": [36, 45, 195], "tensorflowtopk": 36, "k": [36, 49, 142, 166, 183], "among": [36, 87, 97, 146, 158, 192], "outcom": 36, "consid": [36, 99, 123, 124, 129, 165, 195], "find": [36, 53, 83, 96, 105, 128, 141, 150, 157, 161, 164, 165, 167, 169, 183, 189, 191, 192, 193, 195], "num_correct": 36, "num_sampl": 36, "generaltopk": 36, "cocomapv2": [36, 142], "anno_path": [36, 142], "95": [36, 141, 142, 198], "map_kei": 36, "detectionboxes_precis": 36, "output_index_map": [36, 142], "tensorflowmap": 36, "tensorflowcocomap": 36, "tensorflowvocmap": 36, "squadf1": [36, 142], "miou": 36, "num_class": 36, "21": [36, 97, 141, 152, 153, 175, 178, 179, 184, 192, 198], "iou": 36, "intersect": [36, 105, 142], "union": [36, 68, 92, 95, 142, 175], "onnxrtglu": 36, "roc": 36, "dlrm": 36, "register_customer_metr": 36, "mani": [36, 49, 91, 95, 97, 124, 125, 139, 189, 195, 197], "tell": [36, 49, 185], "what": [36, 49, 68, 95, 99, 184], "topk": [36, 49, 131, 142, 143, 166, 186], "matrix": [36, 49, 94, 97, 104, 155, 196], "updat": [36, 49, 80, 91, 134, 141, 142, 143, 150, 155, 158, 174, 183, 189, 192, 195, 196], "across": [37, 87, 96, 127, 143, 146, 171, 174, 183, 187, 192, 195], "frozen": [37, 45, 49, 145], "graph_def": [37, 45, 49, 74], "ckpt": [37, 45, 49, 198], "savedmodel": [37, 45, 49], "onnx_ml_pb2": [37, 145], "modelproto": [37, 73, 145], "gluon": [37, 49, 145], "hybirdblock": [37, 49], "mixed_precis": [37, 143], "obj": [37, 47, 49, 68, 71, 83], "measur": [37, 77, 91, 95, 97, 102, 105, 122, 128, 129, 142, 143, 189, 193, 195], "variou": [37, 87, 90, 92, 95, 107, 138, 146, 147, 174, 183, 185, 187], "dl": [37, 128, 137, 151, 164, 184, 198], "assertionerror": 37, "basemodel": [38, 95], "plai": [38, 91, 97, 184, 189, 192], "graph": [38, 45, 86, 90, 97, 101, 105, 126, 129, 131, 137, 145, 147, 166, 169, 186, 187, 188, 193], "role": [38, 91, 97, 189, 192], "base_model": 39, "keras_model": 39, "mxnet_model": 39, "nets_factori": 39, "onnx_model": [39, 167], "tensorflow_model": [39, 169], "torch_model": 39, "kerasmodel": 40, "get_model_fwk_nam": 41, "fwk": 41, "mxnetmodel": 42, "net": [43, 104], "factori": 43, "tfslimnetsfactori": 43, "onnxmodel": 44, "get_model_typ": 45, "validate_graph_nod": 45, "node_nam": [45, 106], "node": [45, 73, 75, 105, 128, 131, 167, 171, 174, 177, 178, 179, 187, 193, 195, 198], "compat": [45, 100, 131, 145, 159, 162, 164, 183, 190], "graphdef": [45, 145], "validate_and_inference_input_output": 45, "input_tensor_nam": 45, "output_tensor_nam": 45, "infer": [45, 47, 49, 68, 88, 89, 90, 91, 94, 95, 97, 104, 105, 106, 123, 129, 130, 143, 144, 164, 181, 183, 184, 186, 189, 192, 193, 195], "graph_sess": 45, "session": [45, 143, 193], "sess": 45, "graph_def_sess": 45, "frozen_pb_sess": 45, "load_saved_model": 45, "saved_model_tag": 45, "signatur": 45, "tag": [45, 97, 192, 193], "metagraphdef": 45, "analyz": [45, 191, 192, 193], "input_tensor": 45, "output_tensor": 45, "try_loading_kera": 45, "try": [45, 95, 97, 101, 104, 128, 167, 183, 186, 192, 195], "keras_sess": 45, "slim_sess": 45, "checkpoint_sess": 45, "estimator_sess": 45, "input_fn": 45, "saved_model_sess": 45, "tensorflowbasemodel": 45, "tensorflowsavedmodelmodel": 45, "tensorflowllmmodel": 45, "exceed": 45, "protobuf": [45, 167], "2gb": 45, "tensorflowqatmodel": 45, "tensorflowcheckpointmodel": 45, "checkpoint": [45, 82, 145], "tensorflowmodel": 45, "pytorchbasemodel": 46, "pytorchmodel": 46, "pytorchfxmodel": 46, "ipexmodel": 46, "driven": [47, 104, 143, 164, 181, 193], "develop": [47, 87, 88, 100, 101, 124, 139, 143, 144, 146, 147, 153, 164, 170, 183, 184, 188, 191], "objective_registri": 47, "objective_custom_registri": 47, "obj_cl": 47, "eural_compressor": 47, "objective_cl": 47, "user_object": 47, "__class__": 47, "__name__": 47, "objective_cfg": 47, "deep_get": [47, 83], "usr_cfg": 47, "deep_set": [47, 83], "user_obj_cfg": 47, "With": [47, 95, 97, 101, 105, 107, 125, 143, 152, 157, 161, 165, 171, 181, 183, 184, 186, 191, 192, 195, 198], "easili": [47, 96, 97, 105, 148, 152, 164, 181, 192], "special": [47, 92, 101, 125, 142, 143, 181, 183, 189, 196], "peak": [47, 181], "memori": [47, 83, 87, 88, 89, 91, 94, 97, 123, 125, 130, 143, 144, 146, 147, 181, 183, 186, 187, 189, 192, 195, 198], "block": [47, 87, 91, 138, 146, 181, 183, 189, 195], "multiobject": 47, "metric_criterion": 47, "metric_weight": 47, "obj_criterion": 47, "obj_weight": 47, "is_measur": 47, "calib_dataload": [49, 93, 94, 95, 96, 101, 104, 125, 126, 128, 136, 137, 142, 143, 166, 167, 186, 187, 188, 189], "calib_func": [49, 188], "entir": [49, 68, 89, 94, 101, 106, 107, 123, 171, 183], "autotunestrategi": 50, "There": [50, 52, 86, 90, 94, 97, 124, 128, 129, 135, 138, 143, 147, 169, 171, 172, 189, 192, 195, 197], "stage": [50, 52, 59, 129, 183, 193, 195], "sequenti": [50, 52, 96, 195], "onc": [50, 52, 106, 107, 125, 164, 170, 183, 184, 195, 198], "polici": [50, 52, 58, 96, 99, 104, 197, 199], "automixedprecisiontunestrategi": 51, "basictunestrategi": 52, "bayesiantunestrategi": 53, "acq_max": 53, "ac": 53, "gp": 53, "y_max": 53, "n_warmup": 53, "10000": [53, 183], "n_iter": 53, "acquisit": 53, "gaussian": [53, 195], "relev": [53, 106, 107, 124, 169, 183], "known": [53, 87, 143, 146, 183, 186, 193, 195], "limit": [53, 83, 87, 91, 92, 95, 104, 128, 129, 141, 146, 186, 189, 190, 193], "acq": 53, "randomst": 53, "scipi": 53, "x_max": 53, "targetspac": 53, "pbound": 53, "9527": [53, 143, 197], "allow": [53, 88, 90, 91, 96, 129, 131, 142, 143, 144, 166, 171, 183, 185, 189, 192, 195, 197], "constant": [53, 63, 75, 76, 124, 125, 135, 167, 194], "append": [53, 101, 130, 143, 182], "while": [53, 88, 90, 91, 95, 97, 105, 106, 126, 132, 138, 144, 147, 152, 164, 166, 183, 185, 186, 189, 192], "duplic": 53, "bayesianoptim": 53, "verbos": [53, 75], "level": [54, 79, 87, 97, 99, 146, 174, 192, 195], "conservativetunestrategi": 54, "o0": [54, 195], "who": [54, 99], "keep": [54, 101, 105, 124, 163, 164, 190], "exhaustivetunestrategi": 55, "hawq_v2tunestrategi": 56, "hawq": [56, 195], "v2": [56, 89, 125, 131, 133, 134, 141, 153, 190, 192, 195, 196, 198], "hessian": [56, 91, 189, 195], "network": [56, 87, 97, 102, 123, 129, 130, 133, 143, 146, 166, 184, 186, 192, 195], "made": [56, 97, 105, 186, 190, 195], "small": [56, 91, 97, 102, 169, 170, 183, 189, 195, 198], "impact": [56, 183, 190, 195], "auto_mixed_precis": 57, "msetunestrategi": 58, "those": [58, 83, 90, 95, 97, 128, 129, 130, 137, 143, 144, 182, 183, 186, 195], "mse_v2tunestrategi": 59, "revert": [59, 67, 195], "fx": [59, 86, 88, 90, 138, 144, 153, 154, 168, 184, 186, 188], "randomtunestrategi": 60, "strategy_registri": [61, 195], "tunestrategi": [61, 195], "tunestrategymeta": 61, "metaclass": 61, "tuning_sampl": 63, "tuning_spac": [63, 64, 66], "tuning_struct": [63, 64, 65], "sampler": [64, 91, 96, 125, 131], "tuningord": 64, "Not": [64, 65, 83, 102, 124], "tuningsampl": 64, "tuningspac": [64, 65], "tuning_order_lst": 64, "initial_op_tuning_cfg": 64, "modelwisetuningsampl": 64, "tuning_items_prior": 64, "op_dtype_dict": 64, "optuningconfig": [64, 65, 66], "optypewisetuningsampl": 64, "opwisetuningsampl": 64, "fallbacktuningsampl": 64, "op_dtyp": 64, "accumul": [64, 87, 91, 146, 195], "skip_first": 64, "lowerbitssampl": 64, "blockfallbacktuningsampl": 64, "op_block_lst": 64, "target_dtyp": 64, "smoothquantsampl": 64, "alpha_list": 64, "weightonlyquantsampl": 64, "tuningitem": 65, "item_typ": 65, "capabl": [65, 88, 91, 97, 106, 107, 122, 135, 143, 144, 155, 166, 171, 183, 185, 186, 195, 197], "intern": [65, 125, 126, 142, 183], "merg": [65, 159, 162, 193, 195], "tree": [65, 172], "pattern_to_intern": 65, "default_dtyp": 65, "pattern_to_path": 65, "quant_mode_from_pattern": 65, "internal_pattern": 65, "initial_tuning_cfg_with_quant_mod": 65, "op_name_typ": 65, "quant_mod": [65, 106, 107], "cfg": [65, 71, 106, 107], "step1": 65, "step2": 65, "complet": [65, 105, 106, 183, 186, 195, 197, 198], "step3": 65, "step4": 65, "step5": 65, "op_typ": [66, 89, 90], "op_quant_mod": 66, "quanttyp": 67, "quantopt": 67, "quant_typ": 67, "quant_opt": 67, "preprocess_user_cfg": 67, "op_user_cfg": 67, "op_user_cfg_modifi": 67, "group_siz": [67, 91, 96, 189], "32": [67, 87, 88, 95, 96, 131, 137, 146, 189, 198], "ordereddefaultdict": 67, "extract_data_typ": 67, "data_typ": 67, "sign": [67, 91, 97, 100, 104, 107, 123, 166, 184, 186, 189, 191], "unsign": [67, 107, 189], "reverted_data_typ": 67, "signed_flag": 67, "get_adaptor_nam": 67, "build_slave_faker_model": 67, "slave": [67, 195], "virtual": [67, 184], "classregist": 67, "loop": [68, 101, 102, 106, 107, 135, 174, 191, 195], "compressionmanag": 68, "deal": 68, "pruningconfig": 68, "orchestr": [68, 104, 138, 196], "callback": [68, 71, 101, 143, 182, 183, 186], "on_train_begin": [68, 101, 129, 130, 143, 182, 183, 186], "train_loop": [68, 143, 182], "epoch": [68, 125, 129, 130, 131, 143, 182, 183, 197], "on_epoch_begin": [68, 71, 129, 130, 143, 182], "batch": [68, 91, 125, 129, 130, 143, 182, 183, 186, 192, 194, 195, 198], "enumer": [68, 87, 105, 129, 130, 131, 143, 146, 182, 183, 193], "on_step_begin": [68, 71, 129, 130, 143, 182, 183], "on_after_compute_loss": [68, 129, 130, 143, 182], "backward": [68, 97, 129, 130, 131, 143, 182, 183, 186, 190], "on_before_optimizer_step": [68, 129, 130, 143, 182, 183], "on_step_end": [68, 71, 129, 130, 143, 182], "on_epoch_end": [68, 71, 129, 130, 143, 182], "on_train_end": [68, 129, 130, 143, 182, 183, 186], "path_to_sav": 68, "train_func": [68, 131, 143, 186], "manag": [68, 71, 143, 147, 148, 158], "top1": [68, 142, 166, 183, 186, 198], "callbacks_list": 68, "layerhistogramcollector": 69, "histogram": [69, 83, 166, 193], "num_bin": 69, "8001": [69, 172, 177, 178, 179], "layer_tensor": 69, "include_lay": 69, "logger": [69, 76, 83], "collector": 69, "diverg": [69, 77, 107, 123, 129, 195], "get_func_from_config": 71, "func_dict": 71, "get_preprocess": 71, "get_metr": 71, "get_postprocess": 71, "get_algorithm": 71, "algo": 71, "create_dataset": 71, "data_sourc": 71, "cfg_preprocess": 71, "cfg_filter": 71, "create_dataload": 71, "dataloader_cfg": 71, "create_eval_func": 71, "postprocess_cfg": 71, "fp32_baselin": [71, 105], "interfac": [71, 88, 90, 92, 95, 97, 138, 143, 155, 173, 186, 190], "baselin": [71, 96, 191, 192, 193], "create_train_func": 71, "train_cfg": 71, "hook": [71, 129, 130, 143, 183, 192, 193], "Their": 71, "qlinear2qdq": 72, "check_model": 73, "onnx_qlinear_to_qdq": 73, "input_name_to_nod": 73, "qlinearop": [73, 128, 138, 155, 186, 198], "destin": 73, "tf_to_fp32_onnx": 74, "save_path": [74, 75, 105, 145], "inputs_as_nchw": 74, "tool": [74, 83, 97, 104, 105, 143, 157, 161, 167, 170, 171, 172, 183, 184, 186], "tf_to_int8_onnx": 74, "int8_model": [74, 75, 105], "get_node_map": 75, "fp32_model": [75, 83, 89, 90, 94, 95, 105, 187, 189], "fp32_onnx_path": 75, "module_node_map": 75, "get_quantizable_onnx_op": 75, "quantize_nod": 75, "dynamic_quant_export": 75, "pt_fp32_model": 75, "pt_int8_model": 75, "q_config": [75, 105], "weight_typ": 75, "s8": 75, "static_quant_export": 75, "_quantiz": 75, "torch_to_fp32_onnx": 75, "do_constant_fold": 75, "fold": [75, 89, 91, 135, 189, 192], "torch_to_int8_onnx": 75, "auxiliari": 76, "collect_layer_histogram": 76, "create_obj_from_config": 76, "kl_diverg": 76, "load_huggingfac": [76, 143], "neural_insights_util": 76, "weights_detail": 76, "pretrain": [78, 147, 153], "optimizedmodel": 78, "from_pretrain": [78, 104, 143], "save_for_huggingface_upstream": [78, 143], "output_dir": [78, 92, 143, 152, 153, 168, 169, 175, 178, 179], "export_compressed_model": [78, 189], "saved_dir": [78, 189], "use_optimum_format": [78, 189], "enable_full_rang": [78, 91, 187, 189], "compression_dtyp": [78, 189], "int32": [78, 91, 126, 189], "compression_dim": [78, 189], "scale_dtyp": [78, 91, 189], "_type_": 78, "leverag": [78, 86, 90, 93, 96, 97, 102, 104, 129, 133, 147, 164, 182, 186, 189, 195], "symmetr": [78, 95, 107, 186, 189, 194, 195], "comoress": 78, "float16": [78, 91, 126, 189], "msg": [79, 173, 177, 178], "debug": [79, 128, 157, 161, 165, 195, 196], "fatal": 79, "warn": [79, 124], "alia": [79, 83, 149, 154], "register_neural_insights_workload": 80, "workload_loc": [80, 83], "workload_mod": 80, "workload_nam": 80, "uuid": 80, "update_neural_insights_workload": 80, "workload_uuid": 80, "statu": [80, 92, 99, 125, 146, 174, 177, 178, 179, 181, 183], "update_neural_insights_workload_accuracy_data": 80, "baseline_accuraci": 80, "optimized_accuraci": 80, "get_model_path": 80, "is_int8_model": 82, "load_weight_onli": 82, "checkpoint_dir": 82, "layer_wis": [82, 187], "qconfig": [82, 91, 189, 193], "best_model": [82, 88, 93, 94, 95, 96, 189], "pt": [82, 91, 139, 145, 168, 184, 186, 188, 189], "history_cfg": 82, "best_configur": 82, "best_model_weight": 82, "snapshot": [82, 168], "recover_model_from_json": 82, "json_file_path": 82, "recov": [82, 83, 105, 130], "cfg_from_fil": 83, "yaml_fil": [83, 126, 131], "version1_lt_version2": 83, "version1": 83, "version2": 83, "version1_gt_version2": 83, "greater": [83, 95, 177, 183, 195], "version1_eq_version2": 83, "version1_gte_version2": 83, "version1_lte_version2": 83, "lazyimport": 83, "module_nam": 83, "lazi": 83, "till": [83, 195], "singleton": 83, "time_limit": 83, "context": [83, 91, 97, 185, 189], "get_siz": 83, "seen": [83, 105], "recurs": 83, "compute_spars": 83, "non": [83, 91, 101, 128, 189, 195], "fault_tolerant_fil": 83, "temporari": [83, 99], "equal_dict": 83, "d1": 83, "d2": 83, "compare_kei": 83, "ignore_kei": 83, "except": [83, 91, 124, 170, 186, 187], "ignor": [83, 91, 97, 123, 126, 189, 192, 195], "cpuinfo": 83, "dump_elapsed_tim": [83, 105], "customized_msg": 83, "elaps": 83, "combine_histogram": 83, "old_hist": 83, "arr": 83, "old": [83, 89, 143, 190], "get_tensor_histogram": 83, "tensor_data": [83, 84], "bin": [83, 134], "2048": [83, 91, 104, 189], "get_all_fp32_data": 83, "get_tuning_histori": 83, "tuning_history_path": 83, "num": 83, "offlin": [83, 89, 94, 95, 97, 99, 143, 186, 192], "str2arrai": 83, "dequantize_weight": 83, "weight_tensor": 83, "min_filter_tensor": 83, "max_filter_tensor": 83, "dequant": [83, 97, 101, 106, 192, 193], "scale_info": 83, "captureoutputtofil": 83, "tmp_file_path": 83, "stream": [83, 198], "sy": [83, 124, 150], "stderr": 83, "captur": [83, 90, 91], "statist": [83, 84], "header": [83, 134], "field_nam": 83, "output_handl": 83, "printer": 83, "global_st": 83, "load_data_from_pkl": 83, "pkl": [83, 168], "dump_data_to_loc": 83, "show_memory_info": 83, "hint": 83, "show": [83, 87, 97, 99, 129, 131, 143, 146, 150, 165, 166, 167, 169, 172, 177, 178, 179, 192, 195, 196], "dump_class_attr": 83, "dot": [83, 88, 97, 144, 186], "nest": 83, "person": [83, 99, 184], "john": 83, "deep": [83, 87, 88, 95, 97, 104, 105, 106, 125, 138, 139, 143, 144, 146, 147, 149, 152, 153, 155, 158, 164, 184, 186, 195, 196], "sex": [83, 99], "male": 83, "compare_object": 83, "obj1": 83, "obj2": 83, "ignore_attr": 83, "comparison": [83, 189, 190, 193], "alias_param": 83, "param_nam": 83, "param_alia": 83, "alias": [83, 124], "print_tabl": 83, "column_map": 83, "table_entri": 83, "titl": [83, 140, 165, 195], "insert_newlin": 83, "tabl": [83, 87, 107, 128, 133, 146, 167, 169, 198], "prettyt": 83, "column": [83, 91, 97, 189, 192], "func": [83, 186, 197], "handler": [83, 195], "row": [83, 97, 128, 167, 192], "decim": 83, "get_tensors_info": 83, "about": [83, 99, 124, 125, 143, 169, 170, 183, 188, 195, 196, 198], "get_weights_detail": 83, "weightdetail": 83, "dump_tabl": 83, "filepath": [83, 124], "file_typ": 83, "csv": [83, 102, 167, 168], "extens": [83, 88, 89, 90, 92, 97, 102, 104, 105, 124, 135, 138, 139, 141, 143, 144, 145, 148, 153, 154, 155, 159, 162, 163, 167, 183, 184, 186, 189, 192, 195, 196, 197], "dump_table_to_csv": 83, "get_number_of_socket": 83, "platform": [83, 97, 104, 138, 147, 155, 174, 184, 186], "opentri": 83, "activation_min": 83, "activation_max": 83, "entri": [83, 92, 124, 140], "print_op_list": 83, "get_op_list": 83, "minmax_file_path": 83, "input_model_tensor": 83, "optimized_model_tensor": 83, "activation_min_max": 83, "calculate_ms": 83, "mse_metric_gap": 83, "fp32_tensor": 83, "dequantize_tensor": 83, "euclidean": [83, 129], "distanc": [83, 129], "check_key_exist": 83, "weightsdetail": 84, "input_tensor_data": 84, "optimized_tensor_data": 84, "weightsstatist": 84, "bitwidth": 86, "factor": [86, 89, 91, 95, 97, 189, 192, 198], "whole": [86, 97, 107, 166, 186, 198], "observ": [86, 90, 91, 92, 107, 189, 191, 193, 195], "runtim": [86, 97, 100, 104, 105, 106, 108, 125, 128, 132, 135, 138, 144, 146, 149, 154, 155, 185, 189, 190, 195], "w8a8": [86, 90, 91, 97, 187, 189], "x86inductorquant": 86, "four": [86, 90, 96, 174, 193, 198], "prepar": [86, 87, 89, 90, 91, 92, 95, 97, 101, 126, 131, 136, 166, 177, 178, 179, 183, 186], "neural_compressor": [86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 101, 102, 104, 107, 122, 124, 125, 126, 128, 129, 130, 131, 133, 136, 137, 142, 143, 144, 145, 146, 166, 167, 181, 182, 183, 185, 186, 187, 188, 190, 191, 192, 194, 195, 197], "dynamicquantconfig": 86, "userfloatmodel": [86, 90], "eager": [86, 90, 91, 92, 104, 131, 138, 186, 188, 193], "exported_model": [86, 90], "quant_config": [86, 87, 89, 90, 91, 92, 93, 94, 95, 146], "prepared_model": [86, 89, 90], "q": [86, 90, 92, 97, 189, 192], "dq": [86, 90, 92, 97, 192], "_inductor": [86, 90], "freez": [86, 90, 147, 183], "opt_model": [86, 90, 143], "set_loc": [86, 89, 90, 91, 92, 93], "releas": [86, 90, 104, 139, 153, 155, 157, 161, 163, 175, 178, 179, 199], "breakthrough": [87, 146], "emerg": [87, 146, 192], "analysi": [87, 146, 147, 164, 183, 191], "chatbot": [87, 146, 184], "fuel": [87, 146], "llm": [87, 89, 90, 91, 94, 97, 146, 183, 184, 187, 189, 192], "nevertheless": [87, 146], "power": [87, 95, 129, 143, 146, 158, 184], "come": [87, 141, 146, 195], "challeng": [87, 146, 187], "explos": [87, 146], "growth": [87, 88, 143, 144, 146, 183], "pose": [87, 146, 187], "obstacl": [87, 146], "practic": [87, 146], "preserv": [87, 91, 123, 146, 183, 189], "ai": [87, 104, 146, 147, 184, 188, 196], "mx": [87, 92, 146], "promot": [87, 91, 146], "microsoft": [87, 104, 105, 146], "msfp": [87, 146], "mxfp8": [87, 146], "fp8": [87, 92, 104, 146, 184], "e5m2": [87, 146], "e8m0": [87, 146], "e4m3": [87, 146], "mxfp6": [87, 146], "fp6": [87, 146], "e3m2": [87, 146], "e2m3": [87, 146], "mxfp4": [87, 146], "fp4": [87, 91, 104, 146, 189], "e2m1": [87, 91, 146, 189], "mxint8": [87, 146], "At": [87, 100, 106, 146, 170, 174, 195], "equival": [87, 89, 91, 94, 97, 104, 146, 184, 189, 192], "demonstr": [87, 96, 104, 132, 146, 147, 177, 178, 179, 193], "abil": [87, 105, 106, 126, 135, 146, 192], "occupi": [87, 146], "incur": [87, 146], "energi": [87, 146], "cost": [87, 91, 97, 146, 186, 189], "silicon": [87, 146], "seamlessli": [87, 146, 171, 183, 195], "offer": [87, 95, 126, 146], "meticul": [87, 146], "craft": [87, 146], "empow": [87, 146], "sacrif": [87, 146, 184], "workflow": [87, 104, 106, 107, 128, 129, 133, 139, 144, 146, 159, 162, 166, 193, 196], "shown": [87, 89, 97, 102, 125, 128, 129, 142, 143, 146, 158, 167, 169, 181, 182, 183, 187, 192, 195], "explor": [87, 105, 146], "focus": [87, 91, 95, 99, 105, 146], "distinct": [87, 146], "hardwar": [87, 90, 104, 105, 129, 138, 143, 146, 164, 183, 184, 185], "friendli": [87, 97, 135, 143, 146, 184, 192, 196, 197], "adapt": [87, 99, 106, 126, 146, 155, 184], "granular": [87, 97, 105, 106, 107, 135, 138, 146, 150, 186, 192, 197], "fall": [87, 146], "consumpt": [87, 97, 146, 192], "frac": [87, 97, 128, 146, 192], "amax": [87, 146], "blocksiz": [87, 146], "expon": [87, 146], "floor": [87, 146], "log2": [87, 146], "represent": [87, 91, 97, 99, 101, 123, 130, 146, 183, 186], "rmin": [87, 95, 97, 146, 186], "mxquantconfig": [87, 146], "w_dtype": [87, 89, 90, 146], "act_dtyp": [87, 89, 90, 93, 146], "woq": [87, 141, 146], "user_model": [87, 146], "darvish": [87, 146], "rouhani": [87, 146], "bita": [87, 146], "et": [87, 91, 97, 123, 146, 189, 192], "al": [87, 91, 97, 123, 146, 189, 192], "push": [87, 91, 97, 100, 146, 183, 189, 192], "narrow": [87, 146], "inferenc": [87, 146], "cloud": [87, 100, 104, 146, 174, 184], "33": [87, 141, 146, 198], "2020": [87, 146], "10271": [87, 146], "10281": [87, 146], "ocp": [87, 146], "learn": [87, 88, 91, 95, 97, 104, 105, 106, 125, 126, 133, 137, 138, 139, 143, 144, 146, 147, 149, 152, 153, 155, 158, 159, 162, 164, 183, 184, 186, 192, 193, 195, 196], "arxiv": [87, 91, 97, 104, 123, 146, 183, 184, 189, 192], "preprint": [87, 91, 97, 123, 146, 183, 189, 192], "2310": [87, 146], "10537": [87, 146], "2023": [87, 91, 97, 104, 146, 179, 183, 189, 192], "recent": [88, 143, 144], "complex": [88, 124, 143, 144, 183], "significantli": [88, 91, 143, 144, 167, 169, 183, 195], "propos": [88, 91, 97, 102, 105, 129, 144, 189, 192], "googl": [88, 104, 124, 144, 184], "bfloat16": [88, 144, 147, 155, 188], "ieee": [88, 97, 144, 192], "half": [88, 91, 144, 155], "wide": [88, 91, 97, 104, 132, 144, 183, 186], "sixteen": [88, 144], "bandwidth": [88, 91, 97, 143, 144, 189], "3rd": [88, 97, 144, 184, 186, 188], "gen": [88, 97, 141, 144, 184, 186, 188], "xeon": [88, 97, 104, 139, 140, 141, 144, 184, 186, 188, 198], "scalabl": [88, 95, 97, 104, 139, 141, 144, 184, 186, 188], "processor": [88, 97, 104, 141, 144, 172, 184, 186, 188], "codenam": [88, 141, 144], "cooper": [88, 139, 144, 184], "lake": [88, 139, 144, 184], "boost": [88, 104, 144, 148, 164, 183, 184], "purpos": [88, 89, 90, 91, 93, 135, 144, 164, 166, 185, 186], "x86": [88, 144], "instruct": [88, 89, 97, 106, 107, 129, 139, 144, 159, 162, 166, 167, 168, 169, 183, 184, 185, 186, 192, 198], "part": [88, 97, 101, 139, 144, 159, 162, 172, 174, 183, 187, 192, 196], "avx512": [88, 97, 144, 186], "vcvtne2ps2bf16": [88, 144], "vcvtneps2bf16": [88, 144], "vdpbf16p": [88, 144], "product": [88, 97, 104, 138, 144, 147, 148, 164, 170, 184, 186, 191, 195], "found": [88, 104, 124, 129, 141, 144, 152, 169, 173, 192, 195, 198], "publish": [88, 99, 140, 141, 144, 165, 192], "4th": [88, 97, 141, 184, 186], "isa": [88, 155], "vector": 88, "512": [88, 91], "avx": 88, "16": [88, 126, 139, 177, 189, 198], "754": 88, "complement": [88, 183], "fbgemm": [88, 144, 186], "10004": [88, 91, 92, 101, 102, 105, 125, 129, 130, 131, 135, 138, 144, 146, 182, 185, 187, 189, 197], "avx512_bf16": [88, 144], "11": [88, 97, 139, 142, 144, 166, 192, 195, 198], "avx512_fp16": 88, "mai": [88, 91, 94, 97, 99, 100, 106, 123, 124, 128, 133, 134, 140, 144, 157, 161, 167, 170, 172, 184, 186, 189, 192, 195], "eval_fn": [88, 92, 93, 94, 95, 96], "eval_arg": [88, 92, 93, 95], "mixprecisionconfig": 88, "tuningconfig": [88, 92, 93, 94, 95, 96], "eval_acc_fn": [88, 93, 95], "acc": [88, 93, 102, 141, 174, 183, 193, 198], "modul": [88, 91, 92, 96, 101, 124, 125, 129, 138, 142, 143, 145, 183, 185, 188, 189, 193, 196], "might": [88, 101, 124, 166, 195], "custom_tune_config": [88, 93, 94, 95, 96], "config_set": [88, 93, 94, 95, 96], "build_torch_model": 88, "tune_config": [88, 92, 93, 94, 95, 96, 106], "acceler": [89, 91, 94, 97, 104, 129, 143, 147, 155, 164, 167, 171, 183, 184, 188, 189, 192, 195], "gigant": [89, 94, 192], "systemat": [89, 94, 192], "outlier": [89, 91, 94, 97, 106, 123, 128, 169, 189, 192], "quantif": [89, 91, 94, 189, 192], "difficult": [89, 94, 96, 97, 105, 192], "migrat": [89, 94, 97, 192, 196], "difficulti": [89, 94, 97, 192], "mathemat": [89, 94, 97, 192], "smoothquantconfig": [89, 94, 95], "run_fn": [89, 90, 91, 92], "descript": [89, 101, 106, 107, 125, 172, 176, 192], "stai": [89, 91, 92, 189, 192], "achiev": [89, 90, 91, 92, 93, 96, 97, 133, 141, 143, 167, 182, 183, 184, 186, 192, 193, 195], "abov": [89, 90, 91, 93, 97, 105, 106, 107, 129, 166, 167, 169, 172, 183, 186, 192, 195], "lambada": [89, 192], "openai": [89, 192], "sweet": [89, 192], "spot": [89, 192], "region": [89, 192], "paper": [89, 91, 97, 129, 183, 189, 192], "bigscienc": [89, 141, 192, 198], "bloom": [89, 97, 104, 141, 183, 192, 198], "560m": [89, 192], "354": [89, 192], "3542": [89, 192], "1b7": [89, 141, 192], "4634": [89, 192], "4936": [89, 192], "3b": [89, 141, 192], "518": [89, 192], "5185": [89, 192], "7b1": [89, 192, 198], "5764": [89, 192, 198], "5977": [89, 192], "bloomz": [89, 192, 198], "3947": [89, 192], "3930": [89, 192], "4828": [89, 192], "4906": [89, 192], "5018": [89, 192], "4980": [89, 192], "5593": [89, 192, 198], "5552": [89, 192], "facebook": [89, 141, 170, 192, 198], "opt": [89, 97, 104, 141, 152, 183, 192, 195, 198], "125m": [89, 104, 192], "379": [89, 192], "3757": [89, 192], "350m": [89, 192], "4516": [89, 192], "4533": [89, 192], "5789": [89, 192], "5742": [89, 192], "7b": [89, 141, 192, 198], "6365": [89, 192], "6404": [89, 192], "6769": [89, 192, 198], "6804": [89, 192, 198], "13b": [89, 141, 192, 198], "6872": [89, 192], "6814": [89, 192], "30b": [89, 141, 192, 198], "7149": [89, 192], "7128": [89, 192], "66b": [89, 192], "7398": [89, 192], "7326": [89, 192], "llama": [89, 104, 141, 183, 184, 187, 189, 192, 198], "7361": [89, 192, 198], "7357": [89, 192], "7627": [89, 192, 198], "7590": [89, 192], "7759": [89, 192, 198], "7840": [89, 192], "65b": [89, 192], "7908": [89, 192], "7957": [89, 192], "eleutherai": [89, 104, 141, 168, 192, 198], "gpt": [89, 104, 141, 168, 183, 192, 198], "j": [89, 97, 104, 141, 168, 183, 192, 198], "6b": [89, 141, 168, 192, 198], "6831": [89, 192, 198], "6821": [89, 97, 192], "mbzuai": [89, 192], "lamini": [89, 183, 192], "124m": [89, 192], "3804": [89, 192], "3887": [89, 192], "774m": [89, 192], "5048": [89, 192], "5057": [89, 192], "5b": [89, 192], "5443": [89, 192, 198], "5436": [89, 192], "mosaicml": [89, 192, 198], "mpt": [89, 183, 192, 198], "chat": [89, 141, 192, 198], "655": [89, 192, 198], "6499": [89, 192], "stabilityai": [89, 192], "stablelm": [89, 192], "4172": [89, 192], "4149": [89, 192], "togethercomput": [89, 192], "redpajama": [89, 192], "incit": [89, 192], "6542": [89, 192], "6735": [89, 192], "6718": [89, 192], "6740": [89, 192, 198], "6569": [89, 192], "6621": [89, 192], "v0": [89, 128, 141, 169, 192, 193], "7143": [89, 192], "7221": [89, 192], "6895": [89, 192], "6953": [89, 192, 198], "databrick": [89, 141, 192, 198], "dolli": [89, 141, 183, 192, 198], "6866": [89, 192, 198], "6297": [89, 192], "6247": [89, 192], "tiiuae": [89, 141, 192, 198], "falcon": [89, 104, 141, 183, 192, 198], "6437": [89, 192, 198], "6392": [89, 192], "asterisk": [89, 192], "gt": [89, 91, 126, 192, 194], "retrain": [90, 130], "involv": 90, "improv": [90, 91, 97, 100, 123, 124, 143, 147, 164, 165, 167, 183, 184, 186, 188, 189, 195, 196, 198], "philosophi": [90, 95, 186], "request": [90, 104, 172, 173, 174, 177, 178, 179, 186], "would": [90, 97, 100, 143, 168, 183, 186, 192], "appropri": [90, 96, 97, 99, 123, 192], "crucial": [90, 183], "occur": 90, "jit": [90, 147, 149, 154, 192, 193], "effect": [90, 91, 105, 183, 184], "intel_extension_for_pytorch": 90, "staticquantconfig": [90, 93, 94, 95, 96], "act_sym": [90, 93, 95, 96], "act_algo": 90, "minmax": [90, 106, 107, 123, 135, 186, 197], "begin": [90, 124, 125, 129, 130, 143, 183, 195], "program": [90, 104, 131, 140, 147, 164], "fc1": 90, "dynamo": [90, 92], "qd": 90, "final": [90, 97, 106, 143, 150, 181, 183, 186, 190, 195], "As": [91, 97, 101, 106, 125, 129, 142, 143, 158, 169, 183, 189, 195], "becom": [91, 97, 105, 133, 183, 189], "preval": [91, 97, 189], "grow": [91, 97, 189], "demand": [91, 97, 189], "modern": [91, 97, 149, 189], "trade": [91, 97, 189], "off": [91, 97, 100, 189], "bottleneck": [91, 97, 189], "deploi": [91, 96, 97, 100, 129, 143, 170, 174, 189, 195], "roughli": [91, 97, 189], "speak": [91, 97, 189], "move": [91, 97, 101, 170, 185, 189, 190], "count": [91, 97, 102, 126, 189], "p": [91, 97, 165, 166, 189], "theoret": [91, 97, 186, 189], "capac": [91, 97, 189, 191], "flop": [91, 97, 189], "forward": [91, 97, 106, 143, 166, 183, 185, 186, 189, 192, 193], "f": [91, 97, 124, 129, 131, 186, 189, 192], "famou": [91, 97, 189], "next": [91, 97, 102, 106, 107, 125, 185, 189, 195], "scenario": [91, 92, 97, 105, 122, 129, 143, 183, 189], "approx": [91, 97, 189], "bmm": [91, 97, 189], "past": [91, 97, 105, 189], "howev": [91, 97, 170, 183, 189, 192], "100x": [91, 97, 189], "besid": [91, 97, 105, 129, 169, 189], "mention": [91, 97, 183, 189], "main": [91, 92, 93, 95, 97, 101, 125, 128, 131, 143, 151, 153, 165, 174, 183, 186, 189], "reason": [91, 97, 99, 106, 125, 169, 189, 193, 195], "caus": [91, 97, 106, 125, 148, 167, 169, 183, 189], "straightforward": [91, 95, 97, 183, 189, 192], "larger": [91, 97, 106, 183, 189, 192], "group": [91, 97, 104, 138, 183, 189, 193, 194, 195, 198], "introduc": [91, 97, 105, 106, 107, 135, 143, 186, 189, 190, 192, 196], "think": [91, 189], "veri": [91, 97, 143, 165, 169, 186, 189, 195, 196], "intuit": [91, 97, 189, 192], "uniformli": [91, 189], "qlora": [91, 97, 189], "uniform": [91, 123, 189], "nf4": [91, 104, 189], "prove": [91, 97, 123, 189, 192], "shot": [91, 95, 102, 138, 143, 183, 184, 189], "highli": [91, 184, 189], "invers": [91, 189], "share": [91, 97, 134, 135, 189, 192, 195], "restor": [91, 189], "tailor": 91, "consist": [91, 100, 101, 124, 172, 192, 195], "deliv": [91, 143, 184, 190], "often": [91, 125, 129, 169, 182, 183], "outperform": [91, 102], "signround": 91, "protect": [91, 189], "salient": [91, 183, 189], "greatli": [91, 187, 189], "big": [91, 128, 189], "trainabl": [91, 104, 184, 189], "inspir": [91, 189], "rather": [91, 137, 189], "addition": [91, 107, 131, 183, 195], "incorpor": [91, 106, 107, 130, 183, 195], "l": [91, 123, 129, 193, 195], "norm": 91, "hyper": [91, 197], "laplacian": 91, "heavi": [91, 130], "tail": 91, "nuanc": 91, "weightonlyqu": 91, "c_": [91, 189], "use_sym": [91, 96], "quant_lm_head": 91, "use_double_qu": 91, "double_quant_dtyp": 91, "double_quant_bit": 91, "double_quant_use_sym": 91, "double_quant_group_s": 91, "along": [91, 139, 183, 189], "normalfloat": [91, 189], "bnb": [91, 189], "lm": [91, 183], "head": [91, 183], "emb": 91, "doubl": [91, 184], "rtn_arg": [91, 187, 189], "comment": [91, 99, 106, 126, 142, 143, 189, 194], "group_dim": [91, 189], "use_full_rang": 91, "use_mse_search": 91, "use_layer_wis": 91, "model_path": [91, 128, 177], "state_dict": [91, 131, 189, 193], "rtnconfig": [91, 92, 96], "gptq_arg": [91, 189], "act_ord": 91, "diagon": [91, 189], "rearrang": [91, 183, 189], "percdamp": [91, 189], "stabil": [91, 189], "block_siz": [91, 189], "c_out": 91, "static_group": [91, 189], "mitig": [91, 189], "actord": [91, 189], "gptqconfig": [91, 96], "autoround_arg": 91, "lr_schedul": [91, 143, 183], "rate": [91, 97, 143, 183, 186], "enable_quanted_input": 91, "enable_minmax_tun": 91, "minmax_lr": 91, "low_gpu_mem_usag": 91, "seqlen": [91, 104], "n_sampl": 91, "rand": [91, 97, 147, 192], "n_block": [91, 189], "gradient_accumulate_step": 91, "gradient": [91, 97, 104, 138, 143, 183, 184, 198], "not_use_best_ms": 91, "dynamic_max_gap": 91, "gap": [91, 128, 145], "autoroundconfig": 91, "awq_arg": [91, 189], "use_auto_scal": 91, "use_auto_clip": 91, "clip": [91, 97, 189, 192], "awqconfig": 91, "teq_arg": 91, "teqconfig": 91, "train_fn": 91, "hqq_arg": 91, "quant_zero": 91, "quant_scal": 91, "scale_quant_group_s": 91, "hqqconfig": 91, "lm_head": [91, 183, 189], "lm_head_config": 91, "quantit": 91, "weightonlylinear": [91, 189], "flexibl": [91, 95, 104, 129, 171, 183, 189], "storag": [91, 97, 136, 142, 166, 169, 189, 192], "date": [91, 189], "saved_result": [91, 92, 145, 168, 189], "orig_model": 91, "yourmodel": 91, "loaded_model": 91, "original_model": 91, "xiao": [91, 97, 189, 192], "guangxuan": [91, 97, 189, 192], "2211": [91, 97, 189, 192], "10438": [91, 97, 189, 192], "wei": [91, 97, 189, 192], "xiui": [91, 97, 189, 192], "suppress": [91, 97, 189, 192], "2209": [91, 97, 189, 192, 198], "13325": [91, 97, 189, 192], "lin": [91, 97, 189], "ji": [91, 97, 189], "2306": [91, 97, 189], "00978": [91, 97, 189], "frantar": [91, 97, 183, 189], "elia": [91, 97, 189], "2210": [91, 97, 189], "17323": [91, 97, 189], "cheng": [91, 97], "wenhua": [91, 97], "via": [91, 97, 99, 104, 131, 138, 143, 147, 164, 183, 184], "descent": [91, 97, 104, 184], "2309": [91, 97], "05516": [91, 97], "badri": 91, "hicham": 91, "shaji": 91, "appu": 91, "quadrat": 91, "onlin": [91, 99, 191], "mobiusml": 91, "io": [91, 170], "hqq_blog": 91, "dettmer": [91, 97, 189], "tim": [91, 97, 189], "finetun": [91, 97, 167, 183, 189], "2305": [91, 97, 189], "14314": [91, 97, 189], "integr": [92, 95, 97, 105, 143, 165, 166, 171, 189], "grain": [92, 183, 184, 195], "comprehens": [92, 95, 143, 196], "varieti": [92, 96, 132, 185, 195], "classic": [92, 195], "latest": [92, 104, 139, 184, 190], "research": [92, 104, 140, 192, 198], "simul": [92, 107], "emul": [92, 97, 143, 186], "term": [92, 95, 100, 123, 129, 140, 142, 181, 182, 195], "eas": [92, 95, 139, 149, 184], "commit": [92, 95, 99, 100], "extend": [92, 106, 107], "hand": [92, 95, 102], "reus": 92, "conveni": [92, 143, 171], "discuss": [92, 104], "far": 92, "still": [92, 94, 97, 123, 143, 170, 184, 186, 188], "reli": [92, 143, 192], "plan": [92, 138], "agnost": [92, 129], "arbitrari": [92, 143, 182], "deploy": [92, 127, 147, 164, 184, 187, 192], "One": [92, 107, 124, 126, 131, 138, 169, 183, 184, 195], "scope": [92, 100, 106, 143], "direct": [92, 183], "baseconfig": [92, 95, 124], "inplac": 92, "monitor": [92, 172, 177, 178, 179], "place": [92, 130, 139, 177, 183, 193, 195], "run_arg": 92, "_description_": 92, "renam": [92, 190], "previou": [92, 97, 106, 107, 143, 183, 190, 192, 193, 195, 196, 198], "orig_sav": 92, "suggest": [92, 101, 124, 191], "rtn": [92, 97, 124, 187, 189], "gptq": [92, 97, 124, 141, 187, 189], "awq": [92, 97, 187, 189], "autoround": [92, 97, 104, 141], "teq": [92, 104, 184, 187, 189], "hqq": 92, "trane": 92, "torchdynamo": [92, 154], "pytorchdynamo": 92, "logic": [92, 197], "torchimport": 92, "operator_name_or_list": 92, "demo": [92, 143], "mlp": [92, 183], "conv1d": [92, 107], "fundament": [93, 94, 123, 143], "fulli": [93, 143, 172, 186, 192], "respons": [93, 177, 178, 179, 186], "val_dataset": [93, 143, 186], "val_dataload": [93, 143, 186], "mydataload": [93, 95, 96], "quantize_model": [93, 94, 95, 97], "qmodel": [93, 95], "good": [93, 99, 186, 195], "base_tun": [93, 95], "autotun": [93, 94, 95, 97, 124], "weight_sym": [93, 95, 96], "static_qu": [93, 124], "weight_dtyp": 93, "weight_granular": 93, "per_tensor": [93, 106, 107, 135, 186, 197], "act_granular": 93, "from_dict": 93, "conv2d_config": 93, "output_graph_def": 94, "sq_config": 94, "static_config": 94, "fusion": [94, 101, 105, 135], "look": [94, 105, 107, 135, 142, 166, 167, 169, 192, 197], "eval_fn_wrapp": 94, "consider": [94, 192], "amount": [94, 192], "saved_model": [95, 187], "experi": [95, 99, 147, 169, 191, 192, 195], "calib_iter": [95, 106], "rule": [95, 128, 147, 183], "partial": [95, 183, 186], "particularli": 95, "critic": [95, 99], "toler": [95, 169], "And": [95, 97, 100, 101, 122, 124, 143, 150, 192], "supplement": 95, "baseline_model": [95, 96], "asymmetr": [95, 107, 186, 189, 195], "onednn": [95, 144, 186], "ab": [95, 97, 183, 186, 192], "rmax": [95, 97, 186], "sq": [95, 141, 192], "unseen": [95, 97, 186], "zeropoint": [95, 97, 186], "enough": [95, 97, 186], "unlik": 95, "tradit": [95, 150, 183], "signific": [95, 97, 183, 184, 187, 192], "refin": [95, 137, 183], "instal": [95, 131, 134, 136, 147, 149, 152, 155, 159, 162, 164, 165, 167, 168, 169, 199], "aim": [96, 102, 104, 141, 147, 183, 192, 195, 196], "help": [96, 97, 124, 141, 145, 147, 153, 164, 172, 177, 178, 179, 189, 195, 196], "quickli": [96, 141, 195, 196], "despit": 96, "consum": [96, 125], "certain": [96, 191], "predefin": 96, "primari": [96, 123, 195], "get_woq_tuning_config": 96, "travers": [96, 106, 107, 189, 195], "default_sampl": 96, "compon": [96, 101, 124, 128, 131, 139, 140, 147, 164, 172, 182, 183], "trial": [96, 195], "met": [96, 97, 102, 135, 186, 193], "invent": [97, 186], "speed": [97, 123, 143, 155, 183, 184, 186, 195], "int4": [97, 104, 141, 186, 198], "mainli": [97, 104, 143, 183, 186], "miss": [97, 183, 186], "On": [97, 186, 198], "4x": [97, 102, 186], "speedup": [97, 132, 138, 186], "z": [97, 123, 124, 129, 192], "255": [97, 186, 192], "math": [97, 186], "sometim": [97, 101, 128, 186], "overflow": [97, 186], "issu": [97, 99, 100, 103, 104, 139, 167, 169, 186, 193], "due": [97, 107, 133, 183, 186, 192, 193], "vnni": [97, 132, 138, 185, 186], "solv": [97, 100, 186, 190], "coarsest": [97, 192], "finer": [97, 192, 195], "2d": [97, 192], "matric": [97, 192], "3d": [97, 184, 192], "similarli": [97, 192], "finest": [97, 192], "individu": [97, 99, 172, 183, 192], "adopt": [97, 100, 147, 183, 184, 192], "bring": [97, 158, 171, 192], "why": [97, 192, 193], "suppos": [97, 192], "6839": [97, 192], "4741": [97, 192], "7451": [97, 192], "9301": [97, 192], "1742": [97, 192], "6835": [97, 192], "formula": [97, 183, 192], "num_bit": [97, 192], "q_min": [97, 192], "q_max": [97, 192], "zp": [97, 192], "q_x": [97, 192], "clamp_": [97, 192], "round_": [97, 192], "w_q": [97, 192], "00296431384049356": [97, 192], "59": [97, 141, 192, 198], "172": [97, 192, 198], "192": [97, 192], "w_dq": [97, 192], "2220": [97, 192], "1510": [97, 192], "2420": [97, 192], "2570": [97, 192], "0500": [97, 192], "1890": [97, 192], "mseloss": [97, 192], "1983354538679123": [97, 192], "6848": [97, 192], "4743": [97, 192], "7440": [97, 192], "9308": [97, 192], "1749": [97, 192], "385297635664756e": [97, 192], "07": [97, 141, 192, 197, 198], "affect": [97, 192], "quantize_per_channel": [97, 192], "x_tmp": [97, 192], "detach": [97, 192], "reshap": [97, 192], "keepdim": [97, 192], "divid": [97, 125, 174, 192, 195], "dequantize_per_channel": [97, 192], "0029": [97, 192, 198], "0036": [97, 192], "162": [97, 192, 198], "48": [97, 192, 198], "72": [97, 141, 192, 198], "93": [97, 141, 192, 198], "207": [97, 192, 198], "139": [97, 192, 198], "6837": [97, 192], "4734": [97, 192], "1751": [97, 192], "637690492221736e": [97, 192], "6376e": [97, 192], "3852e": [97, 192], "cdot": [97, 192], "quantize_per_tensor_absmax": [97, 192], "n_bit": [97, 192], "div_": [97, 192], "0806": [97, 192], "7589": [97, 192], "6038": [97, 192], "3815": [97, 192], "5040": [97, 192], "7174": [97, 192], "5444": [97, 192], "5826": [97, 192], "7772": [97, 192], "5555": [97, 192], "3740": [97, 192], "3253": [97, 192], "0698": [97, 192], "1381": [97, 192], "5972": [97, 192, 198], "0086": [97, 192], "0737": [97, 192], "8298": [97, 192], "6883": [97, 192], "2991": [97, 192], "1601": [97, 192], "6506": [97, 192], "8246": [97, 192], "3924": [97, 192], "3845": [97, 192], "8768": [97, 192], "w_scale": [97, 192], "x_q": [97, 192], "x_scale": [97, 192], "13": [97, 134, 139, 166, 190, 192, 198], "84": [97, 141, 192, 198], "120": [97, 192], "0059755356051027775": [97, 192], "83": [97, 191, 192, 198], "89": [97, 141, 192, 198], "119": [97, 192], "85": [97, 191, 192, 198], "57": [97, 141, 192, 198], "91": [97, 189, 192, 198], "006533813662827015": [97, 192], "y_q": [97, 192], "17509": [97, 192], "7608": [97, 192], "4055": [97, 192], "16599": [97, 192], "21020": [97, 192], "10016": [97, 192], "9860": [97, 192], "22444": [97, 192], "y_dq": [97, 192], "6836": [97, 192], "2970": [97, 192], "1583": [97, 192], "6481": [97, 192], "8207": [97, 192], "3911": [97, 192], "3850": [97, 192], "8763": [97, 192], "major": [97, 137, 169, 186, 192], "peopl": [97, 186], "though": [97, 192], "simplic": [97, 192], "present": [97, 128, 172, 184, 192], "1x2": [97, 192], "2x2": [97, 192], "obtain": [97, 101, 106, 172, 183, 191, 192, 195], "middl": [97, 170, 192], "denot": [97, 192], "fp1": [97, 192], "fp2": [97, 192], "subsect": [97, 192, 197], "explain": [97, 107, 128, 192], "even": [97, 187, 189, 192], "lot": [97, 101, 169, 192], "briefli": [97, 143, 192], "similar": [97, 143, 168, 185, 192, 195, 197], "idea": [97, 104, 166, 183, 192, 195], "attach": [97, 129, 143, 192], "x1": [97, 192, 195], "x2": [97, 192, 195], "layernorm": [97, 192], "excel": [97, 189], "mimic": [97, 186], "done": [97, 101, 129, 130, 148, 164, 173, 177, 178, 183, 186], "adjust": [97, 155, 186, 192], "fact": [97, 186], "ultim": [97, 186], "therefor": [97, 101, 143, 167, 169, 183, 186, 187, 190, 192], "pain": [97, 186], "brought": [97, 145, 148, 155, 186], "lossi": [97, 186], "respect": [97, 99, 135, 183, 192, 197], "chart": [97, 169, 186, 191, 193], "understand": [97, 170, 186, 193, 196], "yvinec": [97, 192], "edouard": [97, 192], "proceed": [97, 192], "cvf": [97, 192], "winter": [97, 192], "confer": [97, 183, 192], "vision": [97, 104, 133, 151, 192], "welcom": [98, 99, 100, 104, 166, 173, 199], "interest": [99, 104, 166, 193], "foster": 99, "particip": [99, 174], "commun": [99, 166], "harass": 99, "everyon": 99, "regardless": 99, "ag": 99, "bodi": 99, "ethnic": 99, "characterist": 99, "gender": 99, "ident": [99, 129], "educ": 99, "socio": 99, "econom": 99, "appear": [99, 158, 164, 166], "race": 99, "religion": 99, "sexual": 99, "orient": 99, "behavior": [99, 105, 106, 107, 135, 145, 189, 193, 195, 197], "contribut": [99, 104, 183], "inclus": 99, "Being": 99, "viewpoint": 99, "gracefulli": 99, "empathi": 99, "toward": [99, 129], "member": [99, 105], "unaccept": 99, "imageri": 99, "unwelcom": 99, "troll": 99, "insult": 99, "derogatori": 99, "polit": 99, "attack": 99, "public": [99, 159, 162], "privat": 99, "electron": 99, "explicit": 99, "permiss": 99, "inappropri": 99, "profession": 99, "clarifi": 99, "fair": 99, "action": [99, 159, 162], "edit": 99, "reject": 99, "wiki": 99, "ban": 99, "temporarili": 99, "perman": [99, 183], "thei": [99, 124, 129, 135, 143, 152, 167, 170, 181], "deem": 99, "threaten": 99, "offens": 99, "harm": 99, "mail": 99, "social": [99, 184], "media": [99, 184], "account": [99, 191, 195], "act": 99, "appoint": 99, "event": [99, 193], "abus": 99, "report": [99, 100, 104, 174, 191], "contact": [99, 190, 191], "complaint": 99, "review": [99, 100, 104, 184], "investig": [99, 124, 169], "necessari": [99, 102, 106, 145, 165, 183, 191, 195], "circumst": [99, 185], "oblig": [99, 170], "confidenti": [99, 166], "regard": [99, 188], "incid": 99, "separ": [99, 124, 137, 140, 172, 174, 182, 185], "faith": 99, "face": [99, 104, 112, 147, 151, 171, 173, 184, 190, 198], "repercuss": 99, "leadership": 99, "faq": [99, 104], "page": [99, 100, 166, 169, 170], "send": [100, 106], "view": [100, 104, 132, 155, 164, 170, 190], "star": 100, "repositori": [100, 159, 162], "button": [100, 138, 158, 164], "fork": [100, 159, 162], "clone": [100, 128, 139, 157, 161, 166, 168, 169, 171, 172], "pc": 100, "git": [100, 128, 134, 139, 166, 168, 169, 171, 172], "branch": 100, "modif": [100, 105, 135, 152, 171], "checkout": 100, "my": 100, "messag": [100, 172, 173, 177, 178, 179, 195], "unit": [100, 172, 183], "cover": [100, 133, 137, 184], "certif": [100, 166], "agre": 100, "pr": [100, 125, 142, 159, 162, 190], "least": [100, 143, 183, 195], "approv": 100, "licens": 100, "azur": [100, 104, 184], "devop": 100, "ci": 100, "pipelin": [100, 130, 143, 182], "e16": 100, "v5": 100, "scan": [100, 104], "pylint": 100, "bandit": 100, "copyright": [100, 140], "docstyl": 100, "spellcheck": 100, "dco": 100, "pytest": 100, "No": [100, 124, 134, 143, 172, 173, 184], "failur": [100, 101], "fault": 100, "coverag": 100, "submit": [100, 171, 174, 184], "bug": [100, 104], "intend": 100, "safe": 100, "collabor": [100, 104, 149, 155], "adher": 100, "toolkit": [101, 139, 147, 155, 184, 196], "tracer": 101, "graphmodul": [101, 188], "resolv": [101, 103], "floatfunct": 101, "cat": [101, 133, 150, 177, 178, 179], "relu": [101, 135, 192, 193], "batchnorm": [101, 192], "eval": [101, 124, 125, 128, 147, 186, 193], "fail": [101, 125, 133, 173], "conduct": [101, 143, 152, 164, 195, 196], "imper": 101, "successfulli": [101, 104, 131, 173, 177, 178, 179, 184], "traceabl": 101, "proxi": 101, "tutori": [101, 155, 184, 196], "prototyp": 101, "html": [101, 104, 106, 123, 131, 138, 159, 162, 165, 167, 173, 177, 186], "highlight": 101, "untrac": 101, "ssd": [101, 133, 198], "resnet34": [101, 198], "r34": 101, "bboxes_labels_scor": 101, "prob": 101, "45": [101, 141, 198], "max_output": 101, "zip": [101, 173, 177, 178], "squeez": 101, "dbox": 101, "dlabel": 101, "dscore": 101, "decode_singl": 101, "autom": [102, 147, 164, 165, 184, 192], "artifici": 102, "ann": 102, "par": [102, 174], "potenti": [102, 128], "procedur": [102, 183, 195], "lie": [102, 123], "pareto": 102, "front": 102, "predictor": 102, "typic": [102, 104, 130, 132, 136, 169, 183, 198], "figur": [102, 157, 158, 161, 187], "popul": 102, "inner": 102, "evolutionari": 102, "cycl": 102, "until": [102, 106, 195], "conclud": 102, "yet": [102, 159, 162, 165, 172, 186], "simplest": [102, 123, 150], "launcher": [102, 104, 129, 130, 155, 196], "experiment": [102, 126, 130, 131, 133, 139, 143, 183, 185, 186, 190, 194], "agent": 102, "nsga2": 102, "supernet": 102, "ofa_mbv3_d234_e346_k357_w1": 102, "mac": [102, 165], "num_ev": 102, "250": [102, 183], "results_csv_path": 102, "search_result": 102, "dataset_path": 102, "ilsvrc2012": 102, "nasbas": 102, "registri": 102, "mobilenetv3": 102, "lt": [102, 126], "wmt": 102, "en": 102, "de": 102, "guidelin": [103, 104], "mainstream": [104, 196], "particular": [104, 183, 189], "flex": [104, 139], "amd": [104, 139, 198], "arm": [104, 138, 139, 198], "nvidia": [104, 123, 138, 139, 198], "llama2": 104, "broad": [104, 138, 153, 196], "stabl": [104, 139, 183, 184], "diffus": [104, 184], "hub": [104, 132, 136, 155], "hug": [104, 171, 184], "coder": [104, 138, 148, 149, 152, 155, 158, 171, 175, 184], "marketplac": [104, 165, 184], "amazon": [104, 147, 155], "web": [104, 166, 172, 177, 178, 179, 193], "servic": [104, 164, 171, 184], "softwar": [104, 140, 183, 184, 190], "alibaba": [104, 154, 161, 162, 184], "tencent": [104, 184], "taco": [104, 184], "oliv": [104, 184], "ecosystem": [104, 184], "lightn": [104, 154], "2024": [104, 198], "03": [104, 141, 198], "sota": [104, 184], "gaudi2": 104, "pip": [104, 128, 131, 134, 136, 139, 149, 152, 157, 159, 161, 162, 166, 167, 168, 169, 190], "34": [104, 141, 179, 198], "packag": [104, 105, 124, 134, 139, 164, 165, 184, 190, 195], "docker": 104, "gaudi": 104, "stack": 104, "setup": [104, 128, 135, 139, 159, 162, 166, 168, 169, 171, 172, 183], "interact": [104, 170, 191], "shell": [104, 193], "habana": 104, "habana_visible_devic": 104, "ompi_mca_btl_vader_single_copy_mechan": 104, "cap": 104, "sys_nic": 104, "host": [104, 131, 172, 174, 177, 178, 179], "ipc": 104, "vault": 104, "ubuntu22": 104, "04": [104, 139, 198], "habanalab": 104, "optimum": [104, 154, 155, 167, 189], "upgrad": [104, 143], "auto_round": 104, "automodel": 104, "autotoken": [104, 143], "torch_util": [104, 187, 192], "get_dataload": 104, "neo": [104, 198], "float_model": 104, "trust_remote_cod": 104, "woq_conf": 104, "quantized_model": [104, 173, 177, 178], "resnet18": [104, 144, 149, 198], "static_quant_conf": 104, "overview": [104, 195], "jupyterlab": [104, 147, 153, 155, 157, 161, 196], "studio": [104, 155, 164, 174, 196], "topic": 104, "innov": [104, 155, 184], "blog": [104, 184], "june": [104, 184], "qwen2": [104, 184], "meta": [104, 141, 184, 198], "apr": [104, 184], "emnlp": [104, 184], "sep": [104, 184], "legal": [104, 199], "secur": [104, 166, 184, 199], "ask": [104, 139], "email": 104, "discord": 104, "join": [104, 167, 172, 177, 178], "technic": 104, "wechat": [104, 184], "img": 104, "bridg": [105, 106, 138], "vanilla": [105, 106, 138], "adaptor_registri": 105, "abcadaptor": 105, "__init__": [105, 124, 125, 126, 142, 195], "framework_specific_info": 105, "tune_cfg": [105, 107, 195], "query_fw_cap": [105, 107], "query_fused_pattern": 105, "he": 105, "describ": [105, 107, 124, 128, 135, 166, 193], "hidden": 105, "mainten": 105, "unifi": [105, 106, 107, 125, 137, 138, 142, 143, 145], "clear": [105, 135, 142, 143], "fragment": 105, "scheme": [105, 106, 107, 125, 135, 155, 189, 195, 197], "semant": [105, 135], "querybackendcap": [105, 106], "tensorflowqueri": 105, "mla": [105, 144, 186], "qtype": 105, "onnxrt_qlinearopsadaptor": 105, "data_load": 105, "inspect_tensor": 105, "op_list": [105, 193], "iteration_list": 105, "inspect_typ": 105, "save_to_disk": 105, "quantization_cfg": 105, "set_tensor": 105, "tensor_dict": 105, "input_graph": 105, "diagnosis_help": 105, "fw": 106, "outlin": [106, 107], "accommod": [106, 107], "give": [106, 164, 195], "diagram": [106, 107, 128, 195], "illustr": [106, 107, 130, 195], "sequencediagram": [106, 107, 174], "autonumb": [106, 107], "query_framework_cap": 106, "opwis": 106, "optypewis": 106, "\u2776": 106, "\u2777": 106, "\u2778": 106, "\u2779": 106, "\u277a": 106, "\u277b": 106, "\u277c": 106, "These": [106, 138, 167], "chapter": 106, "node_op": 106, "confirm": 106, "chosen": [106, 123], "conv2d": [106, 107, 128, 133, 135, 169, 192, 193, 195], "int8_conv_config": 106, "optype_wise_": 106, "per_channel": [106, 107, 135, 186, 197], "sym": [106, 107, 135, 186, 189, 197], "tuning_cfg_to_fw": 106, "Its": [106, 123, 183], "quantize_config": 106, "op_wise_config": 106, "dispatch": [106, 138, 171, 174], "is_perchannel": 106, "is_asymmetr": 106, "weight_bit": 106, "bf16_op": [106, 188], "convert_bf16": 106, "got": [106, 134, 193], "subsequ": [106, 147, 164], "calib": 106, "somewhat": 106, "distort": 106, "line": [106, 124, 131, 138, 147, 152, 153, 172, 193], "let": [107, 135, 152, 183, 185, 197], "overal": [107, 172, 189, 197], "drive": 107, "section": [107, 124, 128, 129, 130, 164, 167, 170, 183, 185, 189, 197], "uint4": 107, "asym": [107, 135, 189, 197], "independ": 107, "kullback": [107, 129], "leibler": [107, 129], "pytorch_cpu": 107, "1_11_capabl": 107, "cap_s8_1_11": 107, "cap_s8_1_11_conv1d": 107, "state": [107, 150, 183], "per_channel_symmetr": 107, "per_tensor_symmetr": 107, "nativ": 107, "with_arg": 107, "qscheme": 107, "torch_dtyp": 107, "quant_min": 107, "quant_max": 107, "linux": [122, 134, 158, 164], "x86_64": 122, "aarch64": 122, "sure": [122, 166], "benefici": 123, "\u03b2": 123, "\u03b1": 123, "focu": [123, 195], "essenti": [123, 134], "percentil": 123, "remaind": 123, "enhanc": [123, 147, 183, 184, 188], "resolut": 123, "extrem": 123, "retain": 123, "noteworthi": 123, "vanhouck": 123, "vincent": 123, "andrew": 123, "senior": 123, "mark": 123, "mao": 123, "2011": 123, "szymon": 123, "migacz": 123, "tensorrt": [123, 144, 186], "2017": 123, "mckinstri": 123, "jeffrei": 123, "discov": [123, 193], "embed": [123, 183], "1809": 123, "04191": 123, "2018": 123, "mostli": 124, "summar": [124, 129], "conflict": [124, 134], "overli": 124, "argu": 124, "decis": [124, 142], "prioriti": [124, 175], "pep": 124, "tile": 124, "o": [124, 139, 149, 167], "sub_modul": 124, "namespac": 124, "pollut": 124, "subprocess": [124, 125], "popen": 124, "statement": 124, "pipe": 124, "long_str": 124, "extran": 124, "__version__": 124, "placehold": 124, "pager": 124, "getenv": 124, "readabl": 124, "seem": 124, "worth": [124, 183], "4f": 124, "65421": 124, "sentenc": 124, "register_config": 124, "framework_nam": 124, "algo_nam": 124, "eval_result": 124, "declar": [124, 165], "typealia": 124, "_lossandgradi": 124, "complextfmap": 124, "xx_func": 124, "ordereddict": 124, "pylanc": 124, "cheeseshopaddress": 124, "chees": 124, "shop": 124, "outofcheeseerror": 124, "crbug": 124, "192795": 124, "cpufreq": [124, 150], "deprec": [124, 159, 162, 190, 194], "facilit": [124, 147], "__all__": 124, "know": [124, 131, 190], "get_all_config_set_from_config_registri": 124, "composableconfig": 124, "fwk_name": 124, "algorithm_entri": 124, "snippet": [124, 138], "register_algo": 124, "rtn_algo_entri": 124, "smooth_quant_entri": 124, "vscode": [124, 163, 165], "settings_recommend": 124, "encount": 125, "previous": 125, "lack": [125, 134], "faster": [125, 127, 133, 184, 195, 198], "treat": 125, "Of": 125, "collate_fn": [125, 126], "last_batch": 125, "evenli": 125, "discard": 125, "throw": 125, "awai": 125, "rollov": 125, "draw": [125, 191, 195], "batch_sampl": 125, "num_work": [125, 143, 186], "pin_memori": 125, "pin": [125, 157, 161], "shuffl": [125, 143, 186], "reshuffl": 125, "manner": [125, 129, 145], "newdataload": 125, "input_data": 125, "customis": [125, 126, 142], "ensp": [126, 194], "imagerecord": [126, 131, 197], "image_nam": 126, "cocorecord": 126, "int64": 126, "style_transf": 126, "content": [126, 172, 173, 177, 178, 179], "tfrecorddataset": 126, "spars": [126, 184], "post_training_static_qu": [126, 143, 185, 195], "labelbal": 126, "300": [126, 183], "idx": 126, "helloworld": [126, 144, 194], "aid": 127, "infrastructur": 127, "diagnos": 128, "gui": [128, 138, 169, 183], "termin": [128, 157, 158, 161, 167], "satisfi": [128, 139, 170], "repeat": [128, 195], "durat": [128, 173, 177, 178, 191], "cd": [128, 131, 139, 166, 168, 169, 171, 172, 177, 178, 179], "ilsvr2012": 128, "wget": [128, 134, 136, 166, 169], "caff": 128, "berkeleyvis": 128, "caffe_ilsvrc12": 128, "xvzf": 128, "image_recognit": [128, 169, 193], "resnet50_torchvis": 128, "ptq_static": [128, 168], "resnet50_v1": [128, 131, 143], "dataset_loc": [128, 169, 177, 193], "label_path": 128, "quantiti": 128, "vec": 128, "mu": 128, "sigma": 128, "sqrt": 128, "var": 128, "possibl": [128, 166, 182, 183, 187, 188, 195], "happen": 128, "dispers": [128, 167], "trust": [128, 166], "cg": [128, 169, 193], "conv0": [128, 169, 193], "expens": [129, 143, 195], "mobil": [129, 143, 198], "feed": [129, 183], "produc": 129, "logit": 129, "softmax": 129, "kd": 129, "d": [129, 137, 165, 167, 173, 183], "patient": 129, "compact": [129, 143, 150, 183], "resourc": [129, 171, 174, 195], "1x1": [129, 143, 183], "convolut": [129, 184], "ia": 129, "shallow": 129, "depth": [129, 188], "deepest": 129, "deeper": 129, "Will": [129, 138], "10006": [129, 130], "student_output": [129, 130], "student_loss": [129, 130], "training_func_for_nc": [129, 130], "distil_loss_conf": 129, "accordingli": [129, 155, 192], "promis": [130, 143, 183], "huge": [130, 169, 183, 187], "light": 130, "booster": 130, "degrad": [130, 183, 195], "novel": [130, 147, 158, 164], "comb": 130, "distillation_criterion": [130, 143, 182], "q_conf": 130, "horovod": 131, "builtin": 131, "enable_eager_execut": 131, "yaml_file_path": 131, "pre_process": 131, "simpli": [131, 145, 147, 149, 152, 164, 172], "evaluation_result": 131, "evaluation_time_cost": 131, "partit": [131, 183], "distributedsampl": 131, "train_sampl": 131, "train_dataset": [131, 186], "num_replica": 131, "rank": 131, "train_load": 131, "train_kwarg": 131, "adadelta": 131, "distributedoptim": 131, "named_paramet": 131, "broadcast_paramet": 131, "root_rank": 131, "broadcast_optimizer_st": 131, "set_epoch": 131, "batch_idx": 131, "zero_grad": [131, 143, 183], "nll_loss": 131, "log_interv": 131, "0f": 131, "tloss": 131, "6f": 131, "dry_run": 131, "break": [131, 143], "test_func": 131, "num_of_process": 131, "002": 131, "ssh": [131, 164], "prompt": 131, "readm": [131, 177], "exactli": [131, 148], "recognit": [131, 133, 183, 193], "resizecropimagenet": [131, 194], "realiz": [131, 181, 188, 191], "tow": 131, "node1": [131, 177, 178], "node2": [131, 177, 178], "TO": [131, 149, 169], "your_node1_nam": 131, "your_node2_nam": 131, "resnet50_fp32_pretrained_model": 131, "nc_resnet50_v1": 131, "resnet": [131, 198], "10k": [132, 136], "2x": [132, 138], "exchang": 133, "hope": 133, "inc_model": [133, 145], "fp32_onnx_config": 133, "verifi": [133, 141], "vgg16": [133, 198], "mobilenet": [133, 191, 198], "rcnn": 133, "torchscript": [133, 187, 192], "unsupport": [133, 143, 183], "add_relu": 133, "conv1d_relu": 133, "conv2d_relu": 133, "group_norm": 133, "hardswish": 133, "instance_norm": 133, "layer_norm": 133, "leaky_relu": 133, "sigmoid": 133, "toolchain": [134, 184], "bare": 134, "metal": 134, "sudo": [134, 150], "apt": [134, 139, 150, 158], "python3": 134, "dev": [134, 157, 161], "distutil": 134, "libgl1": 134, "mesa": 134, "glx": 134, "libglib2": 134, "ln": 134, "sf": 134, "usr": 134, "incompat": 134, "88": [134, 191, 198], "80": [134, 141, 187, 193, 198], "pyobject": 134, "reinstal": 134, "importerror": 134, "libgl": 134, "yum": [134, 139], "opencv": [134, 158], "conda": [134, 150, 158, 177, 178, 179, 190], "pend": [134, 173], "sqlalchemi": 134, "27": [134, 141, 198], "alemb": 134, "forg": 134, "quick": [135, 144, 183, 196, 197], "dive": [135, 196], "unless": 135, "syntax": 135, "go": [135, 159, 162, 170, 185, 189, 194], "15": [135, 139, 178], "up1": 135, "up2": 135, "valid_mixed_precis": 135, "concatv2": 135, "maxpool": 135, "avgpool": 135, "depthwiseconv2dn": 135, "relu6": 135, "biasadd": 135, "addn": 135, "addv2": 135, "grappler": 135, "grappler_optim": 135, "constfold": 135, "arithmet": 135, "debug_stripp": 135, "googleapi": [136, 166, 169], "v1_6": [136, 166, 169], "mobilenet_v1_1": [136, 166, 177], "0_224_frozen": [136, 166, 177], "concept": [137, 191, 196], "custom_metr": 137, "420": 138, "geomean": 138, "upload": [138, 159, 162], "click": [138, 147, 148, 155, 158, 164, 169, 184, 193], "qintegerop": [138, 186], "lock": [138, 182, 183], "momentum": [138, 143, 183, 197], "sensit": [138, 183], "lasso": [138, 183], "oneapi": [139, 184, 196], "analyt": [139, 184, 196], "success": [139, 166], "frequent": 139, "pypi": [139, 159, 162], "nightli": 139, "requirements_pt": 139, "requirements_tf": 139, "consolid": 139, "streamlin": [139, 171, 184], "scienc": 139, "websit": 139, "anaconda": [139, 171, 172], "suit": [139, 165, 193], "formerli": 139, "skylak": 139, "cascad": 139, "ic": [139, 184], "sapphir": [139, 141], "rapid": [139, 141], "hbm": 139, "arctic": 139, "sound": 139, "pont": 139, "vecchio": 139, "cento": [139, 198], "ubuntu": 139, "22": [139, 141, 198], "maco": 139, "ventura": 139, "fortensorflow": 139, "forpytorch": 139, "18": [139, 141, 184, 198], "17": [139, 177], "apach": 140, "subject": 140, "accompani": [140, 195], "wish": 140, "bibtex": 140, "misc": 140, "author": 140, "feng": 140, "tian": 140, "hanwen": 140, "haihao": [140, 183], "shen": [140, 183], "suyu": 140, "chen": 140, "howpublish": 140, "year": 140, "logo": 140, "atom": 140, "phi": 140, "pentium": 140, "vtune": 140, "corpor": 140, "subsidiari": 140, "brand": 140, "claim": 140, "hf": [141, 192, 198], "70b": [141, 198], "40b": 141, "baichuan": 141, "baichuan2": 141, "12b": 141, "neox": [141, 198], "20b": [141, 198], "mistralai": 141, "mistral": 141, "thudm": 141, "chatglm2": 141, "chatglm3": 141, "wip": 141, "soon": 141, "lambada_openai": [141, 198], "67": [141, 198], "69": [141, 198], "0222": 141, "55": [141, 179, 198], "9997": 141, "68": [141, 194, 198], "12": [141, 166, 198], "0081": 141, "66": [141, 167, 198], "9905": 141, "71": [141, 198], "51": [141, 198], "75": [141, 183, 198], "0568": 141, "0008": [141, 198], "70": [141, 198], "81": [141, 198], "9902": [141, 198], "06": [141, 179, 197, 198], "0058": [141, 198], "61": [141, 198], "9991": 141, "0034": 141, "46": [141, 198], "47": [141, 198], "99": [141, 198], "0356": 141, "9972": 141, "0121": 141, "35": [141, 183, 198], "63": [141, 183, 198], "92": [141, 198], "9933": [141, 198], "31": [141, 198], "9994": [141, 198], "0006": [141, 198], "9958": [141, 198], "29": [141, 198], "74": [141, 198], "9918": 141, "9964": 141, "58": [141, 178, 198], "0040": 141, "26": [141, 198], "0064": 141, "49": [141, 198], "78": [141, 194, 198], "0041": 141, "53": [141, 198], "0014": 141, "0043": 141, "76": [141, 198], "77": [141, 198], "25": [141, 183, 198], "9932": [141, 198], "0016": 141, "0116": 141, "60": [141, 198], "9978": [141, 198], "79": [141, 193, 198], "9937": [141, 198], "62": [141, 198], "09": [141, 198], "0057": 141, "0005": 141, "73": [141, 198], "9936": 141, "9989": 141, "9987": 141, "0046": [141, 198], "9979": [141, 198], "23": [141, 198], "52": [141, 198], "86": [141, 198], "9930": 141, "00": [141, 198], "9957": [141, 198], "9938": 141, "9942": [141, 198], "9990": 141, "9965": 141, "9995": 141, "82": [141, 198], "0078": 141, "0262": 141, "0052": 141, "9910": 141, "popularli": 142, "industri": [142, 184], "label_map": 142, "ap": 142, "curv": 142, "turn": [142, 158, 187], "target_boxes_num": 142, "str_label": 142, "int_label": 142, "inturn": 142, "cocomap": 142, "vocmap": 142, "categor": 142, "multiclass": 142, "multilabel": 142, "newmetr": 142, "reset": 142, "reflect": [142, 194], "new_metr": 142, "kind": 143, "resort": 143, "inject": 143, "automodelforsequenceclassif": 143, "worker": [143, 174, 177, 178, 179, 186], "ping_memori": [143, 186], "formul": 143, "templat": [143, 183], "effort": 143, "written": 143, "onnxrt_integ": [143, 197], "onnxrt_qlinear": [143, 197], "image_tensor": [143, 197], "post_training_dynamic_qu": [143, 185, 195], "1000": [143, 173, 197], "2000": 143, "sampling_s": [143, 197], "model_wis": [143, 197], "op_dict": 143, "op_wis": [143, 193, 197], "sigopt_api_token": [143, 191, 195], "sigopt_project_id": [143, 191, 195], "sigopt_experiment_nam": [143, 191, 195], "performance_onli": 143, "600": [143, 198], "training_arg": 143, "trainer": [143, 155], "maxim": [143, 183, 195], "pruning_func": 143, "num_train_epoch": [143, 183], "train_dataload": [143, 183, 186], "n_gpu": 143, "gradient_accumulation_step": 143, "clip_grad_norm_": 143, "max_grad_norm": 143, "start_epoch": [143, 185, 197], "end_epoch": [143, 185, 197], "97": [143, 198], "pruner": [143, 183, 197], "newli": [143, 183], "on_after_optimizer_step": [143, 183], "layer3": [143, 183], "layer2": [143, 183, 186], "knowledgedistillationloss": [143, 197], "weight_decai": [143, 197], "0004": 143, "nesterov": [143, 197], "randomresizedcrop": [143, 194], "totensor": [143, 194], "485": 143, "456": 143, "406": [143, 198], "nepoch": 143, "cnt": 143, "loss_sum": 143, "iter_bar": 143, "tqdm": 143, "desc": 143, "teacher_logit": 143, "pytorchknowledgedistillationloss": 143, "unnecessari": 143, "train_fun": 143, "training_func": 143, "output_model": [143, 167, 169, 193], "exit_polici": [143, 197], "determinist": 143, "meaning": [143, 182], "prune_conf": 143, "quantization_aware_training_conf": 143, "aforement": 143, "inset": 143, "p_conf": [143, 182], "ssd_mobilenet_v1": 143, "benchmarkconf": 143, "launch": [144, 165, 170], "cpuexecutionprovid": [144, 186], "tensorrtexecutionprovid": [144, 186], "cudaexecutionprovid": [144, 186], "cuda": [144, 147, 149, 183, 186], "dnnlexecutionprovid": [144, 186], "plu": 144, "persist": 145, "tf1": 145, "tf2": 145, "h5": 145, "hybridblock": 145, "0000": 145, "input_model": [145, 167, 168, 169, 193], "10005": [146, 187], "simplifi": [147, 158, 164, 183, 184], "switch": [147, 193], "acquir": 147, "heurist": [147, 164], "great": 147, "amp": [147, 154, 173, 189], "autocast": 147, "simultan": [147, 171, 182, 185], "my_model": 147, "no_grad": 147, "memory_format": 147, "112": 147, "plugin": [147, 165], "aw": [147, 155, 174, 184, 198], "sagemak": [147, 155], "inlin": [147, 152, 155], "neural_cod": [147, 149, 151, 152, 153, 155], "bench": 147, "superbench": 147, "enjoi": [148, 152, 155], "rebuild": [148, 157, 161], "reload": [148, 165, 167, 170], "democrat": [149, 184], "programm": [149, 155, 164], "nano_bf16_channels_last": 149, "nano_bf16_ipex_channels_last": 149, "nano_bf16_ipex": 149, "nano_bf16": 149, "nano_fp32_channels_last": 149, "nano_fp32_ipex_channels_last": 149, "nano_fp32_ipex": 149, "nano_gpu_to_cpu": 149, "nano_int8": 149, "nano_jit_bf16_channels_last": 149, "nano_jit_bf16_ipex_channels_last": 149, "nano_jit_bf16_ipex": 149, "nano_jit_bf16": 149, "nano_jit_fp32_channels_last": 149, "nano_jit_fp32_ipex_channels_last": 149, "nano_jit_fp32_ipex": 149, "nano_jit_fp32": 149, "nano_onnxruntime_fp32": 149, "nano_onnxruntime_int8_qlinear": 149, "openvino": 149, "nano_openvino_fp32": 149, "nano_openvino_int8": 149, "bc": [150, 158], "conda_prefix": 150, "echo": 150, "libjemalloc": 150, "libiomp5": 150, "home": 150, "lib": 150, "ld_preload": 150, "malloc_conf": 150, "oversize_threshold": 150, "background_thread": 150, "metadata_thp": 150, "dirty_decay_m": 150, "9000000000": 150, "muzzy_decay_m": 150, "kmp_affin": 150, "kmp_blocktim": 150, "dnnl_primitive_cache_capac": 150, "governor": 150, "scaling_governor": 150, "powersav": 150, "tee": 150, "pytorch_jit_script": [151, 154], "pytorch_channels_last": [151, 154], "run_bench": 151, "patch": [151, 164], "patch_path": 151, "your_patch_path": 151, "sweep": 151, "sweep_object": 151, "bench_config": 151, "bench_featur": 151, "sai": 152, "run_glu": [152, 153, 175, 178, 179], "requisit": 152, "task_nam": [152, 153, 175, 178, 179], "do_ev": [152, 153, 168, 175, 178, 179], "everyth": 152, "remain": 152, "itself": [152, 183], "run_glue_optim": 152, "overwritten": 152, "static_ipex": 152, "stock": [153, 192], "auto_qu": 153, "v4": [153, 175, 178, 179, 198], "albert": [153, 198], "sst2": 153, "alexnet": [153, 198], "pytorch_amp": 154, "optimize_for_infer": 154, "pytorch_jit_trac": 154, "pytorch_jit_script_ofi": 154, "pytorch_jit_trace_ofi": 154, "pytorch_torchdynamo_jit_script": 154, "pytorch_torchdynamo_jit_trac": 154, "pytorch_torchdynamo_jit_script_ofi": 154, "pytorch_torchdynamo_jit_trace_ofi": 154, "pytorch_inc_bf16": 154, "pytorch_inc_static_quant_fx": 154, "pytorch_inc_static_quant_ipex": 154, "pytorch_inc_static_quant_ipex_xpu": 154, "pytorch_inc_dynamic_qu": 154, "pytorch_ipex_fp32": 154, "pytorch_ipex_bf16": 154, "pytorch_ipex_int8_static_qu": 154, "pytorch_ipex_int8_dynamic_qu": 154, "blade": 154, "disc": 154, "pytorch_aliblad": 154, "pytorch_lightning_bf16_cpu": 154, "tensorflow_amp": 154, "keras_amp": 154, "tensorflow_inc": 154, "keras_inc": 154, "onnx_inc_static_quant_qlinear": 154, "onnx_inc_static_quant_qdq": 154, "onnx_inc_dynamic_qu": 154, "pytorch_inc_huggingface_optimum_stat": 154, "pytorch_inc_huggingface_optimum_dynam": 154, "intel_extension_for_transform": 154, "bigdl": [154, 155], "nano": [154, 155], "nano_": 154, "inc_auto": 154, "delight": 155, "announc": 155, "v": [155, 164, 183, 195, 197], "500": [155, 173], "jupyt": [155, 157, 158, 161], "delta": 155, "acc_delta": 155, "int8_acc": 155, "fp32_acc": 155, "ext": [157, 159, 161, 162, 163], "lab": [157, 158, 159, 161, 162], "nodej": [157, 161], "jlpm": [157, 161], "yarn": [157, 161], "npm": [157, 158, 161], "lieu": [157, 161], "labextens": [157, 158, 161], "typescript": [157, 161], "watch": [157, 161, 170], "immedi": [157, 161, 183], "refresh": [157, 161], "browser": [157, 161, 166, 170], "wait": [157, 161, 164, 174], "rebuilt": [157, 161], "easier": [157, 161, 164, 166, 184], "symlink": [157, 161], "down": 158, "finish": [158, 174], "enter": [158, 164, 172], "leav": 158, "blank": 158, "cell": 158, "gain": [158, 182, 184], "mkl": 158, "jemalloc": 158, "pip3": 158, "headless": 158, "pyproject": [159, 162], "toml": [159, 162], "twine": [159, 162], "whl": [159, 162], "dist": [159, 162], "sdist": [159, 162], "bdist_wheel": [159, 162], "frontend": [159, 162, 172, 179], "login": [159, 162, 191], "cut": [159, 162], "admin_github_token": [159, 162], "pypi_token": [159, 162], "npm_token": [159, 162], "secret": [159, 162], "panel": [159, 162, 164], "draft": [159, 162], "changelog": [159, 162, 163], "pkg": [159, 162], "bot": [159, 162], "pick": [159, 162, 165], "feedstock": [159, 162], "hatch": 162, "notabl": 163, "daili": 164, "advantag": [164, 183, 185, 195], "remot": 164, "server": [164, 166, 169, 172, 177, 178, 179], "re": [164, 170, 189], "market": 164, "connect": [164, 166, 173, 183, 191], "uninstal": 164, "fill": [164, 191, 194, 195], "upper": 164, "sidebar": 164, "hover": 164, "track": [164, 191], "argpars": 164, "pop": [164, 174], "diff": 164, "manifest": 165, "palett": 165, "src": 165, "registercommand": 165, "amodio": 165, "tsl": 165, "matcher": 165, "dbaeumer": 165, "eslint": [165, 170], "press": 165, "f5": 165, "ctrl": 165, "hello": 165, "world": 165, "breakpoint": 165, "consol": [165, 170], "relaunch": 165, "toolbar": 165, "node_modul": 165, "viewlet": 165, "dropdown": 165, "runner": [165, 170], "startup": 165, "bundl": 165, "neural_insight": [166, 168, 169], "tl": 166, "ui": 166, "5000": 166, "338174d13706855fc6924cec7b3a8ae8": 166, "listen": 166, "port": [166, 173], "firewal": 166, "8080": 166, "cert": 166, "path_to_cert": 166, "crt": 166, "path_to_private_kei": 166, "encrypt": 166, "insecur": 166, "expos": 166, "forfeit": 166, "client": [166, 172, 179], "extern": 166, "threat": 166, "diagnost": 166, "skill": 166, "feel": [166, 170], "layoutlmv3": [167, 198], "seqev": 167, "sentencepiec": 167, "timm": 167, "fvcore": 167, "pillow": 167, "einop": 167, "textdist": 167, "setuptool": 167, "cli": 167, "hypjudi": 167, "funsd": [167, 198], "calib_dataset": 167, "incdataset": 167, "eval_dataset": 167, "poor": [167, 193], "9049": 167, "2989": 167, "9631": 167, "glob": 167, "panda": 167, "pd": 167, "set_opt": 167, "max_row": 167, "max_column": 167, "getmtim": 167, "revers": 167, "activations_t": 167, "weights_tabl": [167, 168], "read_csv": 167, "nweight": 167, "descend": 167, "sorted_data": 167, "sort_valu": 167, "ascend": 167, "evid": 167, "tip": 167, "8981": 167, "7502": 167, "huggingface_model": 168, "run_clm": 168, "dataset_nam": 168, "wikitext": [168, 198], "dataset_config_nam": 168, "do_train": 168, "inspect_sav": 168, "inspect_result": 168, "quan": 168, "model_summari": 168, "incept": [169, 198], "v3": [169, 198], "inception_v3": [169, 193], "inceptionv3_fp32_pretrained_model": [169, 193], "bash": [169, 193], "prepare_dataset": 169, "sh": [169, 193], "raw_dir": 169, "img_raw": 169, "delet": [169, 183], "run_tun": 169, "nc_inception_v3": 169, "decreas": [169, 183], "highest": [169, 175, 195], "satisfactori": 169, "webpag": 169, "spike": 169, "bottom": 169, "concentr": 169, "But": 169, "bigger": 169, "vari": [169, 183, 192, 198], "bootstrap": 170, "localhost": [170, 172, 177, 178], "3000": 170, "lint": 170, "correctli": 170, "hash": [170, 173], "readi": [170, 183], "aren": 170, "transit": 170, "webpack": 170, "babel": 170, "tweak": 170, "ever": 170, "curat": 170, "suitabl": 170, "shouldn": 170, "wouldn": 170, "couldn": 170, "troubleshoot": 170, "effortlessli": 171, "rest": [171, 172, 177, 178, 179], "grpc": [171, 172, 176, 177, 178, 180], "queue": 171, "elimin": 171, "mpi": [171, 172, 195], "neural_solut": [171, 172, 177, 178, 179], "task_monitor_port": [172, 177, 178, 179], "22222": [172, 177, 178, 179], "result_monitor_port": [172, 177, 178, 179], "33333": [172, 177, 178, 179], "restful_api_port": [172, 177, 178, 179], "hostfil": [172, 174, 177, 178, 179], "grpc_api_port": [172, 177, 178, 179], "api_typ": [172, 177, 178, 179], "conda_env": [172, 177, 178, 179], "upload_path": [172, 177, 178, 179], "8000": [172, 177, 178, 179], "3333": [172, 177, 178, 179], "2222": [172, 177, 178, 179], "ns_workspac": [172, 177, 178, 179], "hf_model": [172, 176, 178, 179], "curl": [172, 173, 177, 178], "task_id": [172, 177, 178, 179], "usernam": 172, "db": [172, 174], "serve_log": [172, 177, 178, 179], "frontend_grpc": 172, "task_log": 172, "task_bdf0bd1b2cc14bc19bce12d4f9b333c7": 172, "task_workspac": 172, "bdf0bd1b2cc14bc19bce12d4f9b333c7": 172, "aliv": 172, "properli": 172, "commonli": [172, 183], "hostnam": 172, "breakdown": 172, "ip": 172, "hous": 172, "host1": [172, 177, 178], "host2": [172, 177, 178], "query_id": 172, "oaa": 173, "host_ip": 173, "task_request": [173, 177, 178, 179], "tuning_info": [173, 177], "optimization_result": [173, 177], "result_path": [173, 177, 178], "closur": 173, "404": [173, 183, 198], "health": 173, "healthi": 173, "400": 173, "alloc": 174, "incom": 174, "taskmonitor": 174, "cluster": [174, 177, 178, 195], "tasklaunch": 174, "resultmonitor": 174, "receiv": [174, 191], "p1": 174, "notif": 174, "p2": 174, "p3": 174, "mpirun": [174, 195], "perf": 174, "p4": 174, "classdiagram": 174, "taskdb": 174, "get_statu": 174, "update_statu": 174, "task_collect": 174, "append_task": 174, "get_all_pending_task": 174, "update_task_statu": 174, "task_db": 174, "wait_new_task": 174, "schedule_task": 174, "dispatch_task": 174, "launch_task": 174, "query_task_statu": 174, "node_list": 174, "reserve_resourc": 174, "get_node_statu": 174, "pool": 174, "gcp": [174, 184], "script_url": [175, 177, 178, 179], "archiv": 175, "tf_example1": [176, 177, 178], "hf_models_grpc": [176, 179], "00173": 177, "01024": 177, "task_request_distribut": 177, "custom_models_optim": 177, "7602cd63d4c849e7a686a8165a77f69d": [177, 178], "151": 177, "8617": 177, "8213": [177, 198], "number_of_socket": [177, 178], "number_of_thread": [177, 178], "cdf419910f9b4d2a8320d0e420ac1d0a": 178, "optimized_result": 178, "3162": 178, "6488": [178, 198], "d3e10a49326449fb9d0d62f2bfc1cb43": 179, "fastapi": 180, "multi_object": 181, "benefit": 182, "instanti": 182, "neuron": 183, "art": 183, "grown": 183, "unpreced": 183, "increasingli": 183, "stand": [183, 195], "consecut": 183, "shrink": 183, "influenc": 183, "mechan": [183, 191, 196], "contextu": 183, "scene": 183, "haven": 183, "color": [183, 187], "lowest": [183, 195], "interv": 183, "gradual": 183, "emsp": 183, "pure": 183, "downstream": 183, "prone": 183, "co": 183, "discourag": 183, "penal": 183, "parameter": 183, "coeffici": 183, "sparsegpt": 183, "lightweight": 183, "retriev": 183, "perceptron": 183, "valuabl": [183, 193], "basi": 183, "mha": 183, "billion": 183, "tend": 183, "exemplifi": 183, "fortieth": 183, "pruner2": 183, "prepare_prun": 183, "retrain_fre": 183, "few": [183, 184, 192, 195], "yourself": 183, "uncertain": 183, "parse_auto_slim_config": 183, "auto_config": 183, "ffn2_sparsiti": 183, "mha_spars": 183, "quit": 183, "carri": 183, "pruning_pattern": 183, "pruning_start": 183, "pruning_end": 183, "sparse_gpt": 183, "embed_out": 183, "card": 183, "hesit": 183, "causal": 183, "clm": 183, "sst": [183, 198], "24": [183, 195, 198], "flan": 183, "t5": 183, "english": 183, "romanian": 183, "381": 183, "yolov5": 183, "2x1": [183, 198], "801": 183, "7895": 183, "reduct": [183, 187, 197], "xgboost": 183, "namhoon": 183, "lee": 183, "thalaiyasingam": 183, "ajanthan": 183, "philip": 183, "torr": 183, "2019": 183, "zafrir": 183, "ofir": 183, "ariel": 183, "larei": 183, "boudoukh": 183, "mosh": 183, "wasserblat": 183, "2111": 183, "05754": 183, "2021": 183, "kwon": 183, "kim": 183, "mahonei": 183, "hassoun": 183, "keutzer": 183, "gholami": 183, "pp": 183, "24101": 183, "24116": 183, "alistarh": 183, "massiv": 183, "2301": 183, "00774": 183, "oct": 184, "medium": 184, "aug": 184, "juli": 184, "onnxcommunitymeetup2023": 184, "msft": 184, "netflix": 184, "mlperf": [184, 198], "5x": 184, "\u96c6\u6210\u82f1\u7279\u5c14": 184, "\u817e\u8baf\u4e91taco": 184, "kit\u4e3aai\u5e94\u7528\u5e26\u6765\u9ad8\u6548\u5f02\u6784\u52a0\u901f\u670d\u52a1": 184, "mar": 184, "heterogen": 184, "jan": 184, "busi": 184, "amx": 184, "journei": 184, "dec": 184, "mleffici": 184, "deepen": 184, "foundat": 184, "intellig": 184, "vmware": 184, "applianc": 184, "bitnami": 184, "nov": 184, "neurip": 184, "quala": 184, "minilm": [184, 198], "plug": 184, "twitter": 184, "linkedin": 184, "zone": 184, "land": 184, "pat": 184, "keynot": 184, "intelon": 184, "chines": 184, "purif": 184, "jun": 184, "partner": 184, "feb": 184, "joint": 184, "bilibili": 184, "gestalt": 184, "ml": 184, "youtub": 184, "reconstruct": 184, "abound": 184, "lpot": [184, 190], "nextplatform": 184, "cern": 184, "gan": 184, "3dgan": 184, "iml": 184, "workshop": 184, "asplo": 184, "intelcaff": 184, "aris": 185, "henc": 185, "onnxrt_qoper": 185, "quant_aware_train": 185, "use_bf16": 185, "weight_compress": [185, 197], "initial_spars": [185, 197], "max_sparsity_ratio_per_lay": 185, "prune_typ": [185, 197], "basic_magnitud": [185, 197], "update_frequ": 185, "update_frequency_on_step": 185, "prune_domain": 185, "tile_pattern_1x1": 185, "affin": 186, "neither": 186, "nor": 186, "val_load": 186, "avg": 186, "themselv": 186, "dmlexecutionprovid": 186, "meanwhil": 187, "substanti": 187, "constrain": 187, "grei": 187, "blue": 187, "rectangl": 187, "subgraph": [187, 195], "load_empty_model": 187, "lambda": 187, "ouput_dir": 187, "fp32_model_path": 187, "int8_model_path": 187, "ON": 188, "forc": 188, "postposttrainingquantconfig": 188, "datatyp": [188, 195, 198], "cast": [188, 194], "bf16convert": 188, "matter": 188, "bf16wrapper": 188, "retrac": 188, "enable_mse_search": 189, "805": 189, "005": 189, "return_int": 189, "enable_auto_scal": 189, "nsampl": 189, "pad_max_length": 189, "use_max_length": 189, "true_sequenti": 189, "slower": 189, "sym_full_rang": 189, "qweight_config_path": 189, "gptq_config_path": 189, "gptq_config": 189, "use_full_length": 189, "compressed_model": 189, "seek": 189, "omit": 189, "rtn_g32asym": 189, "gptq_g32asym": 189, "gptq_g32asym_disable_last_matmul": 189, "gptq_g128asym": 189, "awq_g32asym": 189, "site": 190, "assist": 190, "inspect": [190, 193], "sed": 190, "your_script": 190, "backbon": 191, "sigopt_experiment_id": 191, "nc": [191, 195], "although": 191, "suffici": 191, "ordinari": 191, "latenc": [191, 195], "8266": 191, "8372": 191, "2132": 191, "7495": 191, "8299": 191, "8294": 191, "0837": 191, "8291": 191, "4469": 191, "allevi": 192, "herebi": 192, "optdecoderlay": 192, "blockwis": 192, "waq": 192, "torchsmoothqu": 192, "auto_alpha_arg": 192, "overhead": 192, "leakyrelu": 192, "hardtanh": 192, "instancenorm": 192, "t5norm": 192, "llamanorm": 192, "groupnorm": 192, "7392": [192, 198], "7335": 192, "7058": [192, 198], "6994": 192, "7677": [192, 198], "7615": [192, 198], "7332": 192, "7632": 192, "arang": 192, "tolist": 192, "default_alpha": 192, "alpha_min": 192, "alpha_max": 192, "alpha_step": 192, "step_siz": 192, "shared_criterion": 192, "do_blockwis": 192, "jason": 192, "transact": 192, "instrument": 193, "writer": 193, "_pre_eval_hook": 193, "_post_eval_hook": 193, "submodul": 193, "whitelist": 193, "_recordingobserv": 193, "output_tensors_dict": 193, "current_it": 193, "get_tensor_valu": 193, "_observer_forward_hook": 193, "activation_post_process": 193, "_add_observer_": 193, "child": 193, "named_children": 193, "leaf": 193, "add_modul": 193, "register_forward_hook": 193, "dump_tim": 193, "summarywrit": 193, "_acc": 193, "tune_": 193, "add_graph": 193, "get_observer_dict": 193, "observer_dict": 193, "strip": 193, "parent": 193, "is_quant": 193, "add_histogram": 193, "bind_al": 193, "logdir_spec": 193, "tune_0_acc0": 193, "tune_1": 193, "tune_1_acc0": 193, "baseline_acc_0": 193, "776": 193, "tune_1_acc_0": 193, "095": 193, "runs_v3": 193, "run_tuning_dump_tensor": 193, "inceptionv3": 193, "skip": [193, 195], "run_quant": 193, "topologi": 193, "nc_inceptionv3": 193, "inceptionv3_dump_tensor": 193, "eightbit": 193, "requant": 193, "disappear": 193, "centercrop": 194, "randomcrop": 194, "cropres": 194, "decodeimag": 194, "jpeg": 194, "encodejp": 194, "alignimagechannel": 194, "116": 194, "103": [194, 198], "94": [194, 198], "017": 194, "bilinearimagenet": [194, 197], "topilimag": 194, "padding_mod": 194, "border": 194, "pixel": 194, "edg": 194, "colorjitt": 194, "bright": 194, "contrast": 194, "satur": 194, "hue": 194, "jitter": 194, "tondarrai": 194, "o1": 195, "human": 195, "concret": 195, "aggress": 195, "flowchart": 195, "htmllabel": 195, "td": 195, "classdef": 195, "itemstyl": 195, "cce5ff": 195, "stroke": 195, "99ccff": 195, "s1": 195, "s2": 195, "s3": 195, "s4": 195, "s5": 195, "s6": 195, "s7": 195, "nbsp": [195, 198], "subgraphstyl": 195, "ffffff": 195, "attempt": 195, "post_training_auto_qu": 195, "increment": 195, "ii": 195, "confidence_batch": 195, "spent": 195, "hawq_v2_loss": 195, "model_loss": 195, "black": 195, "discret": 195, "compli": 195, "prior": 195, "posterior": 195, "short": 195, "never": 195, "loglevel": 195, "endlessli": 195, "perspect": 195, "smbo": 195, "appl": 195, "surrog": 195, "quantil": 195, "densiti": 195, "parzen": 195, "greatest": 195, "hour": 195, "dai": 195, "next_tune_cfg": 195, "overridden": 195, "replic": 195, "replica": 195, "fed": 195, "synchron": 195, "number_of_process": 195, "run_cmd": 195, "abctunestrategi": 195, "familiar": 196, "notebook": 196, "introduct": 196, "organ": 197, "mobilenet_v1": 197, "40": [197, 198], "adam": 197, "beta_1": 197, "beta_2": 197, "999": 197, "epsilon": 197, "sparsecategoricalcrossentropi": 197, "sum_over_batch_s": 197, "from_logit": 197, "54": [197, 198], "19": [197, 198], "1x": 198, "platinum": 198, "8480": 198, "8ghz": 198, "56": 198, "ht": 198, "turbo": 198, "256gb": 198, "16x16gb": 198, "ddr5": 198, "4800": 198, "mt": 198, "bio": 198, "3a14": 198, "tel2p1": 198, "microcod": 198, "0x2b0001b0": 198, "gcc": 198, "20210514": 198, "red": 198, "hat": 198, "visit": 198, "1s4c14ins1bsthroughput": 198, "sec": 198, "1720": 198, "582": 198, "95x": 198, "1517": 198, "38": 198, "570": 198, "65": 198, "66x": 198, "resnet101": 198, "41": 198, "1058": 198, "382": 198, "96": 198, "77x": 198, "2080": 198, "951": 198, "19x": 198, "1587": 198, "863": 198, "37": 198, "84x": 198, "1052": 198, "434": 198, "42x": 198, "707": 198, "234": 198, "02x": 198, "320": 198, "179": 198, "79x": 198, "4312": 198, "1512": 198, "85x": 198, "2287": 198, "1406": 198, "63x": 198, "1367": 198, "59x": 198, "vgg19": 198, "1244": 198, "176": 198, "04x": 198, "resnetv2": 198, "780": 198, "34x": 198, "494": 198, "43": 198, "329": 198, "50x": 198, "152": 198, "349": 198, "235": 198, "48x": 198, "densenet": 198, "161": 198, "282": 198, "223": 198, "26x": 198, "1284": 198, "756": 198, "70x": 198, "1280": 198, "530": 198, "cnn": 198, "39": 198, "178": 198, "13x": 198, "yolov3": 198, "249": 198, "44": 198, "64x": 198, "28x": 198, "36": 198, "05x": 198, "390": 198, "212": 198, "83x": 198, "vit": 198, "230": 198, "142": 198, "62x": 198, "1989": 198, "31x": 198, "1165": 198, "303": 198, "953": 198, "302": 198, "15x": 198, "resnest50": 198, "365": 198, "21x": 198, "resnext101_32x8d": 198, "548": 198, "104": 198, "27x": 198, "efficientnet_b0": 198, "636": 198, "566": 198, "12x": 198, "efficientnet_b3": 198, "471": 198, "358": 198, "32x": 198, "peleenet": 198, "790": 198, "504": 198, "57x": 198, "yolo": 198, "137": 198, "88x": 198, "175": 198, "23x": 198, "camembert": 198, "393": 198, "174": 198, "783": 198, "344": 198, "684": 198, "99x": 198, "312": 198, "155": 198, "01x": 198, "funnel": 198, "281": 198, "395": 198, "173": 198, "373": 198, "405": 198, "30x": 198, "stsb": 198, "396": 198, "136": 198, "377": 198, "17x": 198, "391": 198, "25x": 198, "135": 198, "61x": 198, "117": 198, "93x": 198, "lvwerra": 198, "pegasu": 198, "samsum": 198, "1981": 198, "598": 198, "1095": 198, "298": 198, "67x": 198, "549": 198, "29x": 198, "375": 198, "hellaswag": 198, "winogrand": 198, "piqa": 198, "word_perplex": 198, "4954": 198, "6409": 198, "7541": 198, "6434": 198, "8816": 198, "gptqw4g128asym": 198, "679": 198, "4895": 198, "6433": 198, "7476": 198, "6399": 198, "9945": 198, "0999": 198, "gptqw4g32asym": 198, "6829": 198, "4923": 198, "6401": 198, "7486": 198, "6410": 198, "9963": 198, "0141": 198, "gptqw4g128sym": 198, "685": 198, "4907": 198, "6361": 198, "7443": 198, "6390": 198, "1498": 198, "gptqw4g32sym": 198, "6911": 198, "4899": 198, "6448": 198, "7497": 198, "6439": 198, "0927": 198, "5049": 198, "6543": 198, "7628": 198, "6497": 198, "2862": 198, "4984": 198, "6535": 198, "7568": 198, "6473": 198, "9962": 198, "4193": 198, "6885": 198, "4973": 198, "753": 198, "6455": 198, "9935": 198, "4607": 198, "decapoda": 198, "5642": 198, "6709": 198, "7835": 198, "6887": 198, "4202": 198, "7244": 198, "5603": 198, "6614": 198, "6824": 198, "9909": 198, "5881": 198, "5911": 198, "7009": 198, "7878": 198, "7106": 198, "7518": 198, "5843": 198, "6961": 198, "7911": 198, "4319": 198, "7572": 198, "5898": 198, "7056": 198, "7894": 198, "7105": 198, "9998": 198, "3429": 198, "7596": 198, "5841": 198, "6977": 198, "7905": 198, "7080": 198, "4916": 198, "6266": 198, "7277": 198, "8096": 198, "7350": 198, "2384": 198, "778": 198, "624": 198, "7269": 198, "8047": 198, "7334": 198, "4237": 198, "7706": 198, "6239": 198, "7285": 198, "8058": 198, "7322": 198, "4697": 198, "7836": 198, "6195": 198, "7337": 198, "9983": 198, "5604": 198, "5732": 198, "648": 198, "7715": 198, "6746": 198, "7107": 198, "6982": 198, "5637": 198, "6527": 198, "7704": 198, "6713": 198, "9950": 198, "9702": 198, "5682": 198, "6575": 198, "7758": 198, "6742": 198, "9317": 198, "567": 198, "6902": 198, "7353": 198, "6622": 198, "7829": 198, "6862": 198, "9635": 198, "7246": 198, "5617": 198, "6756": 198, "7797": 198, "6854": 198, "9931": 198, "2799": 198, "7312": 198, "6059": 198, "7103": 198, "7077": 198, "2213": 198, "7273": 198, "6018": 198, "7088": 198, "7742": 198, "7030": 198, "9934": 198, "2538": 198, "083": 198, "7283": 198, "6053": 198, "7024": 198, "7764": 198, "7031": 198, "1889": 198, "374": 198, "727": 198, "5997": 198, "7018": 198, "9916": 198, "2504": 198, "497": 198, "7122": 198, "8984": 198, "5933": 198, "689": 198, "7851": 198, "7075": 198, "1556": 198, "448": 198, "7675": 198, "5934": 198, "7856": 198, "7111": 198, "9984": 198, "1514": 198, "927": 198, "7566": 198, "5899": 198, "7032": 198, "9953": 198, "1374": 198, "728": 198, "4628": 198, "6456": 198, "6029": 198, "6438": 198, "5799": 198, "4542": 198, "6004": 198, "0626": 198, "4789": 198, "6134": 198, "7432": 198, "5525": 198, "4731": 198, "6504": 198, "7617": 198, "6094": 198, "7828": 198, "5098": 198, "7622": 198, "6505": 198, "3242": 198, "6878": 198, "5058": 198, "6393": 198, "7633": 198, "6491": 198, "5514": 198, "6864": 198, "5084": 198, "6519": 198, "6509": 198, "4728": 198, "6876": 198, "5045": 198, "6474": 198, "9952": 198, "6379": 198, "5282": 198, "614": 198, "7448": 198, "6312": 198, "6377": 198, "5228": 198, "5991": 198, "6261": 198, "9919": 198, "4096": 198, "6224": 198, "4271": 198, "577": 198, "722": 198, "5871": 198, "9359": 198, "6123": 198, "4227": 198, "5738": 198, "7203": 198, "5823": 198, "9917": 198, "3377": 198, "615": 198, "4259": 198, "5714": 198, "7247": 198, "9951": 198, "2083": 198, "6154": 198, "4208": 198, "5777": 198, "7198": 198, "5834": 198, "3121": 198, "7233": 198, "5359": 198, "7753": 198, "195": 198, "7186": 198, "5328": 198, "7699": 198, "6687": 198, "9922": 198, "3463": 198, "7268": 198, "533": 198, "659": 198, "6726": 198, "2897": 198, "5718": 198, "6859": 198, "7927": 198, "6890": 198, "9324": 198, "7006": 198, "5655": 198, "6803": 198, "7965": 198, "6857": 198, "1515": 198, "5752": 198, "6748": 198, "7845": 198, "6724": 198, "5951": 198, "6472": 198, "5716": 198, "6685": 198, "784": 198, "6678": 198, "8539": 198, "6918": 198, "5819": 198, "678": 198, "6861": 198, "8863": 198, "5765": 198, "6827": 198, "7873": 198, "6832": 198, "1451": 198, "storywrit": 198, "693": 198, "5477": 198, "663": 198, "6719": 198, "9125": 198, "6661": 198, "7813": 198, "6693": 198, "9961": 198, "1137": 198, "rw": 198, "6604": 198, "5419": 198, "6598": 198, "6594": 198, "7616": 198, "6484": 198, "5369": 198, "7807": 198, "6559": 198, "9947": 198, "9411": 198, "6571": 198, "5398": 198, "6582": 198, "6579": 198, "8809": 198, "652": 198, "535": 198, "7682": 198, "6532": 198, "9906": 198, "0048": 198, "5177": 198, "6669": 198, "7824": 198, "5053": 198, "6301": 198, "5142": 198, "6654": 198, "6483": 198, "8146": 198, "517": 198, "9941": 198, "1666": 198, "734": 198, "1658": 198, "1495": 198, "733": 198, "1661": 198, "732": 198, "1713": 198, "767": 198, "1747": 198, "770": 198, "7519": 198, "4430": 198, "4413": 198, "72x": 198, "7190": 198, "4019": 198, "613": 198, "170": 198, "611": 198, "186": 198, "619": 198, "184": 198, "36x": 198, "623": 198, "5711": 198, "2584": 198, "6136": 198, "2630": 198, "33x": 198, "shufflenet": 198, "6820": 198, "3686": 198, "googlenet": 198, "1971": 198, "1120": 198, "76x": 198, "1838": 198, "1142": 198, "squeezenet": 198, "10163": 198, "5771": 198, "10339": 198, "6002": 198, "caffenet": 198, "2805": 198, "1077": 198, "60x": 198, "4351": 198, "822": 198, "2169": 198, "893": 198, "43x": 198, "2232": 198, "841": 198, "65x": 198, "zfnet": 198, "921": 198, "525": 198, "75x": 198, "925": 198, "534": 198, "73x": 198, "1862": 198, "1161": 198, "1956": 198, "1262": 198, "55x": 198, "efficientnet": 198, "2793": 198, "1383": 198, "beit": 198, "206": 198, "91x": 198, "duc": 198, "74x": 198, "ultra": 198, "8780": 198, "1920": 198, "emot": 198, "ferplu": 198, "6360": 198, "3067": 198, "07x": 198, "arcfac": 198, "449": 198, "511": 198, "484": 198, "222": 198, "18x": 198, "integerop": 198, "635": 198, "1324": 198, "244": 198, "47x": 198, "440": 198, "214": 198, "06x": 198, "715": 198, "201": 198, "03x": 198, "714": 198, "213": 198, "339": 198, "58x": 198, "215": 198, "89x": 198, "712": 198, "217": 198, "l12": 198, "h384": 198, "1209": 198, "588": 198, "1268": 198, "16x": 198, "1253": 198, "399": 198, "14x": 198, "l6": 198, "1139": 198, "94x": 198, "2365": 198, "08x": 198, "718": 198, "35x": 198, "electra": 198, "discrimin": 198, "1951": 198, "71x": 198, "2198": 198, "1129": 198, "mini": 198, "5814": 198, "3388": 198, "6396": 198, "3445": 198, "86x": 198, "bart": 198, "126": 198, "spanbert": 198, "multilingu": 198, "82x": 198, "118": 198, "46x": 198, "layoutlmv2": 198, "perplex": 198, "2788": 198, "7002": 198, "4124": 198, "9921": 198, "3950": 198, "9892": 198, "9163": 198, "7240": 198, "0438": 198, "7634": 198, "1186": 198, "9944": 198, "1276": 198, "7543": 198, "6181": 198, "rtnw4g32asym": 198, "6496": 198, "9967": 198, "7964": 198, "6612": 198, "rtnw4g32sym": 198, "7941": 198, "7243": 198, "9971": 198, "taskdataset": 198, "accuracyspars": 198, "ratiospars": 198, "commentsbalancedor": 198, "unbalanc": 198, "answeringsquad": 198, "87f1": 198, "momentumunbalanc": 198, "momentumbalanc": 198, "90f1": 198, "59f1": 198, "23f1": 198, "classificationmrpc": 198, "52f1": 198, "26f1": 198, "classificationsst": 198, "61accuraci": 198, "recognitionimagenet": 198, "95top1": 198, "v5s6": 198, "detectioncoco": 198, "ap0": 198, "6ap0": 198, "584": 198, "34f1": 198, "lassounbalanc": 198, "classificationmnli": 198, "mm": 198, "allbalanc": 198, "32accuraci": 198, "sensitivitybalanc": 198, "classificationqqp": 198, "classificationqnli": 198, "54accuraci": 198, "em": 198, "mobilenetv2": 198, "wideresnet40": 198, "9522": 198, "8178": 198, "0213": 198, "8235": 198, "027": 198, "5494": 198, "7153": 198, "5540": 198, "5523": 198, "vgg": 198, "bn": 198, "7022": 198, "7415": 198, "7025": 198, "0003": 198, "6739": 198, "7399": 198, "6845": 198, "0106": 198, "blendcnn": 198, "7034": 198, "8382": 198, "bilstm": 198, "8314": 198, "9403": 198, "9048": 198, "0734": 198, "7323": 198, "8256": 198, "8084": 198, "8814": 198, "7442": 198, "8371": 198, "0119": 198, "0115": 198, "tinybert": 198, "8018": 198, "8044": 198, "8363": 198, "8411": 198, "8025": 198, "8074": 198, "0007": 198, "0030": 198, "8626": 198, "9091": 198, "8782": 198, "8684": 198, "8259": 198, "distilroberta": 198, "6057": 198, "6187": 198, "0130": 198, "c6i": 198, "2xlarg": 198, "c6a": 198, "c6g": 198, "a100cuda": 198, "executionprovid": 198}, "objects": {"": [[28, 0, 0, "-", "neural_compressor"]], "neural_compressor": [[2, 0, 0, "-", "algorithm"], [5, 0, 0, "-", "benchmark"], [6, 0, 0, "-", "config"], [7, 0, 0, "-", "contrib"], [22, 0, 0, "-", "data"], [35, 0, 0, "-", "metric"], [37, 0, 0, "-", "mix_precision"], [39, 0, 0, "-", "model"], [47, 0, 0, "-", "objective"], [48, 0, 0, "-", "profiling"], [49, 0, 0, "-", "quantization"], [57, 0, 0, "-", "strategy"], [68, 0, 0, "-", "training"], [76, 0, 0, "-", "utils"], [85, 0, 0, "-", "version"]], "neural_compressor.algorithm": [[0, 0, 0, "-", "algorithm"], [1, 0, 0, "-", "fast_bias_correction"], [3, 0, 0, "-", "smooth_quant"], [4, 0, 0, "-", "weight_correction"]], "neural_compressor.algorithm.algorithm": [[0, 1, 1, "", "ALGORITHMS"], [0, 1, 1, "", "Algorithm"], [0, 1, 1, "", "AlgorithmScheduler"], [0, 2, 1, "", "algorithm_registry"]], "neural_compressor.algorithm.fast_bias_correction": [[1, 1, 1, "", "FastBiasCorrection"]], "neural_compressor.algorithm.smooth_quant": [[3, 1, 1, "", "SmoothQuant"]], "neural_compressor.algorithm.weight_correction": [[4, 1, 1, "", "WeightCorrection"]], "neural_compressor.benchmark": [[5, 2, 1, "", "benchmark_with_raw_cmd"], [5, 2, 1, "", "call_one"], [5, 2, 1, "", "config_instance"], [5, 2, 1, "", "fit"], [5, 2, 1, "", "generate_prefix"], [5, 2, 1, "", "get_architecture"], [5, 2, 1, "", "get_bounded_threads"], [5, 2, 1, "", "get_core_ids"], [5, 2, 1, "", "get_physical_ids"], [5, 2, 1, "", "get_threads"], [5, 2, 1, "", "get_threads_per_core"], [5, 2, 1, "", "profile"], [5, 2, 1, "", "run_instance"], [5, 2, 1, "", "set_all_env_var"], [5, 2, 1, "", "set_env_var"], [5, 2, 1, "", "summary_benchmark"]], "neural_compressor.config": [[6, 1, 1, "", "AccuracyCriterion"], [6, 1, 1, "", "BenchmarkConfig"], [6, 1, 1, "", "DistillationConfig"], [6, 1, 1, "", "DotDict"], [6, 1, 1, "", "ExportConfig"], [6, 1, 1, "", "HPOConfig"], [6, 1, 1, "", "IntermediateLayersKnowledgeDistillationLossConfig"], [6, 1, 1, "", "Keras"], [6, 1, 1, "", "KnowledgeDistillationLossConfig"], [6, 1, 1, "", "MXNet"], [6, 1, 1, "", "MixedPrecisionConfig"], [6, 1, 1, "", "NASConfig"], [6, 1, 1, "", "ONNX"], [6, 1, 1, "", "ONNXQlinear2QDQConfig"], [6, 1, 1, "", "Options"], [6, 1, 1, "", "PostTrainingQuantConfig"], [6, 1, 1, "", "PyTorch"], [6, 1, 1, "", "QuantizationAwareTrainingConfig"], [6, 1, 1, "", "SelfKnowledgeDistillationLossConfig"], [6, 1, 1, "", "TF2ONNXConfig"], [6, 1, 1, "", "TensorFlow"], [6, 1, 1, "", "Torch2ONNXConfig"], [6, 1, 1, "", "TuningCriterion"], [6, 1, 1, "", "WeightPruningConfig"]], "neural_compressor.contrib": [[8, 0, 0, "-", "strategy"]], "neural_compressor.contrib.strategy": [[9, 0, 0, "-", "sigopt"], [10, 0, 0, "-", "tpe"]], "neural_compressor.contrib.strategy.sigopt": [[9, 1, 1, "", "SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[10, 1, 1, "", "TpeTuneStrategy"]], "neural_compressor.data": [[17, 0, 0, "-", "datasets"], [21, 0, 0, "-", "filters"], [24, 0, 0, "-", "transforms"]], "neural_compressor.data.datasets": [[11, 0, 0, "-", "bert_dataset"], [12, 0, 0, "-", "coco_dataset"], [13, 0, 0, "-", "dataset"], [14, 0, 0, "-", "dummy_dataset"], [15, 0, 0, "-", "dummy_dataset_v2"], [16, 0, 0, "-", "imagenet_dataset"], [18, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.data.datasets.bert_dataset": [[11, 1, 1, "", "InputFeatures"], [11, 1, 1, "", "ONNXRTBertDataset"], [11, 1, 1, "", "ParseDecodeBert"], [11, 1, 1, "", "PytorchBertDataset"], [11, 1, 1, "", "TensorflowBertDataset"], [11, 1, 1, "", "TensorflowModelZooBertDataset"], [11, 2, 1, "", "convert_examples_to_features"], [11, 2, 1, "", "load_and_cache_examples"]], "neural_compressor.data.datasets.coco_dataset": [[12, 1, 1, "", "COCONpy"], [12, 1, 1, "", "COCORaw"], [12, 1, 1, "", "COCORecordDataset"], [12, 1, 1, "", "ParseDecodeCoco"]], "neural_compressor.data.datasets.dataset": [[13, 1, 1, "", "CIFAR10"], [13, 1, 1, "", "CIFAR100"], [13, 1, 1, "", "Dataset"], [13, 1, 1, "", "Datasets"], [13, 1, 1, "", "FashionMNIST"], [13, 1, 1, "", "ImageFolder"], [13, 1, 1, "", "IterableDataset"], [13, 1, 1, "", "MNIST"], [13, 1, 1, "", "MXNetCIFAR10"], [13, 1, 1, "", "MXNetCIFAR100"], [13, 1, 1, "", "MXNetDatasets"], [13, 1, 1, "", "MXNetFashionMNIST"], [13, 1, 1, "", "MXNetImageFolder"], [13, 1, 1, "", "MXNetMNIST"], [13, 1, 1, "", "ONNXRTITDatasets"], [13, 1, 1, "", "ONNXRTQLDatasets"], [13, 1, 1, "", "PyTorchDatasets"], [13, 1, 1, "", "PytorchCIFAR10"], [13, 1, 1, "", "PytorchCIFAR100"], [13, 1, 1, "", "PytorchFashionMNIST"], [13, 1, 1, "", "PytorchMNIST"], [13, 1, 1, "", "PytorchMxnetWrapDataset"], [13, 1, 1, "", "PytorchMxnetWrapFunction"], [13, 1, 1, "", "Tensorflow"], [13, 1, 1, "", "TensorflowCIFAR10"], [13, 1, 1, "", "TensorflowCIFAR100"], [13, 1, 1, "", "TensorflowDatasets"], [13, 1, 1, "", "TensorflowFashionMNIST"], [13, 1, 1, "", "TensorflowImageRecord"], [13, 1, 1, "", "TensorflowMNIST"], [13, 1, 1, "", "TensorflowTFRecordDataset"], [13, 1, 1, "", "TensorflowVOCRecord"], [13, 2, 1, "", "calculate_md5"], [13, 2, 1, "", "check_integrity"], [13, 2, 1, "", "dataset_registry"], [13, 2, 1, "", "download_url"], [13, 3, 1, "", "framework_datasets"], [13, 2, 1, "", "gen_bar_updater"]], "neural_compressor.data.datasets.dummy_dataset": [[14, 1, 1, "", "DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[15, 1, 1, "", "DummyDataset"], [15, 1, 1, "", "SparseDummyDataset"]], "neural_compressor.data.datasets.imagenet_dataset": [[16, 1, 1, "", "ImagenetRaw"], [16, 1, 1, "", "MXNetImagenetRaw"], [16, 1, 1, "", "ONNXRTImagenetDataset"], [16, 1, 1, "", "PytorchImagenetRaw"], [16, 1, 1, "", "TensorflowImagenetDataset"], [16, 1, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.data.datasets.style_transfer_dataset": [[18, 1, 1, "", "StyleTransferDataset"]], "neural_compressor.data.filters": [[19, 0, 0, "-", "coco_filter"], [20, 0, 0, "-", "filter"]], "neural_compressor.data.filters.coco_filter": [[19, 1, 1, "", "LabelBalanceCOCORawFilter"], [19, 1, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.filter": [[20, 1, 1, "", "FILTERS"], [20, 1, 1, "", "Filter"], [20, 1, 1, "", "MXNetFilters"], [20, 1, 1, "", "ONNXRTITFilters"], [20, 1, 1, "", "ONNXRTQLFilters"], [20, 1, 1, "", "PyTorchFilters"], [20, 1, 1, "", "TensorflowFilters"], [20, 2, 1, "", "filter_registry"]], "neural_compressor.data.transforms": [[23, 0, 0, "-", "imagenet_transform"], [25, 0, 0, "-", "postprocess"], [26, 0, 0, "-", "tokenization"], [27, 0, 0, "-", "transform"]], "neural_compressor.data.transforms.imagenet_transform": [[23, 1, 1, "", "BilinearImagenetTransform"], [23, 1, 1, "", "LabelShift"], [23, 1, 1, "", "ONNXResizeCropImagenetTransform"], [23, 1, 1, "", "OnnxBilinearImagenetTransform"], [23, 1, 1, "", "ParseDecodeImagenet"], [23, 1, 1, "", "ParseDecodeImagenetTransform"], [23, 1, 1, "", "QuantizedInput"], [23, 1, 1, "", "ResizeWithAspectRatio"], [23, 1, 1, "", "TensorflowResizeCropImagenetTransform"], [23, 1, 1, "", "TensorflowShiftRescale"], [23, 1, 1, "", "TensorflowTransposeLastChannel"]], "neural_compressor.data.transforms.postprocess": [[25, 1, 1, "", "Postprocess"]], "neural_compressor.data.transforms.tokenization": [[26, 1, 1, "", "BasicTokenizer"], [26, 1, 1, "", "FullTokenizer"], [26, 1, 1, "", "WordpieceTokenizer"], [26, 2, 1, "", "convert_by_vocab"], [26, 2, 1, "", "convert_to_unicode"], [26, 2, 1, "", "load_vocab"], [26, 2, 1, "", "whitespace_tokenize"]], "neural_compressor.data.transforms.transform": [[27, 1, 1, "", "AlignImageChannelTransform"], [27, 1, 1, "", "BaseTransform"], [27, 1, 1, "", "CastONNXTransform"], [27, 1, 1, "", "CastPyTorchTransform"], [27, 1, 1, "", "CastTFTransform"], [27, 1, 1, "", "CenterCropTFTransform"], [27, 1, 1, "", "CenterCropTransform"], [27, 1, 1, "", "CollectTransform"], [27, 1, 1, "", "ComposeTransform"], [27, 1, 1, "", "CropResizeTFTransform"], [27, 1, 1, "", "CropResizeTransform"], [27, 1, 1, "", "CropToBoundingBox"], [27, 1, 1, "", "InputFeatures"], [27, 1, 1, "", "MXNetCropResizeTransform"], [27, 1, 1, "", "MXNetCropToBoundingBox"], [27, 1, 1, "", "MXNetNormalizeTransform"], [27, 1, 1, "", "MXNetTransforms"], [27, 1, 1, "", "MXNetTranspose"], [27, 1, 1, "", "NormalizeTFTransform"], [27, 1, 1, "", "NormalizeTransform"], [27, 1, 1, "", "ONNXRTCropToBoundingBox"], [27, 1, 1, "", "ONNXRTITTransforms"], [27, 1, 1, "", "ONNXRTQLTransforms"], [27, 1, 1, "", "PaddedCenterCropTransform"], [27, 1, 1, "", "ParseDecodeVocTransform"], [27, 1, 1, "", "PyTorchAlignImageChannel"], [27, 1, 1, "", "PyTorchCropResizeTransform"], [27, 1, 1, "", "PyTorchNormalizeTransform"], [27, 1, 1, "", "PyTorchTransforms"], [27, 1, 1, "", "PyTorchTranspose"], [27, 1, 1, "", "PytorchMxnetTransform"], [27, 1, 1, "", "PytorchMxnetWrapFunction"], [27, 1, 1, "", "RandomCropTFTransform"], [27, 1, 1, "", "RandomCropTransform"], [27, 1, 1, "", "RandomHorizontalFlip"], [27, 1, 1, "", "RandomResizedCropMXNetTransform"], [27, 1, 1, "", "RandomResizedCropPytorchTransform"], [27, 1, 1, "", "RandomResizedCropTFTransform"], [27, 1, 1, "", "RandomResizedCropTransform"], [27, 1, 1, "", "RandomVerticalFlip"], [27, 1, 1, "", "RescaleKerasPretrainTransform"], [27, 1, 1, "", "RescaleTFTransform"], [27, 1, 1, "", "RescaleTransform"], [27, 1, 1, "", "ResizeMXNetTransform"], [27, 1, 1, "", "ResizePytorchTransform"], [27, 1, 1, "", "ResizeTFTransform"], [27, 1, 1, "", "ResizeTransform"], [27, 1, 1, "", "ResizeWithRatio"], [27, 1, 1, "", "SquadExample"], [27, 1, 1, "", "TFModelZooCollectTransform"], [27, 1, 1, "", "TFSquadV1ModelZooPostTransform"], [27, 1, 1, "", "TFSquadV1PostTransform"], [27, 1, 1, "", "TRANSFORMS"], [27, 1, 1, "", "TensorflowCropToBoundingBox"], [27, 1, 1, "", "TensorflowRandomHorizontalFlip"], [27, 1, 1, "", "TensorflowRandomVerticalFlip"], [27, 1, 1, "", "TensorflowResizeWithRatio"], [27, 1, 1, "", "TensorflowTransform"], [27, 1, 1, "", "TensorflowTransforms"], [27, 1, 1, "", "TensorflowTranspose"], [27, 1, 1, "", "TensorflowWrapFunction"], [27, 1, 1, "", "ToArray"], [27, 1, 1, "", "ToNDArrayTransform"], [27, 1, 1, "", "Transforms"], [27, 1, 1, "", "Transpose"], [27, 2, 1, "", "convert_examples_to_features"], [27, 2, 1, "", "get_final_text"], [27, 2, 1, "", "get_torchvision_map"], [27, 2, 1, "", "read_squad_examples"], [27, 2, 1, "", "transform_registry"]], "neural_compressor.metric": [[29, 0, 0, "-", "bleu"], [30, 0, 0, "-", "bleu_util"], [31, 0, 0, "-", "coco_label_map"], [32, 0, 0, "-", "coco_tools"], [33, 0, 0, "-", "evaluate_squad"], [34, 0, 0, "-", "f1"], [36, 0, 0, "-", "metric"]], "neural_compressor.metric.bleu": [[29, 1, 1, "", "BLEU"], [29, 1, 1, "", "UnicodeRegex"], [29, 2, 1, "", "bleu_tokenize"]], "neural_compressor.metric.bleu.BLEU": [[29, 4, 1, "", "labels"], [29, 4, 1, "", "predictions"]], "neural_compressor.metric.bleu.UnicodeRegex": [[29, 4, 1, "", "nondigit_punct_re"], [29, 4, 1, "", "punct_nondigit_re"], [29, 4, 1, "", "symbol_re"]], "neural_compressor.metric.bleu_util": [[30, 2, 1, "", "compute_bleu"]], "neural_compressor.metric.coco_tools": [[32, 1, 1, "", "COCOEvalWrapper"], [32, 1, 1, "", "COCOWrapper"], [32, 2, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [32, 2, 1, "", "ExportSingleImageDetectionMasksToCoco"], [32, 2, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.metric.coco_tools.COCOWrapper": [[32, 4, 1, "", "dataset"], [32, 4, 1, "", "detection_type"]], "neural_compressor.metric.evaluate_squad": [[33, 2, 1, "", "evaluate"], [33, 2, 1, "", "exact_match_score"], [33, 2, 1, "", "f1_score"], [33, 2, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[34, 2, 1, "", "evaluate"], [34, 2, 1, "", "f1_score"], [34, 2, 1, "", "metric_max_over_ground_truths"], [34, 2, 1, "", "normalize_answer"]], "neural_compressor.metric.metric": [[36, 1, 1, "", "Accuracy"], [36, 1, 1, "", "BaseMetric"], [36, 1, 1, "", "COCOmAPv2"], [36, 1, 1, "", "F1"], [36, 1, 1, "", "GeneralTopK"], [36, 1, 1, "", "Loss"], [36, 1, 1, "", "MAE"], [36, 1, 1, "", "METRICS"], [36, 1, 1, "", "MSE"], [36, 1, 1, "", "MXNetMetrics"], [36, 1, 1, "", "Metric"], [36, 1, 1, "", "ONNXRTGLUE"], [36, 1, 1, "", "ONNXRTITMetrics"], [36, 1, 1, "", "ONNXRTQLMetrics"], [36, 1, 1, "", "PyTorchLoss"], [36, 1, 1, "", "PyTorchMetrics"], [36, 1, 1, "", "RMSE"], [36, 1, 1, "", "ROC"], [36, 1, 1, "", "SquadF1"], [36, 1, 1, "", "TensorflowCOCOMAP"], [36, 1, 1, "", "TensorflowMAP"], [36, 1, 1, "", "TensorflowMetrics"], [36, 1, 1, "", "TensorflowTopK"], [36, 1, 1, "", "TensorflowVOCMAP"], [36, 1, 1, "", "WrapMXNetMetric"], [36, 1, 1, "", "WrapONNXRTMetric"], [36, 1, 1, "", "WrapPyTorchMetric"], [36, 1, 1, "", "mIOU"], [36, 2, 1, "", "metric_registry"], [36, 2, 1, "", "register_customer_metric"]], "neural_compressor.metric.metric.Accuracy": [[36, 4, 1, "", "label_list"], [36, 4, 1, "", "pred_list"], [36, 4, 1, "", "sample"]], "neural_compressor.metric.metric.GeneralTopK": [[36, 4, 1, "", "k"], [36, 4, 1, "", "num_correct"], [36, 4, 1, "", "num_sample"]], "neural_compressor.metric.metric.Loss": [[36, 4, 1, "", "sample"], [36, 4, 1, "", "sum"]], "neural_compressor.metric.metric.MAE": [[36, 4, 1, "", "compare_label"], [36, 4, 1, "", "label_list"], [36, 4, 1, "", "pred_list"]], "neural_compressor.metric.metric.METRICS": [[36, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.MSE": [[36, 4, 1, "", "compare_label"], [36, 4, 1, "", "label_list"], [36, 4, 1, "", "pred_list"]], "neural_compressor.metric.metric.MXNetMetrics": [[36, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTITMetrics": [[36, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTQLMetrics": [[36, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.PyTorchMetrics": [[36, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.RMSE": [[36, 4, 1, "", "mse"]], "neural_compressor.metric.metric.TensorflowMetrics": [[36, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.TensorflowTopK": [[36, 4, 1, "", "k"], [36, 4, 1, "", "num_correct"], [36, 4, 1, "", "num_sample"]], "neural_compressor.mix_precision": [[37, 2, 1, "", "fit"]], "neural_compressor.model": [[38, 0, 0, "-", "base_model"], [40, 0, 0, "-", "keras_model"], [41, 0, 0, "-", "model"], [42, 0, 0, "-", "mxnet_model"], [43, 0, 0, "-", "nets_factory"], [44, 0, 0, "-", "onnx_model"], [45, 0, 0, "-", "tensorflow_model"], [46, 0, 0, "-", "torch_model"]], "neural_compressor.model.base_model": [[38, 1, 1, "", "BaseModel"]], "neural_compressor.model.keras_model": [[40, 1, 1, "", "KerasModel"]], "neural_compressor.model.model": [[41, 1, 1, "", "Model"], [41, 2, 1, "", "get_model_fwk_name"]], "neural_compressor.model.mxnet_model": [[42, 1, 1, "", "MXNetModel"]], "neural_compressor.model.nets_factory": [[43, 1, 1, "", "TFSlimNetsFactory"]], "neural_compressor.model.onnx_model": [[44, 1, 1, "", "ONNXModel"]], "neural_compressor.model.tensorflow_model": [[45, 1, 1, "", "TensorflowBaseModel"], [45, 1, 1, "", "TensorflowCheckpointModel"], [45, 1, 1, "", "TensorflowLLMModel"], [45, 1, 1, "", "TensorflowModel"], [45, 1, 1, "", "TensorflowQATModel"], [45, 1, 1, "", "TensorflowSavedModelModel"], [45, 2, 1, "", "checkpoint_session"], [45, 2, 1, "", "estimator_session"], [45, 2, 1, "", "frozen_pb_session"], [45, 2, 1, "", "get_model_type"], [45, 2, 1, "", "graph_def_session"], [45, 2, 1, "", "graph_session"], [45, 2, 1, "", "keras_session"], [45, 2, 1, "", "load_saved_model"], [45, 2, 1, "", "saved_model_session"], [45, 2, 1, "", "slim_session"], [45, 2, 1, "", "try_loading_keras"], [45, 2, 1, "", "validate_and_inference_input_output"], [45, 2, 1, "", "validate_graph_node"]], "neural_compressor.model.torch_model": [[46, 1, 1, "", "IPEXModel"], [46, 1, 1, "", "PyTorchBaseModel"], [46, 1, 1, "", "PyTorchFXModel"], [46, 1, 1, "", "PyTorchModel"]], "neural_compressor.objective": [[47, 1, 1, "", "Accuracy"], [47, 1, 1, "", "Footprint"], [47, 1, 1, "", "ModelSize"], [47, 1, 1, "", "MultiObjective"], [47, 1, 1, "", "Objective"], [47, 1, 1, "", "Performance"], [47, 2, 1, "", "objective_custom_registry"], [47, 2, 1, "", "objective_registry"]], "neural_compressor.quantization": [[49, 2, 1, "", "fit"]], "neural_compressor.strategy": [[50, 0, 0, "-", "auto"], [51, 0, 0, "-", "auto_mixed_precision"], [52, 0, 0, "-", "basic"], [53, 0, 0, "-", "bayesian"], [54, 0, 0, "-", "conservative"], [55, 0, 0, "-", "exhaustive"], [56, 0, 0, "-", "hawq_v2"], [58, 0, 0, "-", "mse"], [59, 0, 0, "-", "mse_v2"], [60, 0, 0, "-", "random"], [61, 0, 0, "-", "strategy"], [63, 0, 0, "-", "utils"]], "neural_compressor.strategy.auto": [[50, 1, 1, "", "AutoTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[51, 1, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.basic": [[52, 1, 1, "", "BasicTuneStrategy"]], "neural_compressor.strategy.bayesian": [[53, 1, 1, "", "BayesianOptimization"], [53, 1, 1, "", "BayesianTuneStrategy"], [53, 1, 1, "", "TargetSpace"], [53, 2, 1, "", "acq_max"]], "neural_compressor.strategy.conservative": [[54, 1, 1, "", "ConservativeTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[55, 1, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[56, 1, 1, "", "HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.mse": [[58, 1, 1, "", "MSETuneStrategy"]], "neural_compressor.strategy.mse_v2": [[59, 1, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.strategy.random": [[60, 1, 1, "", "RandomTuneStrategy"]], "neural_compressor.strategy.strategy": [[61, 1, 1, "", "TuneStrategy"], [61, 1, 1, "", "TuneStrategyMeta"], [61, 2, 1, "", "strategy_registry"]], "neural_compressor.strategy.utils": [[62, 0, 0, "-", "constant"], [64, 0, 0, "-", "tuning_sampler"], [65, 0, 0, "-", "tuning_space"], [66, 0, 0, "-", "tuning_structs"], [67, 0, 0, "-", "utility"]], "neural_compressor.strategy.utils.tuning_sampler": [[64, 1, 1, "", "BlockFallbackTuningSampler"], [64, 1, 1, "", "FallbackTuningSampler"], [64, 1, 1, "", "LowerBitsSampler"], [64, 1, 1, "", "ModelWiseTuningSampler"], [64, 1, 1, "", "OpTypeWiseTuningSampler"], [64, 1, 1, "", "OpWiseTuningSampler"], [64, 1, 1, "", "SmoothQuantSampler"], [64, 1, 1, "", "TuningOrder"], [64, 1, 1, "", "TuningSampler"], [64, 1, 1, "", "WeightOnlyQuantSampler"]], "neural_compressor.strategy.utils.tuning_space": [[65, 1, 1, "", "TuningItem"], [65, 1, 1, "", "TuningSpace"], [65, 2, 1, "", "initial_tuning_cfg_with_quant_mode"], [65, 2, 1, "", "pattern_to_internal"], [65, 2, 1, "", "pattern_to_path"], [65, 2, 1, "", "quant_mode_from_pattern"]], "neural_compressor.strategy.utils.tuning_structs": [[66, 1, 1, "", "OpTuningConfig"]], "neural_compressor.strategy.utils.utility": [[67, 1, 1, "", "ClassRegister"], [67, 1, 1, "", "OrderedDefaultDict"], [67, 1, 1, "", "QuantOptions"], [67, 1, 1, "", "QuantType"], [67, 2, 1, "", "build_slave_faker_model"], [67, 2, 1, "", "extract_data_type"], [67, 2, 1, "", "get_adaptor_name"], [67, 2, 1, "", "preprocess_user_cfg"], [67, 2, 1, "", "reverted_data_type"]], "neural_compressor.training": [[68, 1, 1, "", "CallBacks"], [68, 1, 1, "", "CompressionManager"], [68, 2, 1, "", "fit"], [68, 2, 1, "", "prepare_compression"]], "neural_compressor.utils": [[69, 0, 0, "-", "collect_layer_histogram"], [70, 0, 0, "-", "constant"], [71, 0, 0, "-", "create_obj_from_config"], [72, 0, 0, "-", "export"], [77, 0, 0, "-", "kl_divergence"], [78, 0, 0, "-", "load_huggingface"], [79, 0, 0, "-", "logger"], [80, 0, 0, "-", "neural_insights_utils"], [81, 0, 0, "-", "options"], [82, 0, 0, "-", "pytorch"], [83, 0, 0, "-", "utility"], [84, 0, 0, "-", "weights_details"]], "neural_compressor.utils.collect_layer_histogram": [[69, 1, 1, "", "LayerHistogramCollector"]], "neural_compressor.utils.create_obj_from_config": [[71, 2, 1, "", "create_dataloader"], [71, 2, 1, "", "create_dataset"], [71, 2, 1, "", "create_eval_func"], [71, 2, 1, "", "create_train_func"], [71, 2, 1, "", "get_algorithm"], [71, 2, 1, "", "get_func_from_config"], [71, 2, 1, "", "get_metrics"], [71, 2, 1, "", "get_postprocess"], [71, 2, 1, "", "get_preprocess"]], "neural_compressor.utils.export": [[73, 0, 0, "-", "qlinear2qdq"], [74, 0, 0, "-", "tf2onnx"], [75, 0, 0, "-", "torch2onnx"]], "neural_compressor.utils.export.qlinear2qdq": [[73, 2, 1, "", "check_model"], [73, 2, 1, "", "onnx_qlinear_to_qdq"]], "neural_compressor.utils.export.tf2onnx": [[74, 2, 1, "", "tf_to_fp32_onnx"], [74, 2, 1, "", "tf_to_int8_onnx"]], "neural_compressor.utils.export.torch2onnx": [[75, 2, 1, "", "dynamic_quant_export"], [75, 2, 1, "", "get_node_mapping"], [75, 2, 1, "", "get_quantizable_onnx_ops"], [75, 2, 1, "", "static_quant_export"], [75, 2, 1, "", "torch_to_fp32_onnx"], [75, 2, 1, "", "torch_to_int8_onnx"]], "neural_compressor.utils.kl_divergence": [[77, 1, 1, "", "KL_Divergence"]], "neural_compressor.utils.load_huggingface": [[78, 1, 1, "", "OptimizedModel"], [78, 2, 1, "", "export_compressed_model"], [78, 2, 1, "", "save_for_huggingface_upstream"]], "neural_compressor.utils.logger": [[79, 1, 1, "", "Logger"], [79, 2, 1, "", "debug"], [79, 2, 1, "", "error"], [79, 2, 1, "", "fatal"], [79, 2, 1, "", "info"], [79, 2, 1, "", "log"], [79, 2, 1, "", "warn"], [79, 2, 1, "", "warning"]], "neural_compressor.utils.neural_insights_utils": [[80, 2, 1, "", "get_model_path"], [80, 2, 1, "", "register_neural_insights_workload"], [80, 2, 1, "", "update_neural_insights_workload"], [80, 2, 1, "", "update_neural_insights_workload_accuracy_data"]], "neural_compressor.utils.options": [[81, 1, 1, "", "onnxrt"]], "neural_compressor.utils.pytorch": [[82, 2, 1, "", "is_int8_model"], [82, 2, 1, "", "load"], [82, 2, 1, "", "load_weight_only"], [82, 2, 1, "", "recover_model_from_json"]], "neural_compressor.utils.utility": [[83, 1, 1, "", "CaptureOutputToFile"], [83, 1, 1, "", "CpuInfo"], [83, 2, 1, "", "Dequantize"], [83, 1, 1, "", "DotDict"], [83, 1, 1, "", "GLOBAL_STATE"], [83, 1, 1, "", "LazyImport"], [83, 1, 1, "", "MODE"], [83, 1, 1, "", "OpEntry"], [83, 1, 1, "", "Statistics"], [83, 2, 1, "", "alias_param"], [83, 2, 1, "", "calculate_mse"], [83, 2, 1, "", "check_key_exist"], [83, 2, 1, "", "combine_histogram"], [83, 2, 1, "", "compare_objects"], [83, 2, 1, "", "compute_sparsity"], [83, 2, 1, "", "deep_get"], [83, 2, 1, "", "deep_set"], [83, 2, 1, "", "dequantize_weight"], [83, 2, 1, "", "dump_class_attrs"], [83, 2, 1, "", "dump_data_to_local"], [83, 2, 1, "", "dump_elapsed_time"], [83, 2, 1, "", "dump_table"], [83, 2, 1, "", "dump_table_to_csv"], [83, 2, 1, "", "equal_dicts"], [83, 2, 1, "", "fault_tolerant_file"], [83, 2, 1, "", "get_all_fp32_data"], [83, 2, 1, "", "get_number_of_sockets"], [83, 2, 1, "", "get_op_list"], [83, 2, 1, "", "get_size"], [83, 2, 1, "", "get_tensor_histogram"], [83, 2, 1, "", "get_tensors_info"], [83, 2, 1, "", "get_tuning_history"], [83, 2, 1, "", "get_weights_details"], [83, 2, 1, "", "load_data_from_pkl"], [83, 2, 1, "", "mse_metric_gap"], [83, 2, 1, "", "print_op_list"], [83, 2, 1, "", "print_table"], [83, 2, 1, "", "recover"], [83, 2, 1, "", "set_random_seed"], [83, 2, 1, "", "set_resume_from"], [83, 2, 1, "", "set_tensorboard"], [83, 2, 1, "", "set_workspace"], [83, 2, 1, "", "show_memory_info"], [83, 2, 1, "", "singleton"], [83, 2, 1, "", "str2array"], [83, 2, 1, "", "time_limit"], [83, 2, 1, "", "version1_eq_version2"], [83, 2, 1, "", "version1_gt_version2"], [83, 2, 1, "", "version1_gte_version2"], [83, 2, 1, "", "version1_lt_version2"], [83, 2, 1, "", "version1_lte_version2"]], "neural_compressor.utils.weights_details": [[84, 1, 1, "", "WeightsDetails"], [84, 1, 1, "", "WeightsStatistics"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:function", "3": "py:data", "4": "py:attribute"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "function", "Python function"], "3": ["py", "data", "Python data"], "4": ["py", "attribute", "Python attribute"]}, "titleterms": {"neural_compressor": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85], "algorithm": [0, 1, 2, 3, 4, 123, 189, 192, 195], "class": [0, 1, 3, 4, 6, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 23, 25, 26, 27, 29, 32, 36, 38, 40, 41, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 77, 78, 79, 81, 83, 84, 105, 174], "function": [0, 5, 11, 13, 20, 26, 27, 29, 30, 32, 33, 34, 36, 37, 41, 45, 47, 49, 53, 61, 65, 67, 68, 71, 73, 74, 75, 78, 79, 80, 82, 83, 131], "modul": [0, 1, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 23, 25, 26, 27, 29, 30, 32, 33, 34, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 71, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84], "content": [0, 1, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 23, 25, 26, 27, 29, 30, 32, 33, 34, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 71, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 104, 174], "fast_bias_correct": 1, "submodul": [2, 8, 17, 21, 24, 28, 35, 39, 57, 63, 72, 76], "smooth_quant": 3, "weight_correct": 4, "benchmark": [5, 113, 122, 128, 143, 185], "config": [6, 115, 126, 181], "contrib": [7, 8, 9, 10], "subpackag": [7, 22, 28, 57, 76], "strategi": [8, 9, 10, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 120, 191, 195], "sigopt": [9, 191, 195], "tpe": [10, 195], "data": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 106, 107, 128, 132, 168], "dataset": [11, 12, 13, 14, 15, 16, 17, 18, 126, 128, 137, 169], "bert_dataset": 11, "coco_dataset": 12, "attribut": [13, 99], "dummy_dataset": 14, "dummy_dataset_v2": 15, "imagenet_dataset": 16, "style_transfer_dataset": 18, "filter": [19, 20, 21], "coco_filt": 19, "transform": [23, 24, 25, 26, 27, 137, 194], "imagenet_transform": 23, "postprocess": 25, "token": 26, "metric": [29, 30, 31, 32, 33, 34, 35, 36, 137, 142], "bleu": 29, "bleu_util": 30, "coco_label_map": 31, "coco_tool": 32, "evaluate_squad": 33, "f1": 34, "mix_precis": 37, "model": [38, 39, 40, 41, 42, 43, 44, 45, 46, 89, 90, 96, 106, 117, 133, 136, 139, 141, 143, 145, 146, 153, 167, 168, 169, 177, 178, 179, 183, 187, 189, 192, 198], "base_model": 38, "keras_model": 40, "mxnet_model": 42, "nets_factori": 43, "onnx_model": 44, "tensorflow_model": 45, "torch_model": 46, "object": [47, 118, 177, 178, 179, 181], "profil": [48, 128], "quantiz": [49, 86, 87, 89, 90, 91, 92, 93, 95, 97, 101, 104, 106, 107, 119, 123, 128, 130, 133, 136, 139, 141, 143, 144, 146, 153, 164, 166, 167, 168, 169, 177, 178, 179, 185, 186, 187, 188, 189, 192, 198], "auto": [50, 94, 158, 164, 188, 192, 195], "auto_mixed_precis": 51, "basic": [52, 102, 195], "bayesian": [53, 195], "conserv": [54, 195], "exhaust": [55, 195], "hawq_v2": [56, 195], "mse": [58, 195], "mse_v2": [59, 195], "random": [60, 195], "util": [62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 110], "constant": [62, 70], "tuning_sampl": 64, "tuning_spac": 65, "tuning_struct": 66, "train": [68, 95, 97, 101, 121, 131, 143, 183, 186], "collect_layer_histogram": 69, "create_obj_from_config": 71, "export": [72, 73, 74, 75, 133, 189], "qlinear2qdq": 73, "tf2onnx": 74, "torch2onnx": 75, "kl_diverg": 77, "load_huggingfac": 78, "logger": [79, 124], "neural_insights_util": 80, "option": [81, 131, 152], "pytorch": [82, 88, 89, 90, 91, 96, 97, 126, 131, 133, 142, 168, 186, 187, 188, 193, 194, 198], "weights_detail": 84, "version": 85, "dynam": [86, 97, 101, 102, 186], "introduct": [86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 101, 102, 105, 106, 107, 122, 123, 125, 126, 128, 129, 130, 131, 133, 135, 138, 142, 144, 145, 146, 164, 167, 168, 169, 181, 182, 183, 185, 186, 187, 189, 191, 192, 193, 194, 195, 197], "get": [86, 87, 88, 90, 91, 93, 101, 102, 104, 105, 122, 125, 126, 128, 129, 130, 131, 135, 136, 142, 144, 146, 147, 158, 165, 166, 170, 171, 172, 173, 181, 182, 183, 185, 186, 193, 197], "start": [86, 87, 88, 90, 91, 93, 101, 102, 104, 105, 122, 125, 126, 128, 129, 130, 131, 135, 136, 142, 144, 146, 147, 148, 152, 158, 166, 170, 171, 172, 177, 178, 179, 181, 182, 183, 185, 186, 193, 197], "exampl": [86, 87, 88, 90, 91, 93, 94, 97, 101, 102, 105, 111, 122, 125, 126, 128, 129, 130, 131, 132, 133, 142, 143, 144, 145, 146, 149, 153, 166, 167, 168, 169, 171, 176, 177, 178, 179, 181, 182, 183, 186, 187, 189, 192, 193, 198], "microsc": [87, 146], "api": [87, 88, 92, 95, 102, 105, 106, 111, 112, 122, 125, 126, 129, 130, 131, 136, 137, 142, 144, 146, 147, 151, 165, 166, 173, 179, 181, 182, 183, 185, 196], "refer": [87, 91, 97, 123, 124, 146, 183, 186, 189, 192], "mix": [88, 116, 143, 144, 188], "precis": [88, 116, 143, 144, 188], "support": [88, 89, 91, 92, 95, 100, 101, 102, 105, 107, 122, 123, 125, 126, 128, 129, 130, 131, 133, 135, 138, 139, 142, 144, 145, 146, 148, 149, 153, 154, 181, 182, 183, 185, 186, 187, 189, 192, 193, 194, 197], "matrix": [88, 89, 91, 92, 95, 101, 102, 105, 122, 123, 125, 126, 128, 129, 130, 131, 133, 135, 138, 142, 144, 145, 146, 149, 181, 182, 183, 185, 186, 187, 189, 192, 193, 197], "hardwar": [88, 139, 144, 198], "softwar": [88, 139, 144], "request": [88, 100, 144, 175], "bf16": [88, 144], "fp16": [88, 144], "accuraci": [88, 93, 97, 141, 144, 167, 169, 186, 195], "driven": [88, 144], "autotun": [88, 92, 96], "smooth": [89, 94, 95, 97, 192], "usag": [89, 90, 91, 94, 102, 153, 164, 173, 192, 193, 195], "fix": [89, 94, 192], "alpha": [89, 94, 192], "specifi": [89, 90, 91, 93, 186], "rule": [89, 90, 91, 93, 124, 186], "valid": [89, 136, 139, 192, 198], "framework": [89, 106, 125, 126, 133, 135, 145, 146, 185, 187, 189, 192], "static": [90, 95, 97, 101, 104, 186], "ipex": [90, 97, 186], "backend": [90, 95, 105, 186], "sampl": [90, 106, 136], "pt2e": 90, "weight": [91, 97, 104, 167, 168, 169, 189], "onli": [91, 97, 102, 104, 189], "common": [91, 92, 101, 134], "argument": [91, 152], "rtn": 91, "gptq": 91, "autoround": 91, "awq": 91, "teq": 91, "hqq": 91, "save": 91, "load": [91, 92], "torch": [92, 110, 198], "like": [92, 107], "problem": [92, 101], "tensorflow": [93, 95, 96, 97, 126, 131, 133, 142, 186, 188, 193, 194, 198], "without": 93, "awar": [93, 97, 101, 143, 183, 186], "tune": [93, 94, 97, 107, 186, 189, 192, 195], "With": 93, "quant": [94, 192], "us": [94, 107, 125, 142, 171, 172, 192], "determin": [94, 192], "through": [94, 139, 192, 198], "scheme": [95, 97, 186], "approach": [95, 186], "post": [95, 101, 143, 173, 186], "devic": [95, 186], "overview": [96, 100, 174, 196], "how": [96, 106, 107, 128, 167, 168, 169, 171], "work": [96, 105, 171, 186], "fundament": [97, 186, 192], "symmetr": 97, "asymmetr": 97, "per": [97, 192], "tensor": [97, 166, 192], "channel": [97, 192], "matmul": [97, 192], "limit": [97, 192], "intel": [98, 104, 125, 128, 138, 139, 142, 143, 150, 158, 164, 199], "neural": [98, 101, 102, 104, 125, 128, 138, 139, 142, 143, 147, 151, 153, 158, 164, 166, 167, 168, 169, 171, 172, 173, 177, 178, 179, 183, 191, 196, 199], "compressor": [98, 101, 104, 125, 128, 138, 139, 142, 143, 158, 164, 191, 199], "document": [98, 104, 111, 199], "section": [98, 199], "contributor": [99, 100], "coven": [99, 100], "code": [99, 100, 102, 124, 143, 165, 170, 189, 196], "conduct": [99, 100], "our": [99, 192], "pledg": 99, "standard": 99, "respons": [99, 173], "scope": [99, 183], "enforc": 99, "contribut": [100, 157, 161], "guidelin": 100, "creat": [100, 170], "pull": 100, "step": [100, 166, 167, 168, 169], "checklist": 100, "templat": 100, "accept": 100, "criteria": [100, 183, 195], "statu": [100, 172, 173], "check": 100, "fx": 101, "mode": [101, 198], "note": [101, 190], "detail": 101, "architectur": [102, 127, 138, 139], "search": [102, 164], "na": [102, 185], "1": [102, 131, 134, 137, 143, 164, 171, 172, 198], "python": [102, 125, 136, 142, 147, 151, 152, 159, 162, 166, 185, 196], "yaml": [102, 106, 126, 131, 135, 197], "2": [102, 131, 134, 137, 143, 164, 171, 172, 198], "advanc": [102, 170, 196], "custom": [102, 125, 142, 177, 195], "secur": [103, 131], "polici": [103, 195], "report": 103, "vulner": 103, "what": [104, 147, 165, 171], "": [104, 139, 165, 171], "new": [104, 105, 107, 159, 162, 195], "instal": [104, 128, 139, 148, 150, 157, 158, 161, 166, 171, 172], "from": [104, 106, 139, 143, 166, 171, 172], "pypi": [104, 153, 166], "llm": [104, 141], "non": 104, "select": [104, 158], "public": [104, 124, 184], "event": [104, 184], "addit": 104, "commun": 104, "adaptor": [105, 106, 108], "flow": [105, 186], "queri": [105, 172, 177, 178, 179], "background": [105, 124, 164], "ad": 105, "capabl": [105, 189], "implement": [105, 106], "onnxrtadaptor": 105, "add": [106, 172], "an": [106, 177, 178, 179], "list": [106, 132, 176, 194], "need": 106, "design": [106, 127, 174, 195], "query_fw_cap": 106, "accord": [106, 107], "tune_cfg": 106, "prepar": [106, 128, 167, 168, 169, 191], "calibr": [106, 123], "fp32": [106, 133], "graph": 106, "run": [106, 128, 165, 167, 168, 169, 170], "iter": 106, "oper": [106, 107], "calcul": 106, "rang": 106, "gener": 106, "type": [107, 124, 183], "int4": 107, "few": 107, "line": 107, "chang": [107, 137, 163, 165, 190], "defin": [107, 131], "abil": 107, "specif": [107, 126], "invok": 107, "kernel": 107, "configur": [107, 131, 135, 170, 185, 191, 197], "summari": [107, 167], "onnx": [109, 139, 186, 187, 198], "runtim": [109, 139, 186, 187, 198], "compress": [114, 189], "inc": 124, "convent": 124, "import": 124, "string": 124, "annot": 124, "comment": 124, "todo": 124, "intern": 124, "interfac": 124, "folder": [124, 165], "structur": 124, "recommend": 124, "v": [124, 165], "set": [124, 128, 150, 164], "json": 124, "dataload": [125, 126], "build": [125, 134, 142, 170, 171, 172], "mxnet": [126, 142, 186, 194], "onnxrt": [126, 142, 194], "file": [126, 135, 197], "user": [126, 131, 137, 185, 189, 196, 197], "workflow": [127, 174], "diagnosi": [128, 166], "featur": [128, 131, 135, 138, 153, 154, 158, 185, 186, 193, 197], "modifi": 128, "script": [128, 170], "see": 128, "do": [128, 147], "paramet": [128, 173], "descript": [128, 173, 175], "suggest": 128, "fallback": 128, "distil": [129, 130, 143, 185, 198], "knowledg": [129, 198], "intermedi": 129, "layer": [129, 187, 192], "self": 129, "distribut": [131, 153, 195], "infer": 131, "evalu": 131, "pure": 131, "horovodrun": 131, "execut": 131, "releas": [132, 159, 162, 190], "int8": [133, 198], "appendix": 133, "op": 133, "frequent": 134, "ask": 134, "question": 134, "issu": [134, 190], "3": [134, 148, 164, 184], "4": [134, 155, 164, 184], "quick": [136, 152], "incompat": [137, 190], "between": 137, "v1": 137, "face": [137, 178, 179], "built": [137, 139, 142], "infrastructur": 138, "prerequisit": [139, 171, 172], "binari": 139, "sourc": [139, 166, 168, 169, 171, 172], "ai": 139, "kit": 139, "system": 139, "requir": [139, 157, 161, 167, 168, 169, 177], "environ": [139, 150], "cpu": [139, 150, 198], "base": [139, 173, 196], "64": 139, "compat": 139, "processor": 139, "gpu": 139, "xe": 139, "multipl": [139, 181, 198], "vendor": 139, "legal": 140, "inform": 140, "licens": 140, "citat": 140, "trademark": 140, "recip": [141, 186], "larg": [141, 183], "languag": [141, 183], "migrat": 143, "x": 143, "prune": [143, 183, 185, 198], "orchestr": [143, 182], "dure": [144, 188], "coder": [147, 151, 153, 164, 196], "we": 147, "offer": 147, "jupyt": [147, 148, 159, 162], "lab": [147, 148], "extens": [147, 157, 158, 161, 164, 165, 174], "launcher": [147, 152], "contact": [147, 171], "aw": 148, "amazon": 148, "sagemak": 148, "For": 148, "studio": 148, "notebook": 148, "instanc": 148, "guid": [148, 196], "bigdl": 149, "nano": 149, "platform": [150, 191], "best": [150, 158], "perform": [150, 191], "mkl": 150, "openmp": 150, "jemalloc": 150, "numa": 150, "control": 150, "variabl": 150, "frequenc": 150, "govern": 150, "enabl": [151, 158, 164], "bench": 151, "superbench": 151, "optim": [154, 164, 174, 177, 178, 179, 182, 183, 196], "v0": 155, "highlight": 155, "other": 155, "changelog": [156, 160], "neural_compressor_ext_lab": [157, 159], "uninstal": [157, 161], "develop": [157, 161], "packag": [157, 159, 161, 162], "jupyterlab": 158, "Or": 158, "let": 158, "u": 158, "help": 158, "you": 158, "pre": 158, "requisit": 158, "make": [159, 162, 165, 170], "manual": [159, 162], "npm": [159, 162, 170], "autom": [159, 162], "publish": [159, 162], "conda": [159, 162], "forg": [159, 162], "neural_compressor_ext_lab_alibaba": [161, 162], "log": [163, 172, 173], "unreleas": 163, "vscode": 164, "open": [164, 169], "icon": 164, "5": 164, "welcom": 165, "your": 165, "setup": 165, "up": 165, "straight": 165, "awai": 165, "explor": 165, "test": [165, 170], "go": 165, "further": 165, "insight": [166, 167, 168, 169], "dump": [166, 168], "research": 166, "collabor": 166, "debug": [167, 169], "analyz": [167, 169, 170], "result": [167, 169, 177, 178, 179], "activ": 167, "histogram": 169, "react": 170, "app": 170, "avail": 170, "eject": 170, "learn": [170, 171], "more": [170, 171], "split": 170, "bundl": 170, "size": 170, "progress": 170, "web": 170, "deploy": [170, 183], "fail": 170, "minifi": 170, "solut": [171, 172, 173, 177, 178, 179], "why": 171, "doe": 171, "method": [171, 172], "pip": [171, 172], "end": [171, 177, 178, 179], "servic": [172, 174, 177, 178, 179], "submit": [172, 173, 177, 178, 179], "task": [172, 173, 175, 177, 178, 179], "stop": [172, 177, 178, 179], "inspect": 172, "manag": [172, 177, 178], "resourc": [172, 177, 178], "node": 172, "state": 172, "cluster": [172, 173], "remov": 172, "url": 173, "endpoint": 173, "task_id": 173, "websocket": 173, "screen": 173, "ping": 173, "download": [173, 177, 178], "doc": 174, "wip": 174, "oaa": 174, "definit": 174, "diagram": 174, "hug": [178, 179], "grpc": 179, "client": 180, "singl": 181, "One": 182, "shot": 182, "network": 183, "pattern": 183, "schedul": 183, "sparsiti": 183, "decai": 183, "regular": 183, "retrain": 183, "free": 183, "spars": 183, "hyperparamet": 183, "full": 184, "82": 184, "2024": 184, "2023": 184, "25": 184, "2022": 184, "35": 184, "2021": 184, "15": [184, 198], "2018": 184, "2020": 184, "style": 185, "access": 185, "wise": 187, "lwq": 187, "turn": 188, "off": 188, "woq": [189, 198], "known": 190, "benefit": 191, "comparison": 191, "differ": 191, "smoothquant": 192, "enhanc": 192, "engin": 192, "entir": 192, "each": 192, "block": 192, "tensorboard": 193, "space": 195, "exit": 195, "process": 195, "zero": 196, "topic": 196, "innov": 196, "product": 196, "0": 198, "ptq": 198, "qat": 198, "17": 198, "qdq": 198}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"neural_compressor.algorithm.algorithm": [[0, "module-neural_compressor.algorithm.algorithm"]], "Classes": [[0, "classes"], [1, "classes"], [3, "classes"], [4, "classes"], [6, "classes"], [9, "classes"], [10, "classes"], [11, "classes"], [12, "classes"], [13, "classes"], [14, "classes"], [15, "classes"], [16, "classes"], [18, "classes"], [19, "classes"], [20, "classes"], [23, "classes"], [25, "classes"], [26, "classes"], [27, "classes"], [29, "classes"], [32, "classes"], [36, "classes"], [38, "classes"], [40, "classes"], [41, "classes"], [42, "classes"], [43, "classes"], [44, "classes"], [45, "classes"], [46, "classes"], [47, "classes"], [50, "classes"], [51, "classes"], [52, "classes"], [53, "classes"], [54, "classes"], [55, "classes"], [56, "classes"], [58, "classes"], [59, "classes"], [60, "classes"], [61, "classes"], [64, "classes"], [65, "classes"], [66, "classes"], [67, "classes"], [68, "classes"], [69, "classes"], [77, "classes"], [78, "classes"], [79, "classes"], [81, "classes"], [83, "classes"], [84, "classes"]], "Functions": [[0, "functions"], [5, "functions"], [11, "functions"], [13, "functions"], [20, "functions"], [26, "functions"], [27, "functions"], [29, "functions"], [30, "functions"], [32, "functions"], [33, "functions"], [34, "functions"], [36, "functions"], [37, "functions"], [41, "functions"], [45, "functions"], [47, "functions"], [49, "functions"], [53, "functions"], [61, "functions"], [65, "functions"], [67, "functions"], [68, "functions"], [71, "functions"], [73, "functions"], [74, "functions"], [75, "functions"], [78, "functions"], [79, "functions"], [80, "functions"], [82, "functions"], [83, "functions"]], "Module Contents": [[0, "module-contents"], [1, "module-contents"], [3, "module-contents"], [4, "module-contents"], [5, "module-contents"], [6, "module-contents"], [9, "module-contents"], [10, "module-contents"], [11, "module-contents"], [12, "module-contents"], [13, "module-contents"], [14, "module-contents"], [15, "module-contents"], [16, "module-contents"], [18, "module-contents"], [19, "module-contents"], [20, "module-contents"], [23, "module-contents"], [25, "module-contents"], [26, "module-contents"], [27, "module-contents"], [29, "module-contents"], [30, "module-contents"], [32, "module-contents"], [33, "module-contents"], [34, "module-contents"], [36, "module-contents"], [37, "module-contents"], [38, "module-contents"], [40, "module-contents"], [41, "module-contents"], [42, "module-contents"], [43, "module-contents"], [44, "module-contents"], [45, "module-contents"], [46, "module-contents"], [47, "module-contents"], [49, "module-contents"], [50, "module-contents"], [51, "module-contents"], [52, "module-contents"], [53, "module-contents"], [54, "module-contents"], [55, "module-contents"], [56, "module-contents"], [58, "module-contents"], [59, "module-contents"], [60, "module-contents"], [61, "module-contents"], [64, "module-contents"], [65, "module-contents"], [66, "module-contents"], [67, "module-contents"], [68, "module-contents"], [69, "module-contents"], [71, "module-contents"], [73, "module-contents"], [74, "module-contents"], [75, "module-contents"], [77, "module-contents"], [78, "module-contents"], [79, "module-contents"], [80, "module-contents"], [81, "module-contents"], [82, "module-contents"], [83, "module-contents"], [84, "module-contents"]], "neural_compressor.algorithm.fast_bias_correction": [[1, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[2, "module-neural_compressor.algorithm"]], "Submodules": [[2, "submodules"], [8, "submodules"], [17, "submodules"], [21, "submodules"], [24, "submodules"], [28, "submodules"], [35, "submodules"], [39, "submodules"], [57, "submodules"], [63, "submodules"], [72, "submodules"], [76, "submodules"]], "neural_compressor.algorithm.smooth_quant": [[3, "module-neural_compressor.algorithm.smooth_quant"]], "neural_compressor.algorithm.weight_correction": [[4, "module-neural_compressor.algorithm.weight_correction"]], "neural_compressor.benchmark": [[5, "module-neural_compressor.benchmark"]], "neural_compressor.config": [[6, "module-neural_compressor.config"]], "neural_compressor.contrib": [[7, "module-neural_compressor.contrib"]], "Subpackages": [[7, "subpackages"], [22, "subpackages"], [28, "subpackages"], [57, "subpackages"], [76, "subpackages"]], "neural_compressor.contrib.strategy": [[8, "module-neural_compressor.contrib.strategy"]], "neural_compressor.contrib.strategy.sigopt": [[9, "module-neural_compressor.contrib.strategy.sigopt"]], "neural_compressor.contrib.strategy.tpe": [[10, "module-neural_compressor.contrib.strategy.tpe"]], "neural_compressor.data.datasets.bert_dataset": [[11, "module-neural_compressor.data.datasets.bert_dataset"]], "neural_compressor.data.datasets.coco_dataset": [[12, "module-neural_compressor.data.datasets.coco_dataset"]], "neural_compressor.data.datasets.dataset": [[13, "module-neural_compressor.data.datasets.dataset"]], "Attributes": [[13, "attributes"]], "neural_compressor.data.datasets.dummy_dataset": [[14, "module-neural_compressor.data.datasets.dummy_dataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[15, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "neural_compressor.data.datasets.imagenet_dataset": [[16, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[17, "module-neural_compressor.data.datasets"]], "neural_compressor.data.datasets.style_transfer_dataset": [[18, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "neural_compressor.data.filters.coco_filter": [[19, "module-neural_compressor.data.filters.coco_filter"]], "neural_compressor.data.filters.filter": [[20, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[21, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[22, "module-neural_compressor.data"]], "neural_compressor.data.transforms.imagenet_transform": [[23, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[24, "module-neural_compressor.data.transforms"]], "neural_compressor.data.transforms.postprocess": [[25, "module-neural_compressor.data.transforms.postprocess"]], "neural_compressor.data.transforms.tokenization": [[26, "module-neural_compressor.data.transforms.tokenization"]], "neural_compressor.data.transforms.transform": [[27, "module-neural_compressor.data.transforms.transform"]], "neural_compressor": [[28, "module-neural_compressor"]], "neural_compressor.metric.bleu": [[29, "module-neural_compressor.metric.bleu"]], "neural_compressor.metric.bleu_util": [[30, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[31, "module-neural_compressor.metric.coco_label_map"]], "neural_compressor.metric.coco_tools": [[32, "module-neural_compressor.metric.coco_tools"]], "neural_compressor.metric.evaluate_squad": [[33, "module-neural_compressor.metric.evaluate_squad"]], "neural_compressor.metric.f1": [[34, "module-neural_compressor.metric.f1"]], "neural_compressor.metric": [[35, "module-neural_compressor.metric"]], "neural_compressor.metric.metric": [[36, "module-neural_compressor.metric.metric"]], "neural_compressor.mix_precision": [[37, "module-neural_compressor.mix_precision"]], "neural_compressor.model.base_model": [[38, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[39, "module-neural_compressor.model"]], "neural_compressor.model.keras_model": [[40, "module-neural_compressor.model.keras_model"]], "neural_compressor.model.model": [[41, "module-neural_compressor.model.model"]], "neural_compressor.model.mxnet_model": [[42, "module-neural_compressor.model.mxnet_model"]], "neural_compressor.model.nets_factory": [[43, "module-neural_compressor.model.nets_factory"]], "neural_compressor.model.onnx_model": [[44, "module-neural_compressor.model.onnx_model"]], "neural_compressor.model.tensorflow_model": [[45, "module-neural_compressor.model.tensorflow_model"]], "neural_compressor.model.torch_model": [[46, "module-neural_compressor.model.torch_model"]], "neural_compressor.objective": [[47, "module-neural_compressor.objective"]], "neural_compressor.profiling": [[48, "module-neural_compressor.profiling"]], "neural_compressor.quantization": [[49, "module-neural_compressor.quantization"]], "neural_compressor.strategy.auto": [[50, "module-neural_compressor.strategy.auto"]], "neural_compressor.strategy.auto_mixed_precision": [[51, "module-neural_compressor.strategy.auto_mixed_precision"]], "neural_compressor.strategy.basic": [[52, "module-neural_compressor.strategy.basic"]], "neural_compressor.strategy.bayesian": [[53, "module-neural_compressor.strategy.bayesian"]], "neural_compressor.strategy.conservative": [[54, "module-neural_compressor.strategy.conservative"]], "neural_compressor.strategy.exhaustive": [[55, "module-neural_compressor.strategy.exhaustive"]], "neural_compressor.strategy.hawq_v2": [[56, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[57, "module-neural_compressor.strategy"]], "neural_compressor.strategy.mse": [[58, "module-neural_compressor.strategy.mse"]], "neural_compressor.strategy.mse_v2": [[59, "module-neural_compressor.strategy.mse_v2"]], "neural_compressor.strategy.random": [[60, "module-neural_compressor.strategy.random"]], "neural_compressor.strategy.strategy": [[61, "module-neural_compressor.strategy.strategy"]], "neural_compressor.strategy.utils.constant": [[62, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[63, "module-neural_compressor.strategy.utils"]], "neural_compressor.strategy.utils.tuning_sampler": [[64, "module-neural_compressor.strategy.utils.tuning_sampler"]], "neural_compressor.strategy.utils.tuning_space": [[65, "module-neural_compressor.strategy.utils.tuning_space"]], "neural_compressor.strategy.utils.tuning_structs": [[66, "module-neural_compressor.strategy.utils.tuning_structs"]], "neural_compressor.strategy.utils.utility": [[67, "module-neural_compressor.strategy.utils.utility"]], "neural_compressor.training": [[68, "module-neural_compressor.training"]], "neural_compressor.utils.collect_layer_histogram": [[69, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[70, "module-neural_compressor.utils.constant"]], "neural_compressor.utils.create_obj_from_config": [[71, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils.export": [[72, "module-neural_compressor.utils.export"]], "neural_compressor.utils.export.qlinear2qdq": [[73, "module-neural_compressor.utils.export.qlinear2qdq"]], "neural_compressor.utils.export.tf2onnx": [[74, "module-neural_compressor.utils.export.tf2onnx"]], "neural_compressor.utils.export.torch2onnx": [[75, "module-neural_compressor.utils.export.torch2onnx"]], "neural_compressor.utils": [[76, "module-neural_compressor.utils"]], "neural_compressor.utils.kl_divergence": [[77, "module-neural_compressor.utils.kl_divergence"]], "neural_compressor.utils.load_huggingface": [[78, "module-neural_compressor.utils.load_huggingface"]], "neural_compressor.utils.logger": [[79, "module-neural_compressor.utils.logger"]], "neural_compressor.utils.neural_insights_utils": [[80, "module-neural_compressor.utils.neural_insights_utils"]], "neural_compressor.utils.options": [[81, "module-neural_compressor.utils.options"]], "neural_compressor.utils.pytorch": [[82, "module-neural_compressor.utils.pytorch"]], "neural_compressor.utils.utility": [[83, "module-neural_compressor.utils.utility"]], "neural_compressor.utils.weights_details": [[84, "module-neural_compressor.utils.weights_details"]], "neural_compressor.version": [[85, "module-neural_compressor.version"]], "Dynamic Quantization": [[86, "dynamic-quantization"], [97, "dynamic-quantization"], [101, "dynamic-quantization"]], "Introduction": [[86, "introduction"], [87, "introduction"], [88, "introduction"], [89, "introduction"], [90, "introduction"], [91, "introduction"], [92, "introduction"], [93, "introduction"], [94, "introduction"], [95, "introduction"], [97, "introduction"], [101, "introduction"], [102, "introduction"], [105, "introduction"], [106, "introduction"], [107, "introduction"], [122, "introduction"], [123, "introduction"], [125, "introduction"], [126, "introduction"], [129, "introduction"], [130, "introduction"], [131, "introduction"], [133, "introduction"], [135, "introduction"], [138, "introduction"], [142, "introduction"], [144, "introduction"], [145, "introduction"], [146, "introduction"], [167, "introduction"], [168, "introduction"], [169, "introduction"], [181, "introduction"], [182, "introduction"], [183, "introduction"], [185, "introduction"], [187, "introduction"], [189, "introduction"], [191, "introduction"], [192, "introduction"], [193, "introduction"], [194, "introduction"], [195, "introduction"], [197, "introduction"]], "Getting Started with Dynamic Quantization": [[86, "getting-started-with-dynamic-quantization"]], "Examples": [[86, "examples"], [87, "examples"], [88, "examples"], [91, "examples"], [93, "examples"], [94, "examples"], [101, "examples"], [102, "examples"], [122, "examples"], [125, "examples"], [126, "examples"], [129, "examples"], [130, "examples"], [131, "examples"], [132, "examples"], [133, "examples"], [143, "examples"], [144, "examples"], [145, "examples"], [146, "examples"], [182, "examples"], [183, "examples"], [186, "examples"], [187, "examples"], [189, "examples"], [193, "examples"]], "Microscaling Quantization": [[87, "microscaling-quantization"], [146, "microscaling-quantization"]], "Get Started with Microscaling Quantization API": [[87, "get-started-with-microscaling-quantization-api"], [146, "get-started-with-microscaling-quantization-api"]], "Reference": [[87, "reference"], [91, "reference"], [97, "reference"], [123, "reference"], [124, "reference"], [146, "reference"], [183, "reference"], [186, "reference"], [189, "reference"], [192, "reference"]], "PyTorch Mixed Precision": [[88, "pytorch-mixed-precision"]], "Mixed Precision Support Matrix": [[88, "mixed-precision-support-matrix"], [144, "mixed-precision-support-matrix"]], "Hardware and Software requests for BF16": [[88, "hardware-and-software-requests-for-bf16"], [144, "hardware-and-software-requests-for-bf16"]], "Hardware and Software requests for FP16": [[88, "hardware-and-software-requests-for-fp16"], [144, "hardware-and-software-requests-for-fp16"]], "Accuracy-driven mixed precision": [[88, "accuracy-driven-mixed-precision"], [144, "accuracy-driven-mixed-precision"]], "Get Started with autotune API": [[88, "get-started-with-autotune-api"]], "PyTorch Smooth Quantization": [[89, "pytorch-smooth-quantization"]], "Usage": [[89, "usage"], [91, "usage"], [94, "usage"], [153, "usage"], [173, "usage"], [173, "id2"], [173, "id6"], [173, "id9"], [173, "id16"], [173, "id19"], [173, "id22"], [173, "id25"], [192, "usage"], [193, "usage"], [193, "id1"], [195, "usage"], [195, "id2"], [195, "id4"], [195, "id6"], [195, "id8"], [195, "id10"], [195, "id12"], [195, "id14"], [195, "id16"], [195, "id18"], [195, "id20"], [195, "id22"]], "Fixed Alpha": [[89, "fixed-alpha"]], "Specify Quantization Rules": [[89, "specify-quantization-rules"], [90, "specify-quantization-rules"], [91, "specify-quantization-rules"], [93, "specify-quantization-rules"], [186, "specify-quantization-rules"]], "Validated Models": [[89, "validated-models"], [136, "validated-models"], [192, "validated-models"], [198, "validated-models"]], "Supported Framework Matrix": [[89, "supported-framework-matrix"], [192, "supported-framework-matrix"]], "PyTorch Static Quantization": [[90, "pytorch-static-quantization"]], "Get Started": [[90, "get-started"], [91, "get-started"], [93, "get-started"], [101, "get-started"], [128, "get-started"], [171, "get-started"], [186, "get-started"]], "Static Quantization with IPEX Backend": [[90, "static-quantization-with-ipex-backend"]], "Usage Sample with IPEX": [[90, "usage-sample-with-ipex"]], "Model Examples": [[90, "model-examples"]], "Static Quantization with PT2E Backend": [[90, "static-quantization-with-pt2e-backend"]], "Usage Sample with PT2E": [[90, "usage-sample-with-pt2e"]], "Model Examples with PT2E": [[90, "model-examples-with-pt2e"]], "PyTorch Weight Only Quantization": [[91, "pytorch-weight-only-quantization"]], "Supported Matrix": [[91, "supported-matrix"], [92, "supported-matrix"]], "Common arguments": [[91, "common-arguments"]], "RTN": [[91, "rtn"]], "GPTQ": [[91, "gptq"]], "AutoRound": [[91, "autoround"]], "AWQ": [[91, "awq"]], "TEQ": [[91, "teq"]], "HQQ": [[91, "hqq"]], "Saving and Loading": [[91, "saving-and-loading"]], "Torch": [[92, "torch"]], "Torch-like APIs": [[92, "torch-like-apis"]], "Quantization APIs": [[92, "quantization-apis"]], "Autotune API": [[92, "autotune-api"]], "Load API": [[92, "load-api"]], "Common Problems": [[92, "common-problems"]], "TensorFlow Quantization": [[93, "tensorflow-quantization"]], "Without Accuracy Aware Tuning": [[93, "without-accuracy-aware-tuning"]], "With Accuracy Aware Tuning": [[93, "with-accuracy-aware-tuning"]], "Smooth Quant": [[94, "smooth-quant"], [192, "smooth-quant"]], "Using a Fixed alpha": [[94, "using-a-fixed-alpha"]], "Determining the alpha through auto-tuning": [[94, "determining-the-alpha-through-auto-tuning"], [192, "determining-the-alpha-through-auto-tuning"]], "TensorFlow": [[95, "tensorflow"], [126, "tensorflow"], [142, "tensorflow"], [194, "tensorflow"]], "API for TensorFlow": [[95, "api-for-tensorflow"]], "Support Matrix": [[95, "support-matrix"], [123, "support-matrix"], [149, "support-matrix"]], "Quantization Scheme": [[95, "quantization-scheme"]], "Quantization Approaches": [[95, "quantization-approaches"], [186, "quantization-approaches"]], "Post Training Static Quantization": [[95, "post-training-static-quantization"], [101, "post-training-static-quantization"], [186, "post-training-static-quantization"]], "Smooth Quantization": [[95, "smooth-quantization"], [97, "smooth-quantization"]], "Backend and Device": [[95, "backend-and-device"]], "AutoTune": [[96, "autotune"]], "Overview": [[96, "overview"], [174, "overview"], [196, "overview"]], "How it Works": [[96, "how-it-works"]], "Working with Autotune": [[96, "working-with-autotune"]], "Working with PyTorch Model": [[96, "working-with-pytorch-model"]], "Working with Tensorflow Model": [[96, "working-with-tensorflow-model"]], "Quantization": [[97, "quantization"], [119, "quantization"], [185, "quantization"], [186, "quantization"]], "Quantization Fundamentals": [[97, "quantization-fundamentals"], [186, "quantization-fundamentals"], [192, "quantization-fundamentals"]], "Symmetric & Asymmetric": [[97, "symmetric-asymmetric"]], "Quantization Scheme in TensorFlow": [[97, "quantization-scheme-in-tensorflow"], [186, "quantization-scheme-in-tensorflow"]], "Quantization Scheme in PyTorch": [[97, "quantization-scheme-in-pytorch"], [186, "quantization-scheme-in-pytorch"]], "Quantization Scheme in IPEX": [[97, "quantization-scheme-in-ipex"], [186, "quantization-scheme-in-ipex"]], "Per-tensor & Per-channel": [[97, "per-tensor-per-channel"], [192, "per-tensor-per-channel"]], "Per-tensor example": [[97, "per-tensor-example"], [192, "per-tensor-example"]], "Per-channel example": [[97, "per-channel-example"], [192, "per-channel-example"]], "Matmul quantization example": [[97, "matmul-quantization-example"], [192, "matmul-quantization-example"]], "Static Quantization": [[97, "static-quantization"]], "Per-channel limitation": [[97, "per-channel-limitation"], [192, "per-channel-limitation"]], "Weight Only Quantization": [[97, "weight-only-quantization"]], "Quantization Aware Training": [[97, "quantization-aware-training"], [143, "quantization-aware-training"], [186, "quantization-aware-training"], [186, "id1"]], "Accuracy Aware Tuning": [[97, "accuracy-aware-tuning"], [186, "accuracy-aware-tuning"]], "Intel\u00ae Neural Compressor Documentation": [[98, "intel-neural-compressor-documentation"], [199, "intel-neural-compressor-documentation"]], "Sections": [[98, "sections"], [199, "sections"]], "Contributor Covenant Code of Conduct": [[99, "contributor-covenant-code-of-conduct"], [100, "contributor-covenant-code-of-conduct"]], "Our Pledge": [[99, "our-pledge"]], "Our Standards": [[99, "our-standards"]], "Our Responsibilities": [[99, "our-responsibilities"]], "Scope": [[99, "scope"]], "Enforcement": [[99, "enforcement"]], "Attribution": [[99, "attribution"]], "Contribution Guidelines": [[100, "contribution-guidelines"]], "Create Pull Request": [[100, "create-pull-request"]], "Step-by-Step guidelines": [[100, "step-by-step-guidelines"]], "Pull Request Checklist": [[100, "pull-request-checklist"]], "Pull Request Template": [[100, "pull-request-template"]], "Pull Request Acceptance Criteria": [[100, "pull-request-acceptance-criteria"]], "Pull Request Status Checks Overview": [[100, "pull-request-status-checks-overview"]], "Support": [[100, "support"]], "FX": [[101, "fx"]], "FX Mode Support Matrix in Neural Compressor": [[101, "fx-mode-support-matrix-in-neural-compressor"]], "Post Training Dynamic Quantization": [[101, "post-training-dynamic-quantization"], [186, "post-training-dynamic-quantization"]], "Quantization-Aware Training": [[101, "quantization-aware-training"]], "Note": [[101, "note"]], "Details": [[101, "details"]], "Common Problem": [[101, "common-problem"]], "Static Quantization & Quantization Aware Training": [[101, "static-quantization-quantization-aware-training"]], "Neural Architecture Search": [[102, "neural-architecture-search"]], "Basic NAS": [[102, "basic-nas"]], "Dynamic NAS": [[102, "dynamic-nas"]], "NAS Support Matrix": [[102, "nas-support-matrix"]], "Get Started with NAS API": [[102, "get-started-with-nas-api"]], "Basic Usage": [[102, "basic-usage"]], "1. Python code + YAML": [[102, "python-code-yaml"]], "2. Python code only": [[102, "python-code-only"]], "Advanced Usage (Custom NAS)": [[102, "advanced-usage-custom-nas"]], "Security Policy": [[103, "security-policy"]], "Report a Vulnerability": [[103, "report-a-vulnerability"]], "Intel\u00ae Neural Compressor": [[104, "intel-neural-compressor"], [164, "intel-neural-compressor"]], "What\u2019s New": [[104, "what-s-new"]], "Installation": [[104, "installation"], [139, "installation"], [139, "id1"], [158, "installation"], [166, "installation"], [171, "installation"]], "Install from pypi": [[104, "install-from-pypi"], [166, "install-from-pypi"]], "Getting Started": [[104, "getting-started"], [136, "getting-started"], [166, "getting-started"]], "Weight-Only Quantization (LLMs)": [[104, "weight-only-quantization-llms"]], "Static Quantization (Non-LLMs)": [[104, "static-quantization-non-llms"]], "Documentation": [[104, "documentation"]], "Selected Publications/Events": [[104, "selected-publications-events"]], "Additional Content": [[104, "additional-content"]], "Communication": [[104, "communication"]], "Adaptor": [[105, "adaptor"], [108, "adaptor"]], "Adaptor Support Matrix": [[105, "adaptor-support-matrix"]], "Working Flow": [[105, "working-flow"], [186, "working-flow"]], "Get Started with Adaptor API": [[105, "get-started-with-adaptor-api"]], "Query API": [[105, "query-api"]], "Background": [[105, "background"], [124, "background"]], "Query API Introduction": [[105, "query-api-introduction"]], "Example of Adding a New Backend Support": [[105, "example-of-adding-a-new-backend-support"]], "Capability": [[105, "capability"]], "Implement ONNXRTAdaptor Class": [[105, "implement-onnxrtadaptor-class"]], "How to Add An Adaptor": [[106, "how-to-add-an-adaptor"]], "API List that Need to Implement": [[106, "api-list-that-need-to-implement"]], "Design the framework YAML": [[106, "design-the-framework-yaml"]], "Add query_fw_capability to Adaptor": [[106, "add-query-fw-capability-to-adaptor"]], "Add quantize API according to tune_cfg": [[106, "add-quantize-api-according-to-tune-cfg"]], "Prepare calibration model from fp32 graph": [[106, "prepare-calibration-model-from-fp32-graph"]], "Run sampling iterations of the fp32 graph to calibrate quantizable operators.": [[106, "run-sampling-iterations-of-the-fp32-graph-to-calibrate-quantizable-operators"]], "Calculate the data range and generate quantized model": [[106, "calculate-the-data-range-and-generate-quantized-model"]], "How to Support New Data Type, Like Int4, with a Few Line Changes": [[107, "how-to-support-new-data-type-like-int4-with-a-few-line-changes"]], "Define the Quantization Ability of the Specific Operator": [[107, "define-the-quantization-ability-of-the-specific-operator"]], "Invoke the Operator Kernel According to the Tuning Configuration": [[107, "invoke-the-operator-kernel-according-to-the-tuning-configuration"]], "Use the New Data Type": [[107, "use-the-new-data-type"]], "Summary": [[107, "summary"]], "ONNX Runtime": [[109, "onnx-runtime"]], "Torch Utils": [[110, "torch-utils"]], "API Document Example": [[111, "api-document-example"]], "APIs": [[112, "apis"]], "Benchmark": [[113, "benchmark"], [143, "benchmark"], [185, "benchmark"]], "Compression": [[114, "compression"]], "Config": [[115, "config"]], "Mix Precision": [[116, "mix-precision"], [143, "mix-precision"]], "Model": [[117, "model"], [145, "model"], [167, "model"], [169, "model"]], "Objective": [[118, "objective"], [177, "objective"], [178, "objective"], [179, "objective"], [181, "objective"]], "Strategy": [[120, "strategy"]], "Training": [[121, "training"]], "Benchmarking": [[122, "benchmarking"]], "Benchmark Support Matrix": [[122, "benchmark-support-matrix"]], "Get Started with Benchmark API": [[122, "get-started-with-benchmark-api"]], "Calibration Algorithms in Quantization": [[123, "calibration-algorithms-in-quantization"]], "Calibration Algorithms": [[123, "calibration-algorithms"]], "INC Coding Conventions": [[124, "inc-coding-conventions"]], "Rules": [[124, "rules"]], "Imports": [[124, "imports"]], "Strings": [[124, "strings"]], "Logger": [[124, "logger"]], "Type Annotations": [[124, "type-annotations"]], "Comments": [[124, "comments"]], "TODO Comments": [[124, "todo-comments"]], "Public and Internal Interfaces": [[124, "public-and-internal-interfaces"]], "Folder structure": [[124, "folder-structure"]], "Recommend VS Code settings.json": [[124, "recommend-vs-code-settings-json"]], "DataLoader": [[125, "dataloader"]], "Supported Framework Dataloader Matrix": [[125, "supported-framework-dataloader-matrix"]], "Get Started with DataLoader": [[125, "get-started-with-dataloader"]], "Use Intel\u00ae Neural Compressor DataLoader API": [[125, "use-intel-neural-compressor-dataloader-api"]], "Build Custom Dataloader with Python API": [[125, "build-custom-dataloader-with-python-api"]], "Dataset": [[126, "dataset"]], "Supported Framework Dataset Matrix": [[126, "supported-framework-dataset-matrix"]], "PyTorch": [[126, "pytorch"], [142, "pytorch"], [188, "pytorch"]], "MXNet": [[126, "mxnet"], [142, "mxnet"], [194, "mxnet"]], "ONNXRT": [[126, "onnxrt"], [142, "onnxrt"], [194, "onnxrt"]], "Get start with Dataset API": [[126, "get-start-with-dataset-api"]], "Config dataloader in a yaml file": [[126, "config-dataloader-in-a-yaml-file"]], "User-specific dataset": [[126, "user-specific-dataset"]], "Design": [[127, "design"], [195, "design"], [195, "id1"], [195, "id3"], [195, "id5"], [195, "id7"], [195, "id9"], [195, "id11"], [195, "id13"], [195, "id15"], [195, "id17"], [195, "id19"], [195, "id21"]], "Architecture": [[127, "architecture"], [138, "architecture"]], "Workflow": [[127, "workflow"]], "Diagnosis": [[128, "diagnosis"]], "Diagnosis Introduction": [[128, "diagnosis-introduction"]], "Supported Feature Matrix": [[128, "supported-feature-matrix"], [131, "supported-feature-matrix"], [135, "supported-feature-matrix"], [138, "supported-feature-matrix"], [185, "supported-feature-matrix"], [186, "supported-feature-matrix"], [193, "supported-feature-matrix"], [197, "supported-feature-matrix"]], "Install Intel\u00ae Neural Compressor": [[128, "install-intel-neural-compressor"]], "Modify script": [[128, "modify-script"]], "Quantization diagnosis": [[128, "quantization-diagnosis"]], "Benchmark diagnosis": [[128, "benchmark-diagnosis"]], "Example": [[128, "example"], [142, "example"], [149, "example"], [153, "example"], [181, "example"]], "Prepare dataset": [[128, "prepare-dataset"]], "Run quantization script": [[128, "run-quantization-script"]], "Run benchmark script": [[128, "run-benchmark-script"]], "See quantization data": [[128, "see-quantization-data"]], "How to do diagnosis": [[128, "how-to-do-diagnosis"]], "Parameter description": [[128, "parameter-description"]], "Diagnosis suggestions": [[128, "diagnosis-suggestions"]], "Fallback setting example": [[128, "fallback-setting-example"]], "See profiling data": [[128, "see-profiling-data"]], "Distillation": [[129, "distillation"], [143, "distillation"], [185, "distillation"]], "Knowledge Distillation": [[129, "knowledge-distillation"]], "Intermediate Layer Knowledge Distillation": [[129, "intermediate-layer-knowledge-distillation"]], "Self Distillation": [[129, "self-distillation"]], "Distillation Support Matrix": [[129, "distillation-support-matrix"]], "Get Started with Distillation API": [[129, "get-started-with-distillation-api"]], "Distillation for Quantization": [[130, "distillation-for-quantization"]], "Distillation for Quantization Support Matrix": [[130, "distillation-for-quantization-support-matrix"]], "Get Started with Distillation for Quantization API": [[130, "get-started-with-distillation-for-quantization-api"]], "Distributed Training and Inference (Evaluation)": [[131, "distributed-training-and-inference-evaluation"]], "Get Started with Distributed Training and Inference API": [[131, "get-started-with-distributed-training-and-inference-api"]], "Option 1: Pure Yaml Configuration": [[131, "option-1-pure-yaml-configuration"]], "Option 2: User Defined Training Function": [[131, "option-2-user-defined-training-function"]], "Horovodrun Execution": [[131, "horovodrun-execution"]], "Security": [[131, "security"]], "PyTorch Examples:": [[131, "pytorch-examples"]], "TensorFlow Examples:": [[131, "tensorflow-examples"]], "Example List": [[132, "example-list"]], "Release Data": [[132, "release-data"]], "Export": [[133, "export"]], "Supported Framework Model Matrix": [[133, "supported-framework-model-matrix"], [145, "supported-framework-model-matrix"], [146, "supported-framework-model-matrix"], [187, "supported-framework-model-matrix"], [189, "supported-framework-model-matrix"]], "PyTorch Model": [[133, "pytorch-model"]], "FP32 Model Export": [[133, "fp32-model-export"], [133, "id1"]], "INT8 Model Export": [[133, "int8-model-export"], [133, "id2"]], "Tensorflow Model": [[133, "tensorflow-model"]], "Appendix": [[133, "appendix"]], "Supported quantized ops": [[133, "supported-quantized-ops"]], "Frequently Asked Questions": [[134, "frequently-asked-questions"]], "Common Build Issues": [[134, "common-build-issues"]], "Issue 1:": [[134, "issue-1"]], "Issue 2:": [[134, "issue-2"]], "Issue 3:": [[134, "issue-3"]], "Issue 4:": [[134, "issue-4"]], "Framework YAML Configuration Files": [[135, "framework-yaml-configuration-files"]], "Get started with Framework YAML Files": [[135, "get-started-with-framework-yaml-files"]], "Quick Samples": [[136, "quick-samples"]], "Quantization with Python API": [[136, "quantization-with-python-api"], [166, "quantization-with-python-api"]], "Incompatible changes between v1.2 and v1.1": [[137, "incompatible-changes-between-v1-2-and-v1-1"]], "User-facing APIs": [[137, "user-facing-apis"]], "Built-in transform/dataset/metric APIs": [[137, "built-in-transform-dataset-metric-apis"]], "Infrastructure of Intel\u00ae Neural Compressor": [[138, "infrastructure-of-intel-neural-compressor"]], "Prerequisites": [[139, "prerequisites"], [171, "prerequisites"], [172, "prerequisites"]], "Install from Binary": [[139, "install-from-binary"]], "Install from Source": [[139, "install-from-source"], [166, "install-from-source"]], "Install from AI Kit": [[139, "install-from-ai-kit"]], "System Requirements": [[139, "system-requirements"]], "Validated Hardware Environment": [[139, "validated-hardware-environment"]], "Intel\u00ae Neural Compressor supports CPUs based on Intel 64 architecture or compatible processors:": [[139, "intel-neural-compressor-supports-cpus-based-on-intel-64-architecture-or-compatible-processors"]], "Intel\u00ae Neural Compressor supports GPUs built on Intel\u2019s Xe architecture:": [[139, "intel-neural-compressor-supports-gpus-built-on-intel-s-xe-architecture"]], "Intel\u00ae Neural Compressor quantized ONNX models support multiple hardware vendors through ONNX Runtime:": [[139, "intel-neural-compressor-quantized-onnx-models-support-multiple-hardware-vendors-through-onnx-runtime"]], "Validated Software Environment": [[139, "validated-software-environment"]], "Legal Information": [[140, "legal-information"]], "License": [[140, "license"]], "Citation": [[140, "citation"]], "Trademarks": [[140, "trademarks"]], "LLMs Quantization Recipes": [[141, "llms-quantization-recipes"]], "Large Language Models Recipes": [[141, "large-language-models-recipes"]], "Large Language Models Accuracy": [[141, "large-language-models-accuracy"]], "Metrics": [[142, "metrics"]], "Supported Built-in Metric Matrix": [[142, "supported-built-in-metric-matrix"]], "Get Started with Metric": [[142, "get-started-with-metric"]], "Use Intel\u00ae Neural Compressor Metric API": [[142, "use-intel-neural-compressor-metric-api"]], "Build Custom Metric with Python API": [[142, "build-custom-metric-with-python-api"]], "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X": [[143, "code-migration-from-intel-neural-compressor-1-x-to-intel-neural-compressor-2-x"]], "Model Quantization": [[143, "model-quantization"]], "Post-training Quantization": [[143, "post-training-quantization"]], "Pruning": [[143, "pruning"], [183, "pruning"], [185, "pruning"]], "Orchestration": [[143, "orchestration"]], "Mixed Precision": [[144, "mixed-precision"]], "During quantization mixed precision": [[144, "during-quantization-mixed-precision"]], "Get Started with Mixed Precision API": [[144, "get-started-with-mixed-precision-api"]], "Neural Coder": [[147, "neural-coder"], [164, "neural-coder"], [164, "id1"]], "What do we offer?": [[147, "what-do-we-offer"]], "Getting Started!": [[147, "getting-started"], [158, "getting-started"]], "Jupyter Lab Extension": [[147, "jupyter-lab-extension"]], "Python Launcher": [[147, "python-launcher"], [152, "python-launcher"]], "Python API": [[147, "python-api"]], "Contact": [[147, "contact"], [171, "contact"]], "AWS Amazon SageMaker Support": [[148, "aws-amazon-sagemaker-support"]], "Start Jupyter Lab 3": [[148, "start-jupyter-lab-3"]], "For SageMaker Studio": [[148, "for-sagemaker-studio"]], "For SageMaker Notebook instance": [[148, "for-sagemaker-notebook-instance"]], "Installation Guide": [[148, "installation-guide"]], "BigDL Nano Support": [[149, "bigdl-nano-support"]], "Intel CPU Platforms: Best Performance Setting": [[150, "intel-cpu-platforms-best-performance-setting"]], "Install MKL, OpenMP and JEMALLOC": [[150, "install-mkl-openmp-and-jemalloc"]], "Install NUMA Controller": [[150, "install-numa-controller"]], "Environment Variables": [[150, "environment-variables"]], "Frequency Governers": [[150, "frequency-governers"]], "Neural Coder as Python API": [[151, "neural-coder-as-python-api"]], "Enable": [[151, "enable"]], "Bench": [[151, "bench"]], "SuperBench": [[151, "superbench"]], "Quick-Start": [[152, "quick-start"]], "Launcher Arguments (Optional)": [[152, "launcher-arguments-optional"]], "Neural Coder for Quantization": [[153, "neural-coder-for-quantization"]], "Features Supported": [[153, "features-supported"]], "Models Supported": [[153, "models-supported"]], "PyPI distribution:": [[153, "pypi-distribution"]], "Supported Optimization Features": [[154, "supported-optimization-features"]], "v0.4": [[155, "v0-4"]], "Highlights": [[155, "highlights"]], "Others": [[155, "others"]], "Changelog": [[156, "changelog"], [160, "changelog"]], "neural_compressor_ext_lab": [[157, "neural-compressor-ext-lab"]], "Requirements": [[157, "requirements"], [161, "requirements"], [167, "requirements"], [168, "requirements"], [169, "requirements"], [177, "requirements"]], "Install": [[157, "install"]], "Uninstall": [[157, "uninstall"]], "Contributing": [[157, "contributing"], [161, "contributing"]], "Development install": [[157, "development-install"], [161, "development-install"]], "Development uninstall": [[157, "development-uninstall"], [161, "development-uninstall"]], "Packaging the extension": [[157, "packaging-the-extension"], [161, "packaging-the-extension"]], "Intel\u00ae Neural Compressor as JupyterLab Extension": [[158, "intel-neural-compressor-as-jupyterlab-extension"]], "Auto-enable a feature": [[158, "auto-enable-a-feature"]], "Or let us help you auto-select the best feature": [[158, "or-let-us-help-you-auto-select-the-best-feature"]], "Pre-requisites": [[158, "pre-requisites"]], "Making a new release of neural_compressor_ext_lab": [[159, "making-a-new-release-of-neural-compressor-ext-lab"]], "Manual release": [[159, "manual-release"], [162, "manual-release"]], "Python package": [[159, "python-package"], [162, "python-package"]], "NPM package": [[159, "npm-package"], [162, "npm-package"]], "Automated releases with the Jupyter Releaser": [[159, "automated-releases-with-the-jupyter-releaser"], [162, "automated-releases-with-the-jupyter-releaser"]], "Publishing to conda-forge": [[159, "publishing-to-conda-forge"], [162, "publishing-to-conda-forge"]], "neural_compressor_ext_lab_alibaba": [[161, "neural-compressor-ext-lab-alibaba"]], "Making a new release of neural_compressor_ext_lab_alibaba": [[162, "making-a-new-release-of-neural-compressor-ext-lab-alibaba"]], "Change Log": [[163, "change-log"]], "[Unreleased]": [[163, "unreleased"]], "Background Introduction": [[164, "background-introduction"]], "Neural Coder Extension in VSCode": [[164, "neural-coder-extension-in-vscode"]], "Neural Coder Extension Usage": [[164, "neural-coder-extension-usage"]], "1. Open": [[164, "open"]], "2. Search": [[164, "search"]], "3. Setting": [[164, "setting"]], "4. Icon": [[164, "icon"]], "5. optimization (quantization)": [[164, "optimization-quantization"]], "5.1 Enable": [[164, "enable"]], "5.2 Auto": [[164, "auto"]], "Welcome to your VS Code Extension": [[165, "welcome-to-your-vs-code-extension"]], "What\u2019s in the folder": [[165, "what-s-in-the-folder"]], "Setup": [[165, "setup"]], "Get up and running straight away": [[165, "get-up-and-running-straight-away"]], "Make changes": [[165, "make-changes"]], "Explore the API": [[165, "explore-the-api"]], "Run tests": [[165, "run-tests"]], "Go further": [[165, "go-further"]], "Neural Insights": [[166, "neural-insights"]], "Start the Neural Insights": [[166, "start-the-neural-insights"]], "Tensor dump examples": [[166, "tensor-dump-examples"]], "Step by Step Diagnosis Example": [[166, "step-by-step-diagnosis-example"]], "Research Collaborations": [[166, "research-collaborations"]], "Step by step example how to debug accuracy with Neural Insights": [[167, "step-by-step-example-how-to-debug-accuracy-with-neural-insights"], [169, "step-by-step-example-how-to-debug-accuracy-with-neural-insights"]], "Preparation": [[167, "preparation"], [168, "preparation"], [169, "preparation"], [191, "preparation"]], "Running the quantization": [[167, "running-the-quantization"], [168, "running-the-quantization"], [169, "running-the-quantization"]], "Analyzing the result of quantization": [[167, "analyzing-the-result-of-quantization"], [169, "analyzing-the-result-of-quantization"]], "Weights summary": [[167, "weights-summary"]], "Activations summary": [[167, "activations-summary"]], "Step by step example how to dump weights data for PyTorch model with Neural Insights": [[168, "step-by-step-example-how-to-dump-weights-data-for-pytorch-model-with-neural-insights"]], "Source": [[168, "source"], [169, "source"]], "Prepare the dataset": [[169, "prepare-the-dataset"]], "Analyzing weight histograms": [[169, "analyzing-weight-histograms"]], "Open Neural Insights": [[169, "open-neural-insights"]], "Getting Started with Create React App": [[170, "getting-started-with-create-react-app"]], "Available Scripts": [[170, "available-scripts"]], "npm start": [[170, "npm-start"]], "npm test": [[170, "npm-test"]], "npm run build": [[170, "npm-run-build"]], "npm run eject": [[170, "npm-run-eject"]], "Learn More": [[170, "learn-more"], [171, "learn-more"]], "Code Splitting": [[170, "code-splitting"]], "Analyzing the Bundle Size": [[170, "analyzing-the-bundle-size"]], "Making a Progressive Web App": [[170, "making-a-progressive-web-app"]], "Advanced Configuration": [[170, "advanced-configuration"]], "Deployment": [[170, "deployment"]], "npm run build fails to minify": [[170, "npm-run-build-fails-to-minify"]], "What\u2019s Neural Solution?": [[171, "what-s-neural-solution"]], "Why Neural Solution?": [[171, "why-neural-solution"]], "How does Neural Solution Work?": [[171, "how-does-neural-solution-work"]], "Method 1. Using pip:": [[171, "method-1-using-pip"]], "Method 2. Building from source:": [[171, "method-2-building-from-source"]], "End-to-end examples": [[171, "end-to-end-examples"]], "Get started": [[172, "get-started"]], "Install Neural Solution": [[172, "install-neural-solution"]], "Method 1. Using pip": [[172, "method-1-using-pip"]], "Method 2. Building from source": [[172, "method-2-building-from-source"]], "Start service": [[172, "start-service"]], "Submit task": [[172, "submit-task"]], "Query task status": [[172, "query-task-status"]], "Stop service": [[172, "stop-service"]], "Inspect logs": [[172, "inspect-logs"]], "Manage resource": [[172, "manage-resource"], [177, "manage-resource"], [178, "manage-resource"]], "Node States": [[172, "node-states"]], "Query cluster": [[172, "query-cluster"]], "Add node": [[172, "add-node"]], "Remove node": [[172, "remove-node"]], "Neural Solution API": [[173, "neural-solution-api"]], "Base URL": [[173, "base-url"]], "Endpoints": [[173, "endpoints"]], "GET /": [[173, "get"]], "Description": [[173, "description"], [173, "id1"], [173, "id4"], [173, "id8"], [173, "id12"], [173, "id15"], [173, "id18"], [173, "id21"], [173, "id24"]], "Responses": [[173, "responses"], [173, "id3"], [173, "id7"], [173, "id11"], [173, "id14"], [173, "id17"], [173, "id20"], [173, "id23"], [173, "id26"]], "POST /task/submit": [[173, "post-task-submit"]], "Parameters": [[173, "parameters"], [173, "id5"], [173, "id10"], [173, "id13"]], "GET /task/status/{task_id}": [[173, "get-task-status-task-id"]], "GET /task/log/{task_id}": [[173, "get-task-log-task-id"]], "WebSocket /task/screen/{task_id}": [[173, "websocket-task-screen-task-id"]], "GET /ping": [[173, "get-ping"]], "GET /cluster": [[173, "get-cluster"]], "GET /download/{task_id}": [[173, "get-download-task-id"]], "GET /description": [[173, "get-description"]], "Design Doc for Optimization as a Service [WIP]": [[174, "design-doc-for-optimization-as-a-service-wip"]], "Contents": [[174, "contents"]], "Workflow of OaaS": [[174, "workflow-of-oaas"]], "Class definition diagram": [[174, "class-definition-diagram"]], "Extensibility": [[174, "extensibility"]], "Task request description": [[175, "task-request-description"]], "Examples List": [[176, "examples-list"]], "An end-to-end example: quantize a custom model with Neural Solution": [[177, "an-end-to-end-example-quantize-a-custom-model-with-neural-solution"]], "Start the Neural Solution Service": [[177, "start-the-neural-solution-service"], [178, "start-the-neural-solution-service"], [179, "start-the-neural-solution-service"]], "Submit optimization task": [[177, "submit-optimization-task"], [178, "submit-optimization-task"], [179, "submit-optimization-task"]], "Query optimization result": [[177, "query-optimization-result"], [178, "query-optimization-result"], [179, "query-optimization-result"]], "Download optimized model": [[177, "download-optimized-model"], [178, "download-optimized-model"]], "Stop the service": [[177, "stop-the-service"], [178, "stop-the-service"], [179, "stop-the-service"]], "An end-to-end example: quantize a Hugging Face model with Neural Solution": [[178, "an-end-to-end-example-quantize-a-hugging-face-model-with-neural-solution"]], "An end-to-end example: quantize a Hugging Face model with Neural Solution gRPC API": [[179, "an-end-to-end-example-quantize-a-hugging-face-model-with-neural-solution-grpc-api"]], "Client": [[180, "client"]], "Single Objective": [[181, "single-objective"]], "Multiple Objectives": [[181, "multiple-objectives"]], "Objective Support Matrix": [[181, "objective-support-matrix"]], "Get Started with Objective API": [[181, "get-started-with-objective-api"]], "Config Single Objective": [[181, "config-single-objective"]], "Config Multiple Objectives": [[181, "config-multiple-objectives"]], "Optimization Orchestration": [[182, "optimization-orchestration"]], "One-shot": [[182, "one-shot"]], "Orchestration Support Matrix": [[182, "orchestration-support-matrix"]], "Get Started with Orchestration API": [[182, "get-started-with-orchestration-api"]], "Neural Network Pruning": [[183, "neural-network-pruning"]], "Pruning Patterns": [[183, "pruning-patterns"]], "Pruning Criteria": [[183, "pruning-criteria"]], "Pruning Types": [[183, "pruning-types"]], "Pruning Schedules": [[183, "pruning-schedules"]], "Pruning Scope": [[183, "pruning-scope"]], "Sparsity Decay Types": [[183, "sparsity-decay-types"]], "Regularization": [[183, "regularization"]], "Large Language Model Pruning": [[183, "large-language-model-pruning"]], "Pruning Support Matrix": [[183, "pruning-support-matrix"]], "Get Started with Pruning API": [[183, "get-started-with-pruning-api"]], "Training-aware pruning API": [[183, "training-aware-pruning-api"]], "Retrain-free Pruning API": [[183, "retrain-free-pruning-api"]], "Sparse Model Deployment": [[183, "sparse-model-deployment"]], "Pruning with Hyperparameter Optimization": [[183, "pruning-with-hyperparameter-optimization"]], "Full Publications/Events (82)": [[184, "full-publications-events-82"]], "2024 (3)": [[184, "id1"]], "2023 (25)": [[184, "id2"]], "2022 (35)": [[184, "id3"]], "2021 (15)": [[184, "id4"]], "2018 - 2020 (4)": [[184, "id5"]], "Pythonic Style Access for Configurations": [[185, "pythonic-style-access-for-configurations"]], "Pythonic API for User Configurations": [[185, "pythonic-api-for-user-configurations"], [185, "id1"]], "Pythonic API for Framework Configurations": [[185, "pythonic-api-for-framework-configurations"], [185, "id2"]], "Get Started with Pythonic API for Configurations": [[185, "get-started-with-pythonic-api-for-configurations"]], "NAS": [[185, "nas"]], "Quantization Introduction": [[186, "quantization-introduction"]], "Quantization Support Matrix": [[186, "quantization-support-matrix"]], "Quantization Scheme in MXNet": [[186, "quantization-scheme-in-mxnet"]], "Quantization Scheme in ONNX Runtime": [[186, "quantization-scheme-in-onnx-runtime"]], "Post Training Quantization": [[186, "post-training-quantization"]], "Specify Quantization Recipes": [[186, "specify-quantization-recipes"]], "Specify Quantization Backend and Device": [[186, "specify-quantization-backend-and-device"]], "Layer Wise Quantization (LWQ)": [[187, "layer-wise-quantization-lwq"]], "PyTorch framework example": [[187, "pytorch-framework-example"]], "ONNX Runtime framework example": [[187, "onnx-runtime-framework-example"]], "Turn OFF Auto Mixed Precision during Quantization": [[188, "turn-off-auto-mixed-precision-during-quantization"]], "Tensorflow": [[188, "tensorflow"]], "Weight Only Quantization (WOQ)": [[189, "weight-only-quantization-woq"]], "Quantization Capability": [[189, "quantization-capability"]], "Export Compressed Model": [[189, "export-compressed-model"]], "User Code Example": [[189, "user-code-example"]], "WOQ Algorithms Tuning": [[189, "woq-algorithms-tuning"]], "User code example": [[189, "id1"]], "Release": [[190, "release"]], "Release Notes": [[190, "release-notes"]], "Known Issues": [[190, "known-issues"]], "Incompatible Changes": [[190, "incompatible-changes"]], "SigOpt Strategy": [[191, "sigopt-strategy"]], "SigOpt Platform": [[191, "sigopt-platform"]], "Neural Compressor Configuration": [[191, "neural-compressor-configuration"]], "Performance": [[191, "performance"]], "Benefit of SigOpt Strategy": [[191, "benefit-of-sigopt-strategy"]], "Performance Comparison of Different Strategies": [[191, "performance-comparison-of-different-strategies"]], "SmoothQuant and Our Enhancement": [[192, "smoothquant-and-our-enhancement"]], "SmoothQuant": [[192, "smoothquant"]], "Our enhancement:": [[192, "our-enhancement"]], "Algorithm: Auto-tuning of $\\alpha$.": [[192, "algorithm-auto-tuning-of-alpha"]], "Engineering": [[192, "engineering"]], "Using a fixed alpha": [[192, "using-a-fixed-alpha"]], "Auto-tune the alpha for the entire model": [[192, "auto-tune-the-alpha-for-the-entire-model"]], "Auto-tune the alpha for each layer/block": [[192, "auto-tune-the-alpha-for-each-layer-block"]], "TensorBoard": [[193, "tensorboard"]], "Get Started with TensorBoard": [[193, "get-started-with-tensorboard"]], "PyTorch TensorBoard": [[193, "pytorch-tensorboard"]], "TensorFlow Tensorboard": [[193, "tensorflow-tensorboard"]], "PyTorch Examples": [[193, "pytorch-examples"]], "TensorFlow Examples": [[193, "tensorflow-examples"]], "Transform": [[194, "transform"]], "Transform Support List": [[194, "transform-support-list"]], "Pytorch": [[194, "pytorch"]], "Tuning Strategies": [[195, "tuning-strategies"]], "Strategy Design": [[195, "strategy-design"]], "Tuning Space": [[195, "tuning-space"]], "Exit Policy": [[195, "exit-policy"]], "Accuracy Criteria": [[195, "accuracy-criteria"]], "Tuning Process": [[195, "tuning-process"]], "Tuning Algorithms": [[195, "tuning-algorithms"]], "Auto": [[195, "auto"]], "Conservative Tuning": [[195, "conservative-tuning"]], "Basic": [[195, "basic"]], "MSE": [[195, "mse"]], "MSE_V2": [[195, "mse-v2"]], "HAWQ_V2": [[195, "hawq-v2"]], "Bayesian": [[195, "bayesian"]], "Exhaustive": [[195, "exhaustive"]], "Random": [[195, "random"]], "SigOpt": [[195, "sigopt"]], "TPE": [[195, "tpe"]], "Distributed Tuning": [[195, "distributed-tuning"]], "Customize a New Tuning Strategy": [[195, "customize-a-new-tuning-strategy"]], "User Guide": [[196, "user-guide"]], "Python-based APIs": [[196, "python-based-apis"]], "Neural Coder (Zero-code Optimization)": [[196, "neural-coder-zero-code-optimization"]], "Advanced Topics": [[196, "advanced-topics"]], "Innovations for Productivity": [[196, "innovations-for-productivity"]], "User YAML Configuration Files": [[197, "user-yaml-configuration-files"]], "Get started with User YAML Files": [[197, "get-started-with-user-yaml-files"]], "Validated Quantization Examples": [[198, "validated-quantization-examples"]], "TensorFlow Models with TensorFlow 2.15.0": [[198, "tensorflow-models-with-tensorflow-2-15-0"]], "PyTorch Models with Torch 2.2.1+cpu in PTQ Mode": [[198, "pytorch-models-with-torch-2-2-1-cpu-in-ptq-mode"]], "PyTorch Models with Torch 2.2.1+cpu in QAT Mode": [[198, "pytorch-models-with-torch-2-2-1-cpu-in-qat-mode"]], "PyTorch Models with Torch 2.0.1+cpu in WOQ Mode": [[198, "pytorch-models-with-torch-2-0-1-cpu-in-woq-mode"]], "ONNX Models with ONNX Runtime 1.17.1": [[198, "onnx-models-with-onnx-runtime-1-17-1"]], "ONNX Models with ONNX Runtime 1.15.0 in WOQ Mode": [[198, "onnx-models-with-onnx-runtime-1-15-0-in-woq-mode"]], "Validated Pruning Examples": [[198, "validated-pruning-examples"]], "Validated Knowledge Distillation Examples": [[198, "validated-knowledge-distillation-examples"]], "Validated ONNX QDQ INT8 Models on Multiple Hardware through ONNX Runtime": [[198, "validated-onnx-qdq-int8-models-on-multiple-hardware-through-onnx-runtime"]]}, "indexentries": {"algorithms (class in neural_compressor.algorithm.algorithm)": [[0, "neural_compressor.algorithm.algorithm.ALGORITHMS"]], "algorithm (class in neural_compressor.algorithm.algorithm)": [[0, "neural_compressor.algorithm.algorithm.Algorithm"]], "algorithmscheduler (class in neural_compressor.algorithm.algorithm)": [[0, "neural_compressor.algorithm.algorithm.AlgorithmScheduler"]], "algorithm_registry() (in module neural_compressor.algorithm.algorithm)": [[0, "neural_compressor.algorithm.algorithm.algorithm_registry"]], "module": [[0, "module-neural_compressor.algorithm.algorithm"], [1, "module-neural_compressor.algorithm.fast_bias_correction"], [2, "module-neural_compressor.algorithm"], [3, "module-neural_compressor.algorithm.smooth_quant"], [4, "module-neural_compressor.algorithm.weight_correction"], [5, "module-neural_compressor.benchmark"], [6, "module-neural_compressor.config"], [7, "module-neural_compressor.contrib"], [8, "module-neural_compressor.contrib.strategy"], [9, "module-neural_compressor.contrib.strategy.sigopt"], [10, "module-neural_compressor.contrib.strategy.tpe"], [11, "module-neural_compressor.data.datasets.bert_dataset"], [12, "module-neural_compressor.data.datasets.coco_dataset"], [13, "module-neural_compressor.data.datasets.dataset"], [14, "module-neural_compressor.data.datasets.dummy_dataset"], [15, "module-neural_compressor.data.datasets.dummy_dataset_v2"], [16, "module-neural_compressor.data.datasets.imagenet_dataset"], [17, "module-neural_compressor.data.datasets"], [18, "module-neural_compressor.data.datasets.style_transfer_dataset"], [19, "module-neural_compressor.data.filters.coco_filter"], [20, "module-neural_compressor.data.filters.filter"], [21, "module-neural_compressor.data.filters"], [22, "module-neural_compressor.data"], [23, "module-neural_compressor.data.transforms.imagenet_transform"], [24, "module-neural_compressor.data.transforms"], [25, "module-neural_compressor.data.transforms.postprocess"], [26, "module-neural_compressor.data.transforms.tokenization"], [27, "module-neural_compressor.data.transforms.transform"], [28, "module-neural_compressor"], [29, "module-neural_compressor.metric.bleu"], [30, "module-neural_compressor.metric.bleu_util"], [31, "module-neural_compressor.metric.coco_label_map"], [32, "module-neural_compressor.metric.coco_tools"], [33, "module-neural_compressor.metric.evaluate_squad"], [34, "module-neural_compressor.metric.f1"], [35, "module-neural_compressor.metric"], [36, "module-neural_compressor.metric.metric"], [37, "module-neural_compressor.mix_precision"], [38, "module-neural_compressor.model.base_model"], [39, "module-neural_compressor.model"], [40, "module-neural_compressor.model.keras_model"], [41, "module-neural_compressor.model.model"], [42, "module-neural_compressor.model.mxnet_model"], [43, "module-neural_compressor.model.nets_factory"], [44, "module-neural_compressor.model.onnx_model"], [45, "module-neural_compressor.model.tensorflow_model"], [46, "module-neural_compressor.model.torch_model"], [47, "module-neural_compressor.objective"], [48, "module-neural_compressor.profiling"], [49, "module-neural_compressor.quantization"], [50, "module-neural_compressor.strategy.auto"], [51, "module-neural_compressor.strategy.auto_mixed_precision"], [52, "module-neural_compressor.strategy.basic"], [53, "module-neural_compressor.strategy.bayesian"], [54, "module-neural_compressor.strategy.conservative"], [55, "module-neural_compressor.strategy.exhaustive"], [56, "module-neural_compressor.strategy.hawq_v2"], [57, "module-neural_compressor.strategy"], [58, "module-neural_compressor.strategy.mse"], [59, "module-neural_compressor.strategy.mse_v2"], [60, "module-neural_compressor.strategy.random"], [61, "module-neural_compressor.strategy.strategy"], [62, "module-neural_compressor.strategy.utils.constant"], [63, "module-neural_compressor.strategy.utils"], [64, "module-neural_compressor.strategy.utils.tuning_sampler"], [65, "module-neural_compressor.strategy.utils.tuning_space"], [66, "module-neural_compressor.strategy.utils.tuning_structs"], [67, "module-neural_compressor.strategy.utils.utility"], [68, "module-neural_compressor.training"], [69, "module-neural_compressor.utils.collect_layer_histogram"], [70, "module-neural_compressor.utils.constant"], [71, "module-neural_compressor.utils.create_obj_from_config"], [72, "module-neural_compressor.utils.export"], [73, "module-neural_compressor.utils.export.qlinear2qdq"], [74, "module-neural_compressor.utils.export.tf2onnx"], [75, "module-neural_compressor.utils.export.torch2onnx"], [76, "module-neural_compressor.utils"], [77, "module-neural_compressor.utils.kl_divergence"], [78, "module-neural_compressor.utils.load_huggingface"], [79, "module-neural_compressor.utils.logger"], [80, "module-neural_compressor.utils.neural_insights_utils"], [81, "module-neural_compressor.utils.options"], [82, "module-neural_compressor.utils.pytorch"], [83, "module-neural_compressor.utils.utility"], [84, "module-neural_compressor.utils.weights_details"], [85, "module-neural_compressor.version"]], "neural_compressor.algorithm.algorithm": [[0, "module-neural_compressor.algorithm.algorithm"]], "fastbiascorrection (class in neural_compressor.algorithm.fast_bias_correction)": [[1, "neural_compressor.algorithm.fast_bias_correction.FastBiasCorrection"]], "neural_compressor.algorithm.fast_bias_correction": [[1, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[2, "module-neural_compressor.algorithm"]], "smoothquant (class in neural_compressor.algorithm.smooth_quant)": [[3, "neural_compressor.algorithm.smooth_quant.SmoothQuant"]], "neural_compressor.algorithm.smooth_quant": [[3, "module-neural_compressor.algorithm.smooth_quant"]], "weightcorrection (class in neural_compressor.algorithm.weight_correction)": [[4, "neural_compressor.algorithm.weight_correction.WeightCorrection"]], "neural_compressor.algorithm.weight_correction": [[4, "module-neural_compressor.algorithm.weight_correction"]], "benchmark_with_raw_cmd() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.benchmark_with_raw_cmd"]], "call_one() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.call_one"]], "config_instance() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.config_instance"]], "fit() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.fit"]], "generate_prefix() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.generate_prefix"]], "get_architecture() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.get_threads_per_core"]], "neural_compressor.benchmark": [[5, "module-neural_compressor.benchmark"]], "profile() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.profile"]], "run_instance() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.run_instance"]], "set_all_env_var() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.set_env_var"]], "summary_benchmark() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.summary_benchmark"]], "accuracycriterion (class in neural_compressor.config)": [[6, "neural_compressor.config.AccuracyCriterion"]], "benchmarkconfig (class in neural_compressor.config)": [[6, "neural_compressor.config.BenchmarkConfig"]], "distillationconfig (class in neural_compressor.config)": [[6, "neural_compressor.config.DistillationConfig"]], "dotdict (class in neural_compressor.config)": [[6, "neural_compressor.config.DotDict"]], "exportconfig (class in neural_compressor.config)": [[6, "neural_compressor.config.ExportConfig"]], "hpoconfig (class in neural_compressor.config)": [[6, "neural_compressor.config.HPOConfig"]], "intermediatelayersknowledgedistillationlossconfig (class in neural_compressor.config)": [[6, "neural_compressor.config.IntermediateLayersKnowledgeDistillationLossConfig"]], "keras (class in neural_compressor.config)": [[6, "neural_compressor.config.Keras"]], "knowledgedistillationlossconfig (class in neural_compressor.config)": [[6, "neural_compressor.config.KnowledgeDistillationLossConfig"]], "mxnet (class in neural_compressor.config)": [[6, "neural_compressor.config.MXNet"]], "mixedprecisionconfig (class in neural_compressor.config)": [[6, "neural_compressor.config.MixedPrecisionConfig"]], "nasconfig (class in neural_compressor.config)": [[6, "neural_compressor.config.NASConfig"]], "onnx (class in neural_compressor.config)": [[6, "neural_compressor.config.ONNX"]], "onnxqlinear2qdqconfig (class in neural_compressor.config)": [[6, "neural_compressor.config.ONNXQlinear2QDQConfig"]], "options (class in neural_compressor.config)": [[6, "neural_compressor.config.Options"]], "posttrainingquantconfig (class in neural_compressor.config)": [[6, "neural_compressor.config.PostTrainingQuantConfig"]], "pytorch (class in neural_compressor.config)": [[6, "neural_compressor.config.PyTorch"]], "quantizationawaretrainingconfig (class in neural_compressor.config)": [[6, "neural_compressor.config.QuantizationAwareTrainingConfig"]], "selfknowledgedistillationlossconfig (class in neural_compressor.config)": [[6, "neural_compressor.config.SelfKnowledgeDistillationLossConfig"]], "tf2onnxconfig (class in neural_compressor.config)": [[6, "neural_compressor.config.TF2ONNXConfig"]], "tensorflow (class in neural_compressor.config)": [[6, "neural_compressor.config.TensorFlow"]], "torch2onnxconfig (class in neural_compressor.config)": [[6, "neural_compressor.config.Torch2ONNXConfig"]], "tuningcriterion (class in neural_compressor.config)": [[6, "neural_compressor.config.TuningCriterion"]], "weightpruningconfig (class in neural_compressor.config)": [[6, "neural_compressor.config.WeightPruningConfig"]], "neural_compressor.config": [[6, "module-neural_compressor.config"]], "neural_compressor.contrib": [[7, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[8, "module-neural_compressor.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.contrib.strategy.sigopt)": [[9, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.sigopt": [[9, "module-neural_compressor.contrib.strategy.sigopt"]], "tpetunestrategy (class in neural_compressor.contrib.strategy.tpe)": [[10, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[10, "module-neural_compressor.contrib.strategy.tpe"]], "inputfeatures (class in neural_compressor.data.datasets.bert_dataset)": [[11, "neural_compressor.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[11, "neural_compressor.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.data.datasets.bert_dataset)": [[11, "neural_compressor.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[11, "neural_compressor.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[11, "neural_compressor.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[11, "neural_compressor.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.data.datasets.bert_dataset)": [[11, "neural_compressor.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.data.datasets.bert_dataset)": [[11, "neural_compressor.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.data.datasets.bert_dataset": [[11, "module-neural_compressor.data.datasets.bert_dataset"]], "coconpy (class in neural_compressor.data.datasets.coco_dataset)": [[12, "neural_compressor.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.data.datasets.coco_dataset)": [[12, "neural_compressor.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.data.datasets.coco_dataset)": [[12, "neural_compressor.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.data.datasets.coco_dataset)": [[12, "neural_compressor.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.data.datasets.coco_dataset": [[12, "module-neural_compressor.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.data.datasets.dataset)": [[13, "neural_compressor.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.data.datasets.dataset)": [[13, "neural_compressor.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.data.datasets.dataset)": [[13, "neural_compressor.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.data.datasets.dataset)": [[13, "neural_compressor.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.data.datasets.dataset)": [[13, "neural_compressor.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.data.datasets.dataset)": [[13, "neural_compressor.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.data.datasets.dataset)": [[13, "neural_compressor.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.data.datasets.dataset)": [[13, "neural_compressor.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.data.datasets.dataset)": [[13, "neural_compressor.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.data.datasets.dataset)": [[13, "neural_compressor.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.data.datasets.dataset)": [[13, "neural_compressor.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.data.datasets.dataset)": [[13, "neural_compressor.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.data.datasets.dataset)": [[13, "neural_compressor.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.data.datasets.dataset)": [[13, "neural_compressor.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.data.datasets.dataset)": [[13, "neural_compressor.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.data.datasets.dataset)": [[13, "neural_compressor.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.data.datasets.dataset)": [[13, "neural_compressor.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.data.datasets.dataset)": [[13, "neural_compressor.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.data.datasets.dataset)": [[13, "neural_compressor.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.data.datasets.dataset)": [[13, "neural_compressor.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.data.datasets.dataset)": [[13, "neural_compressor.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.data.datasets.dataset)": [[13, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.datasets.dataset)": [[13, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflow (class in neural_compressor.data.datasets.dataset)": [[13, "neural_compressor.data.datasets.dataset.Tensorflow"]], "tensorflowcifar10 (class in neural_compressor.data.datasets.dataset)": [[13, "neural_compressor.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.data.datasets.dataset)": [[13, "neural_compressor.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.data.datasets.dataset)": [[13, "neural_compressor.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.data.datasets.dataset)": [[13, "neural_compressor.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagerecord (class in neural_compressor.data.datasets.dataset)": [[13, "neural_compressor.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.data.datasets.dataset)": [[13, "neural_compressor.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.data.datasets.dataset)": [[13, "neural_compressor.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.data.datasets.dataset)": [[13, "neural_compressor.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.data.datasets.dataset)": [[13, "neural_compressor.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.data.datasets.dataset)": [[13, "neural_compressor.data.datasets.dataset.check_integrity"]], "dataset_registry() (in module neural_compressor.data.datasets.dataset)": [[13, "neural_compressor.data.datasets.dataset.dataset_registry"]], "download_url() (in module neural_compressor.data.datasets.dataset)": [[13, "neural_compressor.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.data.datasets.dataset)": [[13, "neural_compressor.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.data.datasets.dataset)": [[13, "neural_compressor.data.datasets.dataset.gen_bar_updater"]], "neural_compressor.data.datasets.dataset": [[13, "module-neural_compressor.data.datasets.dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset)": [[14, "neural_compressor.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset": [[14, "module-neural_compressor.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[15, "neural_compressor.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[15, "neural_compressor.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[15, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[16, "neural_compressor.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[16, "neural_compressor.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[16, "neural_compressor.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[16, "neural_compressor.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[16, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[16, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.data.datasets.imagenet_dataset": [[16, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[17, "module-neural_compressor.data.datasets"]], "styletransferdataset (class in neural_compressor.data.datasets.style_transfer_dataset)": [[18, "neural_compressor.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.data.datasets.style_transfer_dataset": [[18, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.data.filters.coco_filter)": [[19, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.data.filters.coco_filter)": [[19, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.coco_filter": [[19, "module-neural_compressor.data.filters.coco_filter"]], "filters (class in neural_compressor.data.filters.filter)": [[20, "neural_compressor.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.data.filters.filter)": [[20, "neural_compressor.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.data.filters.filter)": [[20, "neural_compressor.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.data.filters.filter)": [[20, "neural_compressor.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.data.filters.filter)": [[20, "neural_compressor.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.data.filters.filter)": [[20, "neural_compressor.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.data.filters.filter)": [[20, "neural_compressor.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.data.filters.filter)": [[20, "neural_compressor.data.filters.filter.filter_registry"]], "neural_compressor.data.filters.filter": [[20, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[21, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[22, "module-neural_compressor.data"]], "bilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[23, "neural_compressor.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.data.transforms.imagenet_transform)": [[23, "neural_compressor.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[23, "neural_compressor.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[23, "neural_compressor.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.data.transforms.imagenet_transform)": [[23, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[23, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.data.transforms.imagenet_transform)": [[23, "neural_compressor.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.data.transforms.imagenet_transform)": [[23, "neural_compressor.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[23, "neural_compressor.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "tensorflowshiftrescale (class in neural_compressor.data.transforms.imagenet_transform)": [[23, "neural_compressor.data.transforms.imagenet_transform.TensorflowShiftRescale"]], "tensorflowtransposelastchannel (class in neural_compressor.data.transforms.imagenet_transform)": [[23, "neural_compressor.data.transforms.imagenet_transform.TensorflowTransposeLastChannel"]], "neural_compressor.data.transforms.imagenet_transform": [[23, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[24, "module-neural_compressor.data.transforms"]], "postprocess (class in neural_compressor.data.transforms.postprocess)": [[25, "neural_compressor.data.transforms.postprocess.Postprocess"]], "neural_compressor.data.transforms.postprocess": [[25, "module-neural_compressor.data.transforms.postprocess"]], "basictokenizer (class in neural_compressor.data.transforms.tokenization)": [[26, "neural_compressor.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.data.transforms.tokenization)": [[26, "neural_compressor.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.data.transforms.tokenization)": [[26, "neural_compressor.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.data.transforms.tokenization)": [[26, "neural_compressor.data.transforms.tokenization.convert_by_vocab"]], "convert_to_unicode() (in module neural_compressor.data.transforms.tokenization)": [[26, "neural_compressor.data.transforms.tokenization.convert_to_unicode"]], "load_vocab() (in module neural_compressor.data.transforms.tokenization)": [[26, "neural_compressor.data.transforms.tokenization.load_vocab"]], "neural_compressor.data.transforms.tokenization": [[26, "module-neural_compressor.data.transforms.tokenization"]], "whitespace_tokenize() (in module neural_compressor.data.transforms.tokenization)": [[26, "neural_compressor.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.data.transforms.transform)": [[27, "neural_compressor.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.data.transforms.transform)": [[27, "neural_compressor.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.data.transforms.transform)": [[27, "neural_compressor.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.data.transforms.transform)": [[27, "neural_compressor.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.data.transforms.transform)": [[27, "neural_compressor.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.data.transforms.transform)": [[27, "neural_compressor.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.data.transforms.transform)": [[27, "neural_compressor.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.data.transforms.transform)": [[27, "neural_compressor.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.data.transforms.transform)": [[27, "neural_compressor.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.data.transforms.transform)": [[27, "neural_compressor.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.data.transforms.transform)": [[27, "neural_compressor.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.data.transforms.transform)": [[27, "neural_compressor.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.data.transforms.transform)": [[27, "neural_compressor.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.data.transforms.transform)": [[27, "neural_compressor.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[27, "neural_compressor.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.data.transforms.transform)": [[27, "neural_compressor.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.data.transforms.transform)": [[27, "neural_compressor.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.data.transforms.transform)": [[27, "neural_compressor.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.data.transforms.transform)": [[27, "neural_compressor.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.data.transforms.transform)": [[27, "neural_compressor.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[27, "neural_compressor.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.data.transforms.transform)": [[27, "neural_compressor.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.data.transforms.transform)": [[27, "neural_compressor.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.data.transforms.transform)": [[27, "neural_compressor.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.data.transforms.transform)": [[27, "neural_compressor.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.data.transforms.transform)": [[27, "neural_compressor.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.data.transforms.transform)": [[27, "neural_compressor.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.data.transforms.transform)": [[27, "neural_compressor.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.data.transforms.transform)": [[27, "neural_compressor.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.data.transforms.transform)": [[27, "neural_compressor.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.data.transforms.transform)": [[27, "neural_compressor.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.transforms.transform)": [[27, "neural_compressor.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.data.transforms.transform)": [[27, "neural_compressor.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.data.transforms.transform)": [[27, "neural_compressor.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[27, "neural_compressor.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.data.transforms.transform)": [[27, "neural_compressor.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.data.transforms.transform)": [[27, "neural_compressor.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.data.transforms.transform)": [[27, "neural_compressor.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.data.transforms.transform)": [[27, "neural_compressor.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.data.transforms.transform)": [[27, "neural_compressor.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.data.transforms.transform)": [[27, "neural_compressor.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.data.transforms.transform)": [[27, "neural_compressor.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.data.transforms.transform)": [[27, "neural_compressor.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.data.transforms.transform)": [[27, "neural_compressor.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.data.transforms.transform)": [[27, "neural_compressor.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.data.transforms.transform)": [[27, "neural_compressor.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.data.transforms.transform)": [[27, "neural_compressor.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.data.transforms.transform)": [[27, "neural_compressor.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.data.transforms.transform)": [[27, "neural_compressor.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.data.transforms.transform)": [[27, "neural_compressor.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.data.transforms.transform)": [[27, "neural_compressor.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.data.transforms.transform)": [[27, "neural_compressor.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.data.transforms.transform)": [[27, "neural_compressor.data.transforms.transform.TRANSFORMS"], [27, "neural_compressor.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[27, "neural_compressor.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[27, "neural_compressor.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.data.transforms.transform)": [[27, "neural_compressor.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.data.transforms.transform)": [[27, "neural_compressor.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.data.transforms.transform)": [[27, "neural_compressor.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.data.transforms.transform)": [[27, "neural_compressor.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.data.transforms.transform)": [[27, "neural_compressor.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.data.transforms.transform)": [[27, "neural_compressor.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.data.transforms.transform)": [[27, "neural_compressor.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.data.transforms.transform)": [[27, "neural_compressor.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.data.transforms.transform)": [[27, "neural_compressor.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.data.transforms.transform)": [[27, "neural_compressor.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.data.transforms.transform)": [[27, "neural_compressor.data.transforms.transform.get_final_text"]], "get_torchvision_map() (in module neural_compressor.data.transforms.transform)": [[27, "neural_compressor.data.transforms.transform.get_torchvision_map"]], "neural_compressor.data.transforms.transform": [[27, "module-neural_compressor.data.transforms.transform"]], "read_squad_examples() (in module neural_compressor.data.transforms.transform)": [[27, "neural_compressor.data.transforms.transform.read_squad_examples"]], "transform_registry() (in module neural_compressor.data.transforms.transform)": [[27, "neural_compressor.data.transforms.transform.transform_registry"]], "neural_compressor": [[28, "module-neural_compressor"]], "bleu (class in neural_compressor.metric.bleu)": [[29, "neural_compressor.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.metric.bleu)": [[29, "neural_compressor.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.metric.bleu)": [[29, "neural_compressor.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.metric.bleu.bleu attribute)": [[29, "neural_compressor.metric.bleu.BLEU.labels"]], "neural_compressor.metric.bleu": [[29, "module-neural_compressor.metric.bleu"]], "nondigit_punct_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[29, "neural_compressor.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.metric.bleu.bleu attribute)": [[29, "neural_compressor.metric.bleu.BLEU.predictions"]], "punct_nondigit_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[29, "neural_compressor.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[29, "neural_compressor.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.metric.bleu_util)": [[30, "neural_compressor.metric.bleu_util.compute_bleu"]], "neural_compressor.metric.bleu_util": [[30, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[31, "module-neural_compressor.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.metric.coco_tools)": [[32, "neural_compressor.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.metric.coco_tools)": [[32, "neural_compressor.metric.coco_tools.COCOWrapper"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.metric.coco_tools)": [[32, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.metric.coco_tools)": [[32, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.metric.coco_tools)": [[32, "neural_compressor.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "dataset (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[32, "neural_compressor.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[32, "neural_compressor.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.metric.coco_tools": [[32, "module-neural_compressor.metric.coco_tools"]], "evaluate() (in module neural_compressor.metric.evaluate_squad)": [[33, "neural_compressor.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.metric.evaluate_squad)": [[33, "neural_compressor.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.metric.evaluate_squad)": [[33, "neural_compressor.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.evaluate_squad)": [[33, "neural_compressor.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.metric.evaluate_squad": [[33, "module-neural_compressor.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.metric.f1)": [[34, "neural_compressor.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.metric.f1)": [[34, "neural_compressor.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.f1)": [[34, "neural_compressor.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[34, "module-neural_compressor.metric.f1"]], "normalize_answer() (in module neural_compressor.metric.f1)": [[34, "neural_compressor.metric.f1.normalize_answer"]], "neural_compressor.metric": [[35, "module-neural_compressor.metric"]], "accuracy (class in neural_compressor.metric.metric)": [[36, "neural_compressor.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.metric.metric)": [[36, "neural_compressor.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.metric.metric)": [[36, "neural_compressor.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.metric.metric)": [[36, "neural_compressor.metric.metric.F1"]], "generaltopk (class in neural_compressor.metric.metric)": [[36, "neural_compressor.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.metric.metric)": [[36, "neural_compressor.metric.metric.Loss"]], "mae (class in neural_compressor.metric.metric)": [[36, "neural_compressor.metric.metric.MAE"]], "metrics (class in neural_compressor.metric.metric)": [[36, "neural_compressor.metric.metric.METRICS"]], "mse (class in neural_compressor.metric.metric)": [[36, "neural_compressor.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.metric.metric)": [[36, "neural_compressor.metric.metric.MXNetMetrics"]], "metric (class in neural_compressor.metric.metric)": [[36, "neural_compressor.metric.metric.Metric"]], "onnxrtglue (class in neural_compressor.metric.metric)": [[36, "neural_compressor.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.metric.metric)": [[36, "neural_compressor.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.metric.metric)": [[36, "neural_compressor.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.metric.metric)": [[36, "neural_compressor.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.metric.metric)": [[36, "neural_compressor.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.metric.metric)": [[36, "neural_compressor.metric.metric.RMSE"]], "roc (class in neural_compressor.metric.metric)": [[36, "neural_compressor.metric.metric.ROC"]], "squadf1 (class in neural_compressor.metric.metric)": [[36, "neural_compressor.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.metric.metric)": [[36, "neural_compressor.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.metric.metric)": [[36, "neural_compressor.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.metric.metric)": [[36, "neural_compressor.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.metric.metric)": [[36, "neural_compressor.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.metric.metric)": [[36, "neural_compressor.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.metric.metric)": [[36, "neural_compressor.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.metric.metric)": [[36, "neural_compressor.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.metric.metric)": [[36, "neural_compressor.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.metric.metric.mae attribute)": [[36, "neural_compressor.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.metric.metric.mse attribute)": [[36, "neural_compressor.metric.metric.MSE.compare_label"]], "k (neural_compressor.metric.metric.generaltopk attribute)": [[36, "neural_compressor.metric.metric.GeneralTopK.k"]], "k (neural_compressor.metric.metric.tensorflowtopk attribute)": [[36, "neural_compressor.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.metric.metric.accuracy attribute)": [[36, "neural_compressor.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.metric.metric.mae attribute)": [[36, "neural_compressor.metric.metric.MAE.label_list"]], "label_list (neural_compressor.metric.metric.mse attribute)": [[36, "neural_compressor.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.metric.metric)": [[36, "neural_compressor.metric.metric.mIOU"]], "metric_registry() (in module neural_compressor.metric.metric)": [[36, "neural_compressor.metric.metric.metric_registry"]], "metrics (neural_compressor.metric.metric.metrics attribute)": [[36, "neural_compressor.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.metric.metric.mxnetmetrics attribute)": [[36, "neural_compressor.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtitmetrics attribute)": [[36, "neural_compressor.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtqlmetrics attribute)": [[36, "neural_compressor.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.metric.metric.pytorchmetrics attribute)": [[36, "neural_compressor.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.metric.metric.tensorflowmetrics attribute)": [[36, "neural_compressor.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.metric.metric.rmse attribute)": [[36, "neural_compressor.metric.metric.RMSE.mse"]], "neural_compressor.metric.metric": [[36, "module-neural_compressor.metric.metric"]], "num_correct (neural_compressor.metric.metric.generaltopk attribute)": [[36, "neural_compressor.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.metric.metric.tensorflowtopk attribute)": [[36, "neural_compressor.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.metric.metric.generaltopk attribute)": [[36, "neural_compressor.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.metric.metric.tensorflowtopk attribute)": [[36, "neural_compressor.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.metric.metric.accuracy attribute)": [[36, "neural_compressor.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.metric.metric.mae attribute)": [[36, "neural_compressor.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.metric.metric.mse attribute)": [[36, "neural_compressor.metric.metric.MSE.pred_list"]], "register_customer_metric() (in module neural_compressor.metric.metric)": [[36, "neural_compressor.metric.metric.register_customer_metric"]], "sample (neural_compressor.metric.metric.accuracy attribute)": [[36, "neural_compressor.metric.metric.Accuracy.sample"]], "sample (neural_compressor.metric.metric.loss attribute)": [[36, "neural_compressor.metric.metric.Loss.sample"]], "sum (neural_compressor.metric.metric.loss attribute)": [[36, "neural_compressor.metric.metric.Loss.sum"]], "fit() (in module neural_compressor.mix_precision)": [[37, "neural_compressor.mix_precision.fit"]], "neural_compressor.mix_precision": [[37, "module-neural_compressor.mix_precision"]], "basemodel (class in neural_compressor.model.base_model)": [[38, "neural_compressor.model.base_model.BaseModel"]], "neural_compressor.model.base_model": [[38, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[39, "module-neural_compressor.model"]], "kerasmodel (class in neural_compressor.model.keras_model)": [[40, "neural_compressor.model.keras_model.KerasModel"]], "neural_compressor.model.keras_model": [[40, "module-neural_compressor.model.keras_model"]], "model (class in neural_compressor.model.model)": [[41, "neural_compressor.model.model.Model"]], "get_model_fwk_name() (in module neural_compressor.model.model)": [[41, "neural_compressor.model.model.get_model_fwk_name"]], "neural_compressor.model.model": [[41, "module-neural_compressor.model.model"]], "mxnetmodel (class in neural_compressor.model.mxnet_model)": [[42, "neural_compressor.model.mxnet_model.MXNetModel"]], "neural_compressor.model.mxnet_model": [[42, "module-neural_compressor.model.mxnet_model"]], "tfslimnetsfactory (class in neural_compressor.model.nets_factory)": [[43, "neural_compressor.model.nets_factory.TFSlimNetsFactory"]], "neural_compressor.model.nets_factory": [[43, "module-neural_compressor.model.nets_factory"]], "onnxmodel (class in neural_compressor.model.onnx_model)": [[44, "neural_compressor.model.onnx_model.ONNXModel"]], "neural_compressor.model.onnx_model": [[44, "module-neural_compressor.model.onnx_model"]], "tensorflowbasemodel (class in neural_compressor.model.tensorflow_model)": [[45, "neural_compressor.model.tensorflow_model.TensorflowBaseModel"]], "tensorflowcheckpointmodel (class in neural_compressor.model.tensorflow_model)": [[45, "neural_compressor.model.tensorflow_model.TensorflowCheckpointModel"]], "tensorflowllmmodel (class in neural_compressor.model.tensorflow_model)": [[45, "neural_compressor.model.tensorflow_model.TensorflowLLMModel"]], "tensorflowmodel (class in neural_compressor.model.tensorflow_model)": [[45, "neural_compressor.model.tensorflow_model.TensorflowModel"]], "tensorflowqatmodel (class in neural_compressor.model.tensorflow_model)": [[45, "neural_compressor.model.tensorflow_model.TensorflowQATModel"]], "tensorflowsavedmodelmodel (class in neural_compressor.model.tensorflow_model)": [[45, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel"]], "checkpoint_session() (in module neural_compressor.model.tensorflow_model)": [[45, "neural_compressor.model.tensorflow_model.checkpoint_session"]], "estimator_session() (in module neural_compressor.model.tensorflow_model)": [[45, "neural_compressor.model.tensorflow_model.estimator_session"]], "frozen_pb_session() (in module neural_compressor.model.tensorflow_model)": [[45, "neural_compressor.model.tensorflow_model.frozen_pb_session"]], "get_model_type() (in module neural_compressor.model.tensorflow_model)": [[45, "neural_compressor.model.tensorflow_model.get_model_type"]], "graph_def_session() (in module neural_compressor.model.tensorflow_model)": [[45, "neural_compressor.model.tensorflow_model.graph_def_session"]], "graph_session() (in module neural_compressor.model.tensorflow_model)": [[45, "neural_compressor.model.tensorflow_model.graph_session"]], "keras_session() (in module neural_compressor.model.tensorflow_model)": [[45, "neural_compressor.model.tensorflow_model.keras_session"]], "load_saved_model() (in module neural_compressor.model.tensorflow_model)": [[45, "neural_compressor.model.tensorflow_model.load_saved_model"]], "neural_compressor.model.tensorflow_model": [[45, "module-neural_compressor.model.tensorflow_model"]], "saved_model_session() (in module neural_compressor.model.tensorflow_model)": [[45, "neural_compressor.model.tensorflow_model.saved_model_session"]], "slim_session() (in module neural_compressor.model.tensorflow_model)": [[45, "neural_compressor.model.tensorflow_model.slim_session"]], "try_loading_keras() (in module neural_compressor.model.tensorflow_model)": [[45, "neural_compressor.model.tensorflow_model.try_loading_keras"]], "validate_and_inference_input_output() (in module neural_compressor.model.tensorflow_model)": [[45, "neural_compressor.model.tensorflow_model.validate_and_inference_input_output"]], "validate_graph_node() (in module neural_compressor.model.tensorflow_model)": [[45, "neural_compressor.model.tensorflow_model.validate_graph_node"]], "ipexmodel (class in neural_compressor.model.torch_model)": [[46, "neural_compressor.model.torch_model.IPEXModel"]], "pytorchbasemodel (class in neural_compressor.model.torch_model)": [[46, "neural_compressor.model.torch_model.PyTorchBaseModel"]], "pytorchfxmodel (class in neural_compressor.model.torch_model)": [[46, "neural_compressor.model.torch_model.PyTorchFXModel"]], "pytorchmodel (class in neural_compressor.model.torch_model)": [[46, "neural_compressor.model.torch_model.PyTorchModel"]], "neural_compressor.model.torch_model": [[46, "module-neural_compressor.model.torch_model"]], "accuracy (class in neural_compressor.objective)": [[47, "neural_compressor.objective.Accuracy"]], "footprint (class in neural_compressor.objective)": [[47, "neural_compressor.objective.Footprint"]], "modelsize (class in neural_compressor.objective)": [[47, "neural_compressor.objective.ModelSize"]], "multiobjective (class in neural_compressor.objective)": [[47, "neural_compressor.objective.MultiObjective"]], "objective (class in neural_compressor.objective)": [[47, "neural_compressor.objective.Objective"]], "performance (class in neural_compressor.objective)": [[47, "neural_compressor.objective.Performance"]], "neural_compressor.objective": [[47, "module-neural_compressor.objective"]], "objective_custom_registry() (in module neural_compressor.objective)": [[47, "neural_compressor.objective.objective_custom_registry"]], "objective_registry() (in module neural_compressor.objective)": [[47, "neural_compressor.objective.objective_registry"]], "neural_compressor.profiling": [[48, "module-neural_compressor.profiling"]], "fit() (in module neural_compressor.quantization)": [[49, "neural_compressor.quantization.fit"]], "neural_compressor.quantization": [[49, "module-neural_compressor.quantization"]], "autotunestrategy (class in neural_compressor.strategy.auto)": [[50, "neural_compressor.strategy.auto.AutoTuneStrategy"]], "neural_compressor.strategy.auto": [[50, "module-neural_compressor.strategy.auto"]], "automixedprecisiontunestrategy (class in neural_compressor.strategy.auto_mixed_precision)": [[51, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[51, "module-neural_compressor.strategy.auto_mixed_precision"]], "basictunestrategy (class in neural_compressor.strategy.basic)": [[52, "neural_compressor.strategy.basic.BasicTuneStrategy"]], "neural_compressor.strategy.basic": [[52, "module-neural_compressor.strategy.basic"]], "bayesianoptimization (class in neural_compressor.strategy.bayesian)": [[53, "neural_compressor.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.strategy.bayesian)": [[53, "neural_compressor.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.strategy.bayesian)": [[53, "neural_compressor.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.strategy.bayesian)": [[53, "neural_compressor.strategy.bayesian.acq_max"]], "neural_compressor.strategy.bayesian": [[53, "module-neural_compressor.strategy.bayesian"]], "conservativetunestrategy (class in neural_compressor.strategy.conservative)": [[54, "neural_compressor.strategy.conservative.ConservativeTuneStrategy"]], "neural_compressor.strategy.conservative": [[54, "module-neural_compressor.strategy.conservative"]], "exhaustivetunestrategy (class in neural_compressor.strategy.exhaustive)": [[55, "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[55, "module-neural_compressor.strategy.exhaustive"]], "hawq_v2tunestrategy (class in neural_compressor.strategy.hawq_v2)": [[56, "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[56, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[57, "module-neural_compressor.strategy"]], "msetunestrategy (class in neural_compressor.strategy.mse)": [[58, "neural_compressor.strategy.mse.MSETuneStrategy"]], "neural_compressor.strategy.mse": [[58, "module-neural_compressor.strategy.mse"]], "mse_v2tunestrategy (class in neural_compressor.strategy.mse_v2)": [[59, "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.strategy.mse_v2": [[59, "module-neural_compressor.strategy.mse_v2"]], "randomtunestrategy (class in neural_compressor.strategy.random)": [[60, "neural_compressor.strategy.random.RandomTuneStrategy"]], "neural_compressor.strategy.random": [[60, "module-neural_compressor.strategy.random"]], "tunestrategy (class in neural_compressor.strategy.strategy)": [[61, "neural_compressor.strategy.strategy.TuneStrategy"]], "tunestrategymeta (class in neural_compressor.strategy.strategy)": [[61, "neural_compressor.strategy.strategy.TuneStrategyMeta"]], "neural_compressor.strategy.strategy": [[61, "module-neural_compressor.strategy.strategy"]], "strategy_registry() (in module neural_compressor.strategy.strategy)": [[61, "neural_compressor.strategy.strategy.strategy_registry"]], "neural_compressor.strategy.utils.constant": [[62, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[63, "module-neural_compressor.strategy.utils"]], "blockfallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[64, "neural_compressor.strategy.utils.tuning_sampler.BlockFallbackTuningSampler"]], "fallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[64, "neural_compressor.strategy.utils.tuning_sampler.FallbackTuningSampler"]], "lowerbitssampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[64, "neural_compressor.strategy.utils.tuning_sampler.LowerBitsSampler"]], "modelwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[64, "neural_compressor.strategy.utils.tuning_sampler.ModelWiseTuningSampler"]], "optypewisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[64, "neural_compressor.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler"]], "opwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[64, "neural_compressor.strategy.utils.tuning_sampler.OpWiseTuningSampler"]], "smoothquantsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[64, "neural_compressor.strategy.utils.tuning_sampler.SmoothQuantSampler"]], "tuningorder (class in neural_compressor.strategy.utils.tuning_sampler)": [[64, "neural_compressor.strategy.utils.tuning_sampler.TuningOrder"]], "tuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[64, "neural_compressor.strategy.utils.tuning_sampler.TuningSampler"]], "weightonlyquantsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[64, "neural_compressor.strategy.utils.tuning_sampler.WeightOnlyQuantSampler"]], "neural_compressor.strategy.utils.tuning_sampler": [[64, "module-neural_compressor.strategy.utils.tuning_sampler"]], "tuningitem (class in neural_compressor.strategy.utils.tuning_space)": [[65, "neural_compressor.strategy.utils.tuning_space.TuningItem"]], "tuningspace (class in neural_compressor.strategy.utils.tuning_space)": [[65, "neural_compressor.strategy.utils.tuning_space.TuningSpace"]], "initial_tuning_cfg_with_quant_mode() (in module neural_compressor.strategy.utils.tuning_space)": [[65, "neural_compressor.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode"]], "neural_compressor.strategy.utils.tuning_space": [[65, "module-neural_compressor.strategy.utils.tuning_space"]], "pattern_to_internal() (in module neural_compressor.strategy.utils.tuning_space)": [[65, "neural_compressor.strategy.utils.tuning_space.pattern_to_internal"]], "pattern_to_path() (in module neural_compressor.strategy.utils.tuning_space)": [[65, "neural_compressor.strategy.utils.tuning_space.pattern_to_path"]], "quant_mode_from_pattern() (in module neural_compressor.strategy.utils.tuning_space)": [[65, "neural_compressor.strategy.utils.tuning_space.quant_mode_from_pattern"]], "optuningconfig (class in neural_compressor.strategy.utils.tuning_structs)": [[66, "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig"]], "neural_compressor.strategy.utils.tuning_structs": [[66, "module-neural_compressor.strategy.utils.tuning_structs"]], "classregister (class in neural_compressor.strategy.utils.utility)": [[67, "neural_compressor.strategy.utils.utility.ClassRegister"]], "ordereddefaultdict (class in neural_compressor.strategy.utils.utility)": [[67, "neural_compressor.strategy.utils.utility.OrderedDefaultDict"]], "quantoptions (class in neural_compressor.strategy.utils.utility)": [[67, "neural_compressor.strategy.utils.utility.QuantOptions"]], "quanttype (class in neural_compressor.strategy.utils.utility)": [[67, "neural_compressor.strategy.utils.utility.QuantType"]], "build_slave_faker_model() (in module neural_compressor.strategy.utils.utility)": [[67, "neural_compressor.strategy.utils.utility.build_slave_faker_model"]], "extract_data_type() (in module neural_compressor.strategy.utils.utility)": [[67, "neural_compressor.strategy.utils.utility.extract_data_type"]], "get_adaptor_name() (in module neural_compressor.strategy.utils.utility)": [[67, "neural_compressor.strategy.utils.utility.get_adaptor_name"]], "neural_compressor.strategy.utils.utility": [[67, "module-neural_compressor.strategy.utils.utility"]], "preprocess_user_cfg() (in module neural_compressor.strategy.utils.utility)": [[67, "neural_compressor.strategy.utils.utility.preprocess_user_cfg"]], "reverted_data_type() (in module neural_compressor.strategy.utils.utility)": [[67, "neural_compressor.strategy.utils.utility.reverted_data_type"]], "callbacks (class in neural_compressor.training)": [[68, "neural_compressor.training.CallBacks"]], "compressionmanager (class in neural_compressor.training)": [[68, "neural_compressor.training.CompressionManager"]], "fit() (in module neural_compressor.training)": [[68, "neural_compressor.training.fit"]], "neural_compressor.training": [[68, "module-neural_compressor.training"]], "prepare_compression() (in module neural_compressor.training)": [[68, "neural_compressor.training.prepare_compression"]], "layerhistogramcollector (class in neural_compressor.utils.collect_layer_histogram)": [[69, "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector"]], "neural_compressor.utils.collect_layer_histogram": [[69, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[70, "module-neural_compressor.utils.constant"]], "create_dataloader() (in module neural_compressor.utils.create_obj_from_config)": [[71, "neural_compressor.utils.create_obj_from_config.create_dataloader"]], "create_dataset() (in module neural_compressor.utils.create_obj_from_config)": [[71, "neural_compressor.utils.create_obj_from_config.create_dataset"]], "create_eval_func() (in module neural_compressor.utils.create_obj_from_config)": [[71, "neural_compressor.utils.create_obj_from_config.create_eval_func"]], "create_train_func() (in module neural_compressor.utils.create_obj_from_config)": [[71, "neural_compressor.utils.create_obj_from_config.create_train_func"]], "get_algorithm() (in module neural_compressor.utils.create_obj_from_config)": [[71, "neural_compressor.utils.create_obj_from_config.get_algorithm"]], "get_func_from_config() (in module neural_compressor.utils.create_obj_from_config)": [[71, "neural_compressor.utils.create_obj_from_config.get_func_from_config"]], "get_metrics() (in module neural_compressor.utils.create_obj_from_config)": [[71, "neural_compressor.utils.create_obj_from_config.get_metrics"]], "get_postprocess() (in module neural_compressor.utils.create_obj_from_config)": [[71, "neural_compressor.utils.create_obj_from_config.get_postprocess"]], "get_preprocess() (in module neural_compressor.utils.create_obj_from_config)": [[71, "neural_compressor.utils.create_obj_from_config.get_preprocess"]], "neural_compressor.utils.create_obj_from_config": [[71, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils.export": [[72, "module-neural_compressor.utils.export"]], "check_model() (in module neural_compressor.utils.export.qlinear2qdq)": [[73, "neural_compressor.utils.export.qlinear2qdq.check_model"]], "neural_compressor.utils.export.qlinear2qdq": [[73, "module-neural_compressor.utils.export.qlinear2qdq"]], "onnx_qlinear_to_qdq() (in module neural_compressor.utils.export.qlinear2qdq)": [[73, "neural_compressor.utils.export.qlinear2qdq.onnx_qlinear_to_qdq"]], "neural_compressor.utils.export.tf2onnx": [[74, "module-neural_compressor.utils.export.tf2onnx"]], "tf_to_fp32_onnx() (in module neural_compressor.utils.export.tf2onnx)": [[74, "neural_compressor.utils.export.tf2onnx.tf_to_fp32_onnx"]], "tf_to_int8_onnx() (in module neural_compressor.utils.export.tf2onnx)": [[74, "neural_compressor.utils.export.tf2onnx.tf_to_int8_onnx"]], "dynamic_quant_export() (in module neural_compressor.utils.export.torch2onnx)": [[75, "neural_compressor.utils.export.torch2onnx.dynamic_quant_export"]], "get_node_mapping() (in module neural_compressor.utils.export.torch2onnx)": [[75, "neural_compressor.utils.export.torch2onnx.get_node_mapping"]], "get_quantizable_onnx_ops() (in module neural_compressor.utils.export.torch2onnx)": [[75, "neural_compressor.utils.export.torch2onnx.get_quantizable_onnx_ops"]], "neural_compressor.utils.export.torch2onnx": [[75, "module-neural_compressor.utils.export.torch2onnx"]], "static_quant_export() (in module neural_compressor.utils.export.torch2onnx)": [[75, "neural_compressor.utils.export.torch2onnx.static_quant_export"]], "torch_to_fp32_onnx() (in module neural_compressor.utils.export.torch2onnx)": [[75, "neural_compressor.utils.export.torch2onnx.torch_to_fp32_onnx"]], "torch_to_int8_onnx() (in module neural_compressor.utils.export.torch2onnx)": [[75, "neural_compressor.utils.export.torch2onnx.torch_to_int8_onnx"]], "neural_compressor.utils": [[76, "module-neural_compressor.utils"]], "kl_divergence (class in neural_compressor.utils.kl_divergence)": [[77, "neural_compressor.utils.kl_divergence.KL_Divergence"]], "neural_compressor.utils.kl_divergence": [[77, "module-neural_compressor.utils.kl_divergence"]], "optimizedmodel (class in neural_compressor.utils.load_huggingface)": [[78, "neural_compressor.utils.load_huggingface.OptimizedModel"]], "export_compressed_model() (in module neural_compressor.utils.load_huggingface)": [[78, "neural_compressor.utils.load_huggingface.export_compressed_model"]], "neural_compressor.utils.load_huggingface": [[78, "module-neural_compressor.utils.load_huggingface"]], "save_for_huggingface_upstream() (in module neural_compressor.utils.load_huggingface)": [[78, "neural_compressor.utils.load_huggingface.save_for_huggingface_upstream"]], "logger (class in neural_compressor.utils.logger)": [[79, "neural_compressor.utils.logger.Logger"]], "debug() (in module neural_compressor.utils.logger)": [[79, "neural_compressor.utils.logger.debug"]], "error() (in module neural_compressor.utils.logger)": [[79, "neural_compressor.utils.logger.error"]], "fatal() (in module neural_compressor.utils.logger)": [[79, "neural_compressor.utils.logger.fatal"]], "info() (in module neural_compressor.utils.logger)": [[79, "neural_compressor.utils.logger.info"]], "log() (in module neural_compressor.utils.logger)": [[79, "neural_compressor.utils.logger.log"]], "neural_compressor.utils.logger": [[79, "module-neural_compressor.utils.logger"]], "warn() (in module neural_compressor.utils.logger)": [[79, "neural_compressor.utils.logger.warn"]], "warning() (in module neural_compressor.utils.logger)": [[79, "neural_compressor.utils.logger.warning"]], "get_model_path() (in module neural_compressor.utils.neural_insights_utils)": [[80, "neural_compressor.utils.neural_insights_utils.get_model_path"]], "neural_compressor.utils.neural_insights_utils": [[80, "module-neural_compressor.utils.neural_insights_utils"]], "register_neural_insights_workload() (in module neural_compressor.utils.neural_insights_utils)": [[80, "neural_compressor.utils.neural_insights_utils.register_neural_insights_workload"]], "update_neural_insights_workload() (in module neural_compressor.utils.neural_insights_utils)": [[80, "neural_compressor.utils.neural_insights_utils.update_neural_insights_workload"]], "update_neural_insights_workload_accuracy_data() (in module neural_compressor.utils.neural_insights_utils)": [[80, "neural_compressor.utils.neural_insights_utils.update_neural_insights_workload_accuracy_data"]], "neural_compressor.utils.options": [[81, "module-neural_compressor.utils.options"]], "onnxrt (class in neural_compressor.utils.options)": [[81, "neural_compressor.utils.options.onnxrt"]], "is_int8_model() (in module neural_compressor.utils.pytorch)": [[82, "neural_compressor.utils.pytorch.is_int8_model"]], "load() (in module neural_compressor.utils.pytorch)": [[82, "neural_compressor.utils.pytorch.load"]], "load_weight_only() (in module neural_compressor.utils.pytorch)": [[82, "neural_compressor.utils.pytorch.load_weight_only"]], "neural_compressor.utils.pytorch": [[82, "module-neural_compressor.utils.pytorch"]], "recover_model_from_json() (in module neural_compressor.utils.pytorch)": [[82, "neural_compressor.utils.pytorch.recover_model_from_json"]], "captureoutputtofile (class in neural_compressor.utils.utility)": [[83, "neural_compressor.utils.utility.CaptureOutputToFile"]], "cpuinfo (class in neural_compressor.utils.utility)": [[83, "neural_compressor.utils.utility.CpuInfo"]], "dequantize() (in module neural_compressor.utils.utility)": [[83, "neural_compressor.utils.utility.Dequantize"]], "dotdict (class in neural_compressor.utils.utility)": [[83, "neural_compressor.utils.utility.DotDict"]], "global_state (class in neural_compressor.utils.utility)": [[83, "neural_compressor.utils.utility.GLOBAL_STATE"]], "lazyimport (class in neural_compressor.utils.utility)": [[83, "neural_compressor.utils.utility.LazyImport"]], "mode (class in neural_compressor.utils.utility)": [[83, "neural_compressor.utils.utility.MODE"]], "opentry (class in neural_compressor.utils.utility)": [[83, "neural_compressor.utils.utility.OpEntry"]], "statistics (class in neural_compressor.utils.utility)": [[83, "neural_compressor.utils.utility.Statistics"]], "alias_param() (in module neural_compressor.utils.utility)": [[83, "neural_compressor.utils.utility.alias_param"]], "calculate_mse() (in module neural_compressor.utils.utility)": [[83, "neural_compressor.utils.utility.calculate_mse"]], "check_key_exist() (in module neural_compressor.utils.utility)": [[83, "neural_compressor.utils.utility.check_key_exist"]], "combine_histogram() (in module neural_compressor.utils.utility)": [[83, "neural_compressor.utils.utility.combine_histogram"]], "compare_objects() (in module neural_compressor.utils.utility)": [[83, "neural_compressor.utils.utility.compare_objects"]], "compute_sparsity() (in module neural_compressor.utils.utility)": [[83, "neural_compressor.utils.utility.compute_sparsity"]], "deep_get() (in module neural_compressor.utils.utility)": [[83, "neural_compressor.utils.utility.deep_get"]], "deep_set() (in module neural_compressor.utils.utility)": [[83, "neural_compressor.utils.utility.deep_set"]], "dequantize_weight() (in module neural_compressor.utils.utility)": [[83, "neural_compressor.utils.utility.dequantize_weight"]], "dump_class_attrs() (in module neural_compressor.utils.utility)": [[83, "neural_compressor.utils.utility.dump_class_attrs"]], "dump_data_to_local() (in module neural_compressor.utils.utility)": [[83, "neural_compressor.utils.utility.dump_data_to_local"]], "dump_elapsed_time() (in module neural_compressor.utils.utility)": [[83, "neural_compressor.utils.utility.dump_elapsed_time"]], "dump_table() (in module neural_compressor.utils.utility)": [[83, "neural_compressor.utils.utility.dump_table"]], "dump_table_to_csv() (in module neural_compressor.utils.utility)": [[83, "neural_compressor.utils.utility.dump_table_to_csv"]], "equal_dicts() (in module neural_compressor.utils.utility)": [[83, "neural_compressor.utils.utility.equal_dicts"]], "fault_tolerant_file() (in module neural_compressor.utils.utility)": [[83, "neural_compressor.utils.utility.fault_tolerant_file"]], "get_all_fp32_data() (in module neural_compressor.utils.utility)": [[83, "neural_compressor.utils.utility.get_all_fp32_data"]], "get_number_of_sockets() (in module neural_compressor.utils.utility)": [[83, "neural_compressor.utils.utility.get_number_of_sockets"]], "get_op_list() (in module neural_compressor.utils.utility)": [[83, "neural_compressor.utils.utility.get_op_list"]], "get_size() (in module neural_compressor.utils.utility)": [[83, "neural_compressor.utils.utility.get_size"]], "get_tensor_histogram() (in module neural_compressor.utils.utility)": [[83, "neural_compressor.utils.utility.get_tensor_histogram"]], "get_tensors_info() (in module neural_compressor.utils.utility)": [[83, "neural_compressor.utils.utility.get_tensors_info"]], "get_tuning_history() (in module neural_compressor.utils.utility)": [[83, "neural_compressor.utils.utility.get_tuning_history"]], "get_weights_details() (in module neural_compressor.utils.utility)": [[83, "neural_compressor.utils.utility.get_weights_details"]], "load_data_from_pkl() (in module neural_compressor.utils.utility)": [[83, "neural_compressor.utils.utility.load_data_from_pkl"]], "mse_metric_gap() (in module neural_compressor.utils.utility)": [[83, "neural_compressor.utils.utility.mse_metric_gap"]], "neural_compressor.utils.utility": [[83, "module-neural_compressor.utils.utility"]], "print_op_list() (in module neural_compressor.utils.utility)": [[83, "neural_compressor.utils.utility.print_op_list"]], "print_table() (in module neural_compressor.utils.utility)": [[83, "neural_compressor.utils.utility.print_table"]], "recover() (in module neural_compressor.utils.utility)": [[83, "neural_compressor.utils.utility.recover"]], "set_random_seed() (in module neural_compressor.utils.utility)": [[83, "neural_compressor.utils.utility.set_random_seed"]], "set_resume_from() (in module neural_compressor.utils.utility)": [[83, "neural_compressor.utils.utility.set_resume_from"]], "set_tensorboard() (in module neural_compressor.utils.utility)": [[83, "neural_compressor.utils.utility.set_tensorboard"]], "set_workspace() (in module neural_compressor.utils.utility)": [[83, "neural_compressor.utils.utility.set_workspace"]], "show_memory_info() (in module neural_compressor.utils.utility)": [[83, "neural_compressor.utils.utility.show_memory_info"]], "singleton() (in module neural_compressor.utils.utility)": [[83, "neural_compressor.utils.utility.singleton"]], "str2array() (in module neural_compressor.utils.utility)": [[83, "neural_compressor.utils.utility.str2array"]], "time_limit() (in module neural_compressor.utils.utility)": [[83, "neural_compressor.utils.utility.time_limit"]], "version1_eq_version2() (in module neural_compressor.utils.utility)": [[83, "neural_compressor.utils.utility.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.utils.utility)": [[83, "neural_compressor.utils.utility.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.utils.utility)": [[83, "neural_compressor.utils.utility.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.utils.utility)": [[83, "neural_compressor.utils.utility.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.utils.utility)": [[83, "neural_compressor.utils.utility.version1_lte_version2"]], "weightsdetails (class in neural_compressor.utils.weights_details)": [[84, "neural_compressor.utils.weights_details.WeightsDetails"]], "weightsstatistics (class in neural_compressor.utils.weights_details)": [[84, "neural_compressor.utils.weights_details.WeightsStatistics"]], "neural_compressor.utils.weights_details": [[84, "module-neural_compressor.utils.weights_details"]], "neural_compressor.version": [[85, "module-neural_compressor.version"]]}})