Search.setIndex({"docnames": ["autoapi/block_mask/index", "autoapi/neural_compressor/algorithm/algorithm/index", "autoapi/neural_compressor/algorithm/fast_bias_correction/index", "autoapi/neural_compressor/algorithm/index", "autoapi/neural_compressor/algorithm/smooth_quant/index", "autoapi/neural_compressor/algorithm/weight_correction/index", "autoapi/neural_compressor/benchmark/index", "autoapi/neural_compressor/config/index", "autoapi/neural_compressor/contrib/index", "autoapi/neural_compressor/contrib/strategy/index", "autoapi/neural_compressor/contrib/strategy/sigopt/index", "autoapi/neural_compressor/contrib/strategy/tpe/index", "autoapi/neural_compressor/data/datasets/bert_dataset/index", "autoapi/neural_compressor/data/datasets/coco_dataset/index", "autoapi/neural_compressor/data/datasets/dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/data/datasets/index", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/data/filters/coco_filter/index", "autoapi/neural_compressor/data/filters/filter/index", "autoapi/neural_compressor/data/filters/index", "autoapi/neural_compressor/data/index", "autoapi/neural_compressor/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/data/transforms/index", "autoapi/neural_compressor/data/transforms/postprocess/index", "autoapi/neural_compressor/data/transforms/tokenization/index", "autoapi/neural_compressor/data/transforms/transform/index", "autoapi/neural_compressor/experimental/benchmark/index", "autoapi/neural_compressor/experimental/common/criterion/index", "autoapi/neural_compressor/experimental/common/dataloader/index", "autoapi/neural_compressor/experimental/common/index", "autoapi/neural_compressor/experimental/common/metric/index", "autoapi/neural_compressor/experimental/common/model/index", "autoapi/neural_compressor/experimental/common/optimizer/index", "autoapi/neural_compressor/experimental/common/postprocess/index", "autoapi/neural_compressor/experimental/common/torch_utils/index", "autoapi/neural_compressor/experimental/component/index", "autoapi/neural_compressor/experimental/compression/index", "autoapi/neural_compressor/experimental/contrib/index", "autoapi/neural_compressor/experimental/contrib/strategy/index", "autoapi/neural_compressor/experimental/contrib/strategy/sigopt/index", "autoapi/neural_compressor/experimental/contrib/strategy/tpe/index", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index", "autoapi/neural_compressor/experimental/data/dataloaders/index", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/index", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index", "autoapi/neural_compressor/experimental/data/filters/filter/index", "autoapi/neural_compressor/experimental/data/filters/index", "autoapi/neural_compressor/experimental/data/index", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/experimental/data/transforms/index", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index", "autoapi/neural_compressor/experimental/data/transforms/transform/index", "autoapi/neural_compressor/experimental/distillation/index", "autoapi/neural_compressor/experimental/export/index", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index", "autoapi/neural_compressor/experimental/export/tf2onnx/index", "autoapi/neural_compressor/experimental/export/torch2onnx/index", "autoapi/neural_compressor/experimental/graph_optimization/index", "autoapi/neural_compressor/experimental/index", "autoapi/neural_compressor/experimental/metric/bleu/index", "autoapi/neural_compressor/experimental/metric/bleu_util/index", "autoapi/neural_compressor/experimental/metric/coco_label_map/index", "autoapi/neural_compressor/experimental/metric/coco_tools/index", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index", "autoapi/neural_compressor/experimental/metric/f1/index", "autoapi/neural_compressor/experimental/metric/index", "autoapi/neural_compressor/experimental/metric/metric/index", "autoapi/neural_compressor/experimental/mixed_precision/index", "autoapi/neural_compressor/experimental/model_conversion/index", "autoapi/neural_compressor/experimental/nas/basic_nas/index", "autoapi/neural_compressor/experimental/nas/dynas/index", "autoapi/neural_compressor/experimental/nas/index", "autoapi/neural_compressor/experimental/nas/nas/index", "autoapi/neural_compressor/experimental/nas/nas_utils/index", "autoapi/neural_compressor/experimental/nas/search_algorithms/index", "autoapi/neural_compressor/experimental/pruner_legacy/gradient_sensitivity/index", "autoapi/neural_compressor/experimental/pruner_legacy/group_lasso/index", "autoapi/neural_compressor/experimental/pruner_legacy/index", "autoapi/neural_compressor/experimental/pruner_legacy/magnitude/index", "autoapi/neural_compressor/experimental/pruner_legacy/pattern_lock/index", "autoapi/neural_compressor/experimental/pruner_legacy/pruner/index", "autoapi/neural_compressor/experimental/pruning/index", "autoapi/neural_compressor/experimental/pruning_recipes/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index", "autoapi/neural_compressor/experimental/pruning_v2/index", "autoapi/neural_compressor/experimental/pytorch_pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index", "autoapi/neural_compressor/experimental/quantization/index", "autoapi/neural_compressor/experimental/scheduler/index", "autoapi/neural_compressor/experimental/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/experimental/strategy/basic/index", "autoapi/neural_compressor/experimental/strategy/bayesian/index", "autoapi/neural_compressor/experimental/strategy/exhaustive/index", "autoapi/neural_compressor/experimental/strategy/index", "autoapi/neural_compressor/experimental/strategy/mse/index", "autoapi/neural_compressor/experimental/strategy/mse_v2/index", "autoapi/neural_compressor/experimental/strategy/random/index", "autoapi/neural_compressor/experimental/strategy/strategy/index", "autoapi/neural_compressor/experimental/strategy/utils/constant/index", "autoapi/neural_compressor/experimental/strategy/utils/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_space/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/experimental/strategy/utils/utility/index", "autoapi/neural_compressor/index", "autoapi/neural_compressor/metric/bleu/index", "autoapi/neural_compressor/metric/bleu_util/index", "autoapi/neural_compressor/metric/coco_label_map/index", "autoapi/neural_compressor/metric/coco_tools/index", "autoapi/neural_compressor/metric/evaluate_squad/index", "autoapi/neural_compressor/metric/f1/index", "autoapi/neural_compressor/metric/index", "autoapi/neural_compressor/metric/metric/index", "autoapi/neural_compressor/mix_precision/index", "autoapi/neural_compressor/model/base_model/index", "autoapi/neural_compressor/model/index", "autoapi/neural_compressor/model/keras_model/index", "autoapi/neural_compressor/model/model/index", "autoapi/neural_compressor/model/mxnet_model/index", "autoapi/neural_compressor/model/nets_factory/index", "autoapi/neural_compressor/model/onnx_model/index", "autoapi/neural_compressor/model/tensorflow_model/index", "autoapi/neural_compressor/model/torch_model/index", "autoapi/neural_compressor/objective/index", "autoapi/neural_compressor/profiling/index", "autoapi/neural_compressor/quantization/index", "autoapi/neural_compressor/strategy/auto/index", "autoapi/neural_compressor/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/strategy/basic/index", "autoapi/neural_compressor/strategy/bayesian/index", "autoapi/neural_compressor/strategy/conservative/index", "autoapi/neural_compressor/strategy/exhaustive/index", "autoapi/neural_compressor/strategy/hawq_v2/index", "autoapi/neural_compressor/strategy/index", "autoapi/neural_compressor/strategy/mse/index", "autoapi/neural_compressor/strategy/mse_v2/index", "autoapi/neural_compressor/strategy/random/index", "autoapi/neural_compressor/strategy/strategy/index", "autoapi/neural_compressor/strategy/utils/constant/index", "autoapi/neural_compressor/strategy/utils/index", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/strategy/utils/tuning_space/index", "autoapi/neural_compressor/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/strategy/utils/utility/index", "autoapi/neural_compressor/training/index", "autoapi/neural_compressor/utils/collect_layer_histogram/index", "autoapi/neural_compressor/utils/constant/index", "autoapi/neural_compressor/utils/create_obj_from_config/index", "autoapi/neural_compressor/utils/index", "autoapi/neural_compressor/utils/kl_divergence/index", "autoapi/neural_compressor/utils/load_huggingface/index", "autoapi/neural_compressor/utils/logger/index", "autoapi/neural_compressor/utils/neural_insights_utils/index", "autoapi/neural_compressor/utils/options/index", "autoapi/neural_compressor/utils/pytorch/index", "autoapi/neural_compressor/utils/utility/index", "autoapi/neural_compressor/utils/weights_details/index", "autoapi/neural_compressor/version/index", "docs/3x/TF_Quant", "docs/3x/TF_SQ", "docs/3x/TensorFlow", "docs/3x/autotune", "docs/3x/quantization", "docs/build_docs/source/index", "docs/source/CODE_OF_CONDUCT", "docs/source/CONTRIBUTING", "docs/source/FX", "docs/source/NAS", "docs/source/SECURITY", "docs/source/Welcome", "docs/source/adaptor", "docs/source/add_new_adaptor", "docs/source/add_new_data_type", "docs/source/api-doc/adaptor", "docs/source/api-doc/adaptor/onnxrt", "docs/source/api-doc/adaptor/torch_utils", "docs/source/api-doc/api_doc_example", "docs/source/api-doc/apis", "docs/source/api-doc/benchmark", "docs/source/api-doc/compression", "docs/source/api-doc/config", "docs/source/api-doc/mix_precision", "docs/source/api-doc/model", "docs/source/api-doc/objective", "docs/source/api-doc/quantization", "docs/source/api-doc/strategy", "docs/source/api-doc/training", "docs/source/benchmark", "docs/source/calibration", "docs/source/coding_style", "docs/source/dataloader", "docs/source/dataset", "docs/source/design", "docs/source/diagnosis", "docs/source/distillation", "docs/source/distillation_quantization", "docs/source/distributed", "docs/source/examples_readme", "docs/source/export", "docs/source/faq", "docs/source/framework_yaml", "docs/source/get_started", "docs/source/incompatible_changes", "docs/source/infrastructure", "docs/source/installation_guide", "docs/source/legal_information", "docs/source/llm_recipes", "docs/source/metric", "docs/source/migration", "docs/source/mixed_precision", "docs/source/model", "docs/source/mx_quantization", "docs/source/neural_coder/README", "docs/source/neural_coder/docs/AWSSageMakerSupport", "docs/source/neural_coder/docs/BigDLNanoSupport", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting", "docs/source/neural_coder/docs/PythonAPI", "docs/source/neural_coder/docs/PythonLauncher", "docs/source/neural_coder/docs/Quantization", "docs/source/neural_coder/docs/SupportMatrix", "docs/source/neural_coder/docs/release_notes/v0.4", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart", "docs/source/neural_insights/README", "docs/source/neural_insights/docs/source/onnx_accuracy_debug", "docs/source/neural_insights/docs/source/pytorch_nlp_cli_mode", "docs/source/neural_insights/docs/source/tf_accuracy_debug", "docs/source/neural_insights/gui/README", "docs/source/neural_solution/README", "docs/source/neural_solution/docs/source/README", "docs/source/neural_solution/docs/source/description_api", "docs/source/neural_solution/docs/source/ns_design_doc", "docs/source/neural_solution/docs/source/template/task_request_description", "docs/source/neural_solution/examples/README", "docs/source/neural_solution/examples/custom_models_optimized/tf_example1/README", "docs/source/neural_solution/examples/hf_models/README", "docs/source/neural_solution/examples/hf_models_grpc/README", "docs/source/neural_solution/frontend/README", "docs/source/objective", "docs/source/orchestration", "docs/source/pruning", "docs/source/publication_list", "docs/source/pythonic_style", "docs/source/quantization", "docs/source/quantization_layer_wise", "docs/source/quantization_mixed_precision", "docs/source/quantization_weight_only", "docs/source/releases_info", "docs/source/sigopt_strategy", "docs/source/smooth_quant", "docs/source/tensorboard", "docs/source/transform", "docs/source/tuning_strategies", "docs/source/user_guide", "docs/source/user_yaml", "docs/source/validated_model_list", "index"], "filenames": ["autoapi/block_mask/index.rst", "autoapi/neural_compressor/algorithm/algorithm/index.rst", "autoapi/neural_compressor/algorithm/fast_bias_correction/index.rst", "autoapi/neural_compressor/algorithm/index.rst", "autoapi/neural_compressor/algorithm/smooth_quant/index.rst", "autoapi/neural_compressor/algorithm/weight_correction/index.rst", "autoapi/neural_compressor/benchmark/index.rst", "autoapi/neural_compressor/config/index.rst", "autoapi/neural_compressor/contrib/index.rst", "autoapi/neural_compressor/contrib/strategy/index.rst", "autoapi/neural_compressor/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/data/datasets/index.rst", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/data/filters/filter/index.rst", "autoapi/neural_compressor/data/filters/index.rst", "autoapi/neural_compressor/data/index.rst", "autoapi/neural_compressor/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/data/transforms/index.rst", "autoapi/neural_compressor/data/transforms/postprocess/index.rst", "autoapi/neural_compressor/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/benchmark/index.rst", "autoapi/neural_compressor/experimental/common/criterion/index.rst", "autoapi/neural_compressor/experimental/common/dataloader/index.rst", "autoapi/neural_compressor/experimental/common/index.rst", "autoapi/neural_compressor/experimental/common/metric/index.rst", "autoapi/neural_compressor/experimental/common/model/index.rst", "autoapi/neural_compressor/experimental/common/optimizer/index.rst", "autoapi/neural_compressor/experimental/common/postprocess/index.rst", "autoapi/neural_compressor/experimental/common/torch_utils/index.rst", "autoapi/neural_compressor/experimental/component/index.rst", "autoapi/neural_compressor/experimental/compression/index.rst", "autoapi/neural_compressor/experimental/contrib/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/index.rst", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/index.rst", "autoapi/neural_compressor/experimental/data/index.rst", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/experimental/data/transforms/index.rst", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/experimental/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/distillation/index.rst", "autoapi/neural_compressor/experimental/export/index.rst", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index.rst", "autoapi/neural_compressor/experimental/export/tf2onnx/index.rst", "autoapi/neural_compressor/experimental/export/torch2onnx/index.rst", "autoapi/neural_compressor/experimental/graph_optimization/index.rst", "autoapi/neural_compressor/experimental/index.rst", "autoapi/neural_compressor/experimental/metric/bleu/index.rst", "autoapi/neural_compressor/experimental/metric/bleu_util/index.rst", "autoapi/neural_compressor/experimental/metric/coco_label_map/index.rst", "autoapi/neural_compressor/experimental/metric/coco_tools/index.rst", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/experimental/metric/f1/index.rst", "autoapi/neural_compressor/experimental/metric/index.rst", "autoapi/neural_compressor/experimental/metric/metric/index.rst", "autoapi/neural_compressor/experimental/mixed_precision/index.rst", "autoapi/neural_compressor/experimental/model_conversion/index.rst", "autoapi/neural_compressor/experimental/nas/basic_nas/index.rst", "autoapi/neural_compressor/experimental/nas/dynas/index.rst", "autoapi/neural_compressor/experimental/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas_utils/index.rst", "autoapi/neural_compressor/experimental/nas/search_algorithms/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/gradient_sensitivity/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/group_lasso/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/magnitude/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/pattern_lock/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/pruner/index.rst", "autoapi/neural_compressor/experimental/pruning/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_v2/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index.rst", "autoapi/neural_compressor/experimental/quantization/index.rst", "autoapi/neural_compressor/experimental/scheduler/index.rst", "autoapi/neural_compressor/experimental/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/experimental/strategy/basic/index.rst", "autoapi/neural_compressor/experimental/strategy/bayesian/index.rst", "autoapi/neural_compressor/experimental/strategy/exhaustive/index.rst", "autoapi/neural_compressor/experimental/strategy/index.rst", "autoapi/neural_compressor/experimental/strategy/mse/index.rst", "autoapi/neural_compressor/experimental/strategy/mse_v2/index.rst", "autoapi/neural_compressor/experimental/strategy/random/index.rst", "autoapi/neural_compressor/experimental/strategy/strategy/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/constant/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/utility/index.rst", "autoapi/neural_compressor/index.rst", "autoapi/neural_compressor/metric/bleu/index.rst", "autoapi/neural_compressor/metric/bleu_util/index.rst", "autoapi/neural_compressor/metric/coco_label_map/index.rst", "autoapi/neural_compressor/metric/coco_tools/index.rst", "autoapi/neural_compressor/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/metric/f1/index.rst", "autoapi/neural_compressor/metric/index.rst", "autoapi/neural_compressor/metric/metric/index.rst", "autoapi/neural_compressor/mix_precision/index.rst", "autoapi/neural_compressor/model/base_model/index.rst", "autoapi/neural_compressor/model/index.rst", "autoapi/neural_compressor/model/keras_model/index.rst", "autoapi/neural_compressor/model/model/index.rst", "autoapi/neural_compressor/model/mxnet_model/index.rst", "autoapi/neural_compressor/model/nets_factory/index.rst", "autoapi/neural_compressor/model/onnx_model/index.rst", "autoapi/neural_compressor/model/tensorflow_model/index.rst", "autoapi/neural_compressor/model/torch_model/index.rst", "autoapi/neural_compressor/objective/index.rst", "autoapi/neural_compressor/profiling/index.rst", "autoapi/neural_compressor/quantization/index.rst", "autoapi/neural_compressor/strategy/auto/index.rst", "autoapi/neural_compressor/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/strategy/basic/index.rst", "autoapi/neural_compressor/strategy/bayesian/index.rst", "autoapi/neural_compressor/strategy/conservative/index.rst", "autoapi/neural_compressor/strategy/exhaustive/index.rst", "autoapi/neural_compressor/strategy/hawq_v2/index.rst", "autoapi/neural_compressor/strategy/index.rst", "autoapi/neural_compressor/strategy/mse/index.rst", "autoapi/neural_compressor/strategy/mse_v2/index.rst", "autoapi/neural_compressor/strategy/random/index.rst", "autoapi/neural_compressor/strategy/strategy/index.rst", "autoapi/neural_compressor/strategy/utils/constant/index.rst", "autoapi/neural_compressor/strategy/utils/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/strategy/utils/utility/index.rst", "autoapi/neural_compressor/training/index.rst", "autoapi/neural_compressor/utils/collect_layer_histogram/index.rst", "autoapi/neural_compressor/utils/constant/index.rst", "autoapi/neural_compressor/utils/create_obj_from_config/index.rst", "autoapi/neural_compressor/utils/index.rst", "autoapi/neural_compressor/utils/kl_divergence/index.rst", "autoapi/neural_compressor/utils/load_huggingface/index.rst", "autoapi/neural_compressor/utils/logger/index.rst", "autoapi/neural_compressor/utils/neural_insights_utils/index.rst", "autoapi/neural_compressor/utils/options/index.rst", "autoapi/neural_compressor/utils/pytorch/index.rst", "autoapi/neural_compressor/utils/utility/index.rst", "autoapi/neural_compressor/utils/weights_details/index.rst", "autoapi/neural_compressor/version/index.rst", "docs/3x/TF_Quant.md", "docs/3x/TF_SQ.md", "docs/3x/TensorFlow.md", "docs/3x/autotune.md", "docs/3x/quantization.md", "docs/build_docs/source/index.rst", "docs/source/CODE_OF_CONDUCT.md", "docs/source/CONTRIBUTING.md", "docs/source/FX.md", "docs/source/NAS.md", "docs/source/SECURITY.md", "docs/source/Welcome.md", "docs/source/adaptor.md", "docs/source/add_new_adaptor.md", "docs/source/add_new_data_type.md", "docs/source/api-doc/adaptor.rst", "docs/source/api-doc/adaptor/onnxrt.rst", "docs/source/api-doc/adaptor/torch_utils.rst", "docs/source/api-doc/api_doc_example.rst", "docs/source/api-doc/apis.rst", "docs/source/api-doc/benchmark.rst", "docs/source/api-doc/compression.rst", "docs/source/api-doc/config.rst", "docs/source/api-doc/mix_precision.rst", "docs/source/api-doc/model.rst", "docs/source/api-doc/objective.rst", "docs/source/api-doc/quantization.rst", "docs/source/api-doc/strategy.rst", "docs/source/api-doc/training.rst", "docs/source/benchmark.md", "docs/source/calibration.md", "docs/source/coding_style.md", "docs/source/dataloader.md", "docs/source/dataset.md", "docs/source/design.md", "docs/source/diagnosis.md", "docs/source/distillation.md", "docs/source/distillation_quantization.md", "docs/source/distributed.md", "docs/source/examples_readme.md", "docs/source/export.md", "docs/source/faq.md", "docs/source/framework_yaml.md", "docs/source/get_started.md", "docs/source/incompatible_changes.md", "docs/source/infrastructure.md", "docs/source/installation_guide.md", "docs/source/legal_information.md", "docs/source/llm_recipes.md", "docs/source/metric.md", "docs/source/migration.md", "docs/source/mixed_precision.md", "docs/source/model.md", "docs/source/mx_quantization.md", "docs/source/neural_coder/README.md", "docs/source/neural_coder/docs/AWSSageMakerSupport.md", "docs/source/neural_coder/docs/BigDLNanoSupport.md", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting.md", "docs/source/neural_coder/docs/PythonAPI.md", "docs/source/neural_coder/docs/PythonLauncher.md", "docs/source/neural_coder/docs/Quantization.md", "docs/source/neural_coder/docs/SupportMatrix.md", "docs/source/neural_coder/docs/release_notes/v0.4.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart.md", "docs/source/neural_insights/README.md", "docs/source/neural_insights/docs/source/onnx_accuracy_debug.md", "docs/source/neural_insights/docs/source/pytorch_nlp_cli_mode.md", "docs/source/neural_insights/docs/source/tf_accuracy_debug.md", "docs/source/neural_insights/gui/README.md", "docs/source/neural_solution/README.md", "docs/source/neural_solution/docs/source/README.md", "docs/source/neural_solution/docs/source/description_api.md", "docs/source/neural_solution/docs/source/ns_design_doc.md", "docs/source/neural_solution/docs/source/template/task_request_description.md", "docs/source/neural_solution/examples/README.md", "docs/source/neural_solution/examples/custom_models_optimized/tf_example1/README.md", "docs/source/neural_solution/examples/hf_models/README.md", "docs/source/neural_solution/examples/hf_models_grpc/README.md", "docs/source/neural_solution/frontend/README.md", "docs/source/objective.md", "docs/source/orchestration.md", "docs/source/pruning.md", "docs/source/publication_list.md", "docs/source/pythonic_style.md", "docs/source/quantization.md", "docs/source/quantization_layer_wise.md", "docs/source/quantization_mixed_precision.md", "docs/source/quantization_weight_only.md", "docs/source/releases_info.md", "docs/source/sigopt_strategy.md", "docs/source/smooth_quant.md", "docs/source/tensorboard.md", "docs/source/transform.md", "docs/source/tuning_strategies.md", "docs/source/user_guide.md", "docs/source/user_yaml.md", "docs/source/validated_model_list.md", "index.rst"], "titles": ["block_mask", "neural_compressor.algorithm.algorithm", "neural_compressor.algorithm.fast_bias_correction", "neural_compressor.algorithm", "neural_compressor.algorithm.smooth_quant", "neural_compressor.algorithm.weight_correction", "neural_compressor.benchmark", "neural_compressor.config", "neural_compressor.contrib", "neural_compressor.contrib.strategy", "neural_compressor.contrib.strategy.sigopt", "neural_compressor.contrib.strategy.tpe", "neural_compressor.data.datasets.bert_dataset", "neural_compressor.data.datasets.coco_dataset", "neural_compressor.data.datasets.dataset", "neural_compressor.data.datasets.dummy_dataset", "neural_compressor.data.datasets.dummy_dataset_v2", "neural_compressor.data.datasets.imagenet_dataset", "neural_compressor.data.datasets", "neural_compressor.data.datasets.style_transfer_dataset", "neural_compressor.data.filters.coco_filter", "neural_compressor.data.filters.filter", "neural_compressor.data.filters", "neural_compressor.data", "neural_compressor.data.transforms.imagenet_transform", "neural_compressor.data.transforms", "neural_compressor.data.transforms.postprocess", "neural_compressor.data.transforms.tokenization", "neural_compressor.data.transforms.transform", "neural_compressor.experimental.benchmark", "neural_compressor.experimental.common.criterion", "neural_compressor.experimental.common.dataloader", "neural_compressor.experimental.common", "neural_compressor.experimental.common.metric", "neural_compressor.experimental.common.model", "neural_compressor.experimental.common.optimizer", "neural_compressor.experimental.common.postprocess", "neural_compressor.experimental.common.torch_utils", "neural_compressor.experimental.component", "neural_compressor.experimental.compression", "neural_compressor.experimental.contrib", "neural_compressor.experimental.contrib.strategy", "neural_compressor.experimental.contrib.strategy.sigopt", "neural_compressor.experimental.contrib.strategy.tpe", "neural_compressor.experimental.data.dataloaders.base_dataloader", "neural_compressor.experimental.data.dataloaders.dataloader", "neural_compressor.experimental.data.dataloaders.default_dataloader", "neural_compressor.experimental.data.dataloaders.fetcher", "neural_compressor.experimental.data.dataloaders", "neural_compressor.experimental.data.dataloaders.mxnet_dataloader", "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader", "neural_compressor.experimental.data.dataloaders.pytorch_dataloader", "neural_compressor.experimental.data.dataloaders.sampler", "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader", "neural_compressor.experimental.data.datasets.bert_dataset", "neural_compressor.experimental.data.datasets.coco_dataset", "neural_compressor.experimental.data.datasets.dataset", "neural_compressor.experimental.data.datasets.dummy_dataset", "neural_compressor.experimental.data.datasets.dummy_dataset_v2", "neural_compressor.experimental.data.datasets.imagenet_dataset", "neural_compressor.experimental.data.datasets", "neural_compressor.experimental.data.datasets.style_transfer_dataset", "neural_compressor.experimental.data.filters.coco_filter", "neural_compressor.experimental.data.filters.filter", "neural_compressor.experimental.data.filters", "neural_compressor.experimental.data", "neural_compressor.experimental.data.transforms.imagenet_transform", "neural_compressor.experimental.data.transforms", "neural_compressor.experimental.data.transforms.tokenization", "neural_compressor.experimental.data.transforms.transform", "neural_compressor.experimental.distillation", "neural_compressor.experimental.export", "neural_compressor.experimental.export.qlinear2qdq", "neural_compressor.experimental.export.tf2onnx", "neural_compressor.experimental.export.torch2onnx", "neural_compressor.experimental.graph_optimization", "neural_compressor.experimental", "neural_compressor.experimental.metric.bleu", "neural_compressor.experimental.metric.bleu_util", "neural_compressor.experimental.metric.coco_label_map", "neural_compressor.experimental.metric.coco_tools", "neural_compressor.experimental.metric.evaluate_squad", "neural_compressor.experimental.metric.f1", "neural_compressor.experimental.metric", "neural_compressor.experimental.metric.metric", "neural_compressor.experimental.mixed_precision", "neural_compressor.experimental.model_conversion", "neural_compressor.experimental.nas.basic_nas", "neural_compressor.experimental.nas.dynas", "neural_compressor.experimental.nas", "neural_compressor.experimental.nas.nas", "neural_compressor.experimental.nas.nas_utils", "neural_compressor.experimental.nas.search_algorithms", "neural_compressor.experimental.pruner_legacy.gradient_sensitivity", "neural_compressor.experimental.pruner_legacy.group_lasso", "neural_compressor.experimental.pruner_legacy", "neural_compressor.experimental.pruner_legacy.magnitude", "neural_compressor.experimental.pruner_legacy.pattern_lock", "neural_compressor.experimental.pruner_legacy.pruner", "neural_compressor.experimental.pruning", "neural_compressor.experimental.pruning_recipes", "neural_compressor.experimental.pruning_recipes.patterns", "neural_compressor.experimental.pruning_recipes.patterns.pattern", "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern", "neural_compressor.experimental.pruning_v2", "neural_compressor.experimental.pytorch_pruner", "neural_compressor.experimental.pytorch_pruner.logger", "neural_compressor.experimental.pytorch_pruner.patterns", "neural_compressor.experimental.pytorch_pruner.prune_utils", "neural_compressor.experimental.pytorch_pruner.pruner", "neural_compressor.experimental.pytorch_pruner.pruning", "neural_compressor.experimental.pytorch_pruner.scheduler", "neural_compressor.experimental.quantization", "neural_compressor.experimental.scheduler", "neural_compressor.experimental.strategy.auto_mixed_precision", "neural_compressor.experimental.strategy.basic", "neural_compressor.experimental.strategy.bayesian", "neural_compressor.experimental.strategy.exhaustive", "neural_compressor.experimental.strategy", "neural_compressor.experimental.strategy.mse", "neural_compressor.experimental.strategy.mse_v2", "neural_compressor.experimental.strategy.random", "neural_compressor.experimental.strategy.strategy", "neural_compressor.experimental.strategy.utils.constant", "neural_compressor.experimental.strategy.utils", "neural_compressor.experimental.strategy.utils.tuning_sampler", "neural_compressor.experimental.strategy.utils.tuning_space", "neural_compressor.experimental.strategy.utils.tuning_structs", "neural_compressor.experimental.strategy.utils.utility", "neural_compressor", "neural_compressor.metric.bleu", "neural_compressor.metric.bleu_util", "neural_compressor.metric.coco_label_map", "neural_compressor.metric.coco_tools", "neural_compressor.metric.evaluate_squad", "neural_compressor.metric.f1", "neural_compressor.metric", "neural_compressor.metric.metric", "neural_compressor.mix_precision", "neural_compressor.model.base_model", "neural_compressor.model", "neural_compressor.model.keras_model", "neural_compressor.model.model", "neural_compressor.model.mxnet_model", "neural_compressor.model.nets_factory", "neural_compressor.model.onnx_model", "neural_compressor.model.tensorflow_model", "neural_compressor.model.torch_model", "neural_compressor.objective", "neural_compressor.profiling", "neural_compressor.quantization", "neural_compressor.strategy.auto", "neural_compressor.strategy.auto_mixed_precision", "neural_compressor.strategy.basic", "neural_compressor.strategy.bayesian", "neural_compressor.strategy.conservative", "neural_compressor.strategy.exhaustive", "neural_compressor.strategy.hawq_v2", "neural_compressor.strategy", "neural_compressor.strategy.mse", "neural_compressor.strategy.mse_v2", "neural_compressor.strategy.random", "neural_compressor.strategy.strategy", "neural_compressor.strategy.utils.constant", "neural_compressor.strategy.utils", "neural_compressor.strategy.utils.tuning_sampler", "neural_compressor.strategy.utils.tuning_space", "neural_compressor.strategy.utils.tuning_structs", "neural_compressor.strategy.utils.utility", "neural_compressor.training", "neural_compressor.utils.collect_layer_histogram", "neural_compressor.utils.constant", "neural_compressor.utils.create_obj_from_config", "neural_compressor.utils", "neural_compressor.utils.kl_divergence", "neural_compressor.utils.load_huggingface", "neural_compressor.utils.logger", "neural_compressor.utils.neural_insights_utils", "neural_compressor.utils.options", "neural_compressor.utils.pytorch", "neural_compressor.utils.utility", "neural_compressor.utils.weights_details", "neural_compressor.version", "TensorFlow Quantization", "Smooth Quant", "TensorFlow", "AutoTune", "Quantization", "Intel\u00ae Neural Compressor Documentation", "Contributor Covenant Code of Conduct", "Contribution Guidelines", "FX", "Neural Architecture Search", "Security Policy", "Intel\u00ae Neural Compressor", "Adaptor", "How to Add An Adaptor", "How to Support New Data Type, Like Int4, with a Few Line Changes", "Adaptor", "ONNX Runtime", "Torch Utils", "API Document Example", "APIs", "Benchmark", "Compression", "Config", "Mix Precision", "Model", "Objective", "Quantization", "Strategy", "Training", "Benchmarking", "Calibration Algorithms in Quantization", "INC Coding Conventions", "DataLoader", "Dataset", "Design", "Diagnosis", "Distillation", "Distillation for Quantization", "Distributed Training and Inference (Evaluation)", "Examples", "Export", "Frequently Asked Questions", "Framework YAML Configuration Files", "Getting Started", "Incompatible changes between v1.2 and v1.1", "Infrastructure of Intel\u00ae Neural Compressor", "Installation", "Legal Information", "LLMs Quantization Recipes", "Metrics", "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X", "Mixed Precision", "Model", "Microscaling Quantization", "Neural Coder", "AWS Amazon SageMaker Support", "BigDL Nano Support", "Intel CPU Platforms: Best Performance Setting", "Neural Coder as Python API", "Python Launcher", "Neural Coder for Quantization", "Supported Optimization Features", "v0.4", "Changelog", "neural_compressor_ext_lab", "Intel\u00ae Neural Compressor as JupyterLab Extension", "Making a new release of neural_compressor_ext_lab", "Changelog", "neural_compressor_ext_lab_alibaba", "Making a new release of neural_compressor_ext_lab_alibaba", "Change Log", "Neural Coder", "Welcome to your VS Code Extension", "Neural Insights", "Step by step example how to debug accuracy with Neural Insights", "Step by step example how to dump weights data for PyTorch model with Neural Insights", "Step by step example how to debug accuracy with Neural Insights", "Getting Started with Create React App", "What\u2019s Neural Solution?", "Get started", "Neural Solution API", "Design Doc for Optimization as a Service [WIP]", "Task request description", "Examples List", "An end-to-end example: quantize a custom model with Neural Solution", "An end-to-end example: quantize a Hugging Face model with Neural Solution", "An end-to-end example: quantize a Hugging Face model with Neural Solution gRPC API", "Client", "Objective", "Optimization Orchestration", "Pruning", "Full Publications/Events (80)", "Pythonic Style Access for Configurations", "Quantization", "Layer Wise Quantization (LWQ)", "Turn OFF Auto Mixed Precision during Quantization", "Weight Only Quantization (WOQ)", "Release", "SigOpt Strategy", "Smooth Quant", "TensorBoard", "Transform", "Tuning Strategies", "User Guide", "User YAML Configuration Files", "Validated Models", "Intel\u00ae Neural Compressor Documentation"], "terms": {"block": [0, 107, 148, 228, 236, 271, 273, 279, 285], "mask": [0, 12, 54, 80, 109, 133, 273, 288], "regist": [1, 14, 21, 28, 30, 35, 56, 63, 69, 84, 91, 98, 102, 107, 109, 111, 122, 125, 137, 148, 162, 168, 177, 192, 195, 214, 216, 221, 232, 233, 255, 271, 282, 285], "algorithm_registri": 1, "algorithm_typ": 1, "locat": [1, 28, 69, 185, 221, 240, 247, 251, 254, 262, 276, 280, 284, 287], "sourc": [1, 2, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 42, 43, 44, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 66, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 96, 97, 98, 99, 102, 103, 104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 165, 166, 167, 168, 169, 170, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 191, 194, 230, 233, 247, 249, 251, 252, 254, 274], "decor": [1, 28, 35, 69, 84, 91, 98, 102, 107, 109, 111, 122, 125, 137, 148, 162, 180, 191, 192, 195, 285], "all": [1, 3, 6, 7, 14, 21, 28, 29, 35, 38, 44, 52, 56, 63, 69, 74, 77, 80, 82, 84, 91, 98, 102, 103, 107, 113, 122, 125, 130, 133, 135, 137, 139, 148, 162, 168, 172, 180, 185, 186, 187, 189, 190, 194, 195, 196, 197, 214, 215, 216, 221, 225, 229, 233, 237, 245, 248, 249, 252, 253, 254, 255, 256, 259, 260, 262, 263, 267, 268, 269, 272, 273, 274, 276, 278, 279, 282, 284, 285], "subclass": [1, 14, 21, 28, 35, 49, 53, 56, 63, 69, 84, 91, 98, 102, 107, 109, 111, 122, 125, 137, 148, 162, 195], "paramet": [1, 6, 7, 10, 11, 12, 14, 21, 24, 28, 30, 35, 42, 43, 53, 54, 56, 63, 66, 69, 70, 72, 73, 74, 75, 77, 78, 80, 81, 82, 84, 86, 87, 88, 90, 91, 92, 93, 94, 96, 97, 98, 99, 102, 104, 107, 108, 109, 110, 111, 112, 116, 122, 126, 128, 130, 131, 133, 134, 135, 137, 138, 142, 146, 148, 150, 154, 162, 166, 168, 169, 172, 175, 176, 177, 179, 180, 184, 185, 191, 196, 215, 216, 219, 221, 228, 232, 233, 236, 248, 254, 255, 256, 257, 262, 267, 268, 273, 276, 277, 279, 281, 282, 284, 285, 287], "cl": [1, 14, 21, 28, 30, 35, 56, 63, 69, 91, 98, 102, 107, 109, 111, 122, 137, 148, 162, 180, 214], "The": [1, 6, 7, 10, 11, 12, 13, 14, 15, 16, 20, 21, 28, 30, 33, 35, 38, 42, 43, 44, 54, 55, 56, 57, 58, 62, 63, 69, 70, 75, 77, 78, 79, 81, 82, 84, 86, 87, 88, 90, 91, 93, 94, 96, 97, 98, 99, 102, 104, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 119, 120, 121, 122, 126, 128, 130, 131, 132, 134, 135, 137, 138, 146, 148, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 166, 168, 169, 170, 172, 174, 175, 179, 180, 181, 184, 185, 186, 187, 189, 191, 192, 195, 196, 197, 198, 200, 204, 207, 210, 212, 213, 214, 215, 216, 218, 219, 221, 223, 225, 227, 228, 229, 231, 232, 233, 234, 235, 236, 239, 240, 242, 245, 247, 248, 249, 251, 252, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 267, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288], "str": [1, 7, 12, 13, 14, 21, 24, 28, 30, 34, 35, 54, 55, 56, 63, 66, 69, 73, 74, 77, 78, 80, 82, 84, 91, 102, 125, 128, 130, 131, 133, 135, 137, 165, 168, 172, 175, 177, 180, 181, 185, 214, 215, 216, 232, 265, 275, 283, 284], "registr": [1, 14, 21, 28, 56, 63, 69, 102], "name": [1, 6, 7, 12, 13, 14, 17, 21, 26, 28, 29, 33, 36, 37, 54, 55, 56, 59, 63, 69, 72, 73, 74, 79, 84, 102, 107, 109, 111, 126, 128, 132, 137, 142, 146, 148, 150, 166, 168, 170, 172, 177, 180, 183, 190, 191, 197, 214, 216, 218, 221, 223, 225, 230, 232, 233, 235, 236, 240, 247, 251, 255, 256, 262, 273, 276, 280, 281, 283, 285, 287, 288], "call": [1, 80, 109, 133, 185, 187, 191, 192, 195, 215, 227, 243, 245, 255, 273, 276, 282, 283, 284], "return": [1, 6, 10, 11, 14, 21, 24, 28, 29, 30, 35, 42, 43, 56, 63, 66, 69, 74, 77, 78, 80, 81, 82, 84, 90, 91, 98, 102, 107, 108, 109, 111, 116, 122, 126, 128, 130, 131, 133, 134, 135, 137, 138, 142, 146, 148, 150, 154, 162, 166, 168, 169, 172, 177, 179, 180, 183, 186, 191, 192, 196, 197, 215, 216, 221, 232, 235, 267, 268, 269, 271, 273, 276, 279, 282, 283, 285], "type": [1, 7, 12, 14, 21, 28, 30, 35, 52, 54, 56, 63, 69, 74, 77, 78, 80, 84, 91, 98, 102, 107, 109, 111, 116, 122, 126, 128, 130, 131, 133, 137, 146, 148, 154, 155, 162, 166, 168, 179, 180, 183, 185, 187, 195, 196, 216, 218, 221, 223, 225, 228, 233, 234, 236, 255, 257, 262, 263, 267, 268, 276, 277, 279, 281, 284, 285, 286, 287], "build": [1, 2, 4, 5, 87, 90, 141, 143, 145, 146, 147, 185, 195, 196, 197, 229, 235, 247, 249, 251, 252, 255, 274, 285], "dict": [1, 6, 7, 10, 11, 29, 35, 42, 43, 53, 72, 74, 79, 80, 81, 82, 84, 87, 90, 91, 92, 99, 102, 104, 107, 108, 109, 110, 111, 116, 119, 125, 128, 132, 133, 134, 135, 137, 138, 146, 150, 165, 168, 169, 170, 172, 179, 180, 183, 191, 196, 214, 223, 232, 273, 275, 276, 282, 283, 285], "algorithmschedul": 1, "conf": [1, 6, 7, 10, 11, 29, 42, 43, 86, 93, 94, 96, 97, 98, 99, 104, 114, 116, 119, 120, 122, 126, 138, 148, 150, 151, 152, 154, 155, 159, 160, 162, 166, 169, 191, 192, 194, 197, 212, 219, 226, 227, 233, 234, 235, 256, 258, 259, 272, 276, 277, 278, 279, 281, 282, 285], "control": [1, 7, 191, 233, 260, 273, 285], "differ": [1, 5, 7, 14, 28, 30, 47, 56, 69, 75, 84, 90, 92, 101, 112, 137, 146, 148, 174, 185, 187, 189, 191, 192, 196, 215, 216, 218, 219, 221, 222, 227, 228, 232, 233, 235, 247, 251, 256, 259, 262, 271, 273, 276, 279, 282, 283, 284, 285], "phase": [1, 185, 187, 192, 233, 273, 276, 278, 285], "base": [1, 7, 12, 14, 21, 28, 38, 44, 47, 52, 54, 56, 63, 69, 84, 90, 92, 98, 99, 102, 104, 109, 119, 122, 126, 137, 139, 146, 147, 148, 159, 162, 166, 186, 192, 194, 195, 196, 197, 214, 216, 220, 221, 225, 233, 234, 242, 243, 245, 254, 257, 262, 265, 268, 269, 273, 274, 276, 279, 281, 282, 283, 285, 288], "fastbiascorrect": [2, 5], "threshold": [2, 170, 174, 232], "2": [2, 4, 6, 7, 13, 29, 55, 80, 82, 84, 109, 116, 133, 135, 137, 148, 154, 180, 183, 184, 185, 186, 187, 191, 194, 195, 213, 215, 216, 218, 219, 225, 228, 229, 230, 231, 232, 234, 236, 258, 264, 265, 267, 268, 269, 271, 273, 274, 276, 277, 279, 280, 281, 282, 284, 285, 286], "0": [2, 4, 7, 12, 15, 16, 19, 24, 28, 30, 31, 44, 46, 50, 51, 53, 54, 57, 58, 61, 66, 69, 74, 75, 84, 91, 99, 104, 112, 137, 148, 150, 155, 175, 184, 186, 187, 191, 194, 214, 215, 216, 219, 221, 223, 224, 225, 229, 230, 231, 232, 233, 234, 236, 240, 242, 247, 251, 257, 267, 268, 273, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 287], "channel_axi": [2, 5], "1": [2, 4, 5, 6, 7, 12, 13, 15, 16, 19, 20, 24, 28, 29, 30, 31, 44, 46, 50, 51, 53, 54, 55, 57, 58, 61, 62, 66, 69, 75, 80, 81, 82, 84, 99, 104, 109, 112, 113, 133, 134, 135, 137, 148, 150, 168, 172, 175, 180, 183, 184, 185, 186, 187, 189, 191, 194, 195, 197, 213, 215, 216, 218, 219, 223, 225, 226, 229, 231, 232, 234, 236, 238, 240, 256, 257, 264, 265, 267, 268, 269, 271, 272, 273, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287], "fetch": [3, 47, 196, 216, 267, 268, 269], "file": [3, 7, 10, 11, 12, 13, 14, 17, 27, 28, 34, 37, 42, 43, 54, 55, 56, 59, 68, 69, 70, 75, 80, 86, 87, 88, 90, 99, 104, 108, 110, 112, 113, 133, 138, 148, 150, 179, 180, 190, 192, 195, 196, 197, 221, 224, 227, 230, 232, 233, 235, 240, 249, 252, 253, 254, 255, 257, 258, 259, 260, 262, 263, 267, 268, 269, 271, 275, 276, 279, 283, 284], "init": [3, 216, 232, 285], "fast_bias_correct": [3, 7, 276], "smooth_quant": [3, 7, 214, 276, 282], "weight_correct": [3, 7, 276], "smoothquant": [4, 184, 194, 231, 274, 279, 286], "alpha": [4, 214, 276, 285], "5": [4, 7, 16, 24, 30, 58, 66, 84, 137, 150, 184, 195, 216, 223, 225, 229, 232, 233, 259, 264, 267, 268, 273, 275, 276, 279, 282, 284, 285, 287, 288], "fake": [4, 168, 187, 233, 276, 279, 282], "input": [4, 7, 10, 11, 12, 13, 14, 16, 24, 27, 28, 33, 42, 43, 54, 55, 56, 58, 66, 68, 69, 72, 73, 74, 137, 138, 142, 146, 150, 169, 175, 177, 179, 180, 192, 195, 196, 212, 213, 215, 216, 218, 219, 220, 221, 223, 225, 227, 232, 233, 234, 235, 237, 242, 273, 275, 276, 279, 282, 283, 284, 287], "channel": [4, 5, 7, 24, 28, 66, 69, 107, 175, 194, 195, 197, 228, 229, 236, 237, 239, 244, 259, 273, 279, 284, 288], "quantiz": [4, 6, 7, 10, 11, 24, 31, 38, 42, 43, 66, 74, 75, 76, 86, 113, 119, 125, 129, 155, 157, 159, 168, 169, 170, 174, 175, 179, 180, 184, 186, 195, 202, 214, 215, 216, 221, 222, 225, 227, 228, 232, 235, 237, 242, 244, 245, 248, 261, 263, 264, 266, 272, 274, 280, 283, 284, 285, 286, 287], "more": [4, 28, 69, 107, 185, 192, 193, 194, 196, 213, 214, 216, 219, 221, 223, 226, 228, 229, 231, 233, 234, 236, 237, 245, 249, 252, 257, 262, 271, 272, 273, 278, 279, 282, 285, 286, 288], "detail": [4, 28, 69, 180, 181, 183, 184, 185, 187, 189, 194, 196, 197, 213, 214, 219, 225, 226, 227, 231, 232, 233, 234, 237, 245, 254, 262, 263, 273, 279, 280, 281, 282, 283, 285, 286], "pleas": [4, 7, 12, 13, 14, 17, 54, 55, 56, 59, 107, 109, 110, 137, 150, 183, 184, 187, 191, 192, 193, 194, 195, 212, 213, 216, 220, 221, 223, 229, 231, 232, 234, 237, 238, 242, 245, 261, 262, 263, 273, 276, 278, 279, 280, 281, 282, 285, 286], "refer": [4, 7, 12, 54, 77, 78, 84, 107, 109, 110, 130, 131, 137, 150, 183, 184, 185, 187, 191, 194, 195, 196, 212, 215, 216, 218, 220, 221, 223, 227, 229, 230, 232, 233, 234, 237, 242, 245, 256, 257, 259, 261, 262, 263, 271, 275, 277, 280, 284, 285], "accur": [4, 273, 279, 282], "effici": [4, 192, 194, 213, 215, 219, 237, 262, 272, 273, 274, 279, 282, 285], "post": [4, 7, 10, 11, 42, 43, 150, 184, 186, 189, 194, 195, 196, 218, 220, 221, 223, 228, 229, 236, 237, 243, 254, 264, 273, 274, 277, 279, 282, 283, 285], "train": [4, 7, 10, 11, 12, 14, 28, 38, 42, 43, 54, 56, 69, 70, 86, 109, 129, 150, 172, 184, 186, 192, 194, 195, 196, 202, 216, 218, 219, 220, 223, 228, 234, 236, 237, 243, 254, 259, 267, 272, 274, 277, 279, 281, 282, 285, 287], "larg": [4, 184, 185, 194, 215, 219, 233, 236, 274, 277, 279, 282, 288], "languag": [4, 77, 130, 184, 185, 189, 194, 223, 236, 258, 274, 277, 279, 282], "model": [4, 6, 7, 10, 11, 12, 14, 28, 29, 32, 33, 42, 43, 50, 53, 54, 56, 69, 70, 72, 73, 74, 75, 76, 84, 85, 86, 87, 90, 93, 94, 96, 97, 98, 99, 104, 108, 109, 110, 111, 112, 113, 114, 116, 119, 120, 122, 129, 137, 138, 148, 150, 151, 152, 154, 155, 159, 160, 162, 168, 169, 175, 177, 179, 180, 182, 183, 184, 185, 187, 190, 191, 192, 194, 195, 197, 202, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 227, 228, 230, 232, 234, 237, 242, 244, 245, 248, 254, 256, 261, 263, 264, 265, 266, 271, 272, 274, 276, 280, 281, 283, 284, 285, 286, 287], "spiq": [4, 282], "data": [4, 7, 10, 11, 29, 31, 42, 43, 74, 76, 116, 126, 128, 129, 138, 150, 154, 166, 168, 169, 172, 177, 180, 185, 187, 194, 195, 213, 215, 216, 221, 225, 226, 229, 232, 233, 234, 236, 256, 257, 259, 262, 267, 268, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286], "free": [4, 10, 11, 42, 43, 150, 184, 189, 243, 248, 256, 264, 271, 281, 282], "per": [4, 6, 7, 29, 174, 195, 197, 215, 236, 262, 273, 278, 279, 288], "static": [4, 7, 74, 126, 150, 166, 195, 196, 197, 218, 223, 228, 233, 237, 242, 243, 244, 245, 248, 254, 257, 265, 267, 268, 269, 277, 282, 285, 288], "For": [4, 7, 14, 28, 56, 69, 81, 82, 84, 107, 110, 134, 135, 137, 138, 150, 183, 184, 187, 189, 191, 193, 195, 197, 219, 220, 221, 223, 225, 228, 237, 239, 240, 242, 245, 256, 257, 262, 273, 278, 279, 282, 283, 285, 287, 288], "torch": [4, 7, 74, 138, 150, 175, 179, 186, 191, 194, 197, 198, 219, 221, 223, 233, 234, 235, 236, 237, 242, 245, 257, 276, 279, 282, 283], "backend": [4, 7, 8, 9, 12, 13, 15, 16, 17, 18, 19, 23, 25, 28, 34, 35, 40, 41, 45, 46, 48, 50, 54, 55, 57, 58, 59, 60, 61, 65, 67, 69, 85, 120, 138, 139, 140, 142, 160, 191, 197, 218, 221, 227, 228, 233, 234, 243, 262, 267, 268, 269, 275, 279, 284, 285, 287], "we": [4, 5, 6, 7, 29, 31, 53, 77, 80, 130, 133, 157, 184, 185, 186, 187, 189, 191, 195, 196, 197, 214, 215, 218, 221, 223, 225, 231, 232, 233, 241, 242, 245, 249, 252, 254, 255, 257, 260, 267, 268, 269, 271, 272, 273, 275, 276, 277, 279, 280, 281, 282, 283, 285, 286], "onli": [4, 5, 6, 7, 12, 29, 31, 35, 54, 74, 86, 107, 109, 120, 150, 160, 168, 180, 186, 195, 196, 197, 212, 213, 214, 215, 218, 219, 221, 224, 225, 231, 233, 234, 242, 255, 273, 274, 275, 276, 277, 282, 283, 285, 286, 287], "handl": [4, 176, 191, 193, 214, 215, 262, 282], "layer": [4, 7, 30, 37, 107, 108, 170, 172, 180, 194, 195, 196, 197, 220, 228, 257, 273, 279, 280, 286], "whose": [4, 108, 146, 227, 282, 285], "smooth": [4, 7, 125, 214, 273, 285], "scale": [4, 5, 24, 28, 66, 69, 185, 187, 236, 276, 279, 281, 282, 284, 285], "could": [4, 10, 11, 14, 42, 43, 56, 113, 138, 150, 169, 183, 185, 187, 189, 191, 220, 233, 272, 273, 276, 279, 282, 286], "absorb": [4, 279], "support": [4, 7, 10, 11, 12, 14, 21, 24, 28, 30, 31, 32, 35, 42, 43, 53, 54, 56, 63, 66, 69, 76, 84, 86, 91, 107, 109, 113, 120, 126, 129, 137, 138, 142, 148, 150, 160, 166, 169, 172, 174, 175, 180, 182, 183, 186, 187, 194, 196, 214, 231, 233, 237, 242, 245, 248, 254, 261, 262, 265, 274, 278, 281, 285, 286], "other": [4, 53, 82, 135, 146, 185, 187, 189, 191, 196, 197, 214, 218, 225, 228, 230, 233, 235, 236, 257, 271, 273, 276, 282, 284, 285, 288], "later": [4, 214, 261, 262, 283], "onnx": [4, 7, 50, 72, 73, 74, 138, 145, 178, 190, 194, 195, 196, 198, 215, 218, 222, 223, 225, 226, 228, 234, 235, 236, 239, 244, 245, 257, 274, 275, 279, 280, 282, 285], "insert": [4, 184, 187, 191, 196, 215, 228, 233, 237, 273, 276, 278, 279, 282, 283], "mul": [4, 223, 279, 282], "befor": [4, 7, 12, 54, 107, 109, 111, 187, 190, 197, 215, 216, 219, 220, 221, 224, 225, 229, 233, 249, 252, 258, 259, 276, 279, 281, 283, 285], "conv": [4, 7, 191, 196, 197, 233, 273, 275, 276, 285], "linear": [4, 7, 107, 191, 219, 223, 233, 273, 279, 282, 285], "op": [4, 7, 74, 119, 126, 127, 155, 157, 159, 166, 167, 168, 174, 180, 187, 194, 195, 196, 197, 218, 225, 233, 234, 258, 259, 273, 276, 278, 280, 282, 283, 285, 287], "fuse": [4, 191, 282, 283], "kernel": [4, 7, 195, 196, 285], "futur": [4, 10, 11, 31, 42, 43, 228, 231, 233, 245, 267, 268, 269, 286], "weightcorrect": 5, "ep": [5, 234], "1e": [5, 282, 287], "05": [5, 7, 84, 137, 232, 282, 288], "correct": [5, 7, 80, 81, 82, 84, 108, 133, 134, 135, 137, 189, 237], "int8": [5, 6, 7, 24, 66, 72, 73, 74, 126, 128, 166, 168, 179, 180, 183, 185, 187, 190, 191, 194, 195, 196, 197, 212, 216, 220, 225, 231, 233, 234, 236, 239, 242, 244, 245, 248, 254, 257, 259, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 287], "weight": [5, 7, 74, 107, 109, 126, 137, 150, 157, 166, 168, 180, 181, 183, 184, 185, 186, 187, 195, 196, 197, 213, 218, 220, 225, 227, 231, 233, 256, 267, 271, 273, 274, 275, 276, 277, 282, 283, 285, 286, 287], "distribut": [5, 7, 31, 44, 46, 47, 50, 51, 52, 53, 174, 185, 187, 194, 196, 215, 219, 229, 249, 252, 256, 259, 267, 274, 276, 279, 280, 282, 286, 288], "close": [5, 213, 263], "fp32": [5, 7, 10, 11, 42, 43, 73, 74, 84, 119, 126, 137, 155, 159, 166, 172, 175, 179, 180, 183, 185, 187, 190, 195, 197, 218, 225, 226, 231, 232, 233, 234, 244, 256, 257, 258, 259, 275, 276, 278, 279, 280, 281, 282, 283, 285, 287, 288], "r": [5, 183, 185, 187, 218, 229, 255, 256, 258, 259, 261, 262, 276, 288], "w_int8": 5, "u": [5, 237, 256, 261], "w_fp32": 5, "i": [5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 19, 21, 24, 28, 29, 31, 35, 37, 38, 42, 43, 44, 52, 53, 54, 55, 56, 57, 58, 61, 63, 66, 69, 77, 80, 82, 84, 86, 91, 99, 104, 108, 109, 113, 120, 130, 133, 135, 137, 138, 148, 150, 155, 160, 168, 169, 175, 179, 180, 184, 185, 186, 187, 189, 190, 191, 192, 194, 195, 196, 197, 198, 200, 204, 207, 210, 212, 213, 214, 215, 216, 218, 219, 220, 221, 223, 224, 225, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 245, 247, 248, 249, 251, 252, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 267, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288], "varianc": [5, 218], "ratio": [5, 7, 24, 28, 66, 69, 109, 216, 231, 233, 257, 273, 284, 288], "between": [5, 7, 28, 69, 81, 84, 134, 137, 180, 185, 187, 191, 195, 196, 197, 213, 218, 219, 228, 232, 233, 236, 245, 276, 279, 280, 281, 282, 284, 285], "wise": [5, 7, 116, 119, 154, 155, 159, 194, 196, 228, 259, 273, 279, 282, 283, 285, 286, 287], "": [5, 7, 14, 27, 28, 29, 31, 33, 53, 56, 68, 69, 82, 107, 109, 135, 137, 138, 142, 150, 177, 180, 183, 185, 187, 189, 190, 192, 196, 197, 214, 218, 219, 221, 223, 225, 228, 233, 234, 242, 245, 247, 251, 254, 257, 259, 262, 272, 273, 274, 275, 276, 279, 280, 281, 282, 285, 286, 287, 288], "equal": [5, 180, 236, 273, 279], "minim": [5, 116, 154, 185, 187, 196, 197, 213, 219, 222, 232, 233, 247, 251, 273, 276, 285], "round": [5, 187, 194, 274, 276, 279, 282], "scale_c": 5, "shift": [5, 24, 66, 255, 284], "notic": [5, 29, 230, 234, 257, 280], "can": [5, 7, 10, 11, 14, 28, 29, 31, 42, 43, 53, 56, 69, 80, 82, 84, 107, 109, 111, 133, 135, 137, 138, 148, 150, 169, 180, 183, 184, 185, 186, 187, 191, 192, 194, 195, 196, 197, 212, 214, 215, 216, 218, 219, 220, 221, 223, 225, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 245, 247, 248, 249, 251, 252, 254, 255, 257, 259, 260, 261, 262, 264, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288], "chang": [5, 7, 109, 111, 157, 180, 190, 196, 215, 221, 224, 230, 233, 237, 247, 248, 251, 254, 260, 273, 283, 284, 285], "first": [5, 7, 12, 54, 80, 126, 133, 155, 166, 180, 187, 191, 192, 194, 195, 196, 197, 216, 218, 229, 234, 236, 239, 248, 249, 252, 255, 257, 258, 259, 275, 276, 278, 279, 281, 282, 283, 285, 287], "an": [5, 7, 14, 28, 32, 37, 47, 52, 56, 69, 76, 77, 81, 82, 90, 91, 113, 129, 130, 134, 135, 138, 150, 169, 180, 182, 184, 185, 186, 189, 191, 192, 194, 195, 197, 213, 215, 216, 217, 218, 223, 231, 232, 233, 234, 236, 237, 241, 242, 245, 254, 257, 258, 259, 262, 265, 271, 273, 274, 276, 279, 281, 282, 283, 284, 285], "empir": 5, "solut": [5, 184, 194, 195, 196, 224, 239, 243, 248, 274, 279, 280, 282, 285, 286], "make": [5, 52, 107, 109, 111, 180, 184, 189, 195, 196, 212, 214, 215, 225, 232, 233, 242, 247, 251, 254, 256, 273, 276, 277, 278, 279, 281, 282, 285], "thi": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 19, 28, 31, 37, 38, 42, 43, 53, 54, 55, 56, 57, 58, 59, 61, 69, 77, 80, 81, 82, 84, 93, 94, 96, 97, 98, 99, 104, 107, 109, 111, 112, 113, 116, 119, 130, 133, 134, 135, 137, 138, 148, 150, 154, 159, 168, 169, 179, 180, 183, 184, 185, 186, 187, 189, 190, 191, 192, 195, 196, 197, 213, 214, 215, 216, 219, 220, 221, 223, 224, 225, 228, 230, 231, 232, 233, 234, 235, 237, 239, 240, 242, 243, 245, 247, 249, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 267, 268, 269, 273, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286], "don": [5, 7, 191, 260, 273, 285], "t": [5, 7, 28, 31, 69, 82, 135, 185, 191, 195, 214, 218, 219, 221, 233, 234, 255, 260, 273, 276, 279, 285, 287], "min": [5, 7, 180, 185, 187, 218, 236, 257, 259, 273, 276, 279, 282, 284, 285], "max": [5, 7, 28, 69, 81, 82, 116, 134, 135, 154, 180, 185, 187, 194, 218, 229, 233, 236, 257, 259, 273, 276, 279, 282, 284, 285], "valu": [5, 6, 7, 10, 11, 12, 15, 16, 24, 28, 29, 42, 43, 54, 57, 58, 66, 69, 80, 84, 108, 116, 119, 126, 133, 137, 138, 150, 154, 159, 166, 168, 169, 170, 172, 180, 184, 185, 187, 191, 196, 197, 213, 216, 218, 225, 232, 233, 234, 236, 240, 257, 259, 265, 271, 273, 275, 276, 279, 280, 282, 284, 285, 287], "us": [6, 7, 10, 11, 12, 13, 14, 15, 16, 19, 27, 28, 29, 30, 35, 42, 43, 52, 53, 54, 55, 56, 57, 58, 61, 68, 69, 73, 74, 75, 77, 78, 80, 84, 85, 86, 91, 98, 99, 102, 104, 107, 109, 110, 111, 112, 113, 116, 119, 122, 125, 126, 130, 131, 133, 137, 148, 150, 154, 157, 159, 162, 166, 168, 169, 170, 171, 172, 173, 175, 180, 183, 185, 186, 187, 189, 190, 191, 192, 194, 195, 196, 212, 213, 214, 216, 218, 219, 220, 221, 223, 225, 227, 229, 230, 233, 234, 235, 236, 237, 238, 239, 241, 242, 245, 247, 249, 251, 252, 254, 256, 257, 258, 259, 260, 267, 268, 269, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 285, 287, 288], "evalu": [6, 10, 11, 12, 29, 42, 43, 54, 70, 77, 80, 81, 82, 84, 86, 130, 133, 134, 135, 137, 138, 148, 150, 169, 172, 184, 185, 186, 187, 192, 195, 196, 214, 216, 219, 220, 227, 228, 231, 232, 233, 234, 237, 243, 245, 248, 254, 271, 273, 276, 281, 282, 283, 285, 287], "perform": [6, 7, 12, 24, 29, 54, 66, 75, 99, 104, 112, 119, 137, 148, 150, 155, 159, 183, 185, 186, 187, 190, 191, 192, 195, 196, 212, 216, 217, 218, 220, 222, 223, 228, 229, 232, 233, 234, 235, 237, 239, 243, 245, 248, 254, 260, 271, 272, 273, 274, 275, 276, 277, 278, 279, 282, 283, 285, 287, 288], "set_env_var": [6, 29], "env_var": [6, 29], "overwrite_exist": [6, 29], "fals": [6, 7, 12, 14, 24, 28, 29, 30, 31, 37, 44, 46, 50, 51, 53, 54, 56, 66, 69, 80, 84, 133, 137, 148, 150, 172, 175, 179, 180, 183, 185, 186, 195, 196, 215, 216, 225, 232, 233, 247, 251, 257, 265, 268, 269, 275, 276, 279, 282, 283, 284, 285, 287], "set": [6, 7, 10, 11, 12, 14, 17, 28, 29, 34, 35, 42, 43, 44, 54, 56, 59, 69, 80, 86, 99, 104, 108, 113, 133, 137, 138, 146, 150, 169, 177, 180, 183, 184, 186, 187, 189, 192, 194, 196, 212, 215, 216, 219, 221, 223, 225, 227, 228, 229, 232, 233, 234, 237, 239, 241, 255, 256, 257, 258, 259, 260, 264, 267, 273, 275, 276, 279, 281, 282, 285, 287], "specifi": [6, 7, 10, 11, 28, 29, 42, 43, 69, 75, 80, 84, 86, 87, 90, 99, 104, 112, 113, 133, 137, 138, 150, 169, 179, 180, 187, 196, 197, 221, 225, 232, 233, 242, 256, 262, 266, 267, 268, 269, 271, 273, 275, 279, 284, 285, 287], "environ": [6, 29, 189, 194, 212, 247, 251, 254, 262, 265, 267, 268, 269, 285], "variabl": [6, 7, 14, 29, 56, 116, 154, 168, 229, 273, 285], "new": [6, 14, 28, 29, 44, 56, 69, 108, 148, 190, 196, 221, 233, 234, 248, 254, 255, 256, 257, 263, 264, 267, 268, 273, 274, 276, 279, 280, 281, 284, 286, 287], "env": [6, 29, 224, 267, 268, 269], "two": [6, 14, 19, 29, 56, 61, 80, 107, 111, 113, 120, 133, 160, 180, 184, 186, 187, 190, 191, 192, 214, 215, 216, 219, 221, 223, 225, 233, 234, 236, 261, 262, 264, 273, 276, 278, 279, 281, 282, 285, 287], "case": [6, 7, 27, 28, 29, 53, 68, 69, 75, 99, 104, 112, 148, 185, 197, 214, 215, 219, 220, 221, 225, 227, 232, 238, 242, 254, 255, 256, 259, 265, 268, 269, 271, 273, 274, 276, 279, 280, 282, 284, 286, 287, 288], "exist": [6, 29, 146, 180, 223, 232, 241, 285], "alreadi": [6, 14, 27, 29, 56, 68, 195, 216, 228, 249, 252, 256, 265, 285], "param": [6, 29, 35, 44, 84, 116, 137, 154, 180, 195, 235, 285], "true": [6, 7, 12, 14, 15, 27, 28, 29, 52, 54, 56, 57, 68, 69, 74, 78, 84, 102, 125, 131, 137, 148, 150, 165, 172, 175, 179, 180, 183, 185, 186, 194, 196, 215, 216, 218, 221, 225, 232, 233, 237, 240, 241, 256, 257, 258, 259, 265, 267, 275, 276, 277, 279, 282, 283, 284, 285, 287], "set_all_env_var": [6, 29], "configur": [6, 7, 10, 11, 14, 17, 29, 34, 42, 43, 56, 59, 70, 74, 75, 86, 87, 88, 90, 99, 104, 108, 112, 113, 119, 137, 138, 148, 150, 159, 168, 169, 171, 172, 178, 179, 186, 191, 192, 195, 196, 216, 218, 233, 241, 255, 262, 267, 268, 269, 271, 273, 276, 279, 280, 282, 284, 285, 288], "neural": [6, 7, 24, 25, 28, 29, 32, 35, 38, 66, 67, 69, 71, 76, 83, 84, 86, 99, 104, 107, 110, 112, 113, 118, 124, 129, 136, 137, 138, 142, 149, 150, 157, 158, 164, 177, 182, 183, 185, 186, 187, 190, 195, 196, 197, 212, 213, 214, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 230, 231, 234, 235, 236, 238, 239, 242, 244, 245, 247, 249, 251, 252, 253, 265, 271, 272, 274, 276, 279, 280, 282, 283, 284, 285, 287, 288], "compressor": [6, 7, 24, 25, 28, 29, 32, 35, 38, 66, 67, 69, 71, 76, 83, 84, 86, 107, 110, 112, 113, 118, 124, 129, 136, 137, 138, 142, 149, 150, 158, 164, 177, 182, 183, 185, 186, 187, 190, 192, 195, 196, 197, 212, 213, 214, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 230, 231, 234, 235, 236, 237, 238, 242, 244, 245, 247, 249, 251, 252, 253, 256, 257, 258, 259, 261, 262, 269, 271, 272, 273, 274, 276, 279, 280, 282, 283, 284, 285, 286, 287, 288], "physic": [6, 29, 189, 212, 262], "core": [6, 7, 29, 190, 212, 230, 247, 251, 262, 288], "get_architectur": [6, 29], "get": [6, 7, 28, 29, 35, 37, 47, 69, 74, 107, 109, 111, 119, 126, 128, 137, 146, 150, 159, 166, 168, 172, 175, 177, 180, 187, 196, 213, 224, 228, 229, 231, 233, 240, 257, 259, 267, 268, 274, 279, 282, 285, 286, 289], "architectur": [6, 29, 87, 90, 194, 212, 219, 233, 261, 273, 274, 279, 286], "system": [6, 29, 180, 212, 236, 240, 273, 288], "get_threads_per_cor": [6, 29], "thread": [6, 7, 29, 215, 264], "get_thread": [6, 29], "list": [6, 7, 10, 11, 12, 24, 28, 29, 42, 43, 47, 54, 66, 69, 73, 74, 77, 78, 80, 81, 82, 84, 91, 99, 104, 107, 110, 125, 130, 131, 133, 134, 135, 137, 138, 146, 150, 165, 169, 170, 180, 184, 185, 191, 194, 195, 216, 223, 225, 229, 231, 233, 237, 242, 244, 247, 248, 251, 259, 262, 264, 265, 271, 273, 275, 276, 278, 282, 283, 285], "get_physical_id": [6, 29], "socket": [6, 29, 180, 262, 264, 288], "get_core_id": [6, 29], "id": [6, 27, 29, 68, 77, 79, 80, 81, 82, 130, 132, 133, 134, 135, 194, 232, 262, 263, 267, 268, 269, 281, 285], "get_bounded_thread": [6, 29], "core_id": [6, 29], "bind": [6, 29], "instanc": [6, 7, 10, 11, 29, 42, 43, 81, 82, 84, 87, 90, 93, 94, 96, 97, 98, 116, 128, 134, 135, 137, 138, 150, 154, 168, 169, 177, 180, 189, 190, 191, 195, 212, 233, 239, 245, 279, 285, 287, 288], "run_inst": 6, "b_dataload": [6, 7, 212, 233], "none": [6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 19, 24, 28, 29, 30, 31, 38, 42, 43, 44, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 66, 69, 70, 73, 74, 75, 80, 84, 85, 86, 87, 90, 99, 104, 108, 112, 114, 116, 119, 120, 122, 126, 133, 137, 138, 148, 150, 151, 152, 154, 155, 159, 160, 162, 166, 169, 170, 172, 175, 177, 179, 180, 185, 194, 195, 196, 215, 216, 232, 236, 257, 276, 279, 283, 284, 285], "b_func": [6, 212], "run": [6, 7, 10, 11, 27, 29, 42, 43, 53, 68, 108, 109, 116, 138, 150, 154, 169, 185, 187, 194, 195, 212, 221, 224, 225, 233, 237, 239, 241, 242, 243, 245, 247, 248, 249, 251, 252, 254, 262, 263, 264, 265, 267, 268, 269, 274, 276, 279, 280, 281, 283, 285, 287], "object": [6, 7, 10, 11, 12, 13, 14, 28, 29, 31, 42, 43, 44, 54, 55, 56, 69, 70, 75, 80, 88, 90, 93, 94, 96, 97, 98, 99, 104, 107, 108, 109, 110, 111, 112, 116, 129, 133, 137, 138, 146, 147, 150, 154, 168, 169, 172, 179, 180, 185, 191, 192, 196, 202, 212, 214, 215, 216, 224, 232, 233, 235, 272, 273, 275, 276, 284, 285, 286, 288], "benchmarkconfig": [6, 7, 212, 218, 233], "contain": [6, 7, 10, 11, 12, 13, 14, 42, 43, 54, 55, 56, 70, 74, 75, 80, 81, 82, 86, 99, 102, 104, 107, 108, 109, 110, 111, 112, 133, 134, 135, 138, 150, 169, 172, 179, 185, 194, 213, 216, 219, 228, 232, 255, 262, 267, 268, 269, 273, 279, 283, 285, 286], "accuraci": [6, 7, 10, 11, 42, 43, 70, 75, 84, 99, 104, 112, 137, 138, 148, 150, 155, 169, 177, 185, 186, 191, 194, 196, 197, 213, 215, 216, 218, 220, 221, 222, 223, 232, 233, 236, 245, 254, 256, 263, 264, 267, 268, 271, 272, 273, 274, 275, 279, 280, 281, 282, 283, 286, 287, 288], "goal": [6, 70, 75, 99, 104, 112, 138, 150, 186, 187, 196, 215, 272, 276, 285], "tune": [6, 7, 10, 11, 12, 14, 42, 43, 54, 56, 75, 112, 114, 115, 116, 117, 119, 120, 121, 122, 125, 126, 127, 128, 138, 148, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 165, 166, 167, 168, 169, 180, 186, 195, 196, 213, 214, 215, 216, 218, 221, 228, 230, 233, 234, 254, 258, 261, 263, 264, 271, 273, 274, 278, 280, 281, 283, 287], "prefer": [6, 75, 112, 150, 273, 279], "calibr": [6, 7, 10, 11, 42, 43, 75, 112, 150, 174, 185, 187, 195, 197, 216, 227, 228, 273, 276, 279, 285, 286, 287], "space": [6, 7, 10, 11, 42, 43, 75, 82, 87, 90, 91, 92, 112, 116, 119, 126, 135, 138, 150, 154, 159, 166, 186, 187, 189, 190, 192, 195, 196, 197, 214, 273, 276, 282, 287], "etc": [6, 27, 68, 70, 75, 82, 99, 104, 112, 135, 138, 150, 179, 194, 219, 228, 256, 260, 273, 281, 285], "dataload": [6, 10, 11, 12, 23, 32, 42, 43, 54, 65, 70, 99, 104, 113, 150, 169, 172, 185, 191, 194, 195, 196, 218, 219, 220, 221, 226, 227, 233, 234, 256, 257, 272, 273, 276, 277, 278, 279, 282, 283, 284, 286, 287], "framework": [6, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23, 25, 28, 30, 31, 35, 40, 41, 45, 46, 48, 50, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 65, 67, 69, 75, 84, 85, 112, 120, 126, 137, 138, 139, 140, 142, 160, 166, 172, 185, 186, 187, 194, 195, 197, 213, 214, 218, 221, 222, 226, 227, 228, 229, 232, 233, 234, 256, 257, 273, 274, 276, 280, 283, 284, 285, 286, 287, 288], "custom": [6, 7, 113, 137, 148, 179, 186, 212, 219, 220, 237, 260, 261, 262, 266, 268, 269, 273, 274, 279, 281], "If": [6, 7, 10, 11, 14, 28, 42, 43, 56, 69, 108, 138, 150, 169, 185, 187, 190, 191, 196, 212, 214, 215, 216, 221, 229, 230, 232, 233, 240, 248, 249, 252, 254, 260, 265, 271, 273, 276, 279, 281, 282, 283, 284, 285], "user": [6, 7, 10, 11, 14, 17, 21, 28, 29, 35, 42, 43, 56, 59, 63, 69, 75, 99, 104, 110, 112, 113, 137, 138, 148, 150, 155, 168, 169, 180, 183, 184, 185, 186, 187, 191, 192, 194, 195, 196, 197, 202, 212, 214, 215, 219, 220, 223, 225, 228, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 245, 248, 254, 261, 262, 263, 264, 267, 268, 269, 271, 272, 273, 274, 276, 277, 278, 280, 282, 283, 284, 285, 289], "pass": [6, 137, 150, 179, 180, 187, 190, 191, 195, 212, 216, 219, 220, 221, 227, 232, 233, 255, 262, 273, 275, 276, 278, 282, 287], "need": [6, 7, 10, 11, 14, 21, 28, 31, 33, 34, 42, 43, 44, 52, 53, 56, 63, 69, 74, 113, 119, 137, 138, 148, 150, 159, 169, 179, 180, 184, 186, 187, 191, 195, 214, 215, 216, 218, 219, 221, 228, 233, 237, 239, 240, 243, 247, 248, 249, 251, 252, 254, 255, 256, 257, 258, 259, 261, 265, 267, 273, 275, 276, 277, 278, 279, 280, 282, 284, 285, 287], "generate_prefix": 6, "core_list": 6, "gener": [6, 10, 11, 14, 15, 16, 17, 28, 42, 43, 44, 53, 56, 57, 58, 59, 69, 77, 85, 116, 130, 138, 150, 154, 169, 183, 187, 190, 191, 195, 197, 215, 219, 232, 233, 234, 236, 237, 242, 247, 249, 251, 252, 254, 256, 257, 271, 273, 274, 276, 278, 279, 282, 283, 284, 285], "command": [6, 29, 169, 218, 221, 237, 239, 242, 247, 251, 255, 256, 258, 259, 260, 262], "prefix": [6, 237, 242, 283], "numactl": [6, 224, 240, 248], "index": [6, 7, 14, 47, 52, 56, 91, 180, 216, 232, 255, 259, 279, 282], "bound": [6, 28, 69, 80, 116, 133, 154, 232, 284], "specif": [6, 7, 12, 13, 14, 15, 19, 21, 35, 54, 55, 56, 57, 61, 63, 93, 94, 96, 97, 98, 137, 150, 177, 185, 189, 192, 195, 196, 213, 214, 215, 218, 219, 225, 227, 231, 232, 233, 234, 235, 236, 237, 241, 242, 244, 248, 254, 256, 262, 271, 273, 275, 279, 285, 287], "call_on": 6, "cmd": 6, "log_fil": 6, "execut": [6, 7, 109, 113, 115, 150, 151, 153, 169, 172, 179, 180, 187, 218, 219, 220, 233, 234, 239, 240, 247, 248, 254, 255, 256, 257, 261, 264, 272, 273, 276, 279, 281, 285, 288], "one": [6, 28, 38, 69, 77, 80, 84, 86, 107, 110, 111, 130, 133, 137, 185, 186, 187, 192, 195, 213, 219, 220, 221, 225, 228, 229, 232, 233, 234, 237, 238, 242, 243, 245, 247, 248, 251, 254, 255, 256, 259, 260, 261, 262, 264, 271, 272, 273, 275, 276, 277, 279, 280, 282, 284, 285], "dump": [6, 74, 180, 185, 187, 190, 259, 276, 280, 283], "log": [6, 176, 191, 245, 267, 268, 269, 281, 283, 285], "window": [6, 212, 229, 254, 255], "config_inst": 6, "raw_cmd": 6, "multi": [6, 80, 133, 137, 150, 192, 215, 216, 228, 233, 271, 273, 276, 285], "trigger": [6, 109], "sub": [6, 29, 192, 214, 285], "process": [6, 7, 10, 11, 12, 13, 14, 24, 28, 29, 42, 43, 54, 55, 56, 66, 69, 107, 109, 111, 115, 116, 138, 150, 151, 153, 154, 169, 179, 180, 184, 185, 186, 187, 192, 195, 196, 197, 213, 215, 216, 219, 220, 221, 223, 233, 236, 238, 259, 261, 262, 264, 272, 273, 276, 277, 279, 282, 283, 284, 287], "raw": [6, 13, 17, 20, 55, 59, 62, 119, 159, 232, 258, 285], "summary_benchmark": 6, "summari": [6, 169, 218, 249, 252, 283, 288], "profil": [6, 7, 129], "benchmark_with_raw_cmd": 6, "string": [6, 7, 14, 30, 35, 56, 70, 75, 77, 80, 86, 87, 88, 90, 91, 99, 104, 107, 108, 109, 110, 111, 112, 130, 133, 142, 146, 172, 177, 180, 185, 232, 284], "exampl": [6, 7, 12, 13, 14, 24, 28, 54, 55, 56, 66, 69, 80, 81, 82, 84, 110, 133, 134, 135, 137, 138, 148, 150, 168, 169, 179, 180, 185, 186, 189, 194, 196, 197, 202, 227, 228, 237, 240, 241, 242, 245, 262, 265, 278, 280, 284, 285, 286, 289], "accord": [6, 7, 12, 13, 14, 28, 54, 55, 56, 69, 119, 157, 159, 172, 185, 186, 192, 195, 216, 221, 257, 262, 267, 268, 269, 273, 278, 282, 284, 285], "config": [6, 10, 11, 12, 42, 43, 54, 93, 94, 96, 97, 98, 99, 104, 107, 108, 109, 110, 111, 126, 127, 129, 138, 166, 167, 168, 169, 172, 179, 180, 183, 192, 194, 196, 197, 202, 212, 214, 215, 218, 219, 220, 221, 223, 226, 228, 232, 233, 234, 235, 256, 257, 272, 273, 275, 276, 278, 279, 281, 283, 285], "from": [6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 19, 24, 30, 31, 34, 42, 43, 44, 47, 51, 54, 55, 56, 57, 58, 59, 61, 66, 70, 72, 73, 74, 77, 80, 81, 82, 86, 91, 107, 108, 109, 111, 126, 128, 130, 133, 134, 135, 138, 146, 148, 150, 166, 168, 169, 172, 175, 179, 180, 183, 184, 185, 186, 187, 189, 190, 191, 192, 195, 197, 212, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 226, 228, 231, 232, 234, 235, 236, 237, 241, 242, 243, 245, 255, 257, 259, 260, 264, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286], "import": [6, 7, 86, 138, 148, 150, 169, 180, 183, 184, 185, 186, 191, 192, 194, 197, 212, 215, 216, 218, 219, 220, 221, 223, 226, 232, 233, 234, 235, 236, 237, 241, 243, 256, 257, 265, 271, 272, 273, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286], "fit_with_raw_cmd": 6, "iter": [6, 7, 10, 11, 14, 15, 31, 42, 43, 47, 52, 56, 57, 109, 111, 138, 150, 169, 172, 185, 186, 191, 192, 195, 212, 215, 216, 233, 273, 275, 276, 282, 283, 285, 287], "100": [6, 7, 14, 56, 185, 187, 212, 216, 221, 227, 229, 233, 259, 275, 276, 284, 285, 287, 288], "cores_per_inst": [6, 7, 212, 233, 275], "4": [6, 7, 21, 24, 28, 63, 66, 69, 77, 78, 80, 130, 131, 133, 168, 189, 194, 195, 197, 212, 221, 222, 225, 228, 229, 232, 233, 236, 242, 262, 264, 268, 273, 276, 279, 282, 284, 285, 288], "num_of_inst": [6, 7, 212, 233, 275], "7": [6, 7, 148, 184, 187, 197, 212, 224, 225, 233, 273, 276, 280, 282, 285, 288], "test": [6, 7, 28, 69, 190, 194, 218, 229, 262, 267, 288], "py": [6, 7, 78, 80, 81, 82, 109, 131, 133, 134, 135, 183, 191, 195, 214, 218, 221, 229, 233, 239, 241, 242, 243, 249, 252, 256, 258, 259, 261, 262, 264, 265, 267, 268, 269, 276, 280, 283], "fit": [6, 7, 116, 138, 150, 154, 169, 191, 194, 212, 215, 216, 218, 221, 226, 227, 232, 233, 234, 235, 256, 257, 273, 276, 277, 278, 279], "pb": [6, 7, 138, 146, 150, 185, 212, 221, 226, 233, 235, 256, 259, 267, 283, 288], "eval_dataload": [6, 7, 10, 11, 42, 43, 113, 114, 116, 119, 120, 122, 138, 150, 151, 152, 154, 155, 159, 160, 162, 169, 212, 227, 232, 233, 256, 276, 277, 285], "x": [7, 28, 53, 69, 116, 154, 186, 187, 213, 214, 218, 221, 234, 235, 262, 263, 267, 268, 270, 276, 277, 282, 283, 284, 286], "dotdict": [7, 148, 180], "access": [7, 175, 180, 249, 252, 256], "yaml": [7, 10, 11, 12, 14, 29, 42, 43, 54, 56, 70, 75, 86, 87, 88, 90, 99, 104, 112, 113, 179, 180, 195, 197, 227, 232, 233, 271, 275, 283, 284], "attribut": [7, 180, 195, 215, 225, 227, 233, 275, 287], "instead": [7, 53, 180, 240, 242, 245, 260, 273, 279], "dictionari": [7, 27, 68, 80, 87, 90, 92, 133, 180], "notat": [7, 180], "option": [7, 10, 11, 12, 28, 42, 43, 54, 69, 73, 74, 80, 86, 107, 113, 126, 133, 137, 138, 150, 166, 168, 169, 173, 175, 180, 185, 196, 197, 214, 215, 216, 225, 229, 233, 248, 262, 265, 267, 268, 269, 273, 276, 279, 281, 282, 284, 285, 287], "random_se": [7, 116, 154, 233, 287], "1978": 7, "workspac": [7, 179, 180, 235, 262, 267, 268, 269], "default_workspac": 7, "resume_from": [7, 180], "tensorboard": [7, 172, 180, 195, 233, 257], "global": [7, 93, 94, 96, 97, 98, 107, 168, 180, 183, 191, 233, 273, 275, 285], "creat": [7, 12, 14, 31, 44, 54, 56, 80, 90, 91, 126, 133, 166, 168, 172, 187, 189, 192, 195, 216, 235, 247, 249, 251, 252, 255, 267, 268, 269, 273, 276, 281, 283, 285, 286], "you": [7, 12, 52, 54, 109, 137, 150, 190, 191, 196, 214, 215, 216, 218, 221, 229, 230, 232, 234, 237, 239, 240, 242, 247, 251, 254, 255, 256, 257, 258, 259, 260, 262, 273, 276, 279, 280, 281, 282, 283, 286], "want": [7, 12, 52, 54, 109, 155, 169, 191, 195, 215, 216, 221, 233, 242, 254, 255, 262, 271, 276, 279, 281, 283, 285], "should": [7, 10, 11, 12, 14, 28, 33, 42, 43, 52, 54, 56, 69, 74, 78, 131, 137, 138, 150, 169, 180, 183, 184, 185, 187, 191, 192, 195, 196, 197, 216, 219, 221, 232, 233, 240, 249, 252, 254, 256, 257, 271, 273, 276, 279, 284, 285, 287], "function": [7, 10, 11, 13, 42, 43, 55, 87, 90, 99, 104, 173, 185, 190, 191, 192, 195, 196, 197, 212, 215, 219, 220, 223, 227, 228, 229, 231, 232, 233, 234, 245, 255, 261, 262, 273, 276, 279, 280, 281, 282, 283, 285, 286], "util": [7, 37, 78, 108, 118, 129, 131, 158, 185, 196, 197, 198, 213, 214, 221, 233, 237, 257, 273, 276, 285, 286], "set_random_se": [7, 180], "seed": [7, 92, 180, 233, 287], "int": [7, 12, 13, 24, 28, 53, 54, 55, 66, 69, 73, 74, 78, 80, 84, 91, 131, 133, 137, 168, 175, 180, 185, 194, 214, 215, 216, 232, 233, 265, 275, 279, 284], "set_workspac": [7, 180], "set_resume_from": [7, 180], "set_tensorboard": [7, 180], "bool": [7, 12, 14, 24, 28, 54, 56, 66, 69, 74, 78, 84, 107, 125, 131, 137, 165, 175, 179, 180, 215, 216, 232, 265, 275, 284], "random": [7, 24, 28, 66, 69, 92, 116, 118, 154, 158, 180, 192, 233, 273, 275, 284, 287], "default": [7, 10, 11, 12, 13, 14, 24, 28, 42, 43, 46, 54, 55, 56, 66, 69, 73, 74, 77, 86, 108, 128, 130, 137, 146, 168, 172, 175, 180, 185, 186, 191, 195, 214, 215, 216, 225, 228, 229, 232, 233, 234, 236, 242, 245, 247, 251, 259, 262, 267, 268, 269, 271, 273, 275, 276, 278, 279, 281, 282, 284, 285, 287], "directori": [7, 13, 14, 55, 56, 146, 175, 177, 179, 180, 216, 221, 224, 247, 249, 251, 252, 258, 260, 283], "where": [7, 80, 84, 133, 137, 168, 180, 197, 213, 218, 219, 247, 251, 255, 282, 283], "intermedi": [7, 30, 187, 191, 228, 276], "histori": [7, 179, 180, 254, 258, 285], "ar": [7, 12, 28, 54, 69, 80, 84, 91, 107, 108, 109, 113, 115, 116, 133, 137, 151, 153, 154, 168, 172, 179, 180, 184, 185, 187, 189, 190, 191, 192, 195, 196, 214, 215, 216, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 240, 242, 245, 248, 254, 256, 257, 259, 260, 261, 262, 265, 271, 272, 273, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287], "store": [7, 14, 56, 102, 109, 227], "nc_workspac": [7, 257, 258], "format": [7, 12, 13, 14, 54, 55, 56, 74, 80, 86, 126, 133, 166, 175, 185, 187, 194, 196, 197, 214, 216, 221, 223, 232, 233, 234, 235, 236, 237, 259, 262, 274, 276, 279, 280], "datetim": 7, "now": [7, 28, 69, 191, 192, 197, 216, 221, 245, 275, 284, 285], "strftime": 7, "y": [7, 28, 69, 116, 154, 214, 218, 224, 240, 282, 284], "m": [7, 107, 190, 219, 229, 237, 239, 242, 245, 249, 252, 262, 273, 288], "d_": 7, "h": [7, 28, 69, 221, 262, 263, 267, 268, 269, 284], "resum": [7, 10, 11, 42, 43, 114, 120, 122, 151, 152, 154, 155, 159, 160, 162], "wa": [7, 195, 233, 236, 259, 260, 263, 274, 285], "automat": [7, 14, 17, 24, 56, 59, 66, 75, 85, 112, 185, 191, 194, 212, 216, 228, 233, 234, 237, 239, 242, 243, 245, 247, 248, 249, 251, 252, 254, 261, 264, 272, 273, 276, 282, 284, 285], "save": [7, 14, 56, 73, 74, 113, 146, 150, 169, 170, 175, 180, 183, 191, 195, 227, 233, 234, 235, 238, 242, 247, 251, 257, 262, 267, 268, 269, 272, 276, 277, 279, 282], "dure": [7, 107, 111, 148, 180, 185, 187, 196, 218, 233, 235, 261, 271, 272, 273, 276, 282, 283, 287], "last": [7, 187, 215, 234, 237, 239, 244, 248, 276, 279, 282], "flag": [7, 78, 131, 218], "indic": [7, 12, 47, 52, 54, 70, 80, 91, 133, 185, 191, 215, 224, 257, 262, 283], "whether": [7, 12, 24, 28, 52, 54, 66, 69, 78, 80, 84, 107, 131, 133, 137, 172, 175, 179, 180, 195, 216, 232, 276, 279, 282, 284], "each": [7, 14, 17, 24, 28, 52, 56, 59, 66, 69, 78, 80, 81, 82, 119, 131, 133, 134, 135, 159, 180, 184, 190, 195, 196, 197, 214, 216, 218, 219, 220, 225, 233, 239, 245, 248, 254, 262, 264, 271, 273, 277, 279, 281, 283, 284, 285, 286], "visual": [7, 194, 245, 254, 281, 283, 285, 286], "displai": [7, 125, 126, 165, 166, 180, 254, 257], "2022": [7, 230, 273, 279, 282], "workspace_path": 7, "output": [7, 10, 11, 33, 37, 42, 43, 73, 74, 77, 107, 130, 137, 138, 146, 150, 169, 175, 176, 180, 183, 191, 195, 196, 219, 220, 221, 223, 225, 227, 232, 233, 235, 245, 254, 255, 257, 262, 263, 267, 268, 269, 272, 273, 275, 276, 279, 280, 282, 283, 284, 285, 287], "devic": [7, 175, 194, 196, 215, 219, 233, 234, 237, 240, 245, 254, 273, 275, 277, 279], "cpu": [7, 175, 180, 185, 194, 196, 212, 213, 228, 233, 234, 237, 239, 245, 254, 262, 274, 275, 276, 277, 278, 279, 283], "warmup": [7, 212, 233, 275], "model_nam": [7, 194], "inter_num_of_thread": [7, 233, 275], "intra_num_of_thread": [7, 233, 275], "diagnosi": [7, 233, 257, 258, 259, 274, 280, 286], "ni_workload_nam": 7, "benchmark": [7, 31, 76, 113, 129, 148, 180, 194, 202, 235, 237, 241, 245, 248, 254, 257, 285, 286, 287, 288], "A": [7, 14, 28, 31, 33, 34, 56, 69, 70, 77, 80, 81, 82, 84, 87, 90, 91, 92, 99, 102, 104, 107, 108, 109, 110, 111, 116, 130, 133, 134, 135, 137, 138, 142, 146, 154, 169, 180, 190, 194, 196, 214, 215, 216, 222, 225, 232, 233, 235, 247, 248, 251, 254, 262, 273, 274, 276, 279, 282, 284, 285, 287], "empti": [7, 240, 277], "includ": [7, 12, 14, 21, 28, 30, 54, 56, 63, 69, 75, 85, 107, 112, 180, 185, 186, 189, 195, 196, 197, 215, 216, 218, 229, 230, 231, 232, 233, 237, 240, 243, 248, 260, 264, 267, 268, 269, 273, 276, 278, 279, 283, 285], "itex": [7, 73, 185, 234, 276, 282], "ipex": [7, 179, 228, 231, 233, 234, 239, 243, 244, 282], "onnxrt_trt_ep": [7, 234, 276], "onnxrt_cuda_ep": [7, 234, 276], "onnxrt_dnnl_ep": [7, 234, 276], "onnxrt_dml_ep": [7, 276], "number": [7, 13, 24, 28, 52, 55, 66, 69, 81, 82, 84, 107, 116, 134, 135, 137, 154, 172, 180, 186, 187, 212, 215, 216, 221, 232, 262, 264, 273, 276, 279, 281, 282, 284, 285], "inter": 7, "oper": [7, 24, 66, 107, 183, 184, 187, 191, 212, 215, 218, 223, 254, 260, 273, 276, 279, 282, 284, 285], "intra": 7, "accuracycriterion": [7, 233, 285], "higher_is_bett": [7, 137, 150, 285, 287], "criterion": [7, 32, 35, 219, 220, 233, 273, 276, 282, 285, 287], "rel": [7, 148, 233, 257, 275, 285, 287, 288], "tolerable_loss": [7, 186, 233, 285], "01": [7, 231, 233, 275, 279, 285, 287, 288], "metric": [7, 10, 11, 32, 42, 43, 70, 75, 76, 91, 99, 104, 112, 113, 129, 138, 150, 169, 172, 184, 192, 195, 196, 216, 218, 221, 233, 234, 256, 276, 281, 282, 283, 285, 286, 287, 288], "higher": [7, 10, 11, 42, 43, 91, 138, 150, 169, 187, 191, 218, 219, 223, 232, 257, 273, 276, 279, 281], "better": [7, 10, 11, 42, 43, 91, 138, 150, 169, 187, 214, 220, 232, 234, 273, 274, 276, 279, 281, 282, 285], "loss": [7, 30, 75, 84, 99, 104, 112, 137, 169, 185, 187, 213, 218, 219, 220, 221, 222, 231, 232, 233, 234, 245, 257, 259, 272, 273, 274, 276, 279, 282, 285, 287], "absolut": [7, 84, 137, 187, 232, 233, 236, 273, 276, 285], "float": [7, 12, 24, 54, 66, 78, 80, 81, 82, 109, 131, 133, 134, 135, 165, 177, 180, 183, 184, 186, 187, 214, 216, 232, 236, 275, 276, 282, 284], "how": [7, 28, 69, 70, 107, 183, 184, 185, 190, 191, 193, 195, 215, 216, 219, 220, 221, 227, 232, 233, 248, 249, 252, 253, 254, 256, 267, 268, 269, 273, 274, 276, 282, 284, 285, 286, 287], "much": [7, 28, 69, 70, 219, 248, 282, 284], "accept": [7, 186, 189, 212, 214, 215, 256, 279], "accuracy_criterion": [7, 148, 233, 258, 271, 275, 285, 287], "avail": [7, 142, 194, 198, 200, 204, 207, 210, 214, 222, 224, 226, 228, 247, 251, 256, 261, 262, 263, 267, 268, 269, 273, 285, 288], "tuningcriterion": [7, 233, 271, 281, 285], "strategi": [7, 8, 14, 40, 56, 76, 129, 186, 187, 194, 195, 196, 197, 202, 213, 214, 215, 221, 228, 233, 242, 254, 259, 274, 275, 276, 278, 279, 280, 286, 287], "basic": [7, 27, 68, 87, 107, 118, 122, 125, 158, 162, 165, 169, 228, 229, 233, 236, 256, 275, 281], "strategy_kwarg": [7, 281, 285], "timeout": [7, 233, 275, 285, 287], "max_trial": [7, 186, 233, 285], "doc": [7, 107, 125, 126, 137, 150, 165, 166, 180, 232, 233, 249, 252, 260], "tuning_strategi": 7, "md": [7, 107, 137, 150], "constraint": [7, 75, 112, 233, 273, 281, 285, 287], "guarante": [7, 233], "models": [7, 148, 233, 271, 275], "footprint": [7, 75, 99, 104, 112, 148, 220, 233, 271, 273, 275, 277], "second": [7, 12, 54, 155, 180, 218, 233, 247, 251, 255, 267, 268, 279, 282, 285, 287], "which": [7, 12, 13, 14, 24, 29, 54, 55, 56, 66, 77, 82, 91, 93, 94, 96, 97, 98, 102, 107, 108, 109, 111, 116, 130, 135, 137, 142, 148, 150, 154, 180, 183, 185, 186, 187, 189, 191, 192, 194, 195, 196, 197, 213, 215, 216, 218, 219, 221, 224, 225, 228, 232, 233, 234, 235, 238, 242, 245, 248, 254, 255, 256, 259, 262, 267, 268, 269, 272, 273, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287], "mean": [7, 24, 28, 66, 69, 82, 84, 107, 119, 135, 137, 159, 183, 191, 196, 197, 215, 218, 221, 225, 232, 233, 240, 259, 273, 276, 277, 279, 282, 284, 285, 287, 288], "earli": [7, 187, 233, 276, 285, 287], "stop": [7, 186, 233, 285, 286, 287], "time": [7, 28, 69, 84, 116, 137, 148, 154, 180, 184, 186, 187, 196, 215, 218, 221, 224, 233, 242, 244, 247, 251, 254, 255, 260, 263, 267, 268, 271, 273, 274, 276, 279, 281, 282, 283, 284, 285], "combin": [7, 10, 11, 24, 38, 42, 43, 66, 138, 150, 169, 180, 184, 191, 195, 228, 233, 272, 274, 276, 278, 279, 284, 285], "field": [7, 14, 56, 80, 133, 191, 195, 197, 221, 233, 236, 281, 285, 287], "decid": [7, 78, 109, 131, 185, 195, 196, 233, 276, 280, 285], "when": [7, 12, 13, 21, 28, 54, 55, 63, 69, 78, 108, 109, 131, 150, 169, 185, 186, 187, 189, 192, 196, 214, 215, 216, 233, 245, 247, 248, 251, 255, 256, 259, 260, 261, 263, 267, 273, 276, 279, 282, 284, 285], "exit": [7, 115, 151, 153, 186, 233, 262, 267, 268, 269, 287], "tuning_criterion": [7, 233, 271, 281, 285], "posttrainingquantconfig": [7, 150, 191, 194, 197, 215, 218, 223, 226, 232, 233, 235, 256, 257, 258, 259, 276, 277, 278, 279, 281, 282, 285], "domain": [7, 273, 285], "auto": [7, 114, 152, 158, 180, 191, 213, 237, 240, 242, 244, 245, 273, 276, 279], "recip": [7, 75, 112, 186, 194, 233, 236, 277, 279, 282, 285], "quant_format": [7, 74, 223, 257], "approach": [7, 87, 88, 90, 191, 192, 194, 213, 216, 219, 228, 233, 242, 254, 257, 265, 267, 268, 269, 273, 274, 275, 277, 279, 285, 287], "calibration_sampling_s": [7, 233, 259], "op_type_dict": [7, 194, 197, 275, 276, 279, 285], "op_name_dict": [7, 218, 233, 257, 259, 276, 285], "reduce_rang": [7, 197, 275], "example_input": [7, 74, 179, 223], "excluded_precis": [7, 278], "quant_level": [7, 257, 279, 282, 285], "gpu": [7, 185, 194, 212, 228, 233, 234, 239, 245, 254, 275, 276, 277], "npu": [7, 276], "xpu": [7, 185, 245, 276], "cv": [7, 185, 273], "object_detect": [7, 80, 133], "nlp": [7, 110, 185, 187, 242, 258, 273, 276], "recommendation_system": 7, "adaptor": [7, 128, 168, 172, 194, 197, 228, 277, 278, 280, 282, 283, 286], "explicitli": [7, 227, 273], "overrid": [7, 180, 214], "detect": [7, 80, 84, 133, 137, 142, 190, 191, 237, 244, 245, 273, 285], "quantiztaion": 7, "below": [7, 113, 137, 150, 185, 186, 187, 190, 191, 194, 195, 196, 197, 215, 218, 219, 221, 227, 232, 236, 237, 239, 247, 248, 251, 254, 257, 262, 271, 272, 273, 275, 276, 279, 281, 282, 283, 285, 286], "do": [7, 12, 53, 54, 70, 74, 77, 80, 110, 130, 133, 179, 189, 196, 214, 216, 221, 225, 228, 232, 233, 249, 252, 273, 278, 280, 282, 285], "quant": [7, 126, 166, 191, 214, 231, 233, 276], "smooth_quant_arg": [7, 276, 282], "layer_wise_qu": [7, 277], "fast": [7, 185, 273, 274, 279], "bia": [7, 279, 283], "gemm_to_matmul": [7, 276], "convert": [7, 12, 24, 27, 28, 54, 66, 68, 69, 73, 80, 86, 108, 126, 133, 166, 184, 187, 191, 196, 233, 234, 239, 276, 278, 279, 282, 284, 285], "gemm": 7, "matmul": [7, 107, 225, 257, 279, 285], "add": [7, 12, 14, 35, 54, 56, 108, 126, 166, 180, 190, 191, 194, 197, 215, 216, 221, 223, 225, 232, 233, 249, 252, 256, 257, 264, 267, 268, 281, 282, 283, 285, 286], "valid": [7, 14, 56, 80, 108, 109, 133, 146, 192, 194, 195, 216, 218, 219, 222, 225, 228, 230, 233, 245, 259, 273, 276, 279, 280], "graph_optimization_level": [7, 275, 276], "disable_al": [7, 275], "enable_bas": 7, "enable_extend": 7, "enable_al": 7, "first_conv_or_matmul_quant": [7, 276], "last_conv_or_matmul_quant": [7, 276], "pre_post_process_quant": [7, 276], "preprocess": [7, 12, 28, 54, 69, 168, 172, 221, 284], "postprocess": [7, 25, 28, 32, 69, 137, 150, 172, 195, 233, 283, 284], "add_qdq_pair_to_weight": [7, 276], "qdq": [7, 72, 73, 74, 184, 195, 218, 223, 228, 244, 245, 276, 280, 282], "pair": [7, 196, 215, 233, 234, 280], "optypes_to_exclude_output_qu": [7, 276], "optyp": [7, 72, 196], "dedicated_qdq_pair": [7, 276], "dedic": 7, "qoper": [7, 223, 257], "requir": [7, 113, 146, 185, 187, 191, 195, 196, 212, 213, 215, 218, 220, 221, 225, 233, 234, 235, 238, 248, 254, 256, 261, 262, 265, 268, 269, 273, 276, 279, 280, 281, 282, 283, 285, 287], "onnxruntim": [7, 14, 21, 50, 56, 63, 85, 195, 213, 215, 228, 229, 234, 257, 275], "tensorflow": [7, 12, 13, 14, 17, 19, 21, 28, 35, 53, 54, 55, 56, 59, 61, 63, 69, 73, 74, 75, 78, 80, 84, 85, 86, 112, 120, 131, 133, 137, 138, 146, 150, 160, 180, 184, 190, 192, 194, 195, 196, 213, 214, 215, 218, 219, 220, 222, 225, 226, 228, 229, 233, 234, 235, 236, 244, 245, 256, 259, 273, 274, 275, 281, 282, 285, 287], "method": [7, 12, 14, 21, 28, 31, 47, 52, 53, 54, 56, 63, 69, 90, 91, 92, 126, 166, 168, 172, 173, 175, 176, 183, 185, 187, 191, 192, 194, 213, 214, 215, 216, 218, 219, 220, 232, 233, 272, 273, 276, 278, 279, 282, 284, 285], "dynam": [7, 44, 74, 126, 166, 195, 215, 219, 223, 228, 233, 237, 242, 243, 244, 245, 248, 254, 274, 285, 288], "weight_onli": [7, 179, 194, 214, 236, 277, 279], "ptq": [7, 150, 184, 185, 191, 218, 221, 228, 233, 259, 276, 282, 283, 285], "both": [7, 183, 187, 189, 192, 195, 220, 233, 238, 257, 259, 261, 273, 275, 276, 279, 282, 285], "tri": [7, 214, 285], "meet": [7, 113, 115, 151, 153, 183, 185, 186, 191, 196, 271, 274, 275, 276, 279, 283, 285], "criteria": [7, 75, 99, 104, 107, 109, 112, 186, 191, 254, 282], "bayesian": [7, 92, 118, 158, 192, 273, 275], "mse": [7, 84, 118, 137, 150, 158, 180, 218, 232, 259, 275, 279, 280], "mse_v2": [7, 118, 158], "hawq_v2": [7, 158], "exhaust": [7, 92, 118, 158, 275], "els": [7, 52, 148, 177, 242, 279, 283], "sampl": [7, 12, 13, 14, 24, 28, 47, 52, 54, 55, 56, 66, 69, 84, 91, 116, 137, 154, 185, 186, 187, 192, 215, 216, 222, 228, 255, 276, 279, 282, 284, 285, 287, 288], "advanc": [7, 183, 185, 187, 189, 194, 196, 202, 231, 236, 273, 276, 279, 287], "reduc": [7, 184, 185, 187, 195, 213, 220, 233, 234, 254, 255, 273, 274, 276, 277, 278, 279, 282, 285, 287], "dtype": [7, 15, 16, 24, 28, 57, 58, 66, 69, 175, 194, 196, 197, 216, 218, 223, 225, 237, 259, 275, 276, 279, 282, 283, 284, 287], "activ": [7, 37, 126, 166, 168, 184, 185, 187, 195, 196, 197, 213, 218, 220, 225, 233, 255, 256, 259, 267, 268, 269, 275, 276, 279, 282, 283, 287], "layer1": [7, 233, 273, 276], "conv1": [7, 183, 276, 287], "bit": [7, 168, 187, 194, 197, 213, 220, 234, 236, 274, 276, 279, 282], "precis": [7, 10, 11, 42, 43, 75, 82, 84, 85, 112, 114, 126, 135, 137, 138, 148, 152, 155, 166, 180, 185, 186, 187, 194, 195, 196, 202, 212, 213, 220, 221, 225, 228, 236, 237, 243, 244, 245, 274, 275, 276, 279, 282, 285, 286], "exclud": [7, 195, 213, 278], "enabl": [7, 109, 196, 197, 221, 229, 234, 237, 239, 242, 243, 245, 256, 258, 259, 261, 264, 273, 274, 282, 285], "mix": [7, 114, 126, 138, 152, 166, 194, 195, 202, 228, 237, 243, 244, 245, 286], "bf16": [7, 126, 166, 195, 196, 225, 233, 239, 244, 248, 254, 278, 285, 288], "disabl": [7, 189, 254, 259, 278, 279, 282], "conserv": [7, 158], "In": [7, 38, 53, 80, 107, 109, 133, 148, 185, 189, 191, 192, 194, 195, 196, 215, 216, 218, 219, 220, 221, 232, 233, 244, 247, 248, 251, 257, 258, 259, 260, 267, 268, 269, 271, 272, 273, 276, 278, 279, 281, 282, 283, 284, 285, 286], "docstr": 7, "workload": [7, 177, 180, 256, 274], "insight": [7, 177, 194, 218, 274, 280, 285, 286], "quantizationawaretrainingconfig": [7, 169, 191, 220, 223, 233, 276, 278, 285], "awar": [7, 38, 86, 107, 157, 169, 186, 195, 196, 197, 213, 220, 221, 223, 228, 254, 264, 272, 274, 279, 285], "qat": [7, 86, 146, 220, 221, 228, 233, 276], "copi": [7, 108, 180, 215, 260], "deepcopi": 7, "model_origin": [7, 150, 278], "qat_op_name_dict": 7, "compression_manag": [7, 169, 191, 219, 220, 233, 272, 273, 276], "prepare_compress": [7, 169, 191, 219, 220, 233, 272, 273, 276], "weightpruningconfig": [7, 233, 272, 273], "pruning_config": [7, 233, 273], "target_spars": [7, 233, 273, 275, 287], "9": [7, 191, 229, 233, 273, 275, 282, 285, 287, 288], "pruning_typ": [7, 233, 273], "snip_momentum": [7, 233, 273], "pattern": [7, 14, 56, 97, 98, 100, 105, 109, 126, 166, 184, 195, 214, 216, 225, 228, 233, 255, 272, 275, 282, 285, 288], "4x1": [7, 103, 233, 273, 288], "op_nam": [7, 127, 167, 180, 181, 196, 233, 273, 283], "excluded_op_nam": [7, 233, 273], "start_step": [7, 109, 233, 273, 275], "end_step": [7, 109, 233, 273, 275], "pruning_scop": [7, 233, 273], "pruning_frequ": [7, 233, 273], "min_sparsity_ratio_per_op": [7, 233, 273], "max_sparsity_ratio_per_op": [7, 233, 273], "98": [7, 233, 273, 275, 288], "sparsity_decay_typ": [7, 233, 273], "exp": [7, 233, 236, 273], "pruning_op_typ": [7, 233, 273], "low_memory_usag": 7, "kwarg": [7, 14, 26, 28, 33, 36, 56, 69, 125, 127, 137, 138, 139, 141, 143, 145, 146, 147, 150, 165, 167, 169, 175, 176, 179, 180, 215], "prune": [7, 38, 39, 76, 93, 94, 96, 97, 98, 102, 104, 105, 107, 108, 109, 111, 113, 180, 194, 221, 222, 225, 226, 228, 272, 274, 286, 287], "defin": [7, 10, 11, 42, 43, 87, 88, 90, 91, 92, 99, 104, 107, 108, 109, 111, 138, 150, 169, 179, 183, 185, 186, 187, 189, 192, 195, 196, 215, 216, 219, 220, 225, 228, 232, 233, 255, 272, 273, 276, 279, 281, 282, 283, 285, 287], "singl": [7, 12, 28, 47, 54, 69, 80, 109, 111, 133, 137, 150, 191, 216, 218, 229, 260, 273, 277, 282], "sequenc": [7, 12, 27, 28, 54, 68, 69, 78, 82, 107, 131, 135, 195, 216, 225, 273, 279, 284], "local": [7, 107, 180, 183, 247, 251, 256, 263, 264, 273, 281], "link": [7, 12, 54, 137, 150, 213, 216, 223, 247, 251, 254, 279, 288], "out": [7, 12, 13, 14, 54, 55, 56, 75, 107, 112, 183, 185, 187, 190, 191, 194, 216, 237, 242, 247, 248, 249, 251, 252, 254, 260, 273, 275, 276, 279], "By": [7, 77, 130, 196, 197, 232, 235, 247, 248, 251, 273, 274, 279, 285], "correspond": [7, 12, 54, 77, 80, 84, 130, 133, 137, 172, 180, 187, 195, 225, 233, 273, 275, 276, 281, 285], "sparsiti": [7, 109, 111, 180, 194, 216, 228, 233, 286, 288], "reach": [7, 111, 190, 215, 256, 273, 285], "after": [7, 12, 24, 28, 31, 54, 66, 69, 109, 155, 175, 180, 184, 187, 192, 194, 196, 216, 218, 219, 220, 223, 228, 232, 233, 247, 248, 251, 255, 259, 271, 272, 273, 276, 278, 279, 281, 282, 283, 284, 285], "90": [7, 231, 277, 287, 288], "magnitud": [7, 84, 95, 137, 228, 273], "snip": [7, 109, 228, 273, 288], "magnitude_progress": 7, "snip_progress": 7, "snip_momentum_progress": 7, "pattern_lock": [7, 95], "most": [7, 84, 137, 185, 218, 233, 234, 273, 276, 279, 282, 285, 288], "feasibl": 7, "under": [7, 14, 56, 175, 179, 186, 190, 192, 194, 216, 230, 232, 233, 237, 242, 243, 254, 262, 272, 273, 274, 277, 279, 283, 285], "situat": [7, 221, 273], "structur": [7, 109, 127, 167, 180, 187, 228, 253, 255, 258, 267, 273, 274, 276, 283, 286, 288], "unstructur": [7, 103, 228, 273, 288], "nxm": [7, 103, 107, 273], "e": [7, 189, 190, 194, 219, 222, 226, 237, 242, 243, 247, 251, 273, 279, 282, 285], "g": [7, 190, 219, 222, 226, 237, 242, 273, 279, 280, 282, 285], "8x1": 7, "channelx1": [7, 273], "1xchannel": [7, 273], "n": [7, 13, 28, 55, 69, 78, 107, 131, 197, 214, 216, 218, 219, 262, 273, 276, 282, 284], "directli": [7, 53, 80, 84, 108, 133, 137, 183, 194, 232, 233, 241, 273, 275, 276, 283], "our": [7, 192, 194, 223, 233, 236, 255, 256, 259, 281, 286], "itrex": [7, 282], "some": [7, 12, 54, 108, 187, 196, 197, 214, 216, 218, 223, 229, 232, 233, 256, 257, 258, 259, 262, 271, 273, 276, 278, 279, 282, 283, 285, 286], "step": [7, 107, 109, 111, 169, 196, 197, 218, 219, 220, 221, 233, 249, 252, 254, 267, 268, 269, 272, 273, 275, 278, 279, 281, 282, 283, 285], "start": [7, 28, 69, 80, 133, 155, 229, 259, 274, 284, 285, 286, 289], "integ": [7, 70, 80, 84, 91, 107, 109, 133, 137, 184, 187, 195, 197, 213, 276, 279, 282, 285], "end": [7, 12, 27, 28, 54, 68, 69, 109, 115, 151, 153, 195, 196, 197, 219, 220, 225, 229, 233, 248, 264, 271, 273, 279, 283, 284, 285], "determin": [7, 174, 186, 189, 191, 213, 273, 276], "score": [7, 77, 78, 80, 81, 82, 84, 109, 130, 131, 133, 134, 135, 137, 157, 172, 191, 232, 257, 271, 273, 281, 285], "gather": [7, 107], "togeth": [7, 28, 69, 219, 229, 241, 274, 283, 284], "sort": [7, 119, 159, 218, 257, 279, 285], "sinc": [7, 75, 77, 99, 104, 112, 130, 219, 223, 229, 232, 248, 254, 259, 272, 279, 280], "lead": [7, 185, 214, 219, 233, 234, 259, 273, 279, 282], "less": [7, 180, 212, 219, 233, 261, 273], "frequenc": [7, 70, 109, 233, 273, 287], "minimum": [7, 197, 213, 218, 233, 236, 245, 273, 282, 285], "restrict": [7, 273, 281], "everi": [7, 107, 109, 195, 215, 242, 247, 251, 277, 279, 285], "maximum": [7, 12, 28, 54, 69, 78, 109, 116, 131, 146, 154, 187, 197, 213, 216, 218, 233, 273, 276, 282, 284], "schedul": [7, 76, 105, 109, 233, 261, 262, 264, 272], "increas": [7, 217, 228, 236, 237, 254, 259, 279, 285], "cube": [7, 273], "current": [7, 86, 93, 94, 96, 97, 98, 107, 109, 116, 120, 154, 160, 180, 186, 191, 192, 195, 197, 213, 214, 221, 225, 233, 237, 241, 254, 262, 271, 273, 276, 279, 282, 285], "local_config": [7, 93, 94, 96, 97, 98], "6": [7, 184, 187, 225, 236, 276, 282, 285, 288], "queri": [7, 187, 196, 197, 264, 276], "kei": [7, 91, 108, 146, 170, 172, 180, 194, 196, 256, 257, 263, 274, 279, 283, 285], "self": [7, 148, 195, 196, 215, 216, 228, 232, 256, 281, 283, 285], "attent": [7, 12, 54, 189, 219, 273], "dens": [7, 111, 257, 273, 288], "8": [7, 27, 68, 191, 196, 213, 214, 225, 229, 236, 261, 262, 273, 274, 279, 282, 285, 288], "update_config": 7, "10": [7, 14, 56, 116, 154, 186, 194, 212, 216, 223, 229, 231, 233, 256, 257, 273, 275, 284, 285, 288], "hpoconfig": 7, "search_spac": [7, 87, 90, 91, 92], "searcher": [7, 92], "xgb": 7, "loss_typ": [7, 30, 233, 287], "reg": 7, "min_train_sampl": 7, "42": [7, 92, 231, 288], "hyperparamet": [7, 125, 281, 282, 285], "optim": [7, 32, 38, 75, 92, 112, 116, 154, 169, 170, 177, 180, 184, 185, 186, 187, 192, 194, 212, 214, 218, 219, 220, 221, 225, 226, 228, 229, 231, 233, 235, 237, 239, 241, 242, 245, 248, 256, 259, 260, 261, 263, 265, 274, 275, 276, 278, 279, 281, 282, 283, 285, 287], "search": [7, 10, 11, 42, 43, 75, 77, 87, 90, 91, 92, 112, 116, 130, 154, 180, 184, 194, 214, 228, 232, 237, 238, 248, 273, 274, 279, 282, 283, 285, 286], "algorithm": [7, 77, 84, 92, 129, 130, 137, 172, 174, 185, 186, 187, 192, 194, 195, 196, 197, 214, 219, 220, 225, 228, 231, 243, 248, 273, 276, 283, 287], "grid": [7, 92, 192, 273], "bo": 7, "knowledgedistillationlossconfig": [7, 219, 220, 233, 272], "temperatur": [7, 30, 233, 287], "ce": [7, 30, 233, 287], "loss_weight": [7, 30, 233, 287], "knowledg": [7, 30, 70, 184, 220, 222, 226, 228, 233, 235, 287], "distil": [7, 30, 37, 38, 76, 194, 222, 226, 228, 272, 286, 287], "entropi": [7, 213, 285], "probabl": [7, 174, 279], "length": [7, 12, 28, 54, 69, 80, 133, 187, 216, 232, 274, 276, 279, 284], "item": [7, 27, 68, 108, 126, 166, 213, 221, 273, 282, 285], "student": [7, 12, 37, 54, 70, 216, 219, 220, 288], "groundtruth": [7, 80, 133], "label": [7, 10, 11, 12, 14, 15, 16, 17, 20, 24, 28, 33, 42, 43, 54, 56, 57, 58, 59, 62, 66, 69, 77, 79, 84, 130, 132, 137, 138, 150, 169, 185, 191, 215, 216, 218, 232, 233, 276, 284], "teacher": [7, 70, 219, 220, 233, 288], "kl": [7, 170, 174, 196, 197, 213, 225, 233, 285, 287], "sum": [7, 84, 137, 218, 219], "multipli": [7, 236, 279], "distillationconfig": [7, 169, 219, 220, 233, 272], "criterion_conf": 7, "d_conf": [7, 220, 233, 272], "teacher_model": [7, 30, 219, 220, 233], "intermediatelayersknowledgedistillationlossconfig": [7, 219], "layer_map": [7, 30, 219], "add_origin_loss": [7, 30], "map": [7, 28, 69, 72, 74, 75, 79, 81, 82, 84, 99, 104, 109, 112, 132, 134, 135, 137, 187, 214, 216, 221, 232, 233, 247, 251, 259, 273, 276, 279], "relationship": [7, 256], "student_layer_nam": 7, "student_layer_output_process": 7, "teacher_layer_nam": 7, "teacher_layer_output_process": 7, "bert": [7, 12, 28, 50, 53, 54, 69, 194, 216, 219, 232, 234, 242, 265, 268, 269, 273, 284, 288], "desir": [7, 24, 28, 66, 69, 196, 197, 273, 282, 284], "its": [7, 14, 28, 50, 56, 69, 72, 78, 79, 109, 116, 131, 132, 154, 186, 189, 216, 219, 230, 232, 234, 245, 247, 251, 254, 255, 273, 279, 281, 284, 285], "either": [7, 80, 133, 185, 186, 187, 238, 242, 262, 272, 275, 276], "take": [7, 10, 11, 28, 33, 42, 43, 47, 69, 107, 116, 137, 138, 150, 154, 169, 185, 189, 191, 192, 215, 218, 219, 225, 233, 254, 273, 276, 278, 279, 284, 285, 287], "serv": [7, 146, 187, 262, 267, 268, 269], "tupl": [7, 10, 11, 24, 28, 42, 43, 66, 69, 74, 125, 138, 150, 165, 169, 179, 185, 196, 214, 216, 232, 233, 276, 284], "numer": [7, 84, 137, 185, 197, 234, 236, 274, 276, 279], "abbrevi": 7, "same": [7, 12, 28, 54, 69, 80, 133, 180, 186, 195, 197, 212, 215, 216, 219, 221, 225, 233, 236, 238, 242, 247, 251, 273, 275, 276, 279, 282, 283, 284, 285], "further": [7, 187, 189, 194, 234, 235, 237, 239, 248, 254, 276], "layer_nam": [7, 273], "student_model": [7, 30, 233], "l1": 7, "len": [7, 28, 69, 216, 221, 284], "origin": [7, 12, 28, 29, 54, 69, 93, 94, 96, 97, 98, 108, 109, 128, 155, 168, 175, 180, 183, 185, 187, 190, 216, 242, 273, 276, 279, 284, 285, 287], "selfknowledgedistillationlossconfig": [7, 219, 233], "like": [7, 10, 11, 14, 42, 43, 44, 56, 75, 84, 109, 112, 113, 137, 146, 150, 169, 185, 187, 190, 191, 192, 195, 196, 218, 219, 220, 228, 242, 257, 259, 272, 273, 276, 279, 280, 282, 285], "student1_layer_name1": 7, "teacher_layer_name1": 7, "student2_layer_name1": 7, "student1_layer_name2": 7, "teacher_layer_name2": 7, "student2_layer_name2": 7, "calcul": [7, 15, 16, 57, 58, 81, 82, 107, 109, 119, 134, 135, 159, 170, 180, 185, 187, 213, 216, 232, 233, 245, 257, 271, 273, 276, 279, 281, 282, 285, 287], "soft": 7, "l2": [7, 273], "hard": [7, 215, 218], "resblock": 7, "featur": [7, 12, 13, 24, 28, 54, 55, 66, 69, 183, 187, 190, 194, 212, 215, 217, 219, 233, 234, 235, 237, 241, 242, 245, 254, 256, 260, 273, 274, 280, 284], "deepst": 7, "fc": [7, 273], "3": [7, 14, 28, 56, 69, 80, 133, 180, 183, 185, 186, 187, 191, 192, 194, 213, 214, 215, 216, 219, 221, 223, 225, 226, 229, 232, 233, 234, 236, 237, 241, 245, 247, 251, 256, 261, 262, 264, 265, 267, 271, 273, 274, 275, 276, 279, 280, 281, 282, 284, 285, 288], "02": [7, 288], "nn": [7, 74, 138, 150, 175, 179, 191, 219, 233, 235, 279, 282, 283], "crossentropyloss": [7, 219, 233], "sgd": [7, 35, 219, 233, 275, 287], "lr": [7, 219, 221, 233], "0001": [7, 219, 233, 275], "learning_r": [7, 233, 275, 287], "callabl": [7, 82, 135, 169, 185, 214, 215], "altern": [7, 150], "distil_loss": [7, 233], "mixedprecisionconfig": [7, 138, 233, 234], "mixedprecis": [7, 85, 233], "target": [7, 108, 111, 116, 154, 175, 216, 221, 233, 273, 283, 284, 285, 287], "convers": [7, 86, 187, 190, 195, 196, 233, 234, 276, 278, 282], "fp16": [7, 126, 166, 187, 276], "fallback": [7, 119, 120, 157, 159, 160, 223, 234, 257, 278, 285], "won": [7, 276, 279], "work": [7, 75, 112, 193, 196, 214, 215, 219, 249, 252, 260, 278, 279, 280, 282, 283], "tensor": [7, 28, 69, 72, 74, 107, 109, 119, 146, 159, 175, 179, 180, 185, 187, 191, 197, 214, 215, 216, 218, 236, 273, 276, 280, 283, 284, 285], "trace": [7, 74, 157, 191, 244, 285], "mix_precis": [7, 129, 233, 234], "converted_model": [7, 138, 233, 234], "exportconfig": 7, "opset_vers": [7, 73, 74, 223], "14": [7, 73, 74, 194, 223, 229, 269, 288], "input_nam": [7, 73, 74, 146, 223], "output_nam": [7, 73, 74, 146, 223], "dynamic_ax": [7, 74, 223], "common": [7, 26, 76, 86, 90, 91, 92, 172, 183, 184, 185, 187, 189, 214, 216, 220, 221, 223, 227, 229, 233, 276, 282], "export": [7, 76, 80, 133, 194, 226, 240, 255, 257, 283, 286], "select": [7, 12, 54, 175, 187, 191, 192, 213, 228, 229, 254, 273, 276, 279, 283, 285], "opset": [7, 73, 74, 223], "version": [7, 73, 74, 129, 189, 191, 195, 214, 225, 229, 230, 233, 247, 249, 251, 252, 274, 282, 285, 286], "qlinear": [7, 14, 21, 56, 63, 84, 137, 195, 244], "ax": [7, 74], "inform": [7, 10, 11, 31, 33, 34, 42, 43, 107, 109, 110, 111, 113, 137, 180, 185, 189, 190, 193, 194, 195, 196, 197, 198, 200, 204, 207, 210, 213, 214, 219, 225, 233, 235, 236, 249, 252, 255, 256, 259, 260, 262, 263, 267, 268, 273, 278, 279, 280, 282, 283, 287, 288, 289], "onnxqlinear2qdqconfig": 7, "onnxqlinear2qdq": 7, "torch2onnxconfig": [7, 223], "torch2onnx": [7, 71], "qdq_op_fp32_bia": 7, "qdq_op_int32_bia": 7, "qdq_op_fp32_bias_qdq": 7, "resnet50": [7, 183, 194, 218, 221, 223, 234, 237, 241, 273, 276, 281, 288], "int8_onnx_config": [7, 223], "randn": [7, 223], "224": [7, 24, 66, 194, 216, 221, 223, 226, 233, 237, 256, 284, 287], "batch_siz": [7, 12, 13, 31, 44, 46, 50, 51, 52, 53, 54, 55, 74, 192, 215, 216, 221, 223, 227, 233, 237, 276], "q_model": [7, 86, 150, 184, 186, 191, 215, 216, 218, 221, 223, 226, 227, 232, 233, 235, 256, 257, 276, 277, 278, 279], "tf2onnxconfig": [7, 223], "tf2onnx": [7, 71], "axi": 7, "addit": [7, 169, 196, 197, 219, 248, 256, 262, 279, 280, 285], "keyword": 7, "argument": [7, 185, 186, 192, 218, 258, 259, 262, 265, 267, 268, 269, 279], "output_graph": 7, "nasconfig": [7, 88, 90, 192], "search_algorithm": [7, 89, 192], "dyna": [7, 89, 192, 228, 275], "na": [7, 76, 142, 228, 231, 288], "mxnet": [7, 14, 17, 21, 28, 49, 53, 56, 59, 63, 69, 75, 84, 112, 137, 138, 143, 150, 190, 194, 195, 196, 213, 215, 222, 225, 228, 233, 234, 235, 275, 285, 287], "kera": [7, 14, 21, 35, 56, 63, 141, 146, 183, 185, 196, 215, 221, 235, 244, 245], "pytorch": [7, 12, 14, 17, 21, 28, 30, 35, 37, 53, 54, 56, 59, 63, 69, 74, 75, 84, 85, 105, 107, 110, 112, 120, 137, 138, 147, 150, 160, 173, 180, 190, 191, 192, 194, 195, 196, 197, 213, 214, 215, 219, 220, 222, 225, 228, 229, 231, 233, 234, 235, 236, 237, 239, 242, 243, 244, 245, 254, 256, 265, 268, 269, 273, 274, 275, 279, 280, 282, 285, 287], "built": [8, 9, 12, 13, 18, 20, 22, 23, 24, 25, 28, 33, 35, 40, 41, 45, 48, 50, 54, 55, 60, 62, 64, 65, 66, 67, 69, 113, 137, 140, 148, 150, 169, 186, 192, 195, 216, 221, 233, 247, 251, 271, 276, 281, 284, 285, 287], "multipl": [8, 9, 12, 13, 15, 16, 17, 18, 19, 23, 25, 28, 35, 40, 41, 45, 46, 48, 54, 55, 57, 58, 59, 60, 61, 65, 67, 69, 85, 138, 139, 140, 142, 148, 185, 212, 216, 223, 233, 261, 264, 272, 273, 281, 282, 285], "sigopt": [9, 41, 274], "tpe": [9, 41], "provid": [10, 11, 28, 42, 43, 69, 75, 80, 99, 104, 112, 113, 133, 138, 150, 169, 173, 175, 183, 184, 185, 186, 187, 192, 194, 195, 196, 197, 212, 215, 218, 220, 221, 222, 228, 229, 231, 232, 233, 234, 235, 237, 241, 245, 248, 254, 255, 256, 262, 263, 273, 275, 276, 279, 282, 283, 285, 286, 287, 288], "sigopttunestrategi": [10, 42], "q_dataload": [10, 11, 42, 43, 114, 116, 119, 120, 122, 151, 152, 154, 155, 159, 160, 162, 227, 285], "q_func": [10, 11, 42, 43, 114, 116, 119, 120, 122, 151, 152, 154, 155, 159, 160, 162, 195, 196, 233, 285], "eval_func": [10, 11, 42, 43, 113, 114, 116, 119, 120, 122, 138, 150, 151, 152, 154, 155, 159, 160, 162, 169, 191, 215, 216, 218, 219, 220, 221, 233, 257, 276, 277, 278, 279, 285, 287], "eval_metr": [10, 11, 138, 150, 151, 152, 154, 155, 159, 160, 162, 169, 232, 256, 276], "q_hook": [10, 11, 42, 43, 114, 116, 119, 120, 122, 151, 152, 154, 155, 159, 160, 162], "hpo": [10, 42, 273], "low": [10, 11, 15, 16, 42, 43, 57, 58, 75, 85, 112, 138, 186, 187, 195, 196, 212, 213, 216, 221, 233, 234, 259, 274, 276, 279, 282, 285], "initi": [10, 11, 12, 30, 42, 43, 51, 54, 108, 109, 126, 150, 166, 169, 185, 192, 197, 216, 232, 253, 273, 276, 282, 285], "loader": [10, 11, 42, 43, 138, 150, 169, 175, 215, 276], "mandatori": [10, 11, 42, 43, 150, 233, 287], "It": [10, 11, 37, 42, 43, 82, 84, 91, 107, 112, 119, 135, 137, 138, 150, 155, 159, 169, 183, 185, 186, 187, 195, 196, 197, 213, 218, 219, 233, 236, 240, 243, 248, 254, 255, 256, 257, 259, 260, 262, 273, 276, 279, 280, 281, 285, 287], "yield": [10, 11, 31, 42, 43, 52, 116, 138, 150, 154, 169, 187, 215, 276, 285], "dataset": [10, 11, 23, 31, 42, 43, 44, 46, 47, 50, 51, 52, 53, 65, 80, 81, 82, 84, 113, 133, 134, 135, 137, 138, 150, 169, 172, 183, 184, 185, 187, 192, 194, 195, 196, 215, 221, 226, 232, 233, 242, 256, 257, 267, 273, 276, 279, 280, 282, 285, 287, 288], "_": [10, 11, 42, 43, 150, 185, 187, 191, 192, 194, 195, 196, 213, 218, 219, 221, 223, 225, 233, 234, 235, 237, 243, 247, 249, 251, 252, 259, 262, 263, 271, 273, 276, 279, 280, 281, 282, 283, 285, 287], "depend": [10, 11, 29, 42, 43, 138, 150, 169, 190, 224, 225, 260, 275, 276, 285], "implement": [10, 11, 12, 14, 42, 43, 49, 52, 53, 54, 56, 77, 130, 138, 148, 150, 157, 169, 197, 215, 216, 232, 233, 245, 255, 273, 276, 279, 280, 283, 285, 287], "well": [10, 11, 42, 43, 138, 150, 169, 187, 192, 194, 214, 216, 236, 273, 276, 280, 282, 287], "taken": [10, 11, 42, 43, 138, 150, 169, 276], "reserv": [10, 11, 42, 43], "abl": [10, 11, 42, 43, 138, 150, 169, 185, 187, 245, 254, 276], "pre": [10, 11, 12, 42, 43, 54, 138, 150, 169, 186, 187, 214, 216, 219, 220, 233, 242, 259, 273, 274, 276, 279, 283, 285], "through": [10, 11, 42, 43, 137, 138, 150, 194, 212, 225, 227, 228, 232, 240, 261, 271, 272, 273, 275, 276, 279], "tuner": [10, 11, 42, 43, 75, 112, 138, 150, 169, 276], "encapsul": [10, 11, 42, 43, 138, 150, 169, 235], "scalar": [10, 11, 42, 43, 138, 150, 169, 232, 276, 285], "pseudo": [10, 11, 42, 43, 150, 169, 279, 283], "code": [10, 11, 29, 42, 43, 86, 110, 113, 150, 169, 183, 191, 194, 195, 196, 197, 216, 219, 220, 221, 227, 228, 230, 232, 237, 239, 241, 242, 243, 245, 248, 254, 258, 259, 261, 262, 263, 271, 272, 273, 274, 275, 276, 281, 282, 283, 284], "someth": [10, 11, 14, 42, 43, 56, 150, 169], "def": [10, 11, 42, 43, 150, 169, 183, 185, 186, 191, 195, 214, 215, 216, 219, 220, 221, 232, 233, 276, 282, 283, 285], "fefin": [11, 43], "tpetunestrategi": [11, 43], "pytorchbertdataset": [12, 54], "task": [12, 19, 54, 61, 84, 137, 216, 219, 220, 223, 228, 232, 233, 257, 261, 264, 273, 277, 279, 282, 288], "model_typ": [12, 54, 180, 216], "transform": [12, 13, 14, 15, 16, 17, 19, 21, 23, 54, 55, 56, 57, 58, 59, 61, 63, 65, 184, 191, 192, 194, 213, 216, 219, 220, 221, 222, 226, 231, 233, 237, 242, 243, 244, 245, 257, 265, 268, 269, 273, 274, 278, 279, 282, 283, 285, 287], "filter": [12, 13, 14, 15, 16, 17, 19, 23, 54, 55, 56, 57, 58, 59, 61, 65, 180, 197, 216, 228, 273, 283], "construct": [12, 15, 16, 19, 26, 31, 33, 34, 36, 54, 57, 58, 61, 137, 142, 146, 168, 172, 186, 189, 196, 197, 216, 221, 273, 285], "tensordataset": [12, 54, 216], "full": [12, 13, 14, 54, 55, 56, 175, 180, 194, 213, 216, 218, 224, 230, 255, 260, 273, 279, 280], "repo": [12, 54, 188, 190, 216, 222, 247, 249, 251, 252, 289], "http": [12, 14, 54, 56, 77, 78, 80, 81, 82, 107, 109, 110, 130, 131, 133, 134, 135, 137, 150, 191, 216, 218, 226, 229, 230, 233, 243, 249, 252, 256, 258, 259, 260, 261, 262, 265, 267, 268, 269, 273, 280], "github": [12, 54, 77, 78, 81, 82, 107, 110, 130, 131, 134, 135, 137, 150, 190, 194, 216, 218, 222, 229, 230, 233, 243, 249, 252, 256, 258, 259, 260, 261, 262, 265, 268, 269, 280], "com": [12, 54, 77, 78, 81, 82, 107, 110, 130, 131, 134, 135, 137, 150, 189, 214, 216, 218, 226, 229, 230, 233, 237, 243, 256, 258, 259, 261, 262, 265, 268, 269, 280, 281, 288], "huggingfac": [12, 54, 175, 216, 222, 226, 236, 242, 243, 244, 245, 265, 266, 268, 269, 282, 288], "your": [12, 52, 54, 190, 194, 214, 215, 216, 218, 221, 230, 233, 237, 240, 241, 242, 247, 248, 249, 251, 252, 254, 256, 260, 262, 267, 268, 269, 273, 274, 281, 283, 285, 286], "todo": [12, 15, 54, 57, 80, 126, 133, 166], "easi": [12, 54, 112, 185, 223, 233, 257, 261, 274, 276, 279, 281], "ad": [12, 54, 77, 116, 130, 154, 196, 197, 218, 234, 237, 242, 245, 249, 252, 262, 273, 279, 283], "load": [12, 27, 28, 54, 68, 69, 138, 146, 150, 179, 180, 185, 196, 215, 247, 251, 255, 257, 275, 276, 277, 282], "arg": [12, 13, 14, 54, 55, 56, 107, 116, 154, 175, 176, 216, 221, 233, 236, 243, 273, 276, 279, 282, 283, 284], "classifi": [12, 54, 84, 137, 216, 219], "squad": [12, 28, 54, 69, 81, 82, 84, 134, 135, 137, 216, 232, 273, 284, 288], "distilbert": [12, 54, 216, 234, 274, 288], "xlnet": [12, 54, 216], "xlm": [12, 54, 216, 288], "condit": [12, 13, 14, 28, 54, 55, 56, 69, 115, 151, 153, 186, 216, 230, 284, 285], "101": [12, 54, 84, 137, 232, 263, 282, 288], "2043": [12, 54], "2001": [12, 54], "onnxrtbertdataset": [12, 54], "data_dir": [12, 54, 216], "model_name_or_path": [12, 54, 216, 233, 242, 243, 258, 265, 268, 269, 277], "max_seq_length": [12, 28, 54, 69, 216, 284], "128": [12, 15, 16, 28, 54, 57, 58, 69, 186, 187, 216, 233, 276, 279, 284, 288], "do_lower_cas": [12, 27, 28, 54, 68, 69, 216, 284], "mrpc": [12, 54, 84, 137, 216, 232, 242, 265, 268, 269, 273, 285, 288], "dynamic_length": [12, 54, 216], "onnxrt": [12, 14, 21, 28, 54, 56, 63, 69, 84, 137, 178, 195, 218, 234, 256, 276, 288], "dir": [12, 54, 175, 179, 216, 224, 227], "path": [12, 13, 14, 28, 54, 55, 56, 69, 70, 73, 74, 75, 86, 87, 88, 90, 99, 104, 108, 110, 112, 113, 126, 138, 146, 150, 166, 175, 177, 180, 191, 192, 195, 216, 218, 221, 227, 232, 233, 234, 235, 240, 243, 254, 257, 259, 262, 267, 268, 269, 272, 279, 284, 287], "shortcut": [12, 54, 216], "token": [12, 25, 28, 54, 67, 69, 77, 78, 130, 131, 175, 194, 216, 232, 233, 256, 257, 279, 281, 282, 284, 285], "longer": [12, 28, 54, 69, 216, 284], "than": [12, 28, 54, 69, 180, 187, 192, 194, 212, 216, 227, 236, 259, 267, 271, 272, 273, 276, 279, 281, 284, 285], "truncat": [12, 28, 54, 69, 216, 284], "shorter": [12, 28, 54, 69, 216, 284], "pad": [12, 28, 54, 69, 216, 284], "lowercas": [12, 54, 216], "fine": [12, 54, 214, 216, 240, 273, 274, 276], "choic": [12, 54, 185, 195, 216, 232, 260, 282], "qqp": [12, 54, 216, 232, 288], "qnli": [12, 54, 216, 232, 288], "rte": [12, 54, 216, 232, 288], "st": [12, 54, 216, 232], "b": [12, 54, 180, 190, 213, 216, 232, 273, 279, 282, 285], "cola": [12, 54, 216, 232, 288], "mnli": [12, 54, 216, 232, 288], "wnli": [12, 54, 216, 232], "mobilebert": [12, 54, 216, 219], "roberta": [12, 54, 216, 288], "fix": [12, 54, 109, 215, 216, 241, 273, 276, 279, 285], "uncas": [12, 28, 54, 69, 216, 284, 288], "load_and_cache_exampl": [12, 54], "cach": [12, 54, 187, 224, 276, 279], "helper": [12, 13, 14, 27, 54, 55, 56, 68, 72, 73, 74, 146, 178], "convert_examples_to_featur": [12, 28, 54, 69], "max_length": [12, 54], "label_list": [12, 54, 84, 137], "output_mod": [12, 54], "classif": [12, 28, 54, 69, 84, 110, 137, 219, 223, 232, 243, 257, 265, 268, 269, 273, 274], "pad_token": [12, 54], "pad_token_segment_id": [12, 54], "mask_padding_with_zero": [12, 54], "inputfeatur": [12, 28, 54, 69], "properti": [12, 54, 168, 230], "input_id": [12, 28, 54, 69, 233], "vocabulari": [12, 27, 28, 54, 68, 69, 284], "attention_mask": [12, 54, 233], "avoid": [12, 54, 191, 214, 283], "usual": [12, 54, 185, 187, 196, 218, 219, 259, 272, 273, 276, 277, 282], "NOT": [12, 54, 225], "token_type_id": [12, 54, 233], "segment": [12, 54, 78, 80, 131, 133, 190], "portion": [12, 54], "them": [12, 54, 191, 197, 215, 218, 223, 225, 227, 257, 260, 272, 273, 279, 285], "problem": [12, 54, 84, 137, 232, 234, 255], "regress": [12, 54, 190, 218], "seq_length": [12, 54], "tensorflowbertdataset": [12, 54], "root": [12, 13, 14, 17, 54, 55, 56, 59, 84, 137, 216, 221, 232, 233, 287], "label_fil": [12, 28, 54, 69, 216, 284], "tfrecord": [12, 13, 14, 54, 55, 56, 216], "guid": [12, 54, 185, 191, 194, 214, 216, 219, 229, 237, 245, 254, 289], "parsedecodebert": [12, 54], "tensorflowmodelzoobertdataset": [12, 13, 54, 55], "pars": [12, 13, 24, 28, 54, 55, 66, 69, 196, 197, 284], "num_cor": [12, 13, 17, 54, 55, 59, 216], "28": [12, 13, 17, 54, 55, 59, 216, 288], "three": [12, 54, 115, 151, 153, 186, 187, 191, 195, 196, 213, 229, 234, 248, 262, 272, 276, 278, 281, 282, 283], "tf": [12, 13, 14, 28, 53, 54, 55, 56, 69, 144, 146, 183, 185, 214, 221, 229, 235, 274, 278, 284], "record": [12, 13, 14, 20, 30, 37, 54, 55, 56, 62, 180, 186, 216, 259, 279, 281, 283, 285], "resiz": [12, 13, 24, 28, 54, 55, 66, 69, 216, 284], "coco": [13, 20, 55, 62, 80, 84, 133, 137, 232, 273], "parsedecodecoco": [13, 55], "cocorecorddataset": [13, 55], "interleav": [13, 55, 216], "parallel": [13, 55, 216, 233, 261, 264, 285], "cocoraw": [13, 55, 216], "img_dir": [13, 55, 216], "val2017": [13, 55, 216], "anno_dir": [13, 55, 216], "annot": [13, 55, 80, 133, 196, 197, 216, 232, 273, 285], "instances_val2017": [13, 55, 216], "json": [13, 28, 55, 69, 179, 216, 235, 255, 262, 263, 267, 268, 269, 279, 284], "arrang": [13, 14, 17, 55, 56, 59, 216, 273], "wai": [13, 14, 17, 55, 56, 59, 146, 184, 187, 192, 197, 215, 216, 218, 232, 233, 237, 240, 255, 256, 260, 261, 262, 272, 273, 276, 279, 282, 285, 287], "jpg": [13, 17, 19, 55, 59, 61, 194, 216], "imag": [13, 14, 17, 19, 24, 28, 55, 56, 59, 61, 66, 69, 80, 133, 194, 216, 221, 223, 273, 275, 282, 283, 284, 288], "coconpi": [13, 55, 216], "npy_dir": [13, 55, 216], "npy": [13, 55, 216], "tensorflowdataset": [14, 56], "pytorchdataset": [14, 56], "mxnetdataset": [14, 56], "onnxrtqldataset": [14, 56], "onnxrtitdataset": [14, 56], "IT": [14, 21, 56, 63, 274], "pytorchmxnetwrapdataset": [14, 56], "datafunc": [14, 56], "pytorchmxnetwrapfunct": [14, 28, 56, 69], "framework_dataset": [14, 56], "convent": [14, 56, 80, 133, 190, 219, 236], "imageclassifi": [14, 56], "choos": [14, 56, 175, 228, 242, 274, 280, 282, 285, 287], "tensorflow_itex": [14, 17, 19, 21, 56, 59, 61, 63, 215, 275], "onnxrt_qdq": [14, 21, 56, 63, 275], "onnxrt_qlinearop": [14, 21, 28, 56, 63, 69, 275], "onnxrt_integerop": [14, 21, 28, 56, 63, 69, 275], "pytorch_ipex": [14, 21, 56, 63, 233, 275, 287], "pytorch_fx": [14, 21, 56, 63, 233, 275], "dataset_registri": [14, 56], "dataset_typ": [14, 56], "dataset_format": [14, 56], "data_format": [14, 24, 56, 66], "eg": [14, 56, 216, 275], "raw_imag": [14, 56], "overwrit": [14, 56, 247, 251], "__getitem__": [14, 28, 52, 56, 69, 215, 216, 233], "__len__": [14, 52, 56, 216], "size": [14, 20, 24, 28, 46, 47, 53, 56, 62, 66, 69, 107, 146, 148, 180, 189, 196, 215, 216, 221, 224, 233, 236, 254, 255, 271, 273, 276, 277, 279, 282, 284, 287, 288], "iterabledataset": [14, 52, 56], "also": [14, 28, 53, 56, 69, 77, 130, 137, 148, 150, 183, 184, 187, 190, 192, 195, 196, 197, 215, 218, 222, 226, 228, 232, 233, 237, 242, 247, 248, 251, 254, 255, 256, 259, 260, 271, 273, 274, 276, 278, 279, 282, 285], "__iter__": [14, 52, 56, 215, 216, 233], "over": [14, 56, 84, 137, 196, 222, 226, 228, 232, 245, 254, 260, 264, 273, 275, 282, 285], "download_url": [14, 56], "url": [14, 56, 190, 230, 265, 266, 273], "filenam": [14, 56, 180, 216, 260], "md5": [14, 56], "download": [14, 56, 216, 218, 229, 259, 265, 280], "address": [14, 56, 186, 189, 214, 234, 256, 259, 262, 274], "gen_bar_updat": [14, 56], "progress": [14, 56, 248, 254, 256, 273, 276], "bar": [14, 56, 254, 274], "check_integr": [14, 56], "fpath": [14, 56], "check": [14, 56, 72, 108, 179, 180, 185, 194, 218, 221, 229, 238, 240, 242, 249, 252, 253, 257, 260, 263, 264, 280], "checksum": [14, 56], "calculate_md5": [14, 56], "chunk_siz": [14, 56], "1024": [14, 56, 240], "cifar10": [14, 56, 216], "cifar100": [14, 56, 216], "databas": [14, 56, 262], "extract": [14, 56, 128, 168, 216], "otherwis": [14, 28, 56, 69, 180, 189, 196, 216, 249, 252, 275, 279, 284], "www": [14, 56, 216, 288], "c": [14, 56, 180, 216, 224, 229, 279, 285], "toronto": [14, 56, 216], "edu": [14, 56, 216], "kriz": [14, 56, 216], "cifar": [14, 56, 216, 288], "python": [14, 32, 56, 76, 129, 180, 182, 191, 194, 214, 216, 218, 221, 224, 229, 233, 239, 245, 248, 254, 258, 259, 261, 262, 264, 267, 269, 273, 274, 284], "tar": [14, 56, 216, 218, 249, 252], "gz": [14, 56, 216, 218, 249, 252], "manual": [14, 56, 216, 237, 243, 245, 248, 262, 267, 268, 269, 273], "subset": [14, 17, 56, 59, 216, 259], "internet": [14, 56, 216, 256], "put": [14, 56, 216, 219], "again": [14, 56, 216, 257, 259, 278], "pytorchcifar10": [14, 56], "mxnetcifar10": [14, 56], "tensorflowcifar10": [14, 56], "pytorchcifar100": [14, 56], "mxnetcifar100": [14, 56], "tensorflowcifar100": [14, 56], "mnist": [14, 56, 216, 221], "modifi": [14, 56, 168, 191, 197, 221, 225, 258, 259, 273, 287], "nation": [14, 56, 189], "institut": [14, 56], "standard": [14, 28, 56, 69, 190, 196, 214, 218, 223, 232, 284, 285], "technologi": [14, 56, 231, 233, 236], "fashionmnist": [14, 56, 216], "npz": [14, 56, 216], "idx1": [14, 56, 216], "ubyt": [14, 56, 216], "idx3": [14, 56, 216], "t10k": [14, 56, 216], "pytorchmnist": [14, 56], "mxnetmnist": [14, 56], "tensorflowmnist": [14, 56], "pytorchfashionmnist": [14, 56], "mxnetfashionmnist": [14, 56], "tensorflowfashionmnist": [14, 56], "imagefold": [14, 56, 216, 221, 233], "expect": [14, 56, 183, 187, 189, 190, 224, 231, 254, 276, 279, 285], "folder": [14, 19, 56, 61, 138, 150, 179, 216, 242, 247, 251, 260, 267, 268, 269, 279, 283], "subfold": [14, 56, 257], "repres": [14, 19, 56, 61, 80, 82, 84, 133, 135, 137, 185, 187, 189, 197, 213, 216, 223, 262, 273, 276, 277, 285], "belong": [14, 56, 142, 187, 276], "class_1": [14, 56, 216], "xxx": [14, 56, 216, 233], "png": [14, 56, 216], "xxy": [14, 56, 216], "xxz": [14, 56, 216], "class_n": [14, 56, 216], "123": [14, 56, 216, 284], "nsdf3": [14, 56, 216], "asd932_": [14, 56, 216], "categori": [14, 56, 79, 132, 212, 216, 244], "mxnetimagefold": [14, 56], "tensorflowtfrecorddataset": [14, 56], "tensorflowimagerecord": [14, 56], "imagenet": [14, 17, 24, 56, 59, 66, 183, 192, 218, 233, 243, 259, 273, 283, 284, 287, 288], "000": [14, 56, 194, 216], "001": [14, 56, 216, 221, 282, 287], "099": [14, 56, 216], "follow": [14, 56, 77, 80, 130, 133, 184, 189, 190, 191, 192, 194, 195, 196, 197, 214, 215, 216, 219, 220, 221, 225, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 247, 251, 256, 258, 259, 262, 267, 272, 273, 275, 276, 279, 282, 283, 285], "tensorflowvocrecord": [14, 56], "pascal": [14, 56], "voc": [14, 56, 84, 137], "2012": [14, 56], "val": [14, 17, 56, 59, 108, 218, 233, 259], "00000": [14, 56], "00004": [14, 56], "00001": [14, 56], "00003": [14, 56], "dummi": [15, 16, 57, 58, 84, 137, 185, 194, 216, 226, 232, 233, 256], "dummydataset": [15, 16, 57, 58, 185], "shape": [15, 16, 24, 28, 57, 58, 66, 69, 80, 133, 185, 194, 216, 225, 226, 233, 256, 257, 279, 282, 284], "high": [15, 16, 57, 58, 185, 216, 218, 229, 259, 274, 285], "127": [15, 16, 57, 58, 187, 216, 276, 282], "float32": [15, 16, 28, 57, 58, 69, 80, 133, 175, 187, 195, 212, 216, 233, 276, 279, 282, 284], "rang": [15, 16, 28, 57, 58, 69, 169, 175, 185, 187, 194, 195, 197, 213, 216, 218, 219, 220, 221, 233, 236, 257, 259, 272, 273, 276, 279, 282, 284], "stand_norm": [15, 16, 57, 58, 216], "real": [15, 31, 57, 187, 196, 213, 221, 256, 263, 274, 276], "dummy_v2": [16, 58, 216], "sparse_dummy_v2": [16, 58, 216], "input_shap": [16, 58, 216], "label_shap": [16, 58, 216], "sparsedummydataset": [16, 58], "dense_shap": [16, 58, 216], "sparse_ratio": [16, 58, 216], "imagenetraw": [17, 59, 216], "data_path": [17, 59, 216], "image_list": [17, 59, 216], "img1": [17, 59, 216], "img2": [17, 59, 216], "imgx": [17, 59, 216], "read": [17, 28, 59, 69, 108, 216, 278, 281], "val_map": [17, 59, 216], "txt": [17, 59, 216, 218, 229, 256, 258, 259, 261, 262], "pytorchimagenetraw": [17, 59], "mxnetimagenetraw": [17, 59], "tensorflowimagenetraw": [17, 59], "inteltensorflow": [17, 19, 59, 61, 229], "tensorflowimagenetdataset": [17, 59], "onnxrtimagenetdataset": [17, 59], "class": [18, 60, 91, 138, 150, 183, 185, 186, 191, 192, 196, 214, 215, 216, 219, 232, 233, 245, 271, 272, 276, 280, 283, 285, 287], "bert_dataset": [18, 60], "coco_dataset": [18, 60], "dummy_dataset": [18, 60], "dummy_dataset_v2": [18, 60], "imagenet_dataset": [18, 60], "style_transfer_dataset": [18, 60], "style": [19, 47, 61, 214, 216, 227], "transfer": [19, 61, 70, 216, 219, 220, 233, 282], "styletransferdataset": [19, 61], "content_fold": [19, 61, 216], "style_fold": [19, 61, 216], "crop_ratio": [19, 61, 216], "resize_shap": [19, 61, 216], "256": [19, 24, 61, 66, 216, 221, 233, 284], "image_format": [19, 61, 216], "holder": [19, 61, 216], "labelbalancecocorecordfilt": [20, 62], "balanc": [20, 62, 185, 236, 279, 282], "labelbalancecocorawfilt": [20, 62], "tensorflowfilt": [21, 63], "onnxrtqlfilt": [21, 63], "mode": [21, 63, 80, 126, 133, 146, 166, 177, 179, 180, 195, 196, 218, 228, 247, 251, 259, 260, 276, 278, 279, 285], "onnxrtitfilt": [21, 63], "pytorchfilt": [21, 63], "mxnetfilt": [21, 63], "filter_registri": [21, 63], "filter_typ": [21, 63], "__call__": [21, 63], "write": [21, 63, 180, 221, 227, 233, 237, 283], "coco_filt": [22, 64], "quantizedinput": [24, 66, 284], "uint8": [24, 66, 80, 128, 133, 168, 185, 187, 195, 216, 225, 275, 276, 284, 287], "point": [24, 66, 81, 82, 91, 116, 134, 135, 154, 180, 184, 187, 232, 236, 254, 259, 260, 276, 279, 282, 284, 285], "labelshift": [24, 66, 284], "label_shift": [24, 66, 284], "parsedecodeimagenet": [24, 66, 284], "proto": [24, 28, 66, 69, 284], "parsedecodeimagenettransform": [24, 66], "decod": [24, 66, 77, 130, 232, 284], "v1": [24, 66, 81, 82, 84, 134, 135, 137, 146, 221, 223, 224, 232, 235, 258, 273, 280, 281, 282, 288], "tensorflowtransposelastchannel": 24, "transpos": [24, 28, 69, 73, 107, 279, 284], "nhwc": 24, "nchw": 24, "tensorflowshiftrescal": 24, "rescal": [24, 28, 69, 284], "tensorflowresizecropimagenettransform": [24, 66], "height": [24, 28, 66, 69, 107, 221, 284, 287], "width": [24, 28, 66, 69, 107, 187, 213, 221, 273, 276, 284, 287], "random_crop": [24, 66, 284], "resize_sid": [24, 66, 284], "resize_method": [24, 66], "bilinear": [24, 28, 66, 69, 284], "random_flip_left_right": [24, 66, 284], "mean_valu": [24, 66, 284], "channels_last": [24, 66, 237], "subpixel": [24, 66], "rgb": [24, 66], "seri": [24, 66, 194, 229, 233, 284], "applic": [24, 66, 183, 197, 223, 237, 254, 256, 262, 263, 267, 268, 274, 279, 282, 283, 284, 286], "result": [24, 28, 66, 69, 77, 80, 81, 82, 84, 130, 133, 134, 135, 137, 150, 157, 169, 179, 180, 184, 186, 187, 189, 192, 194, 215, 218, 219, 221, 228, 230, 232, 233, 242, 243, 254, 255, 258, 262, 263, 264, 265, 271, 273, 274, 276, 279, 281, 282, 283, 284, 285, 286, 288], "crop": [24, 28, 66, 69, 216, 284], "flip": [24, 28, 66, 69, 284], "left": [24, 28, 66, 69, 248, 254, 282, 284], "right": [24, 66, 80, 133, 189, 190, 191, 254, 260, 282, 284], "std": [24, 28, 66, 69, 233, 284], "bilinearimagenettransform": [24, 66], "central_fract": [24, 66, 284], "875": [24, 66, 284], "fraction": [24, 66, 284], "onnxbilinearimagenettransform": [24, 66], "onnxresizecropimagenettransform": [24, 66], "std_valu": [24, 66], "229": [24, 66, 233], "225": [24, 66, 233, 288], "resizewithaspectratio": [24, 66], "87": [24, 66, 288], "inter_pol": [24, 66], "cv2": [24, 66], "inter_area": [24, 66], "aspect": [24, 28, 66, 69, 284], "imagenet_transform": [25, 67], "postprocess_cl": [26, 36, 233], "user_postprocess": [26, 36], "just": [26, 28, 31, 33, 34, 36, 44, 69, 148, 185, 192, 233, 244, 248, 254, 262, 272, 276, 282, 284, 285], "collect": [26, 28, 31, 33, 34, 36, 69, 82, 84, 135, 137, 170, 180, 185, 187, 196, 276, 283, 285], "info": [26, 31, 36, 107, 142, 175, 176, 180, 191, 214, 218, 235, 264, 269], "convert_to_unicod": [27, 68], "text": [27, 28, 68, 69, 77, 82, 110, 130, 135, 223, 230, 236, 243, 265, 268, 269, 273, 274, 279, 282, 284, 288], "unicod": [27, 68], "assum": [27, 68, 80, 91, 133, 195, 225, 254], "utf": [27, 68], "load_vocab": [27, 68], "vocab_fil": [27, 28, 68, 69, 284], "convert_by_vocab": [27, 68], "vocab": [27, 68], "whitespace_token": [27, 68], "whitespac": [27, 68, 82, 135], "clean": [27, 68, 233], "split": [27, 28, 68, 69, 191, 277, 279, 282, 284], "piec": [27, 68, 77, 130, 232, 279], "fulltoken": [27, 68], "tokenzi": [27, 68], "basictoken": [27, 68], "punctuat": [27, 68, 77, 82, 130, 135], "lower": [27, 28, 68, 69, 82, 135, 155, 185, 187, 220, 236, 273, 274, 276, 282, 284, 285], "wordpiecetoken": [27, 68], "unk_token": [27, 68], "unk": [27, 68], "max_input_chars_per_word": [27, 68], "200": [27, 68, 191, 263, 285], "wordpiec": [27, 28, 68, 69, 284], "concat_gener": [28, 69], "inc": [28, 69, 185, 186, 189, 194, 196, 231, 237, 244, 254, 256, 261, 274, 275, 280, 285], "abstract": [28, 69, 70, 75, 112, 195, 197, 227], "own": [28, 52, 69, 148, 192, 196, 215, 216, 228, 232, 256, 260, 271, 279, 281, 286], "inherit": [28, 30, 38, 51, 69, 109, 111, 192, 195, 196, 216], "tensorflowtransform": [28, 69], "mxnettransform": [28, 69], "pytorchtransform": [28, 69], "onnxrtqltransform": [28, 69], "onnxrtittransform": [28, 69], "transform_registri": [28, 69], "transform_typ": [28, 69], "basetransform": [28, 69], "tensorflowwrapfunct": [28, 69], "transform_func": [28, 69], "wrapper": [28, 30, 31, 33, 34, 53, 69, 80, 84, 133, 137, 142, 146, 185, 278], "pytorchmxnettransform": [28, 69], "get_torchvision_map": [28, 69], "interpol": [28, 69, 232, 273, 284], "torchvis": [28, 69, 194, 222, 226, 237, 243, 257], "composetransform": [28, 69], "transform_list": [28, 69, 284], "compos": [28, 69, 172, 284], "sever": [28, 69, 111, 113, 192, 218, 219, 220, 228, 233, 234, 236, 247, 251, 262, 273, 275, 277, 282, 284, 285, 287], "croptoboundingbox": [28, 69, 284], "offset_height": [28, 69, 284], "offset_width": [28, 69, 284], "target_height": [28, 69, 284], "target_width": [28, 69, 284], "box": [28, 69, 80, 84, 133, 137, 191, 232, 237, 248, 254, 283, 284, 285], "vertic": [28, 69, 107, 284], "coordin": [28, 69, 116, 154, 261, 284, 285], "top": [28, 69, 75, 84, 99, 104, 112, 137, 190, 232, 254, 257, 259, 284], "corner": [28, 69, 190, 195, 197, 284], "horizont": [28, 69, 284], "mxnetcroptoboundingbox": [28, 69], "onnxrtcroptoboundingbox": [28, 69], "tensorflowcroptoboundingbox": [28, 69], "resizewithratio": [28, 69, 284], "min_dim": [28, 69, 284], "800": [28, 69, 284], "max_dim": [28, 69, 284], "1365": [28, 69, 284], "constant_valu": [28, 69], "np": [28, 69, 116, 154, 221, 264, 282, 284, 285], "arrai": [28, 69, 80, 91, 133, 180, 284], "smaller": [28, 69, 219, 233, 236, 273, 284], "dimens": [28, 46, 69, 216, 219, 279, 284], "ensur": [28, 69, 116, 154, 183, 221, 276, 284], "longest": [28, 69, 284], "side": [28, 69, 216, 248, 284], "doesn": [28, 69, 185, 195, 221, 233, 234, 255, 287], "exce": [28, 69, 279, 284], "zero": [28, 69, 109, 180, 187, 194, 236, 259, 273, 276, 279, 282, 284, 285], "so": [28, 69, 168, 185, 187, 191, 195, 218, 224, 228, 234, 236, 240, 242, 258, 259, 260, 276, 278, 279, 282, 283, 284, 286], "tensorflowresizewithratio": [28, 69], "perm": [28, 69, 284], "permut": [28, 69, 284], "tensorflowtranspos": [28, 69], "mxnettranspos": [28, 69], "pytorchtranspos": [28, 69], "randomverticalflip": [28, 69, 284], "given": [28, 69, 80, 133, 150, 186, 192, 197, 273, 282, 284], "randomli": [28, 69, 92, 116, 154, 192, 282, 284, 285], "tensorflowrandomverticalflip": [28, 69], "randomhorizontalflip": [28, 69, 233, 284], "tensorflowrandomhorizontalflip": [28, 69], "toarrai": [28, 69, 284], "pil": [28, 69, 284], "ndarrai": [28, 69, 170, 224, 284], "numpi": [28, 69, 80, 91, 133, 224, 282, 284], "casttftransform": [28, 69], "castonnxtransform": [28, 69], "castpytorchtransform": [28, 69], "centercroptftransform": [28, 69], "center": [28, 69, 193, 194, 229, 284, 285], "paddedcentercroptransform": [28, 69], "crop_pad": [28, 69], "resizetftransform": [28, 69], "nearest": [28, 69, 279, 284], "bicub": [28, 69, 284], "resizepytorchtransform": [28, 69], "randomcroptftransform": [28, 69], "randomresizedcroppytorchtransform": [28, 69], "08": [28, 69, 231, 284, 288], "randomresizedcropmxnettransform": [28, 69], "randomresizedcroptftransform": [28, 69], "normalizetftransform": [28, 69], "normal": [28, 69, 82, 135, 233, 263, 271, 279, 282, 284], "deviat": [28, 69, 218, 284], "broadcast": [28, 69, 221, 284], "rescalekeraspretraintransform": [28, 69], "rescaletftransform": [28, 69], "rescaletransform": [28, 69], "alignimagechanneltransform": [28, 69], "dim": [28, 69, 282, 284], "align": [28, 69, 189, 279, 284], "w": [28, 69, 273, 282, 284], "must": [28, 69, 80, 133, 190, 191, 196, 212, 215, 229, 276, 284], "pytorchalignimagechannel": [28, 69], "tondarraytransform": [28, 69], "resizemxnettransform": [28, 69], "resizetransform": [28, 69], "cropresizetftransform": [28, 69], "boundari": [28, 69, 284], "area": [28, 69, 80, 133, 232, 236, 284], "pytorchcropresizetransform": [28, 69], "mxnetcropresizetransform": [28, 69], "cropresizetransform": [28, 69], "centercroptransform": [28, 69], "mxnetnormalizetransform": [28, 69], "pytorchnormalizetransform": [28, 69], "normalizetransform": [28, 69], "randomcroptransform": [28, 69], "randomresizedcroptransform": [28, 69], "get_final_text": [28, 69], "pred_text": [28, 69], "orig_text": [28, 69], "project": [28, 69, 188, 189, 190, 260, 274, 281, 285, 289], "predict": [28, 33, 69, 77, 81, 82, 84, 130, 134, 135, 137, 150, 192, 219, 232, 245, 279, 282, 283, 284], "back": [28, 34, 69, 218, 254, 260], "squadexampl": [28, 69], "qas_id": [28, 69], "question_text": [28, 69], "doc_token": [28, 69], "orig_answer_text": [28, 69], "start_posit": [28, 69], "end_posit": [28, 69], "is_imposs": [28, 69], "simpl": [28, 69, 185, 229, 233, 273, 281, 282, 285], "without": [28, 69, 109, 128, 168, 187, 189, 219, 221, 233, 236, 245, 256, 259, 273, 274, 275, 276, 285, 286], "answer": [28, 69, 81, 82, 134, 135, 189, 259, 273, 284, 288], "posit": [28, 69, 189, 232, 237, 262, 267, 268, 269], "unique_id": [28, 69], "example_index": [28, 69], "doc_span_index": [28, 69], "token_to_orig_map": [28, 69], "token_is_max_context": [28, 69], "input_mask": [28, 69, 233], "segment_id": [28, 69, 233], "read_squad_exampl": [28, 69], "input_fil": [28, 69], "doc_strid": [28, 69, 284], "max_query_length": [28, 69, 284], "output_fn": [28, 69], "inputbatch": [28, 69], "collecttransform": [28, 69], "10833": [28, 69], "tfsquadv1posttransform": [28, 69], "n_best_siz": [28, 69, 284], "20": [28, 69, 259, 262, 267, 268, 269, 273, 284, 287, 288], "384": [28, 69, 284], "64": [28, 69, 186, 192, 231, 279, 282, 284, 288], "max_answer_length": [28, 69, 284], "30": [28, 69, 222, 226, 228, 284, 288], "total": [28, 69, 84, 109, 137, 216, 218, 273, 279, 284, 288], "best": [28, 69, 70, 75, 112, 119, 159, 183, 184, 186, 189, 192, 194, 214, 229, 237, 243, 254, 260, 271, 276, 279, 282, 284, 285], "nbest_predict": [28, 69, 284], "question": [28, 69, 81, 82, 134, 135, 189, 190, 194, 195, 229, 237, 261, 273, 282, 284, 288], "becaus": [28, 69, 107, 184, 187, 191, 259, 276, 282, 284, 285], "anoth": [28, 69, 77, 86, 130, 180, 218, 219, 247, 251, 284, 285], "up": [28, 69, 108, 187, 194, 221, 222, 225, 228, 245, 249, 252, 254, 273, 274, 275, 276, 281, 284, 285, 287], "long": [28, 69, 214, 224, 279, 284], "document": [28, 69, 183, 184, 187, 196, 197, 202, 221, 231, 234, 239, 249, 252, 253, 260, 261, 263, 273, 280, 284, 286], "chunk": [28, 69, 284], "stride": [28, 69, 284], "tfmodelzoocollecttransform": [28, 69], "zoo": [28, 53, 69, 194, 222, 226, 288], "tfsquadv1modelzooposttransform": [28, 69], "squadv1": [28, 69, 284], "see": [28, 69, 77, 130, 189, 190, 191, 193, 214, 230, 233, 247, 248, 251, 254, 255, 259, 260, 279, 282, 283, 285], "parsedecodevoctransform": [28, 69], "measur": [29, 138, 174, 185, 192, 195, 212, 218, 219, 232, 233, 279, 283, 285], "conf_fname_or_obj": [29, 38, 70, 75, 85, 86, 87, 88, 90, 99, 104, 112], "thei": [29, 189, 214, 219, 225, 233, 242, 257, 260, 271], "ha": [29, 77, 107, 109, 130, 183, 185, 187, 190, 192, 195, 196, 197, 215, 223, 228, 233, 234, 240, 254, 259, 260, 262, 265, 273, 275, 276, 278, 281, 282, 285], "possibl": [29, 218, 256, 272, 273, 277, 278, 285], "unnecessari": [29, 233], "critet": 30, "tensorflowcrossentropyloss": 30, "pytorchcrossentropyloss": 30, "tensorflowknowledgedistillationloss": 30, "pytorchknowledgedistillationloss": [30, 233], "pytorchintermediatelayersknowledgedistillationloss": 30, "tensorflowcriterion": 30, "pytorchcriterion": 30, "integr": [30, 185, 195, 233, 255, 256, 261, 279], "criterion_registri": 30, "criterion_typ": 30, "registry_criterion": 30, "knowledgedistillationframework": 30, "knowledgedistillationloss": [30, 233, 287], "pytorchknowledgedistillationlosswrapp": 30, "param_dict": [30, 35], "wrap": [30, 80, 133, 191, 221, 249, 252], "tensorflowknowledgedistillationlossextern": 30, "intermediatelayersknowledgedistillationloss": 30, "pytorchintermediatelayersknowledgedistillationlosswrapp": 30, "selfknowledgedistillationloss": 30, "selfknowledg": 30, "collate_fn": [31, 44, 46, 47, 50, 51, 53, 215, 216], "last_batch": [31, 44, 46, 50, 51, 53, 215], "rollov": [31, 44, 46, 50, 51, 53, 215], "sampler": [31, 44, 46, 48, 50, 51, 53, 125, 165, 186, 215, 221], "batch_sampl": [31, 44, 46, 50, 51, 53, 215], "num_work": [31, 44, 46, 50, 51, 53, 215, 233, 276], "pin_memori": [31, 44, 46, 50, 51, 53, 215], "shuffl": [31, 44, 46, 50, 51, 53, 215, 233, 276], "batch": [31, 44, 46, 47, 52, 53, 169, 215, 219, 220, 233, 272, 273, 276, 282, 284, 285, 288], "setter": 31, "calib_dataload": [31, 113, 150, 183, 184, 185, 186, 191, 194, 215, 216, 218, 226, 227, 232, 233, 256, 257, 276, 277, 278, 279], "reason": [31, 189, 196, 215, 259, 279, 283, 285], "have": [31, 52, 77, 80, 107, 109, 130, 133, 137, 150, 168, 186, 187, 189, 190, 196, 197, 214, 215, 216, 218, 221, 225, 230, 232, 233, 234, 236, 237, 254, 257, 260, 262, 267, 268, 269, 271, 273, 276, 277, 279, 282, 285, 286], "know": [31, 214, 221, 280], "known": [31, 116, 154, 233, 236, 273, 276, 283, 285], "intel": [32, 35, 71, 76, 83, 84, 107, 110, 118, 124, 129, 136, 137, 149, 150, 158, 164, 182, 183, 185, 186, 187, 189, 190, 192, 193, 195, 196, 197, 213, 216, 217, 219, 220, 222, 223, 225, 226, 230, 231, 234, 235, 237, 242, 244, 245, 256, 257, 258, 259, 261, 262, 271, 272, 273, 274, 276, 278, 279, 280, 282, 283, 285, 286, 287, 288], "open": [32, 76, 129, 172, 182, 189, 194, 223, 224, 233, 249, 252, 255, 256, 260, 261, 262, 274], "librari": [32, 76, 129, 182, 185, 194, 229, 233, 234, 239, 248, 254, 274, 276], "torch_util": [32, 194, 277, 282], "metric_cl": [33, 137, 150, 233], "user_metr": [33, 137, 150], "alwai": [33, 80, 133, 137, 150, 186, 218, 232, 233, 259, 279], "recommend": [33, 137, 194, 195, 216, 225, 245, 248, 253, 255, 273, 275, 285], "design": [33, 38, 53, 137, 155, 185, 192, 194, 233, 242, 245, 273, 276, 286], "set_backend": 34, "tensorflowoptim": 35, "onc": [35, 111, 115, 151, 153, 196, 197, 215, 254, 260, 273, 274, 285, 288], "pytorchoptim": 35, "main": [35, 110, 183, 185, 187, 191, 215, 218, 221, 233, 241, 243, 255, 264, 273, 276, 279], "entri": [35, 75, 113, 180, 214, 230], "optimizer_registri": 35, "optimizer_typ": 35, "cross": [35, 84, 137, 227, 285], "tensorflowsgd": 35, "tensorflowadamw": 35, "tensorflow_addon": 35, "adamw": 35, "pytorchsgd": 35, "record_output": 37, "output_process": 37, "help": [37, 86, 186, 214, 231, 235, 237, 243, 254, 262, 267, 268, 269, 279, 285, 286], "get_activ": 37, "hook": [37, 38, 99, 104, 172, 219, 220, 233, 273, 282, 283], "mainli": [38, 111, 187, 194, 233, 273, 276], "shot": [38, 109, 111, 185, 192, 228, 233, 273, 274, 279], "appli": [38, 78, 131, 184, 185, 186, 187, 189, 196, 197, 233, 236, 237, 239, 245, 254, 258, 259, 264, 272, 273, 276, 278, 281, 282, 285, 286, 287], "api": [39, 75, 80, 112, 125, 126, 133, 137, 150, 165, 166, 180, 186, 187, 191, 194, 198, 200, 204, 207, 210, 218, 223, 228, 229, 233, 239, 243, 244, 245, 261, 262, 266, 280, 281, 285, 289], "basedatalod": 44, "basedataload": [44, 49, 51], "_generate_dataload": 44, "default_col": 46, "merg": [46, 126, 166, 249, 252, 283, 285], "outer": 46, "defaultdataload": [46, 53], "definit": [47, 52], "drop_last": [47, 52], "iterablefetch": 47, "next": [47, 192, 196, 197, 215, 275, 279, 285], "indexfetch": 47, "base_dataload": 48, "default_dataload": 48, "fetcher": 48, "mxnet_dataload": 48, "onnxrt_dataload": 48, "pytorch_dataload": 48, "tensorflow_dataload": 48, "mxnetdataload": 49, "onnxrtbertdataload": 50, "variant": 50, "onnxrtdataload": 50, "pytorchdataload": 51, "data_sourc": [52, 172], "matter": [52, 278], "iterablesampl": 52, "squential": 52, "clear": [52, 195, 225, 232, 233], "what": [52, 137, 150, 169, 185, 189, 274], "try": [52, 146, 185, 187, 191, 194, 218, 257, 273, 276, 282, 285], "indexdataset": 52, "intern": [52, 126, 166, 215, 216, 232, 273], "element": [52, 80, 107, 133, 180, 216, 228, 232, 236, 273, 279, 282], "retriev": [52, 273], "act": [52, 189], "placehold": [52, 214], "sequentialsampl": 52, "sequenti": [52, 113, 115, 151, 153, 186, 285], "batchsampl": 52, "tfdatadataload": 53, "tensorflow1": 53, "coupl": 53, "graph": [53, 75, 139, 146, 187, 191, 195, 216, 219, 221, 227, 235, 237, 256, 259, 276, 277, 278, 283], "feed_dict": 53, "session": [53, 146, 233, 283], "satisfi": [53, 218, 229, 260], "usag": [53, 80, 86, 113, 133, 183, 187, 196, 216, 221, 222, 237, 245, 256, 262, 267, 268, 269, 271, 275, 279, 284], "feed": [53, 219, 273], "tf1": [53, 235], "although": [53, 281], "obj": [53, 70, 75, 86, 87, 88, 90, 99, 104, 108, 112, 138, 148, 150, 169, 172, 180], "tensorflowbertdataload": 53, "tensorflowmodelzoobertdataload": 53, "tensorflowdataload": 53, "tensorflowimagefold": 56, "deriv": [70, 107, 109, 111], "compon": [70, 76, 113, 186, 191, 214, 218, 221, 229, 230, 237, 254, 262, 272, 273], "pipelin": [70, 87, 88, 113, 190, 220, 233, 272], "distillation_conf": 70, "relat": [70, 80, 99, 104, 107, 133, 168, 172, 197, 237, 261, 262, 273, 279, 287], "_epoch_ran": 70, "epoch": [70, 109, 169, 215, 219, 220, 221, 233, 272, 273, 287], "ran": 70, "eval_frequ": 70, "term": [70, 185, 190, 213, 219, 230, 232, 271, 272, 285], "best_scor": 70, "best_model": [70, 179, 183, 184, 185, 186, 279], "found": [70, 194, 214, 219, 231, 234, 242, 259, 263, 282, 285, 288], "qlinear2qdq": 71, "qlinearop": [72, 218, 228, 245, 276, 288], "check_model": 72, "modelproto": [72, 138, 235], "onnx_qlinear_to_qdq": 72, "input_name_to_nod": 72, "destin": [72, 86], "node": [72, 74, 146, 195, 218, 221, 257, 261, 264, 267, 268, 269, 277, 283, 285, 288], "tf_to_fp32_onnx": 73, "graph_def": [73, 138, 146, 150], "save_path": [73, 74, 195, 235], "inputs_as_nchw": 73, "tool": [73, 180, 187, 194, 195, 233, 247, 251, 257, 260, 261, 262, 273, 274, 276], "tf_to_int8_onnx": 73, "int8_model": [73, 74, 195], "get_node_map": 74, "fp32_model": [74, 180, 184, 185, 195, 277, 279], "fp32_onnx_path": 74, "module_node_map": 74, "get_quantizable_onnx_op": 74, "quantize_nod": 74, "dynamic_quant_export": 74, "pt_fp32_model": 74, "pt_int8_model": 74, "q_config": [74, 195], "weight_typ": 74, "s8": 74, "static_quant_export": 74, "_quantiz": 74, "torch_to_fp32_onnx": 74, "do_constant_fold": 74, "verbos": [74, 116, 154], "constant": [74, 116, 124, 154, 164, 173, 214, 215, 225, 257, 284], "fold": [74, 225, 279, 282], "torch_to_int8_onnx": 74, "infer": [75, 112, 146, 148, 150, 169, 184, 185, 187, 194, 195, 196, 213, 219, 220, 233, 234, 254, 271, 273, 274, 276, 279, 282, 283, 285], "achiev": [75, 112, 183, 186, 187, 223, 231, 233, 257, 272, 273, 274, 276, 282, 283, 285], "within": [75, 80, 112, 133, 146, 189, 191, 197, 213, 234, 247, 251, 254, 262, 273, 274, 279, 282, 285], "across": [75, 85, 112, 138, 186, 217, 233, 236, 261, 264, 273, 277, 282, 285], "variou": [75, 85, 112, 138, 185, 197, 228, 236, 237, 264, 273, 275, 277], "dl": [75, 85, 99, 104, 112, 138, 218, 227, 241, 254, 274, 288], "bring": [75, 112, 248, 261, 282], "unifi": [75, 112, 195, 196, 197, 215, 227, 228, 232, 233, 235], "vari": [75, 99, 104, 112, 259, 273, 282, 288], "roc": [75, 84, 99, 104, 112, 137], "memori": [75, 99, 104, 112, 148, 180, 184, 187, 213, 215, 220, 233, 234, 236, 237, 271, 273, 276, 277, 279, 282, 285, 288], "flexibl": [75, 99, 104, 112, 185, 194, 219, 261, 273, 279], "interfac": [75, 99, 104, 112, 113, 172, 185, 187, 228, 233, 245, 263, 276, 280], "via": [75, 99, 104, 112, 189, 194, 221, 228, 233, 237, 254, 273, 274], "graph_optimization_conf": 75, "popular": [76, 129, 182, 186, 187, 194, 195, 196, 213, 219, 222, 223, 226, 231, 233, 273, 276, 279, 285, 286], "compress": [76, 99, 104, 129, 148, 169, 175, 182, 184, 186, 187, 194, 202, 219, 228, 233, 254, 256, 271, 272, 273, 274, 276, 282, 286, 288], "techniqu": [76, 129, 182, 185, 186, 187, 194, 228, 233, 237, 256, 272, 273, 274, 275, 276, 286, 287, 288], "contrib": [76, 129], "pruner_legaci": 76, "pruning_recip": 76, "pytorch_prun": 76, "graph_optim": 76, "mixed_precis": [76, 138, 233], "model_convers": 76, "pruning_v2": 76, "script": [77, 78, 81, 82, 130, 131, 134, 135, 190, 194, 221, 228, 237, 241, 244, 245, 248, 265, 267, 274], "unicoderegex": [77, 130], "hoc": [77, 130], "hack": [77, 130], "recogn": [77, 130, 285], "symbol": [77, 130, 138, 150, 191, 235], "nondigit_punct_r": [77, 130], "compil": [77, 130, 233], "regular": [77, 108, 130], "express": [77, 130, 189], "preced": [77, 130, 282, 285], "digit": [77, 130, 180, 274], "punct_nondigit_r": [77, 130], "symbol_r": [77, 130], "bleu_token": [77, 130], "offici": [77, 81, 82, 130, 134, 135, 189, 282], "mose": [77, 130], "smt": [77, 130], "mosesdecod": [77, 130], "blob": [77, 78, 81, 82, 107, 130, 131, 134, 135, 137, 150, 233, 243, 265, 268, 269], "master": [77, 78, 81, 82, 107, 110, 130, 131, 134, 135, 137, 150, 233, 285], "mteval": [77, 130], "v14": [77, 130], "pl": [77, 130], "l954": [77, 130], "l983": [77, 130], "comput": [77, 78, 81, 82, 84, 130, 131, 134, 135, 137, 169, 180, 187, 213, 215, 220, 223, 232, 233, 234, 236, 237, 248, 257, 273, 274, 276, 279, 282, 285], "bilingu": [77, 130], "understudi": [77, 130], "qualiti": [77, 130, 214], "been": [77, 107, 109, 130, 185, 192, 197, 214, 219, 233, 234, 254, 279, 282], "machin": [77, 130, 223, 229, 240, 254, 256, 262, 274, 282, 283], "translat": [77, 78, 130, 131, 236, 273, 285], "natur": [77, 130, 223], "approxim": [77, 78, 130, 131, 196, 232, 279], "glue": [77, 84, 130, 137, 216, 232, 233, 243], "word": [77, 130, 214, 232, 273, 279, 288], "ngram": [77, 130, 232], "order": [77, 78, 113, 116, 119, 128, 130, 131, 154, 159, 168, 186, 191, 218, 232, 257, 275, 279, 282, 283, 285], "breviti": [77, 78, 130, 131, 232], "penalti": [77, 78, 130, 131, 232], "doe": [77, 130, 168, 214, 215, 216, 232, 233, 279, 280, 284], "beam": [77, 130, 232], "bleu": [78, 83, 131, 136, 232, 273], "tensor2tensor": [78, 131], "bleu_hook": [78, 131], "compute_bleu": [78, 131], "reference_corpu": [78, 131], "translation_corpu": [78, 131], "max_ord": [78, 131], "use_bp": [78, 131], "against": [78, 131], "gram": [78, 131], "bleu_scor": [78, 131], "third": [80, 133, 190, 230], "parti": [80, 133, 187, 190, 230, 276], "pycocotool": [80, 133, 224, 229], "note": [80, 120, 133, 160, 184, 187, 192, 194, 196, 197, 214, 215, 218, 221, 223, 225, 229, 231, 233, 239, 242, 247, 251, 254, 256, 260, 262, 264, 273, 276, 279, 282, 283, 285, 286, 287], "noth": [80, 133, 285], "thu": [80, 133, 187, 233, 273, 276], "cannot": [80, 133, 191, 214, 224, 279, 283], "slim": [80, 133, 144, 146, 235, 273], "jonathanhuang": [80, 133], "image_id": [80, 133, 232], "encod": [80, 133, 257, 284], "invok": [80, 133, 196], "groundtruth_dict": [80, 133], "exportgroundtruthtococo": [80, 133], "groundtruth_boxes_list": [80, 133], "groundtruth_classes_list": [80, 133], "max_num_class": [80, 133], "output_path": [80, 133], "detections_list": [80, 133], "exportdetectionstococo": [80, 133], "detection_boxes_list": [80, 133], "detection_scores_list": [80, 133], "detection_classes_list": [80, 133], "cocowrapp": [80, 133], "loadannot": [80, 133], "cocoevalwrapp": [80, 133], "agnostic_mod": [80, 133], "computemetr": [80, 133], "ani": [80, 82, 125, 133, 135, 165, 177, 180, 185, 189, 194, 197, 214, 221, 237, 242, 255, 256, 260, 261, 273, 281, 285], "detection_typ": [80, 133], "bbox": [80, 133, 191, 232], "hold": [80, 116, 133, 154, 216], "being": [80, 133, 197, 262], "iou_typ": [80, 133], "iou_thr": [80, 84, 133, 137, 232], "map_point": [80, 84, 133, 137, 232], "cocoev": [80, 133], "To": [80, 133, 148, 184, 186, 190, 194, 196, 197, 214, 216, 218, 221, 234, 236, 238, 241, 247, 249, 251, 252, 256, 260, 273, 275, 278, 279, 280, 282, 285, 287], "mscoco": [80, 133], "org": [80, 109, 133, 191, 218, 229, 249, 252, 273], "Then": [80, 133, 196, 218, 247, 249, 251, 252, 259, 282, 285], "exportsingleimagegroundtruthtococo": [80, 133], "next_annotation_id": [80, 133], "category_id_set": [80, 133], "groundtruth_box": [80, 133], "groundtruth_class": [80, 133], "groundtruth_mask": [80, 133], "groundtruth_is_crowd": [80, 133], "ingest": [80, 133], "here": [80, 133, 184, 185, 187, 196, 216, 221, 222, 223, 225, 226, 231, 232, 242, 249, 252, 254, 257, 260, 262, 276, 280, 281, 282, 288], "match": [80, 81, 133, 134, 194, 219, 255, 279], "ones": [80, 133, 273], "exportsingleimagedetectionstococo": [80, 133], "associ": [80, 133], "uniqu": [80, 113, 133, 187, 276], "identifi": [80, 133, 146, 186, 262, 273, 279], "assign": [80, 133, 180, 221, 275, 285], "continu": [80, 107, 133, 192, 231, 233, 255, 273, 286], "drop": [80, 108, 133, 190, 233, 234, 248, 273, 279, 282, 288], "num_gt_box": [80, 133], "num_detect": [80, 84, 133, 137, 232, 233, 287], "image_height": [80, 133], "image_width": [80, 133], "detection_mask": [80, 133], "crowd": [80, 133], "rais": [80, 107, 108, 109, 133, 138, 194, 214, 256, 273, 274], "valueerror": [80, 133, 224], "insid": [80, 133, 219, 220, 255, 273, 277, 285], "exportsingleimagedetectionboxestococo": [80, 133], "detection_box": [80, 133, 233, 287], "detection_scor": [80, 133, 233, 287], "detection_class": [80, 133, 233, 287], "exporsingleimagedetectionboxestococo": [80, 133], "exportsingleimagedetectionmaskstococo": [80, 133], "allenai": [81, 82, 134, 135], "bi": [81, 82, 134, 135], "att": [81, 82, 134, 135], "flow": [81, 82, 134, 135, 191, 192, 233], "f1_score": [81, 82, 134, 135], "ground_truth": [81, 82, 134, 135], "f1": [81, 83, 84, 134, 136, 137, 221, 232, 233, 257, 281, 288], "ground": [81, 82, 134, 135], "truth": [81, 82, 134, 135], "metric_max_over_ground_truth": [81, 82, 134, 135], "metric_fn": [81, 82, 134, 135], "exact_match_scor": [81, 134], "exact": [81, 134], "averag": [81, 82, 84, 134, 135, 137, 232, 233, 279, 285, 288], "articl": [81, 82, 134, 135], "paragraph": [81, 82, 134, 135], "qa": [81, 82, 134, 135, 194], "normalize_answ": [82, 135], "remov": [82, 135, 189, 233, 247, 251, 260, 267, 268, 273, 283], "extra": [82, 135, 233, 279], "replac": [82, 135, 214, 221, 233, 236, 245, 280], "newlin": [82, 135, 180], "tab": [82, 135, 254, 283], "abc": [82, 135, 195, 283, 285], "harmon": [82, 84, 135, 137], "recal": [82, 84, 135, 137], "equat": [82, 84, 135, 137, 187, 276, 282], "answer_start": [82, 135], "177": [82, 135, 288], "denver": [82, 135], "bronco": [82, 135], "nfl": [82, 135], "team": [82, 135, 189, 278], "afc": [82, 135], "super": [82, 135, 192], "bowl": [82, 135], "50": [82, 135, 192, 196, 259, 273, 282, 288], "56be4db0acb8001400a502ec": [82, 135], "form": [82, 135, 218, 219, 254], "percentag": [82, 135, 213, 279, 287], "bleu_util": [83, 136], "coco_label_map": [83, 136], "coco_tool": [83, 136], "evaluate_squad": [83, 136], "tensorflowmetr": [84, 137], "maintain": [84, 137, 185, 189, 190, 214, 235, 237, 249, 252, 256, 261, 262, 273, 279, 280], "pytorchmetr": [84, 137], "mxnetmetr": [84, 137], "onnxrtqlmetr": [84, 137], "onnxrtitmetr": [84, 137], "metric_registri": [84, 137], "metric_typ": [84, 137], "decorator_metr": [84, 137], "basemetr": [84, 137, 150], "single_output": [84, 137], "hvd": [84, 137, 221], "wrappytorchmetr": [84, 137], "wrapmxnetmetr": [84, 137], "wraponnxrtmetr": [84, 137], "binari": [84, 137, 224, 232, 249, 252, 280], "proport": [84, 137], "were": [84, 137, 240, 273], "pred_list": [84, 137], "pytorchloss": [84, 137], "print": [84, 137, 180, 221, 232, 233, 256, 257, 273, 282, 285], "mae": [84, 137, 232], "compare_label": [84, 137, 150, 232], "error": [84, 119, 137, 159, 176, 218, 232, 238, 259, 260, 263, 279, 282, 285], "actual": [84, 137, 221], "compar": [84, 137, 180, 186, 187, 220, 232, 236, 257, 273, 276, 279, 281, 283, 285], "pred": [84, 137, 232], "rmse": [84, 137, 232, 285], "squar": [84, 119, 137, 159, 218, 232, 259, 285], "estim": [84, 137, 146, 285], "tensorflowtopk": [84, 137], "k": [84, 137, 150, 232, 256, 273], "among": [84, 137, 236, 248, 282], "outcom": [84, 137], "consid": [84, 137, 189, 213, 214, 219, 255, 285], "find": [84, 91, 116, 137, 154, 180, 186, 195, 218, 231, 240, 247, 251, 254, 255, 257, 259, 273, 279, 281, 282, 283, 285], "num_correct": [84, 137], "num_sampl": [84, 137], "generaltopk": [84, 137], "cocomapv2": [84, 137, 232], "anno_path": [84, 137, 232], "95": [84, 137, 232, 288], "map_kei": [84, 137], "detectionboxes_precis": [84, 137], "output_index_map": [84, 137, 232], "tensorflowmap": [84, 137], "tensorflowcocomap": [84, 137], "tensorflowvocmap": [84, 137], "squadf1": [84, 137, 232], "miou": [84, 137], "num_class": [84, 137], "21": [84, 137, 242, 243, 265, 268, 269, 274, 282, 288], "iou": [84, 137], "intersect": [84, 137, 195, 232], "union": [84, 137, 169, 185, 232, 265], "onnxrtglu": [84, 137], "dlrm": [84, 137], "modelconvers": 86, "typic": [86, 113, 192, 194, 220, 222, 226, 259, 273, 288], "saved_model": [86, 185, 277], "basicna": 87, "model_build": [87, 90], "conf_fnam": 87, "modul": [89, 95, 105, 106, 186, 191, 214, 215, 219, 228, 232, 233, 235, 273, 275, 278, 279, 283, 286], "basic_na": 89, "nas_util": 89, "nasbas": [90, 192], "nas_registri": 91, "nas_method": 91, "create_search_space_pool": 91, "idx": [91, 216], "enumer": [91, 169, 195, 219, 220, 221, 233, 236, 272, 273, 283], "find_pareto_front": 91, "pareto": [91, 192], "front": [91, 192], "n_point": 91, "n_metric": 91, "n_pareto_point": 91, "gridsearch": 92, "whole": [92, 187, 197, 256, 276, 288], "randomsearch": 92, "bayesianoptimizationsearch": 92, "gradient": [93, 194, 228, 233, 273, 274, 288], "sensit": [93, 109, 228, 273], "pruner": [93, 94, 95, 96, 97, 99, 104, 105, 107, 110, 233, 273, 287], "gradientsensitivityprun": 93, "global_config": [93, 94, 96, 97, 98], "pytorchmodel": [93, 94, 96, 97, 98, 147], "mai": [93, 94, 96, 97, 98, 184, 187, 189, 190, 196, 213, 214, 218, 223, 224, 230, 234, 247, 251, 257, 260, 262, 274, 276, 279, 282, 285], "overwritten": [93, 94, 96, 97, 98, 242], "group": [94, 194, 228, 273, 279, 283, 284, 285, 288], "lasso": [94, 228, 273], "grouplassoprun": 94, "legaci": 95, "gradient_sensit": 95, "group_lasso": 95, "basicmagnitudeprun": 96, "lock": [97, 98, 228, 272, 273], "patternlockprun": [97, 109], "pruner_registri": 98, "clase": 98, "pruningconf": [99, 104], "tfpruningcallback": [99, 104], "nc_model": [99, 104], "input_model": [99, 104, 235, 257, 258, 259, 283], "callback": [99, 104, 169, 172, 191, 233, 272, 273, 276], "pure": [99, 104, 273], "tile_pattern": 101, "pattern_registri": 102, "pattern_typ": 102, "patternbas": 102, "mask_shap": [102, 103], "is_contigu": 102, "tile": [103, 214], "tilepatternbas": 103, "parent": [103, 109, 111, 283], "tilepattern_1x1": 103, "1x1": [103, 219, 233, 273], "tilepattern_2x2": 103, "2x2": [103, 282], "tilepattern_1x16": 103, "1x16": 103, "tilepattern_4x1": 103, "tilepattern_1x2": 103, "1x2": [103, 282], "logger": [105, 170, 173, 180], "prune_util": 105, "register_pattern": 107, "registri": [107, 109, 111, 192], "sure": [107, 109, 111, 212, 256], "get_pattern": 107, "assertionerror": [107, 108, 109, 138], "unit": [107, 190, 262, 273], "part": [107, 109, 191, 229, 234, 249, 252, 262, 264, 273, 277, 282, 286], "is_glob": 107, "contrast": [107, 284], "individu": [107, 189, 262, 273, 282], "patternnxm": 107, "kept": 107, "block_siz": [107, 279], "direct": [107, 273], "hidden": [107, 195], "patternninm": 107, "check_config": 108, "prune_config": 108, "everyth": [108, 242], "reset_non_value_to_default": 108, "undefin": 108, "process_and_check_config": 108, "non": [108, 180, 191, 218, 279, 285], "process_config": 108, "obtain": [108, 191, 196, 262, 273, 281, 282, 285], "parse_to_prun": 108, "keep": [108, 155, 191, 195, 214, 253, 254, 280], "parse_not_to_prun": 108, "register_prun": 109, "get_prun": 109, "module_nam": [109, 180], "begin": [109, 214, 215, 219, 220, 233, 273, 285], "current_sparsity_ratio": 109, "global_step": 109, "update_frequency_on_step": [109, 275], "target_sparsity_ratio": 109, "final": [109, 187, 196, 233, 240, 271, 273, 276, 280, 285], "max_sparsity_ratio_per_lay": [109, 275], "magnitudeprun": 109, "snipprun": 109, "network": [109, 157, 187, 192, 213, 219, 220, 223, 233, 236, 256, 274, 276, 282, 285], "connect": [109, 254, 256, 263, 273, 281], "arxiv": [109, 194, 213, 236, 273, 274, 279, 282], "ab": [109, 185, 187, 273, 276, 282], "1810": 109, "02340": 109, "snipmomentumprun": 109, "moreoev": 109, "updat": [109, 137, 150, 177, 224, 231, 232, 233, 240, 245, 248, 264, 273, 279, 282, 285, 286], "momentum": [109, 228, 233, 273, 287], "while": [109, 116, 154, 185, 187, 195, 196, 216, 222, 228, 234, 237, 242, 254, 256, 273, 275, 276, 279, 282], "spars": [109, 216, 274], "least": [110, 190, 233, 273, 285], "templat": [110, 233, 273], "tree": [110, 126, 166, 262], "huggingface_model": [110, 258], "eager": [110, 194, 221, 228, 276, 278, 283], "config_file_path": 110, "pruner_info": 110, "register_schedul": 111, "get_schedul": 111, "gradual": [111, 273], "oneshotschedul": 111, "iterativeschedul": 111, "quantconf": 112, "separ": [113, 189, 214, 227, 230, 262, 264, 272, 275], "append": [113, 116, 154, 191, 220, 233, 272], "There": [113, 115, 151, 153, 184, 214, 218, 219, 225, 228, 233, 237, 259, 261, 262, 279, 282, 285, 287], "opt_model": [113, 233], "fulli": [113, 183, 233, 262, 276, 282], "train_func": [113, 169, 221, 233, 276], "automixedprecisiontunestrategi": [114, 152], "basictunestrategi": [115, 153], "stage": [115, 120, 151, 153, 160, 219, 273, 283, 285], "polici": [115, 119, 151, 153, 159, 186, 189, 194, 287, 289], "bayesiantunestrategi": [116, 154], "acq_max": [116, 154], "ac": [116, 154], "gp": [116, 154], "y_max": [116, 154], "n_warmup": [116, 154], "10000": [116, 154, 273], "n_iter": [116, 154], "acquisit": [116, 154], "gaussian": [116, 154, 285], "relev": [116, 154, 196, 197, 214, 259, 273], "limit": [116, 154, 180, 185, 194, 218, 219, 231, 236, 276, 279, 280, 283], "acq": [116, 154], "randomst": [116, 154], "scipi": [116, 154], "x_max": [116, 154], "targetspac": [116, 154], "pbound": [116, 154], "9527": [116, 154, 233, 287], "allow": [116, 154, 186, 219, 221, 232, 233, 234, 256, 261, 273, 275, 279, 282, 285, 287], "duplic": [116, 154], "bayesianoptim": [116, 154], "exhaustivetunestrategi": [117, 156], "auto_mixed_precis": [118, 158], "msetunestrategi": [119, 159], "those": [119, 159, 180, 185, 187, 218, 219, 220, 227, 233, 234, 272, 273, 276, 285], "mse_v2tunestrategi": [120, 160], "revert": [120, 128, 160, 168, 285], "fx": [120, 160, 228, 234, 243, 244, 258, 274, 276, 278], "randomtunestrategi": [121, 161], "strategy_registri": [122, 162, 285], "tunestrategi": [122, 162, 285], "tuning_sampl": [124, 164], "tuning_spac": [124, 125, 127, 164, 165, 167], "tuning_struct": [124, 125, 126, 164, 165, 166], "tuningsamplerregistri": 125, "tuningsampl": [125, 165], "tuningord": [125, 165], "Not": [125, 126, 165, 166, 180, 192, 214], "tuningspac": [125, 126, 165, 166], "tuning_order_lst": [125, 165], "initial_op_tuning_cfg": [125, 165], "modelwisetuningsampl": [125, 165], "tuning_items_prior": [125, 165], "op_dtype_dict": [125, 165], "optuningconfig": [125, 126, 127, 165, 166, 167], "optypewisetuningsampl": [125, 165], "opwisetuningsampl": [125, 165], "fallbacktuningsampl": [125, 165], "op_dtyp": [125, 165], "accumul": [125, 165, 236, 285], "skip_first": [125, 165], "smoothquantsampl": [125, 165], "tuningitem": [126, 166], "item_typ": [126, 166], "capabl": [126, 166, 187, 196, 197, 212, 225, 233, 234, 245, 256, 261, 273, 275, 276, 285, 287], "pattern_to_intern": [126, 166], "default_dtyp": [126, 166], "pattern_to_path": [126, 166], "quant_mode_from_pattern": [126, 166], "internal_pattern": [126, 166], "initial_tuning_cfg_with_quant_mod": [126, 166], "op_name_typ": [126, 166], "quant_mod": [126, 166, 196, 197], "cfg": [126, 166, 172, 196, 197], "step1": [126, 166], "step2": [126, 166], "complet": [126, 166, 195, 196, 273, 276, 285, 287, 288], "step3": [126, 166], "step4": [126, 166], "step5": [126, 166], "op_typ": [127, 167], "op_quant_mod": [127, 167], "ordereddefaultdict": [128, 168], "extract_data_typ": [128, 168], "data_typ": [128, 168], "sign": [128, 168, 187, 190, 194, 197, 213, 256, 274, 276, 279, 281], "unsign": [128, 168, 197, 279], "reverted_data_typ": [128, 168], "signed_flag": [128, 168], "get_adaptor_nam": [128, 168], "experiment": [129, 192, 216, 220, 221, 223, 229, 233, 273, 275, 276, 280, 284], "sub_class": [137, 150], "register_customer_metr": 137, "mani": [137, 150, 185, 214, 215, 229, 279, 285, 287], "tell": [137, 150, 275], "topk": [137, 150, 221, 232, 233, 256, 276], "matrix": [137, 150, 184, 187, 194, 245, 286], "frozen": [138, 146, 150, 235], "ckpt": [138, 146, 150, 288], "savedmodel": [138, 146, 150], "onnx_ml_pb2": [138, 235], "gluon": [138, 150, 235], "hybirdblock": [138, 150], "basemodel": [139, 185], "plai": [139, 274, 279, 282], "role": [139, 279, 282], "base_model": 140, "keras_model": 140, "mxnet_model": 140, "nets_factori": 140, "onnx_model": [140, 257], "tensorflow_model": [140, 259], "torch_model": 140, "kerasmodel": 141, "get_model_fwk_nam": 142, "fwk": 142, "mxnetmodel": 143, "net": [144, 194], "factori": 144, "tfslimnetsfactori": 144, "onnxmodel": 145, "get_model_typ": 146, "validate_graph_nod": 146, "node_nam": [146, 196], "compat": [146, 190, 221, 235, 249, 252, 254, 273, 280], "graphdef": [146, 235], "validate_and_inference_input_output": 146, "input_tensor_nam": 146, "output_tensor_nam": 146, "graph_sess": 146, "sess": 146, "graph_def_sess": 146, "frozen_pb_sess": 146, "load_saved_model": 146, "saved_model_tag": 146, "signatur": 146, "tag": [146, 282, 283], "metagraphdef": 146, "analyz": [146, 281, 282, 283], "input_tensor": 146, "output_tensor": 146, "try_loading_kera": 146, "keras_sess": 146, "slim_sess": 146, "checkpoint_sess": 146, "estimator_sess": 146, "input_fn": 146, "saved_model_sess": 146, "tensorflowbasemodel": 146, "tensorflowsavedmodelmodel": 146, "tensorflowllmmodel": 146, "exceed": 146, "protobuf": [146, 257], "2gb": 146, "tensorflowqatmodel": 146, "tensorflowcheckpointmodel": 146, "checkpoint": [146, 179, 235], "tensorflowmodel": 146, "pytorchbasemodel": 147, "pytorchfxmodel": 147, "ipexmodel": 147, "driven": [148, 194, 233, 254, 271, 283], "develop": [148, 190, 191, 214, 229, 233, 234, 236, 237, 243, 254, 260, 273, 274, 278, 281], "objective_registri": 148, "objective_custom_registri": 148, "obj_cl": 148, "eural_compressor": 148, "objective_cl": 148, "user_object": 148, "__class__": 148, "__name__": 148, "objective_cfg": 148, "deep_get": 148, "usr_cfg": 148, "deep_set": 148, "user_obj_cfg": 148, "With": [148, 185, 187, 191, 195, 197, 215, 233, 242, 247, 251, 255, 261, 271, 273, 274, 276, 281, 282, 285, 288], "easili": [148, 186, 195, 238, 242, 254, 271, 282], "special": [148, 191, 215, 232, 233, 271, 273, 279, 286], "peak": [148, 271], "multiobject": 148, "metric_criterion": 148, "metric_weight": 148, "obj_criterion": 148, "obj_weight": 148, "is_measur": 148, "calib_func": [150, 278], "entir": [150, 169, 184, 191, 196, 197, 213, 261, 273], "autotunestrategi": 151, "level": [155, 176, 189, 236, 264, 282, 285], "conservativetunestrategi": 155, "o0": [155, 285], "who": [155, 189], "hawq_v2tunestrategi": 157, "hawq": [157, 285], "v2": [157, 215, 221, 223, 224, 229, 231, 243, 280, 282, 285, 286, 288], "hessian": [157, 279, 285], "made": [157, 187, 195, 276, 280, 285], "small": [157, 192, 259, 260, 273, 279, 285, 288], "impact": [157, 273, 280, 285], "tunestrategymeta": 162, "metaclass": 162, "lowerbitssampl": 165, "blockfallbacktuningsampl": 165, "op_block_lst": 165, "target_dtyp": 165, "alpha_list": 165, "weightonlyquantsampl": 165, "quanttyp": 168, "quantopt": 168, "quant_typ": 168, "quant_opt": 168, "preprocess_user_cfg": 168, "op_user_cfg": 168, "op_user_cfg_modifi": 168, "group_siz": [168, 186, 279], "32": [168, 185, 186, 221, 227, 236, 279, 288], "build_slave_faker_model": 168, "slave": [168, 285], "virtual": [168, 274], "classregist": 168, "loop": [169, 191, 192, 196, 197, 225, 264, 281, 285], "compressionmanag": 169, "deal": 169, "pruningconfig": 169, "orchestr": [169, 194, 228, 286], "on_train_begin": [169, 191, 219, 220, 233, 272, 273, 276], "train_loop": [169, 233, 272], "on_epoch_begin": [169, 172, 219, 220, 233, 272], "on_step_begin": [169, 172, 219, 220, 233, 272, 273], "on_after_compute_loss": [169, 219, 220, 233, 272], "backward": [169, 187, 219, 220, 221, 233, 272, 273, 276, 280], "on_before_optimizer_step": [169, 219, 220, 233, 272, 273], "on_step_end": [169, 172, 219, 220, 233, 272], "on_epoch_end": [169, 172, 219, 220, 233, 272], "on_train_end": [169, 219, 220, 233, 272, 273, 276], "path_to_sav": 169, "manag": [169, 172, 233, 237, 238, 248], "top1": [169, 232, 256, 273, 276, 288], "callbacks_list": 169, "layerhistogramcollector": 170, "histogram": [170, 180, 256, 283], "num_bin": 170, "8001": [170, 262, 267, 268, 269], "layer_tensor": 170, "include_lay": 170, "collector": 170, "diverg": [170, 174, 197, 213, 219, 285], "get_func_from_config": 172, "func_dict": 172, "get_preprocess": 172, "get_metr": 172, "get_postprocess": 172, "get_algorithm": 172, "algo": 172, "create_dataset": 172, "cfg_preprocess": 172, "cfg_filter": 172, "create_dataload": 172, "dataloader_cfg": 172, "create_eval_func": 172, "postprocess_cfg": 172, "fp32_baselin": [172, 195], "baselin": [172, 186, 281, 282, 283], "create_train_func": 172, "train_cfg": 172, "Their": 172, "auxiliari": 173, "collect_layer_histogram": 173, "create_obj_from_config": 173, "kl_diverg": 173, "load_huggingfac": [173, 233], "neural_insights_util": 173, "weights_detail": 173, "pretrain": [175, 237, 243], "optimizedmodel": 175, "from_pretrain": [175, 194, 233], "save_for_huggingface_upstream": [175, 233], "output_dir": [175, 233, 242, 243, 258, 259, 265, 268, 269], "export_compressed_model": [175, 279], "saved_dir": [175, 279], "use_optimum_format": [175, 279], "enable_full_rang": [175, 277, 279], "compression_dtyp": [175, 279], "int32": [175, 216, 279], "compression_dim": [175, 279], "scale_dtyp": [175, 279], "_type_": 175, "leverag": [175, 183, 186, 192, 194, 219, 223, 237, 254, 272, 276, 279, 285], "symmetr": [175, 185, 187, 197, 276, 279, 284, 285], "comoress": 175, "float16": [175, 216, 279], "msg": [176, 263, 267, 268], "debug": [176, 218, 247, 251, 255, 285, 286], "fatal": 176, "warn": [176, 214], "alia": [176, 180, 239, 244], "register_neural_insights_workload": 177, "workload_loc": [177, 180], "workload_mod": 177, "workload_nam": 177, "uuid": 177, "update_neural_insights_workload": 177, "workload_uuid": 177, "statu": [177, 189, 215, 236, 264, 267, 268, 269, 271, 273], "update_neural_insights_workload_accuracy_data": 177, "baseline_accuraci": 177, "optimized_accuraci": 177, "get_model_path": 177, "is_int8_model": 179, "load_weight_onli": 179, "checkpoint_dir": 179, "layer_wis": [179, 277], "qconfig": [179, 279, 283], "pt": [179, 229, 235, 258, 274, 276, 278, 279], "history_cfg": 179, "best_configur": 179, "best_model_weight": 179, "snapshot": [179, 258], "recover_model_from_json": 179, "json_file_path": 179, "recov": [179, 180, 195, 220], "cfg_from_fil": 180, "yaml_fil": [180, 216, 221], "version1_lt_version2": 180, "version1": 180, "version2": 180, "version1_gt_version2": 180, "greater": [180, 185, 267, 273, 285], "version1_eq_version2": 180, "version1_gte_version2": 180, "version1_lte_version2": 180, "lazyimport": 180, "lazi": 180, "till": [180, 285], "singleton": 180, "time_limit": 180, "context": [180, 275, 279], "get_siz": 180, "seen": [180, 195], "recurs": 180, "compute_spars": 180, "fault_tolerant_fil": 180, "temporari": [180, 189], "equal_dict": 180, "d1": 180, "d2": 180, "compare_kei": 180, "ignore_kei": 180, "except": [180, 214, 260, 276, 277], "ignor": [180, 213, 216, 279, 282, 285], "cpuinfo": 180, "dump_elapsed_tim": [180, 195], "customized_msg": 180, "elaps": 180, "combine_histogram": 180, "old_hist": 180, "arr": 180, "old": [180, 233, 280], "get_tensor_histogram": 180, "tensor_data": [180, 181], "bin": [180, 224], "2048": [180, 194, 279], "get_all_fp32_data": 180, "get_tuning_histori": 180, "tuning_history_path": 180, "num": 180, "offlin": [180, 184, 185, 187, 189, 233, 276, 282], "str2arrai": 180, "dequantize_weight": 180, "weight_tensor": 180, "min_filter_tensor": 180, "max_filter_tensor": 180, "dequant": [180, 191, 196, 282, 283], "scale_info": 180, "captureoutputtofil": 180, "tmp_file_path": 180, "stream": [180, 288], "sy": [180, 214, 240], "stderr": 180, "captur": 180, "statist": [180, 181], "header": [180, 224], "field_nam": 180, "output_handl": 180, "printer": 180, "global_st": 180, "load_data_from_pkl": 180, "pkl": [180, 258], "dump_data_to_loc": 180, "show_memory_info": 180, "hint": 180, "show": [180, 189, 219, 221, 233, 236, 240, 255, 256, 257, 259, 262, 267, 268, 269, 282, 285, 286], "dump_class_attr": 180, "compare_object": 180, "obj1": 180, "obj2": 180, "ignore_attr": 180, "comparison": [180, 279, 280, 283], "alias_param": 180, "param_nam": 180, "param_alia": 180, "alias": [180, 214], "print_tabl": 180, "column_map": 180, "table_entri": 180, "titl": [180, 230, 255, 285], "insert_newlin": 180, "tabl": [180, 197, 218, 223, 236, 257, 259, 288], "prettyt": 180, "column": [180, 279, 282], "func": [180, 276, 287], "handler": [180, 285], "row": [180, 218, 257, 282], "decim": 180, "get_tensors_info": 180, "about": [180, 189, 214, 215, 233, 259, 260, 273, 278, 285, 286, 288], "get_weights_detail": 180, "weightdetail": 180, "dump_tabl": 180, "filepath": [180, 214], "file_typ": 180, "csv": [180, 192, 257, 258], "extens": [180, 187, 192, 194, 195, 214, 225, 228, 229, 231, 233, 234, 235, 238, 243, 244, 245, 249, 252, 253, 257, 273, 274, 276, 279, 282, 285, 286, 287], "dump_table_to_csv": 180, "get_number_of_socket": 180, "platform": [180, 187, 194, 228, 237, 245, 264, 274, 276], "opentri": 180, "activation_min": 180, "activation_max": 180, "print_op_list": 180, "get_op_list": 180, "minmax_file_path": 180, "input_model_tensor": 180, "optimized_model_tensor": 180, "activation_min_max": 180, "calculate_ms": 180, "mse_metric_gap": 180, "fp32_tensor": 180, "dequantize_tensor": 180, "euclidean": [180, 219], "distanc": [180, 219], "check_key_exist": 180, "weightsdetail": 181, "input_tensor_data": 181, "optimized_tensor_data": 181, "weightsstatist": 181, "neural_compressor": [183, 184, 185, 186, 191, 192, 194, 197, 212, 214, 215, 216, 218, 219, 220, 221, 223, 226, 227, 232, 233, 234, 235, 236, 256, 257, 271, 272, 273, 275, 276, 277, 278, 280, 281, 282, 284, 285, 287], "fundament": [183, 184, 213, 233], "respons": [183, 267, 268, 269, 276], "val_dataset": [183, 233, 276], "val_dataload": [183, 233, 276], "mydataload": [183, 185, 186], "quantize_model": [183, 184, 185, 187], "staticquantconfig": [183, 184, 185, 186], "quant_config": [183, 184, 185, 236], "qmodel": [183, 185], "good": [183, 189, 276, 285], "eval_fn": [183, 184, 185, 186], "eval_arg": [183, 185], "eval_acc_fn": [183, 185], "acc": [183, 192, 231, 264, 273, 283, 288], "base_tun": [183, 185], "tuningconfig": [183, 184, 185, 186], "autotun": [183, 184, 185, 187, 214], "custom_tune_config": [183, 184, 185, 186], "weight_sym": [183, 185, 186], "act_sym": [183, 185, 186], "config_set": [183, 184, 185, 186], "tune_config": [183, 184, 185, 186, 196], "set_loc": 183, "abov": [183, 195, 196, 197, 219, 256, 257, 259, 262, 273, 276, 282, 285], "purpos": [183, 225, 234, 254, 256, 275, 276], "static_qu": [183, 214], "weight_dtyp": 183, "weight_granular": 183, "per_tensor": [183, 196, 197, 225, 276, 287], "act_dtyp": [183, 236], "act_granular": 183, "from_dict": 183, "conv2d_config": 183, "acceler": [184, 194, 219, 233, 237, 245, 254, 257, 261, 273, 274, 278, 279, 282, 285], "llm": [184, 236, 273, 274, 277, 279, 282], "gigant": [184, 282], "systemat": [184, 282], "outlier": [184, 196, 213, 218, 259, 279, 282], "quantif": [184, 279, 282], "difficult": [184, 186, 195, 282], "migrat": [184, 282, 286], "difficulti": [184, 282], "mathemat": [184, 282], "equival": [184, 194, 236, 274, 279, 282], "smoothquantconfig": [184, 185], "output_graph_def": 184, "sq_config": 184, "static_config": 184, "still": [184, 187, 213, 233, 260, 274, 276, 278], "fusion": [184, 191, 195, 225], "look": [184, 195, 197, 225, 232, 256, 257, 259, 282, 287], "eval_fn_wrapp": 184, "consider": [184, 282], "amount": [184, 282], "comprehens": [185, 233, 286], "eas": [185, 229, 239, 274], "commit": [185, 189, 190], "scalabl": [185, 187, 194, 229, 231, 234, 274, 276, 278], "straightforward": [185, 273, 279, 282], "experi": [185, 189, 237, 259, 281, 282, 285], "offer": [185, 216, 236], "philosophi": [185, 276], "calib_iter": [185, 196], "baseconfig": [185, 214], "rule": [185, 218, 237, 273], "partial": [185, 273, 276], "hand": [185, 192], "power": [185, 219, 233, 236, 248, 274], "particularli": 185, "critic": [185, 189], "factor": [185, 279, 282, 288], "toler": [185, 259], "And": [185, 190, 191, 212, 214, 233, 240, 282], "supplement": 185, "baseline_model": [185, 186], "asymmetr": [185, 187, 197, 276, 279, 285], "onednn": [185, 229, 234, 276], "rmin": [185, 187, 236, 276], "rmax": [185, 187, 276], "deep": [185, 187, 194, 195, 196, 215, 228, 229, 233, 234, 236, 237, 239, 242, 243, 245, 248, 254, 274, 276, 285, 286], "learn": [185, 187, 194, 195, 196, 215, 216, 223, 227, 228, 229, 233, 234, 236, 237, 239, 242, 243, 245, 248, 249, 252, 254, 273, 274, 276, 282, 283, 285, 286], "sq": [185, 231, 282], "unseen": [185, 187, 276], "zeropoint": [185, 187, 276], "prepar": [185, 187, 191, 216, 221, 226, 256, 267, 268, 269, 273, 276], "enough": [185, 187, 276], "unlik": 185, "tradit": [185, 240, 273], "signific": [185, 273, 274, 277, 282], "focus": [185, 189, 195, 236], "refin": [185, 227, 273], "instal": [185, 221, 224, 226, 237, 239, 242, 245, 249, 252, 254, 255, 257, 258, 259, 289], "aim": [186, 192, 194, 231, 237, 273, 282, 285, 286], "quickli": [186, 231, 285, 286], "deploi": [186, 190, 219, 233, 260, 264, 279, 285], "despit": 186, "varieti": [186, 222, 275, 285], "appropri": [186, 189, 213, 282], "consum": [186, 215], "certain": [186, 281], "predefin": 186, "primari": [186, 213, 285], "get_woq_tuning_config": 186, "rtnconfig": 186, "use_sym": 186, "gptqconfig": 186, "travers": [186, 196, 197, 279, 285], "default_sampl": 186, "trial": [186, 285], "met": [186, 187, 192, 225, 276, 283], "demonstr": [186, 194, 222, 236, 237, 267, 268, 269, 283], "four": [186, 264, 283, 288], "veri": [187, 233, 255, 259, 276, 279, 285, 286], "invent": [187, 276], "improv": [187, 190, 213, 214, 233, 237, 254, 255, 257, 273, 274, 276, 278, 279, 285, 286, 288], "speed": [187, 213, 233, 245, 273, 274, 276, 285], "represent": [187, 189, 191, 213, 220, 236, 273, 276], "int4": [187, 194, 231, 276, 288], "miss": [187, 273, 276], "rate": [187, 233, 273, 276], "cost": [187, 236, 276, 279], "On": [187, 276, 288], "3rd": [187, 234, 274, 276, 278], "gen": [187, 231, 234, 274, 276, 278], "xeon": [187, 194, 229, 230, 231, 234, 274, 276, 278, 288], "processor": [187, 194, 231, 234, 262, 274, 276, 278], "4x": [187, 192, 276], "theoret": [187, 276, 279], "speedup": [187, 222, 228, 276], "4th": [187, 231, 274, 276], "affin": [187, 276], "math": [187, 276], "255": [187, 276, 282], "f": [187, 214, 219, 221, 276, 279, 282], "sometim": [187, 191, 218, 276], "overflow": [187, 276], "issu": [187, 189, 190, 193, 194, 229, 257, 259, 276, 283], "due": [187, 197, 223, 273, 276, 282, 283], "dot": [187, 234, 276], "product": [187, 194, 228, 234, 237, 238, 254, 260, 274, 276, 281, 285], "avx512": [187, 234, 276], "vnni": [187, 222, 228, 275, 276], "instruct": [187, 196, 197, 219, 229, 234, 249, 252, 256, 257, 258, 259, 273, 274, 275, 276, 282, 288], "introduc": [187, 195, 196, 197, 225, 233, 276, 279, 280, 282, 286], "solv": [187, 190, 276, 280], "runtim": [187, 190, 194, 195, 196, 198, 215, 218, 222, 225, 228, 234, 236, 239, 244, 245, 275, 279, 280, 285], "wide": [187, 194, 222, 234, 273, 276], "major": [187, 227, 259, 276, 282], "peopl": [187, 276], "emul": [187, 233, 276], "forward": [187, 196, 233, 256, 273, 275, 276, 279, 282, 283], "mimic": [187, 276], "done": [187, 191, 219, 220, 238, 254, 263, 267, 268, 273, 276], "adjust": [187, 245, 276, 282], "fact": [187, 276], "ultim": [187, 276], "therefor": [187, 191, 233, 257, 259, 273, 276, 277, 280, 282], "pain": [187, 276], "brought": [187, 235, 238, 245, 276], "lossi": [187, 276], "respect": [187, 189, 225, 273, 282, 287], "chart": [187, 259, 276, 281, 283], "understand": [187, 260, 276, 283, 286], "welcom": [188, 189, 190, 194, 256, 263, 289], "interest": [189, 194, 256, 283], "foster": 189, "particip": [189, 264], "commun": [189, 256], "harass": 189, "everyon": 189, "regardless": 189, "ag": 189, "bodi": 189, "ethnic": 189, "sex": 189, "characterist": 189, "gender": 189, "ident": [189, 219], "educ": 189, "socio": 189, "econom": 189, "person": [189, 274], "appear": [189, 248, 254, 256], "race": 189, "religion": 189, "sexual": 189, "orient": 189, "behavior": [189, 195, 196, 197, 225, 235, 279, 283, 285, 287], "contribut": [189, 194, 273], "inclus": 189, "Being": 189, "viewpoint": 189, "gracefulli": 189, "empathi": 189, "toward": [189, 219], "member": [189, 195], "unaccept": 189, "imageri": 189, "unwelcom": 189, "troll": 189, "insult": 189, "derogatori": 189, "comment": [189, 196, 216, 232, 233, 279, 284], "polit": 189, "attack": 189, "public": [189, 249, 252], "privat": 189, "publish": [189, 230, 231, 234, 255, 282], "electron": 189, "explicit": 189, "permiss": 189, "inappropri": 189, "profession": 189, "clarifi": 189, "fair": 189, "action": [189, 249, 252], "edit": 189, "reject": 189, "wiki": 189, "ban": 189, "temporarili": 189, "perman": [189, 273], "deem": 189, "threaten": 189, "offens": 189, "harm": 189, "mail": 189, "social": [189, 274], "media": [189, 274], "account": [189, 281, 285], "appoint": 189, "onlin": [189, 281], "event": [189, 283], "abus": 189, "report": [189, 190, 194, 264, 281], "contact": [189, 280, 281], "complaint": 189, "review": [189, 190, 194, 274], "investig": [189, 214, 259], "necessari": [189, 192, 196, 235, 255, 273, 281, 285], "circumst": [189, 275], "oblig": [189, 260], "confidenti": [189, 256], "regard": [189, 278], "incid": 189, "faith": 189, "face": [189, 194, 202, 237, 241, 261, 263, 274, 280, 288], "repercuss": 189, "leadership": 189, "adapt": [189, 196, 216, 236, 245, 274], "faq": [189, 194], "page": [189, 190, 256, 259, 260], "send": [190, 196], "view": [190, 194, 222, 245, 254, 260, 280], "star": 190, "repositori": [190, 249, 252], "button": [190, 228, 248, 254], "fork": [190, 249, 252], "clone": [190, 218, 229, 247, 251, 256, 258, 259, 261, 262], "pc": 190, "git": [190, 218, 224, 229, 256, 258, 259, 261, 262], "branch": 190, "modif": [190, 195, 225, 242, 261], "checkout": 190, "my": 190, "messag": [190, 262, 263, 267, 268, 269, 285], "push": [190, 236, 273, 279, 282], "consist": [190, 191, 214, 262, 282, 285], "cover": [190, 223, 227, 274], "would": [190, 233, 258, 273, 276, 282], "adopt": [190, 237, 273, 274, 282], "certif": [190, 256], "agre": 190, "off": [190, 279], "pr": [190, 215, 232, 249, 252, 280], "At": [190, 196, 236, 260, 264, 285], "approv": 190, "licens": 190, "azur": [190, 194, 274], "devop": 190, "ci": 190, "cloud": [190, 194, 236, 264, 274], "e16": 190, "v5": 190, "scope": [190, 196, 233], "scan": [190, 194], "pylint": 190, "bandit": 190, "copyright": [190, 230], "docstyl": 190, "spellcheck": 190, "dco": 190, "pytest": 190, "No": [190, 214, 224, 233, 262, 263, 274], "failur": [190, 191], "fault": 190, "coverag": 190, "submit": [190, 261, 264, 274], "bug": [190, 194], "intend": 190, "safe": 190, "collabor": [190, 194, 239, 245], "adher": 190, "toolkit": [191, 229, 237, 245, 274, 286], "tracer": 191, "graphmodul": [191, 278], "resolv": [191, 193], "floatfunct": 191, "cat": [191, 223, 240, 267, 268, 269], "relu": [191, 225, 282, 283], "batchnorm": [191, 282], "descript": [191, 196, 197, 215, 262, 266, 282], "10004": [191, 192, 195, 215, 219, 220, 221, 225, 228, 234, 236, 272, 275, 277, 279, 287], "eval": [191, 214, 215, 218, 237, 276, 283], "fail": [191, 215, 223, 263], "conduct": [191, 233, 242, 254, 285, 286], "imper": 191, "lot": [191, 259, 282], "As": [191, 196, 215, 219, 232, 233, 248, 259, 273, 279, 285], "might": [191, 214, 256, 285], "successfulli": [191, 194, 221, 263, 267, 268, 269, 274], "suggest": [191, 214, 281], "traceabl": 191, "proxi": 191, "tutori": [191, 245, 274, 286], "prototyp": 191, "html": [191, 194, 196, 213, 221, 228, 249, 252, 255, 257, 263, 267, 276], "highlight": 191, "untrac": 191, "move": [191, 260, 275, 279, 280], "ssd": [191, 223, 288], "resnet34": [191, 288], "r34": 191, "bboxes_labels_scor": 191, "prob": 191, "45": [191, 231, 288], "max_output": 191, "zip": [191, 263, 267, 268], "squeez": 191, "dbox": 191, "dlabel": 191, "dscore": 191, "decode_singl": 191, "autom": [192, 237, 254, 255, 274, 282], "artifici": 192, "ann": 192, "par": [192, 264], "outperform": 192, "propos": [192, 195, 219, 234, 279, 282], "potenti": [192, 218], "procedur": [192, 273, 285], "lie": [192, 213], "predictor": 192, "shown": [192, 215, 218, 219, 232, 233, 236, 248, 257, 259, 271, 272, 273, 277, 282, 285], "figur": [192, 247, 248, 251, 277], "popul": 192, "inner": 192, "evolutionari": 192, "cycl": 192, "until": [192, 196, 285], "conclud": 192, "count": [192, 216, 279], "yet": [192, 249, 252, 255, 262, 276], "simplest": [192, 213, 240], "launcher": [192, 194, 219, 220, 245, 286], "agent": 192, "nsga2": 192, "supernet": 192, "ofa_mbv3_d234_e346_k357_w1": 192, "mac": [192, 255], "num_ev": 192, "250": [192, 273], "results_csv_path": 192, "search_result": 192, "dataset_path": 192, "ilsvrc2012": 192, "mobilenetv3": 192, "lt": [192, 216], "wmt": 192, "en": 192, "de": 192, "guidelin": [193, 194], "mainstream": [194, 286], "workflow": [194, 196, 197, 218, 219, 223, 229, 234, 236, 249, 252, 256, 283, 286], "particular": [194, 273, 279], "hardwar": [194, 195, 219, 228, 233, 236, 254, 273, 274, 275], "flex": [194, 229], "amd": [194, 229, 288], "arm": [194, 228, 229, 288], "nvidia": [194, 213, 228, 229, 288], "llama2": 194, "falcon": [194, 231, 273, 282, 288], "gpt": [194, 231, 258, 273, 282, 288], "j": [194, 231, 258, 273, 282, 288], "bloom": [194, 231, 273, 282, 288], "opt": [194, 231, 242, 273, 282, 285, 288], "broad": [194, 228, 243, 286], "stabl": [194, 229, 273, 274], "diffus": [194, 274], "hub": [194, 222, 226, 245], "hug": [194, 261, 274], "vision": [194, 223, 241, 282], "coder": [194, 228, 238, 239, 242, 245, 248, 261, 265, 274], "marketplac": [194, 255, 274], "googl": [194, 214, 234, 274], "amazon": [194, 237, 245], "web": [194, 256, 262, 267, 268, 269, 283], "servic": [194, 254, 261, 274], "softwar": [194, 230, 273, 274, 280], "alibaba": [194, 244, 251, 252, 274], "tencent": [194, 274], "taco": [194, 274], "microsoft": [194, 195, 236], "oliv": [194, 274], "ai": [194, 236, 237, 274, 278, 286], "ecosystem": [194, 274], "lightn": [194, 244], "2024": [194, 288], "03": [194, 288], "sota": [194, 274], "autoround": [194, 231], "gaudi2": 194, "pip": [194, 218, 221, 224, 226, 229, 239, 242, 247, 249, 251, 252, 256, 257, 258, 259, 280], "34": [194, 231, 269, 288], "packag": [194, 195, 214, 224, 229, 254, 255, 274, 280, 285], "program": [194, 221, 230, 237, 254], "gauid2": 194, "docker": 194, "gaudi": 194, "stack": 194, "setup": [194, 218, 225, 229, 249, 252, 256, 258, 259, 261, 262, 273], "habana": 194, "habana_visible_devic": 194, "ompi_mca_btl_vader_single_copy_mechan": 194, "cap": 194, "sys_nic": 194, "host": [194, 221, 262, 264, 267, 268, 269], "ipc": 194, "vault": 194, "ubuntu22": 194, "04": [194, 229, 231, 288], "habanalab": 194, "latest": [194, 229, 274, 280], "p": [194, 255, 256, 279], "login": [194, 249, 252, 281], "exec": 194, "container_id": 194, "bash": [194, 259, 283], "optimum": [194, 244, 245, 257, 279], "upgrad": [194, 233], "auto_round": 194, "automodel": 194, "autotoken": [194, 233], "get_dataload": 194, "eleutherai": [194, 231, 258, 282, 288], "neo": [194, 288], "125m": [194, 282], "float_model": 194, "trust_remote_cod": 194, "seqlen": 194, "woq_conf": 194, "quantized_model": [194, 263, 267, 268], "resnet18": [194, 234, 239, 288], "static_quant_conf": 194, "overview": [194, 285], "jupyterlab": [194, 237, 243, 245, 247, 251, 286], "studio": [194, 245, 254, 264, 286], "topic": 194, "fp4": [194, 236, 279], "nf4": [194, 279], "fp8": [194, 236, 274], "innov": [194, 245, 274], "blog": [194, 274], "meta": [194, 231, 274, 288], "llama": [194, 231, 273, 274, 277, 279, 282, 288], "effect": [194, 195, 273, 274], "oct": [194, 274], "2023": [194, 236, 269, 273, 279, 282], "emnlp": [194, 274], "teq": [194, 274, 277, 279], "trainabl": [194, 274, 279], "sep": [194, 274], "descent": [194, 274], "releas": [194, 229, 243, 245, 247, 251, 253, 265, 268, 269, 289], "legal": [194, 289], "secur": [194, 256, 274, 289], "request": [194, 262, 263, 264, 267, 268, 269, 276], "ask": [194, 229], "email": 194, "research": [194, 230, 282, 288], "idea": [194, 256, 273, 282, 285], "discord": 194, "join": [194, 257, 262, 267, 268], "technic": 194, "discuss": 194, "wechat": [194, 274], "img": 194, "bridg": [195, 196, 228], "vanilla": [195, 196, 228], "adaptor_registri": 195, "abcadaptor": 195, "__init__": [195, 214, 215, 216, 232, 285], "framework_specific_info": 195, "tune_cfg": [195, 197, 285], "query_fw_cap": [195, 197], "query_fused_pattern": 195, "he": 195, "besid": [195, 219, 259, 279], "describ": [195, 197, 214, 218, 225, 256, 283], "past": [195, 279], "mainten": 195, "abil": [195, 196, 216, 225, 236, 282], "fragment": 195, "scenario": [195, 212, 219, 233, 273, 279], "granular": [195, 196, 197, 225, 228, 236, 240, 276, 282, 287], "scheme": [195, 196, 197, 215, 225, 245, 279, 285, 287], "semant": [195, 225], "querybackendcap": [195, 196], "tensorflowqueri": 195, "mla": [195, 234, 276], "becom": [195, 223, 273, 279], "explor": [195, 236], "qtype": 195, "onnxrt_qlinearopsadaptor": 195, "data_load": 195, "inspect_tensor": 195, "op_list": [195, 283], "iteration_list": 195, "inspect_typ": 195, "save_to_disk": 195, "quantization_cfg": 195, "set_tensor": 195, "tensor_dict": 195, "input_graph": 195, "diagnosis_help": 195, "fw": 196, "outlin": [196, 197], "extend": [196, 197], "accommod": [196, 197], "incorpor": [196, 197, 220, 273, 285], "give": [196, 254, 285], "diagram": [196, 197, 218, 285], "illustr": [196, 197, 220, 285], "sequencediagram": [196, 197, 264], "autonumb": [196, 197], "query_framework_cap": 196, "opwis": 196, "optypewis": 196, "\u2776": 196, "\u2777": 196, "\u2778": 196, "\u2779": 196, "\u277a": 196, "\u277b": 196, "previou": [196, 197, 233, 273, 280, 282, 283, 285, 286, 288], "\u277c": 196, "These": [196, 228, 257], "chapter": 196, "node_op": 196, "confirm": 196, "chosen": [196, 213], "conv2d": [196, 197, 218, 223, 225, 259, 282, 283, 285], "int8_conv_config": 196, "optype_wise_": 196, "minmax": [196, 197, 213, 225, 276, 287], "per_channel": [196, 197, 225, 276, 287], "sym": [196, 197, 225, 276, 279, 287], "tuning_cfg_to_fw": 196, "Its": [196, 213, 273], "quantize_config": 196, "op_wise_config": 196, "dispatch": [196, 228, 261, 264], "is_perchannel": 196, "is_asymmetr": 196, "weight_bit": 196, "bf16_op": [196, 278], "convert_bf16": 196, "got": [196, 224, 283], "subsequ": [196, 237, 254], "calib": 196, "larger": [196, 273, 279, 282], "caus": [196, 215, 238, 257, 259, 273, 279], "somewhat": 196, "distort": 196, "line": [196, 214, 221, 228, 237, 242, 243, 262, 283], "explain": [197, 218, 282], "let": [197, 225, 242, 273, 275, 287], "overal": [197, 262, 279, 287], "drive": 197, "section": [197, 214, 218, 219, 220, 254, 257, 260, 273, 275, 279, 287], "uint4": 197, "asym": [197, 225, 279, 287], "independ": 197, "kullback": [197, 219], "leibler": [197, 219], "pytorch_cpu": 197, "1_11_capabl": 197, "cap_s8_1_11": 197, "conv1d": 197, "cap_s8_1_11_conv1d": 197, "state": [197, 240, 273], "per_channel_symmetr": 197, "addition": [197, 221, 273, 285], "per_tensor_symmetr": 197, "One": [197, 214, 216, 221, 228, 259, 273, 274, 285], "nativ": 197, "simul": 197, "observ": [197, 279, 281, 283, 285], "with_arg": 197, "qscheme": 197, "torch_dtyp": 197, "quant_min": 197, "quant_max": 197, "linux": [212, 224, 229, 248, 254], "x86_64": 212, "aarch64": 212, "prove": [213, 279, 282], "benefici": 213, "uniform": [213, 279], "\u03b2": 213, "\u03b1": 213, "preserv": [213, 236, 273, 279], "focu": [213, 285], "essenti": [213, 224], "percentil": 213, "remaind": 213, "enhanc": [213, 237, 273, 274, 278], "resolut": 213, "extrem": 213, "retain": 213, "noteworthi": 213, "vanhouck": 213, "vincent": 213, "andrew": 213, "senior": 213, "mark": 213, "z": [213, 214, 219, 282], "mao": 213, "2011": 213, "szymon": 213, "migacz": 213, "tensorrt": [213, 234, 276], "2017": 213, "mckinstri": 213, "jeffrei": 213, "l": [213, 219, 283, 285], "et": [213, 236, 279, 282], "al": [213, 236, 279, 282], "discov": [213, 283], "embed": [213, 273], "preprint": [213, 236, 273, 279, 282], "1809": 213, "04191": 213, "2018": 213, "mostli": 214, "summar": [214, 219], "conflict": [214, 224], "overli": 214, "argu": 214, "decis": [214, 232], "prioriti": [214, 265], "pep": 214, "o": [214, 229, 239, 257], "sub_modul": 214, "namespac": 214, "pollut": 214, "subprocess": [214, 215], "popen": 214, "statement": 214, "pipe": 214, "long_str": 214, "extran": 214, "__version__": 214, "pager": 214, "getenv": 214, "readabl": 214, "seem": 214, "worth": [214, 273], "4f": 214, "65421": 214, "sentenc": 214, "register_config": 214, "framework_nam": 214, "algo_nam": 214, "eval_result": 214, "declar": [214, 255], "complex": [214, 233, 234, 273], "typealia": 214, "_lossandgradi": 214, "complextfmap": 214, "xx_func": 214, "ordereddict": 214, "pylanc": 214, "cheeseshopaddress": 214, "chees": 214, "shop": 214, "outofcheeseerror": 214, "crbug": 214, "192795": 214, "cpufreq": [214, 240], "deprec": [214, 249, 252, 280, 284], "facilit": [214, 237], "__all__": 214, "get_all_config_set_from_config_registri": 214, "composableconfig": 214, "fwk_name": 214, "algorithm_entri": 214, "gptq": [214, 231, 277, 279], "rtn": [214, 277, 279], "snippet": [214, 228], "register_algo": 214, "rtn_algo_entri": 214, "smooth_quant_entri": 214, "vscode": [214, 253, 255], "settings_recommend": 214, "often": [215, 219, 259, 272, 273], "encount": 215, "previous": 215, "lack": [215, 224], "faster": [215, 217, 223, 274, 285, 288], "treat": 215, "Of": 215, "evenli": 215, "divid": [215, 264, 282, 285], "discard": 215, "throw": 215, "awai": 215, "draw": [215, 281, 285], "pin": [215, 247, 251], "reshuffl": 215, "manner": [215, 219, 235], "newdataload": 215, "input_data": 215, "customis": [215, 216, 232], "ensp": [216, 284], "imagerecord": [216, 221, 287], "image_nam": 216, "cocorecord": 216, "gt": [216, 282, 284], "int64": 216, "style_transf": 216, "content": [216, 262, 263, 267, 268, 269], "tfrecorddataset": 216, "post_training_static_qu": [216, 233, 275, 285], "labelbal": 216, "300": [216, 273], "16": [216, 229, 267, 279, 288], "helloworld": [216, 234, 284], "aid": 217, "deploy": [217, 237, 254, 274, 277, 282], "infrastructur": 217, "gap": [218, 235], "diagnos": 218, "gui": [218, 228, 259, 273], "termin": [218, 247, 248, 251, 257], "repeat": [218, 285], "durat": [218, 263, 267, 268, 281], "cd": [218, 221, 229, 256, 258, 259, 261, 262, 267, 268, 269], "ilsvr2012": 218, "wget": [218, 224, 226, 256, 259], "caff": 218, "berkeleyvis": 218, "caffe_ilsvrc12": 218, "xvzf": 218, "image_recognit": [218, 259, 283], "resnet50_torchvis": 218, "ptq_static": [218, 258], "model_path": [218, 267], "resnet50_v1": [218, 221, 233], "dataset_loc": [218, 259, 267, 283], "label_path": 218, "present": [218, 262, 274, 282], "quantiti": 218, "big": [218, 279], "vec": 218, "mu": 218, "frac": [218, 236, 282], "sigma": 218, "sqrt": 218, "var": 218, "happen": 218, "dispers": [218, 257], "trust": [218, 256], "v0": [218, 231, 259, 282, 283], "cg": [218, 259, 283], "conv0": [218, 259, 283], "expens": [219, 233, 285], "mobil": [219, 233, 288], "produc": 219, "logit": 219, "softmax": 219, "kd": 219, "d": [219, 227, 255, 257, 263, 273], "patient": 219, "compact": [219, 233, 240, 273], "agnost": 219, "resourc": [219, 261, 264, 285], "convolut": [219, 274], "ia": 219, "attach": [219, 233, 282], "shallow": 219, "depth": [219, 278], "deepest": 219, "deeper": 219, "paper": [219, 273, 279, 282], "Will": [219, 228], "10006": [219, 220], "student_output": [219, 220], "student_loss": [219, 220], "training_func_for_nc": [219, 220], "distil_loss_conf": 219, "accordingli": [219, 245, 282], "promis": [220, 233, 273], "huge": [220, 259, 273, 277], "heavi": 220, "light": 220, "booster": 220, "degrad": [220, 273, 285], "retrain": 220, "novel": [220, 237, 248, 254], "place": [220, 229, 267, 273, 283, 285], "comb": 220, "distillation_criterion": [220, 233, 272], "q_conf": 220, "horovod": 221, "builtin": 221, "enable_eager_execut": 221, "yaml_file_path": 221, "pre_process": 221, "simpli": [221, 235, 237, 239, 242, 254, 262], "evaluation_result": 221, "evaluation_time_cost": 221, "partit": [221, 273], "distributedsampl": 221, "train_sampl": 221, "train_dataset": [221, 276], "num_replica": 221, "rank": 221, "train_load": 221, "train_kwarg": 221, "adadelta": 221, "distributedoptim": 221, "named_paramet": 221, "broadcast_paramet": 221, "state_dict": [221, 279, 283], "root_rank": 221, "broadcast_optimizer_st": 221, "set_epoch": 221, "batch_idx": 221, "zero_grad": [221, 233, 273], "nll_loss": 221, "log_interv": 221, "0f": 221, "tloss": 221, "6f": 221, "dry_run": 221, "break": [221, 233], "test_func": 221, "num_of_process": 221, "002": 221, "ssh": [221, 254], "prompt": 221, "readm": [221, 267], "exactli": [221, 238], "recognit": [221, 223, 273, 283], "resizecropimagenet": [221, 284], "realiz": [221, 271, 278, 281], "tow": 221, "node1": [221, 267, 268], "node2": [221, 267, 268], "TO": [221, 239, 259], "your_node1_nam": 221, "your_node2_nam": 221, "resnet50_fp32_pretrained_model": 221, "nc_resnet50_v1": 221, "resnet": [221, 288], "10k": [222, 226], "2x": [222, 228], "exchang": 223, "hope": 223, "inc_model": [223, 235], "fp32_onnx_config": 223, "verifi": [223, 231], "vgg16": [223, 288], "mobilenet": [223, 281, 288], "rcnn": 223, "torchscript": [223, 277, 282], "unsupport": [223, 233, 273], "add_relu": 223, "conv1d_relu": 223, "conv2d_relu": 223, "group_norm": 223, "hardswish": 223, "instance_norm": 223, "layer_norm": 223, "leaky_relu": 223, "sigmoid": 223, "toolchain": [224, 274], "bare": 224, "metal": 224, "sudo": [224, 240], "apt": [224, 229, 240, 248], "python3": 224, "dev": [224, 247, 251], "distutil": 224, "libgl1": 224, "mesa": 224, "glx": 224, "libglib2": 224, "ln": 224, "sf": 224, "usr": 224, "incompat": 224, "88": [224, 281, 288], "80": [224, 231, 277, 283, 288], "pyobject": 224, "reinstal": 224, "importerror": 224, "libgl": 224, "share": [224, 225, 279, 282, 285], "yum": [224, 229], "opencv": [224, 229, 248], "conda": [224, 229, 240, 248, 267, 268, 269, 280], "13": [224, 229, 231, 256, 280, 282, 288], "pend": [224, 263], "sqlalchemi": 224, "27": [224, 288], "alemb": 224, "forg": [224, 229], "quick": [225, 234, 273, 286, 287], "friendli": [225, 233, 236, 274, 282, 286, 287], "dive": [225, 286], "unless": 225, "syntax": 225, "go": [225, 249, 252, 260, 275, 279, 284], "15": [225, 229, 268], "up1": 225, "up2": 225, "valid_mixed_precis": 225, "concatv2": 225, "maxpool": 225, "avgpool": 225, "depthwiseconv2dn": 225, "relu6": 225, "biasadd": 225, "addn": 225, "addv2": 225, "grappler": 225, "grappler_optim": 225, "constfold": 225, "arithmet": 225, "debug_stripp": 225, "storag": [226, 232, 256, 259, 279, 282], "googleapi": [226, 256, 259], "v1_6": [226, 256, 259], "mobilenet_v1_1": [226, 256, 267], "0_224_frozen": [226, 256, 267], "concept": [227, 281, 286], "rather": [227, 279], "custom_metr": 227, "420": 228, "geomean": 228, "upload": [228, 249, 252], "click": [228, 237, 238, 245, 248, 254, 259, 274, 283], "qintegerop": [228, 276], "plan": 228, "oneapi": [229, 274, 286], "analyt": [229, 274, 286], "success": [229, 256], "11": [229, 231, 232, 234, 256, 282, 285, 288], "frequent": 229, "pypi": [229, 249, 252], "nightli": 229, "headless": [229, 248], "fastai": 229, "esri": 229, "consolid": 229, "along": [229, 273, 279], "streamlin": [229, 261, 274], "scienc": 229, "websit": 229, "anaconda": [229, 261, 262], "suit": [229, 255, 283], "formerli": 229, "skylak": 229, "cascad": 229, "lake": [229, 234, 274], "cooper": [229, 234, 274], "ic": [229, 274], "sapphir": [229, 231], "rapid": [229, 231], "hbm": 229, "arctic": 229, "sound": 229, "pont": 229, "vecchio": 229, "cento": [229, 288], "ubuntu": 229, "22": [229, 231, 288], "maco": 229, "ventura": 229, "fortensorflow": 229, "forpytorch": 229, "17": [229, 267], "tf_enable_onednn_opt": 229, "newer": 229, "apach": 230, "subject": 230, "accompani": [230, 285], "wish": 230, "bibtex": 230, "misc": 230, "author": 230, "feng": 230, "tian": 230, "hanwen": 230, "haihao": [230, 273], "shen": [230, 273], "suyu": 230, "chen": 230, "howpublish": 230, "year": 230, "logo": 230, "atom": 230, "phi": 230, "pentium": 230, "vtune": 230, "corpor": 230, "subsidiari": 230, "brand": 230, "claim": 230, "woq": [231, 236], "codenam": [231, 234], "6b": [231, 258, 282, 288], "facebook": [231, 260, 282, 288], "3b": [231, 282], "30b": [231, 282, 288], "7b": [231, 282, 288], "hf": [231, 282, 288], "13b": [231, 282, 288], "70b": [231, 288], "tiiuae": [231, 282, 288], "40b": 231, "baichuan": 231, "chat": [231, 282, 288], "baichuan2": 231, "bigscienc": [231, 282, 288], "1b7": [231, 282], "databrick": [231, 282, 288], "dolli": [231, 273, 282, 288], "12b": 231, "neox": [231, 288], "20b": [231, 288], "mistralai": 231, "mistral": 231, "thudm": 231, "chatglm2": 231, "wip": 231, "chatglm3": 231, "come": [231, 236, 285], "soon": 231, "lambada_openai": [231, 288], "67": [231, 288], "57": [231, 282, 288], "68": [231, 284, 288], "23": [231, 288], "0098": 231, "0000": [231, 235], "84": [231, 282, 288], "0040": 231, "71": [231, 288], "51": [231, 288], "70": [231, 288], "89": [231, 282, 288], "9913": 231, "53": [231, 288], "0003": [231, 288], "76": [231, 288], "0035": 231, "96": [231, 288], "0043": 231, "59": [231, 282, 288], "9988": 231, "24": [231, 273, 285, 288], "9936": 231, "9963": [231, 288], "46": [231, 288], "47": [231, 288], "99": [231, 288], "0356": 231, "38": [231, 288], "0009": 231, "19": [231, 287, 288], "9968": 231, "35": [231, 273, 288], "9961": [231, 288], "31": [231, 288], "33": [231, 236, 288], "79": [231, 283, 288], "0070": 231, "43": [231, 288], "0018": 231, "72": [231, 282, 288], "25": [231, 273, 288], "9989": 231, "9949": 231, "54": [231, 287, 288], "9940": 231, "58": [231, 268, 288], "0033": 231, "0117": 231, "49": [231, 288], "82": [231, 288], "0046": [231, 288], "0087": 231, "77": [231, 288], "9932": [231, 288], "75": [231, 273, 288], "9997": 231, "0086": [231, 282], "55": [231, 269, 288], "9991": 231, "09": [231, 288], "0057": 231, "97": [231, 233, 288], "0041": 231, "73": [231, 288], "92": [231, 288], "0005": 231, "9942": [231, 288], "9987": 231, "0030": [231, 288], "61": [231, 288], "9962": [231, 288], "9992": 231, "52": [231, 288], "9914": 231, "0023": 231, "9986": 231, "9919": [231, 288], "9977": 231, "94": [231, 284, 288], "0093": 231, "78": [231, 284, 288], "0203": 231, "74": [231, 288], "44": [231, 288], "0237": 231, "0013": 231, "00": [231, 288], "0044": 231, "popularli": 232, "industri": [232, 274], "label_map": 232, "ap": 232, "curv": 232, "turn": [232, 248, 277], "target_boxes_num": 232, "str_label": 232, "int_label": 232, "inturn": 232, "cocomap": 232, "vocmap": 232, "categor": 232, "multiclass": 232, "multilabel": 232, "newmetr": 232, "reset": 232, "reflect": [232, 284], "new_metr": 232, "deliv": [233, 274, 280], "conveni": [233, 261], "kind": 233, "resort": 233, "inject": 233, "automodelforsequenceclassif": 233, "worker": [233, 264, 267, 268, 269, 276], "ping_memori": [233, 276], "formul": 233, "effort": 233, "written": 233, "onnxrt_integ": [233, 287], "onnxrt_qlinear": [233, 287], "image_tensor": [233, 287], "post_training_dynamic_qu": [233, 275, 285], "1000": [233, 263, 287], "2000": 233, "sampling_s": [233, 287], "model_wis": [233, 287], "op_dict": 233, "op_wis": [233, 283, 287], "sigopt_api_token": [233, 281, 285], "sigopt_project_id": [233, 281, 285], "sigopt_experiment_nam": [233, 281, 285], "performance_onli": 233, "demo": 233, "600": [233, 288], "training_arg": 233, "trainer": [233, 245], "similar": [233, 258, 275, 282, 285, 287], "briefli": [233, 282], "maxim": [233, 273, 285], "pruning_func": 233, "num_train_epoch": [233, 273], "train_dataload": [233, 273, 276], "n_gpu": 233, "gradient_accumulation_step": 233, "clip_grad_norm_": 233, "max_grad_norm": 233, "start_epoch": [233, 275, 287], "end_epoch": [233, 275, 287], "newli": [233, 273], "on_after_optimizer_step": [233, 273], "layer3": [233, 273], "layer2": [233, 273, 276], "lr_schedul": [233, 273], "weight_decai": [233, 287], "0004": 233, "nesterov": [233, 287], "randomresizedcrop": [233, 284], "totensor": [233, 284], "485": 233, "456": 233, "406": [233, 288], "nepoch": 233, "cnt": 233, "loss_sum": 233, "iter_bar": 233, "tqdm": 233, "desc": 233, "teacher_logit": 233, "train_fun": 233, "training_func": 233, "recent": [233, 234], "growth": [233, 234, 236, 273], "significantli": [233, 234, 257, 259, 273, 285], "bandwidth": [233, 234, 279], "output_model": [233, 257, 259, 283], "exit_polici": [233, 287], "determinist": 233, "arbitrari": [233, 272], "meaning": [233, 272], "reli": [233, 282], "prune_conf": 233, "quantization_aware_training_conf": 233, "aforement": 233, "inset": 233, "p_conf": [233, 272], "ssd_mobilenet_v1": 233, "benchmarkconf": 233, "bfloat16": [234, 237, 245, 278], "ieee": [234, 282], "half": [234, 245], "sixteen": 234, "launch": [234, 255, 260], "boost": [234, 238, 254, 273, 274], "x86": 234, "vcvtne2ps2bf16": 234, "vcvtneps2bf16": 234, "vdpbf16p": 234, "fbgemm": [234, 276], "cpuexecutionprovid": [234, 276], "tensorrtexecutionprovid": [234, 276], "cudaexecutionprovid": [234, 276], "cuda": [234, 237, 239, 273, 276], "dnnlexecutionprovid": [234, 276], "avx512_bf16": 234, "plu": 234, "persist": 235, "tf2": 235, "h5": 235, "hybridblock": 235, "saved_result": [235, 258, 279], "breakthrough": 236, "emerg": [236, 282], "analysi": [236, 237, 254, 273, 281], "chatbot": [236, 274], "fuel": 236, "nevertheless": 236, "challeng": [236, 277], "explos": 236, "pose": [236, 277], "obstacl": 236, "practic": 236, "mx": 236, "promot": 236, "msfp": 236, "mxfp8": 236, "e5m2": 236, "e8m0": 236, "e4m3": 236, "mxfp6": 236, "fp6": 236, "e3m2": 236, "e2m3": 236, "mxfp4": 236, "e2m1": [236, 279], "mxint8": 236, "occupi": 236, "incur": 236, "energi": 236, "silicon": 236, "seamlessli": [236, 261, 273, 285], "meticul": 236, "craft": 236, "empow": 236, "sacrif": [236, 274], "distinct": 236, "fall": 236, "consumpt": [236, 282], "amax": 236, "blocksiz": 236, "expon": 236, "floor": 236, "log2": 236, "10005": [236, 277], "mxquantconfig": 236, "w_dtype": 236, "user_model": 236, "darvish": 236, "rouhani": 236, "bita": 236, "narrow": 236, "inferenc": 236, "2020": 236, "10271": 236, "10281": 236, "ocp": 236, "2310": 236, "10537": 236, "simplifi": [237, 248, 254, 273, 274], "switch": [237, 283], "acquir": 237, "heurist": [237, 254], "great": 237, "amp": [237, 244, 263, 279], "autocast": 237, "jit": [237, 239, 244, 282, 283], "simultan": [237, 261, 272, 275], "my_model": 237, "no_grad": 237, "memory_format": 237, "freez": [237, 273], "112": 237, "rand": [237, 282], "plugin": [237, 255], "aw": [237, 245, 264, 274, 288], "sagemak": [237, 245], "inlin": [237, 242, 245], "neural_cod": [237, 239, 241, 242, 243, 245], "bench": 237, "superbench": 237, "enjoi": [238, 242, 245], "rebuild": [238, 247, 251], "reload": [238, 255, 257, 260], "modern": [239, 279], "democrat": [239, 274], "programm": [239, 245, 254], "nano_bf16_channels_last": 239, "nano_bf16_ipex_channels_last": 239, "nano_bf16_ipex": 239, "nano_bf16": 239, "nano_fp32_channels_last": 239, "nano_fp32_ipex_channels_last": 239, "nano_fp32_ipex": 239, "nano_gpu_to_cpu": 239, "nano_int8": 239, "nano_jit_bf16_channels_last": 239, "nano_jit_bf16_ipex_channels_last": 239, "nano_jit_bf16_ipex": 239, "nano_jit_bf16": 239, "nano_jit_fp32_channels_last": 239, "nano_jit_fp32_ipex_channels_last": 239, "nano_jit_fp32_ipex": 239, "nano_jit_fp32": 239, "nano_onnxruntime_fp32": 239, "nano_onnxruntime_int8_qlinear": 239, "openvino": 239, "nano_openvino_fp32": 239, "nano_openvino_int8": 239, "bc": [240, 248], "conda_prefix": 240, "echo": 240, "libjemalloc": 240, "libiomp5": 240, "home": 240, "lib": 240, "ld_preload": 240, "malloc_conf": 240, "oversize_threshold": 240, "background_thread": 240, "metadata_thp": 240, "dirty_decay_m": 240, "9000000000": 240, "muzzy_decay_m": 240, "kmp_affin": 240, "kmp_blocktim": 240, "dnnl_primitive_cache_capac": 240, "governor": 240, "scaling_governor": 240, "powersav": 240, "tee": 240, "pytorch_jit_script": [241, 244], "pytorch_channels_last": [241, 244], "run_bench": 241, "patch": [241, 254], "patch_path": 241, "your_patch_path": 241, "sweep": 241, "sweep_object": 241, "bench_config": 241, "bench_featur": 241, "sai": 242, "run_glu": [242, 243, 265, 268, 269], "requisit": 242, "task_nam": [242, 243, 265, 268, 269], "do_ev": [242, 243, 258, 265, 268, 269], "remain": 242, "itself": [242, 273], "run_glue_optim": 242, "static_ipex": 242, "stock": [243, 282], "auto_qu": 243, "v4": [243, 265, 268, 269, 288], "albert": [243, 288], "sst2": 243, "alexnet": [243, 288], "pytorch_amp": 244, "optimize_for_infer": 244, "pytorch_jit_trac": 244, "pytorch_jit_script_ofi": 244, "pytorch_jit_trace_ofi": 244, "torchdynamo": 244, "pytorch_torchdynamo_jit_script": 244, "pytorch_torchdynamo_jit_trac": 244, "pytorch_torchdynamo_jit_script_ofi": 244, "pytorch_torchdynamo_jit_trace_ofi": 244, "pytorch_inc_bf16": 244, "pytorch_inc_static_quant_fx": 244, "pytorch_inc_static_quant_ipex": 244, "pytorch_inc_static_quant_ipex_xpu": 244, "pytorch_inc_dynamic_qu": 244, "pytorch_ipex_fp32": 244, "pytorch_ipex_bf16": 244, "pytorch_ipex_int8_static_qu": 244, "pytorch_ipex_int8_dynamic_qu": 244, "blade": 244, "disc": 244, "pytorch_aliblad": 244, "pytorch_lightning_bf16_cpu": 244, "tensorflow_amp": 244, "keras_amp": 244, "tensorflow_inc": 244, "keras_inc": 244, "onnx_inc_static_quant_qlinear": 244, "onnx_inc_static_quant_qdq": 244, "onnx_inc_dynamic_qu": 244, "pytorch_inc_huggingface_optimum_stat": 244, "pytorch_inc_huggingface_optimum_dynam": 244, "intel_extension_for_transform": 244, "bigdl": [244, 245], "nano": [244, 245], "nano_": 244, "inc_auto": 244, "delight": 245, "announc": 245, "v": [245, 254, 273, 285, 287], "500": [245, 263], "jupyt": [245, 247, 248, 251], "isa": 245, "delta": 245, "acc_delta": 245, "int8_acc": 245, "fp32_acc": 245, "ext": [247, 249, 251, 252, 253], "lab": [247, 248, 249, 251, 252], "nodej": [247, 251], "jlpm": [247, 251], "yarn": [247, 251], "npm": [247, 248, 251], "lieu": [247, 251], "labextens": [247, 248, 251], "typescript": [247, 251], "watch": [247, 251, 260], "immedi": [247, 251, 273], "refresh": [247, 251], "browser": [247, 251, 256, 260], "wait": [247, 251, 254, 264], "rebuilt": [247, 251], "easier": [247, 251, 254, 256, 274], "symlink": [247, 251], "down": 248, "finish": [248, 264], "enter": [248, 254, 262], "leav": 248, "blank": 248, "cell": 248, "gain": [248, 272, 274], "mkl": 248, "jemalloc": 248, "pip3": 248, "pyproject": [249, 252], "toml": [249, 252], "twine": [249, 252], "whl": [249, 252], "dist": [249, 252], "sdist": [249, 252], "bdist_wheel": [249, 252], "frontend": [249, 252, 262, 269], "cut": [249, 252], "admin_github_token": [249, 252], "pypi_token": [249, 252], "npm_token": [249, 252], "secret": [249, 252], "panel": [249, 252, 254], "draft": [249, 252], "changelog": [249, 252, 253], "pkg": [249, 252], "bot": [249, 252], "pick": [249, 252, 255], "feedstock": [249, 252], "hatch": 252, "notabl": 253, "daili": 254, "advantag": [254, 273, 275, 285], "remot": 254, "server": [254, 256, 259, 262, 267, 268, 269], "re": [254, 260, 279], "market": 254, "uninstal": 254, "fill": [254, 281, 284, 285], "upper": 254, "sidebar": 254, "hover": 254, "track": [254, 281], "argpars": 254, "pop": [254, 264], "diff": 254, "manifest": 255, "palett": 255, "src": 255, "registercommand": 255, "amodio": 255, "tsl": 255, "matcher": 255, "dbaeumer": 255, "eslint": [255, 260], "press": 255, "f5": 255, "ctrl": 255, "hello": 255, "world": 255, "breakpoint": 255, "consol": [255, 260], "relaunch": 255, "toolbar": 255, "node_modul": 255, "viewlet": 255, "dropdown": 255, "runner": [255, 260], "startup": 255, "bundl": 255, "neural_insight": [256, 258, 259], "tl": 256, "ui": 256, "12": [256, 288], "5000": 256, "338174d13706855fc6924cec7b3a8ae8": 256, "listen": 256, "port": [256, 263], "firewal": 256, "8080": 256, "cert": 256, "path_to_cert": 256, "crt": 256, "path_to_private_kei": 256, "encrypt": 256, "insecur": 256, "expos": 256, "forfeit": 256, "client": [256, 262, 269], "extern": 256, "threat": 256, "diagnost": 256, "skill": 256, "feel": [256, 260], "layoutlmv3": [257, 288], "seqev": 257, "sentencepiec": 257, "timm": 257, "fvcore": 257, "pillow": 257, "einop": 257, "textdist": 257, "setuptool": 257, "cli": 257, "hypjudi": 257, "finetun": [257, 273, 279], "funsd": [257, 288], "calib_dataset": 257, "incdataset": 257, "eval_dataset": 257, "poor": [257, 283], "9049": 257, "2989": 257, "66": [257, 288], "9631": 257, "glob": 257, "panda": 257, "pd": 257, "set_opt": 257, "max_row": 257, "max_column": 257, "getmtim": 257, "revers": 257, "activations_t": 257, "weights_tabl": [257, 258], "read_csv": 257, "nweight": 257, "descend": 257, "sorted_data": 257, "sort_valu": 257, "ascend": 257, "evid": 257, "tip": 257, "8981": 257, "7502": 257, "run_clm": 258, "dataset_nam": 258, "wikitext": [258, 288], "dataset_config_nam": 258, "do_train": 258, "inspect_sav": 258, "inspect_result": 258, "quan": 258, "model_summari": 258, "incept": [259, 288], "v3": [259, 288], "inception_v3": [259, 283], "inceptionv3_fp32_pretrained_model": [259, 283], "prepare_dataset": 259, "sh": [259, 283], "raw_dir": 259, "img_raw": 259, "delet": [259, 273], "run_tun": 259, "nc_inception_v3": 259, "decreas": [259, 273], "highest": [259, 265, 285], "satisfactori": 259, "webpag": 259, "spike": 259, "bottom": 259, "concentr": 259, "But": 259, "bigger": 259, "bootstrap": 260, "localhost": [260, 262, 267, 268], "3000": 260, "lint": 260, "interact": [260, 281], "correctli": 260, "hash": [260, 263], "readi": [260, 273], "aren": 260, "transit": 260, "webpack": 260, "babel": 260, "tweak": 260, "ever": 260, "curat": 260, "suitabl": 260, "middl": [260, 282], "shouldn": 260, "howev": [260, 273, 279, 282], "wouldn": 260, "couldn": 260, "io": 260, "troubleshoot": 260, "effortlessli": 261, "rest": [261, 262, 267, 268, 269], "grpc": [261, 262, 266, 267, 268, 270], "queue": 261, "elimin": 261, "mpi": [261, 262, 285], "neural_solut": [261, 262, 267, 268, 269], "task_monitor_port": [262, 267, 268, 269], "22222": [262, 267, 268, 269], "result_monitor_port": [262, 267, 268, 269], "33333": [262, 267, 268, 269], "restful_api_port": [262, 267, 268, 269], "hostfil": [262, 264, 267, 268, 269], "grpc_api_port": [262, 267, 268, 269], "api_typ": [262, 267, 268, 269], "conda_env": [262, 267, 268, 269], "upload_path": [262, 267, 268, 269], "8000": [262, 267, 268, 269], "monitor": [262, 267, 268, 269], "3333": [262, 267, 268, 269], "2222": [262, 267, 268, 269], "ns_workspac": [262, 267, 268, 269], "hf_model": [262, 266, 268, 269], "curl": [262, 263, 267, 268], "task_id": [262, 267, 268, 269], "usernam": 262, "db": [262, 264], "serve_log": [262, 267, 268, 269], "frontend_grpc": 262, "task_log": 262, "task_bdf0bd1b2cc14bc19bce12d4f9b333c7": 262, "task_workspac": 262, "bdf0bd1b2cc14bc19bce12d4f9b333c7": 262, "aliv": 262, "properli": 262, "commonli": [262, 273], "hostnam": 262, "breakdown": 262, "ip": 262, "hous": 262, "host1": [262, 267, 268], "host2": [262, 267, 268], "query_id": 262, "oaa": 263, "host_ip": 263, "task_request": [263, 267, 268, 269], "tuning_info": [263, 267], "optimization_result": [263, 267], "result_path": [263, 267, 268], "closur": 263, "404": [263, 273, 288], "health": 263, "healthi": 263, "400": 263, "alloc": 264, "incom": 264, "taskmonitor": 264, "cluster": [264, 267, 268, 285], "tasklaunch": 264, "resultmonitor": 264, "receiv": [264, 281], "p1": 264, "notif": 264, "p2": 264, "p3": 264, "mpirun": [264, 285], "perf": 264, "p4": 264, "classdiagram": 264, "taskdb": 264, "get_statu": 264, "update_statu": 264, "task_collect": 264, "append_task": 264, "get_all_pending_task": 264, "update_task_statu": 264, "task_db": 264, "wait_new_task": 264, "schedule_task": 264, "dispatch_task": 264, "launch_task": 264, "query_task_statu": 264, "node_list": 264, "reserve_resourc": 264, "get_node_statu": 264, "pool": 264, "gcp": [264, 274], "script_url": [265, 267, 268, 269], "archiv": 265, "tf_example1": [266, 267, 268], "hf_models_grpc": [266, 269], "00173": 267, "01024": 267, "task_request_distribut": 267, "custom_models_optim": 267, "7602cd63d4c849e7a686a8165a77f69d": [267, 268], "151": 267, "8617": 267, "8213": [267, 288], "number_of_socket": [267, 268], "number_of_thread": [267, 268], "cdf419910f9b4d2a8320d0e420ac1d0a": 268, "optimized_result": 268, "3162": 268, "6488": [268, 288], "06": [269, 287, 288], "d3e10a49326449fb9d0d62f2bfc1cb43": 269, "fastapi": 270, "multi_object": 271, "benefit": 272, "instanti": 272, "neuron": 273, "art": 273, "grown": 273, "unpreced": 273, "increasingli": 273, "crucial": 273, "stand": [273, 285], "consecut": 273, "salient": [273, 279], "shrink": 273, "influenc": 273, "head": 273, "mechan": [273, 281, 286], "contextu": 273, "scene": 273, "haven": 273, "color": [273, 277], "lowest": [273, 285], "formula": [273, 282], "interv": 273, "emsp": 273, "downstream": 273, "prone": 273, "co": 273, "discourag": 273, "penal": 273, "parameter": 273, "coeffici": 273, "sparsegpt": 273, "lightweight": 273, "rearrang": [273, 279], "perceptron": 273, "mlp": 273, "valuabl": [273, 283], "basi": 273, "mha": 273, "billion": 273, "mpt": [273, 282, 288], "lm": 273, "lamini": [273, 282], "mention": [273, 279], "tend": 273, "exemplifi": 273, "complement": 273, "fortieth": 273, "grain": [273, 274, 285], "pruner2": 273, "prepare_prun": 273, "retrain_fre": 273, "few": [273, 274, 282, 285], "lm_head": [273, 279], "yourself": 273, "uncertain": 273, "parse_auto_slim_config": 273, "auto_config": 273, "ffn2_sparsiti": 273, "mha_spars": 273, "quit": 273, "carri": 273, "pruning_pattern": 273, "pruning_start": 273, "pruning_end": 273, "sparse_gpt": 273, "embed_out": 273, "card": 273, "hesit": 273, "causal": 273, "clm": 273, "sst": [273, 288], "63": [273, 288], "flan": 273, "t5": 273, "english": 273, "romanian": 273, "381": 273, "yolov5": 273, "2x1": [273, 288], "801": 273, "7895": 273, "reduct": [273, 277, 287], "xgboost": 273, "namhoon": 273, "lee": 273, "thalaiyasingam": 273, "ajanthan": 273, "philip": 273, "torr": 273, "confer": [273, 282], "2019": 273, "zafrir": 273, "ofir": 273, "ariel": 273, "larei": 273, "boudoukh": 273, "mosh": 273, "wasserblat": 273, "2111": 273, "05754": 273, "2021": 273, "kwon": 273, "kim": 273, "mahonei": 273, "hassoun": 273, "keutzer": 273, "gholami": 273, "pp": 273, "24101": 273, "24116": 273, "frantar": [273, 279], "alistarh": 273, "massiv": 273, "2301": 273, "00774": 273, "apr": 274, "medium": 274, "aug": 274, "juli": 274, "onnxcommunitymeetup2023": 274, "june": 274, "msft": 274, "netflix": 274, "mlperf": [274, 288], "5x": 274, "\u96c6\u6210\u82f1\u7279\u5c14": 274, "\u817e\u8baf\u4e91taco": 274, "kit\u4e3aai\u5e94\u7528\u5e26\u6765\u9ad8\u6548\u5f02\u6784\u52a0\u901f\u670d\u52a1": 274, "mar": 274, "heterogen": 274, "jan": 274, "busi": 274, "amx": 274, "journei": 274, "dec": 274, "mleffici": 274, "deepen": 274, "foundat": 274, "intellig": 274, "vmware": 274, "applianc": 274, "bitnami": 274, "nov": 274, "neurip": 274, "quala": 274, "minilm": [274, 288], "plug": 274, "twitter": 274, "linkedin": 274, "zone": 274, "land": 274, "pat": 274, "keynot": 274, "intelon": 274, "chines": 274, "purif": 274, "jun": 274, "partner": 274, "feb": 274, "joint": 274, "bilibili": 274, "gestalt": 274, "ml": 274, "youtub": 274, "doubl": 274, "3d": [274, 282], "reconstruct": 274, "abound": 274, "lpot": [274, 280], "nextplatform": 274, "cern": 274, "gan": 274, "3dgan": 274, "iml": 274, "workshop": 274, "asplo": 274, "18": [274, 288], "highli": [274, 279], "intelcaff": 274, "aris": 275, "henc": 275, "onnxrt_qoper": 275, "quant_aware_train": 275, "use_bf16": 275, "weight_compress": [275, 287], "initial_spars": [275, 287], "prune_typ": [275, 287], "basic_magnitud": [275, 287], "update_frequ": 275, "prune_domain": 275, "tile_pattern_1x1": 275, "neither": 276, "nor": 276, "val_load": 276, "avg": 276, "themselv": 276, "dmlexecutionprovid": 276, "meanwhil": 277, "substanti": 277, "greatli": [277, 279], "even": [277, 279, 282], "constrain": 277, "grei": 277, "blue": 277, "rectangl": 277, "subgraph": [277, 285], "w8a8": [277, 279], "awq": [277, 279], "load_empty_model": 277, "rtn_arg": [277, 279], "lambda": 277, "ouput_dir": 277, "fp32_model_path": 277, "int8_model_path": 277, "ON": 278, "forc": 278, "postposttrainingquantconfig": 278, "datatyp": [278, 285, 288], "cast": [278, 284], "bf16convert": 278, "bf16wrapper": 278, "retrac": 278, "preval": 279, "grow": 279, "demand": 279, "trade": 279, "bottleneck": 279, "roughli": 279, "speak": 279, "capac": [279, 281], "flop": 279, "famou": 279, "approx": 279, "bmm": 279, "100x": 279, "excel": 279, "stai": [279, 282], "think": 279, "intuit": [279, 282], "uniformli": 279, "qlora": 279, "invers": 279, "restor": 279, "protect": 279, "inspir": 279, "c_": 279, "normalfloat": 279, "bnb": 279, "enable_mse_search": 279, "clip": [279, 282], "805": 279, "005": 279, "return_int": 279, "group_dim": 279, "awq_arg": 279, "enable_auto_scal": 279, "91": [279, 282, 288], "gptq_arg": 279, "actord": 279, "diagon": 279, "percdamp": 279, "stabil": 279, "nsampl": 279, "pad_max_length": 279, "use_max_length": 279, "static_group": 279, "mitig": 279, "true_sequenti": 279, "slower": 279, "weightonlylinear": 279, "date": 279, "sym_full_rang": 279, "qweight_config_path": 279, "gptq_config_path": 279, "gptq_config": 279, "use_full_length": 279, "n_block": 279, "compressed_model": 279, "q": [279, 282], "seek": 279, "omit": 279, "rtn_g32asym": 279, "gptq_g32asym": 279, "gptq_g32asym_disable_last_matmul": 279, "gptq_g128asym": 279, "awq_g32asym": 279, "xiao": [279, 282], "guangxuan": [279, 282], "2211": [279, 282], "10438": [279, 282], "wei": [279, 282], "xiui": [279, 282], "suppress": [279, 282], "2209": [279, 282, 288], "13325": [279, 282], "lin": 279, "ji": 279, "2306": 279, "00978": 279, "elia": 279, "2210": 279, "17323": 279, "dettmer": 279, "tim": 279, "2305": 279, "14314": 279, "site": 280, "assist": 280, "inspect": [280, 283], "renam": 280, "sed": 280, "your_script": 280, "backbon": 281, "sigopt_experiment_id": 281, "nc": [281, 285], "suffici": 281, "ordinari": 281, "latenc": [281, 285], "8266": 281, "8372": 281, "2132": 281, "83": [281, 282, 288], "7495": 281, "8299": 281, "8294": 281, "85": [281, 282, 288], "0837": 281, "8291": 281, "4469": 281, "allevi": 282, "coarsest": 282, "finer": [282, 285], "2d": 282, "matric": 282, "similarli": 282, "finest": 282, "why": [282, 283], "suppos": 282, "6839": 282, "4741": 282, "7451": 282, "9301": 282, "1742": 282, "6835": 282, "num_bit": 282, "q_min": 282, "q_max": 282, "zp": 282, "q_x": 282, "clamp_": 282, "round_": 282, "w_q": 282, "00296431384049356": 282, "172": [282, 288], "192": 282, "w_dq": 282, "2220": 282, "1510": 282, "2420": 282, "2570": 282, "0500": 282, "1890": 282, "mseloss": 282, "1983354538679123": 282, "6848": 282, "4743": 282, "7440": 282, "9308": 282, "1749": 282, "385297635664756e": 282, "07": [282, 287, 288], "dq": 282, "affect": 282, "quantize_per_channel": 282, "x_tmp": 282, "detach": 282, "reshap": 282, "keepdim": 282, "dequantize_per_channel": 282, "0029": [282, 288], "0036": 282, "162": [282, 288], "48": [282, 288], "93": [282, 288], "207": [282, 288], "139": [282, 288], "6837": 282, "4734": 282, "1751": 282, "6821": 282, "637690492221736e": 282, "6376e": 282, "3852e": 282, "cdot": 282, "quantize_per_tensor_absmax": 282, "n_bit": 282, "div_": 282, "0806": 282, "7589": 282, "6038": 282, "3815": 282, "5040": 282, "7174": 282, "5444": 282, "5826": 282, "7772": 282, "5555": 282, "3740": 282, "3253": 282, "0698": 282, "1381": 282, "5972": [282, 288], "0737": 282, "8298": 282, "6883": 282, "2991": 282, "1601": 282, "6506": 282, "8246": 282, "3924": 282, "3845": 282, "8768": 282, "w_scale": 282, "x_q": 282, "x_scale": 282, "120": 282, "0059755356051027775": 282, "119": 282, "006533813662827015": 282, "y_q": 282, "17509": 282, "7608": 282, "4055": 282, "16599": 282, "21020": 282, "10016": 282, "9860": 282, "22444": 282, "y_dq": 282, "6836": 282, "2970": 282, "1583": 282, "6481": 282, "8207": 282, "3911": 282, "3850": 282, "8763": 282, "though": 282, "simplic": 282, "denot": 282, "fp1": 282, "fp2": 282, "subsect": [282, 287], "x1": [282, 285], "x2": [282, 285], "layernorm": 282, "herebi": 282, "optdecoderlay": 282, "blockwis": 282, "waq": 282, "torchsmoothqu": 282, "auto_alpha_arg": 282, "overhead": 282, "leakyrelu": 282, "hardtanh": 282, "instancenorm": 282, "t5norm": 282, "llamanorm": 282, "groupnorm": 282, "lambada": 282, "openai": 282, "sweet": 282, "spot": 282, "region": 282, "560m": 282, "354": 282, "3542": 282, "4634": 282, "4936": 282, "518": 282, "5185": 282, "7b1": [282, 288], "5764": [282, 288], "5977": 282, "bloomz": [282, 288], "3947": 282, "3930": 282, "4828": 282, "4906": 282, "5018": 282, "4980": 282, "5593": [282, 288], "5552": 282, "379": 282, "3757": 282, "350m": 282, "4516": 282, "4533": 282, "5789": 282, "5742": 282, "6365": 282, "6404": 282, "6769": [282, 288], "6804": [282, 288], "6872": 282, "6814": 282, "7149": 282, "7128": 282, "66b": 282, "7398": 282, "7326": 282, "7361": [282, 288], "7357": 282, "7627": [282, 288], "7590": 282, "7759": [282, 288], "7840": 282, "65b": 282, "7908": 282, "7957": 282, "7392": [282, 288], "7335": 282, "7058": [282, 288], "6994": 282, "7677": [282, 288], "7615": [282, 288], "6831": [282, 288], "mbzuai": 282, "124m": 282, "3804": 282, "3887": 282, "774m": 282, "5048": 282, "5057": 282, "5b": 282, "5443": [282, 288], "5436": 282, "mosaicml": [282, 288], "655": [282, 288], "6499": 282, "stabilityai": 282, "stablelm": 282, "4172": 282, "4149": 282, "togethercomput": 282, "redpajama": 282, "incit": 282, "6542": 282, "6735": 282, "6718": 282, "6740": [282, 288], "6569": 282, "6621": 282, "7143": 282, "7221": 282, "6895": 282, "6953": [282, 288], "6866": [282, 288], "6297": 282, "6247": 282, "6437": [282, 288], "6392": 282, "7332": 282, "7632": 282, "asterisk": 282, "arang": 282, "tolist": 282, "default_alpha": 282, "alpha_min": 282, "alpha_max": 282, "alpha_step": 282, "step_siz": 282, "shared_criterion": 282, "do_blockwis": 282, "jason": 282, "transact": 282, "yvinec": 282, "edouard": 282, "proceed": 282, "cvf": 282, "winter": 282, "instrument": 283, "writer": 283, "_pre_eval_hook": 283, "_post_eval_hook": 283, "submodul": 283, "whitelist": 283, "_recordingobserv": 283, "output_tensors_dict": 283, "current_it": 283, "get_tensor_valu": 283, "_observer_forward_hook": 283, "activation_post_process": 283, "_add_observer_": 283, "child": 283, "named_children": 283, "leaf": 283, "add_modul": 283, "register_forward_hook": 283, "dump_tim": 283, "summarywrit": 283, "_acc": 283, "tune_": 283, "add_graph": 283, "get_observer_dict": 283, "observer_dict": 283, "strip": 283, "is_quant": 283, "add_histogram": 283, "shell": 283, "bind_al": 283, "logdir_spec": 283, "tune_0_acc0": 283, "tune_1": 283, "tune_1_acc0": 283, "baseline_acc_0": 283, "776": 283, "tune_1_acc_0": 283, "095": 283, "runs_v3": 283, "run_tuning_dump_tensor": 283, "inceptionv3": 283, "skip": [283, 285], "run_quant": 283, "topologi": 283, "nc_inceptionv3": 283, "inceptionv3_dump_tensor": 283, "eightbit": 283, "requant": 283, "disappear": 283, "centercrop": 284, "randomcrop": 284, "cropres": 284, "decodeimag": 284, "jpeg": 284, "encodejp": 284, "alignimagechannel": 284, "116": 284, "103": [284, 288], "017": 284, "bilinearimagenet": [284, 287], "topilimag": 284, "padding_mod": 284, "border": 284, "pixel": 284, "edg": 284, "colorjitt": 284, "bright": 284, "satur": 284, "hue": 284, "jitter": 284, "tondarrai": 284, "o1": 285, "human": 285, "concret": 285, "aggress": 285, "classic": 285, "flowchart": 285, "htmllabel": 285, "td": 285, "classdef": 285, "itemstyl": 285, "cce5ff": 285, "stroke": 285, "99ccff": 285, "s1": 285, "s2": 285, "s3": 285, "s4": 285, "s5": 285, "s6": 285, "s7": 285, "nbsp": [285, 288], "subgraphstyl": 285, "ffffff": 285, "attempt": 285, "post_training_auto_qu": 285, "increment": 285, "ii": 285, "confidence_batch": 285, "spent": 285, "hawq_v2_loss": 285, "model_loss": 285, "black": 285, "discret": 285, "compli": 285, "prior": 285, "posterior": 285, "short": 285, "never": 285, "loglevel": 285, "endlessli": 285, "perspect": 285, "smbo": 285, "appl": 285, "surrog": 285, "quantil": 285, "densiti": 285, "parzen": 285, "greatest": 285, "hour": 285, "dai": 285, "next_tune_cfg": 285, "overridden": 285, "replic": 285, "replica": 285, "fed": 285, "synchron": 285, "number_of_process": 285, "run_cmd": 285, "abctunestrategi": 285, "familiar": 286, "notebook": 286, "introduct": 286, "organ": 287, "logic": 287, "mobilenet_v1": 287, "hyper": 287, "40": [287, 288], "adam": 287, "beta_1": 287, "beta_2": 287, "999": 287, "epsilon": 287, "sparsecategoricalcrossentropi": 287, "sum_over_batch_s": 287, "from_logit": 287, "1x": 288, "platinum": 288, "8480": 288, "8ghz": 288, "56": 288, "ht": 288, "turbo": 288, "256gb": 288, "16x16gb": 288, "ddr5": 288, "4800": 288, "mt": 288, "bio": 288, "3a14": 288, "tel2p1": 288, "microcod": 288, "0x2b0001b0": 288, "gcc": 288, "20210514": 288, "red": 288, "hat": 288, "visit": 288, "1s4c14ins1bsthroughput": 288, "sec": 288, "1720": 288, "582": 288, "95x": 288, "1517": 288, "570": 288, "65": 288, "66x": 288, "resnet101": 288, "41": 288, "1058": 288, "382": 288, "77x": 288, "69": 288, "2080": 288, "951": 288, "19x": 288, "1587": 288, "863": 288, "37": 288, "84x": 288, "1052": 288, "434": 288, "42x": 288, "707": 288, "234": 288, "02x": 288, "320": 288, "179": 288, "79x": 288, "4312": 288, "1512": 288, "85x": 288, "2287": 288, "1406": 288, "63x": 288, "1367": 288, "59x": 288, "vgg19": 288, "1244": 288, "176": 288, "04x": 288, "resnetv2": 288, "780": 288, "34x": 288, "494": 288, "329": 288, "50x": 288, "152": 288, "349": 288, "235": 288, "48x": 288, "densenet": 288, "161": 288, "29": 288, "282": 288, "223": 288, "26x": 288, "1284": 288, "756": 288, "70x": 288, "1280": 288, "530": 288, "cnn": 288, "39": 288, "26": 288, "178": 288, "13x": 288, "yolov3": 288, "249": 288, "64x": 288, "28x": 288, "36": 288, "05x": 288, "86": 288, "390": 288, "212": 288, "83x": 288, "vit": 288, "81": 288, "230": 288, "142": 288, "62x": 288, "1989": 288, "31x": 288, "1165": 288, "303": 288, "953": 288, "302": 288, "15x": 288, "resnest50": 288, "365": 288, "21x": 288, "resnext101_32x8d": 288, "548": 288, "104": 288, "27x": 288, "efficientnet_b0": 288, "636": 288, "62": 288, "566": 288, "12x": 288, "efficientnet_b3": 288, "471": 288, "358": 288, "32x": 288, "peleenet": 288, "790": 288, "504": 288, "57x": 288, "yolo": 288, "137": 288, "88x": 288, "175": 288, "23x": 288, "camembert": 288, "393": 288, "174": 288, "783": 288, "344": 288, "684": 288, "99x": 288, "312": 288, "155": 288, "60": 288, "01x": 288, "funnel": 288, "281": 288, "395": 288, "173": 288, "373": 288, "405": 288, "30x": 288, "stsb": 288, "396": 288, "136": 288, "377": 288, "17x": 288, "391": 288, "25x": 288, "135": 288, "61x": 288, "117": 288, "93x": 288, "lvwerra": 288, "pegasu": 288, "samsum": 288, "1981": 288, "598": 288, "1095": 288, "298": 288, "67x": 288, "549": 288, "29x": 288, "375": 288, "hellaswag": 288, "winogrand": 288, "piqa": 288, "word_perplex": 288, "4954": 288, "6409": 288, "7541": 288, "6434": 288, "8816": 288, "gptqw4g128asym": 288, "679": 288, "4895": 288, "6433": 288, "7476": 288, "6399": 288, "9945": 288, "0999": 288, "gptqw4g32asym": 288, "6829": 288, "4923": 288, "6401": 288, "7486": 288, "6410": 288, "0141": 288, "gptqw4g128sym": 288, "685": 288, "4907": 288, "6361": 288, "7443": 288, "6390": 288, "1498": 288, "gptqw4g32sym": 288, "6911": 288, "4899": 288, "6448": 288, "7497": 288, "6439": 288, "0008": 288, "0927": 288, "5049": 288, "6543": 288, "7628": 288, "6497": 288, "2862": 288, "4984": 288, "6535": 288, "7568": 288, "6473": 288, "4193": 288, "6885": 288, "4973": 288, "753": 288, "6455": 288, "9935": 288, "4607": 288, "decapoda": 288, "5642": 288, "6709": 288, "7835": 288, "6887": 288, "4202": 288, "7244": 288, "5603": 288, "6614": 288, "6824": 288, "9909": 288, "5881": 288, "5911": 288, "7009": 288, "7878": 288, "7106": 288, "7518": 288, "5843": 288, "6961": 288, "7911": 288, "4319": 288, "7572": 288, "5898": 288, "7056": 288, "7894": 288, "7105": 288, "9998": 288, "3429": 288, "7596": 288, "5841": 288, "6977": 288, "7905": 288, "7080": 288, "4916": 288, "6266": 288, "7277": 288, "8096": 288, "7350": 288, "2384": 288, "778": 288, "624": 288, "7269": 288, "8047": 288, "7334": 288, "9979": 288, "4237": 288, "7706": 288, "6239": 288, "7285": 288, "8058": 288, "7322": 288, "4697": 288, "7836": 288, "6195": 288, "7337": 288, "9983": 288, "5604": 288, "5732": 288, "648": 288, "7715": 288, "6746": 288, "7107": 288, "6982": 288, "5637": 288, "6527": 288, "7704": 288, "6713": 288, "9950": 288, "9702": 288, "5682": 288, "6575": 288, "7758": 288, "6742": 288, "9994": 288, "9317": 288, "567": 288, "6902": 288, "7353": 288, "6622": 288, "7829": 288, "6862": 288, "9635": 288, "7246": 288, "5617": 288, "6756": 288, "7797": 288, "6854": 288, "9931": 288, "2799": 288, "7312": 288, "6059": 288, "7103": 288, "7077": 288, "2213": 288, "7273": 288, "6018": 288, "7088": 288, "7742": 288, "7030": 288, "9934": 288, "2538": 288, "083": 288, "7283": 288, "6053": 288, "7024": 288, "7764": 288, "7031": 288, "1889": 288, "374": 288, "727": 288, "5997": 288, "7018": 288, "9916": 288, "2504": 288, "497": 288, "7122": 288, "8984": 288, "5933": 288, "689": 288, "7851": 288, "7075": 288, "1556": 288, "448": 288, "7675": 288, "5934": 288, "7856": 288, "7111": 288, "9984": 288, "1514": 288, "927": 288, "7566": 288, "5899": 288, "7032": 288, "9953": 288, "1374": 288, "728": 288, "4628": 288, "6456": 288, "6029": 288, "6438": 288, "5799": 288, "4542": 288, "6004": 288, "9957": 288, "0626": 288, "4789": 288, "6134": 288, "7432": 288, "5525": 288, "4731": 288, "6504": 288, "7617": 288, "6094": 288, "7828": 288, "5098": 288, "7622": 288, "6505": 288, "3242": 288, "6878": 288, "5058": 288, "6393": 288, "7633": 288, "6491": 288, "9978": 288, "5514": 288, "6864": 288, "5084": 288, "6519": 288, "6509": 288, "0006": 288, "4728": 288, "6876": 288, "5045": 288, "6474": 288, "9952": 288, "6379": 288, "5282": 288, "614": 288, "7448": 288, "6312": 288, "6377": 288, "5228": 288, "5991": 288, "6261": 288, "4096": 288, "6224": 288, "4271": 288, "577": 288, "722": 288, "5871": 288, "9359": 288, "6123": 288, "4227": 288, "5738": 288, "7203": 288, "5823": 288, "9917": 288, "3377": 288, "615": 288, "4259": 288, "5714": 288, "7247": 288, "9951": 288, "2083": 288, "6154": 288, "4208": 288, "5777": 288, "7198": 288, "5834": 288, "9937": 288, "3121": 288, "7233": 288, "5359": 288, "7753": 288, "195": 288, "7186": 288, "5328": 288, "7699": 288, "6687": 288, "9922": 288, "3463": 288, "7268": 288, "533": 288, "659": 288, "6726": 288, "2897": 288, "5718": 288, "6859": 288, "7927": 288, "6890": 288, "9324": 288, "7006": 288, "5655": 288, "6803": 288, "7965": 288, "6857": 288, "1515": 288, "5752": 288, "6748": 288, "7845": 288, "6724": 288, "5951": 288, "6472": 288, "5716": 288, "6685": 288, "784": 288, "6678": 288, "8539": 288, "6918": 288, "5819": 288, "678": 288, "6861": 288, "8863": 288, "5765": 288, "6827": 288, "7873": 288, "6832": 288, "9958": 288, "1451": 288, "storywrit": 288, "693": 288, "5477": 288, "663": 288, "6719": 288, "9125": 288, "6661": 288, "7813": 288, "6693": 288, "1137": 288, "rw": 288, "6604": 288, "5419": 288, "6598": 288, "6594": 288, "7616": 288, "6484": 288, "5369": 288, "7807": 288, "6559": 288, "9947": 288, "9411": 288, "6571": 288, "5398": 288, "6582": 288, "6579": 288, "8809": 288, "652": 288, "535": 288, "7682": 288, "6532": 288, "9906": 288, "0048": 288, "5177": 288, "6669": 288, "7824": 288, "5053": 288, "6301": 288, "5142": 288, "6654": 288, "6483": 288, "9933": 288, "8146": 288, "517": 288, "9941": 288, "1666": 288, "734": 288, "1658": 288, "1495": 288, "733": 288, "1661": 288, "732": 288, "1713": 288, "767": 288, "1747": 288, "770": 288, "7519": 288, "4430": 288, "4413": 288, "72x": 288, "7190": 288, "4019": 288, "613": 288, "170": 288, "611": 288, "186": 288, "619": 288, "184": 288, "36x": 288, "623": 288, "5711": 288, "2584": 288, "6136": 288, "2630": 288, "33x": 288, "shufflenet": 288, "6820": 288, "3686": 288, "googlenet": 288, "1971": 288, "1120": 288, "76x": 288, "1838": 288, "1142": 288, "squeezenet": 288, "10163": 288, "5771": 288, "10339": 288, "6002": 288, "caffenet": 288, "2805": 288, "1077": 288, "60x": 288, "4351": 288, "822": 288, "2169": 288, "893": 288, "43x": 288, "2232": 288, "841": 288, "65x": 288, "zfnet": 288, "921": 288, "525": 288, "75x": 288, "925": 288, "534": 288, "73x": 288, "1862": 288, "1161": 288, "1956": 288, "1262": 288, "55x": 288, "efficientnet": 288, "2793": 288, "1383": 288, "beit": 288, "206": 288, "91x": 288, "duc": 288, "74x": 288, "ultra": 288, "8780": 288, "1920": 288, "emot": 288, "ferplu": 288, "6360": 288, "3067": 288, "07x": 288, "arcfac": 288, "449": 288, "511": 288, "484": 288, "222": 288, "18x": 288, "integerop": 288, "635": 288, "1324": 288, "244": 288, "47x": 288, "440": 288, "214": 288, "06x": 288, "715": 288, "201": 288, "03x": 288, "714": 288, "213": 288, "339": 288, "58x": 288, "215": 288, "89x": 288, "712": 288, "217": 288, "l12": 288, "h384": 288, "1209": 288, "588": 288, "1268": 288, "16x": 288, "1253": 288, "399": 288, "14x": 288, "l6": 288, "1139": 288, "94x": 288, "2365": 288, "08x": 288, "718": 288, "35x": 288, "electra": 288, "discrimin": 288, "1951": 288, "71x": 288, "2198": 288, "1129": 288, "mini": 288, "5814": 288, "3388": 288, "6396": 288, "3445": 288, "86x": 288, "bart": 288, "126": 288, "spanbert": 288, "multilingu": 288, "82x": 288, "118": 288, "46x": 288, "layoutlmv2": 288, "perplex": 288, "2788": 288, "7002": 288, "4124": 288, "9921": 288, "3950": 288, "9892": 288, "9163": 288, "7240": 288, "9902": 288, "0438": 288, "7634": 288, "1186": 288, "9944": 288, "1276": 288, "7543": 288, "6181": 288, "rtnw4g32asym": 288, "6496": 288, "9967": 288, "7964": 288, "6612": 288, "rtnw4g32sym": 288, "7941": 288, "7243": 288, "9971": 288, "taskdataset": 288, "accuracyspars": 288, "ratiospars": 288, "commentsbalancedor": 288, "unbalanc": 288, "answeringsquad": 288, "87f1": 288, "momentumunbalanc": 288, "momentumbalanc": 288, "90f1": 288, "59f1": 288, "23f1": 288, "classificationmrpc": 288, "52f1": 288, "26f1": 288, "classificationsst": 288, "61accuraci": 288, "recognitionimagenet": 288, "95top1": 288, "v5s6": 288, "detectioncoco": 288, "ap0": 288, "6ap0": 288, "584": 288, "34f1": 288, "lassounbalanc": 288, "classificationmnli": 288, "mm": 288, "allbalanc": 288, "32accuraci": 288, "sensitivitybalanc": 288, "classificationqqp": 288, "classificationqnli": 288, "54accuraci": 288, "em": 288, "mobilenetv2": 288, "wideresnet40": 288, "9522": 288, "8178": 288, "0213": 288, "8235": 288, "027": 288, "5494": 288, "7153": 288, "5540": 288, "5523": 288, "vgg": 288, "bn": 288, "7022": 288, "7415": 288, "7025": 288, "6739": 288, "7399": 288, "6845": 288, "0106": 288, "blendcnn": 288, "7034": 288, "8382": 288, "bilstm": 288, "8314": 288, "9403": 288, "9048": 288, "0734": 288, "7323": 288, "8256": 288, "8084": 288, "8814": 288, "7442": 288, "8371": 288, "0119": 288, "0115": 288, "tinybert": 288, "8018": 288, "8044": 288, "8363": 288, "8411": 288, "8025": 288, "8074": 288, "0007": 288, "8626": 288, "9091": 288, "8782": 288, "8684": 288, "8259": 288, "0058": 288, "distilroberta": 288, "6057": 288, "6187": 288, "0130": 288, "c6i": 288, "2xlarg": 288, "c6a": 288, "c6g": 288, "a100cuda": 288, "executionprovid": 288}, "objects": {"": [[0, 0, 0, "-", "block_mask"], [129, 0, 0, "-", "neural_compressor"]], "neural_compressor": [[3, 0, 0, "-", "algorithm"], [6, 0, 0, "-", "benchmark"], [7, 0, 0, "-", "config"], [8, 0, 0, "-", "contrib"], [23, 0, 0, "-", "data"], [76, 0, 0, "-", "experimental"], [136, 0, 0, "-", "metric"], [138, 0, 0, "-", "mix_precision"], [140, 0, 0, "-", "model"], [148, 0, 0, "-", "objective"], [149, 0, 0, "-", "profiling"], [150, 0, 0, "-", "quantization"], [158, 0, 0, "-", "strategy"], [169, 0, 0, "-", "training"], [173, 0, 0, "-", "utils"], [182, 0, 0, "-", "version"]], "neural_compressor.algorithm": [[1, 0, 0, "-", "algorithm"], [2, 0, 0, "-", "fast_bias_correction"], [4, 0, 0, "-", "smooth_quant"], [5, 0, 0, "-", "weight_correction"]], "neural_compressor.algorithm.algorithm": [[1, 1, 1, "", "ALGORITHMS"], [1, 1, 1, "", "Algorithm"], [1, 1, 1, "", "AlgorithmScheduler"], [1, 2, 1, "", "algorithm_registry"]], "neural_compressor.algorithm.fast_bias_correction": [[2, 1, 1, "", "FastBiasCorrection"]], "neural_compressor.algorithm.smooth_quant": [[4, 1, 1, "", "SmoothQuant"]], "neural_compressor.algorithm.weight_correction": [[5, 1, 1, "", "WeightCorrection"]], "neural_compressor.benchmark": [[6, 2, 1, "", "benchmark_with_raw_cmd"], [6, 2, 1, "", "call_one"], [6, 2, 1, "", "config_instance"], [6, 2, 1, "", "fit"], [6, 2, 1, "", "generate_prefix"], [6, 2, 1, "", "get_architecture"], [6, 2, 1, "", "get_bounded_threads"], [6, 2, 1, "", "get_core_ids"], [6, 2, 1, "", "get_physical_ids"], [6, 2, 1, "", "get_threads"], [6, 2, 1, "", "get_threads_per_core"], [6, 2, 1, "", "profile"], [6, 2, 1, "", "run_instance"], [6, 2, 1, "", "set_all_env_var"], [6, 2, 1, "", "set_env_var"], [6, 2, 1, "", "summary_benchmark"]], "neural_compressor.config": [[7, 1, 1, "", "AccuracyCriterion"], [7, 1, 1, "", "BenchmarkConfig"], [7, 1, 1, "", "DistillationConfig"], [7, 1, 1, "", "DotDict"], [7, 1, 1, "", "ExportConfig"], [7, 1, 1, "", "HPOConfig"], [7, 1, 1, "", "IntermediateLayersKnowledgeDistillationLossConfig"], [7, 1, 1, "", "Keras"], [7, 1, 1, "", "KnowledgeDistillationLossConfig"], [7, 1, 1, "", "MXNet"], [7, 1, 1, "", "MixedPrecisionConfig"], [7, 1, 1, "", "NASConfig"], [7, 1, 1, "", "ONNX"], [7, 1, 1, "", "ONNXQlinear2QDQConfig"], [7, 1, 1, "", "Options"], [7, 1, 1, "", "PostTrainingQuantConfig"], [7, 1, 1, "", "PyTorch"], [7, 1, 1, "", "QuantizationAwareTrainingConfig"], [7, 1, 1, "", "SelfKnowledgeDistillationLossConfig"], [7, 1, 1, "", "TF2ONNXConfig"], [7, 1, 1, "", "TensorFlow"], [7, 1, 1, "", "Torch2ONNXConfig"], [7, 1, 1, "", "TuningCriterion"], [7, 1, 1, "", "WeightPruningConfig"]], "neural_compressor.contrib": [[9, 0, 0, "-", "strategy"]], "neural_compressor.contrib.strategy": [[10, 0, 0, "-", "sigopt"], [11, 0, 0, "-", "tpe"]], "neural_compressor.contrib.strategy.sigopt": [[10, 1, 1, "", "SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[11, 1, 1, "", "TpeTuneStrategy"]], "neural_compressor.data": [[18, 0, 0, "-", "datasets"], [22, 0, 0, "-", "filters"], [25, 0, 0, "-", "transforms"]], "neural_compressor.data.datasets": [[12, 0, 0, "-", "bert_dataset"], [13, 0, 0, "-", "coco_dataset"], [14, 0, 0, "-", "dataset"], [15, 0, 0, "-", "dummy_dataset"], [16, 0, 0, "-", "dummy_dataset_v2"], [17, 0, 0, "-", "imagenet_dataset"], [19, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.data.datasets.bert_dataset": [[12, 1, 1, "", "InputFeatures"], [12, 1, 1, "", "ONNXRTBertDataset"], [12, 1, 1, "", "ParseDecodeBert"], [12, 1, 1, "", "PytorchBertDataset"], [12, 1, 1, "", "TensorflowBertDataset"], [12, 1, 1, "", "TensorflowModelZooBertDataset"], [12, 2, 1, "", "convert_examples_to_features"], [12, 2, 1, "", "load_and_cache_examples"]], "neural_compressor.data.datasets.coco_dataset": [[13, 1, 1, "", "COCONpy"], [13, 1, 1, "", "COCORaw"], [13, 1, 1, "", "COCORecordDataset"], [13, 1, 1, "", "ParseDecodeCoco"]], "neural_compressor.data.datasets.dataset": [[14, 1, 1, "", "CIFAR10"], [14, 1, 1, "", "CIFAR100"], [14, 1, 1, "", "Dataset"], [14, 1, 1, "", "Datasets"], [14, 1, 1, "", "FashionMNIST"], [14, 1, 1, "", "ImageFolder"], [14, 1, 1, "", "IterableDataset"], [14, 1, 1, "", "MNIST"], [14, 1, 1, "", "MXNetCIFAR10"], [14, 1, 1, "", "MXNetCIFAR100"], [14, 1, 1, "", "MXNetDatasets"], [14, 1, 1, "", "MXNetFashionMNIST"], [14, 1, 1, "", "MXNetImageFolder"], [14, 1, 1, "", "MXNetMNIST"], [14, 1, 1, "", "ONNXRTITDatasets"], [14, 1, 1, "", "ONNXRTQLDatasets"], [14, 1, 1, "", "PyTorchDatasets"], [14, 1, 1, "", "PytorchCIFAR10"], [14, 1, 1, "", "PytorchCIFAR100"], [14, 1, 1, "", "PytorchFashionMNIST"], [14, 1, 1, "", "PytorchMNIST"], [14, 1, 1, "", "PytorchMxnetWrapDataset"], [14, 1, 1, "", "PytorchMxnetWrapFunction"], [14, 1, 1, "", "Tensorflow"], [14, 1, 1, "", "TensorflowCIFAR10"], [14, 1, 1, "", "TensorflowCIFAR100"], [14, 1, 1, "", "TensorflowDatasets"], [14, 1, 1, "", "TensorflowFashionMNIST"], [14, 1, 1, "", "TensorflowImageRecord"], [14, 1, 1, "", "TensorflowMNIST"], [14, 1, 1, "", "TensorflowTFRecordDataset"], [14, 1, 1, "", "TensorflowVOCRecord"], [14, 2, 1, "", "calculate_md5"], [14, 2, 1, "", "check_integrity"], [14, 2, 1, "", "dataset_registry"], [14, 2, 1, "", "download_url"], [14, 3, 1, "", "framework_datasets"], [14, 2, 1, "", "gen_bar_updater"]], "neural_compressor.data.datasets.dummy_dataset": [[15, 1, 1, "", "DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[16, 1, 1, "", "DummyDataset"], [16, 1, 1, "", "SparseDummyDataset"]], "neural_compressor.data.datasets.imagenet_dataset": [[17, 1, 1, "", "ImagenetRaw"], [17, 1, 1, "", "MXNetImagenetRaw"], [17, 1, 1, "", "ONNXRTImagenetDataset"], [17, 1, 1, "", "PytorchImagenetRaw"], [17, 1, 1, "", "TensorflowImagenetDataset"], [17, 1, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.data.datasets.style_transfer_dataset": [[19, 1, 1, "", "StyleTransferDataset"]], "neural_compressor.data.filters": [[20, 0, 0, "-", "coco_filter"], [21, 0, 0, "-", "filter"]], "neural_compressor.data.filters.coco_filter": [[20, 1, 1, "", "LabelBalanceCOCORawFilter"], [20, 1, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.filter": [[21, 1, 1, "", "FILTERS"], [21, 1, 1, "", "Filter"], [21, 1, 1, "", "MXNetFilters"], [21, 1, 1, "", "ONNXRTITFilters"], [21, 1, 1, "", "ONNXRTQLFilters"], [21, 1, 1, "", "PyTorchFilters"], [21, 1, 1, "", "TensorflowFilters"], [21, 2, 1, "", "filter_registry"]], "neural_compressor.data.transforms": [[24, 0, 0, "-", "imagenet_transform"], [26, 0, 0, "-", "postprocess"], [27, 0, 0, "-", "tokenization"], [28, 0, 0, "-", "transform"]], "neural_compressor.data.transforms.imagenet_transform": [[24, 1, 1, "", "BilinearImagenetTransform"], [24, 1, 1, "", "LabelShift"], [24, 1, 1, "", "ONNXResizeCropImagenetTransform"], [24, 1, 1, "", "OnnxBilinearImagenetTransform"], [24, 1, 1, "", "ParseDecodeImagenet"], [24, 1, 1, "", "ParseDecodeImagenetTransform"], [24, 1, 1, "", "QuantizedInput"], [24, 1, 1, "", "ResizeWithAspectRatio"], [24, 1, 1, "", "TensorflowResizeCropImagenetTransform"], [24, 1, 1, "", "TensorflowShiftRescale"], [24, 1, 1, "", "TensorflowTransposeLastChannel"]], "neural_compressor.data.transforms.postprocess": [[26, 1, 1, "", "Postprocess"]], "neural_compressor.data.transforms.tokenization": [[27, 1, 1, "", "BasicTokenizer"], [27, 1, 1, "", "FullTokenizer"], [27, 1, 1, "", "WordpieceTokenizer"], [27, 2, 1, "", "convert_by_vocab"], [27, 2, 1, "", "convert_to_unicode"], [27, 2, 1, "", "load_vocab"], [27, 2, 1, "", "whitespace_tokenize"]], "neural_compressor.data.transforms.transform": [[28, 1, 1, "", "AlignImageChannelTransform"], [28, 1, 1, "", "BaseTransform"], [28, 1, 1, "", "CastONNXTransform"], [28, 1, 1, "", "CastPyTorchTransform"], [28, 1, 1, "", "CastTFTransform"], [28, 1, 1, "", "CenterCropTFTransform"], [28, 1, 1, "", "CenterCropTransform"], [28, 1, 1, "", "CollectTransform"], [28, 1, 1, "", "ComposeTransform"], [28, 1, 1, "", "CropResizeTFTransform"], [28, 1, 1, "", "CropResizeTransform"], [28, 1, 1, "", "CropToBoundingBox"], [28, 1, 1, "", "InputFeatures"], [28, 1, 1, "", "MXNetCropResizeTransform"], [28, 1, 1, "", "MXNetCropToBoundingBox"], [28, 1, 1, "", "MXNetNormalizeTransform"], [28, 1, 1, "", "MXNetTransforms"], [28, 1, 1, "", "MXNetTranspose"], [28, 1, 1, "", "NormalizeTFTransform"], [28, 1, 1, "", "NormalizeTransform"], [28, 1, 1, "", "ONNXRTCropToBoundingBox"], [28, 1, 1, "", "ONNXRTITTransforms"], [28, 1, 1, "", "ONNXRTQLTransforms"], [28, 1, 1, "", "PaddedCenterCropTransform"], [28, 1, 1, "", "ParseDecodeVocTransform"], [28, 1, 1, "", "PyTorchAlignImageChannel"], [28, 1, 1, "", "PyTorchCropResizeTransform"], [28, 1, 1, "", "PyTorchNormalizeTransform"], [28, 1, 1, "", "PyTorchTransforms"], [28, 1, 1, "", "PyTorchTranspose"], [28, 1, 1, "", "PytorchMxnetTransform"], [28, 1, 1, "", "PytorchMxnetWrapFunction"], [28, 1, 1, "", "RandomCropTFTransform"], [28, 1, 1, "", "RandomCropTransform"], [28, 1, 1, "", "RandomHorizontalFlip"], [28, 1, 1, "", "RandomResizedCropMXNetTransform"], [28, 1, 1, "", "RandomResizedCropPytorchTransform"], [28, 1, 1, "", "RandomResizedCropTFTransform"], [28, 1, 1, "", "RandomResizedCropTransform"], [28, 1, 1, "", "RandomVerticalFlip"], [28, 1, 1, "", "RescaleKerasPretrainTransform"], [28, 1, 1, "", "RescaleTFTransform"], [28, 1, 1, "", "RescaleTransform"], [28, 1, 1, "", "ResizeMXNetTransform"], [28, 1, 1, "", "ResizePytorchTransform"], [28, 1, 1, "", "ResizeTFTransform"], [28, 1, 1, "", "ResizeTransform"], [28, 1, 1, "", "ResizeWithRatio"], [28, 1, 1, "", "SquadExample"], [28, 1, 1, "", "TFModelZooCollectTransform"], [28, 1, 1, "", "TFSquadV1ModelZooPostTransform"], [28, 1, 1, "", "TFSquadV1PostTransform"], [28, 1, 1, "", "TRANSFORMS"], [28, 1, 1, "", "TensorflowCropToBoundingBox"], [28, 1, 1, "", "TensorflowRandomHorizontalFlip"], [28, 1, 1, "", "TensorflowRandomVerticalFlip"], [28, 1, 1, "", "TensorflowResizeWithRatio"], [28, 1, 1, "", "TensorflowTransform"], [28, 1, 1, "", "TensorflowTransforms"], [28, 1, 1, "", "TensorflowTranspose"], [28, 1, 1, "", "TensorflowWrapFunction"], [28, 1, 1, "", "ToArray"], [28, 1, 1, "", "ToNDArrayTransform"], [28, 1, 1, "", "Transforms"], [28, 1, 1, "", "Transpose"], [28, 2, 1, "", "convert_examples_to_features"], [28, 2, 1, "", "get_final_text"], [28, 2, 1, "", "get_torchvision_map"], [28, 2, 1, "", "read_squad_examples"], [28, 2, 1, "", "transform_registry"]], "neural_compressor.experimental": [[29, 0, 0, "-", "benchmark"], [32, 0, 0, "-", "common"], [38, 0, 0, "-", "component"], [39, 0, 0, "-", "compression"], [40, 0, 0, "-", "contrib"], [65, 0, 0, "-", "data"], [70, 0, 0, "-", "distillation"], [71, 0, 0, "-", "export"], [75, 0, 0, "-", "graph_optimization"], [83, 0, 0, "-", "metric"], [85, 0, 0, "-", "mixed_precision"], [86, 0, 0, "-", "model_conversion"], [89, 0, 0, "-", "nas"], [95, 0, 0, "-", "pruner_legacy"], [99, 0, 0, "-", "pruning"], [100, 0, 0, "-", "pruning_recipes"], [104, 0, 0, "-", "pruning_v2"], [105, 0, 0, "-", "pytorch_pruner"], [112, 0, 0, "-", "quantization"], [113, 0, 0, "-", "scheduler"], [118, 0, 0, "-", "strategy"]], "neural_compressor.experimental.benchmark": [[29, 1, 1, "", "Benchmark"], [29, 2, 1, "", "get_architecture"], [29, 2, 1, "", "get_bounded_threads"], [29, 2, 1, "", "get_core_ids"], [29, 2, 1, "", "get_physical_ids"], [29, 2, 1, "", "get_threads"], [29, 2, 1, "", "get_threads_per_core"], [29, 2, 1, "", "set_all_env_var"], [29, 2, 1, "", "set_env_var"]], "neural_compressor.experimental.common": [[30, 0, 0, "-", "criterion"], [31, 0, 0, "-", "dataloader"], [33, 0, 0, "-", "metric"], [34, 0, 0, "-", "model"], [35, 0, 0, "-", "optimizer"], [36, 0, 0, "-", "postprocess"], [37, 0, 0, "-", "torch_utils"]], "neural_compressor.experimental.common.criterion": [[30, 1, 1, "", "Criterions"], [30, 1, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [30, 1, 1, "", "KnowledgeDistillationFramework"], [30, 1, 1, "", "KnowledgeDistillationLoss"], [30, 1, 1, "", "PyTorchCriterions"], [30, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [30, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [30, 1, 1, "", "PyTorchKnowledgeDistillationLoss"], [30, 1, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [30, 1, 1, "", "SelfKnowledgeDistillationLoss"], [30, 1, 1, "", "TensorflowCriterions"], [30, 1, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [30, 2, 1, "", "criterion_registry"]], "neural_compressor.experimental.common.dataloader": [[31, 1, 1, "", "DataLoader"]], "neural_compressor.experimental.common.metric": [[33, 1, 1, "", "Metric"]], "neural_compressor.experimental.common.model": [[34, 1, 1, "", "Model"], [34, 2, 1, "", "set_backend"]], "neural_compressor.experimental.common.optimizer": [[35, 1, 1, "", "Optimizers"], [35, 1, 1, "", "PyTorchOptimizers"], [35, 1, 1, "", "PyTorchSGD"], [35, 1, 1, "", "TensorFlowAdamW"], [35, 1, 1, "", "TensorFlowSGD"], [35, 1, 1, "", "TensorflowOptimizers"], [35, 2, 1, "", "optimizer_registry"]], "neural_compressor.experimental.common.postprocess": [[36, 1, 1, "", "Postprocess"]], "neural_compressor.experimental.common.torch_utils": [[37, 2, 1, "", "get_activation"], [37, 2, 1, "", "record_output"]], "neural_compressor.experimental.component": [[38, 1, 1, "", "Component"]], "neural_compressor.experimental.contrib": [[41, 0, 0, "-", "strategy"]], "neural_compressor.experimental.contrib.strategy": [[42, 0, 0, "-", "sigopt"], [43, 0, 0, "-", "tpe"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[42, 1, 1, "", "SigOptTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.tpe": [[43, 1, 1, "", "TpeTuneStrategy"]], "neural_compressor.experimental.data": [[48, 0, 0, "-", "dataloaders"], [60, 0, 0, "-", "datasets"], [64, 0, 0, "-", "filters"], [67, 0, 0, "-", "transforms"]], "neural_compressor.experimental.data.dataloaders": [[44, 0, 0, "-", "base_dataloader"], [45, 0, 0, "-", "dataloader"], [46, 0, 0, "-", "default_dataloader"], [47, 0, 0, "-", "fetcher"], [49, 0, 0, "-", "mxnet_dataloader"], [50, 0, 0, "-", "onnxrt_dataloader"], [51, 0, 0, "-", "pytorch_dataloader"], [52, 0, 0, "-", "sampler"], [53, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[44, 1, 1, "", "BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[46, 1, 1, "", "DefaultDataLoader"], [46, 2, 1, "", "default_collate"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[47, 1, 1, "", "Fetcher"], [47, 1, 1, "", "IndexFetcher"], [47, 1, 1, "", "IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[49, 1, 1, "", "MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[50, 1, 1, "", "ONNXRTBertDataLoader"], [50, 1, 1, "", "ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[51, 1, 1, "", "PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[52, 1, 1, "", "BatchSampler"], [52, 1, 1, "", "IterableSampler"], [52, 1, 1, "", "Sampler"], [52, 1, 1, "", "SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[53, 1, 1, "", "TFDataDataLoader"], [53, 1, 1, "", "TensorflowBertDataLoader"], [53, 1, 1, "", "TensorflowDataLoader"], [53, 1, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.datasets": [[54, 0, 0, "-", "bert_dataset"], [55, 0, 0, "-", "coco_dataset"], [56, 0, 0, "-", "dataset"], [57, 0, 0, "-", "dummy_dataset"], [58, 0, 0, "-", "dummy_dataset_v2"], [59, 0, 0, "-", "imagenet_dataset"], [61, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[54, 1, 1, "", "InputFeatures"], [54, 1, 1, "", "ONNXRTBertDataset"], [54, 1, 1, "", "ParseDecodeBert"], [54, 1, 1, "", "PytorchBertDataset"], [54, 1, 1, "", "TensorflowBertDataset"], [54, 1, 1, "", "TensorflowModelZooBertDataset"], [54, 2, 1, "", "convert_examples_to_features"], [54, 2, 1, "", "load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[55, 1, 1, "", "COCONpy"], [55, 1, 1, "", "COCORaw"], [55, 1, 1, "", "COCORecordDataset"], [55, 1, 1, "", "ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.dataset": [[56, 1, 1, "", "CIFAR10"], [56, 1, 1, "", "CIFAR100"], [56, 1, 1, "", "Dataset"], [56, 1, 1, "", "Datasets"], [56, 1, 1, "", "FashionMNIST"], [56, 1, 1, "", "ImageFolder"], [56, 1, 1, "", "IterableDataset"], [56, 1, 1, "", "MNIST"], [56, 1, 1, "", "MXNetCIFAR10"], [56, 1, 1, "", "MXNetCIFAR100"], [56, 1, 1, "", "MXNetDatasets"], [56, 1, 1, "", "MXNetFashionMNIST"], [56, 1, 1, "", "MXNetImageFolder"], [56, 1, 1, "", "MXNetMNIST"], [56, 1, 1, "", "ONNXRTITDatasets"], [56, 1, 1, "", "ONNXRTQLDatasets"], [56, 1, 1, "", "PyTorchDatasets"], [56, 1, 1, "", "PytorchCIFAR10"], [56, 1, 1, "", "PytorchCIFAR100"], [56, 1, 1, "", "PytorchFashionMNIST"], [56, 1, 1, "", "PytorchMNIST"], [56, 1, 1, "", "PytorchMxnetWrapDataset"], [56, 1, 1, "", "PytorchMxnetWrapFunction"], [56, 1, 1, "", "TensorflowCIFAR10"], [56, 1, 1, "", "TensorflowCIFAR100"], [56, 1, 1, "", "TensorflowDatasets"], [56, 1, 1, "", "TensorflowFashionMNIST"], [56, 1, 1, "", "TensorflowImageFolder"], [56, 1, 1, "", "TensorflowImageRecord"], [56, 1, 1, "", "TensorflowMNIST"], [56, 1, 1, "", "TensorflowTFRecordDataset"], [56, 1, 1, "", "TensorflowVOCRecord"], [56, 2, 1, "", "calculate_md5"], [56, 2, 1, "", "check_integrity"], [56, 2, 1, "", "dataset_registry"], [56, 2, 1, "", "download_url"], [56, 3, 1, "", "framework_datasets"], [56, 2, 1, "", "gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[57, 1, 1, "", "DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[58, 1, 1, "", "DummyDataset"], [58, 1, 1, "", "SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[59, 1, 1, "", "ImagenetRaw"], [59, 1, 1, "", "MXNetImagenetRaw"], [59, 1, 1, "", "ONNXRTImagenetDataset"], [59, 1, 1, "", "PytorchImagenetRaw"], [59, 1, 1, "", "TensorflowImagenetDataset"], [59, 1, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[61, 1, 1, "", "StyleTransferDataset"]], "neural_compressor.experimental.data.filters": [[62, 0, 0, "-", "coco_filter"], [63, 0, 0, "-", "filter"]], "neural_compressor.experimental.data.filters.coco_filter": [[62, 1, 1, "", "LabelBalanceCOCORawFilter"], [62, 1, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.filter": [[63, 1, 1, "", "FILTERS"], [63, 1, 1, "", "Filter"], [63, 1, 1, "", "MXNetFilters"], [63, 1, 1, "", "ONNXRTITFilters"], [63, 1, 1, "", "ONNXRTQLFilters"], [63, 1, 1, "", "PyTorchFilters"], [63, 1, 1, "", "TensorflowFilters"], [63, 2, 1, "", "filter_registry"]], "neural_compressor.experimental.data.transforms": [[66, 0, 0, "-", "imagenet_transform"], [68, 0, 0, "-", "tokenization"], [69, 0, 0, "-", "transform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[66, 1, 1, "", "BilinearImagenetTransform"], [66, 1, 1, "", "LabelShift"], [66, 1, 1, "", "ONNXResizeCropImagenetTransform"], [66, 1, 1, "", "OnnxBilinearImagenetTransform"], [66, 1, 1, "", "ParseDecodeImagenet"], [66, 1, 1, "", "ParseDecodeImagenetTransform"], [66, 1, 1, "", "QuantizedInput"], [66, 1, 1, "", "ResizeWithAspectRatio"], [66, 1, 1, "", "TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.tokenization": [[68, 1, 1, "", "BasicTokenizer"], [68, 1, 1, "", "FullTokenizer"], [68, 1, 1, "", "WordpieceTokenizer"], [68, 2, 1, "", "convert_by_vocab"], [68, 2, 1, "", "convert_to_unicode"], [68, 2, 1, "", "load_vocab"], [68, 2, 1, "", "whitespace_tokenize"]], "neural_compressor.experimental.data.transforms.transform": [[69, 1, 1, "", "AlignImageChannelTransform"], [69, 1, 1, "", "BaseTransform"], [69, 1, 1, "", "CastONNXTransform"], [69, 1, 1, "", "CastPyTorchTransform"], [69, 1, 1, "", "CastTFTransform"], [69, 1, 1, "", "CenterCropTFTransform"], [69, 1, 1, "", "CenterCropTransform"], [69, 1, 1, "", "CollectTransform"], [69, 1, 1, "", "ComposeTransform"], [69, 1, 1, "", "CropResizeTFTransform"], [69, 1, 1, "", "CropResizeTransform"], [69, 1, 1, "", "CropToBoundingBox"], [69, 1, 1, "", "InputFeatures"], [69, 1, 1, "", "MXNetCropResizeTransform"], [69, 1, 1, "", "MXNetCropToBoundingBox"], [69, 1, 1, "", "MXNetNormalizeTransform"], [69, 1, 1, "", "MXNetTransforms"], [69, 1, 1, "", "MXNetTranspose"], [69, 1, 1, "", "NormalizeTFTransform"], [69, 1, 1, "", "NormalizeTransform"], [69, 1, 1, "", "ONNXRTCropToBoundingBox"], [69, 1, 1, "", "ONNXRTITTransforms"], [69, 1, 1, "", "ONNXRTQLTransforms"], [69, 1, 1, "", "PaddedCenterCropTransform"], [69, 1, 1, "", "ParseDecodeVocTransform"], [69, 1, 1, "", "PyTorchAlignImageChannel"], [69, 1, 1, "", "PyTorchCropResizeTransform"], [69, 1, 1, "", "PyTorchNormalizeTransform"], [69, 1, 1, "", "PyTorchTransforms"], [69, 1, 1, "", "PyTorchTranspose"], [69, 1, 1, "", "PytorchMxnetTransform"], [69, 1, 1, "", "PytorchMxnetWrapFunction"], [69, 1, 1, "", "RandomCropTFTransform"], [69, 1, 1, "", "RandomCropTransform"], [69, 1, 1, "", "RandomHorizontalFlip"], [69, 1, 1, "", "RandomResizedCropMXNetTransform"], [69, 1, 1, "", "RandomResizedCropPytorchTransform"], [69, 1, 1, "", "RandomResizedCropTFTransform"], [69, 1, 1, "", "RandomResizedCropTransform"], [69, 1, 1, "", "RandomVerticalFlip"], [69, 1, 1, "", "RescaleKerasPretrainTransform"], [69, 1, 1, "", "RescaleTFTransform"], [69, 1, 1, "", "RescaleTransform"], [69, 1, 1, "", "ResizeMXNetTransform"], [69, 1, 1, "", "ResizePytorchTransform"], [69, 1, 1, "", "ResizeTFTransform"], [69, 1, 1, "", "ResizeTransform"], [69, 1, 1, "", "ResizeWithRatio"], [69, 1, 1, "", "SquadExample"], [69, 1, 1, "", "TFModelZooCollectTransform"], [69, 1, 1, "", "TFSquadV1ModelZooPostTransform"], [69, 1, 1, "", "TFSquadV1PostTransform"], [69, 1, 1, "", "TRANSFORMS"], [69, 1, 1, "", "TensorflowCropToBoundingBox"], [69, 1, 1, "", "TensorflowRandomHorizontalFlip"], [69, 1, 1, "", "TensorflowRandomVerticalFlip"], [69, 1, 1, "", "TensorflowResizeWithRatio"], [69, 1, 1, "", "TensorflowTransform"], [69, 1, 1, "", "TensorflowTransforms"], [69, 1, 1, "", "TensorflowTranspose"], [69, 1, 1, "", "TensorflowWrapFunction"], [69, 1, 1, "", "ToArray"], [69, 1, 1, "", "ToNDArrayTransform"], [69, 1, 1, "", "Transforms"], [69, 1, 1, "", "Transpose"], [69, 2, 1, "", "convert_examples_to_features"], [69, 2, 1, "", "get_final_text"], [69, 2, 1, "", "get_torchvision_map"], [69, 2, 1, "", "read_squad_examples"], [69, 2, 1, "", "transform_registry"]], "neural_compressor.experimental.distillation": [[70, 1, 1, "", "Distillation"]], "neural_compressor.experimental.distillation.Distillation": [[70, 4, 1, "", "_epoch_ran"], [70, 4, 1, "", "best_model"], [70, 4, 1, "", "best_score"], [70, 4, 1, "", "eval_frequency"]], "neural_compressor.experimental.export": [[72, 0, 0, "-", "qlinear2qdq"], [73, 0, 0, "-", "tf2onnx"], [74, 0, 0, "-", "torch2onnx"]], "neural_compressor.experimental.export.qlinear2qdq": [[72, 2, 1, "", "check_model"], [72, 2, 1, "", "onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.tf2onnx": [[73, 2, 1, "", "tf_to_fp32_onnx"], [73, 2, 1, "", "tf_to_int8_onnx"]], "neural_compressor.experimental.export.torch2onnx": [[74, 2, 1, "", "dynamic_quant_export"], [74, 2, 1, "", "get_node_mapping"], [74, 2, 1, "", "get_quantizable_onnx_ops"], [74, 2, 1, "", "static_quant_export"], [74, 2, 1, "", "torch_to_fp32_onnx"], [74, 2, 1, "", "torch_to_int8_onnx"]], "neural_compressor.experimental.graph_optimization": [[75, 1, 1, "", "Graph_Optimization"]], "neural_compressor.experimental.metric": [[77, 0, 0, "-", "bleu"], [78, 0, 0, "-", "bleu_util"], [79, 0, 0, "-", "coco_label_map"], [80, 0, 0, "-", "coco_tools"], [81, 0, 0, "-", "evaluate_squad"], [82, 0, 0, "-", "f1"], [84, 0, 0, "-", "metric"]], "neural_compressor.experimental.metric.bleu": [[77, 1, 1, "", "BLEU"], [77, 1, 1, "", "UnicodeRegex"], [77, 2, 1, "", "bleu_tokenize"]], "neural_compressor.experimental.metric.bleu.BLEU": [[77, 4, 1, "", "labels"], [77, 4, 1, "", "predictions"]], "neural_compressor.experimental.metric.bleu.UnicodeRegex": [[77, 4, 1, "", "nondigit_punct_re"], [77, 4, 1, "", "punct_nondigit_re"], [77, 4, 1, "", "symbol_re"]], "neural_compressor.experimental.metric.bleu_util": [[78, 2, 1, "", "compute_bleu"]], "neural_compressor.experimental.metric.coco_tools": [[80, 1, 1, "", "COCOEvalWrapper"], [80, 1, 1, "", "COCOWrapper"], [80, 2, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [80, 2, 1, "", "ExportSingleImageDetectionMasksToCoco"], [80, 2, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.experimental.metric.coco_tools.COCOWrapper": [[80, 4, 1, "", "dataset"], [80, 4, 1, "", "detection_type"]], "neural_compressor.experimental.metric.evaluate_squad": [[81, 2, 1, "", "evaluate"], [81, 2, 1, "", "exact_match_score"], [81, 2, 1, "", "f1_score"], [81, 2, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[82, 2, 1, "", "evaluate"], [82, 2, 1, "", "f1_score"], [82, 2, 1, "", "metric_max_over_ground_truths"], [82, 2, 1, "", "normalize_answer"]], "neural_compressor.experimental.metric.metric": [[84, 1, 1, "", "Accuracy"], [84, 1, 1, "", "BaseMetric"], [84, 1, 1, "", "COCOmAPv2"], [84, 1, 1, "", "F1"], [84, 1, 1, "", "GeneralTopK"], [84, 1, 1, "", "Loss"], [84, 1, 1, "", "MAE"], [84, 1, 1, "", "METRICS"], [84, 1, 1, "", "MSE"], [84, 1, 1, "", "MXNetMetrics"], [84, 1, 1, "", "ONNXRTGLUE"], [84, 1, 1, "", "ONNXRTITMetrics"], [84, 1, 1, "", "ONNXRTQLMetrics"], [84, 1, 1, "", "PyTorchLoss"], [84, 1, 1, "", "PyTorchMetrics"], [84, 1, 1, "", "RMSE"], [84, 1, 1, "", "ROC"], [84, 1, 1, "", "SquadF1"], [84, 1, 1, "", "TensorflowCOCOMAP"], [84, 1, 1, "", "TensorflowMAP"], [84, 1, 1, "", "TensorflowMetrics"], [84, 1, 1, "", "TensorflowTopK"], [84, 1, 1, "", "TensorflowVOCMAP"], [84, 1, 1, "", "WrapMXNetMetric"], [84, 1, 1, "", "WrapONNXRTMetric"], [84, 1, 1, "", "WrapPyTorchMetric"], [84, 1, 1, "", "mIOU"], [84, 2, 1, "", "metric_registry"]], "neural_compressor.experimental.metric.metric.Accuracy": [[84, 4, 1, "", "label_list"], [84, 4, 1, "", "pred_list"], [84, 4, 1, "", "sample"]], "neural_compressor.experimental.metric.metric.GeneralTopK": [[84, 4, 1, "", "k"], [84, 4, 1, "", "num_correct"], [84, 4, 1, "", "num_sample"]], "neural_compressor.experimental.metric.metric.Loss": [[84, 4, 1, "", "sample"], [84, 4, 1, "", "sum"]], "neural_compressor.experimental.metric.metric.MAE": [[84, 4, 1, "", "compare_label"], [84, 4, 1, "", "label_list"], [84, 4, 1, "", "pred_list"]], "neural_compressor.experimental.metric.metric.METRICS": [[84, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.MSE": [[84, 4, 1, "", "compare_label"], [84, 4, 1, "", "label_list"], [84, 4, 1, "", "pred_list"]], "neural_compressor.experimental.metric.metric.MXNetMetrics": [[84, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTITMetrics": [[84, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics": [[84, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.PyTorchMetrics": [[84, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.RMSE": [[84, 4, 1, "", "mse"]], "neural_compressor.experimental.metric.metric.TensorflowMetrics": [[84, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.TensorflowTopK": [[84, 4, 1, "", "k"], [84, 4, 1, "", "num_correct"], [84, 4, 1, "", "num_sample"]], "neural_compressor.experimental.mixed_precision": [[85, 1, 1, "", "MixedPrecision"]], "neural_compressor.experimental.model_conversion": [[86, 1, 1, "", "ModelConversion"]], "neural_compressor.experimental.nas": [[87, 0, 0, "-", "basic_nas"], [88, 0, 0, "-", "dynas"], [90, 0, 0, "-", "nas"], [91, 0, 0, "-", "nas_utils"], [92, 0, 0, "-", "search_algorithms"]], "neural_compressor.experimental.nas.basic_nas": [[87, 1, 1, "", "BasicNAS"]], "neural_compressor.experimental.nas.dynas": [[88, 1, 1, "", "DyNAS"]], "neural_compressor.experimental.nas.nas": [[90, 1, 1, "", "NAS"], [90, 1, 1, "", "NASBase"]], "neural_compressor.experimental.nas.nas_utils": [[91, 2, 1, "", "create_search_space_pool"], [91, 2, 1, "", "find_pareto_front"], [91, 2, 1, "", "nas_registry"]], "neural_compressor.experimental.nas.search_algorithms": [[92, 1, 1, "", "BayesianOptimizationSearcher"], [92, 1, 1, "", "GridSearcher"], [92, 1, 1, "", "RandomSearcher"], [92, 1, 1, "", "Searcher"]], "neural_compressor.experimental.pruner_legacy": [[93, 0, 0, "-", "gradient_sensitivity"], [94, 0, 0, "-", "group_lasso"], [96, 0, 0, "-", "magnitude"], [97, 0, 0, "-", "pattern_lock"], [98, 0, 0, "-", "pruner"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[93, 1, 1, "", "GradientSensitivityPruner"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[94, 1, 1, "", "GroupLassoPruner"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[96, 1, 1, "", "BasicMagnitudePruner"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[97, 1, 1, "", "PatternLockPruner"]], "neural_compressor.experimental.pruner_legacy.pruner": [[98, 1, 1, "", "Pruner"], [98, 2, 1, "", "pruner_registry"]], "neural_compressor.experimental.pruning": [[99, 1, 1, "", "Pruning"], [99, 1, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning.Pruning": [[99, 4, 1, "", "conf"], [99, 4, 1, "", "pruners"]], "neural_compressor.experimental.pruning_recipes": [[101, 0, 0, "-", "patterns"]], "neural_compressor.experimental.pruning_recipes.patterns": [[102, 0, 0, "-", "pattern"], [103, 0, 0, "-", "tile_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[102, 1, 1, "", "PATTERNS"], [102, 1, 1, "", "PatternBase"], [102, 2, 1, "", "pattern_registry"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS": [[102, 4, 1, "", "patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[103, 1, 1, "", "TilePatternBase"], [103, 1, 1, "", "TilePattern_1x1"], [103, 1, 1, "", "TilePattern_1x16"], [103, 1, 1, "", "TilePattern_1x2"], [103, 1, 1, "", "TilePattern_2x2"], [103, 1, 1, "", "TilePattern_4x1"]], "neural_compressor.experimental.pruning_v2": [[104, 1, 1, "", "Pruning"], [104, 1, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning_v2.Pruning": [[104, 4, 1, "", "conf"], [104, 4, 1, "", "pruners"]], "neural_compressor.experimental.pytorch_pruner": [[106, 0, 0, "-", "logger"], [107, 0, 0, "-", "patterns"], [108, 0, 0, "-", "prune_utils"], [109, 0, 0, "-", "pruner"], [110, 0, 0, "-", "pruning"], [111, 0, 0, "-", "scheduler"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[107, 1, 1, "", "Pattern"], [107, 1, 1, "", "PatternNInM"], [107, 1, 1, "", "PatternNxM"], [107, 2, 1, "", "get_pattern"], [107, 2, 1, "", "register_pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.Pattern": [[107, 4, 1, "", "is_global"], [107, 4, 1, "", "pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM": [[107, 4, 1, "", "M"], [107, 4, 1, "", "N"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM": [[107, 4, 1, "", "block_size"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[108, 2, 1, "", "check_config"], [108, 2, 1, "", "parse_not_to_prune"], [108, 2, 1, "", "parse_to_prune"], [108, 2, 1, "", "process_and_check_config"], [108, 2, 1, "", "process_config"], [108, 2, 1, "", "reset_non_value_to_default"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[109, 1, 1, "", "MagnitudePruner"], [109, 1, 1, "", "PatternLockPruner"], [109, 1, 1, "", "Pruner"], [109, 1, 1, "", "SnipMomentumPruner"], [109, 1, 1, "", "SnipPruner"], [109, 2, 1, "", "get_pruner"], [109, 2, 1, "", "register_pruners"]], "neural_compressor.experimental.pytorch_pruner.pruner.Pruner": [[109, 4, 1, "", "config"], [109, 4, 1, "", "current_sparsity_ratio"], [109, 4, 1, "", "end_step"], [109, 4, 1, "", "global_step"], [109, 4, 1, "", "masks"], [109, 4, 1, "", "max_sparsity_ratio_per_layer"], [109, 4, 1, "", "modules"], [109, 4, 1, "", "pattern"], [109, 4, 1, "", "scheduler"], [109, 4, 1, "", "scores"], [109, 4, 1, "", "start_step"], [109, 4, 1, "", "target_sparsity_ratio"], [109, 4, 1, "", "update_frequency_on_step"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[110, 1, 1, "", "Pruning"]], "neural_compressor.experimental.pytorch_pruner.pruning.Pruning": [[110, 4, 1, "", "config_file_path"], [110, 4, 1, "", "model"], [110, 4, 1, "", "pruner_info"], [110, 4, 1, "", "pruners"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[111, 1, 1, "", "IterativeScheduler"], [111, 1, 1, "", "OneshotScheduler"], [111, 1, 1, "", "Scheduler"], [111, 2, 1, "", "get_scheduler"], [111, 2, 1, "", "register_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler": [[111, 4, 1, "", "config"]], "neural_compressor.experimental.quantization": [[112, 1, 1, "", "Quantization"]], "neural_compressor.experimental.scheduler": [[113, 1, 1, "", "Scheduler"]], "neural_compressor.experimental.strategy": [[114, 0, 0, "-", "auto_mixed_precision"], [115, 0, 0, "-", "basic"], [116, 0, 0, "-", "bayesian"], [117, 0, 0, "-", "exhaustive"], [119, 0, 0, "-", "mse"], [120, 0, 0, "-", "mse_v2"], [121, 0, 0, "-", "random"], [122, 0, 0, "-", "strategy"], [124, 0, 0, "-", "utils"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[114, 1, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.experimental.strategy.basic": [[115, 1, 1, "", "BasicTuneStrategy"]], "neural_compressor.experimental.strategy.bayesian": [[116, 1, 1, "", "BayesianOptimization"], [116, 1, 1, "", "BayesianTuneStrategy"], [116, 1, 1, "", "TargetSpace"], [116, 2, 1, "", "acq_max"]], "neural_compressor.experimental.strategy.exhaustive": [[117, 1, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.experimental.strategy.mse": [[119, 1, 1, "", "MSETuneStrategy"]], "neural_compressor.experimental.strategy.mse_v2": [[120, 1, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.experimental.strategy.random": [[121, 1, 1, "", "RandomTuneStrategy"]], "neural_compressor.experimental.strategy.strategy": [[122, 1, 1, "", "TuneStrategy"], [122, 2, 1, "", "strategy_registry"]], "neural_compressor.experimental.strategy.utils": [[123, 0, 0, "-", "constant"], [125, 0, 0, "-", "tuning_sampler"], [126, 0, 0, "-", "tuning_space"], [127, 0, 0, "-", "tuning_structs"], [128, 0, 0, "-", "utility"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[125, 1, 1, "", "FallbackTuningSampler"], [125, 1, 1, "", "ModelWiseTuningSampler"], [125, 1, 1, "", "OpTypeWiseTuningSampler"], [125, 1, 1, "", "OpWiseTuningSampler"], [125, 1, 1, "", "SmoothQuantSampler"], [125, 1, 1, "", "TuningOrder"], [125, 1, 1, "", "TuningSampler"], [125, 1, 1, "", "TuningSamplerRegistry"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[126, 1, 1, "", "TuningItem"], [126, 1, 1, "", "TuningSpace"], [126, 2, 1, "", "initial_tuning_cfg_with_quant_mode"], [126, 2, 1, "", "pattern_to_internal"], [126, 2, 1, "", "pattern_to_path"], [126, 2, 1, "", "quant_mode_from_pattern"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[127, 1, 1, "", "OpTuningConfig"]], "neural_compressor.experimental.strategy.utils.utility": [[128, 1, 1, "", "OrderedDefaultDict"], [128, 2, 1, "", "extract_data_type"], [128, 2, 1, "", "get_adaptor_name"], [128, 2, 1, "", "reverted_data_type"]], "neural_compressor.metric": [[130, 0, 0, "-", "bleu"], [131, 0, 0, "-", "bleu_util"], [132, 0, 0, "-", "coco_label_map"], [133, 0, 0, "-", "coco_tools"], [134, 0, 0, "-", "evaluate_squad"], [135, 0, 0, "-", "f1"], [137, 0, 0, "-", "metric"]], "neural_compressor.metric.bleu": [[130, 1, 1, "", "BLEU"], [130, 1, 1, "", "UnicodeRegex"], [130, 2, 1, "", "bleu_tokenize"]], "neural_compressor.metric.bleu.BLEU": [[130, 4, 1, "", "labels"], [130, 4, 1, "", "predictions"]], "neural_compressor.metric.bleu.UnicodeRegex": [[130, 4, 1, "", "nondigit_punct_re"], [130, 4, 1, "", "punct_nondigit_re"], [130, 4, 1, "", "symbol_re"]], "neural_compressor.metric.bleu_util": [[131, 2, 1, "", "compute_bleu"]], "neural_compressor.metric.coco_tools": [[133, 1, 1, "", "COCOEvalWrapper"], [133, 1, 1, "", "COCOWrapper"], [133, 2, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [133, 2, 1, "", "ExportSingleImageDetectionMasksToCoco"], [133, 2, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.metric.coco_tools.COCOWrapper": [[133, 4, 1, "", "dataset"], [133, 4, 1, "", "detection_type"]], "neural_compressor.metric.evaluate_squad": [[134, 2, 1, "", "evaluate"], [134, 2, 1, "", "exact_match_score"], [134, 2, 1, "", "f1_score"], [134, 2, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[135, 2, 1, "", "evaluate"], [135, 2, 1, "", "f1_score"], [135, 2, 1, "", "metric_max_over_ground_truths"], [135, 2, 1, "", "normalize_answer"]], "neural_compressor.metric.metric": [[137, 1, 1, "", "Accuracy"], [137, 1, 1, "", "BaseMetric"], [137, 1, 1, "", "COCOmAPv2"], [137, 1, 1, "", "F1"], [137, 1, 1, "", "GeneralTopK"], [137, 1, 1, "", "Loss"], [137, 1, 1, "", "MAE"], [137, 1, 1, "", "METRICS"], [137, 1, 1, "", "MSE"], [137, 1, 1, "", "MXNetMetrics"], [137, 1, 1, "", "Metric"], [137, 1, 1, "", "ONNXRTGLUE"], [137, 1, 1, "", "ONNXRTITMetrics"], [137, 1, 1, "", "ONNXRTQLMetrics"], [137, 1, 1, "", "PyTorchLoss"], [137, 1, 1, "", "PyTorchMetrics"], [137, 1, 1, "", "RMSE"], [137, 1, 1, "", "ROC"], [137, 1, 1, "", "SquadF1"], [137, 1, 1, "", "TensorflowCOCOMAP"], [137, 1, 1, "", "TensorflowMAP"], [137, 1, 1, "", "TensorflowMetrics"], [137, 1, 1, "", "TensorflowTopK"], [137, 1, 1, "", "TensorflowVOCMAP"], [137, 1, 1, "", "WrapMXNetMetric"], [137, 1, 1, "", "WrapONNXRTMetric"], [137, 1, 1, "", "WrapPyTorchMetric"], [137, 1, 1, "", "mIOU"], [137, 2, 1, "", "metric_registry"], [137, 2, 1, "", "register_customer_metric"]], "neural_compressor.metric.metric.Accuracy": [[137, 4, 1, "", "label_list"], [137, 4, 1, "", "pred_list"], [137, 4, 1, "", "sample"]], "neural_compressor.metric.metric.GeneralTopK": [[137, 4, 1, "", "k"], [137, 4, 1, "", "num_correct"], [137, 4, 1, "", "num_sample"]], "neural_compressor.metric.metric.Loss": [[137, 4, 1, "", "sample"], [137, 4, 1, "", "sum"]], "neural_compressor.metric.metric.MAE": [[137, 4, 1, "", "compare_label"], [137, 4, 1, "", "label_list"], [137, 4, 1, "", "pred_list"]], "neural_compressor.metric.metric.METRICS": [[137, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.MSE": [[137, 4, 1, "", "compare_label"], [137, 4, 1, "", "label_list"], [137, 4, 1, "", "pred_list"]], "neural_compressor.metric.metric.MXNetMetrics": [[137, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTITMetrics": [[137, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTQLMetrics": [[137, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.PyTorchMetrics": [[137, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.RMSE": [[137, 4, 1, "", "mse"]], "neural_compressor.metric.metric.TensorflowMetrics": [[137, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.TensorflowTopK": [[137, 4, 1, "", "k"], [137, 4, 1, "", "num_correct"], [137, 4, 1, "", "num_sample"]], "neural_compressor.mix_precision": [[138, 2, 1, "", "fit"]], "neural_compressor.model": [[139, 0, 0, "-", "base_model"], [141, 0, 0, "-", "keras_model"], [142, 0, 0, "-", "model"], [143, 0, 0, "-", "mxnet_model"], [144, 0, 0, "-", "nets_factory"], [145, 0, 0, "-", "onnx_model"], [146, 0, 0, "-", "tensorflow_model"], [147, 0, 0, "-", "torch_model"]], "neural_compressor.model.base_model": [[139, 1, 1, "", "BaseModel"]], "neural_compressor.model.keras_model": [[141, 1, 1, "", "KerasModel"]], "neural_compressor.model.model": [[142, 1, 1, "", "Model"], [142, 2, 1, "", "get_model_fwk_name"]], "neural_compressor.model.mxnet_model": [[143, 1, 1, "", "MXNetModel"]], "neural_compressor.model.nets_factory": [[144, 1, 1, "", "TFSlimNetsFactory"]], "neural_compressor.model.onnx_model": [[145, 1, 1, "", "ONNXModel"]], "neural_compressor.model.tensorflow_model": [[146, 1, 1, "", "TensorflowBaseModel"], [146, 1, 1, "", "TensorflowCheckpointModel"], [146, 1, 1, "", "TensorflowLLMModel"], [146, 1, 1, "", "TensorflowModel"], [146, 1, 1, "", "TensorflowQATModel"], [146, 1, 1, "", "TensorflowSavedModelModel"], [146, 2, 1, "", "checkpoint_session"], [146, 2, 1, "", "estimator_session"], [146, 2, 1, "", "frozen_pb_session"], [146, 2, 1, "", "get_model_type"], [146, 2, 1, "", "graph_def_session"], [146, 2, 1, "", "graph_session"], [146, 2, 1, "", "keras_session"], [146, 2, 1, "", "load_saved_model"], [146, 2, 1, "", "saved_model_session"], [146, 2, 1, "", "slim_session"], [146, 2, 1, "", "try_loading_keras"], [146, 2, 1, "", "validate_and_inference_input_output"], [146, 2, 1, "", "validate_graph_node"]], "neural_compressor.model.torch_model": [[147, 1, 1, "", "IPEXModel"], [147, 1, 1, "", "PyTorchBaseModel"], [147, 1, 1, "", "PyTorchFXModel"], [147, 1, 1, "", "PyTorchModel"]], "neural_compressor.objective": [[148, 1, 1, "", "Accuracy"], [148, 1, 1, "", "Footprint"], [148, 1, 1, "", "ModelSize"], [148, 1, 1, "", "MultiObjective"], [148, 1, 1, "", "Objective"], [148, 1, 1, "", "Performance"], [148, 2, 1, "", "objective_custom_registry"], [148, 2, 1, "", "objective_registry"]], "neural_compressor.quantization": [[150, 2, 1, "", "fit"]], "neural_compressor.strategy": [[151, 0, 0, "-", "auto"], [152, 0, 0, "-", "auto_mixed_precision"], [153, 0, 0, "-", "basic"], [154, 0, 0, "-", "bayesian"], [155, 0, 0, "-", "conservative"], [156, 0, 0, "-", "exhaustive"], [157, 0, 0, "-", "hawq_v2"], [159, 0, 0, "-", "mse"], [160, 0, 0, "-", "mse_v2"], [161, 0, 0, "-", "random"], [162, 0, 0, "-", "strategy"], [164, 0, 0, "-", "utils"]], "neural_compressor.strategy.auto": [[151, 1, 1, "", "AutoTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[152, 1, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.basic": [[153, 1, 1, "", "BasicTuneStrategy"]], "neural_compressor.strategy.bayesian": [[154, 1, 1, "", "BayesianOptimization"], [154, 1, 1, "", "BayesianTuneStrategy"], [154, 1, 1, "", "TargetSpace"], [154, 2, 1, "", "acq_max"]], "neural_compressor.strategy.conservative": [[155, 1, 1, "", "ConservativeTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[156, 1, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[157, 1, 1, "", "HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.mse": [[159, 1, 1, "", "MSETuneStrategy"]], "neural_compressor.strategy.mse_v2": [[160, 1, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.strategy.random": [[161, 1, 1, "", "RandomTuneStrategy"]], "neural_compressor.strategy.strategy": [[162, 1, 1, "", "TuneStrategy"], [162, 1, 1, "", "TuneStrategyMeta"], [162, 2, 1, "", "strategy_registry"]], "neural_compressor.strategy.utils": [[163, 0, 0, "-", "constant"], [165, 0, 0, "-", "tuning_sampler"], [166, 0, 0, "-", "tuning_space"], [167, 0, 0, "-", "tuning_structs"], [168, 0, 0, "-", "utility"]], "neural_compressor.strategy.utils.tuning_sampler": [[165, 1, 1, "", "BlockFallbackTuningSampler"], [165, 1, 1, "", "FallbackTuningSampler"], [165, 1, 1, "", "LowerBitsSampler"], [165, 1, 1, "", "ModelWiseTuningSampler"], [165, 1, 1, "", "OpTypeWiseTuningSampler"], [165, 1, 1, "", "OpWiseTuningSampler"], [165, 1, 1, "", "SmoothQuantSampler"], [165, 1, 1, "", "TuningOrder"], [165, 1, 1, "", "TuningSampler"], [165, 1, 1, "", "WeightOnlyQuantSampler"]], "neural_compressor.strategy.utils.tuning_space": [[166, 1, 1, "", "TuningItem"], [166, 1, 1, "", "TuningSpace"], [166, 2, 1, "", "initial_tuning_cfg_with_quant_mode"], [166, 2, 1, "", "pattern_to_internal"], [166, 2, 1, "", "pattern_to_path"], [166, 2, 1, "", "quant_mode_from_pattern"]], "neural_compressor.strategy.utils.tuning_structs": [[167, 1, 1, "", "OpTuningConfig"]], "neural_compressor.strategy.utils.utility": [[168, 1, 1, "", "ClassRegister"], [168, 1, 1, "", "OrderedDefaultDict"], [168, 1, 1, "", "QuantOptions"], [168, 1, 1, "", "QuantType"], [168, 2, 1, "", "build_slave_faker_model"], [168, 2, 1, "", "extract_data_type"], [168, 2, 1, "", "get_adaptor_name"], [168, 2, 1, "", "preprocess_user_cfg"], [168, 2, 1, "", "reverted_data_type"]], "neural_compressor.training": [[169, 1, 1, "", "CallBacks"], [169, 1, 1, "", "CompressionManager"], [169, 2, 1, "", "fit"], [169, 2, 1, "", "prepare_compression"]], "neural_compressor.utils": [[170, 0, 0, "-", "collect_layer_histogram"], [171, 0, 0, "-", "constant"], [172, 0, 0, "-", "create_obj_from_config"], [174, 0, 0, "-", "kl_divergence"], [175, 0, 0, "-", "load_huggingface"], [176, 0, 0, "-", "logger"], [177, 0, 0, "-", "neural_insights_utils"], [178, 0, 0, "-", "options"], [179, 0, 0, "-", "pytorch"], [180, 0, 0, "-", "utility"], [181, 0, 0, "-", "weights_details"]], "neural_compressor.utils.collect_layer_histogram": [[170, 1, 1, "", "LayerHistogramCollector"]], "neural_compressor.utils.create_obj_from_config": [[172, 2, 1, "", "create_dataloader"], [172, 2, 1, "", "create_dataset"], [172, 2, 1, "", "create_eval_func"], [172, 2, 1, "", "create_train_func"], [172, 2, 1, "", "get_algorithm"], [172, 2, 1, "", "get_func_from_config"], [172, 2, 1, "", "get_metrics"], [172, 2, 1, "", "get_postprocess"], [172, 2, 1, "", "get_preprocess"]], "neural_compressor.utils.kl_divergence": [[174, 1, 1, "", "KL_Divergence"]], "neural_compressor.utils.load_huggingface": [[175, 1, 1, "", "OptimizedModel"], [175, 2, 1, "", "export_compressed_model"], [175, 2, 1, "", "save_for_huggingface_upstream"]], "neural_compressor.utils.logger": [[176, 1, 1, "", "Logger"], [176, 2, 1, "", "debug"], [176, 2, 1, "", "error"], [176, 2, 1, "", "fatal"], [176, 2, 1, "", "info"], [176, 2, 1, "", "log"], [176, 2, 1, "", "warn"], [176, 2, 1, "", "warning"]], "neural_compressor.utils.neural_insights_utils": [[177, 2, 1, "", "get_model_path"], [177, 2, 1, "", "register_neural_insights_workload"], [177, 2, 1, "", "update_neural_insights_workload"], [177, 2, 1, "", "update_neural_insights_workload_accuracy_data"]], "neural_compressor.utils.options": [[178, 1, 1, "", "onnxrt"]], "neural_compressor.utils.pytorch": [[179, 2, 1, "", "is_int8_model"], [179, 2, 1, "", "load"], [179, 2, 1, "", "load_weight_only"], [179, 2, 1, "", "recover_model_from_json"]], "neural_compressor.utils.utility": [[180, 1, 1, "", "CaptureOutputToFile"], [180, 1, 1, "", "CpuInfo"], [180, 2, 1, "", "Dequantize"], [180, 1, 1, "", "DotDict"], [180, 1, 1, "", "GLOBAL_STATE"], [180, 1, 1, "", "LazyImport"], [180, 1, 1, "", "MODE"], [180, 1, 1, "", "OpEntry"], [180, 1, 1, "", "Statistics"], [180, 2, 1, "", "alias_param"], [180, 2, 1, "", "calculate_mse"], [180, 2, 1, "", "check_key_exist"], [180, 2, 1, "", "combine_histogram"], [180, 2, 1, "", "compare_objects"], [180, 2, 1, "", "compute_sparsity"], [180, 2, 1, "", "dequantize_weight"], [180, 2, 1, "", "dump_class_attrs"], [180, 2, 1, "", "dump_data_to_local"], [180, 2, 1, "", "dump_elapsed_time"], [180, 2, 1, "", "dump_table"], [180, 2, 1, "", "dump_table_to_csv"], [180, 2, 1, "", "equal_dicts"], [180, 2, 1, "", "fault_tolerant_file"], [180, 2, 1, "", "get_all_fp32_data"], [180, 2, 1, "", "get_number_of_sockets"], [180, 2, 1, "", "get_op_list"], [180, 2, 1, "", "get_size"], [180, 2, 1, "", "get_tensor_histogram"], [180, 2, 1, "", "get_tensors_info"], [180, 2, 1, "", "get_tuning_history"], [180, 2, 1, "", "get_weights_details"], [180, 2, 1, "", "load_data_from_pkl"], [180, 2, 1, "", "mse_metric_gap"], [180, 2, 1, "", "print_op_list"], [180, 2, 1, "", "print_table"], [180, 2, 1, "", "recover"], [180, 2, 1, "", "set_random_seed"], [180, 2, 1, "", "set_resume_from"], [180, 2, 1, "", "set_tensorboard"], [180, 2, 1, "", "set_workspace"], [180, 2, 1, "", "show_memory_info"], [180, 2, 1, "", "singleton"], [180, 2, 1, "", "str2array"], [180, 2, 1, "", "time_limit"], [180, 2, 1, "", "version1_eq_version2"], [180, 2, 1, "", "version1_gt_version2"], [180, 2, 1, "", "version1_gte_version2"], [180, 2, 1, "", "version1_lt_version2"], [180, 2, 1, "", "version1_lte_version2"]], "neural_compressor.utils.weights_details": [[181, 1, 1, "", "WeightsDetails"], [181, 1, 1, "", "WeightsStatistics"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:function", "3": "py:data", "4": "py:attribute"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "function", "Python function"], "3": ["py", "data", "Python data"], "4": ["py", "attribute", "Python attribute"]}, "titleterms": {"block_mask": 0, "neural_compressor": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182], "algorithm": [1, 2, 3, 4, 5, 213, 279, 282, 285], "class": [1, 2, 4, 5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 24, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 38, 42, 43, 44, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 66, 68, 69, 70, 75, 77, 80, 84, 85, 86, 87, 88, 90, 92, 93, 94, 96, 97, 98, 99, 102, 103, 104, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 125, 126, 127, 128, 130, 133, 137, 139, 141, 142, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 165, 166, 167, 168, 169, 170, 174, 175, 176, 178, 180, 181, 195, 264], "function": [1, 6, 12, 14, 21, 27, 28, 29, 30, 34, 35, 37, 46, 54, 56, 63, 68, 69, 72, 73, 74, 77, 78, 80, 81, 82, 84, 91, 98, 102, 107, 108, 109, 111, 116, 122, 126, 128, 130, 131, 133, 134, 135, 137, 138, 142, 146, 148, 150, 154, 162, 166, 168, 169, 172, 175, 176, 177, 179, 180, 221], "modul": [1, 2, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 24, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 42, 43, 44, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 66, 68, 69, 70, 72, 73, 74, 75, 77, 78, 80, 81, 82, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 96, 97, 98, 99, 102, 103, 104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 125, 126, 127, 128, 130, 131, 133, 134, 135, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 165, 166, 167, 168, 169, 170, 172, 174, 175, 176, 177, 178, 179, 180, 181], "content": [1, 2, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 24, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 42, 43, 44, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 66, 68, 69, 70, 72, 73, 74, 75, 77, 78, 80, 81, 82, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 96, 97, 98, 99, 102, 103, 104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 125, 126, 127, 128, 130, 131, 133, 134, 135, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 165, 166, 167, 168, 169, 170, 172, 174, 175, 176, 177, 178, 179, 180, 181, 194, 264], "fast_bias_correct": 2, "submodul": [3, 9, 18, 22, 25, 32, 41, 48, 60, 64, 67, 71, 76, 83, 89, 95, 101, 105, 118, 124, 129, 136, 140, 158, 164, 173], "smooth_quant": 4, "weight_correct": 5, "benchmark": [6, 29, 203, 212, 218, 233, 275], "config": [7, 205, 216, 271], "contrib": [8, 9, 10, 11, 40, 41, 42, 43], "subpackag": [8, 23, 40, 65, 76, 100, 118, 129, 158], "strategi": [9, 10, 11, 41, 42, 43, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 210, 281, 285], "sigopt": [10, 42, 281, 285], "tpe": [11, 43, 285], "data": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 196, 197, 218, 222, 258], "dataset": [12, 13, 14, 15, 16, 17, 18, 19, 54, 55, 56, 57, 58, 59, 60, 61, 216, 218, 227, 259], "bert_dataset": [12, 54], "coco_dataset": [13, 55], "attribut": [14, 56, 189], "dummy_dataset": [15, 57], "dummy_dataset_v2": [16, 58], "imagenet_dataset": [17, 59], "style_transfer_dataset": [19, 61], "filter": [20, 21, 22, 62, 63, 64], "coco_filt": [20, 62], "transform": [24, 25, 26, 27, 28, 66, 67, 68, 69, 227, 284], "imagenet_transform": [24, 66], "postprocess": [26, 36], "token": [27, 68], "experiment": [29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128], "common": [30, 31, 32, 33, 34, 35, 36, 37, 191, 224], "criterion": 30, "dataload": [31, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 215, 216], "metric": [33, 77, 78, 79, 80, 81, 82, 83, 84, 130, 131, 132, 133, 134, 135, 136, 137, 227, 232], "model": [34, 139, 140, 141, 142, 143, 144, 145, 146, 147, 186, 196, 207, 223, 226, 229, 231, 233, 235, 236, 243, 257, 258, 259, 267, 268, 269, 273, 277, 279, 282, 288], "optim": [35, 244, 254, 264, 267, 268, 269, 272, 273, 286], "torch_util": 37, "compon": 38, "compress": [39, 204, 279], "base_dataload": 44, "default_dataload": 46, "fetcher": 47, "mxnet_dataload": 49, "onnxrt_dataload": 50, "pytorch_dataload": 51, "sampler": 52, "tensorflow_dataload": 53, "distil": [70, 219, 220, 233, 275, 288], "export": [71, 72, 73, 74, 223, 279], "qlinear2qdq": 72, "tf2onnx": 73, "torch2onnx": 74, "graph_optim": 75, "bleu": [77, 130], "bleu_util": [78, 131], "coco_label_map": [79, 132], "coco_tool": [80, 133], "evaluate_squad": [81, 134], "f1": [82, 135], "mixed_precis": 85, "model_convers": 86, "na": [87, 88, 89, 90, 91, 92, 192, 275], "basic_na": 87, "dyna": 88, "nas_util": 91, "search_algorithm": 92, "pruner_legaci": [93, 94, 95, 96, 97, 98], "gradient_sensit": 93, "group_lasso": 94, "magnitud": 96, "pattern_lock": 97, "pruner": [98, 109], "prune": [99, 110, 233, 273, 275, 288], "pruning_recip": [100, 101, 102, 103], "pattern": [101, 102, 103, 107, 273], "tile_pattern": 103, "pruning_v2": 104, "pytorch_prun": [105, 106, 107, 108, 109, 110, 111], "logger": [106, 176, 214], "prune_util": 108, "schedul": [111, 113, 273], "quantiz": [112, 150, 183, 185, 187, 191, 194, 196, 197, 209, 213, 218, 220, 223, 226, 229, 231, 233, 234, 236, 243, 254, 256, 257, 258, 259, 267, 268, 269, 275, 276, 277, 278, 279, 282, 288], "auto_mixed_precis": [114, 152], "basic": [115, 153, 192, 285], "bayesian": [116, 154, 285], "exhaust": [117, 156, 285], "mse": [119, 159, 285], "mse_v2": [120, 160, 285], "random": [121, 161, 285], "util": [123, 124, 125, 126, 127, 128, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 200], "constant": [123, 163, 171], "tuning_sampl": [125, 165], "tuning_spac": [126, 166], "tuning_struct": [127, 167], "mix_precis": 138, "base_model": 139, "keras_model": 141, "mxnet_model": 143, "nets_factori": 144, "onnx_model": 145, "tensorflow_model": 146, "torch_model": 147, "object": [148, 208, 267, 268, 269, 271], "profil": [149, 218], "auto": [151, 184, 248, 254, 278, 282, 285], "conserv": [155, 285], "hawq_v2": [157, 285], "train": [169, 185, 187, 191, 211, 221, 233, 273, 276], "collect_layer_histogram": 170, "create_obj_from_config": 172, "kl_diverg": 174, "load_huggingfac": 175, "neural_insights_util": 177, "option": [178, 221, 242], "pytorch": [179, 186, 187, 216, 221, 223, 232, 258, 276, 277, 278, 283, 284, 288], "weights_detail": 181, "version": 182, "tensorflow": [183, 185, 186, 187, 216, 221, 223, 232, 276, 278, 283, 284, 288], "introduct": [183, 184, 185, 187, 191, 192, 195, 196, 197, 212, 213, 215, 216, 218, 219, 220, 221, 223, 225, 228, 232, 234, 235, 236, 254, 257, 258, 259, 271, 272, 273, 275, 276, 277, 279, 281, 282, 283, 284, 285, 287], "get": [183, 191, 192, 194, 195, 212, 215, 216, 218, 219, 220, 221, 225, 226, 232, 234, 236, 237, 248, 255, 256, 260, 261, 262, 263, 271, 272, 273, 275, 276, 283, 287], "start": [183, 191, 192, 194, 195, 212, 215, 216, 218, 219, 220, 221, 225, 226, 232, 234, 236, 237, 238, 242, 248, 256, 260, 261, 262, 267, 268, 269, 271, 272, 273, 275, 276, 283, 287], "without": 183, "accuraci": [183, 187, 231, 234, 257, 259, 276, 285], "awar": [183, 187, 191, 233, 273, 276], "tune": [183, 184, 187, 197, 276, 279, 282, 285], "With": 183, "specifi": [183, 276], "rule": [183, 214, 276], "exampl": [183, 184, 191, 192, 195, 201, 212, 215, 216, 218, 219, 220, 221, 222, 223, 232, 233, 234, 235, 236, 239, 243, 256, 257, 258, 259, 261, 266, 267, 268, 269, 271, 272, 273, 276, 277, 279, 282, 283, 288], "smooth": [184, 185, 187, 282], "quant": [184, 187, 282], "usag": [184, 192, 243, 254, 263, 282, 283, 285], "us": [184, 197, 215, 232, 261, 262, 282], "fix": [184, 282], "alpha": [184, 282], "determin": [184, 282], "through": [184, 229, 282, 288], "api": [185, 192, 195, 196, 201, 202, 212, 215, 216, 219, 220, 221, 226, 227, 232, 234, 236, 237, 241, 255, 256, 263, 269, 271, 272, 273, 275, 286], "support": [185, 190, 191, 192, 195, 197, 212, 213, 215, 216, 218, 219, 220, 221, 223, 225, 228, 229, 232, 234, 235, 236, 238, 239, 243, 244, 271, 272, 273, 275, 276, 277, 279, 282, 283, 284, 287], "matrix": [185, 191, 192, 195, 212, 213, 215, 216, 218, 219, 220, 221, 223, 225, 228, 232, 234, 235, 236, 239, 271, 272, 273, 275, 276, 277, 279, 282, 283, 287], "scheme": [185, 187, 276], "approach": [185, 187, 276], "post": [185, 187, 191, 233, 263, 276], "static": [185, 187, 191, 194, 276], "backend": [185, 195, 276], "devic": [185, 276], "autotun": 186, "overview": [186, 190, 264, 286], "how": [186, 196, 197, 218, 257, 258, 259, 261], "work": [186, 187, 195, 261, 276], "fundament": [187, 276, 282], "ipex": [187, 276], "dynam": [187, 191, 192, 276], "flow": [187, 195, 276], "woq": [187, 279, 288], "intel": [188, 194, 215, 218, 228, 229, 232, 233, 240, 248, 254, 289], "neural": [188, 191, 192, 194, 215, 218, 228, 229, 232, 233, 237, 241, 243, 248, 254, 256, 257, 258, 259, 261, 262, 263, 267, 268, 269, 273, 281, 286, 289], "compressor": [188, 191, 194, 215, 218, 228, 229, 232, 233, 248, 254, 281, 289], "document": [188, 194, 201, 289], "section": [188, 289], "contributor": [189, 190], "coven": [189, 190], "code": [189, 190, 192, 214, 233, 255, 260, 279, 286], "conduct": [189, 190], "our": [189, 282], "pledg": 189, "standard": 189, "respons": [189, 263], "scope": [189, 273], "enforc": 189, "contribut": [190, 247, 251], "guidelin": 190, "creat": [190, 260], "pull": 190, "request": [190, 234, 265], "step": [190, 256, 257, 258, 259], "checklist": 190, "templat": 190, "accept": 190, "criteria": [190, 273, 285], "statu": [190, 262, 263], "check": 190, "fx": 191, "mode": [191, 288], "note": [191, 280], "detail": 191, "problem": 191, "architectur": [192, 217, 228, 229], "search": [192, 254], "1": [192, 221, 224, 227, 233, 254, 261, 262, 274, 288], "python": [192, 215, 226, 232, 237, 241, 242, 249, 252, 256, 275, 286], "yaml": [192, 196, 216, 221, 225, 287], "2": [192, 221, 224, 227, 233, 254, 261, 262, 288], "onli": [192, 194, 279], "advanc": [192, 260, 286], "custom": [192, 215, 232, 267, 285], "secur": [193, 221], "polici": [193, 285], "report": 193, "vulner": 193, "what": [194, 237, 255, 261], "": [194, 229, 255, 261], "new": [194, 195, 197, 249, 252, 285], "instal": [194, 218, 229, 238, 240, 247, 248, 251, 256, 261, 262], "from": [194, 196, 229, 233, 256, 261, 262], "pypi": [194, 243, 256], "weight": [194, 257, 258, 259, 279], "llm": [194, 231], "non": 194, "select": [194, 248], "public": [194, 214, 274], "event": [194, 274], "addit": 194, "commun": 194, "adaptor": [195, 196, 198], "queri": [195, 262, 267, 268, 269], "background": [195, 214, 254], "ad": 195, "capabl": [195, 279], "implement": [195, 196], "onnxrtadaptor": 195, "add": [196, 262], "an": [196, 267, 268, 269], "list": [196, 222, 266, 284], "need": 196, "design": [196, 217, 264, 285], "framework": [196, 215, 216, 223, 225, 235, 236, 275, 277, 279, 282], "query_fw_cap": 196, "accord": [196, 197], "tune_cfg": 196, "prepar": [196, 218, 257, 258, 259, 281], "calibr": [196, 213], "fp32": [196, 223], "graph": 196, "run": [196, 218, 255, 257, 258, 259, 260], "sampl": [196, 226], "iter": 196, "oper": [196, 197], "calcul": 196, "rang": 196, "gener": 196, "type": [197, 214, 273], "like": 197, "int4": 197, "few": 197, "line": 197, "chang": [197, 227, 253, 255, 280], "defin": [197, 221], "abil": 197, "specif": [197, 216], "invok": 197, "kernel": 197, "configur": [197, 221, 225, 260, 275, 281, 287], "summari": [197, 257], "onnx": [199, 229, 276, 277, 288], "runtim": [199, 229, 276, 277, 288], "torch": [200, 288], "mix": [206, 233, 234, 278], "precis": [206, 233, 234, 278], "refer": [213, 214, 236, 273, 276, 279, 282], "inc": 214, "convent": 214, "import": 214, "string": 214, "annot": 214, "comment": 214, "todo": 214, "intern": 214, "interfac": 214, "folder": [214, 255], "structur": 214, "recommend": 214, "v": [214, 255], "set": [214, 218, 240, 254], "json": 214, "build": [215, 224, 232, 260, 261, 262], "mxnet": [216, 232, 276, 284], "onnxrt": [216, 232, 284], "file": [216, 225, 287], "user": [216, 221, 227, 275, 279, 286, 287], "workflow": [217, 264], "diagnosi": [218, 256], "featur": [218, 221, 225, 228, 243, 244, 248, 275, 276, 283, 287], "modifi": 218, "script": [218, 260], "see": 218, "do": [218, 237], "paramet": [218, 263], "descript": [218, 263, 265], "suggest": 218, "fallback": 218, "knowledg": [219, 288], "intermedi": 219, "layer": [219, 277, 282], "self": 219, "distribut": [221, 243, 285], "infer": 221, "evalu": 221, "pure": 221, "horovodrun": 221, "execut": 221, "releas": [222, 249, 252, 280], "int8": [223, 288], "appendix": 223, "op": 223, "frequent": 224, "ask": 224, "question": 224, "issu": [224, 280], "3": [224, 238, 254], "4": [224, 245, 254, 274], "quick": [226, 242], "valid": [226, 229, 282, 288], "incompat": [227, 280], "between": 227, "v1": 227, "face": [227, 268, 269], "built": [227, 229, 232], "infrastructur": 228, "prerequisit": [229, 261, 262], "binari": 229, "sourc": [229, 256, 258, 259, 261, 262], "ai": 229, "kit": 229, "system": 229, "requir": [229, 247, 251, 257, 258, 259, 267], "hardwar": [229, 234, 288], "environ": [229, 240], "cpu": [229, 240, 288], "base": [229, 263, 286], "64": 229, "compat": 229, "processor": 229, "gpu": 229, "xe": 229, "multipl": [229, 271, 288], "vendor": 229, "softwar": [229, 234], "legal": 230, "inform": 230, "licens": 230, "citat": 230, "trademark": 230, "recip": [231, 276], "larg": [231, 273], "languag": [231, 273], "migrat": 233, "x": 233, "orchestr": [233, 272], "bf16": 234, "fp16": 234, "dure": [234, 278], "driven": 234, "microsc": 236, "coder": [237, 241, 243, 254, 286], "we": 237, "offer": 237, "jupyt": [237, 238, 249, 252], "lab": [237, 238], "extens": [237, 247, 248, 251, 254, 255, 264], "launcher": [237, 242], "contact": [237, 261], "aw": 238, "amazon": 238, "sagemak": 238, "For": 238, "studio": 238, "notebook": 238, "instanc": 238, "guid": [238, 286], "bigdl": 239, "nano": 239, "platform": [240, 281], "best": [240, 248], "perform": [240, 281], "mkl": 240, "openmp": 240, "jemalloc": 240, "numa": 240, "control": 240, "variabl": 240, "frequenc": 240, "govern": 240, "enabl": [241, 248, 254], "bench": 241, "superbench": 241, "argument": 242, "v0": 245, "highlight": 245, "other": 245, "changelog": [246, 250], "neural_compressor_ext_lab": [247, 249], "uninstal": [247, 251], "develop": [247, 251], "packag": [247, 249, 251, 252], "jupyterlab": 248, "Or": 248, "let": 248, "u": 248, "help": 248, "you": 248, "pre": 248, "requisit": 248, "make": [249, 252, 255, 260], "manual": [249, 252], "npm": [249, 252, 260], "autom": [249, 252], "publish": [249, 252], "conda": [249, 252], "forg": [249, 252], "neural_compressor_ext_lab_alibaba": [251, 252], "log": [253, 262, 263], "unreleas": 253, "vscode": 254, "open": [254, 259], "icon": 254, "5": 254, "welcom": 255, "your": 255, "setup": 255, "up": 255, "straight": 255, "awai": 255, "explor": 255, "test": [255, 260], "go": 255, "further": 255, "insight": [256, 257, 258, 259], "tensor": [256, 282], "dump": [256, 258], "research": 256, "collabor": 256, "debug": [257, 259], "analyz": [257, 259, 260], "result": [257, 259, 267, 268, 269], "activ": 257, "histogram": 259, "react": 260, "app": 260, "avail": 260, "eject": 260, "learn": [260, 261], "more": [260, 261], "split": 260, "bundl": 260, "size": 260, "progress": 260, "web": 260, "deploy": [260, 273], "fail": 260, "minifi": 260, "solut": [261, 262, 263, 267, 268, 269], "why": 261, "doe": 261, "method": [261, 262], "pip": [261, 262], "end": [261, 267, 268, 269], "servic": [262, 264, 267, 268, 269], "submit": [262, 263, 267, 268, 269], "task": [262, 263, 265, 267, 268, 269], "stop": [262, 267, 268, 269], "inspect": 262, "manag": [262, 267, 268], "resourc": [262, 267, 268], "node": 262, "state": 262, "cluster": [262, 263], "remov": 262, "url": 263, "endpoint": 263, "task_id": 263, "websocket": 263, "screen": 263, "ping": 263, "download": [263, 267, 268], "doc": 264, "wip": 264, "oaa": 264, "definit": 264, "diagram": 264, "hug": [268, 269], "grpc": 269, "client": 270, "singl": 271, "One": 272, "shot": 272, "network": 273, "sparsiti": 273, "decai": 273, "regular": 273, "retrain": 273, "free": 273, "spars": 273, "hyperparamet": 273, "full": 274, "80": 274, "2024": 274, "2023": 274, "25": 274, "2022": 274, "35": 274, "2021": 274, "15": [274, 288], "2018": 274, "2020": 274, "style": 275, "access": 275, "wise": 277, "lwq": 277, "turn": 278, "off": 278, "known": 280, "benefit": 281, "comparison": 281, "differ": 281, "per": 282, "channel": 282, "matmul": 282, "limit": 282, "smoothquant": 282, "enhanc": 282, "engin": 282, "entir": 282, "each": 282, "block": 282, "tensorboard": 283, "space": 285, "exit": 285, "process": 285, "zero": 286, "topic": 286, "innov": 286, "product": 286, "0": 288, "ptq": 288, "qat": 288, "17": 288, "qdq": 288}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"block_mask": [[0, "module-block_mask"]], "neural_compressor.algorithm.algorithm": [[1, "module-neural_compressor.algorithm.algorithm"]], "Classes": [[1, "classes"], [2, "classes"], [4, "classes"], [5, "classes"], [7, "classes"], [10, "classes"], [11, "classes"], [12, "classes"], [13, "classes"], [14, "classes"], [15, "classes"], [16, "classes"], [17, "classes"], [19, "classes"], [20, "classes"], [21, "classes"], [24, "classes"], [26, "classes"], [27, "classes"], [28, "classes"], [29, "classes"], [30, "classes"], [31, "classes"], [33, "classes"], [34, "classes"], [35, "classes"], [36, "classes"], [38, "classes"], [42, "classes"], [43, "classes"], [44, "classes"], [46, "classes"], [47, "classes"], [49, "classes"], [50, "classes"], [51, "classes"], [52, "classes"], [53, "classes"], [54, "classes"], [55, "classes"], [56, "classes"], [57, "classes"], [58, "classes"], [59, "classes"], [61, "classes"], [62, "classes"], [63, "classes"], [66, "classes"], [68, "classes"], [69, "classes"], [70, "classes"], [75, "classes"], [77, "classes"], [80, "classes"], [84, "classes"], [85, "classes"], [86, "classes"], [87, "classes"], [88, "classes"], [90, "classes"], [92, "classes"], [93, "classes"], [94, "classes"], [96, "classes"], [97, "classes"], [98, "classes"], [99, "classes"], [102, "classes"], [103, "classes"], [104, "classes"], [107, "classes"], [109, "classes"], [110, "classes"], [111, "classes"], [112, "classes"], [113, "classes"], [114, "classes"], [115, "classes"], [116, "classes"], [117, "classes"], [119, "classes"], [120, "classes"], [121, "classes"], [122, "classes"], [125, "classes"], [126, "classes"], [127, "classes"], [128, "classes"], [130, "classes"], [133, "classes"], [137, "classes"], [139, "classes"], [141, "classes"], [142, "classes"], [143, "classes"], [144, "classes"], [145, "classes"], [146, "classes"], [147, "classes"], [148, "classes"], [151, "classes"], [152, "classes"], [153, "classes"], [154, "classes"], [155, "classes"], [156, "classes"], [157, "classes"], [159, "classes"], [160, "classes"], [161, "classes"], [162, "classes"], [165, "classes"], [166, "classes"], [167, "classes"], [168, "classes"], [169, "classes"], [170, "classes"], [174, "classes"], [175, "classes"], [176, "classes"], [178, "classes"], [180, "classes"], [181, "classes"]], "Functions": [[1, "functions"], [6, "functions"], [12, "functions"], [14, "functions"], [21, "functions"], [27, "functions"], [28, "functions"], [29, "functions"], [30, "functions"], [34, "functions"], [35, "functions"], [37, "functions"], [46, "functions"], [54, "functions"], [56, "functions"], [63, "functions"], [68, "functions"], [69, "functions"], [72, "functions"], [73, "functions"], [74, "functions"], [77, "functions"], [78, "functions"], [80, "functions"], [81, "functions"], [82, "functions"], [84, "functions"], [91, "functions"], [98, "functions"], [102, "functions"], [107, "functions"], [108, "functions"], [109, "functions"], [111, "functions"], [116, "functions"], [122, "functions"], [126, "functions"], [128, "functions"], [130, "functions"], [131, "functions"], [133, "functions"], [134, "functions"], [135, "functions"], [137, "functions"], [138, "functions"], [142, "functions"], [146, "functions"], [148, "functions"], [150, "functions"], [154, "functions"], [162, "functions"], [166, "functions"], [168, "functions"], [169, "functions"], [172, "functions"], [175, "functions"], [176, "functions"], [177, "functions"], [179, "functions"], [180, "functions"]], "Module Contents": [[1, "module-contents"], [2, "module-contents"], [4, "module-contents"], [5, "module-contents"], [6, "module-contents"], [7, "module-contents"], [10, "module-contents"], [11, "module-contents"], [12, "module-contents"], [13, "module-contents"], [14, "module-contents"], [15, "module-contents"], [16, "module-contents"], [17, "module-contents"], [19, "module-contents"], [20, "module-contents"], [21, "module-contents"], [24, "module-contents"], [26, "module-contents"], [27, "module-contents"], [28, "module-contents"], [29, "module-contents"], [30, "module-contents"], [31, "module-contents"], [33, "module-contents"], [34, "module-contents"], [35, "module-contents"], [36, "module-contents"], [37, "module-contents"], [38, "module-contents"], [42, "module-contents"], [43, "module-contents"], [44, "module-contents"], [46, "module-contents"], [47, "module-contents"], [49, "module-contents"], [50, "module-contents"], [51, "module-contents"], [52, "module-contents"], [53, "module-contents"], [54, "module-contents"], [55, "module-contents"], [56, "module-contents"], [57, "module-contents"], [58, "module-contents"], [59, "module-contents"], [61, "module-contents"], [62, "module-contents"], [63, "module-contents"], [66, "module-contents"], [68, "module-contents"], [69, "module-contents"], [70, "module-contents"], [72, "module-contents"], [73, "module-contents"], [74, "module-contents"], [75, "module-contents"], [77, "module-contents"], [78, "module-contents"], [80, "module-contents"], [81, "module-contents"], [82, "module-contents"], [84, "module-contents"], [85, "module-contents"], [86, "module-contents"], [87, "module-contents"], [88, "module-contents"], [90, "module-contents"], [91, "module-contents"], [92, "module-contents"], [93, "module-contents"], [94, "module-contents"], [96, "module-contents"], [97, "module-contents"], [98, "module-contents"], [99, "module-contents"], [102, "module-contents"], [103, "module-contents"], [104, "module-contents"], [107, "module-contents"], [108, "module-contents"], [109, "module-contents"], [110, "module-contents"], [111, "module-contents"], [112, "module-contents"], [113, "module-contents"], [114, "module-contents"], [115, "module-contents"], [116, "module-contents"], [117, "module-contents"], [119, "module-contents"], [120, "module-contents"], [121, "module-contents"], [122, "module-contents"], [125, "module-contents"], [126, "module-contents"], [127, "module-contents"], [128, "module-contents"], [130, "module-contents"], [131, "module-contents"], [133, "module-contents"], [134, "module-contents"], [135, "module-contents"], [137, "module-contents"], [138, "module-contents"], [139, "module-contents"], [141, "module-contents"], [142, "module-contents"], [143, "module-contents"], [144, "module-contents"], [145, "module-contents"], [146, "module-contents"], [147, "module-contents"], [148, "module-contents"], [150, "module-contents"], [151, "module-contents"], [152, "module-contents"], [153, "module-contents"], [154, "module-contents"], [155, "module-contents"], [156, "module-contents"], [157, "module-contents"], [159, "module-contents"], [160, "module-contents"], [161, "module-contents"], [162, "module-contents"], [165, "module-contents"], [166, "module-contents"], [167, "module-contents"], [168, "module-contents"], [169, "module-contents"], [170, "module-contents"], [172, "module-contents"], [174, "module-contents"], [175, "module-contents"], [176, "module-contents"], [177, "module-contents"], [178, "module-contents"], [179, "module-contents"], [180, "module-contents"], [181, "module-contents"]], "neural_compressor.algorithm.fast_bias_correction": [[2, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[3, "module-neural_compressor.algorithm"]], "Submodules": [[3, "submodules"], [9, "submodules"], [18, "submodules"], [22, "submodules"], [25, "submodules"], [32, "submodules"], [41, "submodules"], [48, "submodules"], [60, "submodules"], [64, "submodules"], [67, "submodules"], [71, "submodules"], [76, "submodules"], [83, "submodules"], [89, "submodules"], [95, "submodules"], [101, "submodules"], [105, "submodules"], [118, "submodules"], [124, "submodules"], [129, "submodules"], [136, "submodules"], [140, "submodules"], [158, "submodules"], [164, "submodules"], [173, "submodules"]], "neural_compressor.algorithm.smooth_quant": [[4, "module-neural_compressor.algorithm.smooth_quant"]], "neural_compressor.algorithm.weight_correction": [[5, "module-neural_compressor.algorithm.weight_correction"]], "neural_compressor.benchmark": [[6, "module-neural_compressor.benchmark"]], "neural_compressor.config": [[7, "module-neural_compressor.config"]], "neural_compressor.contrib": [[8, "module-neural_compressor.contrib"]], "Subpackages": [[8, "subpackages"], [23, "subpackages"], [40, "subpackages"], [65, "subpackages"], [76, "subpackages"], [100, "subpackages"], [118, "subpackages"], [129, "subpackages"], [158, "subpackages"]], "neural_compressor.contrib.strategy": [[9, "module-neural_compressor.contrib.strategy"]], "neural_compressor.contrib.strategy.sigopt": [[10, "module-neural_compressor.contrib.strategy.sigopt"]], "neural_compressor.contrib.strategy.tpe": [[11, "module-neural_compressor.contrib.strategy.tpe"]], "neural_compressor.data.datasets.bert_dataset": [[12, "module-neural_compressor.data.datasets.bert_dataset"]], "neural_compressor.data.datasets.coco_dataset": [[13, "module-neural_compressor.data.datasets.coco_dataset"]], "neural_compressor.data.datasets.dataset": [[14, "module-neural_compressor.data.datasets.dataset"]], "Attributes": [[14, "attributes"], [56, "attributes"]], "neural_compressor.data.datasets.dummy_dataset": [[15, "module-neural_compressor.data.datasets.dummy_dataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[16, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "neural_compressor.data.datasets.imagenet_dataset": [[17, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[18, "module-neural_compressor.data.datasets"]], "neural_compressor.data.datasets.style_transfer_dataset": [[19, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "neural_compressor.data.filters.coco_filter": [[20, "module-neural_compressor.data.filters.coco_filter"]], "neural_compressor.data.filters.filter": [[21, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[22, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[23, "module-neural_compressor.data"]], "neural_compressor.data.transforms.imagenet_transform": [[24, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[25, "module-neural_compressor.data.transforms"]], "neural_compressor.data.transforms.postprocess": [[26, "module-neural_compressor.data.transforms.postprocess"]], "neural_compressor.data.transforms.tokenization": [[27, "module-neural_compressor.data.transforms.tokenization"]], "neural_compressor.data.transforms.transform": [[28, "module-neural_compressor.data.transforms.transform"]], "neural_compressor.experimental.benchmark": [[29, "module-neural_compressor.experimental.benchmark"]], "neural_compressor.experimental.common.criterion": [[30, "module-neural_compressor.experimental.common.criterion"]], "neural_compressor.experimental.common.dataloader": [[31, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[32, "module-neural_compressor.experimental.common"]], "neural_compressor.experimental.common.metric": [[33, "module-neural_compressor.experimental.common.metric"]], "neural_compressor.experimental.common.model": [[34, "module-neural_compressor.experimental.common.model"]], "neural_compressor.experimental.common.optimizer": [[35, "module-neural_compressor.experimental.common.optimizer"]], "neural_compressor.experimental.common.postprocess": [[36, "module-neural_compressor.experimental.common.postprocess"]], "neural_compressor.experimental.common.torch_utils": [[37, "module-neural_compressor.experimental.common.torch_utils"]], "neural_compressor.experimental.component": [[38, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.compression": [[39, "module-neural_compressor.experimental.compression"]], "neural_compressor.experimental.contrib": [[40, "module-neural_compressor.experimental.contrib"]], "neural_compressor.experimental.contrib.strategy": [[41, "module-neural_compressor.experimental.contrib.strategy"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[42, "module-neural_compressor.experimental.contrib.strategy.sigopt"]], "neural_compressor.experimental.contrib.strategy.tpe": [[43, "module-neural_compressor.experimental.contrib.strategy.tpe"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[44, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[45, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[46, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[47, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[48, "module-neural_compressor.experimental.data.dataloaders"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[49, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[50, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[51, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[52, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[53, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[54, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[55, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "neural_compressor.experimental.data.datasets.dataset": [[56, "module-neural_compressor.experimental.data.datasets.dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[57, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[58, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[59, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[60, "module-neural_compressor.experimental.data.datasets"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[61, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "neural_compressor.experimental.data.filters.coco_filter": [[62, "module-neural_compressor.experimental.data.filters.coco_filter"]], "neural_compressor.experimental.data.filters.filter": [[63, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[64, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[65, "module-neural_compressor.experimental.data"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[66, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[67, "module-neural_compressor.experimental.data.transforms"]], "neural_compressor.experimental.data.transforms.tokenization": [[68, "module-neural_compressor.experimental.data.transforms.tokenization"]], "neural_compressor.experimental.data.transforms.transform": [[69, "module-neural_compressor.experimental.data.transforms.transform"]], "neural_compressor.experimental.distillation": [[70, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[71, "module-neural_compressor.experimental.export"]], "neural_compressor.experimental.export.qlinear2qdq": [[72, "module-neural_compressor.experimental.export.qlinear2qdq"]], "neural_compressor.experimental.export.tf2onnx": [[73, "module-neural_compressor.experimental.export.tf2onnx"]], "neural_compressor.experimental.export.torch2onnx": [[74, "module-neural_compressor.experimental.export.torch2onnx"]], "neural_compressor.experimental.graph_optimization": [[75, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[76, "module-neural_compressor.experimental"]], "neural_compressor.experimental.metric.bleu": [[77, "module-neural_compressor.experimental.metric.bleu"]], "neural_compressor.experimental.metric.bleu_util": [[78, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[79, "module-neural_compressor.experimental.metric.coco_label_map"]], "neural_compressor.experimental.metric.coco_tools": [[80, "module-neural_compressor.experimental.metric.coco_tools"]], "neural_compressor.experimental.metric.evaluate_squad": [[81, "module-neural_compressor.experimental.metric.evaluate_squad"]], "neural_compressor.experimental.metric.f1": [[82, "module-neural_compressor.experimental.metric.f1"]], "neural_compressor.experimental.metric": [[83, "module-neural_compressor.experimental.metric"]], "neural_compressor.experimental.metric.metric": [[84, "module-neural_compressor.experimental.metric.metric"]], "neural_compressor.experimental.mixed_precision": [[85, "module-neural_compressor.experimental.mixed_precision"]], "neural_compressor.experimental.model_conversion": [[86, "module-neural_compressor.experimental.model_conversion"]], "neural_compressor.experimental.nas.basic_nas": [[87, "module-neural_compressor.experimental.nas.basic_nas"]], "neural_compressor.experimental.nas.dynas": [[88, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas": [[89, "module-neural_compressor.experimental.nas"]], "neural_compressor.experimental.nas.nas": [[90, "module-neural_compressor.experimental.nas.nas"]], "neural_compressor.experimental.nas.nas_utils": [[91, "module-neural_compressor.experimental.nas.nas_utils"]], "neural_compressor.experimental.nas.search_algorithms": [[92, "module-neural_compressor.experimental.nas.search_algorithms"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[93, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[94, "module-neural_compressor.experimental.pruner_legacy.group_lasso"]], "neural_compressor.experimental.pruner_legacy": [[95, "module-neural_compressor.experimental.pruner_legacy"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[96, "module-neural_compressor.experimental.pruner_legacy.magnitude"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[97, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"]], "neural_compressor.experimental.pruner_legacy.pruner": [[98, "module-neural_compressor.experimental.pruner_legacy.pruner"]], "neural_compressor.experimental.pruning": [[99, "module-neural_compressor.experimental.pruning"]], "neural_compressor.experimental.pruning_recipes": [[100, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[101, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[102, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[103, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "neural_compressor.experimental.pruning_v2": [[104, "module-neural_compressor.experimental.pruning_v2"]], "neural_compressor.experimental.pytorch_pruner": [[105, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[106, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[107, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[108, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[109, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[110, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[111, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "neural_compressor.experimental.quantization": [[112, "module-neural_compressor.experimental.quantization"]], "neural_compressor.experimental.scheduler": [[113, "module-neural_compressor.experimental.scheduler"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[114, "module-neural_compressor.experimental.strategy.auto_mixed_precision"]], "neural_compressor.experimental.strategy.basic": [[115, "module-neural_compressor.experimental.strategy.basic"]], "neural_compressor.experimental.strategy.bayesian": [[116, "module-neural_compressor.experimental.strategy.bayesian"]], "neural_compressor.experimental.strategy.exhaustive": [[117, "module-neural_compressor.experimental.strategy.exhaustive"]], "neural_compressor.experimental.strategy": [[118, "module-neural_compressor.experimental.strategy"]], "neural_compressor.experimental.strategy.mse": [[119, "module-neural_compressor.experimental.strategy.mse"]], "neural_compressor.experimental.strategy.mse_v2": [[120, "module-neural_compressor.experimental.strategy.mse_v2"]], "neural_compressor.experimental.strategy.random": [[121, "module-neural_compressor.experimental.strategy.random"]], "neural_compressor.experimental.strategy.strategy": [[122, "module-neural_compressor.experimental.strategy.strategy"]], "neural_compressor.experimental.strategy.utils.constant": [[123, "module-neural_compressor.experimental.strategy.utils.constant"]], "neural_compressor.experimental.strategy.utils": [[124, "module-neural_compressor.experimental.strategy.utils"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[125, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[126, "module-neural_compressor.experimental.strategy.utils.tuning_space"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[127, "module-neural_compressor.experimental.strategy.utils.tuning_structs"]], "neural_compressor.experimental.strategy.utils.utility": [[128, "module-neural_compressor.experimental.strategy.utils.utility"]], "neural_compressor": [[129, "module-neural_compressor"]], "neural_compressor.metric.bleu": [[130, "module-neural_compressor.metric.bleu"]], "neural_compressor.metric.bleu_util": [[131, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[132, "module-neural_compressor.metric.coco_label_map"]], "neural_compressor.metric.coco_tools": [[133, "module-neural_compressor.metric.coco_tools"]], "neural_compressor.metric.evaluate_squad": [[134, "module-neural_compressor.metric.evaluate_squad"]], "neural_compressor.metric.f1": [[135, "module-neural_compressor.metric.f1"]], "neural_compressor.metric": [[136, "module-neural_compressor.metric"]], "neural_compressor.metric.metric": [[137, "module-neural_compressor.metric.metric"]], "neural_compressor.mix_precision": [[138, "module-neural_compressor.mix_precision"]], "neural_compressor.model.base_model": [[139, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[140, "module-neural_compressor.model"]], "neural_compressor.model.keras_model": [[141, "module-neural_compressor.model.keras_model"]], "neural_compressor.model.model": [[142, "module-neural_compressor.model.model"]], "neural_compressor.model.mxnet_model": [[143, "module-neural_compressor.model.mxnet_model"]], "neural_compressor.model.nets_factory": [[144, "module-neural_compressor.model.nets_factory"]], "neural_compressor.model.onnx_model": [[145, "module-neural_compressor.model.onnx_model"]], "neural_compressor.model.tensorflow_model": [[146, "module-neural_compressor.model.tensorflow_model"]], "neural_compressor.model.torch_model": [[147, "module-neural_compressor.model.torch_model"]], "neural_compressor.objective": [[148, "module-neural_compressor.objective"]], "neural_compressor.profiling": [[149, "module-neural_compressor.profiling"]], "neural_compressor.quantization": [[150, "module-neural_compressor.quantization"]], "neural_compressor.strategy.auto": [[151, "module-neural_compressor.strategy.auto"]], "neural_compressor.strategy.auto_mixed_precision": [[152, "module-neural_compressor.strategy.auto_mixed_precision"]], "neural_compressor.strategy.basic": [[153, "module-neural_compressor.strategy.basic"]], "neural_compressor.strategy.bayesian": [[154, "module-neural_compressor.strategy.bayesian"]], "neural_compressor.strategy.conservative": [[155, "module-neural_compressor.strategy.conservative"]], "neural_compressor.strategy.exhaustive": [[156, "module-neural_compressor.strategy.exhaustive"]], "neural_compressor.strategy.hawq_v2": [[157, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[158, "module-neural_compressor.strategy"]], "neural_compressor.strategy.mse": [[159, "module-neural_compressor.strategy.mse"]], "neural_compressor.strategy.mse_v2": [[160, "module-neural_compressor.strategy.mse_v2"]], "neural_compressor.strategy.random": [[161, "module-neural_compressor.strategy.random"]], "neural_compressor.strategy.strategy": [[162, "module-neural_compressor.strategy.strategy"]], "neural_compressor.strategy.utils.constant": [[163, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[164, "module-neural_compressor.strategy.utils"]], "neural_compressor.strategy.utils.tuning_sampler": [[165, "module-neural_compressor.strategy.utils.tuning_sampler"]], "neural_compressor.strategy.utils.tuning_space": [[166, "module-neural_compressor.strategy.utils.tuning_space"]], "neural_compressor.strategy.utils.tuning_structs": [[167, "module-neural_compressor.strategy.utils.tuning_structs"]], "neural_compressor.strategy.utils.utility": [[168, "module-neural_compressor.strategy.utils.utility"]], "neural_compressor.training": [[169, "module-neural_compressor.training"]], "neural_compressor.utils.collect_layer_histogram": [[170, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[171, "module-neural_compressor.utils.constant"]], "neural_compressor.utils.create_obj_from_config": [[172, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[173, "module-neural_compressor.utils"]], "neural_compressor.utils.kl_divergence": [[174, "module-neural_compressor.utils.kl_divergence"]], "neural_compressor.utils.load_huggingface": [[175, "module-neural_compressor.utils.load_huggingface"]], "neural_compressor.utils.logger": [[176, "module-neural_compressor.utils.logger"]], "neural_compressor.utils.neural_insights_utils": [[177, "module-neural_compressor.utils.neural_insights_utils"]], "neural_compressor.utils.options": [[178, "module-neural_compressor.utils.options"]], "neural_compressor.utils.pytorch": [[179, "module-neural_compressor.utils.pytorch"]], "neural_compressor.utils.utility": [[180, "module-neural_compressor.utils.utility"]], "neural_compressor.utils.weights_details": [[181, "module-neural_compressor.utils.weights_details"]], "neural_compressor.version": [[182, "module-neural_compressor.version"]], "TensorFlow Quantization": [[183, "tensorflow-quantization"]], "Introduction": [[183, "introduction"], [184, "introduction"], [185, "introduction"], [191, "introduction"], [192, "introduction"], [195, "introduction"], [196, "introduction"], [197, "introduction"], [212, "introduction"], [213, "introduction"], [215, "introduction"], [216, "introduction"], [219, "introduction"], [220, "introduction"], [221, "introduction"], [223, "introduction"], [225, "introduction"], [228, "introduction"], [232, "introduction"], [234, "introduction"], [235, "introduction"], [236, "introduction"], [257, "introduction"], [258, "introduction"], [259, "introduction"], [271, "introduction"], [272, "introduction"], [273, "introduction"], [275, "introduction"], [277, "introduction"], [279, "introduction"], [281, "introduction"], [282, "introduction"], [283, "introduction"], [284, "introduction"], [285, "introduction"], [287, "introduction"]], "Get Started": [[183, "get-started"], [191, "get-started"], [218, "get-started"], [261, "get-started"], [276, "get-started"]], "Without Accuracy Aware Tuning": [[183, "without-accuracy-aware-tuning"]], "With Accuracy Aware Tuning": [[183, "with-accuracy-aware-tuning"]], "Specify Quantization Rules": [[183, "specify-quantization-rules"], [276, "specify-quantization-rules"]], "Examples": [[183, "examples"], [184, "examples"], [191, "examples"], [192, "examples"], [212, "examples"], [215, "examples"], [216, "examples"], [219, "examples"], [220, "examples"], [221, "examples"], [222, "examples"], [223, "examples"], [233, "examples"], [234, "examples"], [235, "examples"], [236, "examples"], [272, "examples"], [273, "examples"], [276, "examples"], [277, "examples"], [279, "examples"], [283, "examples"]], "Smooth Quant": [[184, "smooth-quant"], [187, "smooth-quant"], [282, "smooth-quant"]], "Usage": [[184, "usage"], [243, "usage"], [263, "usage"], [263, "id2"], [263, "id6"], [263, "id9"], [263, "id16"], [263, "id19"], [263, "id22"], [263, "id25"], [282, "usage"], [283, "usage"], [283, "id1"], [285, "usage"], [285, "id2"], [285, "id4"], [285, "id6"], [285, "id8"], [285, "id10"], [285, "id12"], [285, "id14"], [285, "id16"], [285, "id18"], [285, "id20"], [285, "id22"]], "Using a Fixed alpha": [[184, "using-a-fixed-alpha"]], "Determining the alpha through auto-tuning": [[184, "determining-the-alpha-through-auto-tuning"], [282, "determining-the-alpha-through-auto-tuning"]], "TensorFlow": [[185, "tensorflow"], [216, "tensorflow"], [232, "tensorflow"], [284, "tensorflow"]], "API for TensorFlow": [[185, "api-for-tensorflow"]], "Support Matrix": [[185, "support-matrix"], [213, "support-matrix"], [239, "support-matrix"]], "Quantization Scheme": [[185, "quantization-scheme"]], "Quantization Approaches": [[185, "quantization-approaches"], [187, "quantization-approaches"], [276, "quantization-approaches"]], "Post Training Static Quantization": [[185, "post-training-static-quantization"], [187, "post-training-static-quantization"], [191, "post-training-static-quantization"], [276, "post-training-static-quantization"]], "Smooth Quantization": [[185, "smooth-quantization"]], "Backend and Device": [[185, "backend-and-device"]], "AutoTune": [[186, "autotune"]], "Overview": [[186, "overview"], [264, "overview"], [286, "overview"]], "How it Works": [[186, "how-it-works"]], "Working with Autotune": [[186, "working-with-autotune"]], "Working with PyTorch Model": [[186, "working-with-pytorch-model"]], "Working with Tensorflow Model": [[186, "working-with-tensorflow-model"]], "Quantization": [[187, "quantization"], [209, "quantization"], [275, "quantization"], [276, "quantization"]], "Quantization Introduction": [[187, "quantization-introduction"], [276, "quantization-introduction"]], "Quantization Fundamentals": [[187, "quantization-fundamentals"], [276, "quantization-fundamentals"], [282, "quantization-fundamentals"]], "Quantization Scheme in TensorFlow": [[187, "quantization-scheme-in-tensorflow"], [276, "quantization-scheme-in-tensorflow"]], "Quantization Scheme in PyTorch": [[187, "quantization-scheme-in-pytorch"], [276, "quantization-scheme-in-pytorch"]], "Quantization Scheme in IPEX": [[187, "quantization-scheme-in-ipex"], [276, "quantization-scheme-in-ipex"]], "Post Training Dynamic Quantization": [[187, "post-training-dynamic-quantization"], [191, "post-training-dynamic-quantization"], [276, "post-training-dynamic-quantization"]], "Quantization Aware Training": [[187, "quantization-aware-training"], [233, "quantization-aware-training"], [276, "quantization-aware-training"], [276, "id1"]], "Accuracy Aware Tuning": [[187, "accuracy-aware-tuning"], [276, "accuracy-aware-tuning"]], "Working Flow": [[187, "working-flow"], [195, "working-flow"], [276, "working-flow"]], "WOQ": [[187, "woq"]], "Intel\u00ae Neural Compressor Documentation": [[188, "intel-neural-compressor-documentation"], [289, "intel-neural-compressor-documentation"]], "Sections": [[188, "sections"], [289, "sections"]], "Contributor Covenant Code of Conduct": [[189, "contributor-covenant-code-of-conduct"], [190, "contributor-covenant-code-of-conduct"]], "Our Pledge": [[189, "our-pledge"]], "Our Standards": [[189, "our-standards"]], "Our Responsibilities": [[189, "our-responsibilities"]], "Scope": [[189, "scope"]], "Enforcement": [[189, "enforcement"]], "Attribution": [[189, "attribution"]], "Contribution Guidelines": [[190, "contribution-guidelines"]], "Create Pull Request": [[190, "create-pull-request"]], "Step-by-Step guidelines": [[190, "step-by-step-guidelines"]], "Pull Request Checklist": [[190, "pull-request-checklist"]], "Pull Request Template": [[190, "pull-request-template"]], "Pull Request Acceptance Criteria": [[190, "pull-request-acceptance-criteria"]], "Pull Request Status Checks Overview": [[190, "pull-request-status-checks-overview"]], "Support": [[190, "support"]], "FX": [[191, "fx"]], "FX Mode Support Matrix in Neural Compressor": [[191, "fx-mode-support-matrix-in-neural-compressor"]], "Quantization-Aware Training": [[191, "quantization-aware-training"]], "Note": [[191, "note"]], "Details": [[191, "details"]], "Common Problem": [[191, "common-problem"]], "Dynamic Quantization": [[191, "dynamic-quantization"]], "Static Quantization & Quantization Aware Training": [[191, "static-quantization-quantization-aware-training"]], "Neural Architecture Search": [[192, "neural-architecture-search"]], "Basic NAS": [[192, "basic-nas"]], "Dynamic NAS": [[192, "dynamic-nas"]], "NAS Support Matrix": [[192, "nas-support-matrix"]], "Get Started with NAS API": [[192, "get-started-with-nas-api"]], "Basic Usage": [[192, "basic-usage"]], "1. Python code + YAML": [[192, "python-code-yaml"]], "2. Python code only": [[192, "python-code-only"]], "Advanced Usage (Custom NAS)": [[192, "advanced-usage-custom-nas"]], "Security Policy": [[193, "security-policy"]], "Report a Vulnerability": [[193, "report-a-vulnerability"]], "Intel\u00ae Neural Compressor": [[194, "intel-neural-compressor"], [254, "intel-neural-compressor"]], "What\u2019s New": [[194, "what-s-new"]], "Installation": [[194, "installation"], [229, "installation"], [229, "id1"], [248, "installation"], [256, "installation"], [261, "installation"]], "Install from pypi": [[194, "install-from-pypi"], [256, "install-from-pypi"]], "Getting Started": [[194, "getting-started"], [226, "getting-started"], [256, "getting-started"]], "Weight-Only Quantization (LLMs)": [[194, "weight-only-quantization-llms"]], "Static Quantization (Non-LLMs)": [[194, "static-quantization-non-llms"]], "Documentation": [[194, "documentation"]], "Selected Publications/Events": [[194, "selected-publications-events"]], "Additional Content": [[194, "additional-content"]], "Communication": [[194, "communication"]], "Adaptor": [[195, "adaptor"], [198, "adaptor"]], "Adaptor Support Matrix": [[195, "adaptor-support-matrix"]], "Get Started with Adaptor API": [[195, "get-started-with-adaptor-api"]], "Query API": [[195, "query-api"]], "Background": [[195, "background"], [214, "background"]], "Query API Introduction": [[195, "query-api-introduction"]], "Example of Adding a New Backend Support": [[195, "example-of-adding-a-new-backend-support"]], "Capability": [[195, "capability"]], "Implement ONNXRTAdaptor Class": [[195, "implement-onnxrtadaptor-class"]], "How to Add An Adaptor": [[196, "how-to-add-an-adaptor"]], "API List that Need to Implement": [[196, "api-list-that-need-to-implement"]], "Design the framework YAML": [[196, "design-the-framework-yaml"]], "Add query_fw_capability to Adaptor": [[196, "add-query-fw-capability-to-adaptor"]], "Add quantize API according to tune_cfg": [[196, "add-quantize-api-according-to-tune-cfg"]], "Prepare calibration model from fp32 graph": [[196, "prepare-calibration-model-from-fp32-graph"]], "Run sampling iterations of the fp32 graph to calibrate quantizable operators.": [[196, "run-sampling-iterations-of-the-fp32-graph-to-calibrate-quantizable-operators"]], "Calculate the data range and generate quantized model": [[196, "calculate-the-data-range-and-generate-quantized-model"]], "How to Support New Data Type, Like Int4, with a Few Line Changes": [[197, "how-to-support-new-data-type-like-int4-with-a-few-line-changes"]], "Define the Quantization Ability of the Specific Operator": [[197, "define-the-quantization-ability-of-the-specific-operator"]], "Invoke the Operator Kernel According to the Tuning Configuration": [[197, "invoke-the-operator-kernel-according-to-the-tuning-configuration"]], "Use the New Data Type": [[197, "use-the-new-data-type"]], "Summary": [[197, "summary"]], "ONNX Runtime": [[199, "onnx-runtime"]], "Torch Utils": [[200, "torch-utils"]], "API Document Example": [[201, "api-document-example"]], "APIs": [[202, "apis"]], "Benchmark": [[203, "benchmark"], [233, "benchmark"], [275, "benchmark"]], "Compression": [[204, "compression"]], "Config": [[205, "config"]], "Mix Precision": [[206, "mix-precision"], [233, "mix-precision"]], "Model": [[207, "model"], [235, "model"], [257, "model"], [259, "model"]], "Objective": [[208, "objective"], [267, "objective"], [268, "objective"], [269, "objective"], [271, "objective"]], "Strategy": [[210, "strategy"]], "Training": [[211, "training"]], "Benchmarking": [[212, "benchmarking"]], "Benchmark Support Matrix": [[212, "benchmark-support-matrix"]], "Get Started with Benchmark API": [[212, "get-started-with-benchmark-api"]], "Calibration Algorithms in Quantization": [[213, "calibration-algorithms-in-quantization"]], "Calibration Algorithms": [[213, "calibration-algorithms"]], "Reference": [[213, "reference"], [214, "reference"], [236, "reference"], [273, "reference"], [276, "reference"], [279, "reference"], [282, "reference"]], "INC Coding Conventions": [[214, "inc-coding-conventions"]], "Rules": [[214, "rules"]], "Imports": [[214, "imports"]], "Strings": [[214, "strings"]], "Logger": [[214, "logger"]], "Type Annotations": [[214, "type-annotations"]], "Comments": [[214, "comments"]], "TODO Comments": [[214, "todo-comments"]], "Public and Internal Interfaces": [[214, "public-and-internal-interfaces"]], "Folder structure": [[214, "folder-structure"]], "Recommend VS Code settings.json": [[214, "recommend-vs-code-settings-json"]], "DataLoader": [[215, "dataloader"]], "Supported Framework Dataloader Matrix": [[215, "supported-framework-dataloader-matrix"]], "Get Started with DataLoader": [[215, "get-started-with-dataloader"]], "Use Intel\u00ae Neural Compressor DataLoader API": [[215, "use-intel-neural-compressor-dataloader-api"]], "Build Custom Dataloader with Python API": [[215, "build-custom-dataloader-with-python-api"]], "Dataset": [[216, "dataset"]], "Supported Framework Dataset Matrix": [[216, "supported-framework-dataset-matrix"]], "PyTorch": [[216, "pytorch"], [232, "pytorch"], [278, "pytorch"]], "MXNet": [[216, "mxnet"], [232, "mxnet"], [284, "mxnet"]], "ONNXRT": [[216, "onnxrt"], [232, "onnxrt"], [284, "onnxrt"]], "Get start with Dataset API": [[216, "get-start-with-dataset-api"]], "Config dataloader in a yaml file": [[216, "config-dataloader-in-a-yaml-file"]], "User-specific dataset": [[216, "user-specific-dataset"]], "Design": [[217, "design"], [285, "design"], [285, "id1"], [285, "id3"], [285, "id5"], [285, "id7"], [285, "id9"], [285, "id11"], [285, "id13"], [285, "id15"], [285, "id17"], [285, "id19"], [285, "id21"]], "Architecture": [[217, "architecture"], [228, "architecture"]], "Workflow": [[217, "workflow"]], "Diagnosis": [[218, "diagnosis"]], "Diagnosis Introduction": [[218, "diagnosis-introduction"]], "Supported Feature Matrix": [[218, "supported-feature-matrix"], [221, "supported-feature-matrix"], [225, "supported-feature-matrix"], [228, "supported-feature-matrix"], [275, "supported-feature-matrix"], [276, "supported-feature-matrix"], [283, "supported-feature-matrix"], [287, "supported-feature-matrix"]], "Install Intel\u00ae Neural Compressor": [[218, "install-intel-neural-compressor"]], "Modify script": [[218, "modify-script"]], "Quantization diagnosis": [[218, "quantization-diagnosis"]], "Benchmark diagnosis": [[218, "benchmark-diagnosis"]], "Example": [[218, "example"], [232, "example"], [239, "example"], [243, "example"], [271, "example"]], "Prepare dataset": [[218, "prepare-dataset"]], "Run quantization script": [[218, "run-quantization-script"]], "Run benchmark script": [[218, "run-benchmark-script"]], "See quantization data": [[218, "see-quantization-data"]], "How to do diagnosis": [[218, "how-to-do-diagnosis"]], "Parameter description": [[218, "parameter-description"]], "Diagnosis suggestions": [[218, "diagnosis-suggestions"]], "Fallback setting example": [[218, "fallback-setting-example"]], "See profiling data": [[218, "see-profiling-data"]], "Distillation": [[219, "distillation"], [233, "distillation"], [275, "distillation"]], "Knowledge Distillation": [[219, "knowledge-distillation"]], "Intermediate Layer Knowledge Distillation": [[219, "intermediate-layer-knowledge-distillation"]], "Self Distillation": [[219, "self-distillation"]], "Distillation Support Matrix": [[219, "distillation-support-matrix"]], "Get Started with Distillation API": [[219, "get-started-with-distillation-api"]], "Distillation for Quantization": [[220, "distillation-for-quantization"]], "Distillation for Quantization Support Matrix": [[220, "distillation-for-quantization-support-matrix"]], "Get Started with Distillation for Quantization API": [[220, "get-started-with-distillation-for-quantization-api"]], "Distributed Training and Inference (Evaluation)": [[221, "distributed-training-and-inference-evaluation"]], "Get Started with Distributed Training and Inference API": [[221, "get-started-with-distributed-training-and-inference-api"]], "Option 1: Pure Yaml Configuration": [[221, "option-1-pure-yaml-configuration"]], "Option 2: User Defined Training Function": [[221, "option-2-user-defined-training-function"]], "Horovodrun Execution": [[221, "horovodrun-execution"]], "Security": [[221, "security"]], "PyTorch Examples:": [[221, "pytorch-examples"]], "TensorFlow Examples:": [[221, "tensorflow-examples"]], "Example List": [[222, "example-list"]], "Release Data": [[222, "release-data"]], "Export": [[223, "export"]], "Supported Framework Model Matrix": [[223, "supported-framework-model-matrix"], [235, "supported-framework-model-matrix"], [236, "supported-framework-model-matrix"], [277, "supported-framework-model-matrix"], [279, "supported-framework-model-matrix"]], "PyTorch Model": [[223, "pytorch-model"]], "FP32 Model Export": [[223, "fp32-model-export"], [223, "id1"]], "INT8 Model Export": [[223, "int8-model-export"], [223, "id2"]], "Tensorflow Model": [[223, "tensorflow-model"]], "Appendix": [[223, "appendix"]], "Supported quantized ops": [[223, "supported-quantized-ops"]], "Frequently Asked Questions": [[224, "frequently-asked-questions"]], "Common Build Issues": [[224, "common-build-issues"]], "Issue 1:": [[224, "issue-1"]], "Issue 2:": [[224, "issue-2"]], "Issue 3:": [[224, "issue-3"]], "Issue 4:": [[224, "issue-4"]], "Framework YAML Configuration Files": [[225, "framework-yaml-configuration-files"]], "Get started with Framework YAML Files": [[225, "get-started-with-framework-yaml-files"]], "Quick Samples": [[226, "quick-samples"]], "Quantization with Python API": [[226, "quantization-with-python-api"], [256, "quantization-with-python-api"]], "Validated Models": [[226, "validated-models"], [282, "validated-models"], [288, "validated-models"]], "Incompatible changes between v1.2 and v1.1": [[227, "incompatible-changes-between-v1-2-and-v1-1"]], "User-facing APIs": [[227, "user-facing-apis"]], "Built-in transform/dataset/metric APIs": [[227, "built-in-transform-dataset-metric-apis"]], "Infrastructure of Intel\u00ae Neural Compressor": [[228, "infrastructure-of-intel-neural-compressor"]], "Prerequisites": [[229, "prerequisites"], [261, "prerequisites"], [262, "prerequisites"]], "Install from Binary": [[229, "install-from-binary"]], "Install from Source": [[229, "install-from-source"], [256, "install-from-source"]], "Install from AI Kit": [[229, "install-from-ai-kit"]], "System Requirements": [[229, "system-requirements"]], "Validated Hardware Environment": [[229, "validated-hardware-environment"]], "Intel\u00ae Neural Compressor supports CPUs based on Intel 64 architecture or compatible processors:": [[229, "intel-neural-compressor-supports-cpus-based-on-intel-64-architecture-or-compatible-processors"]], "Intel\u00ae Neural Compressor supports GPUs built on Intel\u2019s Xe architecture:": [[229, "intel-neural-compressor-supports-gpus-built-on-intel-s-xe-architecture"]], "Intel\u00ae Neural Compressor quantized ONNX models support multiple hardware vendors through ONNX Runtime:": [[229, "intel-neural-compressor-quantized-onnx-models-support-multiple-hardware-vendors-through-onnx-runtime"]], "Validated Software Environment": [[229, "validated-software-environment"]], "Legal Information": [[230, "legal-information"]], "License": [[230, "license"]], "Citation": [[230, "citation"]], "Trademarks": [[230, "trademarks"]], "LLMs Quantization Recipes": [[231, "llms-quantization-recipes"]], "Large Language Models Recipes": [[231, "large-language-models-recipes"]], "Large Language Models Accuracy": [[231, "large-language-models-accuracy"]], "Metrics": [[232, "metrics"]], "Supported Built-in Metric Matrix": [[232, "supported-built-in-metric-matrix"]], "Get Started with Metric": [[232, "get-started-with-metric"]], "Use Intel\u00ae Neural Compressor Metric API": [[232, "use-intel-neural-compressor-metric-api"]], "Build Custom Metric with Python API": [[232, "build-custom-metric-with-python-api"]], "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X": [[233, "code-migration-from-intel-neural-compressor-1-x-to-intel-neural-compressor-2-x"]], "Model Quantization": [[233, "model-quantization"]], "Post-training Quantization": [[233, "post-training-quantization"]], "Pruning": [[233, "pruning"], [273, "pruning"], [275, "pruning"]], "Orchestration": [[233, "orchestration"]], "Mixed Precision": [[234, "mixed-precision"]], "Mixed Precision Support Matrix": [[234, "mixed-precision-support-matrix"]], "Hardware and Software requests for BF16": [[234, "hardware-and-software-requests-for-bf16"]], "Hardware and Software requests for FP16": [[234, "hardware-and-software-requests-for-fp16"]], "During quantization mixed precision": [[234, "during-quantization-mixed-precision"]], "Accuracy-driven mixed precision": [[234, "accuracy-driven-mixed-precision"]], "Get Started with Mixed Precision API": [[234, "get-started-with-mixed-precision-api"]], "Microscaling Quantization": [[236, "microscaling-quantization"]], "Get Started with Microscaling Quantization API": [[236, "get-started-with-microscaling-quantization-api"]], "Neural Coder": [[237, "neural-coder"], [254, "neural-coder"], [254, "id1"]], "What do we offer?": [[237, "what-do-we-offer"]], "Getting Started!": [[237, "getting-started"], [248, "getting-started"]], "Jupyter Lab Extension": [[237, "jupyter-lab-extension"]], "Python Launcher": [[237, "python-launcher"], [242, "python-launcher"]], "Python API": [[237, "python-api"]], "Contact": [[237, "contact"], [261, "contact"]], "AWS Amazon SageMaker Support": [[238, "aws-amazon-sagemaker-support"]], "Start Jupyter Lab 3": [[238, "start-jupyter-lab-3"]], "For SageMaker Studio": [[238, "for-sagemaker-studio"]], "For SageMaker Notebook instance": [[238, "for-sagemaker-notebook-instance"]], "Installation Guide": [[238, "installation-guide"]], "BigDL Nano Support": [[239, "bigdl-nano-support"]], "Intel CPU Platforms: Best Performance Setting": [[240, "intel-cpu-platforms-best-performance-setting"]], "Install MKL, OpenMP and JEMALLOC": [[240, "install-mkl-openmp-and-jemalloc"]], "Install NUMA Controller": [[240, "install-numa-controller"]], "Environment Variables": [[240, "environment-variables"]], "Frequency Governers": [[240, "frequency-governers"]], "Neural Coder as Python API": [[241, "neural-coder-as-python-api"]], "Enable": [[241, "enable"]], "Bench": [[241, "bench"]], "SuperBench": [[241, "superbench"]], "Quick-Start": [[242, "quick-start"]], "Launcher Arguments (Optional)": [[242, "launcher-arguments-optional"]], "Neural Coder for Quantization": [[243, "neural-coder-for-quantization"]], "Features Supported": [[243, "features-supported"]], "Models Supported": [[243, "models-supported"]], "PyPI distribution:": [[243, "pypi-distribution"]], "Supported Optimization Features": [[244, "supported-optimization-features"]], "v0.4": [[245, "v0-4"]], "Highlights": [[245, "highlights"]], "Others": [[245, "others"]], "Changelog": [[246, "changelog"], [250, "changelog"]], "neural_compressor_ext_lab": [[247, "neural-compressor-ext-lab"]], "Requirements": [[247, "requirements"], [251, "requirements"], [257, "requirements"], [258, "requirements"], [259, "requirements"], [267, "requirements"]], "Install": [[247, "install"]], "Uninstall": [[247, "uninstall"]], "Contributing": [[247, "contributing"], [251, "contributing"]], "Development install": [[247, "development-install"], [251, "development-install"]], "Development uninstall": [[247, "development-uninstall"], [251, "development-uninstall"]], "Packaging the extension": [[247, "packaging-the-extension"], [251, "packaging-the-extension"]], "Intel\u00ae Neural Compressor as JupyterLab Extension": [[248, "intel-neural-compressor-as-jupyterlab-extension"]], "Auto-enable a feature": [[248, "auto-enable-a-feature"]], "Or let us help you auto-select the best feature": [[248, "or-let-us-help-you-auto-select-the-best-feature"]], "Pre-requisites": [[248, "pre-requisites"]], "Making a new release of neural_compressor_ext_lab": [[249, "making-a-new-release-of-neural-compressor-ext-lab"]], "Manual release": [[249, "manual-release"], [252, "manual-release"]], "Python package": [[249, "python-package"], [252, "python-package"]], "NPM package": [[249, "npm-package"], [252, "npm-package"]], "Automated releases with the Jupyter Releaser": [[249, "automated-releases-with-the-jupyter-releaser"], [252, "automated-releases-with-the-jupyter-releaser"]], "Publishing to conda-forge": [[249, "publishing-to-conda-forge"], [252, "publishing-to-conda-forge"]], "neural_compressor_ext_lab_alibaba": [[251, "neural-compressor-ext-lab-alibaba"]], "Making a new release of neural_compressor_ext_lab_alibaba": [[252, "making-a-new-release-of-neural-compressor-ext-lab-alibaba"]], "Change Log": [[253, "change-log"]], "[Unreleased]": [[253, "unreleased"]], "Background Introduction": [[254, "background-introduction"]], "Neural Coder Extension in VSCode": [[254, "neural-coder-extension-in-vscode"]], "Neural Coder Extension Usage": [[254, "neural-coder-extension-usage"]], "1. Open": [[254, "open"]], "2. Search": [[254, "search"]], "3. Setting": [[254, "setting"]], "4. Icon": [[254, "icon"]], "5. optimization (quantization)": [[254, "optimization-quantization"]], "5.1 Enable": [[254, "enable"]], "5.2 Auto": [[254, "auto"]], "Welcome to your VS Code Extension": [[255, "welcome-to-your-vs-code-extension"]], "What\u2019s in the folder": [[255, "what-s-in-the-folder"]], "Setup": [[255, "setup"]], "Get up and running straight away": [[255, "get-up-and-running-straight-away"]], "Make changes": [[255, "make-changes"]], "Explore the API": [[255, "explore-the-api"]], "Run tests": [[255, "run-tests"]], "Go further": [[255, "go-further"]], "Neural Insights": [[256, "neural-insights"]], "Start the Neural Insights": [[256, "start-the-neural-insights"]], "Tensor dump examples": [[256, "tensor-dump-examples"]], "Step by Step Diagnosis Example": [[256, "step-by-step-diagnosis-example"]], "Research Collaborations": [[256, "research-collaborations"]], "Step by step example how to debug accuracy with Neural Insights": [[257, "step-by-step-example-how-to-debug-accuracy-with-neural-insights"], [259, "step-by-step-example-how-to-debug-accuracy-with-neural-insights"]], "Preparation": [[257, "preparation"], [258, "preparation"], [259, "preparation"], [281, "preparation"]], "Running the quantization": [[257, "running-the-quantization"], [258, "running-the-quantization"], [259, "running-the-quantization"]], "Analyzing the result of quantization": [[257, "analyzing-the-result-of-quantization"], [259, "analyzing-the-result-of-quantization"]], "Weights summary": [[257, "weights-summary"]], "Activations summary": [[257, "activations-summary"]], "Step by step example how to dump weights data for PyTorch model with Neural Insights": [[258, "step-by-step-example-how-to-dump-weights-data-for-pytorch-model-with-neural-insights"]], "Source": [[258, "source"], [259, "source"]], "Prepare the dataset": [[259, "prepare-the-dataset"]], "Analyzing weight histograms": [[259, "analyzing-weight-histograms"]], "Open Neural Insights": [[259, "open-neural-insights"]], "Getting Started with Create React App": [[260, "getting-started-with-create-react-app"]], "Available Scripts": [[260, "available-scripts"]], "npm start": [[260, "npm-start"]], "npm test": [[260, "npm-test"]], "npm run build": [[260, "npm-run-build"]], "npm run eject": [[260, "npm-run-eject"]], "Learn More": [[260, "learn-more"], [261, "learn-more"]], "Code Splitting": [[260, "code-splitting"]], "Analyzing the Bundle Size": [[260, "analyzing-the-bundle-size"]], "Making a Progressive Web App": [[260, "making-a-progressive-web-app"]], "Advanced Configuration": [[260, "advanced-configuration"]], "Deployment": [[260, "deployment"]], "npm run build fails to minify": [[260, "npm-run-build-fails-to-minify"]], "What\u2019s Neural Solution?": [[261, "what-s-neural-solution"]], "Why Neural Solution?": [[261, "why-neural-solution"]], "How does Neural Solution Work?": [[261, "how-does-neural-solution-work"]], "Method 1. Using pip:": [[261, "method-1-using-pip"]], "Method 2. Building from source:": [[261, "method-2-building-from-source"]], "End-to-end examples": [[261, "end-to-end-examples"]], "Get started": [[262, "get-started"]], "Install Neural Solution": [[262, "install-neural-solution"]], "Method 1. Using pip": [[262, "method-1-using-pip"]], "Method 2. Building from source": [[262, "method-2-building-from-source"]], "Start service": [[262, "start-service"]], "Submit task": [[262, "submit-task"]], "Query task status": [[262, "query-task-status"]], "Stop service": [[262, "stop-service"]], "Inspect logs": [[262, "inspect-logs"]], "Manage resource": [[262, "manage-resource"], [267, "manage-resource"], [268, "manage-resource"]], "Node States": [[262, "node-states"]], "Query cluster": [[262, "query-cluster"]], "Add node": [[262, "add-node"]], "Remove node": [[262, "remove-node"]], "Neural Solution API": [[263, "neural-solution-api"]], "Base URL": [[263, "base-url"]], "Endpoints": [[263, "endpoints"]], "GET /": [[263, "get"]], "Description": [[263, "description"], [263, "id1"], [263, "id4"], [263, "id8"], [263, "id12"], [263, "id15"], [263, "id18"], [263, "id21"], [263, "id24"]], "Responses": [[263, "responses"], [263, "id3"], [263, "id7"], [263, "id11"], [263, "id14"], [263, "id17"], [263, "id20"], [263, "id23"], [263, "id26"]], "POST /task/submit": [[263, "post-task-submit"]], "Parameters": [[263, "parameters"], [263, "id5"], [263, "id10"], [263, "id13"]], "GET /task/status/{task_id}": [[263, "get-task-status-task-id"]], "GET /task/log/{task_id}": [[263, "get-task-log-task-id"]], "WebSocket /task/screen/{task_id}": [[263, "websocket-task-screen-task-id"]], "GET /ping": [[263, "get-ping"]], "GET /cluster": [[263, "get-cluster"]], "GET /download/{task_id}": [[263, "get-download-task-id"]], "GET /description": [[263, "get-description"]], "Design Doc for Optimization as a Service [WIP]": [[264, "design-doc-for-optimization-as-a-service-wip"]], "Contents": [[264, "contents"]], "Workflow of OaaS": [[264, "workflow-of-oaas"]], "Class definition diagram": [[264, "class-definition-diagram"]], "Extensibility": [[264, "extensibility"]], "Task request description": [[265, "task-request-description"]], "Examples List": [[266, "examples-list"]], "An end-to-end example: quantize a custom model with Neural Solution": [[267, "an-end-to-end-example-quantize-a-custom-model-with-neural-solution"]], "Start the Neural Solution Service": [[267, "start-the-neural-solution-service"], [268, "start-the-neural-solution-service"], [269, "start-the-neural-solution-service"]], "Submit optimization task": [[267, "submit-optimization-task"], [268, "submit-optimization-task"], [269, "submit-optimization-task"]], "Query optimization result": [[267, "query-optimization-result"], [268, "query-optimization-result"], [269, "query-optimization-result"]], "Download optimized model": [[267, "download-optimized-model"], [268, "download-optimized-model"]], "Stop the service": [[267, "stop-the-service"], [268, "stop-the-service"], [269, "stop-the-service"]], "An end-to-end example: quantize a Hugging Face model with Neural Solution": [[268, "an-end-to-end-example-quantize-a-hugging-face-model-with-neural-solution"]], "An end-to-end example: quantize a Hugging Face model with Neural Solution gRPC API": [[269, "an-end-to-end-example-quantize-a-hugging-face-model-with-neural-solution-grpc-api"]], "Client": [[270, "client"]], "Single Objective": [[271, "single-objective"]], "Multiple Objectives": [[271, "multiple-objectives"]], "Objective Support Matrix": [[271, "objective-support-matrix"]], "Get Started with Objective API": [[271, "get-started-with-objective-api"]], "Config Single Objective": [[271, "config-single-objective"]], "Config Multiple Objectives": [[271, "config-multiple-objectives"]], "Optimization Orchestration": [[272, "optimization-orchestration"]], "One-shot": [[272, "one-shot"]], "Orchestration Support Matrix": [[272, "orchestration-support-matrix"]], "Get Started with Orchestration API": [[272, "get-started-with-orchestration-api"]], "Neural Network Pruning": [[273, "neural-network-pruning"]], "Pruning Patterns": [[273, "pruning-patterns"]], "Pruning Criteria": [[273, "pruning-criteria"]], "Pruning Types": [[273, "pruning-types"]], "Pruning Schedules": [[273, "pruning-schedules"]], "Pruning Scope": [[273, "pruning-scope"]], "Sparsity Decay Types": [[273, "sparsity-decay-types"]], "Regularization": [[273, "regularization"]], "Large Language Model Pruning": [[273, "large-language-model-pruning"]], "Pruning Support Matrix": [[273, "pruning-support-matrix"]], "Get Started with Pruning API": [[273, "get-started-with-pruning-api"]], "Training-aware pruning API": [[273, "training-aware-pruning-api"]], "Retrain-free Pruning API": [[273, "retrain-free-pruning-api"]], "Sparse Model Deployment": [[273, "sparse-model-deployment"]], "Pruning with Hyperparameter Optimization": [[273, "pruning-with-hyperparameter-optimization"]], "Full Publications/Events (80)": [[274, "full-publications-events-80"]], "2024 (1)": [[274, "id1"]], "2023 (25)": [[274, "id2"]], "2022 (35)": [[274, "id3"]], "2021 (15)": [[274, "id4"]], "2018 - 2020 (4)": [[274, "id5"]], "Pythonic Style Access for Configurations": [[275, "pythonic-style-access-for-configurations"]], "Pythonic API for User Configurations": [[275, "pythonic-api-for-user-configurations"], [275, "id1"]], "Pythonic API for Framework Configurations": [[275, "pythonic-api-for-framework-configurations"], [275, "id2"]], "Get Started with Pythonic API for Configurations": [[275, "get-started-with-pythonic-api-for-configurations"]], "NAS": [[275, "nas"]], "Quantization Support Matrix": [[276, "quantization-support-matrix"]], "Quantization Scheme in MXNet": [[276, "quantization-scheme-in-mxnet"]], "Quantization Scheme in ONNX Runtime": [[276, "quantization-scheme-in-onnx-runtime"]], "Post Training Quantization": [[276, "post-training-quantization"]], "Specify Quantization Recipes": [[276, "specify-quantization-recipes"]], "Specify Quantization Backend and Device": [[276, "specify-quantization-backend-and-device"]], "Layer Wise Quantization (LWQ)": [[277, "layer-wise-quantization-lwq"]], "PyTorch framework example": [[277, "pytorch-framework-example"]], "ONNX Runtime framework example": [[277, "onnx-runtime-framework-example"]], "Turn OFF Auto Mixed Precision during Quantization": [[278, "turn-off-auto-mixed-precision-during-quantization"]], "Tensorflow": [[278, "tensorflow"]], "Weight Only Quantization (WOQ)": [[279, "weight-only-quantization-woq"]], "Quantization Capability": [[279, "quantization-capability"]], "Export Compressed Model": [[279, "export-compressed-model"]], "User Code Example": [[279, "user-code-example"]], "WOQ Algorithms Tuning": [[279, "woq-algorithms-tuning"]], "User code example": [[279, "id1"]], "Release": [[280, "release"]], "Release Notes": [[280, "release-notes"]], "Known Issues": [[280, "known-issues"]], "Incompatible Changes": [[280, "incompatible-changes"]], "SigOpt Strategy": [[281, "sigopt-strategy"]], "SigOpt Platform": [[281, "sigopt-platform"]], "Neural Compressor Configuration": [[281, "neural-compressor-configuration"]], "Performance": [[281, "performance"]], "Benefit of SigOpt Strategy": [[281, "benefit-of-sigopt-strategy"]], "Performance Comparison of Different Strategies": [[281, "performance-comparison-of-different-strategies"]], "Per-tensor & Per-channel": [[282, "per-tensor-per-channel"]], "Per-tensor example": [[282, "per-tensor-example"]], "Per-channel example": [[282, "per-channel-example"]], "Matmul quantization example": [[282, "matmul-quantization-example"]], "Per-channel limitation": [[282, "per-channel-limitation"]], "SmoothQuant and Our Enhancement": [[282, "smoothquant-and-our-enhancement"]], "SmoothQuant": [[282, "smoothquant"]], "Our enhancement:": [[282, "our-enhancement"]], "Algorithm: Auto-tuning of $\\alpha$.": [[282, "algorithm-auto-tuning-of-alpha"]], "Engineering": [[282, "engineering"]], "Using a fixed alpha": [[282, "using-a-fixed-alpha"]], "Auto-tune the alpha for the entire model": [[282, "auto-tune-the-alpha-for-the-entire-model"]], "Auto-tune the alpha for each layer/block": [[282, "auto-tune-the-alpha-for-each-layer-block"]], "Supported Framework Matrix": [[282, "supported-framework-matrix"]], "TensorBoard": [[283, "tensorboard"]], "Get Started with TensorBoard": [[283, "get-started-with-tensorboard"]], "PyTorch TensorBoard": [[283, "pytorch-tensorboard"]], "TensorFlow Tensorboard": [[283, "tensorflow-tensorboard"]], "PyTorch Examples": [[283, "pytorch-examples"]], "TensorFlow Examples": [[283, "tensorflow-examples"]], "Transform": [[284, "transform"]], "Transform Support List": [[284, "transform-support-list"]], "Pytorch": [[284, "pytorch"]], "Tuning Strategies": [[285, "tuning-strategies"]], "Strategy Design": [[285, "strategy-design"]], "Tuning Space": [[285, "tuning-space"]], "Exit Policy": [[285, "exit-policy"]], "Accuracy Criteria": [[285, "accuracy-criteria"]], "Tuning Process": [[285, "tuning-process"]], "Tuning Algorithms": [[285, "tuning-algorithms"]], "Auto": [[285, "auto"]], "Conservative Tuning": [[285, "conservative-tuning"]], "Basic": [[285, "basic"]], "MSE": [[285, "mse"]], "MSE_V2": [[285, "mse-v2"]], "HAWQ_V2": [[285, "hawq-v2"]], "Bayesian": [[285, "bayesian"]], "Exhaustive": [[285, "exhaustive"]], "Random": [[285, "random"]], "SigOpt": [[285, "sigopt"]], "TPE": [[285, "tpe"]], "Distributed Tuning": [[285, "distributed-tuning"]], "Customize a New Tuning Strategy": [[285, "customize-a-new-tuning-strategy"]], "User Guide": [[286, "user-guide"]], "Python-based APIs": [[286, "python-based-apis"]], "Neural Coder (Zero-code Optimization)": [[286, "neural-coder-zero-code-optimization"]], "Advanced Topics": [[286, "advanced-topics"]], "Innovations for Productivity": [[286, "innovations-for-productivity"]], "User YAML Configuration Files": [[287, "user-yaml-configuration-files"]], "Get started with User YAML Files": [[287, "get-started-with-user-yaml-files"]], "Validated Quantization Examples": [[288, "validated-quantization-examples"]], "TensorFlow Models with TensorFlow 2.15.0": [[288, "tensorflow-models-with-tensorflow-2-15-0"]], "PyTorch Models with Torch 2.2.1+cpu in PTQ Mode": [[288, "pytorch-models-with-torch-2-2-1-cpu-in-ptq-mode"]], "PyTorch Models with Torch 2.2.1+cpu in QAT Mode": [[288, "pytorch-models-with-torch-2-2-1-cpu-in-qat-mode"]], "PyTorch Models with Torch 2.0.1+cpu in WOQ Mode": [[288, "pytorch-models-with-torch-2-0-1-cpu-in-woq-mode"]], "ONNX Models with ONNX Runtime 1.17.1": [[288, "onnx-models-with-onnx-runtime-1-17-1"]], "ONNX Models with ONNX Runtime 1.15.0 in WOQ Mode": [[288, "onnx-models-with-onnx-runtime-1-15-0-in-woq-mode"]], "Validated Pruning Examples": [[288, "validated-pruning-examples"]], "Validated Knowledge Distillation Examples": [[288, "validated-knowledge-distillation-examples"]], "Validated ONNX QDQ INT8 Models on Multiple Hardware through ONNX Runtime": [[288, "validated-onnx-qdq-int8-models-on-multiple-hardware-through-onnx-runtime"]]}, "indexentries": {"block_mask": [[0, "module-block_mask"]], "module": [[0, "module-block_mask"], [1, "module-neural_compressor.algorithm.algorithm"], [2, "module-neural_compressor.algorithm.fast_bias_correction"], [3, "module-neural_compressor.algorithm"], [4, "module-neural_compressor.algorithm.smooth_quant"], [5, "module-neural_compressor.algorithm.weight_correction"], [6, "module-neural_compressor.benchmark"], [7, "module-neural_compressor.config"], [8, "module-neural_compressor.contrib"], [9, "module-neural_compressor.contrib.strategy"], [10, "module-neural_compressor.contrib.strategy.sigopt"], [11, "module-neural_compressor.contrib.strategy.tpe"], [12, "module-neural_compressor.data.datasets.bert_dataset"], [13, "module-neural_compressor.data.datasets.coco_dataset"], [14, "module-neural_compressor.data.datasets.dataset"], [15, "module-neural_compressor.data.datasets.dummy_dataset"], [16, "module-neural_compressor.data.datasets.dummy_dataset_v2"], [17, "module-neural_compressor.data.datasets.imagenet_dataset"], [18, "module-neural_compressor.data.datasets"], [19, "module-neural_compressor.data.datasets.style_transfer_dataset"], [20, "module-neural_compressor.data.filters.coco_filter"], [21, "module-neural_compressor.data.filters.filter"], [22, "module-neural_compressor.data.filters"], [23, "module-neural_compressor.data"], [24, "module-neural_compressor.data.transforms.imagenet_transform"], [25, "module-neural_compressor.data.transforms"], [26, "module-neural_compressor.data.transforms.postprocess"], [27, "module-neural_compressor.data.transforms.tokenization"], [28, "module-neural_compressor.data.transforms.transform"], [29, "module-neural_compressor.experimental.benchmark"], [30, "module-neural_compressor.experimental.common.criterion"], [31, "module-neural_compressor.experimental.common.dataloader"], [32, "module-neural_compressor.experimental.common"], [33, "module-neural_compressor.experimental.common.metric"], [34, "module-neural_compressor.experimental.common.model"], [35, "module-neural_compressor.experimental.common.optimizer"], [36, "module-neural_compressor.experimental.common.postprocess"], [37, "module-neural_compressor.experimental.common.torch_utils"], [38, "module-neural_compressor.experimental.component"], [39, "module-neural_compressor.experimental.compression"], [40, "module-neural_compressor.experimental.contrib"], [41, "module-neural_compressor.experimental.contrib.strategy"], [42, "module-neural_compressor.experimental.contrib.strategy.sigopt"], [43, "module-neural_compressor.experimental.contrib.strategy.tpe"], [44, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"], [45, "module-neural_compressor.experimental.data.dataloaders.dataloader"], [46, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"], [47, "module-neural_compressor.experimental.data.dataloaders.fetcher"], [48, "module-neural_compressor.experimental.data.dataloaders"], [49, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"], [50, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"], [51, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"], [52, "module-neural_compressor.experimental.data.dataloaders.sampler"], [53, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"], [54, "module-neural_compressor.experimental.data.datasets.bert_dataset"], [55, "module-neural_compressor.experimental.data.datasets.coco_dataset"], [56, "module-neural_compressor.experimental.data.datasets.dataset"], [57, "module-neural_compressor.experimental.data.datasets.dummy_dataset"], [58, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"], [59, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"], [60, "module-neural_compressor.experimental.data.datasets"], [61, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"], [62, "module-neural_compressor.experimental.data.filters.coco_filter"], [63, "module-neural_compressor.experimental.data.filters.filter"], [64, "module-neural_compressor.experimental.data.filters"], [65, "module-neural_compressor.experimental.data"], [66, "module-neural_compressor.experimental.data.transforms.imagenet_transform"], [67, "module-neural_compressor.experimental.data.transforms"], [68, "module-neural_compressor.experimental.data.transforms.tokenization"], [69, "module-neural_compressor.experimental.data.transforms.transform"], [70, "module-neural_compressor.experimental.distillation"], [71, "module-neural_compressor.experimental.export"], [72, "module-neural_compressor.experimental.export.qlinear2qdq"], [73, "module-neural_compressor.experimental.export.tf2onnx"], [74, "module-neural_compressor.experimental.export.torch2onnx"], [75, "module-neural_compressor.experimental.graph_optimization"], [76, "module-neural_compressor.experimental"], [77, "module-neural_compressor.experimental.metric.bleu"], [78, "module-neural_compressor.experimental.metric.bleu_util"], [79, "module-neural_compressor.experimental.metric.coco_label_map"], [80, "module-neural_compressor.experimental.metric.coco_tools"], [81, "module-neural_compressor.experimental.metric.evaluate_squad"], [82, "module-neural_compressor.experimental.metric.f1"], [83, "module-neural_compressor.experimental.metric"], [84, "module-neural_compressor.experimental.metric.metric"], [85, "module-neural_compressor.experimental.mixed_precision"], [86, "module-neural_compressor.experimental.model_conversion"], [87, "module-neural_compressor.experimental.nas.basic_nas"], [88, "module-neural_compressor.experimental.nas.dynas"], [89, "module-neural_compressor.experimental.nas"], [90, "module-neural_compressor.experimental.nas.nas"], [91, "module-neural_compressor.experimental.nas.nas_utils"], [92, "module-neural_compressor.experimental.nas.search_algorithms"], [93, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"], [94, "module-neural_compressor.experimental.pruner_legacy.group_lasso"], [95, "module-neural_compressor.experimental.pruner_legacy"], [96, "module-neural_compressor.experimental.pruner_legacy.magnitude"], [97, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"], [98, "module-neural_compressor.experimental.pruner_legacy.pruner"], [99, "module-neural_compressor.experimental.pruning"], [100, "module-neural_compressor.experimental.pruning_recipes"], [101, "module-neural_compressor.experimental.pruning_recipes.patterns"], [102, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"], [103, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"], [104, "module-neural_compressor.experimental.pruning_v2"], [105, "module-neural_compressor.experimental.pytorch_pruner"], [106, "module-neural_compressor.experimental.pytorch_pruner.logger"], [107, "module-neural_compressor.experimental.pytorch_pruner.patterns"], [108, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"], [109, "module-neural_compressor.experimental.pytorch_pruner.pruner"], [110, "module-neural_compressor.experimental.pytorch_pruner.pruning"], [111, "module-neural_compressor.experimental.pytorch_pruner.scheduler"], [112, "module-neural_compressor.experimental.quantization"], [113, "module-neural_compressor.experimental.scheduler"], [114, "module-neural_compressor.experimental.strategy.auto_mixed_precision"], [115, "module-neural_compressor.experimental.strategy.basic"], [116, "module-neural_compressor.experimental.strategy.bayesian"], [117, "module-neural_compressor.experimental.strategy.exhaustive"], [118, "module-neural_compressor.experimental.strategy"], [119, "module-neural_compressor.experimental.strategy.mse"], [120, "module-neural_compressor.experimental.strategy.mse_v2"], [121, "module-neural_compressor.experimental.strategy.random"], [122, "module-neural_compressor.experimental.strategy.strategy"], [123, "module-neural_compressor.experimental.strategy.utils.constant"], [124, "module-neural_compressor.experimental.strategy.utils"], [125, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"], [126, "module-neural_compressor.experimental.strategy.utils.tuning_space"], [127, "module-neural_compressor.experimental.strategy.utils.tuning_structs"], [128, "module-neural_compressor.experimental.strategy.utils.utility"], [129, "module-neural_compressor"], [130, "module-neural_compressor.metric.bleu"], [131, "module-neural_compressor.metric.bleu_util"], [132, "module-neural_compressor.metric.coco_label_map"], [133, "module-neural_compressor.metric.coco_tools"], [134, "module-neural_compressor.metric.evaluate_squad"], [135, "module-neural_compressor.metric.f1"], [136, "module-neural_compressor.metric"], [137, "module-neural_compressor.metric.metric"], [138, "module-neural_compressor.mix_precision"], [139, "module-neural_compressor.model.base_model"], [140, "module-neural_compressor.model"], [141, "module-neural_compressor.model.keras_model"], [142, "module-neural_compressor.model.model"], [143, "module-neural_compressor.model.mxnet_model"], [144, "module-neural_compressor.model.nets_factory"], [145, "module-neural_compressor.model.onnx_model"], [146, "module-neural_compressor.model.tensorflow_model"], [147, "module-neural_compressor.model.torch_model"], [148, "module-neural_compressor.objective"], [149, "module-neural_compressor.profiling"], [150, "module-neural_compressor.quantization"], [151, "module-neural_compressor.strategy.auto"], [152, "module-neural_compressor.strategy.auto_mixed_precision"], [153, "module-neural_compressor.strategy.basic"], [154, "module-neural_compressor.strategy.bayesian"], [155, "module-neural_compressor.strategy.conservative"], [156, "module-neural_compressor.strategy.exhaustive"], [157, "module-neural_compressor.strategy.hawq_v2"], [158, "module-neural_compressor.strategy"], [159, "module-neural_compressor.strategy.mse"], [160, "module-neural_compressor.strategy.mse_v2"], [161, "module-neural_compressor.strategy.random"], [162, "module-neural_compressor.strategy.strategy"], [163, "module-neural_compressor.strategy.utils.constant"], [164, "module-neural_compressor.strategy.utils"], [165, "module-neural_compressor.strategy.utils.tuning_sampler"], [166, "module-neural_compressor.strategy.utils.tuning_space"], [167, "module-neural_compressor.strategy.utils.tuning_structs"], [168, "module-neural_compressor.strategy.utils.utility"], [169, "module-neural_compressor.training"], [170, "module-neural_compressor.utils.collect_layer_histogram"], [171, "module-neural_compressor.utils.constant"], [172, "module-neural_compressor.utils.create_obj_from_config"], [173, "module-neural_compressor.utils"], [174, "module-neural_compressor.utils.kl_divergence"], [175, "module-neural_compressor.utils.load_huggingface"], [176, "module-neural_compressor.utils.logger"], [177, "module-neural_compressor.utils.neural_insights_utils"], [178, "module-neural_compressor.utils.options"], [179, "module-neural_compressor.utils.pytorch"], [180, "module-neural_compressor.utils.utility"], [181, "module-neural_compressor.utils.weights_details"], [182, "module-neural_compressor.version"]], "algorithms (class in neural_compressor.algorithm.algorithm)": [[1, "neural_compressor.algorithm.algorithm.ALGORITHMS"]], "algorithm (class in neural_compressor.algorithm.algorithm)": [[1, "neural_compressor.algorithm.algorithm.Algorithm"]], "algorithmscheduler (class in neural_compressor.algorithm.algorithm)": [[1, "neural_compressor.algorithm.algorithm.AlgorithmScheduler"]], "algorithm_registry() (in module neural_compressor.algorithm.algorithm)": [[1, "neural_compressor.algorithm.algorithm.algorithm_registry"]], "neural_compressor.algorithm.algorithm": [[1, "module-neural_compressor.algorithm.algorithm"]], "fastbiascorrection (class in neural_compressor.algorithm.fast_bias_correction)": [[2, "neural_compressor.algorithm.fast_bias_correction.FastBiasCorrection"]], "neural_compressor.algorithm.fast_bias_correction": [[2, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[3, "module-neural_compressor.algorithm"]], "smoothquant (class in neural_compressor.algorithm.smooth_quant)": [[4, "neural_compressor.algorithm.smooth_quant.SmoothQuant"]], "neural_compressor.algorithm.smooth_quant": [[4, "module-neural_compressor.algorithm.smooth_quant"]], "weightcorrection (class in neural_compressor.algorithm.weight_correction)": [[5, "neural_compressor.algorithm.weight_correction.WeightCorrection"]], "neural_compressor.algorithm.weight_correction": [[5, "module-neural_compressor.algorithm.weight_correction"]], "benchmark_with_raw_cmd() (in module neural_compressor.benchmark)": [[6, "neural_compressor.benchmark.benchmark_with_raw_cmd"]], "call_one() (in module neural_compressor.benchmark)": [[6, "neural_compressor.benchmark.call_one"]], "config_instance() (in module neural_compressor.benchmark)": [[6, "neural_compressor.benchmark.config_instance"]], "fit() (in module neural_compressor.benchmark)": [[6, "neural_compressor.benchmark.fit"]], "generate_prefix() (in module neural_compressor.benchmark)": [[6, "neural_compressor.benchmark.generate_prefix"]], "get_architecture() (in module neural_compressor.benchmark)": [[6, "neural_compressor.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.benchmark)": [[6, "neural_compressor.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.benchmark)": [[6, "neural_compressor.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.benchmark)": [[6, "neural_compressor.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.benchmark)": [[6, "neural_compressor.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.benchmark)": [[6, "neural_compressor.benchmark.get_threads_per_core"]], "neural_compressor.benchmark": [[6, "module-neural_compressor.benchmark"]], "profile() (in module neural_compressor.benchmark)": [[6, "neural_compressor.benchmark.profile"]], "run_instance() (in module neural_compressor.benchmark)": [[6, "neural_compressor.benchmark.run_instance"]], "set_all_env_var() (in module neural_compressor.benchmark)": [[6, "neural_compressor.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.benchmark)": [[6, "neural_compressor.benchmark.set_env_var"]], "summary_benchmark() (in module neural_compressor.benchmark)": [[6, "neural_compressor.benchmark.summary_benchmark"]], "accuracycriterion (class in neural_compressor.config)": [[7, "neural_compressor.config.AccuracyCriterion"]], "benchmarkconfig (class in neural_compressor.config)": [[7, "neural_compressor.config.BenchmarkConfig"]], "distillationconfig (class in neural_compressor.config)": [[7, "neural_compressor.config.DistillationConfig"]], "dotdict (class in neural_compressor.config)": [[7, "neural_compressor.config.DotDict"]], "exportconfig (class in neural_compressor.config)": [[7, "neural_compressor.config.ExportConfig"]], "hpoconfig (class in neural_compressor.config)": [[7, "neural_compressor.config.HPOConfig"]], "intermediatelayersknowledgedistillationlossconfig (class in neural_compressor.config)": [[7, "neural_compressor.config.IntermediateLayersKnowledgeDistillationLossConfig"]], "keras (class in neural_compressor.config)": [[7, "neural_compressor.config.Keras"]], "knowledgedistillationlossconfig (class in neural_compressor.config)": [[7, "neural_compressor.config.KnowledgeDistillationLossConfig"]], "mxnet (class in neural_compressor.config)": [[7, "neural_compressor.config.MXNet"]], "mixedprecisionconfig (class in neural_compressor.config)": [[7, "neural_compressor.config.MixedPrecisionConfig"]], "nasconfig (class in neural_compressor.config)": [[7, "neural_compressor.config.NASConfig"]], "onnx (class in neural_compressor.config)": [[7, "neural_compressor.config.ONNX"]], "onnxqlinear2qdqconfig (class in neural_compressor.config)": [[7, "neural_compressor.config.ONNXQlinear2QDQConfig"]], "options (class in neural_compressor.config)": [[7, "neural_compressor.config.Options"]], "posttrainingquantconfig (class in neural_compressor.config)": [[7, "neural_compressor.config.PostTrainingQuantConfig"]], "pytorch (class in neural_compressor.config)": [[7, "neural_compressor.config.PyTorch"]], "quantizationawaretrainingconfig (class in neural_compressor.config)": [[7, "neural_compressor.config.QuantizationAwareTrainingConfig"]], "selfknowledgedistillationlossconfig (class in neural_compressor.config)": [[7, "neural_compressor.config.SelfKnowledgeDistillationLossConfig"]], "tf2onnxconfig (class in neural_compressor.config)": [[7, "neural_compressor.config.TF2ONNXConfig"]], "tensorflow (class in neural_compressor.config)": [[7, "neural_compressor.config.TensorFlow"]], "torch2onnxconfig (class in neural_compressor.config)": [[7, "neural_compressor.config.Torch2ONNXConfig"]], "tuningcriterion (class in neural_compressor.config)": [[7, "neural_compressor.config.TuningCriterion"]], "weightpruningconfig (class in neural_compressor.config)": [[7, "neural_compressor.config.WeightPruningConfig"]], "neural_compressor.config": [[7, "module-neural_compressor.config"]], "neural_compressor.contrib": [[8, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[9, "module-neural_compressor.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.contrib.strategy.sigopt)": [[10, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.sigopt": [[10, "module-neural_compressor.contrib.strategy.sigopt"]], "tpetunestrategy (class in neural_compressor.contrib.strategy.tpe)": [[11, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[11, "module-neural_compressor.contrib.strategy.tpe"]], "inputfeatures (class in neural_compressor.data.datasets.bert_dataset)": [[12, "neural_compressor.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[12, "neural_compressor.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.data.datasets.bert_dataset)": [[12, "neural_compressor.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[12, "neural_compressor.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[12, "neural_compressor.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[12, "neural_compressor.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.data.datasets.bert_dataset)": [[12, "neural_compressor.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.data.datasets.bert_dataset)": [[12, "neural_compressor.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.data.datasets.bert_dataset": [[12, "module-neural_compressor.data.datasets.bert_dataset"]], "coconpy (class in neural_compressor.data.datasets.coco_dataset)": [[13, "neural_compressor.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.data.datasets.coco_dataset)": [[13, "neural_compressor.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.data.datasets.coco_dataset)": [[13, "neural_compressor.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.data.datasets.coco_dataset)": [[13, "neural_compressor.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.data.datasets.coco_dataset": [[13, "module-neural_compressor.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflow (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.Tensorflow"]], "tensorflowcifar10 (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagerecord (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.check_integrity"]], "dataset_registry() (in module neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.dataset_registry"]], "download_url() (in module neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.gen_bar_updater"]], "neural_compressor.data.datasets.dataset": [[14, "module-neural_compressor.data.datasets.dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset)": [[15, "neural_compressor.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset": [[15, "module-neural_compressor.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[16, "neural_compressor.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[16, "neural_compressor.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[16, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[17, "neural_compressor.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[17, "neural_compressor.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[17, "neural_compressor.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[17, "neural_compressor.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[17, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[17, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.data.datasets.imagenet_dataset": [[17, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[18, "module-neural_compressor.data.datasets"]], "styletransferdataset (class in neural_compressor.data.datasets.style_transfer_dataset)": [[19, "neural_compressor.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.data.datasets.style_transfer_dataset": [[19, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.data.filters.coco_filter)": [[20, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.data.filters.coco_filter)": [[20, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.coco_filter": [[20, "module-neural_compressor.data.filters.coco_filter"]], "filters (class in neural_compressor.data.filters.filter)": [[21, "neural_compressor.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.data.filters.filter)": [[21, "neural_compressor.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.data.filters.filter)": [[21, "neural_compressor.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.data.filters.filter)": [[21, "neural_compressor.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.data.filters.filter)": [[21, "neural_compressor.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.data.filters.filter)": [[21, "neural_compressor.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.data.filters.filter)": [[21, "neural_compressor.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.data.filters.filter)": [[21, "neural_compressor.data.filters.filter.filter_registry"]], "neural_compressor.data.filters.filter": [[21, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[22, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[23, "module-neural_compressor.data"]], "bilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[24, "neural_compressor.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.data.transforms.imagenet_transform)": [[24, "neural_compressor.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[24, "neural_compressor.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[24, "neural_compressor.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.data.transforms.imagenet_transform)": [[24, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[24, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.data.transforms.imagenet_transform)": [[24, "neural_compressor.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.data.transforms.imagenet_transform)": [[24, "neural_compressor.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[24, "neural_compressor.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "tensorflowshiftrescale (class in neural_compressor.data.transforms.imagenet_transform)": [[24, "neural_compressor.data.transforms.imagenet_transform.TensorflowShiftRescale"]], "tensorflowtransposelastchannel (class in neural_compressor.data.transforms.imagenet_transform)": [[24, "neural_compressor.data.transforms.imagenet_transform.TensorflowTransposeLastChannel"]], "neural_compressor.data.transforms.imagenet_transform": [[24, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[25, "module-neural_compressor.data.transforms"]], "postprocess (class in neural_compressor.data.transforms.postprocess)": [[26, "neural_compressor.data.transforms.postprocess.Postprocess"]], "neural_compressor.data.transforms.postprocess": [[26, "module-neural_compressor.data.transforms.postprocess"]], "basictokenizer (class in neural_compressor.data.transforms.tokenization)": [[27, "neural_compressor.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.data.transforms.tokenization)": [[27, "neural_compressor.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.data.transforms.tokenization)": [[27, "neural_compressor.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.data.transforms.tokenization)": [[27, "neural_compressor.data.transforms.tokenization.convert_by_vocab"]], "convert_to_unicode() (in module neural_compressor.data.transforms.tokenization)": [[27, "neural_compressor.data.transforms.tokenization.convert_to_unicode"]], "load_vocab() (in module neural_compressor.data.transforms.tokenization)": [[27, "neural_compressor.data.transforms.tokenization.load_vocab"]], "neural_compressor.data.transforms.tokenization": [[27, "module-neural_compressor.data.transforms.tokenization"]], "whitespace_tokenize() (in module neural_compressor.data.transforms.tokenization)": [[27, "neural_compressor.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.TRANSFORMS"], [28, "neural_compressor.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.get_final_text"]], "get_torchvision_map() (in module neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.get_torchvision_map"]], "neural_compressor.data.transforms.transform": [[28, "module-neural_compressor.data.transforms.transform"]], "read_squad_examples() (in module neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.read_squad_examples"]], "transform_registry() (in module neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.transform_registry"]], "benchmark (class in neural_compressor.experimental.benchmark)": [[29, "neural_compressor.experimental.benchmark.Benchmark"]], "get_architecture() (in module neural_compressor.experimental.benchmark)": [[29, "neural_compressor.experimental.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.experimental.benchmark)": [[29, "neural_compressor.experimental.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.experimental.benchmark)": [[29, "neural_compressor.experimental.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.experimental.benchmark)": [[29, "neural_compressor.experimental.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.experimental.benchmark)": [[29, "neural_compressor.experimental.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.experimental.benchmark)": [[29, "neural_compressor.experimental.benchmark.get_threads_per_core"]], "neural_compressor.experimental.benchmark": [[29, "module-neural_compressor.experimental.benchmark"]], "set_all_env_var() (in module neural_compressor.experimental.benchmark)": [[29, "neural_compressor.experimental.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.experimental.benchmark)": [[29, "neural_compressor.experimental.benchmark.set_env_var"]], "criterions (class in neural_compressor.experimental.common.criterion)": [[30, "neural_compressor.experimental.common.criterion.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[30, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.experimental.common.criterion)": [[30, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[30, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss"]], "pytorchcriterions (class in neural_compressor.experimental.common.criterion)": [[30, "neural_compressor.experimental.common.criterion.PyTorchCriterions"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[30, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[30, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[30, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[30, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[30, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss"]], "tensorflowcriterions (class in neural_compressor.experimental.common.criterion)": [[30, "neural_compressor.experimental.common.criterion.TensorflowCriterions"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.experimental.common.criterion)": [[30, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal"]], "criterion_registry() (in module neural_compressor.experimental.common.criterion)": [[30, "neural_compressor.experimental.common.criterion.criterion_registry"]], "neural_compressor.experimental.common.criterion": [[30, "module-neural_compressor.experimental.common.criterion"]], "dataloader (class in neural_compressor.experimental.common.dataloader)": [[31, "neural_compressor.experimental.common.dataloader.DataLoader"]], "neural_compressor.experimental.common.dataloader": [[31, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[32, "module-neural_compressor.experimental.common"]], "metric (class in neural_compressor.experimental.common.metric)": [[33, "neural_compressor.experimental.common.metric.Metric"]], "neural_compressor.experimental.common.metric": [[33, "module-neural_compressor.experimental.common.metric"]], "model (class in neural_compressor.experimental.common.model)": [[34, "neural_compressor.experimental.common.model.Model"]], "neural_compressor.experimental.common.model": [[34, "module-neural_compressor.experimental.common.model"]], "set_backend() (in module neural_compressor.experimental.common.model)": [[34, "neural_compressor.experimental.common.model.set_backend"]], "optimizers (class in neural_compressor.experimental.common.optimizer)": [[35, "neural_compressor.experimental.common.optimizer.Optimizers"]], "pytorchoptimizers (class in neural_compressor.experimental.common.optimizer)": [[35, "neural_compressor.experimental.common.optimizer.PyTorchOptimizers"]], "pytorchsgd (class in neural_compressor.experimental.common.optimizer)": [[35, "neural_compressor.experimental.common.optimizer.PyTorchSGD"]], "tensorflowadamw (class in neural_compressor.experimental.common.optimizer)": [[35, "neural_compressor.experimental.common.optimizer.TensorFlowAdamW"]], "tensorflowsgd (class in neural_compressor.experimental.common.optimizer)": [[35, "neural_compressor.experimental.common.optimizer.TensorFlowSGD"]], "tensorflowoptimizers (class in neural_compressor.experimental.common.optimizer)": [[35, "neural_compressor.experimental.common.optimizer.TensorflowOptimizers"]], "neural_compressor.experimental.common.optimizer": [[35, "module-neural_compressor.experimental.common.optimizer"]], "optimizer_registry() (in module neural_compressor.experimental.common.optimizer)": [[35, "neural_compressor.experimental.common.optimizer.optimizer_registry"]], "postprocess (class in neural_compressor.experimental.common.postprocess)": [[36, "neural_compressor.experimental.common.postprocess.Postprocess"]], "neural_compressor.experimental.common.postprocess": [[36, "module-neural_compressor.experimental.common.postprocess"]], "get_activation() (in module neural_compressor.experimental.common.torch_utils)": [[37, "neural_compressor.experimental.common.torch_utils.get_activation"]], "neural_compressor.experimental.common.torch_utils": [[37, "module-neural_compressor.experimental.common.torch_utils"]], "record_output() (in module neural_compressor.experimental.common.torch_utils)": [[37, "neural_compressor.experimental.common.torch_utils.record_output"]], "component (class in neural_compressor.experimental.component)": [[38, "neural_compressor.experimental.component.Component"]], "neural_compressor.experimental.component": [[38, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.compression": [[39, "module-neural_compressor.experimental.compression"]], "neural_compressor.experimental.contrib": [[40, "module-neural_compressor.experimental.contrib"]], "neural_compressor.experimental.contrib.strategy": [[41, "module-neural_compressor.experimental.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.experimental.contrib.strategy.sigopt)": [[42, "neural_compressor.experimental.contrib.strategy.sigopt.SigOptTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[42, "module-neural_compressor.experimental.contrib.strategy.sigopt"]], "tpetunestrategy (class in neural_compressor.experimental.contrib.strategy.tpe)": [[43, "neural_compressor.experimental.contrib.strategy.tpe.TpeTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.tpe": [[43, "module-neural_compressor.experimental.contrib.strategy.tpe"]], "basedataloader (class in neural_compressor.experimental.data.dataloaders.base_dataloader)": [[44, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[44, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[45, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.experimental.data.dataloaders.default_dataloader)": [[46, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader"]], "default_collate() (in module neural_compressor.experimental.data.dataloaders.default_dataloader)": [[46, "neural_compressor.experimental.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[46, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[47, "neural_compressor.experimental.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[47, "neural_compressor.experimental.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[47, "neural_compressor.experimental.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[47, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[48, "module-neural_compressor.experimental.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.experimental.data.dataloaders.mxnet_dataloader)": [[49, "neural_compressor.experimental.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[49, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[50, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[50, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[50, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.experimental.data.dataloaders.pytorch_dataloader)": [[51, "neural_compressor.experimental.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[51, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[52, "neural_compressor.experimental.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[52, "neural_compressor.experimental.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[52, "neural_compressor.experimental.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[52, "neural_compressor.experimental.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.sampler": [[52, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[53, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[53, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[53, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[53, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[53, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[54, "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[54, "neural_compressor.experimental.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[54, "neural_compressor.experimental.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[54, "neural_compressor.experimental.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[54, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[54, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[54, "neural_compressor.experimental.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[54, "neural_compressor.experimental.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[54, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "coconpy (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[55, "neural_compressor.experimental.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[55, "neural_compressor.experimental.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[55, "neural_compressor.experimental.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[55, "neural_compressor.experimental.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[55, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflowcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageFolder"]], "tensorflowimagerecord (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.check_integrity"]], "dataset_registry() (in module neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.dataset_registry"]], "download_url() (in module neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dataset": [[56, "module-neural_compressor.experimental.data.datasets.dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset)": [[57, "neural_compressor.experimental.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[57, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[58, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[58, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[58, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[59, "neural_compressor.experimental.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[59, "neural_compressor.experimental.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[59, "neural_compressor.experimental.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[59, "neural_compressor.experimental.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[59, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[59, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[59, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[60, "module-neural_compressor.experimental.data.datasets"]], "styletransferdataset (class in neural_compressor.experimental.data.datasets.style_transfer_dataset)": [[61, "neural_compressor.experimental.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[61, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[62, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[62, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.coco_filter": [[62, "module-neural_compressor.experimental.data.filters.coco_filter"]], "filters (class in neural_compressor.experimental.data.filters.filter)": [[63, "neural_compressor.experimental.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.experimental.data.filters.filter)": [[63, "neural_compressor.experimental.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.experimental.data.filters.filter)": [[63, "neural_compressor.experimental.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.experimental.data.filters.filter)": [[63, "neural_compressor.experimental.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.experimental.data.filters.filter)": [[63, "neural_compressor.experimental.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.experimental.data.filters.filter)": [[63, "neural_compressor.experimental.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.experimental.data.filters.filter)": [[63, "neural_compressor.experimental.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.experimental.data.filters.filter)": [[63, "neural_compressor.experimental.data.filters.filter.filter_registry"]], "neural_compressor.experimental.data.filters.filter": [[63, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[64, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[65, "module-neural_compressor.experimental.data"]], "bilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[66, "neural_compressor.experimental.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[66, "neural_compressor.experimental.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[66, "neural_compressor.experimental.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[66, "neural_compressor.experimental.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[66, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[66, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[66, "neural_compressor.experimental.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[66, "neural_compressor.experimental.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[66, "neural_compressor.experimental.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[66, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[67, "module-neural_compressor.experimental.data.transforms"]], "basictokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[68, "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[68, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[68, "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[68, "neural_compressor.experimental.data.transforms.tokenization.convert_by_vocab"]], "convert_to_unicode() (in module neural_compressor.experimental.data.transforms.tokenization)": [[68, "neural_compressor.experimental.data.transforms.tokenization.convert_to_unicode"]], "load_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[68, "neural_compressor.experimental.data.transforms.tokenization.load_vocab"]], "neural_compressor.experimental.data.transforms.tokenization": [[68, "module-neural_compressor.experimental.data.transforms.tokenization"]], "whitespace_tokenize() (in module neural_compressor.experimental.data.transforms.tokenization)": [[68, "neural_compressor.experimental.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.TRANSFORMS"], [69, "neural_compressor.experimental.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.get_final_text"]], "get_torchvision_map() (in module neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.get_torchvision_map"]], "neural_compressor.experimental.data.transforms.transform": [[69, "module-neural_compressor.experimental.data.transforms.transform"]], "read_squad_examples() (in module neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.read_squad_examples"]], "transform_registry() (in module neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.transform_registry"]], "distillation (class in neural_compressor.experimental.distillation)": [[70, "neural_compressor.experimental.distillation.Distillation"]], "_epoch_ran (neural_compressor.experimental.distillation.distillation attribute)": [[70, "neural_compressor.experimental.distillation.Distillation._epoch_ran"]], "best_model (neural_compressor.experimental.distillation.distillation attribute)": [[70, "neural_compressor.experimental.distillation.Distillation.best_model"]], "best_score (neural_compressor.experimental.distillation.distillation attribute)": [[70, "neural_compressor.experimental.distillation.Distillation.best_score"]], "eval_frequency (neural_compressor.experimental.distillation.distillation attribute)": [[70, "neural_compressor.experimental.distillation.Distillation.eval_frequency"]], "neural_compressor.experimental.distillation": [[70, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[71, "module-neural_compressor.experimental.export"]], "check_model() (in module neural_compressor.experimental.export.qlinear2qdq)": [[72, "neural_compressor.experimental.export.qlinear2qdq.check_model"]], "neural_compressor.experimental.export.qlinear2qdq": [[72, "module-neural_compressor.experimental.export.qlinear2qdq"]], "onnx_qlinear_to_qdq() (in module neural_compressor.experimental.export.qlinear2qdq)": [[72, "neural_compressor.experimental.export.qlinear2qdq.onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.tf2onnx": [[73, "module-neural_compressor.experimental.export.tf2onnx"]], "tf_to_fp32_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[73, "neural_compressor.experimental.export.tf2onnx.tf_to_fp32_onnx"]], "tf_to_int8_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[73, "neural_compressor.experimental.export.tf2onnx.tf_to_int8_onnx"]], "dynamic_quant_export() (in module neural_compressor.experimental.export.torch2onnx)": [[74, "neural_compressor.experimental.export.torch2onnx.dynamic_quant_export"]], "get_node_mapping() (in module neural_compressor.experimental.export.torch2onnx)": [[74, "neural_compressor.experimental.export.torch2onnx.get_node_mapping"]], "get_quantizable_onnx_ops() (in module neural_compressor.experimental.export.torch2onnx)": [[74, "neural_compressor.experimental.export.torch2onnx.get_quantizable_onnx_ops"]], "neural_compressor.experimental.export.torch2onnx": [[74, "module-neural_compressor.experimental.export.torch2onnx"]], "static_quant_export() (in module neural_compressor.experimental.export.torch2onnx)": [[74, "neural_compressor.experimental.export.torch2onnx.static_quant_export"]], "torch_to_fp32_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[74, "neural_compressor.experimental.export.torch2onnx.torch_to_fp32_onnx"]], "torch_to_int8_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[74, "neural_compressor.experimental.export.torch2onnx.torch_to_int8_onnx"]], "graph_optimization (class in neural_compressor.experimental.graph_optimization)": [[75, "neural_compressor.experimental.graph_optimization.Graph_Optimization"]], "neural_compressor.experimental.graph_optimization": [[75, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[76, "module-neural_compressor.experimental"]], "bleu (class in neural_compressor.experimental.metric.bleu)": [[77, "neural_compressor.experimental.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.experimental.metric.bleu)": [[77, "neural_compressor.experimental.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.experimental.metric.bleu)": [[77, "neural_compressor.experimental.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.experimental.metric.bleu.bleu attribute)": [[77, "neural_compressor.experimental.metric.bleu.BLEU.labels"]], "neural_compressor.experimental.metric.bleu": [[77, "module-neural_compressor.experimental.metric.bleu"]], "nondigit_punct_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[77, "neural_compressor.experimental.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.experimental.metric.bleu.bleu attribute)": [[77, "neural_compressor.experimental.metric.bleu.BLEU.predictions"]], "punct_nondigit_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[77, "neural_compressor.experimental.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[77, "neural_compressor.experimental.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.experimental.metric.bleu_util)": [[78, "neural_compressor.experimental.metric.bleu_util.compute_bleu"]], "neural_compressor.experimental.metric.bleu_util": [[78, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[79, "module-neural_compressor.experimental.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.experimental.metric.coco_tools)": [[80, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.experimental.metric.coco_tools)": [[80, "neural_compressor.experimental.metric.coco_tools.COCOWrapper"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.experimental.metric.coco_tools)": [[80, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.experimental.metric.coco_tools)": [[80, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.experimental.metric.coco_tools)": [[80, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "dataset (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[80, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[80, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.experimental.metric.coco_tools": [[80, "module-neural_compressor.experimental.metric.coco_tools"]], "evaluate() (in module neural_compressor.experimental.metric.evaluate_squad)": [[81, "neural_compressor.experimental.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[81, "neural_compressor.experimental.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[81, "neural_compressor.experimental.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.evaluate_squad)": [[81, "neural_compressor.experimental.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.evaluate_squad": [[81, "module-neural_compressor.experimental.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.experimental.metric.f1)": [[82, "neural_compressor.experimental.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.experimental.metric.f1)": [[82, "neural_compressor.experimental.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.f1)": [[82, "neural_compressor.experimental.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[82, "module-neural_compressor.experimental.metric.f1"]], "normalize_answer() (in module neural_compressor.experimental.metric.f1)": [[82, "neural_compressor.experimental.metric.f1.normalize_answer"]], "neural_compressor.experimental.metric": [[83, "module-neural_compressor.experimental.metric"]], "accuracy (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.F1"]], "generaltopk (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.Loss"]], "mae (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.MAE"]], "metrics (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.METRICS"]], "mse (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.MXNetMetrics"]], "onnxrtglue (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.RMSE"]], "roc (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.ROC"]], "squadf1 (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.experimental.metric.metric.mae attribute)": [[84, "neural_compressor.experimental.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.experimental.metric.metric.mse attribute)": [[84, "neural_compressor.experimental.metric.metric.MSE.compare_label"]], "k (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[84, "neural_compressor.experimental.metric.metric.GeneralTopK.k"]], "k (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[84, "neural_compressor.experimental.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[84, "neural_compressor.experimental.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mae attribute)": [[84, "neural_compressor.experimental.metric.metric.MAE.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mse attribute)": [[84, "neural_compressor.experimental.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.mIOU"]], "metric_registry() (in module neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.metric_registry"]], "metrics (neural_compressor.experimental.metric.metric.metrics attribute)": [[84, "neural_compressor.experimental.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.experimental.metric.metric.mxnetmetrics attribute)": [[84, "neural_compressor.experimental.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtitmetrics attribute)": [[84, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtqlmetrics attribute)": [[84, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.pytorchmetrics attribute)": [[84, "neural_compressor.experimental.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.tensorflowmetrics attribute)": [[84, "neural_compressor.experimental.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.experimental.metric.metric.rmse attribute)": [[84, "neural_compressor.experimental.metric.metric.RMSE.mse"]], "neural_compressor.experimental.metric.metric": [[84, "module-neural_compressor.experimental.metric.metric"]], "num_correct (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[84, "neural_compressor.experimental.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[84, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[84, "neural_compressor.experimental.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[84, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[84, "neural_compressor.experimental.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mae attribute)": [[84, "neural_compressor.experimental.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mse attribute)": [[84, "neural_compressor.experimental.metric.metric.MSE.pred_list"]], "sample (neural_compressor.experimental.metric.metric.accuracy attribute)": [[84, "neural_compressor.experimental.metric.metric.Accuracy.sample"]], "sample (neural_compressor.experimental.metric.metric.loss attribute)": [[84, "neural_compressor.experimental.metric.metric.Loss.sample"]], "sum (neural_compressor.experimental.metric.metric.loss attribute)": [[84, "neural_compressor.experimental.metric.metric.Loss.sum"]], "mixedprecision (class in neural_compressor.experimental.mixed_precision)": [[85, "neural_compressor.experimental.mixed_precision.MixedPrecision"]], "neural_compressor.experimental.mixed_precision": [[85, "module-neural_compressor.experimental.mixed_precision"]], "modelconversion (class in neural_compressor.experimental.model_conversion)": [[86, "neural_compressor.experimental.model_conversion.ModelConversion"]], "neural_compressor.experimental.model_conversion": [[86, "module-neural_compressor.experimental.model_conversion"]], "basicnas (class in neural_compressor.experimental.nas.basic_nas)": [[87, "neural_compressor.experimental.nas.basic_nas.BasicNAS"]], "neural_compressor.experimental.nas.basic_nas": [[87, "module-neural_compressor.experimental.nas.basic_nas"]], "dynas (class in neural_compressor.experimental.nas.dynas)": [[88, "neural_compressor.experimental.nas.dynas.DyNAS"]], "neural_compressor.experimental.nas.dynas": [[88, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas": [[89, "module-neural_compressor.experimental.nas"]], "nas (class in neural_compressor.experimental.nas.nas)": [[90, "neural_compressor.experimental.nas.nas.NAS"]], "nasbase (class in neural_compressor.experimental.nas.nas)": [[90, "neural_compressor.experimental.nas.nas.NASBase"]], "neural_compressor.experimental.nas.nas": [[90, "module-neural_compressor.experimental.nas.nas"]], "create_search_space_pool() (in module neural_compressor.experimental.nas.nas_utils)": [[91, "neural_compressor.experimental.nas.nas_utils.create_search_space_pool"]], "find_pareto_front() (in module neural_compressor.experimental.nas.nas_utils)": [[91, "neural_compressor.experimental.nas.nas_utils.find_pareto_front"]], "nas_registry() (in module neural_compressor.experimental.nas.nas_utils)": [[91, "neural_compressor.experimental.nas.nas_utils.nas_registry"]], "neural_compressor.experimental.nas.nas_utils": [[91, "module-neural_compressor.experimental.nas.nas_utils"]], "bayesianoptimizationsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[92, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher"]], "gridsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[92, "neural_compressor.experimental.nas.search_algorithms.GridSearcher"]], "randomsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[92, "neural_compressor.experimental.nas.search_algorithms.RandomSearcher"]], "searcher (class in neural_compressor.experimental.nas.search_algorithms)": [[92, "neural_compressor.experimental.nas.search_algorithms.Searcher"]], "neural_compressor.experimental.nas.search_algorithms": [[92, "module-neural_compressor.experimental.nas.search_algorithms"]], "gradientsensitivitypruner (class in neural_compressor.experimental.pruner_legacy.gradient_sensitivity)": [[93, "neural_compressor.experimental.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[93, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"]], "grouplassopruner (class in neural_compressor.experimental.pruner_legacy.group_lasso)": [[94, "neural_compressor.experimental.pruner_legacy.group_lasso.GroupLassoPruner"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[94, "module-neural_compressor.experimental.pruner_legacy.group_lasso"]], "neural_compressor.experimental.pruner_legacy": [[95, "module-neural_compressor.experimental.pruner_legacy"]], "basicmagnitudepruner (class in neural_compressor.experimental.pruner_legacy.magnitude)": [[96, "neural_compressor.experimental.pruner_legacy.magnitude.BasicMagnitudePruner"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[96, "module-neural_compressor.experimental.pruner_legacy.magnitude"]], "patternlockpruner (class in neural_compressor.experimental.pruner_legacy.pattern_lock)": [[97, "neural_compressor.experimental.pruner_legacy.pattern_lock.PatternLockPruner"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[97, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"]], "pruner (class in neural_compressor.experimental.pruner_legacy.pruner)": [[98, "neural_compressor.experimental.pruner_legacy.pruner.Pruner"]], "neural_compressor.experimental.pruner_legacy.pruner": [[98, "module-neural_compressor.experimental.pruner_legacy.pruner"]], "pruner_registry() (in module neural_compressor.experimental.pruner_legacy.pruner)": [[98, "neural_compressor.experimental.pruner_legacy.pruner.pruner_registry"]], "pruning (class in neural_compressor.experimental.pruning)": [[99, "neural_compressor.experimental.pruning.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning)": [[99, "neural_compressor.experimental.pruning.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning.pruning attribute)": [[99, "neural_compressor.experimental.pruning.Pruning.conf"]], "neural_compressor.experimental.pruning": [[99, "module-neural_compressor.experimental.pruning"]], "pruners (neural_compressor.experimental.pruning.pruning attribute)": [[99, "neural_compressor.experimental.pruning.Pruning.pruners"]], "neural_compressor.experimental.pruning_recipes": [[100, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[101, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "patterns (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[102, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS"]], "patternbase (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[102, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[102, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "pattern_registry() (in module neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[102, "neural_compressor.experimental.pruning_recipes.patterns.pattern.pattern_registry"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns.pattern.patterns attribute)": [[102, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS.patterns"]], "tilepatternbase (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[103, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase"]], "tilepattern_1x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[103, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x1"]], "tilepattern_1x16 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[103, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x16"]], "tilepattern_1x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[103, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x2"]], "tilepattern_2x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[103, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_2x2"]], "tilepattern_4x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[103, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_4x1"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[103, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "pruning (class in neural_compressor.experimental.pruning_v2)": [[104, "neural_compressor.experimental.pruning_v2.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning_v2)": [[104, "neural_compressor.experimental.pruning_v2.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning_v2.pruning attribute)": [[104, "neural_compressor.experimental.pruning_v2.Pruning.conf"]], "neural_compressor.experimental.pruning_v2": [[104, "module-neural_compressor.experimental.pruning_v2"]], "pruners (neural_compressor.experimental.pruning_v2.pruning attribute)": [[104, "neural_compressor.experimental.pruning_v2.Pruning.pruners"]], "neural_compressor.experimental.pytorch_pruner": [[105, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[106, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "m (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[107, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.M"]], "n (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[107, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.N"]], "pattern (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[107, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern"]], "patternninm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[107, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM"]], "patternnxm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[107, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM"]], "block_size (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm attribute)": [[107, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.block_size"]], "get_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[107, "neural_compressor.experimental.pytorch_pruner.patterns.get_pattern"]], "is_global (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[107, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.is_global"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[107, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "pattern (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[107, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.pattern"]], "register_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[107, "neural_compressor.experimental.pytorch_pruner.patterns.register_pattern"]], "check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[108, "neural_compressor.experimental.pytorch_pruner.prune_utils.check_config"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[108, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "parse_not_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[108, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_not_to_prune"]], "parse_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[108, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_to_prune"]], "process_and_check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[108, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_and_check_config"]], "process_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[108, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_config"]], "reset_non_value_to_default() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[108, "neural_compressor.experimental.pytorch_pruner.prune_utils.reset_non_value_to_default"]], "magnitudepruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner"]], "patternlockpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner"]], "pruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner"]], "snipmomentumpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner"]], "snippruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner"]], "config (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.config"]], "current_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.current_sparsity_ratio"]], "end_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.end_step"]], "get_pruner() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.get_pruner"]], "global_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.global_step"]], "masks (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.masks"]], "max_sparsity_ratio_per_layer (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.max_sparsity_ratio_per_layer"]], "modules (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.modules"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[109, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "pattern (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.pattern"]], "register_pruners() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.register_pruners"]], "scheduler (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scheduler"]], "scores (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scores"]], "start_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.start_step"]], "target_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.target_sparsity_ratio"]], "update_frequency_on_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.update_frequency_on_step"]], "pruning (class in neural_compressor.experimental.pytorch_pruner.pruning)": [[110, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning"]], "config_file_path (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[110, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.config_file_path"]], "model (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[110, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.model"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[110, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "pruner_info (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[110, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruner_info"]], "pruners (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[110, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruners"]], "iterativescheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[111, "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[111, "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler"]], "scheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[111, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler"]], "config (neural_compressor.experimental.pytorch_pruner.scheduler.scheduler attribute)": [[111, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler.config"]], "get_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[111, "neural_compressor.experimental.pytorch_pruner.scheduler.get_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[111, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "register_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[111, "neural_compressor.experimental.pytorch_pruner.scheduler.register_scheduler"]], "quantization (class in neural_compressor.experimental.quantization)": [[112, "neural_compressor.experimental.quantization.Quantization"]], "neural_compressor.experimental.quantization": [[112, "module-neural_compressor.experimental.quantization"]], "scheduler (class in neural_compressor.experimental.scheduler)": [[113, "neural_compressor.experimental.scheduler.Scheduler"]], "neural_compressor.experimental.scheduler": [[113, "module-neural_compressor.experimental.scheduler"]], "automixedprecisiontunestrategy (class in neural_compressor.experimental.strategy.auto_mixed_precision)": [[114, "neural_compressor.experimental.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[114, "module-neural_compressor.experimental.strategy.auto_mixed_precision"]], "basictunestrategy (class in neural_compressor.experimental.strategy.basic)": [[115, "neural_compressor.experimental.strategy.basic.BasicTuneStrategy"]], "neural_compressor.experimental.strategy.basic": [[115, "module-neural_compressor.experimental.strategy.basic"]], "bayesianoptimization (class in neural_compressor.experimental.strategy.bayesian)": [[116, "neural_compressor.experimental.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.experimental.strategy.bayesian)": [[116, "neural_compressor.experimental.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.experimental.strategy.bayesian)": [[116, "neural_compressor.experimental.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.experimental.strategy.bayesian)": [[116, "neural_compressor.experimental.strategy.bayesian.acq_max"]], "neural_compressor.experimental.strategy.bayesian": [[116, "module-neural_compressor.experimental.strategy.bayesian"]], "exhaustivetunestrategy (class in neural_compressor.experimental.strategy.exhaustive)": [[117, "neural_compressor.experimental.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.experimental.strategy.exhaustive": [[117, "module-neural_compressor.experimental.strategy.exhaustive"]], "neural_compressor.experimental.strategy": [[118, "module-neural_compressor.experimental.strategy"]], "msetunestrategy (class in neural_compressor.experimental.strategy.mse)": [[119, "neural_compressor.experimental.strategy.mse.MSETuneStrategy"]], "neural_compressor.experimental.strategy.mse": [[119, "module-neural_compressor.experimental.strategy.mse"]], "mse_v2tunestrategy (class in neural_compressor.experimental.strategy.mse_v2)": [[120, "neural_compressor.experimental.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.experimental.strategy.mse_v2": [[120, "module-neural_compressor.experimental.strategy.mse_v2"]], "randomtunestrategy (class in neural_compressor.experimental.strategy.random)": [[121, "neural_compressor.experimental.strategy.random.RandomTuneStrategy"]], "neural_compressor.experimental.strategy.random": [[121, "module-neural_compressor.experimental.strategy.random"]], "tunestrategy (class in neural_compressor.experimental.strategy.strategy)": [[122, "neural_compressor.experimental.strategy.strategy.TuneStrategy"]], "neural_compressor.experimental.strategy.strategy": [[122, "module-neural_compressor.experimental.strategy.strategy"]], "strategy_registry() (in module neural_compressor.experimental.strategy.strategy)": [[122, "neural_compressor.experimental.strategy.strategy.strategy_registry"]], "neural_compressor.experimental.strategy.utils.constant": [[123, "module-neural_compressor.experimental.strategy.utils.constant"]], "neural_compressor.experimental.strategy.utils": [[124, "module-neural_compressor.experimental.strategy.utils"]], "fallbacktuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[125, "neural_compressor.experimental.strategy.utils.tuning_sampler.FallbackTuningSampler"]], "modelwisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[125, "neural_compressor.experimental.strategy.utils.tuning_sampler.ModelWiseTuningSampler"]], "optypewisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[125, "neural_compressor.experimental.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler"]], "opwisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[125, "neural_compressor.experimental.strategy.utils.tuning_sampler.OpWiseTuningSampler"]], "smoothquantsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[125, "neural_compressor.experimental.strategy.utils.tuning_sampler.SmoothQuantSampler"]], "tuningorder (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[125, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningOrder"]], "tuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[125, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningSampler"]], "tuningsamplerregistry (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[125, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningSamplerRegistry"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[125, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"]], "tuningitem (class in neural_compressor.experimental.strategy.utils.tuning_space)": [[126, "neural_compressor.experimental.strategy.utils.tuning_space.TuningItem"]], "tuningspace (class in neural_compressor.experimental.strategy.utils.tuning_space)": [[126, "neural_compressor.experimental.strategy.utils.tuning_space.TuningSpace"]], "initial_tuning_cfg_with_quant_mode() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[126, "neural_compressor.experimental.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[126, "module-neural_compressor.experimental.strategy.utils.tuning_space"]], "pattern_to_internal() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[126, "neural_compressor.experimental.strategy.utils.tuning_space.pattern_to_internal"]], "pattern_to_path() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[126, "neural_compressor.experimental.strategy.utils.tuning_space.pattern_to_path"]], "quant_mode_from_pattern() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[126, "neural_compressor.experimental.strategy.utils.tuning_space.quant_mode_from_pattern"]], "optuningconfig (class in neural_compressor.experimental.strategy.utils.tuning_structs)": [[127, "neural_compressor.experimental.strategy.utils.tuning_structs.OpTuningConfig"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[127, "module-neural_compressor.experimental.strategy.utils.tuning_structs"]], "ordereddefaultdict (class in neural_compressor.experimental.strategy.utils.utility)": [[128, "neural_compressor.experimental.strategy.utils.utility.OrderedDefaultDict"]], "extract_data_type() (in module neural_compressor.experimental.strategy.utils.utility)": [[128, "neural_compressor.experimental.strategy.utils.utility.extract_data_type"]], "get_adaptor_name() (in module neural_compressor.experimental.strategy.utils.utility)": [[128, "neural_compressor.experimental.strategy.utils.utility.get_adaptor_name"]], "neural_compressor.experimental.strategy.utils.utility": [[128, "module-neural_compressor.experimental.strategy.utils.utility"]], "reverted_data_type() (in module neural_compressor.experimental.strategy.utils.utility)": [[128, "neural_compressor.experimental.strategy.utils.utility.reverted_data_type"]], "neural_compressor": [[129, "module-neural_compressor"]], "bleu (class in neural_compressor.metric.bleu)": [[130, "neural_compressor.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.metric.bleu)": [[130, "neural_compressor.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.metric.bleu)": [[130, "neural_compressor.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.metric.bleu.bleu attribute)": [[130, "neural_compressor.metric.bleu.BLEU.labels"]], "neural_compressor.metric.bleu": [[130, "module-neural_compressor.metric.bleu"]], "nondigit_punct_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[130, "neural_compressor.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.metric.bleu.bleu attribute)": [[130, "neural_compressor.metric.bleu.BLEU.predictions"]], "punct_nondigit_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[130, "neural_compressor.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[130, "neural_compressor.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.metric.bleu_util)": [[131, "neural_compressor.metric.bleu_util.compute_bleu"]], "neural_compressor.metric.bleu_util": [[131, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[132, "module-neural_compressor.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.metric.coco_tools)": [[133, "neural_compressor.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.metric.coco_tools)": [[133, "neural_compressor.metric.coco_tools.COCOWrapper"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.metric.coco_tools)": [[133, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.metric.coco_tools)": [[133, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.metric.coco_tools)": [[133, "neural_compressor.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "dataset (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[133, "neural_compressor.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[133, "neural_compressor.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.metric.coco_tools": [[133, "module-neural_compressor.metric.coco_tools"]], "evaluate() (in module neural_compressor.metric.evaluate_squad)": [[134, "neural_compressor.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.metric.evaluate_squad)": [[134, "neural_compressor.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.metric.evaluate_squad)": [[134, "neural_compressor.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.evaluate_squad)": [[134, "neural_compressor.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.metric.evaluate_squad": [[134, "module-neural_compressor.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.metric.f1)": [[135, "neural_compressor.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.metric.f1)": [[135, "neural_compressor.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.f1)": [[135, "neural_compressor.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[135, "module-neural_compressor.metric.f1"]], "normalize_answer() (in module neural_compressor.metric.f1)": [[135, "neural_compressor.metric.f1.normalize_answer"]], "neural_compressor.metric": [[136, "module-neural_compressor.metric"]], "accuracy (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.F1"]], "generaltopk (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.Loss"]], "mae (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.MAE"]], "metrics (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.METRICS"]], "mse (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.MXNetMetrics"]], "metric (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.Metric"]], "onnxrtglue (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.RMSE"]], "roc (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.ROC"]], "squadf1 (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.metric.metric.mae attribute)": [[137, "neural_compressor.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.metric.metric.mse attribute)": [[137, "neural_compressor.metric.metric.MSE.compare_label"]], "k (neural_compressor.metric.metric.generaltopk attribute)": [[137, "neural_compressor.metric.metric.GeneralTopK.k"]], "k (neural_compressor.metric.metric.tensorflowtopk attribute)": [[137, "neural_compressor.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.metric.metric.accuracy attribute)": [[137, "neural_compressor.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.metric.metric.mae attribute)": [[137, "neural_compressor.metric.metric.MAE.label_list"]], "label_list (neural_compressor.metric.metric.mse attribute)": [[137, "neural_compressor.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.mIOU"]], "metric_registry() (in module neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.metric_registry"]], "metrics (neural_compressor.metric.metric.metrics attribute)": [[137, "neural_compressor.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.metric.metric.mxnetmetrics attribute)": [[137, "neural_compressor.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtitmetrics attribute)": [[137, "neural_compressor.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtqlmetrics attribute)": [[137, "neural_compressor.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.metric.metric.pytorchmetrics attribute)": [[137, "neural_compressor.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.metric.metric.tensorflowmetrics attribute)": [[137, "neural_compressor.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.metric.metric.rmse attribute)": [[137, "neural_compressor.metric.metric.RMSE.mse"]], "neural_compressor.metric.metric": [[137, "module-neural_compressor.metric.metric"]], "num_correct (neural_compressor.metric.metric.generaltopk attribute)": [[137, "neural_compressor.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.metric.metric.tensorflowtopk attribute)": [[137, "neural_compressor.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.metric.metric.generaltopk attribute)": [[137, "neural_compressor.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.metric.metric.tensorflowtopk attribute)": [[137, "neural_compressor.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.metric.metric.accuracy attribute)": [[137, "neural_compressor.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.metric.metric.mae attribute)": [[137, "neural_compressor.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.metric.metric.mse attribute)": [[137, "neural_compressor.metric.metric.MSE.pred_list"]], "register_customer_metric() (in module neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.register_customer_metric"]], "sample (neural_compressor.metric.metric.accuracy attribute)": [[137, "neural_compressor.metric.metric.Accuracy.sample"]], "sample (neural_compressor.metric.metric.loss attribute)": [[137, "neural_compressor.metric.metric.Loss.sample"]], "sum (neural_compressor.metric.metric.loss attribute)": [[137, "neural_compressor.metric.metric.Loss.sum"]], "fit() (in module neural_compressor.mix_precision)": [[138, "neural_compressor.mix_precision.fit"]], "neural_compressor.mix_precision": [[138, "module-neural_compressor.mix_precision"]], "basemodel (class in neural_compressor.model.base_model)": [[139, "neural_compressor.model.base_model.BaseModel"]], "neural_compressor.model.base_model": [[139, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[140, "module-neural_compressor.model"]], "kerasmodel (class in neural_compressor.model.keras_model)": [[141, "neural_compressor.model.keras_model.KerasModel"]], "neural_compressor.model.keras_model": [[141, "module-neural_compressor.model.keras_model"]], "model (class in neural_compressor.model.model)": [[142, "neural_compressor.model.model.Model"]], "get_model_fwk_name() (in module neural_compressor.model.model)": [[142, "neural_compressor.model.model.get_model_fwk_name"]], "neural_compressor.model.model": [[142, "module-neural_compressor.model.model"]], "mxnetmodel (class in neural_compressor.model.mxnet_model)": [[143, "neural_compressor.model.mxnet_model.MXNetModel"]], "neural_compressor.model.mxnet_model": [[143, "module-neural_compressor.model.mxnet_model"]], "tfslimnetsfactory (class in neural_compressor.model.nets_factory)": [[144, "neural_compressor.model.nets_factory.TFSlimNetsFactory"]], "neural_compressor.model.nets_factory": [[144, "module-neural_compressor.model.nets_factory"]], "onnxmodel (class in neural_compressor.model.onnx_model)": [[145, "neural_compressor.model.onnx_model.ONNXModel"]], "neural_compressor.model.onnx_model": [[145, "module-neural_compressor.model.onnx_model"]], "tensorflowbasemodel (class in neural_compressor.model.tensorflow_model)": [[146, "neural_compressor.model.tensorflow_model.TensorflowBaseModel"]], "tensorflowcheckpointmodel (class in neural_compressor.model.tensorflow_model)": [[146, "neural_compressor.model.tensorflow_model.TensorflowCheckpointModel"]], "tensorflowllmmodel (class in neural_compressor.model.tensorflow_model)": [[146, "neural_compressor.model.tensorflow_model.TensorflowLLMModel"]], "tensorflowmodel (class in neural_compressor.model.tensorflow_model)": [[146, "neural_compressor.model.tensorflow_model.TensorflowModel"]], "tensorflowqatmodel (class in neural_compressor.model.tensorflow_model)": [[146, "neural_compressor.model.tensorflow_model.TensorflowQATModel"]], "tensorflowsavedmodelmodel (class in neural_compressor.model.tensorflow_model)": [[146, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel"]], "checkpoint_session() (in module neural_compressor.model.tensorflow_model)": [[146, "neural_compressor.model.tensorflow_model.checkpoint_session"]], "estimator_session() (in module neural_compressor.model.tensorflow_model)": [[146, "neural_compressor.model.tensorflow_model.estimator_session"]], "frozen_pb_session() (in module neural_compressor.model.tensorflow_model)": [[146, "neural_compressor.model.tensorflow_model.frozen_pb_session"]], "get_model_type() (in module neural_compressor.model.tensorflow_model)": [[146, "neural_compressor.model.tensorflow_model.get_model_type"]], "graph_def_session() (in module neural_compressor.model.tensorflow_model)": [[146, "neural_compressor.model.tensorflow_model.graph_def_session"]], "graph_session() (in module neural_compressor.model.tensorflow_model)": [[146, "neural_compressor.model.tensorflow_model.graph_session"]], "keras_session() (in module neural_compressor.model.tensorflow_model)": [[146, "neural_compressor.model.tensorflow_model.keras_session"]], "load_saved_model() (in module neural_compressor.model.tensorflow_model)": [[146, "neural_compressor.model.tensorflow_model.load_saved_model"]], "neural_compressor.model.tensorflow_model": [[146, "module-neural_compressor.model.tensorflow_model"]], "saved_model_session() (in module neural_compressor.model.tensorflow_model)": [[146, "neural_compressor.model.tensorflow_model.saved_model_session"]], "slim_session() (in module neural_compressor.model.tensorflow_model)": [[146, "neural_compressor.model.tensorflow_model.slim_session"]], "try_loading_keras() (in module neural_compressor.model.tensorflow_model)": [[146, "neural_compressor.model.tensorflow_model.try_loading_keras"]], "validate_and_inference_input_output() (in module neural_compressor.model.tensorflow_model)": [[146, "neural_compressor.model.tensorflow_model.validate_and_inference_input_output"]], "validate_graph_node() (in module neural_compressor.model.tensorflow_model)": [[146, "neural_compressor.model.tensorflow_model.validate_graph_node"]], "ipexmodel (class in neural_compressor.model.torch_model)": [[147, "neural_compressor.model.torch_model.IPEXModel"]], "pytorchbasemodel (class in neural_compressor.model.torch_model)": [[147, "neural_compressor.model.torch_model.PyTorchBaseModel"]], "pytorchfxmodel (class in neural_compressor.model.torch_model)": [[147, "neural_compressor.model.torch_model.PyTorchFXModel"]], "pytorchmodel (class in neural_compressor.model.torch_model)": [[147, "neural_compressor.model.torch_model.PyTorchModel"]], "neural_compressor.model.torch_model": [[147, "module-neural_compressor.model.torch_model"]], "accuracy (class in neural_compressor.objective)": [[148, "neural_compressor.objective.Accuracy"]], "footprint (class in neural_compressor.objective)": [[148, "neural_compressor.objective.Footprint"]], "modelsize (class in neural_compressor.objective)": [[148, "neural_compressor.objective.ModelSize"]], "multiobjective (class in neural_compressor.objective)": [[148, "neural_compressor.objective.MultiObjective"]], "objective (class in neural_compressor.objective)": [[148, "neural_compressor.objective.Objective"]], "performance (class in neural_compressor.objective)": [[148, "neural_compressor.objective.Performance"]], "neural_compressor.objective": [[148, "module-neural_compressor.objective"]], "objective_custom_registry() (in module neural_compressor.objective)": [[148, "neural_compressor.objective.objective_custom_registry"]], "objective_registry() (in module neural_compressor.objective)": [[148, "neural_compressor.objective.objective_registry"]], "neural_compressor.profiling": [[149, "module-neural_compressor.profiling"]], "fit() (in module neural_compressor.quantization)": [[150, "neural_compressor.quantization.fit"]], "neural_compressor.quantization": [[150, "module-neural_compressor.quantization"]], "autotunestrategy (class in neural_compressor.strategy.auto)": [[151, "neural_compressor.strategy.auto.AutoTuneStrategy"]], "neural_compressor.strategy.auto": [[151, "module-neural_compressor.strategy.auto"]], "automixedprecisiontunestrategy (class in neural_compressor.strategy.auto_mixed_precision)": [[152, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[152, "module-neural_compressor.strategy.auto_mixed_precision"]], "basictunestrategy (class in neural_compressor.strategy.basic)": [[153, "neural_compressor.strategy.basic.BasicTuneStrategy"]], "neural_compressor.strategy.basic": [[153, "module-neural_compressor.strategy.basic"]], "bayesianoptimization (class in neural_compressor.strategy.bayesian)": [[154, "neural_compressor.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.strategy.bayesian)": [[154, "neural_compressor.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.strategy.bayesian)": [[154, "neural_compressor.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.strategy.bayesian)": [[154, "neural_compressor.strategy.bayesian.acq_max"]], "neural_compressor.strategy.bayesian": [[154, "module-neural_compressor.strategy.bayesian"]], "conservativetunestrategy (class in neural_compressor.strategy.conservative)": [[155, "neural_compressor.strategy.conservative.ConservativeTuneStrategy"]], "neural_compressor.strategy.conservative": [[155, "module-neural_compressor.strategy.conservative"]], "exhaustivetunestrategy (class in neural_compressor.strategy.exhaustive)": [[156, "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[156, "module-neural_compressor.strategy.exhaustive"]], "hawq_v2tunestrategy (class in neural_compressor.strategy.hawq_v2)": [[157, "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[157, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[158, "module-neural_compressor.strategy"]], "msetunestrategy (class in neural_compressor.strategy.mse)": [[159, "neural_compressor.strategy.mse.MSETuneStrategy"]], "neural_compressor.strategy.mse": [[159, "module-neural_compressor.strategy.mse"]], "mse_v2tunestrategy (class in neural_compressor.strategy.mse_v2)": [[160, "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.strategy.mse_v2": [[160, "module-neural_compressor.strategy.mse_v2"]], "randomtunestrategy (class in neural_compressor.strategy.random)": [[161, "neural_compressor.strategy.random.RandomTuneStrategy"]], "neural_compressor.strategy.random": [[161, "module-neural_compressor.strategy.random"]], "tunestrategy (class in neural_compressor.strategy.strategy)": [[162, "neural_compressor.strategy.strategy.TuneStrategy"]], "tunestrategymeta (class in neural_compressor.strategy.strategy)": [[162, "neural_compressor.strategy.strategy.TuneStrategyMeta"]], "neural_compressor.strategy.strategy": [[162, "module-neural_compressor.strategy.strategy"]], "strategy_registry() (in module neural_compressor.strategy.strategy)": [[162, "neural_compressor.strategy.strategy.strategy_registry"]], "neural_compressor.strategy.utils.constant": [[163, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[164, "module-neural_compressor.strategy.utils"]], "blockfallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[165, "neural_compressor.strategy.utils.tuning_sampler.BlockFallbackTuningSampler"]], "fallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[165, "neural_compressor.strategy.utils.tuning_sampler.FallbackTuningSampler"]], "lowerbitssampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[165, "neural_compressor.strategy.utils.tuning_sampler.LowerBitsSampler"]], "modelwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[165, "neural_compressor.strategy.utils.tuning_sampler.ModelWiseTuningSampler"]], "optypewisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[165, "neural_compressor.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler"]], "opwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[165, "neural_compressor.strategy.utils.tuning_sampler.OpWiseTuningSampler"]], "smoothquantsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[165, "neural_compressor.strategy.utils.tuning_sampler.SmoothQuantSampler"]], "tuningorder (class in neural_compressor.strategy.utils.tuning_sampler)": [[165, "neural_compressor.strategy.utils.tuning_sampler.TuningOrder"]], "tuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[165, "neural_compressor.strategy.utils.tuning_sampler.TuningSampler"]], "weightonlyquantsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[165, "neural_compressor.strategy.utils.tuning_sampler.WeightOnlyQuantSampler"]], "neural_compressor.strategy.utils.tuning_sampler": [[165, "module-neural_compressor.strategy.utils.tuning_sampler"]], "tuningitem (class in neural_compressor.strategy.utils.tuning_space)": [[166, "neural_compressor.strategy.utils.tuning_space.TuningItem"]], "tuningspace (class in neural_compressor.strategy.utils.tuning_space)": [[166, "neural_compressor.strategy.utils.tuning_space.TuningSpace"]], "initial_tuning_cfg_with_quant_mode() (in module neural_compressor.strategy.utils.tuning_space)": [[166, "neural_compressor.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode"]], "neural_compressor.strategy.utils.tuning_space": [[166, "module-neural_compressor.strategy.utils.tuning_space"]], "pattern_to_internal() (in module neural_compressor.strategy.utils.tuning_space)": [[166, "neural_compressor.strategy.utils.tuning_space.pattern_to_internal"]], "pattern_to_path() (in module neural_compressor.strategy.utils.tuning_space)": [[166, "neural_compressor.strategy.utils.tuning_space.pattern_to_path"]], "quant_mode_from_pattern() (in module neural_compressor.strategy.utils.tuning_space)": [[166, "neural_compressor.strategy.utils.tuning_space.quant_mode_from_pattern"]], "optuningconfig (class in neural_compressor.strategy.utils.tuning_structs)": [[167, "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig"]], "neural_compressor.strategy.utils.tuning_structs": [[167, "module-neural_compressor.strategy.utils.tuning_structs"]], "classregister (class in neural_compressor.strategy.utils.utility)": [[168, "neural_compressor.strategy.utils.utility.ClassRegister"]], "ordereddefaultdict (class in neural_compressor.strategy.utils.utility)": [[168, "neural_compressor.strategy.utils.utility.OrderedDefaultDict"]], "quantoptions (class in neural_compressor.strategy.utils.utility)": [[168, "neural_compressor.strategy.utils.utility.QuantOptions"]], "quanttype (class in neural_compressor.strategy.utils.utility)": [[168, "neural_compressor.strategy.utils.utility.QuantType"]], "build_slave_faker_model() (in module neural_compressor.strategy.utils.utility)": [[168, "neural_compressor.strategy.utils.utility.build_slave_faker_model"]], "extract_data_type() (in module neural_compressor.strategy.utils.utility)": [[168, "neural_compressor.strategy.utils.utility.extract_data_type"]], "get_adaptor_name() (in module neural_compressor.strategy.utils.utility)": [[168, "neural_compressor.strategy.utils.utility.get_adaptor_name"]], "neural_compressor.strategy.utils.utility": [[168, "module-neural_compressor.strategy.utils.utility"]], "preprocess_user_cfg() (in module neural_compressor.strategy.utils.utility)": [[168, "neural_compressor.strategy.utils.utility.preprocess_user_cfg"]], "reverted_data_type() (in module neural_compressor.strategy.utils.utility)": [[168, "neural_compressor.strategy.utils.utility.reverted_data_type"]], "callbacks (class in neural_compressor.training)": [[169, "neural_compressor.training.CallBacks"]], "compressionmanager (class in neural_compressor.training)": [[169, "neural_compressor.training.CompressionManager"]], "fit() (in module neural_compressor.training)": [[169, "neural_compressor.training.fit"]], "neural_compressor.training": [[169, "module-neural_compressor.training"]], "prepare_compression() (in module neural_compressor.training)": [[169, "neural_compressor.training.prepare_compression"]], "layerhistogramcollector (class in neural_compressor.utils.collect_layer_histogram)": [[170, "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector"]], "neural_compressor.utils.collect_layer_histogram": [[170, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[171, "module-neural_compressor.utils.constant"]], "create_dataloader() (in module neural_compressor.utils.create_obj_from_config)": [[172, "neural_compressor.utils.create_obj_from_config.create_dataloader"]], "create_dataset() (in module neural_compressor.utils.create_obj_from_config)": [[172, "neural_compressor.utils.create_obj_from_config.create_dataset"]], "create_eval_func() (in module neural_compressor.utils.create_obj_from_config)": [[172, "neural_compressor.utils.create_obj_from_config.create_eval_func"]], "create_train_func() (in module neural_compressor.utils.create_obj_from_config)": [[172, "neural_compressor.utils.create_obj_from_config.create_train_func"]], "get_algorithm() (in module neural_compressor.utils.create_obj_from_config)": [[172, "neural_compressor.utils.create_obj_from_config.get_algorithm"]], "get_func_from_config() (in module neural_compressor.utils.create_obj_from_config)": [[172, "neural_compressor.utils.create_obj_from_config.get_func_from_config"]], "get_metrics() (in module neural_compressor.utils.create_obj_from_config)": [[172, "neural_compressor.utils.create_obj_from_config.get_metrics"]], "get_postprocess() (in module neural_compressor.utils.create_obj_from_config)": [[172, "neural_compressor.utils.create_obj_from_config.get_postprocess"]], "get_preprocess() (in module neural_compressor.utils.create_obj_from_config)": [[172, "neural_compressor.utils.create_obj_from_config.get_preprocess"]], "neural_compressor.utils.create_obj_from_config": [[172, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[173, "module-neural_compressor.utils"]], "kl_divergence (class in neural_compressor.utils.kl_divergence)": [[174, "neural_compressor.utils.kl_divergence.KL_Divergence"]], "neural_compressor.utils.kl_divergence": [[174, "module-neural_compressor.utils.kl_divergence"]], "optimizedmodel (class in neural_compressor.utils.load_huggingface)": [[175, "neural_compressor.utils.load_huggingface.OptimizedModel"]], "export_compressed_model() (in module neural_compressor.utils.load_huggingface)": [[175, "neural_compressor.utils.load_huggingface.export_compressed_model"]], "neural_compressor.utils.load_huggingface": [[175, "module-neural_compressor.utils.load_huggingface"]], "save_for_huggingface_upstream() (in module neural_compressor.utils.load_huggingface)": [[175, "neural_compressor.utils.load_huggingface.save_for_huggingface_upstream"]], "logger (class in neural_compressor.utils.logger)": [[176, "neural_compressor.utils.logger.Logger"]], "debug() (in module neural_compressor.utils.logger)": [[176, "neural_compressor.utils.logger.debug"]], "error() (in module neural_compressor.utils.logger)": [[176, "neural_compressor.utils.logger.error"]], "fatal() (in module neural_compressor.utils.logger)": [[176, "neural_compressor.utils.logger.fatal"]], "info() (in module neural_compressor.utils.logger)": [[176, "neural_compressor.utils.logger.info"]], "log() (in module neural_compressor.utils.logger)": [[176, "neural_compressor.utils.logger.log"]], "neural_compressor.utils.logger": [[176, "module-neural_compressor.utils.logger"]], "warn() (in module neural_compressor.utils.logger)": [[176, "neural_compressor.utils.logger.warn"]], "warning() (in module neural_compressor.utils.logger)": [[176, "neural_compressor.utils.logger.warning"]], "get_model_path() (in module neural_compressor.utils.neural_insights_utils)": [[177, "neural_compressor.utils.neural_insights_utils.get_model_path"]], "neural_compressor.utils.neural_insights_utils": [[177, "module-neural_compressor.utils.neural_insights_utils"]], "register_neural_insights_workload() (in module neural_compressor.utils.neural_insights_utils)": [[177, "neural_compressor.utils.neural_insights_utils.register_neural_insights_workload"]], "update_neural_insights_workload() (in module neural_compressor.utils.neural_insights_utils)": [[177, "neural_compressor.utils.neural_insights_utils.update_neural_insights_workload"]], "update_neural_insights_workload_accuracy_data() (in module neural_compressor.utils.neural_insights_utils)": [[177, "neural_compressor.utils.neural_insights_utils.update_neural_insights_workload_accuracy_data"]], "neural_compressor.utils.options": [[178, "module-neural_compressor.utils.options"]], "onnxrt (class in neural_compressor.utils.options)": [[178, "neural_compressor.utils.options.onnxrt"]], "is_int8_model() (in module neural_compressor.utils.pytorch)": [[179, "neural_compressor.utils.pytorch.is_int8_model"]], "load() (in module neural_compressor.utils.pytorch)": [[179, "neural_compressor.utils.pytorch.load"]], "load_weight_only() (in module neural_compressor.utils.pytorch)": [[179, "neural_compressor.utils.pytorch.load_weight_only"]], "neural_compressor.utils.pytorch": [[179, "module-neural_compressor.utils.pytorch"]], "recover_model_from_json() (in module neural_compressor.utils.pytorch)": [[179, "neural_compressor.utils.pytorch.recover_model_from_json"]], "captureoutputtofile (class in neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.CaptureOutputToFile"]], "cpuinfo (class in neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.CpuInfo"]], "dequantize() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.Dequantize"]], "dotdict (class in neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.DotDict"]], "global_state (class in neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.GLOBAL_STATE"]], "lazyimport (class in neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.LazyImport"]], "mode (class in neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.MODE"]], "opentry (class in neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.OpEntry"]], "statistics (class in neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.Statistics"]], "alias_param() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.alias_param"]], "calculate_mse() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.calculate_mse"]], "check_key_exist() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.check_key_exist"]], "combine_histogram() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.combine_histogram"]], "compare_objects() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.compare_objects"]], "compute_sparsity() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.compute_sparsity"]], "dequantize_weight() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.dequantize_weight"]], "dump_class_attrs() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.dump_class_attrs"]], "dump_data_to_local() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.dump_data_to_local"]], "dump_elapsed_time() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.dump_elapsed_time"]], "dump_table() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.dump_table"]], "dump_table_to_csv() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.dump_table_to_csv"]], "equal_dicts() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.equal_dicts"]], "fault_tolerant_file() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.fault_tolerant_file"]], "get_all_fp32_data() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.get_all_fp32_data"]], "get_number_of_sockets() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.get_number_of_sockets"]], "get_op_list() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.get_op_list"]], "get_size() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.get_size"]], "get_tensor_histogram() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.get_tensor_histogram"]], "get_tensors_info() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.get_tensors_info"]], "get_tuning_history() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.get_tuning_history"]], "get_weights_details() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.get_weights_details"]], "load_data_from_pkl() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.load_data_from_pkl"]], "mse_metric_gap() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.mse_metric_gap"]], "neural_compressor.utils.utility": [[180, "module-neural_compressor.utils.utility"]], "print_op_list() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.print_op_list"]], "print_table() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.print_table"]], "recover() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.recover"]], "set_random_seed() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.set_random_seed"]], "set_resume_from() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.set_resume_from"]], "set_tensorboard() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.set_tensorboard"]], "set_workspace() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.set_workspace"]], "show_memory_info() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.show_memory_info"]], "singleton() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.singleton"]], "str2array() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.str2array"]], "time_limit() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.time_limit"]], "version1_eq_version2() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.version1_lte_version2"]], "weightsdetails (class in neural_compressor.utils.weights_details)": [[181, "neural_compressor.utils.weights_details.WeightsDetails"]], "weightsstatistics (class in neural_compressor.utils.weights_details)": [[181, "neural_compressor.utils.weights_details.WeightsStatistics"]], "neural_compressor.utils.weights_details": [[181, "module-neural_compressor.utils.weights_details"]], "neural_compressor.version": [[182, "module-neural_compressor.version"]]}})