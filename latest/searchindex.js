Search.setIndex({"docnames": ["autoapi/block_mask/index", "autoapi/neural_compressor/adaptor/adaptor/index", "autoapi/neural_compressor/adaptor/index", "autoapi/neural_compressor/adaptor/keras/index", "autoapi/neural_compressor/adaptor/keras_utils/conv2d/index", "autoapi/neural_compressor/adaptor/keras_utils/dense/index", "autoapi/neural_compressor/adaptor/keras_utils/depthwise_conv2d/index", "autoapi/neural_compressor/adaptor/keras_utils/index", "autoapi/neural_compressor/adaptor/keras_utils/pool2d/index", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index", "autoapi/neural_compressor/adaptor/keras_utils/separable_conv2d/index", "autoapi/neural_compressor/adaptor/mxnet/index", "autoapi/neural_compressor/adaptor/mxnet_utils/index", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index", "autoapi/neural_compressor/adaptor/onnxrt/index", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index", "autoapi/neural_compressor/adaptor/ox_utils/calibrator/index", "autoapi/neural_compressor/adaptor/ox_utils/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/norm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/reduce/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/unary_op/index", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index", "autoapi/neural_compressor/adaptor/ox_utils/smooth_quant/index", "autoapi/neural_compressor/adaptor/ox_utils/util/index", "autoapi/neural_compressor/adaptor/ox_utils/weight_only/index", "autoapi/neural_compressor/adaptor/pytorch/index", "autoapi/neural_compressor/adaptor/query/index", "autoapi/neural_compressor/adaptor/tensorflow/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/dequantize_cast_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_schema/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/tf2onnx_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index", "autoapi/neural_compressor/adaptor/tf_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_calibration/index", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_scaler/index", "autoapi/neural_compressor/adaptor/tf_utils/tf2onnx_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index", "autoapi/neural_compressor/adaptor/tf_utils/util/index", "autoapi/neural_compressor/adaptor/torch_utils/auto_round/index", "autoapi/neural_compressor/adaptor/torch_utils/autoround/autoround/index", "autoapi/neural_compressor/adaptor/torch_utils/autoround/export/index", "autoapi/neural_compressor/adaptor/torch_utils/autoround/index", "autoapi/neural_compressor/adaptor/torch_utils/autoround/model_wrapper/index", "autoapi/neural_compressor/adaptor/torch_utils/autoround/sign_sgd/index", "autoapi/neural_compressor/adaptor/torch_utils/awq/index", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index", "autoapi/neural_compressor/adaptor/torch_utils/gptq/index", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index", "autoapi/neural_compressor/adaptor/torch_utils/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/modified_pickle/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/quantize/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/torch_load/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/utils/index", "autoapi/neural_compressor/adaptor/torch_utils/mixed_precision/index", "autoapi/neural_compressor/adaptor/torch_utils/model_wrapper/index", "autoapi/neural_compressor/adaptor/torch_utils/pattern_detector/index", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index", "autoapi/neural_compressor/adaptor/torch_utils/teq/index", "autoapi/neural_compressor/adaptor/torch_utils/util/index", "autoapi/neural_compressor/adaptor/torch_utils/waq/auto_alpha/index", "autoapi/neural_compressor/adaptor/torch_utils/waq/calibration/index", "autoapi/neural_compressor/adaptor/torch_utils/waq/graph_trace/index", "autoapi/neural_compressor/adaptor/torch_utils/waq/index", "autoapi/neural_compressor/adaptor/torch_utils/waq/smooth_quant/index", "autoapi/neural_compressor/adaptor/torch_utils/waq/utils/index", "autoapi/neural_compressor/adaptor/torch_utils/weight_only/index", "autoapi/neural_compressor/algorithm/algorithm/index", "autoapi/neural_compressor/algorithm/fast_bias_correction/index", "autoapi/neural_compressor/algorithm/index", "autoapi/neural_compressor/algorithm/smooth_quant/index", "autoapi/neural_compressor/algorithm/weight_correction/index", "autoapi/neural_compressor/benchmark/index", "autoapi/neural_compressor/common/base_config/index", "autoapi/neural_compressor/common/base_tuning/index", "autoapi/neural_compressor/common/index", "autoapi/neural_compressor/common/tuning_param/index", "autoapi/neural_compressor/common/utils/constants/index", "autoapi/neural_compressor/common/utils/index", "autoapi/neural_compressor/common/utils/logger/index", "autoapi/neural_compressor/common/utils/save_load/index", "autoapi/neural_compressor/common/utils/utility/index", "autoapi/neural_compressor/compression/callbacks/index", "autoapi/neural_compressor/compression/distillation/criterions/index", "autoapi/neural_compressor/compression/distillation/index", "autoapi/neural_compressor/compression/distillation/optimizers/index", "autoapi/neural_compressor/compression/distillation/utility/index", "autoapi/neural_compressor/compression/hpo/index", "autoapi/neural_compressor/compression/hpo/sa_optimizer/index", "autoapi/neural_compressor/compression/hpo/search_algorithms/index", "autoapi/neural_compressor/compression/hpo/search_space/index", "autoapi/neural_compressor/compression/index", "autoapi/neural_compressor/compression/pruner/criteria/index", "autoapi/neural_compressor/compression/pruner/dsnot/index", "autoapi/neural_compressor/compression/pruner/index", "autoapi/neural_compressor/compression/pruner/model_slim/auto_slim/index", "autoapi/neural_compressor/compression/pruner/model_slim/index", "autoapi/neural_compressor/compression/pruner/model_slim/pattern_analyzer/index", "autoapi/neural_compressor/compression/pruner/model_slim/weight_slim/index", "autoapi/neural_compressor/compression/pruner/patterns/base/index", "autoapi/neural_compressor/compression/pruner/patterns/index", "autoapi/neural_compressor/compression/pruner/patterns/mha/index", "autoapi/neural_compressor/compression/pruner/patterns/ninm/index", "autoapi/neural_compressor/compression/pruner/patterns/nxm/index", "autoapi/neural_compressor/compression/pruner/pruners/base/index", "autoapi/neural_compressor/compression/pruner/pruners/basic/index", "autoapi/neural_compressor/compression/pruner/pruners/block_mask/index", "autoapi/neural_compressor/compression/pruner/pruners/index", "autoapi/neural_compressor/compression/pruner/pruners/mha/index", "autoapi/neural_compressor/compression/pruner/pruners/pattern_lock/index", "autoapi/neural_compressor/compression/pruner/pruners/progressive/index", "autoapi/neural_compressor/compression/pruner/pruners/retrain_free/index", "autoapi/neural_compressor/compression/pruner/pruners/sparse_gpt/index", "autoapi/neural_compressor/compression/pruner/pruning/index", "autoapi/neural_compressor/compression/pruner/regs/index", "autoapi/neural_compressor/compression/pruner/schedulers/index", "autoapi/neural_compressor/compression/pruner/tf_criteria/index", "autoapi/neural_compressor/compression/pruner/utils/index", "autoapi/neural_compressor/compression/pruner/wanda/index", "autoapi/neural_compressor/compression/pruner/wanda/prune/index", "autoapi/neural_compressor/compression/pruner/wanda/utils/index", "autoapi/neural_compressor/compression/pruner/wanda/wrapper/index", "autoapi/neural_compressor/conf/config/index", "autoapi/neural_compressor/conf/dotdict/index", "autoapi/neural_compressor/conf/index", "autoapi/neural_compressor/conf/pythonic_config/index", "autoapi/neural_compressor/config/index", "autoapi/neural_compressor/contrib/index", "autoapi/neural_compressor/contrib/strategy/index", "autoapi/neural_compressor/contrib/strategy/sigopt/index", "autoapi/neural_compressor/contrib/strategy/tpe/index", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/data/dataloaders/dataloader/index", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/data/dataloaders/fetcher/index", "autoapi/neural_compressor/data/dataloaders/index", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/data/dataloaders/sampler/index", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/data/datasets/bert_dataset/index", "autoapi/neural_compressor/data/datasets/coco_dataset/index", "autoapi/neural_compressor/data/datasets/dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/data/datasets/index", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/data/filters/coco_filter/index", "autoapi/neural_compressor/data/filters/filter/index", "autoapi/neural_compressor/data/filters/index", "autoapi/neural_compressor/data/index", "autoapi/neural_compressor/data/transforms/coco_transform/index", "autoapi/neural_compressor/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/data/transforms/index", "autoapi/neural_compressor/data/transforms/postprocess/index", "autoapi/neural_compressor/data/transforms/tokenization/index", "autoapi/neural_compressor/data/transforms/transform/index", "autoapi/neural_compressor/experimental/benchmark/index", "autoapi/neural_compressor/experimental/common/criterion/index", "autoapi/neural_compressor/experimental/common/dataloader/index", "autoapi/neural_compressor/experimental/common/index", "autoapi/neural_compressor/experimental/common/metric/index", "autoapi/neural_compressor/experimental/common/model/index", "autoapi/neural_compressor/experimental/common/optimizer/index", "autoapi/neural_compressor/experimental/common/postprocess/index", "autoapi/neural_compressor/experimental/common/torch_utils/index", "autoapi/neural_compressor/experimental/component/index", "autoapi/neural_compressor/experimental/compression/index", "autoapi/neural_compressor/experimental/contrib/index", "autoapi/neural_compressor/experimental/contrib/strategy/index", "autoapi/neural_compressor/experimental/contrib/strategy/sigopt/index", "autoapi/neural_compressor/experimental/contrib/strategy/tpe/index", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index", "autoapi/neural_compressor/experimental/data/dataloaders/index", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/index", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index", "autoapi/neural_compressor/experimental/data/filters/filter/index", "autoapi/neural_compressor/experimental/data/filters/index", "autoapi/neural_compressor/experimental/data/index", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/experimental/data/transforms/index", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index", "autoapi/neural_compressor/experimental/data/transforms/transform/index", "autoapi/neural_compressor/experimental/distillation/index", "autoapi/neural_compressor/experimental/export/index", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index", "autoapi/neural_compressor/experimental/export/tf2onnx/index", "autoapi/neural_compressor/experimental/export/torch2onnx/index", "autoapi/neural_compressor/experimental/graph_optimization/index", "autoapi/neural_compressor/experimental/index", "autoapi/neural_compressor/experimental/metric/bleu/index", "autoapi/neural_compressor/experimental/metric/bleu_util/index", "autoapi/neural_compressor/experimental/metric/coco_label_map/index", "autoapi/neural_compressor/experimental/metric/coco_tools/index", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index", "autoapi/neural_compressor/experimental/metric/f1/index", "autoapi/neural_compressor/experimental/metric/index", "autoapi/neural_compressor/experimental/metric/metric/index", "autoapi/neural_compressor/experimental/mixed_precision/index", "autoapi/neural_compressor/experimental/model_conversion/index", "autoapi/neural_compressor/experimental/nas/basic_nas/index", "autoapi/neural_compressor/experimental/nas/dynas/index", "autoapi/neural_compressor/experimental/nas/index", "autoapi/neural_compressor/experimental/nas/nas/index", "autoapi/neural_compressor/experimental/nas/nas_utils/index", "autoapi/neural_compressor/experimental/nas/search_algorithms/index", "autoapi/neural_compressor/experimental/pruner_legacy/gradient_sensitivity/index", "autoapi/neural_compressor/experimental/pruner_legacy/group_lasso/index", "autoapi/neural_compressor/experimental/pruner_legacy/index", "autoapi/neural_compressor/experimental/pruner_legacy/magnitude/index", "autoapi/neural_compressor/experimental/pruner_legacy/pattern_lock/index", "autoapi/neural_compressor/experimental/pruner_legacy/pruner/index", "autoapi/neural_compressor/experimental/pruning/index", "autoapi/neural_compressor/experimental/pruning_recipes/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index", "autoapi/neural_compressor/experimental/pruning_v2/index", "autoapi/neural_compressor/experimental/pytorch_pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index", "autoapi/neural_compressor/experimental/quantization/index", "autoapi/neural_compressor/experimental/scheduler/index", "autoapi/neural_compressor/experimental/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/experimental/strategy/basic/index", "autoapi/neural_compressor/experimental/strategy/bayesian/index", "autoapi/neural_compressor/experimental/strategy/exhaustive/index", "autoapi/neural_compressor/experimental/strategy/index", "autoapi/neural_compressor/experimental/strategy/mse/index", "autoapi/neural_compressor/experimental/strategy/mse_v2/index", "autoapi/neural_compressor/experimental/strategy/random/index", "autoapi/neural_compressor/experimental/strategy/strategy/index", "autoapi/neural_compressor/experimental/strategy/utils/constant/index", "autoapi/neural_compressor/experimental/strategy/utils/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_space/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/experimental/strategy/utils/utility/index", "autoapi/neural_compressor/index", "autoapi/neural_compressor/metric/bleu/index", "autoapi/neural_compressor/metric/bleu_util/index", "autoapi/neural_compressor/metric/coco_label_map/index", "autoapi/neural_compressor/metric/coco_tools/index", "autoapi/neural_compressor/metric/evaluate_squad/index", "autoapi/neural_compressor/metric/f1/index", "autoapi/neural_compressor/metric/index", "autoapi/neural_compressor/metric/metric/index", "autoapi/neural_compressor/mix_precision/index", "autoapi/neural_compressor/model/base_model/index", "autoapi/neural_compressor/model/index", "autoapi/neural_compressor/model/keras_model/index", "autoapi/neural_compressor/model/model/index", "autoapi/neural_compressor/model/mxnet_model/index", "autoapi/neural_compressor/model/nets_factory/index", "autoapi/neural_compressor/model/onnx_model/index", "autoapi/neural_compressor/model/tensorflow_model/index", "autoapi/neural_compressor/model/torch_model/index", "autoapi/neural_compressor/objective/index", "autoapi/neural_compressor/onnxrt/algorithms/index", "autoapi/neural_compressor/onnxrt/algorithms/layer_wise/core/index", "autoapi/neural_compressor/onnxrt/algorithms/layer_wise/index", "autoapi/neural_compressor/onnxrt/algorithms/smoother/calibrator/index", "autoapi/neural_compressor/onnxrt/algorithms/smoother/core/index", "autoapi/neural_compressor/onnxrt/algorithms/smoother/index", "autoapi/neural_compressor/onnxrt/algorithms/weight_only/awq/index", "autoapi/neural_compressor/onnxrt/algorithms/weight_only/gptq/index", "autoapi/neural_compressor/onnxrt/algorithms/weight_only/index", "autoapi/neural_compressor/onnxrt/algorithms/weight_only/rtn/index", "autoapi/neural_compressor/onnxrt/algorithms/weight_only/utility/index", "autoapi/neural_compressor/onnxrt/index", "autoapi/neural_compressor/onnxrt/quantization/algorithm_entry/index", "autoapi/neural_compressor/onnxrt/quantization/autotune/index", "autoapi/neural_compressor/onnxrt/quantization/calibrate/index", "autoapi/neural_compressor/onnxrt/quantization/config/index", "autoapi/neural_compressor/onnxrt/quantization/index", "autoapi/neural_compressor/onnxrt/quantization/quantize/index", "autoapi/neural_compressor/onnxrt/utils/index", "autoapi/neural_compressor/onnxrt/utils/onnx_model/index", "autoapi/neural_compressor/onnxrt/utils/utility/index", "autoapi/neural_compressor/profiling/index", "autoapi/neural_compressor/profiling/parser/factory/index", "autoapi/neural_compressor/profiling/parser/index", "autoapi/neural_compressor/profiling/parser/onnx_parser/factory/index", "autoapi/neural_compressor/profiling/parser/onnx_parser/index", "autoapi/neural_compressor/profiling/parser/onnx_parser/parser/index", "autoapi/neural_compressor/profiling/parser/parser/index", "autoapi/neural_compressor/profiling/parser/result/index", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/factory/index", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/index", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/parser/index", "autoapi/neural_compressor/profiling/profiler/factory/index", "autoapi/neural_compressor/profiling/profiler/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/factory/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/profiler/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/utils/index", "autoapi/neural_compressor/profiling/profiler/profiler/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/factory/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/profiler/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/utils/index", "autoapi/neural_compressor/quantization/index", "autoapi/neural_compressor/strategy/auto/index", "autoapi/neural_compressor/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/strategy/basic/index", "autoapi/neural_compressor/strategy/bayesian/index", "autoapi/neural_compressor/strategy/conservative/index", "autoapi/neural_compressor/strategy/exhaustive/index", "autoapi/neural_compressor/strategy/hawq_v2/index", "autoapi/neural_compressor/strategy/index", "autoapi/neural_compressor/strategy/mse/index", "autoapi/neural_compressor/strategy/mse_v2/index", "autoapi/neural_compressor/strategy/random/index", "autoapi/neural_compressor/strategy/strategy/index", "autoapi/neural_compressor/strategy/utils/constant/index", "autoapi/neural_compressor/strategy/utils/index", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/strategy/utils/tuning_space/index", "autoapi/neural_compressor/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/strategy/utils/utility/index", "autoapi/neural_compressor/template/api_doc_example/index", "autoapi/neural_compressor/template/index", "autoapi/neural_compressor/tensorflow/algorithms/index", "autoapi/neural_compressor/tensorflow/algorithms/smoother/calibration/index", "autoapi/neural_compressor/tensorflow/algorithms/smoother/core/index", "autoapi/neural_compressor/tensorflow/algorithms/smoother/index", "autoapi/neural_compressor/tensorflow/algorithms/smoother/scaler/index", "autoapi/neural_compressor/tensorflow/algorithms/static_quant/index", "autoapi/neural_compressor/tensorflow/algorithms/static_quant/keras/index", "autoapi/neural_compressor/tensorflow/algorithms/static_quant/tensorflow/index", "autoapi/neural_compressor/tensorflow/index", "autoapi/neural_compressor/tensorflow/keras/index", "autoapi/neural_compressor/tensorflow/keras/layers/conv2d/index", "autoapi/neural_compressor/tensorflow/keras/layers/dense/index", "autoapi/neural_compressor/tensorflow/keras/layers/depthwise_conv2d/index", "autoapi/neural_compressor/tensorflow/keras/layers/index", "autoapi/neural_compressor/tensorflow/keras/layers/pool2d/index", "autoapi/neural_compressor/tensorflow/keras/layers/quantizer/index", "autoapi/neural_compressor/tensorflow/keras/layers/separable_conv2d/index", "autoapi/neural_compressor/tensorflow/keras/quantization/config/index", "autoapi/neural_compressor/tensorflow/keras/quantization/index", "autoapi/neural_compressor/tensorflow/quantization/algorithm_entry/index", "autoapi/neural_compressor/tensorflow/quantization/autotune/index", "autoapi/neural_compressor/tensorflow/quantization/config/index", "autoapi/neural_compressor/tensorflow/quantization/index", "autoapi/neural_compressor/tensorflow/quantization/quantize/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_converter/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_converter_without_calib/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/bf16/bf16_convert/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/bf16/dequantize_cast_optimizer/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/bf16/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_add_to_biasadd/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_layout/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_leakyrelu/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_nan_to_random/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_placeholder_to_const/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/dilated_contraction/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/dummy_biasadd/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/expanddims_optimizer/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fetch_weight_from_reshape/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fold_batch_norm/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fold_constant/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_biasadd_add/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_column_wise_mul/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_conv_with_math/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_decomposed_bn/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_decomposed_in/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_gelu/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_layer_norm/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_pad_with_conv/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_reshape_transpose/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/graph_cse_optimizer/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/grappler_pass/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/insert_print_node/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/move_squeeze_after_relu/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/pre_optimize/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/remove_training_nodes/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/rename_batch_norm/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/split_shared_input/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/strip_equivalent_nodes/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/strip_unused_nodes/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/switch_optimizer/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/graph_base/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/freeze_fake_quant/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/freeze_value/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/freeze_value_without_calib/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/fuse_conv_requantize/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/fuse_matmul_requantize/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/meta_op_optimizer/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/post_hostconst_converter/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/post_quantized_op_cse/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/rnn_convert/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/scale_propagation/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/qdq/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/qdq/insert_qdq_pattern/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/qdq/merge_duplicated_qdq/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/qdq/share_qdq_y_pattern/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_util/index", "autoapi/neural_compressor/tensorflow/quantization/utils/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/fake_quantize/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_config/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_helper/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_layers/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_layers/optimize_layer/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_wrapper/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_bn/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_concatv2/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_conv/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_deconv/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_in/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_matmul/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_pooling/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/optimize_qdq/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_base/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_bn/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_concatv2/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_conv/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_for_intel_cpu/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_matmul/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_pooling/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph_common/index", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/bias_correction/index", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/graph_transform_base/index", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/index", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/insert_logging/index", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/rerange_quantized_concat/index", "autoapi/neural_compressor/tensorflow/quantization/utils/utility/index", "autoapi/neural_compressor/tensorflow/utils/constants/index", "autoapi/neural_compressor/tensorflow/utils/data/index", "autoapi/neural_compressor/tensorflow/utils/index", "autoapi/neural_compressor/tensorflow/utils/model/index", "autoapi/neural_compressor/tensorflow/utils/model_wrappers/index", "autoapi/neural_compressor/tensorflow/utils/nets_factory/index", "autoapi/neural_compressor/tensorflow/utils/utility/index", "autoapi/neural_compressor/torch/algorithms/habana_fp8/fp8_quant/index", "autoapi/neural_compressor/torch/algorithms/habana_fp8/index", "autoapi/neural_compressor/torch/algorithms/habana_fp8/modules/index", "autoapi/neural_compressor/torch/algorithms/habana_fp8/observer/index", "autoapi/neural_compressor/torch/algorithms/habana_fp8/save_load/index", "autoapi/neural_compressor/torch/algorithms/habana_fp8/scale/index", "autoapi/neural_compressor/torch/algorithms/habana_fp8/tensor/index", "autoapi/neural_compressor/torch/algorithms/index", "autoapi/neural_compressor/torch/algorithms/layer_wise/index", "autoapi/neural_compressor/torch/algorithms/layer_wise/load/index", "autoapi/neural_compressor/torch/algorithms/layer_wise/modified_pickle/index", "autoapi/neural_compressor/torch/algorithms/layer_wise/utils/index", "autoapi/neural_compressor/torch/algorithms/smooth_quant/index", "autoapi/neural_compressor/torch/algorithms/smooth_quant/save_load/index", "autoapi/neural_compressor/torch/algorithms/smooth_quant/smooth_quant/index", "autoapi/neural_compressor/torch/algorithms/smooth_quant/utility/index", "autoapi/neural_compressor/torch/algorithms/static_quant/index", "autoapi/neural_compressor/torch/algorithms/static_quant/save_load/index", "autoapi/neural_compressor/torch/algorithms/static_quant/static_quant/index", "autoapi/neural_compressor/torch/algorithms/static_quant/utility/index", "autoapi/neural_compressor/torch/algorithms/weight_only/autoround/index", "autoapi/neural_compressor/torch/algorithms/weight_only/awq/index", "autoapi/neural_compressor/torch/algorithms/weight_only/gptq/index", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/bitpack/index", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/config/index", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/core/index", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/index", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/optimizer/index", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/qtensor/index", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/quant_api/index", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/quantizer/index", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/utility/index", "autoapi/neural_compressor/torch/algorithms/weight_only/index", "autoapi/neural_compressor/torch/algorithms/weight_only/modules/index", "autoapi/neural_compressor/torch/algorithms/weight_only/rtn/index", "autoapi/neural_compressor/torch/algorithms/weight_only/teq/index", "autoapi/neural_compressor/torch/algorithms/weight_only/utility/index", "autoapi/neural_compressor/torch/amp/autocast/index", "autoapi/neural_compressor/torch/amp/fp8/functions/index", "autoapi/neural_compressor/torch/amp/fp8/index", "autoapi/neural_compressor/torch/amp/index", "autoapi/neural_compressor/torch/index", "autoapi/neural_compressor/torch/quantization/algorithm_entry/index", "autoapi/neural_compressor/torch/quantization/autotune/index", "autoapi/neural_compressor/torch/quantization/config/index", "autoapi/neural_compressor/torch/quantization/index", "autoapi/neural_compressor/torch/quantization/load_entry/index", "autoapi/neural_compressor/torch/quantization/quantize/index", "autoapi/neural_compressor/torch/utils/auto_accelerator/index", "autoapi/neural_compressor/torch/utils/constants/index", "autoapi/neural_compressor/torch/utils/environ/index", "autoapi/neural_compressor/torch/utils/index", "autoapi/neural_compressor/torch/utils/utility/index", "autoapi/neural_compressor/training/index", "autoapi/neural_compressor/utils/collect_layer_histogram/index", "autoapi/neural_compressor/utils/constant/index", "autoapi/neural_compressor/utils/create_obj_from_config/index", "autoapi/neural_compressor/utils/index", "autoapi/neural_compressor/utils/kl_divergence/index", "autoapi/neural_compressor/utils/load_huggingface/index", "autoapi/neural_compressor/utils/logger/index", "autoapi/neural_compressor/utils/neural_insights_utils/index", "autoapi/neural_compressor/utils/options/index", "autoapi/neural_compressor/utils/pytorch/index", "autoapi/neural_compressor/utils/utility/index", "autoapi/neural_compressor/utils/weights_details/index", "autoapi/neural_compressor/version/index", "docs/build_docs/source/index", "docs/source/CODE_OF_CONDUCT", "docs/source/CONTRIBUTING", "docs/source/FX", "docs/source/NAS", "docs/source/SECURITY", "docs/source/Welcome", "docs/source/adaptor", "docs/source/add_new_adaptor", "docs/source/add_new_data_type", "docs/source/api-doc/adaptor", "docs/source/api-doc/adaptor/onnxrt", "docs/source/api-doc/adaptor/torch_utils", "docs/source/api-doc/api_doc_example", "docs/source/api-doc/apis", "docs/source/api-doc/benchmark", "docs/source/api-doc/compression", "docs/source/api-doc/config", "docs/source/api-doc/mix_precision", "docs/source/api-doc/model", "docs/source/api-doc/objective", "docs/source/api-doc/quantization", "docs/source/api-doc/strategy", "docs/source/api-doc/training", "docs/source/benchmark", "docs/source/calibration", "docs/source/coding_style", "docs/source/dataloader", "docs/source/dataset", "docs/source/design", "docs/source/diagnosis", "docs/source/distillation", "docs/source/distillation_quantization", "docs/source/distributed", "docs/source/examples_readme", "docs/source/export", "docs/source/faq", "docs/source/framework_yaml", "docs/source/get_started", "docs/source/incompatible_changes", "docs/source/infrastructure", "docs/source/installation_guide", "docs/source/legal_information", "docs/source/llm_recipes", "docs/source/metric", "docs/source/migration", "docs/source/mixed_precision", "docs/source/model", "docs/source/neural_coder/README", "docs/source/neural_coder/docs/AWSSageMakerSupport", "docs/source/neural_coder/docs/BigDLNanoSupport", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting", "docs/source/neural_coder/docs/PythonAPI", "docs/source/neural_coder/docs/PythonLauncher", "docs/source/neural_coder/docs/Quantization", "docs/source/neural_coder/docs/SupportMatrix", "docs/source/neural_coder/docs/release_notes/v0.4", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart", "docs/source/neural_insights/README", "docs/source/neural_insights/docs/source/onnx_accuracy_debug", "docs/source/neural_insights/docs/source/pytorch_nlp_cli_mode", "docs/source/neural_insights/docs/source/tf_accuracy_debug", "docs/source/neural_insights/gui/README", "docs/source/neural_solution/README", "docs/source/neural_solution/docs/source/README", "docs/source/neural_solution/docs/source/description_api", "docs/source/neural_solution/docs/source/ns_design_doc", "docs/source/neural_solution/docs/source/template/task_request_description", "docs/source/neural_solution/examples/README", "docs/source/neural_solution/examples/custom_models_optimized/tf_example1/README", "docs/source/neural_solution/examples/hf_models/README", "docs/source/neural_solution/examples/hf_models_grpc/README", "docs/source/neural_solution/frontend/README", "docs/source/objective", "docs/source/orchestration", "docs/source/pruning", "docs/source/publication_list", "docs/source/pythonic_style", "docs/source/quantization", "docs/source/quantization_layer_wise", "docs/source/quantization_mixed_precision", "docs/source/quantization_weight_only", "docs/source/releases_info", "docs/source/sigopt_strategy", "docs/source/smooth_quant", "docs/source/tensorboard", "docs/source/transform", "docs/source/tuning_strategies", "docs/source/user_guide", "docs/source/user_yaml", "docs/source/validated_model_list", "index"], "filenames": ["autoapi/block_mask/index.rst", "autoapi/neural_compressor/adaptor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/keras/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/conv2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/dense/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/depthwise_conv2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/pool2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/separable_conv2d/index.rst", "autoapi/neural_compressor/adaptor/mxnet/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index.rst", "autoapi/neural_compressor/adaptor/onnxrt/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibrator/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/norm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/reduce/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/unary_op/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/smooth_quant/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/util/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/weight_only/index.rst", "autoapi/neural_compressor/adaptor/pytorch/index.rst", "autoapi/neural_compressor/adaptor/query/index.rst", "autoapi/neural_compressor/adaptor/tensorflow/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/dequantize_cast_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_schema/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/tf2onnx_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_calibration/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_scaler/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/tf2onnx_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/util/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/auto_round/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/autoround/autoround/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/autoround/export/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/autoround/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/autoround/model_wrapper/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/autoround/sign_sgd/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/awq/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/gptq/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/modified_pickle/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/quantize/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/torch_load/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/utils/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/mixed_precision/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/model_wrapper/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/pattern_detector/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/teq/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/util/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/waq/auto_alpha/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/waq/calibration/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/waq/graph_trace/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/waq/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/waq/smooth_quant/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/waq/utils/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/weight_only/index.rst", "autoapi/neural_compressor/algorithm/algorithm/index.rst", "autoapi/neural_compressor/algorithm/fast_bias_correction/index.rst", "autoapi/neural_compressor/algorithm/index.rst", "autoapi/neural_compressor/algorithm/smooth_quant/index.rst", "autoapi/neural_compressor/algorithm/weight_correction/index.rst", "autoapi/neural_compressor/benchmark/index.rst", "autoapi/neural_compressor/common/base_config/index.rst", "autoapi/neural_compressor/common/base_tuning/index.rst", "autoapi/neural_compressor/common/index.rst", "autoapi/neural_compressor/common/tuning_param/index.rst", "autoapi/neural_compressor/common/utils/constants/index.rst", "autoapi/neural_compressor/common/utils/index.rst", "autoapi/neural_compressor/common/utils/logger/index.rst", "autoapi/neural_compressor/common/utils/save_load/index.rst", "autoapi/neural_compressor/common/utils/utility/index.rst", "autoapi/neural_compressor/compression/callbacks/index.rst", "autoapi/neural_compressor/compression/distillation/criterions/index.rst", "autoapi/neural_compressor/compression/distillation/index.rst", "autoapi/neural_compressor/compression/distillation/optimizers/index.rst", "autoapi/neural_compressor/compression/distillation/utility/index.rst", "autoapi/neural_compressor/compression/hpo/index.rst", "autoapi/neural_compressor/compression/hpo/sa_optimizer/index.rst", "autoapi/neural_compressor/compression/hpo/search_algorithms/index.rst", "autoapi/neural_compressor/compression/hpo/search_space/index.rst", "autoapi/neural_compressor/compression/index.rst", "autoapi/neural_compressor/compression/pruner/criteria/index.rst", "autoapi/neural_compressor/compression/pruner/dsnot/index.rst", "autoapi/neural_compressor/compression/pruner/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/auto_slim/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/pattern_analyzer/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/weight_slim/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/base/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/mha/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/ninm/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/nxm/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/base/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/basic/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/block_mask/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/mha/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/pattern_lock/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/progressive/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/retrain_free/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/sparse_gpt/index.rst", "autoapi/neural_compressor/compression/pruner/pruning/index.rst", "autoapi/neural_compressor/compression/pruner/regs/index.rst", "autoapi/neural_compressor/compression/pruner/schedulers/index.rst", "autoapi/neural_compressor/compression/pruner/tf_criteria/index.rst", "autoapi/neural_compressor/compression/pruner/utils/index.rst", "autoapi/neural_compressor/compression/pruner/wanda/index.rst", "autoapi/neural_compressor/compression/pruner/wanda/prune/index.rst", "autoapi/neural_compressor/compression/pruner/wanda/utils/index.rst", "autoapi/neural_compressor/compression/pruner/wanda/wrapper/index.rst", "autoapi/neural_compressor/conf/config/index.rst", "autoapi/neural_compressor/conf/dotdict/index.rst", "autoapi/neural_compressor/conf/index.rst", "autoapi/neural_compressor/conf/pythonic_config/index.rst", "autoapi/neural_compressor/config/index.rst", "autoapi/neural_compressor/contrib/index.rst", "autoapi/neural_compressor/contrib/strategy/index.rst", "autoapi/neural_compressor/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/data/dataloaders/index.rst", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/data/datasets/index.rst", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/data/filters/filter/index.rst", "autoapi/neural_compressor/data/filters/index.rst", "autoapi/neural_compressor/data/index.rst", "autoapi/neural_compressor/data/transforms/coco_transform/index.rst", "autoapi/neural_compressor/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/data/transforms/index.rst", "autoapi/neural_compressor/data/transforms/postprocess/index.rst", "autoapi/neural_compressor/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/benchmark/index.rst", "autoapi/neural_compressor/experimental/common/criterion/index.rst", "autoapi/neural_compressor/experimental/common/dataloader/index.rst", "autoapi/neural_compressor/experimental/common/index.rst", "autoapi/neural_compressor/experimental/common/metric/index.rst", "autoapi/neural_compressor/experimental/common/model/index.rst", "autoapi/neural_compressor/experimental/common/optimizer/index.rst", "autoapi/neural_compressor/experimental/common/postprocess/index.rst", "autoapi/neural_compressor/experimental/common/torch_utils/index.rst", "autoapi/neural_compressor/experimental/component/index.rst", "autoapi/neural_compressor/experimental/compression/index.rst", "autoapi/neural_compressor/experimental/contrib/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/index.rst", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/index.rst", "autoapi/neural_compressor/experimental/data/index.rst", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/experimental/data/transforms/index.rst", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/experimental/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/distillation/index.rst", "autoapi/neural_compressor/experimental/export/index.rst", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index.rst", "autoapi/neural_compressor/experimental/export/tf2onnx/index.rst", "autoapi/neural_compressor/experimental/export/torch2onnx/index.rst", "autoapi/neural_compressor/experimental/graph_optimization/index.rst", "autoapi/neural_compressor/experimental/index.rst", "autoapi/neural_compressor/experimental/metric/bleu/index.rst", "autoapi/neural_compressor/experimental/metric/bleu_util/index.rst", "autoapi/neural_compressor/experimental/metric/coco_label_map/index.rst", "autoapi/neural_compressor/experimental/metric/coco_tools/index.rst", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/experimental/metric/f1/index.rst", "autoapi/neural_compressor/experimental/metric/index.rst", "autoapi/neural_compressor/experimental/metric/metric/index.rst", "autoapi/neural_compressor/experimental/mixed_precision/index.rst", "autoapi/neural_compressor/experimental/model_conversion/index.rst", "autoapi/neural_compressor/experimental/nas/basic_nas/index.rst", "autoapi/neural_compressor/experimental/nas/dynas/index.rst", "autoapi/neural_compressor/experimental/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas_utils/index.rst", "autoapi/neural_compressor/experimental/nas/search_algorithms/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/gradient_sensitivity/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/group_lasso/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/magnitude/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/pattern_lock/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/pruner/index.rst", "autoapi/neural_compressor/experimental/pruning/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_v2/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index.rst", "autoapi/neural_compressor/experimental/quantization/index.rst", "autoapi/neural_compressor/experimental/scheduler/index.rst", "autoapi/neural_compressor/experimental/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/experimental/strategy/basic/index.rst", "autoapi/neural_compressor/experimental/strategy/bayesian/index.rst", "autoapi/neural_compressor/experimental/strategy/exhaustive/index.rst", "autoapi/neural_compressor/experimental/strategy/index.rst", "autoapi/neural_compressor/experimental/strategy/mse/index.rst", "autoapi/neural_compressor/experimental/strategy/mse_v2/index.rst", "autoapi/neural_compressor/experimental/strategy/random/index.rst", "autoapi/neural_compressor/experimental/strategy/strategy/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/constant/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/utility/index.rst", "autoapi/neural_compressor/index.rst", "autoapi/neural_compressor/metric/bleu/index.rst", "autoapi/neural_compressor/metric/bleu_util/index.rst", "autoapi/neural_compressor/metric/coco_label_map/index.rst", "autoapi/neural_compressor/metric/coco_tools/index.rst", "autoapi/neural_compressor/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/metric/f1/index.rst", "autoapi/neural_compressor/metric/index.rst", "autoapi/neural_compressor/metric/metric/index.rst", "autoapi/neural_compressor/mix_precision/index.rst", "autoapi/neural_compressor/model/base_model/index.rst", "autoapi/neural_compressor/model/index.rst", "autoapi/neural_compressor/model/keras_model/index.rst", "autoapi/neural_compressor/model/model/index.rst", "autoapi/neural_compressor/model/mxnet_model/index.rst", "autoapi/neural_compressor/model/nets_factory/index.rst", "autoapi/neural_compressor/model/onnx_model/index.rst", "autoapi/neural_compressor/model/tensorflow_model/index.rst", "autoapi/neural_compressor/model/torch_model/index.rst", "autoapi/neural_compressor/objective/index.rst", "autoapi/neural_compressor/onnxrt/algorithms/index.rst", "autoapi/neural_compressor/onnxrt/algorithms/layer_wise/core/index.rst", "autoapi/neural_compressor/onnxrt/algorithms/layer_wise/index.rst", "autoapi/neural_compressor/onnxrt/algorithms/smoother/calibrator/index.rst", "autoapi/neural_compressor/onnxrt/algorithms/smoother/core/index.rst", "autoapi/neural_compressor/onnxrt/algorithms/smoother/index.rst", "autoapi/neural_compressor/onnxrt/algorithms/weight_only/awq/index.rst", "autoapi/neural_compressor/onnxrt/algorithms/weight_only/gptq/index.rst", "autoapi/neural_compressor/onnxrt/algorithms/weight_only/index.rst", "autoapi/neural_compressor/onnxrt/algorithms/weight_only/rtn/index.rst", "autoapi/neural_compressor/onnxrt/algorithms/weight_only/utility/index.rst", "autoapi/neural_compressor/onnxrt/index.rst", "autoapi/neural_compressor/onnxrt/quantization/algorithm_entry/index.rst", "autoapi/neural_compressor/onnxrt/quantization/autotune/index.rst", "autoapi/neural_compressor/onnxrt/quantization/calibrate/index.rst", "autoapi/neural_compressor/onnxrt/quantization/config/index.rst", "autoapi/neural_compressor/onnxrt/quantization/index.rst", "autoapi/neural_compressor/onnxrt/quantization/quantize/index.rst", "autoapi/neural_compressor/onnxrt/utils/index.rst", "autoapi/neural_compressor/onnxrt/utils/onnx_model/index.rst", "autoapi/neural_compressor/onnxrt/utils/utility/index.rst", "autoapi/neural_compressor/profiling/index.rst", "autoapi/neural_compressor/profiling/parser/factory/index.rst", "autoapi/neural_compressor/profiling/parser/index.rst", "autoapi/neural_compressor/profiling/parser/onnx_parser/factory/index.rst", "autoapi/neural_compressor/profiling/parser/onnx_parser/index.rst", "autoapi/neural_compressor/profiling/parser/onnx_parser/parser/index.rst", "autoapi/neural_compressor/profiling/parser/parser/index.rst", "autoapi/neural_compressor/profiling/parser/result/index.rst", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/factory/index.rst", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/index.rst", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/parser/index.rst", "autoapi/neural_compressor/profiling/profiler/factory/index.rst", "autoapi/neural_compressor/profiling/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/factory/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/utils/index.rst", "autoapi/neural_compressor/profiling/profiler/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/factory/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/utils/index.rst", "autoapi/neural_compressor/quantization/index.rst", "autoapi/neural_compressor/strategy/auto/index.rst", "autoapi/neural_compressor/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/strategy/basic/index.rst", "autoapi/neural_compressor/strategy/bayesian/index.rst", "autoapi/neural_compressor/strategy/conservative/index.rst", "autoapi/neural_compressor/strategy/exhaustive/index.rst", "autoapi/neural_compressor/strategy/hawq_v2/index.rst", "autoapi/neural_compressor/strategy/index.rst", "autoapi/neural_compressor/strategy/mse/index.rst", "autoapi/neural_compressor/strategy/mse_v2/index.rst", "autoapi/neural_compressor/strategy/random/index.rst", "autoapi/neural_compressor/strategy/strategy/index.rst", "autoapi/neural_compressor/strategy/utils/constant/index.rst", "autoapi/neural_compressor/strategy/utils/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/strategy/utils/utility/index.rst", "autoapi/neural_compressor/template/api_doc_example/index.rst", "autoapi/neural_compressor/template/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/smoother/calibration/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/smoother/core/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/smoother/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/smoother/scaler/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/static_quant/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/static_quant/keras/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/static_quant/tensorflow/index.rst", "autoapi/neural_compressor/tensorflow/index.rst", "autoapi/neural_compressor/tensorflow/keras/index.rst", "autoapi/neural_compressor/tensorflow/keras/layers/conv2d/index.rst", "autoapi/neural_compressor/tensorflow/keras/layers/dense/index.rst", "autoapi/neural_compressor/tensorflow/keras/layers/depthwise_conv2d/index.rst", "autoapi/neural_compressor/tensorflow/keras/layers/index.rst", "autoapi/neural_compressor/tensorflow/keras/layers/pool2d/index.rst", "autoapi/neural_compressor/tensorflow/keras/layers/quantizer/index.rst", "autoapi/neural_compressor/tensorflow/keras/layers/separable_conv2d/index.rst", "autoapi/neural_compressor/tensorflow/keras/quantization/config/index.rst", "autoapi/neural_compressor/tensorflow/keras/quantization/index.rst", "autoapi/neural_compressor/tensorflow/quantization/algorithm_entry/index.rst", "autoapi/neural_compressor/tensorflow/quantization/autotune/index.rst", "autoapi/neural_compressor/tensorflow/quantization/config/index.rst", "autoapi/neural_compressor/tensorflow/quantization/index.rst", "autoapi/neural_compressor/tensorflow/quantization/quantize/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_converter/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_converter_without_calib/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/bf16/bf16_convert/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/bf16/dequantize_cast_optimizer/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/bf16/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_add_to_biasadd/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_layout/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_leakyrelu/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_nan_to_random/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_placeholder_to_const/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/dilated_contraction/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/dummy_biasadd/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/expanddims_optimizer/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fetch_weight_from_reshape/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fold_batch_norm/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fold_constant/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_biasadd_add/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_column_wise_mul/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_conv_with_math/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_decomposed_bn/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_decomposed_in/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_gelu/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_layer_norm/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_pad_with_conv/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_reshape_transpose/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/graph_cse_optimizer/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/grappler_pass/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/insert_print_node/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/move_squeeze_after_relu/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/pre_optimize/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/remove_training_nodes/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/rename_batch_norm/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/split_shared_input/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/strip_equivalent_nodes/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/strip_unused_nodes/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/switch_optimizer/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/graph_base/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/freeze_fake_quant/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/freeze_value/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/freeze_value_without_calib/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/fuse_conv_requantize/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/fuse_matmul_requantize/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/meta_op_optimizer/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/post_hostconst_converter/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/post_quantized_op_cse/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/rnn_convert/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/scale_propagation/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/qdq/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/qdq/insert_qdq_pattern/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/qdq/merge_duplicated_qdq/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/qdq/share_qdq_y_pattern/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_util/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/fake_quantize/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_config/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_helper/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_layers/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_layers/optimize_layer/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_wrapper/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_bn/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_concatv2/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_conv/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_deconv/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_in/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_matmul/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_pooling/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/optimize_qdq/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_base/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_bn/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_concatv2/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_conv/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_for_intel_cpu/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_matmul/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_pooling/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph_common/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/bias_correction/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/graph_transform_base/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/insert_logging/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/rerange_quantized_concat/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/utility/index.rst", "autoapi/neural_compressor/tensorflow/utils/constants/index.rst", "autoapi/neural_compressor/tensorflow/utils/data/index.rst", "autoapi/neural_compressor/tensorflow/utils/index.rst", "autoapi/neural_compressor/tensorflow/utils/model/index.rst", "autoapi/neural_compressor/tensorflow/utils/model_wrappers/index.rst", "autoapi/neural_compressor/tensorflow/utils/nets_factory/index.rst", "autoapi/neural_compressor/tensorflow/utils/utility/index.rst", "autoapi/neural_compressor/torch/algorithms/habana_fp8/fp8_quant/index.rst", "autoapi/neural_compressor/torch/algorithms/habana_fp8/index.rst", "autoapi/neural_compressor/torch/algorithms/habana_fp8/modules/index.rst", "autoapi/neural_compressor/torch/algorithms/habana_fp8/observer/index.rst", "autoapi/neural_compressor/torch/algorithms/habana_fp8/save_load/index.rst", "autoapi/neural_compressor/torch/algorithms/habana_fp8/scale/index.rst", "autoapi/neural_compressor/torch/algorithms/habana_fp8/tensor/index.rst", "autoapi/neural_compressor/torch/algorithms/index.rst", "autoapi/neural_compressor/torch/algorithms/layer_wise/index.rst", "autoapi/neural_compressor/torch/algorithms/layer_wise/load/index.rst", "autoapi/neural_compressor/torch/algorithms/layer_wise/modified_pickle/index.rst", "autoapi/neural_compressor/torch/algorithms/layer_wise/utils/index.rst", "autoapi/neural_compressor/torch/algorithms/smooth_quant/index.rst", "autoapi/neural_compressor/torch/algorithms/smooth_quant/save_load/index.rst", "autoapi/neural_compressor/torch/algorithms/smooth_quant/smooth_quant/index.rst", "autoapi/neural_compressor/torch/algorithms/smooth_quant/utility/index.rst", "autoapi/neural_compressor/torch/algorithms/static_quant/index.rst", "autoapi/neural_compressor/torch/algorithms/static_quant/save_load/index.rst", "autoapi/neural_compressor/torch/algorithms/static_quant/static_quant/index.rst", "autoapi/neural_compressor/torch/algorithms/static_quant/utility/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/autoround/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/awq/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/gptq/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/bitpack/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/config/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/core/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/optimizer/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/qtensor/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/quant_api/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/quantizer/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/utility/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/modules/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/rtn/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/teq/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/utility/index.rst", "autoapi/neural_compressor/torch/amp/autocast/index.rst", "autoapi/neural_compressor/torch/amp/fp8/functions/index.rst", "autoapi/neural_compressor/torch/amp/fp8/index.rst", "autoapi/neural_compressor/torch/amp/index.rst", "autoapi/neural_compressor/torch/index.rst", "autoapi/neural_compressor/torch/quantization/algorithm_entry/index.rst", "autoapi/neural_compressor/torch/quantization/autotune/index.rst", "autoapi/neural_compressor/torch/quantization/config/index.rst", "autoapi/neural_compressor/torch/quantization/index.rst", "autoapi/neural_compressor/torch/quantization/load_entry/index.rst", "autoapi/neural_compressor/torch/quantization/quantize/index.rst", "autoapi/neural_compressor/torch/utils/auto_accelerator/index.rst", "autoapi/neural_compressor/torch/utils/constants/index.rst", "autoapi/neural_compressor/torch/utils/environ/index.rst", "autoapi/neural_compressor/torch/utils/index.rst", "autoapi/neural_compressor/torch/utils/utility/index.rst", "autoapi/neural_compressor/training/index.rst", "autoapi/neural_compressor/utils/collect_layer_histogram/index.rst", "autoapi/neural_compressor/utils/constant/index.rst", "autoapi/neural_compressor/utils/create_obj_from_config/index.rst", "autoapi/neural_compressor/utils/index.rst", "autoapi/neural_compressor/utils/kl_divergence/index.rst", "autoapi/neural_compressor/utils/load_huggingface/index.rst", "autoapi/neural_compressor/utils/logger/index.rst", "autoapi/neural_compressor/utils/neural_insights_utils/index.rst", "autoapi/neural_compressor/utils/options/index.rst", "autoapi/neural_compressor/utils/pytorch/index.rst", "autoapi/neural_compressor/utils/utility/index.rst", "autoapi/neural_compressor/utils/weights_details/index.rst", "autoapi/neural_compressor/version/index.rst", "docs/build_docs/source/index.rst", "docs/source/CODE_OF_CONDUCT.md", "docs/source/CONTRIBUTING.md", "docs/source/FX.md", "docs/source/NAS.md", "docs/source/SECURITY.md", "docs/source/Welcome.md", "docs/source/adaptor.md", "docs/source/add_new_adaptor.md", "docs/source/add_new_data_type.md", "docs/source/api-doc/adaptor.rst", "docs/source/api-doc/adaptor/onnxrt.rst", "docs/source/api-doc/adaptor/torch_utils.rst", "docs/source/api-doc/api_doc_example.rst", "docs/source/api-doc/apis.rst", "docs/source/api-doc/benchmark.rst", "docs/source/api-doc/compression.rst", "docs/source/api-doc/config.rst", "docs/source/api-doc/mix_precision.rst", "docs/source/api-doc/model.rst", "docs/source/api-doc/objective.rst", "docs/source/api-doc/quantization.rst", "docs/source/api-doc/strategy.rst", "docs/source/api-doc/training.rst", "docs/source/benchmark.md", "docs/source/calibration.md", "docs/source/coding_style.md", "docs/source/dataloader.md", "docs/source/dataset.md", "docs/source/design.md", "docs/source/diagnosis.md", "docs/source/distillation.md", "docs/source/distillation_quantization.md", "docs/source/distributed.md", "docs/source/examples_readme.md", "docs/source/export.md", "docs/source/faq.md", "docs/source/framework_yaml.md", "docs/source/get_started.md", "docs/source/incompatible_changes.md", "docs/source/infrastructure.md", "docs/source/installation_guide.md", "docs/source/legal_information.md", "docs/source/llm_recipes.md", "docs/source/metric.md", "docs/source/migration.md", "docs/source/mixed_precision.md", "docs/source/model.md", "docs/source/neural_coder/README.md", "docs/source/neural_coder/docs/AWSSageMakerSupport.md", "docs/source/neural_coder/docs/BigDLNanoSupport.md", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting.md", "docs/source/neural_coder/docs/PythonAPI.md", "docs/source/neural_coder/docs/PythonLauncher.md", "docs/source/neural_coder/docs/Quantization.md", "docs/source/neural_coder/docs/SupportMatrix.md", "docs/source/neural_coder/docs/release_notes/v0.4.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart.md", "docs/source/neural_insights/README.md", "docs/source/neural_insights/docs/source/onnx_accuracy_debug.md", "docs/source/neural_insights/docs/source/pytorch_nlp_cli_mode.md", "docs/source/neural_insights/docs/source/tf_accuracy_debug.md", "docs/source/neural_insights/gui/README.md", "docs/source/neural_solution/README.md", "docs/source/neural_solution/docs/source/README.md", "docs/source/neural_solution/docs/source/description_api.md", "docs/source/neural_solution/docs/source/ns_design_doc.md", "docs/source/neural_solution/docs/source/template/task_request_description.md", "docs/source/neural_solution/examples/README.md", "docs/source/neural_solution/examples/custom_models_optimized/tf_example1/README.md", "docs/source/neural_solution/examples/hf_models/README.md", "docs/source/neural_solution/examples/hf_models_grpc/README.md", "docs/source/neural_solution/frontend/README.md", "docs/source/objective.md", "docs/source/orchestration.md", "docs/source/pruning.md", "docs/source/publication_list.md", "docs/source/pythonic_style.md", "docs/source/quantization.md", "docs/source/quantization_layer_wise.md", "docs/source/quantization_mixed_precision.md", "docs/source/quantization_weight_only.md", "docs/source/releases_info.md", "docs/source/sigopt_strategy.md", "docs/source/smooth_quant.md", "docs/source/tensorboard.md", "docs/source/transform.md", "docs/source/tuning_strategies.md", "docs/source/user_guide.md", "docs/source/user_yaml.md", "docs/source/validated_model_list.md", "index.rst"], "titles": ["<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">block_mask</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.dense</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.depthwise_conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.pool2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.separable_conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.onnxrt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.calibration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.calibrator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.activation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.argmax</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.attention</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.binary_op</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.direct_q8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.embed_layernorm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gather</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gavgpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gemm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.lstm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.maxpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.ops</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.reduce</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.resize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.split</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.unary_op</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.weight_only</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.query</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph_common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.smooth_quant_calibration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.smooth_quant_scaler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.tf2onnx_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.insert_logging</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.auto_round</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.autoround.autoround</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.autoround.export</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.autoround</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.autoround.model_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.autoround.sign_sgd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.awq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.gptq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.hawq_metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.layer_wise_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.layer_wise_quant.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.model_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.pattern_detector</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.symbolic_trace</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.teq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.waq.auto_alpha</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.waq.calibration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.waq.graph_trace</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.waq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.waq.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.waq.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.weight_only</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.fast_bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.weight_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.common.base_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.common.base_tuning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.common.tuning_param</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.common.utils.constants</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.common.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.common.utils.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.common.utils.save_load</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.common.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.callbacks</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation.criterions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation.optimizers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.hpo</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.hpo.sa_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.hpo.search_algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.hpo.search_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.criteria</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.dsnot</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.auto_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.pattern_analyzer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.weight_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns.base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns.mha</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns.ninm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns.nxm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.block_mask</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.mha</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.pattern_lock</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.progressive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.retrain_free</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.sparse_gpt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.regs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.schedulers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.tf_criteria</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.wanda</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.wanda.prune</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.wanda.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.wanda.wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.dotdict</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.pythonic_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.sigopt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.tpe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.coco_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.criterion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.component</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.compression</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib.strategy.sigopt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib.strategy.tpe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.distillation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.qlinear2qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.tf2onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.torch2onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.model_conversion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.basic_nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.search_algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.gradient_sensitivity</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.group_lasso</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.magnitude</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.pattern_lock</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.tile_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.prune_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.auto_mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.bayesian</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.exhaustive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.mse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.mse_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.tuning_sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.tuning_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.tuning_structs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.mix_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.base_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.keras_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.mxnet_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.nets_factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.onnx_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.tensorflow_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.torch_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.objective</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.algorithms.layer_wise.core</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.algorithms.layer_wise</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.algorithms.smoother.calibrator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.algorithms.smoother.core</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.algorithms.smoother</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.algorithms.weight_only.awq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.algorithms.weight_only.gptq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.algorithms.weight_only</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.algorithms.weight_only.rtn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.algorithms.weight_only.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.quantization.algorithm_entry</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.quantization.autotune</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.quantization.calibrate</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.quantization.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.quantization.quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.utils.onnx_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.onnx_parser.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.onnx_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.onnx_parser.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.tensorflow_parser.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.tensorflow_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.tensorflow_parser.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.auto</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.auto_mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.bayesian</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.conservative</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.exhaustive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.hawq_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_structs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.template.api_doc_example</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.template</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.smoother.calibration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.smoother.core</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.smoother</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.smoother.scaler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.static_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.static_quant.keras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.static_quant.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.keras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.keras.layers.conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.keras.layers.dense</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.keras.layers.depthwise_conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.keras.layers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.keras.layers.pool2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.keras.layers.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.keras.layers.separable_conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.keras.quantization.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.keras.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.algorithm_entry</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.autotune</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_converter_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.dequantize_cast_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_fake_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.meta_op_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_hostconst_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_quantized_op_cse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.rnn_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.scale_propagation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.insert_qdq_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.merge_duplicated_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.share_qdq_y_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.fake_quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.qat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_helper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.optimize_layer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_deconv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.optimize_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_for_intel_cpu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph_common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.transform_graph.bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.transform_graph.graph_transform_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.transform_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.transform_graph.insert_logging</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.transform_graph.rerange_quantized_concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.utils.constants</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.utils.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.utils.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.utils.model_wrappers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.utils.nets_factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.habana_fp8.fp8_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.habana_fp8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.habana_fp8.modules</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.habana_fp8.observer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.habana_fp8.save_load</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.habana_fp8.scale</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.habana_fp8.tensor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.layer_wise</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.layer_wise.load</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.layer_wise.modified_pickle</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.layer_wise.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.smooth_quant.save_load</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.smooth_quant.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.smooth_quant.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.static_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.static_quant.save_load</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.static_quant.static_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.static_quant.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only.autoround</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only.awq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only.gptq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only.hqq.bitpack</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only.hqq.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only.hqq.core</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only.hqq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only.hqq.optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only.hqq.qtensor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only.hqq.quant_api</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only.hqq.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only.hqq.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only.modules</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only.rtn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only.teq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.amp.autocast</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.amp.fp8.functions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.amp.fp8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.amp</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.quantization.algorithm_entry</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.quantization.autotune</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.quantization.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.quantization.load_entry</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.quantization.quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.utils.auto_accelerator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.utils.constants</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.utils.environ</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.training</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.collect_layer_histogram</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.create_obj_from_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.kl_divergence</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.load_huggingface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.neural_insights_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.options</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.weights_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.version</span></code>", "Intel\u00ae Neural Compressor Documentation", "Contributor Covenant Code of Conduct", "Contribution Guidelines", "FX", "Neural Architecture Search", "Security Policy", "Intel\u00ae Neural Compressor", "Adaptor", "How to Add An Adaptor", "How to Support New Data Type, Like Int4, with a Few Line Changes", "Adaptor", "ONNX Runtime", "Torch Utils", "API Document Example", "APIs", "Benchmark", "Compression", "Config", "Mix Precision", "Model", "Objective", "Quantization", "Strategy", "Training", "Benchmarking", "Calibration Algorithms in Quantization", "INC Coding Conventions", "DataLoader", "Dataset", "Design", "Diagnosis", "Distillation", "Distillation for Quantization", "Distributed Training and Inference (Evaluation)", "Examples", "Export", "Frequently Asked Questions", "Framework YAML Configuration Files", "Getting Started", "Incompatible changes between v1.2 and v1.1", "Infrastructure of Intel\u00ae Neural Compressor", "Installation", "Legal Information", "LLMs Quantization Recipes", "Metrics", "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X", "Mixed Precision", "Model", "Neural Coder", "AWS Amazon SageMaker Support", "BigDL Nano Support", "Intel CPU Platforms: Best Performance Setting", "Neural Coder as Python API", "Python Launcher", "Neural Coder for Quantization", "Supported Optimization Features", "v0.4", "Changelog", "neural_compressor_ext_lab", "Intel\u00ae Neural Compressor as JupyterLab Extension", "Making a new release of neural_compressor_ext_lab", "Changelog", "neural_compressor_ext_lab_alibaba", "Making a new release of neural_compressor_ext_lab_alibaba", "Change Log", "Neural Coder", "Welcome to your VS Code Extension", "Neural Insights", "Step by step example how to debug accuracy with Neural Insights", "Step by step example how to dump weights data for PyTorch model with Neural Insights", "Step by step example how to debug accuracy with Neural Insights", "Getting Started with Create React App", "What\u2019s Neural Solution?", "Get started", "Neural Solution API", "Design Doc for Optimization as a Service [WIP]", "Task request description", "Examples List", "An end-to-end example: quantize a custom model with Neural Solution", "An end-to-end example: quantize a Hugging Face model with Neural Solution", "An end-to-end example: quantize a Hugging Face model with Neural Solution gRPC API", "Client", "Objective", "Optimization Orchestration", "Pruning", "Full Publications/Events (79)", "Pythonic Style Access for Configurations", "Quantization", "Layer Wise Quantization (LWQ)", "Turn OFF Auto Mixed Precision during Quantization", "Weight Only Quantization (WOQ)", "Release", "SigOpt Strategy", "Smooth Quant", "TensorBoard", "Transform", "Tuning Strategies", "User Guide", "User YAML Configuration Files", "Validated Models", "Intel\u00ae Neural Compressor Documentation"], "terms": {"block": [0, 44, 150, 167, 170, 177, 203, 214, 217, 222, 228, 348, 389, 397, 400, 452, 597, 598, 599, 614, 685, 727, 729, 735, 741], "mask": [0, 203, 210, 212, 215, 217, 221, 222, 252, 295, 321, 350, 374, 729, 744], "adaptor_registri": [1, 652], "cl": [1, 164, 178, 194, 196, 200, 201, 210, 215, 224, 225, 226, 254, 261, 269, 271, 276, 297, 304, 310, 332, 339, 343, 348, 350, 352, 363, 378, 389, 445, 577, 589, 642, 671], "sourc": [1, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 113, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 150, 151, 154, 155, 156, 157, 158, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 187, 190, 191, 192, 193, 194, 196, 197, 200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 236, 237, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 283, 284, 285, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 307, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 337, 338, 339, 340, 343, 344, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 389, 391, 393, 394, 396, 397, 399, 400, 402, 403, 404, 405, 409, 410, 412, 414, 416, 417, 418, 419, 421, 422, 424, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 448, 449, 450, 451, 452, 455, 456, 458, 460, 461, 471, 473, 474, 475, 477, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 526, 527, 528, 529, 530, 532, 533, 534, 535, 538, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 572, 574, 575, 576, 577, 587, 588, 589, 591, 592, 593, 596, 597, 598, 599, 600, 602, 609, 611, 612, 613, 614, 615, 620, 621, 622, 625, 626, 630, 631, 632, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 648, 651, 687, 690, 703, 705, 707, 708, 710, 730], "The": [1, 3, 11, 14, 16, 34, 54, 74, 113, 119, 121, 140, 148, 150, 151, 154, 163, 165, 170, 176, 177, 178, 183, 184, 185, 187, 192, 193, 194, 196, 200, 201, 203, 204, 208, 210, 212, 213, 215, 216, 217, 222, 223, 224, 225, 226, 227, 228, 233, 234, 236, 237, 240, 241, 242, 252, 253, 254, 255, 256, 260, 261, 269, 271, 274, 276, 279, 283, 284, 285, 295, 296, 297, 298, 299, 303, 304, 310, 311, 316, 318, 319, 320, 322, 323, 325, 327, 328, 329, 331, 332, 334, 335, 337, 338, 339, 340, 343, 345, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 360, 361, 362, 363, 367, 369, 371, 372, 373, 375, 376, 378, 379, 387, 389, 402, 403, 410, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 449, 451, 452, 455, 456, 460, 473, 474, 477, 484, 504, 538, 544, 546, 570, 572, 575, 577, 587, 593, 597, 598, 609, 615, 620, 621, 625, 630, 631, 632, 634, 636, 637, 641, 642, 643, 646, 648, 649, 652, 653, 654, 655, 657, 661, 664, 667, 669, 670, 671, 672, 673, 675, 676, 678, 680, 682, 684, 685, 686, 688, 689, 690, 691, 692, 695, 696, 698, 701, 703, 704, 705, 707, 708, 710, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 723, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744], "decor": [1, 16, 34, 67, 68, 70, 148, 176, 178, 184, 192, 196, 200, 201, 210, 215, 224, 226, 269, 276, 310, 325, 332, 339, 343, 348, 350, 352, 363, 366, 378, 389, 410, 445, 497, 498, 500, 570, 577, 593, 609, 615, 630, 642, 648, 649, 652, 741], "us": [1, 13, 16, 34, 42, 43, 44, 48, 49, 70, 103, 105, 116, 141, 150, 151, 154, 158, 163, 165, 170, 177, 183, 194, 196, 200, 201, 203, 208, 210, 215, 219, 220, 224, 226, 227, 230, 233, 234, 236, 237, 240, 241, 250, 251, 252, 253, 254, 255, 256, 259, 268, 269, 270, 271, 276, 283, 284, 293, 294, 295, 296, 297, 298, 299, 302, 309, 310, 314, 315, 316, 318, 319, 321, 325, 326, 327, 332, 339, 340, 343, 345, 348, 350, 351, 352, 353, 354, 357, 360, 363, 366, 367, 371, 372, 374, 378, 389, 396, 397, 399, 400, 410, 427, 432, 433, 437, 440, 442, 445, 449, 451, 452, 458, 460, 461, 477, 478, 479, 500, 541, 572, 577, 587, 592, 593, 596, 597, 598, 599, 612, 614, 615, 625, 626, 630, 631, 632, 633, 634, 635, 637, 642, 646, 647, 648, 649, 652, 653, 669, 670, 671, 673, 675, 676, 677, 678, 680, 682, 684, 686, 687, 690, 691, 692, 693, 694, 695, 697, 698, 701, 703, 705, 707, 708, 710, 712, 713, 714, 715, 716, 723, 724, 725, 727, 729, 730, 731, 732, 733, 734, 735, 736, 737, 739, 740, 741, 743, 744], "regist": [1, 16, 34, 161, 163, 176, 178, 184, 194, 196, 200, 201, 203, 205, 210, 211, 215, 218, 224, 225, 226, 227, 254, 261, 269, 271, 276, 297, 304, 310, 325, 332, 339, 343, 348, 350, 352, 363, 366, 378, 389, 410, 445, 451, 471, 577, 587, 588, 593, 626, 630, 639, 649, 652, 671, 673, 678, 689, 690, 711, 727, 738, 741], "all": [1, 13, 16, 34, 44, 45, 63, 97, 157, 163, 164, 170, 177, 178, 180, 183, 184, 193, 196, 201, 205, 210, 218, 228, 236, 237, 242, 243, 250, 254, 261, 269, 270, 276, 279, 285, 293, 297, 304, 310, 315, 318, 321, 323, 325, 332, 339, 343, 344, 348, 354, 363, 366, 371, 374, 376, 378, 380, 389, 445, 451, 471, 493, 527, 572, 575, 577, 587, 589, 593, 597, 599, 600, 634, 642, 646, 647, 651, 652, 653, 654, 671, 672, 673, 678, 682, 686, 690, 693, 701, 704, 705, 708, 709, 710, 711, 712, 715, 716, 718, 719, 723, 724, 725, 728, 729, 730, 732, 734, 735, 738, 740, 741], "subclass": [1, 16, 34, 176, 178, 196, 200, 201, 210, 215, 224, 226, 247, 251, 254, 261, 269, 276, 290, 294, 297, 304, 310, 325, 332, 339, 343, 348, 350, 352, 363, 366, 378, 389, 445, 593, 652], "paramet": [1, 11, 13, 14, 16, 42, 43, 44, 45, 67, 68, 70, 86, 105, 116, 132, 140, 141, 148, 150, 151, 154, 156, 157, 158, 163, 164, 168, 170, 176, 177, 178, 183, 184, 185, 187, 191, 192, 193, 194, 196, 198, 200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 231, 233, 234, 236, 237, 240, 241, 251, 252, 254, 261, 265, 269, 271, 276, 283, 284, 294, 295, 297, 304, 307, 310, 311, 313, 314, 315, 316, 318, 319, 321, 322, 323, 325, 327, 328, 329, 331, 332, 333, 334, 335, 337, 338, 339, 340, 343, 345, 348, 349, 350, 351, 352, 353, 357, 363, 367, 369, 371, 372, 374, 375, 376, 378, 379, 383, 387, 389, 391, 396, 397, 399, 400, 403, 410, 427, 432, 433, 437, 445, 449, 451, 452, 455, 458, 473, 477, 497, 498, 500, 516, 541, 557, 570, 575, 577, 587, 589, 591, 592, 593, 596, 597, 598, 599, 600, 609, 612, 614, 615, 625, 626, 630, 631, 634, 637, 638, 639, 641, 642, 648, 653, 672, 673, 676, 678, 685, 689, 690, 704, 710, 711, 712, 713, 718, 723, 724, 729, 732, 733, 735, 737, 738, 740, 741, 743], "framework_specific_info": [1, 3, 11, 14, 45, 47, 460, 461, 652], "base": [1, 3, 11, 13, 14, 16, 34, 45, 46, 47, 86, 105, 116, 120, 122, 132, 144, 150, 154, 158, 161, 167, 170, 178, 184, 193, 200, 201, 202, 203, 205, 211, 218, 225, 227, 237, 242, 245, 250, 252, 254, 261, 269, 279, 285, 288, 293, 295, 297, 304, 310, 325, 331, 333, 339, 340, 343, 345, 350, 360, 363, 367, 378, 380, 387, 388, 389, 396, 404, 442, 445, 449, 461, 516, 541, 545, 547, 557, 566, 572, 575, 588, 593, 597, 649, 651, 652, 653, 654, 671, 673, 677, 678, 682, 690, 691, 698, 699, 701, 710, 713, 718, 721, 724, 725, 729, 730, 732, 735, 737, 738, 739, 741, 744], "framework": [1, 3, 11, 13, 14, 45, 154, 183, 184, 194, 196, 205, 211, 215, 218, 222, 223, 224, 238, 239, 243, 244, 248, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 263, 266, 269, 271, 272, 276, 281, 282, 286, 287, 289, 291, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 306, 308, 310, 316, 325, 326, 353, 361, 367, 378, 379, 380, 381, 383, 443, 449, 460, 471, 634, 651, 652, 654, 670, 671, 675, 678, 679, 683, 684, 685, 686, 689, 690, 691, 712, 713, 729, 730, 732, 736, 739, 740, 741, 742, 743, 744], "layer": [1, 3, 11, 14, 45, 46, 47, 116, 117, 118, 119, 121, 122, 150, 157, 160, 162, 164, 175, 176, 177, 181, 194, 197, 206, 208, 209, 210, 214, 219, 228, 231, 232, 236, 237, 271, 278, 348, 349, 391, 397, 399, 460, 461, 541, 542, 543, 544, 546, 547, 577, 586, 589, 593, 600, 612, 632, 634, 642, 651, 652, 653, 654, 677, 685, 713, 729, 735, 736, 742], "mxnet_util": 2, "util": [2, 12, 17, 105, 110, 111, 139, 142, 156, 158, 159, 160, 168, 184, 195, 202, 205, 229, 236, 237, 278, 317, 319, 349, 359, 370, 372, 391, 393, 394, 396, 397, 399, 405, 425, 430, 441, 473, 474, 477, 585, 586, 622, 653, 654, 655, 670, 671, 678, 690, 693, 713, 729, 732, 741, 742], "ox_util": 2, "oper": [2, 17, 43, 104, 110, 140, 148, 208, 209, 214, 232, 236, 237, 265, 307, 348, 427, 432, 455, 535, 570, 648, 669, 672, 675, 680, 710, 716, 729, 732, 735, 738, 740, 741], "activ": [2, 17, 29, 44, 141, 155, 170, 177, 197, 236, 237, 278, 367, 396, 449, 451, 458, 593, 599, 652, 653, 654, 670, 675, 677, 682, 690, 711, 712, 715, 723, 724, 725, 731, 732, 735, 738, 739, 743], "argmax": [2, 17, 29], "attent": [2, 17, 29, 167, 206, 208, 219, 236, 237, 252, 295, 597, 646, 676, 729], "binary_op": [2, 17, 29], "concat": [2, 17, 29, 147, 569], "conv": [2, 17, 29, 58, 62, 66, 71, 72, 73, 92, 109, 181, 236, 237, 405, 488, 492, 496, 501, 502, 503, 522, 534, 648, 653, 654, 690, 729, 731, 732, 741], "direct_q8": [2, 17, 29], "embed_layernorm": [2, 17, 29], "gather": [2, 13, 17, 29, 236, 237, 348], "gavgpool": [2, 17, 29], "gemm": [2, 17, 29, 236, 237, 405], "lstm": [2, 17, 29], "matmul": [2, 17, 29, 44, 53, 59, 65, 73, 94, 109, 128, 137, 214, 236, 237, 348, 396, 397, 399, 400, 405, 475, 483, 489, 495, 503, 524, 534, 553, 562, 682, 713, 735, 741], "maxpool": [2, 17, 29, 129, 138, 554, 563, 682], "norm": [2, 17, 29], "op": [2, 13, 17, 29, 45, 51, 53, 65, 66, 67, 68, 69, 70, 71, 72, 74, 78, 81, 85, 88, 91, 92, 93, 94, 96, 105, 107, 109, 123, 124, 125, 131, 133, 134, 135, 136, 141, 143, 146, 148, 156, 158, 168, 170, 177, 181, 208, 236, 237, 315, 360, 367, 368, 427, 432, 438, 440, 442, 449, 450, 451, 458, 481, 483, 495, 496, 497, 498, 499, 500, 501, 502, 504, 508, 511, 515, 518, 521, 522, 523, 524, 526, 532, 534, 548, 549, 550, 556, 558, 559, 560, 561, 565, 568, 570, 592, 593, 596, 597, 614, 615, 630, 636, 642, 652, 653, 654, 675, 682, 690, 691, 714, 715, 729, 732, 734, 736, 738, 739, 741, 743], "pad": [2, 17, 29, 44, 71, 72, 252, 269, 295, 310, 400, 501, 502, 673, 740], "pool": [2, 17, 29, 720], "reduc": [2, 17, 29, 236, 237, 652, 670, 677, 690, 691, 710, 711, 729, 730, 732, 733, 734, 735, 738, 741, 743], "resiz": [2, 17, 29, 252, 253, 265, 269, 295, 296, 307, 310, 673, 740], "split": [2, 17, 29, 43, 82, 150, 177, 268, 269, 309, 310, 512, 599, 612, 648, 733, 735, 738, 740], "unary_op": [2, 17, 29], "calibr": [2, 11, 13, 14, 17, 44, 49, 89, 90, 140, 170, 177, 183, 236, 237, 240, 241, 283, 284, 316, 353, 391, 394, 395, 396, 397, 400, 402, 403, 433, 457, 473, 477, 479, 519, 520, 592, 596, 598, 599, 614, 625, 636, 652, 654, 673, 684, 685, 729, 732, 735, 741, 742, 743], "quantiz": [2, 11, 13, 14, 16, 17, 42, 43, 44, 48, 49, 88, 92, 94, 96, 99, 107, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 150, 151, 155, 156, 157, 158, 159, 160, 164, 165, 166, 169, 170, 175, 177, 181, 183, 185, 190, 193, 236, 237, 240, 241, 265, 272, 279, 283, 284, 307, 315, 316, 317, 327, 354, 360, 366, 370, 391, 393, 394, 396, 397, 399, 400, 410, 438, 440, 442, 451, 455, 456, 458, 460, 461, 586, 589, 591, 592, 593, 596, 597, 598, 599, 600, 607, 611, 612, 613, 614, 631, 632, 636, 637, 641, 642, 652, 659, 671, 672, 673, 678, 679, 682, 684, 685, 689, 692, 693, 698, 700, 701, 704, 717, 719, 720, 722, 728, 730, 736, 739, 740, 741, 742, 743], "smooth_quant": [2, 17, 162, 170, 180, 236, 237, 370, 671, 732, 738], "weight_onli": [2, 17, 237, 641, 651, 671, 733, 735], "tf_util": 2, "graph_rewrit": [2, 111], "bf16": [2, 44, 87, 111, 156, 236, 237, 367, 396, 397, 399, 400, 449, 517, 652, 653, 682, 690, 695, 700, 704, 710, 734, 741, 744], "gener": [2, 13, 48, 49, 87, 111, 122, 148, 157, 170, 183, 187, 208, 228, 240, 241, 242, 251, 254, 255, 256, 257, 269, 283, 284, 285, 294, 297, 298, 299, 300, 310, 318, 326, 357, 371, 379, 405, 428, 433, 437, 452, 471, 475, 478, 479, 517, 547, 570, 572, 593, 600, 622, 631, 647, 648, 652, 654, 672, 676, 689, 690, 691, 693, 698, 703, 705, 707, 708, 710, 712, 713, 727, 729, 730, 732, 734, 735, 738, 739, 740, 741], "int8": [2, 18, 19, 43, 44, 87, 111, 123, 124, 125, 131, 133, 134, 135, 136, 143, 148, 177, 182, 183, 236, 237, 265, 307, 313, 314, 315, 367, 369, 396, 397, 399, 400, 410, 449, 451, 471, 475, 517, 548, 549, 550, 556, 558, 559, 560, 561, 565, 570, 614, 641, 642, 647, 648, 651, 652, 653, 654, 669, 673, 677, 682, 688, 690, 691, 695, 698, 700, 701, 704, 710, 713, 715, 730, 731, 732, 734, 735, 736, 737, 738, 739, 740, 743], "onnx": [2, 14, 15, 16, 29, 41, 43, 44, 87, 111, 142, 181, 236, 237, 248, 291, 313, 314, 315, 379, 386, 391, 394, 396, 397, 399, 400, 402, 403, 409, 410, 427, 640, 647, 651, 652, 653, 655, 672, 675, 679, 680, 682, 683, 685, 691, 692, 695, 700, 701, 713, 730, 731, 735, 736, 738, 741], "qdq": [2, 42, 87, 111, 112, 113, 142, 170, 177, 236, 237, 313, 314, 315, 517, 536, 537, 538, 614, 652, 675, 680, 685, 700, 701, 732, 736, 738], "graph_bas": [2, 87, 111, 517], "quantize_graph": [2, 111, 536], "qat": [2, 111, 112, 168, 237, 327, 387, 536, 537, 575, 677, 678, 685, 690, 732], "quantize_graph_bas": [2, 111, 112, 536, 537], "quantize_graph_bn": [2, 111, 112, 536, 537], "quantize_graph_concatv2": [2, 111, 112, 536, 537], "quantize_graph_conv": [2, 111, 112, 536, 537], "quantize_graph_for_intel_cpu": [2, 111, 112, 536, 537], "quantize_graph_matmul": [2, 111, 112, 536, 537], "quantize_graph_pool": [2, 111, 112, 536, 537], "transform_graph": [2, 111, 536], "bias_correct": [2, 111, 145, 536, 567], "graph_transform_bas": [2, 111, 145, 536, 567], "insert_log": [2, 111, 145, 536, 567], "rerange_quantized_concat": [2, 111, 145, 536, 567], "graph_convert": [2, 111, 536], "graph_converter_without_calib": [2, 111, 536], "graph_util": [2, 111, 536], "quantize_graph_common": [2, 111, 536], "smooth_quant_calibr": [2, 111], "smooth_quant_scal": [2, 111], "tf2onnx_convert": [2, 111], "torch_util": [2, 273, 317, 370, 733, 738], "layer_wise_qu": [2, 159, 237, 391, 405, 733], "modified_pickl": [2, 159, 160, 585, 586], "torch_load": [2, 159, 160], "bf16_convert": [2, 52, 87, 111, 159, 482, 517], "hawq_metr": [2, 159], "model_wrapp": [2, 15, 152, 159, 573], "pattern_detector": [2, 159], "symbolic_trac": [2, 159], "tensorflow": [2, 52, 54, 75, 76, 77, 87, 95, 101, 102, 103, 104, 105, 106, 110, 111, 112, 114, 117, 130, 140, 141, 142, 145, 148, 194, 196, 227, 236, 237, 251, 252, 253, 254, 257, 259, 261, 269, 276, 294, 295, 296, 297, 300, 302, 304, 310, 314, 315, 316, 319, 321, 325, 326, 327, 353, 361, 372, 374, 378, 379, 387, 426, 427, 431, 432, 433, 443, 642, 647, 649, 651, 652, 653, 670, 671, 672, 675, 676, 677, 679, 682, 683, 685, 686, 690, 691, 692, 700, 701, 712, 715, 729, 730, 731, 737, 738, 741, 743], "kerasadaptor": [3, 460], "kerasqueri": [3, 460], "local_config_fil": [3, 11, 14, 45, 47, 460, 461], "none": [3, 13, 14, 41, 43, 44, 45, 47, 48, 49, 63, 89, 102, 104, 105, 110, 116, 142, 148, 150, 154, 155, 157, 158, 162, 163, 164, 165, 166, 169, 170, 175, 177, 183, 184, 185, 187, 192, 193, 194, 201, 203, 205, 206, 208, 212, 224, 228, 230, 232, 233, 234, 236, 237, 240, 241, 242, 244, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 265, 269, 270, 271, 272, 279, 283, 284, 285, 287, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 307, 310, 311, 314, 315, 316, 321, 325, 326, 327, 328, 331, 340, 345, 349, 353, 357, 360, 363, 367, 374, 378, 379, 389, 391, 403, 426, 431, 432, 433, 434, 437, 438, 442, 445, 449, 452, 460, 461, 471, 473, 474, 475, 477, 478, 479, 493, 519, 535, 541, 570, 572, 577, 587, 589, 593, 597, 598, 599, 600, 609, 611, 613, 614, 615, 621, 622, 625, 631, 632, 634, 637, 639, 641, 642, 652, 653, 672, 673, 689, 713, 732, 735, 739, 740, 741], "defin": [3, 11, 14, 45, 46, 86, 154, 158, 187, 200, 201, 208, 210, 215, 216, 217, 222, 223, 224, 225, 226, 236, 237, 240, 241, 283, 284, 328, 329, 331, 332, 333, 340, 345, 348, 349, 350, 352, 379, 404, 433, 516, 631, 641, 646, 649, 652, 653, 672, 673, 676, 677, 682, 685, 689, 690, 711, 728, 729, 732, 735, 737, 738, 739, 741, 743], "queri": [3, 11, 13, 14, 45, 47, 148, 170, 208, 219, 236, 237, 460, 461, 570, 597, 653, 654, 720, 732], "interfac": [3, 11, 14, 45, 46, 86, 113, 233, 316, 340, 345, 353, 354, 516, 538, 634, 685, 690, 701, 719, 732, 736], "each": [3, 11, 14, 45, 46, 141, 148, 158, 163, 170, 177, 228, 236, 237, 250, 254, 257, 265, 269, 293, 297, 300, 307, 310, 319, 321, 322, 323, 360, 372, 374, 375, 376, 442, 458, 570, 587, 614, 642, 647, 652, 653, 654, 671, 673, 675, 676, 677, 682, 690, 695, 701, 704, 710, 718, 720, 727, 729, 733, 735, 737, 739, 740, 741, 742], "adapt": [3, 11, 14, 45, 46, 150, 646, 651, 653, 673, 701, 730], "should": [3, 11, 14, 45, 46, 55, 115, 116, 163, 193, 206, 208, 219, 236, 237, 240, 241, 250, 252, 254, 269, 274, 283, 284, 293, 295, 297, 310, 315, 319, 372, 378, 379, 433, 452, 485, 540, 541, 587, 615, 631, 642, 648, 649, 652, 653, 654, 673, 676, 678, 689, 690, 696, 705, 708, 710, 712, 713, 727, 729, 732, 735, 740, 741, 743], "implement": [3, 11, 14, 45, 46, 110, 143, 147, 154, 155, 163, 240, 241, 247, 250, 251, 252, 254, 283, 284, 290, 293, 294, 295, 297, 318, 371, 379, 389, 433, 440, 535, 565, 569, 587, 631, 654, 672, 673, 689, 690, 701, 711, 729, 732, 735, 736, 739, 741, 743], "inherit": [3, 11, 14, 45, 46, 193, 194, 220, 221, 226, 236, 249, 269, 271, 279, 292, 310, 350, 352, 626, 649, 652, 653, 673], "specif": [3, 11, 14, 42, 45, 46, 104, 116, 154, 177, 183, 184, 196, 228, 232, 236, 237, 252, 253, 254, 255, 259, 261, 276, 295, 296, 297, 298, 302, 304, 334, 335, 337, 338, 339, 378, 433, 541, 572, 612, 615, 639, 646, 649, 652, 653, 670, 671, 672, 675, 676, 682, 684, 688, 689, 690, 691, 692, 693, 697, 698, 700, 704, 710, 712, 718, 727, 729, 731, 735, 741, 743], "backend": [3, 11, 14, 15, 41, 42, 45, 46, 181, 196, 236, 237, 238, 239, 243, 244, 248, 252, 253, 255, 256, 257, 258, 259, 263, 266, 269, 275, 276, 281, 282, 286, 287, 289, 291, 295, 296, 298, 299, 300, 301, 302, 306, 308, 310, 326, 361, 379, 380, 381, 383, 443, 648, 654, 675, 678, 684, 685, 690, 691, 699, 718, 723, 724, 725, 731, 735, 740, 741, 743], "own": [3, 11, 14, 45, 46, 74, 163, 250, 269, 293, 310, 389, 504, 587, 649, 653, 672, 673, 685, 689, 712, 716, 727, 735, 737, 742], "mxnetadaptor": 11, "do": [11, 14, 154, 157, 193, 224, 236, 237, 251, 252, 294, 295, 311, 315, 318, 321, 351, 371, 374, 591, 600, 641, 646, 653, 671, 673, 678, 682, 685, 689, 690, 705, 708, 729, 734, 736, 738, 741], "inspect": [11, 14, 736, 739], "tensor": [11, 13, 14, 15, 16, 43, 44, 70, 105, 140, 148, 150, 151, 154, 158, 163, 164, 170, 177, 203, 205, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 227, 237, 269, 310, 313, 315, 348, 350, 360, 387, 400, 442, 455, 500, 570, 575, 577, 587, 589, 591, 593, 597, 614, 615, 637, 641, 642, 648, 654, 671, 672, 673, 675, 729, 732, 736, 739, 740, 741], "dict": [11, 13, 14, 44, 45, 116, 148, 150, 151, 154, 156, 157, 158, 163, 170, 177, 178, 183, 191, 196, 200, 203, 205, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 231, 233, 234, 236, 237, 240, 241, 251, 270, 276, 283, 284, 294, 313, 315, 320, 321, 322, 323, 325, 328, 331, 332, 333, 340, 343, 345, 348, 349, 350, 351, 352, 357, 360, 366, 369, 373, 374, 375, 376, 378, 379, 387, 391, 396, 397, 399, 405, 433, 448, 451, 452, 461, 471, 475, 541, 570, 575, 577, 587, 591, 593, 597, 598, 599, 600, 612, 614, 620, 631, 632, 634, 641, 642, 648, 653, 671, 680, 689, 729, 731, 732, 738, 739, 741], "configur": [11, 13, 14, 45, 118, 150, 156, 170, 177, 183, 184, 228, 233, 236, 237, 240, 241, 243, 254, 257, 270, 275, 283, 284, 297, 300, 311, 315, 316, 327, 328, 329, 331, 340, 345, 349, 353, 354, 360, 378, 379, 389, 433, 442, 451, 473, 477, 543, 591, 593, 597, 598, 612, 625, 631, 633, 634, 640, 641, 648, 649, 652, 653, 673, 675, 690, 697, 711, 718, 723, 724, 725, 727, 729, 732, 735, 736, 738, 740, 741, 744], "mxnetqueri": 11, "mxnet": [12, 13, 16, 237, 247, 251, 254, 257, 261, 269, 290, 294, 297, 300, 304, 310, 316, 325, 353, 378, 379, 384, 433, 647, 651, 652, 653, 670, 672, 679, 682, 685, 686, 690, 691, 692, 731, 741, 743], "init": [12, 17, 42, 180, 195, 205, 207, 229, 673, 689, 741], "optyp": [13, 236, 237, 313, 653], "enum": 13, "type": [13, 16, 42, 43, 44, 45, 74, 96, 105, 116, 122, 132, 140, 148, 150, 156, 157, 158, 163, 170, 177, 178, 187, 191, 194, 196, 200, 201, 204, 208, 209, 210, 215, 224, 225, 226, 228, 231, 234, 236, 237, 250, 252, 254, 261, 269, 271, 276, 293, 295, 297, 304, 310, 315, 318, 319, 321, 325, 332, 339, 343, 348, 350, 352, 357, 363, 367, 369, 371, 372, 374, 378, 387, 389, 391, 396, 397, 399, 400, 410, 437, 438, 445, 449, 451, 452, 455, 473, 477, 504, 526, 541, 547, 557, 570, 575, 577, 587, 591, 593, 597, 598, 599, 600, 612, 614, 615, 630, 641, 642, 652, 653, 673, 675, 678, 680, 682, 685, 690, 691, 711, 713, 718, 719, 723, 724, 732, 733, 735, 737, 740, 741, 742, 743], "isiter": 13, "obj": [13, 105, 205, 228, 251, 294, 311, 316, 327, 328, 329, 331, 340, 345, 349, 353, 379, 389, 433, 631, 634, 642], "bool": [13, 42, 43, 44, 141, 148, 150, 151, 154, 157, 163, 168, 170, 177, 192, 204, 210, 236, 237, 252, 254, 265, 269, 295, 297, 307, 310, 315, 319, 325, 348, 366, 372, 378, 396, 397, 399, 405, 410, 448, 452, 458, 471, 475, 570, 587, 598, 599, 600, 612, 614, 615, 622, 625, 637, 641, 642, 672, 673, 689, 721, 731, 740], "check": [13, 44, 67, 68, 105, 148, 150, 170, 177, 228, 243, 254, 297, 313, 349, 410, 497, 498, 570, 577, 593, 599, 641, 642, 651, 675, 678, 686, 694, 696, 698, 705, 708, 709, 713, 716, 719, 720, 736], "whether": [13, 43, 44, 105, 116, 148, 150, 151, 154, 157, 163, 170, 177, 210, 236, 237, 250, 252, 265, 269, 293, 295, 307, 310, 319, 321, 325, 348, 372, 374, 378, 396, 397, 399, 410, 541, 570, 577, 587, 592, 596, 598, 599, 600, 612, 614, 615, 634, 637, 641, 642, 652, 673, 689, 732, 735, 738, 740], "object": [13, 42, 43, 44, 45, 74, 86, 105, 116, 132, 148, 150, 154, 156, 158, 161, 163, 168, 170, 183, 191, 193, 203, 205, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 233, 234, 236, 237, 240, 241, 242, 252, 253, 254, 269, 270, 272, 283, 284, 285, 295, 296, 297, 310, 311, 316, 321, 329, 331, 334, 335, 337, 338, 339, 340, 345, 348, 349, 350, 351, 352, 353, 357, 370, 374, 378, 379, 387, 388, 427, 432, 433, 437, 451, 504, 516, 541, 557, 570, 572, 575, 577, 587, 588, 591, 593, 597, 602, 614, 630, 631, 634, 641, 642, 648, 649, 653, 659, 669, 671, 672, 673, 681, 689, 690, 692, 728, 729, 731, 732, 740, 741, 742, 744], "i": [13, 43, 44, 45, 48, 49, 51, 54, 55, 60, 64, 70, 82, 85, 105, 132, 143, 148, 150, 151, 154, 157, 158, 161, 163, 165, 168, 170, 177, 182, 183, 185, 187, 193, 196, 197, 203, 204, 208, 209, 215, 220, 221, 222, 223, 224, 225, 227, 228, 236, 237, 240, 241, 242, 250, 251, 252, 253, 254, 255, 256, 259, 261, 265, 269, 270, 272, 276, 278, 279, 283, 284, 285, 293, 294, 295, 296, 297, 298, 299, 302, 304, 307, 310, 318, 321, 323, 325, 327, 332, 340, 345, 349, 350, 354, 361, 371, 374, 376, 378, 379, 389, 400, 403, 410, 416, 417, 421, 433, 438, 443, 451, 452, 478, 479, 481, 484, 485, 490, 494, 500, 512, 515, 557, 565, 570, 572, 577, 587, 588, 593, 597, 598, 599, 600, 602, 612, 614, 615, 631, 637, 641, 642, 646, 647, 648, 649, 652, 653, 654, 655, 657, 661, 664, 667, 669, 670, 671, 672, 673, 675, 676, 677, 678, 680, 681, 682, 685, 686, 687, 689, 690, 691, 692, 693, 694, 695, 696, 698, 699, 701, 703, 704, 705, 707, 708, 710, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 723, 725, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 743, 744], "iter": [13, 15, 105, 140, 148, 150, 154, 170, 177, 183, 209, 215, 222, 226, 236, 237, 240, 241, 245, 250, 254, 255, 272, 283, 284, 288, 293, 297, 298, 350, 352, 379, 393, 433, 455, 473, 477, 570, 572, 597, 598, 599, 602, 614, 631, 634, 648, 649, 652, 669, 672, 673, 690, 729, 731, 732, 738, 739, 741, 743], "return": [13, 16, 44, 45, 54, 67, 68, 70, 74, 105, 116, 148, 150, 154, 156, 157, 158, 163, 168, 170, 176, 177, 178, 183, 191, 194, 196, 200, 201, 204, 205, 208, 210, 211, 215, 218, 224, 225, 226, 228, 231, 234, 240, 241, 254, 261, 265, 269, 270, 271, 276, 283, 284, 297, 304, 307, 310, 315, 318, 319, 321, 322, 323, 325, 331, 332, 339, 343, 348, 349, 350, 352, 357, 363, 367, 369, 371, 372, 374, 375, 376, 378, 379, 383, 387, 389, 391, 396, 397, 399, 400, 405, 410, 427, 432, 433, 437, 445, 449, 451, 452, 471, 473, 475, 477, 484, 497, 498, 500, 504, 541, 570, 575, 577, 587, 591, 592, 593, 596, 597, 598, 599, 600, 602, 612, 614, 622, 625, 630, 631, 634, 639, 641, 642, 648, 649, 653, 654, 672, 673, 678, 689, 692, 723, 724, 725, 727, 729, 732, 735, 738, 739, 741], "true": [13, 43, 44, 85, 113, 146, 148, 150, 151, 157, 163, 177, 183, 200, 204, 236, 237, 250, 252, 254, 255, 268, 269, 270, 293, 295, 297, 298, 309, 310, 315, 319, 325, 343, 366, 372, 378, 389, 396, 397, 399, 405, 433, 448, 452, 471, 475, 515, 538, 568, 570, 572, 587, 592, 593, 596, 598, 599, 600, 612, 613, 614, 615, 622, 625, 634, 637, 641, 642, 653, 672, 673, 675, 678, 682, 689, 690, 693, 696, 697, 712, 713, 714, 715, 721, 723, 731, 732, 733, 735, 738, 739, 740, 741, 743], "els": [13, 148, 154, 177, 237, 250, 293, 389, 570, 614, 639, 698, 735, 739], "fals": [13, 14, 15, 41, 42, 43, 44, 47, 48, 49, 71, 72, 89, 92, 99, 102, 103, 105, 113, 131, 136, 143, 146, 147, 148, 150, 151, 154, 155, 157, 162, 163, 168, 170, 177, 183, 194, 197, 230, 236, 237, 242, 244, 247, 248, 249, 251, 252, 254, 265, 269, 270, 271, 272, 278, 285, 287, 290, 291, 292, 294, 295, 297, 307, 310, 321, 325, 374, 378, 389, 397, 399, 405, 410, 433, 452, 461, 475, 478, 479, 501, 502, 519, 522, 529, 538, 556, 561, 565, 568, 569, 570, 572, 587, 593, 598, 599, 600, 612, 614, 622, 634, 637, 641, 642, 652, 653, 672, 673, 682, 689, 690, 703, 707, 713, 721, 724, 725, 731, 732, 735, 738, 739, 740, 741, 743], "boolean": [13, 150], "ensure_list": 13, "x": [13, 55, 74, 150, 157, 209, 236, 237, 251, 269, 294, 310, 357, 437, 452, 485, 504, 600, 670, 671, 675, 678, 691, 692, 718, 719, 723, 724, 726, 732, 733, 738, 739, 740, 742], "ensur": [13, 269, 310, 357, 437, 598, 678, 732, 740], "list": [13, 42, 43, 44, 54, 105, 140, 148, 150, 154, 156, 157, 158, 167, 170, 183, 184, 185, 187, 201, 208, 209, 214, 219, 224, 228, 231, 236, 237, 240, 241, 245, 252, 265, 269, 270, 283, 284, 288, 295, 307, 310, 314, 315, 318, 319, 321, 322, 323, 325, 332, 340, 345, 348, 351, 366, 371, 372, 374, 375, 376, 378, 379, 387, 393, 394, 396, 397, 399, 400, 403, 405, 410, 416, 417, 421, 433, 448, 452, 455, 471, 475, 477, 484, 570, 575, 593, 597, 600, 614, 622, 631, 632, 642, 648, 651, 652, 673, 680, 682, 686, 688, 690, 693, 698, 700, 703, 704, 707, 715, 718, 720, 721, 727, 729, 731, 732, 734, 738, 739, 741], "input": [13, 15, 42, 43, 44, 45, 54, 60, 64, 67, 68, 70, 71, 72, 74, 82, 83, 85, 86, 105, 109, 110, 116, 122, 141, 148, 150, 151, 154, 156, 166, 168, 169, 170, 175, 176, 177, 181, 208, 209, 228, 236, 237, 240, 241, 252, 253, 254, 256, 265, 268, 269, 274, 283, 284, 295, 296, 297, 299, 307, 309, 310, 313, 314, 315, 378, 379, 383, 387, 394, 400, 403, 433, 458, 484, 490, 494, 497, 498, 500, 501, 502, 504, 512, 513, 515, 516, 534, 535, 541, 547, 570, 572, 575, 591, 593, 597, 598, 611, 612, 613, 614, 615, 630, 631, 637, 639, 641, 642, 649, 652, 653, 669, 670, 672, 673, 675, 676, 677, 678, 680, 682, 684, 689, 690, 691, 692, 693, 698, 729, 731, 732, 735, 738, 739, 740, 743], "check_mx_vers": 13, "version": [13, 54, 104, 150, 154, 166, 170, 208, 237, 314, 315, 370, 484, 611, 646, 648, 652, 671, 682, 686, 687, 690, 703, 705, 707, 708, 730, 738, 741, 742], "str": [13, 42, 43, 44, 140, 150, 151, 156, 158, 163, 164, 167, 168, 170, 176, 177, 178, 184, 187, 191, 192, 194, 196, 205, 208, 231, 236, 237, 252, 253, 254, 261, 265, 269, 271, 275, 276, 295, 296, 297, 304, 307, 310, 314, 315, 318, 319, 321, 323, 325, 332, 343, 366, 369, 371, 372, 374, 376, 378, 391, 393, 394, 396, 397, 399, 400, 402, 403, 405, 410, 418, 426, 428, 431, 432, 448, 451, 452, 455, 471, 474, 475, 477, 577, 587, 589, 593, 597, 598, 612, 614, 615, 620, 622, 626, 630, 634, 637, 639, 642, 643, 671, 672, 673, 689, 721, 731, 739, 740], "mx": 13, "__version__": [13, 161, 588, 671], "combine_cap": 13, "current": [13, 70, 104, 175, 177, 203, 205, 208, 211, 215, 218, 236, 237, 327, 334, 335, 337, 338, 339, 348, 350, 357, 361, 437, 443, 500, 593, 614, 642, 648, 649, 652, 654, 670, 671, 678, 682, 690, 693, 697, 710, 718, 727, 729, 732, 735, 738, 741], "new": [13, 16, 44, 148, 150, 176, 183, 187, 242, 254, 269, 270, 285, 297, 310, 349, 389, 400, 570, 572, 593, 614, 615, 626, 647, 651, 653, 678, 690, 691, 704, 710, 711, 712, 713, 719, 720, 723, 724, 729, 730, 732, 735, 736, 737, 740, 742, 743], "combin": [13, 170, 236, 237, 240, 241, 265, 279, 283, 284, 307, 379, 433, 577, 597, 631, 642, 648, 652, 685, 690, 728, 730, 732, 734, 735, 740, 741], "capabl": [13, 47, 367, 449, 461, 653, 654, 669, 682, 690, 691, 701, 712, 717, 729, 731, 732, 741, 743], "contain": [13, 67, 68, 70, 74, 139, 148, 150, 158, 163, 170, 177, 183, 193, 205, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 228, 236, 237, 240, 241, 252, 253, 254, 283, 284, 295, 296, 297, 311, 315, 316, 321, 322, 323, 327, 340, 343, 345, 348, 349, 350, 351, 352, 353, 374, 375, 376, 379, 433, 497, 498, 500, 504, 564, 570, 587, 593, 599, 631, 634, 641, 670, 673, 676, 685, 689, 711, 718, 723, 724, 725, 729, 735, 739, 741, 742], "make_nc_model": 13, "target": [13, 42, 43, 102, 150, 151, 154, 157, 170, 208, 226, 228, 237, 349, 352, 357, 437, 600, 637, 673, 678, 690, 729, 739, 740, 741, 743], "sym_model": 13, "ctx": 13, "input_desc": 13, "convert": [13, 43, 48, 49, 50, 53, 54, 55, 56, 57, 66, 74, 86, 99, 100, 102, 103, 104, 105, 131, 136, 140, 142, 151, 156, 170, 208, 236, 237, 252, 265, 268, 269, 295, 307, 309, 310, 314, 321, 327, 349, 367, 374, 449, 452, 455, 460, 461, 478, 479, 480, 483, 484, 485, 486, 487, 496, 504, 516, 529, 530, 556, 561, 648, 653, 690, 691, 695, 732, 734, 735, 738, 740, 741], "symbol": [13, 43, 156, 168, 170, 318, 371, 379, 433, 648, 692], "model": [13, 15, 16, 29, 41, 42, 43, 44, 45, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 116, 118, 140, 141, 142, 148, 150, 151, 154, 155, 156, 157, 158, 162, 163, 164, 165, 167, 168, 169, 170, 175, 176, 177, 181, 183, 185, 193, 200, 205, 206, 208, 215, 216, 217, 220, 222, 223, 224, 226, 228, 230, 236, 237, 240, 241, 248, 251, 252, 254, 269, 270, 273, 274, 283, 284, 291, 294, 295, 297, 310, 311, 313, 314, 315, 316, 317, 325, 326, 327, 328, 331, 334, 335, 337, 338, 339, 340, 345, 349, 350, 351, 352, 353, 354, 357, 360, 363, 370, 378, 379, 389, 391, 393, 394, 396, 397, 399, 400, 402, 403, 409, 410, 426, 431, 432, 433, 434, 437, 438, 442, 445, 451, 452, 455, 458, 473, 474, 477, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 499, 501, 502, 503, 504, 505, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 526, 527, 528, 529, 530, 532, 533, 534, 541, 543, 570, 575, 577, 587, 589, 591, 592, 593, 596, 597, 598, 599, 600, 612, 613, 614, 615, 620, 621, 625, 630, 631, 637, 639, 641, 642, 644, 647, 648, 649, 651, 652, 654, 659, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 684, 685, 687, 689, 691, 693, 698, 700, 701, 704, 710, 712, 717, 719, 720, 721, 722, 727, 728, 730, 732, 736, 737, 739, 740, 741, 742, 743], "an": [13, 67, 68, 70, 105, 141, 143, 148, 150, 154, 158, 161, 163, 170, 177, 182, 197, 215, 236, 237, 245, 250, 254, 269, 273, 278, 288, 293, 297, 310, 317, 318, 322, 323, 331, 332, 354, 370, 371, 375, 376, 379, 427, 432, 433, 452, 458, 497, 498, 500, 565, 570, 587, 588, 593, 598, 602, 614, 615, 626, 631, 642, 644, 646, 648, 649, 651, 652, 654, 670, 672, 673, 674, 675, 680, 688, 689, 690, 691, 693, 697, 698, 701, 710, 713, 714, 715, 718, 721, 727, 729, 730, 732, 735, 737, 738, 739, 740, 741], "neural": [13, 158, 183, 193, 196, 210, 211, 212, 213, 224, 236, 237, 264, 265, 266, 269, 270, 273, 276, 279, 307, 308, 310, 312, 317, 324, 325, 327, 340, 345, 348, 351, 353, 354, 359, 365, 370, 377, 378, 379, 383, 411, 433, 440, 441, 447, 574, 639, 644, 647, 652, 653, 654, 669, 670, 671, 673, 674, 676, 677, 678, 679, 680, 681, 682, 683, 684, 687, 688, 691, 692, 694, 695, 698, 700, 701, 703, 705, 707, 708, 709, 721, 727, 728, 730, 732, 735, 736, 738, 739, 740, 741, 743, 744], "compressor": [13, 183, 193, 196, 212, 213, 224, 236, 237, 264, 265, 266, 269, 270, 273, 276, 279, 307, 308, 310, 312, 317, 324, 325, 327, 348, 351, 353, 354, 359, 365, 370, 377, 378, 379, 383, 411, 433, 441, 447, 574, 639, 644, 647, 649, 652, 653, 654, 669, 670, 671, 673, 674, 676, 677, 678, 679, 680, 681, 682, 683, 684, 687, 688, 691, 692, 693, 694, 698, 700, 701, 703, 705, 707, 708, 709, 712, 713, 714, 715, 717, 718, 725, 727, 728, 729, 730, 732, 735, 736, 738, 739, 740, 741, 742, 743, 744], "tupl": [13, 105, 148, 170, 201, 237, 240, 241, 265, 269, 283, 284, 307, 310, 315, 366, 379, 400, 403, 433, 448, 474, 570, 591, 593, 597, 602, 620, 631, 641, 653, 671, 673, 689, 690, 732, 740], "symnet": 13, "arg": [13, 54, 105, 150, 170, 177, 252, 253, 254, 295, 296, 297, 348, 357, 391, 402, 437, 452, 484, 598, 600, 614, 620, 637, 638, 673, 678, 690, 699, 729, 732, 735, 738, 739, 740], "aux": 13, "data": [13, 42, 43, 44, 56, 105, 140, 148, 150, 158, 163, 170, 175, 177, 181, 208, 236, 237, 240, 241, 270, 272, 283, 284, 315, 317, 357, 367, 369, 370, 379, 394, 400, 404, 410, 426, 431, 433, 437, 449, 451, 455, 473, 477, 486, 570, 573, 577, 587, 593, 597, 598, 614, 631, 634, 639, 642, 651, 652, 670, 672, 673, 678, 682, 683, 686, 689, 690, 691, 712, 713, 715, 718, 723, 724, 732, 734, 735, 736, 737, 738, 739, 740, 741, 742], "descript": [13, 132, 204, 452, 557, 648, 653, 654, 672, 718, 722, 738], "ncmodel": 13, "fuse": [13, 58, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 91, 92, 93, 94, 96, 131, 136, 168, 170, 181, 488, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 521, 522, 523, 524, 526, 556, 561, 597, 648, 738, 739], "suppli": 13, "get_framework_nam": 13, "get": [13, 42, 43, 44, 45, 67, 68, 70, 104, 105, 148, 150, 157, 164, 170, 176, 183, 192, 196, 197, 201, 203, 205, 206, 208, 211, 218, 225, 226, 227, 228, 234, 237, 245, 269, 270, 276, 278, 288, 310, 315, 348, 350, 352, 360, 367, 369, 378, 387, 397, 404, 410, 433, 442, 449, 451, 471, 497, 498, 500, 570, 575, 577, 589, 593, 597, 600, 609, 614, 630, 634, 637, 639, 642, 653, 670, 681, 685, 686, 688, 690, 696, 713, 715, 723, 724, 730, 735, 738, 741, 742, 745], "name": [13, 43, 45, 54, 67, 68, 70, 104, 105, 110, 116, 140, 148, 150, 151, 156, 157, 158, 163, 164, 168, 170, 176, 177, 178, 183, 184, 185, 187, 191, 197, 200, 201, 203, 208, 210, 215, 218, 219, 224, 225, 226, 227, 228, 231, 234, 236, 237, 252, 253, 254, 257, 261, 267, 269, 270, 274, 277, 278, 295, 296, 297, 300, 304, 310, 313, 314, 315, 320, 325, 343, 348, 350, 352, 367, 369, 373, 378, 383, 387, 389, 410, 433, 449, 451, 455, 484, 497, 498, 500, 535, 541, 570, 575, 577, 587, 589, 593, 597, 600, 614, 626, 630, 632, 634, 639, 642, 647, 648, 654, 671, 673, 675, 678, 680, 682, 687, 689, 690, 692, 696, 703, 707, 711, 712, 718, 729, 732, 736, 737, 739, 741, 743, 744], "context": [13, 615, 642, 731, 735], "prepare_model_data": 13, "nc_model": [13, 340, 345], "data_x": 13, "prepar": [13, 44, 170, 400, 648, 673, 678, 683, 712, 723, 724, 725, 729, 732], "dataload": [13, 15, 42, 44, 140, 141, 150, 155, 157, 158, 170, 175, 177, 183, 205, 206, 208, 224, 228, 230, 240, 241, 252, 263, 273, 283, 284, 295, 306, 311, 317, 340, 345, 354, 370, 393, 394, 403, 426, 431, 433, 455, 458, 572, 593, 598, 599, 600, 613, 614, 631, 634, 648, 651, 652, 653, 675, 676, 677, 678, 683, 684, 690, 691, 712, 713, 728, 729, 732, 733, 734, 735, 738, 739, 740, 742, 743], "need": [13, 42, 105, 109, 151, 175, 177, 183, 187, 208, 224, 237, 240, 241, 242, 250, 251, 254, 261, 269, 272, 274, 275, 283, 284, 285, 293, 294, 297, 304, 310, 315, 354, 360, 378, 379, 389, 394, 433, 442, 534, 572, 591, 593, 599, 631, 641, 642, 648, 652, 671, 672, 673, 675, 676, 678, 685, 690, 693, 695, 696, 699, 703, 704, 705, 707, 708, 710, 711, 712, 713, 714, 715, 717, 721, 723, 729, 731, 732, 733, 734, 735, 736, 738, 740, 741, 743], "run": [13, 140, 148, 163, 177, 183, 215, 228, 236, 237, 240, 241, 251, 268, 270, 283, 284, 294, 309, 349, 350, 357, 379, 433, 437, 455, 570, 587, 600, 613, 615, 631, 652, 669, 678, 681, 682, 690, 693, 695, 697, 698, 699, 701, 703, 704, 705, 707, 708, 710, 718, 719, 720, 721, 723, 724, 725, 730, 732, 735, 736, 737, 739, 741, 743], "loader": [13, 140, 240, 241, 283, 284, 379, 433, 455, 473, 477, 631, 637, 672, 732], "dataloaderwrap": 13, "prepare_model": 13, "create_data_exampl": 13, "creat": [13, 16, 105, 161, 187, 236, 237, 242, 252, 254, 272, 285, 295, 297, 321, 331, 332, 367, 374, 403, 427, 432, 449, 451, 452, 572, 588, 626, 634, 646, 649, 652, 673, 692, 703, 705, 707, 708, 711, 723, 724, 725, 729, 732, 737, 739, 741, 742], "exampl": [13, 44, 150, 154, 158, 163, 170, 177, 183, 184, 185, 187, 191, 201, 208, 209, 224, 236, 237, 252, 253, 254, 265, 269, 295, 296, 297, 307, 310, 321, 322, 323, 325, 351, 374, 375, 376, 378, 379, 389, 396, 397, 399, 410, 433, 451, 452, 577, 587, 591, 599, 612, 614, 626, 630, 631, 641, 642, 646, 651, 653, 654, 659, 684, 685, 693, 696, 697, 698, 701, 718, 721, 734, 736, 740, 741, 742, 745], "prepare_dataload": 13, "io": [13, 163, 587, 716], "ndarray_to_devic": 13, "ndarrai": [13, 42, 43, 67, 68, 70, 269, 310, 497, 498, 500, 632, 681, 740], "devic": [13, 45, 79, 89, 90, 91, 92, 93, 94, 97, 107, 131, 136, 147, 150, 151, 157, 162, 163, 165, 170, 177, 205, 208, 209, 224, 228, 230, 236, 237, 509, 519, 520, 521, 522, 523, 524, 527, 532, 556, 561, 569, 587, 598, 600, 615, 637, 653, 672, 676, 690, 691, 693, 696, 701, 710, 729, 731, 733, 735], "is_model_quant": 13, "query_quantizable_nod": 13, "node": [13, 42, 43, 44, 50, 54, 55, 56, 57, 60, 62, 64, 67, 68, 70, 74, 77, 80, 82, 83, 84, 98, 102, 103, 105, 110, 132, 140, 148, 208, 313, 315, 387, 400, 410, 432, 455, 480, 484, 485, 486, 487, 490, 492, 494, 497, 498, 500, 504, 507, 510, 512, 513, 514, 528, 535, 557, 570, 575, 652, 675, 678, 713, 717, 720, 723, 724, 725, 733, 739, 741, 744], "given": [13, 16, 43, 67, 68, 70, 104, 105, 116, 148, 150, 164, 170, 231, 269, 310, 321, 374, 433, 497, 498, 500, 541, 570, 589, 602, 614, 630, 649, 654, 729, 738, 740], "map": [13, 43, 105, 148, 163, 170, 191, 237, 269, 310, 313, 315, 316, 320, 322, 323, 325, 340, 345, 350, 353, 373, 375, 376, 378, 570, 587, 671, 673, 678, 689, 690, 703, 707, 715, 729, 732, 735], "quantize_sym_model": 13, "qconfig": [13, 151, 170, 641, 735, 739], "accord": [13, 122, 170, 183, 236, 237, 252, 253, 254, 269, 295, 296, 297, 310, 360, 440, 442, 547, 634, 649, 652, 673, 678, 713, 718, 723, 724, 725, 729, 734, 738, 740, 741], "run_forward": 13, "b_filter": 13, "collector": [13, 158, 632], "pre_batch": 13, "post_batch": 13, "forward": [13, 150, 170, 228, 615, 653, 690, 712, 729, 731, 732, 735, 738, 739], "propag": [13, 100, 530], "filter": [13, 252, 253, 254, 255, 256, 257, 259, 263, 295, 296, 297, 298, 299, 300, 302, 306, 317, 370, 572, 577, 642, 654, 673, 685, 729, 739], "which": [13, 42, 56, 83, 110, 150, 154, 157, 158, 163, 175, 177, 184, 203, 208, 209, 211, 215, 216, 217, 219, 222, 223, 224, 226, 228, 236, 237, 252, 253, 254, 265, 270, 295, 296, 297, 307, 318, 323, 332, 334, 335, 337, 338, 339, 343, 348, 349, 350, 352, 357, 371, 376, 378, 383, 389, 394, 397, 410, 433, 437, 486, 513, 535, 577, 587, 593, 599, 600, 630, 642, 646, 648, 649, 652, 653, 654, 670, 672, 673, 675, 676, 678, 681, 682, 685, 689, 690, 691, 692, 694, 698, 701, 704, 710, 711, 712, 715, 718, 723, 724, 725, 728, 729, 731, 732, 733, 734, 735, 736, 738, 739, 740, 741, 742, 743], "batch": [13, 150, 170, 177, 242, 244, 245, 250, 251, 272, 285, 287, 288, 293, 294, 572, 598, 614, 631, 672, 676, 677, 690, 728, 729, 732, 738, 740, 741, 744], "infer": [13, 43, 105, 140, 151, 170, 177, 208, 316, 353, 387, 389, 410, 433, 455, 575, 597, 599, 614, 615, 631, 652, 653, 670, 676, 677, 690, 691, 710, 727, 729, 730, 732, 735, 738, 739, 741], "collect": [13, 16, 43, 150, 170, 185, 267, 269, 272, 274, 275, 277, 310, 323, 325, 376, 378, 577, 632, 642, 653, 732, 739, 741], "inform": [13, 150, 158, 203, 205, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 237, 240, 241, 272, 274, 275, 283, 284, 348, 350, 351, 352, 354, 378, 393, 642, 646, 647, 650, 651, 652, 653, 654, 655, 657, 661, 664, 667, 670, 671, 676, 682, 690, 692, 705, 708, 711, 712, 715, 716, 718, 719, 723, 724, 729, 734, 735, 736, 738, 739, 743, 744, 745], "dure": [13, 161, 163, 210, 214, 226, 236, 237, 348, 352, 389, 403, 587, 588, 642, 653, 675, 690, 692, 717, 727, 728, 729, 732, 738, 739, 743], "call": [13, 42, 163, 175, 178, 208, 216, 217, 222, 321, 350, 374, 394, 587, 593, 615, 648, 649, 652, 672, 684, 699, 701, 711, 729, 732, 738, 739, 740], "prior": [13, 88, 518, 741], "after": [13, 78, 148, 151, 170, 206, 210, 215, 217, 222, 236, 237, 252, 265, 269, 272, 295, 307, 310, 350, 438, 452, 508, 570, 637, 642, 649, 651, 653, 673, 675, 676, 677, 680, 685, 689, 690, 703, 704, 707, 711, 715, 727, 728, 729, 732, 734, 735, 737, 738, 739, 740, 741], "count": [13, 649, 673, 735], "int": [13, 16, 42, 43, 44, 105, 140, 148, 150, 151, 155, 167, 170, 177, 184, 187, 192, 206, 236, 237, 251, 252, 253, 265, 269, 294, 295, 296, 307, 310, 314, 315, 319, 321, 325, 332, 372, 374, 378, 393, 396, 397, 399, 400, 405, 410, 418, 427, 432, 451, 452, 455, 456, 460, 473, 474, 477, 570, 597, 598, 599, 612, 614, 622, 637, 642, 671, 672, 673, 689, 690, 721, 731, 735, 740], "make_symbol_block": 13, "gluon": [13, 379, 433, 692], "symbolblock": 13, "make_modul": 13, "parse_tune_config": 13, "tune_cfg": [13, 148, 156, 170, 570, 592, 593, 596, 597, 652, 654, 741], "quantizable_nod": 13, "strategi": [13, 170, 222, 236, 237, 238, 254, 281, 297, 317, 370, 651, 652, 653, 654, 659, 670, 671, 672, 678, 685, 690, 698, 710, 715, 730, 731, 732, 734, 735, 736, 742, 743], "config": [13, 44, 115, 116, 118, 122, 170, 183, 184, 185, 187, 191, 192, 203, 205, 206, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 236, 240, 241, 252, 283, 284, 295, 334, 335, 337, 338, 339, 340, 345, 348, 349, 350, 351, 352, 367, 368, 370, 379, 391, 396, 397, 399, 402, 403, 427, 432, 449, 450, 451, 452, 456, 460, 461, 477, 540, 541, 543, 547, 592, 593, 596, 597, 631, 634, 641, 642, 649, 651, 653, 654, 659, 669, 671, 672, 675, 676, 677, 678, 680, 683, 685, 689, 690, 691, 692, 712, 713, 728, 729, 731, 732, 734, 735, 737, 739, 741], "tune": [13, 45, 150, 176, 177, 183, 184, 185, 190, 236, 237, 240, 241, 252, 254, 283, 284, 295, 297, 316, 353, 355, 356, 357, 358, 360, 361, 362, 363, 366, 367, 368, 369, 379, 389, 403, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 448, 449, 450, 451, 474, 593, 598, 621, 631, 642, 652, 653, 670, 671, 672, 673, 675, 678, 685, 687, 690, 691, 710, 714, 717, 719, 720, 727, 729, 730, 734, 736, 737, 739, 743], "from": [13, 43, 45, 61, 67, 68, 70, 105, 148, 150, 151, 154, 163, 164, 170, 176, 177, 183, 185, 187, 191, 193, 194, 201, 203, 205, 211, 212, 213, 214, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 236, 237, 240, 241, 242, 245, 249, 252, 253, 254, 255, 256, 257, 259, 264, 265, 271, 272, 275, 283, 284, 285, 288, 292, 295, 296, 297, 298, 299, 300, 302, 307, 311, 313, 314, 315, 318, 321, 322, 323, 327, 332, 348, 349, 350, 352, 367, 369, 371, 374, 375, 376, 379, 387, 389, 396, 410, 433, 449, 451, 452, 460, 491, 497, 498, 500, 570, 572, 575, 577, 587, 589, 591, 593, 597, 598, 602, 612, 614, 631, 634, 637, 641, 642, 646, 647, 648, 649, 652, 654, 669, 671, 672, 673, 675, 676, 677, 678, 679, 680, 681, 683, 685, 688, 689, 691, 692, 693, 697, 698, 699, 701, 711, 713, 715, 716, 720, 723, 724, 725, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742], "distribute_calib_tensor": 13, "calib_tensor": 13, "calib_cfg": 13, "tensor_to_nod": 13, "distribut": [13, 16, 143, 182, 236, 237, 242, 244, 245, 247, 248, 249, 250, 251, 272, 285, 287, 288, 290, 291, 292, 293, 294, 396, 565, 572, 636, 651, 653, 672, 676, 686, 705, 708, 712, 715, 723, 730, 732, 735, 736, 738, 742, 744], "depend": [13, 240, 241, 270, 283, 284, 379, 433, 631, 647, 681, 682, 716, 731, 732, 741], "algorithm": [13, 44, 154, 157, 170, 184, 187, 200, 233, 237, 318, 325, 333, 370, 371, 378, 403, 410, 577, 630, 634, 636, 649, 652, 653, 654, 671, 676, 677, 682, 685, 688, 699, 704, 729, 732, 739, 743], "set": [13, 43, 51, 96, 105, 115, 148, 150, 163, 170, 176, 177, 183, 185, 192, 196, 228, 234, 236, 237, 240, 241, 242, 252, 254, 257, 269, 270, 275, 276, 283, 284, 285, 295, 297, 300, 310, 321, 327, 340, 345, 349, 354, 374, 378, 379, 387, 397, 399, 432, 433, 452, 460, 481, 526, 540, 570, 572, 575, 587, 593, 598, 614, 630, 631, 639, 642, 646, 649, 651, 653, 669, 672, 673, 676, 678, 680, 682, 684, 685, 686, 689, 690, 691, 693, 695, 697, 711, 712, 713, 714, 715, 716, 720, 723, 729, 731, 732, 735, 737, 738, 741, 743], "kl": [13, 16, 236, 237, 632, 636, 653, 654, 670, 682, 690, 741, 743], "minmax": [13, 16, 475, 653, 654, 670, 682, 732, 743], "calib_model": 13, "qsym_model": 13, "calib_data": [13, 162], "calibdata": 13, "threshold": [13, 179, 204, 632, 636, 689], "amp_convert": 13, "amp_cfg": 13, "support": [13, 42, 43, 44, 97, 104, 150, 175, 177, 181, 184, 194, 196, 205, 211, 218, 222, 223, 236, 237, 240, 241, 251, 252, 254, 261, 265, 269, 271, 272, 273, 276, 283, 284, 294, 295, 297, 304, 307, 310, 317, 325, 327, 332, 348, 350, 354, 361, 367, 370, 378, 379, 383, 389, 394, 396, 397, 399, 400, 403, 410, 433, 443, 449, 452, 527, 593, 631, 634, 636, 637, 642, 644, 651, 653, 671, 688, 690, 693, 698, 701, 704, 710, 717, 718, 721, 730, 734, 737, 741, 742], "amp": [13, 150, 177, 598, 693, 700, 719, 735], "wrap": [13, 105, 116, 150, 194, 232, 271, 321, 374, 477, 541, 615, 648, 678, 705, 708], "dataiterload": 13, "data_it": [13, 208], "collectorbas": 13, "calibcollector": 13, "include_tensors_kl": 13, "include_tensors_minmax": 13, "num_bin": [13, 16, 632], "8001": [13, 632, 718, 723, 724, 725], "tensorcollector": 13, "include_nod": 13, "qtensor_to_tensor": 13, "build": [13, 42, 44, 115, 178, 179, 181, 182, 328, 331, 382, 384, 386, 387, 388, 400, 409, 540, 575, 652, 653, 654, 686, 692, 703, 705, 707, 708, 711, 730, 741], "up": [13, 100, 219, 269, 310, 349, 530, 597, 651, 678, 679, 682, 685, 701, 705, 708, 710, 729, 730, 731, 732, 737, 740, 741, 743], "namecollector": 13, "cache_kl": 13, "cache_minmax": 13, "tensors_kl": 13, "tensors_minmax": 13, "onnxruntimeadaptor": 14, "rt": 14, "onnxrt_weightonlyadaptor": 14, "onnxrt_qlinearopsadaptor": [14, 652], "onnxrt_integeropsadaptor": 14, "onnxrt_qdqadaptor": 14, "onnxrtqueri": 14, "dynam": [14, 150, 163, 177, 237, 242, 285, 315, 367, 449, 572, 587, 598, 652, 672, 676, 680, 685, 690, 693, 698, 699, 700, 701, 704, 710, 730, 741, 744], "static": [14, 41, 42, 47, 175, 181, 208, 237, 315, 367, 394, 433, 449, 460, 461, 471, 473, 475, 593, 625, 652, 653, 654, 675, 680, 685, 690, 693, 698, 699, 700, 701, 704, 710, 713, 721, 723, 724, 725, 733, 738, 741, 744], "format": [14, 18, 43, 54, 148, 151, 170, 236, 237, 252, 253, 254, 295, 296, 297, 315, 321, 327, 367, 374, 449, 452, 460, 461, 484, 570, 598, 637, 651, 653, 654, 671, 673, 678, 680, 689, 690, 691, 692, 693, 715, 718, 730, 732, 735, 736], "onnxrtaug": 15, "dump_op_typ": 15, "black_nod": 15, "white_nod": 15, "cpuexecutionprovid": [15, 41, 42, 44, 393, 394, 396, 397, 399, 405, 691, 732], "reduce_rang": [15, 41, 42, 236, 237, 410, 654, 731], "kwarg": [15, 43, 105, 122, 123, 124, 125, 126, 127, 128, 129, 132, 133, 135, 137, 138, 150, 164, 170, 177, 206, 236, 237, 254, 267, 269, 274, 277, 297, 310, 366, 368, 378, 379, 380, 382, 384, 386, 387, 388, 391, 393, 402, 405, 409, 433, 448, 450, 452, 547, 548, 549, 550, 551, 552, 553, 554, 557, 558, 560, 562, 563, 575, 589, 600, 612, 614, 620, 631, 637, 638, 641, 642, 672], "augment": 15, "dump": [15, 161, 170, 183, 315, 393, 577, 588, 597, 642, 647, 715, 732, 736, 739], "calib_registri": 16, "calib_method": 16, "calibratorbas": 16, "minmaxcalibr": 16, "percentilecalibr": 16, "2048": [16, 150, 157, 177, 577, 598, 600, 622, 642, 735], "percentil": [16, 44, 140, 177, 399, 400, 455, 475, 612, 614, 670], "99": [16, 185, 475, 744], "999": [16, 475, 743], "option": [16, 44, 105, 150, 151, 154, 163, 170, 177, 187, 192, 210, 236, 237, 240, 241, 252, 269, 283, 284, 295, 310, 314, 315, 321, 327, 348, 354, 367, 370, 374, 378, 379, 391, 396, 397, 399, 400, 403, 410, 433, 449, 451, 452, 577, 587, 599, 609, 612, 614, 615, 631, 635, 637, 642, 653, 654, 671, 672, 673, 682, 686, 690, 704, 718, 721, 723, 724, 725, 729, 732, 735, 737, 738, 740, 741, 743], "number": [16, 44, 67, 68, 105, 140, 150, 151, 170, 177, 184, 185, 201, 204, 206, 212, 213, 236, 237, 250, 253, 265, 269, 293, 296, 307, 310, 322, 323, 325, 348, 357, 375, 376, 378, 396, 397, 399, 400, 427, 432, 437, 452, 455, 497, 498, 598, 599, 614, 626, 634, 642, 669, 672, 673, 678, 689, 718, 720, 729, 732, 735, 737, 738, 740, 741], "bin": [16, 163, 164, 577, 587, 589, 642, 681], "histogram": [16, 577, 632, 642, 712, 739], "valu": [16, 43, 44, 56, 67, 68, 70, 89, 90, 105, 143, 148, 150, 163, 170, 182, 183, 201, 203, 208, 209, 219, 227, 228, 233, 234, 236, 237, 240, 241, 252, 255, 256, 265, 269, 270, 283, 284, 295, 298, 299, 307, 310, 321, 325, 349, 357, 360, 367, 374, 378, 379, 397, 410, 433, 437, 442, 449, 451, 452, 486, 497, 498, 500, 519, 520, 565, 570, 572, 587, 597, 602, 615, 631, 632, 634, 642, 648, 653, 654, 670, 673, 675, 682, 689, 690, 691, 696, 713, 715, 721, 727, 729, 731, 732, 735, 736, 738, 740, 741, 743], "default": [16, 44, 97, 148, 150, 151, 154, 163, 170, 177, 184, 187, 192, 204, 228, 234, 236, 237, 240, 241, 244, 252, 253, 254, 265, 269, 283, 284, 287, 295, 296, 297, 307, 310, 314, 315, 318, 327, 349, 369, 371, 378, 387, 391, 396, 397, 399, 400, 405, 410, 451, 471, 475, 527, 570, 575, 577, 587, 598, 599, 609, 612, 614, 615, 622, 625, 634, 637, 642, 648, 652, 671, 672, 673, 682, 685, 686, 689, 690, 691, 698, 701, 703, 707, 715, 718, 723, 724, 725, 727, 729, 731, 732, 734, 735, 737, 738, 740, 741, 743], "float": [16, 43, 44, 140, 141, 150, 154, 158, 177, 184, 204, 210, 215, 225, 228, 236, 237, 252, 265, 295, 307, 319, 321, 322, 323, 350, 372, 374, 375, 376, 397, 400, 405, 448, 452, 455, 458, 475, 592, 596, 598, 612, 614, 622, 625, 626, 639, 642, 671, 673, 689, 731, 732, 738, 740], "A": [16, 55, 74, 75, 103, 116, 140, 141, 148, 150, 161, 170, 184, 190, 193, 200, 201, 203, 205, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 236, 237, 254, 269, 272, 274, 275, 297, 310, 311, 318, 321, 322, 323, 325, 328, 331, 332, 333, 340, 343, 345, 348, 349, 350, 351, 352, 357, 371, 374, 375, 376, 378, 379, 383, 387, 437, 455, 458, 485, 504, 505, 541, 570, 574, 575, 577, 588, 592, 596, 614, 626, 631, 642, 647, 653, 671, 672, 673, 679, 682, 689, 690, 692, 703, 704, 707, 710, 718, 729, 730, 732, 735, 738, 740, 741, 743], "between": [16, 42, 143, 182, 221, 236, 237, 269, 310, 322, 325, 375, 378, 427, 432, 565, 642, 648, 652, 653, 654, 670, 675, 676, 685, 689, 690, 701, 732, 735, 736, 737, 738, 740, 741], "0": [16, 43, 44, 54, 90, 105, 148, 150, 151, 154, 162, 163, 170, 177, 179, 181, 184, 185, 194, 201, 203, 204, 206, 228, 230, 232, 236, 237, 242, 244, 247, 248, 249, 251, 252, 255, 256, 259, 265, 269, 271, 272, 285, 287, 290, 291, 292, 294, 295, 298, 299, 302, 307, 310, 315, 316, 325, 332, 340, 345, 353, 378, 389, 396, 397, 399, 400, 405, 410, 433, 438, 452, 475, 484, 520, 570, 572, 587, 597, 598, 612, 614, 622, 626, 637, 648, 651, 671, 672, 673, 676, 678, 680, 681, 682, 686, 687, 689, 690, 691, 696, 698, 703, 707, 713, 723, 724, 729, 731, 732, 733, 735, 736, 737, 738, 739, 740, 741, 743], "100": [16, 183, 184, 185, 201, 204, 236, 237, 254, 297, 405, 452, 473, 474, 477, 626, 669, 673, 678, 684, 690, 715, 731, 732, 740, 741, 743, 744], "klcalibr": 16, "128": [16, 44, 150, 155, 157, 170, 177, 230, 252, 255, 256, 269, 295, 298, 299, 310, 397, 405, 572, 598, 599, 600, 614, 673, 690, 732, 735, 740, 744], "num_quantized_bin": 16, "histogramcollector": 16, "collctor": 16, "smooth_distribut": 16, "p": [16, 154, 711, 712, 735], "ep": [16, 182, 691], "0001": [16, 201, 236, 237, 676, 690, 731], "smooth": [16, 140, 141, 148, 175, 181, 236, 237, 366, 393, 402, 405, 455, 456, 458, 475, 570, 593, 671, 729, 741], "discret": [16, 201, 741], "mai": [16, 148, 161, 163, 334, 335, 337, 338, 339, 452, 570, 587, 588, 615, 646, 647, 653, 670, 671, 675, 680, 681, 687, 691, 703, 707, 713, 716, 718, 730, 732, 735, 738, 741], "have": [16, 74, 83, 141, 148, 163, 205, 209, 211, 218, 250, 272, 293, 318, 321, 348, 350, 371, 374, 378, 433, 451, 452, 458, 504, 513, 570, 587, 598, 646, 647, 653, 654, 671, 672, 673, 675, 678, 682, 687, 689, 690, 691, 693, 710, 713, 716, 718, 723, 724, 725, 727, 729, 732, 733, 735, 738, 741, 742], "been": [16, 150, 163, 205, 211, 218, 318, 348, 350, 371, 410, 577, 587, 649, 654, 671, 676, 690, 691, 710, 735, 738], "normal": [16, 33, 269, 310, 323, 376, 690, 719, 727, 735, 738, 740], "1": [16, 42, 43, 44, 55, 74, 89, 105, 109, 113, 146, 148, 150, 151, 154, 163, 166, 170, 175, 177, 179, 181, 182, 183, 185, 194, 201, 203, 204, 216, 217, 219, 236, 237, 242, 244, 247, 248, 249, 251, 252, 253, 255, 256, 259, 260, 265, 269, 270, 271, 272, 285, 287, 290, 291, 292, 294, 295, 296, 298, 299, 302, 303, 307, 310, 316, 321, 322, 323, 325, 340, 345, 350, 353, 354, 374, 375, 376, 378, 389, 394, 396, 397, 399, 400, 410, 433, 451, 452, 456, 485, 504, 519, 534, 538, 568, 570, 572, 577, 587, 593, 597, 598, 599, 611, 612, 614, 622, 634, 637, 642, 646, 648, 651, 652, 654, 670, 672, 673, 675, 676, 680, 682, 683, 686, 688, 689, 691, 694, 696, 712, 713, 720, 721, 723, 724, 725, 727, 728, 729, 731, 732, 733, 735, 736, 737, 738, 739, 740, 741, 742, 743], "replac": [16, 150, 164, 170, 176, 177, 323, 376, 589, 593, 599, 614, 671, 678, 690, 701, 736], "zero": [16, 43, 44, 150, 151, 157, 177, 215, 228, 269, 310, 350, 397, 400, 410, 600, 614, 642, 651, 715, 729, 732, 735, 738, 740, 741], "multipli": [16, 236, 237, 735], "scale": [16, 43, 44, 100, 141, 143, 150, 157, 166, 169, 170, 175, 176, 177, 181, 182, 265, 269, 307, 310, 396, 397, 400, 410, 458, 530, 565, 593, 598, 599, 600, 611, 612, 613, 614, 732, 735, 737, 738, 740, 741], "factor": [16, 141, 154, 458, 735, 738, 744], "take": [16, 210, 237, 240, 241, 245, 269, 274, 283, 284, 288, 310, 348, 357, 378, 379, 433, 437, 631, 646, 648, 649, 672, 675, 676, 682, 690, 710, 729, 732, 734, 735, 740, 741, 743], "correspond": [16, 158, 208, 219, 236, 237, 252, 295, 318, 321, 325, 371, 374, 378, 615, 634, 642, 652, 682, 690, 729, 731, 732, 737, 741], "amount": [16, 738], "off": [16, 67, 68, 70, 497, 498, 500, 647, 735], "non": [16, 349, 642, 648, 675, 735, 741], "ref": [16, 148, 570], "http": [16, 157, 158, 203, 204, 212, 213, 222, 223, 224, 230, 252, 254, 295, 297, 318, 319, 321, 322, 323, 348, 350, 351, 371, 372, 374, 375, 376, 378, 404, 433, 600, 622, 648, 673, 675, 683, 686, 687, 690, 699, 705, 708, 712, 714, 715, 716, 717, 718, 721, 723, 724, 725, 729, 736], "hanj": 16, "c": [16, 74, 254, 297, 504, 642, 673, 681, 686, 735, 741], "illinoi": 16, "edu": [16, 254, 297, 673], "cs412": 16, "bk3": 16, "diverg": [16, 632, 636, 654, 670, 676, 741], "pdf": [16, 204, 230], "github": [16, 158, 212, 213, 224, 252, 295, 318, 319, 322, 323, 348, 351, 371, 372, 375, 376, 378, 404, 433, 647, 651, 673, 675, 679, 686, 687, 690, 699, 705, 708, 712, 714, 715, 716, 717, 718, 721, 724, 725, 736], "com": [16, 158, 212, 213, 224, 252, 295, 318, 319, 322, 323, 348, 351, 371, 372, 375, 376, 378, 404, 433, 646, 671, 673, 675, 683, 686, 687, 690, 693, 699, 712, 714, 715, 717, 718, 721, 724, 725, 736, 737, 744], "apach": [16, 687], "incub": 16, "blob": [16, 158, 212, 213, 318, 319, 322, 323, 348, 371, 372, 375, 376, 378, 404, 433, 690, 699, 721, 724, 725], "master": [16, 212, 213, 224, 318, 319, 322, 323, 348, 351, 371, 372, 375, 376, 378, 433, 690, 741], "python": [16, 75, 148, 161, 163, 254, 273, 297, 317, 370, 404, 452, 505, 570, 577, 587, 588, 642, 644, 648, 651, 671, 673, 675, 678, 681, 686, 690, 695, 701, 704, 710, 714, 715, 717, 718, 720, 723, 725, 729, 730, 740], "contrib": [16, 317, 370], "py": [16, 148, 158, 183, 215, 236, 237, 319, 321, 322, 323, 350, 372, 374, 375, 376, 404, 452, 570, 648, 652, 671, 675, 678, 686, 690, 695, 697, 698, 699, 705, 708, 712, 714, 715, 717, 718, 720, 721, 723, 724, 725, 732, 736, 739], "microsoft": [16, 404, 651, 652], "onnxruntim": [16, 236, 237, 248, 254, 261, 291, 297, 304, 326, 404, 427, 652, 670, 672, 685, 686, 691, 713, 731], "main": [16, 157, 196, 201, 219, 224, 276, 351, 402, 403, 404, 473, 474, 477, 600, 620, 621, 625, 648, 672, 675, 678, 690, 697, 699, 711, 720, 729, 732, 735], "tool": [16, 148, 314, 404, 570, 642, 651, 652, 690, 703, 707, 713, 716, 717, 718, 729, 730, 732], "arrai": [16, 43, 44, 148, 163, 269, 310, 321, 332, 374, 400, 410, 570, 587, 642, 740], "small": [16, 67, 68, 69, 70, 440, 497, 498, 499, 500, 649, 715, 716, 729, 735, 741, 744], "probabl": [16, 236, 237, 636, 735], "activationoper": 18, "onnx_quant": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40], "onnx_nod": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 87, 101, 111], "removableactivationoper": 18, "remov": [18, 43, 51, 57, 60, 74, 80, 83, 84, 85, 96, 98, 140, 206, 219, 323, 376, 455, 481, 487, 490, 504, 510, 513, 514, 515, 526, 528, 646, 690, 703, 707, 716, 723, 724, 729, 739], "qactivationoper": 18, "children": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 34, 35, 36, 38, 39, 164, 589], "initi": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 34, 35, 36, 38, 39, 42, 43, 44, 105, 116, 148, 154, 163, 194, 215, 240, 241, 249, 252, 271, 283, 284, 292, 295, 349, 350, 367, 400, 433, 449, 541, 570, 587, 602, 631, 649, 654, 673, 689, 709, 729, 732, 738, 741], "qoper": [18, 34, 236, 237, 680, 713], "float16activationoper": 18, "float16": [18, 21, 43, 150, 151, 615, 637, 673, 735], "argmaxoper": 19, "qargmaxoper": 19, "attentionoper": 20, "qattentionoper": 20, "qattent": 20, "binari": [21, 148, 325, 378, 570, 681, 689, 705, 708, 736], "binaryoper": 21, "binarydirect8bitoper": 21, "qbinaryoper": 21, "qbinari": 21, "float16binaryoper": 21, "concatoper": 22, "qconcatoper": 22, "qconcat": 22, "convoper": 23, "qconvoper": 23, "qlinearconv": 23, "direct8bit": 24, "direct8bitoper": 24, "qdirectoper": 24, "qdirect": 24, "embedlayernorm": 25, "embedlayernormalizationoper": 25, "qembedlayernormalizationoper": 25, "qembedlayernorm": 25, "gatheroper": 26, "qgatheroper": 26, "qgather": 26, "globalaveragepool": 27, "globalaveragepooloper": 27, "qglobalaveragepooloper": 27, "qlinearglobalaveragepool": 27, "gemmoper": 28, "qgemmoper": 28, "qgemm": 28, "lstmoper": 30, "matmuloper": 31, "qmatmuloper": 31, "qlinearmatmul": 31, "fusedmatmuloper": 31, "fusedmatmul": 31, "maxpooloper": 32, "qmaxpooloper": 32, "qmaxpool": 32, "batchnormalizationoper": 33, "batchnorm": [33, 62, 67, 121, 492, 497, 546, 648, 738], "normalizationoper": 33, "op_registri": 34, "op_typ": [34, 140, 141, 148, 231, 368, 405, 450, 455, 458, 475, 570, 593, 597], "qop_registri": 34, "padoper": 35, "qpadoper": 35, "qpad": 35, "averagepool": 36, "pooloper": 36, "qpooloper": 36, "qlinearaveragepool": 36, "reduceoper": 37, "reduceminmaxoper": 37, "reducemin": 37, "reducemax": 37, "resizeoper": 38, "qresizeoper": 38, "qresiz": 38, "splitoper": 39, "qsplitoper": 39, "qsplit": 39, "unari": 40, "unaryoper": 40, "unarydirect8bitoper": 40, "q_config": [41, 170, 315, 652], "mode": [41, 42, 43, 45, 110, 163, 175, 261, 304, 321, 367, 374, 387, 394, 410, 449, 535, 575, 587, 593, 625, 639, 641, 642, 652, 653, 675, 685, 703, 707, 715, 716, 732, 734, 735, 741], "quantization_param": 41, "op_types_to_quant": 41, "fallback_list": 41, "fp32": [41, 42, 44, 79, 131, 136, 143, 170, 177, 182, 236, 237, 240, 241, 283, 284, 314, 315, 325, 360, 367, 378, 396, 397, 399, 400, 405, 438, 442, 449, 473, 477, 509, 556, 561, 565, 577, 591, 599, 612, 614, 634, 637, 641, 642, 647, 652, 654, 675, 682, 683, 689, 690, 691, 700, 712, 713, 714, 715, 731, 732, 734, 735, 736, 737, 738, 739, 741, 743, 744], "add_qdq_pair_to_weight": [41, 236, 237, 732], "optypes_to_exclude_output_qu": [41, 236, 237, 732], "dedicated_qdq_pair": [41, 236, 237, 732], "smoothquant": [42, 170, 175, 176, 181, 394, 456, 593, 651, 688, 730, 735, 742], "onnxrt": [42, 43, 44, 252, 254, 261, 269, 295, 297, 304, 310, 325, 378, 426, 640, 652, 675, 691, 712, 732, 744], "get_quant_dequant_output": 42, "input_data": [42, 672], "output_data": 42, "loss": [42, 185, 194, 236, 237, 271, 316, 325, 340, 345, 353, 378, 615, 631, 670, 675, 676, 677, 678, 679, 688, 689, 690, 691, 701, 713, 715, 728, 729, 730, 732, 735, 738, 741, 743], "output": [42, 43, 44, 51, 54, 59, 74, 98, 105, 110, 148, 150, 151, 170, 176, 177, 197, 208, 209, 214, 228, 234, 236, 237, 240, 241, 274, 278, 283, 284, 314, 315, 318, 348, 371, 378, 379, 387, 400, 433, 481, 484, 489, 504, 528, 535, 570, 575, 577, 593, 597, 612, 614, 615, 631, 637, 638, 642, 648, 652, 653, 676, 677, 678, 680, 682, 684, 689, 690, 692, 701, 710, 711, 713, 718, 719, 723, 724, 725, 728, 729, 731, 732, 735, 736, 738, 739, 740, 741, 743], "numpi": [42, 43, 67, 68, 70, 105, 148, 269, 310, 321, 332, 374, 400, 497, 498, 500, 570, 681, 738, 740], "7": [42, 177, 183, 204, 236, 237, 389, 405, 410, 614, 654, 669, 681, 682, 690, 729, 732, 736, 738, 741, 744], "bit": [42, 44, 150, 155, 170, 177, 236, 237, 396, 397, 399, 400, 410, 451, 598, 599, 612, 614, 622, 654, 670, 677, 691, 730, 732, 735, 738], "execut": [42, 43, 54, 157, 163, 183, 215, 216, 217, 236, 237, 350, 354, 356, 397, 432, 433, 434, 436, 484, 587, 592, 596, 600, 631, 634, 641, 642, 675, 676, 677, 690, 691, 695, 696, 703, 704, 710, 711, 712, 713, 717, 720, 728, 729, 732, 735, 737, 741, 744], "provid": [42, 43, 44, 102, 105, 110, 150, 208, 240, 241, 269, 283, 284, 310, 316, 321, 340, 345, 353, 354, 374, 379, 393, 394, 396, 397, 399, 400, 405, 433, 535, 626, 631, 635, 637, 649, 651, 652, 653, 654, 669, 672, 675, 677, 678, 679, 685, 686, 688, 689, 690, 691, 692, 693, 697, 701, 704, 710, 711, 712, 718, 719, 729, 731, 732, 735, 738, 739, 741, 742, 743, 744], "make_sub_graph": 42, "opset": [42, 102, 104, 105, 237, 314, 315, 680], "ir_vers": 42, "thi": [42, 45, 86, 110, 132, 139, 143, 147, 150, 154, 158, 161, 163, 170, 177, 182, 185, 187, 193, 197, 200, 206, 208, 210, 212, 213, 214, 215, 219, 220, 221, 222, 224, 225, 226, 232, 236, 237, 240, 241, 251, 252, 253, 254, 255, 256, 257, 259, 269, 272, 278, 279, 283, 284, 294, 295, 296, 297, 298, 299, 300, 302, 310, 318, 321, 322, 323, 325, 334, 335, 337, 338, 339, 340, 345, 348, 350, 352, 353, 354, 357, 360, 371, 374, 375, 376, 378, 379, 389, 433, 437, 442, 451, 452, 516, 535, 557, 564, 565, 569, 572, 587, 588, 593, 597, 598, 599, 615, 631, 641, 642, 646, 647, 648, 649, 652, 653, 654, 670, 671, 672, 673, 676, 677, 678, 680, 681, 682, 685, 687, 688, 689, 690, 691, 692, 693, 695, 696, 698, 699, 701, 703, 705, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 718, 719, 723, 724, 725, 729, 732, 734, 735, 736, 737, 738, 739, 740, 741, 742], "quant_dequant_data": 42, "qtype": [42, 43, 410, 652], "3": [42, 44, 148, 150, 151, 163, 185, 204, 217, 237, 254, 269, 297, 310, 321, 374, 396, 397, 399, 400, 405, 452, 570, 587, 642, 648, 649, 651, 670, 671, 672, 673, 676, 678, 680, 682, 683, 686, 689, 690, 691, 693, 697, 701, 703, 707, 712, 717, 718, 720, 721, 723, 727, 729, 731, 732, 735, 736, 737, 738, 740, 741, 744], "scheme": [42, 43, 44, 150, 155, 166, 170, 177, 396, 397, 399, 400, 410, 593, 599, 611, 612, 614, 652, 653, 654, 672, 682, 701, 735, 741, 743], "sym": [42, 43, 44, 150, 151, 177, 410, 598, 599, 612, 614, 653, 654, 682, 732, 735, 743], "dequant": [42, 43, 44, 51, 88, 91, 92, 93, 94, 96, 150, 158, 170, 177, 400, 481, 518, 521, 522, 523, 524, 526, 577, 614, 642, 648, 653, 738, 739], "asym": [42, 43, 44, 150, 155, 166, 170, 177, 396, 397, 399, 400, 410, 599, 611, 612, 614, 654, 682, 735, 743], "ortsmoothqu": 42, "fake": [42, 44, 113, 166, 175, 177, 181, 187, 394, 451, 538, 593, 599, 611, 612, 614, 690, 732, 735, 738], "channel": [42, 43, 44, 143, 151, 175, 176, 177, 181, 182, 206, 209, 214, 236, 237, 265, 269, 307, 310, 348, 394, 397, 565, 593, 612, 614, 637, 651, 652, 654, 685, 686, 693, 695, 700, 715, 729, 735, 740, 744], "For": [42, 44, 150, 170, 177, 181, 185, 187, 191, 204, 208, 209, 212, 213, 224, 237, 254, 269, 297, 310, 322, 323, 325, 348, 351, 375, 376, 378, 379, 394, 396, 397, 399, 433, 599, 612, 614, 646, 648, 650, 652, 654, 676, 677, 678, 680, 682, 685, 693, 695, 696, 698, 701, 712, 713, 718, 729, 734, 735, 738, 739, 741, 743, 744], "more": [42, 148, 150, 175, 181, 187, 212, 213, 269, 310, 348, 394, 570, 593, 615, 649, 650, 651, 653, 670, 671, 673, 676, 678, 680, 683, 685, 686, 688, 690, 691, 693, 701, 705, 708, 713, 718, 727, 728, 729, 734, 735, 738, 741, 742, 744], "detail": [42, 154, 175, 181, 184, 208, 269, 310, 394, 593, 642, 643, 646, 651, 653, 654, 670, 671, 676, 682, 683, 684, 688, 689, 690, 691, 693, 701, 710, 718, 719, 729, 735, 736, 737, 738, 739, 741, 742], "pleas": [42, 150, 157, 158, 175, 181, 203, 212, 213, 214, 222, 223, 224, 236, 237, 252, 253, 254, 257, 295, 296, 297, 300, 348, 350, 351, 378, 394, 433, 452, 593, 600, 648, 649, 650, 651, 652, 669, 670, 673, 677, 678, 680, 686, 688, 689, 691, 693, 694, 698, 701, 717, 718, 719, 729, 732, 734, 735, 736, 737, 738, 741, 742], "refer": [42, 150, 157, 158, 175, 181, 203, 212, 213, 214, 222, 223, 224, 228, 236, 237, 252, 295, 318, 319, 325, 348, 350, 351, 371, 372, 378, 394, 433, 452, 593, 600, 648, 652, 653, 669, 672, 673, 675, 677, 678, 680, 684, 686, 687, 689, 690, 691, 693, 698, 701, 712, 713, 715, 717, 718, 719, 727, 731, 733, 736, 740, 741], "accur": [42, 157, 175, 181, 223, 394, 593, 600, 622, 729, 735, 738], "effici": [42, 175, 181, 394, 593, 649, 651, 670, 672, 676, 693, 718, 728, 729, 730, 735, 738, 741], "post": [42, 97, 98, 157, 175, 181, 222, 237, 240, 241, 283, 284, 394, 433, 527, 528, 593, 600, 622, 646, 651, 652, 653, 675, 677, 678, 680, 685, 686, 693, 699, 710, 720, 729, 730, 733, 735, 738, 739, 741], "train": [42, 57, 80, 150, 157, 175, 177, 181, 193, 216, 217, 220, 222, 223, 236, 237, 240, 241, 252, 254, 269, 279, 283, 284, 295, 297, 310, 311, 327, 350, 370, 394, 433, 487, 510, 593, 598, 600, 622, 634, 649, 651, 652, 653, 659, 673, 675, 676, 677, 680, 685, 691, 693, 699, 710, 715, 723, 728, 730, 733, 735, 737, 738, 741, 743], "larg": [42, 43, 175, 181, 223, 394, 593, 651, 672, 676, 688, 690, 730, 733, 735, 738, 744], "languag": [42, 175, 181, 223, 318, 371, 394, 593, 646, 651, 680, 688, 714, 730, 733, 735, 738], "2": [42, 43, 44, 54, 74, 105, 109, 150, 151, 163, 175, 177, 179, 181, 183, 185, 204, 210, 216, 217, 230, 236, 237, 253, 270, 296, 321, 323, 325, 350, 357, 374, 376, 378, 389, 394, 396, 397, 399, 400, 410, 437, 452, 484, 504, 534, 587, 593, 599, 612, 614, 642, 648, 651, 652, 670, 672, 673, 675, 676, 682, 685, 686, 687, 688, 689, 691, 714, 720, 721, 723, 724, 725, 727, 729, 730, 732, 733, 735, 736, 737, 738, 740, 741, 742], "spiq": [42, 175, 181, 394, 593, 738], "free": [42, 175, 181, 222, 240, 241, 283, 284, 394, 433, 593, 646, 699, 704, 712, 720, 727, 737, 738], "per": [42, 43, 44, 175, 177, 181, 183, 236, 237, 270, 394, 397, 400, 593, 614, 615, 636, 652, 654, 672, 718, 729, 734, 735, 744], "we": [42, 43, 67, 68, 70, 74, 86, 143, 151, 163, 175, 181, 182, 183, 185, 208, 212, 219, 236, 237, 251, 270, 272, 294, 318, 321, 371, 374, 394, 404, 410, 440, 497, 498, 500, 504, 516, 565, 587, 593, 646, 648, 652, 653, 654, 671, 672, 675, 678, 680, 682, 688, 689, 690, 697, 698, 701, 705, 708, 710, 711, 713, 716, 723, 724, 725, 727, 728, 729, 731, 732, 733, 735, 736, 737, 738, 739, 741, 742], "onli": [42, 44, 54, 63, 70, 86, 109, 115, 143, 163, 169, 175, 177, 181, 182, 183, 196, 201, 205, 211, 218, 236, 237, 252, 270, 272, 276, 295, 315, 327, 348, 350, 361, 394, 400, 403, 405, 433, 443, 451, 452, 484, 493, 500, 516, 534, 540, 565, 587, 593, 598, 600, 613, 615, 622, 642, 652, 653, 654, 669, 670, 672, 675, 676, 678, 681, 682, 688, 690, 691, 698, 711, 729, 730, 731, 732, 733, 738, 739, 741, 742, 743], "inplac": [42, 175, 394, 592, 593, 596, 612, 625], "mean": [42, 44, 150, 175, 177, 210, 219, 236, 237, 265, 269, 307, 310, 323, 325, 348, 360, 376, 378, 394, 442, 593, 598, 612, 648, 653, 654, 672, 675, 678, 682, 689, 690, 696, 715, 729, 732, 733, 735, 738, 740, 741, 743, 744], "weight": [42, 43, 44, 60, 61, 122, 140, 141, 143, 148, 150, 151, 154, 155, 158, 169, 170, 175, 176, 177, 182, 185, 203, 205, 209, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 225, 227, 236, 237, 315, 348, 350, 367, 378, 394, 396, 397, 399, 400, 405, 410, 433, 440, 449, 451, 455, 458, 490, 491, 547, 565, 570, 577, 593, 598, 599, 600, 613, 614, 615, 622, 642, 643, 652, 653, 654, 670, 675, 677, 682, 684, 688, 690, 712, 723, 727, 729, 730, 731, 732, 733, 738, 739, 741, 742, 743], "chang": [42, 96, 143, 150, 151, 175, 182, 216, 217, 219, 220, 222, 223, 226, 236, 237, 350, 352, 394, 440, 526, 565, 593, 642, 647, 653, 672, 678, 681, 687, 690, 693, 703, 704, 707, 710, 716, 729, 739, 740, 741], "you": [42, 163, 175, 236, 237, 250, 252, 293, 295, 350, 378, 394, 433, 587, 593, 615, 647, 648, 653, 671, 672, 673, 675, 678, 686, 687, 689, 691, 693, 695, 696, 698, 703, 707, 710, 711, 712, 713, 714, 715, 716, 718, 729, 732, 735, 736, 737, 738, 739, 742], "can": [42, 43, 44, 143, 154, 158, 163, 175, 182, 200, 208, 209, 210, 215, 223, 224, 226, 236, 237, 240, 241, 251, 254, 269, 270, 272, 283, 284, 294, 297, 310, 321, 323, 325, 348, 350, 352, 374, 376, 378, 379, 389, 394, 400, 410, 433, 565, 587, 593, 615, 631, 642, 648, 649, 651, 652, 653, 654, 669, 671, 672, 673, 675, 676, 677, 678, 680, 682, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 701, 703, 704, 705, 707, 708, 710, 711, 713, 715, 716, 717, 718, 720, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 743, 744], "recov": [42, 175, 394, 591, 593, 641, 642, 652, 677], "helper": [43, 45, 110, 116, 148, 170, 252, 253, 254, 268, 295, 296, 297, 309, 313, 314, 315, 387, 410, 535, 541, 570, 575, 593, 626, 640], "get_node_original_nam": 43, "origin": [43, 44, 140, 148, 150, 164, 170, 176, 204, 208, 220, 228, 230, 237, 252, 269, 270, 295, 310, 334, 335, 337, 338, 339, 349, 350, 369, 400, 410, 438, 451, 455, 570, 589, 593, 614, 637, 642, 647, 673, 698, 729, 732, 740, 741, 743], "simple_progress_bar": [43, 410], "total": [43, 215, 269, 310, 325, 350, 378, 410, 673, 675, 729, 735, 740, 744], "progress": [43, 202, 205, 218, 254, 297, 410, 704, 710, 712, 729, 732], "bar": [43, 254, 297, 410, 710, 730], "case": [43, 70, 74, 154, 163, 177, 183, 237, 251, 268, 269, 270, 294, 309, 310, 316, 340, 345, 353, 389, 410, 500, 504, 587, 599, 654, 671, 672, 676, 677, 678, 682, 684, 689, 694, 698, 710, 711, 712, 715, 721, 724, 725, 727, 729, 730, 732, 735, 736, 738, 740, 742, 743, 744], "where": [43, 154, 163, 236, 237, 321, 325, 374, 378, 410, 451, 587, 642, 654, 670, 675, 676, 703, 707, 711, 738, 739], "tqdm": [43, 410, 690], "t": [43, 67, 68, 70, 143, 154, 163, 182, 210, 236, 237, 269, 272, 310, 323, 376, 410, 497, 498, 500, 565, 587, 648, 652, 671, 675, 676, 678, 690, 691, 711, 716, 729, 732, 735, 741, 743], "dtype_to_nam": 43, "dtype_map": 43, "dtype": [43, 44, 102, 105, 151, 236, 237, 255, 256, 265, 269, 298, 299, 307, 310, 400, 572, 612, 614, 615, 622, 637, 653, 654, 673, 675, 680, 682, 693, 715, 731, 732, 735, 738, 739, 740, 743], "its": [43, 60, 96, 148, 158, 208, 217, 220, 222, 228, 237, 248, 254, 269, 291, 297, 310, 313, 319, 320, 350, 357, 372, 373, 437, 490, 526, 570, 646, 673, 676, 687, 689, 691, 701, 703, 707, 710, 711, 729, 735, 737, 740, 741], "string": [43, 45, 116, 148, 150, 157, 161, 163, 183, 192, 194, 196, 200, 201, 208, 210, 215, 224, 225, 226, 228, 233, 236, 237, 254, 271, 276, 297, 311, 316, 318, 321, 327, 328, 329, 331, 332, 340, 345, 348, 349, 350, 351, 352, 353, 371, 374, 383, 387, 410, 541, 570, 575, 577, 587, 588, 600, 609, 634, 639, 642, 689, 740], "represent": [43, 161, 588, 646, 648, 670, 677, 729, 732], "quanttyp": [43, 451], "repres": [43, 210, 214, 215, 224, 225, 228, 254, 259, 297, 302, 321, 323, 325, 374, 376, 378, 396, 397, 399, 400, 646, 654, 670, 673, 680, 718, 729, 732, 733, 741], "make_quant_nod": 43, "axi": [43, 237], "make": [43, 105, 143, 182, 200, 210, 215, 224, 226, 250, 293, 348, 350, 352, 565, 642, 646, 652, 653, 669, 671, 672, 682, 689, 690, 698, 703, 707, 710, 712, 729, 732, 733, 734, 735, 737, 738, 741], "quantizelinear": 43, "make_dquant_nod": 43, "dequantizelinear": 43, "is_b_transpos": [43, 410], "inuput": [43, 410], "b": [43, 74, 150, 154, 177, 252, 295, 410, 504, 598, 642, 647, 670, 673, 689, 729, 735, 738, 741], "transpos": [43, 73, 151, 214, 265, 269, 310, 314, 348, 410, 503, 735, 740], "split_shared_bia": 43, "share": [43, 44, 82, 98, 109, 141, 150, 177, 400, 458, 512, 528, 534, 599, 612, 614, 681, 682, 735, 738, 741], "float_to_float16": 43, "float_to_bfloat16": 43, "bfloat16": [43, 615, 691, 693, 701, 734], "cast_tensor": 43, "is_large_model": 43, "tensorproto": [43, 105], "raw": [43, 183, 253, 257, 260, 296, 300, 303, 360, 442, 689, 714, 741], "remove_init_from_model_input": 43, "collate_pr": 43, "result": [43, 148, 158, 170, 265, 269, 307, 310, 318, 321, 322, 323, 325, 371, 374, 375, 376, 378, 413, 433, 440, 570, 597, 631, 641, 642, 646, 649, 651, 672, 675, 676, 678, 685, 687, 689, 690, 698, 699, 710, 711, 714, 718, 719, 720, 721, 727, 729, 730, 732, 735, 737, 738, 739, 740, 741, 742, 744], "quantize_data_with_scale_zero": 43, "zero_point": [43, 44, 400], "point": [43, 44, 150, 177, 265, 307, 322, 323, 332, 357, 375, 376, 397, 400, 410, 437, 598, 614, 642, 689, 710, 715, 716, 732, 735, 738, 740, 741], "To": [43, 321, 374, 389, 410, 647, 653, 654, 671, 673, 675, 678, 691, 694, 697, 703, 705, 707, 708, 712, 716, 729, 731, 734, 735, 736, 738, 741, 743], "pack": [43, 61, 410, 491], "comput": [43, 44, 105, 150, 154, 158, 170, 318, 319, 322, 323, 325, 371, 372, 375, 376, 378, 396, 397, 399, 400, 410, 593, 615, 631, 642, 670, 672, 677, 680, 689, 690, 691, 693, 704, 713, 729, 730, 732, 735, 738, 741], "linear": [43, 150, 151, 157, 166, 169, 170, 177, 181, 206, 208, 209, 214, 219, 228, 231, 236, 237, 348, 410, 600, 611, 613, 614, 648, 676, 680, 690, 729, 735, 738, 741], "transform": [43, 50, 143, 145, 146, 147, 150, 157, 167, 169, 222, 252, 253, 254, 255, 256, 257, 259, 261, 263, 295, 296, 297, 298, 299, 300, 302, 304, 306, 317, 370, 410, 480, 565, 567, 568, 569, 572, 592, 596, 597, 600, 613, 622, 648, 649, 651, 670, 673, 676, 677, 678, 679, 683, 688, 690, 693, 698, 699, 700, 701, 713, 721, 724, 725, 729, 730, 734, 735, 738, 739, 741, 743, 744], "when": [43, 54, 64, 70, 148, 161, 163, 185, 209, 215, 220, 228, 236, 237, 252, 253, 261, 269, 295, 296, 304, 310, 319, 349, 350, 372, 410, 433, 484, 494, 500, 570, 587, 588, 615, 631, 646, 649, 653, 671, 672, 673, 690, 701, 703, 704, 707, 711, 712, 715, 716, 717, 719, 723, 729, 732, 735, 738, 740, 741], "uint8": [43, 177, 265, 307, 321, 369, 374, 410, 451, 614, 652, 673, 682, 731, 732, 740, 743], "rmin": [43, 410, 732], "rmax": [43, 410, 732], "m": [43, 158, 177, 212, 213, 236, 237, 348, 410, 614, 647, 676, 686, 693, 695, 698, 701, 705, 708, 718, 729, 744], "max": [43, 104, 143, 150, 177, 182, 201, 204, 236, 237, 269, 310, 322, 323, 357, 375, 376, 410, 437, 565, 577, 598, 614, 642, 651, 675, 686, 690, 713, 715, 729, 732, 735, 738, 740, 741], "ab": [43, 157, 177, 203, 222, 223, 350, 410, 600, 614, 622, 729, 732, 738], "np": [43, 269, 310, 357, 400, 437, 678, 720, 738, 740, 741], "calculate_scale_zp": 43, "quantize_rang": [43, 410], "calcul": [43, 60, 170, 185, 203, 212, 228, 237, 255, 256, 298, 299, 322, 323, 348, 350, 360, 375, 376, 442, 490, 572, 632, 642, 670, 673, 689, 690, 701, 713, 727, 729, 732, 735, 737, 738, 741, 743], "quantize_data": [43, 410], "add": [43, 53, 64, 109, 119, 148, 196, 228, 236, 237, 252, 254, 276, 295, 297, 349, 367, 410, 449, 483, 494, 534, 544, 570, 642, 647, 648, 654, 672, 673, 678, 680, 682, 689, 690, 705, 708, 712, 713, 720, 723, 724, 737, 738, 739, 741, 742], "necessari": [43, 224, 410, 646, 649, 653, 692, 711, 729, 737, 741], "intermedi": [43, 158, 194, 236, 237, 271, 410, 648, 685, 732], "full": [43, 150, 151, 177, 252, 253, 254, 295, 296, 297, 410, 598, 637, 642, 651, 670, 673, 675, 681, 687, 711, 716, 729, 735, 736], "equat": [43, 323, 325, 376, 378, 410, 732, 738], "r": [43, 143, 182, 410, 565, 675, 686, 711, 712, 714, 715, 717, 718, 732, 744], "": [43, 44, 105, 143, 148, 163, 182, 208, 209, 210, 214, 215, 216, 217, 220, 222, 223, 228, 231, 233, 234, 236, 237, 251, 254, 268, 269, 270, 272, 274, 294, 297, 309, 310, 323, 348, 350, 376, 378, 379, 383, 397, 410, 433, 565, 570, 577, 587, 602, 614, 615, 639, 642, 646, 647, 649, 653, 654, 671, 675, 676, 678, 680, 682, 685, 690, 691, 698, 701, 703, 707, 710, 713, 715, 718, 728, 729, 730, 731, 732, 735, 736, 737, 738, 741, 742, 743, 744], "q": [43, 44, 107, 109, 131, 410, 532, 534, 556, 735, 738], "z": [43, 410, 670, 671, 676, 738], "real": [43, 255, 272, 298, 410, 572, 653, 670, 678, 712, 719, 730, 732], "quantize_data_per_channel": 43, "dequantize_data_with_scale_zero": 43, "tensor_valu": 43, "scale_valu": 43, "zo_valu": 43, "dequantize_data": 43, "valueinfo": 43, "tensor_nam": [43, 148, 163, 164, 570, 587, 589], "new_dtyp": 43, "cast": [43, 51, 481, 734, 740], "info": [43, 170, 177, 212, 213, 228, 267, 272, 277, 348, 383, 577, 593, 597, 599, 637, 638, 642, 648, 671, 675, 692, 720, 725], "quantizedvalu": 43, "new_quantized_nam": 43, "scale_nam": 43, "zero_point_nam": 43, "quantized_value_typ": 43, "quint8": 43, "linearli": 43, "quantizediniti": 43, "quantized_data": 43, "quantizationmod": 43, "quantizedvaluetyp": 43, "quantformat": 43, "quantize_nparrai": 43, "arr": [43, 577, 642], "low": [43, 150, 151, 177, 240, 241, 255, 256, 283, 284, 298, 299, 316, 326, 353, 379, 572, 598, 652, 653, 669, 670, 673, 678, 690, 691, 715, 730, 732, 735, 738, 741], "high": [43, 255, 256, 298, 299, 572, 673, 675, 686, 715, 730, 741], "attribute_to_kwarg": 43, "attribut": [43, 83, 104, 105, 148, 170, 208, 219, 233, 234, 237, 513, 570, 615, 642, 652, 672, 682, 684, 690, 731, 743], "make_nod": 43, "find_by_nam": [43, 410], "item_list": [43, 410], "find": [43, 67, 68, 70, 105, 148, 231, 325, 332, 357, 378, 410, 437, 497, 498, 500, 570, 642, 652, 675, 688, 696, 703, 707, 710, 711, 713, 715, 729, 735, 737, 738, 739, 741], "item": [43, 228, 234, 236, 237, 268, 309, 349, 367, 410, 449, 577, 602, 670, 678, 729, 738, 741], "trt_env_setup": 43, "environ": [43, 183, 270, 646, 651, 669, 703, 707, 710, 718, 721, 723, 724, 725, 741], "variabl": [43, 161, 183, 225, 236, 237, 254, 270, 297, 357, 437, 451, 588, 686, 729, 741], "tensorrt": [43, 670, 691, 732], "to_numpi": 43, "infer_shap": 43, "in_mp": 43, "int_max": 43, "31": [43, 744], "auto_merg": 43, "guess_output_rank": 43, "verbos": [43, 315, 357, 437], "base_dir": 43, "shape": [43, 44, 105, 148, 150, 210, 255, 256, 265, 269, 298, 299, 307, 310, 321, 374, 400, 410, 570, 572, 651, 673, 682, 683, 690, 712, 713, 735, 738, 740], "weightonli": 44, "get_blob_s": 44, "group_siz": [44, 150, 155, 166, 170, 177, 396, 397, 399, 400, 451, 598, 599, 611, 612, 614, 622, 735], "has_zp": 44, "blob_siz": 44, "how": [44, 150, 163, 177, 193, 203, 210, 216, 217, 222, 223, 236, 237, 269, 310, 311, 348, 400, 587, 612, 614, 647, 648, 650, 652, 672, 673, 676, 677, 678, 684, 689, 690, 704, 705, 708, 709, 710, 712, 723, 724, 725, 729, 730, 732, 738, 740, 741, 742, 743], "mani": [44, 150, 177, 378, 400, 433, 612, 614, 671, 672, 686, 735, 741, 743], "element": [44, 150, 177, 185, 212, 213, 228, 250, 293, 321, 348, 374, 400, 612, 614, 642, 673, 685, 689, 729, 735, 738], "one": [44, 109, 110, 115, 150, 151, 163, 170, 177, 183, 210, 214, 219, 222, 223, 224, 226, 269, 279, 310, 318, 321, 325, 327, 348, 351, 352, 371, 374, 378, 400, 534, 535, 540, 587, 597, 612, 614, 615, 649, 652, 670, 676, 677, 678, 682, 685, 686, 689, 690, 691, 693, 694, 698, 699, 701, 703, 704, 707, 710, 711, 712, 715, 716, 717, 718, 720, 727, 728, 729, 731, 732, 733, 735, 736, 738, 740, 741], "zp": [44, 150, 177, 400, 612, 614, 738], "make_matmul_weight_only_nod": [44, 400], "weight_shap": [44, 400], "num_bit": [44, 113, 150, 166, 170, 177, 396, 397, 399, 400, 538, 611, 738], "k_block": [44, 400], "q_weight": [44, 400], "accuracy_level": [44, 396, 397, 399, 400, 405], "matmulfpq4": [44, 400], "accuraci": [44, 183, 185, 228, 236, 237, 240, 241, 283, 284, 311, 316, 325, 340, 345, 353, 378, 379, 389, 396, 397, 399, 400, 433, 438, 452, 615, 631, 639, 648, 651, 653, 654, 670, 672, 673, 675, 677, 678, 679, 680, 688, 689, 690, 701, 710, 712, 719, 720, 723, 724, 727, 728, 729, 730, 731, 735, 736, 737, 738, 739, 742, 743, 744], "level": [44, 187, 208, 396, 397, 399, 400, 438, 452, 638, 646, 720, 738, 741], "unset": [44, 396, 397, 399, 400], "jbla": [44, 396, 397, 399, 400], "kernel": [44, 181, 236, 237, 396, 397, 399, 400, 598, 652, 653, 741], "fp16": [44, 177, 237, 367, 396, 397, 399, 400, 449, 598, 732], "4": [44, 54, 150, 151, 155, 166, 170, 177, 183, 204, 210, 219, 236, 237, 261, 264, 265, 269, 304, 307, 310, 318, 319, 321, 371, 372, 374, 396, 397, 399, 400, 403, 405, 451, 452, 484, 598, 599, 611, 612, 614, 622, 646, 651, 652, 654, 669, 678, 679, 682, 685, 686, 689, 690, 698, 718, 720, 724, 729, 732, 735, 738, 740, 741, 744], "matmulnbit": [44, 400], "new_init": [44, 400], "matmul_weight_only_nod": [44, 400], "quant_tensor": [44, 400, 614], "32": [44, 150, 155, 177, 206, 396, 397, 399, 400, 405, 451, 598, 599, 612, 614, 622, 678, 684, 735, 744], "ratio": [44, 143, 182, 210, 215, 228, 236, 237, 265, 269, 307, 310, 350, 399, 400, 565, 673, 690, 713, 729, 740, 744], "group": [44, 150, 151, 154, 177, 225, 335, 396, 397, 399, 400, 598, 614, 651, 685, 729, 735, 739, 740, 741, 744], "clip": [44, 177, 396, 399, 400, 599, 612, 614, 735, 738], "qdq_tensor": [44, 400], "quant": [44, 148, 150, 170, 177, 236, 237, 367, 393, 396, 397, 399, 400, 402, 405, 449, 460, 461, 471, 475, 570, 599, 612, 614, 648, 671, 688, 690, 732], "pad_tensor": [44, 400], "rowi": [44, 400], "so": [44, 105, 185, 269, 310, 400, 451, 648, 652, 675, 681, 685, 691, 696, 698, 714, 715, 716, 732, 734, 735, 738, 739, 740, 742], "divis": [44, 400], "pade": [44, 400], "rtn_quantiz": [44, 177, 399, 612], "weight_config": [44, 150, 151, 155, 157, 169, 177, 391, 396, 397, 399, 598, 599, 600, 612, 613], "round": [44, 143, 150, 177, 182, 399, 405, 565, 612, 622, 651, 730, 732, 735, 738], "nearst": [44, 177, 399], "method": [44, 141, 143, 150, 161, 163, 170, 177, 200, 225, 236, 237, 245, 250, 251, 252, 254, 261, 269, 272, 288, 293, 294, 295, 297, 304, 310, 331, 332, 333, 367, 396, 397, 399, 449, 451, 458, 565, 587, 588, 593, 598, 599, 612, 615, 634, 635, 637, 638, 648, 649, 651, 670, 671, 672, 673, 675, 676, 677, 689, 690, 728, 729, 732, 734, 735, 738, 740, 741], "modelproto": [44, 313, 379, 391, 394, 396, 397, 399, 400, 402, 403, 410, 692], "onnxmodel": [44, 386, 391, 393, 394, 396, 397, 399, 400, 409, 426], "fc2": [44, 170, 177, 396, 397, 399, 599, 612, 614], "rtn": [44, 170, 402, 405, 475, 620, 622, 671, 733, 735], "get_weight_scal": 44, "apply_awq_scal": 44, "absorb_pair": 44, "output_dict": 44, "appli": [44, 113, 126, 127, 128, 131, 133, 137, 148, 150, 166, 169, 193, 219, 221, 279, 319, 372, 396, 397, 399, 402, 473, 538, 551, 552, 553, 556, 558, 562, 570, 611, 613, 620, 646, 653, 654, 690, 693, 695, 701, 710, 714, 715, 720, 728, 729, 732, 734, 737, 738, 741, 742, 743], "salient": [44, 177, 599, 729, 735], "apply_awq_clip": 44, "mse": [44, 170, 177, 236, 237, 317, 325, 359, 370, 378, 397, 405, 433, 441, 599, 642, 675, 689, 715, 731, 735, 736], "prepare_input": [44, 400], "n_sampl": [44, 150, 155, 170, 177, 598, 599, 614], "sampl": [44, 77, 150, 170, 177, 185, 236, 237, 245, 250, 252, 253, 254, 265, 269, 288, 293, 295, 296, 297, 307, 310, 325, 332, 357, 378, 437, 507, 598, 599, 614, 649, 672, 673, 679, 685, 711, 732, 735, 738, 740, 741, 743, 744], "session": [44, 148, 251, 294, 387, 400, 570, 575, 690, 739], "awq_quant": [44, 177, 396, 599], "enable_auto_scal": [44, 177, 396, 405, 735], "enable_mse_search": [44, 177, 396, 405, 735], "awar": [44, 155, 158, 177, 193, 237, 279, 327, 348, 396, 440, 599, 631, 652, 653, 654, 670, 677, 678, 680, 685, 710, 720, 728, 730, 735, 741], "awq": [44, 177, 402, 405, 733, 735], "enabl": [44, 109, 150, 154, 158, 177, 215, 236, 237, 350, 534, 598, 599, 615, 653, 654, 678, 686, 691, 693, 695, 698, 699, 701, 712, 714, 715, 717, 720, 729, 730, 738, 741], "gptq": [44, 177, 402, 405, 622, 671, 733, 735], "w": [44, 157, 269, 310, 600, 729, 738, 740], "h": [44, 236, 237, 269, 310, 678, 718, 719, 723, 724, 725, 740], "blocksiz": [44, 397, 405], "percdamp": [44, 397, 405, 622, 735], "01": [44, 150, 185, 236, 237, 396, 397, 405, 622, 690, 731, 735, 741, 743, 744], "actord": [44, 397, 405, 735], "perchannel": [44, 397, 405], "hessian": [44, 158, 397, 440, 735, 741], "matrix": [44, 378, 433, 651, 701, 742], "percent": 44, "averag": [44, 322, 323, 325, 375, 376, 378, 397, 689, 690, 735, 741, 744], "diagon": [44, 397, 735], "dampen": [44, 154], "rearrang": [44, 222, 397, 729, 735], "consid": [44, 148, 154, 325, 378, 570, 646, 670, 671, 676, 711, 741], "diag": 44, "error": [44, 105, 150, 158, 163, 177, 325, 360, 378, 397, 442, 587, 598, 638, 675, 689, 694, 715, 716, 719, 735, 738, 741], "gptq_quantiz": [44, 177, 397, 600], "get_ops_recurs": 45, "prefix": [45, 148, 156, 163, 164, 168, 170, 183, 570, 587, 589, 614, 693, 698, 739], "graph_info": 45, "templateadaptor": 45, "tampl": 45, "dictionari": [45, 67, 68, 70, 148, 150, 156, 158, 163, 170, 177, 200, 231, 233, 234, 236, 237, 268, 309, 321, 328, 331, 333, 374, 410, 497, 498, 500, 570, 577, 587, 593, 597, 598, 630, 642], "yaml": [45, 228, 233, 234, 237, 240, 241, 252, 254, 270, 283, 284, 295, 297, 311, 316, 327, 328, 329, 331, 340, 345, 353, 354, 460, 641, 642, 652, 654, 684, 689, 690, 727, 731, 739, 740], "file": [45, 105, 148, 161, 163, 164, 170, 180, 191, 197, 224, 228, 233, 236, 237, 240, 241, 252, 253, 254, 257, 268, 269, 275, 278, 283, 284, 295, 296, 297, 300, 309, 310, 311, 316, 321, 327, 328, 329, 331, 340, 345, 349, 351, 353, 354, 374, 379, 389, 416, 417, 421, 433, 570, 577, 587, 588, 589, 591, 593, 641, 642, 647, 649, 652, 653, 654, 678, 681, 684, 687, 689, 690, 692, 696, 705, 708, 709, 710, 711, 713, 714, 715, 716, 718, 719, 723, 724, 725, 727, 731, 732, 735, 739, 740], "pytorchadaptor": 45, "api": [45, 70, 75, 110, 154, 157, 280, 316, 321, 353, 366, 367, 374, 378, 433, 448, 449, 452, 500, 505, 535, 577, 600, 607, 642, 648, 651, 655, 657, 661, 664, 667, 675, 680, 685, 686, 690, 695, 699, 700, 701, 717, 718, 722, 736, 737, 741, 745], "pytorch_ipexadaptor": 45, "intel": [45, 196, 212, 213, 224, 273, 276, 312, 317, 324, 325, 348, 351, 359, 365, 370, 377, 378, 411, 433, 441, 447, 577, 644, 646, 647, 649, 650, 652, 653, 654, 670, 673, 674, 676, 677, 679, 680, 682, 683, 687, 688, 691, 692, 693, 698, 700, 701, 712, 713, 714, 715, 717, 718, 727, 728, 729, 730, 732, 734, 735, 736, 738, 739, 741, 742, 743], "extens": [45, 161, 163, 577, 587, 588, 642, 649, 651, 652, 682, 685, 686, 688, 690, 691, 692, 694, 699, 700, 701, 705, 708, 709, 713, 729, 730, 732, 735, 738, 741, 742, 743], "ipex": [45, 165, 170, 236, 237, 591, 597, 641, 685, 690, 691, 695, 699, 700, 738], "pytorch_fxadaptor": 45, "fx": [45, 170, 236, 361, 443, 685, 691, 699, 700, 714, 730, 732, 734], "graph": [45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 112, 113, 114, 117, 130, 132, 136, 139, 142, 143, 145, 146, 147, 148, 208, 251, 294, 316, 380, 387, 432, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 538, 539, 542, 555, 557, 561, 564, 565, 567, 568, 569, 570, 575, 648, 652, 673, 676, 678, 684, 692, 693, 712, 715, 732, 733, 734, 739], "pytorchweightonlyadaptor": 45, "pytorchqueri": 45, "cpu": [45, 91, 92, 93, 94, 150, 151, 157, 162, 163, 165, 170, 236, 237, 521, 522, 523, 524, 577, 587, 593, 600, 615, 637, 642, 651, 653, 669, 670, 685, 690, 691, 693, 695, 701, 710, 718, 730, 731, 732, 733, 734, 735, 739], "querybackendcap": [46, 652, 653], "tensorflowadaptor": [47, 461], "stock": [47, 461, 699, 738], "spr": [47, 461], "tensorflow_itexadaptor": [47, 461], "itex": [47, 109, 236, 237, 314, 461, 534, 691, 732, 738], "tensorflowqueri": [47, 461, 652], "performance_onli": [47, 48, 49, 107, 131, 136, 147, 236, 461, 478, 479, 532, 556, 561, 569, 690], "itex_mod": [47, 48, 89, 107, 131, 136, 461, 478, 519, 532, 556, 561], "quant_mod": [47, 367, 449, 461, 653, 654], "graphconvert": [48, 478], "qt_config": [48, 478], "recip": [48, 208, 236, 237, 316, 353, 478, 651, 690, 733, 735, 738, 741], "int8_sequ": [48, 478], "fp32_op": [48, 50, 107, 478, 480, 532], "bf16_op": [48, 50, 107, 478, 480, 532, 653, 734], "data_load": [48, 49, 478, 479, 652], "calib_func": [48, 155, 170, 177, 433, 478, 599, 613, 614, 734], "fake_qu": [48, 88, 107, 131, 136, 478, 518, 532, 556, 561], "qdq_enabl": [48, 478], "new_api": [48, 49, 71, 72, 77, 79, 92, 99, 131, 136, 143, 478, 479, 501, 502, 507, 509, 522, 529, 556, 561, 565], "use_bf16": [48, 49, 236, 478, 479, 731], "without": [49, 90, 148, 204, 220, 269, 310, 350, 369, 451, 479, 520, 570, 646, 676, 678, 690, 701, 712, 715, 729, 730, 731, 741, 742], "graphconverterwithoutcalib": [49, 479], "recover_config": [49, 479], "rewrit": [50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 106, 107, 108, 109, 205, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534], "bf16convert": [50, 480, 734], "rerewrit": [51, 481], "dequantizecastoptim": [51, 481], "b16": [51, 481], "dequantize_cast_optim": [52, 87, 111, 482, 517], "biasadd": [53, 59, 64, 66, 109, 483, 489, 494, 496, 534, 682], "convertaddtobiasaddoptim": [53, 483], "conv2d": [53, 59, 60, 61, 65, 66, 71, 125, 135, 143, 157, 475, 483, 489, 490, 491, 495, 496, 501, 550, 560, 565, 600, 653, 654, 675, 680, 682, 715, 738, 739, 741], "addv2": [53, 69, 483, 499, 682], "layout": [54, 484], "convertlayoutoptim": [54, 484], "convers": [54, 55, 237, 327, 484, 485, 647, 652, 653, 690, 691, 732, 734, 738], "optim": [54, 74, 75, 79, 80, 116, 118, 148, 150, 154, 195, 198, 199, 200, 202, 205, 208, 217, 222, 233, 236, 237, 273, 279, 316, 317, 333, 353, 357, 370, 437, 484, 504, 505, 509, 510, 541, 543, 570, 631, 632, 639, 642, 649, 651, 669, 671, 675, 676, 677, 678, 682, 683, 685, 686, 688, 690, 692, 693, 695, 697, 698, 701, 704, 712, 715, 716, 717, 719, 721, 730, 731, 732, 734, 735, 737, 738, 739, 741, 743], "nchw": [54, 265, 484], "nhwc": [54, 265, 484], "It": [54, 163, 177, 190, 193, 197, 210, 240, 241, 278, 283, 284, 323, 325, 332, 348, 353, 360, 376, 378, 379, 433, 438, 442, 484, 587, 598, 614, 631, 652, 653, 654, 670, 675, 676, 690, 696, 699, 704, 710, 711, 712, 713, 715, 716, 718, 729, 732, 735, 736, 737, 741, 743], "exist": [54, 183, 234, 270, 387, 484, 575, 577, 642, 680, 689, 697, 741], "abov": [54, 484, 652, 653, 654, 676, 712, 713, 715, 718, 729, 732, 738, 741], "graph_def": [54, 140, 141, 148, 314, 379, 387, 432, 433, 455, 458, 484, 570, 575], "leakyrelu": [55, 485, 738], "convertleakyreluoptim": [55, 485], "below": [55, 66, 74, 236, 237, 354, 378, 404, 433, 485, 496, 504, 647, 648, 651, 652, 653, 654, 672, 675, 676, 678, 684, 689, 693, 695, 703, 704, 707, 710, 713, 718, 727, 728, 729, 731, 732, 735, 737, 738, 739, 741, 742], "subgraph": [55, 66, 105, 168, 485, 496, 733, 741], "mul": [55, 65, 66, 69, 177, 181, 485, 495, 496, 499, 599, 680, 735, 738], "maximum": [55, 150, 177, 185, 210, 215, 236, 237, 252, 269, 295, 310, 319, 350, 357, 372, 387, 437, 485, 575, 598, 654, 670, 673, 675, 690, 729, 732, 738, 740], "note": [55, 161, 185, 214, 321, 361, 374, 443, 485, 588, 649, 651, 653, 654, 671, 672, 675, 678, 680, 682, 686, 688, 690, 695, 698, 703, 707, 710, 712, 716, 718, 720, 729, 732, 735, 738, 739, 741, 742, 743], "coeffici": [55, 150, 225, 485, 729], "less": [55, 148, 170, 236, 237, 485, 577, 598, 614, 642, 669, 676, 690, 717, 729], "than": [55, 148, 252, 269, 295, 310, 485, 577, 598, 615, 642, 649, 651, 669, 673, 684, 715, 723, 727, 728, 729, 732, 735, 737, 740, 741], "valid": [55, 67, 68, 105, 190, 215, 218, 228, 236, 237, 254, 297, 321, 349, 350, 374, 387, 485, 497, 498, 575, 649, 651, 652, 673, 675, 676, 679, 682, 685, 687, 690, 701, 715, 729, 732, 735, 736], "nan": [56, 486], "random": [56, 148, 150, 177, 192, 200, 236, 237, 265, 269, 307, 310, 317, 333, 357, 359, 370, 437, 441, 486, 570, 577, 598, 642, 649, 690, 729, 731, 740, 743], "convertnantorandom": [56, 486], "const": [56, 57, 63, 64, 67, 68, 70, 82, 98, 486, 487, 493, 494, 497, 498, 500, 512, 528], "consist": [56, 63, 486, 493, 647, 648, 671, 718, 738, 741], "placehold": [57, 250, 293, 487, 671], "convertplaceholdertoconst": [57, 487], "dilat": [58, 488], "contract": [58, 488], "dilatedcontract": [58, 488], "spacetobatchnd": [58, 488], "batchtospacend": [58, 488], "pattern": [58, 59, 61, 78, 96, 107, 108, 109, 131, 136, 170, 200, 201, 202, 203, 205, 208, 209, 215, 216, 217, 218, 220, 222, 223, 225, 233, 236, 237, 254, 297, 317, 338, 339, 341, 346, 350, 367, 370, 449, 488, 489, 491, 508, 526, 532, 533, 534, 556, 561, 652, 671, 673, 682, 685, 690, 711, 728, 731, 738, 741, 744], "inject": [59, 489, 690], "dummi": [59, 208, 255, 256, 298, 299, 325, 378, 489, 572, 651, 673, 683, 689, 690, 712], "injectdummybiasaddoptim": [59, 489], "fusion": [59, 61, 70, 78, 109, 126, 127, 128, 131, 132, 133, 137, 489, 491, 500, 508, 534, 551, 552, 553, 556, 557, 558, 562, 648, 652, 682], "expanddim": [60, 490], "expanddimsoptim": [60, 490], "next": [60, 245, 288, 452, 490, 649, 653, 654, 672, 731, 735, 741], "fetch": [61, 170, 180, 245, 288, 491, 653, 673, 723, 724, 725], "reshap": [61, 67, 68, 73, 176, 491, 497, 498, 503, 593, 738], "fetchweightfromreshapeoptim": [61, 491], "handl": [61, 148, 175, 181, 190, 491, 570, 593, 638, 648, 650, 671, 672, 718, 738], "fold": [62, 63, 170, 177, 315, 405, 475, 492, 493, 599, 613, 614, 682, 735, 738], "foldbatchnormnodesoptim": [62, 492], "graphfoldconstantoptim": [63, 493], "sequenc": [63, 105, 150, 177, 209, 212, 213, 236, 237, 252, 268, 269, 295, 309, 310, 319, 323, 348, 372, 376, 493, 598, 602, 652, 673, 682, 729, 735, 740], "self": [63, 170, 177, 208, 236, 237, 389, 493, 599, 614, 615, 652, 653, 672, 673, 685, 689, 712, 737, 739, 741], "supported_op_typ": [63, 493], "fusebiasaddandaddoptim": [64, 494], "second": [64, 163, 209, 236, 237, 252, 295, 438, 494, 587, 642, 675, 690, 703, 707, 711, 723, 724, 735, 738, 741, 743], "columnwis": [65, 495], "fusecolumnwisemuloptim": [65, 495], "depthwiseconv2dn": [65, 71, 125, 135, 495, 501, 550, 560, 682], "math": [66, 496, 732], "fuseconvwithmathoptim": [66, 496], "elimin": [66, 496, 717], "sub": [66, 170, 183, 208, 270, 496, 597, 649, 671, 741], "realdiv": [66, 69, 496, 499], "decompos": [67, 68, 497, 498], "fusedecomposedbnoptim": [67, 497], "input_graph_def": [67, 68, 70, 497, 498, 500], "node_name_from_input": [67, 68, 70, 497, 498, 500], "node_nam": [67, 68, 70, 148, 387, 418, 497, 498, 500, 570, 575, 653], "strip": [67, 68, 70, 83, 84, 148, 497, 498, 500, 513, 514, 570, 739], "port": [67, 68, 70, 497, 498, 500, 712, 719], "other": [67, 68, 70, 150, 154, 161, 175, 181, 251, 294, 323, 376, 387, 497, 498, 500, 575, 588, 593, 646, 648, 653, 654, 671, 675, 682, 685, 687, 690, 692, 713, 727, 729, 732, 738, 740, 741, 744], "underli": [67, 68, 70, 163, 497, 498, 500, 587], "node_from_map": [67, 68, 70, 497, 498, 500], "node_map": [67, 68, 70, 497, 498, 500], "pull": [67, 68, 70, 497, 498, 500], "def": [67, 68, 70, 185, 240, 241, 283, 284, 410, 433, 452, 497, 498, 500, 577, 615, 630, 631, 648, 652, 671, 672, 673, 676, 677, 678, 689, 690, 732, 738, 739, 741], "entri": [67, 68, 70, 158, 196, 276, 316, 354, 402, 403, 473, 474, 477, 497, 498, 500, 598, 620, 621, 625, 642, 671, 687], "index": [67, 68, 70, 105, 183, 228, 237, 245, 250, 254, 288, 293, 297, 332, 497, 498, 500, 642, 673, 689, 711, 715, 735, 738], "everi": [67, 68, 70, 210, 213, 215, 236, 237, 348, 350, 497, 498, 500, 652, 672, 698, 703, 707, 733, 735, 741], "identifi": [67, 68, 70, 163, 321, 374, 387, 497, 498, 500, 575, 587, 718, 729, 735], "want": [67, 68, 70, 208, 236, 237, 250, 252, 293, 295, 350, 438, 497, 498, 500, 615, 631, 648, 652, 672, 673, 678, 690, 698, 710, 711, 718, 727, 732, 735, 737, 739, 741], "nodedef": [67, 68, 70, 497, 498, 500], "rais": [67, 68, 70, 105, 161, 163, 170, 205, 211, 218, 228, 321, 348, 349, 350, 374, 379, 452, 497, 498, 500, 587, 588, 614, 651, 671, 712, 729, 730], "valueerror": [67, 68, 70, 170, 321, 374, 452, 497, 498, 500, 614, 681], "If": [67, 68, 70, 74, 163, 177, 183, 185, 187, 236, 237, 240, 241, 254, 269, 283, 284, 297, 310, 349, 379, 433, 452, 497, 498, 500, 504, 587, 598, 602, 614, 615, 631, 647, 648, 653, 669, 671, 672, 673, 678, 686, 687, 689, 690, 696, 704, 705, 708, 710, 716, 721, 727, 729, 732, 735, 737, 738, 739, 740, 741], "isn": [67, 68, 70, 497, 498, 500], "present": [67, 68, 70, 497, 498, 500, 675, 718, 730, 738], "values_from_const": [67, 68, 70, 497, 498, 500], "node_def": [67, 68, 70, 497, 498, 500], "extract": [67, 68, 70, 148, 208, 254, 297, 369, 451, 497, 498, 500, 570, 673], "ha": [67, 68, 70, 74, 150, 157, 163, 214, 215, 270, 318, 348, 350, 371, 410, 452, 497, 498, 500, 504, 577, 587, 600, 647, 649, 652, 653, 654, 672, 680, 685, 690, 691, 696, 710, 715, 716, 718, 721, 729, 731, 732, 734, 737, 738, 741], "access": [67, 68, 70, 233, 234, 237, 497, 498, 500, 637, 642, 705, 708, 712], "valid_reshape_input": [67, 68, 497, 498], "reshape_in0_ndef": [67, 68, 497, 498], "reshape_in1_ndef": [67, 68, 497, 498], "ar": [67, 68, 105, 151, 163, 170, 210, 215, 216, 217, 222, 223, 236, 237, 252, 269, 295, 310, 321, 325, 332, 348, 349, 350, 354, 356, 357, 374, 378, 396, 397, 399, 403, 434, 436, 437, 451, 452, 497, 498, 587, 597, 598, 615, 634, 641, 642, 646, 647, 648, 649, 652, 653, 671, 672, 673, 675, 676, 677, 678, 679, 680, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 696, 698, 701, 704, 710, 712, 713, 715, 716, 717, 718, 721, 727, 728, 729, 730, 732, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743], "bypass_reshap": [67, 68, 497, 498], "input_node_map": [67, 68, 497, 498], "input_nam": [67, 68, 102, 142, 237, 314, 315, 387, 497, 498, 680], "get_const_dim_count": [67, 68, 497, 498], "dimens": [67, 68, 105, 150, 244, 269, 287, 310, 497, 498, 673, 676, 735, 740], "instancenorm": [68, 498, 738], "fusedecomposedinoptim": [68, 498], "gelu": [69, 499], "fusegeluoptim": [69, 499], "sqrt": [69, 499, 675], "erf": [69, 499], "layernorm": [70, 500, 738], "fuselayernormoptim": [70, 500], "remap": [70, 163, 500, 587], "smaller": [70, 269, 310, 500, 676, 690, 729, 740], "fusedbatcnormv3": [70, 500], "And": [70, 500, 647, 648, 669, 671, 690, 696, 738], "further": [70, 237, 500, 646, 691, 692, 693, 695, 704, 710, 732], "restrict": [70, 163, 236, 237, 500, 587, 729, 737], "2d": [70, 500, 738], "3d": [70, 500, 730, 738], "kera": [70, 116, 196, 208, 228, 237, 254, 261, 276, 297, 304, 382, 387, 474, 477, 500, 541, 575, 577, 653, 672, 678, 692, 700, 701], "fusepadwithconv2doptim": [71, 501], "excluded_op_nam": [71, 72, 233, 236, 237, 501, 502, 690, 729], "cfg": [71, 72, 170, 233, 367, 449, 501, 502, 593, 597, 634, 653, 654], "itex_qdq_mod": [71, 72, 501, 502], "conv3d": [71, 125, 501, 550], "fusepadwithfp32conv2doptim": [72, 502], "fusetransposereshapeoptim": [73, 503], "cse": [74, 98, 504, 528], "graphcseoptim": [74, 504], "introduc": [74, 504, 652, 653, 654, 682, 690, 732, 735, 736, 738, 742], "ident": [74, 80, 209, 504, 510, 646, 676], "three": [74, 228, 252, 295, 356, 434, 436, 504, 648, 652, 653, 670, 686, 691, 704, 718, 728, 732, 734, 737, 738, 739], "d": [74, 170, 504, 597, 676, 684, 711, 713, 719, 729, 744], "those": [74, 163, 360, 442, 504, 587, 642, 675, 676, 677, 684, 690, 691, 728, 729, 732, 741], "child": [74, 157, 164, 504, 589, 600, 739], "b1": [74, 504], "c1c2": [74, 504], "d1": [74, 504, 642], "c1": [74, 504], "c2": [74, 504], "memori": [74, 150, 151, 170, 177, 316, 340, 345, 353, 389, 391, 504, 598, 614, 642, 670, 672, 677, 690, 691, 693, 727, 729, 732, 733, 735, 738, 741, 744], "bound": [74, 183, 201, 269, 310, 321, 357, 374, 437, 504, 689, 740], "like": [74, 96, 98, 148, 150, 163, 187, 208, 228, 237, 240, 241, 242, 254, 283, 284, 285, 297, 316, 325, 350, 353, 354, 378, 387, 403, 433, 504, 526, 528, 570, 572, 575, 587, 631, 647, 648, 649, 652, 653, 675, 676, 677, 685, 698, 713, 715, 728, 729, 732, 735, 736, 738, 741], "relu": [74, 78, 109, 504, 508, 534, 648, 682, 738, 739], "relu6": [74, 504, 682], "updat": [74, 154, 164, 170, 203, 204, 210, 228, 350, 378, 433, 504, 589, 593, 639, 681, 688, 689, 690, 696, 701, 704, 720, 729, 735, 738, 741, 742], "graphdef": [74, 148, 387, 432, 504, 570, 575, 692], "grappler": [75, 505, 682], "grappleroptim": [75, 505], "input_output_nam": [75, 505], "opt_cfg": [75, 505], "wrapper": [75, 102, 103, 104, 105, 122, 140, 150, 156, 166, 169, 194, 205, 251, 269, 271, 272, 274, 275, 294, 310, 321, 325, 374, 378, 383, 387, 455, 505, 547, 574, 575, 611, 613, 734], "leverag": [75, 151, 505, 637, 649, 651, 676, 680, 693, 710, 728, 732, 735, 741], "built": [75, 196, 219, 238, 239, 243, 248, 252, 253, 258, 260, 262, 263, 265, 266, 269, 274, 276, 281, 282, 286, 289, 291, 295, 296, 301, 303, 305, 306, 307, 308, 310, 354, 378, 381, 389, 433, 505, 602, 631, 649, 652, 673, 678, 690, 703, 707, 727, 732, 737, 740, 741, 743], "convert_add_to_biasadd": [76, 87, 111, 506, 517], "convert_layout": [76, 87, 111, 506, 517], "convert_leakyrelu": [76, 87, 111, 506, 517], "convert_nan_to_random": [76, 87, 111, 506, 517], "convert_placeholder_to_const": [76, 87, 111, 506, 517], "dilated_contract": [76, 87, 111, 506, 517], "dummy_biasadd": [76, 87, 111, 506, 517], "expanddims_optim": [76, 87, 111, 506, 517], "fetch_weight_from_reshap": [76, 87, 111, 506, 517], "fold_batch_norm": [76, 87, 111, 506, 517], "fold_const": [76, 87, 111, 506, 517], "fuse_biasadd_add": [76, 87, 111, 506, 517], "fuse_column_wise_mul": [76, 87, 111, 506, 517], "fuse_conv_with_math": [76, 87, 111, 506, 517], "fuse_decomposed_bn": [76, 87, 111, 506, 517], "fuse_decomposed_in": [76, 87, 111, 506, 517], "fuse_gelu": [76, 87, 111, 506, 517], "fuse_layer_norm": [76, 87, 111, 506, 517], "fuse_pad_with_conv": [76, 87, 111, 506, 517], "fuse_pad_with_fp32_conv": [76, 87, 111, 506, 517], "fuse_reshape_transpos": [76, 87, 111, 506, 517], "graph_cse_optim": [76, 87, 111, 506, 517], "grappler_pass": [76, 87, 111, 506, 517], "insert_print_nod": [76, 87, 111, 506, 517], "move_squeeze_after_relu": [76, 87, 111, 506, 517], "pre_optim": [76, 87, 111, 506, 517], "remove_training_nod": [76, 87, 111, 506, 517], "rename_batch_norm": [76, 87, 111, 506, 517], "split_shared_input": [76, 87, 111, 506, 517], "strip_equivalent_nod": [76, 87, 111, 148, 506, 517, 570], "strip_unused_nod": [76, 87, 111, 148, 506, 517, 570], "switch_optim": [76, 87, 111, 506, 517], "insert": [77, 105, 107, 109, 113, 146, 150, 176, 181, 507, 532, 534, 538, 568, 593, 614, 648, 653, 672, 685, 690, 693, 729, 732, 734, 735, 738, 739], "print": [77, 157, 158, 208, 325, 378, 452, 507, 600, 642, 678, 689, 690, 712, 713, 729, 738, 741], "insertprintminmaxnod": [77, 507], "pre_node_nam": [77, 507], "post_node_nam": [77, 507], "pass": [77, 148, 150, 161, 163, 183, 192, 378, 403, 433, 507, 570, 577, 587, 588, 591, 609, 615, 641, 642, 647, 648, 652, 669, 673, 676, 677, 678, 684, 689, 690, 711, 718, 729, 731, 732, 734, 738, 743], "move": [78, 150, 163, 176, 508, 587, 593, 648, 716, 731, 735, 736], "squeez": [78, 508, 648], "movesqueezeafterreluoptim": [78, 508], "match": [78, 102, 163, 208, 321, 322, 374, 375, 508, 587, 676, 711, 735], "pre": [79, 116, 164, 208, 240, 241, 252, 283, 284, 295, 379, 433, 509, 541, 589, 622, 631, 671, 673, 676, 677, 690, 698, 715, 729, 730, 732, 735, 739, 741], "entranc": [79, 201, 243, 509], "preoptim": [79, 509], "removetrainingnodesoptim": [80, 510], "protected_nod": [80, 510], "types_to_splic": [80, 510], "checknumer": [80, 510], "stopgradi": [80, 510], "renam": [81, 511, 736], "fusedbatchnorm": [81, 511], "fusedbatchnormv2": [81, 511], "renamebatchnormoptim": [81, 511], "splitsharedinputoptim": [82, 512], "equival": [83, 169, 513, 613, 651, 730, 735, 738], "stripequivalentnodesoptim": [83, 513], "output_node_nam": [83, 84, 131, 132, 136, 148, 513, 514, 556, 557, 561, 570], "same": [83, 141, 148, 151, 177, 185, 204, 222, 237, 252, 269, 295, 310, 321, 374, 458, 513, 570, 599, 602, 615, 642, 652, 654, 669, 672, 673, 676, 678, 682, 690, 694, 698, 703, 707, 729, 731, 732, 735, 738, 739, 740, 741], "unus": [84, 148, 514, 570], "stripunusednodesoptim": [84, 514], "input_node_nam": [84, 131, 136, 148, 514, 556, 561, 570], "switch": [85, 515, 693, 739], "switchoptim": [85, 515], "condit": [85, 185, 252, 253, 254, 269, 295, 296, 297, 310, 356, 434, 436, 515, 673, 687, 740, 741], "graphrewriterbas": [86, 516], "abstract": [86, 193, 201, 269, 310, 311, 316, 353, 516, 652, 654, 684], "freeze_fake_qu": [87, 95, 111, 517, 525], "freeze_valu": [87, 95, 111, 517, 525], "freeze_value_without_calib": [87, 95, 111, 517, 525], "fuse_conv_redundant_dequant": [87, 95, 111, 517, 525], "fuse_conv_requant": [87, 95, 111, 517, 525], "fuse_matmul_redundant_dequant": [87, 95, 111, 517, 525], "fuse_matmul_requant": [87, 95, 111, 517, 525], "meta_op_optim": [87, 95, 111, 517, 525], "post_hostconst_convert": [87, 95, 111, 517, 525], "post_quantized_op_cs": [87, 95, 111, 517, 525], "rnn_convert": [87, 95, 111, 517, 525], "scale_propag": [87, 95, 111, 517, 525], "onnx_graph": [87, 101, 111], "onnx_schema": [87, 101, 111], "tf2onnx_util": [87, 101, 111], "insert_qdq_pattern": [87, 106, 111, 517, 531], "merge_duplicated_qdq": [87, 106, 111, 517, 531], "share_qdq_y_pattern": [87, 106, 111, 517, 531], "freez": [88, 89, 90, 148, 518, 519, 520, 570, 693, 729], "fakequ": [88, 518], "freezefakequantopoptim": [88, 518], "follow": [88, 110, 185, 209, 254, 297, 318, 321, 371, 374, 518, 535, 646, 647, 648, 649, 652, 653, 654, 671, 672, 673, 676, 677, 678, 682, 686, 687, 689, 690, 691, 692, 693, 694, 695, 703, 707, 712, 714, 715, 718, 723, 728, 729, 731, 732, 735, 738, 739, 741], "freezevaluetransform": [89, 519], "max_min_data": [89, 90, 519, 520], "postfix": [89, 90, 519, 520], "tensor_data": [89, 519, 577, 642, 643], "th": [89, 90, 519, 520], "gpu": [89, 90, 97, 150, 163, 177, 236, 237, 519, 520, 527, 587, 598, 615, 651, 669, 685, 690, 691, 695, 701, 710, 731, 732, 733], "freezevaluewithoutcalibtransform": [90, 520], "95": [90, 325, 378, 520, 689, 744], "quantizedconv": [91, 92, 521, 522], "quantizeddeconv": [91, 521], "redund": [91, 93, 521, 523], "fuseconvredundantdequantizetransform": [91, 521], "_quantizedconv": [91, 521], "_quantizeddeconv": [91, 521], "successor": [91, 92, 93, 94, 521, 522, 523, 524], "requant": [92, 94, 522, 524, 739], "fuseconvrequantizetransform": [92, 522], "quantizedmatmul": [93, 94, 523, 524], "fusematmulredundantdequantizetransform": [93, 523], "_quantizedmatmul": [93, 94, 523, 524], "fusematmulrequantizedequantizetransform": [94, 524], "quantizedmatmulwithbiasanddequant": [94, 524], "fusematmulrequantizetransform": [94, 524], "fusematmulrequantizedequantizenewapitransform": [94, 524], "fusematmulrequantizenewapitransform": [94, 524], "newapi": [94, 524], "meta": [96, 526, 688, 730, 744], "metainfochangingmemopoptim": [96, 526], "metaop": [96, 526], "With": [96, 389, 526, 648, 652, 654, 672, 690, 698, 703, 707, 711, 717, 727, 729, 730, 737, 738, 741, 744], "better": [96, 236, 237, 240, 241, 283, 284, 332, 379, 433, 526, 631, 671, 677, 689, 691, 729, 730, 732, 735, 737, 738, 741], "perform": [96, 140, 150, 154, 183, 225, 236, 237, 252, 264, 265, 270, 295, 307, 316, 340, 345, 353, 360, 378, 389, 433, 438, 442, 455, 456, 526, 598, 615, 647, 648, 649, 652, 653, 669, 673, 674, 675, 677, 679, 680, 685, 686, 689, 690, 691, 692, 693, 695, 699, 701, 704, 710, 716, 727, 728, 729, 730, 731, 732, 733, 734, 735, 738, 739, 741, 743, 744], "hostconst": [97, 527], "posthostconstconvert": [97, 527], "just": [97, 242, 267, 269, 272, 274, 275, 277, 285, 310, 389, 527, 572, 649, 690, 700, 704, 710, 718, 728, 732, 738, 740, 741], "postcseoptim": [98, 528], "duplic": [98, 108, 357, 437, 528, 533], "quantizev2": [98, 528], "decreas": [98, 528, 715, 729], "size": [98, 150, 177, 185, 212, 213, 244, 245, 251, 254, 260, 265, 269, 287, 288, 294, 297, 303, 307, 310, 348, 387, 389, 396, 397, 399, 528, 575, 598, 614, 642, 646, 653, 672, 673, 678, 681, 690, 710, 711, 727, 729, 732, 733, 735, 738, 740, 743, 744], "rnn": [99, 529], "quantizedrnnconvert": [99, 529], "calibration_data": [99, 107, 529, 532], "rnn_detail": [99, 529], "scalepropagationtransform": [100, 530], "direct": [100, 214, 348, 530, 729], "export": [101, 237, 317, 321, 370, 374, 651, 683, 696, 711, 713, 739, 742], "onnxgraph": 102, "output_shap": 102, "extra_opset": 102, "output_nam": [102, 142, 237, 314, 315, 387, 680], "is_subgraph": 102, "graph_nam": 102, "manipul": [102, 103], "onnxnod": 103, "skip_convers": 103, "schema": [104, 177, 614], "onnxopschema": 104, "domain": [104, 105, 236, 237, 729, 741], "since_vers": 104, "get_schema": 104, "max_inclusive_opset_vers": 104, "within": [104, 184, 185, 216, 217, 222, 223, 231, 316, 321, 353, 374, 387, 427, 432, 575, 646, 648, 654, 670, 691, 703, 707, 710, 718, 729, 730, 738, 741], "get_max_supported_opset_vers": 104, "packag": [104, 651, 652, 681, 686, 710, 711, 730, 736, 741], "set_nam": 105, "find_opset": 105, "assert_error": 105, "bool_val": 105, "error_msg": 105, "messag": [105, 146, 568, 647, 718, 719, 723, 724, 725, 741], "map_numpy_to_onnx_dtyp": 105, "np_dtype": 105, "map_onnx_to_numpy_typ": 105, "onnx_typ": 105, "add_port_to_nam": 105, "nr": 105, "get_tensorflow_node_attr": 105, "pars": [105, 148, 170, 252, 253, 265, 269, 295, 296, 307, 310, 416, 417, 421, 570, 597, 653, 654, 740], "get_tensorflow_tensor_shap": 105, "get_tensorflow_node_shape_attr": 105, "attr": [105, 148, 208, 570], "map_tensorflow_dtyp": 105, "get_tensorflow_tensor_data": 105, "convert_tensorflow_tensor_to_onnx": 105, "read_tensorflow_node_attr": 105, "read": [105, 148, 163, 257, 269, 300, 310, 349, 570, 587, 673, 734, 737], "infer_onnx_shape_dtyp": 105, "opset_vers": [105, 142, 237, 314, 315, 680], "input_shap": [105, 256, 299, 572, 673], "input_dtyp": 105, "sometim": [105, 648, 675, 732], "make_onnx_shap": 105, "seqtyp": 105, "tensor_dtyp": 105, "around": 105, "signifi": 105, "make_onnx_inputs_output": 105, "elem_typ": 105, "text": [105, 150, 154, 224, 268, 269, 309, 310, 318, 323, 351, 371, 376, 680, 687, 699, 721, 724, 725, 729, 730, 735, 738, 740, 744], "datatyp": [105, 170, 734, 741, 744], "save_protobuf": 105, "path": [105, 140, 148, 151, 164, 170, 191, 208, 224, 228, 233, 252, 253, 254, 269, 295, 296, 297, 310, 311, 314, 315, 316, 327, 328, 329, 331, 340, 345, 349, 351, 353, 354, 367, 379, 387, 391, 394, 396, 397, 399, 402, 403, 410, 432, 433, 449, 455, 570, 575, 577, 589, 593, 637, 639, 642, 648, 649, 652, 673, 675, 678, 684, 689, 690, 691, 692, 696, 699, 710, 713, 715, 718, 723, 724, 725, 728, 735, 740, 743], "as_text": 105, "save": [105, 148, 162, 163, 191, 205, 228, 236, 237, 254, 297, 314, 315, 354, 387, 391, 433, 570, 575, 577, 587, 631, 632, 637, 642, 648, 652, 684, 690, 691, 692, 694, 698, 703, 707, 713, 718, 723, 724, 725, 728, 732, 733, 735, 738], "protobuf": [105, 387, 575, 713], "is_onnx_domain": 105, "is_list_or_tupl": 105, "are_shapes_equ": 105, "src": [105, 711], "dest": 105, "equal": [105, 143, 148, 182, 452, 565, 577, 642, 729, 735], "get_subgraphs_from_onnx": 105, "model_proto": 105, "over": [105, 163, 254, 297, 325, 378, 587, 653, 679, 683, 685, 689, 701, 710, 716, 720, 729, 731, 738, 741], "df": 105, "initialize_name_count": 105, "avoid": [105, 163, 170, 177, 252, 295, 587, 599, 614, 648, 671, 739], "conflict": [105, 671, 681], "counter": 105, "make_nam": 105, "get_index_from_strided_slice_of_shap": 105, "outputs_to_valu": 105, "stride": [105, 269, 310, 740], "slice": 105, "compute_const_folding_using_tf": 105, "g": [105, 150, 154, 163, 210, 236, 237, 587, 615, 647, 676, 679, 683, 693, 698, 729, 735, 736, 738, 741], "const_node_valu": 105, "graph_output": 105, "constant": [105, 315, 317, 357, 359, 365, 370, 437, 441, 447, 635, 671, 672, 682, 713, 740], "tf": [105, 116, 141, 148, 208, 228, 251, 252, 253, 254, 269, 294, 295, 296, 297, 310, 385, 387, 458, 475, 477, 541, 570, 574, 575, 576, 577, 671, 678, 686, 692, 730, 734, 740], "generategraphwithqdqpattern": [107, 532], "op_wise_config": [107, 131, 136, 532, 556, 561, 653], "quantized_nod": [107, 532], "llm_weight_minmax": [107, 532], "dq": [107, 109, 131, 532, 534, 556, 738], "pair": [107, 236, 237, 532, 653, 672, 690, 691, 736], "befor": [107, 109, 151, 157, 181, 200, 210, 215, 217, 222, 224, 226, 236, 237, 252, 295, 348, 350, 352, 532, 534, 600, 647, 654, 672, 673, 676, 677, 678, 681, 682, 686, 690, 705, 708, 714, 715, 732, 735, 737, 739, 741], "merg": [108, 244, 287, 367, 449, 533, 705, 708, 739, 741], "mergeduplicatedqdqoptim": [108, 533], "y": [109, 236, 237, 269, 310, 357, 437, 534, 671, 675, 681, 696, 738, 740], "shareqdqforitexypatternoptim": [109, 534], "break": [109, 534, 678, 690], "graphanalyz": [110, 535], "extend_engin": [110, 535], "analyz": [110, 208, 387, 535, 575, 737, 738, 739], "under": [110, 151, 236, 237, 254, 297, 410, 535, 577, 615, 630, 637, 641, 647, 649, 651, 673, 687, 689, 690, 693, 698, 699, 710, 718, 728, 729, 730, 733, 735, 739, 741], "singleton": [110, 535, 577, 642], "specifi": [110, 150, 163, 170, 183, 187, 228, 236, 237, 240, 241, 269, 270, 283, 284, 310, 316, 321, 325, 327, 328, 331, 340, 345, 353, 354, 374, 378, 379, 433, 452, 535, 587, 592, 596, 597, 598, 602, 631, 641, 642, 653, 654, 678, 682, 689, 690, 698, 712, 718, 722, 723, 724, 725, 727, 729, 731, 735, 740, 741, 743], "graphrewriterhelp": [110, 535], "encapsul": [110, 240, 241, 283, 284, 379, 433, 535, 631, 692], "quantize_lay": [111, 112, 114, 536, 537, 539], "fake_quant": [111, 112, 114, 536, 537, 539], "quantize_config": [111, 112, 114, 536, 537, 539, 653], "quantize_help": [111, 112, 114, 536, 537, 539], "quantize_wrapp": [111, 112, 114, 536, 537, 539], "fuse_qdq_bn": [111, 112, 130, 536, 537, 555], "fuse_qdq_concatv2": [111, 112, 130, 536, 537, 555], "fuse_qdq_conv": [111, 112, 130, 536, 537, 555], "fuse_qdq_deconv": [111, 112, 130, 536, 537, 555], "fuse_qdq_in": [111, 112, 130, 536, 537, 555], "fuse_qdq_matmul": [111, 112, 130, 536, 537, 555], "fuse_qdq_pool": [111, 112, 130, 536, 537, 555], "optimize_qdq": [111, 112, 130, 536, 537, 555], "optimize_lay": [112, 114, 117, 537, 539, 542], "quantize_layer_add": [112, 114, 117, 537, 539, 542], "quantize_layer_bas": [112, 114, 117, 537, 539, 542], "quantize_layer_bn": [112, 114, 117, 537, 539, 542], "fakequantizebas": [113, 538], "abc": [113, 323, 376, 538, 626, 652, 739, 741], "fakequant": [113, 538], "per_channel": [113, 538, 653, 654, 682, 732, 743], "8": [113, 150, 163, 177, 236, 237, 268, 309, 403, 538, 587, 598, 614, 622, 648, 653, 670, 671, 682, 686, 717, 718, 729, 730, 735, 738, 741, 744], "channel_axi": [113, 179, 182, 538], "symmetr": [113, 150, 151, 177, 396, 397, 399, 538, 598, 637, 654, 732, 735, 740, 741], "narrow_rang": [113, 538], "quantizeconfig": [115, 116, 540, 541], "custom": [115, 150, 161, 170, 177, 183, 237, 354, 378, 389, 540, 588, 599, 614, 641, 669, 676, 677, 693, 716, 717, 718, 722, 724, 725, 729, 730, 735, 737], "There": [115, 354, 356, 434, 436, 540, 671, 675, 676, 682, 685, 690, 693, 715, 717, 718, 735, 738, 741, 743], "instanc": [115, 116, 183, 204, 236, 237, 240, 241, 270, 283, 284, 322, 323, 325, 328, 331, 334, 335, 337, 338, 339, 357, 369, 375, 376, 378, 379, 433, 437, 451, 540, 541, 615, 631, 639, 642, 646, 647, 648, 652, 669, 690, 695, 701, 735, 741, 743, 744], "global": [115, 210, 236, 237, 334, 335, 337, 338, 339, 348, 451, 540, 642, 648, 690, 729, 731, 741], "class": [116, 153, 161, 170, 176, 205, 211, 218, 332, 379, 433, 477, 541, 588, 648, 649, 653, 671, 672, 673, 676, 689, 690, 701, 727, 728, 732, 736, 739, 741, 743], "init_quantize_config": [116, 541], "quantize_recip": [116, 541], "begin": [116, 154, 216, 217, 222, 350, 541, 671, 672, 676, 677, 690, 729, 741], "process": [116, 140, 150, 158, 177, 183, 185, 190, 210, 215, 216, 217, 224, 226, 228, 236, 237, 240, 241, 252, 253, 254, 265, 269, 270, 283, 284, 295, 296, 297, 307, 310, 348, 350, 352, 356, 357, 379, 433, 434, 436, 437, 455, 541, 592, 596, 598, 615, 631, 641, 642, 649, 652, 653, 654, 670, 672, 673, 676, 677, 678, 680, 690, 694, 715, 717, 718, 720, 728, 729, 732, 733, 735, 738, 739, 740, 743], "model_nam": [116, 236, 237, 541], "special": [116, 163, 208, 389, 541, 587, 648, 672, 689, 690, 727, 729, 735, 742], "decid": [116, 236, 237, 319, 350, 372, 541, 652, 653, 690, 732, 736, 741], "qat_clone_funct": [116, 541], "leav": [116, 541, 704], "quantizewrapp": [116, 122, 541, 547], "wrapped_lay": [116, 204, 541], "config_quantizable_lay": [118, 543], "quantizelayeradd": [119, 544], "quantizelay": [120, 545], "quantizelayerbas": [120, 545], "quantizelayerbatchnorm": [121, 546], "quantizewrapperbas": [122, 547], "fusedbatchnormv3": [123, 133, 548, 558], "fusenodestartwithfusedbatchnormv3": [123, 133, 548, 558], "_quantizedfusedbatchnorm": [123, 548], "concatv2": [124, 134, 147, 549, 559, 569, 682], "fusenodestartwithconcatv2": [124, 134, 549, 559], "quantizedconcatv2": [124, 134, 549, 559], "fusenodestartwithconv2d": [125, 135, 550, 560], "conv2dbackpropinput": [126, 551], "conv3dbackpropinputv2": [126, 551], "fusenodestartwithdeconv2d": [126, 551], "fusedinstancenorm": [127, 552], "fusenodestartwithfusedinstancenorm": [127, 552], "batchmatmul": [128, 553], "batchmatmulv2": [128, 553], "fusenodestartwithmatmul": [128, 137, 553, 562], "avgpool": [129, 138, 554, 563, 682], "fusenodestartwithpool": [129, 138, 554, 563], "optimizeqdqgraph": [131, 556], "input_graph": [131, 136, 143, 428, 432, 556, 561, 565, 652], "op_wise_sequ": [131, 136, 556, 561], "quantizegraph": [132, 557], "quantizegraphbas": [132, 557], "quantizenodebas": [132, 557], "quantizegraphforintel": [136, 561], "common": [139, 161, 163, 200, 237, 267, 317, 327, 331, 332, 333, 370, 403, 405, 471, 473, 474, 475, 477, 564, 587, 588, 621, 622, 625, 634, 646, 671, 673, 677, 678, 680, 684, 686, 690, 732, 738], "herlper": [139, 564], "quantizegraphhelp": [139, 564], "sever": [139, 226, 269, 310, 352, 354, 564, 649, 675, 676, 677, 685, 690, 691, 703, 707, 718, 729, 731, 733, 738, 740, 741, 743], "staticmethod": [139, 564], "function": [139, 140, 161, 175, 190, 216, 217, 222, 236, 237, 240, 241, 253, 283, 284, 296, 328, 331, 340, 345, 394, 455, 564, 588, 647, 648, 649, 652, 653, 654, 669, 672, 676, 677, 680, 684, 685, 686, 688, 689, 690, 691, 701, 711, 717, 718, 729, 732, 735, 736, 737, 738, 739, 741, 742], "smoothquantcalibr": [140, 455], "dataset": [140, 141, 150, 170, 177, 224, 240, 241, 242, 244, 245, 247, 248, 249, 250, 251, 263, 272, 283, 284, 285, 287, 288, 290, 291, 292, 293, 294, 306, 317, 321, 322, 323, 325, 354, 370, 374, 375, 376, 378, 379, 433, 455, 458, 572, 598, 614, 631, 634, 649, 651, 652, 653, 672, 678, 683, 689, 690, 698, 712, 713, 723, 729, 732, 735, 736, 738, 741, 743, 744], "outlier": [140, 455, 653, 670, 675, 715, 735, 738], "smoothquantcalibrationllm": [140, 455], "model_path": [140, 148, 177, 455, 570, 600, 622, 675, 723], "temp_path": [140, 455], "weight_name_map": [140, 455], "llm": [140, 141, 150, 157, 223, 455, 458, 600, 729, 730, 733, 735, 738], "eval_func": [140, 240, 241, 283, 284, 354, 357, 360, 363, 379, 433, 434, 437, 438, 442, 445, 452, 455, 631, 648, 672, 673, 675, 676, 677, 678, 690, 713, 732, 733, 734, 735, 741, 743], "temporari": [140, 170, 455, 593, 642, 646], "store": [140, 201, 203, 205, 208, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 227, 236, 237, 254, 297, 343, 350, 455, 684], "median": [140, 455], "autotrack": [140, 148, 455, 570], "smoothquantscal": [141, 458], "alpha": [141, 162, 166, 181, 203, 225, 405, 458, 475, 611, 671, 732, 741], "scales_per_op": [141, 405, 458, 475], "individu": [141, 210, 348, 427, 432, 458, 646, 718, 729, 738], "smoothquantscalerllm": [141, 458], "tensorflowqdqtoonnxqdqconvert": 142, "shape_overrid": 142, "inputs_as_nchw": [142, 314], "default_opset_vers": 142, "bia": [143, 236, 237, 565, 735, 739], "correct": [143, 182, 228, 236, 237, 321, 322, 323, 325, 349, 374, 375, 376, 378, 565, 646, 693], "biascorrect": [143, 565], "fp32_graph": [143, 565], "weight_empir": [143, 565], "Will": [143, 565, 676, 685], "our": [143, 170, 236, 237, 404, 565, 593, 649, 651, 680, 690, 711, 712, 715, 737, 742], "task": [143, 252, 259, 295, 302, 325, 378, 565, 673, 676, 677, 680, 685, 689, 690, 713, 717, 720, 729, 733, 735, 738, 744], "close": [143, 182, 565, 670, 719], "w_int8": [143, 182, 565], "u": [143, 182, 565, 693, 712, 717], "w_fp32": [143, 182, 565], "varianc": [143, 182, 204, 565, 675], "differ": [143, 154, 178, 182, 184, 187, 194, 200, 219, 236, 237, 245, 254, 269, 271, 288, 297, 310, 316, 325, 331, 333, 342, 353, 378, 387, 389, 565, 598, 636, 646, 648, 649, 653, 672, 673, 675, 676, 678, 679, 684, 685, 689, 690, 692, 703, 707, 712, 715, 718, 727, 729, 732, 735, 738, 739, 740, 741], "wise": [143, 160, 162, 164, 177, 182, 236, 237, 357, 360, 397, 399, 437, 438, 442, 565, 586, 589, 612, 651, 653, 685, 715, 729, 735, 738, 739, 741, 742, 743], "minim": [143, 154, 182, 357, 437, 565, 653, 654, 670, 676, 679, 689, 690, 703, 707, 729, 732, 741], "scale_c": [143, 182, 565], "shift": [143, 182, 265, 307, 565, 711, 740], "notic": [143, 182, 270, 565, 687, 691, 713, 736], "first": [143, 150, 163, 170, 182, 184, 209, 234, 236, 237, 252, 295, 321, 367, 374, 438, 449, 565, 577, 587, 614, 642, 648, 649, 651, 652, 653, 654, 673, 675, 686, 691, 695, 704, 705, 708, 711, 713, 714, 715, 731, 732, 734, 735, 737, 738, 739, 741, 743], "empir": [143, 182, 565], "solut": [143, 182, 565, 651, 652, 653, 681, 695, 699, 704, 730, 735, 736, 738, 741, 742], "don": [143, 182, 210, 236, 237, 565, 648, 716, 729, 741], "min": [143, 150, 177, 182, 201, 237, 405, 565, 577, 598, 614, 642, 675, 713, 715, 729, 732, 735, 738, 740, 741], "graphtransform": [144, 566], "graphtransformbas": [144, 566], "input_pb": [144, 146, 147, 566, 568, 569], "log": [146, 183, 190, 208, 416, 417, 421, 568, 598, 638, 648, 701, 723, 724, 725, 737, 739, 741], "insertlog": [146, 568], "node_name_list": [146, 568], "show_nam": [146, 568], "show_op": [146, 568], "first_n": [146, 568], "summar": [146, 568, 671, 676], "1024": [146, 254, 297, 568, 696], "dump_fp32": [146, 568], "rerang": [147, 569], "rerangequantizedconcat": [147, 569], "rerange_quant": [147, 569], "version1_lt_version2": [148, 577, 642], "version1": [148, 577, 642], "version2": [148, 577, 642], "version1_gt_version2": [148, 577, 642], "greater": [148, 577, 642, 723, 729, 741], "version1_eq_version2": [148, 577, 642], "version1_gte_version2": [148, 577, 642], "version1_lte_version2": [148, 577, 642], "disable_random": [148, 570, 577], "seed": [148, 150, 177, 192, 200, 236, 237, 333, 570, 577, 598, 642, 690, 743], "disabl": [148, 236, 237, 570, 577, 646, 710, 715, 734, 735, 738], "read_graph": [148, 570], "in_graph": [148, 570], "in_graph_is_binari": [148, 570], "write_graph": [148, 570], "out_graph_def": [148, 570], "out_graph_fil": [148, 570], "write": [148, 261, 304, 570, 642, 678, 684, 690, 693, 739], "is_ckpt_format": [148, 570], "ckpt": [148, 379, 387, 433, 570, 575, 744], "folder": [148, 254, 259, 297, 302, 379, 433, 570, 641, 673, 698, 703, 707, 716, 723, 724, 725, 735, 739], "is_saved_model_format": [148, 570], "saved_model": [148, 327, 570, 733], "get_estimator_graph": 148, "estim": [148, 150, 325, 378, 387, 575, 741], "input_fn": [148, 387, 575], "get_tensor_by_nam": [148, 570], "try_cnt": [148, 570], "import": [148, 154, 183, 185, 201, 236, 237, 327, 379, 389, 433, 452, 570, 577, 631, 642, 648, 649, 651, 654, 669, 672, 673, 675, 676, 677, 678, 680, 683, 689, 690, 691, 692, 693, 697, 699, 712, 713, 721, 727, 728, 729, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742], "scope": [148, 570, 647, 653, 690], "onc": [148, 163, 196, 226, 276, 352, 356, 434, 436, 570, 587, 653, 654, 672, 710, 716, 729, 730, 741, 744], "both": [148, 151, 237, 570, 646, 649, 652, 677, 690, 694, 713, 715, 717, 729, 731, 732, 735, 738, 741], "compat": [148, 387, 570, 575, 647, 678, 692, 705, 708, 710, 729, 736], "v1": [148, 264, 265, 307, 322, 323, 325, 375, 376, 378, 387, 570, 575, 678, 680, 681, 689, 692, 714, 729, 736, 737, 738, 744], "suffix": [148, 570], "time": [148, 163, 192, 204, 236, 237, 269, 310, 325, 357, 378, 389, 437, 570, 577, 587, 609, 642, 653, 672, 675, 678, 681, 690, 698, 700, 703, 707, 710, 711, 716, 719, 723, 724, 727, 729, 730, 732, 735, 737, 738, 739, 740, 741], "got": [148, 570, 653, 681, 739], "iterator_sess_run": [148, 570], "sess": [148, 387, 570, 575], "iter_op": [148, 570], "feed_dict": [148, 251, 294, 570], "output_tensor": [148, 387, 570, 575], "measur": [148, 270, 379, 570, 636, 649, 652, 669, 675, 676, 689, 690, 735, 739, 741, 744], "integr": [148, 194, 271, 570, 652, 690, 711, 712, 717, 735], "makeiter": [148, 570], "feed": [148, 251, 294, 570, 598, 676, 729], "end": [148, 154, 215, 216, 217, 222, 236, 237, 252, 268, 269, 295, 309, 310, 350, 356, 434, 436, 570, 652, 653, 654, 676, 677, 682, 686, 690, 704, 720, 727, 729, 739, 740, 741], "predict": [148, 269, 274, 310, 318, 322, 323, 325, 371, 375, 376, 378, 433, 570, 649, 676, 689, 701, 735, 738, 739, 740], "pred": [148, 325, 378, 570, 689], "collate_tf_pr": [148, 570], "collat": [148, 170, 570], "get_input_output_node_nam": [148, 570], "fix_ref_type_of_graph_def": [148, 570], "fix": [148, 220, 222, 252, 295, 350, 570, 672, 673, 697, 729, 732, 735, 741], "strip_unused_lib": [148, 570], "offici": [148, 318, 322, 323, 371, 375, 376, 570, 646, 738], "r1": [148, 570], "15": [148, 570, 682, 686, 724], "branch": [148, 570, 647], "get_graph_def": [148, 570], "auto_input_output": [148, 570], "get_model_input_shap": [148, 570], "get_tensor_val_from_graph_nod": [148, 570], "graph_node_name_map": [148, 570], "kei": [148, 150, 158, 163, 164, 176, 208, 219, 228, 234, 236, 237, 332, 349, 387, 452, 570, 575, 577, 587, 589, 593, 598, 614, 632, 634, 642, 651, 653, 712, 713, 719, 730, 735, 739, 741], "val": [148, 228, 254, 257, 297, 300, 349, 570, 675, 690, 715], "tensor_v": [148, 570], "int8_node_name_revers": [148, 570], "revers": [148, 570, 713], "tf_diagnosis_help": [148, 570], "fp32_model": [148, 158, 170, 315, 570, 642, 652, 733, 735], "quan_model": [148, 570], "save_path": [148, 314, 315, 570, 652, 692], "diagnosi": [148, 236, 237, 570, 690, 713, 714, 715, 730, 736, 742], "generate_feed_dict": [148, 570], "input_tensor": [148, 204, 387, 570, 575], "get_weight_from_input_tensor": [148, 570], "input_tensor_nam": [148, 387, 570, 575], "associ": [148, 163, 321, 374, 570, 587], "search": [148, 157, 177, 200, 201, 208, 222, 233, 237, 240, 241, 283, 284, 316, 318, 328, 331, 332, 333, 353, 357, 371, 396, 437, 570, 600, 612, 614, 642, 651, 671, 685, 689, 693, 694, 704, 729, 730, 735, 738, 739, 741, 742], "look": [148, 219, 570, 652, 654, 682, 689, 712, 713, 715, 738, 743], "sq_weight_tensor": [148, 570], "sq_weights_nod": [148, 570], "two": [148, 158, 163, 183, 209, 214, 221, 226, 254, 259, 270, 297, 302, 321, 348, 352, 354, 361, 374, 443, 570, 587, 642, 647, 648, 649, 671, 672, 673, 676, 678, 680, 682, 690, 691, 717, 718, 720, 729, 732, 734, 735, 737, 738, 741, 743], "apply_inlin": [148, 570], "func": [148, 170, 570, 614, 642, 732, 743], "inlin": [148, 570, 693, 698, 701], "definit": [148, 153, 166, 245, 250, 288, 293, 570, 611], "concret": [148, 570, 741], "new_graph_def": [148, 570], "construct_function_from_graph_def": [148, 570], "frozen_func": [148, 570], "rebuild": [148, 570, 694, 703, 707], "reconstruct": [148, 570, 730], "new_func": [148, 570], "parse_saved_model": [148, 570], "output_tensor_nam": [148, 387, 570, 575], "_saved_model": [148, 570], "load": [148, 161, 163, 164, 252, 268, 269, 295, 309, 310, 379, 387, 433, 570, 575, 577, 585, 586, 588, 589, 641, 642, 653, 672, 703, 707, 711, 713, 731, 732, 733, 738], "reconstruct_saved_model": [148, 570], "trackabl": [148, 570], "destin": [148, 313, 327, 570], "quant_weight_asym": 150, "v": [150, 154, 701, 710, 729, 741, 743], "min_scal": 150, "max_scal": 150, "asymmetr": [150, 654, 732, 735, 741], "e": [150, 163, 210, 236, 237, 587, 615, 646, 647, 676, 679, 683, 693, 698, 699, 703, 707, 729, 735, 738, 741], "perturb": 150, "minimum": [150, 210, 236, 237, 654, 670, 675, 690, 701, 729, 738, 741], "quant_weight_sym": 150, "quant_weight_actor": 150, "quant_weight": [150, 177], "hand": [150, 649], "issu": [150, 646, 647, 650, 651, 686, 713, 715, 732, 739], "quant_weight_w_scal": [150, 177, 614], "round_st": 150, "torch": [150, 151, 153, 154, 156, 157, 158, 159, 160, 163, 164, 166, 167, 168, 170, 176, 177, 181, 185, 191, 205, 208, 209, 211, 219, 233, 236, 237, 315, 379, 433, 637, 641, 648, 651, 654, 655, 676, 678, 680, 690, 691, 692, 693, 698, 701, 713, 732, 735, 738, 739], "straight": 150, "through": [150, 158, 240, 241, 283, 284, 378, 379, 433, 651, 669, 682, 684, 685, 689, 696, 717, 727, 728, 729, 731, 732, 735], "omniqu": 150, "saveinput": 150, "seqlen": [150, 177, 598], "256": [150, 259, 265, 302, 307, 622, 673, 678, 690, 740], "block_nam": 150, "cach": [150, 252, 295, 615, 681, 732, 735], "get_modul": [150, 164, 176, 589, 593, 614], "nn": [150, 153, 157, 164, 166, 170, 176, 177, 208, 209, 219, 231, 236, 237, 315, 379, 433, 589, 593, 597, 599, 600, 611, 614, 615, 620, 621, 625, 630, 637, 641, 648, 676, 690, 692, 735, 738, 739], "set_modul": [150, 170, 176, 593, 614, 630], "new_modul": [150, 164, 170, 176, 589, 593, 614, 630], "get_scale_shap": 150, "wrapper_block": 150, "enable_minmax_tun": [150, 177, 598], "conv1d": [150, 157, 231, 600, 654], "indic": [150, 163, 184, 193, 204, 236, 237, 245, 250, 252, 288, 293, 295, 311, 321, 332, 374, 396, 397, 399, 587, 626, 648, 672, 681, 713, 718, 739], "unwrapper_block": 150, "unwrap": 150, "wrapperlinear": 150, "wrappertransformerconv1d": 150, "sampling_input": 150, "input_id": [150, 252, 269, 295, 310, 690], "input_oth": 150, "length": [150, 177, 219, 236, 237, 252, 269, 295, 310, 321, 374, 598, 651, 673, 689, 730, 732, 735, 740], "id": [150, 183, 268, 270, 309, 318, 320, 321, 322, 323, 371, 373, 374, 375, 376, 689, 718, 719, 723, 724, 725, 737, 741], "current_input_id": 150, "current_input_oth": 150, "move_input_to_devic": 150, "check_is_cpu": 150, "otherwis": [150, 163, 254, 269, 297, 310, 587, 642, 646, 653, 673, 705, 708, 731, 735, 740], "block_forward": 150, "amp_dtyp": 150, "automat": [150, 177, 206, 208, 209, 236, 237, 254, 257, 264, 265, 297, 300, 307, 316, 326, 353, 598, 648, 651, 669, 673, 685, 690, 691, 693, 695, 698, 699, 701, 703, 704, 705, 707, 708, 710, 717, 720, 728, 729, 732, 738, 740, 741], "mix": [150, 156, 165, 177, 236, 237, 355, 367, 379, 435, 449, 598, 615, 651, 652, 659, 685, 693, 699, 700, 701, 742], "precis": [150, 156, 165, 177, 236, 237, 240, 241, 283, 284, 316, 323, 325, 326, 353, 355, 367, 376, 378, 379, 389, 435, 438, 449, 461, 598, 615, 642, 651, 652, 653, 659, 669, 670, 677, 678, 682, 685, 693, 699, 700, 701, 730, 731, 732, 735, 738, 741, 742], "collect_round_v": 150, "collect_minmax_scal": 150, "get_batch_dim": 150, "posit": [150, 204, 269, 310, 403, 598, 625, 646, 689, 693, 718, 723, 724, 725], "dim": [150, 176, 269, 310, 593, 738, 740], "wrappermultiblock": 150, "module_list": 150, "act": [150, 228, 250, 293, 646], "singl": [150, 203, 226, 236, 237, 245, 252, 269, 288, 295, 310, 321, 350, 352, 374, 378, 433, 477, 648, 673, 675, 686, 716, 729, 733, 738], "get_block_nam": 150, "network": [150, 158, 203, 210, 211, 350, 440, 615, 649, 670, 676, 677, 680, 690, 712, 730, 732, 738, 741], "get_tokenizer_funct": 150, "token": [150, 177, 252, 263, 266, 269, 295, 306, 308, 310, 317, 318, 319, 370, 371, 372, 598, 637, 673, 689, 690, 712, 713, 735, 737, 738, 740, 741], "truncat": [150, 252, 269, 295, 310, 673, 740], "field": [150, 236, 237, 254, 297, 321, 374, 648, 652, 654, 678, 690, 737, 741, 743], "get_dataload": 150, "data_nam": 150, "neelnanda": [150, 177, 598], "pile": [150, 177, 598], "10k": [150, 177, 598, 679, 683], "42": [150, 177, 200, 237, 333, 598, 744], "test": [150, 183, 236, 237, 269, 310, 647, 651, 675, 686, 718, 723, 744], "shuffl": [150, 242, 244, 247, 248, 249, 251, 272, 285, 287, 290, 291, 292, 294, 572, 672, 690, 732], "enable_full_rang": [150, 151, 155, 177, 598, 614, 637, 733, 735], "cuda": [150, 163, 228, 587, 615, 626, 691, 693, 695, 729, 732], "lr_schedul": [150, 177, 598, 690, 729], "dataset_nam": [150, 177, 598, 714], "dataset_split": [150, 177, 598], "use_quant_input": [150, 177, 598], "lr": [150, 154, 177, 236, 237, 598, 676, 678, 690], "005": [150, 177, 598, 735], "minmax_lr": [150, 177, 598], "low_gpu_mem_usag": [150, 177, 598], "200": [150, 177, 268, 309, 598, 648, 719, 741], "512": [150, 177, 598], "sampler": [150, 177, 185, 242, 244, 246, 247, 248, 249, 251, 272, 285, 287, 289, 290, 291, 292, 294, 306, 317, 366, 448, 572, 598, 672, 678], "rand": [150, 177, 598, 693, 738], "n_block": [150, 177, 598, 599, 735], "gradient_accumulate_step": [150, 177, 598], "not_use_ms": 150, "dynamic_max_gap": [150, 177, 598], "data_typ": [150, 155, 177, 369, 451, 598, 599], "signround": 150, "advanc": [150, 158, 236, 237, 646, 651, 653, 659, 688, 729, 732, 735, 743], "cheng": 150, "wenhua": 150, "et": [150, 154, 158, 670, 735, 738], "al": [150, 154, 158, 670, 735, 738], "via": [150, 316, 340, 345, 353, 646, 651, 678, 685, 690, 693, 710, 729, 730], "sign": [150, 204, 369, 451, 647, 651, 654, 670, 712, 730, 732, 735, 737], "gradient": [150, 154, 177, 203, 334, 598, 651, 685, 690, 729, 730, 744], "descent": [150, 154, 208, 651, 730], "arxiv": [150, 157, 203, 204, 222, 223, 230, 350, 600, 622, 651, 670, 729, 730, 735, 738], "preprint": [150, 670, 729, 735, 738], "2309": 150, "05516": 150, "2023": [150, 651, 725, 729, 735, 738, 744], "pytorch": [150, 177, 194, 196, 197, 205, 208, 211, 214, 215, 218, 223, 224, 231, 236, 237, 251, 252, 254, 257, 261, 269, 271, 276, 278, 294, 295, 297, 300, 304, 310, 315, 316, 325, 326, 346, 348, 351, 353, 361, 370, 378, 379, 388, 433, 443, 598, 635, 642, 647, 648, 649, 651, 652, 653, 654, 670, 671, 672, 676, 677, 679, 682, 685, 686, 688, 690, 691, 692, 693, 695, 698, 699, 700, 701, 710, 712, 721, 724, 725, 729, 730, 731, 735, 736, 738, 741, 743], "empti": [150, 164, 177, 236, 237, 589, 598, 602, 696, 733], "layer1": [150, 177, 208, 236, 237, 598, 690, 729, 732], "layer_nam": [150, 176, 177, 232, 237, 593, 598, 729], "rang": [150, 151, 177, 255, 256, 269, 298, 299, 310, 396, 410, 452, 572, 598, 599, 612, 614, 631, 637, 651, 652, 654, 670, 673, 675, 676, 677, 678, 690, 713, 715, 728, 729, 732, 735, 738, 740], "learn": [150, 154, 177, 598, 651, 652, 653, 672, 673, 680, 684, 685, 686, 690, 691, 693, 695, 698, 699, 701, 704, 705, 708, 710, 729, 730, 732, 738, 739, 741, 742], "rate": [150, 154, 177, 598, 690, 729, 732], "schedul": [150, 177, 202, 205, 215, 216, 217, 222, 223, 225, 236, 237, 317, 346, 350, 370, 598, 690, 717, 718, 720, 728], "futur": [150, 177, 181, 185, 240, 241, 272, 283, 284, 685, 688, 690, 701, 723, 724, 725, 742], "accumul": [150, 177, 366, 448, 598, 741], "step": [150, 154, 177, 203, 214, 215, 216, 217, 221, 222, 226, 236, 237, 348, 350, 352, 598, 631, 653, 654, 675, 676, 677, 678, 690, 705, 708, 710, 723, 724, 725, 728, 729, 731, 734, 735, 737, 738, 739, 741], "squar": [150, 177, 325, 360, 378, 442, 598, 675, 689, 715, 741], "gap": [150, 177, 598, 675, 692], "addit": [150, 170, 177, 237, 631, 653, 654, 676, 704, 712, 718, 735, 736, 741], "keyword": [150, 163, 177, 237, 587], "argument": [150, 163, 177, 237, 403, 452, 587, 598, 602, 625, 649, 675, 714, 715, 718, 721, 723, 724, 725, 735], "autooptround": 150, "adamw": [150, 196, 276], "autoadamround": 150, "export_compressed_model": [151, 600, 612, 622, 637, 735], "compression_dtyp": [151, 637, 735], "int32": [151, 177, 599, 612, 637, 673, 735], "compression_dim": [151, 637, 735], "scale_dtyp": [151, 177, 598, 637, 735], "float32": [151, 255, 256, 269, 298, 299, 310, 321, 374, 572, 598, 637, 652, 669, 673, 690, 732, 735, 738, 740], "use_optimum_format": [151, 637, 735], "weightonlylinear": [151, 735], "json": [151, 170, 191, 253, 269, 296, 310, 591, 593, 641, 673, 692, 711, 718, 719, 723, 724, 725, 735, 740], "compress": [151, 157, 317, 340, 345, 370, 389, 600, 631, 637, 644, 651, 659, 676, 685, 690, 710, 712, 727, 728, 729, 730, 732, 738, 742, 744], "comoress": [151, 637], "select": [151, 177, 225, 228, 237, 252, 295, 612, 614, 637, 648, 649, 670, 685, 686, 710, 729, 732, 735, 739, 741], "choos": [151, 177, 254, 297, 599, 612, 614, 637, 685, 698, 730, 736, 738, 741, 743], "popular": [151, 317, 370, 644, 651, 652, 653, 670, 676, 679, 680, 683, 688, 690, 729, 732, 735, 741, 742], "huggingfac": [151, 208, 219, 252, 295, 637, 673, 679, 683, 698, 699, 700, 701, 721, 722, 724, 725, 738, 744], "why": [151, 738, 739], "g_idx": 151, "instead": [151, 154, 233, 234, 237, 251, 294, 642, 696, 698, 701, 716, 729, 735], "record": [151, 158, 170, 194, 197, 252, 253, 254, 260, 271, 278, 295, 296, 297, 303, 614, 642, 673, 715, 735, 737, 739, 741], "order": [151, 162, 170, 185, 204, 318, 319, 354, 357, 360, 369, 371, 372, 397, 437, 442, 451, 648, 675, 689, 713, 731, 735, 738, 739, 741], "packed_weight": 151, "qweight": 151, "5": [151, 162, 181, 185, 194, 204, 236, 237, 256, 265, 271, 299, 307, 325, 378, 405, 433, 475, 652, 673, 680, 682, 686, 689, 690, 715, 720, 723, 724, 729, 731, 732, 735, 738, 740, 741, 743, 744], "alwai": [151, 185, 274, 321, 374, 378, 433, 675, 689, 690, 715, 735], "even": [151, 733, 735, 738], "modul": [153, 159, 160, 205, 211, 218, 330, 336, 346, 347, 586, 610, 648, 671, 672, 676, 685, 689, 690, 692, 729, 731, 734, 735, 739, 742], "sgd": [154, 196, 236, 237, 276, 676, 690, 731, 743], "param": [154, 170, 176, 183, 187, 196, 242, 270, 276, 285, 325, 357, 378, 437, 572, 593, 642, 652, 692, 741], "requir": [154, 170, 177, 236, 237, 243, 354, 387, 432, 575, 599, 614, 615, 648, 652, 653, 669, 670, 672, 675, 677, 678, 682, 690, 691, 692, 694, 704, 710, 712, 717, 718, 721, 724, 725, 729, 732, 735, 736, 737, 738, 739, 741, 743], "momentum": [154, 203, 350, 685, 690, 729, 743], "weight_decai": [154, 201, 690, 743], "nesterov": [154, 690, 743], "maxim": [154, 690, 729, 741], "foreach": 154, "differenti": 154, "stochast": 154, "align": [154, 269, 310, 646, 735, 740], "rule": [154, 675, 693, 729], "110mm": 154, "4pt": 154, "textbf": 154, "gamma": 154, "theta_0": 154, "f": [154, 163, 205, 587, 671, 676, 678, 732, 735, 738], "theta": 154, "lambda": [154, 163, 587, 733], "decai": 154, "hspace": 154, "13mm": 154, "mu": [154, 675], "tau": 154, "textit": 154, "ex": 154, "ldot": 154, "5mm": 154, "g_t": 154, "leftarrow": 154, "nabla_": 154, "f_t": 154, "theta_": 154, "neq": 154, "10mm": 154, "15mm": 154, "_t": 154, "_": [154, 240, 241, 283, 284, 433, 648, 649, 651, 652, 653, 670, 675, 676, 678, 680, 682, 690, 691, 692, 693, 699, 703, 705, 707, 708, 715, 718, 719, 727, 729, 732, 735, 736, 737, 738, 739, 741, 743], "g_": 154, "theta_t": 154, "bf": 154, "formula": [154, 729, 738], "On": [154, 732, 744], "deep": [154, 234, 577, 651, 652, 653, 672, 685, 686, 690, 691, 693, 695, 698, 699, 701, 704, 710, 730, 732, 741, 742, 744], "l2": [154, 237, 729], "penalti": [154, 318, 319, 371, 372, 689], "xdoctest": [154, 163, 587], "skip": [154, 163, 587, 739, 741], "9": [154, 203, 236, 237, 648, 686, 690, 729, 731, 738, 741, 743, 744], "zero_grad": [154, 678, 690, 729], "loss_fn": 154, "backward": [154, 615, 631, 676, 677, 678, 690, 728, 729, 732, 736], "subtli": 154, "sutskev": 154, "some": [154, 206, 208, 236, 237, 252, 295, 349, 653, 654, 671, 673, 675, 680, 686, 689, 690, 712, 713, 714, 715, 718, 727, 729, 732, 734, 735, 738, 739, 741, 742, 744], "written": [154, 690], "v_": 154, "p_": 154, "denot": [154, 738], "veloc": 154, "respect": [154, 646, 682, 729, 738, 743], "contrast": [154, 210, 348, 740], "emploi": 154, "form": [154, 323, 376, 675, 676, 710], "analog": 154, "modifi": [154, 219, 254, 297, 432, 451, 648, 654, 678, 682, 714, 715, 729, 743], "d_p_list": 154, "momentum_buffer_list": 154, "has_sparse_grad": 154, "see": [154, 161, 204, 230, 269, 310, 318, 371, 588, 615, 646, 647, 648, 650, 671, 687, 690, 703, 704, 707, 710, 711, 715, 716, 735, 738, 739, 741], "actawareweightqu": 155, "example_input": [155, 165, 169, 170, 175, 177, 236, 237, 315, 591, 592, 593, 596, 597, 599, 613, 614, 621, 625, 641, 680], "algo": [155, 187, 391, 460, 461, 634], "bf16modulewrapp": 156, "bf16modul": 156, "mixed_precision_model": 156, "bf16_symbolic_trac": 156, "fx_sub_module_list": 156, "trace": [156, 158, 168, 170, 208, 236, 237, 315, 440, 592, 593, 596, 597, 625, 648, 700, 741], "_description_": [156, 391], "is_leaf": [157, 600], "judg": [157, 600], "trace_gptq_target_block": [157, 600], "module_typ": [157, 600], "modulelist": [157, 600], "sequenti": [157, 185, 250, 293, 354, 356, 434, 436, 600, 741], "stack": [157, 600], "structur": [157, 209, 220, 221, 236, 237, 350, 368, 450, 600, 642, 685, 709, 711, 714, 723, 729, 730, 732, 739, 742, 744], "critic": [157, 219, 600, 646], "gptq_related_block": [157, 600], "embed": [157, 170, 600, 670, 729], "transformers_pr": [157, 600], "todo": [157, 187, 252, 255, 295, 298, 321, 367, 374, 449, 572, 600], "transformers_nam": [157, 600], "find_lay": [157, 231, 600], "find_layers_nam": [157, 600], "log_quantizable_layers_per_transform": [157, 600], "transformer_block": [157, 600], "maxq": [157, 600], "gptquantiz": [157, 600], "nsampl": [157, 177, 230, 600, 735], "use_max_length": [157, 177, 600, 735], "pad_max_length": [157, 177, 735], "layer_wis": [157, 177, 585, 641, 733], "pretrain": [157, 600, 637, 693, 699], "url": [157, 254, 297, 600, 647, 687, 721, 722, 729], "org": [157, 203, 204, 222, 223, 230, 321, 350, 374, 600, 622, 648, 675, 686, 705, 708, 729], "2210": [157, 600, 622, 735], "17323": [157, 600, 622, 735], "node_collector": 158, "hook": [158, 193, 197, 219, 278, 279, 340, 345, 634, 676, 677, 690, 729, 738, 739], "hessiantrac": 158, "q_model": [158, 162, 237, 327, 433, 473, 477, 597, 648, 672, 673, 675, 678, 680, 683, 684, 689, 690, 692, 712, 713, 732, 733, 734, 735], "criterion": [158, 193, 195, 196, 202, 203, 210, 215, 216, 217, 219, 222, 223, 227, 236, 237, 273, 276, 317, 370, 676, 677, 690, 729, 732, 738, 741, 743], "yao": 158, "zhewei": 158, "pyhessian": 158, "len": [158, 237, 269, 310, 673, 678, 740], "2020": 158, "ieee": [158, 691, 738], "intern": [158, 250, 293, 367, 449, 672, 673, 689, 729], "confer": [158, 729, 738], "big": [158, 675, 735], "dong": 158, "zhen": 158, "hawq": [158, 440, 741], "v2": [158, 440, 672, 678, 680, 681, 686, 699, 736, 738, 741, 742, 744], "system": [158, 163, 183, 270, 587, 642, 669, 696, 729, 744], "33": [158, 744], "18518": 158, "18529": 158, "openvinotoolkit": 158, "nncf": 158, "develop": [158, 187, 389, 647, 648, 671, 686, 690, 691, 693, 699, 710, 716, 729, 730, 734, 737], "hessian_trac": 158, "compare_weight": 158, "float_dict": 158, "ani": [158, 163, 187, 321, 323, 366, 374, 376, 403, 427, 432, 448, 452, 474, 587, 615, 625, 626, 639, 642, 646, 651, 654, 671, 678, 693, 698, 711, 712, 716, 717, 729, 737, 741], "quantized_dict": 158, "compar": [158, 325, 378, 642, 677, 689, 713, 729, 732, 735, 737, 739, 741], "being": [158, 321, 374, 654, 718], "wt_compare_dict": 158, "float_model": [158, 651], "state_dict": [158, 678, 735, 739], "qmodel": 158, "compute_error": 158, "state": [158, 209, 615, 654, 696, 729], "weight_dict": 158, "hawq_top": 158, "enable_act": 158, "portabl": [161, 588], "serial": [161, 163, 587, 588], "copyreg": [161, 588], "mechan": [161, 203, 588, 729, 737, 742], "pickler": [161, 588], "pickletool": [161, 588], "comment": [161, 588, 646, 653, 673, 689, 690, 735, 740], "unpickl": [161, 163, 587, 588], "misc": [161, 588, 687], "format_vers": [161, 588], "compatible_format": [161, 588], "except": [161, 163, 452, 587, 588, 642, 671, 716, 732, 733], "pickleerror": [161, 588], "pickl": [161, 163, 587, 588], "picklingerror": [161, 588], "unpicklingerror": [161, 588], "problem": [161, 252, 295, 325, 378, 588, 689, 691, 711], "secur": [161, 588, 651, 712, 730, 745], "violat": [161, 588], "also": [161, 209, 251, 254, 269, 294, 297, 310, 318, 371, 378, 389, 433, 588, 615, 647, 649, 652, 653, 654, 672, 675, 679, 683, 685, 689, 690, 693, 698, 703, 704, 707, 710, 711, 712, 715, 716, 727, 729, 730, 732, 734, 735, 738, 741], "includ": [161, 194, 203, 208, 210, 225, 227, 236, 237, 252, 254, 261, 269, 271, 295, 297, 304, 310, 316, 326, 348, 353, 452, 588, 615, 642, 646, 652, 653, 654, 672, 673, 675, 686, 687, 688, 689, 690, 693, 696, 699, 704, 716, 720, 723, 724, 725, 729, 732, 734, 735, 739, 741], "necessarili": [161, 588], "limit": [161, 201, 357, 437, 588, 642, 651, 675, 676, 688, 732, 735, 736, 739], "attributeerror": [161, 452, 588], "eoferror": [161, 588], "importerror": [161, 588, 681], "indexerror": [161, 588], "layerwisequ": 162, "pretrained_model_name_or_path": [162, 164, 589], "op_cfg": 162, "output_dir": [162, 637, 690, 698, 699, 714, 715, 721, 724, 725], "memomeri": 162, "file_lik": [163, 587], "map_loc": [163, 587], "pickle_modul": [163, 205, 587], "weights_onli": [163, 587], "pickle_load_arg": [163, 587], "facil": [163, 587], "treat": [163, 587, 672], "storag": [163, 587, 683, 689, 712, 715, 735, 738], "thei": [163, 270, 452, 587, 646, 671, 676, 682, 690, 698, 713, 716, 727], "deseri": [163, 587], "were": [163, 325, 378, 587, 696, 729], "fail": [163, 587, 648, 672, 680, 719], "becaus": [163, 214, 219, 269, 310, 348, 587, 648, 715, 732, 738, 740, 741], "doesn": [163, 269, 310, 587, 652, 678, 690, 691, 711, 743], "certain": [163, 231, 587, 737], "howev": [163, 587, 716, 729, 735, 738], "altern": [163, 236, 237, 433, 587], "callabl": [163, 236, 237, 323, 376, 391, 403, 456, 473, 474, 477, 587, 620, 621, 625, 626, 631, 671, 672], "locat": [163, 178, 228, 269, 310, 587, 678, 696, 703, 707, 710, 718, 732, 736, 740, 743], "resid": [163, 587], "tag": [163, 387, 575, 587, 738, 739], "wa": [163, 236, 237, 587, 652, 690, 715, 716, 719, 730, 741], "builtin": [163, 587, 678], "device_id": [163, 587], "either": [163, 185, 237, 321, 374, 587, 694, 698, 718, 728, 731, 732], "final": [163, 208, 215, 228, 350, 587, 653, 690, 696, 727, 729, 732, 736, 741], "alreadi": [163, 183, 254, 268, 270, 297, 309, 587, 652, 673, 685, 705, 708, 712, 721, 741], "right": [163, 265, 307, 321, 374, 587, 646, 647, 648, 710, 716, 738, 740], "fall": [163, 170, 587], "back": [163, 170, 269, 275, 310, 587, 675, 710, 716], "behavior": [163, 587, 646, 652, 653, 654, 682, 692, 735, 739, 741, 743], "wasn": [163, 587], "appear": [163, 587, 646, 704, 710, 712], "ones": [163, 321, 374, 587, 729], "put": [163, 254, 297, 587, 673, 676], "user": [163, 183, 196, 208, 220, 228, 236, 237, 240, 241, 254, 257, 261, 269, 270, 276, 283, 284, 297, 300, 304, 310, 316, 340, 345, 351, 353, 354, 378, 379, 389, 433, 438, 451, 587, 597, 631, 642, 648, 649, 651, 652, 653, 654, 659, 669, 671, 672, 676, 677, 680, 682, 685, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 701, 704, 710, 717, 718, 719, 720, 723, 724, 725, 727, 728, 729, 730, 732, 733, 734, 736, 738, 739, 740, 741, 745], "register_packag": [163, 587], "readlin": [163, 587], "tell": [163, 378, 433, 587, 731], "seek": [163, 587, 735], "o": [163, 452, 587, 671, 686, 695, 713], "pathlik": [163, 587], "metadata": [163, 587], "primit": [163, 587], "unless": [163, 587, 682], "implicitli": [163, 187, 587], "known": [163, 272, 357, 437, 587, 690, 729, 732, 739, 741], "insecur": [163, 587, 712], "possibl": [163, 270, 587, 615, 675, 712, 728, 729, 733, 734, 741], "construct": [163, 252, 255, 256, 259, 267, 272, 274, 275, 277, 295, 298, 299, 302, 378, 383, 387, 451, 572, 574, 575, 587, 634, 646, 653, 654, 673, 678, 729, 741], "malici": [163, 587], "arbitrari": [163, 587, 690, 728], "code": [163, 208, 240, 241, 270, 283, 284, 327, 351, 354, 433, 587, 631, 648, 651, 652, 653, 654, 673, 676, 677, 678, 684, 685, 687, 689, 693, 695, 697, 698, 699, 701, 704, 710, 714, 715, 717, 718, 719, 727, 728, 729, 730, 731, 732, 737, 738, 739, 740], "never": [163, 587, 741], "could": [163, 175, 181, 210, 240, 241, 254, 283, 284, 297, 354, 379, 433, 587, 593, 631, 646, 648, 677, 690, 728, 729, 732, 735, 738, 742], "come": [163, 587, 688, 741], "untrust": [163, 587], "unsaf": [163, 587], "tamper": [163, 587], "trust": [163, 587, 675, 712], "load_state_dict": [163, 587], "ram": [163, 587], "surg": [163, 587], "checkpoint": [163, 387, 575, 587, 641, 692], "By": [163, 208, 236, 237, 318, 371, 587, 653, 654, 689, 692, 703, 704, 707, 729, 730, 735, 741], "decod": [163, 264, 265, 307, 318, 371, 587, 689, 740], "byte": [163, 587], "utf": [163, 268, 309, 587], "unicodedecodeerror": [163, 587], "ascii": [163, 587], "codec": [163, 587], "0x": [163, 587], "incorrect": [163, 587], "extra": [163, 323, 376, 587, 690, 735], "encod": [163, 321, 374, 587, 713, 740], "latin1": [163, 587], "them": [163, 208, 252, 295, 587, 648, 654, 672, 675, 680, 682, 684, 713, 716, 728, 729, 735, 741], "keep": [163, 219, 228, 349, 438, 587, 648, 652, 671, 709, 710, 736], "later": [163, 175, 181, 587, 593, 671, 717, 718, 739], "byte_arrai": [163, 587], "undefin": [163, 228, 349, 587], "filepath": [163, 587, 642, 671], "pt": [163, 587, 641, 686, 692, 714, 730, 732, 734, 735], "onto": [163, 587], "loc": [163, 587], "bytesio": [163, 587], "open": [163, 273, 317, 370, 587, 634, 644, 646, 651, 680, 681, 690, 705, 708, 711, 712, 716, 717, 718, 730], "rb": [163, 587], "buffer": [163, 587], "get_children": [164, 589], "get_named_children": [164, 589], "dowload_hf_model": [164, 589], "repo_id": [164, 589], "cache_dir": [164, 589], "repo_typ": [164, 589], "revis": [164, 589], "download": [164, 254, 297, 589, 673, 675, 686, 715, 721, 736], "hug": [164, 589, 651, 717, 730], "face": [164, 589, 646, 651, 659, 693, 697, 717, 719, 730, 736, 744], "hf": [164, 589, 688, 738, 744], "hub": [164, 589, 651, 679, 683, 701], "load_empty_model": [164, 589, 733], "automodelforcausallm": [164, 589], "get_super_module_by_nam": [164, 589], "module_nam": [164, 203, 205, 215, 216, 217, 218, 220, 221, 222, 223, 225, 227, 350, 577, 589, 642], "father": [164, 208, 589], "update_modul": [164, 589], "load_layer_wise_quantized_model": [164, 589], "load_tensor_from_shard": [164, 589], "shard": [164, 589], "load_tensor": [164, 589], "ipex_mixed_precis": 165, "fakeaffinetensorquantfunct": [166, 611], "affin": [166, 611, 732], "teqlinearfakequ": [166, 611], "orig_lay": [166, 611], "mullinear": [166, 177, 599, 611], "input_scal": [166, 611], "detector": 167, "transformerbasedmodelblockpatterndetector": [167, 597], "pattern_lst": [167, 597], "block_pattern": [167, 597], "detect": [167, 170, 177, 208, 236, 237, 321, 325, 374, 378, 383, 597, 598, 647, 648, 693, 700, 701, 729, 741], "ffn": [167, 219, 597], "trace_and_fuse_sub_graph": 168, "is_qat": 168, "traced_model": [168, 175, 593], "tequant": [169, 613], "absorb_to_lay": [169, 170, 177, 613, 614], "extra_config": [169, 177], "trainabl": [169, 613, 651, 730, 735], "move_input_devic": 170, "auto": [170, 176, 184, 185, 206, 208, 236, 237, 355, 370, 403, 435, 441, 474, 593, 621, 642, 648, 670, 693, 696, 698, 700, 701, 729, 732, 735], "kind": [170, 690], "forward_wrapp": 170, "get_embedding_contigu": 170, "contigu": 170, "is_fused_modul": 170, "_propagate_qconfig_help": 170, "collate_torch_pr": 170, "collate_result": 170, "input2tupl": 170, "append_attr": 170, "fx_model": 170, "fx_white_list": 170, "append": [170, 354, 357, 437, 648, 677, 690, 728], "graphmodul": [170, 648, 734], "dir": [170, 252, 295, 637, 641, 673, 681, 684], "generate_activation_observ": [170, 593], "smooth_quant_en": [170, 593], "observ": [170, 593, 654, 735, 737, 739, 741], "what": [170, 215, 250, 293, 378, 433, 593, 631, 646, 730], "check_cfg_and_qconfig": [170, 593], "op_infos_from_cfg": [170, 593, 597], "output_tensor_ids_op_nam": [170, 593, 597], "paser_cfg": [170, 597], "ops_nam": [170, 597], "get_quantizable_ops_from_cfg": [170, 597], "input_tensor_ids_op_nam": [170, 597], "update_sq_scal": [170, 593], "ipex_config_path": [170, 593], "smoothquant_scale_info": [170, 593], "ipex_config": [170, 593], "auto_copi": 170, "fetch_modul": [170, 614, 630], "op_nam": [170, 233, 236, 237, 368, 450, 593, 597, 614, 630, 642, 643, 653, 690, 729, 739], "simple_infer": [170, 597], "get_example_input": [170, 614], "example_inp": [170, 614], "get_fallback_ord": 170, "confidence_batch": [170, 741], "fallback": [170, 237, 360, 361, 440, 442, 443, 680, 691, 713, 734, 741], "requantize_cfg": 170, "confid": 170, "ordered_op": 170, "get_mse_order_per_fp32": 170, "influenc": [170, 729], "last": [170, 176, 203, 228, 236, 237, 593, 672, 691, 693, 695, 700, 704, 732, 735, 738], "fallback_ord": 170, "get_mse_order_per_int8": 170, "get_torch_vers": 170, "match_datatype_pattern": 170, "calculate_quant_min_max": 170, "unsign": [170, 369, 451, 654, 735], "qmin": 170, "qmax": 170, "get_depth": [170, 597], "depth": [170, 597, 676, 734], "get_dict_at_depth": [170, 597], "target_depth": [170, 597], "nest": [170, 234, 577, 597], "get_element_under_depth": [170, 597], "ops_lst": [170, 597], "get_op_type_by_nam": 170, "quantizable_op": [170, 593, 597], "collect_weight_info": 170, "fc": [170, 237, 729], "_type_": [170, 391, 637], "get_module_input_output": [170, 614], "module_hook_config": [170, 614], "input_func": [170, 614], "output_func": [170, 614], "help": [170, 197, 278, 327, 614, 671, 688, 692, 693, 699, 710, 718, 723, 724, 725, 735, 741, 742], "module_name_list": [170, 614], "fc1": [170, 177, 599, 614], "preprocess": [170, 236, 237, 252, 269, 295, 310, 451, 614, 634, 678, 740], "usag": [170, 184, 185, 187, 251, 294, 321, 327, 354, 374, 410, 452, 577, 614, 626, 630, 653, 673, 678, 679, 693, 701, 712, 718, 723, 724, 725, 727, 731, 735, 740], "input_valu": [170, 614], "output_valu": [170, 614], "total_valu": [170, 614], "get_absorb_lay": [170, 614], "supported_lay": [170, 614], "no_absorb_lay": [170, 614], "allow": [170, 357, 437, 614, 615, 676, 678, 689, 690, 691, 712, 717, 729, 731, 735, 738, 741, 743], "absorpt": [170, 614], "eg": [170, 234, 254, 297, 577, 614, 673, 731], "absorb": [170, 175, 177, 181, 593, 599, 614, 735], "absorbed_1": [170, 614], "xx": [170, 614], "get_block_prefix": [170, 614], "block_list": [170, 614], "block_num": [170, 614], "block_prefix": [170, 614], "get_hidden_st": [170, 614], "calib": [170, 614, 653], "rest": [170, 614, 717, 718, 723, 724, 725], "part": [170, 206, 215, 348, 350, 614, 648, 686, 691, 705, 708, 718, 720, 729, 733, 738, 742], "total_block_kwarg": [170, 614], "total_block_arg": [170, 614], "torchsmoothqu": [175, 593, 738], "q_func": [175, 240, 241, 283, 284, 357, 360, 363, 434, 437, 438, 442, 445, 593, 652, 653, 690, 741], "whose": [175, 181, 210, 349, 387, 575, 593, 684, 738, 741], "reshape_in_channel_to_last": [176, 593], "reshape_scale_as_input": [176, 593], "featur": [176, 236, 237, 252, 253, 265, 269, 295, 296, 307, 310, 593, 647, 651, 669, 672, 674, 676, 690, 691, 692, 693, 697, 698, 701, 710, 712, 716, 729, 730, 736, 740], "reshape_scale_as_weight": [176, 593], "depthwis": [176, 593], "orig": [176, 593], "register_autotun": [176, 593], "quantize_4bit": [177, 614], "quantil": [177, 612, 614, 741], "nf4": [177, 612, 614, 651, 735], "return_int": [177, 599, 614, 735], "fp4": [177, 612, 614, 651, 735], "q_tensor": [177, 614], "qdq_weight_asym": [177, 614], "qdq_weight_sym": [177, 614], "full_rang": [177, 614], "amax": [177, 614], "qdq_weight_actor": [177, 614], "place": [177, 592, 596, 614, 677, 686, 723, 729, 739, 741], "search_clip": [177, 614], "best": [177, 193, 269, 310, 311, 316, 353, 360, 396, 442, 614, 646, 649, 671, 686, 693, 699, 710, 716, 727, 732, 735, 738, 740, 741], "num": [177, 612, 614, 642], "best_clip_ratio": [177, 614], "group_dim": [177, 612, 622, 735], "gptq_perm": 177, "perm": [177, 269, 310, 740], "absorb_lay": [177, 599], "absorb_dict": [177, 599], "absorbed_lay": [177, 599], "fc3": [177, 599], "oom": [177, 599], "teq_quant": [177, 613], "autoround_quant": [177, 598], "batch_siz": [177, 237, 242, 244, 247, 248, 249, 250, 251, 252, 253, 272, 285, 287, 290, 291, 292, 293, 294, 295, 296, 315, 572, 598, 649, 672, 673, 678, 680, 684, 690, 693, 732], "not_use_best_ms": [177, 598], "autoround": 177, "temporarili": [177, 646], "mandatori": [177, 240, 241, 283, 284, 433, 690, 743], "algorithm_registri": 178, "algorithm_typ": 178, "registr": [178, 254, 261, 269, 297, 304, 310, 343], "algorithmschedul": 178, "conf": [178, 183, 193, 237, 240, 241, 270, 283, 284, 327, 334, 335, 337, 338, 339, 340, 345, 357, 360, 363, 367, 379, 389, 433, 434, 437, 438, 442, 445, 449, 452, 631, 648, 649, 651, 654, 669, 676, 683, 684, 690, 691, 692, 712, 714, 715, 728, 732, 733, 734, 735, 737, 738, 741], "control": [178, 236, 237, 648, 690, 716, 729, 741], "phase": [178, 649, 690, 729, 732, 734, 741], "fastbiascorrect": [179, 182], "fast_bias_correct": [180, 236, 237, 370, 732], "weight_correct": [180, 236, 237, 370, 732], "weightcorrect": 182, "1e": [182, 738, 743], "05": [182, 237, 325, 378, 405, 689, 738, 744], "evalu": [183, 185, 193, 210, 236, 240, 241, 252, 270, 283, 284, 295, 311, 318, 321, 322, 323, 325, 327, 371, 374, 375, 376, 378, 379, 389, 403, 433, 631, 634, 649, 652, 653, 671, 673, 676, 677, 684, 685, 688, 689, 690, 691, 693, 699, 701, 704, 710, 727, 729, 732, 737, 738, 739, 741, 743], "set_env_var": [183, 270], "env_var": [183, 270], "overwrite_exist": [183, 270], "env": [183, 270, 681, 723, 724, 725], "set_all_env_var": [183, 270], "physic": [183, 270, 646, 669, 718], "core": [183, 236, 237, 270, 395, 647, 669, 687, 703, 707, 718, 744], "get_architectur": [183, 270], "architectur": [183, 270, 328, 331, 651, 669, 676, 690, 717, 729, 730, 735, 742], "get_threads_per_cor": [183, 270], "thread": [183, 236, 237, 270, 427, 432, 615, 672, 720], "get_thread": [183, 270], "get_physical_id": [183, 270], "socket": [183, 270, 642, 718, 720, 744], "get_core_id": [183, 270], "get_bounded_thread": [183, 270], "core_id": [183, 270], "bind": [183, 270], "run_inst": 183, "b_dataload": [183, 236, 237, 669, 690], "b_func": [183, 669], "benchmarkconfig": [183, 236, 237, 669, 675, 690], "goal": [183, 311, 316, 340, 345, 353, 379, 433, 653, 672, 728, 732, 741], "prefer": [183, 316, 353, 433, 729, 735], "space": [183, 200, 201, 216, 217, 222, 223, 236, 237, 240, 241, 283, 284, 316, 323, 328, 331, 332, 333, 353, 357, 360, 367, 376, 379, 433, 437, 442, 449, 646, 647, 649, 652, 653, 654, 671, 729, 732, 738, 743], "etc": [183, 193, 268, 309, 311, 316, 323, 340, 345, 353, 376, 379, 433, 641, 651, 676, 685, 712, 716, 729, 737, 741], "generate_prefix": 183, "core_list": 183, "command": [183, 270, 631, 675, 678, 693, 695, 698, 703, 707, 711, 712, 714, 715, 716, 718], "numactl": [183, 681, 696, 704], "call_on": 183, "cmd": 183, "log_fil": [183, 426, 431], "window": [183, 669, 686, 710, 711], "config_inst": 183, "raw_cmd": 183, "multi": [183, 206, 208, 219, 321, 374, 378, 433, 649, 672, 673, 685, 690, 727, 729, 732, 741], "trigger": [183, 215, 350], "summary_benchmark": 183, "summari": [183, 631, 675, 705, 708, 739, 744], "profil": [183, 237, 370], "benchmark_with_raw_cmd": 183, "fit_with_raw_cmd": 183, "cores_per_inst": [183, 236, 237, 669, 690, 731], "num_of_inst": [183, 236, 237, 669, 690, 731], "fit": [183, 210, 236, 237, 357, 379, 433, 437, 452, 631, 648, 651, 669, 672, 673, 675, 678, 683, 684, 689, 690, 691, 692, 712, 713, 729, 732, 733, 734, 735], "pb": [183, 236, 237, 379, 387, 433, 575, 669, 678, 683, 690, 692, 712, 715, 723, 739, 744], "eval_dataload": [183, 236, 237, 240, 241, 283, 284, 354, 357, 360, 363, 379, 433, 434, 437, 438, 442, 445, 631, 669, 684, 689, 690, 712, 732, 733, 741], "register_config": [184, 671], "framework_nam": [184, 671], "algo_nam": [184, 671], "prioriti": [184, 626, 671, 721], "examplealgorithm": 184, "examplealgorithmconfig": 184, "larger": [184, 626, 653, 729, 735, 738], "higher": [184, 236, 237, 240, 241, 283, 284, 332, 379, 433, 626, 631, 648, 675, 676, 680, 689, 713, 729, 732, 737], "tri": [184, 237, 671, 741], "stage": [184, 356, 361, 434, 436, 443, 676, 729, 739, 741], "baseconfig": [184, 185, 187, 471, 473, 477, 625, 671], "white_list": [184, 405, 471, 475, 622], "op_name_or_module_typ": [184, 405, 471, 475, 622], "default_white_list": [184, 405, 471, 475, 622], "composableconfig": [184, 671], "register_supported_configs_for_fwk": 184, "fwk_name": [184, 671], "deprec": [185, 671, 705, 708, 736, 740], "eval_acc": 185, "eval_perf": 185, "mold": 185, "user_eval_fns1": 185, "user_eval_fns2": 185, "eval_fn": [185, 403, 474, 621], "user_eval_fns3": 185, "user_eval_fns4": 185, "sequentialsampl": [185, 250, 293], "config_sourc": 185, "_configset": 185, "tuningconfig": [185, 403, 474, 621], "config_set": [185, 403], "base_config": [185, 471, 473, 475, 477, 625], "default_sampl": 185, "tolerable_loss": [185, 236, 237, 690, 741], "max_trial": [185, 236, 237, 690, 741], "pipelin": [185, 193, 311, 328, 329, 354, 647, 677, 690, 728], "tune_config": [185, 403, 474, 621, 653], "config1": 185, "config2": 185, "stop": [185, 236, 237, 690, 741, 742, 743], "met": [185, 649, 682, 732, 739], "trial": [185, 741], "reach": [185, 210, 226, 236, 237, 352, 647, 672, 712, 729, 741], "metric": [185, 193, 236, 237, 240, 241, 273, 283, 284, 311, 316, 317, 332, 340, 345, 353, 354, 370, 379, 433, 631, 634, 649, 652, 653, 673, 675, 678, 690, 691, 712, 732, 737, 738, 739, 741, 742, 743, 744], "toler": [185, 715], "relative_loss": 185, "fp32_baselin": [185, 634, 652], "eval_result_of_q_model": 185, "paramlevel": 187, "enumer": [187, 332, 631, 652, 676, 677, 678, 690, 728, 729, 739], "deriv": [187, 193, 203, 212, 213, 214, 220, 221, 222, 223, 224, 225, 226, 227, 311, 348, 350, 352], "tuningparam": 187, "default_v": 187, "tunable_typ": 187, "op_level": 187, "tunabl": 187, "fakealgoconfig": 187, "params_list": [187, 403], "simpl": [187, 269, 310, 686, 690, 729, 737, 738, 741], "give": [187, 653, 710, 741], "enough": [187, 732], "simple_attr": 187, "complex": [187, 671, 690, 691, 729], "explicitli": [187, 236, 237, 684, 729], "complex_attr": 187, "model_attr": 187, "model_level": 187, "explain": [187, 654, 675, 738], "logger": [189, 317, 346, 370, 577, 597, 632, 635, 642], "tuninglogg": 190, "unifi": [190, 316, 353, 652, 653, 654, 672, 684, 685, 689, 690, 692], "assist": [190, 736], "team": [190, 323, 376, 646, 734], "retriev": [190, 250, 293, 729], "save_config_map": 191, "config_map": 191, "qconfig_file_path": 191, "load_config_map": 191, "config_name_map": 191, "reload": [191, 694, 711, 713, 716], "configregistri": 191, "get_all_config": 191, "dump_elapsed_tim": [192, 577, 609, 642, 652], "customized_msg": [192, 577, 609, 642], "elaps": [192, 577, 609, 642], "set_random_se": [192, 236, 237, 642], "set_workspac": [192, 236, 237, 642], "workspac": [192, 236, 237, 641, 642, 692, 718, 723, 724, 725], "set_resume_from": [192, 236, 237, 642], "resume_from": [192, 236, 237, 642], "set_tensorboard": [192, 236, 237, 642], "tensorboard": [192, 236, 237, 634, 642, 652, 690, 713], "compon": [193, 311, 317, 354, 370, 648, 671, 675, 678, 686, 687, 693, 710, 718, 728, 729], "quantizationawaretrainingcallback": 193, "pruningcallback": 193, "distillationcallback": 193, "basecallback": 193, "design": [193, 251, 274, 279, 294, 378, 438, 649, 651, 690, 698, 701, 729, 732, 742], "mainli": [193, 226, 279, 352, 651, 690, 729, 732], "prune": [193, 202, 203, 205, 206, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 236, 237, 279, 280, 317, 334, 335, 337, 338, 339, 343, 345, 346, 348, 349, 350, 352, 354, 370, 642, 651, 678, 679, 682, 683, 685, 728, 730, 742, 743], "distil": [193, 202, 236, 237, 271, 278, 279, 317, 370, 651, 679, 683, 685, 728, 742, 743], "In": [193, 212, 213, 214, 219, 220, 221, 225, 237, 251, 279, 294, 321, 348, 350, 374, 389, 615, 646, 648, 649, 651, 652, 653, 672, 673, 675, 676, 677, 678, 689, 690, 700, 703, 704, 707, 713, 714, 715, 716, 723, 724, 725, 727, 728, 729, 732, 734, 735, 737, 738, 739, 740, 741, 742], "adaptor": [193, 236, 237, 369, 451, 460, 461, 634, 651, 654, 685, 733, 734, 736, 738, 739, 742], "knowledg": [193, 194, 236, 237, 271, 311, 677, 679, 683, 685, 690, 692, 743], "transfer": [193, 259, 302, 311, 673, 676, 677, 690, 738], "teacher": [193, 236, 237, 311, 676, 677, 690, 744], "student": [193, 197, 236, 237, 252, 278, 295, 311, 673, 676, 677, 744], "distillation_conf": [193, 233, 311], "_epoch_ran": [193, 311], "integ": [193, 214, 215, 236, 237, 311, 321, 325, 332, 348, 350, 374, 378, 452, 652, 654, 670, 732, 735, 738, 741], "much": [193, 203, 236, 237, 269, 310, 311, 676, 704, 738, 740], "epoch": [193, 216, 217, 222, 311, 350, 631, 672, 676, 677, 678, 690, 728, 729, 743], "ran": [193, 311], "eval_frequ": [193, 311], "frequenc": [193, 215, 236, 237, 311, 350, 690, 729, 743], "term": [193, 216, 217, 222, 223, 225, 311, 647, 670, 676, 687, 689, 727, 728, 741], "best_scor": [193, 311], "best_model": [193, 311, 641, 735], "found": [193, 311, 651, 671, 676, 688, 691, 698, 715, 719, 738, 741, 744], "critet": [194, 271], "tensorflowcrossentropyloss": [194, 271], "pytorchcrossentropyloss": [194, 271], "tensorflowsparsecategoricalcrossentropi": 194, "tensorflowknowledgedistillationloss": [194, 271], "pytorchknowledgedistillationloss": [194, 271, 690], "pytorchintermediatelayersknowledgedistillationloss": [194, 271], "tensorflowcriterion": [194, 271], "pytorchcriterion": [194, 271], "criterion_registri": [194, 271], "criterion_typ": [194, 271], "registry_criterion": [194, 271], "param_dict": [194, 196, 271, 276], "crossentropyloss": [194, 236, 237, 676, 690], "sparsecategoricalcrossentropyloss": 194, "knowledgedistillationframework": [194, 271], "student_model": [194, 237, 271, 690], "teacher_model": [194, 236, 237, 271, 676, 677, 690], "knowledgedistillationloss": [194, 271, 690, 743], "temperatur": [194, 236, 237, 271, 690, 743], "loss_typ": [194, 200, 236, 237, 271, 690, 743], "ce": [194, 236, 237, 271, 690, 743], "loss_weight": [194, 236, 237, 271, 690, 743], "pytorchknowledgedistillationlosswrapp": [194, 271], "tensorflowknowledgedistillationlosswrapp": 194, "tensorflowknowledgedistillationlossextern": [194, 271], "intermediatelayersknowledgedistillationloss": [194, 271], "layer_map": [194, 237, 271, 676], "add_origin_loss": [194, 237, 271], "pytorchintermediatelayersknowledgedistillationlosswrapp": [194, 271], "selfknowledgedistillationloss": [194, 271], "selfknowledg": [194, 271], "pytorchselfknowledgedistillationloss": 194, "pytorchselfknowledgedistillationlosswrapp": 194, "multipl": [196, 206, 238, 239, 243, 244, 252, 253, 255, 256, 257, 258, 259, 263, 266, 269, 276, 281, 282, 286, 287, 289, 295, 296, 298, 299, 300, 301, 302, 306, 308, 310, 326, 379, 380, 381, 383, 389, 615, 669, 673, 680, 690, 717, 720, 728, 729, 737, 738, 741], "tensorflowoptim": [196, 276], "pytorchoptim": [196, 276], "optimizer_registri": [196, 276], "optimizer_typ": [196, 276], "cross": [196, 276, 325, 378, 684, 741], "tensorflowsgd": [196, 276], "tensorflowadamw": [196, 276], "tensorflow_addon": [196, 276], "tensorflowadam": 196, "adam": [196, 743], "pytorchsgd": [196, 276], "record_output": [197, 278], "output_process": [197, 278], "get_activ": [197, 278], "hyper": [198, 743], "sa_optim": [198, 202], "simul": [199, 654], "anneal": 199, "register_search": 200, "searcher": [200, 208, 237, 333], "registri": [200, 201, 203, 210, 215, 224, 225, 226, 227, 348, 350, 352, 649], "sure": [200, 210, 215, 224, 226, 348, 350, 352, 669, 712], "search_spac": [200, 233, 237, 328, 331, 332, 333], "gridsearch": [200, 333], "grid": [200, 237, 333, 649, 729], "whole": [200, 333, 654, 712, 732, 744], "exhaust": [200, 237, 317, 333, 359, 370, 441, 731], "randomsearch": [200, 333], "randomli": [200, 269, 310, 333, 357, 437, 649, 738, 740, 741], "bayesianoptimizationsearch": [200, 333], "bayesian": [200, 237, 317, 333, 359, 370, 441, 649, 729, 731], "xgbsearcher": 200, "higher_is_bett": [200, 236, 237, 378, 433, 741, 743], "reg": [200, 202, 205, 216, 217, 222, 223, 237], "min_train_sampl": [200, 237], "10": [200, 236, 237, 254, 297, 357, 437, 651, 669, 673, 680, 686, 690, 712, 713, 729, 731, 740, 741, 744], "xgboost": [200, 729], "searchspac": 201, "factori": [201, 385, 413, 415, 420, 423, 425, 430, 576], "actual": [201, 325, 378, 678], "interv": [201, 221, 729], "continu": [201, 213, 321, 348, 374, 649, 688, 690, 711, 729, 742], "learning_r": [201, 236, 237, 690, 731, 743], "001": [201, 254, 297, 673, 678, 738, 743], "num_train_epoch": [201, 690, 729], "20": [201, 269, 310, 715, 718, 723, 724, 725, 729, 740, 743, 744], "register_searchspac": 201, "pruner": [201, 202, 317, 334, 335, 336, 337, 338, 340, 345, 346, 348, 351, 370, 690, 729, 743], "basesearchspac": 201, "discretesearchspac": 201, "continuoussearchspac": 201, "hpo": [202, 240, 283, 729], "model_slim": [202, 205, 219], "auto_slim": [202, 205, 207], "pattern_analyz": [202, 205, 207], "weight_slim": [202, 205, 207, 219], "mha": [202, 205, 211, 218, 729], "ninm": [202, 205, 211], "nxm": [202, 205, 211, 221, 236, 237, 344, 348, 729], "basic": [202, 205, 208, 210, 218, 236, 237, 268, 309, 317, 328, 348, 359, 363, 366, 370, 441, 445, 448, 631, 685, 686, 690, 712, 731, 737], "block_mask": [202, 203, 205, 218], "pattern_lock": [202, 205, 218, 236, 237, 317, 336, 370], "retrain_fre": [202, 203, 205, 218, 729], "wanda": [202, 205], "criteria": [202, 205, 236, 237, 316, 340, 345, 348, 350, 353, 648, 710, 738], "tf_criteria": [202, 205], "callback": [202, 340, 345, 631, 634, 648, 690, 728, 729, 732], "register_criterion": [203, 227], "get_criterion": 203, "pruningcriterion": [203, 227], "about": [203, 227, 642, 646, 671, 672, 690, 715, 716, 729, 734, 741, 742, 744], "score": [203, 210, 215, 219, 227, 236, 237, 318, 319, 321, 322, 323, 325, 350, 371, 372, 374, 375, 376, 378, 440, 634, 648, 689, 713, 727, 729, 737, 741], "magnitudecriterion": [203, 227], "magnitud": [203, 227, 236, 237, 317, 325, 336, 370, 378, 685, 729], "criterion_class": [203, 227], "determin": [203, 210, 215, 227, 236, 237, 636, 646, 648, 670, 729, 732], "gradientcriterion": 203, "absolut": [203, 236, 237, 325, 378, 689, 690, 729, 732, 741], "snipcriterion": 203, "snip": [203, 236, 237, 350, 685, 729, 744], "product": [203, 651, 685, 691, 693, 694, 710, 716, 730, 732, 737, 741], "shot": [203, 222, 223, 226, 279, 350, 352, 649, 685, 690, 729, 730, 735], "connect": [203, 350, 710, 712, 719, 729, 737], "sensit": [203, 334, 350, 685, 729], "1810": [203, 350], "02340": [203, 350], "snipmomentumcriterion": 203, "snip_momentum": [203, 236, 237, 690, 729], "preserv": [203, 670, 729, 735], "beta": 203, "blockmaskcriterion": 203, "retrainfreecriterion": 203, "return_reorder_indic": 204, "6": [204, 236, 237, 682, 732, 738, 741, 744], "rel": [204, 236, 237, 389, 690, 713, 731, 741, 743, 744], "remain": [204, 698], "unchang": 204, "neg": 204, "flip": [204, 265, 269, 307, 310, 740], "initial_metr": 204, "sparsity_ratio": [204, 230], "prune_n": [204, 230], "prune_m": [204, 230], "pow_of_var_regrow": 204, "max_cycle_tim": 204, "without_same_sign": 204, "update_threshold": 204, "power": [204, 676, 690, 704, 730], "cycl": [204, 649], "paper": [204, 230, 676, 729, 735, 738], "2310": 204, "08915": 204, "pickle_protocol": 205, "_use_new_zipfile_seri": 205, "prepare_prun": [205, 729], "loss_func": [205, 224], "assertionerror": [205, 211, 218, 228, 348, 349, 350, 379], "slim": [206, 207, 208, 321, 374, 385, 387, 575, 576, 692, 729], "round_multipli": 206, "spars": [206, 220, 350, 673, 730], "model_slim_ffn2": 206, "perman": [206, 646, 729], "obtain": [206, 208, 217, 222, 225, 228, 349, 615, 648, 653, 718, 729, 737, 738, 741], "acceler": [206, 626, 676, 690, 693, 701, 710, 713, 717, 729, 730, 734, 735, 738, 741], "directli": [206, 236, 237, 251, 294, 321, 325, 349, 374, 378, 689, 690, 697, 729, 731, 732, 739], "sprase": 206, "model_slim_mha": 206, "parse_auto_slim_config": [206, 729], "ffn2_sparsiti": [206, 729], "mha_spars": [206, 729], "generate_ffn2_pruning_config": 206, "consecut": [206, 208, 209, 729], "generate_mha_pruning_config": 206, "head": [206, 208, 212, 219, 228, 729, 744], "get_attribut": 208, "get_common_modul": 208, "layer2": [208, 690, 729, 732], "nearest": [208, 269, 310, 405, 612, 622, 735, 740], "print_iter": 208, "recipesearch": 208, "root": [208, 252, 253, 254, 257, 295, 296, 297, 300, 325, 378, 673, 678, 689, 690, 743], "levelwis": 208, "wai": [208, 253, 254, 257, 296, 297, 300, 387, 626, 649, 654, 672, 673, 675, 689, 690, 693, 696, 711, 712, 716, 717, 718, 728, 729, 732, 735, 738, 741, 743], "bert": [208, 237, 248, 251, 252, 269, 291, 294, 295, 310, 651, 673, 676, 689, 691, 698, 721, 724, 725, 729, 740, 744], "recipe_sampl": 208, "bertattent": 208, "dens": [208, 226, 236, 237, 352, 713, 729, 744], "searching_result": 208, "jitbasicsearch": 208, "placeholder_shap": 208, "placeholder_dtyp": 208, "jit": [208, 236, 693, 695, 700, 738, 739], "script": [208, 318, 319, 322, 323, 371, 372, 375, 376, 615, 647, 678, 685, 693, 697, 700, 701, 704, 721, 723, 730], "static_graph": 208, "flatten_static_graph": 208, "target_lay": 208, "linear2linearsearch": 208, "target_op_lut": 208, "lookup": 208, "tabl": [208, 219, 642, 654, 675, 680, 713, 715, 744], "current_pattern": 208, "statu": [208, 639, 646, 672, 720, 723, 724, 725, 727, 729], "selfmhasearch": 208, "classifierheadsearch": 208, "classifi": [208, 228, 252, 295, 325, 378, 673, 676], "classifierheadsearchertf": 208, "squeezer": 209, "postcompressionutil": 209, "librari": [209, 273, 317, 370, 427, 644, 651, 686, 690, 691, 695, 704, 710, 730, 732], "relat": [209, 225, 311, 321, 340, 345, 348, 374, 451, 634, 654, 693, 717, 718, 729, 743], "linearcompress": 209, "root_linear": 209, "target_linear": 209, "while": [209, 220, 228, 350, 357, 437, 615, 652, 653, 673, 679, 685, 691, 693, 698, 710, 712, 729, 731, 732, 735, 738], "hidden": [209, 214, 348, 652], "layer_1": 209, "act_fn": 209, "layer_2": 209, "linearcompressioniter": 209, "linear_pattern": 209, "register_pattern": [210, 348], "basepattern": [210, 212, 214], "unit": [210, 348, 647, 718, 729], "4x1": [210, 236, 237, 344, 690, 729, 744], "is_glob": [210, 348], "local": [210, 236, 237, 348, 577, 615, 642, 671, 703, 707, 712, 719, 720, 729, 737], "keep_mask_lay": 210, "invalid_lay": 210, "max_sparsity_ratio_per_op": [210, 215, 233, 236, 237, 690, 729], "sparsiti": [210, 212, 213, 215, 216, 217, 220, 222, 223, 226, 228, 236, 237, 350, 352, 642, 651, 673, 685, 690, 742, 744], "min_sparsity_ratio_per_op": [210, 233, 236, 237, 690, 729], "target_spars": [210, 233, 236, 237, 690, 729, 731, 743], "pytorchbasepattern": [210, 225], "kerasbasepattern": 210, "get_pattern": [211, 348], "patternmha": 212, "doc": [212, 213, 236, 237, 348, 366, 367, 378, 433, 448, 449, 452, 577, 642, 689, 690, 705, 708, 716], "md": [212, 213, 236, 237, 348, 378, 433], "n": [212, 213, 236, 237, 253, 269, 296, 310, 319, 348, 372, 452, 654, 671, 673, 675, 676, 718, 729, 732, 738, 740], "pytorchpatternninm": 213, "out": [213, 236, 237, 252, 253, 254, 295, 296, 297, 316, 348, 353, 592, 596, 647, 648, 651, 673, 693, 698, 703, 704, 705, 707, 708, 710, 716, 729, 731, 732, 735], "pytorchpatternnxm": 214, "kept": [214, 348], "block_siz": [214, 348, 622, 735], "height": [214, 265, 269, 307, 310, 348, 678, 740, 743], "width": [214, 265, 269, 307, 310, 348, 670, 678, 729, 732, 740, 743], "vertic": [214, 269, 310, 348, 740], "keraspatternnxm": 214, "register_prun": [215, 224, 350], "baseprun": [215, 220, 222, 224], "current_sparsity_ratio": [215, 350], "global_step": [215, 350], "start_step": [215, 233, 236, 237, 350, 690, 729, 731], "end_step": [215, 233, 236, 237, 350, 690, 729, 731], "pruning_frequ": [215, 233, 236, 237, 690, 729], "target_sparsity_ratio": [215, 350], "show": [215, 642, 646, 676, 678, 690, 696, 711, 712, 713, 715, 718, 723, 724, 725, 738, 741, 742], "pytorchbaseprun": [215, 223], "kerasbaseprun": 215, "pytorchbasicprun": 216, "arrang": [216, 217, 222, 223, 253, 254, 257, 296, 297, 300, 673, 729], "proce": [216, 217, 222, 223], "regul": [216, 217, 222, 223], "kerasbasicprun": 216, "pytorchblockmaskprun": 217, "grad": [217, 222], "parse_valid_pruner_typ": 218, "get_prun": [218, 350], "pythonmultiheadattentionprun": 219, "mha_modul": 219, "partial": [219, 729, 732], "qkv": 219, "feedward": 219, "simultan": [219, 693, 717, 728, 731], "qkv_name": 219, "query_layer_nam": 219, "key_layer_nam": 219, "value_layer_nam": 219, "ffn_name": 219, "attention_ffn_nam": 219, "mha_nam": 219, "qkv_modul": 219, "ffn_modul": 219, "mha_compress": 219, "mhacompress": 219, "linear_lay": 219, "independ": [219, 427, 432, 654], "4x": [219, 649, 732], "subsequ": [219, 653, 693, 710], "head_mask": 219, "mha_head_s": 219, "similar": [219, 233, 690, 714, 731, 738, 741, 743], "mha_scor": 219, "lock": [220, 338, 339, 685, 728, 729], "pytorchpatternlockprun": 220, "parent": [220, 221, 226, 344, 350, 352, 739], "pytorchprogressiveprun": 221, "basicprun": [221, 224], "interpol": [221, 269, 310, 689, 729, 740], "fine": [221, 252, 295, 671, 673, 696, 729, 730, 732], "grain": [221, 729, 730, 741], "improv": [221, 615, 647, 670, 671, 690, 693, 710, 711, 713, 729, 730, 732, 734, 735, 741, 742, 744], "ad": [221, 252, 295, 318, 357, 371, 397, 437, 653, 654, 675, 691, 693, 698, 701, 705, 708, 718, 729, 735, 739], "retrain": [222, 677], "pytorchretrainfreeprun": 222, "pruner_class": [222, 223], "fast": [222, 236, 237, 651, 729, 730, 735], "retrainfreeprun": [222, 224], "effect": [222, 651, 652, 729, 730], "2204": 222, "09656": 222, "sparsegptprun": [223, 224], "most": [223, 236, 237, 325, 378, 675, 690, 691, 729, 732, 735, 738, 741, 744], "sparsegpt": [223, 224, 729], "massiv": [223, 729], "One": [223, 654, 671, 673, 678, 685, 715, 729, 730, 741], "2301": [223, 729], "00774": [223, 729], "opt": [224, 651, 688, 698, 729, 738, 741, 744], "least": [224, 351, 647, 690, 729, 741], "templat": [224, 351, 690, 729], "tree": [224, 351, 367, 449, 718], "nlp": [224, 236, 237, 351, 698, 714, 729, 732], "huggingface_model": [224, 351, 714], "classif": [224, 252, 269, 295, 310, 325, 351, 378, 676, 680, 689, 699, 713, 721, 724, 725, 729, 730], "pytorch_prun": [224, 317, 370], "eager": [224, 351, 432, 678, 685, 732, 734, 739], "config_file_path": [224, 351], "pruner_info": [224, 351], "pruning_class": 224, "avail": [224, 236, 237, 383, 655, 657, 661, 664, 667, 671, 679, 681, 683, 685, 703, 707, 712, 717, 718, 719, 723, 724, 725, 729, 741, 744], "regular": [225, 318, 349, 371], "register_reg": 225, "regulariz": 225, "get_reg_typ": 225, "get_reg": 225, "basereg": 225, "grouplasso": 225, "coeff": 225, "lasso": [225, 335, 685, 729], "reg_term": 225, "register_schedul": [226, 352], "get_schedul": [226, 352], "pruningschedul": 226, "gradual": [226, 352, 729], "oneshotschedul": [226, 352], "iterativeschedul": [226, 352], "get_tf_criterion": 227, "get_sparsity_ratio": 228, "elementwise_over_matmul_gemm_conv": 228, "elementwise_over_al": 228, "blockwise_over_matmul_gemm_conv": 228, "get_sparsity_ratio_tf": 228, "check_config": [228, 349], "prune_config": [228, 349], "everyth": [228, 349, 698], "reset_none_to_default": 228, "update_param": 228, "process_weight_config": 228, "global_config": [228, 334, 335, 337, 338, 339], "local_config": [228, 236, 237, 334, 335, 337, 338, 339], "default_config": 228, "pruners_info": 228, "process_yaml_config": 228, "check_key_valid": 228, "template_config": 228, "user_config": 228, "process_and_check_config": [228, 349], "process_config": [228, 349], "parse_last_linear": 228, "often": [228, 672, 676, 715, 728, 729], "might": [228, 648, 671, 712, 741], "caus": [228, 653, 672, 694, 713, 715, 729, 735], "drop": [228, 321, 349, 374, 647, 690, 691, 704, 729, 735, 738, 744], "parse_last_linear_tf": 228, "parse_to_prun": [228, 349], "parse_to_prune_tf": 228, "generate_pruner_config": 228, "dotdict": [228, 233, 237, 389, 642], "get_lay": 228, "collect_layer_input": 228, "layer_idx": 228, "layer_input": 228, "previou": [228, 653, 654, 690, 729, 736, 738, 739, 741, 742, 744], "prune_wanda": 230, "use_vari": 230, "low_mem_usag": 230, "dsnot": 230, "sij": 230, "wij": 230, "xj": 230, "2306": [230, 735], "11695": 230, "recurs": [231, 642], "wrappedgpt": 232, "layer_id": 232, "gpt": [232, 651, 688, 714, 729, 738, 744], "prunerv2": 233, "pruning_typ": [233, 236, 237, 690, 729], "pruning_scop": [233, 236, 237, 690, 729], "sparsity_decay_typ": [233, 236, 237, 690, 729], "pruning_op_typ": [233, 236, 237, 690, 729], "reg_typ": 233, "criterion_reduce_typ": 233, "resume_from_pruned_checkpoint": 233, "cfg_fname": 233, "parser": 233, "quantization_conf": 233, "pruning_conf": 233, "graph_optimization_conf": [233, 316], "mixedprecision_conf": 233, "benchmark_conf": 233, "nasconfig": [233, 237, 329, 331, 649], "approach": [233, 236, 237, 328, 329, 331, 648, 649, 651, 670, 673, 676, 685, 690, 698, 710, 713, 721, 723, 724, 725, 729, 730, 731, 733, 735, 741, 743], "search_algorithm": [233, 237, 317, 330, 370, 649], "na": [233, 237, 317, 370, 383, 685, 744], "procedur": [233, 649, 729, 741], "defaultconf": 233, "notat": [233, 234, 237, 642], "deep_get": [234, 389, 577], "dot": [234, 577, 691, 732], "person": [234, 577, 646, 730], "john": [234, 577], "deep_set": [234, 389], "sex": [234, 646], "male": 234, "pythonic_config": 235, "random_se": [236, 237, 357, 437, 690, 743], "1978": [236, 237], "default_workspac": [236, 237], "directori": [236, 237, 253, 254, 296, 297, 387, 575, 577, 637, 639, 641, 642, 673, 678, 681, 703, 705, 707, 708, 714, 716, 739], "histori": [236, 237, 641, 642, 710, 714, 741], "nc_workspac": [236, 237, 713, 714], "datetim": [236, 237], "now": [236, 237, 269, 310, 648, 649, 654, 673, 678, 701, 731, 740, 741], "strftime": [236, 237], "d_": [236, 237], "resum": [236, 237, 240, 241, 283, 284, 363, 434, 437, 438, 442, 445], "flag": [236, 237, 319, 372, 675], "visual": [236, 237, 651, 701, 710, 737, 739, 741, 742], "displai": [236, 237, 366, 367, 448, 449, 577, 642, 710, 713], "2022": [236, 237, 651, 687, 729, 735, 738, 744], "workspace_path": [236, 237], "accuracycriterion": [236, 237, 690, 741], "accept": [236, 237, 452, 646, 669, 671, 672, 712, 735], "accuracy_criterion": [236, 237, 389, 690, 714, 727, 731, 741, 743], "warmup": [236, 237, 669, 690, 731], "inter_num_of_thread": [236, 237, 427, 432, 690, 731], "intra_num_of_thread": [236, 237, 427, 432, 690, 731], "benchmark": [236, 237, 272, 317, 354, 370, 389, 642, 651, 659, 692, 693, 697, 701, 704, 710, 713, 741, 742, 743, 744], "onnxrt_trt_ep": [236, 237, 691, 732], "onnxrt_cuda_ep": [236, 237, 691, 732], "inter": [236, 237], "intra": [236, 237], "quantizationconfig": 236, "post_training_static_qu": [236, 673, 690, 731, 741], "calibration_sampling_s": [236, 237, 690, 715], "op_type_dict": [236, 237, 654, 731, 732, 735, 741], "op_name_dict": [236, 237, 675, 690, 713, 715, 732, 741], "strategy_kwarg": [236, 237, 737, 741], "timeout": [236, 237, 690, 731, 741, 743], "quant_level": [236, 237, 713, 735, 738, 741], "posttrainingquantconfig": [236, 237, 433, 648, 651, 654, 672, 675, 680, 683, 689, 690, 692, 712, 713, 714, 715, 732, 733, 734, 735, 737, 738, 741], "quantizationawaretrainingconfig": [236, 237, 631, 648, 677, 680, 690, 732, 734, 741], "cv": [236, 237, 729], "object_detect": [236, 237, 321, 374], "recommendation_system": [236, 237], "overrid": [236, 237, 642, 671], "quantiztaion": [236, 237], "smooth_quant_arg": [236, 237, 732, 738], "gemm_to_matmul": [236, 237, 732], "graph_optimization_level": [236, 237, 731, 732], "disable_al": [236, 237, 731], "enable_bas": [236, 237], "enable_extend": [236, 237], "enable_al": [236, 237], "first_conv_or_matmul_quant": [236, 237, 732], "last_conv_or_matmul_quant": [236, 237, 732], "pre_post_process_quant": [236, 237, 732], "postprocess": [236, 237, 263, 266, 269, 273, 310, 317, 370, 378, 433, 634, 652, 690, 739, 740], "dedic": [236, 237], "quant_format": [236, 237, 315, 680, 713], "constraint": [236, 237, 316, 353, 690, 729, 737, 741, 743], "conv1": [236, 237, 732, 743], "tuning_strategi": [236, 237], "guarante": [236, 237, 690], "models": [236, 237, 389, 690, 727, 731], "footprint": [236, 237, 316, 340, 345, 353, 389, 677, 690, 727, 729, 731, 733], "earli": [236, 237, 690, 732, 741, 743], "exit": [236, 237, 356, 434, 436, 598, 690, 718, 723, 724, 725, 743], "excluded_precis": [236, 237, 734], "exclud": [236, 237, 652, 670, 734], "conserv": [236, 237, 370, 441], "use_distributed_tun": 236, "weightpruningconfig": [236, 237, 690, 728, 729], "pruning_config": [236, 237, 690, 729], "98": [236, 237, 690, 729, 731, 744], "exp": [236, 237, 690, 729], "link": [236, 237, 252, 295, 378, 404, 433, 670, 673, 680, 703, 707, 710, 735, 744], "90": [236, 237, 733, 743, 744], "magnitude_progress": [236, 237], "snip_progress": [236, 237], "snip_momentum_progress": [236, 237], "feasibl": [236, 237], "situat": [236, 237, 678, 729], "unstructur": [236, 237, 344, 685, 729, 744], "8x1": [236, 237], "channelx1": [236, 237, 729], "1xchannel": [236, 237, 729], "itrex": [236, 237, 738], "start": [236, 237, 269, 310, 321, 374, 438, 686, 715, 730, 740, 741, 742, 745], "togeth": [236, 237, 269, 310, 676, 686, 697, 730, 739, 740], "sort": [236, 237, 360, 397, 442, 675, 713, 735, 741], "sinc": [236, 237, 316, 318, 340, 345, 353, 371, 676, 680, 686, 689, 704, 710, 715, 728, 735, 736], "lead": [236, 237, 671, 676, 690, 691, 715, 729, 735, 738], "increas": [236, 237, 397, 674, 685, 693, 710, 715, 735, 741], "cube": [236, 237, 729], "update_config": [236, 237], "knowledgedistillationlossconfig": [236, 237, 676, 677, 690, 728], "hyperparamet": [236, 237, 366, 737, 738, 741], "entropi": [236, 237, 670, 741], "groundtruth": [236, 237, 321, 374], "label": [236, 237, 240, 241, 252, 254, 255, 256, 257, 260, 265, 269, 274, 283, 284, 295, 297, 298, 299, 300, 303, 307, 310, 318, 320, 325, 371, 373, 378, 379, 433, 572, 631, 648, 672, 673, 675, 689, 690, 732, 740], "sum": [236, 237, 325, 378, 675, 676], "distillationconfig": [236, 237, 631, 676, 677, 690, 728], "prepare_compress": [236, 237, 631, 648, 676, 677, 690, 728, 729, 732], "criterion_conf": [236, 237], "d_conf": [236, 237, 677, 690, 728], "compression_manag": [236, 237, 631, 648, 676, 677, 690, 728, 729, 732], "distil_loss": [236, 237, 690], "ni_workload_nam": 237, "onnxrt_dnnl_ep": [237, 691, 732], "onnxrt_dml_ep": [237, 732], "tuningcriterion": [237, 690, 727, 737, 741], "tuning_criterion": [237, 690, 727, 737, 741], "npu": [237, 732], "xpu": [237, 615, 701, 732], "ptq": [237, 433, 648, 675, 678, 685, 690, 715, 732, 738, 739, 741], "meet": [237, 243, 354, 356, 434, 436, 648, 653, 727, 730, 731, 732, 735, 739, 741], "mse_v2": [237, 317, 359, 370, 441], "hawq_v2": [237, 370, 441], "docstr": [237, 452], "workload": [237, 639, 642, 712, 730], "insight": [237, 639, 651, 675, 730, 736, 741, 742], "copi": [237, 349, 642, 671, 672, 716], "deepcopi": [237, 671], "model_origin": [237, 433, 734], "qat_op_name_dict": 237, "low_memory_usag": 237, "hpoconfig": 237, "xgb": 237, "bo": 237, "intermediatelayersknowledgedistillationlossconfig": [237, 676], "relationship": [237, 712], "student_layer_nam": 237, "student_layer_output_process": 237, "teacher_layer_nam": 237, "teacher_layer_output_process": 237, "desir": [237, 265, 269, 307, 310, 653, 654, 729, 738, 740], "serv": [237, 387, 575, 615, 718, 723, 724, 725], "numer": [237, 325, 378, 397, 654, 691, 730, 732, 735], "abbrevi": 237, "l1": 237, "selfknowledgedistillationlossconfig": [237, 676, 690], "student1_layer_name1": 237, "teacher_layer_name1": 237, "student2_layer_name1": 237, "student1_layer_name2": 237, "teacher_layer_name2": 237, "student2_layer_name2": 237, "soft": 237, "hard": [237, 672, 675], "resblock": 237, "deepst": 237, "02": [237, 744], "mixedprecisionconfig": [237, 379, 452, 690, 691], "mixedprecis": [237, 326, 690], "won": [237, 732, 735], "work": [237, 316, 353, 615, 650, 653, 671, 672, 676, 705, 708, 716, 734, 735, 736, 738, 739], "mix_precis": [237, 370, 452, 690, 691], "converted_model": [237, 379, 690, 691], "exportconfig": 237, "14": [237, 314, 315, 680, 686, 725, 744], "dynamic_ax": [237, 315, 680], "qlinear": [237, 254, 261, 297, 304, 325, 378, 652, 700], "ax": [237, 315], "onnxqlinear2qdqconfig": 237, "onnxqlinear2qdq": 237, "torch2onnxconfig": [237, 680], "torch2onnx": [237, 312, 317, 370], "qdq_op_fp32_bia": 237, "qdq_op_int32_bia": 237, "qdq_op_fp32_bias_qdq": 237, "resnet50": [237, 651, 675, 678, 680, 691, 693, 697, 729, 732, 737, 744], "int8_onnx_config": [237, 680], "randn": [237, 680], "224": [237, 265, 307, 651, 673, 678, 680, 683, 690, 693, 712, 740, 743], "tf2onnxconfig": [237, 680], "tf2onnx": [237, 312, 317, 370], "output_graph": 237, "dyna": [237, 317, 330, 370, 649, 685, 731], "sigopt": [238, 239, 281, 282, 317, 370, 730], "tpe": [238, 239, 281, 282, 317, 370], "sigopttunestrategi": [240, 283], "q_dataload": [240, 241, 283, 284, 357, 360, 363, 434, 437, 438, 442, 445, 684, 741], "eval_metr": [240, 241, 379, 433, 434, 437, 438, 442, 445, 631, 689, 712, 732], "q_hook": [240, 241, 283, 284, 357, 360, 363, 434, 437, 438, 442, 445], "yield": [240, 241, 250, 272, 283, 284, 293, 357, 379, 433, 437, 452, 631, 672, 732, 741], "well": [240, 241, 283, 284, 379, 433, 631, 649, 651, 671, 673, 729, 732, 736, 738, 743], "taken": [240, 241, 283, 284, 379, 433, 631, 732], "reserv": [240, 241, 283, 284], "abl": [240, 241, 283, 284, 379, 433, 631, 701, 710, 732], "tuner": [240, 241, 283, 284, 316, 353, 379, 433, 631, 732], "scalar": [240, 241, 283, 284, 379, 433, 631, 689, 732, 741], "pseudo": [240, 241, 283, 284, 433, 631, 735, 739], "someth": [240, 241, 254, 283, 284, 297, 433, 631], "fefin": [241, 284], "tpetunestrategi": [241, 284], "basedatalod": [242, 285, 572], "basedataload": [242, 247, 249, 285, 290, 292, 572], "last_batch": [242, 244, 247, 248, 249, 251, 272, 285, 287, 290, 291, 292, 294, 572, 672], "rollov": [242, 244, 247, 248, 249, 251, 272, 285, 287, 290, 291, 292, 294, 572, 672], "collate_fn": [242, 244, 245, 247, 248, 249, 251, 272, 285, 287, 288, 290, 291, 292, 294, 572, 672, 673], "batch_sampl": [242, 244, 247, 248, 249, 251, 272, 285, 287, 290, 291, 292, 294, 572, 672], "num_work": [242, 244, 247, 248, 249, 251, 272, 285, 287, 290, 291, 292, 294, 572, 672, 690, 732], "pin_memori": [242, 244, 247, 248, 249, 251, 272, 285, 287, 290, 291, 292, 294, 572, 672], "_generate_dataload": [242, 285, 572], "check_dataload": 243, "default_col": [244, 287], "outer": [244, 287], "defaultdataload": [244, 251, 287, 294], "style": [245, 259, 288, 302, 452, 671, 673, 684], "drop_last": [245, 250, 288, 293], "iterablefetch": [245, 288], "indexfetch": [245, 288], "base_dataload": [246, 289, 306, 317], "default_dataload": [246, 289, 306, 317], "fetcher": [246, 289, 306, 317], "mxnet_dataload": [246, 289, 306, 317], "onnxrt_dataload": [246, 289, 306, 317, 426], "pytorch_dataload": [246, 289, 306, 317], "tensorflow_dataload": [246, 289, 306, 317, 431], "mxnetdataload": [247, 290], "onnxrtbertdataload": [248, 291], "variant": [248, 291], "onnxrtdataload": [248, 291, 426], "pytorchdataload": [249, 292], "data_sourc": [250, 293, 634], "__iter__": [250, 254, 293, 297, 672, 673, 690], "matter": [250, 293, 734], "iterablesampl": [250, 293], "squential": [250, 293], "your": [250, 252, 293, 295, 615, 647, 651, 671, 672, 673, 675, 678, 687, 690, 693, 696, 697, 698, 703, 704, 705, 707, 708, 710, 712, 716, 718, 723, 724, 725, 729, 730, 737, 739, 741, 742], "clear": [250, 293, 652, 682, 689, 690], "iterabledataset": [250, 254, 293, 297], "try": [250, 293, 387, 648, 651, 675, 713, 729, 732, 738, 741], "indexdataset": [250, 293], "__getitem__": [250, 254, 269, 293, 297, 310, 672, 673, 690], "__len__": [250, 254, 293, 297, 673], "batchsampl": [250, 293], "tfdatadataload": [251, 294], "tensorflow1": [251, 294], "coupl": [251, 294], "satisfi": [251, 294, 675, 686, 716], "tf1": [251, 294, 692], "although": [251, 294, 737], "tensorflowbertdataload": [251, 294], "tensorflowmodelzoobertdataload": [251, 294], "zoo": [251, 269, 294, 310, 651, 679, 683, 744], "tensorflowdataload": [251, 294, 431], "pytorchbertdataset": [252, 295], "model_typ": [252, 295, 642, 673], "tensordataset": [252, 295, 673], "repo": [252, 295, 645, 647, 673, 679, 703, 705, 707, 708, 745], "easi": [252, 295, 353, 680, 690, 713, 717, 730, 732, 735, 737], "squad": [252, 269, 295, 310, 322, 323, 325, 375, 376, 378, 673, 689, 729, 740, 744], "distilbert": [252, 295, 651, 673, 691, 730, 744], "xlnet": [252, 295, 673, 744], "xlm": [252, 295, 673, 744], "101": [252, 295, 325, 378, 689, 719, 738, 744], "2043": [252, 295], "2001": [252, 295], "onnxrtbertdataset": [252, 295], "data_dir": [252, 295, 673], "model_name_or_path": [252, 295, 673, 690, 698, 699, 714, 721, 724, 725, 733], "max_seq_length": [252, 269, 295, 310, 600, 673, 740], "do_lower_cas": [252, 268, 269, 295, 309, 310, 673, 740], "mrpc": [252, 295, 325, 378, 673, 689, 698, 721, 724, 725, 729, 741, 744], "dynamic_length": [252, 295, 673], "shortcut": [252, 295, 673], "longer": [252, 269, 295, 310, 673, 740], "shorter": [252, 269, 295, 310, 673, 740], "lowercas": [252, 295, 673], "choic": [252, 295, 598, 652, 673, 689, 716, 738], "qqp": [252, 295, 673, 689, 744], "qnli": [252, 295, 673, 689, 744], "rte": [252, 295, 673, 689, 744], "st": [252, 295, 673, 689], "cola": [252, 295, 673, 689, 744], "mnli": [252, 295, 673, 689, 744], "wnli": [252, 295, 673, 689], "mobilebert": [252, 295, 673, 676, 744], "roberta": [252, 295, 673, 744], "uncas": [252, 269, 295, 310, 673, 740, 744], "load_and_cache_exampl": [252, 295], "convert_examples_to_featur": [252, 269, 295, 310], "max_length": [252, 295], "label_list": [252, 295, 325, 378], "output_mod": [252, 295], "pad_token": [252, 295], "pad_token_segment_id": [252, 295], "mask_padding_with_zero": [252, 295], "inputfeatur": [252, 269, 295, 310], "properti": [252, 295, 451, 687], "vocabulari": [252, 268, 269, 295, 309, 310, 740], "attention_mask": [252, 295, 690], "usual": [252, 295, 653, 675, 676, 715, 728, 729, 732, 733, 738], "NOT": [252, 295, 682], "token_type_id": [252, 295, 690], "segment": [252, 295, 319, 321, 372, 374, 647], "portion": [252, 295], "regress": [252, 295, 647, 675], "seq_length": [252, 295], "tensorflowbertdataset": [252, 295], "label_fil": [252, 269, 295, 310, 673, 740], "tfrecord": [252, 253, 254, 295, 296, 297, 673], "guid": [252, 295, 648, 651, 671, 673, 676, 686, 693, 701, 710, 745], "parsedecodebert": [252, 295], "tensorflowmodelzoobertdataset": [252, 253, 295, 296], "num_cor": [252, 253, 257, 295, 296, 300, 673], "28": [252, 253, 257, 295, 296, 300, 673, 744], "coco": [253, 260, 264, 296, 303, 321, 325, 374, 378, 689, 729], "parsedecodecoco": [253, 296], "cocorecorddataset": [253, 296], "interleav": [253, 296, 673], "parallel": [253, 296, 427, 432, 615, 673, 690, 717, 720, 741], "cocoraw": [253, 296, 673], "img_dir": [253, 296, 673], "val2017": [253, 296, 673], "anno_dir": [253, 296, 673], "annot": [253, 296, 321, 374, 452, 653, 654, 673, 689, 729, 741], "instances_val2017": [253, 296, 673], "jpg": [253, 257, 259, 296, 300, 302, 651, 673], "imag": [253, 254, 257, 259, 265, 269, 296, 297, 300, 302, 307, 310, 321, 374, 673, 678, 680, 729, 731, 738, 739, 740, 744], "coconpi": [253, 296, 673], "npy_dir": [253, 296, 673], "npy": [253, 296, 673], "tensorflowdataset": [254, 297], "pytorchdataset": [254, 297], "mxnetdataset": [254, 297], "onnxrtqldataset": [254, 297], "onnxrtitdataset": [254, 297], "IT": [254, 261, 297, 304, 730], "pytorchmxnetwrapdataset": [254, 297], "datafunc": [254, 297], "pytorchmxnetwrapfunct": [254, 269, 297, 310], "framework_dataset": [254, 297], "convent": [254, 297, 321, 374, 647, 676], "imageclassifi": [254, 297], "tensorflow_itex": [254, 257, 259, 261, 297, 300, 302, 304, 672, 731], "onnxrt_qdq": [254, 261, 297, 304, 731], "onnxrt_qlinearop": [254, 261, 269, 297, 304, 310, 731], "onnxrt_integerop": [254, 261, 269, 297, 304, 310, 731], "pytorch_ipex": [254, 261, 297, 304, 690, 731, 743], "pytorch_fx": [254, 261, 297, 304, 690, 731], "dataset_registri": [254, 297], "dataset_typ": [254, 297], "dataset_format": [254, 297], "data_format": [254, 265, 297, 307], "raw_imag": [254, 297], "overwrit": [254, 297, 703, 707], "download_url": [254, 297], "filenam": [254, 297, 577, 642, 673, 716], "md5": [254, 297], "address": [254, 297, 646, 671, 691, 712, 715, 718, 730], "gen_bar_updat": [254, 297], "check_integr": [254, 297], "fpath": [254, 297], "checksum": [254, 297], "calculate_md5": [254, 297], "chunk_siz": [254, 297], "cifar10": [254, 297, 673], "cifar100": [254, 297, 673], "databas": [254, 297, 718], "www": [254, 297, 673, 744], "toronto": [254, 297, 673], "kriz": [254, 297, 673], "cifar": [254, 297, 673, 744], "tar": [254, 297, 673, 675, 705, 708], "gz": [254, 297, 673, 675, 705, 708], "manual": [254, 297, 673, 693, 699, 701, 704, 718, 723, 724, 725, 729], "subset": [254, 257, 297, 300, 673, 715], "internet": [254, 297, 673, 712], "again": [254, 297, 673, 713, 715, 734], "pytorchcifar10": [254, 297], "mxnetcifar10": [254, 297], "tensorflowcifar10": [254, 297], "pytorchcifar100": [254, 297], "mxnetcifar100": [254, 297], "tensorflowcifar100": [254, 297], "mnist": [254, 297, 673, 678], "nation": [254, 297, 646], "institut": [254, 297], "standard": [254, 269, 297, 310, 626, 647, 653, 671, 675, 680, 689, 740, 741], "technologi": [254, 297, 688, 690], "fashionmnist": [254, 297, 673], "npz": [254, 297, 673], "idx1": [254, 297, 673], "ubyt": [254, 297, 673], "idx3": [254, 297, 673], "t10k": [254, 297, 673], "pytorchmnist": [254, 297], "mxnetmnist": [254, 297], "tensorflowmnist": [254, 297], "pytorchfashionmnist": [254, 297], "mxnetfashionmnist": [254, 297], "tensorflowfashionmnist": [254, 297], "imagefold": [254, 297, 673, 678, 690], "expect": [254, 297, 646, 647, 681, 688, 710, 732, 735, 741], "subfold": [254, 297, 713], "belong": [254, 297, 383, 732], "class_1": [254, 297, 673], "xxx": [254, 297, 673, 690], "png": [254, 297, 673], "xxy": [254, 297, 673], "xxz": [254, 297, 673], "class_n": [254, 297, 673], "123": [254, 297, 673, 740], "nsdf3": [254, 297, 673], "asd932_": [254, 297, 673], "categori": [254, 297, 320, 373, 669, 673, 700], "mxnetimagefold": [254, 297], "tensorflowtfrecorddataset": [254, 297], "tensorflowimagerecord": [254, 297], "imagenet": [254, 257, 265, 297, 300, 307, 649, 675, 690, 699, 715, 729, 739, 740, 743, 744], "000": [254, 297, 651, 673], "099": [254, 297, 673], "tensorflowvocrecord": [254, 297], "pascal": [254, 297], "voc": [254, 297, 325, 378], "2012": [254, 297], "00000": [254, 297], "00004": [254, 297], "00001": [254, 297], "00003": [254, 297], "dummydataset": [255, 256, 298, 299, 572], "127": [255, 256, 298, 299, 572, 673, 732, 738, 744], "stand_norm": [255, 256, 298, 299, 572, 673], "dummy_v2": [256, 299, 572, 673], "sparse_dummy_v2": [256, 299, 673], "label_shap": [256, 299, 572, 673], "sparsedummydataset": [256, 299], "dense_shap": [256, 299, 673], "sparse_ratio": [256, 299, 673], "imagenetraw": [257, 300, 673], "data_path": [257, 300, 673], "image_list": [257, 300, 673], "img1": [257, 300, 673], "img2": [257, 300, 673], "imgx": [257, 300, 673], "val_map": [257, 300, 673], "txt": [257, 300, 673, 675, 686, 712, 714, 715, 717, 718], "pytorchimagenetraw": [257, 300], "mxnetimagenetraw": [257, 300], "tensorflowimagenetraw": [257, 300], "inteltensorflow": [257, 259, 300, 302, 686], "tensorflowimagenetdataset": [257, 300], "onnxrtimagenetdataset": [257, 300], "bert_dataset": [258, 263, 301, 306, 317, 370], "coco_dataset": [258, 263, 301, 306, 317, 370], "dummy_dataset": [258, 263, 301, 306, 317, 370], "dummy_dataset_v2": [258, 263, 301, 306, 317, 370], "imagenet_dataset": [258, 263, 301, 306, 317, 370], "style_transfer_dataset": [258, 263, 301, 306, 317, 370], "styletransferdataset": [259, 302], "content_fold": [259, 302, 673], "style_fold": [259, 302, 673], "crop_ratio": [259, 302, 673], "resize_shap": [259, 302, 673], "image_format": [259, 302, 673], "holder": [259, 302, 673], "labelbalancecocorecordfilt": [260, 303], "balanc": [260, 303, 735, 738], "labelbalancecocorawfilt": [260, 303], "tensorflowfilt": [261, 304], "onnxrtqlfilt": [261, 304], "onnxrtitfilt": [261, 304], "pytorchfilt": [261, 304], "mxnetfilt": [261, 304], "filter_registri": [261, 304], "filter_typ": [261, 304], "__call__": [261, 304], "coco_filt": [262, 263, 305, 306, 317, 370], "imagenet_transform": [263, 266, 306, 308, 317, 370], "parsedecodecocotransform": 264, "quantizedinput": [265, 307, 740], "labelshift": [265, 307, 740], "label_shift": [265, 307, 740], "parsedecodeimagenet": [265, 307, 740], "proto": [265, 269, 307, 310, 740], "parsedecodeimagenettransform": [265, 307], "tensorflowtransposelastchannel": 265, "tensorflowshiftrescal": 265, "rescal": [265, 269, 310, 740], "tensorflowresizecropimagenettransform": [265, 307], "random_crop": [265, 307, 740], "resize_sid": [265, 307, 740], "resize_method": [265, 307], "bilinear": [265, 269, 307, 310, 740], "random_flip_left_right": [265, 307, 740], "mean_valu": [265, 307, 740], "channels_last": [265, 307, 693], "subpixel": [265, 307], "rgb": [265, 307], "seri": [265, 307, 651, 686, 690, 740], "applic": [265, 307, 654, 680, 693, 710, 712, 718, 719, 723, 724, 730, 735, 738, 739, 740, 742], "crop": [265, 269, 307, 310, 673, 740], "left": [265, 269, 307, 310, 704, 710, 738, 740], "std": [265, 269, 307, 310, 690, 740], "bilinearimagenettransform": [265, 307], "central_fract": [265, 307, 740], "875": [265, 307, 740], "fraction": [265, 307, 740], "onnxbilinearimagenettransform": [265, 307], "onnxresizecropimagenettransform": [265, 307], "std_valu": [265, 307], "229": [265, 307, 690], "225": [265, 307, 690], "resizewithaspectratio": [265, 307], "87": [265, 307, 744], "inter_pol": [265, 307], "cv2": [265, 307], "inter_area": [265, 307], "aspect": [265, 269, 307, 310, 740], "postprocess_cl": [267, 277, 690], "user_postprocess": [267, 277], "convert_to_unicod": [268, 309], "unicod": [268, 309], "assum": [268, 309, 321, 332, 374, 652, 682, 710], "load_vocab": [268, 309], "vocab_fil": [268, 269, 309, 310, 740], "convert_by_vocab": [268, 309], "vocab": [268, 309], "whitespace_token": [268, 309], "whitespac": [268, 309, 323, 376], "clean": [268, 309, 690], "piec": [268, 309, 318, 371, 689, 735], "fulltoken": [268, 309], "tokenzi": [268, 309], "basictoken": [268, 309], "punctuat": [268, 309, 318, 323, 371, 376], "lower": [268, 269, 309, 310, 323, 376, 438, 677, 729, 730, 732, 738, 740, 741], "wordpiecetoken": [268, 309], "unk_token": [268, 309], "unk": [268, 309], "max_input_chars_per_word": [268, 309], "wordpiec": [268, 269, 309, 310, 740], "concat_gener": [269, 310], "inc": [269, 310, 477, 646, 653, 693, 700, 710, 712, 717, 730, 731, 736, 741], "tensorflowtransform": [269, 310], "mxnettransform": [269, 310], "pytorchtransform": [269, 310], "onnxrtqltransform": [269, 310], "onnxrtittransform": [269, 310], "transform_registri": [269, 310], "transform_typ": [269, 310], "basetransform": [269, 310], "tensorflowwrapfunct": [269, 310], "transform_func": [269, 310], "pytorchmxnettransform": [269, 310], "get_torchvision_map": [269, 310], "torchvis": [269, 310, 651, 679, 683, 693, 699, 713], "composetransform": [269, 310], "transform_list": [269, 310, 740], "compos": [269, 310, 634, 740], "croptoboundingbox": [269, 310, 740], "offset_height": [269, 310, 740], "offset_width": [269, 310, 740], "target_height": [269, 310, 740], "target_width": [269, 310, 740], "box": [269, 310, 321, 325, 374, 378, 648, 689, 693, 704, 710, 739, 740, 741], "coordin": [269, 310, 357, 437, 717, 740, 741], "top": [269, 310, 316, 325, 340, 345, 353, 378, 647, 689, 710, 713, 715, 740], "corner": [269, 310, 647, 652, 654, 740], "horizont": [269, 310, 740], "mxnetcroptoboundingbox": [269, 310], "onnxrtcroptoboundingbox": [269, 310], "tensorflowcroptoboundingbox": [269, 310], "resizewithratio": [269, 310, 740], "min_dim": [269, 310, 740], "800": [269, 310, 740], "max_dim": [269, 310, 740], "1365": [269, 310, 740], "constant_valu": [269, 310], "longest": [269, 310, 740], "side": [269, 310, 673, 704, 740], "exce": [269, 310, 735, 740], "tensorflowresizewithratio": [269, 310], "permut": [269, 310, 740], "tensorflowtranspos": [269, 310], "mxnettranspos": [269, 310], "pytorchtranspos": [269, 310], "randomverticalflip": [269, 310, 740], "tensorflowrandomverticalflip": [269, 310], "randomhorizontalflip": [269, 310, 690, 740], "tensorflowrandomhorizontalflip": [269, 310], "toarrai": [269, 310, 740], "pil": [269, 310, 740], "casttftransform": [269, 310], "castonnxtransform": [269, 310], "castpytorchtransform": [269, 310], "centercroptftransform": [269, 310], "center": [269, 310, 650, 651, 686, 740, 741], "paddedcentercroptransform": [269, 310], "crop_pad": [269, 310], "resizetftransform": [269, 310], "bicub": [269, 310, 740], "resizepytorchtransform": [269, 310], "randomcroptftransform": [269, 310], "randomresizedcroppytorchtransform": [269, 310], "08": [269, 310, 740, 744], "randomresizedcropmxnettransform": [269, 310], "randomresizedcroptftransform": [269, 310], "normalizetftransform": [269, 310], "deviat": [269, 310, 675, 740], "broadcast": [269, 310, 678, 740], "rescalekeraspretraintransform": [269, 310], "rescaletftransform": [269, 310], "rescaletransform": [269, 310], "alignimagechanneltransform": [269, 310], "must": [269, 310, 321, 374, 615, 647, 648, 653, 669, 672, 686, 732, 740], "pytorchalignimagechannel": [269, 310], "tondarraytransform": [269, 310], "resizemxnettransform": [269, 310], "resizetransform": [269, 310], "cropresizetftransform": [269, 310], "boundari": [269, 310, 740], "area": [269, 310, 321, 374, 689, 740], "pytorchcropresizetransform": [269, 310], "mxnetcropresizetransform": [269, 310], "cropresizetransform": [269, 310], "centercroptransform": [269, 310], "mxnetnormalizetransform": [269, 310], "pytorchnormalizetransform": [269, 310], "normalizetransform": [269, 310], "randomcroptransform": [269, 310], "randomresizedcroptransform": [269, 310], "get_final_text": [269, 310], "pred_text": [269, 310], "orig_text": [269, 310], "project": [269, 310, 645, 646, 647, 716, 730, 737, 741, 745], "squadexampl": [269, 310], "qas_id": [269, 310], "question_text": [269, 310], "doc_token": [269, 310], "orig_answer_text": [269, 310], "start_posit": [269, 310], "end_posit": [269, 310], "is_imposs": [269, 310], "answer": [269, 310, 322, 323, 375, 376, 646, 715, 729, 740, 744], "unique_id": [269, 310], "example_index": [269, 310], "doc_span_index": [269, 310], "token_to_orig_map": [269, 310], "token_is_max_context": [269, 310], "input_mask": [269, 310, 690], "segment_id": [269, 310, 690], "read_squad_exampl": [269, 310], "input_fil": [269, 310], "doc_strid": [269, 310, 740], "max_query_length": [269, 310, 740], "output_fn": [269, 310], "inputbatch": [269, 310], "collecttransform": [269, 310], "10833": [269, 310], "tfsquadv1posttransform": [269, 310], "n_best_siz": [269, 310, 740], "384": [269, 310, 740], "64": [269, 310, 649, 735, 738, 740, 744], "max_answer_length": [269, 310, 740], "30": [269, 310, 679, 683, 685, 740, 744], "nbest_predict": [269, 310, 740], "question": [269, 310, 322, 323, 375, 376, 646, 647, 651, 652, 686, 693, 717, 729, 738, 740, 744], "anoth": [269, 310, 318, 327, 371, 642, 675, 676, 703, 707, 740, 741], "long": [269, 310, 671, 681, 735, 740], "document": [269, 310, 452, 653, 654, 659, 678, 688, 691, 695, 705, 708, 709, 716, 717, 719, 729, 736, 740, 742], "chunk": [269, 310, 740], "tfmodelzoocollecttransform": [269, 310], "tfsquadv1modelzooposttransform": [269, 310], "squadv1": [269, 310, 740], "parsedecodevoctransform": [269, 310], "conf_fname_or_obj": [270, 279, 311, 316, 326, 327, 328, 329, 331, 340, 345, 353], "unnecessari": [270, 690], "setter": 272, "calib_dataload": [272, 354, 433, 456, 473, 474, 477, 648, 651, 672, 673, 675, 683, 684, 689, 690, 712, 713, 732, 733, 734, 735], "reason": [272, 646, 653, 672, 715, 735, 739, 741], "know": [272, 671, 678, 736], "metric_cl": [274, 378, 433, 690], "user_metr": [274, 378, 433], "recommend": [274, 378, 615, 652, 673, 682, 701, 704, 709, 711, 729, 731, 741], "set_backend": 275, "tensorflowimagefold": 297, "qlinear2qdq": [312, 317, 370], "qlinearop": [313, 675, 685, 701, 732, 744], "check_model": 313, "onnx_qlinear_to_qdq": 313, "input_name_to_nod": 313, "tf_to_fp32_onnx": 314, "tf_to_int8_onnx": 314, "int8_model": [314, 315, 652], "get_node_map": 315, "fp32_onnx_path": 315, "module_node_map": 315, "get_quantizable_onnx_op": 315, "quantize_nod": 315, "dynamic_quant_export": 315, "pt_fp32_model": 315, "pt_int8_model": 315, "weight_typ": 315, "s8": 315, "static_quant_export": 315, "_quantiz": [315, 400], "torch_to_fp32_onnx": 315, "do_constant_fold": 315, "torch_to_int8_onnx": 315, "achiev": [316, 353, 680, 688, 690, 713, 728, 729, 730, 732, 738, 739, 741], "across": [316, 326, 353, 379, 674, 690, 717, 720, 729, 733, 738, 741], "variou": [316, 326, 353, 379, 654, 685, 693, 720, 729, 731, 733], "dl": [316, 326, 340, 345, 353, 379, 675, 684, 697, 710, 730, 744], "bring": [316, 353, 704, 717, 738], "vari": [316, 340, 345, 353, 715, 729, 738, 744], "roc": [316, 325, 340, 345, 353, 378], "flexibl": [316, 340, 345, 353, 651, 676, 717, 729, 735], "techniqu": [317, 370, 644, 651, 685, 690, 693, 712, 728, 729, 730, 731, 732, 742, 743, 744], "bleu": [317, 319, 324, 370, 372, 377, 689, 729], "bleu_util": [317, 324, 370, 377], "coco_label_map": [317, 324, 370, 377], "coco_tool": [317, 324, 370, 377], "evaluate_squad": [317, 324, 370, 377], "f1": [317, 322, 324, 325, 370, 375, 377, 378, 678, 689, 690, 713, 737, 744], "basic_na": [317, 330, 370], "nas_util": [317, 330, 370], "pruner_legaci": [317, 370], "gradient_sensit": [317, 336, 370], "group_lasso": [317, 336, 370], "pruning_recip": [317, 370], "tile_pattern": [317, 341, 342], "prune_util": [317, 346, 370], "tuning_sampl": [317, 359, 365, 370, 441, 447], "tuning_spac": [317, 359, 365, 366, 368, 370, 441, 447, 448, 450], "tuning_struct": [317, 359, 365, 366, 367, 370, 441, 447, 448, 449], "auto_mixed_precis": [317, 359, 370, 441], "graph_optim": [317, 370], "mixed_precis": [317, 370, 379, 690], "model_convers": [317, 370], "pruning_v2": [317, 370], "unicoderegex": [318, 371], "hoc": [318, 371], "hack": [318, 371], "recogn": [318, 371, 741], "nondigit_punct_r": [318, 371], "compil": [318, 371, 690], "express": [318, 371, 646], "preced": [318, 371, 738, 741], "digit": [318, 371, 642, 730], "punct_nondigit_r": [318, 371], "symbol_r": [318, 371], "bleu_token": [318, 371], "mose": [318, 371], "smt": [318, 371], "mosesdecod": [318, 371], "mteval": [318, 371], "v14": [318, 371], "pl": [318, 371], "l954": [318, 371], "l983": [318, 371], "bilingu": [318, 371], "understudi": [318, 371], "qualiti": [318, 371, 671], "machin": [318, 371, 680, 686, 696, 710, 712, 718, 730, 738, 739], "translat": [318, 319, 371, 372, 729, 741], "natur": [318, 371, 680], "approxim": [318, 319, 371, 372, 653, 689, 735], "glue": [318, 325, 371, 378, 673, 689, 690, 699], "word": [318, 371, 671, 689, 729, 735, 744], "ngram": [318, 371, 689], "breviti": [318, 319, 371, 372, 689], "doe": [318, 371, 451, 671, 672, 673, 689, 690, 735, 736, 740], "beam": [318, 371, 689], "tensor2tensor": [319, 372], "bleu_hook": [319, 372], "compute_bleu": [319, 372], "reference_corpu": [319, 372], "translation_corpu": [319, 372], "max_ord": [319, 372], "use_bp": [319, 372], "against": [319, 372], "gram": [319, 372], "bleu_scor": [319, 372], "third": [321, 374, 647, 687], "parti": [321, 374, 647, 687, 732], "pycocotool": [321, 374, 681, 686], "noth": [321, 374, 741], "thu": [321, 374, 615, 690, 729, 732], "cannot": [321, 374, 648, 671, 681, 735, 739], "jonathanhuang": [321, 374], "image_id": [321, 374, 689], "invok": [321, 374, 615, 653], "groundtruth_dict": [321, 374], "exportgroundtruthtococo": [321, 374], "groundtruth_boxes_list": [321, 374], "groundtruth_classes_list": [321, 374], "max_num_class": [321, 374], "output_path": [321, 374], "detections_list": [321, 374], "exportdetectionstococo": [321, 374], "detection_boxes_list": [321, 374], "detection_scores_list": [321, 374], "detection_classes_list": [321, 374], "cocowrapp": [321, 374], "loadannot": [321, 374], "cocoevalwrapp": [321, 374], "agnostic_mod": [321, 374], "computemetr": [321, 374], "detection_typ": [321, 374], "bbox": [321, 374, 648, 689], "hold": [321, 357, 374, 437, 673], "iou_typ": [321, 374], "iou_thr": [321, 325, 374, 378, 689], "map_point": [321, 325, 374, 378, 689], "cocoev": [321, 374], "mscoco": [321, 374], "Then": [321, 374, 653, 675, 703, 705, 707, 708, 715, 738, 741], "exportsingleimagegroundtruthtococo": [321, 374], "next_annotation_id": [321, 374], "category_id_set": [321, 374], "groundtruth_box": [321, 374], "groundtruth_class": [321, 374], "groundtruth_mask": [321, 374], "groundtruth_is_crowd": [321, 374], "ingest": [321, 374], "here": [321, 374, 452, 653, 673, 678, 679, 680, 682, 683, 688, 689, 698, 705, 708, 710, 713, 716, 718, 732, 736, 737, 738, 744], "exportsingleimagedetectionstococo": [321, 374], "uniqu": [321, 354, 374, 732], "assign": [321, 374, 642, 678, 731, 741], "num_gt_box": [321, 374], "num_detect": [321, 325, 374, 378, 689, 690, 743], "image_height": [321, 374], "image_width": [321, 374], "detection_mask": [321, 374], "crowd": [321, 374], "insid": [321, 374, 615, 676, 677, 711, 729, 733, 741], "exportsingleimagedetectionboxestococo": [321, 374], "detection_box": [321, 374, 690, 743], "detection_scor": [321, 374, 690, 743], "detection_class": [321, 374, 690, 743], "exporsingleimagedetectionboxestococo": [321, 374], "exportsingleimagedetectionmaskstococo": [321, 374], "allenai": [322, 323, 375, 376], "bi": [322, 323, 375, 376], "att": [322, 323, 375, 376], "flow": [322, 323, 375, 376, 648, 649, 690], "f1_score": [322, 323, 375, 376], "ground_truth": [322, 323, 375, 376], "ground": [322, 323, 375, 376], "truth": [322, 323, 375, 376], "metric_max_over_ground_truth": [322, 323, 375, 376], "metric_fn": [322, 323, 375, 376], "exact_match_scor": [322, 375], "exact": [322, 375], "articl": [322, 323, 375, 376], "paragraph": [322, 323, 375, 376], "qa": [322, 323, 375, 376, 651], "normalize_answ": [323, 376], "newlin": [323, 376, 642], "tab": [323, 376, 710, 739], "harmon": [323, 325, 376, 378], "recal": [323, 325, 376, 378], "answer_start": [323, 376], "177": [323, 376, 744], "denver": [323, 376], "bronco": [323, 376], "nfl": [323, 376], "afc": [323, 376], "super": [323, 376, 649], "bowl": [323, 376], "50": [323, 376, 649, 653, 715, 729, 738, 744], "56be4db0acb8001400a502ec": [323, 376], "percentag": [323, 376, 397, 670, 735, 743], "tensorflowmetr": [325, 378], "maintain": [325, 378, 615, 646, 647, 671, 692, 693, 705, 708, 712, 717, 718, 729, 735, 736], "pytorchmetr": [325, 378], "mxnetmetr": [325, 378], "onnxrtqlmetr": [325, 378], "onnxrtitmetr": [325, 378], "metric_registri": [325, 378], "metric_typ": [325, 378], "decorator_metr": [325, 378], "basemetr": [325, 378, 433], "single_output": [325, 378], "hvd": [325, 378, 678], "wrappytorchmetr": [325, 378], "wrapmxnetmetr": [325, 378], "wraponnxrtmetr": [325, 378], "proport": [325, 378], "pred_list": [325, 378], "pytorchloss": [325, 378], "mae": [325, 378, 689], "compare_label": [325, 378, 433, 689], "rmse": [325, 378, 689, 741], "tensorflowtopk": [325, 378], "k": [325, 378, 433, 689, 712, 729], "among": [325, 378, 704, 738], "outcom": [325, 378], "num_correct": [325, 378], "num_sampl": [325, 378], "generaltopk": [325, 378], "cocomapv2": [325, 378, 689], "anno_path": [325, 378, 689], "map_kei": [325, 378], "detectionboxes_precis": [325, 378], "output_index_map": [325, 378, 689], "tensorflowmap": [325, 378], "tensorflowcocomap": [325, 378], "tensorflowvocmap": [325, 378], "squadf1": [325, 378, 689], "miou": [325, 378], "num_class": [325, 378], "21": [325, 378, 698, 699, 721, 724, 725, 730, 738, 744], "iou": [325, 378], "intersect": [325, 378, 652, 689], "union": [325, 378, 391, 396, 397, 399, 403, 410, 631, 689, 721], "onnxrtglu": [325, 378], "dlrm": [325, 378], "modelconvers": 327, "typic": [327, 354, 649, 651, 677, 679, 683, 715, 729, 744], "basicna": 328, "model_build": [328, 331], "conf_fnam": 328, "nasbas": [331, 649], "nas_registri": 332, "nas_method": 332, "create_search_space_pool": 332, "idx": [332, 673], "find_pareto_front": 332, "pareto": [332, 649], "front": [332, 649], "n_point": 332, "n_metric": 332, "n_pareto_point": 332, "gradientsensitivityprun": 334, "pytorchmodel": [334, 335, 337, 338, 339, 388], "overwritten": [334, 335, 337, 338, 339, 698], "grouplassoprun": 335, "legaci": 336, "basicmagnitudeprun": 337, "patternlockprun": [338, 350], "pruner_registri": 339, "clase": 339, "pruningconf": [340, 345], "tfpruningcallback": [340, 345], "input_model": [340, 345, 692, 713, 714, 715, 739], "pure": [340, 345, 729], "pattern_registri": 343, "pattern_typ": 343, "patternbas": 343, "mask_shap": [343, 344], "is_contigu": 343, "tile": [344, 671], "tilepatternbas": 344, "tilepattern_1x1": 344, "1x1": [344, 676, 690, 729], "tilepattern_2x2": 344, "2x2": [344, 738], "tilepattern_1x16": 344, "1x16": 344, "tilepattern_4x1": 344, "tilepattern_1x2": 344, "1x2": [344, 738], "patternnxm": 348, "patternninm": 348, "reset_non_value_to_default": 349, "parse_not_to_prun": 349, "update_frequency_on_step": [350, 731], "max_sparsity_ratio_per_lay": [350, 731], "magnitudeprun": 350, "snipprun": 350, "snipmomentumprun": 350, "moreoev": 350, "quantconf": 353, "separ": [354, 646, 671, 684, 687, 718, 720, 728, 731], "opt_model": [354, 690], "fulli": [354, 690, 718, 732, 738], "train_func": [354, 631, 678, 690, 732], "automixedprecisiontunestrategi": [355, 435], "basictunestrategi": [356, 436], "polici": [356, 360, 434, 436, 442, 646, 651, 743, 745], "bayesiantunestrategi": [357, 437], "acq_max": [357, 437], "ac": [357, 437], "gp": [357, 437], "y_max": [357, 437], "n_warmup": [357, 437], "10000": [357, 437, 729], "n_iter": [357, 437], "acquisit": [357, 437], "gaussian": [357, 437, 741], "relev": [357, 437, 653, 654, 671, 715, 729], "acq": [357, 437], "randomst": [357, 437], "scipi": [357, 437], "x_max": [357, 437], "targetspac": [357, 437], "pbound": [357, 437], "9527": [357, 437, 690, 743], "bayesianoptim": [357, 437], "exhaustivetunestrategi": [358, 439], "msetunestrategi": [360, 442], "mse_v2tunestrategi": [361, 443], "revert": [361, 369, 443, 451, 741], "randomtunestrategi": [362, 444], "strategy_registri": [363, 445, 741], "tunestrategi": [363, 445, 741], "tuningsamplerregistri": 366, "tuningsampl": [366, 448], "tuningord": [366, 448], "Not": [366, 367, 448, 449, 577, 642, 649, 671], "tuningspac": [366, 367, 448, 449], "tuning_order_lst": [366, 448], "initial_op_tuning_cfg": [366, 448], "modelwisetuningsampl": [366, 448], "tuning_items_prior": [366, 448], "op_dtype_dict": [366, 448], "optuningconfig": [366, 367, 368, 448, 449, 450], "optypewisetuningsampl": [366, 448], "opwisetuningsampl": [366, 448], "fallbacktuningsampl": [366, 448], "op_dtyp": [366, 448], "skip_first": [366, 448], "smoothquantsampl": [366, 448], "tuningitem": [367, 449], "item_typ": [367, 449], "pattern_to_intern": [367, 449], "default_dtyp": [367, 449], "pattern_to_path": [367, 449], "quant_mode_from_pattern": [367, 449], "internal_pattern": [367, 449], "initial_tuning_cfg_with_quant_mod": [367, 449], "op_name_typ": [367, 449], "step1": [367, 449], "step2": [367, 449], "complet": [367, 449, 652, 653, 729, 732, 741, 743, 744], "step3": [367, 449], "step4": [367, 449], "step5": [367, 449], "op_quant_mod": [368, 450], "ordereddefaultdict": [369, 451], "extract_data_typ": [369, 451], "reverted_data_typ": [369, 451], "signed_flag": [369, 451], "get_adaptor_nam": [369, 451], "experiment": [370, 649, 673, 677, 678, 680, 686, 690, 729, 731, 732, 736, 740], "base_model": [370, 381], "keras_model": [370, 381], "mxnet_model": [370, 381], "nets_factori": [370, 381, 573], "onnx_model": [370, 381, 391, 393, 394, 396, 397, 399, 408, 426, 713], "tensorflow_model": [370, 381, 431, 715], "torch_model": [370, 381], "collect_layer_histogram": [370, 635], "create_obj_from_config": [370, 635], "kl_diverg": [370, 635], "load_huggingfac": [370, 635, 690], "neural_insights_util": [370, 635], "weights_detail": [370, 635], "sub_class": [378, 433], "register_customer_metr": 378, "topk": [378, 433, 678, 689, 690, 712, 732], "frozen": [379, 387, 433, 575, 692], "savedmodel": [379, 387, 433, 575, 744], "onnx_ml_pb2": [379, 692], "hybirdblock": [379, 433], "basemodel": [380, 473, 474, 477, 575], "plai": [380, 575, 730, 735, 738], "role": [380, 575, 735, 738], "kerasmodel": [382, 575], "get_model_fwk_nam": 383, "fwk": 383, "mxnetmodel": 384, "net": [385, 576], "tfslimnetsfactori": [385, 576], "get_model_typ": [387, 575], "validate_graph_nod": [387, 575], "validate_and_inference_input_output": [387, 575], "graph_sess": [387, 575], "graph_def_sess": [387, 575], "frozen_pb_sess": [387, 575], "load_saved_model": [387, 575], "saved_model_tag": [387, 575], "signatur": [387, 575], "metagraphdef": [387, 575], "try_loading_kera": 387, "keras_sess": [387, 575], "slim_sess": [387, 575], "checkpoint_sess": [387, 575], "estimator_sess": [387, 575], "saved_model_sess": [387, 575], "tensorflowbasemodel": [387, 431, 575], "tensorflowsavedmodelmodel": [387, 575], "tensorflowllmmodel": [387, 575], "exceed": [387, 575], "2gb": [387, 575], "tensorflowqatmodel": [387, 575], "tensorflowcheckpointmodel": [387, 575], "tensorflowmodel": [387, 575], "pytorchbasemodel": 388, "pytorchfxmodel": 388, "ipexmodel": 388, "driven": [389, 651, 690, 710, 727, 739], "objective_registri": 389, "objective_custom_registri": 389, "obj_cl": 389, "eural_compressor": 389, "objective_cl": 389, "user_object": 389, "__class__": 389, "__name__": 389, "objective_cfg": 389, "usr_cfg": 389, "user_obj_cfg": 389, "easili": [389, 652, 694, 698, 710, 727, 738], "peak": [389, 727], "multiobject": 389, "metric_criterion": 389, "metric_weight": 389, "obj_criterion": 389, "obj_weight": 389, "is_measur": 389, "pathlib": [391, 394, 396, 397, 399, 402, 403], "quant_func": 391, "data_read": [391, 396, 397, 400], "calibrationdataread": [391, 393, 394, 396, 397, 400, 402, 403, 404], "weight_dtyp": [396, 397, 399, 405, 471, 475], "weight_bit": [396, 397, 399, 403, 405, 653], "weight_group_s": [396, 397, 399, 405], "weight_sym": [396, 397, 399, 405, 471, 475], "91": [396, 735, 738, 744], "apply_awq_on_model": 396, "quant_config": [396, 397, 399, 402, 410, 460, 461, 473, 477, 577, 625, 630], "calibration_data_read": [396, 397, 402, 403], "nnx": 396, "return_modelproto": [397, 399], "stabil": [397, 735], "optionm": [397, 399], "apply_gptq_on_model": 397, "apply_rtn_on_model": 399, "nodeproto": 400, "reader": 400, "smooth_quant_entri": [402, 671], "smoohquantconfig": [402, 405], "rtn_quantize_entri": 402, "rtnconfig": [402, 403, 405, 410, 620, 622, 630], "gptq_quantize_entri": 402, "gptqconfig": [402, 403, 405, 622], "awq_quantize_entri": 402, "awqconfig": [402, 405], "model_input": 403, "base_tun": [403, 474, 621], "eval_arg": [403, 474, 621], "expand": 403, "l139": 404, "act_dtyp": [405, 471, 475], "get_default_rtn_config": [405, 622], "get_default_gptq_config": [405, 622], "get_default_awq_config": 405, "fusedconv": 405, "calib_it": 405, "auto_alpha_arg": [405, 475, 738], "alpha_min": [405, 738], "alpha_max": [405, 738], "alpha_step": [405, 738], "attn_method": 405, "get_default_sq_config": [405, 475], "register_algo": [410, 577, 630, 671], "algos_map": [410, 577, 630], "example_algo": [410, 577, 630], "get_qrange_for_qtyp": 410, "check_model_with_infer_shap": 410, "parserfactori": 412, "onnxrtparserfactori": 414, "onnxprofilingpars": 416, "respons": [416, 417, 421, 723, 724, 725, 732], "profilingpars": 417, "profilingresult": 418, "total_execution_tim": 418, "accelerator_execution_tim": 418, "cpu_execution_tim": 418, "op_run": 418, "op_defin": 418, "tensorflowparserfactori": 419, "tensorflowprofilingpars": 421, "profilerfactori": [422, 424, 429], "create_onnx_config": 427, "ort": 427, "sessionopt": 427, "delete_assign": 432, "create_tf_config": 432, "tf_modul": 432, "configproto": 432, "set_eager_execut": 432, "entir": [433, 631, 648, 653, 654, 670, 717, 729], "autotunestrategi": 434, "conservativetunestrategi": 438, "o0": [438, 741], "who": [438, 646], "hawq_v2tunestrategi": 440, "made": [440, 652, 732, 736, 741], "impact": [440, 729, 736, 741], "tunestrategymeta": 445, "metaclass": 445, "lowerbitssampl": 448, "blockfallbacktuningsampl": 448, "op_block_lst": 448, "target_dtyp": 448, "alpha_list": 448, "weightonlyquantsampl": 448, "quantopt": 451, "quant_typ": 451, "quant_opt": 451, "preprocess_user_cfg": 451, "op_user_cfg": 451, "op_user_cfg_modifi": 451, "build_slave_faker_model": 451, "slave": [451, 741], "virtual": [451, 730], "classregist": 451, "fun": 452, "attribute1": 452, "module_debug_level1": 452, "debug": [452, 638, 675, 703, 707, 711, 741, 742], "function1": 452, "param1": 452, "param2": 452, "parameter1": 452, "parameter2": 452, "function2": 452, "pep": [452, 671], "484": [452, 744], "output_model": [452, 690, 713, 715, 739], "function3": 452, "section": [452, 654, 671, 675, 676, 677, 710, 713, 716, 729, 731, 735, 743], "restructuredtext": 452, "liter": 452, "generator1": 452, "example_gener": 452, "exampleclass": 452, "param3": 452, "public": [452, 646, 705, 708], "attr1": 452, "attr2": 452, "attr5": 452, "api_doc_exampl": 453, "smoothquantconfig": [456, 475], "calib_iter": [456, 460, 473, 474, 477, 653], "scaler": 457, "kerasconfigconvert": 460, "staticquantconfig": [460, 461, 471, 475, 577], "tensorflowconfig": 461, "tensorflowconfigconvert": 461, "weight_granular": [471, 475], "per_tensor": [471, 475, 653, 654, 682, 732, 743], "act_sym": [471, 475], "act_granular": [471, 475], "get_all_registered_config": 471, "get_default_static_quant_config": [471, 475], "static_quant_entri": 473, "weight_algorithm": 475, "act_algorithm": 475, "record_max_info": [475, 593], "weight_clip": 475, "default_sq_alpha_arg": 475, "quantize_model": 477, "quantize_model_with_single_config": 477, "dummydatasetv2": 572, "itex_instal": 577, "instal": [577, 678, 681, 683, 693, 695, 698, 701, 705, 708, 710, 711, 713, 714, 715, 745], "combine_histogram": [577, 642], "old_hist": [577, 642], "old": [577, 642, 690, 736], "get_all_fp32_data": [577, 642], "get_tensor_histogram": [577, 642], "scale_info": [577, 642], "dequantize_weight": [577, 642], "weight_tensor": [577, 642], "min_filter_tensor": [577, 642], "max_filter_tensor": [577, 642], "dump_data_to_loc": [577, 642], "pkl": [577, 642, 714], "load_data_from_pkl": [577, 642], "cpuinfo": [577, 593, 642], "statist": [577, 597, 642, 643], "header": [577, 597, 642, 681], "field_nam": [577, 597, 642], "output_handl": [577, 597, 642], "printer": [577, 597, 642], "captureoutputtofil": [577, 642], "tmp_file_path": [577, 642], "stream": [577, 642, 744], "sy": [577, 642, 671, 696], "stderr": [577, 642], "captur": [577, 642], "lazyimport": [577, 642], "lazi": [577, 642], "till": [577, 642, 741], "recover_model_from_json": [591, 641], "json_file_path": [591, 641], "run_fn": [592, 596, 598, 600, 621, 625], "carri": [592, 596, 729], "get_quantizable_ops_recurs": [593, 597], "scale_shar": 593, "static_quant": 596, "warm": 597, "dump_model_op_stat": 597, "get_autoround_default_run_fn": 598, "properli": [598, 718], "warn": [598, 638, 671], "run_arg": [598, 600, 621, 625], "use_auto_scal": 599, "use_mse_search": [599, 612, 622], "use_full_rang": [599, 612, 622], "use_layer_wis": [600, 622], "hqqmoduleconfig": 602, "immut": 602, "constructor": 602, "quant_api": 604, "device_typ": 615, "_dtype": 615, "cache_en": 615, "manag": [615, 631, 634, 690, 693, 694, 704], "region": [615, 738], "chosen": [615, 653, 670], "enter": [615, 704, 710, 718], "half": [615, 691, 701], "hpu": 615, "float8_e4m3fn": 615, "autocastmodel": 615, "affect": [615, 738], "dataparallel": 615, "distributeddataparallel": 615, "torch_dtyp": [615, 654], "rtn_entri": 620, "configs_map": 620, "use_sym": 622, "use_double_qu": 622, "double_quant_dtyp": 622, "double_quant_bit": 622, "double_quant_use_sym": 622, "double_quant_group_s": 622, "act_ord": 622, "static_group": [622, 735], "get_default_hqq_config": 622, "hqqconfig": 622, "hqq": 622, "register_acceler": 626, "ellipsi": 626, "cuda_acceler": 626, "cpu_acceler": 626, "hpu_acceler": 626, "loop": [631, 648, 649, 653, 654, 682, 720, 737, 741], "compressionmanag": 631, "deal": 631, "pruningconfig": 631, "orchestr": [631, 651, 685, 742], "on_train_begin": [631, 648, 676, 677, 690, 728, 729, 732], "train_loop": [631, 690, 728], "on_epoch_begin": [631, 634, 676, 677, 690, 728], "on_step_begin": [631, 634, 676, 677, 690, 728, 729], "on_after_compute_loss": [631, 676, 677, 690, 728], "on_before_optimizer_step": [631, 676, 677, 690, 728, 729], "on_step_end": [631, 634, 676, 677, 690, 728], "on_epoch_end": [631, 634, 676, 677, 690, 728], "on_train_end": [631, 676, 677, 690, 728, 729, 732], "path_to_sav": 631, "top1": [631, 689, 712, 729, 732, 744], "callbacks_list": 631, "layerhistogramcollector": 632, "layer_tensor": 632, "include_lay": 632, "get_func_from_config": 634, "func_dict": 634, "get_preprocess": 634, "get_metr": 634, "get_postprocess": 634, "get_algorithm": 634, "create_dataset": 634, "cfg_preprocess": 634, "cfg_filter": 634, "create_dataload": 634, "dataloader_cfg": 634, "create_eval_func": 634, "postprocess_cfg": 634, "baselin": [634, 737, 738, 739], "create_train_func": 634, "train_cfg": 634, "Their": 634, "auxiliari": 635, "optimizedmodel": 637, "from_pretrain": [637, 651, 690], "save_for_huggingface_upstream": [637, 690], "saved_dir": [637, 735], "msg": [638, 719, 723, 724], "fatal": 638, "alia": [638, 642, 695, 700], "register_neural_insights_workload": 639, "workload_loc": [639, 642], "workload_mod": 639, "workload_nam": 639, "uuid": 639, "update_neural_insights_workload": 639, "workload_uuid": 639, "update_neural_insights_workload_accuracy_data": 639, "baseline_accuraci": 639, "optimized_accuraci": 639, "get_model_path": 639, "is_int8_model": 641, "load_weight_onli": 641, "checkpoint_dir": 641, "history_cfg": 641, "best_configur": 641, "best_model_weight": 641, "snapshot": [641, 714], "cfg_from_fil": 642, "yaml_fil": [642, 673, 678], "time_limit": 642, "get_siz": 642, "seen": [642, 652], "compute_spars": 642, "fault_tolerant_fil": 642, "equal_dict": 642, "d2": 642, "compare_kei": 642, "ignore_kei": 642, "ignor": [642, 670, 673, 735, 738, 741], "get_tuning_histori": 642, "tuning_history_path": 642, "offlin": [642, 646, 690, 732, 738], "str2arrai": 642, "global_st": 642, "show_memory_info": 642, "hint": 642, "dump_class_attr": 642, "compare_object": 642, "obj1": 642, "obj2": 642, "ignore_attr": 642, "comparison": [642, 735, 736, 739], "alias_param": 642, "param_nam": 642, "param_alia": 642, "alias": [642, 671], "print_tabl": 642, "column_map": 642, "table_entri": 642, "titl": [642, 687, 711, 741], "insert_newlin": 642, "prettyt": 642, "column": [642, 735, 738], "handler": [642, 741], "row": [642, 675, 713, 738], "decim": 642, "get_tensors_info": 642, "get_weights_detail": 642, "weightdetail": 642, "dump_tabl": 642, "file_typ": 642, "csv": [642, 649, 713, 714], "dump_table_to_csv": 642, "get_number_of_socket": 642, "platform": [642, 651, 685, 693, 701, 720, 730, 732], "opentri": 642, "activation_min": 642, "activation_max": 642, "print_op_list": 642, "get_op_list": 642, "minmax_file_path": 642, "input_model_tensor": 642, "optimized_model_tensor": 642, "activation_min_max": 642, "calculate_ms": 642, "mse_metric_gap": 642, "fp32_tensor": 642, "dequantize_tensor": 642, "euclidean": [642, 676], "distanc": [642, 676], "check_key_exist": 642, "weightsdetail": 643, "input_tensor_data": 643, "optimized_tensor_data": 643, "weightsstatist": 643, "welcom": [645, 646, 647, 651, 712, 719, 745], "interest": [646, 651, 712, 739], "foster": 646, "particip": [646, 720], "commun": [646, 712], "harass": 646, "experi": [646, 693, 715, 737, 738, 741], "everyon": 646, "regardless": 646, "ag": 646, "bodi": 646, "ethnic": 646, "characterist": 646, "gender": 646, "educ": 646, "socio": 646, "econom": 646, "race": 646, "religion": 646, "sexual": 646, "orient": 646, "contribut": [646, 651, 729], "inclus": 646, "Being": 646, "viewpoint": 646, "gracefulli": 646, "focus": [646, 652], "empathi": 646, "toward": [646, 676], "member": [646, 652], "unaccept": 646, "imageri": 646, "unwelcom": 646, "troll": 646, "insult": 646, "derogatori": 646, "polit": 646, "attack": 646, "privat": 646, "publish": [646, 687, 688, 691, 711, 738], "electron": 646, "explicit": 646, "permiss": 646, "inappropri": 646, "profession": 646, "clarifi": 646, "appropri": [646, 670, 738], "fair": 646, "action": [646, 705, 708], "edit": 646, "reject": 646, "commit": [646, 647], "wiki": 646, "ban": 646, "deem": 646, "threaten": 646, "offens": 646, "harm": 646, "mail": 646, "social": [646, 730], "media": [646, 730], "account": [646, 737, 741], "appoint": 646, "onlin": [646, 737], "event": [646, 739], "abus": 646, "report": [646, 647, 651, 720, 737], "contact": [646, 736, 737], "complaint": 646, "review": [646, 647, 651, 730], "investig": [646, 671, 715], "circumst": [646, 731], "oblig": [646, 716], "confidenti": [646, 712], "regard": [646, 734], "incid": 646, "good": [646, 732, 741], "faith": 646, "repercuss": 646, "leadership": 646, "faq": [646, 651], "page": [646, 647, 712, 715, 716], "send": [647, 653], "view": [647, 651, 679, 701, 710, 716, 736], "star": 647, "repositori": [647, 705, 708], "button": [647, 685, 704, 710], "fork": [647, 705, 708], "clone": [647, 675, 686, 703, 707, 712, 714, 715, 717, 718], "pc": 647, "git": [647, 675, 681, 686, 712, 714, 715, 717, 718], "modif": [647, 652, 682, 698, 717], "checkout": 647, "my": 647, "push": [647, 729, 735, 738], "cover": [647, 680, 684, 730], "would": [647, 690, 714, 729, 732, 738], "adopt": [647, 693, 729, 730, 738], "certif": [647, 712], "agre": 647, "pr": [647, 672, 689, 705, 708, 736], "At": [647, 653, 716, 720, 741], "approv": 647, "solv": [647, 732, 736], "licens": 647, "azur": [647, 651, 730], "devop": 647, "ci": 647, "cloud": [647, 651, 720, 730], "deploi": [647, 676, 690, 716, 720, 735, 741], "e16": 647, "v5": 647, "scan": [647, 651], "pylint": 647, "bandit": 647, "copyright": [647, 687], "docstyl": 647, "spellcheck": 647, "dco": 647, "pytest": 647, "No": [647, 671, 681, 690, 718, 719, 730], "failur": [647, 648], "fault": 647, "coverag": 647, "runtim": [647, 651, 652, 653, 655, 672, 675, 679, 682, 685, 691, 695, 700, 701, 731, 735, 736, 741], "submit": [647, 717, 720, 730], "bug": [647, 651], "intend": 647, "safe": 647, "collabor": [647, 651, 695, 701], "adher": 647, "toolkit": [648, 686, 693, 701, 730, 742], "tracer": 648, "resolv": [648, 650], "floatfunct": 648, "cat": [648, 680, 696, 723, 724, 725], "done": [648, 676, 677, 694, 710, 719, 723, 724, 729, 732], "10004": [648, 649, 652, 672, 676, 677, 678, 682, 685, 691, 728, 731, 733, 735, 743], "neural_compressor": [648, 649, 651, 654, 669, 671, 672, 673, 675, 676, 677, 678, 680, 683, 684, 689, 690, 691, 692, 712, 713, 727, 728, 729, 731, 732, 733, 734, 736, 737, 738, 740, 741, 743], "eval": [648, 671, 672, 675, 693, 732, 739], "conduct": [648, 690, 698, 710, 741, 742], "imper": 648, "therefor": [648, 690, 713, 715, 729, 732, 733, 736, 738], "lot": [648, 715, 738], "As": [648, 653, 672, 676, 689, 690, 704, 715, 729, 735, 741], "successfulli": [648, 651, 678, 719, 723, 724, 725, 730], "suggest": [648, 671, 737], "traceabl": 648, "proxi": 648, "tutori": [648, 701, 730, 742], "prototyp": 648, "html": [648, 651, 653, 670, 678, 685, 705, 708, 711, 713, 719, 723, 732], "highlight": 648, "untrac": 648, "ssd": [648, 680, 744], "resnet34": [648, 744], "r34": 648, "bboxes_labels_scor": 648, "prob": 648, "45": [648, 744], "max_output": 648, "zip": [648, 719, 723, 724], "dbox": 648, "dlabel": 648, "dscore": 648, "decode_singl": 648, "autom": [649, 693, 710, 711, 730, 738], "artifici": 649, "ann": 649, "par": [649, 720], "outperform": 649, "propos": [649, 652, 676, 691, 735, 738], "potenti": [649, 675], "lie": [649, 670], "predictor": 649, "shown": [649, 672, 675, 676, 689, 690, 704, 713, 715, 727, 728, 729, 733, 738, 741], "figur": [649, 703, 704, 707, 733], "popul": 649, "inner": 649, "evolutionari": 649, "until": [649, 653, 741], "conclud": 649, "yet": [649, 705, 708, 711, 718, 732], "simplest": [649, 670, 696], "launcher": [649, 651, 676, 677, 701, 742], "agent": 649, "nsga2": 649, "supernet": 649, "ofa_mbv3_d234_e346_k357_w1": 649, "acc": [649, 720, 729, 739, 744], "mac": [649, 711], "num_ev": 649, "250": [649, 729], "results_csv_path": 649, "search_result": 649, "dataset_path": 649, "ilsvrc2012": 649, "aim": [649, 651, 688, 693, 729, 738, 741, 742], "mobilenetv3": 649, "lt": [649, 673, 744], "wmt": 649, "en": 649, "de": 649, "guidelin": [650, 651], "mainstream": [651, 742], "workflow": [651, 653, 654, 675, 676, 680, 686, 691, 705, 708, 712, 739, 742], "particular": [651, 729, 735], "wide": [651, 679, 691, 729, 732, 744], "hardwar": [651, 652, 676, 685, 690, 710, 729, 730, 731], "xeon": [651, 686, 687, 688, 691, 730, 732, 734, 744], "scalabl": [651, 686, 688, 691, 730, 732, 734], "processor": [651, 688, 691, 718, 730, 732, 734], "flex": [651, 686], "amd": [651, 686, 744], "arm": [651, 685, 686, 744], "nvidia": [651, 670, 685, 686, 744], "llama2": 651, "falcon": [651, 688, 729, 738, 744], "j": [651, 688, 714, 729, 738, 744], "bloom": [651, 729, 738, 744], "broad": [651, 685, 699, 742], "stabl": [651, 686, 729, 730], "diffus": [651, 730], "vision": [651, 680, 697, 738], "coder": [651, 685, 694, 695, 698, 701, 704, 717, 721, 730], "marketplac": [651, 711, 730], "googl": [651, 671, 691, 730], "amazon": [651, 693, 701], "web": [651, 712, 718, 723, 724, 725, 739], "servic": [651, 710, 717, 730], "softwar": [651, 687, 729, 730, 736], "alibaba": [651, 700, 707, 708, 730], "tencent": [651, 730], "taco": [651, 730], "oliv": [651, 730], "ai": [651, 693, 730, 734, 742], "ecosystem": [651, 730], "lightn": [651, 700], "pip": [651, 675, 678, 681, 683, 686, 695, 698, 703, 705, 707, 708, 712, 713, 714, 715, 736], "34": [651, 725, 744], "program": [651, 678, 687, 693, 710], "automodel": 651, "mistralai": 651, "mistral": 651, "7b": [651, 688, 738, 744], "v0": [651, 675, 715, 738, 739], "woq_conf": 651, "quantized_model": [651, 719, 723, 724], "resnet18": [651, 691, 695, 744], "static_quant_conf": 651, "overview": [651, 741], "jupyterlab": [651, 693, 699, 701, 703, 707, 742], "studio": [651, 701, 710, 720, 742], "topic": 651, "int4": [651, 688, 732, 744], "fp8": [651, 730], "innov": [651, 701, 730], "blog": [651, 730], "oct": [651, 730], "emnlp": [651, 730], "teq": [651, 730, 733, 735], "sep": [651, 730], "neurip": [651, 730], "quala": [651, 730], "minilm": [651, 730, 744], "releas": [651, 686, 699, 701, 703, 707, 709, 721, 724, 725, 745], "legal": [651, 745], "request": [651, 718, 719, 720, 723, 724, 725, 732], "ask": [651, 686], "email": 651, "research": [651, 687, 738, 744], "idea": [651, 712, 729, 738, 741], "discord": 651, "join": [651, 713, 718, 723, 724], "technic": 651, "discuss": 651, "wechat": [651, 730], "img": 651, "bridg": [652, 653, 685], "vanilla": [652, 653, 685], "abcadaptor": 652, "__init__": [652, 671, 672, 673, 689, 741], "query_fw_cap": [652, 654], "query_fused_pattern": 652, "he": 652, "besid": [652, 676, 715, 735], "describ": [652, 654, 671, 675, 682, 712, 739], "past": [652, 735], "mainten": 652, "difficult": [652, 738], "abil": [652, 653, 673, 682, 738], "fragment": 652, "scenario": [652, 669, 676, 690, 729, 735], "granular": [652, 653, 654, 682, 685, 696, 732, 738, 743], "semant": [652, 682], "mla": [652, 691, 732], "becom": [652, 680, 729, 735], "explor": 652, "inspect_tensor": 652, "op_list": [652, 739], "iteration_list": 652, "inspect_typ": 652, "save_to_disk": 652, "quantization_cfg": 652, "set_tensor": 652, "tensor_dict": 652, "diagnosis_help": 652, "fw": 653, "outlin": [653, 654], "instruct": [653, 654, 676, 686, 691, 705, 708, 712, 713, 714, 715, 729, 730, 731, 732, 738, 744], "extend": [653, 654], "accommod": [653, 654], "incorpor": [653, 654, 677, 729, 741], "diagram": [653, 654, 675, 741], "illustr": [653, 654, 677, 741], "sequencediagram": [653, 654, 720], "autonumb": [653, 654], "query_framework_cap": 653, "opwis": 653, "optypewis": 653, "travers": [653, 654, 735, 741], "\u2776": 653, "\u2777": 653, "\u2778": 653, "\u2779": 653, "\u277a": 653, "\u277b": 653, "\u277c": 653, "These": [653, 685, 713], "chapter": 653, "node_op": 653, "confirm": 653, "int8_conv_config": 653, "optype_wise_": 653, "tuning_cfg_to_fw": 653, "Its": [653, 670, 729], "dispatch": [653, 685, 717, 720], "is_perchannel": 653, "is_asymmetr": 653, "convert_bf16": 653, "somewhat": 653, "distort": 653, "line": [653, 671, 678, 685, 693, 698, 699, 718, 739], "let": [654, 682, 698, 729, 731, 743], "overal": [654, 718, 743], "drive": 654, "uint4": 654, "kullback": [654, 676], "leibler": [654, 676], "pytorch_cpu": 654, "1_11_capabl": 654, "cap_s8_1_11": 654, "cap_s8_1_11_conv1d": 654, "per_channel_symmetr": 654, "addition": [654, 678, 729, 741], "per_tensor_symmetr": 654, "due": [654, 680, 729, 732, 738, 739], "nativ": 654, "with_arg": 654, "qscheme": 654, "quant_min": 654, "quant_max": 654, "linux": [669, 681, 686, 704, 710], "x86_64": 669, "aarch64": 669, "prove": [670, 735, 738], "benefici": 670, "uniform": [670, 735], "\u03b2": 670, "\u03b1": 670, "fundament": [670, 690], "primari": [670, 741], "focu": [670, 741], "essenti": [670, 681], "remaind": 670, "enhanc": [670, 693, 729, 730, 734], "resolut": 670, "extrem": 670, "still": [670, 690, 716, 730, 732, 734], "retain": 670, "noteworthi": 670, "vanhouck": 670, "vincent": 670, "andrew": 670, "senior": 670, "mark": 670, "mao": 670, "speed": [670, 690, 701, 729, 730, 732, 741], "2011": 670, "szymon": 670, "migacz": 670, "2017": 670, "mckinstri": 670, "jeffrei": 670, "l": [670, 676, 739, 741], "discov": [670, 739], "1809": 670, "04191": 670, "2018": 670, "mostli": 671, "overli": 671, "argu": 671, "decis": [671, 689], "subprocess": [671, 672], "popen": 671, "pipe": 671, "sub_modul": 671, "namespac": 671, "pollut": 671, "long_str": 671, "extran": 671, "pager": 671, "getenv": 671, "readabl": 671, "seem": 671, "worth": [671, 729], "4f": 671, "65421": 671, "sentenc": 671, "eval_result": 671, "declar": [671, 711], "typealia": 671, "_lossandgradi": 671, "complextfmap": 671, "xx_func": 671, "ordereddict": 671, "plug": [671, 730], "pylanc": 671, "cheeseshopaddress": 671, "chees": 671, "shop": 671, "outofcheeseerror": 671, "crbug": 671, "192795": 671, "cpufreq": [671, 696], "facilit": [671, 693], "__all__": 671, "get_all_config_set_from_config_registri": 671, "algorithm_entri": 671, "autotun": 671, "static_qu": 671, "snippet": [671, 685], "rtn_algo_entri": 671, "vscode": [671, 709, 711], "settings_recommend": 671, "encount": 672, "consum": 672, "previous": 672, "lack": [672, 681], "faster": [672, 674, 680, 730, 741, 744], "Of": 672, "evenli": 672, "divid": [672, 720, 738, 741], "discard": 672, "throw": 672, "awai": 672, "draw": [672, 737, 741], "pin": [672, 703, 707], "reshuffl": 672, "manner": [672, 676, 692], "newdataload": 672, "customis": [672, 673, 689], "ensp": [673, 740], "imagerecord": [673, 678, 743], "image_nam": 673, "cocorecord": 673, "gt": [673, 738, 740], "int64": 673, "offer": 673, "style_transf": 673, "content": [673, 718, 719, 723, 724, 725], "tfrecorddataset": 673, "labelbal": 673, "300": [673, 729, 744], "16": [673, 686, 723, 735, 744], "helloworld": [673, 691, 740], "aid": 674, "deploy": [674, 693, 710, 730, 733, 738], "infrastructur": 674, "diagnos": 675, "gui": [675, 685, 715, 729], "termin": [675, 703, 704, 707, 713], "repeat": [675, 741], "durat": [675, 719, 723, 724, 737], "cd": [675, 678, 686, 712, 714, 715, 717, 718, 723, 724, 725], "setup": [675, 682, 686, 705, 708, 712, 714, 715, 717, 718, 729], "ilsvr2012": 675, "wget": [675, 681, 683, 712, 715], "caff": 675, "berkeleyvis": 675, "caffe_ilsvrc12": 675, "xvzf": 675, "image_recognit": [675, 715, 739], "resnet50_torchvis": 675, "ptq_static": [675, 714], "resnet50_v1": [675, 678, 690], "dataset_loc": [675, 715, 723, 739], "label_path": 675, "quantiti": 675, "vec": 675, "frac": [675, 738], "sigma": 675, "var": 675, "happen": 675, "dispers": [675, 713], "cg": [675, 715, 739], "conv0": [675, 715, 739], "expens": [676, 690, 741], "mobil": [676, 690, 744], "produc": 676, "logit": 676, "softmax": 676, "kd": 676, "patient": 676, "compact": [676, 690, 696, 729], "agnost": 676, "resourc": [676, 717, 720, 741], "convolut": [676, 730], "ia": 676, "attach": [676, 690, 738], "shallow": 676, "deepest": 676, "deeper": 676, "10006": [676, 677], "student_output": [676, 677], "student_loss": [676, 677], "training_func_for_nc": [676, 677], "distil_loss_conf": 676, "accordingli": [676, 701, 738], "promis": [677, 690, 729], "huge": [677, 715, 729, 733], "heavi": 677, "light": 677, "booster": 677, "degrad": [677, 729, 741], "novel": [677, 693, 704, 710], "comb": 677, "distillation_criterion": [677, 690, 728], "q_conf": 677, "horovod": 678, "enable_eager_execut": 678, "yaml_file_path": 678, "pre_process": 678, "simpli": [678, 692, 693, 695, 698, 710, 718], "evaluation_result": 678, "evaluation_time_cost": 678, "partit": [678, 729], "distributedsampl": 678, "train_sampl": 678, "train_dataset": [678, 732], "num_replica": 678, "rank": 678, "train_load": 678, "train_kwarg": 678, "adadelta": 678, "distributedoptim": 678, "named_paramet": 678, "broadcast_paramet": 678, "root_rank": 678, "broadcast_optimizer_st": 678, "set_epoch": 678, "batch_idx": 678, "nll_loss": 678, "log_interv": 678, "0f": 678, "tloss": 678, "6f": 678, "dry_run": 678, "test_func": 678, "host": [678, 718, 720, 723, 724, 725], "num_of_process": 678, "002": 678, "ssh": [678, 710], "prompt": 678, "readm": [678, 723], "exactli": [678, 694], "recognit": [678, 680, 729, 739], "resizecropimagenet": [678, 740], "realiz": [678, 727, 734, 737], "tow": 678, "node1": [678, 723, 724], "node2": [678, 723, 724], "TO": [678, 695, 715], "your_node1_nam": 678, "your_node2_nam": 678, "resnet50_fp32_pretrained_model": 678, "nc_resnet50_v1": 678, "resnet": [678, 744], "varieti": [679, 731, 741], "demonstr": [679, 693, 723, 724, 725, 739], "speedup": [679, 685, 732], "2x": [679, 685], "vnni": [679, 685, 731, 732], "exchang": 680, "hope": 680, "inc_model": [680, 692], "fp32_onnx_config": 680, "verifi": [680, 688], "vgg16": [680, 744], "mobilenet": [680, 737, 744], "rcnn": 680, "torchscript": [680, 733, 738], "unsupport": [680, 690, 729], "add_relu": 680, "conv1d_relu": 680, "conv2d_relu": 680, "group_norm": 680, "hardswish": 680, "instance_norm": 680, "layer_norm": 680, "leaky_relu": 680, "sigmoid": 680, "toolchain": [681, 730], "bare": 681, "metal": 681, "sudo": [681, 696], "apt": [681, 686, 696, 704], "python3": 681, "dev": [681, 703, 707], "distutil": 681, "libgl1": 681, "mesa": 681, "glx": 681, "libglib2": 681, "ln": 681, "sf": 681, "usr": 681, "incompat": 681, "88": [681, 737, 744], "80": [681, 733, 739, 744], "pyobject": 681, "reinstal": 681, "libgl": 681, "yum": [681, 686], "opencv": [681, 686, 704], "conda": [681, 686, 696, 704, 723, 724, 725, 736], "13": [681, 686, 712, 736, 738], "pend": [681, 719], "sqlalchemi": 681, "27": [681, 744], "alemb": 681, "forg": [681, 686], "quick": [682, 691, 729, 742, 743], "friendli": [682, 690, 730, 738, 742, 743], "dive": [682, 742], "purpos": [682, 691, 710, 712, 731, 732], "syntax": 682, "go": [682, 705, 708, 716, 731, 735, 740], "up1": 682, "up2": 682, "valid_mixed_precis": 682, "addn": 682, "grappler_optim": 682, "constfold": 682, "arithmet": 682, "debug_stripp": 682, "googleapi": [683, 712, 715], "v1_6": [683, 712, 715], "mobilenet_v1_1": [683, 712, 723], "0_224_frozen": [683, 712, 723], "major": [684, 715, 732, 738], "concept": [684, 737, 742], "rather": [684, 735], "custom_metr": 684, "refin": [684, 729], "420": 685, "geomean": 685, "upload": [685, 705, 708], "click": [685, 693, 694, 701, 704, 710, 715, 730, 739], "qintegerop": [685, 732], "plan": 685, "oneapi": [686, 730, 742], "analyt": [686, 730, 742], "success": [686, 712], "11": [686, 689, 691, 712, 738, 741, 744], "frequent": 686, "pypi": [686, 705, 708], "nightli": 686, "headless": [686, 704], "fastai": 686, "esri": 686, "consolid": 686, "latest": [686, 730, 736], "eas": [686, 695, 730], "along": [686, 729, 735], "streamlin": [686, 717, 730], "scienc": 686, "websit": 686, "anaconda": [686, 717, 718], "suit": [686, 711, 739], "formerli": 686, "skylak": 686, "cascad": 686, "lake": [686, 691, 730], "cooper": [686, 691, 730], "ic": [686, 730], "sapphir": [686, 688], "rapid": [686, 688], "hbm": 686, "arctic": 686, "sound": 686, "pont": 686, "vecchio": 686, "cento": [686, 744], "ubuntu": 686, "22": [686, 744], "04": [686, 744], "maco": 686, "ventura": 686, "fortensorflow": 686, "forpytorch": 686, "12": [686, 712, 744], "tf_enable_onednn_opt": 686, "onednn": [686, 691, 732], "newer": 686, "subject": 687, "accompani": [687, 741], "wish": 687, "bibtex": 687, "author": 687, "feng": 687, "tian": 687, "hanwen": 687, "haihao": [687, 729], "shen": [687, 729], "suyu": 687, "chen": 687, "howpublish": 687, "year": 687, "logo": 687, "atom": 687, "phi": 687, "pentium": 687, "vtune": 687, "corpor": 687, "subsidiari": 687, "brand": 687, "claim": 687, "sq": [688, 738], "woq": 688, "4th": [688, 730, 732], "gen": [688, 691, 730, 732, 734], "codenam": [688, 691], "quickli": [688, 741, 742], "eleutherai": [688, 714, 738, 744], "6b": [688, 714, 738, 744], "facebook": [688, 716, 738, 744], "3b": [688, 738], "30b": [688, 738, 744], "llama": [688, 729, 730, 733, 735, 738, 744], "13b": [688, 738, 744], "70b": [688, 744], "tiiuae": [688, 738, 744], "40b": 688, "soon": 688, "popularli": 689, "industri": [689, 730], "label_map": 689, "ap": 689, "curv": 689, "turn": [689, 704, 733], "target_boxes_num": 689, "str_label": 689, "int_label": 689, "inturn": 689, "cocomap": 689, "vocmap": 689, "categor": 689, "multiclass": 689, "multilabel": 689, "newmetr": 689, "reset": 689, "reflect": [689, 740], "new_metr": 689, "deliv": [690, 730, 736], "conveni": [690, 717], "upgrad": 690, "veri": [690, 711, 715, 732, 735, 741, 742], "comprehens": [690, 742], "resort": 690, "automodelforsequenceclassif": 690, "autotoken": 690, "val_dataset": [690, 732], "val_dataload": [690, 732], "worker": [690, 720, 723, 724, 725, 732], "ping_memori": [690, 732], "formul": 690, "effort": 690, "onnxrt_integ": [690, 743], "onnxrt_qlinear": [690, 743], "image_tensor": [690, 743], "post_training_dynamic_qu": [690, 731, 741], "1000": [690, 719, 743], "2000": 690, "sampling_s": [690, 743], "model_wis": [690, 743], "op_dict": 690, "op_wis": [690, 739, 743], "sigopt_api_token": [690, 737, 741], "sigopt_project_id": [690, 737, 741], "sigopt_experiment_nam": [690, 737, 741], "demo": 690, "600": 690, "training_arg": 690, "emul": [690, 732], "trainer": [690, 701], "briefli": [690, 738], "pruning_func": 690, "train_dataload": [690, 729, 732], "n_gpu": 690, "gradient_accumulation_step": 690, "clip_grad_norm_": 690, "max_grad_norm": 690, "start_epoch": [690, 731, 743], "end_epoch": [690, 731, 743], "97": [690, 744], "newli": [690, 729], "on_after_optimizer_step": [690, 729], "layer3": [690, 729], "0004": 690, "randomresizedcrop": [690, 740], "totensor": [690, 740], "485": 690, "456": [690, 744], "406": [690, 744], "nepoch": 690, "cnt": 690, "loss_sum": 690, "iter_bar": 690, "desc": 690, "teacher_logit": 690, "train_fun": 690, "training_func": 690, "recent": [690, 691], "growth": [690, 691, 729], "significantli": [690, 691, 713, 715, 729, 741], "bandwidth": [690, 691, 735], "exit_polici": [690, 743], "determinist": 690, "meaning": [690, 728], "reli": [690, 738], "prune_conf": 690, "quantization_aware_training_conf": 690, "aforement": 690, "inset": 690, "p_conf": [690, 728], "ssd_mobilenet_v1": 690, "benchmarkconf": 690, "sixteen": 691, "launch": [691, 711, 716], "3rd": [691, 730, 732, 734], "boost": [691, 694, 710, 729, 730], "x86": 691, "avx512": [691, 732], "vcvtne2ps2bf16": 691, "vcvtneps2bf16": 691, "vdpbf16p": 691, "fbgemm": [691, 732], "tensorrtexecutionprovid": [691, 732], "cudaexecutionprovid": [691, 732], "dnnlexecutionprovid": [691, 732], "avx512_bf16": 691, "plu": 691, "persist": 692, "brought": [692, 694, 701, 732], "tf2": 692, "h5": 692, "hybridblock": 692, "0000": 692, "saved_result": [692, 714, 735], "simplifi": [693, 704, 710, 729, 730], "acquir": 693, "analysi": [693, 710, 729, 737], "heurist": [693, 710], "great": 693, "autocast": 693, "my_model": 693, "no_grad": 693, "memory_format": 693, "112": 693, "plugin": [693, 711], "aw": [693, 701, 720, 730, 744], "sagemak": [693, 701], "neural_cod": [693, 695, 697, 698, 699, 701], "bench": 693, "superbench": 693, "enjoi": [694, 698, 701], "modern": [695, 735], "democrat": [695, 730], "programm": [695, 701, 710], "nano_bf16_channels_last": 695, "nano_bf16_ipex_channels_last": 695, "nano_bf16_ipex": 695, "nano_bf16": 695, "nano_fp32_channels_last": 695, "nano_fp32_ipex_channels_last": 695, "nano_fp32_ipex": 695, "nano_gpu_to_cpu": 695, "nano_int8": 695, "nano_jit_bf16_channels_last": 695, "nano_jit_bf16_ipex_channels_last": 695, "nano_jit_bf16_ipex": 695, "nano_jit_bf16": 695, "nano_jit_fp32_channels_last": 695, "nano_jit_fp32_ipex_channels_last": 695, "nano_jit_fp32_ipex": 695, "nano_jit_fp32": 695, "nano_onnxruntime_fp32": 695, "nano_onnxruntime_int8_qlinear": 695, "openvino": 695, "nano_openvino_fp32": 695, "nano_openvino_int8": 695, "bc": [696, 704], "conda_prefix": 696, "echo": 696, "tradit": [696, 729], "libjemalloc": 696, "libiomp5": 696, "home": 696, "lib": 696, "ld_preload": 696, "malloc_conf": 696, "oversize_threshold": 696, "background_thread": 696, "metadata_thp": 696, "dirty_decay_m": 696, "9000000000": 696, "muzzy_decay_m": 696, "kmp_affin": 696, "kmp_blocktim": 696, "dnnl_primitive_cache_capac": 696, "governor": 696, "scaling_governor": 696, "powersav": 696, "tee": 696, "pytorch_jit_script": [697, 700], "pytorch_channels_last": [697, 700], "run_bench": 697, "patch": [697, 710], "patch_path": 697, "your_patch_path": 697, "sweep": 697, "sweep_object": 697, "bench_config": 697, "bench_featur": 697, "sai": 698, "run_glu": [698, 699, 721, 724, 725], "requisit": 698, "task_nam": [698, 699, 721, 724, 725], "do_ev": [698, 699, 714, 721, 724, 725], "itself": [698, 729], "run_glue_optim": 698, "static_ipex": 698, "auto_qu": 699, "v4": [699, 721, 724, 725, 744], "albert": [699, 744], "sst2": 699, "alexnet": [699, 744], "pytorch_amp": 700, "optimize_for_infer": 700, "pytorch_jit_trac": 700, "pytorch_jit_script_ofi": 700, "pytorch_jit_trace_ofi": 700, "torchdynamo": 700, "pytorch_torchdynamo_jit_script": 700, "pytorch_torchdynamo_jit_trac": 700, "pytorch_torchdynamo_jit_script_ofi": 700, "pytorch_torchdynamo_jit_trace_ofi": 700, "pytorch_inc_bf16": 700, "pytorch_inc_static_quant_fx": 700, "pytorch_inc_static_quant_ipex": 700, "pytorch_inc_static_quant_ipex_xpu": 700, "pytorch_inc_dynamic_qu": 700, "pytorch_ipex_fp32": 700, "pytorch_ipex_bf16": 700, "pytorch_ipex_int8_static_qu": 700, "pytorch_ipex_int8_dynamic_qu": 700, "blade": 700, "disc": 700, "pytorch_aliblad": 700, "pytorch_lightning_bf16_cpu": 700, "tensorflow_amp": 700, "keras_amp": 700, "tensorflow_inc": 700, "keras_inc": 700, "onnx_inc_static_quant_qlinear": 700, "onnx_inc_static_quant_qdq": 700, "onnx_inc_dynamic_qu": 700, "optimum": [700, 701, 713, 735], "pytorch_inc_huggingface_optimum_stat": 700, "pytorch_inc_huggingface_optimum_dynam": 700, "intel_extension_for_transform": 700, "bigdl": [700, 701], "nano": [700, 701], "nano_": 700, "inc_auto": 700, "delight": 701, "announc": 701, "500": [701, 719, 744], "jupyt": [701, 703, 704, 707], "isa": 701, "adjust": [701, 732, 738], "delta": 701, "acc_delta": 701, "int8_acc": 701, "fp32_acc": 701, "ext": [703, 705, 707, 708, 709], "lab": [703, 704, 705, 707, 708], "nodej": [703, 707], "jlpm": [703, 707], "yarn": [703, 707], "npm": [703, 704, 707], "lieu": [703, 707], "labextens": [703, 704, 707], "typescript": [703, 707], "watch": [703, 707, 716], "immedi": [703, 707, 729], "refresh": [703, 707], "browser": [703, 707, 712, 716], "wait": [703, 707, 710, 720], "rebuilt": [703, 707], "easier": [703, 707, 710, 712, 730], "symlink": [703, 707], "down": 704, "finish": [704, 720], "blank": 704, "cell": 704, "gain": [704, 728, 730], "mkl": 704, "jemalloc": 704, "pip3": 704, "pyproject": [705, 708], "toml": [705, 708], "twine": [705, 708], "whl": [705, 708], "dist": [705, 708], "sdist": [705, 708], "bdist_wheel": [705, 708], "frontend": [705, 708, 718, 725], "login": [705, 708, 737], "cut": [705, 708], "admin_github_token": [705, 708], "pypi_token": [705, 708], "npm_token": [705, 708], "secret": [705, 708], "panel": [705, 708, 710], "draft": [705, 708], "changelog": [705, 708, 709], "pkg": [705, 708], "bot": [705, 708], "pick": [705, 708, 711], "feedstock": [705, 708], "hatch": 708, "notabl": 709, "daili": 710, "advantag": [710, 729, 731, 741], "remot": 710, "server": [710, 712, 715, 718, 723, 724, 725], "re": [710, 716, 735], "market": 710, "uninstal": 710, "fill": [710, 737, 740, 741], "upper": 710, "sidebar": 710, "hover": 710, "track": [710, 737], "argpars": 710, "pop": [710, 720], "diff": 710, "manifest": 711, "palett": 711, "registercommand": 711, "amodio": 711, "tsl": 711, "matcher": 711, "dbaeumer": 711, "eslint": [711, 716], "press": 711, "f5": 711, "ctrl": 711, "hello": 711, "world": 711, "breakpoint": 711, "consol": [711, 716], "relaunch": 711, "toolbar": 711, "node_modul": 711, "viewlet": 711, "dropdown": 711, "runner": [711, 716], "startup": 711, "bundl": 711, "neural_insight": [712, 714, 715], "tl": 712, "ui": 712, "5000": 712, "338174d13706855fc6924cec7b3a8ae8": 712, "listen": 712, "firewal": 712, "8080": 712, "cert": 712, "path_to_cert": 712, "crt": 712, "path_to_private_kei": 712, "encrypt": 712, "expos": 712, "forfeit": 712, "client": [712, 718, 725], "extern": 712, "threat": 712, "diagnost": 712, "skill": 712, "feel": [712, 716], "layoutlmv3": [713, 744], "seqev": 713, "sentencepiec": 713, "timm": 713, "fvcore": 713, "pillow": 713, "einop": 713, "textdist": 713, "setuptool": 713, "cli": 713, "hypjudi": 713, "finetun": [713, 729, 735, 744], "funsd": [713, 744], "calib_dataset": 713, "incdataset": 713, "eval_dataset": 713, "poor": [713, 739], "9049": 713, "2989": 713, "66": [713, 744], "9631": 713, "glob": 713, "panda": 713, "pd": 713, "set_opt": 713, "max_row": 713, "max_column": 713, "getmtim": 713, "activations_t": 713, "weights_tabl": [713, 714], "read_csv": 713, "nweight": 713, "descend": 713, "sorted_data": 713, "sort_valu": 713, "ascend": 713, "evid": 713, "tip": 713, "8981": 713, "7502": 713, "run_clm": 714, "wikitext": [714, 744], "dataset_config_nam": 714, "do_train": 714, "inspect_sav": 714, "inspect_result": 714, "quan": 714, "model_summari": 714, "incept": [715, 744], "v3": [715, 744], "inception_v3": [715, 739], "inceptionv3_fp32_pretrained_model": [715, 739], "bash": [715, 739], "prepare_dataset": 715, "sh": [715, 739], "raw_dir": 715, "img_raw": 715, "delet": [715, 729], "run_tun": 715, "nc_inception_v3": 715, "highest": [715, 721, 741], "satisfactori": 715, "webpag": 715, "spike": 715, "bottom": 715, "chart": [715, 732, 737, 739], "concentr": 715, "But": 715, "bigger": 715, "bootstrap": 716, "localhost": [716, 718, 723, 724], "3000": 716, "lint": 716, "interact": [716, 737], "correctli": 716, "hash": [716, 719], "readi": [716, 729], "aren": 716, "transit": 716, "webpack": 716, "babel": 716, "tweak": 716, "ever": 716, "curat": 716, "suitabl": 716, "middl": [716, 738], "shouldn": 716, "understand": [716, 732, 739, 742], "wouldn": 716, "couldn": 716, "troubleshoot": 716, "effortlessli": 717, "grpc": [717, 718, 722, 723, 724, 726], "queue": 717, "seamlessli": [717, 729, 741], "mpi": [717, 718, 741], "neural_solut": [717, 718, 723, 724, 725], "task_monitor_port": [718, 723, 724, 725], "22222": [718, 723, 724, 725], "result_monitor_port": [718, 723, 724, 725], "33333": [718, 723, 724, 725], "restful_api_port": [718, 723, 724, 725], "hostfil": [718, 720, 723, 724, 725], "grpc_api_port": [718, 723, 724, 725], "api_typ": [718, 723, 724, 725], "conda_env": [718, 723, 724, 725], "upload_path": [718, 723, 724, 725], "8000": [718, 723, 724, 725], "monitor": [718, 723, 724, 725], "3333": [718, 723, 724, 725], "2222": [718, 723, 724, 725], "ns_workspac": [718, 723, 724, 725], "hf_model": [718, 722, 724, 725], "curl": [718, 719, 723, 724], "task_id": [718, 723, 724, 725], "usernam": 718, "db": [718, 720], "serve_log": [718, 723, 724, 725], "frontend_grpc": 718, "task_log": 718, "task_bdf0bd1b2cc14bc19bce12d4f9b333c7": 718, "task_workspac": 718, "bdf0bd1b2cc14bc19bce12d4f9b333c7": 718, "aliv": 718, "commonli": [718, 729], "hostnam": 718, "breakdown": 718, "ip": 718, "hous": 718, "host1": [718, 723, 724], "host2": [718, 723, 724], "query_id": 718, "oaa": 719, "host_ip": 719, "task_request": [719, 723, 724, 725], "tuning_info": [719, 723], "optimization_result": [719, 723], "result_path": [719, 723, 724], "closur": 719, "404": [719, 729, 744], "health": 719, "healthi": 719, "400": [719, 744], "alloc": 720, "incom": 720, "taskmonitor": 720, "cluster": [720, 723, 724, 741], "tasklaunch": 720, "resultmonitor": 720, "receiv": [720, 737], "p1": 720, "notif": 720, "p2": 720, "p3": 720, "mpirun": [720, 741], "perf": 720, "p4": 720, "four": [720, 739, 744], "classdiagram": 720, "taskdb": 720, "get_statu": 720, "update_statu": 720, "task_collect": 720, "append_task": 720, "get_all_pending_task": 720, "update_task_statu": 720, "task_db": 720, "wait_new_task": 720, "schedule_task": 720, "dispatch_task": 720, "launch_task": 720, "query_task_statu": 720, "node_list": 720, "reserve_resourc": 720, "get_node_statu": 720, "gcp": [720, 730], "script_url": [721, 723, 724, 725], "archiv": 721, "tf_example1": [722, 723, 724], "hf_models_grpc": [722, 725], "00173": 723, "01024": 723, "task_request_distribut": 723, "custom_models_optim": 723, "7602cd63d4c849e7a686a8165a77f69d": [723, 724], "151": [723, 744], "8617": 723, "17": [723, 744], "8213": [723, 744], "number_of_socket": [723, 724], "number_of_thread": [723, 724], "cdf419910f9b4d2a8320d0e420ac1d0a": 724, "optimized_result": 724, "58": [724, 744], "3162": 724, "6488": [724, 744], "06": [725, 743, 744], "55": [725, 744], "d3e10a49326449fb9d0d62f2bfc1cb43": 725, "fastapi": 726, "multi_object": 727, "benefit": 728, "instanti": 728, "neuron": 729, "art": 729, "grown": 729, "unpreced": 729, "increasingli": 729, "crucial": 729, "stand": [729, 741], "shrink": 729, "contextu": 729, "scene": 729, "haven": 729, "color": [729, 733], "lowest": [729, 741], "emsp": 729, "downstream": 729, "prone": 729, "co": 729, "discourag": 729, "penal": 729, "parameter": 729, "lightweight": 729, "perceptron": 729, "mlp": 729, "valuabl": [729, 739], "basi": 729, "billion": 729, "dolli": [729, 738, 744], "mpt": [729, 738, 744], "lm": [729, 744], "lamini": [729, 738], "mention": [729, 735], "tend": 729, "exemplifi": 729, "complement": 729, "fortieth": 729, "miss": [729, 732], "pruner2": 729, "few": [729, 730, 738, 741], "lm_head": 729, "yourself": 729, "uncertain": 729, "auto_config": 729, "quit": 729, "straightforward": [729, 735, 738], "pruning_pattern": 729, "pruning_start": 729, "pruning_end": 729, "sparse_gpt": 729, "embed_out": 729, "card": 729, "hesit": 729, "causal": 729, "clm": 729, "sst": [729, 744], "25": [729, 744], "63": [729, 744], "24": [729, 741, 744], "35": [729, 744], "flan": 729, "t5": [729, 744], "english": 729, "romanian": 729, "381": 729, "yolov5": 729, "75": [729, 744], "2x1": [729, 744], "801": 729, "7895": 729, "signific": [729, 730, 733, 738], "reduct": [729, 733, 743], "namhoon": 729, "lee": 729, "thalaiyasingam": 729, "ajanthan": 729, "philip": 729, "torr": 729, "2019": 729, "zafrir": 729, "ofir": 729, "ariel": 729, "larei": 729, "boudoukh": 729, "mosh": 729, "wasserblat": 729, "2111": 729, "05754": 729, "2021": 729, "kwon": 729, "kim": 729, "mahonei": 729, "hassoun": 729, "keutzer": 729, "gholami": 729, "pp": 729, "24101": 729, "24116": 729, "frantar": [729, 735], "alistarh": 729, "medium": 730, "aug": 730, "juli": 730, "onnxcommunitymeetup2023": 730, "chatbot": 730, "june": 730, "msft": 730, "netflix": 730, "apr": 730, "mlperf": [730, 744], "5x": 730, "\u96c6\u6210\u82f1\u7279\u5c14": 730, "\u817e\u8baf\u4e91taco": 730, "kit\u4e3aai\u5e94\u7528\u5e26\u6765\u9ad8\u6548\u5f02\u6784\u52a0\u901f\u670d\u52a1": 730, "mar": 730, "heterogen": 730, "jan": 730, "busi": 730, "amx": 730, "journei": 730, "dec": 730, "mleffici": 730, "deepen": 730, "foundat": 730, "intellig": 730, "vmware": 730, "applianc": 730, "bitnami": 730, "nov": 730, "sota": 730, "twitter": 730, "linkedin": 730, "zone": 730, "land": 730, "pat": 730, "keynot": 730, "intelon": 730, "chines": 730, "purif": 730, "sacrif": 730, "jun": 730, "partner": 730, "feb": 730, "joint": 730, "bilibili": 730, "gestalt": 730, "ml": 730, "doubl": 730, "abound": 730, "lpot": [730, 736], "nextplatform": 730, "cern": 730, "gan": 730, "3dgan": 730, "iml": 730, "workshop": 730, "asplo": 730, "18": [730, 744], "highli": [730, 735], "intelcaff": 730, "aris": 731, "henc": 731, "onnxrt_qoper": 731, "quant_aware_train": 731, "weight_compress": [731, 743], "initial_spars": [731, 743], "prune_typ": [731, 743], "basic_magnitud": [731, 743], "update_frequ": 731, "prune_domain": 731, "tile_pattern_1x1": 731, "invent": 732, "cost": [732, 735], "theoret": [732, 735], "zeropoint": 732, "255": [732, 738], "overflow": 732, "unseen": 732, "peopl": 732, "mimic": 732, "fact": 732, "ultim": 732, "pain": 732, "lossi": 732, "philosophi": 732, "neither": 732, "nor": 732, "val_load": 732, "avg": 732, "themselv": 732, "dmlexecutionprovid": 732, "meanwhil": 733, "substanti": 733, "pose": 733, "challeng": 733, "greatli": [733, 735], "constrain": 733, "grei": 733, "blue": 733, "rectangl": 733, "w8a8": [733, 735], "10005": 733, "rtn_arg": [733, 735], "ouput_dir": 733, "fp32_model_path": 733, "int8_model_path": 733, "ON": 734, "forc": 734, "postposttrainingquantconfig": 734, "bf16wrapper": 734, "retrac": 734, "preval": 735, "grow": 735, "demand": 735, "trade": 735, "bottleneck": 735, "roughli": 735, "speak": 735, "capac": [735, 737], "flop": 735, "famou": 735, "approx": 735, "bmm": 735, "100x": 735, "excel": 735, "stai": [735, 738], "quantif": [735, 738], "think": 735, "intuit": [735, 738], "uniformli": 735, "qlora": 735, "invers": 735, "restor": 735, "protect": 735, "inspir": 735, "c_": 735, "normalfloat": 735, "e2m1": 735, "bnb": 735, "805": 735, "awq_arg": 735, "gptq_arg": 735, "mitig": 735, "date": 735, "sym_full_rang": 735, "qweight_config_path": 735, "gptq_config_path": 735, "gptq_config": 735, "use_full_length": 735, "compressed_model": 735, "omit": 735, "rtn_g32asym": 735, "gptq_g32asym": 735, "gptq_g32asym_disable_last_matmul": 735, "gptq_g128asym": 735, "awq_g32asym": 735, "xiao": [735, 738], "guangxuan": [735, 738], "2211": [735, 738], "10438": [735, 738], "wei": [735, 738], "xiui": [735, 738], "suppress": [735, 738], "2209": [735, 738], "13325": [735, 738], "lin": 735, "ji": 735, "00978": 735, "elia": 735, "dettmer": 735, "tim": 735, "2305": 735, "14314": 735, "site": 736, "sed": 736, "your_script": 736, "backbon": 737, "sigopt_experiment_id": 737, "nc": [737, 741], "suffici": 737, "ordinari": 737, "latenc": [737, 741], "8266": 737, "8372": 737, "2132": 737, "83": [737, 738, 744], "7495": 737, "8299": 737, "8294": 737, "85": [737, 738, 744], "0837": 737, "8291": 737, "4469": 737, "gigant": 738, "systemat": 738, "migrat": [738, 742], "difficulti": 738, "mathemat": 738, "allevi": 738, "coarsest": 738, "finer": [738, 741], "matric": 738, "similarli": 738, "finest": 738, "consumpt": 738, "suppos": 738, "6839": 738, "4741": 738, "7451": 738, "9301": 738, "1742": 738, "6835": 738, "q_min": 738, "q_max": 738, "q_x": 738, "clamp_": 738, "round_": 738, "w_q": 738, "00296431384049356": 738, "59": [738, 744], "172": [738, 744], "192": 738, "w_dq": 738, "2220": 738, "1510": 738, "2420": 738, "2570": 738, "0500": 738, "1890": 738, "mseloss": 738, "1983354538679123": 738, "6848": 738, "4743": 738, "7440": 738, "9308": 738, "1749": 738, "385297635664756e": 738, "07": [738, 743, 744], "quantize_per_channel": 738, "x_tmp": 738, "detach": 738, "keepdim": 738, "dequantize_per_channel": 738, "0029": [738, 744], "0036": 738, "162": [738, 744], "48": [738, 744], "72": [738, 744], "93": [738, 744], "207": 738, "139": [738, 744], "6837": 738, "4734": 738, "1751": 738, "6821": 738, "637690492221736e": 738, "6376e": 738, "3852e": 738, "cdot": 738, "quantize_per_tensor_absmax": 738, "n_bit": 738, "div_": 738, "0806": 738, "7589": 738, "6038": 738, "3815": 738, "5040": 738, "7174": 738, "5444": 738, "5826": 738, "7772": 738, "5555": 738, "3740": 738, "3253": 738, "0698": 738, "1381": 738, "5972": [738, 744], "0086": 738, "0737": 738, "8298": 738, "6883": 738, "2991": 738, "1601": 738, "6506": 738, "8246": 738, "3924": 738, "3845": 738, "8768": 738, "w_scale": 738, "x_q": 738, "x_scale": 738, "84": [738, 744], "120": 738, "0059755356051027775": 738, "89": [738, 744], "119": 738, "57": [738, 744], "006533813662827015": 738, "y_q": 738, "17509": 738, "7608": 738, "4055": 738, "16599": 738, "21020": 738, "10016": 738, "9860": 738, "22444": 738, "y_dq": 738, "6836": 738, "2970": 738, "1583": 738, "6481": 738, "8207": 738, "3911": 738, "3850": 738, "8763": 738, "though": 738, "simplic": 738, "fp1": 738, "fp2": 738, "subsect": [738, 743], "x1": [738, 741], "x2": [738, 741], "herebi": 738, "optdecoderlay": 738, "blockwis": 738, "waq": 738, "overhead": 738, "hardtanh": 738, "t5norm": 738, "llamanorm": 738, "groupnorm": 738, "lambada": 738, "openai": [738, 744], "sweet": 738, "spot": 738, "bigscienc": [738, 744], "560m": 738, "354": 738, "3542": 738, "1b7": 738, "4634": 738, "4936": 738, "518": 738, "5185": 738, "7b1": [738, 744], "5764": [738, 744], "5977": 738, "bloomz": [738, 744], "3947": 738, "3930": 738, "4828": 738, "4906": 738, "5018": 738, "4980": 738, "5593": [738, 744], "5552": 738, "125m": 738, "379": 738, "3757": 738, "350m": 738, "4516": 738, "4533": 738, "5789": 738, "5742": 738, "6365": 738, "6404": 738, "6769": [738, 744], "6804": [738, 744], "6872": 738, "6814": 738, "7149": 738, "7128": 738, "66b": 738, "7398": 738, "7326": 738, "7361": [738, 744], "7357": 738, "7627": [738, 744], "7590": 738, "7759": [738, 744], "7840": 738, "65b": 738, "7908": 738, "7957": 738, "7392": [738, 744], "7335": [738, 744], "chat": [738, 744], "7058": [738, 744], "6994": 738, "7677": [738, 744], "7615": [738, 744], "6831": [738, 744], "mbzuai": 738, "124m": 738, "3804": 738, "3887": 738, "774m": 738, "5048": 738, "5057": 738, "5b": 738, "5443": [738, 744], "5436": 738, "mosaicml": [738, 744], "655": [738, 744], "6499": 738, "stabilityai": 738, "stablelm": 738, "4172": 738, "4149": 738, "togethercomput": 738, "redpajama": 738, "incit": 738, "6542": 738, "6735": 738, "6718": 738, "6740": [738, 744], "6569": 738, "6621": 738, "7143": 738, "7221": 738, "6895": 738, "6953": [738, 744], "databrick": [738, 744], "6866": [738, 744], "6297": 738, "6247": 738, "6437": [738, 744], "6392": 738, "7332": 738, "7632": 738, "asterisk": 738, "consider": 738, "arang": 738, "tolist": 738, "default_alpha": 738, "step_siz": 738, "shared_criterion": 738, "do_blockwis": 738, "jason": 738, "emerg": 738, "transact": 738, "yvinec": 738, "edouard": 738, "proceed": 738, "cvf": 738, "winter": 738, "instrument": 739, "writer": 739, "_pre_eval_hook": 739, "_post_eval_hook": 739, "submodul": 739, "whitelist": 739, "_recordingobserv": 739, "output_tensors_dict": 739, "current_it": 739, "get_tensor_valu": 739, "_observer_forward_hook": 739, "activation_post_process": 739, "_add_observer_": 739, "named_children": 739, "leaf": 739, "add_modul": 739, "register_forward_hook": 739, "dump_tim": 739, "summarywrit": 739, "_acc": 739, "tune_": 739, "add_graph": 739, "get_observer_dict": 739, "observer_dict": 739, "is_quant": 739, "add_histogram": 739, "shell": 739, "bind_al": 739, "logdir_spec": 739, "tune_0_acc0": 739, "tune_1": 739, "tune_1_acc0": 739, "79": [739, 744], "baseline_acc_0": 739, "776": 739, "tune_1_acc_0": 739, "095": 739, "runs_v3": 739, "run_tuning_dump_tensor": 739, "inceptionv3": 739, "run_quant": 739, "topologi": 739, "nc_inceptionv3": 739, "inceptionv3_dump_tensor": 739, "eightbit": 739, "disappear": 739, "centercrop": 740, "randomcrop": 740, "cropres": 740, "decodeimag": 740, "jpeg": 740, "encodejp": 740, "alignimagechannel": 740, "68": [740, 744], "116": 740, "78": [740, 744], "103": 740, "94": [740, 744], "017": 740, "bilinearimagenet": [740, 743], "topilimag": 740, "padding_mod": 740, "border": 740, "pixel": 740, "edg": 740, "colorjitt": 740, "bright": 740, "satur": 740, "hue": 740, "jitter": 740, "tondarrai": 740, "o1": 741, "human": 741, "aggress": 741, "classic": 741, "flowchart": 741, "htmllabel": 741, "td": 741, "classdef": 741, "itemstyl": 741, "cce5ff": 741, "stroke": 741, "99ccff": 741, "s1": 741, "s2": 741, "s3": 741, "s4": 741, "s5": 741, "s6": 741, "s7": 741, "nbsp": 741, "subgraphstyl": 741, "ffffff": 741, "attempt": 741, "post_training_auto_qu": 741, "increment": 741, "ii": 741, "spent": 741, "hawq_v2_loss": 741, "model_loss": 741, "black": 741, "compli": 741, "posterior": 741, "short": 741, "loglevel": 741, "endlessli": 741, "perspect": 741, "smbo": 741, "appl": 741, "surrog": 741, "densiti": 741, "parzen": 741, "greatest": 741, "hour": 741, "dai": 741, "next_tune_cfg": 741, "overridden": 741, "replic": 741, "replica": 741, "fed": 741, "synchron": 741, "number_of_process": 741, "run_cmd": 741, "abctunestrategi": 741, "familiar": 742, "notebook": 742, "introduct": 742, "organ": 743, "logic": 743, "mobilenet_v1": 743, "40": [743, 744], "beta_1": 743, "beta_2": 743, "epsilon": 743, "sparsecategoricalcrossentropi": 743, "sum_over_batch_s": 743, "from_logit": 743, "54": [743, 744], "19": [743, 744], "09": 744, "1x": 744, "platinum": 744, "8480": 744, "8ghz": 744, "56": 744, "ht": 744, "turbo": 744, "256gb": 744, "16x16gb": 744, "ddr5": 744, "4800": 744, "mt": 744, "bio": 744, "3a14": 744, "tel2p1": 744, "microcod": 744, "0x2b0001b0": 744, "gcc": 744, "20210514": 744, "red": 744, "hat": 744, "visit": 744, "1s4c14ins1bsthroughput": 744, "sec": 744, "74": 744, "2914": 744, "621": 744, "69x": 744, "76": 744, "23": 744, "46": 744, "2160": 744, "545": 744, "47": 744, "96x": 744, "resnet101": 744, "77": 744, "37": 744, "1508": 744, "428": 744, "53x": 744, "70": 744, "44": 744, "69": 744, "3290": 744, "1229": 744, "68x": 744, "38": 744, "73": 744, "2404": 744, "1048": 744, "49": 744, "29x": 744, "71": 744, "1669": 744, "33x": 744, "1073": 744, "245": 744, "38x": 744, "374": 744, "52": 744, "18x": 744, "96": 744, "5478": 744, "1756": 744, "12x": 744, "4133": 744, "1748": 744, "36x": 744, "1534": 744, "236": 744, "62": 744, "49x": 744, "vgg19": 744, "1377": 744, "197": 744, "resnetv2": 744, "39": 744, "1125": 744, "656": 744, "71x": 744, "709": 744, "367": 744, "00": 744, "93x": 744, "152": 744, "03": 744, "497": 744, "265": 744, "87x": 744, "densenet": 744, "121": 744, "557": 744, "67": 744, "61": 744, "22x": 744, "161": 744, "29": 744, "353": 744, "235": 744, "50x": 744, "169": 744, "65": 744, "41": 744, "435": 744, "385": 744, "13x": 744, "efficientnet": 744, "b0": 744, "786": 744, "723": 744, "09x": 744, "130": 744, "23x": 744, "1291": 744, "683": 744, "89x": 744, "61x": 744, "1295": 744, "453": 744, "85x": 744, "242": 744, "31x": 744, "cnn": 744, "80x": 744, "43": 744, "81x": 744, "166": 744, "07x": 744, "16x": 744, "26": 744, "173": 744, "yolov3": 744, "82": 744, "230": 744, "92": 744, "36": 744, "37x": 744, "58x": 744, "86": 744, "416": 744, "35x": 744, "88x": 744, "51": 744, "17x": 744, "75552": 744, "50803": 744, "1s56c1ins1bsthroughput": 744, "60": 744, "64x": 744, "1673": 744, "653": 744, "56x": 744, "1170": 744, "329": 744, "55x": 744, "977": 744, "335": 744, "91x": 744, "resnest50": 744, "81": 744, "10x": 744, "resnext101_32x8d": 744, "562": 744, "109": 744, "efficientnet_b0": 744, "696": 744, "667": 744, "04x": 744, "efficientnet_b3": 744, "508": 744, "397": 744, "28x": 744, "efficientnet_b7": 744, "234": 744, "149": 744, "57x": 744, "peleenet": 744, "858": 744, "588": 744, "46x": 744, "se_resnext50_32x4d": 744, "739": 744, "283": 744, "yolo": 744, "141": 744, "99x": 744, "174": 744, "camembert": 744, "395": 744, "171": 744, "30x": 744, "53": 744, "795": 744, "341": 744, "744": 744, "343": 744, "163": 744, "funnel": 744, "182": 744, "65x": 744, "399": 744, "21x": 744, "407": 744, "412": 744, "stsb": 744, "413": 744, "39x": 744, "409": 744, "75x": 744, "401": 744, "70x": 744, "76x": 744, "reform": 744, "crime": 744, "punish": 744, "446": 744, "398": 744, "lvwerra": 744, "pegasu": 744, "samsum": 744, "102": 744, "770": 744, "450": 744, "14x": 744, "whisper": 744, "25x": 744, "abeja": 744, "neox": 744, "japanes": 744, "90x": 744, "1646": 744, "657": 744, "1098": 744, "322": 744, "41x": 744, "568": 744, "19x": 744, "1383": 744, "761": 744, "82x": 744, "32x": 744, "5701": 744, "1593": 744, "2090": 744, "685": 744, "05x": 744, "resnext101_32x16d_wsl": 744, "556": 744, "01x": 744, "86x": 744, "558": 744, "11x": 744, "lambada_openai": 744, "hellaswag": 744, "winogrand": 744, "piqa": 744, "word_perplex": 744, "4954": 744, "6409": 744, "7541": 744, "6434": 744, "8816": 744, "gptqw4g128asym": 744, "679": 744, "4895": 744, "6433": 744, "7476": 744, "6399": 744, "9945": 744, "0999": 744, "gptqw4g32asym": 744, "6829": 744, "4923": 744, "6401": 744, "7486": 744, "6410": 744, "9963": 744, "0141": 744, "gptqw4g128sym": 744, "4907": 744, "6361": 744, "7443": 744, "6390": 744, "9932": 744, "1498": 744, "gptqw4g32sym": 744, "6911": 744, "4899": 744, "6448": 744, "7497": 744, "6439": 744, "0008": 744, "0927": 744, "5049": 744, "6543": 744, "7628": 744, "6497": 744, "2862": 744, "4984": 744, "6535": 744, "7568": 744, "6473": 744, "9962": 744, "4193": 744, "6885": 744, "4973": 744, "753": 744, "6455": 744, "9935": 744, "4607": 744, "decapoda": 744, "5642": 744, "6709": 744, "7835": 744, "6887": 744, "4202": 744, "7244": 744, "5603": 744, "6614": 744, "6824": 744, "9909": 744, "5881": 744, "5911": 744, "7009": 744, "7878": 744, "7106": 744, "212": 744, "7518": 744, "5843": 744, "6961": 744, "7911": 744, "4319": 744, "7572": 744, "5898": 744, "7056": 744, "7894": 744, "7105": 744, "9998": 744, "3429": 744, "7596": 744, "5841": 744, "6977": 744, "7905": 744, "7080": 744, "4916": 744, "6266": 744, "7277": 744, "8096": 744, "7350": 744, "2384": 744, "778": 744, "624": 744, "7269": 744, "8047": 744, "7334": 744, "9979": 744, "4237": 744, "7706": 744, "6239": 744, "7285": 744, "8058": 744, "7322": 744, "4697": 744, "7836": 744, "6195": 744, "7337": 744, "9983": 744, "5604": 744, "5732": 744, "648": 744, "7715": 744, "6746": 744, "7107": 744, "6982": 744, "5637": 744, "6527": 744, "7704": 744, "6713": 744, "9950": 744, "9702": 744, "5682": 744, "6575": 744, "7758": 744, "6742": 744, "9994": 744, "9317": 744, "567": 744, "6902": 744, "7353": 744, "6622": 744, "7829": 744, "6862": 744, "9942": 744, "9635": 744, "7246": 744, "5617": 744, "6756": 744, "7797": 744, "6854": 744, "9931": 744, "2799": 744, "7312": 744, "6059": 744, "7103": 744, "7077": 744, "2213": 744, "7273": 744, "6018": 744, "7088": 744, "7742": 744, "7030": 744, "9934": 744, "2538": 744, "083": 744, "7283": 744, "6053": 744, "7024": 744, "7764": 744, "7031": 744, "1889": 744, "727": 744, "5997": 744, "7018": 744, "9916": 744, "2504": 744, "7122": 744, "8984": 744, "5933": 744, "689": 744, "7851": 744, "7075": 744, "1556": 744, "448": 744, "7675": 744, "5934": 744, "7856": 744, "7111": 744, "9984": 744, "1514": 744, "927": 744, "7566": 744, "5899": 744, "7032": 744, "9953": 744, "1374": 744, "728": 744, "4628": 744, "6456": 744, "6029": 744, "6438": 744, "5799": 744, "4542": 744, "6004": 744, "9957": 744, "0626": 744, "4789": 744, "6134": 744, "7432": 744, "5525": 744, "4731": 744, "6504": 744, "7617": 744, "6094": 744, "7828": 744, "5098": 744, "7622": 744, "6505": 744, "3242": 744, "6878": 744, "5058": 744, "6393": 744, "7633": 744, "6491": 744, "9978": 744, "5514": 744, "6864": 744, "5084": 744, "6519": 744, "6509": 744, "0006": 744, "4728": 744, "6876": 744, "5045": 744, "6474": 744, "9952": 744, "6379": 744, "5282": 744, "614": 744, "7448": 744, "6312": 744, "6377": 744, "5228": 744, "5991": 744, "6261": 744, "9919": 744, "4096": 744, "neo": 744, "6224": 744, "4271": 744, "577": 744, "722": 744, "5871": 744, "9359": 744, "6123": 744, "4227": 744, "5738": 744, "7203": 744, "5823": 744, "9917": 744, "3377": 744, "615": 744, "4259": 744, "5714": 744, "7247": 744, "9951": 744, "2083": 744, "6154": 744, "4208": 744, "5777": 744, "7198": 744, "5834": 744, "9937": 744, "3121": 744, "20b": 744, "7233": 744, "5359": 744, "7753": 744, "195": 744, "7186": 744, "5328": 744, "7699": 744, "6687": 744, "9922": 744, "3463": 744, "7268": 744, "533": 744, "659": 744, "6726": 744, "2897": 744, "5718": 744, "6859": 744, "7927": 744, "6890": 744, "9324": 744, "7006": 744, "5655": 744, "6803": 744, "7965": 744, "6857": 744, "1515": 744, "5752": 744, "6748": 744, "7845": 744, "6724": 744, "5951": 744, "6472": 744, "5716": 744, "6685": 744, "784": 744, "6678": 744, "8539": 744, "6918": 744, "5819": 744, "678": 744, "6861": 744, "8863": 744, "5765": 744, "6827": 744, "7873": 744, "6832": 744, "9958": 744, "1451": 744, "storywrit": 744, "693": 744, "5477": 744, "663": 744, "6719": 744, "9125": 744, "6661": 744, "7813": 744, "6693": 744, "9961": 744, "1137": 744, "rw": 744, "6604": 744, "5419": 744, "6598": 744, "6594": 744, "7616": 744, "6484": 744, "5369": 744, "7807": 744, "6559": 744, "9947": 744, "9411": 744, "6571": 744, "5398": 744, "6582": 744, "6579": 744, "8809": 744, "652": 744, "535": 744, "7682": 744, "6532": 744, "9906": 744, "0048": 744, "5177": 744, "6669": 744, "7824": 744, "5053": 744, "6301": 744, "5142": 744, "6654": 744, "6483": 744, "9933": 744, "8146": 744, "517": 744, "9941": 744, "1566": 744, "724": 744, "1567": 744, "716": 744, "1414": 744, "718": 744, "97x": 744, "1459": 744, "721": 744, "02x": 744, "1582": 744, "752": 744, "7139": 744, "4289": 744, "66x": 744, "4080": 744, "7236": 744, "4299": 744, "6842": 744, "4496": 744, "52x": 744, "591": 744, "178": 744, "183": 744, "590": 744, "179": 744, "42x": 744, "5703": 744, "2578": 744, "5610": 744, "2603": 744, "shufflenet": 744, "6689": 744, "3690": 744, "5692": 744, "3758": 744, "51x": 744, "googlenet": 744, "1792": 744, "1111": 744, "1821": 744, "1104": 744, "squeezenet": 744, "9472": 744, "5582": 744, "9861": 744, "5566": 744, "77x": 744, "caffenet": 744, "3348": 744, "1141": 744, "3509": 744, "1142": 744, "2426": 744, "987": 744, "2208": 744, "1016": 744, "zfnet": 744, "930": 744, "532": 744, "919": 744, "417": 744, "1880": 744, "1159": 744, "62x": 744, "1798": 744, "1151": 744, "2890": 744, "1380": 744, "2548": 744, "1362": 744, "507": 744, "94x": 744, "1286": 744, "904": 744, "1121": 744, "856": 744, "829": 744, "1044": 744, "790": 744, "849": 744, "627": 744, "79x": 744, "yolov4": 744, "duc": 744, "tini": 744, "1119": 744, "ultra": 744, "8537": 744, "1934": 744, "emot": 744, "ferplu": 744, "3568": 744, "arcfac": 744, "494": 744, "244": 744, "226": 744, "392": 744, "223": 744, "integerop": 744, "473": 744, "548": 744, "964": 744, "540": 744, "394": 744, "602": 744, "487": 744, "222": 744, "20x": 744, "189": 744, "146": 744, "125": 744, "bidaf": 744, "2757": 744, "2277": 744, "gpt2": 744, "360": 744, "213": 744, "490": 744, "304": 744, "214": 744, "347": 744, "272": 744, "216": 744, "26x": 744, "489": 744, "27x": 744, "l12": 744, "h384": 744, "1054": 744, "585": 744, "1072": 744, "890": 744, "746": 744, "268": 744, "211": 744, "l6": 744, "1958": 744, "1130": 744, "73x": 744, "electra": 744, "discrimin": 744, "1797": 744, "1077": 744, "67x": 744, "1930": 744, "1139": 744, "mini": 744, "5510": 744, "3334": 744, "5627": 744, "3365": 744, "108": 744, "110": 744, "bart": 744, "15x": 744, "deberta": 744, "168": 744, "145": 744, "spanbert": 744, "63x": 744, "multilingu": 744, "113": 744, "159": 744, "40x": 744, "distilgpt2": 744, "layoutlm": 744, "layoutlmv2": 744, "codebert": 744, "47x": 744, "fcn": 744, "perplex": 744, "2788": 744, "7002": 744, "4124": 744, "9921": 744, "3950": 744, "5711": 744, "9892": 744, "9163": 744, "7240": 744, "9902": 744, "0438": 744, "7634": 744, "1186": 744, "9944": 744, "1276": 744, "7543": 744, "6181": 744, "rtnw4g32asym": 744, "6496": 744, "9967": 744, "7964": 744, "6612": 744, "rtnw4g32sym": 744, "7941": 744, "7243": 744, "9971": 744, "taskdataset": 744, "accuracyspars": 744, "ratiospars": 744, "commentsbalancedor": 744, "unbalanc": 744, "answeringsquad": 744, "87f1": 744, "momentumunbalanc": 744, "momentumbalanc": 744, "90f1": 744, "59f1": 744, "23f1": 744, "classificationmrpc": 744, "52f1": 744, "26f1": 744, "classificationsst": 744, "61accuraci": 744, "recognitionimagenet": 744, "95top1": 744, "v5s6": 744, "detectioncoco": 744, "ap0": 744, "6ap0": 744, "393": 744, "584": 744, "34f1": 744, "lassounbalanc": 744, "classificationmnli": 744, "mm": 744, "allbalanc": 744, "32accuraci": 744, "sensitivitybalanc": 744, "classificationqqp": 744, "classificationqnli": 744, "54accuraci": 744, "em": 744, "mobilenetv2": 744, "wideresnet40": 744, "9522": 744, "8178": 744, "0213": 744, "8235": 744, "027": 744, "5494": 744, "7153": 744, "5540": 744, "0046": 744, "5523": 744, "vgg": 744, "bn": 744, "7022": 744, "7415": 744, "7025": 744, "0003": 744, "6739": 744, "7399": 744, "6845": 744, "0106": 744, "blendcnn": 744, "7034": 744, "8382": 744, "bilstm": 744, "8314": 744, "9403": 744, "9048": 744, "0734": 744, "7323": 744, "8256": 744, "8084": 744, "8814": 744, "7442": 744, "8371": 744, "0119": 744, "0115": 744, "tinybert": 744, "8018": 744, "8044": 744, "8363": 744, "8411": 744, "8025": 744, "8074": 744, "0007": 744, "0030": 744, "8626": 744, "9091": 744, "8782": 744, "8684": 744, "8259": 744, "0058": 744, "distilroberta": 744, "6057": 744, "6187": 744, "0130": 744, "c6i": 744, "2xlarg": 744, "c6a": 744, "c6g": 744, "a100cuda": 744, "executionprovid": 744}, "objects": {"": [[0, 0, 0, "-", "block_mask"], [370, 0, 0, "-", "neural_compressor"]], "neural_compressor": [[2, 0, 0, "-", "adaptor"], [180, 0, 0, "-", "algorithm"], [183, 0, 0, "-", "benchmark"], [186, 0, 0, "-", "common"], [202, 0, 0, "-", "compression"], [235, 0, 0, "-", "conf"], [237, 0, 0, "-", "config"], [238, 0, 0, "-", "contrib"], [263, 0, 0, "-", "data"], [317, 0, 0, "-", "experimental"], [377, 0, 0, "-", "metric"], [379, 0, 0, "-", "mix_precision"], [381, 0, 0, "-", "model"], [389, 0, 0, "-", "objective"], [401, 0, 0, "-", "onnxrt"], [411, 0, 0, "-", "profiling"], [433, 0, 0, "-", "quantization"], [441, 0, 0, "-", "strategy"], [453, 0, 0, "-", "template"], [462, 0, 0, "-", "tensorflow"], [619, 0, 0, "-", "torch"], [631, 0, 0, "-", "training"], [635, 0, 0, "-", "utils"], [644, 0, 0, "-", "version"]], "neural_compressor.adaptor": [[1, 0, 0, "-", "adaptor"], [3, 0, 0, "-", "keras"], [7, 0, 0, "-", "keras_utils"], [11, 0, 0, "-", "mxnet"], [12, 0, 0, "-", "mxnet_utils"], [14, 0, 0, "-", "onnxrt"], [17, 0, 0, "-", "ox_utils"], [45, 0, 0, "-", "pytorch"], [46, 0, 0, "-", "query"], [47, 0, 0, "-", "tensorflow"], [111, 0, 0, "-", "tf_utils"], [159, 0, 0, "-", "torch_utils"]], "neural_compressor.adaptor.adaptor": [[1, 1, 1, "", "Adaptor"], [1, 2, 1, "", "adaptor_registry"]], "neural_compressor.adaptor.keras": [[3, 1, 1, "", "KerasAdaptor"], [3, 1, 1, "", "KerasQuery"]], "neural_compressor.adaptor.keras_utils": [[4, 0, 0, "-", "conv2d"], [5, 0, 0, "-", "dense"], [6, 0, 0, "-", "depthwise_conv2d"], [8, 0, 0, "-", "pool2d"], [9, 0, 0, "-", "quantizer"], [10, 0, 0, "-", "separable_conv2d"]], "neural_compressor.adaptor.mxnet": [[11, 1, 1, "", "MXNetQuery"], [11, 1, 1, "", "MxNetAdaptor"]], "neural_compressor.adaptor.mxnet_utils": [[13, 0, 0, "-", "util"]], "neural_compressor.adaptor.mxnet_utils.util": [[13, 1, 1, "", "CalibCollector"], [13, 1, 1, "", "CalibData"], [13, 1, 1, "", "CollectorBase"], [13, 1, 1, "", "DataIterLoader"], [13, 1, 1, "", "DataLoaderWrap"], [13, 1, 1, "", "NameCollector"], [13, 1, 1, "", "OpType"], [13, 1, 1, "", "TensorCollector"], [13, 2, 1, "", "amp_convert"], [13, 2, 1, "", "calib_model"], [13, 2, 1, "", "check_mx_version"], [13, 2, 1, "", "combine_capabilities"], [13, 2, 1, "", "create_data_example"], [13, 2, 1, "", "distribute_calib_tensors"], [13, 2, 1, "", "ensure_list"], [13, 2, 1, "", "fuse"], [13, 2, 1, "", "get_framework_name"], [13, 2, 1, "", "is_model_quantized"], [13, 2, 1, "", "isiterable"], [13, 2, 1, "", "make_module"], [13, 2, 1, "", "make_nc_model"], [13, 2, 1, "", "make_symbol_block"], [13, 2, 1, "", "ndarray_to_device"], [13, 2, 1, "", "parse_tune_config"], [13, 2, 1, "", "prepare_dataloader"], [13, 2, 1, "", "prepare_model"], [13, 2, 1, "", "prepare_model_data"], [13, 2, 1, "", "quantize_sym_model"], [13, 2, 1, "", "query_quantizable_nodes"], [13, 2, 1, "", "run_forward"]], "neural_compressor.adaptor.onnxrt": [[14, 1, 1, "", "ONNXRTQuery"], [14, 1, 1, "", "ONNXRT_IntegerOpsAdaptor"], [14, 1, 1, "", "ONNXRT_QDQAdaptor"], [14, 1, 1, "", "ONNXRT_QLinearOpsAdaptor"], [14, 1, 1, "", "ONNXRT_WeightOnlyAdaptor"], [14, 1, 1, "", "ONNXRUNTIMEAdaptor"]], "neural_compressor.adaptor.ox_utils": [[15, 0, 0, "-", "calibration"], [16, 0, 0, "-", "calibrator"], [29, 0, 0, "-", "operators"], [41, 0, 0, "-", "quantizer"], [42, 0, 0, "-", "smooth_quant"], [43, 0, 0, "-", "util"], [44, 0, 0, "-", "weight_only"]], "neural_compressor.adaptor.ox_utils.calibration": [[15, 1, 1, "", "ONNXRTAugment"]], "neural_compressor.adaptor.ox_utils.calibrator": [[16, 1, 1, "", "CalibratorBase"], [16, 1, 1, "", "HistogramCollector"], [16, 1, 1, "", "KLCalibrator"], [16, 1, 1, "", "MinMaxCalibrator"], [16, 1, 1, "", "PercentileCalibrator"], [16, 2, 1, "", "calib_registry"], [16, 2, 1, "", "smooth_distribution"]], "neural_compressor.adaptor.ox_utils.operators": [[18, 0, 0, "-", "activation"], [19, 0, 0, "-", "argmax"], [20, 0, 0, "-", "attention"], [21, 0, 0, "-", "binary_op"], [22, 0, 0, "-", "concat"], [23, 0, 0, "-", "conv"], [24, 0, 0, "-", "direct_q8"], [25, 0, 0, "-", "embed_layernorm"], [26, 0, 0, "-", "gather"], [27, 0, 0, "-", "gavgpool"], [28, 0, 0, "-", "gemm"], [30, 0, 0, "-", "lstm"], [31, 0, 0, "-", "matmul"], [32, 0, 0, "-", "maxpool"], [33, 0, 0, "-", "norm"], [34, 0, 0, "-", "ops"], [35, 0, 0, "-", "pad"], [36, 0, 0, "-", "pooling"], [37, 0, 0, "-", "reduce"], [38, 0, 0, "-", "resize"], [39, 0, 0, "-", "split"], [40, 0, 0, "-", "unary_op"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[18, 1, 1, "", "ActivationOperator"], [18, 1, 1, "", "Float16ActivationOperator"], [18, 1, 1, "", "QActivationOperator"], [18, 1, 1, "", "RemovableActivationOperator"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[19, 1, 1, "", "ArgMaxOperator"], [19, 1, 1, "", "QArgMaxOperator"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[20, 1, 1, "", "AttentionOperator"], [20, 1, 1, "", "QAttentionOperator"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[21, 1, 1, "", "BinaryDirect8BitOperator"], [21, 1, 1, "", "BinaryOperator"], [21, 1, 1, "", "Float16BinaryOperator"], [21, 1, 1, "", "QBinaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[22, 1, 1, "", "ConcatOperator"], [22, 1, 1, "", "QConcatOperator"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[23, 1, 1, "", "ConvOperator"], [23, 1, 1, "", "QConvOperator"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[24, 1, 1, "", "Direct8BitOperator"], [24, 1, 1, "", "QDirectOperator"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[25, 1, 1, "", "EmbedLayerNormalizationOperator"], [25, 1, 1, "", "QEmbedLayerNormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[26, 1, 1, "", "GatherOperator"], [26, 1, 1, "", "QGatherOperator"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[27, 1, 1, "", "GlobalAveragePoolOperator"], [27, 1, 1, "", "QGlobalAveragePoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[28, 1, 1, "", "GemmOperator"], [28, 1, 1, "", "QGemmOperator"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[30, 1, 1, "", "LSTMOperator"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[31, 1, 1, "", "FusedMatMulOperator"], [31, 1, 1, "", "MatMulOperator"], [31, 1, 1, "", "QMatMulOperator"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[32, 1, 1, "", "MaxPoolOperator"], [32, 1, 1, "", "QMaxPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.norm": [[33, 1, 1, "", "BatchNormalizationOperator"], [33, 1, 1, "", "NormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[34, 1, 1, "", "Operator"], [34, 1, 1, "", "QOperator"], [34, 2, 1, "", "op_registry"], [34, 2, 1, "", "qop_registry"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[35, 1, 1, "", "PadOperator"], [35, 1, 1, "", "QPadOperator"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[36, 1, 1, "", "PoolOperator"], [36, 1, 1, "", "QPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.reduce": [[37, 1, 1, "", "ReduceMinMaxOperator"], [37, 1, 1, "", "ReduceOperator"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[38, 1, 1, "", "QResizeOperator"], [38, 1, 1, "", "ResizeOperator"]], "neural_compressor.adaptor.ox_utils.operators.split": [[39, 1, 1, "", "QSplitOperator"], [39, 1, 1, "", "SplitOperator"]], "neural_compressor.adaptor.ox_utils.operators.unary_op": [[40, 1, 1, "", "UnaryDirect8BitOperator"], [40, 1, 1, "", "UnaryOperator"]], "neural_compressor.adaptor.ox_utils.quantizer": [[41, 1, 1, "", "Quantizer"]], "neural_compressor.adaptor.ox_utils.smooth_quant": [[42, 1, 1, "", "ORTSmoothQuant"], [42, 2, 1, "", "get_quant_dequant_output"], [42, 2, 1, "", "make_sub_graph"], [42, 2, 1, "", "quant_dequant_data"]], "neural_compressor.adaptor.ox_utils.util": [[43, 1, 1, "", "QuantFormat"], [43, 1, 1, "", "QuantType"], [43, 1, 1, "", "QuantizationMode"], [43, 1, 1, "", "QuantizedInitializer"], [43, 1, 1, "", "QuantizedValue"], [43, 1, 1, "", "QuantizedValueType"], [43, 1, 1, "", "ValueInfo"], [43, 2, 1, "", "attribute_to_kwarg"], [43, 2, 1, "", "calculate_scale_zp"], [43, 2, 1, "", "cast_tensor"], [43, 2, 1, "", "collate_preds"], [43, 2, 1, "", "dequantize_data"], [43, 2, 1, "", "dequantize_data_with_scale_zero"], [43, 2, 1, "", "dtype_to_name"], [43, 2, 1, "", "find_by_name"], [43, 2, 1, "", "float_to_bfloat16"], [43, 2, 1, "", "float_to_float16"], [43, 2, 1, "", "get_node_original_name"], [43, 2, 1, "", "infer_shapes"], [43, 2, 1, "", "is_B_transposed"], [43, 2, 1, "", "make_dquant_node"], [43, 2, 1, "", "make_quant_node"], [43, 2, 1, "", "quantize_data"], [43, 2, 1, "", "quantize_data_per_channel"], [43, 2, 1, "", "quantize_data_with_scale_zero"], [43, 2, 1, "", "quantize_nparray"], [43, 2, 1, "", "remove_init_from_model_input"], [43, 2, 1, "", "simple_progress_bar"], [43, 2, 1, "", "split_shared_bias"], [43, 2, 1, "", "to_numpy"], [43, 2, 1, "", "trt_env_setup"]], "neural_compressor.adaptor.ox_utils.weight_only": [[44, 2, 1, "", "apply_awq_clip"], [44, 2, 1, "", "apply_awq_scale"], [44, 2, 1, "", "awq_quantize"], [44, 2, 1, "", "get_blob_size"], [44, 2, 1, "", "get_weight_scale"], [44, 2, 1, "", "gptq"], [44, 2, 1, "", "gptq_quantize"], [44, 2, 1, "", "make_matmul_weight_only_node"], [44, 2, 1, "", "pad_tensor"], [44, 2, 1, "", "prepare_inputs"], [44, 2, 1, "", "qdq_tensor"], [44, 2, 1, "", "quant_tensor"], [44, 2, 1, "", "rtn_quantize"]], "neural_compressor.adaptor.pytorch": [[45, 1, 1, "", "PyTorchAdaptor"], [45, 1, 1, "", "PyTorchQuery"], [45, 1, 1, "", "PyTorchWeightOnlyAdaptor"], [45, 1, 1, "", "PyTorch_FXAdaptor"], [45, 1, 1, "", "PyTorch_IPEXAdaptor"], [45, 1, 1, "", "TemplateAdaptor"], [45, 2, 1, "", "get_ops_recursively"]], "neural_compressor.adaptor.query": [[46, 1, 1, "", "QueryBackendCapability"]], "neural_compressor.adaptor.tensorflow": [[47, 1, 1, "", "TensorFlowAdaptor"], [47, 1, 1, "", "TensorflowQuery"], [47, 1, 1, "", "Tensorflow_ITEXAdaptor"]], "neural_compressor.adaptor.tf_utils": [[48, 0, 0, "-", "graph_converter"], [49, 0, 0, "-", "graph_converter_without_calib"], [87, 0, 0, "-", "graph_rewriter"], [110, 0, 0, "-", "graph_util"], [112, 0, 0, "-", "quantize_graph"], [139, 0, 0, "-", "quantize_graph_common"], [140, 0, 0, "-", "smooth_quant_calibration"], [141, 0, 0, "-", "smooth_quant_scaler"], [142, 0, 0, "-", "tf2onnx_converter"], [145, 0, 0, "-", "transform_graph"], [148, 0, 0, "-", "util"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[48, 1, 1, "", "GraphConverter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[49, 1, 1, "", "GraphConverterWithoutCalib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[52, 0, 0, "-", "bf16"], [76, 0, 0, "-", "generic"], [86, 0, 0, "-", "graph_base"], [95, 0, 0, "-", "int8"], [101, 0, 0, "-", "onnx"], [106, 0, 0, "-", "qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[50, 0, 0, "-", "bf16_convert"], [51, 0, 0, "-", "dequantize_cast_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[50, 1, 1, "", "BF16Convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer": [[51, 1, 1, "", "DequantizeCastOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[53, 0, 0, "-", "convert_add_to_biasadd"], [54, 0, 0, "-", "convert_layout"], [55, 0, 0, "-", "convert_leakyrelu"], [56, 0, 0, "-", "convert_nan_to_random"], [57, 0, 0, "-", "convert_placeholder_to_const"], [58, 0, 0, "-", "dilated_contraction"], [59, 0, 0, "-", "dummy_biasadd"], [60, 0, 0, "-", "expanddims_optimizer"], [61, 0, 0, "-", "fetch_weight_from_reshape"], [62, 0, 0, "-", "fold_batch_norm"], [63, 0, 0, "-", "fold_constant"], [64, 0, 0, "-", "fuse_biasadd_add"], [65, 0, 0, "-", "fuse_column_wise_mul"], [66, 0, 0, "-", "fuse_conv_with_math"], [67, 0, 0, "-", "fuse_decomposed_bn"], [68, 0, 0, "-", "fuse_decomposed_in"], [69, 0, 0, "-", "fuse_gelu"], [70, 0, 0, "-", "fuse_layer_norm"], [71, 0, 0, "-", "fuse_pad_with_conv"], [72, 0, 0, "-", "fuse_pad_with_fp32_conv"], [73, 0, 0, "-", "fuse_reshape_transpose"], [74, 0, 0, "-", "graph_cse_optimizer"], [75, 0, 0, "-", "grappler_pass"], [77, 0, 0, "-", "insert_print_node"], [78, 0, 0, "-", "move_squeeze_after_relu"], [79, 0, 0, "-", "pre_optimize"], [80, 0, 0, "-", "remove_training_nodes"], [81, 0, 0, "-", "rename_batch_norm"], [82, 0, 0, "-", "split_shared_input"], [83, 0, 0, "-", "strip_equivalent_nodes"], [84, 0, 0, "-", "strip_unused_nodes"], [85, 0, 0, "-", "switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[53, 1, 1, "", "ConvertAddToBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[54, 1, 1, "", "ConvertLayoutOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[55, 1, 1, "", "ConvertLeakyReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[56, 1, 1, "", "ConvertNanToRandom"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[57, 1, 1, "", "ConvertPlaceholderToConst"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[58, 1, 1, "", "DilatedContraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[59, 1, 1, "", "InjectDummyBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[60, 1, 1, "", "ExpandDimsOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[61, 1, 1, "", "FetchWeightFromReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[62, 1, 1, "", "FoldBatchNormNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[63, 1, 1, "", "GraphFoldConstantOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[64, 1, 1, "", "FuseBiasAddAndAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[65, 1, 1, "", "FuseColumnWiseMulOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[66, 1, 1, "", "FuseConvWithMathOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[67, 1, 1, "", "FuseDecomposedBNOptimizer"], [67, 2, 1, "", "bypass_reshape"], [67, 2, 1, "", "get_const_dim_count"], [67, 2, 1, "", "node_from_map"], [67, 2, 1, "", "node_name_from_input"], [67, 2, 1, "", "valid_reshape_inputs"], [67, 2, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[68, 1, 1, "", "FuseDecomposedINOptimizer"], [68, 2, 1, "", "bypass_reshape"], [68, 2, 1, "", "get_const_dim_count"], [68, 2, 1, "", "node_from_map"], [68, 2, 1, "", "node_name_from_input"], [68, 2, 1, "", "valid_reshape_inputs"], [68, 2, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[69, 1, 1, "", "FuseGeluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[70, 1, 1, "", "FuseLayerNormOptimizer"], [70, 2, 1, "", "node_from_map"], [70, 2, 1, "", "node_name_from_input"], [70, 2, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[71, 1, 1, "", "FusePadWithConv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[72, 1, 1, "", "FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[73, 1, 1, "", "FuseTransposeReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[74, 1, 1, "", "GraphCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[75, 1, 1, "", "GrapplerOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[77, 1, 1, "", "InsertPrintMinMaxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[78, 1, 1, "", "MoveSqueezeAfterReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[79, 1, 1, "", "PreOptimization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[80, 1, 1, "", "RemoveTrainingNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[81, 1, 1, "", "RenameBatchNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[82, 1, 1, "", "SplitSharedInputOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[83, 1, 1, "", "StripEquivalentNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[84, 1, 1, "", "StripUnusedNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[85, 1, 1, "", "SwitchOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[86, 1, 1, "", "GraphRewriterBase"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[88, 0, 0, "-", "freeze_fake_quant"], [89, 0, 0, "-", "freeze_value"], [90, 0, 0, "-", "freeze_value_without_calib"], [91, 0, 0, "-", "fuse_conv_redundant_dequantize"], [92, 0, 0, "-", "fuse_conv_requantize"], [93, 0, 0, "-", "fuse_matmul_redundant_dequantize"], [94, 0, 0, "-", "fuse_matmul_requantize"], [96, 0, 0, "-", "meta_op_optimizer"], [97, 0, 0, "-", "post_hostconst_converter"], [98, 0, 0, "-", "post_quantized_op_cse"], [99, 0, 0, "-", "rnn_convert"], [100, 0, 0, "-", "scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[88, 1, 1, "", "FreezeFakeQuantOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[89, 1, 1, "", "FreezeValueTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[90, 1, 1, "", "FreezeValueWithoutCalibTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[91, 1, 1, "", "FuseConvRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[92, 1, 1, "", "FuseConvRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[93, 1, 1, "", "FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[94, 1, 1, "", "FuseMatMulRequantizeDequantizeNewAPITransformer"], [94, 1, 1, "", "FuseMatMulRequantizeDequantizeTransformer"], [94, 1, 1, "", "FuseMatMulRequantizeNewAPITransformer"], [94, 1, 1, "", "FuseMatMulRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[96, 1, 1, "", "MetaInfoChangingMemOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[97, 1, 1, "", "PostHostConstConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[98, 1, 1, "", "PostCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[99, 1, 1, "", "QuantizedRNNConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[100, 1, 1, "", "ScaleProPagationTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[102, 0, 0, "-", "onnx_graph"], [103, 0, 0, "-", "onnx_node"], [104, 0, 0, "-", "onnx_schema"], [105, 0, 0, "-", "tf2onnx_utils"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[102, 1, 1, "", "OnnxGraph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[103, 1, 1, "", "OnnxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[104, 1, 1, "", "OnnxOpSchema"], [104, 2, 1, "", "get_max_supported_opset_version"], [104, 2, 1, "", "get_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[105, 1, 1, "", "SeqType"], [105, 2, 1, "", "add_port_to_name"], [105, 2, 1, "", "are_shapes_equal"], [105, 2, 1, "", "assert_error"], [105, 2, 1, "", "compute_const_folding_using_tf"], [105, 2, 1, "", "convert_tensorflow_tensor_to_onnx"], [105, 2, 1, "", "find_opset"], [105, 2, 1, "", "get_index_from_strided_slice_of_shape"], [105, 2, 1, "", "get_subgraphs_from_onnx"], [105, 2, 1, "", "get_tensorflow_node_attr"], [105, 2, 1, "", "get_tensorflow_node_shape_attr"], [105, 2, 1, "", "get_tensorflow_tensor_data"], [105, 2, 1, "", "get_tensorflow_tensor_shape"], [105, 2, 1, "", "infer_onnx_shape_dtype"], [105, 2, 1, "", "initialize_name_counter"], [105, 2, 1, "", "is_list_or_tuple"], [105, 2, 1, "", "is_onnx_domain"], [105, 2, 1, "", "make_onnx_inputs_outputs"], [105, 2, 1, "", "make_onnx_shape"], [105, 2, 1, "", "map_numpy_to_onnx_dtype"], [105, 2, 1, "", "map_onnx_to_numpy_type"], [105, 2, 1, "", "map_tensorflow_dtype"], [105, 2, 1, "", "read_tensorflow_node_attrs"], [105, 2, 1, "", "save_protobuf"], [105, 2, 1, "", "set_name"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[107, 0, 0, "-", "insert_qdq_pattern"], [108, 0, 0, "-", "merge_duplicated_qdq"], [109, 0, 0, "-", "share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[107, 1, 1, "", "GenerateGraphWithQDQPattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[108, 1, 1, "", "MergeDuplicatedQDQOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[109, 1, 1, "", "ShareQDQForItexYPatternOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_util": [[110, 1, 1, "", "GraphAnalyzer"], [110, 1, 1, "", "GraphRewriterHelper"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[114, 0, 0, "-", "qat"], [130, 0, 0, "-", "qdq"], [132, 0, 0, "-", "quantize_graph_base"], [133, 0, 0, "-", "quantize_graph_bn"], [134, 0, 0, "-", "quantize_graph_concatv2"], [135, 0, 0, "-", "quantize_graph_conv"], [136, 0, 0, "-", "quantize_graph_for_intel_cpu"], [137, 0, 0, "-", "quantize_graph_matmul"], [138, 0, 0, "-", "quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[113, 0, 0, "-", "fake_quantize"], [115, 0, 0, "-", "quantize_config"], [116, 0, 0, "-", "quantize_helper"], [117, 0, 0, "-", "quantize_layers"], [122, 0, 0, "-", "quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[113, 1, 1, "", "FakeQuantize"], [113, 1, 1, "", "FakeQuantizeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[115, 1, 1, "", "QuantizeConfig"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[116, 2, 1, "", "init_quantize_config"], [116, 2, 1, "", "qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[118, 0, 0, "-", "optimize_layer"], [119, 0, 0, "-", "quantize_layer_add"], [120, 0, 0, "-", "quantize_layer_base"], [121, 0, 0, "-", "quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[118, 2, 1, "", "config_quantizable_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[119, 1, 1, "", "QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[120, 1, 1, "", "QuantizeLayerBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[121, 1, 1, "", "QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[122, 1, 1, "", "QuantizeWrapper"], [122, 1, 1, "", "QuantizeWrapperBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[123, 0, 0, "-", "fuse_qdq_bn"], [124, 0, 0, "-", "fuse_qdq_concatv2"], [125, 0, 0, "-", "fuse_qdq_conv"], [126, 0, 0, "-", "fuse_qdq_deconv"], [127, 0, 0, "-", "fuse_qdq_in"], [128, 0, 0, "-", "fuse_qdq_matmul"], [129, 0, 0, "-", "fuse_qdq_pooling"], [131, 0, 0, "-", "optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[123, 1, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[124, 1, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[125, 1, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[126, 1, 1, "", "FuseNodeStartWithDeconv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[127, 1, 1, "", "FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[128, 1, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[129, 1, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[131, 1, 1, "", "OptimizeQDQGraph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[132, 1, 1, "", "QuantizeGraphBase"], [132, 1, 1, "", "QuantizeNodeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[133, 1, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[134, 1, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[135, 1, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[136, 1, 1, "", "QuantizeGraphForIntel"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[137, 1, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[138, 1, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[139, 1, 1, "", "QuantizeGraphHelper"]], "neural_compressor.adaptor.tf_utils.smooth_quant_calibration": [[140, 1, 1, "", "SmoothQuantCalibration"], [140, 1, 1, "", "SmoothQuantCalibrationLLM"]], "neural_compressor.adaptor.tf_utils.smooth_quant_scaler": [[141, 1, 1, "", "SmoothQuantScaler"], [141, 1, 1, "", "SmoothQuantScalerLLM"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[142, 1, 1, "", "TensorflowQDQToOnnxQDQConverter"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[143, 0, 0, "-", "bias_correction"], [144, 0, 0, "-", "graph_transform_base"], [146, 0, 0, "-", "insert_logging"], [147, 0, 0, "-", "rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[143, 1, 1, "", "BiasCorrection"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[144, 1, 1, "", "GraphTransformBase"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[146, 1, 1, "", "InsertLogging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[147, 1, 1, "", "RerangeQuantizedConcat"]], "neural_compressor.adaptor.tf_utils.util": [[148, 2, 1, "", "apply_inlining"], [148, 2, 1, "", "collate_tf_preds"], [148, 2, 1, "", "construct_function_from_graph_def"], [148, 2, 1, "", "disable_random"], [148, 2, 1, "", "fix_ref_type_of_graph_def"], [148, 2, 1, "", "generate_feed_dict"], [148, 2, 1, "", "get_estimator_graph"], [148, 2, 1, "", "get_graph_def"], [148, 2, 1, "", "get_input_output_node_names"], [148, 2, 1, "", "get_model_input_shape"], [148, 2, 1, "", "get_tensor_by_name"], [148, 2, 1, "", "get_tensor_val_from_graph_node"], [148, 2, 1, "", "get_weight_from_input_tensor"], [148, 2, 1, "", "int8_node_name_reverse"], [148, 2, 1, "", "is_ckpt_format"], [148, 2, 1, "", "is_saved_model_format"], [148, 2, 1, "", "iterator_sess_run"], [148, 2, 1, "", "parse_saved_model"], [148, 2, 1, "", "read_graph"], [148, 2, 1, "", "reconstruct_saved_model"], [148, 2, 1, "", "strip_equivalent_nodes"], [148, 2, 1, "", "strip_unused_nodes"], [148, 2, 1, "", "tf_diagnosis_helper"], [148, 2, 1, "", "version1_eq_version2"], [148, 2, 1, "", "version1_gt_version2"], [148, 2, 1, "", "version1_gte_version2"], [148, 2, 1, "", "version1_lt_version2"], [148, 2, 1, "", "version1_lte_version2"], [148, 2, 1, "", "write_graph"]], "neural_compressor.adaptor.torch_utils": [[149, 0, 0, "-", "auto_round"], [152, 0, 0, "-", "autoround"], [155, 0, 0, "-", "awq"], [156, 0, 0, "-", "bf16_convert"], [157, 0, 0, "-", "gptq"], [158, 0, 0, "-", "hawq_metric"], [160, 0, 0, "-", "layer_wise_quant"], [165, 0, 0, "-", "mixed_precision"], [166, 0, 0, "-", "model_wrapper"], [167, 0, 0, "-", "pattern_detector"], [168, 0, 0, "-", "symbolic_trace"], [169, 0, 0, "-", "teq"], [170, 0, 0, "-", "util"], [174, 0, 0, "-", "waq"], [177, 0, 0, "-", "weight_only"]], "neural_compressor.adaptor.torch_utils.autoround": [[150, 0, 0, "-", "autoround"], [151, 0, 0, "-", "export"], [153, 0, 0, "-", "model_wrapper"], [154, 0, 0, "-", "sign_sgd"]], "neural_compressor.adaptor.torch_utils.autoround.autoround": [[150, 1, 1, "", "AutoAdamRound"], [150, 1, 1, "", "AutoOPTRound"], [150, 1, 1, "", "AutoRound"], [150, 1, 1, "", "SaveInputs"], [150, 1, 1, "", "WrapperMultiblock"], [150, 2, 1, "", "block_forward"], [150, 2, 1, "", "check_is_cpu"], [150, 2, 1, "", "collect_minmax_scale"], [150, 2, 1, "", "collect_round_v"], [150, 2, 1, "", "get_batch_dim"], [150, 2, 1, "", "get_block_names"], [150, 2, 1, "", "get_dataloader"], [150, 2, 1, "", "get_module"], [150, 2, 1, "", "get_scale_shape"], [150, 2, 1, "", "get_tokenizer_function"], [150, 2, 1, "", "move_input_to_device"], [150, 2, 1, "", "quant_weight"], [150, 2, 1, "", "quant_weight_actor"], [150, 2, 1, "", "quant_weight_asym"], [150, 2, 1, "", "quant_weight_sym"], [150, 2, 1, "", "quant_weight_w_scale"], [150, 2, 1, "", "round_ste"], [150, 2, 1, "", "sampling_inputs"], [150, 2, 1, "", "set_module"], [150, 2, 1, "", "unwrapper_block"], [150, 2, 1, "", "wrapper_block"]], "neural_compressor.adaptor.torch_utils.autoround.export": [[151, 2, 1, "", "export_compressed_model"]], "neural_compressor.adaptor.torch_utils.autoround.sign_sgd": [[154, 1, 1, "", "SGD"], [154, 2, 1, "", "sgd"]], "neural_compressor.adaptor.torch_utils.awq": [[155, 1, 1, "", "ActAwareWeightQuant"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[156, 1, 1, "", "BF16ModuleWrapper"], [156, 2, 1, "", "Convert"], [156, 2, 1, "", "bf16_symbolic_trace"]], "neural_compressor.adaptor.torch_utils.gptq": [[157, 1, 1, "", "GPTQ"], [157, 1, 1, "", "GPTQuantizer"], [157, 2, 1, "", "find_layers"], [157, 2, 1, "", "find_layers_name"], [157, 2, 1, "", "is_leaf"], [157, 2, 1, "", "log_quantizable_layers_per_transformer"], [157, 2, 1, "", "quantize"], [157, 2, 1, "", "trace_gptq_target_blocks"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[158, 1, 1, "", "HessianTrace"], [158, 1, 1, "", "Node_collector"], [158, 2, 1, "", "compare_weights"], [158, 2, 1, "", "hawq_top"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant": [[161, 0, 0, "-", "modified_pickle"], [162, 0, 0, "-", "quantize"], [163, 0, 0, "-", "torch_load"], [164, 0, 0, "-", "utils"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle": [[161, 3, 1, "", "PickleError"], [161, 3, 1, "", "PicklingError"], [161, 3, 1, "", "UnpicklingError"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize": [[162, 1, 1, "", "LayerWiseQuant"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load": [[163, 2, 1, "", "load"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils": [[164, 2, 1, "", "dowload_hf_model"], [164, 2, 1, "", "get_children"], [164, 2, 1, "", "get_module"], [164, 2, 1, "", "get_named_children"], [164, 2, 1, "", "get_super_module_by_name"], [164, 2, 1, "", "load_empty_model"], [164, 2, 1, "", "load_layer_wise_quantized_model"], [164, 2, 1, "", "load_tensor"], [164, 2, 1, "", "load_tensor_from_shard"], [164, 2, 1, "", "update_module"]], "neural_compressor.adaptor.torch_utils.mixed_precision": [[165, 2, 1, "", "ipex_mixed_precision"]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[166, 1, 1, "", "FakeAffineTensorQuantFunction"], [166, 1, 1, "", "MulLinear"], [166, 1, 1, "", "TEQLinearFakeQuant"]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[167, 1, 1, "", "TransformerBasedModelBlockPatternDetector"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[168, 2, 1, "", "symbolic_trace"], [168, 2, 1, "", "trace_and_fuse_sub_graph"]], "neural_compressor.adaptor.torch_utils.teq": [[169, 1, 1, "", "TEQuantizer"]], "neural_compressor.adaptor.torch_utils.util": [[170, 2, 1, "", "append_attr"], [170, 2, 1, "", "auto_copy"], [170, 2, 1, "", "calculate_quant_min_max"], [170, 2, 1, "", "calibration"], [170, 2, 1, "", "check_cfg_and_qconfig"], [170, 2, 1, "", "collate_torch_preds"], [170, 2, 1, "", "collect_weight_info"], [170, 2, 1, "", "fetch_module"], [170, 2, 1, "", "forward_wrapper"], [170, 2, 1, "", "generate_activation_observer"], [170, 2, 1, "", "get_absorb_layers"], [170, 2, 1, "", "get_block_prefix"], [170, 2, 1, "", "get_depth"], [170, 2, 1, "", "get_dict_at_depth"], [170, 2, 1, "", "get_element_under_depth"], [170, 2, 1, "", "get_embedding_contiguous"], [170, 2, 1, "", "get_example_input"], [170, 2, 1, "", "get_fallback_order"], [170, 2, 1, "", "get_hidden_states"], [170, 2, 1, "", "get_module_input_output"], [170, 2, 1, "", "get_mse_order_per_fp32"], [170, 2, 1, "", "get_mse_order_per_int8"], [170, 2, 1, "", "get_op_type_by_name"], [170, 2, 1, "", "get_quantizable_ops_from_cfgs"], [170, 2, 1, "", "get_torch_version"], [170, 2, 1, "", "input2tuple"], [170, 2, 1, "", "is_fused_module"], [170, 2, 1, "", "match_datatype_pattern"], [170, 2, 1, "", "move_input_device"], [170, 2, 1, "", "paser_cfgs"], [170, 2, 1, "", "set_module"], [170, 2, 1, "", "simple_inference"], [170, 2, 1, "", "update_sq_scale"]], "neural_compressor.adaptor.torch_utils.waq": [[171, 0, 0, "-", "auto_alpha"], [172, 0, 0, "-", "calibration"], [173, 0, 0, "-", "graph_trace"], [175, 0, 0, "-", "smooth_quant"], [176, 0, 0, "-", "utils"]], "neural_compressor.adaptor.torch_utils.waq.smooth_quant": [[175, 1, 1, "", "TorchSmoothQuant"]], "neural_compressor.adaptor.torch_utils.waq.utils": [[176, 2, 1, "", "get_module"], [176, 2, 1, "", "register_autotune"], [176, 2, 1, "", "reshape_in_channel_to_last"], [176, 2, 1, "", "reshape_scale_as_input"], [176, 2, 1, "", "reshape_scale_as_weight"], [176, 2, 1, "", "set_module"]], "neural_compressor.adaptor.torch_utils.weight_only": [[177, 2, 1, "", "autoround_quantize"], [177, 2, 1, "", "awq_quantize"], [177, 2, 1, "", "gptq_quantize"], [177, 2, 1, "", "qdq_weight_actor"], [177, 2, 1, "", "qdq_weight_asym"], [177, 2, 1, "", "qdq_weight_sym"], [177, 2, 1, "", "quant_weight"], [177, 2, 1, "", "quant_weight_w_scale"], [177, 2, 1, "", "quantize_4bit"], [177, 2, 1, "", "rtn_quantize"], [177, 2, 1, "", "search_clip"], [177, 2, 1, "", "teq_quantize"]], "neural_compressor.algorithm": [[178, 0, 0, "-", "algorithm"], [179, 0, 0, "-", "fast_bias_correction"], [181, 0, 0, "-", "smooth_quant"], [182, 0, 0, "-", "weight_correction"]], "neural_compressor.algorithm.algorithm": [[178, 1, 1, "", "ALGORITHMS"], [178, 1, 1, "", "Algorithm"], [178, 1, 1, "", "AlgorithmScheduler"], [178, 2, 1, "", "algorithm_registry"]], "neural_compressor.algorithm.fast_bias_correction": [[179, 1, 1, "", "FastBiasCorrection"]], "neural_compressor.algorithm.smooth_quant": [[181, 1, 1, "", "SmoothQuant"]], "neural_compressor.algorithm.weight_correction": [[182, 1, 1, "", "WeightCorrection"]], "neural_compressor.benchmark": [[183, 2, 1, "", "benchmark_with_raw_cmd"], [183, 2, 1, "", "call_one"], [183, 2, 1, "", "config_instance"], [183, 2, 1, "", "fit"], [183, 2, 1, "", "generate_prefix"], [183, 2, 1, "", "get_architecture"], [183, 2, 1, "", "get_bounded_threads"], [183, 2, 1, "", "get_core_ids"], [183, 2, 1, "", "get_physical_ids"], [183, 2, 1, "", "get_threads"], [183, 2, 1, "", "get_threads_per_core"], [183, 2, 1, "", "profile"], [183, 2, 1, "", "run_instance"], [183, 2, 1, "", "set_all_env_var"], [183, 2, 1, "", "set_env_var"], [183, 2, 1, "", "summary_benchmark"]], "neural_compressor.common": [[184, 0, 0, "-", "base_config"], [185, 0, 0, "-", "base_tuning"], [187, 0, 0, "-", "tuning_param"], [189, 0, 0, "-", "utils"]], "neural_compressor.common.base_config": [[184, 1, 1, "", "BaseConfig"], [184, 1, 1, "", "ComposableConfig"], [184, 2, 1, "", "register_config"], [184, 2, 1, "", "register_supported_configs_for_fwk"]], "neural_compressor.common.base_tuning": [[185, 1, 1, "", "Evaluator"], [185, 1, 1, "", "SequentialSampler"], [185, 1, 1, "", "TuningConfig"]], "neural_compressor.common.tuning_param": [[187, 1, 1, "", "ParamLevel"], [187, 1, 1, "", "TuningParam"]], "neural_compressor.common.utils": [[188, 0, 0, "-", "constants"], [190, 0, 0, "-", "logger"], [191, 0, 0, "-", "save_load"], [192, 0, 0, "-", "utility"]], "neural_compressor.common.utils.logger": [[190, 1, 1, "", "Logger"], [190, 1, 1, "", "TuningLogger"]], "neural_compressor.common.utils.save_load": [[191, 2, 1, "", "load_config_mapping"], [191, 2, 1, "", "save_config_mapping"]], "neural_compressor.common.utils.utility": [[192, 2, 1, "", "dump_elapsed_time"], [192, 2, 1, "", "set_random_seed"], [192, 2, 1, "", "set_resume_from"], [192, 2, 1, "", "set_tensorboard"], [192, 2, 1, "", "set_workspace"]], "neural_compressor.compression": [[193, 0, 0, "-", "callbacks"], [195, 0, 0, "-", "distillation"], [198, 0, 0, "-", "hpo"], [205, 0, 0, "-", "pruner"]], "neural_compressor.compression.callbacks": [[193, 1, 1, "", "BaseCallbacks"], [193, 1, 1, "", "DistillationCallbacks"], [193, 1, 1, "", "PruningCallbacks"], [193, 1, 1, "", "QuantizationAwareTrainingCallbacks"]], "neural_compressor.compression.callbacks.DistillationCallbacks": [[193, 4, 1, "", "_epoch_ran"], [193, 4, 1, "", "best_model"], [193, 4, 1, "", "best_score"], [193, 4, 1, "", "eval_frequency"]], "neural_compressor.compression.distillation": [[194, 0, 0, "-", "criterions"], [196, 0, 0, "-", "optimizers"], [197, 0, 0, "-", "utility"]], "neural_compressor.compression.distillation.criterions": [[194, 1, 1, "", "Criterions"], [194, 1, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [194, 1, 1, "", "KnowledgeDistillationFramework"], [194, 1, 1, "", "KnowledgeDistillationLoss"], [194, 1, 1, "", "PyTorchCriterions"], [194, 1, 1, "", "PyTorchCrossEntropyLoss"], [194, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [194, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [194, 1, 1, "", "PyTorchKnowledgeDistillationLoss"], [194, 1, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [194, 1, 1, "", "PyTorchSelfKnowledgeDistillationLoss"], [194, 1, 1, "", "PyTorchSelfKnowledgeDistillationLossWrapper"], [194, 1, 1, "", "SelfKnowledgeDistillationLoss"], [194, 1, 1, "", "TensorFlowCrossEntropyLoss"], [194, 1, 1, "", "TensorFlowSparseCategoricalCrossentropy"], [194, 1, 1, "", "TensorflowCriterions"], [194, 1, 1, "", "TensorflowKnowledgeDistillationLoss"], [194, 1, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [194, 1, 1, "", "TensorflowKnowledgeDistillationLossWrapper"], [194, 2, 1, "", "criterion_registry"]], "neural_compressor.compression.distillation.optimizers": [[196, 1, 1, "", "Optimizers"], [196, 1, 1, "", "PyTorchOptimizers"], [196, 1, 1, "", "PyTorchSGD"], [196, 1, 1, "", "TensorFlowAdam"], [196, 1, 1, "", "TensorFlowAdamW"], [196, 1, 1, "", "TensorFlowSGD"], [196, 1, 1, "", "TensorflowOptimizers"], [196, 2, 1, "", "optimizer_registry"]], "neural_compressor.compression.distillation.utility": [[197, 2, 1, "", "get_activation"], [197, 2, 1, "", "record_output"]], "neural_compressor.compression.hpo": [[199, 0, 0, "-", "sa_optimizer"], [200, 0, 0, "-", "search_algorithms"], [201, 0, 0, "-", "search_space"]], "neural_compressor.compression.hpo.search_algorithms": [[200, 1, 1, "", "BayesianOptimizationSearcher"], [200, 1, 1, "", "GridSearcher"], [200, 1, 1, "", "RandomSearcher"], [200, 1, 1, "", "Searcher"], [200, 1, 1, "", "XgbSearcher"], [200, 2, 1, "", "register_searcher"]], "neural_compressor.compression.hpo.search_space": [[201, 1, 1, "", "BaseSearchSpace"], [201, 1, 1, "", "ContinuousSearchSpace"], [201, 1, 1, "", "DiscreteSearchSpace"], [201, 1, 1, "", "SearchSpace"], [201, 2, 1, "", "register_searchspace"]], "neural_compressor.compression.pruner": [[203, 0, 0, "-", "criteria"], [204, 0, 0, "-", "dsnot"], [207, 0, 0, "-", "model_slim"], [211, 0, 0, "-", "patterns"], [205, 2, 1, "", "prepare_pruning"], [218, 0, 0, "-", "pruners"], [224, 0, 0, "-", "pruning"], [225, 0, 0, "-", "regs"], [205, 2, 1, "", "save"], [226, 0, 0, "-", "schedulers"], [227, 0, 0, "-", "tf_criteria"], [228, 0, 0, "-", "utils"], [229, 0, 0, "-", "wanda"]], "neural_compressor.compression.pruner.criteria": [[203, 1, 1, "", "BlockMaskCriterion"], [203, 1, 1, "", "GradientCriterion"], [203, 1, 1, "", "MagnitudeCriterion"], [203, 1, 1, "", "PruningCriterion"], [203, 1, 1, "", "RetrainFreeCriterion"], [203, 1, 1, "", "SnipCriterion"], [203, 1, 1, "", "SnipMomentumCriterion"], [203, 2, 1, "", "get_criterion"], [203, 2, 1, "", "register_criterion"]], "neural_compressor.compression.pruner.criteria.BlockMaskCriterion": [[203, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.GradientCriterion": [[203, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.MagnitudeCriterion": [[203, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.PruningCriterion": [[203, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion": [[203, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipCriterion": [[203, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion": [[203, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.dsnot": [[204, 2, 1, "", "DSnoT"], [204, 2, 1, "", "return_reorder_indice"]], "neural_compressor.compression.pruner.model_slim": [[206, 0, 0, "-", "auto_slim"], [208, 0, 0, "-", "pattern_analyzer"], [209, 0, 0, "-", "weight_slim"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[206, 2, 1, "", "generate_ffn2_pruning_config"], [206, 2, 1, "", "generate_mha_pruning_config"], [206, 2, 1, "", "model_slim"], [206, 2, 1, "", "model_slim_ffn2"], [206, 2, 1, "", "model_slim_mha"], [206, 2, 1, "", "parse_auto_slim_config"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[208, 1, 1, "", "ClassifierHeadSearcher"], [208, 1, 1, "", "ClassifierHeadSearcherTF"], [208, 1, 1, "", "JitBasicSearcher"], [208, 1, 1, "", "Linear2LinearSearcher"], [208, 1, 1, "", "RecipeSearcher"], [208, 1, 1, "", "SelfMHASearcher"], [208, 2, 1, "", "get_attributes"], [208, 2, 1, "", "get_common_module"], [208, 2, 1, "", "print_iterables"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher": [[208, 4, 1, "", "device"], [208, 4, 1, "", "flatten_static_graph"], [208, 4, 1, "", "model"], [208, 4, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF": [[208, 4, 1, "", "device"], [208, 4, 1, "", "flatten_static_graph"], [208, 4, 1, "", "model"], [208, 4, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher": [[208, 4, 1, "", "device"], [208, 4, 1, "", "flatten_static_graph"], [208, 4, 1, "", "model"], [208, 4, 1, "", "searching_results"], [208, 4, 1, "", "static_graph"], [208, 4, 1, "", "target_layers"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher": [[208, 4, 1, "", "current_pattern"], [208, 4, 1, "", "device"], [208, 4, 1, "", "flatten_static_graph"], [208, 4, 1, "", "model"], [208, 4, 1, "", "searching_results"], [208, 4, 1, "", "static_graph"], [208, 4, 1, "", "target_layers"], [208, 4, 1, "", "target_op_lut"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher": [[208, 4, 1, "", "model"], [208, 4, 1, "", "recipe"], [208, 4, 1, "", "searching_results"], [208, 4, 1, "", "targets"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher": [[208, 4, 1, "", "device"], [208, 4, 1, "", "flatten_static_graph"], [208, 4, 1, "", "model"], [208, 4, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[209, 1, 1, "", "LinearCompression"], [209, 1, 1, "", "LinearCompressionIterator"], [209, 1, 1, "", "PostCompressionUtils"]], "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression": [[209, 4, 1, "", "device"], [209, 4, 1, "", "layer_1"], [209, 4, 1, "", "layer_2"]], "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator": [[209, 4, 1, "", "linear_patterns"]], "neural_compressor.compression.pruner.patterns": [[210, 0, 0, "-", "base"], [211, 2, 1, "", "get_pattern"], [212, 0, 0, "-", "mha"], [213, 0, 0, "-", "ninm"], [214, 0, 0, "-", "nxm"]], "neural_compressor.compression.pruner.patterns.base": [[210, 1, 1, "", "BasePattern"], [210, 1, 1, "", "KerasBasePattern"], [210, 1, 1, "", "PytorchBasePattern"], [210, 2, 1, "", "register_pattern"]], "neural_compressor.compression.pruner.patterns.base.BasePattern": [[210, 4, 1, "", "config"], [210, 4, 1, "", "invalid_layers"], [210, 4, 1, "", "is_global"], [210, 4, 1, "", "keep_mask_layers"], [210, 4, 1, "", "max_sparsity_ratio_per_op"], [210, 4, 1, "", "min_sparsity_ratio_per_op"], [210, 4, 1, "", "modules"], [210, 4, 1, "", "pattern"], [210, 4, 1, "", "target_sparsity"]], "neural_compressor.compression.pruner.patterns.base.KerasBasePattern": [[210, 4, 1, "", "config"], [210, 4, 1, "", "invalid_layers"], [210, 4, 1, "", "is_global"], [210, 4, 1, "", "keep_mask_layers"], [210, 4, 1, "", "max_sparsity_ratio_per_op"], [210, 4, 1, "", "min_sparsity_ratio_per_op"], [210, 4, 1, "", "modules"], [210, 4, 1, "", "pattern"], [210, 4, 1, "", "target_sparsity"]], "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern": [[210, 4, 1, "", "config"], [210, 4, 1, "", "invalid_layers"], [210, 4, 1, "", "is_global"], [210, 4, 1, "", "keep_mask_layers"], [210, 4, 1, "", "max_sparsity_ratio_per_op"], [210, 4, 1, "", "min_sparsity_ratio_per_op"], [210, 4, 1, "", "modules"], [210, 4, 1, "", "pattern"], [210, 4, 1, "", "target_sparsity"]], "neural_compressor.compression.pruner.patterns.mha": [[212, 1, 1, "", "PatternMHA"]], "neural_compressor.compression.pruner.patterns.mha.PatternMHA": [[212, 4, 1, "", "M"], [212, 4, 1, "", "N"]], "neural_compressor.compression.pruner.patterns.ninm": [[213, 1, 1, "", "PytorchPatternNInM"]], "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM": [[213, 4, 1, "", "M"], [213, 4, 1, "", "N"]], "neural_compressor.compression.pruner.patterns.nxm": [[214, 1, 1, "", "KerasPatternNxM"], [214, 1, 1, "", "PytorchPatternNxM"]], "neural_compressor.compression.pruner.patterns.nxm.KerasPatternNxM": [[214, 4, 1, "", "block_size"]], "neural_compressor.compression.pruner.patterns.nxm.PytorchPatternNxM": [[214, 4, 1, "", "block_size"]], "neural_compressor.compression.pruner.pruners": [[215, 0, 0, "-", "base"], [216, 0, 0, "-", "basic"], [217, 0, 0, "-", "block_mask"], [218, 2, 1, "", "get_pruner"], [219, 0, 0, "-", "mha"], [218, 2, 1, "", "parse_valid_pruner_types"], [220, 0, 0, "-", "pattern_lock"], [221, 0, 0, "-", "progressive"], [222, 0, 0, "-", "retrain_free"], [223, 0, 0, "-", "sparse_gpt"]], "neural_compressor.compression.pruner.pruners.base": [[215, 1, 1, "", "BasePruner"], [215, 1, 1, "", "KerasBasePruner"], [215, 1, 1, "", "PytorchBasePruner"], [215, 2, 1, "", "register_pruner"]], "neural_compressor.compression.pruner.pruners.base.BasePruner": [[215, 4, 1, "", "config"], [215, 4, 1, "", "current_sparsity_ratio"], [215, 4, 1, "", "end_step"], [215, 4, 1, "", "global_step"], [215, 4, 1, "", "masks"], [215, 4, 1, "", "max_sparsity_ratio_per_op"], [215, 4, 1, "", "modules"], [215, 4, 1, "", "pattern"], [215, 4, 1, "", "pruning_frequency"], [215, 4, 1, "", "scheduler"], [215, 4, 1, "", "scores"], [215, 4, 1, "", "start_step"], [215, 4, 1, "", "target_sparsity_ratio"]], "neural_compressor.compression.pruner.pruners.base.KerasBasePruner": [[215, 4, 1, "", "config"], [215, 4, 1, "", "current_sparsity_ratio"], [215, 4, 1, "", "end_step"], [215, 4, 1, "", "global_step"], [215, 4, 1, "", "masks"], [215, 4, 1, "", "max_sparsity_ratio_per_op"], [215, 4, 1, "", "modules"], [215, 4, 1, "", "pattern"], [215, 4, 1, "", "pruning_frequency"], [215, 4, 1, "", "scheduler"], [215, 4, 1, "", "scores"], [215, 4, 1, "", "start_step"], [215, 4, 1, "", "target_sparsity_ratio"]], "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner": [[215, 4, 1, "", "config"], [215, 4, 1, "", "current_sparsity_ratio"], [215, 4, 1, "", "end_step"], [215, 4, 1, "", "global_step"], [215, 4, 1, "", "masks"], [215, 4, 1, "", "max_sparsity_ratio_per_op"], [215, 4, 1, "", "modules"], [215, 4, 1, "", "pattern"], [215, 4, 1, "", "pruning_frequency"], [215, 4, 1, "", "scheduler"], [215, 4, 1, "", "scores"], [215, 4, 1, "", "start_step"], [215, 4, 1, "", "target_sparsity_ratio"]], "neural_compressor.compression.pruner.pruners.basic": [[216, 1, 1, "", "KerasBasicPruner"], [216, 1, 1, "", "PytorchBasicPruner"]], "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner": [[216, 4, 1, "", "criterion"], [216, 4, 1, "", "pattern"], [216, 4, 1, "", "reg"], [216, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner": [[216, 4, 1, "", "criterion"], [216, 4, 1, "", "pattern"], [216, 4, 1, "", "reg"], [216, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.block_mask": [[217, 1, 1, "", "PytorchBlockMaskPruner"]], "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner": [[217, 4, 1, "", "criterion"], [217, 4, 1, "", "pattern"], [217, 4, 1, "", "reg"], [217, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.mha": [[219, 1, 1, "", "PythonMultiheadAttentionPruner"]], "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner": [[219, 4, 1, "", "head_masks"], [219, 4, 1, "", "linear_layers"], [219, 4, 1, "", "mha_compressions"], [219, 4, 1, "", "mha_scores"]], "neural_compressor.compression.pruner.pruners.pattern_lock": [[220, 1, 1, "", "PytorchPatternLockPruner"]], "neural_compressor.compression.pruner.pruners.progressive": [[221, 1, 1, "", "PytorchProgressivePruner"]], "neural_compressor.compression.pruner.pruners.retrain_free": [[222, 1, 1, "", "PytorchRetrainFreePruner"]], "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner": [[222, 4, 1, "", "criterion"], [222, 4, 1, "", "pattern"], [222, 4, 1, "", "reg"], [222, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.sparse_gpt": [[223, 1, 1, "", "SparseGPTPruner"]], "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner": [[223, 4, 1, "", "criterion"], [223, 4, 1, "", "pattern"], [223, 4, 1, "", "reg"], [223, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruning": [[224, 1, 1, "", "BasePruning"], [224, 1, 1, "", "BasicPruning"], [224, 1, 1, "", "RetrainFreePruning"], [224, 1, 1, "", "SparseGPTPruning"], [224, 2, 1, "", "register_pruning"]], "neural_compressor.compression.pruner.pruning.BasePruning": [[224, 4, 1, "", "config_file_path"], [224, 4, 1, "", "model"], [224, 4, 1, "", "pruner_info"], [224, 4, 1, "", "pruners"]], "neural_compressor.compression.pruner.pruning.BasicPruning": [[224, 4, 1, "", "config_file_path"], [224, 4, 1, "", "model"], [224, 4, 1, "", "pruner_info"], [224, 4, 1, "", "pruners"]], "neural_compressor.compression.pruner.pruning.RetrainFreePruning": [[224, 4, 1, "", "config_file_path"], [224, 4, 1, "", "model"], [224, 4, 1, "", "pruner_info"], [224, 4, 1, "", "pruners"]], "neural_compressor.compression.pruner.regs": [[225, 1, 1, "", "BaseReg"], [225, 1, 1, "", "GroupLasso"], [225, 2, 1, "", "get_reg"], [225, 2, 1, "", "get_reg_type"], [225, 2, 1, "", "register_reg"]], "neural_compressor.compression.pruner.regs.GroupLasso": [[225, 4, 1, "", "alpha"], [225, 4, 1, "", "reg_terms"]], "neural_compressor.compression.pruner.schedulers": [[226, 1, 1, "", "IterativeScheduler"], [226, 1, 1, "", "OneshotScheduler"], [226, 1, 1, "", "PruningScheduler"], [226, 2, 1, "", "get_scheduler"], [226, 2, 1, "", "register_scheduler"]], "neural_compressor.compression.pruner.schedulers.PruningScheduler": [[226, 4, 1, "", "config"]], "neural_compressor.compression.pruner.tf_criteria": [[227, 1, 1, "", "MagnitudeCriterion"], [227, 1, 1, "", "PruningCriterion"], [227, 2, 1, "", "get_tf_criterion"], [227, 2, 1, "", "register_criterion"]], "neural_compressor.compression.pruner.tf_criteria.MagnitudeCriterion": [[227, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.tf_criteria.PruningCriterion": [[227, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.utils": [[228, 2, 1, "", "check_config"], [228, 2, 1, "", "check_key_validity"], [228, 2, 1, "", "collect_layer_inputs"], [228, 2, 1, "", "generate_pruner_config"], [228, 2, 1, "", "get_layers"], [228, 2, 1, "", "get_sparsity_ratio"], [228, 2, 1, "", "get_sparsity_ratio_tf"], [228, 2, 1, "", "parse_last_linear"], [228, 2, 1, "", "parse_last_linear_tf"], [228, 2, 1, "", "parse_to_prune"], [228, 2, 1, "", "parse_to_prune_tf"], [228, 2, 1, "", "process_and_check_config"], [228, 2, 1, "", "process_config"], [228, 2, 1, "", "process_weight_config"], [228, 2, 1, "", "process_yaml_config"], [228, 2, 1, "", "reset_none_to_default"], [228, 2, 1, "", "update_params"]], "neural_compressor.compression.pruner.wanda": [[230, 0, 0, "-", "prune"], [231, 0, 0, "-", "utils"], [232, 0, 0, "-", "wrapper"]], "neural_compressor.compression.pruner.wanda.prune": [[230, 2, 1, "", "prune_wanda"]], "neural_compressor.compression.pruner.wanda.utils": [[231, 2, 1, "", "find_layers"]], "neural_compressor.compression.pruner.wanda.wrapper": [[232, 1, 1, "", "WrappedGPT"]], "neural_compressor.conf": [[233, 0, 0, "-", "config"], [234, 0, 0, "-", "dotdict"], [236, 0, 0, "-", "pythonic_config"]], "neural_compressor.conf.config": [[233, 1, 1, "", "Benchmark_Conf"], [233, 1, 1, "", "Conf"], [233, 1, 1, "", "DefaultConf"], [233, 1, 1, "", "Distillation_Conf"], [233, 1, 1, "", "Graph_Optimization_Conf"], [233, 1, 1, "", "MixedPrecision_Conf"], [233, 1, 1, "", "NASConfig"], [233, 1, 1, "", "PrunerV2"], [233, 1, 1, "", "Pruning_Conf"], [233, 1, 1, "", "Quantization_Conf"]], "neural_compressor.conf.dotdict": [[234, 1, 1, "", "DotDict"], [234, 2, 1, "", "deep_get"], [234, 2, 1, "", "deep_set"]], "neural_compressor.conf.pythonic_config": [[236, 1, 1, "", "AccuracyCriterion"], [236, 1, 1, "", "BenchmarkConfig"], [236, 1, 1, "", "DistillationConfig"], [236, 1, 1, "", "KnowledgeDistillationLossConfig"], [236, 1, 1, "", "Options"], [236, 1, 1, "", "QuantizationConfig"], [236, 1, 1, "", "WeightPruningConfig"]], "neural_compressor.config": [[237, 1, 1, "", "AccuracyCriterion"], [237, 1, 1, "", "BenchmarkConfig"], [237, 1, 1, "", "DistillationConfig"], [237, 1, 1, "", "DotDict"], [237, 1, 1, "", "ExportConfig"], [237, 1, 1, "", "HPOConfig"], [237, 1, 1, "", "IntermediateLayersKnowledgeDistillationLossConfig"], [237, 1, 1, "", "Keras"], [237, 1, 1, "", "KnowledgeDistillationLossConfig"], [237, 1, 1, "", "MXNet"], [237, 1, 1, "", "MixedPrecisionConfig"], [237, 1, 1, "", "NASConfig"], [237, 1, 1, "", "ONNX"], [237, 1, 1, "", "ONNXQlinear2QDQConfig"], [237, 1, 1, "", "Options"], [237, 1, 1, "", "PostTrainingQuantConfig"], [237, 1, 1, "", "PyTorch"], [237, 1, 1, "", "QuantizationAwareTrainingConfig"], [237, 1, 1, "", "SelfKnowledgeDistillationLossConfig"], [237, 1, 1, "", "TF2ONNXConfig"], [237, 1, 1, "", "TensorFlow"], [237, 1, 1, "", "Torch2ONNXConfig"], [237, 1, 1, "", "TuningCriterion"], [237, 1, 1, "", "WeightPruningConfig"]], "neural_compressor.contrib": [[239, 0, 0, "-", "strategy"]], "neural_compressor.contrib.strategy": [[240, 0, 0, "-", "sigopt"], [241, 0, 0, "-", "tpe"]], "neural_compressor.contrib.strategy.sigopt": [[240, 1, 1, "", "SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[241, 1, 1, "", "TpeTuneStrategy"]], "neural_compressor.data": [[246, 0, 0, "-", "dataloaders"], [258, 0, 0, "-", "datasets"], [262, 0, 0, "-", "filters"], [266, 0, 0, "-", "transforms"]], "neural_compressor.data.dataloaders": [[242, 0, 0, "-", "base_dataloader"], [243, 0, 0, "-", "dataloader"], [244, 0, 0, "-", "default_dataloader"], [245, 0, 0, "-", "fetcher"], [247, 0, 0, "-", "mxnet_dataloader"], [248, 0, 0, "-", "onnxrt_dataloader"], [249, 0, 0, "-", "pytorch_dataloader"], [250, 0, 0, "-", "sampler"], [251, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.data.dataloaders.base_dataloader": [[242, 1, 1, "", "BaseDataLoader"]], "neural_compressor.data.dataloaders.dataloader": [[243, 1, 1, "", "DataLoader"], [243, 2, 1, "", "check_dataloader"]], "neural_compressor.data.dataloaders.default_dataloader": [[244, 1, 1, "", "DefaultDataLoader"], [244, 2, 1, "", "default_collate"]], "neural_compressor.data.dataloaders.fetcher": [[245, 1, 1, "", "Fetcher"], [245, 1, 1, "", "IndexFetcher"], [245, 1, 1, "", "IterableFetcher"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[247, 1, 1, "", "MXNetDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[248, 1, 1, "", "ONNXRTBertDataLoader"], [248, 1, 1, "", "ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[249, 1, 1, "", "PyTorchDataLoader"]], "neural_compressor.data.dataloaders.sampler": [[250, 1, 1, "", "BatchSampler"], [250, 1, 1, "", "IterableSampler"], [250, 1, 1, "", "Sampler"], [250, 1, 1, "", "SequentialSampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[251, 1, 1, "", "TFDataDataLoader"], [251, 1, 1, "", "TensorflowBertDataLoader"], [251, 1, 1, "", "TensorflowDataLoader"], [251, 1, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.data.datasets": [[252, 0, 0, "-", "bert_dataset"], [253, 0, 0, "-", "coco_dataset"], [254, 0, 0, "-", "dataset"], [255, 0, 0, "-", "dummy_dataset"], [256, 0, 0, "-", "dummy_dataset_v2"], [257, 0, 0, "-", "imagenet_dataset"], [259, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.data.datasets.bert_dataset": [[252, 1, 1, "", "InputFeatures"], [252, 1, 1, "", "ONNXRTBertDataset"], [252, 1, 1, "", "ParseDecodeBert"], [252, 1, 1, "", "PytorchBertDataset"], [252, 1, 1, "", "TensorflowBertDataset"], [252, 1, 1, "", "TensorflowModelZooBertDataset"], [252, 2, 1, "", "convert_examples_to_features"], [252, 2, 1, "", "load_and_cache_examples"]], "neural_compressor.data.datasets.coco_dataset": [[253, 1, 1, "", "COCONpy"], [253, 1, 1, "", "COCORaw"], [253, 1, 1, "", "COCORecordDataset"], [253, 1, 1, "", "ParseDecodeCoco"]], "neural_compressor.data.datasets.dataset": [[254, 1, 1, "", "CIFAR10"], [254, 1, 1, "", "CIFAR100"], [254, 1, 1, "", "Dataset"], [254, 1, 1, "", "Datasets"], [254, 1, 1, "", "FashionMNIST"], [254, 1, 1, "", "ImageFolder"], [254, 1, 1, "", "IterableDataset"], [254, 1, 1, "", "MNIST"], [254, 1, 1, "", "MXNetCIFAR10"], [254, 1, 1, "", "MXNetCIFAR100"], [254, 1, 1, "", "MXNetDatasets"], [254, 1, 1, "", "MXNetFashionMNIST"], [254, 1, 1, "", "MXNetImageFolder"], [254, 1, 1, "", "MXNetMNIST"], [254, 1, 1, "", "ONNXRTITDatasets"], [254, 1, 1, "", "ONNXRTQLDatasets"], [254, 1, 1, "", "PyTorchDatasets"], [254, 1, 1, "", "PytorchCIFAR10"], [254, 1, 1, "", "PytorchCIFAR100"], [254, 1, 1, "", "PytorchFashionMNIST"], [254, 1, 1, "", "PytorchMNIST"], [254, 1, 1, "", "PytorchMxnetWrapDataset"], [254, 1, 1, "", "PytorchMxnetWrapFunction"], [254, 1, 1, "", "Tensorflow"], [254, 1, 1, "", "TensorflowCIFAR10"], [254, 1, 1, "", "TensorflowCIFAR100"], [254, 1, 1, "", "TensorflowDatasets"], [254, 1, 1, "", "TensorflowFashionMNIST"], [254, 1, 1, "", "TensorflowImageRecord"], [254, 1, 1, "", "TensorflowMNIST"], [254, 1, 1, "", "TensorflowTFRecordDataset"], [254, 1, 1, "", "TensorflowVOCRecord"], [254, 2, 1, "", "calculate_md5"], [254, 2, 1, "", "check_integrity"], [254, 2, 1, "", "dataset_registry"], [254, 2, 1, "", "download_url"], [254, 5, 1, "", "framework_datasets"], [254, 2, 1, "", "gen_bar_updater"]], "neural_compressor.data.datasets.dummy_dataset": [[255, 1, 1, "", "DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[256, 1, 1, "", "DummyDataset"], [256, 1, 1, "", "SparseDummyDataset"]], "neural_compressor.data.datasets.imagenet_dataset": [[257, 1, 1, "", "ImagenetRaw"], [257, 1, 1, "", "MXNetImagenetRaw"], [257, 1, 1, "", "ONNXRTImagenetDataset"], [257, 1, 1, "", "PytorchImagenetRaw"], [257, 1, 1, "", "TensorflowImagenetDataset"], [257, 1, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.data.datasets.style_transfer_dataset": [[259, 1, 1, "", "StyleTransferDataset"]], "neural_compressor.data.filters": [[260, 0, 0, "-", "coco_filter"], [261, 0, 0, "-", "filter"]], "neural_compressor.data.filters.coco_filter": [[260, 1, 1, "", "LabelBalanceCOCORawFilter"], [260, 1, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.filter": [[261, 1, 1, "", "FILTERS"], [261, 1, 1, "", "Filter"], [261, 1, 1, "", "MXNetFilters"], [261, 1, 1, "", "ONNXRTITFilters"], [261, 1, 1, "", "ONNXRTQLFilters"], [261, 1, 1, "", "PyTorchFilters"], [261, 1, 1, "", "TensorflowFilters"], [261, 2, 1, "", "filter_registry"]], "neural_compressor.data.transforms": [[264, 0, 0, "-", "coco_transform"], [265, 0, 0, "-", "imagenet_transform"], [267, 0, 0, "-", "postprocess"], [268, 0, 0, "-", "tokenization"], [269, 0, 0, "-", "transform"]], "neural_compressor.data.transforms.coco_transform": [[264, 1, 1, "", "ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.imagenet_transform": [[265, 1, 1, "", "BilinearImagenetTransform"], [265, 1, 1, "", "LabelShift"], [265, 1, 1, "", "ONNXResizeCropImagenetTransform"], [265, 1, 1, "", "OnnxBilinearImagenetTransform"], [265, 1, 1, "", "ParseDecodeImagenet"], [265, 1, 1, "", "ParseDecodeImagenetTransform"], [265, 1, 1, "", "QuantizedInput"], [265, 1, 1, "", "ResizeWithAspectRatio"], [265, 1, 1, "", "TensorflowResizeCropImagenetTransform"], [265, 1, 1, "", "TensorflowShiftRescale"], [265, 1, 1, "", "TensorflowTransposeLastChannel"]], "neural_compressor.data.transforms.postprocess": [[267, 1, 1, "", "Postprocess"]], "neural_compressor.data.transforms.tokenization": [[268, 1, 1, "", "BasicTokenizer"], [268, 1, 1, "", "FullTokenizer"], [268, 1, 1, "", "WordpieceTokenizer"], [268, 2, 1, "", "convert_by_vocab"], [268, 2, 1, "", "convert_to_unicode"], [268, 2, 1, "", "load_vocab"], [268, 2, 1, "", "whitespace_tokenize"]], "neural_compressor.data.transforms.transform": [[269, 1, 1, "", "AlignImageChannelTransform"], [269, 1, 1, "", "BaseTransform"], [269, 1, 1, "", "CastONNXTransform"], [269, 1, 1, "", "CastPyTorchTransform"], [269, 1, 1, "", "CastTFTransform"], [269, 1, 1, "", "CenterCropTFTransform"], [269, 1, 1, "", "CenterCropTransform"], [269, 1, 1, "", "CollectTransform"], [269, 1, 1, "", "ComposeTransform"], [269, 1, 1, "", "CropResizeTFTransform"], [269, 1, 1, "", "CropResizeTransform"], [269, 1, 1, "", "CropToBoundingBox"], [269, 1, 1, "", "InputFeatures"], [269, 1, 1, "", "MXNetCropResizeTransform"], [269, 1, 1, "", "MXNetCropToBoundingBox"], [269, 1, 1, "", "MXNetNormalizeTransform"], [269, 1, 1, "", "MXNetTransforms"], [269, 1, 1, "", "MXNetTranspose"], [269, 1, 1, "", "NormalizeTFTransform"], [269, 1, 1, "", "NormalizeTransform"], [269, 1, 1, "", "ONNXRTCropToBoundingBox"], [269, 1, 1, "", "ONNXRTITTransforms"], [269, 1, 1, "", "ONNXRTQLTransforms"], [269, 1, 1, "", "PaddedCenterCropTransform"], [269, 1, 1, "", "ParseDecodeVocTransform"], [269, 1, 1, "", "PyTorchAlignImageChannel"], [269, 1, 1, "", "PyTorchCropResizeTransform"], [269, 1, 1, "", "PyTorchNormalizeTransform"], [269, 1, 1, "", "PyTorchTransforms"], [269, 1, 1, "", "PyTorchTranspose"], [269, 1, 1, "", "PytorchMxnetTransform"], [269, 1, 1, "", "PytorchMxnetWrapFunction"], [269, 1, 1, "", "RandomCropTFTransform"], [269, 1, 1, "", "RandomCropTransform"], [269, 1, 1, "", "RandomHorizontalFlip"], [269, 1, 1, "", "RandomResizedCropMXNetTransform"], [269, 1, 1, "", "RandomResizedCropPytorchTransform"], [269, 1, 1, "", "RandomResizedCropTFTransform"], [269, 1, 1, "", "RandomResizedCropTransform"], [269, 1, 1, "", "RandomVerticalFlip"], [269, 1, 1, "", "RescaleKerasPretrainTransform"], [269, 1, 1, "", "RescaleTFTransform"], [269, 1, 1, "", "RescaleTransform"], [269, 1, 1, "", "ResizeMXNetTransform"], [269, 1, 1, "", "ResizePytorchTransform"], [269, 1, 1, "", "ResizeTFTransform"], [269, 1, 1, "", "ResizeTransform"], [269, 1, 1, "", "ResizeWithRatio"], [269, 1, 1, "", "SquadExample"], [269, 1, 1, "", "TFModelZooCollectTransform"], [269, 1, 1, "", "TFSquadV1ModelZooPostTransform"], [269, 1, 1, "", "TFSquadV1PostTransform"], [269, 1, 1, "", "TRANSFORMS"], [269, 1, 1, "", "TensorflowCropToBoundingBox"], [269, 1, 1, "", "TensorflowRandomHorizontalFlip"], [269, 1, 1, "", "TensorflowRandomVerticalFlip"], [269, 1, 1, "", "TensorflowResizeWithRatio"], [269, 1, 1, "", "TensorflowTransform"], [269, 1, 1, "", "TensorflowTransforms"], [269, 1, 1, "", "TensorflowTranspose"], [269, 1, 1, "", "TensorflowWrapFunction"], [269, 1, 1, "", "ToArray"], [269, 1, 1, "", "ToNDArrayTransform"], [269, 1, 1, "", "Transforms"], [269, 1, 1, "", "Transpose"], [269, 2, 1, "", "convert_examples_to_features"], [269, 2, 1, "", "get_final_text"], [269, 2, 1, "", "get_torchvision_map"], [269, 2, 1, "", "read_squad_examples"], [269, 2, 1, "", "transform_registry"]], "neural_compressor.experimental": [[270, 0, 0, "-", "benchmark"], [273, 0, 0, "-", "common"], [279, 0, 0, "-", "component"], [280, 0, 0, "-", "compression"], [281, 0, 0, "-", "contrib"], [306, 0, 0, "-", "data"], [311, 0, 0, "-", "distillation"], [312, 0, 0, "-", "export"], [316, 0, 0, "-", "graph_optimization"], [324, 0, 0, "-", "metric"], [326, 0, 0, "-", "mixed_precision"], [327, 0, 0, "-", "model_conversion"], [330, 0, 0, "-", "nas"], [336, 0, 0, "-", "pruner_legacy"], [340, 0, 0, "-", "pruning"], [341, 0, 0, "-", "pruning_recipes"], [345, 0, 0, "-", "pruning_v2"], [346, 0, 0, "-", "pytorch_pruner"], [353, 0, 0, "-", "quantization"], [354, 0, 0, "-", "scheduler"], [359, 0, 0, "-", "strategy"]], "neural_compressor.experimental.benchmark": [[270, 1, 1, "", "Benchmark"], [270, 2, 1, "", "get_architecture"], [270, 2, 1, "", "get_bounded_threads"], [270, 2, 1, "", "get_core_ids"], [270, 2, 1, "", "get_physical_ids"], [270, 2, 1, "", "get_threads"], [270, 2, 1, "", "get_threads_per_core"], [270, 2, 1, "", "set_all_env_var"], [270, 2, 1, "", "set_env_var"]], "neural_compressor.experimental.common": [[271, 0, 0, "-", "criterion"], [272, 0, 0, "-", "dataloader"], [274, 0, 0, "-", "metric"], [275, 0, 0, "-", "model"], [276, 0, 0, "-", "optimizer"], [277, 0, 0, "-", "postprocess"], [278, 0, 0, "-", "torch_utils"]], "neural_compressor.experimental.common.criterion": [[271, 1, 1, "", "Criterions"], [271, 1, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [271, 1, 1, "", "KnowledgeDistillationFramework"], [271, 1, 1, "", "KnowledgeDistillationLoss"], [271, 1, 1, "", "PyTorchCriterions"], [271, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [271, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [271, 1, 1, "", "PyTorchKnowledgeDistillationLoss"], [271, 1, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [271, 1, 1, "", "SelfKnowledgeDistillationLoss"], [271, 1, 1, "", "TensorflowCriterions"], [271, 1, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [271, 2, 1, "", "criterion_registry"]], "neural_compressor.experimental.common.dataloader": [[272, 1, 1, "", "DataLoader"]], "neural_compressor.experimental.common.metric": [[274, 1, 1, "", "Metric"]], "neural_compressor.experimental.common.model": [[275, 1, 1, "", "Model"], [275, 2, 1, "", "set_backend"]], "neural_compressor.experimental.common.optimizer": [[276, 1, 1, "", "Optimizers"], [276, 1, 1, "", "PyTorchOptimizers"], [276, 1, 1, "", "PyTorchSGD"], [276, 1, 1, "", "TensorFlowAdamW"], [276, 1, 1, "", "TensorFlowSGD"], [276, 1, 1, "", "TensorflowOptimizers"], [276, 2, 1, "", "optimizer_registry"]], "neural_compressor.experimental.common.postprocess": [[277, 1, 1, "", "Postprocess"]], "neural_compressor.experimental.common.torch_utils": [[278, 2, 1, "", "get_activation"], [278, 2, 1, "", "record_output"]], "neural_compressor.experimental.component": [[279, 1, 1, "", "Component"]], "neural_compressor.experimental.contrib": [[282, 0, 0, "-", "strategy"]], "neural_compressor.experimental.contrib.strategy": [[283, 0, 0, "-", "sigopt"], [284, 0, 0, "-", "tpe"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[283, 1, 1, "", "SigOptTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.tpe": [[284, 1, 1, "", "TpeTuneStrategy"]], "neural_compressor.experimental.data": [[289, 0, 0, "-", "dataloaders"], [301, 0, 0, "-", "datasets"], [305, 0, 0, "-", "filters"], [308, 0, 0, "-", "transforms"]], "neural_compressor.experimental.data.dataloaders": [[285, 0, 0, "-", "base_dataloader"], [286, 0, 0, "-", "dataloader"], [287, 0, 0, "-", "default_dataloader"], [288, 0, 0, "-", "fetcher"], [290, 0, 0, "-", "mxnet_dataloader"], [291, 0, 0, "-", "onnxrt_dataloader"], [292, 0, 0, "-", "pytorch_dataloader"], [293, 0, 0, "-", "sampler"], [294, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[285, 1, 1, "", "BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[287, 1, 1, "", "DefaultDataLoader"], [287, 2, 1, "", "default_collate"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[288, 1, 1, "", "Fetcher"], [288, 1, 1, "", "IndexFetcher"], [288, 1, 1, "", "IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[290, 1, 1, "", "MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[291, 1, 1, "", "ONNXRTBertDataLoader"], [291, 1, 1, "", "ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[292, 1, 1, "", "PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[293, 1, 1, "", "BatchSampler"], [293, 1, 1, "", "IterableSampler"], [293, 1, 1, "", "Sampler"], [293, 1, 1, "", "SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[294, 1, 1, "", "TFDataDataLoader"], [294, 1, 1, "", "TensorflowBertDataLoader"], [294, 1, 1, "", "TensorflowDataLoader"], [294, 1, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.datasets": [[295, 0, 0, "-", "bert_dataset"], [296, 0, 0, "-", "coco_dataset"], [297, 0, 0, "-", "dataset"], [298, 0, 0, "-", "dummy_dataset"], [299, 0, 0, "-", "dummy_dataset_v2"], [300, 0, 0, "-", "imagenet_dataset"], [302, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[295, 1, 1, "", "InputFeatures"], [295, 1, 1, "", "ONNXRTBertDataset"], [295, 1, 1, "", "ParseDecodeBert"], [295, 1, 1, "", "PytorchBertDataset"], [295, 1, 1, "", "TensorflowBertDataset"], [295, 1, 1, "", "TensorflowModelZooBertDataset"], [295, 2, 1, "", "convert_examples_to_features"], [295, 2, 1, "", "load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[296, 1, 1, "", "COCONpy"], [296, 1, 1, "", "COCORaw"], [296, 1, 1, "", "COCORecordDataset"], [296, 1, 1, "", "ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.dataset": [[297, 1, 1, "", "CIFAR10"], [297, 1, 1, "", "CIFAR100"], [297, 1, 1, "", "Dataset"], [297, 1, 1, "", "Datasets"], [297, 1, 1, "", "FashionMNIST"], [297, 1, 1, "", "ImageFolder"], [297, 1, 1, "", "IterableDataset"], [297, 1, 1, "", "MNIST"], [297, 1, 1, "", "MXNetCIFAR10"], [297, 1, 1, "", "MXNetCIFAR100"], [297, 1, 1, "", "MXNetDatasets"], [297, 1, 1, "", "MXNetFashionMNIST"], [297, 1, 1, "", "MXNetImageFolder"], [297, 1, 1, "", "MXNetMNIST"], [297, 1, 1, "", "ONNXRTITDatasets"], [297, 1, 1, "", "ONNXRTQLDatasets"], [297, 1, 1, "", "PyTorchDatasets"], [297, 1, 1, "", "PytorchCIFAR10"], [297, 1, 1, "", "PytorchCIFAR100"], [297, 1, 1, "", "PytorchFashionMNIST"], [297, 1, 1, "", "PytorchMNIST"], [297, 1, 1, "", "PytorchMxnetWrapDataset"], [297, 1, 1, "", "PytorchMxnetWrapFunction"], [297, 1, 1, "", "TensorflowCIFAR10"], [297, 1, 1, "", "TensorflowCIFAR100"], [297, 1, 1, "", "TensorflowDatasets"], [297, 1, 1, "", "TensorflowFashionMNIST"], [297, 1, 1, "", "TensorflowImageFolder"], [297, 1, 1, "", "TensorflowImageRecord"], [297, 1, 1, "", "TensorflowMNIST"], [297, 1, 1, "", "TensorflowTFRecordDataset"], [297, 1, 1, "", "TensorflowVOCRecord"], [297, 2, 1, "", "calculate_md5"], [297, 2, 1, "", "check_integrity"], [297, 2, 1, "", "dataset_registry"], [297, 2, 1, "", "download_url"], [297, 5, 1, "", "framework_datasets"], [297, 2, 1, "", "gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[298, 1, 1, "", "DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[299, 1, 1, "", "DummyDataset"], [299, 1, 1, "", "SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[300, 1, 1, "", "ImagenetRaw"], [300, 1, 1, "", "MXNetImagenetRaw"], [300, 1, 1, "", "ONNXRTImagenetDataset"], [300, 1, 1, "", "PytorchImagenetRaw"], [300, 1, 1, "", "TensorflowImagenetDataset"], [300, 1, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[302, 1, 1, "", "StyleTransferDataset"]], "neural_compressor.experimental.data.filters": [[303, 0, 0, "-", "coco_filter"], [304, 0, 0, "-", "filter"]], "neural_compressor.experimental.data.filters.coco_filter": [[303, 1, 1, "", "LabelBalanceCOCORawFilter"], [303, 1, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.filter": [[304, 1, 1, "", "FILTERS"], [304, 1, 1, "", "Filter"], [304, 1, 1, "", "MXNetFilters"], [304, 1, 1, "", "ONNXRTITFilters"], [304, 1, 1, "", "ONNXRTQLFilters"], [304, 1, 1, "", "PyTorchFilters"], [304, 1, 1, "", "TensorflowFilters"], [304, 2, 1, "", "filter_registry"]], "neural_compressor.experimental.data.transforms": [[307, 0, 0, "-", "imagenet_transform"], [309, 0, 0, "-", "tokenization"], [310, 0, 0, "-", "transform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[307, 1, 1, "", "BilinearImagenetTransform"], [307, 1, 1, "", "LabelShift"], [307, 1, 1, "", "ONNXResizeCropImagenetTransform"], [307, 1, 1, "", "OnnxBilinearImagenetTransform"], [307, 1, 1, "", "ParseDecodeImagenet"], [307, 1, 1, "", "ParseDecodeImagenetTransform"], [307, 1, 1, "", "QuantizedInput"], [307, 1, 1, "", "ResizeWithAspectRatio"], [307, 1, 1, "", "TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.tokenization": [[309, 1, 1, "", "BasicTokenizer"], [309, 1, 1, "", "FullTokenizer"], [309, 1, 1, "", "WordpieceTokenizer"], [309, 2, 1, "", "convert_by_vocab"], [309, 2, 1, "", "convert_to_unicode"], [309, 2, 1, "", "load_vocab"], [309, 2, 1, "", "whitespace_tokenize"]], "neural_compressor.experimental.data.transforms.transform": [[310, 1, 1, "", "AlignImageChannelTransform"], [310, 1, 1, "", "BaseTransform"], [310, 1, 1, "", "CastONNXTransform"], [310, 1, 1, "", "CastPyTorchTransform"], [310, 1, 1, "", "CastTFTransform"], [310, 1, 1, "", "CenterCropTFTransform"], [310, 1, 1, "", "CenterCropTransform"], [310, 1, 1, "", "CollectTransform"], [310, 1, 1, "", "ComposeTransform"], [310, 1, 1, "", "CropResizeTFTransform"], [310, 1, 1, "", "CropResizeTransform"], [310, 1, 1, "", "CropToBoundingBox"], [310, 1, 1, "", "InputFeatures"], [310, 1, 1, "", "MXNetCropResizeTransform"], [310, 1, 1, "", "MXNetCropToBoundingBox"], [310, 1, 1, "", "MXNetNormalizeTransform"], [310, 1, 1, "", "MXNetTransforms"], [310, 1, 1, "", "MXNetTranspose"], [310, 1, 1, "", "NormalizeTFTransform"], [310, 1, 1, "", "NormalizeTransform"], [310, 1, 1, "", "ONNXRTCropToBoundingBox"], [310, 1, 1, "", "ONNXRTITTransforms"], [310, 1, 1, "", "ONNXRTQLTransforms"], [310, 1, 1, "", "PaddedCenterCropTransform"], [310, 1, 1, "", "ParseDecodeVocTransform"], [310, 1, 1, "", "PyTorchAlignImageChannel"], [310, 1, 1, "", "PyTorchCropResizeTransform"], [310, 1, 1, "", "PyTorchNormalizeTransform"], [310, 1, 1, "", "PyTorchTransforms"], [310, 1, 1, "", "PyTorchTranspose"], [310, 1, 1, "", "PytorchMxnetTransform"], [310, 1, 1, "", "PytorchMxnetWrapFunction"], [310, 1, 1, "", "RandomCropTFTransform"], [310, 1, 1, "", "RandomCropTransform"], [310, 1, 1, "", "RandomHorizontalFlip"], [310, 1, 1, "", "RandomResizedCropMXNetTransform"], [310, 1, 1, "", "RandomResizedCropPytorchTransform"], [310, 1, 1, "", "RandomResizedCropTFTransform"], [310, 1, 1, "", "RandomResizedCropTransform"], [310, 1, 1, "", "RandomVerticalFlip"], [310, 1, 1, "", "RescaleKerasPretrainTransform"], [310, 1, 1, "", "RescaleTFTransform"], [310, 1, 1, "", "RescaleTransform"], [310, 1, 1, "", "ResizeMXNetTransform"], [310, 1, 1, "", "ResizePytorchTransform"], [310, 1, 1, "", "ResizeTFTransform"], [310, 1, 1, "", "ResizeTransform"], [310, 1, 1, "", "ResizeWithRatio"], [310, 1, 1, "", "SquadExample"], [310, 1, 1, "", "TFModelZooCollectTransform"], [310, 1, 1, "", "TFSquadV1ModelZooPostTransform"], [310, 1, 1, "", "TFSquadV1PostTransform"], [310, 1, 1, "", "TRANSFORMS"], [310, 1, 1, "", "TensorflowCropToBoundingBox"], [310, 1, 1, "", "TensorflowRandomHorizontalFlip"], [310, 1, 1, "", "TensorflowRandomVerticalFlip"], [310, 1, 1, "", "TensorflowResizeWithRatio"], [310, 1, 1, "", "TensorflowTransform"], [310, 1, 1, "", "TensorflowTransforms"], [310, 1, 1, "", "TensorflowTranspose"], [310, 1, 1, "", "TensorflowWrapFunction"], [310, 1, 1, "", "ToArray"], [310, 1, 1, "", "ToNDArrayTransform"], [310, 1, 1, "", "Transforms"], [310, 1, 1, "", "Transpose"], [310, 2, 1, "", "convert_examples_to_features"], [310, 2, 1, "", "get_final_text"], [310, 2, 1, "", "get_torchvision_map"], [310, 2, 1, "", "read_squad_examples"], [310, 2, 1, "", "transform_registry"]], "neural_compressor.experimental.distillation": [[311, 1, 1, "", "Distillation"]], "neural_compressor.experimental.distillation.Distillation": [[311, 4, 1, "", "_epoch_ran"], [311, 4, 1, "", "best_model"], [311, 4, 1, "", "best_score"], [311, 4, 1, "", "eval_frequency"]], "neural_compressor.experimental.export": [[313, 0, 0, "-", "qlinear2qdq"], [314, 0, 0, "-", "tf2onnx"], [315, 0, 0, "-", "torch2onnx"]], "neural_compressor.experimental.export.qlinear2qdq": [[313, 2, 1, "", "check_model"], [313, 2, 1, "", "onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.tf2onnx": [[314, 2, 1, "", "tf_to_fp32_onnx"], [314, 2, 1, "", "tf_to_int8_onnx"]], "neural_compressor.experimental.export.torch2onnx": [[315, 2, 1, "", "dynamic_quant_export"], [315, 2, 1, "", "get_node_mapping"], [315, 2, 1, "", "get_quantizable_onnx_ops"], [315, 2, 1, "", "static_quant_export"], [315, 2, 1, "", "torch_to_fp32_onnx"], [315, 2, 1, "", "torch_to_int8_onnx"]], "neural_compressor.experimental.graph_optimization": [[316, 1, 1, "", "Graph_Optimization"]], "neural_compressor.experimental.metric": [[318, 0, 0, "-", "bleu"], [319, 0, 0, "-", "bleu_util"], [320, 0, 0, "-", "coco_label_map"], [321, 0, 0, "-", "coco_tools"], [322, 0, 0, "-", "evaluate_squad"], [323, 0, 0, "-", "f1"], [325, 0, 0, "-", "metric"]], "neural_compressor.experimental.metric.bleu": [[318, 1, 1, "", "BLEU"], [318, 1, 1, "", "UnicodeRegex"], [318, 2, 1, "", "bleu_tokenize"]], "neural_compressor.experimental.metric.bleu.BLEU": [[318, 4, 1, "", "labels"], [318, 4, 1, "", "predictions"]], "neural_compressor.experimental.metric.bleu.UnicodeRegex": [[318, 4, 1, "", "nondigit_punct_re"], [318, 4, 1, "", "punct_nondigit_re"], [318, 4, 1, "", "symbol_re"]], "neural_compressor.experimental.metric.bleu_util": [[319, 2, 1, "", "compute_bleu"]], "neural_compressor.experimental.metric.coco_tools": [[321, 1, 1, "", "COCOEvalWrapper"], [321, 1, 1, "", "COCOWrapper"], [321, 2, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [321, 2, 1, "", "ExportSingleImageDetectionMasksToCoco"], [321, 2, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.experimental.metric.coco_tools.COCOWrapper": [[321, 4, 1, "", "dataset"], [321, 4, 1, "", "detection_type"]], "neural_compressor.experimental.metric.evaluate_squad": [[322, 2, 1, "", "evaluate"], [322, 2, 1, "", "exact_match_score"], [322, 2, 1, "", "f1_score"], [322, 2, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[323, 2, 1, "", "evaluate"], [323, 2, 1, "", "f1_score"], [323, 2, 1, "", "metric_max_over_ground_truths"], [323, 2, 1, "", "normalize_answer"]], "neural_compressor.experimental.metric.metric": [[325, 1, 1, "", "Accuracy"], [325, 1, 1, "", "BaseMetric"], [325, 1, 1, "", "COCOmAPv2"], [325, 1, 1, "", "F1"], [325, 1, 1, "", "GeneralTopK"], [325, 1, 1, "", "Loss"], [325, 1, 1, "", "MAE"], [325, 1, 1, "", "METRICS"], [325, 1, 1, "", "MSE"], [325, 1, 1, "", "MXNetMetrics"], [325, 1, 1, "", "ONNXRTGLUE"], [325, 1, 1, "", "ONNXRTITMetrics"], [325, 1, 1, "", "ONNXRTQLMetrics"], [325, 1, 1, "", "PyTorchLoss"], [325, 1, 1, "", "PyTorchMetrics"], [325, 1, 1, "", "RMSE"], [325, 1, 1, "", "ROC"], [325, 1, 1, "", "SquadF1"], [325, 1, 1, "", "TensorflowCOCOMAP"], [325, 1, 1, "", "TensorflowMAP"], [325, 1, 1, "", "TensorflowMetrics"], [325, 1, 1, "", "TensorflowTopK"], [325, 1, 1, "", "TensorflowVOCMAP"], [325, 1, 1, "", "WrapMXNetMetric"], [325, 1, 1, "", "WrapONNXRTMetric"], [325, 1, 1, "", "WrapPyTorchMetric"], [325, 1, 1, "", "mIOU"], [325, 2, 1, "", "metric_registry"]], "neural_compressor.experimental.metric.metric.Accuracy": [[325, 4, 1, "", "label_list"], [325, 4, 1, "", "pred_list"], [325, 4, 1, "", "sample"]], "neural_compressor.experimental.metric.metric.GeneralTopK": [[325, 4, 1, "", "k"], [325, 4, 1, "", "num_correct"], [325, 4, 1, "", "num_sample"]], "neural_compressor.experimental.metric.metric.Loss": [[325, 4, 1, "", "sample"], [325, 4, 1, "", "sum"]], "neural_compressor.experimental.metric.metric.MAE": [[325, 4, 1, "", "compare_label"], [325, 4, 1, "", "label_list"], [325, 4, 1, "", "pred_list"]], "neural_compressor.experimental.metric.metric.METRICS": [[325, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.MSE": [[325, 4, 1, "", "compare_label"], [325, 4, 1, "", "label_list"], [325, 4, 1, "", "pred_list"]], "neural_compressor.experimental.metric.metric.MXNetMetrics": [[325, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTITMetrics": [[325, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics": [[325, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.PyTorchMetrics": [[325, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.RMSE": [[325, 4, 1, "", "mse"]], "neural_compressor.experimental.metric.metric.TensorflowMetrics": [[325, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.TensorflowTopK": [[325, 4, 1, "", "k"], [325, 4, 1, "", "num_correct"], [325, 4, 1, "", "num_sample"]], "neural_compressor.experimental.mixed_precision": [[326, 1, 1, "", "MixedPrecision"]], "neural_compressor.experimental.model_conversion": [[327, 1, 1, "", "ModelConversion"]], "neural_compressor.experimental.nas": [[328, 0, 0, "-", "basic_nas"], [329, 0, 0, "-", "dynas"], [331, 0, 0, "-", "nas"], [332, 0, 0, "-", "nas_utils"], [333, 0, 0, "-", "search_algorithms"]], "neural_compressor.experimental.nas.basic_nas": [[328, 1, 1, "", "BasicNAS"]], "neural_compressor.experimental.nas.dynas": [[329, 1, 1, "", "DyNAS"]], "neural_compressor.experimental.nas.nas": [[331, 1, 1, "", "NAS"], [331, 1, 1, "", "NASBase"]], "neural_compressor.experimental.nas.nas_utils": [[332, 2, 1, "", "create_search_space_pool"], [332, 2, 1, "", "find_pareto_front"], [332, 2, 1, "", "nas_registry"]], "neural_compressor.experimental.nas.search_algorithms": [[333, 1, 1, "", "BayesianOptimizationSearcher"], [333, 1, 1, "", "GridSearcher"], [333, 1, 1, "", "RandomSearcher"], [333, 1, 1, "", "Searcher"]], "neural_compressor.experimental.pruner_legacy": [[334, 0, 0, "-", "gradient_sensitivity"], [335, 0, 0, "-", "group_lasso"], [337, 0, 0, "-", "magnitude"], [338, 0, 0, "-", "pattern_lock"], [339, 0, 0, "-", "pruner"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[334, 1, 1, "", "GradientSensitivityPruner"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[335, 1, 1, "", "GroupLassoPruner"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[337, 1, 1, "", "BasicMagnitudePruner"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[338, 1, 1, "", "PatternLockPruner"]], "neural_compressor.experimental.pruner_legacy.pruner": [[339, 1, 1, "", "Pruner"], [339, 2, 1, "", "pruner_registry"]], "neural_compressor.experimental.pruning": [[340, 1, 1, "", "Pruning"], [340, 1, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning.Pruning": [[340, 4, 1, "", "conf"], [340, 4, 1, "", "pruners"]], "neural_compressor.experimental.pruning_recipes": [[342, 0, 0, "-", "patterns"]], "neural_compressor.experimental.pruning_recipes.patterns": [[343, 0, 0, "-", "pattern"], [344, 0, 0, "-", "tile_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[343, 1, 1, "", "PATTERNS"], [343, 1, 1, "", "PatternBase"], [343, 2, 1, "", "pattern_registry"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS": [[343, 4, 1, "", "patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[344, 1, 1, "", "TilePatternBase"], [344, 1, 1, "", "TilePattern_1x1"], [344, 1, 1, "", "TilePattern_1x16"], [344, 1, 1, "", "TilePattern_1x2"], [344, 1, 1, "", "TilePattern_2x2"], [344, 1, 1, "", "TilePattern_4x1"]], "neural_compressor.experimental.pruning_v2": [[345, 1, 1, "", "Pruning"], [345, 1, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning_v2.Pruning": [[345, 4, 1, "", "conf"], [345, 4, 1, "", "pruners"]], "neural_compressor.experimental.pytorch_pruner": [[347, 0, 0, "-", "logger"], [348, 0, 0, "-", "patterns"], [349, 0, 0, "-", "prune_utils"], [350, 0, 0, "-", "pruner"], [351, 0, 0, "-", "pruning"], [352, 0, 0, "-", "scheduler"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[348, 1, 1, "", "Pattern"], [348, 1, 1, "", "PatternNInM"], [348, 1, 1, "", "PatternNxM"], [348, 2, 1, "", "get_pattern"], [348, 2, 1, "", "register_pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.Pattern": [[348, 4, 1, "", "is_global"], [348, 4, 1, "", "pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM": [[348, 4, 1, "", "M"], [348, 4, 1, "", "N"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM": [[348, 4, 1, "", "block_size"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[349, 2, 1, "", "check_config"], [349, 2, 1, "", "parse_not_to_prune"], [349, 2, 1, "", "parse_to_prune"], [349, 2, 1, "", "process_and_check_config"], [349, 2, 1, "", "process_config"], [349, 2, 1, "", "reset_non_value_to_default"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[350, 1, 1, "", "MagnitudePruner"], [350, 1, 1, "", "PatternLockPruner"], [350, 1, 1, "", "Pruner"], [350, 1, 1, "", "SnipMomentumPruner"], [350, 1, 1, "", "SnipPruner"], [350, 2, 1, "", "get_pruner"], [350, 2, 1, "", "register_pruners"]], "neural_compressor.experimental.pytorch_pruner.pruner.Pruner": [[350, 4, 1, "", "config"], [350, 4, 1, "", "current_sparsity_ratio"], [350, 4, 1, "", "end_step"], [350, 4, 1, "", "global_step"], [350, 4, 1, "", "masks"], [350, 4, 1, "", "max_sparsity_ratio_per_layer"], [350, 4, 1, "", "modules"], [350, 4, 1, "", "pattern"], [350, 4, 1, "", "scheduler"], [350, 4, 1, "", "scores"], [350, 4, 1, "", "start_step"], [350, 4, 1, "", "target_sparsity_ratio"], [350, 4, 1, "", "update_frequency_on_step"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[351, 1, 1, "", "Pruning"]], "neural_compressor.experimental.pytorch_pruner.pruning.Pruning": [[351, 4, 1, "", "config_file_path"], [351, 4, 1, "", "model"], [351, 4, 1, "", "pruner_info"], [351, 4, 1, "", "pruners"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[352, 1, 1, "", "IterativeScheduler"], [352, 1, 1, "", "OneshotScheduler"], [352, 1, 1, "", "Scheduler"], [352, 2, 1, "", "get_scheduler"], [352, 2, 1, "", "register_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler": [[352, 4, 1, "", "config"]], "neural_compressor.experimental.quantization": [[353, 1, 1, "", "Quantization"]], "neural_compressor.experimental.scheduler": [[354, 1, 1, "", "Scheduler"]], "neural_compressor.experimental.strategy": [[355, 0, 0, "-", "auto_mixed_precision"], [356, 0, 0, "-", "basic"], [357, 0, 0, "-", "bayesian"], [358, 0, 0, "-", "exhaustive"], [360, 0, 0, "-", "mse"], [361, 0, 0, "-", "mse_v2"], [362, 0, 0, "-", "random"], [363, 0, 0, "-", "strategy"], [365, 0, 0, "-", "utils"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[355, 1, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.experimental.strategy.basic": [[356, 1, 1, "", "BasicTuneStrategy"]], "neural_compressor.experimental.strategy.bayesian": [[357, 1, 1, "", "BayesianOptimization"], [357, 1, 1, "", "BayesianTuneStrategy"], [357, 1, 1, "", "TargetSpace"], [357, 2, 1, "", "acq_max"]], "neural_compressor.experimental.strategy.exhaustive": [[358, 1, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.experimental.strategy.mse": [[360, 1, 1, "", "MSETuneStrategy"]], "neural_compressor.experimental.strategy.mse_v2": [[361, 1, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.experimental.strategy.random": [[362, 1, 1, "", "RandomTuneStrategy"]], "neural_compressor.experimental.strategy.strategy": [[363, 1, 1, "", "TuneStrategy"], [363, 2, 1, "", "strategy_registry"]], "neural_compressor.experimental.strategy.utils": [[364, 0, 0, "-", "constant"], [366, 0, 0, "-", "tuning_sampler"], [367, 0, 0, "-", "tuning_space"], [368, 0, 0, "-", "tuning_structs"], [369, 0, 0, "-", "utility"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[366, 1, 1, "", "FallbackTuningSampler"], [366, 1, 1, "", "ModelWiseTuningSampler"], [366, 1, 1, "", "OpTypeWiseTuningSampler"], [366, 1, 1, "", "OpWiseTuningSampler"], [366, 1, 1, "", "SmoothQuantSampler"], [366, 1, 1, "", "TuningOrder"], [366, 1, 1, "", "TuningSampler"], [366, 1, 1, "", "TuningSamplerRegistry"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[367, 1, 1, "", "TuningItem"], [367, 1, 1, "", "TuningSpace"], [367, 2, 1, "", "initial_tuning_cfg_with_quant_mode"], [367, 2, 1, "", "pattern_to_internal"], [367, 2, 1, "", "pattern_to_path"], [367, 2, 1, "", "quant_mode_from_pattern"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[368, 1, 1, "", "OpTuningConfig"]], "neural_compressor.experimental.strategy.utils.utility": [[369, 1, 1, "", "OrderedDefaultDict"], [369, 2, 1, "", "extract_data_type"], [369, 2, 1, "", "get_adaptor_name"], [369, 2, 1, "", "reverted_data_type"]], "neural_compressor.metric": [[371, 0, 0, "-", "bleu"], [372, 0, 0, "-", "bleu_util"], [373, 0, 0, "-", "coco_label_map"], [374, 0, 0, "-", "coco_tools"], [375, 0, 0, "-", "evaluate_squad"], [376, 0, 0, "-", "f1"], [378, 0, 0, "-", "metric"]], "neural_compressor.metric.bleu": [[371, 1, 1, "", "BLEU"], [371, 1, 1, "", "UnicodeRegex"], [371, 2, 1, "", "bleu_tokenize"]], "neural_compressor.metric.bleu.BLEU": [[371, 4, 1, "", "labels"], [371, 4, 1, "", "predictions"]], "neural_compressor.metric.bleu.UnicodeRegex": [[371, 4, 1, "", "nondigit_punct_re"], [371, 4, 1, "", "punct_nondigit_re"], [371, 4, 1, "", "symbol_re"]], "neural_compressor.metric.bleu_util": [[372, 2, 1, "", "compute_bleu"]], "neural_compressor.metric.coco_tools": [[374, 1, 1, "", "COCOEvalWrapper"], [374, 1, 1, "", "COCOWrapper"], [374, 2, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [374, 2, 1, "", "ExportSingleImageDetectionMasksToCoco"], [374, 2, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.metric.coco_tools.COCOWrapper": [[374, 4, 1, "", "dataset"], [374, 4, 1, "", "detection_type"]], "neural_compressor.metric.evaluate_squad": [[375, 2, 1, "", "evaluate"], [375, 2, 1, "", "exact_match_score"], [375, 2, 1, "", "f1_score"], [375, 2, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[376, 2, 1, "", "evaluate"], [376, 2, 1, "", "f1_score"], [376, 2, 1, "", "metric_max_over_ground_truths"], [376, 2, 1, "", "normalize_answer"]], "neural_compressor.metric.metric": [[378, 1, 1, "", "Accuracy"], [378, 1, 1, "", "BaseMetric"], [378, 1, 1, "", "COCOmAPv2"], [378, 1, 1, "", "F1"], [378, 1, 1, "", "GeneralTopK"], [378, 1, 1, "", "Loss"], [378, 1, 1, "", "MAE"], [378, 1, 1, "", "METRICS"], [378, 1, 1, "", "MSE"], [378, 1, 1, "", "MXNetMetrics"], [378, 1, 1, "", "Metric"], [378, 1, 1, "", "ONNXRTGLUE"], [378, 1, 1, "", "ONNXRTITMetrics"], [378, 1, 1, "", "ONNXRTQLMetrics"], [378, 1, 1, "", "PyTorchLoss"], [378, 1, 1, "", "PyTorchMetrics"], [378, 1, 1, "", "RMSE"], [378, 1, 1, "", "ROC"], [378, 1, 1, "", "SquadF1"], [378, 1, 1, "", "TensorflowCOCOMAP"], [378, 1, 1, "", "TensorflowMAP"], [378, 1, 1, "", "TensorflowMetrics"], [378, 1, 1, "", "TensorflowTopK"], [378, 1, 1, "", "TensorflowVOCMAP"], [378, 1, 1, "", "WrapMXNetMetric"], [378, 1, 1, "", "WrapONNXRTMetric"], [378, 1, 1, "", "WrapPyTorchMetric"], [378, 1, 1, "", "mIOU"], [378, 2, 1, "", "metric_registry"], [378, 2, 1, "", "register_customer_metric"]], "neural_compressor.metric.metric.Accuracy": [[378, 4, 1, "", "label_list"], [378, 4, 1, "", "pred_list"], [378, 4, 1, "", "sample"]], "neural_compressor.metric.metric.GeneralTopK": [[378, 4, 1, "", "k"], [378, 4, 1, "", "num_correct"], [378, 4, 1, "", "num_sample"]], "neural_compressor.metric.metric.Loss": [[378, 4, 1, "", "sample"], [378, 4, 1, "", "sum"]], "neural_compressor.metric.metric.MAE": [[378, 4, 1, "", "compare_label"], [378, 4, 1, "", "label_list"], [378, 4, 1, "", "pred_list"]], "neural_compressor.metric.metric.METRICS": [[378, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.MSE": [[378, 4, 1, "", "compare_label"], [378, 4, 1, "", "label_list"], [378, 4, 1, "", "pred_list"]], "neural_compressor.metric.metric.MXNetMetrics": [[378, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTITMetrics": [[378, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTQLMetrics": [[378, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.PyTorchMetrics": [[378, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.RMSE": [[378, 4, 1, "", "mse"]], "neural_compressor.metric.metric.TensorflowMetrics": [[378, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.TensorflowTopK": [[378, 4, 1, "", "k"], [378, 4, 1, "", "num_correct"], [378, 4, 1, "", "num_sample"]], "neural_compressor.mix_precision": [[379, 2, 1, "", "fit"]], "neural_compressor.model": [[380, 0, 0, "-", "base_model"], [382, 0, 0, "-", "keras_model"], [383, 0, 0, "-", "model"], [384, 0, 0, "-", "mxnet_model"], [385, 0, 0, "-", "nets_factory"], [386, 0, 0, "-", "onnx_model"], [387, 0, 0, "-", "tensorflow_model"], [388, 0, 0, "-", "torch_model"]], "neural_compressor.model.base_model": [[380, 1, 1, "", "BaseModel"]], "neural_compressor.model.keras_model": [[382, 1, 1, "", "KerasModel"]], "neural_compressor.model.model": [[383, 1, 1, "", "Model"], [383, 2, 1, "", "get_model_fwk_name"]], "neural_compressor.model.mxnet_model": [[384, 1, 1, "", "MXNetModel"]], "neural_compressor.model.nets_factory": [[385, 1, 1, "", "TFSlimNetsFactory"]], "neural_compressor.model.onnx_model": [[386, 1, 1, "", "ONNXModel"]], "neural_compressor.model.tensorflow_model": [[387, 1, 1, "", "TensorflowBaseModel"], [387, 1, 1, "", "TensorflowCheckpointModel"], [387, 1, 1, "", "TensorflowLLMModel"], [387, 1, 1, "", "TensorflowModel"], [387, 1, 1, "", "TensorflowQATModel"], [387, 1, 1, "", "TensorflowSavedModelModel"], [387, 2, 1, "", "checkpoint_session"], [387, 2, 1, "", "estimator_session"], [387, 2, 1, "", "frozen_pb_session"], [387, 2, 1, "", "get_model_type"], [387, 2, 1, "", "graph_def_session"], [387, 2, 1, "", "graph_session"], [387, 2, 1, "", "keras_session"], [387, 2, 1, "", "load_saved_model"], [387, 2, 1, "", "saved_model_session"], [387, 2, 1, "", "slim_session"], [387, 2, 1, "", "try_loading_keras"], [387, 2, 1, "", "validate_and_inference_input_output"], [387, 2, 1, "", "validate_graph_node"]], "neural_compressor.model.torch_model": [[388, 1, 1, "", "IPEXModel"], [388, 1, 1, "", "PyTorchBaseModel"], [388, 1, 1, "", "PyTorchFXModel"], [388, 1, 1, "", "PyTorchModel"]], "neural_compressor.objective": [[389, 1, 1, "", "Accuracy"], [389, 1, 1, "", "Footprint"], [389, 1, 1, "", "ModelSize"], [389, 1, 1, "", "MultiObjective"], [389, 1, 1, "", "Objective"], [389, 1, 1, "", "Performance"], [389, 2, 1, "", "objective_custom_registry"], [389, 2, 1, "", "objective_registry"]], "neural_compressor.onnxrt": [[390, 0, 0, "-", "algorithms"], [406, 0, 0, "-", "quantization"], [408, 0, 0, "-", "utils"]], "neural_compressor.onnxrt.algorithms": [[392, 0, 0, "-", "layer_wise"], [395, 0, 0, "-", "smoother"], [398, 0, 0, "-", "weight_only"]], "neural_compressor.onnxrt.algorithms.layer_wise": [[391, 0, 0, "-", "core"]], "neural_compressor.onnxrt.algorithms.layer_wise.core": [[391, 2, 1, "", "layer_wise_quant"]], "neural_compressor.onnxrt.algorithms.smoother": [[393, 0, 0, "-", "calibrator"], [394, 0, 0, "-", "core"]], "neural_compressor.onnxrt.algorithms.smoother.calibrator": [[393, 1, 1, "", "Calibrator"]], "neural_compressor.onnxrt.algorithms.smoother.core": [[394, 1, 1, "", "Smoother"]], "neural_compressor.onnxrt.algorithms.weight_only": [[396, 0, 0, "-", "awq"], [397, 0, 0, "-", "gptq"], [399, 0, 0, "-", "rtn"], [400, 0, 0, "-", "utility"]], "neural_compressor.onnxrt.algorithms.weight_only.awq": [[396, 2, 1, "", "apply_awq_on_model"], [396, 2, 1, "", "awq_quantize"]], "neural_compressor.onnxrt.algorithms.weight_only.gptq": [[397, 2, 1, "", "apply_gptq_on_model"], [397, 2, 1, "", "gptq_quantize"]], "neural_compressor.onnxrt.algorithms.weight_only.rtn": [[399, 2, 1, "", "apply_rtn_on_model"], [399, 2, 1, "", "rtn_quantize"]], "neural_compressor.onnxrt.algorithms.weight_only.utility": [[400, 2, 1, "", "make_matmul_weight_only_node"], [400, 2, 1, "", "pad_tensor"], [400, 2, 1, "", "prepare_inputs"], [400, 2, 1, "", "qdq_tensor"], [400, 2, 1, "", "quant_tensor"]], "neural_compressor.onnxrt.quantization": [[402, 0, 0, "-", "algorithm_entry"], [403, 0, 0, "-", "autotune"], [404, 0, 0, "-", "calibrate"], [405, 0, 0, "-", "config"], [407, 0, 0, "-", "quantize"]], "neural_compressor.onnxrt.quantization.algorithm_entry": [[402, 2, 1, "", "awq_quantize_entry"], [402, 2, 1, "", "gptq_quantize_entry"], [402, 2, 1, "", "rtn_quantize_entry"], [402, 2, 1, "", "smooth_quant_entry"]], "neural_compressor.onnxrt.quantization.autotune": [[403, 2, 1, "", "autotune"]], "neural_compressor.onnxrt.quantization.calibrate": [[404, 1, 1, "", "CalibrationDataReader"]], "neural_compressor.onnxrt.quantization.config": [[405, 1, 1, "", "AWQConfig"], [405, 1, 1, "", "GPTQConfig"], [405, 1, 1, "", "RTNConfig"], [405, 1, 1, "", "SmoohQuantConfig"], [405, 2, 1, "", "get_default_awq_config"], [405, 2, 1, "", "get_default_gptq_config"], [405, 2, 1, "", "get_default_rtn_config"], [405, 2, 1, "", "get_default_sq_config"]], "neural_compressor.onnxrt.utils": [[409, 0, 0, "-", "onnx_model"], [410, 0, 0, "-", "utility"]], "neural_compressor.onnxrt.utils.onnx_model": [[409, 1, 1, "", "ONNXModel"]], "neural_compressor.onnxrt.utils.utility": [[410, 2, 1, "", "check_model_with_infer_shapes"], [410, 2, 1, "", "find_by_name"], [410, 2, 1, "", "get_qrange_for_qType"], [410, 2, 1, "", "is_B_transposed"], [410, 2, 1, "", "quantize_data"], [410, 2, 1, "", "register_algo"], [410, 2, 1, "", "simple_progress_bar"]], "neural_compressor.profiling": [[413, 0, 0, "-", "parser"], [423, 0, 0, "-", "profiler"]], "neural_compressor.profiling.parser": [[412, 0, 0, "-", "factory"], [415, 0, 0, "-", "onnx_parser"], [417, 0, 0, "-", "parser"], [418, 0, 0, "-", "result"], [420, 0, 0, "-", "tensorflow_parser"]], "neural_compressor.profiling.parser.factory": [[412, 1, 1, "", "ParserFactory"]], "neural_compressor.profiling.parser.onnx_parser": [[414, 0, 0, "-", "factory"], [416, 0, 0, "-", "parser"]], "neural_compressor.profiling.parser.onnx_parser.factory": [[414, 1, 1, "", "OnnxrtParserFactory"]], "neural_compressor.profiling.parser.onnx_parser.parser": [[416, 1, 1, "", "OnnxProfilingParser"]], "neural_compressor.profiling.parser.parser": [[417, 1, 1, "", "ProfilingParser"]], "neural_compressor.profiling.parser.result": [[418, 1, 1, "", "ProfilingResult"]], "neural_compressor.profiling.parser.tensorflow_parser": [[419, 0, 0, "-", "factory"], [421, 0, 0, "-", "parser"]], "neural_compressor.profiling.parser.tensorflow_parser.factory": [[419, 1, 1, "", "TensorFlowParserFactory"]], "neural_compressor.profiling.parser.tensorflow_parser.parser": [[421, 1, 1, "", "TensorFlowProfilingParser"]], "neural_compressor.profiling.profiler": [[422, 0, 0, "-", "factory"], [425, 0, 0, "-", "onnxrt_profiler"], [428, 0, 0, "-", "profiler"], [430, 0, 0, "-", "tensorflow_profiler"]], "neural_compressor.profiling.profiler.factory": [[422, 1, 1, "", "ProfilerFactory"]], "neural_compressor.profiling.profiler.onnxrt_profiler": [[424, 0, 0, "-", "factory"], [426, 0, 0, "-", "profiler"], [427, 0, 0, "-", "utils"]], "neural_compressor.profiling.profiler.onnxrt_profiler.factory": [[424, 1, 1, "", "ProfilerFactory"]], "neural_compressor.profiling.profiler.onnxrt_profiler.profiler": [[426, 1, 1, "", "Profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.utils": [[427, 2, 1, "", "create_onnx_config"]], "neural_compressor.profiling.profiler.profiler": [[428, 1, 1, "", "Profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler": [[429, 0, 0, "-", "factory"], [431, 0, 0, "-", "profiler"], [432, 0, 0, "-", "utils"]], "neural_compressor.profiling.profiler.tensorflow_profiler.factory": [[429, 1, 1, "", "ProfilerFactory"]], "neural_compressor.profiling.profiler.tensorflow_profiler.profiler": [[431, 1, 1, "", "Profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.utils": [[432, 2, 1, "", "create_tf_config"], [432, 2, 1, "", "delete_assign"], [432, 2, 1, "", "set_eager_execution"]], "neural_compressor.quantization": [[433, 2, 1, "", "fit"]], "neural_compressor.strategy": [[434, 0, 0, "-", "auto"], [435, 0, 0, "-", "auto_mixed_precision"], [436, 0, 0, "-", "basic"], [437, 0, 0, "-", "bayesian"], [438, 0, 0, "-", "conservative"], [439, 0, 0, "-", "exhaustive"], [440, 0, 0, "-", "hawq_v2"], [442, 0, 0, "-", "mse"], [443, 0, 0, "-", "mse_v2"], [444, 0, 0, "-", "random"], [445, 0, 0, "-", "strategy"], [447, 0, 0, "-", "utils"]], "neural_compressor.strategy.auto": [[434, 1, 1, "", "AutoTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[435, 1, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.basic": [[436, 1, 1, "", "BasicTuneStrategy"]], "neural_compressor.strategy.bayesian": [[437, 1, 1, "", "BayesianOptimization"], [437, 1, 1, "", "BayesianTuneStrategy"], [437, 1, 1, "", "TargetSpace"], [437, 2, 1, "", "acq_max"]], "neural_compressor.strategy.conservative": [[438, 1, 1, "", "ConservativeTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[439, 1, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[440, 1, 1, "", "HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.mse": [[442, 1, 1, "", "MSETuneStrategy"]], "neural_compressor.strategy.mse_v2": [[443, 1, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.strategy.random": [[444, 1, 1, "", "RandomTuneStrategy"]], "neural_compressor.strategy.strategy": [[445, 1, 1, "", "TuneStrategy"], [445, 1, 1, "", "TuneStrategyMeta"], [445, 2, 1, "", "strategy_registry"]], "neural_compressor.strategy.utils": [[446, 0, 0, "-", "constant"], [448, 0, 0, "-", "tuning_sampler"], [449, 0, 0, "-", "tuning_space"], [450, 0, 0, "-", "tuning_structs"], [451, 0, 0, "-", "utility"]], "neural_compressor.strategy.utils.tuning_sampler": [[448, 1, 1, "", "BlockFallbackTuningSampler"], [448, 1, 1, "", "FallbackTuningSampler"], [448, 1, 1, "", "LowerBitsSampler"], [448, 1, 1, "", "ModelWiseTuningSampler"], [448, 1, 1, "", "OpTypeWiseTuningSampler"], [448, 1, 1, "", "OpWiseTuningSampler"], [448, 1, 1, "", "SmoothQuantSampler"], [448, 1, 1, "", "TuningOrder"], [448, 1, 1, "", "TuningSampler"], [448, 1, 1, "", "WeightOnlyQuantSampler"]], "neural_compressor.strategy.utils.tuning_space": [[449, 1, 1, "", "TuningItem"], [449, 1, 1, "", "TuningSpace"], [449, 2, 1, "", "initial_tuning_cfg_with_quant_mode"], [449, 2, 1, "", "pattern_to_internal"], [449, 2, 1, "", "pattern_to_path"], [449, 2, 1, "", "quant_mode_from_pattern"]], "neural_compressor.strategy.utils.tuning_structs": [[450, 1, 1, "", "OpTuningConfig"]], "neural_compressor.strategy.utils.utility": [[451, 1, 1, "", "ClassRegister"], [451, 1, 1, "", "OrderedDefaultDict"], [451, 1, 1, "", "QuantOptions"], [451, 1, 1, "", "QuantType"], [451, 2, 1, "", "build_slave_faker_model"], [451, 2, 1, "", "extract_data_type"], [451, 2, 1, "", "get_adaptor_name"], [451, 2, 1, "", "preprocess_user_cfg"], [451, 2, 1, "", "reverted_data_type"]], "neural_compressor.template": [[452, 0, 0, "-", "api_doc_example"]], "neural_compressor.template.api_doc_example": [[452, 1, 1, "", "ExampleClass"], [452, 4, 1, "", "attribute1"], [452, 2, 1, "", "function1"], [452, 2, 1, "", "function2"], [452, 2, 1, "", "function3"], [452, 2, 1, "", "generator1"], [452, 5, 1, "", "module_debug_level1"]], "neural_compressor.template.api_doc_example.ExampleClass": [[452, 4, 1, "", "attr1"], [452, 4, 1, "", "attr2"], [452, 4, 1, "", "attr5"]], "neural_compressor.tensorflow": [[454, 0, 0, "-", "algorithms"], [463, 0, 0, "-", "keras"], [476, 0, 0, "-", "quantization"], [573, 0, 0, "-", "utils"]], "neural_compressor.tensorflow.algorithms": [[457, 0, 0, "-", "smoother"], [459, 0, 0, "-", "static_quant"]], "neural_compressor.tensorflow.algorithms.smoother": [[455, 0, 0, "-", "calibration"], [456, 0, 0, "-", "core"], [458, 0, 0, "-", "scaler"]], "neural_compressor.tensorflow.algorithms.smoother.calibration": [[455, 1, 1, "", "SmoothQuantCalibration"], [455, 1, 1, "", "SmoothQuantCalibrationLLM"]], "neural_compressor.tensorflow.algorithms.smoother.core": [[456, 1, 1, "", "SmoothQuant"]], "neural_compressor.tensorflow.algorithms.smoother.scaler": [[458, 1, 1, "", "SmoothQuantScaler"], [458, 1, 1, "", "SmoothQuantScalerLLM"]], "neural_compressor.tensorflow.algorithms.static_quant": [[460, 0, 0, "-", "keras"], [461, 0, 0, "-", "tensorflow"]], "neural_compressor.tensorflow.algorithms.static_quant.keras": [[460, 1, 1, "", "KerasAdaptor"], [460, 1, 1, "", "KerasConfigConverter"], [460, 1, 1, "", "KerasQuery"]], "neural_compressor.tensorflow.algorithms.static_quant.tensorflow": [[461, 1, 1, "", "TensorFlowAdaptor"], [461, 1, 1, "", "TensorFlowConfig"], [461, 1, 1, "", "TensorflowConfigConverter"], [461, 1, 1, "", "TensorflowQuery"], [461, 1, 1, "", "Tensorflow_ITEXAdaptor"]], "neural_compressor.tensorflow.keras": [[467, 0, 0, "-", "layers"], [472, 0, 0, "-", "quantization"]], "neural_compressor.tensorflow.keras.layers": [[464, 0, 0, "-", "conv2d"], [465, 0, 0, "-", "dense"], [466, 0, 0, "-", "depthwise_conv2d"], [468, 0, 0, "-", "pool2d"], [469, 0, 0, "-", "quantizer"], [470, 0, 0, "-", "separable_conv2d"]], "neural_compressor.tensorflow.keras.quantization": [[471, 0, 0, "-", "config"]], "neural_compressor.tensorflow.keras.quantization.config": [[471, 1, 1, "", "StaticQuantConfig"], [471, 2, 1, "", "get_all_registered_configs"], [471, 2, 1, "", "get_default_static_quant_config"]], "neural_compressor.tensorflow.quantization": [[473, 0, 0, "-", "algorithm_entry"], [474, 0, 0, "-", "autotune"], [475, 0, 0, "-", "config"], [477, 0, 0, "-", "quantize"], [536, 0, 0, "-", "utils"]], "neural_compressor.tensorflow.quantization.algorithm_entry": [[473, 2, 1, "", "static_quant_entry"]], "neural_compressor.tensorflow.quantization.autotune": [[474, 2, 1, "", "autotune"]], "neural_compressor.tensorflow.quantization.config": [[475, 1, 1, "", "SmoothQuantConfig"], [475, 1, 1, "", "StaticQuantConfig"], [475, 2, 1, "", "get_default_sq_config"], [475, 2, 1, "", "get_default_static_quant_config"]], "neural_compressor.tensorflow.quantization.quantize": [[477, 2, 1, "", "quantize_model"], [477, 2, 1, "", "quantize_model_with_single_config"]], "neural_compressor.tensorflow.quantization.utils": [[478, 0, 0, "-", "graph_converter"], [479, 0, 0, "-", "graph_converter_without_calib"], [517, 0, 0, "-", "graph_rewriter"], [535, 0, 0, "-", "graph_util"], [537, 0, 0, "-", "quantize_graph"], [564, 0, 0, "-", "quantize_graph_common"], [567, 0, 0, "-", "transform_graph"], [570, 0, 0, "-", "utility"]], "neural_compressor.tensorflow.quantization.utils.graph_converter": [[478, 1, 1, "", "GraphConverter"]], "neural_compressor.tensorflow.quantization.utils.graph_converter_without_calib": [[479, 1, 1, "", "GraphConverterWithoutCalib"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter": [[482, 0, 0, "-", "bf16"], [506, 0, 0, "-", "generic"], [516, 0, 0, "-", "graph_base"], [525, 0, 0, "-", "int8"], [531, 0, 0, "-", "qdq"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16": [[480, 0, 0, "-", "bf16_convert"], [481, 0, 0, "-", "dequantize_cast_optimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.bf16_convert": [[480, 1, 1, "", "BF16Convert"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.dequantize_cast_optimizer": [[481, 1, 1, "", "DequantizeCastOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic": [[483, 0, 0, "-", "convert_add_to_biasadd"], [484, 0, 0, "-", "convert_layout"], [485, 0, 0, "-", "convert_leakyrelu"], [486, 0, 0, "-", "convert_nan_to_random"], [487, 0, 0, "-", "convert_placeholder_to_const"], [488, 0, 0, "-", "dilated_contraction"], [489, 0, 0, "-", "dummy_biasadd"], [490, 0, 0, "-", "expanddims_optimizer"], [491, 0, 0, "-", "fetch_weight_from_reshape"], [492, 0, 0, "-", "fold_batch_norm"], [493, 0, 0, "-", "fold_constant"], [494, 0, 0, "-", "fuse_biasadd_add"], [495, 0, 0, "-", "fuse_column_wise_mul"], [496, 0, 0, "-", "fuse_conv_with_math"], [497, 0, 0, "-", "fuse_decomposed_bn"], [498, 0, 0, "-", "fuse_decomposed_in"], [499, 0, 0, "-", "fuse_gelu"], [500, 0, 0, "-", "fuse_layer_norm"], [501, 0, 0, "-", "fuse_pad_with_conv"], [502, 0, 0, "-", "fuse_pad_with_fp32_conv"], [503, 0, 0, "-", "fuse_reshape_transpose"], [504, 0, 0, "-", "graph_cse_optimizer"], [505, 0, 0, "-", "grappler_pass"], [507, 0, 0, "-", "insert_print_node"], [508, 0, 0, "-", "move_squeeze_after_relu"], [509, 0, 0, "-", "pre_optimize"], [510, 0, 0, "-", "remove_training_nodes"], [511, 0, 0, "-", "rename_batch_norm"], [512, 0, 0, "-", "split_shared_input"], [513, 0, 0, "-", "strip_equivalent_nodes"], [514, 0, 0, "-", "strip_unused_nodes"], [515, 0, 0, "-", "switch_optimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd": [[483, 1, 1, "", "ConvertAddToBiasAddOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout": [[484, 1, 1, "", "ConvertLayoutOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu": [[485, 1, 1, "", "ConvertLeakyReluOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random": [[486, 1, 1, "", "ConvertNanToRandom"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const": [[487, 1, 1, "", "ConvertPlaceholderToConst"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction": [[488, 1, 1, "", "DilatedContraction"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd": [[489, 1, 1, "", "InjectDummyBiasAddOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer": [[490, 1, 1, "", "ExpandDimsOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape": [[491, 1, 1, "", "FetchWeightFromReshapeOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm": [[492, 1, 1, "", "FoldBatchNormNodesOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant": [[493, 1, 1, "", "GraphFoldConstantOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add": [[494, 1, 1, "", "FuseBiasAddAndAddOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul": [[495, 1, 1, "", "FuseColumnWiseMulOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math": [[496, 1, 1, "", "FuseConvWithMathOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn": [[497, 1, 1, "", "FuseDecomposedBNOptimizer"], [497, 2, 1, "", "bypass_reshape"], [497, 2, 1, "", "get_const_dim_count"], [497, 2, 1, "", "node_from_map"], [497, 2, 1, "", "node_name_from_input"], [497, 2, 1, "", "valid_reshape_inputs"], [497, 2, 1, "", "values_from_const"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in": [[498, 1, 1, "", "FuseDecomposedINOptimizer"], [498, 2, 1, "", "bypass_reshape"], [498, 2, 1, "", "get_const_dim_count"], [498, 2, 1, "", "node_from_map"], [498, 2, 1, "", "node_name_from_input"], [498, 2, 1, "", "valid_reshape_inputs"], [498, 2, 1, "", "values_from_const"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu": [[499, 1, 1, "", "FuseGeluOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm": [[500, 1, 1, "", "FuseLayerNormOptimizer"], [500, 2, 1, "", "node_from_map"], [500, 2, 1, "", "node_name_from_input"], [500, 2, 1, "", "values_from_const"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv": [[501, 1, 1, "", "FusePadWithConv2DOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[502, 1, 1, "", "FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose": [[503, 1, 1, "", "FuseTransposeReshapeOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer": [[504, 1, 1, "", "GraphCseOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass": [[505, 1, 1, "", "GrapplerOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node": [[507, 1, 1, "", "InsertPrintMinMaxNode"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu": [[508, 1, 1, "", "MoveSqueezeAfterReluOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize": [[509, 1, 1, "", "PreOptimization"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes": [[510, 1, 1, "", "RemoveTrainingNodesOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm": [[511, 1, 1, "", "RenameBatchNormOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input": [[512, 1, 1, "", "SplitSharedInputOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes": [[513, 1, 1, "", "StripEquivalentNodesOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes": [[514, 1, 1, "", "StripUnusedNodesOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer": [[515, 1, 1, "", "SwitchOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base": [[516, 1, 1, "", "GraphRewriterBase"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8": [[518, 0, 0, "-", "freeze_fake_quant"], [519, 0, 0, "-", "freeze_value"], [520, 0, 0, "-", "freeze_value_without_calib"], [521, 0, 0, "-", "fuse_conv_redundant_dequantize"], [522, 0, 0, "-", "fuse_conv_requantize"], [523, 0, 0, "-", "fuse_matmul_redundant_dequantize"], [524, 0, 0, "-", "fuse_matmul_requantize"], [526, 0, 0, "-", "meta_op_optimizer"], [527, 0, 0, "-", "post_hostconst_converter"], [528, 0, 0, "-", "post_quantized_op_cse"], [529, 0, 0, "-", "rnn_convert"], [530, 0, 0, "-", "scale_propagation"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_fake_quant": [[518, 1, 1, "", "FreezeFakeQuantOpOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value": [[519, 1, 1, "", "FreezeValueTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value_without_calib": [[520, 1, 1, "", "FreezeValueWithoutCalibTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[521, 1, 1, "", "FuseConvRedundantDequantizeTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_requantize": [[522, 1, 1, "", "FuseConvRequantizeTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[523, 1, 1, "", "FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize": [[524, 1, 1, "", "FuseMatMulRequantizeDequantizeNewAPITransformer"], [524, 1, 1, "", "FuseMatMulRequantizeDequantizeTransformer"], [524, 1, 1, "", "FuseMatMulRequantizeNewAPITransformer"], [524, 1, 1, "", "FuseMatMulRequantizeTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.meta_op_optimizer": [[526, 1, 1, "", "MetaInfoChangingMemOpOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_hostconst_converter": [[527, 1, 1, "", "PostHostConstConverter"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_quantized_op_cse": [[528, 1, 1, "", "PostCseOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.rnn_convert": [[529, 1, 1, "", "QuantizedRNNConverter"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.scale_propagation": [[530, 1, 1, "", "ScaleProPagationTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq": [[532, 0, 0, "-", "insert_qdq_pattern"], [533, 0, 0, "-", "merge_duplicated_qdq"], [534, 0, 0, "-", "share_qdq_y_pattern"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.insert_qdq_pattern": [[532, 1, 1, "", "GenerateGraphWithQDQPattern"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.merge_duplicated_qdq": [[533, 1, 1, "", "MergeDuplicatedQDQOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.share_qdq_y_pattern": [[534, 1, 1, "", "ShareQDQForItexYPatternOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_util": [[535, 1, 1, "", "GraphAnalyzer"], [535, 1, 1, "", "GraphRewriterHelper"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph": [[539, 0, 0, "-", "qat"], [555, 0, 0, "-", "qdq"], [557, 0, 0, "-", "quantize_graph_base"], [558, 0, 0, "-", "quantize_graph_bn"], [559, 0, 0, "-", "quantize_graph_concatv2"], [560, 0, 0, "-", "quantize_graph_conv"], [561, 0, 0, "-", "quantize_graph_for_intel_cpu"], [562, 0, 0, "-", "quantize_graph_matmul"], [563, 0, 0, "-", "quantize_graph_pooling"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat": [[538, 0, 0, "-", "fake_quantize"], [540, 0, 0, "-", "quantize_config"], [541, 0, 0, "-", "quantize_helper"], [542, 0, 0, "-", "quantize_layers"], [547, 0, 0, "-", "quantize_wrapper"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.fake_quantize": [[538, 1, 1, "", "FakeQuantize"], [538, 1, 1, "", "FakeQuantizeBase"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_config": [[540, 1, 1, "", "QuantizeConfig"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_helper": [[541, 2, 1, "", "init_quantize_config"], [541, 2, 1, "", "qat_clone_function"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers": [[543, 0, 0, "-", "optimize_layer"], [544, 0, 0, "-", "quantize_layer_add"], [545, 0, 0, "-", "quantize_layer_base"], [546, 0, 0, "-", "quantize_layer_bn"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.optimize_layer": [[543, 2, 1, "", "config_quantizable_layers"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[544, 1, 1, "", "QuantizeLayerAdd"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[545, 1, 1, "", "QuantizeLayerBase"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[546, 1, 1, "", "QuantizeLayerBatchNormalization"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_wrapper": [[547, 1, 1, "", "QuantizeWrapper"], [547, 1, 1, "", "QuantizeWrapperBase"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq": [[548, 0, 0, "-", "fuse_qdq_bn"], [549, 0, 0, "-", "fuse_qdq_concatv2"], [550, 0, 0, "-", "fuse_qdq_conv"], [551, 0, 0, "-", "fuse_qdq_deconv"], [552, 0, 0, "-", "fuse_qdq_in"], [553, 0, 0, "-", "fuse_qdq_matmul"], [554, 0, 0, "-", "fuse_qdq_pooling"], [556, 0, 0, "-", "optimize_qdq"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_bn": [[548, 1, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_concatv2": [[549, 1, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_conv": [[550, 1, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_deconv": [[551, 1, 1, "", "FuseNodeStartWithDeconv2d"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_in": [[552, 1, 1, "", "FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_matmul": [[553, 1, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_pooling": [[554, 1, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.optimize_qdq": [[556, 1, 1, "", "OptimizeQDQGraph"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base": [[557, 1, 1, "", "QuantizeGraphBase"], [557, 1, 1, "", "QuantizeNodeBase"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_bn": [[558, 1, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_concatv2": [[559, 1, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_conv": [[560, 1, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_for_intel_cpu": [[561, 1, 1, "", "QuantizeGraphForIntel"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_matmul": [[562, 1, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_pooling": [[563, 1, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph_common": [[564, 1, 1, "", "QuantizeGraphHelper"]], "neural_compressor.tensorflow.quantization.utils.transform_graph": [[565, 0, 0, "-", "bias_correction"], [566, 0, 0, "-", "graph_transform_base"], [568, 0, 0, "-", "insert_logging"], [569, 0, 0, "-", "rerange_quantized_concat"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.bias_correction": [[565, 1, 1, "", "BiasCorrection"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.graph_transform_base": [[566, 1, 1, "", "GraphTransformBase"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.insert_logging": [[568, 1, 1, "", "InsertLogging"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.rerange_quantized_concat": [[569, 1, 1, "", "RerangeQuantizedConcat"]], "neural_compressor.tensorflow.quantization.utils.utility": [[570, 2, 1, "", "apply_inlining"], [570, 2, 1, "", "collate_tf_preds"], [570, 2, 1, "", "construct_function_from_graph_def"], [570, 2, 1, "", "disable_random"], [570, 2, 1, "", "fix_ref_type_of_graph_def"], [570, 2, 1, "", "generate_feed_dict"], [570, 2, 1, "", "get_graph_def"], [570, 2, 1, "", "get_input_output_node_names"], [570, 2, 1, "", "get_model_input_shape"], [570, 2, 1, "", "get_tensor_by_name"], [570, 2, 1, "", "get_tensor_val_from_graph_node"], [570, 2, 1, "", "get_weight_from_input_tensor"], [570, 2, 1, "", "int8_node_name_reverse"], [570, 2, 1, "", "is_ckpt_format"], [570, 2, 1, "", "is_saved_model_format"], [570, 2, 1, "", "iterator_sess_run"], [570, 2, 1, "", "parse_saved_model"], [570, 2, 1, "", "read_graph"], [570, 2, 1, "", "reconstruct_saved_model"], [570, 2, 1, "", "strip_equivalent_nodes"], [570, 2, 1, "", "strip_unused_nodes"], [570, 2, 1, "", "tf_diagnosis_helper"], [570, 2, 1, "", "write_graph"]], "neural_compressor.tensorflow.utils": [[571, 0, 0, "-", "constants"], [572, 0, 0, "-", "data"], [574, 0, 0, "-", "model"], [575, 0, 0, "-", "model_wrappers"], [576, 0, 0, "-", "nets_factory"], [577, 0, 0, "-", "utility"]], "neural_compressor.tensorflow.utils.data": [[572, 1, 1, "", "BaseDataLoader"], [572, 1, 1, "", "DummyDataset"], [572, 1, 1, "", "DummyDatasetV2"]], "neural_compressor.tensorflow.utils.model": [[574, 1, 1, "", "Model"]], "neural_compressor.tensorflow.utils.model_wrappers": [[575, 1, 1, "", "BaseModel"], [575, 1, 1, "", "KerasModel"], [575, 1, 1, "", "TensorflowBaseModel"], [575, 1, 1, "", "TensorflowCheckpointModel"], [575, 1, 1, "", "TensorflowLLMModel"], [575, 1, 1, "", "TensorflowModel"], [575, 1, 1, "", "TensorflowQATModel"], [575, 1, 1, "", "TensorflowSavedModelModel"], [575, 2, 1, "", "checkpoint_session"], [575, 2, 1, "", "estimator_session"], [575, 2, 1, "", "frozen_pb_session"], [575, 2, 1, "", "get_model_type"], [575, 2, 1, "", "graph_def_session"], [575, 2, 1, "", "graph_session"], [575, 2, 1, "", "keras_session"], [575, 2, 1, "", "load_saved_model"], [575, 2, 1, "", "saved_model_session"], [575, 2, 1, "", "slim_session"], [575, 2, 1, "", "validate_and_inference_input_output"], [575, 2, 1, "", "validate_graph_node"]], "neural_compressor.tensorflow.utils.nets_factory": [[576, 1, 1, "", "TFSlimNetsFactory"]], "neural_compressor.tensorflow.utils.utility": [[577, 1, 1, "", "CaptureOutputToFile"], [577, 1, 1, "", "CpuInfo"], [577, 2, 1, "", "Dequantize"], [577, 1, 1, "", "LazyImport"], [577, 1, 1, "", "Statistics"], [577, 2, 1, "", "combine_histogram"], [577, 2, 1, "", "deep_get"], [577, 2, 1, "", "dequantize_weight"], [577, 2, 1, "", "disable_random"], [577, 2, 1, "", "dump_data_to_local"], [577, 2, 1, "", "dump_elapsed_time"], [577, 2, 1, "", "get_all_fp32_data"], [577, 2, 1, "", "get_tensor_histogram"], [577, 2, 1, "", "itex_installed"], [577, 2, 1, "", "load_data_from_pkl"], [577, 2, 1, "", "register_algo"], [577, 2, 1, "", "singleton"], [577, 2, 1, "", "version1_eq_version2"], [577, 2, 1, "", "version1_gt_version2"], [577, 2, 1, "", "version1_gte_version2"], [577, 2, 1, "", "version1_lt_version2"], [577, 2, 1, "", "version1_lte_version2"]], "neural_compressor.torch": [[585, 0, 0, "-", "algorithms"], [618, 0, 0, "-", "amp"], [623, 0, 0, "-", "quantization"], [629, 0, 0, "-", "utils"]], "neural_compressor.torch.algorithms": [[579, 0, 0, "-", "habana_fp8"], [586, 0, 0, "-", "layer_wise"], [590, 0, 0, "-", "smooth_quant"], [594, 0, 0, "-", "static_quant"], [610, 0, 0, "-", "weight_only"]], "neural_compressor.torch.algorithms.habana_fp8": [[578, 0, 0, "-", "fp8_quant"], [580, 0, 0, "-", "modules"], [581, 0, 0, "-", "observer"], [582, 0, 0, "-", "save_load"], [583, 0, 0, "-", "scale"], [584, 0, 0, "-", "tensor"]], "neural_compressor.torch.algorithms.layer_wise": [[587, 0, 0, "-", "load"], [588, 0, 0, "-", "modified_pickle"], [589, 0, 0, "-", "utils"]], "neural_compressor.torch.algorithms.layer_wise.load": [[587, 2, 1, "", "load"]], "neural_compressor.torch.algorithms.layer_wise.modified_pickle": [[588, 3, 1, "", "PickleError"], [588, 3, 1, "", "PicklingError"], [588, 3, 1, "", "UnpicklingError"]], "neural_compressor.torch.algorithms.layer_wise.utils": [[589, 2, 1, "", "dowload_hf_model"], [589, 2, 1, "", "get_children"], [589, 2, 1, "", "get_module"], [589, 2, 1, "", "get_named_children"], [589, 2, 1, "", "get_super_module_by_name"], [589, 2, 1, "", "load_empty_model"], [589, 2, 1, "", "load_layer_wise_quantized_model"], [589, 2, 1, "", "load_tensor"], [589, 2, 1, "", "load_tensor_from_shard"], [589, 2, 1, "", "update_module"]], "neural_compressor.torch.algorithms.smooth_quant": [[591, 0, 0, "-", "save_load"], [592, 0, 0, "-", "smooth_quant"], [593, 0, 0, "-", "utility"]], "neural_compressor.torch.algorithms.smooth_quant.save_load": [[591, 2, 1, "", "recover_model_from_json"]], "neural_compressor.torch.algorithms.smooth_quant.smooth_quant": [[592, 2, 1, "", "smooth_quantize"]], "neural_compressor.torch.algorithms.smooth_quant.utility": [[593, 1, 1, "", "CpuInfo"], [593, 1, 1, "", "TorchSmoothQuant"], [593, 2, 1, "", "check_cfg_and_qconfig"], [593, 2, 1, "", "generate_activation_observer"], [593, 2, 1, "", "get_module"], [593, 2, 1, "", "get_quantizable_ops_recursively"], [593, 2, 1, "", "register_autotune"], [593, 2, 1, "", "reshape_in_channel_to_last"], [593, 2, 1, "", "reshape_scale_as_input"], [593, 2, 1, "", "reshape_scale_as_weight"], [593, 2, 1, "", "set_module"], [593, 2, 1, "", "update_sq_scale"]], "neural_compressor.torch.algorithms.static_quant": [[595, 0, 0, "-", "save_load"], [596, 0, 0, "-", "static_quant"], [597, 0, 0, "-", "utility"]], "neural_compressor.torch.algorithms.static_quant.static_quant": [[596, 2, 1, "", "static_quantize"]], "neural_compressor.torch.algorithms.static_quant.utility": [[597, 1, 1, "", "Statistics"], [597, 1, 1, "", "TransformerBasedModelBlockPatternDetector"], [597, 2, 1, "", "dump_model_op_stats"], [597, 2, 1, "", "get_depth"], [597, 2, 1, "", "get_dict_at_depth"], [597, 2, 1, "", "get_element_under_depth"], [597, 2, 1, "", "get_quantizable_ops_from_cfgs"], [597, 2, 1, "", "get_quantizable_ops_recursively"], [597, 2, 1, "", "paser_cfgs"], [597, 2, 1, "", "simple_inference"]], "neural_compressor.torch.algorithms.weight_only": [[598, 0, 0, "-", "autoround"], [599, 0, 0, "-", "awq"], [600, 0, 0, "-", "gptq"], [604, 0, 0, "-", "hqq"], [611, 0, 0, "-", "modules"], [612, 0, 0, "-", "rtn"], [613, 0, 0, "-", "teq"], [614, 0, 0, "-", "utility"]], "neural_compressor.torch.algorithms.weight_only.autoround": [[598, 2, 1, "", "autoround_quantize"], [598, 2, 1, "", "get_autoround_default_run_fn"]], "neural_compressor.torch.algorithms.weight_only.awq": [[599, 2, 1, "", "awq_quantize"]], "neural_compressor.torch.algorithms.weight_only.gptq": [[600, 1, 1, "", "GPTQ"], [600, 1, 1, "", "GPTQuantizer"], [600, 2, 1, "", "find_layers"], [600, 2, 1, "", "find_layers_name"], [600, 2, 1, "", "gptq_quantize"], [600, 2, 1, "", "is_leaf"], [600, 2, 1, "", "log_quantizable_layers_per_transformer"], [600, 2, 1, "", "quantize"], [600, 2, 1, "", "trace_gptq_target_blocks"]], "neural_compressor.torch.algorithms.weight_only.hqq": [[601, 0, 0, "-", "bitpack"], [602, 0, 0, "-", "config"], [603, 0, 0, "-", "core"], [605, 0, 0, "-", "optimizer"], [606, 0, 0, "-", "qtensor"], [607, 0, 0, "-", "quant_api"], [608, 0, 0, "-", "quantizer"], [609, 0, 0, "-", "utility"]], "neural_compressor.torch.algorithms.weight_only.hqq.config": [[602, 1, 1, "", "HQQModuleConfig"]], "neural_compressor.torch.algorithms.weight_only.hqq.utility": [[609, 2, 1, "", "dump_elapsed_time"]], "neural_compressor.torch.algorithms.weight_only.modules": [[611, 1, 1, "", "FakeAffineTensorQuantFunction"], [611, 1, 1, "", "MulLinear"], [611, 1, 1, "", "TEQLinearFakeQuant"]], "neural_compressor.torch.algorithms.weight_only.rtn": [[612, 2, 1, "", "rtn_quantize"]], "neural_compressor.torch.algorithms.weight_only.teq": [[613, 1, 1, "", "TEQuantizer"], [613, 2, 1, "", "teq_quantize"]], "neural_compressor.torch.algorithms.weight_only.utility": [[614, 2, 1, "", "calibration"], [614, 2, 1, "", "fetch_module"], [614, 2, 1, "", "get_absorb_layers"], [614, 2, 1, "", "get_block_prefix"], [614, 2, 1, "", "get_example_input"], [614, 2, 1, "", "get_hidden_states"], [614, 2, 1, "", "get_module"], [614, 2, 1, "", "get_module_input_output"], [614, 2, 1, "", "qdq_weight_actor"], [614, 2, 1, "", "qdq_weight_asym"], [614, 2, 1, "", "qdq_weight_sym"], [614, 2, 1, "", "quant_tensor"], [614, 2, 1, "", "quant_weight_w_scale"], [614, 2, 1, "", "quantize_4bit"], [614, 2, 1, "", "search_clip"], [614, 2, 1, "", "set_module"]], "neural_compressor.torch.amp": [[615, 0, 0, "-", "autocast"], [617, 0, 0, "-", "fp8"]], "neural_compressor.torch.amp.autocast": [[615, 1, 1, "", "autocast"]], "neural_compressor.torch.amp.fp8": [[616, 0, 0, "-", "functions"]], "neural_compressor.torch.quantization": [[620, 0, 0, "-", "algorithm_entry"], [621, 0, 0, "-", "autotune"], [622, 0, 0, "-", "config"], [624, 0, 0, "-", "load_entry"], [625, 0, 0, "-", "quantize"]], "neural_compressor.torch.quantization.algorithm_entry": [[620, 2, 1, "", "rtn_entry"]], "neural_compressor.torch.quantization.autotune": [[621, 2, 1, "", "autotune"]], "neural_compressor.torch.quantization.config": [[622, 1, 1, "", "GPTQConfig"], [622, 1, 1, "", "RTNConfig"], [622, 2, 1, "", "get_default_gptq_config"], [622, 2, 1, "", "get_default_hqq_config"], [622, 2, 1, "", "get_default_rtn_config"]], "neural_compressor.torch.quantization.quantize": [[625, 2, 1, "", "quantize"]], "neural_compressor.torch.utils": [[626, 0, 0, "-", "auto_accelerator"], [627, 0, 0, "-", "constants"], [628, 0, 0, "-", "environ"], [630, 0, 0, "-", "utility"]], "neural_compressor.torch.utils.auto_accelerator": [[626, 1, 1, "", "Auto_Accelerator"], [626, 1, 1, "", "CPU_Accelerator"], [626, 1, 1, "", "CUDA_Accelerator"], [626, 1, 1, "", "HPU_Accelerator"], [626, 2, 1, "", "register_accelerator"]], "neural_compressor.torch.utils.utility": [[630, 2, 1, "", "fetch_module"], [630, 2, 1, "", "register_algo"], [630, 2, 1, "", "set_module"]], "neural_compressor.training": [[631, 1, 1, "", "CallBacks"], [631, 1, 1, "", "CompressionManager"], [631, 2, 1, "", "fit"], [631, 2, 1, "", "prepare_compression"]], "neural_compressor.utils": [[632, 0, 0, "-", "collect_layer_histogram"], [633, 0, 0, "-", "constant"], [634, 0, 0, "-", "create_obj_from_config"], [636, 0, 0, "-", "kl_divergence"], [637, 0, 0, "-", "load_huggingface"], [638, 0, 0, "-", "logger"], [639, 0, 0, "-", "neural_insights_utils"], [640, 0, 0, "-", "options"], [641, 0, 0, "-", "pytorch"], [642, 0, 0, "-", "utility"], [643, 0, 0, "-", "weights_details"]], "neural_compressor.utils.collect_layer_histogram": [[632, 1, 1, "", "LayerHistogramCollector"]], "neural_compressor.utils.create_obj_from_config": [[634, 2, 1, "", "create_dataloader"], [634, 2, 1, "", "create_dataset"], [634, 2, 1, "", "create_eval_func"], [634, 2, 1, "", "create_train_func"], [634, 2, 1, "", "get_algorithm"], [634, 2, 1, "", "get_func_from_config"], [634, 2, 1, "", "get_metrics"], [634, 2, 1, "", "get_postprocess"], [634, 2, 1, "", "get_preprocess"]], "neural_compressor.utils.kl_divergence": [[636, 1, 1, "", "KL_Divergence"]], "neural_compressor.utils.load_huggingface": [[637, 1, 1, "", "OptimizedModel"], [637, 2, 1, "", "export_compressed_model"], [637, 2, 1, "", "save_for_huggingface_upstream"]], "neural_compressor.utils.logger": [[638, 1, 1, "", "Logger"], [638, 2, 1, "", "debug"], [638, 2, 1, "", "error"], [638, 2, 1, "", "fatal"], [638, 2, 1, "", "info"], [638, 2, 1, "", "log"], [638, 2, 1, "", "warn"], [638, 2, 1, "", "warning"]], "neural_compressor.utils.neural_insights_utils": [[639, 2, 1, "", "get_model_path"], [639, 2, 1, "", "register_neural_insights_workload"], [639, 2, 1, "", "update_neural_insights_workload"], [639, 2, 1, "", "update_neural_insights_workload_accuracy_data"]], "neural_compressor.utils.options": [[640, 1, 1, "", "onnxrt"]], "neural_compressor.utils.pytorch": [[641, 2, 1, "", "is_int8_model"], [641, 2, 1, "", "load"], [641, 2, 1, "", "load_weight_only"], [641, 2, 1, "", "recover_model_from_json"]], "neural_compressor.utils.utility": [[642, 1, 1, "", "CaptureOutputToFile"], [642, 1, 1, "", "CpuInfo"], [642, 2, 1, "", "Dequantize"], [642, 1, 1, "", "DotDict"], [642, 1, 1, "", "GLOBAL_STATE"], [642, 1, 1, "", "LazyImport"], [642, 1, 1, "", "MODE"], [642, 1, 1, "", "OpEntry"], [642, 1, 1, "", "Statistics"], [642, 2, 1, "", "alias_param"], [642, 2, 1, "", "calculate_mse"], [642, 2, 1, "", "check_key_exist"], [642, 2, 1, "", "combine_histogram"], [642, 2, 1, "", "compare_objects"], [642, 2, 1, "", "compute_sparsity"], [642, 2, 1, "", "dequantize_weight"], [642, 2, 1, "", "dump_class_attrs"], [642, 2, 1, "", "dump_data_to_local"], [642, 2, 1, "", "dump_elapsed_time"], [642, 2, 1, "", "dump_table"], [642, 2, 1, "", "dump_table_to_csv"], [642, 2, 1, "", "equal_dicts"], [642, 2, 1, "", "fault_tolerant_file"], [642, 2, 1, "", "get_all_fp32_data"], [642, 2, 1, "", "get_number_of_sockets"], [642, 2, 1, "", "get_op_list"], [642, 2, 1, "", "get_size"], [642, 2, 1, "", "get_tensor_histogram"], [642, 2, 1, "", "get_tensors_info"], [642, 2, 1, "", "get_tuning_history"], [642, 2, 1, "", "get_weights_details"], [642, 2, 1, "", "load_data_from_pkl"], [642, 2, 1, "", "mse_metric_gap"], [642, 2, 1, "", "print_op_list"], [642, 2, 1, "", "print_table"], [642, 2, 1, "", "recover"], [642, 2, 1, "", "set_random_seed"], [642, 2, 1, "", "set_resume_from"], [642, 2, 1, "", "set_tensorboard"], [642, 2, 1, "", "set_workspace"], [642, 2, 1, "", "show_memory_info"], [642, 2, 1, "", "singleton"], [642, 2, 1, "", "str2array"], [642, 2, 1, "", "time_limit"], [642, 2, 1, "", "version1_eq_version2"], [642, 2, 1, "", "version1_gt_version2"], [642, 2, 1, "", "version1_gte_version2"], [642, 2, 1, "", "version1_lt_version2"], [642, 2, 1, "", "version1_lte_version2"]], "neural_compressor.utils.weights_details": [[643, 1, 1, "", "WeightsDetails"], [643, 1, 1, "", "WeightsStatistics"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:function", "3": "py:exception", "4": "py:attribute", "5": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "function", "Python function"], "3": ["py", "exception", "Python exception"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "data", "Python data"]}, "titleterms": {"block_mask": [0, 217], "neural_compressor": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644], "adaptor": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 652, 653, 655], "modul": [1, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 113, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 150, 151, 154, 155, 156, 157, 158, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 187, 190, 191, 192, 193, 194, 196, 197, 200, 201, 203, 204, 206, 208, 209, 210, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 236, 237, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 264, 265, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 283, 284, 285, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 307, 309, 310, 311, 313, 314, 315, 316, 318, 319, 321, 322, 323, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 337, 338, 339, 340, 343, 344, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 366, 367, 368, 369, 371, 372, 374, 375, 376, 378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 389, 391, 393, 394, 396, 397, 399, 400, 402, 403, 404, 405, 409, 410, 412, 414, 416, 417, 418, 419, 421, 422, 424, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 448, 449, 450, 451, 452, 455, 456, 458, 460, 461, 471, 473, 474, 475, 477, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 526, 527, 528, 529, 530, 532, 533, 534, 535, 538, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 572, 574, 575, 576, 577, 580, 587, 588, 589, 591, 592, 593, 596, 597, 598, 599, 600, 601, 602, 603, 606, 607, 609, 611, 612, 613, 614, 615, 620, 621, 622, 625, 626, 630, 631, 632, 634, 636, 637, 638, 639, 640, 641, 642, 643], "content": [1, 2, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 113, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 150, 151, 154, 155, 156, 157, 158, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 190, 191, 192, 193, 194, 196, 197, 200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 236, 237, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 366, 367, 368, 369, 371, 372, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 408, 409, 410, 412, 414, 416, 417, 418, 419, 421, 422, 424, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 448, 449, 450, 451, 452, 455, 456, 458, 460, 461, 471, 473, 474, 475, 477, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 526, 527, 528, 529, 530, 532, 533, 534, 535, 538, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 572, 574, 575, 576, 577, 587, 588, 589, 591, 592, 593, 596, 597, 598, 599, 600, 601, 602, 603, 606, 607, 609, 611, 612, 613, 614, 615, 620, 621, 622, 625, 626, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 651, 720], "class": [1, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 113, 115, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 150, 154, 155, 156, 157, 158, 162, 166, 167, 169, 175, 178, 179, 180, 181, 182, 184, 185, 186, 187, 190, 193, 194, 196, 200, 201, 203, 208, 209, 210, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 232, 233, 234, 236, 237, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 283, 284, 285, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 316, 317, 318, 321, 324, 325, 326, 327, 328, 329, 331, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 366, 367, 368, 369, 371, 374, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 393, 394, 395, 401, 404, 405, 406, 408, 409, 412, 414, 416, 417, 418, 419, 421, 422, 424, 426, 428, 429, 431, 434, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 448, 449, 450, 451, 452, 455, 456, 458, 460, 461, 471, 475, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 526, 527, 528, 529, 530, 532, 533, 534, 535, 538, 540, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 572, 574, 575, 576, 577, 593, 597, 600, 601, 602, 603, 606, 611, 613, 614, 615, 622, 626, 631, 632, 635, 636, 637, 638, 640, 642, 643, 652, 720], "function": [1, 13, 16, 34, 42, 43, 44, 45, 67, 68, 70, 104, 105, 116, 118, 148, 150, 151, 154, 156, 157, 158, 163, 164, 165, 168, 170, 176, 177, 178, 180, 183, 184, 185, 186, 191, 192, 194, 196, 197, 200, 201, 203, 204, 205, 206, 208, 210, 211, 215, 218, 224, 225, 226, 227, 228, 230, 231, 234, 243, 244, 252, 254, 258, 261, 262, 263, 266, 268, 269, 270, 271, 273, 275, 276, 278, 287, 295, 297, 301, 304, 305, 306, 308, 309, 310, 313, 314, 315, 318, 319, 321, 322, 323, 324, 325, 332, 339, 343, 348, 349, 350, 352, 357, 363, 367, 369, 371, 372, 374, 375, 376, 377, 378, 379, 383, 387, 389, 390, 391, 392, 396, 397, 399, 400, 401, 402, 403, 405, 406, 410, 427, 432, 433, 437, 445, 449, 451, 452, 471, 473, 474, 475, 477, 497, 498, 500, 541, 543, 570, 575, 577, 587, 589, 591, 592, 593, 596, 597, 598, 599, 600, 607, 609, 612, 613, 614, 616, 620, 621, 622, 625, 626, 630, 631, 634, 635, 637, 638, 639, 641, 642, 678], "subpackag": [2, 17, 87, 111, 112, 114, 159, 202, 205, 238, 263, 281, 306, 317, 341, 359, 370, 441, 517, 536, 537, 539, 585], "submodul": [2, 12, 17, 29, 52, 76, 87, 95, 101, 106, 111, 112, 114, 117, 130, 145, 152, 159, 160, 180, 189, 195, 198, 202, 205, 207, 211, 218, 229, 235, 239, 246, 258, 262, 266, 273, 282, 289, 301, 305, 308, 312, 317, 324, 330, 336, 342, 346, 359, 365, 370, 377, 381, 395, 408, 413, 415, 420, 423, 425, 430, 441, 447, 453, 457, 459, 482, 506, 517, 525, 531, 536, 537, 539, 542, 555, 567, 573, 586, 604, 610, 635], "packag": [2, 29, 180, 186, 205, 211, 218, 246, 258, 262, 263, 266, 273, 289, 301, 305, 306, 308, 317, 324, 336, 341, 342, 359, 377, 381, 390, 392, 395, 401, 406, 408, 441, 635, 703, 705, 707, 708], "kera": [3, 460, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472], "keras_util": [4, 5, 6, 7, 8, 9, 10], "conv2d": [4, 464], "dens": [5, 465], "depthwise_conv2d": [6, 466], "pool2d": [8, 468], "quantiz": [9, 41, 162, 353, 402, 403, 404, 405, 406, 407, 433, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 608, 620, 621, 622, 623, 624, 625, 648, 651, 653, 654, 666, 670, 675, 677, 680, 683, 686, 688, 690, 691, 699, 710, 712, 713, 714, 715, 723, 724, 725, 731, 732, 733, 734, 735, 738, 744], "separable_conv2d": [10, 470], "mxnet": [11, 673, 689, 732, 740], "mxnet_util": [12, 13], "util": [13, 43, 148, 164, 170, 176, 188, 189, 190, 191, 192, 197, 228, 231, 364, 365, 366, 367, 368, 369, 400, 408, 409, 410, 427, 432, 446, 447, 448, 449, 450, 451, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 589, 593, 597, 609, 614, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 657], "onnxrt": [14, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 673, 689, 740], "ox_util": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44], "calibr": [15, 16, 172, 393, 404, 455, 653, 670], "oper": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 653, 654], "activ": [18, 713], "argmax": 19, "attent": 20, "binary_op": 21, "concat": 22, "conv": 23, "direct_q8": 24, "embed_layernorm": 25, "gather": 26, "gavgpool": 27, "gemm": 28, "lstm": 30, "matmul": [31, 738], "maxpool": 32, "norm": 33, "op": [34, 680], "pad": 35, "pool": 36, "reduc": 37, "resiz": 38, "split": [39, 716], "unary_op": 40, "smooth_quant": [42, 175, 181, 590, 591, 592, 593], "weight_onli": [44, 177, 396, 397, 398, 399, 400, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614], "pytorch": [45, 641, 673, 678, 680, 689, 714, 732, 733, 734, 739, 740, 744], "queri": [46, 652, 718, 723, 724, 725], "tensorflow": [47, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 673, 678, 680, 689, 732, 734, 739, 740, 744], "tf_util": [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148], "graph_convert": [48, 478], "graph_converter_without_calib": [49, 479], "graph_rewrit": [50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534], "bf16": [50, 51, 52, 480, 481, 482, 691], "bf16_convert": [50, 156, 480], "dequantize_cast_optim": [51, 481], "gener": [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 653], "convert_add_to_biasadd": [53, 483], "convert_layout": [54, 484], "convert_leakyrelu": [55, 485], "convert_nan_to_random": [56, 486], "convert_placeholder_to_const": [57, 487], "dilated_contract": [58, 488], "dummy_biasadd": [59, 489], "expanddims_optim": [60, 490], "fetch_weight_from_reshap": [61, 491], "fold_batch_norm": [62, 492], "fold_const": [63, 493], "fuse_biasadd_add": [64, 494], "fuse_column_wise_mul": [65, 495], "fuse_conv_with_math": [66, 496], "fuse_decomposed_bn": [67, 497], "fuse_decomposed_in": [68, 498], "fuse_gelu": [69, 499], "fuse_layer_norm": [70, 500], "fuse_pad_with_conv": [71, 501], "fuse_pad_with_fp32_conv": [72, 502], "fuse_reshape_transpos": [73, 503], "graph_cse_optim": [74, 504], "grappler_pass": [75, 505], "insert_print_nod": [77, 507], "move_squeeze_after_relu": [78, 508], "pre_optim": [79, 509], "remove_training_nod": [80, 510], "rename_batch_norm": [81, 511], "split_shared_input": [82, 512], "strip_equivalent_nod": [83, 513], "strip_unused_nod": [84, 514], "switch_optim": [85, 515], "graph_bas": [86, 516], "int8": [88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 680, 744], "freeze_fake_qu": [88, 518], "freeze_valu": [89, 519], "freeze_value_without_calib": [90, 520], "fuse_conv_redundant_dequant": [91, 521], "fuse_conv_requant": [92, 522], "fuse_matmul_redundant_dequant": [93, 523], "fuse_matmul_requant": [94, 524], "meta_op_optim": [96, 526], "post_hostconst_convert": [97, 527], "post_quantized_op_cs": [98, 528], "rnn_convert": [99, 529], "scale_propag": [100, 530], "onnx": [101, 102, 103, 104, 105, 656, 686, 732, 733, 744], "onnx_graph": 102, "onnx_nod": 103, "onnx_schema": 104, "tf2onnx_util": 105, "qdq": [106, 107, 108, 109, 123, 124, 125, 126, 127, 128, 129, 130, 131, 531, 532, 533, 534, 548, 549, 550, 551, 552, 553, 554, 555, 556, 744], "insert_qdq_pattern": [107, 532], "merge_duplicated_qdq": [108, 533], "share_qdq_y_pattern": [109, 534], "graph_util": [110, 535], "quantize_graph": [112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563], "qat": [113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 744], "fake_quant": [113, 538], "quantize_config": [115, 540], "quantize_help": [116, 541], "quantize_lay": [117, 118, 119, 120, 121, 542, 543, 544, 545, 546], "optimize_lay": [118, 543], "quantize_layer_add": [119, 544], "quantize_layer_bas": [120, 545], "quantize_layer_bn": [121, 546], "quantize_wrapp": [122, 547], "fuse_qdq_bn": [123, 548], "fuse_qdq_concatv2": [124, 549], "fuse_qdq_conv": [125, 550], "fuse_qdq_deconv": [126, 551], "fuse_qdq_in": [127, 552], "fuse_qdq_matmul": [128, 553], "fuse_qdq_pool": [129, 554], "optimize_qdq": [131, 556], "quantize_graph_bas": [132, 557], "quantize_graph_bn": [133, 558], "quantize_graph_concatv2": [134, 559], "quantize_graph_conv": [135, 560], "quantize_graph_for_intel_cpu": [136, 561], "quantize_graph_matmul": [137, 562], "quantize_graph_pool": [138, 563], "quantize_graph_common": [139, 564], "smooth_quant_calibr": 140, "smooth_quant_scal": 141, "tf2onnx_convert": 142, "transform_graph": [143, 144, 145, 146, 147, 565, 566, 567, 568, 569], "bias_correct": [143, 565], "graph_transform_bas": [144, 566], "insert_log": [146, 568], "rerange_quantized_concat": [147, 569], "torch_util": [149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 278], "auto_round": 149, "autoround": [150, 151, 152, 153, 154, 598], "export": [151, 312, 313, 314, 315, 680, 735], "model_wrapp": [153, 166, 575], "sign_sgd": 154, "awq": [155, 396, 599], "gptq": [157, 397, 600], "hawq_metr": 158, "layer_wise_qu": [160, 161, 162, 163, 164], "modified_pickl": [161, 588], "torch_load": 163, "mixed_precis": [165, 326], "pattern_detector": 167, "symbolic_trac": 168, "teq": [169, 613], "waq": [171, 172, 173, 174, 175, 176], "auto_alpha": 171, "graph_trac": 173, "algorithm": [178, 179, 180, 181, 182, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 454, 455, 456, 457, 458, 459, 460, 461, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 670, 735, 738, 741], "fast_bias_correct": 179, "weight_correct": 182, "benchmark": [183, 270, 660, 669, 675, 690, 731], "common": [184, 185, 186, 187, 188, 189, 190, 191, 192, 271, 272, 273, 274, 275, 276, 277, 278, 648, 681], "base_config": 184, "attribut": [184, 185, 186, 190, 246, 254, 263, 297, 306, 317, 341, 381, 405, 408, 410, 452, 602, 614, 635, 646], "base_tun": 185, "tuning_param": 187, "constant": [188, 364, 446, 571, 627, 633], "logger": [190, 347, 638, 671], "save_load": [191, 582, 591, 595], "compress": [193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 280, 661, 735], "callback": 193, "distil": [194, 195, 196, 197, 311, 676, 677, 690, 731, 744], "criterion": [194, 271], "optim": [196, 276, 605, 700, 710, 720, 723, 724, 725, 728, 729, 742], "hpo": [198, 199, 200, 201], "sa_optim": 199, "search_algorithm": [200, 333], "search_spac": 201, "pruner": [203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 339, 350], "criteria": [203, 647, 729, 741], "dsnot": 204, "model_slim": [206, 207, 208, 209], "auto_slim": 206, "pattern_analyz": 208, "weight_slim": 209, "pattern": [210, 211, 212, 213, 214, 342, 343, 344, 348, 729], "base": [210, 215, 686, 719, 742], "mha": [212, 219], "ninm": 213, "nxm": 214, "basic": [216, 356, 436, 649, 741], "pattern_lock": [220, 338], "progress": [221, 716], "retrain_fre": 222, "sparse_gpt": 223, "prune": [224, 230, 340, 351, 690, 729, 731, 744], "reg": 225, "schedul": [226, 352, 354, 729], "tf_criteria": 227, "wanda": [229, 230, 231, 232], "wrapper": 232, "conf": [233, 234, 235, 236], "config": [233, 237, 405, 471, 475, 602, 622, 662, 673, 727], "dotdict": 234, "pythonic_config": 236, "contrib": [238, 239, 240, 241, 281, 282, 283, 284], "strategi": [239, 240, 241, 282, 283, 284, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 667, 737, 741], "sigopt": [240, 283, 737, 741], "tpe": [241, 284, 741], "data": [242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 572, 653, 654, 675, 679, 714], "dataload": [242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 272, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 672, 673], "base_dataload": [242, 285], "default_dataload": [244, 287], "fetcher": [245, 288], "mxnet_dataload": [247, 290], "onnxrt_dataload": [248, 291], "pytorch_dataload": [249, 292], "sampler": [250, 293], "tensorflow_dataload": [251, 294], "dataset": [252, 253, 254, 255, 256, 257, 258, 259, 295, 296, 297, 298, 299, 300, 301, 302, 673, 675, 684, 715], "bert_dataset": [252, 295], "coco_dataset": [253, 296], "dummy_dataset": [255, 298], "dummy_dataset_v2": [256, 299], "imagenet_dataset": [257, 300], "style_transfer_dataset": [259, 302], "filter": [260, 261, 262, 303, 304, 305], "coco_filt": [260, 303], "transform": [264, 265, 266, 267, 268, 269, 307, 308, 309, 310, 684, 740], "coco_transform": 264, "imagenet_transform": [265, 307], "postprocess": [267, 277], "token": [268, 309], "experiment": [270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369], "metric": [274, 318, 319, 320, 321, 322, 323, 324, 325, 371, 372, 373, 374, 375, 376, 377, 378, 684, 689], "model": [275, 380, 381, 382, 383, 384, 385, 386, 387, 388, 574, 653, 664, 680, 683, 686, 688, 690, 692, 699, 713, 714, 715, 723, 724, 725, 729, 733, 735, 738, 744], "compon": 279, "qlinear2qdq": 313, "tf2onnx": 314, "torch2onnx": 315, "graph_optim": 316, "bleu": [318, 371], "bleu_util": [319, 372], "coco_label_map": [320, 373], "coco_tool": [321, 374], "evaluate_squad": [322, 375], "f1": [323, 376], "model_convers": 327, "na": [328, 329, 330, 331, 332, 333, 649, 731], "basic_na": 328, "dyna": 329, "nas_util": 332, "pruner_legaci": [334, 335, 336, 337, 338, 339], "gradient_sensit": 334, "group_lasso": 335, "magnitud": 337, "pruning_recip": [341, 342, 343, 344], "tile_pattern": 344, "pruning_v2": 345, "pytorch_prun": [346, 347, 348, 349, 350, 351, 352], "prune_util": 349, "auto_mixed_precis": [355, 435], "bayesian": [357, 437, 741], "exhaust": [358, 439, 741], "mse": [360, 442, 741], "mse_v2": [361, 443, 741], "random": [362, 444, 741], "tuning_sampl": [366, 448], "tuning_spac": [367, 449], "tuning_struct": [368, 450], "mix_precis": 379, "base_model": 380, "keras_model": 382, "mxnet_model": 384, "nets_factori": [385, 576], "onnx_model": [386, 409], "tensorflow_model": 387, "torch_model": 388, "object": [389, 665, 723, 724, 725, 727], "layer_wis": [391, 392, 586, 587, 588, 589], "core": [391, 394, 456, 603], "smoother": [393, 394, 395, 455, 456, 457, 458], "rtn": [399, 612], "algorithm_entri": [402, 473, 620], "autotun": [403, 474, 621], "profil": [411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 675], "parser": [412, 413, 414, 415, 416, 417, 418, 419, 420, 421], "factori": [412, 414, 419, 422, 424, 429], "onnx_pars": [414, 415, 416], "result": [418, 713, 715, 723, 724, 725], "tensorflow_pars": [419, 420, 421], "onnxrt_profil": [424, 425, 426, 427], "tensorflow_profil": [429, 430, 431, 432], "auto": [434, 704, 710, 734, 738, 741], "conserv": [438, 741], "hawq_v2": [440, 741], "templat": [452, 453, 647], "api_doc_exampl": 452, "scaler": 458, "static_qu": [459, 460, 461, 594, 595, 596, 597], "layer": [464, 465, 466, 467, 468, 469, 470, 676, 733, 738], "torch": [578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 657, 744], "habana_fp8": [578, 579, 580, 581, 582, 583, 584], "fp8_quant": 578, "observ": 581, "scale": 583, "tensor": [584, 712, 738], "load": 587, "hqq": [601, 602, 603, 604, 605, 606, 607, 608, 609], "bitpack": 601, "qtensor": 606, "quant_api": 607, "amp": [615, 616, 617, 618], "autocast": 615, "fp8": [616, 617], "load_entri": 624, "auto_acceler": 626, "environ": [628, 686, 696], "train": [631, 648, 668, 678, 690, 729, 732], "collect_layer_histogram": 632, "create_obj_from_config": 634, "kl_diverg": 636, "load_huggingfac": 637, "neural_insights_util": 639, "option": [640, 678, 698], "weights_detail": 643, "version": 644, "intel": [645, 651, 672, 675, 685, 686, 689, 690, 696, 704, 710, 744, 745], "neural": [645, 648, 649, 651, 672, 675, 685, 686, 689, 690, 693, 697, 699, 704, 710, 712, 713, 714, 715, 717, 718, 719, 723, 724, 725, 729, 737, 742, 745], "compressor": [645, 648, 651, 672, 675, 685, 686, 689, 690, 704, 710, 737, 745], "document": [645, 651, 658, 745], "section": [645, 745], "contributor": [646, 647], "coven": [646, 647], "code": [646, 647, 649, 671, 690, 711, 716, 735, 742], "conduct": [646, 647], "our": [646, 738], "pledg": 646, "standard": 646, "respons": [646, 719], "scope": [646, 729], "enforc": 646, "contribut": [647, 703, 707], "guidelin": 647, "creat": [647, 716], "pull": 647, "request": [647, 691, 721], "step": [647, 712, 713, 714, 715], "checklist": 647, "accept": 647, "statu": [647, 718, 719], "check": 647, "overview": [647, 720, 742], "support": [647, 648, 649, 652, 654, 669, 670, 672, 673, 675, 676, 677, 678, 680, 682, 685, 686, 689, 691, 692, 694, 695, 699, 700, 727, 728, 729, 731, 732, 733, 735, 738, 739, 740, 743], "fx": 648, "introduct": [648, 649, 652, 653, 654, 669, 670, 672, 673, 675, 676, 677, 678, 680, 682, 685, 689, 691, 692, 710, 713, 714, 715, 727, 728, 729, 731, 732, 733, 735, 737, 738, 739, 740, 741, 743], "mode": [648, 744], "matrix": [648, 649, 652, 669, 670, 672, 673, 675, 676, 677, 678, 680, 682, 685, 689, 691, 692, 695, 727, 728, 729, 731, 732, 733, 735, 738, 739, 743], "get": [648, 649, 651, 652, 669, 672, 673, 675, 676, 677, 678, 682, 683, 689, 691, 693, 704, 711, 712, 716, 717, 718, 719, 727, 728, 729, 731, 732, 739, 743], "start": [648, 649, 651, 652, 669, 672, 673, 675, 676, 677, 678, 682, 683, 689, 691, 693, 694, 698, 704, 712, 716, 717, 718, 723, 724, 725, 727, 728, 729, 731, 732, 739, 743], "post": [648, 690, 719, 732], "static": [648, 651, 732], "dynam": [648, 649, 732], "awar": [648, 690, 729, 732], "exampl": [648, 649, 652, 658, 669, 672, 673, 675, 676, 677, 678, 679, 680, 689, 690, 691, 692, 695, 699, 712, 713, 714, 715, 717, 722, 723, 724, 725, 727, 728, 729, 732, 733, 735, 738, 739, 744], "note": [648, 736], "detail": 648, "problem": 648, "architectur": [649, 674, 685, 686], "search": [649, 710], "api": [649, 652, 653, 658, 659, 669, 672, 673, 676, 677, 678, 683, 684, 689, 691, 693, 697, 711, 712, 719, 725, 727, 728, 729, 731, 742], "usag": [649, 699, 710, 719, 738, 739, 741], "1": [649, 678, 681, 684, 690, 710, 717, 718, 744], "python": [649, 672, 683, 689, 693, 697, 698, 705, 708, 712, 731, 742], "yaml": [649, 653, 673, 678, 682, 743], "2": [649, 678, 681, 684, 690, 710, 717, 718, 744], "onli": [649, 651, 735], "advanc": [649, 716, 742], "custom": [649, 672, 689, 723, 741], "secur": [650, 678], "polici": [650, 741], "report": 650, "vulner": 650, "instal": [651, 675, 686, 694, 696, 703, 704, 707, 712, 717, 718], "from": [651, 653, 686, 690, 712, 717, 718], "pypi": [651, 699, 712], "weight": [651, 713, 714, 715, 735], "llm": [651, 688], "non": 651, "select": [651, 704], "public": [651, 671, 730], "event": [651, 730], "addit": 651, "commun": 651, "work": [652, 717, 732], "flow": [652, 732], "background": [652, 671, 710], "ad": 652, "new": [652, 654, 705, 708, 741], "backend": [652, 732], "capabl": [652, 735], "implement": [652, 653], "onnxrtadaptor": 652, "how": [653, 654, 675, 713, 714, 715, 717], "add": [653, 718], "an": [653, 723, 724, 725], "list": [653, 679, 722, 740], "need": 653, "design": [653, 674, 720, 741], "framework": [653, 672, 673, 680, 682, 692, 731, 733, 735, 738], "query_fw_cap": 653, "accord": [653, 654], "tune_cfg": 653, "prepar": [653, 675, 713, 714, 715, 737], "fp32": [653, 680], "graph": 653, "run": [653, 675, 711, 713, 714, 715, 716], "sampl": [653, 683], "iter": 653, "calcul": 653, "rang": 653, "type": [654, 671, 729], "like": 654, "int4": 654, "few": 654, "line": 654, "chang": [654, 684, 709, 711, 736], "defin": [654, 678], "abil": 654, "specif": [654, 673], "invok": 654, "kernel": 654, "tune": [654, 732, 735, 738, 741], "configur": [654, 678, 682, 716, 731, 737, 743], "us": [654, 672, 689, 717, 718, 738], "summari": [654, 713], "runtim": [656, 686, 732, 733, 744], "mix": [663, 690, 691, 734], "precis": [663, 690, 691, 734], "refer": [670, 671, 729, 732, 735, 738], "inc": 671, "convent": 671, "rule": [671, 732], "import": 671, "string": 671, "annot": 671, "comment": 671, "todo": 671, "intern": 671, "interfac": 671, "folder": [671, 711], "structur": 671, "recommend": 671, "v": [671, 711], "set": [671, 675, 696, 710], "json": 671, "build": [672, 681, 689, 716, 717, 718], "file": [673, 682, 743], "user": [673, 678, 684, 731, 735, 742, 743], "workflow": [674, 720], "diagnosi": [675, 712], "featur": [675, 678, 682, 685, 699, 700, 704, 731, 732, 739, 743], "modifi": 675, "script": [675, 716], "see": 675, "do": [675, 693], "paramet": [675, 719], "descript": [675, 719, 721], "suggest": 675, "fallback": 675, "knowledg": [676, 744], "intermedi": 676, "self": 676, "distribut": [678, 699, 741], "infer": 678, "evalu": 678, "pure": 678, "horovodrun": 678, "execut": 678, "releas": [679, 705, 708, 736], "appendix": 680, "frequent": 681, "ask": 681, "question": 681, "issu": [681, 736], "3": [681, 694, 710], "4": [681, 701, 710, 730], "quick": [683, 698], "valid": [683, 686, 738, 744], "incompat": [684, 736], "between": 684, "v1": 684, "face": [684, 724, 725], "built": [684, 686, 689], "infrastructur": 685, "prerequisit": [686, 717, 718], "binari": 686, "sourc": [686, 712, 714, 715, 717, 718], "ai": 686, "kit": 686, "system": 686, "requir": [686, 703, 707, 713, 714, 715, 723], "hardwar": [686, 691, 744], "cpu": [686, 696, 744], "64": 686, "compat": 686, "processor": 686, "gpu": 686, "": [686, 711, 717], "xe": 686, "multipl": [686, 727, 744], "vendor": 686, "through": [686, 738, 744], "softwar": [686, 691], "legal": 687, "inform": 687, "licens": 687, "citat": 687, "trademark": 687, "recip": [688, 732], "ipex": [688, 732], "kei": 688, "migrat": 690, "x": 690, "orchestr": [690, 728], "fp16": 691, "dure": [691, 734], "accuraci": [691, 713, 715, 732, 741], "driven": 691, "coder": [693, 697, 699, 710, 742], "what": [693, 711, 717], "we": 693, "offer": 693, "jupyt": [693, 694, 705, 708], "lab": [693, 694], "extens": [693, 703, 704, 707, 710, 711, 720, 744], "launcher": [693, 698], "contact": [693, 717], "aw": 694, "amazon": 694, "sagemak": 694, "For": 694, "studio": 694, "notebook": 694, "instanc": 694, "guid": [694, 742], "bigdl": 695, "nano": 695, "platform": [696, 737], "best": [696, 704], "perform": [696, 737], "mkl": 696, "openmp": 696, "jemalloc": 696, "numa": 696, "control": 696, "variabl": 696, "frequenc": 696, "govern": 696, "enabl": [697, 704, 710], "bench": 697, "superbench": 697, "argument": 698, "v0": 701, "highlight": 701, "other": 701, "changelog": [702, 706], "neural_compressor_ext_lab": [703, 705], "uninstal": [703, 707], "develop": [703, 707], "jupyterlab": 704, "Or": 704, "let": 704, "u": 704, "help": 704, "you": 704, "pre": 704, "requisit": 704, "make": [705, 708, 711, 716], "manual": [705, 708], "npm": [705, 708, 716], "autom": [705, 708], "publish": [705, 708], "conda": [705, 708], "forg": [705, 708], "neural_compressor_ext_lab_alibaba": [707, 708], "log": [709, 718, 719], "unreleas": 709, "vscode": 710, "open": [710, 715], "icon": 710, "5": 710, "welcom": 711, "your": 711, "setup": 711, "up": 711, "straight": 711, "awai": 711, "explor": 711, "test": [711, 716], "go": 711, "further": 711, "insight": [712, 713, 714, 715], "dump": [712, 714], "research": 712, "collabor": 712, "debug": [713, 715], "analyz": [713, 715, 716], "histogram": 715, "react": 716, "app": 716, "avail": 716, "eject": 716, "learn": [716, 717], "more": [716, 717], "bundl": 716, "size": 716, "web": 716, "deploy": [716, 729], "fail": 716, "minifi": 716, "solut": [717, 718, 719, 723, 724, 725], "why": 717, "doe": 717, "method": [717, 718], "pip": [717, 718], "end": [717, 723, 724, 725], "servic": [718, 720, 723, 724, 725], "submit": [718, 719, 723, 724, 725], "task": [718, 719, 721, 723, 724, 725], "stop": [718, 723, 724, 725], "inspect": 718, "manag": [718, 723, 724], "resourc": [718, 723, 724], "node": 718, "state": 718, "cluster": [718, 719], "remov": 718, "url": 719, "endpoint": 719, "task_id": 719, "websocket": 719, "screen": 719, "ping": 719, "download": [719, 723, 724], "doc": 720, "wip": 720, "oaa": 720, "definit": 720, "diagram": 720, "hug": [724, 725], "grpc": 725, "client": 726, "singl": 727, "One": 728, "shot": 728, "network": 729, "sparsiti": 729, "decai": 729, "regular": 729, "larg": 729, "languag": 729, "retrain": 729, "free": 729, "spars": 729, "hyperparamet": 729, "full": 730, "79": 730, "2023": 730, "25": 730, "2022": 730, "35": 730, "2021": 730, "15": [730, 744], "2018": 730, "2020": 730, "style": 731, "access": 731, "fundament": [732, 738], "scheme": 732, "approach": 732, "With": 732, "without": 732, "specifi": 732, "devic": 732, "wise": 733, "lwq": 733, "turn": 734, "off": 734, "woq": [735, 744], "known": 736, "benefit": 737, "comparison": 737, "differ": 737, "smooth": 738, "quant": 738, "per": 738, "channel": 738, "limit": 738, "smoothquant": 738, "enhanc": 738, "alpha": 738, "engin": 738, "fix": 738, "determin": 738, "entir": 738, "each": 738, "block": 738, "tensorboard": 739, "space": 741, "exit": 741, "process": 741, "zero": 742, "topic": 742, "innov": 742, "product": 742, "13": 744, "0": 744, "ptq": 744}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"block_mask": [[0, "module-block_mask"]], "neural_compressor.adaptor.adaptor": [[1, "module-neural_compressor.adaptor.adaptor"]], "Module Contents": [[1, "module-contents"], [3, "module-contents"], [11, "module-contents"], [13, "module-contents"], [14, "module-contents"], [15, "module-contents"], [16, "module-contents"], [18, "module-contents"], [19, "module-contents"], [20, "module-contents"], [21, "module-contents"], [22, "module-contents"], [23, "module-contents"], [24, "module-contents"], [25, "module-contents"], [26, "module-contents"], [27, "module-contents"], [28, "module-contents"], [30, "module-contents"], [31, "module-contents"], [32, "module-contents"], [33, "module-contents"], [34, "module-contents"], [35, "module-contents"], [36, "module-contents"], [37, "module-contents"], [38, "module-contents"], [39, "module-contents"], [40, "module-contents"], [41, "module-contents"], [42, "module-contents"], [43, "module-contents"], [44, "module-contents"], [45, "module-contents"], [46, "module-contents"], [47, "module-contents"], [48, "module-contents"], [49, "module-contents"], [50, "module-contents"], [51, "module-contents"], [53, "module-contents"], [54, "module-contents"], [55, "module-contents"], [56, "module-contents"], [57, "module-contents"], [58, "module-contents"], [59, "module-contents"], [60, "module-contents"], [61, "module-contents"], [62, "module-contents"], [63, "module-contents"], [64, "module-contents"], [65, "module-contents"], [66, "module-contents"], [67, "module-contents"], [68, "module-contents"], [69, "module-contents"], [70, "module-contents"], [71, "module-contents"], [72, "module-contents"], [73, "module-contents"], [74, "module-contents"], [75, "module-contents"], [77, "module-contents"], [78, "module-contents"], [79, "module-contents"], [80, "module-contents"], [81, "module-contents"], [82, "module-contents"], [83, "module-contents"], [84, "module-contents"], [85, "module-contents"], [86, "module-contents"], [88, "module-contents"], [89, "module-contents"], [90, "module-contents"], [91, "module-contents"], [92, "module-contents"], [93, "module-contents"], [94, "module-contents"], [96, "module-contents"], [97, "module-contents"], [98, "module-contents"], [99, "module-contents"], [100, "module-contents"], [102, "module-contents"], [103, "module-contents"], [104, "module-contents"], [105, "module-contents"], [107, "module-contents"], [108, "module-contents"], [109, "module-contents"], [110, "module-contents"], [113, "module-contents"], [115, "module-contents"], [116, "module-contents"], [118, "module-contents"], [119, "module-contents"], [120, "module-contents"], [121, "module-contents"], [122, "module-contents"], [123, "module-contents"], [124, "module-contents"], [125, "module-contents"], [126, "module-contents"], [127, "module-contents"], [128, "module-contents"], [129, "module-contents"], [131, "module-contents"], [132, "module-contents"], [133, "module-contents"], [134, "module-contents"], [135, "module-contents"], [136, "module-contents"], [137, "module-contents"], [138, "module-contents"], [139, "module-contents"], [140, "module-contents"], [141, "module-contents"], [142, "module-contents"], [143, "module-contents"], [144, "module-contents"], [146, "module-contents"], [147, "module-contents"], [148, "module-contents"], [150, "module-contents"], [151, "module-contents"], [154, "module-contents"], [155, "module-contents"], [156, "module-contents"], [157, "module-contents"], [158, "module-contents"], [161, "module-contents"], [162, "module-contents"], [163, "module-contents"], [164, "module-contents"], [165, "module-contents"], [166, "module-contents"], [167, "module-contents"], [168, "module-contents"], [169, "module-contents"], [170, "module-contents"], [175, "module-contents"], [176, "module-contents"], [177, "module-contents"], [178, "module-contents"], [179, "module-contents"], [181, "module-contents"], [182, "module-contents"], [183, "module-contents"], [184, "module-contents"], [185, "module-contents"], [187, "module-contents"], [190, "module-contents"], [191, "module-contents"], [192, "module-contents"], [193, "module-contents"], [194, "module-contents"], [196, "module-contents"], [197, "module-contents"], [200, "module-contents"], [201, "module-contents"], [203, "module-contents"], [204, "module-contents"], [206, "module-contents"], [208, "module-contents"], [209, "module-contents"], [210, "module-contents"], [212, "module-contents"], [213, "module-contents"], [214, "module-contents"], [215, "module-contents"], [216, "module-contents"], [217, "module-contents"], [219, "module-contents"], [220, "module-contents"], [221, "module-contents"], [222, "module-contents"], [223, "module-contents"], [224, "module-contents"], [225, "module-contents"], [226, "module-contents"], [227, "module-contents"], [228, "module-contents"], [230, "module-contents"], [231, "module-contents"], [232, "module-contents"], [233, "module-contents"], [234, "module-contents"], [236, "module-contents"], [237, "module-contents"], [240, "module-contents"], [241, "module-contents"], [242, "module-contents"], [243, "module-contents"], [244, "module-contents"], [245, "module-contents"], [247, "module-contents"], [248, "module-contents"], [249, "module-contents"], [250, "module-contents"], [251, "module-contents"], [252, "module-contents"], [253, "module-contents"], [254, "module-contents"], [255, "module-contents"], [256, "module-contents"], [257, "module-contents"], [259, "module-contents"], [260, "module-contents"], [261, "module-contents"], [264, "module-contents"], [265, "module-contents"], [267, "module-contents"], [268, "module-contents"], [269, "module-contents"], [270, "module-contents"], [271, "module-contents"], [272, "module-contents"], [274, "module-contents"], [275, "module-contents"], [276, "module-contents"], [277, "module-contents"], [278, "module-contents"], [279, "module-contents"], [283, "module-contents"], [284, "module-contents"], [285, "module-contents"], [287, "module-contents"], [288, "module-contents"], [290, "module-contents"], [291, "module-contents"], [292, "module-contents"], [293, "module-contents"], [294, "module-contents"], [295, "module-contents"], [296, "module-contents"], [297, "module-contents"], [298, "module-contents"], [299, "module-contents"], [300, "module-contents"], [302, "module-contents"], [303, "module-contents"], [304, "module-contents"], [307, "module-contents"], [309, "module-contents"], [310, "module-contents"], [311, "module-contents"], [313, "module-contents"], [314, "module-contents"], [315, "module-contents"], [316, "module-contents"], [318, "module-contents"], [319, "module-contents"], [321, "module-contents"], [322, "module-contents"], [323, "module-contents"], [325, "module-contents"], [326, "module-contents"], [327, "module-contents"], [328, "module-contents"], [329, "module-contents"], [331, "module-contents"], [332, "module-contents"], [333, "module-contents"], [334, "module-contents"], [335, "module-contents"], [337, "module-contents"], [338, "module-contents"], [339, "module-contents"], [340, "module-contents"], [343, "module-contents"], [344, "module-contents"], [345, "module-contents"], [348, "module-contents"], [349, "module-contents"], [350, "module-contents"], [351, "module-contents"], [352, "module-contents"], [353, "module-contents"], [354, "module-contents"], [355, "module-contents"], [356, "module-contents"], [357, "module-contents"], [358, "module-contents"], [360, "module-contents"], [361, "module-contents"], [362, "module-contents"], [363, "module-contents"], [366, "module-contents"], [367, "module-contents"], [368, "module-contents"], [369, "module-contents"], [371, "module-contents"], [372, "module-contents"], [374, "module-contents"], [375, "module-contents"], [376, "module-contents"], [378, "module-contents"], [379, "module-contents"], [380, "module-contents"], [382, "module-contents"], [383, "module-contents"], [384, "module-contents"], [385, "module-contents"], [386, "module-contents"], [387, "module-contents"], [388, "module-contents"], [389, "module-contents"], [391, "module-contents"], [393, "module-contents"], [394, "module-contents"], [396, "module-contents"], [397, "module-contents"], [399, "module-contents"], [400, "module-contents"], [402, "module-contents"], [403, "module-contents"], [404, "module-contents"], [405, "module-contents"], [409, "module-contents"], [410, "module-contents"], [412, "module-contents"], [414, "module-contents"], [416, "module-contents"], [417, "module-contents"], [418, "module-contents"], [419, "module-contents"], [421, "module-contents"], [422, "module-contents"], [424, "module-contents"], [426, "module-contents"], [427, "module-contents"], [428, "module-contents"], [429, "module-contents"], [431, "module-contents"], [432, "module-contents"], [433, "module-contents"], [434, "module-contents"], [435, "module-contents"], [436, "module-contents"], [437, "module-contents"], [438, "module-contents"], [439, "module-contents"], [440, "module-contents"], [442, "module-contents"], [443, "module-contents"], [444, "module-contents"], [445, "module-contents"], [448, "module-contents"], [449, "module-contents"], [450, "module-contents"], [451, "module-contents"], [452, "module-contents"], [455, "module-contents"], [456, "module-contents"], [458, "module-contents"], [460, "module-contents"], [461, "module-contents"], [471, "module-contents"], [473, "module-contents"], [474, "module-contents"], [475, "module-contents"], [477, "module-contents"], [478, "module-contents"], [479, "module-contents"], [480, "module-contents"], [481, "module-contents"], [483, "module-contents"], [484, "module-contents"], [485, "module-contents"], [486, "module-contents"], [487, "module-contents"], [488, "module-contents"], [489, "module-contents"], [490, "module-contents"], [491, "module-contents"], [492, "module-contents"], [493, "module-contents"], [494, "module-contents"], [495, "module-contents"], [496, "module-contents"], [497, "module-contents"], [498, "module-contents"], [499, "module-contents"], [500, "module-contents"], [501, "module-contents"], [502, "module-contents"], [503, "module-contents"], [504, "module-contents"], [505, "module-contents"], [507, "module-contents"], [508, "module-contents"], [509, "module-contents"], [510, "module-contents"], [511, "module-contents"], [512, "module-contents"], [513, "module-contents"], [514, "module-contents"], [515, "module-contents"], [516, "module-contents"], [518, "module-contents"], [519, "module-contents"], [520, "module-contents"], [521, "module-contents"], [522, "module-contents"], [523, "module-contents"], [524, "module-contents"], [526, "module-contents"], [527, "module-contents"], [528, "module-contents"], [529, "module-contents"], [530, "module-contents"], [532, "module-contents"], [533, "module-contents"], [534, "module-contents"], [535, "module-contents"], [538, "module-contents"], [540, "module-contents"], [541, "module-contents"], [543, "module-contents"], [544, "module-contents"], [545, "module-contents"], [546, "module-contents"], [547, "module-contents"], [548, "module-contents"], [549, "module-contents"], [550, "module-contents"], [551, "module-contents"], [552, "module-contents"], [553, "module-contents"], [554, "module-contents"], [556, "module-contents"], [557, "module-contents"], [558, "module-contents"], [559, "module-contents"], [560, "module-contents"], [561, "module-contents"], [562, "module-contents"], [563, "module-contents"], [564, "module-contents"], [565, "module-contents"], [566, "module-contents"], [568, "module-contents"], [569, "module-contents"], [570, "module-contents"], [572, "module-contents"], [574, "module-contents"], [575, "module-contents"], [576, "module-contents"], [577, "module-contents"], [587, "module-contents"], [588, "module-contents"], [589, "module-contents"], [591, "module-contents"], [592, "module-contents"], [593, "module-contents"], [596, "module-contents"], [597, "module-contents"], [598, "module-contents"], [599, "module-contents"], [600, "module-contents"], [601, "module-contents"], [602, "module-contents"], [603, "module-contents"], [606, "module-contents"], [607, "module-contents"], [609, "module-contents"], [611, "module-contents"], [612, "module-contents"], [613, "module-contents"], [614, "module-contents"], [615, "module-contents"], [620, "module-contents"], [621, "module-contents"], [622, "module-contents"], [625, "module-contents"], [626, "module-contents"], [630, "module-contents"], [631, "module-contents"], [632, "module-contents"], [634, "module-contents"], [636, "module-contents"], [637, "module-contents"], [638, "module-contents"], [639, "module-contents"], [640, "module-contents"], [641, "module-contents"], [642, "module-contents"], [643, "module-contents"]], "Classes": [[1, "classes"], [3, "classes"], [11, "classes"], [13, "classes"], [14, "classes"], [15, "classes"], [16, "classes"], [18, "classes"], [19, "classes"], [20, "classes"], [21, "classes"], [22, "classes"], [23, "classes"], [24, "classes"], [25, "classes"], [26, "classes"], [27, "classes"], [28, "classes"], [30, "classes"], [31, "classes"], [32, "classes"], [33, "classes"], [34, "classes"], [35, "classes"], [36, "classes"], [37, "classes"], [38, "classes"], [39, "classes"], [40, "classes"], [41, "classes"], [42, "classes"], [43, "classes"], [45, "classes"], [46, "classes"], [47, "classes"], [48, "classes"], [49, "classes"], [50, "classes"], [51, "classes"], [53, "classes"], [54, "classes"], [55, "classes"], [56, "classes"], [57, "classes"], [58, "classes"], [59, "classes"], [60, "classes"], [61, "classes"], [62, "classes"], [63, "classes"], [64, "classes"], [65, "classes"], [66, "classes"], [67, "classes"], [68, "classes"], [69, "classes"], [70, "classes"], [71, "classes"], [72, "classes"], [73, "classes"], [74, "classes"], [75, "classes"], [77, "classes"], [78, "classes"], [79, "classes"], [80, "classes"], [81, "classes"], [82, "classes"], [83, "classes"], [84, "classes"], [85, "classes"], [86, "classes"], [88, "classes"], [89, "classes"], [90, "classes"], [91, "classes"], [92, "classes"], [93, "classes"], [94, "classes"], [96, "classes"], [97, "classes"], [98, "classes"], [99, "classes"], [100, "classes"], [102, "classes"], [103, "classes"], [104, "classes"], [105, "classes"], [107, "classes"], [108, "classes"], [109, "classes"], [110, "classes"], [113, "classes"], [115, "classes"], [119, "classes"], [120, "classes"], [121, "classes"], [122, "classes"], [123, "classes"], [124, "classes"], [125, "classes"], [126, "classes"], [127, "classes"], [128, "classes"], [129, "classes"], [131, "classes"], [132, "classes"], [133, "classes"], [134, "classes"], [135, "classes"], [136, "classes"], [137, "classes"], [138, "classes"], [139, "classes"], [140, "classes"], [141, "classes"], [142, "classes"], [143, "classes"], [144, "classes"], [146, "classes"], [147, "classes"], [150, "classes"], [154, "classes"], [155, "classes"], [156, "classes"], [157, "classes"], [158, "classes"], [162, "classes"], [166, "classes"], [167, "classes"], [169, "classes"], [175, "classes"], [178, "classes"], [179, "classes"], [180, "classes"], [181, "classes"], [182, "classes"], [184, "classes"], [185, "classes"], [186, "classes"], [187, "classes"], [190, "classes"], [193, "classes"], [194, "classes"], [196, "classes"], [200, "classes"], [201, "classes"], [203, "classes"], [208, "classes"], [209, "classes"], [210, "classes"], [212, "classes"], [213, "classes"], [214, "classes"], [215, "classes"], [216, "classes"], [217, "classes"], [219, "classes"], [220, "classes"], [221, "classes"], [222, "classes"], [223, "classes"], [224, "classes"], [225, "classes"], [226, "classes"], [227, "classes"], [232, "classes"], [233, "classes"], [234, "classes"], [236, "classes"], [237, "classes"], [240, "classes"], [241, "classes"], [242, "classes"], [243, "classes"], [244, "classes"], [245, "classes"], [246, "classes"], [247, "classes"], [248, "classes"], [249, "classes"], [250, "classes"], [251, "classes"], [252, "classes"], [253, "classes"], [254, "classes"], [255, "classes"], [256, "classes"], [257, "classes"], [258, "classes"], [259, "classes"], [260, "classes"], [261, "classes"], [262, "classes"], [263, "classes"], [264, "classes"], [265, "classes"], [266, "classes"], [267, "classes"], [268, "classes"], [269, "classes"], [270, "classes"], [271, "classes"], [272, "classes"], [273, "classes"], [274, "classes"], [275, "classes"], [276, "classes"], [277, "classes"], [279, "classes"], [283, "classes"], [284, "classes"], [285, "classes"], [287, "classes"], [288, "classes"], [290, "classes"], [291, "classes"], [292, "classes"], [293, "classes"], [294, "classes"], [295, "classes"], [296, "classes"], [297, "classes"], [298, "classes"], [299, "classes"], [300, "classes"], [301, "classes"], [302, "classes"], [303, "classes"], [304, "classes"], [305, "classes"], [306, "classes"], [307, "classes"], [308, "classes"], [309, "classes"], [310, "classes"], [311, "classes"], [316, "classes"], [317, "classes"], [318, "classes"], [321, "classes"], [324, "classes"], [325, "classes"], [326, "classes"], [327, "classes"], [328, "classes"], [329, "classes"], [331, "classes"], [333, "classes"], [334, "classes"], [335, "classes"], [337, "classes"], [338, "classes"], [339, "classes"], [340, "classes"], [341, "classes"], [342, "classes"], [343, "classes"], [344, "classes"], [345, "classes"], [348, "classes"], [350, "classes"], [351, "classes"], [352, "classes"], [353, "classes"], [354, "classes"], [355, "classes"], [356, "classes"], [357, "classes"], [358, "classes"], [360, "classes"], [361, "classes"], [362, "classes"], [363, "classes"], [366, "classes"], [367, "classes"], [368, "classes"], [369, "classes"], [371, "classes"], [374, "classes"], [377, "classes"], [378, "classes"], [380, "classes"], [381, "classes"], [382, "classes"], [383, "classes"], [384, "classes"], [385, "classes"], [386, "classes"], [387, "classes"], [388, "classes"], [389, "classes"], [390, "classes"], [393, "classes"], [394, "classes"], [395, "classes"], [401, "classes"], [404, "classes"], [405, "classes"], [406, "classes"], [408, "classes"], [409, "classes"], [412, "classes"], [414, "classes"], [416, "classes"], [417, "classes"], [418, "classes"], [419, "classes"], [421, "classes"], [422, "classes"], [424, "classes"], [426, "classes"], [428, "classes"], [429, "classes"], [431, "classes"], [434, "classes"], [435, "classes"], [436, "classes"], [437, "classes"], [438, "classes"], [439, "classes"], [440, "classes"], [442, "classes"], [443, "classes"], [444, "classes"], [445, "classes"], [448, "classes"], [449, "classes"], [450, "classes"], [451, "classes"], [452, "classes"], [455, "classes"], [456, "classes"], [458, "classes"], [460, "classes"], [461, "classes"], [471, "classes"], [475, "classes"], [478, "classes"], [479, "classes"], [480, "classes"], [481, "classes"], [483, "classes"], [484, "classes"], [485, "classes"], [486, "classes"], [487, "classes"], [488, "classes"], [489, "classes"], [490, "classes"], [491, "classes"], [492, "classes"], [493, "classes"], [494, "classes"], [495, "classes"], [496, "classes"], [497, "classes"], [498, "classes"], [499, "classes"], [500, "classes"], [501, "classes"], [502, "classes"], [503, "classes"], [504, "classes"], [505, "classes"], [507, "classes"], [508, "classes"], [509, "classes"], [510, "classes"], [511, "classes"], [512, "classes"], [513, "classes"], [514, "classes"], [515, "classes"], [516, "classes"], [518, "classes"], [519, "classes"], [520, "classes"], [521, "classes"], [522, "classes"], [523, "classes"], [524, "classes"], [526, "classes"], [527, "classes"], [528, "classes"], [529, "classes"], [530, "classes"], [532, "classes"], [533, "classes"], [534, "classes"], [535, "classes"], [538, "classes"], [540, "classes"], [544, "classes"], [545, "classes"], [546, "classes"], [547, "classes"], [548, "classes"], [549, "classes"], [550, "classes"], [551, "classes"], [552, "classes"], [553, "classes"], [554, "classes"], [556, "classes"], [557, "classes"], [558, "classes"], [559, "classes"], [560, "classes"], [561, "classes"], [562, "classes"], [563, "classes"], [564, "classes"], [565, "classes"], [566, "classes"], [568, "classes"], [569, "classes"], [572, "classes"], [574, "classes"], [575, "classes"], [576, "classes"], [577, "classes"], [593, "classes"], [597, "classes"], [600, "classes"], [601, "classes"], [602, "classes"], [603, "classes"], [606, "classes"], [611, "classes"], [613, "classes"], [614, "classes"], [615, "classes"], [622, "classes"], [626, "classes"], [631, "classes"], [632, "classes"], [635, "classes"], [636, "classes"], [637, "classes"], [638, "classes"], [640, "classes"], [642, "classes"], [643, "classes"]], "Functions": [[1, "functions"], [13, "functions"], [16, "functions"], [34, "functions"], [42, "functions"], [43, "functions"], [44, "functions"], [45, "functions"], [67, "functions"], [68, "functions"], [70, "functions"], [104, "functions"], [105, "functions"], [116, "functions"], [118, "functions"], [148, "functions"], [150, "functions"], [151, "functions"], [154, "functions"], [156, "functions"], [157, "functions"], [158, "functions"], [163, "functions"], [164, "functions"], [165, "functions"], [168, "functions"], [170, "functions"], [176, "functions"], [177, "functions"], [178, "functions"], [180, "functions"], [183, "functions"], [184, "functions"], [185, "functions"], [186, "functions"], [191, "functions"], [192, "functions"], [194, "functions"], [196, "functions"], [197, "functions"], [200, "functions"], [201, "functions"], [203, "functions"], [204, "functions"], [205, "functions"], [206, "functions"], [208, "functions"], [210, "functions"], [211, "functions"], [215, "functions"], [218, "functions"], [224, "functions"], [225, "functions"], [226, "functions"], [227, "functions"], [228, "functions"], [230, "functions"], [231, "functions"], [234, "functions"], [243, "functions"], [244, "functions"], [252, "functions"], [254, "functions"], [258, "functions"], [261, "functions"], [262, "functions"], [263, "functions"], [266, "functions"], [268, "functions"], [269, "functions"], [270, "functions"], [271, "functions"], [273, "functions"], [275, "functions"], [276, "functions"], [278, "functions"], [287, "functions"], [295, "functions"], [297, "functions"], [301, "functions"], [304, "functions"], [305, "functions"], [306, "functions"], [308, "functions"], [309, "functions"], [310, "functions"], [313, "functions"], [314, "functions"], [315, "functions"], [318, "functions"], [319, "functions"], [321, "functions"], [322, "functions"], [323, "functions"], [324, "functions"], [325, "functions"], [332, "functions"], [339, "functions"], [343, "functions"], [348, "functions"], [349, "functions"], [350, "functions"], [352, "functions"], [357, "functions"], [363, "functions"], [367, "functions"], [369, "functions"], [371, "functions"], [372, "functions"], [374, "functions"], [375, "functions"], [376, "functions"], [377, "functions"], [378, "functions"], [379, "functions"], [383, "functions"], [387, "functions"], [389, "functions"], [390, "functions"], [391, "functions"], [392, "functions"], [396, "functions"], [397, "functions"], [399, "functions"], [400, "functions"], [401, "functions"], [402, "functions"], [403, "functions"], [405, "functions"], [406, "functions"], [410, "functions"], [427, "functions"], [432, "functions"], [433, "functions"], [437, "functions"], [445, "functions"], [449, "functions"], [451, "functions"], [452, "functions"], [471, "functions"], [473, "functions"], [474, "functions"], [475, "functions"], [477, "functions"], [497, "functions"], [498, "functions"], [500, "functions"], [541, "functions"], [543, "functions"], [570, "functions"], [575, "functions"], [577, "functions"], [587, "functions"], [589, "functions"], [591, "functions"], [592, "functions"], [593, "functions"], [596, "functions"], [597, "functions"], [598, "functions"], [599, "functions"], [600, "functions"], [607, "functions"], [609, "functions"], [612, "functions"], [613, "functions"], [614, "functions"], [620, "functions"], [621, "functions"], [622, "functions"], [625, "functions"], [626, "functions"], [630, "functions"], [631, "functions"], [634, "functions"], [635, "functions"], [637, "functions"], [638, "functions"], [639, "functions"], [641, "functions"], [642, "functions"]], "neural_compressor.adaptor": [[2, "module-neural_compressor.adaptor"]], "Subpackages": [[2, "subpackages"], [17, "subpackages"], [87, "subpackages"], [111, "subpackages"], [112, "subpackages"], [114, "subpackages"], [159, "subpackages"], [202, "subpackages"], [205, "subpackages"], [238, "subpackages"], [263, "subpackages"], [281, "subpackages"], [306, "subpackages"], [317, "subpackages"], [341, "subpackages"], [359, "subpackages"], [370, "subpackages"], [441, "subpackages"], [517, "subpackages"], [536, "subpackages"], [537, "subpackages"], [539, "subpackages"], [585, "subpackages"]], "Submodules": [[2, "submodules"], [12, "submodules"], [17, "submodules"], [29, "submodules"], [52, "submodules"], [76, "submodules"], [87, "submodules"], [95, "submodules"], [101, "submodules"], [106, "submodules"], [111, "submodules"], [112, "submodules"], [114, "submodules"], [117, "submodules"], [130, "submodules"], [145, "submodules"], [152, "submodules"], [159, "submodules"], [160, "submodules"], [180, "submodules"], [189, "submodules"], [195, "submodules"], [198, "submodules"], [202, "submodules"], [205, "submodules"], [207, "submodules"], [211, "submodules"], [218, "submodules"], [229, "submodules"], [235, "submodules"], [239, "submodules"], [246, "submodules"], [258, "submodules"], [262, "submodules"], [266, "submodules"], [273, "submodules"], [282, "submodules"], [289, "submodules"], [301, "submodules"], [305, "submodules"], [308, "submodules"], [312, "submodules"], [317, "submodules"], [324, "submodules"], [330, "submodules"], [336, "submodules"], [342, "submodules"], [346, "submodules"], [359, "submodules"], [365, "submodules"], [370, "submodules"], [377, "submodules"], [381, "submodules"], [395, "submodules"], [408, "submodules"], [413, "submodules"], [415, "submodules"], [420, "submodules"], [423, "submodules"], [425, "submodules"], [430, "submodules"], [441, "submodules"], [447, "submodules"], [453, "submodules"], [457, "submodules"], [459, "submodules"], [482, "submodules"], [506, "submodules"], [517, "submodules"], [525, "submodules"], [531, "submodules"], [536, "submodules"], [537, "submodules"], [539, "submodules"], [542, "submodules"], [555, "submodules"], [567, "submodules"], [573, "submodules"], [586, "submodules"], [604, "submodules"], [610, "submodules"], [635, "submodules"]], "Package Contents": [[2, "package-contents"], [29, "package-contents"], [180, "package-contents"], [186, "package-contents"], [205, "package-contents"], [211, "package-contents"], [218, "package-contents"], [246, "package-contents"], [258, "package-contents"], [262, "package-contents"], [263, "package-contents"], [266, "package-contents"], [273, "package-contents"], [289, "package-contents"], [301, "package-contents"], [305, "package-contents"], [306, "package-contents"], [308, "package-contents"], [317, "package-contents"], [324, "package-contents"], [336, "package-contents"], [341, "package-contents"], [342, "package-contents"], [359, "package-contents"], [377, "package-contents"], [381, "package-contents"], [390, "package-contents"], [392, "package-contents"], [395, "package-contents"], [401, "package-contents"], [406, "package-contents"], [408, "package-contents"], [441, "package-contents"], [635, "package-contents"]], "neural_compressor.adaptor.keras": [[3, "module-neural_compressor.adaptor.keras"]], "neural_compressor.adaptor.keras_utils.conv2d": [[4, "module-neural_compressor.adaptor.keras_utils.conv2d"]], "neural_compressor.adaptor.keras_utils.dense": [[5, "module-neural_compressor.adaptor.keras_utils.dense"]], "neural_compressor.adaptor.keras_utils.depthwise_conv2d": [[6, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"]], "neural_compressor.adaptor.keras_utils": [[7, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.pool2d": [[8, "module-neural_compressor.adaptor.keras_utils.pool2d"]], "neural_compressor.adaptor.keras_utils.quantizer": [[9, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "neural_compressor.adaptor.keras_utils.separable_conv2d": [[10, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"]], "neural_compressor.adaptor.mxnet": [[11, "module-neural_compressor.adaptor.mxnet"]], "neural_compressor.adaptor.mxnet_utils": [[12, "module-neural_compressor.adaptor.mxnet_utils"]], "neural_compressor.adaptor.mxnet_utils.util": [[13, "module-neural_compressor.adaptor.mxnet_utils.util"]], "neural_compressor.adaptor.onnxrt": [[14, "module-neural_compressor.adaptor.onnxrt"]], "neural_compressor.adaptor.ox_utils.calibration": [[15, "module-neural_compressor.adaptor.ox_utils.calibration"]], "neural_compressor.adaptor.ox_utils.calibrator": [[16, "module-neural_compressor.adaptor.ox_utils.calibrator"]], "neural_compressor.adaptor.ox_utils": [[17, "module-neural_compressor.adaptor.ox_utils"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[18, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[19, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[20, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[21, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[22, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[23, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[24, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[25, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[26, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[27, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[28, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[29, "module-neural_compressor.adaptor.ox_utils.operators"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[30, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[31, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[32, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "neural_compressor.adaptor.ox_utils.operators.norm": [[33, "module-neural_compressor.adaptor.ox_utils.operators.norm"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[34, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[35, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[36, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "neural_compressor.adaptor.ox_utils.operators.reduce": [[37, "module-neural_compressor.adaptor.ox_utils.operators.reduce"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[38, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "neural_compressor.adaptor.ox_utils.operators.split": [[39, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "neural_compressor.adaptor.ox_utils.operators.unary_op": [[40, "module-neural_compressor.adaptor.ox_utils.operators.unary_op"]], "neural_compressor.adaptor.ox_utils.quantizer": [[41, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "neural_compressor.adaptor.ox_utils.smooth_quant": [[42, "module-neural_compressor.adaptor.ox_utils.smooth_quant"]], "neural_compressor.adaptor.ox_utils.util": [[43, "module-neural_compressor.adaptor.ox_utils.util"]], "neural_compressor.adaptor.ox_utils.weight_only": [[44, "module-neural_compressor.adaptor.ox_utils.weight_only"]], "neural_compressor.adaptor.pytorch": [[45, "module-neural_compressor.adaptor.pytorch"]], "neural_compressor.adaptor.query": [[46, "module-neural_compressor.adaptor.query"]], "neural_compressor.adaptor.tensorflow": [[47, "module-neural_compressor.adaptor.tensorflow"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[48, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[49, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer": [[51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[109, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_util": [[110, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "neural_compressor.adaptor.tf_utils": [[111, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[112, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[138, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[139, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "neural_compressor.adaptor.tf_utils.smooth_quant_calibration": [[140, "module-neural_compressor.adaptor.tf_utils.smooth_quant_calibration"]], "neural_compressor.adaptor.tf_utils.smooth_quant_scaler": [[141, "module-neural_compressor.adaptor.tf_utils.smooth_quant_scaler"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[142, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[143, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[144, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[145, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[146, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[147, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.util": [[148, "module-neural_compressor.adaptor.tf_utils.util"]], "neural_compressor.adaptor.torch_utils.auto_round": [[149, "module-neural_compressor.adaptor.torch_utils.auto_round"]], "neural_compressor.adaptor.torch_utils.autoround.autoround": [[150, "module-neural_compressor.adaptor.torch_utils.autoround.autoround"]], "neural_compressor.adaptor.torch_utils.autoround.export": [[151, "module-neural_compressor.adaptor.torch_utils.autoround.export"]], "neural_compressor.adaptor.torch_utils.autoround": [[152, "module-neural_compressor.adaptor.torch_utils.autoround"]], "neural_compressor.adaptor.torch_utils.autoround.model_wrapper": [[153, "module-neural_compressor.adaptor.torch_utils.autoround.model_wrapper"]], "neural_compressor.adaptor.torch_utils.autoround.sign_sgd": [[154, "module-neural_compressor.adaptor.torch_utils.autoround.sign_sgd"]], "neural_compressor.adaptor.torch_utils.awq": [[155, "module-neural_compressor.adaptor.torch_utils.awq"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[156, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "neural_compressor.adaptor.torch_utils.gptq": [[157, "module-neural_compressor.adaptor.torch_utils.gptq"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[158, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[159, "module-neural_compressor.adaptor.torch_utils"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant": [[160, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle": [[161, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize": [[162, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load": [[163, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils": [[164, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.utils"]], "neural_compressor.adaptor.torch_utils.mixed_precision": [[165, "module-neural_compressor.adaptor.torch_utils.mixed_precision"]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[166, "module-neural_compressor.adaptor.torch_utils.model_wrapper"]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[167, "module-neural_compressor.adaptor.torch_utils.pattern_detector"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[168, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "neural_compressor.adaptor.torch_utils.teq": [[169, "module-neural_compressor.adaptor.torch_utils.teq"]], "neural_compressor.adaptor.torch_utils.util": [[170, "module-neural_compressor.adaptor.torch_utils.util"]], "}": [[170, "id3"]], "neural_compressor.adaptor.torch_utils.waq.auto_alpha": [[171, "module-neural_compressor.adaptor.torch_utils.waq.auto_alpha"]], "neural_compressor.adaptor.torch_utils.waq.calibration": [[172, "module-neural_compressor.adaptor.torch_utils.waq.calibration"]], "neural_compressor.adaptor.torch_utils.waq.graph_trace": [[173, "module-neural_compressor.adaptor.torch_utils.waq.graph_trace"]], "neural_compressor.adaptor.torch_utils.waq": [[174, "module-neural_compressor.adaptor.torch_utils.waq"]], "neural_compressor.adaptor.torch_utils.waq.smooth_quant": [[175, "module-neural_compressor.adaptor.torch_utils.waq.smooth_quant"]], "neural_compressor.adaptor.torch_utils.waq.utils": [[176, "module-neural_compressor.adaptor.torch_utils.waq.utils"]], "neural_compressor.adaptor.torch_utils.weight_only": [[177, "module-neural_compressor.adaptor.torch_utils.weight_only"]], "neural_compressor.algorithm.algorithm": [[178, "module-neural_compressor.algorithm.algorithm"]], "neural_compressor.algorithm.fast_bias_correction": [[179, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[180, "module-neural_compressor.algorithm"]], "neural_compressor.algorithm.smooth_quant": [[181, "module-neural_compressor.algorithm.smooth_quant"]], "neural_compressor.algorithm.weight_correction": [[182, "module-neural_compressor.algorithm.weight_correction"]], "neural_compressor.benchmark": [[183, "module-neural_compressor.benchmark"]], "neural_compressor.common.base_config": [[184, "module-neural_compressor.common.base_config"]], "Attributes": [[184, "attributes"], [185, "attributes"], [186, "attributes"], [190, "attributes"], [246, "attributes"], [254, "attributes"], [263, "attributes"], [297, "attributes"], [306, "attributes"], [317, "attributes"], [341, "attributes"], [381, "attributes"], [405, "attributes"], [408, "attributes"], [410, "attributes"], [452, "attributes"], [602, "attributes"], [614, "attributes"], [635, "attributes"]], "neural_compressor.common.base_tuning": [[185, "module-neural_compressor.common.base_tuning"]], "neural_compressor.common": [[186, "module-neural_compressor.common"]], "neural_compressor.common.tuning_param": [[187, "module-neural_compressor.common.tuning_param"]], "neural_compressor.common.utils.constants": [[188, "module-neural_compressor.common.utils.constants"]], "neural_compressor.common.utils": [[189, "module-neural_compressor.common.utils"]], "neural_compressor.common.utils.logger": [[190, "module-neural_compressor.common.utils.logger"]], "neural_compressor.common.utils.save_load": [[191, "module-neural_compressor.common.utils.save_load"]], "neural_compressor.common.utils.utility": [[192, "module-neural_compressor.common.utils.utility"]], "neural_compressor.compression.callbacks": [[193, "module-neural_compressor.compression.callbacks"]], "neural_compressor.compression.distillation.criterions": [[194, "module-neural_compressor.compression.distillation.criterions"]], "neural_compressor.compression.distillation": [[195, "module-neural_compressor.compression.distillation"]], "neural_compressor.compression.distillation.optimizers": [[196, "module-neural_compressor.compression.distillation.optimizers"]], "neural_compressor.compression.distillation.utility": [[197, "module-neural_compressor.compression.distillation.utility"]], "neural_compressor.compression.hpo": [[198, "module-neural_compressor.compression.hpo"]], "neural_compressor.compression.hpo.sa_optimizer": [[199, "module-neural_compressor.compression.hpo.sa_optimizer"]], "neural_compressor.compression.hpo.search_algorithms": [[200, "module-neural_compressor.compression.hpo.search_algorithms"]], "neural_compressor.compression.hpo.search_space": [[201, "module-neural_compressor.compression.hpo.search_space"]], "neural_compressor.compression": [[202, "module-neural_compressor.compression"]], "neural_compressor.compression.pruner.criteria": [[203, "module-neural_compressor.compression.pruner.criteria"]], "neural_compressor.compression.pruner.dsnot": [[204, "module-neural_compressor.compression.pruner.dsnot"]], "neural_compressor.compression.pruner": [[205, "module-neural_compressor.compression.pruner"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[206, "module-neural_compressor.compression.pruner.model_slim.auto_slim"]], "neural_compressor.compression.pruner.model_slim": [[207, "module-neural_compressor.compression.pruner.model_slim"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[208, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[209, "module-neural_compressor.compression.pruner.model_slim.weight_slim"]], "neural_compressor.compression.pruner.patterns.base": [[210, "module-neural_compressor.compression.pruner.patterns.base"]], "neural_compressor.compression.pruner.patterns": [[211, "module-neural_compressor.compression.pruner.patterns"]], "neural_compressor.compression.pruner.patterns.mha": [[212, "module-neural_compressor.compression.pruner.patterns.mha"]], "neural_compressor.compression.pruner.patterns.ninm": [[213, "module-neural_compressor.compression.pruner.patterns.ninm"]], "neural_compressor.compression.pruner.patterns.nxm": [[214, "module-neural_compressor.compression.pruner.patterns.nxm"]], "neural_compressor.compression.pruner.pruners.base": [[215, "module-neural_compressor.compression.pruner.pruners.base"]], "neural_compressor.compression.pruner.pruners.basic": [[216, "module-neural_compressor.compression.pruner.pruners.basic"]], "neural_compressor.compression.pruner.pruners.block_mask": [[217, "module-neural_compressor.compression.pruner.pruners.block_mask"]], "neural_compressor.compression.pruner.pruners": [[218, "module-neural_compressor.compression.pruner.pruners"]], "neural_compressor.compression.pruner.pruners.mha": [[219, "module-neural_compressor.compression.pruner.pruners.mha"]], "neural_compressor.compression.pruner.pruners.pattern_lock": [[220, "module-neural_compressor.compression.pruner.pruners.pattern_lock"]], "neural_compressor.compression.pruner.pruners.progressive": [[221, "module-neural_compressor.compression.pruner.pruners.progressive"]], "neural_compressor.compression.pruner.pruners.retrain_free": [[222, "module-neural_compressor.compression.pruner.pruners.retrain_free"]], "neural_compressor.compression.pruner.pruners.sparse_gpt": [[223, "module-neural_compressor.compression.pruner.pruners.sparse_gpt"]], "neural_compressor.compression.pruner.pruning": [[224, "module-neural_compressor.compression.pruner.pruning"]], "neural_compressor.compression.pruner.regs": [[225, "module-neural_compressor.compression.pruner.regs"]], "neural_compressor.compression.pruner.schedulers": [[226, "module-neural_compressor.compression.pruner.schedulers"]], "neural_compressor.compression.pruner.tf_criteria": [[227, "module-neural_compressor.compression.pruner.tf_criteria"]], "neural_compressor.compression.pruner.utils": [[228, "module-neural_compressor.compression.pruner.utils"]], "neural_compressor.compression.pruner.wanda": [[229, "module-neural_compressor.compression.pruner.wanda"]], "neural_compressor.compression.pruner.wanda.prune": [[230, "module-neural_compressor.compression.pruner.wanda.prune"]], "neural_compressor.compression.pruner.wanda.utils": [[231, "module-neural_compressor.compression.pruner.wanda.utils"]], "neural_compressor.compression.pruner.wanda.wrapper": [[232, "module-neural_compressor.compression.pruner.wanda.wrapper"]], "neural_compressor.conf.config": [[233, "module-neural_compressor.conf.config"]], "neural_compressor.conf.dotdict": [[234, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[235, "module-neural_compressor.conf"]], "neural_compressor.conf.pythonic_config": [[236, "module-neural_compressor.conf.pythonic_config"]], "neural_compressor.config": [[237, "module-neural_compressor.config"]], "neural_compressor.contrib": [[238, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[239, "module-neural_compressor.contrib.strategy"]], "neural_compressor.contrib.strategy.sigopt": [[240, "module-neural_compressor.contrib.strategy.sigopt"]], "neural_compressor.contrib.strategy.tpe": [[241, "module-neural_compressor.contrib.strategy.tpe"]], "neural_compressor.data.dataloaders.base_dataloader": [[242, "module-neural_compressor.data.dataloaders.base_dataloader"]], "neural_compressor.data.dataloaders.dataloader": [[243, "module-neural_compressor.data.dataloaders.dataloader"]], "neural_compressor.data.dataloaders.default_dataloader": [[244, "module-neural_compressor.data.dataloaders.default_dataloader"]], "neural_compressor.data.dataloaders.fetcher": [[245, "module-neural_compressor.data.dataloaders.fetcher"]], "neural_compressor.data.dataloaders": [[246, "module-neural_compressor.data.dataloaders"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[247, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[248, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[249, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "neural_compressor.data.dataloaders.sampler": [[250, "module-neural_compressor.data.dataloaders.sampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[251, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.data.datasets.bert_dataset": [[252, "module-neural_compressor.data.datasets.bert_dataset"]], "neural_compressor.data.datasets.coco_dataset": [[253, "module-neural_compressor.data.datasets.coco_dataset"]], "neural_compressor.data.datasets.dataset": [[254, "module-neural_compressor.data.datasets.dataset"]], "neural_compressor.data.datasets.dummy_dataset": [[255, "module-neural_compressor.data.datasets.dummy_dataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[256, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "neural_compressor.data.datasets.imagenet_dataset": [[257, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[258, "module-neural_compressor.data.datasets"]], "neural_compressor.data.datasets.style_transfer_dataset": [[259, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "neural_compressor.data.filters.coco_filter": [[260, "module-neural_compressor.data.filters.coco_filter"]], "neural_compressor.data.filters.filter": [[261, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[262, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[263, "module-neural_compressor.data"]], "neural_compressor.data.transforms.coco_transform": [[264, "module-neural_compressor.data.transforms.coco_transform"]], "neural_compressor.data.transforms.imagenet_transform": [[265, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[266, "module-neural_compressor.data.transforms"]], "neural_compressor.data.transforms.postprocess": [[267, "module-neural_compressor.data.transforms.postprocess"]], "neural_compressor.data.transforms.tokenization": [[268, "module-neural_compressor.data.transforms.tokenization"]], "neural_compressor.data.transforms.transform": [[269, "module-neural_compressor.data.transforms.transform"]], "neural_compressor.experimental.benchmark": [[270, "module-neural_compressor.experimental.benchmark"]], "neural_compressor.experimental.common.criterion": [[271, "module-neural_compressor.experimental.common.criterion"]], "neural_compressor.experimental.common.dataloader": [[272, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[273, "module-neural_compressor.experimental.common"]], "neural_compressor.experimental.common.metric": [[274, "module-neural_compressor.experimental.common.metric"]], "neural_compressor.experimental.common.model": [[275, "module-neural_compressor.experimental.common.model"]], "neural_compressor.experimental.common.optimizer": [[276, "module-neural_compressor.experimental.common.optimizer"]], "neural_compressor.experimental.common.postprocess": [[277, "module-neural_compressor.experimental.common.postprocess"]], "neural_compressor.experimental.common.torch_utils": [[278, "module-neural_compressor.experimental.common.torch_utils"]], "neural_compressor.experimental.component": [[279, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.compression": [[280, "module-neural_compressor.experimental.compression"]], "neural_compressor.experimental.contrib": [[281, "module-neural_compressor.experimental.contrib"]], "neural_compressor.experimental.contrib.strategy": [[282, "module-neural_compressor.experimental.contrib.strategy"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[283, "module-neural_compressor.experimental.contrib.strategy.sigopt"]], "neural_compressor.experimental.contrib.strategy.tpe": [[284, "module-neural_compressor.experimental.contrib.strategy.tpe"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[285, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[286, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[287, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[288, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[289, "module-neural_compressor.experimental.data.dataloaders"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[290, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[291, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[292, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[293, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[294, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[295, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[296, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "neural_compressor.experimental.data.datasets.dataset": [[297, "module-neural_compressor.experimental.data.datasets.dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[298, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[299, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[300, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[301, "module-neural_compressor.experimental.data.datasets"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[302, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "neural_compressor.experimental.data.filters.coco_filter": [[303, "module-neural_compressor.experimental.data.filters.coco_filter"]], "neural_compressor.experimental.data.filters.filter": [[304, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[305, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[306, "module-neural_compressor.experimental.data"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[307, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[308, "module-neural_compressor.experimental.data.transforms"]], "neural_compressor.experimental.data.transforms.tokenization": [[309, "module-neural_compressor.experimental.data.transforms.tokenization"]], "neural_compressor.experimental.data.transforms.transform": [[310, "module-neural_compressor.experimental.data.transforms.transform"]], "neural_compressor.experimental.distillation": [[311, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[312, "module-neural_compressor.experimental.export"]], "neural_compressor.experimental.export.qlinear2qdq": [[313, "module-neural_compressor.experimental.export.qlinear2qdq"]], "neural_compressor.experimental.export.tf2onnx": [[314, "module-neural_compressor.experimental.export.tf2onnx"]], "neural_compressor.experimental.export.torch2onnx": [[315, "module-neural_compressor.experimental.export.torch2onnx"]], "neural_compressor.experimental.graph_optimization": [[316, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[317, "module-neural_compressor.experimental"]], "neural_compressor.experimental.metric.bleu": [[318, "module-neural_compressor.experimental.metric.bleu"]], "neural_compressor.experimental.metric.bleu_util": [[319, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[320, "module-neural_compressor.experimental.metric.coco_label_map"]], "neural_compressor.experimental.metric.coco_tools": [[321, "module-neural_compressor.experimental.metric.coco_tools"]], "neural_compressor.experimental.metric.evaluate_squad": [[322, "module-neural_compressor.experimental.metric.evaluate_squad"]], "neural_compressor.experimental.metric.f1": [[323, "module-neural_compressor.experimental.metric.f1"]], "neural_compressor.experimental.metric": [[324, "module-neural_compressor.experimental.metric"]], "neural_compressor.experimental.metric.metric": [[325, "module-neural_compressor.experimental.metric.metric"]], "neural_compressor.experimental.mixed_precision": [[326, "module-neural_compressor.experimental.mixed_precision"]], "neural_compressor.experimental.model_conversion": [[327, "module-neural_compressor.experimental.model_conversion"]], "neural_compressor.experimental.nas.basic_nas": [[328, "module-neural_compressor.experimental.nas.basic_nas"]], "neural_compressor.experimental.nas.dynas": [[329, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas": [[330, "module-neural_compressor.experimental.nas"]], "neural_compressor.experimental.nas.nas": [[331, "module-neural_compressor.experimental.nas.nas"]], "neural_compressor.experimental.nas.nas_utils": [[332, "module-neural_compressor.experimental.nas.nas_utils"]], "neural_compressor.experimental.nas.search_algorithms": [[333, "module-neural_compressor.experimental.nas.search_algorithms"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[334, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[335, "module-neural_compressor.experimental.pruner_legacy.group_lasso"]], "neural_compressor.experimental.pruner_legacy": [[336, "module-neural_compressor.experimental.pruner_legacy"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[337, "module-neural_compressor.experimental.pruner_legacy.magnitude"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[338, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"]], "neural_compressor.experimental.pruner_legacy.pruner": [[339, "module-neural_compressor.experimental.pruner_legacy.pruner"]], "neural_compressor.experimental.pruning": [[340, "module-neural_compressor.experimental.pruning"]], "neural_compressor.experimental.pruning_recipes": [[341, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[342, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[343, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[344, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "neural_compressor.experimental.pruning_v2": [[345, "module-neural_compressor.experimental.pruning_v2"]], "neural_compressor.experimental.pytorch_pruner": [[346, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[347, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[348, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[349, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[350, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[351, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[352, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "neural_compressor.experimental.quantization": [[353, "module-neural_compressor.experimental.quantization"]], "neural_compressor.experimental.scheduler": [[354, "module-neural_compressor.experimental.scheduler"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[355, "module-neural_compressor.experimental.strategy.auto_mixed_precision"]], "neural_compressor.experimental.strategy.basic": [[356, "module-neural_compressor.experimental.strategy.basic"]], "neural_compressor.experimental.strategy.bayesian": [[357, "module-neural_compressor.experimental.strategy.bayesian"]], "neural_compressor.experimental.strategy.exhaustive": [[358, "module-neural_compressor.experimental.strategy.exhaustive"]], "neural_compressor.experimental.strategy": [[359, "module-neural_compressor.experimental.strategy"]], "neural_compressor.experimental.strategy.mse": [[360, "module-neural_compressor.experimental.strategy.mse"]], "neural_compressor.experimental.strategy.mse_v2": [[361, "module-neural_compressor.experimental.strategy.mse_v2"]], "neural_compressor.experimental.strategy.random": [[362, "module-neural_compressor.experimental.strategy.random"]], "neural_compressor.experimental.strategy.strategy": [[363, "module-neural_compressor.experimental.strategy.strategy"]], "neural_compressor.experimental.strategy.utils.constant": [[364, "module-neural_compressor.experimental.strategy.utils.constant"]], "neural_compressor.experimental.strategy.utils": [[365, "module-neural_compressor.experimental.strategy.utils"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[366, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[367, "module-neural_compressor.experimental.strategy.utils.tuning_space"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[368, "module-neural_compressor.experimental.strategy.utils.tuning_structs"]], "neural_compressor.experimental.strategy.utils.utility": [[369, "module-neural_compressor.experimental.strategy.utils.utility"]], "neural_compressor": [[370, "module-neural_compressor"]], "neural_compressor.metric.bleu": [[371, "module-neural_compressor.metric.bleu"]], "neural_compressor.metric.bleu_util": [[372, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[373, "module-neural_compressor.metric.coco_label_map"]], "neural_compressor.metric.coco_tools": [[374, "module-neural_compressor.metric.coco_tools"]], "neural_compressor.metric.evaluate_squad": [[375, "module-neural_compressor.metric.evaluate_squad"]], "neural_compressor.metric.f1": [[376, "module-neural_compressor.metric.f1"]], "neural_compressor.metric": [[377, "module-neural_compressor.metric"]], "neural_compressor.metric.metric": [[378, "module-neural_compressor.metric.metric"]], "neural_compressor.mix_precision": [[379, "module-neural_compressor.mix_precision"]], "neural_compressor.model.base_model": [[380, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[381, "module-neural_compressor.model"]], "neural_compressor.model.keras_model": [[382, "module-neural_compressor.model.keras_model"]], "neural_compressor.model.model": [[383, "module-neural_compressor.model.model"]], "neural_compressor.model.mxnet_model": [[384, "module-neural_compressor.model.mxnet_model"]], "neural_compressor.model.nets_factory": [[385, "module-neural_compressor.model.nets_factory"]], "neural_compressor.model.onnx_model": [[386, "module-neural_compressor.model.onnx_model"]], "neural_compressor.model.tensorflow_model": [[387, "module-neural_compressor.model.tensorflow_model"]], "neural_compressor.model.torch_model": [[388, "module-neural_compressor.model.torch_model"]], "neural_compressor.objective": [[389, "module-neural_compressor.objective"]], "neural_compressor.onnxrt.algorithms": [[390, "module-neural_compressor.onnxrt.algorithms"]], "neural_compressor.onnxrt.algorithms.layer_wise.core": [[391, "module-neural_compressor.onnxrt.algorithms.layer_wise.core"]], "neural_compressor.onnxrt.algorithms.layer_wise": [[392, "module-neural_compressor.onnxrt.algorithms.layer_wise"]], "neural_compressor.onnxrt.algorithms.smoother.calibrator": [[393, "module-neural_compressor.onnxrt.algorithms.smoother.calibrator"]], "neural_compressor.onnxrt.algorithms.smoother.core": [[394, "module-neural_compressor.onnxrt.algorithms.smoother.core"]], "neural_compressor.onnxrt.algorithms.smoother": [[395, "module-neural_compressor.onnxrt.algorithms.smoother"]], "neural_compressor.onnxrt.algorithms.weight_only.awq": [[396, "module-neural_compressor.onnxrt.algorithms.weight_only.awq"]], "neural_compressor.onnxrt.algorithms.weight_only.gptq": [[397, "module-neural_compressor.onnxrt.algorithms.weight_only.gptq"]], "neural_compressor.onnxrt.algorithms.weight_only": [[398, "module-neural_compressor.onnxrt.algorithms.weight_only"]], "neural_compressor.onnxrt.algorithms.weight_only.rtn": [[399, "module-neural_compressor.onnxrt.algorithms.weight_only.rtn"]], "neural_compressor.onnxrt.algorithms.weight_only.utility": [[400, "module-neural_compressor.onnxrt.algorithms.weight_only.utility"]], "neural_compressor.onnxrt": [[401, "module-neural_compressor.onnxrt"]], "neural_compressor.onnxrt.quantization.algorithm_entry": [[402, "module-neural_compressor.onnxrt.quantization.algorithm_entry"]], "neural_compressor.onnxrt.quantization.autotune": [[403, "module-neural_compressor.onnxrt.quantization.autotune"]], "neural_compressor.onnxrt.quantization.calibrate": [[404, "module-neural_compressor.onnxrt.quantization.calibrate"]], "neural_compressor.onnxrt.quantization.config": [[405, "module-neural_compressor.onnxrt.quantization.config"]], "neural_compressor.onnxrt.quantization": [[406, "module-neural_compressor.onnxrt.quantization"]], "neural_compressor.onnxrt.quantization.quantize": [[407, "module-neural_compressor.onnxrt.quantization.quantize"]], "neural_compressor.onnxrt.utils": [[408, "module-neural_compressor.onnxrt.utils"]], "neural_compressor.onnxrt.utils.onnx_model": [[409, "module-neural_compressor.onnxrt.utils.onnx_model"]], "neural_compressor.onnxrt.utils.utility": [[410, "module-neural_compressor.onnxrt.utils.utility"]], "neural_compressor.profiling": [[411, "module-neural_compressor.profiling"]], "neural_compressor.profiling.parser.factory": [[412, "module-neural_compressor.profiling.parser.factory"]], "neural_compressor.profiling.parser": [[413, "module-neural_compressor.profiling.parser"]], "neural_compressor.profiling.parser.onnx_parser.factory": [[414, "module-neural_compressor.profiling.parser.onnx_parser.factory"]], "neural_compressor.profiling.parser.onnx_parser": [[415, "module-neural_compressor.profiling.parser.onnx_parser"]], "neural_compressor.profiling.parser.onnx_parser.parser": [[416, "module-neural_compressor.profiling.parser.onnx_parser.parser"]], "neural_compressor.profiling.parser.parser": [[417, "module-neural_compressor.profiling.parser.parser"]], "neural_compressor.profiling.parser.result": [[418, "module-neural_compressor.profiling.parser.result"]], "neural_compressor.profiling.parser.tensorflow_parser.factory": [[419, "module-neural_compressor.profiling.parser.tensorflow_parser.factory"]], "neural_compressor.profiling.parser.tensorflow_parser": [[420, "module-neural_compressor.profiling.parser.tensorflow_parser"]], "neural_compressor.profiling.parser.tensorflow_parser.parser": [[421, "module-neural_compressor.profiling.parser.tensorflow_parser.parser"]], "neural_compressor.profiling.profiler.factory": [[422, "module-neural_compressor.profiling.profiler.factory"]], "neural_compressor.profiling.profiler": [[423, "module-neural_compressor.profiling.profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.factory": [[424, "module-neural_compressor.profiling.profiler.onnxrt_profiler.factory"]], "neural_compressor.profiling.profiler.onnxrt_profiler": [[425, "module-neural_compressor.profiling.profiler.onnxrt_profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.profiler": [[426, "module-neural_compressor.profiling.profiler.onnxrt_profiler.profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.utils": [[427, "module-neural_compressor.profiling.profiler.onnxrt_profiler.utils"]], "neural_compressor.profiling.profiler.profiler": [[428, "module-neural_compressor.profiling.profiler.profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.factory": [[429, "module-neural_compressor.profiling.profiler.tensorflow_profiler.factory"]], "neural_compressor.profiling.profiler.tensorflow_profiler": [[430, "module-neural_compressor.profiling.profiler.tensorflow_profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.profiler": [[431, "module-neural_compressor.profiling.profiler.tensorflow_profiler.profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.utils": [[432, "module-neural_compressor.profiling.profiler.tensorflow_profiler.utils"]], "neural_compressor.quantization": [[433, "module-neural_compressor.quantization"]], "neural_compressor.strategy.auto": [[434, "module-neural_compressor.strategy.auto"]], "neural_compressor.strategy.auto_mixed_precision": [[435, "module-neural_compressor.strategy.auto_mixed_precision"]], "neural_compressor.strategy.basic": [[436, "module-neural_compressor.strategy.basic"]], "neural_compressor.strategy.bayesian": [[437, "module-neural_compressor.strategy.bayesian"]], "neural_compressor.strategy.conservative": [[438, "module-neural_compressor.strategy.conservative"]], "neural_compressor.strategy.exhaustive": [[439, "module-neural_compressor.strategy.exhaustive"]], "neural_compressor.strategy.hawq_v2": [[440, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[441, "module-neural_compressor.strategy"]], "neural_compressor.strategy.mse": [[442, "module-neural_compressor.strategy.mse"]], "neural_compressor.strategy.mse_v2": [[443, "module-neural_compressor.strategy.mse_v2"]], "neural_compressor.strategy.random": [[444, "module-neural_compressor.strategy.random"]], "neural_compressor.strategy.strategy": [[445, "module-neural_compressor.strategy.strategy"]], "neural_compressor.strategy.utils.constant": [[446, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[447, "module-neural_compressor.strategy.utils"]], "neural_compressor.strategy.utils.tuning_sampler": [[448, "module-neural_compressor.strategy.utils.tuning_sampler"]], "neural_compressor.strategy.utils.tuning_space": [[449, "module-neural_compressor.strategy.utils.tuning_space"]], "neural_compressor.strategy.utils.tuning_structs": [[450, "module-neural_compressor.strategy.utils.tuning_structs"]], "neural_compressor.strategy.utils.utility": [[451, "module-neural_compressor.strategy.utils.utility"]], "neural_compressor.template.api_doc_example": [[452, "module-neural_compressor.template.api_doc_example"]], "neural_compressor.template": [[453, "module-neural_compressor.template"]], "neural_compressor.tensorflow.algorithms": [[454, "module-neural_compressor.tensorflow.algorithms"]], "neural_compressor.tensorflow.algorithms.smoother.calibration": [[455, "module-neural_compressor.tensorflow.algorithms.smoother.calibration"]], "neural_compressor.tensorflow.algorithms.smoother.core": [[456, "module-neural_compressor.tensorflow.algorithms.smoother.core"]], "neural_compressor.tensorflow.algorithms.smoother": [[457, "module-neural_compressor.tensorflow.algorithms.smoother"]], "neural_compressor.tensorflow.algorithms.smoother.scaler": [[458, "module-neural_compressor.tensorflow.algorithms.smoother.scaler"]], "neural_compressor.tensorflow.algorithms.static_quant": [[459, "module-neural_compressor.tensorflow.algorithms.static_quant"]], "neural_compressor.tensorflow.algorithms.static_quant.keras": [[460, "module-neural_compressor.tensorflow.algorithms.static_quant.keras"]], "neural_compressor.tensorflow.algorithms.static_quant.tensorflow": [[461, "module-neural_compressor.tensorflow.algorithms.static_quant.tensorflow"]], "neural_compressor.tensorflow": [[462, "module-neural_compressor.tensorflow"]], "neural_compressor.tensorflow.keras": [[463, "module-neural_compressor.tensorflow.keras"]], "neural_compressor.tensorflow.keras.layers.conv2d": [[464, "module-neural_compressor.tensorflow.keras.layers.conv2d"]], "neural_compressor.tensorflow.keras.layers.dense": [[465, "module-neural_compressor.tensorflow.keras.layers.dense"]], "neural_compressor.tensorflow.keras.layers.depthwise_conv2d": [[466, "module-neural_compressor.tensorflow.keras.layers.depthwise_conv2d"]], "neural_compressor.tensorflow.keras.layers": [[467, "module-neural_compressor.tensorflow.keras.layers"]], "neural_compressor.tensorflow.keras.layers.pool2d": [[468, "module-neural_compressor.tensorflow.keras.layers.pool2d"]], "neural_compressor.tensorflow.keras.layers.quantizer": [[469, "module-neural_compressor.tensorflow.keras.layers.quantizer"]], "neural_compressor.tensorflow.keras.layers.separable_conv2d": [[470, "module-neural_compressor.tensorflow.keras.layers.separable_conv2d"]], "neural_compressor.tensorflow.keras.quantization.config": [[471, "module-neural_compressor.tensorflow.keras.quantization.config"]], "neural_compressor.tensorflow.keras.quantization": [[472, "module-neural_compressor.tensorflow.keras.quantization"]], "neural_compressor.tensorflow.quantization.algorithm_entry": [[473, "module-neural_compressor.tensorflow.quantization.algorithm_entry"]], "neural_compressor.tensorflow.quantization.autotune": [[474, "module-neural_compressor.tensorflow.quantization.autotune"]], "neural_compressor.tensorflow.quantization.config": [[475, "module-neural_compressor.tensorflow.quantization.config"]], "neural_compressor.tensorflow.quantization": [[476, "module-neural_compressor.tensorflow.quantization"]], "neural_compressor.tensorflow.quantization.quantize": [[477, "module-neural_compressor.tensorflow.quantization.quantize"]], "neural_compressor.tensorflow.quantization.utils.graph_converter": [[478, "module-neural_compressor.tensorflow.quantization.utils.graph_converter"]], "neural_compressor.tensorflow.quantization.utils.graph_converter_without_calib": [[479, "module-neural_compressor.tensorflow.quantization.utils.graph_converter_without_calib"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.bf16_convert": [[480, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.dequantize_cast_optimizer": [[481, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.dequantize_cast_optimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16": [[482, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd": [[483, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout": [[484, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu": [[485, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random": [[486, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const": [[487, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction": [[488, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd": [[489, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer": [[490, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape": [[491, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm": [[492, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant": [[493, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add": [[494, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul": [[495, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math": [[496, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn": [[497, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in": [[498, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu": [[499, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm": [[500, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv": [[501, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[502, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose": [[503, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer": [[504, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass": [[505, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic": [[506, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node": [[507, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu": [[508, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize": [[509, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes": [[510, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm": [[511, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input": [[512, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes": [[513, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes": [[514, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer": [[515, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base": [[516, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter": [[517, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_fake_quant": [[518, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_fake_quant"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value": [[519, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value_without_calib": [[520, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value_without_calib"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[521, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_requantize": [[522, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_requantize"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[523, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize": [[524, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8": [[525, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.meta_op_optimizer": [[526, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.meta_op_optimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_hostconst_converter": [[527, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_hostconst_converter"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_quantized_op_cse": [[528, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_quantized_op_cse"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.rnn_convert": [[529, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.rnn_convert"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.scale_propagation": [[530, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq": [[531, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.insert_qdq_pattern": [[532, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.insert_qdq_pattern"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.merge_duplicated_qdq": [[533, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.share_qdq_y_pattern": [[534, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "neural_compressor.tensorflow.quantization.utils.graph_util": [[535, "module-neural_compressor.tensorflow.quantization.utils.graph_util"]], "neural_compressor.tensorflow.quantization.utils": [[536, "module-neural_compressor.tensorflow.quantization.utils"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph": [[537, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.fake_quantize": [[538, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat": [[539, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_config": [[540, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_config"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_helper": [[541, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_helper"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers": [[542, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.optimize_layer": [[543, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[544, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[545, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[546, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_wrapper": [[547, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_wrapper"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_bn": [[548, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_bn"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_concatv2": [[549, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_conv": [[550, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_conv"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_deconv": [[551, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_deconv"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_in": [[552, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_in"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_matmul": [[553, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_matmul"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_pooling": [[554, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq": [[555, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.optimize_qdq": [[556, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.optimize_qdq"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base": [[557, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_bn": [[558, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_bn"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_concatv2": [[559, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_concatv2"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_conv": [[560, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_conv"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_for_intel_cpu": [[561, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_for_intel_cpu"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_matmul": [[562, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_matmul"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_pooling": [[563, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_pooling"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph_common": [[564, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph_common"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.bias_correction": [[565, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.bias_correction"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.graph_transform_base": [[566, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.graph_transform_base"]], "neural_compressor.tensorflow.quantization.utils.transform_graph": [[567, "module-neural_compressor.tensorflow.quantization.utils.transform_graph"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.insert_logging": [[568, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.insert_logging"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.rerange_quantized_concat": [[569, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.rerange_quantized_concat"]], "neural_compressor.tensorflow.quantization.utils.utility": [[570, "module-neural_compressor.tensorflow.quantization.utils.utility"]], "neural_compressor.tensorflow.utils.constants": [[571, "module-neural_compressor.tensorflow.utils.constants"]], "neural_compressor.tensorflow.utils.data": [[572, "module-neural_compressor.tensorflow.utils.data"]], "neural_compressor.tensorflow.utils": [[573, "module-neural_compressor.tensorflow.utils"]], "neural_compressor.tensorflow.utils.model": [[574, "module-neural_compressor.tensorflow.utils.model"]], "neural_compressor.tensorflow.utils.model_wrappers": [[575, "module-neural_compressor.tensorflow.utils.model_wrappers"]], "neural_compressor.tensorflow.utils.nets_factory": [[576, "module-neural_compressor.tensorflow.utils.nets_factory"]], "neural_compressor.tensorflow.utils.utility": [[577, "module-neural_compressor.tensorflow.utils.utility"]], "neural_compressor.torch.algorithms.habana_fp8.fp8_quant": [[578, "module-neural_compressor.torch.algorithms.habana_fp8.fp8_quant"]], "neural_compressor.torch.algorithms.habana_fp8": [[579, "module-neural_compressor.torch.algorithms.habana_fp8"]], "neural_compressor.torch.algorithms.habana_fp8.modules": [[580, "module-neural_compressor.torch.algorithms.habana_fp8.modules"]], "neural_compressor.torch.algorithms.habana_fp8.observer": [[581, "module-neural_compressor.torch.algorithms.habana_fp8.observer"]], "neural_compressor.torch.algorithms.habana_fp8.save_load": [[582, "module-neural_compressor.torch.algorithms.habana_fp8.save_load"]], "neural_compressor.torch.algorithms.habana_fp8.scale": [[583, "module-neural_compressor.torch.algorithms.habana_fp8.scale"]], "neural_compressor.torch.algorithms.habana_fp8.tensor": [[584, "module-neural_compressor.torch.algorithms.habana_fp8.tensor"]], "neural_compressor.torch.algorithms": [[585, "module-neural_compressor.torch.algorithms"]], "neural_compressor.torch.algorithms.layer_wise": [[586, "module-neural_compressor.torch.algorithms.layer_wise"]], "neural_compressor.torch.algorithms.layer_wise.load": [[587, "module-neural_compressor.torch.algorithms.layer_wise.load"]], "neural_compressor.torch.algorithms.layer_wise.modified_pickle": [[588, "module-neural_compressor.torch.algorithms.layer_wise.modified_pickle"]], "neural_compressor.torch.algorithms.layer_wise.utils": [[589, "module-neural_compressor.torch.algorithms.layer_wise.utils"]], "neural_compressor.torch.algorithms.smooth_quant": [[590, "module-neural_compressor.torch.algorithms.smooth_quant"]], "neural_compressor.torch.algorithms.smooth_quant.save_load": [[591, "module-neural_compressor.torch.algorithms.smooth_quant.save_load"]], "neural_compressor.torch.algorithms.smooth_quant.smooth_quant": [[592, "module-neural_compressor.torch.algorithms.smooth_quant.smooth_quant"]], "neural_compressor.torch.algorithms.smooth_quant.utility": [[593, "module-neural_compressor.torch.algorithms.smooth_quant.utility"]], "neural_compressor.torch.algorithms.static_quant": [[594, "module-neural_compressor.torch.algorithms.static_quant"]], "neural_compressor.torch.algorithms.static_quant.save_load": [[595, "module-neural_compressor.torch.algorithms.static_quant.save_load"]], "neural_compressor.torch.algorithms.static_quant.static_quant": [[596, "module-neural_compressor.torch.algorithms.static_quant.static_quant"]], "neural_compressor.torch.algorithms.static_quant.utility": [[597, "module-neural_compressor.torch.algorithms.static_quant.utility"]], "neural_compressor.torch.algorithms.weight_only.autoround": [[598, "module-neural_compressor.torch.algorithms.weight_only.autoround"]], "neural_compressor.torch.algorithms.weight_only.awq": [[599, "module-neural_compressor.torch.algorithms.weight_only.awq"]], "neural_compressor.torch.algorithms.weight_only.gptq": [[600, "module-neural_compressor.torch.algorithms.weight_only.gptq"]], "neural_compressor.torch.algorithms.weight_only.hqq.bitpack": [[601, "module-neural_compressor.torch.algorithms.weight_only.hqq.bitpack"]], "neural_compressor.torch.algorithms.weight_only.hqq.config": [[602, "module-neural_compressor.torch.algorithms.weight_only.hqq.config"]], "neural_compressor.torch.algorithms.weight_only.hqq.core": [[603, "module-neural_compressor.torch.algorithms.weight_only.hqq.core"]], "neural_compressor.torch.algorithms.weight_only.hqq": [[604, "module-neural_compressor.torch.algorithms.weight_only.hqq"]], "neural_compressor.torch.algorithms.weight_only.hqq.optimizer": [[605, "module-neural_compressor.torch.algorithms.weight_only.hqq.optimizer"]], "neural_compressor.torch.algorithms.weight_only.hqq.qtensor": [[606, "module-neural_compressor.torch.algorithms.weight_only.hqq.qtensor"]], "neural_compressor.torch.algorithms.weight_only.hqq.quant_api": [[607, "module-neural_compressor.torch.algorithms.weight_only.hqq.quant_api"]], "neural_compressor.torch.algorithms.weight_only.hqq.quantizer": [[608, "module-neural_compressor.torch.algorithms.weight_only.hqq.quantizer"]], "neural_compressor.torch.algorithms.weight_only.hqq.utility": [[609, "module-neural_compressor.torch.algorithms.weight_only.hqq.utility"]], "neural_compressor.torch.algorithms.weight_only": [[610, "module-neural_compressor.torch.algorithms.weight_only"]], "neural_compressor.torch.algorithms.weight_only.modules": [[611, "module-neural_compressor.torch.algorithms.weight_only.modules"]], "neural_compressor.torch.algorithms.weight_only.rtn": [[612, "module-neural_compressor.torch.algorithms.weight_only.rtn"]], "neural_compressor.torch.algorithms.weight_only.teq": [[613, "module-neural_compressor.torch.algorithms.weight_only.teq"]], "neural_compressor.torch.algorithms.weight_only.utility": [[614, "module-neural_compressor.torch.algorithms.weight_only.utility"]], "neural_compressor.torch.amp.autocast": [[615, "module-neural_compressor.torch.amp.autocast"]], "neural_compressor.torch.amp.fp8.functions": [[616, "module-neural_compressor.torch.amp.fp8.functions"]], "neural_compressor.torch.amp.fp8": [[617, "module-neural_compressor.torch.amp.fp8"]], "neural_compressor.torch.amp": [[618, "module-neural_compressor.torch.amp"]], "neural_compressor.torch": [[619, "module-neural_compressor.torch"]], "neural_compressor.torch.quantization.algorithm_entry": [[620, "module-neural_compressor.torch.quantization.algorithm_entry"]], "neural_compressor.torch.quantization.autotune": [[621, "module-neural_compressor.torch.quantization.autotune"]], "neural_compressor.torch.quantization.config": [[622, "module-neural_compressor.torch.quantization.config"]], "neural_compressor.torch.quantization": [[623, "module-neural_compressor.torch.quantization"]], "neural_compressor.torch.quantization.load_entry": [[624, "module-neural_compressor.torch.quantization.load_entry"]], "neural_compressor.torch.quantization.quantize": [[625, "module-neural_compressor.torch.quantization.quantize"]], "neural_compressor.torch.utils.auto_accelerator": [[626, "module-neural_compressor.torch.utils.auto_accelerator"]], "neural_compressor.torch.utils.constants": [[627, "module-neural_compressor.torch.utils.constants"]], "neural_compressor.torch.utils.environ": [[628, "module-neural_compressor.torch.utils.environ"]], "neural_compressor.torch.utils": [[629, "module-neural_compressor.torch.utils"]], "neural_compressor.torch.utils.utility": [[630, "module-neural_compressor.torch.utils.utility"]], "neural_compressor.training": [[631, "module-neural_compressor.training"]], "neural_compressor.utils.collect_layer_histogram": [[632, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[633, "module-neural_compressor.utils.constant"]], "neural_compressor.utils.create_obj_from_config": [[634, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[635, "module-neural_compressor.utils"]], "neural_compressor.utils.kl_divergence": [[636, "module-neural_compressor.utils.kl_divergence"]], "neural_compressor.utils.load_huggingface": [[637, "module-neural_compressor.utils.load_huggingface"]], "neural_compressor.utils.logger": [[638, "module-neural_compressor.utils.logger"]], "neural_compressor.utils.neural_insights_utils": [[639, "module-neural_compressor.utils.neural_insights_utils"]], "neural_compressor.utils.options": [[640, "module-neural_compressor.utils.options"]], "neural_compressor.utils.pytorch": [[641, "module-neural_compressor.utils.pytorch"]], "neural_compressor.utils.utility": [[642, "module-neural_compressor.utils.utility"]], "neural_compressor.utils.weights_details": [[643, "module-neural_compressor.utils.weights_details"]], "neural_compressor.version": [[644, "module-neural_compressor.version"]], "Intel\u00ae Neural Compressor Documentation": [[645, "intel-neural-compressor-documentation"], [745, "intel-neural-compressor-documentation"]], "Sections": [[645, "sections"], [745, "sections"]], "Contributor Covenant Code of Conduct": [[646, "contributor-covenant-code-of-conduct"], [647, "contributor-covenant-code-of-conduct"]], "Our Pledge": [[646, "our-pledge"]], "Our Standards": [[646, "our-standards"]], "Our Responsibilities": [[646, "our-responsibilities"]], "Scope": [[646, "scope"]], "Enforcement": [[646, "enforcement"]], "Attribution": [[646, "attribution"]], "Contribution Guidelines": [[647, "contribution-guidelines"]], "Create Pull Request": [[647, "create-pull-request"]], "Step-by-Step guidelines": [[647, "step-by-step-guidelines"]], "Pull Request Checklist": [[647, "pull-request-checklist"]], "Pull Request Template": [[647, "pull-request-template"]], "Pull Request Acceptance Criteria": [[647, "pull-request-acceptance-criteria"]], "Pull Request Status Checks Overview": [[647, "pull-request-status-checks-overview"]], "Support": [[647, "support"]], "FX": [[648, "fx"]], "Introduction": [[648, "introduction"], [649, "introduction"], [652, "introduction"], [653, "introduction"], [654, "introduction"], [669, "introduction"], [670, "introduction"], [672, "introduction"], [673, "introduction"], [676, "introduction"], [677, "introduction"], [678, "introduction"], [680, "introduction"], [682, "introduction"], [685, "introduction"], [689, "introduction"], [691, "introduction"], [692, "introduction"], [713, "introduction"], [714, "introduction"], [715, "introduction"], [727, "introduction"], [728, "introduction"], [729, "introduction"], [731, "introduction"], [733, "introduction"], [735, "introduction"], [737, "introduction"], [738, "introduction"], [739, "introduction"], [740, "introduction"], [741, "introduction"], [743, "introduction"]], "FX Mode Support Matrix in Neural Compressor": [[648, "fx-mode-support-matrix-in-neural-compressor"]], "Get Started": [[648, "get-started"], [675, "get-started"], [717, "get-started"], [732, "get-started"]], "Post Training Static Quantization": [[648, "post-training-static-quantization"], [732, "post-training-static-quantization"]], "Post Training Dynamic Quantization": [[648, "post-training-dynamic-quantization"], [732, "post-training-dynamic-quantization"]], "Quantization-Aware Training": [[648, "quantization-aware-training"]], "Examples": [[648, "examples"], [649, "examples"], [669, "examples"], [672, "examples"], [673, "examples"], [676, "examples"], [677, "examples"], [678, "examples"], [679, "examples"], [680, "examples"], [690, "examples"], [691, "examples"], [692, "examples"], [728, "examples"], [729, "examples"], [732, "examples"], [733, "examples"], [735, "examples"], [739, "examples"]], "Note": [[648, "note"]], "Details": [[648, "details"]], "Common Problem": [[648, "common-problem"]], "Dynamic Quantization": [[648, "dynamic-quantization"]], "Static Quantization & Quantization Aware Training": [[648, "static-quantization-quantization-aware-training"]], "Neural Architecture Search": [[649, "neural-architecture-search"]], "Basic NAS": [[649, "basic-nas"]], "Dynamic NAS": [[649, "dynamic-nas"]], "NAS Support Matrix": [[649, "nas-support-matrix"]], "Get Started with NAS API": [[649, "get-started-with-nas-api"]], "Basic Usage": [[649, "basic-usage"]], "1. Python code + YAML": [[649, "python-code-yaml"]], "2. Python code only": [[649, "python-code-only"]], "Advanced Usage (Custom NAS)": [[649, "advanced-usage-custom-nas"]], "Security Policy": [[650, "security-policy"]], "Report a Vulnerability": [[650, "report-a-vulnerability"]], "Intel\u00ae Neural Compressor": [[651, "intel-neural-compressor"], [710, "intel-neural-compressor"]], "Installation": [[651, "installation"], [686, "installation"], [686, "id1"], [704, "installation"], [712, "installation"], [717, "installation"]], "Install from pypi": [[651, "install-from-pypi"], [712, "install-from-pypi"]], "Getting Started": [[651, "getting-started"], [683, "getting-started"], [712, "getting-started"]], "Weight-Only Quantization (LLMs)": [[651, "weight-only-quantization-llms"]], "Static Quantization (Non-LLMs)": [[651, "static-quantization-non-llms"]], "Documentation": [[651, "documentation"]], "Selected Publications/Events": [[651, "selected-publications-events"]], "Additional Content": [[651, "additional-content"]], "Communication": [[651, "communication"]], "Adaptor": [[652, "adaptor"], [655, "adaptor"]], "Adaptor Support Matrix": [[652, "adaptor-support-matrix"]], "Working Flow": [[652, "working-flow"], [732, "working-flow"]], "Get Started with Adaptor API": [[652, "get-started-with-adaptor-api"]], "Query API": [[652, "query-api"]], "Background": [[652, "background"], [671, "background"]], "Query API Introduction": [[652, "query-api-introduction"]], "Example of Adding a New Backend Support": [[652, "example-of-adding-a-new-backend-support"]], "Capability": [[652, "capability"]], "Implement ONNXRTAdaptor Class": [[652, "implement-onnxrtadaptor-class"]], "How to Add An Adaptor": [[653, "how-to-add-an-adaptor"]], "API List that Need to Implement": [[653, "api-list-that-need-to-implement"]], "Design the framework YAML": [[653, "design-the-framework-yaml"]], "Add query_fw_capability to Adaptor": [[653, "add-query-fw-capability-to-adaptor"]], "Add quantize API according to tune_cfg": [[653, "add-quantize-api-according-to-tune-cfg"]], "Prepare calibration model from fp32 graph": [[653, "prepare-calibration-model-from-fp32-graph"]], "Run sampling iterations of the fp32 graph to calibrate quantizable operators.": [[653, "run-sampling-iterations-of-the-fp32-graph-to-calibrate-quantizable-operators"]], "Calculate the data range and generate quantized model": [[653, "calculate-the-data-range-and-generate-quantized-model"]], "How to Support New Data Type, Like Int4, with a Few Line Changes": [[654, "how-to-support-new-data-type-like-int4-with-a-few-line-changes"]], "Define the Quantization Ability of the Specific Operator": [[654, "define-the-quantization-ability-of-the-specific-operator"]], "Invoke the Operator Kernel According to the Tuning Configuration": [[654, "invoke-the-operator-kernel-according-to-the-tuning-configuration"]], "Use the New Data Type": [[654, "use-the-new-data-type"]], "Summary": [[654, "summary"]], "ONNX Runtime": [[656, "onnx-runtime"]], "Torch Utils": [[657, "torch-utils"]], "API Document Example": [[658, "api-document-example"]], "APIs": [[659, "apis"]], "Benchmark": [[660, "benchmark"], [690, "benchmark"], [731, "benchmark"]], "Compression": [[661, "compression"]], "Config": [[662, "config"]], "Mix Precision": [[663, "mix-precision"], [690, "mix-precision"]], "Model": [[664, "model"], [692, "model"], [713, "model"], [715, "model"]], "Objective": [[665, "objective"], [723, "objective"], [724, "objective"], [725, "objective"], [727, "objective"]], "Quantization": [[666, "quantization"], [731, "quantization"], [732, "quantization"]], "Strategy": [[667, "strategy"]], "Training": [[668, "training"]], "Benchmarking": [[669, "benchmarking"]], "Benchmark Support Matrix": [[669, "benchmark-support-matrix"]], "Get Started with Benchmark API": [[669, "get-started-with-benchmark-api"]], "Calibration Algorithms in Quantization": [[670, "calibration-algorithms-in-quantization"]], "Calibration Algorithms": [[670, "calibration-algorithms"]], "Support Matrix": [[670, "support-matrix"], [695, "support-matrix"]], "Reference": [[670, "reference"], [671, "reference"], [729, "reference"], [732, "reference"], [735, "reference"], [738, "reference"]], "INC Coding Conventions": [[671, "inc-coding-conventions"]], "Rules": [[671, "rules"]], "Imports": [[671, "imports"]], "Strings": [[671, "strings"]], "Logger": [[671, "logger"]], "Type Annotations": [[671, "type-annotations"]], "Comments": [[671, "comments"]], "TODO Comments": [[671, "todo-comments"]], "Public and Internal Interfaces": [[671, "public-and-internal-interfaces"]], "Folder structure": [[671, "folder-structure"]], "Recommend VS Code settings.json": [[671, "recommend-vs-code-settings-json"]], "DataLoader": [[672, "dataloader"]], "Supported Framework Dataloader Matrix": [[672, "supported-framework-dataloader-matrix"]], "Get Started with DataLoader": [[672, "get-started-with-dataloader"]], "Use Intel\u00ae Neural Compressor DataLoader API": [[672, "use-intel-neural-compressor-dataloader-api"]], "Build Custom Dataloader with Python API": [[672, "build-custom-dataloader-with-python-api"]], "Dataset": [[673, "dataset"]], "Supported Framework Dataset Matrix": [[673, "supported-framework-dataset-matrix"]], "TensorFlow": [[673, "tensorflow"], [689, "tensorflow"], [740, "tensorflow"]], "PyTorch": [[673, "pytorch"], [689, "pytorch"], [734, "pytorch"]], "MXNet": [[673, "mxnet"], [689, "mxnet"], [740, "mxnet"]], "ONNXRT": [[673, "onnxrt"], [689, "onnxrt"], [740, "onnxrt"]], "Get start with Dataset API": [[673, "get-start-with-dataset-api"]], "Config dataloader in a yaml file": [[673, "config-dataloader-in-a-yaml-file"]], "User-specific dataset": [[673, "user-specific-dataset"]], "Design": [[674, "design"], [741, "design"], [741, "id1"], [741, "id3"], [741, "id5"], [741, "id7"], [741, "id9"], [741, "id11"], [741, "id13"], [741, "id15"], [741, "id17"], [741, "id19"], [741, "id21"]], "Architecture": [[674, "architecture"], [685, "architecture"]], "Workflow": [[674, "workflow"]], "Diagnosis": [[675, "diagnosis"]], "Diagnosis Introduction": [[675, "diagnosis-introduction"]], "Supported Feature Matrix": [[675, "supported-feature-matrix"], [678, "supported-feature-matrix"], [682, "supported-feature-matrix"], [685, "supported-feature-matrix"], [731, "supported-feature-matrix"], [732, "supported-feature-matrix"], [739, "supported-feature-matrix"], [743, "supported-feature-matrix"]], "Install Intel\u00ae Neural Compressor": [[675, "install-intel-neural-compressor"]], "Modify script": [[675, "modify-script"]], "Quantization diagnosis": [[675, "quantization-diagnosis"]], "Benchmark diagnosis": [[675, "benchmark-diagnosis"]], "Example": [[675, "example"], [689, "example"], [695, "example"], [699, "example"], [727, "example"]], "Prepare dataset": [[675, "prepare-dataset"]], "Run quantization script": [[675, "run-quantization-script"]], "Run benchmark script": [[675, "run-benchmark-script"]], "See quantization data": [[675, "see-quantization-data"]], "How to do diagnosis": [[675, "how-to-do-diagnosis"]], "Parameter description": [[675, "parameter-description"]], "Diagnosis suggestions": [[675, "diagnosis-suggestions"]], "Fallback setting example": [[675, "fallback-setting-example"]], "See profiling data": [[675, "see-profiling-data"]], "Distillation": [[676, "distillation"], [690, "distillation"], [731, "distillation"]], "Knowledge Distillation": [[676, "knowledge-distillation"]], "Intermediate Layer Knowledge Distillation": [[676, "intermediate-layer-knowledge-distillation"]], "Self Distillation": [[676, "self-distillation"]], "Distillation Support Matrix": [[676, "distillation-support-matrix"]], "Get Started with Distillation API": [[676, "get-started-with-distillation-api"]], "Distillation for Quantization": [[677, "distillation-for-quantization"]], "Distillation for Quantization Support Matrix": [[677, "distillation-for-quantization-support-matrix"]], "Get Started with Distillation for Quantization API": [[677, "get-started-with-distillation-for-quantization-api"]], "Distributed Training and Inference (Evaluation)": [[678, "distributed-training-and-inference-evaluation"]], "Get Started with Distributed Training and Inference API": [[678, "get-started-with-distributed-training-and-inference-api"]], "Option 1: Pure Yaml Configuration": [[678, "option-1-pure-yaml-configuration"]], "Option 2: User Defined Training Function": [[678, "option-2-user-defined-training-function"]], "Horovodrun Execution": [[678, "horovodrun-execution"]], "Security": [[678, "security"]], "PyTorch Examples:": [[678, "pytorch-examples"]], "TensorFlow Examples:": [[678, "tensorflow-examples"]], "Example List": [[679, "example-list"]], "Release Data": [[679, "release-data"]], "Export": [[680, "export"]], "Supported Framework Model Matrix": [[680, "supported-framework-model-matrix"], [692, "supported-framework-model-matrix"], [733, "supported-framework-model-matrix"], [735, "supported-framework-model-matrix"]], "PyTorch Model": [[680, "pytorch-model"]], "FP32 Model Export": [[680, "fp32-model-export"], [680, "id1"]], "INT8 Model Export": [[680, "int8-model-export"], [680, "id2"]], "Tensorflow Model": [[680, "tensorflow-model"]], "Appendix": [[680, "appendix"]], "Supported quantized ops": [[680, "supported-quantized-ops"]], "Frequently Asked Questions": [[681, "frequently-asked-questions"]], "Common Build Issues": [[681, "common-build-issues"]], "Issue 1:": [[681, "issue-1"]], "Issue 2:": [[681, "issue-2"]], "Issue 3:": [[681, "issue-3"]], "Issue 4:": [[681, "issue-4"]], "Framework YAML Configuration Files": [[682, "framework-yaml-configuration-files"]], "Get started with Framework YAML Files": [[682, "get-started-with-framework-yaml-files"]], "Quick Samples": [[683, "quick-samples"]], "Quantization with Python API": [[683, "quantization-with-python-api"], [712, "quantization-with-python-api"]], "Validated Models": [[683, "validated-models"], [738, "validated-models"], [744, "validated-models"]], "Incompatible changes between v1.2 and v1.1": [[684, "incompatible-changes-between-v1-2-and-v1-1"]], "User-facing APIs": [[684, "user-facing-apis"]], "Built-in transform/dataset/metric APIs": [[684, "built-in-transform-dataset-metric-apis"]], "Infrastructure of Intel\u00ae Neural Compressor": [[685, "infrastructure-of-intel-neural-compressor"]], "Prerequisites": [[686, "prerequisites"], [717, "prerequisites"], [718, "prerequisites"]], "Install from Binary": [[686, "install-from-binary"]], "Install from Source": [[686, "install-from-source"], [712, "install-from-source"]], "Install from AI Kit": [[686, "install-from-ai-kit"]], "System Requirements": [[686, "system-requirements"]], "Validated Hardware Environment": [[686, "validated-hardware-environment"]], "Intel\u00ae Neural Compressor supports CPUs based on Intel 64 architecture or compatible processors:": [[686, "intel-neural-compressor-supports-cpus-based-on-intel-64-architecture-or-compatible-processors"]], "Intel\u00ae Neural Compressor supports GPUs built on Intel\u2019s Xe architecture:": [[686, "intel-neural-compressor-supports-gpus-built-on-intel-s-xe-architecture"]], "Intel\u00ae Neural Compressor quantized ONNX models support multiple hardware vendors through ONNX Runtime:": [[686, "intel-neural-compressor-quantized-onnx-models-support-multiple-hardware-vendors-through-onnx-runtime"]], "Validated Software Environment": [[686, "validated-software-environment"]], "Legal Information": [[687, "legal-information"]], "License": [[687, "license"]], "Citation": [[687, "citation"]], "Trademarks": [[687, "trademarks"]], "LLMs Quantization Recipes": [[688, "llms-quantization-recipes"]], "IPEX key models": [[688, "ipex-key-models"]], "Metrics": [[689, "metrics"]], "Supported Built-in Metric Matrix": [[689, "supported-built-in-metric-matrix"]], "Get Started with Metric": [[689, "get-started-with-metric"]], "Use Intel\u00ae Neural Compressor Metric API": [[689, "use-intel-neural-compressor-metric-api"]], "Build Custom Metric with Python API": [[689, "build-custom-metric-with-python-api"]], "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X": [[690, "code-migration-from-intel-neural-compressor-1-x-to-intel-neural-compressor-2-x"]], "Model Quantization": [[690, "model-quantization"]], "Post-training Quantization": [[690, "post-training-quantization"]], "Quantization Aware Training": [[690, "quantization-aware-training"], [732, "quantization-aware-training"], [732, "id1"]], "Pruning": [[690, "pruning"], [729, "pruning"], [731, "pruning"]], "Orchestration": [[690, "orchestration"]], "Mixed Precision": [[691, "mixed-precision"]], "Mixed Precision Support Matrix": [[691, "mixed-precision-support-matrix"]], "Hardware and Software requests for BF16": [[691, "hardware-and-software-requests-for-bf16"]], "Hardware and Software requests for FP16": [[691, "hardware-and-software-requests-for-fp16"]], "During quantization mixed precision": [[691, "during-quantization-mixed-precision"]], "Accuracy-driven mixed precision": [[691, "accuracy-driven-mixed-precision"]], "Get Started with Mixed Precision API": [[691, "get-started-with-mixed-precision-api"]], "Neural Coder": [[693, "neural-coder"], [710, "neural-coder"], [710, "id1"]], "What do we offer?": [[693, "what-do-we-offer"]], "Getting Started!": [[693, "getting-started"], [704, "getting-started"]], "Jupyter Lab Extension": [[693, "jupyter-lab-extension"]], "Python Launcher": [[693, "python-launcher"], [698, "python-launcher"]], "Python API": [[693, "python-api"]], "Contact": [[693, "contact"], [717, "contact"]], "AWS Amazon SageMaker Support": [[694, "aws-amazon-sagemaker-support"]], "Start Jupyter Lab 3": [[694, "start-jupyter-lab-3"]], "For SageMaker Studio": [[694, "for-sagemaker-studio"]], "For SageMaker Notebook instance": [[694, "for-sagemaker-notebook-instance"]], "Installation Guide": [[694, "installation-guide"]], "BigDL Nano Support": [[695, "bigdl-nano-support"]], "Intel CPU Platforms: Best Performance Setting": [[696, "intel-cpu-platforms-best-performance-setting"]], "Install MKL, OpenMP and JEMALLOC": [[696, "install-mkl-openmp-and-jemalloc"]], "Install NUMA Controller": [[696, "install-numa-controller"]], "Environment Variables": [[696, "environment-variables"]], "Frequency Governers": [[696, "frequency-governers"]], "Neural Coder as Python API": [[697, "neural-coder-as-python-api"]], "Enable": [[697, "enable"]], "Bench": [[697, "bench"]], "SuperBench": [[697, "superbench"]], "Quick-Start": [[698, "quick-start"]], "Launcher Arguments (Optional)": [[698, "launcher-arguments-optional"]], "Neural Coder for Quantization": [[699, "neural-coder-for-quantization"]], "Features Supported": [[699, "features-supported"]], "Models Supported": [[699, "models-supported"]], "Usage": [[699, "usage"], [719, "usage"], [719, "id2"], [719, "id6"], [719, "id9"], [719, "id16"], [719, "id19"], [719, "id22"], [719, "id25"], [738, "usage"], [739, "usage"], [739, "id1"], [741, "usage"], [741, "id2"], [741, "id4"], [741, "id6"], [741, "id8"], [741, "id10"], [741, "id12"], [741, "id14"], [741, "id16"], [741, "id18"], [741, "id20"], [741, "id22"]], "PyPI distribution:": [[699, "pypi-distribution"]], "Supported Optimization Features": [[700, "supported-optimization-features"]], "v0.4": [[701, "v0-4"]], "Highlights": [[701, "highlights"]], "Others": [[701, "others"]], "Changelog": [[702, "changelog"], [706, "changelog"]], "neural_compressor_ext_lab": [[703, "neural-compressor-ext-lab"]], "Requirements": [[703, "requirements"], [707, "requirements"], [713, "requirements"], [714, "requirements"], [715, "requirements"], [723, "requirements"]], "Install": [[703, "install"]], "Uninstall": [[703, "uninstall"]], "Contributing": [[703, "contributing"], [707, "contributing"]], "Development install": [[703, "development-install"], [707, "development-install"]], "Development uninstall": [[703, "development-uninstall"], [707, "development-uninstall"]], "Packaging the extension": [[703, "packaging-the-extension"], [707, "packaging-the-extension"]], "Intel\u00ae Neural Compressor as JupyterLab Extension": [[704, "intel-neural-compressor-as-jupyterlab-extension"]], "Auto-enable a feature": [[704, "auto-enable-a-feature"]], "Or let us help you auto-select the best feature": [[704, "or-let-us-help-you-auto-select-the-best-feature"]], "Pre-requisites": [[704, "pre-requisites"]], "Making a new release of neural_compressor_ext_lab": [[705, "making-a-new-release-of-neural-compressor-ext-lab"]], "Manual release": [[705, "manual-release"], [708, "manual-release"]], "Python package": [[705, "python-package"], [708, "python-package"]], "NPM package": [[705, "npm-package"], [708, "npm-package"]], "Automated releases with the Jupyter Releaser": [[705, "automated-releases-with-the-jupyter-releaser"], [708, "automated-releases-with-the-jupyter-releaser"]], "Publishing to conda-forge": [[705, "publishing-to-conda-forge"], [708, "publishing-to-conda-forge"]], "neural_compressor_ext_lab_alibaba": [[707, "neural-compressor-ext-lab-alibaba"]], "Making a new release of neural_compressor_ext_lab_alibaba": [[708, "making-a-new-release-of-neural-compressor-ext-lab-alibaba"]], "Change Log": [[709, "change-log"]], "[Unreleased]": [[709, "unreleased"]], "Background Introduction": [[710, "background-introduction"]], "Neural Coder Extension in VSCode": [[710, "neural-coder-extension-in-vscode"]], "Neural Coder Extension Usage": [[710, "neural-coder-extension-usage"]], "1. Open": [[710, "open"]], "2. Search": [[710, "search"]], "3. Setting": [[710, "setting"]], "4. Icon": [[710, "icon"]], "5. optimization (quantization)": [[710, "optimization-quantization"]], "5.1 Enable": [[710, "enable"]], "5.2 Auto": [[710, "auto"]], "Welcome to your VS Code Extension": [[711, "welcome-to-your-vs-code-extension"]], "What\u2019s in the folder": [[711, "what-s-in-the-folder"]], "Setup": [[711, "setup"]], "Get up and running straight away": [[711, "get-up-and-running-straight-away"]], "Make changes": [[711, "make-changes"]], "Explore the API": [[711, "explore-the-api"]], "Run tests": [[711, "run-tests"]], "Go further": [[711, "go-further"]], "Neural Insights": [[712, "neural-insights"]], "Start the Neural Insights": [[712, "start-the-neural-insights"]], "Tensor dump examples": [[712, "tensor-dump-examples"]], "Step by Step Diagnosis Example": [[712, "step-by-step-diagnosis-example"]], "Research Collaborations": [[712, "research-collaborations"]], "Step by step example how to debug accuracy with Neural Insights": [[713, "step-by-step-example-how-to-debug-accuracy-with-neural-insights"], [715, "step-by-step-example-how-to-debug-accuracy-with-neural-insights"]], "Preparation": [[713, "preparation"], [714, "preparation"], [715, "preparation"], [737, "preparation"]], "Running the quantization": [[713, "running-the-quantization"], [714, "running-the-quantization"], [715, "running-the-quantization"]], "Analyzing the result of quantization": [[713, "analyzing-the-result-of-quantization"], [715, "analyzing-the-result-of-quantization"]], "Weights summary": [[713, "weights-summary"]], "Activations summary": [[713, "activations-summary"]], "Step by step example how to dump weights data for PyTorch model with Neural Insights": [[714, "step-by-step-example-how-to-dump-weights-data-for-pytorch-model-with-neural-insights"]], "Source": [[714, "source"], [715, "source"]], "Prepare the dataset": [[715, "prepare-the-dataset"]], "Analyzing weight histograms": [[715, "analyzing-weight-histograms"]], "Open Neural Insights": [[715, "open-neural-insights"]], "Getting Started with Create React App": [[716, "getting-started-with-create-react-app"]], "Available Scripts": [[716, "available-scripts"]], "npm start": [[716, "npm-start"]], "npm test": [[716, "npm-test"]], "npm run build": [[716, "npm-run-build"]], "npm run eject": [[716, "npm-run-eject"]], "Learn More": [[716, "learn-more"], [717, "learn-more"]], "Code Splitting": [[716, "code-splitting"]], "Analyzing the Bundle Size": [[716, "analyzing-the-bundle-size"]], "Making a Progressive Web App": [[716, "making-a-progressive-web-app"]], "Advanced Configuration": [[716, "advanced-configuration"]], "Deployment": [[716, "deployment"]], "npm run build fails to minify": [[716, "npm-run-build-fails-to-minify"]], "What\u2019s Neural Solution?": [[717, "what-s-neural-solution"]], "Why Neural Solution?": [[717, "why-neural-solution"]], "How does Neural Solution Work?": [[717, "how-does-neural-solution-work"]], "Method 1. Using pip:": [[717, "method-1-using-pip"]], "Method 2. Building from source:": [[717, "method-2-building-from-source"]], "End-to-end examples": [[717, "end-to-end-examples"]], "Get started": [[718, "get-started"]], "Install Neural Solution": [[718, "install-neural-solution"]], "Method 1. Using pip": [[718, "method-1-using-pip"]], "Method 2. Building from source": [[718, "method-2-building-from-source"]], "Start service": [[718, "start-service"]], "Submit task": [[718, "submit-task"]], "Query task status": [[718, "query-task-status"]], "Stop service": [[718, "stop-service"]], "Inspect logs": [[718, "inspect-logs"]], "Manage resource": [[718, "manage-resource"], [723, "manage-resource"], [724, "manage-resource"]], "Node States": [[718, "node-states"]], "Query cluster": [[718, "query-cluster"]], "Add node": [[718, "add-node"]], "Remove node": [[718, "remove-node"]], "Neural Solution API": [[719, "neural-solution-api"]], "Base URL": [[719, "base-url"]], "Endpoints": [[719, "endpoints"]], "GET /": [[719, "get"]], "Description": [[719, "description"], [719, "id1"], [719, "id4"], [719, "id8"], [719, "id12"], [719, "id15"], [719, "id18"], [719, "id21"], [719, "id24"]], "Responses": [[719, "responses"], [719, "id3"], [719, "id7"], [719, "id11"], [719, "id14"], [719, "id17"], [719, "id20"], [719, "id23"], [719, "id26"]], "POST /task/submit": [[719, "post-task-submit"]], "Parameters": [[719, "parameters"], [719, "id5"], [719, "id10"], [719, "id13"]], "GET /task/status/{task_id}": [[719, "get-task-status-task-id"]], "GET /task/log/{task_id}": [[719, "get-task-log-task-id"]], "WebSocket /task/screen/{task_id}": [[719, "websocket-task-screen-task-id"]], "GET /ping": [[719, "get-ping"]], "GET /cluster": [[719, "get-cluster"]], "GET /download/{task_id}": [[719, "get-download-task-id"]], "GET /description": [[719, "get-description"]], "Design Doc for Optimization as a Service [WIP]": [[720, "design-doc-for-optimization-as-a-service-wip"]], "Contents": [[720, "contents"]], "Overview": [[720, "overview"], [742, "overview"]], "Workflow of OaaS": [[720, "workflow-of-oaas"]], "Class definition diagram": [[720, "class-definition-diagram"]], "Extensibility": [[720, "extensibility"]], "Task request description": [[721, "task-request-description"]], "Examples List": [[722, "examples-list"]], "An end-to-end example: quantize a custom model with Neural Solution": [[723, "an-end-to-end-example-quantize-a-custom-model-with-neural-solution"]], "Start the Neural Solution Service": [[723, "start-the-neural-solution-service"], [724, "start-the-neural-solution-service"], [725, "start-the-neural-solution-service"]], "Submit optimization task": [[723, "submit-optimization-task"], [724, "submit-optimization-task"], [725, "submit-optimization-task"]], "Query optimization result": [[723, "query-optimization-result"], [724, "query-optimization-result"], [725, "query-optimization-result"]], "Download optimized model": [[723, "download-optimized-model"], [724, "download-optimized-model"]], "Stop the service": [[723, "stop-the-service"], [724, "stop-the-service"], [725, "stop-the-service"]], "An end-to-end example: quantize a Hugging Face model with Neural Solution": [[724, "an-end-to-end-example-quantize-a-hugging-face-model-with-neural-solution"]], "An end-to-end example: quantize a Hugging Face model with Neural Solution gRPC API": [[725, "an-end-to-end-example-quantize-a-hugging-face-model-with-neural-solution-grpc-api"]], "Client": [[726, "client"]], "Single Objective": [[727, "single-objective"]], "Multiple Objectives": [[727, "multiple-objectives"]], "Objective Support Matrix": [[727, "objective-support-matrix"]], "Get Started with Objective API": [[727, "get-started-with-objective-api"]], "Config Single Objective": [[727, "config-single-objective"]], "Config Multiple Objectives": [[727, "config-multiple-objectives"]], "Optimization Orchestration": [[728, "optimization-orchestration"]], "One-shot": [[728, "one-shot"]], "Orchestration Support Matrix": [[728, "orchestration-support-matrix"]], "Get Started with Orchestration API": [[728, "get-started-with-orchestration-api"]], "Neural Network Pruning": [[729, "neural-network-pruning"]], "Pruning Patterns": [[729, "pruning-patterns"]], "Pruning Criteria": [[729, "pruning-criteria"]], "Pruning Types": [[729, "pruning-types"]], "Pruning Schedules": [[729, "pruning-schedules"]], "Pruning Scope": [[729, "pruning-scope"]], "Sparsity Decay Types": [[729, "sparsity-decay-types"]], "Regularization": [[729, "regularization"]], "Large Language Model Pruning": [[729, "large-language-model-pruning"]], "Pruning Support Matrix": [[729, "pruning-support-matrix"]], "Get Started with Pruning API": [[729, "get-started-with-pruning-api"]], "Training-aware pruning API": [[729, "training-aware-pruning-api"]], "Retrain-free Pruning API": [[729, "retrain-free-pruning-api"]], "Sparse Model Deployment": [[729, "sparse-model-deployment"]], "Pruning with Hyperparameter Optimization": [[729, "pruning-with-hyperparameter-optimization"]], "Full Publications/Events (79)": [[730, "full-publications-events-79"]], "2023 (25)": [[730, "id1"]], "2022 (35)": [[730, "id2"]], "2021 (15)": [[730, "id3"]], "2018 - 2020 (4)": [[730, "id4"]], "Pythonic Style Access for Configurations": [[731, "pythonic-style-access-for-configurations"]], "Pythonic API for User Configurations": [[731, "pythonic-api-for-user-configurations"], [731, "id1"]], "Pythonic API for Framework Configurations": [[731, "pythonic-api-for-framework-configurations"], [731, "id2"]], "Get Started with Pythonic API for Configurations": [[731, "get-started-with-pythonic-api-for-configurations"]], "NAS": [[731, "nas"]], "Quantization Introduction": [[732, "quantization-introduction"]], "Quantization Fundamentals": [[732, "quantization-fundamentals"], [738, "quantization-fundamentals"]], "Quantization Support Matrix": [[732, "quantization-support-matrix"]], "Quantization Scheme in TensorFlow": [[732, "quantization-scheme-in-tensorflow"]], "Quantization Scheme in PyTorch": [[732, "quantization-scheme-in-pytorch"]], "Quantization Scheme in IPEX": [[732, "quantization-scheme-in-ipex"]], "Quantization Scheme in MXNet": [[732, "quantization-scheme-in-mxnet"]], "Quantization Scheme in ONNX Runtime": [[732, "quantization-scheme-in-onnx-runtime"]], "Quantization Approaches": [[732, "quantization-approaches"]], "With or Without Accuracy Aware Tuning": [[732, "with-or-without-accuracy-aware-tuning"]], "Post Training Quantization": [[732, "post-training-quantization"]], "Specify Quantization Rules": [[732, "specify-quantization-rules"]], "Specify Quantization Recipes": [[732, "specify-quantization-recipes"]], "Specify Quantization Backend and Device": [[732, "specify-quantization-backend-and-device"]], "Layer Wise Quantization (LWQ)": [[733, "layer-wise-quantization-lwq"]], "PyTorch framework example": [[733, "pytorch-framework-example"]], "ONNX Runtime framework example": [[733, "onnx-runtime-framework-example"]], "Turn OFF Auto Mixed Precision during Quantization": [[734, "turn-off-auto-mixed-precision-during-quantization"]], "Tensorflow": [[734, "tensorflow"]], "Weight Only Quantization (WOQ)": [[735, "weight-only-quantization-woq"]], "Quantization Capability": [[735, "quantization-capability"]], "Export Compressed Model": [[735, "export-compressed-model"]], "User Code Example": [[735, "user-code-example"]], "WOQ Algorithms Tuning": [[735, "woq-algorithms-tuning"]], "User code example": [[735, "id1"]], "Release": [[736, "release"]], "Release Notes": [[736, "release-notes"]], "Known Issues": [[736, "known-issues"]], "Incompatible Changes": [[736, "incompatible-changes"]], "SigOpt Strategy": [[737, "sigopt-strategy"]], "SigOpt Platform": [[737, "sigopt-platform"]], "Neural Compressor Configuration": [[737, "neural-compressor-configuration"]], "Performance": [[737, "performance"]], "Benefit of SigOpt Strategy": [[737, "benefit-of-sigopt-strategy"]], "Performance Comparison of Different Strategies": [[737, "performance-comparison-of-different-strategies"]], "Smooth Quant": [[738, "smooth-quant"]], "Per-tensor & Per-channel": [[738, "per-tensor-per-channel"]], "Per-tensor example": [[738, "per-tensor-example"]], "Per-channel example": [[738, "per-channel-example"]], "Matmul quantization example": [[738, "matmul-quantization-example"]], "Per-channel limitation": [[738, "per-channel-limitation"]], "SmoothQuant and Our Enhancement": [[738, "smoothquant-and-our-enhancement"]], "SmoothQuant": [[738, "smoothquant"]], "Our enhancement:": [[738, "our-enhancement"]], "Algorithm: Auto-tuning of $\\alpha$.": [[738, "algorithm-auto-tuning-of-alpha"]], "Engineering": [[738, "engineering"]], "Using a fixed alpha": [[738, "using-a-fixed-alpha"]], "Determining the alpha through auto-tuning": [[738, "determining-the-alpha-through-auto-tuning"]], "Auto-tune the alpha for the entire model": [[738, "auto-tune-the-alpha-for-the-entire-model"]], "Auto-tune the alpha for each layer/block": [[738, "auto-tune-the-alpha-for-each-layer-block"]], "Supported Framework Matrix": [[738, "supported-framework-matrix"]], "TensorBoard": [[739, "tensorboard"]], "Get Started with TensorBoard": [[739, "get-started-with-tensorboard"]], "PyTorch TensorBoard": [[739, "pytorch-tensorboard"]], "TensorFlow Tensorboard": [[739, "tensorflow-tensorboard"]], "PyTorch Examples": [[739, "pytorch-examples"]], "TensorFlow Examples": [[739, "tensorflow-examples"]], "Transform": [[740, "transform"]], "Transform Support List": [[740, "transform-support-list"]], "Pytorch": [[740, "pytorch"]], "Tuning Strategies": [[741, "tuning-strategies"]], "Strategy Design": [[741, "strategy-design"]], "Tuning Space": [[741, "tuning-space"]], "Exit Policy": [[741, "exit-policy"]], "Accuracy Criteria": [[741, "accuracy-criteria"]], "Tuning Process": [[741, "tuning-process"]], "Tuning Algorithms": [[741, "tuning-algorithms"]], "Auto": [[741, "auto"]], "Conservative Tuning": [[741, "conservative-tuning"]], "Basic": [[741, "basic"]], "MSE": [[741, "mse"]], "MSE_V2": [[741, "mse-v2"]], "HAWQ_V2": [[741, "hawq-v2"]], "Bayesian": [[741, "bayesian"]], "Exhaustive": [[741, "exhaustive"]], "Random": [[741, "random"]], "SigOpt": [[741, "sigopt"]], "TPE": [[741, "tpe"]], "Distributed Tuning": [[741, "distributed-tuning"]], "Customize a New Tuning Strategy": [[741, "customize-a-new-tuning-strategy"]], "User Guide": [[742, "user-guide"]], "Python-based APIs": [[742, "python-based-apis"]], "Neural Coder (Zero-code Optimization)": [[742, "neural-coder-zero-code-optimization"]], "Advanced Topics": [[742, "advanced-topics"]], "Innovations for Productivity": [[742, "innovations-for-productivity"]], "User YAML Configuration Files": [[743, "user-yaml-configuration-files"]], "Get started with User YAML Files": [[743, "get-started-with-user-yaml-files"]], "Validated Quantization Examples": [[744, "validated-quantization-examples"]], "TensorFlow Models with Intel TensorFlow 2.13.0": [[744, "tensorflow-models-with-intel-tensorflow-2-13-0"]], "PyTorch Models with Torch 2.0.1+cpu in PTQ Mode": [[744, "pytorch-models-with-torch-2-0-1-cpu-in-ptq-mode"]], "PyTorch Models with Torch 2.0.1+cpu in QAT Mode": [[744, "pytorch-models-with-torch-2-0-1-cpu-in-qat-mode"]], "PyTorch Models with Intel\u00ae Extension for PyTorch* 2.0.1+cpu": [[744, "pytorch-models-with-intel-extension-for-pytorch-2-0-1-cpu"]], "PyTorch Models with Torch 2.0.1+cpu in WOQ Mode": [[744, "pytorch-models-with-torch-2-0-1-cpu-in-woq-mode"]], "ONNX Models with ONNX Runtime 1.15.1": [[744, "onnx-models-with-onnx-runtime-1-15-1"]], "ONNX Models with ONNX Runtime 1.15.0 in WOQ Mode": [[744, "onnx-models-with-onnx-runtime-1-15-0-in-woq-mode"]], "Validated Pruning Examples": [[744, "validated-pruning-examples"]], "Validated Knowledge Distillation Examples": [[744, "validated-knowledge-distillation-examples"]], "Validated ONNX QDQ INT8 Models on Multiple Hardware through ONNX Runtime": [[744, "validated-onnx-qdq-int8-models-on-multiple-hardware-through-onnx-runtime"]]}, "indexentries": {"block_mask": [[0, "module-block_mask"]], "module": [[0, "module-block_mask"], [1, "module-neural_compressor.adaptor.adaptor"], [2, "module-neural_compressor.adaptor"], [3, "module-neural_compressor.adaptor.keras"], [4, "module-neural_compressor.adaptor.keras_utils.conv2d"], [5, "module-neural_compressor.adaptor.keras_utils.dense"], [6, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"], [7, "module-neural_compressor.adaptor.keras_utils"], [8, "module-neural_compressor.adaptor.keras_utils.pool2d"], [9, "module-neural_compressor.adaptor.keras_utils.quantizer"], [10, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"], [11, "module-neural_compressor.adaptor.mxnet"], [12, "module-neural_compressor.adaptor.mxnet_utils"], [13, "module-neural_compressor.adaptor.mxnet_utils.util"], [14, "module-neural_compressor.adaptor.onnxrt"], [15, "module-neural_compressor.adaptor.ox_utils.calibration"], [16, "module-neural_compressor.adaptor.ox_utils.calibrator"], [17, "module-neural_compressor.adaptor.ox_utils"], [18, "module-neural_compressor.adaptor.ox_utils.operators.activation"], [19, "module-neural_compressor.adaptor.ox_utils.operators.argmax"], [20, "module-neural_compressor.adaptor.ox_utils.operators.attention"], [21, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"], [22, "module-neural_compressor.adaptor.ox_utils.operators.concat"], [23, "module-neural_compressor.adaptor.ox_utils.operators.conv"], [24, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"], [25, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"], [26, "module-neural_compressor.adaptor.ox_utils.operators.gather"], [27, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"], [28, "module-neural_compressor.adaptor.ox_utils.operators.gemm"], [29, "module-neural_compressor.adaptor.ox_utils.operators"], [30, "module-neural_compressor.adaptor.ox_utils.operators.lstm"], [31, "module-neural_compressor.adaptor.ox_utils.operators.matmul"], [32, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"], [33, "module-neural_compressor.adaptor.ox_utils.operators.norm"], [34, "module-neural_compressor.adaptor.ox_utils.operators.ops"], [35, "module-neural_compressor.adaptor.ox_utils.operators.pad"], [36, "module-neural_compressor.adaptor.ox_utils.operators.pooling"], [37, "module-neural_compressor.adaptor.ox_utils.operators.reduce"], [38, "module-neural_compressor.adaptor.ox_utils.operators.resize"], [39, "module-neural_compressor.adaptor.ox_utils.operators.split"], [40, "module-neural_compressor.adaptor.ox_utils.operators.unary_op"], [41, "module-neural_compressor.adaptor.ox_utils.quantizer"], [42, "module-neural_compressor.adaptor.ox_utils.smooth_quant"], [43, "module-neural_compressor.adaptor.ox_utils.util"], [44, "module-neural_compressor.adaptor.ox_utils.weight_only"], [45, "module-neural_compressor.adaptor.pytorch"], [46, "module-neural_compressor.adaptor.query"], [47, "module-neural_compressor.adaptor.tensorflow"], [48, "module-neural_compressor.adaptor.tf_utils.graph_converter"], [49, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"], [50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"], [51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer"], [52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"], [53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"], [54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"], [55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"], [56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"], [57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"], [58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"], [59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"], [60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"], [61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"], [62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"], [63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"], [64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"], [65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"], [66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"], [67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"], [68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"], [69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"], [70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"], [71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"], [72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"], [73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"], [74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"], [75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"], [76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"], [77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"], [78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"], [79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"], [80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"], [81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"], [82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"], [83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"], [84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"], [85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"], [86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"], [87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"], [88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"], [89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"], [90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"], [91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"], [92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"], [93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"], [94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"], [95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"], [96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"], [97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"], [98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"], [99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"], [100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"], [101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"], [102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"], [103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"], [104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"], [105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"], [106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"], [107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"], [108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"], [109, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"], [110, "module-neural_compressor.adaptor.tf_utils.graph_util"], [111, "module-neural_compressor.adaptor.tf_utils"], [112, "module-neural_compressor.adaptor.tf_utils.quantize_graph"], [113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"], [114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"], [115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"], [116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"], [117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"], [118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"], [119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"], [120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"], [121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"], [122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"], [123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"], [124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"], [125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"], [126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"], [127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"], [128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"], [129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"], [130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"], [131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"], [132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"], [133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"], [134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"], [135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"], [136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"], [137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"], [138, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"], [139, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"], [140, "module-neural_compressor.adaptor.tf_utils.smooth_quant_calibration"], [141, "module-neural_compressor.adaptor.tf_utils.smooth_quant_scaler"], [142, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"], [143, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"], [144, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"], [145, "module-neural_compressor.adaptor.tf_utils.transform_graph"], [146, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"], [147, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"], [148, "module-neural_compressor.adaptor.tf_utils.util"], [149, "module-neural_compressor.adaptor.torch_utils.auto_round"], [150, "module-neural_compressor.adaptor.torch_utils.autoround.autoround"], [151, "module-neural_compressor.adaptor.torch_utils.autoround.export"], [152, "module-neural_compressor.adaptor.torch_utils.autoround"], [153, "module-neural_compressor.adaptor.torch_utils.autoround.model_wrapper"], [154, "module-neural_compressor.adaptor.torch_utils.autoround.sign_sgd"], [155, "module-neural_compressor.adaptor.torch_utils.awq"], [156, "module-neural_compressor.adaptor.torch_utils.bf16_convert"], [157, "module-neural_compressor.adaptor.torch_utils.gptq"], [158, "module-neural_compressor.adaptor.torch_utils.hawq_metric"], [159, "module-neural_compressor.adaptor.torch_utils"], [160, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant"], [161, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle"], [162, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize"], [163, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load"], [164, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.utils"], [165, "module-neural_compressor.adaptor.torch_utils.mixed_precision"], [166, "module-neural_compressor.adaptor.torch_utils.model_wrapper"], [167, "module-neural_compressor.adaptor.torch_utils.pattern_detector"], [168, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"], [169, "module-neural_compressor.adaptor.torch_utils.teq"], [170, "module-neural_compressor.adaptor.torch_utils.util"], [171, "module-neural_compressor.adaptor.torch_utils.waq.auto_alpha"], [172, "module-neural_compressor.adaptor.torch_utils.waq.calibration"], [173, "module-neural_compressor.adaptor.torch_utils.waq.graph_trace"], [174, "module-neural_compressor.adaptor.torch_utils.waq"], [175, "module-neural_compressor.adaptor.torch_utils.waq.smooth_quant"], [176, "module-neural_compressor.adaptor.torch_utils.waq.utils"], [177, "module-neural_compressor.adaptor.torch_utils.weight_only"], [178, "module-neural_compressor.algorithm.algorithm"], [179, "module-neural_compressor.algorithm.fast_bias_correction"], [180, "module-neural_compressor.algorithm"], [181, "module-neural_compressor.algorithm.smooth_quant"], [182, "module-neural_compressor.algorithm.weight_correction"], [183, "module-neural_compressor.benchmark"], [184, "module-neural_compressor.common.base_config"], [185, "module-neural_compressor.common.base_tuning"], [186, "module-neural_compressor.common"], [187, "module-neural_compressor.common.tuning_param"], [188, "module-neural_compressor.common.utils.constants"], [189, "module-neural_compressor.common.utils"], [190, "module-neural_compressor.common.utils.logger"], [191, "module-neural_compressor.common.utils.save_load"], [192, "module-neural_compressor.common.utils.utility"], [193, "module-neural_compressor.compression.callbacks"], [194, "module-neural_compressor.compression.distillation.criterions"], [195, "module-neural_compressor.compression.distillation"], [196, "module-neural_compressor.compression.distillation.optimizers"], [197, "module-neural_compressor.compression.distillation.utility"], [198, "module-neural_compressor.compression.hpo"], [199, "module-neural_compressor.compression.hpo.sa_optimizer"], [200, "module-neural_compressor.compression.hpo.search_algorithms"], [201, "module-neural_compressor.compression.hpo.search_space"], [202, "module-neural_compressor.compression"], [203, "module-neural_compressor.compression.pruner.criteria"], [204, "module-neural_compressor.compression.pruner.dsnot"], [205, "module-neural_compressor.compression.pruner"], [206, "module-neural_compressor.compression.pruner.model_slim.auto_slim"], [207, "module-neural_compressor.compression.pruner.model_slim"], [208, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"], [209, "module-neural_compressor.compression.pruner.model_slim.weight_slim"], [210, "module-neural_compressor.compression.pruner.patterns.base"], [211, "module-neural_compressor.compression.pruner.patterns"], [212, "module-neural_compressor.compression.pruner.patterns.mha"], [213, "module-neural_compressor.compression.pruner.patterns.ninm"], [214, "module-neural_compressor.compression.pruner.patterns.nxm"], [215, "module-neural_compressor.compression.pruner.pruners.base"], [216, "module-neural_compressor.compression.pruner.pruners.basic"], [217, "module-neural_compressor.compression.pruner.pruners.block_mask"], [218, "module-neural_compressor.compression.pruner.pruners"], [219, "module-neural_compressor.compression.pruner.pruners.mha"], [220, "module-neural_compressor.compression.pruner.pruners.pattern_lock"], [221, "module-neural_compressor.compression.pruner.pruners.progressive"], [222, "module-neural_compressor.compression.pruner.pruners.retrain_free"], [223, "module-neural_compressor.compression.pruner.pruners.sparse_gpt"], [224, "module-neural_compressor.compression.pruner.pruning"], [225, "module-neural_compressor.compression.pruner.regs"], [226, "module-neural_compressor.compression.pruner.schedulers"], [227, "module-neural_compressor.compression.pruner.tf_criteria"], [228, "module-neural_compressor.compression.pruner.utils"], [229, "module-neural_compressor.compression.pruner.wanda"], [230, "module-neural_compressor.compression.pruner.wanda.prune"], [231, "module-neural_compressor.compression.pruner.wanda.utils"], [232, "module-neural_compressor.compression.pruner.wanda.wrapper"], [233, "module-neural_compressor.conf.config"], [234, "module-neural_compressor.conf.dotdict"], [235, "module-neural_compressor.conf"], [236, "module-neural_compressor.conf.pythonic_config"], [237, "module-neural_compressor.config"], [238, "module-neural_compressor.contrib"], [239, "module-neural_compressor.contrib.strategy"], [240, "module-neural_compressor.contrib.strategy.sigopt"], [241, "module-neural_compressor.contrib.strategy.tpe"], [242, "module-neural_compressor.data.dataloaders.base_dataloader"], [243, "module-neural_compressor.data.dataloaders.dataloader"], [244, "module-neural_compressor.data.dataloaders.default_dataloader"], [245, "module-neural_compressor.data.dataloaders.fetcher"], [246, "module-neural_compressor.data.dataloaders"], [247, "module-neural_compressor.data.dataloaders.mxnet_dataloader"], [248, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"], [249, "module-neural_compressor.data.dataloaders.pytorch_dataloader"], [250, "module-neural_compressor.data.dataloaders.sampler"], [251, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"], [252, "module-neural_compressor.data.datasets.bert_dataset"], [253, "module-neural_compressor.data.datasets.coco_dataset"], [254, "module-neural_compressor.data.datasets.dataset"], [255, "module-neural_compressor.data.datasets.dummy_dataset"], [256, "module-neural_compressor.data.datasets.dummy_dataset_v2"], [257, "module-neural_compressor.data.datasets.imagenet_dataset"], [258, "module-neural_compressor.data.datasets"], [259, "module-neural_compressor.data.datasets.style_transfer_dataset"], [260, "module-neural_compressor.data.filters.coco_filter"], [261, "module-neural_compressor.data.filters.filter"], [262, "module-neural_compressor.data.filters"], [263, "module-neural_compressor.data"], [264, "module-neural_compressor.data.transforms.coco_transform"], [265, "module-neural_compressor.data.transforms.imagenet_transform"], [266, "module-neural_compressor.data.transforms"], [267, "module-neural_compressor.data.transforms.postprocess"], [268, "module-neural_compressor.data.transforms.tokenization"], [269, "module-neural_compressor.data.transforms.transform"], [270, "module-neural_compressor.experimental.benchmark"], [271, "module-neural_compressor.experimental.common.criterion"], [272, "module-neural_compressor.experimental.common.dataloader"], [273, "module-neural_compressor.experimental.common"], [274, "module-neural_compressor.experimental.common.metric"], [275, "module-neural_compressor.experimental.common.model"], [276, "module-neural_compressor.experimental.common.optimizer"], [277, "module-neural_compressor.experimental.common.postprocess"], [278, "module-neural_compressor.experimental.common.torch_utils"], [279, "module-neural_compressor.experimental.component"], [280, "module-neural_compressor.experimental.compression"], [281, "module-neural_compressor.experimental.contrib"], [282, "module-neural_compressor.experimental.contrib.strategy"], [283, "module-neural_compressor.experimental.contrib.strategy.sigopt"], [284, "module-neural_compressor.experimental.contrib.strategy.tpe"], [285, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"], [286, "module-neural_compressor.experimental.data.dataloaders.dataloader"], [287, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"], [288, "module-neural_compressor.experimental.data.dataloaders.fetcher"], [289, "module-neural_compressor.experimental.data.dataloaders"], [290, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"], [291, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"], [292, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"], [293, "module-neural_compressor.experimental.data.dataloaders.sampler"], [294, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"], [295, "module-neural_compressor.experimental.data.datasets.bert_dataset"], [296, "module-neural_compressor.experimental.data.datasets.coco_dataset"], [297, "module-neural_compressor.experimental.data.datasets.dataset"], [298, "module-neural_compressor.experimental.data.datasets.dummy_dataset"], [299, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"], [300, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"], [301, "module-neural_compressor.experimental.data.datasets"], [302, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"], [303, "module-neural_compressor.experimental.data.filters.coco_filter"], [304, "module-neural_compressor.experimental.data.filters.filter"], [305, "module-neural_compressor.experimental.data.filters"], [306, "module-neural_compressor.experimental.data"], [307, "module-neural_compressor.experimental.data.transforms.imagenet_transform"], [308, "module-neural_compressor.experimental.data.transforms"], [309, "module-neural_compressor.experimental.data.transforms.tokenization"], [310, "module-neural_compressor.experimental.data.transforms.transform"], [311, "module-neural_compressor.experimental.distillation"], [312, "module-neural_compressor.experimental.export"], [313, "module-neural_compressor.experimental.export.qlinear2qdq"], [314, "module-neural_compressor.experimental.export.tf2onnx"], [315, "module-neural_compressor.experimental.export.torch2onnx"], [316, "module-neural_compressor.experimental.graph_optimization"], [317, "module-neural_compressor.experimental"], [318, "module-neural_compressor.experimental.metric.bleu"], [319, "module-neural_compressor.experimental.metric.bleu_util"], [320, "module-neural_compressor.experimental.metric.coco_label_map"], [321, "module-neural_compressor.experimental.metric.coco_tools"], [322, "module-neural_compressor.experimental.metric.evaluate_squad"], [323, "module-neural_compressor.experimental.metric.f1"], [324, "module-neural_compressor.experimental.metric"], [325, "module-neural_compressor.experimental.metric.metric"], [326, "module-neural_compressor.experimental.mixed_precision"], [327, "module-neural_compressor.experimental.model_conversion"], [328, "module-neural_compressor.experimental.nas.basic_nas"], [329, "module-neural_compressor.experimental.nas.dynas"], [330, "module-neural_compressor.experimental.nas"], [331, "module-neural_compressor.experimental.nas.nas"], [332, "module-neural_compressor.experimental.nas.nas_utils"], [333, "module-neural_compressor.experimental.nas.search_algorithms"], [334, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"], [335, "module-neural_compressor.experimental.pruner_legacy.group_lasso"], [336, "module-neural_compressor.experimental.pruner_legacy"], [337, "module-neural_compressor.experimental.pruner_legacy.magnitude"], [338, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"], [339, "module-neural_compressor.experimental.pruner_legacy.pruner"], [340, "module-neural_compressor.experimental.pruning"], [341, "module-neural_compressor.experimental.pruning_recipes"], [342, "module-neural_compressor.experimental.pruning_recipes.patterns"], [343, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"], [344, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"], [345, "module-neural_compressor.experimental.pruning_v2"], [346, "module-neural_compressor.experimental.pytorch_pruner"], [347, "module-neural_compressor.experimental.pytorch_pruner.logger"], [348, "module-neural_compressor.experimental.pytorch_pruner.patterns"], [349, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"], [350, "module-neural_compressor.experimental.pytorch_pruner.pruner"], [351, "module-neural_compressor.experimental.pytorch_pruner.pruning"], [352, "module-neural_compressor.experimental.pytorch_pruner.scheduler"], [353, "module-neural_compressor.experimental.quantization"], [354, "module-neural_compressor.experimental.scheduler"], [355, "module-neural_compressor.experimental.strategy.auto_mixed_precision"], [356, "module-neural_compressor.experimental.strategy.basic"], [357, "module-neural_compressor.experimental.strategy.bayesian"], [358, "module-neural_compressor.experimental.strategy.exhaustive"], [359, "module-neural_compressor.experimental.strategy"], [360, "module-neural_compressor.experimental.strategy.mse"], [361, "module-neural_compressor.experimental.strategy.mse_v2"], [362, "module-neural_compressor.experimental.strategy.random"], [363, "module-neural_compressor.experimental.strategy.strategy"], [364, "module-neural_compressor.experimental.strategy.utils.constant"], [365, "module-neural_compressor.experimental.strategy.utils"], [366, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"], [367, "module-neural_compressor.experimental.strategy.utils.tuning_space"], [368, "module-neural_compressor.experimental.strategy.utils.tuning_structs"], [369, "module-neural_compressor.experimental.strategy.utils.utility"], [370, "module-neural_compressor"], [371, "module-neural_compressor.metric.bleu"], [372, "module-neural_compressor.metric.bleu_util"], [373, "module-neural_compressor.metric.coco_label_map"], [374, "module-neural_compressor.metric.coco_tools"], [375, "module-neural_compressor.metric.evaluate_squad"], [376, "module-neural_compressor.metric.f1"], [377, "module-neural_compressor.metric"], [378, "module-neural_compressor.metric.metric"], [379, "module-neural_compressor.mix_precision"], [380, "module-neural_compressor.model.base_model"], [381, "module-neural_compressor.model"], [382, "module-neural_compressor.model.keras_model"], [383, "module-neural_compressor.model.model"], [384, "module-neural_compressor.model.mxnet_model"], [385, "module-neural_compressor.model.nets_factory"], [386, "module-neural_compressor.model.onnx_model"], [387, "module-neural_compressor.model.tensorflow_model"], [388, "module-neural_compressor.model.torch_model"], [389, "module-neural_compressor.objective"], [390, "module-neural_compressor.onnxrt.algorithms"], [391, "module-neural_compressor.onnxrt.algorithms.layer_wise.core"], [392, "module-neural_compressor.onnxrt.algorithms.layer_wise"], [393, "module-neural_compressor.onnxrt.algorithms.smoother.calibrator"], [394, "module-neural_compressor.onnxrt.algorithms.smoother.core"], [395, "module-neural_compressor.onnxrt.algorithms.smoother"], [396, "module-neural_compressor.onnxrt.algorithms.weight_only.awq"], [397, "module-neural_compressor.onnxrt.algorithms.weight_only.gptq"], [398, "module-neural_compressor.onnxrt.algorithms.weight_only"], [399, "module-neural_compressor.onnxrt.algorithms.weight_only.rtn"], [400, "module-neural_compressor.onnxrt.algorithms.weight_only.utility"], [401, "module-neural_compressor.onnxrt"], [402, "module-neural_compressor.onnxrt.quantization.algorithm_entry"], [403, "module-neural_compressor.onnxrt.quantization.autotune"], [404, "module-neural_compressor.onnxrt.quantization.calibrate"], [405, "module-neural_compressor.onnxrt.quantization.config"], [406, "module-neural_compressor.onnxrt.quantization"], [407, "module-neural_compressor.onnxrt.quantization.quantize"], [408, "module-neural_compressor.onnxrt.utils"], [409, "module-neural_compressor.onnxrt.utils.onnx_model"], [410, "module-neural_compressor.onnxrt.utils.utility"], [411, "module-neural_compressor.profiling"], [412, "module-neural_compressor.profiling.parser.factory"], [413, "module-neural_compressor.profiling.parser"], [414, "module-neural_compressor.profiling.parser.onnx_parser.factory"], [415, "module-neural_compressor.profiling.parser.onnx_parser"], [416, "module-neural_compressor.profiling.parser.onnx_parser.parser"], [417, "module-neural_compressor.profiling.parser.parser"], [418, "module-neural_compressor.profiling.parser.result"], [419, "module-neural_compressor.profiling.parser.tensorflow_parser.factory"], [420, "module-neural_compressor.profiling.parser.tensorflow_parser"], [421, "module-neural_compressor.profiling.parser.tensorflow_parser.parser"], [422, "module-neural_compressor.profiling.profiler.factory"], [423, "module-neural_compressor.profiling.profiler"], [424, "module-neural_compressor.profiling.profiler.onnxrt_profiler.factory"], [425, "module-neural_compressor.profiling.profiler.onnxrt_profiler"], [426, "module-neural_compressor.profiling.profiler.onnxrt_profiler.profiler"], [427, "module-neural_compressor.profiling.profiler.onnxrt_profiler.utils"], [428, "module-neural_compressor.profiling.profiler.profiler"], [429, "module-neural_compressor.profiling.profiler.tensorflow_profiler.factory"], [430, "module-neural_compressor.profiling.profiler.tensorflow_profiler"], [431, "module-neural_compressor.profiling.profiler.tensorflow_profiler.profiler"], [432, "module-neural_compressor.profiling.profiler.tensorflow_profiler.utils"], [433, "module-neural_compressor.quantization"], [434, "module-neural_compressor.strategy.auto"], [435, "module-neural_compressor.strategy.auto_mixed_precision"], [436, "module-neural_compressor.strategy.basic"], [437, "module-neural_compressor.strategy.bayesian"], [438, "module-neural_compressor.strategy.conservative"], [439, "module-neural_compressor.strategy.exhaustive"], [440, "module-neural_compressor.strategy.hawq_v2"], [441, "module-neural_compressor.strategy"], [442, "module-neural_compressor.strategy.mse"], [443, "module-neural_compressor.strategy.mse_v2"], [444, "module-neural_compressor.strategy.random"], [445, "module-neural_compressor.strategy.strategy"], [446, "module-neural_compressor.strategy.utils.constant"], [447, "module-neural_compressor.strategy.utils"], [448, "module-neural_compressor.strategy.utils.tuning_sampler"], [449, "module-neural_compressor.strategy.utils.tuning_space"], [450, "module-neural_compressor.strategy.utils.tuning_structs"], [451, "module-neural_compressor.strategy.utils.utility"], [452, "module-neural_compressor.template.api_doc_example"], [453, "module-neural_compressor.template"], [454, "module-neural_compressor.tensorflow.algorithms"], [455, "module-neural_compressor.tensorflow.algorithms.smoother.calibration"], [456, "module-neural_compressor.tensorflow.algorithms.smoother.core"], [457, "module-neural_compressor.tensorflow.algorithms.smoother"], [458, "module-neural_compressor.tensorflow.algorithms.smoother.scaler"], [459, "module-neural_compressor.tensorflow.algorithms.static_quant"], [460, "module-neural_compressor.tensorflow.algorithms.static_quant.keras"], [461, "module-neural_compressor.tensorflow.algorithms.static_quant.tensorflow"], [462, "module-neural_compressor.tensorflow"], [463, "module-neural_compressor.tensorflow.keras"], [464, "module-neural_compressor.tensorflow.keras.layers.conv2d"], [465, "module-neural_compressor.tensorflow.keras.layers.dense"], [466, "module-neural_compressor.tensorflow.keras.layers.depthwise_conv2d"], [467, "module-neural_compressor.tensorflow.keras.layers"], [468, "module-neural_compressor.tensorflow.keras.layers.pool2d"], [469, "module-neural_compressor.tensorflow.keras.layers.quantizer"], [470, "module-neural_compressor.tensorflow.keras.layers.separable_conv2d"], [471, "module-neural_compressor.tensorflow.keras.quantization.config"], [472, "module-neural_compressor.tensorflow.keras.quantization"], [473, "module-neural_compressor.tensorflow.quantization.algorithm_entry"], [474, "module-neural_compressor.tensorflow.quantization.autotune"], [475, "module-neural_compressor.tensorflow.quantization.config"], [476, "module-neural_compressor.tensorflow.quantization"], [477, "module-neural_compressor.tensorflow.quantization.quantize"], [478, "module-neural_compressor.tensorflow.quantization.utils.graph_converter"], [479, "module-neural_compressor.tensorflow.quantization.utils.graph_converter_without_calib"], [480, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.bf16_convert"], [481, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.dequantize_cast_optimizer"], [482, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16"], [483, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd"], [484, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout"], [485, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu"], [486, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random"], [487, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const"], [488, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction"], [489, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd"], [490, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer"], [491, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape"], [492, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm"], [493, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant"], [494, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add"], [495, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul"], [496, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math"], [497, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn"], [498, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in"], [499, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu"], [500, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm"], [501, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv"], [502, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"], [503, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose"], [504, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer"], [505, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass"], [506, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic"], [507, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node"], [508, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu"], [509, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize"], [510, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes"], [511, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm"], [512, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input"], [513, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes"], [514, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes"], [515, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer"], [516, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base"], [517, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter"], [518, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_fake_quant"], [519, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value"], [520, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value_without_calib"], [521, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"], [522, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_requantize"], [523, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"], [524, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize"], [525, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8"], [526, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.meta_op_optimizer"], [527, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_hostconst_converter"], [528, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_quantized_op_cse"], [529, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.rnn_convert"], [530, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.scale_propagation"], [531, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq"], [532, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.insert_qdq_pattern"], [533, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.merge_duplicated_qdq"], [534, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.share_qdq_y_pattern"], [535, "module-neural_compressor.tensorflow.quantization.utils.graph_util"], [536, "module-neural_compressor.tensorflow.quantization.utils"], [537, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph"], [538, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.fake_quantize"], [539, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat"], [540, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_config"], [541, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_helper"], [542, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers"], [543, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.optimize_layer"], [544, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_add"], [545, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_base"], [546, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"], [547, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_wrapper"], [548, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_bn"], [549, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_concatv2"], [550, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_conv"], [551, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_deconv"], [552, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_in"], [553, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_matmul"], [554, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_pooling"], [555, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq"], [556, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.optimize_qdq"], [557, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base"], [558, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_bn"], [559, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_concatv2"], [560, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_conv"], [561, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_for_intel_cpu"], [562, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_matmul"], [563, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_pooling"], [564, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph_common"], [565, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.bias_correction"], [566, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.graph_transform_base"], [567, "module-neural_compressor.tensorflow.quantization.utils.transform_graph"], [568, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.insert_logging"], [569, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.rerange_quantized_concat"], [570, "module-neural_compressor.tensorflow.quantization.utils.utility"], [571, "module-neural_compressor.tensorflow.utils.constants"], [572, "module-neural_compressor.tensorflow.utils.data"], [573, "module-neural_compressor.tensorflow.utils"], [574, "module-neural_compressor.tensorflow.utils.model"], [575, "module-neural_compressor.tensorflow.utils.model_wrappers"], [576, "module-neural_compressor.tensorflow.utils.nets_factory"], [577, "module-neural_compressor.tensorflow.utils.utility"], [578, "module-neural_compressor.torch.algorithms.habana_fp8.fp8_quant"], [579, "module-neural_compressor.torch.algorithms.habana_fp8"], [580, "module-neural_compressor.torch.algorithms.habana_fp8.modules"], [581, "module-neural_compressor.torch.algorithms.habana_fp8.observer"], [582, "module-neural_compressor.torch.algorithms.habana_fp8.save_load"], [583, "module-neural_compressor.torch.algorithms.habana_fp8.scale"], [584, "module-neural_compressor.torch.algorithms.habana_fp8.tensor"], [585, "module-neural_compressor.torch.algorithms"], [586, "module-neural_compressor.torch.algorithms.layer_wise"], [587, "module-neural_compressor.torch.algorithms.layer_wise.load"], [588, "module-neural_compressor.torch.algorithms.layer_wise.modified_pickle"], [589, "module-neural_compressor.torch.algorithms.layer_wise.utils"], [590, "module-neural_compressor.torch.algorithms.smooth_quant"], [591, "module-neural_compressor.torch.algorithms.smooth_quant.save_load"], [592, "module-neural_compressor.torch.algorithms.smooth_quant.smooth_quant"], [593, "module-neural_compressor.torch.algorithms.smooth_quant.utility"], [594, "module-neural_compressor.torch.algorithms.static_quant"], [595, "module-neural_compressor.torch.algorithms.static_quant.save_load"], [596, "module-neural_compressor.torch.algorithms.static_quant.static_quant"], [597, "module-neural_compressor.torch.algorithms.static_quant.utility"], [598, "module-neural_compressor.torch.algorithms.weight_only.autoround"], [599, "module-neural_compressor.torch.algorithms.weight_only.awq"], [600, "module-neural_compressor.torch.algorithms.weight_only.gptq"], [601, "module-neural_compressor.torch.algorithms.weight_only.hqq.bitpack"], [602, "module-neural_compressor.torch.algorithms.weight_only.hqq.config"], [603, "module-neural_compressor.torch.algorithms.weight_only.hqq.core"], [604, "module-neural_compressor.torch.algorithms.weight_only.hqq"], [605, "module-neural_compressor.torch.algorithms.weight_only.hqq.optimizer"], [606, "module-neural_compressor.torch.algorithms.weight_only.hqq.qtensor"], [607, "module-neural_compressor.torch.algorithms.weight_only.hqq.quant_api"], [608, "module-neural_compressor.torch.algorithms.weight_only.hqq.quantizer"], [609, "module-neural_compressor.torch.algorithms.weight_only.hqq.utility"], [610, "module-neural_compressor.torch.algorithms.weight_only"], [611, "module-neural_compressor.torch.algorithms.weight_only.modules"], [612, "module-neural_compressor.torch.algorithms.weight_only.rtn"], [613, "module-neural_compressor.torch.algorithms.weight_only.teq"], [614, "module-neural_compressor.torch.algorithms.weight_only.utility"], [615, "module-neural_compressor.torch.amp.autocast"], [616, "module-neural_compressor.torch.amp.fp8.functions"], [617, "module-neural_compressor.torch.amp.fp8"], [618, "module-neural_compressor.torch.amp"], [619, "module-neural_compressor.torch"], [620, "module-neural_compressor.torch.quantization.algorithm_entry"], [621, "module-neural_compressor.torch.quantization.autotune"], [622, "module-neural_compressor.torch.quantization.config"], [623, "module-neural_compressor.torch.quantization"], [624, "module-neural_compressor.torch.quantization.load_entry"], [625, "module-neural_compressor.torch.quantization.quantize"], [626, "module-neural_compressor.torch.utils.auto_accelerator"], [627, "module-neural_compressor.torch.utils.constants"], [628, "module-neural_compressor.torch.utils.environ"], [629, "module-neural_compressor.torch.utils"], [630, "module-neural_compressor.torch.utils.utility"], [631, "module-neural_compressor.training"], [632, "module-neural_compressor.utils.collect_layer_histogram"], [633, "module-neural_compressor.utils.constant"], [634, "module-neural_compressor.utils.create_obj_from_config"], [635, "module-neural_compressor.utils"], [636, "module-neural_compressor.utils.kl_divergence"], [637, "module-neural_compressor.utils.load_huggingface"], [638, "module-neural_compressor.utils.logger"], [639, "module-neural_compressor.utils.neural_insights_utils"], [640, "module-neural_compressor.utils.options"], [641, "module-neural_compressor.utils.pytorch"], [642, "module-neural_compressor.utils.utility"], [643, "module-neural_compressor.utils.weights_details"], [644, "module-neural_compressor.version"]], "adaptor (class in neural_compressor.adaptor.adaptor)": [[1, "neural_compressor.adaptor.adaptor.Adaptor"]], "adaptor_registry() (in module neural_compressor.adaptor.adaptor)": [[1, "neural_compressor.adaptor.adaptor.adaptor_registry"]], "neural_compressor.adaptor.adaptor": [[1, "module-neural_compressor.adaptor.adaptor"]], "neural_compressor.adaptor": [[2, "module-neural_compressor.adaptor"]], "kerasadaptor (class in neural_compressor.adaptor.keras)": [[3, "neural_compressor.adaptor.keras.KerasAdaptor"]], "kerasquery (class in neural_compressor.adaptor.keras)": [[3, "neural_compressor.adaptor.keras.KerasQuery"]], "neural_compressor.adaptor.keras": [[3, "module-neural_compressor.adaptor.keras"]], "neural_compressor.adaptor.keras_utils.conv2d": [[4, "module-neural_compressor.adaptor.keras_utils.conv2d"]], "neural_compressor.adaptor.keras_utils.dense": [[5, "module-neural_compressor.adaptor.keras_utils.dense"]], "neural_compressor.adaptor.keras_utils.depthwise_conv2d": [[6, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"]], "neural_compressor.adaptor.keras_utils": [[7, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.pool2d": [[8, "module-neural_compressor.adaptor.keras_utils.pool2d"]], "neural_compressor.adaptor.keras_utils.quantizer": [[9, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "neural_compressor.adaptor.keras_utils.separable_conv2d": [[10, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"]], "mxnetquery (class in neural_compressor.adaptor.mxnet)": [[11, "neural_compressor.adaptor.mxnet.MXNetQuery"]], "mxnetadaptor (class in neural_compressor.adaptor.mxnet)": [[11, "neural_compressor.adaptor.mxnet.MxNetAdaptor"]], "neural_compressor.adaptor.mxnet": [[11, "module-neural_compressor.adaptor.mxnet"]], "neural_compressor.adaptor.mxnet_utils": [[12, "module-neural_compressor.adaptor.mxnet_utils"]], "calibcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CalibCollector"]], "calibdata (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CalibData"]], "collectorbase (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CollectorBase"]], "dataiterloader (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.DataIterLoader"]], "dataloaderwrap (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.DataLoaderWrap"]], "namecollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.NameCollector"]], "optype (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.OpType"]], "tensorcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.TensorCollector"]], "amp_convert() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.amp_convert"]], "calib_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.calib_model"]], "check_mx_version() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.check_mx_version"]], "combine_capabilities() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.combine_capabilities"]], "create_data_example() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.create_data_example"]], "distribute_calib_tensors() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.distribute_calib_tensors"]], "ensure_list() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.ensure_list"]], "fuse() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.fuse"]], "get_framework_name() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.get_framework_name"]], "is_model_quantized() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.is_model_quantized"]], "isiterable() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.isiterable"]], "make_module() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.make_module"]], "make_nc_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.make_nc_model"]], "make_symbol_block() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.make_symbol_block"]], "ndarray_to_device() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.ndarray_to_device"]], "neural_compressor.adaptor.mxnet_utils.util": [[13, "module-neural_compressor.adaptor.mxnet_utils.util"]], "parse_tune_config() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.parse_tune_config"]], "prepare_dataloader() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.prepare_dataloader"]], "prepare_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.prepare_model"]], "prepare_model_data() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.prepare_model_data"]], "quantize_sym_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.quantize_sym_model"]], "query_quantizable_nodes() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.query_quantizable_nodes"]], "run_forward() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.run_forward"]], "onnxrtquery (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRTQuery"]], "onnxrt_integeropsadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_IntegerOpsAdaptor"]], "onnxrt_qdqadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_QDQAdaptor"]], "onnxrt_qlinearopsadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_QLinearOpsAdaptor"]], "onnxrt_weightonlyadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_WeightOnlyAdaptor"]], "onnxruntimeadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor"]], "neural_compressor.adaptor.onnxrt": [[14, "module-neural_compressor.adaptor.onnxrt"]], "onnxrtaugment (class in neural_compressor.adaptor.ox_utils.calibration)": [[15, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment"]], "neural_compressor.adaptor.ox_utils.calibration": [[15, "module-neural_compressor.adaptor.ox_utils.calibration"]], "calibratorbase (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.CalibratorBase"]], "histogramcollector (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.HistogramCollector"]], "klcalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.KLCalibrator"]], "minmaxcalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.MinMaxCalibrator"]], "percentilecalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.PercentileCalibrator"]], "calib_registry() (in module neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.calib_registry"]], "neural_compressor.adaptor.ox_utils.calibrator": [[16, "module-neural_compressor.adaptor.ox_utils.calibrator"]], "smooth_distribution() (in module neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.smooth_distribution"]], "neural_compressor.adaptor.ox_utils": [[17, "module-neural_compressor.adaptor.ox_utils"]], "activationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator"]], "float16activationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.Float16ActivationOperator"]], "qactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.QActivationOperator"]], "removableactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.RemovableActivationOperator"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[18, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "argmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[19, "neural_compressor.adaptor.ox_utils.operators.argmax.ArgMaxOperator"]], "qargmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[19, "neural_compressor.adaptor.ox_utils.operators.argmax.QArgMaxOperator"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[19, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "attentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[20, "neural_compressor.adaptor.ox_utils.operators.attention.AttentionOperator"]], "qattentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[20, "neural_compressor.adaptor.ox_utils.operators.attention.QAttentionOperator"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[20, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "binarydirect8bitoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[21, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryDirect8BitOperator"]], "binaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[21, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator"]], "float16binaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[21, "neural_compressor.adaptor.ox_utils.operators.binary_op.Float16BinaryOperator"]], "qbinaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[21, "neural_compressor.adaptor.ox_utils.operators.binary_op.QBinaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[21, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "concatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[22, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator"]], "qconcatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[22, "neural_compressor.adaptor.ox_utils.operators.concat.QConcatOperator"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[22, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "convoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[23, "neural_compressor.adaptor.ox_utils.operators.conv.ConvOperator"]], "qconvoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[23, "neural_compressor.adaptor.ox_utils.operators.conv.QConvOperator"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[23, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "direct8bitoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[24, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator"]], "qdirectoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[24, "neural_compressor.adaptor.ox_utils.operators.direct_q8.QDirectOperator"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[24, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "embedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[25, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.EmbedLayerNormalizationOperator"]], "qembedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[25, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.QEmbedLayerNormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[25, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "gatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[26, "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator"]], "qgatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[26, "neural_compressor.adaptor.ox_utils.operators.gather.QGatherOperator"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[26, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "globalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[27, "neural_compressor.adaptor.ox_utils.operators.gavgpool.GlobalAveragePoolOperator"]], "qglobalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[27, "neural_compressor.adaptor.ox_utils.operators.gavgpool.QGlobalAveragePoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[27, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "gemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[28, "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator"]], "qgemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[28, "neural_compressor.adaptor.ox_utils.operators.gemm.QGemmOperator"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[28, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[29, "module-neural_compressor.adaptor.ox_utils.operators"]], "lstmoperator (class in neural_compressor.adaptor.ox_utils.operators.lstm)": [[30, "neural_compressor.adaptor.ox_utils.operators.lstm.LSTMOperator"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[30, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "fusedmatmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[31, "neural_compressor.adaptor.ox_utils.operators.matmul.FusedMatMulOperator"]], "matmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[31, "neural_compressor.adaptor.ox_utils.operators.matmul.MatMulOperator"]], "qmatmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[31, "neural_compressor.adaptor.ox_utils.operators.matmul.QMatMulOperator"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[31, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "maxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[32, "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator"]], "qmaxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[32, "neural_compressor.adaptor.ox_utils.operators.maxpool.QMaxPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[32, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "batchnormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.norm)": [[33, "neural_compressor.adaptor.ox_utils.operators.norm.BatchNormalizationOperator"]], "normalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.norm)": [[33, "neural_compressor.adaptor.ox_utils.operators.norm.NormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.norm": [[33, "module-neural_compressor.adaptor.ox_utils.operators.norm"]], "operator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.Operator"]], "qoperator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.QOperator"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[34, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "op_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.op_registry"]], "qop_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.qop_registry"]], "padoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[35, "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator"]], "qpadoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[35, "neural_compressor.adaptor.ox_utils.operators.pad.QPadOperator"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[35, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "pooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[36, "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator"]], "qpooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[36, "neural_compressor.adaptor.ox_utils.operators.pooling.QPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[36, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "reduceminmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.reduce)": [[37, "neural_compressor.adaptor.ox_utils.operators.reduce.ReduceMinMaxOperator"]], "reduceoperator (class in neural_compressor.adaptor.ox_utils.operators.reduce)": [[37, "neural_compressor.adaptor.ox_utils.operators.reduce.ReduceOperator"]], "neural_compressor.adaptor.ox_utils.operators.reduce": [[37, "module-neural_compressor.adaptor.ox_utils.operators.reduce"]], "qresizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[38, "neural_compressor.adaptor.ox_utils.operators.resize.QResizeOperator"]], "resizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[38, "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[38, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "qsplitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[39, "neural_compressor.adaptor.ox_utils.operators.split.QSplitOperator"]], "splitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[39, "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator"]], "neural_compressor.adaptor.ox_utils.operators.split": [[39, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "unarydirect8bitoperator (class in neural_compressor.adaptor.ox_utils.operators.unary_op)": [[40, "neural_compressor.adaptor.ox_utils.operators.unary_op.UnaryDirect8BitOperator"]], "unaryoperator (class in neural_compressor.adaptor.ox_utils.operators.unary_op)": [[40, "neural_compressor.adaptor.ox_utils.operators.unary_op.UnaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.unary_op": [[40, "module-neural_compressor.adaptor.ox_utils.operators.unary_op"]], "quantizer (class in neural_compressor.adaptor.ox_utils.quantizer)": [[41, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer"]], "neural_compressor.adaptor.ox_utils.quantizer": [[41, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "ortsmoothquant (class in neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.ORTSmoothQuant"]], "get_quant_dequant_output() (in module neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.get_quant_dequant_output"]], "make_sub_graph() (in module neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.make_sub_graph"]], "neural_compressor.adaptor.ox_utils.smooth_quant": [[42, "module-neural_compressor.adaptor.ox_utils.smooth_quant"]], "quant_dequant_data() (in module neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.quant_dequant_data"]], "quantformat (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantFormat"]], "quanttype (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantType"]], "quantizationmode (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizationMode"]], "quantizedinitializer (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizedInitializer"]], "quantizedvalue (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizedValue"]], "quantizedvaluetype (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizedValueType"]], "valueinfo (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.ValueInfo"]], "attribute_to_kwarg() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.attribute_to_kwarg"]], "calculate_scale_zp() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.calculate_scale_zp"]], "cast_tensor() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.cast_tensor"]], "collate_preds() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.collate_preds"]], "dequantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.dequantize_data"]], "dequantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.dequantize_data_with_scale_zero"]], "dtype_to_name() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.dtype_to_name"]], "find_by_name() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.find_by_name"]], "float_to_bfloat16() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.float_to_bfloat16"]], "float_to_float16() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.float_to_float16"]], "get_node_original_name() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.get_node_original_name"]], "infer_shapes() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.infer_shapes"]], "is_b_transposed() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.is_B_transposed"]], "make_dquant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.make_dquant_node"]], "make_quant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.make_quant_node"]], "neural_compressor.adaptor.ox_utils.util": [[43, "module-neural_compressor.adaptor.ox_utils.util"]], "quantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_data"]], "quantize_data_per_channel() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_data_per_channel"]], "quantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_data_with_scale_zero"]], "quantize_nparray() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_nparray"]], "remove_init_from_model_input() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.remove_init_from_model_input"]], "simple_progress_bar() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.simple_progress_bar"]], "split_shared_bias() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.split_shared_bias"]], "to_numpy() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.to_numpy"]], "trt_env_setup() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.trt_env_setup"]], "apply_awq_clip() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.apply_awq_clip"]], "apply_awq_scale() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.apply_awq_scale"]], "awq_quantize() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.awq_quantize"]], "get_blob_size() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.get_blob_size"]], "get_weight_scale() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.get_weight_scale"]], "gptq() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.gptq"]], "gptq_quantize() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.gptq_quantize"]], "make_matmul_weight_only_node() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.make_matmul_weight_only_node"]], "neural_compressor.adaptor.ox_utils.weight_only": [[44, "module-neural_compressor.adaptor.ox_utils.weight_only"]], "pad_tensor() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.pad_tensor"]], "prepare_inputs() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.prepare_inputs"]], "qdq_tensor() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.qdq_tensor"]], "quant_tensor() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.quant_tensor"]], "rtn_quantize() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.rtn_quantize"]], "pytorchadaptor (class in neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.PyTorchAdaptor"]], "pytorchquery (class in neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.PyTorchQuery"]], "pytorchweightonlyadaptor (class in neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.PyTorchWeightOnlyAdaptor"]], "pytorch_fxadaptor (class in neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor"]], "pytorch_ipexadaptor (class in neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor"]], "templateadaptor (class in neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.TemplateAdaptor"]], "get_ops_recursively() (in module neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.get_ops_recursively"]], "neural_compressor.adaptor.pytorch": [[45, "module-neural_compressor.adaptor.pytorch"]], "querybackendcapability (class in neural_compressor.adaptor.query)": [[46, "neural_compressor.adaptor.query.QueryBackendCapability"]], "neural_compressor.adaptor.query": [[46, "module-neural_compressor.adaptor.query"]], "tensorflowadaptor (class in neural_compressor.adaptor.tensorflow)": [[47, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor"]], "tensorflowquery (class in neural_compressor.adaptor.tensorflow)": [[47, "neural_compressor.adaptor.tensorflow.TensorflowQuery"]], "tensorflow_itexadaptor (class in neural_compressor.adaptor.tensorflow)": [[47, "neural_compressor.adaptor.tensorflow.Tensorflow_ITEXAdaptor"]], "neural_compressor.adaptor.tensorflow": [[47, "module-neural_compressor.adaptor.tensorflow"]], "graphconverter (class in neural_compressor.adaptor.tf_utils.graph_converter)": [[48, "neural_compressor.adaptor.tf_utils.graph_converter.GraphConverter"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[48, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "graphconverterwithoutcalib (class in neural_compressor.adaptor.tf_utils.graph_converter_without_calib)": [[49, "neural_compressor.adaptor.tf_utils.graph_converter_without_calib.GraphConverterWithoutCalib"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[49, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "bf16convert (class in neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert)": [[50, "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.BF16Convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "dequantizecastoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer)": [[51, "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer.DequantizeCastOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer": [[51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "convertaddtobiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd)": [[53, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "convertlayoutoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout)": [[54, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "convertleakyreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu)": [[55, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "convertnantorandom (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random)": [[56, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "convertplaceholdertoconst (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const)": [[57, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "dilatedcontraction (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction)": [[58, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.DilatedContraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "injectdummybiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd)": [[59, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "expanddimsoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer)": [[60, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "fetchweightfromreshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape)": [[61, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "foldbatchnormnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm)": [[62, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "graphfoldconstantoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant)": [[63, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "fusebiasaddandaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add)": [[64, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "fusecolumnwisemuloptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul)": [[65, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "fuseconvwithmathoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "fusedecomposedbnoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.FuseDecomposedBNOptimizer"]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.bypass_reshape"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.values_from_const"]], "fusedecomposedinoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.FuseDecomposedINOptimizer"]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.bypass_reshape"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.values_from_const"]], "fusegeluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu)": [[69, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "fuselayernormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_name_from_input"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.values_from_const"]], "fusepadwithconv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv)": [[71, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "fusepadwithfp32conv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv)": [[72, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "fusetransposereshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose)": [[73, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "graphcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer)": [[74, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "grappleroptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass)": [[75, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "insertprintminmaxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node)": [[77, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "movesqueezeafterreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu)": [[78, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "preoptimization (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize)": [[79, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.PreOptimization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "removetrainingnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes)": [[80, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "renamebatchnormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm)": [[81, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "splitsharedinputoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input)": [[82, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "stripequivalentnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes)": [[83, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "stripunusednodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes)": [[84, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "switchoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer)": [[85, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "graphrewriterbase (class in neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base)": [[86, "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "freezefakequantopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "freezevaluetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value)": [[89, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "freezevaluewithoutcalibtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "fuseconvredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "fuseconvrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize)": [[92, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "fusematmulredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "fusematmulrequantizedequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer"]], "fusematmulrequantizedequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer"]], "fusematmulrequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer"]], "fusematmulrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "metainfochangingmemopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "posthostconstconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "postcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "quantizedrnnconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "scalepropagationtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"]], "onnxgraph (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph)": [[102, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"]], "onnxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"]], "onnxopschema (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.OnnxOpSchema"]], "get_max_supported_opset_version() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.get_max_supported_opset_version"]], "get_schema() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.get_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"]], "seqtype (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.SeqType"]], "add_port_to_name() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.add_port_to_name"]], "are_shapes_equal() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.are_shapes_equal"]], "assert_error() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.assert_error"]], "compute_const_folding_using_tf() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.compute_const_folding_using_tf"]], "convert_tensorflow_tensor_to_onnx() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.convert_tensorflow_tensor_to_onnx"]], "find_opset() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.find_opset"]], "get_index_from_strided_slice_of_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_index_from_strided_slice_of_shape"]], "get_subgraphs_from_onnx() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_subgraphs_from_onnx"]], "get_tensorflow_node_attr() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_node_attr"]], "get_tensorflow_node_shape_attr() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_node_shape_attr"]], "get_tensorflow_tensor_data() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_tensor_data"]], "get_tensorflow_tensor_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_tensor_shape"]], "infer_onnx_shape_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.infer_onnx_shape_dtype"]], "initialize_name_counter() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.initialize_name_counter"]], "is_list_or_tuple() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.is_list_or_tuple"]], "is_onnx_domain() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.is_onnx_domain"]], "make_onnx_inputs_outputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.make_onnx_inputs_outputs"]], "make_onnx_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.make_onnx_shape"]], "map_numpy_to_onnx_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_numpy_to_onnx_dtype"]], "map_onnx_to_numpy_type() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_onnx_to_numpy_type"]], "map_tensorflow_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_tensorflow_dtype"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"]], "read_tensorflow_node_attrs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.read_tensorflow_node_attrs"]], "save_protobuf() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.save_protobuf"]], "set_name() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.set_name"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "generategraphwithqdqpattern (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern)": [[107, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "mergeduplicatedqdqoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq)": [[108, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "shareqdqforitexypatternoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern)": [[109, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[109, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "graphanalyzer (class in neural_compressor.adaptor.tf_utils.graph_util)": [[110, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer"]], "graphrewriterhelper (class in neural_compressor.adaptor.tf_utils.graph_util)": [[110, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper"]], "neural_compressor.adaptor.tf_utils.graph_util": [[110, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "neural_compressor.adaptor.tf_utils": [[111, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[112, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "fakequantize (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[113, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantize"]], "fakequantizebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[113, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "quantizeconfig (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config)": [[115, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "init_quantize_config() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[116, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.init_quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "qat_clone_function() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[116, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "config_quantizable_layers() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer)": [[118, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer.config_quantizable_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "quantizelayeradd (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add)": [[119, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add.QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "quantizelayerbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base)": [[120, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base.QuantizeLayerBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "quantizelayerbatchnormalization (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn.QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "quantizewrapper (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper"]], "quantizewrapperbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn)": [[123, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2)": [[124, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv)": [[125, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "fusenodestartwithdeconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv)": [[126, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "fusenodestartwithfusedinstancenorm (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in)": [[127, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul)": [[128, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling)": [[129, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "optimizeqdqgraph (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq)": [[131, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "quantizegraphbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[132, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase"]], "quantizenodebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[132, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2)": [[134, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "quantizegraphforintel (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu)": [[136, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul)": [[137, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling)": [[138, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[138, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "quantizegraphhelper (class in neural_compressor.adaptor.tf_utils.quantize_graph_common)": [[139, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[139, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "smoothquantcalibration (class in neural_compressor.adaptor.tf_utils.smooth_quant_calibration)": [[140, "neural_compressor.adaptor.tf_utils.smooth_quant_calibration.SmoothQuantCalibration"]], "smoothquantcalibrationllm (class in neural_compressor.adaptor.tf_utils.smooth_quant_calibration)": [[140, "neural_compressor.adaptor.tf_utils.smooth_quant_calibration.SmoothQuantCalibrationLLM"]], "neural_compressor.adaptor.tf_utils.smooth_quant_calibration": [[140, "module-neural_compressor.adaptor.tf_utils.smooth_quant_calibration"]], "smoothquantscaler (class in neural_compressor.adaptor.tf_utils.smooth_quant_scaler)": [[141, "neural_compressor.adaptor.tf_utils.smooth_quant_scaler.SmoothQuantScaler"]], "smoothquantscalerllm (class in neural_compressor.adaptor.tf_utils.smooth_quant_scaler)": [[141, "neural_compressor.adaptor.tf_utils.smooth_quant_scaler.SmoothQuantScalerLLM"]], "neural_compressor.adaptor.tf_utils.smooth_quant_scaler": [[141, "module-neural_compressor.adaptor.tf_utils.smooth_quant_scaler"]], "tensorflowqdqtoonnxqdqconverter (class in neural_compressor.adaptor.tf_utils.tf2onnx_converter)": [[142, "neural_compressor.adaptor.tf_utils.tf2onnx_converter.TensorflowQDQToOnnxQDQConverter"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[142, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"]], "biascorrection (class in neural_compressor.adaptor.tf_utils.transform_graph.bias_correction)": [[143, "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.BiasCorrection"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[143, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "graphtransformbase (class in neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base)": [[144, "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[144, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[145, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "insertlogging (class in neural_compressor.adaptor.tf_utils.transform_graph.insert_logging)": [[146, "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.InsertLogging"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[146, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "rerangequantizedconcat (class in neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat)": [[147, "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[147, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "apply_inlining() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.apply_inlining"]], "collate_tf_preds() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.collate_tf_preds"]], "construct_function_from_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.construct_function_from_graph_def"]], "disable_random() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.disable_random"]], "fix_ref_type_of_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.fix_ref_type_of_graph_def"]], "generate_feed_dict() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.generate_feed_dict"]], "get_estimator_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_estimator_graph"]], "get_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_graph_def"]], "get_input_output_node_names() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_input_output_node_names"]], "get_model_input_shape() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_model_input_shape"]], "get_tensor_by_name() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_tensor_by_name"]], "get_tensor_val_from_graph_node() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_tensor_val_from_graph_node"]], "get_weight_from_input_tensor() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_weight_from_input_tensor"]], "int8_node_name_reverse() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.int8_node_name_reverse"]], "is_ckpt_format() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.is_ckpt_format"]], "is_saved_model_format() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.is_saved_model_format"]], "iterator_sess_run() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.iterator_sess_run"]], "neural_compressor.adaptor.tf_utils.util": [[148, "module-neural_compressor.adaptor.tf_utils.util"]], "parse_saved_model() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.parse_saved_model"]], "read_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.read_graph"]], "reconstruct_saved_model() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.reconstruct_saved_model"]], "strip_equivalent_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.strip_equivalent_nodes"]], "strip_unused_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.strip_unused_nodes"]], "tf_diagnosis_helper() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.tf_diagnosis_helper"]], "version1_eq_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.version1_lte_version2"]], "write_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.write_graph"]], "neural_compressor.adaptor.torch_utils.auto_round": [[149, "module-neural_compressor.adaptor.torch_utils.auto_round"]], "autoadamround (class in neural_compressor.adaptor.torch_utils.autoround.autoround)": [[150, "neural_compressor.adaptor.torch_utils.autoround.autoround.AutoAdamRound"]], "autooptround (class in neural_compressor.adaptor.torch_utils.autoround.autoround)": [[150, "neural_compressor.adaptor.torch_utils.autoround.autoround.AutoOPTRound"]], "autoround (class in neural_compressor.adaptor.torch_utils.autoround.autoround)": [[150, "neural_compressor.adaptor.torch_utils.autoround.autoround.AutoRound"]], "saveinputs (class in neural_compressor.adaptor.torch_utils.autoround.autoround)": [[150, "neural_compressor.adaptor.torch_utils.autoround.autoround.SaveInputs"]], "wrappermultiblock (class in neural_compressor.adaptor.torch_utils.autoround.autoround)": [[150, "neural_compressor.adaptor.torch_utils.autoround.autoround.WrapperMultiblock"]], "block_forward() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[150, "neural_compressor.adaptor.torch_utils.autoround.autoround.block_forward"]], "check_is_cpu() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[150, "neural_compressor.adaptor.torch_utils.autoround.autoround.check_is_cpu"]], "collect_minmax_scale() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[150, "neural_compressor.adaptor.torch_utils.autoround.autoround.collect_minmax_scale"]], "collect_round_v() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[150, "neural_compressor.adaptor.torch_utils.autoround.autoround.collect_round_v"]], "get_batch_dim() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[150, "neural_compressor.adaptor.torch_utils.autoround.autoround.get_batch_dim"]], "get_block_names() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[150, "neural_compressor.adaptor.torch_utils.autoround.autoround.get_block_names"]], "get_dataloader() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[150, "neural_compressor.adaptor.torch_utils.autoround.autoround.get_dataloader"]], "get_module() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[150, "neural_compressor.adaptor.torch_utils.autoround.autoround.get_module"]], "get_scale_shape() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[150, "neural_compressor.adaptor.torch_utils.autoround.autoround.get_scale_shape"]], "get_tokenizer_function() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[150, "neural_compressor.adaptor.torch_utils.autoround.autoround.get_tokenizer_function"]], "move_input_to_device() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[150, "neural_compressor.adaptor.torch_utils.autoround.autoround.move_input_to_device"]], "neural_compressor.adaptor.torch_utils.autoround.autoround": [[150, "module-neural_compressor.adaptor.torch_utils.autoround.autoround"]], "quant_weight() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[150, "neural_compressor.adaptor.torch_utils.autoround.autoround.quant_weight"]], "quant_weight_actor() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[150, "neural_compressor.adaptor.torch_utils.autoround.autoround.quant_weight_actor"]], "quant_weight_asym() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[150, "neural_compressor.adaptor.torch_utils.autoround.autoround.quant_weight_asym"]], "quant_weight_sym() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[150, "neural_compressor.adaptor.torch_utils.autoround.autoround.quant_weight_sym"]], "quant_weight_w_scale() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[150, "neural_compressor.adaptor.torch_utils.autoround.autoround.quant_weight_w_scale"]], "round_ste() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[150, "neural_compressor.adaptor.torch_utils.autoround.autoround.round_ste"]], "sampling_inputs() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[150, "neural_compressor.adaptor.torch_utils.autoround.autoround.sampling_inputs"]], "set_module() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[150, "neural_compressor.adaptor.torch_utils.autoround.autoround.set_module"]], "unwrapper_block() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[150, "neural_compressor.adaptor.torch_utils.autoround.autoround.unwrapper_block"]], "wrapper_block() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[150, "neural_compressor.adaptor.torch_utils.autoround.autoround.wrapper_block"]], "export_compressed_model() (in module neural_compressor.adaptor.torch_utils.autoround.export)": [[151, "neural_compressor.adaptor.torch_utils.autoround.export.export_compressed_model"]], "neural_compressor.adaptor.torch_utils.autoround.export": [[151, "module-neural_compressor.adaptor.torch_utils.autoround.export"]], "neural_compressor.adaptor.torch_utils.autoround": [[152, "module-neural_compressor.adaptor.torch_utils.autoround"]], "neural_compressor.adaptor.torch_utils.autoround.model_wrapper": [[153, "module-neural_compressor.adaptor.torch_utils.autoround.model_wrapper"]], "sgd (class in neural_compressor.adaptor.torch_utils.autoround.sign_sgd)": [[154, "neural_compressor.adaptor.torch_utils.autoround.sign_sgd.SGD"]], "neural_compressor.adaptor.torch_utils.autoround.sign_sgd": [[154, "module-neural_compressor.adaptor.torch_utils.autoround.sign_sgd"]], "sgd() (in module neural_compressor.adaptor.torch_utils.autoround.sign_sgd)": [[154, "neural_compressor.adaptor.torch_utils.autoround.sign_sgd.sgd"]], "actawareweightquant (class in neural_compressor.adaptor.torch_utils.awq)": [[155, "neural_compressor.adaptor.torch_utils.awq.ActAwareWeightQuant"]], "neural_compressor.adaptor.torch_utils.awq": [[155, "module-neural_compressor.adaptor.torch_utils.awq"]], "bf16modulewrapper (class in neural_compressor.adaptor.torch_utils.bf16_convert)": [[156, "neural_compressor.adaptor.torch_utils.bf16_convert.BF16ModuleWrapper"]], "convert() (in module neural_compressor.adaptor.torch_utils.bf16_convert)": [[156, "neural_compressor.adaptor.torch_utils.bf16_convert.Convert"]], "bf16_symbolic_trace() (in module neural_compressor.adaptor.torch_utils.bf16_convert)": [[156, "neural_compressor.adaptor.torch_utils.bf16_convert.bf16_symbolic_trace"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[156, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "gptq (class in neural_compressor.adaptor.torch_utils.gptq)": [[157, "neural_compressor.adaptor.torch_utils.gptq.GPTQ"]], "gptquantizer (class in neural_compressor.adaptor.torch_utils.gptq)": [[157, "neural_compressor.adaptor.torch_utils.gptq.GPTQuantizer"]], "find_layers() (in module neural_compressor.adaptor.torch_utils.gptq)": [[157, "neural_compressor.adaptor.torch_utils.gptq.find_layers"]], "find_layers_name() (in module neural_compressor.adaptor.torch_utils.gptq)": [[157, "neural_compressor.adaptor.torch_utils.gptq.find_layers_name"]], "is_leaf() (in module neural_compressor.adaptor.torch_utils.gptq)": [[157, "neural_compressor.adaptor.torch_utils.gptq.is_leaf"]], "log_quantizable_layers_per_transformer() (in module neural_compressor.adaptor.torch_utils.gptq)": [[157, "neural_compressor.adaptor.torch_utils.gptq.log_quantizable_layers_per_transformer"]], "neural_compressor.adaptor.torch_utils.gptq": [[157, "module-neural_compressor.adaptor.torch_utils.gptq"]], "quantize() (in module neural_compressor.adaptor.torch_utils.gptq)": [[157, "neural_compressor.adaptor.torch_utils.gptq.quantize"]], "trace_gptq_target_blocks() (in module neural_compressor.adaptor.torch_utils.gptq)": [[157, "neural_compressor.adaptor.torch_utils.gptq.trace_gptq_target_blocks"]], "hessiantrace (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[158, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace"]], "node_collector (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[158, "neural_compressor.adaptor.torch_utils.hawq_metric.Node_collector"]], "compare_weights() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[158, "neural_compressor.adaptor.torch_utils.hawq_metric.compare_weights"]], "hawq_top() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[158, "neural_compressor.adaptor.torch_utils.hawq_metric.hawq_top"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[158, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[159, "module-neural_compressor.adaptor.torch_utils"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant": [[160, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant"]], "pickleerror": [[161, "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle.PickleError"], [588, "neural_compressor.torch.algorithms.layer_wise.modified_pickle.PickleError"]], "picklingerror": [[161, "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle.PicklingError"], [588, "neural_compressor.torch.algorithms.layer_wise.modified_pickle.PicklingError"]], "unpicklingerror": [[161, "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle.UnpicklingError"], [588, "neural_compressor.torch.algorithms.layer_wise.modified_pickle.UnpicklingError"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle": [[161, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle"]], "layerwisequant (class in neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize)": [[162, "neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize.LayerWiseQuant"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize": [[162, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize"]], "load() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load)": [[163, "neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load.load"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load": [[163, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load"]], "dowload_hf_model() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[164, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.dowload_hf_model"]], "get_children() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[164, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.get_children"]], "get_module() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[164, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.get_module"]], "get_named_children() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[164, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.get_named_children"]], "get_super_module_by_name() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[164, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.get_super_module_by_name"]], "load_empty_model() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[164, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.load_empty_model"]], "load_layer_wise_quantized_model() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[164, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.load_layer_wise_quantized_model"]], "load_tensor() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[164, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.load_tensor"]], "load_tensor_from_shard() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[164, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.load_tensor_from_shard"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils": [[164, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.utils"]], "update_module() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[164, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.update_module"]], "ipex_mixed_precision() (in module neural_compressor.adaptor.torch_utils.mixed_precision)": [[165, "neural_compressor.adaptor.torch_utils.mixed_precision.ipex_mixed_precision"]], "neural_compressor.adaptor.torch_utils.mixed_precision": [[165, "module-neural_compressor.adaptor.torch_utils.mixed_precision"]], "fakeaffinetensorquantfunction (class in neural_compressor.adaptor.torch_utils.model_wrapper)": [[166, "neural_compressor.adaptor.torch_utils.model_wrapper.FakeAffineTensorQuantFunction"]], "mullinear (class in neural_compressor.adaptor.torch_utils.model_wrapper)": [[166, "neural_compressor.adaptor.torch_utils.model_wrapper.MulLinear"]], "teqlinearfakequant (class in neural_compressor.adaptor.torch_utils.model_wrapper)": [[166, "neural_compressor.adaptor.torch_utils.model_wrapper.TEQLinearFakeQuant"]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[166, "module-neural_compressor.adaptor.torch_utils.model_wrapper"]], "transformerbasedmodelblockpatterndetector (class in neural_compressor.adaptor.torch_utils.pattern_detector)": [[167, "neural_compressor.adaptor.torch_utils.pattern_detector.TransformerBasedModelBlockPatternDetector"]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[167, "module-neural_compressor.adaptor.torch_utils.pattern_detector"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[168, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "symbolic_trace() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[168, "neural_compressor.adaptor.torch_utils.symbolic_trace.symbolic_trace"]], "trace_and_fuse_sub_graph() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[168, "neural_compressor.adaptor.torch_utils.symbolic_trace.trace_and_fuse_sub_graph"]], "tequantizer (class in neural_compressor.adaptor.torch_utils.teq)": [[169, "neural_compressor.adaptor.torch_utils.teq.TEQuantizer"]], "neural_compressor.adaptor.torch_utils.teq": [[169, "module-neural_compressor.adaptor.torch_utils.teq"]], "append_attr() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.append_attr"]], "auto_copy() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.auto_copy"]], "calculate_quant_min_max() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.calculate_quant_min_max"]], "calibration() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.calibration"]], "check_cfg_and_qconfig() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.check_cfg_and_qconfig"]], "collate_torch_preds() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.collate_torch_preds"]], "collect_weight_info() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.collect_weight_info"]], "fetch_module() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.fetch_module"]], "forward_wrapper() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.forward_wrapper"]], "generate_activation_observer() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.generate_activation_observer"]], "get_absorb_layers() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_absorb_layers"]], "get_block_prefix() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_block_prefix"]], "get_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_depth"]], "get_dict_at_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_dict_at_depth"]], "get_element_under_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_element_under_depth"]], "get_embedding_contiguous() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_embedding_contiguous"]], "get_example_input() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_example_input"]], "get_fallback_order() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_fallback_order"]], "get_hidden_states() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_hidden_states"]], "get_module_input_output() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_module_input_output"]], "get_mse_order_per_fp32() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_fp32"]], "get_mse_order_per_int8() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_int8"]], "get_op_type_by_name() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_op_type_by_name"]], "get_quantizable_ops_from_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_quantizable_ops_from_cfgs"]], "get_torch_version() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_torch_version"]], "input2tuple() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.input2tuple"]], "is_fused_module() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.is_fused_module"]], "match_datatype_pattern() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.match_datatype_pattern"]], "move_input_device() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.move_input_device"]], "neural_compressor.adaptor.torch_utils.util": [[170, "module-neural_compressor.adaptor.torch_utils.util"]], "paser_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.paser_cfgs"]], "set_module() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.set_module"]], "simple_inference() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.simple_inference"]], "update_sq_scale() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.update_sq_scale"]], "neural_compressor.adaptor.torch_utils.waq.auto_alpha": [[171, "module-neural_compressor.adaptor.torch_utils.waq.auto_alpha"]], "neural_compressor.adaptor.torch_utils.waq.calibration": [[172, "module-neural_compressor.adaptor.torch_utils.waq.calibration"]], "neural_compressor.adaptor.torch_utils.waq.graph_trace": [[173, "module-neural_compressor.adaptor.torch_utils.waq.graph_trace"]], "neural_compressor.adaptor.torch_utils.waq": [[174, "module-neural_compressor.adaptor.torch_utils.waq"]], "torchsmoothquant (class in neural_compressor.adaptor.torch_utils.waq.smooth_quant)": [[175, "neural_compressor.adaptor.torch_utils.waq.smooth_quant.TorchSmoothQuant"]], "neural_compressor.adaptor.torch_utils.waq.smooth_quant": [[175, "module-neural_compressor.adaptor.torch_utils.waq.smooth_quant"]], "get_module() (in module neural_compressor.adaptor.torch_utils.waq.utils)": [[176, "neural_compressor.adaptor.torch_utils.waq.utils.get_module"]], "neural_compressor.adaptor.torch_utils.waq.utils": [[176, "module-neural_compressor.adaptor.torch_utils.waq.utils"]], "register_autotune() (in module neural_compressor.adaptor.torch_utils.waq.utils)": [[176, "neural_compressor.adaptor.torch_utils.waq.utils.register_autotune"]], "reshape_in_channel_to_last() (in module neural_compressor.adaptor.torch_utils.waq.utils)": [[176, "neural_compressor.adaptor.torch_utils.waq.utils.reshape_in_channel_to_last"]], "reshape_scale_as_input() (in module neural_compressor.adaptor.torch_utils.waq.utils)": [[176, "neural_compressor.adaptor.torch_utils.waq.utils.reshape_scale_as_input"]], "reshape_scale_as_weight() (in module neural_compressor.adaptor.torch_utils.waq.utils)": [[176, "neural_compressor.adaptor.torch_utils.waq.utils.reshape_scale_as_weight"]], "set_module() (in module neural_compressor.adaptor.torch_utils.waq.utils)": [[176, "neural_compressor.adaptor.torch_utils.waq.utils.set_module"]], "autoround_quantize() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[177, "neural_compressor.adaptor.torch_utils.weight_only.autoround_quantize"]], "awq_quantize() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[177, "neural_compressor.adaptor.torch_utils.weight_only.awq_quantize"]], "gptq_quantize() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[177, "neural_compressor.adaptor.torch_utils.weight_only.gptq_quantize"]], "neural_compressor.adaptor.torch_utils.weight_only": [[177, "module-neural_compressor.adaptor.torch_utils.weight_only"]], "qdq_weight_actor() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[177, "neural_compressor.adaptor.torch_utils.weight_only.qdq_weight_actor"]], "qdq_weight_asym() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[177, "neural_compressor.adaptor.torch_utils.weight_only.qdq_weight_asym"]], "qdq_weight_sym() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[177, "neural_compressor.adaptor.torch_utils.weight_only.qdq_weight_sym"]], "quant_weight() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[177, "neural_compressor.adaptor.torch_utils.weight_only.quant_weight"]], "quant_weight_w_scale() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[177, "neural_compressor.adaptor.torch_utils.weight_only.quant_weight_w_scale"]], "quantize_4bit() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[177, "neural_compressor.adaptor.torch_utils.weight_only.quantize_4bit"]], "rtn_quantize() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[177, "neural_compressor.adaptor.torch_utils.weight_only.rtn_quantize"]], "search_clip() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[177, "neural_compressor.adaptor.torch_utils.weight_only.search_clip"]], "teq_quantize() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[177, "neural_compressor.adaptor.torch_utils.weight_only.teq_quantize"]], "algorithms (class in neural_compressor.algorithm.algorithm)": [[178, "neural_compressor.algorithm.algorithm.ALGORITHMS"]], "algorithm (class in neural_compressor.algorithm.algorithm)": [[178, "neural_compressor.algorithm.algorithm.Algorithm"]], "algorithmscheduler (class in neural_compressor.algorithm.algorithm)": [[178, "neural_compressor.algorithm.algorithm.AlgorithmScheduler"]], "algorithm_registry() (in module neural_compressor.algorithm.algorithm)": [[178, "neural_compressor.algorithm.algorithm.algorithm_registry"]], "neural_compressor.algorithm.algorithm": [[178, "module-neural_compressor.algorithm.algorithm"]], "fastbiascorrection (class in neural_compressor.algorithm.fast_bias_correction)": [[179, "neural_compressor.algorithm.fast_bias_correction.FastBiasCorrection"]], "neural_compressor.algorithm.fast_bias_correction": [[179, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[180, "module-neural_compressor.algorithm"]], "smoothquant (class in neural_compressor.algorithm.smooth_quant)": [[181, "neural_compressor.algorithm.smooth_quant.SmoothQuant"]], "neural_compressor.algorithm.smooth_quant": [[181, "module-neural_compressor.algorithm.smooth_quant"]], "weightcorrection (class in neural_compressor.algorithm.weight_correction)": [[182, "neural_compressor.algorithm.weight_correction.WeightCorrection"]], "neural_compressor.algorithm.weight_correction": [[182, "module-neural_compressor.algorithm.weight_correction"]], "benchmark_with_raw_cmd() (in module neural_compressor.benchmark)": [[183, "neural_compressor.benchmark.benchmark_with_raw_cmd"]], "call_one() (in module neural_compressor.benchmark)": [[183, "neural_compressor.benchmark.call_one"]], "config_instance() (in module neural_compressor.benchmark)": [[183, "neural_compressor.benchmark.config_instance"]], "fit() (in module neural_compressor.benchmark)": [[183, "neural_compressor.benchmark.fit"]], "generate_prefix() (in module neural_compressor.benchmark)": [[183, "neural_compressor.benchmark.generate_prefix"]], "get_architecture() (in module neural_compressor.benchmark)": [[183, "neural_compressor.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.benchmark)": [[183, "neural_compressor.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.benchmark)": [[183, "neural_compressor.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.benchmark)": [[183, "neural_compressor.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.benchmark)": [[183, "neural_compressor.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.benchmark)": [[183, "neural_compressor.benchmark.get_threads_per_core"]], "neural_compressor.benchmark": [[183, "module-neural_compressor.benchmark"]], "profile() (in module neural_compressor.benchmark)": [[183, "neural_compressor.benchmark.profile"]], "run_instance() (in module neural_compressor.benchmark)": [[183, "neural_compressor.benchmark.run_instance"]], "set_all_env_var() (in module neural_compressor.benchmark)": [[183, "neural_compressor.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.benchmark)": [[183, "neural_compressor.benchmark.set_env_var"]], "summary_benchmark() (in module neural_compressor.benchmark)": [[183, "neural_compressor.benchmark.summary_benchmark"]], "baseconfig (class in neural_compressor.common.base_config)": [[184, "neural_compressor.common.base_config.BaseConfig"]], "composableconfig (class in neural_compressor.common.base_config)": [[184, "neural_compressor.common.base_config.ComposableConfig"]], "neural_compressor.common.base_config": [[184, "module-neural_compressor.common.base_config"]], "register_config() (in module neural_compressor.common.base_config)": [[184, "neural_compressor.common.base_config.register_config"]], "register_supported_configs_for_fwk() (in module neural_compressor.common.base_config)": [[184, "neural_compressor.common.base_config.register_supported_configs_for_fwk"]], "evaluator (class in neural_compressor.common.base_tuning)": [[185, "neural_compressor.common.base_tuning.Evaluator"]], "sequentialsampler (class in neural_compressor.common.base_tuning)": [[185, "neural_compressor.common.base_tuning.SequentialSampler"]], "tuningconfig (class in neural_compressor.common.base_tuning)": [[185, "neural_compressor.common.base_tuning.TuningConfig"]], "neural_compressor.common.base_tuning": [[185, "module-neural_compressor.common.base_tuning"]], "neural_compressor.common": [[186, "module-neural_compressor.common"]], "paramlevel (class in neural_compressor.common.tuning_param)": [[187, "neural_compressor.common.tuning_param.ParamLevel"]], "tuningparam (class in neural_compressor.common.tuning_param)": [[187, "neural_compressor.common.tuning_param.TuningParam"]], "neural_compressor.common.tuning_param": [[187, "module-neural_compressor.common.tuning_param"]], "neural_compressor.common.utils.constants": [[188, "module-neural_compressor.common.utils.constants"]], "neural_compressor.common.utils": [[189, "module-neural_compressor.common.utils"]], "logger (class in neural_compressor.common.utils.logger)": [[190, "neural_compressor.common.utils.logger.Logger"]], "tuninglogger (class in neural_compressor.common.utils.logger)": [[190, "neural_compressor.common.utils.logger.TuningLogger"]], "neural_compressor.common.utils.logger": [[190, "module-neural_compressor.common.utils.logger"]], "load_config_mapping() (in module neural_compressor.common.utils.save_load)": [[191, "neural_compressor.common.utils.save_load.load_config_mapping"]], "neural_compressor.common.utils.save_load": [[191, "module-neural_compressor.common.utils.save_load"]], "save_config_mapping() (in module neural_compressor.common.utils.save_load)": [[191, "neural_compressor.common.utils.save_load.save_config_mapping"]], "dump_elapsed_time() (in module neural_compressor.common.utils.utility)": [[192, "neural_compressor.common.utils.utility.dump_elapsed_time"]], "neural_compressor.common.utils.utility": [[192, "module-neural_compressor.common.utils.utility"]], "set_random_seed() (in module neural_compressor.common.utils.utility)": [[192, "neural_compressor.common.utils.utility.set_random_seed"]], "set_resume_from() (in module neural_compressor.common.utils.utility)": [[192, "neural_compressor.common.utils.utility.set_resume_from"]], "set_tensorboard() (in module neural_compressor.common.utils.utility)": [[192, "neural_compressor.common.utils.utility.set_tensorboard"]], "set_workspace() (in module neural_compressor.common.utils.utility)": [[192, "neural_compressor.common.utils.utility.set_workspace"]], "basecallbacks (class in neural_compressor.compression.callbacks)": [[193, "neural_compressor.compression.callbacks.BaseCallbacks"]], "distillationcallbacks (class in neural_compressor.compression.callbacks)": [[193, "neural_compressor.compression.callbacks.DistillationCallbacks"]], "pruningcallbacks (class in neural_compressor.compression.callbacks)": [[193, "neural_compressor.compression.callbacks.PruningCallbacks"]], "quantizationawaretrainingcallbacks (class in neural_compressor.compression.callbacks)": [[193, "neural_compressor.compression.callbacks.QuantizationAwareTrainingCallbacks"]], "_epoch_ran (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[193, "neural_compressor.compression.callbacks.DistillationCallbacks._epoch_ran"]], "best_model (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[193, "neural_compressor.compression.callbacks.DistillationCallbacks.best_model"]], "best_score (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[193, "neural_compressor.compression.callbacks.DistillationCallbacks.best_score"]], "eval_frequency (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[193, "neural_compressor.compression.callbacks.DistillationCallbacks.eval_frequency"]], "neural_compressor.compression.callbacks": [[193, "module-neural_compressor.compression.callbacks"]], "criterions (class in neural_compressor.compression.distillation.criterions)": [[194, "neural_compressor.compression.distillation.criterions.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[194, "neural_compressor.compression.distillation.criterions.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.compression.distillation.criterions)": [[194, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[194, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationLoss"]], "pytorchcriterions (class in neural_compressor.compression.distillation.criterions)": [[194, "neural_compressor.compression.distillation.criterions.PyTorchCriterions"]], "pytorchcrossentropyloss (class in neural_compressor.compression.distillation.criterions)": [[194, "neural_compressor.compression.distillation.criterions.PyTorchCrossEntropyLoss"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[194, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[194, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[194, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[194, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLossWrapper"]], "pytorchselfknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[194, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLoss"]], "pytorchselfknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[194, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[194, "neural_compressor.compression.distillation.criterions.SelfKnowledgeDistillationLoss"]], "tensorflowcrossentropyloss (class in neural_compressor.compression.distillation.criterions)": [[194, "neural_compressor.compression.distillation.criterions.TensorFlowCrossEntropyLoss"]], "tensorflowsparsecategoricalcrossentropy (class in neural_compressor.compression.distillation.criterions)": [[194, "neural_compressor.compression.distillation.criterions.TensorFlowSparseCategoricalCrossentropy"]], "tensorflowcriterions (class in neural_compressor.compression.distillation.criterions)": [[194, "neural_compressor.compression.distillation.criterions.TensorflowCriterions"]], "tensorflowknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[194, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLoss"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.compression.distillation.criterions)": [[194, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossExternal"]], "tensorflowknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[194, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossWrapper"]], "criterion_registry() (in module neural_compressor.compression.distillation.criterions)": [[194, "neural_compressor.compression.distillation.criterions.criterion_registry"]], "neural_compressor.compression.distillation.criterions": [[194, "module-neural_compressor.compression.distillation.criterions"]], "neural_compressor.compression.distillation": [[195, "module-neural_compressor.compression.distillation"]], "optimizers (class in neural_compressor.compression.distillation.optimizers)": [[196, "neural_compressor.compression.distillation.optimizers.Optimizers"]], "pytorchoptimizers (class in neural_compressor.compression.distillation.optimizers)": [[196, "neural_compressor.compression.distillation.optimizers.PyTorchOptimizers"]], "pytorchsgd (class in neural_compressor.compression.distillation.optimizers)": [[196, "neural_compressor.compression.distillation.optimizers.PyTorchSGD"]], "tensorflowadam (class in neural_compressor.compression.distillation.optimizers)": [[196, "neural_compressor.compression.distillation.optimizers.TensorFlowAdam"]], "tensorflowadamw (class in neural_compressor.compression.distillation.optimizers)": [[196, "neural_compressor.compression.distillation.optimizers.TensorFlowAdamW"]], "tensorflowsgd (class in neural_compressor.compression.distillation.optimizers)": [[196, "neural_compressor.compression.distillation.optimizers.TensorFlowSGD"]], "tensorflowoptimizers (class in neural_compressor.compression.distillation.optimizers)": [[196, "neural_compressor.compression.distillation.optimizers.TensorflowOptimizers"]], "neural_compressor.compression.distillation.optimizers": [[196, "module-neural_compressor.compression.distillation.optimizers"]], "optimizer_registry() (in module neural_compressor.compression.distillation.optimizers)": [[196, "neural_compressor.compression.distillation.optimizers.optimizer_registry"]], "get_activation() (in module neural_compressor.compression.distillation.utility)": [[197, "neural_compressor.compression.distillation.utility.get_activation"]], "neural_compressor.compression.distillation.utility": [[197, "module-neural_compressor.compression.distillation.utility"]], "record_output() (in module neural_compressor.compression.distillation.utility)": [[197, "neural_compressor.compression.distillation.utility.record_output"]], "neural_compressor.compression.hpo": [[198, "module-neural_compressor.compression.hpo"]], "neural_compressor.compression.hpo.sa_optimizer": [[199, "module-neural_compressor.compression.hpo.sa_optimizer"]], "bayesianoptimizationsearcher (class in neural_compressor.compression.hpo.search_algorithms)": [[200, "neural_compressor.compression.hpo.search_algorithms.BayesianOptimizationSearcher"]], "gridsearcher (class in neural_compressor.compression.hpo.search_algorithms)": [[200, "neural_compressor.compression.hpo.search_algorithms.GridSearcher"]], "randomsearcher (class in neural_compressor.compression.hpo.search_algorithms)": [[200, "neural_compressor.compression.hpo.search_algorithms.RandomSearcher"]], "searcher (class in neural_compressor.compression.hpo.search_algorithms)": [[200, "neural_compressor.compression.hpo.search_algorithms.Searcher"]], "xgbsearcher (class in neural_compressor.compression.hpo.search_algorithms)": [[200, "neural_compressor.compression.hpo.search_algorithms.XgbSearcher"]], "neural_compressor.compression.hpo.search_algorithms": [[200, "module-neural_compressor.compression.hpo.search_algorithms"]], "register_searcher() (in module neural_compressor.compression.hpo.search_algorithms)": [[200, "neural_compressor.compression.hpo.search_algorithms.register_searcher"]], "basesearchspace (class in neural_compressor.compression.hpo.search_space)": [[201, "neural_compressor.compression.hpo.search_space.BaseSearchSpace"]], "continuoussearchspace (class in neural_compressor.compression.hpo.search_space)": [[201, "neural_compressor.compression.hpo.search_space.ContinuousSearchSpace"]], "discretesearchspace (class in neural_compressor.compression.hpo.search_space)": [[201, "neural_compressor.compression.hpo.search_space.DiscreteSearchSpace"]], "searchspace (class in neural_compressor.compression.hpo.search_space)": [[201, "neural_compressor.compression.hpo.search_space.SearchSpace"]], "neural_compressor.compression.hpo.search_space": [[201, "module-neural_compressor.compression.hpo.search_space"]], "register_searchspace() (in module neural_compressor.compression.hpo.search_space)": [[201, "neural_compressor.compression.hpo.search_space.register_searchspace"]], "neural_compressor.compression": [[202, "module-neural_compressor.compression"]], "blockmaskcriterion (class in neural_compressor.compression.pruner.criteria)": [[203, "neural_compressor.compression.pruner.criteria.BlockMaskCriterion"]], "gradientcriterion (class in neural_compressor.compression.pruner.criteria)": [[203, "neural_compressor.compression.pruner.criteria.GradientCriterion"]], "magnitudecriterion (class in neural_compressor.compression.pruner.criteria)": [[203, "neural_compressor.compression.pruner.criteria.MagnitudeCriterion"]], "pruningcriterion (class in neural_compressor.compression.pruner.criteria)": [[203, "neural_compressor.compression.pruner.criteria.PruningCriterion"]], "retrainfreecriterion (class in neural_compressor.compression.pruner.criteria)": [[203, "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion"]], "snipcriterion (class in neural_compressor.compression.pruner.criteria)": [[203, "neural_compressor.compression.pruner.criteria.SnipCriterion"]], "snipmomentumcriterion (class in neural_compressor.compression.pruner.criteria)": [[203, "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion"]], "get_criterion() (in module neural_compressor.compression.pruner.criteria)": [[203, "neural_compressor.compression.pruner.criteria.get_criterion"]], "neural_compressor.compression.pruner.criteria": [[203, "module-neural_compressor.compression.pruner.criteria"]], "register_criterion() (in module neural_compressor.compression.pruner.criteria)": [[203, "neural_compressor.compression.pruner.criteria.register_criterion"]], "scores (neural_compressor.compression.pruner.criteria.blockmaskcriterion attribute)": [[203, "neural_compressor.compression.pruner.criteria.BlockMaskCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.gradientcriterion attribute)": [[203, "neural_compressor.compression.pruner.criteria.GradientCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.magnitudecriterion attribute)": [[203, "neural_compressor.compression.pruner.criteria.MagnitudeCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.pruningcriterion attribute)": [[203, "neural_compressor.compression.pruner.criteria.PruningCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.retrainfreecriterion attribute)": [[203, "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.snipcriterion attribute)": [[203, "neural_compressor.compression.pruner.criteria.SnipCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.snipmomentumcriterion attribute)": [[203, "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion.scores"]], "dsnot() (in module neural_compressor.compression.pruner.dsnot)": [[204, "neural_compressor.compression.pruner.dsnot.DSnoT"]], "neural_compressor.compression.pruner.dsnot": [[204, "module-neural_compressor.compression.pruner.dsnot"]], "return_reorder_indice() (in module neural_compressor.compression.pruner.dsnot)": [[204, "neural_compressor.compression.pruner.dsnot.return_reorder_indice"]], "neural_compressor.compression.pruner": [[205, "module-neural_compressor.compression.pruner"]], "prepare_pruning() (in module neural_compressor.compression.pruner)": [[205, "neural_compressor.compression.pruner.prepare_pruning"]], "save() (in module neural_compressor.compression.pruner)": [[205, "neural_compressor.compression.pruner.save"]], "generate_ffn2_pruning_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[206, "neural_compressor.compression.pruner.model_slim.auto_slim.generate_ffn2_pruning_config"]], "generate_mha_pruning_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[206, "neural_compressor.compression.pruner.model_slim.auto_slim.generate_mha_pruning_config"]], "model_slim() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[206, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim"]], "model_slim_ffn2() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[206, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim_ffn2"]], "model_slim_mha() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[206, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim_mha"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[206, "module-neural_compressor.compression.pruner.model_slim.auto_slim"]], "parse_auto_slim_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[206, "neural_compressor.compression.pruner.model_slim.auto_slim.parse_auto_slim_config"]], "neural_compressor.compression.pruner.model_slim": [[207, "module-neural_compressor.compression.pruner.model_slim"]], "classifierheadsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[208, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher"]], "classifierheadsearchertf (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[208, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF"]], "jitbasicsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[208, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher"]], "linear2linearsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[208, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher"]], "recipesearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[208, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher"]], "selfmhasearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[208, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher"]], "current_pattern (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[208, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.current_pattern"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[208, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[208, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[208, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[208, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[208, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.device"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[208, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[208, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[208, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[208, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[208, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.flatten_static_graph"]], "get_attributes() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[208, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.get_attributes"]], "get_common_module() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[208, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.get_common_module"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[208, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[208, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[208, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[208, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[208, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[208, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.model"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[208, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"]], "print_iterables() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[208, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.print_iterables"]], "recipe (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[208, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.recipe"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[208, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.searching_results"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[208, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.searching_results"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[208, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.searching_results"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[208, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[208, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[208, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[208, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[208, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.static_graph"]], "target_layers (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[208, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.target_layers"]], "target_layers (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[208, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.target_layers"]], "target_op_lut (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[208, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.target_op_lut"]], "targets (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[208, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.targets"]], "linearcompression (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[209, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression"]], "linearcompressioniterator (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[209, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator"]], "postcompressionutils (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[209, "neural_compressor.compression.pruner.model_slim.weight_slim.PostCompressionUtils"]], "device (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[209, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.device"]], "layer_1 (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[209, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.layer_1"]], "layer_2 (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[209, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.layer_2"]], "linear_patterns (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompressioniterator attribute)": [[209, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator.linear_patterns"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[209, "module-neural_compressor.compression.pruner.model_slim.weight_slim"]], "basepattern (class in neural_compressor.compression.pruner.patterns.base)": [[210, "neural_compressor.compression.pruner.patterns.base.BasePattern"]], "kerasbasepattern (class in neural_compressor.compression.pruner.patterns.base)": [[210, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern"]], "pytorchbasepattern (class in neural_compressor.compression.pruner.patterns.base)": [[210, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern"]], "config (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[210, "neural_compressor.compression.pruner.patterns.base.BasePattern.config"]], "config (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[210, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.config"]], "config (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[210, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.config"]], "invalid_layers (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[210, "neural_compressor.compression.pruner.patterns.base.BasePattern.invalid_layers"]], "invalid_layers (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[210, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.invalid_layers"]], "invalid_layers (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[210, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.invalid_layers"]], "is_global (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[210, "neural_compressor.compression.pruner.patterns.base.BasePattern.is_global"]], "is_global (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[210, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.is_global"]], "is_global (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[210, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.is_global"]], "keep_mask_layers (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[210, "neural_compressor.compression.pruner.patterns.base.BasePattern.keep_mask_layers"]], "keep_mask_layers (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[210, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.keep_mask_layers"]], "keep_mask_layers (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[210, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.keep_mask_layers"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[210, "neural_compressor.compression.pruner.patterns.base.BasePattern.max_sparsity_ratio_per_op"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[210, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.max_sparsity_ratio_per_op"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[210, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.max_sparsity_ratio_per_op"]], "min_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[210, "neural_compressor.compression.pruner.patterns.base.BasePattern.min_sparsity_ratio_per_op"]], "min_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[210, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.min_sparsity_ratio_per_op"]], "min_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[210, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.min_sparsity_ratio_per_op"]], "modules (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[210, "neural_compressor.compression.pruner.patterns.base.BasePattern.modules"]], "modules (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[210, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.modules"]], "modules (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[210, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.modules"]], "neural_compressor.compression.pruner.patterns.base": [[210, "module-neural_compressor.compression.pruner.patterns.base"]], "pattern (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[210, "neural_compressor.compression.pruner.patterns.base.BasePattern.pattern"]], "pattern (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[210, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.pattern"]], "pattern (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[210, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.pattern"]], "register_pattern() (in module neural_compressor.compression.pruner.patterns.base)": [[210, "neural_compressor.compression.pruner.patterns.base.register_pattern"]], "target_sparsity (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[210, "neural_compressor.compression.pruner.patterns.base.BasePattern.target_sparsity"]], "target_sparsity (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[210, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.target_sparsity"]], "target_sparsity (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[210, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.target_sparsity"]], "get_pattern() (in module neural_compressor.compression.pruner.patterns)": [[211, "neural_compressor.compression.pruner.patterns.get_pattern"]], "neural_compressor.compression.pruner.patterns": [[211, "module-neural_compressor.compression.pruner.patterns"]], "m (neural_compressor.compression.pruner.patterns.mha.patternmha attribute)": [[212, "neural_compressor.compression.pruner.patterns.mha.PatternMHA.M"]], "n (neural_compressor.compression.pruner.patterns.mha.patternmha attribute)": [[212, "neural_compressor.compression.pruner.patterns.mha.PatternMHA.N"]], "patternmha (class in neural_compressor.compression.pruner.patterns.mha)": [[212, "neural_compressor.compression.pruner.patterns.mha.PatternMHA"]], "neural_compressor.compression.pruner.patterns.mha": [[212, "module-neural_compressor.compression.pruner.patterns.mha"]], "m (neural_compressor.compression.pruner.patterns.ninm.pytorchpatternninm attribute)": [[213, "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM.M"]], "n (neural_compressor.compression.pruner.patterns.ninm.pytorchpatternninm attribute)": [[213, "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM.N"]], "pytorchpatternninm (class in neural_compressor.compression.pruner.patterns.ninm)": [[213, "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM"]], "neural_compressor.compression.pruner.patterns.ninm": [[213, "module-neural_compressor.compression.pruner.patterns.ninm"]], "keraspatternnxm (class in neural_compressor.compression.pruner.patterns.nxm)": [[214, "neural_compressor.compression.pruner.patterns.nxm.KerasPatternNxM"]], "pytorchpatternnxm (class in neural_compressor.compression.pruner.patterns.nxm)": [[214, "neural_compressor.compression.pruner.patterns.nxm.PytorchPatternNxM"]], "block_size (neural_compressor.compression.pruner.patterns.nxm.keraspatternnxm attribute)": [[214, "neural_compressor.compression.pruner.patterns.nxm.KerasPatternNxM.block_size"]], "block_size (neural_compressor.compression.pruner.patterns.nxm.pytorchpatternnxm attribute)": [[214, "neural_compressor.compression.pruner.patterns.nxm.PytorchPatternNxM.block_size"]], "neural_compressor.compression.pruner.patterns.nxm": [[214, "module-neural_compressor.compression.pruner.patterns.nxm"]], "basepruner (class in neural_compressor.compression.pruner.pruners.base)": [[215, "neural_compressor.compression.pruner.pruners.base.BasePruner"]], "kerasbasepruner (class in neural_compressor.compression.pruner.pruners.base)": [[215, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner"]], "pytorchbasepruner (class in neural_compressor.compression.pruner.pruners.base)": [[215, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner"]], "config (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[215, "neural_compressor.compression.pruner.pruners.base.BasePruner.config"]], "config (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[215, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.config"]], "config (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[215, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.config"]], "current_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[215, "neural_compressor.compression.pruner.pruners.base.BasePruner.current_sparsity_ratio"]], "current_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[215, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.current_sparsity_ratio"]], "current_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[215, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.current_sparsity_ratio"]], "end_step (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[215, "neural_compressor.compression.pruner.pruners.base.BasePruner.end_step"]], "end_step (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[215, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.end_step"]], "end_step (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[215, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.end_step"]], "global_step (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[215, "neural_compressor.compression.pruner.pruners.base.BasePruner.global_step"]], "global_step (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[215, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.global_step"]], "global_step (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[215, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.global_step"]], "masks (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[215, "neural_compressor.compression.pruner.pruners.base.BasePruner.masks"]], "masks (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[215, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.masks"]], "masks (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[215, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.masks"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[215, "neural_compressor.compression.pruner.pruners.base.BasePruner.max_sparsity_ratio_per_op"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[215, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.max_sparsity_ratio_per_op"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[215, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.max_sparsity_ratio_per_op"]], "modules (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[215, "neural_compressor.compression.pruner.pruners.base.BasePruner.modules"]], "modules (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[215, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.modules"]], "modules (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[215, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.modules"]], "neural_compressor.compression.pruner.pruners.base": [[215, "module-neural_compressor.compression.pruner.pruners.base"]], "pattern (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[215, "neural_compressor.compression.pruner.pruners.base.BasePruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[215, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[215, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.pattern"]], "pruning_frequency (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[215, "neural_compressor.compression.pruner.pruners.base.BasePruner.pruning_frequency"]], "pruning_frequency (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[215, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.pruning_frequency"]], "pruning_frequency (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[215, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.pruning_frequency"]], "register_pruner() (in module neural_compressor.compression.pruner.pruners.base)": [[215, "neural_compressor.compression.pruner.pruners.base.register_pruner"]], "scheduler (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[215, "neural_compressor.compression.pruner.pruners.base.BasePruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[215, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[215, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.scheduler"]], "scores (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[215, "neural_compressor.compression.pruner.pruners.base.BasePruner.scores"]], "scores (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[215, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.scores"]], "scores (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[215, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.scores"]], "start_step (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[215, "neural_compressor.compression.pruner.pruners.base.BasePruner.start_step"]], "start_step (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[215, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.start_step"]], "start_step (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[215, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.start_step"]], "target_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[215, "neural_compressor.compression.pruner.pruners.base.BasePruner.target_sparsity_ratio"]], "target_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[215, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.target_sparsity_ratio"]], "target_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[215, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.target_sparsity_ratio"]], "kerasbasicpruner (class in neural_compressor.compression.pruner.pruners.basic)": [[216, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner"]], "pytorchbasicpruner (class in neural_compressor.compression.pruner.pruners.basic)": [[216, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner"]], "criterion (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[216, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.criterion"]], "criterion (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[216, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.criterion"]], "neural_compressor.compression.pruner.pruners.basic": [[216, "module-neural_compressor.compression.pruner.pruners.basic"]], "pattern (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[216, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[216, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.pattern"]], "reg (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[216, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.reg"]], "reg (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[216, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.reg"]], "scheduler (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[216, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[216, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.scheduler"]], "pytorchblockmaskpruner (class in neural_compressor.compression.pruner.pruners.block_mask)": [[217, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner"]], "criterion (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[217, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.criterion"]], "neural_compressor.compression.pruner.pruners.block_mask": [[217, "module-neural_compressor.compression.pruner.pruners.block_mask"]], "pattern (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[217, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.pattern"]], "reg (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[217, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.reg"]], "scheduler (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[217, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.scheduler"]], "get_pruner() (in module neural_compressor.compression.pruner.pruners)": [[218, "neural_compressor.compression.pruner.pruners.get_pruner"]], "neural_compressor.compression.pruner.pruners": [[218, "module-neural_compressor.compression.pruner.pruners"]], "parse_valid_pruner_types() (in module neural_compressor.compression.pruner.pruners)": [[218, "neural_compressor.compression.pruner.pruners.parse_valid_pruner_types"]], "pythonmultiheadattentionpruner (class in neural_compressor.compression.pruner.pruners.mha)": [[219, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner"]], "head_masks (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[219, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.head_masks"]], "linear_layers (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[219, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.linear_layers"]], "mha_compressions (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[219, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.mha_compressions"]], "mha_scores (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[219, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.mha_scores"]], "neural_compressor.compression.pruner.pruners.mha": [[219, "module-neural_compressor.compression.pruner.pruners.mha"]], "pytorchpatternlockpruner (class in neural_compressor.compression.pruner.pruners.pattern_lock)": [[220, "neural_compressor.compression.pruner.pruners.pattern_lock.PytorchPatternLockPruner"]], "neural_compressor.compression.pruner.pruners.pattern_lock": [[220, "module-neural_compressor.compression.pruner.pruners.pattern_lock"]], "pytorchprogressivepruner (class in neural_compressor.compression.pruner.pruners.progressive)": [[221, "neural_compressor.compression.pruner.pruners.progressive.PytorchProgressivePruner"]], "neural_compressor.compression.pruner.pruners.progressive": [[221, "module-neural_compressor.compression.pruner.pruners.progressive"]], "pytorchretrainfreepruner (class in neural_compressor.compression.pruner.pruners.retrain_free)": [[222, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner"]], "criterion (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[222, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.criterion"]], "neural_compressor.compression.pruner.pruners.retrain_free": [[222, "module-neural_compressor.compression.pruner.pruners.retrain_free"]], "pattern (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[222, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.pattern"]], "reg (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[222, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.reg"]], "scheduler (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[222, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.scheduler"]], "sparsegptpruner (class in neural_compressor.compression.pruner.pruners.sparse_gpt)": [[223, "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner"]], "criterion (neural_compressor.compression.pruner.pruners.sparse_gpt.sparsegptpruner attribute)": [[223, "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner.criterion"]], "neural_compressor.compression.pruner.pruners.sparse_gpt": [[223, "module-neural_compressor.compression.pruner.pruners.sparse_gpt"]], "pattern (neural_compressor.compression.pruner.pruners.sparse_gpt.sparsegptpruner attribute)": [[223, "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner.pattern"]], "reg (neural_compressor.compression.pruner.pruners.sparse_gpt.sparsegptpruner attribute)": [[223, "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner.reg"]], "scheduler (neural_compressor.compression.pruner.pruners.sparse_gpt.sparsegptpruner attribute)": [[223, "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner.scheduler"]], "basepruning (class in neural_compressor.compression.pruner.pruning)": [[224, "neural_compressor.compression.pruner.pruning.BasePruning"]], "basicpruning (class in neural_compressor.compression.pruner.pruning)": [[224, "neural_compressor.compression.pruner.pruning.BasicPruning"]], "retrainfreepruning (class in neural_compressor.compression.pruner.pruning)": [[224, "neural_compressor.compression.pruner.pruning.RetrainFreePruning"]], "sparsegptpruning (class in neural_compressor.compression.pruner.pruning)": [[224, "neural_compressor.compression.pruner.pruning.SparseGPTPruning"]], "config_file_path (neural_compressor.compression.pruner.pruning.basepruning attribute)": [[224, "neural_compressor.compression.pruner.pruning.BasePruning.config_file_path"]], "config_file_path (neural_compressor.compression.pruner.pruning.basicpruning attribute)": [[224, "neural_compressor.compression.pruner.pruning.BasicPruning.config_file_path"]], "config_file_path (neural_compressor.compression.pruner.pruning.retrainfreepruning attribute)": [[224, "neural_compressor.compression.pruner.pruning.RetrainFreePruning.config_file_path"]], "model (neural_compressor.compression.pruner.pruning.basepruning attribute)": [[224, "neural_compressor.compression.pruner.pruning.BasePruning.model"]], "model (neural_compressor.compression.pruner.pruning.basicpruning attribute)": [[224, "neural_compressor.compression.pruner.pruning.BasicPruning.model"]], "model (neural_compressor.compression.pruner.pruning.retrainfreepruning attribute)": [[224, "neural_compressor.compression.pruner.pruning.RetrainFreePruning.model"]], "neural_compressor.compression.pruner.pruning": [[224, "module-neural_compressor.compression.pruner.pruning"]], "pruner_info (neural_compressor.compression.pruner.pruning.basepruning attribute)": [[224, "neural_compressor.compression.pruner.pruning.BasePruning.pruner_info"]], "pruner_info (neural_compressor.compression.pruner.pruning.basicpruning attribute)": [[224, "neural_compressor.compression.pruner.pruning.BasicPruning.pruner_info"]], "pruner_info (neural_compressor.compression.pruner.pruning.retrainfreepruning attribute)": [[224, "neural_compressor.compression.pruner.pruning.RetrainFreePruning.pruner_info"]], "pruners (neural_compressor.compression.pruner.pruning.basepruning attribute)": [[224, "neural_compressor.compression.pruner.pruning.BasePruning.pruners"]], "pruners (neural_compressor.compression.pruner.pruning.basicpruning attribute)": [[224, "neural_compressor.compression.pruner.pruning.BasicPruning.pruners"]], "pruners (neural_compressor.compression.pruner.pruning.retrainfreepruning attribute)": [[224, "neural_compressor.compression.pruner.pruning.RetrainFreePruning.pruners"]], "register_pruning() (in module neural_compressor.compression.pruner.pruning)": [[224, "neural_compressor.compression.pruner.pruning.register_pruning"]], "basereg (class in neural_compressor.compression.pruner.regs)": [[225, "neural_compressor.compression.pruner.regs.BaseReg"]], "grouplasso (class in neural_compressor.compression.pruner.regs)": [[225, "neural_compressor.compression.pruner.regs.GroupLasso"]], "alpha (neural_compressor.compression.pruner.regs.grouplasso attribute)": [[225, "neural_compressor.compression.pruner.regs.GroupLasso.alpha"]], "get_reg() (in module neural_compressor.compression.pruner.regs)": [[225, "neural_compressor.compression.pruner.regs.get_reg"]], "get_reg_type() (in module neural_compressor.compression.pruner.regs)": [[225, "neural_compressor.compression.pruner.regs.get_reg_type"]], "neural_compressor.compression.pruner.regs": [[225, "module-neural_compressor.compression.pruner.regs"]], "reg_terms (neural_compressor.compression.pruner.regs.grouplasso attribute)": [[225, "neural_compressor.compression.pruner.regs.GroupLasso.reg_terms"]], "register_reg() (in module neural_compressor.compression.pruner.regs)": [[225, "neural_compressor.compression.pruner.regs.register_reg"]], "iterativescheduler (class in neural_compressor.compression.pruner.schedulers)": [[226, "neural_compressor.compression.pruner.schedulers.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.compression.pruner.schedulers)": [[226, "neural_compressor.compression.pruner.schedulers.OneshotScheduler"]], "pruningscheduler (class in neural_compressor.compression.pruner.schedulers)": [[226, "neural_compressor.compression.pruner.schedulers.PruningScheduler"]], "config (neural_compressor.compression.pruner.schedulers.pruningscheduler attribute)": [[226, "neural_compressor.compression.pruner.schedulers.PruningScheduler.config"]], "get_scheduler() (in module neural_compressor.compression.pruner.schedulers)": [[226, "neural_compressor.compression.pruner.schedulers.get_scheduler"]], "neural_compressor.compression.pruner.schedulers": [[226, "module-neural_compressor.compression.pruner.schedulers"]], "register_scheduler() (in module neural_compressor.compression.pruner.schedulers)": [[226, "neural_compressor.compression.pruner.schedulers.register_scheduler"]], "magnitudecriterion (class in neural_compressor.compression.pruner.tf_criteria)": [[227, "neural_compressor.compression.pruner.tf_criteria.MagnitudeCriterion"]], "pruningcriterion (class in neural_compressor.compression.pruner.tf_criteria)": [[227, "neural_compressor.compression.pruner.tf_criteria.PruningCriterion"]], "get_tf_criterion() (in module neural_compressor.compression.pruner.tf_criteria)": [[227, "neural_compressor.compression.pruner.tf_criteria.get_tf_criterion"]], "neural_compressor.compression.pruner.tf_criteria": [[227, "module-neural_compressor.compression.pruner.tf_criteria"]], "register_criterion() (in module neural_compressor.compression.pruner.tf_criteria)": [[227, "neural_compressor.compression.pruner.tf_criteria.register_criterion"]], "scores (neural_compressor.compression.pruner.tf_criteria.magnitudecriterion attribute)": [[227, "neural_compressor.compression.pruner.tf_criteria.MagnitudeCriterion.scores"]], "scores (neural_compressor.compression.pruner.tf_criteria.pruningcriterion attribute)": [[227, "neural_compressor.compression.pruner.tf_criteria.PruningCriterion.scores"]], "check_config() (in module neural_compressor.compression.pruner.utils)": [[228, "neural_compressor.compression.pruner.utils.check_config"]], "check_key_validity() (in module neural_compressor.compression.pruner.utils)": [[228, "neural_compressor.compression.pruner.utils.check_key_validity"]], "collect_layer_inputs() (in module neural_compressor.compression.pruner.utils)": [[228, "neural_compressor.compression.pruner.utils.collect_layer_inputs"]], "generate_pruner_config() (in module neural_compressor.compression.pruner.utils)": [[228, "neural_compressor.compression.pruner.utils.generate_pruner_config"]], "get_layers() (in module neural_compressor.compression.pruner.utils)": [[228, "neural_compressor.compression.pruner.utils.get_layers"]], "get_sparsity_ratio() (in module neural_compressor.compression.pruner.utils)": [[228, "neural_compressor.compression.pruner.utils.get_sparsity_ratio"]], "get_sparsity_ratio_tf() (in module neural_compressor.compression.pruner.utils)": [[228, "neural_compressor.compression.pruner.utils.get_sparsity_ratio_tf"]], "neural_compressor.compression.pruner.utils": [[228, "module-neural_compressor.compression.pruner.utils"]], "parse_last_linear() (in module neural_compressor.compression.pruner.utils)": [[228, "neural_compressor.compression.pruner.utils.parse_last_linear"]], "parse_last_linear_tf() (in module neural_compressor.compression.pruner.utils)": [[228, "neural_compressor.compression.pruner.utils.parse_last_linear_tf"]], "parse_to_prune() (in module neural_compressor.compression.pruner.utils)": [[228, "neural_compressor.compression.pruner.utils.parse_to_prune"]], "parse_to_prune_tf() (in module neural_compressor.compression.pruner.utils)": [[228, "neural_compressor.compression.pruner.utils.parse_to_prune_tf"]], "process_and_check_config() (in module neural_compressor.compression.pruner.utils)": [[228, "neural_compressor.compression.pruner.utils.process_and_check_config"]], "process_config() (in module neural_compressor.compression.pruner.utils)": [[228, "neural_compressor.compression.pruner.utils.process_config"]], "process_weight_config() (in module neural_compressor.compression.pruner.utils)": [[228, "neural_compressor.compression.pruner.utils.process_weight_config"]], "process_yaml_config() (in module neural_compressor.compression.pruner.utils)": [[228, "neural_compressor.compression.pruner.utils.process_yaml_config"]], "reset_none_to_default() (in module neural_compressor.compression.pruner.utils)": [[228, "neural_compressor.compression.pruner.utils.reset_none_to_default"]], "update_params() (in module neural_compressor.compression.pruner.utils)": [[228, "neural_compressor.compression.pruner.utils.update_params"]], "neural_compressor.compression.pruner.wanda": [[229, "module-neural_compressor.compression.pruner.wanda"]], "neural_compressor.compression.pruner.wanda.prune": [[230, "module-neural_compressor.compression.pruner.wanda.prune"]], "prune_wanda() (in module neural_compressor.compression.pruner.wanda.prune)": [[230, "neural_compressor.compression.pruner.wanda.prune.prune_wanda"]], "find_layers() (in module neural_compressor.compression.pruner.wanda.utils)": [[231, "neural_compressor.compression.pruner.wanda.utils.find_layers"]], "neural_compressor.compression.pruner.wanda.utils": [[231, "module-neural_compressor.compression.pruner.wanda.utils"]], "wrappedgpt (class in neural_compressor.compression.pruner.wanda.wrapper)": [[232, "neural_compressor.compression.pruner.wanda.wrapper.WrappedGPT"]], "neural_compressor.compression.pruner.wanda.wrapper": [[232, "module-neural_compressor.compression.pruner.wanda.wrapper"]], "benchmark_conf (class in neural_compressor.conf.config)": [[233, "neural_compressor.conf.config.Benchmark_Conf"]], "conf (class in neural_compressor.conf.config)": [[233, "neural_compressor.conf.config.Conf"]], "defaultconf (class in neural_compressor.conf.config)": [[233, "neural_compressor.conf.config.DefaultConf"]], "distillation_conf (class in neural_compressor.conf.config)": [[233, "neural_compressor.conf.config.Distillation_Conf"]], "graph_optimization_conf (class in neural_compressor.conf.config)": [[233, "neural_compressor.conf.config.Graph_Optimization_Conf"]], "mixedprecision_conf (class in neural_compressor.conf.config)": [[233, "neural_compressor.conf.config.MixedPrecision_Conf"]], "nasconfig (class in neural_compressor.conf.config)": [[233, "neural_compressor.conf.config.NASConfig"]], "prunerv2 (class in neural_compressor.conf.config)": [[233, "neural_compressor.conf.config.PrunerV2"]], "pruning_conf (class in neural_compressor.conf.config)": [[233, "neural_compressor.conf.config.Pruning_Conf"]], "quantization_conf (class in neural_compressor.conf.config)": [[233, "neural_compressor.conf.config.Quantization_Conf"]], "neural_compressor.conf.config": [[233, "module-neural_compressor.conf.config"]], "dotdict (class in neural_compressor.conf.dotdict)": [[234, "neural_compressor.conf.dotdict.DotDict"]], "deep_get() (in module neural_compressor.conf.dotdict)": [[234, "neural_compressor.conf.dotdict.deep_get"]], "deep_set() (in module neural_compressor.conf.dotdict)": [[234, "neural_compressor.conf.dotdict.deep_set"]], "neural_compressor.conf.dotdict": [[234, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[235, "module-neural_compressor.conf"]], "accuracycriterion (class in neural_compressor.conf.pythonic_config)": [[236, "neural_compressor.conf.pythonic_config.AccuracyCriterion"]], "benchmarkconfig (class in neural_compressor.conf.pythonic_config)": [[236, "neural_compressor.conf.pythonic_config.BenchmarkConfig"]], "distillationconfig (class in neural_compressor.conf.pythonic_config)": [[236, "neural_compressor.conf.pythonic_config.DistillationConfig"]], "knowledgedistillationlossconfig (class in neural_compressor.conf.pythonic_config)": [[236, "neural_compressor.conf.pythonic_config.KnowledgeDistillationLossConfig"]], "options (class in neural_compressor.conf.pythonic_config)": [[236, "neural_compressor.conf.pythonic_config.Options"]], "quantizationconfig (class in neural_compressor.conf.pythonic_config)": [[236, "neural_compressor.conf.pythonic_config.QuantizationConfig"]], "weightpruningconfig (class in neural_compressor.conf.pythonic_config)": [[236, "neural_compressor.conf.pythonic_config.WeightPruningConfig"]], "neural_compressor.conf.pythonic_config": [[236, "module-neural_compressor.conf.pythonic_config"]], "accuracycriterion (class in neural_compressor.config)": [[237, "neural_compressor.config.AccuracyCriterion"]], "benchmarkconfig (class in neural_compressor.config)": [[237, "neural_compressor.config.BenchmarkConfig"]], "distillationconfig (class in neural_compressor.config)": [[237, "neural_compressor.config.DistillationConfig"]], "dotdict (class in neural_compressor.config)": [[237, "neural_compressor.config.DotDict"]], "exportconfig (class in neural_compressor.config)": [[237, "neural_compressor.config.ExportConfig"]], "hpoconfig (class in neural_compressor.config)": [[237, "neural_compressor.config.HPOConfig"]], "intermediatelayersknowledgedistillationlossconfig (class in neural_compressor.config)": [[237, "neural_compressor.config.IntermediateLayersKnowledgeDistillationLossConfig"]], "keras (class in neural_compressor.config)": [[237, "neural_compressor.config.Keras"]], "knowledgedistillationlossconfig (class in neural_compressor.config)": [[237, "neural_compressor.config.KnowledgeDistillationLossConfig"]], "mxnet (class in neural_compressor.config)": [[237, "neural_compressor.config.MXNet"]], "mixedprecisionconfig (class in neural_compressor.config)": [[237, "neural_compressor.config.MixedPrecisionConfig"]], "nasconfig (class in neural_compressor.config)": [[237, "neural_compressor.config.NASConfig"]], "onnx (class in neural_compressor.config)": [[237, "neural_compressor.config.ONNX"]], "onnxqlinear2qdqconfig (class in neural_compressor.config)": [[237, "neural_compressor.config.ONNXQlinear2QDQConfig"]], "options (class in neural_compressor.config)": [[237, "neural_compressor.config.Options"]], "posttrainingquantconfig (class in neural_compressor.config)": [[237, "neural_compressor.config.PostTrainingQuantConfig"]], "pytorch (class in neural_compressor.config)": [[237, "neural_compressor.config.PyTorch"]], "quantizationawaretrainingconfig (class in neural_compressor.config)": [[237, "neural_compressor.config.QuantizationAwareTrainingConfig"]], "selfknowledgedistillationlossconfig (class in neural_compressor.config)": [[237, "neural_compressor.config.SelfKnowledgeDistillationLossConfig"]], "tf2onnxconfig (class in neural_compressor.config)": [[237, "neural_compressor.config.TF2ONNXConfig"]], "tensorflow (class in neural_compressor.config)": [[237, "neural_compressor.config.TensorFlow"]], "torch2onnxconfig (class in neural_compressor.config)": [[237, "neural_compressor.config.Torch2ONNXConfig"]], "tuningcriterion (class in neural_compressor.config)": [[237, "neural_compressor.config.TuningCriterion"]], "weightpruningconfig (class in neural_compressor.config)": [[237, "neural_compressor.config.WeightPruningConfig"]], "neural_compressor.config": [[237, "module-neural_compressor.config"]], "neural_compressor.contrib": [[238, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[239, "module-neural_compressor.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.contrib.strategy.sigopt)": [[240, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.sigopt": [[240, "module-neural_compressor.contrib.strategy.sigopt"]], "tpetunestrategy (class in neural_compressor.contrib.strategy.tpe)": [[241, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[241, "module-neural_compressor.contrib.strategy.tpe"]], "basedataloader (class in neural_compressor.data.dataloaders.base_dataloader)": [[242, "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader"]], "neural_compressor.data.dataloaders.base_dataloader": [[242, "module-neural_compressor.data.dataloaders.base_dataloader"]], "dataloader (class in neural_compressor.data.dataloaders.dataloader)": [[243, "neural_compressor.data.dataloaders.dataloader.DataLoader"]], "check_dataloader() (in module neural_compressor.data.dataloaders.dataloader)": [[243, "neural_compressor.data.dataloaders.dataloader.check_dataloader"]], "neural_compressor.data.dataloaders.dataloader": [[243, "module-neural_compressor.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.data.dataloaders.default_dataloader)": [[244, "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader"]], "default_collate() (in module neural_compressor.data.dataloaders.default_dataloader)": [[244, "neural_compressor.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.data.dataloaders.default_dataloader": [[244, "module-neural_compressor.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.data.dataloaders.fetcher)": [[245, "neural_compressor.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.data.dataloaders.fetcher)": [[245, "neural_compressor.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.data.dataloaders.fetcher)": [[245, "neural_compressor.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.data.dataloaders.fetcher": [[245, "module-neural_compressor.data.dataloaders.fetcher"]], "neural_compressor.data.dataloaders": [[246, "module-neural_compressor.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.data.dataloaders.mxnet_dataloader)": [[247, "neural_compressor.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[247, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[248, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[248, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[248, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.data.dataloaders.pytorch_dataloader)": [[249, "neural_compressor.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[249, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.data.dataloaders.sampler)": [[250, "neural_compressor.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.data.dataloaders.sampler)": [[250, "neural_compressor.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.data.dataloaders.sampler)": [[250, "neural_compressor.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.data.dataloaders.sampler)": [[250, "neural_compressor.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.data.dataloaders.sampler": [[250, "module-neural_compressor.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[251, "neural_compressor.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[251, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[251, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[251, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[251, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.data.datasets.bert_dataset)": [[252, "neural_compressor.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[252, "neural_compressor.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.data.datasets.bert_dataset)": [[252, "neural_compressor.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[252, "neural_compressor.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[252, "neural_compressor.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[252, "neural_compressor.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.data.datasets.bert_dataset)": [[252, "neural_compressor.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.data.datasets.bert_dataset)": [[252, "neural_compressor.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.data.datasets.bert_dataset": [[252, "module-neural_compressor.data.datasets.bert_dataset"]], "coconpy (class in neural_compressor.data.datasets.coco_dataset)": [[253, "neural_compressor.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.data.datasets.coco_dataset)": [[253, "neural_compressor.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.data.datasets.coco_dataset)": [[253, "neural_compressor.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.data.datasets.coco_dataset)": [[253, "neural_compressor.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.data.datasets.coco_dataset": [[253, "module-neural_compressor.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.data.datasets.dataset)": [[254, "neural_compressor.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.data.datasets.dataset)": [[254, "neural_compressor.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.data.datasets.dataset)": [[254, "neural_compressor.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.data.datasets.dataset)": [[254, "neural_compressor.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.data.datasets.dataset)": [[254, "neural_compressor.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.data.datasets.dataset)": [[254, "neural_compressor.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.data.datasets.dataset)": [[254, "neural_compressor.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.data.datasets.dataset)": [[254, "neural_compressor.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.data.datasets.dataset)": [[254, "neural_compressor.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.data.datasets.dataset)": [[254, "neural_compressor.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.data.datasets.dataset)": [[254, "neural_compressor.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.data.datasets.dataset)": [[254, "neural_compressor.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.data.datasets.dataset)": [[254, "neural_compressor.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.data.datasets.dataset)": [[254, "neural_compressor.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.data.datasets.dataset)": [[254, "neural_compressor.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.data.datasets.dataset)": [[254, "neural_compressor.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.data.datasets.dataset)": [[254, "neural_compressor.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.data.datasets.dataset)": [[254, "neural_compressor.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.data.datasets.dataset)": [[254, "neural_compressor.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.data.datasets.dataset)": [[254, "neural_compressor.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.data.datasets.dataset)": [[254, "neural_compressor.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.data.datasets.dataset)": [[254, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.datasets.dataset)": [[254, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflow (class in neural_compressor.data.datasets.dataset)": [[254, "neural_compressor.data.datasets.dataset.Tensorflow"]], "tensorflowcifar10 (class in neural_compressor.data.datasets.dataset)": [[254, "neural_compressor.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.data.datasets.dataset)": [[254, "neural_compressor.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.data.datasets.dataset)": [[254, "neural_compressor.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.data.datasets.dataset)": [[254, "neural_compressor.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagerecord (class in neural_compressor.data.datasets.dataset)": [[254, "neural_compressor.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.data.datasets.dataset)": [[254, "neural_compressor.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.data.datasets.dataset)": [[254, "neural_compressor.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.data.datasets.dataset)": [[254, "neural_compressor.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.data.datasets.dataset)": [[254, "neural_compressor.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.data.datasets.dataset)": [[254, "neural_compressor.data.datasets.dataset.check_integrity"]], "dataset_registry() (in module neural_compressor.data.datasets.dataset)": [[254, "neural_compressor.data.datasets.dataset.dataset_registry"]], "download_url() (in module neural_compressor.data.datasets.dataset)": [[254, "neural_compressor.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.data.datasets.dataset)": [[254, "neural_compressor.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.data.datasets.dataset)": [[254, "neural_compressor.data.datasets.dataset.gen_bar_updater"]], "neural_compressor.data.datasets.dataset": [[254, "module-neural_compressor.data.datasets.dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset)": [[255, "neural_compressor.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset": [[255, "module-neural_compressor.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[256, "neural_compressor.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[256, "neural_compressor.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[256, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[257, "neural_compressor.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[257, "neural_compressor.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[257, "neural_compressor.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[257, "neural_compressor.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[257, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[257, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.data.datasets.imagenet_dataset": [[257, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[258, "module-neural_compressor.data.datasets"]], "styletransferdataset (class in neural_compressor.data.datasets.style_transfer_dataset)": [[259, "neural_compressor.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.data.datasets.style_transfer_dataset": [[259, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.data.filters.coco_filter)": [[260, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.data.filters.coco_filter)": [[260, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.coco_filter": [[260, "module-neural_compressor.data.filters.coco_filter"]], "filters (class in neural_compressor.data.filters.filter)": [[261, "neural_compressor.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.data.filters.filter)": [[261, "neural_compressor.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.data.filters.filter)": [[261, "neural_compressor.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.data.filters.filter)": [[261, "neural_compressor.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.data.filters.filter)": [[261, "neural_compressor.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.data.filters.filter)": [[261, "neural_compressor.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.data.filters.filter)": [[261, "neural_compressor.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.data.filters.filter)": [[261, "neural_compressor.data.filters.filter.filter_registry"]], "neural_compressor.data.filters.filter": [[261, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[262, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[263, "module-neural_compressor.data"]], "parsedecodecocotransform (class in neural_compressor.data.transforms.coco_transform)": [[264, "neural_compressor.data.transforms.coco_transform.ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.coco_transform": [[264, "module-neural_compressor.data.transforms.coco_transform"]], "bilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[265, "neural_compressor.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.data.transforms.imagenet_transform)": [[265, "neural_compressor.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[265, "neural_compressor.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[265, "neural_compressor.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.data.transforms.imagenet_transform)": [[265, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[265, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.data.transforms.imagenet_transform)": [[265, "neural_compressor.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.data.transforms.imagenet_transform)": [[265, "neural_compressor.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[265, "neural_compressor.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "tensorflowshiftrescale (class in neural_compressor.data.transforms.imagenet_transform)": [[265, "neural_compressor.data.transforms.imagenet_transform.TensorflowShiftRescale"]], "tensorflowtransposelastchannel (class in neural_compressor.data.transforms.imagenet_transform)": [[265, "neural_compressor.data.transforms.imagenet_transform.TensorflowTransposeLastChannel"]], "neural_compressor.data.transforms.imagenet_transform": [[265, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[266, "module-neural_compressor.data.transforms"]], "postprocess (class in neural_compressor.data.transforms.postprocess)": [[267, "neural_compressor.data.transforms.postprocess.Postprocess"]], "neural_compressor.data.transforms.postprocess": [[267, "module-neural_compressor.data.transforms.postprocess"]], "basictokenizer (class in neural_compressor.data.transforms.tokenization)": [[268, "neural_compressor.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.data.transforms.tokenization)": [[268, "neural_compressor.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.data.transforms.tokenization)": [[268, "neural_compressor.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.data.transforms.tokenization)": [[268, "neural_compressor.data.transforms.tokenization.convert_by_vocab"]], "convert_to_unicode() (in module neural_compressor.data.transforms.tokenization)": [[268, "neural_compressor.data.transforms.tokenization.convert_to_unicode"]], "load_vocab() (in module neural_compressor.data.transforms.tokenization)": [[268, "neural_compressor.data.transforms.tokenization.load_vocab"]], "neural_compressor.data.transforms.tokenization": [[268, "module-neural_compressor.data.transforms.tokenization"]], "whitespace_tokenize() (in module neural_compressor.data.transforms.tokenization)": [[268, "neural_compressor.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.data.transforms.transform)": [[269, "neural_compressor.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.data.transforms.transform)": [[269, "neural_compressor.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.data.transforms.transform)": [[269, "neural_compressor.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.data.transforms.transform)": [[269, "neural_compressor.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.data.transforms.transform)": [[269, "neural_compressor.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.data.transforms.transform)": [[269, "neural_compressor.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.data.transforms.transform)": [[269, "neural_compressor.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.data.transforms.transform)": [[269, "neural_compressor.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.data.transforms.transform)": [[269, "neural_compressor.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.data.transforms.transform)": [[269, "neural_compressor.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.data.transforms.transform)": [[269, "neural_compressor.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.data.transforms.transform)": [[269, "neural_compressor.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.data.transforms.transform)": [[269, "neural_compressor.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.data.transforms.transform)": [[269, "neural_compressor.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[269, "neural_compressor.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.data.transforms.transform)": [[269, "neural_compressor.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.data.transforms.transform)": [[269, "neural_compressor.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.data.transforms.transform)": [[269, "neural_compressor.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.data.transforms.transform)": [[269, "neural_compressor.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.data.transforms.transform)": [[269, "neural_compressor.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[269, "neural_compressor.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.data.transforms.transform)": [[269, "neural_compressor.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.data.transforms.transform)": [[269, "neural_compressor.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.data.transforms.transform)": [[269, "neural_compressor.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.data.transforms.transform)": [[269, "neural_compressor.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.data.transforms.transform)": [[269, "neural_compressor.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.data.transforms.transform)": [[269, "neural_compressor.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.data.transforms.transform)": [[269, "neural_compressor.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.data.transforms.transform)": [[269, "neural_compressor.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.data.transforms.transform)": [[269, "neural_compressor.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.data.transforms.transform)": [[269, "neural_compressor.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.transforms.transform)": [[269, "neural_compressor.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.data.transforms.transform)": [[269, "neural_compressor.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.data.transforms.transform)": [[269, "neural_compressor.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[269, "neural_compressor.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.data.transforms.transform)": [[269, "neural_compressor.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.data.transforms.transform)": [[269, "neural_compressor.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.data.transforms.transform)": [[269, "neural_compressor.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.data.transforms.transform)": [[269, "neural_compressor.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.data.transforms.transform)": [[269, "neural_compressor.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.data.transforms.transform)": [[269, "neural_compressor.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.data.transforms.transform)": [[269, "neural_compressor.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.data.transforms.transform)": [[269, "neural_compressor.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.data.transforms.transform)": [[269, "neural_compressor.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.data.transforms.transform)": [[269, "neural_compressor.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.data.transforms.transform)": [[269, "neural_compressor.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.data.transforms.transform)": [[269, "neural_compressor.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.data.transforms.transform)": [[269, "neural_compressor.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.data.transforms.transform)": [[269, "neural_compressor.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.data.transforms.transform)": [[269, "neural_compressor.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.data.transforms.transform)": [[269, "neural_compressor.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.data.transforms.transform)": [[269, "neural_compressor.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.data.transforms.transform)": [[269, "neural_compressor.data.transforms.transform.TRANSFORMS"], [269, "neural_compressor.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[269, "neural_compressor.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[269, "neural_compressor.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.data.transforms.transform)": [[269, "neural_compressor.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.data.transforms.transform)": [[269, "neural_compressor.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.data.transforms.transform)": [[269, "neural_compressor.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.data.transforms.transform)": [[269, "neural_compressor.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.data.transforms.transform)": [[269, "neural_compressor.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.data.transforms.transform)": [[269, "neural_compressor.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.data.transforms.transform)": [[269, "neural_compressor.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.data.transforms.transform)": [[269, "neural_compressor.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.data.transforms.transform)": [[269, "neural_compressor.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.data.transforms.transform)": [[269, "neural_compressor.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.data.transforms.transform)": [[269, "neural_compressor.data.transforms.transform.get_final_text"]], "get_torchvision_map() (in module neural_compressor.data.transforms.transform)": [[269, "neural_compressor.data.transforms.transform.get_torchvision_map"]], "neural_compressor.data.transforms.transform": [[269, "module-neural_compressor.data.transforms.transform"]], "read_squad_examples() (in module neural_compressor.data.transforms.transform)": [[269, "neural_compressor.data.transforms.transform.read_squad_examples"]], "transform_registry() (in module neural_compressor.data.transforms.transform)": [[269, "neural_compressor.data.transforms.transform.transform_registry"]], "benchmark (class in neural_compressor.experimental.benchmark)": [[270, "neural_compressor.experimental.benchmark.Benchmark"]], "get_architecture() (in module neural_compressor.experimental.benchmark)": [[270, "neural_compressor.experimental.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.experimental.benchmark)": [[270, "neural_compressor.experimental.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.experimental.benchmark)": [[270, "neural_compressor.experimental.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.experimental.benchmark)": [[270, "neural_compressor.experimental.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.experimental.benchmark)": [[270, "neural_compressor.experimental.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.experimental.benchmark)": [[270, "neural_compressor.experimental.benchmark.get_threads_per_core"]], "neural_compressor.experimental.benchmark": [[270, "module-neural_compressor.experimental.benchmark"]], "set_all_env_var() (in module neural_compressor.experimental.benchmark)": [[270, "neural_compressor.experimental.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.experimental.benchmark)": [[270, "neural_compressor.experimental.benchmark.set_env_var"]], "criterions (class in neural_compressor.experimental.common.criterion)": [[271, "neural_compressor.experimental.common.criterion.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[271, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.experimental.common.criterion)": [[271, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[271, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss"]], "pytorchcriterions (class in neural_compressor.experimental.common.criterion)": [[271, "neural_compressor.experimental.common.criterion.PyTorchCriterions"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[271, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[271, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[271, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[271, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[271, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss"]], "tensorflowcriterions (class in neural_compressor.experimental.common.criterion)": [[271, "neural_compressor.experimental.common.criterion.TensorflowCriterions"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.experimental.common.criterion)": [[271, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal"]], "criterion_registry() (in module neural_compressor.experimental.common.criterion)": [[271, "neural_compressor.experimental.common.criterion.criterion_registry"]], "neural_compressor.experimental.common.criterion": [[271, "module-neural_compressor.experimental.common.criterion"]], "dataloader (class in neural_compressor.experimental.common.dataloader)": [[272, "neural_compressor.experimental.common.dataloader.DataLoader"]], "neural_compressor.experimental.common.dataloader": [[272, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[273, "module-neural_compressor.experimental.common"]], "metric (class in neural_compressor.experimental.common.metric)": [[274, "neural_compressor.experimental.common.metric.Metric"]], "neural_compressor.experimental.common.metric": [[274, "module-neural_compressor.experimental.common.metric"]], "model (class in neural_compressor.experimental.common.model)": [[275, "neural_compressor.experimental.common.model.Model"]], "neural_compressor.experimental.common.model": [[275, "module-neural_compressor.experimental.common.model"]], "set_backend() (in module neural_compressor.experimental.common.model)": [[275, "neural_compressor.experimental.common.model.set_backend"]], "optimizers (class in neural_compressor.experimental.common.optimizer)": [[276, "neural_compressor.experimental.common.optimizer.Optimizers"]], "pytorchoptimizers (class in neural_compressor.experimental.common.optimizer)": [[276, "neural_compressor.experimental.common.optimizer.PyTorchOptimizers"]], "pytorchsgd (class in neural_compressor.experimental.common.optimizer)": [[276, "neural_compressor.experimental.common.optimizer.PyTorchSGD"]], "tensorflowadamw (class in neural_compressor.experimental.common.optimizer)": [[276, "neural_compressor.experimental.common.optimizer.TensorFlowAdamW"]], "tensorflowsgd (class in neural_compressor.experimental.common.optimizer)": [[276, "neural_compressor.experimental.common.optimizer.TensorFlowSGD"]], "tensorflowoptimizers (class in neural_compressor.experimental.common.optimizer)": [[276, "neural_compressor.experimental.common.optimizer.TensorflowOptimizers"]], "neural_compressor.experimental.common.optimizer": [[276, "module-neural_compressor.experimental.common.optimizer"]], "optimizer_registry() (in module neural_compressor.experimental.common.optimizer)": [[276, "neural_compressor.experimental.common.optimizer.optimizer_registry"]], "postprocess (class in neural_compressor.experimental.common.postprocess)": [[277, "neural_compressor.experimental.common.postprocess.Postprocess"]], "neural_compressor.experimental.common.postprocess": [[277, "module-neural_compressor.experimental.common.postprocess"]], "get_activation() (in module neural_compressor.experimental.common.torch_utils)": [[278, "neural_compressor.experimental.common.torch_utils.get_activation"]], "neural_compressor.experimental.common.torch_utils": [[278, "module-neural_compressor.experimental.common.torch_utils"]], "record_output() (in module neural_compressor.experimental.common.torch_utils)": [[278, "neural_compressor.experimental.common.torch_utils.record_output"]], "component (class in neural_compressor.experimental.component)": [[279, "neural_compressor.experimental.component.Component"]], "neural_compressor.experimental.component": [[279, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.compression": [[280, "module-neural_compressor.experimental.compression"]], "neural_compressor.experimental.contrib": [[281, "module-neural_compressor.experimental.contrib"]], "neural_compressor.experimental.contrib.strategy": [[282, "module-neural_compressor.experimental.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.experimental.contrib.strategy.sigopt)": [[283, "neural_compressor.experimental.contrib.strategy.sigopt.SigOptTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[283, "module-neural_compressor.experimental.contrib.strategy.sigopt"]], "tpetunestrategy (class in neural_compressor.experimental.contrib.strategy.tpe)": [[284, "neural_compressor.experimental.contrib.strategy.tpe.TpeTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.tpe": [[284, "module-neural_compressor.experimental.contrib.strategy.tpe"]], "basedataloader (class in neural_compressor.experimental.data.dataloaders.base_dataloader)": [[285, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[285, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[286, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.experimental.data.dataloaders.default_dataloader)": [[287, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader"]], "default_collate() (in module neural_compressor.experimental.data.dataloaders.default_dataloader)": [[287, "neural_compressor.experimental.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[287, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[288, "neural_compressor.experimental.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[288, "neural_compressor.experimental.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[288, "neural_compressor.experimental.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[288, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[289, "module-neural_compressor.experimental.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.experimental.data.dataloaders.mxnet_dataloader)": [[290, "neural_compressor.experimental.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[290, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[291, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[291, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[291, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.experimental.data.dataloaders.pytorch_dataloader)": [[292, "neural_compressor.experimental.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[292, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[293, "neural_compressor.experimental.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[293, "neural_compressor.experimental.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[293, "neural_compressor.experimental.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[293, "neural_compressor.experimental.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.sampler": [[293, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[294, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[294, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[294, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[294, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[294, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[295, "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[295, "neural_compressor.experimental.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[295, "neural_compressor.experimental.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[295, "neural_compressor.experimental.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[295, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[295, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[295, "neural_compressor.experimental.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[295, "neural_compressor.experimental.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[295, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "coconpy (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[296, "neural_compressor.experimental.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[296, "neural_compressor.experimental.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[296, "neural_compressor.experimental.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[296, "neural_compressor.experimental.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[296, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[297, "neural_compressor.experimental.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[297, "neural_compressor.experimental.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.experimental.data.datasets.dataset)": [[297, "neural_compressor.experimental.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.experimental.data.datasets.dataset)": [[297, "neural_compressor.experimental.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[297, "neural_compressor.experimental.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[297, "neural_compressor.experimental.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.experimental.data.datasets.dataset)": [[297, "neural_compressor.experimental.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.experimental.data.datasets.dataset)": [[297, "neural_compressor.experimental.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[297, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[297, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[297, "neural_compressor.experimental.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[297, "neural_compressor.experimental.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[297, "neural_compressor.experimental.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[297, "neural_compressor.experimental.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[297, "neural_compressor.experimental.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[297, "neural_compressor.experimental.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[297, "neural_compressor.experimental.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[297, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[297, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[297, "neural_compressor.experimental.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[297, "neural_compressor.experimental.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.experimental.data.datasets.dataset)": [[297, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.datasets.dataset)": [[297, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflowcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[297, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[297, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[297, "neural_compressor.experimental.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[297, "neural_compressor.experimental.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[297, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageFolder"]], "tensorflowimagerecord (class in neural_compressor.experimental.data.datasets.dataset)": [[297, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[297, "neural_compressor.experimental.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.experimental.data.datasets.dataset)": [[297, "neural_compressor.experimental.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.experimental.data.datasets.dataset)": [[297, "neural_compressor.experimental.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.experimental.data.datasets.dataset)": [[297, "neural_compressor.experimental.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.experimental.data.datasets.dataset)": [[297, "neural_compressor.experimental.data.datasets.dataset.check_integrity"]], "dataset_registry() (in module neural_compressor.experimental.data.datasets.dataset)": [[297, "neural_compressor.experimental.data.datasets.dataset.dataset_registry"]], "download_url() (in module neural_compressor.experimental.data.datasets.dataset)": [[297, "neural_compressor.experimental.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.experimental.data.datasets.dataset)": [[297, "neural_compressor.experimental.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.experimental.data.datasets.dataset)": [[297, "neural_compressor.experimental.data.datasets.dataset.gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dataset": [[297, "module-neural_compressor.experimental.data.datasets.dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset)": [[298, "neural_compressor.experimental.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[298, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[299, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[299, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[299, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[300, "neural_compressor.experimental.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[300, "neural_compressor.experimental.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[300, "neural_compressor.experimental.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[300, "neural_compressor.experimental.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[300, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[300, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[300, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[301, "module-neural_compressor.experimental.data.datasets"]], "styletransferdataset (class in neural_compressor.experimental.data.datasets.style_transfer_dataset)": [[302, "neural_compressor.experimental.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[302, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[303, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[303, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.coco_filter": [[303, "module-neural_compressor.experimental.data.filters.coco_filter"]], "filters (class in neural_compressor.experimental.data.filters.filter)": [[304, "neural_compressor.experimental.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.experimental.data.filters.filter)": [[304, "neural_compressor.experimental.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.experimental.data.filters.filter)": [[304, "neural_compressor.experimental.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.experimental.data.filters.filter)": [[304, "neural_compressor.experimental.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.experimental.data.filters.filter)": [[304, "neural_compressor.experimental.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.experimental.data.filters.filter)": [[304, "neural_compressor.experimental.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.experimental.data.filters.filter)": [[304, "neural_compressor.experimental.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.experimental.data.filters.filter)": [[304, "neural_compressor.experimental.data.filters.filter.filter_registry"]], "neural_compressor.experimental.data.filters.filter": [[304, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[305, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[306, "module-neural_compressor.experimental.data"]], "bilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[307, "neural_compressor.experimental.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[307, "neural_compressor.experimental.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[307, "neural_compressor.experimental.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[307, "neural_compressor.experimental.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[307, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[307, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[307, "neural_compressor.experimental.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[307, "neural_compressor.experimental.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[307, "neural_compressor.experimental.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[307, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[308, "module-neural_compressor.experimental.data.transforms"]], "basictokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[309, "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[309, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[309, "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[309, "neural_compressor.experimental.data.transforms.tokenization.convert_by_vocab"]], "convert_to_unicode() (in module neural_compressor.experimental.data.transforms.tokenization)": [[309, "neural_compressor.experimental.data.transforms.tokenization.convert_to_unicode"]], "load_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[309, "neural_compressor.experimental.data.transforms.tokenization.load_vocab"]], "neural_compressor.experimental.data.transforms.tokenization": [[309, "module-neural_compressor.experimental.data.transforms.tokenization"]], "whitespace_tokenize() (in module neural_compressor.experimental.data.transforms.tokenization)": [[309, "neural_compressor.experimental.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.experimental.data.transforms.transform)": [[310, "neural_compressor.experimental.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.experimental.data.transforms.transform)": [[310, "neural_compressor.experimental.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.experimental.data.transforms.transform)": [[310, "neural_compressor.experimental.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[310, "neural_compressor.experimental.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.experimental.data.transforms.transform)": [[310, "neural_compressor.experimental.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[310, "neural_compressor.experimental.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[310, "neural_compressor.experimental.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[310, "neural_compressor.experimental.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.experimental.data.transforms.transform)": [[310, "neural_compressor.experimental.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[310, "neural_compressor.experimental.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[310, "neural_compressor.experimental.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[310, "neural_compressor.experimental.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.experimental.data.transforms.transform)": [[310, "neural_compressor.experimental.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[310, "neural_compressor.experimental.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[310, "neural_compressor.experimental.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[310, "neural_compressor.experimental.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.experimental.data.transforms.transform)": [[310, "neural_compressor.experimental.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.experimental.data.transforms.transform)": [[310, "neural_compressor.experimental.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[310, "neural_compressor.experimental.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[310, "neural_compressor.experimental.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[310, "neural_compressor.experimental.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.experimental.data.transforms.transform)": [[310, "neural_compressor.experimental.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.experimental.data.transforms.transform)": [[310, "neural_compressor.experimental.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[310, "neural_compressor.experimental.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.experimental.data.transforms.transform)": [[310, "neural_compressor.experimental.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.experimental.data.transforms.transform)": [[310, "neural_compressor.experimental.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[310, "neural_compressor.experimental.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[310, "neural_compressor.experimental.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[310, "neural_compressor.experimental.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[310, "neural_compressor.experimental.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[310, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[310, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[310, "neural_compressor.experimental.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[310, "neural_compressor.experimental.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[310, "neural_compressor.experimental.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[310, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[310, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[310, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[310, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[310, "neural_compressor.experimental.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.experimental.data.transforms.transform)": [[310, "neural_compressor.experimental.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.experimental.data.transforms.transform)": [[310, "neural_compressor.experimental.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.experimental.data.transforms.transform)": [[310, "neural_compressor.experimental.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[310, "neural_compressor.experimental.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[310, "neural_compressor.experimental.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[310, "neural_compressor.experimental.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[310, "neural_compressor.experimental.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[310, "neural_compressor.experimental.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.experimental.data.transforms.transform)": [[310, "neural_compressor.experimental.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[310, "neural_compressor.experimental.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.experimental.data.transforms.transform)": [[310, "neural_compressor.experimental.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.experimental.data.transforms.transform)": [[310, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.experimental.data.transforms.transform)": [[310, "neural_compressor.experimental.data.transforms.transform.TRANSFORMS"], [310, "neural_compressor.experimental.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[310, "neural_compressor.experimental.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[310, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[310, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[310, "neural_compressor.experimental.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.experimental.data.transforms.transform)": [[310, "neural_compressor.experimental.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[310, "neural_compressor.experimental.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[310, "neural_compressor.experimental.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[310, "neural_compressor.experimental.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.experimental.data.transforms.transform)": [[310, "neural_compressor.experimental.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.experimental.data.transforms.transform)": [[310, "neural_compressor.experimental.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.experimental.data.transforms.transform)": [[310, "neural_compressor.experimental.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.transforms.transform)": [[310, "neural_compressor.experimental.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.experimental.data.transforms.transform)": [[310, "neural_compressor.experimental.data.transforms.transform.get_final_text"]], "get_torchvision_map() (in module neural_compressor.experimental.data.transforms.transform)": [[310, "neural_compressor.experimental.data.transforms.transform.get_torchvision_map"]], "neural_compressor.experimental.data.transforms.transform": [[310, "module-neural_compressor.experimental.data.transforms.transform"]], "read_squad_examples() (in module neural_compressor.experimental.data.transforms.transform)": [[310, "neural_compressor.experimental.data.transforms.transform.read_squad_examples"]], "transform_registry() (in module neural_compressor.experimental.data.transforms.transform)": [[310, "neural_compressor.experimental.data.transforms.transform.transform_registry"]], "distillation (class in neural_compressor.experimental.distillation)": [[311, "neural_compressor.experimental.distillation.Distillation"]], "_epoch_ran (neural_compressor.experimental.distillation.distillation attribute)": [[311, "neural_compressor.experimental.distillation.Distillation._epoch_ran"]], "best_model (neural_compressor.experimental.distillation.distillation attribute)": [[311, "neural_compressor.experimental.distillation.Distillation.best_model"]], "best_score (neural_compressor.experimental.distillation.distillation attribute)": [[311, "neural_compressor.experimental.distillation.Distillation.best_score"]], "eval_frequency (neural_compressor.experimental.distillation.distillation attribute)": [[311, "neural_compressor.experimental.distillation.Distillation.eval_frequency"]], "neural_compressor.experimental.distillation": [[311, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[312, "module-neural_compressor.experimental.export"]], "check_model() (in module neural_compressor.experimental.export.qlinear2qdq)": [[313, "neural_compressor.experimental.export.qlinear2qdq.check_model"]], "neural_compressor.experimental.export.qlinear2qdq": [[313, "module-neural_compressor.experimental.export.qlinear2qdq"]], "onnx_qlinear_to_qdq() (in module neural_compressor.experimental.export.qlinear2qdq)": [[313, "neural_compressor.experimental.export.qlinear2qdq.onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.tf2onnx": [[314, "module-neural_compressor.experimental.export.tf2onnx"]], "tf_to_fp32_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[314, "neural_compressor.experimental.export.tf2onnx.tf_to_fp32_onnx"]], "tf_to_int8_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[314, "neural_compressor.experimental.export.tf2onnx.tf_to_int8_onnx"]], "dynamic_quant_export() (in module neural_compressor.experimental.export.torch2onnx)": [[315, "neural_compressor.experimental.export.torch2onnx.dynamic_quant_export"]], "get_node_mapping() (in module neural_compressor.experimental.export.torch2onnx)": [[315, "neural_compressor.experimental.export.torch2onnx.get_node_mapping"]], "get_quantizable_onnx_ops() (in module neural_compressor.experimental.export.torch2onnx)": [[315, "neural_compressor.experimental.export.torch2onnx.get_quantizable_onnx_ops"]], "neural_compressor.experimental.export.torch2onnx": [[315, "module-neural_compressor.experimental.export.torch2onnx"]], "static_quant_export() (in module neural_compressor.experimental.export.torch2onnx)": [[315, "neural_compressor.experimental.export.torch2onnx.static_quant_export"]], "torch_to_fp32_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[315, "neural_compressor.experimental.export.torch2onnx.torch_to_fp32_onnx"]], "torch_to_int8_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[315, "neural_compressor.experimental.export.torch2onnx.torch_to_int8_onnx"]], "graph_optimization (class in neural_compressor.experimental.graph_optimization)": [[316, "neural_compressor.experimental.graph_optimization.Graph_Optimization"]], "neural_compressor.experimental.graph_optimization": [[316, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[317, "module-neural_compressor.experimental"]], "bleu (class in neural_compressor.experimental.metric.bleu)": [[318, "neural_compressor.experimental.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.experimental.metric.bleu)": [[318, "neural_compressor.experimental.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.experimental.metric.bleu)": [[318, "neural_compressor.experimental.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.experimental.metric.bleu.bleu attribute)": [[318, "neural_compressor.experimental.metric.bleu.BLEU.labels"]], "neural_compressor.experimental.metric.bleu": [[318, "module-neural_compressor.experimental.metric.bleu"]], "nondigit_punct_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[318, "neural_compressor.experimental.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.experimental.metric.bleu.bleu attribute)": [[318, "neural_compressor.experimental.metric.bleu.BLEU.predictions"]], "punct_nondigit_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[318, "neural_compressor.experimental.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[318, "neural_compressor.experimental.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.experimental.metric.bleu_util)": [[319, "neural_compressor.experimental.metric.bleu_util.compute_bleu"]], "neural_compressor.experimental.metric.bleu_util": [[319, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[320, "module-neural_compressor.experimental.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.experimental.metric.coco_tools)": [[321, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.experimental.metric.coco_tools)": [[321, "neural_compressor.experimental.metric.coco_tools.COCOWrapper"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.experimental.metric.coco_tools)": [[321, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.experimental.metric.coco_tools)": [[321, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.experimental.metric.coco_tools)": [[321, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "dataset (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[321, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[321, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.experimental.metric.coco_tools": [[321, "module-neural_compressor.experimental.metric.coco_tools"]], "evaluate() (in module neural_compressor.experimental.metric.evaluate_squad)": [[322, "neural_compressor.experimental.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[322, "neural_compressor.experimental.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[322, "neural_compressor.experimental.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.evaluate_squad)": [[322, "neural_compressor.experimental.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.evaluate_squad": [[322, "module-neural_compressor.experimental.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.experimental.metric.f1)": [[323, "neural_compressor.experimental.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.experimental.metric.f1)": [[323, "neural_compressor.experimental.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.f1)": [[323, "neural_compressor.experimental.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[323, "module-neural_compressor.experimental.metric.f1"]], "normalize_answer() (in module neural_compressor.experimental.metric.f1)": [[323, "neural_compressor.experimental.metric.f1.normalize_answer"]], "neural_compressor.experimental.metric": [[324, "module-neural_compressor.experimental.metric"]], "accuracy (class in neural_compressor.experimental.metric.metric)": [[325, "neural_compressor.experimental.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.experimental.metric.metric)": [[325, "neural_compressor.experimental.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.experimental.metric.metric)": [[325, "neural_compressor.experimental.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.experimental.metric.metric)": [[325, "neural_compressor.experimental.metric.metric.F1"]], "generaltopk (class in neural_compressor.experimental.metric.metric)": [[325, "neural_compressor.experimental.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.experimental.metric.metric)": [[325, "neural_compressor.experimental.metric.metric.Loss"]], "mae (class in neural_compressor.experimental.metric.metric)": [[325, "neural_compressor.experimental.metric.metric.MAE"]], "metrics (class in neural_compressor.experimental.metric.metric)": [[325, "neural_compressor.experimental.metric.metric.METRICS"]], "mse (class in neural_compressor.experimental.metric.metric)": [[325, "neural_compressor.experimental.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.experimental.metric.metric)": [[325, "neural_compressor.experimental.metric.metric.MXNetMetrics"]], "onnxrtglue (class in neural_compressor.experimental.metric.metric)": [[325, "neural_compressor.experimental.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.experimental.metric.metric)": [[325, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.experimental.metric.metric)": [[325, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.experimental.metric.metric)": [[325, "neural_compressor.experimental.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.experimental.metric.metric)": [[325, "neural_compressor.experimental.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.experimental.metric.metric)": [[325, "neural_compressor.experimental.metric.metric.RMSE"]], "roc (class in neural_compressor.experimental.metric.metric)": [[325, "neural_compressor.experimental.metric.metric.ROC"]], "squadf1 (class in neural_compressor.experimental.metric.metric)": [[325, "neural_compressor.experimental.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.experimental.metric.metric)": [[325, "neural_compressor.experimental.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.experimental.metric.metric)": [[325, "neural_compressor.experimental.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.experimental.metric.metric)": [[325, "neural_compressor.experimental.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.experimental.metric.metric)": [[325, "neural_compressor.experimental.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.experimental.metric.metric)": [[325, "neural_compressor.experimental.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.experimental.metric.metric)": [[325, "neural_compressor.experimental.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.experimental.metric.metric)": [[325, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.experimental.metric.metric)": [[325, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.experimental.metric.metric.mae attribute)": [[325, "neural_compressor.experimental.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.experimental.metric.metric.mse attribute)": [[325, "neural_compressor.experimental.metric.metric.MSE.compare_label"]], "k (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[325, "neural_compressor.experimental.metric.metric.GeneralTopK.k"]], "k (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[325, "neural_compressor.experimental.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[325, "neural_compressor.experimental.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mae attribute)": [[325, "neural_compressor.experimental.metric.metric.MAE.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mse attribute)": [[325, "neural_compressor.experimental.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.experimental.metric.metric)": [[325, "neural_compressor.experimental.metric.metric.mIOU"]], "metric_registry() (in module neural_compressor.experimental.metric.metric)": [[325, "neural_compressor.experimental.metric.metric.metric_registry"]], "metrics (neural_compressor.experimental.metric.metric.metrics attribute)": [[325, "neural_compressor.experimental.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.experimental.metric.metric.mxnetmetrics attribute)": [[325, "neural_compressor.experimental.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtitmetrics attribute)": [[325, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtqlmetrics attribute)": [[325, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.pytorchmetrics attribute)": [[325, "neural_compressor.experimental.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.tensorflowmetrics attribute)": [[325, "neural_compressor.experimental.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.experimental.metric.metric.rmse attribute)": [[325, "neural_compressor.experimental.metric.metric.RMSE.mse"]], "neural_compressor.experimental.metric.metric": [[325, "module-neural_compressor.experimental.metric.metric"]], "num_correct (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[325, "neural_compressor.experimental.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[325, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[325, "neural_compressor.experimental.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[325, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[325, "neural_compressor.experimental.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mae attribute)": [[325, "neural_compressor.experimental.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mse attribute)": [[325, "neural_compressor.experimental.metric.metric.MSE.pred_list"]], "sample (neural_compressor.experimental.metric.metric.accuracy attribute)": [[325, "neural_compressor.experimental.metric.metric.Accuracy.sample"]], "sample (neural_compressor.experimental.metric.metric.loss attribute)": [[325, "neural_compressor.experimental.metric.metric.Loss.sample"]], "sum (neural_compressor.experimental.metric.metric.loss attribute)": [[325, "neural_compressor.experimental.metric.metric.Loss.sum"]], "mixedprecision (class in neural_compressor.experimental.mixed_precision)": [[326, "neural_compressor.experimental.mixed_precision.MixedPrecision"]], "neural_compressor.experimental.mixed_precision": [[326, "module-neural_compressor.experimental.mixed_precision"]], "modelconversion (class in neural_compressor.experimental.model_conversion)": [[327, "neural_compressor.experimental.model_conversion.ModelConversion"]], "neural_compressor.experimental.model_conversion": [[327, "module-neural_compressor.experimental.model_conversion"]], "basicnas (class in neural_compressor.experimental.nas.basic_nas)": [[328, "neural_compressor.experimental.nas.basic_nas.BasicNAS"]], "neural_compressor.experimental.nas.basic_nas": [[328, "module-neural_compressor.experimental.nas.basic_nas"]], "dynas (class in neural_compressor.experimental.nas.dynas)": [[329, "neural_compressor.experimental.nas.dynas.DyNAS"]], "neural_compressor.experimental.nas.dynas": [[329, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas": [[330, "module-neural_compressor.experimental.nas"]], "nas (class in neural_compressor.experimental.nas.nas)": [[331, "neural_compressor.experimental.nas.nas.NAS"]], "nasbase (class in neural_compressor.experimental.nas.nas)": [[331, "neural_compressor.experimental.nas.nas.NASBase"]], "neural_compressor.experimental.nas.nas": [[331, "module-neural_compressor.experimental.nas.nas"]], "create_search_space_pool() (in module neural_compressor.experimental.nas.nas_utils)": [[332, "neural_compressor.experimental.nas.nas_utils.create_search_space_pool"]], "find_pareto_front() (in module neural_compressor.experimental.nas.nas_utils)": [[332, "neural_compressor.experimental.nas.nas_utils.find_pareto_front"]], "nas_registry() (in module neural_compressor.experimental.nas.nas_utils)": [[332, "neural_compressor.experimental.nas.nas_utils.nas_registry"]], "neural_compressor.experimental.nas.nas_utils": [[332, "module-neural_compressor.experimental.nas.nas_utils"]], "bayesianoptimizationsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[333, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher"]], "gridsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[333, "neural_compressor.experimental.nas.search_algorithms.GridSearcher"]], "randomsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[333, "neural_compressor.experimental.nas.search_algorithms.RandomSearcher"]], "searcher (class in neural_compressor.experimental.nas.search_algorithms)": [[333, "neural_compressor.experimental.nas.search_algorithms.Searcher"]], "neural_compressor.experimental.nas.search_algorithms": [[333, "module-neural_compressor.experimental.nas.search_algorithms"]], "gradientsensitivitypruner (class in neural_compressor.experimental.pruner_legacy.gradient_sensitivity)": [[334, "neural_compressor.experimental.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[334, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"]], "grouplassopruner (class in neural_compressor.experimental.pruner_legacy.group_lasso)": [[335, "neural_compressor.experimental.pruner_legacy.group_lasso.GroupLassoPruner"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[335, "module-neural_compressor.experimental.pruner_legacy.group_lasso"]], "neural_compressor.experimental.pruner_legacy": [[336, "module-neural_compressor.experimental.pruner_legacy"]], "basicmagnitudepruner (class in neural_compressor.experimental.pruner_legacy.magnitude)": [[337, "neural_compressor.experimental.pruner_legacy.magnitude.BasicMagnitudePruner"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[337, "module-neural_compressor.experimental.pruner_legacy.magnitude"]], "patternlockpruner (class in neural_compressor.experimental.pruner_legacy.pattern_lock)": [[338, "neural_compressor.experimental.pruner_legacy.pattern_lock.PatternLockPruner"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[338, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"]], "pruner (class in neural_compressor.experimental.pruner_legacy.pruner)": [[339, "neural_compressor.experimental.pruner_legacy.pruner.Pruner"]], "neural_compressor.experimental.pruner_legacy.pruner": [[339, "module-neural_compressor.experimental.pruner_legacy.pruner"]], "pruner_registry() (in module neural_compressor.experimental.pruner_legacy.pruner)": [[339, "neural_compressor.experimental.pruner_legacy.pruner.pruner_registry"]], "pruning (class in neural_compressor.experimental.pruning)": [[340, "neural_compressor.experimental.pruning.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning)": [[340, "neural_compressor.experimental.pruning.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning.pruning attribute)": [[340, "neural_compressor.experimental.pruning.Pruning.conf"]], "neural_compressor.experimental.pruning": [[340, "module-neural_compressor.experimental.pruning"]], "pruners (neural_compressor.experimental.pruning.pruning attribute)": [[340, "neural_compressor.experimental.pruning.Pruning.pruners"]], "neural_compressor.experimental.pruning_recipes": [[341, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[342, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "patterns (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[343, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS"]], "patternbase (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[343, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[343, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "pattern_registry() (in module neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[343, "neural_compressor.experimental.pruning_recipes.patterns.pattern.pattern_registry"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns.pattern.patterns attribute)": [[343, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS.patterns"]], "tilepatternbase (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[344, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase"]], "tilepattern_1x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[344, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x1"]], "tilepattern_1x16 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[344, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x16"]], "tilepattern_1x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[344, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x2"]], "tilepattern_2x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[344, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_2x2"]], "tilepattern_4x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[344, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_4x1"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[344, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "pruning (class in neural_compressor.experimental.pruning_v2)": [[345, "neural_compressor.experimental.pruning_v2.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning_v2)": [[345, "neural_compressor.experimental.pruning_v2.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning_v2.pruning attribute)": [[345, "neural_compressor.experimental.pruning_v2.Pruning.conf"]], "neural_compressor.experimental.pruning_v2": [[345, "module-neural_compressor.experimental.pruning_v2"]], "pruners (neural_compressor.experimental.pruning_v2.pruning attribute)": [[345, "neural_compressor.experimental.pruning_v2.Pruning.pruners"]], "neural_compressor.experimental.pytorch_pruner": [[346, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[347, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "m (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[348, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.M"]], "n (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[348, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.N"]], "pattern (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[348, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern"]], "patternninm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[348, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM"]], "patternnxm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[348, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM"]], "block_size (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm attribute)": [[348, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.block_size"]], "get_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[348, "neural_compressor.experimental.pytorch_pruner.patterns.get_pattern"]], "is_global (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[348, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.is_global"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[348, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "pattern (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[348, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.pattern"]], "register_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[348, "neural_compressor.experimental.pytorch_pruner.patterns.register_pattern"]], "check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[349, "neural_compressor.experimental.pytorch_pruner.prune_utils.check_config"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[349, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "parse_not_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[349, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_not_to_prune"]], "parse_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[349, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_to_prune"]], "process_and_check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[349, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_and_check_config"]], "process_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[349, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_config"]], "reset_non_value_to_default() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[349, "neural_compressor.experimental.pytorch_pruner.prune_utils.reset_non_value_to_default"]], "magnitudepruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[350, "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner"]], "patternlockpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[350, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner"]], "pruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[350, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner"]], "snipmomentumpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[350, "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner"]], "snippruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[350, "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner"]], "config (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[350, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.config"]], "current_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[350, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.current_sparsity_ratio"]], "end_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[350, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.end_step"]], "get_pruner() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[350, "neural_compressor.experimental.pytorch_pruner.pruner.get_pruner"]], "global_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[350, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.global_step"]], "masks (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[350, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.masks"]], "max_sparsity_ratio_per_layer (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[350, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.max_sparsity_ratio_per_layer"]], "modules (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[350, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.modules"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[350, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "pattern (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[350, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.pattern"]], "register_pruners() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[350, "neural_compressor.experimental.pytorch_pruner.pruner.register_pruners"]], "scheduler (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[350, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scheduler"]], "scores (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[350, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scores"]], "start_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[350, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.start_step"]], "target_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[350, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.target_sparsity_ratio"]], "update_frequency_on_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[350, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.update_frequency_on_step"]], "pruning (class in neural_compressor.experimental.pytorch_pruner.pruning)": [[351, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning"]], "config_file_path (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[351, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.config_file_path"]], "model (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[351, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.model"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[351, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "pruner_info (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[351, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruner_info"]], "pruners (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[351, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruners"]], "iterativescheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[352, "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[352, "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler"]], "scheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[352, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler"]], "config (neural_compressor.experimental.pytorch_pruner.scheduler.scheduler attribute)": [[352, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler.config"]], "get_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[352, "neural_compressor.experimental.pytorch_pruner.scheduler.get_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[352, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "register_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[352, "neural_compressor.experimental.pytorch_pruner.scheduler.register_scheduler"]], "quantization (class in neural_compressor.experimental.quantization)": [[353, "neural_compressor.experimental.quantization.Quantization"]], "neural_compressor.experimental.quantization": [[353, "module-neural_compressor.experimental.quantization"]], "scheduler (class in neural_compressor.experimental.scheduler)": [[354, "neural_compressor.experimental.scheduler.Scheduler"]], "neural_compressor.experimental.scheduler": [[354, "module-neural_compressor.experimental.scheduler"]], "automixedprecisiontunestrategy (class in neural_compressor.experimental.strategy.auto_mixed_precision)": [[355, "neural_compressor.experimental.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[355, "module-neural_compressor.experimental.strategy.auto_mixed_precision"]], "basictunestrategy (class in neural_compressor.experimental.strategy.basic)": [[356, "neural_compressor.experimental.strategy.basic.BasicTuneStrategy"]], "neural_compressor.experimental.strategy.basic": [[356, "module-neural_compressor.experimental.strategy.basic"]], "bayesianoptimization (class in neural_compressor.experimental.strategy.bayesian)": [[357, "neural_compressor.experimental.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.experimental.strategy.bayesian)": [[357, "neural_compressor.experimental.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.experimental.strategy.bayesian)": [[357, "neural_compressor.experimental.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.experimental.strategy.bayesian)": [[357, "neural_compressor.experimental.strategy.bayesian.acq_max"]], "neural_compressor.experimental.strategy.bayesian": [[357, "module-neural_compressor.experimental.strategy.bayesian"]], "exhaustivetunestrategy (class in neural_compressor.experimental.strategy.exhaustive)": [[358, "neural_compressor.experimental.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.experimental.strategy.exhaustive": [[358, "module-neural_compressor.experimental.strategy.exhaustive"]], "neural_compressor.experimental.strategy": [[359, "module-neural_compressor.experimental.strategy"]], "msetunestrategy (class in neural_compressor.experimental.strategy.mse)": [[360, "neural_compressor.experimental.strategy.mse.MSETuneStrategy"]], "neural_compressor.experimental.strategy.mse": [[360, "module-neural_compressor.experimental.strategy.mse"]], "mse_v2tunestrategy (class in neural_compressor.experimental.strategy.mse_v2)": [[361, "neural_compressor.experimental.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.experimental.strategy.mse_v2": [[361, "module-neural_compressor.experimental.strategy.mse_v2"]], "randomtunestrategy (class in neural_compressor.experimental.strategy.random)": [[362, "neural_compressor.experimental.strategy.random.RandomTuneStrategy"]], "neural_compressor.experimental.strategy.random": [[362, "module-neural_compressor.experimental.strategy.random"]], "tunestrategy (class in neural_compressor.experimental.strategy.strategy)": [[363, "neural_compressor.experimental.strategy.strategy.TuneStrategy"]], "neural_compressor.experimental.strategy.strategy": [[363, "module-neural_compressor.experimental.strategy.strategy"]], "strategy_registry() (in module neural_compressor.experimental.strategy.strategy)": [[363, "neural_compressor.experimental.strategy.strategy.strategy_registry"]], "neural_compressor.experimental.strategy.utils.constant": [[364, "module-neural_compressor.experimental.strategy.utils.constant"]], "neural_compressor.experimental.strategy.utils": [[365, "module-neural_compressor.experimental.strategy.utils"]], "fallbacktuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[366, "neural_compressor.experimental.strategy.utils.tuning_sampler.FallbackTuningSampler"]], "modelwisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[366, "neural_compressor.experimental.strategy.utils.tuning_sampler.ModelWiseTuningSampler"]], "optypewisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[366, "neural_compressor.experimental.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler"]], "opwisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[366, "neural_compressor.experimental.strategy.utils.tuning_sampler.OpWiseTuningSampler"]], "smoothquantsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[366, "neural_compressor.experimental.strategy.utils.tuning_sampler.SmoothQuantSampler"]], "tuningorder (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[366, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningOrder"]], "tuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[366, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningSampler"]], "tuningsamplerregistry (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[366, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningSamplerRegistry"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[366, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"]], "tuningitem (class in neural_compressor.experimental.strategy.utils.tuning_space)": [[367, "neural_compressor.experimental.strategy.utils.tuning_space.TuningItem"]], "tuningspace (class in neural_compressor.experimental.strategy.utils.tuning_space)": [[367, "neural_compressor.experimental.strategy.utils.tuning_space.TuningSpace"]], "initial_tuning_cfg_with_quant_mode() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[367, "neural_compressor.experimental.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[367, "module-neural_compressor.experimental.strategy.utils.tuning_space"]], "pattern_to_internal() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[367, "neural_compressor.experimental.strategy.utils.tuning_space.pattern_to_internal"]], "pattern_to_path() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[367, "neural_compressor.experimental.strategy.utils.tuning_space.pattern_to_path"]], "quant_mode_from_pattern() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[367, "neural_compressor.experimental.strategy.utils.tuning_space.quant_mode_from_pattern"]], "optuningconfig (class in neural_compressor.experimental.strategy.utils.tuning_structs)": [[368, "neural_compressor.experimental.strategy.utils.tuning_structs.OpTuningConfig"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[368, "module-neural_compressor.experimental.strategy.utils.tuning_structs"]], "ordereddefaultdict (class in neural_compressor.experimental.strategy.utils.utility)": [[369, "neural_compressor.experimental.strategy.utils.utility.OrderedDefaultDict"]], "extract_data_type() (in module neural_compressor.experimental.strategy.utils.utility)": [[369, "neural_compressor.experimental.strategy.utils.utility.extract_data_type"]], "get_adaptor_name() (in module neural_compressor.experimental.strategy.utils.utility)": [[369, "neural_compressor.experimental.strategy.utils.utility.get_adaptor_name"]], "neural_compressor.experimental.strategy.utils.utility": [[369, "module-neural_compressor.experimental.strategy.utils.utility"]], "reverted_data_type() (in module neural_compressor.experimental.strategy.utils.utility)": [[369, "neural_compressor.experimental.strategy.utils.utility.reverted_data_type"]], "neural_compressor": [[370, "module-neural_compressor"]], "bleu (class in neural_compressor.metric.bleu)": [[371, "neural_compressor.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.metric.bleu)": [[371, "neural_compressor.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.metric.bleu)": [[371, "neural_compressor.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.metric.bleu.bleu attribute)": [[371, "neural_compressor.metric.bleu.BLEU.labels"]], "neural_compressor.metric.bleu": [[371, "module-neural_compressor.metric.bleu"]], "nondigit_punct_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[371, "neural_compressor.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.metric.bleu.bleu attribute)": [[371, "neural_compressor.metric.bleu.BLEU.predictions"]], "punct_nondigit_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[371, "neural_compressor.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[371, "neural_compressor.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.metric.bleu_util)": [[372, "neural_compressor.metric.bleu_util.compute_bleu"]], "neural_compressor.metric.bleu_util": [[372, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[373, "module-neural_compressor.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.metric.coco_tools)": [[374, "neural_compressor.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.metric.coco_tools)": [[374, "neural_compressor.metric.coco_tools.COCOWrapper"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.metric.coco_tools)": [[374, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.metric.coco_tools)": [[374, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.metric.coco_tools)": [[374, "neural_compressor.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "dataset (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[374, "neural_compressor.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[374, "neural_compressor.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.metric.coco_tools": [[374, "module-neural_compressor.metric.coco_tools"]], "evaluate() (in module neural_compressor.metric.evaluate_squad)": [[375, "neural_compressor.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.metric.evaluate_squad)": [[375, "neural_compressor.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.metric.evaluate_squad)": [[375, "neural_compressor.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.evaluate_squad)": [[375, "neural_compressor.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.metric.evaluate_squad": [[375, "module-neural_compressor.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.metric.f1)": [[376, "neural_compressor.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.metric.f1)": [[376, "neural_compressor.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.f1)": [[376, "neural_compressor.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[376, "module-neural_compressor.metric.f1"]], "normalize_answer() (in module neural_compressor.metric.f1)": [[376, "neural_compressor.metric.f1.normalize_answer"]], "neural_compressor.metric": [[377, "module-neural_compressor.metric"]], "accuracy (class in neural_compressor.metric.metric)": [[378, "neural_compressor.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.metric.metric)": [[378, "neural_compressor.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.metric.metric)": [[378, "neural_compressor.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.metric.metric)": [[378, "neural_compressor.metric.metric.F1"]], "generaltopk (class in neural_compressor.metric.metric)": [[378, "neural_compressor.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.metric.metric)": [[378, "neural_compressor.metric.metric.Loss"]], "mae (class in neural_compressor.metric.metric)": [[378, "neural_compressor.metric.metric.MAE"]], "metrics (class in neural_compressor.metric.metric)": [[378, "neural_compressor.metric.metric.METRICS"]], "mse (class in neural_compressor.metric.metric)": [[378, "neural_compressor.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.metric.metric)": [[378, "neural_compressor.metric.metric.MXNetMetrics"]], "metric (class in neural_compressor.metric.metric)": [[378, "neural_compressor.metric.metric.Metric"]], "onnxrtglue (class in neural_compressor.metric.metric)": [[378, "neural_compressor.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.metric.metric)": [[378, "neural_compressor.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.metric.metric)": [[378, "neural_compressor.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.metric.metric)": [[378, "neural_compressor.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.metric.metric)": [[378, "neural_compressor.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.metric.metric)": [[378, "neural_compressor.metric.metric.RMSE"]], "roc (class in neural_compressor.metric.metric)": [[378, "neural_compressor.metric.metric.ROC"]], "squadf1 (class in neural_compressor.metric.metric)": [[378, "neural_compressor.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.metric.metric)": [[378, "neural_compressor.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.metric.metric)": [[378, "neural_compressor.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.metric.metric)": [[378, "neural_compressor.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.metric.metric)": [[378, "neural_compressor.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.metric.metric)": [[378, "neural_compressor.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.metric.metric)": [[378, "neural_compressor.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.metric.metric)": [[378, "neural_compressor.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.metric.metric)": [[378, "neural_compressor.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.metric.metric.mae attribute)": [[378, "neural_compressor.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.metric.metric.mse attribute)": [[378, "neural_compressor.metric.metric.MSE.compare_label"]], "k (neural_compressor.metric.metric.generaltopk attribute)": [[378, "neural_compressor.metric.metric.GeneralTopK.k"]], "k (neural_compressor.metric.metric.tensorflowtopk attribute)": [[378, "neural_compressor.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.metric.metric.accuracy attribute)": [[378, "neural_compressor.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.metric.metric.mae attribute)": [[378, "neural_compressor.metric.metric.MAE.label_list"]], "label_list (neural_compressor.metric.metric.mse attribute)": [[378, "neural_compressor.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.metric.metric)": [[378, "neural_compressor.metric.metric.mIOU"]], "metric_registry() (in module neural_compressor.metric.metric)": [[378, "neural_compressor.metric.metric.metric_registry"]], "metrics (neural_compressor.metric.metric.metrics attribute)": [[378, "neural_compressor.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.metric.metric.mxnetmetrics attribute)": [[378, "neural_compressor.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtitmetrics attribute)": [[378, "neural_compressor.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtqlmetrics attribute)": [[378, "neural_compressor.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.metric.metric.pytorchmetrics attribute)": [[378, "neural_compressor.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.metric.metric.tensorflowmetrics attribute)": [[378, "neural_compressor.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.metric.metric.rmse attribute)": [[378, "neural_compressor.metric.metric.RMSE.mse"]], "neural_compressor.metric.metric": [[378, "module-neural_compressor.metric.metric"]], "num_correct (neural_compressor.metric.metric.generaltopk attribute)": [[378, "neural_compressor.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.metric.metric.tensorflowtopk attribute)": [[378, "neural_compressor.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.metric.metric.generaltopk attribute)": [[378, "neural_compressor.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.metric.metric.tensorflowtopk attribute)": [[378, "neural_compressor.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.metric.metric.accuracy attribute)": [[378, "neural_compressor.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.metric.metric.mae attribute)": [[378, "neural_compressor.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.metric.metric.mse attribute)": [[378, "neural_compressor.metric.metric.MSE.pred_list"]], "register_customer_metric() (in module neural_compressor.metric.metric)": [[378, "neural_compressor.metric.metric.register_customer_metric"]], "sample (neural_compressor.metric.metric.accuracy attribute)": [[378, "neural_compressor.metric.metric.Accuracy.sample"]], "sample (neural_compressor.metric.metric.loss attribute)": [[378, "neural_compressor.metric.metric.Loss.sample"]], "sum (neural_compressor.metric.metric.loss attribute)": [[378, "neural_compressor.metric.metric.Loss.sum"]], "fit() (in module neural_compressor.mix_precision)": [[379, "neural_compressor.mix_precision.fit"]], "neural_compressor.mix_precision": [[379, "module-neural_compressor.mix_precision"]], "basemodel (class in neural_compressor.model.base_model)": [[380, "neural_compressor.model.base_model.BaseModel"]], "neural_compressor.model.base_model": [[380, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[381, "module-neural_compressor.model"]], "kerasmodel (class in neural_compressor.model.keras_model)": [[382, "neural_compressor.model.keras_model.KerasModel"]], "neural_compressor.model.keras_model": [[382, "module-neural_compressor.model.keras_model"]], "model (class in neural_compressor.model.model)": [[383, "neural_compressor.model.model.Model"]], "get_model_fwk_name() (in module neural_compressor.model.model)": [[383, "neural_compressor.model.model.get_model_fwk_name"]], "neural_compressor.model.model": [[383, "module-neural_compressor.model.model"]], "mxnetmodel (class in neural_compressor.model.mxnet_model)": [[384, "neural_compressor.model.mxnet_model.MXNetModel"]], "neural_compressor.model.mxnet_model": [[384, "module-neural_compressor.model.mxnet_model"]], "tfslimnetsfactory (class in neural_compressor.model.nets_factory)": [[385, "neural_compressor.model.nets_factory.TFSlimNetsFactory"]], "neural_compressor.model.nets_factory": [[385, "module-neural_compressor.model.nets_factory"]], "onnxmodel (class in neural_compressor.model.onnx_model)": [[386, "neural_compressor.model.onnx_model.ONNXModel"]], "neural_compressor.model.onnx_model": [[386, "module-neural_compressor.model.onnx_model"]], "tensorflowbasemodel (class in neural_compressor.model.tensorflow_model)": [[387, "neural_compressor.model.tensorflow_model.TensorflowBaseModel"]], "tensorflowcheckpointmodel (class in neural_compressor.model.tensorflow_model)": [[387, "neural_compressor.model.tensorflow_model.TensorflowCheckpointModel"]], "tensorflowllmmodel (class in neural_compressor.model.tensorflow_model)": [[387, "neural_compressor.model.tensorflow_model.TensorflowLLMModel"]], "tensorflowmodel (class in neural_compressor.model.tensorflow_model)": [[387, "neural_compressor.model.tensorflow_model.TensorflowModel"]], "tensorflowqatmodel (class in neural_compressor.model.tensorflow_model)": [[387, "neural_compressor.model.tensorflow_model.TensorflowQATModel"]], "tensorflowsavedmodelmodel (class in neural_compressor.model.tensorflow_model)": [[387, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel"]], "checkpoint_session() (in module neural_compressor.model.tensorflow_model)": [[387, "neural_compressor.model.tensorflow_model.checkpoint_session"]], "estimator_session() (in module neural_compressor.model.tensorflow_model)": [[387, "neural_compressor.model.tensorflow_model.estimator_session"]], "frozen_pb_session() (in module neural_compressor.model.tensorflow_model)": [[387, "neural_compressor.model.tensorflow_model.frozen_pb_session"]], "get_model_type() (in module neural_compressor.model.tensorflow_model)": [[387, "neural_compressor.model.tensorflow_model.get_model_type"]], "graph_def_session() (in module neural_compressor.model.tensorflow_model)": [[387, "neural_compressor.model.tensorflow_model.graph_def_session"]], "graph_session() (in module neural_compressor.model.tensorflow_model)": [[387, "neural_compressor.model.tensorflow_model.graph_session"]], "keras_session() (in module neural_compressor.model.tensorflow_model)": [[387, "neural_compressor.model.tensorflow_model.keras_session"]], "load_saved_model() (in module neural_compressor.model.tensorflow_model)": [[387, "neural_compressor.model.tensorflow_model.load_saved_model"]], "neural_compressor.model.tensorflow_model": [[387, "module-neural_compressor.model.tensorflow_model"]], "saved_model_session() (in module neural_compressor.model.tensorflow_model)": [[387, "neural_compressor.model.tensorflow_model.saved_model_session"]], "slim_session() (in module neural_compressor.model.tensorflow_model)": [[387, "neural_compressor.model.tensorflow_model.slim_session"]], "try_loading_keras() (in module neural_compressor.model.tensorflow_model)": [[387, "neural_compressor.model.tensorflow_model.try_loading_keras"]], "validate_and_inference_input_output() (in module neural_compressor.model.tensorflow_model)": [[387, "neural_compressor.model.tensorflow_model.validate_and_inference_input_output"]], "validate_graph_node() (in module neural_compressor.model.tensorflow_model)": [[387, "neural_compressor.model.tensorflow_model.validate_graph_node"]], "ipexmodel (class in neural_compressor.model.torch_model)": [[388, "neural_compressor.model.torch_model.IPEXModel"]], "pytorchbasemodel (class in neural_compressor.model.torch_model)": [[388, "neural_compressor.model.torch_model.PyTorchBaseModel"]], "pytorchfxmodel (class in neural_compressor.model.torch_model)": [[388, "neural_compressor.model.torch_model.PyTorchFXModel"]], "pytorchmodel (class in neural_compressor.model.torch_model)": [[388, "neural_compressor.model.torch_model.PyTorchModel"]], "neural_compressor.model.torch_model": [[388, "module-neural_compressor.model.torch_model"]], "accuracy (class in neural_compressor.objective)": [[389, "neural_compressor.objective.Accuracy"]], "footprint (class in neural_compressor.objective)": [[389, "neural_compressor.objective.Footprint"]], "modelsize (class in neural_compressor.objective)": [[389, "neural_compressor.objective.ModelSize"]], "multiobjective (class in neural_compressor.objective)": [[389, "neural_compressor.objective.MultiObjective"]], "objective (class in neural_compressor.objective)": [[389, "neural_compressor.objective.Objective"]], "performance (class in neural_compressor.objective)": [[389, "neural_compressor.objective.Performance"]], "neural_compressor.objective": [[389, "module-neural_compressor.objective"]], "objective_custom_registry() (in module neural_compressor.objective)": [[389, "neural_compressor.objective.objective_custom_registry"]], "objective_registry() (in module neural_compressor.objective)": [[389, "neural_compressor.objective.objective_registry"]], "neural_compressor.onnxrt.algorithms": [[390, "module-neural_compressor.onnxrt.algorithms"]], "layer_wise_quant() (in module neural_compressor.onnxrt.algorithms.layer_wise.core)": [[391, "neural_compressor.onnxrt.algorithms.layer_wise.core.layer_wise_quant"]], "neural_compressor.onnxrt.algorithms.layer_wise.core": [[391, "module-neural_compressor.onnxrt.algorithms.layer_wise.core"]], "neural_compressor.onnxrt.algorithms.layer_wise": [[392, "module-neural_compressor.onnxrt.algorithms.layer_wise"]], "calibrator (class in neural_compressor.onnxrt.algorithms.smoother.calibrator)": [[393, "neural_compressor.onnxrt.algorithms.smoother.calibrator.Calibrator"]], "neural_compressor.onnxrt.algorithms.smoother.calibrator": [[393, "module-neural_compressor.onnxrt.algorithms.smoother.calibrator"]], "smoother (class in neural_compressor.onnxrt.algorithms.smoother.core)": [[394, "neural_compressor.onnxrt.algorithms.smoother.core.Smoother"]], "neural_compressor.onnxrt.algorithms.smoother.core": [[394, "module-neural_compressor.onnxrt.algorithms.smoother.core"]], "neural_compressor.onnxrt.algorithms.smoother": [[395, "module-neural_compressor.onnxrt.algorithms.smoother"]], "apply_awq_on_model() (in module neural_compressor.onnxrt.algorithms.weight_only.awq)": [[396, "neural_compressor.onnxrt.algorithms.weight_only.awq.apply_awq_on_model"]], "awq_quantize() (in module neural_compressor.onnxrt.algorithms.weight_only.awq)": [[396, "neural_compressor.onnxrt.algorithms.weight_only.awq.awq_quantize"]], "neural_compressor.onnxrt.algorithms.weight_only.awq": [[396, "module-neural_compressor.onnxrt.algorithms.weight_only.awq"]], "apply_gptq_on_model() (in module neural_compressor.onnxrt.algorithms.weight_only.gptq)": [[397, "neural_compressor.onnxrt.algorithms.weight_only.gptq.apply_gptq_on_model"]], "gptq_quantize() (in module neural_compressor.onnxrt.algorithms.weight_only.gptq)": [[397, "neural_compressor.onnxrt.algorithms.weight_only.gptq.gptq_quantize"]], "neural_compressor.onnxrt.algorithms.weight_only.gptq": [[397, "module-neural_compressor.onnxrt.algorithms.weight_only.gptq"]], "neural_compressor.onnxrt.algorithms.weight_only": [[398, "module-neural_compressor.onnxrt.algorithms.weight_only"]], "apply_rtn_on_model() (in module neural_compressor.onnxrt.algorithms.weight_only.rtn)": [[399, "neural_compressor.onnxrt.algorithms.weight_only.rtn.apply_rtn_on_model"]], "neural_compressor.onnxrt.algorithms.weight_only.rtn": [[399, "module-neural_compressor.onnxrt.algorithms.weight_only.rtn"]], "rtn_quantize() (in module neural_compressor.onnxrt.algorithms.weight_only.rtn)": [[399, "neural_compressor.onnxrt.algorithms.weight_only.rtn.rtn_quantize"]], "make_matmul_weight_only_node() (in module neural_compressor.onnxrt.algorithms.weight_only.utility)": [[400, "neural_compressor.onnxrt.algorithms.weight_only.utility.make_matmul_weight_only_node"]], "neural_compressor.onnxrt.algorithms.weight_only.utility": [[400, "module-neural_compressor.onnxrt.algorithms.weight_only.utility"]], "pad_tensor() (in module neural_compressor.onnxrt.algorithms.weight_only.utility)": [[400, "neural_compressor.onnxrt.algorithms.weight_only.utility.pad_tensor"]], "prepare_inputs() (in module neural_compressor.onnxrt.algorithms.weight_only.utility)": [[400, "neural_compressor.onnxrt.algorithms.weight_only.utility.prepare_inputs"]], "qdq_tensor() (in module neural_compressor.onnxrt.algorithms.weight_only.utility)": [[400, "neural_compressor.onnxrt.algorithms.weight_only.utility.qdq_tensor"]], "quant_tensor() (in module neural_compressor.onnxrt.algorithms.weight_only.utility)": [[400, "neural_compressor.onnxrt.algorithms.weight_only.utility.quant_tensor"]], "neural_compressor.onnxrt": [[401, "module-neural_compressor.onnxrt"]], "awq_quantize_entry() (in module neural_compressor.onnxrt.quantization.algorithm_entry)": [[402, "neural_compressor.onnxrt.quantization.algorithm_entry.awq_quantize_entry"]], "gptq_quantize_entry() (in module neural_compressor.onnxrt.quantization.algorithm_entry)": [[402, "neural_compressor.onnxrt.quantization.algorithm_entry.gptq_quantize_entry"]], "neural_compressor.onnxrt.quantization.algorithm_entry": [[402, "module-neural_compressor.onnxrt.quantization.algorithm_entry"]], "rtn_quantize_entry() (in module neural_compressor.onnxrt.quantization.algorithm_entry)": [[402, "neural_compressor.onnxrt.quantization.algorithm_entry.rtn_quantize_entry"]], "smooth_quant_entry() (in module neural_compressor.onnxrt.quantization.algorithm_entry)": [[402, "neural_compressor.onnxrt.quantization.algorithm_entry.smooth_quant_entry"]], "autotune() (in module neural_compressor.onnxrt.quantization.autotune)": [[403, "neural_compressor.onnxrt.quantization.autotune.autotune"]], "neural_compressor.onnxrt.quantization.autotune": [[403, "module-neural_compressor.onnxrt.quantization.autotune"]], "calibrationdatareader (class in neural_compressor.onnxrt.quantization.calibrate)": [[404, "neural_compressor.onnxrt.quantization.calibrate.CalibrationDataReader"]], "neural_compressor.onnxrt.quantization.calibrate": [[404, "module-neural_compressor.onnxrt.quantization.calibrate"]], "awqconfig (class in neural_compressor.onnxrt.quantization.config)": [[405, "neural_compressor.onnxrt.quantization.config.AWQConfig"]], "gptqconfig (class in neural_compressor.onnxrt.quantization.config)": [[405, "neural_compressor.onnxrt.quantization.config.GPTQConfig"]], "rtnconfig (class in neural_compressor.onnxrt.quantization.config)": [[405, "neural_compressor.onnxrt.quantization.config.RTNConfig"]], "smoohquantconfig (class in neural_compressor.onnxrt.quantization.config)": [[405, "neural_compressor.onnxrt.quantization.config.SmoohQuantConfig"]], "get_default_awq_config() (in module neural_compressor.onnxrt.quantization.config)": [[405, "neural_compressor.onnxrt.quantization.config.get_default_awq_config"]], "get_default_gptq_config() (in module neural_compressor.onnxrt.quantization.config)": [[405, "neural_compressor.onnxrt.quantization.config.get_default_gptq_config"]], "get_default_rtn_config() (in module neural_compressor.onnxrt.quantization.config)": [[405, "neural_compressor.onnxrt.quantization.config.get_default_rtn_config"]], "get_default_sq_config() (in module neural_compressor.onnxrt.quantization.config)": [[405, "neural_compressor.onnxrt.quantization.config.get_default_sq_config"]], "neural_compressor.onnxrt.quantization.config": [[405, "module-neural_compressor.onnxrt.quantization.config"]], "neural_compressor.onnxrt.quantization": [[406, "module-neural_compressor.onnxrt.quantization"]], "neural_compressor.onnxrt.quantization.quantize": [[407, "module-neural_compressor.onnxrt.quantization.quantize"]], "neural_compressor.onnxrt.utils": [[408, "module-neural_compressor.onnxrt.utils"]], "onnxmodel (class in neural_compressor.onnxrt.utils.onnx_model)": [[409, "neural_compressor.onnxrt.utils.onnx_model.ONNXModel"]], "neural_compressor.onnxrt.utils.onnx_model": [[409, "module-neural_compressor.onnxrt.utils.onnx_model"]], "check_model_with_infer_shapes() (in module neural_compressor.onnxrt.utils.utility)": [[410, "neural_compressor.onnxrt.utils.utility.check_model_with_infer_shapes"]], "find_by_name() (in module neural_compressor.onnxrt.utils.utility)": [[410, "neural_compressor.onnxrt.utils.utility.find_by_name"]], "get_qrange_for_qtype() (in module neural_compressor.onnxrt.utils.utility)": [[410, "neural_compressor.onnxrt.utils.utility.get_qrange_for_qType"]], "is_b_transposed() (in module neural_compressor.onnxrt.utils.utility)": [[410, "neural_compressor.onnxrt.utils.utility.is_B_transposed"]], "neural_compressor.onnxrt.utils.utility": [[410, "module-neural_compressor.onnxrt.utils.utility"]], "quantize_data() (in module neural_compressor.onnxrt.utils.utility)": [[410, "neural_compressor.onnxrt.utils.utility.quantize_data"]], "register_algo() (in module neural_compressor.onnxrt.utils.utility)": [[410, "neural_compressor.onnxrt.utils.utility.register_algo"]], "simple_progress_bar() (in module neural_compressor.onnxrt.utils.utility)": [[410, "neural_compressor.onnxrt.utils.utility.simple_progress_bar"]], "neural_compressor.profiling": [[411, "module-neural_compressor.profiling"]], "parserfactory (class in neural_compressor.profiling.parser.factory)": [[412, "neural_compressor.profiling.parser.factory.ParserFactory"]], "neural_compressor.profiling.parser.factory": [[412, "module-neural_compressor.profiling.parser.factory"]], "neural_compressor.profiling.parser": [[413, "module-neural_compressor.profiling.parser"]], "onnxrtparserfactory (class in neural_compressor.profiling.parser.onnx_parser.factory)": [[414, "neural_compressor.profiling.parser.onnx_parser.factory.OnnxrtParserFactory"]], "neural_compressor.profiling.parser.onnx_parser.factory": [[414, "module-neural_compressor.profiling.parser.onnx_parser.factory"]], "neural_compressor.profiling.parser.onnx_parser": [[415, "module-neural_compressor.profiling.parser.onnx_parser"]], "onnxprofilingparser (class in neural_compressor.profiling.parser.onnx_parser.parser)": [[416, "neural_compressor.profiling.parser.onnx_parser.parser.OnnxProfilingParser"]], "neural_compressor.profiling.parser.onnx_parser.parser": [[416, "module-neural_compressor.profiling.parser.onnx_parser.parser"]], "profilingparser (class in neural_compressor.profiling.parser.parser)": [[417, "neural_compressor.profiling.parser.parser.ProfilingParser"]], "neural_compressor.profiling.parser.parser": [[417, "module-neural_compressor.profiling.parser.parser"]], "profilingresult (class in neural_compressor.profiling.parser.result)": [[418, "neural_compressor.profiling.parser.result.ProfilingResult"]], "neural_compressor.profiling.parser.result": [[418, "module-neural_compressor.profiling.parser.result"]], "tensorflowparserfactory (class in neural_compressor.profiling.parser.tensorflow_parser.factory)": [[419, "neural_compressor.profiling.parser.tensorflow_parser.factory.TensorFlowParserFactory"]], "neural_compressor.profiling.parser.tensorflow_parser.factory": [[419, "module-neural_compressor.profiling.parser.tensorflow_parser.factory"]], "neural_compressor.profiling.parser.tensorflow_parser": [[420, "module-neural_compressor.profiling.parser.tensorflow_parser"]], "tensorflowprofilingparser (class in neural_compressor.profiling.parser.tensorflow_parser.parser)": [[421, "neural_compressor.profiling.parser.tensorflow_parser.parser.TensorFlowProfilingParser"]], "neural_compressor.profiling.parser.tensorflow_parser.parser": [[421, "module-neural_compressor.profiling.parser.tensorflow_parser.parser"]], "profilerfactory (class in neural_compressor.profiling.profiler.factory)": [[422, "neural_compressor.profiling.profiler.factory.ProfilerFactory"]], "neural_compressor.profiling.profiler.factory": [[422, "module-neural_compressor.profiling.profiler.factory"]], "neural_compressor.profiling.profiler": [[423, "module-neural_compressor.profiling.profiler"]], "profilerfactory (class in neural_compressor.profiling.profiler.onnxrt_profiler.factory)": [[424, "neural_compressor.profiling.profiler.onnxrt_profiler.factory.ProfilerFactory"]], "neural_compressor.profiling.profiler.onnxrt_profiler.factory": [[424, "module-neural_compressor.profiling.profiler.onnxrt_profiler.factory"]], "neural_compressor.profiling.profiler.onnxrt_profiler": [[425, "module-neural_compressor.profiling.profiler.onnxrt_profiler"]], "profiler (class in neural_compressor.profiling.profiler.onnxrt_profiler.profiler)": [[426, "neural_compressor.profiling.profiler.onnxrt_profiler.profiler.Profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.profiler": [[426, "module-neural_compressor.profiling.profiler.onnxrt_profiler.profiler"]], "create_onnx_config() (in module neural_compressor.profiling.profiler.onnxrt_profiler.utils)": [[427, "neural_compressor.profiling.profiler.onnxrt_profiler.utils.create_onnx_config"]], "neural_compressor.profiling.profiler.onnxrt_profiler.utils": [[427, "module-neural_compressor.profiling.profiler.onnxrt_profiler.utils"]], "profiler (class in neural_compressor.profiling.profiler.profiler)": [[428, "neural_compressor.profiling.profiler.profiler.Profiler"]], "neural_compressor.profiling.profiler.profiler": [[428, "module-neural_compressor.profiling.profiler.profiler"]], "profilerfactory (class in neural_compressor.profiling.profiler.tensorflow_profiler.factory)": [[429, "neural_compressor.profiling.profiler.tensorflow_profiler.factory.ProfilerFactory"]], "neural_compressor.profiling.profiler.tensorflow_profiler.factory": [[429, "module-neural_compressor.profiling.profiler.tensorflow_profiler.factory"]], "neural_compressor.profiling.profiler.tensorflow_profiler": [[430, "module-neural_compressor.profiling.profiler.tensorflow_profiler"]], "profiler (class in neural_compressor.profiling.profiler.tensorflow_profiler.profiler)": [[431, "neural_compressor.profiling.profiler.tensorflow_profiler.profiler.Profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.profiler": [[431, "module-neural_compressor.profiling.profiler.tensorflow_profiler.profiler"]], "create_tf_config() (in module neural_compressor.profiling.profiler.tensorflow_profiler.utils)": [[432, "neural_compressor.profiling.profiler.tensorflow_profiler.utils.create_tf_config"]], "delete_assign() (in module neural_compressor.profiling.profiler.tensorflow_profiler.utils)": [[432, "neural_compressor.profiling.profiler.tensorflow_profiler.utils.delete_assign"]], "neural_compressor.profiling.profiler.tensorflow_profiler.utils": [[432, "module-neural_compressor.profiling.profiler.tensorflow_profiler.utils"]], "set_eager_execution() (in module neural_compressor.profiling.profiler.tensorflow_profiler.utils)": [[432, "neural_compressor.profiling.profiler.tensorflow_profiler.utils.set_eager_execution"]], "fit() (in module neural_compressor.quantization)": [[433, "neural_compressor.quantization.fit"]], "neural_compressor.quantization": [[433, "module-neural_compressor.quantization"]], "autotunestrategy (class in neural_compressor.strategy.auto)": [[434, "neural_compressor.strategy.auto.AutoTuneStrategy"]], "neural_compressor.strategy.auto": [[434, "module-neural_compressor.strategy.auto"]], "automixedprecisiontunestrategy (class in neural_compressor.strategy.auto_mixed_precision)": [[435, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[435, "module-neural_compressor.strategy.auto_mixed_precision"]], "basictunestrategy (class in neural_compressor.strategy.basic)": [[436, "neural_compressor.strategy.basic.BasicTuneStrategy"]], "neural_compressor.strategy.basic": [[436, "module-neural_compressor.strategy.basic"]], "bayesianoptimization (class in neural_compressor.strategy.bayesian)": [[437, "neural_compressor.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.strategy.bayesian)": [[437, "neural_compressor.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.strategy.bayesian)": [[437, "neural_compressor.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.strategy.bayesian)": [[437, "neural_compressor.strategy.bayesian.acq_max"]], "neural_compressor.strategy.bayesian": [[437, "module-neural_compressor.strategy.bayesian"]], "conservativetunestrategy (class in neural_compressor.strategy.conservative)": [[438, "neural_compressor.strategy.conservative.ConservativeTuneStrategy"]], "neural_compressor.strategy.conservative": [[438, "module-neural_compressor.strategy.conservative"]], "exhaustivetunestrategy (class in neural_compressor.strategy.exhaustive)": [[439, "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[439, "module-neural_compressor.strategy.exhaustive"]], "hawq_v2tunestrategy (class in neural_compressor.strategy.hawq_v2)": [[440, "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[440, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[441, "module-neural_compressor.strategy"]], "msetunestrategy (class in neural_compressor.strategy.mse)": [[442, "neural_compressor.strategy.mse.MSETuneStrategy"]], "neural_compressor.strategy.mse": [[442, "module-neural_compressor.strategy.mse"]], "mse_v2tunestrategy (class in neural_compressor.strategy.mse_v2)": [[443, "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.strategy.mse_v2": [[443, "module-neural_compressor.strategy.mse_v2"]], "randomtunestrategy (class in neural_compressor.strategy.random)": [[444, "neural_compressor.strategy.random.RandomTuneStrategy"]], "neural_compressor.strategy.random": [[444, "module-neural_compressor.strategy.random"]], "tunestrategy (class in neural_compressor.strategy.strategy)": [[445, "neural_compressor.strategy.strategy.TuneStrategy"]], "tunestrategymeta (class in neural_compressor.strategy.strategy)": [[445, "neural_compressor.strategy.strategy.TuneStrategyMeta"]], "neural_compressor.strategy.strategy": [[445, "module-neural_compressor.strategy.strategy"]], "strategy_registry() (in module neural_compressor.strategy.strategy)": [[445, "neural_compressor.strategy.strategy.strategy_registry"]], "neural_compressor.strategy.utils.constant": [[446, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[447, "module-neural_compressor.strategy.utils"]], "blockfallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[448, "neural_compressor.strategy.utils.tuning_sampler.BlockFallbackTuningSampler"]], "fallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[448, "neural_compressor.strategy.utils.tuning_sampler.FallbackTuningSampler"]], "lowerbitssampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[448, "neural_compressor.strategy.utils.tuning_sampler.LowerBitsSampler"]], "modelwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[448, "neural_compressor.strategy.utils.tuning_sampler.ModelWiseTuningSampler"]], "optypewisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[448, "neural_compressor.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler"]], "opwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[448, "neural_compressor.strategy.utils.tuning_sampler.OpWiseTuningSampler"]], "smoothquantsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[448, "neural_compressor.strategy.utils.tuning_sampler.SmoothQuantSampler"]], "tuningorder (class in neural_compressor.strategy.utils.tuning_sampler)": [[448, "neural_compressor.strategy.utils.tuning_sampler.TuningOrder"]], "tuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[448, "neural_compressor.strategy.utils.tuning_sampler.TuningSampler"]], "weightonlyquantsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[448, "neural_compressor.strategy.utils.tuning_sampler.WeightOnlyQuantSampler"]], "neural_compressor.strategy.utils.tuning_sampler": [[448, "module-neural_compressor.strategy.utils.tuning_sampler"]], "tuningitem (class in neural_compressor.strategy.utils.tuning_space)": [[449, "neural_compressor.strategy.utils.tuning_space.TuningItem"]], "tuningspace (class in neural_compressor.strategy.utils.tuning_space)": [[449, "neural_compressor.strategy.utils.tuning_space.TuningSpace"]], "initial_tuning_cfg_with_quant_mode() (in module neural_compressor.strategy.utils.tuning_space)": [[449, "neural_compressor.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode"]], "neural_compressor.strategy.utils.tuning_space": [[449, "module-neural_compressor.strategy.utils.tuning_space"]], "pattern_to_internal() (in module neural_compressor.strategy.utils.tuning_space)": [[449, "neural_compressor.strategy.utils.tuning_space.pattern_to_internal"]], "pattern_to_path() (in module neural_compressor.strategy.utils.tuning_space)": [[449, "neural_compressor.strategy.utils.tuning_space.pattern_to_path"]], "quant_mode_from_pattern() (in module neural_compressor.strategy.utils.tuning_space)": [[449, "neural_compressor.strategy.utils.tuning_space.quant_mode_from_pattern"]], "optuningconfig (class in neural_compressor.strategy.utils.tuning_structs)": [[450, "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig"]], "neural_compressor.strategy.utils.tuning_structs": [[450, "module-neural_compressor.strategy.utils.tuning_structs"]], "classregister (class in neural_compressor.strategy.utils.utility)": [[451, "neural_compressor.strategy.utils.utility.ClassRegister"]], "ordereddefaultdict (class in neural_compressor.strategy.utils.utility)": [[451, "neural_compressor.strategy.utils.utility.OrderedDefaultDict"]], "quantoptions (class in neural_compressor.strategy.utils.utility)": [[451, "neural_compressor.strategy.utils.utility.QuantOptions"]], "quanttype (class in neural_compressor.strategy.utils.utility)": [[451, "neural_compressor.strategy.utils.utility.QuantType"]], "build_slave_faker_model() (in module neural_compressor.strategy.utils.utility)": [[451, "neural_compressor.strategy.utils.utility.build_slave_faker_model"]], "extract_data_type() (in module neural_compressor.strategy.utils.utility)": [[451, "neural_compressor.strategy.utils.utility.extract_data_type"]], "get_adaptor_name() (in module neural_compressor.strategy.utils.utility)": [[451, "neural_compressor.strategy.utils.utility.get_adaptor_name"]], "neural_compressor.strategy.utils.utility": [[451, "module-neural_compressor.strategy.utils.utility"]], "preprocess_user_cfg() (in module neural_compressor.strategy.utils.utility)": [[451, "neural_compressor.strategy.utils.utility.preprocess_user_cfg"]], "reverted_data_type() (in module neural_compressor.strategy.utils.utility)": [[451, "neural_compressor.strategy.utils.utility.reverted_data_type"]], "exampleclass (class in neural_compressor.template.api_doc_example)": [[452, "neural_compressor.template.api_doc_example.ExampleClass"]], "attr1 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[452, "neural_compressor.template.api_doc_example.ExampleClass.attr1"]], "attr2 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[452, "neural_compressor.template.api_doc_example.ExampleClass.attr2"]], "attr5 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[452, "neural_compressor.template.api_doc_example.ExampleClass.attr5"]], "attribute1 (in module neural_compressor.template.api_doc_example)": [[452, "neural_compressor.template.api_doc_example.attribute1"]], "function1() (in module neural_compressor.template.api_doc_example)": [[452, "neural_compressor.template.api_doc_example.function1"]], "function2() (in module neural_compressor.template.api_doc_example)": [[452, "neural_compressor.template.api_doc_example.function2"]], "function3() (in module neural_compressor.template.api_doc_example)": [[452, "neural_compressor.template.api_doc_example.function3"]], "generator1() (in module neural_compressor.template.api_doc_example)": [[452, "neural_compressor.template.api_doc_example.generator1"]], "module_debug_level1 (in module neural_compressor.template.api_doc_example)": [[452, "neural_compressor.template.api_doc_example.module_debug_level1"]], "neural_compressor.template.api_doc_example": [[452, "module-neural_compressor.template.api_doc_example"]], "neural_compressor.template": [[453, "module-neural_compressor.template"]], "neural_compressor.tensorflow.algorithms": [[454, "module-neural_compressor.tensorflow.algorithms"]], "smoothquantcalibration (class in neural_compressor.tensorflow.algorithms.smoother.calibration)": [[455, "neural_compressor.tensorflow.algorithms.smoother.calibration.SmoothQuantCalibration"]], "smoothquantcalibrationllm (class in neural_compressor.tensorflow.algorithms.smoother.calibration)": [[455, "neural_compressor.tensorflow.algorithms.smoother.calibration.SmoothQuantCalibrationLLM"]], "neural_compressor.tensorflow.algorithms.smoother.calibration": [[455, "module-neural_compressor.tensorflow.algorithms.smoother.calibration"]], "smoothquant (class in neural_compressor.tensorflow.algorithms.smoother.core)": [[456, "neural_compressor.tensorflow.algorithms.smoother.core.SmoothQuant"]], "neural_compressor.tensorflow.algorithms.smoother.core": [[456, "module-neural_compressor.tensorflow.algorithms.smoother.core"]], "neural_compressor.tensorflow.algorithms.smoother": [[457, "module-neural_compressor.tensorflow.algorithms.smoother"]], "smoothquantscaler (class in neural_compressor.tensorflow.algorithms.smoother.scaler)": [[458, "neural_compressor.tensorflow.algorithms.smoother.scaler.SmoothQuantScaler"]], "smoothquantscalerllm (class in neural_compressor.tensorflow.algorithms.smoother.scaler)": [[458, "neural_compressor.tensorflow.algorithms.smoother.scaler.SmoothQuantScalerLLM"]], "neural_compressor.tensorflow.algorithms.smoother.scaler": [[458, "module-neural_compressor.tensorflow.algorithms.smoother.scaler"]], "neural_compressor.tensorflow.algorithms.static_quant": [[459, "module-neural_compressor.tensorflow.algorithms.static_quant"]], "kerasadaptor (class in neural_compressor.tensorflow.algorithms.static_quant.keras)": [[460, "neural_compressor.tensorflow.algorithms.static_quant.keras.KerasAdaptor"]], "kerasconfigconverter (class in neural_compressor.tensorflow.algorithms.static_quant.keras)": [[460, "neural_compressor.tensorflow.algorithms.static_quant.keras.KerasConfigConverter"]], "kerasquery (class in neural_compressor.tensorflow.algorithms.static_quant.keras)": [[460, "neural_compressor.tensorflow.algorithms.static_quant.keras.KerasQuery"]], "neural_compressor.tensorflow.algorithms.static_quant.keras": [[460, "module-neural_compressor.tensorflow.algorithms.static_quant.keras"]], "tensorflowadaptor (class in neural_compressor.tensorflow.algorithms.static_quant.tensorflow)": [[461, "neural_compressor.tensorflow.algorithms.static_quant.tensorflow.TensorFlowAdaptor"]], "tensorflowconfig (class in neural_compressor.tensorflow.algorithms.static_quant.tensorflow)": [[461, "neural_compressor.tensorflow.algorithms.static_quant.tensorflow.TensorFlowConfig"]], "tensorflowconfigconverter (class in neural_compressor.tensorflow.algorithms.static_quant.tensorflow)": [[461, "neural_compressor.tensorflow.algorithms.static_quant.tensorflow.TensorflowConfigConverter"]], "tensorflowquery (class in neural_compressor.tensorflow.algorithms.static_quant.tensorflow)": [[461, "neural_compressor.tensorflow.algorithms.static_quant.tensorflow.TensorflowQuery"]], "tensorflow_itexadaptor (class in neural_compressor.tensorflow.algorithms.static_quant.tensorflow)": [[461, "neural_compressor.tensorflow.algorithms.static_quant.tensorflow.Tensorflow_ITEXAdaptor"]], "neural_compressor.tensorflow.algorithms.static_quant.tensorflow": [[461, "module-neural_compressor.tensorflow.algorithms.static_quant.tensorflow"]], "neural_compressor.tensorflow": [[462, "module-neural_compressor.tensorflow"]], "neural_compressor.tensorflow.keras": [[463, "module-neural_compressor.tensorflow.keras"]], "neural_compressor.tensorflow.keras.layers.conv2d": [[464, "module-neural_compressor.tensorflow.keras.layers.conv2d"]], "neural_compressor.tensorflow.keras.layers.dense": [[465, "module-neural_compressor.tensorflow.keras.layers.dense"]], "neural_compressor.tensorflow.keras.layers.depthwise_conv2d": [[466, "module-neural_compressor.tensorflow.keras.layers.depthwise_conv2d"]], "neural_compressor.tensorflow.keras.layers": [[467, "module-neural_compressor.tensorflow.keras.layers"]], "neural_compressor.tensorflow.keras.layers.pool2d": [[468, "module-neural_compressor.tensorflow.keras.layers.pool2d"]], "neural_compressor.tensorflow.keras.layers.quantizer": [[469, "module-neural_compressor.tensorflow.keras.layers.quantizer"]], "neural_compressor.tensorflow.keras.layers.separable_conv2d": [[470, "module-neural_compressor.tensorflow.keras.layers.separable_conv2d"]], "staticquantconfig (class in neural_compressor.tensorflow.keras.quantization.config)": [[471, "neural_compressor.tensorflow.keras.quantization.config.StaticQuantConfig"]], "get_all_registered_configs() (in module neural_compressor.tensorflow.keras.quantization.config)": [[471, "neural_compressor.tensorflow.keras.quantization.config.get_all_registered_configs"]], "get_default_static_quant_config() (in module neural_compressor.tensorflow.keras.quantization.config)": [[471, "neural_compressor.tensorflow.keras.quantization.config.get_default_static_quant_config"]], "neural_compressor.tensorflow.keras.quantization.config": [[471, "module-neural_compressor.tensorflow.keras.quantization.config"]], "neural_compressor.tensorflow.keras.quantization": [[472, "module-neural_compressor.tensorflow.keras.quantization"]], "neural_compressor.tensorflow.quantization.algorithm_entry": [[473, "module-neural_compressor.tensorflow.quantization.algorithm_entry"]], "static_quant_entry() (in module neural_compressor.tensorflow.quantization.algorithm_entry)": [[473, "neural_compressor.tensorflow.quantization.algorithm_entry.static_quant_entry"]], "autotune() (in module neural_compressor.tensorflow.quantization.autotune)": [[474, "neural_compressor.tensorflow.quantization.autotune.autotune"]], "neural_compressor.tensorflow.quantization.autotune": [[474, "module-neural_compressor.tensorflow.quantization.autotune"]], "smoothquantconfig (class in neural_compressor.tensorflow.quantization.config)": [[475, "neural_compressor.tensorflow.quantization.config.SmoothQuantConfig"]], "staticquantconfig (class in neural_compressor.tensorflow.quantization.config)": [[475, "neural_compressor.tensorflow.quantization.config.StaticQuantConfig"]], "get_default_sq_config() (in module neural_compressor.tensorflow.quantization.config)": [[475, "neural_compressor.tensorflow.quantization.config.get_default_sq_config"]], "get_default_static_quant_config() (in module neural_compressor.tensorflow.quantization.config)": [[475, "neural_compressor.tensorflow.quantization.config.get_default_static_quant_config"]], "neural_compressor.tensorflow.quantization.config": [[475, "module-neural_compressor.tensorflow.quantization.config"]], "neural_compressor.tensorflow.quantization": [[476, "module-neural_compressor.tensorflow.quantization"]], "neural_compressor.tensorflow.quantization.quantize": [[477, "module-neural_compressor.tensorflow.quantization.quantize"]], "quantize_model() (in module neural_compressor.tensorflow.quantization.quantize)": [[477, "neural_compressor.tensorflow.quantization.quantize.quantize_model"]], "quantize_model_with_single_config() (in module neural_compressor.tensorflow.quantization.quantize)": [[477, "neural_compressor.tensorflow.quantization.quantize.quantize_model_with_single_config"]], "graphconverter (class in neural_compressor.tensorflow.quantization.utils.graph_converter)": [[478, "neural_compressor.tensorflow.quantization.utils.graph_converter.GraphConverter"]], "neural_compressor.tensorflow.quantization.utils.graph_converter": [[478, "module-neural_compressor.tensorflow.quantization.utils.graph_converter"]], "graphconverterwithoutcalib (class in neural_compressor.tensorflow.quantization.utils.graph_converter_without_calib)": [[479, "neural_compressor.tensorflow.quantization.utils.graph_converter_without_calib.GraphConverterWithoutCalib"]], "neural_compressor.tensorflow.quantization.utils.graph_converter_without_calib": [[479, "module-neural_compressor.tensorflow.quantization.utils.graph_converter_without_calib"]], "bf16convert (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.bf16_convert)": [[480, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.bf16_convert.BF16Convert"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.bf16_convert": [[480, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.bf16_convert"]], "dequantizecastoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.dequantize_cast_optimizer)": [[481, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.dequantize_cast_optimizer.DequantizeCastOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.dequantize_cast_optimizer": [[481, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.dequantize_cast_optimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16": [[482, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16"]], "convertaddtobiasaddoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd)": [[483, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd": [[483, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd"]], "convertlayoutoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout)": [[484, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout": [[484, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout"]], "convertleakyreluoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu)": [[485, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu": [[485, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu"]], "convertnantorandom (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random)": [[486, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random": [[486, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random"]], "convertplaceholdertoconst (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const)": [[487, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const": [[487, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const"]], "dilatedcontraction (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction)": [[488, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction.DilatedContraction"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction": [[488, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction"]], "injectdummybiasaddoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd)": [[489, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd": [[489, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd"]], "expanddimsoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer)": [[490, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer": [[490, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer"]], "fetchweightfromreshapeoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape)": [[491, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape": [[491, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "foldbatchnormnodesoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm)": [[492, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm": [[492, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm"]], "graphfoldconstantoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant)": [[493, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant": [[493, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant"]], "fusebiasaddandaddoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add)": [[494, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add": [[494, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add"]], "fusecolumnwisemuloptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul)": [[495, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul": [[495, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul"]], "fuseconvwithmathoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math)": [[496, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math": [[496, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math"]], "fusedecomposedbnoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn)": [[497, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn.FuseDecomposedBNOptimizer"]], "bypass_reshape() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn)": [[497, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn.bypass_reshape"]], "get_const_dim_count() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn)": [[497, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn.get_const_dim_count"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn": [[497, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn"]], "node_from_map() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn)": [[497, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn.node_from_map"]], "node_name_from_input() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn)": [[497, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn)": [[497, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn)": [[497, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn.values_from_const"]], "fusedecomposedinoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in)": [[498, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in.FuseDecomposedINOptimizer"]], "bypass_reshape() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in)": [[498, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in.bypass_reshape"]], "get_const_dim_count() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in)": [[498, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in.get_const_dim_count"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in": [[498, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in"]], "node_from_map() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in)": [[498, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in.node_from_map"]], "node_name_from_input() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in)": [[498, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in)": [[498, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in)": [[498, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in.values_from_const"]], "fusegeluoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu)": [[499, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu": [[499, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu"]], "fuselayernormoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm)": [[500, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm": [[500, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm"]], "node_from_map() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm)": [[500, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm.node_from_map"]], "node_name_from_input() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm)": [[500, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm.node_name_from_input"]], "values_from_const() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm)": [[500, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm.values_from_const"]], "fusepadwithconv2doptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv)": [[501, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv": [[501, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv"]], "fusepadwithfp32conv2doptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv)": [[502, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[502, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "fusetransposereshapeoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose)": [[503, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose": [[503, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose"]], "graphcseoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer)": [[504, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer": [[504, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer"]], "grappleroptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass)": [[505, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass": [[505, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic": [[506, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic"]], "insertprintminmaxnode (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node)": [[507, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node": [[507, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node"]], "movesqueezeafterreluoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu)": [[508, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu": [[508, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu"]], "preoptimization (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize)": [[509, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize.PreOptimization"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize": [[509, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize"]], "removetrainingnodesoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes)": [[510, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes": [[510, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes"]], "renamebatchnormoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm)": [[511, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm": [[511, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm"]], "splitsharedinputoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input)": [[512, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input": [[512, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input"]], "stripequivalentnodesoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes)": [[513, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes": [[513, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes"]], "stripunusednodesoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes)": [[514, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes": [[514, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes"]], "switchoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer)": [[515, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer": [[515, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer"]], "graphrewriterbase (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base)": [[516, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base.GraphRewriterBase"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base": [[516, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter": [[517, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter"]], "freezefakequantopoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_fake_quant)": [[518, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_fake_quant": [[518, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_fake_quant"]], "freezevaluetransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value)": [[519, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value": [[519, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value"]], "freezevaluewithoutcalibtransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value_without_calib)": [[520, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value_without_calib": [[520, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value_without_calib"]], "fuseconvredundantdequantizetransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_redundant_dequantize)": [[521, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[521, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "fuseconvrequantizetransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_requantize)": [[522, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_requantize": [[522, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_requantize"]], "fusematmulredundantdequantizetransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize)": [[523, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[523, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "fusematmulrequantizedequantizenewapitransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize)": [[524, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer"]], "fusematmulrequantizedequantizetransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize)": [[524, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer"]], "fusematmulrequantizenewapitransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize)": [[524, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer"]], "fusematmulrequantizetransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize)": [[524, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize": [[524, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8": [[525, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8"]], "metainfochangingmemopoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.meta_op_optimizer)": [[526, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.meta_op_optimizer": [[526, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.meta_op_optimizer"]], "posthostconstconverter (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_hostconst_converter)": [[527, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_hostconst_converter": [[527, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_hostconst_converter"]], "postcseoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_quantized_op_cse)": [[528, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_quantized_op_cse": [[528, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_quantized_op_cse"]], "quantizedrnnconverter (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.rnn_convert)": [[529, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.rnn_convert": [[529, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.rnn_convert"]], "scalepropagationtransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.scale_propagation)": [[530, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.scale_propagation": [[530, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq": [[531, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq"]], "generategraphwithqdqpattern (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.insert_qdq_pattern)": [[532, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.insert_qdq_pattern": [[532, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.insert_qdq_pattern"]], "mergeduplicatedqdqoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.merge_duplicated_qdq)": [[533, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.merge_duplicated_qdq": [[533, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "shareqdqforitexypatternoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.share_qdq_y_pattern)": [[534, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.share_qdq_y_pattern": [[534, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "graphanalyzer (class in neural_compressor.tensorflow.quantization.utils.graph_util)": [[535, "neural_compressor.tensorflow.quantization.utils.graph_util.GraphAnalyzer"]], "graphrewriterhelper (class in neural_compressor.tensorflow.quantization.utils.graph_util)": [[535, "neural_compressor.tensorflow.quantization.utils.graph_util.GraphRewriterHelper"]], "neural_compressor.tensorflow.quantization.utils.graph_util": [[535, "module-neural_compressor.tensorflow.quantization.utils.graph_util"]], "neural_compressor.tensorflow.quantization.utils": [[536, "module-neural_compressor.tensorflow.quantization.utils"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph": [[537, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph"]], "fakequantize (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.fake_quantize)": [[538, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.fake_quantize.FakeQuantize"]], "fakequantizebase (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.fake_quantize)": [[538, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.fake_quantize": [[538, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat": [[539, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat"]], "quantizeconfig (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_config)": [[540, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_config.QuantizeConfig"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_config": [[540, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_config"]], "init_quantize_config() (in module neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_helper)": [[541, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_helper.init_quantize_config"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_helper": [[541, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_helper"]], "qat_clone_function() (in module neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_helper)": [[541, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_helper.qat_clone_function"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers": [[542, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers"]], "config_quantizable_layers() (in module neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.optimize_layer)": [[543, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.optimize_layer.config_quantizable_layers"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.optimize_layer": [[543, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "quantizelayeradd (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_add)": [[544, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_add.QuantizeLayerAdd"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[544, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "quantizelayerbase (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_base)": [[545, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_base.QuantizeLayerBase"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[545, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "quantizelayerbatchnormalization (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_bn)": [[546, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_bn.QuantizeLayerBatchNormalization"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[546, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "quantizewrapper (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_wrapper)": [[547, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper"]], "quantizewrapperbase (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_wrapper)": [[547, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_wrapper": [[547, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_wrapper"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_bn)": [[548, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_bn": [[548, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_concatv2)": [[549, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_concatv2": [[549, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_conv)": [[550, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_conv": [[550, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_conv"]], "fusenodestartwithdeconv2d (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_deconv)": [[551, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_deconv": [[551, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_deconv"]], "fusenodestartwithfusedinstancenorm (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_in)": [[552, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_in": [[552, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_in"]], "fusenodestartwithmatmul (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_matmul)": [[553, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_matmul": [[553, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_matmul"]], "fusenodestartwithpooling (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_pooling)": [[554, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_pooling": [[554, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq": [[555, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq"]], "optimizeqdqgraph (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.optimize_qdq)": [[556, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.optimize_qdq": [[556, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.optimize_qdq"]], "quantizegraphbase (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base)": [[557, "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base.QuantizeGraphBase"]], "quantizenodebase (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base)": [[557, "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base.QuantizeNodeBase"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base": [[557, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_bn)": [[558, "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_bn": [[558, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_concatv2)": [[559, "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_concatv2": [[559, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_conv)": [[560, "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_conv": [[560, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_conv"]], "quantizegraphforintel (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_for_intel_cpu)": [[561, "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_for_intel_cpu": [[561, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_for_intel_cpu"]], "fusenodestartwithmatmul (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_matmul)": [[562, "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_matmul": [[562, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_matmul"]], "fusenodestartwithpooling (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_pooling)": [[563, "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_pooling": [[563, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_pooling"]], "quantizegraphhelper (class in neural_compressor.tensorflow.quantization.utils.quantize_graph_common)": [[564, "neural_compressor.tensorflow.quantization.utils.quantize_graph_common.QuantizeGraphHelper"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph_common": [[564, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph_common"]], "biascorrection (class in neural_compressor.tensorflow.quantization.utils.transform_graph.bias_correction)": [[565, "neural_compressor.tensorflow.quantization.utils.transform_graph.bias_correction.BiasCorrection"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.bias_correction": [[565, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.bias_correction"]], "graphtransformbase (class in neural_compressor.tensorflow.quantization.utils.transform_graph.graph_transform_base)": [[566, "neural_compressor.tensorflow.quantization.utils.transform_graph.graph_transform_base.GraphTransformBase"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.graph_transform_base": [[566, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.graph_transform_base"]], "neural_compressor.tensorflow.quantization.utils.transform_graph": [[567, "module-neural_compressor.tensorflow.quantization.utils.transform_graph"]], "insertlogging (class in neural_compressor.tensorflow.quantization.utils.transform_graph.insert_logging)": [[568, "neural_compressor.tensorflow.quantization.utils.transform_graph.insert_logging.InsertLogging"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.insert_logging": [[568, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.insert_logging"]], "rerangequantizedconcat (class in neural_compressor.tensorflow.quantization.utils.transform_graph.rerange_quantized_concat)": [[569, "neural_compressor.tensorflow.quantization.utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.rerange_quantized_concat": [[569, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.rerange_quantized_concat"]], "apply_inlining() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[570, "neural_compressor.tensorflow.quantization.utils.utility.apply_inlining"]], "collate_tf_preds() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[570, "neural_compressor.tensorflow.quantization.utils.utility.collate_tf_preds"]], "construct_function_from_graph_def() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[570, "neural_compressor.tensorflow.quantization.utils.utility.construct_function_from_graph_def"]], "disable_random() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[570, "neural_compressor.tensorflow.quantization.utils.utility.disable_random"]], "fix_ref_type_of_graph_def() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[570, "neural_compressor.tensorflow.quantization.utils.utility.fix_ref_type_of_graph_def"]], "generate_feed_dict() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[570, "neural_compressor.tensorflow.quantization.utils.utility.generate_feed_dict"]], "get_graph_def() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[570, "neural_compressor.tensorflow.quantization.utils.utility.get_graph_def"]], "get_input_output_node_names() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[570, "neural_compressor.tensorflow.quantization.utils.utility.get_input_output_node_names"]], "get_model_input_shape() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[570, "neural_compressor.tensorflow.quantization.utils.utility.get_model_input_shape"]], "get_tensor_by_name() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[570, "neural_compressor.tensorflow.quantization.utils.utility.get_tensor_by_name"]], "get_tensor_val_from_graph_node() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[570, "neural_compressor.tensorflow.quantization.utils.utility.get_tensor_val_from_graph_node"]], "get_weight_from_input_tensor() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[570, "neural_compressor.tensorflow.quantization.utils.utility.get_weight_from_input_tensor"]], "int8_node_name_reverse() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[570, "neural_compressor.tensorflow.quantization.utils.utility.int8_node_name_reverse"]], "is_ckpt_format() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[570, "neural_compressor.tensorflow.quantization.utils.utility.is_ckpt_format"]], "is_saved_model_format() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[570, "neural_compressor.tensorflow.quantization.utils.utility.is_saved_model_format"]], "iterator_sess_run() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[570, "neural_compressor.tensorflow.quantization.utils.utility.iterator_sess_run"]], "neural_compressor.tensorflow.quantization.utils.utility": [[570, "module-neural_compressor.tensorflow.quantization.utils.utility"]], "parse_saved_model() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[570, "neural_compressor.tensorflow.quantization.utils.utility.parse_saved_model"]], "read_graph() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[570, "neural_compressor.tensorflow.quantization.utils.utility.read_graph"]], "reconstruct_saved_model() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[570, "neural_compressor.tensorflow.quantization.utils.utility.reconstruct_saved_model"]], "strip_equivalent_nodes() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[570, "neural_compressor.tensorflow.quantization.utils.utility.strip_equivalent_nodes"]], "strip_unused_nodes() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[570, "neural_compressor.tensorflow.quantization.utils.utility.strip_unused_nodes"]], "tf_diagnosis_helper() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[570, "neural_compressor.tensorflow.quantization.utils.utility.tf_diagnosis_helper"]], "write_graph() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[570, "neural_compressor.tensorflow.quantization.utils.utility.write_graph"]], "neural_compressor.tensorflow.utils.constants": [[571, "module-neural_compressor.tensorflow.utils.constants"]], "basedataloader (class in neural_compressor.tensorflow.utils.data)": [[572, "neural_compressor.tensorflow.utils.data.BaseDataLoader"]], "dummydataset (class in neural_compressor.tensorflow.utils.data)": [[572, "neural_compressor.tensorflow.utils.data.DummyDataset"]], "dummydatasetv2 (class in neural_compressor.tensorflow.utils.data)": [[572, "neural_compressor.tensorflow.utils.data.DummyDatasetV2"]], "neural_compressor.tensorflow.utils.data": [[572, "module-neural_compressor.tensorflow.utils.data"]], "neural_compressor.tensorflow.utils": [[573, "module-neural_compressor.tensorflow.utils"]], "model (class in neural_compressor.tensorflow.utils.model)": [[574, "neural_compressor.tensorflow.utils.model.Model"]], "neural_compressor.tensorflow.utils.model": [[574, "module-neural_compressor.tensorflow.utils.model"]], "basemodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[575, "neural_compressor.tensorflow.utils.model_wrappers.BaseModel"]], "kerasmodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[575, "neural_compressor.tensorflow.utils.model_wrappers.KerasModel"]], "tensorflowbasemodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[575, "neural_compressor.tensorflow.utils.model_wrappers.TensorflowBaseModel"]], "tensorflowcheckpointmodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[575, "neural_compressor.tensorflow.utils.model_wrappers.TensorflowCheckpointModel"]], "tensorflowllmmodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[575, "neural_compressor.tensorflow.utils.model_wrappers.TensorflowLLMModel"]], "tensorflowmodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[575, "neural_compressor.tensorflow.utils.model_wrappers.TensorflowModel"]], "tensorflowqatmodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[575, "neural_compressor.tensorflow.utils.model_wrappers.TensorflowQATModel"]], "tensorflowsavedmodelmodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[575, "neural_compressor.tensorflow.utils.model_wrappers.TensorflowSavedModelModel"]], "checkpoint_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[575, "neural_compressor.tensorflow.utils.model_wrappers.checkpoint_session"]], "estimator_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[575, "neural_compressor.tensorflow.utils.model_wrappers.estimator_session"]], "frozen_pb_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[575, "neural_compressor.tensorflow.utils.model_wrappers.frozen_pb_session"]], "get_model_type() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[575, "neural_compressor.tensorflow.utils.model_wrappers.get_model_type"]], "graph_def_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[575, "neural_compressor.tensorflow.utils.model_wrappers.graph_def_session"]], "graph_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[575, "neural_compressor.tensorflow.utils.model_wrappers.graph_session"]], "keras_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[575, "neural_compressor.tensorflow.utils.model_wrappers.keras_session"]], "load_saved_model() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[575, "neural_compressor.tensorflow.utils.model_wrappers.load_saved_model"]], "neural_compressor.tensorflow.utils.model_wrappers": [[575, "module-neural_compressor.tensorflow.utils.model_wrappers"]], "saved_model_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[575, "neural_compressor.tensorflow.utils.model_wrappers.saved_model_session"]], "slim_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[575, "neural_compressor.tensorflow.utils.model_wrappers.slim_session"]], "validate_and_inference_input_output() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[575, "neural_compressor.tensorflow.utils.model_wrappers.validate_and_inference_input_output"]], "validate_graph_node() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[575, "neural_compressor.tensorflow.utils.model_wrappers.validate_graph_node"]], "tfslimnetsfactory (class in neural_compressor.tensorflow.utils.nets_factory)": [[576, "neural_compressor.tensorflow.utils.nets_factory.TFSlimNetsFactory"]], "neural_compressor.tensorflow.utils.nets_factory": [[576, "module-neural_compressor.tensorflow.utils.nets_factory"]], "captureoutputtofile (class in neural_compressor.tensorflow.utils.utility)": [[577, "neural_compressor.tensorflow.utils.utility.CaptureOutputToFile"]], "cpuinfo (class in neural_compressor.tensorflow.utils.utility)": [[577, "neural_compressor.tensorflow.utils.utility.CpuInfo"]], "dequantize() (in module neural_compressor.tensorflow.utils.utility)": [[577, "neural_compressor.tensorflow.utils.utility.Dequantize"]], "lazyimport (class in neural_compressor.tensorflow.utils.utility)": [[577, "neural_compressor.tensorflow.utils.utility.LazyImport"]], "statistics (class in neural_compressor.tensorflow.utils.utility)": [[577, "neural_compressor.tensorflow.utils.utility.Statistics"]], "combine_histogram() (in module neural_compressor.tensorflow.utils.utility)": [[577, "neural_compressor.tensorflow.utils.utility.combine_histogram"]], "deep_get() (in module neural_compressor.tensorflow.utils.utility)": [[577, "neural_compressor.tensorflow.utils.utility.deep_get"]], "dequantize_weight() (in module neural_compressor.tensorflow.utils.utility)": [[577, "neural_compressor.tensorflow.utils.utility.dequantize_weight"]], "disable_random() (in module neural_compressor.tensorflow.utils.utility)": [[577, "neural_compressor.tensorflow.utils.utility.disable_random"]], "dump_data_to_local() (in module neural_compressor.tensorflow.utils.utility)": [[577, "neural_compressor.tensorflow.utils.utility.dump_data_to_local"]], "dump_elapsed_time() (in module neural_compressor.tensorflow.utils.utility)": [[577, "neural_compressor.tensorflow.utils.utility.dump_elapsed_time"]], "get_all_fp32_data() (in module neural_compressor.tensorflow.utils.utility)": [[577, "neural_compressor.tensorflow.utils.utility.get_all_fp32_data"]], "get_tensor_histogram() (in module neural_compressor.tensorflow.utils.utility)": [[577, "neural_compressor.tensorflow.utils.utility.get_tensor_histogram"]], "itex_installed() (in module neural_compressor.tensorflow.utils.utility)": [[577, "neural_compressor.tensorflow.utils.utility.itex_installed"]], "load_data_from_pkl() (in module neural_compressor.tensorflow.utils.utility)": [[577, "neural_compressor.tensorflow.utils.utility.load_data_from_pkl"]], "neural_compressor.tensorflow.utils.utility": [[577, "module-neural_compressor.tensorflow.utils.utility"]], "register_algo() (in module neural_compressor.tensorflow.utils.utility)": [[577, "neural_compressor.tensorflow.utils.utility.register_algo"]], "singleton() (in module neural_compressor.tensorflow.utils.utility)": [[577, "neural_compressor.tensorflow.utils.utility.singleton"]], "version1_eq_version2() (in module neural_compressor.tensorflow.utils.utility)": [[577, "neural_compressor.tensorflow.utils.utility.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.tensorflow.utils.utility)": [[577, "neural_compressor.tensorflow.utils.utility.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.tensorflow.utils.utility)": [[577, "neural_compressor.tensorflow.utils.utility.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.tensorflow.utils.utility)": [[577, "neural_compressor.tensorflow.utils.utility.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.tensorflow.utils.utility)": [[577, "neural_compressor.tensorflow.utils.utility.version1_lte_version2"]], "neural_compressor.torch.algorithms.habana_fp8.fp8_quant": [[578, "module-neural_compressor.torch.algorithms.habana_fp8.fp8_quant"]], "neural_compressor.torch.algorithms.habana_fp8": [[579, "module-neural_compressor.torch.algorithms.habana_fp8"]], "neural_compressor.torch.algorithms.habana_fp8.modules": [[580, "module-neural_compressor.torch.algorithms.habana_fp8.modules"]], "neural_compressor.torch.algorithms.habana_fp8.observer": [[581, "module-neural_compressor.torch.algorithms.habana_fp8.observer"]], "neural_compressor.torch.algorithms.habana_fp8.save_load": [[582, "module-neural_compressor.torch.algorithms.habana_fp8.save_load"]], "neural_compressor.torch.algorithms.habana_fp8.scale": [[583, "module-neural_compressor.torch.algorithms.habana_fp8.scale"]], "neural_compressor.torch.algorithms.habana_fp8.tensor": [[584, "module-neural_compressor.torch.algorithms.habana_fp8.tensor"]], "neural_compressor.torch.algorithms": [[585, "module-neural_compressor.torch.algorithms"]], "neural_compressor.torch.algorithms.layer_wise": [[586, "module-neural_compressor.torch.algorithms.layer_wise"]], "load() (in module neural_compressor.torch.algorithms.layer_wise.load)": [[587, "neural_compressor.torch.algorithms.layer_wise.load.load"]], "neural_compressor.torch.algorithms.layer_wise.load": [[587, "module-neural_compressor.torch.algorithms.layer_wise.load"]], "neural_compressor.torch.algorithms.layer_wise.modified_pickle": [[588, "module-neural_compressor.torch.algorithms.layer_wise.modified_pickle"]], "dowload_hf_model() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[589, "neural_compressor.torch.algorithms.layer_wise.utils.dowload_hf_model"]], "get_children() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[589, "neural_compressor.torch.algorithms.layer_wise.utils.get_children"]], "get_module() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[589, "neural_compressor.torch.algorithms.layer_wise.utils.get_module"]], "get_named_children() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[589, "neural_compressor.torch.algorithms.layer_wise.utils.get_named_children"]], "get_super_module_by_name() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[589, "neural_compressor.torch.algorithms.layer_wise.utils.get_super_module_by_name"]], "load_empty_model() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[589, "neural_compressor.torch.algorithms.layer_wise.utils.load_empty_model"]], "load_layer_wise_quantized_model() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[589, "neural_compressor.torch.algorithms.layer_wise.utils.load_layer_wise_quantized_model"]], "load_tensor() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[589, "neural_compressor.torch.algorithms.layer_wise.utils.load_tensor"]], "load_tensor_from_shard() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[589, "neural_compressor.torch.algorithms.layer_wise.utils.load_tensor_from_shard"]], "neural_compressor.torch.algorithms.layer_wise.utils": [[589, "module-neural_compressor.torch.algorithms.layer_wise.utils"]], "update_module() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[589, "neural_compressor.torch.algorithms.layer_wise.utils.update_module"]], "neural_compressor.torch.algorithms.smooth_quant": [[590, "module-neural_compressor.torch.algorithms.smooth_quant"]], "neural_compressor.torch.algorithms.smooth_quant.save_load": [[591, "module-neural_compressor.torch.algorithms.smooth_quant.save_load"]], "recover_model_from_json() (in module neural_compressor.torch.algorithms.smooth_quant.save_load)": [[591, "neural_compressor.torch.algorithms.smooth_quant.save_load.recover_model_from_json"]], "neural_compressor.torch.algorithms.smooth_quant.smooth_quant": [[592, "module-neural_compressor.torch.algorithms.smooth_quant.smooth_quant"]], "smooth_quantize() (in module neural_compressor.torch.algorithms.smooth_quant.smooth_quant)": [[592, "neural_compressor.torch.algorithms.smooth_quant.smooth_quant.smooth_quantize"]], "cpuinfo (class in neural_compressor.torch.algorithms.smooth_quant.utility)": [[593, "neural_compressor.torch.algorithms.smooth_quant.utility.CpuInfo"]], "torchsmoothquant (class in neural_compressor.torch.algorithms.smooth_quant.utility)": [[593, "neural_compressor.torch.algorithms.smooth_quant.utility.TorchSmoothQuant"]], "check_cfg_and_qconfig() (in module neural_compressor.torch.algorithms.smooth_quant.utility)": [[593, "neural_compressor.torch.algorithms.smooth_quant.utility.check_cfg_and_qconfig"]], "generate_activation_observer() (in module neural_compressor.torch.algorithms.smooth_quant.utility)": [[593, "neural_compressor.torch.algorithms.smooth_quant.utility.generate_activation_observer"]], "get_module() (in module neural_compressor.torch.algorithms.smooth_quant.utility)": [[593, "neural_compressor.torch.algorithms.smooth_quant.utility.get_module"]], "get_quantizable_ops_recursively() (in module neural_compressor.torch.algorithms.smooth_quant.utility)": [[593, "neural_compressor.torch.algorithms.smooth_quant.utility.get_quantizable_ops_recursively"]], "neural_compressor.torch.algorithms.smooth_quant.utility": [[593, "module-neural_compressor.torch.algorithms.smooth_quant.utility"]], "register_autotune() (in module neural_compressor.torch.algorithms.smooth_quant.utility)": [[593, "neural_compressor.torch.algorithms.smooth_quant.utility.register_autotune"]], "reshape_in_channel_to_last() (in module neural_compressor.torch.algorithms.smooth_quant.utility)": [[593, "neural_compressor.torch.algorithms.smooth_quant.utility.reshape_in_channel_to_last"]], "reshape_scale_as_input() (in module neural_compressor.torch.algorithms.smooth_quant.utility)": [[593, "neural_compressor.torch.algorithms.smooth_quant.utility.reshape_scale_as_input"]], "reshape_scale_as_weight() (in module neural_compressor.torch.algorithms.smooth_quant.utility)": [[593, "neural_compressor.torch.algorithms.smooth_quant.utility.reshape_scale_as_weight"]], "set_module() (in module neural_compressor.torch.algorithms.smooth_quant.utility)": [[593, "neural_compressor.torch.algorithms.smooth_quant.utility.set_module"]], "update_sq_scale() (in module neural_compressor.torch.algorithms.smooth_quant.utility)": [[593, "neural_compressor.torch.algorithms.smooth_quant.utility.update_sq_scale"]], "neural_compressor.torch.algorithms.static_quant": [[594, "module-neural_compressor.torch.algorithms.static_quant"]], "neural_compressor.torch.algorithms.static_quant.save_load": [[595, "module-neural_compressor.torch.algorithms.static_quant.save_load"]], "neural_compressor.torch.algorithms.static_quant.static_quant": [[596, "module-neural_compressor.torch.algorithms.static_quant.static_quant"]], "static_quantize() (in module neural_compressor.torch.algorithms.static_quant.static_quant)": [[596, "neural_compressor.torch.algorithms.static_quant.static_quant.static_quantize"]], "statistics (class in neural_compressor.torch.algorithms.static_quant.utility)": [[597, "neural_compressor.torch.algorithms.static_quant.utility.Statistics"]], "transformerbasedmodelblockpatterndetector (class in neural_compressor.torch.algorithms.static_quant.utility)": [[597, "neural_compressor.torch.algorithms.static_quant.utility.TransformerBasedModelBlockPatternDetector"]], "dump_model_op_stats() (in module neural_compressor.torch.algorithms.static_quant.utility)": [[597, "neural_compressor.torch.algorithms.static_quant.utility.dump_model_op_stats"]], "get_depth() (in module neural_compressor.torch.algorithms.static_quant.utility)": [[597, "neural_compressor.torch.algorithms.static_quant.utility.get_depth"]], "get_dict_at_depth() (in module neural_compressor.torch.algorithms.static_quant.utility)": [[597, "neural_compressor.torch.algorithms.static_quant.utility.get_dict_at_depth"]], "get_element_under_depth() (in module neural_compressor.torch.algorithms.static_quant.utility)": [[597, "neural_compressor.torch.algorithms.static_quant.utility.get_element_under_depth"]], "get_quantizable_ops_from_cfgs() (in module neural_compressor.torch.algorithms.static_quant.utility)": [[597, "neural_compressor.torch.algorithms.static_quant.utility.get_quantizable_ops_from_cfgs"]], "get_quantizable_ops_recursively() (in module neural_compressor.torch.algorithms.static_quant.utility)": [[597, "neural_compressor.torch.algorithms.static_quant.utility.get_quantizable_ops_recursively"]], "neural_compressor.torch.algorithms.static_quant.utility": [[597, "module-neural_compressor.torch.algorithms.static_quant.utility"]], "paser_cfgs() (in module neural_compressor.torch.algorithms.static_quant.utility)": [[597, "neural_compressor.torch.algorithms.static_quant.utility.paser_cfgs"]], "simple_inference() (in module neural_compressor.torch.algorithms.static_quant.utility)": [[597, "neural_compressor.torch.algorithms.static_quant.utility.simple_inference"]], "autoround_quantize() (in module neural_compressor.torch.algorithms.weight_only.autoround)": [[598, "neural_compressor.torch.algorithms.weight_only.autoround.autoround_quantize"]], "get_autoround_default_run_fn() (in module neural_compressor.torch.algorithms.weight_only.autoround)": [[598, "neural_compressor.torch.algorithms.weight_only.autoround.get_autoround_default_run_fn"]], "neural_compressor.torch.algorithms.weight_only.autoround": [[598, "module-neural_compressor.torch.algorithms.weight_only.autoround"]], "awq_quantize() (in module neural_compressor.torch.algorithms.weight_only.awq)": [[599, "neural_compressor.torch.algorithms.weight_only.awq.awq_quantize"]], "neural_compressor.torch.algorithms.weight_only.awq": [[599, "module-neural_compressor.torch.algorithms.weight_only.awq"]], "gptq (class in neural_compressor.torch.algorithms.weight_only.gptq)": [[600, "neural_compressor.torch.algorithms.weight_only.gptq.GPTQ"]], "gptquantizer (class in neural_compressor.torch.algorithms.weight_only.gptq)": [[600, "neural_compressor.torch.algorithms.weight_only.gptq.GPTQuantizer"]], "find_layers() (in module neural_compressor.torch.algorithms.weight_only.gptq)": [[600, "neural_compressor.torch.algorithms.weight_only.gptq.find_layers"]], "find_layers_name() (in module neural_compressor.torch.algorithms.weight_only.gptq)": [[600, "neural_compressor.torch.algorithms.weight_only.gptq.find_layers_name"]], "gptq_quantize() (in module neural_compressor.torch.algorithms.weight_only.gptq)": [[600, "neural_compressor.torch.algorithms.weight_only.gptq.gptq_quantize"]], "is_leaf() (in module neural_compressor.torch.algorithms.weight_only.gptq)": [[600, "neural_compressor.torch.algorithms.weight_only.gptq.is_leaf"]], "log_quantizable_layers_per_transformer() (in module neural_compressor.torch.algorithms.weight_only.gptq)": [[600, "neural_compressor.torch.algorithms.weight_only.gptq.log_quantizable_layers_per_transformer"]], "neural_compressor.torch.algorithms.weight_only.gptq": [[600, "module-neural_compressor.torch.algorithms.weight_only.gptq"]], "quantize() (in module neural_compressor.torch.algorithms.weight_only.gptq)": [[600, "neural_compressor.torch.algorithms.weight_only.gptq.quantize"]], "trace_gptq_target_blocks() (in module neural_compressor.torch.algorithms.weight_only.gptq)": [[600, "neural_compressor.torch.algorithms.weight_only.gptq.trace_gptq_target_blocks"]], "neural_compressor.torch.algorithms.weight_only.hqq.bitpack": [[601, "module-neural_compressor.torch.algorithms.weight_only.hqq.bitpack"]], "hqqmoduleconfig (class in neural_compressor.torch.algorithms.weight_only.hqq.config)": [[602, "neural_compressor.torch.algorithms.weight_only.hqq.config.HQQModuleConfig"]], "neural_compressor.torch.algorithms.weight_only.hqq.config": [[602, "module-neural_compressor.torch.algorithms.weight_only.hqq.config"]], "neural_compressor.torch.algorithms.weight_only.hqq.core": [[603, "module-neural_compressor.torch.algorithms.weight_only.hqq.core"]], "neural_compressor.torch.algorithms.weight_only.hqq": [[604, "module-neural_compressor.torch.algorithms.weight_only.hqq"]], "neural_compressor.torch.algorithms.weight_only.hqq.optimizer": [[605, "module-neural_compressor.torch.algorithms.weight_only.hqq.optimizer"]], "neural_compressor.torch.algorithms.weight_only.hqq.qtensor": [[606, "module-neural_compressor.torch.algorithms.weight_only.hqq.qtensor"]], "neural_compressor.torch.algorithms.weight_only.hqq.quant_api": [[607, "module-neural_compressor.torch.algorithms.weight_only.hqq.quant_api"]], "neural_compressor.torch.algorithms.weight_only.hqq.quantizer": [[608, "module-neural_compressor.torch.algorithms.weight_only.hqq.quantizer"]], "dump_elapsed_time() (in module neural_compressor.torch.algorithms.weight_only.hqq.utility)": [[609, "neural_compressor.torch.algorithms.weight_only.hqq.utility.dump_elapsed_time"]], "neural_compressor.torch.algorithms.weight_only.hqq.utility": [[609, "module-neural_compressor.torch.algorithms.weight_only.hqq.utility"]], "neural_compressor.torch.algorithms.weight_only": [[610, "module-neural_compressor.torch.algorithms.weight_only"]], "fakeaffinetensorquantfunction (class in neural_compressor.torch.algorithms.weight_only.modules)": [[611, "neural_compressor.torch.algorithms.weight_only.modules.FakeAffineTensorQuantFunction"]], "mullinear (class in neural_compressor.torch.algorithms.weight_only.modules)": [[611, "neural_compressor.torch.algorithms.weight_only.modules.MulLinear"]], "teqlinearfakequant (class in neural_compressor.torch.algorithms.weight_only.modules)": [[611, "neural_compressor.torch.algorithms.weight_only.modules.TEQLinearFakeQuant"]], "neural_compressor.torch.algorithms.weight_only.modules": [[611, "module-neural_compressor.torch.algorithms.weight_only.modules"]], "neural_compressor.torch.algorithms.weight_only.rtn": [[612, "module-neural_compressor.torch.algorithms.weight_only.rtn"]], "rtn_quantize() (in module neural_compressor.torch.algorithms.weight_only.rtn)": [[612, "neural_compressor.torch.algorithms.weight_only.rtn.rtn_quantize"]], "tequantizer (class in neural_compressor.torch.algorithms.weight_only.teq)": [[613, "neural_compressor.torch.algorithms.weight_only.teq.TEQuantizer"]], "neural_compressor.torch.algorithms.weight_only.teq": [[613, "module-neural_compressor.torch.algorithms.weight_only.teq"]], "teq_quantize() (in module neural_compressor.torch.algorithms.weight_only.teq)": [[613, "neural_compressor.torch.algorithms.weight_only.teq.teq_quantize"]], "calibration() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[614, "neural_compressor.torch.algorithms.weight_only.utility.calibration"]], "fetch_module() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[614, "neural_compressor.torch.algorithms.weight_only.utility.fetch_module"]], "get_absorb_layers() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[614, "neural_compressor.torch.algorithms.weight_only.utility.get_absorb_layers"]], "get_block_prefix() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[614, "neural_compressor.torch.algorithms.weight_only.utility.get_block_prefix"]], "get_example_input() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[614, "neural_compressor.torch.algorithms.weight_only.utility.get_example_input"]], "get_hidden_states() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[614, "neural_compressor.torch.algorithms.weight_only.utility.get_hidden_states"]], "get_module() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[614, "neural_compressor.torch.algorithms.weight_only.utility.get_module"]], "get_module_input_output() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[614, "neural_compressor.torch.algorithms.weight_only.utility.get_module_input_output"]], "neural_compressor.torch.algorithms.weight_only.utility": [[614, "module-neural_compressor.torch.algorithms.weight_only.utility"]], "qdq_weight_actor() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[614, "neural_compressor.torch.algorithms.weight_only.utility.qdq_weight_actor"]], "qdq_weight_asym() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[614, "neural_compressor.torch.algorithms.weight_only.utility.qdq_weight_asym"]], "qdq_weight_sym() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[614, "neural_compressor.torch.algorithms.weight_only.utility.qdq_weight_sym"]], "quant_tensor() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[614, "neural_compressor.torch.algorithms.weight_only.utility.quant_tensor"]], "quant_weight_w_scale() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[614, "neural_compressor.torch.algorithms.weight_only.utility.quant_weight_w_scale"]], "quantize_4bit() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[614, "neural_compressor.torch.algorithms.weight_only.utility.quantize_4bit"]], "search_clip() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[614, "neural_compressor.torch.algorithms.weight_only.utility.search_clip"]], "set_module() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[614, "neural_compressor.torch.algorithms.weight_only.utility.set_module"]], "autocast (class in neural_compressor.torch.amp.autocast)": [[615, "neural_compressor.torch.amp.autocast.autocast"]], "neural_compressor.torch.amp.autocast": [[615, "module-neural_compressor.torch.amp.autocast"]], "neural_compressor.torch.amp.fp8.functions": [[616, "module-neural_compressor.torch.amp.fp8.functions"]], "neural_compressor.torch.amp.fp8": [[617, "module-neural_compressor.torch.amp.fp8"]], "neural_compressor.torch.amp": [[618, "module-neural_compressor.torch.amp"]], "neural_compressor.torch": [[619, "module-neural_compressor.torch"]], "neural_compressor.torch.quantization.algorithm_entry": [[620, "module-neural_compressor.torch.quantization.algorithm_entry"]], "rtn_entry() (in module neural_compressor.torch.quantization.algorithm_entry)": [[620, "neural_compressor.torch.quantization.algorithm_entry.rtn_entry"]], "autotune() (in module neural_compressor.torch.quantization.autotune)": [[621, "neural_compressor.torch.quantization.autotune.autotune"]], "neural_compressor.torch.quantization.autotune": [[621, "module-neural_compressor.torch.quantization.autotune"]], "gptqconfig (class in neural_compressor.torch.quantization.config)": [[622, "neural_compressor.torch.quantization.config.GPTQConfig"]], "rtnconfig (class in neural_compressor.torch.quantization.config)": [[622, "neural_compressor.torch.quantization.config.RTNConfig"]], "get_default_gptq_config() (in module neural_compressor.torch.quantization.config)": [[622, "neural_compressor.torch.quantization.config.get_default_gptq_config"]], "get_default_hqq_config() (in module neural_compressor.torch.quantization.config)": [[622, "neural_compressor.torch.quantization.config.get_default_hqq_config"]], "get_default_rtn_config() (in module neural_compressor.torch.quantization.config)": [[622, "neural_compressor.torch.quantization.config.get_default_rtn_config"]], "neural_compressor.torch.quantization.config": [[622, "module-neural_compressor.torch.quantization.config"]], "neural_compressor.torch.quantization": [[623, "module-neural_compressor.torch.quantization"]], "neural_compressor.torch.quantization.load_entry": [[624, "module-neural_compressor.torch.quantization.load_entry"]], "neural_compressor.torch.quantization.quantize": [[625, "module-neural_compressor.torch.quantization.quantize"]], "quantize() (in module neural_compressor.torch.quantization.quantize)": [[625, "neural_compressor.torch.quantization.quantize.quantize"]], "auto_accelerator (class in neural_compressor.torch.utils.auto_accelerator)": [[626, "neural_compressor.torch.utils.auto_accelerator.Auto_Accelerator"]], "cpu_accelerator (class in neural_compressor.torch.utils.auto_accelerator)": [[626, "neural_compressor.torch.utils.auto_accelerator.CPU_Accelerator"]], "cuda_accelerator (class in neural_compressor.torch.utils.auto_accelerator)": [[626, "neural_compressor.torch.utils.auto_accelerator.CUDA_Accelerator"]], "hpu_accelerator (class in neural_compressor.torch.utils.auto_accelerator)": [[626, "neural_compressor.torch.utils.auto_accelerator.HPU_Accelerator"]], "neural_compressor.torch.utils.auto_accelerator": [[626, "module-neural_compressor.torch.utils.auto_accelerator"]], "register_accelerator() (in module neural_compressor.torch.utils.auto_accelerator)": [[626, "neural_compressor.torch.utils.auto_accelerator.register_accelerator"]], "neural_compressor.torch.utils.constants": [[627, "module-neural_compressor.torch.utils.constants"]], "neural_compressor.torch.utils.environ": [[628, "module-neural_compressor.torch.utils.environ"]], "neural_compressor.torch.utils": [[629, "module-neural_compressor.torch.utils"]], "fetch_module() (in module neural_compressor.torch.utils.utility)": [[630, "neural_compressor.torch.utils.utility.fetch_module"]], "neural_compressor.torch.utils.utility": [[630, "module-neural_compressor.torch.utils.utility"]], "register_algo() (in module neural_compressor.torch.utils.utility)": [[630, "neural_compressor.torch.utils.utility.register_algo"]], "set_module() (in module neural_compressor.torch.utils.utility)": [[630, "neural_compressor.torch.utils.utility.set_module"]], "callbacks (class in neural_compressor.training)": [[631, "neural_compressor.training.CallBacks"]], "compressionmanager (class in neural_compressor.training)": [[631, "neural_compressor.training.CompressionManager"]], "fit() (in module neural_compressor.training)": [[631, "neural_compressor.training.fit"]], "neural_compressor.training": [[631, "module-neural_compressor.training"]], "prepare_compression() (in module neural_compressor.training)": [[631, "neural_compressor.training.prepare_compression"]], "layerhistogramcollector (class in neural_compressor.utils.collect_layer_histogram)": [[632, "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector"]], "neural_compressor.utils.collect_layer_histogram": [[632, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[633, "module-neural_compressor.utils.constant"]], "create_dataloader() (in module neural_compressor.utils.create_obj_from_config)": [[634, "neural_compressor.utils.create_obj_from_config.create_dataloader"]], "create_dataset() (in module neural_compressor.utils.create_obj_from_config)": [[634, "neural_compressor.utils.create_obj_from_config.create_dataset"]], "create_eval_func() (in module neural_compressor.utils.create_obj_from_config)": [[634, "neural_compressor.utils.create_obj_from_config.create_eval_func"]], "create_train_func() (in module neural_compressor.utils.create_obj_from_config)": [[634, "neural_compressor.utils.create_obj_from_config.create_train_func"]], "get_algorithm() (in module neural_compressor.utils.create_obj_from_config)": [[634, "neural_compressor.utils.create_obj_from_config.get_algorithm"]], "get_func_from_config() (in module neural_compressor.utils.create_obj_from_config)": [[634, "neural_compressor.utils.create_obj_from_config.get_func_from_config"]], "get_metrics() (in module neural_compressor.utils.create_obj_from_config)": [[634, "neural_compressor.utils.create_obj_from_config.get_metrics"]], "get_postprocess() (in module neural_compressor.utils.create_obj_from_config)": [[634, "neural_compressor.utils.create_obj_from_config.get_postprocess"]], "get_preprocess() (in module neural_compressor.utils.create_obj_from_config)": [[634, "neural_compressor.utils.create_obj_from_config.get_preprocess"]], "neural_compressor.utils.create_obj_from_config": [[634, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[635, "module-neural_compressor.utils"]], "kl_divergence (class in neural_compressor.utils.kl_divergence)": [[636, "neural_compressor.utils.kl_divergence.KL_Divergence"]], "neural_compressor.utils.kl_divergence": [[636, "module-neural_compressor.utils.kl_divergence"]], "optimizedmodel (class in neural_compressor.utils.load_huggingface)": [[637, "neural_compressor.utils.load_huggingface.OptimizedModel"]], "export_compressed_model() (in module neural_compressor.utils.load_huggingface)": [[637, "neural_compressor.utils.load_huggingface.export_compressed_model"]], "neural_compressor.utils.load_huggingface": [[637, "module-neural_compressor.utils.load_huggingface"]], "save_for_huggingface_upstream() (in module neural_compressor.utils.load_huggingface)": [[637, "neural_compressor.utils.load_huggingface.save_for_huggingface_upstream"]], "logger (class in neural_compressor.utils.logger)": [[638, "neural_compressor.utils.logger.Logger"]], "debug() (in module neural_compressor.utils.logger)": [[638, "neural_compressor.utils.logger.debug"]], "error() (in module neural_compressor.utils.logger)": [[638, "neural_compressor.utils.logger.error"]], "fatal() (in module neural_compressor.utils.logger)": [[638, "neural_compressor.utils.logger.fatal"]], "info() (in module neural_compressor.utils.logger)": [[638, "neural_compressor.utils.logger.info"]], "log() (in module neural_compressor.utils.logger)": [[638, "neural_compressor.utils.logger.log"]], "neural_compressor.utils.logger": [[638, "module-neural_compressor.utils.logger"]], "warn() (in module neural_compressor.utils.logger)": [[638, "neural_compressor.utils.logger.warn"]], "warning() (in module neural_compressor.utils.logger)": [[638, "neural_compressor.utils.logger.warning"]], "get_model_path() (in module neural_compressor.utils.neural_insights_utils)": [[639, "neural_compressor.utils.neural_insights_utils.get_model_path"]], "neural_compressor.utils.neural_insights_utils": [[639, "module-neural_compressor.utils.neural_insights_utils"]], "register_neural_insights_workload() (in module neural_compressor.utils.neural_insights_utils)": [[639, "neural_compressor.utils.neural_insights_utils.register_neural_insights_workload"]], "update_neural_insights_workload() (in module neural_compressor.utils.neural_insights_utils)": [[639, "neural_compressor.utils.neural_insights_utils.update_neural_insights_workload"]], "update_neural_insights_workload_accuracy_data() (in module neural_compressor.utils.neural_insights_utils)": [[639, "neural_compressor.utils.neural_insights_utils.update_neural_insights_workload_accuracy_data"]], "neural_compressor.utils.options": [[640, "module-neural_compressor.utils.options"]], "onnxrt (class in neural_compressor.utils.options)": [[640, "neural_compressor.utils.options.onnxrt"]], "is_int8_model() (in module neural_compressor.utils.pytorch)": [[641, "neural_compressor.utils.pytorch.is_int8_model"]], "load() (in module neural_compressor.utils.pytorch)": [[641, "neural_compressor.utils.pytorch.load"]], "load_weight_only() (in module neural_compressor.utils.pytorch)": [[641, "neural_compressor.utils.pytorch.load_weight_only"]], "neural_compressor.utils.pytorch": [[641, "module-neural_compressor.utils.pytorch"]], "recover_model_from_json() (in module neural_compressor.utils.pytorch)": [[641, "neural_compressor.utils.pytorch.recover_model_from_json"]], "captureoutputtofile (class in neural_compressor.utils.utility)": [[642, "neural_compressor.utils.utility.CaptureOutputToFile"]], "cpuinfo (class in neural_compressor.utils.utility)": [[642, "neural_compressor.utils.utility.CpuInfo"]], "dequantize() (in module neural_compressor.utils.utility)": [[642, "neural_compressor.utils.utility.Dequantize"]], "dotdict (class in neural_compressor.utils.utility)": [[642, "neural_compressor.utils.utility.DotDict"]], "global_state (class in neural_compressor.utils.utility)": [[642, "neural_compressor.utils.utility.GLOBAL_STATE"]], "lazyimport (class in neural_compressor.utils.utility)": [[642, "neural_compressor.utils.utility.LazyImport"]], "mode (class in neural_compressor.utils.utility)": [[642, "neural_compressor.utils.utility.MODE"]], "opentry (class in neural_compressor.utils.utility)": [[642, "neural_compressor.utils.utility.OpEntry"]], "statistics (class in neural_compressor.utils.utility)": [[642, "neural_compressor.utils.utility.Statistics"]], "alias_param() (in module neural_compressor.utils.utility)": [[642, "neural_compressor.utils.utility.alias_param"]], "calculate_mse() (in module neural_compressor.utils.utility)": [[642, "neural_compressor.utils.utility.calculate_mse"]], "check_key_exist() (in module neural_compressor.utils.utility)": [[642, "neural_compressor.utils.utility.check_key_exist"]], "combine_histogram() (in module neural_compressor.utils.utility)": [[642, "neural_compressor.utils.utility.combine_histogram"]], "compare_objects() (in module neural_compressor.utils.utility)": [[642, "neural_compressor.utils.utility.compare_objects"]], "compute_sparsity() (in module neural_compressor.utils.utility)": [[642, "neural_compressor.utils.utility.compute_sparsity"]], "dequantize_weight() (in module neural_compressor.utils.utility)": [[642, "neural_compressor.utils.utility.dequantize_weight"]], "dump_class_attrs() (in module neural_compressor.utils.utility)": [[642, "neural_compressor.utils.utility.dump_class_attrs"]], "dump_data_to_local() (in module neural_compressor.utils.utility)": [[642, "neural_compressor.utils.utility.dump_data_to_local"]], "dump_elapsed_time() (in module neural_compressor.utils.utility)": [[642, "neural_compressor.utils.utility.dump_elapsed_time"]], "dump_table() (in module neural_compressor.utils.utility)": [[642, "neural_compressor.utils.utility.dump_table"]], "dump_table_to_csv() (in module neural_compressor.utils.utility)": [[642, "neural_compressor.utils.utility.dump_table_to_csv"]], "equal_dicts() (in module neural_compressor.utils.utility)": [[642, "neural_compressor.utils.utility.equal_dicts"]], "fault_tolerant_file() (in module neural_compressor.utils.utility)": [[642, "neural_compressor.utils.utility.fault_tolerant_file"]], "get_all_fp32_data() (in module neural_compressor.utils.utility)": [[642, "neural_compressor.utils.utility.get_all_fp32_data"]], "get_number_of_sockets() (in module neural_compressor.utils.utility)": [[642, "neural_compressor.utils.utility.get_number_of_sockets"]], "get_op_list() (in module neural_compressor.utils.utility)": [[642, "neural_compressor.utils.utility.get_op_list"]], "get_size() (in module neural_compressor.utils.utility)": [[642, "neural_compressor.utils.utility.get_size"]], "get_tensor_histogram() (in module neural_compressor.utils.utility)": [[642, "neural_compressor.utils.utility.get_tensor_histogram"]], "get_tensors_info() (in module neural_compressor.utils.utility)": [[642, "neural_compressor.utils.utility.get_tensors_info"]], "get_tuning_history() (in module neural_compressor.utils.utility)": [[642, "neural_compressor.utils.utility.get_tuning_history"]], "get_weights_details() (in module neural_compressor.utils.utility)": [[642, "neural_compressor.utils.utility.get_weights_details"]], "load_data_from_pkl() (in module neural_compressor.utils.utility)": [[642, "neural_compressor.utils.utility.load_data_from_pkl"]], "mse_metric_gap() (in module neural_compressor.utils.utility)": [[642, "neural_compressor.utils.utility.mse_metric_gap"]], "neural_compressor.utils.utility": [[642, "module-neural_compressor.utils.utility"]], "print_op_list() (in module neural_compressor.utils.utility)": [[642, "neural_compressor.utils.utility.print_op_list"]], "print_table() (in module neural_compressor.utils.utility)": [[642, "neural_compressor.utils.utility.print_table"]], "recover() (in module neural_compressor.utils.utility)": [[642, "neural_compressor.utils.utility.recover"]], "set_random_seed() (in module neural_compressor.utils.utility)": [[642, "neural_compressor.utils.utility.set_random_seed"]], "set_resume_from() (in module neural_compressor.utils.utility)": [[642, "neural_compressor.utils.utility.set_resume_from"]], "set_tensorboard() (in module neural_compressor.utils.utility)": [[642, "neural_compressor.utils.utility.set_tensorboard"]], "set_workspace() (in module neural_compressor.utils.utility)": [[642, "neural_compressor.utils.utility.set_workspace"]], "show_memory_info() (in module neural_compressor.utils.utility)": [[642, "neural_compressor.utils.utility.show_memory_info"]], "singleton() (in module neural_compressor.utils.utility)": [[642, "neural_compressor.utils.utility.singleton"]], "str2array() (in module neural_compressor.utils.utility)": [[642, "neural_compressor.utils.utility.str2array"]], "time_limit() (in module neural_compressor.utils.utility)": [[642, "neural_compressor.utils.utility.time_limit"]], "version1_eq_version2() (in module neural_compressor.utils.utility)": [[642, "neural_compressor.utils.utility.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.utils.utility)": [[642, "neural_compressor.utils.utility.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.utils.utility)": [[642, "neural_compressor.utils.utility.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.utils.utility)": [[642, "neural_compressor.utils.utility.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.utils.utility)": [[642, "neural_compressor.utils.utility.version1_lte_version2"]], "weightsdetails (class in neural_compressor.utils.weights_details)": [[643, "neural_compressor.utils.weights_details.WeightsDetails"]], "weightsstatistics (class in neural_compressor.utils.weights_details)": [[643, "neural_compressor.utils.weights_details.WeightsStatistics"]], "neural_compressor.utils.weights_details": [[643, "module-neural_compressor.utils.weights_details"]], "neural_compressor.version": [[644, "module-neural_compressor.version"]]}})