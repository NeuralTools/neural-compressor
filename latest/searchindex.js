Search.setIndex({"docnames": ["autoapi/block_mask/index", "autoapi/neural_compressor/adaptor/adaptor/index", "autoapi/neural_compressor/adaptor/index", "autoapi/neural_compressor/adaptor/keras/index", "autoapi/neural_compressor/adaptor/keras_utils/conv2d/index", "autoapi/neural_compressor/adaptor/keras_utils/dense/index", "autoapi/neural_compressor/adaptor/keras_utils/depthwise_conv2d/index", "autoapi/neural_compressor/adaptor/keras_utils/index", "autoapi/neural_compressor/adaptor/keras_utils/pool2d/index", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index", "autoapi/neural_compressor/adaptor/keras_utils/separable_conv2d/index", "autoapi/neural_compressor/adaptor/mxnet/index", "autoapi/neural_compressor/adaptor/mxnet_utils/index", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index", "autoapi/neural_compressor/adaptor/onnxrt/index", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index", "autoapi/neural_compressor/adaptor/ox_utils/calibrator/index", "autoapi/neural_compressor/adaptor/ox_utils/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/norm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/reduce/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/unary_op/index", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index", "autoapi/neural_compressor/adaptor/ox_utils/smooth_quant/index", "autoapi/neural_compressor/adaptor/ox_utils/util/index", "autoapi/neural_compressor/adaptor/ox_utils/weight_only/index", "autoapi/neural_compressor/adaptor/pytorch/index", "autoapi/neural_compressor/adaptor/query/index", "autoapi/neural_compressor/adaptor/tensorflow/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/dequantize_cast_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_schema/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/tf2onnx_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index", "autoapi/neural_compressor/adaptor/tf_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_calibration/index", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_scaler/index", "autoapi/neural_compressor/adaptor/tf_utils/tf2onnx_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index", "autoapi/neural_compressor/adaptor/tf_utils/util/index", "autoapi/neural_compressor/adaptor/torch_utils/autoround/autoround/index", "autoapi/neural_compressor/adaptor/torch_utils/autoround/export/index", "autoapi/neural_compressor/adaptor/torch_utils/autoround/index", "autoapi/neural_compressor/adaptor/torch_utils/autoround/model_wrapper/index", "autoapi/neural_compressor/adaptor/torch_utils/autoround/sign_sgd/index", "autoapi/neural_compressor/adaptor/torch_utils/awq/index", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index", "autoapi/neural_compressor/adaptor/torch_utils/gptq/index", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index", "autoapi/neural_compressor/adaptor/torch_utils/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/modified_pickle/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/quantize/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/torch_load/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/utils/index", "autoapi/neural_compressor/adaptor/torch_utils/mixed_precision/index", "autoapi/neural_compressor/adaptor/torch_utils/model_wrapper/index", "autoapi/neural_compressor/adaptor/torch_utils/pattern_detector/index", "autoapi/neural_compressor/adaptor/torch_utils/smooth_quant/index", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index", "autoapi/neural_compressor/adaptor/torch_utils/teq/index", "autoapi/neural_compressor/adaptor/torch_utils/util/index", "autoapi/neural_compressor/adaptor/torch_utils/weight_only/index", "autoapi/neural_compressor/algorithm/algorithm/index", "autoapi/neural_compressor/algorithm/fast_bias_correction/index", "autoapi/neural_compressor/algorithm/index", "autoapi/neural_compressor/algorithm/smooth_quant/index", "autoapi/neural_compressor/algorithm/weight_correction/index", "autoapi/neural_compressor/benchmark/index", "autoapi/neural_compressor/common/base_config/index", "autoapi/neural_compressor/common/base_tune/index", "autoapi/neural_compressor/common/index", "autoapi/neural_compressor/common/logger/index", "autoapi/neural_compressor/common/utility/index", "autoapi/neural_compressor/compression/callbacks/index", "autoapi/neural_compressor/compression/distillation/criterions/index", "autoapi/neural_compressor/compression/distillation/index", "autoapi/neural_compressor/compression/distillation/optimizers/index", "autoapi/neural_compressor/compression/distillation/utility/index", "autoapi/neural_compressor/compression/hpo/index", "autoapi/neural_compressor/compression/hpo/sa_optimizer/index", "autoapi/neural_compressor/compression/hpo/search_algorithms/index", "autoapi/neural_compressor/compression/hpo/search_space/index", "autoapi/neural_compressor/compression/index", "autoapi/neural_compressor/compression/pruner/criteria/index", "autoapi/neural_compressor/compression/pruner/index", "autoapi/neural_compressor/compression/pruner/model_slim/auto_slim/index", "autoapi/neural_compressor/compression/pruner/model_slim/index", "autoapi/neural_compressor/compression/pruner/model_slim/pattern_analyzer/index", "autoapi/neural_compressor/compression/pruner/model_slim/weight_slim/index", "autoapi/neural_compressor/compression/pruner/patterns/base/index", "autoapi/neural_compressor/compression/pruner/patterns/index", "autoapi/neural_compressor/compression/pruner/patterns/mha/index", "autoapi/neural_compressor/compression/pruner/patterns/ninm/index", "autoapi/neural_compressor/compression/pruner/patterns/nxm/index", "autoapi/neural_compressor/compression/pruner/pruners/base/index", "autoapi/neural_compressor/compression/pruner/pruners/basic/index", "autoapi/neural_compressor/compression/pruner/pruners/block_mask/index", "autoapi/neural_compressor/compression/pruner/pruners/index", "autoapi/neural_compressor/compression/pruner/pruners/mha/index", "autoapi/neural_compressor/compression/pruner/pruners/pattern_lock/index", "autoapi/neural_compressor/compression/pruner/pruners/progressive/index", "autoapi/neural_compressor/compression/pruner/pruners/retrain_free/index", "autoapi/neural_compressor/compression/pruner/pruners/sparse_gpt/index", "autoapi/neural_compressor/compression/pruner/pruning/index", "autoapi/neural_compressor/compression/pruner/regs/index", "autoapi/neural_compressor/compression/pruner/schedulers/index", "autoapi/neural_compressor/compression/pruner/tf_criteria/index", "autoapi/neural_compressor/compression/pruner/utils/index", "autoapi/neural_compressor/conf/config/index", "autoapi/neural_compressor/conf/dotdict/index", "autoapi/neural_compressor/conf/index", "autoapi/neural_compressor/conf/pythonic_config/index", "autoapi/neural_compressor/config/index", "autoapi/neural_compressor/contrib/index", "autoapi/neural_compressor/contrib/strategy/index", "autoapi/neural_compressor/contrib/strategy/sigopt/index", "autoapi/neural_compressor/contrib/strategy/tpe/index", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/data/dataloaders/dataloader/index", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/data/dataloaders/fetcher/index", "autoapi/neural_compressor/data/dataloaders/index", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/data/dataloaders/sampler/index", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/data/datasets/bert_dataset/index", "autoapi/neural_compressor/data/datasets/coco_dataset/index", "autoapi/neural_compressor/data/datasets/dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/data/datasets/index", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/data/filters/coco_filter/index", "autoapi/neural_compressor/data/filters/filter/index", "autoapi/neural_compressor/data/filters/index", "autoapi/neural_compressor/data/index", "autoapi/neural_compressor/data/transforms/coco_transform/index", "autoapi/neural_compressor/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/data/transforms/index", "autoapi/neural_compressor/data/transforms/postprocess/index", "autoapi/neural_compressor/data/transforms/tokenization/index", "autoapi/neural_compressor/data/transforms/transform/index", "autoapi/neural_compressor/experimental/benchmark/index", "autoapi/neural_compressor/experimental/common/criterion/index", "autoapi/neural_compressor/experimental/common/dataloader/index", "autoapi/neural_compressor/experimental/common/index", "autoapi/neural_compressor/experimental/common/metric/index", "autoapi/neural_compressor/experimental/common/model/index", "autoapi/neural_compressor/experimental/common/optimizer/index", "autoapi/neural_compressor/experimental/common/postprocess/index", "autoapi/neural_compressor/experimental/common/torch_utils/index", "autoapi/neural_compressor/experimental/component/index", "autoapi/neural_compressor/experimental/compression/index", "autoapi/neural_compressor/experimental/contrib/index", "autoapi/neural_compressor/experimental/contrib/strategy/index", "autoapi/neural_compressor/experimental/contrib/strategy/sigopt/index", "autoapi/neural_compressor/experimental/contrib/strategy/tpe/index", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index", "autoapi/neural_compressor/experimental/data/dataloaders/index", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/index", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index", "autoapi/neural_compressor/experimental/data/filters/filter/index", "autoapi/neural_compressor/experimental/data/filters/index", "autoapi/neural_compressor/experimental/data/index", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/experimental/data/transforms/index", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index", "autoapi/neural_compressor/experimental/data/transforms/transform/index", "autoapi/neural_compressor/experimental/distillation/index", "autoapi/neural_compressor/experimental/export/index", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index", "autoapi/neural_compressor/experimental/export/tf2onnx/index", "autoapi/neural_compressor/experimental/export/torch2onnx/index", "autoapi/neural_compressor/experimental/graph_optimization/index", "autoapi/neural_compressor/experimental/index", "autoapi/neural_compressor/experimental/metric/bleu/index", "autoapi/neural_compressor/experimental/metric/bleu_util/index", "autoapi/neural_compressor/experimental/metric/coco_label_map/index", "autoapi/neural_compressor/experimental/metric/coco_tools/index", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index", "autoapi/neural_compressor/experimental/metric/f1/index", "autoapi/neural_compressor/experimental/metric/index", "autoapi/neural_compressor/experimental/metric/metric/index", "autoapi/neural_compressor/experimental/mixed_precision/index", "autoapi/neural_compressor/experimental/model_conversion/index", "autoapi/neural_compressor/experimental/nas/basic_nas/index", "autoapi/neural_compressor/experimental/nas/dynas/index", "autoapi/neural_compressor/experimental/nas/index", "autoapi/neural_compressor/experimental/nas/nas/index", "autoapi/neural_compressor/experimental/nas/nas_utils/index", "autoapi/neural_compressor/experimental/nas/search_algorithms/index", "autoapi/neural_compressor/experimental/pruner_legacy/gradient_sensitivity/index", "autoapi/neural_compressor/experimental/pruner_legacy/group_lasso/index", "autoapi/neural_compressor/experimental/pruner_legacy/index", "autoapi/neural_compressor/experimental/pruner_legacy/magnitude/index", "autoapi/neural_compressor/experimental/pruner_legacy/pattern_lock/index", "autoapi/neural_compressor/experimental/pruner_legacy/pruner/index", "autoapi/neural_compressor/experimental/pruning/index", "autoapi/neural_compressor/experimental/pruning_recipes/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index", "autoapi/neural_compressor/experimental/pruning_v2/index", "autoapi/neural_compressor/experimental/pytorch_pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index", "autoapi/neural_compressor/experimental/quantization/index", "autoapi/neural_compressor/experimental/scheduler/index", "autoapi/neural_compressor/experimental/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/experimental/strategy/basic/index", "autoapi/neural_compressor/experimental/strategy/bayesian/index", "autoapi/neural_compressor/experimental/strategy/exhaustive/index", "autoapi/neural_compressor/experimental/strategy/index", "autoapi/neural_compressor/experimental/strategy/mse/index", "autoapi/neural_compressor/experimental/strategy/mse_v2/index", "autoapi/neural_compressor/experimental/strategy/random/index", "autoapi/neural_compressor/experimental/strategy/strategy/index", "autoapi/neural_compressor/experimental/strategy/utils/constant/index", "autoapi/neural_compressor/experimental/strategy/utils/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_space/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/experimental/strategy/utils/utility/index", "autoapi/neural_compressor/index", "autoapi/neural_compressor/metric/bleu/index", "autoapi/neural_compressor/metric/bleu_util/index", "autoapi/neural_compressor/metric/coco_label_map/index", "autoapi/neural_compressor/metric/coco_tools/index", "autoapi/neural_compressor/metric/evaluate_squad/index", "autoapi/neural_compressor/metric/f1/index", "autoapi/neural_compressor/metric/index", "autoapi/neural_compressor/metric/metric/index", "autoapi/neural_compressor/mix_precision/index", "autoapi/neural_compressor/model/base_model/index", "autoapi/neural_compressor/model/index", "autoapi/neural_compressor/model/keras_model/index", "autoapi/neural_compressor/model/model/index", "autoapi/neural_compressor/model/mxnet_model/index", "autoapi/neural_compressor/model/nets_factory/index", "autoapi/neural_compressor/model/onnx_model/index", "autoapi/neural_compressor/model/tensorflow_model/index", "autoapi/neural_compressor/model/torch_model/index", "autoapi/neural_compressor/objective/index", "autoapi/neural_compressor/profiling/index", "autoapi/neural_compressor/profiling/parser/factory/index", "autoapi/neural_compressor/profiling/parser/index", "autoapi/neural_compressor/profiling/parser/onnx_parser/factory/index", "autoapi/neural_compressor/profiling/parser/onnx_parser/index", "autoapi/neural_compressor/profiling/parser/onnx_parser/parser/index", "autoapi/neural_compressor/profiling/parser/parser/index", "autoapi/neural_compressor/profiling/parser/result/index", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/factory/index", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/index", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/parser/index", "autoapi/neural_compressor/profiling/profiler/factory/index", "autoapi/neural_compressor/profiling/profiler/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/factory/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/profiler/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/utils/index", "autoapi/neural_compressor/profiling/profiler/profiler/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/factory/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/profiler/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/utils/index", "autoapi/neural_compressor/quantization/index", "autoapi/neural_compressor/strategy/auto/index", "autoapi/neural_compressor/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/strategy/basic/index", "autoapi/neural_compressor/strategy/bayesian/index", "autoapi/neural_compressor/strategy/conservative/index", "autoapi/neural_compressor/strategy/exhaustive/index", "autoapi/neural_compressor/strategy/hawq_v2/index", "autoapi/neural_compressor/strategy/index", "autoapi/neural_compressor/strategy/mse/index", "autoapi/neural_compressor/strategy/mse_v2/index", "autoapi/neural_compressor/strategy/random/index", "autoapi/neural_compressor/strategy/strategy/index", "autoapi/neural_compressor/strategy/utils/constant/index", "autoapi/neural_compressor/strategy/utils/index", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/strategy/utils/tuning_space/index", "autoapi/neural_compressor/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/strategy/utils/utility/index", "autoapi/neural_compressor/template/api_doc_example/index", "autoapi/neural_compressor/template/index", "autoapi/neural_compressor/tensorflow/algorithms/index", "autoapi/neural_compressor/tensorflow/algorithms/static_quantize/index", "autoapi/neural_compressor/tensorflow/algorithms/static_quantize/keras/index", "autoapi/neural_compressor/tensorflow/algorithms/static_quantize/keras_utils/conv2d/index", "autoapi/neural_compressor/tensorflow/algorithms/static_quantize/keras_utils/dense/index", "autoapi/neural_compressor/tensorflow/algorithms/static_quantize/keras_utils/depthwise_conv2d/index", "autoapi/neural_compressor/tensorflow/algorithms/static_quantize/keras_utils/index", "autoapi/neural_compressor/tensorflow/algorithms/static_quantize/keras_utils/pool2d/index", "autoapi/neural_compressor/tensorflow/algorithms/static_quantize/keras_utils/quantizer/index", "autoapi/neural_compressor/tensorflow/algorithms/static_quantize/keras_utils/separable_conv2d/index", "autoapi/neural_compressor/tensorflow/algorithms/static_quantize/quantize_entry/index", "autoapi/neural_compressor/tensorflow/index", "autoapi/neural_compressor/tensorflow/quantization/config/index", "autoapi/neural_compressor/tensorflow/quantization/index", "autoapi/neural_compressor/tensorflow/quantization/quantize/index", "autoapi/neural_compressor/tensorflow/utils/index", "autoapi/neural_compressor/torch/algorithms/index", "autoapi/neural_compressor/torch/algorithms/weight_only/gptq/index", "autoapi/neural_compressor/torch/algorithms/weight_only/index", "autoapi/neural_compressor/torch/algorithms/weight_only/rtn/index", "autoapi/neural_compressor/torch/algorithms/weight_only_algos/index", "autoapi/neural_compressor/torch/amp/autocast/index", "autoapi/neural_compressor/torch/amp/fp8/functions/index", "autoapi/neural_compressor/torch/amp/fp8/index", "autoapi/neural_compressor/torch/amp/index", "autoapi/neural_compressor/torch/index", "autoapi/neural_compressor/torch/quantization/config/index", "autoapi/neural_compressor/torch/quantization/fp8/index", "autoapi/neural_compressor/torch/quantization/fp8/modules/index", "autoapi/neural_compressor/torch/quantization/fp8/observer/index", "autoapi/neural_compressor/torch/quantization/fp8/quantization_impl/index", "autoapi/neural_compressor/torch/quantization/index", "autoapi/neural_compressor/torch/quantization/layers/index", "autoapi/neural_compressor/torch/quantization/quantize/index", "autoapi/neural_compressor/torch/tune/index", "autoapi/neural_compressor/torch/utils/constants/index", "autoapi/neural_compressor/torch/utils/index", "autoapi/neural_compressor/torch/utils/utility/index", "autoapi/neural_compressor/training/index", "autoapi/neural_compressor/utils/collect_layer_histogram/index", "autoapi/neural_compressor/utils/constant/index", "autoapi/neural_compressor/utils/create_obj_from_config/index", "autoapi/neural_compressor/utils/index", "autoapi/neural_compressor/utils/kl_divergence/index", "autoapi/neural_compressor/utils/load_huggingface/index", "autoapi/neural_compressor/utils/logger/index", "autoapi/neural_compressor/utils/neural_insights_utils/index", "autoapi/neural_compressor/utils/options/index", "autoapi/neural_compressor/utils/pytorch/index", "autoapi/neural_compressor/utils/utility/index", "autoapi/neural_compressor/utils/weights_details/index", "autoapi/neural_compressor/version/index", "docs/build_docs/source/index", "docs/source/CODE_OF_CONDUCT", "docs/source/CONTRIBUTING", "docs/source/FX", "docs/source/NAS", "docs/source/SECURITY", "docs/source/Welcome", "docs/source/adaptor", "docs/source/add_new_adaptor", "docs/source/add_new_data_type", "docs/source/api-doc/adaptor", "docs/source/api-doc/adaptor/onnxrt", "docs/source/api-doc/adaptor/torch_utils", "docs/source/api-doc/api_doc_example", "docs/source/api-doc/apis", "docs/source/api-doc/benchmark", "docs/source/api-doc/compression", "docs/source/api-doc/config", "docs/source/api-doc/mix_precision", "docs/source/api-doc/model", "docs/source/api-doc/objective", "docs/source/api-doc/quantization", "docs/source/api-doc/strategy", "docs/source/api-doc/training", "docs/source/benchmark", "docs/source/calibration", "docs/source/dataloader", "docs/source/dataset", "docs/source/design", "docs/source/diagnosis", "docs/source/distillation", "docs/source/distillation_quantization", "docs/source/distributed", "docs/source/examples_readme", "docs/source/export", "docs/source/faq", "docs/source/framework_yaml", "docs/source/get_started", "docs/source/incompatible_changes", "docs/source/infrastructure", "docs/source/installation_guide", "docs/source/legal_information", "docs/source/llm_recipes", "docs/source/metric", "docs/source/migration", "docs/source/mixed_precision", "docs/source/model", "docs/source/neural_coder/README", "docs/source/neural_coder/docs/AWSSageMakerSupport", "docs/source/neural_coder/docs/BigDLNanoSupport", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting", "docs/source/neural_coder/docs/PythonAPI", "docs/source/neural_coder/docs/PythonLauncher", "docs/source/neural_coder/docs/Quantization", "docs/source/neural_coder/docs/SupportMatrix", "docs/source/neural_coder/docs/release_notes/v0.4", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart", "docs/source/neural_insights/README", "docs/source/neural_insights/docs/source/onnx_accuracy_debug", "docs/source/neural_insights/docs/source/pytorch_nlp_cli_mode", "docs/source/neural_insights/docs/source/tf_accuracy_debug", "docs/source/neural_insights/gui/README", "docs/source/neural_solution/README", "docs/source/neural_solution/docs/source/README", "docs/source/neural_solution/docs/source/description_api", "docs/source/neural_solution/docs/source/ns_design_doc", "docs/source/neural_solution/docs/source/template/task_request_description", "docs/source/neural_solution/examples/README", "docs/source/neural_solution/examples/custom_models_optimized/tf_example1/README", "docs/source/neural_solution/examples/hf_models/README", "docs/source/neural_solution/examples/hf_models_grpc/README", "docs/source/neural_solution/frontend/README", "docs/source/objective", "docs/source/orchestration", "docs/source/pruning", "docs/source/publication_list", "docs/source/pythonic_style", "docs/source/quantization", "docs/source/quantization_layer_wise", "docs/source/quantization_mixed_precision", "docs/source/quantization_weight_only", "docs/source/releases_info", "docs/source/sigopt_strategy", "docs/source/smooth_quant", "docs/source/tensorboard", "docs/source/transform", "docs/source/tuning_strategies", "docs/source/user_guide", "docs/source/user_yaml", "docs/source/validated_model_list", "index"], "filenames": ["autoapi/block_mask/index.rst", "autoapi/neural_compressor/adaptor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/keras/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/conv2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/dense/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/depthwise_conv2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/pool2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/separable_conv2d/index.rst", "autoapi/neural_compressor/adaptor/mxnet/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index.rst", "autoapi/neural_compressor/adaptor/onnxrt/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibrator/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/norm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/reduce/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/unary_op/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/smooth_quant/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/util/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/weight_only/index.rst", "autoapi/neural_compressor/adaptor/pytorch/index.rst", "autoapi/neural_compressor/adaptor/query/index.rst", "autoapi/neural_compressor/adaptor/tensorflow/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/dequantize_cast_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_schema/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/tf2onnx_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_calibration/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_scaler/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/tf2onnx_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/util/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/autoround/autoround/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/autoround/export/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/autoround/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/autoround/model_wrapper/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/autoround/sign_sgd/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/awq/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/gptq/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/modified_pickle/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/quantize/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/torch_load/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/utils/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/mixed_precision/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/model_wrapper/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/pattern_detector/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/smooth_quant/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/teq/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/util/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/weight_only/index.rst", "autoapi/neural_compressor/algorithm/algorithm/index.rst", "autoapi/neural_compressor/algorithm/fast_bias_correction/index.rst", "autoapi/neural_compressor/algorithm/index.rst", "autoapi/neural_compressor/algorithm/smooth_quant/index.rst", "autoapi/neural_compressor/algorithm/weight_correction/index.rst", "autoapi/neural_compressor/benchmark/index.rst", "autoapi/neural_compressor/common/base_config/index.rst", "autoapi/neural_compressor/common/base_tune/index.rst", "autoapi/neural_compressor/common/index.rst", "autoapi/neural_compressor/common/logger/index.rst", "autoapi/neural_compressor/common/utility/index.rst", "autoapi/neural_compressor/compression/callbacks/index.rst", "autoapi/neural_compressor/compression/distillation/criterions/index.rst", "autoapi/neural_compressor/compression/distillation/index.rst", "autoapi/neural_compressor/compression/distillation/optimizers/index.rst", "autoapi/neural_compressor/compression/distillation/utility/index.rst", "autoapi/neural_compressor/compression/hpo/index.rst", "autoapi/neural_compressor/compression/hpo/sa_optimizer/index.rst", "autoapi/neural_compressor/compression/hpo/search_algorithms/index.rst", "autoapi/neural_compressor/compression/hpo/search_space/index.rst", "autoapi/neural_compressor/compression/index.rst", "autoapi/neural_compressor/compression/pruner/criteria/index.rst", "autoapi/neural_compressor/compression/pruner/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/auto_slim/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/pattern_analyzer/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/weight_slim/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/base/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/mha/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/ninm/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/nxm/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/base/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/basic/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/block_mask/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/mha/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/pattern_lock/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/progressive/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/retrain_free/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/sparse_gpt/index.rst", "autoapi/neural_compressor/compression/pruner/pruning/index.rst", "autoapi/neural_compressor/compression/pruner/regs/index.rst", "autoapi/neural_compressor/compression/pruner/schedulers/index.rst", "autoapi/neural_compressor/compression/pruner/tf_criteria/index.rst", "autoapi/neural_compressor/compression/pruner/utils/index.rst", "autoapi/neural_compressor/conf/config/index.rst", "autoapi/neural_compressor/conf/dotdict/index.rst", "autoapi/neural_compressor/conf/index.rst", "autoapi/neural_compressor/conf/pythonic_config/index.rst", "autoapi/neural_compressor/config/index.rst", "autoapi/neural_compressor/contrib/index.rst", "autoapi/neural_compressor/contrib/strategy/index.rst", "autoapi/neural_compressor/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/data/dataloaders/index.rst", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/data/datasets/index.rst", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/data/filters/filter/index.rst", "autoapi/neural_compressor/data/filters/index.rst", "autoapi/neural_compressor/data/index.rst", "autoapi/neural_compressor/data/transforms/coco_transform/index.rst", "autoapi/neural_compressor/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/data/transforms/index.rst", "autoapi/neural_compressor/data/transforms/postprocess/index.rst", "autoapi/neural_compressor/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/benchmark/index.rst", "autoapi/neural_compressor/experimental/common/criterion/index.rst", "autoapi/neural_compressor/experimental/common/dataloader/index.rst", "autoapi/neural_compressor/experimental/common/index.rst", "autoapi/neural_compressor/experimental/common/metric/index.rst", "autoapi/neural_compressor/experimental/common/model/index.rst", "autoapi/neural_compressor/experimental/common/optimizer/index.rst", "autoapi/neural_compressor/experimental/common/postprocess/index.rst", "autoapi/neural_compressor/experimental/common/torch_utils/index.rst", "autoapi/neural_compressor/experimental/component/index.rst", "autoapi/neural_compressor/experimental/compression/index.rst", "autoapi/neural_compressor/experimental/contrib/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/index.rst", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/index.rst", "autoapi/neural_compressor/experimental/data/index.rst", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/experimental/data/transforms/index.rst", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/experimental/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/distillation/index.rst", "autoapi/neural_compressor/experimental/export/index.rst", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index.rst", "autoapi/neural_compressor/experimental/export/tf2onnx/index.rst", "autoapi/neural_compressor/experimental/export/torch2onnx/index.rst", "autoapi/neural_compressor/experimental/graph_optimization/index.rst", "autoapi/neural_compressor/experimental/index.rst", "autoapi/neural_compressor/experimental/metric/bleu/index.rst", "autoapi/neural_compressor/experimental/metric/bleu_util/index.rst", "autoapi/neural_compressor/experimental/metric/coco_label_map/index.rst", "autoapi/neural_compressor/experimental/metric/coco_tools/index.rst", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/experimental/metric/f1/index.rst", "autoapi/neural_compressor/experimental/metric/index.rst", "autoapi/neural_compressor/experimental/metric/metric/index.rst", "autoapi/neural_compressor/experimental/mixed_precision/index.rst", "autoapi/neural_compressor/experimental/model_conversion/index.rst", "autoapi/neural_compressor/experimental/nas/basic_nas/index.rst", "autoapi/neural_compressor/experimental/nas/dynas/index.rst", "autoapi/neural_compressor/experimental/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas_utils/index.rst", "autoapi/neural_compressor/experimental/nas/search_algorithms/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/gradient_sensitivity/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/group_lasso/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/magnitude/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/pattern_lock/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/pruner/index.rst", "autoapi/neural_compressor/experimental/pruning/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_v2/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index.rst", "autoapi/neural_compressor/experimental/quantization/index.rst", "autoapi/neural_compressor/experimental/scheduler/index.rst", "autoapi/neural_compressor/experimental/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/experimental/strategy/basic/index.rst", "autoapi/neural_compressor/experimental/strategy/bayesian/index.rst", "autoapi/neural_compressor/experimental/strategy/exhaustive/index.rst", "autoapi/neural_compressor/experimental/strategy/index.rst", "autoapi/neural_compressor/experimental/strategy/mse/index.rst", "autoapi/neural_compressor/experimental/strategy/mse_v2/index.rst", "autoapi/neural_compressor/experimental/strategy/random/index.rst", "autoapi/neural_compressor/experimental/strategy/strategy/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/constant/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/utility/index.rst", "autoapi/neural_compressor/index.rst", "autoapi/neural_compressor/metric/bleu/index.rst", "autoapi/neural_compressor/metric/bleu_util/index.rst", "autoapi/neural_compressor/metric/coco_label_map/index.rst", "autoapi/neural_compressor/metric/coco_tools/index.rst", "autoapi/neural_compressor/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/metric/f1/index.rst", "autoapi/neural_compressor/metric/index.rst", "autoapi/neural_compressor/metric/metric/index.rst", "autoapi/neural_compressor/mix_precision/index.rst", "autoapi/neural_compressor/model/base_model/index.rst", "autoapi/neural_compressor/model/index.rst", "autoapi/neural_compressor/model/keras_model/index.rst", "autoapi/neural_compressor/model/model/index.rst", "autoapi/neural_compressor/model/mxnet_model/index.rst", "autoapi/neural_compressor/model/nets_factory/index.rst", "autoapi/neural_compressor/model/onnx_model/index.rst", "autoapi/neural_compressor/model/tensorflow_model/index.rst", "autoapi/neural_compressor/model/torch_model/index.rst", "autoapi/neural_compressor/objective/index.rst", "autoapi/neural_compressor/profiling/index.rst", "autoapi/neural_compressor/profiling/parser/factory/index.rst", "autoapi/neural_compressor/profiling/parser/index.rst", "autoapi/neural_compressor/profiling/parser/onnx_parser/factory/index.rst", "autoapi/neural_compressor/profiling/parser/onnx_parser/index.rst", "autoapi/neural_compressor/profiling/parser/onnx_parser/parser/index.rst", "autoapi/neural_compressor/profiling/parser/parser/index.rst", "autoapi/neural_compressor/profiling/parser/result/index.rst", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/factory/index.rst", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/index.rst", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/parser/index.rst", "autoapi/neural_compressor/profiling/profiler/factory/index.rst", "autoapi/neural_compressor/profiling/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/factory/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/utils/index.rst", "autoapi/neural_compressor/profiling/profiler/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/factory/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/utils/index.rst", "autoapi/neural_compressor/quantization/index.rst", "autoapi/neural_compressor/strategy/auto/index.rst", "autoapi/neural_compressor/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/strategy/basic/index.rst", "autoapi/neural_compressor/strategy/bayesian/index.rst", "autoapi/neural_compressor/strategy/conservative/index.rst", "autoapi/neural_compressor/strategy/exhaustive/index.rst", "autoapi/neural_compressor/strategy/hawq_v2/index.rst", "autoapi/neural_compressor/strategy/index.rst", "autoapi/neural_compressor/strategy/mse/index.rst", "autoapi/neural_compressor/strategy/mse_v2/index.rst", "autoapi/neural_compressor/strategy/random/index.rst", "autoapi/neural_compressor/strategy/strategy/index.rst", "autoapi/neural_compressor/strategy/utils/constant/index.rst", "autoapi/neural_compressor/strategy/utils/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/strategy/utils/utility/index.rst", "autoapi/neural_compressor/template/api_doc_example/index.rst", "autoapi/neural_compressor/template/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/static_quantize/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/static_quantize/keras/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/static_quantize/keras_utils/conv2d/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/static_quantize/keras_utils/dense/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/static_quantize/keras_utils/depthwise_conv2d/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/static_quantize/keras_utils/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/static_quantize/keras_utils/pool2d/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/static_quantize/keras_utils/quantizer/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/static_quantize/keras_utils/separable_conv2d/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/static_quantize/quantize_entry/index.rst", "autoapi/neural_compressor/tensorflow/index.rst", "autoapi/neural_compressor/tensorflow/quantization/config/index.rst", "autoapi/neural_compressor/tensorflow/quantization/index.rst", "autoapi/neural_compressor/tensorflow/quantization/quantize/index.rst", "autoapi/neural_compressor/tensorflow/utils/index.rst", "autoapi/neural_compressor/torch/algorithms/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/gptq/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/rtn/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only_algos/index.rst", "autoapi/neural_compressor/torch/amp/autocast/index.rst", "autoapi/neural_compressor/torch/amp/fp8/functions/index.rst", "autoapi/neural_compressor/torch/amp/fp8/index.rst", "autoapi/neural_compressor/torch/amp/index.rst", "autoapi/neural_compressor/torch/index.rst", "autoapi/neural_compressor/torch/quantization/config/index.rst", "autoapi/neural_compressor/torch/quantization/fp8/index.rst", "autoapi/neural_compressor/torch/quantization/fp8/modules/index.rst", "autoapi/neural_compressor/torch/quantization/fp8/observer/index.rst", "autoapi/neural_compressor/torch/quantization/fp8/quantization_impl/index.rst", "autoapi/neural_compressor/torch/quantization/index.rst", "autoapi/neural_compressor/torch/quantization/layers/index.rst", "autoapi/neural_compressor/torch/quantization/quantize/index.rst", "autoapi/neural_compressor/torch/tune/index.rst", "autoapi/neural_compressor/torch/utils/constants/index.rst", "autoapi/neural_compressor/torch/utils/index.rst", "autoapi/neural_compressor/torch/utils/utility/index.rst", "autoapi/neural_compressor/training/index.rst", "autoapi/neural_compressor/utils/collect_layer_histogram/index.rst", "autoapi/neural_compressor/utils/constant/index.rst", "autoapi/neural_compressor/utils/create_obj_from_config/index.rst", "autoapi/neural_compressor/utils/index.rst", "autoapi/neural_compressor/utils/kl_divergence/index.rst", "autoapi/neural_compressor/utils/load_huggingface/index.rst", "autoapi/neural_compressor/utils/logger/index.rst", "autoapi/neural_compressor/utils/neural_insights_utils/index.rst", "autoapi/neural_compressor/utils/options/index.rst", "autoapi/neural_compressor/utils/pytorch/index.rst", "autoapi/neural_compressor/utils/utility/index.rst", "autoapi/neural_compressor/utils/weights_details/index.rst", "autoapi/neural_compressor/version/index.rst", "docs/build_docs/source/index.rst", "docs/source/CODE_OF_CONDUCT.md", "docs/source/CONTRIBUTING.md", "docs/source/FX.md", "docs/source/NAS.md", "docs/source/SECURITY.md", "docs/source/Welcome.md", "docs/source/adaptor.md", "docs/source/add_new_adaptor.md", "docs/source/add_new_data_type.md", "docs/source/api-doc/adaptor.rst", "docs/source/api-doc/adaptor/onnxrt.rst", "docs/source/api-doc/adaptor/torch_utils.rst", "docs/source/api-doc/api_doc_example.rst", "docs/source/api-doc/apis.rst", "docs/source/api-doc/benchmark.rst", "docs/source/api-doc/compression.rst", "docs/source/api-doc/config.rst", "docs/source/api-doc/mix_precision.rst", "docs/source/api-doc/model.rst", "docs/source/api-doc/objective.rst", "docs/source/api-doc/quantization.rst", "docs/source/api-doc/strategy.rst", "docs/source/api-doc/training.rst", "docs/source/benchmark.md", "docs/source/calibration.md", "docs/source/dataloader.md", "docs/source/dataset.md", "docs/source/design.md", "docs/source/diagnosis.md", "docs/source/distillation.md", "docs/source/distillation_quantization.md", "docs/source/distributed.md", "docs/source/examples_readme.md", "docs/source/export.md", "docs/source/faq.md", "docs/source/framework_yaml.md", "docs/source/get_started.md", "docs/source/incompatible_changes.md", "docs/source/infrastructure.md", "docs/source/installation_guide.md", "docs/source/legal_information.md", "docs/source/llm_recipes.md", "docs/source/metric.md", "docs/source/migration.md", "docs/source/mixed_precision.md", "docs/source/model.md", "docs/source/neural_coder/README.md", "docs/source/neural_coder/docs/AWSSageMakerSupport.md", "docs/source/neural_coder/docs/BigDLNanoSupport.md", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting.md", "docs/source/neural_coder/docs/PythonAPI.md", "docs/source/neural_coder/docs/PythonLauncher.md", "docs/source/neural_coder/docs/Quantization.md", "docs/source/neural_coder/docs/SupportMatrix.md", "docs/source/neural_coder/docs/release_notes/v0.4.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart.md", "docs/source/neural_insights/README.md", "docs/source/neural_insights/docs/source/onnx_accuracy_debug.md", "docs/source/neural_insights/docs/source/pytorch_nlp_cli_mode.md", "docs/source/neural_insights/docs/source/tf_accuracy_debug.md", "docs/source/neural_insights/gui/README.md", "docs/source/neural_solution/README.md", "docs/source/neural_solution/docs/source/README.md", "docs/source/neural_solution/docs/source/description_api.md", "docs/source/neural_solution/docs/source/ns_design_doc.md", "docs/source/neural_solution/docs/source/template/task_request_description.md", "docs/source/neural_solution/examples/README.md", "docs/source/neural_solution/examples/custom_models_optimized/tf_example1/README.md", "docs/source/neural_solution/examples/hf_models/README.md", "docs/source/neural_solution/examples/hf_models_grpc/README.md", "docs/source/neural_solution/frontend/README.md", "docs/source/objective.md", "docs/source/orchestration.md", "docs/source/pruning.md", "docs/source/publication_list.md", "docs/source/pythonic_style.md", "docs/source/quantization.md", "docs/source/quantization_layer_wise.md", "docs/source/quantization_mixed_precision.md", "docs/source/quantization_weight_only.md", "docs/source/releases_info.md", "docs/source/sigopt_strategy.md", "docs/source/smooth_quant.md", "docs/source/tensorboard.md", "docs/source/transform.md", "docs/source/tuning_strategies.md", "docs/source/user_guide.md", "docs/source/user_yaml.md", "docs/source/validated_model_list.md", "index.rst"], "titles": ["<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">block_mask</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.dense</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.depthwise_conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.pool2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.separable_conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.onnxrt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.calibration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.calibrator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.activation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.argmax</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.attention</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.binary_op</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.direct_q8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.embed_layernorm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gather</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gavgpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gemm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.lstm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.maxpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.ops</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.reduce</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.resize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.split</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.unary_op</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.weight_only</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.query</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph_common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.smooth_quant_calibration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.smooth_quant_scaler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.tf2onnx_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.insert_logging</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.autoround.autoround</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.autoround.export</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.autoround</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.autoround.model_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.autoround.sign_sgd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.awq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.gptq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.hawq_metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.layer_wise_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.layer_wise_quant.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.model_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.pattern_detector</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.symbolic_trace</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.teq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.weight_only</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.fast_bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.weight_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.common.base_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.common.base_tune</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.common.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.common.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.callbacks</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation.criterions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation.optimizers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.hpo</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.hpo.sa_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.hpo.search_algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.hpo.search_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.criteria</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.auto_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.pattern_analyzer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.weight_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns.base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns.mha</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns.ninm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns.nxm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.block_mask</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.mha</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.pattern_lock</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.progressive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.retrain_free</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.sparse_gpt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.regs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.schedulers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.tf_criteria</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.dotdict</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.pythonic_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.sigopt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.tpe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.coco_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.criterion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.component</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.compression</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib.strategy.sigopt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib.strategy.tpe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.distillation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.qlinear2qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.tf2onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.torch2onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.model_conversion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.basic_nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.search_algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.gradient_sensitivity</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.group_lasso</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.magnitude</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.pattern_lock</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.tile_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.prune_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.auto_mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.bayesian</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.exhaustive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.mse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.mse_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.tuning_sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.tuning_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.tuning_structs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.mix_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.base_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.keras_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.mxnet_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.nets_factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.onnx_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.tensorflow_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.torch_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.objective</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.onnx_parser.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.onnx_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.onnx_parser.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.tensorflow_parser.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.tensorflow_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.tensorflow_parser.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.auto</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.auto_mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.bayesian</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.conservative</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.exhaustive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.hawq_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_structs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.template.api_doc_example</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.template</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.static_quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.static_quantize.keras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.dense</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.depthwise_conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.static_quantize.keras_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.pool2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.separable_conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.static_quantize.quantize_entry</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only.gptq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only.rtn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only_algos</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.amp.autocast</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.amp.fp8.functions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.amp.fp8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.amp</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.quantization.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.quantization.fp8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.quantization.fp8.modules</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.quantization.fp8.observer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.quantization.fp8.quantization_impl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.quantization.layers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.quantization.quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.tune</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.utils.constants</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.training</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.collect_layer_histogram</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.create_obj_from_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.kl_divergence</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.load_huggingface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.neural_insights_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.options</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.weights_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.version</span></code>", "Intel\u00ae Neural Compressor Documentation", "Contributor Covenant Code of Conduct", "Contribution Guidelines", "FX", "Neural Architecture Search", "Security Policy", "Intel\u00ae Neural Compressor", "Adaptor", "How to Add An Adaptor", "How to Support New Data Type, Like Int4, with a Few Line Changes", "Adaptor", "ONNX Runtime", "Torch Utils", "API Document Example", "APIs", "Benchmark", "Compression", "Config", "Mix Precision", "Model", "Objective", "Quantization", "Strategy", "Training", "Benchmarking", "Calibration Algorithms in Quantization", "DataLoader", "Dataset", "Design", "Diagnosis", "Distillation", "Distillation for Quantization", "Distributed Training and Inference (Evaluation)", "Examples", "Export", "Frequently Asked Questions", "Framework YAML Configuration Files", "Getting Started", "Incompatible changes between v1.2 and v1.1", "Infrastructure of Intel\u00ae Neural Compressor", "Installation", "Legal Information", "LLMs Quantization Recipes", "Metrics", "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X", "Mixed Precision", "Model", "Neural Coder", "AWS Amazon SageMaker Support", "BigDL Nano Support", "Intel CPU Platforms: Best Performance Setting", "Neural Coder as Python API", "Python Launcher", "Neural Coder for Quantization", "Supported Optimization Features", "v0.4", "Changelog", "neural_compressor_ext_lab", "Intel\u00ae Neural Compressor as JupyterLab Extension", "Making a new release of neural_compressor_ext_lab", "Changelog", "neural_compressor_ext_lab_alibaba", "Making a new release of neural_compressor_ext_lab_alibaba", "Change Log", "Neural Coder", "Welcome to your VS Code Extension", "Neural Insights", "Step by step example how to debug accuracy with Neural Insights", "Step by step example how to dump weights data for PyTorch model with Neural Insights", "Step by step example how to debug accuracy with Neural Insights", "Getting Started with Create React App", "What\u2019s Neural Solution?", "Get started", "Neural Solution API", "Design Doc for Optimization as a Service [WIP]", "Task request description", "Examples List", "An end-to-end example: quantize a custom model with Neural Solution", "An end-to-end example: quantize a Hugging Face model with Neural Solution", "An end-to-end example: quantize a Hugging Face model with Neural Solution gRPC API", "Client", "Objective", "Optimization Orchestration", "Pruning", "Full Publications/Events (78)", "Pythonic Style Access for Configurations", "Quantization", "Layer Wise Quantization (LWQ)", "Turn OFF Auto Mixed Precision during Quantization", "Weight Only Quantization (WOQ)", "Release", "SigOpt Strategy", "Smooth Quant", "TensorBoard", "Transform", "Tuning Strategies", "User Guide", "User YAML Configuration Files", "Validated Models", "Intel\u00ae Neural Compressor Documentation"], "terms": {"block": [0, 44, 149, 166, 170, 171, 193, 203, 206, 211, 217, 333, 374, 416, 437, 509, 551, 553, 559, 565], "mask": [0, 193, 199, 201, 204, 206, 210, 211, 237, 280, 306, 335, 359, 553, 568], "adaptor_registri": [1, 477], "cl": [1, 163, 172, 184, 186, 190, 191, 199, 204, 213, 214, 215, 239, 246, 254, 256, 261, 282, 289, 295, 317, 324, 328, 333, 335, 337, 348, 363, 374, 409, 467], "sourc": [1, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 113, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 181, 183, 184, 186, 187, 190, 191, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 249, 250, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 268, 269, 270, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 292, 294, 295, 296, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 310, 311, 312, 313, 314, 316, 317, 318, 319, 320, 322, 323, 324, 325, 328, 329, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 376, 378, 380, 381, 382, 383, 385, 386, 388, 390, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 412, 413, 414, 415, 416, 420, 428, 430, 432, 433, 435, 437, 438, 439, 444, 450, 451, 452, 455, 456, 457, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 473, 476, 511, 514, 527, 529, 531, 532, 534, 554], "The": [1, 3, 11, 14, 16, 34, 54, 74, 113, 119, 121, 140, 148, 149, 150, 153, 162, 164, 170, 172, 177, 178, 183, 184, 186, 190, 191, 193, 197, 199, 201, 202, 204, 205, 206, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 225, 226, 227, 237, 238, 239, 240, 241, 245, 246, 254, 256, 259, 261, 264, 268, 269, 270, 280, 281, 282, 283, 284, 288, 289, 295, 296, 301, 303, 304, 305, 307, 308, 310, 312, 313, 314, 316, 317, 319, 320, 322, 323, 324, 325, 328, 330, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 345, 346, 347, 348, 352, 354, 356, 357, 358, 360, 361, 363, 364, 372, 374, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 413, 415, 416, 420, 428, 432, 433, 438, 439, 451, 455, 456, 457, 459, 461, 462, 466, 467, 468, 471, 473, 474, 477, 478, 479, 480, 482, 486, 489, 492, 494, 495, 496, 497, 499, 500, 502, 504, 506, 508, 509, 510, 512, 513, 514, 515, 516, 519, 520, 522, 525, 527, 528, 529, 531, 532, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 547, 551, 552, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568], "decor": [1, 16, 34, 67, 68, 70, 148, 172, 178, 186, 190, 191, 199, 204, 213, 215, 254, 261, 295, 310, 317, 324, 328, 333, 335, 337, 348, 351, 363, 374, 409, 433, 439, 455, 467, 473, 474, 477, 565], "us": [1, 13, 16, 34, 42, 43, 44, 48, 49, 70, 103, 105, 116, 141, 149, 150, 153, 157, 162, 164, 170, 171, 177, 179, 184, 186, 190, 191, 193, 197, 199, 204, 208, 209, 213, 215, 216, 218, 219, 221, 222, 225, 226, 235, 236, 237, 238, 239, 240, 241, 244, 253, 254, 255, 256, 261, 268, 269, 278, 279, 280, 281, 282, 283, 284, 287, 294, 295, 299, 300, 301, 303, 304, 306, 310, 311, 312, 317, 324, 325, 328, 330, 333, 335, 336, 337, 338, 339, 342, 345, 348, 351, 352, 356, 357, 359, 363, 374, 391, 396, 397, 401, 404, 406, 409, 413, 415, 416, 433, 437, 439, 455, 456, 457, 458, 459, 460, 462, 467, 471, 472, 473, 474, 477, 478, 494, 495, 497, 499, 500, 501, 502, 504, 506, 508, 510, 511, 514, 515, 516, 517, 518, 519, 521, 522, 525, 527, 529, 531, 532, 534, 536, 537, 538, 539, 540, 547, 548, 549, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 564, 565, 567, 568], "regist": [1, 16, 34, 160, 162, 172, 178, 184, 186, 190, 191, 193, 194, 199, 200, 204, 207, 213, 214, 215, 216, 239, 246, 254, 256, 261, 282, 289, 295, 310, 317, 324, 328, 333, 335, 337, 348, 351, 363, 374, 409, 415, 430, 433, 455, 464, 474, 477, 497, 502, 513, 514, 535, 551, 562, 565], "all": [1, 13, 16, 34, 44, 45, 63, 97, 156, 162, 163, 170, 171, 172, 174, 177, 178, 183, 186, 191, 194, 199, 207, 217, 221, 222, 227, 228, 235, 239, 246, 254, 255, 261, 264, 270, 278, 282, 289, 295, 300, 303, 306, 308, 310, 317, 324, 328, 329, 333, 339, 348, 351, 356, 359, 361, 363, 365, 374, 409, 415, 430, 435, 459, 467, 471, 472, 476, 477, 478, 479, 496, 497, 502, 506, 510, 514, 517, 525, 528, 529, 532, 533, 534, 535, 536, 539, 540, 542, 543, 547, 548, 549, 552, 553, 554, 556, 558, 559, 562, 564, 565], "subclass": [1, 16, 34, 172, 186, 190, 191, 199, 204, 213, 215, 232, 236, 239, 246, 254, 261, 275, 279, 282, 289, 295, 310, 317, 324, 328, 333, 335, 337, 348, 351, 363, 374, 409, 477], "paramet": [1, 11, 13, 14, 16, 42, 43, 44, 45, 67, 68, 70, 86, 105, 116, 132, 140, 141, 148, 149, 150, 153, 155, 156, 157, 162, 163, 167, 168, 170, 171, 172, 177, 178, 179, 181, 183, 184, 186, 188, 190, 191, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 225, 226, 236, 237, 239, 246, 250, 254, 256, 261, 268, 269, 279, 280, 282, 289, 292, 295, 296, 298, 299, 300, 301, 303, 304, 306, 307, 308, 310, 312, 313, 314, 316, 317, 318, 319, 320, 322, 323, 324, 325, 328, 330, 333, 334, 335, 336, 337, 338, 342, 348, 352, 354, 356, 357, 359, 360, 361, 363, 364, 368, 372, 374, 391, 396, 397, 401, 409, 413, 415, 416, 428, 432, 433, 435, 437, 439, 451, 455, 456, 459, 462, 463, 464, 466, 467, 473, 478, 496, 497, 500, 502, 509, 513, 514, 528, 534, 535, 536, 537, 542, 547, 548, 553, 556, 557, 559, 560, 561, 562, 564, 565, 567], "framework_specific_info": [1, 3, 11, 14, 45, 47, 420, 477], "base": [1, 3, 11, 13, 14, 16, 34, 45, 46, 47, 86, 105, 116, 120, 122, 132, 144, 149, 153, 157, 160, 166, 170, 172, 178, 179, 183, 190, 191, 192, 193, 194, 200, 207, 214, 216, 222, 227, 230, 235, 237, 239, 246, 254, 264, 270, 273, 278, 280, 282, 289, 295, 310, 316, 318, 324, 325, 328, 330, 335, 345, 348, 352, 363, 365, 372, 373, 374, 406, 409, 413, 474, 476, 477, 478, 479, 497, 501, 502, 506, 514, 515, 522, 523, 525, 534, 537, 542, 545, 548, 549, 553, 554, 556, 559, 561, 562, 563, 565, 568], "framework": [1, 3, 11, 13, 14, 45, 153, 177, 178, 179, 184, 186, 194, 200, 204, 207, 211, 212, 213, 223, 224, 228, 229, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 248, 251, 254, 256, 257, 261, 266, 267, 271, 272, 274, 276, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 291, 293, 295, 301, 310, 311, 338, 346, 352, 363, 364, 365, 366, 368, 407, 413, 420, 430, 459, 476, 477, 479, 495, 499, 502, 503, 507, 508, 509, 510, 513, 514, 515, 536, 537, 553, 554, 556, 560, 563, 564, 565, 566, 567, 568], "layer": [1, 3, 11, 14, 45, 46, 47, 116, 117, 118, 119, 121, 122, 149, 156, 159, 161, 163, 167, 171, 175, 184, 187, 195, 197, 198, 199, 203, 208, 217, 221, 222, 256, 263, 333, 334, 420, 435, 437, 449, 457, 459, 467, 476, 477, 478, 479, 501, 509, 537, 553, 559, 560, 566], "mxnet_util": 2, "util": [2, 12, 17, 105, 110, 111, 139, 142, 155, 157, 158, 159, 168, 178, 185, 192, 194, 221, 222, 263, 302, 304, 334, 344, 355, 357, 389, 394, 405, 430, 444, 478, 479, 480, 495, 502, 514, 517, 537, 553, 556, 565, 566], "ox_util": 2, "oper": [2, 17, 43, 104, 110, 140, 148, 197, 198, 203, 221, 222, 250, 292, 333, 391, 396, 428, 473, 494, 496, 499, 504, 534, 540, 553, 556, 559, 562, 564, 565], "activ": [2, 17, 29, 44, 141, 154, 170, 171, 187, 221, 222, 263, 352, 413, 415, 477, 478, 479, 495, 499, 501, 506, 514, 535, 536, 539, 547, 548, 549, 555, 556, 559, 562, 563, 567], "argmax": [2, 17, 29], "attent": [2, 17, 29, 166, 195, 197, 208, 221, 222, 237, 280, 471, 500, 553], "binary_op": [2, 17, 29], "concat": [2, 17, 29, 147], "conv": [2, 17, 29, 58, 62, 66, 71, 72, 73, 92, 109, 175, 221, 222, 473, 478, 479, 514, 553, 555, 556, 565], "direct_q8": [2, 17, 29], "embed_layernorm": [2, 17, 29], "gather": [2, 13, 17, 29, 221, 222, 333], "gavgpool": [2, 17, 29], "gemm": [2, 17, 29, 221, 222], "lstm": [2, 17, 29], "matmul": [2, 17, 29, 44, 53, 59, 65, 73, 94, 109, 128, 137, 203, 221, 222, 333, 506, 537, 559, 565], "maxpool": [2, 17, 29, 129, 138, 506], "norm": [2, 17, 29], "op": [2, 13, 17, 29, 45, 51, 53, 65, 66, 67, 68, 69, 70, 71, 72, 74, 78, 81, 85, 88, 91, 92, 93, 94, 96, 105, 107, 109, 123, 124, 125, 131, 133, 134, 135, 136, 141, 143, 146, 148, 155, 157, 168, 170, 171, 175, 197, 221, 222, 300, 345, 352, 353, 391, 396, 402, 404, 406, 413, 414, 415, 428, 439, 455, 461, 467, 477, 478, 479, 499, 506, 514, 515, 538, 539, 553, 556, 558, 560, 562, 563, 565, 567], "pad": [2, 17, 29, 44, 71, 72, 237, 254, 280, 295, 497, 559, 564], "pool": [2, 17, 29, 544], "reduc": [2, 17, 29, 221, 222, 477, 495, 501, 514, 515, 534, 535, 553, 554, 556, 557, 558, 559, 562, 565, 567], "resiz": [2, 17, 29, 237, 238, 250, 254, 280, 281, 292, 295, 497, 564], "split": [2, 17, 29, 43, 82, 149, 171, 253, 254, 294, 295, 437, 473, 557, 559, 562, 564], "unary_op": [2, 17, 29], "calibr": [2, 11, 13, 14, 17, 44, 49, 89, 90, 140, 170, 171, 177, 221, 222, 225, 226, 268, 269, 301, 338, 397, 428, 432, 451, 461, 477, 479, 497, 508, 509, 553, 556, 559, 565, 566, 567], "quantiz": [2, 11, 13, 14, 16, 17, 42, 43, 44, 48, 49, 88, 92, 94, 96, 99, 107, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 149, 150, 154, 155, 156, 157, 158, 159, 163, 164, 165, 167, 169, 170, 171, 175, 177, 179, 183, 221, 222, 225, 226, 250, 257, 264, 268, 269, 292, 300, 301, 302, 312, 339, 345, 351, 355, 402, 404, 406, 415, 428, 435, 437, 438, 456, 457, 461, 462, 466, 467, 477, 484, 496, 497, 502, 503, 506, 508, 509, 513, 516, 517, 522, 524, 525, 528, 541, 543, 544, 546, 552, 554, 560, 563, 564, 565, 566, 567], "smooth_quant": [2, 17, 161, 170, 174, 221, 222, 355, 556, 562], "weight_onli": [2, 17, 222, 466, 557, 559], "tf_util": 2, "graph_rewrit": [2, 111], "bf16": [2, 44, 87, 111, 155, 221, 222, 352, 413, 477, 478, 506, 514, 519, 524, 528, 534, 558, 565, 568], "gener": [2, 13, 48, 49, 87, 111, 122, 148, 156, 170, 177, 197, 217, 225, 226, 227, 236, 239, 240, 241, 242, 254, 268, 269, 270, 279, 282, 283, 284, 285, 295, 303, 311, 342, 356, 364, 392, 397, 401, 416, 430, 435, 444, 456, 472, 473, 477, 479, 496, 500, 513, 514, 515, 517, 522, 527, 529, 531, 532, 534, 536, 537, 551, 553, 554, 556, 558, 559, 562, 563, 564, 565], "int8": [2, 18, 19, 43, 44, 87, 111, 123, 124, 125, 131, 133, 134, 135, 136, 143, 148, 171, 176, 177, 221, 222, 250, 292, 298, 299, 300, 352, 354, 413, 415, 430, 437, 466, 467, 472, 473, 476, 477, 478, 479, 494, 497, 501, 506, 512, 514, 515, 519, 522, 524, 525, 528, 534, 537, 539, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 567], "onnx": [2, 14, 15, 16, 29, 41, 43, 44, 87, 111, 142, 175, 221, 222, 233, 276, 298, 299, 300, 364, 371, 391, 465, 472, 476, 477, 478, 480, 496, 499, 503, 504, 506, 507, 509, 515, 516, 519, 524, 525, 537, 554, 555, 559, 560, 562, 565], "qdq": [2, 42, 87, 111, 112, 113, 142, 170, 171, 221, 222, 298, 299, 300, 437, 477, 499, 504, 509, 524, 525, 556, 560, 562], "graph_bas": [2, 87, 111], "quantize_graph": [2, 111], "qat": [2, 111, 112, 168, 222, 312, 372, 501, 502, 509, 514, 556], "quantize_graph_bas": [2, 111, 112], "quantize_graph_bn": [2, 111, 112], "quantize_graph_concatv2": [2, 111, 112], "quantize_graph_conv": [2, 111, 112], "quantize_graph_for_intel_cpu": [2, 111, 112], "quantize_graph_matmul": [2, 111, 112], "quantize_graph_pool": [2, 111, 112], "transform_graph": [2, 111], "bias_correct": [2, 111, 145], "graph_transform_bas": [2, 111, 145], "insert_log": [2, 111, 145], "rerange_quantized_concat": [2, 111, 145], "graph_convert": [2, 111], "graph_converter_without_calib": [2, 111], "graph_util": [2, 111], "quantize_graph_common": [2, 111], "smooth_quant_calibr": [2, 111], "smooth_quant_scal": [2, 111], "tf2onnx_convert": [2, 111], "torch_util": [2, 258, 302, 355, 557, 562], "layer_wise_qu": [2, 158, 222, 557], "modified_pickl": [2, 158, 159], "torch_load": [2, 158, 159], "bf16_convert": [2, 52, 87, 111, 158], "hawq_metr": [2, 158], "model_wrapp": [2, 15, 151, 158], "pattern_detector": [2, 158], "symbolic_trac": [2, 158], "tensorflow": [2, 52, 54, 75, 76, 77, 87, 95, 101, 102, 103, 104, 105, 106, 110, 111, 112, 114, 117, 130, 140, 141, 142, 145, 148, 184, 186, 216, 221, 222, 236, 237, 238, 239, 242, 244, 246, 254, 261, 279, 280, 281, 282, 285, 287, 289, 295, 299, 300, 301, 304, 306, 310, 311, 312, 338, 346, 357, 359, 363, 364, 372, 390, 391, 395, 396, 397, 407, 467, 472, 474, 476, 477, 478, 495, 496, 499, 500, 501, 503, 506, 507, 509, 510, 514, 515, 516, 524, 525, 536, 539, 553, 554, 555, 561, 562, 565, 567], "kerasadaptor": [3, 420], "kerasqueri": [3, 420], "local_config_fil": [3, 11, 14, 45, 47, 420], "none": [3, 13, 14, 41, 43, 44, 45, 47, 48, 49, 63, 89, 102, 104, 105, 110, 116, 142, 148, 149, 153, 154, 156, 157, 161, 162, 163, 164, 165, 167, 169, 170, 171, 177, 178, 179, 183, 184, 191, 193, 194, 195, 197, 201, 213, 217, 218, 219, 221, 222, 225, 226, 227, 229, 235, 236, 237, 238, 239, 240, 241, 242, 244, 250, 254, 255, 256, 257, 264, 268, 269, 270, 272, 278, 279, 280, 281, 282, 283, 284, 285, 287, 292, 295, 296, 299, 300, 301, 306, 310, 311, 312, 313, 316, 325, 330, 334, 338, 342, 345, 346, 348, 352, 359, 363, 364, 374, 390, 395, 396, 397, 398, 401, 402, 406, 407, 409, 413, 416, 420, 428, 430, 432, 433, 435, 439, 444, 450, 451, 452, 456, 457, 459, 462, 464, 466, 467, 477, 478, 496, 497, 513, 537, 556, 559, 563, 564, 565], "defin": [3, 11, 14, 45, 46, 86, 153, 157, 190, 191, 197, 199, 204, 205, 206, 211, 212, 213, 214, 215, 221, 222, 225, 226, 268, 269, 313, 314, 316, 317, 318, 325, 330, 333, 334, 335, 337, 364, 397, 430, 444, 456, 466, 471, 474, 477, 478, 496, 497, 500, 501, 506, 509, 513, 514, 535, 552, 553, 556, 559, 561, 562, 563, 565, 567], "queri": [3, 11, 13, 14, 45, 47, 148, 170, 197, 208, 221, 222, 420, 478, 479, 544, 556], "interfac": [3, 11, 14, 45, 46, 86, 113, 179, 218, 301, 325, 330, 338, 339, 459, 509, 514, 525, 543, 556, 560], "each": [3, 11, 14, 45, 46, 141, 148, 157, 162, 170, 171, 217, 221, 222, 235, 239, 242, 250, 254, 278, 282, 285, 292, 295, 304, 306, 307, 308, 345, 357, 359, 360, 361, 406, 437, 467, 472, 477, 478, 479, 497, 499, 500, 501, 506, 514, 519, 525, 528, 534, 542, 544, 551, 553, 557, 559, 561, 563, 564, 565, 566], "adapt": [3, 11, 14, 45, 46, 149, 471, 476, 478, 497, 525, 554], "should": [3, 11, 14, 45, 46, 55, 115, 116, 162, 183, 195, 197, 208, 221, 222, 225, 226, 235, 237, 239, 254, 259, 268, 269, 278, 280, 282, 295, 300, 304, 357, 363, 364, 397, 416, 439, 456, 467, 473, 474, 477, 478, 479, 497, 500, 502, 513, 514, 520, 529, 532, 534, 536, 537, 551, 553, 556, 559, 564, 565, 567], "implement": [3, 11, 14, 45, 46, 110, 143, 147, 153, 154, 162, 225, 226, 232, 235, 236, 237, 239, 268, 269, 275, 278, 279, 280, 282, 303, 356, 364, 374, 397, 404, 452, 456, 479, 496, 497, 513, 514, 525, 535, 553, 556, 559, 560, 563, 565, 567], "inherit": [3, 11, 14, 45, 46, 183, 184, 209, 210, 215, 221, 234, 254, 256, 264, 277, 295, 335, 337, 474, 477, 478, 497], "specif": [3, 11, 14, 42, 45, 46, 104, 116, 153, 171, 177, 178, 186, 217, 221, 222, 237, 238, 239, 240, 244, 246, 261, 280, 281, 282, 283, 287, 289, 319, 320, 322, 323, 324, 363, 397, 437, 439, 464, 471, 474, 477, 478, 495, 496, 499, 500, 506, 508, 512, 513, 514, 515, 516, 517, 521, 522, 524, 528, 534, 536, 542, 551, 553, 555, 559, 565, 567], "backend": [3, 11, 14, 15, 41, 42, 45, 46, 175, 186, 221, 222, 223, 224, 228, 229, 233, 237, 238, 240, 241, 242, 243, 244, 248, 251, 254, 260, 261, 266, 267, 271, 272, 274, 276, 280, 281, 283, 284, 285, 286, 287, 291, 293, 295, 311, 346, 364, 365, 366, 368, 407, 430, 444, 473, 479, 499, 502, 508, 509, 514, 515, 523, 542, 547, 548, 549, 555, 559, 564, 565, 567], "own": [3, 11, 14, 45, 46, 74, 162, 235, 254, 278, 295, 374, 474, 478, 496, 497, 509, 513, 536, 540, 551, 559, 561, 566], "mxnetadaptor": 11, "do": [11, 14, 153, 156, 183, 213, 221, 222, 236, 237, 279, 280, 296, 300, 303, 306, 336, 356, 359, 435, 466, 471, 478, 497, 502, 506, 509, 513, 514, 529, 532, 553, 558, 560, 562, 565], "inspect": [11, 14, 560, 563], "tensor": [11, 13, 14, 15, 16, 43, 44, 70, 105, 140, 148, 149, 150, 153, 157, 162, 163, 170, 171, 193, 194, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 216, 222, 254, 295, 298, 300, 333, 335, 345, 372, 406, 437, 439, 462, 466, 467, 473, 479, 496, 497, 499, 553, 556, 560, 563, 564, 565], "dict": [11, 13, 14, 44, 45, 116, 148, 149, 150, 153, 155, 156, 157, 162, 170, 171, 172, 177, 186, 190, 193, 194, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 225, 226, 236, 255, 261, 268, 269, 279, 298, 300, 305, 306, 307, 308, 310, 313, 316, 317, 318, 325, 328, 330, 333, 334, 335, 336, 337, 342, 345, 351, 354, 358, 359, 360, 361, 363, 364, 372, 397, 412, 415, 416, 428, 430, 433, 435, 437, 438, 456, 457, 459, 466, 467, 473, 478, 504, 513, 553, 555, 556, 562, 563, 565], "configur": [11, 13, 14, 45, 118, 149, 155, 170, 171, 177, 178, 217, 218, 221, 222, 225, 226, 228, 239, 242, 255, 260, 268, 269, 282, 285, 296, 300, 301, 312, 313, 314, 316, 325, 330, 334, 338, 339, 345, 363, 364, 374, 397, 406, 415, 428, 432, 437, 451, 456, 458, 459, 465, 466, 473, 474, 477, 478, 497, 499, 514, 521, 535, 542, 547, 548, 549, 551, 553, 556, 559, 560, 562, 564, 565, 568], "mxnetqueri": 11, "mxnet": [12, 13, 16, 222, 232, 236, 239, 242, 246, 254, 275, 279, 282, 285, 289, 295, 301, 310, 338, 363, 364, 369, 397, 472, 476, 477, 478, 495, 496, 503, 506, 509, 510, 514, 515, 516, 555, 565, 567], "init": [12, 17, 42, 174, 185, 194, 196, 497, 513, 565], "optyp": [13, 221, 222, 298, 478], "enum": 13, "type": [13, 16, 42, 43, 44, 45, 74, 96, 105, 116, 122, 132, 140, 148, 149, 155, 156, 157, 162, 170, 171, 172, 184, 186, 190, 191, 197, 198, 199, 204, 213, 214, 215, 217, 219, 221, 222, 235, 237, 239, 246, 254, 256, 261, 278, 280, 282, 289, 295, 300, 303, 304, 306, 310, 317, 324, 328, 333, 335, 337, 342, 348, 352, 354, 356, 357, 359, 363, 372, 374, 401, 402, 409, 413, 415, 416, 428, 432, 433, 435, 437, 439, 455, 466, 467, 477, 478, 497, 499, 502, 504, 506, 509, 514, 515, 535, 537, 542, 543, 547, 548, 556, 557, 559, 561, 564, 565, 566, 567], "isiter": 13, "obj": [13, 105, 194, 217, 236, 279, 296, 301, 312, 313, 314, 316, 325, 330, 334, 338, 364, 374, 397, 456, 459, 467], "bool": [13, 42, 43, 44, 141, 148, 149, 150, 153, 156, 162, 168, 170, 171, 199, 221, 222, 237, 239, 250, 254, 280, 282, 292, 295, 300, 304, 310, 333, 351, 357, 363, 412, 416, 430, 435, 437, 439, 444, 451, 462, 466, 467, 496, 497, 513, 545, 555, 564], "check": [13, 44, 67, 68, 105, 148, 149, 170, 171, 217, 228, 239, 282, 298, 334, 433, 466, 467, 476, 499, 502, 510, 518, 520, 522, 529, 532, 533, 537, 540, 543, 544, 560], "whether": [13, 43, 44, 105, 116, 148, 149, 150, 153, 156, 162, 170, 171, 199, 221, 222, 235, 237, 250, 254, 278, 280, 292, 295, 304, 306, 310, 333, 357, 359, 363, 435, 437, 439, 459, 462, 466, 467, 477, 497, 513, 556, 559, 562, 564], "object": [13, 42, 43, 44, 45, 74, 86, 105, 116, 132, 148, 149, 153, 155, 157, 160, 162, 168, 170, 177, 183, 193, 194, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 225, 226, 227, 237, 238, 239, 254, 255, 257, 268, 269, 270, 280, 281, 282, 295, 296, 301, 306, 314, 316, 319, 320, 322, 323, 324, 325, 330, 333, 334, 335, 336, 337, 338, 342, 355, 359, 363, 364, 372, 373, 391, 396, 397, 401, 415, 433, 455, 456, 459, 466, 467, 473, 474, 478, 484, 494, 496, 497, 505, 513, 514, 516, 552, 553, 555, 556, 564, 565, 566, 568], "i": [13, 43, 44, 45, 48, 49, 51, 54, 55, 60, 64, 70, 82, 85, 105, 132, 143, 148, 149, 150, 153, 156, 157, 160, 162, 164, 168, 170, 171, 176, 177, 179, 183, 186, 187, 193, 197, 198, 204, 209, 210, 211, 212, 213, 214, 216, 217, 221, 222, 225, 226, 227, 235, 236, 237, 238, 239, 240, 241, 244, 246, 250, 254, 255, 257, 261, 263, 264, 268, 269, 270, 278, 279, 280, 281, 282, 283, 284, 287, 289, 292, 295, 303, 306, 308, 310, 312, 317, 325, 330, 334, 335, 339, 346, 356, 359, 361, 363, 364, 374, 380, 381, 385, 397, 402, 407, 415, 416, 433, 435, 439, 451, 456, 462, 466, 467, 471, 472, 473, 474, 477, 478, 479, 480, 482, 486, 489, 492, 494, 495, 496, 497, 499, 500, 501, 502, 504, 505, 506, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 522, 523, 525, 527, 528, 529, 531, 532, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 547, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568], "iter": [13, 15, 105, 140, 148, 149, 153, 170, 171, 177, 198, 204, 211, 215, 221, 222, 225, 226, 230, 235, 239, 240, 257, 268, 269, 273, 278, 282, 283, 335, 337, 364, 397, 428, 432, 456, 459, 473, 474, 477, 494, 496, 497, 514, 553, 555, 556, 562, 563, 565, 567], "return": [13, 16, 44, 45, 54, 67, 68, 70, 74, 105, 116, 148, 149, 153, 155, 156, 157, 162, 168, 170, 171, 172, 177, 184, 186, 190, 191, 194, 197, 199, 200, 204, 207, 213, 214, 215, 217, 219, 225, 226, 239, 246, 250, 254, 255, 256, 261, 268, 269, 282, 289, 292, 295, 300, 303, 304, 306, 307, 308, 310, 316, 317, 324, 328, 333, 334, 335, 337, 342, 348, 352, 354, 356, 357, 359, 360, 361, 363, 364, 368, 372, 374, 391, 396, 397, 401, 409, 413, 415, 416, 428, 430, 432, 433, 435, 437, 444, 451, 455, 456, 459, 464, 466, 467, 473, 474, 478, 479, 496, 497, 502, 513, 516, 547, 548, 549, 551, 553, 556, 559, 562, 563, 565], "true": [13, 43, 44, 85, 113, 146, 148, 149, 150, 156, 162, 171, 177, 190, 221, 222, 235, 237, 239, 240, 253, 254, 255, 278, 280, 282, 283, 294, 295, 300, 304, 310, 328, 351, 357, 363, 374, 397, 412, 416, 430, 435, 437, 439, 444, 451, 459, 462, 466, 467, 478, 496, 497, 499, 502, 506, 513, 514, 517, 520, 521, 536, 537, 538, 539, 545, 547, 555, 556, 557, 559, 562, 563, 564, 565, 567], "els": [13, 148, 153, 171, 222, 235, 278, 374, 437, 464, 522, 559, 563], "fals": [13, 14, 15, 41, 42, 43, 44, 47, 48, 49, 71, 72, 89, 92, 99, 102, 103, 105, 113, 131, 136, 143, 146, 147, 148, 149, 150, 153, 154, 156, 161, 162, 168, 170, 171, 177, 184, 187, 221, 222, 227, 229, 236, 237, 239, 250, 254, 255, 256, 257, 263, 270, 272, 279, 280, 282, 292, 295, 306, 310, 359, 363, 374, 397, 416, 435, 437, 444, 459, 462, 466, 467, 477, 478, 496, 497, 506, 513, 514, 527, 531, 537, 545, 548, 549, 555, 556, 559, 562, 563, 564, 565, 567], "boolean": [13, 149], "ensure_list": 13, "x": [13, 55, 74, 149, 156, 198, 221, 222, 236, 254, 279, 295, 342, 401, 416, 435, 495, 499, 502, 515, 516, 542, 543, 547, 548, 550, 556, 557, 562, 563, 564, 566], "ensur": [13, 254, 295, 342, 401, 502, 556, 564], "list": [13, 42, 43, 44, 54, 105, 140, 148, 149, 153, 155, 156, 157, 166, 170, 177, 178, 191, 197, 198, 203, 208, 213, 217, 221, 222, 225, 226, 230, 237, 250, 254, 255, 268, 269, 273, 280, 292, 295, 299, 300, 303, 304, 306, 307, 308, 310, 317, 325, 330, 333, 336, 351, 356, 357, 359, 360, 361, 363, 364, 372, 380, 381, 385, 397, 412, 416, 430, 435, 444, 456, 457, 467, 473, 476, 477, 497, 504, 506, 510, 512, 514, 517, 522, 524, 527, 528, 531, 539, 542, 544, 545, 551, 553, 555, 556, 558, 562, 563, 565], "input": [13, 15, 42, 43, 44, 45, 54, 60, 64, 67, 68, 70, 71, 72, 74, 82, 83, 85, 86, 105, 109, 110, 116, 122, 141, 148, 149, 150, 153, 155, 165, 167, 168, 169, 170, 171, 175, 197, 198, 217, 221, 222, 225, 226, 237, 238, 239, 241, 250, 253, 254, 259, 268, 269, 280, 281, 282, 284, 292, 294, 295, 298, 299, 300, 363, 364, 368, 372, 397, 437, 439, 450, 455, 456, 462, 464, 466, 467, 474, 477, 478, 494, 495, 496, 497, 499, 500, 501, 502, 504, 506, 508, 513, 514, 515, 516, 517, 522, 553, 555, 556, 559, 562, 563, 564, 567], "check_mx_vers": 13, "version": [13, 54, 104, 149, 153, 165, 170, 197, 222, 299, 300, 355, 450, 471, 473, 477, 506, 510, 511, 514, 527, 529, 531, 532, 554, 560, 562, 565, 566], "str": [13, 42, 43, 44, 140, 149, 150, 155, 157, 162, 163, 166, 167, 168, 170, 171, 172, 184, 186, 194, 197, 221, 222, 237, 238, 239, 246, 250, 254, 256, 260, 261, 280, 281, 282, 289, 292, 295, 299, 300, 303, 304, 306, 308, 310, 317, 328, 351, 354, 356, 357, 359, 361, 363, 382, 390, 392, 395, 396, 412, 415, 416, 428, 430, 433, 437, 438, 439, 444, 455, 459, 462, 464, 467, 468, 496, 497, 513, 545, 555, 563, 564], "mx": 13, "__version__": [13, 160], "combine_cap": 13, "current": [13, 70, 104, 167, 171, 193, 194, 197, 200, 204, 207, 221, 222, 312, 319, 320, 322, 323, 324, 333, 335, 342, 346, 401, 407, 437, 467, 473, 474, 477, 479, 495, 502, 506, 514, 517, 521, 534, 542, 551, 553, 556, 559, 562, 565], "new": [13, 16, 44, 148, 149, 167, 177, 227, 239, 254, 255, 270, 282, 295, 334, 374, 430, 439, 444, 472, 476, 478, 502, 514, 515, 528, 534, 535, 536, 537, 543, 544, 547, 548, 553, 554, 556, 559, 560, 561, 564, 566, 567], "combin": [13, 170, 179, 221, 222, 225, 226, 250, 264, 268, 269, 292, 364, 397, 456, 467, 473, 477, 509, 514, 552, 554, 556, 558, 559, 564, 565], "capabl": [13, 47, 352, 413, 478, 479, 494, 506, 514, 515, 525, 536, 541, 553, 555, 556, 565, 567], "contain": [13, 67, 68, 70, 74, 139, 148, 149, 157, 162, 170, 171, 177, 183, 194, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 217, 221, 222, 225, 226, 237, 238, 239, 268, 269, 280, 281, 282, 296, 300, 301, 306, 307, 308, 312, 325, 328, 330, 333, 334, 335, 336, 337, 338, 359, 360, 361, 364, 397, 456, 459, 466, 495, 497, 500, 509, 513, 535, 542, 547, 548, 549, 553, 559, 563, 565, 566], "make_nc_model": 13, "target": [13, 42, 43, 102, 149, 150, 153, 156, 170, 197, 215, 217, 222, 334, 337, 342, 401, 435, 462, 497, 502, 514, 553, 563, 564, 565, 567], "sym_model": 13, "ctx": 13, "input_desc": 13, "convert": [13, 43, 48, 49, 50, 53, 54, 55, 56, 57, 66, 74, 86, 99, 100, 102, 103, 104, 105, 131, 136, 140, 142, 150, 155, 170, 197, 221, 222, 237, 250, 253, 254, 280, 292, 294, 295, 299, 306, 312, 334, 352, 359, 413, 416, 473, 478, 514, 515, 519, 556, 558, 559, 562, 564, 565], "symbol": [13, 43, 155, 168, 170, 303, 356, 364, 397, 473, 516], "model": [13, 15, 16, 29, 41, 42, 43, 44, 45, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 116, 118, 140, 141, 142, 148, 149, 150, 153, 154, 155, 156, 157, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 175, 177, 179, 183, 190, 194, 195, 197, 204, 205, 206, 209, 211, 212, 213, 215, 217, 221, 222, 225, 226, 233, 236, 237, 239, 254, 255, 258, 259, 268, 269, 276, 279, 280, 282, 295, 296, 298, 299, 300, 301, 302, 310, 311, 312, 313, 316, 319, 320, 322, 323, 324, 325, 330, 334, 335, 336, 337, 338, 339, 342, 345, 346, 348, 355, 363, 364, 374, 390, 395, 396, 397, 398, 401, 402, 406, 407, 409, 415, 416, 428, 432, 433, 435, 437, 438, 439, 451, 452, 455, 456, 462, 464, 466, 467, 469, 472, 473, 474, 476, 477, 479, 484, 494, 495, 496, 497, 499, 500, 501, 502, 503, 508, 509, 511, 513, 515, 517, 522, 524, 525, 528, 534, 536, 541, 543, 544, 545, 546, 551, 552, 554, 556, 560, 561, 563, 564, 565, 566, 567], "an": [13, 67, 68, 70, 105, 141, 143, 148, 149, 153, 157, 160, 162, 170, 171, 176, 187, 204, 221, 222, 230, 235, 239, 254, 258, 263, 273, 278, 282, 295, 302, 303, 307, 308, 316, 317, 339, 355, 356, 360, 361, 364, 391, 396, 397, 416, 439, 456, 467, 469, 471, 473, 474, 476, 477, 479, 495, 496, 497, 498, 499, 504, 512, 513, 514, 515, 517, 521, 522, 525, 534, 537, 538, 539, 542, 545, 551, 553, 554, 556, 559, 560, 561, 562, 563, 564, 565], "neural": [13, 157, 177, 183, 186, 199, 200, 201, 202, 213, 221, 222, 249, 250, 251, 254, 255, 258, 261, 264, 292, 293, 295, 297, 302, 309, 310, 312, 325, 330, 333, 336, 338, 339, 344, 350, 355, 362, 363, 364, 368, 375, 397, 404, 405, 411, 464, 469, 472, 477, 478, 479, 494, 495, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 511, 512, 515, 516, 518, 519, 522, 524, 525, 527, 529, 531, 532, 533, 545, 551, 552, 554, 556, 559, 560, 562, 563, 564, 565, 567, 568], "compressor": [13, 177, 183, 186, 201, 202, 213, 221, 222, 249, 250, 251, 254, 255, 258, 261, 264, 292, 293, 295, 297, 302, 309, 310, 312, 333, 336, 338, 339, 344, 350, 355, 362, 363, 364, 368, 375, 397, 405, 411, 464, 469, 472, 474, 477, 478, 479, 494, 495, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 511, 512, 515, 516, 517, 518, 522, 524, 525, 527, 529, 531, 532, 533, 536, 537, 538, 539, 541, 542, 549, 551, 552, 553, 554, 556, 559, 560, 562, 563, 564, 565, 566, 567, 568], "tupl": [13, 105, 148, 170, 191, 222, 225, 226, 250, 254, 268, 269, 292, 295, 300, 351, 364, 397, 412, 438, 452, 456, 466, 478, 497, 513, 514, 556, 564], "symnet": 13, "arg": [13, 54, 105, 149, 170, 181, 237, 238, 239, 280, 281, 282, 333, 342, 401, 416, 435, 438, 462, 463, 497, 502, 514, 523, 553, 556, 559, 562, 563, 564], "aux": 13, "data": [13, 42, 43, 44, 56, 105, 140, 148, 149, 157, 162, 167, 170, 171, 175, 197, 221, 222, 225, 226, 255, 257, 268, 269, 300, 302, 342, 352, 354, 355, 364, 390, 395, 397, 401, 413, 415, 428, 432, 437, 456, 459, 464, 467, 476, 477, 495, 496, 497, 502, 506, 507, 510, 513, 514, 515, 536, 537, 539, 542, 547, 548, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566], "descript": [13, 132, 416, 473, 478, 479, 496, 542, 546, 562], "ncmodel": 13, "fuse": [13, 58, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 91, 92, 93, 94, 96, 131, 136, 168, 170, 175, 473, 562, 563], "suppli": 13, "get_framework_nam": 13, "get": [13, 42, 43, 44, 45, 67, 68, 70, 104, 105, 148, 149, 156, 163, 167, 170, 177, 186, 187, 191, 193, 194, 195, 197, 200, 207, 214, 215, 216, 217, 219, 222, 230, 254, 255, 261, 263, 273, 295, 300, 333, 335, 337, 345, 352, 354, 363, 372, 397, 406, 413, 415, 430, 433, 435, 455, 459, 462, 464, 467, 478, 495, 505, 509, 510, 512, 514, 520, 537, 539, 547, 548, 554, 559, 562, 565, 566, 569], "name": [13, 43, 45, 54, 67, 68, 70, 104, 105, 110, 116, 140, 148, 149, 150, 155, 156, 157, 162, 163, 167, 168, 170, 172, 177, 178, 187, 190, 191, 193, 197, 199, 204, 207, 208, 213, 214, 215, 216, 217, 219, 221, 222, 237, 238, 239, 242, 246, 252, 254, 255, 259, 262, 263, 280, 281, 282, 285, 289, 295, 298, 299, 300, 305, 310, 328, 333, 335, 337, 352, 354, 358, 363, 368, 372, 374, 397, 413, 415, 428, 433, 435, 455, 457, 459, 464, 467, 472, 473, 479, 497, 499, 502, 504, 506, 511, 513, 514, 516, 520, 527, 531, 535, 536, 542, 553, 556, 560, 561, 563, 565, 567, 568], "context": [13, 439, 467, 555, 559], "prepare_model_data": 13, "nc_model": [13, 325, 330], "data_x": 13, "prepar": [13, 44, 170, 473, 476, 497, 502, 507, 536, 547, 548, 549, 553, 556], "dataload": [13, 15, 42, 44, 140, 141, 149, 154, 156, 157, 167, 170, 171, 177, 194, 195, 197, 213, 217, 225, 226, 237, 248, 258, 268, 269, 280, 291, 296, 302, 325, 330, 339, 355, 390, 395, 397, 456, 459, 473, 476, 477, 478, 499, 500, 501, 502, 507, 508, 514, 515, 536, 537, 552, 553, 556, 557, 558, 559, 562, 563, 564, 566, 567], "need": [13, 42, 105, 109, 150, 167, 171, 177, 197, 213, 222, 225, 226, 227, 235, 236, 239, 246, 254, 257, 259, 260, 268, 269, 270, 278, 279, 282, 289, 295, 300, 339, 345, 363, 364, 374, 397, 406, 456, 466, 467, 473, 477, 496, 497, 499, 500, 502, 509, 514, 517, 519, 520, 523, 527, 528, 529, 531, 532, 534, 535, 536, 537, 538, 539, 541, 545, 547, 553, 555, 556, 557, 558, 559, 560, 562, 564, 565, 567], "run": [13, 140, 148, 162, 171, 177, 204, 217, 221, 222, 225, 226, 236, 253, 255, 268, 269, 279, 294, 334, 335, 342, 364, 397, 401, 439, 456, 477, 494, 502, 505, 506, 514, 517, 519, 521, 522, 523, 525, 527, 528, 529, 531, 532, 534, 542, 543, 544, 545, 547, 548, 549, 554, 556, 559, 560, 561, 563, 565, 567], "loader": [13, 140, 225, 226, 268, 269, 364, 397, 428, 432, 456, 462, 496, 556], "dataloaderwrap": 13, "prepare_model": 13, "create_data_exampl": 13, "creat": [13, 16, 105, 160, 221, 222, 227, 237, 239, 257, 270, 280, 282, 306, 316, 317, 352, 359, 391, 396, 413, 415, 416, 459, 471, 474, 477, 497, 516, 527, 529, 531, 532, 535, 547, 548, 549, 553, 556, 561, 563, 565, 566], "exampl": [13, 44, 149, 153, 157, 162, 170, 171, 177, 178, 191, 197, 198, 213, 221, 222, 237, 238, 239, 250, 254, 280, 281, 282, 292, 295, 306, 307, 308, 310, 336, 359, 360, 361, 363, 364, 374, 397, 415, 416, 433, 437, 455, 456, 466, 467, 471, 476, 478, 479, 484, 508, 509, 517, 520, 521, 522, 525, 542, 545, 558, 560, 564, 565, 566, 569], "prepare_dataload": 13, "io": [13, 162, 540], "ndarray_to_devic": 13, "ndarrai": [13, 42, 43, 67, 68, 70, 254, 295, 457, 505, 564], "devic": [13, 45, 79, 89, 90, 91, 92, 93, 94, 97, 107, 131, 136, 147, 149, 150, 156, 161, 162, 164, 170, 171, 194, 197, 198, 213, 217, 221, 222, 435, 439, 444, 462, 478, 496, 500, 514, 515, 517, 520, 525, 534, 553, 555, 557, 559], "is_model_quant": 13, "query_quantizable_nod": 13, "node": [13, 42, 43, 44, 50, 54, 55, 56, 57, 60, 62, 64, 67, 68, 70, 74, 77, 80, 82, 83, 84, 98, 102, 103, 105, 110, 132, 140, 148, 197, 298, 300, 372, 396, 477, 499, 502, 537, 541, 544, 547, 548, 549, 557, 563, 565, 568], "given": [13, 16, 43, 67, 68, 70, 104, 105, 116, 148, 149, 163, 170, 254, 295, 306, 359, 397, 455, 474, 479, 553, 562, 564], "map": [13, 43, 105, 148, 162, 170, 222, 254, 295, 298, 300, 301, 305, 307, 308, 310, 325, 330, 335, 338, 358, 360, 361, 363, 497, 502, 513, 514, 527, 531, 539, 553, 556, 559], "quantize_sym_model": 13, "qconfig": [13, 150, 170, 466, 559, 563], "accord": [13, 122, 170, 177, 221, 222, 237, 238, 239, 254, 280, 281, 282, 295, 345, 404, 406, 459, 474, 477, 497, 502, 537, 542, 547, 548, 549, 553, 558, 562, 564, 565], "run_forward": 13, "b_filter": 13, "collector": [13, 157, 457], "pre_batch": 13, "post_batch": 13, "forward": [13, 149, 170, 217, 439, 478, 514, 536, 553, 555, 556, 559, 562, 563], "propag": [13, 100], "filter": [13, 237, 238, 239, 240, 241, 242, 244, 248, 280, 281, 282, 283, 284, 285, 287, 291, 302, 355, 467, 479, 497, 509, 553, 563], "which": [13, 42, 56, 83, 110, 149, 153, 156, 157, 162, 167, 171, 178, 179, 193, 197, 198, 200, 204, 205, 206, 208, 211, 212, 213, 215, 217, 221, 222, 237, 238, 239, 250, 255, 280, 281, 282, 292, 303, 308, 317, 319, 320, 322, 323, 324, 328, 333, 334, 335, 337, 342, 356, 361, 363, 368, 374, 397, 401, 433, 435, 455, 467, 471, 473, 474, 477, 478, 479, 495, 496, 497, 499, 500, 502, 505, 506, 509, 513, 514, 515, 516, 518, 522, 525, 528, 534, 535, 536, 539, 542, 547, 548, 549, 552, 553, 555, 556, 557, 558, 559, 560, 562, 563, 564, 565, 566, 567], "batch": [13, 149, 170, 227, 229, 230, 235, 236, 257, 270, 272, 273, 278, 279, 456, 496, 500, 501, 514, 552, 553, 556, 562, 564, 565, 568], "infer": [13, 43, 105, 140, 150, 170, 171, 197, 301, 338, 372, 374, 397, 439, 456, 477, 478, 495, 500, 501, 514, 515, 534, 551, 553, 554, 556, 559, 562, 563, 565], "collect": [13, 16, 43, 149, 170, 252, 254, 257, 259, 260, 262, 295, 308, 310, 361, 363, 457, 467, 478, 556, 563, 565], "inform": [13, 149, 157, 193, 194, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 222, 225, 226, 257, 259, 260, 268, 269, 333, 335, 336, 337, 339, 363, 467, 471, 472, 475, 476, 477, 478, 479, 480, 482, 486, 489, 492, 495, 500, 506, 514, 516, 529, 532, 535, 536, 539, 540, 542, 543, 547, 548, 553, 558, 559, 560, 562, 563, 567, 568, 569], "dure": [13, 160, 162, 199, 203, 215, 221, 222, 333, 337, 374, 467, 478, 499, 514, 516, 541, 551, 552, 553, 556, 562, 563, 567], "call": [13, 42, 162, 167, 172, 197, 205, 206, 211, 306, 335, 359, 439, 473, 474, 477, 496, 508, 523, 525, 535, 553, 556, 562, 563, 564], "prior": [13, 88, 565], "after": [13, 78, 148, 150, 170, 195, 199, 204, 206, 211, 221, 222, 237, 250, 254, 257, 280, 292, 295, 335, 402, 416, 462, 467, 474, 478, 497, 499, 500, 501, 504, 509, 513, 514, 527, 528, 531, 535, 539, 551, 552, 553, 556, 558, 559, 561, 562, 563, 564, 565], "count": [13, 474, 497, 559], "int": [13, 16, 42, 43, 44, 105, 140, 148, 149, 150, 154, 166, 170, 171, 195, 221, 222, 236, 237, 238, 250, 254, 279, 280, 281, 292, 295, 299, 300, 304, 306, 310, 317, 357, 359, 363, 382, 391, 396, 415, 416, 428, 432, 437, 444, 462, 467, 496, 497, 513, 514, 545, 555, 559, 564], "make_symbol_block": 13, "gluon": [13, 364, 397, 516], "symbolblock": 13, "make_modul": 13, "parse_tune_config": 13, "tune_cfg": [13, 148, 155, 170, 428, 477, 479, 565], "quantizable_nod": 13, "strategi": [13, 170, 211, 221, 222, 223, 239, 266, 282, 302, 355, 476, 477, 478, 479, 484, 495, 496, 502, 509, 514, 522, 534, 539, 554, 555, 556, 558, 559, 560, 566, 567], "config": [13, 44, 115, 116, 118, 122, 170, 177, 178, 179, 193, 194, 195, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 221, 225, 226, 237, 268, 269, 280, 319, 320, 322, 323, 324, 325, 330, 333, 334, 335, 336, 337, 352, 353, 355, 364, 391, 396, 413, 414, 415, 416, 420, 428, 438, 456, 459, 466, 467, 474, 476, 478, 479, 484, 494, 496, 499, 500, 501, 502, 504, 507, 509, 513, 514, 515, 516, 536, 537, 552, 553, 555, 556, 558, 559, 561, 563, 565], "tune": [13, 45, 149, 177, 178, 179, 221, 222, 225, 226, 237, 239, 268, 269, 280, 282, 301, 338, 340, 341, 342, 343, 345, 346, 347, 348, 351, 352, 353, 354, 364, 374, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 412, 413, 414, 415, 428, 456, 467, 477, 478, 495, 496, 497, 499, 502, 509, 511, 514, 515, 534, 538, 541, 543, 544, 551, 553, 554, 558, 560, 561, 563, 567], "from": [13, 43, 45, 61, 67, 68, 70, 105, 148, 149, 150, 153, 162, 163, 167, 170, 171, 177, 183, 184, 191, 193, 194, 200, 201, 202, 203, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 221, 222, 225, 226, 227, 230, 234, 237, 238, 239, 240, 241, 242, 244, 249, 250, 256, 257, 260, 268, 269, 270, 273, 277, 280, 281, 282, 283, 284, 285, 287, 292, 296, 298, 299, 300, 303, 306, 307, 308, 312, 317, 333, 334, 335, 337, 352, 354, 356, 359, 360, 361, 364, 372, 374, 397, 413, 415, 416, 420, 428, 430, 437, 444, 456, 459, 462, 466, 467, 471, 472, 473, 474, 477, 479, 494, 496, 497, 499, 500, 501, 502, 503, 504, 505, 507, 509, 512, 513, 515, 516, 517, 521, 522, 523, 525, 535, 537, 539, 540, 544, 547, 548, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566], "distribute_calib_tensor": 13, "calib_tensor": 13, "calib_cfg": 13, "tensor_to_nod": 13, "distribut": [13, 16, 143, 176, 221, 222, 227, 229, 230, 235, 236, 257, 270, 272, 273, 278, 279, 461, 476, 478, 496, 500, 510, 529, 532, 536, 539, 547, 554, 556, 559, 560, 562, 566, 568], "depend": [13, 225, 226, 255, 268, 269, 364, 397, 456, 472, 505, 506, 540, 555, 556, 565], "algorithm": [13, 44, 153, 156, 170, 178, 190, 218, 222, 303, 310, 318, 355, 356, 363, 433, 455, 459, 461, 474, 477, 478, 479, 500, 501, 506, 509, 512, 523, 528, 553, 556, 563, 567], "set": [13, 43, 51, 96, 105, 115, 148, 149, 162, 167, 170, 177, 186, 217, 219, 221, 222, 225, 226, 227, 237, 239, 242, 254, 255, 260, 261, 268, 269, 270, 280, 282, 285, 295, 306, 312, 325, 330, 334, 339, 359, 363, 364, 372, 396, 397, 416, 420, 455, 456, 464, 467, 471, 474, 478, 494, 496, 497, 500, 502, 504, 506, 508, 509, 510, 513, 514, 515, 517, 519, 521, 535, 536, 537, 538, 539, 540, 544, 547, 553, 555, 556, 559, 561, 562, 565, 567], "kl": [13, 16, 221, 222, 457, 461, 478, 479, 495, 506, 514, 565, 567], "minmax": [13, 16, 444, 478, 479, 495, 506, 556, 567], "calib_model": 13, "qsym_model": 13, "calib_data": [13, 161], "calibdata": 13, "threshold": [13, 173, 457, 461, 513], "amp_convert": 13, "amp_cfg": 13, "support": [13, 42, 43, 44, 97, 104, 149, 167, 175, 184, 186, 194, 200, 207, 211, 212, 221, 222, 225, 226, 236, 237, 239, 246, 250, 254, 256, 257, 258, 261, 268, 269, 279, 280, 282, 289, 292, 295, 302, 310, 312, 317, 333, 335, 339, 346, 352, 355, 363, 364, 368, 374, 397, 407, 413, 416, 456, 459, 461, 462, 467, 469, 476, 478, 512, 514, 517, 522, 525, 528, 534, 541, 542, 545, 554, 558, 561, 565, 566], "amp": [13, 149, 517, 524, 543, 559], "wrap": [13, 105, 116, 149, 179, 184, 256, 306, 359, 439, 473, 502, 529, 532], "dataiterload": 13, "data_it": [13, 197], "collectorbas": 13, "calibcollector": 13, "include_tensors_kl": 13, "include_tensors_minmax": 13, "num_bin": [13, 16, 457], "8001": [13, 457, 542, 547, 548, 549], "tensorcollector": 13, "include_nod": 13, "qtensor_to_tensor": 13, "build": [13, 42, 44, 115, 172, 173, 175, 176, 313, 316, 367, 369, 371, 372, 373, 477, 478, 479, 510, 516, 527, 529, 531, 532, 535, 554, 565], "up": [13, 100, 208, 254, 295, 334, 502, 503, 506, 509, 525, 529, 532, 534, 553, 554, 555, 556, 561, 564, 565, 567], "namecollector": 13, "cache_kl": 13, "cache_minmax": 13, "tensors_kl": 13, "tensors_minmax": 13, "onnxruntimeadaptor": 14, "rt": 14, "onnxrt_weightonlyadaptor": 14, "onnxrt_qlinearopsadaptor": [14, 477], "onnxrt_integeropsadaptor": 14, "onnxrt_qdqadaptor": 14, "onnxrtqueri": 14, "dynam": [14, 149, 162, 222, 227, 270, 300, 352, 413, 451, 477, 496, 500, 504, 509, 514, 517, 522, 523, 524, 525, 528, 534, 554, 565, 568], "static": [14, 41, 42, 47, 167, 175, 197, 222, 300, 352, 397, 413, 428, 430, 444, 451, 477, 478, 479, 499, 504, 509, 514, 517, 522, 523, 524, 525, 528, 534, 537, 545, 547, 548, 549, 557, 562, 565, 568], "format": [14, 18, 43, 54, 148, 150, 170, 221, 222, 237, 238, 239, 280, 281, 282, 300, 306, 312, 352, 359, 413, 416, 462, 476, 478, 479, 497, 502, 504, 513, 514, 515, 516, 517, 539, 542, 554, 556, 559, 560], "onnxrtaug": 15, "dump_op_typ": 15, "black_nod": 15, "white_nod": 15, "cpuexecutionprovid": [15, 41, 42, 44, 515, 556], "reduce_rang": [15, 41, 42, 221, 222, 479, 555], "kwarg": [15, 43, 105, 122, 123, 124, 125, 126, 127, 128, 129, 132, 133, 135, 137, 149, 163, 170, 171, 181, 195, 221, 222, 239, 252, 254, 259, 262, 282, 295, 351, 353, 363, 364, 365, 367, 369, 371, 372, 373, 397, 412, 414, 416, 435, 437, 438, 456, 462, 463, 466, 467, 496], "augment": 15, "dump": [15, 160, 170, 177, 300, 467, 472, 539, 556, 560, 563], "calib_registri": 16, "calib_method": 16, "calibratorbas": 16, "minmaxcalibr": 16, "percentilecalibr": 16, "2048": [16, 149, 156, 171, 435, 444, 467, 559], "percentil": [16, 44, 140, 171, 437, 495], "99": [16, 568], "999": [16, 567], "option": [16, 44, 105, 149, 150, 153, 162, 170, 171, 199, 221, 222, 225, 226, 237, 254, 268, 269, 280, 295, 299, 300, 306, 312, 333, 339, 352, 355, 359, 363, 364, 397, 413, 415, 416, 433, 437, 439, 456, 460, 462, 467, 478, 479, 496, 497, 506, 510, 514, 528, 542, 545, 547, 548, 549, 553, 556, 559, 561, 562, 564, 565, 567], "number": [16, 44, 67, 68, 105, 140, 149, 150, 170, 171, 178, 191, 195, 201, 202, 221, 222, 235, 238, 250, 254, 278, 281, 292, 295, 307, 308, 310, 333, 342, 360, 361, 363, 391, 396, 401, 416, 459, 467, 494, 496, 497, 502, 513, 542, 544, 553, 556, 559, 561, 562, 564, 565], "bin": [16, 162, 163, 467, 505], "histogram": [16, 457, 467, 536, 563], "valu": [16, 43, 44, 56, 67, 68, 70, 89, 90, 105, 143, 148, 149, 162, 170, 176, 177, 179, 191, 193, 197, 198, 208, 216, 217, 218, 219, 221, 222, 225, 226, 237, 240, 241, 250, 254, 255, 268, 269, 280, 283, 284, 292, 295, 306, 310, 334, 342, 345, 352, 359, 363, 364, 397, 401, 406, 413, 415, 416, 439, 456, 457, 459, 467, 473, 478, 479, 495, 497, 499, 506, 513, 514, 515, 520, 537, 539, 545, 551, 553, 555, 556, 559, 560, 562, 564, 565, 567], "default": [16, 44, 97, 148, 149, 150, 153, 162, 170, 171, 178, 179, 217, 219, 221, 222, 225, 226, 229, 237, 238, 239, 250, 254, 268, 269, 272, 280, 281, 282, 292, 295, 299, 300, 303, 312, 334, 354, 356, 363, 372, 415, 430, 433, 437, 439, 444, 451, 459, 462, 467, 473, 477, 496, 497, 506, 509, 510, 513, 514, 515, 522, 525, 527, 531, 539, 542, 547, 548, 549, 551, 553, 555, 556, 558, 559, 561, 562, 564, 565, 567], "float": [16, 43, 44, 140, 141, 149, 153, 157, 171, 199, 204, 214, 217, 221, 222, 237, 250, 280, 292, 304, 306, 307, 308, 335, 357, 359, 360, 361, 412, 416, 437, 444, 451, 464, 467, 497, 513, 555, 556, 562, 564], "A": [16, 55, 74, 75, 103, 116, 140, 141, 148, 149, 160, 170, 178, 183, 190, 191, 193, 194, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 221, 222, 239, 254, 257, 259, 260, 282, 295, 296, 303, 306, 307, 308, 310, 313, 316, 317, 318, 325, 328, 330, 333, 334, 335, 336, 337, 342, 356, 359, 360, 361, 363, 364, 368, 372, 401, 456, 467, 472, 478, 496, 497, 503, 506, 513, 514, 516, 527, 528, 531, 534, 542, 553, 554, 556, 559, 562, 564, 565, 567], "between": [16, 42, 143, 176, 210, 221, 222, 254, 295, 307, 310, 360, 363, 391, 396, 467, 473, 477, 478, 479, 495, 499, 500, 509, 513, 514, 525, 556, 559, 560, 561, 562, 564, 565], "0": [16, 43, 44, 54, 90, 105, 148, 149, 150, 153, 161, 162, 170, 171, 173, 175, 178, 179, 184, 191, 193, 195, 217, 221, 222, 227, 229, 236, 237, 240, 241, 244, 250, 254, 256, 257, 270, 272, 279, 280, 283, 284, 287, 292, 295, 300, 301, 310, 317, 325, 330, 338, 363, 374, 397, 402, 416, 437, 444, 462, 473, 496, 497, 500, 502, 504, 505, 506, 510, 511, 513, 514, 515, 520, 522, 527, 531, 537, 547, 548, 553, 555, 556, 557, 559, 560, 561, 562, 563, 564, 565, 567], "100": [16, 177, 178, 179, 191, 221, 222, 239, 282, 416, 428, 432, 494, 497, 502, 508, 514, 539, 555, 556, 564, 565, 567, 568], "klcalibr": 16, "128": [16, 44, 149, 154, 156, 170, 171, 237, 240, 241, 254, 280, 283, 284, 295, 435, 444, 497, 514, 556, 559, 564, 568], "num_quantized_bin": 16, "histogramcollector": 16, "collctor": 16, "smooth_distribut": 16, "p": [16, 153, 535, 536, 559], "ep": [16, 176, 515], "0001": [16, 191, 221, 222, 500, 514, 555], "smooth": [16, 140, 141, 148, 167, 175, 221, 222, 351, 553, 565], "discret": [16, 191, 565], "mai": [16, 148, 160, 162, 319, 320, 322, 323, 324, 416, 439, 471, 472, 478, 495, 499, 504, 505, 511, 515, 527, 531, 537, 540, 542, 554, 556, 559, 562, 565], "have": [16, 74, 83, 141, 148, 162, 194, 198, 200, 207, 235, 257, 278, 303, 306, 333, 335, 356, 359, 363, 397, 415, 416, 471, 472, 478, 479, 496, 497, 499, 502, 506, 511, 513, 514, 515, 517, 534, 537, 540, 542, 547, 548, 549, 551, 553, 556, 557, 559, 562, 565, 566], "been": [16, 149, 162, 194, 200, 207, 303, 333, 335, 356, 474, 479, 500, 514, 515, 534, 559, 562], "normal": [16, 33, 254, 295, 308, 361, 514, 543, 551, 559, 562, 564], "1": [16, 42, 43, 44, 55, 74, 89, 105, 109, 113, 146, 148, 149, 150, 153, 162, 165, 167, 170, 171, 173, 175, 176, 177, 184, 191, 193, 205, 206, 208, 221, 222, 227, 229, 236, 237, 238, 240, 241, 244, 245, 250, 254, 255, 256, 257, 270, 272, 279, 280, 281, 283, 284, 287, 288, 292, 295, 301, 306, 307, 308, 310, 325, 330, 335, 338, 339, 359, 360, 361, 363, 374, 397, 415, 416, 437, 444, 450, 459, 462, 467, 471, 473, 476, 477, 479, 495, 496, 497, 499, 500, 504, 506, 507, 510, 512, 513, 515, 518, 520, 536, 537, 544, 545, 547, 548, 549, 551, 552, 553, 555, 556, 557, 559, 560, 561, 562, 563, 564, 565, 566, 567], "replac": [16, 149, 163, 167, 170, 171, 308, 361, 502, 514, 525, 560], "zero": [16, 43, 44, 149, 150, 156, 171, 204, 217, 254, 295, 335, 435, 437, 467, 476, 539, 553, 556, 559, 562, 564, 565], "multipli": [16, 221, 222, 559], "scale": [16, 43, 44, 100, 141, 143, 149, 156, 165, 167, 169, 170, 171, 175, 176, 250, 254, 292, 295, 435, 437, 450, 556, 559, 561, 562, 564, 565], "factor": [16, 141, 153, 559, 562, 568], "take": [16, 199, 222, 225, 226, 230, 254, 259, 268, 269, 273, 295, 333, 342, 363, 364, 397, 401, 456, 471, 473, 474, 496, 499, 500, 506, 514, 534, 553, 556, 558, 559, 564, 565, 567], "correspond": [16, 157, 197, 208, 221, 222, 237, 280, 303, 306, 310, 356, 359, 363, 439, 459, 467, 477, 506, 514, 553, 555, 556, 561, 565], "amount": [16, 562], "off": [16, 67, 68, 70, 472, 559], "non": [16, 334, 467, 473, 499, 559, 565], "ref": [16, 148], "http": [16, 156, 157, 193, 201, 202, 211, 212, 213, 237, 239, 280, 282, 303, 304, 306, 307, 308, 333, 335, 336, 356, 357, 359, 360, 361, 363, 397, 435, 444, 473, 476, 497, 499, 507, 510, 511, 514, 523, 529, 532, 536, 538, 539, 540, 541, 542, 545, 547, 548, 549, 553, 560], "hanj": 16, "c": [16, 74, 239, 282, 467, 497, 505, 510, 559, 565], "illinoi": 16, "edu": [16, 239, 282, 497], "cs412": 16, "bk3": 16, "diverg": [16, 457, 461, 479, 495, 500, 565], "pdf": 16, "github": [16, 157, 201, 202, 213, 237, 280, 303, 304, 307, 308, 333, 336, 356, 357, 360, 361, 363, 397, 472, 476, 497, 499, 503, 510, 511, 514, 523, 529, 532, 536, 538, 539, 540, 541, 542, 545, 548, 549, 560], "com": [16, 157, 201, 202, 213, 237, 280, 303, 304, 307, 308, 333, 336, 356, 357, 360, 361, 363, 397, 471, 476, 497, 499, 507, 510, 511, 514, 517, 523, 536, 538, 539, 541, 542, 545, 548, 549, 560, 561, 568], "apach": [16, 511], "incub": 16, "blob": [16, 157, 201, 202, 303, 304, 307, 308, 333, 356, 357, 360, 361, 363, 397, 514, 523, 545, 548, 549], "master": [16, 201, 202, 213, 303, 304, 307, 308, 333, 336, 356, 357, 360, 361, 363, 397, 514, 565], "python": [16, 75, 148, 160, 162, 239, 258, 282, 302, 355, 416, 467, 469, 472, 473, 497, 499, 502, 505, 510, 514, 519, 525, 528, 534, 538, 539, 541, 542, 544, 547, 549, 553, 554, 564], "contrib": [16, 302, 355], "py": [16, 148, 157, 177, 204, 221, 222, 304, 306, 307, 308, 335, 357, 359, 360, 361, 416, 473, 477, 499, 502, 510, 514, 519, 521, 522, 523, 529, 532, 536, 538, 539, 541, 542, 544, 545, 547, 548, 549, 556, 560, 563], "microsoft": [16, 476, 477], "onnxruntim": [16, 221, 222, 233, 239, 246, 276, 282, 289, 311, 391, 477, 495, 496, 509, 510, 515, 537, 555], "main": [16, 156, 186, 191, 208, 213, 261, 336, 428, 432, 435, 438, 451, 473, 496, 499, 502, 514, 521, 523, 535, 544, 553, 556, 559], "tool": [16, 148, 299, 467, 476, 477, 514, 527, 531, 537, 540, 541, 542, 553, 554, 556], "arrai": [16, 43, 44, 148, 162, 254, 295, 306, 317, 359, 467, 564], "small": [16, 67, 68, 69, 70, 404, 474, 539, 540, 553, 559, 565, 568], "probabl": [16, 221, 222, 461, 559], "activationoper": 18, "onnx_quant": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40], "onnx_nod": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 87, 101, 111], "removableactivationoper": 18, "remov": [18, 43, 51, 57, 60, 74, 80, 83, 84, 85, 96, 98, 140, 195, 208, 308, 361, 471, 514, 527, 531, 540, 547, 548, 553, 563], "qactivationoper": 18, "children": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 34, 35, 36, 38, 39, 163], "initi": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 34, 35, 36, 38, 39, 42, 43, 44, 105, 116, 148, 153, 162, 184, 204, 225, 226, 234, 237, 256, 268, 269, 277, 280, 334, 335, 352, 397, 413, 456, 474, 479, 497, 513, 533, 553, 556, 562, 565], "qoper": [18, 34, 221, 222, 504, 537], "float16activationoper": 18, "float16": [18, 21, 43, 149, 150, 439, 462, 497, 559], "argmaxoper": 19, "qargmaxoper": 19, "attentionoper": 20, "qattentionoper": 20, "qattent": 20, "binari": [21, 148, 310, 363, 505, 513, 529, 532, 560], "binaryoper": 21, "binarydirect8bitoper": 21, "qbinaryoper": 21, "qbinari": 21, "float16binaryoper": 21, "concatoper": 22, "qconcatoper": 22, "qconcat": 22, "convoper": 23, "qconvoper": 23, "qlinearconv": 23, "direct8bit": 24, "direct8bitoper": 24, "qdirectoper": 24, "qdirect": 24, "embedlayernorm": 25, "embedlayernormalizationoper": 25, "qembedlayernormalizationoper": 25, "qembedlayernorm": 25, "gatheroper": 26, "qgatheroper": 26, "qgather": 26, "globalaveragepool": 27, "globalaveragepooloper": 27, "qglobalaveragepooloper": 27, "qlinearglobalaveragepool": 27, "gemmoper": 28, "qgemmoper": 28, "qgemm": 28, "lstmoper": 30, "matmuloper": 31, "qmatmuloper": 31, "qlinearmatmul": 31, "fusedmatmuloper": 31, "fusedmatmul": 31, "maxpooloper": 32, "qmaxpooloper": 32, "qmaxpool": 32, "batchnormalizationoper": 33, "batchnorm": [33, 62, 67, 121, 473, 562], "normalizationoper": 33, "op_registri": 34, "op_typ": [34, 140, 141, 148, 353, 414], "qop_registri": 34, "padoper": 35, "qpadoper": 35, "qpad": 35, "averagepool": 36, "pooloper": 36, "qpooloper": 36, "qlinearaveragepool": 36, "reduceoper": 37, "reduceminmaxoper": 37, "reducemin": 37, "reducemax": 37, "resizeoper": 38, "qresizeoper": 38, "qresiz": 38, "splitoper": 39, "qsplitoper": 39, "qsplit": 39, "unari": 40, "unaryoper": 40, "unarydirect8bitoper": 40, "q_config": [41, 170, 300, 477], "mode": [41, 42, 43, 45, 110, 162, 167, 246, 289, 306, 352, 359, 372, 413, 451, 464, 466, 467, 477, 478, 499, 509, 527, 531, 539, 540, 556, 558, 559, 565], "quantization_param": 41, "op_types_to_quant": 41, "fallback_list": 41, "fp32": [41, 42, 44, 79, 131, 136, 143, 170, 171, 176, 221, 222, 225, 226, 268, 269, 299, 300, 310, 345, 352, 363, 402, 406, 413, 428, 432, 437, 444, 459, 462, 466, 467, 472, 476, 477, 479, 499, 506, 507, 513, 514, 515, 524, 536, 537, 538, 539, 555, 556, 558, 559, 560, 561, 562, 563, 565, 567, 568], "add_qdq_pair_to_weight": [41, 221, 222, 556], "optypes_to_exclude_output_qu": [41, 221, 222, 556], "dedicated_qdq_pair": [41, 221, 222, 556], "smoothquant": [42, 167, 170, 175, 476, 512, 554, 559, 566], "onnxrt": [42, 43, 44, 237, 239, 246, 254, 280, 282, 289, 295, 310, 363, 390, 465, 477, 499, 515, 536, 556, 568], "get_quant_dequant_output": 42, "input_data": [42, 496], "output_data": 42, "loss": [42, 184, 221, 222, 256, 301, 310, 325, 330, 338, 363, 439, 456, 495, 499, 500, 501, 502, 503, 512, 513, 514, 515, 525, 537, 539, 552, 553, 554, 556, 559, 562, 565, 567], "output": [42, 43, 44, 51, 54, 59, 74, 98, 105, 110, 148, 149, 150, 170, 171, 181, 187, 197, 198, 203, 217, 219, 221, 222, 225, 226, 259, 263, 268, 269, 299, 300, 303, 333, 356, 363, 364, 372, 397, 433, 437, 439, 456, 462, 463, 467, 473, 477, 478, 500, 501, 502, 504, 506, 508, 513, 514, 516, 525, 534, 535, 537, 542, 543, 547, 548, 549, 552, 553, 555, 556, 559, 560, 562, 563, 564, 565, 567], "numpi": [42, 43, 67, 68, 70, 105, 148, 254, 295, 306, 317, 359, 505, 562, 564], "7": [42, 171, 177, 221, 222, 374, 437, 479, 494, 505, 506, 514, 553, 556, 560, 562, 565, 568], "bit": [42, 44, 149, 154, 170, 171, 221, 222, 415, 437, 479, 495, 501, 515, 554, 556, 559, 562], "execut": [42, 43, 54, 156, 162, 177, 204, 205, 206, 221, 222, 335, 339, 341, 396, 397, 398, 400, 435, 456, 459, 466, 467, 499, 500, 501, 514, 515, 519, 520, 527, 528, 531, 534, 535, 536, 537, 541, 544, 552, 553, 556, 559, 561, 565, 568], "provid": [42, 43, 44, 102, 105, 110, 149, 179, 197, 225, 226, 254, 268, 269, 295, 301, 306, 325, 330, 338, 339, 359, 364, 397, 456, 460, 462, 474, 476, 477, 478, 479, 494, 496, 499, 501, 502, 503, 509, 510, 512, 513, 514, 515, 516, 517, 521, 525, 528, 534, 535, 536, 542, 543, 553, 555, 556, 559, 562, 563, 565, 566, 567, 568], "make_sub_graph": 42, "opset": [42, 102, 104, 105, 222, 299, 300, 504], "ir_vers": 42, "thi": [42, 45, 86, 110, 132, 139, 143, 147, 149, 153, 157, 160, 162, 170, 171, 176, 179, 183, 187, 190, 195, 197, 199, 201, 202, 203, 204, 208, 209, 210, 211, 213, 214, 215, 221, 222, 225, 226, 236, 237, 238, 239, 240, 241, 242, 244, 254, 257, 263, 264, 268, 269, 279, 280, 281, 282, 283, 284, 285, 287, 295, 303, 306, 307, 308, 310, 319, 320, 322, 323, 324, 325, 330, 333, 335, 337, 338, 339, 342, 345, 356, 359, 360, 361, 363, 364, 374, 397, 401, 406, 415, 416, 430, 439, 444, 456, 466, 467, 471, 472, 473, 474, 477, 478, 479, 495, 496, 497, 500, 501, 502, 504, 505, 506, 509, 511, 512, 513, 514, 515, 516, 517, 519, 520, 522, 523, 525, 527, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 547, 548, 549, 553, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566], "quant_dequant_data": 42, "qtype": [42, 43, 477], "3": [42, 44, 148, 149, 150, 162, 206, 222, 239, 254, 282, 295, 306, 359, 416, 467, 473, 474, 476, 495, 496, 497, 500, 502, 504, 506, 507, 510, 513, 514, 515, 517, 521, 525, 527, 531, 536, 541, 542, 544, 545, 547, 551, 553, 555, 556, 559, 560, 561, 562, 564, 565, 568], "scheme": [42, 43, 44, 149, 154, 165, 170, 171, 437, 450, 477, 478, 479, 496, 506, 525, 559, 565, 567], "sym": [42, 43, 44, 149, 150, 171, 437, 478, 479, 506, 556, 559, 567], "dequant": [42, 43, 44, 51, 88, 91, 92, 93, 94, 96, 149, 157, 170, 171, 437, 467, 473, 478, 562, 563], "asym": [42, 43, 44, 149, 154, 165, 170, 171, 437, 450, 479, 506, 559, 567], "ortsmoothqu": 42, "fake": [42, 44, 113, 165, 167, 171, 175, 415, 437, 450, 514, 556, 559, 562], "channel": [42, 43, 44, 143, 150, 167, 171, 175, 176, 195, 198, 203, 221, 222, 250, 254, 292, 295, 333, 437, 462, 476, 477, 479, 509, 510, 517, 519, 524, 539, 553, 559, 564, 568], "For": [42, 44, 149, 170, 171, 175, 197, 198, 201, 202, 213, 222, 239, 254, 282, 295, 307, 308, 310, 333, 336, 360, 361, 363, 364, 397, 437, 471, 473, 475, 477, 479, 500, 501, 502, 504, 506, 509, 517, 519, 520, 522, 525, 536, 537, 542, 553, 558, 559, 562, 563, 565, 567, 568], "more": [42, 148, 149, 167, 175, 201, 202, 254, 295, 333, 439, 474, 475, 476, 478, 495, 497, 500, 502, 504, 507, 509, 510, 512, 514, 515, 517, 525, 529, 532, 537, 542, 551, 552, 553, 558, 559, 562, 565, 566, 568], "detail": [42, 153, 167, 175, 178, 197, 254, 295, 467, 468, 471, 476, 478, 479, 495, 500, 506, 507, 508, 512, 513, 514, 515, 517, 525, 534, 542, 543, 553, 559, 560, 561, 562, 563, 565, 566], "pleas": [42, 149, 156, 157, 167, 175, 193, 201, 202, 203, 211, 212, 213, 221, 222, 237, 238, 239, 242, 280, 281, 282, 285, 333, 335, 336, 363, 397, 416, 435, 473, 474, 475, 476, 477, 494, 495, 497, 501, 502, 504, 510, 512, 513, 515, 517, 518, 522, 525, 541, 542, 543, 553, 556, 558, 559, 560, 561, 562, 565, 566], "refer": [42, 149, 156, 157, 167, 175, 193, 201, 202, 203, 211, 212, 213, 217, 221, 222, 237, 280, 303, 304, 310, 333, 335, 336, 356, 357, 363, 397, 416, 435, 473, 477, 478, 494, 496, 497, 499, 501, 502, 504, 508, 510, 511, 513, 514, 515, 517, 522, 525, 536, 537, 539, 541, 542, 543, 551, 555, 557, 560, 564, 565], "accur": [42, 156, 167, 175, 212, 435, 444, 553, 559, 562], "effici": [42, 167, 175, 474, 476, 495, 496, 500, 517, 542, 552, 553, 554, 559, 562, 565], "post": [42, 97, 98, 156, 167, 175, 211, 222, 225, 226, 268, 269, 397, 435, 444, 471, 476, 477, 478, 499, 501, 502, 504, 509, 510, 517, 523, 534, 544, 553, 554, 557, 559, 562, 563, 565], "train": [42, 57, 80, 149, 156, 167, 175, 183, 205, 206, 209, 211, 212, 221, 222, 225, 226, 237, 239, 254, 264, 268, 269, 280, 282, 295, 296, 312, 335, 355, 397, 435, 444, 459, 474, 476, 477, 478, 484, 497, 499, 500, 501, 504, 509, 515, 517, 523, 534, 539, 547, 552, 554, 557, 559, 561, 562, 565, 567], "larg": [42, 43, 167, 175, 212, 476, 496, 500, 512, 514, 554, 557, 559, 562, 568], "languag": [42, 167, 175, 212, 303, 356, 471, 476, 504, 512, 538, 554, 557, 559, 562], "2": [42, 43, 44, 54, 74, 105, 109, 149, 150, 162, 167, 171, 173, 175, 177, 199, 205, 206, 221, 222, 238, 255, 281, 306, 308, 310, 335, 342, 359, 361, 363, 374, 401, 416, 437, 467, 473, 477, 495, 496, 497, 499, 500, 506, 509, 510, 511, 512, 513, 515, 538, 544, 545, 547, 548, 549, 551, 553, 554, 556, 557, 559, 560, 561, 562, 564, 565, 566], "spiq": [42, 167, 175, 562], "free": [42, 167, 175, 211, 225, 226, 268, 269, 397, 471, 523, 528, 536, 544, 551, 561, 562], "per": [42, 43, 44, 167, 171, 175, 177, 221, 222, 255, 437, 439, 461, 477, 479, 496, 542, 553, 558, 559, 568], "we": [42, 43, 67, 68, 70, 74, 86, 143, 150, 162, 167, 175, 176, 177, 197, 201, 208, 221, 222, 236, 255, 257, 279, 303, 306, 356, 359, 404, 471, 473, 477, 478, 479, 496, 499, 502, 504, 506, 512, 513, 514, 521, 522, 525, 529, 532, 534, 535, 537, 540, 547, 548, 549, 551, 552, 553, 555, 556, 557, 559, 560, 561, 562, 563, 565, 566], "onli": [42, 44, 54, 63, 70, 86, 109, 115, 143, 162, 167, 169, 171, 175, 176, 177, 186, 191, 194, 200, 207, 221, 222, 237, 255, 257, 261, 280, 300, 312, 333, 335, 346, 397, 407, 415, 416, 439, 444, 467, 476, 477, 478, 479, 494, 495, 496, 499, 500, 502, 505, 506, 512, 514, 515, 522, 535, 553, 554, 555, 556, 557, 562, 563, 565, 566, 567], "inplac": [42, 167, 451], "mean": [42, 44, 149, 167, 171, 179, 199, 208, 221, 222, 250, 254, 292, 295, 308, 310, 333, 345, 361, 363, 406, 437, 473, 478, 479, 496, 499, 502, 506, 513, 514, 520, 539, 553, 556, 557, 559, 562, 564, 565, 567, 568], "weight": [42, 43, 44, 60, 61, 122, 140, 141, 143, 148, 149, 150, 153, 154, 157, 167, 169, 170, 171, 176, 193, 194, 198, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 214, 216, 221, 222, 300, 333, 335, 352, 363, 397, 404, 413, 415, 437, 439, 444, 467, 468, 476, 477, 478, 479, 495, 499, 501, 506, 508, 512, 514, 536, 547, 551, 553, 554, 555, 556, 557, 562, 563, 565, 566, 567], "chang": [42, 96, 143, 149, 150, 167, 176, 205, 206, 208, 209, 211, 212, 215, 221, 222, 335, 337, 404, 467, 472, 478, 496, 502, 505, 511, 514, 517, 527, 528, 531, 534, 540, 553, 563, 564, 565], "you": [42, 162, 167, 221, 222, 235, 237, 278, 280, 335, 363, 397, 439, 472, 473, 478, 496, 497, 499, 502, 510, 511, 513, 515, 517, 519, 520, 522, 527, 531, 534, 535, 536, 537, 538, 539, 540, 542, 553, 556, 559, 560, 561, 562, 563, 566], "can": [42, 43, 44, 143, 153, 157, 162, 167, 176, 190, 197, 198, 199, 204, 212, 213, 215, 221, 222, 225, 226, 236, 239, 254, 255, 257, 268, 269, 279, 282, 295, 306, 308, 310, 333, 335, 337, 359, 361, 363, 364, 374, 397, 439, 456, 467, 473, 474, 476, 477, 478, 479, 494, 496, 497, 499, 500, 501, 502, 504, 506, 509, 510, 512, 513, 514, 515, 516, 517, 518, 519, 521, 522, 523, 525, 527, 528, 529, 531, 532, 534, 535, 537, 539, 540, 541, 542, 544, 551, 552, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568], "recov": [42, 167, 466, 467, 477, 501], "helper": [43, 45, 110, 116, 148, 170, 237, 238, 239, 253, 280, 281, 282, 294, 298, 299, 300, 372, 465], "get_node_original_nam": 43, "origin": [43, 44, 140, 148, 149, 163, 167, 170, 197, 209, 217, 222, 237, 254, 255, 280, 295, 319, 320, 322, 323, 324, 334, 335, 354, 402, 415, 451, 462, 467, 472, 497, 522, 553, 556, 564, 565, 567], "simple_progress_bar": 43, "total": [43, 204, 254, 295, 310, 335, 363, 497, 499, 553, 559, 564, 568], "progress": [43, 192, 194, 207, 239, 282, 528, 534, 536, 553, 556], "bar": [43, 239, 282, 534, 554], "case": [43, 70, 74, 153, 162, 171, 177, 222, 236, 253, 254, 255, 279, 294, 295, 301, 325, 330, 338, 374, 479, 496, 500, 501, 502, 506, 508, 513, 518, 522, 534, 535, 536, 539, 545, 548, 549, 551, 553, 554, 556, 559, 560, 562, 564, 566, 567, 568], "where": [43, 153, 162, 221, 222, 306, 310, 359, 363, 415, 467, 479, 495, 499, 500, 527, 531, 535, 562, 563], "tqdm": [43, 514], "t": [43, 67, 68, 70, 143, 153, 162, 176, 199, 221, 222, 254, 257, 295, 308, 361, 473, 477, 499, 500, 502, 514, 515, 535, 540, 553, 556, 559, 565, 567], "dtype_to_nam": 43, "dtype_map": 43, "dtype": [43, 44, 102, 105, 150, 221, 222, 240, 241, 250, 254, 283, 284, 292, 295, 437, 439, 462, 478, 479, 497, 499, 504, 506, 517, 539, 555, 556, 559, 562, 563, 564, 567], "its": [43, 60, 96, 148, 157, 197, 206, 209, 211, 217, 222, 233, 239, 254, 276, 282, 295, 298, 304, 305, 335, 342, 357, 358, 401, 471, 497, 500, 511, 513, 515, 525, 527, 531, 534, 535, 553, 559, 561, 564, 565], "string": [43, 45, 116, 148, 149, 156, 160, 162, 177, 184, 186, 190, 191, 197, 199, 204, 213, 214, 215, 217, 218, 221, 222, 239, 256, 261, 282, 296, 301, 303, 306, 312, 313, 314, 316, 317, 325, 330, 333, 334, 335, 336, 337, 338, 356, 359, 368, 372, 433, 435, 459, 464, 467, 513, 564], "represent": [43, 160, 471, 473, 495, 501, 553, 556], "quanttyp": [43, 415], "repres": [43, 199, 203, 204, 213, 214, 217, 239, 244, 282, 287, 306, 308, 310, 359, 361, 363, 471, 479, 495, 497, 504, 542, 553, 556, 557, 565], "make_quant_nod": 43, "make": [43, 105, 143, 176, 190, 199, 204, 213, 215, 235, 278, 333, 335, 337, 467, 471, 477, 478, 494, 496, 506, 513, 514, 522, 527, 531, 534, 536, 553, 556, 557, 558, 559, 561, 562, 565], "quantizelinear": 43, "make_dquant_nod": 43, "axi": [43, 222], "dequantizelinear": 43, "is_b_transpos": 43, "inuput": 43, "b": [43, 74, 149, 153, 237, 280, 467, 472, 495, 497, 513, 553, 559, 562, 565], "transpos": [43, 73, 150, 203, 250, 254, 295, 299, 333, 559, 564], "split_shared_bia": 43, "share": [43, 44, 82, 98, 109, 141, 149, 171, 437, 505, 506, 559, 562, 565], "float_to_float16": 43, "float_to_bfloat16": 43, "bfloat16": [43, 439, 515, 517, 525, 558], "cast_tensor": 43, "is_large_model": 43, "tensorproto": [43, 105], "raw": [43, 177, 238, 242, 245, 281, 285, 288, 345, 406, 513, 538, 565], "remove_init_from_model_input": 43, "collate_pr": 43, "result": [43, 148, 157, 170, 250, 254, 292, 295, 303, 306, 307, 308, 310, 356, 359, 360, 361, 363, 377, 397, 404, 456, 466, 467, 471, 474, 476, 496, 499, 500, 502, 509, 511, 513, 514, 522, 523, 534, 535, 538, 542, 543, 544, 545, 551, 553, 554, 556, 559, 561, 562, 563, 564, 565, 566, 568], "quantize_data_with_scale_zero": 43, "zero_point": [43, 44], "point": [43, 44, 149, 171, 250, 292, 307, 308, 317, 342, 360, 361, 401, 437, 467, 513, 534, 539, 540, 556, 559, 562, 564, 565], "To": [43, 306, 359, 374, 472, 478, 479, 497, 499, 502, 515, 518, 521, 527, 529, 531, 532, 536, 540, 553, 555, 558, 559, 560, 562, 565, 567], "pack": [43, 61], "comput": [43, 44, 105, 149, 153, 157, 170, 303, 304, 307, 308, 310, 356, 357, 360, 361, 363, 439, 456, 467, 495, 496, 501, 504, 513, 514, 515, 517, 528, 537, 553, 554, 556, 559, 562, 565], "linear": [43, 149, 150, 156, 165, 169, 170, 171, 175, 195, 197, 198, 203, 208, 217, 221, 222, 333, 435, 437, 450, 473, 500, 504, 514, 553, 559, 562, 565], "transform": [43, 50, 143, 145, 146, 147, 149, 156, 166, 169, 211, 237, 238, 239, 240, 241, 242, 244, 246, 248, 280, 281, 282, 283, 284, 285, 287, 289, 291, 302, 355, 435, 444, 451, 473, 474, 476, 495, 497, 500, 501, 502, 503, 507, 512, 514, 517, 522, 523, 524, 525, 537, 545, 548, 549, 553, 554, 558, 559, 562, 563, 565, 567, 568], "when": [43, 54, 64, 70, 148, 160, 162, 179, 198, 204, 209, 217, 221, 222, 237, 238, 246, 254, 280, 281, 289, 295, 304, 334, 335, 357, 397, 439, 456, 471, 474, 478, 496, 497, 514, 525, 527, 528, 531, 535, 536, 539, 540, 541, 543, 547, 553, 556, 559, 562, 564, 565], "uint8": [43, 171, 250, 292, 306, 354, 359, 415, 437, 477, 497, 506, 555, 556, 564, 567], "rmin": [43, 556], "rmax": [43, 556], "m": [43, 157, 171, 201, 202, 221, 222, 333, 437, 472, 500, 510, 517, 519, 522, 525, 529, 532, 542, 553, 568], "max": [43, 104, 143, 149, 171, 176, 179, 191, 221, 222, 254, 295, 307, 308, 342, 360, 361, 401, 437, 467, 476, 499, 510, 514, 537, 539, 553, 556, 559, 562, 564, 565], "ab": [43, 156, 171, 193, 211, 212, 335, 435, 437, 444, 553, 556, 562], "np": [43, 254, 295, 342, 401, 502, 544, 562, 564, 565], "calculate_scale_zp": 43, "quantize_rang": 43, "calcul": [43, 60, 170, 193, 201, 217, 222, 240, 241, 283, 284, 307, 308, 333, 335, 345, 360, 361, 406, 457, 467, 495, 497, 513, 514, 525, 537, 551, 553, 556, 559, 561, 562, 565, 567], "quantize_data": 43, "add": [43, 53, 64, 109, 119, 148, 186, 217, 221, 222, 237, 239, 261, 280, 282, 334, 352, 413, 467, 472, 473, 479, 496, 497, 502, 504, 506, 513, 514, 529, 532, 536, 537, 544, 547, 548, 561, 562, 563, 565, 566], "necessari": [43, 213, 471, 474, 478, 516, 535, 553, 561, 565], "intermedi": [43, 157, 184, 221, 222, 256, 473, 509, 556], "full": [43, 149, 150, 237, 238, 239, 280, 281, 282, 462, 467, 476, 495, 497, 499, 505, 511, 535, 540, 553, 559, 560], "equat": [43, 308, 310, 361, 363, 556, 562], "r": [43, 143, 176, 499, 510, 535, 536, 538, 539, 541, 542, 556, 568], "": [43, 44, 105, 143, 148, 162, 176, 179, 197, 198, 199, 203, 204, 205, 206, 209, 211, 212, 217, 218, 219, 221, 222, 236, 239, 253, 254, 255, 257, 259, 279, 282, 294, 295, 308, 333, 335, 361, 363, 364, 368, 397, 433, 439, 464, 467, 471, 472, 474, 478, 479, 499, 500, 502, 504, 506, 509, 514, 515, 522, 525, 527, 531, 534, 537, 539, 542, 552, 553, 554, 555, 556, 559, 560, 561, 562, 565, 566, 567, 568], "q": [43, 44, 107, 109, 131, 559, 562], "z": [43, 495, 500, 562], "real": [43, 240, 257, 283, 478, 495, 502, 536, 543, 554, 556], "quantize_data_per_channel": 43, "dequantize_data_with_scale_zero": 43, "tensor_valu": 43, "scale_valu": 43, "zo_valu": 43, "dequantize_data": 43, "valueinfo": 43, "tensor_nam": [43, 148, 162, 163], "new_dtyp": 43, "cast": [43, 51, 558, 564], "info": [43, 170, 171, 181, 201, 202, 217, 252, 257, 262, 333, 368, 462, 463, 467, 473, 499, 516, 544, 549], "quantizedvalu": 43, "new_quantized_nam": 43, "scale_nam": 43, "zero_point_nam": 43, "quantized_value_typ": 43, "quint8": 43, "linearli": 43, "quantizediniti": 43, "quantized_data": 43, "quantizationmod": 43, "quantizedvaluetyp": 43, "quantformat": 43, "quantize_nparrai": 43, "arr": [43, 467], "low": [43, 149, 150, 225, 226, 240, 241, 268, 269, 283, 284, 301, 311, 338, 364, 477, 478, 494, 495, 497, 502, 514, 515, 539, 554, 556, 559, 562, 565], "high": [43, 240, 241, 283, 284, 497, 499, 510, 539, 554, 565], "attribute_to_kwarg": 43, "attribut": [43, 83, 104, 105, 148, 170, 197, 208, 218, 219, 222, 439, 467, 477, 496, 506, 508, 514, 555, 567], "make_nod": 43, "find_by_nam": 43, "item_list": 43, "find": [43, 67, 68, 70, 105, 148, 310, 317, 342, 363, 401, 467, 477, 499, 512, 520, 527, 531, 534, 535, 537, 539, 553, 559, 561, 562, 563, 565], "item": [43, 217, 219, 221, 222, 253, 294, 334, 352, 413, 433, 495, 502, 553, 562, 565], "trt_env_setup": 43, "environ": [43, 177, 255, 471, 494, 527, 531, 534, 542, 545, 547, 548, 549, 565], "variabl": [43, 160, 177, 214, 221, 222, 239, 255, 282, 342, 401, 415, 510, 553, 565], "tensorrt": [43, 495, 515, 556], "to_numpi": 43, "infer_shap": 43, "in_mp": 43, "int_max": 43, "31": [43, 568], "auto_merg": 43, "guess_output_rank": 43, "verbos": [43, 300, 342, 401], "base_dir": 43, "shape": [43, 44, 105, 148, 149, 199, 240, 241, 250, 254, 283, 284, 292, 295, 306, 359, 476, 497, 506, 507, 514, 536, 537, 559, 562, 564], "weightonli": 44, "get_blob_s": 44, "group_siz": [44, 149, 154, 165, 170, 171, 415, 437, 450, 559], "has_zp": 44, "blob_siz": 44, "how": [44, 149, 162, 171, 183, 193, 199, 205, 206, 211, 212, 221, 222, 254, 295, 296, 333, 437, 472, 473, 475, 477, 496, 497, 500, 501, 502, 508, 513, 514, 528, 529, 532, 533, 534, 536, 547, 548, 549, 553, 554, 556, 562, 564, 565, 566, 567], "mani": [44, 149, 171, 363, 397, 437, 496, 510, 559, 565, 567], "element": [44, 149, 171, 201, 202, 217, 235, 278, 306, 333, 359, 437, 467, 497, 509, 513, 553, 559, 562], "one": [44, 109, 110, 115, 149, 150, 162, 170, 171, 177, 199, 203, 208, 211, 212, 213, 215, 254, 264, 295, 303, 306, 310, 312, 333, 336, 337, 356, 359, 363, 437, 439, 474, 477, 495, 500, 501, 502, 506, 509, 510, 513, 514, 515, 517, 518, 522, 523, 525, 527, 528, 531, 534, 535, 536, 539, 540, 541, 542, 544, 551, 552, 553, 555, 556, 557, 559, 560, 562, 564, 565], "zp": [44, 149, 171, 437, 562], "make_matmul_weight_only_nod": 44, "weight_shap": 44, "num_bit": [44, 113, 149, 165, 170, 171, 437, 450, 562], "k_block": 44, "q_weight": 44, "accuracy_level": 44, "matmulfpq4": 44, "accuraci": [44, 177, 217, 221, 222, 225, 226, 268, 269, 296, 301, 310, 325, 330, 338, 363, 364, 374, 397, 402, 416, 439, 456, 464, 473, 476, 478, 479, 495, 496, 497, 499, 501, 502, 503, 504, 512, 513, 514, 525, 534, 536, 543, 544, 547, 548, 551, 552, 553, 554, 555, 559, 560, 561, 562, 563, 566, 567, 568], "level": [44, 181, 197, 402, 416, 463, 471, 544, 562, 565], "unset": 44, "jbla": 44, "kernel": [44, 175, 221, 222, 477, 478, 565], "fp16": [44, 222, 352, 413, 556], "4": [44, 54, 149, 150, 154, 165, 170, 171, 177, 199, 208, 221, 222, 246, 249, 250, 254, 289, 292, 295, 303, 304, 306, 356, 357, 359, 415, 416, 437, 444, 450, 471, 477, 479, 494, 502, 503, 506, 509, 510, 513, 514, 522, 542, 544, 548, 553, 556, 559, 562, 564, 565, 568], "matmulnbit": 44, "new_init": 44, "matmul_weight_only_nod": 44, "quant_tensor": 44, "32": [44, 149, 154, 171, 195, 415, 437, 444, 502, 508, 559, 568], "ratio": [44, 143, 176, 199, 204, 217, 221, 222, 250, 254, 292, 295, 335, 497, 514, 537, 553, 564, 568], "group": [44, 149, 150, 153, 171, 214, 320, 437, 476, 509, 553, 559, 563, 564, 565, 568], "clip": [44, 171, 437, 559, 562], "qdq_tensor": 44, "quant": [44, 148, 149, 170, 171, 221, 222, 352, 413, 430, 437, 473, 512, 514, 556], "pad_tensor": 44, "rowi": 44, "so": [44, 105, 254, 295, 415, 473, 477, 499, 505, 509, 515, 520, 522, 538, 539, 540, 556, 558, 559, 562, 563, 564, 566], "divis": 44, "pade": 44, "rtn_quantiz": [44, 171, 437], "weight_config": [44, 149, 150, 154, 156, 169, 171, 435, 437], "round": [44, 143, 149, 171, 176, 437, 444, 476, 554, 556, 559, 562], "nearst": [44, 171, 437], "method": [44, 141, 143, 149, 160, 162, 170, 171, 181, 190, 214, 221, 222, 230, 235, 236, 237, 239, 246, 254, 257, 273, 278, 279, 280, 282, 289, 295, 316, 317, 318, 352, 413, 415, 437, 439, 459, 460, 462, 463, 473, 474, 476, 495, 496, 497, 499, 500, 501, 513, 514, 552, 553, 556, 558, 559, 562, 564, 565], "modelproto": [44, 298, 364, 516], "onnxmodel": [44, 371, 390], "fc2": [44, 170, 171, 437], "rtn": [44, 170, 438, 444, 557, 559], "get_weight_scal": 44, "apply_awq_scal": 44, "absorb_pair": 44, "output_dict": 44, "appli": [44, 113, 126, 127, 128, 131, 133, 137, 148, 149, 165, 169, 183, 208, 210, 264, 304, 357, 428, 435, 438, 450, 471, 478, 479, 514, 517, 519, 525, 534, 538, 539, 544, 552, 553, 556, 558, 561, 562, 565, 566, 567], "salient": [44, 171, 553, 559], "apply_awq_clip": 44, "mse": [44, 170, 171, 221, 222, 302, 310, 344, 355, 363, 397, 405, 467, 499, 513, 539, 555, 559, 560], "prepare_input": 44, "n_sampl": [44, 149, 154, 170, 171], "sampl": [44, 77, 149, 170, 171, 221, 222, 230, 235, 237, 238, 239, 250, 254, 273, 278, 280, 281, 282, 292, 295, 310, 317, 342, 363, 401, 474, 496, 497, 503, 509, 535, 556, 559, 562, 564, 565, 567, 568], "session": [44, 148, 236, 279, 372, 514, 563], "awq_quant": [44, 171], "enable_auto_scal": [44, 171, 559], "enable_mse_search": [44, 171, 437, 444, 559], "awar": [44, 154, 157, 171, 183, 222, 264, 312, 333, 404, 456, 477, 478, 479, 495, 501, 502, 504, 509, 534, 544, 552, 554, 559, 565], "awq": [44, 171, 557, 559], "enabl": [44, 109, 149, 153, 157, 171, 204, 221, 222, 335, 439, 478, 479, 502, 510, 515, 517, 519, 522, 523, 525, 536, 538, 539, 541, 544, 553, 554, 559, 562, 565], "gptq": [44, 171, 437, 444, 557, 559], "w": [44, 156, 254, 295, 435, 553, 562, 564], "h": [44, 221, 222, 254, 295, 502, 542, 543, 547, 548, 549, 564], "blocksiz": 44, "percdamp": [44, 444, 559], "01": [44, 149, 221, 222, 444, 514, 555, 559, 565, 567, 568], "actord": [44, 559], "perchannel": 44, "hessian": [44, 157, 404, 559, 565], "matrix": [44, 363, 397, 476, 525, 566], "percent": 44, "averag": [44, 307, 308, 310, 360, 361, 363, 513, 514, 559, 565, 568], "diagon": [44, 559], "dampen": [44, 153], "rearrang": [44, 211, 553, 559], "consid": [44, 148, 153, 310, 363, 471, 495, 500, 535, 565], "diag": 44, "error": [44, 105, 149, 157, 162, 181, 310, 345, 363, 406, 463, 499, 513, 518, 539, 540, 543, 559, 562, 565], "gptq_quantiz": [44, 171], "get_ops_recurs": 45, "prefix": [45, 148, 155, 162, 163, 168, 170, 177, 517, 522, 563], "graph_info": 45, "templateadaptor": 45, "tampl": 45, "dictionari": [45, 67, 68, 70, 148, 149, 155, 157, 162, 170, 190, 218, 219, 221, 222, 253, 294, 306, 313, 316, 318, 359, 433, 455, 467], "yaml": [45, 217, 218, 219, 222, 225, 226, 237, 239, 255, 268, 269, 280, 282, 296, 301, 312, 313, 314, 316, 325, 330, 338, 339, 420, 466, 467, 477, 479, 508, 513, 514, 551, 555, 563, 564], "file": [45, 105, 148, 160, 162, 163, 170, 174, 187, 213, 217, 218, 221, 222, 225, 226, 237, 238, 239, 242, 253, 254, 260, 263, 268, 269, 280, 281, 282, 285, 294, 295, 296, 301, 306, 312, 313, 314, 316, 325, 330, 334, 336, 338, 339, 359, 364, 374, 380, 381, 385, 397, 466, 467, 472, 474, 477, 478, 479, 502, 505, 508, 511, 513, 514, 516, 520, 529, 532, 533, 534, 535, 537, 538, 539, 540, 542, 543, 547, 548, 549, 551, 555, 556, 559, 563, 564], "pytorchadaptor": 45, "api": [45, 70, 75, 110, 153, 156, 179, 265, 301, 306, 338, 351, 352, 359, 363, 397, 412, 413, 416, 435, 467, 473, 480, 482, 486, 489, 492, 499, 504, 509, 510, 514, 519, 523, 524, 525, 541, 542, 546, 560, 561, 565, 569], "pytorch_ipexadaptor": 45, "intel": [45, 186, 201, 202, 213, 258, 261, 297, 302, 309, 310, 333, 336, 344, 350, 355, 362, 363, 375, 397, 405, 411, 469, 471, 472, 474, 475, 477, 478, 479, 495, 497, 498, 500, 501, 503, 504, 506, 507, 511, 512, 515, 516, 517, 522, 524, 525, 536, 537, 538, 539, 541, 542, 551, 552, 553, 554, 556, 558, 559, 560, 562, 563, 565, 566, 567], "extens": [45, 160, 162, 467, 474, 476, 477, 506, 509, 510, 512, 514, 515, 516, 518, 523, 524, 525, 529, 532, 533, 537, 553, 554, 556, 559, 562, 565, 566, 567], "ipex": [45, 164, 170, 221, 222, 466, 509, 514, 515, 519, 523, 524, 562], "pytorch_fxadaptor": 45, "fx": [45, 170, 221, 346, 407, 509, 515, 523, 524, 538, 554, 556, 558], "graph": [45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 112, 113, 114, 117, 130, 132, 136, 139, 142, 143, 145, 146, 147, 148, 197, 236, 279, 301, 365, 372, 396, 473, 477, 497, 500, 502, 508, 516, 517, 536, 539, 556, 557, 558, 563], "pytorchweightonlyadaptor": 45, "pytorchqueri": 45, "cpu": [45, 91, 92, 93, 94, 149, 150, 156, 161, 162, 164, 170, 221, 222, 435, 439, 462, 467, 476, 478, 494, 495, 509, 514, 515, 517, 519, 525, 534, 542, 554, 555, 556, 557, 558, 559, 563], "querybackendcap": [46, 477, 478], "tensorflowadaptor": 47, "stock": [47, 523, 562], "spr": 47, "tensorflow_itexadaptor": 47, "itex": [47, 109, 221, 222, 299, 515, 556, 562], "tensorflowqueri": [47, 477], "performance_onli": [47, 48, 49, 107, 131, 136, 147, 221, 514], "itex_mod": [47, 48, 89, 107, 131, 136], "quant_mod": [47, 352, 413, 478, 479], "graphconvert": 48, "qt_config": 48, "recip": [48, 197, 221, 222, 301, 338, 476, 514, 557, 559, 562, 565], "int8_sequ": 48, "fp32_op": [48, 50, 107], "bf16_op": [48, 50, 107, 478, 558], "data_load": [48, 49, 477], "calib_func": [48, 154, 170, 171, 397, 558], "fake_qu": [48, 88, 107, 131, 136], "qdq_enabl": 48, "new_api": [48, 49, 71, 72, 77, 79, 92, 99, 131, 136, 143], "use_bf16": [48, 49, 221, 555], "without": [49, 90, 148, 209, 254, 295, 335, 354, 415, 471, 500, 502, 514, 525, 536, 539, 553, 554, 555, 565, 566], "graphconverterwithoutcalib": 49, "recover_config": 49, "rewrit": [50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 106, 107, 108, 109, 194], "bf16convert": [50, 558], "rerewrit": 51, "dequantizecastoptim": 51, "b16": 51, "dequantize_cast_optim": [52, 87, 111], "biasadd": [53, 59, 64, 66, 109, 506], "convertaddtobiasaddoptim": 53, "conv2d": [53, 59, 60, 61, 65, 66, 71, 125, 135, 143, 156, 435, 478, 479, 499, 504, 506, 539, 562, 563, 565], "addv2": [53, 69, 506], "layout": 54, "convertlayoutoptim": 54, "convers": [54, 55, 222, 312, 472, 477, 478, 514, 515, 556, 558, 562], "optim": [54, 74, 75, 79, 80, 116, 118, 148, 149, 153, 185, 188, 189, 190, 192, 194, 197, 206, 211, 218, 221, 222, 258, 264, 301, 302, 318, 338, 342, 355, 401, 456, 457, 464, 467, 474, 476, 494, 499, 500, 501, 502, 506, 507, 509, 510, 512, 514, 516, 517, 519, 521, 522, 525, 528, 536, 539, 540, 541, 543, 545, 554, 555, 556, 558, 559, 561, 562, 563, 565, 567], "nchw": [54, 250], "nhwc": [54, 250], "It": [54, 162, 171, 183, 187, 199, 225, 226, 263, 268, 269, 308, 310, 317, 333, 338, 345, 361, 363, 364, 397, 402, 406, 456, 477, 478, 479, 495, 499, 500, 514, 520, 523, 528, 534, 535, 536, 537, 539, 540, 542, 553, 556, 559, 560, 561, 565, 567], "exist": [54, 177, 219, 255, 372, 433, 467, 504, 513, 521, 565], "abov": [54, 477, 478, 479, 500, 536, 537, 539, 542, 553, 556, 562, 565], "graph_def": [54, 140, 141, 148, 299, 364, 372, 396, 397], "leakyrelu": [55, 562], "convertleakyreluoptim": 55, "below": [55, 66, 74, 221, 222, 339, 363, 397, 472, 473, 476, 477, 478, 479, 496, 499, 500, 502, 508, 513, 517, 519, 527, 528, 531, 534, 537, 542, 551, 552, 553, 555, 556, 559, 561, 562, 563, 565, 566], "subgraph": [55, 66, 105, 168, 557, 565], "mul": [55, 65, 66, 69, 171, 175, 504, 559, 562], "maximum": [55, 149, 199, 204, 221, 222, 237, 254, 280, 295, 304, 335, 342, 357, 372, 401, 479, 495, 497, 499, 514, 553, 556, 562, 564], "note": [55, 160, 203, 306, 346, 359, 407, 474, 476, 478, 479, 496, 499, 502, 504, 506, 510, 512, 514, 519, 522, 527, 531, 534, 536, 540, 542, 544, 553, 556, 559, 562, 563, 565, 566, 567], "coeffici": [55, 149, 214, 553], "less": [55, 148, 170, 221, 222, 467, 494, 500, 514, 541, 553], "than": [55, 148, 237, 254, 280, 295, 433, 439, 467, 474, 476, 494, 497, 508, 539, 547, 551, 552, 553, 556, 559, 561, 564, 565], "valid": [55, 67, 68, 105, 204, 207, 217, 221, 222, 239, 282, 306, 334, 335, 359, 372, 474, 476, 477, 497, 499, 500, 503, 506, 509, 511, 514, 525, 539, 553, 556, 559, 560], "nan": 56, "random": [56, 148, 149, 190, 221, 222, 250, 254, 292, 295, 302, 318, 342, 344, 355, 401, 405, 467, 474, 514, 553, 555, 564, 567], "convertnantorandom": 56, "const": [56, 57, 63, 64, 67, 68, 70, 82, 98], "consist": [56, 63, 472, 473, 542, 562, 565], "placehold": [57, 235, 278], "convertplaceholdertoconst": 57, "dilat": 58, "contract": 58, "dilatedcontract": 58, "spacetobatchnd": 58, "batchtospacend": 58, "pattern": [58, 59, 61, 78, 96, 107, 108, 109, 131, 136, 170, 190, 191, 192, 193, 194, 197, 198, 204, 205, 206, 207, 209, 211, 212, 214, 218, 221, 222, 239, 282, 302, 323, 324, 326, 331, 335, 352, 355, 413, 477, 497, 506, 509, 514, 535, 552, 555, 562, 565, 568], "inject": [59, 514], "dummi": [59, 197, 240, 241, 283, 284, 310, 363, 476, 497, 507, 513, 514, 536], "injectdummybiasaddoptim": 59, "fusion": [59, 61, 70, 78, 109, 126, 127, 128, 131, 132, 133, 137, 473, 477, 506], "expanddim": 60, "expanddimsoptim": 60, "next": [60, 230, 273, 416, 474, 478, 479, 496, 555, 559, 565], "fetch": [61, 170, 174, 230, 273, 478, 497, 547, 548, 549], "reshap": [61, 67, 68, 73, 562], "fetchweightfromreshapeoptim": 61, "handl": [61, 148, 167, 175, 181, 463, 473, 475, 496, 542, 562], "fold": [62, 63, 170, 171, 300, 506, 559, 562], "foldbatchnormnodesoptim": 62, "graphfoldconstantoptim": 63, "sequenc": [63, 105, 149, 198, 201, 202, 221, 222, 237, 253, 254, 280, 294, 295, 304, 308, 333, 357, 361, 477, 497, 506, 553, 559, 564], "self": [63, 170, 171, 197, 221, 222, 374, 439, 477, 478, 496, 497, 509, 513, 536, 561, 563, 565], "supported_op_typ": 63, "fusebiasaddandaddoptim": 64, "second": [64, 162, 179, 198, 221, 222, 237, 280, 402, 467, 499, 514, 527, 531, 535, 547, 548, 559, 562, 565, 567], "columnwis": 65, "fusecolumnwisemuloptim": 65, "depthwiseconv2dn": [65, 71, 125, 135, 506], "math": [66, 556], "fuseconvwithmathoptim": 66, "elimin": [66, 541], "sub": [66, 170, 177, 197, 255, 474, 565], "realdiv": [66, 69], "decompos": [67, 68], "fusedecomposedbnoptim": 67, "input_graph_def": [67, 68, 70], "node_name_from_input": [67, 68, 70], "node_nam": [67, 68, 70, 148, 372, 382, 478], "strip": [67, 68, 70, 83, 84, 148, 563], "port": [67, 68, 70, 536, 543], "other": [67, 68, 70, 149, 153, 160, 167, 175, 236, 279, 308, 361, 372, 471, 473, 478, 479, 499, 506, 509, 511, 514, 516, 537, 551, 553, 556, 562, 564, 565, 568], "underli": [67, 68, 70, 162], "node_from_map": [67, 68, 70], "node_map": [67, 68, 70], "pull": [67, 68, 70], "def": [67, 68, 70, 225, 226, 268, 269, 397, 416, 433, 439, 455, 456, 473, 477, 496, 497, 500, 501, 502, 513, 514, 556, 562, 563, 565], "entri": [67, 68, 70, 157, 186, 261, 301, 339, 428, 432, 438, 451, 467, 511], "index": [67, 68, 70, 105, 177, 217, 222, 230, 235, 239, 273, 278, 282, 317, 467, 497, 513, 535, 539, 559, 562], "everi": [67, 68, 70, 199, 202, 204, 221, 222, 333, 335, 477, 496, 522, 527, 531, 557, 559, 565], "identifi": [67, 68, 70, 162, 306, 359, 372, 542, 553, 559], "want": [67, 68, 70, 197, 221, 222, 235, 237, 278, 280, 335, 402, 439, 456, 473, 477, 496, 497, 502, 514, 522, 534, 535, 542, 551, 556, 559, 561, 563, 565], "nodedef": [67, 68, 70], "rais": [67, 68, 70, 105, 160, 162, 170, 194, 200, 207, 217, 306, 333, 334, 335, 359, 364, 416, 476, 536, 553, 554], "valueerror": [67, 68, 70, 170, 306, 359, 416, 505], "If": [67, 68, 70, 74, 162, 171, 177, 221, 222, 225, 226, 239, 254, 268, 269, 282, 295, 334, 364, 397, 416, 437, 439, 456, 472, 473, 478, 494, 496, 497, 502, 510, 511, 513, 514, 520, 528, 529, 532, 534, 540, 545, 551, 553, 556, 559, 561, 562, 563, 564, 565], "isn": [67, 68, 70], "present": [67, 68, 70, 499, 542, 554, 562], "values_from_const": [67, 68, 70], "node_def": [67, 68, 70], "extract": [67, 68, 70, 148, 197, 239, 282, 354, 415, 497], "ha": [67, 68, 70, 74, 149, 156, 162, 203, 204, 255, 303, 333, 335, 356, 416, 435, 472, 474, 477, 478, 479, 496, 504, 509, 514, 515, 520, 534, 539, 540, 542, 545, 553, 555, 556, 558, 561, 562, 565], "access": [67, 68, 70, 218, 219, 222, 462, 467, 529, 532, 536], "valid_reshape_input": [67, 68], "reshape_in0_ndef": [67, 68], "reshape_in1_ndef": [67, 68], "ar": [67, 68, 105, 150, 162, 170, 199, 204, 205, 206, 211, 212, 221, 222, 237, 254, 280, 295, 306, 310, 317, 333, 334, 335, 339, 341, 342, 359, 363, 398, 400, 401, 415, 416, 439, 459, 466, 467, 471, 472, 473, 474, 477, 478, 496, 497, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 517, 520, 522, 525, 528, 534, 536, 537, 539, 540, 541, 542, 545, 551, 552, 553, 554, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567], "bypass_reshap": [67, 68], "input_node_map": [67, 68], "input_nam": [67, 68, 102, 142, 222, 299, 300, 504], "get_const_dim_count": [67, 68], "dimens": [67, 68, 105, 149, 229, 254, 272, 295, 497, 500, 559, 564], "instancenorm": [68, 562], "fusedecomposedinoptim": 68, "gelu": 69, "fusegeluoptim": 69, "sqrt": [69, 499], "erf": 69, "layernorm": [70, 562], "fuselayernormoptim": 70, "remap": [70, 162], "smaller": [70, 254, 295, 500, 514, 553, 564], "fusedbatcnormv3": 70, "And": [70, 472, 473, 494, 514, 520, 562], "further": [70, 222, 471, 515, 516, 517, 519, 528, 534, 556], "restrict": [70, 162, 221, 222, 553, 561], "2d": [70, 562], "3d": [70, 554, 562], "kera": [70, 116, 186, 197, 217, 222, 239, 246, 261, 282, 289, 367, 372, 428, 430, 432, 478, 496, 502, 516, 524, 525, 560], "fusepadwithconv2doptim": 71, "excluded_op_nam": [71, 72, 218, 221, 222, 514, 553], "cfg": [71, 72, 170, 218, 352, 413, 459, 478, 479], "itex_qdq_mod": [71, 72], "conv3d": [71, 125], "fusepadwithfp32conv2doptim": 72, "fusetransposereshapeoptim": 73, "cse": [74, 98], "graphcseoptim": 74, "introduc": [74, 477, 478, 479, 506, 514, 556, 559, 560, 562, 566], "ident": [74, 80, 198, 471, 500], "three": [74, 217, 237, 280, 341, 398, 400, 473, 477, 478, 495, 510, 515, 528, 542, 552, 556, 558, 561, 562, 563], "d": [74, 170, 500, 508, 535, 537, 543, 553, 568], "those": [74, 162, 345, 406, 467, 499, 500, 501, 508, 514, 515, 552, 553, 556, 565], "child": [74, 156, 163, 435, 563], "b1": 74, "c1c2": 74, "d1": [74, 467], "c1": 74, "c2": 74, "memori": [74, 149, 150, 170, 301, 325, 330, 338, 374, 467, 495, 496, 501, 514, 515, 517, 551, 553, 556, 557, 559, 562, 565, 568], "bound": [74, 177, 191, 254, 295, 306, 342, 359, 401, 513, 564], "like": [74, 96, 98, 148, 149, 162, 197, 217, 222, 225, 226, 227, 239, 268, 269, 270, 282, 301, 310, 335, 338, 339, 363, 372, 397, 456, 472, 473, 474, 477, 478, 499, 500, 501, 509, 522, 537, 539, 552, 553, 556, 559, 560, 562, 565], "relu": [74, 78, 109, 473, 506, 562, 563], "relu6": [74, 506], "updat": [74, 153, 163, 170, 193, 199, 217, 335, 363, 397, 428, 464, 505, 512, 513, 514, 520, 525, 528, 544, 553, 559, 562, 565, 566], "graphdef": [74, 148, 372, 396, 516], "grappler": [75, 506], "grappleroptim": 75, "input_output_nam": 75, "opt_cfg": 75, "wrapper": [75, 102, 103, 104, 105, 122, 140, 149, 155, 165, 169, 184, 194, 236, 254, 256, 257, 259, 260, 279, 295, 306, 310, 359, 363, 368, 372, 450, 558], "leverag": [75, 150, 462, 474, 476, 500, 504, 517, 534, 552, 556, 559, 565], "built": [75, 186, 208, 223, 224, 228, 233, 237, 238, 243, 245, 247, 248, 250, 251, 254, 259, 261, 266, 267, 271, 274, 276, 280, 281, 286, 288, 290, 291, 292, 293, 295, 339, 363, 366, 374, 397, 456, 474, 477, 497, 502, 514, 527, 531, 551, 556, 561, 564, 565, 567], "convert_add_to_biasadd": [76, 87, 111], "convert_layout": [76, 87, 111], "convert_leakyrelu": [76, 87, 111], "convert_nan_to_random": [76, 87, 111], "convert_placeholder_to_const": [76, 87, 111], "dilated_contract": [76, 87, 111], "dummy_biasadd": [76, 87, 111], "expanddims_optim": [76, 87, 111], "fetch_weight_from_reshap": [76, 87, 111], "fold_batch_norm": [76, 87, 111], "fold_const": [76, 87, 111], "fuse_biasadd_add": [76, 87, 111], "fuse_column_wise_mul": [76, 87, 111], "fuse_conv_with_math": [76, 87, 111], "fuse_decomposed_bn": [76, 87, 111], "fuse_decomposed_in": [76, 87, 111], "fuse_gelu": [76, 87, 111], "fuse_layer_norm": [76, 87, 111], "fuse_pad_with_conv": [76, 87, 111], "fuse_pad_with_fp32_conv": [76, 87, 111], "fuse_reshape_transpos": [76, 87, 111], "graph_cse_optim": [76, 87, 111], "grappler_pass": [76, 87, 111], "insert_print_nod": [76, 87, 111], "move_squeeze_after_relu": [76, 87, 111], "pre_optim": [76, 87, 111], "remove_training_nod": [76, 87, 111], "rename_batch_norm": [76, 87, 111], "split_shared_input": [76, 87, 111], "strip_equivalent_nod": [76, 87, 111, 148], "strip_unused_nod": [76, 87, 111, 148], "switch_optim": [76, 87, 111], "insert": [77, 105, 107, 109, 113, 146, 149, 167, 175, 473, 478, 496, 509, 514, 517, 553, 556, 558, 559, 562, 563], "print": [77, 156, 157, 197, 310, 363, 416, 435, 467, 502, 513, 514, 536, 537, 553, 562, 565], "insertprintminmaxnod": 77, "pre_node_nam": 77, "post_node_nam": 77, "pass": [77, 148, 149, 160, 162, 177, 363, 397, 433, 439, 466, 467, 472, 473, 477, 494, 497, 500, 501, 502, 508, 513, 514, 535, 542, 553, 555, 556, 558, 562, 567], "move": [78, 149, 162, 473, 540, 555, 559, 560], "squeez": [78, 473], "movesqueezeafterreluoptim": 78, "match": [78, 102, 162, 197, 306, 307, 359, 360, 500, 535, 559], "pre": [79, 116, 163, 197, 225, 226, 237, 268, 269, 280, 364, 397, 444, 456, 497, 500, 501, 514, 522, 539, 553, 554, 556, 559, 563, 565], "entranc": [79, 191, 228], "preoptim": 79, "removetrainingnodesoptim": 80, "protected_nod": 80, "types_to_splic": 80, "checknumer": 80, "stopgradi": 80, "renam": [81, 560], "fusedbatchnorm": 81, "fusedbatchnormv2": 81, "renamebatchnormoptim": 81, "splitsharedinputoptim": 82, "equival": [83, 169, 476, 554, 559, 562], "stripequivalentnodesoptim": 83, "output_node_nam": [83, 84, 131, 132, 136, 148], "same": [83, 141, 148, 150, 171, 211, 222, 237, 254, 280, 295, 306, 359, 439, 467, 477, 479, 494, 496, 497, 500, 502, 506, 514, 518, 522, 527, 531, 553, 555, 556, 559, 562, 563, 564, 565], "unus": [84, 148], "stripunusednodesoptim": 84, "input_node_nam": [84, 131, 136, 148], "switch": [85, 517, 563], "switchoptim": 85, "condit": [85, 237, 238, 239, 254, 280, 281, 282, 295, 341, 398, 400, 497, 511, 564, 565], "graphrewriterbas": 86, "abstract": [86, 179, 183, 191, 254, 295, 296, 301, 338, 477, 479, 508], "freeze_fake_qu": [87, 95, 111], "freeze_valu": [87, 95, 111], "freeze_value_without_calib": [87, 95, 111], "fuse_conv_redundant_dequant": [87, 95, 111], "fuse_conv_requant": [87, 95, 111], "fuse_matmul_redundant_dequant": [87, 95, 111], "fuse_matmul_requant": [87, 95, 111], "meta_op_optim": [87, 95, 111], "post_hostconst_convert": [87, 95, 111], "post_quantized_op_cs": [87, 95, 111], "rnn_convert": [87, 95, 111], "scale_propag": [87, 95, 111], "onnx_graph": [87, 101, 111], "onnx_schema": [87, 101, 111], "tf2onnx_util": [87, 101, 111], "insert_qdq_pattern": [87, 106, 111], "merge_duplicated_qdq": [87, 106, 111], "share_qdq_y_pattern": [87, 106, 111], "freez": [88, 89, 90, 148, 517, 553], "fakequ": 88, "freezefakequantopoptim": 88, "follow": [88, 110, 198, 239, 282, 303, 306, 356, 359, 471, 472, 473, 474, 477, 478, 479, 496, 497, 500, 501, 502, 506, 510, 511, 513, 514, 515, 516, 517, 518, 519, 527, 531, 536, 538, 539, 542, 547, 552, 553, 555, 556, 559, 562, 563, 565], "freezevaluetransform": 89, "max_min_data": [89, 90], "postfix": [89, 90], "tensor_data": [89, 467, 468], "th": [89, 90], "gpu": [89, 90, 97, 149, 162, 221, 222, 439, 476, 494, 509, 514, 515, 519, 525, 534, 555, 556, 557], "freezevaluewithoutcalibtransform": 90, "95": [90, 310, 363, 513, 568], "quantizedconv": [91, 92], "quantizeddeconv": 91, "redund": [91, 93], "fuseconvredundantdequantizetransform": 91, "_quantizedconv": 91, "_quantizeddeconv": 91, "successor": [91, 92, 93, 94], "requant": [92, 94, 563], "fuseconvrequantizetransform": 92, "quantizedmatmul": [93, 94], "fusematmulredundantdequantizetransform": 93, "_quantizedmatmul": [93, 94], "fusematmulrequantizedequantizetransform": 94, "quantizedmatmulwithbiasanddequant": 94, "fusematmulrequantizetransform": 94, "fusematmulrequantizedequantizenewapitransform": 94, "fusematmulrequantizenewapitransform": 94, "newapi": 94, "meta": [96, 512, 554, 568], "metainfochangingmemopoptim": 96, "metaop": 96, "With": [96, 374, 473, 477, 479, 496, 514, 522, 527, 531, 535, 541, 551, 553, 554, 561, 562, 565, 568], "better": [96, 221, 222, 225, 226, 268, 269, 317, 364, 397, 456, 501, 513, 515, 553, 554, 556, 559, 561, 562, 565], "perform": [96, 140, 149, 153, 177, 214, 221, 222, 237, 249, 250, 255, 280, 292, 301, 325, 330, 338, 345, 363, 374, 397, 402, 406, 439, 472, 473, 474, 477, 478, 494, 497, 498, 499, 501, 503, 504, 509, 510, 513, 514, 515, 516, 517, 519, 523, 525, 528, 534, 540, 551, 552, 553, 554, 555, 556, 557, 558, 559, 562, 563, 565, 567, 568], "hostconst": 97, "posthostconstconvert": 97, "just": [97, 227, 252, 254, 257, 259, 260, 262, 270, 295, 374, 474, 514, 524, 528, 534, 542, 552, 556, 562, 564, 565], "postcseoptim": 98, "duplic": [98, 108, 342, 401], "quantizev2": 98, "decreas": [98, 539, 553], "size": [98, 149, 171, 201, 202, 229, 230, 236, 239, 245, 250, 254, 272, 273, 279, 282, 288, 292, 295, 333, 372, 374, 437, 467, 471, 478, 496, 497, 502, 505, 514, 534, 535, 551, 553, 556, 557, 559, 562, 564, 567, 568], "rnn": 99, "quantizedrnnconvert": 99, "calibration_data": [99, 107], "rnn_detail": 99, "scalepropagationtransform": 100, "direct": [100, 203, 333, 553], "export": [101, 222, 302, 306, 355, 359, 476, 507, 520, 535, 537, 563, 566], "onnxgraph": 102, "output_shap": 102, "extra_opset": 102, "output_nam": [102, 142, 222, 299, 300, 504], "is_subgraph": 102, "graph_nam": 102, "manipul": [102, 103], "onnxnod": 103, "skip_convers": 103, "schema": [104, 171, 437], "onnxopschema": 104, "domain": [104, 105, 221, 222, 553, 565], "since_vers": 104, "get_schema": 104, "max_inclusive_opset_vers": 104, "within": [104, 178, 205, 206, 211, 212, 301, 306, 338, 359, 372, 391, 396, 471, 473, 479, 495, 515, 527, 531, 534, 542, 553, 554, 562, 565], "get_max_supported_opset_vers": 104, "packag": [104, 477, 505, 510, 534, 535, 554, 560, 565], "set_nam": 105, "find_opset": 105, "assert_error": 105, "bool_val": 105, "error_msg": 105, "messag": [105, 146, 472, 542, 543, 547, 548, 549, 565], "map_numpy_to_onnx_dtyp": 105, "np_dtype": 105, "map_onnx_to_numpy_typ": 105, "onnx_typ": 105, "add_port_to_nam": 105, "nr": 105, "get_tensorflow_node_attr": 105, "pars": [105, 148, 170, 237, 238, 250, 254, 280, 281, 292, 295, 380, 381, 385, 428, 478, 479, 564], "get_tensorflow_tensor_shap": 105, "get_tensorflow_node_shape_attr": 105, "attr": [105, 148, 197], "map_tensorflow_dtyp": 105, "get_tensorflow_tensor_data": 105, "convert_tensorflow_tensor_to_onnx": 105, "read_tensorflow_node_attr": 105, "read": [105, 148, 162, 242, 254, 285, 295, 334, 497, 558, 561], "infer_onnx_shape_dtyp": 105, "opset_vers": [105, 142, 222, 299, 300, 504], "input_shap": [105, 241, 284, 497], "input_dtyp": 105, "sometim": [105, 473, 499, 556], "make_onnx_shap": 105, "seqtyp": 105, "tensor_dtyp": 105, "around": 105, "signifi": 105, "make_onnx_inputs_output": 105, "elem_typ": 105, "text": [105, 149, 153, 213, 253, 254, 294, 295, 303, 308, 336, 356, 361, 504, 511, 523, 545, 548, 549, 553, 554, 559, 562, 564, 568], "datatyp": [105, 170, 558, 565, 568], "save_protobuf": 105, "path": [105, 140, 148, 150, 163, 170, 197, 213, 217, 218, 237, 238, 239, 254, 280, 281, 282, 295, 296, 299, 300, 301, 312, 313, 314, 316, 325, 330, 334, 336, 338, 339, 352, 364, 372, 396, 397, 413, 462, 464, 467, 473, 474, 477, 497, 499, 502, 508, 513, 514, 515, 516, 520, 523, 534, 537, 539, 542, 547, 548, 549, 552, 559, 564, 567], "as_text": 105, "save": [105, 148, 161, 162, 194, 217, 221, 222, 239, 282, 299, 300, 339, 372, 397, 456, 457, 462, 467, 473, 477, 508, 514, 515, 516, 518, 522, 527, 531, 537, 542, 547, 548, 549, 552, 556, 557, 559, 562], "protobuf": [105, 372, 537], "is_onnx_domain": 105, "is_list_or_tupl": 105, "are_shapes_equ": 105, "src": [105, 535], "dest": 105, "equal": [105, 143, 148, 176, 416, 433, 467, 553, 559], "get_subgraphs_from_onnx": 105, "model_proto": 105, "over": [105, 162, 239, 282, 310, 363, 478, 503, 507, 509, 513, 525, 534, 540, 544, 553, 555, 562, 565], "df": 105, "initialize_name_count": 105, "avoid": [105, 162, 170, 171, 237, 280, 473, 563], "conflict": [105, 505], "counter": 105, "make_nam": 105, "get_index_from_strided_slice_of_shap": 105, "outputs_to_valu": 105, "stride": [105, 254, 295, 564], "slice": 105, "compute_const_folding_using_tf": 105, "g": [105, 149, 153, 162, 199, 221, 222, 439, 472, 500, 503, 507, 517, 522, 553, 559, 560, 562, 565], "const_node_valu": 105, "graph_output": 105, "constant": [105, 300, 302, 342, 344, 350, 355, 401, 405, 411, 460, 496, 506, 537, 564], "tf": [105, 116, 141, 148, 197, 217, 236, 237, 238, 239, 254, 279, 280, 281, 282, 295, 370, 372, 502, 510, 516, 554, 558, 560, 564], "generategraphwithqdqpattern": 107, "op_wise_config": [107, 131, 136, 478], "quantized_nod": 107, "llm_weight_minmax": 107, "dq": [107, 109, 131, 562], "pair": [107, 221, 222, 478, 496, 514, 515, 560], "befor": [107, 109, 150, 156, 175, 190, 199, 204, 206, 211, 213, 215, 221, 222, 237, 280, 333, 335, 337, 435, 472, 479, 496, 497, 500, 501, 502, 505, 506, 510, 514, 529, 532, 538, 539, 556, 559, 561, 563, 565], "merg": [108, 229, 272, 352, 413, 529, 532, 563, 565], "mergeduplicatedqdqoptim": 108, "y": [109, 221, 222, 254, 295, 342, 401, 499, 505, 520, 562, 564], "shareqdqforitexypatternoptim": 109, "break": [109, 502, 514], "graphanalyz": 110, "extend_engin": 110, "analyz": [110, 197, 372, 561, 562, 563], "under": [110, 150, 221, 222, 239, 282, 433, 439, 455, 462, 466, 472, 474, 476, 497, 511, 513, 514, 517, 522, 523, 534, 542, 552, 553, 554, 557, 559, 563, 565], "singleton": [110, 467], "specifi": [110, 149, 162, 170, 177, 217, 221, 222, 225, 226, 254, 255, 268, 269, 295, 301, 306, 310, 312, 313, 316, 325, 330, 338, 339, 359, 363, 364, 397, 416, 456, 466, 467, 478, 479, 502, 506, 513, 514, 522, 536, 542, 546, 547, 548, 549, 551, 553, 555, 559, 564, 565, 567], "graphrewriterhelp": 110, "encapsul": [110, 179, 225, 226, 268, 269, 364, 397, 456, 516], "quantize_lay": [111, 112, 114], "fake_quant": [111, 112, 114], "quantize_config": [111, 112, 114, 478], "quantize_help": [111, 112, 114], "quantize_wrapp": [111, 112, 114], "fuse_qdq_bn": [111, 112, 130], "fuse_qdq_concatv2": [111, 112, 130], "fuse_qdq_conv": [111, 112, 130], "fuse_qdq_deconv": [111, 112, 130], "fuse_qdq_in": [111, 112, 130], "fuse_qdq_matmul": [111, 112, 130], "fuse_qdq_pool": [111, 112, 130], "optimize_qdq": [111, 112, 130], "optimize_lay": [112, 114, 117], "quantize_layer_add": [112, 114, 117], "quantize_layer_bas": [112, 114, 117], "quantize_layer_bn": [112, 114, 117], "fakequantizebas": 113, "abc": [113, 308, 361, 477, 563, 565], "fakequant": 113, "per_channel": [113, 478, 479, 506, 556, 567], "8": [113, 149, 162, 171, 221, 222, 253, 294, 437, 444, 473, 478, 495, 506, 510, 541, 542, 553, 554, 559, 562, 565, 568], "channel_axi": [113, 173, 176], "symmetr": [113, 149, 150, 462, 479, 556, 559, 564, 565], "narrow_rang": 113, "quantizeconfig": [115, 116], "custom": [115, 149, 160, 170, 171, 177, 222, 339, 363, 374, 466, 494, 500, 501, 517, 540, 541, 542, 546, 548, 549, 553, 554, 559, 561], "There": [115, 339, 341, 398, 400, 499, 500, 506, 509, 514, 517, 539, 541, 542, 559, 562, 565, 567], "instanc": [115, 116, 177, 221, 222, 225, 226, 255, 268, 269, 307, 308, 310, 313, 316, 319, 320, 322, 323, 324, 342, 354, 360, 361, 363, 364, 397, 401, 415, 430, 439, 456, 464, 467, 471, 472, 473, 477, 494, 514, 519, 525, 559, 565, 567, 568], "global": [115, 199, 221, 222, 319, 320, 322, 323, 324, 333, 415, 428, 467, 473, 514, 553, 555, 565], "class": [116, 152, 160, 170, 194, 200, 207, 317, 364, 397, 473, 474, 478, 496, 497, 500, 513, 514, 525, 551, 552, 556, 560, 563, 565, 567], "init_quantize_config": 116, "quantize_recip": 116, "begin": [116, 153, 205, 206, 211, 335, 496, 500, 501, 514, 553, 565], "process": [116, 140, 149, 157, 177, 199, 204, 205, 206, 213, 215, 217, 221, 222, 225, 226, 237, 238, 239, 250, 254, 255, 268, 269, 280, 281, 282, 292, 295, 333, 335, 337, 341, 342, 364, 397, 398, 400, 401, 439, 456, 466, 467, 474, 477, 478, 479, 495, 496, 497, 500, 501, 502, 504, 514, 518, 539, 541, 542, 544, 552, 553, 556, 557, 559, 562, 563, 564, 567], "model_nam": [116, 221, 222], "special": [116, 162, 197, 374, 473, 496, 513, 514, 551, 553, 559, 566], "decid": [116, 179, 221, 222, 304, 335, 357, 477, 478, 514, 556, 560, 565], "qat_clone_funct": 116, "leav": [116, 528], "quantizewrapp": [116, 122], "wrapped_lay": 116, "config_quantizable_lay": 118, "quantizelayeradd": 119, "quantizelay": 120, "quantizelayerbas": 120, "quantizelayerbatchnorm": 121, "quantizewrapperbas": 122, "fusedbatchnormv3": [123, 133], "fusenodestartwithfusedbatchnormv3": [123, 133], "_quantizedfusedbatchnorm": 123, "concatv2": [124, 134, 147, 506], "fusenodestartwithconcatv2": [124, 134], "quantizedconcatv2": [124, 134], "fusenodestartwithconv2d": [125, 135], "conv2dbackpropinput": 126, "conv3dbackpropinputv2": 126, "fusenodestartwithdeconv2d": 126, "fusedinstancenorm": 127, "fusenodestartwithfusedinstancenorm": 127, "batchmatmul": 128, "batchmatmulv2": 128, "fusenodestartwithmatmul": [128, 137], "avgpool": [129, 138, 506], "fusenodestartwithpool": [129, 138], "optimizeqdqgraph": 131, "input_graph": [131, 136, 143, 392, 396, 477], "op_wise_sequ": [131, 136], "quantizegraph": 132, "quantizegraphbas": 132, "quantizenodebas": 132, "quantizegraphforintel": 136, "common": [139, 160, 162, 190, 222, 252, 302, 312, 316, 317, 318, 355, 430, 432, 444, 451, 459, 471, 497, 501, 502, 504, 508, 510, 514, 556, 562], "herlper": 139, "quantizegraphhelp": 139, "sever": [139, 215, 254, 295, 337, 339, 474, 499, 500, 501, 509, 514, 515, 527, 531, 542, 553, 555, 557, 562, 564, 565, 567], "staticmethod": 139, "function": [139, 140, 160, 205, 206, 211, 221, 222, 225, 226, 238, 268, 269, 281, 313, 316, 325, 330, 472, 473, 474, 477, 478, 479, 494, 496, 500, 501, 504, 508, 509, 510, 512, 513, 514, 515, 525, 535, 541, 542, 553, 556, 559, 560, 561, 562, 563, 565, 566], "smoothquantcalibr": 140, "dataset": [140, 141, 149, 170, 213, 225, 226, 227, 229, 230, 234, 235, 236, 248, 257, 268, 269, 270, 272, 273, 277, 278, 279, 291, 302, 306, 307, 308, 310, 339, 355, 359, 360, 361, 363, 364, 397, 456, 459, 474, 476, 477, 478, 496, 502, 507, 513, 514, 522, 536, 537, 547, 553, 556, 559, 560, 562, 565, 567, 568], "outlier": [140, 478, 495, 499, 539, 559, 562], "smoothquantcalibrationllm": 140, "model_path": [140, 148, 171, 499, 547], "temp_path": 140, "weight_name_map": 140, "llm": [140, 141, 149, 156, 212, 435, 476, 553, 554, 557, 559, 562], "eval_func": [140, 225, 226, 268, 269, 339, 342, 345, 346, 348, 364, 397, 398, 401, 402, 406, 407, 409, 416, 456, 473, 496, 497, 499, 500, 501, 502, 514, 537, 556, 557, 558, 559, 565, 567], "temporari": [140, 170, 467, 471], "store": [140, 191, 193, 194, 197, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 216, 221, 222, 239, 282, 328, 335, 508], "median": 140, "autotrack": [140, 148], "smoothquantscal": 141, "alpha": [141, 161, 165, 175, 193, 214, 450, 556, 565], "scales_per_op": 141, "individu": [141, 199, 333, 391, 396, 471, 542, 553, 562], "smoothquantscalerllm": 141, "tensorflowqdqtoonnxqdqconvert": 142, "shape_overrid": 142, "inputs_as_nchw": [142, 299], "default_opset_vers": 142, "bia": [143, 221, 222, 559, 563], "correct": [143, 176, 217, 221, 222, 306, 307, 308, 310, 334, 359, 360, 361, 363, 471, 517], "biascorrect": 143, "fp32_graph": 143, "weight_empir": 143, "Will": [143, 500, 509], "our": [143, 170, 221, 222, 474, 476, 504, 514, 535, 536, 539, 561, 566], "task": [143, 237, 244, 280, 287, 310, 363, 497, 500, 501, 504, 509, 513, 514, 537, 541, 544, 553, 557, 559, 562, 568], "close": [143, 176, 495, 543], "w_int8": [143, 176], "u": [143, 176, 517, 536, 541], "w_fp32": [143, 176], "varianc": [143, 176, 499], "differ": [143, 153, 172, 176, 178, 179, 184, 190, 208, 221, 222, 230, 239, 254, 256, 273, 282, 295, 301, 310, 316, 318, 327, 338, 363, 374, 461, 471, 473, 474, 478, 496, 497, 499, 500, 502, 503, 508, 509, 513, 514, 516, 527, 531, 536, 539, 542, 551, 553, 556, 559, 562, 563, 564, 565], "wise": [143, 159, 161, 163, 171, 176, 221, 222, 342, 345, 401, 402, 406, 428, 437, 476, 478, 509, 539, 553, 559, 562, 563, 565, 566, 567], "minim": [143, 153, 176, 342, 401, 478, 479, 495, 500, 503, 513, 514, 527, 531, 553, 556, 565], "scale_c": [143, 176], "shift": [143, 176, 250, 292, 535, 564], "notic": [143, 176, 255, 511, 515, 537, 560], "first": [143, 149, 162, 170, 176, 178, 198, 219, 221, 222, 237, 280, 306, 352, 359, 402, 413, 433, 467, 473, 474, 477, 478, 479, 497, 499, 510, 515, 519, 528, 529, 532, 535, 537, 538, 539, 555, 556, 558, 559, 561, 562, 563, 565, 567], "empir": [143, 176], "solut": [143, 176, 476, 477, 478, 505, 519, 523, 528, 554, 559, 560, 562, 565, 566], "don": [143, 176, 199, 221, 222, 473, 540, 553, 565], "min": [143, 149, 171, 176, 191, 222, 437, 467, 499, 537, 539, 553, 556, 559, 562, 564, 565], "graphtransform": 144, "graphtransformbas": 144, "input_pb": [144, 146, 147], "log": [146, 177, 181, 197, 380, 381, 385, 463, 473, 525, 547, 548, 549, 561, 563, 565], "insertlog": 146, "node_name_list": 146, "show_nam": 146, "show_op": 146, "first_n": 146, "summar": [146, 500], "1024": [146, 239, 282, 520], "dump_fp32": 146, "rerang": 147, "rerangequantizedconcat": 147, "rerange_quant": 147, "version1_lt_version2": [148, 467], "version1": [148, 433, 467], "version2": [148, 433, 467], "version1_gt_version2": [148, 467], "greater": [148, 433, 467, 547, 553, 565], "version1_eq_version2": [148, 467], "version1_gte_version2": [148, 433, 467], "version1_lte_version2": [148, 467], "disable_random": 148, "seed": [148, 149, 190, 221, 222, 318, 467, 514, 567], "disabl": [148, 221, 222, 471, 534, 539, 558, 559, 562], "read_graph": 148, "in_graph": 148, "in_graph_is_binari": 148, "write_graph": 148, "out_graph_def": 148, "out_graph_fil": 148, "write": [148, 246, 289, 467, 502, 508, 514, 517, 563], "is_ckpt_format": 148, "ckpt": [148, 364, 372, 397, 568], "folder": [148, 239, 244, 282, 287, 364, 397, 466, 497, 522, 527, 531, 540, 547, 548, 549, 559, 563], "is_saved_model_format": 148, "saved_model": [148, 312, 557], "get_estimator_graph": 148, "estim": [148, 149, 310, 363, 372, 565], "input_fn": [148, 372], "get_tensor_by_nam": 148, "try_cnt": 148, "import": [148, 153, 177, 191, 221, 222, 312, 364, 374, 397, 416, 456, 467, 473, 474, 476, 479, 494, 496, 497, 499, 500, 501, 502, 504, 507, 513, 514, 515, 516, 517, 521, 523, 536, 537, 545, 551, 552, 553, 555, 556, 557, 558, 560, 561, 562, 563, 564, 565, 566], "scope": [148, 472, 478, 514], "onc": [148, 162, 186, 215, 261, 337, 341, 398, 400, 478, 479, 496, 534, 540, 553, 554, 565, 568], "both": [148, 150, 222, 471, 474, 477, 501, 514, 518, 537, 539, 541, 553, 555, 556, 559, 562, 565], "compat": [148, 372, 472, 502, 516, 529, 532, 534, 553, 560], "v1": [148, 249, 250, 292, 307, 308, 310, 360, 361, 363, 372, 502, 504, 505, 513, 516, 538, 553, 560, 561, 562, 568], "suffix": 148, "time": [148, 162, 179, 221, 222, 254, 295, 310, 342, 363, 374, 401, 433, 467, 478, 496, 499, 502, 505, 514, 522, 524, 527, 531, 534, 535, 540, 543, 547, 548, 551, 553, 554, 556, 559, 561, 562, 563, 564, 565], "got": [148, 478, 505, 563], "iterator_sess_run": 148, "sess": [148, 372], "iter_op": 148, "feed_dict": [148, 236, 279], "output_tensor": [148, 372], "measur": [148, 255, 364, 461, 474, 477, 494, 499, 500, 513, 514, 559, 563, 565, 568], "integr": [148, 184, 256, 477, 514, 535, 536, 541, 559], "makeiter": 148, "feed": [148, 236, 279, 500, 553], "end": [148, 153, 204, 205, 206, 211, 221, 222, 237, 253, 254, 280, 294, 295, 335, 341, 398, 400, 477, 478, 479, 500, 501, 506, 510, 514, 528, 544, 551, 553, 563, 564, 565], "predict": [148, 254, 259, 295, 303, 307, 308, 310, 356, 360, 361, 363, 397, 474, 500, 513, 525, 559, 562, 563, 564], "pred": [148, 310, 363, 513], "collate_tf_pr": 148, "collat": [148, 170], "get_input_output_node_nam": 148, "fix_ref_type_of_graph_def": 148, "fix": [148, 209, 211, 237, 280, 335, 496, 497, 521, 553, 556, 559, 565], "strip_unused_lib": 148, "offici": [148, 303, 307, 308, 356, 360, 361, 471, 562], "r1": 148, "15": [148, 506, 510, 548], "branch": [148, 472], "get_graph_def": 148, "auto_input_output": 148, "get_model_input_shap": 148, "get_tensor_val_from_graph_nod": 148, "graph_node_name_map": 148, "kei": [148, 149, 157, 162, 163, 167, 197, 208, 217, 219, 221, 222, 317, 334, 372, 416, 433, 457, 459, 467, 476, 478, 536, 537, 543, 554, 559, 563, 565], "val": [148, 217, 239, 242, 282, 285, 334, 499, 514, 539], "tensor_v": 148, "int8_node_name_revers": 148, "revers": [148, 537], "tf_diagnosis_help": 148, "fp32_model": [148, 157, 170, 300, 467, 477, 557], "quan_model": 148, "save_path": [148, 299, 300, 477, 516], "diagnosi": [148, 221, 222, 514, 537, 538, 539, 554, 560, 566], "generate_feed_dict": 148, "input_tensor": [148, 372], "get_weight_from_input_tensor": 148, "input_tensor_nam": [148, 372], "associ": [148, 162, 306, 359], "search": [148, 156, 171, 190, 191, 197, 211, 218, 222, 225, 226, 268, 269, 301, 303, 313, 316, 317, 318, 338, 342, 356, 401, 435, 437, 467, 476, 509, 513, 517, 518, 528, 553, 554, 559, 562, 563, 565, 566], "look": [148, 208, 477, 479, 506, 513, 536, 537, 539, 562, 567], "sq_weight_tensor": 148, "sq_weights_nod": 148, "two": [148, 157, 162, 177, 198, 203, 210, 215, 239, 244, 255, 282, 287, 306, 333, 337, 339, 346, 359, 407, 467, 472, 473, 474, 496, 497, 500, 502, 504, 506, 514, 515, 541, 542, 544, 553, 556, 558, 559, 561, 562, 565, 567], "apply_inlin": 148, "func": [148, 170, 467, 556, 567], "inlin": [148, 517, 522, 525], "definit": [148, 152, 165, 230, 235, 273, 278, 450], "concret": [148, 452, 565], "new_graph_def": 148, "construct_function_from_graph_def": 148, "frozen_func": 148, "rebuild": [148, 518, 527, 531], "reconstruct": [148, 554], "new_func": 148, "parse_saved_model": 148, "output_tensor_nam": [148, 372], "_saved_model": 148, "load": [148, 160, 162, 163, 237, 253, 254, 280, 294, 295, 364, 372, 397, 466, 467, 478, 496, 527, 531, 535, 537, 555, 556, 557, 562], "reconstruct_saved_model": 148, "trackabl": 148, "destin": [148, 298, 312], "quant_weight_asym": 149, "v": [149, 153, 525, 534, 553, 565, 567], "min_scal": 149, "max_scal": 149, "asymmetr": [149, 479, 556, 559, 565], "e": [149, 162, 199, 221, 222, 439, 471, 472, 500, 503, 507, 517, 522, 523, 527, 531, 553, 559, 562, 565], "perturb": 149, "minimum": [149, 199, 221, 222, 479, 495, 499, 514, 525, 553, 562, 565], "quant_weight_sym": 149, "quant_weight_actor": 149, "quant_weight": [149, 171, 437], "hand": [149, 474], "issu": [149, 471, 472, 475, 476, 510, 537, 539, 556, 563], "quant_weight_w_scal": [149, 171, 437], "round_st": 149, "torch": [149, 150, 152, 153, 155, 156, 157, 158, 159, 162, 163, 165, 166, 167, 168, 170, 171, 175, 194, 197, 198, 200, 208, 218, 221, 222, 300, 364, 397, 433, 462, 466, 473, 476, 479, 480, 500, 502, 504, 514, 515, 516, 517, 522, 525, 537, 556, 559, 562, 563], "straight": 149, "through": [149, 157, 225, 226, 268, 269, 363, 364, 397, 476, 494, 506, 508, 509, 513, 520, 541, 551, 552, 553, 555, 556, 559], "omniqu": 149, "saveinput": 149, "seqlen": 149, "256": [149, 244, 250, 287, 292, 444, 497, 502, 514, 564], "block_nam": 149, "cach": [149, 237, 280, 439, 505, 556, 559], "get_modul": [149, 163, 167], "nn": [149, 152, 156, 163, 165, 167, 170, 171, 197, 198, 208, 221, 222, 300, 364, 397, 433, 435, 437, 438, 439, 450, 451, 452, 455, 462, 466, 473, 500, 514, 516, 559, 562, 563], "set_modul": [149, 167, 170, 455], "new_modul": [149, 163, 167, 170, 455], "get_scale_shap": 149, "wrapper_block": 149, "enable_minmax_tun": 149, "conv1d": [149, 156, 435, 479], "indic": [149, 162, 178, 183, 221, 222, 230, 235, 237, 273, 278, 280, 296, 306, 317, 359, 473, 496, 505, 537, 542, 563], "unwrapper_block": 149, "unwrap": 149, "wrapperlinear": 149, "wrappertransformerconv1d": 149, "sampling_input": 149, "input_id": [149, 237, 254, 280, 295, 514], "input_oth": 149, "length": [149, 208, 221, 222, 237, 254, 280, 295, 306, 359, 476, 497, 513, 554, 556, 559, 564], "id": [149, 177, 253, 255, 294, 303, 305, 306, 307, 308, 356, 358, 359, 360, 361, 513, 542, 543, 547, 548, 549, 561, 565], "current_input_id": 149, "current_input_oth": 149, "move_input_to_devic": 149, "check_is_cpu": 149, "otherwis": [149, 162, 239, 254, 282, 295, 467, 471, 478, 497, 529, 532, 555, 559, 564], "block_forward": 149, "amp_dtyp": 149, "automat": [149, 195, 197, 198, 221, 222, 239, 242, 249, 250, 282, 285, 292, 301, 311, 338, 473, 476, 494, 497, 509, 514, 515, 517, 519, 522, 523, 525, 527, 528, 529, 531, 532, 534, 541, 544, 552, 553, 556, 562, 564, 565], "mix": [149, 155, 164, 221, 222, 340, 352, 364, 399, 413, 439, 476, 477, 484, 509, 517, 523, 524, 525, 566], "precis": [149, 155, 164, 221, 222, 225, 226, 268, 269, 301, 308, 310, 311, 338, 340, 352, 361, 363, 364, 374, 399, 402, 413, 439, 467, 476, 477, 478, 484, 494, 495, 501, 502, 506, 509, 517, 523, 524, 525, 554, 555, 556, 559, 562, 565, 566], "collect_round_v": 149, "collect_minmax_scal": 149, "get_batch_dim": 149, "posit": [149, 254, 295, 451, 471, 513, 517, 542, 547, 548, 549], "dim": [149, 254, 295, 559, 562, 564], "wrappermultiblock": 149, "module_list": 149, "act": [149, 217, 235, 278, 471], "singl": [149, 193, 215, 221, 222, 230, 237, 254, 273, 280, 295, 306, 335, 337, 359, 363, 397, 473, 497, 499, 510, 540, 553, 557, 562], "get_block_nam": 149, "network": [149, 157, 193, 199, 200, 335, 404, 439, 474, 495, 500, 501, 504, 514, 536, 554, 556, 562, 565], "get_tokenizer_funct": 149, "token": [149, 237, 248, 251, 254, 280, 291, 293, 295, 302, 303, 304, 355, 356, 357, 462, 497, 513, 514, 536, 537, 559, 561, 562, 564, 565], "truncat": [149, 237, 254, 280, 295, 497, 564], "field": [149, 179, 221, 222, 239, 282, 306, 359, 473, 477, 479, 502, 514, 561, 565, 567], "get_dataload": 149, "data_nam": 149, "neelnanda": 149, "pile": 149, "10k": [149, 503, 507], "42": [149, 190, 222, 318, 568], "test": [149, 177, 221, 222, 254, 295, 472, 476, 499, 510, 542, 547, 568], "shuffl": [149, 227, 229, 236, 257, 270, 272, 279, 496, 514, 556], "enable_full_rang": [149, 150, 154, 171, 437, 444, 462, 557, 559], "cuda": [149, 162, 217, 439, 515, 517, 519, 553, 556], "lr_schedul": [149, 514, 553], "dataset_nam": [149, 538], "dataset_split": 149, "use_quant_input": 149, "lr": [149, 153, 221, 222, 500, 502, 514], "005": [149, 559], "minmax_lr": 149, "low_gpu_mem_usag": 149, "200": [149, 253, 294, 473, 543, 565], "512": 149, "sampler": [149, 227, 229, 231, 236, 257, 270, 272, 274, 279, 291, 302, 351, 412, 496, 502], "rand": [149, 517, 562], "n_block": [149, 171, 559], "gradient_accumulate_step": 149, "not_use_ms": 149, "dynamic_max_gap": 149, "data_typ": [149, 154, 171, 354, 415, 437], "signround": 149, "advanc": [149, 157, 221, 222, 471, 476, 478, 484, 512, 553, 556, 567], "cheng": 149, "wenhua": 149, "et": [149, 153, 157, 495, 559, 562], "al": [149, 153, 157, 495, 559, 562], "via": [149, 301, 325, 330, 338, 471, 476, 502, 509, 514, 517, 534, 553, 554], "sign": [149, 354, 415, 472, 476, 479, 495, 536, 554, 556, 559, 561], "gradient": [149, 153, 193, 319, 476, 509, 514, 553, 554, 568], "descent": [149, 153, 197, 476, 554], "arxiv": [149, 156, 193, 211, 212, 335, 435, 444, 476, 495, 553, 554, 559, 562], "preprint": [149, 495, 553, 559, 562], "2309": 149, "05516": 149, "2023": [149, 476, 549, 553, 559, 562, 568], "pytorch": [149, 184, 186, 187, 194, 197, 200, 203, 204, 207, 212, 213, 221, 222, 236, 237, 239, 242, 246, 254, 256, 261, 263, 279, 280, 282, 285, 289, 295, 300, 301, 310, 311, 331, 333, 336, 338, 346, 355, 363, 364, 373, 397, 407, 452, 460, 467, 472, 473, 474, 476, 477, 478, 479, 495, 496, 500, 501, 503, 506, 509, 510, 512, 514, 515, 516, 517, 519, 522, 523, 524, 525, 534, 536, 545, 548, 549, 553, 554, 555, 559, 560, 562, 565, 567], "empti": [149, 163, 179, 221, 222, 520, 557], "layer1": [149, 197, 221, 222, 514, 553, 556], "layer_nam": [149, 222, 553], "rang": [149, 150, 171, 240, 241, 254, 283, 284, 295, 416, 437, 456, 462, 476, 477, 479, 495, 497, 499, 500, 501, 502, 514, 537, 539, 552, 553, 556, 559, 562, 564], "learn": [149, 153, 476, 477, 478, 496, 497, 504, 508, 509, 510, 514, 515, 517, 519, 522, 523, 525, 528, 529, 532, 534, 553, 554, 556, 562, 563, 565, 566], "rate": [149, 153, 514, 553, 556], "schedul": [149, 192, 194, 204, 205, 206, 211, 212, 214, 221, 222, 302, 331, 335, 355, 514, 541, 542, 544, 552], "futur": [149, 175, 225, 226, 257, 268, 269, 509, 512, 514, 525, 547, 548, 549, 566], "accumul": [149, 351, 412, 565], "step": [149, 153, 193, 203, 204, 205, 206, 210, 211, 215, 221, 222, 333, 335, 337, 456, 478, 479, 499, 500, 501, 502, 514, 529, 532, 534, 547, 548, 549, 552, 553, 555, 558, 559, 561, 562, 563, 565], "squar": [149, 310, 345, 363, 406, 499, 513, 539, 565], "gap": [149, 499, 516], "addit": [149, 170, 222, 456, 478, 479, 500, 528, 536, 542, 559, 560, 565], "keyword": [149, 162, 222], "argument": [149, 162, 222, 416, 451, 474, 499, 538, 539, 542, 545, 547, 548, 549, 559], "autooptround": 149, "adamw": [149, 186, 261], "autoadamround": 149, "export_compressed_model": [150, 462, 559], "compression_dtyp": [150, 462], "int32": [150, 171, 437, 462, 497, 559], "compression_dim": [150, 462], "scale_dtyp": [150, 462], "float32": [150, 240, 241, 254, 283, 284, 295, 306, 359, 462, 477, 494, 497, 514, 556, 559, 562, 564], "use_optimum_format": [150, 462], "weightonlylinear": [150, 559], "json": [150, 170, 238, 254, 281, 295, 466, 497, 516, 535, 542, 543, 547, 548, 549, 559, 564], "compress": [150, 156, 302, 325, 330, 355, 374, 435, 456, 462, 469, 476, 484, 500, 509, 514, 534, 536, 551, 552, 553, 554, 556, 562, 566, 568], "comoress": [150, 462], "select": [150, 171, 214, 217, 222, 237, 280, 437, 462, 473, 474, 495, 509, 510, 534, 553, 556, 559, 563, 565], "choos": [150, 171, 239, 282, 437, 462, 509, 522, 554, 560, 562, 565, 567], "popular": [150, 302, 355, 469, 476, 477, 478, 495, 500, 503, 504, 507, 512, 514, 553, 556, 559, 565, 566], "huggingfac": [150, 197, 208, 237, 280, 462, 497, 503, 507, 522, 523, 524, 525, 545, 546, 548, 549, 562, 568], "why": [150, 562, 563], "g_idx": 150, "instead": [150, 153, 218, 219, 222, 236, 279, 467, 520, 522, 525, 540, 553, 559], "record": [150, 157, 170, 184, 187, 237, 238, 239, 245, 256, 263, 280, 281, 282, 288, 467, 497, 539, 559, 561, 563, 565], "order": [150, 161, 170, 303, 304, 339, 342, 345, 354, 356, 357, 401, 406, 415, 473, 499, 513, 537, 555, 559, 562, 563, 565], "packed_weight": 150, "qweight": [150, 559], "5": [150, 161, 175, 184, 221, 222, 241, 250, 256, 284, 292, 310, 363, 397, 477, 497, 504, 506, 510, 513, 514, 539, 544, 547, 548, 553, 555, 556, 559, 562, 564, 565, 567, 568], "alwai": [150, 259, 306, 359, 363, 397, 499, 513, 514, 539, 559], "even": [150, 557, 559, 562], "modul": [152, 158, 159, 194, 200, 207, 315, 321, 331, 332, 473, 496, 500, 509, 513, 514, 516, 553, 555, 558, 559, 563, 566], "sgd": [153, 186, 221, 222, 261, 500, 514, 555, 567], "param": [153, 170, 177, 186, 227, 255, 261, 270, 310, 342, 363, 401, 467, 477, 516, 565], "requir": [153, 170, 171, 221, 222, 228, 339, 372, 396, 439, 473, 477, 478, 494, 495, 496, 499, 501, 502, 506, 514, 515, 516, 518, 528, 534, 536, 541, 542, 545, 548, 549, 553, 556, 559, 560, 561, 562, 563, 565, 567], "momentum": [153, 193, 335, 509, 514, 553, 567], "weight_decai": [153, 191, 514, 567], "nesterov": [153, 514, 567], "maxim": [153, 514, 553, 565], "foreach": 153, "differenti": 153, "stochast": 153, "align": [153, 254, 295, 471, 559, 564], "rule": [153, 499, 517, 553], "110mm": 153, "4pt": 153, "textbf": 153, "gamma": 153, "theta_0": 153, "f": [153, 162, 194, 500, 502, 556, 559, 562], "theta": 153, "lambda": [153, 162, 557], "decai": 153, "hspace": 153, "13mm": 153, "mu": [153, 499], "tau": 153, "textit": 153, "ex": 153, "ldot": 153, "5mm": 153, "g_t": 153, "leftarrow": 153, "nabla_": 153, "f_t": 153, "theta_": 153, "neq": 153, "10mm": 153, "15mm": 153, "_t": 153, "_": [153, 225, 226, 268, 269, 397, 473, 474, 476, 477, 478, 495, 499, 500, 502, 504, 506, 514, 515, 516, 517, 523, 527, 529, 531, 532, 539, 542, 543, 551, 553, 556, 559, 560, 561, 562, 563, 565, 567], "g_": 153, "theta_t": 153, "bf": 153, "formula": [153, 553, 562], "On": [153, 556, 568], "deep": [153, 219, 433, 476, 477, 478, 496, 509, 510, 514, 515, 517, 519, 522, 523, 525, 528, 534, 554, 556, 565, 566, 568], "l2": [153, 222, 553], "penalti": [153, 303, 304, 356, 357, 513], "xdoctest": [153, 162], "skip": [153, 162, 563, 565], "9": [153, 193, 221, 222, 473, 510, 514, 553, 555, 562, 565, 567, 568], "zero_grad": [153, 502, 514, 553], "loss_fn": 153, "backward": [153, 439, 456, 500, 501, 502, 514, 552, 553, 556, 560], "subtli": 153, "sutskev": 153, "some": [153, 195, 197, 221, 222, 237, 280, 334, 478, 479, 497, 499, 504, 510, 513, 514, 536, 537, 538, 539, 542, 551, 553, 556, 558, 559, 562, 563, 565, 566, 568], "written": [153, 514], "v_": 153, "p_": 153, "denot": [153, 562], "veloc": 153, "respect": [153, 471, 506, 553, 562, 567], "contrast": [153, 199, 333, 564], "emploi": 153, "form": [153, 308, 361, 499, 500, 534], "analog": 153, "modifi": [153, 208, 239, 282, 396, 415, 473, 479, 502, 506, 538, 539, 553, 567], "d_p_list": 153, "momentum_buffer_list": 153, "has_sparse_grad": 153, "see": [153, 160, 254, 295, 303, 356, 439, 471, 472, 473, 475, 511, 514, 527, 528, 531, 534, 535, 539, 540, 559, 562, 563, 565], "actawareweightqu": 154, "example_input": [154, 164, 167, 169, 170, 171, 221, 222, 300, 466, 504], "algo": [154, 459], "bf16modulewrapp": 155, "bf16modul": 155, "mixed_precision_model": 155, "bf16_symbolic_trac": 155, "fx_sub_module_list": 155, "trace": [155, 157, 168, 170, 197, 221, 222, 300, 404, 473, 524, 565], "_description_": 155, "is_leaf": [156, 435], "judg": [156, 435], "trace_gptq_target_block": [156, 435], "module_typ": [156, 435], "modulelist": [156, 435], "sequenti": [156, 235, 278, 339, 341, 398, 400, 435, 565], "stack": [156, 435], "structur": [156, 198, 209, 210, 221, 222, 335, 353, 414, 435, 467, 509, 533, 535, 538, 547, 553, 554, 556, 563, 566, 568], "critic": [156, 208, 435, 471], "gptq_related_block": [156, 435], "embed": [156, 170, 435, 495, 553], "transformers_pr": [156, 435], "todo": [156, 237, 240, 280, 283, 306, 352, 359, 413, 435], "transformers_nam": [156, 435], "find_lay": [156, 435], "find_layers_nam": [156, 435], "log_quantizable_layers_per_transform": [156, 435], "transformer_block": [156, 435], "maxq": [156, 435], "gptquantiz": [156, 435], "nsampl": [156, 171, 435, 444, 559], "use_max_length": [156, 171, 435, 444], "pad_max_length": [156, 171, 435, 444], "layer_wis": [156, 171, 435, 444, 466, 557], "pretrain": [156, 435, 462, 517, 523], "url": [156, 239, 282, 435, 472, 511, 545, 546, 553], "org": [156, 193, 211, 212, 306, 335, 359, 435, 444, 473, 499, 510, 529, 532, 553], "2210": [156, 435, 444, 559], "17323": [156, 435, 444, 559], "node_collector": 157, "hook": [157, 183, 187, 208, 263, 264, 325, 330, 459, 500, 501, 514, 553, 562, 563], "hessiantrac": 157, "q_model": [157, 161, 222, 312, 397, 428, 432, 473, 476, 496, 497, 499, 502, 504, 507, 508, 513, 514, 516, 536, 537, 556, 557, 558, 559], "criterion": [157, 179, 183, 185, 186, 192, 193, 199, 204, 205, 206, 208, 211, 212, 216, 221, 222, 258, 261, 302, 355, 500, 501, 514, 553, 556, 562, 565, 567], "yao": 157, "zhewei": 157, "pyhessian": 157, "len": [157, 222, 254, 295, 497, 502, 564], "2020": 157, "ieee": [157, 515, 562], "intern": [157, 235, 278, 352, 413, 496, 497, 513, 553], "confer": [157, 553, 562], "big": [157, 499, 559], "dong": 157, "zhen": 157, "hawq": [157, 404, 565], "v2": [157, 404, 496, 502, 504, 505, 510, 523, 560, 562, 565, 566, 568], "system": [157, 162, 177, 255, 467, 494, 520, 553, 568], "33": [157, 568], "18518": 157, "18529": 157, "openvinotoolkit": 157, "nncf": 157, "develop": [157, 374, 472, 473, 510, 514, 515, 517, 523, 534, 540, 553, 554, 558, 561], "hessian_trac": 157, "compare_weight": 157, "float_dict": 157, "ani": [157, 162, 306, 308, 351, 359, 361, 391, 396, 412, 416, 439, 451, 464, 467, 471, 476, 479, 502, 517, 522, 535, 536, 540, 541, 553, 561, 565], "quantized_dict": 157, "compar": [157, 310, 363, 467, 501, 513, 537, 553, 556, 559, 561, 563, 565], "being": [157, 306, 359, 479, 542], "wt_compare_dict": 157, "float_model": 157, "state_dict": [157, 502, 559, 563], "qmodel": 157, "compute_error": 157, "state": [157, 198, 439, 479, 520, 553], "weight_dict": 157, "hawq_top": 157, "enable_act": 157, "portabl": 160, "serial": [160, 162], "copyreg": 160, "mechan": [160, 193, 553, 561, 566], "pickler": 160, "pickletool": 160, "comment": [160, 471, 478, 497, 513, 514, 559, 564], "unpickl": [160, 162], "misc": [160, 511], "format_vers": 160, "compatible_format": 160, "except": [160, 162, 416, 467, 540, 556, 557], "pickleerror": 160, "pickl": [160, 162], "picklingerror": 160, "unpicklingerror": 160, "problem": [160, 237, 280, 310, 363, 513, 515, 535], "secur": [160, 476, 536, 554, 569], "violat": 160, "also": [160, 198, 236, 239, 254, 279, 282, 295, 303, 356, 363, 374, 397, 439, 472, 474, 477, 478, 479, 496, 499, 503, 507, 509, 513, 514, 517, 522, 527, 528, 531, 534, 535, 536, 539, 540, 551, 553, 554, 556, 558, 559, 562, 565], "includ": [160, 184, 193, 197, 199, 214, 216, 221, 222, 237, 239, 246, 254, 256, 280, 282, 289, 295, 301, 311, 333, 338, 416, 439, 467, 471, 477, 478, 479, 496, 497, 499, 510, 511, 512, 513, 514, 517, 520, 523, 528, 540, 544, 547, 548, 549, 553, 556, 558, 559, 563, 565], "necessarili": 160, "limit": [160, 191, 342, 401, 467, 476, 499, 500, 512, 556, 559, 560, 563], "attributeerror": [160, 416], "eoferror": 160, "importerror": [160, 505], "indexerror": 160, "layerwisequ": 161, "pretrained_model_name_or_path": [161, 163], "op_cfg": 161, "output_dir": [161, 462, 514, 522, 523, 538, 539, 545, 548, 549], "memomeri": 161, "file_lik": 162, "map_loc": 162, "pickle_modul": [162, 194], "weights_onli": 162, "pickle_load_arg": 162, "facil": 162, "treat": [162, 496], "storag": [162, 476, 507, 513, 536, 539, 559, 562], "thei": [162, 255, 416, 471, 500, 506, 514, 522, 537, 540, 551], "deseri": 162, "were": [162, 310, 363, 520, 553], "fail": [162, 473, 496, 504, 543], "becaus": [162, 203, 208, 254, 295, 333, 473, 539, 556, 562, 564, 565], "doesn": [162, 254, 295, 477, 502, 514, 515, 535, 567], "certain": [162, 560, 561], "howev": [162, 540, 553, 559, 562], "altern": [162, 221, 222, 397], "callabl": [162, 221, 222, 308, 361, 428, 432, 438, 451, 452, 456, 496], "locat": [162, 172, 217, 254, 295, 502, 520, 527, 531, 534, 542, 556, 560, 564, 567], "resid": 162, "tag": [162, 372, 562, 563], "wa": [162, 221, 222, 477, 514, 539, 540, 543, 554, 565], "builtin": [162, 502], "device_id": 162, "either": [162, 222, 306, 359, 518, 522, 542, 552, 555, 556], "final": [162, 197, 204, 217, 335, 478, 514, 520, 551, 553, 556, 560, 565], "alreadi": [162, 177, 239, 253, 255, 282, 294, 477, 497, 509, 529, 532, 536, 545, 565], "right": [162, 250, 292, 306, 359, 471, 472, 473, 534, 540, 562, 564], "fall": [162, 170], "back": [162, 170, 254, 260, 295, 499, 534, 540], "behavior": [162, 471, 477, 478, 479, 506, 516, 559, 563, 565, 567], "wasn": 162, "appear": [162, 471, 528, 534, 536], "ones": [162, 306, 359, 553], "put": [162, 239, 282, 497, 500], "user": [162, 177, 186, 197, 209, 217, 221, 222, 225, 226, 239, 242, 246, 254, 255, 261, 268, 269, 282, 285, 289, 295, 301, 325, 330, 336, 338, 339, 363, 364, 374, 397, 402, 415, 456, 467, 473, 474, 476, 477, 478, 479, 484, 494, 496, 500, 501, 504, 506, 509, 512, 513, 514, 515, 516, 517, 518, 519, 521, 522, 523, 525, 528, 534, 541, 542, 543, 544, 547, 548, 549, 551, 552, 553, 554, 556, 557, 558, 560, 562, 563, 564, 565, 569], "register_packag": 162, "readlin": 162, "tell": [162, 363, 397, 555], "seek": [162, 559], "o": [162, 416, 510, 519, 537], "pathlik": 162, "metadata": 162, "primit": 162, "unless": [162, 506], "implicitli": 162, "known": [162, 257, 342, 401, 514, 553, 556, 563, 565], "insecur": [162, 536], "possibl": [162, 255, 439, 499, 536, 552, 553, 557, 558, 565], "construct": [162, 237, 240, 241, 244, 252, 257, 259, 260, 262, 280, 283, 284, 287, 363, 368, 372, 415, 459, 471, 478, 479, 497, 502, 553, 565], "malici": 162, "arbitrari": [162, 514, 552], "code": [162, 197, 225, 226, 255, 268, 269, 312, 336, 339, 397, 456, 473, 476, 477, 478, 479, 497, 500, 501, 502, 508, 509, 511, 513, 517, 519, 521, 522, 523, 525, 528, 534, 538, 539, 541, 542, 543, 551, 552, 553, 554, 555, 556, 561, 562, 563, 564], "never": [162, 565], "could": [162, 167, 175, 199, 225, 226, 239, 268, 269, 282, 339, 364, 397, 456, 471, 473, 501, 514, 552, 553, 556, 559, 560, 562, 566], "come": [162, 512, 565], "untrust": 162, "unsaf": 162, "tamper": 162, "trust": [162, 499, 536], "load_state_dict": 162, "ram": 162, "surg": 162, "checkpoint": [162, 372, 466, 516], "By": [162, 197, 221, 222, 303, 356, 478, 479, 513, 516, 527, 528, 531, 553, 554, 559, 565], "decod": [162, 249, 250, 292, 303, 356, 513, 564], "byte": 162, "utf": [162, 253, 294], "unicodedecodeerror": 162, "ascii": 162, "codec": 162, "0x": 162, "incorrect": 162, "extra": [162, 308, 361, 514], "encod": [162, 306, 359, 537, 564], "latin1": 162, "them": [162, 197, 237, 280, 473, 479, 496, 499, 504, 506, 508, 537, 540, 552, 553, 559, 565], "keep": [162, 208, 217, 334, 402, 473, 477, 533, 534, 560], "later": [162, 167, 175, 541, 542, 563], "byte_arrai": 162, "undefin": [162, 217, 334], "filepath": [162, 467], "pt": [162, 466, 510, 516, 538, 554, 556, 558, 559], "onto": 162, "loc": 162, "bytesio": 162, "open": [162, 258, 302, 355, 459, 469, 471, 476, 504, 505, 514, 529, 532, 535, 536, 540, 541, 542, 554, 560], "rb": 162, "buffer": 162, "get_children": 163, "get_named_children": 163, "dowload_hf_model": 163, "repo_id": 163, "cache_dir": 163, "repo_typ": 163, "revis": 163, "download": [163, 239, 282, 497, 499, 510, 539, 545, 560], "hug": [163, 476, 541, 554], "face": [163, 471, 476, 484, 517, 521, 541, 543, 554, 560, 568], "hf": [163, 512, 562, 568], "hub": [163, 476, 503, 507, 525], "load_empty_model": [163, 557], "automodelforcausallm": 163, "get_super_module_by_nam": 163, "module_nam": [163, 193, 194, 204, 205, 206, 207, 209, 210, 211, 212, 214, 216, 335, 467], "father": [163, 197], "update_modul": 163, "load_layer_wise_quantized_model": 163, "load_tensor_from_shard": 163, "shard": 163, "load_tensor": 163, "ipex_mixed_precis": 164, "fakeaffinetensorquantfunct": [165, 450], "affin": [165, 450, 556], "teqlinearfakequ": [165, 450], "orig_lay": [165, 450], "mullinear": [165, 171, 450], "input_scal": [165, 450], "detector": 166, "transformerbasedmodelblockpatterndetector": 166, "pattern_lst": 166, "block_pattern": 166, "detect": [166, 170, 197, 221, 222, 306, 310, 359, 363, 368, 472, 473, 517, 524, 525, 553, 565], "ffn": [166, 208], "torchsmoothqu": [167, 562], "q_func": [167, 225, 226, 268, 269, 342, 345, 346, 348, 398, 401, 402, 406, 407, 409, 477, 478, 514, 565], "traced_model": [167, 168], "whose": [167, 175, 199, 334, 372, 508, 562, 565], "absorb": [167, 170, 171, 175, 559], "trace_and_fuse_sub_graph": 168, "is_qat": 168, "tequant": 169, "absorb_to_lay": [169, 170, 171], "extra_config": [169, 171], "trainabl": [169, 476, 554, 559], "move_input_devic": 170, "auto": [170, 178, 195, 197, 221, 222, 340, 355, 399, 405, 467, 473, 495, 517, 520, 522, 524, 525, 553, 556, 559], "kind": [170, 514], "forward_wrapp": 170, "get_embedding_contigu": 170, "contigu": 170, "is_fused_modul": 170, "_propagate_qconfig_help": 170, "collate_torch_pr": 170, "collate_result": 170, "input2tupl": 170, "append_attr": 170, "fx_model": 170, "fx_white_list": 170, "append": [170, 339, 342, 401, 473, 501, 514, 552], "graphmodul": [170, 473, 558], "dir": [170, 237, 280, 462, 466, 497, 505, 508], "generate_activation_observ": 170, "smooth_quant_en": 170, "observ": [170, 479, 559, 561, 563, 565], "what": [170, 204, 235, 278, 363, 397, 456, 471, 554], "check_cfg_and_qconfig": 170, "op_infos_from_cfg": 170, "output_tensor_ids_op_nam": 170, "paser_cfg": 170, "ops_nam": 170, "get_quantizable_ops_from_cfg": 170, "input_tensor_ids_op_nam": 170, "update_sq_scal": 170, "ipex_config_path": 170, "smoothquant_scale_info": 170, "ipex_config": 170, "auto_copi": 170, "fetch_modul": [170, 455], "op_nam": [170, 218, 221, 222, 353, 414, 455, 467, 468, 478, 514, 553, 563], "simple_infer": 170, "get_example_input": 170, "example_inp": 170, "get_fallback_ord": 170, "confidence_batch": [170, 565], "fallback": [170, 222, 345, 346, 404, 406, 407, 504, 515, 537, 558, 565], "requantize_cfg": 170, "confid": 170, "ordered_op": 170, "get_mse_order_per_fp32": 170, "influenc": [170, 553], "last": [170, 193, 217, 221, 222, 496, 515, 517, 519, 524, 528, 556, 559, 562], "fallback_ord": 170, "get_mse_order_per_int8": 170, "get_torch_vers": 170, "match_datatype_pattern": 170, "calculate_quant_min_max": 170, "unsign": [170, 354, 415, 479, 559], "qmin": 170, "qmax": 170, "get_depth": 170, "depth": [170, 500, 558], "get_dict_at_depth": 170, "target_depth": 170, "nest": [170, 219, 433], "get_element_under_depth": 170, "ops_lst": 170, "get_op_type_by_nam": 170, "quantizable_op": 170, "collect_weight_info": 170, "fc": [170, 222, 553], "_type_": [170, 462], "get_module_input_output": 170, "module_hook_config": 170, "input_func": 170, "output_func": 170, "help": [170, 187, 263, 312, 512, 516, 517, 523, 534, 542, 547, 548, 549, 559, 565, 566], "module_name_list": 170, "fc1": [170, 171], "preprocess": [170, 221, 222, 237, 254, 280, 295, 415, 459, 502, 564], "usag": [170, 178, 236, 279, 306, 312, 339, 359, 416, 433, 455, 478, 497, 502, 503, 517, 525, 536, 542, 547, 548, 549, 551, 555, 559, 564], "input_valu": 170, "output_valu": 170, "total_valu": 170, "get_absorb_lay": 170, "supported_lay": 170, "no_absorb_lay": 170, "allow": [170, 342, 401, 439, 500, 502, 513, 514, 515, 536, 541, 553, 555, 559, 562, 565, 567], "absorpt": 170, "eg": [170, 219, 239, 282, 433, 497, 555], "absorbed_1": 170, "xx": 170, "get_block_prefix": 170, "block_list": 170, "block_num": 170, "block_prefix": 170, "get_hidden_st": 170, "calib": [170, 478], "rest": [170, 541, 542, 547, 548, 549], "part": [170, 195, 204, 333, 335, 473, 510, 515, 529, 532, 542, 544, 553, 557, 562, 566], "total_block_kwarg": 170, "total_block_arg": 170, "quantize_4bit": [171, 437], "quantil": [171, 437, 565], "nf4": [171, 437, 476, 559], "return_int": [171, 437, 444], "fp4": [171, 437, 476, 559], "q_tensor": [171, 437], "qdq_weight_asym": [171, 437], "qdq_weight_sym": [171, 437], "full_rang": [171, 437], "amax": [171, 437], "qdq_weight_actor": [171, 437], "place": [171, 451, 501, 510, 547, 553, 563, 565], "search_clip": [171, 437], "best": [171, 183, 254, 295, 296, 301, 338, 345, 406, 437, 471, 474, 510, 517, 523, 534, 540, 551, 556, 559, 562, 564, 565], "num": [171, 437, 467], "best_clip_ratio": [171, 437], "group_dim": [171, 437, 444], "gptq_perm": [171, 437], "perm": [171, 254, 295, 437, 564], "absorb_lay": 171, "absorb_dict": 171, "absorbed_lay": 171, "fc3": 171, "oom": 171, "teq_quant": 171, "algorithm_registri": 172, "algorithm_typ": 172, "registr": [172, 239, 246, 254, 282, 289, 295, 328], "algorithmschedul": 172, "conf": [172, 177, 183, 222, 225, 226, 255, 268, 269, 312, 319, 320, 322, 323, 324, 325, 330, 342, 345, 346, 348, 352, 364, 374, 397, 398, 401, 402, 406, 407, 409, 413, 416, 456, 473, 474, 476, 479, 494, 500, 507, 508, 514, 515, 516, 536, 538, 539, 552, 556, 557, 558, 559, 561, 562, 565], "control": [172, 221, 222, 473, 514, 540, 553, 565], "phase": [172, 474, 514, 553, 556, 558, 565], "fastbiascorrect": [173, 176], "fast_bias_correct": [174, 221, 222, 355, 556], "weight_correct": [174, 221, 222, 355, 556], "weightcorrect": 176, "1e": [176, 562, 567], "05": [176, 222, 310, 363, 513, 562, 568], "evalu": [177, 183, 199, 221, 225, 226, 237, 255, 268, 269, 280, 296, 303, 306, 307, 308, 310, 312, 356, 359, 360, 361, 363, 364, 374, 397, 456, 459, 474, 477, 478, 497, 500, 501, 508, 509, 512, 513, 514, 515, 517, 523, 525, 528, 534, 551, 553, 556, 561, 562, 563, 565, 567], "set_env_var": [177, 255], "env_var": [177, 255], "overwrite_exist": [177, 255], "env": [177, 255, 505, 547, 548, 549], "set_all_env_var": [177, 255], "physic": [177, 255, 471, 494, 542], "core": [177, 221, 222, 255, 472, 494, 511, 527, 531, 542, 568], "get_architectur": [177, 255], "architectur": [177, 255, 313, 316, 476, 494, 500, 514, 541, 553, 554, 559, 566], "get_threads_per_cor": [177, 255], "thread": [177, 221, 222, 255, 391, 396, 439, 496, 544], "get_thread": [177, 255], "get_physical_id": [177, 255], "socket": [177, 255, 467, 542, 544, 568], "get_core_id": [177, 255], "get_bounded_thread": [177, 255], "core_id": [177, 255], "bind": [177, 255], "run_inst": 177, "b_dataload": [177, 221, 222, 494, 514], "b_func": [177, 494], "benchmarkconfig": [177, 221, 222, 494, 499, 514], "goal": [177, 296, 301, 325, 330, 338, 364, 397, 478, 496, 552, 556, 565], "prefer": [177, 301, 338, 397, 553, 559], "space": [177, 190, 191, 205, 206, 211, 212, 221, 222, 225, 226, 268, 269, 301, 308, 313, 316, 317, 318, 338, 342, 345, 352, 361, 364, 397, 401, 406, 413, 471, 472, 474, 477, 478, 479, 553, 556, 562, 567], "etc": [177, 183, 253, 294, 296, 301, 308, 325, 330, 338, 361, 364, 397, 466, 476, 500, 509, 536, 540, 553, 561, 565], "generate_prefix": 177, "core_list": 177, "command": [177, 255, 456, 499, 502, 517, 519, 522, 527, 531, 535, 536, 538, 539, 540, 542], "numactl": [177, 505, 520, 528], "call_on": 177, "cmd": 177, "log_fil": [177, 390, 395], "window": [177, 494, 510, 534, 535], "config_inst": 177, "raw_cmd": 177, "multi": [177, 195, 197, 208, 306, 359, 363, 397, 474, 496, 497, 509, 514, 551, 553, 556, 565], "trigger": [177, 204, 335], "summary_benchmark": 177, "summari": [177, 456, 499, 529, 532, 563, 568], "profil": [177, 222, 355], "benchmark_with_raw_cmd": 177, "fit_with_raw_cmd": 177, "cores_per_inst": [177, 221, 222, 494, 514, 555], "num_of_inst": [177, 221, 222, 494, 514, 555], "fit": [177, 199, 221, 222, 342, 364, 397, 401, 416, 456, 473, 476, 494, 496, 497, 499, 502, 507, 508, 513, 514, 515, 516, 536, 537, 553, 556, 557, 558, 559], "pb": [177, 221, 222, 364, 372, 397, 476, 494, 502, 507, 514, 516, 536, 539, 547, 563, 568], "eval_dataload": [177, 221, 222, 225, 226, 268, 269, 339, 342, 345, 346, 348, 364, 397, 398, 401, 402, 406, 407, 409, 456, 494, 508, 513, 514, 536, 556, 557, 565], "register_config": 178, "framework_nam": 178, "algo_nam": 178, "prioriti": [178, 545], "examplealgorithm": 178, "examplealgorithmconfig": 178, "larger": [178, 478, 553, 559, 562], "higher": [178, 221, 222, 225, 226, 268, 269, 317, 364, 397, 456, 473, 499, 500, 504, 513, 537, 553, 556, 561], "tri": [178, 222, 565], "stage": [178, 341, 346, 398, 400, 407, 500, 553, 563, 565], "baseconfig": [178, 430, 432, 451], "white_list": [178, 430, 444], "op_name_or_module_typ": [178, 430, 444], "default_white_list": [178, 430, 444], "composableconfig": 178, "frameworkwrapp": [179, 452], "uniform": [179, 495, 559], "intend": [179, 472], "tuner": [179, 225, 226, 268, 269, 301, 338, 364, 397, 456, 556], "obtain": [179, 195, 197, 206, 211, 214, 217, 334, 439, 473, 478, 542, 553, 561, 562, 565], "basetuningconfig": 179, "quant_config": [179, 428, 432, 433, 451, 455], "timeout": [179, 221, 222, 514, 555, 565, 567], "max_trial": [179, 221, 222, 514, 565], "earli": [179, 221, 222, 514, 556, 565, 567], "stop": [179, 221, 222, 514, 565, 566, 567], "exit": [179, 221, 222, 341, 398, 400, 514, 542, 547, 548, 549, 567], "logger": [180, 302, 331, 355, 457, 460, 467], "msg": [181, 463, 543, 547, 548], "debug": [181, 416, 463, 499, 527, 531, 535, 565, 566], "fatal": [181, 463], "warn": [181, 463], "alia": [181, 463, 467, 519, 524], "compon": [183, 296, 302, 339, 355, 473, 499, 502, 510, 511, 517, 534, 542, 552, 553], "quantizationawaretrainingcallback": 183, "pruningcallback": 183, "distillationcallback": 183, "basecallback": 183, "design": [183, 236, 259, 264, 279, 363, 402, 474, 476, 514, 522, 525, 553, 556, 566], "mainli": [183, 215, 264, 337, 476, 514, 553, 556], "prune": [183, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 221, 222, 264, 265, 302, 319, 320, 322, 323, 324, 328, 330, 331, 333, 334, 335, 337, 339, 355, 467, 476, 502, 503, 506, 507, 509, 552, 554, 566, 567], "distil": [183, 192, 221, 222, 256, 263, 264, 302, 355, 476, 503, 507, 509, 552, 566, 567], "In": [183, 201, 202, 203, 208, 209, 210, 214, 222, 236, 264, 279, 306, 333, 335, 359, 374, 439, 471, 473, 474, 476, 477, 478, 496, 497, 499, 500, 501, 502, 513, 514, 524, 527, 528, 531, 537, 538, 539, 540, 547, 548, 549, 551, 552, 553, 556, 558, 559, 561, 562, 563, 564, 565, 566], "adaptor": [183, 221, 222, 354, 415, 420, 428, 459, 476, 479, 509, 557, 558, 560, 562, 563, 566], "deriv": [183, 193, 201, 202, 203, 209, 210, 211, 212, 213, 214, 215, 216, 296, 333, 335, 337, 430, 444], "pipelin": [183, 296, 313, 314, 339, 472, 501, 514, 552], "knowledg": [183, 184, 221, 222, 256, 296, 501, 503, 507, 509, 514, 516, 567], "transfer": [183, 244, 287, 296, 497, 500, 501, 514, 562], "teacher": [183, 221, 222, 296, 500, 501, 514, 568], "student": [183, 187, 221, 222, 237, 263, 280, 296, 497, 500, 501, 568], "distillation_conf": [183, 218, 296], "_epoch_ran": [183, 296], "integ": [183, 203, 204, 221, 222, 296, 306, 310, 317, 333, 335, 359, 363, 416, 477, 479, 495, 556, 559, 562, 565], "much": [183, 193, 221, 222, 254, 295, 296, 500, 528, 562, 564], "epoch": [183, 205, 206, 211, 296, 335, 456, 496, 500, 501, 502, 514, 552, 553, 567], "ran": [183, 296], "eval_frequ": [183, 296], "frequenc": [183, 204, 221, 222, 296, 335, 514, 553, 567], "term": [183, 205, 206, 211, 212, 214, 296, 472, 495, 500, 511, 513, 551, 552, 565], "best_scor": [183, 296], "metric": [183, 221, 222, 225, 226, 258, 268, 269, 296, 301, 302, 317, 325, 330, 338, 339, 355, 364, 397, 456, 459, 474, 477, 478, 497, 499, 502, 514, 515, 536, 556, 561, 562, 563, 565, 566, 567, 568], "best_model": [183, 296, 466, 559], "found": [183, 296, 476, 500, 512, 515, 522, 539, 543, 562, 565, 568], "critet": [184, 256], "tensorflowcrossentropyloss": [184, 256], "pytorchcrossentropyloss": [184, 256], "tensorflowsparsecategoricalcrossentropi": 184, "tensorflowknowledgedistillationloss": [184, 256], "pytorchknowledgedistillationloss": [184, 256, 514], "pytorchintermediatelayersknowledgedistillationloss": [184, 256], "tensorflowcriterion": [184, 256], "pytorchcriterion": [184, 256], "criterion_registri": [184, 256], "criterion_typ": [184, 256], "registry_criterion": [184, 256], "param_dict": [184, 186, 256, 261], "crossentropyloss": [184, 221, 222, 500, 514], "sparsecategoricalcrossentropyloss": 184, "knowledgedistillationframework": [184, 256], "student_model": [184, 222, 256, 514], "teacher_model": [184, 221, 222, 256, 500, 501, 514], "knowledgedistillationloss": [184, 256, 514, 567], "temperatur": [184, 221, 222, 256, 514, 567], "loss_typ": [184, 190, 221, 222, 256, 514, 567], "ce": [184, 221, 222, 256, 514, 567], "loss_weight": [184, 221, 222, 256, 514, 567], "pytorchknowledgedistillationlosswrapp": [184, 256], "tensorflowknowledgedistillationlosswrapp": 184, "tensorflowknowledgedistillationlossextern": [184, 256], "intermediatelayersknowledgedistillationloss": [184, 256], "layer_map": [184, 222, 256, 500], "add_origin_loss": [184, 222, 256], "pytorchintermediatelayersknowledgedistillationlosswrapp": [184, 256], "selfknowledgedistillationloss": [184, 256], "selfknowledg": [184, 256], "pytorchselfknowledgedistillationloss": 184, "pytorchselfknowledgedistillationlosswrapp": 184, "multipl": [186, 195, 223, 224, 228, 229, 237, 238, 240, 241, 242, 243, 244, 248, 251, 254, 261, 266, 267, 271, 272, 274, 280, 281, 283, 284, 285, 286, 287, 291, 293, 295, 311, 364, 365, 366, 368, 374, 439, 494, 497, 504, 514, 541, 544, 552, 553, 561, 562, 565], "tensorflowoptim": [186, 261], "pytorchoptim": [186, 261], "optimizer_registri": [186, 261], "optimizer_typ": [186, 261], "cross": [186, 261, 310, 363, 508, 565], "tensorflowsgd": [186, 261], "tensorflowadamw": [186, 261], "tensorflow_addon": [186, 261], "tensorflowadam": 186, "adam": [186, 567], "pytorchsgd": [186, 261], "record_output": [187, 263], "output_process": [187, 263], "get_activ": [187, 263], "hyper": [188, 567], "sa_optim": [188, 192], "simul": [189, 479], "anneal": 189, "register_search": 190, "searcher": [190, 197, 222, 318], "registri": [190, 191, 193, 199, 204, 213, 214, 215, 216, 333, 335, 337, 474], "sure": [190, 199, 204, 213, 215, 333, 335, 337, 494, 536], "search_spac": [190, 218, 222, 313, 316, 317, 318], "gridsearch": [190, 318], "grid": [190, 222, 318, 474, 553], "whole": [190, 318, 479, 536, 556, 568], "exhaust": [190, 222, 302, 318, 344, 355, 405, 555], "randomsearch": [190, 318], "randomli": [190, 254, 295, 318, 342, 401, 474, 562, 564, 565], "bayesianoptimizationsearch": [190, 318], "bayesian": [190, 222, 302, 318, 344, 355, 405, 474, 553, 555], "xgbsearcher": 190, "higher_is_bett": [190, 221, 222, 363, 397, 565, 567], "reg": [190, 192, 194, 205, 206, 211, 212, 222], "min_train_sampl": [190, 222], "10": [190, 221, 222, 239, 282, 342, 401, 435, 444, 476, 494, 497, 504, 510, 514, 536, 537, 553, 555, 564, 565, 568], "xgboost": [190, 553], "searchspac": 191, "factori": [191, 370, 377, 379, 384, 387, 389, 394], "actual": [191, 310, 363, 502], "interv": [191, 210, 553], "continu": [191, 202, 306, 333, 359, 474, 512, 514, 535, 553, 566], "learning_r": [191, 221, 222, 514, 555, 567], "001": [191, 239, 282, 497, 502, 562, 567], "num_train_epoch": [191, 514, 553], "20": [191, 254, 295, 539, 542, 547, 548, 549, 553, 564, 567, 568], "register_searchspac": 191, "pruner": [191, 192, 302, 319, 320, 321, 322, 323, 325, 330, 331, 333, 336, 355, 514, 553, 567], "basesearchspac": 191, "discretesearchspac": 191, "continuoussearchspac": 191, "hpo": [192, 225, 268, 553], "model_slim": [192, 194, 208], "auto_slim": [192, 194, 196], "pattern_analyz": [192, 194, 196], "weight_slim": [192, 194, 196, 208], "mha": [192, 194, 200, 207, 553], "ninm": [192, 194, 200], "nxm": [192, 194, 200, 210, 221, 222, 329, 333, 553], "basic": [192, 194, 197, 199, 207, 221, 222, 253, 294, 302, 313, 333, 344, 348, 351, 355, 405, 409, 412, 456, 509, 510, 514, 536, 555, 561], "block_mask": [192, 193, 194, 207], "pattern_lock": [192, 194, 207, 221, 222, 302, 321, 355], "retrain_fre": [192, 193, 194, 207, 553], "criteria": [192, 194, 221, 222, 301, 325, 330, 333, 335, 338, 473, 534, 562], "tf_criteria": [192, 194], "callback": [192, 325, 330, 456, 459, 473, 514, 552, 553, 556], "register_criterion": [193, 216], "get_criterion": 193, "pruningcriterion": [193, 216], "about": [193, 216, 467, 471, 496, 514, 539, 540, 553, 558, 565, 566, 568], "score": [193, 199, 204, 208, 216, 221, 222, 303, 304, 306, 307, 308, 310, 335, 356, 357, 359, 360, 361, 363, 404, 459, 473, 513, 537, 551, 553, 561, 565], "magnitudecriterion": [193, 216], "magnitud": [193, 216, 221, 222, 302, 310, 321, 355, 363, 509, 553], "criterion_class": [193, 216], "determin": [193, 199, 204, 216, 221, 222, 461, 471, 473, 495, 553, 556], "gradientcriterion": 193, "absolut": [193, 221, 222, 310, 363, 513, 514, 553, 556, 565], "snipcriterion": 193, "snip": [193, 221, 222, 335, 509, 553, 568], "product": [193, 476, 509, 515, 517, 518, 534, 540, 554, 556, 561, 565], "shot": [193, 211, 212, 215, 264, 335, 337, 474, 509, 514, 553, 554, 559], "connect": [193, 335, 534, 536, 543, 553, 561], "sensit": [193, 319, 335, 509, 553], "1810": [193, 335], "02340": [193, 335], "snipmomentumcriterion": 193, "snip_momentum": [193, 221, 222, 514, 553], "preserv": [193, 495, 553, 559], "beta": 193, "blockmaskcriterion": 193, "retrainfreecriterion": 193, "pickle_protocol": 194, "_use_new_zipfile_seri": 194, "prepare_prun": [194, 553], "loss_func": [194, 213], "assertionerror": [194, 200, 207, 217, 333, 334, 335, 364], "slim": [195, 196, 197, 306, 359, 370, 372, 516, 553], "round_multipli": 195, "spars": [195, 209, 335, 497, 554], "model_slim_ffn2": 195, "perman": [195, 471, 553], "acceler": [195, 500, 514, 517, 525, 534, 537, 541, 553, 554, 558, 559, 562, 565], "directli": [195, 221, 222, 236, 279, 306, 310, 334, 359, 363, 513, 514, 521, 553, 555, 556, 563], "sprase": 195, "model_slim_mha": 195, "parse_auto_slim_config": [195, 553], "ffn2_sparsiti": [195, 553], "mha_spars": [195, 553], "generate_ffn2_pruning_config": 195, "consecut": [195, 197, 198, 553], "generate_mha_pruning_config": 195, "head": [195, 197, 201, 208, 217, 553, 568], "get_attribut": 197, "get_common_modul": 197, "layer2": [197, 514, 553, 556], "nearest": [197, 254, 295, 444, 559, 564], "print_iter": 197, "recipesearch": 197, "root": [197, 237, 238, 239, 242, 280, 281, 282, 285, 310, 363, 497, 502, 513, 514, 567], "levelwis": 197, "wai": [197, 238, 239, 242, 281, 282, 285, 474, 479, 496, 497, 499, 513, 514, 517, 520, 535, 536, 540, 541, 542, 552, 553, 556, 559, 562, 565, 567], "bert": [197, 222, 233, 236, 237, 254, 276, 279, 280, 295, 476, 497, 500, 513, 515, 522, 545, 548, 549, 553, 564, 568], "recipe_sampl": 197, "bertattent": 197, "dens": [197, 215, 221, 222, 337, 537, 553, 568], "searching_result": 197, "jitbasicsearch": 197, "placeholder_shap": 197, "placeholder_dtyp": 197, "jit": [197, 221, 517, 519, 524, 562, 563], "script": [197, 303, 304, 307, 308, 356, 357, 360, 361, 439, 472, 502, 509, 517, 521, 524, 525, 528, 545, 547, 554], "static_graph": 197, "flatten_static_graph": 197, "target_lay": 197, "linear2linearsearch": 197, "target_op_lut": 197, "lookup": 197, "tabl": [197, 208, 467, 479, 499, 504, 537, 539, 568], "current_pattern": 197, "statu": [197, 464, 471, 496, 544, 547, 548, 549, 551, 553], "selfmhasearch": 197, "classifierheadsearch": 197, "classifi": [197, 217, 237, 280, 310, 363, 497, 500], "classifierheadsearchertf": 197, "squeezer": 198, "postcompressionutil": 198, "librari": [198, 258, 302, 355, 391, 469, 476, 510, 514, 515, 519, 528, 534, 554, 556], "relat": [198, 214, 296, 306, 325, 330, 333, 359, 415, 459, 479, 517, 541, 542, 553, 560, 567], "linearcompress": 198, "root_linear": 198, "target_linear": 198, "while": [198, 209, 217, 335, 342, 401, 439, 477, 478, 497, 503, 509, 515, 517, 522, 534, 536, 553, 555, 556, 559, 562], "hidden": [198, 203, 333, 477], "layer_1": 198, "act_fn": 198, "layer_2": 198, "linearcompressioniter": 198, "linear_pattern": 198, "register_pattern": [199, 333], "basepattern": [199, 201, 203], "unit": [199, 333, 472, 542, 553], "4x1": [199, 221, 222, 329, 514, 553, 568], "is_glob": [199, 333], "local": [199, 221, 222, 333, 439, 467, 527, 531, 536, 543, 544, 553, 561], "keep_mask_lay": 199, "invalid_lay": 199, "max_sparsity_ratio_per_op": [199, 204, 218, 221, 222, 514, 553], "sparsiti": [199, 201, 202, 204, 205, 206, 209, 211, 212, 215, 217, 221, 222, 335, 337, 467, 476, 497, 509, 514, 566, 568], "reach": [199, 215, 221, 222, 337, 472, 496, 536, 553, 565], "min_sparsity_ratio_per_op": [199, 218, 221, 222, 514, 553], "target_spars": [199, 218, 221, 222, 514, 553, 555, 567], "pytorchbasepattern": [199, 214], "kerasbasepattern": 199, "get_pattern": [200, 333], "patternmha": 201, "doc": [201, 202, 221, 222, 333, 351, 352, 363, 397, 412, 413, 416, 467, 513, 514, 529, 532, 540], "md": [201, 202, 221, 222, 333, 363, 397], "n": [201, 202, 221, 222, 238, 254, 281, 295, 304, 333, 357, 416, 479, 497, 499, 500, 542, 553, 556, 562, 564], "pytorchpatternninm": 202, "out": [202, 221, 222, 237, 238, 239, 280, 281, 282, 301, 333, 338, 451, 472, 473, 476, 497, 517, 522, 527, 528, 529, 531, 532, 534, 540, 553, 555, 556, 559], "pytorchpatternnxm": 203, "kept": [203, 333], "block_siz": [203, 333, 444, 559], "height": [203, 250, 254, 292, 295, 333, 502, 564, 567], "width": [203, 250, 254, 292, 295, 333, 495, 502, 553, 556, 564, 567], "vertic": [203, 254, 295, 333, 564], "keraspatternnxm": 203, "register_prun": [204, 213, 335], "baseprun": [204, 209, 211, 213], "current_sparsity_ratio": [204, 335], "global_step": [204, 335], "start_step": [204, 218, 221, 222, 335, 514, 553, 555], "end_step": [204, 218, 221, 222, 335, 514, 553, 555], "pruning_frequ": [204, 218, 221, 222, 514, 553], "target_sparsity_ratio": [204, 335], "show": [204, 467, 471, 500, 502, 514, 520, 535, 536, 537, 539, 542, 547, 548, 549, 562, 565, 566], "pytorchbaseprun": [204, 212], "kerasbaseprun": 204, "pytorchbasicprun": 205, "arrang": [205, 206, 211, 212, 238, 239, 242, 281, 282, 285, 497, 553], "proce": [205, 206, 211, 212], "regul": [205, 206, 211, 212], "kerasbasicprun": 205, "pytorchblockmaskprun": 206, "grad": [206, 211], "parse_valid_pruner_typ": 207, "get_prun": [207, 335], "pythonmultiheadattentionprun": 208, "mha_modul": 208, "partial": [208, 553, 556], "qkv": 208, "feedward": 208, "simultan": [208, 517, 541, 552, 555], "qkv_name": 208, "query_layer_nam": 208, "key_layer_nam": 208, "value_layer_nam": 208, "ffn_name": 208, "attention_ffn_nam": 208, "mha_nam": 208, "qkv_modul": 208, "ffn_modul": 208, "mha_compress": 208, "mhacompress": 208, "linear_lay": 208, "independ": [208, 391, 396, 479], "4x": [208, 474, 556], "subsequ": [208, 478, 517, 534], "head_mask": 208, "mha_head_s": 208, "similar": [208, 218, 514, 538, 555, 562, 565, 567], "mha_scor": 208, "lock": [209, 323, 324, 509, 552, 553], "pytorchpatternlockprun": 209, "parent": [209, 210, 215, 329, 335, 337, 563], "pytorchprogressiveprun": 210, "basicprun": [210, 213], "interpol": [210, 254, 295, 513, 553, 564], "fine": [210, 237, 280, 497, 520, 553, 554, 556], "grain": [210, 553, 554, 565], "improv": [210, 439, 472, 495, 514, 517, 534, 535, 537, 553, 554, 556, 558, 559, 565, 566, 568], "ad": [210, 237, 280, 303, 342, 356, 401, 478, 479, 499, 515, 517, 522, 525, 529, 532, 542, 553, 559, 563], "retrain": [211, 501], "pytorchretrainfreeprun": 211, "pruner_class": [211, 212], "fast": [211, 221, 222, 476, 553, 554, 559], "retrainfreeprun": [211, 213], "effect": [211, 476, 477, 553, 554], "2204": 211, "09656": 211, "sparsegptprun": [212, 213], "most": [212, 221, 222, 310, 363, 499, 514, 515, 553, 556, 559, 562, 565, 568], "sparsegpt": [212, 213, 553], "massiv": [212, 553], "One": [212, 479, 497, 502, 509, 539, 553, 554, 565], "2301": [212, 553], "00774": [212, 553], "opt": [213, 476, 512, 522, 553, 562, 565, 568], "least": [213, 336, 472, 514, 553, 565], "templat": [213, 336, 514, 553], "tree": [213, 336, 352, 413, 542], "nlp": [213, 221, 222, 336, 522, 538, 553, 556], "huggingface_model": [213, 336, 538], "classif": [213, 237, 254, 280, 295, 310, 336, 363, 500, 504, 513, 523, 537, 545, 548, 549, 553, 554], "pytorch_prun": [213, 302, 355], "eager": [213, 336, 396, 502, 509, 556, 558, 563], "config_file_path": [213, 336], "pruner_info": [213, 336], "pruning_class": 213, "avail": [213, 221, 222, 368, 480, 482, 486, 489, 492, 503, 505, 507, 509, 527, 531, 536, 541, 542, 543, 547, 548, 549, 553, 565, 568], "regular": [214, 303, 334, 356], "register_reg": 214, "regulariz": 214, "get_reg_typ": 214, "get_reg": 214, "basereg": 214, "grouplasso": 214, "coeff": 214, "lasso": [214, 320, 509, 553], "reg_term": 214, "register_schedul": [215, 337], "get_schedul": [215, 337], "pruningschedul": 215, "gradual": [215, 337, 553], "oneshotschedul": [215, 337], "iterativeschedul": [215, 337], "get_tf_criterion": 216, "get_sparsity_ratio": 217, "elementwise_over_matmul_gemm_conv": 217, "elementwise_over_al": 217, "blockwise_over_matmul_gemm_conv": 217, "get_sparsity_ratio_tf": 217, "check_config": [217, 334], "prune_config": [217, 334], "everyth": [217, 334, 522], "reset_none_to_default": 217, "update_param": 217, "process_weight_config": 217, "global_config": [217, 319, 320, 322, 323, 324], "local_config": [217, 221, 222, 319, 320, 322, 323, 324], "default_config": 217, "pruners_info": 217, "process_yaml_config": 217, "check_key_valid": 217, "template_config": 217, "user_config": 217, "process_and_check_config": [217, 334], "process_config": [217, 334], "parse_last_linear": 217, "often": [217, 496, 500, 539, 552, 553], "might": [217, 473, 536, 565], "caus": [217, 478, 496, 518, 537, 539, 553, 559], "drop": [217, 306, 334, 359, 472, 514, 515, 528, 553, 559, 562, 568], "parse_last_linear_tf": 217, "parse_to_prun": [217, 334], "parse_to_prune_tf": 217, "generate_pruner_config": 217, "dotdict": [217, 218, 222, 374, 467], "get_lay": 217, "collect_layer_input": 217, "layer_idx": 217, "layer_input": 217, "previou": [217, 478, 479, 514, 553, 560, 562, 563, 565, 566, 568], "prunerv2": 218, "pruning_typ": [218, 221, 222, 514, 553], "pruning_scop": [218, 221, 222, 514, 553], "sparsity_decay_typ": [218, 221, 222, 514, 553], "pruning_op_typ": [218, 221, 222, 514, 553], "reg_typ": 218, "criterion_reduce_typ": 218, "resume_from_pruned_checkpoint": 218, "cfg_fname": 218, "parser": 218, "quantization_conf": 218, "pruning_conf": 218, "graph_optimization_conf": [218, 301], "mixedprecision_conf": 218, "benchmark_conf": 218, "nasconfig": [218, 222, 314, 316, 474], "approach": [218, 221, 222, 313, 314, 316, 444, 473, 474, 495, 497, 500, 509, 514, 522, 534, 537, 545, 547, 548, 549, 553, 554, 555, 557, 559, 565, 567], "search_algorithm": [218, 222, 302, 315, 355, 474], "na": [218, 222, 302, 355, 368, 509, 568], "procedur": [218, 474, 553, 565], "defaultconf": 218, "notat": [218, 219, 222, 467], "deep_get": [219, 374, 433], "dot": [219, 433, 515, 556], "person": [219, 433, 471, 554], "john": [219, 433], "deep_set": [219, 374], "sex": [219, 471], "male": 219, "pythonic_config": 220, "random_se": [221, 222, 342, 401, 514, 567], "1978": [221, 222], "workspac": [221, 222, 466, 467, 516, 542, 547, 548, 549], "default_workspac": [221, 222], "resume_from": [221, 222, 467], "tensorboard": [221, 222, 459, 467, 477, 514, 537], "set_random_se": [221, 222, 467], "set_workspac": [221, 222, 467], "set_resume_from": [221, 222, 467], "set_tensorboard": [221, 222, 467], "directori": [221, 222, 238, 239, 281, 282, 372, 462, 464, 466, 467, 497, 502, 505, 527, 529, 531, 532, 538, 540, 563], "histori": [221, 222, 466, 467, 534, 538, 565], "nc_workspac": [221, 222, 537, 538], "datetim": [221, 222], "now": [221, 222, 254, 295, 473, 474, 479, 497, 502, 525, 555, 564, 565], "strftime": [221, 222], "d_": [221, 222], "resum": [221, 222, 225, 226, 268, 269, 346, 348, 398, 401, 402, 406, 407, 409], "flag": [221, 222, 304, 357, 499], "visual": [221, 222, 476, 525, 534, 561, 563, 565, 566], "displai": [221, 222, 351, 352, 412, 413, 467, 534, 537], "2022": [221, 222, 476, 511, 553, 559, 562, 568], "workspace_path": [221, 222], "accuracycriterion": [221, 222, 514, 565], "rel": [221, 222, 374, 514, 537, 555, 565, 567, 568], "tolerable_loss": [221, 222, 514, 565], "accept": [221, 222, 416, 471, 494, 496, 536, 559], "accuracy_criterion": [221, 222, 374, 514, 538, 551, 555, 565, 567], "warmup": [221, 222, 494, 514, 555], "inter_num_of_thread": [221, 222, 391, 396, 514, 555], "intra_num_of_thread": [221, 222, 391, 396, 514, 555], "benchmark": [221, 222, 257, 302, 339, 355, 374, 467, 476, 484, 516, 517, 521, 525, 528, 534, 537, 565, 566, 567, 568], "onnxrt_trt_ep": [221, 222, 515, 556], "onnxrt_cuda_ep": [221, 222, 515, 556], "inter": [221, 222], "intra": [221, 222], "quantizationconfig": 221, "post_training_static_qu": [221, 497, 514, 555, 565], "calibration_sampling_s": [221, 222, 514, 539], "op_type_dict": [221, 222, 479, 555, 556, 559, 565], "op_name_dict": [221, 222, 499, 514, 537, 539, 556, 565], "strategy_kwarg": [221, 222, 561, 565], "quant_level": [221, 222, 537, 559, 562, 565], "posttrainingquantconfig": [221, 222, 397, 473, 476, 479, 496, 499, 504, 507, 513, 514, 516, 536, 537, 538, 539, 556, 557, 558, 559, 561, 562, 565], "quantizationawaretrainingconfig": [221, 222, 456, 473, 501, 504, 514, 556, 558, 565], "cv": [221, 222, 553], "object_detect": [221, 222, 306, 359], "recommendation_system": [221, 222], "explicitli": [221, 222, 508, 553], "overrid": [221, 222, 467], "quantiztaion": [221, 222], "smooth_quant_arg": [221, 222, 556, 562], "gemm_to_matmul": [221, 222, 556], "graph_optimization_level": [221, 222, 555, 556], "disable_al": [221, 222, 555], "enable_bas": [221, 222], "enable_extend": [221, 222], "enable_al": [221, 222], "first_conv_or_matmul_quant": [221, 222, 556], "last_conv_or_matmul_quant": [221, 222, 556], "pre_post_process_quant": [221, 222, 556], "postprocess": [221, 222, 248, 251, 254, 258, 295, 302, 355, 363, 397, 459, 477, 514, 563, 564], "dedic": [221, 222], "quant_format": [221, 222, 300, 504, 537], "constraint": [221, 222, 301, 338, 514, 553, 561, 565, 567], "conv1": [221, 222, 556, 567], "tuning_strategi": [221, 222], "guarante": [221, 222, 514], "models": [221, 222, 374, 514, 551, 555], "footprint": [221, 222, 301, 325, 330, 338, 374, 501, 514, 551, 553, 555, 557], "excluded_precis": [221, 222, 558], "exclud": [221, 222, 477, 495, 558], "conserv": [221, 222, 355, 405], "use_distributed_tun": 221, "weightpruningconfig": [221, 222, 514, 552, 553], "pruning_config": [221, 222, 514, 553], "98": [221, 222, 514, 553, 555, 568], "exp": [221, 222, 514, 553], "link": [221, 222, 237, 280, 363, 397, 495, 497, 504, 527, 531, 534, 559, 568], "90": [221, 222, 557, 567, 568], "magnitude_progress": [221, 222], "snip_progress": [221, 222], "snip_momentum_progress": [221, 222], "feasibl": [221, 222], "situat": [221, 222, 502, 553], "unstructur": [221, 222, 329, 509, 553, 568], "8x1": [221, 222], "channelx1": [221, 222, 553], "1xchannel": [221, 222, 553], "itrex": [221, 222, 562], "start": [221, 222, 254, 295, 306, 359, 402, 510, 539, 554, 564, 565, 566, 569], "togeth": [221, 222, 254, 295, 500, 510, 521, 554, 563, 564], "sort": [221, 222, 345, 406, 499, 537, 559, 565], "sinc": [221, 222, 301, 303, 325, 330, 338, 356, 500, 504, 510, 513, 528, 534, 539, 552, 559, 560], "lead": [221, 222, 500, 514, 515, 539, 553, 559, 562], "increas": [221, 222, 498, 509, 517, 534, 539, 559, 565], "cube": [221, 222, 553], "6": [221, 222, 506, 556, 562, 565, 568], "update_config": [221, 222, 428], "knowledgedistillationlossconfig": [221, 222, 500, 501, 514, 552], "hyperparamet": [221, 222, 351, 561, 562, 565], "entropi": [221, 222, 495, 565], "groundtruth": [221, 222, 306, 359], "label": [221, 222, 225, 226, 237, 239, 240, 241, 242, 245, 250, 254, 259, 268, 269, 280, 282, 283, 284, 285, 288, 292, 295, 303, 305, 310, 356, 358, 363, 364, 397, 456, 473, 496, 497, 499, 513, 514, 556, 564], "sum": [221, 222, 310, 363, 499, 500], "distillationconfig": [221, 222, 456, 500, 501, 514, 552], "prepare_compress": [221, 222, 456, 473, 500, 501, 514, 552, 553, 556], "criterion_conf": [221, 222], "d_conf": [221, 222, 501, 514, 552], "compression_manag": [221, 222, 456, 473, 500, 501, 514, 552, 553, 556], "featur": [221, 222, 237, 238, 250, 254, 280, 281, 292, 295, 472, 476, 494, 496, 498, 500, 514, 515, 516, 517, 521, 522, 525, 534, 536, 540, 553, 554, 560, 564], "distil_loss": [221, 222, 514], "ni_workload_nam": 222, "onnxrt_dnnl_ep": [222, 515, 556], "onnxrt_dml_ep": [222, 556], "tuningcriterion": [222, 514, 551, 561, 565], "tuning_criterion": [222, 514, 551, 561, 565], "npu": [222, 556], "xpu": [222, 439, 525, 556], "ptq": [222, 397, 473, 499, 502, 509, 514, 539, 556, 562, 563, 565], "meet": [222, 228, 339, 341, 398, 400, 473, 478, 551, 554, 555, 556, 559, 563, 565], "mse_v2": [222, 302, 344, 355, 405], "hawq_v2": [222, 355, 405], "docstr": [222, 416], "workload": [222, 464, 467, 536, 554], "insight": [222, 464, 476, 499, 554, 560, 565, 566], "copi": [222, 334, 467, 496, 540], "deepcopi": 222, "model_origin": [222, 397, 558], "qat_op_name_dict": 222, "low_memory_usag": 222, "hpoconfig": 222, "xgb": 222, "bo": 222, "intermediatelayersknowledgedistillationlossconfig": [222, 500], "relationship": [222, 536], "student_layer_nam": 222, "student_layer_output_process": 222, "teacher_layer_nam": 222, "teacher_layer_output_process": 222, "desir": [222, 250, 254, 292, 295, 478, 479, 553, 562, 564], "serv": [222, 372, 439, 542, 547, 548, 549], "numer": [222, 310, 363, 479, 515, 554, 556, 559], "abbrevi": 222, "l1": 222, "selfknowledgedistillationlossconfig": [222, 500, 514], "student1_layer_name1": 222, "teacher_layer_name1": 222, "student2_layer_name1": 222, "student1_layer_name2": 222, "teacher_layer_name2": 222, "student2_layer_name2": 222, "soft": 222, "hard": [222, 496, 499], "resblock": 222, "deepst": 222, "02": [222, 568], "mixedprecisionconfig": [222, 364, 416, 514, 515], "mixedprecis": [222, 311, 514], "won": [222, 556, 559], "work": [222, 301, 338, 439, 475, 478, 496, 500, 529, 532, 540, 558, 559, 560, 562, 563], "mix_precis": [222, 355, 416, 514, 515], "converted_model": [222, 364, 514, 515], "exportconfig": 222, "14": [222, 299, 300, 504, 510, 549, 568], "dynamic_ax": [222, 300, 504], "qlinear": [222, 239, 246, 282, 289, 310, 363, 477, 524], "ax": [222, 300], "onnxqlinear2qdqconfig": 222, "onnxqlinear2qdq": 222, "torch2onnxconfig": [222, 504], "torch2onnx": [222, 297, 302, 355], "qdq_op_fp32_bia": 222, "qdq_op_int32_bia": 222, "qdq_op_fp32_bias_qdq": 222, "resnet50": [222, 476, 499, 502, 504, 515, 517, 521, 553, 556, 561, 568], "int8_onnx_config": [222, 504], "randn": [222, 504], "224": [222, 250, 292, 476, 497, 502, 504, 507, 514, 517, 536, 564, 567], "batch_siz": [222, 227, 229, 235, 236, 237, 238, 257, 270, 272, 278, 279, 280, 281, 300, 474, 496, 497, 502, 504, 508, 514, 517, 556], "tf2onnxconfig": [222, 504], "tf2onnx": [222, 297, 302, 355], "output_graph": 222, "dyna": [222, 302, 315, 355, 474, 509, 555], "sigopt": [223, 224, 266, 267, 302, 355, 554], "tpe": [223, 224, 266, 267, 302, 355], "sigopttunestrategi": [225, 268], "q_dataload": [225, 226, 268, 269, 342, 345, 346, 348, 398, 401, 402, 406, 407, 409, 508, 565], "eval_metr": [225, 226, 364, 397, 398, 401, 402, 406, 407, 409, 456, 513, 536, 556], "q_hook": [225, 226, 268, 269, 342, 345, 346, 348, 398, 401, 402, 406, 407, 409], "mandatori": [225, 226, 268, 269, 397, 514, 567], "yield": [225, 226, 235, 257, 268, 269, 278, 342, 364, 397, 401, 416, 456, 496, 556, 565], "well": [225, 226, 268, 269, 364, 397, 456, 474, 476, 497, 553, 556, 560, 562, 567], "taken": [225, 226, 268, 269, 364, 397, 456, 556], "reserv": [225, 226, 268, 269], "abl": [225, 226, 268, 269, 364, 397, 456, 525, 534, 556], "scalar": [225, 226, 268, 269, 364, 397, 456, 513, 556, 565], "pseudo": [225, 226, 268, 269, 397, 456, 559, 563], "someth": [225, 226, 239, 268, 269, 282, 397, 456], "fefin": [226, 269], "tpetunestrategi": [226, 269], "basedatalod": [227, 270], "basedataload": [227, 232, 234, 270, 275, 277], "last_batch": [227, 229, 236, 257, 270, 272, 279, 496], "rollov": [227, 229, 236, 257, 270, 272, 279, 496], "collate_fn": [227, 229, 230, 236, 257, 270, 272, 273, 279, 496, 497], "batch_sampl": [227, 229, 236, 257, 270, 272, 279, 496], "num_work": [227, 229, 236, 257, 270, 272, 279, 496, 514, 556], "pin_memori": [227, 229, 236, 257, 270, 272, 279, 496], "_generate_dataload": [227, 270], "check_dataload": 228, "default_col": [229, 272], "outer": [229, 272], "defaultdataload": [229, 236, 272, 279], "style": [230, 244, 273, 287, 416, 472, 497, 508], "drop_last": [230, 235, 273, 278], "iterablefetch": [230, 273], "indexfetch": [230, 273], "base_dataload": [231, 274, 291, 302], "default_dataload": [231, 274, 291, 302], "fetcher": [231, 274, 291, 302], "mxnet_dataload": [231, 274, 291, 302], "onnxrt_dataload": [231, 274, 291, 302, 390], "pytorch_dataload": [231, 274, 291, 302], "tensorflow_dataload": [231, 274, 291, 302, 395], "mxnetdataload": [232, 275], "onnxrtbertdataload": [233, 276], "variant": [233, 276], "onnxrtdataload": [233, 276, 390], "pytorchdataload": [234, 277], "data_sourc": [235, 278, 459], "__iter__": [235, 239, 278, 282, 496, 497, 514], "matter": [235, 278, 558], "iterablesampl": [235, 278], "squential": [235, 278], "your": [235, 237, 278, 280, 439, 472, 496, 497, 499, 502, 511, 514, 517, 520, 521, 522, 527, 528, 529, 531, 532, 534, 536, 540, 542, 547, 548, 549, 553, 554, 561, 563, 565, 566], "clear": [235, 278, 477, 506, 513, 514], "iterabledataset": [235, 239, 278, 282], "try": [235, 278, 473, 499, 537, 553, 556, 562, 565], "indexdataset": [235, 278], "__getitem__": [235, 239, 254, 278, 282, 295, 496, 497, 514], "__len__": [235, 239, 278, 282, 497], "retriev": [235, 278, 553], "sequentialsampl": [235, 278], "batchsampl": [235, 278], "tfdatadataload": [236, 279], "tensorflow1": [236, 279], "coupl": [236, 279], "satisfi": [236, 279, 499, 510, 540], "tf1": [236, 279, 516], "although": [236, 279, 561], "tensorflowbertdataload": [236, 279], "tensorflowmodelzoobertdataload": [236, 279], "zoo": [236, 254, 279, 295, 476, 503, 507, 568], "tensorflowdataload": [236, 279, 395], "pytorchbertdataset": [237, 280], "model_typ": [237, 280, 467, 497], "tensordataset": [237, 280, 497], "repo": [237, 280, 470, 472, 497, 503, 527, 529, 531, 532, 569], "easi": [237, 280, 338, 504, 514, 537, 541, 554, 556, 559, 561], "squad": [237, 254, 280, 295, 307, 308, 310, 360, 361, 363, 497, 513, 553, 564, 568], "distilbert": [237, 280, 476, 497, 515, 554, 568], "xlnet": [237, 280, 497, 568], "xlm": [237, 280, 497, 568], "101": [237, 280, 310, 363, 513, 543, 562, 568], "2043": [237, 280], "2001": [237, 280], "onnxrtbertdataset": [237, 280], "data_dir": [237, 280, 497], "model_name_or_path": [237, 280, 497, 514, 522, 523, 538, 545, 548, 549, 557], "max_seq_length": [237, 254, 280, 295, 497, 564], "do_lower_cas": [237, 253, 254, 280, 294, 295, 497, 564], "mrpc": [237, 280, 310, 363, 497, 513, 522, 545, 548, 549, 553, 565, 568], "dynamic_length": [237, 280, 497], "shortcut": [237, 280, 497], "longer": [237, 254, 280, 295, 497, 564], "shorter": [237, 254, 280, 295, 497, 564], "lowercas": [237, 280, 497], "choic": [237, 280, 477, 497, 513, 540, 562], "qqp": [237, 280, 497, 513, 568], "qnli": [237, 280, 497, 513, 568], "rte": [237, 280, 497, 513, 568], "st": [237, 280, 497, 513], "cola": [237, 280, 497, 513, 568], "mnli": [237, 280, 497, 513, 568], "wnli": [237, 280, 497, 513], "mobilebert": [237, 280, 497, 500, 568], "roberta": [237, 280, 497, 568], "uncas": [237, 254, 280, 295, 497, 564, 568], "load_and_cache_exampl": [237, 280], "convert_examples_to_featur": [237, 254, 280, 295], "max_length": [237, 280], "label_list": [237, 280, 310, 363], "output_mod": [237, 280], "pad_token": [237, 280], "pad_token_segment_id": [237, 280], "mask_padding_with_zero": [237, 280], "inputfeatur": [237, 254, 280, 295], "properti": [237, 280, 415, 511], "vocabulari": [237, 253, 254, 280, 294, 295, 564], "attention_mask": [237, 280, 514], "usual": [237, 280, 478, 499, 500, 539, 552, 553, 556, 557, 562], "NOT": [237, 280, 506], "token_type_id": [237, 280, 514], "segment": [237, 280, 304, 306, 357, 359, 472], "portion": [237, 280], "regress": [237, 280, 472, 499], "seq_length": [237, 280], "tensorflowbertdataset": [237, 280], "label_fil": [237, 254, 280, 295, 497, 564], "tfrecord": [237, 238, 239, 280, 281, 282, 497], "guid": [237, 280, 473, 476, 497, 500, 510, 517, 525, 534, 569], "parsedecodebert": [237, 280], "tensorflowmodelzoobertdataset": [237, 238, 280, 281], "num_cor": [237, 238, 242, 280, 281, 285, 497], "28": [237, 238, 242, 280, 281, 285, 497, 568], "coco": [238, 245, 249, 281, 288, 306, 310, 359, 363, 513, 553], "parsedecodecoco": [238, 281], "cocorecorddataset": [238, 281], "interleav": [238, 281, 497], "parallel": [238, 281, 391, 396, 439, 497, 514, 541, 544, 565], "cocoraw": [238, 281, 497], "img_dir": [238, 281, 497], "val2017": [238, 281, 497], "anno_dir": [238, 281, 497], "annot": [238, 281, 306, 359, 416, 478, 479, 497, 513, 553, 565], "instances_val2017": [238, 281, 497], "jpg": [238, 242, 244, 281, 285, 287, 476, 497], "imag": [238, 239, 242, 244, 250, 254, 281, 282, 285, 287, 292, 295, 306, 359, 497, 502, 504, 553, 555, 562, 563, 564, 568], "coconpi": [238, 281, 497], "npy_dir": [238, 281, 497], "npy": [238, 281, 497], "tensorflowdataset": [239, 282], "pytorchdataset": [239, 282], "mxnetdataset": [239, 282], "onnxrtqldataset": [239, 282], "onnxrtitdataset": [239, 282], "IT": [239, 246, 282, 289, 554], "pytorchmxnetwrapdataset": [239, 282], "datafunc": [239, 282], "pytorchmxnetwrapfunct": [239, 254, 282, 295], "framework_dataset": [239, 282], "convent": [239, 282, 306, 359, 500], "imageclassifi": [239, 282], "tensorflow_itex": [239, 242, 244, 246, 282, 285, 287, 289, 496, 555], "onnxrt_qdq": [239, 246, 282, 289, 555], "onnxrt_qlinearop": [239, 246, 254, 282, 289, 295, 555], "onnxrt_integerop": [239, 246, 254, 282, 289, 295, 555], "pytorch_ipex": [239, 246, 282, 289, 514, 555, 567], "pytorch_fx": [239, 246, 282, 289, 514, 555], "dataset_registri": [239, 282], "dataset_typ": [239, 282], "dataset_format": [239, 282], "data_format": [239, 250, 282, 292], "raw_imag": [239, 282], "overwrit": [239, 282, 527, 531], "download_url": [239, 282], "filenam": [239, 282, 467, 497, 540], "md5": [239, 282], "address": [239, 282, 471, 515, 536, 539, 542, 554], "gen_bar_updat": [239, 282], "check_integr": [239, 282], "fpath": [239, 282], "checksum": [239, 282], "calculate_md5": [239, 282], "chunk_siz": [239, 282], "cifar10": [239, 282, 497], "cifar100": [239, 282, 497], "databas": [239, 282, 542], "www": [239, 282, 497, 568], "toronto": [239, 282, 497], "kriz": [239, 282, 497], "cifar": [239, 282, 497, 568], "tar": [239, 282, 497, 499, 529, 532], "gz": [239, 282, 497, 499, 529, 532], "manual": [239, 282, 497, 517, 523, 525, 528, 542, 547, 548, 549, 553], "subset": [239, 242, 282, 285, 497, 539], "internet": [239, 282, 497, 536], "again": [239, 282, 497, 537, 539, 558], "pytorchcifar10": [239, 282], "mxnetcifar10": [239, 282], "tensorflowcifar10": [239, 282], "pytorchcifar100": [239, 282], "mxnetcifar100": [239, 282], "tensorflowcifar100": [239, 282], "mnist": [239, 282, 497, 502], "nation": [239, 282, 471], "institut": [239, 282], "standard": [239, 254, 282, 295, 472, 478, 499, 504, 513, 564, 565], "technologi": [239, 282, 512, 514], "fashionmnist": [239, 282, 497], "npz": [239, 282, 497], "idx1": [239, 282, 497], "ubyt": [239, 282, 497], "idx3": [239, 282, 497], "t10k": [239, 282, 497], "pytorchmnist": [239, 282], "mxnetmnist": [239, 282], "tensorflowmnist": [239, 282], "pytorchfashionmnist": [239, 282], "mxnetfashionmnist": [239, 282], "tensorflowfashionmnist": [239, 282], "imagefold": [239, 282, 497, 502, 514], "expect": [239, 282, 471, 472, 505, 512, 534, 556, 559, 565], "subfold": [239, 282, 537], "belong": [239, 282, 368, 556], "class_1": [239, 282, 497], "xxx": [239, 282, 497, 514], "png": [239, 282, 497], "xxy": [239, 282, 497], "xxz": [239, 282, 497], "class_n": [239, 282, 497], "123": [239, 282, 497, 564], "nsdf3": [239, 282, 497], "asd932_": [239, 282, 497], "categori": [239, 282, 305, 358, 494, 497, 524], "mxnetimagefold": [239, 282], "tensorflowtfrecorddataset": [239, 282], "tensorflowimagerecord": [239, 282], "imagenet": [239, 242, 250, 282, 285, 292, 474, 499, 514, 523, 539, 553, 563, 564, 567, 568], "000": [239, 282, 476, 497], "099": [239, 282, 497], "tensorflowvocrecord": [239, 282], "pascal": [239, 282], "voc": [239, 282, 310, 363], "2012": [239, 282], "00000": [239, 282], "00004": [239, 282], "00001": [239, 282], "00003": [239, 282], "dummydataset": [240, 241, 283, 284], "127": [240, 241, 283, 284, 497, 556, 562, 568], "stand_norm": [240, 241, 283, 284, 497], "dummy_v2": [241, 284, 497], "sparse_dummy_v2": [241, 284, 497], "label_shap": [241, 284, 497], "sparsedummydataset": [241, 284], "dense_shap": [241, 284, 497], "sparse_ratio": [241, 284, 497], "imagenetraw": [242, 285, 497], "data_path": [242, 285, 497], "image_list": [242, 285, 497], "img1": [242, 285, 497], "img2": [242, 285, 497], "imgx": [242, 285, 497], "val_map": [242, 285, 497], "txt": [242, 285, 497, 499, 510, 536, 538, 539, 541, 542], "pytorchimagenetraw": [242, 285], "mxnetimagenetraw": [242, 285], "tensorflowimagenetraw": [242, 285], "inteltensorflow": [242, 244, 285, 287, 510], "tensorflowimagenetdataset": [242, 285], "onnxrtimagenetdataset": [242, 285], "bert_dataset": [243, 248, 286, 291, 302, 355], "coco_dataset": [243, 248, 286, 291, 302, 355], "dummy_dataset": [243, 248, 286, 291, 302, 355], "dummy_dataset_v2": [243, 248, 286, 291, 302, 355], "imagenet_dataset": [243, 248, 286, 291, 302, 355], "style_transfer_dataset": [243, 248, 286, 291, 302, 355], "styletransferdataset": [244, 287], "content_fold": [244, 287, 497], "style_fold": [244, 287, 497], "crop_ratio": [244, 287, 497], "resize_shap": [244, 287, 497], "image_format": [244, 287, 497], "holder": [244, 287, 497], "labelbalancecocorecordfilt": [245, 288], "balanc": [245, 288, 559, 562], "labelbalancecocorawfilt": [245, 288], "tensorflowfilt": [246, 289], "onnxrtqlfilt": [246, 289], "onnxrtitfilt": [246, 289], "pytorchfilt": [246, 289], "mxnetfilt": [246, 289], "filter_registri": [246, 289], "filter_typ": [246, 289], "__call__": [246, 289], "coco_filt": [247, 248, 290, 291, 302, 355], "imagenet_transform": [248, 251, 291, 293, 302, 355], "parsedecodecocotransform": 249, "quantizedinput": [250, 292, 564], "labelshift": [250, 292, 564], "label_shift": [250, 292, 564], "parsedecodeimagenet": [250, 292, 564], "proto": [250, 254, 292, 295, 564], "parsedecodeimagenettransform": [250, 292], "tensorflowtransposelastchannel": 250, "tensorflowshiftrescal": 250, "rescal": [250, 254, 295, 564], "tensorflowresizecropimagenettransform": [250, 292], "random_crop": [250, 292, 564], "resize_sid": [250, 292, 564], "resize_method": [250, 292], "bilinear": [250, 254, 292, 295, 564], "random_flip_left_right": [250, 292, 564], "mean_valu": [250, 292, 564], "channels_last": [250, 292, 517], "subpixel": [250, 292], "rgb": [250, 292], "seri": [250, 292, 476, 510, 514, 564], "applic": [250, 292, 479, 504, 517, 534, 536, 542, 543, 547, 548, 554, 559, 562, 563, 564, 566], "crop": [250, 254, 292, 295, 497, 564], "flip": [250, 254, 292, 295, 564], "left": [250, 254, 292, 295, 528, 534, 562, 564], "std": [250, 254, 292, 295, 514, 564], "bilinearimagenettransform": [250, 292], "central_fract": [250, 292, 564], "875": [250, 292, 564], "fraction": [250, 292, 564], "onnxbilinearimagenettransform": [250, 292], "onnxresizecropimagenettransform": [250, 292], "std_valu": [250, 292], "229": [250, 292, 514], "225": [250, 292, 514], "resizewithaspectratio": [250, 292], "87": [250, 292, 568], "inter_pol": [250, 292], "cv2": [250, 292], "inter_area": [250, 292], "aspect": [250, 254, 292, 295, 564], "postprocess_cl": [252, 262, 514], "user_postprocess": [252, 262], "convert_to_unicod": [253, 294], "unicod": [253, 294], "assum": [253, 294, 306, 317, 359, 477, 506, 534], "load_vocab": [253, 294], "vocab_fil": [253, 254, 294, 295, 564], "convert_by_vocab": [253, 294], "vocab": [253, 294], "whitespace_token": [253, 294], "whitespac": [253, 294, 308, 361], "clean": [253, 294, 514], "piec": [253, 294, 303, 356, 513, 559], "fulltoken": [253, 294], "tokenzi": [253, 294], "basictoken": [253, 294], "punctuat": [253, 294, 303, 308, 356, 361], "lower": [253, 254, 294, 295, 308, 361, 402, 501, 553, 554, 556, 562, 564, 565], "wordpiecetoken": [253, 294], "unk_token": [253, 294], "unk": [253, 294], "max_input_chars_per_word": [253, 294], "wordpiec": [253, 254, 294, 295, 564], "concat_gener": [254, 295], "inc": [254, 295, 471, 478, 517, 524, 534, 536, 541, 554, 555, 560, 565], "tensorflowtransform": [254, 295], "mxnettransform": [254, 295], "pytorchtransform": [254, 295], "onnxrtqltransform": [254, 295], "onnxrtittransform": [254, 295], "transform_registri": [254, 295], "transform_typ": [254, 295], "basetransform": [254, 295], "tensorflowwrapfunct": [254, 295], "transform_func": [254, 295], "pytorchmxnettransform": [254, 295], "get_torchvision_map": [254, 295], "torchvis": [254, 295, 503, 507, 517, 523, 537], "composetransform": [254, 295], "transform_list": [254, 295, 564], "compos": [254, 295, 459, 564], "croptoboundingbox": [254, 295, 564], "offset_height": [254, 295, 564], "offset_width": [254, 295, 564], "target_height": [254, 295, 564], "target_width": [254, 295, 564], "box": [254, 295, 306, 310, 359, 363, 473, 513, 517, 528, 534, 563, 564, 565], "coordin": [254, 295, 342, 401, 541, 564, 565], "top": [254, 295, 301, 310, 325, 330, 338, 363, 472, 513, 534, 537, 539, 564], "corner": [254, 295, 472, 477, 479, 564], "horizont": [254, 295, 564], "mxnetcroptoboundingbox": [254, 295], "onnxrtcroptoboundingbox": [254, 295], "tensorflowcroptoboundingbox": [254, 295], "resizewithratio": [254, 295, 564], "min_dim": [254, 295, 564], "800": [254, 295, 564], "max_dim": [254, 295, 564], "1365": [254, 295, 564], "constant_valu": [254, 295], "longest": [254, 295, 564], "side": [254, 295, 497, 528, 564], "exce": [254, 295, 559, 564], "tensorflowresizewithratio": [254, 295], "permut": [254, 295, 564], "tensorflowtranspos": [254, 295], "mxnettranspos": [254, 295], "pytorchtranspos": [254, 295], "randomverticalflip": [254, 295, 564], "tensorflowrandomverticalflip": [254, 295], "randomhorizontalflip": [254, 295, 514, 564], "tensorflowrandomhorizontalflip": [254, 295], "toarrai": [254, 295, 564], "pil": [254, 295, 564], "casttftransform": [254, 295], "castonnxtransform": [254, 295], "castpytorchtransform": [254, 295], "centercroptftransform": [254, 295], "center": [254, 295, 475, 476, 510, 564, 565], "paddedcentercroptransform": [254, 295], "crop_pad": [254, 295], "resizetftransform": [254, 295], "bicub": [254, 295, 564], "resizepytorchtransform": [254, 295], "randomcroptftransform": [254, 295], "randomresizedcroppytorchtransform": [254, 295], "08": [254, 295, 564, 568], "randomresizedcropmxnettransform": [254, 295], "randomresizedcroptftransform": [254, 295], "normalizetftransform": [254, 295], "deviat": [254, 295, 499, 564], "broadcast": [254, 295, 502, 564], "rescalekeraspretraintransform": [254, 295], "rescaletftransform": [254, 295], "rescaletransform": [254, 295], "alignimagechanneltransform": [254, 295], "must": [254, 295, 306, 359, 439, 472, 473, 478, 494, 496, 510, 556, 564], "pytorchalignimagechannel": [254, 295], "tondarraytransform": [254, 295], "resizemxnettransform": [254, 295], "resizetransform": [254, 295], "cropresizetftransform": [254, 295], "boundari": [254, 295, 564], "area": [254, 295, 306, 359, 513, 564], "pytorchcropresizetransform": [254, 295], "mxnetcropresizetransform": [254, 295], "cropresizetransform": [254, 295], "centercroptransform": [254, 295], "mxnetnormalizetransform": [254, 295], "pytorchnormalizetransform": [254, 295], "normalizetransform": [254, 295], "randomcroptransform": [254, 295], "randomresizedcroptransform": [254, 295], "get_final_text": [254, 295], "pred_text": [254, 295], "orig_text": [254, 295], "project": [254, 295, 470, 471, 472, 540, 554, 561, 565, 569], "squadexampl": [254, 295], "qas_id": [254, 295], "question_text": [254, 295], "doc_token": [254, 295], "orig_answer_text": [254, 295], "start_posit": [254, 295], "end_posit": [254, 295], "is_imposs": [254, 295], "simpl": [254, 295, 510, 514, 553, 561, 562, 565], "answer": [254, 295, 307, 308, 360, 361, 471, 539, 553, 564, 568], "unique_id": [254, 295], "example_index": [254, 295], "doc_span_index": [254, 295], "token_to_orig_map": [254, 295], "token_is_max_context": [254, 295], "input_mask": [254, 295, 514], "segment_id": [254, 295, 514], "read_squad_exampl": [254, 295], "input_fil": [254, 295], "doc_strid": [254, 295, 564], "max_query_length": [254, 295, 564], "output_fn": [254, 295], "inputbatch": [254, 295], "collecttransform": [254, 295], "10833": [254, 295], "tfsquadv1posttransform": [254, 295], "n_best_siz": [254, 295, 564], "384": [254, 295, 564], "64": [254, 295, 474, 559, 562, 564, 568], "max_answer_length": [254, 295, 564], "30": [254, 295, 503, 507, 509, 564, 568], "nbest_predict": [254, 295, 564], "question": [254, 295, 307, 308, 360, 361, 471, 472, 476, 477, 510, 517, 541, 553, 562, 564, 568], "anoth": [254, 295, 303, 312, 356, 467, 499, 500, 527, 531, 564, 565], "long": [254, 295, 505, 559, 564], "document": [254, 295, 416, 478, 479, 484, 502, 512, 515, 519, 529, 532, 533, 540, 541, 543, 553, 560, 564, 566], "chunk": [254, 295, 564], "tfmodelzoocollecttransform": [254, 295], "tfsquadv1modelzooposttransform": [254, 295], "squadv1": [254, 295, 564], "parsedecodevoctransform": [254, 295], "conf_fname_or_obj": [255, 264, 296, 301, 311, 312, 313, 314, 316, 325, 330, 338], "unnecessari": [255, 514], "setter": 257, "calib_dataload": [257, 339, 397, 428, 432, 473, 476, 496, 497, 499, 507, 508, 513, 514, 536, 537, 556, 557, 558, 559], "reason": [257, 471, 478, 496, 539, 559, 563, 565], "know": [257, 502, 560], "metric_cl": [259, 363, 397, 514], "user_metr": [259, 363, 397], "recommend": [259, 363, 439, 477, 497, 506, 525, 528, 533, 535, 553, 555, 565], "set_backend": 260, "tensorflowimagefold": 282, "qlinear2qdq": [297, 302, 355], "qlinearop": [298, 499, 509, 525, 556, 568], "check_model": 298, "onnx_qlinear_to_qdq": 298, "input_name_to_nod": 298, "tf_to_fp32_onnx": 299, "tf_to_int8_onnx": 299, "int8_model": [299, 300, 477], "get_node_map": 300, "fp32_onnx_path": 300, "module_node_map": 300, "get_quantizable_onnx_op": 300, "quantize_nod": 300, "dynamic_quant_export": 300, "pt_fp32_model": 300, "pt_int8_model": 300, "weight_typ": 300, "s8": 300, "static_quant_export": 300, "_quantiz": 300, "torch_to_fp32_onnx": 300, "do_constant_fold": 300, "torch_to_int8_onnx": 300, "achiev": [301, 338, 504, 512, 514, 537, 552, 553, 554, 556, 562, 563, 565], "across": [301, 311, 338, 364, 498, 514, 541, 544, 553, 557, 562, 565], "variou": [301, 311, 338, 364, 479, 509, 517, 544, 553, 555, 557], "dl": [301, 311, 325, 330, 338, 364, 499, 508, 521, 534, 554, 568], "bring": [301, 338, 528, 541, 562], "unifi": [301, 338, 477, 478, 479, 496, 508, 509, 513, 514, 516], "vari": [301, 325, 330, 338, 539, 553, 562, 568], "roc": [301, 310, 325, 330, 338, 363], "flexibl": [301, 325, 330, 338, 476, 500, 541, 553, 559], "techniqu": [302, 355, 469, 476, 509, 514, 517, 536, 552, 553, 554, 555, 556, 566, 567, 568], "bleu": [302, 304, 309, 355, 357, 362, 513, 553], "bleu_util": [302, 309, 355, 362], "coco_label_map": [302, 309, 355, 362], "coco_tool": [302, 309, 355, 362], "evaluate_squad": [302, 309, 355, 362], "f1": [302, 307, 309, 310, 355, 360, 362, 363, 502, 513, 514, 537, 561, 568], "basic_na": [302, 315, 355], "nas_util": [302, 315, 355], "pruner_legaci": [302, 355], "gradient_sensit": [302, 321, 355], "group_lasso": [302, 321, 355], "pruning_recip": [302, 355], "tile_pattern": [302, 326, 327], "prune_util": [302, 331, 355], "tuning_sampl": [302, 344, 350, 355, 405, 411], "tuning_spac": [302, 344, 350, 351, 353, 355, 405, 411, 412, 414], "tuning_struct": [302, 344, 350, 351, 352, 355, 405, 411, 412, 413], "auto_mixed_precis": [302, 344, 355, 405], "graph_optim": [302, 355], "mixed_precis": [302, 355, 364, 514], "model_convers": [302, 355], "pruning_v2": [302, 355], "unicoderegex": [303, 356], "hoc": [303, 356], "hack": [303, 356], "recogn": [303, 356, 565], "nondigit_punct_r": [303, 356], "compil": [303, 356, 514], "express": [303, 356, 471], "preced": [303, 356, 562, 565], "digit": [303, 356, 467, 554], "punct_nondigit_r": [303, 356], "symbol_r": [303, 356], "bleu_token": [303, 356], "mose": [303, 356], "smt": [303, 356], "mosesdecod": [303, 356], "mteval": [303, 356], "v14": [303, 356], "pl": [303, 356], "l954": [303, 356], "l983": [303, 356], "bilingu": [303, 356], "understudi": [303, 356], "qualiti": [303, 356], "machin": [303, 356, 504, 510, 520, 534, 536, 542, 554, 562, 563], "translat": [303, 304, 356, 357, 553, 565], "natur": [303, 356, 504], "approxim": [303, 304, 356, 357, 478, 513, 559], "glue": [303, 310, 356, 363, 497, 513, 514, 523], "word": [303, 356, 513, 553, 559, 568], "ngram": [303, 356, 513], "breviti": [303, 304, 356, 357, 513], "doe": [303, 356, 415, 496, 497, 513, 514, 559, 560, 564], "beam": [303, 356, 513], "tensor2tensor": [304, 357], "bleu_hook": [304, 357], "compute_bleu": [304, 357], "reference_corpu": [304, 357], "translation_corpu": [304, 357], "max_ord": [304, 357], "use_bp": [304, 357], "against": [304, 357], "gram": [304, 357], "bleu_scor": [304, 357], "third": [306, 359, 472, 511], "parti": [306, 359, 472, 511, 556], "pycocotool": [306, 359, 505, 510], "noth": [306, 359, 565], "thu": [306, 359, 439, 514, 553, 556], "cannot": [306, 359, 473, 505, 559, 563], "jonathanhuang": [306, 359], "image_id": [306, 359, 513], "invok": [306, 359, 439, 478], "groundtruth_dict": [306, 359], "exportgroundtruthtococo": [306, 359], "groundtruth_boxes_list": [306, 359], "groundtruth_classes_list": [306, 359], "max_num_class": [306, 359], "output_path": [306, 359], "detections_list": [306, 359], "exportdetectionstococo": [306, 359], "detection_boxes_list": [306, 359], "detection_scores_list": [306, 359], "detection_classes_list": [306, 359], "cocowrapp": [306, 359], "loadannot": [306, 359], "cocoevalwrapp": [306, 359], "agnostic_mod": [306, 359], "computemetr": [306, 359], "detection_typ": [306, 359], "bbox": [306, 359, 473, 513], "hold": [306, 342, 359, 401, 497], "iou_typ": [306, 359], "iou_thr": [306, 310, 359, 363, 513], "map_point": [306, 310, 359, 363, 513], "cocoev": [306, 359], "mscoco": [306, 359], "Then": [306, 359, 478, 499, 527, 529, 531, 532, 539, 562, 565], "exportsingleimagegroundtruthtococo": [306, 359], "next_annotation_id": [306, 359], "category_id_set": [306, 359], "groundtruth_box": [306, 359], "groundtruth_class": [306, 359], "groundtruth_mask": [306, 359], "groundtruth_is_crowd": [306, 359], "ingest": [306, 359], "here": [306, 359, 416, 478, 497, 502, 503, 504, 506, 507, 512, 513, 522, 529, 532, 534, 537, 540, 542, 556, 560, 561, 562, 568], "exportsingleimagedetectionstococo": [306, 359], "uniqu": [306, 339, 359, 556], "assign": [306, 359, 467, 502, 555, 565], "num_gt_box": [306, 359], "num_detect": [306, 310, 359, 363, 513, 514, 567], "image_height": [306, 359], "image_width": [306, 359], "detection_mask": [306, 359], "crowd": [306, 359], "insid": [306, 359, 439, 500, 501, 535, 553, 557, 565], "exportsingleimagedetectionboxestococo": [306, 359], "detection_box": [306, 359, 514, 567], "detection_scor": [306, 359, 514, 567], "detection_class": [306, 359, 514, 567], "exporsingleimagedetectionboxestococo": [306, 359], "exportsingleimagedetectionmaskstococo": [306, 359], "allenai": [307, 308, 360, 361], "bi": [307, 308, 360, 361], "att": [307, 308, 360, 361], "flow": [307, 308, 360, 361, 473, 474, 514], "f1_score": [307, 308, 360, 361], "ground_truth": [307, 308, 360, 361], "ground": [307, 308, 360, 361], "truth": [307, 308, 360, 361], "metric_max_over_ground_truth": [307, 308, 360, 361], "metric_fn": [307, 308, 360, 361], "exact_match_scor": [307, 360], "exact": [307, 360], "articl": [307, 308, 360, 361], "paragraph": [307, 308, 360, 361], "qa": [307, 308, 360, 361, 476], "normalize_answ": [308, 361], "newlin": [308, 361, 467], "tab": [308, 361, 534, 563], "harmon": [308, 310, 361, 363], "recal": [308, 310, 361, 363], "answer_start": [308, 361], "177": [308, 361, 568], "denver": [308, 361], "bronco": [308, 361], "nfl": [308, 361], "team": [308, 361, 471, 558], "afc": [308, 361], "super": [308, 361, 474], "bowl": [308, 361], "50": [308, 361, 474, 478, 539, 553, 562, 568], "56be4db0acb8001400a502ec": [308, 361], "percentag": [308, 361, 495, 559, 567], "tensorflowmetr": [310, 363], "maintain": [310, 363, 439, 471, 472, 516, 517, 529, 532, 536, 541, 542, 553, 559, 560], "pytorchmetr": [310, 363], "mxnetmetr": [310, 363], "onnxrtqlmetr": [310, 363], "onnxrtitmetr": [310, 363], "metric_registri": [310, 363], "metric_typ": [310, 363], "decorator_metr": [310, 363], "basemetr": [310, 363, 397], "single_output": [310, 363], "hvd": [310, 363, 502], "wrappytorchmetr": [310, 363], "wrapmxnetmetr": [310, 363], "wraponnxrtmetr": [310, 363], "proport": [310, 363], "pred_list": [310, 363], "pytorchloss": [310, 363], "mae": [310, 363, 513], "compare_label": [310, 363, 397, 513], "rmse": [310, 363, 513, 565], "tensorflowtopk": [310, 363], "k": [310, 363, 397, 513, 536, 553], "among": [310, 363, 528, 562], "outcom": [310, 363], "num_correct": [310, 363], "num_sampl": [310, 363], "generaltopk": [310, 363], "cocomapv2": [310, 363, 513], "anno_path": [310, 363, 513], "map_kei": [310, 363], "detectionboxes_precis": [310, 363], "output_index_map": [310, 363, 513], "tensorflowmap": [310, 363], "tensorflowcocomap": [310, 363], "tensorflowvocmap": [310, 363], "squadf1": [310, 363, 513], "miou": [310, 363], "num_class": [310, 363], "21": [310, 363, 522, 523, 545, 548, 549, 554, 562, 568], "iou": [310, 363], "intersect": [310, 363, 477, 513], "union": [310, 363, 456, 513, 545], "onnxrtglu": [310, 363], "dlrm": [310, 363], "modelconvers": 312, "typic": [312, 339, 474, 476, 501, 503, 507, 539, 553, 568], "basicna": 313, "model_build": [313, 316], "conf_fnam": 313, "nasbas": [316, 474], "nas_registri": 317, "nas_method": 317, "create_search_space_pool": 317, "idx": [317, 497], "enumer": [317, 430, 444, 456, 477, 500, 501, 502, 514, 552, 553, 563], "find_pareto_front": 317, "pareto": [317, 474], "front": [317, 474], "n_point": 317, "n_metric": 317, "n_pareto_point": 317, "gradientsensitivityprun": 319, "pytorchmodel": [319, 320, 322, 323, 324, 373], "overwritten": [319, 320, 322, 323, 324, 522], "grouplassoprun": 320, "legaci": 321, "basicmagnitudeprun": 322, "patternlockprun": [323, 335], "pruner_registri": 324, "clase": 324, "pruningconf": [325, 330], "tfpruningcallback": [325, 330], "input_model": [325, 330, 516, 537, 538, 539, 563], "pure": [325, 330, 553], "pattern_registri": 328, "pattern_typ": 328, "patternbas": 328, "mask_shap": [328, 329], "is_contigu": 328, "tile": 329, "tilepatternbas": 329, "tilepattern_1x1": 329, "1x1": [329, 500, 514, 553], "tilepattern_2x2": 329, "2x2": [329, 562], "tilepattern_1x16": 329, "1x16": 329, "tilepattern_4x1": 329, "tilepattern_1x2": 329, "1x2": [329, 562], "patternnxm": 333, "patternninm": 333, "reset_non_value_to_default": 334, "parse_not_to_prun": 334, "update_frequency_on_step": [335, 555], "max_sparsity_ratio_per_lay": [335, 555], "magnitudeprun": 335, "snipprun": 335, "snipmomentumprun": 335, "moreoev": 335, "quantconf": 338, "separ": [339, 471, 508, 511, 542, 544, 552, 555], "opt_model": [339, 514], "fulli": [339, 514, 542, 556, 562], "train_func": [339, 456, 502, 514, 556], "automixedprecisiontunestrategi": [340, 399], "basictunestrategi": [341, 400], "polici": [341, 345, 398, 400, 406, 471, 476, 567, 569], "bayesiantunestrategi": [342, 401], "acq_max": [342, 401], "ac": [342, 401], "gp": [342, 401], "y_max": [342, 401], "n_warmup": [342, 401], "10000": [342, 401, 553], "n_iter": [342, 401], "acquisit": [342, 401], "gaussian": [342, 401, 565], "relev": [342, 401, 478, 479, 539, 553], "acq": [342, 401], "randomst": [342, 401], "scipi": [342, 401], "x_max": [342, 401], "targetspac": [342, 401], "pbound": [342, 401], "9527": [342, 401, 514, 567], "bayesianoptim": [342, 401], "exhaustivetunestrategi": [343, 403], "msetunestrategi": [345, 406], "mse_v2tunestrategi": [346, 407], "revert": [346, 354, 407, 415, 565], "randomtunestrategi": [347, 408], "strategy_registri": [348, 409, 565], "tunestrategi": [348, 409, 565], "tuningsamplerregistri": 351, "tuningsampl": [351, 412], "tuningord": [351, 412], "Not": [351, 352, 412, 413, 467, 474], "tuningspac": [351, 352, 412, 413], "tuning_order_lst": [351, 412], "initial_op_tuning_cfg": [351, 412], "modelwisetuningsampl": [351, 412], "tuning_items_prior": [351, 412], "op_dtype_dict": [351, 412], "optuningconfig": [351, 352, 353, 412, 413, 414], "optypewisetuningsampl": [351, 412], "opwisetuningsampl": [351, 412], "fallbacktuningsampl": [351, 412], "op_dtyp": [351, 412], "skip_first": [351, 412], "smoothquantsampl": [351, 412], "tuningitem": [352, 413], "item_typ": [352, 413], "pattern_to_intern": [352, 413], "default_dtyp": [352, 413], "pattern_to_path": [352, 413], "quant_mode_from_pattern": [352, 413], "internal_pattern": [352, 413], "initial_tuning_cfg_with_quant_mod": [352, 413], "op_name_typ": [352, 413], "step1": [352, 413], "step2": [352, 413], "complet": [352, 413, 477, 478, 553, 556, 565, 567, 568], "step3": [352, 413], "step4": [352, 413], "step5": [352, 413], "op_quant_mod": [353, 414], "ordereddefaultdict": [354, 415], "extract_data_typ": [354, 415], "reverted_data_typ": [354, 415], "signed_flag": [354, 415], "get_adaptor_nam": [354, 415], "experiment": [355, 474, 497, 501, 502, 504, 510, 514, 553, 555, 556, 560, 564], "base_model": [355, 366], "keras_model": [355, 366], "mxnet_model": [355, 366], "nets_factori": [355, 366], "onnx_model": [355, 366, 390, 537], "tensorflow_model": [355, 366, 395, 539], "torch_model": [355, 366], "collect_layer_histogram": [355, 460], "create_obj_from_config": [355, 460], "kl_diverg": [355, 460], "load_huggingfac": [355, 460, 514], "neural_insights_util": [355, 460], "weights_detail": [355, 460], "sub_class": [363, 397], "register_customer_metr": 363, "topk": [363, 397, 502, 513, 514, 536, 556], "frozen": [364, 372, 397, 516], "savedmodel": [364, 372, 397, 568], "onnx_ml_pb2": [364, 516], "hybirdblock": [364, 397], "basemodel": 365, "plai": [365, 554, 559, 562], "role": [365, 559, 562], "kerasmodel": 367, "get_model_fwk_nam": 368, "fwk": 368, "mxnetmodel": 369, "net": 370, "tfslimnetsfactori": 370, "get_model_typ": 372, "validate_graph_nod": 372, "validate_and_inference_input_output": 372, "graph_sess": 372, "graph_def_sess": 372, "frozen_pb_sess": 372, "load_saved_model": 372, "saved_model_tag": 372, "signatur": 372, "metagraphdef": 372, "keras_sess": 372, "slim_sess": 372, "checkpoint_sess": 372, "estimator_sess": 372, "saved_model_sess": 372, "tensorflowbasemodel": [372, 395], "tensorflowsavedmodelmodel": 372, "tensorflowllmmodel": 372, "exceed": 372, "2gb": 372, "tensorflowqatmodel": 372, "tensorflowcheckpointmodel": 372, "tensorflowmodel": 372, "pytorchbasemodel": 373, "pytorchfxmodel": 373, "ipexmodel": 373, "driven": [374, 476, 514, 534, 551, 563], "objective_registri": 374, "objective_custom_registri": 374, "obj_cl": 374, "eural_compressor": 374, "objective_cl": 374, "user_object": 374, "__class__": 374, "__name__": 374, "objective_cfg": 374, "usr_cfg": 374, "user_obj_cfg": 374, "easili": [374, 477, 518, 522, 534, 551, 562], "peak": [374, 551], "multiobject": 374, "metric_criterion": 374, "metric_weight": 374, "obj_criterion": 374, "obj_weight": 374, "is_measur": 374, "parserfactori": 376, "onnxrtparserfactori": 378, "onnxprofilingpars": 380, "respons": [380, 381, 385, 547, 548, 549, 556], "profilingpars": 381, "profilingresult": 382, "total_execution_tim": 382, "accelerator_execution_tim": 382, "cpu_execution_tim": 382, "op_run": 382, "op_defin": 382, "tensorflowparserfactori": 383, "tensorflowprofilingpars": 385, "profilerfactori": [386, 388, 393], "create_onnx_config": 391, "ort": 391, "sessionopt": 391, "delete_assign": 396, "create_tf_config": 396, "tf_modul": 396, "configproto": 396, "set_eager_execut": 396, "entir": [397, 456, 473, 478, 479, 495, 541, 553], "autotunestrategi": 398, "conservativetunestrategi": 402, "o0": [402, 565], "who": [402, 471], "hawq_v2tunestrategi": 404, "made": [404, 477, 556, 560, 565], "impact": [404, 553, 560, 565], "tunestrategymeta": 409, "metaclass": 409, "lowerbitssampl": 412, "blockfallbacktuningsampl": 412, "op_block_lst": 412, "target_dtyp": 412, "alpha_list": 412, "weightonlyquantsampl": 412, "quantopt": 415, "quant_typ": 415, "quant_opt": 415, "preprocess_user_cfg": 415, "op_user_cfg": 415, "op_user_cfg_modifi": 415, "build_slave_faker_model": 415, "slave": [415, 565], "virtual": [415, 554], "classregist": 415, "fun": 416, "attribute1": 416, "module_debug_level1": 416, "function1": 416, "param1": 416, "param2": 416, "parameter1": 416, "parameter2": 416, "function2": 416, "pep": 416, "484": [416, 568], "output_model": [416, 514, 537, 539, 563], "function3": 416, "section": [416, 479, 499, 500, 501, 534, 537, 540, 553, 555, 559, 567], "restructuredtext": 416, "liter": 416, "generator1": 416, "example_gener": 416, "exampleclass": 416, "param3": 416, "public": [416, 471, 529, 532], "attr1": 416, "attr2": 416, "attr5": 416, "api_doc_exampl": 417, "op_valu": 428, "staticquantconfig": [428, 430], "layer_class": 428, "parse_to_keras_tune_cfg": 428, "calib_iter": [428, 432, 478], "static_quantize_entri": 428, "weight_dtyp": [430, 444], "weight_sym": [430, 444], "weight_granular": 430, "per_tensor": [430, 478, 479, 506, 556, 567], "act_dtyp": [430, 444], "act_sym": 430, "act_granular": 430, "get_all_registered_config": 430, "base_config": [430, 432, 451], "parse_config_from_dict": 430, "config_dict": 430, "get_default_static_quant_config": 430, "quantize_model": 432, "register_algo": [433, 455], "algos_map": [433, 455], "example_algo": [433, 455], "rtnweightquantconfig": [433, 438, 444, 455], "dump_elapsed_tim": [433, 467, 477], "customized_msg": [433, 467], "elaps": [433, 467], "dataloader_len": [435, 444], "apply_gptq_quant": 435, "configs_map": [435, 438], "rtn_quantize_entri": 438, "device_typ": 439, "_dtype": 439, "cache_en": 439, "manag": [439, 456, 459, 514, 517, 518, 528], "region": [439, 562], "chosen": [439, 478, 495], "enter": [439, 528, 534, 542], "half": [439, 515, 525], "hpu": [439, 444], "float8_e4m3fn": [439, 444], "autocastmodel": 439, "affect": [439, 562], "dataparallel": 439, "distributeddataparallel": 439, "torch_dtyp": [439, 479], "weight_bit": [444, 478], "weight_group_s": 444, "double_quant_dtyp": 444, "double_quant_bit": 444, "double_quant_sym": 444, "double_quant_group_s": 444, "get_default_rtn_config": 444, "gptqconfig": 444, "act_ord": 444, "get_default_gptq_config": 444, "fp8qconfig": 444, "dtype_rang": 444, "act_algo": 444, "fp8": [444, 476, 554], "run_fn": [451, 452], "run_arg": [451, 452], "quantize_dynam": 451, "carri": [451, 553], "mutat": 451, "torchwrapp": 452, "loop": [456, 473, 474, 478, 479, 506, 544, 561, 565], "compressionmanag": 456, "deal": 456, "pruningconfig": 456, "orchestr": [456, 476, 509, 566], "on_train_begin": [456, 473, 500, 501, 514, 552, 553, 556], "train_loop": [456, 514, 552], "on_epoch_begin": [456, 459, 500, 501, 514, 552], "on_step_begin": [456, 459, 500, 501, 514, 552, 553], "on_after_compute_loss": [456, 500, 501, 514, 552], "on_before_optimizer_step": [456, 500, 501, 514, 552, 553], "on_step_end": [456, 459, 500, 501, 514, 552], "on_epoch_end": [456, 459, 500, 501, 514, 552], "on_train_end": [456, 500, 501, 514, 552, 553, 556], "path_to_sav": 456, "top1": [456, 513, 536, 553, 556, 568], "callbacks_list": 456, "layerhistogramcollector": 457, "layer_tensor": 457, "include_lay": 457, "get_func_from_config": 459, "func_dict": 459, "get_preprocess": 459, "get_metr": 459, "get_postprocess": 459, "get_algorithm": 459, "create_dataset": 459, "cfg_preprocess": 459, "cfg_filter": 459, "create_dataload": 459, "dataloader_cfg": 459, "create_eval_func": 459, "postprocess_cfg": 459, "fp32_baselin": [459, 477], "baselin": [459, 561, 562, 563], "create_train_func": 459, "train_cfg": 459, "Their": 459, "auxiliari": 460, "optimizedmodel": 462, "from_pretrain": [462, 514], "save_for_huggingface_upstream": [462, 514], "saved_dir": [462, 559], "register_neural_insights_workload": 464, "workload_loc": [464, 467], "workload_mod": 464, "workload_nam": 464, "uuid": 464, "update_neural_insights_workload": 464, "workload_uuid": 464, "update_neural_insights_workload_accuracy_data": 464, "baseline_accuraci": 464, "optimized_accuraci": 464, "get_model_path": 464, "is_int8_model": 466, "load_weight_onli": 466, "checkpoint_dir": 466, "history_cfg": 466, "best_configur": 466, "best_model_weight": 466, "snapshot": [466, 538], "recover_model_from_json": 466, "json_file_path": 466, "cfg_from_fil": 467, "yaml_fil": [467, 497, 502], "lazyimport": 467, "lazi": 467, "till": [467, 565], "time_limit": 467, "get_siz": 467, "seen": [467, 477], "recurs": 467, "compute_spars": 467, "fault_tolerant_fil": 467, "equal_dict": 467, "d2": 467, "compare_kei": 467, "ignore_kei": 467, "ignor": [467, 495, 497, 559, 562, 565], "cpuinfo": 467, "combine_histogram": 467, "old_hist": 467, "old": [467, 514, 560], "get_tensor_histogram": 467, "get_all_fp32_data": 467, "get_tuning_histori": 467, "tuning_history_path": 467, "offlin": [467, 471, 514, 556, 562], "str2arrai": 467, "dequantize_weight": 467, "weight_tensor": 467, "min_filter_tensor": 467, "max_filter_tensor": 467, "scale_info": 467, "captureoutputtofil": 467, "tmp_file_path": 467, "stream": [467, 568], "sy": [467, 520], "stderr": 467, "captur": 467, "statist": [467, 468], "header": [467, 505], "field_nam": 467, "output_handl": 467, "printer": 467, "global_st": 467, "load_data_from_pkl": 467, "pkl": [467, 538], "dump_data_to_loc": 467, "show_memory_info": 467, "hint": 467, "dump_class_attr": 467, "compare_object": 467, "obj1": 467, "obj2": 467, "ignore_attr": 467, "comparison": [467, 559, 560, 563], "alias_param": 467, "param_nam": 467, "param_alia": 467, "alias": 467, "print_tabl": 467, "column_map": 467, "table_entri": 467, "titl": [467, 511, 535, 565], "insert_newlin": 467, "prettyt": 467, "column": [467, 559, 562], "handler": [467, 565], "row": [467, 499, 537, 562], "decim": 467, "get_tensors_info": 467, "get_weights_detail": 467, "weightdetail": 467, "dump_tabl": 467, "file_typ": 467, "csv": [467, 474, 537, 538], "dump_table_to_csv": 467, "get_number_of_socket": 467, "platform": [467, 476, 509, 517, 525, 544, 554, 556], "opentri": 467, "activation_min": 467, "activation_max": 467, "print_op_list": 467, "get_op_list": 467, "minmax_file_path": 467, "input_model_tensor": 467, "optimized_model_tensor": 467, "activation_min_max": 467, "calculate_ms": 467, "mse_metric_gap": 467, "fp32_tensor": 467, "dequantize_tensor": 467, "euclidean": [467, 500], "distanc": [467, 500], "check_key_exist": 467, "weightsdetail": 468, "input_tensor_data": 468, "optimized_tensor_data": 468, "weightsstatist": 468, "welcom": [470, 471, 472, 476, 536, 543, 569], "interest": [471, 476, 536, 563], "foster": 471, "particip": [471, 544], "commun": [471, 536], "harass": 471, "experi": [471, 517, 539, 561, 562, 565], "everyon": 471, "regardless": 471, "ag": 471, "bodi": 471, "ethnic": 471, "characterist": 471, "gender": 471, "educ": 471, "socio": 471, "econom": 471, "race": 471, "religion": 471, "sexual": 471, "orient": 471, "contribut": [471, 476, 553], "inclus": 471, "Being": 471, "viewpoint": 471, "gracefulli": 471, "focus": [471, 477], "empathi": 471, "toward": [471, 500], "member": [471, 477], "unaccept": 471, "imageri": 471, "unwelcom": 471, "troll": 471, "insult": 471, "derogatori": 471, "polit": 471, "attack": 471, "privat": 471, "publish": [471, 511, 512, 515, 535, 562], "electron": 471, "explicit": 471, "permiss": 471, "inappropri": 471, "profession": 471, "clarifi": 471, "appropri": [471, 495, 562], "fair": 471, "action": [471, 529, 532], "edit": 471, "reject": 471, "commit": [471, 472], "wiki": 471, "ban": 471, "temporarili": 471, "deem": 471, "threaten": 471, "offens": 471, "harm": 471, "mail": 471, "social": [471, 554], "media": [471, 554], "account": [471, 561, 565], "appoint": 471, "onlin": [471, 561], "event": [471, 563], "abus": 471, "report": [471, 472, 476, 544, 561], "contact": [471, 560, 561], "complaint": 471, "review": [471, 472, 476, 554], "investig": [471, 539], "circumst": [471, 555], "oblig": [471, 540], "confidenti": [471, 536], "regard": [471, 558], "incid": 471, "good": [471, 556, 565], "faith": 471, "repercuss": 471, "leadership": 471, "faq": [471, 476], "page": [471, 472, 536, 539, 540], "send": [472, 478], "view": [472, 476, 503, 525, 534, 540, 560], "star": 472, "repositori": [472, 529, 532], "button": [472, 509, 528, 534], "fork": [472, 529, 532], "clone": [472, 499, 510, 527, 531, 536, 538, 539, 541, 542], "pc": 472, "git": [472, 499, 505, 510, 536, 538, 539, 541, 542], "modif": [472, 477, 506, 522, 541], "checkout": 472, "my": 472, "push": [472, 553, 559, 562], "cover": [472, 504, 508, 554], "would": [472, 514, 538, 553, 556, 562], "adopt": [472, 517, 553, 554, 562], "certif": [472, 536], "agre": 472, "pr": [472, 496, 513, 529, 532, 560], "At": [472, 478, 540, 544, 565], "approv": 472, "solv": [472, 556, 560], "licens": 472, "azur": [472, 476, 554], "devop": 472, "ci": 472, "cloud": [472, 476, 544, 554], "deploi": [472, 500, 514, 540, 544, 559, 565], "e16": 472, "v5": 472, "scan": [472, 476], "pylint": 472, "bandit": 472, "copyright": [472, 511], "docstyl": 472, "spellcheck": 472, "dco": 472, "pytest": 472, "No": [472, 505, 514, 542, 543, 554], "failur": [472, 473], "fault": 472, "coverag": 472, "runtim": [472, 476, 477, 478, 480, 496, 499, 503, 506, 509, 515, 519, 524, 525, 555, 559, 560, 565], "submit": [472, 541, 544, 554], "bug": [472, 476], "safe": 472, "collabor": [472, 476, 519, 525], "adher": 472, "toolkit": [473, 510, 517, 525, 554, 566], "tracer": 473, "resolv": [473, 475], "floatfunct": 473, "cat": [473, 504, 520, 547, 548, 549], "done": [473, 500, 501, 518, 534, 543, 547, 548, 553, 556], "10004": [473, 474, 477, 496, 500, 501, 502, 506, 509, 515, 552, 555, 557, 559, 567], "neural_compressor": [473, 474, 476, 479, 494, 496, 497, 499, 500, 501, 502, 504, 507, 508, 513, 514, 515, 516, 536, 537, 551, 552, 553, 555, 556, 557, 558, 560, 561, 562, 564, 565, 567], "eval": [473, 496, 499, 517, 556, 563], "conduct": [473, 514, 522, 534, 565, 566], "imper": 473, "therefor": [473, 514, 537, 539, 553, 556, 557, 560, 562], "lot": [473, 539, 562], "As": [473, 478, 496, 500, 513, 514, 528, 539, 553, 559, 565], "successfulli": [473, 502, 543, 547, 548, 549, 554], "suggest": [473, 561], "traceabl": 473, "proxi": 473, "tutori": [473, 525, 554, 566], "prototyp": 473, "html": [473, 476, 478, 495, 502, 509, 529, 532, 535, 537, 543, 547, 556], "highlight": 473, "untrac": 473, "ssd": [473, 504, 568], "resnet34": [473, 568], "r34": 473, "bboxes_labels_scor": 473, "prob": 473, "45": [473, 568], "max_output": 473, "zip": [473, 543, 547, 548], "dbox": 473, "dlabel": 473, "dscore": 473, "decode_singl": 473, "autom": [474, 517, 534, 535, 554, 562], "artifici": 474, "ann": 474, "par": [474, 544], "outperform": 474, "propos": [474, 477, 500, 515, 559, 562], "potenti": [474, 499, 560], "lie": [474, 495], "predictor": 474, "shown": [474, 496, 499, 500, 513, 514, 528, 537, 539, 551, 552, 553, 557, 562, 565], "figur": [474, 527, 528, 531, 557], "popul": 474, "inner": 474, "evolutionari": 474, "cycl": 474, "until": [474, 478, 565], "conclud": 474, "met": [474, 506, 556, 563], "yet": [474, 529, 532, 535, 542, 556], "simplest": [474, 495, 520], "launcher": [474, 476, 500, 501, 525, 566], "agent": 474, "nsga2": 474, "supernet": 474, "ofa_mbv3_d234_e346_k357_w1": 474, "acc": [474, 544, 553, 563, 568], "mac": [474, 535], "num_ev": 474, "250": [474, 553], "results_csv_path": 474, "search_result": 474, "dataset_path": 474, "ilsvrc2012": 474, "aim": [474, 476, 512, 517, 553, 562, 565, 566], "mobilenetv3": 474, "lt": [474, 497, 568], "wmt": 474, "en": 474, "de": 474, "guidelin": [475, 476], "mainstream": [476, 566], "workflow": [476, 478, 479, 499, 500, 504, 510, 515, 529, 532, 536, 563, 566], "particular": [476, 553, 559], "wide": [476, 503, 515, 553, 556, 568], "hardwar": [476, 477, 500, 509, 514, 534, 553, 554, 555], "xeon": [476, 510, 511, 512, 515, 554, 556, 558, 568], "scalabl": [476, 510, 512, 515, 554, 556, 558], "processor": [476, 512, 515, 542, 554, 556, 558], "flex": [476, 510], "amd": [476, 510, 568], "arm": [476, 509, 510, 568], "nvidia": [476, 495, 509, 510, 568], "llama2": 476, "falcon": [476, 512, 553, 562, 568], "gpt": [476, 512, 538, 553, 562, 568], "j": [476, 512, 538, 553, 562, 568], "bloom": [476, 553, 562, 568], "broad": [476, 509, 523, 566], "stabl": [476, 510, 553, 554], "diffus": [476, 554], "vision": [476, 504, 521, 562], "coder": [476, 509, 518, 519, 522, 525, 528, 541, 545, 554], "marketplac": [476, 535, 554], "googl": [476, 515, 554], "amazon": [476, 517, 525], "web": [476, 536, 542, 547, 548, 549, 563], "servic": [476, 534, 541, 554], "softwar": [476, 511, 553, 554, 560], "alibaba": [476, 524, 531, 532, 554], "tencent": [476, 554], "taco": [476, 554], "oliv": [476, 554], "ai": [476, 517, 554, 558, 566], "ecosystem": [476, 554], "lightn": [476, 524], "pip": [476, 499, 502, 505, 507, 510, 519, 522, 527, 529, 531, 532, 536, 537, 538, 539, 560], "wget": [476, 499, 505, 507, 536, 539], "googleapi": [476, 507, 536, 539], "v1_6": [476, 507, 536, 539], "mobilenet_v1_1": [476, 507, 536, 547], "0_224_frozen": [476, 507, 536, 547], "overview": [476, 565], "jupyterlab": [476, 517, 523, 525, 527, 531, 566], "studio": [476, 525, 534, 544, 566], "topic": 476, "int4": [476, 512, 556, 568], "innov": [476, 525, 554], "blog": [476, 554], "oct": [476, 554], "emnlp": [476, 554], "teq": [476, 554, 557, 559], "sep": [476, 554], "neurip": [476, 554], "quala": [476, 554], "minilm": [476, 554, 568], "releas": [476, 510, 523, 525, 527, 531, 533, 545, 548, 549, 569], "legal": [476, 569], "request": [476, 542, 543, 544, 547, 548, 549, 556], "ask": [476, 510], "email": 476, "research": [476, 511, 562, 568], "idea": [476, 536, 553, 562, 565], "discord": 476, "join": [476, 537, 542, 547, 548], "technic": 476, "discuss": 476, "wechat": [476, 554], "img": 476, "bridg": [477, 478, 509], "vanilla": [477, 478, 509], "abcadaptor": 477, "__init__": [477, 496, 497, 513, 565], "query_fw_cap": [477, 479], "query_fused_pattern": 477, "he": 477, "besid": [477, 500, 539, 559], "describ": [477, 479, 499, 506, 536, 563], "past": [477, 559], "mainten": 477, "difficult": [477, 562], "abil": [477, 478, 497, 506, 562], "fragment": 477, "scenario": [477, 494, 500, 514, 553, 559], "granular": [477, 478, 479, 506, 509, 520, 556, 562, 567], "semant": [477, 506], "mla": [477, 515, 556], "becom": [477, 504, 553, 559], "explor": 477, "inspect_tensor": 477, "op_list": [477, 563], "iteration_list": 477, "inspect_typ": 477, "save_to_disk": 477, "quantization_cfg": 477, "set_tensor": 477, "tensor_dict": 477, "diagnosis_help": 477, "fw": 478, "outlin": [478, 479], "instruct": [478, 479, 500, 510, 515, 529, 532, 536, 537, 538, 539, 553, 554, 555, 556, 562, 568], "extend": [478, 479], "accommod": [478, 479], "incorpor": [478, 479, 501, 553, 565], "give": [478, 534, 565], "diagram": [478, 479, 499, 565], "illustr": [478, 479, 501, 565], "sequencediagram": [478, 479, 544], "autonumb": [478, 479], "query_framework_cap": 478, "opwis": 478, "optypewis": 478, "travers": [478, 479, 559, 565], "\u2776": 478, "\u2777": 478, "\u2778": 478, "\u2779": 478, "\u277a": 478, "\u277b": 478, "\u277c": 478, "These": [478, 509, 537], "chapter": 478, "node_op": 478, "confirm": 478, "tune_config": 478, "int8_conv_config": 478, "optype_wise_": 478, "tuning_cfg_to_fw": 478, "Its": [478, 495, 553], "dispatch": [478, 509, 541, 544], "is_perchannel": 478, "is_asymmetr": 478, "convert_bf16": 478, "somewhat": 478, "distort": 478, "line": [478, 502, 509, 517, 522, 523, 542, 563], "explain": [479, 499, 562], "let": [479, 506, 522, 553, 555, 567], "overal": [479, 542, 567], "drive": 479, "uint4": 479, "kullback": [479, 500], "leibler": [479, 500], "pytorch_cpu": 479, "1_11_capabl": 479, "cap_s8_1_11": 479, "cap_s8_1_11_conv1d": 479, "per_channel_symmetr": 479, "addition": [479, 502, 553, 565], "per_tensor_symmetr": 479, "due": [479, 504, 553, 556, 562, 563], "nativ": 479, "with_arg": 479, "qscheme": 479, "quant_min": 479, "quant_max": 479, "linux": [494, 505, 510, 528, 534], "x86_64": 494, "aarch64": 494, "prove": [495, 559, 562], "benefici": 495, "\u03b2": 495, "\u03b1": 495, "fundament": [495, 514], "primari": [495, 565], "focu": [495, 565], "essenti": [495, 505], "remaind": 495, "enhanc": [495, 517, 553, 554, 558], "resolut": 495, "extrem": 495, "still": [495, 514, 540, 554, 556, 558], "retain": 495, "noteworthi": 495, "vanhouck": 495, "vincent": 495, "andrew": 495, "senior": 495, "mark": 495, "mao": 495, "speed": [495, 514, 525, 553, 554, 556, 565], "2011": 495, "szymon": 495, "migacz": 495, "2017": 495, "mckinstri": 495, "jeffrei": 495, "l": [495, 500, 563, 565], "discov": [495, 563], "1809": 495, "04191": 495, "2018": 495, "encount": 496, "consum": 496, "previous": 496, "lack": [496, 505], "faster": [496, 498, 504, 554, 565, 568], "Of": 496, "evenli": 496, "divid": [496, 544, 562, 565], "discard": 496, "throw": 496, "awai": 496, "draw": [496, 561, 565], "subprocess": 496, "pin": [496, 527, 531], "reshuffl": 496, "manner": [496, 500, 516], "newdataload": 496, "customis": [496, 497, 513], "ensp": [497, 564], "imagerecord": [497, 502, 567], "image_nam": 497, "cocorecord": 497, "gt": [497, 562, 564], "int64": 497, "offer": 497, "style_transf": 497, "content": [497, 542, 543, 547, 548, 549], "tfrecorddataset": 497, "labelbal": 497, "300": [497, 553, 568], "16": [497, 510, 547, 559, 568], "helloworld": [497, 515, 564], "aid": 498, "deploy": [498, 517, 534, 554, 557, 562], "infrastructur": 498, "diagnos": 499, "gui": [499, 509, 539, 553], "termin": [499, 527, 528, 531, 537], "repeat": [499, 565], "durat": [499, 543, 547, 548, 561], "cd": [499, 502, 510, 536, 538, 539, 541, 542, 547, 548, 549], "setup": [499, 506, 510, 529, 532, 536, 538, 539, 541, 542, 553], "ilsvr2012": 499, "caff": 499, "berkeleyvis": 499, "caffe_ilsvrc12": 499, "xvzf": 499, "image_recognit": [499, 539, 563], "resnet50_torchvis": 499, "ptq_static": [499, 538], "resnet50_v1": [499, 502, 514], "dataset_loc": [499, 539, 547, 563], "label_path": 499, "quantiti": 499, "vec": 499, "frac": [499, 562], "sigma": 499, "var": 499, "happen": 499, "dispers": [499, 537], "v0": [499, 539, 562, 563], "cg": [499, 539, 563], "conv0": [499, 539, 563], "expens": [500, 514, 565], "power": [500, 514, 528, 554], "mobil": [500, 514, 568], "produc": 500, "logit": 500, "softmax": 500, "kd": 500, "patient": 500, "compact": [500, 514, 520, 553], "agnost": 500, "resourc": [500, 541, 544, 565], "convolut": [500, 554], "ia": 500, "attach": [500, 514, 562], "shallow": 500, "deepest": 500, "deeper": 500, "paper": [500, 553, 559, 562], "10006": [500, 501], "student_output": [500, 501], "student_loss": [500, 501], "training_func_for_nc": [500, 501], "distil_loss_conf": 500, "accordingli": [500, 525, 562], "promis": [501, 514, 553], "huge": [501, 539, 553, 557], "heavi": 501, "light": 501, "booster": 501, "degrad": [501, 553, 565], "novel": [501, 517, 528, 534], "comb": 501, "distillation_criterion": [501, 514, 552], "q_conf": 501, "horovod": 502, "instal": [502, 505, 507, 517, 519, 522, 525, 529, 532, 534, 535, 537, 538, 539, 569], "program": [502, 511, 517, 534], "enable_eager_execut": 502, "yaml_file_path": 502, "pre_process": 502, "simpli": [502, 516, 517, 519, 522, 534, 542], "evaluation_result": 502, "evaluation_time_cost": 502, "partit": [502, 553], "distributedsampl": 502, "train_sampl": 502, "train_dataset": [502, 556], "num_replica": 502, "rank": 502, "train_load": 502, "train_kwarg": 502, "adadelta": 502, "distributedoptim": 502, "named_paramet": 502, "broadcast_paramet": 502, "root_rank": 502, "broadcast_optimizer_st": 502, "set_epoch": 502, "batch_idx": 502, "nll_loss": 502, "log_interv": 502, "0f": 502, "tloss": 502, "6f": 502, "dry_run": 502, "test_func": 502, "host": [502, 542, 544, 547, 548, 549], "num_of_process": 502, "002": 502, "ssh": [502, 534], "prompt": 502, "readm": [502, 547], "exactli": [502, 518], "recognit": [502, 504, 553, 563], "resizecropimagenet": [502, 564], "realiz": [502, 551, 558, 561], "tow": 502, "node1": [502, 547, 548], "node2": [502, 547, 548], "TO": [502, 519, 539], "your_node1_nam": 502, "your_node2_nam": 502, "resnet50_fp32_pretrained_model": 502, "nc_resnet50_v1": 502, "resnet": [502, 568], "varieti": [503, 555, 565], "demonstr": [503, 517, 547, 548, 549, 563], "speedup": [503, 509, 556], "2x": [503, 509], "vnni": [503, 509, 555, 556], "exchang": 504, "hope": 504, "inc_model": [504, 516], "fp32_onnx_config": 504, "verifi": [504, 512], "vgg16": [504, 568], "mobilenet": [504, 561, 568], "rcnn": 504, "torchscript": [504, 557, 562], "unsupport": [504, 514, 553], "add_relu": 504, "conv1d_relu": 504, "conv2d_relu": 504, "group_norm": 504, "hardswish": 504, "instance_norm": 504, "layer_norm": 504, "leaky_relu": 504, "sigmoid": 504, "toolchain": [505, 554], "bare": 505, "metal": 505, "sudo": [505, 520], "apt": [505, 510, 520, 528], "python3": 505, "dev": [505, 527, 531], "distutil": 505, "libgl1": 505, "mesa": 505, "glx": 505, "libglib2": 505, "ln": 505, "sf": 505, "usr": 505, "incompat": 505, "88": [505, 561, 568], "80": [505, 557, 563, 568], "pyobject": 505, "reinstal": 505, "libgl": 505, "yum": [505, 510], "opencv": [505, 510, 528], "conda": [505, 510, 520, 528, 547, 548, 549, 560], "13": [505, 510, 536, 560, 562], "pend": [505, 543], "sqlalchemi": 505, "27": [505, 568], "alemb": 505, "forg": [505, 510], "quick": [506, 515, 553, 566, 567], "friendli": [506, 514, 554, 562, 566, 567], "dive": [506, 566], "purpos": [506, 515, 534, 536, 555, 556], "syntax": 506, "go": [506, 529, 532, 540, 555, 559, 564], "up1": 506, "up2": 506, "valid_mixed_precis": 506, "addn": 506, "grappler_optim": 506, "constfold": 506, "arithmet": 506, "debug_stripp": 506, "major": [508, 539, 556, 562], "concept": [508, 561, 566], "rather": [508, 559], "custom_metr": 508, "refin": [508, 553], "420": 509, "geomean": 509, "snippet": 509, "upload": [509, 529, 532], "click": [509, 517, 518, 525, 528, 534, 539, 554, 563], "qintegerop": [509, 556], "plan": 509, "oneapi": [510, 554, 566], "analyt": [510, 554, 566], "success": [510, 536, 560], "11": [510, 513, 515, 536, 562, 565, 568], "frequent": 510, "pypi": [510, 529, 532], "nightli": 510, "headless": [510, 528], "fastai": 510, "esri": 510, "consolid": 510, "latest": [510, 554, 560], "eas": [510, 519, 554], "along": [510, 553, 559], "streamlin": [510, 541, 554], "scienc": 510, "websit": 510, "anaconda": [510, 541, 542], "suit": [510, 535, 563], "formerli": 510, "skylak": 510, "cascad": 510, "lake": [510, 515, 554], "cooper": [510, 515, 554], "ic": [510, 554], "sapphir": [510, 512], "rapid": [510, 512], "hbm": 510, "arctic": 510, "sound": 510, "pont": 510, "vecchio": 510, "cento": [510, 568], "ubuntu": 510, "22": [510, 568], "04": [510, 568], "maco": 510, "ventura": 510, "fortensorflow": 510, "forpytorch": 510, "12": [510, 536, 568], "tf_enable_onednn_opt": 510, "onednn": [510, 515, 556], "newer": 510, "subject": 511, "accompani": [511, 565], "wish": 511, "bibtex": 511, "author": 511, "feng": 511, "tian": 511, "hanwen": 511, "haihao": [511, 553], "shen": [511, 553], "suyu": 511, "chen": 511, "howpublish": 511, "year": 511, "logo": 511, "atom": 511, "phi": 511, "pentium": 511, "vtune": 511, "corpor": 511, "subsidiari": 511, "brand": 511, "claim": 511, "sq": [512, 562], "woq": 512, "4th": [512, 554, 556], "gen": [512, 515, 554, 556, 558], "codenam": [512, 515], "quickli": [512, 565, 566], "eleutherai": [512, 538, 562, 568], "6b": [512, 538, 562, 568], "facebook": [512, 540, 562, 568], "3b": [512, 562], "30b": [512, 562, 568], "llama": [512, 553, 554, 557, 559, 562, 568], "7b": [512, 562, 568], "13b": [512, 562, 568], "70b": [512, 568], "tiiuae": [512, 562, 568], "40b": 512, "soon": 512, "popularli": 513, "industri": [513, 554], "label_map": 513, "decis": 513, "ap": 513, "curv": 513, "turn": [513, 528, 557], "target_boxes_num": 513, "str_label": 513, "int_label": 513, "inturn": 513, "cocomap": 513, "vocmap": 513, "categor": 513, "multiclass": 513, "multilabel": 513, "newmetr": 513, "reset": 513, "reflect": [513, 564], "new_metr": 513, "deliv": [514, 554, 560], "conveni": [514, 541], "upgrad": 514, "veri": [514, 535, 539, 556, 559, 565, 566], "comprehens": [514, 566], "resort": 514, "automodelforsequenceclassif": 514, "autotoken": 514, "val_dataset": [514, 556], "val_dataload": [514, 556], "worker": [514, 544, 547, 548, 549, 556], "ping_memori": [514, 556], "formul": 514, "effort": 514, "onnxrt_integ": [514, 567], "onnxrt_qlinear": [514, 567], "image_tensor": [514, 567], "post_training_dynamic_qu": [514, 555, 565], "1000": [514, 543, 567], "2000": 514, "sampling_s": [514, 567], "model_wis": [514, 567], "op_dict": 514, "op_wis": [514, 563, 567], "sigopt_api_token": [514, 561, 565], "sigopt_project_id": [514, 561, 565], "sigopt_experiment_nam": [514, 561, 565], "demo": 514, "600": 514, "training_arg": 514, "emul": [514, 556], "trainer": [514, 525], "briefli": [514, 562], "pruning_func": 514, "train_dataload": [514, 553, 556], "n_gpu": 514, "gradient_accumulation_step": 514, "clip_grad_norm_": 514, "max_grad_norm": 514, "start_epoch": [514, 555, 567], "end_epoch": [514, 555, 567], "97": [514, 568], "newli": [514, 553], "on_after_optimizer_step": [514, 553], "layer3": [514, 553], "0004": 514, "randomresizedcrop": [514, 564], "totensor": [514, 564], "485": 514, "456": [514, 568], "406": [514, 568], "nepoch": 514, "cnt": 514, "loss_sum": 514, "iter_bar": 514, "desc": 514, "teacher_logit": 514, "train_fun": 514, "training_func": 514, "recent": [514, 515], "growth": [514, 515, 553], "complex": [514, 515, 553], "significantli": [514, 515, 537, 539, 553, 565], "bandwidth": [514, 515, 559], "exit_polici": [514, 567], "determinist": 514, "meaning": [514, 552], "reli": [514, 562], "prune_conf": 514, "quantization_aware_training_conf": 514, "aforement": 514, "inset": 514, "p_conf": [514, 552], "ssd_mobilenet_v1": 514, "benchmarkconf": 514, "sixteen": 515, "launch": [515, 535, 540], "3rd": [515, 554, 556, 558], "boost": [515, 518, 534, 553, 554], "x86": 515, "avx512": [515, 556], "vcvtne2ps2bf16": 515, "vcvtneps2bf16": 515, "vdpbf16p": 515, "fbgemm": [515, 556], "tensorrtexecutionprovid": [515, 556], "cudaexecutionprovid": [515, 556], "dnnlexecutionprovid": [515, 556], "avx512_bf16": 515, "plu": 515, "resnet18": [515, 519, 568], "persist": 516, "brought": [516, 518, 525, 556], "tf2": 516, "h5": 516, "hybridblock": 516, "0000": 516, "saved_result": [516, 538, 559], "simplifi": [517, 528, 534, 553, 554], "acquir": 517, "analysi": [517, 534, 553, 561], "heurist": [517, 534], "great": 517, "facilit": 517, "autocast": 517, "my_model": 517, "no_grad": 517, "memory_format": 517, "112": 517, "plugin": [517, 535], "aw": [517, 525, 544, 554, 568], "sagemak": [517, 525], "neural_cod": [517, 519, 521, 522, 523, 525], "bench": 517, "superbench": 517, "enjoi": [518, 522, 525], "reload": [518, 535, 537, 540], "modern": [519, 559], "democrat": [519, 554], "programm": [519, 525, 534], "nano_bf16_channels_last": 519, "nano_bf16_ipex_channels_last": 519, "nano_bf16_ipex": 519, "nano_bf16": 519, "nano_fp32_channels_last": 519, "nano_fp32_ipex_channels_last": 519, "nano_fp32_ipex": 519, "nano_gpu_to_cpu": 519, "nano_int8": 519, "nano_jit_bf16_channels_last": 519, "nano_jit_bf16_ipex_channels_last": 519, "nano_jit_bf16_ipex": 519, "nano_jit_bf16": 519, "nano_jit_fp32_channels_last": 519, "nano_jit_fp32_ipex_channels_last": 519, "nano_jit_fp32_ipex": 519, "nano_jit_fp32": 519, "nano_onnxruntime_fp32": 519, "nano_onnxruntime_int8_qlinear": 519, "openvino": 519, "nano_openvino_fp32": 519, "nano_openvino_int8": 519, "bc": [520, 528], "conda_prefix": 520, "echo": 520, "tradit": [520, 553], "libjemalloc": 520, "libiomp5": 520, "home": 520, "lib": 520, "ld_preload": 520, "malloc_conf": 520, "oversize_threshold": 520, "background_thread": 520, "metadata_thp": 520, "dirty_decay_m": 520, "9000000000": 520, "muzzy_decay_m": 520, "kmp_affin": 520, "kmp_blocktim": 520, "dnnl_primitive_cache_capac": 520, "governor": 520, "cpufreq": 520, "scaling_governor": 520, "powersav": 520, "tee": 520, "pytorch_jit_script": [521, 524], "pytorch_channels_last": [521, 524], "run_bench": 521, "patch": [521, 534], "patch_path": 521, "your_patch_path": 521, "sweep": 521, "sweep_object": 521, "bench_config": 521, "bench_featur": 521, "sai": 522, "run_glu": [522, 523, 545, 548, 549], "requisit": 522, "task_nam": [522, 523, 545, 548, 549], "do_ev": [522, 523, 538, 545, 548, 549], "remain": 522, "itself": [522, 553], "run_glue_optim": 522, "static_ipex": 522, "auto_qu": 523, "v4": [523, 545, 548, 549, 568], "albert": [523, 568], "sst2": 523, "alexnet": [523, 568], "pytorch_amp": 524, "optimize_for_infer": 524, "pytorch_jit_trac": 524, "pytorch_jit_script_ofi": 524, "pytorch_jit_trace_ofi": 524, "torchdynamo": 524, "pytorch_torchdynamo_jit_script": 524, "pytorch_torchdynamo_jit_trac": 524, "pytorch_torchdynamo_jit_script_ofi": 524, "pytorch_torchdynamo_jit_trace_ofi": 524, "pytorch_inc_bf16": 524, "pytorch_inc_static_quant_fx": 524, "pytorch_inc_static_quant_ipex": 524, "pytorch_inc_static_quant_ipex_xpu": 524, "pytorch_inc_dynamic_qu": 524, "pytorch_ipex_fp32": 524, "pytorch_ipex_bf16": 524, "pytorch_ipex_int8_static_qu": 524, "pytorch_ipex_int8_dynamic_qu": 524, "blade": 524, "disc": 524, "pytorch_aliblad": 524, "pytorch_lightning_bf16_cpu": 524, "tensorflow_amp": 524, "keras_amp": 524, "tensorflow_inc": 524, "keras_inc": 524, "onnx_inc_static_quant_qlinear": 524, "onnx_inc_static_quant_qdq": 524, "onnx_inc_dynamic_qu": 524, "optimum": [524, 525, 537, 559], "pytorch_inc_huggingface_optimum_stat": 524, "pytorch_inc_huggingface_optimum_dynam": 524, "intel_extension_for_transform": 524, "bigdl": [524, 525], "nano": [524, 525], "nano_": 524, "inc_auto": 524, "delight": 525, "announc": 525, "500": [525, 543, 568], "jupyt": [525, 527, 528, 531], "isa": 525, "adjust": [525, 556, 562], "delta": 525, "acc_delta": 525, "int8_acc": 525, "fp32_acc": 525, "ext": [527, 529, 531, 532, 533], "lab": [527, 528, 529, 531, 532], "nodej": [527, 531], "jlpm": [527, 531], "yarn": [527, 531], "npm": [527, 528, 531], "lieu": [527, 531], "labextens": [527, 528, 531], "typescript": [527, 531], "watch": [527, 531, 540], "immedi": [527, 531, 553], "refresh": [527, 531], "browser": [527, 531, 536, 540], "wait": [527, 531, 534, 544], "rebuilt": [527, 531], "easier": [527, 531, 534, 536, 554], "symlink": [527, 531], "down": 528, "finish": [528, 544], "blank": 528, "cell": 528, "gain": [528, 552, 554], "mkl": 528, "jemalloc": 528, "pip3": 528, "pyproject": [529, 532], "toml": [529, 532], "twine": [529, 532], "whl": [529, 532], "dist": [529, 532], "sdist": [529, 532], "bdist_wheel": [529, 532], "deprec": [529, 532, 560, 564], "frontend": [529, 532, 542, 549], "login": [529, 532, 561], "cut": [529, 532], "admin_github_token": [529, 532], "pypi_token": [529, 532], "npm_token": [529, 532], "secret": [529, 532], "panel": [529, 532, 534], "draft": [529, 532], "changelog": [529, 532, 533], "pkg": [529, 532], "bot": [529, 532], "pick": [529, 532, 535], "feedstock": [529, 532], "hatch": 532, "notabl": 533, "vscode": [533, 535], "daili": 534, "advantag": [534, 553, 555, 565], "remot": 534, "server": [534, 536, 539, 542, 547, 548, 549], "re": [534, 540, 559], "market": 534, "uninstal": 534, "fill": [534, 561, 564, 565], "upper": 534, "sidebar": 534, "hover": 534, "track": [534, 561], "argpars": 534, "pop": [534, 544], "diff": 534, "manifest": 535, "declar": 535, "palett": 535, "registercommand": 535, "amodio": 535, "tsl": 535, "matcher": 535, "dbaeumer": 535, "eslint": [535, 540], "press": 535, "f5": 535, "ctrl": 535, "hello": 535, "world": 535, "breakpoint": 535, "consol": [535, 540], "relaunch": 535, "toolbar": 535, "node_modul": 535, "viewlet": 535, "dropdown": 535, "runner": [535, 540], "startup": 535, "bundl": 535, "neural_insight": [536, 538, 539], "tl": 536, "ui": 536, "5000": 536, "338174d13706855fc6924cec7b3a8ae8": 536, "listen": 536, "firewal": 536, "8080": 536, "cert": 536, "path_to_cert": 536, "crt": 536, "path_to_private_kei": 536, "encrypt": 536, "expos": 536, "forfeit": 536, "client": [536, 542, 549], "extern": 536, "threat": 536, "diagnost": 536, "skill": 536, "feel": [536, 540], "layoutlmv3": [537, 568], "seqev": 537, "sentencepiec": 537, "timm": 537, "fvcore": 537, "pillow": 537, "einop": 537, "textdist": 537, "setuptool": 537, "cli": 537, "hypjudi": 537, "finetun": [537, 553, 559, 568], "funsd": [537, 568], "calib_dataset": 537, "incdataset": 537, "eval_dataset": 537, "poor": [537, 563], "9049": 537, "2989": 537, "66": [537, 568], "9631": 537, "glob": 537, "panda": 537, "pd": 537, "set_opt": 537, "max_row": 537, "max_column": 537, "getmtim": 537, "activations_t": 537, "weights_tabl": [537, 538], "read_csv": 537, "nweight": 537, "descend": 537, "sorted_data": 537, "sort_valu": 537, "ascend": 537, "evid": 537, "tip": 537, "8981": 537, "7502": 537, "run_clm": 538, "wikitext": [538, 568], "dataset_config_nam": 538, "do_train": 538, "inspect_sav": 538, "inspect_result": 538, "quan": 538, "model_summari": 538, "incept": [539, 568], "v3": [539, 568], "inception_v3": [539, 563], "inceptionv3_fp32_pretrained_model": [539, 563], "bash": [539, 563], "prepare_dataset": 539, "sh": [539, 563], "raw_dir": 539, "img_raw": 539, "delet": [539, 553], "run_tun": 539, "nc_inception_v3": 539, "highest": [539, 545, 565], "satisfactori": 539, "webpag": 539, "spike": 539, "bottom": 539, "chart": [539, 556, 561, 563], "concentr": 539, "toler": 539, "But": 539, "bigger": 539, "bootstrap": 540, "localhost": [540, 542, 547, 548], "3000": 540, "lint": 540, "interact": [540, 561], "correctli": 540, "hash": [540, 543], "readi": [540, 553], "aren": 540, "transit": 540, "webpack": 540, "babel": 540, "tweak": 540, "ever": 540, "curat": 540, "suitabl": 540, "middl": [540, 562], "shouldn": 540, "understand": [540, 556, 563, 566], "wouldn": 540, "couldn": 540, "troubleshoot": 540, "effortlessli": 541, "grpc": [541, 542, 546, 547, 548, 550], "queue": 541, "seamlessli": [541, 553, 565], "mpi": [541, 542, 565], "neural_solut": [541, 542, 547, 548, 549], "task_monitor_port": [542, 547, 548, 549], "22222": [542, 547, 548, 549], "result_monitor_port": [542, 547, 548, 549], "33333": [542, 547, 548, 549], "restful_api_port": [542, 547, 548, 549], "hostfil": [542, 544, 547, 548, 549], "grpc_api_port": [542, 547, 548, 549], "api_typ": [542, 547, 548, 549], "conda_env": [542, 547, 548, 549], "upload_path": [542, 547, 548, 549], "8000": [542, 547, 548, 549], "monitor": [542, 547, 548, 549], "3333": [542, 547, 548, 549], "2222": [542, 547, 548, 549], "ns_workspac": [542, 547, 548, 549], "hf_model": [542, 546, 548, 549], "curl": [542, 543, 547, 548], "task_id": [542, 547, 548, 549], "usernam": 542, "db": [542, 544], "serve_log": [542, 547, 548, 549], "frontend_grpc": 542, "task_log": 542, "task_bdf0bd1b2cc14bc19bce12d4f9b333c7": 542, "task_workspac": 542, "bdf0bd1b2cc14bc19bce12d4f9b333c7": 542, "aliv": 542, "properli": 542, "commonli": [542, 553], "hostnam": 542, "breakdown": 542, "ip": 542, "hous": 542, "host1": [542, 547, 548], "host2": [542, 547, 548], "query_id": 542, "oaa": 543, "host_ip": 543, "task_request": [543, 547, 548, 549], "tuning_info": [543, 547], "optimization_result": [543, 547], "result_path": [543, 547, 548], "closur": 543, "404": [543, 553, 568], "health": 543, "healthi": 543, "quantized_model": [543, 547, 548], "400": [543, 568], "alloc": 544, "incom": 544, "taskmonitor": 544, "cluster": [544, 547, 548, 565], "tasklaunch": 544, "resultmonitor": 544, "receiv": [544, 561], "p1": 544, "notif": 544, "p2": 544, "p3": 544, "mpirun": [544, 565], "perf": 544, "p4": 544, "four": [544, 563, 568], "classdiagram": 544, "taskdb": 544, "get_statu": 544, "update_statu": 544, "task_collect": 544, "append_task": 544, "get_all_pending_task": 544, "update_task_statu": 544, "task_db": 544, "wait_new_task": 544, "schedule_task": 544, "dispatch_task": 544, "launch_task": 544, "query_task_statu": 544, "node_list": 544, "reserve_resourc": 544, "get_node_statu": 544, "gcp": [544, 554], "script_url": [545, 547, 548, 549], "archiv": 545, "tf_example1": [546, 547, 548], "hf_models_grpc": [546, 549], "00173": 547, "01024": 547, "task_request_distribut": 547, "custom_models_optim": 547, "7602cd63d4c849e7a686a8165a77f69d": [547, 548], "151": [547, 568], "8617": 547, "17": [547, 568], "8213": [547, 568], "number_of_socket": [547, 548], "number_of_thread": [547, 548], "cdf419910f9b4d2a8320d0e420ac1d0a": 548, "optimized_result": 548, "58": [548, 568], "3162": 548, "6488": [548, 568], "06": [549, 567, 568], "34": [549, 568], "55": [549, 568], "d3e10a49326449fb9d0d62f2bfc1cb43": 549, "fastapi": 550, "multi_object": 551, "benefit": 552, "instanti": 552, "neuron": 553, "art": 553, "grown": 553, "unpreced": 553, "increasingli": 553, "crucial": 553, "stand": [553, 565], "shrink": 553, "contextu": 553, "scene": 553, "haven": 553, "color": [553, 557], "lowest": [553, 565], "emsp": 553, "downstream": 553, "prone": 553, "co": 553, "discourag": 553, "penal": 553, "parameter": 553, "lightweight": 553, "perceptron": 553, "mlp": 553, "valuabl": [553, 563], "basi": 553, "billion": 553, "dolli": [553, 562, 568], "mpt": [553, 562, 568], "lm": [553, 568], "lamini": [553, 562], "worth": 553, "mention": [553, 559], "tend": 553, "exemplifi": 553, "complement": 553, "fortieth": 553, "miss": [553, 556], "pruner2": 553, "few": [553, 554, 562, 565], "lm_head": 553, "yourself": 553, "uncertain": 553, "auto_config": 553, "quit": 553, "straightforward": [553, 559, 562], "pruning_pattern": 553, "pruning_start": 553, "pruning_end": 553, "sparse_gpt": 553, "embed_out": 553, "card": 553, "hesit": 553, "causal": 553, "clm": 553, "sst": [553, 568], "25": [553, 568], "63": [553, 568], "24": [553, 565, 568], "35": [553, 568], "flan": 553, "t5": [553, 568], "english": 553, "romanian": 553, "381": 553, "yolov5": 553, "75": [553, 568], "2x1": [553, 568], "801": 553, "7895": 553, "signific": [553, 554, 557, 562], "reduct": [553, 557, 567], "namhoon": 553, "lee": 553, "thalaiyasingam": 553, "ajanthan": 553, "philip": 553, "torr": 553, "2019": 553, "zafrir": 553, "ofir": 553, "ariel": 553, "larei": 553, "boudoukh": 553, "mosh": 553, "wasserblat": 553, "2111": 553, "05754": 553, "2021": 553, "kwon": 553, "kim": 553, "mahonei": 553, "hassoun": 553, "keutzer": 553, "gholami": 553, "pp": 553, "24101": 553, "24116": 553, "frantar": [553, 559], "alistarh": 553, "medium": 554, "aug": 554, "juli": 554, "onnxcommunitymeetup2023": 554, "chatbot": 554, "june": 554, "msft": 554, "netflix": 554, "apr": 554, "mlperf": [554, 568], "5x": 554, "heterogen": 554, "mar": 554, "jan": 554, "busi": 554, "amx": 554, "journei": 554, "dec": 554, "mleffici": 554, "deepen": 554, "foundat": 554, "intellig": 554, "vmware": 554, "applianc": 554, "bitnami": 554, "nov": 554, "sota": 554, "plug": 554, "twitter": 554, "linkedin": 554, "zone": 554, "land": 554, "pat": 554, "keynot": 554, "intelon": 554, "chines": 554, "purif": 554, "sacrif": 554, "jun": 554, "partner": 554, "feb": 554, "joint": 554, "bilibili": 554, "gestalt": 554, "ml": 554, "doubl": 554, "abound": 554, "lpot": [554, 560], "nextplatform": 554, "cern": 554, "gan": 554, "3dgan": 554, "iml": 554, "workshop": 554, "asplo": 554, "18": [554, 568], "highli": [554, 559], "intelcaff": 554, "aris": 555, "henc": 555, "onnxrt_qoper": 555, "quant_aware_train": 555, "weight_compress": [555, 567], "initial_spars": [555, 567], "prune_typ": [555, 567], "basic_magnitud": [555, 567], "update_frequ": 555, "prune_domain": 555, "tile_pattern_1x1": 555, "invent": 556, "cost": [556, 559], "theoret": [556, 559], "zeropoint": 556, "255": [556, 562], "overflow": 556, "unseen": 556, "enough": 556, "peopl": 556, "mimic": 556, "fact": 556, "ultim": 556, "pain": 556, "lossi": 556, "philosophi": 556, "neither": 556, "nor": 556, "val_load": 556, "avg": 556, "themselv": 556, "dmlexecutionprovid": 556, "meanwhil": 557, "substanti": 557, "pose": 557, "challeng": 557, "greatli": [557, 559], "constrain": 557, "grei": 557, "blue": 557, "rectangl": 557, "w8a8": [557, 559], "10005": 557, "rtn_arg": [557, 559], "ouput_dir": 557, "fp32_model_path": 557, "int8_model_path": 557, "ON": 558, "forc": 558, "postposttrainingquantconfig": 558, "bf16wrapper": 558, "retrac": 558, "preval": 559, "grow": 559, "demand": 559, "trade": 559, "bottleneck": 559, "roughli": 559, "speak": 559, "capac": [559, 561], "flop": 559, "famou": 559, "approx": 559, "bmm": 559, "100x": 559, "excel": 559, "stai": [559, 562], "quantif": [559, 562], "think": 559, "intuit": [559, 562], "uniformli": 559, "qlora": 559, "invers": 559, "restor": 559, "protect": 559, "inspir": 559, "normalfloat": 559, "e2m1": 559, "bnb": 559, "805": 559, "91": [559, 562, 568], "stabil": 559, "date": 559, "gptq_arg": 559, "use_full_length": 559, "awq_arg": 559, "compressed_model": 559, "omit": 559, "rtn_g32asym": 559, "gptq_g32asym": 559, "gptq_g32asym_disable_last_matmul": 559, "gptq_g128asym": 559, "awq_g32asym": 559, "xiao": [559, 562], "guangxuan": [559, 562], "2211": [559, 562], "10438": [559, 562], "wei": [559, 562], "xiui": [559, 562], "suppress": [559, 562], "2209": [559, 562], "13325": [559, 562], "lin": 559, "ji": 559, "2306": 559, "00978": 559, "elia": 559, "dettmer": 559, "tim": 559, "2305": 559, "14314": 559, "site": 560, "assist": 560, "experienc": 560, "18284": 560, "absenc": 560, "safe_mod": 560, "model_from_json": 560, "defici": 560, "hinder": 560, "sed": 560, "your_script": 560, "backbon": 561, "sigopt_experiment_id": 561, "nc": [561, 565], "suffici": 561, "ordinari": 561, "latenc": [561, 565], "8266": 561, "8372": 561, "2132": 561, "83": [561, 562, 568], "7495": 561, "8299": 561, "8294": 561, "85": [561, 562, 568], "0837": 561, "8291": 561, "4469": 561, "gigant": 562, "systemat": 562, "migrat": [562, 566], "difficulti": 562, "mathemat": 562, "allevi": 562, "coarsest": 562, "finer": [562, 565], "matric": 562, "similarli": 562, "finest": 562, "consumpt": 562, "suppos": 562, "6839": 562, "4741": 562, "7451": 562, "9301": 562, "1742": 562, "6835": 562, "q_min": 562, "q_max": 562, "q_x": 562, "clamp_": 562, "round_": 562, "w_q": 562, "00296431384049356": 562, "59": [562, 568], "172": [562, 568], "192": 562, "w_dq": 562, "2220": 562, "1510": 562, "2420": 562, "2570": 562, "0500": 562, "1890": 562, "mseloss": 562, "1983354538679123": 562, "6848": 562, "4743": 562, "7440": 562, "9308": 562, "1749": 562, "385297635664756e": 562, "07": [562, 567, 568], "quantize_per_channel": 562, "x_tmp": 562, "detach": 562, "keepdim": 562, "dequantize_per_channel": 562, "0029": [562, 568], "0036": 562, "162": [562, 568], "48": [562, 568], "72": [562, 568], "93": [562, 568], "207": 562, "139": [562, 568], "6837": 562, "4734": 562, "1751": 562, "6821": 562, "637690492221736e": 562, "6376e": 562, "3852e": 562, "cdot": 562, "quantize_per_tensor_absmax": 562, "n_bit": 562, "div_": 562, "0806": 562, "7589": 562, "6038": 562, "3815": 562, "5040": 562, "7174": 562, "5444": 562, "5826": 562, "7772": 562, "5555": 562, "3740": 562, "3253": 562, "0698": 562, "1381": 562, "5972": [562, 568], "0086": 562, "0737": 562, "8298": 562, "6883": 562, "2991": 562, "1601": 562, "6506": 562, "8246": 562, "3924": 562, "3845": 562, "8768": 562, "w_scale": 562, "x_q": 562, "x_scale": 562, "84": [562, 568], "120": 562, "0059755356051027775": 562, "89": [562, 568], "119": 562, "57": [562, 568], "006533813662827015": 562, "y_q": 562, "17509": 562, "7608": 562, "4055": 562, "16599": 562, "21020": 562, "10016": 562, "9860": 562, "22444": 562, "y_dq": 562, "6836": 562, "2970": 562, "1583": 562, "6481": 562, "8207": 562, "3911": 562, "3850": 562, "8763": 562, "though": 562, "simplic": 562, "fp1": 562, "fp2": 562, "subsect": [562, 567], "x1": [562, 565], "x2": [562, 565], "herebi": 562, "optdecoderlay": 562, "blockwis": 562, "auto_alpha_arg": 562, "overhead": 562, "hardtanh": 562, "t5norm": 562, "llamanorm": 562, "groupnorm": 562, "lambada": 562, "openai": [562, 568], "sweet": 562, "spot": 562, "bigscienc": [562, 568], "560m": 562, "354": 562, "3542": 562, "1b7": 562, "4634": 562, "4936": 562, "518": 562, "5185": 562, "7b1": [562, 568], "5764": [562, 568], "5977": 562, "bloomz": [562, 568], "3947": 562, "3930": 562, "4828": 562, "4906": 562, "5018": 562, "4980": 562, "5593": [562, 568], "5552": 562, "125m": 562, "379": 562, "3757": 562, "350m": 562, "4516": 562, "4533": 562, "5789": 562, "5742": 562, "6365": 562, "6404": 562, "6769": [562, 568], "6804": [562, 568], "6872": 562, "6814": 562, "7149": 562, "7128": 562, "66b": 562, "7398": 562, "7326": 562, "7361": [562, 568], "7357": 562, "7627": [562, 568], "7590": 562, "7759": [562, 568], "7840": 562, "65b": 562, "7908": 562, "7957": 562, "7392": [562, 568], "7335": [562, 568], "chat": [562, 568], "7058": [562, 568], "6994": 562, "7677": [562, 568], "7615": [562, 568], "6831": [562, 568], "mbzuai": 562, "124m": 562, "3804": 562, "3887": 562, "774m": 562, "5048": 562, "5057": 562, "5b": 562, "5443": [562, 568], "5436": 562, "mosaicml": [562, 568], "655": [562, 568], "6499": 562, "stabilityai": 562, "stablelm": 562, "4172": 562, "4149": 562, "togethercomput": 562, "redpajama": 562, "incit": 562, "6542": 562, "6735": 562, "6718": 562, "6740": [562, 568], "6569": 562, "6621": 562, "7143": 562, "7221": 562, "6895": 562, "6953": [562, 568], "databrick": [562, 568], "6866": [562, 568], "6297": 562, "6247": 562, "6437": [562, 568], "6392": 562, "7332": 562, "7632": 562, "asterisk": 562, "consider": 562, "arang": 562, "tolist": 562, "default_alpha": 562, "alpha_min": 562, "alpha_max": 562, "alpha_step": 562, "step_siz": 562, "shared_criterion": 562, "do_blockwis": 562, "jason": 562, "emerg": 562, "transact": 562, "yvinec": 562, "edouard": 562, "proceed": 562, "cvf": 562, "winter": 562, "instrument": 563, "writer": 563, "_pre_eval_hook": 563, "_post_eval_hook": 563, "submodul": 563, "whitelist": 563, "_recordingobserv": 563, "output_tensors_dict": 563, "current_it": 563, "get_tensor_valu": 563, "_observer_forward_hook": 563, "activation_post_process": 563, "_add_observer_": 563, "named_children": 563, "leaf": 563, "add_modul": 563, "register_forward_hook": 563, "dump_tim": 563, "summarywrit": 563, "_acc": 563, "tune_": 563, "add_graph": 563, "get_observer_dict": 563, "observer_dict": 563, "is_quant": 563, "add_histogram": 563, "shell": 563, "bind_al": 563, "logdir_spec": 563, "tune_0_acc0": 563, "tune_1": 563, "tune_1_acc0": 563, "79": [563, 568], "baseline_acc_0": 563, "776": 563, "tune_1_acc_0": 563, "095": 563, "runs_v3": 563, "run_tuning_dump_tensor": 563, "inceptionv3": 563, "run_quant": 563, "topologi": 563, "nc_inceptionv3": 563, "inceptionv3_dump_tensor": 563, "eightbit": 563, "disappear": 563, "centercrop": 564, "randomcrop": 564, "cropres": 564, "decodeimag": 564, "jpeg": 564, "encodejp": 564, "alignimagechannel": 564, "68": [564, 568], "116": 564, "78": [564, 568], "103": 564, "94": [564, 568], "017": 564, "bilinearimagenet": [564, 567], "topilimag": 564, "padding_mod": 564, "border": 564, "pixel": 564, "edg": 564, "colorjitt": 564, "bright": 564, "satur": 564, "hue": 564, "jitter": 564, "tondarrai": 564, "o1": 565, "human": 565, "aggress": 565, "classic": 565, "flowchart": 565, "htmllabel": 565, "td": 565, "classdef": 565, "itemstyl": 565, "cce5ff": 565, "stroke": 565, "99ccff": 565, "s1": 565, "s2": 565, "s3": 565, "s4": 565, "s5": 565, "s6": 565, "s7": 565, "nbsp": 565, "subgraphstyl": 565, "ffffff": 565, "attempt": 565, "post_training_auto_qu": 565, "trial": 565, "increment": 565, "ii": 565, "spent": 565, "hawq_v2_loss": 565, "model_loss": 565, "black": 565, "compli": 565, "posterior": 565, "short": 565, "loglevel": 565, "endlessli": 565, "perspect": 565, "smbo": 565, "appl": 565, "surrog": 565, "densiti": 565, "parzen": 565, "greatest": 565, "hour": 565, "dai": 565, "next_tune_cfg": 565, "overridden": 565, "replic": 565, "replica": 565, "fed": 565, "synchron": 565, "number_of_process": 565, "run_cmd": 565, "abctunestrategi": 565, "familiar": 566, "notebook": 566, "introduct": 566, "organ": 567, "logic": 567, "mobilenet_v1": 567, "40": [567, 568], "beta_1": 567, "beta_2": 567, "epsilon": 567, "sparsecategoricalcrossentropi": 567, "sum_over_batch_s": 567, "from_logit": 567, "54": [567, 568], "19": [567, 568], "09": 568, "1x": 568, "platinum": 568, "8480": 568, "8ghz": 568, "56": 568, "ht": 568, "turbo": 568, "256gb": 568, "16x16gb": 568, "ddr5": 568, "4800": 568, "mt": 568, "bio": 568, "3a14": 568, "tel2p1": 568, "microcod": 568, "0x2b0001b0": 568, "gcc": 568, "20210514": 568, "red": 568, "hat": 568, "visit": 568, "1s4c14ins1bsthroughput": 568, "sec": 568, "74": 568, "2914": 568, "621": 568, "69x": 568, "76": 568, "23": 568, "46": 568, "2160": 568, "545": 568, "47": 568, "96x": 568, "resnet101": 568, "77": 568, "37": 568, "1508": 568, "428": 568, "53x": 568, "70": 568, "44": 568, "69": 568, "3290": 568, "1229": 568, "68x": 568, "38": 568, "73": 568, "2404": 568, "1048": 568, "49": 568, "29x": 568, "71": 568, "1669": 568, "33x": 568, "1073": 568, "245": 568, "38x": 568, "374": 568, "52": 568, "18x": 568, "96": 568, "5478": 568, "1756": 568, "12x": 568, "4133": 568, "1748": 568, "36x": 568, "1534": 568, "236": 568, "62": 568, "49x": 568, "vgg19": 568, "1377": 568, "197": 568, "resnetv2": 568, "39": 568, "1125": 568, "656": 568, "71x": 568, "709": 568, "367": 568, "00": 568, "93x": 568, "152": 568, "03": 568, "497": 568, "265": 568, "87x": 568, "densenet": 568, "121": 568, "557": 568, "67": 568, "61": 568, "22x": 568, "161": 568, "29": 568, "353": 568, "235": 568, "50x": 568, "169": 568, "65": 568, "41": 568, "435": 568, "385": 568, "13x": 568, "efficientnet": 568, "b0": 568, "786": 568, "723": 568, "09x": 568, "130": 568, "23x": 568, "1291": 568, "683": 568, "89x": 568, "61x": 568, "1295": 568, "453": 568, "85x": 568, "242": 568, "31x": 568, "cnn": 568, "80x": 568, "43": 568, "81x": 568, "166": 568, "07x": 568, "16x": 568, "26": 568, "173": 568, "yolov3": 568, "82": 568, "230": 568, "92": 568, "36": 568, "37x": 568, "58x": 568, "86": 568, "416": 568, "35x": 568, "88x": 568, "51": 568, "17x": 568, "75552": 568, "50803": 568, "1s56c1ins1bsthroughput": 568, "60": 568, "64x": 568, "1673": 568, "653": 568, "56x": 568, "1170": 568, "329": 568, "55x": 568, "977": 568, "335": 568, "91x": 568, "resnest50": 568, "81": 568, "10x": 568, "resnext101_32x8d": 568, "562": 568, "109": 568, "efficientnet_b0": 568, "696": 568, "667": 568, "04x": 568, "efficientnet_b3": 568, "508": 568, "397": 568, "28x": 568, "efficientnet_b7": 568, "234": 568, "149": 568, "57x": 568, "peleenet": 568, "858": 568, "588": 568, "46x": 568, "se_resnext50_32x4d": 568, "739": 568, "283": 568, "yolo": 568, "141": 568, "99x": 568, "174": 568, "camembert": 568, "395": 568, "171": 568, "30x": 568, "53": 568, "795": 568, "341": 568, "744": 568, "343": 568, "163": 568, "funnel": 568, "182": 568, "65x": 568, "399": 568, "21x": 568, "407": 568, "412": 568, "stsb": 568, "413": 568, "39x": 568, "409": 568, "75x": 568, "401": 568, "70x": 568, "76x": 568, "reform": 568, "crime": 568, "punish": 568, "446": 568, "398": 568, "lvwerra": 568, "pegasu": 568, "samsum": 568, "102": 568, "770": 568, "450": 568, "14x": 568, "whisper": 568, "25x": 568, "abeja": 568, "neox": 568, "japanes": 568, "90x": 568, "1646": 568, "657": 568, "1098": 568, "322": 568, "41x": 568, "568": 568, "19x": 568, "1383": 568, "761": 568, "82x": 568, "32x": 568, "5701": 568, "1593": 568, "2090": 568, "685": 568, "05x": 568, "resnext101_32x16d_wsl": 568, "556": 568, "01x": 568, "86x": 568, "558": 568, "11x": 568, "lambada_openai": 568, "hellaswag": 568, "winogrand": 568, "piqa": 568, "word_perplex": 568, "4954": 568, "6409": 568, "7541": 568, "6434": 568, "8816": 568, "gptqw4g128asym": 568, "679": 568, "4895": 568, "6433": 568, "7476": 568, "6399": 568, "9945": 568, "0999": 568, "gptqw4g32asym": 568, "6829": 568, "4923": 568, "6401": 568, "7486": 568, "6410": 568, "9963": 568, "0141": 568, "gptqw4g128sym": 568, "4907": 568, "6361": 568, "7443": 568, "6390": 568, "9932": 568, "1498": 568, "gptqw4g32sym": 568, "6911": 568, "4899": 568, "6448": 568, "7497": 568, "6439": 568, "0008": 568, "0927": 568, "5049": 568, "6543": 568, "7628": 568, "6497": 568, "2862": 568, "4984": 568, "6535": 568, "7568": 568, "6473": 568, "9962": 568, "4193": 568, "6885": 568, "4973": 568, "753": 568, "6455": 568, "9935": 568, "4607": 568, "decapoda": 568, "5642": 568, "6709": 568, "7835": 568, "6887": 568, "4202": 568, "7244": 568, "5603": 568, "6614": 568, "6824": 568, "9909": 568, "5881": 568, "5911": 568, "7009": 568, "7878": 568, "7106": 568, "212": 568, "7518": 568, "5843": 568, "6961": 568, "7911": 568, "4319": 568, "7572": 568, "5898": 568, "7056": 568, "7894": 568, "7105": 568, "9998": 568, "3429": 568, "7596": 568, "5841": 568, "6977": 568, "7905": 568, "7080": 568, "4916": 568, "6266": 568, "7277": 568, "8096": 568, "7350": 568, "2384": 568, "778": 568, "624": 568, "7269": 568, "8047": 568, "7334": 568, "9979": 568, "4237": 568, "7706": 568, "6239": 568, "7285": 568, "8058": 568, "7322": 568, "4697": 568, "7836": 568, "6195": 568, "7337": 568, "9983": 568, "5604": 568, "5732": 568, "648": 568, "7715": 568, "6746": 568, "7107": 568, "6982": 568, "5637": 568, "6527": 568, "7704": 568, "6713": 568, "9950": 568, "9702": 568, "5682": 568, "6575": 568, "7758": 568, "6742": 568, "9994": 568, "9317": 568, "567": 568, "6902": 568, "7353": 568, "6622": 568, "7829": 568, "6862": 568, "9942": 568, "9635": 568, "7246": 568, "5617": 568, "6756": 568, "7797": 568, "6854": 568, "9931": 568, "2799": 568, "7312": 568, "6059": 568, "7103": 568, "7077": 568, "2213": 568, "7273": 568, "6018": 568, "7088": 568, "7742": 568, "7030": 568, "9934": 568, "2538": 568, "083": 568, "7283": 568, "6053": 568, "7024": 568, "7764": 568, "7031": 568, "1889": 568, "727": 568, "5997": 568, "7018": 568, "9916": 568, "2504": 568, "7122": 568, "8984": 568, "5933": 568, "689": 568, "7851": 568, "7075": 568, "1556": 568, "448": 568, "7675": 568, "5934": 568, "7856": 568, "7111": 568, "9984": 568, "1514": 568, "927": 568, "7566": 568, "5899": 568, "7032": 568, "9953": 568, "1374": 568, "728": 568, "4628": 568, "6456": 568, "6029": 568, "6438": 568, "5799": 568, "4542": 568, "6004": 568, "9957": 568, "0626": 568, "4789": 568, "6134": 568, "7432": 568, "5525": 568, "4731": 568, "6504": 568, "7617": 568, "6094": 568, "7828": 568, "5098": 568, "7622": 568, "6505": 568, "3242": 568, "6878": 568, "5058": 568, "6393": 568, "7633": 568, "6491": 568, "9978": 568, "5514": 568, "6864": 568, "5084": 568, "6519": 568, "6509": 568, "0006": 568, "4728": 568, "6876": 568, "5045": 568, "6474": 568, "9952": 568, "6379": 568, "5282": 568, "614": 568, "7448": 568, "6312": 568, "6377": 568, "5228": 568, "5991": 568, "6261": 568, "9919": 568, "4096": 568, "neo": 568, "6224": 568, "4271": 568, "577": 568, "722": 568, "5871": 568, "9359": 568, "6123": 568, "4227": 568, "5738": 568, "7203": 568, "5823": 568, "9917": 568, "3377": 568, "615": 568, "4259": 568, "5714": 568, "7247": 568, "9951": 568, "2083": 568, "6154": 568, "4208": 568, "5777": 568, "7198": 568, "5834": 568, "9937": 568, "3121": 568, "20b": 568, "7233": 568, "5359": 568, "7753": 568, "195": 568, "7186": 568, "5328": 568, "7699": 568, "6687": 568, "9922": 568, "3463": 568, "7268": 568, "533": 568, "659": 568, "6726": 568, "2897": 568, "5718": 568, "6859": 568, "7927": 568, "6890": 568, "9324": 568, "7006": 568, "5655": 568, "6803": 568, "7965": 568, "6857": 568, "1515": 568, "5752": 568, "6748": 568, "7845": 568, "6724": 568, "5951": 568, "6472": 568, "5716": 568, "6685": 568, "784": 568, "6678": 568, "8539": 568, "6918": 568, "5819": 568, "678": 568, "6861": 568, "8863": 568, "5765": 568, "6827": 568, "7873": 568, "6832": 568, "9958": 568, "1451": 568, "storywrit": 568, "693": 568, "5477": 568, "663": 568, "6719": 568, "9125": 568, "6661": 568, "7813": 568, "6693": 568, "9961": 568, "1137": 568, "rw": 568, "6604": 568, "5419": 568, "6598": 568, "6594": 568, "7616": 568, "6484": 568, "5369": 568, "7807": 568, "6559": 568, "9947": 568, "9411": 568, "6571": 568, "5398": 568, "6582": 568, "6579": 568, "8809": 568, "652": 568, "535": 568, "7682": 568, "6532": 568, "9906": 568, "0048": 568, "5177": 568, "6669": 568, "7824": 568, "5053": 568, "6301": 568, "5142": 568, "6654": 568, "6483": 568, "9933": 568, "8146": 568, "517": 568, "9941": 568, "1566": 568, "724": 568, "1567": 568, "716": 568, "1414": 568, "718": 568, "97x": 568, "1459": 568, "721": 568, "02x": 568, "1582": 568, "752": 568, "7139": 568, "4289": 568, "66x": 568, "4080": 568, "7236": 568, "4299": 568, "6842": 568, "4496": 568, "52x": 568, "591": 568, "178": 568, "183": 568, "590": 568, "179": 568, "42x": 568, "5703": 568, "2578": 568, "5610": 568, "2603": 568, "shufflenet": 568, "6689": 568, "3690": 568, "5692": 568, "3758": 568, "51x": 568, "googlenet": 568, "1792": 568, "1111": 568, "1821": 568, "1104": 568, "squeezenet": 568, "9472": 568, "5582": 568, "9861": 568, "5566": 568, "77x": 568, "caffenet": 568, "3348": 568, "1141": 568, "3509": 568, "1142": 568, "2426": 568, "987": 568, "2208": 568, "1016": 568, "zfnet": 568, "930": 568, "532": 568, "919": 568, "417": 568, "1880": 568, "1159": 568, "62x": 568, "1798": 568, "1151": 568, "2890": 568, "1380": 568, "2548": 568, "1362": 568, "507": 568, "94x": 568, "1286": 568, "904": 568, "1121": 568, "856": 568, "829": 568, "1044": 568, "790": 568, "849": 568, "627": 568, "79x": 568, "yolov4": 568, "duc": 568, "tini": 568, "1119": 568, "ultra": 568, "8537": 568, "1934": 568, "emot": 568, "ferplu": 568, "3568": 568, "arcfac": 568, "494": 568, "244": 568, "226": 568, "392": 568, "223": 568, "integerop": 568, "473": 568, "548": 568, "964": 568, "540": 568, "394": 568, "602": 568, "487": 568, "222": 568, "20x": 568, "189": 568, "146": 568, "125": 568, "bidaf": 568, "2757": 568, "2277": 568, "gpt2": 568, "360": 568, "213": 568, "490": 568, "304": 568, "214": 568, "347": 568, "272": 568, "216": 568, "26x": 568, "489": 568, "27x": 568, "l12": 568, "h384": 568, "1054": 568, "585": 568, "1072": 568, "890": 568, "746": 568, "268": 568, "211": 568, "l6": 568, "1958": 568, "1130": 568, "73x": 568, "electra": 568, "discrimin": 568, "1797": 568, "1077": 568, "67x": 568, "1930": 568, "1139": 568, "mini": 568, "5510": 568, "3334": 568, "5627": 568, "3365": 568, "108": 568, "110": 568, "bart": 568, "15x": 568, "deberta": 568, "168": 568, "145": 568, "spanbert": 568, "63x": 568, "multilingu": 568, "113": 568, "159": 568, "40x": 568, "distilgpt2": 568, "layoutlm": 568, "layoutlmv2": 568, "codebert": 568, "47x": 568, "fcn": 568, "perplex": 568, "2788": 568, "7002": 568, "4124": 568, "9921": 568, "3950": 568, "5711": 568, "9892": 568, "9163": 568, "7240": 568, "9902": 568, "0438": 568, "7634": 568, "1186": 568, "9944": 568, "1276": 568, "7543": 568, "6181": 568, "rtnw4g32asym": 568, "6496": 568, "9967": 568, "7964": 568, "6612": 568, "rtnw4g32sym": 568, "7941": 568, "7243": 568, "9971": 568, "taskdataset": 568, "accuracyspars": 568, "ratiospars": 568, "commentsbalancedor": 568, "unbalanc": 568, "answeringsquad": 568, "87f1": 568, "momentumunbalanc": 568, "momentumbalanc": 568, "90f1": 568, "59f1": 568, "23f1": 568, "classificationmrpc": 568, "52f1": 568, "26f1": 568, "classificationsst": 568, "61accuraci": 568, "recognitionimagenet": 568, "95top1": 568, "v5s6": 568, "detectioncoco": 568, "ap0": 568, "6ap0": 568, "393": 568, "584": 568, "34f1": 568, "lassounbalanc": 568, "classificationmnli": 568, "mm": 568, "allbalanc": 568, "32accuraci": 568, "sensitivitybalanc": 568, "classificationqqp": 568, "classificationqnli": 568, "54accuraci": 568, "em": 568, "mobilenetv2": 568, "wideresnet40": 568, "9522": 568, "8178": 568, "0213": 568, "8235": 568, "027": 568, "5494": 568, "7153": 568, "5540": 568, "0046": 568, "5523": 568, "vgg": 568, "bn": 568, "7022": 568, "7415": 568, "7025": 568, "0003": 568, "6739": 568, "7399": 568, "6845": 568, "0106": 568, "blendcnn": 568, "7034": 568, "8382": 568, "bilstm": 568, "8314": 568, "9403": 568, "9048": 568, "0734": 568, "7323": 568, "8256": 568, "8084": 568, "8814": 568, "7442": 568, "8371": 568, "0119": 568, "0115": 568, "tinybert": 568, "8018": 568, "8044": 568, "8363": 568, "8411": 568, "8025": 568, "8074": 568, "0007": 568, "0030": 568, "8626": 568, "9091": 568, "8782": 568, "8684": 568, "8259": 568, "0058": 568, "distilroberta": 568, "6057": 568, "6187": 568, "0130": 568, "c6i": 568, "2xlarg": 568, "c6a": 568, "c6g": 568, "a100cuda": 568, "executionprovid": 568}, "objects": {"": [[0, 0, 0, "-", "block_mask"], [355, 0, 0, "-", "neural_compressor"]], "neural_compressor": [[2, 0, 0, "-", "adaptor"], [174, 0, 0, "-", "algorithm"], [177, 0, 0, "-", "benchmark"], [180, 0, 0, "-", "common"], [192, 0, 0, "-", "compression"], [220, 0, 0, "-", "conf"], [222, 0, 0, "-", "config"], [223, 0, 0, "-", "contrib"], [248, 0, 0, "-", "data"], [302, 0, 0, "-", "experimental"], [362, 0, 0, "-", "metric"], [364, 0, 0, "-", "mix_precision"], [366, 0, 0, "-", "model"], [374, 0, 0, "-", "objective"], [375, 0, 0, "-", "profiling"], [397, 0, 0, "-", "quantization"], [405, 0, 0, "-", "strategy"], [417, 0, 0, "-", "template"], [429, 0, 0, "-", "tensorflow"], [443, 0, 0, "-", "torch"], [456, 0, 0, "-", "training"], [460, 0, 0, "-", "utils"], [469, 0, 0, "-", "version"]], "neural_compressor.adaptor": [[1, 0, 0, "-", "adaptor"], [3, 0, 0, "-", "keras"], [7, 0, 0, "-", "keras_utils"], [11, 0, 0, "-", "mxnet"], [12, 0, 0, "-", "mxnet_utils"], [14, 0, 0, "-", "onnxrt"], [17, 0, 0, "-", "ox_utils"], [45, 0, 0, "-", "pytorch"], [46, 0, 0, "-", "query"], [47, 0, 0, "-", "tensorflow"], [111, 0, 0, "-", "tf_utils"], [158, 0, 0, "-", "torch_utils"]], "neural_compressor.adaptor.adaptor": [[1, 1, 1, "", "Adaptor"], [1, 2, 1, "", "adaptor_registry"]], "neural_compressor.adaptor.keras": [[3, 1, 1, "", "KerasAdaptor"], [3, 1, 1, "", "KerasQuery"]], "neural_compressor.adaptor.keras_utils": [[4, 0, 0, "-", "conv2d"], [5, 0, 0, "-", "dense"], [6, 0, 0, "-", "depthwise_conv2d"], [8, 0, 0, "-", "pool2d"], [9, 0, 0, "-", "quantizer"], [10, 0, 0, "-", "separable_conv2d"]], "neural_compressor.adaptor.mxnet": [[11, 1, 1, "", "MXNetQuery"], [11, 1, 1, "", "MxNetAdaptor"]], "neural_compressor.adaptor.mxnet_utils": [[13, 0, 0, "-", "util"]], "neural_compressor.adaptor.mxnet_utils.util": [[13, 1, 1, "", "CalibCollector"], [13, 1, 1, "", "CalibData"], [13, 1, 1, "", "CollectorBase"], [13, 1, 1, "", "DataIterLoader"], [13, 1, 1, "", "DataLoaderWrap"], [13, 1, 1, "", "NameCollector"], [13, 1, 1, "", "OpType"], [13, 1, 1, "", "TensorCollector"], [13, 2, 1, "", "amp_convert"], [13, 2, 1, "", "calib_model"], [13, 2, 1, "", "check_mx_version"], [13, 2, 1, "", "combine_capabilities"], [13, 2, 1, "", "create_data_example"], [13, 2, 1, "", "distribute_calib_tensors"], [13, 2, 1, "", "ensure_list"], [13, 2, 1, "", "fuse"], [13, 2, 1, "", "get_framework_name"], [13, 2, 1, "", "is_model_quantized"], [13, 2, 1, "", "isiterable"], [13, 2, 1, "", "make_module"], [13, 2, 1, "", "make_nc_model"], [13, 2, 1, "", "make_symbol_block"], [13, 2, 1, "", "ndarray_to_device"], [13, 2, 1, "", "parse_tune_config"], [13, 2, 1, "", "prepare_dataloader"], [13, 2, 1, "", "prepare_model"], [13, 2, 1, "", "prepare_model_data"], [13, 2, 1, "", "quantize_sym_model"], [13, 2, 1, "", "query_quantizable_nodes"], [13, 2, 1, "", "run_forward"]], "neural_compressor.adaptor.onnxrt": [[14, 1, 1, "", "ONNXRTQuery"], [14, 1, 1, "", "ONNXRT_IntegerOpsAdaptor"], [14, 1, 1, "", "ONNXRT_QDQAdaptor"], [14, 1, 1, "", "ONNXRT_QLinearOpsAdaptor"], [14, 1, 1, "", "ONNXRT_WeightOnlyAdaptor"], [14, 1, 1, "", "ONNXRUNTIMEAdaptor"]], "neural_compressor.adaptor.ox_utils": [[15, 0, 0, "-", "calibration"], [16, 0, 0, "-", "calibrator"], [29, 0, 0, "-", "operators"], [41, 0, 0, "-", "quantizer"], [42, 0, 0, "-", "smooth_quant"], [43, 0, 0, "-", "util"], [44, 0, 0, "-", "weight_only"]], "neural_compressor.adaptor.ox_utils.calibration": [[15, 1, 1, "", "ONNXRTAugment"]], "neural_compressor.adaptor.ox_utils.calibrator": [[16, 1, 1, "", "CalibratorBase"], [16, 1, 1, "", "HistogramCollector"], [16, 1, 1, "", "KLCalibrator"], [16, 1, 1, "", "MinMaxCalibrator"], [16, 1, 1, "", "PercentileCalibrator"], [16, 2, 1, "", "calib_registry"], [16, 2, 1, "", "smooth_distribution"]], "neural_compressor.adaptor.ox_utils.operators": [[18, 0, 0, "-", "activation"], [19, 0, 0, "-", "argmax"], [20, 0, 0, "-", "attention"], [21, 0, 0, "-", "binary_op"], [22, 0, 0, "-", "concat"], [23, 0, 0, "-", "conv"], [24, 0, 0, "-", "direct_q8"], [25, 0, 0, "-", "embed_layernorm"], [26, 0, 0, "-", "gather"], [27, 0, 0, "-", "gavgpool"], [28, 0, 0, "-", "gemm"], [30, 0, 0, "-", "lstm"], [31, 0, 0, "-", "matmul"], [32, 0, 0, "-", "maxpool"], [33, 0, 0, "-", "norm"], [34, 0, 0, "-", "ops"], [35, 0, 0, "-", "pad"], [36, 0, 0, "-", "pooling"], [37, 0, 0, "-", "reduce"], [38, 0, 0, "-", "resize"], [39, 0, 0, "-", "split"], [40, 0, 0, "-", "unary_op"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[18, 1, 1, "", "ActivationOperator"], [18, 1, 1, "", "Float16ActivationOperator"], [18, 1, 1, "", "QActivationOperator"], [18, 1, 1, "", "RemovableActivationOperator"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[19, 1, 1, "", "ArgMaxOperator"], [19, 1, 1, "", "QArgMaxOperator"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[20, 1, 1, "", "AttentionOperator"], [20, 1, 1, "", "QAttentionOperator"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[21, 1, 1, "", "BinaryDirect8BitOperator"], [21, 1, 1, "", "BinaryOperator"], [21, 1, 1, "", "Float16BinaryOperator"], [21, 1, 1, "", "QBinaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[22, 1, 1, "", "ConcatOperator"], [22, 1, 1, "", "QConcatOperator"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[23, 1, 1, "", "ConvOperator"], [23, 1, 1, "", "QConvOperator"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[24, 1, 1, "", "Direct8BitOperator"], [24, 1, 1, "", "QDirectOperator"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[25, 1, 1, "", "EmbedLayerNormalizationOperator"], [25, 1, 1, "", "QEmbedLayerNormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[26, 1, 1, "", "GatherOperator"], [26, 1, 1, "", "QGatherOperator"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[27, 1, 1, "", "GlobalAveragePoolOperator"], [27, 1, 1, "", "QGlobalAveragePoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[28, 1, 1, "", "GemmOperator"], [28, 1, 1, "", "QGemmOperator"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[30, 1, 1, "", "LSTMOperator"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[31, 1, 1, "", "FusedMatMulOperator"], [31, 1, 1, "", "MatMulOperator"], [31, 1, 1, "", "QMatMulOperator"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[32, 1, 1, "", "MaxPoolOperator"], [32, 1, 1, "", "QMaxPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.norm": [[33, 1, 1, "", "BatchNormalizationOperator"], [33, 1, 1, "", "NormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[34, 1, 1, "", "Operator"], [34, 1, 1, "", "QOperator"], [34, 2, 1, "", "op_registry"], [34, 2, 1, "", "qop_registry"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[35, 1, 1, "", "PadOperator"], [35, 1, 1, "", "QPadOperator"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[36, 1, 1, "", "PoolOperator"], [36, 1, 1, "", "QPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.reduce": [[37, 1, 1, "", "ReduceMinMaxOperator"], [37, 1, 1, "", "ReduceOperator"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[38, 1, 1, "", "QResizeOperator"], [38, 1, 1, "", "ResizeOperator"]], "neural_compressor.adaptor.ox_utils.operators.split": [[39, 1, 1, "", "QSplitOperator"], [39, 1, 1, "", "SplitOperator"]], "neural_compressor.adaptor.ox_utils.operators.unary_op": [[40, 1, 1, "", "UnaryDirect8BitOperator"], [40, 1, 1, "", "UnaryOperator"]], "neural_compressor.adaptor.ox_utils.quantizer": [[41, 1, 1, "", "Quantizer"]], "neural_compressor.adaptor.ox_utils.smooth_quant": [[42, 1, 1, "", "ORTSmoothQuant"], [42, 2, 1, "", "get_quant_dequant_output"], [42, 2, 1, "", "make_sub_graph"], [42, 2, 1, "", "quant_dequant_data"]], "neural_compressor.adaptor.ox_utils.util": [[43, 1, 1, "", "QuantFormat"], [43, 1, 1, "", "QuantType"], [43, 1, 1, "", "QuantizationMode"], [43, 1, 1, "", "QuantizedInitializer"], [43, 1, 1, "", "QuantizedValue"], [43, 1, 1, "", "QuantizedValueType"], [43, 1, 1, "", "ValueInfo"], [43, 2, 1, "", "attribute_to_kwarg"], [43, 2, 1, "", "calculate_scale_zp"], [43, 2, 1, "", "cast_tensor"], [43, 2, 1, "", "collate_preds"], [43, 2, 1, "", "dequantize_data"], [43, 2, 1, "", "dequantize_data_with_scale_zero"], [43, 2, 1, "", "dtype_to_name"], [43, 2, 1, "", "find_by_name"], [43, 2, 1, "", "float_to_bfloat16"], [43, 2, 1, "", "float_to_float16"], [43, 2, 1, "", "get_node_original_name"], [43, 2, 1, "", "infer_shapes"], [43, 2, 1, "", "is_B_transposed"], [43, 2, 1, "", "make_dquant_node"], [43, 2, 1, "", "make_quant_node"], [43, 2, 1, "", "quantize_data"], [43, 2, 1, "", "quantize_data_per_channel"], [43, 2, 1, "", "quantize_data_with_scale_zero"], [43, 2, 1, "", "quantize_nparray"], [43, 2, 1, "", "remove_init_from_model_input"], [43, 2, 1, "", "simple_progress_bar"], [43, 2, 1, "", "split_shared_bias"], [43, 2, 1, "", "to_numpy"], [43, 2, 1, "", "trt_env_setup"]], "neural_compressor.adaptor.ox_utils.weight_only": [[44, 2, 1, "", "apply_awq_clip"], [44, 2, 1, "", "apply_awq_scale"], [44, 2, 1, "", "awq_quantize"], [44, 2, 1, "", "get_blob_size"], [44, 2, 1, "", "get_weight_scale"], [44, 2, 1, "", "gptq"], [44, 2, 1, "", "gptq_quantize"], [44, 2, 1, "", "make_matmul_weight_only_node"], [44, 2, 1, "", "pad_tensor"], [44, 2, 1, "", "prepare_inputs"], [44, 2, 1, "", "qdq_tensor"], [44, 2, 1, "", "quant_tensor"], [44, 2, 1, "", "rtn_quantize"]], "neural_compressor.adaptor.pytorch": [[45, 1, 1, "", "PyTorchAdaptor"], [45, 1, 1, "", "PyTorchQuery"], [45, 1, 1, "", "PyTorchWeightOnlyAdaptor"], [45, 1, 1, "", "PyTorch_FXAdaptor"], [45, 1, 1, "", "PyTorch_IPEXAdaptor"], [45, 1, 1, "", "TemplateAdaptor"], [45, 2, 1, "", "get_ops_recursively"]], "neural_compressor.adaptor.query": [[46, 1, 1, "", "QueryBackendCapability"]], "neural_compressor.adaptor.tensorflow": [[47, 1, 1, "", "TensorFlowAdaptor"], [47, 1, 1, "", "TensorflowQuery"], [47, 1, 1, "", "Tensorflow_ITEXAdaptor"]], "neural_compressor.adaptor.tf_utils": [[48, 0, 0, "-", "graph_converter"], [49, 0, 0, "-", "graph_converter_without_calib"], [87, 0, 0, "-", "graph_rewriter"], [110, 0, 0, "-", "graph_util"], [112, 0, 0, "-", "quantize_graph"], [139, 0, 0, "-", "quantize_graph_common"], [140, 0, 0, "-", "smooth_quant_calibration"], [141, 0, 0, "-", "smooth_quant_scaler"], [142, 0, 0, "-", "tf2onnx_converter"], [145, 0, 0, "-", "transform_graph"], [148, 0, 0, "-", "util"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[48, 1, 1, "", "GraphConverter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[49, 1, 1, "", "GraphConverterWithoutCalib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[52, 0, 0, "-", "bf16"], [76, 0, 0, "-", "generic"], [86, 0, 0, "-", "graph_base"], [95, 0, 0, "-", "int8"], [101, 0, 0, "-", "onnx"], [106, 0, 0, "-", "qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[50, 0, 0, "-", "bf16_convert"], [51, 0, 0, "-", "dequantize_cast_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[50, 1, 1, "", "BF16Convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer": [[51, 1, 1, "", "DequantizeCastOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[53, 0, 0, "-", "convert_add_to_biasadd"], [54, 0, 0, "-", "convert_layout"], [55, 0, 0, "-", "convert_leakyrelu"], [56, 0, 0, "-", "convert_nan_to_random"], [57, 0, 0, "-", "convert_placeholder_to_const"], [58, 0, 0, "-", "dilated_contraction"], [59, 0, 0, "-", "dummy_biasadd"], [60, 0, 0, "-", "expanddims_optimizer"], [61, 0, 0, "-", "fetch_weight_from_reshape"], [62, 0, 0, "-", "fold_batch_norm"], [63, 0, 0, "-", "fold_constant"], [64, 0, 0, "-", "fuse_biasadd_add"], [65, 0, 0, "-", "fuse_column_wise_mul"], [66, 0, 0, "-", "fuse_conv_with_math"], [67, 0, 0, "-", "fuse_decomposed_bn"], [68, 0, 0, "-", "fuse_decomposed_in"], [69, 0, 0, "-", "fuse_gelu"], [70, 0, 0, "-", "fuse_layer_norm"], [71, 0, 0, "-", "fuse_pad_with_conv"], [72, 0, 0, "-", "fuse_pad_with_fp32_conv"], [73, 0, 0, "-", "fuse_reshape_transpose"], [74, 0, 0, "-", "graph_cse_optimizer"], [75, 0, 0, "-", "grappler_pass"], [77, 0, 0, "-", "insert_print_node"], [78, 0, 0, "-", "move_squeeze_after_relu"], [79, 0, 0, "-", "pre_optimize"], [80, 0, 0, "-", "remove_training_nodes"], [81, 0, 0, "-", "rename_batch_norm"], [82, 0, 0, "-", "split_shared_input"], [83, 0, 0, "-", "strip_equivalent_nodes"], [84, 0, 0, "-", "strip_unused_nodes"], [85, 0, 0, "-", "switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[53, 1, 1, "", "ConvertAddToBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[54, 1, 1, "", "ConvertLayoutOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[55, 1, 1, "", "ConvertLeakyReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[56, 1, 1, "", "ConvertNanToRandom"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[57, 1, 1, "", "ConvertPlaceholderToConst"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[58, 1, 1, "", "DilatedContraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[59, 1, 1, "", "InjectDummyBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[60, 1, 1, "", "ExpandDimsOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[61, 1, 1, "", "FetchWeightFromReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[62, 1, 1, "", "FoldBatchNormNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[63, 1, 1, "", "GraphFoldConstantOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[64, 1, 1, "", "FuseBiasAddAndAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[65, 1, 1, "", "FuseColumnWiseMulOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[66, 1, 1, "", "FuseConvWithMathOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[67, 1, 1, "", "FuseDecomposedBNOptimizer"], [67, 2, 1, "", "bypass_reshape"], [67, 2, 1, "", "get_const_dim_count"], [67, 2, 1, "", "node_from_map"], [67, 2, 1, "", "node_name_from_input"], [67, 2, 1, "", "valid_reshape_inputs"], [67, 2, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[68, 1, 1, "", "FuseDecomposedINOptimizer"], [68, 2, 1, "", "bypass_reshape"], [68, 2, 1, "", "get_const_dim_count"], [68, 2, 1, "", "node_from_map"], [68, 2, 1, "", "node_name_from_input"], [68, 2, 1, "", "valid_reshape_inputs"], [68, 2, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[69, 1, 1, "", "FuseGeluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[70, 1, 1, "", "FuseLayerNormOptimizer"], [70, 2, 1, "", "node_from_map"], [70, 2, 1, "", "node_name_from_input"], [70, 2, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[71, 1, 1, "", "FusePadWithConv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[72, 1, 1, "", "FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[73, 1, 1, "", "FuseTransposeReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[74, 1, 1, "", "GraphCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[75, 1, 1, "", "GrapplerOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[77, 1, 1, "", "InsertPrintMinMaxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[78, 1, 1, "", "MoveSqueezeAfterReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[79, 1, 1, "", "PreOptimization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[80, 1, 1, "", "RemoveTrainingNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[81, 1, 1, "", "RenameBatchNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[82, 1, 1, "", "SplitSharedInputOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[83, 1, 1, "", "StripEquivalentNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[84, 1, 1, "", "StripUnusedNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[85, 1, 1, "", "SwitchOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[86, 1, 1, "", "GraphRewriterBase"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[88, 0, 0, "-", "freeze_fake_quant"], [89, 0, 0, "-", "freeze_value"], [90, 0, 0, "-", "freeze_value_without_calib"], [91, 0, 0, "-", "fuse_conv_redundant_dequantize"], [92, 0, 0, "-", "fuse_conv_requantize"], [93, 0, 0, "-", "fuse_matmul_redundant_dequantize"], [94, 0, 0, "-", "fuse_matmul_requantize"], [96, 0, 0, "-", "meta_op_optimizer"], [97, 0, 0, "-", "post_hostconst_converter"], [98, 0, 0, "-", "post_quantized_op_cse"], [99, 0, 0, "-", "rnn_convert"], [100, 0, 0, "-", "scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[88, 1, 1, "", "FreezeFakeQuantOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[89, 1, 1, "", "FreezeValueTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[90, 1, 1, "", "FreezeValueWithoutCalibTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[91, 1, 1, "", "FuseConvRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[92, 1, 1, "", "FuseConvRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[93, 1, 1, "", "FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[94, 1, 1, "", "FuseMatMulRequantizeDequantizeNewAPITransformer"], [94, 1, 1, "", "FuseMatMulRequantizeDequantizeTransformer"], [94, 1, 1, "", "FuseMatMulRequantizeNewAPITransformer"], [94, 1, 1, "", "FuseMatMulRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[96, 1, 1, "", "MetaInfoChangingMemOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[97, 1, 1, "", "PostHostConstConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[98, 1, 1, "", "PostCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[99, 1, 1, "", "QuantizedRNNConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[100, 1, 1, "", "ScaleProPagationTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[102, 0, 0, "-", "onnx_graph"], [103, 0, 0, "-", "onnx_node"], [104, 0, 0, "-", "onnx_schema"], [105, 0, 0, "-", "tf2onnx_utils"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[102, 1, 1, "", "OnnxGraph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[103, 1, 1, "", "OnnxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[104, 1, 1, "", "OnnxOpSchema"], [104, 2, 1, "", "get_max_supported_opset_version"], [104, 2, 1, "", "get_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[105, 1, 1, "", "SeqType"], [105, 2, 1, "", "add_port_to_name"], [105, 2, 1, "", "are_shapes_equal"], [105, 2, 1, "", "assert_error"], [105, 2, 1, "", "compute_const_folding_using_tf"], [105, 2, 1, "", "convert_tensorflow_tensor_to_onnx"], [105, 2, 1, "", "find_opset"], [105, 2, 1, "", "get_index_from_strided_slice_of_shape"], [105, 2, 1, "", "get_subgraphs_from_onnx"], [105, 2, 1, "", "get_tensorflow_node_attr"], [105, 2, 1, "", "get_tensorflow_node_shape_attr"], [105, 2, 1, "", "get_tensorflow_tensor_data"], [105, 2, 1, "", "get_tensorflow_tensor_shape"], [105, 2, 1, "", "infer_onnx_shape_dtype"], [105, 2, 1, "", "initialize_name_counter"], [105, 2, 1, "", "is_list_or_tuple"], [105, 2, 1, "", "is_onnx_domain"], [105, 2, 1, "", "make_onnx_inputs_outputs"], [105, 2, 1, "", "make_onnx_shape"], [105, 2, 1, "", "map_numpy_to_onnx_dtype"], [105, 2, 1, "", "map_onnx_to_numpy_type"], [105, 2, 1, "", "map_tensorflow_dtype"], [105, 2, 1, "", "read_tensorflow_node_attrs"], [105, 2, 1, "", "save_protobuf"], [105, 2, 1, "", "set_name"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[107, 0, 0, "-", "insert_qdq_pattern"], [108, 0, 0, "-", "merge_duplicated_qdq"], [109, 0, 0, "-", "share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[107, 1, 1, "", "GenerateGraphWithQDQPattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[108, 1, 1, "", "MergeDuplicatedQDQOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[109, 1, 1, "", "ShareQDQForItexYPatternOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_util": [[110, 1, 1, "", "GraphAnalyzer"], [110, 1, 1, "", "GraphRewriterHelper"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[114, 0, 0, "-", "qat"], [130, 0, 0, "-", "qdq"], [132, 0, 0, "-", "quantize_graph_base"], [133, 0, 0, "-", "quantize_graph_bn"], [134, 0, 0, "-", "quantize_graph_concatv2"], [135, 0, 0, "-", "quantize_graph_conv"], [136, 0, 0, "-", "quantize_graph_for_intel_cpu"], [137, 0, 0, "-", "quantize_graph_matmul"], [138, 0, 0, "-", "quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[113, 0, 0, "-", "fake_quantize"], [115, 0, 0, "-", "quantize_config"], [116, 0, 0, "-", "quantize_helper"], [117, 0, 0, "-", "quantize_layers"], [122, 0, 0, "-", "quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[113, 1, 1, "", "FakeQuantize"], [113, 1, 1, "", "FakeQuantizeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[115, 1, 1, "", "QuantizeConfig"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[116, 2, 1, "", "init_quantize_config"], [116, 2, 1, "", "qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[118, 0, 0, "-", "optimize_layer"], [119, 0, 0, "-", "quantize_layer_add"], [120, 0, 0, "-", "quantize_layer_base"], [121, 0, 0, "-", "quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[118, 2, 1, "", "config_quantizable_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[119, 1, 1, "", "QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[120, 1, 1, "", "QuantizeLayerBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[121, 1, 1, "", "QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[122, 1, 1, "", "QuantizeWrapper"], [122, 1, 1, "", "QuantizeWrapperBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[123, 0, 0, "-", "fuse_qdq_bn"], [124, 0, 0, "-", "fuse_qdq_concatv2"], [125, 0, 0, "-", "fuse_qdq_conv"], [126, 0, 0, "-", "fuse_qdq_deconv"], [127, 0, 0, "-", "fuse_qdq_in"], [128, 0, 0, "-", "fuse_qdq_matmul"], [129, 0, 0, "-", "fuse_qdq_pooling"], [131, 0, 0, "-", "optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[123, 1, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[124, 1, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[125, 1, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[126, 1, 1, "", "FuseNodeStartWithDeconv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[127, 1, 1, "", "FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[128, 1, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[129, 1, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[131, 1, 1, "", "OptimizeQDQGraph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[132, 1, 1, "", "QuantizeGraphBase"], [132, 1, 1, "", "QuantizeNodeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[133, 1, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[134, 1, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[135, 1, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[136, 1, 1, "", "QuantizeGraphForIntel"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[137, 1, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[138, 1, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[139, 1, 1, "", "QuantizeGraphHelper"]], "neural_compressor.adaptor.tf_utils.smooth_quant_calibration": [[140, 1, 1, "", "SmoothQuantCalibration"], [140, 1, 1, "", "SmoothQuantCalibrationLLM"]], "neural_compressor.adaptor.tf_utils.smooth_quant_scaler": [[141, 1, 1, "", "SmoothQuantScaler"], [141, 1, 1, "", "SmoothQuantScalerLLM"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[142, 1, 1, "", "TensorflowQDQToOnnxQDQConverter"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[143, 0, 0, "-", "bias_correction"], [144, 0, 0, "-", "graph_transform_base"], [146, 0, 0, "-", "insert_logging"], [147, 0, 0, "-", "rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[143, 1, 1, "", "BiasCorrection"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[144, 1, 1, "", "GraphTransformBase"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[146, 1, 1, "", "InsertLogging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[147, 1, 1, "", "RerangeQuantizedConcat"]], "neural_compressor.adaptor.tf_utils.util": [[148, 2, 1, "", "apply_inlining"], [148, 2, 1, "", "collate_tf_preds"], [148, 2, 1, "", "construct_function_from_graph_def"], [148, 2, 1, "", "disable_random"], [148, 2, 1, "", "fix_ref_type_of_graph_def"], [148, 2, 1, "", "generate_feed_dict"], [148, 2, 1, "", "get_estimator_graph"], [148, 2, 1, "", "get_graph_def"], [148, 2, 1, "", "get_input_output_node_names"], [148, 2, 1, "", "get_model_input_shape"], [148, 2, 1, "", "get_tensor_by_name"], [148, 2, 1, "", "get_tensor_val_from_graph_node"], [148, 2, 1, "", "get_weight_from_input_tensor"], [148, 2, 1, "", "int8_node_name_reverse"], [148, 2, 1, "", "is_ckpt_format"], [148, 2, 1, "", "is_saved_model_format"], [148, 2, 1, "", "iterator_sess_run"], [148, 2, 1, "", "parse_saved_model"], [148, 2, 1, "", "read_graph"], [148, 2, 1, "", "reconstruct_saved_model"], [148, 2, 1, "", "strip_equivalent_nodes"], [148, 2, 1, "", "strip_unused_nodes"], [148, 2, 1, "", "tf_diagnosis_helper"], [148, 2, 1, "", "version1_eq_version2"], [148, 2, 1, "", "version1_gt_version2"], [148, 2, 1, "", "version1_gte_version2"], [148, 2, 1, "", "version1_lt_version2"], [148, 2, 1, "", "version1_lte_version2"], [148, 2, 1, "", "write_graph"]], "neural_compressor.adaptor.torch_utils": [[151, 0, 0, "-", "autoround"], [154, 0, 0, "-", "awq"], [155, 0, 0, "-", "bf16_convert"], [156, 0, 0, "-", "gptq"], [157, 0, 0, "-", "hawq_metric"], [159, 0, 0, "-", "layer_wise_quant"], [164, 0, 0, "-", "mixed_precision"], [165, 0, 0, "-", "model_wrapper"], [166, 0, 0, "-", "pattern_detector"], [167, 0, 0, "-", "smooth_quant"], [168, 0, 0, "-", "symbolic_trace"], [169, 0, 0, "-", "teq"], [170, 0, 0, "-", "util"], [171, 0, 0, "-", "weight_only"]], "neural_compressor.adaptor.torch_utils.autoround": [[149, 0, 0, "-", "autoround"], [150, 0, 0, "-", "export"], [152, 0, 0, "-", "model_wrapper"], [153, 0, 0, "-", "sign_sgd"]], "neural_compressor.adaptor.torch_utils.autoround.autoround": [[149, 1, 1, "", "AutoAdamRound"], [149, 1, 1, "", "AutoOPTRound"], [149, 1, 1, "", "AutoRound"], [149, 1, 1, "", "SaveInputs"], [149, 1, 1, "", "WrapperMultiblock"], [149, 2, 1, "", "block_forward"], [149, 2, 1, "", "check_is_cpu"], [149, 2, 1, "", "collect_minmax_scale"], [149, 2, 1, "", "collect_round_v"], [149, 2, 1, "", "get_batch_dim"], [149, 2, 1, "", "get_block_names"], [149, 2, 1, "", "get_dataloader"], [149, 2, 1, "", "get_module"], [149, 2, 1, "", "get_scale_shape"], [149, 2, 1, "", "get_tokenizer_function"], [149, 2, 1, "", "move_input_to_device"], [149, 2, 1, "", "quant_weight"], [149, 2, 1, "", "quant_weight_actor"], [149, 2, 1, "", "quant_weight_asym"], [149, 2, 1, "", "quant_weight_sym"], [149, 2, 1, "", "quant_weight_w_scale"], [149, 2, 1, "", "round_ste"], [149, 2, 1, "", "sampling_inputs"], [149, 2, 1, "", "set_module"], [149, 2, 1, "", "unwrapper_block"], [149, 2, 1, "", "wrapper_block"]], "neural_compressor.adaptor.torch_utils.autoround.export": [[150, 2, 1, "", "export_compressed_model"]], "neural_compressor.adaptor.torch_utils.autoround.sign_sgd": [[153, 1, 1, "", "SGD"], [153, 2, 1, "", "sgd"]], "neural_compressor.adaptor.torch_utils.awq": [[154, 1, 1, "", "ActAwareWeightQuant"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[155, 1, 1, "", "BF16ModuleWrapper"], [155, 2, 1, "", "Convert"], [155, 2, 1, "", "bf16_symbolic_trace"]], "neural_compressor.adaptor.torch_utils.gptq": [[156, 1, 1, "", "GPTQ"], [156, 1, 1, "", "GPTQuantizer"], [156, 2, 1, "", "find_layers"], [156, 2, 1, "", "find_layers_name"], [156, 2, 1, "", "is_leaf"], [156, 2, 1, "", "log_quantizable_layers_per_transformer"], [156, 2, 1, "", "quantize"], [156, 2, 1, "", "trace_gptq_target_blocks"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[157, 1, 1, "", "HessianTrace"], [157, 1, 1, "", "Node_collector"], [157, 2, 1, "", "compare_weights"], [157, 2, 1, "", "hawq_top"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant": [[160, 0, 0, "-", "modified_pickle"], [161, 0, 0, "-", "quantize"], [162, 0, 0, "-", "torch_load"], [163, 0, 0, "-", "utils"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle": [[160, 3, 1, "", "PickleError"], [160, 3, 1, "", "PicklingError"], [160, 3, 1, "", "UnpicklingError"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize": [[161, 1, 1, "", "LayerWiseQuant"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load": [[162, 2, 1, "", "load"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils": [[163, 2, 1, "", "dowload_hf_model"], [163, 2, 1, "", "get_children"], [163, 2, 1, "", "get_module"], [163, 2, 1, "", "get_named_children"], [163, 2, 1, "", "get_super_module_by_name"], [163, 2, 1, "", "load_empty_model"], [163, 2, 1, "", "load_layer_wise_quantized_model"], [163, 2, 1, "", "load_tensor"], [163, 2, 1, "", "load_tensor_from_shard"], [163, 2, 1, "", "update_module"]], "neural_compressor.adaptor.torch_utils.mixed_precision": [[164, 2, 1, "", "ipex_mixed_precision"]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[165, 1, 1, "", "FakeAffineTensorQuantFunction"], [165, 1, 1, "", "MulLinear"], [165, 1, 1, "", "TEQLinearFakeQuant"]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[166, 1, 1, "", "TransformerBasedModelBlockPatternDetector"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[167, 1, 1, "", "TorchSmoothQuant"], [167, 2, 1, "", "get_module"], [167, 2, 1, "", "set_module"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[168, 2, 1, "", "symbolic_trace"], [168, 2, 1, "", "trace_and_fuse_sub_graph"]], "neural_compressor.adaptor.torch_utils.teq": [[169, 1, 1, "", "TEQuantizer"]], "neural_compressor.adaptor.torch_utils.util": [[170, 2, 1, "", "append_attr"], [170, 2, 1, "", "auto_copy"], [170, 2, 1, "", "calculate_quant_min_max"], [170, 2, 1, "", "calibration"], [170, 2, 1, "", "check_cfg_and_qconfig"], [170, 2, 1, "", "collate_torch_preds"], [170, 2, 1, "", "collect_weight_info"], [170, 2, 1, "", "fetch_module"], [170, 2, 1, "", "forward_wrapper"], [170, 2, 1, "", "generate_activation_observer"], [170, 2, 1, "", "get_absorb_layers"], [170, 2, 1, "", "get_block_prefix"], [170, 2, 1, "", "get_depth"], [170, 2, 1, "", "get_dict_at_depth"], [170, 2, 1, "", "get_element_under_depth"], [170, 2, 1, "", "get_embedding_contiguous"], [170, 2, 1, "", "get_example_input"], [170, 2, 1, "", "get_fallback_order"], [170, 2, 1, "", "get_hidden_states"], [170, 2, 1, "", "get_module_input_output"], [170, 2, 1, "", "get_mse_order_per_fp32"], [170, 2, 1, "", "get_mse_order_per_int8"], [170, 2, 1, "", "get_op_type_by_name"], [170, 2, 1, "", "get_quantizable_ops_from_cfgs"], [170, 2, 1, "", "get_torch_version"], [170, 2, 1, "", "input2tuple"], [170, 2, 1, "", "is_fused_module"], [170, 2, 1, "", "match_datatype_pattern"], [170, 2, 1, "", "move_input_device"], [170, 2, 1, "", "paser_cfgs"], [170, 2, 1, "", "set_module"], [170, 2, 1, "", "simple_inference"], [170, 2, 1, "", "update_sq_scale"]], "neural_compressor.adaptor.torch_utils.weight_only": [[171, 2, 1, "", "awq_quantize"], [171, 2, 1, "", "gptq_quantize"], [171, 2, 1, "", "qdq_weight_actor"], [171, 2, 1, "", "qdq_weight_asym"], [171, 2, 1, "", "qdq_weight_sym"], [171, 2, 1, "", "quant_weight"], [171, 2, 1, "", "quant_weight_w_scale"], [171, 2, 1, "", "quantize_4bit"], [171, 2, 1, "", "rtn_quantize"], [171, 2, 1, "", "search_clip"], [171, 2, 1, "", "teq_quantize"]], "neural_compressor.algorithm": [[172, 0, 0, "-", "algorithm"], [173, 0, 0, "-", "fast_bias_correction"], [175, 0, 0, "-", "smooth_quant"], [176, 0, 0, "-", "weight_correction"]], "neural_compressor.algorithm.algorithm": [[172, 1, 1, "", "ALGORITHMS"], [172, 1, 1, "", "Algorithm"], [172, 1, 1, "", "AlgorithmScheduler"], [172, 2, 1, "", "algorithm_registry"]], "neural_compressor.algorithm.fast_bias_correction": [[173, 1, 1, "", "FastBiasCorrection"]], "neural_compressor.algorithm.smooth_quant": [[175, 1, 1, "", "SmoothQuant"]], "neural_compressor.algorithm.weight_correction": [[176, 1, 1, "", "WeightCorrection"]], "neural_compressor.benchmark": [[177, 2, 1, "", "benchmark_with_raw_cmd"], [177, 2, 1, "", "call_one"], [177, 2, 1, "", "config_instance"], [177, 2, 1, "", "fit"], [177, 2, 1, "", "generate_prefix"], [177, 2, 1, "", "get_architecture"], [177, 2, 1, "", "get_bounded_threads"], [177, 2, 1, "", "get_core_ids"], [177, 2, 1, "", "get_physical_ids"], [177, 2, 1, "", "get_threads"], [177, 2, 1, "", "get_threads_per_core"], [177, 2, 1, "", "profile"], [177, 2, 1, "", "run_instance"], [177, 2, 1, "", "set_all_env_var"], [177, 2, 1, "", "set_env_var"], [177, 2, 1, "", "summary_benchmark"]], "neural_compressor.common": [[178, 0, 0, "-", "base_config"], [179, 0, 0, "-", "base_tune"], [181, 0, 0, "-", "logger"], [182, 0, 0, "-", "utility"]], "neural_compressor.common.base_config": [[178, 1, 1, "", "BaseConfig"], [178, 1, 1, "", "ComposableConfig"], [178, 2, 1, "", "register_config"]], "neural_compressor.common.base_tune": [[179, 1, 1, "", "BaseTuningConfig"], [179, 1, 1, "", "FrameworkWrapper"]], "neural_compressor.common.logger": [[181, 1, 1, "", "Logger"], [181, 2, 1, "", "debug"], [181, 2, 1, "", "error"], [181, 2, 1, "", "fatal"], [181, 2, 1, "", "info"], [181, 2, 1, "", "log"], [181, 2, 1, "", "warn"], [181, 2, 1, "", "warning"]], "neural_compressor.compression": [[183, 0, 0, "-", "callbacks"], [185, 0, 0, "-", "distillation"], [188, 0, 0, "-", "hpo"], [194, 0, 0, "-", "pruner"]], "neural_compressor.compression.callbacks": [[183, 1, 1, "", "BaseCallbacks"], [183, 1, 1, "", "DistillationCallbacks"], [183, 1, 1, "", "PruningCallbacks"], [183, 1, 1, "", "QuantizationAwareTrainingCallbacks"]], "neural_compressor.compression.callbacks.DistillationCallbacks": [[183, 4, 1, "", "_epoch_ran"], [183, 4, 1, "", "best_model"], [183, 4, 1, "", "best_score"], [183, 4, 1, "", "eval_frequency"]], "neural_compressor.compression.distillation": [[184, 0, 0, "-", "criterions"], [186, 0, 0, "-", "optimizers"], [187, 0, 0, "-", "utility"]], "neural_compressor.compression.distillation.criterions": [[184, 1, 1, "", "Criterions"], [184, 1, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [184, 1, 1, "", "KnowledgeDistillationFramework"], [184, 1, 1, "", "KnowledgeDistillationLoss"], [184, 1, 1, "", "PyTorchCriterions"], [184, 1, 1, "", "PyTorchCrossEntropyLoss"], [184, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [184, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [184, 1, 1, "", "PyTorchKnowledgeDistillationLoss"], [184, 1, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [184, 1, 1, "", "PyTorchSelfKnowledgeDistillationLoss"], [184, 1, 1, "", "PyTorchSelfKnowledgeDistillationLossWrapper"], [184, 1, 1, "", "SelfKnowledgeDistillationLoss"], [184, 1, 1, "", "TensorFlowCrossEntropyLoss"], [184, 1, 1, "", "TensorFlowSparseCategoricalCrossentropy"], [184, 1, 1, "", "TensorflowCriterions"], [184, 1, 1, "", "TensorflowKnowledgeDistillationLoss"], [184, 1, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [184, 1, 1, "", "TensorflowKnowledgeDistillationLossWrapper"], [184, 2, 1, "", "criterion_registry"]], "neural_compressor.compression.distillation.optimizers": [[186, 1, 1, "", "Optimizers"], [186, 1, 1, "", "PyTorchOptimizers"], [186, 1, 1, "", "PyTorchSGD"], [186, 1, 1, "", "TensorFlowAdam"], [186, 1, 1, "", "TensorFlowAdamW"], [186, 1, 1, "", "TensorFlowSGD"], [186, 1, 1, "", "TensorflowOptimizers"], [186, 2, 1, "", "optimizer_registry"]], "neural_compressor.compression.distillation.utility": [[187, 2, 1, "", "get_activation"], [187, 2, 1, "", "record_output"]], "neural_compressor.compression.hpo": [[189, 0, 0, "-", "sa_optimizer"], [190, 0, 0, "-", "search_algorithms"], [191, 0, 0, "-", "search_space"]], "neural_compressor.compression.hpo.search_algorithms": [[190, 1, 1, "", "BayesianOptimizationSearcher"], [190, 1, 1, "", "GridSearcher"], [190, 1, 1, "", "RandomSearcher"], [190, 1, 1, "", "Searcher"], [190, 1, 1, "", "XgbSearcher"], [190, 2, 1, "", "register_searcher"]], "neural_compressor.compression.hpo.search_space": [[191, 1, 1, "", "BaseSearchSpace"], [191, 1, 1, "", "ContinuousSearchSpace"], [191, 1, 1, "", "DiscreteSearchSpace"], [191, 1, 1, "", "SearchSpace"], [191, 2, 1, "", "register_searchspace"]], "neural_compressor.compression.pruner": [[193, 0, 0, "-", "criteria"], [196, 0, 0, "-", "model_slim"], [200, 0, 0, "-", "patterns"], [194, 2, 1, "", "prepare_pruning"], [207, 0, 0, "-", "pruners"], [213, 0, 0, "-", "pruning"], [214, 0, 0, "-", "regs"], [194, 2, 1, "", "save"], [215, 0, 0, "-", "schedulers"], [216, 0, 0, "-", "tf_criteria"], [217, 0, 0, "-", "utils"]], "neural_compressor.compression.pruner.criteria": [[193, 1, 1, "", "BlockMaskCriterion"], [193, 1, 1, "", "GradientCriterion"], [193, 1, 1, "", "MagnitudeCriterion"], [193, 1, 1, "", "PruningCriterion"], [193, 1, 1, "", "RetrainFreeCriterion"], [193, 1, 1, "", "SnipCriterion"], [193, 1, 1, "", "SnipMomentumCriterion"], [193, 2, 1, "", "get_criterion"], [193, 2, 1, "", "register_criterion"]], "neural_compressor.compression.pruner.criteria.BlockMaskCriterion": [[193, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.GradientCriterion": [[193, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.MagnitudeCriterion": [[193, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.PruningCriterion": [[193, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion": [[193, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipCriterion": [[193, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion": [[193, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.model_slim": [[195, 0, 0, "-", "auto_slim"], [197, 0, 0, "-", "pattern_analyzer"], [198, 0, 0, "-", "weight_slim"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[195, 2, 1, "", "generate_ffn2_pruning_config"], [195, 2, 1, "", "generate_mha_pruning_config"], [195, 2, 1, "", "model_slim"], [195, 2, 1, "", "model_slim_ffn2"], [195, 2, 1, "", "model_slim_mha"], [195, 2, 1, "", "parse_auto_slim_config"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[197, 1, 1, "", "ClassifierHeadSearcher"], [197, 1, 1, "", "ClassifierHeadSearcherTF"], [197, 1, 1, "", "JitBasicSearcher"], [197, 1, 1, "", "Linear2LinearSearcher"], [197, 1, 1, "", "RecipeSearcher"], [197, 1, 1, "", "SelfMHASearcher"], [197, 2, 1, "", "get_attributes"], [197, 2, 1, "", "get_common_module"], [197, 2, 1, "", "print_iterables"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher": [[197, 4, 1, "", "device"], [197, 4, 1, "", "flatten_static_graph"], [197, 4, 1, "", "model"], [197, 4, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF": [[197, 4, 1, "", "device"], [197, 4, 1, "", "flatten_static_graph"], [197, 4, 1, "", "model"], [197, 4, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher": [[197, 4, 1, "", "device"], [197, 4, 1, "", "flatten_static_graph"], [197, 4, 1, "", "model"], [197, 4, 1, "", "searching_results"], [197, 4, 1, "", "static_graph"], [197, 4, 1, "", "target_layers"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher": [[197, 4, 1, "", "current_pattern"], [197, 4, 1, "", "device"], [197, 4, 1, "", "flatten_static_graph"], [197, 4, 1, "", "model"], [197, 4, 1, "", "searching_results"], [197, 4, 1, "", "static_graph"], [197, 4, 1, "", "target_layers"], [197, 4, 1, "", "target_op_lut"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher": [[197, 4, 1, "", "model"], [197, 4, 1, "", "recipe"], [197, 4, 1, "", "searching_results"], [197, 4, 1, "", "targets"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher": [[197, 4, 1, "", "device"], [197, 4, 1, "", "flatten_static_graph"], [197, 4, 1, "", "model"], [197, 4, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[198, 1, 1, "", "LinearCompression"], [198, 1, 1, "", "LinearCompressionIterator"], [198, 1, 1, "", "PostCompressionUtils"]], "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression": [[198, 4, 1, "", "device"], [198, 4, 1, "", "layer_1"], [198, 4, 1, "", "layer_2"]], "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator": [[198, 4, 1, "", "linear_patterns"]], "neural_compressor.compression.pruner.patterns": [[199, 0, 0, "-", "base"], [200, 2, 1, "", "get_pattern"], [201, 0, 0, "-", "mha"], [202, 0, 0, "-", "ninm"], [203, 0, 0, "-", "nxm"]], "neural_compressor.compression.pruner.patterns.base": [[199, 1, 1, "", "BasePattern"], [199, 1, 1, "", "KerasBasePattern"], [199, 1, 1, "", "PytorchBasePattern"], [199, 2, 1, "", "register_pattern"]], "neural_compressor.compression.pruner.patterns.base.BasePattern": [[199, 4, 1, "", "config"], [199, 4, 1, "", "invalid_layers"], [199, 4, 1, "", "is_global"], [199, 4, 1, "", "keep_mask_layers"], [199, 4, 1, "", "max_sparsity_ratio_per_op"], [199, 4, 1, "", "min_sparsity_ratio_per_op"], [199, 4, 1, "", "modules"], [199, 4, 1, "", "pattern"], [199, 4, 1, "", "target_sparsity"]], "neural_compressor.compression.pruner.patterns.base.KerasBasePattern": [[199, 4, 1, "", "config"], [199, 4, 1, "", "invalid_layers"], [199, 4, 1, "", "is_global"], [199, 4, 1, "", "keep_mask_layers"], [199, 4, 1, "", "max_sparsity_ratio_per_op"], [199, 4, 1, "", "min_sparsity_ratio_per_op"], [199, 4, 1, "", "modules"], [199, 4, 1, "", "pattern"], [199, 4, 1, "", "target_sparsity"]], "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern": [[199, 4, 1, "", "config"], [199, 4, 1, "", "invalid_layers"], [199, 4, 1, "", "is_global"], [199, 4, 1, "", "keep_mask_layers"], [199, 4, 1, "", "max_sparsity_ratio_per_op"], [199, 4, 1, "", "min_sparsity_ratio_per_op"], [199, 4, 1, "", "modules"], [199, 4, 1, "", "pattern"], [199, 4, 1, "", "target_sparsity"]], "neural_compressor.compression.pruner.patterns.mha": [[201, 1, 1, "", "PatternMHA"]], "neural_compressor.compression.pruner.patterns.mha.PatternMHA": [[201, 4, 1, "", "M"], [201, 4, 1, "", "N"]], "neural_compressor.compression.pruner.patterns.ninm": [[202, 1, 1, "", "PytorchPatternNInM"]], "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM": [[202, 4, 1, "", "M"], [202, 4, 1, "", "N"]], "neural_compressor.compression.pruner.patterns.nxm": [[203, 1, 1, "", "KerasPatternNxM"], [203, 1, 1, "", "PytorchPatternNxM"]], "neural_compressor.compression.pruner.patterns.nxm.KerasPatternNxM": [[203, 4, 1, "", "block_size"]], "neural_compressor.compression.pruner.patterns.nxm.PytorchPatternNxM": [[203, 4, 1, "", "block_size"]], "neural_compressor.compression.pruner.pruners": [[204, 0, 0, "-", "base"], [205, 0, 0, "-", "basic"], [206, 0, 0, "-", "block_mask"], [207, 2, 1, "", "get_pruner"], [208, 0, 0, "-", "mha"], [207, 2, 1, "", "parse_valid_pruner_types"], [209, 0, 0, "-", "pattern_lock"], [210, 0, 0, "-", "progressive"], [211, 0, 0, "-", "retrain_free"], [212, 0, 0, "-", "sparse_gpt"]], "neural_compressor.compression.pruner.pruners.base": [[204, 1, 1, "", "BasePruner"], [204, 1, 1, "", "KerasBasePruner"], [204, 1, 1, "", "PytorchBasePruner"], [204, 2, 1, "", "register_pruner"]], "neural_compressor.compression.pruner.pruners.base.BasePruner": [[204, 4, 1, "", "config"], [204, 4, 1, "", "current_sparsity_ratio"], [204, 4, 1, "", "end_step"], [204, 4, 1, "", "global_step"], [204, 4, 1, "", "masks"], [204, 4, 1, "", "max_sparsity_ratio_per_op"], [204, 4, 1, "", "modules"], [204, 4, 1, "", "pattern"], [204, 4, 1, "", "pruning_frequency"], [204, 4, 1, "", "scheduler"], [204, 4, 1, "", "scores"], [204, 4, 1, "", "start_step"], [204, 4, 1, "", "target_sparsity_ratio"]], "neural_compressor.compression.pruner.pruners.base.KerasBasePruner": [[204, 4, 1, "", "config"], [204, 4, 1, "", "current_sparsity_ratio"], [204, 4, 1, "", "end_step"], [204, 4, 1, "", "global_step"], [204, 4, 1, "", "masks"], [204, 4, 1, "", "max_sparsity_ratio_per_op"], [204, 4, 1, "", "modules"], [204, 4, 1, "", "pattern"], [204, 4, 1, "", "pruning_frequency"], [204, 4, 1, "", "scheduler"], [204, 4, 1, "", "scores"], [204, 4, 1, "", "start_step"], [204, 4, 1, "", "target_sparsity_ratio"]], "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner": [[204, 4, 1, "", "config"], [204, 4, 1, "", "current_sparsity_ratio"], [204, 4, 1, "", "end_step"], [204, 4, 1, "", "global_step"], [204, 4, 1, "", "masks"], [204, 4, 1, "", "max_sparsity_ratio_per_op"], [204, 4, 1, "", "modules"], [204, 4, 1, "", "pattern"], [204, 4, 1, "", "pruning_frequency"], [204, 4, 1, "", "scheduler"], [204, 4, 1, "", "scores"], [204, 4, 1, "", "start_step"], [204, 4, 1, "", "target_sparsity_ratio"]], "neural_compressor.compression.pruner.pruners.basic": [[205, 1, 1, "", "KerasBasicPruner"], [205, 1, 1, "", "PytorchBasicPruner"]], "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner": [[205, 4, 1, "", "criterion"], [205, 4, 1, "", "pattern"], [205, 4, 1, "", "reg"], [205, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner": [[205, 4, 1, "", "criterion"], [205, 4, 1, "", "pattern"], [205, 4, 1, "", "reg"], [205, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.block_mask": [[206, 1, 1, "", "PytorchBlockMaskPruner"]], "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner": [[206, 4, 1, "", "criterion"], [206, 4, 1, "", "pattern"], [206, 4, 1, "", "reg"], [206, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.mha": [[208, 1, 1, "", "PythonMultiheadAttentionPruner"]], "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner": [[208, 4, 1, "", "head_masks"], [208, 4, 1, "", "linear_layers"], [208, 4, 1, "", "mha_compressions"], [208, 4, 1, "", "mha_scores"]], "neural_compressor.compression.pruner.pruners.pattern_lock": [[209, 1, 1, "", "PytorchPatternLockPruner"]], "neural_compressor.compression.pruner.pruners.progressive": [[210, 1, 1, "", "PytorchProgressivePruner"]], "neural_compressor.compression.pruner.pruners.retrain_free": [[211, 1, 1, "", "PytorchRetrainFreePruner"]], "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner": [[211, 4, 1, "", "criterion"], [211, 4, 1, "", "pattern"], [211, 4, 1, "", "reg"], [211, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.sparse_gpt": [[212, 1, 1, "", "SparseGPTPruner"]], "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner": [[212, 4, 1, "", "criterion"], [212, 4, 1, "", "pattern"], [212, 4, 1, "", "reg"], [212, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruning": [[213, 1, 1, "", "BasePruning"], [213, 1, 1, "", "BasicPruning"], [213, 1, 1, "", "RetrainFreePruning"], [213, 1, 1, "", "SparseGPTPruning"], [213, 2, 1, "", "register_pruning"]], "neural_compressor.compression.pruner.pruning.BasePruning": [[213, 4, 1, "", "config_file_path"], [213, 4, 1, "", "model"], [213, 4, 1, "", "pruner_info"], [213, 4, 1, "", "pruners"]], "neural_compressor.compression.pruner.pruning.BasicPruning": [[213, 4, 1, "", "config_file_path"], [213, 4, 1, "", "model"], [213, 4, 1, "", "pruner_info"], [213, 4, 1, "", "pruners"]], "neural_compressor.compression.pruner.pruning.RetrainFreePruning": [[213, 4, 1, "", "config_file_path"], [213, 4, 1, "", "model"], [213, 4, 1, "", "pruner_info"], [213, 4, 1, "", "pruners"]], "neural_compressor.compression.pruner.regs": [[214, 1, 1, "", "BaseReg"], [214, 1, 1, "", "GroupLasso"], [214, 2, 1, "", "get_reg"], [214, 2, 1, "", "get_reg_type"], [214, 2, 1, "", "register_reg"]], "neural_compressor.compression.pruner.regs.GroupLasso": [[214, 4, 1, "", "alpha"], [214, 4, 1, "", "reg_terms"]], "neural_compressor.compression.pruner.schedulers": [[215, 1, 1, "", "IterativeScheduler"], [215, 1, 1, "", "OneshotScheduler"], [215, 1, 1, "", "PruningScheduler"], [215, 2, 1, "", "get_scheduler"], [215, 2, 1, "", "register_scheduler"]], "neural_compressor.compression.pruner.schedulers.PruningScheduler": [[215, 4, 1, "", "config"]], "neural_compressor.compression.pruner.tf_criteria": [[216, 1, 1, "", "MagnitudeCriterion"], [216, 1, 1, "", "PruningCriterion"], [216, 2, 1, "", "get_tf_criterion"], [216, 2, 1, "", "register_criterion"]], "neural_compressor.compression.pruner.tf_criteria.MagnitudeCriterion": [[216, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.tf_criteria.PruningCriterion": [[216, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.utils": [[217, 2, 1, "", "check_config"], [217, 2, 1, "", "check_key_validity"], [217, 2, 1, "", "collect_layer_inputs"], [217, 2, 1, "", "generate_pruner_config"], [217, 2, 1, "", "get_layers"], [217, 2, 1, "", "get_sparsity_ratio"], [217, 2, 1, "", "get_sparsity_ratio_tf"], [217, 2, 1, "", "parse_last_linear"], [217, 2, 1, "", "parse_last_linear_tf"], [217, 2, 1, "", "parse_to_prune"], [217, 2, 1, "", "parse_to_prune_tf"], [217, 2, 1, "", "process_and_check_config"], [217, 2, 1, "", "process_config"], [217, 2, 1, "", "process_weight_config"], [217, 2, 1, "", "process_yaml_config"], [217, 2, 1, "", "reset_none_to_default"], [217, 2, 1, "", "update_params"]], "neural_compressor.conf": [[218, 0, 0, "-", "config"], [219, 0, 0, "-", "dotdict"], [221, 0, 0, "-", "pythonic_config"]], "neural_compressor.conf.config": [[218, 1, 1, "", "Benchmark_Conf"], [218, 1, 1, "", "Conf"], [218, 1, 1, "", "DefaultConf"], [218, 1, 1, "", "Distillation_Conf"], [218, 1, 1, "", "Graph_Optimization_Conf"], [218, 1, 1, "", "MixedPrecision_Conf"], [218, 1, 1, "", "NASConfig"], [218, 1, 1, "", "PrunerV2"], [218, 1, 1, "", "Pruning_Conf"], [218, 1, 1, "", "Quantization_Conf"]], "neural_compressor.conf.dotdict": [[219, 1, 1, "", "DotDict"], [219, 2, 1, "", "deep_get"], [219, 2, 1, "", "deep_set"]], "neural_compressor.conf.pythonic_config": [[221, 1, 1, "", "AccuracyCriterion"], [221, 1, 1, "", "BenchmarkConfig"], [221, 1, 1, "", "DistillationConfig"], [221, 1, 1, "", "KnowledgeDistillationLossConfig"], [221, 1, 1, "", "Options"], [221, 1, 1, "", "QuantizationConfig"], [221, 1, 1, "", "WeightPruningConfig"]], "neural_compressor.config": [[222, 1, 1, "", "AccuracyCriterion"], [222, 1, 1, "", "BenchmarkConfig"], [222, 1, 1, "", "DistillationConfig"], [222, 1, 1, "", "DotDict"], [222, 1, 1, "", "ExportConfig"], [222, 1, 1, "", "HPOConfig"], [222, 1, 1, "", "IntermediateLayersKnowledgeDistillationLossConfig"], [222, 1, 1, "", "Keras"], [222, 1, 1, "", "KnowledgeDistillationLossConfig"], [222, 1, 1, "", "MXNet"], [222, 1, 1, "", "MixedPrecisionConfig"], [222, 1, 1, "", "NASConfig"], [222, 1, 1, "", "ONNX"], [222, 1, 1, "", "ONNXQlinear2QDQConfig"], [222, 1, 1, "", "Options"], [222, 1, 1, "", "PostTrainingQuantConfig"], [222, 1, 1, "", "PyTorch"], [222, 1, 1, "", "QuantizationAwareTrainingConfig"], [222, 1, 1, "", "SelfKnowledgeDistillationLossConfig"], [222, 1, 1, "", "TF2ONNXConfig"], [222, 1, 1, "", "TensorFlow"], [222, 1, 1, "", "Torch2ONNXConfig"], [222, 1, 1, "", "TuningCriterion"], [222, 1, 1, "", "WeightPruningConfig"]], "neural_compressor.contrib": [[224, 0, 0, "-", "strategy"]], "neural_compressor.contrib.strategy": [[225, 0, 0, "-", "sigopt"], [226, 0, 0, "-", "tpe"]], "neural_compressor.contrib.strategy.sigopt": [[225, 1, 1, "", "SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[226, 1, 1, "", "TpeTuneStrategy"]], "neural_compressor.data": [[231, 0, 0, "-", "dataloaders"], [243, 0, 0, "-", "datasets"], [247, 0, 0, "-", "filters"], [251, 0, 0, "-", "transforms"]], "neural_compressor.data.dataloaders": [[227, 0, 0, "-", "base_dataloader"], [228, 0, 0, "-", "dataloader"], [229, 0, 0, "-", "default_dataloader"], [230, 0, 0, "-", "fetcher"], [232, 0, 0, "-", "mxnet_dataloader"], [233, 0, 0, "-", "onnxrt_dataloader"], [234, 0, 0, "-", "pytorch_dataloader"], [235, 0, 0, "-", "sampler"], [236, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.data.dataloaders.base_dataloader": [[227, 1, 1, "", "BaseDataLoader"]], "neural_compressor.data.dataloaders.dataloader": [[228, 1, 1, "", "DataLoader"], [228, 2, 1, "", "check_dataloader"]], "neural_compressor.data.dataloaders.default_dataloader": [[229, 1, 1, "", "DefaultDataLoader"], [229, 2, 1, "", "default_collate"]], "neural_compressor.data.dataloaders.fetcher": [[230, 1, 1, "", "Fetcher"], [230, 1, 1, "", "IndexFetcher"], [230, 1, 1, "", "IterableFetcher"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[232, 1, 1, "", "MXNetDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[233, 1, 1, "", "ONNXRTBertDataLoader"], [233, 1, 1, "", "ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[234, 1, 1, "", "PyTorchDataLoader"]], "neural_compressor.data.dataloaders.sampler": [[235, 1, 1, "", "BatchSampler"], [235, 1, 1, "", "IterableSampler"], [235, 1, 1, "", "Sampler"], [235, 1, 1, "", "SequentialSampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[236, 1, 1, "", "TFDataDataLoader"], [236, 1, 1, "", "TensorflowBertDataLoader"], [236, 1, 1, "", "TensorflowDataLoader"], [236, 1, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.data.datasets": [[237, 0, 0, "-", "bert_dataset"], [238, 0, 0, "-", "coco_dataset"], [239, 0, 0, "-", "dataset"], [240, 0, 0, "-", "dummy_dataset"], [241, 0, 0, "-", "dummy_dataset_v2"], [242, 0, 0, "-", "imagenet_dataset"], [244, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.data.datasets.bert_dataset": [[237, 1, 1, "", "InputFeatures"], [237, 1, 1, "", "ONNXRTBertDataset"], [237, 1, 1, "", "ParseDecodeBert"], [237, 1, 1, "", "PytorchBertDataset"], [237, 1, 1, "", "TensorflowBertDataset"], [237, 1, 1, "", "TensorflowModelZooBertDataset"], [237, 2, 1, "", "convert_examples_to_features"], [237, 2, 1, "", "load_and_cache_examples"]], "neural_compressor.data.datasets.coco_dataset": [[238, 1, 1, "", "COCONpy"], [238, 1, 1, "", "COCORaw"], [238, 1, 1, "", "COCORecordDataset"], [238, 1, 1, "", "ParseDecodeCoco"]], "neural_compressor.data.datasets.dataset": [[239, 1, 1, "", "CIFAR10"], [239, 1, 1, "", "CIFAR100"], [239, 1, 1, "", "Dataset"], [239, 1, 1, "", "Datasets"], [239, 1, 1, "", "FashionMNIST"], [239, 1, 1, "", "ImageFolder"], [239, 1, 1, "", "IterableDataset"], [239, 1, 1, "", "MNIST"], [239, 1, 1, "", "MXNetCIFAR10"], [239, 1, 1, "", "MXNetCIFAR100"], [239, 1, 1, "", "MXNetDatasets"], [239, 1, 1, "", "MXNetFashionMNIST"], [239, 1, 1, "", "MXNetImageFolder"], [239, 1, 1, "", "MXNetMNIST"], [239, 1, 1, "", "ONNXRTITDatasets"], [239, 1, 1, "", "ONNXRTQLDatasets"], [239, 1, 1, "", "PyTorchDatasets"], [239, 1, 1, "", "PytorchCIFAR10"], [239, 1, 1, "", "PytorchCIFAR100"], [239, 1, 1, "", "PytorchFashionMNIST"], [239, 1, 1, "", "PytorchMNIST"], [239, 1, 1, "", "PytorchMxnetWrapDataset"], [239, 1, 1, "", "PytorchMxnetWrapFunction"], [239, 1, 1, "", "Tensorflow"], [239, 1, 1, "", "TensorflowCIFAR10"], [239, 1, 1, "", "TensorflowCIFAR100"], [239, 1, 1, "", "TensorflowDatasets"], [239, 1, 1, "", "TensorflowFashionMNIST"], [239, 1, 1, "", "TensorflowImageRecord"], [239, 1, 1, "", "TensorflowMNIST"], [239, 1, 1, "", "TensorflowTFRecordDataset"], [239, 1, 1, "", "TensorflowVOCRecord"], [239, 2, 1, "", "calculate_md5"], [239, 2, 1, "", "check_integrity"], [239, 2, 1, "", "dataset_registry"], [239, 2, 1, "", "download_url"], [239, 5, 1, "", "framework_datasets"], [239, 2, 1, "", "gen_bar_updater"]], "neural_compressor.data.datasets.dummy_dataset": [[240, 1, 1, "", "DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[241, 1, 1, "", "DummyDataset"], [241, 1, 1, "", "SparseDummyDataset"]], "neural_compressor.data.datasets.imagenet_dataset": [[242, 1, 1, "", "ImagenetRaw"], [242, 1, 1, "", "MXNetImagenetRaw"], [242, 1, 1, "", "ONNXRTImagenetDataset"], [242, 1, 1, "", "PytorchImagenetRaw"], [242, 1, 1, "", "TensorflowImagenetDataset"], [242, 1, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.data.datasets.style_transfer_dataset": [[244, 1, 1, "", "StyleTransferDataset"]], "neural_compressor.data.filters": [[245, 0, 0, "-", "coco_filter"], [246, 0, 0, "-", "filter"]], "neural_compressor.data.filters.coco_filter": [[245, 1, 1, "", "LabelBalanceCOCORawFilter"], [245, 1, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.filter": [[246, 1, 1, "", "FILTERS"], [246, 1, 1, "", "Filter"], [246, 1, 1, "", "MXNetFilters"], [246, 1, 1, "", "ONNXRTITFilters"], [246, 1, 1, "", "ONNXRTQLFilters"], [246, 1, 1, "", "PyTorchFilters"], [246, 1, 1, "", "TensorflowFilters"], [246, 2, 1, "", "filter_registry"]], "neural_compressor.data.transforms": [[249, 0, 0, "-", "coco_transform"], [250, 0, 0, "-", "imagenet_transform"], [252, 0, 0, "-", "postprocess"], [253, 0, 0, "-", "tokenization"], [254, 0, 0, "-", "transform"]], "neural_compressor.data.transforms.coco_transform": [[249, 1, 1, "", "ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.imagenet_transform": [[250, 1, 1, "", "BilinearImagenetTransform"], [250, 1, 1, "", "LabelShift"], [250, 1, 1, "", "ONNXResizeCropImagenetTransform"], [250, 1, 1, "", "OnnxBilinearImagenetTransform"], [250, 1, 1, "", "ParseDecodeImagenet"], [250, 1, 1, "", "ParseDecodeImagenetTransform"], [250, 1, 1, "", "QuantizedInput"], [250, 1, 1, "", "ResizeWithAspectRatio"], [250, 1, 1, "", "TensorflowResizeCropImagenetTransform"], [250, 1, 1, "", "TensorflowShiftRescale"], [250, 1, 1, "", "TensorflowTransposeLastChannel"]], "neural_compressor.data.transforms.postprocess": [[252, 1, 1, "", "Postprocess"]], "neural_compressor.data.transforms.tokenization": [[253, 1, 1, "", "BasicTokenizer"], [253, 1, 1, "", "FullTokenizer"], [253, 1, 1, "", "WordpieceTokenizer"], [253, 2, 1, "", "convert_by_vocab"], [253, 2, 1, "", "convert_to_unicode"], [253, 2, 1, "", "load_vocab"], [253, 2, 1, "", "whitespace_tokenize"]], "neural_compressor.data.transforms.transform": [[254, 1, 1, "", "AlignImageChannelTransform"], [254, 1, 1, "", "BaseTransform"], [254, 1, 1, "", "CastONNXTransform"], [254, 1, 1, "", "CastPyTorchTransform"], [254, 1, 1, "", "CastTFTransform"], [254, 1, 1, "", "CenterCropTFTransform"], [254, 1, 1, "", "CenterCropTransform"], [254, 1, 1, "", "CollectTransform"], [254, 1, 1, "", "ComposeTransform"], [254, 1, 1, "", "CropResizeTFTransform"], [254, 1, 1, "", "CropResizeTransform"], [254, 1, 1, "", "CropToBoundingBox"], [254, 1, 1, "", "InputFeatures"], [254, 1, 1, "", "MXNetCropResizeTransform"], [254, 1, 1, "", "MXNetCropToBoundingBox"], [254, 1, 1, "", "MXNetNormalizeTransform"], [254, 1, 1, "", "MXNetTransforms"], [254, 1, 1, "", "MXNetTranspose"], [254, 1, 1, "", "NormalizeTFTransform"], [254, 1, 1, "", "NormalizeTransform"], [254, 1, 1, "", "ONNXRTCropToBoundingBox"], [254, 1, 1, "", "ONNXRTITTransforms"], [254, 1, 1, "", "ONNXRTQLTransforms"], [254, 1, 1, "", "PaddedCenterCropTransform"], [254, 1, 1, "", "ParseDecodeVocTransform"], [254, 1, 1, "", "PyTorchAlignImageChannel"], [254, 1, 1, "", "PyTorchCropResizeTransform"], [254, 1, 1, "", "PyTorchNormalizeTransform"], [254, 1, 1, "", "PyTorchTransforms"], [254, 1, 1, "", "PyTorchTranspose"], [254, 1, 1, "", "PytorchMxnetTransform"], [254, 1, 1, "", "PytorchMxnetWrapFunction"], [254, 1, 1, "", "RandomCropTFTransform"], [254, 1, 1, "", "RandomCropTransform"], [254, 1, 1, "", "RandomHorizontalFlip"], [254, 1, 1, "", "RandomResizedCropMXNetTransform"], [254, 1, 1, "", "RandomResizedCropPytorchTransform"], [254, 1, 1, "", "RandomResizedCropTFTransform"], [254, 1, 1, "", "RandomResizedCropTransform"], [254, 1, 1, "", "RandomVerticalFlip"], [254, 1, 1, "", "RescaleKerasPretrainTransform"], [254, 1, 1, "", "RescaleTFTransform"], [254, 1, 1, "", "RescaleTransform"], [254, 1, 1, "", "ResizeMXNetTransform"], [254, 1, 1, "", "ResizePytorchTransform"], [254, 1, 1, "", "ResizeTFTransform"], [254, 1, 1, "", "ResizeTransform"], [254, 1, 1, "", "ResizeWithRatio"], [254, 1, 1, "", "SquadExample"], [254, 1, 1, "", "TFModelZooCollectTransform"], [254, 1, 1, "", "TFSquadV1ModelZooPostTransform"], [254, 1, 1, "", "TFSquadV1PostTransform"], [254, 1, 1, "", "TRANSFORMS"], [254, 1, 1, "", "TensorflowCropToBoundingBox"], [254, 1, 1, "", "TensorflowRandomHorizontalFlip"], [254, 1, 1, "", "TensorflowRandomVerticalFlip"], [254, 1, 1, "", "TensorflowResizeWithRatio"], [254, 1, 1, "", "TensorflowTransform"], [254, 1, 1, "", "TensorflowTransforms"], [254, 1, 1, "", "TensorflowTranspose"], [254, 1, 1, "", "TensorflowWrapFunction"], [254, 1, 1, "", "ToArray"], [254, 1, 1, "", "ToNDArrayTransform"], [254, 1, 1, "", "Transforms"], [254, 1, 1, "", "Transpose"], [254, 2, 1, "", "convert_examples_to_features"], [254, 2, 1, "", "get_final_text"], [254, 2, 1, "", "get_torchvision_map"], [254, 2, 1, "", "read_squad_examples"], [254, 2, 1, "", "transform_registry"]], "neural_compressor.experimental": [[255, 0, 0, "-", "benchmark"], [258, 0, 0, "-", "common"], [264, 0, 0, "-", "component"], [265, 0, 0, "-", "compression"], [266, 0, 0, "-", "contrib"], [291, 0, 0, "-", "data"], [296, 0, 0, "-", "distillation"], [297, 0, 0, "-", "export"], [301, 0, 0, "-", "graph_optimization"], [309, 0, 0, "-", "metric"], [311, 0, 0, "-", "mixed_precision"], [312, 0, 0, "-", "model_conversion"], [315, 0, 0, "-", "nas"], [321, 0, 0, "-", "pruner_legacy"], [325, 0, 0, "-", "pruning"], [326, 0, 0, "-", "pruning_recipes"], [330, 0, 0, "-", "pruning_v2"], [331, 0, 0, "-", "pytorch_pruner"], [338, 0, 0, "-", "quantization"], [339, 0, 0, "-", "scheduler"], [344, 0, 0, "-", "strategy"]], "neural_compressor.experimental.benchmark": [[255, 1, 1, "", "Benchmark"], [255, 2, 1, "", "get_architecture"], [255, 2, 1, "", "get_bounded_threads"], [255, 2, 1, "", "get_core_ids"], [255, 2, 1, "", "get_physical_ids"], [255, 2, 1, "", "get_threads"], [255, 2, 1, "", "get_threads_per_core"], [255, 2, 1, "", "set_all_env_var"], [255, 2, 1, "", "set_env_var"]], "neural_compressor.experimental.common": [[256, 0, 0, "-", "criterion"], [257, 0, 0, "-", "dataloader"], [259, 0, 0, "-", "metric"], [260, 0, 0, "-", "model"], [261, 0, 0, "-", "optimizer"], [262, 0, 0, "-", "postprocess"], [263, 0, 0, "-", "torch_utils"]], "neural_compressor.experimental.common.criterion": [[256, 1, 1, "", "Criterions"], [256, 1, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [256, 1, 1, "", "KnowledgeDistillationFramework"], [256, 1, 1, "", "KnowledgeDistillationLoss"], [256, 1, 1, "", "PyTorchCriterions"], [256, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [256, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [256, 1, 1, "", "PyTorchKnowledgeDistillationLoss"], [256, 1, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [256, 1, 1, "", "SelfKnowledgeDistillationLoss"], [256, 1, 1, "", "TensorflowCriterions"], [256, 1, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [256, 2, 1, "", "criterion_registry"]], "neural_compressor.experimental.common.dataloader": [[257, 1, 1, "", "DataLoader"]], "neural_compressor.experimental.common.metric": [[259, 1, 1, "", "Metric"]], "neural_compressor.experimental.common.model": [[260, 1, 1, "", "Model"], [260, 2, 1, "", "set_backend"]], "neural_compressor.experimental.common.optimizer": [[261, 1, 1, "", "Optimizers"], [261, 1, 1, "", "PyTorchOptimizers"], [261, 1, 1, "", "PyTorchSGD"], [261, 1, 1, "", "TensorFlowAdamW"], [261, 1, 1, "", "TensorFlowSGD"], [261, 1, 1, "", "TensorflowOptimizers"], [261, 2, 1, "", "optimizer_registry"]], "neural_compressor.experimental.common.postprocess": [[262, 1, 1, "", "Postprocess"]], "neural_compressor.experimental.common.torch_utils": [[263, 2, 1, "", "get_activation"], [263, 2, 1, "", "record_output"]], "neural_compressor.experimental.component": [[264, 1, 1, "", "Component"]], "neural_compressor.experimental.contrib": [[267, 0, 0, "-", "strategy"]], "neural_compressor.experimental.contrib.strategy": [[268, 0, 0, "-", "sigopt"], [269, 0, 0, "-", "tpe"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[268, 1, 1, "", "SigOptTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.tpe": [[269, 1, 1, "", "TpeTuneStrategy"]], "neural_compressor.experimental.data": [[274, 0, 0, "-", "dataloaders"], [286, 0, 0, "-", "datasets"], [290, 0, 0, "-", "filters"], [293, 0, 0, "-", "transforms"]], "neural_compressor.experimental.data.dataloaders": [[270, 0, 0, "-", "base_dataloader"], [271, 0, 0, "-", "dataloader"], [272, 0, 0, "-", "default_dataloader"], [273, 0, 0, "-", "fetcher"], [275, 0, 0, "-", "mxnet_dataloader"], [276, 0, 0, "-", "onnxrt_dataloader"], [277, 0, 0, "-", "pytorch_dataloader"], [278, 0, 0, "-", "sampler"], [279, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[270, 1, 1, "", "BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[272, 1, 1, "", "DefaultDataLoader"], [272, 2, 1, "", "default_collate"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[273, 1, 1, "", "Fetcher"], [273, 1, 1, "", "IndexFetcher"], [273, 1, 1, "", "IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[275, 1, 1, "", "MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[276, 1, 1, "", "ONNXRTBertDataLoader"], [276, 1, 1, "", "ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[277, 1, 1, "", "PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[278, 1, 1, "", "BatchSampler"], [278, 1, 1, "", "IterableSampler"], [278, 1, 1, "", "Sampler"], [278, 1, 1, "", "SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[279, 1, 1, "", "TFDataDataLoader"], [279, 1, 1, "", "TensorflowBertDataLoader"], [279, 1, 1, "", "TensorflowDataLoader"], [279, 1, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.datasets": [[280, 0, 0, "-", "bert_dataset"], [281, 0, 0, "-", "coco_dataset"], [282, 0, 0, "-", "dataset"], [283, 0, 0, "-", "dummy_dataset"], [284, 0, 0, "-", "dummy_dataset_v2"], [285, 0, 0, "-", "imagenet_dataset"], [287, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[280, 1, 1, "", "InputFeatures"], [280, 1, 1, "", "ONNXRTBertDataset"], [280, 1, 1, "", "ParseDecodeBert"], [280, 1, 1, "", "PytorchBertDataset"], [280, 1, 1, "", "TensorflowBertDataset"], [280, 1, 1, "", "TensorflowModelZooBertDataset"], [280, 2, 1, "", "convert_examples_to_features"], [280, 2, 1, "", "load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[281, 1, 1, "", "COCONpy"], [281, 1, 1, "", "COCORaw"], [281, 1, 1, "", "COCORecordDataset"], [281, 1, 1, "", "ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.dataset": [[282, 1, 1, "", "CIFAR10"], [282, 1, 1, "", "CIFAR100"], [282, 1, 1, "", "Dataset"], [282, 1, 1, "", "Datasets"], [282, 1, 1, "", "FashionMNIST"], [282, 1, 1, "", "ImageFolder"], [282, 1, 1, "", "IterableDataset"], [282, 1, 1, "", "MNIST"], [282, 1, 1, "", "MXNetCIFAR10"], [282, 1, 1, "", "MXNetCIFAR100"], [282, 1, 1, "", "MXNetDatasets"], [282, 1, 1, "", "MXNetFashionMNIST"], [282, 1, 1, "", "MXNetImageFolder"], [282, 1, 1, "", "MXNetMNIST"], [282, 1, 1, "", "ONNXRTITDatasets"], [282, 1, 1, "", "ONNXRTQLDatasets"], [282, 1, 1, "", "PyTorchDatasets"], [282, 1, 1, "", "PytorchCIFAR10"], [282, 1, 1, "", "PytorchCIFAR100"], [282, 1, 1, "", "PytorchFashionMNIST"], [282, 1, 1, "", "PytorchMNIST"], [282, 1, 1, "", "PytorchMxnetWrapDataset"], [282, 1, 1, "", "PytorchMxnetWrapFunction"], [282, 1, 1, "", "TensorflowCIFAR10"], [282, 1, 1, "", "TensorflowCIFAR100"], [282, 1, 1, "", "TensorflowDatasets"], [282, 1, 1, "", "TensorflowFashionMNIST"], [282, 1, 1, "", "TensorflowImageFolder"], [282, 1, 1, "", "TensorflowImageRecord"], [282, 1, 1, "", "TensorflowMNIST"], [282, 1, 1, "", "TensorflowTFRecordDataset"], [282, 1, 1, "", "TensorflowVOCRecord"], [282, 2, 1, "", "calculate_md5"], [282, 2, 1, "", "check_integrity"], [282, 2, 1, "", "dataset_registry"], [282, 2, 1, "", "download_url"], [282, 5, 1, "", "framework_datasets"], [282, 2, 1, "", "gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[283, 1, 1, "", "DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[284, 1, 1, "", "DummyDataset"], [284, 1, 1, "", "SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[285, 1, 1, "", "ImagenetRaw"], [285, 1, 1, "", "MXNetImagenetRaw"], [285, 1, 1, "", "ONNXRTImagenetDataset"], [285, 1, 1, "", "PytorchImagenetRaw"], [285, 1, 1, "", "TensorflowImagenetDataset"], [285, 1, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[287, 1, 1, "", "StyleTransferDataset"]], "neural_compressor.experimental.data.filters": [[288, 0, 0, "-", "coco_filter"], [289, 0, 0, "-", "filter"]], "neural_compressor.experimental.data.filters.coco_filter": [[288, 1, 1, "", "LabelBalanceCOCORawFilter"], [288, 1, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.filter": [[289, 1, 1, "", "FILTERS"], [289, 1, 1, "", "Filter"], [289, 1, 1, "", "MXNetFilters"], [289, 1, 1, "", "ONNXRTITFilters"], [289, 1, 1, "", "ONNXRTQLFilters"], [289, 1, 1, "", "PyTorchFilters"], [289, 1, 1, "", "TensorflowFilters"], [289, 2, 1, "", "filter_registry"]], "neural_compressor.experimental.data.transforms": [[292, 0, 0, "-", "imagenet_transform"], [294, 0, 0, "-", "tokenization"], [295, 0, 0, "-", "transform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[292, 1, 1, "", "BilinearImagenetTransform"], [292, 1, 1, "", "LabelShift"], [292, 1, 1, "", "ONNXResizeCropImagenetTransform"], [292, 1, 1, "", "OnnxBilinearImagenetTransform"], [292, 1, 1, "", "ParseDecodeImagenet"], [292, 1, 1, "", "ParseDecodeImagenetTransform"], [292, 1, 1, "", "QuantizedInput"], [292, 1, 1, "", "ResizeWithAspectRatio"], [292, 1, 1, "", "TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.tokenization": [[294, 1, 1, "", "BasicTokenizer"], [294, 1, 1, "", "FullTokenizer"], [294, 1, 1, "", "WordpieceTokenizer"], [294, 2, 1, "", "convert_by_vocab"], [294, 2, 1, "", "convert_to_unicode"], [294, 2, 1, "", "load_vocab"], [294, 2, 1, "", "whitespace_tokenize"]], "neural_compressor.experimental.data.transforms.transform": [[295, 1, 1, "", "AlignImageChannelTransform"], [295, 1, 1, "", "BaseTransform"], [295, 1, 1, "", "CastONNXTransform"], [295, 1, 1, "", "CastPyTorchTransform"], [295, 1, 1, "", "CastTFTransform"], [295, 1, 1, "", "CenterCropTFTransform"], [295, 1, 1, "", "CenterCropTransform"], [295, 1, 1, "", "CollectTransform"], [295, 1, 1, "", "ComposeTransform"], [295, 1, 1, "", "CropResizeTFTransform"], [295, 1, 1, "", "CropResizeTransform"], [295, 1, 1, "", "CropToBoundingBox"], [295, 1, 1, "", "InputFeatures"], [295, 1, 1, "", "MXNetCropResizeTransform"], [295, 1, 1, "", "MXNetCropToBoundingBox"], [295, 1, 1, "", "MXNetNormalizeTransform"], [295, 1, 1, "", "MXNetTransforms"], [295, 1, 1, "", "MXNetTranspose"], [295, 1, 1, "", "NormalizeTFTransform"], [295, 1, 1, "", "NormalizeTransform"], [295, 1, 1, "", "ONNXRTCropToBoundingBox"], [295, 1, 1, "", "ONNXRTITTransforms"], [295, 1, 1, "", "ONNXRTQLTransforms"], [295, 1, 1, "", "PaddedCenterCropTransform"], [295, 1, 1, "", "ParseDecodeVocTransform"], [295, 1, 1, "", "PyTorchAlignImageChannel"], [295, 1, 1, "", "PyTorchCropResizeTransform"], [295, 1, 1, "", "PyTorchNormalizeTransform"], [295, 1, 1, "", "PyTorchTransforms"], [295, 1, 1, "", "PyTorchTranspose"], [295, 1, 1, "", "PytorchMxnetTransform"], [295, 1, 1, "", "PytorchMxnetWrapFunction"], [295, 1, 1, "", "RandomCropTFTransform"], [295, 1, 1, "", "RandomCropTransform"], [295, 1, 1, "", "RandomHorizontalFlip"], [295, 1, 1, "", "RandomResizedCropMXNetTransform"], [295, 1, 1, "", "RandomResizedCropPytorchTransform"], [295, 1, 1, "", "RandomResizedCropTFTransform"], [295, 1, 1, "", "RandomResizedCropTransform"], [295, 1, 1, "", "RandomVerticalFlip"], [295, 1, 1, "", "RescaleKerasPretrainTransform"], [295, 1, 1, "", "RescaleTFTransform"], [295, 1, 1, "", "RescaleTransform"], [295, 1, 1, "", "ResizeMXNetTransform"], [295, 1, 1, "", "ResizePytorchTransform"], [295, 1, 1, "", "ResizeTFTransform"], [295, 1, 1, "", "ResizeTransform"], [295, 1, 1, "", "ResizeWithRatio"], [295, 1, 1, "", "SquadExample"], [295, 1, 1, "", "TFModelZooCollectTransform"], [295, 1, 1, "", "TFSquadV1ModelZooPostTransform"], [295, 1, 1, "", "TFSquadV1PostTransform"], [295, 1, 1, "", "TRANSFORMS"], [295, 1, 1, "", "TensorflowCropToBoundingBox"], [295, 1, 1, "", "TensorflowRandomHorizontalFlip"], [295, 1, 1, "", "TensorflowRandomVerticalFlip"], [295, 1, 1, "", "TensorflowResizeWithRatio"], [295, 1, 1, "", "TensorflowTransform"], [295, 1, 1, "", "TensorflowTransforms"], [295, 1, 1, "", "TensorflowTranspose"], [295, 1, 1, "", "TensorflowWrapFunction"], [295, 1, 1, "", "ToArray"], [295, 1, 1, "", "ToNDArrayTransform"], [295, 1, 1, "", "Transforms"], [295, 1, 1, "", "Transpose"], [295, 2, 1, "", "convert_examples_to_features"], [295, 2, 1, "", "get_final_text"], [295, 2, 1, "", "get_torchvision_map"], [295, 2, 1, "", "read_squad_examples"], [295, 2, 1, "", "transform_registry"]], "neural_compressor.experimental.distillation": [[296, 1, 1, "", "Distillation"]], "neural_compressor.experimental.distillation.Distillation": [[296, 4, 1, "", "_epoch_ran"], [296, 4, 1, "", "best_model"], [296, 4, 1, "", "best_score"], [296, 4, 1, "", "eval_frequency"]], "neural_compressor.experimental.export": [[298, 0, 0, "-", "qlinear2qdq"], [299, 0, 0, "-", "tf2onnx"], [300, 0, 0, "-", "torch2onnx"]], "neural_compressor.experimental.export.qlinear2qdq": [[298, 2, 1, "", "check_model"], [298, 2, 1, "", "onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.tf2onnx": [[299, 2, 1, "", "tf_to_fp32_onnx"], [299, 2, 1, "", "tf_to_int8_onnx"]], "neural_compressor.experimental.export.torch2onnx": [[300, 2, 1, "", "dynamic_quant_export"], [300, 2, 1, "", "get_node_mapping"], [300, 2, 1, "", "get_quantizable_onnx_ops"], [300, 2, 1, "", "static_quant_export"], [300, 2, 1, "", "torch_to_fp32_onnx"], [300, 2, 1, "", "torch_to_int8_onnx"]], "neural_compressor.experimental.graph_optimization": [[301, 1, 1, "", "Graph_Optimization"]], "neural_compressor.experimental.metric": [[303, 0, 0, "-", "bleu"], [304, 0, 0, "-", "bleu_util"], [305, 0, 0, "-", "coco_label_map"], [306, 0, 0, "-", "coco_tools"], [307, 0, 0, "-", "evaluate_squad"], [308, 0, 0, "-", "f1"], [310, 0, 0, "-", "metric"]], "neural_compressor.experimental.metric.bleu": [[303, 1, 1, "", "BLEU"], [303, 1, 1, "", "UnicodeRegex"], [303, 2, 1, "", "bleu_tokenize"]], "neural_compressor.experimental.metric.bleu.BLEU": [[303, 4, 1, "", "labels"], [303, 4, 1, "", "predictions"]], "neural_compressor.experimental.metric.bleu.UnicodeRegex": [[303, 4, 1, "", "nondigit_punct_re"], [303, 4, 1, "", "punct_nondigit_re"], [303, 4, 1, "", "symbol_re"]], "neural_compressor.experimental.metric.bleu_util": [[304, 2, 1, "", "compute_bleu"]], "neural_compressor.experimental.metric.coco_tools": [[306, 1, 1, "", "COCOEvalWrapper"], [306, 1, 1, "", "COCOWrapper"], [306, 2, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [306, 2, 1, "", "ExportSingleImageDetectionMasksToCoco"], [306, 2, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.experimental.metric.coco_tools.COCOWrapper": [[306, 4, 1, "", "dataset"], [306, 4, 1, "", "detection_type"]], "neural_compressor.experimental.metric.evaluate_squad": [[307, 2, 1, "", "evaluate"], [307, 2, 1, "", "exact_match_score"], [307, 2, 1, "", "f1_score"], [307, 2, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[308, 2, 1, "", "evaluate"], [308, 2, 1, "", "f1_score"], [308, 2, 1, "", "metric_max_over_ground_truths"], [308, 2, 1, "", "normalize_answer"]], "neural_compressor.experimental.metric.metric": [[310, 1, 1, "", "Accuracy"], [310, 1, 1, "", "BaseMetric"], [310, 1, 1, "", "COCOmAPv2"], [310, 1, 1, "", "F1"], [310, 1, 1, "", "GeneralTopK"], [310, 1, 1, "", "Loss"], [310, 1, 1, "", "MAE"], [310, 1, 1, "", "METRICS"], [310, 1, 1, "", "MSE"], [310, 1, 1, "", "MXNetMetrics"], [310, 1, 1, "", "ONNXRTGLUE"], [310, 1, 1, "", "ONNXRTITMetrics"], [310, 1, 1, "", "ONNXRTQLMetrics"], [310, 1, 1, "", "PyTorchLoss"], [310, 1, 1, "", "PyTorchMetrics"], [310, 1, 1, "", "RMSE"], [310, 1, 1, "", "ROC"], [310, 1, 1, "", "SquadF1"], [310, 1, 1, "", "TensorflowCOCOMAP"], [310, 1, 1, "", "TensorflowMAP"], [310, 1, 1, "", "TensorflowMetrics"], [310, 1, 1, "", "TensorflowTopK"], [310, 1, 1, "", "TensorflowVOCMAP"], [310, 1, 1, "", "WrapMXNetMetric"], [310, 1, 1, "", "WrapONNXRTMetric"], [310, 1, 1, "", "WrapPyTorchMetric"], [310, 1, 1, "", "mIOU"], [310, 2, 1, "", "metric_registry"]], "neural_compressor.experimental.metric.metric.Accuracy": [[310, 4, 1, "", "label_list"], [310, 4, 1, "", "pred_list"], [310, 4, 1, "", "sample"]], "neural_compressor.experimental.metric.metric.GeneralTopK": [[310, 4, 1, "", "k"], [310, 4, 1, "", "num_correct"], [310, 4, 1, "", "num_sample"]], "neural_compressor.experimental.metric.metric.Loss": [[310, 4, 1, "", "sample"], [310, 4, 1, "", "sum"]], "neural_compressor.experimental.metric.metric.MAE": [[310, 4, 1, "", "compare_label"], [310, 4, 1, "", "label_list"], [310, 4, 1, "", "pred_list"]], "neural_compressor.experimental.metric.metric.METRICS": [[310, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.MSE": [[310, 4, 1, "", "compare_label"], [310, 4, 1, "", "label_list"], [310, 4, 1, "", "pred_list"]], "neural_compressor.experimental.metric.metric.MXNetMetrics": [[310, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTITMetrics": [[310, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics": [[310, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.PyTorchMetrics": [[310, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.RMSE": [[310, 4, 1, "", "mse"]], "neural_compressor.experimental.metric.metric.TensorflowMetrics": [[310, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.TensorflowTopK": [[310, 4, 1, "", "k"], [310, 4, 1, "", "num_correct"], [310, 4, 1, "", "num_sample"]], "neural_compressor.experimental.mixed_precision": [[311, 1, 1, "", "MixedPrecision"]], "neural_compressor.experimental.model_conversion": [[312, 1, 1, "", "ModelConversion"]], "neural_compressor.experimental.nas": [[313, 0, 0, "-", "basic_nas"], [314, 0, 0, "-", "dynas"], [316, 0, 0, "-", "nas"], [317, 0, 0, "-", "nas_utils"], [318, 0, 0, "-", "search_algorithms"]], "neural_compressor.experimental.nas.basic_nas": [[313, 1, 1, "", "BasicNAS"]], "neural_compressor.experimental.nas.dynas": [[314, 1, 1, "", "DyNAS"]], "neural_compressor.experimental.nas.nas": [[316, 1, 1, "", "NAS"], [316, 1, 1, "", "NASBase"]], "neural_compressor.experimental.nas.nas_utils": [[317, 2, 1, "", "create_search_space_pool"], [317, 2, 1, "", "find_pareto_front"], [317, 2, 1, "", "nas_registry"]], "neural_compressor.experimental.nas.search_algorithms": [[318, 1, 1, "", "BayesianOptimizationSearcher"], [318, 1, 1, "", "GridSearcher"], [318, 1, 1, "", "RandomSearcher"], [318, 1, 1, "", "Searcher"]], "neural_compressor.experimental.pruner_legacy": [[319, 0, 0, "-", "gradient_sensitivity"], [320, 0, 0, "-", "group_lasso"], [322, 0, 0, "-", "magnitude"], [323, 0, 0, "-", "pattern_lock"], [324, 0, 0, "-", "pruner"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[319, 1, 1, "", "GradientSensitivityPruner"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[320, 1, 1, "", "GroupLassoPruner"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[322, 1, 1, "", "BasicMagnitudePruner"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[323, 1, 1, "", "PatternLockPruner"]], "neural_compressor.experimental.pruner_legacy.pruner": [[324, 1, 1, "", "Pruner"], [324, 2, 1, "", "pruner_registry"]], "neural_compressor.experimental.pruning": [[325, 1, 1, "", "Pruning"], [325, 1, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning.Pruning": [[325, 4, 1, "", "conf"], [325, 4, 1, "", "pruners"]], "neural_compressor.experimental.pruning_recipes": [[327, 0, 0, "-", "patterns"]], "neural_compressor.experimental.pruning_recipes.patterns": [[328, 0, 0, "-", "pattern"], [329, 0, 0, "-", "tile_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[328, 1, 1, "", "PATTERNS"], [328, 1, 1, "", "PatternBase"], [328, 2, 1, "", "pattern_registry"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS": [[328, 4, 1, "", "patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[329, 1, 1, "", "TilePatternBase"], [329, 1, 1, "", "TilePattern_1x1"], [329, 1, 1, "", "TilePattern_1x16"], [329, 1, 1, "", "TilePattern_1x2"], [329, 1, 1, "", "TilePattern_2x2"], [329, 1, 1, "", "TilePattern_4x1"]], "neural_compressor.experimental.pruning_v2": [[330, 1, 1, "", "Pruning"], [330, 1, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning_v2.Pruning": [[330, 4, 1, "", "conf"], [330, 4, 1, "", "pruners"]], "neural_compressor.experimental.pytorch_pruner": [[332, 0, 0, "-", "logger"], [333, 0, 0, "-", "patterns"], [334, 0, 0, "-", "prune_utils"], [335, 0, 0, "-", "pruner"], [336, 0, 0, "-", "pruning"], [337, 0, 0, "-", "scheduler"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[333, 1, 1, "", "Pattern"], [333, 1, 1, "", "PatternNInM"], [333, 1, 1, "", "PatternNxM"], [333, 2, 1, "", "get_pattern"], [333, 2, 1, "", "register_pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.Pattern": [[333, 4, 1, "", "is_global"], [333, 4, 1, "", "pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM": [[333, 4, 1, "", "M"], [333, 4, 1, "", "N"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM": [[333, 4, 1, "", "block_size"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[334, 2, 1, "", "check_config"], [334, 2, 1, "", "parse_not_to_prune"], [334, 2, 1, "", "parse_to_prune"], [334, 2, 1, "", "process_and_check_config"], [334, 2, 1, "", "process_config"], [334, 2, 1, "", "reset_non_value_to_default"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[335, 1, 1, "", "MagnitudePruner"], [335, 1, 1, "", "PatternLockPruner"], [335, 1, 1, "", "Pruner"], [335, 1, 1, "", "SnipMomentumPruner"], [335, 1, 1, "", "SnipPruner"], [335, 2, 1, "", "get_pruner"], [335, 2, 1, "", "register_pruners"]], "neural_compressor.experimental.pytorch_pruner.pruner.Pruner": [[335, 4, 1, "", "config"], [335, 4, 1, "", "current_sparsity_ratio"], [335, 4, 1, "", "end_step"], [335, 4, 1, "", "global_step"], [335, 4, 1, "", "masks"], [335, 4, 1, "", "max_sparsity_ratio_per_layer"], [335, 4, 1, "", "modules"], [335, 4, 1, "", "pattern"], [335, 4, 1, "", "scheduler"], [335, 4, 1, "", "scores"], [335, 4, 1, "", "start_step"], [335, 4, 1, "", "target_sparsity_ratio"], [335, 4, 1, "", "update_frequency_on_step"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[336, 1, 1, "", "Pruning"]], "neural_compressor.experimental.pytorch_pruner.pruning.Pruning": [[336, 4, 1, "", "config_file_path"], [336, 4, 1, "", "model"], [336, 4, 1, "", "pruner_info"], [336, 4, 1, "", "pruners"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[337, 1, 1, "", "IterativeScheduler"], [337, 1, 1, "", "OneshotScheduler"], [337, 1, 1, "", "Scheduler"], [337, 2, 1, "", "get_scheduler"], [337, 2, 1, "", "register_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler": [[337, 4, 1, "", "config"]], "neural_compressor.experimental.quantization": [[338, 1, 1, "", "Quantization"]], "neural_compressor.experimental.scheduler": [[339, 1, 1, "", "Scheduler"]], "neural_compressor.experimental.strategy": [[340, 0, 0, "-", "auto_mixed_precision"], [341, 0, 0, "-", "basic"], [342, 0, 0, "-", "bayesian"], [343, 0, 0, "-", "exhaustive"], [345, 0, 0, "-", "mse"], [346, 0, 0, "-", "mse_v2"], [347, 0, 0, "-", "random"], [348, 0, 0, "-", "strategy"], [350, 0, 0, "-", "utils"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[340, 1, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.experimental.strategy.basic": [[341, 1, 1, "", "BasicTuneStrategy"]], "neural_compressor.experimental.strategy.bayesian": [[342, 1, 1, "", "BayesianOptimization"], [342, 1, 1, "", "BayesianTuneStrategy"], [342, 1, 1, "", "TargetSpace"], [342, 2, 1, "", "acq_max"]], "neural_compressor.experimental.strategy.exhaustive": [[343, 1, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.experimental.strategy.mse": [[345, 1, 1, "", "MSETuneStrategy"]], "neural_compressor.experimental.strategy.mse_v2": [[346, 1, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.experimental.strategy.random": [[347, 1, 1, "", "RandomTuneStrategy"]], "neural_compressor.experimental.strategy.strategy": [[348, 1, 1, "", "TuneStrategy"], [348, 2, 1, "", "strategy_registry"]], "neural_compressor.experimental.strategy.utils": [[349, 0, 0, "-", "constant"], [351, 0, 0, "-", "tuning_sampler"], [352, 0, 0, "-", "tuning_space"], [353, 0, 0, "-", "tuning_structs"], [354, 0, 0, "-", "utility"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[351, 1, 1, "", "FallbackTuningSampler"], [351, 1, 1, "", "ModelWiseTuningSampler"], [351, 1, 1, "", "OpTypeWiseTuningSampler"], [351, 1, 1, "", "OpWiseTuningSampler"], [351, 1, 1, "", "SmoothQuantSampler"], [351, 1, 1, "", "TuningOrder"], [351, 1, 1, "", "TuningSampler"], [351, 1, 1, "", "TuningSamplerRegistry"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[352, 1, 1, "", "TuningItem"], [352, 1, 1, "", "TuningSpace"], [352, 2, 1, "", "initial_tuning_cfg_with_quant_mode"], [352, 2, 1, "", "pattern_to_internal"], [352, 2, 1, "", "pattern_to_path"], [352, 2, 1, "", "quant_mode_from_pattern"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[353, 1, 1, "", "OpTuningConfig"]], "neural_compressor.experimental.strategy.utils.utility": [[354, 1, 1, "", "OrderedDefaultDict"], [354, 2, 1, "", "extract_data_type"], [354, 2, 1, "", "get_adaptor_name"], [354, 2, 1, "", "reverted_data_type"]], "neural_compressor.metric": [[356, 0, 0, "-", "bleu"], [357, 0, 0, "-", "bleu_util"], [358, 0, 0, "-", "coco_label_map"], [359, 0, 0, "-", "coco_tools"], [360, 0, 0, "-", "evaluate_squad"], [361, 0, 0, "-", "f1"], [363, 0, 0, "-", "metric"]], "neural_compressor.metric.bleu": [[356, 1, 1, "", "BLEU"], [356, 1, 1, "", "UnicodeRegex"], [356, 2, 1, "", "bleu_tokenize"]], "neural_compressor.metric.bleu.BLEU": [[356, 4, 1, "", "labels"], [356, 4, 1, "", "predictions"]], "neural_compressor.metric.bleu.UnicodeRegex": [[356, 4, 1, "", "nondigit_punct_re"], [356, 4, 1, "", "punct_nondigit_re"], [356, 4, 1, "", "symbol_re"]], "neural_compressor.metric.bleu_util": [[357, 2, 1, "", "compute_bleu"]], "neural_compressor.metric.coco_tools": [[359, 1, 1, "", "COCOEvalWrapper"], [359, 1, 1, "", "COCOWrapper"], [359, 2, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [359, 2, 1, "", "ExportSingleImageDetectionMasksToCoco"], [359, 2, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.metric.coco_tools.COCOWrapper": [[359, 4, 1, "", "dataset"], [359, 4, 1, "", "detection_type"]], "neural_compressor.metric.evaluate_squad": [[360, 2, 1, "", "evaluate"], [360, 2, 1, "", "exact_match_score"], [360, 2, 1, "", "f1_score"], [360, 2, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[361, 2, 1, "", "evaluate"], [361, 2, 1, "", "f1_score"], [361, 2, 1, "", "metric_max_over_ground_truths"], [361, 2, 1, "", "normalize_answer"]], "neural_compressor.metric.metric": [[363, 1, 1, "", "Accuracy"], [363, 1, 1, "", "BaseMetric"], [363, 1, 1, "", "COCOmAPv2"], [363, 1, 1, "", "F1"], [363, 1, 1, "", "GeneralTopK"], [363, 1, 1, "", "Loss"], [363, 1, 1, "", "MAE"], [363, 1, 1, "", "METRICS"], [363, 1, 1, "", "MSE"], [363, 1, 1, "", "MXNetMetrics"], [363, 1, 1, "", "Metric"], [363, 1, 1, "", "ONNXRTGLUE"], [363, 1, 1, "", "ONNXRTITMetrics"], [363, 1, 1, "", "ONNXRTQLMetrics"], [363, 1, 1, "", "PyTorchLoss"], [363, 1, 1, "", "PyTorchMetrics"], [363, 1, 1, "", "RMSE"], [363, 1, 1, "", "ROC"], [363, 1, 1, "", "SquadF1"], [363, 1, 1, "", "TensorflowCOCOMAP"], [363, 1, 1, "", "TensorflowMAP"], [363, 1, 1, "", "TensorflowMetrics"], [363, 1, 1, "", "TensorflowTopK"], [363, 1, 1, "", "TensorflowVOCMAP"], [363, 1, 1, "", "WrapMXNetMetric"], [363, 1, 1, "", "WrapONNXRTMetric"], [363, 1, 1, "", "WrapPyTorchMetric"], [363, 1, 1, "", "mIOU"], [363, 2, 1, "", "metric_registry"], [363, 2, 1, "", "register_customer_metric"]], "neural_compressor.metric.metric.Accuracy": [[363, 4, 1, "", "label_list"], [363, 4, 1, "", "pred_list"], [363, 4, 1, "", "sample"]], "neural_compressor.metric.metric.GeneralTopK": [[363, 4, 1, "", "k"], [363, 4, 1, "", "num_correct"], [363, 4, 1, "", "num_sample"]], "neural_compressor.metric.metric.Loss": [[363, 4, 1, "", "sample"], [363, 4, 1, "", "sum"]], "neural_compressor.metric.metric.MAE": [[363, 4, 1, "", "compare_label"], [363, 4, 1, "", "label_list"], [363, 4, 1, "", "pred_list"]], "neural_compressor.metric.metric.METRICS": [[363, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.MSE": [[363, 4, 1, "", "compare_label"], [363, 4, 1, "", "label_list"], [363, 4, 1, "", "pred_list"]], "neural_compressor.metric.metric.MXNetMetrics": [[363, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTITMetrics": [[363, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTQLMetrics": [[363, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.PyTorchMetrics": [[363, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.RMSE": [[363, 4, 1, "", "mse"]], "neural_compressor.metric.metric.TensorflowMetrics": [[363, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.TensorflowTopK": [[363, 4, 1, "", "k"], [363, 4, 1, "", "num_correct"], [363, 4, 1, "", "num_sample"]], "neural_compressor.mix_precision": [[364, 2, 1, "", "fit"]], "neural_compressor.model": [[365, 0, 0, "-", "base_model"], [367, 0, 0, "-", "keras_model"], [368, 0, 0, "-", "model"], [369, 0, 0, "-", "mxnet_model"], [370, 0, 0, "-", "nets_factory"], [371, 0, 0, "-", "onnx_model"], [372, 0, 0, "-", "tensorflow_model"], [373, 0, 0, "-", "torch_model"]], "neural_compressor.model.base_model": [[365, 1, 1, "", "BaseModel"]], "neural_compressor.model.keras_model": [[367, 1, 1, "", "KerasModel"]], "neural_compressor.model.model": [[368, 1, 1, "", "Model"], [368, 2, 1, "", "get_model_fwk_name"]], "neural_compressor.model.mxnet_model": [[369, 1, 1, "", "MXNetModel"]], "neural_compressor.model.nets_factory": [[370, 1, 1, "", "TFSlimNetsFactory"]], "neural_compressor.model.onnx_model": [[371, 1, 1, "", "ONNXModel"]], "neural_compressor.model.tensorflow_model": [[372, 1, 1, "", "TensorflowBaseModel"], [372, 1, 1, "", "TensorflowCheckpointModel"], [372, 1, 1, "", "TensorflowLLMModel"], [372, 1, 1, "", "TensorflowModel"], [372, 1, 1, "", "TensorflowQATModel"], [372, 1, 1, "", "TensorflowSavedModelModel"], [372, 2, 1, "", "checkpoint_session"], [372, 2, 1, "", "estimator_session"], [372, 2, 1, "", "frozen_pb_session"], [372, 2, 1, "", "get_model_type"], [372, 2, 1, "", "graph_def_session"], [372, 2, 1, "", "graph_session"], [372, 2, 1, "", "keras_session"], [372, 2, 1, "", "load_saved_model"], [372, 2, 1, "", "saved_model_session"], [372, 2, 1, "", "slim_session"], [372, 2, 1, "", "validate_and_inference_input_output"], [372, 2, 1, "", "validate_graph_node"]], "neural_compressor.model.torch_model": [[373, 1, 1, "", "IPEXModel"], [373, 1, 1, "", "PyTorchBaseModel"], [373, 1, 1, "", "PyTorchFXModel"], [373, 1, 1, "", "PyTorchModel"]], "neural_compressor.objective": [[374, 1, 1, "", "Accuracy"], [374, 1, 1, "", "Footprint"], [374, 1, 1, "", "ModelSize"], [374, 1, 1, "", "MultiObjective"], [374, 1, 1, "", "Objective"], [374, 1, 1, "", "Performance"], [374, 2, 1, "", "objective_custom_registry"], [374, 2, 1, "", "objective_registry"]], "neural_compressor.profiling": [[377, 0, 0, "-", "parser"], [387, 0, 0, "-", "profiler"]], "neural_compressor.profiling.parser": [[376, 0, 0, "-", "factory"], [379, 0, 0, "-", "onnx_parser"], [381, 0, 0, "-", "parser"], [382, 0, 0, "-", "result"], [384, 0, 0, "-", "tensorflow_parser"]], "neural_compressor.profiling.parser.factory": [[376, 1, 1, "", "ParserFactory"]], "neural_compressor.profiling.parser.onnx_parser": [[378, 0, 0, "-", "factory"], [380, 0, 0, "-", "parser"]], "neural_compressor.profiling.parser.onnx_parser.factory": [[378, 1, 1, "", "OnnxrtParserFactory"]], "neural_compressor.profiling.parser.onnx_parser.parser": [[380, 1, 1, "", "OnnxProfilingParser"]], "neural_compressor.profiling.parser.parser": [[381, 1, 1, "", "ProfilingParser"]], "neural_compressor.profiling.parser.result": [[382, 1, 1, "", "ProfilingResult"]], "neural_compressor.profiling.parser.tensorflow_parser": [[383, 0, 0, "-", "factory"], [385, 0, 0, "-", "parser"]], "neural_compressor.profiling.parser.tensorflow_parser.factory": [[383, 1, 1, "", "TensorFlowParserFactory"]], "neural_compressor.profiling.parser.tensorflow_parser.parser": [[385, 1, 1, "", "TensorFlowProfilingParser"]], "neural_compressor.profiling.profiler": [[386, 0, 0, "-", "factory"], [389, 0, 0, "-", "onnxrt_profiler"], [392, 0, 0, "-", "profiler"], [394, 0, 0, "-", "tensorflow_profiler"]], "neural_compressor.profiling.profiler.factory": [[386, 1, 1, "", "ProfilerFactory"]], "neural_compressor.profiling.profiler.onnxrt_profiler": [[388, 0, 0, "-", "factory"], [390, 0, 0, "-", "profiler"], [391, 0, 0, "-", "utils"]], "neural_compressor.profiling.profiler.onnxrt_profiler.factory": [[388, 1, 1, "", "ProfilerFactory"]], "neural_compressor.profiling.profiler.onnxrt_profiler.profiler": [[390, 1, 1, "", "Profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.utils": [[391, 2, 1, "", "create_onnx_config"]], "neural_compressor.profiling.profiler.profiler": [[392, 1, 1, "", "Profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler": [[393, 0, 0, "-", "factory"], [395, 0, 0, "-", "profiler"], [396, 0, 0, "-", "utils"]], "neural_compressor.profiling.profiler.tensorflow_profiler.factory": [[393, 1, 1, "", "ProfilerFactory"]], "neural_compressor.profiling.profiler.tensorflow_profiler.profiler": [[395, 1, 1, "", "Profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.utils": [[396, 2, 1, "", "create_tf_config"], [396, 2, 1, "", "delete_assign"], [396, 2, 1, "", "set_eager_execution"]], "neural_compressor.quantization": [[397, 2, 1, "", "fit"]], "neural_compressor.strategy": [[398, 0, 0, "-", "auto"], [399, 0, 0, "-", "auto_mixed_precision"], [400, 0, 0, "-", "basic"], [401, 0, 0, "-", "bayesian"], [402, 0, 0, "-", "conservative"], [403, 0, 0, "-", "exhaustive"], [404, 0, 0, "-", "hawq_v2"], [406, 0, 0, "-", "mse"], [407, 0, 0, "-", "mse_v2"], [408, 0, 0, "-", "random"], [409, 0, 0, "-", "strategy"], [411, 0, 0, "-", "utils"]], "neural_compressor.strategy.auto": [[398, 1, 1, "", "AutoTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[399, 1, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.basic": [[400, 1, 1, "", "BasicTuneStrategy"]], "neural_compressor.strategy.bayesian": [[401, 1, 1, "", "BayesianOptimization"], [401, 1, 1, "", "BayesianTuneStrategy"], [401, 1, 1, "", "TargetSpace"], [401, 2, 1, "", "acq_max"]], "neural_compressor.strategy.conservative": [[402, 1, 1, "", "ConservativeTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[403, 1, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[404, 1, 1, "", "HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.mse": [[406, 1, 1, "", "MSETuneStrategy"]], "neural_compressor.strategy.mse_v2": [[407, 1, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.strategy.random": [[408, 1, 1, "", "RandomTuneStrategy"]], "neural_compressor.strategy.strategy": [[409, 1, 1, "", "TuneStrategy"], [409, 1, 1, "", "TuneStrategyMeta"], [409, 2, 1, "", "strategy_registry"]], "neural_compressor.strategy.utils": [[410, 0, 0, "-", "constant"], [412, 0, 0, "-", "tuning_sampler"], [413, 0, 0, "-", "tuning_space"], [414, 0, 0, "-", "tuning_structs"], [415, 0, 0, "-", "utility"]], "neural_compressor.strategy.utils.tuning_sampler": [[412, 1, 1, "", "BlockFallbackTuningSampler"], [412, 1, 1, "", "FallbackTuningSampler"], [412, 1, 1, "", "LowerBitsSampler"], [412, 1, 1, "", "ModelWiseTuningSampler"], [412, 1, 1, "", "OpTypeWiseTuningSampler"], [412, 1, 1, "", "OpWiseTuningSampler"], [412, 1, 1, "", "SmoothQuantSampler"], [412, 1, 1, "", "TuningOrder"], [412, 1, 1, "", "TuningSampler"], [412, 1, 1, "", "WeightOnlyQuantSampler"]], "neural_compressor.strategy.utils.tuning_space": [[413, 1, 1, "", "TuningItem"], [413, 1, 1, "", "TuningSpace"], [413, 2, 1, "", "initial_tuning_cfg_with_quant_mode"], [413, 2, 1, "", "pattern_to_internal"], [413, 2, 1, "", "pattern_to_path"], [413, 2, 1, "", "quant_mode_from_pattern"]], "neural_compressor.strategy.utils.tuning_structs": [[414, 1, 1, "", "OpTuningConfig"]], "neural_compressor.strategy.utils.utility": [[415, 1, 1, "", "ClassRegister"], [415, 1, 1, "", "OrderedDefaultDict"], [415, 1, 1, "", "QuantOptions"], [415, 1, 1, "", "QuantType"], [415, 2, 1, "", "build_slave_faker_model"], [415, 2, 1, "", "extract_data_type"], [415, 2, 1, "", "get_adaptor_name"], [415, 2, 1, "", "preprocess_user_cfg"], [415, 2, 1, "", "reverted_data_type"]], "neural_compressor.template": [[416, 0, 0, "-", "api_doc_example"]], "neural_compressor.template.api_doc_example": [[416, 1, 1, "", "ExampleClass"], [416, 4, 1, "", "attribute1"], [416, 2, 1, "", "function1"], [416, 2, 1, "", "function2"], [416, 2, 1, "", "function3"], [416, 2, 1, "", "generator1"], [416, 5, 1, "", "module_debug_level1"]], "neural_compressor.template.api_doc_example.ExampleClass": [[416, 4, 1, "", "attr1"], [416, 4, 1, "", "attr2"], [416, 4, 1, "", "attr5"]], "neural_compressor.tensorflow": [[418, 0, 0, "-", "algorithms"], [431, 0, 0, "-", "quantization"], [433, 0, 0, "-", "utils"]], "neural_compressor.tensorflow.algorithms": [[419, 0, 0, "-", "static_quantize"]], "neural_compressor.tensorflow.algorithms.static_quantize": [[420, 0, 0, "-", "keras"], [424, 0, 0, "-", "keras_utils"], [428, 0, 0, "-", "quantize_entry"]], "neural_compressor.tensorflow.algorithms.static_quantize.keras": [[420, 1, 1, "", "KerasAdaptor"], [420, 1, 1, "", "KerasQuery"]], "neural_compressor.tensorflow.algorithms.static_quantize.keras_utils": [[421, 0, 0, "-", "conv2d"], [422, 0, 0, "-", "dense"], [423, 0, 0, "-", "depthwise_conv2d"], [425, 0, 0, "-", "pool2d"], [426, 0, 0, "-", "quantizer"], [427, 0, 0, "-", "separable_conv2d"]], "neural_compressor.tensorflow.algorithms.static_quantize.quantize_entry": [[428, 2, 1, "", "parse_to_keras_tune_cfg"], [428, 2, 1, "", "static_quantize_entry"], [428, 2, 1, "", "update_config"]], "neural_compressor.tensorflow.quantization": [[430, 0, 0, "-", "config"], [432, 0, 0, "-", "quantize"]], "neural_compressor.tensorflow.quantization.config": [[430, 1, 1, "", "Backend"], [430, 1, 1, "", "StaticQuantConfig"], [430, 2, 1, "", "get_all_registered_configs"], [430, 2, 1, "", "get_default_static_quant_config"], [430, 2, 1, "", "parse_config_from_dict"]], "neural_compressor.tensorflow.quantization.quantize": [[432, 2, 1, "", "quantize_model"]], "neural_compressor.tensorflow.utils": [[433, 2, 1, "", "deep_get"], [433, 2, 1, "", "dump_elapsed_time"], [433, 2, 1, "", "register_algo"], [433, 2, 1, "", "version1_gte_version2"]], "neural_compressor.torch": [[434, 0, 0, "-", "algorithms"], [442, 0, 0, "-", "amp"], [449, 0, 0, "-", "quantization"], [452, 0, 0, "-", "tune"], [454, 0, 0, "-", "utils"]], "neural_compressor.torch.algorithms": [[436, 0, 0, "-", "weight_only"], [438, 0, 0, "-", "weight_only_algos"]], "neural_compressor.torch.algorithms.weight_only": [[435, 0, 0, "-", "gptq"], [437, 0, 0, "-", "rtn"]], "neural_compressor.torch.algorithms.weight_only.gptq": [[435, 1, 1, "", "GPTQ"], [435, 1, 1, "", "GPTQuantizer"], [435, 2, 1, "", "apply_gptq_quantize"], [435, 2, 1, "", "find_layers"], [435, 2, 1, "", "find_layers_name"], [435, 2, 1, "", "is_leaf"], [435, 2, 1, "", "log_quantizable_layers_per_transformer"], [435, 2, 1, "", "quantize"], [435, 2, 1, "", "trace_gptq_target_blocks"]], "neural_compressor.torch.algorithms.weight_only.rtn": [[437, 2, 1, "", "qdq_weight_actor"], [437, 2, 1, "", "qdq_weight_asym"], [437, 2, 1, "", "qdq_weight_sym"], [437, 2, 1, "", "quant_weight"], [437, 2, 1, "", "quant_weight_w_scale"], [437, 2, 1, "", "quantize_4bit"], [437, 2, 1, "", "rtn_quantize"], [437, 2, 1, "", "search_clip"]], "neural_compressor.torch.algorithms.weight_only_algos": [[438, 2, 1, "", "rtn_quantize_entry"]], "neural_compressor.torch.amp": [[439, 0, 0, "-", "autocast"], [441, 0, 0, "-", "fp8"]], "neural_compressor.torch.amp.autocast": [[439, 1, 1, "", "autocast"]], "neural_compressor.torch.amp.fp8": [[440, 0, 0, "-", "functions"]], "neural_compressor.torch.quantization": [[444, 0, 0, "-", "config"], [445, 0, 0, "-", "fp8"], [450, 0, 0, "-", "layers"], [451, 0, 0, "-", "quantize"]], "neural_compressor.torch.quantization.config": [[444, 1, 1, "", "Backend"], [444, 1, 1, "", "FP8QConfig"], [444, 1, 1, "", "GPTQConfig"], [444, 1, 1, "", "RTNWeightQuantConfig"], [444, 2, 1, "", "get_default_gptq_config"], [444, 2, 1, "", "get_default_rtn_config"]], "neural_compressor.torch.quantization.fp8": [[446, 0, 0, "-", "modules"], [447, 0, 0, "-", "observer"], [448, 0, 0, "-", "quantization_impl"]], "neural_compressor.torch.quantization.layers": [[450, 1, 1, "", "FakeAffineTensorQuantFunction"], [450, 1, 1, "", "MulLinear"], [450, 1, 1, "", "TEQLinearFakeQuant"]], "neural_compressor.torch.quantization.quantize": [[451, 2, 1, "", "quantize"], [451, 2, 1, "", "quantize_dynamic"]], "neural_compressor.torch.tune": [[452, 1, 1, "", "TorchWrapper"]], "neural_compressor.torch.utils": [[453, 0, 0, "-", "constants"], [455, 0, 0, "-", "utility"]], "neural_compressor.torch.utils.utility": [[455, 2, 1, "", "fetch_module"], [455, 2, 1, "", "register_algo"], [455, 2, 1, "", "set_module"]], "neural_compressor.training": [[456, 1, 1, "", "CallBacks"], [456, 1, 1, "", "CompressionManager"], [456, 2, 1, "", "fit"], [456, 2, 1, "", "prepare_compression"]], "neural_compressor.utils": [[457, 0, 0, "-", "collect_layer_histogram"], [458, 0, 0, "-", "constant"], [459, 0, 0, "-", "create_obj_from_config"], [461, 0, 0, "-", "kl_divergence"], [462, 0, 0, "-", "load_huggingface"], [463, 0, 0, "-", "logger"], [464, 0, 0, "-", "neural_insights_utils"], [465, 0, 0, "-", "options"], [466, 0, 0, "-", "pytorch"], [467, 0, 0, "-", "utility"], [468, 0, 0, "-", "weights_details"]], "neural_compressor.utils.collect_layer_histogram": [[457, 1, 1, "", "LayerHistogramCollector"]], "neural_compressor.utils.create_obj_from_config": [[459, 2, 1, "", "create_dataloader"], [459, 2, 1, "", "create_dataset"], [459, 2, 1, "", "create_eval_func"], [459, 2, 1, "", "create_train_func"], [459, 2, 1, "", "get_algorithm"], [459, 2, 1, "", "get_func_from_config"], [459, 2, 1, "", "get_metrics"], [459, 2, 1, "", "get_postprocess"], [459, 2, 1, "", "get_preprocess"]], "neural_compressor.utils.kl_divergence": [[461, 1, 1, "", "KL_Divergence"]], "neural_compressor.utils.load_huggingface": [[462, 1, 1, "", "OptimizedModel"], [462, 2, 1, "", "export_compressed_model"], [462, 2, 1, "", "save_for_huggingface_upstream"]], "neural_compressor.utils.logger": [[463, 1, 1, "", "Logger"], [463, 2, 1, "", "debug"], [463, 2, 1, "", "error"], [463, 2, 1, "", "fatal"], [463, 2, 1, "", "info"], [463, 2, 1, "", "log"], [463, 2, 1, "", "warn"], [463, 2, 1, "", "warning"]], "neural_compressor.utils.neural_insights_utils": [[464, 2, 1, "", "get_model_path"], [464, 2, 1, "", "register_neural_insights_workload"], [464, 2, 1, "", "update_neural_insights_workload"], [464, 2, 1, "", "update_neural_insights_workload_accuracy_data"]], "neural_compressor.utils.options": [[465, 1, 1, "", "onnxrt"]], "neural_compressor.utils.pytorch": [[466, 2, 1, "", "is_int8_model"], [466, 2, 1, "", "load"], [466, 2, 1, "", "load_weight_only"], [466, 2, 1, "", "recover_model_from_json"]], "neural_compressor.utils.utility": [[467, 1, 1, "", "CaptureOutputToFile"], [467, 1, 1, "", "CpuInfo"], [467, 2, 1, "", "Dequantize"], [467, 1, 1, "", "DotDict"], [467, 1, 1, "", "GLOBAL_STATE"], [467, 1, 1, "", "LazyImport"], [467, 1, 1, "", "MODE"], [467, 1, 1, "", "OpEntry"], [467, 1, 1, "", "Statistics"], [467, 2, 1, "", "alias_param"], [467, 2, 1, "", "calculate_mse"], [467, 2, 1, "", "check_key_exist"], [467, 2, 1, "", "combine_histogram"], [467, 2, 1, "", "compare_objects"], [467, 2, 1, "", "compute_sparsity"], [467, 2, 1, "", "dequantize_weight"], [467, 2, 1, "", "dump_class_attrs"], [467, 2, 1, "", "dump_data_to_local"], [467, 2, 1, "", "dump_elapsed_time"], [467, 2, 1, "", "dump_table"], [467, 2, 1, "", "dump_table_to_csv"], [467, 2, 1, "", "equal_dicts"], [467, 2, 1, "", "fault_tolerant_file"], [467, 2, 1, "", "get_all_fp32_data"], [467, 2, 1, "", "get_number_of_sockets"], [467, 2, 1, "", "get_op_list"], [467, 2, 1, "", "get_size"], [467, 2, 1, "", "get_tensor_histogram"], [467, 2, 1, "", "get_tensors_info"], [467, 2, 1, "", "get_tuning_history"], [467, 2, 1, "", "get_weights_details"], [467, 2, 1, "", "load_data_from_pkl"], [467, 2, 1, "", "mse_metric_gap"], [467, 2, 1, "", "print_op_list"], [467, 2, 1, "", "print_table"], [467, 2, 1, "", "recover"], [467, 2, 1, "", "set_random_seed"], [467, 2, 1, "", "set_resume_from"], [467, 2, 1, "", "set_tensorboard"], [467, 2, 1, "", "set_workspace"], [467, 2, 1, "", "show_memory_info"], [467, 2, 1, "", "singleton"], [467, 2, 1, "", "str2array"], [467, 2, 1, "", "time_limit"], [467, 2, 1, "", "version1_eq_version2"], [467, 2, 1, "", "version1_gt_version2"], [467, 2, 1, "", "version1_gte_version2"], [467, 2, 1, "", "version1_lt_version2"], [467, 2, 1, "", "version1_lte_version2"]], "neural_compressor.utils.weights_details": [[468, 1, 1, "", "WeightsDetails"], [468, 1, 1, "", "WeightsStatistics"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:function", "3": "py:exception", "4": "py:attribute", "5": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "function", "Python function"], "3": ["py", "exception", "Python exception"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "data", "Python data"]}, "titleterms": {"block_mask": [0, 206], "neural_compressor": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469], "adaptor": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 477, 478, 480], "modul": [1, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 113, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 181, 183, 184, 186, 187, 190, 191, 193, 195, 197, 198, 199, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 249, 250, 252, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 268, 269, 270, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 292, 294, 295, 296, 298, 299, 300, 301, 303, 304, 306, 307, 308, 310, 311, 312, 313, 314, 316, 317, 318, 319, 320, 322, 323, 324, 325, 328, 329, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 351, 352, 353, 354, 356, 357, 359, 360, 361, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 376, 378, 380, 381, 382, 383, 385, 386, 388, 390, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 412, 413, 414, 415, 416, 420, 428, 430, 432, 433, 435, 437, 438, 439, 444, 446, 450, 451, 452, 455, 456, 457, 459, 461, 462, 463, 464, 465, 466, 467, 468], "content": [1, 2, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 113, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 184, 186, 187, 190, 191, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 354, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 378, 380, 381, 382, 383, 385, 386, 388, 390, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 412, 413, 414, 415, 416, 420, 428, 430, 432, 433, 435, 437, 438, 439, 444, 450, 451, 452, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 476, 544], "class": [1, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 113, 115, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 153, 154, 155, 156, 157, 161, 165, 166, 167, 169, 172, 173, 174, 175, 176, 178, 179, 181, 183, 184, 186, 190, 191, 193, 197, 198, 199, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 268, 269, 270, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 301, 302, 303, 306, 309, 310, 311, 312, 313, 314, 316, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 351, 352, 353, 354, 356, 359, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 378, 380, 381, 382, 383, 385, 386, 388, 390, 392, 393, 395, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 412, 413, 414, 415, 416, 420, 430, 435, 439, 444, 450, 452, 456, 457, 460, 461, 462, 463, 465, 467, 468, 477, 544], "function": [1, 13, 16, 34, 42, 43, 44, 45, 67, 68, 70, 104, 105, 116, 118, 148, 149, 150, 153, 155, 156, 157, 162, 163, 164, 167, 168, 170, 171, 172, 174, 177, 178, 181, 184, 186, 187, 190, 191, 193, 194, 195, 197, 199, 200, 204, 207, 213, 214, 215, 216, 217, 219, 228, 229, 237, 239, 243, 246, 247, 248, 251, 253, 254, 255, 256, 258, 260, 261, 263, 272, 280, 282, 286, 289, 290, 291, 293, 294, 295, 298, 299, 300, 303, 304, 306, 307, 308, 309, 310, 317, 324, 328, 333, 334, 335, 337, 342, 348, 352, 354, 356, 357, 359, 360, 361, 362, 363, 364, 368, 372, 374, 391, 396, 397, 401, 409, 413, 415, 416, 428, 430, 432, 433, 435, 437, 438, 440, 444, 451, 455, 456, 459, 460, 462, 463, 464, 466, 467, 502], "subpackag": [2, 17, 87, 111, 112, 114, 158, 192, 194, 223, 248, 266, 291, 302, 326, 344, 355, 405], "submodul": [2, 12, 17, 29, 52, 76, 87, 95, 101, 106, 111, 112, 114, 117, 130, 145, 151, 158, 159, 174, 180, 185, 188, 192, 194, 196, 200, 207, 220, 224, 231, 243, 247, 251, 258, 267, 274, 286, 290, 293, 297, 302, 309, 315, 321, 327, 331, 344, 350, 355, 362, 366, 377, 379, 384, 387, 389, 394, 405, 411, 417, 449, 460], "packag": [2, 29, 174, 194, 200, 207, 231, 243, 247, 248, 251, 258, 274, 286, 290, 291, 293, 302, 309, 321, 326, 327, 344, 362, 366, 405, 460, 527, 529, 531, 532], "kera": [3, 420], "keras_util": [4, 5, 6, 7, 8, 9, 10, 421, 422, 423, 424, 425, 426, 427], "conv2d": [4, 421], "dens": [5, 422], "depthwise_conv2d": [6, 423], "pool2d": [8, 425], "quantiz": [9, 41, 161, 338, 397, 426, 430, 431, 432, 444, 445, 446, 447, 448, 449, 450, 451, 473, 476, 478, 479, 491, 495, 499, 501, 504, 507, 510, 512, 514, 515, 523, 534, 536, 537, 538, 539, 547, 548, 549, 555, 556, 557, 558, 559, 562, 568], "separable_conv2d": [10, 427], "mxnet": [11, 497, 513, 556, 564], "mxnet_util": [12, 13], "util": [13, 43, 148, 163, 170, 182, 187, 217, 349, 350, 351, 352, 353, 354, 391, 396, 410, 411, 412, 413, 414, 415, 433, 453, 454, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 482], "onnxrt": [14, 497, 513, 564], "ox_util": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44], "calibr": [15, 16, 478, 495], "oper": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 478, 479], "activ": [18, 537], "argmax": 19, "attent": 20, "binary_op": 21, "concat": 22, "conv": 23, "direct_q8": 24, "embed_layernorm": 25, "gather": 26, "gavgpool": 27, "gemm": 28, "lstm": 30, "matmul": [31, 562], "maxpool": 32, "norm": 33, "op": [34, 504], "pad": 35, "pool": 36, "reduc": 37, "resiz": 38, "split": [39, 540], "unary_op": 40, "smooth_quant": [42, 167, 175], "weight_onli": [44, 171, 435, 436, 437], "pytorch": [45, 466, 497, 502, 504, 513, 538, 556, 557, 558, 563, 564, 568], "queri": [46, 477, 542, 547, 548, 549], "tensorflow": [47, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 497, 502, 504, 513, 556, 558, 563, 564, 568], "tf_util": [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148], "graph_convert": 48, "graph_converter_without_calib": 49, "graph_rewrit": [50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109], "bf16": [50, 51, 52, 515], "bf16_convert": [50, 155], "dequantize_cast_optim": 51, "gener": [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 478], "convert_add_to_biasadd": 53, "convert_layout": 54, "convert_leakyrelu": 55, "convert_nan_to_random": 56, "convert_placeholder_to_const": 57, "dilated_contract": 58, "dummy_biasadd": 59, "expanddims_optim": 60, "fetch_weight_from_reshap": 61, "fold_batch_norm": 62, "fold_const": 63, "fuse_biasadd_add": 64, "fuse_column_wise_mul": 65, "fuse_conv_with_math": 66, "fuse_decomposed_bn": 67, "fuse_decomposed_in": 68, "fuse_gelu": 69, "fuse_layer_norm": 70, "fuse_pad_with_conv": 71, "fuse_pad_with_fp32_conv": 72, "fuse_reshape_transpos": 73, "graph_cse_optim": 74, "grappler_pass": 75, "insert_print_nod": 77, "move_squeeze_after_relu": 78, "pre_optim": 79, "remove_training_nod": 80, "rename_batch_norm": 81, "split_shared_input": 82, "strip_equivalent_nod": 83, "strip_unused_nod": 84, "switch_optim": 85, "graph_bas": 86, "int8": [88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 504, 568], "freeze_fake_qu": 88, "freeze_valu": 89, "freeze_value_without_calib": 90, "fuse_conv_redundant_dequant": 91, "fuse_conv_requant": 92, "fuse_matmul_redundant_dequant": 93, "fuse_matmul_requant": 94, "meta_op_optim": 96, "post_hostconst_convert": 97, "post_quantized_op_cs": 98, "rnn_convert": 99, "scale_propag": 100, "onnx": [101, 102, 103, 104, 105, 481, 510, 556, 557, 568], "onnx_graph": 102, "onnx_nod": 103, "onnx_schema": 104, "tf2onnx_util": 105, "qdq": [106, 107, 108, 109, 123, 124, 125, 126, 127, 128, 129, 130, 131, 568], "insert_qdq_pattern": 107, "merge_duplicated_qdq": 108, "share_qdq_y_pattern": 109, "graph_util": 110, "quantize_graph": [112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138], "qat": [113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 568], "fake_quant": 113, "quantize_config": 115, "quantize_help": 116, "quantize_lay": [117, 118, 119, 120, 121], "optimize_lay": 118, "quantize_layer_add": 119, "quantize_layer_bas": 120, "quantize_layer_bn": 121, "quantize_wrapp": 122, "fuse_qdq_bn": 123, "fuse_qdq_concatv2": 124, "fuse_qdq_conv": 125, "fuse_qdq_deconv": 126, "fuse_qdq_in": 127, "fuse_qdq_matmul": 128, "fuse_qdq_pool": 129, "optimize_qdq": 131, "quantize_graph_bas": 132, "quantize_graph_bn": 133, "quantize_graph_concatv2": 134, "quantize_graph_conv": 135, "quantize_graph_for_intel_cpu": 136, "quantize_graph_matmul": 137, "quantize_graph_pool": 138, "quantize_graph_common": 139, "smooth_quant_calibr": 140, "smooth_quant_scal": 141, "tf2onnx_convert": 142, "transform_graph": [143, 144, 145, 146, 147], "bias_correct": 143, "graph_transform_bas": 144, "insert_log": 146, "rerange_quantized_concat": 147, "torch_util": [149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 263], "autoround": [149, 150, 151, 152, 153], "export": [150, 297, 298, 299, 300, 504, 559], "model_wrapp": [152, 165], "sign_sgd": 153, "awq": 154, "gptq": [156, 435], "hawq_metr": 157, "layer_wise_qu": [159, 160, 161, 162, 163], "modified_pickl": 160, "torch_load": 162, "mixed_precis": [164, 311], "pattern_detector": 166, "symbolic_trac": 168, "teq": 169, "algorithm": [172, 173, 174, 175, 176, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 434, 435, 436, 437, 438, 495, 559, 562, 565], "fast_bias_correct": 173, "weight_correct": 176, "benchmark": [177, 255, 485, 494, 499, 514, 555], "common": [178, 179, 180, 181, 182, 256, 257, 258, 259, 260, 261, 262, 263, 473, 505], "base_config": 178, "base_tun": 179, "logger": [181, 332, 463], "compress": [183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 265, 486, 559], "callback": 183, "distil": [184, 185, 186, 187, 296, 500, 501, 514, 555, 568], "criterion": [184, 256], "optim": [186, 261, 524, 534, 544, 547, 548, 549, 552, 553, 566], "hpo": [188, 189, 190, 191], "sa_optim": 189, "search_algorithm": [190, 318], "search_spac": 191, "pruner": [193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 324, 335], "criteria": [193, 472, 553, 565], "model_slim": [195, 196, 197, 198], "auto_slim": 195, "pattern_analyz": 197, "weight_slim": 198, "pattern": [199, 200, 201, 202, 203, 327, 328, 329, 333, 553], "base": [199, 204, 510, 543, 566], "mha": [201, 208], "ninm": 202, "nxm": 203, "basic": [205, 341, 400, 474, 565], "pattern_lock": [209, 323], "progress": [210, 540], "retrain_fre": 211, "sparse_gpt": 212, "prune": [213, 325, 336, 514, 553, 555, 568], "reg": 214, "schedul": [215, 337, 339, 553], "tf_criteria": 216, "conf": [218, 219, 220, 221], "config": [218, 222, 430, 444, 487, 497, 551], "dotdict": 219, "pythonic_config": 221, "contrib": [223, 224, 225, 226, 266, 267, 268, 269], "strategi": [224, 225, 226, 267, 268, 269, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 492, 561, 565], "sigopt": [225, 268, 561, 565], "tpe": [226, 269, 565], "data": [227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 478, 479, 499, 503, 538], "dataload": [227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 257, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 496, 497], "base_dataload": [227, 270], "default_dataload": [229, 272], "fetcher": [230, 273], "attribut": [231, 239, 248, 282, 291, 302, 326, 366, 416, 460, 471], "mxnet_dataload": [232, 275], "onnxrt_dataload": [233, 276], "pytorch_dataload": [234, 277], "sampler": [235, 278], "tensorflow_dataload": [236, 279], "dataset": [237, 238, 239, 240, 241, 242, 243, 244, 280, 281, 282, 283, 284, 285, 286, 287, 497, 499, 508, 539], "bert_dataset": [237, 280], "coco_dataset": [238, 281], "dummy_dataset": [240, 283], "dummy_dataset_v2": [241, 284], "imagenet_dataset": [242, 285], "style_transfer_dataset": [244, 287], "filter": [245, 246, 247, 288, 289, 290], "coco_filt": [245, 288], "transform": [249, 250, 251, 252, 253, 254, 292, 293, 294, 295, 508, 564], "coco_transform": 249, "imagenet_transform": [250, 292], "postprocess": [252, 262], "token": [253, 294], "experiment": [255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354], "metric": [259, 303, 304, 305, 306, 307, 308, 309, 310, 356, 357, 358, 359, 360, 361, 362, 363, 508, 513], "model": [260, 365, 366, 367, 368, 369, 370, 371, 372, 373, 478, 489, 504, 507, 510, 512, 514, 516, 523, 537, 538, 539, 547, 548, 549, 553, 557, 559, 562, 568], "compon": 264, "qlinear2qdq": 298, "tf2onnx": 299, "torch2onnx": 300, "graph_optim": 301, "bleu": [303, 356], "bleu_util": [304, 357], "coco_label_map": [305, 358], "coco_tool": [306, 359], "evaluate_squad": [307, 360], "f1": [308, 361], "model_convers": 312, "na": [313, 314, 315, 316, 317, 318, 474, 555], "basic_na": 313, "dyna": 314, "nas_util": 317, "pruner_legaci": [319, 320, 321, 322, 323, 324], "gradient_sensit": 319, "group_lasso": 320, "magnitud": 322, "pruning_recip": [326, 327, 328, 329], "tile_pattern": 329, "pruning_v2": 330, "pytorch_prun": [331, 332, 333, 334, 335, 336, 337], "prune_util": 334, "auto_mixed_precis": [340, 399], "bayesian": [342, 401, 565], "exhaust": [343, 403, 565], "mse": [345, 406, 565], "mse_v2": [346, 407, 565], "random": [347, 408, 565], "constant": [349, 410, 453, 458], "tuning_sampl": [351, 412], "tuning_spac": [352, 413], "tuning_struct": [353, 414], "mix_precis": 364, "base_model": 365, "keras_model": 367, "mxnet_model": 369, "nets_factori": 370, "onnx_model": 371, "tensorflow_model": 372, "torch_model": 373, "object": [374, 490, 547, 548, 549, 551], "profil": [375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 499], "parser": [376, 377, 378, 379, 380, 381, 382, 383, 384, 385], "factori": [376, 378, 383, 386, 388, 393], "onnx_pars": [378, 379, 380], "result": [382, 537, 539, 547, 548, 549], "tensorflow_pars": [383, 384, 385], "onnxrt_profil": [388, 389, 390, 391], "tensorflow_profil": [393, 394, 395, 396], "auto": [398, 528, 534, 558, 562, 565], "conserv": [402, 565], "hawq_v2": [404, 565], "templat": [416, 417, 472], "api_doc_exampl": 416, "static_quant": [419, 420, 421, 422, 423, 424, 425, 426, 427, 428], "quantize_entri": 428, "torch": [434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 482, 568], "rtn": 437, "weight_only_algo": 438, "amp": [439, 440, 441, 442], "autocast": 439, "fp8": [440, 441, 445, 446, 447, 448], "observ": 447, "quantization_impl": 448, "layer": [450, 500, 557, 562], "tune": [452, 479, 556, 559, 562, 565], "train": [456, 473, 493, 502, 514, 553, 556], "collect_layer_histogram": 457, "create_obj_from_config": 459, "kl_diverg": 461, "load_huggingfac": 462, "neural_insights_util": 464, "option": [465, 502, 522], "weights_detail": 468, "version": 469, "intel": [470, 476, 496, 499, 509, 510, 513, 514, 520, 528, 534, 568, 569], "neural": [470, 473, 474, 476, 496, 499, 509, 510, 513, 514, 517, 521, 523, 528, 534, 536, 537, 538, 539, 541, 542, 543, 547, 548, 549, 553, 561, 566, 569], "compressor": [470, 473, 476, 496, 499, 509, 510, 513, 514, 528, 534, 561, 569], "document": [470, 476, 483, 569], "section": [470, 569], "contributor": [471, 472], "coven": [471, 472], "code": [471, 472, 474, 514, 535, 540, 559, 566], "conduct": [471, 472], "our": [471, 562], "pledg": 471, "standard": 471, "respons": [471, 543], "scope": [471, 553], "enforc": 471, "contribut": [472, 527, 531], "guidelin": 472, "creat": [472, 540], "pull": 472, "request": [472, 515, 545], "step": [472, 536, 537, 538, 539], "checklist": 472, "accept": 472, "statu": [472, 542, 543], "check": 472, "overview": [472, 544, 566], "support": [472, 473, 474, 477, 479, 494, 495, 496, 497, 499, 500, 501, 502, 504, 506, 509, 510, 513, 515, 516, 518, 519, 523, 524, 551, 552, 553, 555, 556, 557, 559, 562, 563, 564, 567], "fx": 473, "introduct": [473, 474, 477, 478, 479, 494, 495, 496, 497, 499, 500, 501, 502, 504, 506, 509, 513, 515, 516, 534, 537, 538, 539, 551, 552, 553, 555, 556, 557, 559, 561, 562, 563, 564, 565, 567], "mode": [473, 568], "matrix": [473, 474, 477, 494, 495, 496, 497, 499, 500, 501, 502, 504, 506, 509, 513, 515, 516, 519, 551, 552, 553, 555, 556, 557, 559, 562, 563, 567], "get": [473, 474, 476, 477, 494, 496, 497, 499, 500, 501, 502, 506, 507, 513, 515, 517, 528, 535, 536, 540, 541, 542, 543, 551, 552, 553, 555, 556, 563, 567], "start": [473, 474, 476, 477, 494, 496, 497, 499, 500, 501, 502, 506, 507, 513, 515, 517, 518, 522, 528, 536, 540, 541, 542, 547, 548, 549, 551, 552, 553, 555, 556, 563, 567], "post": [473, 514, 543, 556], "static": [473, 556], "dynam": [473, 474, 556], "awar": [473, 514, 553, 556], "exampl": [473, 474, 477, 483, 494, 496, 497, 499, 500, 501, 502, 503, 504, 513, 514, 515, 516, 519, 523, 536, 537, 538, 539, 541, 546, 547, 548, 549, 551, 552, 553, 556, 557, 559, 562, 563, 568], "note": [473, 560], "detail": 473, "problem": 473, "architectur": [474, 498, 509, 510], "search": [474, 534], "api": [474, 476, 477, 478, 483, 484, 494, 496, 497, 500, 501, 502, 507, 508, 513, 515, 517, 521, 535, 536, 543, 549, 551, 552, 553, 555, 566], "usag": [474, 523, 534, 543, 562, 563, 565], "1": [474, 502, 505, 508, 514, 534, 541, 542, 568], "python": [474, 476, 496, 507, 513, 517, 521, 522, 529, 532, 536, 555, 566], "yaml": [474, 478, 497, 502, 506, 567], "2": [474, 502, 505, 508, 514, 534, 541, 542, 568], "onli": [474, 559], "advanc": [474, 540, 566], "custom": [474, 496, 513, 547, 565], "secur": [475, 502], "polici": [475, 565], "report": 475, "vulner": 475, "instal": [476, 499, 510, 518, 520, 527, 528, 531, 536, 541, 542], "from": [476, 478, 510, 514, 536, 541, 542], "pypi": [476, 523, 536], "select": [476, 528], "public": [476, 554], "event": [476, 554], "addit": 476, "commun": 476, "work": [477, 541, 556], "flow": [477, 556], "background": [477, 534], "ad": 477, "new": [477, 479, 529, 532, 565], "backend": [477, 556], "capabl": [477, 559], "implement": [477, 478], "onnxrtadaptor": 477, "how": [478, 479, 499, 537, 538, 539, 541], "add": [478, 542], "an": [478, 547, 548, 549], "list": [478, 503, 546, 564], "need": 478, "design": [478, 498, 544, 565], "framework": [478, 496, 497, 504, 506, 516, 555, 557, 559, 562], "query_fw_cap": 478, "accord": [478, 479], "tune_cfg": 478, "prepar": [478, 499, 537, 538, 539, 561], "fp32": [478, 504], "graph": 478, "run": [478, 499, 535, 537, 538, 539, 540], "sampl": [478, 507], "iter": 478, "calcul": 478, "rang": 478, "type": [479, 553], "like": 479, "int4": 479, "few": 479, "line": 479, "chang": [479, 508, 533, 535, 560], "defin": [479, 502], "abil": 479, "specif": [479, 497], "invok": 479, "kernel": 479, "configur": [479, 502, 506, 540, 555, 561, 567], "us": [479, 496, 513, 541, 542, 562], "summari": [479, 537], "runtim": [481, 510, 556, 557, 568], "mix": [488, 514, 515, 558], "precis": [488, 514, 515, 558], "refer": [495, 553, 556, 559, 562], "build": [496, 505, 513, 540, 541, 542], "file": [497, 506, 567], "user": [497, 502, 508, 555, 559, 566, 567], "workflow": [498, 544], "diagnosi": [499, 536], "featur": [499, 502, 506, 509, 523, 524, 528, 555, 556, 563, 567], "modifi": 499, "script": [499, 540], "see": 499, "do": [499, 517], "paramet": [499, 543], "descript": [499, 543, 545], "suggest": 499, "fallback": 499, "set": [499, 520, 534], "knowledg": [500, 568], "intermedi": 500, "self": 500, "distribut": [502, 523, 565], "infer": 502, "evalu": 502, "pure": 502, "horovodrun": 502, "execut": 502, "releas": [503, 529, 532, 560], "appendix": 504, "frequent": 505, "ask": 505, "question": 505, "issu": [505, 560], "3": [505, 518, 534], "4": [505, 525, 534, 554], "quick": [507, 522], "valid": [507, 510, 562, 568], "incompat": [508, 560], "between": 508, "v1": 508, "face": [508, 548, 549], "built": [508, 510, 513], "infrastructur": 509, "prerequisit": [510, 541, 542], "binari": 510, "sourc": [510, 536, 538, 539, 541, 542], "ai": 510, "kit": 510, "system": 510, "requir": [510, 527, 531, 537, 538, 539, 547], "hardwar": [510, 515, 568], "environ": [510, 520], "cpu": [510, 520, 568], "64": 510, "compat": 510, "processor": 510, "gpu": 510, "": [510, 535, 541], "xe": 510, "multipl": [510, 551, 568], "vendor": 510, "through": [510, 562, 568], "softwar": [510, 515], "legal": 511, "inform": 511, "licens": 511, "citat": 511, "trademark": 511, "llm": 512, "recip": [512, 556], "ipex": [512, 556], "kei": 512, "migrat": 514, "x": 514, "orchestr": [514, 552], "fp16": 515, "dure": [515, 558], "accuraci": [515, 537, 539, 556, 565], "driven": 515, "coder": [517, 521, 523, 534, 566], "what": [517, 535, 541], "we": 517, "offer": 517, "jupyt": [517, 518, 529, 532], "lab": [517, 518], "extens": [517, 527, 528, 531, 534, 535, 544, 568], "launcher": [517, 522], "contact": [517, 541], "aw": 518, "amazon": 518, "sagemak": 518, "For": 518, "studio": 518, "notebook": 518, "instanc": 518, "guid": [518, 566], "bigdl": 519, "nano": 519, "platform": [520, 561], "best": [520, 528], "perform": [520, 561], "mkl": 520, "openmp": 520, "jemalloc": 520, "numa": 520, "control": 520, "variabl": 520, "frequenc": 520, "govern": 520, "enabl": [521, 528, 534], "bench": 521, "superbench": 521, "argument": 522, "v0": 525, "highlight": 525, "other": 525, "changelog": [526, 530], "neural_compressor_ext_lab": [527, 529], "uninstal": [527, 531], "develop": [527, 531], "jupyterlab": 528, "Or": 528, "let": 528, "u": 528, "help": 528, "you": 528, "pre": 528, "requisit": 528, "make": [529, 532, 535, 540], "manual": [529, 532], "npm": [529, 532, 540], "autom": [529, 532], "publish": [529, 532], "conda": [529, 532], "forg": [529, 532], "neural_compressor_ext_lab_alibaba": [531, 532], "log": [533, 542, 543], "unreleas": 533, "vscode": 534, "open": [534, 539], "icon": 534, "5": 534, "welcom": 535, "your": 535, "v": 535, "folder": 535, "setup": 535, "up": 535, "straight": 535, "awai": 535, "explor": 535, "test": [535, 540], "go": 535, "further": 535, "insight": [536, 537, 538, 539], "tensor": [536, 562], "dump": [536, 538], "research": 536, "collabor": 536, "debug": [537, 539], "analyz": [537, 539, 540], "weight": [537, 538, 539, 559], "histogram": 539, "react": 540, "app": 540, "avail": 540, "eject": 540, "learn": [540, 541], "more": [540, 541], "bundl": 540, "size": 540, "web": 540, "deploy": [540, 553], "fail": 540, "minifi": 540, "solut": [541, 542, 543, 547, 548, 549], "why": 541, "doe": 541, "method": [541, 542], "pip": [541, 542], "end": [541, 547, 548, 549], "servic": [542, 544, 547, 548, 549], "submit": [542, 543, 547, 548, 549], "task": [542, 543, 545, 547, 548, 549], "stop": [542, 547, 548, 549], "inspect": 542, "manag": [542, 547, 548], "resourc": [542, 547, 548], "node": 542, "state": 542, "cluster": [542, 543], "remov": 542, "url": 543, "endpoint": 543, "task_id": 543, "websocket": 543, "screen": 543, "ping": 543, "download": [543, 547, 548], "doc": 544, "wip": 544, "oaa": 544, "definit": 544, "diagram": 544, "hug": [548, 549], "grpc": 549, "client": 550, "singl": 551, "One": 552, "shot": 552, "network": 553, "sparsiti": 553, "decai": 553, "regular": 553, "larg": 553, "languag": 553, "retrain": 553, "free": 553, "spars": 553, "hyperparamet": 553, "full": 554, "78": 554, "2023": 554, "24": 554, "2022": 554, "35": 554, "2021": 554, "15": [554, 568], "2018": 554, "2020": 554, "style": 555, "access": 555, "fundament": [556, 562], "scheme": 556, "approach": 556, "With": 556, "without": 556, "specifi": 556, "rule": 556, "devic": 556, "wise": 557, "lwq": 557, "turn": 558, "off": 558, "woq": [559, 568], "known": 560, "benefit": 561, "comparison": 561, "differ": 561, "smooth": 562, "quant": 562, "per": 562, "channel": 562, "limit": 562, "smoothquant": 562, "enhanc": 562, "alpha": 562, "engin": 562, "fix": 562, "determin": 562, "entir": 562, "each": 562, "block": 562, "tensorboard": 563, "space": 565, "exit": 565, "process": 565, "zero": 566, "topic": 566, "innov": 566, "product": 566, "13": 568, "0": 568, "ptq": 568}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"block_mask": [[0, "module-block_mask"]], "neural_compressor.adaptor.adaptor": [[1, "module-neural_compressor.adaptor.adaptor"]], "Module Contents": [[1, "module-contents"], [3, "module-contents"], [11, "module-contents"], [13, "module-contents"], [14, "module-contents"], [15, "module-contents"], [16, "module-contents"], [18, "module-contents"], [19, "module-contents"], [20, "module-contents"], [21, "module-contents"], [22, "module-contents"], [23, "module-contents"], [24, "module-contents"], [25, "module-contents"], [26, "module-contents"], [27, "module-contents"], [28, "module-contents"], [30, "module-contents"], [31, "module-contents"], [32, "module-contents"], [33, "module-contents"], [34, "module-contents"], [35, "module-contents"], [36, "module-contents"], [37, "module-contents"], [38, "module-contents"], [39, "module-contents"], [40, "module-contents"], [41, "module-contents"], [42, "module-contents"], [43, "module-contents"], [44, "module-contents"], [45, "module-contents"], [46, "module-contents"], [47, "module-contents"], [48, "module-contents"], [49, "module-contents"], [50, "module-contents"], [51, "module-contents"], [53, "module-contents"], [54, "module-contents"], [55, "module-contents"], [56, "module-contents"], [57, "module-contents"], [58, "module-contents"], [59, "module-contents"], [60, "module-contents"], [61, "module-contents"], [62, "module-contents"], [63, "module-contents"], [64, "module-contents"], [65, "module-contents"], [66, "module-contents"], [67, "module-contents"], [68, "module-contents"], [69, "module-contents"], [70, "module-contents"], [71, "module-contents"], [72, "module-contents"], [73, "module-contents"], [74, "module-contents"], [75, "module-contents"], [77, "module-contents"], [78, "module-contents"], [79, "module-contents"], [80, "module-contents"], [81, "module-contents"], [82, "module-contents"], [83, "module-contents"], [84, "module-contents"], [85, "module-contents"], [86, "module-contents"], [88, "module-contents"], [89, "module-contents"], [90, "module-contents"], [91, "module-contents"], [92, "module-contents"], [93, "module-contents"], [94, "module-contents"], [96, "module-contents"], [97, "module-contents"], [98, "module-contents"], [99, "module-contents"], [100, "module-contents"], [102, "module-contents"], [103, "module-contents"], [104, "module-contents"], [105, "module-contents"], [107, "module-contents"], [108, "module-contents"], [109, "module-contents"], [110, "module-contents"], [113, "module-contents"], [115, "module-contents"], [116, "module-contents"], [118, "module-contents"], [119, "module-contents"], [120, "module-contents"], [121, "module-contents"], [122, "module-contents"], [123, "module-contents"], [124, "module-contents"], [125, "module-contents"], [126, "module-contents"], [127, "module-contents"], [128, "module-contents"], [129, "module-contents"], [131, "module-contents"], [132, "module-contents"], [133, "module-contents"], [134, "module-contents"], [135, "module-contents"], [136, "module-contents"], [137, "module-contents"], [138, "module-contents"], [139, "module-contents"], [140, "module-contents"], [141, "module-contents"], [142, "module-contents"], [143, "module-contents"], [144, "module-contents"], [146, "module-contents"], [147, "module-contents"], [148, "module-contents"], [149, "module-contents"], [150, "module-contents"], [153, "module-contents"], [154, "module-contents"], [155, "module-contents"], [156, "module-contents"], [157, "module-contents"], [160, "module-contents"], [161, "module-contents"], [162, "module-contents"], [163, "module-contents"], [164, "module-contents"], [165, "module-contents"], [166, "module-contents"], [167, "module-contents"], [168, "module-contents"], [169, "module-contents"], [170, "module-contents"], [171, "module-contents"], [172, "module-contents"], [173, "module-contents"], [175, "module-contents"], [176, "module-contents"], [177, "module-contents"], [178, "module-contents"], [179, "module-contents"], [181, "module-contents"], [183, "module-contents"], [184, "module-contents"], [186, "module-contents"], [187, "module-contents"], [190, "module-contents"], [191, "module-contents"], [193, "module-contents"], [195, "module-contents"], [197, "module-contents"], [198, "module-contents"], [199, "module-contents"], [201, "module-contents"], [202, "module-contents"], [203, "module-contents"], [204, "module-contents"], [205, "module-contents"], [206, "module-contents"], [208, "module-contents"], [209, "module-contents"], [210, "module-contents"], [211, "module-contents"], [212, "module-contents"], [213, "module-contents"], [214, "module-contents"], [215, "module-contents"], [216, "module-contents"], [217, "module-contents"], [218, "module-contents"], [219, "module-contents"], [221, "module-contents"], [222, "module-contents"], [225, "module-contents"], [226, "module-contents"], [227, "module-contents"], [228, "module-contents"], [229, "module-contents"], [230, "module-contents"], [232, "module-contents"], [233, "module-contents"], [234, "module-contents"], [235, "module-contents"], [236, "module-contents"], [237, "module-contents"], [238, "module-contents"], [239, "module-contents"], [240, "module-contents"], [241, "module-contents"], [242, "module-contents"], [244, "module-contents"], [245, "module-contents"], [246, "module-contents"], [249, "module-contents"], [250, "module-contents"], [252, "module-contents"], [253, "module-contents"], [254, "module-contents"], [255, "module-contents"], [256, "module-contents"], [257, "module-contents"], [259, "module-contents"], [260, "module-contents"], [261, "module-contents"], [262, "module-contents"], [263, "module-contents"], [264, "module-contents"], [268, "module-contents"], [269, "module-contents"], [270, "module-contents"], [272, "module-contents"], [273, "module-contents"], [275, "module-contents"], [276, "module-contents"], [277, "module-contents"], [278, "module-contents"], [279, "module-contents"], [280, "module-contents"], [281, "module-contents"], [282, "module-contents"], [283, "module-contents"], [284, "module-contents"], [285, "module-contents"], [287, "module-contents"], [288, "module-contents"], [289, "module-contents"], [292, "module-contents"], [294, "module-contents"], [295, "module-contents"], [296, "module-contents"], [298, "module-contents"], [299, "module-contents"], [300, "module-contents"], [301, "module-contents"], [303, "module-contents"], [304, "module-contents"], [306, "module-contents"], [307, "module-contents"], [308, "module-contents"], [310, "module-contents"], [311, "module-contents"], [312, "module-contents"], [313, "module-contents"], [314, "module-contents"], [316, "module-contents"], [317, "module-contents"], [318, "module-contents"], [319, "module-contents"], [320, "module-contents"], [322, "module-contents"], [323, "module-contents"], [324, "module-contents"], [325, "module-contents"], [328, "module-contents"], [329, "module-contents"], [330, "module-contents"], [333, "module-contents"], [334, "module-contents"], [335, "module-contents"], [336, "module-contents"], [337, "module-contents"], [338, "module-contents"], [339, "module-contents"], [340, "module-contents"], [341, "module-contents"], [342, "module-contents"], [343, "module-contents"], [345, "module-contents"], [346, "module-contents"], [347, "module-contents"], [348, "module-contents"], [351, "module-contents"], [352, "module-contents"], [353, "module-contents"], [354, "module-contents"], [356, "module-contents"], [357, "module-contents"], [359, "module-contents"], [360, "module-contents"], [361, "module-contents"], [363, "module-contents"], [364, "module-contents"], [365, "module-contents"], [367, "module-contents"], [368, "module-contents"], [369, "module-contents"], [370, "module-contents"], [371, "module-contents"], [372, "module-contents"], [373, "module-contents"], [374, "module-contents"], [376, "module-contents"], [378, "module-contents"], [380, "module-contents"], [381, "module-contents"], [382, "module-contents"], [383, "module-contents"], [385, "module-contents"], [386, "module-contents"], [388, "module-contents"], [390, "module-contents"], [391, "module-contents"], [392, "module-contents"], [393, "module-contents"], [395, "module-contents"], [396, "module-contents"], [397, "module-contents"], [398, "module-contents"], [399, "module-contents"], [400, "module-contents"], [401, "module-contents"], [402, "module-contents"], [403, "module-contents"], [404, "module-contents"], [406, "module-contents"], [407, "module-contents"], [408, "module-contents"], [409, "module-contents"], [412, "module-contents"], [413, "module-contents"], [414, "module-contents"], [415, "module-contents"], [416, "module-contents"], [420, "module-contents"], [428, "module-contents"], [430, "module-contents"], [432, "module-contents"], [433, "module-contents"], [435, "module-contents"], [437, "module-contents"], [438, "module-contents"], [439, "module-contents"], [444, "module-contents"], [450, "module-contents"], [451, "module-contents"], [452, "module-contents"], [455, "module-contents"], [456, "module-contents"], [457, "module-contents"], [459, "module-contents"], [461, "module-contents"], [462, "module-contents"], [463, "module-contents"], [464, "module-contents"], [465, "module-contents"], [466, "module-contents"], [467, "module-contents"], [468, "module-contents"]], "Classes": [[1, "classes"], [3, "classes"], [11, "classes"], [13, "classes"], [14, "classes"], [15, "classes"], [16, "classes"], [18, "classes"], [19, "classes"], [20, "classes"], [21, "classes"], [22, "classes"], [23, "classes"], [24, "classes"], [25, "classes"], [26, "classes"], [27, "classes"], [28, "classes"], [30, "classes"], [31, "classes"], [32, "classes"], [33, "classes"], [34, "classes"], [35, "classes"], [36, "classes"], [37, "classes"], [38, "classes"], [39, "classes"], [40, "classes"], [41, "classes"], [42, "classes"], [43, "classes"], [45, "classes"], [46, "classes"], [47, "classes"], [48, "classes"], [49, "classes"], [50, "classes"], [51, "classes"], [53, "classes"], [54, "classes"], [55, "classes"], [56, "classes"], [57, "classes"], [58, "classes"], [59, "classes"], [60, "classes"], [61, "classes"], [62, "classes"], [63, "classes"], [64, "classes"], [65, "classes"], [66, "classes"], [67, "classes"], [68, "classes"], [69, "classes"], [70, "classes"], [71, "classes"], [72, "classes"], [73, "classes"], [74, "classes"], [75, "classes"], [77, "classes"], [78, "classes"], [79, "classes"], [80, "classes"], [81, "classes"], [82, "classes"], [83, "classes"], [84, "classes"], [85, "classes"], [86, "classes"], [88, "classes"], [89, "classes"], [90, "classes"], [91, "classes"], [92, "classes"], [93, "classes"], [94, "classes"], [96, "classes"], [97, "classes"], [98, "classes"], [99, "classes"], [100, "classes"], [102, "classes"], [103, "classes"], [104, "classes"], [105, "classes"], [107, "classes"], [108, "classes"], [109, "classes"], [110, "classes"], [113, "classes"], [115, "classes"], [119, "classes"], [120, "classes"], [121, "classes"], [122, "classes"], [123, "classes"], [124, "classes"], [125, "classes"], [126, "classes"], [127, "classes"], [128, "classes"], [129, "classes"], [131, "classes"], [132, "classes"], [133, "classes"], [134, "classes"], [135, "classes"], [136, "classes"], [137, "classes"], [138, "classes"], [139, "classes"], [140, "classes"], [141, "classes"], [142, "classes"], [143, "classes"], [144, "classes"], [146, "classes"], [147, "classes"], [149, "classes"], [153, "classes"], [154, "classes"], [155, "classes"], [156, "classes"], [157, "classes"], [161, "classes"], [165, "classes"], [166, "classes"], [167, "classes"], [169, "classes"], [172, "classes"], [173, "classes"], [174, "classes"], [175, "classes"], [176, "classes"], [178, "classes"], [179, "classes"], [181, "classes"], [183, "classes"], [184, "classes"], [186, "classes"], [190, "classes"], [191, "classes"], [193, "classes"], [197, "classes"], [198, "classes"], [199, "classes"], [201, "classes"], [202, "classes"], [203, "classes"], [204, "classes"], [205, "classes"], [206, "classes"], [208, "classes"], [209, "classes"], [210, "classes"], [211, "classes"], [212, "classes"], [213, "classes"], [214, "classes"], [215, "classes"], [216, "classes"], [218, "classes"], [219, "classes"], [221, "classes"], [222, "classes"], [225, "classes"], [226, "classes"], [227, "classes"], [228, "classes"], [229, "classes"], [230, "classes"], [231, "classes"], [232, "classes"], [233, "classes"], [234, "classes"], [235, "classes"], [236, "classes"], [237, "classes"], [238, "classes"], [239, "classes"], [240, "classes"], [241, "classes"], [242, "classes"], [243, "classes"], [244, "classes"], [245, "classes"], [246, "classes"], [247, "classes"], [248, "classes"], [249, "classes"], [250, "classes"], [251, "classes"], [252, "classes"], [253, "classes"], [254, "classes"], [255, "classes"], [256, "classes"], [257, "classes"], [258, "classes"], [259, "classes"], [260, "classes"], [261, "classes"], [262, "classes"], [264, "classes"], [268, "classes"], [269, "classes"], [270, "classes"], [272, "classes"], [273, "classes"], [275, "classes"], [276, "classes"], [277, "classes"], [278, "classes"], [279, "classes"], [280, "classes"], [281, "classes"], [282, "classes"], [283, "classes"], [284, "classes"], [285, "classes"], [286, "classes"], [287, "classes"], [288, "classes"], [289, "classes"], [290, "classes"], [291, "classes"], [292, "classes"], [293, "classes"], [294, "classes"], [295, "classes"], [296, "classes"], [301, "classes"], [302, "classes"], [303, "classes"], [306, "classes"], [309, "classes"], [310, "classes"], [311, "classes"], [312, "classes"], [313, "classes"], [314, "classes"], [316, "classes"], [318, "classes"], [319, "classes"], [320, "classes"], [322, "classes"], [323, "classes"], [324, "classes"], [325, "classes"], [326, "classes"], [327, "classes"], [328, "classes"], [329, "classes"], [330, "classes"], [333, "classes"], [335, "classes"], [336, "classes"], [337, "classes"], [338, "classes"], [339, "classes"], [340, "classes"], [341, "classes"], [342, "classes"], [343, "classes"], [345, "classes"], [346, "classes"], [347, "classes"], [348, "classes"], [351, "classes"], [352, "classes"], [353, "classes"], [354, "classes"], [356, "classes"], [359, "classes"], [362, "classes"], [363, "classes"], [365, "classes"], [366, "classes"], [367, "classes"], [368, "classes"], [369, "classes"], [370, "classes"], [371, "classes"], [372, "classes"], [373, "classes"], [374, "classes"], [376, "classes"], [378, "classes"], [380, "classes"], [381, "classes"], [382, "classes"], [383, "classes"], [385, "classes"], [386, "classes"], [388, "classes"], [390, "classes"], [392, "classes"], [393, "classes"], [395, "classes"], [398, "classes"], [399, "classes"], [400, "classes"], [401, "classes"], [402, "classes"], [403, "classes"], [404, "classes"], [406, "classes"], [407, "classes"], [408, "classes"], [409, "classes"], [412, "classes"], [413, "classes"], [414, "classes"], [415, "classes"], [416, "classes"], [420, "classes"], [430, "classes"], [435, "classes"], [439, "classes"], [444, "classes"], [450, "classes"], [452, "classes"], [456, "classes"], [457, "classes"], [460, "classes"], [461, "classes"], [462, "classes"], [463, "classes"], [465, "classes"], [467, "classes"], [468, "classes"]], "Functions": [[1, "functions"], [13, "functions"], [16, "functions"], [34, "functions"], [42, "functions"], [43, "functions"], [44, "functions"], [45, "functions"], [67, "functions"], [68, "functions"], [70, "functions"], [104, "functions"], [105, "functions"], [116, "functions"], [118, "functions"], [148, "functions"], [149, "functions"], [150, "functions"], [153, "functions"], [155, "functions"], [156, "functions"], [157, "functions"], [162, "functions"], [163, "functions"], [164, "functions"], [167, "functions"], [168, "functions"], [170, "functions"], [171, "functions"], [172, "functions"], [174, "functions"], [177, "functions"], [178, "functions"], [181, "functions"], [184, "functions"], [186, "functions"], [187, "functions"], [190, "functions"], [191, "functions"], [193, "functions"], [194, "functions"], [195, "functions"], [197, "functions"], [199, "functions"], [200, "functions"], [204, "functions"], [207, "functions"], [213, "functions"], [214, "functions"], [215, "functions"], [216, "functions"], [217, "functions"], [219, "functions"], [228, "functions"], [229, "functions"], [237, "functions"], [239, "functions"], [243, "functions"], [246, "functions"], [247, "functions"], [248, "functions"], [251, "functions"], [253, "functions"], [254, "functions"], [255, "functions"], [256, "functions"], [258, "functions"], [260, "functions"], [261, "functions"], [263, "functions"], [272, "functions"], [280, "functions"], [282, "functions"], [286, "functions"], [289, "functions"], [290, "functions"], [291, "functions"], [293, "functions"], [294, "functions"], [295, "functions"], [298, "functions"], [299, "functions"], [300, "functions"], [303, "functions"], [304, "functions"], [306, "functions"], [307, "functions"], [308, "functions"], [309, "functions"], [310, "functions"], [317, "functions"], [324, "functions"], [328, "functions"], [333, "functions"], [334, "functions"], [335, "functions"], [337, "functions"], [342, "functions"], [348, "functions"], [352, "functions"], [354, "functions"], [356, "functions"], [357, "functions"], [359, "functions"], [360, "functions"], [361, "functions"], [362, "functions"], [363, "functions"], [364, "functions"], [368, "functions"], [372, "functions"], [374, "functions"], [391, "functions"], [396, "functions"], [397, "functions"], [401, "functions"], [409, "functions"], [413, "functions"], [415, "functions"], [416, "functions"], [428, "functions"], [430, "functions"], [432, "functions"], [433, "functions"], [435, "functions"], [437, "functions"], [438, "functions"], [444, "functions"], [451, "functions"], [455, "functions"], [456, "functions"], [459, "functions"], [460, "functions"], [462, "functions"], [463, "functions"], [464, "functions"], [466, "functions"], [467, "functions"]], "neural_compressor.adaptor": [[2, "module-neural_compressor.adaptor"]], "Subpackages": [[2, "subpackages"], [17, "subpackages"], [87, "subpackages"], [111, "subpackages"], [112, "subpackages"], [114, "subpackages"], [158, "subpackages"], [192, "subpackages"], [194, "subpackages"], [223, "subpackages"], [248, "subpackages"], [266, "subpackages"], [291, "subpackages"], [302, "subpackages"], [326, "subpackages"], [344, "subpackages"], [355, "subpackages"], [405, "subpackages"]], "Submodules": [[2, "submodules"], [12, "submodules"], [17, "submodules"], [29, "submodules"], [52, "submodules"], [76, "submodules"], [87, "submodules"], [95, "submodules"], [101, "submodules"], [106, "submodules"], [111, "submodules"], [112, "submodules"], [114, "submodules"], [117, "submodules"], [130, "submodules"], [145, "submodules"], [151, "submodules"], [158, "submodules"], [159, "submodules"], [174, "submodules"], [180, "submodules"], [185, "submodules"], [188, "submodules"], [192, "submodules"], [194, "submodules"], [196, "submodules"], [200, "submodules"], [207, "submodules"], [220, "submodules"], [224, "submodules"], [231, "submodules"], [243, "submodules"], [247, "submodules"], [251, "submodules"], [258, "submodules"], [267, "submodules"], [274, "submodules"], [286, "submodules"], [290, "submodules"], [293, "submodules"], [297, "submodules"], [302, "submodules"], [309, "submodules"], [315, "submodules"], [321, "submodules"], [327, "submodules"], [331, "submodules"], [344, "submodules"], [350, "submodules"], [355, "submodules"], [362, "submodules"], [366, "submodules"], [377, "submodules"], [379, "submodules"], [384, "submodules"], [387, "submodules"], [389, "submodules"], [394, "submodules"], [405, "submodules"], [411, "submodules"], [417, "submodules"], [449, "submodules"], [460, "submodules"]], "Package Contents": [[2, "package-contents"], [29, "package-contents"], [174, "package-contents"], [194, "package-contents"], [200, "package-contents"], [207, "package-contents"], [231, "package-contents"], [243, "package-contents"], [247, "package-contents"], [248, "package-contents"], [251, "package-contents"], [258, "package-contents"], [274, "package-contents"], [286, "package-contents"], [290, "package-contents"], [291, "package-contents"], [293, "package-contents"], [302, "package-contents"], [309, "package-contents"], [321, "package-contents"], [326, "package-contents"], [327, "package-contents"], [344, "package-contents"], [362, "package-contents"], [366, "package-contents"], [405, "package-contents"], [460, "package-contents"]], "neural_compressor.adaptor.keras": [[3, "module-neural_compressor.adaptor.keras"]], "neural_compressor.adaptor.keras_utils.conv2d": [[4, "module-neural_compressor.adaptor.keras_utils.conv2d"]], "neural_compressor.adaptor.keras_utils.dense": [[5, "module-neural_compressor.adaptor.keras_utils.dense"]], "neural_compressor.adaptor.keras_utils.depthwise_conv2d": [[6, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"]], "neural_compressor.adaptor.keras_utils": [[7, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.pool2d": [[8, "module-neural_compressor.adaptor.keras_utils.pool2d"]], "neural_compressor.adaptor.keras_utils.quantizer": [[9, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "neural_compressor.adaptor.keras_utils.separable_conv2d": [[10, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"]], "neural_compressor.adaptor.mxnet": [[11, "module-neural_compressor.adaptor.mxnet"]], "neural_compressor.adaptor.mxnet_utils": [[12, "module-neural_compressor.adaptor.mxnet_utils"]], "neural_compressor.adaptor.mxnet_utils.util": [[13, "module-neural_compressor.adaptor.mxnet_utils.util"]], "neural_compressor.adaptor.onnxrt": [[14, "module-neural_compressor.adaptor.onnxrt"]], "neural_compressor.adaptor.ox_utils.calibration": [[15, "module-neural_compressor.adaptor.ox_utils.calibration"]], "neural_compressor.adaptor.ox_utils.calibrator": [[16, "module-neural_compressor.adaptor.ox_utils.calibrator"]], "neural_compressor.adaptor.ox_utils": [[17, "module-neural_compressor.adaptor.ox_utils"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[18, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[19, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[20, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[21, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[22, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[23, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[24, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[25, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[26, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[27, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[28, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[29, "module-neural_compressor.adaptor.ox_utils.operators"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[30, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[31, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[32, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "neural_compressor.adaptor.ox_utils.operators.norm": [[33, "module-neural_compressor.adaptor.ox_utils.operators.norm"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[34, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[35, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[36, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "neural_compressor.adaptor.ox_utils.operators.reduce": [[37, "module-neural_compressor.adaptor.ox_utils.operators.reduce"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[38, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "neural_compressor.adaptor.ox_utils.operators.split": [[39, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "neural_compressor.adaptor.ox_utils.operators.unary_op": [[40, "module-neural_compressor.adaptor.ox_utils.operators.unary_op"]], "neural_compressor.adaptor.ox_utils.quantizer": [[41, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "neural_compressor.adaptor.ox_utils.smooth_quant": [[42, "module-neural_compressor.adaptor.ox_utils.smooth_quant"]], "neural_compressor.adaptor.ox_utils.util": [[43, "module-neural_compressor.adaptor.ox_utils.util"]], "neural_compressor.adaptor.ox_utils.weight_only": [[44, "module-neural_compressor.adaptor.ox_utils.weight_only"]], "neural_compressor.adaptor.pytorch": [[45, "module-neural_compressor.adaptor.pytorch"]], "neural_compressor.adaptor.query": [[46, "module-neural_compressor.adaptor.query"]], "neural_compressor.adaptor.tensorflow": [[47, "module-neural_compressor.adaptor.tensorflow"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[48, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[49, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer": [[51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[109, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_util": [[110, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "neural_compressor.adaptor.tf_utils": [[111, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[112, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[138, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[139, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "neural_compressor.adaptor.tf_utils.smooth_quant_calibration": [[140, "module-neural_compressor.adaptor.tf_utils.smooth_quant_calibration"]], "neural_compressor.adaptor.tf_utils.smooth_quant_scaler": [[141, "module-neural_compressor.adaptor.tf_utils.smooth_quant_scaler"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[142, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[143, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[144, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[145, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[146, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[147, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.util": [[148, "module-neural_compressor.adaptor.tf_utils.util"]], "neural_compressor.adaptor.torch_utils.autoround.autoround": [[149, "module-neural_compressor.adaptor.torch_utils.autoround.autoround"]], "neural_compressor.adaptor.torch_utils.autoround.export": [[150, "module-neural_compressor.adaptor.torch_utils.autoround.export"]], "neural_compressor.adaptor.torch_utils.autoround": [[151, "module-neural_compressor.adaptor.torch_utils.autoround"]], "neural_compressor.adaptor.torch_utils.autoround.model_wrapper": [[152, "module-neural_compressor.adaptor.torch_utils.autoround.model_wrapper"]], "neural_compressor.adaptor.torch_utils.autoround.sign_sgd": [[153, "module-neural_compressor.adaptor.torch_utils.autoround.sign_sgd"]], "neural_compressor.adaptor.torch_utils.awq": [[154, "module-neural_compressor.adaptor.torch_utils.awq"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[155, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "neural_compressor.adaptor.torch_utils.gptq": [[156, "module-neural_compressor.adaptor.torch_utils.gptq"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[157, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[158, "module-neural_compressor.adaptor.torch_utils"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant": [[159, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle": [[160, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize": [[161, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load": [[162, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils": [[163, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.utils"]], "neural_compressor.adaptor.torch_utils.mixed_precision": [[164, "module-neural_compressor.adaptor.torch_utils.mixed_precision"]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[165, "module-neural_compressor.adaptor.torch_utils.model_wrapper"]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[166, "module-neural_compressor.adaptor.torch_utils.pattern_detector"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[167, "module-neural_compressor.adaptor.torch_utils.smooth_quant"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[168, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "neural_compressor.adaptor.torch_utils.teq": [[169, "module-neural_compressor.adaptor.torch_utils.teq"]], "neural_compressor.adaptor.torch_utils.util": [[170, "module-neural_compressor.adaptor.torch_utils.util"]], "}": [[170, "id3"]], "neural_compressor.adaptor.torch_utils.weight_only": [[171, "module-neural_compressor.adaptor.torch_utils.weight_only"]], "neural_compressor.algorithm.algorithm": [[172, "module-neural_compressor.algorithm.algorithm"]], "neural_compressor.algorithm.fast_bias_correction": [[173, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[174, "module-neural_compressor.algorithm"]], "neural_compressor.algorithm.smooth_quant": [[175, "module-neural_compressor.algorithm.smooth_quant"]], "neural_compressor.algorithm.weight_correction": [[176, "module-neural_compressor.algorithm.weight_correction"]], "neural_compressor.benchmark": [[177, "module-neural_compressor.benchmark"]], "neural_compressor.common.base_config": [[178, "module-neural_compressor.common.base_config"]], "neural_compressor.common.base_tune": [[179, "module-neural_compressor.common.base_tune"]], "neural_compressor.common": [[180, "module-neural_compressor.common"]], "neural_compressor.common.logger": [[181, "module-neural_compressor.common.logger"]], "neural_compressor.common.utility": [[182, "module-neural_compressor.common.utility"]], "neural_compressor.compression.callbacks": [[183, "module-neural_compressor.compression.callbacks"]], "neural_compressor.compression.distillation.criterions": [[184, "module-neural_compressor.compression.distillation.criterions"]], "neural_compressor.compression.distillation": [[185, "module-neural_compressor.compression.distillation"]], "neural_compressor.compression.distillation.optimizers": [[186, "module-neural_compressor.compression.distillation.optimizers"]], "neural_compressor.compression.distillation.utility": [[187, "module-neural_compressor.compression.distillation.utility"]], "neural_compressor.compression.hpo": [[188, "module-neural_compressor.compression.hpo"]], "neural_compressor.compression.hpo.sa_optimizer": [[189, "module-neural_compressor.compression.hpo.sa_optimizer"]], "neural_compressor.compression.hpo.search_algorithms": [[190, "module-neural_compressor.compression.hpo.search_algorithms"]], "neural_compressor.compression.hpo.search_space": [[191, "module-neural_compressor.compression.hpo.search_space"]], "neural_compressor.compression": [[192, "module-neural_compressor.compression"]], "neural_compressor.compression.pruner.criteria": [[193, "module-neural_compressor.compression.pruner.criteria"]], "neural_compressor.compression.pruner": [[194, "module-neural_compressor.compression.pruner"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[195, "module-neural_compressor.compression.pruner.model_slim.auto_slim"]], "neural_compressor.compression.pruner.model_slim": [[196, "module-neural_compressor.compression.pruner.model_slim"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[197, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[198, "module-neural_compressor.compression.pruner.model_slim.weight_slim"]], "neural_compressor.compression.pruner.patterns.base": [[199, "module-neural_compressor.compression.pruner.patterns.base"]], "neural_compressor.compression.pruner.patterns": [[200, "module-neural_compressor.compression.pruner.patterns"]], "neural_compressor.compression.pruner.patterns.mha": [[201, "module-neural_compressor.compression.pruner.patterns.mha"]], "neural_compressor.compression.pruner.patterns.ninm": [[202, "module-neural_compressor.compression.pruner.patterns.ninm"]], "neural_compressor.compression.pruner.patterns.nxm": [[203, "module-neural_compressor.compression.pruner.patterns.nxm"]], "neural_compressor.compression.pruner.pruners.base": [[204, "module-neural_compressor.compression.pruner.pruners.base"]], "neural_compressor.compression.pruner.pruners.basic": [[205, "module-neural_compressor.compression.pruner.pruners.basic"]], "neural_compressor.compression.pruner.pruners.block_mask": [[206, "module-neural_compressor.compression.pruner.pruners.block_mask"]], "neural_compressor.compression.pruner.pruners": [[207, "module-neural_compressor.compression.pruner.pruners"]], "neural_compressor.compression.pruner.pruners.mha": [[208, "module-neural_compressor.compression.pruner.pruners.mha"]], "neural_compressor.compression.pruner.pruners.pattern_lock": [[209, "module-neural_compressor.compression.pruner.pruners.pattern_lock"]], "neural_compressor.compression.pruner.pruners.progressive": [[210, "module-neural_compressor.compression.pruner.pruners.progressive"]], "neural_compressor.compression.pruner.pruners.retrain_free": [[211, "module-neural_compressor.compression.pruner.pruners.retrain_free"]], "neural_compressor.compression.pruner.pruners.sparse_gpt": [[212, "module-neural_compressor.compression.pruner.pruners.sparse_gpt"]], "neural_compressor.compression.pruner.pruning": [[213, "module-neural_compressor.compression.pruner.pruning"]], "neural_compressor.compression.pruner.regs": [[214, "module-neural_compressor.compression.pruner.regs"]], "neural_compressor.compression.pruner.schedulers": [[215, "module-neural_compressor.compression.pruner.schedulers"]], "neural_compressor.compression.pruner.tf_criteria": [[216, "module-neural_compressor.compression.pruner.tf_criteria"]], "neural_compressor.compression.pruner.utils": [[217, "module-neural_compressor.compression.pruner.utils"]], "neural_compressor.conf.config": [[218, "module-neural_compressor.conf.config"]], "neural_compressor.conf.dotdict": [[219, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[220, "module-neural_compressor.conf"]], "neural_compressor.conf.pythonic_config": [[221, "module-neural_compressor.conf.pythonic_config"]], "neural_compressor.config": [[222, "module-neural_compressor.config"]], "neural_compressor.contrib": [[223, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[224, "module-neural_compressor.contrib.strategy"]], "neural_compressor.contrib.strategy.sigopt": [[225, "module-neural_compressor.contrib.strategy.sigopt"]], "neural_compressor.contrib.strategy.tpe": [[226, "module-neural_compressor.contrib.strategy.tpe"]], "neural_compressor.data.dataloaders.base_dataloader": [[227, "module-neural_compressor.data.dataloaders.base_dataloader"]], "neural_compressor.data.dataloaders.dataloader": [[228, "module-neural_compressor.data.dataloaders.dataloader"]], "neural_compressor.data.dataloaders.default_dataloader": [[229, "module-neural_compressor.data.dataloaders.default_dataloader"]], "neural_compressor.data.dataloaders.fetcher": [[230, "module-neural_compressor.data.dataloaders.fetcher"]], "neural_compressor.data.dataloaders": [[231, "module-neural_compressor.data.dataloaders"]], "Attributes": [[231, "attributes"], [239, "attributes"], [248, "attributes"], [282, "attributes"], [291, "attributes"], [302, "attributes"], [326, "attributes"], [366, "attributes"], [416, "attributes"], [460, "attributes"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[232, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[233, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[234, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "neural_compressor.data.dataloaders.sampler": [[235, "module-neural_compressor.data.dataloaders.sampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[236, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.data.datasets.bert_dataset": [[237, "module-neural_compressor.data.datasets.bert_dataset"]], "neural_compressor.data.datasets.coco_dataset": [[238, "module-neural_compressor.data.datasets.coco_dataset"]], "neural_compressor.data.datasets.dataset": [[239, "module-neural_compressor.data.datasets.dataset"]], "neural_compressor.data.datasets.dummy_dataset": [[240, "module-neural_compressor.data.datasets.dummy_dataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[241, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "neural_compressor.data.datasets.imagenet_dataset": [[242, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[243, "module-neural_compressor.data.datasets"]], "neural_compressor.data.datasets.style_transfer_dataset": [[244, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "neural_compressor.data.filters.coco_filter": [[245, "module-neural_compressor.data.filters.coco_filter"]], "neural_compressor.data.filters.filter": [[246, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[247, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[248, "module-neural_compressor.data"]], "neural_compressor.data.transforms.coco_transform": [[249, "module-neural_compressor.data.transforms.coco_transform"]], "neural_compressor.data.transforms.imagenet_transform": [[250, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[251, "module-neural_compressor.data.transforms"]], "neural_compressor.data.transforms.postprocess": [[252, "module-neural_compressor.data.transforms.postprocess"]], "neural_compressor.data.transforms.tokenization": [[253, "module-neural_compressor.data.transforms.tokenization"]], "neural_compressor.data.transforms.transform": [[254, "module-neural_compressor.data.transforms.transform"]], "neural_compressor.experimental.benchmark": [[255, "module-neural_compressor.experimental.benchmark"]], "neural_compressor.experimental.common.criterion": [[256, "module-neural_compressor.experimental.common.criterion"]], "neural_compressor.experimental.common.dataloader": [[257, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[258, "module-neural_compressor.experimental.common"]], "neural_compressor.experimental.common.metric": [[259, "module-neural_compressor.experimental.common.metric"]], "neural_compressor.experimental.common.model": [[260, "module-neural_compressor.experimental.common.model"]], "neural_compressor.experimental.common.optimizer": [[261, "module-neural_compressor.experimental.common.optimizer"]], "neural_compressor.experimental.common.postprocess": [[262, "module-neural_compressor.experimental.common.postprocess"]], "neural_compressor.experimental.common.torch_utils": [[263, "module-neural_compressor.experimental.common.torch_utils"]], "neural_compressor.experimental.component": [[264, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.compression": [[265, "module-neural_compressor.experimental.compression"]], "neural_compressor.experimental.contrib": [[266, "module-neural_compressor.experimental.contrib"]], "neural_compressor.experimental.contrib.strategy": [[267, "module-neural_compressor.experimental.contrib.strategy"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[268, "module-neural_compressor.experimental.contrib.strategy.sigopt"]], "neural_compressor.experimental.contrib.strategy.tpe": [[269, "module-neural_compressor.experimental.contrib.strategy.tpe"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[270, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[271, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[272, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[273, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[274, "module-neural_compressor.experimental.data.dataloaders"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[275, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[276, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[277, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[278, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[279, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[280, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[281, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "neural_compressor.experimental.data.datasets.dataset": [[282, "module-neural_compressor.experimental.data.datasets.dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[283, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[284, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[285, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[286, "module-neural_compressor.experimental.data.datasets"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[287, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "neural_compressor.experimental.data.filters.coco_filter": [[288, "module-neural_compressor.experimental.data.filters.coco_filter"]], "neural_compressor.experimental.data.filters.filter": [[289, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[290, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[291, "module-neural_compressor.experimental.data"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[292, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[293, "module-neural_compressor.experimental.data.transforms"]], "neural_compressor.experimental.data.transforms.tokenization": [[294, "module-neural_compressor.experimental.data.transforms.tokenization"]], "neural_compressor.experimental.data.transforms.transform": [[295, "module-neural_compressor.experimental.data.transforms.transform"]], "neural_compressor.experimental.distillation": [[296, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[297, "module-neural_compressor.experimental.export"]], "neural_compressor.experimental.export.qlinear2qdq": [[298, "module-neural_compressor.experimental.export.qlinear2qdq"]], "neural_compressor.experimental.export.tf2onnx": [[299, "module-neural_compressor.experimental.export.tf2onnx"]], "neural_compressor.experimental.export.torch2onnx": [[300, "module-neural_compressor.experimental.export.torch2onnx"]], "neural_compressor.experimental.graph_optimization": [[301, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[302, "module-neural_compressor.experimental"]], "neural_compressor.experimental.metric.bleu": [[303, "module-neural_compressor.experimental.metric.bleu"]], "neural_compressor.experimental.metric.bleu_util": [[304, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[305, "module-neural_compressor.experimental.metric.coco_label_map"]], "neural_compressor.experimental.metric.coco_tools": [[306, "module-neural_compressor.experimental.metric.coco_tools"]], "neural_compressor.experimental.metric.evaluate_squad": [[307, "module-neural_compressor.experimental.metric.evaluate_squad"]], "neural_compressor.experimental.metric.f1": [[308, "module-neural_compressor.experimental.metric.f1"]], "neural_compressor.experimental.metric": [[309, "module-neural_compressor.experimental.metric"]], "neural_compressor.experimental.metric.metric": [[310, "module-neural_compressor.experimental.metric.metric"]], "neural_compressor.experimental.mixed_precision": [[311, "module-neural_compressor.experimental.mixed_precision"]], "neural_compressor.experimental.model_conversion": [[312, "module-neural_compressor.experimental.model_conversion"]], "neural_compressor.experimental.nas.basic_nas": [[313, "module-neural_compressor.experimental.nas.basic_nas"]], "neural_compressor.experimental.nas.dynas": [[314, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas": [[315, "module-neural_compressor.experimental.nas"]], "neural_compressor.experimental.nas.nas": [[316, "module-neural_compressor.experimental.nas.nas"]], "neural_compressor.experimental.nas.nas_utils": [[317, "module-neural_compressor.experimental.nas.nas_utils"]], "neural_compressor.experimental.nas.search_algorithms": [[318, "module-neural_compressor.experimental.nas.search_algorithms"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[319, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[320, "module-neural_compressor.experimental.pruner_legacy.group_lasso"]], "neural_compressor.experimental.pruner_legacy": [[321, "module-neural_compressor.experimental.pruner_legacy"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[322, "module-neural_compressor.experimental.pruner_legacy.magnitude"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[323, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"]], "neural_compressor.experimental.pruner_legacy.pruner": [[324, "module-neural_compressor.experimental.pruner_legacy.pruner"]], "neural_compressor.experimental.pruning": [[325, "module-neural_compressor.experimental.pruning"]], "neural_compressor.experimental.pruning_recipes": [[326, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[327, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[328, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[329, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "neural_compressor.experimental.pruning_v2": [[330, "module-neural_compressor.experimental.pruning_v2"]], "neural_compressor.experimental.pytorch_pruner": [[331, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[332, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[333, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[334, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[335, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[336, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[337, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "neural_compressor.experimental.quantization": [[338, "module-neural_compressor.experimental.quantization"]], "neural_compressor.experimental.scheduler": [[339, "module-neural_compressor.experimental.scheduler"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[340, "module-neural_compressor.experimental.strategy.auto_mixed_precision"]], "neural_compressor.experimental.strategy.basic": [[341, "module-neural_compressor.experimental.strategy.basic"]], "neural_compressor.experimental.strategy.bayesian": [[342, "module-neural_compressor.experimental.strategy.bayesian"]], "neural_compressor.experimental.strategy.exhaustive": [[343, "module-neural_compressor.experimental.strategy.exhaustive"]], "neural_compressor.experimental.strategy": [[344, "module-neural_compressor.experimental.strategy"]], "neural_compressor.experimental.strategy.mse": [[345, "module-neural_compressor.experimental.strategy.mse"]], "neural_compressor.experimental.strategy.mse_v2": [[346, "module-neural_compressor.experimental.strategy.mse_v2"]], "neural_compressor.experimental.strategy.random": [[347, "module-neural_compressor.experimental.strategy.random"]], "neural_compressor.experimental.strategy.strategy": [[348, "module-neural_compressor.experimental.strategy.strategy"]], "neural_compressor.experimental.strategy.utils.constant": [[349, "module-neural_compressor.experimental.strategy.utils.constant"]], "neural_compressor.experimental.strategy.utils": [[350, "module-neural_compressor.experimental.strategy.utils"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[351, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[352, "module-neural_compressor.experimental.strategy.utils.tuning_space"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[353, "module-neural_compressor.experimental.strategy.utils.tuning_structs"]], "neural_compressor.experimental.strategy.utils.utility": [[354, "module-neural_compressor.experimental.strategy.utils.utility"]], "neural_compressor": [[355, "module-neural_compressor"]], "neural_compressor.metric.bleu": [[356, "module-neural_compressor.metric.bleu"]], "neural_compressor.metric.bleu_util": [[357, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[358, "module-neural_compressor.metric.coco_label_map"]], "neural_compressor.metric.coco_tools": [[359, "module-neural_compressor.metric.coco_tools"]], "neural_compressor.metric.evaluate_squad": [[360, "module-neural_compressor.metric.evaluate_squad"]], "neural_compressor.metric.f1": [[361, "module-neural_compressor.metric.f1"]], "neural_compressor.metric": [[362, "module-neural_compressor.metric"]], "neural_compressor.metric.metric": [[363, "module-neural_compressor.metric.metric"]], "neural_compressor.mix_precision": [[364, "module-neural_compressor.mix_precision"]], "neural_compressor.model.base_model": [[365, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[366, "module-neural_compressor.model"]], "neural_compressor.model.keras_model": [[367, "module-neural_compressor.model.keras_model"]], "neural_compressor.model.model": [[368, "module-neural_compressor.model.model"]], "neural_compressor.model.mxnet_model": [[369, "module-neural_compressor.model.mxnet_model"]], "neural_compressor.model.nets_factory": [[370, "module-neural_compressor.model.nets_factory"]], "neural_compressor.model.onnx_model": [[371, "module-neural_compressor.model.onnx_model"]], "neural_compressor.model.tensorflow_model": [[372, "module-neural_compressor.model.tensorflow_model"]], "neural_compressor.model.torch_model": [[373, "module-neural_compressor.model.torch_model"]], "neural_compressor.objective": [[374, "module-neural_compressor.objective"]], "neural_compressor.profiling": [[375, "module-neural_compressor.profiling"]], "neural_compressor.profiling.parser.factory": [[376, "module-neural_compressor.profiling.parser.factory"]], "neural_compressor.profiling.parser": [[377, "module-neural_compressor.profiling.parser"]], "neural_compressor.profiling.parser.onnx_parser.factory": [[378, "module-neural_compressor.profiling.parser.onnx_parser.factory"]], "neural_compressor.profiling.parser.onnx_parser": [[379, "module-neural_compressor.profiling.parser.onnx_parser"]], "neural_compressor.profiling.parser.onnx_parser.parser": [[380, "module-neural_compressor.profiling.parser.onnx_parser.parser"]], "neural_compressor.profiling.parser.parser": [[381, "module-neural_compressor.profiling.parser.parser"]], "neural_compressor.profiling.parser.result": [[382, "module-neural_compressor.profiling.parser.result"]], "neural_compressor.profiling.parser.tensorflow_parser.factory": [[383, "module-neural_compressor.profiling.parser.tensorflow_parser.factory"]], "neural_compressor.profiling.parser.tensorflow_parser": [[384, "module-neural_compressor.profiling.parser.tensorflow_parser"]], "neural_compressor.profiling.parser.tensorflow_parser.parser": [[385, "module-neural_compressor.profiling.parser.tensorflow_parser.parser"]], "neural_compressor.profiling.profiler.factory": [[386, "module-neural_compressor.profiling.profiler.factory"]], "neural_compressor.profiling.profiler": [[387, "module-neural_compressor.profiling.profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.factory": [[388, "module-neural_compressor.profiling.profiler.onnxrt_profiler.factory"]], "neural_compressor.profiling.profiler.onnxrt_profiler": [[389, "module-neural_compressor.profiling.profiler.onnxrt_profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.profiler": [[390, "module-neural_compressor.profiling.profiler.onnxrt_profiler.profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.utils": [[391, "module-neural_compressor.profiling.profiler.onnxrt_profiler.utils"]], "neural_compressor.profiling.profiler.profiler": [[392, "module-neural_compressor.profiling.profiler.profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.factory": [[393, "module-neural_compressor.profiling.profiler.tensorflow_profiler.factory"]], "neural_compressor.profiling.profiler.tensorflow_profiler": [[394, "module-neural_compressor.profiling.profiler.tensorflow_profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.profiler": [[395, "module-neural_compressor.profiling.profiler.tensorflow_profiler.profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.utils": [[396, "module-neural_compressor.profiling.profiler.tensorflow_profiler.utils"]], "neural_compressor.quantization": [[397, "module-neural_compressor.quantization"]], "neural_compressor.strategy.auto": [[398, "module-neural_compressor.strategy.auto"]], "neural_compressor.strategy.auto_mixed_precision": [[399, "module-neural_compressor.strategy.auto_mixed_precision"]], "neural_compressor.strategy.basic": [[400, "module-neural_compressor.strategy.basic"]], "neural_compressor.strategy.bayesian": [[401, "module-neural_compressor.strategy.bayesian"]], "neural_compressor.strategy.conservative": [[402, "module-neural_compressor.strategy.conservative"]], "neural_compressor.strategy.exhaustive": [[403, "module-neural_compressor.strategy.exhaustive"]], "neural_compressor.strategy.hawq_v2": [[404, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[405, "module-neural_compressor.strategy"]], "neural_compressor.strategy.mse": [[406, "module-neural_compressor.strategy.mse"]], "neural_compressor.strategy.mse_v2": [[407, "module-neural_compressor.strategy.mse_v2"]], "neural_compressor.strategy.random": [[408, "module-neural_compressor.strategy.random"]], "neural_compressor.strategy.strategy": [[409, "module-neural_compressor.strategy.strategy"]], "neural_compressor.strategy.utils.constant": [[410, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[411, "module-neural_compressor.strategy.utils"]], "neural_compressor.strategy.utils.tuning_sampler": [[412, "module-neural_compressor.strategy.utils.tuning_sampler"]], "neural_compressor.strategy.utils.tuning_space": [[413, "module-neural_compressor.strategy.utils.tuning_space"]], "neural_compressor.strategy.utils.tuning_structs": [[414, "module-neural_compressor.strategy.utils.tuning_structs"]], "neural_compressor.strategy.utils.utility": [[415, "module-neural_compressor.strategy.utils.utility"]], "neural_compressor.template.api_doc_example": [[416, "module-neural_compressor.template.api_doc_example"]], "neural_compressor.template": [[417, "module-neural_compressor.template"]], "neural_compressor.tensorflow.algorithms": [[418, "module-neural_compressor.tensorflow.algorithms"]], "neural_compressor.tensorflow.algorithms.static_quantize": [[419, "module-neural_compressor.tensorflow.algorithms.static_quantize"]], "neural_compressor.tensorflow.algorithms.static_quantize.keras": [[420, "module-neural_compressor.tensorflow.algorithms.static_quantize.keras"]], "neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.conv2d": [[421, "module-neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.conv2d"]], "neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.dense": [[422, "module-neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.dense"]], "neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.depthwise_conv2d": [[423, "module-neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.depthwise_conv2d"]], "neural_compressor.tensorflow.algorithms.static_quantize.keras_utils": [[424, "module-neural_compressor.tensorflow.algorithms.static_quantize.keras_utils"]], "neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.pool2d": [[425, "module-neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.pool2d"]], "neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.quantizer": [[426, "module-neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.quantizer"]], "neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.separable_conv2d": [[427, "module-neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.separable_conv2d"]], "neural_compressor.tensorflow.algorithms.static_quantize.quantize_entry": [[428, "module-neural_compressor.tensorflow.algorithms.static_quantize.quantize_entry"]], "neural_compressor.tensorflow": [[429, "module-neural_compressor.tensorflow"]], "neural_compressor.tensorflow.quantization.config": [[430, "module-neural_compressor.tensorflow.quantization.config"]], "neural_compressor.tensorflow.quantization": [[431, "module-neural_compressor.tensorflow.quantization"]], "neural_compressor.tensorflow.quantization.quantize": [[432, "module-neural_compressor.tensorflow.quantization.quantize"]], "neural_compressor.tensorflow.utils": [[433, "module-neural_compressor.tensorflow.utils"]], "neural_compressor.torch.algorithms": [[434, "module-neural_compressor.torch.algorithms"]], "neural_compressor.torch.algorithms.weight_only.gptq": [[435, "module-neural_compressor.torch.algorithms.weight_only.gptq"]], "neural_compressor.torch.algorithms.weight_only": [[436, "module-neural_compressor.torch.algorithms.weight_only"]], "neural_compressor.torch.algorithms.weight_only.rtn": [[437, "module-neural_compressor.torch.algorithms.weight_only.rtn"]], "neural_compressor.torch.algorithms.weight_only_algos": [[438, "module-neural_compressor.torch.algorithms.weight_only_algos"]], "neural_compressor.torch.amp.autocast": [[439, "module-neural_compressor.torch.amp.autocast"]], "neural_compressor.torch.amp.fp8.functions": [[440, "module-neural_compressor.torch.amp.fp8.functions"]], "neural_compressor.torch.amp.fp8": [[441, "module-neural_compressor.torch.amp.fp8"]], "neural_compressor.torch.amp": [[442, "module-neural_compressor.torch.amp"]], "neural_compressor.torch": [[443, "module-neural_compressor.torch"]], "neural_compressor.torch.quantization.config": [[444, "module-neural_compressor.torch.quantization.config"]], "neural_compressor.torch.quantization.fp8": [[445, "module-neural_compressor.torch.quantization.fp8"]], "neural_compressor.torch.quantization.fp8.modules": [[446, "module-neural_compressor.torch.quantization.fp8.modules"]], "neural_compressor.torch.quantization.fp8.observer": [[447, "module-neural_compressor.torch.quantization.fp8.observer"]], "neural_compressor.torch.quantization.fp8.quantization_impl": [[448, "module-neural_compressor.torch.quantization.fp8.quantization_impl"]], "neural_compressor.torch.quantization": [[449, "module-neural_compressor.torch.quantization"]], "neural_compressor.torch.quantization.layers": [[450, "module-neural_compressor.torch.quantization.layers"]], "neural_compressor.torch.quantization.quantize": [[451, "module-neural_compressor.torch.quantization.quantize"]], "neural_compressor.torch.tune": [[452, "module-neural_compressor.torch.tune"]], "neural_compressor.torch.utils.constants": [[453, "module-neural_compressor.torch.utils.constants"]], "neural_compressor.torch.utils": [[454, "module-neural_compressor.torch.utils"]], "neural_compressor.torch.utils.utility": [[455, "module-neural_compressor.torch.utils.utility"]], "neural_compressor.training": [[456, "module-neural_compressor.training"]], "neural_compressor.utils.collect_layer_histogram": [[457, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[458, "module-neural_compressor.utils.constant"]], "neural_compressor.utils.create_obj_from_config": [[459, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[460, "module-neural_compressor.utils"]], "neural_compressor.utils.kl_divergence": [[461, "module-neural_compressor.utils.kl_divergence"]], "neural_compressor.utils.load_huggingface": [[462, "module-neural_compressor.utils.load_huggingface"]], "neural_compressor.utils.logger": [[463, "module-neural_compressor.utils.logger"]], "neural_compressor.utils.neural_insights_utils": [[464, "module-neural_compressor.utils.neural_insights_utils"]], "neural_compressor.utils.options": [[465, "module-neural_compressor.utils.options"]], "neural_compressor.utils.pytorch": [[466, "module-neural_compressor.utils.pytorch"]], "neural_compressor.utils.utility": [[467, "module-neural_compressor.utils.utility"]], "neural_compressor.utils.weights_details": [[468, "module-neural_compressor.utils.weights_details"]], "neural_compressor.version": [[469, "module-neural_compressor.version"]], "Intel\u00ae Neural Compressor Documentation": [[470, "intel-neural-compressor-documentation"], [569, "intel-neural-compressor-documentation"]], "Sections": [[470, "sections"], [569, "sections"]], "Contributor Covenant Code of Conduct": [[471, "contributor-covenant-code-of-conduct"], [472, "contributor-covenant-code-of-conduct"]], "Our Pledge": [[471, "our-pledge"]], "Our Standards": [[471, "our-standards"]], "Our Responsibilities": [[471, "our-responsibilities"]], "Scope": [[471, "scope"]], "Enforcement": [[471, "enforcement"]], "Attribution": [[471, "attribution"]], "Contribution Guidelines": [[472, "contribution-guidelines"]], "Create Pull Request": [[472, "create-pull-request"]], "Step-by-Step guidelines": [[472, "step-by-step-guidelines"]], "Pull Request Checklist": [[472, "pull-request-checklist"]], "Pull Request Template": [[472, "pull-request-template"]], "Pull Request Acceptance Criteria": [[472, "pull-request-acceptance-criteria"]], "Pull Request Status Checks Overview": [[472, "pull-request-status-checks-overview"]], "Support": [[472, "support"]], "FX": [[473, "fx"]], "Introduction": [[473, "introduction"], [474, "introduction"], [477, "introduction"], [478, "introduction"], [479, "introduction"], [494, "introduction"], [495, "introduction"], [496, "introduction"], [497, "introduction"], [500, "introduction"], [501, "introduction"], [502, "introduction"], [504, "introduction"], [506, "introduction"], [509, "introduction"], [513, "introduction"], [515, "introduction"], [516, "introduction"], [537, "introduction"], [538, "introduction"], [539, "introduction"], [551, "introduction"], [552, "introduction"], [553, "introduction"], [555, "introduction"], [557, "introduction"], [559, "introduction"], [561, "introduction"], [562, "introduction"], [563, "introduction"], [564, "introduction"], [565, "introduction"], [567, "introduction"]], "FX Mode Support Matrix in Neural Compressor": [[473, "fx-mode-support-matrix-in-neural-compressor"]], "Get Started": [[473, "get-started"], [499, "get-started"], [541, "get-started"], [556, "get-started"]], "Post Training Static Quantization": [[473, "post-training-static-quantization"], [556, "post-training-static-quantization"]], "Post Training Dynamic Quantization": [[473, "post-training-dynamic-quantization"], [556, "post-training-dynamic-quantization"]], "Quantization-Aware Training": [[473, "quantization-aware-training"]], "Examples": [[473, "examples"], [474, "examples"], [494, "examples"], [496, "examples"], [497, "examples"], [500, "examples"], [501, "examples"], [502, "examples"], [503, "examples"], [504, "examples"], [514, "examples"], [515, "examples"], [516, "examples"], [552, "examples"], [553, "examples"], [556, "examples"], [557, "examples"], [559, "examples"], [563, "examples"]], "Note": [[473, "note"]], "Details": [[473, "details"]], "Common Problem": [[473, "common-problem"]], "Dynamic Quantization": [[473, "dynamic-quantization"]], "Static Quantization & Quantization Aware Training": [[473, "static-quantization-quantization-aware-training"]], "Neural Architecture Search": [[474, "neural-architecture-search"]], "Basic NAS": [[474, "basic-nas"]], "Dynamic NAS": [[474, "dynamic-nas"]], "NAS Support Matrix": [[474, "nas-support-matrix"]], "Get Started with NAS API": [[474, "get-started-with-nas-api"]], "Basic Usage": [[474, "basic-usage"]], "1. Python code + YAML": [[474, "python-code-yaml"]], "2. Python code only": [[474, "python-code-only"]], "Advanced Usage (Custom NAS)": [[474, "advanced-usage-custom-nas"]], "Security Policy": [[475, "security-policy"]], "Report a Vulnerability": [[475, "report-a-vulnerability"]], "Intel\u00ae Neural Compressor": [[476, "intel-neural-compressor"], [534, "intel-neural-compressor"]], "Installation": [[476, "installation"], [510, "installation"], [510, "id1"], [528, "installation"], [536, "installation"], [541, "installation"]], "Install from pypi": [[476, "install-from-pypi"], [536, "install-from-pypi"]], "Getting Started": [[476, "getting-started"], [507, "getting-started"], [536, "getting-started"]], "Quantization with Python API": [[476, "quantization-with-python-api"], [507, "quantization-with-python-api"], [536, "quantization-with-python-api"]], "Documentation": [[476, "documentation"]], "Selected Publications/Events": [[476, "selected-publications-events"]], "Additional Content": [[476, "additional-content"]], "Communication": [[476, "communication"]], "Adaptor": [[477, "adaptor"], [480, "adaptor"]], "Adaptor Support Matrix": [[477, "adaptor-support-matrix"]], "Working Flow": [[477, "working-flow"], [556, "working-flow"]], "Get Started with Adaptor API": [[477, "get-started-with-adaptor-api"]], "Query API": [[477, "query-api"]], "Background": [[477, "background"]], "Query API Introduction": [[477, "query-api-introduction"]], "Example of Adding a New Backend Support": [[477, "example-of-adding-a-new-backend-support"]], "Capability": [[477, "capability"]], "Implement ONNXRTAdaptor Class": [[477, "implement-onnxrtadaptor-class"]], "How to Add An Adaptor": [[478, "how-to-add-an-adaptor"]], "API List that Need to Implement": [[478, "api-list-that-need-to-implement"]], "Design the framework YAML": [[478, "design-the-framework-yaml"]], "Add query_fw_capability to Adaptor": [[478, "add-query-fw-capability-to-adaptor"]], "Add quantize API according to tune_cfg": [[478, "add-quantize-api-according-to-tune-cfg"]], "Prepare calibration model from fp32 graph": [[478, "prepare-calibration-model-from-fp32-graph"]], "Run sampling iterations of the fp32 graph to calibrate quantizable operators.": [[478, "run-sampling-iterations-of-the-fp32-graph-to-calibrate-quantizable-operators"]], "Calculate the data range and generate quantized model": [[478, "calculate-the-data-range-and-generate-quantized-model"]], "How to Support New Data Type, Like Int4, with a Few Line Changes": [[479, "how-to-support-new-data-type-like-int4-with-a-few-line-changes"]], "Define the Quantization Ability of the Specific Operator": [[479, "define-the-quantization-ability-of-the-specific-operator"]], "Invoke the Operator Kernel According to the Tuning Configuration": [[479, "invoke-the-operator-kernel-according-to-the-tuning-configuration"]], "Use the New Data Type": [[479, "use-the-new-data-type"]], "Summary": [[479, "summary"]], "ONNX Runtime": [[481, "onnx-runtime"]], "Torch Utils": [[482, "torch-utils"]], "API Document Example": [[483, "api-document-example"]], "APIs": [[484, "apis"]], "Benchmark": [[485, "benchmark"], [514, "benchmark"], [555, "benchmark"]], "Compression": [[486, "compression"]], "Config": [[487, "config"]], "Mix Precision": [[488, "mix-precision"], [514, "mix-precision"]], "Model": [[489, "model"], [516, "model"], [537, "model"], [539, "model"]], "Objective": [[490, "objective"], [547, "objective"], [548, "objective"], [549, "objective"], [551, "objective"]], "Quantization": [[491, "quantization"], [555, "quantization"], [556, "quantization"]], "Strategy": [[492, "strategy"]], "Training": [[493, "training"]], "Benchmarking": [[494, "benchmarking"]], "Benchmark Support Matrix": [[494, "benchmark-support-matrix"]], "Get Started with Benchmark API": [[494, "get-started-with-benchmark-api"]], "Calibration Algorithms in Quantization": [[495, "calibration-algorithms-in-quantization"]], "Calibration Algorithms": [[495, "calibration-algorithms"]], "Support Matrix": [[495, "support-matrix"], [519, "support-matrix"]], "Reference": [[495, "reference"], [553, "reference"], [556, "reference"], [559, "reference"], [562, "reference"]], "DataLoader": [[496, "dataloader"]], "Supported Framework Dataloader Matrix": [[496, "supported-framework-dataloader-matrix"]], "Get Started with DataLoader": [[496, "get-started-with-dataloader"]], "Use Intel\u00ae Neural Compressor DataLoader API": [[496, "use-intel-neural-compressor-dataloader-api"]], "Build Custom Dataloader with Python API": [[496, "build-custom-dataloader-with-python-api"]], "Dataset": [[497, "dataset"]], "Supported Framework Dataset Matrix": [[497, "supported-framework-dataset-matrix"]], "TensorFlow": [[497, "tensorflow"], [513, "tensorflow"], [564, "tensorflow"]], "PyTorch": [[497, "pytorch"], [513, "pytorch"], [558, "pytorch"]], "MXNet": [[497, "mxnet"], [513, "mxnet"], [564, "mxnet"]], "ONNXRT": [[497, "onnxrt"], [513, "onnxrt"], [564, "onnxrt"]], "Get start with Dataset API": [[497, "get-start-with-dataset-api"]], "Config dataloader in a yaml file": [[497, "config-dataloader-in-a-yaml-file"]], "User-specific dataset": [[497, "user-specific-dataset"]], "Design": [[498, "design"], [565, "design"], [565, "id1"], [565, "id3"], [565, "id5"], [565, "id7"], [565, "id9"], [565, "id11"], [565, "id13"], [565, "id15"], [565, "id17"], [565, "id19"], [565, "id21"]], "Architecture": [[498, "architecture"], [509, "architecture"]], "Workflow": [[498, "workflow"]], "Diagnosis": [[499, "diagnosis"]], "Diagnosis Introduction": [[499, "diagnosis-introduction"]], "Supported Feature Matrix": [[499, "supported-feature-matrix"], [502, "supported-feature-matrix"], [506, "supported-feature-matrix"], [509, "supported-feature-matrix"], [555, "supported-feature-matrix"], [556, "supported-feature-matrix"], [563, "supported-feature-matrix"], [567, "supported-feature-matrix"]], "Install Intel\u00ae Neural Compressor": [[499, "install-intel-neural-compressor"]], "Modify script": [[499, "modify-script"]], "Quantization diagnosis": [[499, "quantization-diagnosis"]], "Benchmark diagnosis": [[499, "benchmark-diagnosis"]], "Example": [[499, "example"], [513, "example"], [519, "example"], [523, "example"], [551, "example"]], "Prepare dataset": [[499, "prepare-dataset"]], "Run quantization script": [[499, "run-quantization-script"]], "Run benchmark script": [[499, "run-benchmark-script"]], "See quantization data": [[499, "see-quantization-data"]], "How to do diagnosis": [[499, "how-to-do-diagnosis"]], "Parameter description": [[499, "parameter-description"]], "Diagnosis suggestions": [[499, "diagnosis-suggestions"]], "Fallback setting example": [[499, "fallback-setting-example"]], "See profiling data": [[499, "see-profiling-data"]], "Distillation": [[500, "distillation"], [514, "distillation"], [555, "distillation"]], "Knowledge Distillation": [[500, "knowledge-distillation"]], "Intermediate Layer Knowledge Distillation": [[500, "intermediate-layer-knowledge-distillation"]], "Self Distillation": [[500, "self-distillation"]], "Distillation Support Matrix": [[500, "distillation-support-matrix"]], "Get Started with Distillation API": [[500, "get-started-with-distillation-api"]], "Distillation for Quantization": [[501, "distillation-for-quantization"]], "Distillation for Quantization Support Matrix": [[501, "distillation-for-quantization-support-matrix"]], "Get Started with Distillation for Quantization API": [[501, "get-started-with-distillation-for-quantization-api"]], "Distributed Training and Inference (Evaluation)": [[502, "distributed-training-and-inference-evaluation"]], "Get Started with Distributed Training and Inference API": [[502, "get-started-with-distributed-training-and-inference-api"]], "Option 1: Pure Yaml Configuration": [[502, "option-1-pure-yaml-configuration"]], "Option 2: User Defined Training Function": [[502, "option-2-user-defined-training-function"]], "Horovodrun Execution": [[502, "horovodrun-execution"]], "Security": [[502, "security"]], "PyTorch Examples:": [[502, "pytorch-examples"]], "TensorFlow Examples:": [[502, "tensorflow-examples"]], "Example List": [[503, "example-list"]], "Release Data": [[503, "release-data"]], "Export": [[504, "export"]], "Supported Framework Model Matrix": [[504, "supported-framework-model-matrix"], [516, "supported-framework-model-matrix"], [557, "supported-framework-model-matrix"], [559, "supported-framework-model-matrix"]], "PyTorch Model": [[504, "pytorch-model"]], "FP32 Model Export": [[504, "fp32-model-export"], [504, "id1"]], "INT8 Model Export": [[504, "int8-model-export"], [504, "id2"]], "Tensorflow Model": [[504, "tensorflow-model"]], "Appendix": [[504, "appendix"]], "Supported quantized ops": [[504, "supported-quantized-ops"]], "Frequently Asked Questions": [[505, "frequently-asked-questions"]], "Common Build Issues": [[505, "common-build-issues"]], "Issue 1:": [[505, "issue-1"]], "Issue 2:": [[505, "issue-2"]], "Issue 3:": [[505, "issue-3"]], "Issue 4:": [[505, "issue-4"]], "Framework YAML Configuration Files": [[506, "framework-yaml-configuration-files"]], "Get started with Framework YAML Files": [[506, "get-started-with-framework-yaml-files"]], "Quick Samples": [[507, "quick-samples"]], "Validated Models": [[507, "validated-models"], [562, "validated-models"], [568, "validated-models"]], "Incompatible changes between v1.2 and v1.1": [[508, "incompatible-changes-between-v1-2-and-v1-1"]], "User-facing APIs": [[508, "user-facing-apis"]], "Built-in transform/dataset/metric APIs": [[508, "built-in-transform-dataset-metric-apis"]], "Infrastructure of Intel\u00ae Neural Compressor": [[509, "infrastructure-of-intel-neural-compressor"]], "Prerequisites": [[510, "prerequisites"], [541, "prerequisites"], [542, "prerequisites"]], "Install from Binary": [[510, "install-from-binary"]], "Install from Source": [[510, "install-from-source"], [536, "install-from-source"]], "Install from AI Kit": [[510, "install-from-ai-kit"]], "System Requirements": [[510, "system-requirements"]], "Validated Hardware Environment": [[510, "validated-hardware-environment"]], "Intel\u00ae Neural Compressor supports CPUs based on Intel 64 architecture or compatible processors:": [[510, "intel-neural-compressor-supports-cpus-based-on-intel-64-architecture-or-compatible-processors"]], "Intel\u00ae Neural Compressor supports GPUs built on Intel\u2019s Xe architecture:": [[510, "intel-neural-compressor-supports-gpus-built-on-intel-s-xe-architecture"]], "Intel\u00ae Neural Compressor quantized ONNX models support multiple hardware vendors through ONNX Runtime:": [[510, "intel-neural-compressor-quantized-onnx-models-support-multiple-hardware-vendors-through-onnx-runtime"]], "Validated Software Environment": [[510, "validated-software-environment"]], "Legal Information": [[511, "legal-information"]], "License": [[511, "license"]], "Citation": [[511, "citation"]], "Trademarks": [[511, "trademarks"]], "LLMs Quantization Recipes": [[512, "llms-quantization-recipes"]], "IPEX key models": [[512, "ipex-key-models"]], "Metrics": [[513, "metrics"]], "Supported Built-in Metric Matrix": [[513, "supported-built-in-metric-matrix"]], "Get Started with Metric": [[513, "get-started-with-metric"]], "Use Intel\u00ae Neural Compressor Metric API": [[513, "use-intel-neural-compressor-metric-api"]], "Build Custom Metric with Python API": [[513, "build-custom-metric-with-python-api"]], "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X": [[514, "code-migration-from-intel-neural-compressor-1-x-to-intel-neural-compressor-2-x"]], "Model Quantization": [[514, "model-quantization"]], "Post-training Quantization": [[514, "post-training-quantization"]], "Quantization Aware Training": [[514, "quantization-aware-training"], [556, "quantization-aware-training"], [556, "id1"]], "Pruning": [[514, "pruning"], [553, "pruning"], [555, "pruning"]], "Orchestration": [[514, "orchestration"]], "Mixed Precision": [[515, "mixed-precision"]], "Mixed Precision Support Matrix": [[515, "mixed-precision-support-matrix"]], "Hardware and Software requests for BF16": [[515, "hardware-and-software-requests-for-bf16"]], "Hardware and Software requests for FP16": [[515, "hardware-and-software-requests-for-fp16"]], "During quantization mixed precision": [[515, "during-quantization-mixed-precision"]], "Accuracy-driven mixed precision": [[515, "accuracy-driven-mixed-precision"]], "Get Started with Mixed Precision API": [[515, "get-started-with-mixed-precision-api"]], "Neural Coder": [[517, "neural-coder"], [534, "neural-coder"], [534, "id1"]], "What do we offer?": [[517, "what-do-we-offer"]], "Getting Started!": [[517, "getting-started"], [528, "getting-started"]], "Jupyter Lab Extension": [[517, "jupyter-lab-extension"]], "Python Launcher": [[517, "python-launcher"], [522, "python-launcher"]], "Python API": [[517, "python-api"]], "Contact": [[517, "contact"], [541, "contact"]], "AWS Amazon SageMaker Support": [[518, "aws-amazon-sagemaker-support"]], "Start Jupyter Lab 3": [[518, "start-jupyter-lab-3"]], "For SageMaker Studio": [[518, "for-sagemaker-studio"]], "For SageMaker Notebook instance": [[518, "for-sagemaker-notebook-instance"]], "Installation Guide": [[518, "installation-guide"]], "BigDL Nano Support": [[519, "bigdl-nano-support"]], "Intel CPU Platforms: Best Performance Setting": [[520, "intel-cpu-platforms-best-performance-setting"]], "Install MKL, OpenMP and JEMALLOC": [[520, "install-mkl-openmp-and-jemalloc"]], "Install NUMA Controller": [[520, "install-numa-controller"]], "Environment Variables": [[520, "environment-variables"]], "Frequency Governers": [[520, "frequency-governers"]], "Neural Coder as Python API": [[521, "neural-coder-as-python-api"]], "Enable": [[521, "enable"]], "Bench": [[521, "bench"]], "SuperBench": [[521, "superbench"]], "Quick-Start": [[522, "quick-start"]], "Launcher Arguments (Optional)": [[522, "launcher-arguments-optional"]], "Neural Coder for Quantization": [[523, "neural-coder-for-quantization"]], "Features Supported": [[523, "features-supported"]], "Models Supported": [[523, "models-supported"]], "Usage": [[523, "usage"], [543, "usage"], [543, "id2"], [543, "id6"], [543, "id9"], [543, "id16"], [543, "id19"], [543, "id22"], [543, "id25"], [562, "usage"], [563, "usage"], [563, "id1"], [565, "usage"], [565, "id2"], [565, "id4"], [565, "id6"], [565, "id8"], [565, "id10"], [565, "id12"], [565, "id14"], [565, "id16"], [565, "id18"], [565, "id20"], [565, "id22"]], "PyPI distribution:": [[523, "pypi-distribution"]], "Supported Optimization Features": [[524, "supported-optimization-features"]], "v0.4": [[525, "v0-4"]], "Highlights": [[525, "highlights"]], "Others": [[525, "others"]], "Changelog": [[526, "changelog"], [530, "changelog"]], "neural_compressor_ext_lab": [[527, "neural-compressor-ext-lab"]], "Requirements": [[527, "requirements"], [531, "requirements"], [537, "requirements"], [538, "requirements"], [539, "requirements"], [547, "requirements"]], "Install": [[527, "install"], [531, "install"]], "Uninstall": [[527, "uninstall"], [531, "uninstall"]], "Contributing": [[527, "contributing"], [531, "contributing"]], "Development install": [[527, "development-install"], [531, "development-install"]], "Development uninstall": [[527, "development-uninstall"], [531, "development-uninstall"]], "Packaging the extension": [[527, "packaging-the-extension"], [531, "packaging-the-extension"]], "Intel\u00ae Neural Compressor as JupyterLab Extension": [[528, "intel-neural-compressor-as-jupyterlab-extension"]], "Auto-enable a feature": [[528, "auto-enable-a-feature"]], "Or let us help you auto-select the best feature": [[528, "or-let-us-help-you-auto-select-the-best-feature"]], "Pre-requisites": [[528, "pre-requisites"]], "Making a new release of neural_compressor_ext_lab": [[529, "making-a-new-release-of-neural-compressor-ext-lab"]], "Manual release": [[529, "manual-release"], [532, "manual-release"]], "Python package": [[529, "python-package"], [532, "python-package"]], "NPM package": [[529, "npm-package"], [532, "npm-package"]], "Automated releases with the Jupyter Releaser": [[529, "automated-releases-with-the-jupyter-releaser"], [532, "automated-releases-with-the-jupyter-releaser"]], "Publishing to conda-forge": [[529, "publishing-to-conda-forge"], [532, "publishing-to-conda-forge"]], "neural_compressor_ext_lab_alibaba": [[531, "neural-compressor-ext-lab-alibaba"]], "Making a new release of neural_compressor_ext_lab_alibaba": [[532, "making-a-new-release-of-neural-compressor-ext-lab-alibaba"]], "Change Log": [[533, "change-log"]], "[Unreleased]": [[533, "unreleased"]], "Background Introduction": [[534, "background-introduction"]], "Neural Coder Extension in VSCode": [[534, "neural-coder-extension-in-vscode"]], "Neural Coder Extension Usage": [[534, "neural-coder-extension-usage"]], "1. Open": [[534, "open"]], "2. Search": [[534, "search"]], "3. Setting": [[534, "setting"]], "4. Icon": [[534, "icon"]], "5. optimization (quantization)": [[534, "optimization-quantization"]], "5.1 Enable": [[534, "enable"]], "5.2 Auto": [[534, "auto"]], "Welcome to your VS Code Extension": [[535, "welcome-to-your-vs-code-extension"]], "What\u2019s in the folder": [[535, "what-s-in-the-folder"]], "Setup": [[535, "setup"]], "Get up and running straight away": [[535, "get-up-and-running-straight-away"]], "Make changes": [[535, "make-changes"]], "Explore the API": [[535, "explore-the-api"]], "Run tests": [[535, "run-tests"]], "Go further": [[535, "go-further"]], "Neural Insights": [[536, "neural-insights"]], "Start the Neural Insights": [[536, "start-the-neural-insights"]], "Tensor dump examples": [[536, "tensor-dump-examples"]], "Step by Step Diagnosis Example": [[536, "step-by-step-diagnosis-example"]], "Research Collaborations": [[536, "research-collaborations"]], "Step by step example how to debug accuracy with Neural Insights": [[537, "step-by-step-example-how-to-debug-accuracy-with-neural-insights"], [539, "step-by-step-example-how-to-debug-accuracy-with-neural-insights"]], "Preparation": [[537, "preparation"], [538, "preparation"], [539, "preparation"], [561, "preparation"]], "Running the quantization": [[537, "running-the-quantization"], [538, "running-the-quantization"], [539, "running-the-quantization"]], "Analyzing the result of quantization": [[537, "analyzing-the-result-of-quantization"], [539, "analyzing-the-result-of-quantization"]], "Weights summary": [[537, "weights-summary"]], "Activations summary": [[537, "activations-summary"]], "Step by step example how to dump weights data for PyTorch model with Neural Insights": [[538, "step-by-step-example-how-to-dump-weights-data-for-pytorch-model-with-neural-insights"]], "Source": [[538, "source"], [539, "source"]], "Prepare the dataset": [[539, "prepare-the-dataset"]], "Analyzing weight histograms": [[539, "analyzing-weight-histograms"]], "Open Neural Insights": [[539, "open-neural-insights"]], "Getting Started with Create React App": [[540, "getting-started-with-create-react-app"]], "Available Scripts": [[540, "available-scripts"]], "npm start": [[540, "npm-start"]], "npm test": [[540, "npm-test"]], "npm run build": [[540, "npm-run-build"]], "npm run eject": [[540, "npm-run-eject"]], "Learn More": [[540, "learn-more"], [541, "learn-more"]], "Code Splitting": [[540, "code-splitting"]], "Analyzing the Bundle Size": [[540, "analyzing-the-bundle-size"]], "Making a Progressive Web App": [[540, "making-a-progressive-web-app"]], "Advanced Configuration": [[540, "advanced-configuration"]], "Deployment": [[540, "deployment"]], "npm run build fails to minify": [[540, "npm-run-build-fails-to-minify"]], "What\u2019s Neural Solution?": [[541, "what-s-neural-solution"]], "Why Neural Solution?": [[541, "why-neural-solution"]], "How does Neural Solution Work?": [[541, "how-does-neural-solution-work"]], "Method 1. Using pip:": [[541, "method-1-using-pip"]], "Method 2. Building from source:": [[541, "method-2-building-from-source"]], "End-to-end examples": [[541, "end-to-end-examples"]], "Get started": [[542, "get-started"]], "Install Neural Solution": [[542, "install-neural-solution"]], "Method 1. Using pip": [[542, "method-1-using-pip"]], "Method 2. Building from source": [[542, "method-2-building-from-source"]], "Start service": [[542, "start-service"]], "Submit task": [[542, "submit-task"]], "Query task status": [[542, "query-task-status"]], "Stop service": [[542, "stop-service"]], "Inspect logs": [[542, "inspect-logs"]], "Manage resource": [[542, "manage-resource"], [547, "manage-resource"], [548, "manage-resource"]], "Node States": [[542, "node-states"]], "Query cluster": [[542, "query-cluster"]], "Add node": [[542, "add-node"]], "Remove node": [[542, "remove-node"]], "Neural Solution API": [[543, "neural-solution-api"]], "Base URL": [[543, "base-url"]], "Endpoints": [[543, "endpoints"]], "GET /": [[543, "get"]], "Description": [[543, "description"], [543, "id1"], [543, "id4"], [543, "id8"], [543, "id12"], [543, "id15"], [543, "id18"], [543, "id21"], [543, "id24"]], "Responses": [[543, "responses"], [543, "id3"], [543, "id7"], [543, "id11"], [543, "id14"], [543, "id17"], [543, "id20"], [543, "id23"], [543, "id26"]], "POST /task/submit": [[543, "post-task-submit"]], "Parameters": [[543, "parameters"], [543, "id5"], [543, "id10"], [543, "id13"]], "GET /task/status/{task_id}": [[543, "get-task-status-task-id"]], "GET /task/log/{task_id}": [[543, "get-task-log-task-id"]], "WebSocket /task/screen/{task_id}": [[543, "websocket-task-screen-task-id"]], "GET /ping": [[543, "get-ping"]], "GET /cluster": [[543, "get-cluster"]], "GET /download/{task_id}": [[543, "get-download-task-id"]], "GET /description": [[543, "get-description"]], "Design Doc for Optimization as a Service [WIP]": [[544, "design-doc-for-optimization-as-a-service-wip"]], "Contents": [[544, "contents"]], "Overview": [[544, "overview"], [566, "overview"]], "Workflow of OaaS": [[544, "workflow-of-oaas"]], "Class definition diagram": [[544, "class-definition-diagram"]], "Extensibility": [[544, "extensibility"]], "Task request description": [[545, "task-request-description"]], "Examples List": [[546, "examples-list"]], "An end-to-end example: quantize a custom model with Neural Solution": [[547, "an-end-to-end-example-quantize-a-custom-model-with-neural-solution"]], "Start the Neural Solution Service": [[547, "start-the-neural-solution-service"], [548, "start-the-neural-solution-service"], [549, "start-the-neural-solution-service"]], "Submit optimization task": [[547, "submit-optimization-task"], [548, "submit-optimization-task"], [549, "submit-optimization-task"]], "Query optimization result": [[547, "query-optimization-result"], [548, "query-optimization-result"], [549, "query-optimization-result"]], "Download optimized model": [[547, "download-optimized-model"], [548, "download-optimized-model"]], "Stop the service": [[547, "stop-the-service"], [548, "stop-the-service"], [549, "stop-the-service"]], "An end-to-end example: quantize a Hugging Face model with Neural Solution": [[548, "an-end-to-end-example-quantize-a-hugging-face-model-with-neural-solution"]], "An end-to-end example: quantize a Hugging Face model with Neural Solution gRPC API": [[549, "an-end-to-end-example-quantize-a-hugging-face-model-with-neural-solution-grpc-api"]], "Client": [[550, "client"]], "Single Objective": [[551, "single-objective"]], "Multiple Objectives": [[551, "multiple-objectives"]], "Objective Support Matrix": [[551, "objective-support-matrix"]], "Get Started with Objective API": [[551, "get-started-with-objective-api"]], "Config Single Objective": [[551, "config-single-objective"]], "Config Multiple Objectives": [[551, "config-multiple-objectives"]], "Optimization Orchestration": [[552, "optimization-orchestration"]], "One-shot": [[552, "one-shot"]], "Orchestration Support Matrix": [[552, "orchestration-support-matrix"]], "Get Started with Orchestration API": [[552, "get-started-with-orchestration-api"]], "Neural Network Pruning": [[553, "neural-network-pruning"]], "Pruning Patterns": [[553, "pruning-patterns"]], "Pruning Criteria": [[553, "pruning-criteria"]], "Pruning Types": [[553, "pruning-types"]], "Pruning Schedules": [[553, "pruning-schedules"]], "Pruning Scope": [[553, "pruning-scope"]], "Sparsity Decay Types": [[553, "sparsity-decay-types"]], "Regularization": [[553, "regularization"]], "Large Language Model Pruning": [[553, "large-language-model-pruning"]], "Pruning Support Matrix": [[553, "pruning-support-matrix"]], "Get Started with Pruning API": [[553, "get-started-with-pruning-api"]], "Training-aware pruning API": [[553, "training-aware-pruning-api"]], "Retrain-free Pruning API": [[553, "retrain-free-pruning-api"]], "Sparse Model Deployment": [[553, "sparse-model-deployment"]], "Pruning with Hyperparameter Optimization": [[553, "pruning-with-hyperparameter-optimization"]], "Full Publications/Events (78)": [[554, "full-publications-events-78"]], "2023 (24)": [[554, "id1"]], "2022 (35)": [[554, "id2"]], "2021 (15)": [[554, "id3"]], "2018 - 2020 (4)": [[554, "id4"]], "Pythonic Style Access for Configurations": [[555, "pythonic-style-access-for-configurations"]], "Pythonic API for User Configurations": [[555, "pythonic-api-for-user-configurations"], [555, "id1"]], "Pythonic API for Framework Configurations": [[555, "pythonic-api-for-framework-configurations"], [555, "id2"]], "Get Started with Pythonic API for Configurations": [[555, "get-started-with-pythonic-api-for-configurations"]], "NAS": [[555, "nas"]], "Quantization Introduction": [[556, "quantization-introduction"]], "Quantization Fundamentals": [[556, "quantization-fundamentals"], [562, "quantization-fundamentals"]], "Quantization Support Matrix": [[556, "quantization-support-matrix"]], "Quantization Scheme in TensorFlow": [[556, "quantization-scheme-in-tensorflow"]], "Quantization Scheme in PyTorch": [[556, "quantization-scheme-in-pytorch"]], "Quantization Scheme in IPEX": [[556, "quantization-scheme-in-ipex"]], "Quantization Scheme in MXNet": [[556, "quantization-scheme-in-mxnet"]], "Quantization Scheme in ONNX Runtime": [[556, "quantization-scheme-in-onnx-runtime"]], "Quantization Approaches": [[556, "quantization-approaches"]], "With or Without Accuracy Aware Tuning": [[556, "with-or-without-accuracy-aware-tuning"]], "Post Training Quantization": [[556, "post-training-quantization"]], "Specify Quantization Rules": [[556, "specify-quantization-rules"]], "Specify Quantization Recipes": [[556, "specify-quantization-recipes"]], "Specify Quantization Backend and Device": [[556, "specify-quantization-backend-and-device"]], "Layer Wise Quantization (LWQ)": [[557, "layer-wise-quantization-lwq"]], "PyTorch framework example": [[557, "pytorch-framework-example"]], "ONNX Runtime framework example": [[557, "onnx-runtime-framework-example"]], "Turn OFF Auto Mixed Precision during Quantization": [[558, "turn-off-auto-mixed-precision-during-quantization"]], "Tensorflow": [[558, "tensorflow"]], "Weight Only Quantization (WOQ)": [[559, "weight-only-quantization-woq"]], "Quantization Capability": [[559, "quantization-capability"]], "Export Compressed Model": [[559, "export-compressed-model"]], "User Code Example": [[559, "user-code-example"]], "WOQ Algorithms Tuning": [[559, "woq-algorithms-tuning"]], "User code example": [[559, "id1"]], "Release": [[560, "release"]], "Release Notes": [[560, "release-notes"]], "Known Issues": [[560, "known-issues"]], "Incompatible Changes": [[560, "incompatible-changes"]], "SigOpt Strategy": [[561, "sigopt-strategy"]], "SigOpt Platform": [[561, "sigopt-platform"]], "Neural Compressor Configuration": [[561, "neural-compressor-configuration"]], "Performance": [[561, "performance"]], "Benefit of SigOpt Strategy": [[561, "benefit-of-sigopt-strategy"]], "Performance Comparison of Different Strategies": [[561, "performance-comparison-of-different-strategies"]], "Smooth Quant": [[562, "smooth-quant"]], "Per-tensor & Per-channel": [[562, "per-tensor-per-channel"]], "Per-tensor example": [[562, "per-tensor-example"]], "Per-channel example": [[562, "per-channel-example"]], "Matmul quantization example": [[562, "matmul-quantization-example"]], "Per-channel limitation": [[562, "per-channel-limitation"]], "SmoothQuant and Our Enhancement": [[562, "smoothquant-and-our-enhancement"]], "SmoothQuant": [[562, "smoothquant"]], "Our enhancement:": [[562, "our-enhancement"]], "Algorithm: Auto-tuning of $\\alpha$.": [[562, "algorithm-auto-tuning-of-alpha"]], "Engineering": [[562, "engineering"]], "Using a fixed alpha": [[562, "using-a-fixed-alpha"]], "Determining the alpha through auto-tuning": [[562, "determining-the-alpha-through-auto-tuning"]], "Auto-tune the alpha for the entire model": [[562, "auto-tune-the-alpha-for-the-entire-model"]], "Auto-tune the alpha for each layer/block": [[562, "auto-tune-the-alpha-for-each-layer-block"]], "Supported Framework Matrix": [[562, "supported-framework-matrix"]], "TensorBoard": [[563, "tensorboard"]], "Get Started with TensorBoard": [[563, "get-started-with-tensorboard"]], "PyTorch TensorBoard": [[563, "pytorch-tensorboard"]], "TensorFlow Tensorboard": [[563, "tensorflow-tensorboard"]], "PyTorch Examples": [[563, "pytorch-examples"]], "TensorFlow Examples": [[563, "tensorflow-examples"]], "Transform": [[564, "transform"]], "Transform Support List": [[564, "transform-support-list"]], "Pytorch": [[564, "pytorch"]], "Tuning Strategies": [[565, "tuning-strategies"]], "Strategy Design": [[565, "strategy-design"]], "Tuning Space": [[565, "tuning-space"]], "Exit Policy": [[565, "exit-policy"]], "Accuracy Criteria": [[565, "accuracy-criteria"]], "Tuning Process": [[565, "tuning-process"]], "Tuning Algorithms": [[565, "tuning-algorithms"]], "Auto": [[565, "auto"]], "Conservative Tuning": [[565, "conservative-tuning"]], "Basic": [[565, "basic"]], "MSE": [[565, "mse"]], "MSE_V2": [[565, "mse-v2"]], "HAWQ_V2": [[565, "hawq-v2"]], "Bayesian": [[565, "bayesian"]], "Exhaustive": [[565, "exhaustive"]], "Random": [[565, "random"]], "SigOpt": [[565, "sigopt"]], "TPE": [[565, "tpe"]], "Distributed Tuning": [[565, "distributed-tuning"]], "Customize a New Tuning Strategy": [[565, "customize-a-new-tuning-strategy"]], "User Guide": [[566, "user-guide"]], "Python-based APIs": [[566, "python-based-apis"]], "Neural Coder (Zero-code Optimization)": [[566, "neural-coder-zero-code-optimization"]], "Advanced Topics": [[566, "advanced-topics"]], "Innovations for Productivity": [[566, "innovations-for-productivity"]], "User YAML Configuration Files": [[567, "user-yaml-configuration-files"]], "Get started with User YAML Files": [[567, "get-started-with-user-yaml-files"]], "Validated Quantization Examples": [[568, "validated-quantization-examples"]], "TensorFlow Models with Intel TensorFlow 2.13.0": [[568, "tensorflow-models-with-intel-tensorflow-2-13-0"]], "PyTorch Models with Torch 2.0.1+cpu in PTQ Mode": [[568, "pytorch-models-with-torch-2-0-1-cpu-in-ptq-mode"]], "PyTorch Models with Torch 2.0.1+cpu in QAT Mode": [[568, "pytorch-models-with-torch-2-0-1-cpu-in-qat-mode"]], "PyTorch Models with Intel\u00ae Extension for PyTorch* 2.0.1+cpu": [[568, "pytorch-models-with-intel-extension-for-pytorch-2-0-1-cpu"]], "PyTorch Models with Torch 2.0.1+cpu in WOQ Mode": [[568, "pytorch-models-with-torch-2-0-1-cpu-in-woq-mode"]], "ONNX Models with ONNX Runtime 1.15.1": [[568, "onnx-models-with-onnx-runtime-1-15-1"]], "ONNX Models with ONNX Runtime 1.15.0 in WOQ Mode": [[568, "onnx-models-with-onnx-runtime-1-15-0-in-woq-mode"]], "Validated Pruning Examples": [[568, "validated-pruning-examples"]], "Validated Knowledge Distillation Examples": [[568, "validated-knowledge-distillation-examples"]], "Validated ONNX QDQ INT8 Models on Multiple Hardware through ONNX Runtime": [[568, "validated-onnx-qdq-int8-models-on-multiple-hardware-through-onnx-runtime"]]}, "indexentries": {"block_mask": [[0, "module-block_mask"]], "module": [[0, "module-block_mask"], [1, "module-neural_compressor.adaptor.adaptor"], [2, "module-neural_compressor.adaptor"], [3, "module-neural_compressor.adaptor.keras"], [4, "module-neural_compressor.adaptor.keras_utils.conv2d"], [5, "module-neural_compressor.adaptor.keras_utils.dense"], [6, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"], [7, "module-neural_compressor.adaptor.keras_utils"], [8, "module-neural_compressor.adaptor.keras_utils.pool2d"], [9, "module-neural_compressor.adaptor.keras_utils.quantizer"], [10, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"], [11, "module-neural_compressor.adaptor.mxnet"], [12, "module-neural_compressor.adaptor.mxnet_utils"], [13, "module-neural_compressor.adaptor.mxnet_utils.util"], [14, "module-neural_compressor.adaptor.onnxrt"], [15, "module-neural_compressor.adaptor.ox_utils.calibration"], [16, "module-neural_compressor.adaptor.ox_utils.calibrator"], [17, "module-neural_compressor.adaptor.ox_utils"], [18, "module-neural_compressor.adaptor.ox_utils.operators.activation"], [19, "module-neural_compressor.adaptor.ox_utils.operators.argmax"], [20, "module-neural_compressor.adaptor.ox_utils.operators.attention"], [21, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"], [22, "module-neural_compressor.adaptor.ox_utils.operators.concat"], [23, "module-neural_compressor.adaptor.ox_utils.operators.conv"], [24, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"], [25, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"], [26, "module-neural_compressor.adaptor.ox_utils.operators.gather"], [27, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"], [28, "module-neural_compressor.adaptor.ox_utils.operators.gemm"], [29, "module-neural_compressor.adaptor.ox_utils.operators"], [30, "module-neural_compressor.adaptor.ox_utils.operators.lstm"], [31, "module-neural_compressor.adaptor.ox_utils.operators.matmul"], [32, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"], [33, "module-neural_compressor.adaptor.ox_utils.operators.norm"], [34, "module-neural_compressor.adaptor.ox_utils.operators.ops"], [35, "module-neural_compressor.adaptor.ox_utils.operators.pad"], [36, "module-neural_compressor.adaptor.ox_utils.operators.pooling"], [37, "module-neural_compressor.adaptor.ox_utils.operators.reduce"], [38, "module-neural_compressor.adaptor.ox_utils.operators.resize"], [39, "module-neural_compressor.adaptor.ox_utils.operators.split"], [40, "module-neural_compressor.adaptor.ox_utils.operators.unary_op"], [41, "module-neural_compressor.adaptor.ox_utils.quantizer"], [42, "module-neural_compressor.adaptor.ox_utils.smooth_quant"], [43, "module-neural_compressor.adaptor.ox_utils.util"], [44, "module-neural_compressor.adaptor.ox_utils.weight_only"], [45, "module-neural_compressor.adaptor.pytorch"], [46, "module-neural_compressor.adaptor.query"], [47, "module-neural_compressor.adaptor.tensorflow"], [48, "module-neural_compressor.adaptor.tf_utils.graph_converter"], [49, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"], [50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"], [51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer"], [52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"], [53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"], [54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"], [55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"], [56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"], [57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"], [58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"], [59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"], [60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"], [61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"], [62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"], [63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"], [64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"], [65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"], [66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"], [67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"], [68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"], [69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"], [70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"], [71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"], [72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"], [73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"], [74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"], [75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"], [76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"], [77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"], [78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"], [79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"], [80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"], [81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"], [82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"], [83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"], [84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"], [85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"], [86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"], [87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"], [88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"], [89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"], [90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"], [91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"], [92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"], [93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"], [94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"], [95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"], [96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"], [97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"], [98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"], [99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"], [100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"], [101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"], [102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"], [103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"], [104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"], [105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"], [106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"], [107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"], [108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"], [109, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"], [110, "module-neural_compressor.adaptor.tf_utils.graph_util"], [111, "module-neural_compressor.adaptor.tf_utils"], [112, "module-neural_compressor.adaptor.tf_utils.quantize_graph"], [113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"], [114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"], [115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"], [116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"], [117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"], [118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"], [119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"], [120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"], [121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"], [122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"], [123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"], [124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"], [125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"], [126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"], [127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"], [128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"], [129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"], [130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"], [131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"], [132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"], [133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"], [134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"], [135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"], [136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"], [137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"], [138, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"], [139, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"], [140, "module-neural_compressor.adaptor.tf_utils.smooth_quant_calibration"], [141, "module-neural_compressor.adaptor.tf_utils.smooth_quant_scaler"], [142, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"], [143, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"], [144, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"], [145, "module-neural_compressor.adaptor.tf_utils.transform_graph"], [146, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"], [147, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"], [148, "module-neural_compressor.adaptor.tf_utils.util"], [149, "module-neural_compressor.adaptor.torch_utils.autoround.autoround"], [150, "module-neural_compressor.adaptor.torch_utils.autoround.export"], [151, "module-neural_compressor.adaptor.torch_utils.autoround"], [152, "module-neural_compressor.adaptor.torch_utils.autoround.model_wrapper"], [153, "module-neural_compressor.adaptor.torch_utils.autoround.sign_sgd"], [154, "module-neural_compressor.adaptor.torch_utils.awq"], [155, "module-neural_compressor.adaptor.torch_utils.bf16_convert"], [156, "module-neural_compressor.adaptor.torch_utils.gptq"], [157, "module-neural_compressor.adaptor.torch_utils.hawq_metric"], [158, "module-neural_compressor.adaptor.torch_utils"], [159, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant"], [160, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle"], [161, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize"], [162, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load"], [163, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.utils"], [164, "module-neural_compressor.adaptor.torch_utils.mixed_precision"], [165, "module-neural_compressor.adaptor.torch_utils.model_wrapper"], [166, "module-neural_compressor.adaptor.torch_utils.pattern_detector"], [167, "module-neural_compressor.adaptor.torch_utils.smooth_quant"], [168, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"], [169, "module-neural_compressor.adaptor.torch_utils.teq"], [170, "module-neural_compressor.adaptor.torch_utils.util"], [171, "module-neural_compressor.adaptor.torch_utils.weight_only"], [172, "module-neural_compressor.algorithm.algorithm"], [173, "module-neural_compressor.algorithm.fast_bias_correction"], [174, "module-neural_compressor.algorithm"], [175, "module-neural_compressor.algorithm.smooth_quant"], [176, "module-neural_compressor.algorithm.weight_correction"], [177, "module-neural_compressor.benchmark"], [178, "module-neural_compressor.common.base_config"], [179, "module-neural_compressor.common.base_tune"], [180, "module-neural_compressor.common"], [181, "module-neural_compressor.common.logger"], [182, "module-neural_compressor.common.utility"], [183, "module-neural_compressor.compression.callbacks"], [184, "module-neural_compressor.compression.distillation.criterions"], [185, "module-neural_compressor.compression.distillation"], [186, "module-neural_compressor.compression.distillation.optimizers"], [187, "module-neural_compressor.compression.distillation.utility"], [188, "module-neural_compressor.compression.hpo"], [189, "module-neural_compressor.compression.hpo.sa_optimizer"], [190, "module-neural_compressor.compression.hpo.search_algorithms"], [191, "module-neural_compressor.compression.hpo.search_space"], [192, "module-neural_compressor.compression"], [193, "module-neural_compressor.compression.pruner.criteria"], [194, "module-neural_compressor.compression.pruner"], [195, "module-neural_compressor.compression.pruner.model_slim.auto_slim"], [196, "module-neural_compressor.compression.pruner.model_slim"], [197, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"], [198, "module-neural_compressor.compression.pruner.model_slim.weight_slim"], [199, "module-neural_compressor.compression.pruner.patterns.base"], [200, "module-neural_compressor.compression.pruner.patterns"], [201, "module-neural_compressor.compression.pruner.patterns.mha"], [202, "module-neural_compressor.compression.pruner.patterns.ninm"], [203, "module-neural_compressor.compression.pruner.patterns.nxm"], [204, "module-neural_compressor.compression.pruner.pruners.base"], [205, "module-neural_compressor.compression.pruner.pruners.basic"], [206, "module-neural_compressor.compression.pruner.pruners.block_mask"], [207, "module-neural_compressor.compression.pruner.pruners"], [208, "module-neural_compressor.compression.pruner.pruners.mha"], [209, "module-neural_compressor.compression.pruner.pruners.pattern_lock"], [210, "module-neural_compressor.compression.pruner.pruners.progressive"], [211, "module-neural_compressor.compression.pruner.pruners.retrain_free"], [212, "module-neural_compressor.compression.pruner.pruners.sparse_gpt"], [213, "module-neural_compressor.compression.pruner.pruning"], [214, "module-neural_compressor.compression.pruner.regs"], [215, "module-neural_compressor.compression.pruner.schedulers"], [216, "module-neural_compressor.compression.pruner.tf_criteria"], [217, "module-neural_compressor.compression.pruner.utils"], [218, "module-neural_compressor.conf.config"], [219, "module-neural_compressor.conf.dotdict"], [220, "module-neural_compressor.conf"], [221, "module-neural_compressor.conf.pythonic_config"], [222, "module-neural_compressor.config"], [223, "module-neural_compressor.contrib"], [224, "module-neural_compressor.contrib.strategy"], [225, "module-neural_compressor.contrib.strategy.sigopt"], [226, "module-neural_compressor.contrib.strategy.tpe"], [227, "module-neural_compressor.data.dataloaders.base_dataloader"], [228, "module-neural_compressor.data.dataloaders.dataloader"], [229, "module-neural_compressor.data.dataloaders.default_dataloader"], [230, "module-neural_compressor.data.dataloaders.fetcher"], [231, "module-neural_compressor.data.dataloaders"], [232, "module-neural_compressor.data.dataloaders.mxnet_dataloader"], [233, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"], [234, "module-neural_compressor.data.dataloaders.pytorch_dataloader"], [235, "module-neural_compressor.data.dataloaders.sampler"], [236, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"], [237, "module-neural_compressor.data.datasets.bert_dataset"], [238, "module-neural_compressor.data.datasets.coco_dataset"], [239, "module-neural_compressor.data.datasets.dataset"], [240, "module-neural_compressor.data.datasets.dummy_dataset"], [241, "module-neural_compressor.data.datasets.dummy_dataset_v2"], [242, "module-neural_compressor.data.datasets.imagenet_dataset"], [243, "module-neural_compressor.data.datasets"], [244, "module-neural_compressor.data.datasets.style_transfer_dataset"], [245, "module-neural_compressor.data.filters.coco_filter"], [246, "module-neural_compressor.data.filters.filter"], [247, "module-neural_compressor.data.filters"], [248, "module-neural_compressor.data"], [249, "module-neural_compressor.data.transforms.coco_transform"], [250, "module-neural_compressor.data.transforms.imagenet_transform"], [251, "module-neural_compressor.data.transforms"], [252, "module-neural_compressor.data.transforms.postprocess"], [253, "module-neural_compressor.data.transforms.tokenization"], [254, "module-neural_compressor.data.transforms.transform"], [255, "module-neural_compressor.experimental.benchmark"], [256, "module-neural_compressor.experimental.common.criterion"], [257, "module-neural_compressor.experimental.common.dataloader"], [258, "module-neural_compressor.experimental.common"], [259, "module-neural_compressor.experimental.common.metric"], [260, "module-neural_compressor.experimental.common.model"], [261, "module-neural_compressor.experimental.common.optimizer"], [262, "module-neural_compressor.experimental.common.postprocess"], [263, "module-neural_compressor.experimental.common.torch_utils"], [264, "module-neural_compressor.experimental.component"], [265, "module-neural_compressor.experimental.compression"], [266, "module-neural_compressor.experimental.contrib"], [267, "module-neural_compressor.experimental.contrib.strategy"], [268, "module-neural_compressor.experimental.contrib.strategy.sigopt"], [269, "module-neural_compressor.experimental.contrib.strategy.tpe"], [270, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"], [271, "module-neural_compressor.experimental.data.dataloaders.dataloader"], [272, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"], [273, "module-neural_compressor.experimental.data.dataloaders.fetcher"], [274, "module-neural_compressor.experimental.data.dataloaders"], [275, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"], [276, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"], [277, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"], [278, "module-neural_compressor.experimental.data.dataloaders.sampler"], [279, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"], [280, "module-neural_compressor.experimental.data.datasets.bert_dataset"], [281, "module-neural_compressor.experimental.data.datasets.coco_dataset"], [282, "module-neural_compressor.experimental.data.datasets.dataset"], [283, "module-neural_compressor.experimental.data.datasets.dummy_dataset"], [284, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"], [285, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"], [286, "module-neural_compressor.experimental.data.datasets"], [287, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"], [288, "module-neural_compressor.experimental.data.filters.coco_filter"], [289, "module-neural_compressor.experimental.data.filters.filter"], [290, "module-neural_compressor.experimental.data.filters"], [291, "module-neural_compressor.experimental.data"], [292, "module-neural_compressor.experimental.data.transforms.imagenet_transform"], [293, "module-neural_compressor.experimental.data.transforms"], [294, "module-neural_compressor.experimental.data.transforms.tokenization"], [295, "module-neural_compressor.experimental.data.transforms.transform"], [296, "module-neural_compressor.experimental.distillation"], [297, "module-neural_compressor.experimental.export"], [298, "module-neural_compressor.experimental.export.qlinear2qdq"], [299, "module-neural_compressor.experimental.export.tf2onnx"], [300, "module-neural_compressor.experimental.export.torch2onnx"], [301, "module-neural_compressor.experimental.graph_optimization"], [302, "module-neural_compressor.experimental"], [303, "module-neural_compressor.experimental.metric.bleu"], [304, "module-neural_compressor.experimental.metric.bleu_util"], [305, "module-neural_compressor.experimental.metric.coco_label_map"], [306, "module-neural_compressor.experimental.metric.coco_tools"], [307, "module-neural_compressor.experimental.metric.evaluate_squad"], [308, "module-neural_compressor.experimental.metric.f1"], [309, "module-neural_compressor.experimental.metric"], [310, "module-neural_compressor.experimental.metric.metric"], [311, "module-neural_compressor.experimental.mixed_precision"], [312, "module-neural_compressor.experimental.model_conversion"], [313, "module-neural_compressor.experimental.nas.basic_nas"], [314, "module-neural_compressor.experimental.nas.dynas"], [315, "module-neural_compressor.experimental.nas"], [316, "module-neural_compressor.experimental.nas.nas"], [317, "module-neural_compressor.experimental.nas.nas_utils"], [318, "module-neural_compressor.experimental.nas.search_algorithms"], [319, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"], [320, "module-neural_compressor.experimental.pruner_legacy.group_lasso"], [321, "module-neural_compressor.experimental.pruner_legacy"], [322, "module-neural_compressor.experimental.pruner_legacy.magnitude"], [323, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"], [324, "module-neural_compressor.experimental.pruner_legacy.pruner"], [325, "module-neural_compressor.experimental.pruning"], [326, "module-neural_compressor.experimental.pruning_recipes"], [327, "module-neural_compressor.experimental.pruning_recipes.patterns"], [328, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"], [329, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"], [330, "module-neural_compressor.experimental.pruning_v2"], [331, "module-neural_compressor.experimental.pytorch_pruner"], [332, "module-neural_compressor.experimental.pytorch_pruner.logger"], [333, "module-neural_compressor.experimental.pytorch_pruner.patterns"], [334, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"], [335, "module-neural_compressor.experimental.pytorch_pruner.pruner"], [336, "module-neural_compressor.experimental.pytorch_pruner.pruning"], [337, "module-neural_compressor.experimental.pytorch_pruner.scheduler"], [338, "module-neural_compressor.experimental.quantization"], [339, "module-neural_compressor.experimental.scheduler"], [340, "module-neural_compressor.experimental.strategy.auto_mixed_precision"], [341, "module-neural_compressor.experimental.strategy.basic"], [342, "module-neural_compressor.experimental.strategy.bayesian"], [343, "module-neural_compressor.experimental.strategy.exhaustive"], [344, "module-neural_compressor.experimental.strategy"], [345, "module-neural_compressor.experimental.strategy.mse"], [346, "module-neural_compressor.experimental.strategy.mse_v2"], [347, "module-neural_compressor.experimental.strategy.random"], [348, "module-neural_compressor.experimental.strategy.strategy"], [349, "module-neural_compressor.experimental.strategy.utils.constant"], [350, "module-neural_compressor.experimental.strategy.utils"], [351, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"], [352, "module-neural_compressor.experimental.strategy.utils.tuning_space"], [353, "module-neural_compressor.experimental.strategy.utils.tuning_structs"], [354, "module-neural_compressor.experimental.strategy.utils.utility"], [355, "module-neural_compressor"], [356, "module-neural_compressor.metric.bleu"], [357, "module-neural_compressor.metric.bleu_util"], [358, "module-neural_compressor.metric.coco_label_map"], [359, "module-neural_compressor.metric.coco_tools"], [360, "module-neural_compressor.metric.evaluate_squad"], [361, "module-neural_compressor.metric.f1"], [362, "module-neural_compressor.metric"], [363, "module-neural_compressor.metric.metric"], [364, "module-neural_compressor.mix_precision"], [365, "module-neural_compressor.model.base_model"], [366, "module-neural_compressor.model"], [367, "module-neural_compressor.model.keras_model"], [368, "module-neural_compressor.model.model"], [369, "module-neural_compressor.model.mxnet_model"], [370, "module-neural_compressor.model.nets_factory"], [371, "module-neural_compressor.model.onnx_model"], [372, "module-neural_compressor.model.tensorflow_model"], [373, "module-neural_compressor.model.torch_model"], [374, "module-neural_compressor.objective"], [375, "module-neural_compressor.profiling"], [376, "module-neural_compressor.profiling.parser.factory"], [377, "module-neural_compressor.profiling.parser"], [378, "module-neural_compressor.profiling.parser.onnx_parser.factory"], [379, "module-neural_compressor.profiling.parser.onnx_parser"], [380, "module-neural_compressor.profiling.parser.onnx_parser.parser"], [381, "module-neural_compressor.profiling.parser.parser"], [382, "module-neural_compressor.profiling.parser.result"], [383, "module-neural_compressor.profiling.parser.tensorflow_parser.factory"], [384, "module-neural_compressor.profiling.parser.tensorflow_parser"], [385, "module-neural_compressor.profiling.parser.tensorflow_parser.parser"], [386, "module-neural_compressor.profiling.profiler.factory"], [387, "module-neural_compressor.profiling.profiler"], [388, "module-neural_compressor.profiling.profiler.onnxrt_profiler.factory"], [389, "module-neural_compressor.profiling.profiler.onnxrt_profiler"], [390, "module-neural_compressor.profiling.profiler.onnxrt_profiler.profiler"], [391, "module-neural_compressor.profiling.profiler.onnxrt_profiler.utils"], [392, "module-neural_compressor.profiling.profiler.profiler"], [393, "module-neural_compressor.profiling.profiler.tensorflow_profiler.factory"], [394, "module-neural_compressor.profiling.profiler.tensorflow_profiler"], [395, "module-neural_compressor.profiling.profiler.tensorflow_profiler.profiler"], [396, "module-neural_compressor.profiling.profiler.tensorflow_profiler.utils"], [397, "module-neural_compressor.quantization"], [398, "module-neural_compressor.strategy.auto"], [399, "module-neural_compressor.strategy.auto_mixed_precision"], [400, "module-neural_compressor.strategy.basic"], [401, "module-neural_compressor.strategy.bayesian"], [402, "module-neural_compressor.strategy.conservative"], [403, "module-neural_compressor.strategy.exhaustive"], [404, "module-neural_compressor.strategy.hawq_v2"], [405, "module-neural_compressor.strategy"], [406, "module-neural_compressor.strategy.mse"], [407, "module-neural_compressor.strategy.mse_v2"], [408, "module-neural_compressor.strategy.random"], [409, "module-neural_compressor.strategy.strategy"], [410, "module-neural_compressor.strategy.utils.constant"], [411, "module-neural_compressor.strategy.utils"], [412, "module-neural_compressor.strategy.utils.tuning_sampler"], [413, "module-neural_compressor.strategy.utils.tuning_space"], [414, "module-neural_compressor.strategy.utils.tuning_structs"], [415, "module-neural_compressor.strategy.utils.utility"], [416, "module-neural_compressor.template.api_doc_example"], [417, "module-neural_compressor.template"], [418, "module-neural_compressor.tensorflow.algorithms"], [419, "module-neural_compressor.tensorflow.algorithms.static_quantize"], [420, "module-neural_compressor.tensorflow.algorithms.static_quantize.keras"], [421, "module-neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.conv2d"], [422, "module-neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.dense"], [423, "module-neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.depthwise_conv2d"], [424, "module-neural_compressor.tensorflow.algorithms.static_quantize.keras_utils"], [425, "module-neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.pool2d"], [426, "module-neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.quantizer"], [427, "module-neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.separable_conv2d"], [428, "module-neural_compressor.tensorflow.algorithms.static_quantize.quantize_entry"], [429, "module-neural_compressor.tensorflow"], [430, "module-neural_compressor.tensorflow.quantization.config"], [431, "module-neural_compressor.tensorflow.quantization"], [432, "module-neural_compressor.tensorflow.quantization.quantize"], [433, "module-neural_compressor.tensorflow.utils"], [434, "module-neural_compressor.torch.algorithms"], [435, "module-neural_compressor.torch.algorithms.weight_only.gptq"], [436, "module-neural_compressor.torch.algorithms.weight_only"], [437, "module-neural_compressor.torch.algorithms.weight_only.rtn"], [438, "module-neural_compressor.torch.algorithms.weight_only_algos"], [439, "module-neural_compressor.torch.amp.autocast"], [440, "module-neural_compressor.torch.amp.fp8.functions"], [441, "module-neural_compressor.torch.amp.fp8"], [442, "module-neural_compressor.torch.amp"], [443, "module-neural_compressor.torch"], [444, "module-neural_compressor.torch.quantization.config"], [445, "module-neural_compressor.torch.quantization.fp8"], [446, "module-neural_compressor.torch.quantization.fp8.modules"], [447, "module-neural_compressor.torch.quantization.fp8.observer"], [448, "module-neural_compressor.torch.quantization.fp8.quantization_impl"], [449, "module-neural_compressor.torch.quantization"], [450, "module-neural_compressor.torch.quantization.layers"], [451, "module-neural_compressor.torch.quantization.quantize"], [452, "module-neural_compressor.torch.tune"], [453, "module-neural_compressor.torch.utils.constants"], [454, "module-neural_compressor.torch.utils"], [455, "module-neural_compressor.torch.utils.utility"], [456, "module-neural_compressor.training"], [457, "module-neural_compressor.utils.collect_layer_histogram"], [458, "module-neural_compressor.utils.constant"], [459, "module-neural_compressor.utils.create_obj_from_config"], [460, "module-neural_compressor.utils"], [461, "module-neural_compressor.utils.kl_divergence"], [462, "module-neural_compressor.utils.load_huggingface"], [463, "module-neural_compressor.utils.logger"], [464, "module-neural_compressor.utils.neural_insights_utils"], [465, "module-neural_compressor.utils.options"], [466, "module-neural_compressor.utils.pytorch"], [467, "module-neural_compressor.utils.utility"], [468, "module-neural_compressor.utils.weights_details"], [469, "module-neural_compressor.version"]], "adaptor (class in neural_compressor.adaptor.adaptor)": [[1, "neural_compressor.adaptor.adaptor.Adaptor"]], "adaptor_registry() (in module neural_compressor.adaptor.adaptor)": [[1, "neural_compressor.adaptor.adaptor.adaptor_registry"]], "neural_compressor.adaptor.adaptor": [[1, "module-neural_compressor.adaptor.adaptor"]], "neural_compressor.adaptor": [[2, "module-neural_compressor.adaptor"]], "kerasadaptor (class in neural_compressor.adaptor.keras)": [[3, "neural_compressor.adaptor.keras.KerasAdaptor"]], "kerasquery (class in neural_compressor.adaptor.keras)": [[3, "neural_compressor.adaptor.keras.KerasQuery"]], "neural_compressor.adaptor.keras": [[3, "module-neural_compressor.adaptor.keras"]], "neural_compressor.adaptor.keras_utils.conv2d": [[4, "module-neural_compressor.adaptor.keras_utils.conv2d"]], "neural_compressor.adaptor.keras_utils.dense": [[5, "module-neural_compressor.adaptor.keras_utils.dense"]], "neural_compressor.adaptor.keras_utils.depthwise_conv2d": [[6, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"]], "neural_compressor.adaptor.keras_utils": [[7, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.pool2d": [[8, "module-neural_compressor.adaptor.keras_utils.pool2d"]], "neural_compressor.adaptor.keras_utils.quantizer": [[9, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "neural_compressor.adaptor.keras_utils.separable_conv2d": [[10, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"]], "mxnetquery (class in neural_compressor.adaptor.mxnet)": [[11, "neural_compressor.adaptor.mxnet.MXNetQuery"]], "mxnetadaptor (class in neural_compressor.adaptor.mxnet)": [[11, "neural_compressor.adaptor.mxnet.MxNetAdaptor"]], "neural_compressor.adaptor.mxnet": [[11, "module-neural_compressor.adaptor.mxnet"]], "neural_compressor.adaptor.mxnet_utils": [[12, "module-neural_compressor.adaptor.mxnet_utils"]], "calibcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CalibCollector"]], "calibdata (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CalibData"]], "collectorbase (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CollectorBase"]], "dataiterloader (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.DataIterLoader"]], "dataloaderwrap (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.DataLoaderWrap"]], "namecollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.NameCollector"]], "optype (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.OpType"]], "tensorcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.TensorCollector"]], "amp_convert() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.amp_convert"]], "calib_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.calib_model"]], "check_mx_version() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.check_mx_version"]], "combine_capabilities() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.combine_capabilities"]], "create_data_example() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.create_data_example"]], "distribute_calib_tensors() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.distribute_calib_tensors"]], "ensure_list() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.ensure_list"]], "fuse() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.fuse"]], "get_framework_name() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.get_framework_name"]], "is_model_quantized() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.is_model_quantized"]], "isiterable() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.isiterable"]], "make_module() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.make_module"]], "make_nc_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.make_nc_model"]], "make_symbol_block() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.make_symbol_block"]], "ndarray_to_device() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.ndarray_to_device"]], "neural_compressor.adaptor.mxnet_utils.util": [[13, "module-neural_compressor.adaptor.mxnet_utils.util"]], "parse_tune_config() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.parse_tune_config"]], "prepare_dataloader() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.prepare_dataloader"]], "prepare_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.prepare_model"]], "prepare_model_data() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.prepare_model_data"]], "quantize_sym_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.quantize_sym_model"]], "query_quantizable_nodes() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.query_quantizable_nodes"]], "run_forward() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.run_forward"]], "onnxrtquery (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRTQuery"]], "onnxrt_integeropsadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_IntegerOpsAdaptor"]], "onnxrt_qdqadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_QDQAdaptor"]], "onnxrt_qlinearopsadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_QLinearOpsAdaptor"]], "onnxrt_weightonlyadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_WeightOnlyAdaptor"]], "onnxruntimeadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor"]], "neural_compressor.adaptor.onnxrt": [[14, "module-neural_compressor.adaptor.onnxrt"]], "onnxrtaugment (class in neural_compressor.adaptor.ox_utils.calibration)": [[15, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment"]], "neural_compressor.adaptor.ox_utils.calibration": [[15, "module-neural_compressor.adaptor.ox_utils.calibration"]], "calibratorbase (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.CalibratorBase"]], "histogramcollector (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.HistogramCollector"]], "klcalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.KLCalibrator"]], "minmaxcalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.MinMaxCalibrator"]], "percentilecalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.PercentileCalibrator"]], "calib_registry() (in module neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.calib_registry"]], "neural_compressor.adaptor.ox_utils.calibrator": [[16, "module-neural_compressor.adaptor.ox_utils.calibrator"]], "smooth_distribution() (in module neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.smooth_distribution"]], "neural_compressor.adaptor.ox_utils": [[17, "module-neural_compressor.adaptor.ox_utils"]], "activationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator"]], "float16activationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.Float16ActivationOperator"]], "qactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.QActivationOperator"]], "removableactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.RemovableActivationOperator"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[18, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "argmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[19, "neural_compressor.adaptor.ox_utils.operators.argmax.ArgMaxOperator"]], "qargmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[19, "neural_compressor.adaptor.ox_utils.operators.argmax.QArgMaxOperator"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[19, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "attentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[20, "neural_compressor.adaptor.ox_utils.operators.attention.AttentionOperator"]], "qattentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[20, "neural_compressor.adaptor.ox_utils.operators.attention.QAttentionOperator"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[20, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "binarydirect8bitoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[21, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryDirect8BitOperator"]], "binaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[21, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator"]], "float16binaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[21, "neural_compressor.adaptor.ox_utils.operators.binary_op.Float16BinaryOperator"]], "qbinaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[21, "neural_compressor.adaptor.ox_utils.operators.binary_op.QBinaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[21, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "concatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[22, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator"]], "qconcatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[22, "neural_compressor.adaptor.ox_utils.operators.concat.QConcatOperator"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[22, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "convoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[23, "neural_compressor.adaptor.ox_utils.operators.conv.ConvOperator"]], "qconvoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[23, "neural_compressor.adaptor.ox_utils.operators.conv.QConvOperator"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[23, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "direct8bitoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[24, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator"]], "qdirectoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[24, "neural_compressor.adaptor.ox_utils.operators.direct_q8.QDirectOperator"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[24, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "embedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[25, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.EmbedLayerNormalizationOperator"]], "qembedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[25, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.QEmbedLayerNormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[25, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "gatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[26, "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator"]], "qgatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[26, "neural_compressor.adaptor.ox_utils.operators.gather.QGatherOperator"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[26, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "globalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[27, "neural_compressor.adaptor.ox_utils.operators.gavgpool.GlobalAveragePoolOperator"]], "qglobalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[27, "neural_compressor.adaptor.ox_utils.operators.gavgpool.QGlobalAveragePoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[27, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "gemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[28, "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator"]], "qgemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[28, "neural_compressor.adaptor.ox_utils.operators.gemm.QGemmOperator"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[28, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[29, "module-neural_compressor.adaptor.ox_utils.operators"]], "lstmoperator (class in neural_compressor.adaptor.ox_utils.operators.lstm)": [[30, "neural_compressor.adaptor.ox_utils.operators.lstm.LSTMOperator"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[30, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "fusedmatmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[31, "neural_compressor.adaptor.ox_utils.operators.matmul.FusedMatMulOperator"]], "matmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[31, "neural_compressor.adaptor.ox_utils.operators.matmul.MatMulOperator"]], "qmatmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[31, "neural_compressor.adaptor.ox_utils.operators.matmul.QMatMulOperator"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[31, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "maxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[32, "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator"]], "qmaxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[32, "neural_compressor.adaptor.ox_utils.operators.maxpool.QMaxPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[32, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "batchnormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.norm)": [[33, "neural_compressor.adaptor.ox_utils.operators.norm.BatchNormalizationOperator"]], "normalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.norm)": [[33, "neural_compressor.adaptor.ox_utils.operators.norm.NormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.norm": [[33, "module-neural_compressor.adaptor.ox_utils.operators.norm"]], "operator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.Operator"]], "qoperator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.QOperator"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[34, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "op_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.op_registry"]], "qop_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.qop_registry"]], "padoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[35, "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator"]], "qpadoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[35, "neural_compressor.adaptor.ox_utils.operators.pad.QPadOperator"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[35, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "pooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[36, "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator"]], "qpooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[36, "neural_compressor.adaptor.ox_utils.operators.pooling.QPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[36, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "reduceminmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.reduce)": [[37, "neural_compressor.adaptor.ox_utils.operators.reduce.ReduceMinMaxOperator"]], "reduceoperator (class in neural_compressor.adaptor.ox_utils.operators.reduce)": [[37, "neural_compressor.adaptor.ox_utils.operators.reduce.ReduceOperator"]], "neural_compressor.adaptor.ox_utils.operators.reduce": [[37, "module-neural_compressor.adaptor.ox_utils.operators.reduce"]], "qresizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[38, "neural_compressor.adaptor.ox_utils.operators.resize.QResizeOperator"]], "resizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[38, "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[38, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "qsplitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[39, "neural_compressor.adaptor.ox_utils.operators.split.QSplitOperator"]], "splitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[39, "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator"]], "neural_compressor.adaptor.ox_utils.operators.split": [[39, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "unarydirect8bitoperator (class in neural_compressor.adaptor.ox_utils.operators.unary_op)": [[40, "neural_compressor.adaptor.ox_utils.operators.unary_op.UnaryDirect8BitOperator"]], "unaryoperator (class in neural_compressor.adaptor.ox_utils.operators.unary_op)": [[40, "neural_compressor.adaptor.ox_utils.operators.unary_op.UnaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.unary_op": [[40, "module-neural_compressor.adaptor.ox_utils.operators.unary_op"]], "quantizer (class in neural_compressor.adaptor.ox_utils.quantizer)": [[41, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer"]], "neural_compressor.adaptor.ox_utils.quantizer": [[41, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "ortsmoothquant (class in neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.ORTSmoothQuant"]], "get_quant_dequant_output() (in module neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.get_quant_dequant_output"]], "make_sub_graph() (in module neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.make_sub_graph"]], "neural_compressor.adaptor.ox_utils.smooth_quant": [[42, "module-neural_compressor.adaptor.ox_utils.smooth_quant"]], "quant_dequant_data() (in module neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.quant_dequant_data"]], "quantformat (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantFormat"]], "quanttype (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantType"]], "quantizationmode (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizationMode"]], "quantizedinitializer (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizedInitializer"]], "quantizedvalue (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizedValue"]], "quantizedvaluetype (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizedValueType"]], "valueinfo (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.ValueInfo"]], "attribute_to_kwarg() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.attribute_to_kwarg"]], "calculate_scale_zp() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.calculate_scale_zp"]], "cast_tensor() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.cast_tensor"]], "collate_preds() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.collate_preds"]], "dequantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.dequantize_data"]], "dequantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.dequantize_data_with_scale_zero"]], "dtype_to_name() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.dtype_to_name"]], "find_by_name() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.find_by_name"]], "float_to_bfloat16() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.float_to_bfloat16"]], "float_to_float16() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.float_to_float16"]], "get_node_original_name() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.get_node_original_name"]], "infer_shapes() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.infer_shapes"]], "is_b_transposed() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.is_B_transposed"]], "make_dquant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.make_dquant_node"]], "make_quant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.make_quant_node"]], "neural_compressor.adaptor.ox_utils.util": [[43, "module-neural_compressor.adaptor.ox_utils.util"]], "quantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_data"]], "quantize_data_per_channel() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_data_per_channel"]], "quantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_data_with_scale_zero"]], "quantize_nparray() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_nparray"]], "remove_init_from_model_input() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.remove_init_from_model_input"]], "simple_progress_bar() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.simple_progress_bar"]], "split_shared_bias() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.split_shared_bias"]], "to_numpy() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.to_numpy"]], "trt_env_setup() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.trt_env_setup"]], "apply_awq_clip() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.apply_awq_clip"]], "apply_awq_scale() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.apply_awq_scale"]], "awq_quantize() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.awq_quantize"]], "get_blob_size() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.get_blob_size"]], "get_weight_scale() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.get_weight_scale"]], "gptq() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.gptq"]], "gptq_quantize() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.gptq_quantize"]], "make_matmul_weight_only_node() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.make_matmul_weight_only_node"]], "neural_compressor.adaptor.ox_utils.weight_only": [[44, "module-neural_compressor.adaptor.ox_utils.weight_only"]], "pad_tensor() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.pad_tensor"]], "prepare_inputs() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.prepare_inputs"]], "qdq_tensor() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.qdq_tensor"]], "quant_tensor() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.quant_tensor"]], "rtn_quantize() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.rtn_quantize"]], "pytorchadaptor (class in neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.PyTorchAdaptor"]], "pytorchquery (class in neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.PyTorchQuery"]], "pytorchweightonlyadaptor (class in neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.PyTorchWeightOnlyAdaptor"]], "pytorch_fxadaptor (class in neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor"]], "pytorch_ipexadaptor (class in neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor"]], "templateadaptor (class in neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.TemplateAdaptor"]], "get_ops_recursively() (in module neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.get_ops_recursively"]], "neural_compressor.adaptor.pytorch": [[45, "module-neural_compressor.adaptor.pytorch"]], "querybackendcapability (class in neural_compressor.adaptor.query)": [[46, "neural_compressor.adaptor.query.QueryBackendCapability"]], "neural_compressor.adaptor.query": [[46, "module-neural_compressor.adaptor.query"]], "tensorflowadaptor (class in neural_compressor.adaptor.tensorflow)": [[47, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor"]], "tensorflowquery (class in neural_compressor.adaptor.tensorflow)": [[47, "neural_compressor.adaptor.tensorflow.TensorflowQuery"]], "tensorflow_itexadaptor (class in neural_compressor.adaptor.tensorflow)": [[47, "neural_compressor.adaptor.tensorflow.Tensorflow_ITEXAdaptor"]], "neural_compressor.adaptor.tensorflow": [[47, "module-neural_compressor.adaptor.tensorflow"]], "graphconverter (class in neural_compressor.adaptor.tf_utils.graph_converter)": [[48, "neural_compressor.adaptor.tf_utils.graph_converter.GraphConverter"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[48, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "graphconverterwithoutcalib (class in neural_compressor.adaptor.tf_utils.graph_converter_without_calib)": [[49, "neural_compressor.adaptor.tf_utils.graph_converter_without_calib.GraphConverterWithoutCalib"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[49, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "bf16convert (class in neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert)": [[50, "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.BF16Convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "dequantizecastoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer)": [[51, "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer.DequantizeCastOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer": [[51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "convertaddtobiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd)": [[53, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "convertlayoutoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout)": [[54, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "convertleakyreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu)": [[55, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "convertnantorandom (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random)": [[56, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "convertplaceholdertoconst (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const)": [[57, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "dilatedcontraction (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction)": [[58, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.DilatedContraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "injectdummybiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd)": [[59, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "expanddimsoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer)": [[60, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "fetchweightfromreshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape)": [[61, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "foldbatchnormnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm)": [[62, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "graphfoldconstantoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant)": [[63, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "fusebiasaddandaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add)": [[64, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "fusecolumnwisemuloptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul)": [[65, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "fuseconvwithmathoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "fusedecomposedbnoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.FuseDecomposedBNOptimizer"]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.bypass_reshape"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.values_from_const"]], "fusedecomposedinoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.FuseDecomposedINOptimizer"]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.bypass_reshape"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.values_from_const"]], "fusegeluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu)": [[69, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "fuselayernormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_name_from_input"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.values_from_const"]], "fusepadwithconv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv)": [[71, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "fusepadwithfp32conv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv)": [[72, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "fusetransposereshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose)": [[73, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "graphcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer)": [[74, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "grappleroptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass)": [[75, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "insertprintminmaxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node)": [[77, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "movesqueezeafterreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu)": [[78, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "preoptimization (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize)": [[79, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.PreOptimization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "removetrainingnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes)": [[80, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "renamebatchnormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm)": [[81, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "splitsharedinputoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input)": [[82, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "stripequivalentnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes)": [[83, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "stripunusednodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes)": [[84, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "switchoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer)": [[85, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "graphrewriterbase (class in neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base)": [[86, "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "freezefakequantopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "freezevaluetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value)": [[89, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "freezevaluewithoutcalibtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "fuseconvredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "fuseconvrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize)": [[92, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "fusematmulredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "fusematmulrequantizedequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer"]], "fusematmulrequantizedequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer"]], "fusematmulrequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer"]], "fusematmulrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "metainfochangingmemopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "posthostconstconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "postcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "quantizedrnnconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "scalepropagationtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"]], "onnxgraph (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph)": [[102, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"]], "onnxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"]], "onnxopschema (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.OnnxOpSchema"]], "get_max_supported_opset_version() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.get_max_supported_opset_version"]], "get_schema() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.get_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"]], "seqtype (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.SeqType"]], "add_port_to_name() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.add_port_to_name"]], "are_shapes_equal() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.are_shapes_equal"]], "assert_error() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.assert_error"]], "compute_const_folding_using_tf() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.compute_const_folding_using_tf"]], "convert_tensorflow_tensor_to_onnx() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.convert_tensorflow_tensor_to_onnx"]], "find_opset() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.find_opset"]], "get_index_from_strided_slice_of_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_index_from_strided_slice_of_shape"]], "get_subgraphs_from_onnx() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_subgraphs_from_onnx"]], "get_tensorflow_node_attr() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_node_attr"]], "get_tensorflow_node_shape_attr() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_node_shape_attr"]], "get_tensorflow_tensor_data() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_tensor_data"]], "get_tensorflow_tensor_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_tensor_shape"]], "infer_onnx_shape_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.infer_onnx_shape_dtype"]], "initialize_name_counter() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.initialize_name_counter"]], "is_list_or_tuple() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.is_list_or_tuple"]], "is_onnx_domain() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.is_onnx_domain"]], "make_onnx_inputs_outputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.make_onnx_inputs_outputs"]], "make_onnx_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.make_onnx_shape"]], "map_numpy_to_onnx_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_numpy_to_onnx_dtype"]], "map_onnx_to_numpy_type() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_onnx_to_numpy_type"]], "map_tensorflow_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_tensorflow_dtype"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"]], "read_tensorflow_node_attrs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.read_tensorflow_node_attrs"]], "save_protobuf() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.save_protobuf"]], "set_name() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.set_name"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "generategraphwithqdqpattern (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern)": [[107, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "mergeduplicatedqdqoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq)": [[108, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "shareqdqforitexypatternoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern)": [[109, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[109, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "graphanalyzer (class in neural_compressor.adaptor.tf_utils.graph_util)": [[110, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer"]], "graphrewriterhelper (class in neural_compressor.adaptor.tf_utils.graph_util)": [[110, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper"]], "neural_compressor.adaptor.tf_utils.graph_util": [[110, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "neural_compressor.adaptor.tf_utils": [[111, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[112, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "fakequantize (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[113, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantize"]], "fakequantizebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[113, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "quantizeconfig (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config)": [[115, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "init_quantize_config() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[116, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.init_quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "qat_clone_function() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[116, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "config_quantizable_layers() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer)": [[118, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer.config_quantizable_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "quantizelayeradd (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add)": [[119, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add.QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "quantizelayerbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base)": [[120, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base.QuantizeLayerBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "quantizelayerbatchnormalization (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn.QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "quantizewrapper (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper"]], "quantizewrapperbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn)": [[123, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2)": [[124, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv)": [[125, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "fusenodestartwithdeconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv)": [[126, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "fusenodestartwithfusedinstancenorm (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in)": [[127, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul)": [[128, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling)": [[129, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "optimizeqdqgraph (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq)": [[131, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "quantizegraphbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[132, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase"]], "quantizenodebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[132, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2)": [[134, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "quantizegraphforintel (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu)": [[136, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul)": [[137, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling)": [[138, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[138, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "quantizegraphhelper (class in neural_compressor.adaptor.tf_utils.quantize_graph_common)": [[139, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[139, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "smoothquantcalibration (class in neural_compressor.adaptor.tf_utils.smooth_quant_calibration)": [[140, "neural_compressor.adaptor.tf_utils.smooth_quant_calibration.SmoothQuantCalibration"]], "smoothquantcalibrationllm (class in neural_compressor.adaptor.tf_utils.smooth_quant_calibration)": [[140, "neural_compressor.adaptor.tf_utils.smooth_quant_calibration.SmoothQuantCalibrationLLM"]], "neural_compressor.adaptor.tf_utils.smooth_quant_calibration": [[140, "module-neural_compressor.adaptor.tf_utils.smooth_quant_calibration"]], "smoothquantscaler (class in neural_compressor.adaptor.tf_utils.smooth_quant_scaler)": [[141, "neural_compressor.adaptor.tf_utils.smooth_quant_scaler.SmoothQuantScaler"]], "smoothquantscalerllm (class in neural_compressor.adaptor.tf_utils.smooth_quant_scaler)": [[141, "neural_compressor.adaptor.tf_utils.smooth_quant_scaler.SmoothQuantScalerLLM"]], "neural_compressor.adaptor.tf_utils.smooth_quant_scaler": [[141, "module-neural_compressor.adaptor.tf_utils.smooth_quant_scaler"]], "tensorflowqdqtoonnxqdqconverter (class in neural_compressor.adaptor.tf_utils.tf2onnx_converter)": [[142, "neural_compressor.adaptor.tf_utils.tf2onnx_converter.TensorflowQDQToOnnxQDQConverter"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[142, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"]], "biascorrection (class in neural_compressor.adaptor.tf_utils.transform_graph.bias_correction)": [[143, "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.BiasCorrection"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[143, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "graphtransformbase (class in neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base)": [[144, "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[144, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[145, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "insertlogging (class in neural_compressor.adaptor.tf_utils.transform_graph.insert_logging)": [[146, "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.InsertLogging"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[146, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "rerangequantizedconcat (class in neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat)": [[147, "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[147, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "apply_inlining() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.apply_inlining"]], "collate_tf_preds() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.collate_tf_preds"]], "construct_function_from_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.construct_function_from_graph_def"]], "disable_random() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.disable_random"]], "fix_ref_type_of_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.fix_ref_type_of_graph_def"]], "generate_feed_dict() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.generate_feed_dict"]], "get_estimator_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_estimator_graph"]], "get_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_graph_def"]], "get_input_output_node_names() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_input_output_node_names"]], "get_model_input_shape() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_model_input_shape"]], "get_tensor_by_name() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_tensor_by_name"]], "get_tensor_val_from_graph_node() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_tensor_val_from_graph_node"]], "get_weight_from_input_tensor() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_weight_from_input_tensor"]], "int8_node_name_reverse() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.int8_node_name_reverse"]], "is_ckpt_format() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.is_ckpt_format"]], "is_saved_model_format() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.is_saved_model_format"]], "iterator_sess_run() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.iterator_sess_run"]], "neural_compressor.adaptor.tf_utils.util": [[148, "module-neural_compressor.adaptor.tf_utils.util"]], "parse_saved_model() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.parse_saved_model"]], "read_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.read_graph"]], "reconstruct_saved_model() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.reconstruct_saved_model"]], "strip_equivalent_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.strip_equivalent_nodes"]], "strip_unused_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.strip_unused_nodes"]], "tf_diagnosis_helper() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.tf_diagnosis_helper"]], "version1_eq_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.version1_lte_version2"]], "write_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.write_graph"]], "autoadamround (class in neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.AutoAdamRound"]], "autooptround (class in neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.AutoOPTRound"]], "autoround (class in neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.AutoRound"]], "saveinputs (class in neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.SaveInputs"]], "wrappermultiblock (class in neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.WrapperMultiblock"]], "block_forward() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.block_forward"]], "check_is_cpu() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.check_is_cpu"]], "collect_minmax_scale() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.collect_minmax_scale"]], "collect_round_v() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.collect_round_v"]], "get_batch_dim() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.get_batch_dim"]], "get_block_names() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.get_block_names"]], "get_dataloader() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.get_dataloader"]], "get_module() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.get_module"]], "get_scale_shape() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.get_scale_shape"]], "get_tokenizer_function() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.get_tokenizer_function"]], "move_input_to_device() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.move_input_to_device"]], "neural_compressor.adaptor.torch_utils.autoround.autoround": [[149, "module-neural_compressor.adaptor.torch_utils.autoround.autoround"]], "quant_weight() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.quant_weight"]], "quant_weight_actor() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.quant_weight_actor"]], "quant_weight_asym() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.quant_weight_asym"]], "quant_weight_sym() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.quant_weight_sym"]], "quant_weight_w_scale() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.quant_weight_w_scale"]], "round_ste() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.round_ste"]], "sampling_inputs() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.sampling_inputs"]], "set_module() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.set_module"]], "unwrapper_block() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.unwrapper_block"]], "wrapper_block() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.wrapper_block"]], "export_compressed_model() (in module neural_compressor.adaptor.torch_utils.autoround.export)": [[150, "neural_compressor.adaptor.torch_utils.autoround.export.export_compressed_model"]], "neural_compressor.adaptor.torch_utils.autoround.export": [[150, "module-neural_compressor.adaptor.torch_utils.autoround.export"]], "neural_compressor.adaptor.torch_utils.autoround": [[151, "module-neural_compressor.adaptor.torch_utils.autoround"]], "neural_compressor.adaptor.torch_utils.autoround.model_wrapper": [[152, "module-neural_compressor.adaptor.torch_utils.autoround.model_wrapper"]], "sgd (class in neural_compressor.adaptor.torch_utils.autoround.sign_sgd)": [[153, "neural_compressor.adaptor.torch_utils.autoround.sign_sgd.SGD"]], "neural_compressor.adaptor.torch_utils.autoround.sign_sgd": [[153, "module-neural_compressor.adaptor.torch_utils.autoround.sign_sgd"]], "sgd() (in module neural_compressor.adaptor.torch_utils.autoround.sign_sgd)": [[153, "neural_compressor.adaptor.torch_utils.autoround.sign_sgd.sgd"]], "actawareweightquant (class in neural_compressor.adaptor.torch_utils.awq)": [[154, "neural_compressor.adaptor.torch_utils.awq.ActAwareWeightQuant"]], "neural_compressor.adaptor.torch_utils.awq": [[154, "module-neural_compressor.adaptor.torch_utils.awq"]], "bf16modulewrapper (class in neural_compressor.adaptor.torch_utils.bf16_convert)": [[155, "neural_compressor.adaptor.torch_utils.bf16_convert.BF16ModuleWrapper"]], "convert() (in module neural_compressor.adaptor.torch_utils.bf16_convert)": [[155, "neural_compressor.adaptor.torch_utils.bf16_convert.Convert"]], "bf16_symbolic_trace() (in module neural_compressor.adaptor.torch_utils.bf16_convert)": [[155, "neural_compressor.adaptor.torch_utils.bf16_convert.bf16_symbolic_trace"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[155, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "gptq (class in neural_compressor.adaptor.torch_utils.gptq)": [[156, "neural_compressor.adaptor.torch_utils.gptq.GPTQ"]], "gptquantizer (class in neural_compressor.adaptor.torch_utils.gptq)": [[156, "neural_compressor.adaptor.torch_utils.gptq.GPTQuantizer"]], "find_layers() (in module neural_compressor.adaptor.torch_utils.gptq)": [[156, "neural_compressor.adaptor.torch_utils.gptq.find_layers"]], "find_layers_name() (in module neural_compressor.adaptor.torch_utils.gptq)": [[156, "neural_compressor.adaptor.torch_utils.gptq.find_layers_name"]], "is_leaf() (in module neural_compressor.adaptor.torch_utils.gptq)": [[156, "neural_compressor.adaptor.torch_utils.gptq.is_leaf"]], "log_quantizable_layers_per_transformer() (in module neural_compressor.adaptor.torch_utils.gptq)": [[156, "neural_compressor.adaptor.torch_utils.gptq.log_quantizable_layers_per_transformer"]], "neural_compressor.adaptor.torch_utils.gptq": [[156, "module-neural_compressor.adaptor.torch_utils.gptq"]], "quantize() (in module neural_compressor.adaptor.torch_utils.gptq)": [[156, "neural_compressor.adaptor.torch_utils.gptq.quantize"]], "trace_gptq_target_blocks() (in module neural_compressor.adaptor.torch_utils.gptq)": [[156, "neural_compressor.adaptor.torch_utils.gptq.trace_gptq_target_blocks"]], "hessiantrace (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[157, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace"]], "node_collector (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[157, "neural_compressor.adaptor.torch_utils.hawq_metric.Node_collector"]], "compare_weights() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[157, "neural_compressor.adaptor.torch_utils.hawq_metric.compare_weights"]], "hawq_top() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[157, "neural_compressor.adaptor.torch_utils.hawq_metric.hawq_top"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[157, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[158, "module-neural_compressor.adaptor.torch_utils"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant": [[159, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant"]], "pickleerror": [[160, "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle.PickleError"]], "picklingerror": [[160, "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle.PicklingError"]], "unpicklingerror": [[160, "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle.UnpicklingError"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle": [[160, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle"]], "layerwisequant (class in neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize)": [[161, "neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize.LayerWiseQuant"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize": [[161, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize"]], "load() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load)": [[162, "neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load.load"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load": [[162, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load"]], "dowload_hf_model() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[163, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.dowload_hf_model"]], "get_children() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[163, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.get_children"]], "get_module() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[163, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.get_module"]], "get_named_children() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[163, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.get_named_children"]], "get_super_module_by_name() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[163, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.get_super_module_by_name"]], "load_empty_model() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[163, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.load_empty_model"]], "load_layer_wise_quantized_model() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[163, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.load_layer_wise_quantized_model"]], "load_tensor() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[163, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.load_tensor"]], "load_tensor_from_shard() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[163, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.load_tensor_from_shard"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils": [[163, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.utils"]], "update_module() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[163, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.update_module"]], "ipex_mixed_precision() (in module neural_compressor.adaptor.torch_utils.mixed_precision)": [[164, "neural_compressor.adaptor.torch_utils.mixed_precision.ipex_mixed_precision"]], "neural_compressor.adaptor.torch_utils.mixed_precision": [[164, "module-neural_compressor.adaptor.torch_utils.mixed_precision"]], "fakeaffinetensorquantfunction (class in neural_compressor.adaptor.torch_utils.model_wrapper)": [[165, "neural_compressor.adaptor.torch_utils.model_wrapper.FakeAffineTensorQuantFunction"]], "mullinear (class in neural_compressor.adaptor.torch_utils.model_wrapper)": [[165, "neural_compressor.adaptor.torch_utils.model_wrapper.MulLinear"]], "teqlinearfakequant (class in neural_compressor.adaptor.torch_utils.model_wrapper)": [[165, "neural_compressor.adaptor.torch_utils.model_wrapper.TEQLinearFakeQuant"]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[165, "module-neural_compressor.adaptor.torch_utils.model_wrapper"]], "transformerbasedmodelblockpatterndetector (class in neural_compressor.adaptor.torch_utils.pattern_detector)": [[166, "neural_compressor.adaptor.torch_utils.pattern_detector.TransformerBasedModelBlockPatternDetector"]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[166, "module-neural_compressor.adaptor.torch_utils.pattern_detector"]], "torchsmoothquant (class in neural_compressor.adaptor.torch_utils.smooth_quant)": [[167, "neural_compressor.adaptor.torch_utils.smooth_quant.TorchSmoothQuant"]], "get_module() (in module neural_compressor.adaptor.torch_utils.smooth_quant)": [[167, "neural_compressor.adaptor.torch_utils.smooth_quant.get_module"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[167, "module-neural_compressor.adaptor.torch_utils.smooth_quant"]], "set_module() (in module neural_compressor.adaptor.torch_utils.smooth_quant)": [[167, "neural_compressor.adaptor.torch_utils.smooth_quant.set_module"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[168, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "symbolic_trace() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[168, "neural_compressor.adaptor.torch_utils.symbolic_trace.symbolic_trace"]], "trace_and_fuse_sub_graph() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[168, "neural_compressor.adaptor.torch_utils.symbolic_trace.trace_and_fuse_sub_graph"]], "tequantizer (class in neural_compressor.adaptor.torch_utils.teq)": [[169, "neural_compressor.adaptor.torch_utils.teq.TEQuantizer"]], "neural_compressor.adaptor.torch_utils.teq": [[169, "module-neural_compressor.adaptor.torch_utils.teq"]], "append_attr() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.append_attr"]], "auto_copy() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.auto_copy"]], "calculate_quant_min_max() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.calculate_quant_min_max"]], "calibration() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.calibration"]], "check_cfg_and_qconfig() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.check_cfg_and_qconfig"]], "collate_torch_preds() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.collate_torch_preds"]], "collect_weight_info() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.collect_weight_info"]], "fetch_module() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.fetch_module"]], "forward_wrapper() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.forward_wrapper"]], "generate_activation_observer() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.generate_activation_observer"]], "get_absorb_layers() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_absorb_layers"]], "get_block_prefix() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_block_prefix"]], "get_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_depth"]], "get_dict_at_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_dict_at_depth"]], "get_element_under_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_element_under_depth"]], "get_embedding_contiguous() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_embedding_contiguous"]], "get_example_input() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_example_input"]], "get_fallback_order() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_fallback_order"]], "get_hidden_states() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_hidden_states"]], "get_module_input_output() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_module_input_output"]], "get_mse_order_per_fp32() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_fp32"]], "get_mse_order_per_int8() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_int8"]], "get_op_type_by_name() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_op_type_by_name"]], "get_quantizable_ops_from_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_quantizable_ops_from_cfgs"]], "get_torch_version() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_torch_version"]], "input2tuple() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.input2tuple"]], "is_fused_module() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.is_fused_module"]], "match_datatype_pattern() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.match_datatype_pattern"]], "move_input_device() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.move_input_device"]], "neural_compressor.adaptor.torch_utils.util": [[170, "module-neural_compressor.adaptor.torch_utils.util"]], "paser_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.paser_cfgs"]], "set_module() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.set_module"]], "simple_inference() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.simple_inference"]], "update_sq_scale() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.update_sq_scale"]], "awq_quantize() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[171, "neural_compressor.adaptor.torch_utils.weight_only.awq_quantize"]], "gptq_quantize() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[171, "neural_compressor.adaptor.torch_utils.weight_only.gptq_quantize"]], "neural_compressor.adaptor.torch_utils.weight_only": [[171, "module-neural_compressor.adaptor.torch_utils.weight_only"]], "qdq_weight_actor() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[171, "neural_compressor.adaptor.torch_utils.weight_only.qdq_weight_actor"]], "qdq_weight_asym() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[171, "neural_compressor.adaptor.torch_utils.weight_only.qdq_weight_asym"]], "qdq_weight_sym() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[171, "neural_compressor.adaptor.torch_utils.weight_only.qdq_weight_sym"]], "quant_weight() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[171, "neural_compressor.adaptor.torch_utils.weight_only.quant_weight"]], "quant_weight_w_scale() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[171, "neural_compressor.adaptor.torch_utils.weight_only.quant_weight_w_scale"]], "quantize_4bit() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[171, "neural_compressor.adaptor.torch_utils.weight_only.quantize_4bit"]], "rtn_quantize() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[171, "neural_compressor.adaptor.torch_utils.weight_only.rtn_quantize"]], "search_clip() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[171, "neural_compressor.adaptor.torch_utils.weight_only.search_clip"]], "teq_quantize() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[171, "neural_compressor.adaptor.torch_utils.weight_only.teq_quantize"]], "algorithms (class in neural_compressor.algorithm.algorithm)": [[172, "neural_compressor.algorithm.algorithm.ALGORITHMS"]], "algorithm (class in neural_compressor.algorithm.algorithm)": [[172, "neural_compressor.algorithm.algorithm.Algorithm"]], "algorithmscheduler (class in neural_compressor.algorithm.algorithm)": [[172, "neural_compressor.algorithm.algorithm.AlgorithmScheduler"]], "algorithm_registry() (in module neural_compressor.algorithm.algorithm)": [[172, "neural_compressor.algorithm.algorithm.algorithm_registry"]], "neural_compressor.algorithm.algorithm": [[172, "module-neural_compressor.algorithm.algorithm"]], "fastbiascorrection (class in neural_compressor.algorithm.fast_bias_correction)": [[173, "neural_compressor.algorithm.fast_bias_correction.FastBiasCorrection"]], "neural_compressor.algorithm.fast_bias_correction": [[173, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[174, "module-neural_compressor.algorithm"]], "smoothquant (class in neural_compressor.algorithm.smooth_quant)": [[175, "neural_compressor.algorithm.smooth_quant.SmoothQuant"]], "neural_compressor.algorithm.smooth_quant": [[175, "module-neural_compressor.algorithm.smooth_quant"]], "weightcorrection (class in neural_compressor.algorithm.weight_correction)": [[176, "neural_compressor.algorithm.weight_correction.WeightCorrection"]], "neural_compressor.algorithm.weight_correction": [[176, "module-neural_compressor.algorithm.weight_correction"]], "benchmark_with_raw_cmd() (in module neural_compressor.benchmark)": [[177, "neural_compressor.benchmark.benchmark_with_raw_cmd"]], "call_one() (in module neural_compressor.benchmark)": [[177, "neural_compressor.benchmark.call_one"]], "config_instance() (in module neural_compressor.benchmark)": [[177, "neural_compressor.benchmark.config_instance"]], "fit() (in module neural_compressor.benchmark)": [[177, "neural_compressor.benchmark.fit"]], "generate_prefix() (in module neural_compressor.benchmark)": [[177, "neural_compressor.benchmark.generate_prefix"]], "get_architecture() (in module neural_compressor.benchmark)": [[177, "neural_compressor.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.benchmark)": [[177, "neural_compressor.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.benchmark)": [[177, "neural_compressor.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.benchmark)": [[177, "neural_compressor.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.benchmark)": [[177, "neural_compressor.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.benchmark)": [[177, "neural_compressor.benchmark.get_threads_per_core"]], "neural_compressor.benchmark": [[177, "module-neural_compressor.benchmark"]], "profile() (in module neural_compressor.benchmark)": [[177, "neural_compressor.benchmark.profile"]], "run_instance() (in module neural_compressor.benchmark)": [[177, "neural_compressor.benchmark.run_instance"]], "set_all_env_var() (in module neural_compressor.benchmark)": [[177, "neural_compressor.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.benchmark)": [[177, "neural_compressor.benchmark.set_env_var"]], "summary_benchmark() (in module neural_compressor.benchmark)": [[177, "neural_compressor.benchmark.summary_benchmark"]], "baseconfig (class in neural_compressor.common.base_config)": [[178, "neural_compressor.common.base_config.BaseConfig"]], "composableconfig (class in neural_compressor.common.base_config)": [[178, "neural_compressor.common.base_config.ComposableConfig"]], "neural_compressor.common.base_config": [[178, "module-neural_compressor.common.base_config"]], "register_config() (in module neural_compressor.common.base_config)": [[178, "neural_compressor.common.base_config.register_config"]], "basetuningconfig (class in neural_compressor.common.base_tune)": [[179, "neural_compressor.common.base_tune.BaseTuningConfig"]], "frameworkwrapper (class in neural_compressor.common.base_tune)": [[179, "neural_compressor.common.base_tune.FrameworkWrapper"]], "neural_compressor.common.base_tune": [[179, "module-neural_compressor.common.base_tune"]], "neural_compressor.common": [[180, "module-neural_compressor.common"]], "logger (class in neural_compressor.common.logger)": [[181, "neural_compressor.common.logger.Logger"]], "debug() (in module neural_compressor.common.logger)": [[181, "neural_compressor.common.logger.debug"]], "error() (in module neural_compressor.common.logger)": [[181, "neural_compressor.common.logger.error"]], "fatal() (in module neural_compressor.common.logger)": [[181, "neural_compressor.common.logger.fatal"]], "info() (in module neural_compressor.common.logger)": [[181, "neural_compressor.common.logger.info"]], "log() (in module neural_compressor.common.logger)": [[181, "neural_compressor.common.logger.log"]], "neural_compressor.common.logger": [[181, "module-neural_compressor.common.logger"]], "warn() (in module neural_compressor.common.logger)": [[181, "neural_compressor.common.logger.warn"]], "warning() (in module neural_compressor.common.logger)": [[181, "neural_compressor.common.logger.warning"]], "neural_compressor.common.utility": [[182, "module-neural_compressor.common.utility"]], "basecallbacks (class in neural_compressor.compression.callbacks)": [[183, "neural_compressor.compression.callbacks.BaseCallbacks"]], "distillationcallbacks (class in neural_compressor.compression.callbacks)": [[183, "neural_compressor.compression.callbacks.DistillationCallbacks"]], "pruningcallbacks (class in neural_compressor.compression.callbacks)": [[183, "neural_compressor.compression.callbacks.PruningCallbacks"]], "quantizationawaretrainingcallbacks (class in neural_compressor.compression.callbacks)": [[183, "neural_compressor.compression.callbacks.QuantizationAwareTrainingCallbacks"]], "_epoch_ran (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[183, "neural_compressor.compression.callbacks.DistillationCallbacks._epoch_ran"]], "best_model (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[183, "neural_compressor.compression.callbacks.DistillationCallbacks.best_model"]], "best_score (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[183, "neural_compressor.compression.callbacks.DistillationCallbacks.best_score"]], "eval_frequency (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[183, "neural_compressor.compression.callbacks.DistillationCallbacks.eval_frequency"]], "neural_compressor.compression.callbacks": [[183, "module-neural_compressor.compression.callbacks"]], "criterions (class in neural_compressor.compression.distillation.criterions)": [[184, "neural_compressor.compression.distillation.criterions.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[184, "neural_compressor.compression.distillation.criterions.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.compression.distillation.criterions)": [[184, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[184, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationLoss"]], "pytorchcriterions (class in neural_compressor.compression.distillation.criterions)": [[184, "neural_compressor.compression.distillation.criterions.PyTorchCriterions"]], "pytorchcrossentropyloss (class in neural_compressor.compression.distillation.criterions)": [[184, "neural_compressor.compression.distillation.criterions.PyTorchCrossEntropyLoss"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[184, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[184, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[184, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[184, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLossWrapper"]], "pytorchselfknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[184, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLoss"]], "pytorchselfknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[184, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[184, "neural_compressor.compression.distillation.criterions.SelfKnowledgeDistillationLoss"]], "tensorflowcrossentropyloss (class in neural_compressor.compression.distillation.criterions)": [[184, "neural_compressor.compression.distillation.criterions.TensorFlowCrossEntropyLoss"]], "tensorflowsparsecategoricalcrossentropy (class in neural_compressor.compression.distillation.criterions)": [[184, "neural_compressor.compression.distillation.criterions.TensorFlowSparseCategoricalCrossentropy"]], "tensorflowcriterions (class in neural_compressor.compression.distillation.criterions)": [[184, "neural_compressor.compression.distillation.criterions.TensorflowCriterions"]], "tensorflowknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[184, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLoss"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.compression.distillation.criterions)": [[184, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossExternal"]], "tensorflowknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[184, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossWrapper"]], "criterion_registry() (in module neural_compressor.compression.distillation.criterions)": [[184, "neural_compressor.compression.distillation.criterions.criterion_registry"]], "neural_compressor.compression.distillation.criterions": [[184, "module-neural_compressor.compression.distillation.criterions"]], "neural_compressor.compression.distillation": [[185, "module-neural_compressor.compression.distillation"]], "optimizers (class in neural_compressor.compression.distillation.optimizers)": [[186, "neural_compressor.compression.distillation.optimizers.Optimizers"]], "pytorchoptimizers (class in neural_compressor.compression.distillation.optimizers)": [[186, "neural_compressor.compression.distillation.optimizers.PyTorchOptimizers"]], "pytorchsgd (class in neural_compressor.compression.distillation.optimizers)": [[186, "neural_compressor.compression.distillation.optimizers.PyTorchSGD"]], "tensorflowadam (class in neural_compressor.compression.distillation.optimizers)": [[186, "neural_compressor.compression.distillation.optimizers.TensorFlowAdam"]], "tensorflowadamw (class in neural_compressor.compression.distillation.optimizers)": [[186, "neural_compressor.compression.distillation.optimizers.TensorFlowAdamW"]], "tensorflowsgd (class in neural_compressor.compression.distillation.optimizers)": [[186, "neural_compressor.compression.distillation.optimizers.TensorFlowSGD"]], "tensorflowoptimizers (class in neural_compressor.compression.distillation.optimizers)": [[186, "neural_compressor.compression.distillation.optimizers.TensorflowOptimizers"]], "neural_compressor.compression.distillation.optimizers": [[186, "module-neural_compressor.compression.distillation.optimizers"]], "optimizer_registry() (in module neural_compressor.compression.distillation.optimizers)": [[186, "neural_compressor.compression.distillation.optimizers.optimizer_registry"]], "get_activation() (in module neural_compressor.compression.distillation.utility)": [[187, "neural_compressor.compression.distillation.utility.get_activation"]], "neural_compressor.compression.distillation.utility": [[187, "module-neural_compressor.compression.distillation.utility"]], "record_output() (in module neural_compressor.compression.distillation.utility)": [[187, "neural_compressor.compression.distillation.utility.record_output"]], "neural_compressor.compression.hpo": [[188, "module-neural_compressor.compression.hpo"]], "neural_compressor.compression.hpo.sa_optimizer": [[189, "module-neural_compressor.compression.hpo.sa_optimizer"]], "bayesianoptimizationsearcher (class in neural_compressor.compression.hpo.search_algorithms)": [[190, "neural_compressor.compression.hpo.search_algorithms.BayesianOptimizationSearcher"]], "gridsearcher (class in neural_compressor.compression.hpo.search_algorithms)": [[190, "neural_compressor.compression.hpo.search_algorithms.GridSearcher"]], "randomsearcher (class in neural_compressor.compression.hpo.search_algorithms)": [[190, "neural_compressor.compression.hpo.search_algorithms.RandomSearcher"]], "searcher (class in neural_compressor.compression.hpo.search_algorithms)": [[190, "neural_compressor.compression.hpo.search_algorithms.Searcher"]], "xgbsearcher (class in neural_compressor.compression.hpo.search_algorithms)": [[190, "neural_compressor.compression.hpo.search_algorithms.XgbSearcher"]], "neural_compressor.compression.hpo.search_algorithms": [[190, "module-neural_compressor.compression.hpo.search_algorithms"]], "register_searcher() (in module neural_compressor.compression.hpo.search_algorithms)": [[190, "neural_compressor.compression.hpo.search_algorithms.register_searcher"]], "basesearchspace (class in neural_compressor.compression.hpo.search_space)": [[191, "neural_compressor.compression.hpo.search_space.BaseSearchSpace"]], "continuoussearchspace (class in neural_compressor.compression.hpo.search_space)": [[191, "neural_compressor.compression.hpo.search_space.ContinuousSearchSpace"]], "discretesearchspace (class in neural_compressor.compression.hpo.search_space)": [[191, "neural_compressor.compression.hpo.search_space.DiscreteSearchSpace"]], "searchspace (class in neural_compressor.compression.hpo.search_space)": [[191, "neural_compressor.compression.hpo.search_space.SearchSpace"]], "neural_compressor.compression.hpo.search_space": [[191, "module-neural_compressor.compression.hpo.search_space"]], "register_searchspace() (in module neural_compressor.compression.hpo.search_space)": [[191, "neural_compressor.compression.hpo.search_space.register_searchspace"]], "neural_compressor.compression": [[192, "module-neural_compressor.compression"]], "blockmaskcriterion (class in neural_compressor.compression.pruner.criteria)": [[193, "neural_compressor.compression.pruner.criteria.BlockMaskCriterion"]], "gradientcriterion (class in neural_compressor.compression.pruner.criteria)": [[193, "neural_compressor.compression.pruner.criteria.GradientCriterion"]], "magnitudecriterion (class in neural_compressor.compression.pruner.criteria)": [[193, "neural_compressor.compression.pruner.criteria.MagnitudeCriterion"]], "pruningcriterion (class in neural_compressor.compression.pruner.criteria)": [[193, "neural_compressor.compression.pruner.criteria.PruningCriterion"]], "retrainfreecriterion (class in neural_compressor.compression.pruner.criteria)": [[193, "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion"]], "snipcriterion (class in neural_compressor.compression.pruner.criteria)": [[193, "neural_compressor.compression.pruner.criteria.SnipCriterion"]], "snipmomentumcriterion (class in neural_compressor.compression.pruner.criteria)": [[193, "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion"]], "get_criterion() (in module neural_compressor.compression.pruner.criteria)": [[193, "neural_compressor.compression.pruner.criteria.get_criterion"]], "neural_compressor.compression.pruner.criteria": [[193, "module-neural_compressor.compression.pruner.criteria"]], "register_criterion() (in module neural_compressor.compression.pruner.criteria)": [[193, "neural_compressor.compression.pruner.criteria.register_criterion"]], "scores (neural_compressor.compression.pruner.criteria.blockmaskcriterion attribute)": [[193, "neural_compressor.compression.pruner.criteria.BlockMaskCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.gradientcriterion attribute)": [[193, "neural_compressor.compression.pruner.criteria.GradientCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.magnitudecriterion attribute)": [[193, "neural_compressor.compression.pruner.criteria.MagnitudeCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.pruningcriterion attribute)": [[193, "neural_compressor.compression.pruner.criteria.PruningCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.retrainfreecriterion attribute)": [[193, "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.snipcriterion attribute)": [[193, "neural_compressor.compression.pruner.criteria.SnipCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.snipmomentumcriterion attribute)": [[193, "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion.scores"]], "neural_compressor.compression.pruner": [[194, "module-neural_compressor.compression.pruner"]], "prepare_pruning() (in module neural_compressor.compression.pruner)": [[194, "neural_compressor.compression.pruner.prepare_pruning"]], "save() (in module neural_compressor.compression.pruner)": [[194, "neural_compressor.compression.pruner.save"]], "generate_ffn2_pruning_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[195, "neural_compressor.compression.pruner.model_slim.auto_slim.generate_ffn2_pruning_config"]], "generate_mha_pruning_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[195, "neural_compressor.compression.pruner.model_slim.auto_slim.generate_mha_pruning_config"]], "model_slim() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[195, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim"]], "model_slim_ffn2() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[195, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim_ffn2"]], "model_slim_mha() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[195, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim_mha"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[195, "module-neural_compressor.compression.pruner.model_slim.auto_slim"]], "parse_auto_slim_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[195, "neural_compressor.compression.pruner.model_slim.auto_slim.parse_auto_slim_config"]], "neural_compressor.compression.pruner.model_slim": [[196, "module-neural_compressor.compression.pruner.model_slim"]], "classifierheadsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[197, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher"]], "classifierheadsearchertf (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[197, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF"]], "jitbasicsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[197, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher"]], "linear2linearsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[197, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher"]], "recipesearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[197, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher"]], "selfmhasearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[197, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher"]], "current_pattern (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[197, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.current_pattern"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[197, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[197, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[197, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[197, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[197, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.device"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[197, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[197, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[197, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[197, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[197, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.flatten_static_graph"]], "get_attributes() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[197, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.get_attributes"]], "get_common_module() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[197, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.get_common_module"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[197, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[197, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[197, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[197, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[197, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[197, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.model"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[197, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"]], "print_iterables() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[197, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.print_iterables"]], "recipe (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[197, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.recipe"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[197, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.searching_results"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[197, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.searching_results"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[197, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.searching_results"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[197, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[197, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[197, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[197, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[197, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.static_graph"]], "target_layers (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[197, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.target_layers"]], "target_layers (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[197, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.target_layers"]], "target_op_lut (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[197, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.target_op_lut"]], "targets (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[197, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.targets"]], "linearcompression (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[198, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression"]], "linearcompressioniterator (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[198, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator"]], "postcompressionutils (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[198, "neural_compressor.compression.pruner.model_slim.weight_slim.PostCompressionUtils"]], "device (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[198, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.device"]], "layer_1 (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[198, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.layer_1"]], "layer_2 (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[198, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.layer_2"]], "linear_patterns (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompressioniterator attribute)": [[198, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator.linear_patterns"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[198, "module-neural_compressor.compression.pruner.model_slim.weight_slim"]], "basepattern (class in neural_compressor.compression.pruner.patterns.base)": [[199, "neural_compressor.compression.pruner.patterns.base.BasePattern"]], "kerasbasepattern (class in neural_compressor.compression.pruner.patterns.base)": [[199, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern"]], "pytorchbasepattern (class in neural_compressor.compression.pruner.patterns.base)": [[199, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern"]], "config (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[199, "neural_compressor.compression.pruner.patterns.base.BasePattern.config"]], "config (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[199, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.config"]], "config (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[199, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.config"]], "invalid_layers (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[199, "neural_compressor.compression.pruner.patterns.base.BasePattern.invalid_layers"]], "invalid_layers (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[199, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.invalid_layers"]], "invalid_layers (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[199, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.invalid_layers"]], "is_global (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[199, "neural_compressor.compression.pruner.patterns.base.BasePattern.is_global"]], "is_global (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[199, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.is_global"]], "is_global (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[199, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.is_global"]], "keep_mask_layers (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[199, "neural_compressor.compression.pruner.patterns.base.BasePattern.keep_mask_layers"]], "keep_mask_layers (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[199, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.keep_mask_layers"]], "keep_mask_layers (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[199, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.keep_mask_layers"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[199, "neural_compressor.compression.pruner.patterns.base.BasePattern.max_sparsity_ratio_per_op"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[199, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.max_sparsity_ratio_per_op"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[199, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.max_sparsity_ratio_per_op"]], "min_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[199, "neural_compressor.compression.pruner.patterns.base.BasePattern.min_sparsity_ratio_per_op"]], "min_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[199, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.min_sparsity_ratio_per_op"]], "min_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[199, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.min_sparsity_ratio_per_op"]], "modules (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[199, "neural_compressor.compression.pruner.patterns.base.BasePattern.modules"]], "modules (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[199, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.modules"]], "modules (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[199, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.modules"]], "neural_compressor.compression.pruner.patterns.base": [[199, "module-neural_compressor.compression.pruner.patterns.base"]], "pattern (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[199, "neural_compressor.compression.pruner.patterns.base.BasePattern.pattern"]], "pattern (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[199, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.pattern"]], "pattern (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[199, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.pattern"]], "register_pattern() (in module neural_compressor.compression.pruner.patterns.base)": [[199, "neural_compressor.compression.pruner.patterns.base.register_pattern"]], "target_sparsity (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[199, "neural_compressor.compression.pruner.patterns.base.BasePattern.target_sparsity"]], "target_sparsity (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[199, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.target_sparsity"]], "target_sparsity (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[199, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.target_sparsity"]], "get_pattern() (in module neural_compressor.compression.pruner.patterns)": [[200, "neural_compressor.compression.pruner.patterns.get_pattern"]], "neural_compressor.compression.pruner.patterns": [[200, "module-neural_compressor.compression.pruner.patterns"]], "m (neural_compressor.compression.pruner.patterns.mha.patternmha attribute)": [[201, "neural_compressor.compression.pruner.patterns.mha.PatternMHA.M"]], "n (neural_compressor.compression.pruner.patterns.mha.patternmha attribute)": [[201, "neural_compressor.compression.pruner.patterns.mha.PatternMHA.N"]], "patternmha (class in neural_compressor.compression.pruner.patterns.mha)": [[201, "neural_compressor.compression.pruner.patterns.mha.PatternMHA"]], "neural_compressor.compression.pruner.patterns.mha": [[201, "module-neural_compressor.compression.pruner.patterns.mha"]], "m (neural_compressor.compression.pruner.patterns.ninm.pytorchpatternninm attribute)": [[202, "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM.M"]], "n (neural_compressor.compression.pruner.patterns.ninm.pytorchpatternninm attribute)": [[202, "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM.N"]], "pytorchpatternninm (class in neural_compressor.compression.pruner.patterns.ninm)": [[202, "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM"]], "neural_compressor.compression.pruner.patterns.ninm": [[202, "module-neural_compressor.compression.pruner.patterns.ninm"]], "keraspatternnxm (class in neural_compressor.compression.pruner.patterns.nxm)": [[203, "neural_compressor.compression.pruner.patterns.nxm.KerasPatternNxM"]], "pytorchpatternnxm (class in neural_compressor.compression.pruner.patterns.nxm)": [[203, "neural_compressor.compression.pruner.patterns.nxm.PytorchPatternNxM"]], "block_size (neural_compressor.compression.pruner.patterns.nxm.keraspatternnxm attribute)": [[203, "neural_compressor.compression.pruner.patterns.nxm.KerasPatternNxM.block_size"]], "block_size (neural_compressor.compression.pruner.patterns.nxm.pytorchpatternnxm attribute)": [[203, "neural_compressor.compression.pruner.patterns.nxm.PytorchPatternNxM.block_size"]], "neural_compressor.compression.pruner.patterns.nxm": [[203, "module-neural_compressor.compression.pruner.patterns.nxm"]], "basepruner (class in neural_compressor.compression.pruner.pruners.base)": [[204, "neural_compressor.compression.pruner.pruners.base.BasePruner"]], "kerasbasepruner (class in neural_compressor.compression.pruner.pruners.base)": [[204, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner"]], "pytorchbasepruner (class in neural_compressor.compression.pruner.pruners.base)": [[204, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner"]], "config (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[204, "neural_compressor.compression.pruner.pruners.base.BasePruner.config"]], "config (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[204, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.config"]], "config (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[204, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.config"]], "current_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[204, "neural_compressor.compression.pruner.pruners.base.BasePruner.current_sparsity_ratio"]], "current_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[204, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.current_sparsity_ratio"]], "current_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[204, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.current_sparsity_ratio"]], "end_step (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[204, "neural_compressor.compression.pruner.pruners.base.BasePruner.end_step"]], "end_step (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[204, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.end_step"]], "end_step (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[204, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.end_step"]], "global_step (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[204, "neural_compressor.compression.pruner.pruners.base.BasePruner.global_step"]], "global_step (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[204, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.global_step"]], "global_step (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[204, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.global_step"]], "masks (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[204, "neural_compressor.compression.pruner.pruners.base.BasePruner.masks"]], "masks (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[204, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.masks"]], "masks (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[204, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.masks"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[204, "neural_compressor.compression.pruner.pruners.base.BasePruner.max_sparsity_ratio_per_op"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[204, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.max_sparsity_ratio_per_op"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[204, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.max_sparsity_ratio_per_op"]], "modules (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[204, "neural_compressor.compression.pruner.pruners.base.BasePruner.modules"]], "modules (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[204, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.modules"]], "modules (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[204, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.modules"]], "neural_compressor.compression.pruner.pruners.base": [[204, "module-neural_compressor.compression.pruner.pruners.base"]], "pattern (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[204, "neural_compressor.compression.pruner.pruners.base.BasePruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[204, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[204, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.pattern"]], "pruning_frequency (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[204, "neural_compressor.compression.pruner.pruners.base.BasePruner.pruning_frequency"]], "pruning_frequency (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[204, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.pruning_frequency"]], "pruning_frequency (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[204, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.pruning_frequency"]], "register_pruner() (in module neural_compressor.compression.pruner.pruners.base)": [[204, "neural_compressor.compression.pruner.pruners.base.register_pruner"]], "scheduler (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[204, "neural_compressor.compression.pruner.pruners.base.BasePruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[204, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[204, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.scheduler"]], "scores (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[204, "neural_compressor.compression.pruner.pruners.base.BasePruner.scores"]], "scores (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[204, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.scores"]], "scores (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[204, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.scores"]], "start_step (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[204, "neural_compressor.compression.pruner.pruners.base.BasePruner.start_step"]], "start_step (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[204, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.start_step"]], "start_step (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[204, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.start_step"]], "target_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[204, "neural_compressor.compression.pruner.pruners.base.BasePruner.target_sparsity_ratio"]], "target_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[204, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.target_sparsity_ratio"]], "target_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[204, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.target_sparsity_ratio"]], "kerasbasicpruner (class in neural_compressor.compression.pruner.pruners.basic)": [[205, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner"]], "pytorchbasicpruner (class in neural_compressor.compression.pruner.pruners.basic)": [[205, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner"]], "criterion (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[205, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.criterion"]], "criterion (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[205, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.criterion"]], "neural_compressor.compression.pruner.pruners.basic": [[205, "module-neural_compressor.compression.pruner.pruners.basic"]], "pattern (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[205, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[205, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.pattern"]], "reg (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[205, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.reg"]], "reg (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[205, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.reg"]], "scheduler (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[205, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[205, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.scheduler"]], "pytorchblockmaskpruner (class in neural_compressor.compression.pruner.pruners.block_mask)": [[206, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner"]], "criterion (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[206, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.criterion"]], "neural_compressor.compression.pruner.pruners.block_mask": [[206, "module-neural_compressor.compression.pruner.pruners.block_mask"]], "pattern (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[206, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.pattern"]], "reg (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[206, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.reg"]], "scheduler (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[206, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.scheduler"]], "get_pruner() (in module neural_compressor.compression.pruner.pruners)": [[207, "neural_compressor.compression.pruner.pruners.get_pruner"]], "neural_compressor.compression.pruner.pruners": [[207, "module-neural_compressor.compression.pruner.pruners"]], "parse_valid_pruner_types() (in module neural_compressor.compression.pruner.pruners)": [[207, "neural_compressor.compression.pruner.pruners.parse_valid_pruner_types"]], "pythonmultiheadattentionpruner (class in neural_compressor.compression.pruner.pruners.mha)": [[208, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner"]], "head_masks (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[208, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.head_masks"]], "linear_layers (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[208, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.linear_layers"]], "mha_compressions (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[208, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.mha_compressions"]], "mha_scores (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[208, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.mha_scores"]], "neural_compressor.compression.pruner.pruners.mha": [[208, "module-neural_compressor.compression.pruner.pruners.mha"]], "pytorchpatternlockpruner (class in neural_compressor.compression.pruner.pruners.pattern_lock)": [[209, "neural_compressor.compression.pruner.pruners.pattern_lock.PytorchPatternLockPruner"]], "neural_compressor.compression.pruner.pruners.pattern_lock": [[209, "module-neural_compressor.compression.pruner.pruners.pattern_lock"]], "pytorchprogressivepruner (class in neural_compressor.compression.pruner.pruners.progressive)": [[210, "neural_compressor.compression.pruner.pruners.progressive.PytorchProgressivePruner"]], "neural_compressor.compression.pruner.pruners.progressive": [[210, "module-neural_compressor.compression.pruner.pruners.progressive"]], "pytorchretrainfreepruner (class in neural_compressor.compression.pruner.pruners.retrain_free)": [[211, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner"]], "criterion (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[211, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.criterion"]], "neural_compressor.compression.pruner.pruners.retrain_free": [[211, "module-neural_compressor.compression.pruner.pruners.retrain_free"]], "pattern (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[211, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.pattern"]], "reg (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[211, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.reg"]], "scheduler (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[211, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.scheduler"]], "sparsegptpruner (class in neural_compressor.compression.pruner.pruners.sparse_gpt)": [[212, "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner"]], "criterion (neural_compressor.compression.pruner.pruners.sparse_gpt.sparsegptpruner attribute)": [[212, "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner.criterion"]], "neural_compressor.compression.pruner.pruners.sparse_gpt": [[212, "module-neural_compressor.compression.pruner.pruners.sparse_gpt"]], "pattern (neural_compressor.compression.pruner.pruners.sparse_gpt.sparsegptpruner attribute)": [[212, "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner.pattern"]], "reg (neural_compressor.compression.pruner.pruners.sparse_gpt.sparsegptpruner attribute)": [[212, "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner.reg"]], "scheduler (neural_compressor.compression.pruner.pruners.sparse_gpt.sparsegptpruner attribute)": [[212, "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner.scheduler"]], "basepruning (class in neural_compressor.compression.pruner.pruning)": [[213, "neural_compressor.compression.pruner.pruning.BasePruning"]], "basicpruning (class in neural_compressor.compression.pruner.pruning)": [[213, "neural_compressor.compression.pruner.pruning.BasicPruning"]], "retrainfreepruning (class in neural_compressor.compression.pruner.pruning)": [[213, "neural_compressor.compression.pruner.pruning.RetrainFreePruning"]], "sparsegptpruning (class in neural_compressor.compression.pruner.pruning)": [[213, "neural_compressor.compression.pruner.pruning.SparseGPTPruning"]], "config_file_path (neural_compressor.compression.pruner.pruning.basepruning attribute)": [[213, "neural_compressor.compression.pruner.pruning.BasePruning.config_file_path"]], "config_file_path (neural_compressor.compression.pruner.pruning.basicpruning attribute)": [[213, "neural_compressor.compression.pruner.pruning.BasicPruning.config_file_path"]], "config_file_path (neural_compressor.compression.pruner.pruning.retrainfreepruning attribute)": [[213, "neural_compressor.compression.pruner.pruning.RetrainFreePruning.config_file_path"]], "model (neural_compressor.compression.pruner.pruning.basepruning attribute)": [[213, "neural_compressor.compression.pruner.pruning.BasePruning.model"]], "model (neural_compressor.compression.pruner.pruning.basicpruning attribute)": [[213, "neural_compressor.compression.pruner.pruning.BasicPruning.model"]], "model (neural_compressor.compression.pruner.pruning.retrainfreepruning attribute)": [[213, "neural_compressor.compression.pruner.pruning.RetrainFreePruning.model"]], "neural_compressor.compression.pruner.pruning": [[213, "module-neural_compressor.compression.pruner.pruning"]], "pruner_info (neural_compressor.compression.pruner.pruning.basepruning attribute)": [[213, "neural_compressor.compression.pruner.pruning.BasePruning.pruner_info"]], "pruner_info (neural_compressor.compression.pruner.pruning.basicpruning attribute)": [[213, "neural_compressor.compression.pruner.pruning.BasicPruning.pruner_info"]], "pruner_info (neural_compressor.compression.pruner.pruning.retrainfreepruning attribute)": [[213, "neural_compressor.compression.pruner.pruning.RetrainFreePruning.pruner_info"]], "pruners (neural_compressor.compression.pruner.pruning.basepruning attribute)": [[213, "neural_compressor.compression.pruner.pruning.BasePruning.pruners"]], "pruners (neural_compressor.compression.pruner.pruning.basicpruning attribute)": [[213, "neural_compressor.compression.pruner.pruning.BasicPruning.pruners"]], "pruners (neural_compressor.compression.pruner.pruning.retrainfreepruning attribute)": [[213, "neural_compressor.compression.pruner.pruning.RetrainFreePruning.pruners"]], "register_pruning() (in module neural_compressor.compression.pruner.pruning)": [[213, "neural_compressor.compression.pruner.pruning.register_pruning"]], "basereg (class in neural_compressor.compression.pruner.regs)": [[214, "neural_compressor.compression.pruner.regs.BaseReg"]], "grouplasso (class in neural_compressor.compression.pruner.regs)": [[214, "neural_compressor.compression.pruner.regs.GroupLasso"]], "alpha (neural_compressor.compression.pruner.regs.grouplasso attribute)": [[214, "neural_compressor.compression.pruner.regs.GroupLasso.alpha"]], "get_reg() (in module neural_compressor.compression.pruner.regs)": [[214, "neural_compressor.compression.pruner.regs.get_reg"]], "get_reg_type() (in module neural_compressor.compression.pruner.regs)": [[214, "neural_compressor.compression.pruner.regs.get_reg_type"]], "neural_compressor.compression.pruner.regs": [[214, "module-neural_compressor.compression.pruner.regs"]], "reg_terms (neural_compressor.compression.pruner.regs.grouplasso attribute)": [[214, "neural_compressor.compression.pruner.regs.GroupLasso.reg_terms"]], "register_reg() (in module neural_compressor.compression.pruner.regs)": [[214, "neural_compressor.compression.pruner.regs.register_reg"]], "iterativescheduler (class in neural_compressor.compression.pruner.schedulers)": [[215, "neural_compressor.compression.pruner.schedulers.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.compression.pruner.schedulers)": [[215, "neural_compressor.compression.pruner.schedulers.OneshotScheduler"]], "pruningscheduler (class in neural_compressor.compression.pruner.schedulers)": [[215, "neural_compressor.compression.pruner.schedulers.PruningScheduler"]], "config (neural_compressor.compression.pruner.schedulers.pruningscheduler attribute)": [[215, "neural_compressor.compression.pruner.schedulers.PruningScheduler.config"]], "get_scheduler() (in module neural_compressor.compression.pruner.schedulers)": [[215, "neural_compressor.compression.pruner.schedulers.get_scheduler"]], "neural_compressor.compression.pruner.schedulers": [[215, "module-neural_compressor.compression.pruner.schedulers"]], "register_scheduler() (in module neural_compressor.compression.pruner.schedulers)": [[215, "neural_compressor.compression.pruner.schedulers.register_scheduler"]], "magnitudecriterion (class in neural_compressor.compression.pruner.tf_criteria)": [[216, "neural_compressor.compression.pruner.tf_criteria.MagnitudeCriterion"]], "pruningcriterion (class in neural_compressor.compression.pruner.tf_criteria)": [[216, "neural_compressor.compression.pruner.tf_criteria.PruningCriterion"]], "get_tf_criterion() (in module neural_compressor.compression.pruner.tf_criteria)": [[216, "neural_compressor.compression.pruner.tf_criteria.get_tf_criterion"]], "neural_compressor.compression.pruner.tf_criteria": [[216, "module-neural_compressor.compression.pruner.tf_criteria"]], "register_criterion() (in module neural_compressor.compression.pruner.tf_criteria)": [[216, "neural_compressor.compression.pruner.tf_criteria.register_criterion"]], "scores (neural_compressor.compression.pruner.tf_criteria.magnitudecriterion attribute)": [[216, "neural_compressor.compression.pruner.tf_criteria.MagnitudeCriterion.scores"]], "scores (neural_compressor.compression.pruner.tf_criteria.pruningcriterion attribute)": [[216, "neural_compressor.compression.pruner.tf_criteria.PruningCriterion.scores"]], "check_config() (in module neural_compressor.compression.pruner.utils)": [[217, "neural_compressor.compression.pruner.utils.check_config"]], "check_key_validity() (in module neural_compressor.compression.pruner.utils)": [[217, "neural_compressor.compression.pruner.utils.check_key_validity"]], "collect_layer_inputs() (in module neural_compressor.compression.pruner.utils)": [[217, "neural_compressor.compression.pruner.utils.collect_layer_inputs"]], "generate_pruner_config() (in module neural_compressor.compression.pruner.utils)": [[217, "neural_compressor.compression.pruner.utils.generate_pruner_config"]], "get_layers() (in module neural_compressor.compression.pruner.utils)": [[217, "neural_compressor.compression.pruner.utils.get_layers"]], "get_sparsity_ratio() (in module neural_compressor.compression.pruner.utils)": [[217, "neural_compressor.compression.pruner.utils.get_sparsity_ratio"]], "get_sparsity_ratio_tf() (in module neural_compressor.compression.pruner.utils)": [[217, "neural_compressor.compression.pruner.utils.get_sparsity_ratio_tf"]], "neural_compressor.compression.pruner.utils": [[217, "module-neural_compressor.compression.pruner.utils"]], "parse_last_linear() (in module neural_compressor.compression.pruner.utils)": [[217, "neural_compressor.compression.pruner.utils.parse_last_linear"]], "parse_last_linear_tf() (in module neural_compressor.compression.pruner.utils)": [[217, "neural_compressor.compression.pruner.utils.parse_last_linear_tf"]], "parse_to_prune() (in module neural_compressor.compression.pruner.utils)": [[217, "neural_compressor.compression.pruner.utils.parse_to_prune"]], "parse_to_prune_tf() (in module neural_compressor.compression.pruner.utils)": [[217, "neural_compressor.compression.pruner.utils.parse_to_prune_tf"]], "process_and_check_config() (in module neural_compressor.compression.pruner.utils)": [[217, "neural_compressor.compression.pruner.utils.process_and_check_config"]], "process_config() (in module neural_compressor.compression.pruner.utils)": [[217, "neural_compressor.compression.pruner.utils.process_config"]], "process_weight_config() (in module neural_compressor.compression.pruner.utils)": [[217, "neural_compressor.compression.pruner.utils.process_weight_config"]], "process_yaml_config() (in module neural_compressor.compression.pruner.utils)": [[217, "neural_compressor.compression.pruner.utils.process_yaml_config"]], "reset_none_to_default() (in module neural_compressor.compression.pruner.utils)": [[217, "neural_compressor.compression.pruner.utils.reset_none_to_default"]], "update_params() (in module neural_compressor.compression.pruner.utils)": [[217, "neural_compressor.compression.pruner.utils.update_params"]], "benchmark_conf (class in neural_compressor.conf.config)": [[218, "neural_compressor.conf.config.Benchmark_Conf"]], "conf (class in neural_compressor.conf.config)": [[218, "neural_compressor.conf.config.Conf"]], "defaultconf (class in neural_compressor.conf.config)": [[218, "neural_compressor.conf.config.DefaultConf"]], "distillation_conf (class in neural_compressor.conf.config)": [[218, "neural_compressor.conf.config.Distillation_Conf"]], "graph_optimization_conf (class in neural_compressor.conf.config)": [[218, "neural_compressor.conf.config.Graph_Optimization_Conf"]], "mixedprecision_conf (class in neural_compressor.conf.config)": [[218, "neural_compressor.conf.config.MixedPrecision_Conf"]], "nasconfig (class in neural_compressor.conf.config)": [[218, "neural_compressor.conf.config.NASConfig"]], "prunerv2 (class in neural_compressor.conf.config)": [[218, "neural_compressor.conf.config.PrunerV2"]], "pruning_conf (class in neural_compressor.conf.config)": [[218, "neural_compressor.conf.config.Pruning_Conf"]], "quantization_conf (class in neural_compressor.conf.config)": [[218, "neural_compressor.conf.config.Quantization_Conf"]], "neural_compressor.conf.config": [[218, "module-neural_compressor.conf.config"]], "dotdict (class in neural_compressor.conf.dotdict)": [[219, "neural_compressor.conf.dotdict.DotDict"]], "deep_get() (in module neural_compressor.conf.dotdict)": [[219, "neural_compressor.conf.dotdict.deep_get"]], "deep_set() (in module neural_compressor.conf.dotdict)": [[219, "neural_compressor.conf.dotdict.deep_set"]], "neural_compressor.conf.dotdict": [[219, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[220, "module-neural_compressor.conf"]], "accuracycriterion (class in neural_compressor.conf.pythonic_config)": [[221, "neural_compressor.conf.pythonic_config.AccuracyCriterion"]], "benchmarkconfig (class in neural_compressor.conf.pythonic_config)": [[221, "neural_compressor.conf.pythonic_config.BenchmarkConfig"]], "distillationconfig (class in neural_compressor.conf.pythonic_config)": [[221, "neural_compressor.conf.pythonic_config.DistillationConfig"]], "knowledgedistillationlossconfig (class in neural_compressor.conf.pythonic_config)": [[221, "neural_compressor.conf.pythonic_config.KnowledgeDistillationLossConfig"]], "options (class in neural_compressor.conf.pythonic_config)": [[221, "neural_compressor.conf.pythonic_config.Options"]], "quantizationconfig (class in neural_compressor.conf.pythonic_config)": [[221, "neural_compressor.conf.pythonic_config.QuantizationConfig"]], "weightpruningconfig (class in neural_compressor.conf.pythonic_config)": [[221, "neural_compressor.conf.pythonic_config.WeightPruningConfig"]], "neural_compressor.conf.pythonic_config": [[221, "module-neural_compressor.conf.pythonic_config"]], "accuracycriterion (class in neural_compressor.config)": [[222, "neural_compressor.config.AccuracyCriterion"]], "benchmarkconfig (class in neural_compressor.config)": [[222, "neural_compressor.config.BenchmarkConfig"]], "distillationconfig (class in neural_compressor.config)": [[222, "neural_compressor.config.DistillationConfig"]], "dotdict (class in neural_compressor.config)": [[222, "neural_compressor.config.DotDict"]], "exportconfig (class in neural_compressor.config)": [[222, "neural_compressor.config.ExportConfig"]], "hpoconfig (class in neural_compressor.config)": [[222, "neural_compressor.config.HPOConfig"]], "intermediatelayersknowledgedistillationlossconfig (class in neural_compressor.config)": [[222, "neural_compressor.config.IntermediateLayersKnowledgeDistillationLossConfig"]], "keras (class in neural_compressor.config)": [[222, "neural_compressor.config.Keras"]], "knowledgedistillationlossconfig (class in neural_compressor.config)": [[222, "neural_compressor.config.KnowledgeDistillationLossConfig"]], "mxnet (class in neural_compressor.config)": [[222, "neural_compressor.config.MXNet"]], "mixedprecisionconfig (class in neural_compressor.config)": [[222, "neural_compressor.config.MixedPrecisionConfig"]], "nasconfig (class in neural_compressor.config)": [[222, "neural_compressor.config.NASConfig"]], "onnx (class in neural_compressor.config)": [[222, "neural_compressor.config.ONNX"]], "onnxqlinear2qdqconfig (class in neural_compressor.config)": [[222, "neural_compressor.config.ONNXQlinear2QDQConfig"]], "options (class in neural_compressor.config)": [[222, "neural_compressor.config.Options"]], "posttrainingquantconfig (class in neural_compressor.config)": [[222, "neural_compressor.config.PostTrainingQuantConfig"]], "pytorch (class in neural_compressor.config)": [[222, "neural_compressor.config.PyTorch"]], "quantizationawaretrainingconfig (class in neural_compressor.config)": [[222, "neural_compressor.config.QuantizationAwareTrainingConfig"]], "selfknowledgedistillationlossconfig (class in neural_compressor.config)": [[222, "neural_compressor.config.SelfKnowledgeDistillationLossConfig"]], "tf2onnxconfig (class in neural_compressor.config)": [[222, "neural_compressor.config.TF2ONNXConfig"]], "tensorflow (class in neural_compressor.config)": [[222, "neural_compressor.config.TensorFlow"]], "torch2onnxconfig (class in neural_compressor.config)": [[222, "neural_compressor.config.Torch2ONNXConfig"]], "tuningcriterion (class in neural_compressor.config)": [[222, "neural_compressor.config.TuningCriterion"]], "weightpruningconfig (class in neural_compressor.config)": [[222, "neural_compressor.config.WeightPruningConfig"]], "neural_compressor.config": [[222, "module-neural_compressor.config"]], "neural_compressor.contrib": [[223, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[224, "module-neural_compressor.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.contrib.strategy.sigopt)": [[225, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.sigopt": [[225, "module-neural_compressor.contrib.strategy.sigopt"]], "tpetunestrategy (class in neural_compressor.contrib.strategy.tpe)": [[226, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[226, "module-neural_compressor.contrib.strategy.tpe"]], "basedataloader (class in neural_compressor.data.dataloaders.base_dataloader)": [[227, "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader"]], "neural_compressor.data.dataloaders.base_dataloader": [[227, "module-neural_compressor.data.dataloaders.base_dataloader"]], "dataloader (class in neural_compressor.data.dataloaders.dataloader)": [[228, "neural_compressor.data.dataloaders.dataloader.DataLoader"]], "check_dataloader() (in module neural_compressor.data.dataloaders.dataloader)": [[228, "neural_compressor.data.dataloaders.dataloader.check_dataloader"]], "neural_compressor.data.dataloaders.dataloader": [[228, "module-neural_compressor.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.data.dataloaders.default_dataloader)": [[229, "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader"]], "default_collate() (in module neural_compressor.data.dataloaders.default_dataloader)": [[229, "neural_compressor.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.data.dataloaders.default_dataloader": [[229, "module-neural_compressor.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.data.dataloaders.fetcher)": [[230, "neural_compressor.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.data.dataloaders.fetcher)": [[230, "neural_compressor.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.data.dataloaders.fetcher)": [[230, "neural_compressor.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.data.dataloaders.fetcher": [[230, "module-neural_compressor.data.dataloaders.fetcher"]], "neural_compressor.data.dataloaders": [[231, "module-neural_compressor.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.data.dataloaders.mxnet_dataloader)": [[232, "neural_compressor.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[232, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[233, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[233, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[233, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.data.dataloaders.pytorch_dataloader)": [[234, "neural_compressor.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[234, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.data.dataloaders.sampler)": [[235, "neural_compressor.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.data.dataloaders.sampler)": [[235, "neural_compressor.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.data.dataloaders.sampler)": [[235, "neural_compressor.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.data.dataloaders.sampler)": [[235, "neural_compressor.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.data.dataloaders.sampler": [[235, "module-neural_compressor.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[236, "neural_compressor.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[236, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[236, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[236, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[236, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.data.datasets.bert_dataset)": [[237, "neural_compressor.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[237, "neural_compressor.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.data.datasets.bert_dataset)": [[237, "neural_compressor.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[237, "neural_compressor.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[237, "neural_compressor.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[237, "neural_compressor.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.data.datasets.bert_dataset)": [[237, "neural_compressor.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.data.datasets.bert_dataset)": [[237, "neural_compressor.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.data.datasets.bert_dataset": [[237, "module-neural_compressor.data.datasets.bert_dataset"]], "coconpy (class in neural_compressor.data.datasets.coco_dataset)": [[238, "neural_compressor.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.data.datasets.coco_dataset)": [[238, "neural_compressor.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.data.datasets.coco_dataset)": [[238, "neural_compressor.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.data.datasets.coco_dataset)": [[238, "neural_compressor.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.data.datasets.coco_dataset": [[238, "module-neural_compressor.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.data.datasets.dataset)": [[239, "neural_compressor.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.data.datasets.dataset)": [[239, "neural_compressor.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.data.datasets.dataset)": [[239, "neural_compressor.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.data.datasets.dataset)": [[239, "neural_compressor.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.data.datasets.dataset)": [[239, "neural_compressor.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.data.datasets.dataset)": [[239, "neural_compressor.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.data.datasets.dataset)": [[239, "neural_compressor.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.data.datasets.dataset)": [[239, "neural_compressor.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.data.datasets.dataset)": [[239, "neural_compressor.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.data.datasets.dataset)": [[239, "neural_compressor.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.data.datasets.dataset)": [[239, "neural_compressor.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.data.datasets.dataset)": [[239, "neural_compressor.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.data.datasets.dataset)": [[239, "neural_compressor.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.data.datasets.dataset)": [[239, "neural_compressor.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.data.datasets.dataset)": [[239, "neural_compressor.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.data.datasets.dataset)": [[239, "neural_compressor.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.data.datasets.dataset)": [[239, "neural_compressor.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.data.datasets.dataset)": [[239, "neural_compressor.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.data.datasets.dataset)": [[239, "neural_compressor.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.data.datasets.dataset)": [[239, "neural_compressor.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.data.datasets.dataset)": [[239, "neural_compressor.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.data.datasets.dataset)": [[239, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.datasets.dataset)": [[239, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflow (class in neural_compressor.data.datasets.dataset)": [[239, "neural_compressor.data.datasets.dataset.Tensorflow"]], "tensorflowcifar10 (class in neural_compressor.data.datasets.dataset)": [[239, "neural_compressor.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.data.datasets.dataset)": [[239, "neural_compressor.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.data.datasets.dataset)": [[239, "neural_compressor.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.data.datasets.dataset)": [[239, "neural_compressor.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagerecord (class in neural_compressor.data.datasets.dataset)": [[239, "neural_compressor.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.data.datasets.dataset)": [[239, "neural_compressor.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.data.datasets.dataset)": [[239, "neural_compressor.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.data.datasets.dataset)": [[239, "neural_compressor.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.data.datasets.dataset)": [[239, "neural_compressor.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.data.datasets.dataset)": [[239, "neural_compressor.data.datasets.dataset.check_integrity"]], "dataset_registry() (in module neural_compressor.data.datasets.dataset)": [[239, "neural_compressor.data.datasets.dataset.dataset_registry"]], "download_url() (in module neural_compressor.data.datasets.dataset)": [[239, "neural_compressor.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.data.datasets.dataset)": [[239, "neural_compressor.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.data.datasets.dataset)": [[239, "neural_compressor.data.datasets.dataset.gen_bar_updater"]], "neural_compressor.data.datasets.dataset": [[239, "module-neural_compressor.data.datasets.dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset)": [[240, "neural_compressor.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset": [[240, "module-neural_compressor.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[241, "neural_compressor.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[241, "neural_compressor.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[241, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[242, "neural_compressor.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[242, "neural_compressor.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[242, "neural_compressor.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[242, "neural_compressor.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[242, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[242, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.data.datasets.imagenet_dataset": [[242, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[243, "module-neural_compressor.data.datasets"]], "styletransferdataset (class in neural_compressor.data.datasets.style_transfer_dataset)": [[244, "neural_compressor.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.data.datasets.style_transfer_dataset": [[244, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.data.filters.coco_filter)": [[245, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.data.filters.coco_filter)": [[245, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.coco_filter": [[245, "module-neural_compressor.data.filters.coco_filter"]], "filters (class in neural_compressor.data.filters.filter)": [[246, "neural_compressor.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.data.filters.filter)": [[246, "neural_compressor.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.data.filters.filter)": [[246, "neural_compressor.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.data.filters.filter)": [[246, "neural_compressor.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.data.filters.filter)": [[246, "neural_compressor.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.data.filters.filter)": [[246, "neural_compressor.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.data.filters.filter)": [[246, "neural_compressor.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.data.filters.filter)": [[246, "neural_compressor.data.filters.filter.filter_registry"]], "neural_compressor.data.filters.filter": [[246, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[247, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[248, "module-neural_compressor.data"]], "parsedecodecocotransform (class in neural_compressor.data.transforms.coco_transform)": [[249, "neural_compressor.data.transforms.coco_transform.ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.coco_transform": [[249, "module-neural_compressor.data.transforms.coco_transform"]], "bilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[250, "neural_compressor.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.data.transforms.imagenet_transform)": [[250, "neural_compressor.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[250, "neural_compressor.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[250, "neural_compressor.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.data.transforms.imagenet_transform)": [[250, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[250, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.data.transforms.imagenet_transform)": [[250, "neural_compressor.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.data.transforms.imagenet_transform)": [[250, "neural_compressor.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[250, "neural_compressor.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "tensorflowshiftrescale (class in neural_compressor.data.transforms.imagenet_transform)": [[250, "neural_compressor.data.transforms.imagenet_transform.TensorflowShiftRescale"]], "tensorflowtransposelastchannel (class in neural_compressor.data.transforms.imagenet_transform)": [[250, "neural_compressor.data.transforms.imagenet_transform.TensorflowTransposeLastChannel"]], "neural_compressor.data.transforms.imagenet_transform": [[250, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[251, "module-neural_compressor.data.transforms"]], "postprocess (class in neural_compressor.data.transforms.postprocess)": [[252, "neural_compressor.data.transforms.postprocess.Postprocess"]], "neural_compressor.data.transforms.postprocess": [[252, "module-neural_compressor.data.transforms.postprocess"]], "basictokenizer (class in neural_compressor.data.transforms.tokenization)": [[253, "neural_compressor.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.data.transforms.tokenization)": [[253, "neural_compressor.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.data.transforms.tokenization)": [[253, "neural_compressor.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.data.transforms.tokenization)": [[253, "neural_compressor.data.transforms.tokenization.convert_by_vocab"]], "convert_to_unicode() (in module neural_compressor.data.transforms.tokenization)": [[253, "neural_compressor.data.transforms.tokenization.convert_to_unicode"]], "load_vocab() (in module neural_compressor.data.transforms.tokenization)": [[253, "neural_compressor.data.transforms.tokenization.load_vocab"]], "neural_compressor.data.transforms.tokenization": [[253, "module-neural_compressor.data.transforms.tokenization"]], "whitespace_tokenize() (in module neural_compressor.data.transforms.tokenization)": [[253, "neural_compressor.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.data.transforms.transform)": [[254, "neural_compressor.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.data.transforms.transform)": [[254, "neural_compressor.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.data.transforms.transform)": [[254, "neural_compressor.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.data.transforms.transform)": [[254, "neural_compressor.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.data.transforms.transform)": [[254, "neural_compressor.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.data.transforms.transform)": [[254, "neural_compressor.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.data.transforms.transform)": [[254, "neural_compressor.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.data.transforms.transform)": [[254, "neural_compressor.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.data.transforms.transform)": [[254, "neural_compressor.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.data.transforms.transform)": [[254, "neural_compressor.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.data.transforms.transform)": [[254, "neural_compressor.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.data.transforms.transform)": [[254, "neural_compressor.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.data.transforms.transform)": [[254, "neural_compressor.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.data.transforms.transform)": [[254, "neural_compressor.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[254, "neural_compressor.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.data.transforms.transform)": [[254, "neural_compressor.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.data.transforms.transform)": [[254, "neural_compressor.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.data.transforms.transform)": [[254, "neural_compressor.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.data.transforms.transform)": [[254, "neural_compressor.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.data.transforms.transform)": [[254, "neural_compressor.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[254, "neural_compressor.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.data.transforms.transform)": [[254, "neural_compressor.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.data.transforms.transform)": [[254, "neural_compressor.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.data.transforms.transform)": [[254, "neural_compressor.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.data.transforms.transform)": [[254, "neural_compressor.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.data.transforms.transform)": [[254, "neural_compressor.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.data.transforms.transform)": [[254, "neural_compressor.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.data.transforms.transform)": [[254, "neural_compressor.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.data.transforms.transform)": [[254, "neural_compressor.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.data.transforms.transform)": [[254, "neural_compressor.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.data.transforms.transform)": [[254, "neural_compressor.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.transforms.transform)": [[254, "neural_compressor.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.data.transforms.transform)": [[254, "neural_compressor.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.data.transforms.transform)": [[254, "neural_compressor.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[254, "neural_compressor.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.data.transforms.transform)": [[254, "neural_compressor.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.data.transforms.transform)": [[254, "neural_compressor.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.data.transforms.transform)": [[254, "neural_compressor.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.data.transforms.transform)": [[254, "neural_compressor.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.data.transforms.transform)": [[254, "neural_compressor.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.data.transforms.transform)": [[254, "neural_compressor.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.data.transforms.transform)": [[254, "neural_compressor.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.data.transforms.transform)": [[254, "neural_compressor.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.data.transforms.transform)": [[254, "neural_compressor.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.data.transforms.transform)": [[254, "neural_compressor.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.data.transforms.transform)": [[254, "neural_compressor.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.data.transforms.transform)": [[254, "neural_compressor.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.data.transforms.transform)": [[254, "neural_compressor.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.data.transforms.transform)": [[254, "neural_compressor.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.data.transforms.transform)": [[254, "neural_compressor.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.data.transforms.transform)": [[254, "neural_compressor.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.data.transforms.transform)": [[254, "neural_compressor.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.data.transforms.transform)": [[254, "neural_compressor.data.transforms.transform.TRANSFORMS"], [254, "neural_compressor.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[254, "neural_compressor.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[254, "neural_compressor.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.data.transforms.transform)": [[254, "neural_compressor.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.data.transforms.transform)": [[254, "neural_compressor.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.data.transforms.transform)": [[254, "neural_compressor.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.data.transforms.transform)": [[254, "neural_compressor.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.data.transforms.transform)": [[254, "neural_compressor.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.data.transforms.transform)": [[254, "neural_compressor.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.data.transforms.transform)": [[254, "neural_compressor.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.data.transforms.transform)": [[254, "neural_compressor.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.data.transforms.transform)": [[254, "neural_compressor.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.data.transforms.transform)": [[254, "neural_compressor.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.data.transforms.transform)": [[254, "neural_compressor.data.transforms.transform.get_final_text"]], "get_torchvision_map() (in module neural_compressor.data.transforms.transform)": [[254, "neural_compressor.data.transforms.transform.get_torchvision_map"]], "neural_compressor.data.transforms.transform": [[254, "module-neural_compressor.data.transforms.transform"]], "read_squad_examples() (in module neural_compressor.data.transforms.transform)": [[254, "neural_compressor.data.transforms.transform.read_squad_examples"]], "transform_registry() (in module neural_compressor.data.transforms.transform)": [[254, "neural_compressor.data.transforms.transform.transform_registry"]], "benchmark (class in neural_compressor.experimental.benchmark)": [[255, "neural_compressor.experimental.benchmark.Benchmark"]], "get_architecture() (in module neural_compressor.experimental.benchmark)": [[255, "neural_compressor.experimental.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.experimental.benchmark)": [[255, "neural_compressor.experimental.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.experimental.benchmark)": [[255, "neural_compressor.experimental.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.experimental.benchmark)": [[255, "neural_compressor.experimental.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.experimental.benchmark)": [[255, "neural_compressor.experimental.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.experimental.benchmark)": [[255, "neural_compressor.experimental.benchmark.get_threads_per_core"]], "neural_compressor.experimental.benchmark": [[255, "module-neural_compressor.experimental.benchmark"]], "set_all_env_var() (in module neural_compressor.experimental.benchmark)": [[255, "neural_compressor.experimental.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.experimental.benchmark)": [[255, "neural_compressor.experimental.benchmark.set_env_var"]], "criterions (class in neural_compressor.experimental.common.criterion)": [[256, "neural_compressor.experimental.common.criterion.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[256, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.experimental.common.criterion)": [[256, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[256, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss"]], "pytorchcriterions (class in neural_compressor.experimental.common.criterion)": [[256, "neural_compressor.experimental.common.criterion.PyTorchCriterions"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[256, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[256, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[256, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[256, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[256, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss"]], "tensorflowcriterions (class in neural_compressor.experimental.common.criterion)": [[256, "neural_compressor.experimental.common.criterion.TensorflowCriterions"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.experimental.common.criterion)": [[256, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal"]], "criterion_registry() (in module neural_compressor.experimental.common.criterion)": [[256, "neural_compressor.experimental.common.criterion.criterion_registry"]], "neural_compressor.experimental.common.criterion": [[256, "module-neural_compressor.experimental.common.criterion"]], "dataloader (class in neural_compressor.experimental.common.dataloader)": [[257, "neural_compressor.experimental.common.dataloader.DataLoader"]], "neural_compressor.experimental.common.dataloader": [[257, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[258, "module-neural_compressor.experimental.common"]], "metric (class in neural_compressor.experimental.common.metric)": [[259, "neural_compressor.experimental.common.metric.Metric"]], "neural_compressor.experimental.common.metric": [[259, "module-neural_compressor.experimental.common.metric"]], "model (class in neural_compressor.experimental.common.model)": [[260, "neural_compressor.experimental.common.model.Model"]], "neural_compressor.experimental.common.model": [[260, "module-neural_compressor.experimental.common.model"]], "set_backend() (in module neural_compressor.experimental.common.model)": [[260, "neural_compressor.experimental.common.model.set_backend"]], "optimizers (class in neural_compressor.experimental.common.optimizer)": [[261, "neural_compressor.experimental.common.optimizer.Optimizers"]], "pytorchoptimizers (class in neural_compressor.experimental.common.optimizer)": [[261, "neural_compressor.experimental.common.optimizer.PyTorchOptimizers"]], "pytorchsgd (class in neural_compressor.experimental.common.optimizer)": [[261, "neural_compressor.experimental.common.optimizer.PyTorchSGD"]], "tensorflowadamw (class in neural_compressor.experimental.common.optimizer)": [[261, "neural_compressor.experimental.common.optimizer.TensorFlowAdamW"]], "tensorflowsgd (class in neural_compressor.experimental.common.optimizer)": [[261, "neural_compressor.experimental.common.optimizer.TensorFlowSGD"]], "tensorflowoptimizers (class in neural_compressor.experimental.common.optimizer)": [[261, "neural_compressor.experimental.common.optimizer.TensorflowOptimizers"]], "neural_compressor.experimental.common.optimizer": [[261, "module-neural_compressor.experimental.common.optimizer"]], "optimizer_registry() (in module neural_compressor.experimental.common.optimizer)": [[261, "neural_compressor.experimental.common.optimizer.optimizer_registry"]], "postprocess (class in neural_compressor.experimental.common.postprocess)": [[262, "neural_compressor.experimental.common.postprocess.Postprocess"]], "neural_compressor.experimental.common.postprocess": [[262, "module-neural_compressor.experimental.common.postprocess"]], "get_activation() (in module neural_compressor.experimental.common.torch_utils)": [[263, "neural_compressor.experimental.common.torch_utils.get_activation"]], "neural_compressor.experimental.common.torch_utils": [[263, "module-neural_compressor.experimental.common.torch_utils"]], "record_output() (in module neural_compressor.experimental.common.torch_utils)": [[263, "neural_compressor.experimental.common.torch_utils.record_output"]], "component (class in neural_compressor.experimental.component)": [[264, "neural_compressor.experimental.component.Component"]], "neural_compressor.experimental.component": [[264, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.compression": [[265, "module-neural_compressor.experimental.compression"]], "neural_compressor.experimental.contrib": [[266, "module-neural_compressor.experimental.contrib"]], "neural_compressor.experimental.contrib.strategy": [[267, "module-neural_compressor.experimental.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.experimental.contrib.strategy.sigopt)": [[268, "neural_compressor.experimental.contrib.strategy.sigopt.SigOptTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[268, "module-neural_compressor.experimental.contrib.strategy.sigopt"]], "tpetunestrategy (class in neural_compressor.experimental.contrib.strategy.tpe)": [[269, "neural_compressor.experimental.contrib.strategy.tpe.TpeTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.tpe": [[269, "module-neural_compressor.experimental.contrib.strategy.tpe"]], "basedataloader (class in neural_compressor.experimental.data.dataloaders.base_dataloader)": [[270, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[270, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[271, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.experimental.data.dataloaders.default_dataloader)": [[272, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader"]], "default_collate() (in module neural_compressor.experimental.data.dataloaders.default_dataloader)": [[272, "neural_compressor.experimental.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[272, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[273, "neural_compressor.experimental.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[273, "neural_compressor.experimental.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[273, "neural_compressor.experimental.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[273, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[274, "module-neural_compressor.experimental.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.experimental.data.dataloaders.mxnet_dataloader)": [[275, "neural_compressor.experimental.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[275, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[276, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[276, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[276, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.experimental.data.dataloaders.pytorch_dataloader)": [[277, "neural_compressor.experimental.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[277, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[278, "neural_compressor.experimental.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[278, "neural_compressor.experimental.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[278, "neural_compressor.experimental.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[278, "neural_compressor.experimental.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.sampler": [[278, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[279, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[279, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[279, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[279, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[279, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[280, "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[280, "neural_compressor.experimental.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[280, "neural_compressor.experimental.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[280, "neural_compressor.experimental.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[280, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[280, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[280, "neural_compressor.experimental.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[280, "neural_compressor.experimental.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[280, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "coconpy (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[281, "neural_compressor.experimental.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[281, "neural_compressor.experimental.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[281, "neural_compressor.experimental.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[281, "neural_compressor.experimental.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[281, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[282, "neural_compressor.experimental.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[282, "neural_compressor.experimental.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.experimental.data.datasets.dataset)": [[282, "neural_compressor.experimental.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.experimental.data.datasets.dataset)": [[282, "neural_compressor.experimental.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[282, "neural_compressor.experimental.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[282, "neural_compressor.experimental.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.experimental.data.datasets.dataset)": [[282, "neural_compressor.experimental.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.experimental.data.datasets.dataset)": [[282, "neural_compressor.experimental.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[282, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[282, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[282, "neural_compressor.experimental.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[282, "neural_compressor.experimental.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[282, "neural_compressor.experimental.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[282, "neural_compressor.experimental.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[282, "neural_compressor.experimental.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[282, "neural_compressor.experimental.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[282, "neural_compressor.experimental.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[282, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[282, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[282, "neural_compressor.experimental.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[282, "neural_compressor.experimental.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.experimental.data.datasets.dataset)": [[282, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.datasets.dataset)": [[282, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflowcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[282, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[282, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[282, "neural_compressor.experimental.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[282, "neural_compressor.experimental.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[282, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageFolder"]], "tensorflowimagerecord (class in neural_compressor.experimental.data.datasets.dataset)": [[282, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[282, "neural_compressor.experimental.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.experimental.data.datasets.dataset)": [[282, "neural_compressor.experimental.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.experimental.data.datasets.dataset)": [[282, "neural_compressor.experimental.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.experimental.data.datasets.dataset)": [[282, "neural_compressor.experimental.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.experimental.data.datasets.dataset)": [[282, "neural_compressor.experimental.data.datasets.dataset.check_integrity"]], "dataset_registry() (in module neural_compressor.experimental.data.datasets.dataset)": [[282, "neural_compressor.experimental.data.datasets.dataset.dataset_registry"]], "download_url() (in module neural_compressor.experimental.data.datasets.dataset)": [[282, "neural_compressor.experimental.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.experimental.data.datasets.dataset)": [[282, "neural_compressor.experimental.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.experimental.data.datasets.dataset)": [[282, "neural_compressor.experimental.data.datasets.dataset.gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dataset": [[282, "module-neural_compressor.experimental.data.datasets.dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset)": [[283, "neural_compressor.experimental.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[283, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[284, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[284, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[284, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[285, "neural_compressor.experimental.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[285, "neural_compressor.experimental.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[285, "neural_compressor.experimental.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[285, "neural_compressor.experimental.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[285, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[285, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[285, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[286, "module-neural_compressor.experimental.data.datasets"]], "styletransferdataset (class in neural_compressor.experimental.data.datasets.style_transfer_dataset)": [[287, "neural_compressor.experimental.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[287, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[288, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[288, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.coco_filter": [[288, "module-neural_compressor.experimental.data.filters.coco_filter"]], "filters (class in neural_compressor.experimental.data.filters.filter)": [[289, "neural_compressor.experimental.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.experimental.data.filters.filter)": [[289, "neural_compressor.experimental.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.experimental.data.filters.filter)": [[289, "neural_compressor.experimental.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.experimental.data.filters.filter)": [[289, "neural_compressor.experimental.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.experimental.data.filters.filter)": [[289, "neural_compressor.experimental.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.experimental.data.filters.filter)": [[289, "neural_compressor.experimental.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.experimental.data.filters.filter)": [[289, "neural_compressor.experimental.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.experimental.data.filters.filter)": [[289, "neural_compressor.experimental.data.filters.filter.filter_registry"]], "neural_compressor.experimental.data.filters.filter": [[289, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[290, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[291, "module-neural_compressor.experimental.data"]], "bilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[292, "neural_compressor.experimental.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[292, "neural_compressor.experimental.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[292, "neural_compressor.experimental.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[292, "neural_compressor.experimental.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[292, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[292, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[292, "neural_compressor.experimental.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[292, "neural_compressor.experimental.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[292, "neural_compressor.experimental.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[292, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[293, "module-neural_compressor.experimental.data.transforms"]], "basictokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[294, "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[294, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[294, "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[294, "neural_compressor.experimental.data.transforms.tokenization.convert_by_vocab"]], "convert_to_unicode() (in module neural_compressor.experimental.data.transforms.tokenization)": [[294, "neural_compressor.experimental.data.transforms.tokenization.convert_to_unicode"]], "load_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[294, "neural_compressor.experimental.data.transforms.tokenization.load_vocab"]], "neural_compressor.experimental.data.transforms.tokenization": [[294, "module-neural_compressor.experimental.data.transforms.tokenization"]], "whitespace_tokenize() (in module neural_compressor.experimental.data.transforms.tokenization)": [[294, "neural_compressor.experimental.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.experimental.data.transforms.transform)": [[295, "neural_compressor.experimental.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.experimental.data.transforms.transform)": [[295, "neural_compressor.experimental.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.experimental.data.transforms.transform)": [[295, "neural_compressor.experimental.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[295, "neural_compressor.experimental.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.experimental.data.transforms.transform)": [[295, "neural_compressor.experimental.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[295, "neural_compressor.experimental.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[295, "neural_compressor.experimental.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[295, "neural_compressor.experimental.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.experimental.data.transforms.transform)": [[295, "neural_compressor.experimental.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[295, "neural_compressor.experimental.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[295, "neural_compressor.experimental.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[295, "neural_compressor.experimental.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.experimental.data.transforms.transform)": [[295, "neural_compressor.experimental.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[295, "neural_compressor.experimental.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[295, "neural_compressor.experimental.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[295, "neural_compressor.experimental.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.experimental.data.transforms.transform)": [[295, "neural_compressor.experimental.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.experimental.data.transforms.transform)": [[295, "neural_compressor.experimental.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[295, "neural_compressor.experimental.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[295, "neural_compressor.experimental.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[295, "neural_compressor.experimental.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.experimental.data.transforms.transform)": [[295, "neural_compressor.experimental.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.experimental.data.transforms.transform)": [[295, "neural_compressor.experimental.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[295, "neural_compressor.experimental.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.experimental.data.transforms.transform)": [[295, "neural_compressor.experimental.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.experimental.data.transforms.transform)": [[295, "neural_compressor.experimental.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[295, "neural_compressor.experimental.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[295, "neural_compressor.experimental.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[295, "neural_compressor.experimental.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[295, "neural_compressor.experimental.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[295, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[295, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[295, "neural_compressor.experimental.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[295, "neural_compressor.experimental.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[295, "neural_compressor.experimental.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[295, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[295, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[295, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[295, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[295, "neural_compressor.experimental.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.experimental.data.transforms.transform)": [[295, "neural_compressor.experimental.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.experimental.data.transforms.transform)": [[295, "neural_compressor.experimental.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.experimental.data.transforms.transform)": [[295, "neural_compressor.experimental.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[295, "neural_compressor.experimental.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[295, "neural_compressor.experimental.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[295, "neural_compressor.experimental.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[295, "neural_compressor.experimental.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[295, "neural_compressor.experimental.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.experimental.data.transforms.transform)": [[295, "neural_compressor.experimental.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[295, "neural_compressor.experimental.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.experimental.data.transforms.transform)": [[295, "neural_compressor.experimental.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.experimental.data.transforms.transform)": [[295, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.experimental.data.transforms.transform)": [[295, "neural_compressor.experimental.data.transforms.transform.TRANSFORMS"], [295, "neural_compressor.experimental.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[295, "neural_compressor.experimental.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[295, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[295, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[295, "neural_compressor.experimental.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.experimental.data.transforms.transform)": [[295, "neural_compressor.experimental.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[295, "neural_compressor.experimental.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[295, "neural_compressor.experimental.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[295, "neural_compressor.experimental.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.experimental.data.transforms.transform)": [[295, "neural_compressor.experimental.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.experimental.data.transforms.transform)": [[295, "neural_compressor.experimental.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.experimental.data.transforms.transform)": [[295, "neural_compressor.experimental.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.transforms.transform)": [[295, "neural_compressor.experimental.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.experimental.data.transforms.transform)": [[295, "neural_compressor.experimental.data.transforms.transform.get_final_text"]], "get_torchvision_map() (in module neural_compressor.experimental.data.transforms.transform)": [[295, "neural_compressor.experimental.data.transforms.transform.get_torchvision_map"]], "neural_compressor.experimental.data.transforms.transform": [[295, "module-neural_compressor.experimental.data.transforms.transform"]], "read_squad_examples() (in module neural_compressor.experimental.data.transforms.transform)": [[295, "neural_compressor.experimental.data.transforms.transform.read_squad_examples"]], "transform_registry() (in module neural_compressor.experimental.data.transforms.transform)": [[295, "neural_compressor.experimental.data.transforms.transform.transform_registry"]], "distillation (class in neural_compressor.experimental.distillation)": [[296, "neural_compressor.experimental.distillation.Distillation"]], "_epoch_ran (neural_compressor.experimental.distillation.distillation attribute)": [[296, "neural_compressor.experimental.distillation.Distillation._epoch_ran"]], "best_model (neural_compressor.experimental.distillation.distillation attribute)": [[296, "neural_compressor.experimental.distillation.Distillation.best_model"]], "best_score (neural_compressor.experimental.distillation.distillation attribute)": [[296, "neural_compressor.experimental.distillation.Distillation.best_score"]], "eval_frequency (neural_compressor.experimental.distillation.distillation attribute)": [[296, "neural_compressor.experimental.distillation.Distillation.eval_frequency"]], "neural_compressor.experimental.distillation": [[296, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[297, "module-neural_compressor.experimental.export"]], "check_model() (in module neural_compressor.experimental.export.qlinear2qdq)": [[298, "neural_compressor.experimental.export.qlinear2qdq.check_model"]], "neural_compressor.experimental.export.qlinear2qdq": [[298, "module-neural_compressor.experimental.export.qlinear2qdq"]], "onnx_qlinear_to_qdq() (in module neural_compressor.experimental.export.qlinear2qdq)": [[298, "neural_compressor.experimental.export.qlinear2qdq.onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.tf2onnx": [[299, "module-neural_compressor.experimental.export.tf2onnx"]], "tf_to_fp32_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[299, "neural_compressor.experimental.export.tf2onnx.tf_to_fp32_onnx"]], "tf_to_int8_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[299, "neural_compressor.experimental.export.tf2onnx.tf_to_int8_onnx"]], "dynamic_quant_export() (in module neural_compressor.experimental.export.torch2onnx)": [[300, "neural_compressor.experimental.export.torch2onnx.dynamic_quant_export"]], "get_node_mapping() (in module neural_compressor.experimental.export.torch2onnx)": [[300, "neural_compressor.experimental.export.torch2onnx.get_node_mapping"]], "get_quantizable_onnx_ops() (in module neural_compressor.experimental.export.torch2onnx)": [[300, "neural_compressor.experimental.export.torch2onnx.get_quantizable_onnx_ops"]], "neural_compressor.experimental.export.torch2onnx": [[300, "module-neural_compressor.experimental.export.torch2onnx"]], "static_quant_export() (in module neural_compressor.experimental.export.torch2onnx)": [[300, "neural_compressor.experimental.export.torch2onnx.static_quant_export"]], "torch_to_fp32_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[300, "neural_compressor.experimental.export.torch2onnx.torch_to_fp32_onnx"]], "torch_to_int8_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[300, "neural_compressor.experimental.export.torch2onnx.torch_to_int8_onnx"]], "graph_optimization (class in neural_compressor.experimental.graph_optimization)": [[301, "neural_compressor.experimental.graph_optimization.Graph_Optimization"]], "neural_compressor.experimental.graph_optimization": [[301, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[302, "module-neural_compressor.experimental"]], "bleu (class in neural_compressor.experimental.metric.bleu)": [[303, "neural_compressor.experimental.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.experimental.metric.bleu)": [[303, "neural_compressor.experimental.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.experimental.metric.bleu)": [[303, "neural_compressor.experimental.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.experimental.metric.bleu.bleu attribute)": [[303, "neural_compressor.experimental.metric.bleu.BLEU.labels"]], "neural_compressor.experimental.metric.bleu": [[303, "module-neural_compressor.experimental.metric.bleu"]], "nondigit_punct_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[303, "neural_compressor.experimental.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.experimental.metric.bleu.bleu attribute)": [[303, "neural_compressor.experimental.metric.bleu.BLEU.predictions"]], "punct_nondigit_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[303, "neural_compressor.experimental.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[303, "neural_compressor.experimental.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.experimental.metric.bleu_util)": [[304, "neural_compressor.experimental.metric.bleu_util.compute_bleu"]], "neural_compressor.experimental.metric.bleu_util": [[304, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[305, "module-neural_compressor.experimental.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.experimental.metric.coco_tools)": [[306, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.experimental.metric.coco_tools)": [[306, "neural_compressor.experimental.metric.coco_tools.COCOWrapper"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.experimental.metric.coco_tools)": [[306, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.experimental.metric.coco_tools)": [[306, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.experimental.metric.coco_tools)": [[306, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "dataset (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[306, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[306, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.experimental.metric.coco_tools": [[306, "module-neural_compressor.experimental.metric.coco_tools"]], "evaluate() (in module neural_compressor.experimental.metric.evaluate_squad)": [[307, "neural_compressor.experimental.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[307, "neural_compressor.experimental.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[307, "neural_compressor.experimental.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.evaluate_squad)": [[307, "neural_compressor.experimental.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.evaluate_squad": [[307, "module-neural_compressor.experimental.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.experimental.metric.f1)": [[308, "neural_compressor.experimental.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.experimental.metric.f1)": [[308, "neural_compressor.experimental.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.f1)": [[308, "neural_compressor.experimental.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[308, "module-neural_compressor.experimental.metric.f1"]], "normalize_answer() (in module neural_compressor.experimental.metric.f1)": [[308, "neural_compressor.experimental.metric.f1.normalize_answer"]], "neural_compressor.experimental.metric": [[309, "module-neural_compressor.experimental.metric"]], "accuracy (class in neural_compressor.experimental.metric.metric)": [[310, "neural_compressor.experimental.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.experimental.metric.metric)": [[310, "neural_compressor.experimental.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.experimental.metric.metric)": [[310, "neural_compressor.experimental.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.experimental.metric.metric)": [[310, "neural_compressor.experimental.metric.metric.F1"]], "generaltopk (class in neural_compressor.experimental.metric.metric)": [[310, "neural_compressor.experimental.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.experimental.metric.metric)": [[310, "neural_compressor.experimental.metric.metric.Loss"]], "mae (class in neural_compressor.experimental.metric.metric)": [[310, "neural_compressor.experimental.metric.metric.MAE"]], "metrics (class in neural_compressor.experimental.metric.metric)": [[310, "neural_compressor.experimental.metric.metric.METRICS"]], "mse (class in neural_compressor.experimental.metric.metric)": [[310, "neural_compressor.experimental.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.experimental.metric.metric)": [[310, "neural_compressor.experimental.metric.metric.MXNetMetrics"]], "onnxrtglue (class in neural_compressor.experimental.metric.metric)": [[310, "neural_compressor.experimental.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.experimental.metric.metric)": [[310, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.experimental.metric.metric)": [[310, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.experimental.metric.metric)": [[310, "neural_compressor.experimental.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.experimental.metric.metric)": [[310, "neural_compressor.experimental.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.experimental.metric.metric)": [[310, "neural_compressor.experimental.metric.metric.RMSE"]], "roc (class in neural_compressor.experimental.metric.metric)": [[310, "neural_compressor.experimental.metric.metric.ROC"]], "squadf1 (class in neural_compressor.experimental.metric.metric)": [[310, "neural_compressor.experimental.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.experimental.metric.metric)": [[310, "neural_compressor.experimental.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.experimental.metric.metric)": [[310, "neural_compressor.experimental.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.experimental.metric.metric)": [[310, "neural_compressor.experimental.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.experimental.metric.metric)": [[310, "neural_compressor.experimental.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.experimental.metric.metric)": [[310, "neural_compressor.experimental.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.experimental.metric.metric)": [[310, "neural_compressor.experimental.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.experimental.metric.metric)": [[310, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.experimental.metric.metric)": [[310, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.experimental.metric.metric.mae attribute)": [[310, "neural_compressor.experimental.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.experimental.metric.metric.mse attribute)": [[310, "neural_compressor.experimental.metric.metric.MSE.compare_label"]], "k (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[310, "neural_compressor.experimental.metric.metric.GeneralTopK.k"]], "k (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[310, "neural_compressor.experimental.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[310, "neural_compressor.experimental.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mae attribute)": [[310, "neural_compressor.experimental.metric.metric.MAE.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mse attribute)": [[310, "neural_compressor.experimental.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.experimental.metric.metric)": [[310, "neural_compressor.experimental.metric.metric.mIOU"]], "metric_registry() (in module neural_compressor.experimental.metric.metric)": [[310, "neural_compressor.experimental.metric.metric.metric_registry"]], "metrics (neural_compressor.experimental.metric.metric.metrics attribute)": [[310, "neural_compressor.experimental.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.experimental.metric.metric.mxnetmetrics attribute)": [[310, "neural_compressor.experimental.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtitmetrics attribute)": [[310, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtqlmetrics attribute)": [[310, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.pytorchmetrics attribute)": [[310, "neural_compressor.experimental.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.tensorflowmetrics attribute)": [[310, "neural_compressor.experimental.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.experimental.metric.metric.rmse attribute)": [[310, "neural_compressor.experimental.metric.metric.RMSE.mse"]], "neural_compressor.experimental.metric.metric": [[310, "module-neural_compressor.experimental.metric.metric"]], "num_correct (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[310, "neural_compressor.experimental.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[310, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[310, "neural_compressor.experimental.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[310, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[310, "neural_compressor.experimental.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mae attribute)": [[310, "neural_compressor.experimental.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mse attribute)": [[310, "neural_compressor.experimental.metric.metric.MSE.pred_list"]], "sample (neural_compressor.experimental.metric.metric.accuracy attribute)": [[310, "neural_compressor.experimental.metric.metric.Accuracy.sample"]], "sample (neural_compressor.experimental.metric.metric.loss attribute)": [[310, "neural_compressor.experimental.metric.metric.Loss.sample"]], "sum (neural_compressor.experimental.metric.metric.loss attribute)": [[310, "neural_compressor.experimental.metric.metric.Loss.sum"]], "mixedprecision (class in neural_compressor.experimental.mixed_precision)": [[311, "neural_compressor.experimental.mixed_precision.MixedPrecision"]], "neural_compressor.experimental.mixed_precision": [[311, "module-neural_compressor.experimental.mixed_precision"]], "modelconversion (class in neural_compressor.experimental.model_conversion)": [[312, "neural_compressor.experimental.model_conversion.ModelConversion"]], "neural_compressor.experimental.model_conversion": [[312, "module-neural_compressor.experimental.model_conversion"]], "basicnas (class in neural_compressor.experimental.nas.basic_nas)": [[313, "neural_compressor.experimental.nas.basic_nas.BasicNAS"]], "neural_compressor.experimental.nas.basic_nas": [[313, "module-neural_compressor.experimental.nas.basic_nas"]], "dynas (class in neural_compressor.experimental.nas.dynas)": [[314, "neural_compressor.experimental.nas.dynas.DyNAS"]], "neural_compressor.experimental.nas.dynas": [[314, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas": [[315, "module-neural_compressor.experimental.nas"]], "nas (class in neural_compressor.experimental.nas.nas)": [[316, "neural_compressor.experimental.nas.nas.NAS"]], "nasbase (class in neural_compressor.experimental.nas.nas)": [[316, "neural_compressor.experimental.nas.nas.NASBase"]], "neural_compressor.experimental.nas.nas": [[316, "module-neural_compressor.experimental.nas.nas"]], "create_search_space_pool() (in module neural_compressor.experimental.nas.nas_utils)": [[317, "neural_compressor.experimental.nas.nas_utils.create_search_space_pool"]], "find_pareto_front() (in module neural_compressor.experimental.nas.nas_utils)": [[317, "neural_compressor.experimental.nas.nas_utils.find_pareto_front"]], "nas_registry() (in module neural_compressor.experimental.nas.nas_utils)": [[317, "neural_compressor.experimental.nas.nas_utils.nas_registry"]], "neural_compressor.experimental.nas.nas_utils": [[317, "module-neural_compressor.experimental.nas.nas_utils"]], "bayesianoptimizationsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[318, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher"]], "gridsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[318, "neural_compressor.experimental.nas.search_algorithms.GridSearcher"]], "randomsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[318, "neural_compressor.experimental.nas.search_algorithms.RandomSearcher"]], "searcher (class in neural_compressor.experimental.nas.search_algorithms)": [[318, "neural_compressor.experimental.nas.search_algorithms.Searcher"]], "neural_compressor.experimental.nas.search_algorithms": [[318, "module-neural_compressor.experimental.nas.search_algorithms"]], "gradientsensitivitypruner (class in neural_compressor.experimental.pruner_legacy.gradient_sensitivity)": [[319, "neural_compressor.experimental.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[319, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"]], "grouplassopruner (class in neural_compressor.experimental.pruner_legacy.group_lasso)": [[320, "neural_compressor.experimental.pruner_legacy.group_lasso.GroupLassoPruner"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[320, "module-neural_compressor.experimental.pruner_legacy.group_lasso"]], "neural_compressor.experimental.pruner_legacy": [[321, "module-neural_compressor.experimental.pruner_legacy"]], "basicmagnitudepruner (class in neural_compressor.experimental.pruner_legacy.magnitude)": [[322, "neural_compressor.experimental.pruner_legacy.magnitude.BasicMagnitudePruner"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[322, "module-neural_compressor.experimental.pruner_legacy.magnitude"]], "patternlockpruner (class in neural_compressor.experimental.pruner_legacy.pattern_lock)": [[323, "neural_compressor.experimental.pruner_legacy.pattern_lock.PatternLockPruner"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[323, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"]], "pruner (class in neural_compressor.experimental.pruner_legacy.pruner)": [[324, "neural_compressor.experimental.pruner_legacy.pruner.Pruner"]], "neural_compressor.experimental.pruner_legacy.pruner": [[324, "module-neural_compressor.experimental.pruner_legacy.pruner"]], "pruner_registry() (in module neural_compressor.experimental.pruner_legacy.pruner)": [[324, "neural_compressor.experimental.pruner_legacy.pruner.pruner_registry"]], "pruning (class in neural_compressor.experimental.pruning)": [[325, "neural_compressor.experimental.pruning.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning)": [[325, "neural_compressor.experimental.pruning.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning.pruning attribute)": [[325, "neural_compressor.experimental.pruning.Pruning.conf"]], "neural_compressor.experimental.pruning": [[325, "module-neural_compressor.experimental.pruning"]], "pruners (neural_compressor.experimental.pruning.pruning attribute)": [[325, "neural_compressor.experimental.pruning.Pruning.pruners"]], "neural_compressor.experimental.pruning_recipes": [[326, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[327, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "patterns (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[328, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS"]], "patternbase (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[328, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[328, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "pattern_registry() (in module neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[328, "neural_compressor.experimental.pruning_recipes.patterns.pattern.pattern_registry"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns.pattern.patterns attribute)": [[328, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS.patterns"]], "tilepatternbase (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[329, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase"]], "tilepattern_1x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[329, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x1"]], "tilepattern_1x16 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[329, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x16"]], "tilepattern_1x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[329, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x2"]], "tilepattern_2x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[329, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_2x2"]], "tilepattern_4x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[329, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_4x1"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[329, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "pruning (class in neural_compressor.experimental.pruning_v2)": [[330, "neural_compressor.experimental.pruning_v2.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning_v2)": [[330, "neural_compressor.experimental.pruning_v2.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning_v2.pruning attribute)": [[330, "neural_compressor.experimental.pruning_v2.Pruning.conf"]], "neural_compressor.experimental.pruning_v2": [[330, "module-neural_compressor.experimental.pruning_v2"]], "pruners (neural_compressor.experimental.pruning_v2.pruning attribute)": [[330, "neural_compressor.experimental.pruning_v2.Pruning.pruners"]], "neural_compressor.experimental.pytorch_pruner": [[331, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[332, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "m (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[333, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.M"]], "n (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[333, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.N"]], "pattern (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[333, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern"]], "patternninm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[333, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM"]], "patternnxm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[333, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM"]], "block_size (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm attribute)": [[333, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.block_size"]], "get_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[333, "neural_compressor.experimental.pytorch_pruner.patterns.get_pattern"]], "is_global (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[333, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.is_global"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[333, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "pattern (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[333, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.pattern"]], "register_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[333, "neural_compressor.experimental.pytorch_pruner.patterns.register_pattern"]], "check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[334, "neural_compressor.experimental.pytorch_pruner.prune_utils.check_config"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[334, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "parse_not_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[334, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_not_to_prune"]], "parse_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[334, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_to_prune"]], "process_and_check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[334, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_and_check_config"]], "process_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[334, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_config"]], "reset_non_value_to_default() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[334, "neural_compressor.experimental.pytorch_pruner.prune_utils.reset_non_value_to_default"]], "magnitudepruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[335, "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner"]], "patternlockpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[335, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner"]], "pruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[335, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner"]], "snipmomentumpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[335, "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner"]], "snippruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[335, "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner"]], "config (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[335, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.config"]], "current_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[335, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.current_sparsity_ratio"]], "end_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[335, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.end_step"]], "get_pruner() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[335, "neural_compressor.experimental.pytorch_pruner.pruner.get_pruner"]], "global_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[335, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.global_step"]], "masks (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[335, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.masks"]], "max_sparsity_ratio_per_layer (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[335, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.max_sparsity_ratio_per_layer"]], "modules (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[335, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.modules"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[335, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "pattern (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[335, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.pattern"]], "register_pruners() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[335, "neural_compressor.experimental.pytorch_pruner.pruner.register_pruners"]], "scheduler (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[335, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scheduler"]], "scores (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[335, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scores"]], "start_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[335, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.start_step"]], "target_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[335, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.target_sparsity_ratio"]], "update_frequency_on_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[335, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.update_frequency_on_step"]], "pruning (class in neural_compressor.experimental.pytorch_pruner.pruning)": [[336, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning"]], "config_file_path (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[336, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.config_file_path"]], "model (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[336, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.model"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[336, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "pruner_info (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[336, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruner_info"]], "pruners (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[336, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruners"]], "iterativescheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[337, "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[337, "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler"]], "scheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[337, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler"]], "config (neural_compressor.experimental.pytorch_pruner.scheduler.scheduler attribute)": [[337, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler.config"]], "get_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[337, "neural_compressor.experimental.pytorch_pruner.scheduler.get_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[337, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "register_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[337, "neural_compressor.experimental.pytorch_pruner.scheduler.register_scheduler"]], "quantization (class in neural_compressor.experimental.quantization)": [[338, "neural_compressor.experimental.quantization.Quantization"]], "neural_compressor.experimental.quantization": [[338, "module-neural_compressor.experimental.quantization"]], "scheduler (class in neural_compressor.experimental.scheduler)": [[339, "neural_compressor.experimental.scheduler.Scheduler"]], "neural_compressor.experimental.scheduler": [[339, "module-neural_compressor.experimental.scheduler"]], "automixedprecisiontunestrategy (class in neural_compressor.experimental.strategy.auto_mixed_precision)": [[340, "neural_compressor.experimental.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[340, "module-neural_compressor.experimental.strategy.auto_mixed_precision"]], "basictunestrategy (class in neural_compressor.experimental.strategy.basic)": [[341, "neural_compressor.experimental.strategy.basic.BasicTuneStrategy"]], "neural_compressor.experimental.strategy.basic": [[341, "module-neural_compressor.experimental.strategy.basic"]], "bayesianoptimization (class in neural_compressor.experimental.strategy.bayesian)": [[342, "neural_compressor.experimental.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.experimental.strategy.bayesian)": [[342, "neural_compressor.experimental.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.experimental.strategy.bayesian)": [[342, "neural_compressor.experimental.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.experimental.strategy.bayesian)": [[342, "neural_compressor.experimental.strategy.bayesian.acq_max"]], "neural_compressor.experimental.strategy.bayesian": [[342, "module-neural_compressor.experimental.strategy.bayesian"]], "exhaustivetunestrategy (class in neural_compressor.experimental.strategy.exhaustive)": [[343, "neural_compressor.experimental.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.experimental.strategy.exhaustive": [[343, "module-neural_compressor.experimental.strategy.exhaustive"]], "neural_compressor.experimental.strategy": [[344, "module-neural_compressor.experimental.strategy"]], "msetunestrategy (class in neural_compressor.experimental.strategy.mse)": [[345, "neural_compressor.experimental.strategy.mse.MSETuneStrategy"]], "neural_compressor.experimental.strategy.mse": [[345, "module-neural_compressor.experimental.strategy.mse"]], "mse_v2tunestrategy (class in neural_compressor.experimental.strategy.mse_v2)": [[346, "neural_compressor.experimental.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.experimental.strategy.mse_v2": [[346, "module-neural_compressor.experimental.strategy.mse_v2"]], "randomtunestrategy (class in neural_compressor.experimental.strategy.random)": [[347, "neural_compressor.experimental.strategy.random.RandomTuneStrategy"]], "neural_compressor.experimental.strategy.random": [[347, "module-neural_compressor.experimental.strategy.random"]], "tunestrategy (class in neural_compressor.experimental.strategy.strategy)": [[348, "neural_compressor.experimental.strategy.strategy.TuneStrategy"]], "neural_compressor.experimental.strategy.strategy": [[348, "module-neural_compressor.experimental.strategy.strategy"]], "strategy_registry() (in module neural_compressor.experimental.strategy.strategy)": [[348, "neural_compressor.experimental.strategy.strategy.strategy_registry"]], "neural_compressor.experimental.strategy.utils.constant": [[349, "module-neural_compressor.experimental.strategy.utils.constant"]], "neural_compressor.experimental.strategy.utils": [[350, "module-neural_compressor.experimental.strategy.utils"]], "fallbacktuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[351, "neural_compressor.experimental.strategy.utils.tuning_sampler.FallbackTuningSampler"]], "modelwisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[351, "neural_compressor.experimental.strategy.utils.tuning_sampler.ModelWiseTuningSampler"]], "optypewisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[351, "neural_compressor.experimental.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler"]], "opwisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[351, "neural_compressor.experimental.strategy.utils.tuning_sampler.OpWiseTuningSampler"]], "smoothquantsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[351, "neural_compressor.experimental.strategy.utils.tuning_sampler.SmoothQuantSampler"]], "tuningorder (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[351, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningOrder"]], "tuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[351, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningSampler"]], "tuningsamplerregistry (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[351, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningSamplerRegistry"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[351, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"]], "tuningitem (class in neural_compressor.experimental.strategy.utils.tuning_space)": [[352, "neural_compressor.experimental.strategy.utils.tuning_space.TuningItem"]], "tuningspace (class in neural_compressor.experimental.strategy.utils.tuning_space)": [[352, "neural_compressor.experimental.strategy.utils.tuning_space.TuningSpace"]], "initial_tuning_cfg_with_quant_mode() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[352, "neural_compressor.experimental.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[352, "module-neural_compressor.experimental.strategy.utils.tuning_space"]], "pattern_to_internal() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[352, "neural_compressor.experimental.strategy.utils.tuning_space.pattern_to_internal"]], "pattern_to_path() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[352, "neural_compressor.experimental.strategy.utils.tuning_space.pattern_to_path"]], "quant_mode_from_pattern() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[352, "neural_compressor.experimental.strategy.utils.tuning_space.quant_mode_from_pattern"]], "optuningconfig (class in neural_compressor.experimental.strategy.utils.tuning_structs)": [[353, "neural_compressor.experimental.strategy.utils.tuning_structs.OpTuningConfig"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[353, "module-neural_compressor.experimental.strategy.utils.tuning_structs"]], "ordereddefaultdict (class in neural_compressor.experimental.strategy.utils.utility)": [[354, "neural_compressor.experimental.strategy.utils.utility.OrderedDefaultDict"]], "extract_data_type() (in module neural_compressor.experimental.strategy.utils.utility)": [[354, "neural_compressor.experimental.strategy.utils.utility.extract_data_type"]], "get_adaptor_name() (in module neural_compressor.experimental.strategy.utils.utility)": [[354, "neural_compressor.experimental.strategy.utils.utility.get_adaptor_name"]], "neural_compressor.experimental.strategy.utils.utility": [[354, "module-neural_compressor.experimental.strategy.utils.utility"]], "reverted_data_type() (in module neural_compressor.experimental.strategy.utils.utility)": [[354, "neural_compressor.experimental.strategy.utils.utility.reverted_data_type"]], "neural_compressor": [[355, "module-neural_compressor"]], "bleu (class in neural_compressor.metric.bleu)": [[356, "neural_compressor.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.metric.bleu)": [[356, "neural_compressor.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.metric.bleu)": [[356, "neural_compressor.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.metric.bleu.bleu attribute)": [[356, "neural_compressor.metric.bleu.BLEU.labels"]], "neural_compressor.metric.bleu": [[356, "module-neural_compressor.metric.bleu"]], "nondigit_punct_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[356, "neural_compressor.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.metric.bleu.bleu attribute)": [[356, "neural_compressor.metric.bleu.BLEU.predictions"]], "punct_nondigit_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[356, "neural_compressor.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[356, "neural_compressor.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.metric.bleu_util)": [[357, "neural_compressor.metric.bleu_util.compute_bleu"]], "neural_compressor.metric.bleu_util": [[357, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[358, "module-neural_compressor.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.metric.coco_tools)": [[359, "neural_compressor.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.metric.coco_tools)": [[359, "neural_compressor.metric.coco_tools.COCOWrapper"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.metric.coco_tools)": [[359, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.metric.coco_tools)": [[359, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.metric.coco_tools)": [[359, "neural_compressor.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "dataset (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[359, "neural_compressor.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[359, "neural_compressor.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.metric.coco_tools": [[359, "module-neural_compressor.metric.coco_tools"]], "evaluate() (in module neural_compressor.metric.evaluate_squad)": [[360, "neural_compressor.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.metric.evaluate_squad)": [[360, "neural_compressor.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.metric.evaluate_squad)": [[360, "neural_compressor.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.evaluate_squad)": [[360, "neural_compressor.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.metric.evaluate_squad": [[360, "module-neural_compressor.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.metric.f1)": [[361, "neural_compressor.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.metric.f1)": [[361, "neural_compressor.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.f1)": [[361, "neural_compressor.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[361, "module-neural_compressor.metric.f1"]], "normalize_answer() (in module neural_compressor.metric.f1)": [[361, "neural_compressor.metric.f1.normalize_answer"]], "neural_compressor.metric": [[362, "module-neural_compressor.metric"]], "accuracy (class in neural_compressor.metric.metric)": [[363, "neural_compressor.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.metric.metric)": [[363, "neural_compressor.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.metric.metric)": [[363, "neural_compressor.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.metric.metric)": [[363, "neural_compressor.metric.metric.F1"]], "generaltopk (class in neural_compressor.metric.metric)": [[363, "neural_compressor.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.metric.metric)": [[363, "neural_compressor.metric.metric.Loss"]], "mae (class in neural_compressor.metric.metric)": [[363, "neural_compressor.metric.metric.MAE"]], "metrics (class in neural_compressor.metric.metric)": [[363, "neural_compressor.metric.metric.METRICS"]], "mse (class in neural_compressor.metric.metric)": [[363, "neural_compressor.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.metric.metric)": [[363, "neural_compressor.metric.metric.MXNetMetrics"]], "metric (class in neural_compressor.metric.metric)": [[363, "neural_compressor.metric.metric.Metric"]], "onnxrtglue (class in neural_compressor.metric.metric)": [[363, "neural_compressor.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.metric.metric)": [[363, "neural_compressor.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.metric.metric)": [[363, "neural_compressor.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.metric.metric)": [[363, "neural_compressor.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.metric.metric)": [[363, "neural_compressor.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.metric.metric)": [[363, "neural_compressor.metric.metric.RMSE"]], "roc (class in neural_compressor.metric.metric)": [[363, "neural_compressor.metric.metric.ROC"]], "squadf1 (class in neural_compressor.metric.metric)": [[363, "neural_compressor.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.metric.metric)": [[363, "neural_compressor.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.metric.metric)": [[363, "neural_compressor.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.metric.metric)": [[363, "neural_compressor.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.metric.metric)": [[363, "neural_compressor.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.metric.metric)": [[363, "neural_compressor.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.metric.metric)": [[363, "neural_compressor.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.metric.metric)": [[363, "neural_compressor.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.metric.metric)": [[363, "neural_compressor.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.metric.metric.mae attribute)": [[363, "neural_compressor.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.metric.metric.mse attribute)": [[363, "neural_compressor.metric.metric.MSE.compare_label"]], "k (neural_compressor.metric.metric.generaltopk attribute)": [[363, "neural_compressor.metric.metric.GeneralTopK.k"]], "k (neural_compressor.metric.metric.tensorflowtopk attribute)": [[363, "neural_compressor.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.metric.metric.accuracy attribute)": [[363, "neural_compressor.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.metric.metric.mae attribute)": [[363, "neural_compressor.metric.metric.MAE.label_list"]], "label_list (neural_compressor.metric.metric.mse attribute)": [[363, "neural_compressor.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.metric.metric)": [[363, "neural_compressor.metric.metric.mIOU"]], "metric_registry() (in module neural_compressor.metric.metric)": [[363, "neural_compressor.metric.metric.metric_registry"]], "metrics (neural_compressor.metric.metric.metrics attribute)": [[363, "neural_compressor.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.metric.metric.mxnetmetrics attribute)": [[363, "neural_compressor.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtitmetrics attribute)": [[363, "neural_compressor.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtqlmetrics attribute)": [[363, "neural_compressor.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.metric.metric.pytorchmetrics attribute)": [[363, "neural_compressor.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.metric.metric.tensorflowmetrics attribute)": [[363, "neural_compressor.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.metric.metric.rmse attribute)": [[363, "neural_compressor.metric.metric.RMSE.mse"]], "neural_compressor.metric.metric": [[363, "module-neural_compressor.metric.metric"]], "num_correct (neural_compressor.metric.metric.generaltopk attribute)": [[363, "neural_compressor.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.metric.metric.tensorflowtopk attribute)": [[363, "neural_compressor.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.metric.metric.generaltopk attribute)": [[363, "neural_compressor.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.metric.metric.tensorflowtopk attribute)": [[363, "neural_compressor.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.metric.metric.accuracy attribute)": [[363, "neural_compressor.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.metric.metric.mae attribute)": [[363, "neural_compressor.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.metric.metric.mse attribute)": [[363, "neural_compressor.metric.metric.MSE.pred_list"]], "register_customer_metric() (in module neural_compressor.metric.metric)": [[363, "neural_compressor.metric.metric.register_customer_metric"]], "sample (neural_compressor.metric.metric.accuracy attribute)": [[363, "neural_compressor.metric.metric.Accuracy.sample"]], "sample (neural_compressor.metric.metric.loss attribute)": [[363, "neural_compressor.metric.metric.Loss.sample"]], "sum (neural_compressor.metric.metric.loss attribute)": [[363, "neural_compressor.metric.metric.Loss.sum"]], "fit() (in module neural_compressor.mix_precision)": [[364, "neural_compressor.mix_precision.fit"]], "neural_compressor.mix_precision": [[364, "module-neural_compressor.mix_precision"]], "basemodel (class in neural_compressor.model.base_model)": [[365, "neural_compressor.model.base_model.BaseModel"]], "neural_compressor.model.base_model": [[365, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[366, "module-neural_compressor.model"]], "kerasmodel (class in neural_compressor.model.keras_model)": [[367, "neural_compressor.model.keras_model.KerasModel"]], "neural_compressor.model.keras_model": [[367, "module-neural_compressor.model.keras_model"]], "model (class in neural_compressor.model.model)": [[368, "neural_compressor.model.model.Model"]], "get_model_fwk_name() (in module neural_compressor.model.model)": [[368, "neural_compressor.model.model.get_model_fwk_name"]], "neural_compressor.model.model": [[368, "module-neural_compressor.model.model"]], "mxnetmodel (class in neural_compressor.model.mxnet_model)": [[369, "neural_compressor.model.mxnet_model.MXNetModel"]], "neural_compressor.model.mxnet_model": [[369, "module-neural_compressor.model.mxnet_model"]], "tfslimnetsfactory (class in neural_compressor.model.nets_factory)": [[370, "neural_compressor.model.nets_factory.TFSlimNetsFactory"]], "neural_compressor.model.nets_factory": [[370, "module-neural_compressor.model.nets_factory"]], "onnxmodel (class in neural_compressor.model.onnx_model)": [[371, "neural_compressor.model.onnx_model.ONNXModel"]], "neural_compressor.model.onnx_model": [[371, "module-neural_compressor.model.onnx_model"]], "tensorflowbasemodel (class in neural_compressor.model.tensorflow_model)": [[372, "neural_compressor.model.tensorflow_model.TensorflowBaseModel"]], "tensorflowcheckpointmodel (class in neural_compressor.model.tensorflow_model)": [[372, "neural_compressor.model.tensorflow_model.TensorflowCheckpointModel"]], "tensorflowllmmodel (class in neural_compressor.model.tensorflow_model)": [[372, "neural_compressor.model.tensorflow_model.TensorflowLLMModel"]], "tensorflowmodel (class in neural_compressor.model.tensorflow_model)": [[372, "neural_compressor.model.tensorflow_model.TensorflowModel"]], "tensorflowqatmodel (class in neural_compressor.model.tensorflow_model)": [[372, "neural_compressor.model.tensorflow_model.TensorflowQATModel"]], "tensorflowsavedmodelmodel (class in neural_compressor.model.tensorflow_model)": [[372, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel"]], "checkpoint_session() (in module neural_compressor.model.tensorflow_model)": [[372, "neural_compressor.model.tensorflow_model.checkpoint_session"]], "estimator_session() (in module neural_compressor.model.tensorflow_model)": [[372, "neural_compressor.model.tensorflow_model.estimator_session"]], "frozen_pb_session() (in module neural_compressor.model.tensorflow_model)": [[372, "neural_compressor.model.tensorflow_model.frozen_pb_session"]], "get_model_type() (in module neural_compressor.model.tensorflow_model)": [[372, "neural_compressor.model.tensorflow_model.get_model_type"]], "graph_def_session() (in module neural_compressor.model.tensorflow_model)": [[372, "neural_compressor.model.tensorflow_model.graph_def_session"]], "graph_session() (in module neural_compressor.model.tensorflow_model)": [[372, "neural_compressor.model.tensorflow_model.graph_session"]], "keras_session() (in module neural_compressor.model.tensorflow_model)": [[372, "neural_compressor.model.tensorflow_model.keras_session"]], "load_saved_model() (in module neural_compressor.model.tensorflow_model)": [[372, "neural_compressor.model.tensorflow_model.load_saved_model"]], "neural_compressor.model.tensorflow_model": [[372, "module-neural_compressor.model.tensorflow_model"]], "saved_model_session() (in module neural_compressor.model.tensorflow_model)": [[372, "neural_compressor.model.tensorflow_model.saved_model_session"]], "slim_session() (in module neural_compressor.model.tensorflow_model)": [[372, "neural_compressor.model.tensorflow_model.slim_session"]], "validate_and_inference_input_output() (in module neural_compressor.model.tensorflow_model)": [[372, "neural_compressor.model.tensorflow_model.validate_and_inference_input_output"]], "validate_graph_node() (in module neural_compressor.model.tensorflow_model)": [[372, "neural_compressor.model.tensorflow_model.validate_graph_node"]], "ipexmodel (class in neural_compressor.model.torch_model)": [[373, "neural_compressor.model.torch_model.IPEXModel"]], "pytorchbasemodel (class in neural_compressor.model.torch_model)": [[373, "neural_compressor.model.torch_model.PyTorchBaseModel"]], "pytorchfxmodel (class in neural_compressor.model.torch_model)": [[373, "neural_compressor.model.torch_model.PyTorchFXModel"]], "pytorchmodel (class in neural_compressor.model.torch_model)": [[373, "neural_compressor.model.torch_model.PyTorchModel"]], "neural_compressor.model.torch_model": [[373, "module-neural_compressor.model.torch_model"]], "accuracy (class in neural_compressor.objective)": [[374, "neural_compressor.objective.Accuracy"]], "footprint (class in neural_compressor.objective)": [[374, "neural_compressor.objective.Footprint"]], "modelsize (class in neural_compressor.objective)": [[374, "neural_compressor.objective.ModelSize"]], "multiobjective (class in neural_compressor.objective)": [[374, "neural_compressor.objective.MultiObjective"]], "objective (class in neural_compressor.objective)": [[374, "neural_compressor.objective.Objective"]], "performance (class in neural_compressor.objective)": [[374, "neural_compressor.objective.Performance"]], "neural_compressor.objective": [[374, "module-neural_compressor.objective"]], "objective_custom_registry() (in module neural_compressor.objective)": [[374, "neural_compressor.objective.objective_custom_registry"]], "objective_registry() (in module neural_compressor.objective)": [[374, "neural_compressor.objective.objective_registry"]], "neural_compressor.profiling": [[375, "module-neural_compressor.profiling"]], "parserfactory (class in neural_compressor.profiling.parser.factory)": [[376, "neural_compressor.profiling.parser.factory.ParserFactory"]], "neural_compressor.profiling.parser.factory": [[376, "module-neural_compressor.profiling.parser.factory"]], "neural_compressor.profiling.parser": [[377, "module-neural_compressor.profiling.parser"]], "onnxrtparserfactory (class in neural_compressor.profiling.parser.onnx_parser.factory)": [[378, "neural_compressor.profiling.parser.onnx_parser.factory.OnnxrtParserFactory"]], "neural_compressor.profiling.parser.onnx_parser.factory": [[378, "module-neural_compressor.profiling.parser.onnx_parser.factory"]], "neural_compressor.profiling.parser.onnx_parser": [[379, "module-neural_compressor.profiling.parser.onnx_parser"]], "onnxprofilingparser (class in neural_compressor.profiling.parser.onnx_parser.parser)": [[380, "neural_compressor.profiling.parser.onnx_parser.parser.OnnxProfilingParser"]], "neural_compressor.profiling.parser.onnx_parser.parser": [[380, "module-neural_compressor.profiling.parser.onnx_parser.parser"]], "profilingparser (class in neural_compressor.profiling.parser.parser)": [[381, "neural_compressor.profiling.parser.parser.ProfilingParser"]], "neural_compressor.profiling.parser.parser": [[381, "module-neural_compressor.profiling.parser.parser"]], "profilingresult (class in neural_compressor.profiling.parser.result)": [[382, "neural_compressor.profiling.parser.result.ProfilingResult"]], "neural_compressor.profiling.parser.result": [[382, "module-neural_compressor.profiling.parser.result"]], "tensorflowparserfactory (class in neural_compressor.profiling.parser.tensorflow_parser.factory)": [[383, "neural_compressor.profiling.parser.tensorflow_parser.factory.TensorFlowParserFactory"]], "neural_compressor.profiling.parser.tensorflow_parser.factory": [[383, "module-neural_compressor.profiling.parser.tensorflow_parser.factory"]], "neural_compressor.profiling.parser.tensorflow_parser": [[384, "module-neural_compressor.profiling.parser.tensorflow_parser"]], "tensorflowprofilingparser (class in neural_compressor.profiling.parser.tensorflow_parser.parser)": [[385, "neural_compressor.profiling.parser.tensorflow_parser.parser.TensorFlowProfilingParser"]], "neural_compressor.profiling.parser.tensorflow_parser.parser": [[385, "module-neural_compressor.profiling.parser.tensorflow_parser.parser"]], "profilerfactory (class in neural_compressor.profiling.profiler.factory)": [[386, "neural_compressor.profiling.profiler.factory.ProfilerFactory"]], "neural_compressor.profiling.profiler.factory": [[386, "module-neural_compressor.profiling.profiler.factory"]], "neural_compressor.profiling.profiler": [[387, "module-neural_compressor.profiling.profiler"]], "profilerfactory (class in neural_compressor.profiling.profiler.onnxrt_profiler.factory)": [[388, "neural_compressor.profiling.profiler.onnxrt_profiler.factory.ProfilerFactory"]], "neural_compressor.profiling.profiler.onnxrt_profiler.factory": [[388, "module-neural_compressor.profiling.profiler.onnxrt_profiler.factory"]], "neural_compressor.profiling.profiler.onnxrt_profiler": [[389, "module-neural_compressor.profiling.profiler.onnxrt_profiler"]], "profiler (class in neural_compressor.profiling.profiler.onnxrt_profiler.profiler)": [[390, "neural_compressor.profiling.profiler.onnxrt_profiler.profiler.Profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.profiler": [[390, "module-neural_compressor.profiling.profiler.onnxrt_profiler.profiler"]], "create_onnx_config() (in module neural_compressor.profiling.profiler.onnxrt_profiler.utils)": [[391, "neural_compressor.profiling.profiler.onnxrt_profiler.utils.create_onnx_config"]], "neural_compressor.profiling.profiler.onnxrt_profiler.utils": [[391, "module-neural_compressor.profiling.profiler.onnxrt_profiler.utils"]], "profiler (class in neural_compressor.profiling.profiler.profiler)": [[392, "neural_compressor.profiling.profiler.profiler.Profiler"]], "neural_compressor.profiling.profiler.profiler": [[392, "module-neural_compressor.profiling.profiler.profiler"]], "profilerfactory (class in neural_compressor.profiling.profiler.tensorflow_profiler.factory)": [[393, "neural_compressor.profiling.profiler.tensorflow_profiler.factory.ProfilerFactory"]], "neural_compressor.profiling.profiler.tensorflow_profiler.factory": [[393, "module-neural_compressor.profiling.profiler.tensorflow_profiler.factory"]], "neural_compressor.profiling.profiler.tensorflow_profiler": [[394, "module-neural_compressor.profiling.profiler.tensorflow_profiler"]], "profiler (class in neural_compressor.profiling.profiler.tensorflow_profiler.profiler)": [[395, "neural_compressor.profiling.profiler.tensorflow_profiler.profiler.Profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.profiler": [[395, "module-neural_compressor.profiling.profiler.tensorflow_profiler.profiler"]], "create_tf_config() (in module neural_compressor.profiling.profiler.tensorflow_profiler.utils)": [[396, "neural_compressor.profiling.profiler.tensorflow_profiler.utils.create_tf_config"]], "delete_assign() (in module neural_compressor.profiling.profiler.tensorflow_profiler.utils)": [[396, "neural_compressor.profiling.profiler.tensorflow_profiler.utils.delete_assign"]], "neural_compressor.profiling.profiler.tensorflow_profiler.utils": [[396, "module-neural_compressor.profiling.profiler.tensorflow_profiler.utils"]], "set_eager_execution() (in module neural_compressor.profiling.profiler.tensorflow_profiler.utils)": [[396, "neural_compressor.profiling.profiler.tensorflow_profiler.utils.set_eager_execution"]], "fit() (in module neural_compressor.quantization)": [[397, "neural_compressor.quantization.fit"]], "neural_compressor.quantization": [[397, "module-neural_compressor.quantization"]], "autotunestrategy (class in neural_compressor.strategy.auto)": [[398, "neural_compressor.strategy.auto.AutoTuneStrategy"]], "neural_compressor.strategy.auto": [[398, "module-neural_compressor.strategy.auto"]], "automixedprecisiontunestrategy (class in neural_compressor.strategy.auto_mixed_precision)": [[399, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[399, "module-neural_compressor.strategy.auto_mixed_precision"]], "basictunestrategy (class in neural_compressor.strategy.basic)": [[400, "neural_compressor.strategy.basic.BasicTuneStrategy"]], "neural_compressor.strategy.basic": [[400, "module-neural_compressor.strategy.basic"]], "bayesianoptimization (class in neural_compressor.strategy.bayesian)": [[401, "neural_compressor.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.strategy.bayesian)": [[401, "neural_compressor.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.strategy.bayesian)": [[401, "neural_compressor.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.strategy.bayesian)": [[401, "neural_compressor.strategy.bayesian.acq_max"]], "neural_compressor.strategy.bayesian": [[401, "module-neural_compressor.strategy.bayesian"]], "conservativetunestrategy (class in neural_compressor.strategy.conservative)": [[402, "neural_compressor.strategy.conservative.ConservativeTuneStrategy"]], "neural_compressor.strategy.conservative": [[402, "module-neural_compressor.strategy.conservative"]], "exhaustivetunestrategy (class in neural_compressor.strategy.exhaustive)": [[403, "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[403, "module-neural_compressor.strategy.exhaustive"]], "hawq_v2tunestrategy (class in neural_compressor.strategy.hawq_v2)": [[404, "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[404, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[405, "module-neural_compressor.strategy"]], "msetunestrategy (class in neural_compressor.strategy.mse)": [[406, "neural_compressor.strategy.mse.MSETuneStrategy"]], "neural_compressor.strategy.mse": [[406, "module-neural_compressor.strategy.mse"]], "mse_v2tunestrategy (class in neural_compressor.strategy.mse_v2)": [[407, "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.strategy.mse_v2": [[407, "module-neural_compressor.strategy.mse_v2"]], "randomtunestrategy (class in neural_compressor.strategy.random)": [[408, "neural_compressor.strategy.random.RandomTuneStrategy"]], "neural_compressor.strategy.random": [[408, "module-neural_compressor.strategy.random"]], "tunestrategy (class in neural_compressor.strategy.strategy)": [[409, "neural_compressor.strategy.strategy.TuneStrategy"]], "tunestrategymeta (class in neural_compressor.strategy.strategy)": [[409, "neural_compressor.strategy.strategy.TuneStrategyMeta"]], "neural_compressor.strategy.strategy": [[409, "module-neural_compressor.strategy.strategy"]], "strategy_registry() (in module neural_compressor.strategy.strategy)": [[409, "neural_compressor.strategy.strategy.strategy_registry"]], "neural_compressor.strategy.utils.constant": [[410, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[411, "module-neural_compressor.strategy.utils"]], "blockfallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[412, "neural_compressor.strategy.utils.tuning_sampler.BlockFallbackTuningSampler"]], "fallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[412, "neural_compressor.strategy.utils.tuning_sampler.FallbackTuningSampler"]], "lowerbitssampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[412, "neural_compressor.strategy.utils.tuning_sampler.LowerBitsSampler"]], "modelwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[412, "neural_compressor.strategy.utils.tuning_sampler.ModelWiseTuningSampler"]], "optypewisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[412, "neural_compressor.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler"]], "opwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[412, "neural_compressor.strategy.utils.tuning_sampler.OpWiseTuningSampler"]], "smoothquantsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[412, "neural_compressor.strategy.utils.tuning_sampler.SmoothQuantSampler"]], "tuningorder (class in neural_compressor.strategy.utils.tuning_sampler)": [[412, "neural_compressor.strategy.utils.tuning_sampler.TuningOrder"]], "tuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[412, "neural_compressor.strategy.utils.tuning_sampler.TuningSampler"]], "weightonlyquantsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[412, "neural_compressor.strategy.utils.tuning_sampler.WeightOnlyQuantSampler"]], "neural_compressor.strategy.utils.tuning_sampler": [[412, "module-neural_compressor.strategy.utils.tuning_sampler"]], "tuningitem (class in neural_compressor.strategy.utils.tuning_space)": [[413, "neural_compressor.strategy.utils.tuning_space.TuningItem"]], "tuningspace (class in neural_compressor.strategy.utils.tuning_space)": [[413, "neural_compressor.strategy.utils.tuning_space.TuningSpace"]], "initial_tuning_cfg_with_quant_mode() (in module neural_compressor.strategy.utils.tuning_space)": [[413, "neural_compressor.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode"]], "neural_compressor.strategy.utils.tuning_space": [[413, "module-neural_compressor.strategy.utils.tuning_space"]], "pattern_to_internal() (in module neural_compressor.strategy.utils.tuning_space)": [[413, "neural_compressor.strategy.utils.tuning_space.pattern_to_internal"]], "pattern_to_path() (in module neural_compressor.strategy.utils.tuning_space)": [[413, "neural_compressor.strategy.utils.tuning_space.pattern_to_path"]], "quant_mode_from_pattern() (in module neural_compressor.strategy.utils.tuning_space)": [[413, "neural_compressor.strategy.utils.tuning_space.quant_mode_from_pattern"]], "optuningconfig (class in neural_compressor.strategy.utils.tuning_structs)": [[414, "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig"]], "neural_compressor.strategy.utils.tuning_structs": [[414, "module-neural_compressor.strategy.utils.tuning_structs"]], "classregister (class in neural_compressor.strategy.utils.utility)": [[415, "neural_compressor.strategy.utils.utility.ClassRegister"]], "ordereddefaultdict (class in neural_compressor.strategy.utils.utility)": [[415, "neural_compressor.strategy.utils.utility.OrderedDefaultDict"]], "quantoptions (class in neural_compressor.strategy.utils.utility)": [[415, "neural_compressor.strategy.utils.utility.QuantOptions"]], "quanttype (class in neural_compressor.strategy.utils.utility)": [[415, "neural_compressor.strategy.utils.utility.QuantType"]], "build_slave_faker_model() (in module neural_compressor.strategy.utils.utility)": [[415, "neural_compressor.strategy.utils.utility.build_slave_faker_model"]], "extract_data_type() (in module neural_compressor.strategy.utils.utility)": [[415, "neural_compressor.strategy.utils.utility.extract_data_type"]], "get_adaptor_name() (in module neural_compressor.strategy.utils.utility)": [[415, "neural_compressor.strategy.utils.utility.get_adaptor_name"]], "neural_compressor.strategy.utils.utility": [[415, "module-neural_compressor.strategy.utils.utility"]], "preprocess_user_cfg() (in module neural_compressor.strategy.utils.utility)": [[415, "neural_compressor.strategy.utils.utility.preprocess_user_cfg"]], "reverted_data_type() (in module neural_compressor.strategy.utils.utility)": [[415, "neural_compressor.strategy.utils.utility.reverted_data_type"]], "exampleclass (class in neural_compressor.template.api_doc_example)": [[416, "neural_compressor.template.api_doc_example.ExampleClass"]], "attr1 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[416, "neural_compressor.template.api_doc_example.ExampleClass.attr1"]], "attr2 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[416, "neural_compressor.template.api_doc_example.ExampleClass.attr2"]], "attr5 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[416, "neural_compressor.template.api_doc_example.ExampleClass.attr5"]], "attribute1 (in module neural_compressor.template.api_doc_example)": [[416, "neural_compressor.template.api_doc_example.attribute1"]], "function1() (in module neural_compressor.template.api_doc_example)": [[416, "neural_compressor.template.api_doc_example.function1"]], "function2() (in module neural_compressor.template.api_doc_example)": [[416, "neural_compressor.template.api_doc_example.function2"]], "function3() (in module neural_compressor.template.api_doc_example)": [[416, "neural_compressor.template.api_doc_example.function3"]], "generator1() (in module neural_compressor.template.api_doc_example)": [[416, "neural_compressor.template.api_doc_example.generator1"]], "module_debug_level1 (in module neural_compressor.template.api_doc_example)": [[416, "neural_compressor.template.api_doc_example.module_debug_level1"]], "neural_compressor.template.api_doc_example": [[416, "module-neural_compressor.template.api_doc_example"]], "neural_compressor.template": [[417, "module-neural_compressor.template"]], "neural_compressor.tensorflow.algorithms": [[418, "module-neural_compressor.tensorflow.algorithms"]], "neural_compressor.tensorflow.algorithms.static_quantize": [[419, "module-neural_compressor.tensorflow.algorithms.static_quantize"]], "kerasadaptor (class in neural_compressor.tensorflow.algorithms.static_quantize.keras)": [[420, "neural_compressor.tensorflow.algorithms.static_quantize.keras.KerasAdaptor"]], "kerasquery (class in neural_compressor.tensorflow.algorithms.static_quantize.keras)": [[420, "neural_compressor.tensorflow.algorithms.static_quantize.keras.KerasQuery"]], "neural_compressor.tensorflow.algorithms.static_quantize.keras": [[420, "module-neural_compressor.tensorflow.algorithms.static_quantize.keras"]], "neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.conv2d": [[421, "module-neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.conv2d"]], "neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.dense": [[422, "module-neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.dense"]], "neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.depthwise_conv2d": [[423, "module-neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.depthwise_conv2d"]], "neural_compressor.tensorflow.algorithms.static_quantize.keras_utils": [[424, "module-neural_compressor.tensorflow.algorithms.static_quantize.keras_utils"]], "neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.pool2d": [[425, "module-neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.pool2d"]], "neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.quantizer": [[426, "module-neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.quantizer"]], "neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.separable_conv2d": [[427, "module-neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.separable_conv2d"]], "neural_compressor.tensorflow.algorithms.static_quantize.quantize_entry": [[428, "module-neural_compressor.tensorflow.algorithms.static_quantize.quantize_entry"]], "parse_to_keras_tune_cfg() (in module neural_compressor.tensorflow.algorithms.static_quantize.quantize_entry)": [[428, "neural_compressor.tensorflow.algorithms.static_quantize.quantize_entry.parse_to_keras_tune_cfg"]], "static_quantize_entry() (in module neural_compressor.tensorflow.algorithms.static_quantize.quantize_entry)": [[428, "neural_compressor.tensorflow.algorithms.static_quantize.quantize_entry.static_quantize_entry"]], "update_config() (in module neural_compressor.tensorflow.algorithms.static_quantize.quantize_entry)": [[428, "neural_compressor.tensorflow.algorithms.static_quantize.quantize_entry.update_config"]], "neural_compressor.tensorflow": [[429, "module-neural_compressor.tensorflow"]], "backend (class in neural_compressor.tensorflow.quantization.config)": [[430, "neural_compressor.tensorflow.quantization.config.Backend"]], "staticquantconfig (class in neural_compressor.tensorflow.quantization.config)": [[430, "neural_compressor.tensorflow.quantization.config.StaticQuantConfig"]], "get_all_registered_configs() (in module neural_compressor.tensorflow.quantization.config)": [[430, "neural_compressor.tensorflow.quantization.config.get_all_registered_configs"]], "get_default_static_quant_config() (in module neural_compressor.tensorflow.quantization.config)": [[430, "neural_compressor.tensorflow.quantization.config.get_default_static_quant_config"]], "neural_compressor.tensorflow.quantization.config": [[430, "module-neural_compressor.tensorflow.quantization.config"]], "parse_config_from_dict() (in module neural_compressor.tensorflow.quantization.config)": [[430, "neural_compressor.tensorflow.quantization.config.parse_config_from_dict"]], "neural_compressor.tensorflow.quantization": [[431, "module-neural_compressor.tensorflow.quantization"]], "neural_compressor.tensorflow.quantization.quantize": [[432, "module-neural_compressor.tensorflow.quantization.quantize"]], "quantize_model() (in module neural_compressor.tensorflow.quantization.quantize)": [[432, "neural_compressor.tensorflow.quantization.quantize.quantize_model"]], "deep_get() (in module neural_compressor.tensorflow.utils)": [[433, "neural_compressor.tensorflow.utils.deep_get"]], "dump_elapsed_time() (in module neural_compressor.tensorflow.utils)": [[433, "neural_compressor.tensorflow.utils.dump_elapsed_time"]], "neural_compressor.tensorflow.utils": [[433, "module-neural_compressor.tensorflow.utils"]], "register_algo() (in module neural_compressor.tensorflow.utils)": [[433, "neural_compressor.tensorflow.utils.register_algo"]], "version1_gte_version2() (in module neural_compressor.tensorflow.utils)": [[433, "neural_compressor.tensorflow.utils.version1_gte_version2"]], "neural_compressor.torch.algorithms": [[434, "module-neural_compressor.torch.algorithms"]], "gptq (class in neural_compressor.torch.algorithms.weight_only.gptq)": [[435, "neural_compressor.torch.algorithms.weight_only.gptq.GPTQ"]], "gptquantizer (class in neural_compressor.torch.algorithms.weight_only.gptq)": [[435, "neural_compressor.torch.algorithms.weight_only.gptq.GPTQuantizer"]], "apply_gptq_quantize() (in module neural_compressor.torch.algorithms.weight_only.gptq)": [[435, "neural_compressor.torch.algorithms.weight_only.gptq.apply_gptq_quantize"]], "find_layers() (in module neural_compressor.torch.algorithms.weight_only.gptq)": [[435, "neural_compressor.torch.algorithms.weight_only.gptq.find_layers"]], "find_layers_name() (in module neural_compressor.torch.algorithms.weight_only.gptq)": [[435, "neural_compressor.torch.algorithms.weight_only.gptq.find_layers_name"]], "is_leaf() (in module neural_compressor.torch.algorithms.weight_only.gptq)": [[435, "neural_compressor.torch.algorithms.weight_only.gptq.is_leaf"]], "log_quantizable_layers_per_transformer() (in module neural_compressor.torch.algorithms.weight_only.gptq)": [[435, "neural_compressor.torch.algorithms.weight_only.gptq.log_quantizable_layers_per_transformer"]], "neural_compressor.torch.algorithms.weight_only.gptq": [[435, "module-neural_compressor.torch.algorithms.weight_only.gptq"]], "quantize() (in module neural_compressor.torch.algorithms.weight_only.gptq)": [[435, "neural_compressor.torch.algorithms.weight_only.gptq.quantize"]], "trace_gptq_target_blocks() (in module neural_compressor.torch.algorithms.weight_only.gptq)": [[435, "neural_compressor.torch.algorithms.weight_only.gptq.trace_gptq_target_blocks"]], "neural_compressor.torch.algorithms.weight_only": [[436, "module-neural_compressor.torch.algorithms.weight_only"]], "neural_compressor.torch.algorithms.weight_only.rtn": [[437, "module-neural_compressor.torch.algorithms.weight_only.rtn"]], "qdq_weight_actor() (in module neural_compressor.torch.algorithms.weight_only.rtn)": [[437, "neural_compressor.torch.algorithms.weight_only.rtn.qdq_weight_actor"]], "qdq_weight_asym() (in module neural_compressor.torch.algorithms.weight_only.rtn)": [[437, "neural_compressor.torch.algorithms.weight_only.rtn.qdq_weight_asym"]], "qdq_weight_sym() (in module neural_compressor.torch.algorithms.weight_only.rtn)": [[437, "neural_compressor.torch.algorithms.weight_only.rtn.qdq_weight_sym"]], "quant_weight() (in module neural_compressor.torch.algorithms.weight_only.rtn)": [[437, "neural_compressor.torch.algorithms.weight_only.rtn.quant_weight"]], "quant_weight_w_scale() (in module neural_compressor.torch.algorithms.weight_only.rtn)": [[437, "neural_compressor.torch.algorithms.weight_only.rtn.quant_weight_w_scale"]], "quantize_4bit() (in module neural_compressor.torch.algorithms.weight_only.rtn)": [[437, "neural_compressor.torch.algorithms.weight_only.rtn.quantize_4bit"]], "rtn_quantize() (in module neural_compressor.torch.algorithms.weight_only.rtn)": [[437, "neural_compressor.torch.algorithms.weight_only.rtn.rtn_quantize"]], "search_clip() (in module neural_compressor.torch.algorithms.weight_only.rtn)": [[437, "neural_compressor.torch.algorithms.weight_only.rtn.search_clip"]], "neural_compressor.torch.algorithms.weight_only_algos": [[438, "module-neural_compressor.torch.algorithms.weight_only_algos"]], "rtn_quantize_entry() (in module neural_compressor.torch.algorithms.weight_only_algos)": [[438, "neural_compressor.torch.algorithms.weight_only_algos.rtn_quantize_entry"]], "autocast (class in neural_compressor.torch.amp.autocast)": [[439, "neural_compressor.torch.amp.autocast.autocast"]], "neural_compressor.torch.amp.autocast": [[439, "module-neural_compressor.torch.amp.autocast"]], "neural_compressor.torch.amp.fp8.functions": [[440, "module-neural_compressor.torch.amp.fp8.functions"]], "neural_compressor.torch.amp.fp8": [[441, "module-neural_compressor.torch.amp.fp8"]], "neural_compressor.torch.amp": [[442, "module-neural_compressor.torch.amp"]], "neural_compressor.torch": [[443, "module-neural_compressor.torch"]], "backend (class in neural_compressor.torch.quantization.config)": [[444, "neural_compressor.torch.quantization.config.Backend"]], "fp8qconfig (class in neural_compressor.torch.quantization.config)": [[444, "neural_compressor.torch.quantization.config.FP8QConfig"]], "gptqconfig (class in neural_compressor.torch.quantization.config)": [[444, "neural_compressor.torch.quantization.config.GPTQConfig"]], "rtnweightquantconfig (class in neural_compressor.torch.quantization.config)": [[444, "neural_compressor.torch.quantization.config.RTNWeightQuantConfig"]], "get_default_gptq_config() (in module neural_compressor.torch.quantization.config)": [[444, "neural_compressor.torch.quantization.config.get_default_gptq_config"]], "get_default_rtn_config() (in module neural_compressor.torch.quantization.config)": [[444, "neural_compressor.torch.quantization.config.get_default_rtn_config"]], "neural_compressor.torch.quantization.config": [[444, "module-neural_compressor.torch.quantization.config"]], "neural_compressor.torch.quantization.fp8": [[445, "module-neural_compressor.torch.quantization.fp8"]], "neural_compressor.torch.quantization.fp8.modules": [[446, "module-neural_compressor.torch.quantization.fp8.modules"]], "neural_compressor.torch.quantization.fp8.observer": [[447, "module-neural_compressor.torch.quantization.fp8.observer"]], "neural_compressor.torch.quantization.fp8.quantization_impl": [[448, "module-neural_compressor.torch.quantization.fp8.quantization_impl"]], "neural_compressor.torch.quantization": [[449, "module-neural_compressor.torch.quantization"]], "fakeaffinetensorquantfunction (class in neural_compressor.torch.quantization.layers)": [[450, "neural_compressor.torch.quantization.layers.FakeAffineTensorQuantFunction"]], "mullinear (class in neural_compressor.torch.quantization.layers)": [[450, "neural_compressor.torch.quantization.layers.MulLinear"]], "teqlinearfakequant (class in neural_compressor.torch.quantization.layers)": [[450, "neural_compressor.torch.quantization.layers.TEQLinearFakeQuant"]], "neural_compressor.torch.quantization.layers": [[450, "module-neural_compressor.torch.quantization.layers"]], "neural_compressor.torch.quantization.quantize": [[451, "module-neural_compressor.torch.quantization.quantize"]], "quantize() (in module neural_compressor.torch.quantization.quantize)": [[451, "neural_compressor.torch.quantization.quantize.quantize"]], "quantize_dynamic() (in module neural_compressor.torch.quantization.quantize)": [[451, "neural_compressor.torch.quantization.quantize.quantize_dynamic"]], "torchwrapper (class in neural_compressor.torch.tune)": [[452, "neural_compressor.torch.tune.TorchWrapper"]], "neural_compressor.torch.tune": [[452, "module-neural_compressor.torch.tune"]], "neural_compressor.torch.utils.constants": [[453, "module-neural_compressor.torch.utils.constants"]], "neural_compressor.torch.utils": [[454, "module-neural_compressor.torch.utils"]], "fetch_module() (in module neural_compressor.torch.utils.utility)": [[455, "neural_compressor.torch.utils.utility.fetch_module"]], "neural_compressor.torch.utils.utility": [[455, "module-neural_compressor.torch.utils.utility"]], "register_algo() (in module neural_compressor.torch.utils.utility)": [[455, "neural_compressor.torch.utils.utility.register_algo"]], "set_module() (in module neural_compressor.torch.utils.utility)": [[455, "neural_compressor.torch.utils.utility.set_module"]], "callbacks (class in neural_compressor.training)": [[456, "neural_compressor.training.CallBacks"]], "compressionmanager (class in neural_compressor.training)": [[456, "neural_compressor.training.CompressionManager"]], "fit() (in module neural_compressor.training)": [[456, "neural_compressor.training.fit"]], "neural_compressor.training": [[456, "module-neural_compressor.training"]], "prepare_compression() (in module neural_compressor.training)": [[456, "neural_compressor.training.prepare_compression"]], "layerhistogramcollector (class in neural_compressor.utils.collect_layer_histogram)": [[457, "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector"]], "neural_compressor.utils.collect_layer_histogram": [[457, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[458, "module-neural_compressor.utils.constant"]], "create_dataloader() (in module neural_compressor.utils.create_obj_from_config)": [[459, "neural_compressor.utils.create_obj_from_config.create_dataloader"]], "create_dataset() (in module neural_compressor.utils.create_obj_from_config)": [[459, "neural_compressor.utils.create_obj_from_config.create_dataset"]], "create_eval_func() (in module neural_compressor.utils.create_obj_from_config)": [[459, "neural_compressor.utils.create_obj_from_config.create_eval_func"]], "create_train_func() (in module neural_compressor.utils.create_obj_from_config)": [[459, "neural_compressor.utils.create_obj_from_config.create_train_func"]], "get_algorithm() (in module neural_compressor.utils.create_obj_from_config)": [[459, "neural_compressor.utils.create_obj_from_config.get_algorithm"]], "get_func_from_config() (in module neural_compressor.utils.create_obj_from_config)": [[459, "neural_compressor.utils.create_obj_from_config.get_func_from_config"]], "get_metrics() (in module neural_compressor.utils.create_obj_from_config)": [[459, "neural_compressor.utils.create_obj_from_config.get_metrics"]], "get_postprocess() (in module neural_compressor.utils.create_obj_from_config)": [[459, "neural_compressor.utils.create_obj_from_config.get_postprocess"]], "get_preprocess() (in module neural_compressor.utils.create_obj_from_config)": [[459, "neural_compressor.utils.create_obj_from_config.get_preprocess"]], "neural_compressor.utils.create_obj_from_config": [[459, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[460, "module-neural_compressor.utils"]], "kl_divergence (class in neural_compressor.utils.kl_divergence)": [[461, "neural_compressor.utils.kl_divergence.KL_Divergence"]], "neural_compressor.utils.kl_divergence": [[461, "module-neural_compressor.utils.kl_divergence"]], "optimizedmodel (class in neural_compressor.utils.load_huggingface)": [[462, "neural_compressor.utils.load_huggingface.OptimizedModel"]], "export_compressed_model() (in module neural_compressor.utils.load_huggingface)": [[462, "neural_compressor.utils.load_huggingface.export_compressed_model"]], "neural_compressor.utils.load_huggingface": [[462, "module-neural_compressor.utils.load_huggingface"]], "save_for_huggingface_upstream() (in module neural_compressor.utils.load_huggingface)": [[462, "neural_compressor.utils.load_huggingface.save_for_huggingface_upstream"]], "logger (class in neural_compressor.utils.logger)": [[463, "neural_compressor.utils.logger.Logger"]], "debug() (in module neural_compressor.utils.logger)": [[463, "neural_compressor.utils.logger.debug"]], "error() (in module neural_compressor.utils.logger)": [[463, "neural_compressor.utils.logger.error"]], "fatal() (in module neural_compressor.utils.logger)": [[463, "neural_compressor.utils.logger.fatal"]], "info() (in module neural_compressor.utils.logger)": [[463, "neural_compressor.utils.logger.info"]], "log() (in module neural_compressor.utils.logger)": [[463, "neural_compressor.utils.logger.log"]], "neural_compressor.utils.logger": [[463, "module-neural_compressor.utils.logger"]], "warn() (in module neural_compressor.utils.logger)": [[463, "neural_compressor.utils.logger.warn"]], "warning() (in module neural_compressor.utils.logger)": [[463, "neural_compressor.utils.logger.warning"]], "get_model_path() (in module neural_compressor.utils.neural_insights_utils)": [[464, "neural_compressor.utils.neural_insights_utils.get_model_path"]], "neural_compressor.utils.neural_insights_utils": [[464, "module-neural_compressor.utils.neural_insights_utils"]], "register_neural_insights_workload() (in module neural_compressor.utils.neural_insights_utils)": [[464, "neural_compressor.utils.neural_insights_utils.register_neural_insights_workload"]], "update_neural_insights_workload() (in module neural_compressor.utils.neural_insights_utils)": [[464, "neural_compressor.utils.neural_insights_utils.update_neural_insights_workload"]], "update_neural_insights_workload_accuracy_data() (in module neural_compressor.utils.neural_insights_utils)": [[464, "neural_compressor.utils.neural_insights_utils.update_neural_insights_workload_accuracy_data"]], "neural_compressor.utils.options": [[465, "module-neural_compressor.utils.options"]], "onnxrt (class in neural_compressor.utils.options)": [[465, "neural_compressor.utils.options.onnxrt"]], "is_int8_model() (in module neural_compressor.utils.pytorch)": [[466, "neural_compressor.utils.pytorch.is_int8_model"]], "load() (in module neural_compressor.utils.pytorch)": [[466, "neural_compressor.utils.pytorch.load"]], "load_weight_only() (in module neural_compressor.utils.pytorch)": [[466, "neural_compressor.utils.pytorch.load_weight_only"]], "neural_compressor.utils.pytorch": [[466, "module-neural_compressor.utils.pytorch"]], "recover_model_from_json() (in module neural_compressor.utils.pytorch)": [[466, "neural_compressor.utils.pytorch.recover_model_from_json"]], "captureoutputtofile (class in neural_compressor.utils.utility)": [[467, "neural_compressor.utils.utility.CaptureOutputToFile"]], "cpuinfo (class in neural_compressor.utils.utility)": [[467, "neural_compressor.utils.utility.CpuInfo"]], "dequantize() (in module neural_compressor.utils.utility)": [[467, "neural_compressor.utils.utility.Dequantize"]], "dotdict (class in neural_compressor.utils.utility)": [[467, "neural_compressor.utils.utility.DotDict"]], "global_state (class in neural_compressor.utils.utility)": [[467, "neural_compressor.utils.utility.GLOBAL_STATE"]], "lazyimport (class in neural_compressor.utils.utility)": [[467, "neural_compressor.utils.utility.LazyImport"]], "mode (class in neural_compressor.utils.utility)": [[467, "neural_compressor.utils.utility.MODE"]], "opentry (class in neural_compressor.utils.utility)": [[467, "neural_compressor.utils.utility.OpEntry"]], "statistics (class in neural_compressor.utils.utility)": [[467, "neural_compressor.utils.utility.Statistics"]], "alias_param() (in module neural_compressor.utils.utility)": [[467, "neural_compressor.utils.utility.alias_param"]], "calculate_mse() (in module neural_compressor.utils.utility)": [[467, "neural_compressor.utils.utility.calculate_mse"]], "check_key_exist() (in module neural_compressor.utils.utility)": [[467, "neural_compressor.utils.utility.check_key_exist"]], "combine_histogram() (in module neural_compressor.utils.utility)": [[467, "neural_compressor.utils.utility.combine_histogram"]], "compare_objects() (in module neural_compressor.utils.utility)": [[467, "neural_compressor.utils.utility.compare_objects"]], "compute_sparsity() (in module neural_compressor.utils.utility)": [[467, "neural_compressor.utils.utility.compute_sparsity"]], "dequantize_weight() (in module neural_compressor.utils.utility)": [[467, "neural_compressor.utils.utility.dequantize_weight"]], "dump_class_attrs() (in module neural_compressor.utils.utility)": [[467, "neural_compressor.utils.utility.dump_class_attrs"]], "dump_data_to_local() (in module neural_compressor.utils.utility)": [[467, "neural_compressor.utils.utility.dump_data_to_local"]], "dump_elapsed_time() (in module neural_compressor.utils.utility)": [[467, "neural_compressor.utils.utility.dump_elapsed_time"]], "dump_table() (in module neural_compressor.utils.utility)": [[467, "neural_compressor.utils.utility.dump_table"]], "dump_table_to_csv() (in module neural_compressor.utils.utility)": [[467, "neural_compressor.utils.utility.dump_table_to_csv"]], "equal_dicts() (in module neural_compressor.utils.utility)": [[467, "neural_compressor.utils.utility.equal_dicts"]], "fault_tolerant_file() (in module neural_compressor.utils.utility)": [[467, "neural_compressor.utils.utility.fault_tolerant_file"]], "get_all_fp32_data() (in module neural_compressor.utils.utility)": [[467, "neural_compressor.utils.utility.get_all_fp32_data"]], "get_number_of_sockets() (in module neural_compressor.utils.utility)": [[467, "neural_compressor.utils.utility.get_number_of_sockets"]], "get_op_list() (in module neural_compressor.utils.utility)": [[467, "neural_compressor.utils.utility.get_op_list"]], "get_size() (in module neural_compressor.utils.utility)": [[467, "neural_compressor.utils.utility.get_size"]], "get_tensor_histogram() (in module neural_compressor.utils.utility)": [[467, "neural_compressor.utils.utility.get_tensor_histogram"]], "get_tensors_info() (in module neural_compressor.utils.utility)": [[467, "neural_compressor.utils.utility.get_tensors_info"]], "get_tuning_history() (in module neural_compressor.utils.utility)": [[467, "neural_compressor.utils.utility.get_tuning_history"]], "get_weights_details() (in module neural_compressor.utils.utility)": [[467, "neural_compressor.utils.utility.get_weights_details"]], "load_data_from_pkl() (in module neural_compressor.utils.utility)": [[467, "neural_compressor.utils.utility.load_data_from_pkl"]], "mse_metric_gap() (in module neural_compressor.utils.utility)": [[467, "neural_compressor.utils.utility.mse_metric_gap"]], "neural_compressor.utils.utility": [[467, "module-neural_compressor.utils.utility"]], "print_op_list() (in module neural_compressor.utils.utility)": [[467, "neural_compressor.utils.utility.print_op_list"]], "print_table() (in module neural_compressor.utils.utility)": [[467, "neural_compressor.utils.utility.print_table"]], "recover() (in module neural_compressor.utils.utility)": [[467, "neural_compressor.utils.utility.recover"]], "set_random_seed() (in module neural_compressor.utils.utility)": [[467, "neural_compressor.utils.utility.set_random_seed"]], "set_resume_from() (in module neural_compressor.utils.utility)": [[467, "neural_compressor.utils.utility.set_resume_from"]], "set_tensorboard() (in module neural_compressor.utils.utility)": [[467, "neural_compressor.utils.utility.set_tensorboard"]], "set_workspace() (in module neural_compressor.utils.utility)": [[467, "neural_compressor.utils.utility.set_workspace"]], "show_memory_info() (in module neural_compressor.utils.utility)": [[467, "neural_compressor.utils.utility.show_memory_info"]], "singleton() (in module neural_compressor.utils.utility)": [[467, "neural_compressor.utils.utility.singleton"]], "str2array() (in module neural_compressor.utils.utility)": [[467, "neural_compressor.utils.utility.str2array"]], "time_limit() (in module neural_compressor.utils.utility)": [[467, "neural_compressor.utils.utility.time_limit"]], "version1_eq_version2() (in module neural_compressor.utils.utility)": [[467, "neural_compressor.utils.utility.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.utils.utility)": [[467, "neural_compressor.utils.utility.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.utils.utility)": [[467, "neural_compressor.utils.utility.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.utils.utility)": [[467, "neural_compressor.utils.utility.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.utils.utility)": [[467, "neural_compressor.utils.utility.version1_lte_version2"]], "weightsdetails (class in neural_compressor.utils.weights_details)": [[468, "neural_compressor.utils.weights_details.WeightsDetails"]], "weightsstatistics (class in neural_compressor.utils.weights_details)": [[468, "neural_compressor.utils.weights_details.WeightsStatistics"]], "neural_compressor.utils.weights_details": [[468, "module-neural_compressor.utils.weights_details"]], "neural_compressor.version": [[469, "module-neural_compressor.version"]]}})