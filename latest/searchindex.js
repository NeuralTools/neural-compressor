Search.setIndex({"docnames": ["autoapi/block_mask/index", "autoapi/neural_compressor/adaptor/adaptor/index", "autoapi/neural_compressor/adaptor/index", "autoapi/neural_compressor/adaptor/keras/index", "autoapi/neural_compressor/adaptor/keras_utils/conv2d/index", "autoapi/neural_compressor/adaptor/keras_utils/dense/index", "autoapi/neural_compressor/adaptor/keras_utils/depthwise_conv2d/index", "autoapi/neural_compressor/adaptor/keras_utils/index", "autoapi/neural_compressor/adaptor/keras_utils/pool2d/index", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index", "autoapi/neural_compressor/adaptor/keras_utils/separable_conv2d/index", "autoapi/neural_compressor/adaptor/mxnet/index", "autoapi/neural_compressor/adaptor/mxnet_utils/index", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index", "autoapi/neural_compressor/adaptor/onnxrt/index", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index", "autoapi/neural_compressor/adaptor/ox_utils/calibrator/index", "autoapi/neural_compressor/adaptor/ox_utils/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/norm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/reduce/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/unary_op/index", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index", "autoapi/neural_compressor/adaptor/ox_utils/smooth_quant/index", "autoapi/neural_compressor/adaptor/ox_utils/util/index", "autoapi/neural_compressor/adaptor/ox_utils/weight_only/index", "autoapi/neural_compressor/adaptor/pytorch/index", "autoapi/neural_compressor/adaptor/query/index", "autoapi/neural_compressor/adaptor/tensorflow/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/dequantize_cast_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_schema/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/tf2onnx_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index", "autoapi/neural_compressor/adaptor/tf_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_calibration/index", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_scaler/index", "autoapi/neural_compressor/adaptor/tf_utils/tf2onnx_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index", "autoapi/neural_compressor/adaptor/tf_utils/util/index", "autoapi/neural_compressor/adaptor/torch_utils/autoround/autoround/index", "autoapi/neural_compressor/adaptor/torch_utils/autoround/export/index", "autoapi/neural_compressor/adaptor/torch_utils/autoround/index", "autoapi/neural_compressor/adaptor/torch_utils/autoround/model_wrapper/index", "autoapi/neural_compressor/adaptor/torch_utils/autoround/sign_sgd/index", "autoapi/neural_compressor/adaptor/torch_utils/awq/index", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index", "autoapi/neural_compressor/adaptor/torch_utils/gptq/index", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index", "autoapi/neural_compressor/adaptor/torch_utils/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/modified_pickle/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/quantize/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/torch_load/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/utils/index", "autoapi/neural_compressor/adaptor/torch_utils/mixed_precision/index", "autoapi/neural_compressor/adaptor/torch_utils/model_wrapper/index", "autoapi/neural_compressor/adaptor/torch_utils/pattern_detector/index", "autoapi/neural_compressor/adaptor/torch_utils/smooth_quant/index", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index", "autoapi/neural_compressor/adaptor/torch_utils/teq/index", "autoapi/neural_compressor/adaptor/torch_utils/util/index", "autoapi/neural_compressor/adaptor/torch_utils/weight_only/index", "autoapi/neural_compressor/algorithm/algorithm/index", "autoapi/neural_compressor/algorithm/fast_bias_correction/index", "autoapi/neural_compressor/algorithm/index", "autoapi/neural_compressor/algorithm/smooth_quant/index", "autoapi/neural_compressor/algorithm/weight_correction/index", "autoapi/neural_compressor/benchmark/index", "autoapi/neural_compressor/common/base_config/index", "autoapi/neural_compressor/common/base_tuning/index", "autoapi/neural_compressor/common/index", "autoapi/neural_compressor/common/logger/index", "autoapi/neural_compressor/common/utility/index", "autoapi/neural_compressor/compression/callbacks/index", "autoapi/neural_compressor/compression/distillation/criterions/index", "autoapi/neural_compressor/compression/distillation/index", "autoapi/neural_compressor/compression/distillation/optimizers/index", "autoapi/neural_compressor/compression/distillation/utility/index", "autoapi/neural_compressor/compression/hpo/index", "autoapi/neural_compressor/compression/hpo/sa_optimizer/index", "autoapi/neural_compressor/compression/hpo/search_algorithms/index", "autoapi/neural_compressor/compression/hpo/search_space/index", "autoapi/neural_compressor/compression/index", "autoapi/neural_compressor/compression/pruner/criteria/index", "autoapi/neural_compressor/compression/pruner/dsnot/index", "autoapi/neural_compressor/compression/pruner/index", "autoapi/neural_compressor/compression/pruner/model_slim/auto_slim/index", "autoapi/neural_compressor/compression/pruner/model_slim/index", "autoapi/neural_compressor/compression/pruner/model_slim/pattern_analyzer/index", "autoapi/neural_compressor/compression/pruner/model_slim/weight_slim/index", "autoapi/neural_compressor/compression/pruner/patterns/base/index", "autoapi/neural_compressor/compression/pruner/patterns/index", "autoapi/neural_compressor/compression/pruner/patterns/mha/index", "autoapi/neural_compressor/compression/pruner/patterns/ninm/index", "autoapi/neural_compressor/compression/pruner/patterns/nxm/index", "autoapi/neural_compressor/compression/pruner/pruners/base/index", "autoapi/neural_compressor/compression/pruner/pruners/basic/index", "autoapi/neural_compressor/compression/pruner/pruners/block_mask/index", "autoapi/neural_compressor/compression/pruner/pruners/index", "autoapi/neural_compressor/compression/pruner/pruners/mha/index", "autoapi/neural_compressor/compression/pruner/pruners/pattern_lock/index", "autoapi/neural_compressor/compression/pruner/pruners/progressive/index", "autoapi/neural_compressor/compression/pruner/pruners/retrain_free/index", "autoapi/neural_compressor/compression/pruner/pruners/sparse_gpt/index", "autoapi/neural_compressor/compression/pruner/pruning/index", "autoapi/neural_compressor/compression/pruner/regs/index", "autoapi/neural_compressor/compression/pruner/schedulers/index", "autoapi/neural_compressor/compression/pruner/tf_criteria/index", "autoapi/neural_compressor/compression/pruner/utils/index", "autoapi/neural_compressor/compression/pruner/wanda/index", "autoapi/neural_compressor/compression/pruner/wanda/prune/index", "autoapi/neural_compressor/compression/pruner/wanda/utils/index", "autoapi/neural_compressor/compression/pruner/wanda/wrapper/index", "autoapi/neural_compressor/conf/config/index", "autoapi/neural_compressor/conf/dotdict/index", "autoapi/neural_compressor/conf/index", "autoapi/neural_compressor/conf/pythonic_config/index", "autoapi/neural_compressor/config/index", "autoapi/neural_compressor/contrib/index", "autoapi/neural_compressor/contrib/strategy/index", "autoapi/neural_compressor/contrib/strategy/sigopt/index", "autoapi/neural_compressor/contrib/strategy/tpe/index", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/data/dataloaders/dataloader/index", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/data/dataloaders/fetcher/index", "autoapi/neural_compressor/data/dataloaders/index", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/data/dataloaders/sampler/index", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/data/datasets/bert_dataset/index", "autoapi/neural_compressor/data/datasets/coco_dataset/index", "autoapi/neural_compressor/data/datasets/dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/data/datasets/index", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/data/filters/coco_filter/index", "autoapi/neural_compressor/data/filters/filter/index", "autoapi/neural_compressor/data/filters/index", "autoapi/neural_compressor/data/index", "autoapi/neural_compressor/data/transforms/coco_transform/index", "autoapi/neural_compressor/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/data/transforms/index", "autoapi/neural_compressor/data/transforms/postprocess/index", "autoapi/neural_compressor/data/transforms/tokenization/index", "autoapi/neural_compressor/data/transforms/transform/index", "autoapi/neural_compressor/experimental/benchmark/index", "autoapi/neural_compressor/experimental/common/criterion/index", "autoapi/neural_compressor/experimental/common/dataloader/index", "autoapi/neural_compressor/experimental/common/index", "autoapi/neural_compressor/experimental/common/metric/index", "autoapi/neural_compressor/experimental/common/model/index", "autoapi/neural_compressor/experimental/common/optimizer/index", "autoapi/neural_compressor/experimental/common/postprocess/index", "autoapi/neural_compressor/experimental/common/torch_utils/index", "autoapi/neural_compressor/experimental/component/index", "autoapi/neural_compressor/experimental/compression/index", "autoapi/neural_compressor/experimental/contrib/index", "autoapi/neural_compressor/experimental/contrib/strategy/index", "autoapi/neural_compressor/experimental/contrib/strategy/sigopt/index", "autoapi/neural_compressor/experimental/contrib/strategy/tpe/index", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index", "autoapi/neural_compressor/experimental/data/dataloaders/index", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/index", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index", "autoapi/neural_compressor/experimental/data/filters/filter/index", "autoapi/neural_compressor/experimental/data/filters/index", "autoapi/neural_compressor/experimental/data/index", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/experimental/data/transforms/index", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index", "autoapi/neural_compressor/experimental/data/transforms/transform/index", "autoapi/neural_compressor/experimental/distillation/index", "autoapi/neural_compressor/experimental/export/index", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index", "autoapi/neural_compressor/experimental/export/tf2onnx/index", "autoapi/neural_compressor/experimental/export/torch2onnx/index", "autoapi/neural_compressor/experimental/graph_optimization/index", "autoapi/neural_compressor/experimental/index", "autoapi/neural_compressor/experimental/metric/bleu/index", "autoapi/neural_compressor/experimental/metric/bleu_util/index", "autoapi/neural_compressor/experimental/metric/coco_label_map/index", "autoapi/neural_compressor/experimental/metric/coco_tools/index", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index", "autoapi/neural_compressor/experimental/metric/f1/index", "autoapi/neural_compressor/experimental/metric/index", "autoapi/neural_compressor/experimental/metric/metric/index", "autoapi/neural_compressor/experimental/mixed_precision/index", "autoapi/neural_compressor/experimental/model_conversion/index", "autoapi/neural_compressor/experimental/nas/basic_nas/index", "autoapi/neural_compressor/experimental/nas/dynas/index", "autoapi/neural_compressor/experimental/nas/index", "autoapi/neural_compressor/experimental/nas/nas/index", "autoapi/neural_compressor/experimental/nas/nas_utils/index", "autoapi/neural_compressor/experimental/nas/search_algorithms/index", "autoapi/neural_compressor/experimental/pruner_legacy/gradient_sensitivity/index", "autoapi/neural_compressor/experimental/pruner_legacy/group_lasso/index", "autoapi/neural_compressor/experimental/pruner_legacy/index", "autoapi/neural_compressor/experimental/pruner_legacy/magnitude/index", "autoapi/neural_compressor/experimental/pruner_legacy/pattern_lock/index", "autoapi/neural_compressor/experimental/pruner_legacy/pruner/index", "autoapi/neural_compressor/experimental/pruning/index", "autoapi/neural_compressor/experimental/pruning_recipes/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index", "autoapi/neural_compressor/experimental/pruning_v2/index", "autoapi/neural_compressor/experimental/pytorch_pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index", "autoapi/neural_compressor/experimental/quantization/index", "autoapi/neural_compressor/experimental/scheduler/index", "autoapi/neural_compressor/experimental/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/experimental/strategy/basic/index", "autoapi/neural_compressor/experimental/strategy/bayesian/index", "autoapi/neural_compressor/experimental/strategy/exhaustive/index", "autoapi/neural_compressor/experimental/strategy/index", "autoapi/neural_compressor/experimental/strategy/mse/index", "autoapi/neural_compressor/experimental/strategy/mse_v2/index", "autoapi/neural_compressor/experimental/strategy/random/index", "autoapi/neural_compressor/experimental/strategy/strategy/index", "autoapi/neural_compressor/experimental/strategy/utils/constant/index", "autoapi/neural_compressor/experimental/strategy/utils/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_space/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/experimental/strategy/utils/utility/index", "autoapi/neural_compressor/index", "autoapi/neural_compressor/metric/bleu/index", "autoapi/neural_compressor/metric/bleu_util/index", "autoapi/neural_compressor/metric/coco_label_map/index", "autoapi/neural_compressor/metric/coco_tools/index", "autoapi/neural_compressor/metric/evaluate_squad/index", "autoapi/neural_compressor/metric/f1/index", "autoapi/neural_compressor/metric/index", "autoapi/neural_compressor/metric/metric/index", "autoapi/neural_compressor/mix_precision/index", "autoapi/neural_compressor/model/base_model/index", "autoapi/neural_compressor/model/index", "autoapi/neural_compressor/model/keras_model/index", "autoapi/neural_compressor/model/model/index", "autoapi/neural_compressor/model/mxnet_model/index", "autoapi/neural_compressor/model/nets_factory/index", "autoapi/neural_compressor/model/onnx_model/index", "autoapi/neural_compressor/model/tensorflow_model/index", "autoapi/neural_compressor/model/torch_model/index", "autoapi/neural_compressor/objective/index", "autoapi/neural_compressor/profiling/index", "autoapi/neural_compressor/profiling/parser/factory/index", "autoapi/neural_compressor/profiling/parser/index", "autoapi/neural_compressor/profiling/parser/onnx_parser/factory/index", "autoapi/neural_compressor/profiling/parser/onnx_parser/index", "autoapi/neural_compressor/profiling/parser/onnx_parser/parser/index", "autoapi/neural_compressor/profiling/parser/parser/index", "autoapi/neural_compressor/profiling/parser/result/index", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/factory/index", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/index", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/parser/index", "autoapi/neural_compressor/profiling/profiler/factory/index", "autoapi/neural_compressor/profiling/profiler/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/factory/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/profiler/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/utils/index", "autoapi/neural_compressor/profiling/profiler/profiler/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/factory/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/profiler/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/utils/index", "autoapi/neural_compressor/quantization/index", "autoapi/neural_compressor/strategy/auto/index", "autoapi/neural_compressor/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/strategy/basic/index", "autoapi/neural_compressor/strategy/bayesian/index", "autoapi/neural_compressor/strategy/conservative/index", "autoapi/neural_compressor/strategy/exhaustive/index", "autoapi/neural_compressor/strategy/hawq_v2/index", "autoapi/neural_compressor/strategy/index", "autoapi/neural_compressor/strategy/mse/index", "autoapi/neural_compressor/strategy/mse_v2/index", "autoapi/neural_compressor/strategy/random/index", "autoapi/neural_compressor/strategy/strategy/index", "autoapi/neural_compressor/strategy/utils/constant/index", "autoapi/neural_compressor/strategy/utils/index", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/strategy/utils/tuning_space/index", "autoapi/neural_compressor/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/strategy/utils/utility/index", "autoapi/neural_compressor/template/api_doc_example/index", "autoapi/neural_compressor/template/index", "autoapi/neural_compressor/tensorflow/algorithms/index", "autoapi/neural_compressor/tensorflow/algorithms/static_quantize/index", "autoapi/neural_compressor/tensorflow/algorithms/static_quantize/keras/index", "autoapi/neural_compressor/tensorflow/algorithms/static_quantize/keras_utils/conv2d/index", "autoapi/neural_compressor/tensorflow/algorithms/static_quantize/keras_utils/dense/index", "autoapi/neural_compressor/tensorflow/algorithms/static_quantize/keras_utils/depthwise_conv2d/index", "autoapi/neural_compressor/tensorflow/algorithms/static_quantize/keras_utils/index", "autoapi/neural_compressor/tensorflow/algorithms/static_quantize/keras_utils/pool2d/index", "autoapi/neural_compressor/tensorflow/algorithms/static_quantize/keras_utils/quantizer/index", "autoapi/neural_compressor/tensorflow/algorithms/static_quantize/keras_utils/separable_conv2d/index", "autoapi/neural_compressor/tensorflow/algorithms/static_quantize/quantize_entry/index", "autoapi/neural_compressor/tensorflow/index", "autoapi/neural_compressor/tensorflow/quantization/config/index", "autoapi/neural_compressor/tensorflow/quantization/index", "autoapi/neural_compressor/tensorflow/quantization/quantize/index", "autoapi/neural_compressor/tensorflow/utils/index", "autoapi/neural_compressor/torch/algorithms/index", "autoapi/neural_compressor/torch/algorithms/weight_only/gptq/index", "autoapi/neural_compressor/torch/algorithms/weight_only/index", "autoapi/neural_compressor/torch/algorithms/weight_only/rtn/index", "autoapi/neural_compressor/torch/algorithms/weight_only_algos/index", "autoapi/neural_compressor/torch/amp/autocast/index", "autoapi/neural_compressor/torch/amp/fp8/functions/index", "autoapi/neural_compressor/torch/amp/fp8/index", "autoapi/neural_compressor/torch/amp/index", "autoapi/neural_compressor/torch/index", "autoapi/neural_compressor/torch/quantization/autotune/index", "autoapi/neural_compressor/torch/quantization/config/index", "autoapi/neural_compressor/torch/quantization/fp8/index", "autoapi/neural_compressor/torch/quantization/fp8/modules/index", "autoapi/neural_compressor/torch/quantization/fp8/observer/index", "autoapi/neural_compressor/torch/quantization/fp8/quantization_impl/index", "autoapi/neural_compressor/torch/quantization/index", "autoapi/neural_compressor/torch/quantization/layers/index", "autoapi/neural_compressor/torch/quantization/quantize/index", "autoapi/neural_compressor/torch/utils/constants/index", "autoapi/neural_compressor/torch/utils/index", "autoapi/neural_compressor/torch/utils/utility/index", "autoapi/neural_compressor/training/index", "autoapi/neural_compressor/utils/collect_layer_histogram/index", "autoapi/neural_compressor/utils/constant/index", "autoapi/neural_compressor/utils/create_obj_from_config/index", "autoapi/neural_compressor/utils/index", "autoapi/neural_compressor/utils/kl_divergence/index", "autoapi/neural_compressor/utils/load_huggingface/index", "autoapi/neural_compressor/utils/logger/index", "autoapi/neural_compressor/utils/neural_insights_utils/index", "autoapi/neural_compressor/utils/options/index", "autoapi/neural_compressor/utils/pytorch/index", "autoapi/neural_compressor/utils/utility/index", "autoapi/neural_compressor/utils/weights_details/index", "autoapi/neural_compressor/version/index", "docs/build_docs/source/index", "docs/source/CODE_OF_CONDUCT", "docs/source/CONTRIBUTING", "docs/source/FX", "docs/source/NAS", "docs/source/SECURITY", "docs/source/Welcome", "docs/source/adaptor", "docs/source/add_new_adaptor", "docs/source/add_new_data_type", "docs/source/api-doc/adaptor", "docs/source/api-doc/adaptor/onnxrt", "docs/source/api-doc/adaptor/torch_utils", "docs/source/api-doc/api_doc_example", "docs/source/api-doc/apis", "docs/source/api-doc/benchmark", "docs/source/api-doc/compression", "docs/source/api-doc/config", "docs/source/api-doc/mix_precision", "docs/source/api-doc/model", "docs/source/api-doc/objective", "docs/source/api-doc/quantization", "docs/source/api-doc/strategy", "docs/source/api-doc/training", "docs/source/benchmark", "docs/source/calibration", "docs/source/dataloader", "docs/source/dataset", "docs/source/design", "docs/source/diagnosis", "docs/source/distillation", "docs/source/distillation_quantization", "docs/source/distributed", "docs/source/examples_readme", "docs/source/export", "docs/source/faq", "docs/source/framework_yaml", "docs/source/get_started", "docs/source/incompatible_changes", "docs/source/infrastructure", "docs/source/installation_guide", "docs/source/legal_information", "docs/source/llm_recipes", "docs/source/metric", "docs/source/migration", "docs/source/mixed_precision", "docs/source/model", "docs/source/neural_coder/README", "docs/source/neural_coder/docs/AWSSageMakerSupport", "docs/source/neural_coder/docs/BigDLNanoSupport", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting", "docs/source/neural_coder/docs/PythonAPI", "docs/source/neural_coder/docs/PythonLauncher", "docs/source/neural_coder/docs/Quantization", "docs/source/neural_coder/docs/SupportMatrix", "docs/source/neural_coder/docs/release_notes/v0.4", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart", "docs/source/neural_insights/README", "docs/source/neural_insights/docs/source/onnx_accuracy_debug", "docs/source/neural_insights/docs/source/pytorch_nlp_cli_mode", "docs/source/neural_insights/docs/source/tf_accuracy_debug", "docs/source/neural_insights/gui/README", "docs/source/neural_solution/README", "docs/source/neural_solution/docs/source/README", "docs/source/neural_solution/docs/source/description_api", "docs/source/neural_solution/docs/source/ns_design_doc", "docs/source/neural_solution/docs/source/template/task_request_description", "docs/source/neural_solution/examples/README", "docs/source/neural_solution/examples/custom_models_optimized/tf_example1/README", "docs/source/neural_solution/examples/hf_models/README", "docs/source/neural_solution/examples/hf_models_grpc/README", "docs/source/neural_solution/frontend/README", "docs/source/objective", "docs/source/orchestration", "docs/source/pruning", "docs/source/publication_list", "docs/source/pythonic_style", "docs/source/quantization", "docs/source/quantization_layer_wise", "docs/source/quantization_mixed_precision", "docs/source/quantization_weight_only", "docs/source/releases_info", "docs/source/sigopt_strategy", "docs/source/smooth_quant", "docs/source/tensorboard", "docs/source/transform", "docs/source/tuning_strategies", "docs/source/user_guide", "docs/source/user_yaml", "docs/source/validated_model_list", "index"], "filenames": ["autoapi/block_mask/index.rst", "autoapi/neural_compressor/adaptor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/keras/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/conv2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/dense/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/depthwise_conv2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/pool2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/separable_conv2d/index.rst", "autoapi/neural_compressor/adaptor/mxnet/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index.rst", "autoapi/neural_compressor/adaptor/onnxrt/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibrator/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/norm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/reduce/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/unary_op/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/smooth_quant/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/util/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/weight_only/index.rst", "autoapi/neural_compressor/adaptor/pytorch/index.rst", "autoapi/neural_compressor/adaptor/query/index.rst", "autoapi/neural_compressor/adaptor/tensorflow/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/dequantize_cast_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_schema/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/tf2onnx_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_calibration/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_scaler/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/tf2onnx_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/util/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/autoround/autoround/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/autoround/export/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/autoround/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/autoround/model_wrapper/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/autoround/sign_sgd/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/awq/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/gptq/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/modified_pickle/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/quantize/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/torch_load/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/utils/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/mixed_precision/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/model_wrapper/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/pattern_detector/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/smooth_quant/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/teq/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/util/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/weight_only/index.rst", "autoapi/neural_compressor/algorithm/algorithm/index.rst", "autoapi/neural_compressor/algorithm/fast_bias_correction/index.rst", "autoapi/neural_compressor/algorithm/index.rst", "autoapi/neural_compressor/algorithm/smooth_quant/index.rst", "autoapi/neural_compressor/algorithm/weight_correction/index.rst", "autoapi/neural_compressor/benchmark/index.rst", "autoapi/neural_compressor/common/base_config/index.rst", "autoapi/neural_compressor/common/base_tuning/index.rst", "autoapi/neural_compressor/common/index.rst", "autoapi/neural_compressor/common/logger/index.rst", "autoapi/neural_compressor/common/utility/index.rst", "autoapi/neural_compressor/compression/callbacks/index.rst", "autoapi/neural_compressor/compression/distillation/criterions/index.rst", "autoapi/neural_compressor/compression/distillation/index.rst", "autoapi/neural_compressor/compression/distillation/optimizers/index.rst", "autoapi/neural_compressor/compression/distillation/utility/index.rst", "autoapi/neural_compressor/compression/hpo/index.rst", "autoapi/neural_compressor/compression/hpo/sa_optimizer/index.rst", "autoapi/neural_compressor/compression/hpo/search_algorithms/index.rst", "autoapi/neural_compressor/compression/hpo/search_space/index.rst", "autoapi/neural_compressor/compression/index.rst", "autoapi/neural_compressor/compression/pruner/criteria/index.rst", "autoapi/neural_compressor/compression/pruner/dsnot/index.rst", "autoapi/neural_compressor/compression/pruner/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/auto_slim/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/pattern_analyzer/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/weight_slim/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/base/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/mha/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/ninm/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/nxm/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/base/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/basic/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/block_mask/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/mha/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/pattern_lock/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/progressive/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/retrain_free/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/sparse_gpt/index.rst", "autoapi/neural_compressor/compression/pruner/pruning/index.rst", "autoapi/neural_compressor/compression/pruner/regs/index.rst", "autoapi/neural_compressor/compression/pruner/schedulers/index.rst", "autoapi/neural_compressor/compression/pruner/tf_criteria/index.rst", "autoapi/neural_compressor/compression/pruner/utils/index.rst", "autoapi/neural_compressor/compression/pruner/wanda/index.rst", "autoapi/neural_compressor/compression/pruner/wanda/prune/index.rst", "autoapi/neural_compressor/compression/pruner/wanda/utils/index.rst", "autoapi/neural_compressor/compression/pruner/wanda/wrapper/index.rst", "autoapi/neural_compressor/conf/config/index.rst", "autoapi/neural_compressor/conf/dotdict/index.rst", "autoapi/neural_compressor/conf/index.rst", "autoapi/neural_compressor/conf/pythonic_config/index.rst", "autoapi/neural_compressor/config/index.rst", "autoapi/neural_compressor/contrib/index.rst", "autoapi/neural_compressor/contrib/strategy/index.rst", "autoapi/neural_compressor/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/data/dataloaders/index.rst", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/data/datasets/index.rst", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/data/filters/filter/index.rst", "autoapi/neural_compressor/data/filters/index.rst", "autoapi/neural_compressor/data/index.rst", "autoapi/neural_compressor/data/transforms/coco_transform/index.rst", "autoapi/neural_compressor/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/data/transforms/index.rst", "autoapi/neural_compressor/data/transforms/postprocess/index.rst", "autoapi/neural_compressor/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/benchmark/index.rst", "autoapi/neural_compressor/experimental/common/criterion/index.rst", "autoapi/neural_compressor/experimental/common/dataloader/index.rst", "autoapi/neural_compressor/experimental/common/index.rst", "autoapi/neural_compressor/experimental/common/metric/index.rst", "autoapi/neural_compressor/experimental/common/model/index.rst", "autoapi/neural_compressor/experimental/common/optimizer/index.rst", "autoapi/neural_compressor/experimental/common/postprocess/index.rst", "autoapi/neural_compressor/experimental/common/torch_utils/index.rst", "autoapi/neural_compressor/experimental/component/index.rst", "autoapi/neural_compressor/experimental/compression/index.rst", "autoapi/neural_compressor/experimental/contrib/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/index.rst", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/index.rst", "autoapi/neural_compressor/experimental/data/index.rst", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/experimental/data/transforms/index.rst", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/experimental/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/distillation/index.rst", "autoapi/neural_compressor/experimental/export/index.rst", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index.rst", "autoapi/neural_compressor/experimental/export/tf2onnx/index.rst", "autoapi/neural_compressor/experimental/export/torch2onnx/index.rst", "autoapi/neural_compressor/experimental/graph_optimization/index.rst", "autoapi/neural_compressor/experimental/index.rst", "autoapi/neural_compressor/experimental/metric/bleu/index.rst", "autoapi/neural_compressor/experimental/metric/bleu_util/index.rst", "autoapi/neural_compressor/experimental/metric/coco_label_map/index.rst", "autoapi/neural_compressor/experimental/metric/coco_tools/index.rst", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/experimental/metric/f1/index.rst", "autoapi/neural_compressor/experimental/metric/index.rst", "autoapi/neural_compressor/experimental/metric/metric/index.rst", "autoapi/neural_compressor/experimental/mixed_precision/index.rst", "autoapi/neural_compressor/experimental/model_conversion/index.rst", "autoapi/neural_compressor/experimental/nas/basic_nas/index.rst", "autoapi/neural_compressor/experimental/nas/dynas/index.rst", "autoapi/neural_compressor/experimental/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas_utils/index.rst", "autoapi/neural_compressor/experimental/nas/search_algorithms/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/gradient_sensitivity/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/group_lasso/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/magnitude/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/pattern_lock/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/pruner/index.rst", "autoapi/neural_compressor/experimental/pruning/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_v2/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index.rst", "autoapi/neural_compressor/experimental/quantization/index.rst", "autoapi/neural_compressor/experimental/scheduler/index.rst", "autoapi/neural_compressor/experimental/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/experimental/strategy/basic/index.rst", "autoapi/neural_compressor/experimental/strategy/bayesian/index.rst", "autoapi/neural_compressor/experimental/strategy/exhaustive/index.rst", "autoapi/neural_compressor/experimental/strategy/index.rst", "autoapi/neural_compressor/experimental/strategy/mse/index.rst", "autoapi/neural_compressor/experimental/strategy/mse_v2/index.rst", "autoapi/neural_compressor/experimental/strategy/random/index.rst", "autoapi/neural_compressor/experimental/strategy/strategy/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/constant/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/utility/index.rst", "autoapi/neural_compressor/index.rst", "autoapi/neural_compressor/metric/bleu/index.rst", "autoapi/neural_compressor/metric/bleu_util/index.rst", "autoapi/neural_compressor/metric/coco_label_map/index.rst", "autoapi/neural_compressor/metric/coco_tools/index.rst", "autoapi/neural_compressor/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/metric/f1/index.rst", "autoapi/neural_compressor/metric/index.rst", "autoapi/neural_compressor/metric/metric/index.rst", "autoapi/neural_compressor/mix_precision/index.rst", "autoapi/neural_compressor/model/base_model/index.rst", "autoapi/neural_compressor/model/index.rst", "autoapi/neural_compressor/model/keras_model/index.rst", "autoapi/neural_compressor/model/model/index.rst", "autoapi/neural_compressor/model/mxnet_model/index.rst", "autoapi/neural_compressor/model/nets_factory/index.rst", "autoapi/neural_compressor/model/onnx_model/index.rst", "autoapi/neural_compressor/model/tensorflow_model/index.rst", "autoapi/neural_compressor/model/torch_model/index.rst", "autoapi/neural_compressor/objective/index.rst", "autoapi/neural_compressor/profiling/index.rst", "autoapi/neural_compressor/profiling/parser/factory/index.rst", "autoapi/neural_compressor/profiling/parser/index.rst", "autoapi/neural_compressor/profiling/parser/onnx_parser/factory/index.rst", "autoapi/neural_compressor/profiling/parser/onnx_parser/index.rst", "autoapi/neural_compressor/profiling/parser/onnx_parser/parser/index.rst", "autoapi/neural_compressor/profiling/parser/parser/index.rst", "autoapi/neural_compressor/profiling/parser/result/index.rst", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/factory/index.rst", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/index.rst", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/parser/index.rst", "autoapi/neural_compressor/profiling/profiler/factory/index.rst", "autoapi/neural_compressor/profiling/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/factory/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/utils/index.rst", "autoapi/neural_compressor/profiling/profiler/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/factory/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/utils/index.rst", "autoapi/neural_compressor/quantization/index.rst", "autoapi/neural_compressor/strategy/auto/index.rst", "autoapi/neural_compressor/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/strategy/basic/index.rst", "autoapi/neural_compressor/strategy/bayesian/index.rst", "autoapi/neural_compressor/strategy/conservative/index.rst", "autoapi/neural_compressor/strategy/exhaustive/index.rst", "autoapi/neural_compressor/strategy/hawq_v2/index.rst", "autoapi/neural_compressor/strategy/index.rst", "autoapi/neural_compressor/strategy/mse/index.rst", "autoapi/neural_compressor/strategy/mse_v2/index.rst", "autoapi/neural_compressor/strategy/random/index.rst", "autoapi/neural_compressor/strategy/strategy/index.rst", "autoapi/neural_compressor/strategy/utils/constant/index.rst", "autoapi/neural_compressor/strategy/utils/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/strategy/utils/utility/index.rst", "autoapi/neural_compressor/template/api_doc_example/index.rst", "autoapi/neural_compressor/template/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/static_quantize/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/static_quantize/keras/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/static_quantize/keras_utils/conv2d/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/static_quantize/keras_utils/dense/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/static_quantize/keras_utils/depthwise_conv2d/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/static_quantize/keras_utils/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/static_quantize/keras_utils/pool2d/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/static_quantize/keras_utils/quantizer/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/static_quantize/keras_utils/separable_conv2d/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/static_quantize/quantize_entry/index.rst", "autoapi/neural_compressor/tensorflow/index.rst", "autoapi/neural_compressor/tensorflow/quantization/config/index.rst", "autoapi/neural_compressor/tensorflow/quantization/index.rst", "autoapi/neural_compressor/tensorflow/quantization/quantize/index.rst", "autoapi/neural_compressor/tensorflow/utils/index.rst", "autoapi/neural_compressor/torch/algorithms/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/gptq/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/rtn/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only_algos/index.rst", "autoapi/neural_compressor/torch/amp/autocast/index.rst", "autoapi/neural_compressor/torch/amp/fp8/functions/index.rst", "autoapi/neural_compressor/torch/amp/fp8/index.rst", "autoapi/neural_compressor/torch/amp/index.rst", "autoapi/neural_compressor/torch/index.rst", "autoapi/neural_compressor/torch/quantization/autotune/index.rst", "autoapi/neural_compressor/torch/quantization/config/index.rst", "autoapi/neural_compressor/torch/quantization/fp8/index.rst", "autoapi/neural_compressor/torch/quantization/fp8/modules/index.rst", "autoapi/neural_compressor/torch/quantization/fp8/observer/index.rst", "autoapi/neural_compressor/torch/quantization/fp8/quantization_impl/index.rst", "autoapi/neural_compressor/torch/quantization/index.rst", "autoapi/neural_compressor/torch/quantization/layers/index.rst", "autoapi/neural_compressor/torch/quantization/quantize/index.rst", "autoapi/neural_compressor/torch/utils/constants/index.rst", "autoapi/neural_compressor/torch/utils/index.rst", "autoapi/neural_compressor/torch/utils/utility/index.rst", "autoapi/neural_compressor/training/index.rst", "autoapi/neural_compressor/utils/collect_layer_histogram/index.rst", "autoapi/neural_compressor/utils/constant/index.rst", "autoapi/neural_compressor/utils/create_obj_from_config/index.rst", "autoapi/neural_compressor/utils/index.rst", "autoapi/neural_compressor/utils/kl_divergence/index.rst", "autoapi/neural_compressor/utils/load_huggingface/index.rst", "autoapi/neural_compressor/utils/logger/index.rst", "autoapi/neural_compressor/utils/neural_insights_utils/index.rst", "autoapi/neural_compressor/utils/options/index.rst", "autoapi/neural_compressor/utils/pytorch/index.rst", "autoapi/neural_compressor/utils/utility/index.rst", "autoapi/neural_compressor/utils/weights_details/index.rst", "autoapi/neural_compressor/version/index.rst", "docs/build_docs/source/index.rst", "docs/source/CODE_OF_CONDUCT.md", "docs/source/CONTRIBUTING.md", "docs/source/FX.md", "docs/source/NAS.md", "docs/source/SECURITY.md", "docs/source/Welcome.md", "docs/source/adaptor.md", "docs/source/add_new_adaptor.md", "docs/source/add_new_data_type.md", "docs/source/api-doc/adaptor.rst", "docs/source/api-doc/adaptor/onnxrt.rst", "docs/source/api-doc/adaptor/torch_utils.rst", "docs/source/api-doc/api_doc_example.rst", "docs/source/api-doc/apis.rst", "docs/source/api-doc/benchmark.rst", "docs/source/api-doc/compression.rst", "docs/source/api-doc/config.rst", "docs/source/api-doc/mix_precision.rst", "docs/source/api-doc/model.rst", "docs/source/api-doc/objective.rst", "docs/source/api-doc/quantization.rst", "docs/source/api-doc/strategy.rst", "docs/source/api-doc/training.rst", "docs/source/benchmark.md", "docs/source/calibration.md", "docs/source/dataloader.md", "docs/source/dataset.md", "docs/source/design.md", "docs/source/diagnosis.md", "docs/source/distillation.md", "docs/source/distillation_quantization.md", "docs/source/distributed.md", "docs/source/examples_readme.md", "docs/source/export.md", "docs/source/faq.md", "docs/source/framework_yaml.md", "docs/source/get_started.md", "docs/source/incompatible_changes.md", "docs/source/infrastructure.md", "docs/source/installation_guide.md", "docs/source/legal_information.md", "docs/source/llm_recipes.md", "docs/source/metric.md", "docs/source/migration.md", "docs/source/mixed_precision.md", "docs/source/model.md", "docs/source/neural_coder/README.md", "docs/source/neural_coder/docs/AWSSageMakerSupport.md", "docs/source/neural_coder/docs/BigDLNanoSupport.md", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting.md", "docs/source/neural_coder/docs/PythonAPI.md", "docs/source/neural_coder/docs/PythonLauncher.md", "docs/source/neural_coder/docs/Quantization.md", "docs/source/neural_coder/docs/SupportMatrix.md", "docs/source/neural_coder/docs/release_notes/v0.4.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart.md", "docs/source/neural_insights/README.md", "docs/source/neural_insights/docs/source/onnx_accuracy_debug.md", "docs/source/neural_insights/docs/source/pytorch_nlp_cli_mode.md", "docs/source/neural_insights/docs/source/tf_accuracy_debug.md", "docs/source/neural_insights/gui/README.md", "docs/source/neural_solution/README.md", "docs/source/neural_solution/docs/source/README.md", "docs/source/neural_solution/docs/source/description_api.md", "docs/source/neural_solution/docs/source/ns_design_doc.md", "docs/source/neural_solution/docs/source/template/task_request_description.md", "docs/source/neural_solution/examples/README.md", "docs/source/neural_solution/examples/custom_models_optimized/tf_example1/README.md", "docs/source/neural_solution/examples/hf_models/README.md", "docs/source/neural_solution/examples/hf_models_grpc/README.md", "docs/source/neural_solution/frontend/README.md", "docs/source/objective.md", "docs/source/orchestration.md", "docs/source/pruning.md", "docs/source/publication_list.md", "docs/source/pythonic_style.md", "docs/source/quantization.md", "docs/source/quantization_layer_wise.md", "docs/source/quantization_mixed_precision.md", "docs/source/quantization_weight_only.md", "docs/source/releases_info.md", "docs/source/sigopt_strategy.md", "docs/source/smooth_quant.md", "docs/source/tensorboard.md", "docs/source/transform.md", "docs/source/tuning_strategies.md", "docs/source/user_guide.md", "docs/source/user_yaml.md", "docs/source/validated_model_list.md", "index.rst"], "titles": ["<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">block_mask</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.dense</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.depthwise_conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.pool2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.separable_conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.onnxrt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.calibration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.calibrator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.activation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.argmax</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.attention</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.binary_op</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.direct_q8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.embed_layernorm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gather</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gavgpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gemm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.lstm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.maxpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.ops</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.reduce</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.resize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.split</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.unary_op</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.weight_only</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.query</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph_common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.smooth_quant_calibration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.smooth_quant_scaler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.tf2onnx_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.insert_logging</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.autoround.autoround</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.autoround.export</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.autoround</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.autoround.model_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.autoround.sign_sgd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.awq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.gptq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.hawq_metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.layer_wise_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.layer_wise_quant.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.model_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.pattern_detector</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.symbolic_trace</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.teq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.weight_only</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.fast_bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.weight_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.common.base_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.common.base_tuning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.common.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.common.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.callbacks</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation.criterions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation.optimizers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.hpo</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.hpo.sa_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.hpo.search_algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.hpo.search_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.criteria</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.dsnot</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.auto_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.pattern_analyzer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.weight_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns.base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns.mha</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns.ninm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns.nxm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.block_mask</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.mha</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.pattern_lock</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.progressive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.retrain_free</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.sparse_gpt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.regs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.schedulers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.tf_criteria</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.wanda</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.wanda.prune</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.wanda.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.wanda.wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.dotdict</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.pythonic_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.sigopt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.tpe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.coco_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.criterion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.component</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.compression</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib.strategy.sigopt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib.strategy.tpe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.distillation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.qlinear2qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.tf2onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.torch2onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.model_conversion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.basic_nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.search_algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.gradient_sensitivity</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.group_lasso</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.magnitude</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.pattern_lock</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.tile_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.prune_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.auto_mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.bayesian</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.exhaustive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.mse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.mse_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.tuning_sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.tuning_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.tuning_structs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.mix_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.base_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.keras_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.mxnet_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.nets_factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.onnx_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.tensorflow_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.torch_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.objective</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.onnx_parser.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.onnx_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.onnx_parser.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.tensorflow_parser.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.tensorflow_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.tensorflow_parser.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.auto</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.auto_mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.bayesian</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.conservative</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.exhaustive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.hawq_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_structs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.template.api_doc_example</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.template</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.static_quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.static_quantize.keras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.dense</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.depthwise_conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.static_quantize.keras_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.pool2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.separable_conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.static_quantize.quantize_entry</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only.gptq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only.rtn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only_algos</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.amp.autocast</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.amp.fp8.functions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.amp.fp8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.amp</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.quantization.autotune</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.quantization.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.quantization.fp8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.quantization.fp8.modules</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.quantization.fp8.observer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.quantization.fp8.quantization_impl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.quantization.layers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.quantization.quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.utils.constants</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.training</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.collect_layer_histogram</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.create_obj_from_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.kl_divergence</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.load_huggingface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.neural_insights_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.options</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.weights_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.version</span></code>", "Intel\u00ae Neural Compressor Documentation", "Contributor Covenant Code of Conduct", "Contribution Guidelines", "FX", "Neural Architecture Search", "Security Policy", "Intel\u00ae Neural Compressor", "Adaptor", "How to Add An Adaptor", "How to Support New Data Type, Like Int4, with a Few Line Changes", "Adaptor", "ONNX Runtime", "Torch Utils", "API Document Example", "APIs", "Benchmark", "Compression", "Config", "Mix Precision", "Model", "Objective", "Quantization", "Strategy", "Training", "Benchmarking", "Calibration Algorithms in Quantization", "DataLoader", "Dataset", "Design", "Diagnosis", "Distillation", "Distillation for Quantization", "Distributed Training and Inference (Evaluation)", "Examples", "Export", "Frequently Asked Questions", "Framework YAML Configuration Files", "Getting Started", "Incompatible changes between v1.2 and v1.1", "Infrastructure of Intel\u00ae Neural Compressor", "Installation", "Legal Information", "LLMs Quantization Recipes", "Metrics", "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X", "Mixed Precision", "Model", "Neural Coder", "AWS Amazon SageMaker Support", "BigDL Nano Support", "Intel CPU Platforms: Best Performance Setting", "Neural Coder as Python API", "Python Launcher", "Neural Coder for Quantization", "Supported Optimization Features", "v0.4", "Changelog", "neural_compressor_ext_lab", "Intel\u00ae Neural Compressor as JupyterLab Extension", "Making a new release of neural_compressor_ext_lab", "Changelog", "neural_compressor_ext_lab_alibaba", "Making a new release of neural_compressor_ext_lab_alibaba", "Change Log", "Neural Coder", "Welcome to your VS Code Extension", "Neural Insights", "Step by step example how to debug accuracy with Neural Insights", "Step by step example how to dump weights data for PyTorch model with Neural Insights", "Step by step example how to debug accuracy with Neural Insights", "Getting Started with Create React App", "What\u2019s Neural Solution?", "Get started", "Neural Solution API", "Design Doc for Optimization as a Service [WIP]", "Task request description", "Examples List", "An end-to-end example: quantize a custom model with Neural Solution", "An end-to-end example: quantize a Hugging Face model with Neural Solution", "An end-to-end example: quantize a Hugging Face model with Neural Solution gRPC API", "Client", "Objective", "Optimization Orchestration", "Pruning", "Full Publications/Events (78)", "Pythonic Style Access for Configurations", "Quantization", "Layer Wise Quantization (LWQ)", "Turn OFF Auto Mixed Precision during Quantization", "Weight Only Quantization (WOQ)", "Release", "SigOpt Strategy", "Smooth Quant", "TensorBoard", "Transform", "Tuning Strategies", "User Guide", "User YAML Configuration Files", "Validated Models", "Intel\u00ae Neural Compressor Documentation"], "terms": {"block": [0, 44, 149, 166, 170, 171, 193, 204, 207, 212, 218, 338, 379, 421, 442, 514, 556, 558, 564, 570], "mask": [0, 193, 200, 202, 205, 207, 211, 212, 242, 285, 311, 340, 364, 558, 573], "adaptor_registri": [1, 482], "cl": [1, 163, 172, 184, 186, 190, 191, 200, 205, 214, 215, 216, 244, 251, 259, 261, 266, 287, 294, 300, 322, 329, 333, 338, 340, 342, 353, 368, 379, 414, 472], "sourc": [1, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 113, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 181, 183, 184, 186, 187, 190, 191, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 226, 227, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 273, 274, 275, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 297, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 327, 328, 329, 330, 333, 334, 335, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 381, 383, 385, 386, 387, 388, 390, 391, 393, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 417, 418, 419, 420, 421, 425, 433, 435, 437, 438, 440, 442, 443, 444, 449, 450, 456, 457, 460, 461, 462, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 478, 481, 516, 519, 532, 534, 536, 537, 539, 559], "The": [1, 3, 11, 14, 16, 34, 54, 74, 113, 119, 121, 140, 148, 149, 150, 153, 162, 164, 170, 172, 177, 178, 183, 184, 186, 190, 191, 193, 194, 198, 200, 202, 203, 205, 206, 207, 212, 213, 214, 215, 216, 217, 218, 223, 224, 226, 227, 230, 231, 232, 242, 243, 244, 245, 246, 250, 251, 259, 261, 264, 266, 269, 273, 274, 275, 285, 286, 287, 288, 289, 293, 294, 300, 301, 306, 308, 309, 310, 312, 313, 315, 317, 318, 319, 321, 322, 324, 325, 327, 328, 329, 330, 333, 335, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 350, 351, 352, 353, 357, 359, 361, 362, 363, 365, 366, 368, 369, 377, 379, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 418, 420, 421, 425, 433, 437, 438, 443, 444, 449, 457, 460, 461, 462, 464, 466, 467, 471, 472, 473, 476, 478, 479, 482, 483, 484, 485, 487, 491, 494, 497, 499, 500, 501, 502, 504, 505, 507, 509, 511, 513, 514, 515, 517, 518, 519, 520, 521, 524, 525, 527, 530, 532, 533, 534, 536, 537, 539, 540, 541, 542, 544, 545, 546, 547, 548, 549, 550, 552, 556, 557, 558, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573], "decor": [1, 16, 34, 67, 68, 70, 148, 172, 178, 186, 190, 191, 200, 205, 214, 216, 259, 266, 300, 315, 322, 329, 333, 338, 340, 342, 353, 356, 368, 379, 414, 438, 444, 460, 472, 478, 479, 482, 570], "us": [1, 13, 16, 34, 42, 43, 44, 48, 49, 70, 103, 105, 116, 141, 149, 150, 153, 157, 162, 164, 170, 171, 177, 184, 186, 190, 191, 193, 198, 200, 205, 209, 210, 214, 216, 217, 220, 223, 224, 226, 227, 230, 231, 240, 241, 242, 243, 244, 245, 246, 249, 258, 259, 260, 261, 266, 273, 274, 283, 284, 285, 286, 287, 288, 289, 292, 299, 300, 304, 305, 306, 308, 309, 311, 315, 316, 317, 322, 329, 330, 333, 335, 338, 340, 341, 342, 343, 344, 347, 350, 353, 356, 357, 361, 362, 364, 368, 379, 396, 401, 402, 406, 409, 411, 414, 418, 420, 421, 438, 442, 444, 460, 461, 462, 463, 464, 465, 467, 472, 476, 477, 478, 479, 482, 483, 499, 500, 502, 504, 505, 506, 507, 509, 511, 513, 515, 516, 519, 520, 521, 522, 523, 524, 526, 527, 530, 532, 534, 536, 537, 539, 541, 542, 543, 544, 545, 552, 553, 554, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 572, 573], "regist": [1, 16, 34, 160, 162, 172, 178, 184, 186, 190, 191, 193, 195, 200, 201, 205, 208, 214, 215, 216, 217, 244, 251, 259, 261, 266, 287, 294, 300, 315, 322, 329, 333, 338, 340, 342, 353, 356, 368, 379, 414, 420, 435, 438, 460, 469, 479, 482, 502, 507, 518, 519, 540, 556, 567, 570], "all": [1, 13, 16, 34, 44, 45, 63, 97, 156, 162, 163, 170, 171, 172, 174, 177, 178, 183, 186, 191, 195, 200, 208, 218, 226, 227, 232, 233, 240, 244, 251, 259, 260, 266, 269, 275, 283, 287, 294, 300, 305, 308, 311, 313, 315, 322, 329, 333, 334, 338, 344, 353, 356, 361, 364, 366, 368, 370, 379, 414, 420, 435, 440, 464, 472, 476, 477, 481, 482, 483, 484, 501, 502, 507, 511, 515, 519, 522, 530, 533, 534, 537, 538, 539, 540, 541, 544, 545, 547, 548, 552, 553, 554, 557, 558, 559, 561, 563, 564, 567, 569, 570], "subclass": [1, 16, 34, 172, 186, 190, 191, 200, 205, 214, 216, 237, 241, 244, 251, 259, 266, 280, 284, 287, 294, 300, 315, 322, 329, 333, 338, 340, 342, 353, 356, 368, 379, 414, 482], "paramet": [1, 11, 13, 14, 16, 42, 43, 44, 45, 67, 68, 70, 86, 105, 116, 132, 140, 141, 148, 149, 150, 153, 155, 156, 157, 162, 163, 167, 168, 170, 171, 172, 177, 178, 179, 181, 183, 184, 186, 188, 190, 191, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 223, 224, 226, 227, 230, 231, 241, 242, 244, 251, 255, 259, 261, 266, 273, 274, 284, 285, 287, 294, 297, 300, 301, 303, 304, 305, 306, 308, 309, 311, 312, 313, 315, 317, 318, 319, 321, 322, 323, 324, 325, 327, 328, 329, 330, 333, 335, 338, 339, 340, 341, 342, 343, 347, 353, 357, 359, 361, 362, 364, 365, 366, 368, 369, 373, 377, 379, 396, 401, 402, 406, 414, 418, 420, 421, 433, 437, 438, 440, 442, 444, 457, 460, 461, 464, 467, 468, 469, 471, 472, 478, 483, 501, 502, 505, 507, 514, 518, 519, 533, 539, 540, 541, 542, 547, 552, 553, 558, 561, 562, 564, 566, 567, 569, 570, 572], "framework_specific_info": [1, 3, 11, 14, 45, 47, 425, 482], "base": [1, 3, 11, 13, 14, 16, 34, 45, 46, 47, 86, 105, 116, 120, 122, 132, 144, 149, 153, 157, 160, 166, 170, 172, 178, 179, 183, 190, 191, 192, 193, 195, 201, 208, 215, 217, 227, 232, 235, 240, 242, 244, 251, 259, 269, 275, 278, 283, 285, 287, 294, 300, 315, 321, 323, 329, 330, 333, 335, 340, 350, 353, 357, 368, 370, 377, 378, 379, 411, 414, 418, 479, 481, 482, 483, 484, 502, 506, 507, 511, 519, 520, 527, 528, 530, 539, 542, 547, 550, 553, 554, 558, 559, 561, 564, 566, 567, 568, 570, 573], "framework": [1, 3, 11, 13, 14, 45, 153, 177, 178, 184, 186, 195, 201, 205, 208, 212, 213, 214, 228, 229, 233, 234, 238, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 253, 256, 259, 261, 262, 266, 271, 272, 276, 277, 279, 281, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 296, 298, 300, 306, 315, 316, 343, 351, 357, 368, 369, 370, 371, 373, 412, 418, 425, 435, 464, 481, 482, 484, 500, 504, 507, 508, 512, 513, 514, 515, 518, 519, 520, 541, 542, 558, 559, 561, 565, 568, 569, 570, 571, 572, 573], "layer": [1, 3, 11, 14, 45, 46, 47, 116, 117, 118, 119, 121, 122, 149, 156, 159, 161, 163, 167, 171, 175, 184, 187, 196, 198, 199, 200, 204, 209, 218, 221, 222, 226, 227, 261, 268, 338, 339, 425, 440, 442, 455, 462, 464, 472, 481, 482, 483, 484, 506, 514, 542, 558, 564, 565, 571], "mxnet_util": 2, "util": [2, 12, 17, 105, 110, 111, 139, 142, 155, 157, 158, 159, 168, 178, 185, 192, 195, 219, 226, 227, 268, 307, 309, 339, 349, 360, 362, 394, 399, 410, 435, 450, 483, 484, 485, 500, 507, 519, 522, 542, 558, 561, 570, 571], "ox_util": 2, "oper": [2, 17, 43, 104, 110, 140, 148, 198, 199, 204, 222, 226, 227, 255, 297, 338, 396, 401, 433, 478, 499, 501, 504, 509, 539, 545, 558, 561, 564, 567, 569, 570], "activ": [2, 17, 29, 44, 141, 154, 170, 171, 187, 226, 227, 268, 357, 418, 420, 482, 483, 484, 500, 504, 506, 511, 519, 540, 541, 544, 552, 553, 554, 560, 561, 564, 567, 568, 572], "argmax": [2, 17, 29], "attent": [2, 17, 29, 166, 196, 198, 209, 226, 227, 242, 285, 476, 505, 558], "binary_op": [2, 17, 29], "concat": [2, 17, 29, 147], "conv": [2, 17, 29, 58, 62, 66, 71, 72, 73, 92, 109, 175, 226, 227, 478, 483, 484, 519, 558, 560, 561, 570], "direct_q8": [2, 17, 29], "embed_layernorm": [2, 17, 29], "gather": [2, 13, 17, 29, 226, 227, 338], "gavgpool": [2, 17, 29], "gemm": [2, 17, 29, 226, 227], "lstm": [2, 17, 29], "matmul": [2, 17, 29, 44, 53, 59, 65, 73, 94, 109, 128, 137, 204, 226, 227, 338, 511, 542, 564, 570], "maxpool": [2, 17, 29, 129, 138, 511], "norm": [2, 17, 29], "op": [2, 13, 17, 29, 45, 51, 53, 65, 66, 67, 68, 69, 70, 71, 72, 74, 78, 81, 85, 88, 91, 92, 93, 94, 96, 105, 107, 109, 123, 124, 125, 131, 133, 134, 135, 136, 141, 143, 146, 148, 155, 157, 168, 170, 171, 175, 198, 226, 227, 305, 350, 357, 358, 396, 401, 407, 409, 411, 418, 419, 420, 433, 444, 460, 466, 472, 482, 483, 484, 504, 511, 519, 520, 543, 544, 558, 561, 563, 565, 567, 568, 570, 572], "pad": [2, 17, 29, 44, 71, 72, 242, 259, 285, 300, 502, 564, 569], "pool": [2, 17, 29, 549], "reduc": [2, 17, 29, 226, 227, 482, 500, 506, 519, 520, 539, 540, 558, 559, 561, 562, 563, 564, 567, 570, 572], "resiz": [2, 17, 29, 242, 243, 255, 259, 285, 286, 297, 300, 502, 569], "split": [2, 17, 29, 43, 82, 149, 171, 258, 259, 299, 300, 442, 478, 562, 564, 567, 569], "unary_op": [2, 17, 29], "calibr": [2, 11, 13, 14, 17, 44, 49, 89, 90, 140, 170, 171, 177, 226, 227, 230, 231, 273, 274, 306, 343, 402, 433, 437, 457, 466, 482, 484, 502, 513, 514, 558, 561, 564, 570, 571, 572], "quantiz": [2, 11, 13, 14, 16, 17, 42, 43, 44, 48, 49, 88, 92, 94, 96, 99, 107, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 149, 150, 154, 155, 156, 157, 158, 159, 163, 164, 165, 167, 169, 170, 171, 175, 177, 179, 183, 226, 227, 230, 231, 255, 262, 269, 273, 274, 297, 305, 306, 307, 317, 344, 350, 356, 360, 407, 409, 411, 420, 433, 440, 442, 443, 461, 462, 466, 467, 471, 472, 482, 489, 501, 502, 507, 508, 511, 513, 514, 518, 521, 522, 527, 529, 530, 533, 546, 548, 549, 551, 557, 559, 565, 568, 569, 570, 571, 572], "smooth_quant": [2, 17, 161, 170, 174, 226, 227, 360, 561, 567], "weight_onli": [2, 17, 227, 471, 562, 564], "tf_util": 2, "graph_rewrit": [2, 111], "bf16": [2, 44, 87, 111, 155, 226, 227, 357, 418, 482, 483, 511, 519, 524, 529, 533, 539, 563, 570, 573], "gener": [2, 13, 48, 49, 87, 111, 122, 148, 156, 170, 177, 198, 218, 230, 231, 232, 241, 244, 245, 246, 247, 259, 273, 274, 275, 284, 287, 288, 289, 290, 300, 308, 316, 347, 361, 369, 397, 402, 406, 421, 435, 440, 450, 461, 477, 478, 482, 484, 501, 505, 518, 519, 520, 522, 527, 532, 534, 536, 537, 539, 541, 542, 556, 558, 559, 561, 563, 564, 567, 568, 569, 570], "int8": [2, 18, 19, 43, 44, 87, 111, 123, 124, 125, 131, 133, 134, 135, 136, 143, 148, 171, 176, 177, 226, 227, 255, 297, 303, 304, 305, 357, 359, 418, 420, 435, 442, 471, 472, 477, 478, 481, 482, 483, 484, 499, 502, 506, 511, 517, 519, 520, 524, 527, 529, 530, 533, 539, 542, 544, 559, 560, 561, 563, 564, 565, 566, 567, 568, 569, 572], "onnx": [2, 14, 15, 16, 29, 41, 43, 44, 87, 111, 142, 175, 226, 227, 238, 281, 303, 304, 305, 369, 376, 396, 470, 477, 481, 482, 483, 485, 501, 504, 508, 509, 511, 512, 514, 520, 521, 524, 529, 530, 542, 559, 560, 564, 565, 567, 570], "qdq": [2, 42, 87, 111, 112, 113, 142, 170, 171, 226, 227, 303, 304, 305, 442, 482, 504, 509, 514, 529, 530, 561, 565, 567], "graph_bas": [2, 87, 111], "quantize_graph": [2, 111], "qat": [2, 111, 112, 168, 227, 317, 377, 506, 507, 514, 519, 561], "quantize_graph_bas": [2, 111, 112], "quantize_graph_bn": [2, 111, 112], "quantize_graph_concatv2": [2, 111, 112], "quantize_graph_conv": [2, 111, 112], "quantize_graph_for_intel_cpu": [2, 111, 112], "quantize_graph_matmul": [2, 111, 112], "quantize_graph_pool": [2, 111, 112], "transform_graph": [2, 111], "bias_correct": [2, 111, 145], "graph_transform_bas": [2, 111, 145], "insert_log": [2, 111, 145], "rerange_quantized_concat": [2, 111, 145], "graph_convert": [2, 111], "graph_converter_without_calib": [2, 111], "graph_util": [2, 111], "quantize_graph_common": [2, 111], "smooth_quant_calibr": [2, 111], "smooth_quant_scal": [2, 111], "tf2onnx_convert": [2, 111], "torch_util": [2, 263, 307, 360, 562, 567], "layer_wise_qu": [2, 158, 227, 562], "modified_pickl": [2, 158, 159], "torch_load": [2, 158, 159], "bf16_convert": [2, 52, 87, 111, 158], "hawq_metr": [2, 158], "model_wrapp": [2, 15, 151, 158], "pattern_detector": [2, 158], "symbolic_trac": [2, 158], "tensorflow": [2, 52, 54, 75, 76, 77, 87, 95, 101, 102, 103, 104, 105, 106, 110, 111, 112, 114, 117, 130, 140, 141, 142, 145, 148, 184, 186, 217, 226, 227, 241, 242, 243, 244, 247, 249, 251, 259, 266, 284, 285, 286, 287, 290, 292, 294, 300, 304, 305, 306, 309, 311, 315, 316, 317, 343, 351, 362, 364, 368, 369, 377, 395, 396, 400, 401, 402, 412, 472, 477, 479, 481, 482, 483, 500, 501, 504, 505, 506, 508, 511, 512, 514, 515, 519, 520, 521, 529, 530, 541, 544, 558, 559, 560, 566, 567, 570, 572], "kerasadaptor": [3, 425], "kerasqueri": [3, 425], "local_config_fil": [3, 11, 14, 45, 47, 425], "none": [3, 13, 14, 41, 43, 44, 45, 47, 48, 49, 63, 89, 102, 104, 105, 110, 116, 142, 148, 149, 153, 154, 156, 157, 161, 162, 163, 164, 165, 167, 169, 170, 171, 177, 178, 179, 183, 184, 191, 193, 195, 196, 198, 202, 214, 218, 220, 222, 223, 224, 226, 227, 230, 231, 232, 234, 240, 241, 242, 243, 244, 245, 246, 247, 249, 255, 259, 260, 261, 262, 269, 273, 274, 275, 277, 283, 284, 285, 286, 287, 288, 289, 290, 292, 297, 300, 301, 304, 305, 306, 311, 315, 316, 317, 318, 321, 330, 335, 339, 343, 347, 350, 351, 353, 357, 364, 368, 369, 379, 395, 400, 401, 402, 403, 406, 407, 411, 412, 414, 418, 421, 425, 433, 435, 437, 438, 440, 444, 449, 450, 456, 457, 461, 462, 464, 467, 469, 471, 472, 482, 483, 501, 502, 518, 542, 561, 564, 568, 569, 570], "defin": [3, 11, 14, 45, 46, 86, 153, 157, 190, 191, 198, 200, 205, 206, 207, 212, 213, 214, 215, 216, 226, 227, 230, 231, 273, 274, 318, 319, 321, 322, 323, 330, 335, 338, 339, 340, 342, 369, 402, 435, 450, 461, 471, 476, 479, 482, 483, 501, 502, 505, 506, 511, 514, 518, 519, 540, 557, 558, 561, 564, 566, 567, 568, 570, 572], "queri": [3, 11, 13, 14, 45, 47, 148, 170, 198, 209, 226, 227, 425, 483, 484, 549, 561], "interfac": [3, 11, 14, 45, 46, 86, 113, 223, 306, 330, 335, 343, 344, 464, 514, 519, 530, 548, 561, 565], "each": [3, 11, 14, 45, 46, 141, 148, 157, 162, 170, 171, 218, 226, 227, 240, 244, 247, 255, 259, 283, 287, 290, 297, 300, 309, 311, 312, 313, 350, 362, 364, 365, 366, 411, 442, 472, 477, 482, 483, 484, 502, 504, 505, 506, 511, 519, 524, 530, 533, 539, 547, 549, 556, 558, 562, 564, 566, 568, 569, 570, 571], "adapt": [3, 11, 14, 45, 46, 149, 476, 481, 483, 502, 530, 559], "should": [3, 11, 14, 45, 46, 55, 115, 116, 162, 183, 196, 198, 209, 226, 227, 230, 231, 240, 242, 244, 259, 264, 273, 274, 283, 285, 287, 300, 305, 309, 362, 368, 369, 402, 421, 444, 461, 472, 478, 479, 482, 483, 484, 502, 505, 507, 518, 519, 525, 534, 537, 539, 541, 542, 556, 558, 561, 564, 569, 570, 572], "implement": [3, 11, 14, 45, 46, 110, 143, 147, 153, 154, 162, 230, 231, 237, 240, 241, 242, 244, 273, 274, 280, 283, 284, 285, 287, 308, 361, 369, 379, 402, 409, 461, 484, 501, 502, 518, 519, 530, 540, 558, 561, 564, 565, 568, 570, 572], "inherit": [3, 11, 14, 45, 46, 183, 184, 210, 211, 216, 226, 239, 259, 261, 269, 282, 300, 340, 342, 479, 482, 483, 502], "specif": [3, 11, 14, 42, 45, 46, 104, 116, 153, 171, 177, 178, 186, 218, 222, 226, 227, 242, 243, 244, 245, 249, 251, 266, 285, 286, 287, 288, 292, 294, 324, 325, 327, 328, 329, 368, 402, 442, 444, 469, 476, 479, 482, 483, 500, 501, 504, 505, 511, 513, 517, 518, 519, 520, 521, 522, 526, 527, 529, 533, 539, 541, 547, 556, 558, 560, 564, 570, 572], "backend": [3, 11, 14, 15, 41, 42, 45, 46, 175, 186, 226, 227, 228, 229, 233, 234, 238, 242, 243, 245, 246, 247, 248, 249, 253, 256, 259, 265, 266, 271, 272, 276, 277, 279, 281, 285, 286, 288, 289, 290, 291, 292, 296, 298, 300, 316, 351, 369, 370, 371, 373, 412, 435, 450, 478, 484, 504, 507, 513, 514, 519, 520, 528, 547, 552, 553, 554, 560, 564, 569, 570, 572], "own": [3, 11, 14, 45, 46, 74, 162, 240, 259, 283, 300, 379, 479, 483, 501, 502, 514, 518, 541, 545, 556, 564, 566, 571], "mxnetadaptor": 11, "do": [11, 14, 153, 156, 183, 214, 226, 227, 241, 242, 284, 285, 301, 305, 308, 311, 341, 361, 364, 440, 471, 476, 483, 502, 507, 511, 514, 518, 519, 534, 537, 558, 563, 565, 567, 570], "inspect": [11, 14, 565, 568], "tensor": [11, 13, 14, 15, 16, 43, 44, 70, 105, 140, 148, 149, 150, 153, 157, 162, 163, 170, 171, 193, 195, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 217, 227, 259, 300, 303, 305, 338, 340, 350, 377, 411, 442, 444, 467, 471, 472, 478, 484, 501, 502, 504, 558, 561, 565, 568, 569, 570], "dict": [11, 13, 14, 44, 45, 116, 148, 149, 150, 153, 155, 156, 157, 162, 170, 171, 172, 177, 186, 190, 193, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 223, 224, 226, 227, 230, 231, 241, 260, 266, 273, 274, 284, 303, 305, 310, 311, 312, 313, 315, 318, 321, 322, 323, 330, 333, 335, 338, 339, 340, 341, 342, 347, 350, 356, 359, 363, 364, 365, 366, 368, 369, 377, 402, 417, 420, 421, 433, 435, 438, 440, 442, 443, 449, 461, 462, 464, 471, 472, 478, 483, 509, 518, 558, 560, 561, 567, 568, 570], "configur": [11, 13, 14, 45, 118, 149, 155, 170, 171, 177, 178, 218, 223, 226, 227, 230, 231, 233, 244, 247, 260, 265, 273, 274, 287, 290, 301, 305, 306, 317, 318, 319, 321, 330, 335, 339, 343, 344, 350, 368, 369, 379, 402, 411, 420, 433, 437, 442, 457, 461, 463, 464, 470, 471, 478, 479, 482, 483, 502, 504, 519, 526, 540, 547, 552, 553, 554, 556, 558, 561, 564, 565, 567, 569, 570, 573], "mxnetqueri": 11, "mxnet": [12, 13, 16, 227, 237, 241, 244, 247, 251, 259, 280, 284, 287, 290, 294, 300, 306, 315, 343, 368, 369, 374, 402, 477, 481, 482, 483, 500, 501, 508, 511, 514, 515, 519, 520, 521, 560, 570, 572], "init": [12, 17, 42, 174, 185, 195, 197, 219, 502, 518, 570], "optyp": [13, 226, 227, 303, 483], "enum": 13, "type": [13, 16, 42, 43, 44, 45, 74, 96, 105, 116, 122, 132, 140, 148, 149, 155, 156, 157, 162, 170, 171, 172, 184, 186, 190, 191, 194, 198, 199, 200, 205, 214, 215, 216, 218, 221, 224, 226, 227, 240, 242, 244, 251, 259, 261, 266, 283, 285, 287, 294, 300, 305, 308, 309, 311, 315, 322, 329, 333, 338, 340, 342, 347, 353, 357, 359, 361, 362, 364, 368, 377, 379, 406, 407, 414, 418, 420, 421, 433, 437, 438, 440, 442, 444, 460, 471, 472, 482, 483, 502, 504, 507, 509, 511, 514, 519, 520, 540, 542, 547, 548, 552, 553, 561, 562, 564, 566, 569, 570, 571, 572], "isiter": 13, "obj": [13, 105, 195, 218, 241, 284, 301, 306, 317, 318, 319, 321, 330, 335, 339, 343, 369, 379, 402, 461, 464, 472], "bool": [13, 42, 43, 44, 141, 148, 149, 150, 153, 156, 162, 168, 170, 171, 194, 200, 226, 227, 242, 244, 255, 259, 285, 287, 297, 300, 305, 309, 315, 338, 356, 362, 368, 417, 421, 435, 440, 442, 444, 450, 457, 467, 471, 472, 501, 502, 518, 550, 560, 569], "check": [13, 44, 67, 68, 105, 148, 149, 170, 171, 218, 233, 244, 287, 303, 339, 438, 471, 472, 481, 504, 507, 515, 523, 525, 527, 534, 537, 538, 542, 545, 548, 549, 565], "whether": [13, 43, 44, 105, 116, 148, 149, 150, 153, 156, 162, 170, 171, 200, 226, 227, 240, 242, 255, 259, 283, 285, 297, 300, 309, 311, 315, 338, 362, 364, 368, 440, 442, 444, 464, 467, 471, 472, 482, 502, 518, 561, 564, 567, 569], "object": [13, 42, 43, 44, 45, 74, 86, 105, 116, 132, 148, 149, 153, 155, 157, 160, 162, 168, 170, 177, 183, 193, 195, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 223, 224, 226, 227, 230, 231, 232, 242, 243, 244, 259, 260, 262, 273, 274, 275, 285, 286, 287, 300, 301, 306, 311, 319, 321, 324, 325, 327, 328, 329, 330, 335, 338, 339, 340, 341, 342, 343, 347, 360, 364, 368, 369, 377, 378, 396, 401, 402, 406, 420, 438, 460, 461, 464, 471, 472, 478, 479, 483, 489, 499, 501, 502, 510, 518, 519, 521, 557, 558, 560, 561, 569, 570, 571, 573], "i": [13, 43, 44, 45, 48, 49, 51, 54, 55, 60, 64, 70, 82, 85, 105, 132, 143, 148, 149, 150, 153, 156, 157, 160, 162, 164, 168, 170, 171, 176, 177, 179, 183, 186, 187, 193, 194, 198, 199, 205, 210, 211, 212, 213, 214, 215, 217, 218, 226, 227, 230, 231, 232, 240, 241, 242, 243, 244, 245, 246, 249, 251, 255, 259, 260, 262, 266, 268, 269, 273, 274, 275, 283, 284, 285, 286, 287, 288, 289, 292, 294, 297, 300, 308, 311, 313, 315, 317, 322, 330, 335, 339, 340, 344, 351, 361, 364, 366, 368, 369, 379, 385, 386, 390, 402, 407, 412, 420, 421, 438, 440, 444, 457, 461, 467, 471, 472, 476, 477, 478, 479, 482, 483, 484, 485, 487, 491, 494, 497, 499, 500, 501, 502, 504, 505, 506, 507, 509, 510, 511, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 530, 532, 533, 534, 536, 537, 539, 540, 541, 542, 544, 545, 546, 547, 548, 549, 550, 552, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573], "iter": [13, 15, 105, 140, 148, 149, 153, 170, 171, 177, 199, 205, 212, 216, 226, 227, 230, 231, 235, 240, 244, 245, 262, 273, 274, 278, 283, 287, 288, 340, 342, 369, 402, 433, 437, 461, 464, 478, 479, 482, 499, 501, 502, 519, 558, 560, 561, 567, 568, 570, 572], "return": [13, 16, 44, 45, 54, 67, 68, 70, 74, 105, 116, 148, 149, 153, 155, 156, 157, 162, 168, 170, 171, 172, 177, 184, 186, 190, 191, 194, 195, 198, 200, 201, 205, 208, 214, 215, 216, 218, 221, 224, 230, 231, 244, 251, 255, 259, 260, 261, 266, 273, 274, 287, 294, 297, 300, 305, 308, 309, 311, 312, 313, 315, 321, 322, 329, 333, 338, 339, 340, 342, 347, 353, 357, 359, 361, 362, 364, 365, 366, 368, 369, 373, 377, 379, 396, 401, 402, 406, 414, 418, 420, 421, 433, 435, 437, 438, 440, 442, 450, 457, 460, 461, 464, 469, 471, 472, 478, 479, 483, 484, 501, 502, 507, 518, 521, 552, 553, 554, 556, 558, 561, 564, 567, 568, 570], "true": [13, 43, 44, 85, 113, 146, 148, 149, 150, 156, 162, 171, 177, 190, 194, 226, 227, 240, 242, 244, 245, 258, 259, 260, 283, 285, 287, 288, 299, 300, 305, 309, 315, 333, 356, 362, 368, 379, 402, 417, 421, 435, 440, 442, 444, 450, 457, 464, 467, 471, 472, 483, 501, 502, 504, 507, 511, 518, 519, 522, 525, 526, 541, 542, 543, 544, 550, 552, 560, 561, 562, 564, 567, 568, 569, 570, 572], "els": [13, 148, 153, 171, 227, 240, 283, 379, 442, 469, 527, 564, 568], "fals": [13, 14, 15, 41, 42, 43, 44, 47, 48, 49, 71, 72, 89, 92, 99, 102, 103, 105, 113, 131, 136, 143, 146, 147, 148, 149, 150, 153, 154, 156, 161, 162, 168, 170, 171, 177, 184, 187, 220, 226, 227, 232, 234, 241, 242, 244, 255, 259, 260, 261, 262, 268, 275, 277, 284, 285, 287, 297, 300, 311, 315, 364, 368, 379, 402, 421, 440, 442, 450, 464, 467, 471, 472, 482, 483, 501, 502, 511, 518, 519, 532, 536, 542, 550, 553, 554, 560, 561, 564, 567, 568, 569, 570, 572], "boolean": [13, 149], "ensure_list": 13, "x": [13, 55, 74, 149, 156, 199, 226, 227, 241, 259, 284, 300, 347, 406, 421, 440, 500, 504, 507, 520, 521, 547, 548, 552, 553, 555, 561, 562, 567, 568, 569, 571], "ensur": [13, 259, 300, 347, 406, 507, 561, 569], "list": [13, 42, 43, 44, 54, 105, 140, 148, 149, 153, 155, 156, 157, 166, 170, 177, 178, 191, 198, 199, 204, 209, 214, 218, 221, 226, 227, 230, 231, 235, 242, 255, 259, 260, 273, 274, 278, 285, 297, 300, 304, 305, 308, 309, 311, 312, 313, 315, 322, 330, 335, 338, 341, 356, 361, 362, 364, 365, 366, 368, 369, 377, 385, 386, 390, 402, 417, 421, 435, 440, 449, 450, 461, 462, 472, 478, 481, 482, 502, 509, 511, 515, 517, 519, 522, 527, 529, 532, 533, 536, 544, 547, 549, 550, 556, 558, 560, 561, 563, 567, 568, 570], "input": [13, 15, 42, 43, 44, 45, 54, 60, 64, 67, 68, 70, 71, 72, 74, 82, 83, 85, 86, 105, 109, 110, 116, 122, 141, 148, 149, 150, 153, 155, 165, 167, 168, 169, 170, 171, 175, 198, 199, 218, 226, 227, 230, 231, 242, 243, 244, 246, 255, 258, 259, 264, 273, 274, 285, 286, 287, 289, 297, 299, 300, 303, 304, 305, 368, 369, 373, 377, 402, 442, 444, 456, 460, 461, 467, 469, 471, 472, 479, 482, 483, 499, 500, 501, 502, 504, 505, 506, 507, 509, 511, 513, 518, 519, 520, 521, 522, 527, 558, 560, 561, 564, 567, 568, 569, 572], "check_mx_vers": 13, "version": [13, 54, 104, 149, 153, 165, 170, 198, 227, 304, 305, 360, 456, 476, 478, 482, 511, 515, 516, 519, 532, 534, 536, 537, 559, 567, 570, 571], "str": [13, 42, 43, 44, 140, 149, 150, 155, 157, 162, 163, 166, 167, 168, 170, 171, 172, 184, 186, 195, 198, 221, 226, 227, 242, 243, 244, 251, 255, 259, 261, 265, 266, 285, 286, 287, 294, 297, 300, 304, 305, 308, 309, 311, 313, 315, 322, 333, 356, 359, 361, 362, 364, 366, 368, 387, 395, 397, 400, 401, 417, 420, 421, 433, 435, 438, 442, 443, 444, 450, 460, 464, 467, 469, 472, 473, 501, 502, 518, 550, 560, 568, 569], "mx": 13, "__version__": [13, 160], "combine_cap": 13, "current": [13, 70, 104, 167, 171, 193, 195, 198, 201, 205, 208, 226, 227, 317, 324, 325, 327, 328, 329, 338, 340, 347, 351, 406, 412, 442, 472, 478, 479, 482, 484, 500, 507, 511, 519, 522, 526, 539, 547, 556, 558, 561, 564, 567, 570], "new": [13, 16, 44, 148, 149, 167, 177, 232, 244, 259, 260, 275, 287, 300, 339, 379, 435, 444, 450, 477, 481, 483, 507, 519, 520, 533, 539, 540, 541, 542, 548, 549, 552, 553, 558, 559, 561, 564, 565, 566, 569, 571, 572], "combin": [13, 170, 179, 226, 227, 230, 231, 255, 269, 273, 274, 297, 369, 402, 461, 472, 478, 482, 514, 519, 557, 559, 561, 563, 564, 569, 570], "capabl": [13, 47, 357, 418, 483, 484, 499, 511, 519, 520, 530, 541, 546, 558, 560, 561, 570, 572], "contain": [13, 67, 68, 70, 74, 139, 148, 149, 157, 162, 170, 171, 177, 183, 195, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 218, 226, 227, 230, 231, 242, 243, 244, 273, 274, 285, 286, 287, 301, 305, 306, 311, 312, 313, 317, 330, 333, 335, 338, 339, 340, 341, 342, 343, 364, 365, 366, 369, 402, 461, 464, 471, 500, 502, 505, 514, 518, 540, 547, 552, 553, 554, 558, 564, 568, 570, 571], "make_nc_model": 13, "target": [13, 42, 43, 102, 149, 150, 153, 156, 170, 198, 216, 218, 227, 339, 342, 347, 406, 440, 467, 502, 507, 519, 558, 568, 569, 570, 572], "sym_model": 13, "ctx": 13, "input_desc": 13, "convert": [13, 43, 48, 49, 50, 53, 54, 55, 56, 57, 66, 74, 86, 99, 100, 102, 103, 104, 105, 131, 136, 140, 142, 150, 155, 170, 198, 226, 227, 242, 255, 258, 259, 285, 297, 299, 300, 304, 311, 317, 339, 357, 364, 418, 421, 478, 483, 519, 520, 524, 561, 563, 564, 567, 569, 570], "symbol": [13, 43, 155, 168, 170, 308, 361, 369, 402, 478, 521], "model": [13, 15, 16, 29, 41, 42, 43, 44, 45, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 116, 118, 140, 141, 142, 148, 149, 150, 153, 154, 155, 156, 157, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 175, 177, 179, 183, 190, 195, 196, 198, 205, 206, 207, 210, 212, 213, 214, 216, 218, 220, 226, 227, 230, 231, 238, 241, 242, 244, 259, 260, 263, 264, 273, 274, 281, 284, 285, 287, 300, 301, 303, 304, 305, 306, 307, 315, 316, 317, 318, 321, 324, 325, 327, 328, 329, 330, 335, 339, 340, 341, 342, 343, 344, 347, 350, 351, 353, 360, 368, 369, 379, 395, 400, 401, 402, 403, 406, 407, 411, 412, 414, 420, 421, 433, 437, 438, 440, 442, 443, 444, 449, 457, 460, 461, 467, 469, 471, 472, 474, 477, 478, 479, 481, 482, 484, 489, 499, 500, 501, 502, 504, 505, 506, 507, 508, 513, 514, 516, 518, 520, 522, 527, 529, 530, 533, 539, 541, 546, 548, 549, 550, 551, 556, 557, 559, 561, 565, 566, 568, 569, 570, 571, 572], "an": [13, 67, 68, 70, 105, 141, 143, 148, 149, 153, 157, 160, 162, 170, 171, 176, 187, 205, 226, 227, 235, 240, 244, 259, 263, 268, 278, 283, 287, 300, 307, 308, 312, 313, 321, 322, 344, 360, 361, 365, 366, 369, 396, 401, 402, 421, 444, 461, 472, 474, 476, 478, 479, 481, 482, 484, 500, 501, 502, 503, 504, 509, 517, 518, 519, 520, 522, 526, 527, 530, 539, 542, 543, 544, 547, 550, 556, 558, 559, 561, 564, 566, 567, 568, 569, 570], "neural": [13, 157, 177, 183, 186, 200, 201, 202, 203, 214, 226, 227, 254, 255, 256, 259, 260, 263, 266, 269, 297, 298, 300, 302, 307, 314, 315, 317, 330, 335, 338, 341, 343, 344, 349, 355, 360, 367, 368, 369, 373, 380, 402, 409, 410, 416, 469, 474, 477, 482, 483, 484, 499, 500, 502, 503, 505, 506, 507, 508, 509, 510, 511, 512, 513, 516, 517, 520, 521, 523, 524, 527, 529, 530, 532, 534, 536, 537, 538, 550, 556, 557, 559, 561, 564, 565, 567, 568, 569, 570, 572, 573], "compressor": [13, 177, 183, 186, 202, 203, 214, 226, 227, 254, 255, 256, 259, 260, 263, 266, 269, 297, 298, 300, 302, 307, 314, 315, 317, 338, 341, 343, 344, 349, 355, 360, 367, 368, 369, 373, 380, 402, 410, 416, 469, 474, 477, 479, 482, 483, 484, 499, 500, 502, 503, 505, 506, 507, 508, 509, 510, 511, 512, 513, 516, 517, 520, 521, 522, 523, 527, 529, 530, 532, 534, 536, 537, 538, 541, 542, 543, 544, 546, 547, 554, 556, 557, 558, 559, 561, 564, 565, 567, 568, 569, 570, 571, 572, 573], "tupl": [13, 105, 148, 170, 191, 227, 230, 231, 255, 259, 273, 274, 297, 300, 305, 356, 369, 402, 417, 443, 461, 471, 483, 502, 518, 519, 561, 569], "symnet": 13, "arg": [13, 54, 105, 149, 170, 181, 242, 243, 244, 285, 286, 287, 338, 347, 406, 421, 440, 443, 467, 468, 502, 507, 519, 528, 558, 561, 564, 567, 568, 569], "aux": 13, "data": [13, 42, 43, 44, 56, 105, 140, 148, 149, 157, 162, 167, 170, 171, 175, 198, 226, 227, 230, 231, 260, 262, 273, 274, 305, 307, 347, 357, 359, 360, 369, 395, 400, 402, 406, 418, 420, 433, 437, 442, 461, 464, 469, 472, 481, 482, 500, 501, 502, 507, 511, 512, 515, 518, 519, 520, 541, 542, 544, 547, 552, 553, 561, 563, 564, 565, 566, 567, 568, 569, 570, 571], "descript": [13, 132, 194, 421, 478, 483, 484, 501, 547, 551, 567], "ncmodel": 13, "fuse": [13, 58, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 91, 92, 93, 94, 96, 131, 136, 168, 170, 175, 478, 567, 568], "suppli": 13, "get_framework_nam": 13, "get": [13, 42, 43, 44, 45, 67, 68, 70, 104, 105, 148, 149, 156, 163, 167, 170, 177, 186, 187, 191, 193, 195, 196, 198, 201, 208, 215, 216, 217, 218, 224, 227, 235, 259, 260, 266, 268, 278, 300, 305, 338, 340, 342, 350, 357, 359, 368, 377, 402, 411, 418, 420, 435, 438, 440, 460, 464, 467, 469, 472, 483, 500, 510, 514, 515, 517, 519, 525, 542, 544, 552, 553, 559, 564, 567, 570, 571, 574], "name": [13, 43, 45, 54, 67, 68, 70, 104, 105, 110, 116, 140, 148, 149, 150, 155, 156, 157, 162, 163, 167, 168, 170, 172, 177, 178, 179, 187, 190, 191, 193, 198, 200, 205, 208, 209, 214, 215, 216, 217, 218, 221, 224, 226, 227, 242, 243, 244, 247, 251, 257, 259, 260, 264, 267, 268, 285, 286, 287, 290, 294, 300, 303, 304, 305, 310, 315, 333, 338, 340, 342, 357, 359, 363, 368, 373, 377, 379, 402, 418, 420, 433, 438, 440, 460, 462, 464, 469, 472, 477, 478, 484, 502, 504, 507, 509, 511, 516, 518, 519, 521, 525, 532, 536, 540, 541, 547, 558, 561, 565, 566, 568, 570, 572, 573], "context": [13, 444, 472, 560, 564], "prepare_model_data": 13, "nc_model": [13, 330, 335], "data_x": 13, "prepar": [13, 44, 170, 478, 481, 502, 507, 512, 541, 552, 553, 554, 558, 561], "dataload": [13, 15, 42, 44, 140, 141, 149, 154, 156, 157, 167, 170, 171, 177, 195, 196, 198, 214, 218, 220, 230, 231, 242, 253, 263, 273, 274, 285, 296, 301, 307, 330, 335, 344, 360, 395, 400, 402, 461, 464, 478, 481, 482, 483, 504, 505, 506, 507, 512, 513, 519, 520, 541, 542, 557, 558, 561, 562, 563, 564, 567, 568, 569, 571, 572], "need": [13, 42, 105, 109, 150, 167, 171, 177, 198, 214, 227, 230, 231, 232, 240, 241, 244, 251, 259, 262, 264, 265, 273, 274, 275, 283, 284, 287, 294, 300, 305, 344, 350, 368, 369, 379, 402, 411, 461, 471, 472, 478, 482, 501, 502, 504, 505, 507, 514, 519, 522, 524, 525, 528, 532, 533, 534, 536, 537, 539, 540, 541, 542, 543, 544, 546, 550, 552, 558, 560, 561, 562, 563, 564, 565, 567, 569, 570, 572], "run": [13, 140, 148, 162, 171, 177, 205, 218, 226, 227, 230, 231, 241, 258, 260, 273, 274, 284, 299, 339, 340, 347, 369, 402, 406, 444, 461, 482, 499, 507, 510, 511, 519, 522, 524, 526, 527, 528, 530, 532, 533, 534, 536, 537, 539, 547, 548, 549, 550, 552, 553, 554, 559, 561, 564, 565, 566, 568, 570, 572], "loader": [13, 140, 230, 231, 273, 274, 369, 402, 433, 437, 461, 467, 501, 561], "dataloaderwrap": 13, "prepare_model": 13, "create_data_exampl": 13, "creat": [13, 16, 105, 160, 226, 227, 232, 242, 244, 262, 275, 285, 287, 311, 321, 322, 357, 364, 396, 401, 418, 420, 421, 464, 476, 479, 482, 502, 521, 532, 534, 536, 537, 540, 552, 553, 554, 558, 561, 566, 568, 570, 571], "exampl": [13, 44, 149, 153, 157, 162, 170, 171, 177, 178, 179, 191, 198, 199, 214, 226, 227, 242, 243, 244, 255, 259, 285, 286, 287, 297, 300, 311, 312, 313, 315, 341, 364, 365, 366, 368, 369, 379, 402, 420, 421, 438, 442, 460, 461, 471, 472, 476, 481, 483, 484, 489, 513, 514, 522, 525, 526, 527, 530, 547, 550, 563, 565, 569, 570, 571, 574], "prepare_dataload": 13, "io": [13, 162, 545], "ndarray_to_devic": 13, "ndarrai": [13, 42, 43, 67, 68, 70, 259, 300, 462, 510, 569], "devic": [13, 45, 79, 89, 90, 91, 92, 93, 94, 97, 107, 131, 136, 147, 149, 150, 156, 161, 162, 164, 170, 171, 195, 198, 199, 214, 218, 220, 226, 227, 440, 444, 450, 467, 483, 501, 505, 519, 520, 522, 525, 530, 539, 558, 560, 562, 564], "is_model_quant": 13, "query_quantizable_nod": 13, "node": [13, 42, 43, 44, 50, 54, 55, 56, 57, 60, 62, 64, 67, 68, 70, 74, 77, 80, 82, 83, 84, 98, 102, 103, 105, 110, 132, 140, 148, 198, 303, 305, 377, 401, 482, 504, 507, 542, 546, 549, 552, 553, 554, 562, 568, 570, 573], "given": [13, 16, 43, 67, 68, 70, 104, 105, 116, 148, 149, 163, 170, 221, 259, 300, 311, 364, 402, 460, 479, 484, 558, 567, 569], "map": [13, 43, 105, 148, 162, 170, 227, 259, 300, 303, 305, 306, 310, 312, 313, 315, 330, 335, 340, 343, 363, 365, 366, 368, 502, 507, 518, 519, 532, 536, 544, 558, 561, 564], "quantize_sym_model": 13, "qconfig": [13, 150, 170, 471, 564, 568], "accord": [13, 122, 170, 177, 226, 227, 242, 243, 244, 259, 285, 286, 287, 300, 350, 409, 411, 464, 479, 482, 502, 507, 542, 547, 552, 553, 554, 558, 563, 567, 569, 570], "run_forward": 13, "b_filter": 13, "collector": [13, 157, 462], "pre_batch": 13, "post_batch": 13, "forward": [13, 149, 170, 218, 444, 483, 519, 541, 558, 560, 561, 564, 567, 568], "propag": [13, 100], "filter": [13, 242, 243, 244, 245, 246, 247, 249, 253, 285, 286, 287, 288, 289, 290, 292, 296, 307, 360, 472, 484, 502, 514, 558, 568], "which": [13, 42, 56, 83, 110, 149, 153, 156, 157, 162, 167, 171, 178, 179, 193, 198, 199, 201, 205, 206, 207, 209, 212, 213, 214, 216, 218, 226, 227, 242, 243, 244, 255, 260, 285, 286, 287, 297, 308, 313, 322, 324, 325, 327, 328, 329, 333, 338, 339, 340, 342, 347, 361, 366, 368, 373, 379, 402, 406, 438, 440, 460, 472, 476, 478, 479, 482, 483, 484, 500, 501, 502, 504, 505, 507, 510, 511, 514, 518, 519, 520, 521, 523, 527, 530, 533, 539, 540, 541, 544, 547, 552, 553, 554, 557, 558, 560, 561, 562, 563, 564, 565, 567, 568, 569, 570, 571, 572], "batch": [13, 149, 170, 232, 234, 235, 240, 241, 262, 275, 277, 278, 283, 284, 461, 501, 505, 506, 519, 557, 558, 561, 567, 569, 570, 573], "infer": [13, 43, 105, 140, 150, 170, 171, 198, 306, 343, 377, 379, 402, 444, 461, 482, 483, 500, 505, 506, 519, 520, 539, 556, 558, 559, 561, 564, 567, 568, 570], "collect": [13, 16, 43, 149, 170, 179, 257, 259, 262, 264, 265, 267, 300, 313, 315, 366, 368, 462, 472, 483, 561, 568, 570], "inform": [13, 149, 157, 193, 195, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 227, 230, 231, 262, 264, 265, 273, 274, 338, 340, 341, 342, 344, 368, 472, 476, 477, 480, 481, 482, 483, 484, 485, 487, 491, 494, 497, 500, 505, 511, 519, 521, 534, 537, 540, 541, 544, 545, 547, 548, 552, 553, 558, 563, 564, 565, 567, 568, 572, 573, 574], "dure": [13, 160, 162, 200, 204, 216, 226, 227, 338, 342, 379, 472, 483, 504, 519, 521, 546, 556, 557, 558, 561, 567, 568, 572], "call": [13, 42, 162, 167, 172, 198, 206, 207, 212, 311, 340, 364, 444, 478, 479, 482, 501, 513, 528, 530, 540, 558, 561, 567, 568, 569], "prior": [13, 88, 570], "after": [13, 78, 148, 150, 170, 196, 200, 205, 207, 212, 226, 227, 242, 255, 259, 262, 285, 297, 300, 340, 407, 421, 467, 472, 479, 483, 502, 504, 505, 506, 509, 514, 518, 519, 532, 533, 536, 540, 544, 556, 557, 558, 561, 563, 564, 566, 567, 568, 569, 570], "count": [13, 479, 502, 564], "int": [13, 16, 42, 43, 44, 105, 140, 148, 149, 150, 154, 166, 170, 171, 196, 226, 227, 241, 242, 243, 255, 259, 284, 285, 286, 297, 300, 304, 305, 309, 311, 315, 322, 362, 364, 368, 387, 396, 401, 420, 421, 433, 437, 442, 450, 467, 472, 501, 502, 518, 519, 550, 560, 564, 569], "make_symbol_block": 13, "gluon": [13, 369, 402, 521], "symbolblock": 13, "make_modul": 13, "parse_tune_config": 13, "tune_cfg": [13, 148, 155, 170, 433, 482, 484, 570], "quantizable_nod": 13, "strategi": [13, 170, 212, 226, 227, 228, 244, 271, 287, 307, 360, 481, 482, 483, 484, 489, 500, 501, 507, 514, 519, 527, 539, 544, 559, 560, 561, 563, 564, 565, 571, 572], "config": [13, 44, 115, 116, 118, 122, 170, 177, 178, 179, 193, 195, 196, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 226, 230, 231, 242, 273, 274, 285, 324, 325, 327, 328, 329, 330, 335, 338, 339, 340, 341, 342, 357, 358, 360, 369, 396, 401, 418, 419, 420, 421, 425, 433, 443, 461, 464, 471, 472, 479, 481, 483, 484, 489, 499, 501, 504, 505, 506, 507, 509, 512, 514, 518, 519, 520, 521, 541, 542, 557, 558, 560, 561, 563, 564, 566, 568, 570], "tune": [13, 45, 149, 177, 178, 179, 226, 227, 230, 231, 242, 244, 273, 274, 285, 287, 306, 343, 345, 346, 347, 348, 350, 351, 352, 353, 356, 357, 358, 359, 369, 379, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 417, 418, 419, 420, 433, 449, 461, 472, 482, 483, 500, 501, 502, 504, 507, 514, 516, 519, 520, 539, 543, 546, 548, 549, 556, 558, 559, 563, 565, 566, 568, 572], "from": [13, 43, 45, 61, 67, 68, 70, 105, 148, 149, 150, 153, 162, 163, 167, 170, 171, 177, 183, 184, 191, 193, 195, 201, 202, 203, 204, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 226, 227, 230, 231, 232, 235, 239, 242, 243, 244, 245, 246, 247, 249, 254, 255, 261, 262, 265, 273, 274, 275, 278, 282, 285, 286, 287, 288, 289, 290, 292, 297, 301, 303, 304, 305, 308, 311, 312, 313, 317, 322, 338, 339, 340, 342, 357, 359, 361, 364, 365, 366, 369, 377, 379, 402, 418, 420, 421, 425, 433, 435, 442, 450, 461, 464, 467, 471, 472, 476, 477, 478, 479, 482, 484, 499, 501, 502, 504, 505, 506, 507, 508, 509, 510, 512, 514, 517, 518, 520, 521, 522, 526, 527, 528, 530, 540, 542, 544, 545, 549, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571], "distribute_calib_tensor": 13, "calib_tensor": 13, "calib_cfg": 13, "tensor_to_nod": 13, "distribut": [13, 16, 143, 176, 226, 227, 232, 234, 235, 240, 241, 262, 275, 277, 278, 283, 284, 466, 481, 483, 501, 505, 515, 534, 537, 541, 544, 552, 559, 561, 564, 565, 567, 571, 573], "depend": [13, 230, 231, 260, 273, 274, 369, 402, 461, 477, 510, 511, 545, 560, 561, 570], "algorithm": [13, 44, 153, 156, 170, 178, 190, 223, 227, 308, 315, 323, 360, 361, 368, 438, 460, 464, 466, 479, 482, 483, 484, 505, 506, 511, 514, 517, 528, 533, 558, 561, 568, 572], "set": [13, 43, 51, 96, 105, 115, 148, 149, 162, 167, 170, 177, 186, 218, 224, 226, 227, 230, 231, 232, 242, 244, 247, 259, 260, 265, 266, 273, 274, 275, 285, 287, 290, 300, 311, 317, 330, 335, 339, 344, 364, 368, 369, 377, 401, 402, 421, 425, 460, 461, 469, 472, 476, 479, 483, 499, 501, 502, 505, 507, 509, 511, 513, 514, 515, 518, 519, 520, 522, 524, 526, 540, 541, 542, 543, 544, 545, 549, 552, 558, 560, 561, 564, 566, 567, 570, 572], "kl": [13, 16, 226, 227, 462, 466, 483, 484, 500, 511, 519, 570, 572], "minmax": [13, 16, 450, 483, 484, 500, 511, 561, 572], "calib_model": 13, "qsym_model": 13, "calib_data": [13, 161], "calibdata": 13, "threshold": [13, 173, 194, 462, 466, 518], "amp_convert": 13, "amp_cfg": 13, "support": [13, 42, 43, 44, 97, 104, 149, 167, 175, 184, 186, 195, 201, 208, 212, 213, 226, 227, 230, 231, 241, 242, 244, 251, 255, 259, 261, 262, 263, 266, 273, 274, 284, 285, 287, 294, 297, 300, 307, 315, 317, 322, 338, 340, 344, 351, 357, 360, 368, 369, 373, 379, 402, 412, 418, 421, 461, 464, 466, 467, 472, 474, 481, 483, 517, 519, 522, 527, 530, 533, 539, 546, 547, 550, 559, 563, 566, 570, 571], "amp": [13, 149, 522, 529, 548, 564], "wrap": [13, 105, 116, 149, 184, 222, 261, 311, 364, 444, 478, 507, 534, 537], "dataiterload": 13, "data_it": [13, 198], "collectorbas": 13, "calibcollector": 13, "include_tensors_kl": 13, "include_tensors_minmax": 13, "num_bin": [13, 16, 462], "8001": [13, 462, 547, 552, 553, 554], "tensorcollector": 13, "include_nod": 13, "qtensor_to_tensor": 13, "build": [13, 42, 44, 115, 172, 173, 175, 176, 318, 321, 372, 374, 376, 377, 378, 482, 483, 484, 515, 521, 532, 534, 536, 537, 540, 559, 570], "up": [13, 100, 209, 259, 300, 339, 507, 508, 511, 514, 530, 534, 537, 539, 558, 559, 560, 561, 566, 569, 570, 572], "namecollector": 13, "cache_kl": 13, "cache_minmax": 13, "tensors_kl": 13, "tensors_minmax": 13, "onnxruntimeadaptor": 14, "rt": 14, "onnxrt_weightonlyadaptor": 14, "onnxrt_qlinearopsadaptor": [14, 482], "onnxrt_integeropsadaptor": 14, "onnxrt_qdqadaptor": 14, "onnxrtqueri": 14, "dynam": [14, 149, 162, 227, 232, 275, 305, 357, 418, 457, 482, 501, 505, 509, 514, 519, 522, 527, 528, 529, 530, 533, 539, 559, 570, 573], "static": [14, 41, 42, 47, 167, 175, 198, 227, 305, 357, 402, 418, 433, 435, 450, 457, 482, 483, 484, 504, 509, 514, 519, 522, 527, 528, 529, 530, 533, 539, 542, 550, 552, 553, 554, 562, 567, 570, 573], "format": [14, 18, 43, 54, 148, 150, 170, 226, 227, 242, 243, 244, 285, 286, 287, 305, 311, 317, 357, 364, 418, 421, 467, 481, 483, 484, 502, 507, 509, 518, 519, 520, 521, 522, 544, 547, 559, 561, 564, 565], "onnxrtaug": 15, "dump_op_typ": 15, "black_nod": 15, "white_nod": 15, "cpuexecutionprovid": [15, 41, 42, 44, 520, 561], "reduce_rang": [15, 41, 42, 226, 227, 484, 560], "kwarg": [15, 43, 105, 122, 123, 124, 125, 126, 127, 128, 129, 132, 133, 135, 137, 149, 163, 170, 171, 181, 196, 226, 227, 244, 257, 259, 264, 267, 287, 300, 356, 358, 368, 369, 370, 372, 374, 376, 377, 378, 402, 417, 419, 421, 440, 442, 443, 461, 467, 468, 471, 472, 501], "augment": 15, "dump": [15, 160, 170, 177, 305, 472, 477, 544, 561, 565, 568], "calib_registri": 16, "calib_method": 16, "calibratorbas": 16, "minmaxcalibr": 16, "percentilecalibr": 16, "2048": [16, 149, 156, 171, 440, 450, 472, 564], "percentil": [16, 44, 140, 171, 442, 500], "99": [16, 573], "999": [16, 572], "option": [16, 44, 105, 149, 150, 153, 162, 170, 171, 200, 226, 227, 230, 231, 242, 259, 273, 274, 285, 300, 304, 305, 311, 317, 338, 344, 357, 360, 364, 368, 369, 402, 418, 420, 421, 438, 442, 444, 461, 465, 467, 472, 483, 484, 501, 502, 511, 515, 519, 533, 547, 550, 552, 553, 554, 558, 561, 564, 566, 567, 569, 570, 572], "number": [16, 44, 67, 68, 105, 140, 149, 150, 170, 171, 178, 191, 194, 196, 202, 203, 226, 227, 240, 243, 255, 259, 283, 286, 297, 300, 312, 313, 315, 338, 347, 365, 366, 368, 396, 401, 406, 421, 464, 472, 499, 501, 502, 507, 518, 547, 549, 558, 561, 564, 566, 567, 569, 570], "bin": [16, 162, 163, 472, 510], "histogram": [16, 462, 472, 541, 568], "valu": [16, 43, 44, 56, 67, 68, 70, 89, 90, 105, 143, 148, 149, 162, 170, 176, 177, 179, 191, 193, 198, 199, 209, 217, 218, 223, 224, 226, 227, 230, 231, 242, 245, 246, 255, 259, 260, 273, 274, 285, 288, 289, 297, 300, 311, 315, 339, 347, 350, 357, 364, 368, 369, 402, 406, 411, 418, 420, 421, 444, 461, 462, 464, 472, 478, 483, 484, 500, 502, 504, 511, 518, 519, 520, 525, 542, 544, 550, 556, 558, 560, 561, 564, 565, 567, 569, 570, 572], "default": [16, 44, 97, 148, 149, 150, 153, 162, 170, 171, 178, 179, 194, 218, 224, 226, 227, 230, 231, 234, 242, 243, 244, 255, 259, 273, 274, 277, 285, 286, 287, 297, 300, 304, 305, 308, 317, 339, 359, 361, 368, 377, 420, 435, 438, 442, 444, 450, 457, 464, 467, 472, 478, 482, 501, 502, 511, 514, 515, 518, 519, 520, 527, 530, 532, 536, 544, 547, 552, 553, 554, 556, 558, 560, 561, 563, 564, 566, 567, 569, 570, 572], "float": [16, 43, 44, 140, 141, 149, 153, 157, 171, 194, 200, 205, 215, 218, 226, 227, 242, 255, 285, 297, 309, 311, 312, 313, 340, 362, 364, 365, 366, 417, 421, 442, 450, 457, 469, 472, 502, 518, 560, 561, 567, 569], "A": [16, 55, 74, 75, 103, 116, 140, 141, 148, 149, 160, 170, 178, 179, 183, 190, 191, 193, 195, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 226, 227, 244, 259, 262, 264, 265, 287, 300, 301, 308, 311, 312, 313, 315, 318, 321, 322, 323, 330, 333, 335, 338, 339, 340, 341, 342, 347, 361, 364, 365, 366, 368, 369, 373, 377, 406, 461, 472, 477, 483, 501, 502, 508, 511, 518, 519, 521, 532, 533, 536, 539, 547, 558, 559, 561, 564, 567, 569, 570, 572], "between": [16, 42, 143, 176, 211, 226, 227, 259, 300, 312, 315, 365, 368, 396, 401, 472, 478, 482, 483, 484, 500, 504, 505, 514, 518, 519, 530, 561, 564, 565, 566, 567, 569, 570], "0": [16, 43, 44, 54, 90, 105, 148, 149, 150, 153, 161, 162, 170, 171, 173, 175, 178, 179, 184, 191, 193, 194, 196, 218, 220, 222, 226, 227, 232, 234, 241, 242, 245, 246, 249, 255, 259, 261, 262, 275, 277, 284, 285, 288, 289, 292, 297, 300, 305, 306, 315, 322, 330, 335, 343, 368, 379, 402, 407, 421, 442, 450, 467, 478, 501, 502, 505, 507, 509, 510, 511, 515, 516, 518, 519, 520, 525, 527, 532, 536, 542, 552, 553, 558, 560, 561, 562, 564, 565, 566, 567, 568, 569, 570, 572], "100": [16, 177, 178, 179, 191, 194, 226, 227, 244, 287, 421, 433, 437, 499, 502, 507, 513, 519, 544, 560, 561, 569, 570, 572, 573], "klcalibr": 16, "128": [16, 44, 149, 154, 156, 170, 171, 220, 242, 245, 246, 259, 285, 288, 289, 300, 440, 450, 502, 519, 561, 564, 569, 573], "num_quantized_bin": 16, "histogramcollector": 16, "collctor": 16, "smooth_distribut": 16, "p": [16, 153, 540, 541, 564], "ep": [16, 176, 520], "0001": [16, 191, 226, 227, 505, 519, 560], "smooth": [16, 140, 141, 148, 167, 175, 226, 227, 356, 558, 570], "discret": [16, 191, 570], "mai": [16, 148, 160, 162, 324, 325, 327, 328, 329, 421, 444, 476, 477, 483, 500, 504, 509, 510, 516, 520, 532, 536, 542, 545, 547, 559, 561, 564, 567, 570], "have": [16, 74, 83, 141, 148, 162, 195, 199, 201, 208, 240, 262, 283, 308, 311, 338, 340, 361, 364, 368, 402, 420, 421, 476, 477, 483, 484, 501, 502, 504, 507, 511, 516, 518, 519, 520, 522, 539, 542, 545, 547, 552, 553, 554, 556, 558, 561, 562, 564, 567, 570, 571], "been": [16, 149, 162, 195, 201, 208, 308, 338, 340, 361, 479, 484, 505, 519, 520, 539, 564, 567], "normal": [16, 33, 259, 300, 313, 366, 519, 548, 556, 564, 567, 569], "1": [16, 42, 43, 44, 55, 74, 89, 105, 109, 113, 146, 148, 149, 150, 153, 162, 165, 167, 170, 171, 173, 175, 176, 177, 179, 184, 191, 193, 194, 206, 207, 209, 226, 227, 232, 234, 241, 242, 243, 245, 246, 249, 250, 255, 259, 260, 261, 262, 275, 277, 284, 285, 286, 288, 289, 292, 293, 297, 300, 306, 311, 312, 313, 315, 330, 335, 340, 343, 344, 364, 365, 366, 368, 379, 402, 420, 421, 442, 450, 456, 464, 467, 472, 476, 478, 481, 482, 484, 500, 501, 502, 504, 505, 509, 511, 512, 515, 517, 518, 520, 523, 525, 541, 542, 549, 550, 552, 553, 554, 556, 557, 558, 560, 561, 562, 564, 565, 566, 567, 568, 569, 570, 571, 572], "replac": [16, 149, 163, 167, 170, 171, 313, 366, 507, 519, 530, 565], "zero": [16, 43, 44, 149, 150, 156, 171, 205, 218, 259, 300, 340, 440, 442, 472, 481, 544, 558, 561, 564, 567, 569, 570], "multipli": [16, 226, 227, 564], "scale": [16, 43, 44, 100, 141, 143, 149, 156, 165, 167, 169, 170, 171, 175, 176, 255, 259, 297, 300, 440, 442, 456, 561, 564, 566, 567, 569, 570], "factor": [16, 141, 153, 564, 567, 573], "take": [16, 200, 227, 230, 231, 235, 259, 264, 273, 274, 278, 300, 338, 347, 368, 369, 402, 406, 461, 476, 478, 479, 501, 504, 505, 511, 519, 539, 558, 561, 563, 564, 569, 570, 572], "correspond": [16, 157, 198, 209, 226, 227, 242, 285, 308, 311, 315, 361, 364, 368, 444, 464, 472, 482, 511, 519, 558, 560, 561, 566, 570], "amount": [16, 567], "off": [16, 67, 68, 70, 477, 564], "non": [16, 339, 472, 478, 504, 564, 570], "ref": [16, 148], "http": [16, 156, 157, 193, 194, 202, 203, 212, 213, 214, 220, 242, 244, 285, 287, 308, 309, 311, 312, 313, 338, 340, 341, 361, 362, 364, 365, 366, 368, 402, 440, 450, 478, 481, 502, 504, 512, 515, 516, 519, 528, 534, 537, 541, 543, 544, 545, 546, 547, 550, 552, 553, 554, 558, 565], "hanj": 16, "c": [16, 74, 244, 287, 472, 502, 510, 515, 564, 570], "illinoi": 16, "edu": [16, 244, 287, 502], "cs412": 16, "bk3": 16, "diverg": [16, 462, 466, 484, 500, 505, 570], "pdf": [16, 194, 220], "github": [16, 157, 202, 203, 214, 242, 285, 308, 309, 312, 313, 338, 341, 361, 362, 365, 366, 368, 402, 477, 481, 502, 504, 508, 515, 516, 519, 528, 534, 537, 541, 543, 544, 545, 546, 547, 550, 553, 554, 565], "com": [16, 157, 202, 203, 214, 242, 285, 308, 309, 312, 313, 338, 341, 361, 362, 365, 366, 368, 402, 476, 481, 502, 504, 512, 515, 516, 519, 522, 528, 541, 543, 544, 546, 547, 550, 553, 554, 565, 566, 573], "apach": [16, 516], "incub": 16, "blob": [16, 157, 202, 203, 308, 309, 312, 313, 338, 361, 362, 365, 366, 368, 402, 519, 528, 550, 553, 554], "master": [16, 202, 203, 214, 308, 309, 312, 313, 338, 341, 361, 362, 365, 366, 368, 402, 519, 570], "python": [16, 75, 148, 160, 162, 244, 263, 287, 307, 360, 421, 472, 474, 477, 478, 502, 504, 507, 510, 515, 519, 524, 530, 533, 539, 543, 544, 546, 547, 549, 552, 554, 558, 559, 569], "contrib": [16, 307, 360], "py": [16, 148, 157, 177, 205, 226, 227, 309, 311, 312, 313, 340, 362, 364, 365, 366, 421, 478, 482, 504, 507, 515, 519, 524, 526, 527, 528, 534, 537, 541, 543, 544, 546, 547, 549, 550, 552, 553, 554, 561, 565, 568], "microsoft": [16, 481, 482], "onnxruntim": [16, 226, 227, 238, 244, 251, 281, 287, 294, 316, 396, 482, 500, 501, 514, 515, 520, 542, 560], "main": [16, 156, 186, 191, 209, 214, 266, 341, 433, 437, 440, 443, 449, 457, 478, 501, 504, 507, 519, 526, 528, 540, 549, 558, 561, 564], "tool": [16, 148, 304, 472, 481, 482, 519, 532, 536, 542, 545, 546, 547, 558, 559, 561], "arrai": [16, 43, 44, 148, 162, 259, 300, 311, 322, 364, 472, 569], "small": [16, 67, 68, 69, 70, 409, 479, 544, 545, 558, 564, 570, 573], "probabl": [16, 226, 227, 466, 564], "activationoper": 18, "onnx_quant": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40], "onnx_nod": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 87, 101, 111], "removableactivationoper": 18, "remov": [18, 43, 51, 57, 60, 74, 80, 83, 84, 85, 96, 98, 140, 196, 209, 313, 366, 476, 519, 532, 536, 545, 552, 553, 558, 568], "qactivationoper": 18, "children": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 34, 35, 36, 38, 39, 163], "initi": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 34, 35, 36, 38, 39, 42, 43, 44, 105, 116, 148, 153, 162, 184, 205, 230, 231, 239, 242, 261, 273, 274, 282, 285, 339, 340, 357, 402, 418, 461, 479, 484, 502, 518, 538, 558, 561, 567, 570], "qoper": [18, 34, 226, 227, 509, 542], "float16activationoper": 18, "float16": [18, 21, 43, 149, 150, 444, 467, 502, 564], "argmaxoper": 19, "qargmaxoper": 19, "attentionoper": 20, "qattentionoper": 20, "qattent": 20, "binari": [21, 148, 315, 368, 510, 518, 534, 537, 565], "binaryoper": 21, "binarydirect8bitoper": 21, "qbinaryoper": 21, "qbinari": 21, "float16binaryoper": 21, "concatoper": 22, "qconcatoper": 22, "qconcat": 22, "convoper": 23, "qconvoper": 23, "qlinearconv": 23, "direct8bit": 24, "direct8bitoper": 24, "qdirectoper": 24, "qdirect": 24, "embedlayernorm": 25, "embedlayernormalizationoper": 25, "qembedlayernormalizationoper": 25, "qembedlayernorm": 25, "gatheroper": 26, "qgatheroper": 26, "qgather": 26, "globalaveragepool": 27, "globalaveragepooloper": 27, "qglobalaveragepooloper": 27, "qlinearglobalaveragepool": 27, "gemmoper": 28, "qgemmoper": 28, "qgemm": 28, "lstmoper": 30, "matmuloper": 31, "qmatmuloper": 31, "qlinearmatmul": 31, "fusedmatmuloper": 31, "fusedmatmul": 31, "maxpooloper": 32, "qmaxpooloper": 32, "qmaxpool": 32, "batchnormalizationoper": 33, "batchnorm": [33, 62, 67, 121, 478, 567], "normalizationoper": 33, "op_registri": 34, "op_typ": [34, 140, 141, 148, 221, 358, 419], "qop_registri": 34, "padoper": 35, "qpadoper": 35, "qpad": 35, "averagepool": 36, "pooloper": 36, "qpooloper": 36, "qlinearaveragepool": 36, "reduceoper": 37, "reduceminmaxoper": 37, "reducemin": 37, "reducemax": 37, "resizeoper": 38, "qresizeoper": 38, "qresiz": 38, "splitoper": 39, "qsplitoper": 39, "qsplit": 39, "unari": 40, "unaryoper": 40, "unarydirect8bitoper": 40, "q_config": [41, 170, 305, 482], "mode": [41, 42, 43, 45, 110, 162, 167, 251, 294, 311, 357, 364, 377, 418, 457, 469, 471, 472, 482, 483, 504, 514, 532, 536, 544, 545, 561, 563, 564, 570], "quantization_param": 41, "op_types_to_quant": 41, "fallback_list": 41, "fp32": [41, 42, 44, 79, 131, 136, 143, 170, 171, 176, 226, 227, 230, 231, 273, 274, 304, 305, 315, 350, 357, 368, 407, 411, 418, 433, 437, 442, 450, 464, 467, 471, 472, 477, 481, 482, 484, 504, 511, 512, 518, 519, 520, 529, 541, 542, 543, 544, 560, 561, 563, 564, 565, 566, 567, 568, 570, 572, 573], "add_qdq_pair_to_weight": [41, 226, 227, 561], "optypes_to_exclude_output_qu": [41, 226, 227, 561], "dedicated_qdq_pair": [41, 226, 227, 561], "smoothquant": [42, 167, 170, 175, 481, 517, 559, 564, 571], "onnxrt": [42, 43, 44, 242, 244, 251, 259, 285, 287, 294, 300, 315, 368, 395, 470, 482, 504, 520, 541, 561, 573], "get_quant_dequant_output": 42, "input_data": [42, 501], "output_data": 42, "loss": [42, 184, 226, 227, 261, 306, 315, 330, 335, 343, 368, 444, 461, 500, 504, 505, 506, 507, 508, 517, 518, 519, 520, 530, 542, 544, 557, 558, 559, 561, 564, 567, 570, 572], "output": [42, 43, 44, 51, 54, 59, 74, 98, 105, 110, 148, 149, 150, 170, 171, 181, 187, 198, 199, 204, 218, 224, 226, 227, 230, 231, 264, 268, 273, 274, 304, 305, 308, 338, 361, 368, 369, 377, 402, 438, 442, 444, 461, 467, 468, 472, 478, 482, 483, 505, 506, 507, 509, 511, 513, 518, 519, 521, 530, 539, 540, 542, 547, 548, 552, 553, 554, 557, 558, 560, 561, 564, 565, 567, 568, 569, 570, 572], "numpi": [42, 43, 67, 68, 70, 105, 148, 259, 300, 311, 322, 364, 510, 567, 569], "7": [42, 171, 177, 194, 226, 227, 379, 442, 484, 499, 510, 511, 519, 558, 561, 565, 567, 570, 573], "bit": [42, 44, 149, 154, 170, 171, 226, 227, 420, 442, 484, 500, 506, 520, 559, 561, 564, 567], "execut": [42, 43, 54, 156, 162, 177, 205, 206, 207, 226, 227, 340, 344, 346, 401, 402, 403, 405, 440, 461, 464, 471, 472, 504, 505, 506, 519, 520, 524, 525, 532, 533, 536, 539, 540, 541, 542, 546, 549, 557, 558, 561, 564, 566, 570, 573], "provid": [42, 43, 44, 102, 105, 110, 149, 198, 230, 231, 259, 273, 274, 300, 306, 311, 330, 335, 343, 344, 364, 369, 402, 461, 465, 467, 479, 481, 482, 483, 484, 499, 501, 504, 506, 507, 508, 514, 515, 517, 518, 519, 520, 521, 522, 526, 530, 533, 539, 540, 541, 547, 548, 558, 560, 561, 564, 567, 568, 570, 571, 572, 573], "make_sub_graph": 42, "opset": [42, 102, 104, 105, 227, 304, 305, 509], "ir_vers": 42, "thi": [42, 45, 86, 110, 132, 139, 143, 147, 149, 153, 157, 160, 162, 170, 171, 176, 183, 187, 190, 196, 198, 200, 202, 203, 204, 205, 209, 210, 211, 212, 214, 215, 216, 222, 226, 227, 230, 231, 241, 242, 243, 244, 245, 246, 247, 249, 259, 262, 268, 269, 273, 274, 284, 285, 286, 287, 288, 289, 290, 292, 300, 308, 311, 312, 313, 315, 324, 325, 327, 328, 329, 330, 335, 338, 340, 342, 343, 344, 347, 350, 361, 364, 365, 366, 368, 369, 379, 402, 406, 411, 420, 421, 435, 444, 450, 461, 471, 472, 476, 477, 478, 479, 482, 483, 484, 500, 501, 502, 505, 506, 507, 509, 510, 511, 514, 516, 517, 518, 519, 520, 521, 522, 524, 525, 527, 528, 530, 532, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 552, 553, 554, 558, 561, 563, 564, 565, 566, 567, 568, 569, 570, 571], "quant_dequant_data": 42, "qtype": [42, 43, 482], "3": [42, 44, 148, 149, 150, 162, 194, 207, 227, 244, 259, 287, 300, 311, 364, 421, 472, 478, 479, 481, 500, 501, 502, 505, 507, 509, 511, 512, 515, 518, 519, 520, 522, 526, 530, 532, 536, 541, 546, 547, 549, 550, 552, 556, 558, 560, 561, 564, 565, 566, 567, 569, 570, 573], "scheme": [42, 43, 44, 149, 154, 165, 170, 171, 442, 456, 482, 483, 484, 501, 511, 530, 564, 570, 572], "sym": [42, 43, 44, 149, 150, 171, 442, 483, 484, 511, 561, 564, 572], "dequant": [42, 43, 44, 51, 88, 91, 92, 93, 94, 96, 149, 157, 170, 171, 442, 472, 478, 483, 567, 568], "asym": [42, 43, 44, 149, 154, 165, 170, 171, 442, 456, 484, 511, 564, 572], "ortsmoothqu": 42, "fake": [42, 44, 113, 165, 167, 171, 175, 420, 442, 456, 519, 561, 564, 567], "channel": [42, 43, 44, 143, 150, 167, 171, 175, 176, 196, 199, 204, 226, 227, 255, 259, 297, 300, 338, 442, 467, 481, 482, 484, 514, 515, 522, 524, 529, 544, 558, 564, 569, 573], "For": [42, 44, 149, 170, 171, 175, 194, 198, 199, 202, 203, 214, 227, 244, 259, 287, 300, 312, 313, 315, 338, 341, 365, 366, 368, 369, 402, 442, 476, 478, 480, 482, 484, 505, 506, 507, 509, 511, 514, 522, 524, 525, 527, 530, 541, 542, 547, 558, 563, 564, 567, 568, 570, 572, 573], "more": [42, 148, 149, 167, 175, 202, 203, 259, 300, 338, 444, 479, 480, 481, 483, 500, 502, 505, 507, 509, 512, 514, 515, 517, 519, 520, 522, 530, 534, 537, 542, 547, 556, 557, 558, 563, 564, 567, 570, 571, 573], "detail": [42, 153, 167, 175, 178, 198, 259, 300, 472, 473, 476, 481, 483, 484, 500, 505, 511, 512, 513, 517, 518, 519, 520, 522, 530, 539, 547, 548, 558, 564, 565, 566, 567, 568, 570, 571], "pleas": [42, 149, 156, 157, 167, 175, 193, 202, 203, 204, 212, 213, 214, 226, 227, 242, 243, 244, 247, 285, 286, 287, 290, 338, 340, 341, 368, 402, 421, 440, 478, 479, 480, 481, 482, 499, 500, 502, 506, 507, 509, 515, 517, 518, 520, 522, 523, 527, 530, 546, 547, 548, 558, 561, 563, 564, 565, 566, 567, 570, 571], "refer": [42, 149, 156, 157, 167, 175, 193, 202, 203, 204, 212, 213, 214, 218, 226, 227, 242, 285, 308, 309, 315, 338, 340, 341, 361, 362, 368, 402, 421, 440, 478, 482, 483, 499, 501, 502, 504, 506, 507, 509, 513, 515, 516, 518, 519, 520, 522, 527, 530, 541, 542, 544, 546, 547, 548, 556, 560, 562, 565, 569, 570], "accur": [42, 156, 167, 175, 213, 440, 450, 558, 564, 567], "effici": [42, 167, 175, 479, 481, 500, 501, 505, 522, 547, 557, 558, 559, 564, 567, 570], "post": [42, 97, 98, 156, 167, 175, 212, 227, 230, 231, 273, 274, 402, 440, 450, 476, 481, 482, 483, 504, 506, 507, 509, 514, 515, 522, 528, 539, 549, 558, 559, 562, 564, 567, 568, 570], "train": [42, 57, 80, 149, 156, 167, 175, 183, 206, 207, 210, 212, 213, 226, 227, 230, 231, 242, 244, 259, 269, 273, 274, 285, 287, 300, 301, 317, 340, 360, 402, 440, 450, 464, 479, 481, 482, 483, 489, 502, 504, 505, 506, 509, 514, 520, 522, 528, 539, 544, 552, 557, 559, 562, 564, 566, 567, 570, 572], "larg": [42, 43, 167, 175, 213, 481, 501, 505, 517, 519, 559, 562, 564, 567, 573], "languag": [42, 167, 175, 213, 308, 361, 476, 481, 509, 517, 543, 559, 562, 564, 567], "2": [42, 43, 44, 54, 74, 105, 109, 149, 150, 162, 167, 171, 173, 175, 177, 194, 200, 206, 207, 220, 226, 227, 243, 260, 286, 311, 313, 315, 340, 347, 364, 366, 368, 379, 406, 421, 442, 472, 478, 482, 500, 501, 502, 504, 505, 511, 514, 515, 516, 517, 518, 520, 543, 549, 550, 552, 553, 554, 556, 558, 559, 561, 562, 564, 565, 566, 567, 569, 570, 571], "spiq": [42, 167, 175, 567], "free": [42, 167, 175, 212, 230, 231, 273, 274, 402, 476, 528, 533, 541, 549, 556, 566, 567], "per": [42, 43, 44, 167, 171, 175, 177, 226, 227, 260, 442, 444, 466, 482, 484, 501, 547, 558, 563, 564, 573], "we": [42, 43, 67, 68, 70, 74, 86, 143, 150, 162, 167, 175, 176, 177, 198, 202, 209, 226, 227, 241, 260, 262, 284, 308, 311, 361, 364, 409, 476, 478, 482, 483, 484, 501, 504, 507, 509, 511, 517, 518, 519, 526, 527, 530, 534, 537, 539, 540, 542, 545, 552, 553, 554, 556, 557, 558, 560, 561, 562, 564, 565, 566, 567, 568, 570, 571], "onli": [42, 44, 54, 63, 70, 86, 109, 115, 143, 162, 167, 169, 171, 175, 176, 177, 186, 191, 195, 201, 208, 226, 227, 242, 260, 262, 266, 285, 305, 317, 338, 340, 351, 402, 412, 420, 421, 444, 450, 472, 481, 482, 483, 484, 499, 500, 501, 504, 505, 507, 510, 511, 517, 519, 520, 527, 540, 558, 559, 560, 561, 562, 567, 568, 570, 571, 572], "inplac": [42, 167, 457], "mean": [42, 44, 149, 167, 171, 179, 200, 209, 226, 227, 255, 259, 297, 300, 313, 315, 338, 350, 366, 368, 411, 442, 478, 483, 484, 501, 504, 507, 511, 518, 519, 525, 544, 558, 561, 562, 564, 567, 569, 570, 572, 573], "weight": [42, 43, 44, 60, 61, 122, 140, 141, 143, 148, 149, 150, 153, 154, 157, 167, 169, 170, 171, 176, 179, 193, 195, 199, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 215, 217, 226, 227, 305, 338, 340, 357, 368, 402, 409, 418, 420, 442, 444, 450, 472, 473, 481, 482, 483, 484, 500, 504, 506, 511, 513, 517, 519, 541, 552, 556, 558, 559, 560, 561, 562, 567, 568, 570, 571, 572], "chang": [42, 96, 143, 149, 150, 167, 176, 206, 207, 209, 210, 212, 213, 216, 226, 227, 340, 342, 409, 472, 477, 483, 501, 507, 510, 516, 519, 522, 532, 533, 536, 539, 545, 558, 568, 569, 570], "you": [42, 162, 167, 226, 227, 240, 242, 283, 285, 340, 368, 402, 444, 477, 478, 483, 501, 502, 504, 507, 515, 516, 518, 520, 522, 524, 525, 527, 532, 536, 539, 540, 541, 542, 543, 544, 545, 547, 558, 561, 564, 565, 566, 567, 568, 571], "can": [42, 43, 44, 143, 153, 157, 162, 167, 176, 190, 198, 199, 200, 205, 213, 214, 216, 226, 227, 230, 231, 241, 244, 259, 260, 262, 273, 274, 284, 287, 300, 311, 313, 315, 338, 340, 342, 364, 366, 368, 369, 379, 402, 444, 461, 472, 478, 479, 481, 482, 483, 484, 499, 501, 502, 504, 505, 506, 507, 509, 511, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 526, 527, 528, 530, 532, 533, 534, 536, 537, 539, 540, 542, 544, 545, 546, 547, 549, 556, 557, 558, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573], "recov": [42, 167, 471, 472, 482, 506], "helper": [43, 45, 110, 116, 148, 170, 242, 243, 244, 258, 285, 286, 287, 299, 303, 304, 305, 377, 470], "get_node_original_nam": 43, "origin": [43, 44, 140, 148, 149, 163, 167, 170, 194, 198, 210, 218, 220, 227, 242, 259, 260, 285, 300, 324, 325, 327, 328, 329, 339, 340, 359, 407, 420, 457, 467, 472, 477, 502, 527, 558, 561, 569, 570, 572], "simple_progress_bar": 43, "total": [43, 205, 259, 300, 315, 340, 368, 502, 504, 558, 564, 569, 573], "progress": [43, 192, 195, 208, 244, 287, 533, 539, 541, 558, 561], "bar": [43, 244, 287, 539, 559], "case": [43, 70, 74, 153, 162, 171, 177, 227, 241, 258, 259, 260, 284, 299, 300, 306, 330, 335, 343, 379, 484, 501, 505, 506, 507, 511, 513, 518, 523, 527, 539, 540, 541, 544, 550, 553, 554, 556, 558, 559, 561, 564, 565, 567, 569, 571, 572, 573], "where": [43, 153, 162, 226, 227, 311, 315, 364, 368, 420, 472, 484, 500, 504, 505, 532, 536, 540, 567, 568], "tqdm": [43, 519], "t": [43, 67, 68, 70, 143, 153, 162, 176, 200, 226, 227, 259, 262, 300, 313, 366, 478, 482, 504, 505, 507, 519, 520, 540, 545, 558, 561, 564, 570, 572], "dtype_to_nam": 43, "dtype_map": 43, "dtype": [43, 44, 102, 105, 150, 226, 227, 245, 246, 255, 259, 288, 289, 297, 300, 442, 444, 467, 483, 484, 502, 504, 509, 511, 522, 544, 560, 561, 564, 567, 568, 569, 572], "its": [43, 60, 96, 148, 157, 198, 207, 210, 212, 218, 227, 238, 244, 259, 281, 287, 300, 303, 309, 310, 340, 347, 362, 363, 406, 476, 502, 505, 516, 518, 520, 530, 532, 536, 539, 540, 558, 564, 566, 569, 570], "string": [43, 45, 116, 148, 149, 156, 160, 162, 177, 184, 186, 190, 191, 198, 200, 205, 214, 215, 216, 218, 223, 226, 227, 244, 261, 266, 287, 301, 306, 308, 311, 317, 318, 319, 321, 322, 330, 335, 338, 339, 340, 341, 342, 343, 361, 364, 373, 377, 438, 440, 464, 469, 472, 518, 569], "represent": [43, 160, 476, 478, 500, 506, 558, 561], "quanttyp": [43, 420], "repres": [43, 200, 204, 205, 214, 215, 218, 244, 249, 287, 292, 311, 313, 315, 364, 366, 368, 476, 484, 500, 502, 509, 547, 558, 561, 562, 570], "make_quant_nod": 43, "make": [43, 105, 143, 176, 190, 200, 205, 214, 216, 240, 283, 338, 340, 342, 472, 476, 482, 483, 499, 501, 511, 518, 519, 527, 532, 536, 539, 541, 558, 561, 562, 563, 564, 566, 567, 570], "quantizelinear": 43, "make_dquant_nod": 43, "axi": [43, 227], "dequantizelinear": 43, "is_b_transpos": 43, "inuput": 43, "b": [43, 74, 149, 153, 242, 285, 472, 477, 500, 502, 518, 558, 564, 567, 570], "transpos": [43, 73, 150, 204, 255, 259, 300, 304, 338, 564, 569], "split_shared_bia": 43, "share": [43, 44, 82, 98, 109, 141, 149, 171, 442, 510, 511, 564, 567, 570], "float_to_float16": 43, "float_to_bfloat16": 43, "bfloat16": [43, 444, 520, 522, 530, 563], "cast_tensor": 43, "is_large_model": 43, "tensorproto": [43, 105], "raw": [43, 177, 243, 247, 250, 286, 290, 293, 350, 411, 518, 543, 570], "remove_init_from_model_input": 43, "collate_pr": 43, "result": [43, 148, 157, 170, 255, 259, 297, 300, 308, 311, 312, 313, 315, 361, 364, 365, 366, 368, 382, 402, 409, 461, 471, 472, 476, 479, 481, 501, 504, 505, 507, 514, 516, 518, 519, 527, 528, 539, 540, 543, 547, 548, 549, 550, 556, 558, 559, 561, 564, 566, 567, 568, 569, 570, 571, 573], "quantize_data_with_scale_zero": 43, "zero_point": [43, 44], "point": [43, 44, 149, 171, 255, 297, 312, 313, 322, 347, 365, 366, 406, 442, 472, 518, 539, 544, 545, 561, 564, 567, 569, 570], "To": [43, 311, 364, 379, 477, 483, 484, 502, 504, 507, 520, 523, 526, 532, 534, 536, 537, 541, 545, 558, 560, 563, 564, 565, 567, 570, 572], "pack": [43, 61], "comput": [43, 44, 105, 149, 153, 157, 170, 308, 309, 312, 313, 315, 361, 362, 365, 366, 368, 444, 461, 472, 500, 501, 506, 509, 518, 519, 520, 522, 533, 542, 558, 559, 561, 564, 567, 570], "linear": [43, 149, 150, 156, 165, 169, 170, 171, 175, 196, 198, 199, 204, 209, 218, 221, 226, 227, 338, 440, 442, 456, 478, 505, 509, 519, 558, 564, 567, 570], "transform": [43, 50, 143, 145, 146, 147, 149, 156, 166, 169, 212, 242, 243, 244, 245, 246, 247, 249, 251, 253, 285, 286, 287, 288, 289, 290, 292, 294, 296, 307, 360, 440, 450, 457, 478, 479, 481, 500, 502, 505, 506, 507, 508, 512, 517, 519, 522, 527, 528, 529, 530, 542, 550, 553, 554, 558, 559, 563, 564, 567, 568, 570, 572, 573], "when": [43, 54, 64, 70, 148, 160, 162, 179, 199, 205, 210, 218, 226, 227, 242, 243, 251, 259, 285, 286, 294, 300, 309, 339, 340, 362, 402, 444, 461, 476, 479, 483, 501, 502, 519, 530, 532, 533, 536, 540, 541, 544, 545, 546, 548, 552, 558, 561, 564, 567, 569, 570], "uint8": [43, 171, 255, 297, 311, 359, 364, 420, 442, 482, 502, 511, 560, 561, 569, 572], "rmin": [43, 561], "rmax": [43, 561], "m": [43, 157, 171, 202, 203, 226, 227, 338, 442, 477, 505, 515, 522, 524, 527, 530, 534, 537, 547, 558, 573], "max": [43, 104, 143, 149, 171, 176, 179, 191, 194, 226, 227, 259, 300, 312, 313, 347, 365, 366, 406, 442, 472, 481, 504, 515, 519, 542, 544, 558, 561, 564, 567, 569, 570], "ab": [43, 156, 171, 193, 212, 213, 340, 440, 442, 450, 558, 561, 567], "np": [43, 259, 300, 347, 406, 507, 549, 567, 569, 570], "calculate_scale_zp": 43, "quantize_rang": 43, "calcul": [43, 60, 170, 193, 202, 218, 227, 245, 246, 288, 289, 312, 313, 338, 340, 350, 365, 366, 411, 462, 472, 500, 502, 518, 519, 530, 542, 556, 558, 561, 564, 566, 567, 570, 572], "quantize_data": 43, "add": [43, 53, 64, 109, 119, 148, 186, 218, 226, 227, 242, 244, 266, 285, 287, 339, 357, 418, 472, 477, 478, 484, 501, 502, 507, 509, 511, 518, 519, 534, 537, 541, 542, 549, 552, 553, 566, 567, 568, 570, 571], "necessari": [43, 214, 476, 479, 483, 521, 540, 558, 566, 570], "intermedi": [43, 157, 184, 226, 227, 261, 478, 514, 561], "full": [43, 149, 150, 242, 243, 244, 285, 286, 287, 467, 472, 481, 500, 502, 504, 510, 516, 540, 545, 558, 564, 565], "equat": [43, 313, 315, 366, 368, 561, 567], "r": [43, 143, 176, 504, 515, 540, 541, 543, 544, 546, 547, 561, 573], "": [43, 44, 105, 143, 148, 162, 176, 198, 199, 200, 204, 205, 206, 207, 210, 212, 213, 218, 221, 223, 224, 226, 227, 241, 244, 258, 259, 260, 262, 264, 284, 287, 299, 300, 313, 338, 340, 366, 368, 369, 373, 402, 438, 444, 469, 472, 476, 477, 479, 483, 484, 504, 505, 507, 509, 511, 514, 519, 520, 527, 530, 532, 536, 539, 542, 544, 547, 557, 558, 559, 560, 561, 564, 565, 566, 567, 570, 571, 572, 573], "q": [43, 44, 107, 109, 131, 564, 567], "z": [43, 500, 505, 567], "real": [43, 245, 262, 288, 483, 500, 507, 541, 548, 559, 561], "quantize_data_per_channel": 43, "dequantize_data_with_scale_zero": 43, "tensor_valu": 43, "scale_valu": 43, "zo_valu": 43, "dequantize_data": 43, "valueinfo": 43, "tensor_nam": [43, 148, 162, 163], "new_dtyp": 43, "cast": [43, 51, 563, 569], "info": [43, 170, 171, 181, 202, 203, 218, 257, 262, 267, 338, 373, 467, 468, 472, 478, 504, 521, 549, 554], "quantizedvalu": 43, "new_quantized_nam": 43, "scale_nam": 43, "zero_point_nam": 43, "quantized_value_typ": 43, "quint8": 43, "linearli": 43, "quantizediniti": 43, "quantized_data": 43, "quantizationmod": 43, "quantizedvaluetyp": 43, "quantformat": 43, "quantize_nparrai": 43, "arr": [43, 472], "low": [43, 149, 150, 230, 231, 245, 246, 273, 274, 288, 289, 306, 316, 343, 369, 482, 483, 499, 500, 502, 507, 519, 520, 544, 559, 561, 564, 567, 570], "high": [43, 245, 246, 288, 289, 502, 504, 515, 544, 559, 570], "attribute_to_kwarg": 43, "attribut": [43, 83, 104, 105, 148, 170, 198, 209, 223, 224, 227, 444, 472, 482, 501, 511, 513, 519, 560, 572], "make_nod": 43, "find_by_nam": 43, "item_list": 43, "find": [43, 67, 68, 70, 105, 148, 221, 315, 322, 347, 368, 406, 472, 482, 504, 517, 525, 532, 536, 539, 540, 542, 544, 558, 564, 566, 567, 568, 570], "item": [43, 218, 224, 226, 227, 258, 299, 339, 357, 418, 438, 500, 507, 558, 567, 570], "trt_env_setup": 43, "environ": [43, 177, 260, 476, 499, 532, 536, 539, 547, 550, 552, 553, 554, 570], "variabl": [43, 160, 177, 215, 226, 227, 244, 260, 287, 347, 406, 420, 515, 558, 570], "tensorrt": [43, 500, 520, 561], "to_numpi": 43, "infer_shap": 43, "in_mp": 43, "int_max": 43, "31": [43, 573], "auto_merg": 43, "guess_output_rank": 43, "verbos": [43, 305, 347, 406], "base_dir": 43, "shape": [43, 44, 105, 148, 149, 200, 245, 246, 255, 259, 288, 289, 297, 300, 311, 364, 481, 502, 511, 512, 519, 541, 542, 564, 567, 569], "weightonli": 44, "get_blob_s": 44, "group_siz": [44, 149, 154, 165, 170, 171, 420, 442, 456, 564], "has_zp": 44, "blob_siz": 44, "how": [44, 149, 162, 171, 183, 193, 200, 206, 207, 212, 213, 226, 227, 259, 300, 301, 338, 442, 477, 478, 480, 482, 501, 502, 505, 506, 507, 513, 518, 519, 533, 534, 537, 538, 539, 541, 552, 553, 554, 558, 559, 561, 567, 569, 570, 571, 572], "mani": [44, 149, 171, 368, 402, 442, 501, 515, 564, 570, 572], "element": [44, 149, 171, 202, 203, 218, 240, 283, 311, 338, 364, 442, 472, 502, 514, 518, 558, 564, 567], "one": [44, 109, 110, 115, 149, 150, 162, 170, 171, 177, 200, 204, 209, 212, 213, 214, 216, 259, 269, 300, 308, 311, 315, 317, 338, 341, 342, 361, 364, 368, 442, 444, 479, 482, 500, 505, 506, 507, 511, 514, 515, 518, 519, 520, 522, 523, 527, 528, 530, 532, 533, 536, 539, 540, 541, 544, 545, 546, 547, 549, 556, 557, 558, 560, 561, 562, 564, 565, 567, 569, 570], "zp": [44, 149, 171, 442, 567], "make_matmul_weight_only_nod": 44, "weight_shap": 44, "num_bit": [44, 113, 149, 165, 170, 171, 442, 456, 567], "k_block": 44, "q_weight": 44, "accuracy_level": 44, "matmulfpq4": 44, "accuraci": [44, 177, 179, 218, 226, 227, 230, 231, 273, 274, 301, 306, 315, 330, 335, 343, 368, 369, 379, 402, 407, 421, 444, 461, 469, 478, 481, 483, 484, 500, 501, 502, 504, 506, 507, 508, 509, 517, 518, 519, 530, 539, 541, 548, 549, 552, 553, 556, 557, 558, 559, 560, 564, 565, 566, 567, 568, 571, 572, 573], "level": [44, 181, 198, 407, 421, 468, 476, 549, 567, 570], "unset": 44, "jbla": 44, "kernel": [44, 175, 226, 227, 482, 483, 570], "fp16": [44, 227, 357, 418, 561], "4": [44, 54, 149, 150, 154, 165, 170, 171, 177, 194, 200, 209, 226, 227, 251, 254, 255, 259, 294, 297, 300, 308, 309, 311, 361, 362, 364, 420, 421, 442, 450, 456, 476, 482, 484, 499, 507, 508, 511, 514, 515, 518, 519, 527, 547, 549, 553, 558, 561, 564, 567, 569, 570, 573], "matmulnbit": 44, "new_init": 44, "matmul_weight_only_nod": 44, "quant_tensor": 44, "32": [44, 149, 154, 171, 196, 420, 442, 450, 507, 513, 564, 573], "ratio": [44, 143, 176, 200, 205, 218, 226, 227, 255, 259, 297, 300, 340, 502, 519, 542, 558, 569, 573], "group": [44, 149, 150, 153, 171, 215, 325, 442, 481, 514, 558, 564, 568, 569, 570, 573], "clip": [44, 171, 442, 564, 567], "qdq_tensor": 44, "quant": [44, 148, 149, 170, 171, 226, 227, 357, 418, 435, 442, 478, 517, 519, 561], "pad_tensor": 44, "rowi": 44, "so": [44, 105, 259, 300, 420, 478, 482, 504, 510, 514, 520, 525, 527, 543, 544, 545, 561, 563, 564, 567, 568, 569, 571], "divis": 44, "pade": 44, "rtn_quantiz": [44, 171, 442], "weight_config": [44, 149, 150, 154, 156, 169, 171, 440, 442], "round": [44, 143, 149, 171, 176, 442, 450, 481, 559, 561, 564, 567], "nearst": [44, 171, 442], "method": [44, 141, 143, 149, 160, 162, 170, 171, 181, 190, 215, 226, 227, 235, 240, 241, 242, 244, 251, 259, 262, 278, 283, 284, 285, 287, 294, 300, 321, 322, 323, 357, 418, 420, 442, 444, 464, 465, 467, 468, 478, 479, 481, 500, 501, 502, 504, 505, 506, 518, 519, 557, 558, 561, 563, 564, 567, 569, 570], "modelproto": [44, 303, 369, 521], "onnxmodel": [44, 376, 395], "fc2": [44, 170, 171, 442], "rtn": [44, 170, 443, 450, 562, 564], "get_weight_scal": 44, "apply_awq_scal": 44, "absorb_pair": 44, "output_dict": 44, "appli": [44, 113, 126, 127, 128, 131, 133, 137, 148, 149, 165, 169, 183, 209, 211, 269, 309, 362, 433, 440, 443, 456, 476, 483, 484, 519, 522, 524, 530, 539, 543, 544, 549, 557, 558, 561, 563, 566, 567, 570, 571, 572], "salient": [44, 171, 558, 564], "apply_awq_clip": 44, "mse": [44, 170, 171, 226, 227, 307, 315, 349, 360, 368, 402, 410, 472, 504, 518, 544, 560, 564, 565], "prepare_input": 44, "n_sampl": [44, 149, 154, 170, 171], "sampl": [44, 77, 149, 170, 171, 226, 227, 235, 240, 242, 243, 244, 255, 259, 278, 283, 285, 286, 287, 297, 300, 315, 322, 347, 368, 406, 479, 501, 502, 508, 514, 540, 561, 564, 567, 569, 570, 572, 573], "session": [44, 148, 241, 284, 377, 519, 568], "awq_quant": [44, 171], "enable_auto_scal": [44, 171, 564], "enable_mse_search": [44, 171, 442, 450, 564], "awar": [44, 154, 157, 171, 183, 227, 269, 317, 338, 409, 461, 482, 483, 484, 500, 506, 507, 509, 514, 539, 549, 557, 559, 564, 570], "awq": [44, 171, 562, 564], "enabl": [44, 109, 149, 153, 157, 171, 205, 226, 227, 340, 444, 483, 484, 507, 515, 520, 522, 524, 527, 528, 530, 541, 543, 544, 546, 549, 558, 559, 564, 567, 570], "gptq": [44, 171, 442, 450, 562, 564], "w": [44, 156, 259, 300, 440, 558, 567, 569], "h": [44, 226, 227, 259, 300, 507, 547, 548, 552, 553, 554, 569], "blocksiz": 44, "percdamp": [44, 450, 564], "01": [44, 149, 226, 227, 450, 519, 560, 564, 570, 572, 573], "actord": [44, 564], "perchannel": 44, "hessian": [44, 157, 409, 564, 570], "matrix": [44, 368, 402, 481, 530, 571], "percent": 44, "averag": [44, 312, 313, 315, 365, 366, 368, 518, 519, 564, 570, 573], "diagon": [44, 564], "dampen": [44, 153], "rearrang": [44, 212, 558, 564], "consid": [44, 148, 153, 315, 368, 476, 500, 505, 540, 570], "diag": 44, "error": [44, 105, 149, 157, 162, 181, 315, 350, 368, 411, 468, 504, 518, 523, 544, 545, 548, 564, 567, 570], "gptq_quantiz": [44, 171], "get_ops_recurs": 45, "prefix": [45, 148, 155, 162, 163, 168, 170, 177, 522, 527, 568], "graph_info": 45, "templateadaptor": 45, "tampl": 45, "dictionari": [45, 67, 68, 70, 148, 149, 155, 157, 162, 170, 190, 221, 223, 224, 226, 227, 258, 299, 311, 318, 321, 323, 364, 438, 460, 472], "yaml": [45, 218, 223, 224, 227, 230, 231, 242, 244, 260, 273, 274, 285, 287, 301, 306, 317, 318, 319, 321, 330, 335, 343, 344, 425, 471, 472, 482, 484, 513, 518, 519, 556, 560, 568, 569], "file": [45, 105, 148, 160, 162, 163, 170, 174, 187, 214, 218, 223, 226, 227, 230, 231, 242, 243, 244, 247, 258, 259, 265, 268, 273, 274, 285, 286, 287, 290, 299, 300, 301, 306, 311, 317, 318, 319, 321, 330, 335, 339, 341, 343, 344, 364, 369, 379, 385, 386, 390, 402, 471, 472, 477, 479, 482, 483, 484, 507, 510, 513, 516, 518, 519, 521, 525, 534, 537, 538, 539, 540, 542, 543, 544, 545, 547, 548, 552, 553, 554, 556, 560, 561, 564, 568, 569], "pytorchadaptor": 45, "api": [45, 70, 75, 110, 153, 156, 270, 306, 311, 343, 356, 357, 364, 368, 402, 417, 418, 421, 440, 472, 478, 485, 487, 491, 494, 497, 504, 509, 514, 515, 519, 524, 528, 529, 530, 546, 547, 551, 565, 566, 570, 574], "pytorch_ipexadaptor": 45, "intel": [45, 186, 202, 203, 214, 263, 266, 302, 307, 314, 315, 338, 341, 349, 355, 360, 367, 368, 380, 402, 410, 416, 474, 476, 477, 479, 480, 482, 483, 484, 500, 502, 503, 505, 506, 508, 509, 511, 512, 516, 517, 520, 521, 522, 527, 529, 530, 541, 542, 543, 544, 546, 547, 556, 557, 558, 559, 561, 563, 564, 565, 567, 568, 570, 571, 572], "extens": [45, 160, 162, 472, 479, 481, 482, 511, 514, 515, 517, 519, 520, 521, 523, 528, 529, 530, 534, 537, 538, 542, 558, 559, 561, 564, 567, 570, 571, 572], "ipex": [45, 164, 170, 226, 227, 471, 514, 519, 520, 524, 528, 529, 567], "pytorch_fxadaptor": 45, "fx": [45, 170, 226, 351, 412, 514, 520, 528, 529, 543, 559, 561, 563], "graph": [45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 112, 113, 114, 117, 130, 132, 136, 139, 142, 143, 145, 146, 147, 148, 198, 241, 284, 306, 370, 377, 401, 478, 482, 502, 505, 507, 513, 521, 522, 541, 544, 561, 562, 563, 568], "pytorchweightonlyadaptor": 45, "pytorchqueri": 45, "cpu": [45, 91, 92, 93, 94, 149, 150, 156, 161, 162, 164, 170, 226, 227, 440, 444, 467, 472, 481, 483, 499, 500, 514, 519, 520, 522, 524, 530, 539, 547, 559, 560, 561, 562, 563, 564, 568], "querybackendcap": [46, 482, 483], "tensorflowadaptor": 47, "stock": [47, 528, 567], "spr": 47, "tensorflow_itexadaptor": 47, "itex": [47, 109, 226, 227, 304, 520, 561, 567], "tensorflowqueri": [47, 482], "performance_onli": [47, 48, 49, 107, 131, 136, 147, 226, 519], "itex_mod": [47, 48, 89, 107, 131, 136], "quant_mod": [47, 357, 418, 483, 484], "graphconvert": 48, "qt_config": 48, "recip": [48, 198, 226, 227, 306, 343, 481, 519, 562, 564, 567, 570], "int8_sequ": 48, "fp32_op": [48, 50, 107], "bf16_op": [48, 50, 107, 483, 563], "data_load": [48, 49, 482], "calib_func": [48, 154, 170, 171, 402, 563], "fake_qu": [48, 88, 107, 131, 136], "qdq_enabl": 48, "new_api": [48, 49, 71, 72, 77, 79, 92, 99, 131, 136, 143], "use_bf16": [48, 49, 226, 560], "without": [49, 90, 148, 194, 210, 259, 300, 340, 359, 420, 476, 505, 507, 519, 530, 541, 544, 558, 559, 560, 570, 571], "graphconverterwithoutcalib": 49, "recover_config": 49, "rewrit": [50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 106, 107, 108, 109, 195], "bf16convert": [50, 563], "rerewrit": 51, "dequantizecastoptim": 51, "b16": 51, "dequantize_cast_optim": [52, 87, 111], "biasadd": [53, 59, 64, 66, 109, 511], "convertaddtobiasaddoptim": 53, "conv2d": [53, 59, 60, 61, 65, 66, 71, 125, 135, 143, 156, 440, 483, 484, 504, 509, 511, 544, 567, 568, 570], "addv2": [53, 69, 511], "layout": 54, "convertlayoutoptim": 54, "convers": [54, 55, 227, 317, 477, 482, 483, 519, 520, 561, 563, 567], "optim": [54, 74, 75, 79, 80, 116, 118, 148, 149, 153, 185, 188, 189, 190, 192, 195, 198, 207, 212, 223, 226, 227, 263, 269, 306, 307, 323, 343, 347, 360, 406, 461, 462, 469, 472, 479, 481, 499, 504, 505, 506, 507, 511, 512, 514, 515, 517, 519, 521, 522, 524, 526, 527, 530, 533, 541, 544, 545, 546, 548, 550, 559, 560, 561, 563, 564, 566, 567, 568, 570, 572], "nchw": [54, 255], "nhwc": [54, 255], "It": [54, 162, 171, 179, 183, 187, 200, 230, 231, 268, 273, 274, 313, 315, 322, 338, 343, 350, 366, 368, 369, 402, 407, 411, 461, 482, 483, 484, 500, 504, 505, 519, 525, 528, 533, 539, 540, 541, 542, 544, 545, 547, 558, 561, 564, 565, 566, 570, 572], "exist": [54, 177, 224, 260, 377, 438, 472, 509, 518, 526, 570], "abov": [54, 482, 483, 484, 505, 541, 542, 544, 547, 558, 561, 567, 570], "graph_def": [54, 140, 141, 148, 304, 369, 377, 401, 402], "leakyrelu": [55, 567], "convertleakyreluoptim": 55, "below": [55, 66, 74, 226, 227, 344, 368, 402, 477, 478, 481, 482, 483, 484, 501, 504, 505, 507, 513, 518, 522, 524, 532, 533, 536, 539, 542, 547, 556, 557, 558, 560, 561, 564, 566, 567, 568, 570, 571], "subgraph": [55, 66, 105, 168, 562, 570], "mul": [55, 65, 66, 69, 171, 175, 509, 564, 567], "maximum": [55, 149, 200, 205, 226, 227, 242, 259, 285, 300, 309, 340, 347, 362, 377, 406, 484, 500, 502, 504, 519, 558, 561, 567, 569], "note": [55, 160, 204, 311, 351, 364, 412, 479, 481, 483, 484, 501, 504, 507, 509, 511, 515, 517, 519, 524, 527, 532, 536, 539, 541, 545, 547, 549, 558, 561, 564, 567, 568, 570, 571, 572], "coeffici": [55, 149, 215, 558], "less": [55, 148, 170, 226, 227, 472, 499, 505, 519, 546, 558], "than": [55, 148, 242, 259, 285, 300, 438, 444, 472, 479, 481, 499, 502, 513, 544, 552, 556, 557, 558, 561, 564, 566, 569, 570], "valid": [55, 67, 68, 105, 179, 205, 208, 218, 226, 227, 244, 287, 311, 339, 340, 364, 377, 479, 481, 482, 502, 504, 505, 508, 511, 514, 516, 519, 530, 544, 558, 561, 564, 565], "nan": 56, "random": [56, 148, 149, 190, 226, 227, 255, 259, 297, 300, 307, 323, 347, 349, 360, 406, 410, 472, 479, 519, 558, 560, 569, 572], "convertnantorandom": 56, "const": [56, 57, 63, 64, 67, 68, 70, 82, 98], "consist": [56, 63, 477, 478, 547, 567, 570], "placehold": [57, 240, 283], "convertplaceholdertoconst": 57, "dilat": 58, "contract": 58, "dilatedcontract": 58, "spacetobatchnd": 58, "batchtospacend": 58, "pattern": [58, 59, 61, 78, 96, 107, 108, 109, 131, 136, 170, 190, 191, 192, 193, 195, 198, 199, 205, 206, 207, 208, 210, 212, 213, 215, 223, 226, 227, 244, 287, 307, 328, 329, 331, 336, 340, 357, 360, 418, 482, 502, 511, 514, 519, 540, 557, 560, 567, 570, 573], "inject": [59, 519], "dummi": [59, 198, 245, 246, 288, 289, 315, 368, 481, 502, 512, 518, 519, 541], "injectdummybiasaddoptim": 59, "fusion": [59, 61, 70, 78, 109, 126, 127, 128, 131, 132, 133, 137, 478, 482, 511], "expanddim": 60, "expanddimsoptim": 60, "next": [60, 235, 278, 421, 479, 483, 484, 501, 560, 564, 570], "fetch": [61, 170, 174, 235, 278, 483, 502, 552, 553, 554], "reshap": [61, 67, 68, 73, 567], "fetchweightfromreshapeoptim": 61, "handl": [61, 148, 167, 175, 181, 468, 478, 480, 501, 547, 567], "fold": [62, 63, 170, 171, 305, 511, 564, 567], "foldbatchnormnodesoptim": 62, "graphfoldconstantoptim": 63, "sequenc": [63, 105, 149, 199, 202, 203, 226, 227, 242, 258, 259, 285, 299, 300, 309, 313, 338, 362, 366, 482, 502, 511, 558, 564, 569], "self": [63, 170, 171, 198, 226, 227, 379, 444, 482, 483, 501, 502, 514, 518, 541, 566, 568, 570], "supported_op_typ": 63, "fusebiasaddandaddoptim": 64, "second": [64, 162, 179, 199, 226, 227, 242, 285, 407, 472, 504, 519, 532, 536, 540, 552, 553, 564, 567, 570, 572], "columnwis": 65, "fusecolumnwisemuloptim": 65, "depthwiseconv2dn": [65, 71, 125, 135, 511], "math": [66, 561], "fuseconvwithmathoptim": 66, "elimin": [66, 546], "sub": [66, 170, 177, 198, 260, 479, 570], "realdiv": [66, 69], "decompos": [67, 68], "fusedecomposedbnoptim": 67, "input_graph_def": [67, 68, 70], "node_name_from_input": [67, 68, 70], "node_nam": [67, 68, 70, 148, 377, 387, 483], "strip": [67, 68, 70, 83, 84, 148, 568], "port": [67, 68, 70, 541, 548], "other": [67, 68, 70, 149, 153, 160, 167, 175, 241, 284, 313, 366, 377, 476, 478, 483, 484, 504, 511, 514, 516, 519, 521, 542, 556, 558, 561, 567, 569, 570, 573], "underli": [67, 68, 70, 162], "node_from_map": [67, 68, 70], "node_map": [67, 68, 70], "pull": [67, 68, 70], "def": [67, 68, 70, 179, 230, 231, 273, 274, 402, 421, 438, 444, 460, 461, 478, 482, 501, 502, 505, 506, 507, 518, 519, 561, 567, 568, 570], "entri": [67, 68, 70, 157, 186, 266, 306, 344, 433, 437, 443, 449, 457, 472, 516], "index": [67, 68, 70, 105, 177, 218, 227, 235, 240, 244, 278, 283, 287, 322, 472, 502, 518, 540, 544, 564, 567], "everi": [67, 68, 70, 200, 203, 205, 226, 227, 338, 340, 482, 501, 527, 532, 536, 562, 564, 570], "identifi": [67, 68, 70, 162, 311, 364, 377, 547, 558, 564], "want": [67, 68, 70, 198, 226, 227, 240, 242, 283, 285, 340, 407, 444, 461, 478, 482, 501, 502, 507, 519, 527, 539, 540, 547, 556, 561, 564, 566, 568, 570], "nodedef": [67, 68, 70], "rais": [67, 68, 70, 105, 160, 162, 170, 195, 201, 208, 218, 311, 338, 339, 340, 364, 369, 421, 481, 541, 558, 559], "valueerror": [67, 68, 70, 170, 311, 364, 421, 510], "If": [67, 68, 70, 74, 162, 171, 177, 226, 227, 230, 231, 244, 259, 273, 274, 287, 300, 339, 369, 402, 421, 442, 444, 461, 477, 478, 483, 499, 501, 502, 507, 515, 516, 518, 519, 525, 533, 534, 537, 539, 545, 550, 556, 558, 561, 564, 566, 567, 568, 569, 570], "isn": [67, 68, 70], "present": [67, 68, 70, 504, 547, 559, 567], "values_from_const": [67, 68, 70], "node_def": [67, 68, 70], "extract": [67, 68, 70, 148, 198, 244, 287, 359, 420, 502], "ha": [67, 68, 70, 74, 149, 156, 162, 204, 205, 260, 308, 338, 340, 361, 421, 440, 477, 479, 482, 483, 484, 501, 509, 514, 519, 520, 525, 539, 544, 545, 547, 550, 558, 560, 561, 563, 566, 567, 570], "access": [67, 68, 70, 223, 224, 227, 467, 472, 534, 537, 541], "valid_reshape_input": [67, 68], "reshape_in0_ndef": [67, 68], "reshape_in1_ndef": [67, 68], "ar": [67, 68, 105, 150, 162, 170, 200, 205, 206, 207, 212, 213, 226, 227, 242, 259, 285, 300, 311, 315, 322, 338, 339, 340, 344, 346, 347, 364, 368, 403, 405, 406, 420, 421, 444, 464, 471, 472, 476, 477, 478, 479, 482, 483, 501, 502, 504, 505, 506, 507, 508, 509, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 522, 525, 527, 530, 533, 539, 541, 542, 544, 545, 546, 547, 550, 556, 557, 558, 559, 561, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572], "bypass_reshap": [67, 68], "input_node_map": [67, 68], "input_nam": [67, 68, 102, 142, 227, 304, 305, 509], "get_const_dim_count": [67, 68], "dimens": [67, 68, 105, 149, 234, 259, 277, 300, 502, 505, 564, 569], "instancenorm": [68, 567], "fusedecomposedinoptim": 68, "gelu": 69, "fusegeluoptim": 69, "sqrt": [69, 504], "erf": 69, "layernorm": [70, 567], "fuselayernormoptim": 70, "remap": [70, 162], "smaller": [70, 259, 300, 505, 519, 558, 569], "fusedbatcnormv3": 70, "And": [70, 477, 478, 499, 519, 525, 567], "further": [70, 227, 476, 520, 521, 522, 524, 533, 539, 561], "restrict": [70, 162, 226, 227, 558, 566], "2d": [70, 567], "3d": [70, 559, 567], "kera": [70, 116, 186, 198, 218, 227, 244, 251, 266, 287, 294, 372, 377, 433, 435, 437, 483, 501, 507, 521, 529, 530], "fusepadwithconv2doptim": 71, "excluded_op_nam": [71, 72, 223, 226, 227, 519, 558], "cfg": [71, 72, 170, 223, 357, 418, 464, 483, 484], "itex_qdq_mod": [71, 72], "conv3d": [71, 125], "fusepadwithfp32conv2doptim": 72, "fusetransposereshapeoptim": 73, "cse": [74, 98], "graphcseoptim": 74, "introduc": [74, 482, 483, 484, 511, 519, 561, 564, 565, 567, 571], "ident": [74, 80, 199, 476, 505], "three": [74, 218, 242, 285, 346, 403, 405, 478, 482, 483, 500, 515, 520, 533, 547, 557, 561, 563, 566, 567, 568], "d": [74, 170, 505, 513, 540, 542, 548, 558, 573], "those": [74, 162, 350, 411, 472, 504, 505, 506, 513, 519, 520, 557, 558, 561, 570], "child": [74, 156, 163, 440, 568], "b1": 74, "c1c2": 74, "d1": [74, 472], "c1": 74, "c2": 74, "memori": [74, 149, 150, 170, 306, 330, 335, 343, 379, 472, 500, 501, 506, 519, 520, 522, 556, 558, 561, 562, 564, 567, 570, 573], "bound": [74, 177, 191, 259, 300, 311, 347, 364, 406, 518, 569], "like": [74, 96, 98, 148, 149, 162, 198, 218, 227, 230, 231, 232, 244, 273, 274, 275, 287, 306, 315, 340, 343, 344, 368, 377, 402, 461, 477, 478, 479, 482, 483, 504, 505, 506, 514, 527, 542, 544, 557, 558, 561, 564, 565, 567, 570], "relu": [74, 78, 109, 478, 511, 567, 568], "relu6": [74, 511], "updat": [74, 153, 163, 170, 193, 194, 200, 218, 340, 368, 402, 433, 469, 510, 517, 518, 519, 525, 530, 533, 549, 558, 564, 567, 570, 571], "graphdef": [74, 148, 377, 401, 521], "grappler": [75, 511], "grappleroptim": 75, "input_output_nam": 75, "opt_cfg": 75, "wrapper": [75, 102, 103, 104, 105, 122, 140, 149, 155, 165, 169, 184, 195, 241, 259, 261, 262, 264, 265, 284, 300, 311, 315, 364, 368, 373, 377, 456, 563], "leverag": [75, 150, 467, 479, 481, 505, 509, 522, 539, 557, 561, 564, 570], "built": [75, 186, 209, 228, 229, 233, 238, 242, 243, 248, 250, 252, 253, 255, 256, 259, 264, 266, 271, 272, 276, 279, 281, 285, 286, 291, 293, 295, 296, 297, 298, 300, 344, 368, 371, 379, 402, 461, 479, 482, 502, 507, 519, 532, 536, 556, 561, 566, 569, 570, 572], "convert_add_to_biasadd": [76, 87, 111], "convert_layout": [76, 87, 111], "convert_leakyrelu": [76, 87, 111], "convert_nan_to_random": [76, 87, 111], "convert_placeholder_to_const": [76, 87, 111], "dilated_contract": [76, 87, 111], "dummy_biasadd": [76, 87, 111], "expanddims_optim": [76, 87, 111], "fetch_weight_from_reshap": [76, 87, 111], "fold_batch_norm": [76, 87, 111], "fold_const": [76, 87, 111], "fuse_biasadd_add": [76, 87, 111], "fuse_column_wise_mul": [76, 87, 111], "fuse_conv_with_math": [76, 87, 111], "fuse_decomposed_bn": [76, 87, 111], "fuse_decomposed_in": [76, 87, 111], "fuse_gelu": [76, 87, 111], "fuse_layer_norm": [76, 87, 111], "fuse_pad_with_conv": [76, 87, 111], "fuse_pad_with_fp32_conv": [76, 87, 111], "fuse_reshape_transpos": [76, 87, 111], "graph_cse_optim": [76, 87, 111], "grappler_pass": [76, 87, 111], "insert_print_nod": [76, 87, 111], "move_squeeze_after_relu": [76, 87, 111], "pre_optim": [76, 87, 111], "remove_training_nod": [76, 87, 111], "rename_batch_norm": [76, 87, 111], "split_shared_input": [76, 87, 111], "strip_equivalent_nod": [76, 87, 111, 148], "strip_unused_nod": [76, 87, 111, 148], "switch_optim": [76, 87, 111], "insert": [77, 105, 107, 109, 113, 146, 149, 167, 175, 478, 483, 501, 514, 519, 522, 558, 561, 563, 564, 567, 568], "print": [77, 156, 157, 198, 315, 368, 421, 440, 472, 507, 518, 519, 541, 542, 558, 567, 570], "insertprintminmaxnod": 77, "pre_node_nam": 77, "post_node_nam": 77, "pass": [77, 148, 149, 160, 162, 177, 368, 402, 438, 444, 471, 472, 477, 478, 482, 499, 502, 505, 506, 507, 513, 518, 519, 540, 547, 558, 560, 561, 563, 567, 572], "move": [78, 149, 162, 478, 545, 560, 564, 565], "squeez": [78, 478], "movesqueezeafterreluoptim": 78, "match": [78, 102, 162, 198, 311, 312, 364, 365, 505, 540, 564], "pre": [79, 116, 163, 198, 230, 231, 242, 273, 274, 285, 369, 402, 450, 461, 502, 505, 506, 519, 527, 544, 558, 559, 561, 564, 568, 570], "entranc": [79, 191, 233], "preoptim": 79, "removetrainingnodesoptim": 80, "protected_nod": 80, "types_to_splic": 80, "checknumer": 80, "stopgradi": 80, "renam": [81, 565], "fusedbatchnorm": 81, "fusedbatchnormv2": 81, "renamebatchnormoptim": 81, "splitsharedinputoptim": 82, "equival": [83, 169, 481, 559, 564, 567], "stripequivalentnodesoptim": 83, "output_node_nam": [83, 84, 131, 132, 136, 148], "same": [83, 141, 148, 150, 171, 194, 212, 227, 242, 259, 285, 300, 311, 364, 444, 472, 482, 484, 499, 501, 502, 505, 507, 511, 519, 523, 527, 532, 536, 558, 560, 561, 564, 567, 568, 569, 570], "unus": [84, 148], "stripunusednodesoptim": 84, "input_node_nam": [84, 131, 136, 148], "switch": [85, 522, 568], "switchoptim": 85, "condit": [85, 242, 243, 244, 259, 285, 286, 287, 300, 346, 403, 405, 502, 516, 569, 570], "graphrewriterbas": 86, "abstract": [86, 183, 191, 259, 300, 301, 306, 343, 482, 484, 513], "freeze_fake_qu": [87, 95, 111], "freeze_valu": [87, 95, 111], "freeze_value_without_calib": [87, 95, 111], "fuse_conv_redundant_dequant": [87, 95, 111], "fuse_conv_requant": [87, 95, 111], "fuse_matmul_redundant_dequant": [87, 95, 111], "fuse_matmul_requant": [87, 95, 111], "meta_op_optim": [87, 95, 111], "post_hostconst_convert": [87, 95, 111], "post_quantized_op_cs": [87, 95, 111], "rnn_convert": [87, 95, 111], "scale_propag": [87, 95, 111], "onnx_graph": [87, 101, 111], "onnx_schema": [87, 101, 111], "tf2onnx_util": [87, 101, 111], "insert_qdq_pattern": [87, 106, 111], "merge_duplicated_qdq": [87, 106, 111], "share_qdq_y_pattern": [87, 106, 111], "freez": [88, 89, 90, 148, 522, 558], "fakequ": 88, "freezefakequantopoptim": 88, "follow": [88, 110, 199, 244, 287, 308, 311, 361, 364, 476, 477, 478, 479, 482, 483, 484, 501, 502, 505, 506, 507, 511, 515, 516, 518, 519, 520, 521, 522, 523, 524, 532, 536, 541, 543, 544, 547, 552, 557, 558, 560, 561, 564, 567, 568, 570], "freezevaluetransform": 89, "max_min_data": [89, 90], "postfix": [89, 90], "tensor_data": [89, 472, 473], "th": [89, 90], "gpu": [89, 90, 97, 149, 162, 226, 227, 444, 481, 499, 514, 519, 520, 524, 530, 539, 560, 561, 562], "freezevaluewithoutcalibtransform": 90, "95": [90, 315, 368, 518, 573], "quantizedconv": [91, 92], "quantizeddeconv": 91, "redund": [91, 93], "fuseconvredundantdequantizetransform": 91, "_quantizedconv": 91, "_quantizeddeconv": 91, "successor": [91, 92, 93, 94], "requant": [92, 94, 568], "fuseconvrequantizetransform": 92, "quantizedmatmul": [93, 94], "fusematmulredundantdequantizetransform": 93, "_quantizedmatmul": [93, 94], "fusematmulrequantizedequantizetransform": 94, "quantizedmatmulwithbiasanddequant": 94, "fusematmulrequantizetransform": 94, "fusematmulrequantizedequantizenewapitransform": 94, "fusematmulrequantizenewapitransform": 94, "newapi": 94, "meta": [96, 517, 559, 573], "metainfochangingmemopoptim": 96, "metaop": 96, "With": [96, 379, 478, 482, 484, 501, 519, 527, 532, 536, 540, 546, 556, 558, 559, 566, 567, 570, 573], "better": [96, 226, 227, 230, 231, 273, 274, 322, 369, 402, 461, 506, 518, 520, 558, 559, 561, 564, 566, 567, 570], "perform": [96, 140, 149, 153, 177, 215, 226, 227, 242, 254, 255, 260, 285, 297, 306, 330, 335, 343, 350, 368, 379, 402, 407, 411, 444, 477, 478, 479, 482, 483, 499, 502, 503, 504, 506, 508, 509, 514, 515, 518, 519, 520, 521, 522, 524, 528, 530, 533, 539, 545, 556, 557, 558, 559, 560, 561, 562, 563, 564, 567, 568, 570, 572, 573], "hostconst": 97, "posthostconstconvert": 97, "just": [97, 232, 257, 259, 262, 264, 265, 267, 275, 300, 379, 479, 519, 529, 533, 539, 547, 557, 561, 567, 569, 570], "postcseoptim": 98, "duplic": [98, 108, 347, 406], "quantizev2": 98, "decreas": [98, 544, 558], "size": [98, 149, 171, 202, 203, 234, 235, 241, 244, 250, 255, 259, 277, 278, 284, 287, 293, 297, 300, 338, 377, 379, 442, 472, 476, 483, 501, 502, 507, 510, 519, 539, 540, 556, 558, 561, 562, 564, 567, 569, 572, 573], "rnn": 99, "quantizedrnnconvert": 99, "calibration_data": [99, 107], "rnn_detail": 99, "scalepropagationtransform": 100, "direct": [100, 204, 338, 558], "export": [101, 227, 307, 311, 360, 364, 481, 512, 525, 540, 542, 568, 571], "onnxgraph": 102, "output_shap": 102, "extra_opset": 102, "output_nam": [102, 142, 227, 304, 305, 509], "is_subgraph": 102, "graph_nam": 102, "manipul": [102, 103], "onnxnod": 103, "skip_convers": 103, "schema": [104, 171, 442], "onnxopschema": 104, "domain": [104, 105, 226, 227, 558, 570], "since_vers": 104, "get_schema": 104, "max_inclusive_opset_vers": 104, "within": [104, 178, 206, 207, 212, 213, 221, 306, 311, 343, 364, 377, 396, 401, 476, 478, 484, 500, 520, 532, 536, 539, 547, 558, 559, 567, 570], "get_max_supported_opset_vers": 104, "packag": [104, 482, 510, 515, 539, 540, 559, 565, 570], "set_nam": 105, "find_opset": 105, "assert_error": 105, "bool_val": 105, "error_msg": 105, "messag": [105, 146, 477, 547, 548, 552, 553, 554, 570], "map_numpy_to_onnx_dtyp": 105, "np_dtype": 105, "map_onnx_to_numpy_typ": 105, "onnx_typ": 105, "add_port_to_nam": 105, "nr": 105, "get_tensorflow_node_attr": 105, "pars": [105, 148, 170, 242, 243, 255, 259, 285, 286, 297, 300, 385, 386, 390, 433, 483, 484, 569], "get_tensorflow_tensor_shap": 105, "get_tensorflow_node_shape_attr": 105, "attr": [105, 148, 198], "map_tensorflow_dtyp": 105, "get_tensorflow_tensor_data": 105, "convert_tensorflow_tensor_to_onnx": 105, "read_tensorflow_node_attr": 105, "read": [105, 148, 162, 247, 259, 290, 300, 339, 502, 563, 566], "infer_onnx_shape_dtyp": 105, "opset_vers": [105, 142, 227, 304, 305, 509], "input_shap": [105, 246, 289, 502], "input_dtyp": 105, "sometim": [105, 478, 504, 561], "make_onnx_shap": 105, "seqtyp": 105, "tensor_dtyp": 105, "around": 105, "signifi": 105, "make_onnx_inputs_output": 105, "elem_typ": 105, "text": [105, 149, 153, 214, 258, 259, 299, 300, 308, 313, 341, 361, 366, 509, 516, 528, 550, 553, 554, 558, 559, 564, 567, 569, 573], "datatyp": [105, 170, 563, 570, 573], "save_protobuf": 105, "path": [105, 140, 148, 150, 163, 170, 198, 214, 218, 223, 242, 243, 244, 259, 285, 286, 287, 300, 301, 304, 305, 306, 317, 318, 319, 321, 330, 335, 339, 341, 343, 344, 357, 369, 377, 401, 402, 418, 467, 469, 472, 478, 479, 482, 502, 504, 507, 513, 518, 519, 520, 521, 525, 528, 539, 542, 544, 547, 552, 553, 554, 557, 564, 569, 572], "as_text": 105, "save": [105, 148, 161, 162, 195, 218, 226, 227, 244, 287, 304, 305, 344, 377, 402, 461, 462, 467, 472, 478, 482, 513, 519, 520, 521, 523, 527, 532, 536, 542, 547, 552, 553, 554, 557, 561, 562, 564, 567], "protobuf": [105, 377, 542], "is_onnx_domain": 105, "is_list_or_tupl": 105, "are_shapes_equ": 105, "src": [105, 540], "dest": 105, "equal": [105, 143, 148, 176, 421, 438, 472, 558, 564], "get_subgraphs_from_onnx": 105, "model_proto": 105, "over": [105, 162, 244, 287, 315, 368, 483, 508, 512, 514, 518, 530, 539, 545, 549, 558, 560, 567, 570], "df": 105, "initialize_name_count": 105, "avoid": [105, 162, 170, 171, 242, 285, 478, 568], "conflict": [105, 510], "counter": 105, "make_nam": 105, "get_index_from_strided_slice_of_shap": 105, "outputs_to_valu": 105, "stride": [105, 259, 300, 569], "slice": 105, "compute_const_folding_using_tf": 105, "g": [105, 149, 153, 162, 200, 226, 227, 444, 477, 505, 508, 512, 522, 527, 558, 564, 565, 567, 570], "const_node_valu": 105, "graph_output": 105, "constant": [105, 305, 307, 347, 349, 355, 360, 406, 410, 416, 465, 501, 511, 542, 569], "tf": [105, 116, 141, 148, 198, 218, 241, 242, 243, 244, 259, 284, 285, 286, 287, 300, 375, 377, 507, 515, 521, 559, 563, 569], "generategraphwithqdqpattern": 107, "op_wise_config": [107, 131, 136, 483], "quantized_nod": 107, "llm_weight_minmax": 107, "dq": [107, 109, 131, 567], "pair": [107, 226, 227, 483, 501, 519, 520, 565], "befor": [107, 109, 150, 156, 175, 190, 200, 205, 207, 212, 214, 216, 226, 227, 242, 285, 338, 340, 342, 440, 477, 484, 501, 502, 505, 506, 507, 510, 511, 515, 519, 534, 537, 543, 544, 561, 564, 566, 568, 570], "merg": [108, 234, 277, 357, 418, 534, 537, 568, 570], "mergeduplicatedqdqoptim": 108, "y": [109, 226, 227, 259, 300, 347, 406, 504, 510, 525, 567, 569], "shareqdqforitexypatternoptim": 109, "break": [109, 507, 519], "graphanalyz": 110, "extend_engin": 110, "analyz": [110, 198, 377, 566, 567, 568], "under": [110, 150, 226, 227, 244, 287, 438, 444, 460, 467, 471, 477, 479, 481, 502, 516, 518, 519, 522, 527, 528, 539, 547, 557, 558, 559, 562, 564, 568, 570], "singleton": [110, 472], "specifi": [110, 149, 162, 170, 177, 218, 226, 227, 230, 231, 259, 260, 273, 274, 300, 306, 311, 315, 317, 318, 321, 330, 335, 343, 344, 364, 368, 369, 402, 421, 461, 471, 472, 483, 484, 507, 511, 518, 519, 527, 541, 547, 551, 552, 553, 554, 556, 558, 560, 564, 569, 570, 572], "graphrewriterhelp": 110, "encapsul": [110, 230, 231, 273, 274, 369, 402, 461, 521], "quantize_lay": [111, 112, 114], "fake_quant": [111, 112, 114], "quantize_config": [111, 112, 114, 483], "quantize_help": [111, 112, 114], "quantize_wrapp": [111, 112, 114], "fuse_qdq_bn": [111, 112, 130], "fuse_qdq_concatv2": [111, 112, 130], "fuse_qdq_conv": [111, 112, 130], "fuse_qdq_deconv": [111, 112, 130], "fuse_qdq_in": [111, 112, 130], "fuse_qdq_matmul": [111, 112, 130], "fuse_qdq_pool": [111, 112, 130], "optimize_qdq": [111, 112, 130], "optimize_lay": [112, 114, 117], "quantize_layer_add": [112, 114, 117], "quantize_layer_bas": [112, 114, 117], "quantize_layer_bn": [112, 114, 117], "fakequantizebas": 113, "abc": [113, 313, 366, 482, 568, 570], "fakequant": 113, "per_channel": [113, 483, 484, 511, 561, 572], "8": [113, 149, 162, 171, 226, 227, 258, 299, 442, 450, 478, 483, 500, 511, 515, 546, 547, 558, 559, 564, 567, 570, 573], "channel_axi": [113, 173, 176], "symmetr": [113, 149, 150, 467, 484, 561, 564, 569, 570], "narrow_rang": 113, "quantizeconfig": [115, 116], "custom": [115, 149, 160, 170, 171, 177, 227, 344, 368, 379, 471, 499, 505, 506, 522, 545, 546, 547, 551, 553, 554, 558, 559, 564, 566], "There": [115, 344, 346, 403, 405, 504, 505, 511, 514, 519, 522, 544, 546, 547, 564, 567, 570, 572], "instanc": [115, 116, 177, 194, 226, 227, 230, 231, 260, 273, 274, 312, 313, 315, 318, 321, 324, 325, 327, 328, 329, 347, 359, 365, 366, 368, 369, 402, 406, 420, 435, 444, 461, 469, 472, 476, 477, 478, 482, 499, 519, 524, 530, 564, 570, 572, 573], "global": [115, 200, 226, 227, 324, 325, 327, 328, 329, 338, 420, 433, 472, 478, 519, 558, 560, 570], "class": [116, 152, 160, 170, 195, 201, 208, 322, 369, 402, 478, 479, 483, 501, 502, 505, 518, 519, 530, 556, 557, 561, 565, 568, 570, 572], "init_quantize_config": 116, "quantize_recip": 116, "begin": [116, 153, 206, 207, 212, 340, 501, 505, 506, 519, 558, 570], "process": [116, 140, 149, 157, 177, 179, 200, 205, 206, 207, 214, 216, 218, 226, 227, 230, 231, 242, 243, 244, 255, 259, 260, 273, 274, 285, 286, 287, 297, 300, 338, 340, 342, 346, 347, 369, 402, 403, 405, 406, 444, 461, 471, 472, 479, 482, 483, 484, 500, 501, 502, 505, 506, 507, 509, 519, 523, 544, 546, 547, 549, 557, 558, 561, 562, 564, 567, 568, 569, 572], "model_nam": [116, 226, 227], "special": [116, 162, 198, 379, 478, 501, 518, 519, 556, 558, 564, 571], "decid": [116, 179, 226, 227, 309, 340, 362, 482, 483, 519, 561, 565, 570], "qat_clone_funct": 116, "leav": [116, 533], "quantizewrapp": [116, 122], "wrapped_lay": [116, 194], "config_quantizable_lay": 118, "quantizelayeradd": 119, "quantizelay": 120, "quantizelayerbas": 120, "quantizelayerbatchnorm": 121, "quantizewrapperbas": 122, "fusedbatchnormv3": [123, 133], "fusenodestartwithfusedbatchnormv3": [123, 133], "_quantizedfusedbatchnorm": 123, "concatv2": [124, 134, 147, 511], "fusenodestartwithconcatv2": [124, 134], "quantizedconcatv2": [124, 134], "fusenodestartwithconv2d": [125, 135], "conv2dbackpropinput": 126, "conv3dbackpropinputv2": 126, "fusenodestartwithdeconv2d": 126, "fusedinstancenorm": 127, "fusenodestartwithfusedinstancenorm": 127, "batchmatmul": 128, "batchmatmulv2": 128, "fusenodestartwithmatmul": [128, 137], "avgpool": [129, 138, 511], "fusenodestartwithpool": [129, 138], "optimizeqdqgraph": 131, "input_graph": [131, 136, 143, 397, 401, 482], "op_wise_sequ": [131, 136], "quantizegraph": 132, "quantizegraphbas": 132, "quantizenodebas": 132, "quantizegraphforintel": 136, "common": [139, 160, 162, 190, 227, 257, 307, 317, 321, 322, 323, 360, 435, 437, 449, 450, 457, 464, 476, 502, 506, 507, 509, 513, 515, 519, 561, 567], "herlper": 139, "quantizegraphhelp": 139, "sever": [139, 216, 259, 300, 342, 344, 479, 504, 505, 506, 514, 519, 520, 532, 536, 547, 558, 560, 562, 567, 569, 570, 572], "staticmethod": 139, "function": [139, 140, 160, 206, 207, 212, 226, 227, 230, 231, 243, 273, 274, 286, 318, 321, 330, 335, 477, 478, 479, 482, 483, 484, 499, 501, 505, 506, 509, 513, 514, 515, 517, 518, 519, 520, 530, 540, 546, 547, 558, 561, 564, 565, 566, 567, 568, 570, 571], "smoothquantcalibr": 140, "dataset": [140, 141, 149, 170, 214, 230, 231, 232, 234, 235, 239, 240, 241, 253, 262, 273, 274, 275, 277, 278, 282, 283, 284, 296, 307, 311, 312, 313, 315, 344, 360, 364, 365, 366, 368, 369, 402, 461, 464, 479, 481, 482, 483, 501, 507, 512, 518, 519, 527, 541, 542, 552, 558, 561, 564, 565, 567, 570, 572, 573], "outlier": [140, 483, 500, 504, 544, 564, 567], "smoothquantcalibrationllm": 140, "model_path": [140, 148, 171, 504, 552], "temp_path": 140, "weight_name_map": 140, "llm": [140, 141, 149, 156, 213, 440, 481, 558, 559, 562, 564, 567], "eval_func": [140, 230, 231, 273, 274, 344, 347, 350, 351, 353, 369, 402, 403, 406, 407, 411, 412, 414, 421, 461, 478, 501, 502, 504, 505, 506, 507, 519, 542, 561, 562, 563, 564, 570, 572], "temporari": [140, 170, 472, 476], "store": [140, 191, 193, 195, 198, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 217, 226, 227, 244, 287, 333, 340, 513], "median": 140, "autotrack": [140, 148], "smoothquantscal": 141, "alpha": [141, 161, 165, 175, 193, 215, 456, 561, 570], "scales_per_op": 141, "individu": [141, 200, 338, 396, 401, 476, 547, 558, 567], "smoothquantscalerllm": 141, "tensorflowqdqtoonnxqdqconvert": 142, "shape_overrid": 142, "inputs_as_nchw": [142, 304], "default_opset_vers": 142, "bia": [143, 226, 227, 564, 568], "correct": [143, 176, 218, 226, 227, 311, 312, 313, 315, 339, 364, 365, 366, 368, 476, 522], "biascorrect": 143, "fp32_graph": 143, "weight_empir": 143, "Will": [143, 505, 514], "our": [143, 170, 226, 227, 479, 481, 509, 519, 540, 541, 544, 566, 571], "task": [143, 242, 249, 285, 292, 315, 368, 502, 505, 506, 509, 514, 518, 519, 542, 546, 549, 558, 562, 564, 567, 573], "close": [143, 176, 500, 548], "w_int8": [143, 176], "u": [143, 176, 522, 541, 546], "w_fp32": [143, 176], "varianc": [143, 176, 194, 504], "differ": [143, 153, 172, 176, 178, 184, 190, 209, 226, 227, 235, 244, 259, 261, 278, 287, 300, 306, 315, 321, 323, 332, 343, 368, 379, 466, 476, 478, 479, 483, 501, 502, 504, 505, 507, 508, 513, 514, 518, 519, 521, 532, 536, 541, 544, 547, 556, 558, 561, 564, 567, 568, 569, 570], "wise": [143, 159, 161, 163, 171, 176, 226, 227, 347, 350, 406, 407, 411, 433, 442, 481, 483, 514, 544, 558, 564, 567, 568, 570, 571, 572], "minim": [143, 153, 176, 347, 406, 483, 484, 500, 505, 508, 518, 519, 532, 536, 558, 561, 570], "scale_c": [143, 176], "shift": [143, 176, 255, 297, 540, 569], "notic": [143, 176, 260, 516, 520, 542, 565], "first": [143, 149, 162, 170, 176, 178, 199, 224, 226, 227, 242, 285, 311, 357, 364, 407, 418, 438, 472, 478, 479, 482, 483, 484, 502, 504, 515, 520, 524, 533, 534, 537, 540, 542, 543, 544, 560, 561, 563, 564, 566, 567, 568, 570, 572], "empir": [143, 176], "solut": [143, 176, 481, 482, 483, 510, 524, 528, 533, 559, 564, 565, 567, 570, 571], "don": [143, 176, 200, 226, 227, 478, 545, 558, 570], "min": [143, 149, 171, 176, 191, 227, 442, 472, 504, 542, 544, 558, 561, 564, 567, 569, 570], "graphtransform": 144, "graphtransformbas": 144, "input_pb": [144, 146, 147], "log": [146, 177, 179, 181, 198, 385, 386, 390, 468, 478, 530, 552, 553, 554, 566, 568, 570], "insertlog": 146, "node_name_list": 146, "show_nam": 146, "show_op": 146, "first_n": 146, "summar": [146, 505], "1024": [146, 244, 287, 525], "dump_fp32": 146, "rerang": 147, "rerangequantizedconcat": 147, "rerange_quant": 147, "version1_lt_version2": [148, 472], "version1": [148, 438, 472], "version2": [148, 438, 472], "version1_gt_version2": [148, 472], "greater": [148, 438, 472, 552, 558, 570], "version1_eq_version2": [148, 472], "version1_gte_version2": [148, 438, 472], "version1_lte_version2": [148, 472], "disable_random": 148, "seed": [148, 149, 190, 226, 227, 323, 472, 519, 572], "disabl": [148, 226, 227, 476, 539, 544, 563, 564, 567], "read_graph": 148, "in_graph": 148, "in_graph_is_binari": 148, "write_graph": 148, "out_graph_def": 148, "out_graph_fil": 148, "write": [148, 251, 294, 472, 507, 513, 519, 522, 568], "is_ckpt_format": 148, "ckpt": [148, 369, 377, 402, 573], "folder": [148, 244, 249, 287, 292, 369, 402, 471, 502, 527, 532, 536, 545, 552, 553, 554, 564, 568], "is_saved_model_format": 148, "saved_model": [148, 317, 562], "get_estimator_graph": 148, "estim": [148, 149, 315, 368, 377, 570], "input_fn": [148, 377], "get_tensor_by_nam": 148, "try_cnt": 148, "import": [148, 153, 177, 191, 226, 227, 317, 369, 379, 402, 421, 461, 472, 478, 479, 481, 484, 499, 501, 502, 504, 505, 506, 507, 509, 512, 518, 519, 520, 521, 522, 526, 528, 541, 542, 550, 556, 557, 558, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571], "scope": [148, 477, 483, 519], "onc": [148, 162, 186, 216, 266, 342, 346, 403, 405, 483, 484, 501, 539, 545, 558, 559, 570, 573], "both": [148, 150, 227, 476, 479, 482, 506, 519, 523, 542, 544, 546, 558, 560, 561, 564, 567, 570], "compat": [148, 377, 477, 507, 521, 534, 537, 539, 558, 565], "v1": [148, 254, 255, 297, 312, 313, 315, 365, 366, 368, 377, 507, 509, 510, 518, 521, 543, 558, 565, 566, 567, 573], "suffix": 148, "time": [148, 162, 179, 194, 226, 227, 259, 300, 315, 347, 368, 379, 406, 438, 472, 483, 501, 504, 507, 510, 519, 527, 529, 532, 536, 539, 540, 545, 548, 552, 553, 556, 558, 559, 561, 564, 566, 567, 568, 569, 570], "got": [148, 483, 510, 568], "iterator_sess_run": 148, "sess": [148, 377], "iter_op": 148, "feed_dict": [148, 241, 284], "output_tensor": [148, 377], "measur": [148, 260, 369, 466, 479, 482, 499, 504, 505, 518, 519, 564, 568, 570, 573], "integr": [148, 184, 261, 482, 519, 540, 541, 546, 564], "makeiter": 148, "feed": [148, 241, 284, 505, 558], "end": [148, 153, 205, 206, 207, 212, 226, 227, 242, 258, 259, 285, 299, 300, 340, 346, 403, 405, 482, 483, 484, 505, 506, 511, 515, 519, 533, 549, 556, 558, 568, 569, 570], "predict": [148, 259, 264, 300, 308, 312, 313, 315, 361, 365, 366, 368, 402, 479, 505, 518, 530, 564, 567, 568, 569], "pred": [148, 315, 368, 518], "collate_tf_pr": 148, "collat": [148, 170], "get_input_output_node_nam": 148, "fix_ref_type_of_graph_def": 148, "fix": [148, 210, 212, 242, 285, 340, 501, 502, 526, 558, 561, 564, 570], "strip_unused_lib": 148, "offici": [148, 308, 312, 313, 361, 365, 366, 476, 567], "r1": 148, "15": [148, 511, 515, 553], "branch": [148, 477], "get_graph_def": 148, "auto_input_output": 148, "get_model_input_shap": 148, "get_tensor_val_from_graph_nod": 148, "graph_node_name_map": 148, "kei": [148, 149, 157, 162, 163, 167, 198, 209, 218, 224, 226, 227, 322, 339, 377, 421, 438, 462, 464, 472, 481, 483, 541, 542, 548, 559, 564, 568, 570], "val": [148, 218, 244, 247, 287, 290, 339, 504, 519, 544], "tensor_v": 148, "int8_node_name_revers": 148, "revers": [148, 542], "tf_diagnosis_help": 148, "fp32_model": [148, 157, 170, 305, 472, 482, 562], "quan_model": 148, "save_path": [148, 304, 305, 482, 521], "diagnosi": [148, 226, 227, 519, 542, 543, 544, 559, 565, 571], "generate_feed_dict": 148, "input_tensor": [148, 194, 377], "get_weight_from_input_tensor": 148, "input_tensor_nam": [148, 377], "associ": [148, 162, 311, 364], "search": [148, 156, 171, 190, 191, 198, 212, 223, 227, 230, 231, 273, 274, 306, 308, 318, 321, 322, 323, 343, 347, 361, 406, 440, 442, 472, 481, 514, 518, 522, 523, 533, 558, 559, 564, 567, 568, 570, 571], "look": [148, 209, 482, 484, 511, 518, 541, 542, 544, 567, 572], "sq_weight_tensor": 148, "sq_weights_nod": 148, "two": [148, 157, 162, 177, 199, 204, 211, 216, 244, 249, 260, 287, 292, 311, 338, 342, 344, 351, 364, 412, 472, 477, 478, 479, 501, 502, 505, 507, 509, 511, 519, 520, 546, 547, 549, 558, 561, 563, 564, 566, 567, 570, 572], "apply_inlin": 148, "func": [148, 170, 472, 561, 572], "inlin": [148, 522, 527, 530], "definit": [148, 152, 165, 235, 240, 278, 283, 456], "concret": [148, 570], "new_graph_def": 148, "construct_function_from_graph_def": 148, "frozen_func": 148, "rebuild": [148, 523, 532, 536], "reconstruct": [148, 559], "new_func": 148, "parse_saved_model": 148, "output_tensor_nam": [148, 377], "_saved_model": 148, "load": [148, 160, 162, 163, 242, 258, 259, 285, 299, 300, 369, 377, 402, 471, 472, 483, 501, 532, 536, 540, 542, 560, 561, 562, 567], "reconstruct_saved_model": 148, "trackabl": 148, "destin": [148, 303, 317], "quant_weight_asym": 149, "v": [149, 153, 530, 539, 558, 570, 572], "min_scal": 149, "max_scal": 149, "asymmetr": [149, 484, 561, 564, 570], "e": [149, 162, 200, 226, 227, 444, 476, 477, 505, 508, 512, 522, 527, 528, 532, 536, 558, 564, 567, 570], "perturb": 149, "minimum": [149, 200, 226, 227, 484, 500, 504, 519, 530, 558, 567, 570], "quant_weight_sym": 149, "quant_weight_actor": 149, "quant_weight": [149, 171, 442], "hand": [149, 479], "issu": [149, 476, 477, 480, 481, 515, 542, 544, 561, 568], "quant_weight_w_scal": [149, 171, 442], "round_st": 149, "torch": [149, 150, 152, 153, 155, 156, 157, 158, 159, 162, 163, 165, 166, 167, 168, 170, 171, 175, 195, 198, 199, 201, 209, 223, 226, 227, 305, 369, 402, 438, 467, 471, 478, 481, 484, 485, 505, 507, 509, 519, 520, 521, 522, 527, 530, 542, 561, 564, 567, 568], "straight": 149, "through": [149, 157, 230, 231, 273, 274, 368, 369, 402, 481, 499, 511, 513, 514, 518, 525, 546, 556, 557, 558, 560, 561, 564], "omniqu": 149, "saveinput": 149, "seqlen": 149, "256": [149, 249, 255, 292, 297, 450, 502, 507, 519, 569], "block_nam": 149, "cach": [149, 242, 285, 444, 510, 561, 564], "get_modul": [149, 163, 167], "nn": [149, 152, 156, 163, 165, 167, 170, 171, 198, 199, 209, 221, 226, 227, 305, 369, 402, 438, 440, 442, 443, 444, 449, 456, 457, 460, 467, 471, 478, 505, 519, 521, 564, 567, 568], "set_modul": [149, 167, 170, 460], "new_modul": [149, 163, 167, 170, 460], "get_scale_shap": 149, "wrapper_block": 149, "enable_minmax_tun": 149, "conv1d": [149, 156, 221, 440, 484], "indic": [149, 162, 178, 183, 194, 226, 227, 235, 240, 242, 278, 283, 285, 301, 311, 322, 364, 478, 501, 510, 542, 547, 568], "unwrapper_block": 149, "unwrap": 149, "wrapperlinear": 149, "wrappertransformerconv1d": 149, "sampling_input": 149, "input_id": [149, 242, 259, 285, 300, 519], "input_oth": 149, "length": [149, 209, 226, 227, 242, 259, 285, 300, 311, 364, 481, 502, 518, 559, 561, 564, 569], "id": [149, 177, 258, 260, 299, 308, 310, 311, 312, 313, 361, 363, 364, 365, 366, 518, 547, 548, 552, 553, 554, 566, 570], "current_input_id": 149, "current_input_oth": 149, "move_input_to_devic": 149, "check_is_cpu": 149, "otherwis": [149, 162, 244, 259, 287, 300, 472, 476, 483, 502, 534, 537, 560, 564, 569], "block_forward": 149, "amp_dtyp": 149, "automat": [149, 196, 198, 199, 226, 227, 244, 247, 254, 255, 287, 290, 297, 306, 316, 343, 478, 481, 499, 502, 514, 519, 520, 522, 524, 527, 528, 530, 532, 533, 534, 536, 537, 539, 546, 549, 557, 558, 561, 567, 569, 570], "mix": [149, 155, 164, 226, 227, 345, 357, 369, 404, 418, 444, 481, 482, 489, 514, 522, 528, 529, 530, 571], "precis": [149, 155, 164, 226, 227, 230, 231, 273, 274, 306, 313, 315, 316, 343, 345, 357, 366, 368, 369, 379, 404, 407, 418, 444, 472, 481, 482, 483, 489, 499, 500, 506, 507, 511, 514, 522, 528, 529, 530, 559, 560, 561, 564, 567, 570, 571], "collect_round_v": 149, "collect_minmax_scal": 149, "get_batch_dim": 149, "posit": [149, 194, 259, 300, 457, 476, 518, 522, 547, 552, 553, 554], "dim": [149, 259, 300, 564, 567, 569], "wrappermultiblock": 149, "module_list": 149, "act": [149, 218, 240, 283, 476], "singl": [149, 193, 216, 226, 227, 235, 242, 259, 278, 285, 300, 311, 340, 342, 364, 368, 402, 478, 502, 504, 515, 545, 558, 562, 567], "get_block_nam": 149, "network": [149, 157, 193, 200, 201, 340, 409, 444, 479, 500, 505, 506, 509, 519, 541, 559, 561, 567, 570], "get_tokenizer_funct": 149, "token": [149, 242, 253, 256, 259, 285, 296, 298, 300, 307, 308, 309, 360, 361, 362, 467, 502, 518, 519, 541, 542, 564, 566, 567, 569, 570], "truncat": [149, 242, 259, 285, 300, 502, 569], "field": [149, 179, 226, 227, 244, 287, 311, 364, 478, 482, 484, 507, 519, 566, 570, 572], "get_dataload": 149, "data_nam": 149, "neelnanda": 149, "pile": 149, "10k": [149, 508, 512], "42": [149, 190, 227, 323, 573], "test": [149, 177, 226, 227, 259, 300, 477, 481, 504, 515, 547, 552, 573], "shuffl": [149, 232, 234, 241, 262, 275, 277, 284, 501, 519, 561], "enable_full_rang": [149, 150, 154, 171, 442, 450, 467, 562, 564], "cuda": [149, 162, 218, 444, 520, 522, 524, 558, 561], "lr_schedul": [149, 519, 558], "dataset_nam": [149, 543], "dataset_split": 149, "use_quant_input": 149, "lr": [149, 153, 226, 227, 505, 507, 519], "005": [149, 564], "minmax_lr": 149, "low_gpu_mem_usag": 149, "200": [149, 258, 299, 478, 548, 570], "512": 149, "sampler": [149, 179, 232, 234, 236, 241, 262, 275, 277, 279, 284, 296, 307, 356, 417, 501, 507], "rand": [149, 522, 567], "n_block": [149, 171, 564], "gradient_accumulate_step": 149, "not_use_ms": 149, "dynamic_max_gap": 149, "data_typ": [149, 154, 171, 359, 420, 442], "signround": 149, "advanc": [149, 157, 226, 227, 476, 481, 483, 489, 517, 558, 561, 572], "cheng": 149, "wenhua": 149, "et": [149, 153, 157, 500, 564, 567], "al": [149, 153, 157, 500, 564, 567], "via": [149, 306, 330, 335, 343, 476, 481, 507, 514, 519, 522, 539, 558, 559], "sign": [149, 194, 359, 420, 477, 481, 484, 500, 541, 559, 561, 564, 566], "gradient": [149, 153, 193, 324, 481, 514, 519, 558, 559, 573], "descent": [149, 153, 198, 481, 559], "arxiv": [149, 156, 193, 194, 212, 213, 220, 340, 440, 450, 481, 500, 558, 559, 564, 567], "preprint": [149, 500, 558, 564, 567], "2309": 149, "05516": 149, "2023": [149, 481, 554, 558, 564, 567, 573], "pytorch": [149, 184, 186, 187, 195, 198, 201, 204, 205, 208, 213, 214, 221, 226, 227, 241, 242, 244, 247, 251, 259, 261, 266, 268, 284, 285, 287, 290, 294, 300, 305, 306, 315, 316, 336, 338, 341, 343, 351, 360, 368, 369, 378, 402, 412, 465, 472, 477, 478, 479, 481, 482, 483, 484, 500, 501, 505, 506, 508, 511, 514, 515, 517, 519, 520, 521, 522, 524, 527, 528, 529, 530, 539, 541, 550, 553, 554, 558, 559, 560, 564, 565, 567, 570, 572], "empti": [149, 163, 179, 226, 227, 525, 562], "layer1": [149, 198, 226, 227, 519, 558, 561], "layer_nam": [149, 222, 227, 558], "rang": [149, 150, 171, 245, 246, 259, 288, 289, 300, 421, 442, 461, 467, 481, 482, 484, 500, 502, 504, 505, 506, 507, 519, 542, 544, 557, 558, 561, 564, 567, 569], "learn": [149, 153, 481, 482, 483, 501, 502, 509, 513, 514, 515, 519, 520, 522, 524, 527, 528, 530, 533, 534, 537, 539, 558, 559, 561, 567, 568, 570, 571], "rate": [149, 153, 519, 558, 561], "schedul": [149, 192, 195, 205, 206, 207, 212, 213, 215, 226, 227, 307, 336, 340, 360, 519, 546, 547, 549, 557], "futur": [149, 175, 230, 231, 262, 273, 274, 514, 517, 519, 530, 552, 553, 554, 571], "accumul": [149, 356, 417, 570], "step": [149, 153, 193, 204, 205, 206, 207, 211, 212, 216, 226, 227, 338, 340, 342, 461, 483, 484, 504, 505, 506, 507, 519, 534, 537, 539, 552, 553, 554, 557, 558, 560, 563, 564, 566, 567, 568, 570], "squar": [149, 315, 350, 368, 411, 504, 518, 544, 570], "gap": [149, 504, 521], "addit": [149, 170, 227, 461, 483, 484, 505, 533, 541, 547, 564, 565, 570], "keyword": [149, 162, 227], "argument": [149, 162, 227, 421, 457, 479, 504, 543, 544, 547, 550, 552, 553, 554, 564], "autooptround": 149, "adamw": [149, 186, 266], "autoadamround": 149, "export_compressed_model": [150, 467, 564], "compression_dtyp": [150, 467], "int32": [150, 171, 442, 467, 502, 564], "compression_dim": [150, 467], "scale_dtyp": [150, 467], "float32": [150, 245, 246, 259, 288, 289, 300, 311, 364, 467, 482, 499, 502, 519, 561, 564, 567, 569], "use_optimum_format": [150, 467], "weightonlylinear": [150, 564], "json": [150, 170, 243, 259, 286, 300, 471, 502, 521, 540, 547, 548, 552, 553, 554, 564, 569], "compress": [150, 156, 307, 330, 335, 360, 379, 440, 461, 467, 474, 481, 489, 505, 514, 519, 539, 541, 556, 557, 558, 559, 561, 567, 571, 573], "comoress": [150, 467], "select": [150, 171, 215, 218, 227, 242, 285, 442, 467, 478, 479, 500, 514, 515, 539, 558, 561, 564, 568, 570], "choos": [150, 171, 244, 287, 442, 467, 514, 527, 559, 565, 567, 570, 572], "popular": [150, 307, 360, 474, 481, 482, 483, 500, 505, 508, 509, 512, 517, 519, 558, 561, 564, 570, 571], "huggingfac": [150, 198, 209, 242, 285, 467, 502, 508, 512, 527, 528, 529, 530, 550, 551, 553, 554, 567, 573], "why": [150, 567, 568], "g_idx": 150, "instead": [150, 153, 223, 224, 227, 241, 284, 472, 525, 527, 530, 545, 558, 564], "record": [150, 157, 170, 184, 187, 242, 243, 244, 250, 261, 268, 285, 286, 287, 293, 472, 502, 544, 564, 566, 568, 570], "order": [150, 161, 170, 194, 308, 309, 344, 347, 350, 359, 361, 362, 406, 411, 420, 478, 504, 518, 542, 560, 564, 567, 568, 570], "packed_weight": 150, "qweight": [150, 564], "5": [150, 161, 175, 179, 184, 194, 226, 227, 246, 255, 261, 289, 297, 315, 368, 402, 482, 502, 509, 511, 515, 518, 519, 544, 549, 552, 553, 558, 560, 561, 564, 567, 569, 570, 572, 573], "alwai": [150, 264, 311, 364, 368, 402, 504, 518, 519, 544, 564], "even": [150, 562, 564, 567], "modul": [152, 158, 159, 195, 201, 208, 320, 326, 336, 337, 478, 501, 505, 514, 518, 519, 521, 558, 560, 563, 564, 568, 571], "sgd": [153, 186, 226, 227, 266, 505, 519, 560, 572], "param": [153, 170, 177, 186, 232, 260, 266, 275, 315, 347, 368, 406, 472, 482, 521, 570], "requir": [153, 170, 171, 226, 227, 233, 344, 377, 401, 444, 478, 482, 483, 499, 500, 501, 504, 506, 507, 511, 519, 520, 521, 523, 533, 539, 541, 546, 547, 550, 553, 554, 558, 561, 564, 565, 566, 567, 568, 570, 572], "momentum": [153, 193, 340, 514, 519, 558, 572], "weight_decai": [153, 191, 519, 572], "nesterov": [153, 519, 572], "maxim": [153, 519, 558, 570], "foreach": 153, "differenti": 153, "stochast": 153, "align": [153, 259, 300, 476, 564, 569], "rule": [153, 504, 522, 558], "110mm": 153, "4pt": 153, "textbf": 153, "gamma": 153, "theta_0": 153, "f": [153, 162, 195, 505, 507, 561, 564, 567], "theta": 153, "lambda": [153, 162, 562], "decai": 153, "hspace": 153, "13mm": 153, "mu": [153, 504], "tau": 153, "textit": 153, "ex": 153, "ldot": 153, "5mm": 153, "g_t": 153, "leftarrow": 153, "nabla_": 153, "f_t": 153, "theta_": 153, "neq": 153, "10mm": 153, "15mm": 153, "_t": 153, "_": [153, 230, 231, 273, 274, 402, 478, 479, 481, 482, 483, 500, 504, 505, 507, 509, 511, 519, 520, 521, 522, 528, 532, 534, 536, 537, 544, 547, 548, 556, 558, 561, 564, 565, 566, 567, 568, 570, 572], "g_": 153, "theta_t": 153, "bf": 153, "formula": [153, 558, 567], "On": [153, 561, 573], "deep": [153, 224, 438, 481, 482, 483, 501, 514, 515, 519, 520, 522, 524, 527, 528, 530, 533, 539, 559, 561, 570, 571, 573], "l2": [153, 227, 558], "penalti": [153, 308, 309, 361, 362, 518], "xdoctest": [153, 162], "skip": [153, 162, 568, 570], "9": [153, 193, 226, 227, 478, 515, 519, 558, 560, 567, 570, 572, 573], "zero_grad": [153, 507, 519, 558], "loss_fn": 153, "backward": [153, 444, 461, 505, 506, 507, 519, 557, 558, 561, 565], "subtli": 153, "sutskev": 153, "some": [153, 196, 198, 226, 227, 242, 285, 339, 483, 484, 502, 504, 509, 515, 518, 519, 541, 542, 543, 544, 547, 556, 558, 561, 563, 564, 567, 568, 570, 571, 573], "written": [153, 519], "v_": 153, "p_": 153, "denot": [153, 567], "veloc": 153, "respect": [153, 476, 511, 558, 567, 572], "contrast": [153, 200, 338, 569], "emploi": 153, "form": [153, 313, 366, 504, 505, 539], "analog": 153, "modifi": [153, 209, 244, 287, 401, 420, 478, 484, 507, 511, 543, 544, 558, 572], "d_p_list": 153, "momentum_buffer_list": 153, "has_sparse_grad": 153, "see": [153, 160, 194, 220, 259, 300, 308, 361, 444, 476, 477, 478, 480, 516, 519, 532, 533, 536, 539, 540, 544, 545, 564, 567, 568, 570], "actawareweightqu": 154, "example_input": [154, 164, 167, 169, 170, 171, 226, 227, 305, 471, 509], "algo": [154, 464], "bf16modulewrapp": 155, "bf16modul": 155, "mixed_precision_model": 155, "bf16_symbolic_trac": 155, "fx_sub_module_list": 155, "trace": [155, 157, 168, 170, 198, 226, 227, 305, 409, 478, 529, 570], "_description_": 155, "is_leaf": [156, 440], "judg": [156, 440], "trace_gptq_target_block": [156, 440], "module_typ": [156, 440], "modulelist": [156, 440], "sequenti": [156, 240, 283, 344, 346, 403, 405, 440, 570], "stack": [156, 440], "structur": [156, 199, 210, 211, 226, 227, 340, 358, 419, 440, 472, 514, 538, 540, 543, 552, 558, 559, 561, 568, 571, 573], "critic": [156, 209, 440, 476], "gptq_related_block": [156, 440], "embed": [156, 170, 440, 500, 558], "transformers_pr": [156, 440], "todo": [156, 242, 245, 285, 288, 311, 357, 364, 418, 440], "transformers_nam": [156, 440], "find_lay": [156, 221, 440], "find_layers_nam": [156, 440], "log_quantizable_layers_per_transform": [156, 440], "transformer_block": [156, 440], "maxq": [156, 440], "gptquantiz": [156, 440], "nsampl": [156, 171, 220, 440, 450, 564], "use_max_length": [156, 171, 440, 450], "pad_max_length": [156, 171, 440, 450], "layer_wis": [156, 171, 440, 450, 471, 562], "pretrain": [156, 440, 467, 522, 528], "url": [156, 244, 287, 440, 477, 516, 550, 551, 558], "org": [156, 193, 194, 212, 213, 220, 311, 340, 364, 440, 450, 478, 504, 515, 534, 537, 558], "2210": [156, 440, 450, 564], "17323": [156, 440, 450, 564], "node_collector": 157, "hook": [157, 183, 187, 209, 268, 269, 330, 335, 464, 505, 506, 519, 558, 567, 568], "hessiantrac": 157, "q_model": [157, 161, 227, 317, 402, 433, 437, 478, 481, 501, 502, 504, 507, 509, 512, 513, 518, 519, 521, 541, 542, 561, 562, 563, 564], "criterion": [157, 179, 183, 185, 186, 192, 193, 200, 205, 206, 207, 209, 212, 213, 217, 226, 227, 263, 266, 307, 360, 505, 506, 519, 558, 561, 567, 570, 572], "yao": 157, "zhewei": 157, "pyhessian": 157, "len": [157, 227, 259, 300, 502, 507, 569], "2020": 157, "ieee": [157, 520, 567], "intern": [157, 240, 283, 357, 418, 501, 502, 518, 558], "confer": [157, 558, 567], "big": [157, 504, 564], "dong": 157, "zhen": 157, "hawq": [157, 409, 570], "v2": [157, 409, 501, 507, 509, 510, 515, 528, 565, 567, 570, 571, 573], "system": [157, 162, 177, 260, 472, 499, 525, 558, 573], "33": [157, 573], "18518": 157, "18529": 157, "openvinotoolkit": 157, "nncf": 157, "develop": [157, 379, 477, 478, 515, 519, 520, 522, 528, 539, 545, 558, 559, 563, 566], "hessian_trac": 157, "compare_weight": 157, "float_dict": 157, "ani": [157, 162, 311, 313, 356, 364, 366, 396, 401, 417, 421, 444, 457, 469, 472, 476, 481, 484, 507, 522, 527, 540, 541, 545, 546, 558, 566, 570], "quantized_dict": 157, "compar": [157, 315, 368, 472, 506, 518, 542, 558, 561, 564, 566, 568, 570], "being": [157, 311, 364, 484, 547], "wt_compare_dict": 157, "float_model": 157, "state_dict": [157, 507, 564, 568], "qmodel": 157, "compute_error": 157, "state": [157, 199, 444, 484, 525, 558], "weight_dict": 157, "hawq_top": 157, "enable_act": 157, "portabl": 160, "serial": [160, 162], "copyreg": 160, "mechan": [160, 193, 558, 566, 571], "pickler": 160, "pickletool": 160, "comment": [160, 476, 483, 502, 518, 519, 564, 569], "unpickl": [160, 162], "misc": [160, 516], "format_vers": 160, "compatible_format": 160, "except": [160, 162, 421, 472, 545, 561, 562], "pickleerror": 160, "pickl": [160, 162], "picklingerror": 160, "unpicklingerror": 160, "problem": [160, 242, 285, 315, 368, 518, 520, 540], "secur": [160, 481, 541, 559, 574], "violat": 160, "also": [160, 199, 241, 244, 259, 284, 287, 300, 308, 361, 368, 379, 402, 444, 477, 479, 482, 483, 484, 501, 504, 508, 512, 514, 518, 519, 522, 527, 532, 533, 536, 539, 540, 541, 544, 545, 556, 558, 559, 561, 563, 564, 567, 570], "includ": [160, 184, 193, 198, 200, 215, 217, 226, 227, 242, 244, 251, 259, 261, 285, 287, 294, 300, 306, 316, 338, 343, 421, 444, 472, 476, 482, 483, 484, 501, 502, 504, 515, 516, 517, 518, 519, 522, 525, 528, 533, 545, 549, 552, 553, 554, 558, 561, 563, 564, 568, 570], "necessarili": 160, "limit": [160, 191, 347, 406, 472, 481, 504, 505, 517, 561, 564, 565, 568], "attributeerror": [160, 421], "eoferror": 160, "importerror": [160, 510], "indexerror": 160, "layerwisequ": 161, "pretrained_model_name_or_path": [161, 163], "op_cfg": 161, "output_dir": [161, 467, 519, 527, 528, 543, 544, 550, 553, 554], "memomeri": 161, "file_lik": 162, "map_loc": 162, "pickle_modul": [162, 195], "weights_onli": 162, "pickle_load_arg": 162, "facil": 162, "treat": [162, 501], "storag": [162, 481, 512, 518, 541, 544, 564, 567], "thei": [162, 260, 421, 476, 505, 511, 519, 527, 542, 545, 556], "deseri": 162, "were": [162, 315, 368, 525, 558], "fail": [162, 478, 501, 509, 548], "becaus": [162, 204, 209, 259, 300, 338, 478, 544, 561, 567, 569, 570], "doesn": [162, 259, 300, 482, 507, 519, 520, 540, 572], "certain": [162, 221, 566], "howev": [162, 545, 558, 564, 567], "altern": [162, 226, 227, 402], "callabl": [162, 226, 227, 313, 366, 433, 437, 443, 457, 461, 501], "locat": [162, 172, 218, 259, 300, 507, 525, 532, 536, 539, 547, 561, 565, 569, 572], "resid": 162, "tag": [162, 377, 567, 568], "wa": [162, 226, 227, 482, 519, 544, 545, 548, 559, 570], "builtin": [162, 507], "device_id": 162, "either": [162, 227, 311, 364, 523, 527, 547, 557, 560, 561], "final": [162, 198, 205, 218, 340, 483, 519, 525, 556, 558, 561, 565, 570], "alreadi": [162, 177, 244, 258, 260, 287, 299, 482, 502, 514, 534, 537, 541, 550, 570], "right": [162, 255, 297, 311, 364, 476, 477, 478, 539, 545, 567, 569], "fall": [162, 170], "back": [162, 170, 259, 265, 300, 504, 539, 545], "behavior": [162, 476, 482, 483, 484, 511, 521, 564, 568, 570, 572], "wasn": 162, "appear": [162, 476, 533, 539, 541], "ones": [162, 311, 364, 558], "put": [162, 244, 287, 502, 505], "user": [162, 177, 186, 198, 210, 218, 226, 227, 230, 231, 244, 247, 251, 259, 260, 266, 273, 274, 287, 290, 294, 300, 306, 330, 335, 341, 343, 344, 368, 369, 379, 402, 407, 420, 461, 472, 478, 479, 481, 482, 483, 484, 489, 499, 501, 505, 506, 509, 511, 514, 517, 518, 519, 520, 521, 522, 523, 524, 526, 527, 528, 530, 533, 539, 546, 547, 548, 549, 552, 553, 554, 556, 557, 558, 559, 561, 562, 563, 565, 567, 568, 569, 570, 574], "register_packag": 162, "readlin": 162, "tell": [162, 368, 402, 560], "seek": [162, 564], "o": [162, 421, 515, 524, 542], "pathlik": 162, "metadata": 162, "primit": 162, "unless": [162, 511], "implicitli": 162, "known": [162, 262, 347, 406, 519, 558, 561, 568, 570], "insecur": [162, 541], "possibl": [162, 260, 444, 504, 541, 557, 558, 562, 563, 570], "construct": [162, 242, 245, 246, 249, 257, 262, 264, 265, 267, 285, 288, 289, 292, 368, 373, 377, 420, 464, 476, 483, 484, 502, 507, 558, 570], "malici": 162, "arbitrari": [162, 519, 557], "code": [162, 198, 230, 231, 260, 273, 274, 317, 341, 344, 402, 461, 478, 481, 482, 483, 484, 502, 505, 506, 507, 513, 514, 516, 518, 522, 524, 526, 527, 528, 530, 533, 539, 543, 544, 546, 547, 548, 556, 557, 558, 559, 560, 561, 566, 567, 568, 569], "never": [162, 570], "could": [162, 167, 175, 200, 230, 231, 244, 273, 274, 287, 344, 369, 402, 461, 476, 478, 506, 519, 557, 558, 561, 564, 567, 571], "come": [162, 517, 570], "untrust": 162, "unsaf": 162, "tamper": 162, "trust": [162, 504, 541], "load_state_dict": 162, "ram": 162, "surg": 162, "checkpoint": [162, 377, 471, 521], "By": [162, 198, 226, 227, 308, 361, 483, 484, 518, 521, 532, 533, 536, 558, 559, 564, 570], "decod": [162, 254, 255, 297, 308, 361, 518, 569], "byte": 162, "utf": [162, 258, 299], "unicodedecodeerror": 162, "ascii": 162, "codec": 162, "0x": 162, "incorrect": 162, "extra": [162, 313, 366, 519], "encod": [162, 311, 364, 542, 569], "latin1": 162, "them": [162, 198, 242, 285, 478, 484, 501, 504, 509, 511, 513, 542, 545, 557, 558, 564, 570], "keep": [162, 209, 218, 339, 407, 478, 482, 538, 539, 565], "later": [162, 167, 175, 546, 547, 568], "byte_arrai": 162, "undefin": [162, 218, 339], "filepath": [162, 472], "pt": [162, 471, 515, 521, 543, 559, 561, 563, 564], "onto": 162, "loc": 162, "bytesio": 162, "open": [162, 263, 307, 360, 464, 474, 476, 481, 509, 510, 519, 534, 537, 540, 541, 545, 546, 547, 559], "rb": 162, "buffer": 162, "get_children": 163, "get_named_children": 163, "dowload_hf_model": 163, "repo_id": 163, "cache_dir": 163, "repo_typ": 163, "revis": 163, "download": [163, 244, 287, 502, 504, 515, 544, 550, 565], "hug": [163, 481, 546, 559], "face": [163, 476, 481, 489, 522, 526, 546, 548, 559, 565, 573], "hf": [163, 517, 567, 573], "hub": [163, 481, 508, 512, 530], "load_empty_model": [163, 562], "automodelforcausallm": 163, "get_super_module_by_nam": 163, "module_nam": [163, 193, 195, 205, 206, 207, 208, 210, 211, 212, 213, 215, 217, 340, 472], "father": [163, 198], "update_modul": 163, "load_layer_wise_quantized_model": 163, "load_tensor_from_shard": 163, "shard": 163, "load_tensor": 163, "ipex_mixed_precis": 164, "fakeaffinetensorquantfunct": [165, 456], "affin": [165, 456, 561], "teqlinearfakequ": [165, 456], "orig_lay": [165, 456], "mullinear": [165, 171, 456], "input_scal": [165, 456], "detector": 166, "transformerbasedmodelblockpatterndetector": 166, "pattern_lst": 166, "block_pattern": 166, "detect": [166, 170, 198, 226, 227, 311, 315, 364, 368, 373, 477, 478, 522, 529, 530, 558, 570], "ffn": [166, 209], "torchsmoothqu": [167, 567], "q_func": [167, 230, 231, 273, 274, 347, 350, 351, 353, 403, 406, 407, 411, 412, 414, 482, 483, 519, 570], "traced_model": [167, 168], "whose": [167, 175, 200, 339, 377, 513, 567, 570], "absorb": [167, 170, 171, 175, 564], "trace_and_fuse_sub_graph": 168, "is_qat": 168, "tequant": 169, "absorb_to_lay": [169, 170, 171], "extra_config": [169, 171], "trainabl": [169, 481, 559, 564], "move_input_devic": 170, "auto": [170, 178, 196, 198, 226, 227, 345, 360, 404, 410, 449, 472, 478, 500, 522, 525, 527, 529, 530, 558, 561, 564], "kind": [170, 519], "forward_wrapp": 170, "get_embedding_contigu": 170, "contigu": 170, "is_fused_modul": 170, "_propagate_qconfig_help": 170, "collate_torch_pr": 170, "collate_result": 170, "input2tupl": 170, "append_attr": 170, "fx_model": 170, "fx_white_list": 170, "append": [170, 344, 347, 406, 478, 506, 519, 557], "graphmodul": [170, 478, 563], "dir": [170, 242, 285, 467, 471, 502, 510, 513], "generate_activation_observ": 170, "smooth_quant_en": 170, "observ": [170, 484, 564, 566, 568, 570], "what": [170, 205, 240, 283, 368, 402, 461, 476, 559], "check_cfg_and_qconfig": 170, "op_infos_from_cfg": 170, "output_tensor_ids_op_nam": 170, "paser_cfg": 170, "ops_nam": 170, "get_quantizable_ops_from_cfg": 170, "input_tensor_ids_op_nam": 170, "update_sq_scal": 170, "ipex_config_path": 170, "smoothquant_scale_info": 170, "ipex_config": 170, "auto_copi": 170, "fetch_modul": [170, 460], "op_nam": [170, 223, 226, 227, 358, 419, 460, 472, 473, 483, 519, 558, 568], "simple_infer": 170, "get_example_input": 170, "example_inp": 170, "get_fallback_ord": 170, "confidence_batch": [170, 570], "fallback": [170, 227, 350, 351, 409, 411, 412, 509, 520, 542, 563, 570], "requantize_cfg": 170, "confid": 170, "ordered_op": 170, "get_mse_order_per_fp32": 170, "influenc": [170, 558], "last": [170, 193, 218, 226, 227, 501, 520, 522, 524, 529, 533, 561, 564, 567], "fallback_ord": 170, "get_mse_order_per_int8": 170, "get_torch_vers": 170, "match_datatype_pattern": 170, "calculate_quant_min_max": 170, "unsign": [170, 359, 420, 484, 564], "qmin": 170, "qmax": 170, "get_depth": 170, "depth": [170, 505, 563], "get_dict_at_depth": 170, "target_depth": 170, "nest": [170, 224, 438], "get_element_under_depth": 170, "ops_lst": 170, "get_op_type_by_nam": 170, "quantizable_op": 170, "collect_weight_info": 170, "fc": [170, 227, 558], "_type_": [170, 467], "get_module_input_output": 170, "module_hook_config": 170, "input_func": 170, "output_func": 170, "help": [170, 187, 268, 317, 517, 521, 522, 528, 539, 547, 552, 553, 554, 564, 570, 571], "module_name_list": 170, "fc1": [170, 171], "preprocess": [170, 226, 227, 242, 259, 285, 300, 420, 464, 507, 569], "usag": [170, 178, 179, 241, 284, 311, 317, 344, 364, 421, 438, 460, 483, 502, 507, 508, 522, 530, 541, 547, 552, 553, 554, 556, 560, 564, 569], "input_valu": 170, "output_valu": 170, "total_valu": 170, "get_absorb_lay": 170, "supported_lay": 170, "no_absorb_lay": 170, "allow": [170, 347, 406, 444, 505, 507, 518, 519, 520, 541, 546, 558, 560, 564, 567, 570, 572], "absorpt": 170, "eg": [170, 224, 244, 287, 438, 502, 560], "absorbed_1": 170, "xx": 170, "get_block_prefix": 170, "block_list": 170, "block_num": 170, "block_prefix": 170, "get_hidden_st": 170, "calib": [170, 483], "rest": [170, 546, 547, 552, 553, 554], "part": [170, 196, 205, 338, 340, 478, 515, 520, 534, 537, 547, 549, 558, 562, 567, 571], "total_block_kwarg": 170, "total_block_arg": 170, "quantize_4bit": [171, 442], "quantil": [171, 442, 570], "nf4": [171, 442, 481, 564], "return_int": [171, 442, 450], "fp4": [171, 442, 481, 564], "q_tensor": [171, 442], "qdq_weight_asym": [171, 442], "qdq_weight_sym": [171, 442], "full_rang": [171, 442], "amax": [171, 442], "qdq_weight_actor": [171, 442], "place": [171, 457, 506, 515, 552, 558, 568, 570], "search_clip": [171, 442], "best": [171, 183, 259, 300, 301, 306, 343, 350, 411, 442, 476, 479, 515, 522, 528, 539, 545, 556, 561, 564, 567, 569, 570], "num": [171, 442, 472], "best_clip_ratio": [171, 442], "group_dim": [171, 442, 450], "gptq_perm": [171, 442], "perm": [171, 259, 300, 442, 569], "absorb_lay": 171, "absorb_dict": 171, "absorbed_lay": 171, "fc3": 171, "oom": 171, "teq_quant": 171, "algorithm_registri": 172, "algorithm_typ": 172, "registr": [172, 244, 251, 259, 287, 294, 300, 333], "algorithmschedul": 172, "conf": [172, 177, 183, 227, 230, 231, 260, 273, 274, 317, 324, 325, 327, 328, 329, 330, 335, 347, 350, 351, 353, 357, 369, 379, 402, 403, 406, 407, 411, 412, 414, 418, 421, 461, 478, 479, 481, 484, 499, 505, 512, 513, 519, 520, 521, 541, 543, 544, 557, 561, 562, 563, 564, 566, 567, 570], "control": [172, 226, 227, 478, 519, 545, 558, 570], "phase": [172, 479, 519, 558, 561, 563, 570], "fastbiascorrect": [173, 176], "fast_bias_correct": [174, 226, 227, 360, 561], "weight_correct": [174, 226, 227, 360, 561], "weightcorrect": 176, "1e": [176, 567, 572], "05": [176, 227, 315, 368, 518, 567, 573], "evalu": [177, 179, 183, 200, 226, 230, 231, 242, 260, 273, 274, 285, 301, 308, 311, 312, 313, 315, 317, 361, 364, 365, 366, 368, 369, 379, 402, 461, 464, 479, 482, 483, 502, 505, 506, 513, 514, 517, 518, 519, 520, 522, 528, 530, 533, 539, 556, 558, 561, 566, 567, 568, 570, 572], "set_env_var": [177, 260], "env_var": [177, 260], "overwrite_exist": [177, 260], "env": [177, 260, 510, 552, 553, 554], "set_all_env_var": [177, 260], "physic": [177, 260, 476, 499, 547], "core": [177, 226, 227, 260, 477, 499, 516, 532, 536, 547, 573], "get_architectur": [177, 260], "architectur": [177, 260, 318, 321, 481, 499, 505, 519, 546, 558, 559, 564, 571], "get_threads_per_cor": [177, 260], "thread": [177, 226, 227, 260, 396, 401, 444, 501, 549], "get_thread": [177, 260], "get_physical_id": [177, 260], "socket": [177, 260, 472, 547, 549, 573], "get_core_id": [177, 260], "get_bounded_thread": [177, 260], "core_id": [177, 260], "bind": [177, 260], "run_inst": 177, "b_dataload": [177, 226, 227, 499, 519], "b_func": [177, 499], "benchmarkconfig": [177, 226, 227, 499, 504, 519], "goal": [177, 301, 306, 330, 335, 343, 369, 402, 483, 501, 557, 561, 570], "prefer": [177, 306, 343, 402, 558, 564], "space": [177, 190, 191, 206, 207, 212, 213, 226, 227, 230, 231, 273, 274, 306, 313, 318, 321, 322, 323, 343, 347, 350, 357, 366, 369, 402, 406, 411, 418, 476, 477, 479, 482, 483, 484, 558, 561, 567, 572], "etc": [177, 183, 258, 299, 301, 306, 313, 330, 335, 343, 366, 369, 402, 471, 481, 505, 514, 541, 545, 558, 566, 570], "generate_prefix": 177, "core_list": 177, "command": [177, 260, 461, 504, 507, 522, 524, 527, 532, 536, 540, 541, 543, 544, 545, 547], "numactl": [177, 510, 525, 533], "call_on": 177, "cmd": 177, "log_fil": [177, 395, 400], "window": [177, 499, 515, 539, 540], "config_inst": 177, "raw_cmd": 177, "multi": [177, 196, 198, 209, 311, 364, 368, 402, 479, 501, 502, 514, 519, 556, 558, 561, 570], "trigger": [177, 205, 340], "summary_benchmark": 177, "summari": [177, 461, 504, 534, 537, 568, 573], "profil": [177, 227, 360], "benchmark_with_raw_cmd": 177, "fit_with_raw_cmd": 177, "cores_per_inst": [177, 226, 227, 499, 519, 560], "num_of_inst": [177, 226, 227, 499, 519, 560], "fit": [177, 200, 226, 227, 347, 369, 402, 406, 421, 461, 478, 481, 499, 501, 502, 504, 507, 512, 513, 518, 519, 520, 521, 541, 542, 558, 561, 562, 563, 564], "pb": [177, 226, 227, 369, 377, 402, 481, 499, 507, 512, 519, 521, 541, 544, 552, 568, 573], "eval_dataload": [177, 226, 227, 230, 231, 273, 274, 344, 347, 350, 351, 353, 369, 402, 403, 406, 407, 411, 412, 414, 461, 499, 513, 518, 519, 541, 561, 562, 570], "register_config": 178, "framework_nam": 178, "algo_nam": 178, "prioriti": [178, 550], "examplealgorithm": 178, "examplealgorithmconfig": 178, "larger": [178, 483, 558, 564, 567], "higher": [178, 226, 227, 230, 231, 273, 274, 322, 369, 402, 461, 478, 504, 505, 509, 518, 542, 558, 561, 566], "tri": [178, 227, 570], "stage": [178, 346, 351, 403, 405, 412, 505, 558, 568, 570], "baseconfig": [178, 435, 437, 457], "white_list": [178, 435, 450], "op_name_or_module_typ": [178, 435, 450], "default_white_list": [178, 435, 450], "composableconfig": 178, "eval_acc": 179, "eval_perf": 179, "mold": 179, "user_eval_fns1": 179, "user_eval_fns2": 179, "eval_fn": [179, 449], "user_eval_fns3": 179, "user_eval_fns4": 179, "tuninglogg": 179, "unifi": [179, 306, 343, 482, 483, 484, 501, 513, 514, 518, 519, 521], "logger": [179, 180, 307, 336, 360, 462, 465, 472], "assist": [179, 565], "team": [179, 313, 366, 476, 563], "retriev": [179, 240, 283, 558], "tuningconfig": [179, 449], "quant_config": [179, 433, 437, 438, 457, 460], "timeout": [179, 226, 227, 519, 560, 570, 572], "max_trial": [179, 226, 227, 519, 570], "earli": [179, 226, 227, 519, 561, 570, 572], "stop": [179, 226, 227, 519, 570, 571, 572], "exit": [179, 226, 227, 346, 403, 405, 519, 547, 552, 553, 554, 572], "msg": [181, 468, 548, 552, 553], "debug": [181, 421, 468, 504, 532, 536, 540, 570, 571], "fatal": [181, 468], "warn": [181, 468], "alia": [181, 468, 472, 524, 529], "compon": [183, 301, 307, 344, 360, 478, 504, 507, 515, 516, 522, 539, 547, 557, 558], "quantizationawaretrainingcallback": 183, "pruningcallback": 183, "distillationcallback": 183, "basecallback": 183, "design": [183, 241, 264, 269, 284, 368, 407, 479, 481, 519, 527, 530, 558, 561, 571], "mainli": [183, 216, 269, 342, 481, 519, 558, 561], "prune": [183, 192, 193, 195, 196, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 226, 227, 269, 270, 307, 324, 325, 327, 328, 329, 333, 335, 336, 338, 339, 340, 342, 344, 360, 472, 481, 507, 508, 511, 512, 514, 557, 559, 571, 572], "distil": [183, 192, 226, 227, 261, 268, 269, 307, 360, 481, 508, 512, 514, 557, 571, 572], "In": [183, 202, 203, 204, 209, 210, 211, 215, 227, 241, 269, 284, 311, 338, 340, 364, 379, 444, 476, 478, 479, 481, 482, 483, 501, 502, 504, 505, 506, 507, 518, 519, 529, 532, 533, 536, 542, 543, 544, 545, 552, 553, 554, 556, 557, 558, 561, 563, 564, 566, 567, 568, 569, 570, 571], "adaptor": [183, 226, 227, 359, 420, 425, 433, 464, 481, 484, 514, 562, 563, 565, 567, 568, 571], "deriv": [183, 193, 202, 203, 204, 210, 211, 212, 213, 214, 215, 216, 217, 301, 338, 340, 342, 435, 450], "pipelin": [183, 301, 318, 319, 344, 477, 506, 519, 557], "knowledg": [183, 184, 226, 227, 261, 301, 506, 508, 512, 514, 519, 521, 572], "transfer": [183, 249, 292, 301, 502, 505, 506, 519, 567], "teacher": [183, 226, 227, 301, 505, 506, 519, 573], "student": [183, 187, 226, 227, 242, 268, 285, 301, 502, 505, 506, 573], "distillation_conf": [183, 223, 301], "_epoch_ran": [183, 301], "integ": [183, 204, 205, 226, 227, 301, 311, 315, 322, 338, 340, 364, 368, 421, 482, 484, 500, 561, 564, 567, 570], "much": [183, 193, 226, 227, 259, 300, 301, 505, 533, 567, 569], "epoch": [183, 206, 207, 212, 301, 340, 461, 501, 505, 506, 507, 519, 557, 558, 572], "ran": [183, 301], "eval_frequ": [183, 301], "frequenc": [183, 205, 226, 227, 301, 340, 519, 558, 572], "term": [183, 206, 207, 212, 213, 215, 301, 477, 500, 505, 516, 518, 556, 557, 570], "best_scor": [183, 301], "metric": [183, 226, 227, 230, 231, 263, 273, 274, 301, 306, 307, 322, 330, 335, 343, 344, 360, 369, 402, 461, 464, 479, 482, 483, 502, 504, 507, 519, 520, 541, 561, 566, 567, 568, 570, 571, 572, 573], "best_model": [183, 301, 471, 564], "found": [183, 301, 481, 505, 517, 520, 527, 544, 548, 567, 570, 573], "critet": [184, 261], "tensorflowcrossentropyloss": [184, 261], "pytorchcrossentropyloss": [184, 261], "tensorflowsparsecategoricalcrossentropi": 184, "tensorflowknowledgedistillationloss": [184, 261], "pytorchknowledgedistillationloss": [184, 261, 519], "pytorchintermediatelayersknowledgedistillationloss": [184, 261], "tensorflowcriterion": [184, 261], "pytorchcriterion": [184, 261], "criterion_registri": [184, 261], "criterion_typ": [184, 261], "registry_criterion": [184, 261], "param_dict": [184, 186, 261, 266], "crossentropyloss": [184, 226, 227, 505, 519], "sparsecategoricalcrossentropyloss": 184, "knowledgedistillationframework": [184, 261], "student_model": [184, 227, 261, 519], "teacher_model": [184, 226, 227, 261, 505, 506, 519], "knowledgedistillationloss": [184, 261, 519, 572], "temperatur": [184, 226, 227, 261, 519, 572], "loss_typ": [184, 190, 226, 227, 261, 519, 572], "ce": [184, 226, 227, 261, 519, 572], "loss_weight": [184, 226, 227, 261, 519, 572], "pytorchknowledgedistillationlosswrapp": [184, 261], "tensorflowknowledgedistillationlosswrapp": 184, "tensorflowknowledgedistillationlossextern": [184, 261], "intermediatelayersknowledgedistillationloss": [184, 261], "layer_map": [184, 227, 261, 505], "add_origin_loss": [184, 227, 261], "pytorchintermediatelayersknowledgedistillationlosswrapp": [184, 261], "selfknowledgedistillationloss": [184, 261], "selfknowledg": [184, 261], "pytorchselfknowledgedistillationloss": 184, "pytorchselfknowledgedistillationlosswrapp": 184, "multipl": [186, 196, 228, 229, 233, 234, 242, 243, 245, 246, 247, 248, 249, 253, 256, 259, 266, 271, 272, 276, 277, 279, 285, 286, 288, 289, 290, 291, 292, 296, 298, 300, 316, 369, 370, 371, 373, 379, 444, 499, 502, 509, 519, 546, 549, 557, 558, 566, 567, 570], "tensorflowoptim": [186, 266], "pytorchoptim": [186, 266], "optimizer_registri": [186, 266], "optimizer_typ": [186, 266], "cross": [186, 266, 315, 368, 513, 570], "tensorflowsgd": [186, 266], "tensorflowadamw": [186, 266], "tensorflow_addon": [186, 266], "tensorflowadam": 186, "adam": [186, 572], "pytorchsgd": [186, 266], "record_output": [187, 268], "output_process": [187, 268], "get_activ": [187, 268], "hyper": [188, 572], "sa_optim": [188, 192], "simul": [189, 484], "anneal": 189, "register_search": 190, "searcher": [190, 198, 227, 323], "registri": [190, 191, 193, 200, 205, 214, 215, 216, 217, 338, 340, 342, 479], "sure": [190, 200, 205, 214, 216, 338, 340, 342, 499, 541], "search_spac": [190, 223, 227, 318, 321, 322, 323], "gridsearch": [190, 323], "grid": [190, 227, 323, 479, 558], "whole": [190, 323, 484, 541, 561, 573], "exhaust": [190, 227, 307, 323, 349, 360, 410, 560], "randomsearch": [190, 323], "randomli": [190, 259, 300, 323, 347, 406, 479, 567, 569, 570], "bayesianoptimizationsearch": [190, 323], "bayesian": [190, 227, 307, 323, 349, 360, 410, 479, 558, 560], "xgbsearcher": 190, "higher_is_bett": [190, 226, 227, 368, 402, 570, 572], "reg": [190, 192, 195, 206, 207, 212, 213, 227], "min_train_sampl": [190, 227], "10": [190, 226, 227, 244, 287, 347, 406, 440, 450, 481, 499, 502, 509, 515, 519, 541, 542, 558, 560, 569, 570, 573], "xgboost": [190, 558], "searchspac": 191, "factori": [191, 375, 382, 384, 389, 392, 394, 399], "actual": [191, 315, 368, 507], "interv": [191, 211, 558], "continu": [191, 203, 311, 338, 364, 479, 517, 519, 540, 558, 571], "learning_r": [191, 226, 227, 519, 560, 572], "001": [191, 244, 287, 502, 507, 567, 572], "num_train_epoch": [191, 519, 558], "20": [191, 259, 300, 544, 547, 552, 553, 554, 558, 569, 572, 573], "register_searchspac": 191, "pruner": [191, 192, 307, 324, 325, 326, 327, 328, 330, 335, 336, 338, 341, 360, 519, 558, 572], "basesearchspac": 191, "discretesearchspac": 191, "continuoussearchspac": 191, "hpo": [192, 230, 273, 558], "model_slim": [192, 195, 209], "auto_slim": [192, 195, 197], "pattern_analyz": [192, 195, 197], "weight_slim": [192, 195, 197, 209], "mha": [192, 195, 201, 208, 558], "ninm": [192, 195, 201], "nxm": [192, 195, 201, 211, 226, 227, 334, 338, 558], "basic": [192, 195, 198, 200, 208, 226, 227, 258, 299, 307, 318, 338, 349, 353, 356, 360, 410, 414, 417, 461, 514, 515, 519, 541, 560, 566], "block_mask": [192, 193, 195, 208], "pattern_lock": [192, 195, 208, 226, 227, 307, 326, 360], "retrain_fre": [192, 193, 195, 208, 558], "wanda": [192, 195], "criteria": [192, 195, 226, 227, 306, 330, 335, 338, 340, 343, 478, 539, 567], "tf_criteria": [192, 195], "callback": [192, 330, 335, 461, 464, 478, 519, 557, 558, 561], "register_criterion": [193, 217], "get_criterion": 193, "pruningcriterion": [193, 217], "about": [193, 217, 472, 476, 501, 519, 544, 545, 558, 563, 570, 571, 573], "score": [193, 200, 205, 209, 217, 226, 227, 308, 309, 311, 312, 313, 315, 340, 361, 362, 364, 365, 366, 368, 409, 464, 478, 518, 542, 556, 558, 566, 570], "magnitudecriterion": [193, 217], "magnitud": [193, 217, 226, 227, 307, 315, 326, 360, 368, 514, 558], "criterion_class": [193, 217], "determin": [193, 200, 205, 217, 226, 227, 466, 476, 478, 500, 558, 561], "gradientcriterion": 193, "absolut": [193, 226, 227, 315, 368, 518, 519, 558, 561, 570], "snipcriterion": 193, "snip": [193, 226, 227, 340, 514, 558, 573], "product": [193, 481, 514, 520, 522, 523, 539, 545, 559, 561, 566, 570], "shot": [193, 212, 213, 216, 269, 340, 342, 479, 514, 519, 558, 559, 564], "connect": [193, 340, 539, 541, 548, 558, 566], "sensit": [193, 324, 340, 514, 558], "1810": [193, 340], "02340": [193, 340], "snipmomentumcriterion": 193, "snip_momentum": [193, 226, 227, 519, 558], "preserv": [193, 500, 558, 564], "beta": 193, "blockmaskcriterion": 193, "retrainfreecriterion": 193, "return_reorder_indic": 194, "6": [194, 226, 227, 511, 561, 567, 570, 573], "rel": [194, 226, 227, 379, 519, 542, 560, 570, 572, 573], "remain": [194, 527], "unchang": 194, "neg": 194, "flip": [194, 255, 259, 297, 300, 569], "initial_metr": 194, "sparsity_ratio": [194, 220], "prune_n": [194, 220], "prune_m": [194, 220], "pow_of_var_regrow": 194, "max_cycle_tim": 194, "without_same_sign": 194, "update_threshold": 194, "power": [194, 505, 519, 533, 559], "cycl": [194, 479], "paper": [194, 220, 505, 558, 564, 567], "2310": 194, "08915": 194, "pickle_protocol": 195, "_use_new_zipfile_seri": 195, "prepare_prun": [195, 558], "loss_func": [195, 214], "assertionerror": [195, 201, 208, 218, 338, 339, 340, 369], "slim": [196, 197, 198, 311, 364, 375, 377, 521, 558], "round_multipli": 196, "spars": [196, 210, 340, 502, 559], "model_slim_ffn2": 196, "perman": [196, 476, 558], "obtain": [196, 198, 207, 212, 215, 218, 339, 444, 478, 483, 547, 558, 566, 567, 570], "acceler": [196, 505, 519, 522, 530, 539, 542, 546, 558, 559, 563, 564, 567, 570], "directli": [196, 226, 227, 241, 284, 311, 315, 339, 364, 368, 518, 519, 526, 558, 560, 561, 568], "sprase": 196, "model_slim_mha": 196, "parse_auto_slim_config": [196, 558], "ffn2_sparsiti": [196, 558], "mha_spars": [196, 558], "generate_ffn2_pruning_config": 196, "consecut": [196, 198, 199, 558], "generate_mha_pruning_config": 196, "head": [196, 198, 202, 209, 218, 558, 573], "get_attribut": 198, "get_common_modul": 198, "layer2": [198, 519, 558, 561], "nearest": [198, 259, 300, 450, 564, 569], "print_iter": 198, "recipesearch": 198, "root": [198, 242, 243, 244, 247, 285, 286, 287, 290, 315, 368, 502, 507, 518, 519, 572], "levelwis": 198, "wai": [198, 243, 244, 247, 286, 287, 290, 479, 484, 501, 502, 504, 518, 519, 522, 525, 540, 541, 545, 546, 547, 557, 558, 561, 564, 567, 570, 572], "bert": [198, 227, 238, 241, 242, 259, 281, 284, 285, 300, 481, 502, 505, 518, 520, 527, 550, 553, 554, 558, 569, 573], "recipe_sampl": 198, "bertattent": 198, "dens": [198, 216, 226, 227, 342, 542, 558, 573], "searching_result": 198, "jitbasicsearch": 198, "placeholder_shap": 198, "placeholder_dtyp": 198, "jit": [198, 226, 522, 524, 529, 567, 568], "script": [198, 308, 309, 312, 313, 361, 362, 365, 366, 444, 477, 507, 514, 522, 526, 529, 530, 533, 550, 552, 559], "static_graph": 198, "flatten_static_graph": 198, "target_lay": 198, "linear2linearsearch": 198, "target_op_lut": 198, "lookup": 198, "tabl": [198, 209, 472, 484, 504, 509, 542, 544, 573], "current_pattern": 198, "statu": [198, 469, 476, 501, 549, 552, 553, 554, 556, 558], "selfmhasearch": 198, "classifierheadsearch": 198, "classifi": [198, 218, 242, 285, 315, 368, 502, 505], "classifierheadsearchertf": 198, "squeezer": 199, "postcompressionutil": 199, "librari": [199, 263, 307, 360, 396, 474, 481, 515, 519, 520, 524, 533, 539, 559, 561], "relat": [199, 215, 301, 311, 330, 335, 338, 364, 420, 464, 484, 522, 546, 547, 558, 572], "linearcompress": 199, "root_linear": 199, "target_linear": 199, "while": [199, 210, 218, 340, 347, 406, 444, 482, 483, 502, 508, 514, 520, 522, 527, 539, 541, 558, 560, 561, 564, 567], "hidden": [199, 204, 338, 482], "layer_1": 199, "act_fn": 199, "layer_2": 199, "linearcompressioniter": 199, "linear_pattern": 199, "register_pattern": [200, 338], "basepattern": [200, 202, 204], "unit": [200, 338, 477, 547, 558], "4x1": [200, 226, 227, 334, 519, 558, 573], "is_glob": [200, 338], "local": [200, 226, 227, 338, 444, 472, 532, 536, 541, 548, 549, 558, 566], "keep_mask_lay": 200, "invalid_lay": 200, "max_sparsity_ratio_per_op": [200, 205, 223, 226, 227, 519, 558], "sparsiti": [200, 202, 203, 205, 206, 207, 210, 212, 213, 216, 218, 226, 227, 340, 342, 472, 481, 502, 514, 519, 571, 573], "reach": [200, 216, 226, 227, 342, 477, 501, 541, 558, 570], "min_sparsity_ratio_per_op": [200, 223, 226, 227, 519, 558], "target_spars": [200, 223, 226, 227, 519, 558, 560, 572], "pytorchbasepattern": [200, 215], "kerasbasepattern": 200, "get_pattern": [201, 338], "patternmha": 202, "doc": [202, 203, 226, 227, 338, 356, 357, 368, 402, 417, 418, 421, 472, 518, 519, 534, 537, 545], "md": [202, 203, 226, 227, 338, 368, 402], "n": [202, 203, 226, 227, 243, 259, 286, 300, 309, 338, 362, 421, 484, 502, 504, 505, 547, 558, 561, 567, 569], "pytorchpatternninm": 203, "out": [203, 226, 227, 242, 243, 244, 285, 286, 287, 306, 338, 343, 457, 477, 478, 481, 502, 522, 527, 532, 533, 534, 536, 537, 539, 545, 558, 560, 561, 564], "pytorchpatternnxm": 204, "kept": [204, 338], "block_siz": [204, 338, 450, 564], "height": [204, 255, 259, 297, 300, 338, 507, 569, 572], "width": [204, 255, 259, 297, 300, 338, 500, 507, 558, 561, 569, 572], "vertic": [204, 259, 300, 338, 569], "keraspatternnxm": 204, "register_prun": [205, 214, 340], "baseprun": [205, 210, 212, 214], "current_sparsity_ratio": [205, 340], "global_step": [205, 340], "start_step": [205, 223, 226, 227, 340, 519, 558, 560], "end_step": [205, 223, 226, 227, 340, 519, 558, 560], "pruning_frequ": [205, 223, 226, 227, 519, 558], "target_sparsity_ratio": [205, 340], "show": [205, 472, 476, 505, 507, 519, 525, 540, 541, 542, 544, 547, 552, 553, 554, 567, 570, 571], "pytorchbaseprun": [205, 213], "kerasbaseprun": 205, "pytorchbasicprun": 206, "arrang": [206, 207, 212, 213, 243, 244, 247, 286, 287, 290, 502, 558], "proce": [206, 207, 212, 213], "regul": [206, 207, 212, 213], "kerasbasicprun": 206, "pytorchblockmaskprun": 207, "grad": [207, 212], "parse_valid_pruner_typ": 208, "get_prun": [208, 340], "pythonmultiheadattentionprun": 209, "mha_modul": 209, "partial": [209, 558, 561], "qkv": 209, "feedward": 209, "simultan": [209, 522, 546, 557, 560], "qkv_name": 209, "query_layer_nam": 209, "key_layer_nam": 209, "value_layer_nam": 209, "ffn_name": 209, "attention_ffn_nam": 209, "mha_nam": 209, "qkv_modul": 209, "ffn_modul": 209, "mha_compress": 209, "mhacompress": 209, "linear_lay": 209, "independ": [209, 396, 401, 484], "4x": [209, 479, 561], "subsequ": [209, 483, 522, 539], "head_mask": 209, "mha_head_s": 209, "similar": [209, 223, 519, 543, 560, 567, 570, 572], "mha_scor": 209, "lock": [210, 328, 329, 514, 557, 558], "pytorchpatternlockprun": 210, "parent": [210, 211, 216, 334, 340, 342, 568], "pytorchprogressiveprun": 211, "basicprun": [211, 214], "interpol": [211, 259, 300, 518, 558, 569], "fine": [211, 242, 285, 502, 525, 558, 559, 561], "grain": [211, 558, 559, 570], "improv": [211, 444, 477, 500, 519, 522, 539, 540, 542, 558, 559, 561, 563, 564, 570, 571, 573], "ad": [211, 242, 285, 308, 347, 361, 406, 483, 484, 504, 520, 522, 527, 530, 534, 537, 547, 558, 564, 568], "retrain": [212, 506], "pytorchretrainfreeprun": 212, "pruner_class": [212, 213], "fast": [212, 226, 227, 481, 558, 559, 564], "retrainfreeprun": [212, 214], "effect": [212, 481, 482, 558, 559], "2204": 212, "09656": 212, "sparsegptprun": [213, 214], "most": [213, 226, 227, 315, 368, 504, 519, 520, 558, 561, 564, 567, 570, 573], "sparsegpt": [213, 214, 558], "massiv": [213, 558], "One": [213, 484, 502, 507, 514, 544, 558, 559, 570], "2301": [213, 558], "00774": [213, 558], "opt": [214, 481, 517, 527, 558, 567, 570, 573], "least": [214, 341, 477, 519, 558, 570], "templat": [214, 341, 519, 558], "tree": [214, 341, 357, 418, 547], "nlp": [214, 226, 227, 341, 527, 543, 558, 561], "huggingface_model": [214, 341, 543], "classif": [214, 242, 259, 285, 300, 315, 341, 368, 505, 509, 518, 528, 542, 550, 553, 554, 558, 559], "pytorch_prun": [214, 307, 360], "eager": [214, 341, 401, 507, 514, 561, 563, 568], "config_file_path": [214, 341], "pruner_info": [214, 341], "pruning_class": 214, "avail": [214, 226, 227, 373, 485, 487, 491, 494, 497, 508, 510, 512, 514, 532, 536, 541, 546, 547, 548, 552, 553, 554, 558, 570, 573], "regular": [215, 308, 339, 361], "register_reg": 215, "regulariz": 215, "get_reg_typ": 215, "get_reg": 215, "basereg": 215, "grouplasso": 215, "coeff": 215, "lasso": [215, 325, 514, 558], "reg_term": 215, "register_schedul": [216, 342], "get_schedul": [216, 342], "pruningschedul": 216, "gradual": [216, 342, 558], "oneshotschedul": [216, 342], "iterativeschedul": [216, 342], "get_tf_criterion": 217, "get_sparsity_ratio": 218, "elementwise_over_matmul_gemm_conv": 218, "elementwise_over_al": 218, "blockwise_over_matmul_gemm_conv": 218, "get_sparsity_ratio_tf": 218, "check_config": [218, 339], "prune_config": [218, 339], "everyth": [218, 339, 527], "reset_none_to_default": 218, "update_param": 218, "process_weight_config": 218, "global_config": [218, 324, 325, 327, 328, 329], "local_config": [218, 226, 227, 324, 325, 327, 328, 329], "default_config": 218, "pruners_info": 218, "process_yaml_config": 218, "check_key_valid": 218, "template_config": 218, "user_config": 218, "process_and_check_config": [218, 339], "process_config": [218, 339], "parse_last_linear": 218, "often": [218, 501, 505, 544, 557, 558], "might": [218, 478, 541, 570], "caus": [218, 483, 501, 523, 542, 544, 558, 564], "drop": [218, 311, 339, 364, 477, 519, 520, 533, 558, 564, 567, 573], "parse_last_linear_tf": 218, "parse_to_prun": [218, 339], "parse_to_prune_tf": 218, "generate_pruner_config": 218, "dotdict": [218, 223, 227, 379, 472], "get_lay": 218, "collect_layer_input": 218, "layer_idx": 218, "layer_input": 218, "previou": [218, 483, 484, 519, 558, 565, 567, 568, 570, 571, 573], "prune_wanda": 220, "use_vari": 220, "low_mem_usag": 220, "dsnot": 220, "sij": 220, "wij": 220, "xj": 220, "2306": [220, 564], "11695": 220, "recurs": [221, 472], "wrappedgpt": 222, "layer_id": 222, "gpt": [222, 481, 517, 543, 558, 567, 573], "prunerv2": 223, "pruning_typ": [223, 226, 227, 519, 558], "pruning_scop": [223, 226, 227, 519, 558], "sparsity_decay_typ": [223, 226, 227, 519, 558], "pruning_op_typ": [223, 226, 227, 519, 558], "reg_typ": 223, "criterion_reduce_typ": 223, "resume_from_pruned_checkpoint": 223, "cfg_fname": 223, "parser": 223, "quantization_conf": 223, "pruning_conf": 223, "graph_optimization_conf": [223, 306], "mixedprecision_conf": 223, "benchmark_conf": 223, "nasconfig": [223, 227, 319, 321, 479], "approach": [223, 226, 227, 318, 319, 321, 450, 478, 479, 500, 502, 505, 514, 519, 527, 539, 542, 550, 552, 553, 554, 558, 559, 560, 562, 564, 570, 572], "search_algorithm": [223, 227, 307, 320, 360, 479], "na": [223, 227, 307, 360, 373, 514, 573], "procedur": [223, 479, 558, 570], "defaultconf": 223, "notat": [223, 224, 227, 472], "deep_get": [224, 379, 438], "dot": [224, 438, 520, 561], "person": [224, 438, 476, 559], "john": [224, 438], "deep_set": [224, 379], "sex": [224, 476], "male": 224, "pythonic_config": 225, "random_se": [226, 227, 347, 406, 519, 572], "1978": [226, 227], "workspac": [226, 227, 471, 472, 521, 547, 552, 553, 554], "default_workspac": [226, 227], "resume_from": [226, 227, 472], "tensorboard": [226, 227, 464, 472, 482, 519, 542], "set_random_se": [226, 227, 472], "set_workspac": [226, 227, 472], "set_resume_from": [226, 227, 472], "set_tensorboard": [226, 227, 472], "directori": [226, 227, 243, 244, 286, 287, 377, 467, 469, 471, 472, 502, 507, 510, 532, 534, 536, 537, 543, 545, 568], "histori": [226, 227, 471, 472, 539, 543, 570], "nc_workspac": [226, 227, 542, 543], "datetim": [226, 227], "now": [226, 227, 259, 300, 478, 479, 484, 502, 507, 530, 560, 569, 570], "strftime": [226, 227], "d_": [226, 227], "resum": [226, 227, 230, 231, 273, 274, 351, 353, 403, 406, 407, 411, 412, 414], "flag": [226, 227, 309, 362, 504], "visual": [226, 227, 481, 530, 539, 566, 568, 570, 571], "displai": [226, 227, 356, 357, 417, 418, 472, 539, 542], "2022": [226, 227, 481, 516, 558, 564, 567, 573], "workspace_path": [226, 227], "accuracycriterion": [226, 227, 519, 570], "tolerable_loss": [226, 227, 519, 570], "accept": [226, 227, 421, 476, 499, 501, 541, 564], "accuracy_criterion": [226, 227, 379, 519, 543, 556, 560, 570, 572], "warmup": [226, 227, 499, 519, 560], "inter_num_of_thread": [226, 227, 396, 401, 519, 560], "intra_num_of_thread": [226, 227, 396, 401, 519, 560], "benchmark": [226, 227, 262, 307, 344, 360, 379, 472, 481, 489, 521, 522, 526, 530, 533, 539, 542, 570, 571, 572, 573], "onnxrt_trt_ep": [226, 227, 520, 561], "onnxrt_cuda_ep": [226, 227, 520, 561], "inter": [226, 227], "intra": [226, 227], "quantizationconfig": 226, "post_training_static_qu": [226, 502, 519, 560, 570], "calibration_sampling_s": [226, 227, 519, 544], "op_type_dict": [226, 227, 484, 560, 561, 564, 570], "op_name_dict": [226, 227, 504, 519, 542, 544, 561, 570], "strategy_kwarg": [226, 227, 566, 570], "quant_level": [226, 227, 542, 564, 567, 570], "posttrainingquantconfig": [226, 227, 402, 478, 481, 484, 501, 504, 509, 512, 518, 519, 521, 541, 542, 543, 544, 561, 562, 563, 564, 566, 567, 570], "quantizationawaretrainingconfig": [226, 227, 461, 478, 506, 509, 519, 561, 563, 570], "cv": [226, 227, 558], "object_detect": [226, 227, 311, 364], "recommendation_system": [226, 227], "explicitli": [226, 227, 513, 558], "overrid": [226, 227, 472], "quantiztaion": [226, 227], "smooth_quant_arg": [226, 227, 561, 567], "gemm_to_matmul": [226, 227, 561], "graph_optimization_level": [226, 227, 560, 561], "disable_al": [226, 227, 560], "enable_bas": [226, 227], "enable_extend": [226, 227], "enable_al": [226, 227], "first_conv_or_matmul_quant": [226, 227, 561], "last_conv_or_matmul_quant": [226, 227, 561], "pre_post_process_quant": [226, 227, 561], "postprocess": [226, 227, 253, 256, 259, 263, 300, 307, 360, 368, 402, 464, 482, 519, 568, 569], "dedic": [226, 227], "quant_format": [226, 227, 305, 509, 542], "constraint": [226, 227, 306, 343, 519, 558, 566, 570, 572], "conv1": [226, 227, 561, 572], "tuning_strategi": [226, 227], "guarante": [226, 227, 519], "models": [226, 227, 379, 519, 556, 560], "footprint": [226, 227, 306, 330, 335, 343, 379, 506, 519, 556, 558, 560, 562], "excluded_precis": [226, 227, 563], "exclud": [226, 227, 482, 500, 563], "conserv": [226, 227, 360, 410], "use_distributed_tun": 226, "weightpruningconfig": [226, 227, 519, 557, 558], "pruning_config": [226, 227, 519, 558], "98": [226, 227, 519, 558, 560, 573], "exp": [226, 227, 519, 558], "link": [226, 227, 242, 285, 368, 402, 500, 502, 509, 532, 536, 539, 564, 573], "90": [226, 227, 562, 572, 573], "magnitude_progress": [226, 227], "snip_progress": [226, 227], "snip_momentum_progress": [226, 227], "feasibl": [226, 227], "situat": [226, 227, 507, 558], "unstructur": [226, 227, 334, 514, 558, 573], "8x1": [226, 227], "channelx1": [226, 227, 558], "1xchannel": [226, 227, 558], "itrex": [226, 227, 567], "start": [226, 227, 259, 300, 311, 364, 407, 515, 544, 559, 569, 570, 571, 574], "togeth": [226, 227, 259, 300, 505, 515, 526, 559, 568, 569], "sort": [226, 227, 350, 411, 504, 542, 564, 570], "sinc": [226, 227, 306, 308, 330, 335, 343, 361, 505, 509, 515, 518, 533, 539, 544, 557, 564, 565], "lead": [226, 227, 505, 519, 520, 544, 558, 564, 567], "increas": [226, 227, 503, 514, 522, 539, 544, 564, 570], "cube": [226, 227, 558], "update_config": [226, 227, 433], "knowledgedistillationlossconfig": [226, 227, 505, 506, 519, 557], "hyperparamet": [226, 227, 356, 566, 567, 570], "entropi": [226, 227, 500, 570], "groundtruth": [226, 227, 311, 364], "label": [226, 227, 230, 231, 242, 244, 245, 246, 247, 250, 255, 259, 264, 273, 274, 285, 287, 288, 289, 290, 293, 297, 300, 308, 310, 315, 361, 363, 368, 369, 402, 461, 478, 501, 502, 504, 518, 519, 561, 569], "sum": [226, 227, 315, 368, 504, 505], "distillationconfig": [226, 227, 461, 505, 506, 519, 557], "prepare_compress": [226, 227, 461, 478, 505, 506, 519, 557, 558, 561], "criterion_conf": [226, 227], "d_conf": [226, 227, 506, 519, 557], "compression_manag": [226, 227, 461, 478, 505, 506, 519, 557, 558, 561], "featur": [226, 227, 242, 243, 255, 259, 285, 286, 297, 300, 477, 481, 499, 501, 503, 505, 519, 520, 521, 522, 526, 527, 530, 539, 541, 545, 558, 559, 565, 569], "distil_loss": [226, 227, 519], "ni_workload_nam": 227, "onnxrt_dnnl_ep": [227, 520, 561], "onnxrt_dml_ep": [227, 561], "tuningcriterion": [227, 519, 556, 566, 570], "tuning_criterion": [227, 519, 556, 566, 570], "npu": [227, 561], "xpu": [227, 444, 530, 561], "ptq": [227, 402, 478, 504, 507, 514, 519, 544, 561, 567, 568, 570], "meet": [227, 233, 344, 346, 403, 405, 478, 483, 556, 559, 560, 561, 564, 568, 570], "mse_v2": [227, 307, 349, 360, 410], "hawq_v2": [227, 360, 410], "docstr": [227, 421], "workload": [227, 469, 472, 541, 559], "insight": [227, 469, 481, 504, 559, 565, 570, 571], "copi": [227, 339, 472, 501, 545], "deepcopi": 227, "model_origin": [227, 402, 563], "qat_op_name_dict": 227, "low_memory_usag": 227, "hpoconfig": 227, "xgb": 227, "bo": 227, "intermediatelayersknowledgedistillationlossconfig": [227, 505], "relationship": [227, 541], "student_layer_nam": 227, "student_layer_output_process": 227, "teacher_layer_nam": 227, "teacher_layer_output_process": 227, "desir": [227, 255, 259, 297, 300, 483, 484, 558, 567, 569], "serv": [227, 377, 444, 547, 552, 553, 554], "numer": [227, 315, 368, 484, 520, 559, 561, 564], "abbrevi": 227, "l1": 227, "selfknowledgedistillationlossconfig": [227, 505, 519], "student1_layer_name1": 227, "teacher_layer_name1": 227, "student2_layer_name1": 227, "student1_layer_name2": 227, "teacher_layer_name2": 227, "student2_layer_name2": 227, "soft": 227, "hard": [227, 501, 504], "resblock": 227, "deepst": 227, "02": [227, 573], "mixedprecisionconfig": [227, 369, 421, 519, 520], "mixedprecis": [227, 316, 519], "won": [227, 561, 564], "work": [227, 306, 343, 444, 480, 483, 501, 505, 534, 537, 545, 563, 564, 565, 567, 568], "mix_precis": [227, 360, 421, 519, 520], "converted_model": [227, 369, 519, 520], "exportconfig": 227, "14": [227, 304, 305, 509, 515, 554, 573], "dynamic_ax": [227, 305, 509], "qlinear": [227, 244, 251, 287, 294, 315, 368, 482, 529], "ax": [227, 305], "onnxqlinear2qdqconfig": 227, "onnxqlinear2qdq": 227, "torch2onnxconfig": [227, 509], "torch2onnx": [227, 302, 307, 360], "qdq_op_fp32_bia": 227, "qdq_op_int32_bia": 227, "qdq_op_fp32_bias_qdq": 227, "resnet50": [227, 481, 504, 507, 509, 520, 522, 526, 558, 561, 566, 573], "int8_onnx_config": [227, 509], "randn": [227, 509], "224": [227, 255, 297, 481, 502, 507, 509, 512, 519, 522, 541, 569, 572], "batch_siz": [227, 232, 234, 240, 241, 242, 243, 262, 275, 277, 283, 284, 285, 286, 305, 479, 501, 502, 507, 509, 513, 519, 522, 561], "tf2onnxconfig": [227, 509], "tf2onnx": [227, 302, 307, 360], "output_graph": 227, "dyna": [227, 307, 320, 360, 479, 514, 560], "sigopt": [228, 229, 271, 272, 307, 360, 559], "tpe": [228, 229, 271, 272, 307, 360], "sigopttunestrategi": [230, 273], "q_dataload": [230, 231, 273, 274, 347, 350, 351, 353, 403, 406, 407, 411, 412, 414, 513, 570], "eval_metr": [230, 231, 369, 402, 403, 406, 407, 411, 412, 414, 461, 518, 541, 561], "q_hook": [230, 231, 273, 274, 347, 350, 351, 353, 403, 406, 407, 411, 412, 414], "mandatori": [230, 231, 273, 274, 402, 519, 572], "yield": [230, 231, 240, 262, 273, 274, 283, 347, 369, 402, 406, 421, 461, 501, 561, 570], "well": [230, 231, 273, 274, 369, 402, 461, 479, 481, 502, 558, 561, 565, 567, 572], "taken": [230, 231, 273, 274, 369, 402, 461, 561], "reserv": [230, 231, 273, 274], "abl": [230, 231, 273, 274, 369, 402, 461, 530, 539, 561], "tuner": [230, 231, 273, 274, 306, 343, 369, 402, 461, 561], "scalar": [230, 231, 273, 274, 369, 402, 461, 518, 561, 570], "pseudo": [230, 231, 273, 274, 402, 461, 564, 568], "someth": [230, 231, 244, 273, 274, 287, 402, 461], "fefin": [231, 274], "tpetunestrategi": [231, 274], "basedatalod": [232, 275], "basedataload": [232, 237, 239, 275, 280, 282], "last_batch": [232, 234, 241, 262, 275, 277, 284, 501], "rollov": [232, 234, 241, 262, 275, 277, 284, 501], "collate_fn": [232, 234, 235, 241, 262, 275, 277, 278, 284, 501, 502], "batch_sampl": [232, 234, 241, 262, 275, 277, 284, 501], "num_work": [232, 234, 241, 262, 275, 277, 284, 501, 519, 561], "pin_memori": [232, 234, 241, 262, 275, 277, 284, 501], "_generate_dataload": [232, 275], "check_dataload": 233, "default_col": [234, 277], "outer": [234, 277], "defaultdataload": [234, 241, 277, 284], "style": [235, 249, 278, 292, 421, 477, 502, 513], "drop_last": [235, 240, 278, 283], "iterablefetch": [235, 278], "indexfetch": [235, 278], "base_dataload": [236, 279, 296, 307], "default_dataload": [236, 279, 296, 307], "fetcher": [236, 279, 296, 307], "mxnet_dataload": [236, 279, 296, 307], "onnxrt_dataload": [236, 279, 296, 307, 395], "pytorch_dataload": [236, 279, 296, 307], "tensorflow_dataload": [236, 279, 296, 307, 400], "mxnetdataload": [237, 280], "onnxrtbertdataload": [238, 281], "variant": [238, 281], "onnxrtdataload": [238, 281, 395], "pytorchdataload": [239, 282], "data_sourc": [240, 283, 464], "__iter__": [240, 244, 283, 287, 501, 502, 519], "matter": [240, 283, 563], "iterablesampl": [240, 283], "squential": [240, 283], "your": [240, 242, 283, 285, 444, 477, 501, 502, 504, 507, 516, 519, 522, 525, 526, 527, 532, 533, 534, 536, 537, 539, 541, 545, 547, 552, 553, 554, 558, 559, 566, 568, 570, 571], "clear": [240, 283, 482, 511, 518, 519], "iterabledataset": [240, 244, 283, 287], "try": [240, 283, 478, 504, 542, 558, 561, 567, 570], "indexdataset": [240, 283], "__getitem__": [240, 244, 259, 283, 287, 300, 501, 502, 519], "__len__": [240, 244, 283, 287, 502], "sequentialsampl": [240, 283], "batchsampl": [240, 283], "tfdatadataload": [241, 284], "tensorflow1": [241, 284], "coupl": [241, 284], "satisfi": [241, 284, 504, 515, 545], "tf1": [241, 284, 521], "although": [241, 284, 566], "tensorflowbertdataload": [241, 284], "tensorflowmodelzoobertdataload": [241, 284], "zoo": [241, 259, 284, 300, 481, 508, 512, 573], "tensorflowdataload": [241, 284, 400], "pytorchbertdataset": [242, 285], "model_typ": [242, 285, 472, 502], "tensordataset": [242, 285, 502], "repo": [242, 285, 475, 477, 502, 508, 532, 534, 536, 537, 574], "easi": [242, 285, 343, 509, 519, 542, 546, 559, 561, 564, 566], "squad": [242, 259, 285, 300, 312, 313, 315, 365, 366, 368, 502, 518, 558, 569, 573], "distilbert": [242, 285, 481, 502, 520, 559, 573], "xlnet": [242, 285, 502, 573], "xlm": [242, 285, 502, 573], "101": [242, 285, 315, 368, 518, 548, 567, 573], "2043": [242, 285], "2001": [242, 285], "onnxrtbertdataset": [242, 285], "data_dir": [242, 285, 502], "model_name_or_path": [242, 285, 502, 519, 527, 528, 543, 550, 553, 554, 562], "max_seq_length": [242, 259, 285, 300, 502, 569], "do_lower_cas": [242, 258, 259, 285, 299, 300, 502, 569], "mrpc": [242, 285, 315, 368, 502, 518, 527, 550, 553, 554, 558, 570, 573], "dynamic_length": [242, 285, 502], "shortcut": [242, 285, 502], "longer": [242, 259, 285, 300, 502, 569], "shorter": [242, 259, 285, 300, 502, 569], "lowercas": [242, 285, 502], "choic": [242, 285, 482, 502, 518, 545, 567], "qqp": [242, 285, 502, 518, 573], "qnli": [242, 285, 502, 518, 573], "rte": [242, 285, 502, 518, 573], "st": [242, 285, 502, 518], "cola": [242, 285, 502, 518, 573], "mnli": [242, 285, 502, 518, 573], "wnli": [242, 285, 502, 518], "mobilebert": [242, 285, 502, 505, 573], "roberta": [242, 285, 502, 573], "uncas": [242, 259, 285, 300, 502, 569, 573], "load_and_cache_exampl": [242, 285], "convert_examples_to_featur": [242, 259, 285, 300], "max_length": [242, 285], "label_list": [242, 285, 315, 368], "output_mod": [242, 285], "pad_token": [242, 285], "pad_token_segment_id": [242, 285], "mask_padding_with_zero": [242, 285], "inputfeatur": [242, 259, 285, 300], "properti": [242, 285, 420, 516], "vocabulari": [242, 258, 259, 285, 299, 300, 569], "attention_mask": [242, 285, 519], "usual": [242, 285, 483, 504, 505, 544, 557, 558, 561, 562, 567], "NOT": [242, 285, 511], "token_type_id": [242, 285, 519], "segment": [242, 285, 309, 311, 362, 364, 477], "portion": [242, 285], "regress": [242, 285, 477, 504], "seq_length": [242, 285], "tensorflowbertdataset": [242, 285], "label_fil": [242, 259, 285, 300, 502, 569], "tfrecord": [242, 243, 244, 285, 286, 287, 502], "guid": [242, 285, 478, 481, 502, 505, 515, 522, 530, 539, 574], "parsedecodebert": [242, 285], "tensorflowmodelzoobertdataset": [242, 243, 285, 286], "num_cor": [242, 243, 247, 285, 286, 290, 502], "28": [242, 243, 247, 285, 286, 290, 502, 573], "coco": [243, 250, 254, 286, 293, 311, 315, 364, 368, 518, 558], "parsedecodecoco": [243, 286], "cocorecorddataset": [243, 286], "interleav": [243, 286, 502], "parallel": [243, 286, 396, 401, 444, 502, 519, 546, 549, 570], "cocoraw": [243, 286, 502], "img_dir": [243, 286, 502], "val2017": [243, 286, 502], "anno_dir": [243, 286, 502], "annot": [243, 286, 311, 364, 421, 483, 484, 502, 518, 558, 570], "instances_val2017": [243, 286, 502], "jpg": [243, 247, 249, 286, 290, 292, 481, 502], "imag": [243, 244, 247, 249, 255, 259, 286, 287, 290, 292, 297, 300, 311, 364, 502, 507, 509, 558, 560, 567, 568, 569, 573], "coconpi": [243, 286, 502], "npy_dir": [243, 286, 502], "npy": [243, 286, 502], "tensorflowdataset": [244, 287], "pytorchdataset": [244, 287], "mxnetdataset": [244, 287], "onnxrtqldataset": [244, 287], "onnxrtitdataset": [244, 287], "IT": [244, 251, 287, 294, 559], "pytorchmxnetwrapdataset": [244, 287], "datafunc": [244, 287], "pytorchmxnetwrapfunct": [244, 259, 287, 300], "framework_dataset": [244, 287], "convent": [244, 287, 311, 364, 505], "imageclassifi": [244, 287], "tensorflow_itex": [244, 247, 249, 251, 287, 290, 292, 294, 501, 560], "onnxrt_qdq": [244, 251, 287, 294, 560], "onnxrt_qlinearop": [244, 251, 259, 287, 294, 300, 560], "onnxrt_integerop": [244, 251, 259, 287, 294, 300, 560], "pytorch_ipex": [244, 251, 287, 294, 519, 560, 572], "pytorch_fx": [244, 251, 287, 294, 519, 560], "dataset_registri": [244, 287], "dataset_typ": [244, 287], "dataset_format": [244, 287], "data_format": [244, 255, 287, 297], "raw_imag": [244, 287], "overwrit": [244, 287, 532, 536], "download_url": [244, 287], "filenam": [244, 287, 472, 502, 545], "md5": [244, 287], "address": [244, 287, 476, 520, 541, 544, 547, 559], "gen_bar_updat": [244, 287], "check_integr": [244, 287], "fpath": [244, 287], "checksum": [244, 287], "calculate_md5": [244, 287], "chunk_siz": [244, 287], "cifar10": [244, 287, 502], "cifar100": [244, 287, 502], "databas": [244, 287, 547], "www": [244, 287, 502, 573], "toronto": [244, 287, 502], "kriz": [244, 287, 502], "cifar": [244, 287, 502, 573], "tar": [244, 287, 502, 504, 534, 537], "gz": [244, 287, 502, 504, 534, 537], "manual": [244, 287, 502, 522, 528, 530, 533, 547, 552, 553, 554, 558], "subset": [244, 247, 287, 290, 502, 544], "internet": [244, 287, 502, 541], "again": [244, 287, 502, 542, 544, 563], "pytorchcifar10": [244, 287], "mxnetcifar10": [244, 287], "tensorflowcifar10": [244, 287], "pytorchcifar100": [244, 287], "mxnetcifar100": [244, 287], "tensorflowcifar100": [244, 287], "mnist": [244, 287, 502, 507], "nation": [244, 287, 476], "institut": [244, 287], "standard": [244, 259, 287, 300, 477, 483, 504, 509, 518, 569, 570], "technologi": [244, 287, 517, 519], "fashionmnist": [244, 287, 502], "npz": [244, 287, 502], "idx1": [244, 287, 502], "ubyt": [244, 287, 502], "idx3": [244, 287, 502], "t10k": [244, 287, 502], "pytorchmnist": [244, 287], "mxnetmnist": [244, 287], "tensorflowmnist": [244, 287], "pytorchfashionmnist": [244, 287], "mxnetfashionmnist": [244, 287], "tensorflowfashionmnist": [244, 287], "imagefold": [244, 287, 502, 507, 519], "expect": [244, 287, 476, 477, 510, 517, 539, 561, 564, 570], "subfold": [244, 287, 542], "belong": [244, 287, 373, 561], "class_1": [244, 287, 502], "xxx": [244, 287, 502, 519], "png": [244, 287, 502], "xxy": [244, 287, 502], "xxz": [244, 287, 502], "class_n": [244, 287, 502], "123": [244, 287, 502, 569], "nsdf3": [244, 287, 502], "asd932_": [244, 287, 502], "categori": [244, 287, 310, 363, 499, 502, 529], "mxnetimagefold": [244, 287], "tensorflowtfrecorddataset": [244, 287], "tensorflowimagerecord": [244, 287], "imagenet": [244, 247, 255, 287, 290, 297, 479, 504, 519, 528, 544, 558, 568, 569, 572, 573], "000": [244, 287, 481, 502], "099": [244, 287, 502], "tensorflowvocrecord": [244, 287], "pascal": [244, 287], "voc": [244, 287, 315, 368], "2012": [244, 287], "00000": [244, 287], "00004": [244, 287], "00001": [244, 287], "00003": [244, 287], "dummydataset": [245, 246, 288, 289], "127": [245, 246, 288, 289, 502, 561, 567, 573], "stand_norm": [245, 246, 288, 289, 502], "dummy_v2": [246, 289, 502], "sparse_dummy_v2": [246, 289, 502], "label_shap": [246, 289, 502], "sparsedummydataset": [246, 289], "dense_shap": [246, 289, 502], "sparse_ratio": [246, 289, 502], "imagenetraw": [247, 290, 502], "data_path": [247, 290, 502], "image_list": [247, 290, 502], "img1": [247, 290, 502], "img2": [247, 290, 502], "imgx": [247, 290, 502], "val_map": [247, 290, 502], "txt": [247, 290, 502, 504, 515, 541, 543, 544, 546, 547], "pytorchimagenetraw": [247, 290], "mxnetimagenetraw": [247, 290], "tensorflowimagenetraw": [247, 290], "inteltensorflow": [247, 249, 290, 292, 515], "tensorflowimagenetdataset": [247, 290], "onnxrtimagenetdataset": [247, 290], "bert_dataset": [248, 253, 291, 296, 307, 360], "coco_dataset": [248, 253, 291, 296, 307, 360], "dummy_dataset": [248, 253, 291, 296, 307, 360], "dummy_dataset_v2": [248, 253, 291, 296, 307, 360], "imagenet_dataset": [248, 253, 291, 296, 307, 360], "style_transfer_dataset": [248, 253, 291, 296, 307, 360], "styletransferdataset": [249, 292], "content_fold": [249, 292, 502], "style_fold": [249, 292, 502], "crop_ratio": [249, 292, 502], "resize_shap": [249, 292, 502], "image_format": [249, 292, 502], "holder": [249, 292, 502], "labelbalancecocorecordfilt": [250, 293], "balanc": [250, 293, 564, 567], "labelbalancecocorawfilt": [250, 293], "tensorflowfilt": [251, 294], "onnxrtqlfilt": [251, 294], "onnxrtitfilt": [251, 294], "pytorchfilt": [251, 294], "mxnetfilt": [251, 294], "filter_registri": [251, 294], "filter_typ": [251, 294], "__call__": [251, 294], "coco_filt": [252, 253, 295, 296, 307, 360], "imagenet_transform": [253, 256, 296, 298, 307, 360], "parsedecodecocotransform": 254, "quantizedinput": [255, 297, 569], "labelshift": [255, 297, 569], "label_shift": [255, 297, 569], "parsedecodeimagenet": [255, 297, 569], "proto": [255, 259, 297, 300, 569], "parsedecodeimagenettransform": [255, 297], "tensorflowtransposelastchannel": 255, "tensorflowshiftrescal": 255, "rescal": [255, 259, 300, 569], "tensorflowresizecropimagenettransform": [255, 297], "random_crop": [255, 297, 569], "resize_sid": [255, 297, 569], "resize_method": [255, 297], "bilinear": [255, 259, 297, 300, 569], "random_flip_left_right": [255, 297, 569], "mean_valu": [255, 297, 569], "channels_last": [255, 297, 522], "subpixel": [255, 297], "rgb": [255, 297], "seri": [255, 297, 481, 515, 519, 569], "applic": [255, 297, 484, 509, 522, 539, 541, 547, 548, 552, 553, 559, 564, 567, 568, 569, 571], "crop": [255, 259, 297, 300, 502, 569], "left": [255, 259, 297, 300, 533, 539, 567, 569], "std": [255, 259, 297, 300, 519, 569], "bilinearimagenettransform": [255, 297], "central_fract": [255, 297, 569], "875": [255, 297, 569], "fraction": [255, 297, 569], "onnxbilinearimagenettransform": [255, 297], "onnxresizecropimagenettransform": [255, 297], "std_valu": [255, 297], "229": [255, 297, 519], "225": [255, 297, 519], "resizewithaspectratio": [255, 297], "87": [255, 297, 573], "inter_pol": [255, 297], "cv2": [255, 297], "inter_area": [255, 297], "aspect": [255, 259, 297, 300, 569], "postprocess_cl": [257, 267, 519], "user_postprocess": [257, 267], "convert_to_unicod": [258, 299], "unicod": [258, 299], "assum": [258, 299, 311, 322, 364, 482, 511, 539], "load_vocab": [258, 299], "vocab_fil": [258, 259, 299, 300, 569], "convert_by_vocab": [258, 299], "vocab": [258, 299], "whitespace_token": [258, 299], "whitespac": [258, 299, 313, 366], "clean": [258, 299, 519], "piec": [258, 299, 308, 361, 518, 564], "fulltoken": [258, 299], "tokenzi": [258, 299], "basictoken": [258, 299], "punctuat": [258, 299, 308, 313, 361, 366], "lower": [258, 259, 299, 300, 313, 366, 407, 506, 558, 559, 561, 567, 569, 570], "wordpiecetoken": [258, 299], "unk_token": [258, 299], "unk": [258, 299], "max_input_chars_per_word": [258, 299], "wordpiec": [258, 259, 299, 300, 569], "concat_gener": [259, 300], "inc": [259, 300, 476, 483, 522, 529, 539, 541, 546, 559, 560, 565, 570], "tensorflowtransform": [259, 300], "mxnettransform": [259, 300], "pytorchtransform": [259, 300], "onnxrtqltransform": [259, 300], "onnxrtittransform": [259, 300], "transform_registri": [259, 300], "transform_typ": [259, 300], "basetransform": [259, 300], "tensorflowwrapfunct": [259, 300], "transform_func": [259, 300], "pytorchmxnettransform": [259, 300], "get_torchvision_map": [259, 300], "torchvis": [259, 300, 508, 512, 522, 528, 542], "composetransform": [259, 300], "transform_list": [259, 300, 569], "compos": [259, 300, 464, 569], "croptoboundingbox": [259, 300, 569], "offset_height": [259, 300, 569], "offset_width": [259, 300, 569], "target_height": [259, 300, 569], "target_width": [259, 300, 569], "box": [259, 300, 311, 315, 364, 368, 478, 518, 522, 533, 539, 568, 569, 570], "coordin": [259, 300, 347, 406, 546, 569, 570], "top": [259, 300, 306, 315, 330, 335, 343, 368, 477, 518, 539, 542, 544, 569], "corner": [259, 300, 477, 482, 484, 569], "horizont": [259, 300, 569], "mxnetcroptoboundingbox": [259, 300], "onnxrtcroptoboundingbox": [259, 300], "tensorflowcroptoboundingbox": [259, 300], "resizewithratio": [259, 300, 569], "min_dim": [259, 300, 569], "800": [259, 300, 569], "max_dim": [259, 300, 569], "1365": [259, 300, 569], "constant_valu": [259, 300], "longest": [259, 300, 569], "side": [259, 300, 502, 533, 569], "exce": [259, 300, 564, 569], "tensorflowresizewithratio": [259, 300], "permut": [259, 300, 569], "tensorflowtranspos": [259, 300], "mxnettranspos": [259, 300], "pytorchtranspos": [259, 300], "randomverticalflip": [259, 300, 569], "tensorflowrandomverticalflip": [259, 300], "randomhorizontalflip": [259, 300, 519, 569], "tensorflowrandomhorizontalflip": [259, 300], "toarrai": [259, 300, 569], "pil": [259, 300, 569], "casttftransform": [259, 300], "castonnxtransform": [259, 300], "castpytorchtransform": [259, 300], "centercroptftransform": [259, 300], "center": [259, 300, 480, 481, 515, 569, 570], "paddedcentercroptransform": [259, 300], "crop_pad": [259, 300], "resizetftransform": [259, 300], "bicub": [259, 300, 569], "resizepytorchtransform": [259, 300], "randomcroptftransform": [259, 300], "randomresizedcroppytorchtransform": [259, 300], "08": [259, 300, 569, 573], "randomresizedcropmxnettransform": [259, 300], "randomresizedcroptftransform": [259, 300], "normalizetftransform": [259, 300], "deviat": [259, 300, 504, 569], "broadcast": [259, 300, 507, 569], "rescalekeraspretraintransform": [259, 300], "rescaletftransform": [259, 300], "rescaletransform": [259, 300], "alignimagechanneltransform": [259, 300], "must": [259, 300, 311, 364, 444, 477, 478, 483, 499, 501, 515, 561, 569], "pytorchalignimagechannel": [259, 300], "tondarraytransform": [259, 300], "resizemxnettransform": [259, 300], "resizetransform": [259, 300], "cropresizetftransform": [259, 300], "boundari": [259, 300, 569], "area": [259, 300, 311, 364, 518, 569], "pytorchcropresizetransform": [259, 300], "mxnetcropresizetransform": [259, 300], "cropresizetransform": [259, 300], "centercroptransform": [259, 300], "mxnetnormalizetransform": [259, 300], "pytorchnormalizetransform": [259, 300], "normalizetransform": [259, 300], "randomcroptransform": [259, 300], "randomresizedcroptransform": [259, 300], "get_final_text": [259, 300], "pred_text": [259, 300], "orig_text": [259, 300], "project": [259, 300, 475, 476, 477, 545, 559, 566, 570, 574], "squadexampl": [259, 300], "qas_id": [259, 300], "question_text": [259, 300], "doc_token": [259, 300], "orig_answer_text": [259, 300], "start_posit": [259, 300], "end_posit": [259, 300], "is_imposs": [259, 300], "simpl": [259, 300, 515, 519, 558, 566, 567, 570], "answer": [259, 300, 312, 313, 365, 366, 476, 544, 558, 569, 573], "unique_id": [259, 300], "example_index": [259, 300], "doc_span_index": [259, 300], "token_to_orig_map": [259, 300], "token_is_max_context": [259, 300], "input_mask": [259, 300, 519], "segment_id": [259, 300, 519], "read_squad_exampl": [259, 300], "input_fil": [259, 300], "doc_strid": [259, 300, 569], "max_query_length": [259, 300, 569], "output_fn": [259, 300], "inputbatch": [259, 300], "collecttransform": [259, 300], "10833": [259, 300], "tfsquadv1posttransform": [259, 300], "n_best_siz": [259, 300, 569], "384": [259, 300, 569], "64": [259, 300, 479, 564, 567, 569, 573], "max_answer_length": [259, 300, 569], "30": [259, 300, 508, 512, 514, 569, 573], "nbest_predict": [259, 300, 569], "question": [259, 300, 312, 313, 365, 366, 476, 477, 481, 482, 515, 522, 546, 558, 567, 569, 573], "anoth": [259, 300, 308, 317, 361, 472, 504, 505, 532, 536, 569, 570], "long": [259, 300, 510, 564, 569], "document": [259, 300, 421, 483, 484, 489, 507, 517, 520, 524, 534, 537, 538, 545, 546, 548, 558, 565, 569, 571], "chunk": [259, 300, 569], "tfmodelzoocollecttransform": [259, 300], "tfsquadv1modelzooposttransform": [259, 300], "squadv1": [259, 300, 569], "parsedecodevoctransform": [259, 300], "conf_fname_or_obj": [260, 269, 301, 306, 316, 317, 318, 319, 321, 330, 335, 343], "unnecessari": [260, 519], "setter": 262, "calib_dataload": [262, 344, 402, 433, 437, 478, 481, 501, 502, 504, 512, 513, 518, 519, 541, 542, 561, 562, 563, 564], "reason": [262, 476, 483, 501, 544, 564, 568, 570], "know": [262, 507, 565], "metric_cl": [264, 368, 402, 519], "user_metr": [264, 368, 402], "recommend": [264, 368, 444, 482, 502, 511, 530, 533, 538, 540, 558, 560, 570], "set_backend": 265, "tensorflowimagefold": 287, "qlinear2qdq": [302, 307, 360], "qlinearop": [303, 504, 514, 530, 561, 573], "check_model": 303, "onnx_qlinear_to_qdq": 303, "input_name_to_nod": 303, "tf_to_fp32_onnx": 304, "tf_to_int8_onnx": 304, "int8_model": [304, 305, 482], "get_node_map": 305, "fp32_onnx_path": 305, "module_node_map": 305, "get_quantizable_onnx_op": 305, "quantize_nod": 305, "dynamic_quant_export": 305, "pt_fp32_model": 305, "pt_int8_model": 305, "weight_typ": 305, "s8": 305, "static_quant_export": 305, "_quantiz": 305, "torch_to_fp32_onnx": 305, "do_constant_fold": 305, "torch_to_int8_onnx": 305, "achiev": [306, 343, 509, 517, 519, 542, 557, 558, 559, 561, 567, 568, 570], "across": [306, 316, 343, 369, 503, 519, 546, 549, 558, 562, 567, 570], "variou": [306, 316, 343, 369, 484, 514, 522, 549, 558, 560, 562], "dl": [306, 316, 330, 335, 343, 369, 504, 513, 526, 539, 559, 573], "bring": [306, 343, 533, 546, 567], "vari": [306, 330, 335, 343, 544, 558, 567, 573], "roc": [306, 315, 330, 335, 343, 368], "flexibl": [306, 330, 335, 343, 481, 505, 546, 558, 564], "techniqu": [307, 360, 474, 481, 514, 519, 522, 541, 557, 558, 559, 560, 561, 571, 572, 573], "bleu": [307, 309, 314, 360, 362, 367, 518, 558], "bleu_util": [307, 314, 360, 367], "coco_label_map": [307, 314, 360, 367], "coco_tool": [307, 314, 360, 367], "evaluate_squad": [307, 314, 360, 367], "f1": [307, 312, 314, 315, 360, 365, 367, 368, 507, 518, 519, 542, 566, 573], "basic_na": [307, 320, 360], "nas_util": [307, 320, 360], "pruner_legaci": [307, 360], "gradient_sensit": [307, 326, 360], "group_lasso": [307, 326, 360], "pruning_recip": [307, 360], "tile_pattern": [307, 331, 332], "prune_util": [307, 336, 360], "tuning_sampl": [307, 349, 355, 360, 410, 416], "tuning_spac": [307, 349, 355, 356, 358, 360, 410, 416, 417, 419], "tuning_struct": [307, 349, 355, 356, 357, 360, 410, 416, 417, 418], "auto_mixed_precis": [307, 349, 360, 410], "graph_optim": [307, 360], "mixed_precis": [307, 360, 369, 519], "model_convers": [307, 360], "pruning_v2": [307, 360], "unicoderegex": [308, 361], "hoc": [308, 361], "hack": [308, 361], "recogn": [308, 361, 570], "nondigit_punct_r": [308, 361], "compil": [308, 361, 519], "express": [308, 361, 476], "preced": [308, 361, 567, 570], "digit": [308, 361, 472, 559], "punct_nondigit_r": [308, 361], "symbol_r": [308, 361], "bleu_token": [308, 361], "mose": [308, 361], "smt": [308, 361], "mosesdecod": [308, 361], "mteval": [308, 361], "v14": [308, 361], "pl": [308, 361], "l954": [308, 361], "l983": [308, 361], "bilingu": [308, 361], "understudi": [308, 361], "qualiti": [308, 361], "machin": [308, 361, 509, 515, 525, 539, 541, 547, 559, 567, 568], "translat": [308, 309, 361, 362, 558, 570], "natur": [308, 361, 509], "approxim": [308, 309, 361, 362, 483, 518, 564], "glue": [308, 315, 361, 368, 502, 518, 519, 528], "word": [308, 361, 518, 558, 564, 573], "ngram": [308, 361, 518], "breviti": [308, 309, 361, 362, 518], "doe": [308, 361, 420, 501, 502, 518, 519, 564, 565, 569], "beam": [308, 361, 518], "tensor2tensor": [309, 362], "bleu_hook": [309, 362], "compute_bleu": [309, 362], "reference_corpu": [309, 362], "translation_corpu": [309, 362], "max_ord": [309, 362], "use_bp": [309, 362], "against": [309, 362], "gram": [309, 362], "bleu_scor": [309, 362], "third": [311, 364, 477, 516], "parti": [311, 364, 477, 516, 561], "pycocotool": [311, 364, 510, 515], "noth": [311, 364, 570], "thu": [311, 364, 444, 519, 558, 561], "cannot": [311, 364, 478, 510, 564, 568], "jonathanhuang": [311, 364], "image_id": [311, 364, 518], "invok": [311, 364, 444, 483], "groundtruth_dict": [311, 364], "exportgroundtruthtococo": [311, 364], "groundtruth_boxes_list": [311, 364], "groundtruth_classes_list": [311, 364], "max_num_class": [311, 364], "output_path": [311, 364], "detections_list": [311, 364], "exportdetectionstococo": [311, 364], "detection_boxes_list": [311, 364], "detection_scores_list": [311, 364], "detection_classes_list": [311, 364], "cocowrapp": [311, 364], "loadannot": [311, 364], "cocoevalwrapp": [311, 364], "agnostic_mod": [311, 364], "computemetr": [311, 364], "detection_typ": [311, 364], "bbox": [311, 364, 478, 518], "hold": [311, 347, 364, 406, 502], "iou_typ": [311, 364], "iou_thr": [311, 315, 364, 368, 518], "map_point": [311, 315, 364, 368, 518], "cocoev": [311, 364], "mscoco": [311, 364], "Then": [311, 364, 483, 504, 532, 534, 536, 537, 544, 567, 570], "exportsingleimagegroundtruthtococo": [311, 364], "next_annotation_id": [311, 364], "category_id_set": [311, 364], "groundtruth_box": [311, 364], "groundtruth_class": [311, 364], "groundtruth_mask": [311, 364], "groundtruth_is_crowd": [311, 364], "ingest": [311, 364], "here": [311, 364, 421, 483, 502, 507, 508, 509, 511, 512, 517, 518, 527, 534, 537, 539, 542, 545, 547, 561, 565, 566, 567, 573], "exportsingleimagedetectionstococo": [311, 364], "uniqu": [311, 344, 364, 561], "assign": [311, 364, 472, 507, 560, 570], "num_gt_box": [311, 364], "num_detect": [311, 315, 364, 368, 518, 519, 572], "image_height": [311, 364], "image_width": [311, 364], "detection_mask": [311, 364], "crowd": [311, 364], "insid": [311, 364, 444, 505, 506, 540, 558, 562, 570], "exportsingleimagedetectionboxestococo": [311, 364], "detection_box": [311, 364, 519, 572], "detection_scor": [311, 364, 519, 572], "detection_class": [311, 364, 519, 572], "exporsingleimagedetectionboxestococo": [311, 364], "exportsingleimagedetectionmaskstococo": [311, 364], "allenai": [312, 313, 365, 366], "bi": [312, 313, 365, 366], "att": [312, 313, 365, 366], "flow": [312, 313, 365, 366, 478, 479, 519], "f1_score": [312, 313, 365, 366], "ground_truth": [312, 313, 365, 366], "ground": [312, 313, 365, 366], "truth": [312, 313, 365, 366], "metric_max_over_ground_truth": [312, 313, 365, 366], "metric_fn": [312, 313, 365, 366], "exact_match_scor": [312, 365], "exact": [312, 365], "articl": [312, 313, 365, 366], "paragraph": [312, 313, 365, 366], "qa": [312, 313, 365, 366, 481], "normalize_answ": [313, 366], "newlin": [313, 366, 472], "tab": [313, 366, 539, 568], "harmon": [313, 315, 366, 368], "recal": [313, 315, 366, 368], "answer_start": [313, 366], "177": [313, 366, 573], "denver": [313, 366], "bronco": [313, 366], "nfl": [313, 366], "afc": [313, 366], "super": [313, 366, 479], "bowl": [313, 366], "50": [313, 366, 479, 483, 544, 558, 567, 573], "56be4db0acb8001400a502ec": [313, 366], "percentag": [313, 366, 500, 564, 572], "tensorflowmetr": [315, 368], "maintain": [315, 368, 444, 476, 477, 521, 522, 534, 537, 541, 546, 547, 558, 564, 565], "pytorchmetr": [315, 368], "mxnetmetr": [315, 368], "onnxrtqlmetr": [315, 368], "onnxrtitmetr": [315, 368], "metric_registri": [315, 368], "metric_typ": [315, 368], "decorator_metr": [315, 368], "basemetr": [315, 368, 402], "single_output": [315, 368], "hvd": [315, 368, 507], "wrappytorchmetr": [315, 368], "wrapmxnetmetr": [315, 368], "wraponnxrtmetr": [315, 368], "proport": [315, 368], "pred_list": [315, 368], "pytorchloss": [315, 368], "mae": [315, 368, 518], "compare_label": [315, 368, 402, 518], "rmse": [315, 368, 518, 570], "tensorflowtopk": [315, 368], "k": [315, 368, 402, 518, 541, 558], "among": [315, 368, 533, 567], "outcom": [315, 368], "num_correct": [315, 368], "num_sampl": [315, 368], "generaltopk": [315, 368], "cocomapv2": [315, 368, 518], "anno_path": [315, 368, 518], "map_kei": [315, 368], "detectionboxes_precis": [315, 368], "output_index_map": [315, 368, 518], "tensorflowmap": [315, 368], "tensorflowcocomap": [315, 368], "tensorflowvocmap": [315, 368], "squadf1": [315, 368, 518], "miou": [315, 368], "num_class": [315, 368], "21": [315, 368, 527, 528, 550, 553, 554, 559, 567, 573], "iou": [315, 368], "intersect": [315, 368, 482, 518], "union": [315, 368, 461, 518, 550], "onnxrtglu": [315, 368], "dlrm": [315, 368], "modelconvers": 317, "typic": [317, 344, 479, 481, 506, 508, 512, 544, 558, 573], "basicna": 318, "model_build": [318, 321], "conf_fnam": 318, "nasbas": [321, 479], "nas_registri": 322, "nas_method": 322, "create_search_space_pool": 322, "idx": [322, 502], "enumer": [322, 435, 450, 461, 482, 505, 506, 507, 519, 557, 558, 568], "find_pareto_front": 322, "pareto": [322, 479], "front": [322, 479], "n_point": 322, "n_metric": 322, "n_pareto_point": 322, "gradientsensitivityprun": 324, "pytorchmodel": [324, 325, 327, 328, 329, 378], "overwritten": [324, 325, 327, 328, 329, 527], "grouplassoprun": 325, "legaci": 326, "basicmagnitudeprun": 327, "patternlockprun": [328, 340], "pruner_registri": 329, "clase": 329, "pruningconf": [330, 335], "tfpruningcallback": [330, 335], "input_model": [330, 335, 521, 542, 543, 544, 568], "pure": [330, 335, 558], "pattern_registri": 333, "pattern_typ": 333, "patternbas": 333, "mask_shap": [333, 334], "is_contigu": 333, "tile": 334, "tilepatternbas": 334, "tilepattern_1x1": 334, "1x1": [334, 505, 519, 558], "tilepattern_2x2": 334, "2x2": [334, 567], "tilepattern_1x16": 334, "1x16": 334, "tilepattern_4x1": 334, "tilepattern_1x2": 334, "1x2": [334, 567], "patternnxm": 338, "patternninm": 338, "reset_non_value_to_default": 339, "parse_not_to_prun": 339, "update_frequency_on_step": [340, 560], "max_sparsity_ratio_per_lay": [340, 560], "magnitudeprun": 340, "snipprun": 340, "snipmomentumprun": 340, "moreoev": 340, "quantconf": 343, "separ": [344, 476, 513, 516, 547, 549, 557, 560], "opt_model": [344, 519], "fulli": [344, 519, 547, 561, 567], "train_func": [344, 461, 507, 519, 561], "automixedprecisiontunestrategi": [345, 404], "basictunestrategi": [346, 405], "polici": [346, 350, 403, 405, 411, 476, 481, 572, 574], "bayesiantunestrategi": [347, 406], "acq_max": [347, 406], "ac": [347, 406], "gp": [347, 406], "y_max": [347, 406], "n_warmup": [347, 406], "10000": [347, 406, 558], "n_iter": [347, 406], "acquisit": [347, 406], "gaussian": [347, 406, 570], "relev": [347, 406, 483, 484, 544, 558], "acq": [347, 406], "randomst": [347, 406], "scipi": [347, 406], "x_max": [347, 406], "targetspac": [347, 406], "pbound": [347, 406], "9527": [347, 406, 519, 572], "bayesianoptim": [347, 406], "exhaustivetunestrategi": [348, 408], "msetunestrategi": [350, 411], "mse_v2tunestrategi": [351, 412], "revert": [351, 359, 412, 420, 570], "randomtunestrategi": [352, 413], "strategy_registri": [353, 414, 570], "tunestrategi": [353, 414, 570], "tuningsamplerregistri": 356, "tuningsampl": [356, 417], "tuningord": [356, 417], "Not": [356, 357, 417, 418, 472, 479], "tuningspac": [356, 357, 417, 418], "tuning_order_lst": [356, 417], "initial_op_tuning_cfg": [356, 417], "modelwisetuningsampl": [356, 417], "tuning_items_prior": [356, 417], "op_dtype_dict": [356, 417], "optuningconfig": [356, 357, 358, 417, 418, 419], "optypewisetuningsampl": [356, 417], "opwisetuningsampl": [356, 417], "fallbacktuningsampl": [356, 417], "op_dtyp": [356, 417], "skip_first": [356, 417], "smoothquantsampl": [356, 417], "tuningitem": [357, 418], "item_typ": [357, 418], "pattern_to_intern": [357, 418], "default_dtyp": [357, 418], "pattern_to_path": [357, 418], "quant_mode_from_pattern": [357, 418], "internal_pattern": [357, 418], "initial_tuning_cfg_with_quant_mod": [357, 418], "op_name_typ": [357, 418], "step1": [357, 418], "step2": [357, 418], "complet": [357, 418, 482, 483, 558, 561, 570, 572, 573], "step3": [357, 418], "step4": [357, 418], "step5": [357, 418], "op_quant_mod": [358, 419], "ordereddefaultdict": [359, 420], "extract_data_typ": [359, 420], "reverted_data_typ": [359, 420], "signed_flag": [359, 420], "get_adaptor_nam": [359, 420], "experiment": [360, 479, 502, 506, 507, 509, 515, 519, 558, 560, 561, 565, 569], "base_model": [360, 371], "keras_model": [360, 371], "mxnet_model": [360, 371], "nets_factori": [360, 371], "onnx_model": [360, 371, 395, 542], "tensorflow_model": [360, 371, 400, 544], "torch_model": [360, 371], "collect_layer_histogram": [360, 465], "create_obj_from_config": [360, 465], "kl_diverg": [360, 465], "load_huggingfac": [360, 465, 519], "neural_insights_util": [360, 465], "weights_detail": [360, 465], "sub_class": [368, 402], "register_customer_metr": 368, "topk": [368, 402, 507, 518, 519, 541, 561], "frozen": [369, 377, 402, 521], "savedmodel": [369, 377, 402, 573], "onnx_ml_pb2": [369, 521], "hybirdblock": [369, 402], "basemodel": 370, "plai": [370, 559, 564, 567], "role": [370, 564, 567], "kerasmodel": 372, "get_model_fwk_nam": 373, "fwk": 373, "mxnetmodel": 374, "net": 375, "tfslimnetsfactori": 375, "get_model_typ": 377, "validate_graph_nod": 377, "validate_and_inference_input_output": 377, "graph_sess": 377, "graph_def_sess": 377, "frozen_pb_sess": 377, "load_saved_model": 377, "saved_model_tag": 377, "signatur": 377, "metagraphdef": 377, "keras_sess": 377, "slim_sess": 377, "checkpoint_sess": 377, "estimator_sess": 377, "saved_model_sess": 377, "tensorflowbasemodel": [377, 400], "tensorflowsavedmodelmodel": 377, "tensorflowllmmodel": 377, "exceed": 377, "2gb": 377, "tensorflowqatmodel": 377, "tensorflowcheckpointmodel": 377, "tensorflowmodel": 377, "pytorchbasemodel": 378, "pytorchfxmodel": 378, "ipexmodel": 378, "driven": [379, 481, 519, 539, 556, 568], "objective_registri": 379, "objective_custom_registri": 379, "obj_cl": 379, "eural_compressor": 379, "objective_cl": 379, "user_object": 379, "__class__": 379, "__name__": 379, "objective_cfg": 379, "usr_cfg": 379, "user_obj_cfg": 379, "easili": [379, 482, 523, 527, 539, 556, 567], "peak": [379, 556], "multiobject": 379, "metric_criterion": 379, "metric_weight": 379, "obj_criterion": 379, "obj_weight": 379, "is_measur": 379, "parserfactori": 381, "onnxrtparserfactori": 383, "onnxprofilingpars": 385, "respons": [385, 386, 390, 552, 553, 554, 561], "profilingpars": 386, "profilingresult": 387, "total_execution_tim": 387, "accelerator_execution_tim": 387, "cpu_execution_tim": 387, "op_run": 387, "op_defin": 387, "tensorflowparserfactori": 388, "tensorflowprofilingpars": 390, "profilerfactori": [391, 393, 398], "create_onnx_config": 396, "ort": 396, "sessionopt": 396, "delete_assign": 401, "create_tf_config": 401, "tf_modul": 401, "configproto": 401, "set_eager_execut": 401, "entir": [402, 461, 478, 483, 484, 500, 546, 558], "autotunestrategi": 403, "conservativetunestrategi": 407, "o0": [407, 570], "who": [407, 476], "hawq_v2tunestrategi": 409, "made": [409, 482, 561, 565, 570], "impact": [409, 558, 565, 570], "tunestrategymeta": 414, "metaclass": 414, "lowerbitssampl": 417, "blockfallbacktuningsampl": 417, "op_block_lst": 417, "target_dtyp": 417, "alpha_list": 417, "weightonlyquantsampl": 417, "quantopt": 420, "quant_typ": 420, "quant_opt": 420, "preprocess_user_cfg": 420, "op_user_cfg": 420, "op_user_cfg_modifi": 420, "build_slave_faker_model": 420, "slave": [420, 570], "virtual": [420, 559], "classregist": 420, "fun": 421, "attribute1": 421, "module_debug_level1": 421, "function1": 421, "param1": 421, "param2": 421, "parameter1": 421, "parameter2": 421, "function2": 421, "pep": 421, "484": [421, 573], "output_model": [421, 519, 542, 544, 568], "function3": 421, "section": [421, 484, 504, 505, 506, 539, 542, 545, 558, 560, 564, 572], "restructuredtext": 421, "liter": 421, "generator1": 421, "example_gener": 421, "exampleclass": 421, "param3": 421, "public": [421, 476, 534, 537], "attr1": 421, "attr2": 421, "attr5": 421, "api_doc_exampl": 422, "op_valu": 433, "staticquantconfig": [433, 435], "layer_class": 433, "parse_to_keras_tune_cfg": 433, "calib_iter": [433, 437, 483], "static_quantize_entri": 433, "weight_dtyp": [435, 450], "weight_sym": [435, 450], "weight_granular": 435, "per_tensor": [435, 483, 484, 511, 561, 572], "act_dtyp": [435, 450], "act_sym": 435, "act_granular": 435, "get_all_registered_config": 435, "base_config": [435, 437, 457], "parse_config_from_dict": 435, "config_dict": 435, "get_default_static_quant_config": 435, "quantize_model": 437, "register_algo": [438, 460], "algos_map": [438, 460], "example_algo": [438, 460], "rtnconfig": [438, 443, 450, 460], "dump_elapsed_tim": [438, 472, 482], "customized_msg": [438, 472], "elaps": [438, 472], "dataloader_len": [440, 450], "apply_gptq_quant": 440, "configs_map": [440, 443], "rtn_quantize_entri": 443, "device_typ": 444, "_dtype": 444, "cache_en": 444, "manag": [444, 461, 464, 519, 522, 523, 533], "region": [444, 567], "chosen": [444, 483, 500], "enter": [444, 533, 539, 547], "half": [444, 520, 530], "hpu": [444, 450], "float8_e4m3fn": [444, 450], "autocastmodel": 444, "affect": [444, 567], "dataparallel": 444, "distributeddataparallel": 444, "torch_dtyp": [444, 484], "tune_config": [449, 483], "base_tun": 449, "run_fn": [449, 457], "run_arg": [449, 457], "weight_bit": [450, 483], "weight_group_s": 450, "double_quant_dtyp": 450, "double_quant_bit": 450, "double_quant_sym": 450, "double_quant_group_s": 450, "get_default_rtn_config": 450, "gptqconfig": 450, "act_ord": 450, "get_default_gptq_config": 450, "fp8qconfig": 450, "dtype_rang": 450, "act_algo": 450, "fp8": [450, 481, 559], "quantize_dynam": 457, "carri": [457, 558], "mutat": 457, "loop": [461, 478, 479, 483, 484, 511, 549, 566, 570], "compressionmanag": 461, "deal": 461, "pruningconfig": 461, "orchestr": [461, 481, 514, 571], "on_train_begin": [461, 478, 505, 506, 519, 557, 558, 561], "train_loop": [461, 519, 557], "on_epoch_begin": [461, 464, 505, 506, 519, 557], "on_step_begin": [461, 464, 505, 506, 519, 557, 558], "on_after_compute_loss": [461, 505, 506, 519, 557], "on_before_optimizer_step": [461, 505, 506, 519, 557, 558], "on_step_end": [461, 464, 505, 506, 519, 557], "on_epoch_end": [461, 464, 505, 506, 519, 557], "on_train_end": [461, 505, 506, 519, 557, 558, 561], "path_to_sav": 461, "top1": [461, 518, 541, 558, 561, 573], "callbacks_list": 461, "layerhistogramcollector": 462, "layer_tensor": 462, "include_lay": 462, "get_func_from_config": 464, "func_dict": 464, "get_preprocess": 464, "get_metr": 464, "get_postprocess": 464, "get_algorithm": 464, "create_dataset": 464, "cfg_preprocess": 464, "cfg_filter": 464, "create_dataload": 464, "dataloader_cfg": 464, "create_eval_func": 464, "postprocess_cfg": 464, "fp32_baselin": [464, 482], "baselin": [464, 566, 567, 568], "create_train_func": 464, "train_cfg": 464, "Their": 464, "auxiliari": 465, "optimizedmodel": 467, "from_pretrain": [467, 519], "save_for_huggingface_upstream": [467, 519], "saved_dir": [467, 564], "register_neural_insights_workload": 469, "workload_loc": [469, 472], "workload_mod": 469, "workload_nam": 469, "uuid": 469, "update_neural_insights_workload": 469, "workload_uuid": 469, "update_neural_insights_workload_accuracy_data": 469, "baseline_accuraci": 469, "optimized_accuraci": 469, "get_model_path": 469, "is_int8_model": 471, "load_weight_onli": 471, "checkpoint_dir": 471, "history_cfg": 471, "best_configur": 471, "best_model_weight": 471, "snapshot": [471, 543], "recover_model_from_json": 471, "json_file_path": 471, "cfg_from_fil": 472, "yaml_fil": [472, 502, 507], "lazyimport": 472, "lazi": 472, "till": [472, 570], "time_limit": 472, "get_siz": 472, "seen": [472, 482], "compute_spars": 472, "fault_tolerant_fil": 472, "equal_dict": 472, "d2": 472, "compare_kei": 472, "ignore_kei": 472, "ignor": [472, 500, 502, 564, 567, 570], "cpuinfo": 472, "combine_histogram": 472, "old_hist": 472, "old": [472, 519, 565], "get_tensor_histogram": 472, "get_all_fp32_data": 472, "get_tuning_histori": 472, "tuning_history_path": 472, "offlin": [472, 476, 519, 561, 567], "str2arrai": 472, "dequantize_weight": 472, "weight_tensor": 472, "min_filter_tensor": 472, "max_filter_tensor": 472, "scale_info": 472, "captureoutputtofil": 472, "tmp_file_path": 472, "stream": [472, 573], "sy": [472, 525], "stderr": 472, "captur": 472, "statist": [472, 473], "header": [472, 510], "field_nam": 472, "output_handl": 472, "printer": 472, "global_st": 472, "load_data_from_pkl": 472, "pkl": [472, 543], "dump_data_to_loc": 472, "show_memory_info": 472, "hint": 472, "dump_class_attr": 472, "compare_object": 472, "obj1": 472, "obj2": 472, "ignore_attr": 472, "comparison": [472, 564, 565, 568], "alias_param": 472, "param_nam": 472, "param_alia": 472, "alias": 472, "print_tabl": 472, "column_map": 472, "table_entri": 472, "titl": [472, 516, 540, 570], "insert_newlin": 472, "prettyt": 472, "column": [472, 564, 567], "handler": [472, 570], "row": [472, 504, 542, 567], "decim": 472, "get_tensors_info": 472, "get_weights_detail": 472, "weightdetail": 472, "dump_tabl": 472, "file_typ": 472, "csv": [472, 479, 542, 543], "dump_table_to_csv": 472, "get_number_of_socket": 472, "platform": [472, 481, 514, 522, 530, 549, 559, 561], "opentri": 472, "activation_min": 472, "activation_max": 472, "print_op_list": 472, "get_op_list": 472, "minmax_file_path": 472, "input_model_tensor": 472, "optimized_model_tensor": 472, "activation_min_max": 472, "calculate_ms": 472, "mse_metric_gap": 472, "fp32_tensor": 472, "dequantize_tensor": 472, "euclidean": [472, 505], "distanc": [472, 505], "check_key_exist": 472, "weightsdetail": 473, "input_tensor_data": 473, "optimized_tensor_data": 473, "weightsstatist": 473, "welcom": [475, 476, 477, 481, 541, 548, 574], "interest": [476, 481, 541, 568], "foster": 476, "particip": [476, 549], "commun": [476, 541], "harass": 476, "experi": [476, 522, 544, 566, 567, 570], "everyon": 476, "regardless": 476, "ag": 476, "bodi": 476, "ethnic": 476, "characterist": 476, "gender": 476, "educ": 476, "socio": 476, "econom": 476, "race": 476, "religion": 476, "sexual": 476, "orient": 476, "contribut": [476, 481, 558], "inclus": 476, "Being": 476, "viewpoint": 476, "gracefulli": 476, "focus": [476, 482], "empathi": 476, "toward": [476, 505], "member": [476, 482], "unaccept": 476, "imageri": 476, "unwelcom": 476, "troll": 476, "insult": 476, "derogatori": 476, "polit": 476, "attack": 476, "privat": 476, "publish": [476, 516, 517, 520, 540, 567], "electron": 476, "explicit": 476, "permiss": 476, "inappropri": 476, "profession": 476, "clarifi": 476, "appropri": [476, 500, 567], "fair": 476, "action": [476, 534, 537], "edit": 476, "reject": 476, "commit": [476, 477], "wiki": 476, "ban": 476, "temporarili": 476, "deem": 476, "threaten": 476, "offens": 476, "harm": 476, "mail": 476, "social": [476, 559], "media": [476, 559], "account": [476, 566, 570], "appoint": 476, "onlin": [476, 566], "event": [476, 568], "abus": 476, "report": [476, 477, 481, 549, 566], "contact": [476, 565, 566], "complaint": 476, "review": [476, 477, 481, 559], "investig": [476, 544], "circumst": [476, 560], "oblig": [476, 545], "confidenti": [476, 541], "regard": [476, 563], "incid": 476, "good": [476, 561, 570], "faith": 476, "repercuss": 476, "leadership": 476, "faq": [476, 481], "page": [476, 477, 541, 544, 545], "send": [477, 483], "view": [477, 481, 508, 530, 539, 545, 565], "star": 477, "repositori": [477, 534, 537], "button": [477, 514, 533, 539], "fork": [477, 534, 537], "clone": [477, 504, 515, 532, 536, 541, 543, 544, 546, 547], "pc": 477, "git": [477, 504, 510, 515, 541, 543, 544, 546, 547], "modif": [477, 482, 511, 527, 546], "checkout": 477, "my": 477, "push": [477, 558, 564, 567], "cover": [477, 509, 513, 559], "would": [477, 519, 543, 558, 561, 567], "adopt": [477, 522, 558, 559, 567], "certif": [477, 541], "agre": 477, "pr": [477, 501, 518, 534, 537, 565], "At": [477, 483, 545, 549, 570], "approv": 477, "solv": [477, 561, 565], "licens": 477, "azur": [477, 481, 559], "devop": 477, "ci": 477, "cloud": [477, 481, 549, 559], "deploi": [477, 505, 519, 545, 549, 564, 570], "e16": 477, "v5": 477, "scan": [477, 481], "pylint": 477, "bandit": 477, "copyright": [477, 516], "docstyl": 477, "spellcheck": 477, "dco": 477, "pytest": 477, "No": [477, 510, 519, 547, 548, 559], "failur": [477, 478], "fault": 477, "coverag": 477, "runtim": [477, 481, 482, 483, 485, 501, 504, 508, 511, 514, 520, 524, 529, 530, 560, 564, 565, 570], "submit": [477, 546, 549, 559], "bug": [477, 481], "intend": 477, "safe": 477, "collabor": [477, 481, 524, 530], "adher": 477, "toolkit": [478, 515, 522, 530, 559, 571], "tracer": 478, "resolv": [478, 480], "floatfunct": 478, "cat": [478, 509, 525, 552, 553, 554], "done": [478, 505, 506, 523, 539, 548, 552, 553, 558, 561], "10004": [478, 479, 482, 501, 505, 506, 507, 511, 514, 520, 557, 560, 562, 564, 572], "neural_compressor": [478, 479, 481, 484, 499, 501, 502, 504, 505, 506, 507, 509, 512, 513, 518, 519, 520, 521, 541, 542, 556, 557, 558, 560, 561, 562, 563, 565, 566, 567, 569, 570, 572], "eval": [478, 501, 504, 522, 561, 568], "conduct": [478, 519, 527, 539, 570, 571], "imper": 478, "therefor": [478, 519, 542, 544, 558, 561, 562, 565, 567], "lot": [478, 544, 567], "As": [478, 483, 501, 505, 518, 519, 533, 544, 558, 564, 570], "successfulli": [478, 507, 548, 552, 553, 554, 559], "suggest": [478, 566], "traceabl": 478, "proxi": 478, "tutori": [478, 530, 559, 571], "prototyp": 478, "html": [478, 481, 483, 500, 507, 514, 534, 537, 540, 542, 548, 552, 561], "highlight": 478, "untrac": 478, "ssd": [478, 509, 573], "resnet34": [478, 573], "r34": 478, "bboxes_labels_scor": 478, "prob": 478, "45": [478, 573], "max_output": 478, "zip": [478, 548, 552, 553], "dbox": 478, "dlabel": 478, "dscore": 478, "decode_singl": 478, "autom": [479, 522, 539, 540, 559, 567], "artifici": 479, "ann": 479, "par": [479, 549], "outperform": 479, "propos": [479, 482, 505, 520, 564, 567], "potenti": [479, 504], "lie": [479, 500], "predictor": 479, "shown": [479, 501, 504, 505, 518, 519, 533, 542, 544, 556, 557, 558, 562, 567, 570], "figur": [479, 532, 533, 536, 562], "popul": 479, "inner": 479, "evolutionari": 479, "until": [479, 483, 570], "conclud": 479, "met": [479, 511, 561, 568], "yet": [479, 534, 537, 540, 547, 561], "simplest": [479, 500, 525], "launcher": [479, 481, 505, 506, 530, 571], "agent": 479, "nsga2": 479, "supernet": 479, "ofa_mbv3_d234_e346_k357_w1": 479, "acc": [479, 549, 558, 568, 573], "mac": [479, 540], "num_ev": 479, "250": [479, 558], "results_csv_path": 479, "search_result": 479, "dataset_path": 479, "ilsvrc2012": 479, "aim": [479, 481, 517, 522, 558, 567, 570, 571], "mobilenetv3": 479, "lt": [479, 502, 573], "wmt": 479, "en": 479, "de": 479, "guidelin": [480, 481], "mainstream": [481, 571], "workflow": [481, 483, 484, 504, 505, 509, 515, 520, 534, 537, 541, 568, 571], "particular": [481, 558, 564], "wide": [481, 508, 520, 558, 561, 573], "hardwar": [481, 482, 505, 514, 519, 539, 558, 559, 560], "xeon": [481, 515, 516, 517, 520, 559, 561, 563, 573], "scalabl": [481, 515, 517, 520, 559, 561, 563], "processor": [481, 517, 520, 547, 559, 561, 563], "flex": [481, 515], "amd": [481, 515, 573], "arm": [481, 514, 515, 573], "nvidia": [481, 500, 514, 515, 573], "llama2": 481, "falcon": [481, 517, 558, 567, 573], "j": [481, 517, 543, 558, 567, 573], "bloom": [481, 558, 567, 573], "broad": [481, 514, 528, 571], "stabl": [481, 515, 558, 559], "diffus": [481, 559], "vision": [481, 509, 526, 567], "coder": [481, 514, 523, 524, 527, 530, 533, 546, 550, 559], "marketplac": [481, 540, 559], "googl": [481, 520, 559], "amazon": [481, 522, 530], "web": [481, 541, 547, 552, 553, 554, 568], "servic": [481, 539, 546, 559], "softwar": [481, 516, 558, 559, 565], "alibaba": [481, 529, 536, 537, 559], "tencent": [481, 559], "taco": [481, 559], "oliv": [481, 559], "ai": [481, 522, 559, 563, 571], "ecosystem": [481, 559], "lightn": [481, 529], "pip": [481, 504, 507, 510, 512, 515, 524, 527, 532, 534, 536, 537, 541, 542, 543, 544, 565], "wget": [481, 504, 510, 512, 541, 544], "googleapi": [481, 512, 541, 544], "v1_6": [481, 512, 541, 544], "mobilenet_v1_1": [481, 512, 541, 552], "0_224_frozen": [481, 512, 541, 552], "overview": [481, 570], "jupyterlab": [481, 522, 528, 530, 532, 536, 571], "studio": [481, 530, 539, 549, 571], "topic": 481, "int4": [481, 517, 561, 573], "innov": [481, 530, 559], "blog": [481, 559], "oct": [481, 559], "emnlp": [481, 559], "teq": [481, 559, 562, 564], "sep": [481, 559], "neurip": [481, 559], "quala": [481, 559], "minilm": [481, 559, 573], "releas": [481, 515, 528, 530, 532, 536, 538, 550, 553, 554, 574], "legal": [481, 574], "request": [481, 547, 548, 549, 552, 553, 554, 561], "ask": [481, 515], "email": 481, "research": [481, 516, 567, 573], "idea": [481, 541, 558, 567, 570], "discord": 481, "join": [481, 542, 547, 552, 553], "technic": 481, "discuss": 481, "wechat": [481, 559], "img": 481, "bridg": [482, 483, 514], "vanilla": [482, 483, 514], "abcadaptor": 482, "__init__": [482, 501, 502, 518, 570], "query_fw_cap": [482, 484], "query_fused_pattern": 482, "he": 482, "besid": [482, 505, 544, 564], "describ": [482, 484, 504, 511, 541, 568], "past": [482, 564], "mainten": 482, "difficult": [482, 567], "abil": [482, 483, 502, 511, 567], "fragment": 482, "scenario": [482, 499, 505, 519, 558, 564], "granular": [482, 483, 484, 511, 514, 525, 561, 567, 572], "semant": [482, 511], "mla": [482, 520, 561], "becom": [482, 509, 558, 564], "explor": 482, "inspect_tensor": 482, "op_list": [482, 568], "iteration_list": 482, "inspect_typ": 482, "save_to_disk": 482, "quantization_cfg": 482, "set_tensor": 482, "tensor_dict": 482, "diagnosis_help": 482, "fw": 483, "outlin": [483, 484], "instruct": [483, 484, 505, 515, 520, 534, 537, 541, 542, 543, 544, 558, 559, 560, 561, 567, 573], "extend": [483, 484], "accommod": [483, 484], "incorpor": [483, 484, 506, 558, 570], "give": [483, 539, 570], "diagram": [483, 484, 504, 570], "illustr": [483, 484, 506, 570], "sequencediagram": [483, 484, 549], "autonumb": [483, 484], "query_framework_cap": 483, "opwis": 483, "optypewis": 483, "travers": [483, 484, 564, 570], "\u2776": 483, "\u2777": 483, "\u2778": 483, "\u2779": 483, "\u277a": 483, "\u277b": 483, "\u277c": 483, "These": [483, 514, 542], "chapter": 483, "node_op": 483, "confirm": 483, "int8_conv_config": 483, "optype_wise_": 483, "tuning_cfg_to_fw": 483, "Its": [483, 500, 558], "dispatch": [483, 514, 546, 549], "is_perchannel": 483, "is_asymmetr": 483, "convert_bf16": 483, "somewhat": 483, "distort": 483, "line": [483, 507, 514, 522, 527, 528, 547, 568], "explain": [484, 504, 567], "let": [484, 511, 527, 558, 560, 572], "overal": [484, 547, 572], "drive": 484, "uint4": 484, "kullback": [484, 505], "leibler": [484, 505], "pytorch_cpu": 484, "1_11_capabl": 484, "cap_s8_1_11": 484, "cap_s8_1_11_conv1d": 484, "per_channel_symmetr": 484, "addition": [484, 507, 558, 570], "per_tensor_symmetr": 484, "due": [484, 509, 558, 561, 567, 568], "nativ": 484, "with_arg": 484, "qscheme": 484, "quant_min": 484, "quant_max": 484, "linux": [499, 510, 515, 533, 539], "x86_64": 499, "aarch64": 499, "prove": [500, 564, 567], "benefici": 500, "uniform": [500, 564], "\u03b2": 500, "\u03b1": 500, "fundament": [500, 519], "primari": [500, 570], "focu": [500, 570], "essenti": [500, 510], "remaind": 500, "enhanc": [500, 522, 558, 559, 563], "resolut": 500, "extrem": 500, "still": [500, 519, 545, 559, 561, 563], "retain": 500, "noteworthi": 500, "vanhouck": 500, "vincent": 500, "andrew": 500, "senior": 500, "mark": 500, "mao": 500, "speed": [500, 519, 530, 558, 559, 561, 570], "2011": 500, "szymon": 500, "migacz": 500, "2017": 500, "mckinstri": 500, "jeffrei": 500, "l": [500, 505, 568, 570], "discov": [500, 568], "1809": 500, "04191": 500, "2018": 500, "encount": 501, "consum": 501, "previous": 501, "lack": [501, 510], "faster": [501, 503, 509, 559, 570, 573], "Of": 501, "evenli": 501, "divid": [501, 549, 567, 570], "discard": 501, "throw": 501, "awai": 501, "draw": [501, 566, 570], "subprocess": 501, "pin": [501, 532, 536], "reshuffl": 501, "manner": [501, 505, 521], "newdataload": 501, "customis": [501, 502, 518], "ensp": [502, 569], "imagerecord": [502, 507, 572], "image_nam": 502, "cocorecord": 502, "gt": [502, 567, 569], "int64": 502, "offer": 502, "style_transf": 502, "content": [502, 547, 548, 552, 553, 554], "tfrecorddataset": 502, "labelbal": 502, "300": [502, 558, 573], "16": [502, 515, 552, 564, 573], "helloworld": [502, 520, 569], "aid": 503, "deploy": [503, 522, 539, 559, 562, 567], "infrastructur": 503, "diagnos": 504, "gui": [504, 514, 544, 558], "termin": [504, 532, 533, 536, 542], "repeat": [504, 570], "durat": [504, 548, 552, 553, 566], "cd": [504, 507, 515, 541, 543, 544, 546, 547, 552, 553, 554], "setup": [504, 511, 515, 534, 537, 541, 543, 544, 546, 547, 558], "ilsvr2012": 504, "caff": 504, "berkeleyvis": 504, "caffe_ilsvrc12": 504, "xvzf": 504, "image_recognit": [504, 544, 568], "resnet50_torchvis": 504, "ptq_static": [504, 543], "resnet50_v1": [504, 507, 519], "dataset_loc": [504, 544, 552, 568], "label_path": 504, "quantiti": 504, "vec": 504, "frac": [504, 567], "sigma": 504, "var": 504, "happen": 504, "dispers": [504, 542], "v0": [504, 544, 567, 568], "cg": [504, 544, 568], "conv0": [504, 544, 568], "expens": [505, 519, 570], "mobil": [505, 519, 573], "produc": 505, "logit": 505, "softmax": 505, "kd": 505, "patient": 505, "compact": [505, 519, 525, 558], "agnost": 505, "resourc": [505, 546, 549, 570], "convolut": [505, 559], "ia": 505, "attach": [505, 519, 567], "shallow": 505, "deepest": 505, "deeper": 505, "10006": [505, 506], "student_output": [505, 506], "student_loss": [505, 506], "training_func_for_nc": [505, 506], "distil_loss_conf": 505, "accordingli": [505, 530, 567], "promis": [506, 519, 558], "huge": [506, 544, 558, 562], "heavi": 506, "light": 506, "booster": 506, "degrad": [506, 558, 570], "novel": [506, 522, 533, 539], "comb": 506, "distillation_criterion": [506, 519, 557], "q_conf": 506, "horovod": 507, "instal": [507, 510, 512, 522, 524, 527, 530, 534, 537, 539, 540, 542, 543, 544, 574], "program": [507, 516, 522, 539], "enable_eager_execut": 507, "yaml_file_path": 507, "pre_process": 507, "simpli": [507, 521, 522, 524, 527, 539, 547], "evaluation_result": 507, "evaluation_time_cost": 507, "partit": [507, 558], "distributedsampl": 507, "train_sampl": 507, "train_dataset": [507, 561], "num_replica": 507, "rank": 507, "train_load": 507, "train_kwarg": 507, "adadelta": 507, "distributedoptim": 507, "named_paramet": 507, "broadcast_paramet": 507, "root_rank": 507, "broadcast_optimizer_st": 507, "set_epoch": 507, "batch_idx": 507, "nll_loss": 507, "log_interv": 507, "0f": 507, "tloss": 507, "6f": 507, "dry_run": 507, "test_func": 507, "host": [507, 547, 549, 552, 553, 554], "num_of_process": 507, "002": 507, "ssh": [507, 539], "prompt": 507, "readm": [507, 552], "exactli": [507, 523], "recognit": [507, 509, 558, 568], "resizecropimagenet": [507, 569], "realiz": [507, 556, 563, 566], "tow": 507, "node1": [507, 552, 553], "node2": [507, 552, 553], "TO": [507, 524, 544], "your_node1_nam": 507, "your_node2_nam": 507, "resnet50_fp32_pretrained_model": 507, "nc_resnet50_v1": 507, "resnet": [507, 573], "varieti": [508, 560, 570], "demonstr": [508, 522, 552, 553, 554, 568], "speedup": [508, 514, 561], "2x": [508, 514], "vnni": [508, 514, 560, 561], "exchang": 509, "hope": 509, "inc_model": [509, 521], "fp32_onnx_config": 509, "verifi": [509, 517], "vgg16": [509, 573], "mobilenet": [509, 566, 573], "rcnn": 509, "torchscript": [509, 562, 567], "unsupport": [509, 519, 558], "add_relu": 509, "conv1d_relu": 509, "conv2d_relu": 509, "group_norm": 509, "hardswish": 509, "instance_norm": 509, "layer_norm": 509, "leaky_relu": 509, "sigmoid": 509, "toolchain": [510, 559], "bare": 510, "metal": 510, "sudo": [510, 525], "apt": [510, 515, 525, 533], "python3": 510, "dev": [510, 532, 536], "distutil": 510, "libgl1": 510, "mesa": 510, "glx": 510, "libglib2": 510, "ln": 510, "sf": 510, "usr": 510, "incompat": 510, "88": [510, 566, 573], "80": [510, 562, 568, 573], "pyobject": 510, "reinstal": 510, "libgl": 510, "yum": [510, 515], "opencv": [510, 515, 533], "conda": [510, 515, 525, 533, 552, 553, 554, 565], "13": [510, 515, 541, 565, 567], "pend": [510, 548], "sqlalchemi": 510, "27": [510, 573], "alemb": 510, "forg": [510, 515], "quick": [511, 520, 558, 571, 572], "friendli": [511, 519, 559, 567, 571, 572], "dive": [511, 571], "purpos": [511, 520, 539, 541, 560, 561], "syntax": 511, "go": [511, 534, 537, 545, 560, 564, 569], "up1": 511, "up2": 511, "valid_mixed_precis": 511, "addn": 511, "grappler_optim": 511, "constfold": 511, "arithmet": 511, "debug_stripp": 511, "major": [513, 544, 561, 567], "concept": [513, 566, 571], "rather": [513, 564], "custom_metr": 513, "refin": [513, 558], "420": 514, "geomean": 514, "snippet": 514, "upload": [514, 534, 537], "click": [514, 522, 523, 530, 533, 539, 544, 559, 568], "qintegerop": [514, 561], "plan": 514, "oneapi": [515, 559, 571], "analyt": [515, 559, 571], "success": [515, 541], "11": [515, 518, 520, 541, 567, 570, 573], "frequent": 515, "pypi": [515, 534, 537], "nightli": 515, "headless": [515, 533], "fastai": 515, "esri": 515, "consolid": 515, "latest": [515, 559, 565], "eas": [515, 524, 559], "along": [515, 558, 564], "streamlin": [515, 546, 559], "scienc": 515, "websit": 515, "anaconda": [515, 546, 547], "suit": [515, 540, 568], "formerli": 515, "skylak": 515, "cascad": 515, "lake": [515, 520, 559], "cooper": [515, 520, 559], "ic": [515, 559], "sapphir": [515, 517], "rapid": [515, 517], "hbm": 515, "arctic": 515, "sound": 515, "pont": 515, "vecchio": 515, "cento": [515, 573], "ubuntu": 515, "22": [515, 573], "04": [515, 573], "maco": 515, "ventura": 515, "fortensorflow": 515, "forpytorch": 515, "12": [515, 541, 573], "tf_enable_onednn_opt": 515, "onednn": [515, 520, 561], "newer": 515, "subject": 516, "accompani": [516, 570], "wish": 516, "bibtex": 516, "author": 516, "feng": 516, "tian": 516, "hanwen": 516, "haihao": [516, 558], "shen": [516, 558], "suyu": 516, "chen": 516, "howpublish": 516, "year": 516, "logo": 516, "atom": 516, "phi": 516, "pentium": 516, "vtune": 516, "corpor": 516, "subsidiari": 516, "brand": 516, "claim": 516, "sq": [517, 567], "woq": 517, "4th": [517, 559, 561], "gen": [517, 520, 559, 561, 563], "codenam": [517, 520], "quickli": [517, 570, 571], "eleutherai": [517, 543, 567, 573], "6b": [517, 543, 567, 573], "facebook": [517, 545, 567, 573], "3b": [517, 567], "30b": [517, 567, 573], "llama": [517, 558, 559, 562, 564, 567, 573], "7b": [517, 567, 573], "13b": [517, 567, 573], "70b": [517, 573], "tiiuae": [517, 567, 573], "40b": 517, "soon": 517, "popularli": 518, "industri": [518, 559], "label_map": 518, "decis": 518, "ap": 518, "curv": 518, "turn": [518, 533, 562], "target_boxes_num": 518, "str_label": 518, "int_label": 518, "inturn": 518, "cocomap": 518, "vocmap": 518, "categor": 518, "multiclass": 518, "multilabel": 518, "newmetr": 518, "reset": 518, "reflect": [518, 569], "new_metr": 518, "deliv": [519, 559, 565], "conveni": [519, 546], "upgrad": 519, "veri": [519, 540, 544, 561, 564, 570, 571], "comprehens": [519, 571], "resort": 519, "automodelforsequenceclassif": 519, "autotoken": 519, "val_dataset": [519, 561], "val_dataload": [519, 561], "worker": [519, 549, 552, 553, 554, 561], "ping_memori": [519, 561], "formul": 519, "effort": 519, "onnxrt_integ": [519, 572], "onnxrt_qlinear": [519, 572], "image_tensor": [519, 572], "post_training_dynamic_qu": [519, 560, 570], "1000": [519, 548, 572], "2000": 519, "sampling_s": [519, 572], "model_wis": [519, 572], "op_dict": 519, "op_wis": [519, 568, 572], "sigopt_api_token": [519, 566, 570], "sigopt_project_id": [519, 566, 570], "sigopt_experiment_nam": [519, 566, 570], "demo": 519, "600": 519, "training_arg": 519, "emul": [519, 561], "trainer": [519, 530], "briefli": [519, 567], "pruning_func": 519, "train_dataload": [519, 558, 561], "n_gpu": 519, "gradient_accumulation_step": 519, "clip_grad_norm_": 519, "max_grad_norm": 519, "start_epoch": [519, 560, 572], "end_epoch": [519, 560, 572], "97": [519, 573], "newli": [519, 558], "on_after_optimizer_step": [519, 558], "layer3": [519, 558], "0004": 519, "randomresizedcrop": [519, 569], "totensor": [519, 569], "485": 519, "456": [519, 573], "406": [519, 573], "nepoch": 519, "cnt": 519, "loss_sum": 519, "iter_bar": 519, "desc": 519, "teacher_logit": 519, "train_fun": 519, "training_func": 519, "recent": [519, 520], "growth": [519, 520, 558], "complex": [519, 520, 558], "significantli": [519, 520, 542, 544, 558, 570], "bandwidth": [519, 520, 564], "exit_polici": [519, 572], "determinist": 519, "meaning": [519, 557], "reli": [519, 567], "prune_conf": 519, "quantization_aware_training_conf": 519, "aforement": 519, "inset": 519, "p_conf": [519, 557], "ssd_mobilenet_v1": 519, "benchmarkconf": 519, "sixteen": 520, "launch": [520, 540, 545], "3rd": [520, 559, 561, 563], "boost": [520, 523, 539, 558, 559], "x86": 520, "avx512": [520, 561], "vcvtne2ps2bf16": 520, "vcvtneps2bf16": 520, "vdpbf16p": 520, "fbgemm": [520, 561], "tensorrtexecutionprovid": [520, 561], "cudaexecutionprovid": [520, 561], "dnnlexecutionprovid": [520, 561], "avx512_bf16": 520, "plu": 520, "resnet18": [520, 524, 573], "persist": 521, "brought": [521, 523, 530, 561], "tf2": 521, "h5": 521, "hybridblock": 521, "0000": 521, "saved_result": [521, 543, 564], "simplifi": [522, 533, 539, 558, 559], "acquir": 522, "analysi": [522, 539, 558, 566], "heurist": [522, 539], "great": 522, "facilit": 522, "autocast": 522, "my_model": 522, "no_grad": 522, "memory_format": 522, "112": 522, "plugin": [522, 540], "aw": [522, 530, 549, 559, 573], "sagemak": [522, 530], "neural_cod": [522, 524, 526, 527, 528, 530], "bench": 522, "superbench": 522, "enjoi": [523, 527, 530], "reload": [523, 540, 542, 545], "modern": [524, 564], "democrat": [524, 559], "programm": [524, 530, 539], "nano_bf16_channels_last": 524, "nano_bf16_ipex_channels_last": 524, "nano_bf16_ipex": 524, "nano_bf16": 524, "nano_fp32_channels_last": 524, "nano_fp32_ipex_channels_last": 524, "nano_fp32_ipex": 524, "nano_gpu_to_cpu": 524, "nano_int8": 524, "nano_jit_bf16_channels_last": 524, "nano_jit_bf16_ipex_channels_last": 524, "nano_jit_bf16_ipex": 524, "nano_jit_bf16": 524, "nano_jit_fp32_channels_last": 524, "nano_jit_fp32_ipex_channels_last": 524, "nano_jit_fp32_ipex": 524, "nano_jit_fp32": 524, "nano_onnxruntime_fp32": 524, "nano_onnxruntime_int8_qlinear": 524, "openvino": 524, "nano_openvino_fp32": 524, "nano_openvino_int8": 524, "bc": [525, 533], "conda_prefix": 525, "echo": 525, "tradit": [525, 558], "libjemalloc": 525, "libiomp5": 525, "home": 525, "lib": 525, "ld_preload": 525, "malloc_conf": 525, "oversize_threshold": 525, "background_thread": 525, "metadata_thp": 525, "dirty_decay_m": 525, "9000000000": 525, "muzzy_decay_m": 525, "kmp_affin": 525, "kmp_blocktim": 525, "dnnl_primitive_cache_capac": 525, "governor": 525, "cpufreq": 525, "scaling_governor": 525, "powersav": 525, "tee": 525, "pytorch_jit_script": [526, 529], "pytorch_channels_last": [526, 529], "run_bench": 526, "patch": [526, 539], "patch_path": 526, "your_patch_path": 526, "sweep": 526, "sweep_object": 526, "bench_config": 526, "bench_featur": 526, "sai": 527, "run_glu": [527, 528, 550, 553, 554], "requisit": 527, "task_nam": [527, 528, 550, 553, 554], "do_ev": [527, 528, 543, 550, 553, 554], "itself": [527, 558], "run_glue_optim": 527, "static_ipex": 527, "auto_qu": 528, "v4": [528, 550, 553, 554, 573], "albert": [528, 573], "sst2": 528, "alexnet": [528, 573], "pytorch_amp": 529, "optimize_for_infer": 529, "pytorch_jit_trac": 529, "pytorch_jit_script_ofi": 529, "pytorch_jit_trace_ofi": 529, "torchdynamo": 529, "pytorch_torchdynamo_jit_script": 529, "pytorch_torchdynamo_jit_trac": 529, "pytorch_torchdynamo_jit_script_ofi": 529, "pytorch_torchdynamo_jit_trace_ofi": 529, "pytorch_inc_bf16": 529, "pytorch_inc_static_quant_fx": 529, "pytorch_inc_static_quant_ipex": 529, "pytorch_inc_static_quant_ipex_xpu": 529, "pytorch_inc_dynamic_qu": 529, "pytorch_ipex_fp32": 529, "pytorch_ipex_bf16": 529, "pytorch_ipex_int8_static_qu": 529, "pytorch_ipex_int8_dynamic_qu": 529, "blade": 529, "disc": 529, "pytorch_aliblad": 529, "pytorch_lightning_bf16_cpu": 529, "tensorflow_amp": 529, "keras_amp": 529, "tensorflow_inc": 529, "keras_inc": 529, "onnx_inc_static_quant_qlinear": 529, "onnx_inc_static_quant_qdq": 529, "onnx_inc_dynamic_qu": 529, "optimum": [529, 530, 542, 564], "pytorch_inc_huggingface_optimum_stat": 529, "pytorch_inc_huggingface_optimum_dynam": 529, "intel_extension_for_transform": 529, "bigdl": [529, 530], "nano": [529, 530], "nano_": 529, "inc_auto": 529, "delight": 530, "announc": 530, "500": [530, 548, 573], "jupyt": [530, 532, 533, 536], "isa": 530, "adjust": [530, 561, 567], "delta": 530, "acc_delta": 530, "int8_acc": 530, "fp32_acc": 530, "ext": [532, 534, 536, 537, 538], "lab": [532, 533, 534, 536, 537], "nodej": [532, 536], "jlpm": [532, 536], "yarn": [532, 536], "npm": [532, 533, 536], "lieu": [532, 536], "labextens": [532, 533, 536], "typescript": [532, 536], "watch": [532, 536, 545], "immedi": [532, 536, 558], "refresh": [532, 536], "browser": [532, 536, 541, 545], "wait": [532, 536, 539, 549], "rebuilt": [532, 536], "easier": [532, 536, 539, 541, 559], "symlink": [532, 536], "down": 533, "finish": [533, 549], "blank": 533, "cell": 533, "gain": [533, 557, 559], "mkl": 533, "jemalloc": 533, "pip3": 533, "pyproject": [534, 537], "toml": [534, 537], "twine": [534, 537], "whl": [534, 537], "dist": [534, 537], "sdist": [534, 537], "bdist_wheel": [534, 537], "deprec": [534, 537, 565, 569], "frontend": [534, 537, 547, 554], "login": [534, 537, 566], "cut": [534, 537], "admin_github_token": [534, 537], "pypi_token": [534, 537], "npm_token": [534, 537], "secret": [534, 537], "panel": [534, 537, 539], "draft": [534, 537], "changelog": [534, 537, 538], "pkg": [534, 537], "bot": [534, 537], "pick": [534, 537, 540], "feedstock": [534, 537], "hatch": 537, "notabl": 538, "vscode": [538, 540], "daili": 539, "advantag": [539, 558, 560, 570], "remot": 539, "server": [539, 541, 544, 547, 552, 553, 554], "re": [539, 545, 564], "market": 539, "uninstal": 539, "fill": [539, 566, 569, 570], "upper": 539, "sidebar": 539, "hover": 539, "track": [539, 566], "argpars": 539, "pop": [539, 549], "diff": 539, "manifest": 540, "declar": 540, "palett": 540, "registercommand": 540, "amodio": 540, "tsl": 540, "matcher": 540, "dbaeumer": 540, "eslint": [540, 545], "press": 540, "f5": 540, "ctrl": 540, "hello": 540, "world": 540, "breakpoint": 540, "consol": [540, 545], "relaunch": 540, "toolbar": 540, "node_modul": 540, "viewlet": 540, "dropdown": 540, "runner": [540, 545], "startup": 540, "bundl": 540, "neural_insight": [541, 543, 544], "tl": 541, "ui": 541, "5000": 541, "338174d13706855fc6924cec7b3a8ae8": 541, "listen": 541, "firewal": 541, "8080": 541, "cert": 541, "path_to_cert": 541, "crt": 541, "path_to_private_kei": 541, "encrypt": 541, "expos": 541, "forfeit": 541, "client": [541, 547, 554], "extern": 541, "threat": 541, "diagnost": 541, "skill": 541, "feel": [541, 545], "layoutlmv3": [542, 573], "seqev": 542, "sentencepiec": 542, "timm": 542, "fvcore": 542, "pillow": 542, "einop": 542, "textdist": 542, "setuptool": 542, "cli": 542, "hypjudi": 542, "finetun": [542, 558, 564, 573], "funsd": [542, 573], "calib_dataset": 542, "incdataset": 542, "eval_dataset": 542, "poor": [542, 568], "9049": 542, "2989": 542, "66": [542, 573], "9631": 542, "glob": 542, "panda": 542, "pd": 542, "set_opt": 542, "max_row": 542, "max_column": 542, "getmtim": 542, "activations_t": 542, "weights_tabl": [542, 543], "read_csv": 542, "nweight": 542, "descend": 542, "sorted_data": 542, "sort_valu": 542, "ascend": 542, "evid": 542, "tip": 542, "8981": 542, "7502": 542, "run_clm": 543, "wikitext": [543, 573], "dataset_config_nam": 543, "do_train": 543, "inspect_sav": 543, "inspect_result": 543, "quan": 543, "model_summari": 543, "incept": [544, 573], "v3": [544, 573], "inception_v3": [544, 568], "inceptionv3_fp32_pretrained_model": [544, 568], "bash": [544, 568], "prepare_dataset": 544, "sh": [544, 568], "raw_dir": 544, "img_raw": 544, "delet": [544, 558], "run_tun": 544, "nc_inception_v3": 544, "highest": [544, 550, 570], "satisfactori": 544, "webpag": 544, "spike": 544, "bottom": 544, "chart": [544, 561, 566, 568], "concentr": 544, "toler": 544, "But": 544, "bigger": 544, "bootstrap": 545, "localhost": [545, 547, 552, 553], "3000": 545, "lint": 545, "interact": [545, 566], "correctli": 545, "hash": [545, 548], "readi": [545, 558], "aren": 545, "transit": 545, "webpack": 545, "babel": 545, "tweak": 545, "ever": 545, "curat": 545, "suitabl": 545, "middl": [545, 567], "shouldn": 545, "understand": [545, 561, 568, 571], "wouldn": 545, "couldn": 545, "troubleshoot": 545, "effortlessli": 546, "grpc": [546, 547, 551, 552, 553, 555], "queue": 546, "seamlessli": [546, 558, 570], "mpi": [546, 547, 570], "neural_solut": [546, 547, 552, 553, 554], "task_monitor_port": [547, 552, 553, 554], "22222": [547, 552, 553, 554], "result_monitor_port": [547, 552, 553, 554], "33333": [547, 552, 553, 554], "restful_api_port": [547, 552, 553, 554], "hostfil": [547, 549, 552, 553, 554], "grpc_api_port": [547, 552, 553, 554], "api_typ": [547, 552, 553, 554], "conda_env": [547, 552, 553, 554], "upload_path": [547, 552, 553, 554], "8000": [547, 552, 553, 554], "monitor": [547, 552, 553, 554], "3333": [547, 552, 553, 554], "2222": [547, 552, 553, 554], "ns_workspac": [547, 552, 553, 554], "hf_model": [547, 551, 553, 554], "curl": [547, 548, 552, 553], "task_id": [547, 552, 553, 554], "usernam": 547, "db": [547, 549], "serve_log": [547, 552, 553, 554], "frontend_grpc": 547, "task_log": 547, "task_bdf0bd1b2cc14bc19bce12d4f9b333c7": 547, "task_workspac": 547, "bdf0bd1b2cc14bc19bce12d4f9b333c7": 547, "aliv": 547, "properli": 547, "commonli": [547, 558], "hostnam": 547, "breakdown": 547, "ip": 547, "hous": 547, "host1": [547, 552, 553], "host2": [547, 552, 553], "query_id": 547, "oaa": 548, "host_ip": 548, "task_request": [548, 552, 553, 554], "tuning_info": [548, 552], "optimization_result": [548, 552], "result_path": [548, 552, 553], "closur": 548, "404": [548, 558, 573], "health": 548, "healthi": 548, "quantized_model": [548, 552, 553], "400": [548, 573], "alloc": 549, "incom": 549, "taskmonitor": 549, "cluster": [549, 552, 553, 570], "tasklaunch": 549, "resultmonitor": 549, "receiv": [549, 566], "p1": 549, "notif": 549, "p2": 549, "p3": 549, "mpirun": [549, 570], "perf": 549, "p4": 549, "four": [549, 568, 573], "classdiagram": 549, "taskdb": 549, "get_statu": 549, "update_statu": 549, "task_collect": 549, "append_task": 549, "get_all_pending_task": 549, "update_task_statu": 549, "task_db": 549, "wait_new_task": 549, "schedule_task": 549, "dispatch_task": 549, "launch_task": 549, "query_task_statu": 549, "node_list": 549, "reserve_resourc": 549, "get_node_statu": 549, "gcp": [549, 559], "script_url": [550, 552, 553, 554], "archiv": 550, "tf_example1": [551, 552, 553], "hf_models_grpc": [551, 554], "00173": 552, "01024": 552, "task_request_distribut": 552, "custom_models_optim": 552, "7602cd63d4c849e7a686a8165a77f69d": [552, 553], "151": [552, 573], "8617": 552, "17": [552, 573], "8213": [552, 573], "number_of_socket": [552, 553], "number_of_thread": [552, 553], "cdf419910f9b4d2a8320d0e420ac1d0a": 553, "optimized_result": 553, "58": [553, 573], "3162": 553, "6488": [553, 573], "06": [554, 572, 573], "34": [554, 573], "55": [554, 573], "d3e10a49326449fb9d0d62f2bfc1cb43": 554, "fastapi": 555, "multi_object": 556, "benefit": 557, "instanti": 557, "neuron": 558, "art": 558, "grown": 558, "unpreced": 558, "increasingli": 558, "crucial": 558, "stand": [558, 570], "shrink": 558, "contextu": 558, "scene": 558, "haven": 558, "color": [558, 562], "lowest": [558, 570], "emsp": 558, "downstream": 558, "prone": 558, "co": 558, "discourag": 558, "penal": 558, "parameter": 558, "lightweight": 558, "perceptron": 558, "mlp": 558, "valuabl": [558, 568], "basi": 558, "billion": 558, "dolli": [558, 567, 573], "mpt": [558, 567, 573], "lm": [558, 573], "lamini": [558, 567], "worth": 558, "mention": [558, 564], "tend": 558, "exemplifi": 558, "complement": 558, "fortieth": 558, "miss": [558, 561], "pruner2": 558, "few": [558, 559, 567, 570], "lm_head": 558, "yourself": 558, "uncertain": 558, "auto_config": 558, "quit": 558, "straightforward": [558, 564, 567], "pruning_pattern": 558, "pruning_start": 558, "pruning_end": 558, "sparse_gpt": 558, "embed_out": 558, "card": 558, "hesit": 558, "causal": 558, "clm": 558, "sst": [558, 573], "25": [558, 573], "63": [558, 573], "24": [558, 570, 573], "35": [558, 573], "flan": 558, "t5": [558, 573], "english": 558, "romanian": 558, "381": 558, "yolov5": 558, "75": [558, 573], "2x1": [558, 573], "801": 558, "7895": 558, "signific": [558, 559, 562, 567], "reduct": [558, 562, 572], "namhoon": 558, "lee": 558, "thalaiyasingam": 558, "ajanthan": 558, "philip": 558, "torr": 558, "2019": 558, "zafrir": 558, "ofir": 558, "ariel": 558, "larei": 558, "boudoukh": 558, "mosh": 558, "wasserblat": 558, "2111": 558, "05754": 558, "2021": 558, "kwon": 558, "kim": 558, "mahonei": 558, "hassoun": 558, "keutzer": 558, "gholami": 558, "pp": 558, "24101": 558, "24116": 558, "frantar": [558, 564], "alistarh": 558, "medium": 559, "aug": 559, "juli": 559, "onnxcommunitymeetup2023": 559, "chatbot": 559, "june": 559, "msft": 559, "netflix": 559, "apr": 559, "mlperf": [559, 573], "5x": 559, "heterogen": 559, "mar": 559, "jan": 559, "busi": 559, "amx": 559, "journei": 559, "dec": 559, "mleffici": 559, "deepen": 559, "foundat": 559, "intellig": 559, "vmware": 559, "applianc": 559, "bitnami": 559, "nov": 559, "sota": 559, "plug": 559, "twitter": 559, "linkedin": 559, "zone": 559, "land": 559, "pat": 559, "keynot": 559, "intelon": 559, "chines": 559, "purif": 559, "sacrif": 559, "jun": 559, "partner": 559, "feb": 559, "joint": 559, "bilibili": 559, "gestalt": 559, "ml": 559, "doubl": 559, "abound": 559, "lpot": [559, 565], "nextplatform": 559, "cern": 559, "gan": 559, "3dgan": 559, "iml": 559, "workshop": 559, "asplo": 559, "18": [559, 573], "highli": [559, 564], "intelcaff": 559, "aris": 560, "henc": 560, "onnxrt_qoper": 560, "quant_aware_train": 560, "weight_compress": [560, 572], "initial_spars": [560, 572], "prune_typ": [560, 572], "basic_magnitud": [560, 572], "update_frequ": 560, "prune_domain": 560, "tile_pattern_1x1": 560, "invent": 561, "cost": [561, 564], "theoret": [561, 564], "zeropoint": 561, "255": [561, 567], "overflow": 561, "unseen": 561, "enough": 561, "peopl": 561, "mimic": 561, "fact": 561, "ultim": 561, "pain": 561, "lossi": 561, "philosophi": 561, "neither": 561, "nor": 561, "val_load": 561, "avg": 561, "themselv": 561, "dmlexecutionprovid": 561, "meanwhil": 562, "substanti": 562, "pose": 562, "challeng": 562, "greatli": [562, 564], "constrain": 562, "grei": 562, "blue": 562, "rectangl": 562, "w8a8": [562, 564], "10005": 562, "rtn_arg": [562, 564], "ouput_dir": 562, "fp32_model_path": 562, "int8_model_path": 562, "ON": 563, "forc": 563, "postposttrainingquantconfig": 563, "bf16wrapper": 563, "retrac": 563, "preval": 564, "grow": 564, "demand": 564, "trade": 564, "bottleneck": 564, "roughli": 564, "speak": 564, "capac": [564, 566], "flop": 564, "famou": 564, "approx": 564, "bmm": 564, "100x": 564, "excel": 564, "stai": [564, 567], "quantif": [564, 567], "think": 564, "intuit": [564, 567], "uniformli": 564, "qlora": 564, "invers": 564, "restor": 564, "protect": 564, "inspir": 564, "normalfloat": 564, "e2m1": 564, "bnb": 564, "805": 564, "91": [564, 567, 573], "stabil": 564, "date": 564, "gptq_arg": 564, "use_full_length": 564, "awq_arg": 564, "compressed_model": 564, "omit": 564, "rtn_g32asym": 564, "gptq_g32asym": 564, "gptq_g32asym_disable_last_matmul": 564, "gptq_g128asym": 564, "awq_g32asym": 564, "xiao": [564, 567], "guangxuan": [564, 567], "2211": [564, 567], "10438": [564, 567], "wei": [564, 567], "xiui": [564, 567], "suppress": [564, 567], "2209": [564, 567], "13325": [564, 567], "lin": 564, "ji": 564, "00978": 564, "elia": 564, "dettmer": 564, "tim": 564, "2305": 564, "14314": 564, "site": 565, "sed": 565, "your_script": 565, "backbon": 566, "sigopt_experiment_id": 566, "nc": [566, 570], "suffici": 566, "ordinari": 566, "latenc": [566, 570], "8266": 566, "8372": 566, "2132": 566, "83": [566, 567, 573], "7495": 566, "8299": 566, "8294": 566, "85": [566, 567, 573], "0837": 566, "8291": 566, "4469": 566, "gigant": 567, "systemat": 567, "migrat": [567, 571], "difficulti": 567, "mathemat": 567, "allevi": 567, "coarsest": 567, "finer": [567, 570], "matric": 567, "similarli": 567, "finest": 567, "consumpt": 567, "suppos": 567, "6839": 567, "4741": 567, "7451": 567, "9301": 567, "1742": 567, "6835": 567, "q_min": 567, "q_max": 567, "q_x": 567, "clamp_": 567, "round_": 567, "w_q": 567, "00296431384049356": 567, "59": [567, 573], "172": [567, 573], "192": 567, "w_dq": 567, "2220": 567, "1510": 567, "2420": 567, "2570": 567, "0500": 567, "1890": 567, "mseloss": 567, "1983354538679123": 567, "6848": 567, "4743": 567, "7440": 567, "9308": 567, "1749": 567, "385297635664756e": 567, "07": [567, 572, 573], "quantize_per_channel": 567, "x_tmp": 567, "detach": 567, "keepdim": 567, "dequantize_per_channel": 567, "0029": [567, 573], "0036": 567, "162": [567, 573], "48": [567, 573], "72": [567, 573], "93": [567, 573], "207": 567, "139": [567, 573], "6837": 567, "4734": 567, "1751": 567, "6821": 567, "637690492221736e": 567, "6376e": 567, "3852e": 567, "cdot": 567, "quantize_per_tensor_absmax": 567, "n_bit": 567, "div_": 567, "0806": 567, "7589": 567, "6038": 567, "3815": 567, "5040": 567, "7174": 567, "5444": 567, "5826": 567, "7772": 567, "5555": 567, "3740": 567, "3253": 567, "0698": 567, "1381": 567, "5972": [567, 573], "0086": 567, "0737": 567, "8298": 567, "6883": 567, "2991": 567, "1601": 567, "6506": 567, "8246": 567, "3924": 567, "3845": 567, "8768": 567, "w_scale": 567, "x_q": 567, "x_scale": 567, "84": [567, 573], "120": 567, "0059755356051027775": 567, "89": [567, 573], "119": 567, "57": [567, 573], "006533813662827015": 567, "y_q": 567, "17509": 567, "7608": 567, "4055": 567, "16599": 567, "21020": 567, "10016": 567, "9860": 567, "22444": 567, "y_dq": 567, "6836": 567, "2970": 567, "1583": 567, "6481": 567, "8207": 567, "3911": 567, "3850": 567, "8763": 567, "though": 567, "simplic": 567, "fp1": 567, "fp2": 567, "subsect": [567, 572], "x1": [567, 570], "x2": [567, 570], "herebi": 567, "optdecoderlay": 567, "blockwis": 567, "auto_alpha_arg": 567, "overhead": 567, "hardtanh": 567, "t5norm": 567, "llamanorm": 567, "groupnorm": 567, "lambada": 567, "openai": [567, 573], "sweet": 567, "spot": 567, "bigscienc": [567, 573], "560m": 567, "354": 567, "3542": 567, "1b7": 567, "4634": 567, "4936": 567, "518": 567, "5185": 567, "7b1": [567, 573], "5764": [567, 573], "5977": 567, "bloomz": [567, 573], "3947": 567, "3930": 567, "4828": 567, "4906": 567, "5018": 567, "4980": 567, "5593": [567, 573], "5552": 567, "125m": 567, "379": 567, "3757": 567, "350m": 567, "4516": 567, "4533": 567, "5789": 567, "5742": 567, "6365": 567, "6404": 567, "6769": [567, 573], "6804": [567, 573], "6872": 567, "6814": 567, "7149": 567, "7128": 567, "66b": 567, "7398": 567, "7326": 567, "7361": [567, 573], "7357": 567, "7627": [567, 573], "7590": 567, "7759": [567, 573], "7840": 567, "65b": 567, "7908": 567, "7957": 567, "7392": [567, 573], "7335": [567, 573], "chat": [567, 573], "7058": [567, 573], "6994": 567, "7677": [567, 573], "7615": [567, 573], "6831": [567, 573], "mbzuai": 567, "124m": 567, "3804": 567, "3887": 567, "774m": 567, "5048": 567, "5057": 567, "5b": 567, "5443": [567, 573], "5436": 567, "mosaicml": [567, 573], "655": [567, 573], "6499": 567, "stabilityai": 567, "stablelm": 567, "4172": 567, "4149": 567, "togethercomput": 567, "redpajama": 567, "incit": 567, "6542": 567, "6735": 567, "6718": 567, "6740": [567, 573], "6569": 567, "6621": 567, "7143": 567, "7221": 567, "6895": 567, "6953": [567, 573], "databrick": [567, 573], "6866": [567, 573], "6297": 567, "6247": 567, "6437": [567, 573], "6392": 567, "7332": 567, "7632": 567, "asterisk": 567, "consider": 567, "arang": 567, "tolist": 567, "default_alpha": 567, "alpha_min": 567, "alpha_max": 567, "alpha_step": 567, "step_siz": 567, "shared_criterion": 567, "do_blockwis": 567, "jason": 567, "emerg": 567, "transact": 567, "yvinec": 567, "edouard": 567, "proceed": 567, "cvf": 567, "winter": 567, "instrument": 568, "writer": 568, "_pre_eval_hook": 568, "_post_eval_hook": 568, "submodul": 568, "whitelist": 568, "_recordingobserv": 568, "output_tensors_dict": 568, "current_it": 568, "get_tensor_valu": 568, "_observer_forward_hook": 568, "activation_post_process": 568, "_add_observer_": 568, "named_children": 568, "leaf": 568, "add_modul": 568, "register_forward_hook": 568, "dump_tim": 568, "summarywrit": 568, "_acc": 568, "tune_": 568, "add_graph": 568, "get_observer_dict": 568, "observer_dict": 568, "is_quant": 568, "add_histogram": 568, "shell": 568, "bind_al": 568, "logdir_spec": 568, "tune_0_acc0": 568, "tune_1": 568, "tune_1_acc0": 568, "79": [568, 573], "baseline_acc_0": 568, "776": 568, "tune_1_acc_0": 568, "095": 568, "runs_v3": 568, "run_tuning_dump_tensor": 568, "inceptionv3": 568, "run_quant": 568, "topologi": 568, "nc_inceptionv3": 568, "inceptionv3_dump_tensor": 568, "eightbit": 568, "disappear": 568, "centercrop": 569, "randomcrop": 569, "cropres": 569, "decodeimag": 569, "jpeg": 569, "encodejp": 569, "alignimagechannel": 569, "68": [569, 573], "116": 569, "78": [569, 573], "103": 569, "94": [569, 573], "017": 569, "bilinearimagenet": [569, 572], "topilimag": 569, "padding_mod": 569, "border": 569, "pixel": 569, "edg": 569, "colorjitt": 569, "bright": 569, "satur": 569, "hue": 569, "jitter": 569, "tondarrai": 569, "o1": 570, "human": 570, "aggress": 570, "classic": 570, "flowchart": 570, "htmllabel": 570, "td": 570, "classdef": 570, "itemstyl": 570, "cce5ff": 570, "stroke": 570, "99ccff": 570, "s1": 570, "s2": 570, "s3": 570, "s4": 570, "s5": 570, "s6": 570, "s7": 570, "nbsp": 570, "subgraphstyl": 570, "ffffff": 570, "attempt": 570, "post_training_auto_qu": 570, "trial": 570, "increment": 570, "ii": 570, "spent": 570, "hawq_v2_loss": 570, "model_loss": 570, "black": 570, "compli": 570, "posterior": 570, "short": 570, "loglevel": 570, "endlessli": 570, "perspect": 570, "smbo": 570, "appl": 570, "surrog": 570, "densiti": 570, "parzen": 570, "greatest": 570, "hour": 570, "dai": 570, "next_tune_cfg": 570, "overridden": 570, "replic": 570, "replica": 570, "fed": 570, "synchron": 570, "number_of_process": 570, "run_cmd": 570, "abctunestrategi": 570, "familiar": 571, "notebook": 571, "introduct": 571, "organ": 572, "logic": 572, "mobilenet_v1": 572, "40": [572, 573], "beta_1": 572, "beta_2": 572, "epsilon": 572, "sparsecategoricalcrossentropi": 572, "sum_over_batch_s": 572, "from_logit": 572, "54": [572, 573], "19": [572, 573], "09": 573, "1x": 573, "platinum": 573, "8480": 573, "8ghz": 573, "56": 573, "ht": 573, "turbo": 573, "256gb": 573, "16x16gb": 573, "ddr5": 573, "4800": 573, "mt": 573, "bio": 573, "3a14": 573, "tel2p1": 573, "microcod": 573, "0x2b0001b0": 573, "gcc": 573, "20210514": 573, "red": 573, "hat": 573, "visit": 573, "1s4c14ins1bsthroughput": 573, "sec": 573, "74": 573, "2914": 573, "621": 573, "69x": 573, "76": 573, "23": 573, "46": 573, "2160": 573, "545": 573, "47": 573, "96x": 573, "resnet101": 573, "77": 573, "37": 573, "1508": 573, "428": 573, "53x": 573, "70": 573, "44": 573, "69": 573, "3290": 573, "1229": 573, "68x": 573, "38": 573, "73": 573, "2404": 573, "1048": 573, "49": 573, "29x": 573, "71": 573, "1669": 573, "33x": 573, "1073": 573, "245": 573, "38x": 573, "374": 573, "52": 573, "18x": 573, "96": 573, "5478": 573, "1756": 573, "12x": 573, "4133": 573, "1748": 573, "36x": 573, "1534": 573, "236": 573, "62": 573, "49x": 573, "vgg19": 573, "1377": 573, "197": 573, "resnetv2": 573, "39": 573, "1125": 573, "656": 573, "71x": 573, "709": 573, "367": 573, "00": 573, "93x": 573, "152": 573, "03": 573, "497": 573, "265": 573, "87x": 573, "densenet": 573, "121": 573, "557": 573, "67": 573, "61": 573, "22x": 573, "161": 573, "29": 573, "353": 573, "235": 573, "50x": 573, "169": 573, "65": 573, "41": 573, "435": 573, "385": 573, "13x": 573, "efficientnet": 573, "b0": 573, "786": 573, "723": 573, "09x": 573, "130": 573, "23x": 573, "1291": 573, "683": 573, "89x": 573, "61x": 573, "1295": 573, "453": 573, "85x": 573, "242": 573, "31x": 573, "cnn": 573, "80x": 573, "43": 573, "81x": 573, "166": 573, "07x": 573, "16x": 573, "26": 573, "173": 573, "yolov3": 573, "82": 573, "230": 573, "92": 573, "36": 573, "37x": 573, "58x": 573, "86": 573, "416": 573, "35x": 573, "88x": 573, "51": 573, "17x": 573, "75552": 573, "50803": 573, "1s56c1ins1bsthroughput": 573, "60": 573, "64x": 573, "1673": 573, "653": 573, "56x": 573, "1170": 573, "329": 573, "55x": 573, "977": 573, "335": 573, "91x": 573, "resnest50": 573, "81": 573, "10x": 573, "resnext101_32x8d": 573, "562": 573, "109": 573, "efficientnet_b0": 573, "696": 573, "667": 573, "04x": 573, "efficientnet_b3": 573, "508": 573, "397": 573, "28x": 573, "efficientnet_b7": 573, "234": 573, "149": 573, "57x": 573, "peleenet": 573, "858": 573, "588": 573, "46x": 573, "se_resnext50_32x4d": 573, "739": 573, "283": 573, "yolo": 573, "141": 573, "99x": 573, "174": 573, "camembert": 573, "395": 573, "171": 573, "30x": 573, "53": 573, "795": 573, "341": 573, "744": 573, "343": 573, "163": 573, "funnel": 573, "182": 573, "65x": 573, "399": 573, "21x": 573, "407": 573, "412": 573, "stsb": 573, "413": 573, "39x": 573, "409": 573, "75x": 573, "401": 573, "70x": 573, "76x": 573, "reform": 573, "crime": 573, "punish": 573, "446": 573, "398": 573, "lvwerra": 573, "pegasu": 573, "samsum": 573, "102": 573, "770": 573, "450": 573, "14x": 573, "whisper": 573, "25x": 573, "abeja": 573, "neox": 573, "japanes": 573, "90x": 573, "1646": 573, "657": 573, "1098": 573, "322": 573, "41x": 573, "568": 573, "19x": 573, "1383": 573, "761": 573, "82x": 573, "32x": 573, "5701": 573, "1593": 573, "2090": 573, "685": 573, "05x": 573, "resnext101_32x16d_wsl": 573, "556": 573, "01x": 573, "86x": 573, "558": 573, "11x": 573, "lambada_openai": 573, "hellaswag": 573, "winogrand": 573, "piqa": 573, "word_perplex": 573, "4954": 573, "6409": 573, "7541": 573, "6434": 573, "8816": 573, "gptqw4g128asym": 573, "679": 573, "4895": 573, "6433": 573, "7476": 573, "6399": 573, "9945": 573, "0999": 573, "gptqw4g32asym": 573, "6829": 573, "4923": 573, "6401": 573, "7486": 573, "6410": 573, "9963": 573, "0141": 573, "gptqw4g128sym": 573, "4907": 573, "6361": 573, "7443": 573, "6390": 573, "9932": 573, "1498": 573, "gptqw4g32sym": 573, "6911": 573, "4899": 573, "6448": 573, "7497": 573, "6439": 573, "0008": 573, "0927": 573, "5049": 573, "6543": 573, "7628": 573, "6497": 573, "2862": 573, "4984": 573, "6535": 573, "7568": 573, "6473": 573, "9962": 573, "4193": 573, "6885": 573, "4973": 573, "753": 573, "6455": 573, "9935": 573, "4607": 573, "decapoda": 573, "5642": 573, "6709": 573, "7835": 573, "6887": 573, "4202": 573, "7244": 573, "5603": 573, "6614": 573, "6824": 573, "9909": 573, "5881": 573, "5911": 573, "7009": 573, "7878": 573, "7106": 573, "212": 573, "7518": 573, "5843": 573, "6961": 573, "7911": 573, "4319": 573, "7572": 573, "5898": 573, "7056": 573, "7894": 573, "7105": 573, "9998": 573, "3429": 573, "7596": 573, "5841": 573, "6977": 573, "7905": 573, "7080": 573, "4916": 573, "6266": 573, "7277": 573, "8096": 573, "7350": 573, "2384": 573, "778": 573, "624": 573, "7269": 573, "8047": 573, "7334": 573, "9979": 573, "4237": 573, "7706": 573, "6239": 573, "7285": 573, "8058": 573, "7322": 573, "4697": 573, "7836": 573, "6195": 573, "7337": 573, "9983": 573, "5604": 573, "5732": 573, "648": 573, "7715": 573, "6746": 573, "7107": 573, "6982": 573, "5637": 573, "6527": 573, "7704": 573, "6713": 573, "9950": 573, "9702": 573, "5682": 573, "6575": 573, "7758": 573, "6742": 573, "9994": 573, "9317": 573, "567": 573, "6902": 573, "7353": 573, "6622": 573, "7829": 573, "6862": 573, "9942": 573, "9635": 573, "7246": 573, "5617": 573, "6756": 573, "7797": 573, "6854": 573, "9931": 573, "2799": 573, "7312": 573, "6059": 573, "7103": 573, "7077": 573, "2213": 573, "7273": 573, "6018": 573, "7088": 573, "7742": 573, "7030": 573, "9934": 573, "2538": 573, "083": 573, "7283": 573, "6053": 573, "7024": 573, "7764": 573, "7031": 573, "1889": 573, "727": 573, "5997": 573, "7018": 573, "9916": 573, "2504": 573, "7122": 573, "8984": 573, "5933": 573, "689": 573, "7851": 573, "7075": 573, "1556": 573, "448": 573, "7675": 573, "5934": 573, "7856": 573, "7111": 573, "9984": 573, "1514": 573, "927": 573, "7566": 573, "5899": 573, "7032": 573, "9953": 573, "1374": 573, "728": 573, "4628": 573, "6456": 573, "6029": 573, "6438": 573, "5799": 573, "4542": 573, "6004": 573, "9957": 573, "0626": 573, "4789": 573, "6134": 573, "7432": 573, "5525": 573, "4731": 573, "6504": 573, "7617": 573, "6094": 573, "7828": 573, "5098": 573, "7622": 573, "6505": 573, "3242": 573, "6878": 573, "5058": 573, "6393": 573, "7633": 573, "6491": 573, "9978": 573, "5514": 573, "6864": 573, "5084": 573, "6519": 573, "6509": 573, "0006": 573, "4728": 573, "6876": 573, "5045": 573, "6474": 573, "9952": 573, "6379": 573, "5282": 573, "614": 573, "7448": 573, "6312": 573, "6377": 573, "5228": 573, "5991": 573, "6261": 573, "9919": 573, "4096": 573, "neo": 573, "6224": 573, "4271": 573, "577": 573, "722": 573, "5871": 573, "9359": 573, "6123": 573, "4227": 573, "5738": 573, "7203": 573, "5823": 573, "9917": 573, "3377": 573, "615": 573, "4259": 573, "5714": 573, "7247": 573, "9951": 573, "2083": 573, "6154": 573, "4208": 573, "5777": 573, "7198": 573, "5834": 573, "9937": 573, "3121": 573, "20b": 573, "7233": 573, "5359": 573, "7753": 573, "195": 573, "7186": 573, "5328": 573, "7699": 573, "6687": 573, "9922": 573, "3463": 573, "7268": 573, "533": 573, "659": 573, "6726": 573, "2897": 573, "5718": 573, "6859": 573, "7927": 573, "6890": 573, "9324": 573, "7006": 573, "5655": 573, "6803": 573, "7965": 573, "6857": 573, "1515": 573, "5752": 573, "6748": 573, "7845": 573, "6724": 573, "5951": 573, "6472": 573, "5716": 573, "6685": 573, "784": 573, "6678": 573, "8539": 573, "6918": 573, "5819": 573, "678": 573, "6861": 573, "8863": 573, "5765": 573, "6827": 573, "7873": 573, "6832": 573, "9958": 573, "1451": 573, "storywrit": 573, "693": 573, "5477": 573, "663": 573, "6719": 573, "9125": 573, "6661": 573, "7813": 573, "6693": 573, "9961": 573, "1137": 573, "rw": 573, "6604": 573, "5419": 573, "6598": 573, "6594": 573, "7616": 573, "6484": 573, "5369": 573, "7807": 573, "6559": 573, "9947": 573, "9411": 573, "6571": 573, "5398": 573, "6582": 573, "6579": 573, "8809": 573, "652": 573, "535": 573, "7682": 573, "6532": 573, "9906": 573, "0048": 573, "5177": 573, "6669": 573, "7824": 573, "5053": 573, "6301": 573, "5142": 573, "6654": 573, "6483": 573, "9933": 573, "8146": 573, "517": 573, "9941": 573, "1566": 573, "724": 573, "1567": 573, "716": 573, "1414": 573, "718": 573, "97x": 573, "1459": 573, "721": 573, "02x": 573, "1582": 573, "752": 573, "7139": 573, "4289": 573, "66x": 573, "4080": 573, "7236": 573, "4299": 573, "6842": 573, "4496": 573, "52x": 573, "591": 573, "178": 573, "183": 573, "590": 573, "179": 573, "42x": 573, "5703": 573, "2578": 573, "5610": 573, "2603": 573, "shufflenet": 573, "6689": 573, "3690": 573, "5692": 573, "3758": 573, "51x": 573, "googlenet": 573, "1792": 573, "1111": 573, "1821": 573, "1104": 573, "squeezenet": 573, "9472": 573, "5582": 573, "9861": 573, "5566": 573, "77x": 573, "caffenet": 573, "3348": 573, "1141": 573, "3509": 573, "1142": 573, "2426": 573, "987": 573, "2208": 573, "1016": 573, "zfnet": 573, "930": 573, "532": 573, "919": 573, "417": 573, "1880": 573, "1159": 573, "62x": 573, "1798": 573, "1151": 573, "2890": 573, "1380": 573, "2548": 573, "1362": 573, "507": 573, "94x": 573, "1286": 573, "904": 573, "1121": 573, "856": 573, "829": 573, "1044": 573, "790": 573, "849": 573, "627": 573, "79x": 573, "yolov4": 573, "duc": 573, "tini": 573, "1119": 573, "ultra": 573, "8537": 573, "1934": 573, "emot": 573, "ferplu": 573, "3568": 573, "arcfac": 573, "494": 573, "244": 573, "226": 573, "392": 573, "223": 573, "integerop": 573, "473": 573, "548": 573, "964": 573, "540": 573, "394": 573, "602": 573, "487": 573, "222": 573, "20x": 573, "189": 573, "146": 573, "125": 573, "bidaf": 573, "2757": 573, "2277": 573, "gpt2": 573, "360": 573, "213": 573, "490": 573, "304": 573, "214": 573, "347": 573, "272": 573, "216": 573, "26x": 573, "489": 573, "27x": 573, "l12": 573, "h384": 573, "1054": 573, "585": 573, "1072": 573, "890": 573, "746": 573, "268": 573, "211": 573, "l6": 573, "1958": 573, "1130": 573, "73x": 573, "electra": 573, "discrimin": 573, "1797": 573, "1077": 573, "67x": 573, "1930": 573, "1139": 573, "mini": 573, "5510": 573, "3334": 573, "5627": 573, "3365": 573, "108": 573, "110": 573, "bart": 573, "15x": 573, "deberta": 573, "168": 573, "145": 573, "spanbert": 573, "63x": 573, "multilingu": 573, "113": 573, "159": 573, "40x": 573, "distilgpt2": 573, "layoutlm": 573, "layoutlmv2": 573, "codebert": 573, "47x": 573, "fcn": 573, "perplex": 573, "2788": 573, "7002": 573, "4124": 573, "9921": 573, "3950": 573, "5711": 573, "9892": 573, "9163": 573, "7240": 573, "9902": 573, "0438": 573, "7634": 573, "1186": 573, "9944": 573, "1276": 573, "7543": 573, "6181": 573, "rtnw4g32asym": 573, "6496": 573, "9967": 573, "7964": 573, "6612": 573, "rtnw4g32sym": 573, "7941": 573, "7243": 573, "9971": 573, "taskdataset": 573, "accuracyspars": 573, "ratiospars": 573, "commentsbalancedor": 573, "unbalanc": 573, "answeringsquad": 573, "87f1": 573, "momentumunbalanc": 573, "momentumbalanc": 573, "90f1": 573, "59f1": 573, "23f1": 573, "classificationmrpc": 573, "52f1": 573, "26f1": 573, "classificationsst": 573, "61accuraci": 573, "recognitionimagenet": 573, "95top1": 573, "v5s6": 573, "detectioncoco": 573, "ap0": 573, "6ap0": 573, "393": 573, "584": 573, "34f1": 573, "lassounbalanc": 573, "classificationmnli": 573, "mm": 573, "allbalanc": 573, "32accuraci": 573, "sensitivitybalanc": 573, "classificationqqp": 573, "classificationqnli": 573, "54accuraci": 573, "em": 573, "mobilenetv2": 573, "wideresnet40": 573, "9522": 573, "8178": 573, "0213": 573, "8235": 573, "027": 573, "5494": 573, "7153": 573, "5540": 573, "0046": 573, "5523": 573, "vgg": 573, "bn": 573, "7022": 573, "7415": 573, "7025": 573, "0003": 573, "6739": 573, "7399": 573, "6845": 573, "0106": 573, "blendcnn": 573, "7034": 573, "8382": 573, "bilstm": 573, "8314": 573, "9403": 573, "9048": 573, "0734": 573, "7323": 573, "8256": 573, "8084": 573, "8814": 573, "7442": 573, "8371": 573, "0119": 573, "0115": 573, "tinybert": 573, "8018": 573, "8044": 573, "8363": 573, "8411": 573, "8025": 573, "8074": 573, "0007": 573, "0030": 573, "8626": 573, "9091": 573, "8782": 573, "8684": 573, "8259": 573, "0058": 573, "distilroberta": 573, "6057": 573, "6187": 573, "0130": 573, "c6i": 573, "2xlarg": 573, "c6a": 573, "c6g": 573, "a100cuda": 573, "executionprovid": 573}, "objects": {"": [[0, 0, 0, "-", "block_mask"], [360, 0, 0, "-", "neural_compressor"]], "neural_compressor": [[2, 0, 0, "-", "adaptor"], [174, 0, 0, "-", "algorithm"], [177, 0, 0, "-", "benchmark"], [180, 0, 0, "-", "common"], [192, 0, 0, "-", "compression"], [225, 0, 0, "-", "conf"], [227, 0, 0, "-", "config"], [228, 0, 0, "-", "contrib"], [253, 0, 0, "-", "data"], [307, 0, 0, "-", "experimental"], [367, 0, 0, "-", "metric"], [369, 0, 0, "-", "mix_precision"], [371, 0, 0, "-", "model"], [379, 0, 0, "-", "objective"], [380, 0, 0, "-", "profiling"], [402, 0, 0, "-", "quantization"], [410, 0, 0, "-", "strategy"], [422, 0, 0, "-", "template"], [434, 0, 0, "-", "tensorflow"], [448, 0, 0, "-", "torch"], [461, 0, 0, "-", "training"], [465, 0, 0, "-", "utils"], [474, 0, 0, "-", "version"]], "neural_compressor.adaptor": [[1, 0, 0, "-", "adaptor"], [3, 0, 0, "-", "keras"], [7, 0, 0, "-", "keras_utils"], [11, 0, 0, "-", "mxnet"], [12, 0, 0, "-", "mxnet_utils"], [14, 0, 0, "-", "onnxrt"], [17, 0, 0, "-", "ox_utils"], [45, 0, 0, "-", "pytorch"], [46, 0, 0, "-", "query"], [47, 0, 0, "-", "tensorflow"], [111, 0, 0, "-", "tf_utils"], [158, 0, 0, "-", "torch_utils"]], "neural_compressor.adaptor.adaptor": [[1, 1, 1, "", "Adaptor"], [1, 2, 1, "", "adaptor_registry"]], "neural_compressor.adaptor.keras": [[3, 1, 1, "", "KerasAdaptor"], [3, 1, 1, "", "KerasQuery"]], "neural_compressor.adaptor.keras_utils": [[4, 0, 0, "-", "conv2d"], [5, 0, 0, "-", "dense"], [6, 0, 0, "-", "depthwise_conv2d"], [8, 0, 0, "-", "pool2d"], [9, 0, 0, "-", "quantizer"], [10, 0, 0, "-", "separable_conv2d"]], "neural_compressor.adaptor.mxnet": [[11, 1, 1, "", "MXNetQuery"], [11, 1, 1, "", "MxNetAdaptor"]], "neural_compressor.adaptor.mxnet_utils": [[13, 0, 0, "-", "util"]], "neural_compressor.adaptor.mxnet_utils.util": [[13, 1, 1, "", "CalibCollector"], [13, 1, 1, "", "CalibData"], [13, 1, 1, "", "CollectorBase"], [13, 1, 1, "", "DataIterLoader"], [13, 1, 1, "", "DataLoaderWrap"], [13, 1, 1, "", "NameCollector"], [13, 1, 1, "", "OpType"], [13, 1, 1, "", "TensorCollector"], [13, 2, 1, "", "amp_convert"], [13, 2, 1, "", "calib_model"], [13, 2, 1, "", "check_mx_version"], [13, 2, 1, "", "combine_capabilities"], [13, 2, 1, "", "create_data_example"], [13, 2, 1, "", "distribute_calib_tensors"], [13, 2, 1, "", "ensure_list"], [13, 2, 1, "", "fuse"], [13, 2, 1, "", "get_framework_name"], [13, 2, 1, "", "is_model_quantized"], [13, 2, 1, "", "isiterable"], [13, 2, 1, "", "make_module"], [13, 2, 1, "", "make_nc_model"], [13, 2, 1, "", "make_symbol_block"], [13, 2, 1, "", "ndarray_to_device"], [13, 2, 1, "", "parse_tune_config"], [13, 2, 1, "", "prepare_dataloader"], [13, 2, 1, "", "prepare_model"], [13, 2, 1, "", "prepare_model_data"], [13, 2, 1, "", "quantize_sym_model"], [13, 2, 1, "", "query_quantizable_nodes"], [13, 2, 1, "", "run_forward"]], "neural_compressor.adaptor.onnxrt": [[14, 1, 1, "", "ONNXRTQuery"], [14, 1, 1, "", "ONNXRT_IntegerOpsAdaptor"], [14, 1, 1, "", "ONNXRT_QDQAdaptor"], [14, 1, 1, "", "ONNXRT_QLinearOpsAdaptor"], [14, 1, 1, "", "ONNXRT_WeightOnlyAdaptor"], [14, 1, 1, "", "ONNXRUNTIMEAdaptor"]], "neural_compressor.adaptor.ox_utils": [[15, 0, 0, "-", "calibration"], [16, 0, 0, "-", "calibrator"], [29, 0, 0, "-", "operators"], [41, 0, 0, "-", "quantizer"], [42, 0, 0, "-", "smooth_quant"], [43, 0, 0, "-", "util"], [44, 0, 0, "-", "weight_only"]], "neural_compressor.adaptor.ox_utils.calibration": [[15, 1, 1, "", "ONNXRTAugment"]], "neural_compressor.adaptor.ox_utils.calibrator": [[16, 1, 1, "", "CalibratorBase"], [16, 1, 1, "", "HistogramCollector"], [16, 1, 1, "", "KLCalibrator"], [16, 1, 1, "", "MinMaxCalibrator"], [16, 1, 1, "", "PercentileCalibrator"], [16, 2, 1, "", "calib_registry"], [16, 2, 1, "", "smooth_distribution"]], "neural_compressor.adaptor.ox_utils.operators": [[18, 0, 0, "-", "activation"], [19, 0, 0, "-", "argmax"], [20, 0, 0, "-", "attention"], [21, 0, 0, "-", "binary_op"], [22, 0, 0, "-", "concat"], [23, 0, 0, "-", "conv"], [24, 0, 0, "-", "direct_q8"], [25, 0, 0, "-", "embed_layernorm"], [26, 0, 0, "-", "gather"], [27, 0, 0, "-", "gavgpool"], [28, 0, 0, "-", "gemm"], [30, 0, 0, "-", "lstm"], [31, 0, 0, "-", "matmul"], [32, 0, 0, "-", "maxpool"], [33, 0, 0, "-", "norm"], [34, 0, 0, "-", "ops"], [35, 0, 0, "-", "pad"], [36, 0, 0, "-", "pooling"], [37, 0, 0, "-", "reduce"], [38, 0, 0, "-", "resize"], [39, 0, 0, "-", "split"], [40, 0, 0, "-", "unary_op"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[18, 1, 1, "", "ActivationOperator"], [18, 1, 1, "", "Float16ActivationOperator"], [18, 1, 1, "", "QActivationOperator"], [18, 1, 1, "", "RemovableActivationOperator"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[19, 1, 1, "", "ArgMaxOperator"], [19, 1, 1, "", "QArgMaxOperator"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[20, 1, 1, "", "AttentionOperator"], [20, 1, 1, "", "QAttentionOperator"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[21, 1, 1, "", "BinaryDirect8BitOperator"], [21, 1, 1, "", "BinaryOperator"], [21, 1, 1, "", "Float16BinaryOperator"], [21, 1, 1, "", "QBinaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[22, 1, 1, "", "ConcatOperator"], [22, 1, 1, "", "QConcatOperator"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[23, 1, 1, "", "ConvOperator"], [23, 1, 1, "", "QConvOperator"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[24, 1, 1, "", "Direct8BitOperator"], [24, 1, 1, "", "QDirectOperator"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[25, 1, 1, "", "EmbedLayerNormalizationOperator"], [25, 1, 1, "", "QEmbedLayerNormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[26, 1, 1, "", "GatherOperator"], [26, 1, 1, "", "QGatherOperator"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[27, 1, 1, "", "GlobalAveragePoolOperator"], [27, 1, 1, "", "QGlobalAveragePoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[28, 1, 1, "", "GemmOperator"], [28, 1, 1, "", "QGemmOperator"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[30, 1, 1, "", "LSTMOperator"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[31, 1, 1, "", "FusedMatMulOperator"], [31, 1, 1, "", "MatMulOperator"], [31, 1, 1, "", "QMatMulOperator"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[32, 1, 1, "", "MaxPoolOperator"], [32, 1, 1, "", "QMaxPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.norm": [[33, 1, 1, "", "BatchNormalizationOperator"], [33, 1, 1, "", "NormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[34, 1, 1, "", "Operator"], [34, 1, 1, "", "QOperator"], [34, 2, 1, "", "op_registry"], [34, 2, 1, "", "qop_registry"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[35, 1, 1, "", "PadOperator"], [35, 1, 1, "", "QPadOperator"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[36, 1, 1, "", "PoolOperator"], [36, 1, 1, "", "QPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.reduce": [[37, 1, 1, "", "ReduceMinMaxOperator"], [37, 1, 1, "", "ReduceOperator"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[38, 1, 1, "", "QResizeOperator"], [38, 1, 1, "", "ResizeOperator"]], "neural_compressor.adaptor.ox_utils.operators.split": [[39, 1, 1, "", "QSplitOperator"], [39, 1, 1, "", "SplitOperator"]], "neural_compressor.adaptor.ox_utils.operators.unary_op": [[40, 1, 1, "", "UnaryDirect8BitOperator"], [40, 1, 1, "", "UnaryOperator"]], "neural_compressor.adaptor.ox_utils.quantizer": [[41, 1, 1, "", "Quantizer"]], "neural_compressor.adaptor.ox_utils.smooth_quant": [[42, 1, 1, "", "ORTSmoothQuant"], [42, 2, 1, "", "get_quant_dequant_output"], [42, 2, 1, "", "make_sub_graph"], [42, 2, 1, "", "quant_dequant_data"]], "neural_compressor.adaptor.ox_utils.util": [[43, 1, 1, "", "QuantFormat"], [43, 1, 1, "", "QuantType"], [43, 1, 1, "", "QuantizationMode"], [43, 1, 1, "", "QuantizedInitializer"], [43, 1, 1, "", "QuantizedValue"], [43, 1, 1, "", "QuantizedValueType"], [43, 1, 1, "", "ValueInfo"], [43, 2, 1, "", "attribute_to_kwarg"], [43, 2, 1, "", "calculate_scale_zp"], [43, 2, 1, "", "cast_tensor"], [43, 2, 1, "", "collate_preds"], [43, 2, 1, "", "dequantize_data"], [43, 2, 1, "", "dequantize_data_with_scale_zero"], [43, 2, 1, "", "dtype_to_name"], [43, 2, 1, "", "find_by_name"], [43, 2, 1, "", "float_to_bfloat16"], [43, 2, 1, "", "float_to_float16"], [43, 2, 1, "", "get_node_original_name"], [43, 2, 1, "", "infer_shapes"], [43, 2, 1, "", "is_B_transposed"], [43, 2, 1, "", "make_dquant_node"], [43, 2, 1, "", "make_quant_node"], [43, 2, 1, "", "quantize_data"], [43, 2, 1, "", "quantize_data_per_channel"], [43, 2, 1, "", "quantize_data_with_scale_zero"], [43, 2, 1, "", "quantize_nparray"], [43, 2, 1, "", "remove_init_from_model_input"], [43, 2, 1, "", "simple_progress_bar"], [43, 2, 1, "", "split_shared_bias"], [43, 2, 1, "", "to_numpy"], [43, 2, 1, "", "trt_env_setup"]], "neural_compressor.adaptor.ox_utils.weight_only": [[44, 2, 1, "", "apply_awq_clip"], [44, 2, 1, "", "apply_awq_scale"], [44, 2, 1, "", "awq_quantize"], [44, 2, 1, "", "get_blob_size"], [44, 2, 1, "", "get_weight_scale"], [44, 2, 1, "", "gptq"], [44, 2, 1, "", "gptq_quantize"], [44, 2, 1, "", "make_matmul_weight_only_node"], [44, 2, 1, "", "pad_tensor"], [44, 2, 1, "", "prepare_inputs"], [44, 2, 1, "", "qdq_tensor"], [44, 2, 1, "", "quant_tensor"], [44, 2, 1, "", "rtn_quantize"]], "neural_compressor.adaptor.pytorch": [[45, 1, 1, "", "PyTorchAdaptor"], [45, 1, 1, "", "PyTorchQuery"], [45, 1, 1, "", "PyTorchWeightOnlyAdaptor"], [45, 1, 1, "", "PyTorch_FXAdaptor"], [45, 1, 1, "", "PyTorch_IPEXAdaptor"], [45, 1, 1, "", "TemplateAdaptor"], [45, 2, 1, "", "get_ops_recursively"]], "neural_compressor.adaptor.query": [[46, 1, 1, "", "QueryBackendCapability"]], "neural_compressor.adaptor.tensorflow": [[47, 1, 1, "", "TensorFlowAdaptor"], [47, 1, 1, "", "TensorflowQuery"], [47, 1, 1, "", "Tensorflow_ITEXAdaptor"]], "neural_compressor.adaptor.tf_utils": [[48, 0, 0, "-", "graph_converter"], [49, 0, 0, "-", "graph_converter_without_calib"], [87, 0, 0, "-", "graph_rewriter"], [110, 0, 0, "-", "graph_util"], [112, 0, 0, "-", "quantize_graph"], [139, 0, 0, "-", "quantize_graph_common"], [140, 0, 0, "-", "smooth_quant_calibration"], [141, 0, 0, "-", "smooth_quant_scaler"], [142, 0, 0, "-", "tf2onnx_converter"], [145, 0, 0, "-", "transform_graph"], [148, 0, 0, "-", "util"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[48, 1, 1, "", "GraphConverter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[49, 1, 1, "", "GraphConverterWithoutCalib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[52, 0, 0, "-", "bf16"], [76, 0, 0, "-", "generic"], [86, 0, 0, "-", "graph_base"], [95, 0, 0, "-", "int8"], [101, 0, 0, "-", "onnx"], [106, 0, 0, "-", "qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[50, 0, 0, "-", "bf16_convert"], [51, 0, 0, "-", "dequantize_cast_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[50, 1, 1, "", "BF16Convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer": [[51, 1, 1, "", "DequantizeCastOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[53, 0, 0, "-", "convert_add_to_biasadd"], [54, 0, 0, "-", "convert_layout"], [55, 0, 0, "-", "convert_leakyrelu"], [56, 0, 0, "-", "convert_nan_to_random"], [57, 0, 0, "-", "convert_placeholder_to_const"], [58, 0, 0, "-", "dilated_contraction"], [59, 0, 0, "-", "dummy_biasadd"], [60, 0, 0, "-", "expanddims_optimizer"], [61, 0, 0, "-", "fetch_weight_from_reshape"], [62, 0, 0, "-", "fold_batch_norm"], [63, 0, 0, "-", "fold_constant"], [64, 0, 0, "-", "fuse_biasadd_add"], [65, 0, 0, "-", "fuse_column_wise_mul"], [66, 0, 0, "-", "fuse_conv_with_math"], [67, 0, 0, "-", "fuse_decomposed_bn"], [68, 0, 0, "-", "fuse_decomposed_in"], [69, 0, 0, "-", "fuse_gelu"], [70, 0, 0, "-", "fuse_layer_norm"], [71, 0, 0, "-", "fuse_pad_with_conv"], [72, 0, 0, "-", "fuse_pad_with_fp32_conv"], [73, 0, 0, "-", "fuse_reshape_transpose"], [74, 0, 0, "-", "graph_cse_optimizer"], [75, 0, 0, "-", "grappler_pass"], [77, 0, 0, "-", "insert_print_node"], [78, 0, 0, "-", "move_squeeze_after_relu"], [79, 0, 0, "-", "pre_optimize"], [80, 0, 0, "-", "remove_training_nodes"], [81, 0, 0, "-", "rename_batch_norm"], [82, 0, 0, "-", "split_shared_input"], [83, 0, 0, "-", "strip_equivalent_nodes"], [84, 0, 0, "-", "strip_unused_nodes"], [85, 0, 0, "-", "switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[53, 1, 1, "", "ConvertAddToBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[54, 1, 1, "", "ConvertLayoutOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[55, 1, 1, "", "ConvertLeakyReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[56, 1, 1, "", "ConvertNanToRandom"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[57, 1, 1, "", "ConvertPlaceholderToConst"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[58, 1, 1, "", "DilatedContraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[59, 1, 1, "", "InjectDummyBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[60, 1, 1, "", "ExpandDimsOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[61, 1, 1, "", "FetchWeightFromReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[62, 1, 1, "", "FoldBatchNormNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[63, 1, 1, "", "GraphFoldConstantOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[64, 1, 1, "", "FuseBiasAddAndAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[65, 1, 1, "", "FuseColumnWiseMulOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[66, 1, 1, "", "FuseConvWithMathOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[67, 1, 1, "", "FuseDecomposedBNOptimizer"], [67, 2, 1, "", "bypass_reshape"], [67, 2, 1, "", "get_const_dim_count"], [67, 2, 1, "", "node_from_map"], [67, 2, 1, "", "node_name_from_input"], [67, 2, 1, "", "valid_reshape_inputs"], [67, 2, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[68, 1, 1, "", "FuseDecomposedINOptimizer"], [68, 2, 1, "", "bypass_reshape"], [68, 2, 1, "", "get_const_dim_count"], [68, 2, 1, "", "node_from_map"], [68, 2, 1, "", "node_name_from_input"], [68, 2, 1, "", "valid_reshape_inputs"], [68, 2, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[69, 1, 1, "", "FuseGeluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[70, 1, 1, "", "FuseLayerNormOptimizer"], [70, 2, 1, "", "node_from_map"], [70, 2, 1, "", "node_name_from_input"], [70, 2, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[71, 1, 1, "", "FusePadWithConv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[72, 1, 1, "", "FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[73, 1, 1, "", "FuseTransposeReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[74, 1, 1, "", "GraphCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[75, 1, 1, "", "GrapplerOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[77, 1, 1, "", "InsertPrintMinMaxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[78, 1, 1, "", "MoveSqueezeAfterReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[79, 1, 1, "", "PreOptimization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[80, 1, 1, "", "RemoveTrainingNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[81, 1, 1, "", "RenameBatchNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[82, 1, 1, "", "SplitSharedInputOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[83, 1, 1, "", "StripEquivalentNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[84, 1, 1, "", "StripUnusedNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[85, 1, 1, "", "SwitchOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[86, 1, 1, "", "GraphRewriterBase"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[88, 0, 0, "-", "freeze_fake_quant"], [89, 0, 0, "-", "freeze_value"], [90, 0, 0, "-", "freeze_value_without_calib"], [91, 0, 0, "-", "fuse_conv_redundant_dequantize"], [92, 0, 0, "-", "fuse_conv_requantize"], [93, 0, 0, "-", "fuse_matmul_redundant_dequantize"], [94, 0, 0, "-", "fuse_matmul_requantize"], [96, 0, 0, "-", "meta_op_optimizer"], [97, 0, 0, "-", "post_hostconst_converter"], [98, 0, 0, "-", "post_quantized_op_cse"], [99, 0, 0, "-", "rnn_convert"], [100, 0, 0, "-", "scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[88, 1, 1, "", "FreezeFakeQuantOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[89, 1, 1, "", "FreezeValueTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[90, 1, 1, "", "FreezeValueWithoutCalibTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[91, 1, 1, "", "FuseConvRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[92, 1, 1, "", "FuseConvRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[93, 1, 1, "", "FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[94, 1, 1, "", "FuseMatMulRequantizeDequantizeNewAPITransformer"], [94, 1, 1, "", "FuseMatMulRequantizeDequantizeTransformer"], [94, 1, 1, "", "FuseMatMulRequantizeNewAPITransformer"], [94, 1, 1, "", "FuseMatMulRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[96, 1, 1, "", "MetaInfoChangingMemOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[97, 1, 1, "", "PostHostConstConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[98, 1, 1, "", "PostCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[99, 1, 1, "", "QuantizedRNNConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[100, 1, 1, "", "ScaleProPagationTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[102, 0, 0, "-", "onnx_graph"], [103, 0, 0, "-", "onnx_node"], [104, 0, 0, "-", "onnx_schema"], [105, 0, 0, "-", "tf2onnx_utils"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[102, 1, 1, "", "OnnxGraph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[103, 1, 1, "", "OnnxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[104, 1, 1, "", "OnnxOpSchema"], [104, 2, 1, "", "get_max_supported_opset_version"], [104, 2, 1, "", "get_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[105, 1, 1, "", "SeqType"], [105, 2, 1, "", "add_port_to_name"], [105, 2, 1, "", "are_shapes_equal"], [105, 2, 1, "", "assert_error"], [105, 2, 1, "", "compute_const_folding_using_tf"], [105, 2, 1, "", "convert_tensorflow_tensor_to_onnx"], [105, 2, 1, "", "find_opset"], [105, 2, 1, "", "get_index_from_strided_slice_of_shape"], [105, 2, 1, "", "get_subgraphs_from_onnx"], [105, 2, 1, "", "get_tensorflow_node_attr"], [105, 2, 1, "", "get_tensorflow_node_shape_attr"], [105, 2, 1, "", "get_tensorflow_tensor_data"], [105, 2, 1, "", "get_tensorflow_tensor_shape"], [105, 2, 1, "", "infer_onnx_shape_dtype"], [105, 2, 1, "", "initialize_name_counter"], [105, 2, 1, "", "is_list_or_tuple"], [105, 2, 1, "", "is_onnx_domain"], [105, 2, 1, "", "make_onnx_inputs_outputs"], [105, 2, 1, "", "make_onnx_shape"], [105, 2, 1, "", "map_numpy_to_onnx_dtype"], [105, 2, 1, "", "map_onnx_to_numpy_type"], [105, 2, 1, "", "map_tensorflow_dtype"], [105, 2, 1, "", "read_tensorflow_node_attrs"], [105, 2, 1, "", "save_protobuf"], [105, 2, 1, "", "set_name"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[107, 0, 0, "-", "insert_qdq_pattern"], [108, 0, 0, "-", "merge_duplicated_qdq"], [109, 0, 0, "-", "share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[107, 1, 1, "", "GenerateGraphWithQDQPattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[108, 1, 1, "", "MergeDuplicatedQDQOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[109, 1, 1, "", "ShareQDQForItexYPatternOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_util": [[110, 1, 1, "", "GraphAnalyzer"], [110, 1, 1, "", "GraphRewriterHelper"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[114, 0, 0, "-", "qat"], [130, 0, 0, "-", "qdq"], [132, 0, 0, "-", "quantize_graph_base"], [133, 0, 0, "-", "quantize_graph_bn"], [134, 0, 0, "-", "quantize_graph_concatv2"], [135, 0, 0, "-", "quantize_graph_conv"], [136, 0, 0, "-", "quantize_graph_for_intel_cpu"], [137, 0, 0, "-", "quantize_graph_matmul"], [138, 0, 0, "-", "quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[113, 0, 0, "-", "fake_quantize"], [115, 0, 0, "-", "quantize_config"], [116, 0, 0, "-", "quantize_helper"], [117, 0, 0, "-", "quantize_layers"], [122, 0, 0, "-", "quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[113, 1, 1, "", "FakeQuantize"], [113, 1, 1, "", "FakeQuantizeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[115, 1, 1, "", "QuantizeConfig"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[116, 2, 1, "", "init_quantize_config"], [116, 2, 1, "", "qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[118, 0, 0, "-", "optimize_layer"], [119, 0, 0, "-", "quantize_layer_add"], [120, 0, 0, "-", "quantize_layer_base"], [121, 0, 0, "-", "quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[118, 2, 1, "", "config_quantizable_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[119, 1, 1, "", "QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[120, 1, 1, "", "QuantizeLayerBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[121, 1, 1, "", "QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[122, 1, 1, "", "QuantizeWrapper"], [122, 1, 1, "", "QuantizeWrapperBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[123, 0, 0, "-", "fuse_qdq_bn"], [124, 0, 0, "-", "fuse_qdq_concatv2"], [125, 0, 0, "-", "fuse_qdq_conv"], [126, 0, 0, "-", "fuse_qdq_deconv"], [127, 0, 0, "-", "fuse_qdq_in"], [128, 0, 0, "-", "fuse_qdq_matmul"], [129, 0, 0, "-", "fuse_qdq_pooling"], [131, 0, 0, "-", "optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[123, 1, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[124, 1, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[125, 1, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[126, 1, 1, "", "FuseNodeStartWithDeconv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[127, 1, 1, "", "FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[128, 1, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[129, 1, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[131, 1, 1, "", "OptimizeQDQGraph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[132, 1, 1, "", "QuantizeGraphBase"], [132, 1, 1, "", "QuantizeNodeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[133, 1, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[134, 1, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[135, 1, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[136, 1, 1, "", "QuantizeGraphForIntel"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[137, 1, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[138, 1, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[139, 1, 1, "", "QuantizeGraphHelper"]], "neural_compressor.adaptor.tf_utils.smooth_quant_calibration": [[140, 1, 1, "", "SmoothQuantCalibration"], [140, 1, 1, "", "SmoothQuantCalibrationLLM"]], "neural_compressor.adaptor.tf_utils.smooth_quant_scaler": [[141, 1, 1, "", "SmoothQuantScaler"], [141, 1, 1, "", "SmoothQuantScalerLLM"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[142, 1, 1, "", "TensorflowQDQToOnnxQDQConverter"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[143, 0, 0, "-", "bias_correction"], [144, 0, 0, "-", "graph_transform_base"], [146, 0, 0, "-", "insert_logging"], [147, 0, 0, "-", "rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[143, 1, 1, "", "BiasCorrection"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[144, 1, 1, "", "GraphTransformBase"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[146, 1, 1, "", "InsertLogging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[147, 1, 1, "", "RerangeQuantizedConcat"]], "neural_compressor.adaptor.tf_utils.util": [[148, 2, 1, "", "apply_inlining"], [148, 2, 1, "", "collate_tf_preds"], [148, 2, 1, "", "construct_function_from_graph_def"], [148, 2, 1, "", "disable_random"], [148, 2, 1, "", "fix_ref_type_of_graph_def"], [148, 2, 1, "", "generate_feed_dict"], [148, 2, 1, "", "get_estimator_graph"], [148, 2, 1, "", "get_graph_def"], [148, 2, 1, "", "get_input_output_node_names"], [148, 2, 1, "", "get_model_input_shape"], [148, 2, 1, "", "get_tensor_by_name"], [148, 2, 1, "", "get_tensor_val_from_graph_node"], [148, 2, 1, "", "get_weight_from_input_tensor"], [148, 2, 1, "", "int8_node_name_reverse"], [148, 2, 1, "", "is_ckpt_format"], [148, 2, 1, "", "is_saved_model_format"], [148, 2, 1, "", "iterator_sess_run"], [148, 2, 1, "", "parse_saved_model"], [148, 2, 1, "", "read_graph"], [148, 2, 1, "", "reconstruct_saved_model"], [148, 2, 1, "", "strip_equivalent_nodes"], [148, 2, 1, "", "strip_unused_nodes"], [148, 2, 1, "", "tf_diagnosis_helper"], [148, 2, 1, "", "version1_eq_version2"], [148, 2, 1, "", "version1_gt_version2"], [148, 2, 1, "", "version1_gte_version2"], [148, 2, 1, "", "version1_lt_version2"], [148, 2, 1, "", "version1_lte_version2"], [148, 2, 1, "", "write_graph"]], "neural_compressor.adaptor.torch_utils": [[151, 0, 0, "-", "autoround"], [154, 0, 0, "-", "awq"], [155, 0, 0, "-", "bf16_convert"], [156, 0, 0, "-", "gptq"], [157, 0, 0, "-", "hawq_metric"], [159, 0, 0, "-", "layer_wise_quant"], [164, 0, 0, "-", "mixed_precision"], [165, 0, 0, "-", "model_wrapper"], [166, 0, 0, "-", "pattern_detector"], [167, 0, 0, "-", "smooth_quant"], [168, 0, 0, "-", "symbolic_trace"], [169, 0, 0, "-", "teq"], [170, 0, 0, "-", "util"], [171, 0, 0, "-", "weight_only"]], "neural_compressor.adaptor.torch_utils.autoround": [[149, 0, 0, "-", "autoround"], [150, 0, 0, "-", "export"], [152, 0, 0, "-", "model_wrapper"], [153, 0, 0, "-", "sign_sgd"]], "neural_compressor.adaptor.torch_utils.autoround.autoround": [[149, 1, 1, "", "AutoAdamRound"], [149, 1, 1, "", "AutoOPTRound"], [149, 1, 1, "", "AutoRound"], [149, 1, 1, "", "SaveInputs"], [149, 1, 1, "", "WrapperMultiblock"], [149, 2, 1, "", "block_forward"], [149, 2, 1, "", "check_is_cpu"], [149, 2, 1, "", "collect_minmax_scale"], [149, 2, 1, "", "collect_round_v"], [149, 2, 1, "", "get_batch_dim"], [149, 2, 1, "", "get_block_names"], [149, 2, 1, "", "get_dataloader"], [149, 2, 1, "", "get_module"], [149, 2, 1, "", "get_scale_shape"], [149, 2, 1, "", "get_tokenizer_function"], [149, 2, 1, "", "move_input_to_device"], [149, 2, 1, "", "quant_weight"], [149, 2, 1, "", "quant_weight_actor"], [149, 2, 1, "", "quant_weight_asym"], [149, 2, 1, "", "quant_weight_sym"], [149, 2, 1, "", "quant_weight_w_scale"], [149, 2, 1, "", "round_ste"], [149, 2, 1, "", "sampling_inputs"], [149, 2, 1, "", "set_module"], [149, 2, 1, "", "unwrapper_block"], [149, 2, 1, "", "wrapper_block"]], "neural_compressor.adaptor.torch_utils.autoround.export": [[150, 2, 1, "", "export_compressed_model"]], "neural_compressor.adaptor.torch_utils.autoround.sign_sgd": [[153, 1, 1, "", "SGD"], [153, 2, 1, "", "sgd"]], "neural_compressor.adaptor.torch_utils.awq": [[154, 1, 1, "", "ActAwareWeightQuant"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[155, 1, 1, "", "BF16ModuleWrapper"], [155, 2, 1, "", "Convert"], [155, 2, 1, "", "bf16_symbolic_trace"]], "neural_compressor.adaptor.torch_utils.gptq": [[156, 1, 1, "", "GPTQ"], [156, 1, 1, "", "GPTQuantizer"], [156, 2, 1, "", "find_layers"], [156, 2, 1, "", "find_layers_name"], [156, 2, 1, "", "is_leaf"], [156, 2, 1, "", "log_quantizable_layers_per_transformer"], [156, 2, 1, "", "quantize"], [156, 2, 1, "", "trace_gptq_target_blocks"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[157, 1, 1, "", "HessianTrace"], [157, 1, 1, "", "Node_collector"], [157, 2, 1, "", "compare_weights"], [157, 2, 1, "", "hawq_top"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant": [[160, 0, 0, "-", "modified_pickle"], [161, 0, 0, "-", "quantize"], [162, 0, 0, "-", "torch_load"], [163, 0, 0, "-", "utils"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle": [[160, 3, 1, "", "PickleError"], [160, 3, 1, "", "PicklingError"], [160, 3, 1, "", "UnpicklingError"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize": [[161, 1, 1, "", "LayerWiseQuant"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load": [[162, 2, 1, "", "load"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils": [[163, 2, 1, "", "dowload_hf_model"], [163, 2, 1, "", "get_children"], [163, 2, 1, "", "get_module"], [163, 2, 1, "", "get_named_children"], [163, 2, 1, "", "get_super_module_by_name"], [163, 2, 1, "", "load_empty_model"], [163, 2, 1, "", "load_layer_wise_quantized_model"], [163, 2, 1, "", "load_tensor"], [163, 2, 1, "", "load_tensor_from_shard"], [163, 2, 1, "", "update_module"]], "neural_compressor.adaptor.torch_utils.mixed_precision": [[164, 2, 1, "", "ipex_mixed_precision"]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[165, 1, 1, "", "FakeAffineTensorQuantFunction"], [165, 1, 1, "", "MulLinear"], [165, 1, 1, "", "TEQLinearFakeQuant"]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[166, 1, 1, "", "TransformerBasedModelBlockPatternDetector"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[167, 1, 1, "", "TorchSmoothQuant"], [167, 2, 1, "", "get_module"], [167, 2, 1, "", "set_module"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[168, 2, 1, "", "symbolic_trace"], [168, 2, 1, "", "trace_and_fuse_sub_graph"]], "neural_compressor.adaptor.torch_utils.teq": [[169, 1, 1, "", "TEQuantizer"]], "neural_compressor.adaptor.torch_utils.util": [[170, 2, 1, "", "append_attr"], [170, 2, 1, "", "auto_copy"], [170, 2, 1, "", "calculate_quant_min_max"], [170, 2, 1, "", "calibration"], [170, 2, 1, "", "check_cfg_and_qconfig"], [170, 2, 1, "", "collate_torch_preds"], [170, 2, 1, "", "collect_weight_info"], [170, 2, 1, "", "fetch_module"], [170, 2, 1, "", "forward_wrapper"], [170, 2, 1, "", "generate_activation_observer"], [170, 2, 1, "", "get_absorb_layers"], [170, 2, 1, "", "get_block_prefix"], [170, 2, 1, "", "get_depth"], [170, 2, 1, "", "get_dict_at_depth"], [170, 2, 1, "", "get_element_under_depth"], [170, 2, 1, "", "get_embedding_contiguous"], [170, 2, 1, "", "get_example_input"], [170, 2, 1, "", "get_fallback_order"], [170, 2, 1, "", "get_hidden_states"], [170, 2, 1, "", "get_module_input_output"], [170, 2, 1, "", "get_mse_order_per_fp32"], [170, 2, 1, "", "get_mse_order_per_int8"], [170, 2, 1, "", "get_op_type_by_name"], [170, 2, 1, "", "get_quantizable_ops_from_cfgs"], [170, 2, 1, "", "get_torch_version"], [170, 2, 1, "", "input2tuple"], [170, 2, 1, "", "is_fused_module"], [170, 2, 1, "", "match_datatype_pattern"], [170, 2, 1, "", "move_input_device"], [170, 2, 1, "", "paser_cfgs"], [170, 2, 1, "", "set_module"], [170, 2, 1, "", "simple_inference"], [170, 2, 1, "", "update_sq_scale"]], "neural_compressor.adaptor.torch_utils.weight_only": [[171, 2, 1, "", "awq_quantize"], [171, 2, 1, "", "gptq_quantize"], [171, 2, 1, "", "qdq_weight_actor"], [171, 2, 1, "", "qdq_weight_asym"], [171, 2, 1, "", "qdq_weight_sym"], [171, 2, 1, "", "quant_weight"], [171, 2, 1, "", "quant_weight_w_scale"], [171, 2, 1, "", "quantize_4bit"], [171, 2, 1, "", "rtn_quantize"], [171, 2, 1, "", "search_clip"], [171, 2, 1, "", "teq_quantize"]], "neural_compressor.algorithm": [[172, 0, 0, "-", "algorithm"], [173, 0, 0, "-", "fast_bias_correction"], [175, 0, 0, "-", "smooth_quant"], [176, 0, 0, "-", "weight_correction"]], "neural_compressor.algorithm.algorithm": [[172, 1, 1, "", "ALGORITHMS"], [172, 1, 1, "", "Algorithm"], [172, 1, 1, "", "AlgorithmScheduler"], [172, 2, 1, "", "algorithm_registry"]], "neural_compressor.algorithm.fast_bias_correction": [[173, 1, 1, "", "FastBiasCorrection"]], "neural_compressor.algorithm.smooth_quant": [[175, 1, 1, "", "SmoothQuant"]], "neural_compressor.algorithm.weight_correction": [[176, 1, 1, "", "WeightCorrection"]], "neural_compressor.benchmark": [[177, 2, 1, "", "benchmark_with_raw_cmd"], [177, 2, 1, "", "call_one"], [177, 2, 1, "", "config_instance"], [177, 2, 1, "", "fit"], [177, 2, 1, "", "generate_prefix"], [177, 2, 1, "", "get_architecture"], [177, 2, 1, "", "get_bounded_threads"], [177, 2, 1, "", "get_core_ids"], [177, 2, 1, "", "get_physical_ids"], [177, 2, 1, "", "get_threads"], [177, 2, 1, "", "get_threads_per_core"], [177, 2, 1, "", "profile"], [177, 2, 1, "", "run_instance"], [177, 2, 1, "", "set_all_env_var"], [177, 2, 1, "", "set_env_var"], [177, 2, 1, "", "summary_benchmark"]], "neural_compressor.common": [[178, 0, 0, "-", "base_config"], [179, 0, 0, "-", "base_tuning"], [181, 0, 0, "-", "logger"], [182, 0, 0, "-", "utility"]], "neural_compressor.common.base_config": [[178, 1, 1, "", "BaseConfig"], [178, 1, 1, "", "ComposableConfig"], [178, 2, 1, "", "register_config"]], "neural_compressor.common.base_tuning": [[179, 1, 1, "", "Evaluator"], [179, 1, 1, "", "TuningConfig"], [179, 1, 1, "", "TuningLogger"]], "neural_compressor.common.logger": [[181, 1, 1, "", "Logger"], [181, 2, 1, "", "debug"], [181, 2, 1, "", "error"], [181, 2, 1, "", "fatal"], [181, 2, 1, "", "info"], [181, 2, 1, "", "log"], [181, 2, 1, "", "warn"], [181, 2, 1, "", "warning"]], "neural_compressor.compression": [[183, 0, 0, "-", "callbacks"], [185, 0, 0, "-", "distillation"], [188, 0, 0, "-", "hpo"], [195, 0, 0, "-", "pruner"]], "neural_compressor.compression.callbacks": [[183, 1, 1, "", "BaseCallbacks"], [183, 1, 1, "", "DistillationCallbacks"], [183, 1, 1, "", "PruningCallbacks"], [183, 1, 1, "", "QuantizationAwareTrainingCallbacks"]], "neural_compressor.compression.callbacks.DistillationCallbacks": [[183, 4, 1, "", "_epoch_ran"], [183, 4, 1, "", "best_model"], [183, 4, 1, "", "best_score"], [183, 4, 1, "", "eval_frequency"]], "neural_compressor.compression.distillation": [[184, 0, 0, "-", "criterions"], [186, 0, 0, "-", "optimizers"], [187, 0, 0, "-", "utility"]], "neural_compressor.compression.distillation.criterions": [[184, 1, 1, "", "Criterions"], [184, 1, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [184, 1, 1, "", "KnowledgeDistillationFramework"], [184, 1, 1, "", "KnowledgeDistillationLoss"], [184, 1, 1, "", "PyTorchCriterions"], [184, 1, 1, "", "PyTorchCrossEntropyLoss"], [184, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [184, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [184, 1, 1, "", "PyTorchKnowledgeDistillationLoss"], [184, 1, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [184, 1, 1, "", "PyTorchSelfKnowledgeDistillationLoss"], [184, 1, 1, "", "PyTorchSelfKnowledgeDistillationLossWrapper"], [184, 1, 1, "", "SelfKnowledgeDistillationLoss"], [184, 1, 1, "", "TensorFlowCrossEntropyLoss"], [184, 1, 1, "", "TensorFlowSparseCategoricalCrossentropy"], [184, 1, 1, "", "TensorflowCriterions"], [184, 1, 1, "", "TensorflowKnowledgeDistillationLoss"], [184, 1, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [184, 1, 1, "", "TensorflowKnowledgeDistillationLossWrapper"], [184, 2, 1, "", "criterion_registry"]], "neural_compressor.compression.distillation.optimizers": [[186, 1, 1, "", "Optimizers"], [186, 1, 1, "", "PyTorchOptimizers"], [186, 1, 1, "", "PyTorchSGD"], [186, 1, 1, "", "TensorFlowAdam"], [186, 1, 1, "", "TensorFlowAdamW"], [186, 1, 1, "", "TensorFlowSGD"], [186, 1, 1, "", "TensorflowOptimizers"], [186, 2, 1, "", "optimizer_registry"]], "neural_compressor.compression.distillation.utility": [[187, 2, 1, "", "get_activation"], [187, 2, 1, "", "record_output"]], "neural_compressor.compression.hpo": [[189, 0, 0, "-", "sa_optimizer"], [190, 0, 0, "-", "search_algorithms"], [191, 0, 0, "-", "search_space"]], "neural_compressor.compression.hpo.search_algorithms": [[190, 1, 1, "", "BayesianOptimizationSearcher"], [190, 1, 1, "", "GridSearcher"], [190, 1, 1, "", "RandomSearcher"], [190, 1, 1, "", "Searcher"], [190, 1, 1, "", "XgbSearcher"], [190, 2, 1, "", "register_searcher"]], "neural_compressor.compression.hpo.search_space": [[191, 1, 1, "", "BaseSearchSpace"], [191, 1, 1, "", "ContinuousSearchSpace"], [191, 1, 1, "", "DiscreteSearchSpace"], [191, 1, 1, "", "SearchSpace"], [191, 2, 1, "", "register_searchspace"]], "neural_compressor.compression.pruner": [[193, 0, 0, "-", "criteria"], [194, 0, 0, "-", "dsnot"], [197, 0, 0, "-", "model_slim"], [201, 0, 0, "-", "patterns"], [195, 2, 1, "", "prepare_pruning"], [208, 0, 0, "-", "pruners"], [214, 0, 0, "-", "pruning"], [215, 0, 0, "-", "regs"], [195, 2, 1, "", "save"], [216, 0, 0, "-", "schedulers"], [217, 0, 0, "-", "tf_criteria"], [218, 0, 0, "-", "utils"], [219, 0, 0, "-", "wanda"]], "neural_compressor.compression.pruner.criteria": [[193, 1, 1, "", "BlockMaskCriterion"], [193, 1, 1, "", "GradientCriterion"], [193, 1, 1, "", "MagnitudeCriterion"], [193, 1, 1, "", "PruningCriterion"], [193, 1, 1, "", "RetrainFreeCriterion"], [193, 1, 1, "", "SnipCriterion"], [193, 1, 1, "", "SnipMomentumCriterion"], [193, 2, 1, "", "get_criterion"], [193, 2, 1, "", "register_criterion"]], "neural_compressor.compression.pruner.criteria.BlockMaskCriterion": [[193, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.GradientCriterion": [[193, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.MagnitudeCriterion": [[193, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.PruningCriterion": [[193, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion": [[193, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipCriterion": [[193, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion": [[193, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.dsnot": [[194, 2, 1, "", "DSnoT"], [194, 2, 1, "", "return_reorder_indice"]], "neural_compressor.compression.pruner.model_slim": [[196, 0, 0, "-", "auto_slim"], [198, 0, 0, "-", "pattern_analyzer"], [199, 0, 0, "-", "weight_slim"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[196, 2, 1, "", "generate_ffn2_pruning_config"], [196, 2, 1, "", "generate_mha_pruning_config"], [196, 2, 1, "", "model_slim"], [196, 2, 1, "", "model_slim_ffn2"], [196, 2, 1, "", "model_slim_mha"], [196, 2, 1, "", "parse_auto_slim_config"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[198, 1, 1, "", "ClassifierHeadSearcher"], [198, 1, 1, "", "ClassifierHeadSearcherTF"], [198, 1, 1, "", "JitBasicSearcher"], [198, 1, 1, "", "Linear2LinearSearcher"], [198, 1, 1, "", "RecipeSearcher"], [198, 1, 1, "", "SelfMHASearcher"], [198, 2, 1, "", "get_attributes"], [198, 2, 1, "", "get_common_module"], [198, 2, 1, "", "print_iterables"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher": [[198, 4, 1, "", "device"], [198, 4, 1, "", "flatten_static_graph"], [198, 4, 1, "", "model"], [198, 4, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF": [[198, 4, 1, "", "device"], [198, 4, 1, "", "flatten_static_graph"], [198, 4, 1, "", "model"], [198, 4, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher": [[198, 4, 1, "", "device"], [198, 4, 1, "", "flatten_static_graph"], [198, 4, 1, "", "model"], [198, 4, 1, "", "searching_results"], [198, 4, 1, "", "static_graph"], [198, 4, 1, "", "target_layers"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher": [[198, 4, 1, "", "current_pattern"], [198, 4, 1, "", "device"], [198, 4, 1, "", "flatten_static_graph"], [198, 4, 1, "", "model"], [198, 4, 1, "", "searching_results"], [198, 4, 1, "", "static_graph"], [198, 4, 1, "", "target_layers"], [198, 4, 1, "", "target_op_lut"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher": [[198, 4, 1, "", "model"], [198, 4, 1, "", "recipe"], [198, 4, 1, "", "searching_results"], [198, 4, 1, "", "targets"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher": [[198, 4, 1, "", "device"], [198, 4, 1, "", "flatten_static_graph"], [198, 4, 1, "", "model"], [198, 4, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[199, 1, 1, "", "LinearCompression"], [199, 1, 1, "", "LinearCompressionIterator"], [199, 1, 1, "", "PostCompressionUtils"]], "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression": [[199, 4, 1, "", "device"], [199, 4, 1, "", "layer_1"], [199, 4, 1, "", "layer_2"]], "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator": [[199, 4, 1, "", "linear_patterns"]], "neural_compressor.compression.pruner.patterns": [[200, 0, 0, "-", "base"], [201, 2, 1, "", "get_pattern"], [202, 0, 0, "-", "mha"], [203, 0, 0, "-", "ninm"], [204, 0, 0, "-", "nxm"]], "neural_compressor.compression.pruner.patterns.base": [[200, 1, 1, "", "BasePattern"], [200, 1, 1, "", "KerasBasePattern"], [200, 1, 1, "", "PytorchBasePattern"], [200, 2, 1, "", "register_pattern"]], "neural_compressor.compression.pruner.patterns.base.BasePattern": [[200, 4, 1, "", "config"], [200, 4, 1, "", "invalid_layers"], [200, 4, 1, "", "is_global"], [200, 4, 1, "", "keep_mask_layers"], [200, 4, 1, "", "max_sparsity_ratio_per_op"], [200, 4, 1, "", "min_sparsity_ratio_per_op"], [200, 4, 1, "", "modules"], [200, 4, 1, "", "pattern"], [200, 4, 1, "", "target_sparsity"]], "neural_compressor.compression.pruner.patterns.base.KerasBasePattern": [[200, 4, 1, "", "config"], [200, 4, 1, "", "invalid_layers"], [200, 4, 1, "", "is_global"], [200, 4, 1, "", "keep_mask_layers"], [200, 4, 1, "", "max_sparsity_ratio_per_op"], [200, 4, 1, "", "min_sparsity_ratio_per_op"], [200, 4, 1, "", "modules"], [200, 4, 1, "", "pattern"], [200, 4, 1, "", "target_sparsity"]], "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern": [[200, 4, 1, "", "config"], [200, 4, 1, "", "invalid_layers"], [200, 4, 1, "", "is_global"], [200, 4, 1, "", "keep_mask_layers"], [200, 4, 1, "", "max_sparsity_ratio_per_op"], [200, 4, 1, "", "min_sparsity_ratio_per_op"], [200, 4, 1, "", "modules"], [200, 4, 1, "", "pattern"], [200, 4, 1, "", "target_sparsity"]], "neural_compressor.compression.pruner.patterns.mha": [[202, 1, 1, "", "PatternMHA"]], "neural_compressor.compression.pruner.patterns.mha.PatternMHA": [[202, 4, 1, "", "M"], [202, 4, 1, "", "N"]], "neural_compressor.compression.pruner.patterns.ninm": [[203, 1, 1, "", "PytorchPatternNInM"]], "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM": [[203, 4, 1, "", "M"], [203, 4, 1, "", "N"]], "neural_compressor.compression.pruner.patterns.nxm": [[204, 1, 1, "", "KerasPatternNxM"], [204, 1, 1, "", "PytorchPatternNxM"]], "neural_compressor.compression.pruner.patterns.nxm.KerasPatternNxM": [[204, 4, 1, "", "block_size"]], "neural_compressor.compression.pruner.patterns.nxm.PytorchPatternNxM": [[204, 4, 1, "", "block_size"]], "neural_compressor.compression.pruner.pruners": [[205, 0, 0, "-", "base"], [206, 0, 0, "-", "basic"], [207, 0, 0, "-", "block_mask"], [208, 2, 1, "", "get_pruner"], [209, 0, 0, "-", "mha"], [208, 2, 1, "", "parse_valid_pruner_types"], [210, 0, 0, "-", "pattern_lock"], [211, 0, 0, "-", "progressive"], [212, 0, 0, "-", "retrain_free"], [213, 0, 0, "-", "sparse_gpt"]], "neural_compressor.compression.pruner.pruners.base": [[205, 1, 1, "", "BasePruner"], [205, 1, 1, "", "KerasBasePruner"], [205, 1, 1, "", "PytorchBasePruner"], [205, 2, 1, "", "register_pruner"]], "neural_compressor.compression.pruner.pruners.base.BasePruner": [[205, 4, 1, "", "config"], [205, 4, 1, "", "current_sparsity_ratio"], [205, 4, 1, "", "end_step"], [205, 4, 1, "", "global_step"], [205, 4, 1, "", "masks"], [205, 4, 1, "", "max_sparsity_ratio_per_op"], [205, 4, 1, "", "modules"], [205, 4, 1, "", "pattern"], [205, 4, 1, "", "pruning_frequency"], [205, 4, 1, "", "scheduler"], [205, 4, 1, "", "scores"], [205, 4, 1, "", "start_step"], [205, 4, 1, "", "target_sparsity_ratio"]], "neural_compressor.compression.pruner.pruners.base.KerasBasePruner": [[205, 4, 1, "", "config"], [205, 4, 1, "", "current_sparsity_ratio"], [205, 4, 1, "", "end_step"], [205, 4, 1, "", "global_step"], [205, 4, 1, "", "masks"], [205, 4, 1, "", "max_sparsity_ratio_per_op"], [205, 4, 1, "", "modules"], [205, 4, 1, "", "pattern"], [205, 4, 1, "", "pruning_frequency"], [205, 4, 1, "", "scheduler"], [205, 4, 1, "", "scores"], [205, 4, 1, "", "start_step"], [205, 4, 1, "", "target_sparsity_ratio"]], "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner": [[205, 4, 1, "", "config"], [205, 4, 1, "", "current_sparsity_ratio"], [205, 4, 1, "", "end_step"], [205, 4, 1, "", "global_step"], [205, 4, 1, "", "masks"], [205, 4, 1, "", "max_sparsity_ratio_per_op"], [205, 4, 1, "", "modules"], [205, 4, 1, "", "pattern"], [205, 4, 1, "", "pruning_frequency"], [205, 4, 1, "", "scheduler"], [205, 4, 1, "", "scores"], [205, 4, 1, "", "start_step"], [205, 4, 1, "", "target_sparsity_ratio"]], "neural_compressor.compression.pruner.pruners.basic": [[206, 1, 1, "", "KerasBasicPruner"], [206, 1, 1, "", "PytorchBasicPruner"]], "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner": [[206, 4, 1, "", "criterion"], [206, 4, 1, "", "pattern"], [206, 4, 1, "", "reg"], [206, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner": [[206, 4, 1, "", "criterion"], [206, 4, 1, "", "pattern"], [206, 4, 1, "", "reg"], [206, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.block_mask": [[207, 1, 1, "", "PytorchBlockMaskPruner"]], "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner": [[207, 4, 1, "", "criterion"], [207, 4, 1, "", "pattern"], [207, 4, 1, "", "reg"], [207, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.mha": [[209, 1, 1, "", "PythonMultiheadAttentionPruner"]], "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner": [[209, 4, 1, "", "head_masks"], [209, 4, 1, "", "linear_layers"], [209, 4, 1, "", "mha_compressions"], [209, 4, 1, "", "mha_scores"]], "neural_compressor.compression.pruner.pruners.pattern_lock": [[210, 1, 1, "", "PytorchPatternLockPruner"]], "neural_compressor.compression.pruner.pruners.progressive": [[211, 1, 1, "", "PytorchProgressivePruner"]], "neural_compressor.compression.pruner.pruners.retrain_free": [[212, 1, 1, "", "PytorchRetrainFreePruner"]], "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner": [[212, 4, 1, "", "criterion"], [212, 4, 1, "", "pattern"], [212, 4, 1, "", "reg"], [212, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.sparse_gpt": [[213, 1, 1, "", "SparseGPTPruner"]], "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner": [[213, 4, 1, "", "criterion"], [213, 4, 1, "", "pattern"], [213, 4, 1, "", "reg"], [213, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruning": [[214, 1, 1, "", "BasePruning"], [214, 1, 1, "", "BasicPruning"], [214, 1, 1, "", "RetrainFreePruning"], [214, 1, 1, "", "SparseGPTPruning"], [214, 2, 1, "", "register_pruning"]], "neural_compressor.compression.pruner.pruning.BasePruning": [[214, 4, 1, "", "config_file_path"], [214, 4, 1, "", "model"], [214, 4, 1, "", "pruner_info"], [214, 4, 1, "", "pruners"]], "neural_compressor.compression.pruner.pruning.BasicPruning": [[214, 4, 1, "", "config_file_path"], [214, 4, 1, "", "model"], [214, 4, 1, "", "pruner_info"], [214, 4, 1, "", "pruners"]], "neural_compressor.compression.pruner.pruning.RetrainFreePruning": [[214, 4, 1, "", "config_file_path"], [214, 4, 1, "", "model"], [214, 4, 1, "", "pruner_info"], [214, 4, 1, "", "pruners"]], "neural_compressor.compression.pruner.regs": [[215, 1, 1, "", "BaseReg"], [215, 1, 1, "", "GroupLasso"], [215, 2, 1, "", "get_reg"], [215, 2, 1, "", "get_reg_type"], [215, 2, 1, "", "register_reg"]], "neural_compressor.compression.pruner.regs.GroupLasso": [[215, 4, 1, "", "alpha"], [215, 4, 1, "", "reg_terms"]], "neural_compressor.compression.pruner.schedulers": [[216, 1, 1, "", "IterativeScheduler"], [216, 1, 1, "", "OneshotScheduler"], [216, 1, 1, "", "PruningScheduler"], [216, 2, 1, "", "get_scheduler"], [216, 2, 1, "", "register_scheduler"]], "neural_compressor.compression.pruner.schedulers.PruningScheduler": [[216, 4, 1, "", "config"]], "neural_compressor.compression.pruner.tf_criteria": [[217, 1, 1, "", "MagnitudeCriterion"], [217, 1, 1, "", "PruningCriterion"], [217, 2, 1, "", "get_tf_criterion"], [217, 2, 1, "", "register_criterion"]], "neural_compressor.compression.pruner.tf_criteria.MagnitudeCriterion": [[217, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.tf_criteria.PruningCriterion": [[217, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.utils": [[218, 2, 1, "", "check_config"], [218, 2, 1, "", "check_key_validity"], [218, 2, 1, "", "collect_layer_inputs"], [218, 2, 1, "", "generate_pruner_config"], [218, 2, 1, "", "get_layers"], [218, 2, 1, "", "get_sparsity_ratio"], [218, 2, 1, "", "get_sparsity_ratio_tf"], [218, 2, 1, "", "parse_last_linear"], [218, 2, 1, "", "parse_last_linear_tf"], [218, 2, 1, "", "parse_to_prune"], [218, 2, 1, "", "parse_to_prune_tf"], [218, 2, 1, "", "process_and_check_config"], [218, 2, 1, "", "process_config"], [218, 2, 1, "", "process_weight_config"], [218, 2, 1, "", "process_yaml_config"], [218, 2, 1, "", "reset_none_to_default"], [218, 2, 1, "", "update_params"]], "neural_compressor.compression.pruner.wanda": [[220, 0, 0, "-", "prune"], [221, 0, 0, "-", "utils"], [222, 0, 0, "-", "wrapper"]], "neural_compressor.compression.pruner.wanda.prune": [[220, 2, 1, "", "prune_wanda"]], "neural_compressor.compression.pruner.wanda.utils": [[221, 2, 1, "", "find_layers"]], "neural_compressor.compression.pruner.wanda.wrapper": [[222, 1, 1, "", "WrappedGPT"]], "neural_compressor.conf": [[223, 0, 0, "-", "config"], [224, 0, 0, "-", "dotdict"], [226, 0, 0, "-", "pythonic_config"]], "neural_compressor.conf.config": [[223, 1, 1, "", "Benchmark_Conf"], [223, 1, 1, "", "Conf"], [223, 1, 1, "", "DefaultConf"], [223, 1, 1, "", "Distillation_Conf"], [223, 1, 1, "", "Graph_Optimization_Conf"], [223, 1, 1, "", "MixedPrecision_Conf"], [223, 1, 1, "", "NASConfig"], [223, 1, 1, "", "PrunerV2"], [223, 1, 1, "", "Pruning_Conf"], [223, 1, 1, "", "Quantization_Conf"]], "neural_compressor.conf.dotdict": [[224, 1, 1, "", "DotDict"], [224, 2, 1, "", "deep_get"], [224, 2, 1, "", "deep_set"]], "neural_compressor.conf.pythonic_config": [[226, 1, 1, "", "AccuracyCriterion"], [226, 1, 1, "", "BenchmarkConfig"], [226, 1, 1, "", "DistillationConfig"], [226, 1, 1, "", "KnowledgeDistillationLossConfig"], [226, 1, 1, "", "Options"], [226, 1, 1, "", "QuantizationConfig"], [226, 1, 1, "", "WeightPruningConfig"]], "neural_compressor.config": [[227, 1, 1, "", "AccuracyCriterion"], [227, 1, 1, "", "BenchmarkConfig"], [227, 1, 1, "", "DistillationConfig"], [227, 1, 1, "", "DotDict"], [227, 1, 1, "", "ExportConfig"], [227, 1, 1, "", "HPOConfig"], [227, 1, 1, "", "IntermediateLayersKnowledgeDistillationLossConfig"], [227, 1, 1, "", "Keras"], [227, 1, 1, "", "KnowledgeDistillationLossConfig"], [227, 1, 1, "", "MXNet"], [227, 1, 1, "", "MixedPrecisionConfig"], [227, 1, 1, "", "NASConfig"], [227, 1, 1, "", "ONNX"], [227, 1, 1, "", "ONNXQlinear2QDQConfig"], [227, 1, 1, "", "Options"], [227, 1, 1, "", "PostTrainingQuantConfig"], [227, 1, 1, "", "PyTorch"], [227, 1, 1, "", "QuantizationAwareTrainingConfig"], [227, 1, 1, "", "SelfKnowledgeDistillationLossConfig"], [227, 1, 1, "", "TF2ONNXConfig"], [227, 1, 1, "", "TensorFlow"], [227, 1, 1, "", "Torch2ONNXConfig"], [227, 1, 1, "", "TuningCriterion"], [227, 1, 1, "", "WeightPruningConfig"]], "neural_compressor.contrib": [[229, 0, 0, "-", "strategy"]], "neural_compressor.contrib.strategy": [[230, 0, 0, "-", "sigopt"], [231, 0, 0, "-", "tpe"]], "neural_compressor.contrib.strategy.sigopt": [[230, 1, 1, "", "SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[231, 1, 1, "", "TpeTuneStrategy"]], "neural_compressor.data": [[236, 0, 0, "-", "dataloaders"], [248, 0, 0, "-", "datasets"], [252, 0, 0, "-", "filters"], [256, 0, 0, "-", "transforms"]], "neural_compressor.data.dataloaders": [[232, 0, 0, "-", "base_dataloader"], [233, 0, 0, "-", "dataloader"], [234, 0, 0, "-", "default_dataloader"], [235, 0, 0, "-", "fetcher"], [237, 0, 0, "-", "mxnet_dataloader"], [238, 0, 0, "-", "onnxrt_dataloader"], [239, 0, 0, "-", "pytorch_dataloader"], [240, 0, 0, "-", "sampler"], [241, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.data.dataloaders.base_dataloader": [[232, 1, 1, "", "BaseDataLoader"]], "neural_compressor.data.dataloaders.dataloader": [[233, 1, 1, "", "DataLoader"], [233, 2, 1, "", "check_dataloader"]], "neural_compressor.data.dataloaders.default_dataloader": [[234, 1, 1, "", "DefaultDataLoader"], [234, 2, 1, "", "default_collate"]], "neural_compressor.data.dataloaders.fetcher": [[235, 1, 1, "", "Fetcher"], [235, 1, 1, "", "IndexFetcher"], [235, 1, 1, "", "IterableFetcher"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[237, 1, 1, "", "MXNetDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[238, 1, 1, "", "ONNXRTBertDataLoader"], [238, 1, 1, "", "ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[239, 1, 1, "", "PyTorchDataLoader"]], "neural_compressor.data.dataloaders.sampler": [[240, 1, 1, "", "BatchSampler"], [240, 1, 1, "", "IterableSampler"], [240, 1, 1, "", "Sampler"], [240, 1, 1, "", "SequentialSampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[241, 1, 1, "", "TFDataDataLoader"], [241, 1, 1, "", "TensorflowBertDataLoader"], [241, 1, 1, "", "TensorflowDataLoader"], [241, 1, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.data.datasets": [[242, 0, 0, "-", "bert_dataset"], [243, 0, 0, "-", "coco_dataset"], [244, 0, 0, "-", "dataset"], [245, 0, 0, "-", "dummy_dataset"], [246, 0, 0, "-", "dummy_dataset_v2"], [247, 0, 0, "-", "imagenet_dataset"], [249, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.data.datasets.bert_dataset": [[242, 1, 1, "", "InputFeatures"], [242, 1, 1, "", "ONNXRTBertDataset"], [242, 1, 1, "", "ParseDecodeBert"], [242, 1, 1, "", "PytorchBertDataset"], [242, 1, 1, "", "TensorflowBertDataset"], [242, 1, 1, "", "TensorflowModelZooBertDataset"], [242, 2, 1, "", "convert_examples_to_features"], [242, 2, 1, "", "load_and_cache_examples"]], "neural_compressor.data.datasets.coco_dataset": [[243, 1, 1, "", "COCONpy"], [243, 1, 1, "", "COCORaw"], [243, 1, 1, "", "COCORecordDataset"], [243, 1, 1, "", "ParseDecodeCoco"]], "neural_compressor.data.datasets.dataset": [[244, 1, 1, "", "CIFAR10"], [244, 1, 1, "", "CIFAR100"], [244, 1, 1, "", "Dataset"], [244, 1, 1, "", "Datasets"], [244, 1, 1, "", "FashionMNIST"], [244, 1, 1, "", "ImageFolder"], [244, 1, 1, "", "IterableDataset"], [244, 1, 1, "", "MNIST"], [244, 1, 1, "", "MXNetCIFAR10"], [244, 1, 1, "", "MXNetCIFAR100"], [244, 1, 1, "", "MXNetDatasets"], [244, 1, 1, "", "MXNetFashionMNIST"], [244, 1, 1, "", "MXNetImageFolder"], [244, 1, 1, "", "MXNetMNIST"], [244, 1, 1, "", "ONNXRTITDatasets"], [244, 1, 1, "", "ONNXRTQLDatasets"], [244, 1, 1, "", "PyTorchDatasets"], [244, 1, 1, "", "PytorchCIFAR10"], [244, 1, 1, "", "PytorchCIFAR100"], [244, 1, 1, "", "PytorchFashionMNIST"], [244, 1, 1, "", "PytorchMNIST"], [244, 1, 1, "", "PytorchMxnetWrapDataset"], [244, 1, 1, "", "PytorchMxnetWrapFunction"], [244, 1, 1, "", "Tensorflow"], [244, 1, 1, "", "TensorflowCIFAR10"], [244, 1, 1, "", "TensorflowCIFAR100"], [244, 1, 1, "", "TensorflowDatasets"], [244, 1, 1, "", "TensorflowFashionMNIST"], [244, 1, 1, "", "TensorflowImageRecord"], [244, 1, 1, "", "TensorflowMNIST"], [244, 1, 1, "", "TensorflowTFRecordDataset"], [244, 1, 1, "", "TensorflowVOCRecord"], [244, 2, 1, "", "calculate_md5"], [244, 2, 1, "", "check_integrity"], [244, 2, 1, "", "dataset_registry"], [244, 2, 1, "", "download_url"], [244, 5, 1, "", "framework_datasets"], [244, 2, 1, "", "gen_bar_updater"]], "neural_compressor.data.datasets.dummy_dataset": [[245, 1, 1, "", "DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[246, 1, 1, "", "DummyDataset"], [246, 1, 1, "", "SparseDummyDataset"]], "neural_compressor.data.datasets.imagenet_dataset": [[247, 1, 1, "", "ImagenetRaw"], [247, 1, 1, "", "MXNetImagenetRaw"], [247, 1, 1, "", "ONNXRTImagenetDataset"], [247, 1, 1, "", "PytorchImagenetRaw"], [247, 1, 1, "", "TensorflowImagenetDataset"], [247, 1, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.data.datasets.style_transfer_dataset": [[249, 1, 1, "", "StyleTransferDataset"]], "neural_compressor.data.filters": [[250, 0, 0, "-", "coco_filter"], [251, 0, 0, "-", "filter"]], "neural_compressor.data.filters.coco_filter": [[250, 1, 1, "", "LabelBalanceCOCORawFilter"], [250, 1, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.filter": [[251, 1, 1, "", "FILTERS"], [251, 1, 1, "", "Filter"], [251, 1, 1, "", "MXNetFilters"], [251, 1, 1, "", "ONNXRTITFilters"], [251, 1, 1, "", "ONNXRTQLFilters"], [251, 1, 1, "", "PyTorchFilters"], [251, 1, 1, "", "TensorflowFilters"], [251, 2, 1, "", "filter_registry"]], "neural_compressor.data.transforms": [[254, 0, 0, "-", "coco_transform"], [255, 0, 0, "-", "imagenet_transform"], [257, 0, 0, "-", "postprocess"], [258, 0, 0, "-", "tokenization"], [259, 0, 0, "-", "transform"]], "neural_compressor.data.transforms.coco_transform": [[254, 1, 1, "", "ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.imagenet_transform": [[255, 1, 1, "", "BilinearImagenetTransform"], [255, 1, 1, "", "LabelShift"], [255, 1, 1, "", "ONNXResizeCropImagenetTransform"], [255, 1, 1, "", "OnnxBilinearImagenetTransform"], [255, 1, 1, "", "ParseDecodeImagenet"], [255, 1, 1, "", "ParseDecodeImagenetTransform"], [255, 1, 1, "", "QuantizedInput"], [255, 1, 1, "", "ResizeWithAspectRatio"], [255, 1, 1, "", "TensorflowResizeCropImagenetTransform"], [255, 1, 1, "", "TensorflowShiftRescale"], [255, 1, 1, "", "TensorflowTransposeLastChannel"]], "neural_compressor.data.transforms.postprocess": [[257, 1, 1, "", "Postprocess"]], "neural_compressor.data.transforms.tokenization": [[258, 1, 1, "", "BasicTokenizer"], [258, 1, 1, "", "FullTokenizer"], [258, 1, 1, "", "WordpieceTokenizer"], [258, 2, 1, "", "convert_by_vocab"], [258, 2, 1, "", "convert_to_unicode"], [258, 2, 1, "", "load_vocab"], [258, 2, 1, "", "whitespace_tokenize"]], "neural_compressor.data.transforms.transform": [[259, 1, 1, "", "AlignImageChannelTransform"], [259, 1, 1, "", "BaseTransform"], [259, 1, 1, "", "CastONNXTransform"], [259, 1, 1, "", "CastPyTorchTransform"], [259, 1, 1, "", "CastTFTransform"], [259, 1, 1, "", "CenterCropTFTransform"], [259, 1, 1, "", "CenterCropTransform"], [259, 1, 1, "", "CollectTransform"], [259, 1, 1, "", "ComposeTransform"], [259, 1, 1, "", "CropResizeTFTransform"], [259, 1, 1, "", "CropResizeTransform"], [259, 1, 1, "", "CropToBoundingBox"], [259, 1, 1, "", "InputFeatures"], [259, 1, 1, "", "MXNetCropResizeTransform"], [259, 1, 1, "", "MXNetCropToBoundingBox"], [259, 1, 1, "", "MXNetNormalizeTransform"], [259, 1, 1, "", "MXNetTransforms"], [259, 1, 1, "", "MXNetTranspose"], [259, 1, 1, "", "NormalizeTFTransform"], [259, 1, 1, "", "NormalizeTransform"], [259, 1, 1, "", "ONNXRTCropToBoundingBox"], [259, 1, 1, "", "ONNXRTITTransforms"], [259, 1, 1, "", "ONNXRTQLTransforms"], [259, 1, 1, "", "PaddedCenterCropTransform"], [259, 1, 1, "", "ParseDecodeVocTransform"], [259, 1, 1, "", "PyTorchAlignImageChannel"], [259, 1, 1, "", "PyTorchCropResizeTransform"], [259, 1, 1, "", "PyTorchNormalizeTransform"], [259, 1, 1, "", "PyTorchTransforms"], [259, 1, 1, "", "PyTorchTranspose"], [259, 1, 1, "", "PytorchMxnetTransform"], [259, 1, 1, "", "PytorchMxnetWrapFunction"], [259, 1, 1, "", "RandomCropTFTransform"], [259, 1, 1, "", "RandomCropTransform"], [259, 1, 1, "", "RandomHorizontalFlip"], [259, 1, 1, "", "RandomResizedCropMXNetTransform"], [259, 1, 1, "", "RandomResizedCropPytorchTransform"], [259, 1, 1, "", "RandomResizedCropTFTransform"], [259, 1, 1, "", "RandomResizedCropTransform"], [259, 1, 1, "", "RandomVerticalFlip"], [259, 1, 1, "", "RescaleKerasPretrainTransform"], [259, 1, 1, "", "RescaleTFTransform"], [259, 1, 1, "", "RescaleTransform"], [259, 1, 1, "", "ResizeMXNetTransform"], [259, 1, 1, "", "ResizePytorchTransform"], [259, 1, 1, "", "ResizeTFTransform"], [259, 1, 1, "", "ResizeTransform"], [259, 1, 1, "", "ResizeWithRatio"], [259, 1, 1, "", "SquadExample"], [259, 1, 1, "", "TFModelZooCollectTransform"], [259, 1, 1, "", "TFSquadV1ModelZooPostTransform"], [259, 1, 1, "", "TFSquadV1PostTransform"], [259, 1, 1, "", "TRANSFORMS"], [259, 1, 1, "", "TensorflowCropToBoundingBox"], [259, 1, 1, "", "TensorflowRandomHorizontalFlip"], [259, 1, 1, "", "TensorflowRandomVerticalFlip"], [259, 1, 1, "", "TensorflowResizeWithRatio"], [259, 1, 1, "", "TensorflowTransform"], [259, 1, 1, "", "TensorflowTransforms"], [259, 1, 1, "", "TensorflowTranspose"], [259, 1, 1, "", "TensorflowWrapFunction"], [259, 1, 1, "", "ToArray"], [259, 1, 1, "", "ToNDArrayTransform"], [259, 1, 1, "", "Transforms"], [259, 1, 1, "", "Transpose"], [259, 2, 1, "", "convert_examples_to_features"], [259, 2, 1, "", "get_final_text"], [259, 2, 1, "", "get_torchvision_map"], [259, 2, 1, "", "read_squad_examples"], [259, 2, 1, "", "transform_registry"]], "neural_compressor.experimental": [[260, 0, 0, "-", "benchmark"], [263, 0, 0, "-", "common"], [269, 0, 0, "-", "component"], [270, 0, 0, "-", "compression"], [271, 0, 0, "-", "contrib"], [296, 0, 0, "-", "data"], [301, 0, 0, "-", "distillation"], [302, 0, 0, "-", "export"], [306, 0, 0, "-", "graph_optimization"], [314, 0, 0, "-", "metric"], [316, 0, 0, "-", "mixed_precision"], [317, 0, 0, "-", "model_conversion"], [320, 0, 0, "-", "nas"], [326, 0, 0, "-", "pruner_legacy"], [330, 0, 0, "-", "pruning"], [331, 0, 0, "-", "pruning_recipes"], [335, 0, 0, "-", "pruning_v2"], [336, 0, 0, "-", "pytorch_pruner"], [343, 0, 0, "-", "quantization"], [344, 0, 0, "-", "scheduler"], [349, 0, 0, "-", "strategy"]], "neural_compressor.experimental.benchmark": [[260, 1, 1, "", "Benchmark"], [260, 2, 1, "", "get_architecture"], [260, 2, 1, "", "get_bounded_threads"], [260, 2, 1, "", "get_core_ids"], [260, 2, 1, "", "get_physical_ids"], [260, 2, 1, "", "get_threads"], [260, 2, 1, "", "get_threads_per_core"], [260, 2, 1, "", "set_all_env_var"], [260, 2, 1, "", "set_env_var"]], "neural_compressor.experimental.common": [[261, 0, 0, "-", "criterion"], [262, 0, 0, "-", "dataloader"], [264, 0, 0, "-", "metric"], [265, 0, 0, "-", "model"], [266, 0, 0, "-", "optimizer"], [267, 0, 0, "-", "postprocess"], [268, 0, 0, "-", "torch_utils"]], "neural_compressor.experimental.common.criterion": [[261, 1, 1, "", "Criterions"], [261, 1, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [261, 1, 1, "", "KnowledgeDistillationFramework"], [261, 1, 1, "", "KnowledgeDistillationLoss"], [261, 1, 1, "", "PyTorchCriterions"], [261, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [261, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [261, 1, 1, "", "PyTorchKnowledgeDistillationLoss"], [261, 1, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [261, 1, 1, "", "SelfKnowledgeDistillationLoss"], [261, 1, 1, "", "TensorflowCriterions"], [261, 1, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [261, 2, 1, "", "criterion_registry"]], "neural_compressor.experimental.common.dataloader": [[262, 1, 1, "", "DataLoader"]], "neural_compressor.experimental.common.metric": [[264, 1, 1, "", "Metric"]], "neural_compressor.experimental.common.model": [[265, 1, 1, "", "Model"], [265, 2, 1, "", "set_backend"]], "neural_compressor.experimental.common.optimizer": [[266, 1, 1, "", "Optimizers"], [266, 1, 1, "", "PyTorchOptimizers"], [266, 1, 1, "", "PyTorchSGD"], [266, 1, 1, "", "TensorFlowAdamW"], [266, 1, 1, "", "TensorFlowSGD"], [266, 1, 1, "", "TensorflowOptimizers"], [266, 2, 1, "", "optimizer_registry"]], "neural_compressor.experimental.common.postprocess": [[267, 1, 1, "", "Postprocess"]], "neural_compressor.experimental.common.torch_utils": [[268, 2, 1, "", "get_activation"], [268, 2, 1, "", "record_output"]], "neural_compressor.experimental.component": [[269, 1, 1, "", "Component"]], "neural_compressor.experimental.contrib": [[272, 0, 0, "-", "strategy"]], "neural_compressor.experimental.contrib.strategy": [[273, 0, 0, "-", "sigopt"], [274, 0, 0, "-", "tpe"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[273, 1, 1, "", "SigOptTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.tpe": [[274, 1, 1, "", "TpeTuneStrategy"]], "neural_compressor.experimental.data": [[279, 0, 0, "-", "dataloaders"], [291, 0, 0, "-", "datasets"], [295, 0, 0, "-", "filters"], [298, 0, 0, "-", "transforms"]], "neural_compressor.experimental.data.dataloaders": [[275, 0, 0, "-", "base_dataloader"], [276, 0, 0, "-", "dataloader"], [277, 0, 0, "-", "default_dataloader"], [278, 0, 0, "-", "fetcher"], [280, 0, 0, "-", "mxnet_dataloader"], [281, 0, 0, "-", "onnxrt_dataloader"], [282, 0, 0, "-", "pytorch_dataloader"], [283, 0, 0, "-", "sampler"], [284, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[275, 1, 1, "", "BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[277, 1, 1, "", "DefaultDataLoader"], [277, 2, 1, "", "default_collate"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[278, 1, 1, "", "Fetcher"], [278, 1, 1, "", "IndexFetcher"], [278, 1, 1, "", "IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[280, 1, 1, "", "MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[281, 1, 1, "", "ONNXRTBertDataLoader"], [281, 1, 1, "", "ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[282, 1, 1, "", "PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[283, 1, 1, "", "BatchSampler"], [283, 1, 1, "", "IterableSampler"], [283, 1, 1, "", "Sampler"], [283, 1, 1, "", "SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[284, 1, 1, "", "TFDataDataLoader"], [284, 1, 1, "", "TensorflowBertDataLoader"], [284, 1, 1, "", "TensorflowDataLoader"], [284, 1, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.datasets": [[285, 0, 0, "-", "bert_dataset"], [286, 0, 0, "-", "coco_dataset"], [287, 0, 0, "-", "dataset"], [288, 0, 0, "-", "dummy_dataset"], [289, 0, 0, "-", "dummy_dataset_v2"], [290, 0, 0, "-", "imagenet_dataset"], [292, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[285, 1, 1, "", "InputFeatures"], [285, 1, 1, "", "ONNXRTBertDataset"], [285, 1, 1, "", "ParseDecodeBert"], [285, 1, 1, "", "PytorchBertDataset"], [285, 1, 1, "", "TensorflowBertDataset"], [285, 1, 1, "", "TensorflowModelZooBertDataset"], [285, 2, 1, "", "convert_examples_to_features"], [285, 2, 1, "", "load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[286, 1, 1, "", "COCONpy"], [286, 1, 1, "", "COCORaw"], [286, 1, 1, "", "COCORecordDataset"], [286, 1, 1, "", "ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.dataset": [[287, 1, 1, "", "CIFAR10"], [287, 1, 1, "", "CIFAR100"], [287, 1, 1, "", "Dataset"], [287, 1, 1, "", "Datasets"], [287, 1, 1, "", "FashionMNIST"], [287, 1, 1, "", "ImageFolder"], [287, 1, 1, "", "IterableDataset"], [287, 1, 1, "", "MNIST"], [287, 1, 1, "", "MXNetCIFAR10"], [287, 1, 1, "", "MXNetCIFAR100"], [287, 1, 1, "", "MXNetDatasets"], [287, 1, 1, "", "MXNetFashionMNIST"], [287, 1, 1, "", "MXNetImageFolder"], [287, 1, 1, "", "MXNetMNIST"], [287, 1, 1, "", "ONNXRTITDatasets"], [287, 1, 1, "", "ONNXRTQLDatasets"], [287, 1, 1, "", "PyTorchDatasets"], [287, 1, 1, "", "PytorchCIFAR10"], [287, 1, 1, "", "PytorchCIFAR100"], [287, 1, 1, "", "PytorchFashionMNIST"], [287, 1, 1, "", "PytorchMNIST"], [287, 1, 1, "", "PytorchMxnetWrapDataset"], [287, 1, 1, "", "PytorchMxnetWrapFunction"], [287, 1, 1, "", "TensorflowCIFAR10"], [287, 1, 1, "", "TensorflowCIFAR100"], [287, 1, 1, "", "TensorflowDatasets"], [287, 1, 1, "", "TensorflowFashionMNIST"], [287, 1, 1, "", "TensorflowImageFolder"], [287, 1, 1, "", "TensorflowImageRecord"], [287, 1, 1, "", "TensorflowMNIST"], [287, 1, 1, "", "TensorflowTFRecordDataset"], [287, 1, 1, "", "TensorflowVOCRecord"], [287, 2, 1, "", "calculate_md5"], [287, 2, 1, "", "check_integrity"], [287, 2, 1, "", "dataset_registry"], [287, 2, 1, "", "download_url"], [287, 5, 1, "", "framework_datasets"], [287, 2, 1, "", "gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[288, 1, 1, "", "DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[289, 1, 1, "", "DummyDataset"], [289, 1, 1, "", "SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[290, 1, 1, "", "ImagenetRaw"], [290, 1, 1, "", "MXNetImagenetRaw"], [290, 1, 1, "", "ONNXRTImagenetDataset"], [290, 1, 1, "", "PytorchImagenetRaw"], [290, 1, 1, "", "TensorflowImagenetDataset"], [290, 1, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[292, 1, 1, "", "StyleTransferDataset"]], "neural_compressor.experimental.data.filters": [[293, 0, 0, "-", "coco_filter"], [294, 0, 0, "-", "filter"]], "neural_compressor.experimental.data.filters.coco_filter": [[293, 1, 1, "", "LabelBalanceCOCORawFilter"], [293, 1, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.filter": [[294, 1, 1, "", "FILTERS"], [294, 1, 1, "", "Filter"], [294, 1, 1, "", "MXNetFilters"], [294, 1, 1, "", "ONNXRTITFilters"], [294, 1, 1, "", "ONNXRTQLFilters"], [294, 1, 1, "", "PyTorchFilters"], [294, 1, 1, "", "TensorflowFilters"], [294, 2, 1, "", "filter_registry"]], "neural_compressor.experimental.data.transforms": [[297, 0, 0, "-", "imagenet_transform"], [299, 0, 0, "-", "tokenization"], [300, 0, 0, "-", "transform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[297, 1, 1, "", "BilinearImagenetTransform"], [297, 1, 1, "", "LabelShift"], [297, 1, 1, "", "ONNXResizeCropImagenetTransform"], [297, 1, 1, "", "OnnxBilinearImagenetTransform"], [297, 1, 1, "", "ParseDecodeImagenet"], [297, 1, 1, "", "ParseDecodeImagenetTransform"], [297, 1, 1, "", "QuantizedInput"], [297, 1, 1, "", "ResizeWithAspectRatio"], [297, 1, 1, "", "TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.tokenization": [[299, 1, 1, "", "BasicTokenizer"], [299, 1, 1, "", "FullTokenizer"], [299, 1, 1, "", "WordpieceTokenizer"], [299, 2, 1, "", "convert_by_vocab"], [299, 2, 1, "", "convert_to_unicode"], [299, 2, 1, "", "load_vocab"], [299, 2, 1, "", "whitespace_tokenize"]], "neural_compressor.experimental.data.transforms.transform": [[300, 1, 1, "", "AlignImageChannelTransform"], [300, 1, 1, "", "BaseTransform"], [300, 1, 1, "", "CastONNXTransform"], [300, 1, 1, "", "CastPyTorchTransform"], [300, 1, 1, "", "CastTFTransform"], [300, 1, 1, "", "CenterCropTFTransform"], [300, 1, 1, "", "CenterCropTransform"], [300, 1, 1, "", "CollectTransform"], [300, 1, 1, "", "ComposeTransform"], [300, 1, 1, "", "CropResizeTFTransform"], [300, 1, 1, "", "CropResizeTransform"], [300, 1, 1, "", "CropToBoundingBox"], [300, 1, 1, "", "InputFeatures"], [300, 1, 1, "", "MXNetCropResizeTransform"], [300, 1, 1, "", "MXNetCropToBoundingBox"], [300, 1, 1, "", "MXNetNormalizeTransform"], [300, 1, 1, "", "MXNetTransforms"], [300, 1, 1, "", "MXNetTranspose"], [300, 1, 1, "", "NormalizeTFTransform"], [300, 1, 1, "", "NormalizeTransform"], [300, 1, 1, "", "ONNXRTCropToBoundingBox"], [300, 1, 1, "", "ONNXRTITTransforms"], [300, 1, 1, "", "ONNXRTQLTransforms"], [300, 1, 1, "", "PaddedCenterCropTransform"], [300, 1, 1, "", "ParseDecodeVocTransform"], [300, 1, 1, "", "PyTorchAlignImageChannel"], [300, 1, 1, "", "PyTorchCropResizeTransform"], [300, 1, 1, "", "PyTorchNormalizeTransform"], [300, 1, 1, "", "PyTorchTransforms"], [300, 1, 1, "", "PyTorchTranspose"], [300, 1, 1, "", "PytorchMxnetTransform"], [300, 1, 1, "", "PytorchMxnetWrapFunction"], [300, 1, 1, "", "RandomCropTFTransform"], [300, 1, 1, "", "RandomCropTransform"], [300, 1, 1, "", "RandomHorizontalFlip"], [300, 1, 1, "", "RandomResizedCropMXNetTransform"], [300, 1, 1, "", "RandomResizedCropPytorchTransform"], [300, 1, 1, "", "RandomResizedCropTFTransform"], [300, 1, 1, "", "RandomResizedCropTransform"], [300, 1, 1, "", "RandomVerticalFlip"], [300, 1, 1, "", "RescaleKerasPretrainTransform"], [300, 1, 1, "", "RescaleTFTransform"], [300, 1, 1, "", "RescaleTransform"], [300, 1, 1, "", "ResizeMXNetTransform"], [300, 1, 1, "", "ResizePytorchTransform"], [300, 1, 1, "", "ResizeTFTransform"], [300, 1, 1, "", "ResizeTransform"], [300, 1, 1, "", "ResizeWithRatio"], [300, 1, 1, "", "SquadExample"], [300, 1, 1, "", "TFModelZooCollectTransform"], [300, 1, 1, "", "TFSquadV1ModelZooPostTransform"], [300, 1, 1, "", "TFSquadV1PostTransform"], [300, 1, 1, "", "TRANSFORMS"], [300, 1, 1, "", "TensorflowCropToBoundingBox"], [300, 1, 1, "", "TensorflowRandomHorizontalFlip"], [300, 1, 1, "", "TensorflowRandomVerticalFlip"], [300, 1, 1, "", "TensorflowResizeWithRatio"], [300, 1, 1, "", "TensorflowTransform"], [300, 1, 1, "", "TensorflowTransforms"], [300, 1, 1, "", "TensorflowTranspose"], [300, 1, 1, "", "TensorflowWrapFunction"], [300, 1, 1, "", "ToArray"], [300, 1, 1, "", "ToNDArrayTransform"], [300, 1, 1, "", "Transforms"], [300, 1, 1, "", "Transpose"], [300, 2, 1, "", "convert_examples_to_features"], [300, 2, 1, "", "get_final_text"], [300, 2, 1, "", "get_torchvision_map"], [300, 2, 1, "", "read_squad_examples"], [300, 2, 1, "", "transform_registry"]], "neural_compressor.experimental.distillation": [[301, 1, 1, "", "Distillation"]], "neural_compressor.experimental.distillation.Distillation": [[301, 4, 1, "", "_epoch_ran"], [301, 4, 1, "", "best_model"], [301, 4, 1, "", "best_score"], [301, 4, 1, "", "eval_frequency"]], "neural_compressor.experimental.export": [[303, 0, 0, "-", "qlinear2qdq"], [304, 0, 0, "-", "tf2onnx"], [305, 0, 0, "-", "torch2onnx"]], "neural_compressor.experimental.export.qlinear2qdq": [[303, 2, 1, "", "check_model"], [303, 2, 1, "", "onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.tf2onnx": [[304, 2, 1, "", "tf_to_fp32_onnx"], [304, 2, 1, "", "tf_to_int8_onnx"]], "neural_compressor.experimental.export.torch2onnx": [[305, 2, 1, "", "dynamic_quant_export"], [305, 2, 1, "", "get_node_mapping"], [305, 2, 1, "", "get_quantizable_onnx_ops"], [305, 2, 1, "", "static_quant_export"], [305, 2, 1, "", "torch_to_fp32_onnx"], [305, 2, 1, "", "torch_to_int8_onnx"]], "neural_compressor.experimental.graph_optimization": [[306, 1, 1, "", "Graph_Optimization"]], "neural_compressor.experimental.metric": [[308, 0, 0, "-", "bleu"], [309, 0, 0, "-", "bleu_util"], [310, 0, 0, "-", "coco_label_map"], [311, 0, 0, "-", "coco_tools"], [312, 0, 0, "-", "evaluate_squad"], [313, 0, 0, "-", "f1"], [315, 0, 0, "-", "metric"]], "neural_compressor.experimental.metric.bleu": [[308, 1, 1, "", "BLEU"], [308, 1, 1, "", "UnicodeRegex"], [308, 2, 1, "", "bleu_tokenize"]], "neural_compressor.experimental.metric.bleu.BLEU": [[308, 4, 1, "", "labels"], [308, 4, 1, "", "predictions"]], "neural_compressor.experimental.metric.bleu.UnicodeRegex": [[308, 4, 1, "", "nondigit_punct_re"], [308, 4, 1, "", "punct_nondigit_re"], [308, 4, 1, "", "symbol_re"]], "neural_compressor.experimental.metric.bleu_util": [[309, 2, 1, "", "compute_bleu"]], "neural_compressor.experimental.metric.coco_tools": [[311, 1, 1, "", "COCOEvalWrapper"], [311, 1, 1, "", "COCOWrapper"], [311, 2, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [311, 2, 1, "", "ExportSingleImageDetectionMasksToCoco"], [311, 2, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.experimental.metric.coco_tools.COCOWrapper": [[311, 4, 1, "", "dataset"], [311, 4, 1, "", "detection_type"]], "neural_compressor.experimental.metric.evaluate_squad": [[312, 2, 1, "", "evaluate"], [312, 2, 1, "", "exact_match_score"], [312, 2, 1, "", "f1_score"], [312, 2, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[313, 2, 1, "", "evaluate"], [313, 2, 1, "", "f1_score"], [313, 2, 1, "", "metric_max_over_ground_truths"], [313, 2, 1, "", "normalize_answer"]], "neural_compressor.experimental.metric.metric": [[315, 1, 1, "", "Accuracy"], [315, 1, 1, "", "BaseMetric"], [315, 1, 1, "", "COCOmAPv2"], [315, 1, 1, "", "F1"], [315, 1, 1, "", "GeneralTopK"], [315, 1, 1, "", "Loss"], [315, 1, 1, "", "MAE"], [315, 1, 1, "", "METRICS"], [315, 1, 1, "", "MSE"], [315, 1, 1, "", "MXNetMetrics"], [315, 1, 1, "", "ONNXRTGLUE"], [315, 1, 1, "", "ONNXRTITMetrics"], [315, 1, 1, "", "ONNXRTQLMetrics"], [315, 1, 1, "", "PyTorchLoss"], [315, 1, 1, "", "PyTorchMetrics"], [315, 1, 1, "", "RMSE"], [315, 1, 1, "", "ROC"], [315, 1, 1, "", "SquadF1"], [315, 1, 1, "", "TensorflowCOCOMAP"], [315, 1, 1, "", "TensorflowMAP"], [315, 1, 1, "", "TensorflowMetrics"], [315, 1, 1, "", "TensorflowTopK"], [315, 1, 1, "", "TensorflowVOCMAP"], [315, 1, 1, "", "WrapMXNetMetric"], [315, 1, 1, "", "WrapONNXRTMetric"], [315, 1, 1, "", "WrapPyTorchMetric"], [315, 1, 1, "", "mIOU"], [315, 2, 1, "", "metric_registry"]], "neural_compressor.experimental.metric.metric.Accuracy": [[315, 4, 1, "", "label_list"], [315, 4, 1, "", "pred_list"], [315, 4, 1, "", "sample"]], "neural_compressor.experimental.metric.metric.GeneralTopK": [[315, 4, 1, "", "k"], [315, 4, 1, "", "num_correct"], [315, 4, 1, "", "num_sample"]], "neural_compressor.experimental.metric.metric.Loss": [[315, 4, 1, "", "sample"], [315, 4, 1, "", "sum"]], "neural_compressor.experimental.metric.metric.MAE": [[315, 4, 1, "", "compare_label"], [315, 4, 1, "", "label_list"], [315, 4, 1, "", "pred_list"]], "neural_compressor.experimental.metric.metric.METRICS": [[315, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.MSE": [[315, 4, 1, "", "compare_label"], [315, 4, 1, "", "label_list"], [315, 4, 1, "", "pred_list"]], "neural_compressor.experimental.metric.metric.MXNetMetrics": [[315, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTITMetrics": [[315, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics": [[315, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.PyTorchMetrics": [[315, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.RMSE": [[315, 4, 1, "", "mse"]], "neural_compressor.experimental.metric.metric.TensorflowMetrics": [[315, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.TensorflowTopK": [[315, 4, 1, "", "k"], [315, 4, 1, "", "num_correct"], [315, 4, 1, "", "num_sample"]], "neural_compressor.experimental.mixed_precision": [[316, 1, 1, "", "MixedPrecision"]], "neural_compressor.experimental.model_conversion": [[317, 1, 1, "", "ModelConversion"]], "neural_compressor.experimental.nas": [[318, 0, 0, "-", "basic_nas"], [319, 0, 0, "-", "dynas"], [321, 0, 0, "-", "nas"], [322, 0, 0, "-", "nas_utils"], [323, 0, 0, "-", "search_algorithms"]], "neural_compressor.experimental.nas.basic_nas": [[318, 1, 1, "", "BasicNAS"]], "neural_compressor.experimental.nas.dynas": [[319, 1, 1, "", "DyNAS"]], "neural_compressor.experimental.nas.nas": [[321, 1, 1, "", "NAS"], [321, 1, 1, "", "NASBase"]], "neural_compressor.experimental.nas.nas_utils": [[322, 2, 1, "", "create_search_space_pool"], [322, 2, 1, "", "find_pareto_front"], [322, 2, 1, "", "nas_registry"]], "neural_compressor.experimental.nas.search_algorithms": [[323, 1, 1, "", "BayesianOptimizationSearcher"], [323, 1, 1, "", "GridSearcher"], [323, 1, 1, "", "RandomSearcher"], [323, 1, 1, "", "Searcher"]], "neural_compressor.experimental.pruner_legacy": [[324, 0, 0, "-", "gradient_sensitivity"], [325, 0, 0, "-", "group_lasso"], [327, 0, 0, "-", "magnitude"], [328, 0, 0, "-", "pattern_lock"], [329, 0, 0, "-", "pruner"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[324, 1, 1, "", "GradientSensitivityPruner"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[325, 1, 1, "", "GroupLassoPruner"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[327, 1, 1, "", "BasicMagnitudePruner"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[328, 1, 1, "", "PatternLockPruner"]], "neural_compressor.experimental.pruner_legacy.pruner": [[329, 1, 1, "", "Pruner"], [329, 2, 1, "", "pruner_registry"]], "neural_compressor.experimental.pruning": [[330, 1, 1, "", "Pruning"], [330, 1, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning.Pruning": [[330, 4, 1, "", "conf"], [330, 4, 1, "", "pruners"]], "neural_compressor.experimental.pruning_recipes": [[332, 0, 0, "-", "patterns"]], "neural_compressor.experimental.pruning_recipes.patterns": [[333, 0, 0, "-", "pattern"], [334, 0, 0, "-", "tile_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[333, 1, 1, "", "PATTERNS"], [333, 1, 1, "", "PatternBase"], [333, 2, 1, "", "pattern_registry"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS": [[333, 4, 1, "", "patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[334, 1, 1, "", "TilePatternBase"], [334, 1, 1, "", "TilePattern_1x1"], [334, 1, 1, "", "TilePattern_1x16"], [334, 1, 1, "", "TilePattern_1x2"], [334, 1, 1, "", "TilePattern_2x2"], [334, 1, 1, "", "TilePattern_4x1"]], "neural_compressor.experimental.pruning_v2": [[335, 1, 1, "", "Pruning"], [335, 1, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning_v2.Pruning": [[335, 4, 1, "", "conf"], [335, 4, 1, "", "pruners"]], "neural_compressor.experimental.pytorch_pruner": [[337, 0, 0, "-", "logger"], [338, 0, 0, "-", "patterns"], [339, 0, 0, "-", "prune_utils"], [340, 0, 0, "-", "pruner"], [341, 0, 0, "-", "pruning"], [342, 0, 0, "-", "scheduler"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[338, 1, 1, "", "Pattern"], [338, 1, 1, "", "PatternNInM"], [338, 1, 1, "", "PatternNxM"], [338, 2, 1, "", "get_pattern"], [338, 2, 1, "", "register_pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.Pattern": [[338, 4, 1, "", "is_global"], [338, 4, 1, "", "pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM": [[338, 4, 1, "", "M"], [338, 4, 1, "", "N"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM": [[338, 4, 1, "", "block_size"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[339, 2, 1, "", "check_config"], [339, 2, 1, "", "parse_not_to_prune"], [339, 2, 1, "", "parse_to_prune"], [339, 2, 1, "", "process_and_check_config"], [339, 2, 1, "", "process_config"], [339, 2, 1, "", "reset_non_value_to_default"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[340, 1, 1, "", "MagnitudePruner"], [340, 1, 1, "", "PatternLockPruner"], [340, 1, 1, "", "Pruner"], [340, 1, 1, "", "SnipMomentumPruner"], [340, 1, 1, "", "SnipPruner"], [340, 2, 1, "", "get_pruner"], [340, 2, 1, "", "register_pruners"]], "neural_compressor.experimental.pytorch_pruner.pruner.Pruner": [[340, 4, 1, "", "config"], [340, 4, 1, "", "current_sparsity_ratio"], [340, 4, 1, "", "end_step"], [340, 4, 1, "", "global_step"], [340, 4, 1, "", "masks"], [340, 4, 1, "", "max_sparsity_ratio_per_layer"], [340, 4, 1, "", "modules"], [340, 4, 1, "", "pattern"], [340, 4, 1, "", "scheduler"], [340, 4, 1, "", "scores"], [340, 4, 1, "", "start_step"], [340, 4, 1, "", "target_sparsity_ratio"], [340, 4, 1, "", "update_frequency_on_step"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[341, 1, 1, "", "Pruning"]], "neural_compressor.experimental.pytorch_pruner.pruning.Pruning": [[341, 4, 1, "", "config_file_path"], [341, 4, 1, "", "model"], [341, 4, 1, "", "pruner_info"], [341, 4, 1, "", "pruners"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[342, 1, 1, "", "IterativeScheduler"], [342, 1, 1, "", "OneshotScheduler"], [342, 1, 1, "", "Scheduler"], [342, 2, 1, "", "get_scheduler"], [342, 2, 1, "", "register_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler": [[342, 4, 1, "", "config"]], "neural_compressor.experimental.quantization": [[343, 1, 1, "", "Quantization"]], "neural_compressor.experimental.scheduler": [[344, 1, 1, "", "Scheduler"]], "neural_compressor.experimental.strategy": [[345, 0, 0, "-", "auto_mixed_precision"], [346, 0, 0, "-", "basic"], [347, 0, 0, "-", "bayesian"], [348, 0, 0, "-", "exhaustive"], [350, 0, 0, "-", "mse"], [351, 0, 0, "-", "mse_v2"], [352, 0, 0, "-", "random"], [353, 0, 0, "-", "strategy"], [355, 0, 0, "-", "utils"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[345, 1, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.experimental.strategy.basic": [[346, 1, 1, "", "BasicTuneStrategy"]], "neural_compressor.experimental.strategy.bayesian": [[347, 1, 1, "", "BayesianOptimization"], [347, 1, 1, "", "BayesianTuneStrategy"], [347, 1, 1, "", "TargetSpace"], [347, 2, 1, "", "acq_max"]], "neural_compressor.experimental.strategy.exhaustive": [[348, 1, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.experimental.strategy.mse": [[350, 1, 1, "", "MSETuneStrategy"]], "neural_compressor.experimental.strategy.mse_v2": [[351, 1, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.experimental.strategy.random": [[352, 1, 1, "", "RandomTuneStrategy"]], "neural_compressor.experimental.strategy.strategy": [[353, 1, 1, "", "TuneStrategy"], [353, 2, 1, "", "strategy_registry"]], "neural_compressor.experimental.strategy.utils": [[354, 0, 0, "-", "constant"], [356, 0, 0, "-", "tuning_sampler"], [357, 0, 0, "-", "tuning_space"], [358, 0, 0, "-", "tuning_structs"], [359, 0, 0, "-", "utility"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[356, 1, 1, "", "FallbackTuningSampler"], [356, 1, 1, "", "ModelWiseTuningSampler"], [356, 1, 1, "", "OpTypeWiseTuningSampler"], [356, 1, 1, "", "OpWiseTuningSampler"], [356, 1, 1, "", "SmoothQuantSampler"], [356, 1, 1, "", "TuningOrder"], [356, 1, 1, "", "TuningSampler"], [356, 1, 1, "", "TuningSamplerRegistry"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[357, 1, 1, "", "TuningItem"], [357, 1, 1, "", "TuningSpace"], [357, 2, 1, "", "initial_tuning_cfg_with_quant_mode"], [357, 2, 1, "", "pattern_to_internal"], [357, 2, 1, "", "pattern_to_path"], [357, 2, 1, "", "quant_mode_from_pattern"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[358, 1, 1, "", "OpTuningConfig"]], "neural_compressor.experimental.strategy.utils.utility": [[359, 1, 1, "", "OrderedDefaultDict"], [359, 2, 1, "", "extract_data_type"], [359, 2, 1, "", "get_adaptor_name"], [359, 2, 1, "", "reverted_data_type"]], "neural_compressor.metric": [[361, 0, 0, "-", "bleu"], [362, 0, 0, "-", "bleu_util"], [363, 0, 0, "-", "coco_label_map"], [364, 0, 0, "-", "coco_tools"], [365, 0, 0, "-", "evaluate_squad"], [366, 0, 0, "-", "f1"], [368, 0, 0, "-", "metric"]], "neural_compressor.metric.bleu": [[361, 1, 1, "", "BLEU"], [361, 1, 1, "", "UnicodeRegex"], [361, 2, 1, "", "bleu_tokenize"]], "neural_compressor.metric.bleu.BLEU": [[361, 4, 1, "", "labels"], [361, 4, 1, "", "predictions"]], "neural_compressor.metric.bleu.UnicodeRegex": [[361, 4, 1, "", "nondigit_punct_re"], [361, 4, 1, "", "punct_nondigit_re"], [361, 4, 1, "", "symbol_re"]], "neural_compressor.metric.bleu_util": [[362, 2, 1, "", "compute_bleu"]], "neural_compressor.metric.coco_tools": [[364, 1, 1, "", "COCOEvalWrapper"], [364, 1, 1, "", "COCOWrapper"], [364, 2, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [364, 2, 1, "", "ExportSingleImageDetectionMasksToCoco"], [364, 2, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.metric.coco_tools.COCOWrapper": [[364, 4, 1, "", "dataset"], [364, 4, 1, "", "detection_type"]], "neural_compressor.metric.evaluate_squad": [[365, 2, 1, "", "evaluate"], [365, 2, 1, "", "exact_match_score"], [365, 2, 1, "", "f1_score"], [365, 2, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[366, 2, 1, "", "evaluate"], [366, 2, 1, "", "f1_score"], [366, 2, 1, "", "metric_max_over_ground_truths"], [366, 2, 1, "", "normalize_answer"]], "neural_compressor.metric.metric": [[368, 1, 1, "", "Accuracy"], [368, 1, 1, "", "BaseMetric"], [368, 1, 1, "", "COCOmAPv2"], [368, 1, 1, "", "F1"], [368, 1, 1, "", "GeneralTopK"], [368, 1, 1, "", "Loss"], [368, 1, 1, "", "MAE"], [368, 1, 1, "", "METRICS"], [368, 1, 1, "", "MSE"], [368, 1, 1, "", "MXNetMetrics"], [368, 1, 1, "", "Metric"], [368, 1, 1, "", "ONNXRTGLUE"], [368, 1, 1, "", "ONNXRTITMetrics"], [368, 1, 1, "", "ONNXRTQLMetrics"], [368, 1, 1, "", "PyTorchLoss"], [368, 1, 1, "", "PyTorchMetrics"], [368, 1, 1, "", "RMSE"], [368, 1, 1, "", "ROC"], [368, 1, 1, "", "SquadF1"], [368, 1, 1, "", "TensorflowCOCOMAP"], [368, 1, 1, "", "TensorflowMAP"], [368, 1, 1, "", "TensorflowMetrics"], [368, 1, 1, "", "TensorflowTopK"], [368, 1, 1, "", "TensorflowVOCMAP"], [368, 1, 1, "", "WrapMXNetMetric"], [368, 1, 1, "", "WrapONNXRTMetric"], [368, 1, 1, "", "WrapPyTorchMetric"], [368, 1, 1, "", "mIOU"], [368, 2, 1, "", "metric_registry"], [368, 2, 1, "", "register_customer_metric"]], "neural_compressor.metric.metric.Accuracy": [[368, 4, 1, "", "label_list"], [368, 4, 1, "", "pred_list"], [368, 4, 1, "", "sample"]], "neural_compressor.metric.metric.GeneralTopK": [[368, 4, 1, "", "k"], [368, 4, 1, "", "num_correct"], [368, 4, 1, "", "num_sample"]], "neural_compressor.metric.metric.Loss": [[368, 4, 1, "", "sample"], [368, 4, 1, "", "sum"]], "neural_compressor.metric.metric.MAE": [[368, 4, 1, "", "compare_label"], [368, 4, 1, "", "label_list"], [368, 4, 1, "", "pred_list"]], "neural_compressor.metric.metric.METRICS": [[368, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.MSE": [[368, 4, 1, "", "compare_label"], [368, 4, 1, "", "label_list"], [368, 4, 1, "", "pred_list"]], "neural_compressor.metric.metric.MXNetMetrics": [[368, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTITMetrics": [[368, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTQLMetrics": [[368, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.PyTorchMetrics": [[368, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.RMSE": [[368, 4, 1, "", "mse"]], "neural_compressor.metric.metric.TensorflowMetrics": [[368, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.TensorflowTopK": [[368, 4, 1, "", "k"], [368, 4, 1, "", "num_correct"], [368, 4, 1, "", "num_sample"]], "neural_compressor.mix_precision": [[369, 2, 1, "", "fit"]], "neural_compressor.model": [[370, 0, 0, "-", "base_model"], [372, 0, 0, "-", "keras_model"], [373, 0, 0, "-", "model"], [374, 0, 0, "-", "mxnet_model"], [375, 0, 0, "-", "nets_factory"], [376, 0, 0, "-", "onnx_model"], [377, 0, 0, "-", "tensorflow_model"], [378, 0, 0, "-", "torch_model"]], "neural_compressor.model.base_model": [[370, 1, 1, "", "BaseModel"]], "neural_compressor.model.keras_model": [[372, 1, 1, "", "KerasModel"]], "neural_compressor.model.model": [[373, 1, 1, "", "Model"], [373, 2, 1, "", "get_model_fwk_name"]], "neural_compressor.model.mxnet_model": [[374, 1, 1, "", "MXNetModel"]], "neural_compressor.model.nets_factory": [[375, 1, 1, "", "TFSlimNetsFactory"]], "neural_compressor.model.onnx_model": [[376, 1, 1, "", "ONNXModel"]], "neural_compressor.model.tensorflow_model": [[377, 1, 1, "", "TensorflowBaseModel"], [377, 1, 1, "", "TensorflowCheckpointModel"], [377, 1, 1, "", "TensorflowLLMModel"], [377, 1, 1, "", "TensorflowModel"], [377, 1, 1, "", "TensorflowQATModel"], [377, 1, 1, "", "TensorflowSavedModelModel"], [377, 2, 1, "", "checkpoint_session"], [377, 2, 1, "", "estimator_session"], [377, 2, 1, "", "frozen_pb_session"], [377, 2, 1, "", "get_model_type"], [377, 2, 1, "", "graph_def_session"], [377, 2, 1, "", "graph_session"], [377, 2, 1, "", "keras_session"], [377, 2, 1, "", "load_saved_model"], [377, 2, 1, "", "saved_model_session"], [377, 2, 1, "", "slim_session"], [377, 2, 1, "", "validate_and_inference_input_output"], [377, 2, 1, "", "validate_graph_node"]], "neural_compressor.model.torch_model": [[378, 1, 1, "", "IPEXModel"], [378, 1, 1, "", "PyTorchBaseModel"], [378, 1, 1, "", "PyTorchFXModel"], [378, 1, 1, "", "PyTorchModel"]], "neural_compressor.objective": [[379, 1, 1, "", "Accuracy"], [379, 1, 1, "", "Footprint"], [379, 1, 1, "", "ModelSize"], [379, 1, 1, "", "MultiObjective"], [379, 1, 1, "", "Objective"], [379, 1, 1, "", "Performance"], [379, 2, 1, "", "objective_custom_registry"], [379, 2, 1, "", "objective_registry"]], "neural_compressor.profiling": [[382, 0, 0, "-", "parser"], [392, 0, 0, "-", "profiler"]], "neural_compressor.profiling.parser": [[381, 0, 0, "-", "factory"], [384, 0, 0, "-", "onnx_parser"], [386, 0, 0, "-", "parser"], [387, 0, 0, "-", "result"], [389, 0, 0, "-", "tensorflow_parser"]], "neural_compressor.profiling.parser.factory": [[381, 1, 1, "", "ParserFactory"]], "neural_compressor.profiling.parser.onnx_parser": [[383, 0, 0, "-", "factory"], [385, 0, 0, "-", "parser"]], "neural_compressor.profiling.parser.onnx_parser.factory": [[383, 1, 1, "", "OnnxrtParserFactory"]], "neural_compressor.profiling.parser.onnx_parser.parser": [[385, 1, 1, "", "OnnxProfilingParser"]], "neural_compressor.profiling.parser.parser": [[386, 1, 1, "", "ProfilingParser"]], "neural_compressor.profiling.parser.result": [[387, 1, 1, "", "ProfilingResult"]], "neural_compressor.profiling.parser.tensorflow_parser": [[388, 0, 0, "-", "factory"], [390, 0, 0, "-", "parser"]], "neural_compressor.profiling.parser.tensorflow_parser.factory": [[388, 1, 1, "", "TensorFlowParserFactory"]], "neural_compressor.profiling.parser.tensorflow_parser.parser": [[390, 1, 1, "", "TensorFlowProfilingParser"]], "neural_compressor.profiling.profiler": [[391, 0, 0, "-", "factory"], [394, 0, 0, "-", "onnxrt_profiler"], [397, 0, 0, "-", "profiler"], [399, 0, 0, "-", "tensorflow_profiler"]], "neural_compressor.profiling.profiler.factory": [[391, 1, 1, "", "ProfilerFactory"]], "neural_compressor.profiling.profiler.onnxrt_profiler": [[393, 0, 0, "-", "factory"], [395, 0, 0, "-", "profiler"], [396, 0, 0, "-", "utils"]], "neural_compressor.profiling.profiler.onnxrt_profiler.factory": [[393, 1, 1, "", "ProfilerFactory"]], "neural_compressor.profiling.profiler.onnxrt_profiler.profiler": [[395, 1, 1, "", "Profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.utils": [[396, 2, 1, "", "create_onnx_config"]], "neural_compressor.profiling.profiler.profiler": [[397, 1, 1, "", "Profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler": [[398, 0, 0, "-", "factory"], [400, 0, 0, "-", "profiler"], [401, 0, 0, "-", "utils"]], "neural_compressor.profiling.profiler.tensorflow_profiler.factory": [[398, 1, 1, "", "ProfilerFactory"]], "neural_compressor.profiling.profiler.tensorflow_profiler.profiler": [[400, 1, 1, "", "Profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.utils": [[401, 2, 1, "", "create_tf_config"], [401, 2, 1, "", "delete_assign"], [401, 2, 1, "", "set_eager_execution"]], "neural_compressor.quantization": [[402, 2, 1, "", "fit"]], "neural_compressor.strategy": [[403, 0, 0, "-", "auto"], [404, 0, 0, "-", "auto_mixed_precision"], [405, 0, 0, "-", "basic"], [406, 0, 0, "-", "bayesian"], [407, 0, 0, "-", "conservative"], [408, 0, 0, "-", "exhaustive"], [409, 0, 0, "-", "hawq_v2"], [411, 0, 0, "-", "mse"], [412, 0, 0, "-", "mse_v2"], [413, 0, 0, "-", "random"], [414, 0, 0, "-", "strategy"], [416, 0, 0, "-", "utils"]], "neural_compressor.strategy.auto": [[403, 1, 1, "", "AutoTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[404, 1, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.basic": [[405, 1, 1, "", "BasicTuneStrategy"]], "neural_compressor.strategy.bayesian": [[406, 1, 1, "", "BayesianOptimization"], [406, 1, 1, "", "BayesianTuneStrategy"], [406, 1, 1, "", "TargetSpace"], [406, 2, 1, "", "acq_max"]], "neural_compressor.strategy.conservative": [[407, 1, 1, "", "ConservativeTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[408, 1, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[409, 1, 1, "", "HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.mse": [[411, 1, 1, "", "MSETuneStrategy"]], "neural_compressor.strategy.mse_v2": [[412, 1, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.strategy.random": [[413, 1, 1, "", "RandomTuneStrategy"]], "neural_compressor.strategy.strategy": [[414, 1, 1, "", "TuneStrategy"], [414, 1, 1, "", "TuneStrategyMeta"], [414, 2, 1, "", "strategy_registry"]], "neural_compressor.strategy.utils": [[415, 0, 0, "-", "constant"], [417, 0, 0, "-", "tuning_sampler"], [418, 0, 0, "-", "tuning_space"], [419, 0, 0, "-", "tuning_structs"], [420, 0, 0, "-", "utility"]], "neural_compressor.strategy.utils.tuning_sampler": [[417, 1, 1, "", "BlockFallbackTuningSampler"], [417, 1, 1, "", "FallbackTuningSampler"], [417, 1, 1, "", "LowerBitsSampler"], [417, 1, 1, "", "ModelWiseTuningSampler"], [417, 1, 1, "", "OpTypeWiseTuningSampler"], [417, 1, 1, "", "OpWiseTuningSampler"], [417, 1, 1, "", "SmoothQuantSampler"], [417, 1, 1, "", "TuningOrder"], [417, 1, 1, "", "TuningSampler"], [417, 1, 1, "", "WeightOnlyQuantSampler"]], "neural_compressor.strategy.utils.tuning_space": [[418, 1, 1, "", "TuningItem"], [418, 1, 1, "", "TuningSpace"], [418, 2, 1, "", "initial_tuning_cfg_with_quant_mode"], [418, 2, 1, "", "pattern_to_internal"], [418, 2, 1, "", "pattern_to_path"], [418, 2, 1, "", "quant_mode_from_pattern"]], "neural_compressor.strategy.utils.tuning_structs": [[419, 1, 1, "", "OpTuningConfig"]], "neural_compressor.strategy.utils.utility": [[420, 1, 1, "", "ClassRegister"], [420, 1, 1, "", "OrderedDefaultDict"], [420, 1, 1, "", "QuantOptions"], [420, 1, 1, "", "QuantType"], [420, 2, 1, "", "build_slave_faker_model"], [420, 2, 1, "", "extract_data_type"], [420, 2, 1, "", "get_adaptor_name"], [420, 2, 1, "", "preprocess_user_cfg"], [420, 2, 1, "", "reverted_data_type"]], "neural_compressor.template": [[421, 0, 0, "-", "api_doc_example"]], "neural_compressor.template.api_doc_example": [[421, 1, 1, "", "ExampleClass"], [421, 4, 1, "", "attribute1"], [421, 2, 1, "", "function1"], [421, 2, 1, "", "function2"], [421, 2, 1, "", "function3"], [421, 2, 1, "", "generator1"], [421, 5, 1, "", "module_debug_level1"]], "neural_compressor.template.api_doc_example.ExampleClass": [[421, 4, 1, "", "attr1"], [421, 4, 1, "", "attr2"], [421, 4, 1, "", "attr5"]], "neural_compressor.tensorflow": [[423, 0, 0, "-", "algorithms"], [436, 0, 0, "-", "quantization"], [438, 0, 0, "-", "utils"]], "neural_compressor.tensorflow.algorithms": [[424, 0, 0, "-", "static_quantize"]], "neural_compressor.tensorflow.algorithms.static_quantize": [[425, 0, 0, "-", "keras"], [429, 0, 0, "-", "keras_utils"], [433, 0, 0, "-", "quantize_entry"]], "neural_compressor.tensorflow.algorithms.static_quantize.keras": [[425, 1, 1, "", "KerasAdaptor"], [425, 1, 1, "", "KerasQuery"]], "neural_compressor.tensorflow.algorithms.static_quantize.keras_utils": [[426, 0, 0, "-", "conv2d"], [427, 0, 0, "-", "dense"], [428, 0, 0, "-", "depthwise_conv2d"], [430, 0, 0, "-", "pool2d"], [431, 0, 0, "-", "quantizer"], [432, 0, 0, "-", "separable_conv2d"]], "neural_compressor.tensorflow.algorithms.static_quantize.quantize_entry": [[433, 2, 1, "", "parse_to_keras_tune_cfg"], [433, 2, 1, "", "static_quantize_entry"], [433, 2, 1, "", "update_config"]], "neural_compressor.tensorflow.quantization": [[435, 0, 0, "-", "config"], [437, 0, 0, "-", "quantize"]], "neural_compressor.tensorflow.quantization.config": [[435, 1, 1, "", "Backend"], [435, 1, 1, "", "StaticQuantConfig"], [435, 2, 1, "", "get_all_registered_configs"], [435, 2, 1, "", "get_default_static_quant_config"], [435, 2, 1, "", "parse_config_from_dict"]], "neural_compressor.tensorflow.quantization.quantize": [[437, 2, 1, "", "quantize_model"]], "neural_compressor.tensorflow.utils": [[438, 2, 1, "", "deep_get"], [438, 2, 1, "", "dump_elapsed_time"], [438, 2, 1, "", "register_algo"], [438, 2, 1, "", "version1_gte_version2"]], "neural_compressor.torch": [[439, 0, 0, "-", "algorithms"], [447, 0, 0, "-", "amp"], [455, 0, 0, "-", "quantization"], [459, 0, 0, "-", "utils"]], "neural_compressor.torch.algorithms": [[441, 0, 0, "-", "weight_only"], [443, 0, 0, "-", "weight_only_algos"]], "neural_compressor.torch.algorithms.weight_only": [[440, 0, 0, "-", "gptq"], [442, 0, 0, "-", "rtn"]], "neural_compressor.torch.algorithms.weight_only.gptq": [[440, 1, 1, "", "GPTQ"], [440, 1, 1, "", "GPTQuantizer"], [440, 2, 1, "", "apply_gptq_quantize"], [440, 2, 1, "", "find_layers"], [440, 2, 1, "", "find_layers_name"], [440, 2, 1, "", "is_leaf"], [440, 2, 1, "", "log_quantizable_layers_per_transformer"], [440, 2, 1, "", "quantize"], [440, 2, 1, "", "trace_gptq_target_blocks"]], "neural_compressor.torch.algorithms.weight_only.rtn": [[442, 2, 1, "", "qdq_weight_actor"], [442, 2, 1, "", "qdq_weight_asym"], [442, 2, 1, "", "qdq_weight_sym"], [442, 2, 1, "", "quant_weight"], [442, 2, 1, "", "quant_weight_w_scale"], [442, 2, 1, "", "quantize_4bit"], [442, 2, 1, "", "rtn_quantize"], [442, 2, 1, "", "search_clip"]], "neural_compressor.torch.algorithms.weight_only_algos": [[443, 2, 1, "", "rtn_quantize_entry"]], "neural_compressor.torch.amp": [[444, 0, 0, "-", "autocast"], [446, 0, 0, "-", "fp8"]], "neural_compressor.torch.amp.autocast": [[444, 1, 1, "", "autocast"]], "neural_compressor.torch.amp.fp8": [[445, 0, 0, "-", "functions"]], "neural_compressor.torch.quantization": [[449, 0, 0, "-", "autotune"], [450, 0, 0, "-", "config"], [451, 0, 0, "-", "fp8"], [456, 0, 0, "-", "layers"], [457, 0, 0, "-", "quantize"]], "neural_compressor.torch.quantization.autotune": [[449, 2, 1, "", "autotune"]], "neural_compressor.torch.quantization.config": [[450, 1, 1, "", "Backend"], [450, 1, 1, "", "FP8QConfig"], [450, 1, 1, "", "GPTQConfig"], [450, 1, 1, "", "RTNConfig"], [450, 2, 1, "", "get_default_gptq_config"], [450, 2, 1, "", "get_default_rtn_config"]], "neural_compressor.torch.quantization.fp8": [[452, 0, 0, "-", "modules"], [453, 0, 0, "-", "observer"], [454, 0, 0, "-", "quantization_impl"]], "neural_compressor.torch.quantization.layers": [[456, 1, 1, "", "FakeAffineTensorQuantFunction"], [456, 1, 1, "", "MulLinear"], [456, 1, 1, "", "TEQLinearFakeQuant"]], "neural_compressor.torch.quantization.quantize": [[457, 2, 1, "", "quantize"], [457, 2, 1, "", "quantize_dynamic"]], "neural_compressor.torch.utils": [[458, 0, 0, "-", "constants"], [460, 0, 0, "-", "utility"]], "neural_compressor.torch.utils.utility": [[460, 2, 1, "", "fetch_module"], [460, 2, 1, "", "register_algo"], [460, 2, 1, "", "set_module"]], "neural_compressor.training": [[461, 1, 1, "", "CallBacks"], [461, 1, 1, "", "CompressionManager"], [461, 2, 1, "", "fit"], [461, 2, 1, "", "prepare_compression"]], "neural_compressor.utils": [[462, 0, 0, "-", "collect_layer_histogram"], [463, 0, 0, "-", "constant"], [464, 0, 0, "-", "create_obj_from_config"], [466, 0, 0, "-", "kl_divergence"], [467, 0, 0, "-", "load_huggingface"], [468, 0, 0, "-", "logger"], [469, 0, 0, "-", "neural_insights_utils"], [470, 0, 0, "-", "options"], [471, 0, 0, "-", "pytorch"], [472, 0, 0, "-", "utility"], [473, 0, 0, "-", "weights_details"]], "neural_compressor.utils.collect_layer_histogram": [[462, 1, 1, "", "LayerHistogramCollector"]], "neural_compressor.utils.create_obj_from_config": [[464, 2, 1, "", "create_dataloader"], [464, 2, 1, "", "create_dataset"], [464, 2, 1, "", "create_eval_func"], [464, 2, 1, "", "create_train_func"], [464, 2, 1, "", "get_algorithm"], [464, 2, 1, "", "get_func_from_config"], [464, 2, 1, "", "get_metrics"], [464, 2, 1, "", "get_postprocess"], [464, 2, 1, "", "get_preprocess"]], "neural_compressor.utils.kl_divergence": [[466, 1, 1, "", "KL_Divergence"]], "neural_compressor.utils.load_huggingface": [[467, 1, 1, "", "OptimizedModel"], [467, 2, 1, "", "export_compressed_model"], [467, 2, 1, "", "save_for_huggingface_upstream"]], "neural_compressor.utils.logger": [[468, 1, 1, "", "Logger"], [468, 2, 1, "", "debug"], [468, 2, 1, "", "error"], [468, 2, 1, "", "fatal"], [468, 2, 1, "", "info"], [468, 2, 1, "", "log"], [468, 2, 1, "", "warn"], [468, 2, 1, "", "warning"]], "neural_compressor.utils.neural_insights_utils": [[469, 2, 1, "", "get_model_path"], [469, 2, 1, "", "register_neural_insights_workload"], [469, 2, 1, "", "update_neural_insights_workload"], [469, 2, 1, "", "update_neural_insights_workload_accuracy_data"]], "neural_compressor.utils.options": [[470, 1, 1, "", "onnxrt"]], "neural_compressor.utils.pytorch": [[471, 2, 1, "", "is_int8_model"], [471, 2, 1, "", "load"], [471, 2, 1, "", "load_weight_only"], [471, 2, 1, "", "recover_model_from_json"]], "neural_compressor.utils.utility": [[472, 1, 1, "", "CaptureOutputToFile"], [472, 1, 1, "", "CpuInfo"], [472, 2, 1, "", "Dequantize"], [472, 1, 1, "", "DotDict"], [472, 1, 1, "", "GLOBAL_STATE"], [472, 1, 1, "", "LazyImport"], [472, 1, 1, "", "MODE"], [472, 1, 1, "", "OpEntry"], [472, 1, 1, "", "Statistics"], [472, 2, 1, "", "alias_param"], [472, 2, 1, "", "calculate_mse"], [472, 2, 1, "", "check_key_exist"], [472, 2, 1, "", "combine_histogram"], [472, 2, 1, "", "compare_objects"], [472, 2, 1, "", "compute_sparsity"], [472, 2, 1, "", "dequantize_weight"], [472, 2, 1, "", "dump_class_attrs"], [472, 2, 1, "", "dump_data_to_local"], [472, 2, 1, "", "dump_elapsed_time"], [472, 2, 1, "", "dump_table"], [472, 2, 1, "", "dump_table_to_csv"], [472, 2, 1, "", "equal_dicts"], [472, 2, 1, "", "fault_tolerant_file"], [472, 2, 1, "", "get_all_fp32_data"], [472, 2, 1, "", "get_number_of_sockets"], [472, 2, 1, "", "get_op_list"], [472, 2, 1, "", "get_size"], [472, 2, 1, "", "get_tensor_histogram"], [472, 2, 1, "", "get_tensors_info"], [472, 2, 1, "", "get_tuning_history"], [472, 2, 1, "", "get_weights_details"], [472, 2, 1, "", "load_data_from_pkl"], [472, 2, 1, "", "mse_metric_gap"], [472, 2, 1, "", "print_op_list"], [472, 2, 1, "", "print_table"], [472, 2, 1, "", "recover"], [472, 2, 1, "", "set_random_seed"], [472, 2, 1, "", "set_resume_from"], [472, 2, 1, "", "set_tensorboard"], [472, 2, 1, "", "set_workspace"], [472, 2, 1, "", "show_memory_info"], [472, 2, 1, "", "singleton"], [472, 2, 1, "", "str2array"], [472, 2, 1, "", "time_limit"], [472, 2, 1, "", "version1_eq_version2"], [472, 2, 1, "", "version1_gt_version2"], [472, 2, 1, "", "version1_gte_version2"], [472, 2, 1, "", "version1_lt_version2"], [472, 2, 1, "", "version1_lte_version2"]], "neural_compressor.utils.weights_details": [[473, 1, 1, "", "WeightsDetails"], [473, 1, 1, "", "WeightsStatistics"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:function", "3": "py:exception", "4": "py:attribute", "5": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "function", "Python function"], "3": ["py", "exception", "Python exception"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "data", "Python data"]}, "titleterms": {"block_mask": [0, 207], "neural_compressoradaptor": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 482, 483, 485], "modul": [1, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 113, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 181, 183, 184, 186, 187, 190, 191, 193, 194, 196, 198, 199, 200, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 226, 227, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 254, 255, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 273, 274, 275, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 297, 299, 300, 301, 303, 304, 305, 306, 308, 309, 311, 312, 313, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 327, 328, 329, 330, 333, 334, 335, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 356, 357, 358, 359, 361, 362, 364, 365, 366, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 381, 383, 385, 386, 387, 388, 390, 391, 393, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 417, 418, 419, 420, 421, 425, 433, 435, 437, 438, 440, 442, 443, 444, 449, 450, 452, 456, 457, 460, 461, 462, 464, 466, 467, 468, 469, 470, 471, 472, 473], "content": [1, 2, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 113, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 184, 186, 187, 190, 191, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 226, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 356, 357, 358, 359, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 383, 385, 386, 387, 388, 390, 391, 393, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 417, 418, 419, 420, 421, 425, 433, 435, 437, 438, 440, 442, 443, 444, 449, 450, 456, 457, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 481, 549], "class": [1, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 113, 115, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 153, 154, 155, 156, 157, 161, 165, 166, 167, 169, 172, 173, 174, 175, 176, 178, 179, 181, 183, 184, 186, 190, 191, 193, 198, 199, 200, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 222, 223, 224, 226, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 269, 273, 274, 275, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 306, 307, 308, 311, 314, 315, 316, 317, 318, 319, 321, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 356, 357, 358, 359, 361, 364, 367, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 383, 385, 386, 387, 388, 390, 391, 393, 395, 397, 398, 400, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 417, 418, 419, 420, 421, 425, 435, 440, 444, 450, 456, 461, 462, 465, 466, 467, 468, 470, 472, 473, 482, 549], "function": [1, 13, 16, 34, 42, 43, 44, 45, 67, 68, 70, 104, 105, 116, 118, 148, 149, 150, 153, 155, 156, 157, 162, 163, 164, 167, 168, 170, 171, 172, 174, 177, 178, 179, 181, 184, 186, 187, 190, 191, 193, 194, 195, 196, 198, 200, 201, 205, 208, 214, 215, 216, 217, 218, 220, 221, 224, 233, 234, 242, 244, 248, 251, 252, 253, 256, 258, 259, 260, 261, 263, 265, 266, 268, 277, 285, 287, 291, 294, 295, 296, 298, 299, 300, 303, 304, 305, 308, 309, 311, 312, 313, 314, 315, 322, 329, 333, 338, 339, 340, 342, 347, 353, 357, 359, 361, 362, 364, 365, 366, 367, 368, 369, 373, 377, 379, 396, 401, 402, 406, 414, 418, 420, 421, 433, 435, 437, 438, 440, 442, 443, 445, 449, 450, 457, 460, 461, 464, 465, 467, 468, 469, 471, 472, 507], "subpackag": [2, 17, 87, 111, 112, 114, 158, 192, 195, 228, 253, 271, 296, 307, 331, 349, 360, 410], "submodul": [2, 12, 17, 29, 52, 76, 87, 95, 101, 106, 111, 112, 114, 117, 130, 145, 151, 158, 159, 174, 180, 185, 188, 192, 195, 197, 201, 208, 219, 225, 229, 236, 248, 252, 256, 263, 272, 279, 291, 295, 298, 302, 307, 314, 320, 326, 332, 336, 349, 355, 360, 367, 371, 382, 384, 389, 392, 394, 399, 410, 416, 422, 455, 465], "packag": [2, 29, 174, 195, 201, 208, 236, 248, 252, 253, 256, 263, 279, 291, 295, 296, 298, 307, 314, 326, 331, 332, 349, 367, 371, 410, 465, 532, 534, 536, 537], "kera": [3, 425], "keras_util": [4, 5, 6, 7, 8, 9, 10, 426, 427, 428, 429, 430, 431, 432], "conv2d": [4, 426], "dens": [5, 427], "depthwise_conv2d": [6, 428], "pool2d": [8, 430], "quantiz": [9, 41, 161, 343, 402, 431, 435, 436, 437, 449, 450, 451, 452, 453, 454, 455, 456, 457, 478, 481, 483, 484, 496, 500, 504, 506, 509, 512, 515, 517, 519, 520, 528, 539, 541, 542, 543, 544, 552, 553, 554, 560, 561, 562, 563, 564, 567, 573], "separable_conv2d": [10, 432], "mxnet": [11, 502, 518, 561, 569], "mxnet_util": [12, 13], "util": [13, 43, 148, 163, 170, 182, 187, 218, 221, 354, 355, 356, 357, 358, 359, 396, 401, 415, 416, 417, 418, 419, 420, 438, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 487], "onnxrt": [14, 502, 518, 569], "ox_util": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44], "calibr": [15, 16, 483, 500], "oper": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 483, 484], "activ": [18, 542], "argmax": 19, "attent": 20, "binary_op": 21, "concat": 22, "conv": 23, "direct_q8": 24, "embed_layernorm": 25, "gather": 26, "gavgpool": 27, "gemm": 28, "lstm": 30, "matmul": [31, 567], "maxpool": 32, "norm": 33, "op": [34, 509], "pad": 35, "pool": 36, "reduc": 37, "resiz": 38, "split": [39, 545], "unary_op": 40, "smooth_quant": [42, 167, 175], "weight_onli": [44, 171, 440, 441, 442], "pytorch": [45, 471, 502, 507, 509, 518, 543, 561, 562, 563, 568, 569, 573], "queri": [46, 482, 547, 552, 553, 554], "tensorflow": [47, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 502, 507, 509, 518, 561, 563, 568, 569, 573], "tf_util": [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148], "graph_convert": 48, "graph_converter_without_calib": 49, "graph_rewrit": [50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109], "bf16": [50, 51, 52, 520], "bf16_convert": [50, 155], "dequantize_cast_optim": 51, "gener": [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 483], "convert_add_to_biasadd": 53, "convert_layout": 54, "convert_leakyrelu": 55, "convert_nan_to_random": 56, "convert_placeholder_to_const": 57, "dilated_contract": 58, "dummy_biasadd": 59, "expanddims_optim": 60, "fetch_weight_from_reshap": 61, "fold_batch_norm": 62, "fold_const": 63, "fuse_biasadd_add": 64, "fuse_column_wise_mul": 65, "fuse_conv_with_math": 66, "fuse_decomposed_bn": 67, "fuse_decomposed_in": 68, "fuse_gelu": 69, "fuse_layer_norm": 70, "fuse_pad_with_conv": 71, "fuse_pad_with_fp32_conv": 72, "fuse_reshape_transpos": 73, "graph_cse_optim": 74, "grappler_pass": 75, "insert_print_nod": 77, "move_squeeze_after_relu": 78, "pre_optim": 79, "remove_training_nod": 80, "rename_batch_norm": 81, "split_shared_input": 82, "strip_equivalent_nod": 83, "strip_unused_nod": 84, "switch_optim": 85, "graph_bas": 86, "int8": [88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 509, 573], "freeze_fake_qu": 88, "freeze_valu": 89, "freeze_value_without_calib": 90, "fuse_conv_redundant_dequant": 91, "fuse_conv_requant": 92, "fuse_matmul_redundant_dequant": 93, "fuse_matmul_requant": 94, "meta_op_optim": 96, "post_hostconst_convert": 97, "post_quantized_op_cs": 98, "rnn_convert": 99, "scale_propag": 100, "onnx": [101, 102, 103, 104, 105, 486, 515, 561, 562, 573], "onnx_graph": 102, "onnx_nod": 103, "onnx_schema": 104, "tf2onnx_util": 105, "qdq": [106, 107, 108, 109, 123, 124, 125, 126, 127, 128, 129, 130, 131, 573], "insert_qdq_pattern": 107, "merge_duplicated_qdq": 108, "share_qdq_y_pattern": 109, "graph_util": 110, "quantize_graph": [112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138], "qat": [113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 573], "fake_quant": 113, "quantize_config": 115, "quantize_help": 116, "quantize_lay": [117, 118, 119, 120, 121], "optimize_lay": 118, "quantize_layer_add": 119, "quantize_layer_bas": 120, "quantize_layer_bn": 121, "quantize_wrapp": 122, "fuse_qdq_bn": 123, "fuse_qdq_concatv2": 124, "fuse_qdq_conv": 125, "fuse_qdq_deconv": 126, "fuse_qdq_in": 127, "fuse_qdq_matmul": 128, "fuse_qdq_pool": 129, "optimize_qdq": 131, "quantize_graph_bas": 132, "quantize_graph_bn": 133, "quantize_graph_concatv2": 134, "quantize_graph_conv": 135, "quantize_graph_for_intel_cpu": 136, "quantize_graph_matmul": 137, "quantize_graph_pool": 138, "quantize_graph_common": 139, "smooth_quant_calibr": 140, "smooth_quant_scal": 141, "tf2onnx_convert": 142, "transform_graph": [143, 144, 145, 146, 147], "bias_correct": 143, "graph_transform_bas": 144, "insert_log": 146, "rerange_quantized_concat": 147, "torch_util": [149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 268], "autoround": [149, 150, 151, 152, 153], "export": [150, 302, 303, 304, 305, 509, 564], "model_wrapp": [152, 165], "sign_sgd": 153, "awq": 154, "gptq": [156, 440], "hawq_metr": 157, "layer_wise_qu": [159, 160, 161, 162, 163], "modified_pickl": 160, "torch_load": 162, "mixed_precis": [164, 316], "pattern_detector": 166, "symbolic_trac": 168, "teq": 169, "algorithm": [172, 173, 174, 175, 176, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 439, 440, 441, 442, 443, 500, 564, 567, 570], "fast_bias_correct": 173, "weight_correct": 176, "benchmark": [177, 260, 490, 499, 504, 519, 560], "common": [178, 179, 180, 181, 182, 261, 262, 263, 264, 265, 266, 267, 268, 478, 510], "base_config": 178, "base_tun": 179, "logger": [181, 337, 468], "compress": [183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 270, 491, 564], "callback": 183, "distil": [184, 185, 186, 187, 301, 505, 506, 519, 560, 573], "criterion": [184, 261], "optim": [186, 266, 529, 539, 549, 552, 553, 554, 557, 558, 571], "hpo": [188, 189, 190, 191], "sa_optim": 189, "search_algorithm": [190, 323], "search_spac": 191, "pruner": [193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 329, 340], "criteria": [193, 477, 558, 570], "dsnot": 194, "model_slim": [196, 197, 198, 199], "auto_slim": 196, "pattern_analyz": 198, "weight_slim": 199, "pattern": [200, 201, 202, 203, 204, 332, 333, 334, 338, 558], "base": [200, 205, 515, 548, 571], "mha": [202, 209], "ninm": 203, "nxm": 204, "basic": [206, 346, 405, 479, 570], "pattern_lock": [210, 328], "progress": [211, 545], "retrain_fre": 212, "sparse_gpt": 213, "prune": [214, 220, 330, 341, 519, 558, 560, 573], "reg": 215, "schedul": [216, 342, 344, 558], "tf_criteria": 217, "wanda": [219, 220, 221, 222], "wrapper": 222, "conf": [223, 224, 225, 226], "config": [223, 227, 435, 450, 492, 502, 556], "dotdict": 224, "pythonic_config": 226, "contrib": [228, 229, 230, 231, 271, 272, 273, 274], "strategi": [229, 230, 231, 272, 273, 274, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 497, 566, 570], "sigopt": [230, 273, 566, 570], "tpe": [231, 274, 570], "data": [232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 483, 484, 504, 508, 543], "dataload": [232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 262, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 501, 502], "base_dataload": [232, 275], "default_dataload": [234, 277], "fetcher": [235, 278], "attribut": [236, 244, 253, 287, 296, 307, 331, 371, 421, 465, 476], "mxnet_dataload": [237, 280], "onnxrt_dataload": [238, 281], "pytorch_dataload": [239, 282], "sampler": [240, 283], "tensorflow_dataload": [241, 284], "dataset": [242, 243, 244, 245, 246, 247, 248, 249, 285, 286, 287, 288, 289, 290, 291, 292, 502, 504, 513, 544], "bert_dataset": [242, 285], "coco_dataset": [243, 286], "dummy_dataset": [245, 288], "dummy_dataset_v2": [246, 289], "imagenet_dataset": [247, 290], "style_transfer_dataset": [249, 292], "filter": [250, 251, 252, 293, 294, 295], "coco_filt": [250, 293], "transform": [254, 255, 256, 257, 258, 259, 297, 298, 299, 300, 513, 569], "coco_transform": 254, "imagenet_transform": [255, 297], "postprocess": [257, 267], "token": [258, 299], "experiment": [260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359], "metric": [264, 308, 309, 310, 311, 312, 313, 314, 315, 361, 362, 363, 364, 365, 366, 367, 368, 513, 518], "model": [265, 370, 371, 372, 373, 374, 375, 376, 377, 378, 483, 494, 509, 512, 515, 517, 519, 521, 528, 542, 543, 544, 552, 553, 554, 558, 562, 564, 567, 573], "compon": 269, "qlinear2qdq": 303, "tf2onnx": 304, "torch2onnx": 305, "graph_optim": 306, "bleu": [308, 361], "bleu_util": [309, 362], "coco_label_map": [310, 363], "coco_tool": [311, 364], "evaluate_squad": [312, 365], "f1": [313, 366], "model_convers": 317, "na": [318, 319, 320, 321, 322, 323, 479, 560], "basic_na": 318, "dyna": 319, "nas_util": 322, "pruner_legaci": [324, 325, 326, 327, 328, 329], "gradient_sensit": 324, "group_lasso": 325, "magnitud": 327, "pruning_recip": [331, 332, 333, 334], "tile_pattern": 334, "pruning_v2": 335, "pytorch_prun": [336, 337, 338, 339, 340, 341, 342], "prune_util": 339, "auto_mixed_precis": [345, 404], "bayesian": [347, 406, 570], "exhaust": [348, 408, 570], "mse": [350, 411, 570], "mse_v2": [351, 412, 570], "random": [352, 413, 570], "constant": [354, 415, 458, 463], "tuning_sampl": [356, 417], "tuning_spac": [357, 418], "tuning_struct": [358, 419], "mix_precis": 369, "base_model": 370, "keras_model": 372, "mxnet_model": 374, "nets_factori": 375, "onnx_model": 376, "tensorflow_model": 377, "torch_model": 378, "object": [379, 495, 552, 553, 554, 556], "profil": [380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 504], "parser": [381, 382, 383, 384, 385, 386, 387, 388, 389, 390], "factori": [381, 383, 388, 391, 393, 398], "onnx_pars": [383, 384, 385], "result": [387, 542, 544, 552, 553, 554], "tensorflow_pars": [388, 389, 390], "onnxrt_profil": [393, 394, 395, 396], "tensorflow_profil": [398, 399, 400, 401], "auto": [403, 533, 539, 563, 567, 570], "conserv": [407, 570], "hawq_v2": [409, 570], "templat": [421, 422, 477], "api_doc_exampl": 421, "static_quant": [424, 425, 426, 427, 428, 429, 430, 431, 432, 433], "quantize_entri": 433, "torch": [439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 487, 573], "rtn": 442, "weight_only_algo": 443, "amp": [444, 445, 446, 447], "autocast": 444, "fp8": [445, 446, 451, 452, 453, 454], "autotun": 449, "observ": 453, "quantization_impl": 454, "layer": [456, 505, 562, 567], "train": [461, 478, 498, 507, 519, 558, 561], "collect_layer_histogram": 462, "create_obj_from_config": 464, "kl_diverg": 466, "load_huggingfac": 467, "neural_insights_util": 469, "option": [470, 507, 527], "weights_detail": 473, "version": 474, "intel": [475, 481, 501, 504, 514, 515, 518, 519, 525, 533, 539, 573, 574], "neural": [475, 478, 479, 481, 501, 504, 514, 515, 518, 519, 522, 526, 528, 533, 539, 541, 542, 543, 544, 546, 547, 548, 552, 553, 554, 558, 566, 571, 574], "compressor": [475, 478, 481, 501, 504, 514, 515, 518, 519, 533, 539, 566, 574], "document": [475, 481, 488, 574], "section": [475, 574], "contributor": [476, 477], "coven": [476, 477], "code": [476, 477, 479, 519, 540, 545, 564, 571], "conduct": [476, 477], "our": [476, 567], "pledg": 476, "standard": 476, "respons": [476, 548], "scope": [476, 558], "enforc": 476, "contribut": [477, 532, 536], "guidelin": 477, "creat": [477, 545], "pull": 477, "request": [477, 520, 550], "step": [477, 541, 542, 543, 544], "checklist": 477, "accept": 477, "statu": [477, 547, 548], "check": 477, "overview": [477, 549, 571], "support": [477, 478, 479, 482, 484, 499, 500, 501, 502, 504, 505, 506, 507, 509, 511, 514, 515, 518, 520, 521, 523, 524, 528, 529, 556, 557, 558, 560, 561, 562, 564, 567, 568, 569, 572], "fx": 478, "introduct": [478, 479, 482, 483, 484, 499, 500, 501, 502, 504, 505, 506, 507, 509, 511, 514, 518, 520, 521, 539, 542, 543, 544, 556, 557, 558, 560, 561, 562, 564, 566, 567, 568, 569, 570, 572], "mode": [478, 573], "matrix": [478, 479, 482, 499, 500, 501, 502, 504, 505, 506, 507, 509, 511, 514, 518, 520, 521, 524, 556, 557, 558, 560, 561, 562, 564, 567, 568, 572], "get": [478, 479, 481, 482, 499, 501, 502, 504, 505, 506, 507, 511, 512, 518, 520, 522, 533, 540, 541, 545, 546, 547, 548, 556, 557, 558, 560, 561, 568, 572], "start": [478, 479, 481, 482, 499, 501, 502, 504, 505, 506, 507, 511, 512, 518, 520, 522, 523, 527, 533, 541, 545, 546, 547, 552, 553, 554, 556, 557, 558, 560, 561, 568, 572], "post": [478, 519, 548, 561], "static": [478, 561], "dynam": [478, 479, 561], "awar": [478, 519, 558, 561], "exampl": [478, 479, 482, 488, 499, 501, 502, 504, 505, 506, 507, 508, 509, 518, 519, 520, 521, 524, 528, 541, 542, 543, 544, 546, 551, 552, 553, 554, 556, 557, 558, 561, 562, 564, 567, 568, 573], "note": [478, 565], "detail": 478, "problem": 478, "architectur": [479, 503, 514, 515], "search": [479, 539], "api": [479, 481, 482, 483, 488, 489, 499, 501, 502, 505, 506, 507, 512, 513, 518, 520, 522, 526, 540, 541, 548, 554, 556, 557, 558, 560, 571], "usag": [479, 528, 539, 548, 567, 568, 570], "1": [479, 507, 510, 513, 519, 539, 546, 547, 573], "python": [479, 481, 501, 512, 518, 522, 526, 527, 534, 537, 541, 560, 571], "yaml": [479, 483, 502, 507, 511, 572], "2": [479, 507, 510, 513, 519, 539, 546, 547, 573], "onli": [479, 564], "advanc": [479, 545, 571], "custom": [479, 501, 518, 552, 570], "secur": [480, 507], "polici": [480, 570], "report": 480, "vulner": 480, "instal": [481, 504, 515, 523, 525, 532, 533, 536, 541, 546, 547], "from": [481, 483, 515, 519, 541, 546, 547], "pypi": [481, 528, 541], "select": [481, 533], "public": [481, 559], "event": [481, 559], "addit": 481, "commun": 481, "work": [482, 546, 561], "flow": [482, 561], "background": [482, 539], "ad": 482, "new": [482, 484, 534, 537, 570], "backend": [482, 561], "capabl": [482, 564], "implement": [482, 483], "onnxrtadaptor": 482, "how": [483, 484, 504, 542, 543, 544, 546], "add": [483, 547], "an": [483, 552, 553, 554], "list": [483, 508, 551, 569], "need": 483, "design": [483, 503, 549, 570], "framework": [483, 501, 502, 509, 511, 521, 560, 562, 564, 567], "query_fw_cap": 483, "accord": [483, 484], "tune_cfg": 483, "prepar": [483, 504, 542, 543, 544, 566], "fp32": [483, 509], "graph": 483, "run": [483, 504, 540, 542, 543, 544, 545], "sampl": [483, 512], "iter": 483, "calcul": 483, "rang": 483, "type": [484, 558], "like": 484, "int4": 484, "few": 484, "line": 484, "chang": [484, 513, 538, 540, 565], "defin": [484, 507], "abil": 484, "specif": [484, 502], "invok": 484, "kernel": 484, "tune": [484, 561, 564, 567, 570], "configur": [484, 507, 511, 545, 560, 566, 572], "us": [484, 501, 518, 546, 547, 567], "summari": [484, 542], "runtim": [486, 515, 561, 562, 573], "mix": [493, 519, 520, 563], "precis": [493, 519, 520, 563], "refer": [500, 558, 561, 564, 567], "build": [501, 510, 518, 545, 546, 547], "file": [502, 511, 572], "user": [502, 507, 513, 560, 564, 571, 572], "workflow": [503, 549], "diagnosi": [504, 541], "featur": [504, 507, 511, 514, 528, 529, 533, 560, 561, 568, 572], "modifi": 504, "script": [504, 545], "see": 504, "do": [504, 522], "paramet": [504, 548], "descript": [504, 548, 550], "suggest": 504, "fallback": 504, "set": [504, 525, 539], "knowledg": [505, 573], "intermedi": 505, "self": 505, "distribut": [507, 528, 570], "infer": 507, "evalu": 507, "pure": 507, "horovodrun": 507, "execut": 507, "releas": [508, 534, 537, 565], "appendix": 509, "frequent": 510, "ask": 510, "question": 510, "issu": [510, 565], "3": [510, 523, 539], "4": [510, 530, 539, 559], "quick": [512, 527], "valid": [512, 515, 567, 573], "incompat": [513, 565], "between": 513, "v1": 513, "face": [513, 553, 554], "built": [513, 515, 518], "infrastructur": 514, "prerequisit": [515, 546, 547], "binari": 515, "sourc": [515, 541, 543, 544, 546, 547], "ai": 515, "kit": 515, "system": 515, "requir": [515, 532, 536, 542, 543, 544, 552], "hardwar": [515, 520, 573], "environ": [515, 525], "cpu": [515, 525, 573], "64": 515, "compat": 515, "processor": 515, "gpu": 515, "": [515, 540, 546], "xe": 515, "multipl": [515, 556, 573], "vendor": 515, "through": [515, 567, 573], "softwar": [515, 520], "legal": 516, "inform": 516, "licens": 516, "citat": 516, "trademark": 516, "llm": 517, "recip": [517, 561], "ipex": [517, 561], "kei": 517, "migrat": 519, "x": 519, "orchestr": [519, 557], "fp16": 520, "dure": [520, 563], "accuraci": [520, 542, 544, 561, 570], "driven": 520, "coder": [522, 526, 528, 539, 571], "what": [522, 540, 546], "we": 522, "offer": 522, "jupyt": [522, 523, 534, 537], "lab": [522, 523], "extens": [522, 532, 533, 536, 539, 540, 549, 573], "launcher": [522, 527], "contact": [522, 546], "aw": 523, "amazon": 523, "sagemak": 523, "For": 523, "studio": 523, "notebook": 523, "instanc": 523, "guid": [523, 571], "bigdl": 524, "nano": 524, "platform": [525, 566], "best": [525, 533], "perform": [525, 566], "mkl": 525, "openmp": 525, "jemalloc": 525, "numa": 525, "control": 525, "variabl": 525, "frequenc": 525, "govern": 525, "enabl": [526, 533, 539], "bench": 526, "superbench": 526, "argument": 527, "v0": 530, "highlight": 530, "other": 530, "changelog": [531, 535], "neural_compressor_ext_lab": [532, 534], "uninstal": [532, 536], "develop": [532, 536], "jupyterlab": 533, "Or": 533, "let": 533, "u": 533, "help": 533, "you": 533, "pre": 533, "requisit": 533, "make": [534, 537, 540, 545], "manual": [534, 537], "npm": [534, 537, 545], "autom": [534, 537], "publish": [534, 537], "conda": [534, 537], "forg": [534, 537], "neural_compressor_ext_lab_alibaba": [536, 537], "log": [538, 547, 548], "unreleas": 538, "vscode": 539, "open": [539, 544], "icon": 539, "5": 539, "welcom": 540, "your": 540, "v": 540, "folder": 540, "setup": 540, "up": 540, "straight": 540, "awai": 540, "explor": 540, "test": [540, 545], "go": 540, "further": 540, "insight": [541, 542, 543, 544], "tensor": [541, 567], "dump": [541, 543], "research": 541, "collabor": 541, "debug": [542, 544], "analyz": [542, 544, 545], "weight": [542, 543, 544, 564], "histogram": 544, "react": 545, "app": 545, "avail": 545, "eject": 545, "learn": [545, 546], "more": [545, 546], "bundl": 545, "size": 545, "web": 545, "deploy": [545, 558], "fail": 545, "minifi": 545, "solut": [546, 547, 548, 552, 553, 554], "why": 546, "doe": 546, "method": [546, 547], "pip": [546, 547], "end": [546, 552, 553, 554], "servic": [547, 549, 552, 553, 554], "submit": [547, 548, 552, 553, 554], "task": [547, 548, 550, 552, 553, 554], "stop": [547, 552, 553, 554], "inspect": 547, "manag": [547, 552, 553], "resourc": [547, 552, 553], "node": 547, "state": 547, "cluster": [547, 548], "remov": 547, "url": 548, "endpoint": 548, "task_id": 548, "websocket": 548, "screen": 548, "ping": 548, "download": [548, 552, 553], "doc": 549, "wip": 549, "oaa": 549, "definit": 549, "diagram": 549, "hug": [553, 554], "grpc": 554, "client": 555, "singl": 556, "One": 557, "shot": 557, "network": 558, "sparsiti": 558, "decai": 558, "regular": 558, "larg": 558, "languag": 558, "retrain": 558, "free": 558, "spars": 558, "hyperparamet": 558, "full": 559, "78": 559, "2023": 559, "24": 559, "2022": 559, "35": 559, "2021": 559, "15": [559, 573], "2018": 559, "2020": 559, "style": 560, "access": 560, "fundament": [561, 567], "scheme": 561, "approach": 561, "With": 561, "without": 561, "specifi": 561, "rule": 561, "devic": 561, "wise": 562, "lwq": 562, "turn": 563, "off": 563, "woq": [564, 573], "known": 565, "benefit": 566, "comparison": 566, "differ": 566, "smooth": 567, "quant": 567, "per": 567, "channel": 567, "limit": 567, "smoothquant": 567, "enhanc": 567, "alpha": 567, "engin": 567, "fix": 567, "determin": 567, "entir": 567, "each": 567, "block": 567, "tensorboard": 568, "space": 570, "exit": 570, "process": 570, "zero": 571, "topic": 571, "innov": 571, "product": 571, "13": 573, "0": 573, "ptq": 573}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"block_mask": [[0, "module-block_mask"]], "neural_compressor.adaptor.adaptor": [[1, "module-neural_compressor.adaptor.adaptor"]], "Module Contents": [[1, "module-contents"], [3, "module-contents"], [11, "module-contents"], [13, "module-contents"], [14, "module-contents"], [15, "module-contents"], [16, "module-contents"], [18, "module-contents"], [19, "module-contents"], [20, "module-contents"], [21, "module-contents"], [22, "module-contents"], [23, "module-contents"], [24, "module-contents"], [25, "module-contents"], [26, "module-contents"], [27, "module-contents"], [28, "module-contents"], [30, "module-contents"], [31, "module-contents"], [32, "module-contents"], [33, "module-contents"], [34, "module-contents"], [35, "module-contents"], [36, "module-contents"], [37, "module-contents"], [38, "module-contents"], [39, "module-contents"], [40, "module-contents"], [41, "module-contents"], [42, "module-contents"], [43, "module-contents"], [44, "module-contents"], [45, "module-contents"], [46, "module-contents"], [47, "module-contents"], [48, "module-contents"], [49, "module-contents"], [50, "module-contents"], [51, "module-contents"], [53, "module-contents"], [54, "module-contents"], [55, "module-contents"], [56, "module-contents"], [57, "module-contents"], [58, "module-contents"], [59, "module-contents"], [60, "module-contents"], [61, "module-contents"], [62, "module-contents"], [63, "module-contents"], [64, "module-contents"], [65, "module-contents"], [66, "module-contents"], [67, "module-contents"], [68, "module-contents"], [69, "module-contents"], [70, "module-contents"], [71, "module-contents"], [72, "module-contents"], [73, "module-contents"], [74, "module-contents"], [75, "module-contents"], [77, "module-contents"], [78, "module-contents"], [79, "module-contents"], [80, "module-contents"], [81, "module-contents"], [82, "module-contents"], [83, "module-contents"], [84, "module-contents"], [85, "module-contents"], [86, "module-contents"], [88, "module-contents"], [89, "module-contents"], [90, "module-contents"], [91, "module-contents"], [92, "module-contents"], [93, "module-contents"], [94, "module-contents"], [96, "module-contents"], [97, "module-contents"], [98, "module-contents"], [99, "module-contents"], [100, "module-contents"], [102, "module-contents"], [103, "module-contents"], [104, "module-contents"], [105, "module-contents"], [107, "module-contents"], [108, "module-contents"], [109, "module-contents"], [110, "module-contents"], [113, "module-contents"], [115, "module-contents"], [116, "module-contents"], [118, "module-contents"], [119, "module-contents"], [120, "module-contents"], [121, "module-contents"], [122, "module-contents"], [123, "module-contents"], [124, "module-contents"], [125, "module-contents"], [126, "module-contents"], [127, "module-contents"], [128, "module-contents"], [129, "module-contents"], [131, "module-contents"], [132, "module-contents"], [133, "module-contents"], [134, "module-contents"], [135, "module-contents"], [136, "module-contents"], [137, "module-contents"], [138, "module-contents"], [139, "module-contents"], [140, "module-contents"], [141, "module-contents"], [142, "module-contents"], [143, "module-contents"], [144, "module-contents"], [146, "module-contents"], [147, "module-contents"], [148, "module-contents"], [149, "module-contents"], [150, "module-contents"], [153, "module-contents"], [154, "module-contents"], [155, "module-contents"], [156, "module-contents"], [157, "module-contents"], [160, "module-contents"], [161, "module-contents"], [162, "module-contents"], [163, "module-contents"], [164, "module-contents"], [165, "module-contents"], [166, "module-contents"], [167, "module-contents"], [168, "module-contents"], [169, "module-contents"], [170, "module-contents"], [171, "module-contents"], [172, "module-contents"], [173, "module-contents"], [175, "module-contents"], [176, "module-contents"], [177, "module-contents"], [178, "module-contents"], [179, "module-contents"], [181, "module-contents"], [183, "module-contents"], [184, "module-contents"], [186, "module-contents"], [187, "module-contents"], [190, "module-contents"], [191, "module-contents"], [193, "module-contents"], [194, "module-contents"], [196, "module-contents"], [198, "module-contents"], [199, "module-contents"], [200, "module-contents"], [202, "module-contents"], [203, "module-contents"], [204, "module-contents"], [205, "module-contents"], [206, "module-contents"], [207, "module-contents"], [209, "module-contents"], [210, "module-contents"], [211, "module-contents"], [212, "module-contents"], [213, "module-contents"], [214, "module-contents"], [215, "module-contents"], [216, "module-contents"], [217, "module-contents"], [218, "module-contents"], [220, "module-contents"], [221, "module-contents"], [222, "module-contents"], [223, "module-contents"], [224, "module-contents"], [226, "module-contents"], [227, "module-contents"], [230, "module-contents"], [231, "module-contents"], [232, "module-contents"], [233, "module-contents"], [234, "module-contents"], [235, "module-contents"], [237, "module-contents"], [238, "module-contents"], [239, "module-contents"], [240, "module-contents"], [241, "module-contents"], [242, "module-contents"], [243, "module-contents"], [244, "module-contents"], [245, "module-contents"], [246, "module-contents"], [247, "module-contents"], [249, "module-contents"], [250, "module-contents"], [251, "module-contents"], [254, "module-contents"], [255, "module-contents"], [257, "module-contents"], [258, "module-contents"], [259, "module-contents"], [260, "module-contents"], [261, "module-contents"], [262, "module-contents"], [264, "module-contents"], [265, "module-contents"], [266, "module-contents"], [267, "module-contents"], [268, "module-contents"], [269, "module-contents"], [273, "module-contents"], [274, "module-contents"], [275, "module-contents"], [277, "module-contents"], [278, "module-contents"], [280, "module-contents"], [281, "module-contents"], [282, "module-contents"], [283, "module-contents"], [284, "module-contents"], [285, "module-contents"], [286, "module-contents"], [287, "module-contents"], [288, "module-contents"], [289, "module-contents"], [290, "module-contents"], [292, "module-contents"], [293, "module-contents"], [294, "module-contents"], [297, "module-contents"], [299, "module-contents"], [300, "module-contents"], [301, "module-contents"], [303, "module-contents"], [304, "module-contents"], [305, "module-contents"], [306, "module-contents"], [308, "module-contents"], [309, "module-contents"], [311, "module-contents"], [312, "module-contents"], [313, "module-contents"], [315, "module-contents"], [316, "module-contents"], [317, "module-contents"], [318, "module-contents"], [319, "module-contents"], [321, "module-contents"], [322, "module-contents"], [323, "module-contents"], [324, "module-contents"], [325, "module-contents"], [327, "module-contents"], [328, "module-contents"], [329, "module-contents"], [330, "module-contents"], [333, "module-contents"], [334, "module-contents"], [335, "module-contents"], [338, "module-contents"], [339, "module-contents"], [340, "module-contents"], [341, "module-contents"], [342, "module-contents"], [343, "module-contents"], [344, "module-contents"], [345, "module-contents"], [346, "module-contents"], [347, "module-contents"], [348, "module-contents"], [350, "module-contents"], [351, "module-contents"], [352, "module-contents"], [353, "module-contents"], [356, "module-contents"], [357, "module-contents"], [358, "module-contents"], [359, "module-contents"], [361, "module-contents"], [362, "module-contents"], [364, "module-contents"], [365, "module-contents"], [366, "module-contents"], [368, "module-contents"], [369, "module-contents"], [370, "module-contents"], [372, "module-contents"], [373, "module-contents"], [374, "module-contents"], [375, "module-contents"], [376, "module-contents"], [377, "module-contents"], [378, "module-contents"], [379, "module-contents"], [381, "module-contents"], [383, "module-contents"], [385, "module-contents"], [386, "module-contents"], [387, "module-contents"], [388, "module-contents"], [390, "module-contents"], [391, "module-contents"], [393, "module-contents"], [395, "module-contents"], [396, "module-contents"], [397, "module-contents"], [398, "module-contents"], [400, "module-contents"], [401, "module-contents"], [402, "module-contents"], [403, "module-contents"], [404, "module-contents"], [405, "module-contents"], [406, "module-contents"], [407, "module-contents"], [408, "module-contents"], [409, "module-contents"], [411, "module-contents"], [412, "module-contents"], [413, "module-contents"], [414, "module-contents"], [417, "module-contents"], [418, "module-contents"], [419, "module-contents"], [420, "module-contents"], [421, "module-contents"], [425, "module-contents"], [433, "module-contents"], [435, "module-contents"], [437, "module-contents"], [438, "module-contents"], [440, "module-contents"], [442, "module-contents"], [443, "module-contents"], [444, "module-contents"], [449, "module-contents"], [450, "module-contents"], [456, "module-contents"], [457, "module-contents"], [460, "module-contents"], [461, "module-contents"], [462, "module-contents"], [464, "module-contents"], [466, "module-contents"], [467, "module-contents"], [468, "module-contents"], [469, "module-contents"], [470, "module-contents"], [471, "module-contents"], [472, "module-contents"], [473, "module-contents"]], "Classes": [[1, "classes"], [3, "classes"], [11, "classes"], [13, "classes"], [14, "classes"], [15, "classes"], [16, "classes"], [18, "classes"], [19, "classes"], [20, "classes"], [21, "classes"], [22, "classes"], [23, "classes"], [24, "classes"], [25, "classes"], [26, "classes"], [27, "classes"], [28, "classes"], [30, "classes"], [31, "classes"], [32, "classes"], [33, "classes"], [34, "classes"], [35, "classes"], [36, "classes"], [37, "classes"], [38, "classes"], [39, "classes"], [40, "classes"], [41, "classes"], [42, "classes"], [43, "classes"], [45, "classes"], [46, "classes"], [47, "classes"], [48, "classes"], [49, "classes"], [50, "classes"], [51, "classes"], [53, "classes"], [54, "classes"], [55, "classes"], [56, "classes"], [57, "classes"], [58, "classes"], [59, "classes"], [60, "classes"], [61, "classes"], [62, "classes"], [63, "classes"], [64, "classes"], [65, "classes"], [66, "classes"], [67, "classes"], [68, "classes"], [69, "classes"], [70, "classes"], [71, "classes"], [72, "classes"], [73, "classes"], [74, "classes"], [75, "classes"], [77, "classes"], [78, "classes"], [79, "classes"], [80, "classes"], [81, "classes"], [82, "classes"], [83, "classes"], [84, "classes"], [85, "classes"], [86, "classes"], [88, "classes"], [89, "classes"], [90, "classes"], [91, "classes"], [92, "classes"], [93, "classes"], [94, "classes"], [96, "classes"], [97, "classes"], [98, "classes"], [99, "classes"], [100, "classes"], [102, "classes"], [103, "classes"], [104, "classes"], [105, "classes"], [107, "classes"], [108, "classes"], [109, "classes"], [110, "classes"], [113, "classes"], [115, "classes"], [119, "classes"], [120, "classes"], [121, "classes"], [122, "classes"], [123, "classes"], [124, "classes"], [125, "classes"], [126, "classes"], [127, "classes"], [128, "classes"], [129, "classes"], [131, "classes"], [132, "classes"], [133, "classes"], [134, "classes"], [135, "classes"], [136, "classes"], [137, "classes"], [138, "classes"], [139, "classes"], [140, "classes"], [141, "classes"], [142, "classes"], [143, "classes"], [144, "classes"], [146, "classes"], [147, "classes"], [149, "classes"], [153, "classes"], [154, "classes"], [155, "classes"], [156, "classes"], [157, "classes"], [161, "classes"], [165, "classes"], [166, "classes"], [167, "classes"], [169, "classes"], [172, "classes"], [173, "classes"], [174, "classes"], [175, "classes"], [176, "classes"], [178, "classes"], [179, "classes"], [181, "classes"], [183, "classes"], [184, "classes"], [186, "classes"], [190, "classes"], [191, "classes"], [193, "classes"], [198, "classes"], [199, "classes"], [200, "classes"], [202, "classes"], [203, "classes"], [204, "classes"], [205, "classes"], [206, "classes"], [207, "classes"], [209, "classes"], [210, "classes"], [211, "classes"], [212, "classes"], [213, "classes"], [214, "classes"], [215, "classes"], [216, "classes"], [217, "classes"], [222, "classes"], [223, "classes"], [224, "classes"], [226, "classes"], [227, "classes"], [230, "classes"], [231, "classes"], [232, "classes"], [233, "classes"], [234, "classes"], [235, "classes"], [236, "classes"], [237, "classes"], [238, "classes"], [239, "classes"], [240, "classes"], [241, "classes"], [242, "classes"], [243, "classes"], [244, "classes"], [245, "classes"], [246, "classes"], [247, "classes"], [248, "classes"], [249, "classes"], [250, "classes"], [251, "classes"], [252, "classes"], [253, "classes"], [254, "classes"], [255, "classes"], [256, "classes"], [257, "classes"], [258, "classes"], [259, "classes"], [260, "classes"], [261, "classes"], [262, "classes"], [263, "classes"], [264, "classes"], [265, "classes"], [266, "classes"], [267, "classes"], [269, "classes"], [273, "classes"], [274, "classes"], [275, "classes"], [277, "classes"], [278, "classes"], [280, "classes"], [281, "classes"], [282, "classes"], [283, "classes"], [284, "classes"], [285, "classes"], [286, "classes"], [287, "classes"], [288, "classes"], [289, "classes"], [290, "classes"], [291, "classes"], [292, "classes"], [293, "classes"], [294, "classes"], [295, "classes"], [296, "classes"], [297, "classes"], [298, "classes"], [299, "classes"], [300, "classes"], [301, "classes"], [306, "classes"], [307, "classes"], [308, "classes"], [311, "classes"], [314, "classes"], [315, "classes"], [316, "classes"], [317, "classes"], [318, "classes"], [319, "classes"], [321, "classes"], [323, "classes"], [324, "classes"], [325, "classes"], [327, "classes"], [328, "classes"], [329, "classes"], [330, "classes"], [331, "classes"], [332, "classes"], [333, "classes"], [334, "classes"], [335, "classes"], [338, "classes"], [340, "classes"], [341, "classes"], [342, "classes"], [343, "classes"], [344, "classes"], [345, "classes"], [346, "classes"], [347, "classes"], [348, "classes"], [350, "classes"], [351, "classes"], [352, "classes"], [353, "classes"], [356, "classes"], [357, "classes"], [358, "classes"], [359, "classes"], [361, "classes"], [364, "classes"], [367, "classes"], [368, "classes"], [370, "classes"], [371, "classes"], [372, "classes"], [373, "classes"], [374, "classes"], [375, "classes"], [376, "classes"], [377, "classes"], [378, "classes"], [379, "classes"], [381, "classes"], [383, "classes"], [385, "classes"], [386, "classes"], [387, "classes"], [388, "classes"], [390, "classes"], [391, "classes"], [393, "classes"], [395, "classes"], [397, "classes"], [398, "classes"], [400, "classes"], [403, "classes"], [404, "classes"], [405, "classes"], [406, "classes"], [407, "classes"], [408, "classes"], [409, "classes"], [411, "classes"], [412, "classes"], [413, "classes"], [414, "classes"], [417, "classes"], [418, "classes"], [419, "classes"], [420, "classes"], [421, "classes"], [425, "classes"], [435, "classes"], [440, "classes"], [444, "classes"], [450, "classes"], [456, "classes"], [461, "classes"], [462, "classes"], [465, "classes"], [466, "classes"], [467, "classes"], [468, "classes"], [470, "classes"], [472, "classes"], [473, "classes"]], "Functions": [[1, "functions"], [13, "functions"], [16, "functions"], [34, "functions"], [42, "functions"], [43, "functions"], [44, "functions"], [45, "functions"], [67, "functions"], [68, "functions"], [70, "functions"], [104, "functions"], [105, "functions"], [116, "functions"], [118, "functions"], [148, "functions"], [149, "functions"], [150, "functions"], [153, "functions"], [155, "functions"], [156, "functions"], [157, "functions"], [162, "functions"], [163, "functions"], [164, "functions"], [167, "functions"], [168, "functions"], [170, "functions"], [171, "functions"], [172, "functions"], [174, "functions"], [177, "functions"], [178, "functions"], [179, "functions"], [181, "functions"], [184, "functions"], [186, "functions"], [187, "functions"], [190, "functions"], [191, "functions"], [193, "functions"], [194, "functions"], [195, "functions"], [196, "functions"], [198, "functions"], [200, "functions"], [201, "functions"], [205, "functions"], [208, "functions"], [214, "functions"], [215, "functions"], [216, "functions"], [217, "functions"], [218, "functions"], [220, "functions"], [221, "functions"], [224, "functions"], [233, "functions"], [234, "functions"], [242, "functions"], [244, "functions"], [248, "functions"], [251, "functions"], [252, "functions"], [253, "functions"], [256, "functions"], [258, "functions"], [259, "functions"], [260, "functions"], [261, "functions"], [263, "functions"], [265, "functions"], [266, "functions"], [268, "functions"], [277, "functions"], [285, "functions"], [287, "functions"], [291, "functions"], [294, "functions"], [295, "functions"], [296, "functions"], [298, "functions"], [299, "functions"], [300, "functions"], [303, "functions"], [304, "functions"], [305, "functions"], [308, "functions"], [309, "functions"], [311, "functions"], [312, "functions"], [313, "functions"], [314, "functions"], [315, "functions"], [322, "functions"], [329, "functions"], [333, "functions"], [338, "functions"], [339, "functions"], [340, "functions"], [342, "functions"], [347, "functions"], [353, "functions"], [357, "functions"], [359, "functions"], [361, "functions"], [362, "functions"], [364, "functions"], [365, "functions"], [366, "functions"], [367, "functions"], [368, "functions"], [369, "functions"], [373, "functions"], [377, "functions"], [379, "functions"], [396, "functions"], [401, "functions"], [402, "functions"], [406, "functions"], [414, "functions"], [418, "functions"], [420, "functions"], [421, "functions"], [433, "functions"], [435, "functions"], [437, "functions"], [438, "functions"], [440, "functions"], [442, "functions"], [443, "functions"], [449, "functions"], [450, "functions"], [457, "functions"], [460, "functions"], [461, "functions"], [464, "functions"], [465, "functions"], [467, "functions"], [468, "functions"], [469, "functions"], [471, "functions"], [472, "functions"]], "neural_compressor.adaptor": [[2, "module-neural_compressor.adaptor"]], "Subpackages": [[2, "subpackages"], [17, "subpackages"], [87, "subpackages"], [111, "subpackages"], [112, "subpackages"], [114, "subpackages"], [158, "subpackages"], [192, "subpackages"], [195, "subpackages"], [228, "subpackages"], [253, "subpackages"], [271, "subpackages"], [296, "subpackages"], [307, "subpackages"], [331, "subpackages"], [349, "subpackages"], [360, "subpackages"], [410, "subpackages"]], "Submodules": [[2, "submodules"], [12, "submodules"], [17, "submodules"], [29, "submodules"], [52, "submodules"], [76, "submodules"], [87, "submodules"], [95, "submodules"], [101, "submodules"], [106, "submodules"], [111, "submodules"], [112, "submodules"], [114, "submodules"], [117, "submodules"], [130, "submodules"], [145, "submodules"], [151, "submodules"], [158, "submodules"], [159, "submodules"], [174, "submodules"], [180, "submodules"], [185, "submodules"], [188, "submodules"], [192, "submodules"], [195, "submodules"], [197, "submodules"], [201, "submodules"], [208, "submodules"], [219, "submodules"], [225, "submodules"], [229, "submodules"], [236, "submodules"], [248, "submodules"], [252, "submodules"], [256, "submodules"], [263, "submodules"], [272, "submodules"], [279, "submodules"], [291, "submodules"], [295, "submodules"], [298, "submodules"], [302, "submodules"], [307, "submodules"], [314, "submodules"], [320, "submodules"], [326, "submodules"], [332, "submodules"], [336, "submodules"], [349, "submodules"], [355, "submodules"], [360, "submodules"], [367, "submodules"], [371, "submodules"], [382, "submodules"], [384, "submodules"], [389, "submodules"], [392, "submodules"], [394, "submodules"], [399, "submodules"], [410, "submodules"], [416, "submodules"], [422, "submodules"], [455, "submodules"], [465, "submodules"]], "Package Contents": [[2, "package-contents"], [29, "package-contents"], [174, "package-contents"], [195, "package-contents"], [201, "package-contents"], [208, "package-contents"], [236, "package-contents"], [248, "package-contents"], [252, "package-contents"], [253, "package-contents"], [256, "package-contents"], [263, "package-contents"], [279, "package-contents"], [291, "package-contents"], [295, "package-contents"], [296, "package-contents"], [298, "package-contents"], [307, "package-contents"], [314, "package-contents"], [326, "package-contents"], [331, "package-contents"], [332, "package-contents"], [349, "package-contents"], [367, "package-contents"], [371, "package-contents"], [410, "package-contents"], [465, "package-contents"]], "neural_compressor.adaptor.keras": [[3, "module-neural_compressor.adaptor.keras"]], "neural_compressor.adaptor.keras_utils.conv2d": [[4, "module-neural_compressor.adaptor.keras_utils.conv2d"]], "neural_compressor.adaptor.keras_utils.dense": [[5, "module-neural_compressor.adaptor.keras_utils.dense"]], "neural_compressor.adaptor.keras_utils.depthwise_conv2d": [[6, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"]], "neural_compressor.adaptor.keras_utils": [[7, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.pool2d": [[8, "module-neural_compressor.adaptor.keras_utils.pool2d"]], "neural_compressor.adaptor.keras_utils.quantizer": [[9, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "neural_compressor.adaptor.keras_utils.separable_conv2d": [[10, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"]], "neural_compressor.adaptor.mxnet": [[11, "module-neural_compressor.adaptor.mxnet"]], "neural_compressor.adaptor.mxnet_utils": [[12, "module-neural_compressor.adaptor.mxnet_utils"]], "neural_compressor.adaptor.mxnet_utils.util": [[13, "module-neural_compressor.adaptor.mxnet_utils.util"]], "neural_compressor.adaptor.onnxrt": [[14, "module-neural_compressor.adaptor.onnxrt"]], "neural_compressor.adaptor.ox_utils.calibration": [[15, "module-neural_compressor.adaptor.ox_utils.calibration"]], "neural_compressor.adaptor.ox_utils.calibrator": [[16, "module-neural_compressor.adaptor.ox_utils.calibrator"]], "neural_compressor.adaptor.ox_utils": [[17, "module-neural_compressor.adaptor.ox_utils"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[18, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[19, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[20, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[21, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[22, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[23, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[24, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[25, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[26, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[27, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[28, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[29, "module-neural_compressor.adaptor.ox_utils.operators"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[30, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[31, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[32, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "neural_compressor.adaptor.ox_utils.operators.norm": [[33, "module-neural_compressor.adaptor.ox_utils.operators.norm"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[34, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[35, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[36, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "neural_compressor.adaptor.ox_utils.operators.reduce": [[37, "module-neural_compressor.adaptor.ox_utils.operators.reduce"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[38, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "neural_compressor.adaptor.ox_utils.operators.split": [[39, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "neural_compressor.adaptor.ox_utils.operators.unary_op": [[40, "module-neural_compressor.adaptor.ox_utils.operators.unary_op"]], "neural_compressor.adaptor.ox_utils.quantizer": [[41, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "neural_compressor.adaptor.ox_utils.smooth_quant": [[42, "module-neural_compressor.adaptor.ox_utils.smooth_quant"]], "neural_compressor.adaptor.ox_utils.util": [[43, "module-neural_compressor.adaptor.ox_utils.util"]], "neural_compressor.adaptor.ox_utils.weight_only": [[44, "module-neural_compressor.adaptor.ox_utils.weight_only"]], "neural_compressor.adaptor.pytorch": [[45, "module-neural_compressor.adaptor.pytorch"]], "neural_compressor.adaptor.query": [[46, "module-neural_compressor.adaptor.query"]], "neural_compressor.adaptor.tensorflow": [[47, "module-neural_compressor.adaptor.tensorflow"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[48, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[49, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer": [[51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[109, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_util": [[110, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "neural_compressor.adaptor.tf_utils": [[111, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[112, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[138, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[139, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "neural_compressor.adaptor.tf_utils.smooth_quant_calibration": [[140, "module-neural_compressor.adaptor.tf_utils.smooth_quant_calibration"]], "neural_compressor.adaptor.tf_utils.smooth_quant_scaler": [[141, "module-neural_compressor.adaptor.tf_utils.smooth_quant_scaler"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[142, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[143, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[144, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[145, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[146, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[147, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.util": [[148, "module-neural_compressor.adaptor.tf_utils.util"]], "neural_compressor.adaptor.torch_utils.autoround.autoround": [[149, "module-neural_compressor.adaptor.torch_utils.autoround.autoround"]], "neural_compressor.adaptor.torch_utils.autoround.export": [[150, "module-neural_compressor.adaptor.torch_utils.autoround.export"]], "neural_compressor.adaptor.torch_utils.autoround": [[151, "module-neural_compressor.adaptor.torch_utils.autoround"]], "neural_compressor.adaptor.torch_utils.autoround.model_wrapper": [[152, "module-neural_compressor.adaptor.torch_utils.autoround.model_wrapper"]], "neural_compressor.adaptor.torch_utils.autoround.sign_sgd": [[153, "module-neural_compressor.adaptor.torch_utils.autoround.sign_sgd"]], "neural_compressor.adaptor.torch_utils.awq": [[154, "module-neural_compressor.adaptor.torch_utils.awq"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[155, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "neural_compressor.adaptor.torch_utils.gptq": [[156, "module-neural_compressor.adaptor.torch_utils.gptq"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[157, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[158, "module-neural_compressor.adaptor.torch_utils"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant": [[159, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle": [[160, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize": [[161, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load": [[162, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils": [[163, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.utils"]], "neural_compressor.adaptor.torch_utils.mixed_precision": [[164, "module-neural_compressor.adaptor.torch_utils.mixed_precision"]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[165, "module-neural_compressor.adaptor.torch_utils.model_wrapper"]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[166, "module-neural_compressor.adaptor.torch_utils.pattern_detector"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[167, "module-neural_compressor.adaptor.torch_utils.smooth_quant"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[168, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "neural_compressor.adaptor.torch_utils.teq": [[169, "module-neural_compressor.adaptor.torch_utils.teq"]], "neural_compressor.adaptor.torch_utils.util": [[170, "module-neural_compressor.adaptor.torch_utils.util"]], "}": [[170, "id3"]], "neural_compressor.adaptor.torch_utils.weight_only": [[171, "module-neural_compressor.adaptor.torch_utils.weight_only"]], "neural_compressor.algorithm.algorithm": [[172, "module-neural_compressor.algorithm.algorithm"]], "neural_compressor.algorithm.fast_bias_correction": [[173, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[174, "module-neural_compressor.algorithm"]], "neural_compressor.algorithm.smooth_quant": [[175, "module-neural_compressor.algorithm.smooth_quant"]], "neural_compressor.algorithm.weight_correction": [[176, "module-neural_compressor.algorithm.weight_correction"]], "neural_compressor.benchmark": [[177, "module-neural_compressor.benchmark"]], "neural_compressor.common.base_config": [[178, "module-neural_compressor.common.base_config"]], "neural_compressor.common.base_tuning": [[179, "module-neural_compressor.common.base_tuning"]], "neural_compressor.common": [[180, "module-neural_compressor.common"]], "neural_compressor.common.logger": [[181, "module-neural_compressor.common.logger"]], "neural_compressor.common.utility": [[182, "module-neural_compressor.common.utility"]], "neural_compressor.compression.callbacks": [[183, "module-neural_compressor.compression.callbacks"]], "neural_compressor.compression.distillation.criterions": [[184, "module-neural_compressor.compression.distillation.criterions"]], "neural_compressor.compression.distillation": [[185, "module-neural_compressor.compression.distillation"]], "neural_compressor.compression.distillation.optimizers": [[186, "module-neural_compressor.compression.distillation.optimizers"]], "neural_compressor.compression.distillation.utility": [[187, "module-neural_compressor.compression.distillation.utility"]], "neural_compressor.compression.hpo": [[188, "module-neural_compressor.compression.hpo"]], "neural_compressor.compression.hpo.sa_optimizer": [[189, "module-neural_compressor.compression.hpo.sa_optimizer"]], "neural_compressor.compression.hpo.search_algorithms": [[190, "module-neural_compressor.compression.hpo.search_algorithms"]], "neural_compressor.compression.hpo.search_space": [[191, "module-neural_compressor.compression.hpo.search_space"]], "neural_compressor.compression": [[192, "module-neural_compressor.compression"]], "neural_compressor.compression.pruner.criteria": [[193, "module-neural_compressor.compression.pruner.criteria"]], "neural_compressor.compression.pruner.dsnot": [[194, "module-neural_compressor.compression.pruner.dsnot"]], "neural_compressor.compression.pruner": [[195, "module-neural_compressor.compression.pruner"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[196, "module-neural_compressor.compression.pruner.model_slim.auto_slim"]], "neural_compressor.compression.pruner.model_slim": [[197, "module-neural_compressor.compression.pruner.model_slim"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[198, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[199, "module-neural_compressor.compression.pruner.model_slim.weight_slim"]], "neural_compressor.compression.pruner.patterns.base": [[200, "module-neural_compressor.compression.pruner.patterns.base"]], "neural_compressor.compression.pruner.patterns": [[201, "module-neural_compressor.compression.pruner.patterns"]], "neural_compressor.compression.pruner.patterns.mha": [[202, "module-neural_compressor.compression.pruner.patterns.mha"]], "neural_compressor.compression.pruner.patterns.ninm": [[203, "module-neural_compressor.compression.pruner.patterns.ninm"]], "neural_compressor.compression.pruner.patterns.nxm": [[204, "module-neural_compressor.compression.pruner.patterns.nxm"]], "neural_compressor.compression.pruner.pruners.base": [[205, "module-neural_compressor.compression.pruner.pruners.base"]], "neural_compressor.compression.pruner.pruners.basic": [[206, "module-neural_compressor.compression.pruner.pruners.basic"]], "neural_compressor.compression.pruner.pruners.block_mask": [[207, "module-neural_compressor.compression.pruner.pruners.block_mask"]], "neural_compressor.compression.pruner.pruners": [[208, "module-neural_compressor.compression.pruner.pruners"]], "neural_compressor.compression.pruner.pruners.mha": [[209, "module-neural_compressor.compression.pruner.pruners.mha"]], "neural_compressor.compression.pruner.pruners.pattern_lock": [[210, "module-neural_compressor.compression.pruner.pruners.pattern_lock"]], "neural_compressor.compression.pruner.pruners.progressive": [[211, "module-neural_compressor.compression.pruner.pruners.progressive"]], "neural_compressor.compression.pruner.pruners.retrain_free": [[212, "module-neural_compressor.compression.pruner.pruners.retrain_free"]], "neural_compressor.compression.pruner.pruners.sparse_gpt": [[213, "module-neural_compressor.compression.pruner.pruners.sparse_gpt"]], "neural_compressor.compression.pruner.pruning": [[214, "module-neural_compressor.compression.pruner.pruning"]], "neural_compressor.compression.pruner.regs": [[215, "module-neural_compressor.compression.pruner.regs"]], "neural_compressor.compression.pruner.schedulers": [[216, "module-neural_compressor.compression.pruner.schedulers"]], "neural_compressor.compression.pruner.tf_criteria": [[217, "module-neural_compressor.compression.pruner.tf_criteria"]], "neural_compressor.compression.pruner.utils": [[218, "module-neural_compressor.compression.pruner.utils"]], "neural_compressor.compression.pruner.wanda": [[219, "module-neural_compressor.compression.pruner.wanda"]], "neural_compressor.compression.pruner.wanda.prune": [[220, "module-neural_compressor.compression.pruner.wanda.prune"]], "neural_compressor.compression.pruner.wanda.utils": [[221, "module-neural_compressor.compression.pruner.wanda.utils"]], "neural_compressor.compression.pruner.wanda.wrapper": [[222, "module-neural_compressor.compression.pruner.wanda.wrapper"]], "neural_compressor.conf.config": [[223, "module-neural_compressor.conf.config"]], "neural_compressor.conf.dotdict": [[224, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[225, "module-neural_compressor.conf"]], "neural_compressor.conf.pythonic_config": [[226, "module-neural_compressor.conf.pythonic_config"]], "neural_compressor.config": [[227, "module-neural_compressor.config"]], "neural_compressor.contrib": [[228, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[229, "module-neural_compressor.contrib.strategy"]], "neural_compressor.contrib.strategy.sigopt": [[230, "module-neural_compressor.contrib.strategy.sigopt"]], "neural_compressor.contrib.strategy.tpe": [[231, "module-neural_compressor.contrib.strategy.tpe"]], "neural_compressor.data.dataloaders.base_dataloader": [[232, "module-neural_compressor.data.dataloaders.base_dataloader"]], "neural_compressor.data.dataloaders.dataloader": [[233, "module-neural_compressor.data.dataloaders.dataloader"]], "neural_compressor.data.dataloaders.default_dataloader": [[234, "module-neural_compressor.data.dataloaders.default_dataloader"]], "neural_compressor.data.dataloaders.fetcher": [[235, "module-neural_compressor.data.dataloaders.fetcher"]], "neural_compressor.data.dataloaders": [[236, "module-neural_compressor.data.dataloaders"]], "Attributes": [[236, "attributes"], [244, "attributes"], [253, "attributes"], [287, "attributes"], [296, "attributes"], [307, "attributes"], [331, "attributes"], [371, "attributes"], [421, "attributes"], [465, "attributes"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[237, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[238, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[239, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "neural_compressor.data.dataloaders.sampler": [[240, "module-neural_compressor.data.dataloaders.sampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[241, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.data.datasets.bert_dataset": [[242, "module-neural_compressor.data.datasets.bert_dataset"]], "neural_compressor.data.datasets.coco_dataset": [[243, "module-neural_compressor.data.datasets.coco_dataset"]], "neural_compressor.data.datasets.dataset": [[244, "module-neural_compressor.data.datasets.dataset"]], "neural_compressor.data.datasets.dummy_dataset": [[245, "module-neural_compressor.data.datasets.dummy_dataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[246, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "neural_compressor.data.datasets.imagenet_dataset": [[247, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[248, "module-neural_compressor.data.datasets"]], "neural_compressor.data.datasets.style_transfer_dataset": [[249, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "neural_compressor.data.filters.coco_filter": [[250, "module-neural_compressor.data.filters.coco_filter"]], "neural_compressor.data.filters.filter": [[251, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[252, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[253, "module-neural_compressor.data"]], "neural_compressor.data.transforms.coco_transform": [[254, "module-neural_compressor.data.transforms.coco_transform"]], "neural_compressor.data.transforms.imagenet_transform": [[255, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[256, "module-neural_compressor.data.transforms"]], "neural_compressor.data.transforms.postprocess": [[257, "module-neural_compressor.data.transforms.postprocess"]], "neural_compressor.data.transforms.tokenization": [[258, "module-neural_compressor.data.transforms.tokenization"]], "neural_compressor.data.transforms.transform": [[259, "module-neural_compressor.data.transforms.transform"]], "neural_compressor.experimental.benchmark": [[260, "module-neural_compressor.experimental.benchmark"]], "neural_compressor.experimental.common.criterion": [[261, "module-neural_compressor.experimental.common.criterion"]], "neural_compressor.experimental.common.dataloader": [[262, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[263, "module-neural_compressor.experimental.common"]], "neural_compressor.experimental.common.metric": [[264, "module-neural_compressor.experimental.common.metric"]], "neural_compressor.experimental.common.model": [[265, "module-neural_compressor.experimental.common.model"]], "neural_compressor.experimental.common.optimizer": [[266, "module-neural_compressor.experimental.common.optimizer"]], "neural_compressor.experimental.common.postprocess": [[267, "module-neural_compressor.experimental.common.postprocess"]], "neural_compressor.experimental.common.torch_utils": [[268, "module-neural_compressor.experimental.common.torch_utils"]], "neural_compressor.experimental.component": [[269, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.compression": [[270, "module-neural_compressor.experimental.compression"]], "neural_compressor.experimental.contrib": [[271, "module-neural_compressor.experimental.contrib"]], "neural_compressor.experimental.contrib.strategy": [[272, "module-neural_compressor.experimental.contrib.strategy"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[273, "module-neural_compressor.experimental.contrib.strategy.sigopt"]], "neural_compressor.experimental.contrib.strategy.tpe": [[274, "module-neural_compressor.experimental.contrib.strategy.tpe"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[275, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[276, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[277, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[278, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[279, "module-neural_compressor.experimental.data.dataloaders"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[280, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[281, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[282, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[283, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[284, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[285, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[286, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "neural_compressor.experimental.data.datasets.dataset": [[287, "module-neural_compressor.experimental.data.datasets.dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[288, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[289, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[290, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[291, "module-neural_compressor.experimental.data.datasets"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[292, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "neural_compressor.experimental.data.filters.coco_filter": [[293, "module-neural_compressor.experimental.data.filters.coco_filter"]], "neural_compressor.experimental.data.filters.filter": [[294, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[295, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[296, "module-neural_compressor.experimental.data"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[297, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[298, "module-neural_compressor.experimental.data.transforms"]], "neural_compressor.experimental.data.transforms.tokenization": [[299, "module-neural_compressor.experimental.data.transforms.tokenization"]], "neural_compressor.experimental.data.transforms.transform": [[300, "module-neural_compressor.experimental.data.transforms.transform"]], "neural_compressor.experimental.distillation": [[301, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[302, "module-neural_compressor.experimental.export"]], "neural_compressor.experimental.export.qlinear2qdq": [[303, "module-neural_compressor.experimental.export.qlinear2qdq"]], "neural_compressor.experimental.export.tf2onnx": [[304, "module-neural_compressor.experimental.export.tf2onnx"]], "neural_compressor.experimental.export.torch2onnx": [[305, "module-neural_compressor.experimental.export.torch2onnx"]], "neural_compressor.experimental.graph_optimization": [[306, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[307, "module-neural_compressor.experimental"]], "neural_compressor.experimental.metric.bleu": [[308, "module-neural_compressor.experimental.metric.bleu"]], "neural_compressor.experimental.metric.bleu_util": [[309, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[310, "module-neural_compressor.experimental.metric.coco_label_map"]], "neural_compressor.experimental.metric.coco_tools": [[311, "module-neural_compressor.experimental.metric.coco_tools"]], "neural_compressor.experimental.metric.evaluate_squad": [[312, "module-neural_compressor.experimental.metric.evaluate_squad"]], "neural_compressor.experimental.metric.f1": [[313, "module-neural_compressor.experimental.metric.f1"]], "neural_compressor.experimental.metric": [[314, "module-neural_compressor.experimental.metric"]], "neural_compressor.experimental.metric.metric": [[315, "module-neural_compressor.experimental.metric.metric"]], "neural_compressor.experimental.mixed_precision": [[316, "module-neural_compressor.experimental.mixed_precision"]], "neural_compressor.experimental.model_conversion": [[317, "module-neural_compressor.experimental.model_conversion"]], "neural_compressor.experimental.nas.basic_nas": [[318, "module-neural_compressor.experimental.nas.basic_nas"]], "neural_compressor.experimental.nas.dynas": [[319, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas": [[320, "module-neural_compressor.experimental.nas"]], "neural_compressor.experimental.nas.nas": [[321, "module-neural_compressor.experimental.nas.nas"]], "neural_compressor.experimental.nas.nas_utils": [[322, "module-neural_compressor.experimental.nas.nas_utils"]], "neural_compressor.experimental.nas.search_algorithms": [[323, "module-neural_compressor.experimental.nas.search_algorithms"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[324, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[325, "module-neural_compressor.experimental.pruner_legacy.group_lasso"]], "neural_compressor.experimental.pruner_legacy": [[326, "module-neural_compressor.experimental.pruner_legacy"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[327, "module-neural_compressor.experimental.pruner_legacy.magnitude"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[328, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"]], "neural_compressor.experimental.pruner_legacy.pruner": [[329, "module-neural_compressor.experimental.pruner_legacy.pruner"]], "neural_compressor.experimental.pruning": [[330, "module-neural_compressor.experimental.pruning"]], "neural_compressor.experimental.pruning_recipes": [[331, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[332, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[333, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[334, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "neural_compressor.experimental.pruning_v2": [[335, "module-neural_compressor.experimental.pruning_v2"]], "neural_compressor.experimental.pytorch_pruner": [[336, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[337, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[338, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[339, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[340, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[341, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[342, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "neural_compressor.experimental.quantization": [[343, "module-neural_compressor.experimental.quantization"]], "neural_compressor.experimental.scheduler": [[344, "module-neural_compressor.experimental.scheduler"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[345, "module-neural_compressor.experimental.strategy.auto_mixed_precision"]], "neural_compressor.experimental.strategy.basic": [[346, "module-neural_compressor.experimental.strategy.basic"]], "neural_compressor.experimental.strategy.bayesian": [[347, "module-neural_compressor.experimental.strategy.bayesian"]], "neural_compressor.experimental.strategy.exhaustive": [[348, "module-neural_compressor.experimental.strategy.exhaustive"]], "neural_compressor.experimental.strategy": [[349, "module-neural_compressor.experimental.strategy"]], "neural_compressor.experimental.strategy.mse": [[350, "module-neural_compressor.experimental.strategy.mse"]], "neural_compressor.experimental.strategy.mse_v2": [[351, "module-neural_compressor.experimental.strategy.mse_v2"]], "neural_compressor.experimental.strategy.random": [[352, "module-neural_compressor.experimental.strategy.random"]], "neural_compressor.experimental.strategy.strategy": [[353, "module-neural_compressor.experimental.strategy.strategy"]], "neural_compressor.experimental.strategy.utils.constant": [[354, "module-neural_compressor.experimental.strategy.utils.constant"]], "neural_compressor.experimental.strategy.utils": [[355, "module-neural_compressor.experimental.strategy.utils"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[356, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[357, "module-neural_compressor.experimental.strategy.utils.tuning_space"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[358, "module-neural_compressor.experimental.strategy.utils.tuning_structs"]], "neural_compressor.experimental.strategy.utils.utility": [[359, "module-neural_compressor.experimental.strategy.utils.utility"]], "neural_compressor": [[360, "module-neural_compressor"]], "neural_compressor.metric.bleu": [[361, "module-neural_compressor.metric.bleu"]], "neural_compressor.metric.bleu_util": [[362, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[363, "module-neural_compressor.metric.coco_label_map"]], "neural_compressor.metric.coco_tools": [[364, "module-neural_compressor.metric.coco_tools"]], "neural_compressor.metric.evaluate_squad": [[365, "module-neural_compressor.metric.evaluate_squad"]], "neural_compressor.metric.f1": [[366, "module-neural_compressor.metric.f1"]], "neural_compressor.metric": [[367, "module-neural_compressor.metric"]], "neural_compressor.metric.metric": [[368, "module-neural_compressor.metric.metric"]], "neural_compressor.mix_precision": [[369, "module-neural_compressor.mix_precision"]], "neural_compressor.model.base_model": [[370, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[371, "module-neural_compressor.model"]], "neural_compressor.model.keras_model": [[372, "module-neural_compressor.model.keras_model"]], "neural_compressor.model.model": [[373, "module-neural_compressor.model.model"]], "neural_compressor.model.mxnet_model": [[374, "module-neural_compressor.model.mxnet_model"]], "neural_compressor.model.nets_factory": [[375, "module-neural_compressor.model.nets_factory"]], "neural_compressor.model.onnx_model": [[376, "module-neural_compressor.model.onnx_model"]], "neural_compressor.model.tensorflow_model": [[377, "module-neural_compressor.model.tensorflow_model"]], "neural_compressor.model.torch_model": [[378, "module-neural_compressor.model.torch_model"]], "neural_compressor.objective": [[379, "module-neural_compressor.objective"]], "neural_compressor.profiling": [[380, "module-neural_compressor.profiling"]], "neural_compressor.profiling.parser.factory": [[381, "module-neural_compressor.profiling.parser.factory"]], "neural_compressor.profiling.parser": [[382, "module-neural_compressor.profiling.parser"]], "neural_compressor.profiling.parser.onnx_parser.factory": [[383, "module-neural_compressor.profiling.parser.onnx_parser.factory"]], "neural_compressor.profiling.parser.onnx_parser": [[384, "module-neural_compressor.profiling.parser.onnx_parser"]], "neural_compressor.profiling.parser.onnx_parser.parser": [[385, "module-neural_compressor.profiling.parser.onnx_parser.parser"]], "neural_compressor.profiling.parser.parser": [[386, "module-neural_compressor.profiling.parser.parser"]], "neural_compressor.profiling.parser.result": [[387, "module-neural_compressor.profiling.parser.result"]], "neural_compressor.profiling.parser.tensorflow_parser.factory": [[388, "module-neural_compressor.profiling.parser.tensorflow_parser.factory"]], "neural_compressor.profiling.parser.tensorflow_parser": [[389, "module-neural_compressor.profiling.parser.tensorflow_parser"]], "neural_compressor.profiling.parser.tensorflow_parser.parser": [[390, "module-neural_compressor.profiling.parser.tensorflow_parser.parser"]], "neural_compressor.profiling.profiler.factory": [[391, "module-neural_compressor.profiling.profiler.factory"]], "neural_compressor.profiling.profiler": [[392, "module-neural_compressor.profiling.profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.factory": [[393, "module-neural_compressor.profiling.profiler.onnxrt_profiler.factory"]], "neural_compressor.profiling.profiler.onnxrt_profiler": [[394, "module-neural_compressor.profiling.profiler.onnxrt_profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.profiler": [[395, "module-neural_compressor.profiling.profiler.onnxrt_profiler.profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.utils": [[396, "module-neural_compressor.profiling.profiler.onnxrt_profiler.utils"]], "neural_compressor.profiling.profiler.profiler": [[397, "module-neural_compressor.profiling.profiler.profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.factory": [[398, "module-neural_compressor.profiling.profiler.tensorflow_profiler.factory"]], "neural_compressor.profiling.profiler.tensorflow_profiler": [[399, "module-neural_compressor.profiling.profiler.tensorflow_profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.profiler": [[400, "module-neural_compressor.profiling.profiler.tensorflow_profiler.profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.utils": [[401, "module-neural_compressor.profiling.profiler.tensorflow_profiler.utils"]], "neural_compressor.quantization": [[402, "module-neural_compressor.quantization"]], "neural_compressor.strategy.auto": [[403, "module-neural_compressor.strategy.auto"]], "neural_compressor.strategy.auto_mixed_precision": [[404, "module-neural_compressor.strategy.auto_mixed_precision"]], "neural_compressor.strategy.basic": [[405, "module-neural_compressor.strategy.basic"]], "neural_compressor.strategy.bayesian": [[406, "module-neural_compressor.strategy.bayesian"]], "neural_compressor.strategy.conservative": [[407, "module-neural_compressor.strategy.conservative"]], "neural_compressor.strategy.exhaustive": [[408, "module-neural_compressor.strategy.exhaustive"]], "neural_compressor.strategy.hawq_v2": [[409, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[410, "module-neural_compressor.strategy"]], "neural_compressor.strategy.mse": [[411, "module-neural_compressor.strategy.mse"]], "neural_compressor.strategy.mse_v2": [[412, "module-neural_compressor.strategy.mse_v2"]], "neural_compressor.strategy.random": [[413, "module-neural_compressor.strategy.random"]], "neural_compressor.strategy.strategy": [[414, "module-neural_compressor.strategy.strategy"]], "neural_compressor.strategy.utils.constant": [[415, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[416, "module-neural_compressor.strategy.utils"]], "neural_compressor.strategy.utils.tuning_sampler": [[417, "module-neural_compressor.strategy.utils.tuning_sampler"]], "neural_compressor.strategy.utils.tuning_space": [[418, "module-neural_compressor.strategy.utils.tuning_space"]], "neural_compressor.strategy.utils.tuning_structs": [[419, "module-neural_compressor.strategy.utils.tuning_structs"]], "neural_compressor.strategy.utils.utility": [[420, "module-neural_compressor.strategy.utils.utility"]], "neural_compressor.template.api_doc_example": [[421, "module-neural_compressor.template.api_doc_example"]], "neural_compressor.template": [[422, "module-neural_compressor.template"]], "neural_compressor.tensorflow.algorithms": [[423, "module-neural_compressor.tensorflow.algorithms"]], "neural_compressor.tensorflow.algorithms.static_quantize": [[424, "module-neural_compressor.tensorflow.algorithms.static_quantize"]], "neural_compressor.tensorflow.algorithms.static_quantize.keras": [[425, "module-neural_compressor.tensorflow.algorithms.static_quantize.keras"]], "neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.conv2d": [[426, "module-neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.conv2d"]], "neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.dense": [[427, "module-neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.dense"]], "neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.depthwise_conv2d": [[428, "module-neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.depthwise_conv2d"]], "neural_compressor.tensorflow.algorithms.static_quantize.keras_utils": [[429, "module-neural_compressor.tensorflow.algorithms.static_quantize.keras_utils"]], "neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.pool2d": [[430, "module-neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.pool2d"]], "neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.quantizer": [[431, "module-neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.quantizer"]], "neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.separable_conv2d": [[432, "module-neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.separable_conv2d"]], "neural_compressor.tensorflow.algorithms.static_quantize.quantize_entry": [[433, "module-neural_compressor.tensorflow.algorithms.static_quantize.quantize_entry"]], "neural_compressor.tensorflow": [[434, "module-neural_compressor.tensorflow"]], "neural_compressor.tensorflow.quantization.config": [[435, "module-neural_compressor.tensorflow.quantization.config"]], "neural_compressor.tensorflow.quantization": [[436, "module-neural_compressor.tensorflow.quantization"]], "neural_compressor.tensorflow.quantization.quantize": [[437, "module-neural_compressor.tensorflow.quantization.quantize"]], "neural_compressor.tensorflow.utils": [[438, "module-neural_compressor.tensorflow.utils"]], "neural_compressor.torch.algorithms": [[439, "module-neural_compressor.torch.algorithms"]], "neural_compressor.torch.algorithms.weight_only.gptq": [[440, "module-neural_compressor.torch.algorithms.weight_only.gptq"]], "neural_compressor.torch.algorithms.weight_only": [[441, "module-neural_compressor.torch.algorithms.weight_only"]], "neural_compressor.torch.algorithms.weight_only.rtn": [[442, "module-neural_compressor.torch.algorithms.weight_only.rtn"]], "neural_compressor.torch.algorithms.weight_only_algos": [[443, "module-neural_compressor.torch.algorithms.weight_only_algos"]], "neural_compressor.torch.amp.autocast": [[444, "module-neural_compressor.torch.amp.autocast"]], "neural_compressor.torch.amp.fp8.functions": [[445, "module-neural_compressor.torch.amp.fp8.functions"]], "neural_compressor.torch.amp.fp8": [[446, "module-neural_compressor.torch.amp.fp8"]], "neural_compressor.torch.amp": [[447, "module-neural_compressor.torch.amp"]], "neural_compressor.torch": [[448, "module-neural_compressor.torch"]], "neural_compressor.torch.quantization.autotune": [[449, "module-neural_compressor.torch.quantization.autotune"]], "neural_compressor.torch.quantization.config": [[450, "module-neural_compressor.torch.quantization.config"]], "neural_compressor.torch.quantization.fp8": [[451, "module-neural_compressor.torch.quantization.fp8"]], "neural_compressor.torch.quantization.fp8.modules": [[452, "module-neural_compressor.torch.quantization.fp8.modules"]], "neural_compressor.torch.quantization.fp8.observer": [[453, "module-neural_compressor.torch.quantization.fp8.observer"]], "neural_compressor.torch.quantization.fp8.quantization_impl": [[454, "module-neural_compressor.torch.quantization.fp8.quantization_impl"]], "neural_compressor.torch.quantization": [[455, "module-neural_compressor.torch.quantization"]], "neural_compressor.torch.quantization.layers": [[456, "module-neural_compressor.torch.quantization.layers"]], "neural_compressor.torch.quantization.quantize": [[457, "module-neural_compressor.torch.quantization.quantize"]], "neural_compressor.torch.utils.constants": [[458, "module-neural_compressor.torch.utils.constants"]], "neural_compressor.torch.utils": [[459, "module-neural_compressor.torch.utils"]], "neural_compressor.torch.utils.utility": [[460, "module-neural_compressor.torch.utils.utility"]], "neural_compressor.training": [[461, "module-neural_compressor.training"]], "neural_compressor.utils.collect_layer_histogram": [[462, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[463, "module-neural_compressor.utils.constant"]], "neural_compressor.utils.create_obj_from_config": [[464, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[465, "module-neural_compressor.utils"]], "neural_compressor.utils.kl_divergence": [[466, "module-neural_compressor.utils.kl_divergence"]], "neural_compressor.utils.load_huggingface": [[467, "module-neural_compressor.utils.load_huggingface"]], "neural_compressor.utils.logger": [[468, "module-neural_compressor.utils.logger"]], "neural_compressor.utils.neural_insights_utils": [[469, "module-neural_compressor.utils.neural_insights_utils"]], "neural_compressor.utils.options": [[470, "module-neural_compressor.utils.options"]], "neural_compressor.utils.pytorch": [[471, "module-neural_compressor.utils.pytorch"]], "neural_compressor.utils.utility": [[472, "module-neural_compressor.utils.utility"]], "neural_compressor.utils.weights_details": [[473, "module-neural_compressor.utils.weights_details"]], "neural_compressor.version": [[474, "module-neural_compressor.version"]], "Intel\u00ae Neural Compressor Documentation": [[475, "intel-neural-compressor-documentation"], [574, "intel-neural-compressor-documentation"]], "Sections": [[475, "sections"], [574, "sections"]], "Contributor Covenant Code of Conduct": [[476, "contributor-covenant-code-of-conduct"], [477, "contributor-covenant-code-of-conduct"]], "Our Pledge": [[476, "our-pledge"]], "Our Standards": [[476, "our-standards"]], "Our Responsibilities": [[476, "our-responsibilities"]], "Scope": [[476, "scope"]], "Enforcement": [[476, "enforcement"]], "Attribution": [[476, "attribution"]], "Contribution Guidelines": [[477, "contribution-guidelines"]], "Create Pull Request": [[477, "create-pull-request"]], "Step-by-Step guidelines": [[477, "step-by-step-guidelines"]], "Pull Request Checklist": [[477, "pull-request-checklist"]], "Pull Request Template": [[477, "pull-request-template"]], "Pull Request Acceptance Criteria": [[477, "pull-request-acceptance-criteria"]], "Pull Request Status Checks Overview": [[477, "pull-request-status-checks-overview"]], "Support": [[477, "support"]], "FX": [[478, "fx"]], "Introduction": [[478, "introduction"], [479, "introduction"], [482, "introduction"], [483, "introduction"], [484, "introduction"], [499, "introduction"], [500, "introduction"], [501, "introduction"], [502, "introduction"], [505, "introduction"], [506, "introduction"], [507, "introduction"], [509, "introduction"], [511, "introduction"], [514, "introduction"], [518, "introduction"], [520, "introduction"], [521, "introduction"], [542, "introduction"], [543, "introduction"], [544, "introduction"], [556, "introduction"], [557, "introduction"], [558, "introduction"], [560, "introduction"], [562, "introduction"], [564, "introduction"], [566, "introduction"], [567, "introduction"], [568, "introduction"], [569, "introduction"], [570, "introduction"], [572, "introduction"]], "FX Mode Support Matrix in Neural Compressor": [[478, "fx-mode-support-matrix-in-neural-compressor"]], "Get Started": [[478, "get-started"], [504, "get-started"], [546, "get-started"], [561, "get-started"]], "Post Training Static Quantization": [[478, "post-training-static-quantization"], [561, "post-training-static-quantization"]], "Post Training Dynamic Quantization": [[478, "post-training-dynamic-quantization"], [561, "post-training-dynamic-quantization"]], "Quantization-Aware Training": [[478, "quantization-aware-training"]], "Examples": [[478, "examples"], [479, "examples"], [499, "examples"], [501, "examples"], [502, "examples"], [505, "examples"], [506, "examples"], [507, "examples"], [508, "examples"], [509, "examples"], [519, "examples"], [520, "examples"], [521, "examples"], [557, "examples"], [558, "examples"], [561, "examples"], [562, "examples"], [564, "examples"], [568, "examples"]], "Note": [[478, "note"]], "Details": [[478, "details"]], "Common Problem": [[478, "common-problem"]], "Dynamic Quantization": [[478, "dynamic-quantization"]], "Static Quantization & Quantization Aware Training": [[478, "static-quantization-quantization-aware-training"]], "Neural Architecture Search": [[479, "neural-architecture-search"]], "Basic NAS": [[479, "basic-nas"]], "Dynamic NAS": [[479, "dynamic-nas"]], "NAS Support Matrix": [[479, "nas-support-matrix"]], "Get Started with NAS API": [[479, "get-started-with-nas-api"]], "Basic Usage": [[479, "basic-usage"]], "1. Python code + YAML": [[479, "python-code-yaml"]], "2. Python code only": [[479, "python-code-only"]], "Advanced Usage (Custom NAS)": [[479, "advanced-usage-custom-nas"]], "Security Policy": [[480, "security-policy"]], "Report a Vulnerability": [[480, "report-a-vulnerability"]], "Intel\u00ae Neural Compressor": [[481, "intel-neural-compressor"], [539, "intel-neural-compressor"]], "Installation": [[481, "installation"], [515, "installation"], [515, "id1"], [533, "installation"], [541, "installation"], [546, "installation"]], "Install from pypi": [[481, "install-from-pypi"], [541, "install-from-pypi"]], "Getting Started": [[481, "getting-started"], [512, "getting-started"], [541, "getting-started"]], "Quantization with Python API": [[481, "quantization-with-python-api"], [512, "quantization-with-python-api"], [541, "quantization-with-python-api"]], "Documentation": [[481, "documentation"]], "Selected Publications/Events": [[481, "selected-publications-events"]], "Additional Content": [[481, "additional-content"]], "Communication": [[481, "communication"]], "Adaptor": [[482, "adaptor"], [485, "adaptor"]], "Adaptor Support Matrix": [[482, "adaptor-support-matrix"]], "Working Flow": [[482, "working-flow"], [561, "working-flow"]], "Get Started with Adaptor API": [[482, "get-started-with-adaptor-api"]], "Query API": [[482, "query-api"]], "Background": [[482, "background"]], "Query API Introduction": [[482, "query-api-introduction"]], "Example of Adding a New Backend Support": [[482, "example-of-adding-a-new-backend-support"]], "Capability": [[482, "capability"]], "Implement ONNXRTAdaptor Class": [[482, "implement-onnxrtadaptor-class"]], "How to Add An Adaptor": [[483, "how-to-add-an-adaptor"]], "API List that Need to Implement": [[483, "api-list-that-need-to-implement"]], "Design the framework YAML": [[483, "design-the-framework-yaml"]], "Add query_fw_capability to Adaptor": [[483, "add-query-fw-capability-to-adaptor"]], "Add quantize API according to tune_cfg": [[483, "add-quantize-api-according-to-tune-cfg"]], "Prepare calibration model from fp32 graph": [[483, "prepare-calibration-model-from-fp32-graph"]], "Run sampling iterations of the fp32 graph to calibrate quantizable operators.": [[483, "run-sampling-iterations-of-the-fp32-graph-to-calibrate-quantizable-operators"]], "Calculate the data range and generate quantized model": [[483, "calculate-the-data-range-and-generate-quantized-model"]], "How to Support New Data Type, Like Int4, with a Few Line Changes": [[484, "how-to-support-new-data-type-like-int4-with-a-few-line-changes"]], "Define the Quantization Ability of the Specific Operator": [[484, "define-the-quantization-ability-of-the-specific-operator"]], "Invoke the Operator Kernel According to the Tuning Configuration": [[484, "invoke-the-operator-kernel-according-to-the-tuning-configuration"]], "Use the New Data Type": [[484, "use-the-new-data-type"]], "Summary": [[484, "summary"]], "ONNX Runtime": [[486, "onnx-runtime"]], "Torch Utils": [[487, "torch-utils"]], "API Document Example": [[488, "api-document-example"]], "APIs": [[489, "apis"]], "Benchmark": [[490, "benchmark"], [519, "benchmark"], [560, "benchmark"]], "Compression": [[491, "compression"]], "Config": [[492, "config"]], "Mix Precision": [[493, "mix-precision"], [519, "mix-precision"]], "Model": [[494, "model"], [521, "model"], [542, "model"], [544, "model"]], "Objective": [[495, "objective"], [552, "objective"], [553, "objective"], [554, "objective"], [556, "objective"]], "Quantization": [[496, "quantization"], [560, "quantization"], [561, "quantization"]], "Strategy": [[497, "strategy"]], "Training": [[498, "training"]], "Benchmarking": [[499, "benchmarking"]], "Benchmark Support Matrix": [[499, "benchmark-support-matrix"]], "Get Started with Benchmark API": [[499, "get-started-with-benchmark-api"]], "Calibration Algorithms in Quantization": [[500, "calibration-algorithms-in-quantization"]], "Calibration Algorithms": [[500, "calibration-algorithms"]], "Support Matrix": [[500, "support-matrix"], [524, "support-matrix"]], "Reference": [[500, "reference"], [558, "reference"], [561, "reference"], [564, "reference"], [567, "reference"]], "DataLoader": [[501, "dataloader"]], "Supported Framework Dataloader Matrix": [[501, "supported-framework-dataloader-matrix"]], "Get Started with DataLoader": [[501, "get-started-with-dataloader"]], "Use Intel\u00ae Neural Compressor DataLoader API": [[501, "use-intel-neural-compressor-dataloader-api"]], "Build Custom Dataloader with Python API": [[501, "build-custom-dataloader-with-python-api"]], "Dataset": [[502, "dataset"]], "Supported Framework Dataset Matrix": [[502, "supported-framework-dataset-matrix"]], "TensorFlow": [[502, "tensorflow"], [518, "tensorflow"], [569, "tensorflow"]], "PyTorch": [[502, "pytorch"], [518, "pytorch"], [563, "pytorch"]], "MXNet": [[502, "mxnet"], [518, "mxnet"], [569, "mxnet"]], "ONNXRT": [[502, "onnxrt"], [518, "onnxrt"], [569, "onnxrt"]], "Get start with Dataset API": [[502, "get-start-with-dataset-api"]], "Config dataloader in a yaml file": [[502, "config-dataloader-in-a-yaml-file"]], "User-specific dataset": [[502, "user-specific-dataset"]], "Design": [[503, "design"], [570, "design"], [570, "id1"], [570, "id3"], [570, "id5"], [570, "id7"], [570, "id9"], [570, "id11"], [570, "id13"], [570, "id15"], [570, "id17"], [570, "id19"], [570, "id21"]], "Architecture": [[503, "architecture"], [514, "architecture"]], "Workflow": [[503, "workflow"]], "Diagnosis": [[504, "diagnosis"]], "Diagnosis Introduction": [[504, "diagnosis-introduction"]], "Supported Feature Matrix": [[504, "supported-feature-matrix"], [507, "supported-feature-matrix"], [511, "supported-feature-matrix"], [514, "supported-feature-matrix"], [560, "supported-feature-matrix"], [561, "supported-feature-matrix"], [568, "supported-feature-matrix"], [572, "supported-feature-matrix"]], "Install Intel\u00ae Neural Compressor": [[504, "install-intel-neural-compressor"]], "Modify script": [[504, "modify-script"]], "Quantization diagnosis": [[504, "quantization-diagnosis"]], "Benchmark diagnosis": [[504, "benchmark-diagnosis"]], "Example": [[504, "example"], [518, "example"], [524, "example"], [528, "example"], [556, "example"]], "Prepare dataset": [[504, "prepare-dataset"]], "Run quantization script": [[504, "run-quantization-script"]], "Run benchmark script": [[504, "run-benchmark-script"]], "See quantization data": [[504, "see-quantization-data"]], "How to do diagnosis": [[504, "how-to-do-diagnosis"]], "Parameter description": [[504, "parameter-description"]], "Diagnosis suggestions": [[504, "diagnosis-suggestions"]], "Fallback setting example": [[504, "fallback-setting-example"]], "See profiling data": [[504, "see-profiling-data"]], "Distillation": [[505, "distillation"], [519, "distillation"], [560, "distillation"]], "Knowledge Distillation": [[505, "knowledge-distillation"]], "Intermediate Layer Knowledge Distillation": [[505, "intermediate-layer-knowledge-distillation"]], "Self Distillation": [[505, "self-distillation"]], "Distillation Support Matrix": [[505, "distillation-support-matrix"]], "Get Started with Distillation API": [[505, "get-started-with-distillation-api"]], "Distillation for Quantization": [[506, "distillation-for-quantization"]], "Distillation for Quantization Support Matrix": [[506, "distillation-for-quantization-support-matrix"]], "Get Started with Distillation for Quantization API": [[506, "get-started-with-distillation-for-quantization-api"]], "Distributed Training and Inference (Evaluation)": [[507, "distributed-training-and-inference-evaluation"]], "Get Started with Distributed Training and Inference API": [[507, "get-started-with-distributed-training-and-inference-api"]], "Option 1: Pure Yaml Configuration": [[507, "option-1-pure-yaml-configuration"]], "Option 2: User Defined Training Function": [[507, "option-2-user-defined-training-function"]], "Horovodrun Execution": [[507, "horovodrun-execution"]], "Security": [[507, "security"]], "PyTorch Examples:": [[507, "pytorch-examples"]], "TensorFlow Examples:": [[507, "tensorflow-examples"]], "Example List": [[508, "example-list"]], "Release Data": [[508, "release-data"]], "Export": [[509, "export"]], "Supported Framework Model Matrix": [[509, "supported-framework-model-matrix"], [521, "supported-framework-model-matrix"], [562, "supported-framework-model-matrix"], [564, "supported-framework-model-matrix"]], "PyTorch Model": [[509, "pytorch-model"]], "FP32 Model Export": [[509, "fp32-model-export"], [509, "id1"]], "INT8 Model Export": [[509, "int8-model-export"], [509, "id2"]], "Tensorflow Model": [[509, "tensorflow-model"]], "Appendix": [[509, "appendix"]], "Supported quantized ops": [[509, "supported-quantized-ops"]], "Frequently Asked Questions": [[510, "frequently-asked-questions"]], "Common Build Issues": [[510, "common-build-issues"]], "Issue 1:": [[510, "issue-1"]], "Issue 2:": [[510, "issue-2"]], "Issue 3:": [[510, "issue-3"]], "Issue 4:": [[510, "issue-4"]], "Framework YAML Configuration Files": [[511, "framework-yaml-configuration-files"]], "Get started with Framework YAML Files": [[511, "get-started-with-framework-yaml-files"]], "Quick Samples": [[512, "quick-samples"]], "Validated Models": [[512, "validated-models"], [567, "validated-models"], [573, "validated-models"]], "Incompatible changes between v1.2 and v1.1": [[513, "incompatible-changes-between-v1-2-and-v1-1"]], "User-facing APIs": [[513, "user-facing-apis"]], "Built-in transform/dataset/metric APIs": [[513, "built-in-transform-dataset-metric-apis"]], "Infrastructure of Intel\u00ae Neural Compressor": [[514, "infrastructure-of-intel-neural-compressor"]], "Prerequisites": [[515, "prerequisites"], [546, "prerequisites"], [547, "prerequisites"]], "Install from Binary": [[515, "install-from-binary"]], "Install from Source": [[515, "install-from-source"], [541, "install-from-source"]], "Install from AI Kit": [[515, "install-from-ai-kit"]], "System Requirements": [[515, "system-requirements"]], "Validated Hardware Environment": [[515, "validated-hardware-environment"]], "Intel\u00ae Neural Compressor supports CPUs based on Intel 64 architecture or compatible processors:": [[515, "intel-neural-compressor-supports-cpus-based-on-intel-64-architecture-or-compatible-processors"]], "Intel\u00ae Neural Compressor supports GPUs built on Intel\u2019s Xe architecture:": [[515, "intel-neural-compressor-supports-gpus-built-on-intel-s-xe-architecture"]], "Intel\u00ae Neural Compressor quantized ONNX models support multiple hardware vendors through ONNX Runtime:": [[515, "intel-neural-compressor-quantized-onnx-models-support-multiple-hardware-vendors-through-onnx-runtime"]], "Validated Software Environment": [[515, "validated-software-environment"]], "Legal Information": [[516, "legal-information"]], "License": [[516, "license"]], "Citation": [[516, "citation"]], "Trademarks": [[516, "trademarks"]], "LLMs Quantization Recipes": [[517, "llms-quantization-recipes"]], "IPEX key models": [[517, "ipex-key-models"]], "Metrics": [[518, "metrics"]], "Supported Built-in Metric Matrix": [[518, "supported-built-in-metric-matrix"]], "Get Started with Metric": [[518, "get-started-with-metric"]], "Use Intel\u00ae Neural Compressor Metric API": [[518, "use-intel-neural-compressor-metric-api"]], "Build Custom Metric with Python API": [[518, "build-custom-metric-with-python-api"]], "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X": [[519, "code-migration-from-intel-neural-compressor-1-x-to-intel-neural-compressor-2-x"]], "Model Quantization": [[519, "model-quantization"]], "Post-training Quantization": [[519, "post-training-quantization"]], "Quantization Aware Training": [[519, "quantization-aware-training"], [561, "quantization-aware-training"], [561, "id1"]], "Pruning": [[519, "pruning"], [558, "pruning"], [560, "pruning"]], "Orchestration": [[519, "orchestration"]], "Mixed Precision": [[520, "mixed-precision"]], "Mixed Precision Support Matrix": [[520, "mixed-precision-support-matrix"]], "Hardware and Software requests for BF16": [[520, "hardware-and-software-requests-for-bf16"]], "Hardware and Software requests for FP16": [[520, "hardware-and-software-requests-for-fp16"]], "During quantization mixed precision": [[520, "during-quantization-mixed-precision"]], "Accuracy-driven mixed precision": [[520, "accuracy-driven-mixed-precision"]], "Get Started with Mixed Precision API": [[520, "get-started-with-mixed-precision-api"]], "Neural Coder": [[522, "neural-coder"], [539, "neural-coder"], [539, "id1"]], "What do we offer?": [[522, "what-do-we-offer"]], "Getting Started!": [[522, "getting-started"], [533, "getting-started"]], "Jupyter Lab Extension": [[522, "jupyter-lab-extension"]], "Python Launcher": [[522, "python-launcher"], [527, "python-launcher"]], "Python API": [[522, "python-api"]], "Contact": [[522, "contact"], [546, "contact"]], "AWS Amazon SageMaker Support": [[523, "aws-amazon-sagemaker-support"]], "Start Jupyter Lab 3": [[523, "start-jupyter-lab-3"]], "For SageMaker Studio": [[523, "for-sagemaker-studio"]], "For SageMaker Notebook instance": [[523, "for-sagemaker-notebook-instance"]], "Installation Guide": [[523, "installation-guide"]], "BigDL Nano Support": [[524, "bigdl-nano-support"]], "Intel CPU Platforms: Best Performance Setting": [[525, "intel-cpu-platforms-best-performance-setting"]], "Install MKL, OpenMP and JEMALLOC": [[525, "install-mkl-openmp-and-jemalloc"]], "Install NUMA Controller": [[525, "install-numa-controller"]], "Environment Variables": [[525, "environment-variables"]], "Frequency Governers": [[525, "frequency-governers"]], "Neural Coder as Python API": [[526, "neural-coder-as-python-api"]], "Enable": [[526, "enable"]], "Bench": [[526, "bench"]], "SuperBench": [[526, "superbench"]], "Quick-Start": [[527, "quick-start"]], "Launcher Arguments (Optional)": [[527, "launcher-arguments-optional"]], "Neural Coder for Quantization": [[528, "neural-coder-for-quantization"]], "Features Supported": [[528, "features-supported"]], "Models Supported": [[528, "models-supported"]], "Usage": [[528, "usage"], [548, "usage"], [548, "id2"], [548, "id6"], [548, "id9"], [548, "id16"], [548, "id19"], [548, "id22"], [548, "id25"], [567, "usage"], [568, "usage"], [568, "id1"], [570, "usage"], [570, "id2"], [570, "id4"], [570, "id6"], [570, "id8"], [570, "id10"], [570, "id12"], [570, "id14"], [570, "id16"], [570, "id18"], [570, "id20"], [570, "id22"]], "PyPI distribution:": [[528, "pypi-distribution"]], "Supported Optimization Features": [[529, "supported-optimization-features"]], "v0.4": [[530, "v0-4"]], "Highlights": [[530, "highlights"]], "Others": [[530, "others"]], "Changelog": [[531, "changelog"], [535, "changelog"]], "neural_compressor_ext_lab": [[532, "neural-compressor-ext-lab"]], "Requirements": [[532, "requirements"], [536, "requirements"], [542, "requirements"], [543, "requirements"], [544, "requirements"], [552, "requirements"]], "Install": [[532, "install"], [536, "install"]], "Uninstall": [[532, "uninstall"], [536, "uninstall"]], "Contributing": [[532, "contributing"], [536, "contributing"]], "Development install": [[532, "development-install"], [536, "development-install"]], "Development uninstall": [[532, "development-uninstall"], [536, "development-uninstall"]], "Packaging the extension": [[532, "packaging-the-extension"], [536, "packaging-the-extension"]], "Intel\u00ae Neural Compressor as JupyterLab Extension": [[533, "intel-neural-compressor-as-jupyterlab-extension"]], "Auto-enable a feature": [[533, "auto-enable-a-feature"]], "Or let us help you auto-select the best feature": [[533, "or-let-us-help-you-auto-select-the-best-feature"]], "Pre-requisites": [[533, "pre-requisites"]], "Making a new release of neural_compressor_ext_lab": [[534, "making-a-new-release-of-neural-compressor-ext-lab"]], "Manual release": [[534, "manual-release"], [537, "manual-release"]], "Python package": [[534, "python-package"], [537, "python-package"]], "NPM package": [[534, "npm-package"], [537, "npm-package"]], "Automated releases with the Jupyter Releaser": [[534, "automated-releases-with-the-jupyter-releaser"], [537, "automated-releases-with-the-jupyter-releaser"]], "Publishing to conda-forge": [[534, "publishing-to-conda-forge"], [537, "publishing-to-conda-forge"]], "neural_compressor_ext_lab_alibaba": [[536, "neural-compressor-ext-lab-alibaba"]], "Making a new release of neural_compressor_ext_lab_alibaba": [[537, "making-a-new-release-of-neural-compressor-ext-lab-alibaba"]], "Change Log": [[538, "change-log"]], "[Unreleased]": [[538, "unreleased"]], "Background Introduction": [[539, "background-introduction"]], "Neural Coder Extension in VSCode": [[539, "neural-coder-extension-in-vscode"]], "Neural Coder Extension Usage": [[539, "neural-coder-extension-usage"]], "1. Open": [[539, "open"]], "2. Search": [[539, "search"]], "3. Setting": [[539, "setting"]], "4. Icon": [[539, "icon"]], "5. optimization (quantization)": [[539, "optimization-quantization"]], "5.1 Enable": [[539, "enable"]], "5.2 Auto": [[539, "auto"]], "Welcome to your VS Code Extension": [[540, "welcome-to-your-vs-code-extension"]], "What\u2019s in the folder": [[540, "what-s-in-the-folder"]], "Setup": [[540, "setup"]], "Get up and running straight away": [[540, "get-up-and-running-straight-away"]], "Make changes": [[540, "make-changes"]], "Explore the API": [[540, "explore-the-api"]], "Run tests": [[540, "run-tests"]], "Go further": [[540, "go-further"]], "Neural Insights": [[541, "neural-insights"]], "Start the Neural Insights": [[541, "start-the-neural-insights"]], "Tensor dump examples": [[541, "tensor-dump-examples"]], "Step by Step Diagnosis Example": [[541, "step-by-step-diagnosis-example"]], "Research Collaborations": [[541, "research-collaborations"]], "Step by step example how to debug accuracy with Neural Insights": [[542, "step-by-step-example-how-to-debug-accuracy-with-neural-insights"], [544, "step-by-step-example-how-to-debug-accuracy-with-neural-insights"]], "Preparation": [[542, "preparation"], [543, "preparation"], [544, "preparation"], [566, "preparation"]], "Running the quantization": [[542, "running-the-quantization"], [543, "running-the-quantization"], [544, "running-the-quantization"]], "Analyzing the result of quantization": [[542, "analyzing-the-result-of-quantization"], [544, "analyzing-the-result-of-quantization"]], "Weights summary": [[542, "weights-summary"]], "Activations summary": [[542, "activations-summary"]], "Step by step example how to dump weights data for PyTorch model with Neural Insights": [[543, "step-by-step-example-how-to-dump-weights-data-for-pytorch-model-with-neural-insights"]], "Source": [[543, "source"], [544, "source"]], "Prepare the dataset": [[544, "prepare-the-dataset"]], "Analyzing weight histograms": [[544, "analyzing-weight-histograms"]], "Open Neural Insights": [[544, "open-neural-insights"]], "Getting Started with Create React App": [[545, "getting-started-with-create-react-app"]], "Available Scripts": [[545, "available-scripts"]], "npm start": [[545, "npm-start"]], "npm test": [[545, "npm-test"]], "npm run build": [[545, "npm-run-build"]], "npm run eject": [[545, "npm-run-eject"]], "Learn More": [[545, "learn-more"], [546, "learn-more"]], "Code Splitting": [[545, "code-splitting"]], "Analyzing the Bundle Size": [[545, "analyzing-the-bundle-size"]], "Making a Progressive Web App": [[545, "making-a-progressive-web-app"]], "Advanced Configuration": [[545, "advanced-configuration"]], "Deployment": [[545, "deployment"]], "npm run build fails to minify": [[545, "npm-run-build-fails-to-minify"]], "What\u2019s Neural Solution?": [[546, "what-s-neural-solution"]], "Why Neural Solution?": [[546, "why-neural-solution"]], "How does Neural Solution Work?": [[546, "how-does-neural-solution-work"]], "Method 1. Using pip:": [[546, "method-1-using-pip"]], "Method 2. Building from source:": [[546, "method-2-building-from-source"]], "End-to-end examples": [[546, "end-to-end-examples"]], "Get started": [[547, "get-started"]], "Install Neural Solution": [[547, "install-neural-solution"]], "Method 1. Using pip": [[547, "method-1-using-pip"]], "Method 2. Building from source": [[547, "method-2-building-from-source"]], "Start service": [[547, "start-service"]], "Submit task": [[547, "submit-task"]], "Query task status": [[547, "query-task-status"]], "Stop service": [[547, "stop-service"]], "Inspect logs": [[547, "inspect-logs"]], "Manage resource": [[547, "manage-resource"], [552, "manage-resource"], [553, "manage-resource"]], "Node States": [[547, "node-states"]], "Query cluster": [[547, "query-cluster"]], "Add node": [[547, "add-node"]], "Remove node": [[547, "remove-node"]], "Neural Solution API": [[548, "neural-solution-api"]], "Base URL": [[548, "base-url"]], "Endpoints": [[548, "endpoints"]], "GET /": [[548, "get"]], "Description": [[548, "description"], [548, "id1"], [548, "id4"], [548, "id8"], [548, "id12"], [548, "id15"], [548, "id18"], [548, "id21"], [548, "id24"]], "Responses": [[548, "responses"], [548, "id3"], [548, "id7"], [548, "id11"], [548, "id14"], [548, "id17"], [548, "id20"], [548, "id23"], [548, "id26"]], "POST /task/submit": [[548, "post-task-submit"]], "Parameters": [[548, "parameters"], [548, "id5"], [548, "id10"], [548, "id13"]], "GET /task/status/{task_id}": [[548, "get-task-status-task-id"]], "GET /task/log/{task_id}": [[548, "get-task-log-task-id"]], "WebSocket /task/screen/{task_id}": [[548, "websocket-task-screen-task-id"]], "GET /ping": [[548, "get-ping"]], "GET /cluster": [[548, "get-cluster"]], "GET /download/{task_id}": [[548, "get-download-task-id"]], "GET /description": [[548, "get-description"]], "Design Doc for Optimization as a Service [WIP]": [[549, "design-doc-for-optimization-as-a-service-wip"]], "Contents": [[549, "contents"]], "Overview": [[549, "overview"], [571, "overview"]], "Workflow of OaaS": [[549, "workflow-of-oaas"]], "Class definition diagram": [[549, "class-definition-diagram"]], "Extensibility": [[549, "extensibility"]], "Task request description": [[550, "task-request-description"]], "Examples List": [[551, "examples-list"]], "An end-to-end example: quantize a custom model with Neural Solution": [[552, "an-end-to-end-example-quantize-a-custom-model-with-neural-solution"]], "Start the Neural Solution Service": [[552, "start-the-neural-solution-service"], [553, "start-the-neural-solution-service"], [554, "start-the-neural-solution-service"]], "Submit optimization task": [[552, "submit-optimization-task"], [553, "submit-optimization-task"], [554, "submit-optimization-task"]], "Query optimization result": [[552, "query-optimization-result"], [553, "query-optimization-result"], [554, "query-optimization-result"]], "Download optimized model": [[552, "download-optimized-model"], [553, "download-optimized-model"]], "Stop the service": [[552, "stop-the-service"], [553, "stop-the-service"], [554, "stop-the-service"]], "An end-to-end example: quantize a Hugging Face model with Neural Solution": [[553, "an-end-to-end-example-quantize-a-hugging-face-model-with-neural-solution"]], "An end-to-end example: quantize a Hugging Face model with Neural Solution gRPC API": [[554, "an-end-to-end-example-quantize-a-hugging-face-model-with-neural-solution-grpc-api"]], "Client": [[555, "client"]], "Single Objective": [[556, "single-objective"]], "Multiple Objectives": [[556, "multiple-objectives"]], "Objective Support Matrix": [[556, "objective-support-matrix"]], "Get Started with Objective API": [[556, "get-started-with-objective-api"]], "Config Single Objective": [[556, "config-single-objective"]], "Config Multiple Objectives": [[556, "config-multiple-objectives"]], "Optimization Orchestration": [[557, "optimization-orchestration"]], "One-shot": [[557, "one-shot"]], "Orchestration Support Matrix": [[557, "orchestration-support-matrix"]], "Get Started with Orchestration API": [[557, "get-started-with-orchestration-api"]], "Neural Network Pruning": [[558, "neural-network-pruning"]], "Pruning Patterns": [[558, "pruning-patterns"]], "Pruning Criteria": [[558, "pruning-criteria"]], "Pruning Types": [[558, "pruning-types"]], "Pruning Schedules": [[558, "pruning-schedules"]], "Pruning Scope": [[558, "pruning-scope"]], "Sparsity Decay Types": [[558, "sparsity-decay-types"]], "Regularization": [[558, "regularization"]], "Large Language Model Pruning": [[558, "large-language-model-pruning"]], "Pruning Support Matrix": [[558, "pruning-support-matrix"]], "Get Started with Pruning API": [[558, "get-started-with-pruning-api"]], "Training-aware pruning API": [[558, "training-aware-pruning-api"]], "Retrain-free Pruning API": [[558, "retrain-free-pruning-api"]], "Sparse Model Deployment": [[558, "sparse-model-deployment"]], "Pruning with Hyperparameter Optimization": [[558, "pruning-with-hyperparameter-optimization"]], "Full Publications/Events (78)": [[559, "full-publications-events-78"]], "2023 (24)": [[559, "id1"]], "2022 (35)": [[559, "id2"]], "2021 (15)": [[559, "id3"]], "2018 - 2020 (4)": [[559, "id4"]], "Pythonic Style Access for Configurations": [[560, "pythonic-style-access-for-configurations"]], "Pythonic API for User Configurations": [[560, "pythonic-api-for-user-configurations"], [560, "id1"]], "Pythonic API for Framework Configurations": [[560, "pythonic-api-for-framework-configurations"], [560, "id2"]], "Get Started with Pythonic API for Configurations": [[560, "get-started-with-pythonic-api-for-configurations"]], "NAS": [[560, "nas"]], "Quantization Introduction": [[561, "quantization-introduction"]], "Quantization Fundamentals": [[561, "quantization-fundamentals"], [567, "quantization-fundamentals"]], "Quantization Support Matrix": [[561, "quantization-support-matrix"]], "Quantization Scheme in TensorFlow": [[561, "quantization-scheme-in-tensorflow"]], "Quantization Scheme in PyTorch": [[561, "quantization-scheme-in-pytorch"]], "Quantization Scheme in IPEX": [[561, "quantization-scheme-in-ipex"]], "Quantization Scheme in MXNet": [[561, "quantization-scheme-in-mxnet"]], "Quantization Scheme in ONNX Runtime": [[561, "quantization-scheme-in-onnx-runtime"]], "Quantization Approaches": [[561, "quantization-approaches"]], "With or Without Accuracy Aware Tuning": [[561, "with-or-without-accuracy-aware-tuning"]], "Post Training Quantization": [[561, "post-training-quantization"]], "Specify Quantization Rules": [[561, "specify-quantization-rules"]], "Specify Quantization Recipes": [[561, "specify-quantization-recipes"]], "Specify Quantization Backend and Device": [[561, "specify-quantization-backend-and-device"]], "Layer Wise Quantization (LWQ)": [[562, "layer-wise-quantization-lwq"]], "PyTorch framework example": [[562, "pytorch-framework-example"]], "ONNX Runtime framework example": [[562, "onnx-runtime-framework-example"]], "Turn OFF Auto Mixed Precision during Quantization": [[563, "turn-off-auto-mixed-precision-during-quantization"]], "Tensorflow": [[563, "tensorflow"]], "Weight Only Quantization (WOQ)": [[564, "weight-only-quantization-woq"]], "Quantization Capability": [[564, "quantization-capability"]], "Export Compressed Model": [[564, "export-compressed-model"]], "User Code Example": [[564, "user-code-example"]], "WOQ Algorithms Tuning": [[564, "woq-algorithms-tuning"]], "User code example": [[564, "id1"]], "Release": [[565, "release"]], "Release Notes": [[565, "release-notes"]], "Known Issues": [[565, "known-issues"]], "Incompatible Changes": [[565, "incompatible-changes"]], "SigOpt Strategy": [[566, "sigopt-strategy"]], "SigOpt Platform": [[566, "sigopt-platform"]], "Neural Compressor Configuration": [[566, "neural-compressor-configuration"]], "Performance": [[566, "performance"]], "Benefit of SigOpt Strategy": [[566, "benefit-of-sigopt-strategy"]], "Performance Comparison of Different Strategies": [[566, "performance-comparison-of-different-strategies"]], "Smooth Quant": [[567, "smooth-quant"]], "Per-tensor & Per-channel": [[567, "per-tensor-per-channel"]], "Per-tensor example": [[567, "per-tensor-example"]], "Per-channel example": [[567, "per-channel-example"]], "Matmul quantization example": [[567, "matmul-quantization-example"]], "Per-channel limitation": [[567, "per-channel-limitation"]], "SmoothQuant and Our Enhancement": [[567, "smoothquant-and-our-enhancement"]], "SmoothQuant": [[567, "smoothquant"]], "Our enhancement:": [[567, "our-enhancement"]], "Algorithm: Auto-tuning of $\\alpha$.": [[567, "algorithm-auto-tuning-of-alpha"]], "Engineering": [[567, "engineering"]], "Using a fixed alpha": [[567, "using-a-fixed-alpha"]], "Determining the alpha through auto-tuning": [[567, "determining-the-alpha-through-auto-tuning"]], "Auto-tune the alpha for the entire model": [[567, "auto-tune-the-alpha-for-the-entire-model"]], "Auto-tune the alpha for each layer/block": [[567, "auto-tune-the-alpha-for-each-layer-block"]], "Supported Framework Matrix": [[567, "supported-framework-matrix"]], "TensorBoard": [[568, "tensorboard"]], "Get Started with TensorBoard": [[568, "get-started-with-tensorboard"]], "PyTorch TensorBoard": [[568, "pytorch-tensorboard"]], "TensorFlow Tensorboard": [[568, "tensorflow-tensorboard"]], "PyTorch Examples": [[568, "pytorch-examples"]], "TensorFlow Examples": [[568, "tensorflow-examples"]], "Transform": [[569, "transform"]], "Transform Support List": [[569, "transform-support-list"]], "Pytorch": [[569, "pytorch"]], "Tuning Strategies": [[570, "tuning-strategies"]], "Strategy Design": [[570, "strategy-design"]], "Tuning Space": [[570, "tuning-space"]], "Exit Policy": [[570, "exit-policy"]], "Accuracy Criteria": [[570, "accuracy-criteria"]], "Tuning Process": [[570, "tuning-process"]], "Tuning Algorithms": [[570, "tuning-algorithms"]], "Auto": [[570, "auto"]], "Conservative Tuning": [[570, "conservative-tuning"]], "Basic": [[570, "basic"]], "MSE": [[570, "mse"]], "MSE_V2": [[570, "mse-v2"]], "HAWQ_V2": [[570, "hawq-v2"]], "Bayesian": [[570, "bayesian"]], "Exhaustive": [[570, "exhaustive"]], "Random": [[570, "random"]], "SigOpt": [[570, "sigopt"]], "TPE": [[570, "tpe"]], "Distributed Tuning": [[570, "distributed-tuning"]], "Customize a New Tuning Strategy": [[570, "customize-a-new-tuning-strategy"]], "User Guide": [[571, "user-guide"]], "Python-based APIs": [[571, "python-based-apis"]], "Neural Coder (Zero-code Optimization)": [[571, "neural-coder-zero-code-optimization"]], "Advanced Topics": [[571, "advanced-topics"]], "Innovations for Productivity": [[571, "innovations-for-productivity"]], "User YAML Configuration Files": [[572, "user-yaml-configuration-files"]], "Get started with User YAML Files": [[572, "get-started-with-user-yaml-files"]], "Validated Quantization Examples": [[573, "validated-quantization-examples"]], "TensorFlow Models with Intel TensorFlow 2.13.0": [[573, "tensorflow-models-with-intel-tensorflow-2-13-0"]], "PyTorch Models with Torch 2.0.1+cpu in PTQ Mode": [[573, "pytorch-models-with-torch-2-0-1-cpu-in-ptq-mode"]], "PyTorch Models with Torch 2.0.1+cpu in QAT Mode": [[573, "pytorch-models-with-torch-2-0-1-cpu-in-qat-mode"]], "PyTorch Models with Intel\u00ae Extension for PyTorch* 2.0.1+cpu": [[573, "pytorch-models-with-intel-extension-for-pytorch-2-0-1-cpu"]], "PyTorch Models with Torch 2.0.1+cpu in WOQ Mode": [[573, "pytorch-models-with-torch-2-0-1-cpu-in-woq-mode"]], "ONNX Models with ONNX Runtime 1.15.1": [[573, "onnx-models-with-onnx-runtime-1-15-1"]], "ONNX Models with ONNX Runtime 1.15.0 in WOQ Mode": [[573, "onnx-models-with-onnx-runtime-1-15-0-in-woq-mode"]], "Validated Pruning Examples": [[573, "validated-pruning-examples"]], "Validated Knowledge Distillation Examples": [[573, "validated-knowledge-distillation-examples"]], "Validated ONNX QDQ INT8 Models on Multiple Hardware through ONNX Runtime": [[573, "validated-onnx-qdq-int8-models-on-multiple-hardware-through-onnx-runtime"]]}, "indexentries": {"block_mask": [[0, "module-block_mask"]], "module": [[0, "module-block_mask"], [1, "module-neural_compressor.adaptor.adaptor"], [2, "module-neural_compressor.adaptor"], [3, "module-neural_compressor.adaptor.keras"], [4, "module-neural_compressor.adaptor.keras_utils.conv2d"], [5, "module-neural_compressor.adaptor.keras_utils.dense"], [6, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"], [7, "module-neural_compressor.adaptor.keras_utils"], [8, "module-neural_compressor.adaptor.keras_utils.pool2d"], [9, "module-neural_compressor.adaptor.keras_utils.quantizer"], [10, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"], [11, "module-neural_compressor.adaptor.mxnet"], [12, "module-neural_compressor.adaptor.mxnet_utils"], [13, "module-neural_compressor.adaptor.mxnet_utils.util"], [14, "module-neural_compressor.adaptor.onnxrt"], [15, "module-neural_compressor.adaptor.ox_utils.calibration"], [16, "module-neural_compressor.adaptor.ox_utils.calibrator"], [17, "module-neural_compressor.adaptor.ox_utils"], [18, "module-neural_compressor.adaptor.ox_utils.operators.activation"], [19, "module-neural_compressor.adaptor.ox_utils.operators.argmax"], [20, "module-neural_compressor.adaptor.ox_utils.operators.attention"], [21, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"], [22, "module-neural_compressor.adaptor.ox_utils.operators.concat"], [23, "module-neural_compressor.adaptor.ox_utils.operators.conv"], [24, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"], [25, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"], [26, "module-neural_compressor.adaptor.ox_utils.operators.gather"], [27, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"], [28, "module-neural_compressor.adaptor.ox_utils.operators.gemm"], [29, "module-neural_compressor.adaptor.ox_utils.operators"], [30, "module-neural_compressor.adaptor.ox_utils.operators.lstm"], [31, "module-neural_compressor.adaptor.ox_utils.operators.matmul"], [32, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"], [33, "module-neural_compressor.adaptor.ox_utils.operators.norm"], [34, "module-neural_compressor.adaptor.ox_utils.operators.ops"], [35, "module-neural_compressor.adaptor.ox_utils.operators.pad"], [36, "module-neural_compressor.adaptor.ox_utils.operators.pooling"], [37, "module-neural_compressor.adaptor.ox_utils.operators.reduce"], [38, "module-neural_compressor.adaptor.ox_utils.operators.resize"], [39, "module-neural_compressor.adaptor.ox_utils.operators.split"], [40, "module-neural_compressor.adaptor.ox_utils.operators.unary_op"], [41, "module-neural_compressor.adaptor.ox_utils.quantizer"], [42, "module-neural_compressor.adaptor.ox_utils.smooth_quant"], [43, "module-neural_compressor.adaptor.ox_utils.util"], [44, "module-neural_compressor.adaptor.ox_utils.weight_only"], [45, "module-neural_compressor.adaptor.pytorch"], [46, "module-neural_compressor.adaptor.query"], [47, "module-neural_compressor.adaptor.tensorflow"], [48, "module-neural_compressor.adaptor.tf_utils.graph_converter"], [49, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"], [50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"], [51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer"], [52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"], [53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"], [54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"], [55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"], [56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"], [57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"], [58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"], [59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"], [60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"], [61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"], [62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"], [63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"], [64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"], [65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"], [66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"], [67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"], [68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"], [69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"], [70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"], [71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"], [72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"], [73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"], [74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"], [75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"], [76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"], [77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"], [78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"], [79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"], [80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"], [81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"], [82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"], [83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"], [84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"], [85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"], [86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"], [87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"], [88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"], [89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"], [90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"], [91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"], [92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"], [93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"], [94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"], [95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"], [96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"], [97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"], [98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"], [99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"], [100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"], [101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"], [102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"], [103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"], [104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"], [105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"], [106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"], [107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"], [108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"], [109, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"], [110, "module-neural_compressor.adaptor.tf_utils.graph_util"], [111, "module-neural_compressor.adaptor.tf_utils"], [112, "module-neural_compressor.adaptor.tf_utils.quantize_graph"], [113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"], [114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"], [115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"], [116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"], [117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"], [118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"], [119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"], [120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"], [121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"], [122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"], [123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"], [124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"], [125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"], [126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"], [127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"], [128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"], [129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"], [130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"], [131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"], [132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"], [133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"], [134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"], [135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"], [136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"], [137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"], [138, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"], [139, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"], [140, "module-neural_compressor.adaptor.tf_utils.smooth_quant_calibration"], [141, "module-neural_compressor.adaptor.tf_utils.smooth_quant_scaler"], [142, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"], [143, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"], [144, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"], [145, "module-neural_compressor.adaptor.tf_utils.transform_graph"], [146, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"], [147, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"], [148, "module-neural_compressor.adaptor.tf_utils.util"], [149, "module-neural_compressor.adaptor.torch_utils.autoround.autoround"], [150, "module-neural_compressor.adaptor.torch_utils.autoround.export"], [151, "module-neural_compressor.adaptor.torch_utils.autoround"], [152, "module-neural_compressor.adaptor.torch_utils.autoround.model_wrapper"], [153, "module-neural_compressor.adaptor.torch_utils.autoround.sign_sgd"], [154, "module-neural_compressor.adaptor.torch_utils.awq"], [155, "module-neural_compressor.adaptor.torch_utils.bf16_convert"], [156, "module-neural_compressor.adaptor.torch_utils.gptq"], [157, "module-neural_compressor.adaptor.torch_utils.hawq_metric"], [158, "module-neural_compressor.adaptor.torch_utils"], [159, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant"], [160, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle"], [161, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize"], [162, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load"], [163, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.utils"], [164, "module-neural_compressor.adaptor.torch_utils.mixed_precision"], [165, "module-neural_compressor.adaptor.torch_utils.model_wrapper"], [166, "module-neural_compressor.adaptor.torch_utils.pattern_detector"], [167, "module-neural_compressor.adaptor.torch_utils.smooth_quant"], [168, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"], [169, "module-neural_compressor.adaptor.torch_utils.teq"], [170, "module-neural_compressor.adaptor.torch_utils.util"], [171, "module-neural_compressor.adaptor.torch_utils.weight_only"], [172, "module-neural_compressor.algorithm.algorithm"], [173, "module-neural_compressor.algorithm.fast_bias_correction"], [174, "module-neural_compressor.algorithm"], [175, "module-neural_compressor.algorithm.smooth_quant"], [176, "module-neural_compressor.algorithm.weight_correction"], [177, "module-neural_compressor.benchmark"], [178, "module-neural_compressor.common.base_config"], [179, "module-neural_compressor.common.base_tuning"], [180, "module-neural_compressor.common"], [181, "module-neural_compressor.common.logger"], [182, "module-neural_compressor.common.utility"], [183, "module-neural_compressor.compression.callbacks"], [184, "module-neural_compressor.compression.distillation.criterions"], [185, "module-neural_compressor.compression.distillation"], [186, "module-neural_compressor.compression.distillation.optimizers"], [187, "module-neural_compressor.compression.distillation.utility"], [188, "module-neural_compressor.compression.hpo"], [189, "module-neural_compressor.compression.hpo.sa_optimizer"], [190, "module-neural_compressor.compression.hpo.search_algorithms"], [191, "module-neural_compressor.compression.hpo.search_space"], [192, "module-neural_compressor.compression"], [193, "module-neural_compressor.compression.pruner.criteria"], [194, "module-neural_compressor.compression.pruner.dsnot"], [195, "module-neural_compressor.compression.pruner"], [196, "module-neural_compressor.compression.pruner.model_slim.auto_slim"], [197, "module-neural_compressor.compression.pruner.model_slim"], [198, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"], [199, "module-neural_compressor.compression.pruner.model_slim.weight_slim"], [200, "module-neural_compressor.compression.pruner.patterns.base"], [201, "module-neural_compressor.compression.pruner.patterns"], [202, "module-neural_compressor.compression.pruner.patterns.mha"], [203, "module-neural_compressor.compression.pruner.patterns.ninm"], [204, "module-neural_compressor.compression.pruner.patterns.nxm"], [205, "module-neural_compressor.compression.pruner.pruners.base"], [206, "module-neural_compressor.compression.pruner.pruners.basic"], [207, "module-neural_compressor.compression.pruner.pruners.block_mask"], [208, "module-neural_compressor.compression.pruner.pruners"], [209, "module-neural_compressor.compression.pruner.pruners.mha"], [210, "module-neural_compressor.compression.pruner.pruners.pattern_lock"], [211, "module-neural_compressor.compression.pruner.pruners.progressive"], [212, "module-neural_compressor.compression.pruner.pruners.retrain_free"], [213, "module-neural_compressor.compression.pruner.pruners.sparse_gpt"], [214, "module-neural_compressor.compression.pruner.pruning"], [215, "module-neural_compressor.compression.pruner.regs"], [216, "module-neural_compressor.compression.pruner.schedulers"], [217, "module-neural_compressor.compression.pruner.tf_criteria"], [218, "module-neural_compressor.compression.pruner.utils"], [219, "module-neural_compressor.compression.pruner.wanda"], [220, "module-neural_compressor.compression.pruner.wanda.prune"], [221, "module-neural_compressor.compression.pruner.wanda.utils"], [222, "module-neural_compressor.compression.pruner.wanda.wrapper"], [223, "module-neural_compressor.conf.config"], [224, "module-neural_compressor.conf.dotdict"], [225, "module-neural_compressor.conf"], [226, "module-neural_compressor.conf.pythonic_config"], [227, "module-neural_compressor.config"], [228, "module-neural_compressor.contrib"], [229, "module-neural_compressor.contrib.strategy"], [230, "module-neural_compressor.contrib.strategy.sigopt"], [231, "module-neural_compressor.contrib.strategy.tpe"], [232, "module-neural_compressor.data.dataloaders.base_dataloader"], [233, "module-neural_compressor.data.dataloaders.dataloader"], [234, "module-neural_compressor.data.dataloaders.default_dataloader"], [235, "module-neural_compressor.data.dataloaders.fetcher"], [236, "module-neural_compressor.data.dataloaders"], [237, "module-neural_compressor.data.dataloaders.mxnet_dataloader"], [238, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"], [239, "module-neural_compressor.data.dataloaders.pytorch_dataloader"], [240, "module-neural_compressor.data.dataloaders.sampler"], [241, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"], [242, "module-neural_compressor.data.datasets.bert_dataset"], [243, "module-neural_compressor.data.datasets.coco_dataset"], [244, "module-neural_compressor.data.datasets.dataset"], [245, "module-neural_compressor.data.datasets.dummy_dataset"], [246, "module-neural_compressor.data.datasets.dummy_dataset_v2"], [247, "module-neural_compressor.data.datasets.imagenet_dataset"], [248, "module-neural_compressor.data.datasets"], [249, "module-neural_compressor.data.datasets.style_transfer_dataset"], [250, "module-neural_compressor.data.filters.coco_filter"], [251, "module-neural_compressor.data.filters.filter"], [252, "module-neural_compressor.data.filters"], [253, "module-neural_compressor.data"], [254, "module-neural_compressor.data.transforms.coco_transform"], [255, "module-neural_compressor.data.transforms.imagenet_transform"], [256, "module-neural_compressor.data.transforms"], [257, "module-neural_compressor.data.transforms.postprocess"], [258, "module-neural_compressor.data.transforms.tokenization"], [259, "module-neural_compressor.data.transforms.transform"], [260, "module-neural_compressor.experimental.benchmark"], [261, "module-neural_compressor.experimental.common.criterion"], [262, "module-neural_compressor.experimental.common.dataloader"], [263, "module-neural_compressor.experimental.common"], [264, "module-neural_compressor.experimental.common.metric"], [265, "module-neural_compressor.experimental.common.model"], [266, "module-neural_compressor.experimental.common.optimizer"], [267, "module-neural_compressor.experimental.common.postprocess"], [268, "module-neural_compressor.experimental.common.torch_utils"], [269, "module-neural_compressor.experimental.component"], [270, "module-neural_compressor.experimental.compression"], [271, "module-neural_compressor.experimental.contrib"], [272, "module-neural_compressor.experimental.contrib.strategy"], [273, "module-neural_compressor.experimental.contrib.strategy.sigopt"], [274, "module-neural_compressor.experimental.contrib.strategy.tpe"], [275, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"], [276, "module-neural_compressor.experimental.data.dataloaders.dataloader"], [277, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"], [278, "module-neural_compressor.experimental.data.dataloaders.fetcher"], [279, "module-neural_compressor.experimental.data.dataloaders"], [280, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"], [281, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"], [282, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"], [283, "module-neural_compressor.experimental.data.dataloaders.sampler"], [284, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"], [285, "module-neural_compressor.experimental.data.datasets.bert_dataset"], [286, "module-neural_compressor.experimental.data.datasets.coco_dataset"], [287, "module-neural_compressor.experimental.data.datasets.dataset"], [288, "module-neural_compressor.experimental.data.datasets.dummy_dataset"], [289, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"], [290, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"], [291, "module-neural_compressor.experimental.data.datasets"], [292, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"], [293, "module-neural_compressor.experimental.data.filters.coco_filter"], [294, "module-neural_compressor.experimental.data.filters.filter"], [295, "module-neural_compressor.experimental.data.filters"], [296, "module-neural_compressor.experimental.data"], [297, "module-neural_compressor.experimental.data.transforms.imagenet_transform"], [298, "module-neural_compressor.experimental.data.transforms"], [299, "module-neural_compressor.experimental.data.transforms.tokenization"], [300, "module-neural_compressor.experimental.data.transforms.transform"], [301, "module-neural_compressor.experimental.distillation"], [302, "module-neural_compressor.experimental.export"], [303, "module-neural_compressor.experimental.export.qlinear2qdq"], [304, "module-neural_compressor.experimental.export.tf2onnx"], [305, "module-neural_compressor.experimental.export.torch2onnx"], [306, "module-neural_compressor.experimental.graph_optimization"], [307, "module-neural_compressor.experimental"], [308, "module-neural_compressor.experimental.metric.bleu"], [309, "module-neural_compressor.experimental.metric.bleu_util"], [310, "module-neural_compressor.experimental.metric.coco_label_map"], [311, "module-neural_compressor.experimental.metric.coco_tools"], [312, "module-neural_compressor.experimental.metric.evaluate_squad"], [313, "module-neural_compressor.experimental.metric.f1"], [314, "module-neural_compressor.experimental.metric"], [315, "module-neural_compressor.experimental.metric.metric"], [316, "module-neural_compressor.experimental.mixed_precision"], [317, "module-neural_compressor.experimental.model_conversion"], [318, "module-neural_compressor.experimental.nas.basic_nas"], [319, "module-neural_compressor.experimental.nas.dynas"], [320, "module-neural_compressor.experimental.nas"], [321, "module-neural_compressor.experimental.nas.nas"], [322, "module-neural_compressor.experimental.nas.nas_utils"], [323, "module-neural_compressor.experimental.nas.search_algorithms"], [324, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"], [325, "module-neural_compressor.experimental.pruner_legacy.group_lasso"], [326, "module-neural_compressor.experimental.pruner_legacy"], [327, "module-neural_compressor.experimental.pruner_legacy.magnitude"], [328, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"], [329, "module-neural_compressor.experimental.pruner_legacy.pruner"], [330, "module-neural_compressor.experimental.pruning"], [331, "module-neural_compressor.experimental.pruning_recipes"], [332, "module-neural_compressor.experimental.pruning_recipes.patterns"], [333, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"], [334, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"], [335, "module-neural_compressor.experimental.pruning_v2"], [336, "module-neural_compressor.experimental.pytorch_pruner"], [337, "module-neural_compressor.experimental.pytorch_pruner.logger"], [338, "module-neural_compressor.experimental.pytorch_pruner.patterns"], [339, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"], [340, "module-neural_compressor.experimental.pytorch_pruner.pruner"], [341, "module-neural_compressor.experimental.pytorch_pruner.pruning"], [342, "module-neural_compressor.experimental.pytorch_pruner.scheduler"], [343, "module-neural_compressor.experimental.quantization"], [344, "module-neural_compressor.experimental.scheduler"], [345, "module-neural_compressor.experimental.strategy.auto_mixed_precision"], [346, "module-neural_compressor.experimental.strategy.basic"], [347, "module-neural_compressor.experimental.strategy.bayesian"], [348, "module-neural_compressor.experimental.strategy.exhaustive"], [349, "module-neural_compressor.experimental.strategy"], [350, "module-neural_compressor.experimental.strategy.mse"], [351, "module-neural_compressor.experimental.strategy.mse_v2"], [352, "module-neural_compressor.experimental.strategy.random"], [353, "module-neural_compressor.experimental.strategy.strategy"], [354, "module-neural_compressor.experimental.strategy.utils.constant"], [355, "module-neural_compressor.experimental.strategy.utils"], [356, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"], [357, "module-neural_compressor.experimental.strategy.utils.tuning_space"], [358, "module-neural_compressor.experimental.strategy.utils.tuning_structs"], [359, "module-neural_compressor.experimental.strategy.utils.utility"], [360, "module-neural_compressor"], [361, "module-neural_compressor.metric.bleu"], [362, "module-neural_compressor.metric.bleu_util"], [363, "module-neural_compressor.metric.coco_label_map"], [364, "module-neural_compressor.metric.coco_tools"], [365, "module-neural_compressor.metric.evaluate_squad"], [366, "module-neural_compressor.metric.f1"], [367, "module-neural_compressor.metric"], [368, "module-neural_compressor.metric.metric"], [369, "module-neural_compressor.mix_precision"], [370, "module-neural_compressor.model.base_model"], [371, "module-neural_compressor.model"], [372, "module-neural_compressor.model.keras_model"], [373, "module-neural_compressor.model.model"], [374, "module-neural_compressor.model.mxnet_model"], [375, "module-neural_compressor.model.nets_factory"], [376, "module-neural_compressor.model.onnx_model"], [377, "module-neural_compressor.model.tensorflow_model"], [378, "module-neural_compressor.model.torch_model"], [379, "module-neural_compressor.objective"], [380, "module-neural_compressor.profiling"], [381, "module-neural_compressor.profiling.parser.factory"], [382, "module-neural_compressor.profiling.parser"], [383, "module-neural_compressor.profiling.parser.onnx_parser.factory"], [384, "module-neural_compressor.profiling.parser.onnx_parser"], [385, "module-neural_compressor.profiling.parser.onnx_parser.parser"], [386, "module-neural_compressor.profiling.parser.parser"], [387, "module-neural_compressor.profiling.parser.result"], [388, "module-neural_compressor.profiling.parser.tensorflow_parser.factory"], [389, "module-neural_compressor.profiling.parser.tensorflow_parser"], [390, "module-neural_compressor.profiling.parser.tensorflow_parser.parser"], [391, "module-neural_compressor.profiling.profiler.factory"], [392, "module-neural_compressor.profiling.profiler"], [393, "module-neural_compressor.profiling.profiler.onnxrt_profiler.factory"], [394, "module-neural_compressor.profiling.profiler.onnxrt_profiler"], [395, "module-neural_compressor.profiling.profiler.onnxrt_profiler.profiler"], [396, "module-neural_compressor.profiling.profiler.onnxrt_profiler.utils"], [397, "module-neural_compressor.profiling.profiler.profiler"], [398, "module-neural_compressor.profiling.profiler.tensorflow_profiler.factory"], [399, "module-neural_compressor.profiling.profiler.tensorflow_profiler"], [400, "module-neural_compressor.profiling.profiler.tensorflow_profiler.profiler"], [401, "module-neural_compressor.profiling.profiler.tensorflow_profiler.utils"], [402, "module-neural_compressor.quantization"], [403, "module-neural_compressor.strategy.auto"], [404, "module-neural_compressor.strategy.auto_mixed_precision"], [405, "module-neural_compressor.strategy.basic"], [406, "module-neural_compressor.strategy.bayesian"], [407, "module-neural_compressor.strategy.conservative"], [408, "module-neural_compressor.strategy.exhaustive"], [409, "module-neural_compressor.strategy.hawq_v2"], [410, "module-neural_compressor.strategy"], [411, "module-neural_compressor.strategy.mse"], [412, "module-neural_compressor.strategy.mse_v2"], [413, "module-neural_compressor.strategy.random"], [414, "module-neural_compressor.strategy.strategy"], [415, "module-neural_compressor.strategy.utils.constant"], [416, "module-neural_compressor.strategy.utils"], [417, "module-neural_compressor.strategy.utils.tuning_sampler"], [418, "module-neural_compressor.strategy.utils.tuning_space"], [419, "module-neural_compressor.strategy.utils.tuning_structs"], [420, "module-neural_compressor.strategy.utils.utility"], [421, "module-neural_compressor.template.api_doc_example"], [422, "module-neural_compressor.template"], [423, "module-neural_compressor.tensorflow.algorithms"], [424, "module-neural_compressor.tensorflow.algorithms.static_quantize"], [425, "module-neural_compressor.tensorflow.algorithms.static_quantize.keras"], [426, "module-neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.conv2d"], [427, "module-neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.dense"], [428, "module-neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.depthwise_conv2d"], [429, "module-neural_compressor.tensorflow.algorithms.static_quantize.keras_utils"], [430, "module-neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.pool2d"], [431, "module-neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.quantizer"], [432, "module-neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.separable_conv2d"], [433, "module-neural_compressor.tensorflow.algorithms.static_quantize.quantize_entry"], [434, "module-neural_compressor.tensorflow"], [435, "module-neural_compressor.tensorflow.quantization.config"], [436, "module-neural_compressor.tensorflow.quantization"], [437, "module-neural_compressor.tensorflow.quantization.quantize"], [438, "module-neural_compressor.tensorflow.utils"], [439, "module-neural_compressor.torch.algorithms"], [440, "module-neural_compressor.torch.algorithms.weight_only.gptq"], [441, "module-neural_compressor.torch.algorithms.weight_only"], [442, "module-neural_compressor.torch.algorithms.weight_only.rtn"], [443, "module-neural_compressor.torch.algorithms.weight_only_algos"], [444, "module-neural_compressor.torch.amp.autocast"], [445, "module-neural_compressor.torch.amp.fp8.functions"], [446, "module-neural_compressor.torch.amp.fp8"], [447, "module-neural_compressor.torch.amp"], [448, "module-neural_compressor.torch"], [449, "module-neural_compressor.torch.quantization.autotune"], [450, "module-neural_compressor.torch.quantization.config"], [451, "module-neural_compressor.torch.quantization.fp8"], [452, "module-neural_compressor.torch.quantization.fp8.modules"], [453, "module-neural_compressor.torch.quantization.fp8.observer"], [454, "module-neural_compressor.torch.quantization.fp8.quantization_impl"], [455, "module-neural_compressor.torch.quantization"], [456, "module-neural_compressor.torch.quantization.layers"], [457, "module-neural_compressor.torch.quantization.quantize"], [458, "module-neural_compressor.torch.utils.constants"], [459, "module-neural_compressor.torch.utils"], [460, "module-neural_compressor.torch.utils.utility"], [461, "module-neural_compressor.training"], [462, "module-neural_compressor.utils.collect_layer_histogram"], [463, "module-neural_compressor.utils.constant"], [464, "module-neural_compressor.utils.create_obj_from_config"], [465, "module-neural_compressor.utils"], [466, "module-neural_compressor.utils.kl_divergence"], [467, "module-neural_compressor.utils.load_huggingface"], [468, "module-neural_compressor.utils.logger"], [469, "module-neural_compressor.utils.neural_insights_utils"], [470, "module-neural_compressor.utils.options"], [471, "module-neural_compressor.utils.pytorch"], [472, "module-neural_compressor.utils.utility"], [473, "module-neural_compressor.utils.weights_details"], [474, "module-neural_compressor.version"]], "adaptor (class in neural_compressor.adaptor.adaptor)": [[1, "neural_compressor.adaptor.adaptor.Adaptor"]], "adaptor_registry() (in module neural_compressor.adaptor.adaptor)": [[1, "neural_compressor.adaptor.adaptor.adaptor_registry"]], "neural_compressor.adaptor.adaptor": [[1, "module-neural_compressor.adaptor.adaptor"]], "neural_compressor.adaptor": [[2, "module-neural_compressor.adaptor"]], "kerasadaptor (class in neural_compressor.adaptor.keras)": [[3, "neural_compressor.adaptor.keras.KerasAdaptor"]], "kerasquery (class in neural_compressor.adaptor.keras)": [[3, "neural_compressor.adaptor.keras.KerasQuery"]], "neural_compressor.adaptor.keras": [[3, "module-neural_compressor.adaptor.keras"]], "neural_compressor.adaptor.keras_utils.conv2d": [[4, "module-neural_compressor.adaptor.keras_utils.conv2d"]], "neural_compressor.adaptor.keras_utils.dense": [[5, "module-neural_compressor.adaptor.keras_utils.dense"]], "neural_compressor.adaptor.keras_utils.depthwise_conv2d": [[6, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"]], "neural_compressor.adaptor.keras_utils": [[7, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.pool2d": [[8, "module-neural_compressor.adaptor.keras_utils.pool2d"]], "neural_compressor.adaptor.keras_utils.quantizer": [[9, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "neural_compressor.adaptor.keras_utils.separable_conv2d": [[10, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"]], "mxnetquery (class in neural_compressor.adaptor.mxnet)": [[11, "neural_compressor.adaptor.mxnet.MXNetQuery"]], "mxnetadaptor (class in neural_compressor.adaptor.mxnet)": [[11, "neural_compressor.adaptor.mxnet.MxNetAdaptor"]], "neural_compressor.adaptor.mxnet": [[11, "module-neural_compressor.adaptor.mxnet"]], "neural_compressor.adaptor.mxnet_utils": [[12, "module-neural_compressor.adaptor.mxnet_utils"]], "calibcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CalibCollector"]], "calibdata (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CalibData"]], "collectorbase (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CollectorBase"]], "dataiterloader (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.DataIterLoader"]], "dataloaderwrap (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.DataLoaderWrap"]], "namecollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.NameCollector"]], "optype (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.OpType"]], "tensorcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.TensorCollector"]], "amp_convert() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.amp_convert"]], "calib_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.calib_model"]], "check_mx_version() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.check_mx_version"]], "combine_capabilities() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.combine_capabilities"]], "create_data_example() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.create_data_example"]], "distribute_calib_tensors() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.distribute_calib_tensors"]], "ensure_list() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.ensure_list"]], "fuse() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.fuse"]], "get_framework_name() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.get_framework_name"]], "is_model_quantized() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.is_model_quantized"]], "isiterable() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.isiterable"]], "make_module() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.make_module"]], "make_nc_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.make_nc_model"]], "make_symbol_block() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.make_symbol_block"]], "ndarray_to_device() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.ndarray_to_device"]], "neural_compressor.adaptor.mxnet_utils.util": [[13, "module-neural_compressor.adaptor.mxnet_utils.util"]], "parse_tune_config() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.parse_tune_config"]], "prepare_dataloader() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.prepare_dataloader"]], "prepare_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.prepare_model"]], "prepare_model_data() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.prepare_model_data"]], "quantize_sym_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.quantize_sym_model"]], "query_quantizable_nodes() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.query_quantizable_nodes"]], "run_forward() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.run_forward"]], "onnxrtquery (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRTQuery"]], "onnxrt_integeropsadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_IntegerOpsAdaptor"]], "onnxrt_qdqadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_QDQAdaptor"]], "onnxrt_qlinearopsadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_QLinearOpsAdaptor"]], "onnxrt_weightonlyadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_WeightOnlyAdaptor"]], "onnxruntimeadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor"]], "neural_compressor.adaptor.onnxrt": [[14, "module-neural_compressor.adaptor.onnxrt"]], "onnxrtaugment (class in neural_compressor.adaptor.ox_utils.calibration)": [[15, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment"]], "neural_compressor.adaptor.ox_utils.calibration": [[15, "module-neural_compressor.adaptor.ox_utils.calibration"]], "calibratorbase (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.CalibratorBase"]], "histogramcollector (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.HistogramCollector"]], "klcalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.KLCalibrator"]], "minmaxcalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.MinMaxCalibrator"]], "percentilecalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.PercentileCalibrator"]], "calib_registry() (in module neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.calib_registry"]], "neural_compressor.adaptor.ox_utils.calibrator": [[16, "module-neural_compressor.adaptor.ox_utils.calibrator"]], "smooth_distribution() (in module neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.smooth_distribution"]], "neural_compressor.adaptor.ox_utils": [[17, "module-neural_compressor.adaptor.ox_utils"]], "activationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator"]], "float16activationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.Float16ActivationOperator"]], "qactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.QActivationOperator"]], "removableactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.RemovableActivationOperator"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[18, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "argmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[19, "neural_compressor.adaptor.ox_utils.operators.argmax.ArgMaxOperator"]], "qargmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[19, "neural_compressor.adaptor.ox_utils.operators.argmax.QArgMaxOperator"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[19, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "attentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[20, "neural_compressor.adaptor.ox_utils.operators.attention.AttentionOperator"]], "qattentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[20, "neural_compressor.adaptor.ox_utils.operators.attention.QAttentionOperator"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[20, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "binarydirect8bitoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[21, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryDirect8BitOperator"]], "binaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[21, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator"]], "float16binaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[21, "neural_compressor.adaptor.ox_utils.operators.binary_op.Float16BinaryOperator"]], "qbinaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[21, "neural_compressor.adaptor.ox_utils.operators.binary_op.QBinaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[21, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "concatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[22, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator"]], "qconcatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[22, "neural_compressor.adaptor.ox_utils.operators.concat.QConcatOperator"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[22, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "convoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[23, "neural_compressor.adaptor.ox_utils.operators.conv.ConvOperator"]], "qconvoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[23, "neural_compressor.adaptor.ox_utils.operators.conv.QConvOperator"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[23, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "direct8bitoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[24, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator"]], "qdirectoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[24, "neural_compressor.adaptor.ox_utils.operators.direct_q8.QDirectOperator"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[24, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "embedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[25, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.EmbedLayerNormalizationOperator"]], "qembedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[25, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.QEmbedLayerNormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[25, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "gatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[26, "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator"]], "qgatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[26, "neural_compressor.adaptor.ox_utils.operators.gather.QGatherOperator"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[26, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "globalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[27, "neural_compressor.adaptor.ox_utils.operators.gavgpool.GlobalAveragePoolOperator"]], "qglobalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[27, "neural_compressor.adaptor.ox_utils.operators.gavgpool.QGlobalAveragePoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[27, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "gemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[28, "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator"]], "qgemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[28, "neural_compressor.adaptor.ox_utils.operators.gemm.QGemmOperator"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[28, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[29, "module-neural_compressor.adaptor.ox_utils.operators"]], "lstmoperator (class in neural_compressor.adaptor.ox_utils.operators.lstm)": [[30, "neural_compressor.adaptor.ox_utils.operators.lstm.LSTMOperator"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[30, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "fusedmatmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[31, "neural_compressor.adaptor.ox_utils.operators.matmul.FusedMatMulOperator"]], "matmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[31, "neural_compressor.adaptor.ox_utils.operators.matmul.MatMulOperator"]], "qmatmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[31, "neural_compressor.adaptor.ox_utils.operators.matmul.QMatMulOperator"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[31, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "maxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[32, "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator"]], "qmaxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[32, "neural_compressor.adaptor.ox_utils.operators.maxpool.QMaxPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[32, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "batchnormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.norm)": [[33, "neural_compressor.adaptor.ox_utils.operators.norm.BatchNormalizationOperator"]], "normalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.norm)": [[33, "neural_compressor.adaptor.ox_utils.operators.norm.NormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.norm": [[33, "module-neural_compressor.adaptor.ox_utils.operators.norm"]], "operator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.Operator"]], "qoperator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.QOperator"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[34, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "op_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.op_registry"]], "qop_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.qop_registry"]], "padoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[35, "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator"]], "qpadoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[35, "neural_compressor.adaptor.ox_utils.operators.pad.QPadOperator"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[35, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "pooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[36, "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator"]], "qpooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[36, "neural_compressor.adaptor.ox_utils.operators.pooling.QPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[36, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "reduceminmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.reduce)": [[37, "neural_compressor.adaptor.ox_utils.operators.reduce.ReduceMinMaxOperator"]], "reduceoperator (class in neural_compressor.adaptor.ox_utils.operators.reduce)": [[37, "neural_compressor.adaptor.ox_utils.operators.reduce.ReduceOperator"]], "neural_compressor.adaptor.ox_utils.operators.reduce": [[37, "module-neural_compressor.adaptor.ox_utils.operators.reduce"]], "qresizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[38, "neural_compressor.adaptor.ox_utils.operators.resize.QResizeOperator"]], "resizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[38, "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[38, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "qsplitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[39, "neural_compressor.adaptor.ox_utils.operators.split.QSplitOperator"]], "splitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[39, "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator"]], "neural_compressor.adaptor.ox_utils.operators.split": [[39, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "unarydirect8bitoperator (class in neural_compressor.adaptor.ox_utils.operators.unary_op)": [[40, "neural_compressor.adaptor.ox_utils.operators.unary_op.UnaryDirect8BitOperator"]], "unaryoperator (class in neural_compressor.adaptor.ox_utils.operators.unary_op)": [[40, "neural_compressor.adaptor.ox_utils.operators.unary_op.UnaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.unary_op": [[40, "module-neural_compressor.adaptor.ox_utils.operators.unary_op"]], "quantizer (class in neural_compressor.adaptor.ox_utils.quantizer)": [[41, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer"]], "neural_compressor.adaptor.ox_utils.quantizer": [[41, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "ortsmoothquant (class in neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.ORTSmoothQuant"]], "get_quant_dequant_output() (in module neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.get_quant_dequant_output"]], "make_sub_graph() (in module neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.make_sub_graph"]], "neural_compressor.adaptor.ox_utils.smooth_quant": [[42, "module-neural_compressor.adaptor.ox_utils.smooth_quant"]], "quant_dequant_data() (in module neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.quant_dequant_data"]], "quantformat (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantFormat"]], "quanttype (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantType"]], "quantizationmode (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizationMode"]], "quantizedinitializer (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizedInitializer"]], "quantizedvalue (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizedValue"]], "quantizedvaluetype (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizedValueType"]], "valueinfo (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.ValueInfo"]], "attribute_to_kwarg() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.attribute_to_kwarg"]], "calculate_scale_zp() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.calculate_scale_zp"]], "cast_tensor() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.cast_tensor"]], "collate_preds() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.collate_preds"]], "dequantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.dequantize_data"]], "dequantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.dequantize_data_with_scale_zero"]], "dtype_to_name() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.dtype_to_name"]], "find_by_name() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.find_by_name"]], "float_to_bfloat16() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.float_to_bfloat16"]], "float_to_float16() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.float_to_float16"]], "get_node_original_name() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.get_node_original_name"]], "infer_shapes() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.infer_shapes"]], "is_b_transposed() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.is_B_transposed"]], "make_dquant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.make_dquant_node"]], "make_quant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.make_quant_node"]], "neural_compressor.adaptor.ox_utils.util": [[43, "module-neural_compressor.adaptor.ox_utils.util"]], "quantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_data"]], "quantize_data_per_channel() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_data_per_channel"]], "quantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_data_with_scale_zero"]], "quantize_nparray() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_nparray"]], "remove_init_from_model_input() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.remove_init_from_model_input"]], "simple_progress_bar() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.simple_progress_bar"]], "split_shared_bias() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.split_shared_bias"]], "to_numpy() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.to_numpy"]], "trt_env_setup() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.trt_env_setup"]], "apply_awq_clip() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.apply_awq_clip"]], "apply_awq_scale() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.apply_awq_scale"]], "awq_quantize() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.awq_quantize"]], "get_blob_size() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.get_blob_size"]], "get_weight_scale() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.get_weight_scale"]], "gptq() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.gptq"]], "gptq_quantize() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.gptq_quantize"]], "make_matmul_weight_only_node() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.make_matmul_weight_only_node"]], "neural_compressor.adaptor.ox_utils.weight_only": [[44, "module-neural_compressor.adaptor.ox_utils.weight_only"]], "pad_tensor() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.pad_tensor"]], "prepare_inputs() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.prepare_inputs"]], "qdq_tensor() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.qdq_tensor"]], "quant_tensor() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.quant_tensor"]], "rtn_quantize() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.rtn_quantize"]], "pytorchadaptor (class in neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.PyTorchAdaptor"]], "pytorchquery (class in neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.PyTorchQuery"]], "pytorchweightonlyadaptor (class in neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.PyTorchWeightOnlyAdaptor"]], "pytorch_fxadaptor (class in neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor"]], "pytorch_ipexadaptor (class in neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor"]], "templateadaptor (class in neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.TemplateAdaptor"]], "get_ops_recursively() (in module neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.get_ops_recursively"]], "neural_compressor.adaptor.pytorch": [[45, "module-neural_compressor.adaptor.pytorch"]], "querybackendcapability (class in neural_compressor.adaptor.query)": [[46, "neural_compressor.adaptor.query.QueryBackendCapability"]], "neural_compressor.adaptor.query": [[46, "module-neural_compressor.adaptor.query"]], "tensorflowadaptor (class in neural_compressor.adaptor.tensorflow)": [[47, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor"]], "tensorflowquery (class in neural_compressor.adaptor.tensorflow)": [[47, "neural_compressor.adaptor.tensorflow.TensorflowQuery"]], "tensorflow_itexadaptor (class in neural_compressor.adaptor.tensorflow)": [[47, "neural_compressor.adaptor.tensorflow.Tensorflow_ITEXAdaptor"]], "neural_compressor.adaptor.tensorflow": [[47, "module-neural_compressor.adaptor.tensorflow"]], "graphconverter (class in neural_compressor.adaptor.tf_utils.graph_converter)": [[48, "neural_compressor.adaptor.tf_utils.graph_converter.GraphConverter"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[48, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "graphconverterwithoutcalib (class in neural_compressor.adaptor.tf_utils.graph_converter_without_calib)": [[49, "neural_compressor.adaptor.tf_utils.graph_converter_without_calib.GraphConverterWithoutCalib"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[49, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "bf16convert (class in neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert)": [[50, "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.BF16Convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "dequantizecastoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer)": [[51, "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer.DequantizeCastOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer": [[51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "convertaddtobiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd)": [[53, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "convertlayoutoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout)": [[54, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "convertleakyreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu)": [[55, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "convertnantorandom (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random)": [[56, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "convertplaceholdertoconst (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const)": [[57, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "dilatedcontraction (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction)": [[58, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.DilatedContraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "injectdummybiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd)": [[59, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "expanddimsoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer)": [[60, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "fetchweightfromreshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape)": [[61, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "foldbatchnormnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm)": [[62, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "graphfoldconstantoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant)": [[63, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "fusebiasaddandaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add)": [[64, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "fusecolumnwisemuloptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul)": [[65, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "fuseconvwithmathoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "fusedecomposedbnoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.FuseDecomposedBNOptimizer"]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.bypass_reshape"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.values_from_const"]], "fusedecomposedinoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.FuseDecomposedINOptimizer"]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.bypass_reshape"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.values_from_const"]], "fusegeluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu)": [[69, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "fuselayernormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_name_from_input"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.values_from_const"]], "fusepadwithconv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv)": [[71, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "fusepadwithfp32conv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv)": [[72, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "fusetransposereshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose)": [[73, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "graphcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer)": [[74, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "grappleroptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass)": [[75, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "insertprintminmaxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node)": [[77, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "movesqueezeafterreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu)": [[78, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "preoptimization (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize)": [[79, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.PreOptimization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "removetrainingnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes)": [[80, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "renamebatchnormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm)": [[81, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "splitsharedinputoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input)": [[82, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "stripequivalentnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes)": [[83, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "stripunusednodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes)": [[84, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "switchoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer)": [[85, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "graphrewriterbase (class in neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base)": [[86, "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "freezefakequantopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "freezevaluetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value)": [[89, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "freezevaluewithoutcalibtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "fuseconvredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "fuseconvrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize)": [[92, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "fusematmulredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "fusematmulrequantizedequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer"]], "fusematmulrequantizedequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer"]], "fusematmulrequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer"]], "fusematmulrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "metainfochangingmemopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "posthostconstconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "postcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "quantizedrnnconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "scalepropagationtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"]], "onnxgraph (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph)": [[102, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"]], "onnxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"]], "onnxopschema (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.OnnxOpSchema"]], "get_max_supported_opset_version() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.get_max_supported_opset_version"]], "get_schema() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.get_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"]], "seqtype (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.SeqType"]], "add_port_to_name() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.add_port_to_name"]], "are_shapes_equal() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.are_shapes_equal"]], "assert_error() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.assert_error"]], "compute_const_folding_using_tf() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.compute_const_folding_using_tf"]], "convert_tensorflow_tensor_to_onnx() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.convert_tensorflow_tensor_to_onnx"]], "find_opset() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.find_opset"]], "get_index_from_strided_slice_of_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_index_from_strided_slice_of_shape"]], "get_subgraphs_from_onnx() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_subgraphs_from_onnx"]], "get_tensorflow_node_attr() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_node_attr"]], "get_tensorflow_node_shape_attr() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_node_shape_attr"]], "get_tensorflow_tensor_data() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_tensor_data"]], "get_tensorflow_tensor_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_tensor_shape"]], "infer_onnx_shape_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.infer_onnx_shape_dtype"]], "initialize_name_counter() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.initialize_name_counter"]], "is_list_or_tuple() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.is_list_or_tuple"]], "is_onnx_domain() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.is_onnx_domain"]], "make_onnx_inputs_outputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.make_onnx_inputs_outputs"]], "make_onnx_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.make_onnx_shape"]], "map_numpy_to_onnx_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_numpy_to_onnx_dtype"]], "map_onnx_to_numpy_type() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_onnx_to_numpy_type"]], "map_tensorflow_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_tensorflow_dtype"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"]], "read_tensorflow_node_attrs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.read_tensorflow_node_attrs"]], "save_protobuf() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.save_protobuf"]], "set_name() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.set_name"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "generategraphwithqdqpattern (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern)": [[107, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "mergeduplicatedqdqoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq)": [[108, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "shareqdqforitexypatternoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern)": [[109, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[109, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "graphanalyzer (class in neural_compressor.adaptor.tf_utils.graph_util)": [[110, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer"]], "graphrewriterhelper (class in neural_compressor.adaptor.tf_utils.graph_util)": [[110, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper"]], "neural_compressor.adaptor.tf_utils.graph_util": [[110, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "neural_compressor.adaptor.tf_utils": [[111, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[112, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "fakequantize (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[113, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantize"]], "fakequantizebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[113, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "quantizeconfig (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config)": [[115, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "init_quantize_config() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[116, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.init_quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "qat_clone_function() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[116, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "config_quantizable_layers() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer)": [[118, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer.config_quantizable_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "quantizelayeradd (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add)": [[119, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add.QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "quantizelayerbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base)": [[120, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base.QuantizeLayerBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "quantizelayerbatchnormalization (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn.QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "quantizewrapper (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper"]], "quantizewrapperbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn)": [[123, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2)": [[124, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv)": [[125, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "fusenodestartwithdeconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv)": [[126, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "fusenodestartwithfusedinstancenorm (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in)": [[127, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul)": [[128, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling)": [[129, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "optimizeqdqgraph (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq)": [[131, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "quantizegraphbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[132, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase"]], "quantizenodebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[132, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2)": [[134, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "quantizegraphforintel (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu)": [[136, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul)": [[137, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling)": [[138, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[138, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "quantizegraphhelper (class in neural_compressor.adaptor.tf_utils.quantize_graph_common)": [[139, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[139, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "smoothquantcalibration (class in neural_compressor.adaptor.tf_utils.smooth_quant_calibration)": [[140, "neural_compressor.adaptor.tf_utils.smooth_quant_calibration.SmoothQuantCalibration"]], "smoothquantcalibrationllm (class in neural_compressor.adaptor.tf_utils.smooth_quant_calibration)": [[140, "neural_compressor.adaptor.tf_utils.smooth_quant_calibration.SmoothQuantCalibrationLLM"]], "neural_compressor.adaptor.tf_utils.smooth_quant_calibration": [[140, "module-neural_compressor.adaptor.tf_utils.smooth_quant_calibration"]], "smoothquantscaler (class in neural_compressor.adaptor.tf_utils.smooth_quant_scaler)": [[141, "neural_compressor.adaptor.tf_utils.smooth_quant_scaler.SmoothQuantScaler"]], "smoothquantscalerllm (class in neural_compressor.adaptor.tf_utils.smooth_quant_scaler)": [[141, "neural_compressor.adaptor.tf_utils.smooth_quant_scaler.SmoothQuantScalerLLM"]], "neural_compressor.adaptor.tf_utils.smooth_quant_scaler": [[141, "module-neural_compressor.adaptor.tf_utils.smooth_quant_scaler"]], "tensorflowqdqtoonnxqdqconverter (class in neural_compressor.adaptor.tf_utils.tf2onnx_converter)": [[142, "neural_compressor.adaptor.tf_utils.tf2onnx_converter.TensorflowQDQToOnnxQDQConverter"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[142, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"]], "biascorrection (class in neural_compressor.adaptor.tf_utils.transform_graph.bias_correction)": [[143, "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.BiasCorrection"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[143, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "graphtransformbase (class in neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base)": [[144, "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[144, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[145, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "insertlogging (class in neural_compressor.adaptor.tf_utils.transform_graph.insert_logging)": [[146, "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.InsertLogging"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[146, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "rerangequantizedconcat (class in neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat)": [[147, "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[147, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "apply_inlining() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.apply_inlining"]], "collate_tf_preds() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.collate_tf_preds"]], "construct_function_from_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.construct_function_from_graph_def"]], "disable_random() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.disable_random"]], "fix_ref_type_of_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.fix_ref_type_of_graph_def"]], "generate_feed_dict() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.generate_feed_dict"]], "get_estimator_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_estimator_graph"]], "get_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_graph_def"]], "get_input_output_node_names() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_input_output_node_names"]], "get_model_input_shape() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_model_input_shape"]], "get_tensor_by_name() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_tensor_by_name"]], "get_tensor_val_from_graph_node() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_tensor_val_from_graph_node"]], "get_weight_from_input_tensor() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_weight_from_input_tensor"]], "int8_node_name_reverse() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.int8_node_name_reverse"]], "is_ckpt_format() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.is_ckpt_format"]], "is_saved_model_format() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.is_saved_model_format"]], "iterator_sess_run() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.iterator_sess_run"]], "neural_compressor.adaptor.tf_utils.util": [[148, "module-neural_compressor.adaptor.tf_utils.util"]], "parse_saved_model() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.parse_saved_model"]], "read_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.read_graph"]], "reconstruct_saved_model() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.reconstruct_saved_model"]], "strip_equivalent_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.strip_equivalent_nodes"]], "strip_unused_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.strip_unused_nodes"]], "tf_diagnosis_helper() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.tf_diagnosis_helper"]], "version1_eq_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.version1_lte_version2"]], "write_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.write_graph"]], "autoadamround (class in neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.AutoAdamRound"]], "autooptround (class in neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.AutoOPTRound"]], "autoround (class in neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.AutoRound"]], "saveinputs (class in neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.SaveInputs"]], "wrappermultiblock (class in neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.WrapperMultiblock"]], "block_forward() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.block_forward"]], "check_is_cpu() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.check_is_cpu"]], "collect_minmax_scale() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.collect_minmax_scale"]], "collect_round_v() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.collect_round_v"]], "get_batch_dim() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.get_batch_dim"]], "get_block_names() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.get_block_names"]], "get_dataloader() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.get_dataloader"]], "get_module() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.get_module"]], "get_scale_shape() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.get_scale_shape"]], "get_tokenizer_function() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.get_tokenizer_function"]], "move_input_to_device() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.move_input_to_device"]], "neural_compressor.adaptor.torch_utils.autoround.autoround": [[149, "module-neural_compressor.adaptor.torch_utils.autoround.autoround"]], "quant_weight() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.quant_weight"]], "quant_weight_actor() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.quant_weight_actor"]], "quant_weight_asym() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.quant_weight_asym"]], "quant_weight_sym() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.quant_weight_sym"]], "quant_weight_w_scale() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.quant_weight_w_scale"]], "round_ste() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.round_ste"]], "sampling_inputs() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.sampling_inputs"]], "set_module() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.set_module"]], "unwrapper_block() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.unwrapper_block"]], "wrapper_block() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.wrapper_block"]], "export_compressed_model() (in module neural_compressor.adaptor.torch_utils.autoround.export)": [[150, "neural_compressor.adaptor.torch_utils.autoround.export.export_compressed_model"]], "neural_compressor.adaptor.torch_utils.autoround.export": [[150, "module-neural_compressor.adaptor.torch_utils.autoround.export"]], "neural_compressor.adaptor.torch_utils.autoround": [[151, "module-neural_compressor.adaptor.torch_utils.autoround"]], "neural_compressor.adaptor.torch_utils.autoround.model_wrapper": [[152, "module-neural_compressor.adaptor.torch_utils.autoround.model_wrapper"]], "sgd (class in neural_compressor.adaptor.torch_utils.autoround.sign_sgd)": [[153, "neural_compressor.adaptor.torch_utils.autoround.sign_sgd.SGD"]], "neural_compressor.adaptor.torch_utils.autoround.sign_sgd": [[153, "module-neural_compressor.adaptor.torch_utils.autoround.sign_sgd"]], "sgd() (in module neural_compressor.adaptor.torch_utils.autoround.sign_sgd)": [[153, "neural_compressor.adaptor.torch_utils.autoround.sign_sgd.sgd"]], "actawareweightquant (class in neural_compressor.adaptor.torch_utils.awq)": [[154, "neural_compressor.adaptor.torch_utils.awq.ActAwareWeightQuant"]], "neural_compressor.adaptor.torch_utils.awq": [[154, "module-neural_compressor.adaptor.torch_utils.awq"]], "bf16modulewrapper (class in neural_compressor.adaptor.torch_utils.bf16_convert)": [[155, "neural_compressor.adaptor.torch_utils.bf16_convert.BF16ModuleWrapper"]], "convert() (in module neural_compressor.adaptor.torch_utils.bf16_convert)": [[155, "neural_compressor.adaptor.torch_utils.bf16_convert.Convert"]], "bf16_symbolic_trace() (in module neural_compressor.adaptor.torch_utils.bf16_convert)": [[155, "neural_compressor.adaptor.torch_utils.bf16_convert.bf16_symbolic_trace"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[155, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "gptq (class in neural_compressor.adaptor.torch_utils.gptq)": [[156, "neural_compressor.adaptor.torch_utils.gptq.GPTQ"]], "gptquantizer (class in neural_compressor.adaptor.torch_utils.gptq)": [[156, "neural_compressor.adaptor.torch_utils.gptq.GPTQuantizer"]], "find_layers() (in module neural_compressor.adaptor.torch_utils.gptq)": [[156, "neural_compressor.adaptor.torch_utils.gptq.find_layers"]], "find_layers_name() (in module neural_compressor.adaptor.torch_utils.gptq)": [[156, "neural_compressor.adaptor.torch_utils.gptq.find_layers_name"]], "is_leaf() (in module neural_compressor.adaptor.torch_utils.gptq)": [[156, "neural_compressor.adaptor.torch_utils.gptq.is_leaf"]], "log_quantizable_layers_per_transformer() (in module neural_compressor.adaptor.torch_utils.gptq)": [[156, "neural_compressor.adaptor.torch_utils.gptq.log_quantizable_layers_per_transformer"]], "neural_compressor.adaptor.torch_utils.gptq": [[156, "module-neural_compressor.adaptor.torch_utils.gptq"]], "quantize() (in module neural_compressor.adaptor.torch_utils.gptq)": [[156, "neural_compressor.adaptor.torch_utils.gptq.quantize"]], "trace_gptq_target_blocks() (in module neural_compressor.adaptor.torch_utils.gptq)": [[156, "neural_compressor.adaptor.torch_utils.gptq.trace_gptq_target_blocks"]], "hessiantrace (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[157, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace"]], "node_collector (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[157, "neural_compressor.adaptor.torch_utils.hawq_metric.Node_collector"]], "compare_weights() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[157, "neural_compressor.adaptor.torch_utils.hawq_metric.compare_weights"]], "hawq_top() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[157, "neural_compressor.adaptor.torch_utils.hawq_metric.hawq_top"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[157, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[158, "module-neural_compressor.adaptor.torch_utils"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant": [[159, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant"]], "pickleerror": [[160, "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle.PickleError"]], "picklingerror": [[160, "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle.PicklingError"]], "unpicklingerror": [[160, "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle.UnpicklingError"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle": [[160, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle"]], "layerwisequant (class in neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize)": [[161, "neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize.LayerWiseQuant"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize": [[161, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize"]], "load() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load)": [[162, "neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load.load"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load": [[162, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load"]], "dowload_hf_model() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[163, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.dowload_hf_model"]], "get_children() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[163, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.get_children"]], "get_module() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[163, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.get_module"]], "get_named_children() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[163, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.get_named_children"]], "get_super_module_by_name() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[163, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.get_super_module_by_name"]], "load_empty_model() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[163, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.load_empty_model"]], "load_layer_wise_quantized_model() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[163, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.load_layer_wise_quantized_model"]], "load_tensor() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[163, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.load_tensor"]], "load_tensor_from_shard() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[163, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.load_tensor_from_shard"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils": [[163, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.utils"]], "update_module() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[163, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.update_module"]], "ipex_mixed_precision() (in module neural_compressor.adaptor.torch_utils.mixed_precision)": [[164, "neural_compressor.adaptor.torch_utils.mixed_precision.ipex_mixed_precision"]], "neural_compressor.adaptor.torch_utils.mixed_precision": [[164, "module-neural_compressor.adaptor.torch_utils.mixed_precision"]], "fakeaffinetensorquantfunction (class in neural_compressor.adaptor.torch_utils.model_wrapper)": [[165, "neural_compressor.adaptor.torch_utils.model_wrapper.FakeAffineTensorQuantFunction"]], "mullinear (class in neural_compressor.adaptor.torch_utils.model_wrapper)": [[165, "neural_compressor.adaptor.torch_utils.model_wrapper.MulLinear"]], "teqlinearfakequant (class in neural_compressor.adaptor.torch_utils.model_wrapper)": [[165, "neural_compressor.adaptor.torch_utils.model_wrapper.TEQLinearFakeQuant"]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[165, "module-neural_compressor.adaptor.torch_utils.model_wrapper"]], "transformerbasedmodelblockpatterndetector (class in neural_compressor.adaptor.torch_utils.pattern_detector)": [[166, "neural_compressor.adaptor.torch_utils.pattern_detector.TransformerBasedModelBlockPatternDetector"]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[166, "module-neural_compressor.adaptor.torch_utils.pattern_detector"]], "torchsmoothquant (class in neural_compressor.adaptor.torch_utils.smooth_quant)": [[167, "neural_compressor.adaptor.torch_utils.smooth_quant.TorchSmoothQuant"]], "get_module() (in module neural_compressor.adaptor.torch_utils.smooth_quant)": [[167, "neural_compressor.adaptor.torch_utils.smooth_quant.get_module"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[167, "module-neural_compressor.adaptor.torch_utils.smooth_quant"]], "set_module() (in module neural_compressor.adaptor.torch_utils.smooth_quant)": [[167, "neural_compressor.adaptor.torch_utils.smooth_quant.set_module"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[168, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "symbolic_trace() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[168, "neural_compressor.adaptor.torch_utils.symbolic_trace.symbolic_trace"]], "trace_and_fuse_sub_graph() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[168, "neural_compressor.adaptor.torch_utils.symbolic_trace.trace_and_fuse_sub_graph"]], "tequantizer (class in neural_compressor.adaptor.torch_utils.teq)": [[169, "neural_compressor.adaptor.torch_utils.teq.TEQuantizer"]], "neural_compressor.adaptor.torch_utils.teq": [[169, "module-neural_compressor.adaptor.torch_utils.teq"]], "append_attr() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.append_attr"]], "auto_copy() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.auto_copy"]], "calculate_quant_min_max() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.calculate_quant_min_max"]], "calibration() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.calibration"]], "check_cfg_and_qconfig() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.check_cfg_and_qconfig"]], "collate_torch_preds() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.collate_torch_preds"]], "collect_weight_info() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.collect_weight_info"]], "fetch_module() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.fetch_module"]], "forward_wrapper() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.forward_wrapper"]], "generate_activation_observer() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.generate_activation_observer"]], "get_absorb_layers() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_absorb_layers"]], "get_block_prefix() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_block_prefix"]], "get_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_depth"]], "get_dict_at_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_dict_at_depth"]], "get_element_under_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_element_under_depth"]], "get_embedding_contiguous() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_embedding_contiguous"]], "get_example_input() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_example_input"]], "get_fallback_order() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_fallback_order"]], "get_hidden_states() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_hidden_states"]], "get_module_input_output() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_module_input_output"]], "get_mse_order_per_fp32() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_fp32"]], "get_mse_order_per_int8() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_int8"]], "get_op_type_by_name() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_op_type_by_name"]], "get_quantizable_ops_from_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_quantizable_ops_from_cfgs"]], "get_torch_version() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_torch_version"]], "input2tuple() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.input2tuple"]], "is_fused_module() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.is_fused_module"]], "match_datatype_pattern() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.match_datatype_pattern"]], "move_input_device() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.move_input_device"]], "neural_compressor.adaptor.torch_utils.util": [[170, "module-neural_compressor.adaptor.torch_utils.util"]], "paser_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.paser_cfgs"]], "set_module() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.set_module"]], "simple_inference() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.simple_inference"]], "update_sq_scale() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.update_sq_scale"]], "awq_quantize() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[171, "neural_compressor.adaptor.torch_utils.weight_only.awq_quantize"]], "gptq_quantize() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[171, "neural_compressor.adaptor.torch_utils.weight_only.gptq_quantize"]], "neural_compressor.adaptor.torch_utils.weight_only": [[171, "module-neural_compressor.adaptor.torch_utils.weight_only"]], "qdq_weight_actor() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[171, "neural_compressor.adaptor.torch_utils.weight_only.qdq_weight_actor"]], "qdq_weight_asym() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[171, "neural_compressor.adaptor.torch_utils.weight_only.qdq_weight_asym"]], "qdq_weight_sym() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[171, "neural_compressor.adaptor.torch_utils.weight_only.qdq_weight_sym"]], "quant_weight() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[171, "neural_compressor.adaptor.torch_utils.weight_only.quant_weight"]], "quant_weight_w_scale() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[171, "neural_compressor.adaptor.torch_utils.weight_only.quant_weight_w_scale"]], "quantize_4bit() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[171, "neural_compressor.adaptor.torch_utils.weight_only.quantize_4bit"]], "rtn_quantize() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[171, "neural_compressor.adaptor.torch_utils.weight_only.rtn_quantize"]], "search_clip() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[171, "neural_compressor.adaptor.torch_utils.weight_only.search_clip"]], "teq_quantize() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[171, "neural_compressor.adaptor.torch_utils.weight_only.teq_quantize"]], "algorithms (class in neural_compressor.algorithm.algorithm)": [[172, "neural_compressor.algorithm.algorithm.ALGORITHMS"]], "algorithm (class in neural_compressor.algorithm.algorithm)": [[172, "neural_compressor.algorithm.algorithm.Algorithm"]], "algorithmscheduler (class in neural_compressor.algorithm.algorithm)": [[172, "neural_compressor.algorithm.algorithm.AlgorithmScheduler"]], "algorithm_registry() (in module neural_compressor.algorithm.algorithm)": [[172, "neural_compressor.algorithm.algorithm.algorithm_registry"]], "neural_compressor.algorithm.algorithm": [[172, "module-neural_compressor.algorithm.algorithm"]], "fastbiascorrection (class in neural_compressor.algorithm.fast_bias_correction)": [[173, "neural_compressor.algorithm.fast_bias_correction.FastBiasCorrection"]], "neural_compressor.algorithm.fast_bias_correction": [[173, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[174, "module-neural_compressor.algorithm"]], "smoothquant (class in neural_compressor.algorithm.smooth_quant)": [[175, "neural_compressor.algorithm.smooth_quant.SmoothQuant"]], "neural_compressor.algorithm.smooth_quant": [[175, "module-neural_compressor.algorithm.smooth_quant"]], "weightcorrection (class in neural_compressor.algorithm.weight_correction)": [[176, "neural_compressor.algorithm.weight_correction.WeightCorrection"]], "neural_compressor.algorithm.weight_correction": [[176, "module-neural_compressor.algorithm.weight_correction"]], "benchmark_with_raw_cmd() (in module neural_compressor.benchmark)": [[177, "neural_compressor.benchmark.benchmark_with_raw_cmd"]], "call_one() (in module neural_compressor.benchmark)": [[177, "neural_compressor.benchmark.call_one"]], "config_instance() (in module neural_compressor.benchmark)": [[177, "neural_compressor.benchmark.config_instance"]], "fit() (in module neural_compressor.benchmark)": [[177, "neural_compressor.benchmark.fit"]], "generate_prefix() (in module neural_compressor.benchmark)": [[177, "neural_compressor.benchmark.generate_prefix"]], "get_architecture() (in module neural_compressor.benchmark)": [[177, "neural_compressor.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.benchmark)": [[177, "neural_compressor.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.benchmark)": [[177, "neural_compressor.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.benchmark)": [[177, "neural_compressor.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.benchmark)": [[177, "neural_compressor.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.benchmark)": [[177, "neural_compressor.benchmark.get_threads_per_core"]], "neural_compressor.benchmark": [[177, "module-neural_compressor.benchmark"]], "profile() (in module neural_compressor.benchmark)": [[177, "neural_compressor.benchmark.profile"]], "run_instance() (in module neural_compressor.benchmark)": [[177, "neural_compressor.benchmark.run_instance"]], "set_all_env_var() (in module neural_compressor.benchmark)": [[177, "neural_compressor.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.benchmark)": [[177, "neural_compressor.benchmark.set_env_var"]], "summary_benchmark() (in module neural_compressor.benchmark)": [[177, "neural_compressor.benchmark.summary_benchmark"]], "baseconfig (class in neural_compressor.common.base_config)": [[178, "neural_compressor.common.base_config.BaseConfig"]], "composableconfig (class in neural_compressor.common.base_config)": [[178, "neural_compressor.common.base_config.ComposableConfig"]], "neural_compressor.common.base_config": [[178, "module-neural_compressor.common.base_config"]], "register_config() (in module neural_compressor.common.base_config)": [[178, "neural_compressor.common.base_config.register_config"]], "evaluator (class in neural_compressor.common.base_tuning)": [[179, "neural_compressor.common.base_tuning.Evaluator"]], "tuningconfig (class in neural_compressor.common.base_tuning)": [[179, "neural_compressor.common.base_tuning.TuningConfig"]], "tuninglogger (class in neural_compressor.common.base_tuning)": [[179, "neural_compressor.common.base_tuning.TuningLogger"]], "neural_compressor.common.base_tuning": [[179, "module-neural_compressor.common.base_tuning"]], "neural_compressor.common": [[180, "module-neural_compressor.common"]], "logger (class in neural_compressor.common.logger)": [[181, "neural_compressor.common.logger.Logger"]], "debug() (in module neural_compressor.common.logger)": [[181, "neural_compressor.common.logger.debug"]], "error() (in module neural_compressor.common.logger)": [[181, "neural_compressor.common.logger.error"]], "fatal() (in module neural_compressor.common.logger)": [[181, "neural_compressor.common.logger.fatal"]], "info() (in module neural_compressor.common.logger)": [[181, "neural_compressor.common.logger.info"]], "log() (in module neural_compressor.common.logger)": [[181, "neural_compressor.common.logger.log"]], "neural_compressor.common.logger": [[181, "module-neural_compressor.common.logger"]], "warn() (in module neural_compressor.common.logger)": [[181, "neural_compressor.common.logger.warn"]], "warning() (in module neural_compressor.common.logger)": [[181, "neural_compressor.common.logger.warning"]], "neural_compressor.common.utility": [[182, "module-neural_compressor.common.utility"]], "basecallbacks (class in neural_compressor.compression.callbacks)": [[183, "neural_compressor.compression.callbacks.BaseCallbacks"]], "distillationcallbacks (class in neural_compressor.compression.callbacks)": [[183, "neural_compressor.compression.callbacks.DistillationCallbacks"]], "pruningcallbacks (class in neural_compressor.compression.callbacks)": [[183, "neural_compressor.compression.callbacks.PruningCallbacks"]], "quantizationawaretrainingcallbacks (class in neural_compressor.compression.callbacks)": [[183, "neural_compressor.compression.callbacks.QuantizationAwareTrainingCallbacks"]], "_epoch_ran (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[183, "neural_compressor.compression.callbacks.DistillationCallbacks._epoch_ran"]], "best_model (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[183, "neural_compressor.compression.callbacks.DistillationCallbacks.best_model"]], "best_score (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[183, "neural_compressor.compression.callbacks.DistillationCallbacks.best_score"]], "eval_frequency (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[183, "neural_compressor.compression.callbacks.DistillationCallbacks.eval_frequency"]], "neural_compressor.compression.callbacks": [[183, "module-neural_compressor.compression.callbacks"]], "criterions (class in neural_compressor.compression.distillation.criterions)": [[184, "neural_compressor.compression.distillation.criterions.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[184, "neural_compressor.compression.distillation.criterions.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.compression.distillation.criterions)": [[184, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[184, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationLoss"]], "pytorchcriterions (class in neural_compressor.compression.distillation.criterions)": [[184, "neural_compressor.compression.distillation.criterions.PyTorchCriterions"]], "pytorchcrossentropyloss (class in neural_compressor.compression.distillation.criterions)": [[184, "neural_compressor.compression.distillation.criterions.PyTorchCrossEntropyLoss"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[184, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[184, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[184, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[184, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLossWrapper"]], "pytorchselfknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[184, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLoss"]], "pytorchselfknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[184, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[184, "neural_compressor.compression.distillation.criterions.SelfKnowledgeDistillationLoss"]], "tensorflowcrossentropyloss (class in neural_compressor.compression.distillation.criterions)": [[184, "neural_compressor.compression.distillation.criterions.TensorFlowCrossEntropyLoss"]], "tensorflowsparsecategoricalcrossentropy (class in neural_compressor.compression.distillation.criterions)": [[184, "neural_compressor.compression.distillation.criterions.TensorFlowSparseCategoricalCrossentropy"]], "tensorflowcriterions (class in neural_compressor.compression.distillation.criterions)": [[184, "neural_compressor.compression.distillation.criterions.TensorflowCriterions"]], "tensorflowknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[184, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLoss"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.compression.distillation.criterions)": [[184, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossExternal"]], "tensorflowknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[184, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossWrapper"]], "criterion_registry() (in module neural_compressor.compression.distillation.criterions)": [[184, "neural_compressor.compression.distillation.criterions.criterion_registry"]], "neural_compressor.compression.distillation.criterions": [[184, "module-neural_compressor.compression.distillation.criterions"]], "neural_compressor.compression.distillation": [[185, "module-neural_compressor.compression.distillation"]], "optimizers (class in neural_compressor.compression.distillation.optimizers)": [[186, "neural_compressor.compression.distillation.optimizers.Optimizers"]], "pytorchoptimizers (class in neural_compressor.compression.distillation.optimizers)": [[186, "neural_compressor.compression.distillation.optimizers.PyTorchOptimizers"]], "pytorchsgd (class in neural_compressor.compression.distillation.optimizers)": [[186, "neural_compressor.compression.distillation.optimizers.PyTorchSGD"]], "tensorflowadam (class in neural_compressor.compression.distillation.optimizers)": [[186, "neural_compressor.compression.distillation.optimizers.TensorFlowAdam"]], "tensorflowadamw (class in neural_compressor.compression.distillation.optimizers)": [[186, "neural_compressor.compression.distillation.optimizers.TensorFlowAdamW"]], "tensorflowsgd (class in neural_compressor.compression.distillation.optimizers)": [[186, "neural_compressor.compression.distillation.optimizers.TensorFlowSGD"]], "tensorflowoptimizers (class in neural_compressor.compression.distillation.optimizers)": [[186, "neural_compressor.compression.distillation.optimizers.TensorflowOptimizers"]], "neural_compressor.compression.distillation.optimizers": [[186, "module-neural_compressor.compression.distillation.optimizers"]], "optimizer_registry() (in module neural_compressor.compression.distillation.optimizers)": [[186, "neural_compressor.compression.distillation.optimizers.optimizer_registry"]], "get_activation() (in module neural_compressor.compression.distillation.utility)": [[187, "neural_compressor.compression.distillation.utility.get_activation"]], "neural_compressor.compression.distillation.utility": [[187, "module-neural_compressor.compression.distillation.utility"]], "record_output() (in module neural_compressor.compression.distillation.utility)": [[187, "neural_compressor.compression.distillation.utility.record_output"]], "neural_compressor.compression.hpo": [[188, "module-neural_compressor.compression.hpo"]], "neural_compressor.compression.hpo.sa_optimizer": [[189, "module-neural_compressor.compression.hpo.sa_optimizer"]], "bayesianoptimizationsearcher (class in neural_compressor.compression.hpo.search_algorithms)": [[190, "neural_compressor.compression.hpo.search_algorithms.BayesianOptimizationSearcher"]], "gridsearcher (class in neural_compressor.compression.hpo.search_algorithms)": [[190, "neural_compressor.compression.hpo.search_algorithms.GridSearcher"]], "randomsearcher (class in neural_compressor.compression.hpo.search_algorithms)": [[190, "neural_compressor.compression.hpo.search_algorithms.RandomSearcher"]], "searcher (class in neural_compressor.compression.hpo.search_algorithms)": [[190, "neural_compressor.compression.hpo.search_algorithms.Searcher"]], "xgbsearcher (class in neural_compressor.compression.hpo.search_algorithms)": [[190, "neural_compressor.compression.hpo.search_algorithms.XgbSearcher"]], "neural_compressor.compression.hpo.search_algorithms": [[190, "module-neural_compressor.compression.hpo.search_algorithms"]], "register_searcher() (in module neural_compressor.compression.hpo.search_algorithms)": [[190, "neural_compressor.compression.hpo.search_algorithms.register_searcher"]], "basesearchspace (class in neural_compressor.compression.hpo.search_space)": [[191, "neural_compressor.compression.hpo.search_space.BaseSearchSpace"]], "continuoussearchspace (class in neural_compressor.compression.hpo.search_space)": [[191, "neural_compressor.compression.hpo.search_space.ContinuousSearchSpace"]], "discretesearchspace (class in neural_compressor.compression.hpo.search_space)": [[191, "neural_compressor.compression.hpo.search_space.DiscreteSearchSpace"]], "searchspace (class in neural_compressor.compression.hpo.search_space)": [[191, "neural_compressor.compression.hpo.search_space.SearchSpace"]], "neural_compressor.compression.hpo.search_space": [[191, "module-neural_compressor.compression.hpo.search_space"]], "register_searchspace() (in module neural_compressor.compression.hpo.search_space)": [[191, "neural_compressor.compression.hpo.search_space.register_searchspace"]], "neural_compressor.compression": [[192, "module-neural_compressor.compression"]], "blockmaskcriterion (class in neural_compressor.compression.pruner.criteria)": [[193, "neural_compressor.compression.pruner.criteria.BlockMaskCriterion"]], "gradientcriterion (class in neural_compressor.compression.pruner.criteria)": [[193, "neural_compressor.compression.pruner.criteria.GradientCriterion"]], "magnitudecriterion (class in neural_compressor.compression.pruner.criteria)": [[193, "neural_compressor.compression.pruner.criteria.MagnitudeCriterion"]], "pruningcriterion (class in neural_compressor.compression.pruner.criteria)": [[193, "neural_compressor.compression.pruner.criteria.PruningCriterion"]], "retrainfreecriterion (class in neural_compressor.compression.pruner.criteria)": [[193, "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion"]], "snipcriterion (class in neural_compressor.compression.pruner.criteria)": [[193, "neural_compressor.compression.pruner.criteria.SnipCriterion"]], "snipmomentumcriterion (class in neural_compressor.compression.pruner.criteria)": [[193, "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion"]], "get_criterion() (in module neural_compressor.compression.pruner.criteria)": [[193, "neural_compressor.compression.pruner.criteria.get_criterion"]], "neural_compressor.compression.pruner.criteria": [[193, "module-neural_compressor.compression.pruner.criteria"]], "register_criterion() (in module neural_compressor.compression.pruner.criteria)": [[193, "neural_compressor.compression.pruner.criteria.register_criterion"]], "scores (neural_compressor.compression.pruner.criteria.blockmaskcriterion attribute)": [[193, "neural_compressor.compression.pruner.criteria.BlockMaskCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.gradientcriterion attribute)": [[193, "neural_compressor.compression.pruner.criteria.GradientCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.magnitudecriterion attribute)": [[193, "neural_compressor.compression.pruner.criteria.MagnitudeCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.pruningcriterion attribute)": [[193, "neural_compressor.compression.pruner.criteria.PruningCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.retrainfreecriterion attribute)": [[193, "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.snipcriterion attribute)": [[193, "neural_compressor.compression.pruner.criteria.SnipCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.snipmomentumcriterion attribute)": [[193, "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion.scores"]], "dsnot() (in module neural_compressor.compression.pruner.dsnot)": [[194, "neural_compressor.compression.pruner.dsnot.DSnoT"]], "neural_compressor.compression.pruner.dsnot": [[194, "module-neural_compressor.compression.pruner.dsnot"]], "return_reorder_indice() (in module neural_compressor.compression.pruner.dsnot)": [[194, "neural_compressor.compression.pruner.dsnot.return_reorder_indice"]], "neural_compressor.compression.pruner": [[195, "module-neural_compressor.compression.pruner"]], "prepare_pruning() (in module neural_compressor.compression.pruner)": [[195, "neural_compressor.compression.pruner.prepare_pruning"]], "save() (in module neural_compressor.compression.pruner)": [[195, "neural_compressor.compression.pruner.save"]], "generate_ffn2_pruning_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[196, "neural_compressor.compression.pruner.model_slim.auto_slim.generate_ffn2_pruning_config"]], "generate_mha_pruning_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[196, "neural_compressor.compression.pruner.model_slim.auto_slim.generate_mha_pruning_config"]], "model_slim() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[196, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim"]], "model_slim_ffn2() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[196, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim_ffn2"]], "model_slim_mha() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[196, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim_mha"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[196, "module-neural_compressor.compression.pruner.model_slim.auto_slim"]], "parse_auto_slim_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[196, "neural_compressor.compression.pruner.model_slim.auto_slim.parse_auto_slim_config"]], "neural_compressor.compression.pruner.model_slim": [[197, "module-neural_compressor.compression.pruner.model_slim"]], "classifierheadsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[198, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher"]], "classifierheadsearchertf (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[198, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF"]], "jitbasicsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[198, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher"]], "linear2linearsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[198, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher"]], "recipesearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[198, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher"]], "selfmhasearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[198, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher"]], "current_pattern (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[198, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.current_pattern"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[198, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[198, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[198, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[198, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[198, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.device"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[198, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[198, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[198, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[198, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[198, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.flatten_static_graph"]], "get_attributes() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[198, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.get_attributes"]], "get_common_module() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[198, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.get_common_module"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[198, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[198, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[198, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[198, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[198, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[198, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.model"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[198, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"]], "print_iterables() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[198, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.print_iterables"]], "recipe (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[198, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.recipe"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[198, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.searching_results"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[198, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.searching_results"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[198, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.searching_results"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[198, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[198, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[198, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[198, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[198, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.static_graph"]], "target_layers (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[198, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.target_layers"]], "target_layers (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[198, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.target_layers"]], "target_op_lut (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[198, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.target_op_lut"]], "targets (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[198, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.targets"]], "linearcompression (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[199, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression"]], "linearcompressioniterator (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[199, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator"]], "postcompressionutils (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[199, "neural_compressor.compression.pruner.model_slim.weight_slim.PostCompressionUtils"]], "device (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[199, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.device"]], "layer_1 (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[199, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.layer_1"]], "layer_2 (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[199, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.layer_2"]], "linear_patterns (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompressioniterator attribute)": [[199, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator.linear_patterns"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[199, "module-neural_compressor.compression.pruner.model_slim.weight_slim"]], "basepattern (class in neural_compressor.compression.pruner.patterns.base)": [[200, "neural_compressor.compression.pruner.patterns.base.BasePattern"]], "kerasbasepattern (class in neural_compressor.compression.pruner.patterns.base)": [[200, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern"]], "pytorchbasepattern (class in neural_compressor.compression.pruner.patterns.base)": [[200, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern"]], "config (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[200, "neural_compressor.compression.pruner.patterns.base.BasePattern.config"]], "config (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[200, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.config"]], "config (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[200, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.config"]], "invalid_layers (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[200, "neural_compressor.compression.pruner.patterns.base.BasePattern.invalid_layers"]], "invalid_layers (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[200, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.invalid_layers"]], "invalid_layers (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[200, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.invalid_layers"]], "is_global (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[200, "neural_compressor.compression.pruner.patterns.base.BasePattern.is_global"]], "is_global (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[200, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.is_global"]], "is_global (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[200, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.is_global"]], "keep_mask_layers (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[200, "neural_compressor.compression.pruner.patterns.base.BasePattern.keep_mask_layers"]], "keep_mask_layers (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[200, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.keep_mask_layers"]], "keep_mask_layers (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[200, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.keep_mask_layers"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[200, "neural_compressor.compression.pruner.patterns.base.BasePattern.max_sparsity_ratio_per_op"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[200, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.max_sparsity_ratio_per_op"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[200, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.max_sparsity_ratio_per_op"]], "min_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[200, "neural_compressor.compression.pruner.patterns.base.BasePattern.min_sparsity_ratio_per_op"]], "min_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[200, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.min_sparsity_ratio_per_op"]], "min_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[200, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.min_sparsity_ratio_per_op"]], "modules (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[200, "neural_compressor.compression.pruner.patterns.base.BasePattern.modules"]], "modules (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[200, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.modules"]], "modules (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[200, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.modules"]], "neural_compressor.compression.pruner.patterns.base": [[200, "module-neural_compressor.compression.pruner.patterns.base"]], "pattern (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[200, "neural_compressor.compression.pruner.patterns.base.BasePattern.pattern"]], "pattern (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[200, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.pattern"]], "pattern (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[200, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.pattern"]], "register_pattern() (in module neural_compressor.compression.pruner.patterns.base)": [[200, "neural_compressor.compression.pruner.patterns.base.register_pattern"]], "target_sparsity (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[200, "neural_compressor.compression.pruner.patterns.base.BasePattern.target_sparsity"]], "target_sparsity (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[200, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.target_sparsity"]], "target_sparsity (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[200, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.target_sparsity"]], "get_pattern() (in module neural_compressor.compression.pruner.patterns)": [[201, "neural_compressor.compression.pruner.patterns.get_pattern"]], "neural_compressor.compression.pruner.patterns": [[201, "module-neural_compressor.compression.pruner.patterns"]], "m (neural_compressor.compression.pruner.patterns.mha.patternmha attribute)": [[202, "neural_compressor.compression.pruner.patterns.mha.PatternMHA.M"]], "n (neural_compressor.compression.pruner.patterns.mha.patternmha attribute)": [[202, "neural_compressor.compression.pruner.patterns.mha.PatternMHA.N"]], "patternmha (class in neural_compressor.compression.pruner.patterns.mha)": [[202, "neural_compressor.compression.pruner.patterns.mha.PatternMHA"]], "neural_compressor.compression.pruner.patterns.mha": [[202, "module-neural_compressor.compression.pruner.patterns.mha"]], "m (neural_compressor.compression.pruner.patterns.ninm.pytorchpatternninm attribute)": [[203, "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM.M"]], "n (neural_compressor.compression.pruner.patterns.ninm.pytorchpatternninm attribute)": [[203, "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM.N"]], "pytorchpatternninm (class in neural_compressor.compression.pruner.patterns.ninm)": [[203, "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM"]], "neural_compressor.compression.pruner.patterns.ninm": [[203, "module-neural_compressor.compression.pruner.patterns.ninm"]], "keraspatternnxm (class in neural_compressor.compression.pruner.patterns.nxm)": [[204, "neural_compressor.compression.pruner.patterns.nxm.KerasPatternNxM"]], "pytorchpatternnxm (class in neural_compressor.compression.pruner.patterns.nxm)": [[204, "neural_compressor.compression.pruner.patterns.nxm.PytorchPatternNxM"]], "block_size (neural_compressor.compression.pruner.patterns.nxm.keraspatternnxm attribute)": [[204, "neural_compressor.compression.pruner.patterns.nxm.KerasPatternNxM.block_size"]], "block_size (neural_compressor.compression.pruner.patterns.nxm.pytorchpatternnxm attribute)": [[204, "neural_compressor.compression.pruner.patterns.nxm.PytorchPatternNxM.block_size"]], "neural_compressor.compression.pruner.patterns.nxm": [[204, "module-neural_compressor.compression.pruner.patterns.nxm"]], "basepruner (class in neural_compressor.compression.pruner.pruners.base)": [[205, "neural_compressor.compression.pruner.pruners.base.BasePruner"]], "kerasbasepruner (class in neural_compressor.compression.pruner.pruners.base)": [[205, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner"]], "pytorchbasepruner (class in neural_compressor.compression.pruner.pruners.base)": [[205, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner"]], "config (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[205, "neural_compressor.compression.pruner.pruners.base.BasePruner.config"]], "config (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[205, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.config"]], "config (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[205, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.config"]], "current_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[205, "neural_compressor.compression.pruner.pruners.base.BasePruner.current_sparsity_ratio"]], "current_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[205, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.current_sparsity_ratio"]], "current_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[205, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.current_sparsity_ratio"]], "end_step (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[205, "neural_compressor.compression.pruner.pruners.base.BasePruner.end_step"]], "end_step (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[205, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.end_step"]], "end_step (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[205, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.end_step"]], "global_step (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[205, "neural_compressor.compression.pruner.pruners.base.BasePruner.global_step"]], "global_step (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[205, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.global_step"]], "global_step (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[205, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.global_step"]], "masks (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[205, "neural_compressor.compression.pruner.pruners.base.BasePruner.masks"]], "masks (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[205, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.masks"]], "masks (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[205, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.masks"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[205, "neural_compressor.compression.pruner.pruners.base.BasePruner.max_sparsity_ratio_per_op"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[205, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.max_sparsity_ratio_per_op"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[205, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.max_sparsity_ratio_per_op"]], "modules (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[205, "neural_compressor.compression.pruner.pruners.base.BasePruner.modules"]], "modules (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[205, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.modules"]], "modules (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[205, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.modules"]], "neural_compressor.compression.pruner.pruners.base": [[205, "module-neural_compressor.compression.pruner.pruners.base"]], "pattern (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[205, "neural_compressor.compression.pruner.pruners.base.BasePruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[205, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[205, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.pattern"]], "pruning_frequency (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[205, "neural_compressor.compression.pruner.pruners.base.BasePruner.pruning_frequency"]], "pruning_frequency (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[205, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.pruning_frequency"]], "pruning_frequency (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[205, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.pruning_frequency"]], "register_pruner() (in module neural_compressor.compression.pruner.pruners.base)": [[205, "neural_compressor.compression.pruner.pruners.base.register_pruner"]], "scheduler (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[205, "neural_compressor.compression.pruner.pruners.base.BasePruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[205, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[205, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.scheduler"]], "scores (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[205, "neural_compressor.compression.pruner.pruners.base.BasePruner.scores"]], "scores (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[205, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.scores"]], "scores (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[205, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.scores"]], "start_step (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[205, "neural_compressor.compression.pruner.pruners.base.BasePruner.start_step"]], "start_step (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[205, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.start_step"]], "start_step (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[205, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.start_step"]], "target_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[205, "neural_compressor.compression.pruner.pruners.base.BasePruner.target_sparsity_ratio"]], "target_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[205, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.target_sparsity_ratio"]], "target_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[205, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.target_sparsity_ratio"]], "kerasbasicpruner (class in neural_compressor.compression.pruner.pruners.basic)": [[206, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner"]], "pytorchbasicpruner (class in neural_compressor.compression.pruner.pruners.basic)": [[206, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner"]], "criterion (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[206, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.criterion"]], "criterion (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[206, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.criterion"]], "neural_compressor.compression.pruner.pruners.basic": [[206, "module-neural_compressor.compression.pruner.pruners.basic"]], "pattern (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[206, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[206, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.pattern"]], "reg (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[206, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.reg"]], "reg (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[206, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.reg"]], "scheduler (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[206, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[206, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.scheduler"]], "pytorchblockmaskpruner (class in neural_compressor.compression.pruner.pruners.block_mask)": [[207, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner"]], "criterion (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[207, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.criterion"]], "neural_compressor.compression.pruner.pruners.block_mask": [[207, "module-neural_compressor.compression.pruner.pruners.block_mask"]], "pattern (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[207, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.pattern"]], "reg (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[207, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.reg"]], "scheduler (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[207, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.scheduler"]], "get_pruner() (in module neural_compressor.compression.pruner.pruners)": [[208, "neural_compressor.compression.pruner.pruners.get_pruner"]], "neural_compressor.compression.pruner.pruners": [[208, "module-neural_compressor.compression.pruner.pruners"]], "parse_valid_pruner_types() (in module neural_compressor.compression.pruner.pruners)": [[208, "neural_compressor.compression.pruner.pruners.parse_valid_pruner_types"]], "pythonmultiheadattentionpruner (class in neural_compressor.compression.pruner.pruners.mha)": [[209, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner"]], "head_masks (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[209, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.head_masks"]], "linear_layers (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[209, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.linear_layers"]], "mha_compressions (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[209, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.mha_compressions"]], "mha_scores (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[209, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.mha_scores"]], "neural_compressor.compression.pruner.pruners.mha": [[209, "module-neural_compressor.compression.pruner.pruners.mha"]], "pytorchpatternlockpruner (class in neural_compressor.compression.pruner.pruners.pattern_lock)": [[210, "neural_compressor.compression.pruner.pruners.pattern_lock.PytorchPatternLockPruner"]], "neural_compressor.compression.pruner.pruners.pattern_lock": [[210, "module-neural_compressor.compression.pruner.pruners.pattern_lock"]], "pytorchprogressivepruner (class in neural_compressor.compression.pruner.pruners.progressive)": [[211, "neural_compressor.compression.pruner.pruners.progressive.PytorchProgressivePruner"]], "neural_compressor.compression.pruner.pruners.progressive": [[211, "module-neural_compressor.compression.pruner.pruners.progressive"]], "pytorchretrainfreepruner (class in neural_compressor.compression.pruner.pruners.retrain_free)": [[212, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner"]], "criterion (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[212, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.criterion"]], "neural_compressor.compression.pruner.pruners.retrain_free": [[212, "module-neural_compressor.compression.pruner.pruners.retrain_free"]], "pattern (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[212, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.pattern"]], "reg (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[212, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.reg"]], "scheduler (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[212, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.scheduler"]], "sparsegptpruner (class in neural_compressor.compression.pruner.pruners.sparse_gpt)": [[213, "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner"]], "criterion (neural_compressor.compression.pruner.pruners.sparse_gpt.sparsegptpruner attribute)": [[213, "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner.criterion"]], "neural_compressor.compression.pruner.pruners.sparse_gpt": [[213, "module-neural_compressor.compression.pruner.pruners.sparse_gpt"]], "pattern (neural_compressor.compression.pruner.pruners.sparse_gpt.sparsegptpruner attribute)": [[213, "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner.pattern"]], "reg (neural_compressor.compression.pruner.pruners.sparse_gpt.sparsegptpruner attribute)": [[213, "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner.reg"]], "scheduler (neural_compressor.compression.pruner.pruners.sparse_gpt.sparsegptpruner attribute)": [[213, "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner.scheduler"]], "basepruning (class in neural_compressor.compression.pruner.pruning)": [[214, "neural_compressor.compression.pruner.pruning.BasePruning"]], "basicpruning (class in neural_compressor.compression.pruner.pruning)": [[214, "neural_compressor.compression.pruner.pruning.BasicPruning"]], "retrainfreepruning (class in neural_compressor.compression.pruner.pruning)": [[214, "neural_compressor.compression.pruner.pruning.RetrainFreePruning"]], "sparsegptpruning (class in neural_compressor.compression.pruner.pruning)": [[214, "neural_compressor.compression.pruner.pruning.SparseGPTPruning"]], "config_file_path (neural_compressor.compression.pruner.pruning.basepruning attribute)": [[214, "neural_compressor.compression.pruner.pruning.BasePruning.config_file_path"]], "config_file_path (neural_compressor.compression.pruner.pruning.basicpruning attribute)": [[214, "neural_compressor.compression.pruner.pruning.BasicPruning.config_file_path"]], "config_file_path (neural_compressor.compression.pruner.pruning.retrainfreepruning attribute)": [[214, "neural_compressor.compression.pruner.pruning.RetrainFreePruning.config_file_path"]], "model (neural_compressor.compression.pruner.pruning.basepruning attribute)": [[214, "neural_compressor.compression.pruner.pruning.BasePruning.model"]], "model (neural_compressor.compression.pruner.pruning.basicpruning attribute)": [[214, "neural_compressor.compression.pruner.pruning.BasicPruning.model"]], "model (neural_compressor.compression.pruner.pruning.retrainfreepruning attribute)": [[214, "neural_compressor.compression.pruner.pruning.RetrainFreePruning.model"]], "neural_compressor.compression.pruner.pruning": [[214, "module-neural_compressor.compression.pruner.pruning"]], "pruner_info (neural_compressor.compression.pruner.pruning.basepruning attribute)": [[214, "neural_compressor.compression.pruner.pruning.BasePruning.pruner_info"]], "pruner_info (neural_compressor.compression.pruner.pruning.basicpruning attribute)": [[214, "neural_compressor.compression.pruner.pruning.BasicPruning.pruner_info"]], "pruner_info (neural_compressor.compression.pruner.pruning.retrainfreepruning attribute)": [[214, "neural_compressor.compression.pruner.pruning.RetrainFreePruning.pruner_info"]], "pruners (neural_compressor.compression.pruner.pruning.basepruning attribute)": [[214, "neural_compressor.compression.pruner.pruning.BasePruning.pruners"]], "pruners (neural_compressor.compression.pruner.pruning.basicpruning attribute)": [[214, "neural_compressor.compression.pruner.pruning.BasicPruning.pruners"]], "pruners (neural_compressor.compression.pruner.pruning.retrainfreepruning attribute)": [[214, "neural_compressor.compression.pruner.pruning.RetrainFreePruning.pruners"]], "register_pruning() (in module neural_compressor.compression.pruner.pruning)": [[214, "neural_compressor.compression.pruner.pruning.register_pruning"]], "basereg (class in neural_compressor.compression.pruner.regs)": [[215, "neural_compressor.compression.pruner.regs.BaseReg"]], "grouplasso (class in neural_compressor.compression.pruner.regs)": [[215, "neural_compressor.compression.pruner.regs.GroupLasso"]], "alpha (neural_compressor.compression.pruner.regs.grouplasso attribute)": [[215, "neural_compressor.compression.pruner.regs.GroupLasso.alpha"]], "get_reg() (in module neural_compressor.compression.pruner.regs)": [[215, "neural_compressor.compression.pruner.regs.get_reg"]], "get_reg_type() (in module neural_compressor.compression.pruner.regs)": [[215, "neural_compressor.compression.pruner.regs.get_reg_type"]], "neural_compressor.compression.pruner.regs": [[215, "module-neural_compressor.compression.pruner.regs"]], "reg_terms (neural_compressor.compression.pruner.regs.grouplasso attribute)": [[215, "neural_compressor.compression.pruner.regs.GroupLasso.reg_terms"]], "register_reg() (in module neural_compressor.compression.pruner.regs)": [[215, "neural_compressor.compression.pruner.regs.register_reg"]], "iterativescheduler (class in neural_compressor.compression.pruner.schedulers)": [[216, "neural_compressor.compression.pruner.schedulers.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.compression.pruner.schedulers)": [[216, "neural_compressor.compression.pruner.schedulers.OneshotScheduler"]], "pruningscheduler (class in neural_compressor.compression.pruner.schedulers)": [[216, "neural_compressor.compression.pruner.schedulers.PruningScheduler"]], "config (neural_compressor.compression.pruner.schedulers.pruningscheduler attribute)": [[216, "neural_compressor.compression.pruner.schedulers.PruningScheduler.config"]], "get_scheduler() (in module neural_compressor.compression.pruner.schedulers)": [[216, "neural_compressor.compression.pruner.schedulers.get_scheduler"]], "neural_compressor.compression.pruner.schedulers": [[216, "module-neural_compressor.compression.pruner.schedulers"]], "register_scheduler() (in module neural_compressor.compression.pruner.schedulers)": [[216, "neural_compressor.compression.pruner.schedulers.register_scheduler"]], "magnitudecriterion (class in neural_compressor.compression.pruner.tf_criteria)": [[217, "neural_compressor.compression.pruner.tf_criteria.MagnitudeCriterion"]], "pruningcriterion (class in neural_compressor.compression.pruner.tf_criteria)": [[217, "neural_compressor.compression.pruner.tf_criteria.PruningCriterion"]], "get_tf_criterion() (in module neural_compressor.compression.pruner.tf_criteria)": [[217, "neural_compressor.compression.pruner.tf_criteria.get_tf_criterion"]], "neural_compressor.compression.pruner.tf_criteria": [[217, "module-neural_compressor.compression.pruner.tf_criteria"]], "register_criterion() (in module neural_compressor.compression.pruner.tf_criteria)": [[217, "neural_compressor.compression.pruner.tf_criteria.register_criterion"]], "scores (neural_compressor.compression.pruner.tf_criteria.magnitudecriterion attribute)": [[217, "neural_compressor.compression.pruner.tf_criteria.MagnitudeCriterion.scores"]], "scores (neural_compressor.compression.pruner.tf_criteria.pruningcriterion attribute)": [[217, "neural_compressor.compression.pruner.tf_criteria.PruningCriterion.scores"]], "check_config() (in module neural_compressor.compression.pruner.utils)": [[218, "neural_compressor.compression.pruner.utils.check_config"]], "check_key_validity() (in module neural_compressor.compression.pruner.utils)": [[218, "neural_compressor.compression.pruner.utils.check_key_validity"]], "collect_layer_inputs() (in module neural_compressor.compression.pruner.utils)": [[218, "neural_compressor.compression.pruner.utils.collect_layer_inputs"]], "generate_pruner_config() (in module neural_compressor.compression.pruner.utils)": [[218, "neural_compressor.compression.pruner.utils.generate_pruner_config"]], "get_layers() (in module neural_compressor.compression.pruner.utils)": [[218, "neural_compressor.compression.pruner.utils.get_layers"]], "get_sparsity_ratio() (in module neural_compressor.compression.pruner.utils)": [[218, "neural_compressor.compression.pruner.utils.get_sparsity_ratio"]], "get_sparsity_ratio_tf() (in module neural_compressor.compression.pruner.utils)": [[218, "neural_compressor.compression.pruner.utils.get_sparsity_ratio_tf"]], "neural_compressor.compression.pruner.utils": [[218, "module-neural_compressor.compression.pruner.utils"]], "parse_last_linear() (in module neural_compressor.compression.pruner.utils)": [[218, "neural_compressor.compression.pruner.utils.parse_last_linear"]], "parse_last_linear_tf() (in module neural_compressor.compression.pruner.utils)": [[218, "neural_compressor.compression.pruner.utils.parse_last_linear_tf"]], "parse_to_prune() (in module neural_compressor.compression.pruner.utils)": [[218, "neural_compressor.compression.pruner.utils.parse_to_prune"]], "parse_to_prune_tf() (in module neural_compressor.compression.pruner.utils)": [[218, "neural_compressor.compression.pruner.utils.parse_to_prune_tf"]], "process_and_check_config() (in module neural_compressor.compression.pruner.utils)": [[218, "neural_compressor.compression.pruner.utils.process_and_check_config"]], "process_config() (in module neural_compressor.compression.pruner.utils)": [[218, "neural_compressor.compression.pruner.utils.process_config"]], "process_weight_config() (in module neural_compressor.compression.pruner.utils)": [[218, "neural_compressor.compression.pruner.utils.process_weight_config"]], "process_yaml_config() (in module neural_compressor.compression.pruner.utils)": [[218, "neural_compressor.compression.pruner.utils.process_yaml_config"]], "reset_none_to_default() (in module neural_compressor.compression.pruner.utils)": [[218, "neural_compressor.compression.pruner.utils.reset_none_to_default"]], "update_params() (in module neural_compressor.compression.pruner.utils)": [[218, "neural_compressor.compression.pruner.utils.update_params"]], "neural_compressor.compression.pruner.wanda": [[219, "module-neural_compressor.compression.pruner.wanda"]], "neural_compressor.compression.pruner.wanda.prune": [[220, "module-neural_compressor.compression.pruner.wanda.prune"]], "prune_wanda() (in module neural_compressor.compression.pruner.wanda.prune)": [[220, "neural_compressor.compression.pruner.wanda.prune.prune_wanda"]], "find_layers() (in module neural_compressor.compression.pruner.wanda.utils)": [[221, "neural_compressor.compression.pruner.wanda.utils.find_layers"]], "neural_compressor.compression.pruner.wanda.utils": [[221, "module-neural_compressor.compression.pruner.wanda.utils"]], "wrappedgpt (class in neural_compressor.compression.pruner.wanda.wrapper)": [[222, "neural_compressor.compression.pruner.wanda.wrapper.WrappedGPT"]], "neural_compressor.compression.pruner.wanda.wrapper": [[222, "module-neural_compressor.compression.pruner.wanda.wrapper"]], "benchmark_conf (class in neural_compressor.conf.config)": [[223, "neural_compressor.conf.config.Benchmark_Conf"]], "conf (class in neural_compressor.conf.config)": [[223, "neural_compressor.conf.config.Conf"]], "defaultconf (class in neural_compressor.conf.config)": [[223, "neural_compressor.conf.config.DefaultConf"]], "distillation_conf (class in neural_compressor.conf.config)": [[223, "neural_compressor.conf.config.Distillation_Conf"]], "graph_optimization_conf (class in neural_compressor.conf.config)": [[223, "neural_compressor.conf.config.Graph_Optimization_Conf"]], "mixedprecision_conf (class in neural_compressor.conf.config)": [[223, "neural_compressor.conf.config.MixedPrecision_Conf"]], "nasconfig (class in neural_compressor.conf.config)": [[223, "neural_compressor.conf.config.NASConfig"]], "prunerv2 (class in neural_compressor.conf.config)": [[223, "neural_compressor.conf.config.PrunerV2"]], "pruning_conf (class in neural_compressor.conf.config)": [[223, "neural_compressor.conf.config.Pruning_Conf"]], "quantization_conf (class in neural_compressor.conf.config)": [[223, "neural_compressor.conf.config.Quantization_Conf"]], "neural_compressor.conf.config": [[223, "module-neural_compressor.conf.config"]], "dotdict (class in neural_compressor.conf.dotdict)": [[224, "neural_compressor.conf.dotdict.DotDict"]], "deep_get() (in module neural_compressor.conf.dotdict)": [[224, "neural_compressor.conf.dotdict.deep_get"]], "deep_set() (in module neural_compressor.conf.dotdict)": [[224, "neural_compressor.conf.dotdict.deep_set"]], "neural_compressor.conf.dotdict": [[224, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[225, "module-neural_compressor.conf"]], "accuracycriterion (class in neural_compressor.conf.pythonic_config)": [[226, "neural_compressor.conf.pythonic_config.AccuracyCriterion"]], "benchmarkconfig (class in neural_compressor.conf.pythonic_config)": [[226, "neural_compressor.conf.pythonic_config.BenchmarkConfig"]], "distillationconfig (class in neural_compressor.conf.pythonic_config)": [[226, "neural_compressor.conf.pythonic_config.DistillationConfig"]], "knowledgedistillationlossconfig (class in neural_compressor.conf.pythonic_config)": [[226, "neural_compressor.conf.pythonic_config.KnowledgeDistillationLossConfig"]], "options (class in neural_compressor.conf.pythonic_config)": [[226, "neural_compressor.conf.pythonic_config.Options"]], "quantizationconfig (class in neural_compressor.conf.pythonic_config)": [[226, "neural_compressor.conf.pythonic_config.QuantizationConfig"]], "weightpruningconfig (class in neural_compressor.conf.pythonic_config)": [[226, "neural_compressor.conf.pythonic_config.WeightPruningConfig"]], "neural_compressor.conf.pythonic_config": [[226, "module-neural_compressor.conf.pythonic_config"]], "accuracycriterion (class in neural_compressor.config)": [[227, "neural_compressor.config.AccuracyCriterion"]], "benchmarkconfig (class in neural_compressor.config)": [[227, "neural_compressor.config.BenchmarkConfig"]], "distillationconfig (class in neural_compressor.config)": [[227, "neural_compressor.config.DistillationConfig"]], "dotdict (class in neural_compressor.config)": [[227, "neural_compressor.config.DotDict"]], "exportconfig (class in neural_compressor.config)": [[227, "neural_compressor.config.ExportConfig"]], "hpoconfig (class in neural_compressor.config)": [[227, "neural_compressor.config.HPOConfig"]], "intermediatelayersknowledgedistillationlossconfig (class in neural_compressor.config)": [[227, "neural_compressor.config.IntermediateLayersKnowledgeDistillationLossConfig"]], "keras (class in neural_compressor.config)": [[227, "neural_compressor.config.Keras"]], "knowledgedistillationlossconfig (class in neural_compressor.config)": [[227, "neural_compressor.config.KnowledgeDistillationLossConfig"]], "mxnet (class in neural_compressor.config)": [[227, "neural_compressor.config.MXNet"]], "mixedprecisionconfig (class in neural_compressor.config)": [[227, "neural_compressor.config.MixedPrecisionConfig"]], "nasconfig (class in neural_compressor.config)": [[227, "neural_compressor.config.NASConfig"]], "onnx (class in neural_compressor.config)": [[227, "neural_compressor.config.ONNX"]], "onnxqlinear2qdqconfig (class in neural_compressor.config)": [[227, "neural_compressor.config.ONNXQlinear2QDQConfig"]], "options (class in neural_compressor.config)": [[227, "neural_compressor.config.Options"]], "posttrainingquantconfig (class in neural_compressor.config)": [[227, "neural_compressor.config.PostTrainingQuantConfig"]], "pytorch (class in neural_compressor.config)": [[227, "neural_compressor.config.PyTorch"]], "quantizationawaretrainingconfig (class in neural_compressor.config)": [[227, "neural_compressor.config.QuantizationAwareTrainingConfig"]], "selfknowledgedistillationlossconfig (class in neural_compressor.config)": [[227, "neural_compressor.config.SelfKnowledgeDistillationLossConfig"]], "tf2onnxconfig (class in neural_compressor.config)": [[227, "neural_compressor.config.TF2ONNXConfig"]], "tensorflow (class in neural_compressor.config)": [[227, "neural_compressor.config.TensorFlow"]], "torch2onnxconfig (class in neural_compressor.config)": [[227, "neural_compressor.config.Torch2ONNXConfig"]], "tuningcriterion (class in neural_compressor.config)": [[227, "neural_compressor.config.TuningCriterion"]], "weightpruningconfig (class in neural_compressor.config)": [[227, "neural_compressor.config.WeightPruningConfig"]], "neural_compressor.config": [[227, "module-neural_compressor.config"]], "neural_compressor.contrib": [[228, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[229, "module-neural_compressor.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.contrib.strategy.sigopt)": [[230, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.sigopt": [[230, "module-neural_compressor.contrib.strategy.sigopt"]], "tpetunestrategy (class in neural_compressor.contrib.strategy.tpe)": [[231, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[231, "module-neural_compressor.contrib.strategy.tpe"]], "basedataloader (class in neural_compressor.data.dataloaders.base_dataloader)": [[232, "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader"]], "neural_compressor.data.dataloaders.base_dataloader": [[232, "module-neural_compressor.data.dataloaders.base_dataloader"]], "dataloader (class in neural_compressor.data.dataloaders.dataloader)": [[233, "neural_compressor.data.dataloaders.dataloader.DataLoader"]], "check_dataloader() (in module neural_compressor.data.dataloaders.dataloader)": [[233, "neural_compressor.data.dataloaders.dataloader.check_dataloader"]], "neural_compressor.data.dataloaders.dataloader": [[233, "module-neural_compressor.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.data.dataloaders.default_dataloader)": [[234, "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader"]], "default_collate() (in module neural_compressor.data.dataloaders.default_dataloader)": [[234, "neural_compressor.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.data.dataloaders.default_dataloader": [[234, "module-neural_compressor.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.data.dataloaders.fetcher)": [[235, "neural_compressor.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.data.dataloaders.fetcher)": [[235, "neural_compressor.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.data.dataloaders.fetcher)": [[235, "neural_compressor.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.data.dataloaders.fetcher": [[235, "module-neural_compressor.data.dataloaders.fetcher"]], "neural_compressor.data.dataloaders": [[236, "module-neural_compressor.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.data.dataloaders.mxnet_dataloader)": [[237, "neural_compressor.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[237, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[238, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[238, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[238, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.data.dataloaders.pytorch_dataloader)": [[239, "neural_compressor.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[239, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.data.dataloaders.sampler)": [[240, "neural_compressor.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.data.dataloaders.sampler)": [[240, "neural_compressor.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.data.dataloaders.sampler)": [[240, "neural_compressor.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.data.dataloaders.sampler)": [[240, "neural_compressor.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.data.dataloaders.sampler": [[240, "module-neural_compressor.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[241, "neural_compressor.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[241, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[241, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[241, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[241, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.data.datasets.bert_dataset)": [[242, "neural_compressor.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[242, "neural_compressor.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.data.datasets.bert_dataset)": [[242, "neural_compressor.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[242, "neural_compressor.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[242, "neural_compressor.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[242, "neural_compressor.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.data.datasets.bert_dataset)": [[242, "neural_compressor.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.data.datasets.bert_dataset)": [[242, "neural_compressor.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.data.datasets.bert_dataset": [[242, "module-neural_compressor.data.datasets.bert_dataset"]], "coconpy (class in neural_compressor.data.datasets.coco_dataset)": [[243, "neural_compressor.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.data.datasets.coco_dataset)": [[243, "neural_compressor.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.data.datasets.coco_dataset)": [[243, "neural_compressor.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.data.datasets.coco_dataset)": [[243, "neural_compressor.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.data.datasets.coco_dataset": [[243, "module-neural_compressor.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.data.datasets.dataset)": [[244, "neural_compressor.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.data.datasets.dataset)": [[244, "neural_compressor.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.data.datasets.dataset)": [[244, "neural_compressor.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.data.datasets.dataset)": [[244, "neural_compressor.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.data.datasets.dataset)": [[244, "neural_compressor.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.data.datasets.dataset)": [[244, "neural_compressor.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.data.datasets.dataset)": [[244, "neural_compressor.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.data.datasets.dataset)": [[244, "neural_compressor.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.data.datasets.dataset)": [[244, "neural_compressor.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.data.datasets.dataset)": [[244, "neural_compressor.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.data.datasets.dataset)": [[244, "neural_compressor.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.data.datasets.dataset)": [[244, "neural_compressor.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.data.datasets.dataset)": [[244, "neural_compressor.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.data.datasets.dataset)": [[244, "neural_compressor.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.data.datasets.dataset)": [[244, "neural_compressor.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.data.datasets.dataset)": [[244, "neural_compressor.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.data.datasets.dataset)": [[244, "neural_compressor.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.data.datasets.dataset)": [[244, "neural_compressor.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.data.datasets.dataset)": [[244, "neural_compressor.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.data.datasets.dataset)": [[244, "neural_compressor.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.data.datasets.dataset)": [[244, "neural_compressor.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.data.datasets.dataset)": [[244, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.datasets.dataset)": [[244, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflow (class in neural_compressor.data.datasets.dataset)": [[244, "neural_compressor.data.datasets.dataset.Tensorflow"]], "tensorflowcifar10 (class in neural_compressor.data.datasets.dataset)": [[244, "neural_compressor.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.data.datasets.dataset)": [[244, "neural_compressor.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.data.datasets.dataset)": [[244, "neural_compressor.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.data.datasets.dataset)": [[244, "neural_compressor.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagerecord (class in neural_compressor.data.datasets.dataset)": [[244, "neural_compressor.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.data.datasets.dataset)": [[244, "neural_compressor.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.data.datasets.dataset)": [[244, "neural_compressor.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.data.datasets.dataset)": [[244, "neural_compressor.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.data.datasets.dataset)": [[244, "neural_compressor.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.data.datasets.dataset)": [[244, "neural_compressor.data.datasets.dataset.check_integrity"]], "dataset_registry() (in module neural_compressor.data.datasets.dataset)": [[244, "neural_compressor.data.datasets.dataset.dataset_registry"]], "download_url() (in module neural_compressor.data.datasets.dataset)": [[244, "neural_compressor.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.data.datasets.dataset)": [[244, "neural_compressor.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.data.datasets.dataset)": [[244, "neural_compressor.data.datasets.dataset.gen_bar_updater"]], "neural_compressor.data.datasets.dataset": [[244, "module-neural_compressor.data.datasets.dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset)": [[245, "neural_compressor.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset": [[245, "module-neural_compressor.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[246, "neural_compressor.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[246, "neural_compressor.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[246, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[247, "neural_compressor.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[247, "neural_compressor.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[247, "neural_compressor.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[247, "neural_compressor.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[247, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[247, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.data.datasets.imagenet_dataset": [[247, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[248, "module-neural_compressor.data.datasets"]], "styletransferdataset (class in neural_compressor.data.datasets.style_transfer_dataset)": [[249, "neural_compressor.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.data.datasets.style_transfer_dataset": [[249, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.data.filters.coco_filter)": [[250, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.data.filters.coco_filter)": [[250, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.coco_filter": [[250, "module-neural_compressor.data.filters.coco_filter"]], "filters (class in neural_compressor.data.filters.filter)": [[251, "neural_compressor.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.data.filters.filter)": [[251, "neural_compressor.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.data.filters.filter)": [[251, "neural_compressor.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.data.filters.filter)": [[251, "neural_compressor.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.data.filters.filter)": [[251, "neural_compressor.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.data.filters.filter)": [[251, "neural_compressor.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.data.filters.filter)": [[251, "neural_compressor.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.data.filters.filter)": [[251, "neural_compressor.data.filters.filter.filter_registry"]], "neural_compressor.data.filters.filter": [[251, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[252, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[253, "module-neural_compressor.data"]], "parsedecodecocotransform (class in neural_compressor.data.transforms.coco_transform)": [[254, "neural_compressor.data.transforms.coco_transform.ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.coco_transform": [[254, "module-neural_compressor.data.transforms.coco_transform"]], "bilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[255, "neural_compressor.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.data.transforms.imagenet_transform)": [[255, "neural_compressor.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[255, "neural_compressor.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[255, "neural_compressor.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.data.transforms.imagenet_transform)": [[255, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[255, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.data.transforms.imagenet_transform)": [[255, "neural_compressor.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.data.transforms.imagenet_transform)": [[255, "neural_compressor.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[255, "neural_compressor.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "tensorflowshiftrescale (class in neural_compressor.data.transforms.imagenet_transform)": [[255, "neural_compressor.data.transforms.imagenet_transform.TensorflowShiftRescale"]], "tensorflowtransposelastchannel (class in neural_compressor.data.transforms.imagenet_transform)": [[255, "neural_compressor.data.transforms.imagenet_transform.TensorflowTransposeLastChannel"]], "neural_compressor.data.transforms.imagenet_transform": [[255, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[256, "module-neural_compressor.data.transforms"]], "postprocess (class in neural_compressor.data.transforms.postprocess)": [[257, "neural_compressor.data.transforms.postprocess.Postprocess"]], "neural_compressor.data.transforms.postprocess": [[257, "module-neural_compressor.data.transforms.postprocess"]], "basictokenizer (class in neural_compressor.data.transforms.tokenization)": [[258, "neural_compressor.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.data.transforms.tokenization)": [[258, "neural_compressor.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.data.transforms.tokenization)": [[258, "neural_compressor.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.data.transforms.tokenization)": [[258, "neural_compressor.data.transforms.tokenization.convert_by_vocab"]], "convert_to_unicode() (in module neural_compressor.data.transforms.tokenization)": [[258, "neural_compressor.data.transforms.tokenization.convert_to_unicode"]], "load_vocab() (in module neural_compressor.data.transforms.tokenization)": [[258, "neural_compressor.data.transforms.tokenization.load_vocab"]], "neural_compressor.data.transforms.tokenization": [[258, "module-neural_compressor.data.transforms.tokenization"]], "whitespace_tokenize() (in module neural_compressor.data.transforms.tokenization)": [[258, "neural_compressor.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.data.transforms.transform)": [[259, "neural_compressor.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.data.transforms.transform)": [[259, "neural_compressor.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.data.transforms.transform)": [[259, "neural_compressor.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.data.transforms.transform)": [[259, "neural_compressor.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.data.transforms.transform)": [[259, "neural_compressor.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.data.transforms.transform)": [[259, "neural_compressor.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.data.transforms.transform)": [[259, "neural_compressor.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.data.transforms.transform)": [[259, "neural_compressor.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.data.transforms.transform)": [[259, "neural_compressor.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.data.transforms.transform)": [[259, "neural_compressor.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.data.transforms.transform)": [[259, "neural_compressor.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.data.transforms.transform)": [[259, "neural_compressor.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.data.transforms.transform)": [[259, "neural_compressor.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.data.transforms.transform)": [[259, "neural_compressor.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[259, "neural_compressor.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.data.transforms.transform)": [[259, "neural_compressor.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.data.transforms.transform)": [[259, "neural_compressor.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.data.transforms.transform)": [[259, "neural_compressor.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.data.transforms.transform)": [[259, "neural_compressor.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.data.transforms.transform)": [[259, "neural_compressor.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[259, "neural_compressor.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.data.transforms.transform)": [[259, "neural_compressor.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.data.transforms.transform)": [[259, "neural_compressor.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.data.transforms.transform)": [[259, "neural_compressor.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.data.transforms.transform)": [[259, "neural_compressor.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.data.transforms.transform)": [[259, "neural_compressor.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.data.transforms.transform)": [[259, "neural_compressor.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.data.transforms.transform)": [[259, "neural_compressor.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.data.transforms.transform)": [[259, "neural_compressor.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.data.transforms.transform)": [[259, "neural_compressor.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.data.transforms.transform)": [[259, "neural_compressor.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.transforms.transform)": [[259, "neural_compressor.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.data.transforms.transform)": [[259, "neural_compressor.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.data.transforms.transform)": [[259, "neural_compressor.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[259, "neural_compressor.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.data.transforms.transform)": [[259, "neural_compressor.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.data.transforms.transform)": [[259, "neural_compressor.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.data.transforms.transform)": [[259, "neural_compressor.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.data.transforms.transform)": [[259, "neural_compressor.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.data.transforms.transform)": [[259, "neural_compressor.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.data.transforms.transform)": [[259, "neural_compressor.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.data.transforms.transform)": [[259, "neural_compressor.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.data.transforms.transform)": [[259, "neural_compressor.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.data.transforms.transform)": [[259, "neural_compressor.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.data.transforms.transform)": [[259, "neural_compressor.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.data.transforms.transform)": [[259, "neural_compressor.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.data.transforms.transform)": [[259, "neural_compressor.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.data.transforms.transform)": [[259, "neural_compressor.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.data.transforms.transform)": [[259, "neural_compressor.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.data.transforms.transform)": [[259, "neural_compressor.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.data.transforms.transform)": [[259, "neural_compressor.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.data.transforms.transform)": [[259, "neural_compressor.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.data.transforms.transform)": [[259, "neural_compressor.data.transforms.transform.TRANSFORMS"], [259, "neural_compressor.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[259, "neural_compressor.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[259, "neural_compressor.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.data.transforms.transform)": [[259, "neural_compressor.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.data.transforms.transform)": [[259, "neural_compressor.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.data.transforms.transform)": [[259, "neural_compressor.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.data.transforms.transform)": [[259, "neural_compressor.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.data.transforms.transform)": [[259, "neural_compressor.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.data.transforms.transform)": [[259, "neural_compressor.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.data.transforms.transform)": [[259, "neural_compressor.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.data.transforms.transform)": [[259, "neural_compressor.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.data.transforms.transform)": [[259, "neural_compressor.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.data.transforms.transform)": [[259, "neural_compressor.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.data.transforms.transform)": [[259, "neural_compressor.data.transforms.transform.get_final_text"]], "get_torchvision_map() (in module neural_compressor.data.transforms.transform)": [[259, "neural_compressor.data.transforms.transform.get_torchvision_map"]], "neural_compressor.data.transforms.transform": [[259, "module-neural_compressor.data.transforms.transform"]], "read_squad_examples() (in module neural_compressor.data.transforms.transform)": [[259, "neural_compressor.data.transforms.transform.read_squad_examples"]], "transform_registry() (in module neural_compressor.data.transforms.transform)": [[259, "neural_compressor.data.transforms.transform.transform_registry"]], "benchmark (class in neural_compressor.experimental.benchmark)": [[260, "neural_compressor.experimental.benchmark.Benchmark"]], "get_architecture() (in module neural_compressor.experimental.benchmark)": [[260, "neural_compressor.experimental.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.experimental.benchmark)": [[260, "neural_compressor.experimental.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.experimental.benchmark)": [[260, "neural_compressor.experimental.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.experimental.benchmark)": [[260, "neural_compressor.experimental.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.experimental.benchmark)": [[260, "neural_compressor.experimental.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.experimental.benchmark)": [[260, "neural_compressor.experimental.benchmark.get_threads_per_core"]], "neural_compressor.experimental.benchmark": [[260, "module-neural_compressor.experimental.benchmark"]], "set_all_env_var() (in module neural_compressor.experimental.benchmark)": [[260, "neural_compressor.experimental.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.experimental.benchmark)": [[260, "neural_compressor.experimental.benchmark.set_env_var"]], "criterions (class in neural_compressor.experimental.common.criterion)": [[261, "neural_compressor.experimental.common.criterion.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[261, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.experimental.common.criterion)": [[261, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[261, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss"]], "pytorchcriterions (class in neural_compressor.experimental.common.criterion)": [[261, "neural_compressor.experimental.common.criterion.PyTorchCriterions"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[261, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[261, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[261, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[261, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[261, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss"]], "tensorflowcriterions (class in neural_compressor.experimental.common.criterion)": [[261, "neural_compressor.experimental.common.criterion.TensorflowCriterions"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.experimental.common.criterion)": [[261, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal"]], "criterion_registry() (in module neural_compressor.experimental.common.criterion)": [[261, "neural_compressor.experimental.common.criterion.criterion_registry"]], "neural_compressor.experimental.common.criterion": [[261, "module-neural_compressor.experimental.common.criterion"]], "dataloader (class in neural_compressor.experimental.common.dataloader)": [[262, "neural_compressor.experimental.common.dataloader.DataLoader"]], "neural_compressor.experimental.common.dataloader": [[262, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[263, "module-neural_compressor.experimental.common"]], "metric (class in neural_compressor.experimental.common.metric)": [[264, "neural_compressor.experimental.common.metric.Metric"]], "neural_compressor.experimental.common.metric": [[264, "module-neural_compressor.experimental.common.metric"]], "model (class in neural_compressor.experimental.common.model)": [[265, "neural_compressor.experimental.common.model.Model"]], "neural_compressor.experimental.common.model": [[265, "module-neural_compressor.experimental.common.model"]], "set_backend() (in module neural_compressor.experimental.common.model)": [[265, "neural_compressor.experimental.common.model.set_backend"]], "optimizers (class in neural_compressor.experimental.common.optimizer)": [[266, "neural_compressor.experimental.common.optimizer.Optimizers"]], "pytorchoptimizers (class in neural_compressor.experimental.common.optimizer)": [[266, "neural_compressor.experimental.common.optimizer.PyTorchOptimizers"]], "pytorchsgd (class in neural_compressor.experimental.common.optimizer)": [[266, "neural_compressor.experimental.common.optimizer.PyTorchSGD"]], "tensorflowadamw (class in neural_compressor.experimental.common.optimizer)": [[266, "neural_compressor.experimental.common.optimizer.TensorFlowAdamW"]], "tensorflowsgd (class in neural_compressor.experimental.common.optimizer)": [[266, "neural_compressor.experimental.common.optimizer.TensorFlowSGD"]], "tensorflowoptimizers (class in neural_compressor.experimental.common.optimizer)": [[266, "neural_compressor.experimental.common.optimizer.TensorflowOptimizers"]], "neural_compressor.experimental.common.optimizer": [[266, "module-neural_compressor.experimental.common.optimizer"]], "optimizer_registry() (in module neural_compressor.experimental.common.optimizer)": [[266, "neural_compressor.experimental.common.optimizer.optimizer_registry"]], "postprocess (class in neural_compressor.experimental.common.postprocess)": [[267, "neural_compressor.experimental.common.postprocess.Postprocess"]], "neural_compressor.experimental.common.postprocess": [[267, "module-neural_compressor.experimental.common.postprocess"]], "get_activation() (in module neural_compressor.experimental.common.torch_utils)": [[268, "neural_compressor.experimental.common.torch_utils.get_activation"]], "neural_compressor.experimental.common.torch_utils": [[268, "module-neural_compressor.experimental.common.torch_utils"]], "record_output() (in module neural_compressor.experimental.common.torch_utils)": [[268, "neural_compressor.experimental.common.torch_utils.record_output"]], "component (class in neural_compressor.experimental.component)": [[269, "neural_compressor.experimental.component.Component"]], "neural_compressor.experimental.component": [[269, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.compression": [[270, "module-neural_compressor.experimental.compression"]], "neural_compressor.experimental.contrib": [[271, "module-neural_compressor.experimental.contrib"]], "neural_compressor.experimental.contrib.strategy": [[272, "module-neural_compressor.experimental.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.experimental.contrib.strategy.sigopt)": [[273, "neural_compressor.experimental.contrib.strategy.sigopt.SigOptTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[273, "module-neural_compressor.experimental.contrib.strategy.sigopt"]], "tpetunestrategy (class in neural_compressor.experimental.contrib.strategy.tpe)": [[274, "neural_compressor.experimental.contrib.strategy.tpe.TpeTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.tpe": [[274, "module-neural_compressor.experimental.contrib.strategy.tpe"]], "basedataloader (class in neural_compressor.experimental.data.dataloaders.base_dataloader)": [[275, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[275, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[276, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.experimental.data.dataloaders.default_dataloader)": [[277, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader"]], "default_collate() (in module neural_compressor.experimental.data.dataloaders.default_dataloader)": [[277, "neural_compressor.experimental.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[277, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[278, "neural_compressor.experimental.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[278, "neural_compressor.experimental.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[278, "neural_compressor.experimental.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[278, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[279, "module-neural_compressor.experimental.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.experimental.data.dataloaders.mxnet_dataloader)": [[280, "neural_compressor.experimental.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[280, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[281, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[281, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[281, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.experimental.data.dataloaders.pytorch_dataloader)": [[282, "neural_compressor.experimental.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[282, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[283, "neural_compressor.experimental.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[283, "neural_compressor.experimental.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[283, "neural_compressor.experimental.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[283, "neural_compressor.experimental.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.sampler": [[283, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[284, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[284, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[284, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[284, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[284, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[285, "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[285, "neural_compressor.experimental.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[285, "neural_compressor.experimental.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[285, "neural_compressor.experimental.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[285, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[285, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[285, "neural_compressor.experimental.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[285, "neural_compressor.experimental.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[285, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "coconpy (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[286, "neural_compressor.experimental.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[286, "neural_compressor.experimental.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[286, "neural_compressor.experimental.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[286, "neural_compressor.experimental.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[286, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[287, "neural_compressor.experimental.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[287, "neural_compressor.experimental.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.experimental.data.datasets.dataset)": [[287, "neural_compressor.experimental.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.experimental.data.datasets.dataset)": [[287, "neural_compressor.experimental.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[287, "neural_compressor.experimental.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[287, "neural_compressor.experimental.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.experimental.data.datasets.dataset)": [[287, "neural_compressor.experimental.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.experimental.data.datasets.dataset)": [[287, "neural_compressor.experimental.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[287, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[287, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[287, "neural_compressor.experimental.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[287, "neural_compressor.experimental.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[287, "neural_compressor.experimental.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[287, "neural_compressor.experimental.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[287, "neural_compressor.experimental.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[287, "neural_compressor.experimental.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[287, "neural_compressor.experimental.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[287, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[287, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[287, "neural_compressor.experimental.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[287, "neural_compressor.experimental.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.experimental.data.datasets.dataset)": [[287, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.datasets.dataset)": [[287, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflowcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[287, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[287, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[287, "neural_compressor.experimental.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[287, "neural_compressor.experimental.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[287, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageFolder"]], "tensorflowimagerecord (class in neural_compressor.experimental.data.datasets.dataset)": [[287, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[287, "neural_compressor.experimental.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.experimental.data.datasets.dataset)": [[287, "neural_compressor.experimental.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.experimental.data.datasets.dataset)": [[287, "neural_compressor.experimental.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.experimental.data.datasets.dataset)": [[287, "neural_compressor.experimental.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.experimental.data.datasets.dataset)": [[287, "neural_compressor.experimental.data.datasets.dataset.check_integrity"]], "dataset_registry() (in module neural_compressor.experimental.data.datasets.dataset)": [[287, "neural_compressor.experimental.data.datasets.dataset.dataset_registry"]], "download_url() (in module neural_compressor.experimental.data.datasets.dataset)": [[287, "neural_compressor.experimental.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.experimental.data.datasets.dataset)": [[287, "neural_compressor.experimental.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.experimental.data.datasets.dataset)": [[287, "neural_compressor.experimental.data.datasets.dataset.gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dataset": [[287, "module-neural_compressor.experimental.data.datasets.dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset)": [[288, "neural_compressor.experimental.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[288, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[289, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[289, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[289, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[290, "neural_compressor.experimental.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[290, "neural_compressor.experimental.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[290, "neural_compressor.experimental.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[290, "neural_compressor.experimental.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[290, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[290, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[290, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[291, "module-neural_compressor.experimental.data.datasets"]], "styletransferdataset (class in neural_compressor.experimental.data.datasets.style_transfer_dataset)": [[292, "neural_compressor.experimental.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[292, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[293, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[293, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.coco_filter": [[293, "module-neural_compressor.experimental.data.filters.coco_filter"]], "filters (class in neural_compressor.experimental.data.filters.filter)": [[294, "neural_compressor.experimental.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.experimental.data.filters.filter)": [[294, "neural_compressor.experimental.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.experimental.data.filters.filter)": [[294, "neural_compressor.experimental.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.experimental.data.filters.filter)": [[294, "neural_compressor.experimental.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.experimental.data.filters.filter)": [[294, "neural_compressor.experimental.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.experimental.data.filters.filter)": [[294, "neural_compressor.experimental.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.experimental.data.filters.filter)": [[294, "neural_compressor.experimental.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.experimental.data.filters.filter)": [[294, "neural_compressor.experimental.data.filters.filter.filter_registry"]], "neural_compressor.experimental.data.filters.filter": [[294, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[295, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[296, "module-neural_compressor.experimental.data"]], "bilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[297, "neural_compressor.experimental.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[297, "neural_compressor.experimental.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[297, "neural_compressor.experimental.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[297, "neural_compressor.experimental.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[297, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[297, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[297, "neural_compressor.experimental.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[297, "neural_compressor.experimental.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[297, "neural_compressor.experimental.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[297, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[298, "module-neural_compressor.experimental.data.transforms"]], "basictokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[299, "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[299, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[299, "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[299, "neural_compressor.experimental.data.transforms.tokenization.convert_by_vocab"]], "convert_to_unicode() (in module neural_compressor.experimental.data.transforms.tokenization)": [[299, "neural_compressor.experimental.data.transforms.tokenization.convert_to_unicode"]], "load_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[299, "neural_compressor.experimental.data.transforms.tokenization.load_vocab"]], "neural_compressor.experimental.data.transforms.tokenization": [[299, "module-neural_compressor.experimental.data.transforms.tokenization"]], "whitespace_tokenize() (in module neural_compressor.experimental.data.transforms.tokenization)": [[299, "neural_compressor.experimental.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.experimental.data.transforms.transform)": [[300, "neural_compressor.experimental.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.experimental.data.transforms.transform)": [[300, "neural_compressor.experimental.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.experimental.data.transforms.transform)": [[300, "neural_compressor.experimental.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[300, "neural_compressor.experimental.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.experimental.data.transforms.transform)": [[300, "neural_compressor.experimental.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[300, "neural_compressor.experimental.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[300, "neural_compressor.experimental.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[300, "neural_compressor.experimental.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.experimental.data.transforms.transform)": [[300, "neural_compressor.experimental.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[300, "neural_compressor.experimental.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[300, "neural_compressor.experimental.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[300, "neural_compressor.experimental.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.experimental.data.transforms.transform)": [[300, "neural_compressor.experimental.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[300, "neural_compressor.experimental.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[300, "neural_compressor.experimental.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[300, "neural_compressor.experimental.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.experimental.data.transforms.transform)": [[300, "neural_compressor.experimental.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.experimental.data.transforms.transform)": [[300, "neural_compressor.experimental.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[300, "neural_compressor.experimental.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[300, "neural_compressor.experimental.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[300, "neural_compressor.experimental.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.experimental.data.transforms.transform)": [[300, "neural_compressor.experimental.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.experimental.data.transforms.transform)": [[300, "neural_compressor.experimental.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[300, "neural_compressor.experimental.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.experimental.data.transforms.transform)": [[300, "neural_compressor.experimental.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.experimental.data.transforms.transform)": [[300, "neural_compressor.experimental.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[300, "neural_compressor.experimental.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[300, "neural_compressor.experimental.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[300, "neural_compressor.experimental.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[300, "neural_compressor.experimental.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[300, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[300, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[300, "neural_compressor.experimental.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[300, "neural_compressor.experimental.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[300, "neural_compressor.experimental.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[300, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[300, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[300, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[300, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[300, "neural_compressor.experimental.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.experimental.data.transforms.transform)": [[300, "neural_compressor.experimental.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.experimental.data.transforms.transform)": [[300, "neural_compressor.experimental.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.experimental.data.transforms.transform)": [[300, "neural_compressor.experimental.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[300, "neural_compressor.experimental.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[300, "neural_compressor.experimental.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[300, "neural_compressor.experimental.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[300, "neural_compressor.experimental.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[300, "neural_compressor.experimental.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.experimental.data.transforms.transform)": [[300, "neural_compressor.experimental.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[300, "neural_compressor.experimental.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.experimental.data.transforms.transform)": [[300, "neural_compressor.experimental.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.experimental.data.transforms.transform)": [[300, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.experimental.data.transforms.transform)": [[300, "neural_compressor.experimental.data.transforms.transform.TRANSFORMS"], [300, "neural_compressor.experimental.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[300, "neural_compressor.experimental.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[300, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[300, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[300, "neural_compressor.experimental.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.experimental.data.transforms.transform)": [[300, "neural_compressor.experimental.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[300, "neural_compressor.experimental.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[300, "neural_compressor.experimental.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[300, "neural_compressor.experimental.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.experimental.data.transforms.transform)": [[300, "neural_compressor.experimental.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.experimental.data.transforms.transform)": [[300, "neural_compressor.experimental.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.experimental.data.transforms.transform)": [[300, "neural_compressor.experimental.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.transforms.transform)": [[300, "neural_compressor.experimental.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.experimental.data.transforms.transform)": [[300, "neural_compressor.experimental.data.transforms.transform.get_final_text"]], "get_torchvision_map() (in module neural_compressor.experimental.data.transforms.transform)": [[300, "neural_compressor.experimental.data.transforms.transform.get_torchvision_map"]], "neural_compressor.experimental.data.transforms.transform": [[300, "module-neural_compressor.experimental.data.transforms.transform"]], "read_squad_examples() (in module neural_compressor.experimental.data.transforms.transform)": [[300, "neural_compressor.experimental.data.transforms.transform.read_squad_examples"]], "transform_registry() (in module neural_compressor.experimental.data.transforms.transform)": [[300, "neural_compressor.experimental.data.transforms.transform.transform_registry"]], "distillation (class in neural_compressor.experimental.distillation)": [[301, "neural_compressor.experimental.distillation.Distillation"]], "_epoch_ran (neural_compressor.experimental.distillation.distillation attribute)": [[301, "neural_compressor.experimental.distillation.Distillation._epoch_ran"]], "best_model (neural_compressor.experimental.distillation.distillation attribute)": [[301, "neural_compressor.experimental.distillation.Distillation.best_model"]], "best_score (neural_compressor.experimental.distillation.distillation attribute)": [[301, "neural_compressor.experimental.distillation.Distillation.best_score"]], "eval_frequency (neural_compressor.experimental.distillation.distillation attribute)": [[301, "neural_compressor.experimental.distillation.Distillation.eval_frequency"]], "neural_compressor.experimental.distillation": [[301, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[302, "module-neural_compressor.experimental.export"]], "check_model() (in module neural_compressor.experimental.export.qlinear2qdq)": [[303, "neural_compressor.experimental.export.qlinear2qdq.check_model"]], "neural_compressor.experimental.export.qlinear2qdq": [[303, "module-neural_compressor.experimental.export.qlinear2qdq"]], "onnx_qlinear_to_qdq() (in module neural_compressor.experimental.export.qlinear2qdq)": [[303, "neural_compressor.experimental.export.qlinear2qdq.onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.tf2onnx": [[304, "module-neural_compressor.experimental.export.tf2onnx"]], "tf_to_fp32_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[304, "neural_compressor.experimental.export.tf2onnx.tf_to_fp32_onnx"]], "tf_to_int8_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[304, "neural_compressor.experimental.export.tf2onnx.tf_to_int8_onnx"]], "dynamic_quant_export() (in module neural_compressor.experimental.export.torch2onnx)": [[305, "neural_compressor.experimental.export.torch2onnx.dynamic_quant_export"]], "get_node_mapping() (in module neural_compressor.experimental.export.torch2onnx)": [[305, "neural_compressor.experimental.export.torch2onnx.get_node_mapping"]], "get_quantizable_onnx_ops() (in module neural_compressor.experimental.export.torch2onnx)": [[305, "neural_compressor.experimental.export.torch2onnx.get_quantizable_onnx_ops"]], "neural_compressor.experimental.export.torch2onnx": [[305, "module-neural_compressor.experimental.export.torch2onnx"]], "static_quant_export() (in module neural_compressor.experimental.export.torch2onnx)": [[305, "neural_compressor.experimental.export.torch2onnx.static_quant_export"]], "torch_to_fp32_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[305, "neural_compressor.experimental.export.torch2onnx.torch_to_fp32_onnx"]], "torch_to_int8_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[305, "neural_compressor.experimental.export.torch2onnx.torch_to_int8_onnx"]], "graph_optimization (class in neural_compressor.experimental.graph_optimization)": [[306, "neural_compressor.experimental.graph_optimization.Graph_Optimization"]], "neural_compressor.experimental.graph_optimization": [[306, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[307, "module-neural_compressor.experimental"]], "bleu (class in neural_compressor.experimental.metric.bleu)": [[308, "neural_compressor.experimental.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.experimental.metric.bleu)": [[308, "neural_compressor.experimental.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.experimental.metric.bleu)": [[308, "neural_compressor.experimental.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.experimental.metric.bleu.bleu attribute)": [[308, "neural_compressor.experimental.metric.bleu.BLEU.labels"]], "neural_compressor.experimental.metric.bleu": [[308, "module-neural_compressor.experimental.metric.bleu"]], "nondigit_punct_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[308, "neural_compressor.experimental.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.experimental.metric.bleu.bleu attribute)": [[308, "neural_compressor.experimental.metric.bleu.BLEU.predictions"]], "punct_nondigit_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[308, "neural_compressor.experimental.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[308, "neural_compressor.experimental.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.experimental.metric.bleu_util)": [[309, "neural_compressor.experimental.metric.bleu_util.compute_bleu"]], "neural_compressor.experimental.metric.bleu_util": [[309, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[310, "module-neural_compressor.experimental.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.experimental.metric.coco_tools)": [[311, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.experimental.metric.coco_tools)": [[311, "neural_compressor.experimental.metric.coco_tools.COCOWrapper"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.experimental.metric.coco_tools)": [[311, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.experimental.metric.coco_tools)": [[311, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.experimental.metric.coco_tools)": [[311, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "dataset (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[311, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[311, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.experimental.metric.coco_tools": [[311, "module-neural_compressor.experimental.metric.coco_tools"]], "evaluate() (in module neural_compressor.experimental.metric.evaluate_squad)": [[312, "neural_compressor.experimental.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[312, "neural_compressor.experimental.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[312, "neural_compressor.experimental.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.evaluate_squad)": [[312, "neural_compressor.experimental.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.evaluate_squad": [[312, "module-neural_compressor.experimental.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.experimental.metric.f1)": [[313, "neural_compressor.experimental.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.experimental.metric.f1)": [[313, "neural_compressor.experimental.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.f1)": [[313, "neural_compressor.experimental.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[313, "module-neural_compressor.experimental.metric.f1"]], "normalize_answer() (in module neural_compressor.experimental.metric.f1)": [[313, "neural_compressor.experimental.metric.f1.normalize_answer"]], "neural_compressor.experimental.metric": [[314, "module-neural_compressor.experimental.metric"]], "accuracy (class in neural_compressor.experimental.metric.metric)": [[315, "neural_compressor.experimental.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.experimental.metric.metric)": [[315, "neural_compressor.experimental.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.experimental.metric.metric)": [[315, "neural_compressor.experimental.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.experimental.metric.metric)": [[315, "neural_compressor.experimental.metric.metric.F1"]], "generaltopk (class in neural_compressor.experimental.metric.metric)": [[315, "neural_compressor.experimental.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.experimental.metric.metric)": [[315, "neural_compressor.experimental.metric.metric.Loss"]], "mae (class in neural_compressor.experimental.metric.metric)": [[315, "neural_compressor.experimental.metric.metric.MAE"]], "metrics (class in neural_compressor.experimental.metric.metric)": [[315, "neural_compressor.experimental.metric.metric.METRICS"]], "mse (class in neural_compressor.experimental.metric.metric)": [[315, "neural_compressor.experimental.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.experimental.metric.metric)": [[315, "neural_compressor.experimental.metric.metric.MXNetMetrics"]], "onnxrtglue (class in neural_compressor.experimental.metric.metric)": [[315, "neural_compressor.experimental.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.experimental.metric.metric)": [[315, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.experimental.metric.metric)": [[315, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.experimental.metric.metric)": [[315, "neural_compressor.experimental.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.experimental.metric.metric)": [[315, "neural_compressor.experimental.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.experimental.metric.metric)": [[315, "neural_compressor.experimental.metric.metric.RMSE"]], "roc (class in neural_compressor.experimental.metric.metric)": [[315, "neural_compressor.experimental.metric.metric.ROC"]], "squadf1 (class in neural_compressor.experimental.metric.metric)": [[315, "neural_compressor.experimental.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.experimental.metric.metric)": [[315, "neural_compressor.experimental.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.experimental.metric.metric)": [[315, "neural_compressor.experimental.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.experimental.metric.metric)": [[315, "neural_compressor.experimental.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.experimental.metric.metric)": [[315, "neural_compressor.experimental.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.experimental.metric.metric)": [[315, "neural_compressor.experimental.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.experimental.metric.metric)": [[315, "neural_compressor.experimental.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.experimental.metric.metric)": [[315, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.experimental.metric.metric)": [[315, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.experimental.metric.metric.mae attribute)": [[315, "neural_compressor.experimental.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.experimental.metric.metric.mse attribute)": [[315, "neural_compressor.experimental.metric.metric.MSE.compare_label"]], "k (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[315, "neural_compressor.experimental.metric.metric.GeneralTopK.k"]], "k (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[315, "neural_compressor.experimental.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[315, "neural_compressor.experimental.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mae attribute)": [[315, "neural_compressor.experimental.metric.metric.MAE.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mse attribute)": [[315, "neural_compressor.experimental.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.experimental.metric.metric)": [[315, "neural_compressor.experimental.metric.metric.mIOU"]], "metric_registry() (in module neural_compressor.experimental.metric.metric)": [[315, "neural_compressor.experimental.metric.metric.metric_registry"]], "metrics (neural_compressor.experimental.metric.metric.metrics attribute)": [[315, "neural_compressor.experimental.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.experimental.metric.metric.mxnetmetrics attribute)": [[315, "neural_compressor.experimental.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtitmetrics attribute)": [[315, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtqlmetrics attribute)": [[315, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.pytorchmetrics attribute)": [[315, "neural_compressor.experimental.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.tensorflowmetrics attribute)": [[315, "neural_compressor.experimental.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.experimental.metric.metric.rmse attribute)": [[315, "neural_compressor.experimental.metric.metric.RMSE.mse"]], "neural_compressor.experimental.metric.metric": [[315, "module-neural_compressor.experimental.metric.metric"]], "num_correct (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[315, "neural_compressor.experimental.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[315, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[315, "neural_compressor.experimental.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[315, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[315, "neural_compressor.experimental.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mae attribute)": [[315, "neural_compressor.experimental.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mse attribute)": [[315, "neural_compressor.experimental.metric.metric.MSE.pred_list"]], "sample (neural_compressor.experimental.metric.metric.accuracy attribute)": [[315, "neural_compressor.experimental.metric.metric.Accuracy.sample"]], "sample (neural_compressor.experimental.metric.metric.loss attribute)": [[315, "neural_compressor.experimental.metric.metric.Loss.sample"]], "sum (neural_compressor.experimental.metric.metric.loss attribute)": [[315, "neural_compressor.experimental.metric.metric.Loss.sum"]], "mixedprecision (class in neural_compressor.experimental.mixed_precision)": [[316, "neural_compressor.experimental.mixed_precision.MixedPrecision"]], "neural_compressor.experimental.mixed_precision": [[316, "module-neural_compressor.experimental.mixed_precision"]], "modelconversion (class in neural_compressor.experimental.model_conversion)": [[317, "neural_compressor.experimental.model_conversion.ModelConversion"]], "neural_compressor.experimental.model_conversion": [[317, "module-neural_compressor.experimental.model_conversion"]], "basicnas (class in neural_compressor.experimental.nas.basic_nas)": [[318, "neural_compressor.experimental.nas.basic_nas.BasicNAS"]], "neural_compressor.experimental.nas.basic_nas": [[318, "module-neural_compressor.experimental.nas.basic_nas"]], "dynas (class in neural_compressor.experimental.nas.dynas)": [[319, "neural_compressor.experimental.nas.dynas.DyNAS"]], "neural_compressor.experimental.nas.dynas": [[319, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas": [[320, "module-neural_compressor.experimental.nas"]], "nas (class in neural_compressor.experimental.nas.nas)": [[321, "neural_compressor.experimental.nas.nas.NAS"]], "nasbase (class in neural_compressor.experimental.nas.nas)": [[321, "neural_compressor.experimental.nas.nas.NASBase"]], "neural_compressor.experimental.nas.nas": [[321, "module-neural_compressor.experimental.nas.nas"]], "create_search_space_pool() (in module neural_compressor.experimental.nas.nas_utils)": [[322, "neural_compressor.experimental.nas.nas_utils.create_search_space_pool"]], "find_pareto_front() (in module neural_compressor.experimental.nas.nas_utils)": [[322, "neural_compressor.experimental.nas.nas_utils.find_pareto_front"]], "nas_registry() (in module neural_compressor.experimental.nas.nas_utils)": [[322, "neural_compressor.experimental.nas.nas_utils.nas_registry"]], "neural_compressor.experimental.nas.nas_utils": [[322, "module-neural_compressor.experimental.nas.nas_utils"]], "bayesianoptimizationsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[323, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher"]], "gridsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[323, "neural_compressor.experimental.nas.search_algorithms.GridSearcher"]], "randomsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[323, "neural_compressor.experimental.nas.search_algorithms.RandomSearcher"]], "searcher (class in neural_compressor.experimental.nas.search_algorithms)": [[323, "neural_compressor.experimental.nas.search_algorithms.Searcher"]], "neural_compressor.experimental.nas.search_algorithms": [[323, "module-neural_compressor.experimental.nas.search_algorithms"]], "gradientsensitivitypruner (class in neural_compressor.experimental.pruner_legacy.gradient_sensitivity)": [[324, "neural_compressor.experimental.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[324, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"]], "grouplassopruner (class in neural_compressor.experimental.pruner_legacy.group_lasso)": [[325, "neural_compressor.experimental.pruner_legacy.group_lasso.GroupLassoPruner"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[325, "module-neural_compressor.experimental.pruner_legacy.group_lasso"]], "neural_compressor.experimental.pruner_legacy": [[326, "module-neural_compressor.experimental.pruner_legacy"]], "basicmagnitudepruner (class in neural_compressor.experimental.pruner_legacy.magnitude)": [[327, "neural_compressor.experimental.pruner_legacy.magnitude.BasicMagnitudePruner"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[327, "module-neural_compressor.experimental.pruner_legacy.magnitude"]], "patternlockpruner (class in neural_compressor.experimental.pruner_legacy.pattern_lock)": [[328, "neural_compressor.experimental.pruner_legacy.pattern_lock.PatternLockPruner"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[328, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"]], "pruner (class in neural_compressor.experimental.pruner_legacy.pruner)": [[329, "neural_compressor.experimental.pruner_legacy.pruner.Pruner"]], "neural_compressor.experimental.pruner_legacy.pruner": [[329, "module-neural_compressor.experimental.pruner_legacy.pruner"]], "pruner_registry() (in module neural_compressor.experimental.pruner_legacy.pruner)": [[329, "neural_compressor.experimental.pruner_legacy.pruner.pruner_registry"]], "pruning (class in neural_compressor.experimental.pruning)": [[330, "neural_compressor.experimental.pruning.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning)": [[330, "neural_compressor.experimental.pruning.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning.pruning attribute)": [[330, "neural_compressor.experimental.pruning.Pruning.conf"]], "neural_compressor.experimental.pruning": [[330, "module-neural_compressor.experimental.pruning"]], "pruners (neural_compressor.experimental.pruning.pruning attribute)": [[330, "neural_compressor.experimental.pruning.Pruning.pruners"]], "neural_compressor.experimental.pruning_recipes": [[331, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[332, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "patterns (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[333, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS"]], "patternbase (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[333, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[333, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "pattern_registry() (in module neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[333, "neural_compressor.experimental.pruning_recipes.patterns.pattern.pattern_registry"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns.pattern.patterns attribute)": [[333, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS.patterns"]], "tilepatternbase (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[334, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase"]], "tilepattern_1x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[334, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x1"]], "tilepattern_1x16 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[334, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x16"]], "tilepattern_1x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[334, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x2"]], "tilepattern_2x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[334, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_2x2"]], "tilepattern_4x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[334, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_4x1"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[334, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "pruning (class in neural_compressor.experimental.pruning_v2)": [[335, "neural_compressor.experimental.pruning_v2.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning_v2)": [[335, "neural_compressor.experimental.pruning_v2.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning_v2.pruning attribute)": [[335, "neural_compressor.experimental.pruning_v2.Pruning.conf"]], "neural_compressor.experimental.pruning_v2": [[335, "module-neural_compressor.experimental.pruning_v2"]], "pruners (neural_compressor.experimental.pruning_v2.pruning attribute)": [[335, "neural_compressor.experimental.pruning_v2.Pruning.pruners"]], "neural_compressor.experimental.pytorch_pruner": [[336, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[337, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "m (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[338, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.M"]], "n (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[338, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.N"]], "pattern (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[338, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern"]], "patternninm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[338, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM"]], "patternnxm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[338, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM"]], "block_size (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm attribute)": [[338, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.block_size"]], "get_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[338, "neural_compressor.experimental.pytorch_pruner.patterns.get_pattern"]], "is_global (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[338, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.is_global"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[338, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "pattern (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[338, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.pattern"]], "register_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[338, "neural_compressor.experimental.pytorch_pruner.patterns.register_pattern"]], "check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[339, "neural_compressor.experimental.pytorch_pruner.prune_utils.check_config"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[339, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "parse_not_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[339, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_not_to_prune"]], "parse_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[339, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_to_prune"]], "process_and_check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[339, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_and_check_config"]], "process_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[339, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_config"]], "reset_non_value_to_default() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[339, "neural_compressor.experimental.pytorch_pruner.prune_utils.reset_non_value_to_default"]], "magnitudepruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[340, "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner"]], "patternlockpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[340, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner"]], "pruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[340, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner"]], "snipmomentumpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[340, "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner"]], "snippruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[340, "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner"]], "config (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[340, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.config"]], "current_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[340, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.current_sparsity_ratio"]], "end_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[340, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.end_step"]], "get_pruner() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[340, "neural_compressor.experimental.pytorch_pruner.pruner.get_pruner"]], "global_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[340, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.global_step"]], "masks (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[340, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.masks"]], "max_sparsity_ratio_per_layer (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[340, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.max_sparsity_ratio_per_layer"]], "modules (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[340, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.modules"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[340, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "pattern (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[340, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.pattern"]], "register_pruners() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[340, "neural_compressor.experimental.pytorch_pruner.pruner.register_pruners"]], "scheduler (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[340, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scheduler"]], "scores (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[340, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scores"]], "start_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[340, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.start_step"]], "target_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[340, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.target_sparsity_ratio"]], "update_frequency_on_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[340, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.update_frequency_on_step"]], "pruning (class in neural_compressor.experimental.pytorch_pruner.pruning)": [[341, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning"]], "config_file_path (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[341, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.config_file_path"]], "model (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[341, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.model"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[341, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "pruner_info (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[341, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruner_info"]], "pruners (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[341, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruners"]], "iterativescheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[342, "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[342, "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler"]], "scheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[342, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler"]], "config (neural_compressor.experimental.pytorch_pruner.scheduler.scheduler attribute)": [[342, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler.config"]], "get_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[342, "neural_compressor.experimental.pytorch_pruner.scheduler.get_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[342, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "register_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[342, "neural_compressor.experimental.pytorch_pruner.scheduler.register_scheduler"]], "quantization (class in neural_compressor.experimental.quantization)": [[343, "neural_compressor.experimental.quantization.Quantization"]], "neural_compressor.experimental.quantization": [[343, "module-neural_compressor.experimental.quantization"]], "scheduler (class in neural_compressor.experimental.scheduler)": [[344, "neural_compressor.experimental.scheduler.Scheduler"]], "neural_compressor.experimental.scheduler": [[344, "module-neural_compressor.experimental.scheduler"]], "automixedprecisiontunestrategy (class in neural_compressor.experimental.strategy.auto_mixed_precision)": [[345, "neural_compressor.experimental.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[345, "module-neural_compressor.experimental.strategy.auto_mixed_precision"]], "basictunestrategy (class in neural_compressor.experimental.strategy.basic)": [[346, "neural_compressor.experimental.strategy.basic.BasicTuneStrategy"]], "neural_compressor.experimental.strategy.basic": [[346, "module-neural_compressor.experimental.strategy.basic"]], "bayesianoptimization (class in neural_compressor.experimental.strategy.bayesian)": [[347, "neural_compressor.experimental.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.experimental.strategy.bayesian)": [[347, "neural_compressor.experimental.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.experimental.strategy.bayesian)": [[347, "neural_compressor.experimental.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.experimental.strategy.bayesian)": [[347, "neural_compressor.experimental.strategy.bayesian.acq_max"]], "neural_compressor.experimental.strategy.bayesian": [[347, "module-neural_compressor.experimental.strategy.bayesian"]], "exhaustivetunestrategy (class in neural_compressor.experimental.strategy.exhaustive)": [[348, "neural_compressor.experimental.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.experimental.strategy.exhaustive": [[348, "module-neural_compressor.experimental.strategy.exhaustive"]], "neural_compressor.experimental.strategy": [[349, "module-neural_compressor.experimental.strategy"]], "msetunestrategy (class in neural_compressor.experimental.strategy.mse)": [[350, "neural_compressor.experimental.strategy.mse.MSETuneStrategy"]], "neural_compressor.experimental.strategy.mse": [[350, "module-neural_compressor.experimental.strategy.mse"]], "mse_v2tunestrategy (class in neural_compressor.experimental.strategy.mse_v2)": [[351, "neural_compressor.experimental.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.experimental.strategy.mse_v2": [[351, "module-neural_compressor.experimental.strategy.mse_v2"]], "randomtunestrategy (class in neural_compressor.experimental.strategy.random)": [[352, "neural_compressor.experimental.strategy.random.RandomTuneStrategy"]], "neural_compressor.experimental.strategy.random": [[352, "module-neural_compressor.experimental.strategy.random"]], "tunestrategy (class in neural_compressor.experimental.strategy.strategy)": [[353, "neural_compressor.experimental.strategy.strategy.TuneStrategy"]], "neural_compressor.experimental.strategy.strategy": [[353, "module-neural_compressor.experimental.strategy.strategy"]], "strategy_registry() (in module neural_compressor.experimental.strategy.strategy)": [[353, "neural_compressor.experimental.strategy.strategy.strategy_registry"]], "neural_compressor.experimental.strategy.utils.constant": [[354, "module-neural_compressor.experimental.strategy.utils.constant"]], "neural_compressor.experimental.strategy.utils": [[355, "module-neural_compressor.experimental.strategy.utils"]], "fallbacktuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[356, "neural_compressor.experimental.strategy.utils.tuning_sampler.FallbackTuningSampler"]], "modelwisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[356, "neural_compressor.experimental.strategy.utils.tuning_sampler.ModelWiseTuningSampler"]], "optypewisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[356, "neural_compressor.experimental.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler"]], "opwisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[356, "neural_compressor.experimental.strategy.utils.tuning_sampler.OpWiseTuningSampler"]], "smoothquantsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[356, "neural_compressor.experimental.strategy.utils.tuning_sampler.SmoothQuantSampler"]], "tuningorder (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[356, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningOrder"]], "tuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[356, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningSampler"]], "tuningsamplerregistry (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[356, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningSamplerRegistry"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[356, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"]], "tuningitem (class in neural_compressor.experimental.strategy.utils.tuning_space)": [[357, "neural_compressor.experimental.strategy.utils.tuning_space.TuningItem"]], "tuningspace (class in neural_compressor.experimental.strategy.utils.tuning_space)": [[357, "neural_compressor.experimental.strategy.utils.tuning_space.TuningSpace"]], "initial_tuning_cfg_with_quant_mode() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[357, "neural_compressor.experimental.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[357, "module-neural_compressor.experimental.strategy.utils.tuning_space"]], "pattern_to_internal() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[357, "neural_compressor.experimental.strategy.utils.tuning_space.pattern_to_internal"]], "pattern_to_path() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[357, "neural_compressor.experimental.strategy.utils.tuning_space.pattern_to_path"]], "quant_mode_from_pattern() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[357, "neural_compressor.experimental.strategy.utils.tuning_space.quant_mode_from_pattern"]], "optuningconfig (class in neural_compressor.experimental.strategy.utils.tuning_structs)": [[358, "neural_compressor.experimental.strategy.utils.tuning_structs.OpTuningConfig"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[358, "module-neural_compressor.experimental.strategy.utils.tuning_structs"]], "ordereddefaultdict (class in neural_compressor.experimental.strategy.utils.utility)": [[359, "neural_compressor.experimental.strategy.utils.utility.OrderedDefaultDict"]], "extract_data_type() (in module neural_compressor.experimental.strategy.utils.utility)": [[359, "neural_compressor.experimental.strategy.utils.utility.extract_data_type"]], "get_adaptor_name() (in module neural_compressor.experimental.strategy.utils.utility)": [[359, "neural_compressor.experimental.strategy.utils.utility.get_adaptor_name"]], "neural_compressor.experimental.strategy.utils.utility": [[359, "module-neural_compressor.experimental.strategy.utils.utility"]], "reverted_data_type() (in module neural_compressor.experimental.strategy.utils.utility)": [[359, "neural_compressor.experimental.strategy.utils.utility.reverted_data_type"]], "neural_compressor": [[360, "module-neural_compressor"]], "bleu (class in neural_compressor.metric.bleu)": [[361, "neural_compressor.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.metric.bleu)": [[361, "neural_compressor.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.metric.bleu)": [[361, "neural_compressor.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.metric.bleu.bleu attribute)": [[361, "neural_compressor.metric.bleu.BLEU.labels"]], "neural_compressor.metric.bleu": [[361, "module-neural_compressor.metric.bleu"]], "nondigit_punct_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[361, "neural_compressor.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.metric.bleu.bleu attribute)": [[361, "neural_compressor.metric.bleu.BLEU.predictions"]], "punct_nondigit_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[361, "neural_compressor.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[361, "neural_compressor.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.metric.bleu_util)": [[362, "neural_compressor.metric.bleu_util.compute_bleu"]], "neural_compressor.metric.bleu_util": [[362, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[363, "module-neural_compressor.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.metric.coco_tools)": [[364, "neural_compressor.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.metric.coco_tools)": [[364, "neural_compressor.metric.coco_tools.COCOWrapper"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.metric.coco_tools)": [[364, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.metric.coco_tools)": [[364, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.metric.coco_tools)": [[364, "neural_compressor.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "dataset (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[364, "neural_compressor.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[364, "neural_compressor.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.metric.coco_tools": [[364, "module-neural_compressor.metric.coco_tools"]], "evaluate() (in module neural_compressor.metric.evaluate_squad)": [[365, "neural_compressor.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.metric.evaluate_squad)": [[365, "neural_compressor.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.metric.evaluate_squad)": [[365, "neural_compressor.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.evaluate_squad)": [[365, "neural_compressor.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.metric.evaluate_squad": [[365, "module-neural_compressor.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.metric.f1)": [[366, "neural_compressor.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.metric.f1)": [[366, "neural_compressor.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.f1)": [[366, "neural_compressor.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[366, "module-neural_compressor.metric.f1"]], "normalize_answer() (in module neural_compressor.metric.f1)": [[366, "neural_compressor.metric.f1.normalize_answer"]], "neural_compressor.metric": [[367, "module-neural_compressor.metric"]], "accuracy (class in neural_compressor.metric.metric)": [[368, "neural_compressor.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.metric.metric)": [[368, "neural_compressor.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.metric.metric)": [[368, "neural_compressor.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.metric.metric)": [[368, "neural_compressor.metric.metric.F1"]], "generaltopk (class in neural_compressor.metric.metric)": [[368, "neural_compressor.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.metric.metric)": [[368, "neural_compressor.metric.metric.Loss"]], "mae (class in neural_compressor.metric.metric)": [[368, "neural_compressor.metric.metric.MAE"]], "metrics (class in neural_compressor.metric.metric)": [[368, "neural_compressor.metric.metric.METRICS"]], "mse (class in neural_compressor.metric.metric)": [[368, "neural_compressor.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.metric.metric)": [[368, "neural_compressor.metric.metric.MXNetMetrics"]], "metric (class in neural_compressor.metric.metric)": [[368, "neural_compressor.metric.metric.Metric"]], "onnxrtglue (class in neural_compressor.metric.metric)": [[368, "neural_compressor.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.metric.metric)": [[368, "neural_compressor.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.metric.metric)": [[368, "neural_compressor.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.metric.metric)": [[368, "neural_compressor.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.metric.metric)": [[368, "neural_compressor.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.metric.metric)": [[368, "neural_compressor.metric.metric.RMSE"]], "roc (class in neural_compressor.metric.metric)": [[368, "neural_compressor.metric.metric.ROC"]], "squadf1 (class in neural_compressor.metric.metric)": [[368, "neural_compressor.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.metric.metric)": [[368, "neural_compressor.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.metric.metric)": [[368, "neural_compressor.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.metric.metric)": [[368, "neural_compressor.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.metric.metric)": [[368, "neural_compressor.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.metric.metric)": [[368, "neural_compressor.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.metric.metric)": [[368, "neural_compressor.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.metric.metric)": [[368, "neural_compressor.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.metric.metric)": [[368, "neural_compressor.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.metric.metric.mae attribute)": [[368, "neural_compressor.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.metric.metric.mse attribute)": [[368, "neural_compressor.metric.metric.MSE.compare_label"]], "k (neural_compressor.metric.metric.generaltopk attribute)": [[368, "neural_compressor.metric.metric.GeneralTopK.k"]], "k (neural_compressor.metric.metric.tensorflowtopk attribute)": [[368, "neural_compressor.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.metric.metric.accuracy attribute)": [[368, "neural_compressor.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.metric.metric.mae attribute)": [[368, "neural_compressor.metric.metric.MAE.label_list"]], "label_list (neural_compressor.metric.metric.mse attribute)": [[368, "neural_compressor.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.metric.metric)": [[368, "neural_compressor.metric.metric.mIOU"]], "metric_registry() (in module neural_compressor.metric.metric)": [[368, "neural_compressor.metric.metric.metric_registry"]], "metrics (neural_compressor.metric.metric.metrics attribute)": [[368, "neural_compressor.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.metric.metric.mxnetmetrics attribute)": [[368, "neural_compressor.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtitmetrics attribute)": [[368, "neural_compressor.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtqlmetrics attribute)": [[368, "neural_compressor.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.metric.metric.pytorchmetrics attribute)": [[368, "neural_compressor.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.metric.metric.tensorflowmetrics attribute)": [[368, "neural_compressor.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.metric.metric.rmse attribute)": [[368, "neural_compressor.metric.metric.RMSE.mse"]], "neural_compressor.metric.metric": [[368, "module-neural_compressor.metric.metric"]], "num_correct (neural_compressor.metric.metric.generaltopk attribute)": [[368, "neural_compressor.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.metric.metric.tensorflowtopk attribute)": [[368, "neural_compressor.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.metric.metric.generaltopk attribute)": [[368, "neural_compressor.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.metric.metric.tensorflowtopk attribute)": [[368, "neural_compressor.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.metric.metric.accuracy attribute)": [[368, "neural_compressor.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.metric.metric.mae attribute)": [[368, "neural_compressor.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.metric.metric.mse attribute)": [[368, "neural_compressor.metric.metric.MSE.pred_list"]], "register_customer_metric() (in module neural_compressor.metric.metric)": [[368, "neural_compressor.metric.metric.register_customer_metric"]], "sample (neural_compressor.metric.metric.accuracy attribute)": [[368, "neural_compressor.metric.metric.Accuracy.sample"]], "sample (neural_compressor.metric.metric.loss attribute)": [[368, "neural_compressor.metric.metric.Loss.sample"]], "sum (neural_compressor.metric.metric.loss attribute)": [[368, "neural_compressor.metric.metric.Loss.sum"]], "fit() (in module neural_compressor.mix_precision)": [[369, "neural_compressor.mix_precision.fit"]], "neural_compressor.mix_precision": [[369, "module-neural_compressor.mix_precision"]], "basemodel (class in neural_compressor.model.base_model)": [[370, "neural_compressor.model.base_model.BaseModel"]], "neural_compressor.model.base_model": [[370, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[371, "module-neural_compressor.model"]], "kerasmodel (class in neural_compressor.model.keras_model)": [[372, "neural_compressor.model.keras_model.KerasModel"]], "neural_compressor.model.keras_model": [[372, "module-neural_compressor.model.keras_model"]], "model (class in neural_compressor.model.model)": [[373, "neural_compressor.model.model.Model"]], "get_model_fwk_name() (in module neural_compressor.model.model)": [[373, "neural_compressor.model.model.get_model_fwk_name"]], "neural_compressor.model.model": [[373, "module-neural_compressor.model.model"]], "mxnetmodel (class in neural_compressor.model.mxnet_model)": [[374, "neural_compressor.model.mxnet_model.MXNetModel"]], "neural_compressor.model.mxnet_model": [[374, "module-neural_compressor.model.mxnet_model"]], "tfslimnetsfactory (class in neural_compressor.model.nets_factory)": [[375, "neural_compressor.model.nets_factory.TFSlimNetsFactory"]], "neural_compressor.model.nets_factory": [[375, "module-neural_compressor.model.nets_factory"]], "onnxmodel (class in neural_compressor.model.onnx_model)": [[376, "neural_compressor.model.onnx_model.ONNXModel"]], "neural_compressor.model.onnx_model": [[376, "module-neural_compressor.model.onnx_model"]], "tensorflowbasemodel (class in neural_compressor.model.tensorflow_model)": [[377, "neural_compressor.model.tensorflow_model.TensorflowBaseModel"]], "tensorflowcheckpointmodel (class in neural_compressor.model.tensorflow_model)": [[377, "neural_compressor.model.tensorflow_model.TensorflowCheckpointModel"]], "tensorflowllmmodel (class in neural_compressor.model.tensorflow_model)": [[377, "neural_compressor.model.tensorflow_model.TensorflowLLMModel"]], "tensorflowmodel (class in neural_compressor.model.tensorflow_model)": [[377, "neural_compressor.model.tensorflow_model.TensorflowModel"]], "tensorflowqatmodel (class in neural_compressor.model.tensorflow_model)": [[377, "neural_compressor.model.tensorflow_model.TensorflowQATModel"]], "tensorflowsavedmodelmodel (class in neural_compressor.model.tensorflow_model)": [[377, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel"]], "checkpoint_session() (in module neural_compressor.model.tensorflow_model)": [[377, "neural_compressor.model.tensorflow_model.checkpoint_session"]], "estimator_session() (in module neural_compressor.model.tensorflow_model)": [[377, "neural_compressor.model.tensorflow_model.estimator_session"]], "frozen_pb_session() (in module neural_compressor.model.tensorflow_model)": [[377, "neural_compressor.model.tensorflow_model.frozen_pb_session"]], "get_model_type() (in module neural_compressor.model.tensorflow_model)": [[377, "neural_compressor.model.tensorflow_model.get_model_type"]], "graph_def_session() (in module neural_compressor.model.tensorflow_model)": [[377, "neural_compressor.model.tensorflow_model.graph_def_session"]], "graph_session() (in module neural_compressor.model.tensorflow_model)": [[377, "neural_compressor.model.tensorflow_model.graph_session"]], "keras_session() (in module neural_compressor.model.tensorflow_model)": [[377, "neural_compressor.model.tensorflow_model.keras_session"]], "load_saved_model() (in module neural_compressor.model.tensorflow_model)": [[377, "neural_compressor.model.tensorflow_model.load_saved_model"]], "neural_compressor.model.tensorflow_model": [[377, "module-neural_compressor.model.tensorflow_model"]], "saved_model_session() (in module neural_compressor.model.tensorflow_model)": [[377, "neural_compressor.model.tensorflow_model.saved_model_session"]], "slim_session() (in module neural_compressor.model.tensorflow_model)": [[377, "neural_compressor.model.tensorflow_model.slim_session"]], "validate_and_inference_input_output() (in module neural_compressor.model.tensorflow_model)": [[377, "neural_compressor.model.tensorflow_model.validate_and_inference_input_output"]], "validate_graph_node() (in module neural_compressor.model.tensorflow_model)": [[377, "neural_compressor.model.tensorflow_model.validate_graph_node"]], "ipexmodel (class in neural_compressor.model.torch_model)": [[378, "neural_compressor.model.torch_model.IPEXModel"]], "pytorchbasemodel (class in neural_compressor.model.torch_model)": [[378, "neural_compressor.model.torch_model.PyTorchBaseModel"]], "pytorchfxmodel (class in neural_compressor.model.torch_model)": [[378, "neural_compressor.model.torch_model.PyTorchFXModel"]], "pytorchmodel (class in neural_compressor.model.torch_model)": [[378, "neural_compressor.model.torch_model.PyTorchModel"]], "neural_compressor.model.torch_model": [[378, "module-neural_compressor.model.torch_model"]], "accuracy (class in neural_compressor.objective)": [[379, "neural_compressor.objective.Accuracy"]], "footprint (class in neural_compressor.objective)": [[379, "neural_compressor.objective.Footprint"]], "modelsize (class in neural_compressor.objective)": [[379, "neural_compressor.objective.ModelSize"]], "multiobjective (class in neural_compressor.objective)": [[379, "neural_compressor.objective.MultiObjective"]], "objective (class in neural_compressor.objective)": [[379, "neural_compressor.objective.Objective"]], "performance (class in neural_compressor.objective)": [[379, "neural_compressor.objective.Performance"]], "neural_compressor.objective": [[379, "module-neural_compressor.objective"]], "objective_custom_registry() (in module neural_compressor.objective)": [[379, "neural_compressor.objective.objective_custom_registry"]], "objective_registry() (in module neural_compressor.objective)": [[379, "neural_compressor.objective.objective_registry"]], "neural_compressor.profiling": [[380, "module-neural_compressor.profiling"]], "parserfactory (class in neural_compressor.profiling.parser.factory)": [[381, "neural_compressor.profiling.parser.factory.ParserFactory"]], "neural_compressor.profiling.parser.factory": [[381, "module-neural_compressor.profiling.parser.factory"]], "neural_compressor.profiling.parser": [[382, "module-neural_compressor.profiling.parser"]], "onnxrtparserfactory (class in neural_compressor.profiling.parser.onnx_parser.factory)": [[383, "neural_compressor.profiling.parser.onnx_parser.factory.OnnxrtParserFactory"]], "neural_compressor.profiling.parser.onnx_parser.factory": [[383, "module-neural_compressor.profiling.parser.onnx_parser.factory"]], "neural_compressor.profiling.parser.onnx_parser": [[384, "module-neural_compressor.profiling.parser.onnx_parser"]], "onnxprofilingparser (class in neural_compressor.profiling.parser.onnx_parser.parser)": [[385, "neural_compressor.profiling.parser.onnx_parser.parser.OnnxProfilingParser"]], "neural_compressor.profiling.parser.onnx_parser.parser": [[385, "module-neural_compressor.profiling.parser.onnx_parser.parser"]], "profilingparser (class in neural_compressor.profiling.parser.parser)": [[386, "neural_compressor.profiling.parser.parser.ProfilingParser"]], "neural_compressor.profiling.parser.parser": [[386, "module-neural_compressor.profiling.parser.parser"]], "profilingresult (class in neural_compressor.profiling.parser.result)": [[387, "neural_compressor.profiling.parser.result.ProfilingResult"]], "neural_compressor.profiling.parser.result": [[387, "module-neural_compressor.profiling.parser.result"]], "tensorflowparserfactory (class in neural_compressor.profiling.parser.tensorflow_parser.factory)": [[388, "neural_compressor.profiling.parser.tensorflow_parser.factory.TensorFlowParserFactory"]], "neural_compressor.profiling.parser.tensorflow_parser.factory": [[388, "module-neural_compressor.profiling.parser.tensorflow_parser.factory"]], "neural_compressor.profiling.parser.tensorflow_parser": [[389, "module-neural_compressor.profiling.parser.tensorflow_parser"]], "tensorflowprofilingparser (class in neural_compressor.profiling.parser.tensorflow_parser.parser)": [[390, "neural_compressor.profiling.parser.tensorflow_parser.parser.TensorFlowProfilingParser"]], "neural_compressor.profiling.parser.tensorflow_parser.parser": [[390, "module-neural_compressor.profiling.parser.tensorflow_parser.parser"]], "profilerfactory (class in neural_compressor.profiling.profiler.factory)": [[391, "neural_compressor.profiling.profiler.factory.ProfilerFactory"]], "neural_compressor.profiling.profiler.factory": [[391, "module-neural_compressor.profiling.profiler.factory"]], "neural_compressor.profiling.profiler": [[392, "module-neural_compressor.profiling.profiler"]], "profilerfactory (class in neural_compressor.profiling.profiler.onnxrt_profiler.factory)": [[393, "neural_compressor.profiling.profiler.onnxrt_profiler.factory.ProfilerFactory"]], "neural_compressor.profiling.profiler.onnxrt_profiler.factory": [[393, "module-neural_compressor.profiling.profiler.onnxrt_profiler.factory"]], "neural_compressor.profiling.profiler.onnxrt_profiler": [[394, "module-neural_compressor.profiling.profiler.onnxrt_profiler"]], "profiler (class in neural_compressor.profiling.profiler.onnxrt_profiler.profiler)": [[395, "neural_compressor.profiling.profiler.onnxrt_profiler.profiler.Profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.profiler": [[395, "module-neural_compressor.profiling.profiler.onnxrt_profiler.profiler"]], "create_onnx_config() (in module neural_compressor.profiling.profiler.onnxrt_profiler.utils)": [[396, "neural_compressor.profiling.profiler.onnxrt_profiler.utils.create_onnx_config"]], "neural_compressor.profiling.profiler.onnxrt_profiler.utils": [[396, "module-neural_compressor.profiling.profiler.onnxrt_profiler.utils"]], "profiler (class in neural_compressor.profiling.profiler.profiler)": [[397, "neural_compressor.profiling.profiler.profiler.Profiler"]], "neural_compressor.profiling.profiler.profiler": [[397, "module-neural_compressor.profiling.profiler.profiler"]], "profilerfactory (class in neural_compressor.profiling.profiler.tensorflow_profiler.factory)": [[398, "neural_compressor.profiling.profiler.tensorflow_profiler.factory.ProfilerFactory"]], "neural_compressor.profiling.profiler.tensorflow_profiler.factory": [[398, "module-neural_compressor.profiling.profiler.tensorflow_profiler.factory"]], "neural_compressor.profiling.profiler.tensorflow_profiler": [[399, "module-neural_compressor.profiling.profiler.tensorflow_profiler"]], "profiler (class in neural_compressor.profiling.profiler.tensorflow_profiler.profiler)": [[400, "neural_compressor.profiling.profiler.tensorflow_profiler.profiler.Profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.profiler": [[400, "module-neural_compressor.profiling.profiler.tensorflow_profiler.profiler"]], "create_tf_config() (in module neural_compressor.profiling.profiler.tensorflow_profiler.utils)": [[401, "neural_compressor.profiling.profiler.tensorflow_profiler.utils.create_tf_config"]], "delete_assign() (in module neural_compressor.profiling.profiler.tensorflow_profiler.utils)": [[401, "neural_compressor.profiling.profiler.tensorflow_profiler.utils.delete_assign"]], "neural_compressor.profiling.profiler.tensorflow_profiler.utils": [[401, "module-neural_compressor.profiling.profiler.tensorflow_profiler.utils"]], "set_eager_execution() (in module neural_compressor.profiling.profiler.tensorflow_profiler.utils)": [[401, "neural_compressor.profiling.profiler.tensorflow_profiler.utils.set_eager_execution"]], "fit() (in module neural_compressor.quantization)": [[402, "neural_compressor.quantization.fit"]], "neural_compressor.quantization": [[402, "module-neural_compressor.quantization"]], "autotunestrategy (class in neural_compressor.strategy.auto)": [[403, "neural_compressor.strategy.auto.AutoTuneStrategy"]], "neural_compressor.strategy.auto": [[403, "module-neural_compressor.strategy.auto"]], "automixedprecisiontunestrategy (class in neural_compressor.strategy.auto_mixed_precision)": [[404, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[404, "module-neural_compressor.strategy.auto_mixed_precision"]], "basictunestrategy (class in neural_compressor.strategy.basic)": [[405, "neural_compressor.strategy.basic.BasicTuneStrategy"]], "neural_compressor.strategy.basic": [[405, "module-neural_compressor.strategy.basic"]], "bayesianoptimization (class in neural_compressor.strategy.bayesian)": [[406, "neural_compressor.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.strategy.bayesian)": [[406, "neural_compressor.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.strategy.bayesian)": [[406, "neural_compressor.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.strategy.bayesian)": [[406, "neural_compressor.strategy.bayesian.acq_max"]], "neural_compressor.strategy.bayesian": [[406, "module-neural_compressor.strategy.bayesian"]], "conservativetunestrategy (class in neural_compressor.strategy.conservative)": [[407, "neural_compressor.strategy.conservative.ConservativeTuneStrategy"]], "neural_compressor.strategy.conservative": [[407, "module-neural_compressor.strategy.conservative"]], "exhaustivetunestrategy (class in neural_compressor.strategy.exhaustive)": [[408, "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[408, "module-neural_compressor.strategy.exhaustive"]], "hawq_v2tunestrategy (class in neural_compressor.strategy.hawq_v2)": [[409, "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[409, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[410, "module-neural_compressor.strategy"]], "msetunestrategy (class in neural_compressor.strategy.mse)": [[411, "neural_compressor.strategy.mse.MSETuneStrategy"]], "neural_compressor.strategy.mse": [[411, "module-neural_compressor.strategy.mse"]], "mse_v2tunestrategy (class in neural_compressor.strategy.mse_v2)": [[412, "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.strategy.mse_v2": [[412, "module-neural_compressor.strategy.mse_v2"]], "randomtunestrategy (class in neural_compressor.strategy.random)": [[413, "neural_compressor.strategy.random.RandomTuneStrategy"]], "neural_compressor.strategy.random": [[413, "module-neural_compressor.strategy.random"]], "tunestrategy (class in neural_compressor.strategy.strategy)": [[414, "neural_compressor.strategy.strategy.TuneStrategy"]], "tunestrategymeta (class in neural_compressor.strategy.strategy)": [[414, "neural_compressor.strategy.strategy.TuneStrategyMeta"]], "neural_compressor.strategy.strategy": [[414, "module-neural_compressor.strategy.strategy"]], "strategy_registry() (in module neural_compressor.strategy.strategy)": [[414, "neural_compressor.strategy.strategy.strategy_registry"]], "neural_compressor.strategy.utils.constant": [[415, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[416, "module-neural_compressor.strategy.utils"]], "blockfallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[417, "neural_compressor.strategy.utils.tuning_sampler.BlockFallbackTuningSampler"]], "fallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[417, "neural_compressor.strategy.utils.tuning_sampler.FallbackTuningSampler"]], "lowerbitssampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[417, "neural_compressor.strategy.utils.tuning_sampler.LowerBitsSampler"]], "modelwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[417, "neural_compressor.strategy.utils.tuning_sampler.ModelWiseTuningSampler"]], "optypewisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[417, "neural_compressor.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler"]], "opwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[417, "neural_compressor.strategy.utils.tuning_sampler.OpWiseTuningSampler"]], "smoothquantsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[417, "neural_compressor.strategy.utils.tuning_sampler.SmoothQuantSampler"]], "tuningorder (class in neural_compressor.strategy.utils.tuning_sampler)": [[417, "neural_compressor.strategy.utils.tuning_sampler.TuningOrder"]], "tuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[417, "neural_compressor.strategy.utils.tuning_sampler.TuningSampler"]], "weightonlyquantsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[417, "neural_compressor.strategy.utils.tuning_sampler.WeightOnlyQuantSampler"]], "neural_compressor.strategy.utils.tuning_sampler": [[417, "module-neural_compressor.strategy.utils.tuning_sampler"]], "tuningitem (class in neural_compressor.strategy.utils.tuning_space)": [[418, "neural_compressor.strategy.utils.tuning_space.TuningItem"]], "tuningspace (class in neural_compressor.strategy.utils.tuning_space)": [[418, "neural_compressor.strategy.utils.tuning_space.TuningSpace"]], "initial_tuning_cfg_with_quant_mode() (in module neural_compressor.strategy.utils.tuning_space)": [[418, "neural_compressor.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode"]], "neural_compressor.strategy.utils.tuning_space": [[418, "module-neural_compressor.strategy.utils.tuning_space"]], "pattern_to_internal() (in module neural_compressor.strategy.utils.tuning_space)": [[418, "neural_compressor.strategy.utils.tuning_space.pattern_to_internal"]], "pattern_to_path() (in module neural_compressor.strategy.utils.tuning_space)": [[418, "neural_compressor.strategy.utils.tuning_space.pattern_to_path"]], "quant_mode_from_pattern() (in module neural_compressor.strategy.utils.tuning_space)": [[418, "neural_compressor.strategy.utils.tuning_space.quant_mode_from_pattern"]], "optuningconfig (class in neural_compressor.strategy.utils.tuning_structs)": [[419, "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig"]], "neural_compressor.strategy.utils.tuning_structs": [[419, "module-neural_compressor.strategy.utils.tuning_structs"]], "classregister (class in neural_compressor.strategy.utils.utility)": [[420, "neural_compressor.strategy.utils.utility.ClassRegister"]], "ordereddefaultdict (class in neural_compressor.strategy.utils.utility)": [[420, "neural_compressor.strategy.utils.utility.OrderedDefaultDict"]], "quantoptions (class in neural_compressor.strategy.utils.utility)": [[420, "neural_compressor.strategy.utils.utility.QuantOptions"]], "quanttype (class in neural_compressor.strategy.utils.utility)": [[420, "neural_compressor.strategy.utils.utility.QuantType"]], "build_slave_faker_model() (in module neural_compressor.strategy.utils.utility)": [[420, "neural_compressor.strategy.utils.utility.build_slave_faker_model"]], "extract_data_type() (in module neural_compressor.strategy.utils.utility)": [[420, "neural_compressor.strategy.utils.utility.extract_data_type"]], "get_adaptor_name() (in module neural_compressor.strategy.utils.utility)": [[420, "neural_compressor.strategy.utils.utility.get_adaptor_name"]], "neural_compressor.strategy.utils.utility": [[420, "module-neural_compressor.strategy.utils.utility"]], "preprocess_user_cfg() (in module neural_compressor.strategy.utils.utility)": [[420, "neural_compressor.strategy.utils.utility.preprocess_user_cfg"]], "reverted_data_type() (in module neural_compressor.strategy.utils.utility)": [[420, "neural_compressor.strategy.utils.utility.reverted_data_type"]], "exampleclass (class in neural_compressor.template.api_doc_example)": [[421, "neural_compressor.template.api_doc_example.ExampleClass"]], "attr1 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[421, "neural_compressor.template.api_doc_example.ExampleClass.attr1"]], "attr2 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[421, "neural_compressor.template.api_doc_example.ExampleClass.attr2"]], "attr5 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[421, "neural_compressor.template.api_doc_example.ExampleClass.attr5"]], "attribute1 (in module neural_compressor.template.api_doc_example)": [[421, "neural_compressor.template.api_doc_example.attribute1"]], "function1() (in module neural_compressor.template.api_doc_example)": [[421, "neural_compressor.template.api_doc_example.function1"]], "function2() (in module neural_compressor.template.api_doc_example)": [[421, "neural_compressor.template.api_doc_example.function2"]], "function3() (in module neural_compressor.template.api_doc_example)": [[421, "neural_compressor.template.api_doc_example.function3"]], "generator1() (in module neural_compressor.template.api_doc_example)": [[421, "neural_compressor.template.api_doc_example.generator1"]], "module_debug_level1 (in module neural_compressor.template.api_doc_example)": [[421, "neural_compressor.template.api_doc_example.module_debug_level1"]], "neural_compressor.template.api_doc_example": [[421, "module-neural_compressor.template.api_doc_example"]], "neural_compressor.template": [[422, "module-neural_compressor.template"]], "neural_compressor.tensorflow.algorithms": [[423, "module-neural_compressor.tensorflow.algorithms"]], "neural_compressor.tensorflow.algorithms.static_quantize": [[424, "module-neural_compressor.tensorflow.algorithms.static_quantize"]], "kerasadaptor (class in neural_compressor.tensorflow.algorithms.static_quantize.keras)": [[425, "neural_compressor.tensorflow.algorithms.static_quantize.keras.KerasAdaptor"]], "kerasquery (class in neural_compressor.tensorflow.algorithms.static_quantize.keras)": [[425, "neural_compressor.tensorflow.algorithms.static_quantize.keras.KerasQuery"]], "neural_compressor.tensorflow.algorithms.static_quantize.keras": [[425, "module-neural_compressor.tensorflow.algorithms.static_quantize.keras"]], "neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.conv2d": [[426, "module-neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.conv2d"]], "neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.dense": [[427, "module-neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.dense"]], "neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.depthwise_conv2d": [[428, "module-neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.depthwise_conv2d"]], "neural_compressor.tensorflow.algorithms.static_quantize.keras_utils": [[429, "module-neural_compressor.tensorflow.algorithms.static_quantize.keras_utils"]], "neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.pool2d": [[430, "module-neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.pool2d"]], "neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.quantizer": [[431, "module-neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.quantizer"]], "neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.separable_conv2d": [[432, "module-neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.separable_conv2d"]], "neural_compressor.tensorflow.algorithms.static_quantize.quantize_entry": [[433, "module-neural_compressor.tensorflow.algorithms.static_quantize.quantize_entry"]], "parse_to_keras_tune_cfg() (in module neural_compressor.tensorflow.algorithms.static_quantize.quantize_entry)": [[433, "neural_compressor.tensorflow.algorithms.static_quantize.quantize_entry.parse_to_keras_tune_cfg"]], "static_quantize_entry() (in module neural_compressor.tensorflow.algorithms.static_quantize.quantize_entry)": [[433, "neural_compressor.tensorflow.algorithms.static_quantize.quantize_entry.static_quantize_entry"]], "update_config() (in module neural_compressor.tensorflow.algorithms.static_quantize.quantize_entry)": [[433, "neural_compressor.tensorflow.algorithms.static_quantize.quantize_entry.update_config"]], "neural_compressor.tensorflow": [[434, "module-neural_compressor.tensorflow"]], "backend (class in neural_compressor.tensorflow.quantization.config)": [[435, "neural_compressor.tensorflow.quantization.config.Backend"]], "staticquantconfig (class in neural_compressor.tensorflow.quantization.config)": [[435, "neural_compressor.tensorflow.quantization.config.StaticQuantConfig"]], "get_all_registered_configs() (in module neural_compressor.tensorflow.quantization.config)": [[435, "neural_compressor.tensorflow.quantization.config.get_all_registered_configs"]], "get_default_static_quant_config() (in module neural_compressor.tensorflow.quantization.config)": [[435, "neural_compressor.tensorflow.quantization.config.get_default_static_quant_config"]], "neural_compressor.tensorflow.quantization.config": [[435, "module-neural_compressor.tensorflow.quantization.config"]], "parse_config_from_dict() (in module neural_compressor.tensorflow.quantization.config)": [[435, "neural_compressor.tensorflow.quantization.config.parse_config_from_dict"]], "neural_compressor.tensorflow.quantization": [[436, "module-neural_compressor.tensorflow.quantization"]], "neural_compressor.tensorflow.quantization.quantize": [[437, "module-neural_compressor.tensorflow.quantization.quantize"]], "quantize_model() (in module neural_compressor.tensorflow.quantization.quantize)": [[437, "neural_compressor.tensorflow.quantization.quantize.quantize_model"]], "deep_get() (in module neural_compressor.tensorflow.utils)": [[438, "neural_compressor.tensorflow.utils.deep_get"]], "dump_elapsed_time() (in module neural_compressor.tensorflow.utils)": [[438, "neural_compressor.tensorflow.utils.dump_elapsed_time"]], "neural_compressor.tensorflow.utils": [[438, "module-neural_compressor.tensorflow.utils"]], "register_algo() (in module neural_compressor.tensorflow.utils)": [[438, "neural_compressor.tensorflow.utils.register_algo"]], "version1_gte_version2() (in module neural_compressor.tensorflow.utils)": [[438, "neural_compressor.tensorflow.utils.version1_gte_version2"]], "neural_compressor.torch.algorithms": [[439, "module-neural_compressor.torch.algorithms"]], "gptq (class in neural_compressor.torch.algorithms.weight_only.gptq)": [[440, "neural_compressor.torch.algorithms.weight_only.gptq.GPTQ"]], "gptquantizer (class in neural_compressor.torch.algorithms.weight_only.gptq)": [[440, "neural_compressor.torch.algorithms.weight_only.gptq.GPTQuantizer"]], "apply_gptq_quantize() (in module neural_compressor.torch.algorithms.weight_only.gptq)": [[440, "neural_compressor.torch.algorithms.weight_only.gptq.apply_gptq_quantize"]], "find_layers() (in module neural_compressor.torch.algorithms.weight_only.gptq)": [[440, "neural_compressor.torch.algorithms.weight_only.gptq.find_layers"]], "find_layers_name() (in module neural_compressor.torch.algorithms.weight_only.gptq)": [[440, "neural_compressor.torch.algorithms.weight_only.gptq.find_layers_name"]], "is_leaf() (in module neural_compressor.torch.algorithms.weight_only.gptq)": [[440, "neural_compressor.torch.algorithms.weight_only.gptq.is_leaf"]], "log_quantizable_layers_per_transformer() (in module neural_compressor.torch.algorithms.weight_only.gptq)": [[440, "neural_compressor.torch.algorithms.weight_only.gptq.log_quantizable_layers_per_transformer"]], "neural_compressor.torch.algorithms.weight_only.gptq": [[440, "module-neural_compressor.torch.algorithms.weight_only.gptq"]], "quantize() (in module neural_compressor.torch.algorithms.weight_only.gptq)": [[440, "neural_compressor.torch.algorithms.weight_only.gptq.quantize"]], "trace_gptq_target_blocks() (in module neural_compressor.torch.algorithms.weight_only.gptq)": [[440, "neural_compressor.torch.algorithms.weight_only.gptq.trace_gptq_target_blocks"]], "neural_compressor.torch.algorithms.weight_only": [[441, "module-neural_compressor.torch.algorithms.weight_only"]], "neural_compressor.torch.algorithms.weight_only.rtn": [[442, "module-neural_compressor.torch.algorithms.weight_only.rtn"]], "qdq_weight_actor() (in module neural_compressor.torch.algorithms.weight_only.rtn)": [[442, "neural_compressor.torch.algorithms.weight_only.rtn.qdq_weight_actor"]], "qdq_weight_asym() (in module neural_compressor.torch.algorithms.weight_only.rtn)": [[442, "neural_compressor.torch.algorithms.weight_only.rtn.qdq_weight_asym"]], "qdq_weight_sym() (in module neural_compressor.torch.algorithms.weight_only.rtn)": [[442, "neural_compressor.torch.algorithms.weight_only.rtn.qdq_weight_sym"]], "quant_weight() (in module neural_compressor.torch.algorithms.weight_only.rtn)": [[442, "neural_compressor.torch.algorithms.weight_only.rtn.quant_weight"]], "quant_weight_w_scale() (in module neural_compressor.torch.algorithms.weight_only.rtn)": [[442, "neural_compressor.torch.algorithms.weight_only.rtn.quant_weight_w_scale"]], "quantize_4bit() (in module neural_compressor.torch.algorithms.weight_only.rtn)": [[442, "neural_compressor.torch.algorithms.weight_only.rtn.quantize_4bit"]], "rtn_quantize() (in module neural_compressor.torch.algorithms.weight_only.rtn)": [[442, "neural_compressor.torch.algorithms.weight_only.rtn.rtn_quantize"]], "search_clip() (in module neural_compressor.torch.algorithms.weight_only.rtn)": [[442, "neural_compressor.torch.algorithms.weight_only.rtn.search_clip"]], "neural_compressor.torch.algorithms.weight_only_algos": [[443, "module-neural_compressor.torch.algorithms.weight_only_algos"]], "rtn_quantize_entry() (in module neural_compressor.torch.algorithms.weight_only_algos)": [[443, "neural_compressor.torch.algorithms.weight_only_algos.rtn_quantize_entry"]], "autocast (class in neural_compressor.torch.amp.autocast)": [[444, "neural_compressor.torch.amp.autocast.autocast"]], "neural_compressor.torch.amp.autocast": [[444, "module-neural_compressor.torch.amp.autocast"]], "neural_compressor.torch.amp.fp8.functions": [[445, "module-neural_compressor.torch.amp.fp8.functions"]], "neural_compressor.torch.amp.fp8": [[446, "module-neural_compressor.torch.amp.fp8"]], "neural_compressor.torch.amp": [[447, "module-neural_compressor.torch.amp"]], "neural_compressor.torch": [[448, "module-neural_compressor.torch"]], "autotune() (in module neural_compressor.torch.quantization.autotune)": [[449, "neural_compressor.torch.quantization.autotune.autotune"]], "neural_compressor.torch.quantization.autotune": [[449, "module-neural_compressor.torch.quantization.autotune"]], "backend (class in neural_compressor.torch.quantization.config)": [[450, "neural_compressor.torch.quantization.config.Backend"]], "fp8qconfig (class in neural_compressor.torch.quantization.config)": [[450, "neural_compressor.torch.quantization.config.FP8QConfig"]], "gptqconfig (class in neural_compressor.torch.quantization.config)": [[450, "neural_compressor.torch.quantization.config.GPTQConfig"]], "rtnconfig (class in neural_compressor.torch.quantization.config)": [[450, "neural_compressor.torch.quantization.config.RTNConfig"]], "get_default_gptq_config() (in module neural_compressor.torch.quantization.config)": [[450, "neural_compressor.torch.quantization.config.get_default_gptq_config"]], "get_default_rtn_config() (in module neural_compressor.torch.quantization.config)": [[450, "neural_compressor.torch.quantization.config.get_default_rtn_config"]], "neural_compressor.torch.quantization.config": [[450, "module-neural_compressor.torch.quantization.config"]], "neural_compressor.torch.quantization.fp8": [[451, "module-neural_compressor.torch.quantization.fp8"]], "neural_compressor.torch.quantization.fp8.modules": [[452, "module-neural_compressor.torch.quantization.fp8.modules"]], "neural_compressor.torch.quantization.fp8.observer": [[453, "module-neural_compressor.torch.quantization.fp8.observer"]], "neural_compressor.torch.quantization.fp8.quantization_impl": [[454, "module-neural_compressor.torch.quantization.fp8.quantization_impl"]], "neural_compressor.torch.quantization": [[455, "module-neural_compressor.torch.quantization"]], "fakeaffinetensorquantfunction (class in neural_compressor.torch.quantization.layers)": [[456, "neural_compressor.torch.quantization.layers.FakeAffineTensorQuantFunction"]], "mullinear (class in neural_compressor.torch.quantization.layers)": [[456, "neural_compressor.torch.quantization.layers.MulLinear"]], "teqlinearfakequant (class in neural_compressor.torch.quantization.layers)": [[456, "neural_compressor.torch.quantization.layers.TEQLinearFakeQuant"]], "neural_compressor.torch.quantization.layers": [[456, "module-neural_compressor.torch.quantization.layers"]], "neural_compressor.torch.quantization.quantize": [[457, "module-neural_compressor.torch.quantization.quantize"]], "quantize() (in module neural_compressor.torch.quantization.quantize)": [[457, "neural_compressor.torch.quantization.quantize.quantize"]], "quantize_dynamic() (in module neural_compressor.torch.quantization.quantize)": [[457, "neural_compressor.torch.quantization.quantize.quantize_dynamic"]], "neural_compressor.torch.utils.constants": [[458, "module-neural_compressor.torch.utils.constants"]], "neural_compressor.torch.utils": [[459, "module-neural_compressor.torch.utils"]], "fetch_module() (in module neural_compressor.torch.utils.utility)": [[460, "neural_compressor.torch.utils.utility.fetch_module"]], "neural_compressor.torch.utils.utility": [[460, "module-neural_compressor.torch.utils.utility"]], "register_algo() (in module neural_compressor.torch.utils.utility)": [[460, "neural_compressor.torch.utils.utility.register_algo"]], "set_module() (in module neural_compressor.torch.utils.utility)": [[460, "neural_compressor.torch.utils.utility.set_module"]], "callbacks (class in neural_compressor.training)": [[461, "neural_compressor.training.CallBacks"]], "compressionmanager (class in neural_compressor.training)": [[461, "neural_compressor.training.CompressionManager"]], "fit() (in module neural_compressor.training)": [[461, "neural_compressor.training.fit"]], "neural_compressor.training": [[461, "module-neural_compressor.training"]], "prepare_compression() (in module neural_compressor.training)": [[461, "neural_compressor.training.prepare_compression"]], "layerhistogramcollector (class in neural_compressor.utils.collect_layer_histogram)": [[462, "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector"]], "neural_compressor.utils.collect_layer_histogram": [[462, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[463, "module-neural_compressor.utils.constant"]], "create_dataloader() (in module neural_compressor.utils.create_obj_from_config)": [[464, "neural_compressor.utils.create_obj_from_config.create_dataloader"]], "create_dataset() (in module neural_compressor.utils.create_obj_from_config)": [[464, "neural_compressor.utils.create_obj_from_config.create_dataset"]], "create_eval_func() (in module neural_compressor.utils.create_obj_from_config)": [[464, "neural_compressor.utils.create_obj_from_config.create_eval_func"]], "create_train_func() (in module neural_compressor.utils.create_obj_from_config)": [[464, "neural_compressor.utils.create_obj_from_config.create_train_func"]], "get_algorithm() (in module neural_compressor.utils.create_obj_from_config)": [[464, "neural_compressor.utils.create_obj_from_config.get_algorithm"]], "get_func_from_config() (in module neural_compressor.utils.create_obj_from_config)": [[464, "neural_compressor.utils.create_obj_from_config.get_func_from_config"]], "get_metrics() (in module neural_compressor.utils.create_obj_from_config)": [[464, "neural_compressor.utils.create_obj_from_config.get_metrics"]], "get_postprocess() (in module neural_compressor.utils.create_obj_from_config)": [[464, "neural_compressor.utils.create_obj_from_config.get_postprocess"]], "get_preprocess() (in module neural_compressor.utils.create_obj_from_config)": [[464, "neural_compressor.utils.create_obj_from_config.get_preprocess"]], "neural_compressor.utils.create_obj_from_config": [[464, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[465, "module-neural_compressor.utils"]], "kl_divergence (class in neural_compressor.utils.kl_divergence)": [[466, "neural_compressor.utils.kl_divergence.KL_Divergence"]], "neural_compressor.utils.kl_divergence": [[466, "module-neural_compressor.utils.kl_divergence"]], "optimizedmodel (class in neural_compressor.utils.load_huggingface)": [[467, "neural_compressor.utils.load_huggingface.OptimizedModel"]], "export_compressed_model() (in module neural_compressor.utils.load_huggingface)": [[467, "neural_compressor.utils.load_huggingface.export_compressed_model"]], "neural_compressor.utils.load_huggingface": [[467, "module-neural_compressor.utils.load_huggingface"]], "save_for_huggingface_upstream() (in module neural_compressor.utils.load_huggingface)": [[467, "neural_compressor.utils.load_huggingface.save_for_huggingface_upstream"]], "logger (class in neural_compressor.utils.logger)": [[468, "neural_compressor.utils.logger.Logger"]], "debug() (in module neural_compressor.utils.logger)": [[468, "neural_compressor.utils.logger.debug"]], "error() (in module neural_compressor.utils.logger)": [[468, "neural_compressor.utils.logger.error"]], "fatal() (in module neural_compressor.utils.logger)": [[468, "neural_compressor.utils.logger.fatal"]], "info() (in module neural_compressor.utils.logger)": [[468, "neural_compressor.utils.logger.info"]], "log() (in module neural_compressor.utils.logger)": [[468, "neural_compressor.utils.logger.log"]], "neural_compressor.utils.logger": [[468, "module-neural_compressor.utils.logger"]], "warn() (in module neural_compressor.utils.logger)": [[468, "neural_compressor.utils.logger.warn"]], "warning() (in module neural_compressor.utils.logger)": [[468, "neural_compressor.utils.logger.warning"]], "get_model_path() (in module neural_compressor.utils.neural_insights_utils)": [[469, "neural_compressor.utils.neural_insights_utils.get_model_path"]], "neural_compressor.utils.neural_insights_utils": [[469, "module-neural_compressor.utils.neural_insights_utils"]], "register_neural_insights_workload() (in module neural_compressor.utils.neural_insights_utils)": [[469, "neural_compressor.utils.neural_insights_utils.register_neural_insights_workload"]], "update_neural_insights_workload() (in module neural_compressor.utils.neural_insights_utils)": [[469, "neural_compressor.utils.neural_insights_utils.update_neural_insights_workload"]], "update_neural_insights_workload_accuracy_data() (in module neural_compressor.utils.neural_insights_utils)": [[469, "neural_compressor.utils.neural_insights_utils.update_neural_insights_workload_accuracy_data"]], "neural_compressor.utils.options": [[470, "module-neural_compressor.utils.options"]], "onnxrt (class in neural_compressor.utils.options)": [[470, "neural_compressor.utils.options.onnxrt"]], "is_int8_model() (in module neural_compressor.utils.pytorch)": [[471, "neural_compressor.utils.pytorch.is_int8_model"]], "load() (in module neural_compressor.utils.pytorch)": [[471, "neural_compressor.utils.pytorch.load"]], "load_weight_only() (in module neural_compressor.utils.pytorch)": [[471, "neural_compressor.utils.pytorch.load_weight_only"]], "neural_compressor.utils.pytorch": [[471, "module-neural_compressor.utils.pytorch"]], "recover_model_from_json() (in module neural_compressor.utils.pytorch)": [[471, "neural_compressor.utils.pytorch.recover_model_from_json"]], "captureoutputtofile (class in neural_compressor.utils.utility)": [[472, "neural_compressor.utils.utility.CaptureOutputToFile"]], "cpuinfo (class in neural_compressor.utils.utility)": [[472, "neural_compressor.utils.utility.CpuInfo"]], "dequantize() (in module neural_compressor.utils.utility)": [[472, "neural_compressor.utils.utility.Dequantize"]], "dotdict (class in neural_compressor.utils.utility)": [[472, "neural_compressor.utils.utility.DotDict"]], "global_state (class in neural_compressor.utils.utility)": [[472, "neural_compressor.utils.utility.GLOBAL_STATE"]], "lazyimport (class in neural_compressor.utils.utility)": [[472, "neural_compressor.utils.utility.LazyImport"]], "mode (class in neural_compressor.utils.utility)": [[472, "neural_compressor.utils.utility.MODE"]], "opentry (class in neural_compressor.utils.utility)": [[472, "neural_compressor.utils.utility.OpEntry"]], "statistics (class in neural_compressor.utils.utility)": [[472, "neural_compressor.utils.utility.Statistics"]], "alias_param() (in module neural_compressor.utils.utility)": [[472, "neural_compressor.utils.utility.alias_param"]], "calculate_mse() (in module neural_compressor.utils.utility)": [[472, "neural_compressor.utils.utility.calculate_mse"]], "check_key_exist() (in module neural_compressor.utils.utility)": [[472, "neural_compressor.utils.utility.check_key_exist"]], "combine_histogram() (in module neural_compressor.utils.utility)": [[472, "neural_compressor.utils.utility.combine_histogram"]], "compare_objects() (in module neural_compressor.utils.utility)": [[472, "neural_compressor.utils.utility.compare_objects"]], "compute_sparsity() (in module neural_compressor.utils.utility)": [[472, "neural_compressor.utils.utility.compute_sparsity"]], "dequantize_weight() (in module neural_compressor.utils.utility)": [[472, "neural_compressor.utils.utility.dequantize_weight"]], "dump_class_attrs() (in module neural_compressor.utils.utility)": [[472, "neural_compressor.utils.utility.dump_class_attrs"]], "dump_data_to_local() (in module neural_compressor.utils.utility)": [[472, "neural_compressor.utils.utility.dump_data_to_local"]], "dump_elapsed_time() (in module neural_compressor.utils.utility)": [[472, "neural_compressor.utils.utility.dump_elapsed_time"]], "dump_table() (in module neural_compressor.utils.utility)": [[472, "neural_compressor.utils.utility.dump_table"]], "dump_table_to_csv() (in module neural_compressor.utils.utility)": [[472, "neural_compressor.utils.utility.dump_table_to_csv"]], "equal_dicts() (in module neural_compressor.utils.utility)": [[472, "neural_compressor.utils.utility.equal_dicts"]], "fault_tolerant_file() (in module neural_compressor.utils.utility)": [[472, "neural_compressor.utils.utility.fault_tolerant_file"]], "get_all_fp32_data() (in module neural_compressor.utils.utility)": [[472, "neural_compressor.utils.utility.get_all_fp32_data"]], "get_number_of_sockets() (in module neural_compressor.utils.utility)": [[472, "neural_compressor.utils.utility.get_number_of_sockets"]], "get_op_list() (in module neural_compressor.utils.utility)": [[472, "neural_compressor.utils.utility.get_op_list"]], "get_size() (in module neural_compressor.utils.utility)": [[472, "neural_compressor.utils.utility.get_size"]], "get_tensor_histogram() (in module neural_compressor.utils.utility)": [[472, "neural_compressor.utils.utility.get_tensor_histogram"]], "get_tensors_info() (in module neural_compressor.utils.utility)": [[472, "neural_compressor.utils.utility.get_tensors_info"]], "get_tuning_history() (in module neural_compressor.utils.utility)": [[472, "neural_compressor.utils.utility.get_tuning_history"]], "get_weights_details() (in module neural_compressor.utils.utility)": [[472, "neural_compressor.utils.utility.get_weights_details"]], "load_data_from_pkl() (in module neural_compressor.utils.utility)": [[472, "neural_compressor.utils.utility.load_data_from_pkl"]], "mse_metric_gap() (in module neural_compressor.utils.utility)": [[472, "neural_compressor.utils.utility.mse_metric_gap"]], "neural_compressor.utils.utility": [[472, "module-neural_compressor.utils.utility"]], "print_op_list() (in module neural_compressor.utils.utility)": [[472, "neural_compressor.utils.utility.print_op_list"]], "print_table() (in module neural_compressor.utils.utility)": [[472, "neural_compressor.utils.utility.print_table"]], "recover() (in module neural_compressor.utils.utility)": [[472, "neural_compressor.utils.utility.recover"]], "set_random_seed() (in module neural_compressor.utils.utility)": [[472, "neural_compressor.utils.utility.set_random_seed"]], "set_resume_from() (in module neural_compressor.utils.utility)": [[472, "neural_compressor.utils.utility.set_resume_from"]], "set_tensorboard() (in module neural_compressor.utils.utility)": [[472, "neural_compressor.utils.utility.set_tensorboard"]], "set_workspace() (in module neural_compressor.utils.utility)": [[472, "neural_compressor.utils.utility.set_workspace"]], "show_memory_info() (in module neural_compressor.utils.utility)": [[472, "neural_compressor.utils.utility.show_memory_info"]], "singleton() (in module neural_compressor.utils.utility)": [[472, "neural_compressor.utils.utility.singleton"]], "str2array() (in module neural_compressor.utils.utility)": [[472, "neural_compressor.utils.utility.str2array"]], "time_limit() (in module neural_compressor.utils.utility)": [[472, "neural_compressor.utils.utility.time_limit"]], "version1_eq_version2() (in module neural_compressor.utils.utility)": [[472, "neural_compressor.utils.utility.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.utils.utility)": [[472, "neural_compressor.utils.utility.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.utils.utility)": [[472, "neural_compressor.utils.utility.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.utils.utility)": [[472, "neural_compressor.utils.utility.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.utils.utility)": [[472, "neural_compressor.utils.utility.version1_lte_version2"]], "weightsdetails (class in neural_compressor.utils.weights_details)": [[473, "neural_compressor.utils.weights_details.WeightsDetails"]], "weightsstatistics (class in neural_compressor.utils.weights_details)": [[473, "neural_compressor.utils.weights_details.WeightsStatistics"]], "neural_compressor.utils.weights_details": [[473, "module-neural_compressor.utils.weights_details"]], "neural_compressor.version": [[474, "module-neural_compressor.version"]]}})