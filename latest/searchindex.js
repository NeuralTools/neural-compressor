Search.setIndex({"docnames": ["autoapi/block_mask/index", "autoapi/neural_compressor/adaptor/adaptor/index", "autoapi/neural_compressor/adaptor/index", "autoapi/neural_compressor/adaptor/keras/index", "autoapi/neural_compressor/adaptor/keras_utils/conv2d/index", "autoapi/neural_compressor/adaptor/keras_utils/dense/index", "autoapi/neural_compressor/adaptor/keras_utils/depthwise_conv2d/index", "autoapi/neural_compressor/adaptor/keras_utils/index", "autoapi/neural_compressor/adaptor/keras_utils/pool2d/index", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index", "autoapi/neural_compressor/adaptor/keras_utils/separable_conv2d/index", "autoapi/neural_compressor/adaptor/mxnet/index", "autoapi/neural_compressor/adaptor/mxnet_utils/index", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index", "autoapi/neural_compressor/adaptor/onnxrt/index", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index", "autoapi/neural_compressor/adaptor/ox_utils/calibrator/index", "autoapi/neural_compressor/adaptor/ox_utils/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/norm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/reduce/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/unary_op/index", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index", "autoapi/neural_compressor/adaptor/ox_utils/smooth_quant/index", "autoapi/neural_compressor/adaptor/ox_utils/util/index", "autoapi/neural_compressor/adaptor/ox_utils/weight_only/index", "autoapi/neural_compressor/adaptor/pytorch/index", "autoapi/neural_compressor/adaptor/query/index", "autoapi/neural_compressor/adaptor/tensorflow/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dequantize_cast_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_schema/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/tf2onnx_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index", "autoapi/neural_compressor/adaptor/tf_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_calibration/index", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_scaler/index", "autoapi/neural_compressor/adaptor/tf_utils/tf2onnx_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index", "autoapi/neural_compressor/adaptor/tf_utils/util/index", "autoapi/neural_compressor/adaptor/torch_utils/awq/index", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index", "autoapi/neural_compressor/adaptor/torch_utils/gptq/index", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index", "autoapi/neural_compressor/adaptor/torch_utils/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/modified_pickle/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/quantize/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/torch_load/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/utils/index", "autoapi/neural_compressor/adaptor/torch_utils/mixed_precision/index", "autoapi/neural_compressor/adaptor/torch_utils/model_wrapper/index", "autoapi/neural_compressor/adaptor/torch_utils/pattern_detector/index", "autoapi/neural_compressor/adaptor/torch_utils/smooth_quant/index", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index", "autoapi/neural_compressor/adaptor/torch_utils/teq/index", "autoapi/neural_compressor/adaptor/torch_utils/util/index", "autoapi/neural_compressor/adaptor/torch_utils/weight_only/index", "autoapi/neural_compressor/algorithm/algorithm/index", "autoapi/neural_compressor/algorithm/fast_bias_correction/index", "autoapi/neural_compressor/algorithm/index", "autoapi/neural_compressor/algorithm/smooth_quant/index", "autoapi/neural_compressor/algorithm/weight_correction/index", "autoapi/neural_compressor/benchmark/index", "autoapi/neural_compressor/common/base_config/index", "autoapi/neural_compressor/common/index", "autoapi/neural_compressor/common/logger/index", "autoapi/neural_compressor/common/utility/index", "autoapi/neural_compressor/compression/callbacks/index", "autoapi/neural_compressor/compression/distillation/criterions/index", "autoapi/neural_compressor/compression/distillation/index", "autoapi/neural_compressor/compression/distillation/optimizers/index", "autoapi/neural_compressor/compression/distillation/utility/index", "autoapi/neural_compressor/compression/hpo/index", "autoapi/neural_compressor/compression/hpo/sa_optimizer/index", "autoapi/neural_compressor/compression/hpo/search_algorithms/index", "autoapi/neural_compressor/compression/hpo/search_space/index", "autoapi/neural_compressor/compression/index", "autoapi/neural_compressor/compression/pruner/criteria/index", "autoapi/neural_compressor/compression/pruner/index", "autoapi/neural_compressor/compression/pruner/model_slim/auto_slim/index", "autoapi/neural_compressor/compression/pruner/model_slim/index", "autoapi/neural_compressor/compression/pruner/model_slim/pattern_analyzer/index", "autoapi/neural_compressor/compression/pruner/model_slim/weight_slim/index", "autoapi/neural_compressor/compression/pruner/patterns/base/index", "autoapi/neural_compressor/compression/pruner/patterns/index", "autoapi/neural_compressor/compression/pruner/patterns/mha/index", "autoapi/neural_compressor/compression/pruner/patterns/ninm/index", "autoapi/neural_compressor/compression/pruner/patterns/nxm/index", "autoapi/neural_compressor/compression/pruner/pruners/base/index", "autoapi/neural_compressor/compression/pruner/pruners/basic/index", "autoapi/neural_compressor/compression/pruner/pruners/block_mask/index", "autoapi/neural_compressor/compression/pruner/pruners/index", "autoapi/neural_compressor/compression/pruner/pruners/mha/index", "autoapi/neural_compressor/compression/pruner/pruners/pattern_lock/index", "autoapi/neural_compressor/compression/pruner/pruners/progressive/index", "autoapi/neural_compressor/compression/pruner/pruners/retrain_free/index", "autoapi/neural_compressor/compression/pruner/pruners/sparse_gpt/index", "autoapi/neural_compressor/compression/pruner/pruning/index", "autoapi/neural_compressor/compression/pruner/regs/index", "autoapi/neural_compressor/compression/pruner/schedulers/index", "autoapi/neural_compressor/compression/pruner/tf_criteria/index", "autoapi/neural_compressor/compression/pruner/utils/index", "autoapi/neural_compressor/conf/config/index", "autoapi/neural_compressor/conf/dotdict/index", "autoapi/neural_compressor/conf/index", "autoapi/neural_compressor/conf/pythonic_config/index", "autoapi/neural_compressor/config/index", "autoapi/neural_compressor/contrib/index", "autoapi/neural_compressor/contrib/strategy/index", "autoapi/neural_compressor/contrib/strategy/sigopt/index", "autoapi/neural_compressor/contrib/strategy/tpe/index", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/data/dataloaders/dataloader/index", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/data/dataloaders/fetcher/index", "autoapi/neural_compressor/data/dataloaders/index", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/data/dataloaders/sampler/index", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/data/datasets/bert_dataset/index", "autoapi/neural_compressor/data/datasets/coco_dataset/index", "autoapi/neural_compressor/data/datasets/dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/data/datasets/index", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/data/filters/coco_filter/index", "autoapi/neural_compressor/data/filters/filter/index", "autoapi/neural_compressor/data/filters/index", "autoapi/neural_compressor/data/index", "autoapi/neural_compressor/data/transforms/coco_transform/index", "autoapi/neural_compressor/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/data/transforms/index", "autoapi/neural_compressor/data/transforms/postprocess/index", "autoapi/neural_compressor/data/transforms/tokenization/index", "autoapi/neural_compressor/data/transforms/transform/index", "autoapi/neural_compressor/experimental/benchmark/index", "autoapi/neural_compressor/experimental/common/criterion/index", "autoapi/neural_compressor/experimental/common/dataloader/index", "autoapi/neural_compressor/experimental/common/index", "autoapi/neural_compressor/experimental/common/metric/index", "autoapi/neural_compressor/experimental/common/model/index", "autoapi/neural_compressor/experimental/common/optimizer/index", "autoapi/neural_compressor/experimental/common/postprocess/index", "autoapi/neural_compressor/experimental/common/torch_utils/index", "autoapi/neural_compressor/experimental/component/index", "autoapi/neural_compressor/experimental/compression/index", "autoapi/neural_compressor/experimental/contrib/index", "autoapi/neural_compressor/experimental/contrib/strategy/index", "autoapi/neural_compressor/experimental/contrib/strategy/sigopt/index", "autoapi/neural_compressor/experimental/contrib/strategy/tpe/index", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index", "autoapi/neural_compressor/experimental/data/dataloaders/index", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/index", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index", "autoapi/neural_compressor/experimental/data/filters/filter/index", "autoapi/neural_compressor/experimental/data/filters/index", "autoapi/neural_compressor/experimental/data/index", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/experimental/data/transforms/index", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index", "autoapi/neural_compressor/experimental/data/transforms/transform/index", "autoapi/neural_compressor/experimental/distillation/index", "autoapi/neural_compressor/experimental/export/index", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index", "autoapi/neural_compressor/experimental/export/tf2onnx/index", "autoapi/neural_compressor/experimental/export/torch2onnx/index", "autoapi/neural_compressor/experimental/graph_optimization/index", "autoapi/neural_compressor/experimental/index", "autoapi/neural_compressor/experimental/metric/bleu/index", "autoapi/neural_compressor/experimental/metric/bleu_util/index", "autoapi/neural_compressor/experimental/metric/coco_label_map/index", "autoapi/neural_compressor/experimental/metric/coco_tools/index", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index", "autoapi/neural_compressor/experimental/metric/f1/index", "autoapi/neural_compressor/experimental/metric/index", "autoapi/neural_compressor/experimental/metric/metric/index", "autoapi/neural_compressor/experimental/mixed_precision/index", "autoapi/neural_compressor/experimental/model_conversion/index", "autoapi/neural_compressor/experimental/nas/basic_nas/index", "autoapi/neural_compressor/experimental/nas/dynas/index", "autoapi/neural_compressor/experimental/nas/index", "autoapi/neural_compressor/experimental/nas/nas/index", "autoapi/neural_compressor/experimental/nas/nas_utils/index", "autoapi/neural_compressor/experimental/nas/search_algorithms/index", "autoapi/neural_compressor/experimental/pruner_legacy/gradient_sensitivity/index", "autoapi/neural_compressor/experimental/pruner_legacy/group_lasso/index", "autoapi/neural_compressor/experimental/pruner_legacy/index", "autoapi/neural_compressor/experimental/pruner_legacy/magnitude/index", "autoapi/neural_compressor/experimental/pruner_legacy/pattern_lock/index", "autoapi/neural_compressor/experimental/pruner_legacy/pruner/index", "autoapi/neural_compressor/experimental/pruning/index", "autoapi/neural_compressor/experimental/pruning_recipes/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index", "autoapi/neural_compressor/experimental/pruning_v2/index", "autoapi/neural_compressor/experimental/pytorch_pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index", "autoapi/neural_compressor/experimental/quantization/index", "autoapi/neural_compressor/experimental/scheduler/index", "autoapi/neural_compressor/experimental/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/experimental/strategy/basic/index", "autoapi/neural_compressor/experimental/strategy/bayesian/index", "autoapi/neural_compressor/experimental/strategy/exhaustive/index", "autoapi/neural_compressor/experimental/strategy/index", "autoapi/neural_compressor/experimental/strategy/mse/index", "autoapi/neural_compressor/experimental/strategy/mse_v2/index", "autoapi/neural_compressor/experimental/strategy/random/index", "autoapi/neural_compressor/experimental/strategy/strategy/index", "autoapi/neural_compressor/experimental/strategy/utils/constant/index", "autoapi/neural_compressor/experimental/strategy/utils/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_space/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/experimental/strategy/utils/utility/index", "autoapi/neural_compressor/index", "autoapi/neural_compressor/metric/bleu/index", "autoapi/neural_compressor/metric/bleu_util/index", "autoapi/neural_compressor/metric/coco_label_map/index", "autoapi/neural_compressor/metric/coco_tools/index", "autoapi/neural_compressor/metric/evaluate_squad/index", "autoapi/neural_compressor/metric/f1/index", "autoapi/neural_compressor/metric/index", "autoapi/neural_compressor/metric/metric/index", "autoapi/neural_compressor/mix_precision/index", "autoapi/neural_compressor/model/base_model/index", "autoapi/neural_compressor/model/index", "autoapi/neural_compressor/model/keras_model/index", "autoapi/neural_compressor/model/model/index", "autoapi/neural_compressor/model/mxnet_model/index", "autoapi/neural_compressor/model/nets_factory/index", "autoapi/neural_compressor/model/onnx_model/index", "autoapi/neural_compressor/model/tensorflow_model/index", "autoapi/neural_compressor/model/torch_model/index", "autoapi/neural_compressor/objective/index", "autoapi/neural_compressor/profiling/index", "autoapi/neural_compressor/profiling/parser/factory/index", "autoapi/neural_compressor/profiling/parser/index", "autoapi/neural_compressor/profiling/parser/onnx_parser/factory/index", "autoapi/neural_compressor/profiling/parser/onnx_parser/index", "autoapi/neural_compressor/profiling/parser/onnx_parser/parser/index", "autoapi/neural_compressor/profiling/parser/parser/index", "autoapi/neural_compressor/profiling/parser/result/index", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/factory/index", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/index", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/parser/index", "autoapi/neural_compressor/profiling/profiler/factory/index", "autoapi/neural_compressor/profiling/profiler/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/factory/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/profiler/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/utils/index", "autoapi/neural_compressor/profiling/profiler/profiler/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/factory/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/profiler/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/utils/index", "autoapi/neural_compressor/quantization/index", "autoapi/neural_compressor/strategy/auto/index", "autoapi/neural_compressor/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/strategy/basic/index", "autoapi/neural_compressor/strategy/bayesian/index", "autoapi/neural_compressor/strategy/conservative/index", "autoapi/neural_compressor/strategy/exhaustive/index", "autoapi/neural_compressor/strategy/hawq_v2/index", "autoapi/neural_compressor/strategy/index", "autoapi/neural_compressor/strategy/mse/index", "autoapi/neural_compressor/strategy/mse_v2/index", "autoapi/neural_compressor/strategy/random/index", "autoapi/neural_compressor/strategy/strategy/index", "autoapi/neural_compressor/strategy/utils/constant/index", "autoapi/neural_compressor/strategy/utils/index", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/strategy/utils/tuning_space/index", "autoapi/neural_compressor/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/strategy/utils/utility/index", "autoapi/neural_compressor/template/api_doc_example/index", "autoapi/neural_compressor/template/index", "autoapi/neural_compressor/torch/algorithms/gptq/index", "autoapi/neural_compressor/torch/algorithms/index", "autoapi/neural_compressor/torch/algorithms/rtn/index", "autoapi/neural_compressor/torch/algorithms/weight_only_algos/index", "autoapi/neural_compressor/torch/index", "autoapi/neural_compressor/torch/quantization/config/index", "autoapi/neural_compressor/torch/quantization/index", "autoapi/neural_compressor/torch/quantization/quantize/index", "autoapi/neural_compressor/torch/utils/index", "autoapi/neural_compressor/training/index", "autoapi/neural_compressor/utils/collect_layer_histogram/index", "autoapi/neural_compressor/utils/constant/index", "autoapi/neural_compressor/utils/create_obj_from_config/index", "autoapi/neural_compressor/utils/index", "autoapi/neural_compressor/utils/kl_divergence/index", "autoapi/neural_compressor/utils/load_huggingface/index", "autoapi/neural_compressor/utils/logger/index", "autoapi/neural_compressor/utils/neural_insights_utils/index", "autoapi/neural_compressor/utils/options/index", "autoapi/neural_compressor/utils/pytorch/index", "autoapi/neural_compressor/utils/utility/index", "autoapi/neural_compressor/utils/weights_details/index", "autoapi/neural_compressor/version/index", "docs/build_docs/source/index", "docs/source/CODE_OF_CONDUCT", "docs/source/CONTRIBUTING", "docs/source/FX", "docs/source/NAS", "docs/source/SECURITY", "docs/source/Welcome", "docs/source/adaptor", "docs/source/add_new_adaptor", "docs/source/add_new_data_type", "docs/source/api-doc/adaptor", "docs/source/api-doc/adaptor/onnxrt", "docs/source/api-doc/adaptor/torch_utils", "docs/source/api-doc/api_doc_example", "docs/source/api-doc/apis", "docs/source/api-doc/benchmark", "docs/source/api-doc/compression", "docs/source/api-doc/config", "docs/source/api-doc/mix_precision", "docs/source/api-doc/model", "docs/source/api-doc/objective", "docs/source/api-doc/quantization", "docs/source/api-doc/strategy", "docs/source/api-doc/training", "docs/source/benchmark", "docs/source/calibration", "docs/source/dataloader", "docs/source/dataset", "docs/source/design", "docs/source/diagnosis", "docs/source/distillation", "docs/source/distillation_quantization", "docs/source/distributed", "docs/source/examples_readme", "docs/source/export", "docs/source/faq", "docs/source/framework_yaml", "docs/source/get_started", "docs/source/incompatible_changes", "docs/source/infrastructure", "docs/source/installation_guide", "docs/source/legal_information", "docs/source/metric", "docs/source/migration", "docs/source/mixed_precision", "docs/source/model", "docs/source/neural_coder/README", "docs/source/neural_coder/docs/AWSSageMakerSupport", "docs/source/neural_coder/docs/BigDLNanoSupport", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting", "docs/source/neural_coder/docs/PythonAPI", "docs/source/neural_coder/docs/PythonLauncher", "docs/source/neural_coder/docs/Quantization", "docs/source/neural_coder/docs/SupportMatrix", "docs/source/neural_coder/docs/release_notes/v0.4", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart", "docs/source/neural_insights/README", "docs/source/neural_insights/docs/source/onnx_accuracy_debug", "docs/source/neural_insights/docs/source/pytorch_nlp_cli_mode", "docs/source/neural_insights/docs/source/tf_accuracy_debug", "docs/source/neural_insights/gui/README", "docs/source/neural_solution/README", "docs/source/neural_solution/docs/source/README", "docs/source/neural_solution/docs/source/description_api", "docs/source/neural_solution/docs/source/ns_design_doc", "docs/source/neural_solution/docs/source/template/task_request_description", "docs/source/neural_solution/examples/README", "docs/source/neural_solution/examples/custom_models_optimized/tf_example1/README", "docs/source/neural_solution/examples/hf_models/README", "docs/source/neural_solution/examples/hf_models_grpc/README", "docs/source/neural_solution/frontend/README", "docs/source/objective", "docs/source/orchestration", "docs/source/pruning", "docs/source/publication_list", "docs/source/pythonic_style", "docs/source/quantization", "docs/source/quantization_mixed_precision", "docs/source/quantization_weight_only", "docs/source/releases_info", "docs/source/sigopt_strategy", "docs/source/smooth_quant", "docs/source/tensorboard", "docs/source/transform", "docs/source/tuning_strategies", "docs/source/user_guide", "docs/source/user_yaml", "docs/source/validated_model_list", "index"], "filenames": ["autoapi/block_mask/index.rst", "autoapi/neural_compressor/adaptor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/keras/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/conv2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/dense/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/depthwise_conv2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/pool2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/separable_conv2d/index.rst", "autoapi/neural_compressor/adaptor/mxnet/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index.rst", "autoapi/neural_compressor/adaptor/onnxrt/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibrator/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/norm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/reduce/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/unary_op/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/smooth_quant/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/util/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/weight_only/index.rst", "autoapi/neural_compressor/adaptor/pytorch/index.rst", "autoapi/neural_compressor/adaptor/query/index.rst", "autoapi/neural_compressor/adaptor/tensorflow/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dequantize_cast_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_schema/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/tf2onnx_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_calibration/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_scaler/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/tf2onnx_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/util/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/awq/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/gptq/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/modified_pickle/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/quantize/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/torch_load/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/utils/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/mixed_precision/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/model_wrapper/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/pattern_detector/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/smooth_quant/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/teq/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/util/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/weight_only/index.rst", "autoapi/neural_compressor/algorithm/algorithm/index.rst", "autoapi/neural_compressor/algorithm/fast_bias_correction/index.rst", "autoapi/neural_compressor/algorithm/index.rst", "autoapi/neural_compressor/algorithm/smooth_quant/index.rst", "autoapi/neural_compressor/algorithm/weight_correction/index.rst", "autoapi/neural_compressor/benchmark/index.rst", "autoapi/neural_compressor/common/base_config/index.rst", "autoapi/neural_compressor/common/index.rst", "autoapi/neural_compressor/common/logger/index.rst", "autoapi/neural_compressor/common/utility/index.rst", "autoapi/neural_compressor/compression/callbacks/index.rst", "autoapi/neural_compressor/compression/distillation/criterions/index.rst", "autoapi/neural_compressor/compression/distillation/index.rst", "autoapi/neural_compressor/compression/distillation/optimizers/index.rst", "autoapi/neural_compressor/compression/distillation/utility/index.rst", "autoapi/neural_compressor/compression/hpo/index.rst", "autoapi/neural_compressor/compression/hpo/sa_optimizer/index.rst", "autoapi/neural_compressor/compression/hpo/search_algorithms/index.rst", "autoapi/neural_compressor/compression/hpo/search_space/index.rst", "autoapi/neural_compressor/compression/index.rst", "autoapi/neural_compressor/compression/pruner/criteria/index.rst", "autoapi/neural_compressor/compression/pruner/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/auto_slim/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/pattern_analyzer/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/weight_slim/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/base/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/mha/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/ninm/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/nxm/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/base/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/basic/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/block_mask/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/mha/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/pattern_lock/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/progressive/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/retrain_free/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/sparse_gpt/index.rst", "autoapi/neural_compressor/compression/pruner/pruning/index.rst", "autoapi/neural_compressor/compression/pruner/regs/index.rst", "autoapi/neural_compressor/compression/pruner/schedulers/index.rst", "autoapi/neural_compressor/compression/pruner/tf_criteria/index.rst", "autoapi/neural_compressor/compression/pruner/utils/index.rst", "autoapi/neural_compressor/conf/config/index.rst", "autoapi/neural_compressor/conf/dotdict/index.rst", "autoapi/neural_compressor/conf/index.rst", "autoapi/neural_compressor/conf/pythonic_config/index.rst", "autoapi/neural_compressor/config/index.rst", "autoapi/neural_compressor/contrib/index.rst", "autoapi/neural_compressor/contrib/strategy/index.rst", "autoapi/neural_compressor/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/data/dataloaders/index.rst", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/data/datasets/index.rst", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/data/filters/filter/index.rst", "autoapi/neural_compressor/data/filters/index.rst", "autoapi/neural_compressor/data/index.rst", "autoapi/neural_compressor/data/transforms/coco_transform/index.rst", "autoapi/neural_compressor/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/data/transforms/index.rst", "autoapi/neural_compressor/data/transforms/postprocess/index.rst", "autoapi/neural_compressor/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/benchmark/index.rst", "autoapi/neural_compressor/experimental/common/criterion/index.rst", "autoapi/neural_compressor/experimental/common/dataloader/index.rst", "autoapi/neural_compressor/experimental/common/index.rst", "autoapi/neural_compressor/experimental/common/metric/index.rst", "autoapi/neural_compressor/experimental/common/model/index.rst", "autoapi/neural_compressor/experimental/common/optimizer/index.rst", "autoapi/neural_compressor/experimental/common/postprocess/index.rst", "autoapi/neural_compressor/experimental/common/torch_utils/index.rst", "autoapi/neural_compressor/experimental/component/index.rst", "autoapi/neural_compressor/experimental/compression/index.rst", "autoapi/neural_compressor/experimental/contrib/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/index.rst", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/index.rst", "autoapi/neural_compressor/experimental/data/index.rst", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/experimental/data/transforms/index.rst", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/experimental/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/distillation/index.rst", "autoapi/neural_compressor/experimental/export/index.rst", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index.rst", "autoapi/neural_compressor/experimental/export/tf2onnx/index.rst", "autoapi/neural_compressor/experimental/export/torch2onnx/index.rst", "autoapi/neural_compressor/experimental/graph_optimization/index.rst", "autoapi/neural_compressor/experimental/index.rst", "autoapi/neural_compressor/experimental/metric/bleu/index.rst", "autoapi/neural_compressor/experimental/metric/bleu_util/index.rst", "autoapi/neural_compressor/experimental/metric/coco_label_map/index.rst", "autoapi/neural_compressor/experimental/metric/coco_tools/index.rst", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/experimental/metric/f1/index.rst", "autoapi/neural_compressor/experimental/metric/index.rst", "autoapi/neural_compressor/experimental/metric/metric/index.rst", "autoapi/neural_compressor/experimental/mixed_precision/index.rst", "autoapi/neural_compressor/experimental/model_conversion/index.rst", "autoapi/neural_compressor/experimental/nas/basic_nas/index.rst", "autoapi/neural_compressor/experimental/nas/dynas/index.rst", "autoapi/neural_compressor/experimental/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas_utils/index.rst", "autoapi/neural_compressor/experimental/nas/search_algorithms/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/gradient_sensitivity/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/group_lasso/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/magnitude/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/pattern_lock/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/pruner/index.rst", "autoapi/neural_compressor/experimental/pruning/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_v2/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index.rst", "autoapi/neural_compressor/experimental/quantization/index.rst", "autoapi/neural_compressor/experimental/scheduler/index.rst", "autoapi/neural_compressor/experimental/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/experimental/strategy/basic/index.rst", "autoapi/neural_compressor/experimental/strategy/bayesian/index.rst", "autoapi/neural_compressor/experimental/strategy/exhaustive/index.rst", "autoapi/neural_compressor/experimental/strategy/index.rst", "autoapi/neural_compressor/experimental/strategy/mse/index.rst", "autoapi/neural_compressor/experimental/strategy/mse_v2/index.rst", "autoapi/neural_compressor/experimental/strategy/random/index.rst", "autoapi/neural_compressor/experimental/strategy/strategy/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/constant/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/utility/index.rst", "autoapi/neural_compressor/index.rst", "autoapi/neural_compressor/metric/bleu/index.rst", "autoapi/neural_compressor/metric/bleu_util/index.rst", "autoapi/neural_compressor/metric/coco_label_map/index.rst", "autoapi/neural_compressor/metric/coco_tools/index.rst", "autoapi/neural_compressor/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/metric/f1/index.rst", "autoapi/neural_compressor/metric/index.rst", "autoapi/neural_compressor/metric/metric/index.rst", "autoapi/neural_compressor/mix_precision/index.rst", "autoapi/neural_compressor/model/base_model/index.rst", "autoapi/neural_compressor/model/index.rst", "autoapi/neural_compressor/model/keras_model/index.rst", "autoapi/neural_compressor/model/model/index.rst", "autoapi/neural_compressor/model/mxnet_model/index.rst", "autoapi/neural_compressor/model/nets_factory/index.rst", "autoapi/neural_compressor/model/onnx_model/index.rst", "autoapi/neural_compressor/model/tensorflow_model/index.rst", "autoapi/neural_compressor/model/torch_model/index.rst", "autoapi/neural_compressor/objective/index.rst", "autoapi/neural_compressor/profiling/index.rst", "autoapi/neural_compressor/profiling/parser/factory/index.rst", "autoapi/neural_compressor/profiling/parser/index.rst", "autoapi/neural_compressor/profiling/parser/onnx_parser/factory/index.rst", "autoapi/neural_compressor/profiling/parser/onnx_parser/index.rst", "autoapi/neural_compressor/profiling/parser/onnx_parser/parser/index.rst", "autoapi/neural_compressor/profiling/parser/parser/index.rst", "autoapi/neural_compressor/profiling/parser/result/index.rst", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/factory/index.rst", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/index.rst", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/parser/index.rst", "autoapi/neural_compressor/profiling/profiler/factory/index.rst", "autoapi/neural_compressor/profiling/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/factory/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/utils/index.rst", "autoapi/neural_compressor/profiling/profiler/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/factory/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/utils/index.rst", "autoapi/neural_compressor/quantization/index.rst", "autoapi/neural_compressor/strategy/auto/index.rst", "autoapi/neural_compressor/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/strategy/basic/index.rst", "autoapi/neural_compressor/strategy/bayesian/index.rst", "autoapi/neural_compressor/strategy/conservative/index.rst", "autoapi/neural_compressor/strategy/exhaustive/index.rst", "autoapi/neural_compressor/strategy/hawq_v2/index.rst", "autoapi/neural_compressor/strategy/index.rst", "autoapi/neural_compressor/strategy/mse/index.rst", "autoapi/neural_compressor/strategy/mse_v2/index.rst", "autoapi/neural_compressor/strategy/random/index.rst", "autoapi/neural_compressor/strategy/strategy/index.rst", "autoapi/neural_compressor/strategy/utils/constant/index.rst", "autoapi/neural_compressor/strategy/utils/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/strategy/utils/utility/index.rst", "autoapi/neural_compressor/template/api_doc_example/index.rst", "autoapi/neural_compressor/template/index.rst", "autoapi/neural_compressor/torch/algorithms/gptq/index.rst", "autoapi/neural_compressor/torch/algorithms/index.rst", "autoapi/neural_compressor/torch/algorithms/rtn/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only_algos/index.rst", "autoapi/neural_compressor/torch/index.rst", "autoapi/neural_compressor/torch/quantization/config/index.rst", "autoapi/neural_compressor/torch/quantization/index.rst", "autoapi/neural_compressor/torch/quantization/quantize/index.rst", "autoapi/neural_compressor/torch/utils/index.rst", "autoapi/neural_compressor/training/index.rst", "autoapi/neural_compressor/utils/collect_layer_histogram/index.rst", "autoapi/neural_compressor/utils/constant/index.rst", "autoapi/neural_compressor/utils/create_obj_from_config/index.rst", "autoapi/neural_compressor/utils/index.rst", "autoapi/neural_compressor/utils/kl_divergence/index.rst", "autoapi/neural_compressor/utils/load_huggingface/index.rst", "autoapi/neural_compressor/utils/logger/index.rst", "autoapi/neural_compressor/utils/neural_insights_utils/index.rst", "autoapi/neural_compressor/utils/options/index.rst", "autoapi/neural_compressor/utils/pytorch/index.rst", "autoapi/neural_compressor/utils/utility/index.rst", "autoapi/neural_compressor/utils/weights_details/index.rst", "autoapi/neural_compressor/version/index.rst", "docs/build_docs/source/index.rst", "docs/source/CODE_OF_CONDUCT.md", "docs/source/CONTRIBUTING.md", "docs/source/FX.md", "docs/source/NAS.md", "docs/source/SECURITY.md", "docs/source/Welcome.md", "docs/source/adaptor.md", "docs/source/add_new_adaptor.md", "docs/source/add_new_data_type.md", "docs/source/api-doc/adaptor.rst", "docs/source/api-doc/adaptor/onnxrt.rst", "docs/source/api-doc/adaptor/torch_utils.rst", "docs/source/api-doc/api_doc_example.rst", "docs/source/api-doc/apis.rst", "docs/source/api-doc/benchmark.rst", "docs/source/api-doc/compression.rst", "docs/source/api-doc/config.rst", "docs/source/api-doc/mix_precision.rst", "docs/source/api-doc/model.rst", "docs/source/api-doc/objective.rst", "docs/source/api-doc/quantization.rst", "docs/source/api-doc/strategy.rst", "docs/source/api-doc/training.rst", "docs/source/benchmark.md", "docs/source/calibration.md", "docs/source/dataloader.md", "docs/source/dataset.md", "docs/source/design.md", "docs/source/diagnosis.md", "docs/source/distillation.md", "docs/source/distillation_quantization.md", "docs/source/distributed.md", "docs/source/examples_readme.md", "docs/source/export.md", "docs/source/faq.md", "docs/source/framework_yaml.md", "docs/source/get_started.md", "docs/source/incompatible_changes.md", "docs/source/infrastructure.md", "docs/source/installation_guide.md", "docs/source/legal_information.md", "docs/source/metric.md", "docs/source/migration.md", "docs/source/mixed_precision.md", "docs/source/model.md", "docs/source/neural_coder/README.md", "docs/source/neural_coder/docs/AWSSageMakerSupport.md", "docs/source/neural_coder/docs/BigDLNanoSupport.md", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting.md", "docs/source/neural_coder/docs/PythonAPI.md", "docs/source/neural_coder/docs/PythonLauncher.md", "docs/source/neural_coder/docs/Quantization.md", "docs/source/neural_coder/docs/SupportMatrix.md", "docs/source/neural_coder/docs/release_notes/v0.4.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart.md", "docs/source/neural_insights/README.md", "docs/source/neural_insights/docs/source/onnx_accuracy_debug.md", "docs/source/neural_insights/docs/source/pytorch_nlp_cli_mode.md", "docs/source/neural_insights/docs/source/tf_accuracy_debug.md", "docs/source/neural_insights/gui/README.md", "docs/source/neural_solution/README.md", "docs/source/neural_solution/docs/source/README.md", "docs/source/neural_solution/docs/source/description_api.md", "docs/source/neural_solution/docs/source/ns_design_doc.md", "docs/source/neural_solution/docs/source/template/task_request_description.md", "docs/source/neural_solution/examples/README.md", "docs/source/neural_solution/examples/custom_models_optimized/tf_example1/README.md", "docs/source/neural_solution/examples/hf_models/README.md", "docs/source/neural_solution/examples/hf_models_grpc/README.md", "docs/source/neural_solution/frontend/README.md", "docs/source/objective.md", "docs/source/orchestration.md", "docs/source/pruning.md", "docs/source/publication_list.md", "docs/source/pythonic_style.md", "docs/source/quantization.md", "docs/source/quantization_mixed_precision.md", "docs/source/quantization_weight_only.md", "docs/source/releases_info.md", "docs/source/sigopt_strategy.md", "docs/source/smooth_quant.md", "docs/source/tensorboard.md", "docs/source/transform.md", "docs/source/tuning_strategies.md", "docs/source/user_guide.md", "docs/source/user_yaml.md", "docs/source/validated_model_list.md", "index.rst"], "titles": ["<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">block_mask</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.dense</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.depthwise_conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.pool2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.separable_conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.onnxrt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.calibration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.calibrator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.activation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.argmax</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.attention</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.binary_op</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.direct_q8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.embed_layernorm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gather</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gavgpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gemm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.lstm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.maxpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.ops</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.reduce</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.resize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.split</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.unary_op</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.weight_only</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.query</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph_common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.smooth_quant_calibration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.smooth_quant_scaler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.tf2onnx_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.insert_logging</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.awq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.gptq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.hawq_metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.layer_wise_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.layer_wise_quant.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.model_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.pattern_detector</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.symbolic_trace</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.teq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.weight_only</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.fast_bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.weight_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.common.base_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.common.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.common.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.callbacks</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation.criterions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation.optimizers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.hpo</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.hpo.sa_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.hpo.search_algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.hpo.search_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.criteria</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.auto_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.pattern_analyzer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.weight_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns.base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns.mha</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns.ninm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns.nxm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.block_mask</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.mha</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.pattern_lock</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.progressive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.retrain_free</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.sparse_gpt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.regs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.schedulers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.tf_criteria</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.dotdict</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.pythonic_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.sigopt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.tpe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.coco_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.criterion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.component</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.compression</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib.strategy.sigopt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib.strategy.tpe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.distillation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.qlinear2qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.tf2onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.torch2onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.model_conversion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.basic_nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.search_algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.gradient_sensitivity</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.group_lasso</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.magnitude</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.pattern_lock</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.tile_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.prune_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.auto_mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.bayesian</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.exhaustive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.mse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.mse_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.tuning_sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.tuning_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.tuning_structs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.mix_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.base_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.keras_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.mxnet_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.nets_factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.onnx_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.tensorflow_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.torch_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.objective</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.onnx_parser.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.onnx_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.onnx_parser.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.tensorflow_parser.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.tensorflow_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.tensorflow_parser.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.auto</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.auto_mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.bayesian</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.conservative</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.exhaustive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.hawq_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_structs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.template.api_doc_example</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.template</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.gptq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.rtn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only_algos</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.quantization.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.quantization.quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.training</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.collect_layer_histogram</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.create_obj_from_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.kl_divergence</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.load_huggingface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.neural_insights_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.options</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.weights_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.version</span></code>", "Intel\u00ae Neural Compressor Documentation", "Contributor Covenant Code of Conduct", "Contribution Guidelines", "FX", "Neural Architecture Search", "Security Policy", "Intel\u00ae Neural Compressor", "Adaptor", "How to Add An Adaptor", "How to Support New Data Type, Like Int4, with a Few Line Changes", "Adaptor", "ONNX Runtime", "Torch Utils", "API Document Example", "APIs", "Benchmark", "Compression", "Config", "Mix Precision", "Model", "Objective", "Quantization", "Strategy", "Training", "Benchmarking", "Calibration Algorithms in Quantization", "DataLoader", "Dataset", "Design", "Diagnosis", "Distillation", "Distillation for Quantization", "Distributed Training and Inference (Evaluation)", "Examples", "Export", "Frequently Asked Questions", "Framework YAML Configuration Files", "Getting Started", "Incompatible changes between v1.2 and v1.1", "Infrastructure of Intel\u00ae Neural Compressor", "Installation", "Legal Information", "Metrics", "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X", "Mixed Precision", "Model", "Neural Coder", "AWS Amazon SageMaker Support", "BigDL Nano Support", "Intel CPU Platforms: Best Performance Setting", "Neural Coder as Python API", "Python Launcher", "Neural Coder for Quantization", "Supported Optimization Features", "v0.4", "Changelog", "neural_compressor_ext_lab", "Intel\u00ae Neural Compressor as JupyterLab Extension", "Making a new release of neural_compressor_ext_lab", "Changelog", "neural_compressor_ext_lab_alibaba", "Making a new release of neural_compressor_ext_lab_alibaba", "Change Log", "Neural Coder", "Welcome to your VS Code Extension", "Neural Insights", "Step by step example how to debug accuracy with Neural Insights", "Step by step example how to dump weights data for PyTorch model with Neural Insights", "Step by step example how to debug accuracy with Neural Insights", "Getting Started with Create React App", "What\u2019s Neural Solution?", "Get started", "Neural Solution API", "Design Doc for Optimization as a Service [WIP]", "Task request description", "Examples List", "An end-to-end example: quantize a custom model with Neural Solution", "An end-to-end example: quantize a Hugging Face model with Neural Solution", "An end-to-end example: quantize a Hugging Face model with Neural Solution gRPC API", "Client", "Objective", "Optimization Orchestration", "Pruning", "Full Publications/Events (78)", "Pythonic Style Access for Configurations", "Quantization", "Turn OFF Auto Mixed Precision during Quantization", "Weight Only Quantization (WOQ)", "Release", "SigOpt Strategy", "Smooth Quant", "TensorBoard", "Transform", "Tuning Strategies", "User Guide", "User YAML Configuration Files", "Validated Models", "Intel\u00ae Neural Compressor Documentation"], "terms": {"block": [0, 44, 161, 165, 166, 187, 197, 200, 205, 211, 327, 368, 410, 414, 474, 515, 517, 522, 525, 528], "mask": [0, 187, 193, 195, 198, 200, 204, 205, 231, 274, 300, 329, 353, 517, 531], "adaptor_registri": [1, 442], "cl": [1, 158, 167, 178, 180, 184, 185, 193, 198, 207, 208, 209, 233, 240, 248, 250, 255, 276, 283, 289, 311, 318, 322, 327, 329, 331, 342, 357, 368, 403, 432], "sourc": [1, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 113, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 175, 177, 178, 180, 181, 184, 185, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 262, 263, 264, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 286, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 316, 317, 318, 319, 322, 323, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 357, 358, 359, 361, 362, 363, 364, 365, 366, 367, 368, 370, 372, 374, 375, 376, 377, 379, 380, 382, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 406, 407, 408, 409, 410, 412, 414, 415, 417, 419, 420, 421, 422, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 438, 441, 476, 478, 491, 493, 495, 496, 498, 518], "The": [1, 3, 11, 14, 16, 34, 53, 74, 113, 119, 121, 140, 148, 157, 159, 165, 167, 172, 173, 177, 178, 180, 184, 185, 187, 191, 193, 195, 196, 198, 199, 200, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 219, 220, 221, 231, 232, 233, 234, 235, 239, 240, 248, 250, 253, 255, 258, 262, 263, 264, 274, 275, 276, 277, 278, 282, 283, 289, 290, 295, 297, 298, 299, 301, 302, 304, 306, 307, 308, 310, 311, 313, 314, 316, 317, 318, 319, 322, 324, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 339, 340, 341, 342, 346, 348, 350, 351, 352, 354, 355, 357, 358, 366, 368, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 407, 409, 410, 415, 419, 420, 421, 422, 424, 426, 427, 431, 432, 433, 436, 438, 439, 442, 443, 444, 445, 447, 451, 454, 457, 459, 460, 461, 462, 464, 465, 467, 469, 471, 473, 474, 475, 477, 478, 479, 480, 483, 484, 486, 489, 491, 492, 493, 495, 496, 498, 499, 500, 501, 503, 504, 505, 506, 507, 508, 509, 511, 515, 516, 517, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531], "decor": [1, 16, 34, 67, 68, 70, 148, 167, 173, 180, 184, 185, 193, 198, 207, 209, 248, 255, 289, 304, 311, 318, 322, 327, 329, 331, 342, 345, 357, 368, 403, 420, 432, 438, 439, 442, 528], "us": [1, 13, 16, 34, 42, 43, 44, 48, 49, 70, 103, 105, 116, 141, 152, 157, 159, 165, 166, 172, 178, 180, 184, 185, 187, 191, 193, 198, 202, 203, 207, 209, 210, 212, 213, 215, 216, 219, 220, 229, 230, 231, 232, 233, 234, 235, 238, 247, 248, 249, 250, 255, 262, 263, 272, 273, 274, 275, 276, 277, 278, 281, 288, 289, 293, 294, 295, 297, 298, 300, 304, 305, 306, 311, 318, 319, 322, 324, 327, 329, 330, 331, 332, 333, 336, 339, 342, 345, 346, 350, 351, 353, 357, 368, 385, 390, 391, 395, 398, 400, 403, 407, 409, 410, 414, 420, 421, 422, 423, 424, 425, 427, 432, 436, 437, 438, 439, 442, 443, 459, 460, 462, 464, 465, 466, 467, 469, 471, 473, 475, 476, 478, 479, 480, 481, 482, 483, 485, 486, 489, 491, 493, 495, 496, 498, 500, 501, 502, 503, 504, 511, 512, 513, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 530, 531], "regist": [1, 16, 34, 155, 157, 167, 173, 178, 180, 184, 185, 187, 188, 193, 194, 198, 201, 207, 208, 209, 210, 233, 240, 248, 250, 255, 276, 283, 289, 304, 311, 318, 322, 327, 329, 331, 342, 345, 357, 368, 403, 409, 420, 429, 439, 442, 462, 467, 477, 478, 499, 515, 525, 528], "all": [1, 13, 16, 34, 44, 45, 63, 97, 151, 157, 158, 165, 166, 167, 169, 172, 173, 177, 180, 185, 188, 193, 201, 211, 215, 216, 221, 222, 229, 233, 240, 248, 249, 255, 258, 264, 272, 276, 283, 289, 294, 297, 300, 302, 304, 311, 318, 322, 323, 327, 333, 342, 345, 350, 353, 355, 357, 359, 368, 403, 409, 412, 424, 432, 436, 437, 441, 442, 443, 444, 461, 462, 467, 471, 475, 478, 481, 489, 492, 493, 496, 497, 498, 499, 500, 503, 504, 506, 507, 511, 512, 513, 516, 517, 518, 520, 521, 522, 525, 527, 528], "subclass": [1, 16, 34, 167, 180, 184, 185, 193, 198, 207, 209, 226, 230, 233, 240, 248, 255, 269, 273, 276, 283, 289, 304, 311, 318, 322, 327, 329, 331, 342, 345, 357, 368, 403, 442], "paramet": [1, 11, 13, 14, 16, 42, 43, 44, 45, 67, 68, 70, 86, 105, 116, 132, 140, 141, 148, 150, 151, 152, 157, 158, 162, 163, 165, 166, 167, 172, 173, 175, 177, 178, 180, 182, 184, 185, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 219, 220, 230, 231, 233, 240, 244, 248, 250, 255, 262, 263, 273, 274, 276, 283, 286, 289, 290, 292, 293, 294, 295, 297, 298, 300, 301, 302, 304, 306, 307, 308, 310, 311, 312, 313, 314, 316, 317, 318, 319, 322, 324, 327, 328, 329, 330, 331, 332, 336, 342, 346, 348, 350, 351, 353, 354, 355, 357, 358, 362, 366, 368, 385, 390, 391, 395, 403, 407, 409, 410, 412, 414, 419, 420, 421, 424, 427, 428, 429, 431, 432, 438, 443, 461, 462, 465, 467, 474, 477, 478, 492, 498, 499, 500, 501, 506, 511, 512, 517, 520, 522, 523, 524, 525, 527, 528, 530], "framework_specific_info": [1, 3, 11, 14, 45, 47, 442], "base": [1, 3, 11, 13, 14, 16, 34, 46, 47, 86, 105, 116, 120, 122, 132, 144, 152, 155, 161, 165, 167, 173, 177, 184, 185, 186, 187, 188, 194, 201, 208, 210, 216, 221, 224, 229, 231, 233, 240, 248, 258, 264, 267, 272, 274, 276, 283, 289, 304, 310, 312, 318, 319, 322, 324, 329, 339, 342, 346, 357, 359, 366, 367, 368, 400, 403, 407, 439, 441, 442, 443, 444, 462, 466, 467, 471, 478, 479, 486, 487, 489, 498, 501, 506, 509, 512, 513, 517, 518, 520, 522, 524, 525, 526, 528, 531], "framework": [1, 3, 11, 13, 14, 45, 172, 173, 178, 180, 188, 194, 198, 201, 205, 206, 207, 217, 218, 222, 223, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 242, 245, 248, 250, 251, 255, 260, 261, 265, 266, 268, 270, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283, 285, 287, 289, 295, 304, 305, 332, 340, 346, 357, 358, 359, 360, 362, 401, 407, 424, 441, 442, 444, 460, 464, 467, 468, 472, 473, 474, 475, 477, 478, 479, 500, 501, 517, 518, 520, 523, 526, 527, 528, 529, 530, 531], "layer": [1, 3, 11, 14, 46, 47, 116, 117, 118, 119, 121, 122, 151, 154, 156, 158, 162, 166, 170, 178, 181, 189, 191, 192, 193, 197, 202, 211, 215, 216, 250, 257, 327, 328, 412, 414, 422, 424, 432, 442, 443, 444, 466, 474, 501, 517, 523], "mxnet_util": 2, "util": [2, 12, 17, 105, 110, 111, 139, 142, 150, 152, 153, 154, 163, 179, 186, 188, 215, 216, 257, 296, 298, 328, 338, 349, 351, 383, 388, 399, 443, 444, 445, 460, 467, 478, 481, 501, 517, 520, 525, 528, 529], "ox_util": 2, "oper": [2, 17, 43, 104, 110, 140, 148, 191, 192, 197, 215, 216, 244, 286, 327, 385, 390, 438, 459, 461, 464, 469, 498, 504, 517, 520, 522, 525, 527, 528], "activ": [2, 17, 29, 44, 141, 149, 165, 166, 181, 215, 216, 257, 346, 407, 409, 442, 443, 444, 460, 464, 466, 471, 478, 499, 500, 503, 511, 512, 513, 519, 520, 522, 525, 526, 530], "argmax": [2, 17, 29], "attent": [2, 17, 29, 161, 189, 191, 202, 215, 216, 231, 274, 436, 465, 517], "binary_op": [2, 17, 29], "concat": [2, 17, 29, 147], "conv": [2, 17, 29, 58, 62, 66, 71, 72, 73, 92, 109, 170, 215, 216, 438, 443, 444, 478, 517, 519, 520, 528], "direct_q8": [2, 17, 29], "embed_layernorm": [2, 17, 29], "gather": [2, 13, 17, 29, 215, 216, 327], "gavgpool": [2, 17, 29], "gemm": [2, 17, 29, 215, 216], "lstm": [2, 17, 29], "matmul": [2, 17, 29, 44, 52, 59, 65, 73, 94, 109, 128, 137, 197, 215, 216, 327, 471, 501, 522, 528], "maxpool": [2, 17, 29, 129, 138, 471], "norm": [2, 17, 29], "op": [2, 13, 17, 29, 45, 52, 57, 65, 66, 67, 68, 69, 70, 71, 72, 74, 78, 81, 85, 88, 91, 92, 93, 94, 96, 105, 107, 109, 123, 124, 125, 131, 133, 134, 135, 136, 141, 143, 146, 148, 150, 152, 163, 165, 170, 191, 215, 216, 294, 339, 346, 347, 385, 390, 396, 398, 400, 407, 408, 409, 420, 426, 432, 442, 443, 444, 464, 471, 478, 479, 502, 503, 517, 520, 521, 523, 525, 526, 528, 530], "pad": [2, 17, 29, 44, 71, 72, 231, 248, 274, 289, 462, 522, 527], "pool": [2, 17, 29, 508], "reduc": [2, 17, 29, 215, 216, 442, 460, 466, 478, 479, 498, 499, 517, 518, 520, 521, 522, 525, 528, 530], "resiz": [2, 17, 29, 231, 232, 244, 248, 274, 275, 286, 289, 462, 527], "split": [2, 17, 29, 43, 82, 166, 247, 248, 288, 289, 414, 438, 522, 525, 527], "unary_op": [2, 17, 29], "calibr": [2, 11, 13, 14, 17, 44, 49, 89, 90, 140, 165, 166, 172, 215, 216, 219, 220, 262, 263, 295, 332, 391, 419, 426, 442, 444, 462, 473, 474, 517, 520, 522, 528, 529, 530], "quantiz": [2, 11, 13, 14, 16, 17, 42, 43, 44, 48, 49, 88, 92, 94, 96, 99, 107, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 149, 150, 151, 152, 153, 154, 158, 159, 160, 162, 164, 165, 166, 170, 172, 177, 215, 216, 219, 220, 244, 251, 258, 262, 263, 286, 294, 295, 296, 306, 333, 339, 345, 349, 396, 398, 400, 409, 412, 414, 415, 421, 422, 426, 427, 431, 432, 442, 449, 461, 462, 467, 468, 471, 473, 474, 477, 480, 481, 486, 488, 489, 492, 505, 507, 508, 510, 516, 518, 523, 526, 527, 528, 529, 530], "smooth_quant": [2, 17, 156, 165, 169, 215, 216, 349, 520, 525], "weight_onli": [2, 17, 216, 431, 522], "tf_util": 2, "graph_rewrit": [2, 111], "bf16": [2, 44, 57, 87, 111, 150, 215, 216, 346, 407, 442, 443, 471, 478, 483, 488, 492, 498, 521, 528, 531], "gener": [2, 13, 48, 49, 87, 111, 122, 148, 151, 165, 172, 191, 211, 219, 220, 221, 230, 233, 234, 235, 236, 248, 262, 263, 264, 273, 276, 277, 278, 279, 289, 297, 305, 336, 350, 358, 386, 391, 395, 410, 412, 417, 421, 437, 438, 442, 444, 461, 465, 477, 478, 479, 481, 486, 491, 493, 495, 496, 498, 500, 501, 515, 517, 518, 520, 521, 522, 525, 526, 527, 528], "int8": [2, 18, 19, 43, 44, 87, 111, 123, 124, 125, 131, 133, 134, 135, 136, 143, 148, 166, 171, 172, 215, 216, 244, 286, 292, 293, 294, 346, 348, 407, 409, 414, 431, 432, 437, 438, 441, 442, 443, 444, 459, 462, 466, 471, 478, 479, 483, 486, 488, 489, 492, 498, 501, 503, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 530], "onnx": [2, 14, 15, 16, 29, 41, 43, 44, 87, 111, 142, 170, 215, 216, 227, 270, 292, 293, 294, 358, 365, 385, 430, 437, 441, 442, 443, 445, 461, 464, 468, 469, 471, 472, 474, 479, 480, 483, 488, 489, 501, 518, 519, 522, 523, 525, 528], "qdq": [2, 42, 87, 111, 112, 113, 142, 165, 166, 215, 216, 292, 293, 294, 414, 442, 464, 469, 474, 488, 489, 520, 523, 525], "graph_bas": [2, 87, 111], "quantize_graph": [2, 111], "qat": [2, 111, 112, 163, 216, 306, 366, 466, 467, 474, 478, 520], "quantize_graph_bas": [2, 111, 112], "quantize_graph_bn": [2, 111, 112], "quantize_graph_concatv2": [2, 111, 112], "quantize_graph_conv": [2, 111, 112], "quantize_graph_for_intel_cpu": [2, 111, 112], "quantize_graph_matmul": [2, 111, 112], "quantize_graph_pool": [2, 111, 112], "transform_graph": [2, 111], "bias_correct": [2, 111, 145], "graph_transform_bas": [2, 111, 145], "insert_log": [2, 111, 145], "rerange_quantized_concat": [2, 111, 145], "graph_convert": [2, 111], "graph_converter_without_calib": [2, 111], "graph_util": [2, 111], "quantize_graph_common": [2, 111], "smooth_quant_calibr": [2, 111], "smooth_quant_scal": [2, 111], "tf2onnx_convert": [2, 111], "torch_util": [2, 252, 296, 349, 522, 525], "layer_wise_qu": [2, 153, 216, 522], "modified_pickl": [2, 153, 154], "torch_load": [2, 153, 154], "bf16_convert": [2, 51, 87, 111, 153], "hawq_metr": [2, 153], "model_wrapp": [2, 15, 153], "pattern_detector": [2, 153], "symbolic_trac": [2, 153], "tensorflow": [2, 51, 53, 75, 76, 77, 87, 95, 101, 102, 103, 104, 105, 106, 110, 111, 112, 114, 117, 130, 140, 141, 142, 145, 148, 178, 180, 210, 215, 216, 230, 231, 232, 233, 236, 238, 240, 248, 255, 273, 274, 275, 276, 279, 281, 283, 289, 293, 294, 295, 298, 300, 304, 305, 306, 332, 340, 351, 353, 357, 358, 366, 384, 385, 389, 390, 391, 401, 432, 437, 439, 441, 442, 443, 460, 461, 464, 465, 466, 468, 471, 472, 474, 475, 478, 479, 480, 488, 489, 500, 503, 517, 518, 519, 524, 525, 528, 530], "kerasadaptor": 3, "kerasqueri": 3, "local_config_fil": [3, 11, 14, 47], "none": [3, 13, 14, 41, 43, 44, 45, 47, 48, 49, 63, 89, 102, 104, 105, 110, 116, 142, 148, 149, 151, 152, 156, 157, 158, 159, 160, 162, 164, 165, 166, 172, 173, 177, 178, 185, 187, 188, 189, 191, 195, 207, 211, 212, 213, 215, 216, 219, 220, 221, 223, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 244, 248, 249, 250, 251, 258, 262, 263, 264, 266, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 286, 289, 290, 293, 294, 295, 300, 304, 305, 306, 307, 310, 319, 324, 328, 332, 335, 336, 337, 339, 340, 341, 342, 346, 353, 357, 358, 368, 384, 389, 390, 391, 392, 394, 395, 396, 397, 398, 400, 401, 402, 403, 407, 410, 412, 417, 419, 421, 422, 424, 427, 429, 431, 432, 442, 443, 461, 462, 477, 501, 520, 522, 526, 527, 528], "defin": [3, 11, 14, 46, 86, 152, 184, 185, 191, 193, 198, 199, 200, 205, 206, 207, 208, 209, 215, 216, 219, 220, 262, 263, 307, 308, 310, 311, 312, 319, 324, 327, 328, 329, 331, 358, 391, 417, 421, 431, 436, 439, 442, 443, 461, 462, 465, 466, 471, 474, 477, 478, 499, 516, 517, 520, 522, 524, 525, 526, 528, 530], "queri": [3, 11, 13, 14, 47, 148, 165, 191, 202, 215, 216, 443, 444, 508, 520], "interfac": [3, 11, 14, 46, 86, 113, 212, 295, 319, 324, 332, 333, 424, 474, 478, 489, 507, 520, 523], "each": [3, 11, 14, 46, 141, 148, 152, 157, 165, 166, 211, 215, 216, 229, 233, 236, 244, 248, 272, 276, 279, 286, 289, 298, 300, 301, 302, 339, 351, 353, 354, 355, 400, 414, 432, 437, 442, 443, 444, 462, 464, 465, 466, 471, 478, 483, 489, 492, 498, 506, 508, 515, 517, 522, 524, 525, 526, 527, 528, 529], "adapt": [3, 11, 14, 46, 436, 441, 443, 462, 489, 518], "should": [3, 11, 14, 46, 54, 115, 116, 157, 177, 189, 191, 202, 215, 216, 219, 220, 229, 231, 233, 248, 253, 262, 263, 272, 274, 276, 289, 294, 298, 351, 357, 358, 391, 410, 421, 432, 438, 439, 442, 443, 444, 462, 465, 467, 477, 478, 484, 493, 496, 498, 500, 501, 515, 517, 520, 522, 527, 528, 530], "implement": [3, 11, 14, 46, 110, 143, 147, 149, 157, 219, 220, 226, 229, 230, 231, 233, 262, 263, 269, 272, 273, 274, 276, 297, 350, 358, 368, 391, 398, 421, 444, 461, 462, 477, 478, 489, 499, 517, 520, 522, 523, 526, 528, 530], "inherit": [3, 11, 14, 46, 177, 178, 203, 204, 209, 215, 228, 248, 250, 258, 271, 289, 329, 331, 439, 442, 443, 462], "specif": [3, 11, 14, 42, 46, 104, 116, 166, 172, 173, 180, 211, 215, 216, 231, 232, 233, 234, 238, 240, 255, 274, 275, 276, 277, 281, 283, 313, 314, 316, 317, 318, 357, 391, 414, 429, 436, 439, 442, 443, 460, 461, 464, 465, 471, 473, 477, 478, 479, 480, 481, 485, 486, 488, 492, 498, 500, 506, 515, 517, 519, 522, 528, 530], "backend": [3, 11, 14, 15, 41, 42, 46, 170, 180, 215, 216, 217, 218, 222, 223, 227, 231, 232, 234, 235, 236, 237, 238, 242, 245, 248, 254, 255, 260, 261, 265, 266, 268, 270, 274, 275, 277, 278, 279, 280, 281, 285, 287, 289, 305, 340, 358, 359, 360, 362, 401, 417, 438, 444, 464, 467, 473, 474, 478, 479, 487, 506, 511, 512, 513, 519, 522, 527, 528, 530], "own": [3, 11, 14, 46, 74, 157, 229, 248, 272, 289, 368, 439, 443, 461, 462, 474, 477, 500, 504, 515, 522, 524, 529], "mxnetadaptor": 11, "do": [11, 14, 151, 177, 207, 215, 216, 230, 231, 273, 274, 290, 294, 297, 300, 330, 350, 353, 412, 431, 436, 443, 462, 467, 471, 474, 477, 478, 493, 496, 517, 521, 523, 525, 528], "inspect": [11, 14, 523, 526], "tensor": [11, 13, 14, 15, 16, 43, 44, 70, 105, 140, 148, 152, 157, 158, 165, 166, 187, 188, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 210, 216, 248, 289, 292, 294, 327, 329, 339, 366, 400, 414, 427, 431, 432, 438, 444, 461, 462, 464, 517, 520, 523, 526, 527, 528], "dict": [11, 13, 14, 44, 45, 116, 148, 150, 151, 152, 157, 165, 166, 167, 172, 180, 184, 187, 188, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 219, 220, 230, 249, 255, 262, 263, 273, 292, 294, 299, 300, 301, 302, 304, 307, 310, 311, 312, 319, 322, 324, 327, 328, 329, 330, 331, 336, 339, 345, 348, 352, 353, 354, 355, 357, 358, 366, 391, 406, 409, 410, 412, 414, 415, 421, 422, 424, 431, 432, 438, 443, 469, 477, 517, 519, 520, 525, 526, 528], "configur": [11, 13, 14, 45, 118, 150, 165, 166, 172, 173, 211, 212, 215, 216, 219, 220, 222, 233, 236, 249, 254, 262, 263, 276, 279, 290, 294, 295, 306, 307, 308, 310, 319, 324, 328, 332, 333, 339, 357, 358, 368, 391, 400, 409, 414, 419, 421, 423, 424, 430, 431, 438, 439, 442, 443, 462, 464, 478, 485, 499, 506, 511, 512, 513, 515, 517, 520, 522, 523, 527, 528, 531], "mxnetqueri": 11, "mxnet": [12, 13, 16, 216, 226, 230, 233, 236, 240, 248, 269, 273, 276, 279, 283, 289, 295, 304, 332, 357, 358, 363, 391, 437, 441, 442, 443, 460, 461, 468, 471, 474, 475, 478, 479, 480, 519, 528, 530], "init": [12, 17, 42, 169, 179, 188, 190, 462, 477, 528], "optyp": [13, 215, 216, 292, 443], "enum": 13, "type": [13, 16, 42, 43, 44, 45, 74, 96, 105, 116, 122, 132, 140, 148, 150, 151, 152, 157, 165, 166, 167, 178, 180, 184, 185, 191, 192, 193, 198, 207, 208, 209, 211, 213, 215, 216, 229, 231, 233, 240, 248, 250, 255, 272, 274, 276, 283, 289, 294, 297, 298, 300, 304, 311, 318, 322, 327, 329, 331, 336, 342, 346, 348, 350, 351, 353, 357, 366, 368, 395, 396, 403, 407, 409, 410, 412, 414, 420, 431, 432, 442, 443, 462, 464, 467, 469, 471, 474, 478, 479, 499, 501, 506, 507, 511, 512, 520, 522, 524, 527, 528, 529, 530], "isiter": 13, "obj": [13, 105, 188, 211, 230, 273, 290, 295, 306, 307, 308, 310, 319, 324, 328, 332, 358, 368, 391, 421, 424, 432], "bool": [13, 42, 43, 44, 141, 148, 151, 157, 163, 165, 166, 193, 215, 216, 231, 233, 244, 248, 274, 276, 286, 289, 294, 298, 304, 327, 345, 351, 357, 406, 410, 412, 414, 417, 427, 431, 432, 461, 462, 477, 509, 519, 527], "check": [13, 44, 67, 68, 105, 148, 165, 166, 211, 222, 233, 276, 292, 328, 431, 432, 441, 464, 467, 475, 482, 484, 486, 493, 496, 497, 501, 504, 507, 508, 523], "whether": [13, 43, 44, 105, 116, 148, 151, 157, 165, 166, 193, 215, 216, 229, 231, 244, 248, 272, 274, 286, 289, 298, 300, 304, 327, 351, 353, 357, 412, 414, 424, 427, 431, 432, 442, 462, 477, 520, 522, 525, 527], "object": [13, 42, 43, 44, 45, 74, 86, 105, 116, 132, 148, 150, 152, 155, 157, 163, 165, 172, 177, 187, 188, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 219, 220, 221, 231, 232, 233, 248, 249, 251, 262, 263, 264, 274, 275, 276, 289, 290, 295, 300, 308, 310, 313, 314, 316, 317, 318, 319, 324, 327, 328, 329, 330, 331, 332, 336, 349, 353, 357, 358, 366, 367, 385, 390, 391, 395, 409, 420, 421, 424, 431, 432, 438, 439, 443, 449, 459, 461, 462, 470, 477, 478, 480, 516, 517, 519, 520, 527, 528, 529, 531], "i": [13, 43, 44, 45, 48, 49, 53, 54, 57, 60, 64, 70, 82, 85, 105, 132, 143, 148, 151, 152, 155, 157, 159, 163, 165, 166, 171, 172, 177, 180, 181, 187, 191, 192, 198, 203, 204, 205, 206, 207, 208, 210, 211, 215, 216, 219, 220, 221, 229, 230, 231, 232, 233, 234, 235, 238, 240, 244, 248, 249, 251, 255, 257, 258, 262, 263, 264, 272, 273, 274, 275, 276, 277, 278, 281, 283, 286, 289, 297, 300, 302, 304, 306, 311, 319, 324, 328, 329, 333, 340, 350, 353, 355, 357, 358, 368, 374, 375, 379, 391, 396, 401, 409, 410, 412, 421, 427, 431, 432, 436, 437, 438, 439, 442, 443, 444, 445, 447, 451, 454, 457, 459, 460, 461, 462, 464, 465, 466, 467, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 489, 491, 492, 493, 495, 496, 498, 499, 500, 501, 503, 504, 505, 506, 507, 508, 509, 511, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 530, 531], "iter": [13, 15, 105, 140, 148, 165, 166, 172, 192, 198, 205, 209, 215, 216, 219, 220, 224, 229, 233, 234, 251, 262, 263, 267, 272, 276, 277, 329, 331, 358, 391, 421, 424, 438, 439, 442, 459, 461, 462, 478, 517, 519, 520, 525, 526, 528, 530], "return": [13, 16, 44, 45, 53, 67, 68, 70, 74, 105, 116, 148, 150, 151, 152, 157, 163, 165, 166, 167, 172, 178, 180, 184, 185, 188, 191, 193, 194, 198, 201, 207, 208, 209, 211, 213, 219, 220, 233, 240, 244, 248, 249, 250, 255, 262, 263, 276, 283, 286, 289, 294, 297, 298, 300, 301, 302, 304, 310, 311, 318, 322, 327, 328, 329, 331, 336, 342, 346, 348, 350, 351, 353, 354, 355, 357, 358, 362, 366, 368, 385, 390, 391, 395, 403, 407, 409, 410, 412, 414, 417, 419, 420, 421, 424, 429, 431, 432, 438, 439, 443, 444, 461, 462, 467, 477, 480, 511, 512, 513, 515, 517, 520, 522, 525, 526, 528], "true": [13, 43, 44, 85, 113, 146, 148, 151, 157, 166, 172, 184, 215, 216, 229, 231, 233, 234, 247, 248, 249, 272, 274, 276, 277, 288, 289, 294, 298, 304, 322, 345, 351, 357, 368, 391, 406, 410, 412, 414, 417, 424, 431, 432, 443, 461, 462, 464, 467, 471, 477, 478, 481, 484, 485, 500, 501, 502, 503, 509, 511, 519, 520, 522, 525, 526, 527, 528, 530], "els": [13, 148, 166, 216, 229, 272, 368, 414, 429, 486, 522, 526], "fals": [13, 14, 15, 41, 42, 43, 44, 47, 48, 49, 71, 72, 89, 92, 99, 102, 103, 105, 113, 131, 136, 143, 146, 147, 148, 149, 151, 156, 157, 163, 165, 166, 172, 178, 181, 215, 216, 221, 223, 228, 230, 231, 233, 244, 248, 249, 250, 251, 257, 264, 266, 271, 273, 274, 276, 286, 289, 300, 304, 353, 357, 368, 391, 410, 412, 414, 417, 424, 427, 431, 432, 442, 443, 461, 462, 471, 477, 478, 491, 495, 501, 509, 512, 513, 519, 520, 522, 525, 526, 527, 528, 530], "boolean": 13, "ensure_list": 13, "x": [13, 54, 74, 151, 192, 215, 216, 230, 248, 273, 289, 336, 395, 410, 412, 460, 464, 467, 479, 480, 506, 507, 511, 512, 514, 520, 522, 525, 526, 527, 529], "ensur": [13, 248, 289, 336, 395, 467, 520, 527], "list": [13, 42, 43, 53, 105, 140, 148, 150, 151, 152, 161, 165, 172, 173, 185, 191, 192, 197, 202, 207, 211, 215, 216, 219, 220, 224, 231, 244, 248, 249, 262, 263, 267, 274, 286, 289, 293, 294, 297, 298, 300, 301, 302, 304, 311, 319, 324, 327, 330, 345, 350, 351, 353, 354, 355, 357, 358, 366, 374, 375, 379, 391, 406, 410, 412, 421, 422, 432, 438, 441, 442, 462, 469, 471, 475, 478, 481, 486, 488, 491, 492, 495, 503, 506, 508, 509, 515, 517, 519, 520, 521, 525, 526, 528], "input": [13, 15, 42, 43, 44, 45, 53, 60, 64, 67, 68, 70, 71, 72, 74, 82, 83, 85, 86, 105, 109, 110, 116, 122, 141, 148, 150, 160, 162, 163, 164, 165, 166, 170, 191, 192, 211, 215, 216, 219, 220, 231, 232, 233, 235, 244, 247, 248, 253, 262, 263, 274, 275, 276, 278, 286, 288, 289, 292, 293, 294, 357, 358, 362, 366, 391, 414, 420, 421, 427, 429, 431, 432, 439, 442, 443, 459, 460, 461, 462, 464, 465, 466, 467, 469, 471, 473, 477, 478, 479, 480, 481, 486, 517, 519, 520, 522, 525, 526, 527, 530], "check_mx_vers": 13, "version": [13, 53, 104, 160, 165, 191, 216, 293, 294, 349, 436, 438, 442, 471, 475, 476, 478, 491, 493, 495, 496, 518, 523, 525, 528, 529], "str": [13, 42, 44, 140, 150, 152, 157, 158, 161, 162, 163, 165, 166, 167, 178, 180, 188, 191, 215, 216, 231, 232, 233, 240, 244, 248, 250, 254, 255, 274, 275, 276, 283, 286, 289, 293, 294, 297, 298, 300, 302, 304, 311, 322, 345, 348, 350, 351, 353, 355, 357, 376, 384, 386, 389, 390, 406, 409, 410, 414, 415, 417, 420, 424, 427, 429, 432, 433, 461, 462, 477, 509, 519, 526, 527], "mx": 13, "__version__": [13, 155], "combine_cap": 13, "current": [13, 70, 104, 162, 166, 187, 188, 191, 194, 198, 201, 215, 216, 306, 313, 314, 316, 317, 318, 327, 329, 336, 340, 395, 401, 414, 432, 438, 439, 442, 444, 460, 467, 471, 478, 481, 485, 498, 506, 515, 517, 520, 522, 525, 528], "new": [13, 16, 44, 148, 162, 172, 221, 233, 248, 249, 264, 276, 289, 328, 368, 417, 437, 441, 443, 467, 478, 479, 492, 498, 499, 500, 501, 507, 508, 511, 512, 517, 518, 520, 522, 523, 524, 527, 529, 530], "combin": [13, 165, 215, 216, 219, 220, 244, 258, 262, 263, 286, 358, 391, 421, 432, 438, 442, 474, 478, 516, 518, 520, 521, 522, 527, 528], "capabl": [13, 47, 346, 407, 443, 444, 459, 471, 478, 479, 489, 500, 505, 517, 519, 520, 528, 530], "contain": [13, 67, 68, 70, 74, 139, 148, 152, 157, 165, 166, 172, 177, 188, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 211, 215, 216, 219, 220, 231, 232, 233, 262, 263, 274, 275, 276, 290, 294, 295, 300, 301, 302, 306, 319, 322, 324, 327, 328, 329, 330, 331, 332, 353, 354, 355, 358, 391, 421, 424, 431, 460, 462, 465, 474, 477, 499, 506, 511, 512, 513, 517, 522, 526, 528, 529], "make_nc_model": 13, "target": [13, 42, 43, 102, 151, 165, 191, 209, 211, 216, 328, 331, 336, 395, 412, 427, 462, 467, 478, 517, 526, 527, 528, 530], "sym_model": 13, "ctx": 13, "input_desc": 13, "convert": [13, 43, 48, 49, 50, 52, 53, 54, 55, 56, 66, 74, 86, 99, 100, 102, 103, 104, 105, 131, 136, 140, 142, 150, 165, 191, 215, 216, 231, 244, 247, 248, 274, 286, 288, 289, 293, 300, 306, 328, 346, 353, 407, 410, 438, 443, 478, 479, 483, 520, 521, 522, 525, 527, 528], "symbol": [13, 150, 163, 165, 297, 350, 358, 391, 438, 480], "model": [13, 15, 16, 29, 41, 42, 43, 44, 45, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 116, 118, 140, 141, 142, 148, 149, 150, 151, 152, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 170, 172, 177, 184, 188, 189, 191, 198, 199, 200, 203, 205, 206, 207, 209, 211, 215, 216, 219, 220, 227, 230, 231, 233, 248, 249, 252, 253, 262, 263, 270, 273, 274, 276, 289, 290, 292, 293, 294, 295, 296, 304, 305, 306, 307, 310, 313, 314, 316, 317, 318, 319, 324, 328, 329, 330, 331, 332, 333, 335, 336, 337, 339, 340, 341, 342, 349, 357, 358, 368, 384, 389, 390, 391, 392, 394, 395, 396, 397, 398, 400, 401, 402, 403, 409, 410, 412, 414, 415, 419, 420, 421, 427, 429, 431, 432, 434, 437, 438, 439, 441, 442, 444, 449, 459, 460, 461, 462, 464, 465, 466, 467, 468, 473, 474, 476, 477, 479, 481, 486, 488, 489, 492, 498, 500, 505, 507, 508, 509, 510, 515, 516, 518, 520, 523, 524, 526, 527, 528, 529, 530], "an": [13, 67, 68, 70, 105, 141, 143, 148, 152, 155, 157, 165, 171, 181, 198, 215, 216, 224, 229, 233, 248, 252, 257, 267, 272, 276, 289, 296, 297, 301, 302, 310, 311, 333, 349, 350, 354, 355, 358, 385, 390, 391, 410, 421, 432, 434, 436, 438, 439, 441, 442, 444, 460, 461, 462, 463, 464, 469, 477, 478, 479, 481, 485, 486, 489, 498, 501, 502, 503, 506, 509, 515, 517, 518, 520, 522, 523, 524, 525, 526, 527, 528], "neural": [13, 152, 172, 177, 180, 193, 194, 195, 196, 207, 215, 216, 243, 244, 245, 248, 249, 252, 255, 258, 286, 287, 289, 291, 296, 303, 304, 306, 319, 324, 327, 330, 332, 333, 338, 344, 349, 356, 357, 358, 362, 369, 391, 398, 399, 405, 429, 434, 437, 442, 443, 444, 459, 460, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 476, 479, 480, 482, 483, 486, 488, 489, 491, 493, 495, 496, 497, 509, 515, 516, 518, 520, 522, 523, 525, 526, 527, 528, 530, 531], "compressor": [13, 172, 177, 180, 195, 196, 207, 215, 216, 243, 244, 245, 248, 249, 252, 255, 258, 286, 287, 289, 291, 296, 303, 304, 306, 327, 330, 332, 333, 338, 344, 349, 356, 357, 358, 362, 369, 391, 399, 405, 429, 434, 437, 439, 442, 443, 444, 459, 460, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 476, 479, 480, 481, 482, 486, 488, 489, 491, 493, 495, 496, 497, 500, 501, 502, 503, 505, 506, 515, 516, 517, 518, 520, 522, 523, 525, 526, 527, 528, 529, 530, 531], "tupl": [13, 105, 148, 165, 185, 216, 219, 220, 244, 248, 262, 263, 286, 289, 294, 345, 358, 391, 406, 415, 421, 431, 443, 462, 477, 478, 520, 527], "symnet": 13, "arg": [13, 53, 105, 165, 175, 231, 232, 233, 274, 275, 276, 327, 336, 395, 410, 412, 415, 427, 428, 462, 467, 478, 487, 517, 520, 522, 525, 526, 527], "aux": 13, "data": [13, 42, 43, 44, 55, 105, 140, 148, 152, 157, 162, 165, 166, 170, 191, 215, 216, 219, 220, 249, 251, 262, 263, 294, 296, 336, 346, 348, 349, 358, 384, 389, 391, 395, 407, 409, 414, 421, 424, 429, 432, 441, 442, 460, 461, 462, 467, 471, 472, 475, 477, 478, 479, 500, 501, 503, 506, 511, 512, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529], "descript": [13, 132, 410, 438, 443, 444, 461, 506, 510, 525], "ncmodel": 13, "fuse": [13, 58, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 91, 92, 93, 94, 96, 131, 136, 163, 165, 170, 438, 525, 526], "suppli": 13, "get_framework_nam": 13, "get": [13, 42, 44, 45, 67, 68, 70, 104, 105, 148, 151, 158, 162, 165, 172, 180, 181, 185, 187, 188, 189, 191, 194, 201, 208, 209, 210, 211, 213, 216, 224, 248, 249, 255, 257, 267, 289, 294, 327, 329, 331, 339, 346, 348, 357, 366, 391, 400, 407, 409, 412, 420, 424, 427, 429, 432, 443, 460, 470, 474, 475, 478, 484, 501, 503, 511, 512, 518, 522, 525, 528, 529, 532], "name": [13, 43, 45, 53, 67, 68, 70, 104, 105, 110, 116, 140, 148, 150, 151, 152, 157, 158, 162, 163, 165, 167, 172, 173, 181, 184, 185, 187, 191, 193, 198, 201, 202, 207, 208, 209, 210, 211, 213, 215, 216, 231, 232, 233, 236, 240, 246, 248, 249, 253, 256, 257, 274, 275, 276, 279, 283, 289, 292, 293, 294, 299, 304, 322, 327, 329, 331, 346, 348, 352, 357, 362, 366, 368, 391, 407, 409, 412, 420, 422, 424, 429, 432, 437, 438, 444, 462, 464, 467, 469, 471, 476, 477, 478, 480, 484, 491, 495, 499, 500, 506, 517, 520, 523, 524, 526, 528, 530, 531], "context": [13, 432, 519, 522], "prepare_model_data": 13, "nc_model": [13, 319, 324], "data_x": 13, "prepar": [13, 44, 165, 438, 441, 462, 467, 472, 500, 511, 512, 513, 517, 520], "dataload": [13, 15, 42, 44, 140, 141, 149, 151, 152, 162, 165, 166, 172, 188, 189, 191, 207, 211, 219, 220, 231, 242, 252, 262, 263, 274, 285, 290, 296, 319, 324, 333, 349, 384, 389, 391, 421, 424, 438, 441, 442, 443, 464, 465, 466, 467, 472, 473, 478, 479, 500, 501, 516, 517, 520, 521, 522, 525, 526, 527, 529, 530], "need": [13, 42, 105, 109, 162, 166, 172, 191, 207, 216, 219, 220, 221, 229, 230, 233, 240, 248, 251, 253, 254, 262, 263, 264, 272, 273, 276, 283, 289, 294, 333, 339, 357, 358, 368, 391, 400, 421, 431, 432, 438, 442, 461, 462, 464, 465, 467, 474, 478, 481, 483, 484, 487, 491, 492, 493, 495, 496, 498, 499, 500, 501, 502, 503, 505, 509, 511, 517, 519, 520, 521, 522, 523, 525, 527, 528, 530], "run": [13, 140, 148, 157, 166, 172, 198, 211, 215, 216, 219, 220, 230, 247, 249, 262, 263, 273, 288, 328, 329, 336, 358, 391, 395, 421, 442, 459, 467, 470, 471, 478, 481, 483, 485, 486, 487, 489, 491, 492, 493, 495, 496, 498, 506, 507, 508, 509, 511, 512, 513, 518, 520, 522, 523, 524, 526, 528, 530], "loader": [13, 140, 219, 220, 262, 263, 358, 391, 421, 427, 461, 520], "dataloaderwrap": 13, "prepare_model": 13, "create_data_exampl": 13, "creat": [13, 16, 105, 155, 215, 216, 221, 231, 233, 251, 264, 274, 276, 300, 310, 311, 346, 353, 385, 390, 407, 409, 410, 424, 436, 439, 442, 462, 480, 491, 493, 495, 496, 499, 511, 512, 513, 517, 520, 524, 526, 528, 529], "exampl": [13, 44, 152, 157, 165, 166, 172, 173, 185, 191, 192, 207, 215, 216, 231, 232, 233, 244, 248, 274, 275, 276, 286, 289, 300, 301, 302, 304, 330, 353, 354, 355, 357, 358, 368, 391, 409, 410, 414, 420, 421, 431, 432, 436, 441, 443, 444, 449, 473, 474, 481, 484, 485, 486, 489, 506, 509, 521, 523, 527, 528, 529, 532], "prepare_dataload": 13, "io": [13, 157, 504], "ndarray_to_devic": 13, "ndarrai": [13, 42, 43, 67, 68, 70, 248, 289, 422, 470, 527], "devic": [13, 79, 89, 90, 91, 92, 93, 94, 97, 107, 131, 136, 147, 151, 156, 157, 159, 165, 166, 188, 191, 192, 207, 211, 215, 216, 412, 417, 427, 443, 461, 465, 478, 479, 481, 484, 489, 498, 517, 519, 522], "is_model_quant": 13, "query_quantizable_nod": 13, "node": [13, 42, 43, 44, 50, 53, 54, 55, 56, 60, 62, 64, 67, 68, 70, 74, 77, 80, 82, 83, 84, 98, 102, 103, 105, 110, 132, 140, 148, 191, 292, 294, 366, 390, 442, 464, 467, 501, 505, 508, 511, 512, 513, 522, 526, 528, 531], "given": [13, 16, 67, 68, 70, 104, 105, 116, 148, 158, 165, 248, 289, 300, 353, 391, 420, 439, 444, 517, 525, 527], "map": [13, 43, 105, 148, 157, 165, 216, 248, 289, 292, 294, 295, 299, 301, 302, 304, 319, 324, 329, 332, 352, 354, 355, 357, 462, 467, 477, 478, 491, 495, 503, 517, 520, 522], "quantize_sym_model": 13, "qconfig": [13, 165, 431, 522, 526], "accord": [13, 122, 165, 172, 215, 216, 231, 232, 233, 248, 274, 275, 276, 289, 339, 398, 400, 424, 439, 442, 462, 467, 501, 506, 511, 512, 513, 517, 521, 525, 527, 528], "run_forward": 13, "b_filter": 13, "collector": [13, 152, 422], "pre_batch": 13, "post_batch": 13, "forward": [13, 165, 211, 443, 478, 500, 517, 519, 520, 522, 525, 526], "propag": [13, 100], "filter": [13, 231, 232, 233, 234, 235, 236, 238, 242, 274, 275, 276, 277, 278, 279, 281, 285, 296, 349, 432, 444, 462, 474, 517, 526], "which": [13, 42, 55, 83, 110, 151, 152, 157, 162, 166, 187, 191, 192, 194, 198, 199, 200, 202, 205, 206, 207, 209, 211, 215, 216, 231, 232, 233, 244, 249, 274, 275, 276, 286, 297, 302, 311, 313, 314, 316, 317, 318, 322, 327, 328, 329, 331, 336, 350, 355, 357, 362, 368, 391, 395, 412, 420, 432, 436, 438, 439, 442, 443, 444, 460, 461, 462, 464, 465, 467, 470, 471, 474, 477, 478, 479, 480, 482, 486, 489, 492, 498, 499, 500, 503, 506, 511, 512, 513, 516, 517, 519, 520, 521, 522, 523, 525, 526, 527, 528, 529, 530], "batch": [13, 165, 221, 223, 224, 229, 230, 251, 264, 266, 267, 272, 273, 421, 461, 465, 466, 478, 516, 517, 527, 528, 531], "infer": [13, 105, 140, 165, 166, 191, 295, 332, 366, 368, 391, 421, 442, 443, 460, 465, 466, 478, 479, 498, 515, 517, 518, 520, 522, 525, 526, 528], "collect": [13, 16, 43, 165, 246, 248, 251, 253, 254, 256, 289, 302, 304, 355, 357, 422, 432, 443, 520, 526, 528], "inform": [13, 152, 187, 188, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 216, 219, 220, 251, 253, 254, 262, 263, 327, 329, 330, 331, 333, 357, 432, 436, 437, 440, 441, 442, 443, 444, 445, 447, 451, 454, 457, 460, 465, 471, 478, 480, 493, 496, 499, 500, 503, 504, 506, 507, 511, 512, 517, 521, 522, 523, 526, 530, 531, 532], "dure": [13, 140, 155, 157, 193, 197, 209, 215, 216, 327, 331, 368, 432, 443, 464, 478, 480, 505, 515, 516, 517, 520, 525, 526, 530], "call": [13, 42, 157, 162, 167, 191, 199, 200, 205, 300, 329, 353, 438, 439, 442, 461, 473, 487, 489, 499, 517, 520, 525, 526, 527], "prior": [13, 88, 528], "after": [13, 78, 148, 165, 189, 193, 198, 200, 205, 215, 216, 231, 244, 248, 251, 274, 286, 289, 329, 396, 410, 427, 432, 439, 443, 462, 464, 465, 466, 469, 474, 477, 478, 491, 492, 495, 499, 503, 515, 516, 517, 520, 521, 522, 524, 525, 526, 527, 528], "count": [13, 439, 462, 522], "int": [13, 16, 42, 43, 44, 105, 140, 148, 149, 161, 165, 166, 189, 215, 216, 230, 231, 232, 244, 248, 273, 274, 275, 286, 289, 293, 294, 298, 300, 304, 311, 351, 353, 357, 376, 385, 390, 409, 410, 414, 417, 427, 432, 461, 462, 477, 478, 509, 519, 522, 527], "make_symbol_block": 13, "gluon": [13, 358, 391, 480], "symbolblock": 13, "make_modul": 13, "parse_tune_config": 13, "tune_cfg": [13, 148, 150, 165, 442, 444, 528], "quantizable_nod": 13, "strategi": [13, 165, 205, 215, 216, 217, 233, 260, 276, 296, 349, 441, 442, 443, 444, 449, 460, 461, 467, 474, 478, 486, 498, 503, 518, 519, 520, 521, 522, 523, 529, 530], "config": [13, 44, 115, 116, 118, 122, 165, 172, 173, 187, 188, 189, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 215, 219, 220, 231, 262, 263, 274, 313, 314, 316, 317, 318, 319, 324, 327, 328, 329, 330, 331, 346, 347, 349, 358, 385, 390, 407, 408, 409, 410, 415, 421, 424, 431, 432, 439, 441, 443, 444, 449, 459, 461, 464, 465, 466, 467, 469, 472, 474, 477, 478, 479, 480, 500, 501, 516, 517, 519, 520, 521, 522, 524, 526, 528], "tune": [13, 45, 172, 215, 216, 219, 220, 231, 233, 262, 263, 274, 276, 295, 332, 334, 335, 336, 337, 339, 340, 341, 342, 345, 346, 347, 348, 358, 368, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 406, 407, 408, 409, 421, 432, 442, 443, 460, 461, 462, 464, 467, 474, 476, 478, 479, 498, 502, 505, 507, 508, 515, 517, 518, 521, 523, 524, 526, 530], "from": [13, 43, 45, 61, 67, 68, 70, 105, 148, 157, 158, 162, 165, 166, 172, 177, 178, 185, 187, 188, 194, 195, 196, 197, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 215, 216, 219, 220, 221, 224, 228, 231, 232, 233, 234, 235, 236, 238, 243, 244, 250, 251, 254, 262, 263, 264, 267, 271, 274, 275, 276, 277, 278, 279, 281, 286, 290, 292, 293, 294, 297, 300, 301, 302, 306, 311, 327, 328, 329, 331, 346, 348, 350, 353, 354, 355, 358, 366, 368, 391, 407, 409, 410, 414, 417, 421, 424, 427, 431, 432, 436, 437, 438, 439, 442, 444, 459, 461, 462, 464, 465, 466, 467, 468, 469, 470, 472, 474, 477, 479, 480, 481, 485, 486, 487, 489, 499, 501, 503, 504, 508, 511, 512, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529], "distribute_calib_tensor": 13, "calib_tensor": 13, "calib_cfg": 13, "tensor_to_nod": 13, "distribut": [13, 16, 143, 171, 215, 216, 221, 223, 224, 228, 229, 230, 251, 264, 266, 267, 271, 272, 273, 426, 441, 443, 461, 465, 475, 493, 496, 500, 503, 511, 518, 520, 522, 523, 525, 529, 531], "depend": [13, 219, 220, 249, 262, 263, 358, 391, 421, 437, 470, 471, 504, 519, 520, 528], "algorithm": [13, 44, 151, 165, 173, 184, 212, 216, 297, 304, 312, 349, 350, 357, 420, 424, 426, 439, 442, 443, 444, 465, 466, 471, 474, 487, 492, 517, 520, 526, 530], "set": [13, 43, 57, 96, 105, 115, 148, 157, 162, 165, 172, 180, 211, 213, 215, 216, 219, 220, 221, 231, 233, 236, 248, 249, 254, 255, 262, 263, 264, 274, 276, 279, 289, 300, 306, 319, 324, 328, 333, 353, 357, 358, 366, 390, 391, 410, 420, 421, 429, 432, 436, 439, 443, 459, 461, 462, 465, 467, 469, 471, 473, 474, 475, 477, 478, 479, 481, 483, 485, 499, 500, 501, 502, 503, 504, 508, 511, 517, 519, 520, 522, 524, 525, 528, 530], "kl": [13, 16, 215, 216, 422, 426, 443, 444, 460, 471, 478, 528, 530], "minmax": [13, 16, 443, 444, 460, 471, 520, 530], "calib_model": 13, "qsym_model": 13, "calib_data": [13, 156], "calibdata": 13, "threshold": [13, 168, 422, 426, 477], "amp_convert": 13, "amp_cfg": 13, "support": [13, 42, 43, 44, 97, 104, 162, 170, 178, 180, 188, 194, 201, 205, 206, 215, 216, 219, 220, 230, 231, 233, 240, 244, 248, 250, 251, 252, 255, 262, 263, 273, 274, 276, 283, 286, 289, 296, 304, 306, 311, 327, 329, 333, 340, 346, 349, 357, 358, 362, 368, 391, 401, 407, 410, 421, 424, 426, 427, 432, 434, 441, 443, 478, 481, 486, 489, 492, 498, 505, 506, 509, 518, 521, 524, 528, 529], "amp": [13, 481, 488, 507, 522], "wrap": [13, 105, 116, 178, 250, 300, 353, 438, 467, 493, 496], "dataiterload": 13, "data_it": [13, 191], "collectorbas": 13, "calibcollector": 13, "include_tensors_kl": 13, "include_tensors_minmax": 13, "num_bin": [13, 16, 422], "8001": [13, 422, 506, 511, 512, 513], "tensorcollector": 13, "include_nod": 13, "qtensor_to_tensor": 13, "build": [13, 42, 44, 115, 167, 168, 170, 171, 307, 310, 361, 363, 365, 366, 367, 442, 443, 444, 475, 480, 491, 493, 495, 496, 499, 518, 528], "up": [13, 100, 202, 248, 289, 328, 467, 468, 471, 474, 489, 493, 496, 498, 517, 518, 519, 520, 524, 527, 528, 530], "namecollector": 13, "cache_kl": 13, "cache_minmax": 13, "tensors_kl": 13, "tensors_minmax": 13, "onnxruntimeadaptor": 14, "rt": 14, "onnxrt_weightonlyadaptor": 14, "onnxrt_qlinearopsadaptor": [14, 442], "onnxrt_integeropsadaptor": 14, "onnxrt_qdqadaptor": 14, "onnxrtqueri": 14, "dynam": [14, 157, 216, 221, 264, 294, 346, 407, 442, 461, 465, 469, 474, 478, 481, 486, 487, 488, 489, 492, 498, 518, 528, 531], "static": [14, 41, 42, 47, 162, 170, 191, 216, 294, 346, 391, 407, 442, 443, 444, 464, 469, 474, 478, 481, 486, 487, 488, 489, 492, 498, 501, 509, 511, 512, 513, 525, 528, 531], "format": [14, 18, 43, 53, 148, 165, 215, 216, 231, 232, 233, 274, 275, 276, 294, 300, 306, 346, 353, 407, 410, 427, 441, 443, 444, 462, 467, 469, 477, 478, 479, 480, 481, 503, 506, 518, 520, 522, 523], "onnxrtaug": 15, "dump_op_typ": 15, "black_nod": [15, 140], "white_nod": 15, "cpuexecutionprovid": [15, 41, 42, 479, 520], "reduce_rang": [15, 41, 42, 215, 216, 444, 519], "kwarg": [15, 43, 105, 122, 123, 124, 125, 126, 127, 128, 129, 132, 133, 134, 135, 137, 138, 158, 165, 166, 175, 189, 215, 216, 233, 246, 248, 253, 256, 276, 289, 345, 347, 357, 358, 359, 361, 363, 365, 366, 367, 391, 406, 408, 410, 412, 414, 415, 421, 427, 428, 431, 432, 461], "augment": 15, "dump": [15, 155, 165, 172, 294, 432, 437, 503, 520, 523, 526], "calib_registri": 16, "calib_method": 16, "calibratorbas": 16, "minmaxcalibr": 16, "percentilecalibr": 16, "2048": [16, 151, 166, 412, 417, 432, 522], "percentil": [16, 44, 140, 166, 414, 460], "99": [16, 531], "999": [16, 530], "option": [16, 44, 105, 157, 165, 166, 193, 215, 216, 219, 220, 231, 248, 262, 263, 274, 289, 293, 294, 300, 306, 327, 333, 346, 349, 353, 357, 358, 391, 407, 409, 410, 414, 421, 425, 427, 432, 443, 444, 461, 462, 471, 475, 478, 492, 506, 509, 511, 512, 513, 517, 520, 522, 524, 527, 528, 530], "number": [16, 44, 67, 68, 105, 140, 165, 166, 185, 189, 195, 196, 215, 216, 229, 232, 244, 248, 272, 275, 286, 289, 301, 302, 304, 327, 336, 354, 355, 357, 385, 390, 395, 410, 424, 432, 459, 461, 462, 467, 477, 506, 508, 517, 520, 522, 524, 525, 527, 528], "bin": [16, 157, 158, 432, 470], "histogram": [16, 422, 432, 500, 526], "valu": [16, 43, 44, 55, 67, 68, 70, 89, 90, 105, 143, 148, 157, 165, 171, 172, 185, 187, 191, 192, 202, 210, 211, 212, 213, 215, 216, 219, 220, 231, 234, 235, 244, 248, 249, 262, 263, 274, 277, 278, 286, 289, 300, 304, 328, 336, 339, 346, 353, 357, 358, 391, 395, 400, 407, 409, 410, 421, 422, 424, 432, 438, 443, 444, 460, 462, 464, 471, 477, 478, 479, 484, 501, 503, 509, 515, 517, 519, 520, 522, 523, 525, 527, 528, 530], "default": [16, 44, 97, 148, 157, 165, 166, 173, 211, 213, 215, 216, 219, 220, 223, 231, 232, 233, 244, 248, 262, 263, 266, 274, 275, 276, 286, 289, 293, 294, 297, 306, 328, 348, 350, 357, 366, 409, 414, 417, 419, 424, 427, 432, 438, 442, 461, 462, 471, 474, 475, 477, 478, 479, 486, 489, 491, 495, 503, 506, 511, 512, 513, 515, 517, 519, 520, 521, 522, 524, 525, 527, 528, 530], "float": [16, 43, 44, 140, 141, 152, 166, 193, 198, 208, 211, 215, 216, 231, 244, 274, 286, 298, 300, 301, 302, 329, 351, 353, 354, 355, 406, 410, 414, 417, 419, 429, 432, 462, 477, 519, 520, 525, 527], "A": [16, 54, 74, 75, 103, 116, 140, 141, 148, 155, 165, 177, 184, 185, 187, 188, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 215, 216, 233, 248, 251, 253, 254, 276, 289, 290, 297, 300, 301, 302, 304, 307, 310, 311, 312, 319, 322, 324, 327, 328, 329, 330, 331, 336, 350, 353, 354, 355, 357, 358, 362, 366, 395, 421, 432, 437, 443, 461, 462, 468, 471, 477, 478, 480, 491, 492, 495, 498, 506, 517, 518, 520, 522, 525, 527, 528, 530], "between": [16, 42, 143, 171, 204, 215, 216, 248, 289, 301, 304, 354, 357, 385, 390, 432, 438, 442, 443, 444, 460, 464, 465, 474, 477, 478, 489, 520, 522, 523, 524, 525, 527, 528], "0": [16, 43, 44, 53, 90, 105, 148, 156, 157, 165, 166, 168, 170, 178, 185, 187, 189, 211, 215, 216, 221, 223, 228, 230, 231, 234, 235, 238, 244, 248, 250, 251, 264, 266, 271, 273, 274, 277, 278, 281, 286, 289, 294, 295, 304, 311, 319, 324, 332, 357, 368, 391, 396, 410, 414, 417, 427, 438, 461, 462, 465, 467, 469, 470, 471, 475, 476, 477, 478, 479, 484, 486, 491, 495, 501, 511, 512, 517, 519, 520, 522, 523, 524, 525, 526, 527, 528, 530], "100": [16, 172, 185, 215, 216, 233, 276, 410, 459, 462, 467, 473, 478, 503, 519, 520, 527, 528, 530, 531], "klcalibr": 16, "128": [16, 44, 149, 151, 165, 166, 231, 234, 235, 248, 274, 277, 278, 289, 412, 417, 462, 478, 520, 522, 527, 531], "num_quantized_bin": 16, "histogramcollector": 16, "collctor": 16, "smooth_distribut": 16, "p": [16, 499, 500, 522], "ep": [16, 171, 479], "0001": [16, 185, 215, 216, 465, 478, 519], "smooth": [16, 140, 141, 148, 162, 170, 215, 216, 345, 517, 528], "discret": [16, 185, 528], "mai": [16, 148, 155, 157, 313, 314, 316, 317, 318, 410, 436, 437, 443, 460, 464, 469, 470, 476, 479, 491, 495, 501, 504, 506, 518, 520, 522, 528], "have": [16, 74, 83, 141, 148, 157, 188, 192, 194, 201, 229, 251, 272, 297, 300, 327, 329, 350, 353, 357, 391, 409, 410, 436, 437, 443, 444, 461, 462, 464, 467, 471, 476, 477, 478, 479, 481, 498, 501, 504, 506, 511, 512, 513, 515, 517, 520, 522, 525, 528, 529], "been": [16, 157, 188, 194, 201, 297, 327, 329, 350, 439, 444, 465, 478, 479, 498, 522, 525], "normal": [16, 33, 248, 289, 302, 355, 478, 507, 515, 522, 525, 527], "1": [16, 42, 43, 44, 54, 74, 89, 105, 109, 113, 146, 148, 157, 160, 162, 165, 166, 168, 170, 171, 172, 178, 185, 187, 199, 200, 202, 215, 216, 221, 223, 228, 230, 231, 232, 234, 235, 238, 239, 244, 248, 249, 250, 251, 264, 266, 271, 273, 274, 275, 277, 278, 281, 282, 286, 289, 295, 300, 301, 302, 304, 319, 324, 329, 332, 333, 353, 354, 355, 357, 368, 391, 409, 410, 414, 417, 424, 427, 432, 436, 438, 441, 442, 444, 460, 461, 462, 464, 465, 469, 471, 472, 475, 477, 479, 482, 484, 500, 501, 508, 509, 511, 512, 513, 515, 516, 517, 519, 520, 522, 523, 524, 525, 526, 527, 528, 529, 530], "replac": [16, 158, 162, 165, 166, 302, 355, 467, 478, 489, 523], "zero": [16, 43, 44, 151, 166, 198, 211, 248, 289, 329, 412, 432, 441, 503, 517, 520, 522, 525, 527, 528], "multipli": [16, 215, 216, 522], "scale": [16, 43, 44, 100, 141, 143, 151, 160, 162, 164, 165, 166, 170, 171, 244, 248, 286, 289, 412, 414, 520, 522, 524, 525, 527, 528], "factor": [16, 141, 522, 525, 531], "take": [16, 193, 216, 219, 220, 224, 248, 253, 262, 263, 267, 289, 327, 336, 357, 358, 391, 395, 421, 436, 438, 439, 461, 464, 465, 471, 478, 498, 517, 520, 521, 522, 527, 528, 530], "correspond": [16, 152, 191, 202, 215, 216, 231, 274, 297, 300, 304, 350, 353, 357, 424, 432, 442, 471, 478, 517, 519, 520, 524, 528], "amount": 16, "off": [16, 67, 68, 70, 437, 522], "non": [16, 328, 432, 438, 464, 522, 528], "ref": [16, 148], "http": [16, 151, 152, 187, 195, 196, 205, 206, 207, 231, 233, 274, 276, 297, 298, 300, 301, 302, 327, 329, 330, 350, 351, 353, 354, 355, 357, 391, 412, 417, 438, 441, 462, 464, 472, 475, 476, 478, 487, 493, 496, 500, 502, 503, 504, 505, 506, 509, 511, 512, 513, 517, 523], "hanj": 16, "c": [16, 74, 233, 276, 432, 462, 470, 475, 522, 528], "illinoi": 16, "edu": [16, 233, 276, 462], "cs412": 16, "bk3": 16, "diverg": [16, 422, 426, 444, 460, 465, 528], "pdf": 16, "github": [16, 152, 195, 196, 207, 231, 274, 297, 298, 301, 302, 327, 330, 350, 351, 354, 355, 357, 391, 437, 441, 462, 464, 468, 475, 476, 478, 487, 493, 496, 500, 502, 503, 504, 505, 506, 509, 512, 513, 523], "com": [16, 152, 195, 196, 207, 231, 274, 297, 298, 301, 302, 327, 330, 350, 351, 354, 355, 357, 391, 436, 441, 462, 464, 472, 475, 476, 478, 481, 487, 500, 502, 503, 505, 506, 509, 512, 513, 523, 524, 531], "apach": [16, 476], "incub": 16, "blob": [16, 152, 195, 196, 297, 298, 301, 302, 327, 350, 351, 354, 355, 357, 391, 478, 487, 509, 512, 513], "master": [16, 195, 196, 207, 297, 298, 301, 302, 327, 330, 350, 351, 354, 355, 357, 391, 478, 528], "python": [16, 75, 148, 155, 157, 233, 252, 276, 296, 349, 410, 432, 434, 437, 438, 462, 464, 467, 470, 475, 478, 483, 489, 492, 498, 502, 503, 505, 506, 508, 511, 513, 517, 518, 527], "contrib": [16, 296, 349], "py": [16, 148, 152, 172, 198, 215, 216, 298, 300, 301, 302, 329, 351, 353, 354, 355, 410, 438, 442, 464, 467, 475, 478, 483, 485, 486, 487, 493, 496, 500, 502, 503, 505, 506, 508, 509, 511, 512, 513, 520, 523, 526], "microsoft": [16, 441, 442], "onnxruntim": [16, 215, 216, 227, 233, 240, 270, 276, 283, 305, 385, 442, 460, 461, 474, 475, 479, 501, 519], "main": [16, 151, 180, 185, 202, 207, 255, 330, 412, 415, 419, 438, 461, 464, 467, 478, 485, 487, 499, 508, 517, 520, 522], "tool": [16, 148, 293, 432, 441, 442, 478, 491, 495, 501, 504, 505, 506, 517, 518, 520], "arrai": [16, 43, 44, 148, 157, 248, 289, 300, 311, 353, 432, 527], "small": [16, 67, 68, 69, 70, 398, 439, 503, 504, 517, 522, 528, 531], "probabl": [16, 215, 216, 426, 522], "activationoper": 18, "onnx_quant": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40], "onnx_nod": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 87, 101, 111], "removableactivationoper": 18, "remov": [18, 43, 56, 57, 60, 74, 80, 83, 84, 85, 96, 98, 140, 189, 202, 302, 355, 436, 478, 491, 495, 504, 511, 512, 517, 526], "qactivationoper": 18, "children": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 34, 35, 36, 38, 39, 158], "initi": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 34, 35, 36, 38, 39, 42, 43, 44, 105, 116, 148, 157, 178, 198, 219, 220, 228, 231, 250, 262, 263, 271, 274, 328, 329, 346, 391, 407, 421, 439, 444, 462, 477, 497, 517, 520, 525, 528], "qoper": [18, 34, 215, 216, 469, 501], "float16activationoper": 18, "float16": [18, 21, 43, 427, 462], "argmaxoper": 19, "qargmaxoper": 19, "attentionoper": 20, "qattentionoper": 20, "qattent": 20, "binari": [21, 148, 304, 357, 470, 477, 493, 496, 523], "binaryoper": 21, "binarydirect8bitoper": 21, "qbinaryoper": 21, "qbinari": 21, "float16binaryoper": 21, "concatoper": 22, "qconcatoper": 22, "qconcat": 22, "convoper": 23, "qconvoper": 23, "qlinearconv": 23, "direct8bit": 24, "direct8bitoper": 24, "qdirectoper": 24, "qdirect": 24, "embedlayernorm": 25, "embedlayernormalizationoper": 25, "qembedlayernormalizationoper": 25, "qembedlayernorm": 25, "gatheroper": 26, "qgatheroper": 26, "qgather": 26, "globalaveragepool": 27, "globalaveragepooloper": 27, "qglobalaveragepooloper": 27, "qlinearglobalaveragepool": 27, "gemmoper": 28, "qgemmoper": 28, "qgemm": 28, "lstmoper": 30, "matmuloper": 31, "qmatmuloper": 31, "qlinearmatmul": 31, "fusedmatmuloper": 31, "fusedmatmul": 31, "maxpooloper": 32, "qmaxpooloper": 32, "qmaxpool": 32, "batchnormalizationoper": 33, "batchnorm": [33, 62, 67, 121, 438, 525], "normalizationoper": 33, "op_registri": 34, "op_typ": [34, 140, 141, 148, 347, 408], "qop_registri": 34, "padoper": 35, "qpadoper": 35, "qpad": 35, "averagepool": 36, "pooloper": 36, "qpooloper": 36, "qlinearaveragepool": 36, "reduceoper": 37, "reduceminmaxoper": 37, "reducemin": 37, "reducemax": 37, "resizeoper": 38, "qresizeoper": 38, "qresiz": 38, "splitoper": 39, "qsplitoper": 39, "qsplit": 39, "unari": 40, "unaryoper": 40, "unarydirect8bitoper": 40, "q_config": [41, 165, 294, 442], "mode": [41, 42, 43, 45, 110, 157, 162, 240, 283, 300, 346, 353, 366, 407, 429, 431, 432, 442, 443, 464, 474, 491, 495, 503, 504, 520, 521, 522, 528], "quantization_param": 41, "op_types_to_quant": 41, "fallback_list": 41, "fp32": [41, 42, 44, 79, 131, 136, 143, 165, 166, 171, 215, 216, 219, 220, 262, 263, 293, 294, 304, 339, 346, 357, 396, 400, 407, 414, 417, 424, 427, 431, 432, 437, 441, 442, 444, 464, 471, 472, 477, 478, 479, 488, 500, 501, 502, 503, 519, 520, 521, 522, 523, 524, 525, 526, 528, 530, 531], "add_qdq_pair_to_weight": [41, 215, 216, 520], "optypes_to_exclude_output_qu": [41, 215, 216, 520], "dedicated_qdq_pair": [41, 215, 216, 520], "smoothquant": [42, 162, 165, 170, 441, 518, 522, 529], "onnxrt": [42, 43, 44, 231, 233, 240, 248, 274, 276, 283, 289, 304, 357, 384, 430, 442, 464, 479, 500, 520, 531], "get_quant_dequant_output": 42, "input_data": [42, 461], "output_data": 42, "loss": [42, 178, 215, 216, 250, 295, 304, 319, 324, 332, 357, 421, 460, 464, 465, 466, 467, 468, 477, 478, 479, 489, 501, 503, 516, 517, 518, 520, 522, 525, 528, 530], "output": [42, 43, 44, 53, 57, 59, 74, 98, 105, 110, 148, 165, 166, 175, 181, 191, 192, 197, 211, 213, 215, 216, 219, 220, 253, 257, 262, 263, 293, 294, 297, 327, 350, 357, 358, 366, 391, 414, 421, 427, 428, 432, 438, 442, 443, 465, 466, 467, 469, 471, 473, 477, 478, 480, 489, 498, 499, 501, 506, 507, 511, 512, 513, 516, 517, 519, 520, 522, 523, 525, 526, 527, 528, 530], "numpi": [42, 43, 67, 68, 70, 105, 148, 248, 289, 300, 311, 353, 470, 525, 527], "7": [42, 166, 172, 215, 216, 368, 414, 444, 459, 470, 471, 475, 478, 517, 520, 523, 525, 528, 531], "bit": [42, 44, 149, 165, 166, 215, 216, 409, 414, 444, 460, 466, 479, 518, 520, 522, 525], "execut": [42, 43, 53, 151, 157, 172, 198, 199, 200, 215, 216, 329, 333, 335, 390, 391, 392, 394, 412, 421, 424, 431, 432, 464, 465, 466, 478, 479, 483, 484, 491, 492, 495, 498, 499, 500, 501, 505, 508, 516, 517, 520, 522, 524, 528, 531], "provid": [42, 43, 102, 105, 110, 191, 219, 220, 248, 262, 263, 289, 295, 300, 319, 324, 332, 333, 353, 358, 391, 421, 425, 427, 439, 441, 442, 443, 444, 459, 461, 464, 466, 467, 468, 474, 475, 477, 478, 479, 480, 481, 485, 489, 492, 498, 499, 500, 506, 507, 517, 519, 520, 522, 525, 526, 528, 529, 530, 531], "make_sub_graph": 42, "opset": [42, 102, 104, 105, 216, 293, 294, 469], "ir_vers": 42, "thi": [42, 45, 86, 110, 132, 139, 143, 147, 152, 155, 157, 165, 166, 171, 177, 181, 184, 189, 191, 193, 195, 196, 197, 198, 202, 203, 204, 205, 207, 208, 209, 215, 216, 219, 220, 230, 231, 232, 233, 234, 235, 236, 238, 248, 251, 257, 258, 262, 263, 273, 274, 275, 276, 277, 278, 279, 281, 289, 297, 300, 301, 302, 304, 313, 314, 316, 317, 318, 319, 324, 327, 329, 331, 332, 333, 336, 339, 350, 353, 354, 355, 357, 358, 368, 391, 395, 400, 409, 410, 417, 421, 431, 432, 436, 437, 438, 439, 442, 443, 444, 460, 461, 462, 465, 466, 467, 469, 470, 471, 474, 476, 477, 478, 479, 480, 481, 483, 484, 486, 487, 489, 491, 493, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 511, 512, 513, 517, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529], "quant_dequant_data": 42, "qtype": [42, 43, 442], "3": [42, 44, 148, 157, 200, 216, 233, 248, 276, 289, 300, 353, 410, 432, 438, 439, 441, 460, 461, 462, 465, 467, 469, 471, 472, 475, 477, 478, 479, 481, 485, 489, 491, 495, 500, 505, 506, 508, 509, 511, 515, 517, 519, 520, 522, 523, 524, 525, 527, 528, 531], "scheme": [42, 43, 44, 149, 160, 165, 166, 414, 442, 443, 444, 461, 471, 489, 522, 528, 530], "sym": [42, 43, 44, 166, 414, 443, 444, 471, 520, 522, 530], "dequant": [42, 43, 44, 57, 88, 91, 92, 93, 94, 96, 152, 165, 166, 414, 432, 438, 443, 525, 526], "asym": [42, 43, 44, 149, 160, 165, 166, 414, 444, 471, 522, 530], "ortsmoothqu": 42, "fake": [42, 44, 113, 160, 162, 166, 170, 409, 414, 478, 520, 522, 525], "channel": [42, 43, 44, 143, 162, 166, 170, 171, 189, 192, 197, 215, 216, 244, 248, 286, 289, 327, 414, 427, 441, 442, 444, 474, 475, 481, 483, 488, 503, 517, 522, 527, 531], "For": [42, 44, 165, 166, 170, 191, 192, 195, 196, 207, 216, 233, 248, 276, 289, 301, 302, 304, 327, 330, 354, 355, 357, 358, 391, 414, 436, 438, 440, 442, 444, 465, 466, 467, 469, 471, 474, 481, 483, 484, 486, 489, 500, 501, 506, 517, 521, 522, 525, 526, 528, 530, 531], "more": [42, 148, 162, 170, 195, 196, 248, 289, 327, 439, 440, 441, 443, 460, 462, 465, 467, 469, 472, 474, 475, 478, 479, 481, 489, 493, 496, 501, 506, 515, 516, 517, 521, 522, 525, 528, 529, 531], "detail": [42, 162, 170, 173, 191, 248, 289, 432, 433, 436, 441, 443, 444, 460, 465, 471, 472, 473, 477, 478, 479, 481, 489, 498, 506, 507, 517, 522, 523, 524, 526, 528, 529], "pleas": [42, 151, 152, 162, 170, 187, 195, 196, 197, 205, 206, 207, 215, 216, 231, 232, 233, 236, 274, 275, 276, 279, 327, 329, 330, 357, 391, 410, 412, 438, 439, 440, 441, 442, 459, 460, 462, 466, 467, 469, 475, 477, 479, 481, 482, 486, 489, 505, 506, 507, 517, 520, 521, 522, 523, 524, 525, 528, 529], "refer": [42, 151, 152, 162, 170, 187, 195, 196, 197, 205, 206, 207, 211, 215, 216, 231, 274, 297, 298, 304, 327, 329, 330, 350, 351, 357, 391, 410, 412, 438, 442, 443, 459, 461, 462, 464, 466, 467, 469, 473, 475, 476, 477, 478, 479, 481, 486, 489, 500, 501, 503, 505, 506, 507, 515, 519, 523, 527, 528], "accur": [42, 151, 162, 170, 206, 412, 417, 517, 522, 525], "effici": [42, 162, 170, 439, 441, 460, 461, 465, 481, 506, 516, 517, 518, 522, 525, 528], "post": [42, 97, 98, 151, 162, 170, 205, 216, 219, 220, 262, 263, 391, 412, 417, 436, 441, 442, 443, 464, 466, 467, 469, 474, 475, 481, 487, 498, 508, 517, 518, 522, 525, 526, 528], "train": [42, 56, 80, 151, 162, 170, 177, 199, 200, 203, 205, 206, 215, 216, 219, 220, 231, 233, 248, 258, 262, 263, 274, 276, 289, 290, 306, 329, 349, 391, 412, 417, 424, 439, 441, 442, 443, 449, 462, 464, 465, 466, 469, 474, 479, 481, 487, 498, 503, 511, 516, 518, 522, 524, 525, 528, 530], "larg": [42, 43, 162, 170, 206, 441, 461, 465, 478, 518, 522, 525, 531], "languag": [42, 162, 170, 206, 297, 350, 436, 441, 469, 502, 518, 522, 525], "2": [42, 43, 44, 53, 74, 105, 109, 157, 162, 166, 168, 170, 172, 193, 199, 200, 215, 216, 232, 249, 275, 300, 302, 304, 329, 336, 353, 355, 357, 368, 395, 410, 414, 432, 438, 442, 460, 461, 462, 464, 465, 471, 474, 475, 476, 477, 479, 502, 508, 509, 511, 512, 513, 515, 517, 518, 520, 522, 523, 524, 525, 527, 528, 529], "spiq": [42, 162, 170, 525], "free": [42, 162, 170, 205, 219, 220, 262, 263, 391, 436, 487, 492, 500, 508, 515, 524, 525], "per": [42, 43, 44, 162, 166, 170, 172, 215, 216, 249, 414, 426, 442, 444, 461, 506, 517, 521, 522, 531], "we": [42, 43, 67, 68, 70, 74, 86, 143, 157, 162, 170, 171, 172, 191, 195, 202, 215, 216, 230, 249, 251, 273, 297, 300, 350, 353, 398, 436, 438, 442, 443, 444, 461, 464, 467, 469, 471, 477, 478, 485, 486, 489, 493, 496, 498, 499, 501, 504, 511, 512, 513, 515, 516, 517, 519, 520, 522, 523, 524, 525, 526, 528, 529], "onli": [42, 44, 53, 63, 70, 86, 109, 115, 143, 157, 162, 164, 166, 170, 171, 172, 180, 185, 188, 194, 201, 215, 216, 231, 249, 251, 255, 274, 294, 306, 327, 329, 340, 391, 401, 409, 410, 417, 432, 441, 442, 443, 444, 459, 460, 461, 464, 465, 467, 470, 471, 478, 479, 486, 499, 517, 518, 519, 520, 525, 526, 528, 529, 530], "inplac": [42, 162], "mean": [42, 44, 162, 166, 193, 202, 215, 216, 244, 248, 286, 289, 302, 304, 327, 339, 355, 357, 400, 414, 438, 443, 444, 461, 464, 467, 471, 477, 478, 484, 503, 517, 520, 522, 525, 527, 528, 530, 531], "weight": [42, 43, 44, 60, 61, 122, 140, 141, 143, 148, 149, 152, 162, 164, 165, 166, 171, 187, 188, 192, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 208, 210, 215, 216, 294, 327, 329, 346, 357, 391, 398, 407, 409, 414, 417, 432, 433, 441, 442, 443, 444, 460, 464, 466, 471, 473, 478, 500, 511, 515, 517, 518, 519, 520, 525, 526, 528, 529, 530], "chang": [42, 96, 143, 162, 171, 199, 200, 202, 203, 205, 206, 209, 215, 216, 329, 331, 398, 432, 437, 443, 461, 467, 470, 476, 478, 481, 491, 492, 495, 498, 504, 517, 526, 527, 528], "you": [42, 157, 162, 215, 216, 229, 231, 272, 274, 329, 357, 391, 437, 438, 443, 461, 462, 464, 467, 475, 476, 477, 479, 481, 483, 484, 486, 491, 495, 498, 499, 500, 501, 502, 503, 504, 506, 517, 520, 523, 524, 525, 526, 529], "can": [42, 44, 143, 152, 157, 162, 171, 184, 191, 192, 193, 198, 206, 207, 209, 215, 216, 219, 220, 230, 233, 248, 249, 251, 262, 263, 273, 276, 289, 300, 302, 304, 327, 329, 331, 353, 355, 357, 358, 368, 391, 421, 432, 438, 439, 441, 442, 443, 444, 459, 461, 462, 464, 465, 466, 467, 469, 471, 474, 475, 477, 478, 479, 480, 481, 482, 483, 485, 486, 487, 489, 491, 492, 493, 495, 496, 498, 499, 501, 503, 504, 505, 506, 508, 515, 516, 517, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 530, 531], "recov": [42, 162, 431, 432, 442, 466], "helper": [43, 45, 110, 116, 148, 165, 231, 232, 233, 247, 274, 275, 276, 288, 292, 293, 294, 366, 430], "dtype_to_nam": 43, "dtype_map": 43, "dtype": [43, 44, 102, 105, 215, 216, 234, 235, 244, 248, 277, 278, 286, 289, 427, 443, 444, 462, 464, 469, 471, 481, 503, 519, 520, 522, 525, 526, 527, 530], "its": [43, 60, 96, 148, 152, 191, 200, 203, 205, 211, 216, 227, 233, 248, 270, 276, 289, 292, 298, 299, 329, 336, 351, 352, 395, 436, 462, 465, 476, 477, 479, 489, 491, 495, 498, 499, 517, 522, 524, 527, 528], "string": [43, 45, 116, 148, 151, 155, 157, 172, 178, 180, 184, 185, 191, 193, 198, 207, 208, 209, 211, 212, 215, 216, 233, 250, 255, 276, 290, 295, 297, 300, 306, 307, 308, 310, 311, 319, 324, 327, 328, 329, 330, 331, 332, 350, 353, 362, 366, 412, 424, 429, 432, 477, 525, 527], "represent": [43, 155, 436, 438, 460, 466, 517, 520], "quanttyp": [43, 409], "repres": [43, 193, 197, 198, 207, 208, 211, 233, 238, 276, 281, 300, 302, 304, 353, 355, 357, 436, 444, 460, 462, 469, 506, 517, 520, 522, 528], "make_quant_nod": 43, "make": [43, 105, 143, 171, 184, 193, 198, 207, 209, 229, 272, 327, 329, 331, 432, 436, 442, 443, 459, 461, 471, 477, 478, 486, 491, 495, 498, 500, 517, 520, 521, 522, 524, 525, 528], "quantizelinear": 43, "make_dquant_nod": 43, "axi": [43, 216], "dequantizelinear": 43, "is_b_transpos": 43, "inuput": 43, "b": [43, 74, 231, 274, 432, 437, 460, 462, 477, 517, 522, 525, 528], "transpos": [43, 73, 197, 244, 248, 289, 293, 327, 522, 527], "split_shared_bia": 43, "share": [43, 44, 82, 98, 109, 141, 166, 414, 470, 471, 522, 525, 528], "float_to_float16": 43, "float_to_bfloat16": 43, "bfloat16": [43, 479, 481, 489, 521], "cast_tensor": 43, "is_large_model": 43, "tensorproto": [43, 105], "raw": [43, 172, 232, 236, 239, 275, 279, 282, 339, 400, 477, 502, 528], "remove_init_from_model_input": 43, "collate_pr": 43, "result": [43, 148, 152, 165, 244, 248, 286, 289, 297, 300, 301, 302, 304, 350, 353, 354, 355, 357, 371, 391, 398, 421, 431, 432, 436, 439, 441, 461, 464, 465, 467, 474, 476, 477, 478, 486, 487, 498, 499, 502, 506, 507, 508, 509, 515, 517, 518, 520, 522, 524, 525, 526, 527, 528, 529, 531], "quantize_data_with_scale_zero": 43, "zero_point": [43, 44], "point": [43, 44, 166, 244, 286, 301, 302, 311, 336, 354, 355, 395, 432, 477, 498, 503, 504, 520, 522, 525, 527, 528], "To": [43, 300, 353, 368, 437, 443, 444, 462, 464, 467, 479, 482, 485, 491, 493, 495, 496, 500, 504, 517, 519, 521, 522, 523, 525, 528, 530], "pack": [43, 61], "comput": [43, 44, 105, 152, 165, 297, 298, 301, 302, 304, 350, 351, 354, 355, 357, 421, 432, 460, 461, 466, 469, 477, 478, 479, 481, 492, 501, 517, 518, 520, 522, 525, 528], "linear": [43, 151, 160, 164, 165, 166, 170, 189, 191, 192, 197, 202, 211, 215, 216, 327, 412, 414, 438, 465, 469, 478, 517, 522, 525, 528], "transform": [43, 50, 143, 145, 146, 147, 151, 161, 164, 205, 231, 232, 233, 234, 235, 236, 238, 240, 242, 274, 275, 276, 277, 278, 279, 281, 283, 285, 296, 349, 412, 417, 438, 439, 441, 460, 462, 465, 466, 467, 468, 472, 478, 481, 486, 487, 488, 489, 501, 509, 512, 513, 517, 518, 521, 522, 525, 526, 528, 530, 531], "when": [43, 53, 64, 70, 148, 155, 157, 192, 198, 203, 211, 215, 216, 231, 232, 240, 248, 274, 275, 283, 289, 298, 328, 329, 351, 391, 421, 436, 439, 443, 461, 462, 478, 489, 491, 492, 495, 499, 500, 503, 504, 505, 507, 511, 517, 520, 522, 525, 527, 528], "uint8": [43, 166, 244, 286, 300, 348, 353, 409, 414, 442, 462, 471, 519, 520, 527, 530], "rmin": [43, 520], "rmax": [43, 520], "m": [43, 152, 166, 195, 196, 215, 216, 327, 414, 437, 465, 475, 481, 483, 486, 489, 493, 496, 506, 517, 531], "where": [43, 157, 215, 216, 300, 304, 353, 357, 409, 432, 444, 460, 464, 465, 491, 495, 499, 525, 526], "max": [43, 104, 143, 166, 171, 185, 215, 216, 248, 289, 301, 302, 336, 354, 355, 395, 414, 432, 441, 464, 475, 478, 501, 503, 517, 520, 522, 525, 527, 528], "ab": [43, 151, 166, 187, 205, 206, 329, 412, 414, 417, 517, 520, 525], "np": [43, 248, 289, 336, 395, 467, 508, 525, 527, 528], "calculate_scale_zp": 43, "quantize_rang": 43, "calcul": [43, 60, 165, 187, 195, 211, 216, 234, 235, 277, 278, 301, 302, 327, 329, 339, 354, 355, 400, 422, 432, 460, 462, 477, 478, 489, 501, 515, 517, 520, 522, 524, 525, 528, 530], "quantize_data": 43, "add": [43, 52, 64, 109, 119, 148, 180, 211, 215, 216, 231, 233, 255, 274, 276, 328, 346, 407, 432, 437, 438, 444, 461, 462, 467, 469, 471, 477, 478, 493, 496, 500, 501, 508, 511, 512, 524, 525, 526, 528, 529], "necessari": [43, 207, 436, 439, 443, 480, 499, 517, 524, 528], "intermedi": [43, 152, 178, 215, 216, 250, 438, 474, 520], "full": [43, 231, 232, 233, 274, 275, 276, 427, 432, 441, 460, 462, 464, 470, 476, 499, 504, 517, 522, 523], "equat": [43, 302, 304, 355, 357, 520, 525], "r": [43, 143, 171, 464, 475, 499, 500, 502, 503, 505, 506, 520, 531], "": [43, 44, 105, 143, 148, 157, 171, 191, 192, 193, 197, 198, 199, 200, 203, 205, 206, 211, 212, 213, 215, 216, 230, 233, 247, 248, 249, 251, 253, 273, 276, 288, 289, 302, 327, 329, 355, 357, 358, 362, 391, 429, 432, 436, 437, 439, 443, 444, 464, 465, 467, 469, 471, 474, 478, 479, 486, 489, 491, 495, 498, 501, 503, 506, 516, 517, 518, 519, 520, 522, 523, 524, 525, 528, 529, 530, 531], "q": [43, 44, 107, 109, 131, 522, 525], "z": [43, 460, 465, 525], "real": [43, 234, 251, 277, 443, 460, 467, 500, 507, 518, 520], "origin": [43, 44, 140, 148, 158, 162, 165, 191, 203, 211, 216, 231, 248, 249, 274, 289, 313, 314, 316, 317, 318, 328, 329, 348, 396, 409, 427, 432, 437, 462, 486, 517, 520, 527, 528, 530], "quantize_data_per_channel": 43, "dequantize_data_with_scale_zero": 43, "tensor_valu": 43, "scale_valu": 43, "zo_valu": 43, "dequantize_data": 43, "valueinfo": 43, "tensor_nam": [43, 148, 157, 158], "new_dtyp": 43, "cast": [43, 57, 521, 527], "info": [43, 165, 166, 175, 195, 196, 211, 246, 251, 256, 327, 362, 427, 428, 432, 438, 464, 480, 508, 513], "quantizedvalu": 43, "new_quantized_nam": 43, "scale_nam": 43, "zero_point_nam": 43, "quantized_value_typ": 43, "quint8": 43, "linearli": 43, "quantizediniti": 43, "quantized_data": 43, "quantizationmod": 43, "quantizedvaluetyp": 43, "quantformat": 43, "quantize_nparrai": 43, "arr": [43, 432], "low": [43, 219, 220, 234, 235, 262, 263, 277, 278, 295, 305, 332, 358, 442, 443, 459, 460, 462, 467, 478, 479, 503, 518, 520, 522, 525, 528], "high": [43, 234, 235, 277, 278, 462, 464, 475, 503, 518, 528], "attribute_to_kwarg": 43, "attribut": [43, 83, 104, 105, 148, 165, 191, 202, 212, 213, 216, 432, 442, 461, 471, 473, 478, 519, 530], "make_nod": 43, "find_by_nam": 43, "item_list": 43, "find": [43, 67, 68, 70, 105, 148, 304, 311, 336, 357, 395, 432, 442, 464, 484, 491, 495, 498, 499, 501, 503, 517, 522, 524, 525, 526, 528], "item": [43, 211, 213, 215, 216, 247, 288, 328, 346, 407, 460, 467, 517, 525, 528], "trt_env_setup": 43, "environ": [43, 172, 249, 436, 459, 491, 495, 498, 506, 509, 511, 512, 513, 528], "variabl": [43, 155, 172, 208, 215, 216, 233, 249, 276, 336, 395, 409, 475, 517, 528], "tensorrt": [43, 460, 479, 520], "to_numpi": 43, "weightonli": 44, "get_blob_s": 44, "group_siz": [44, 149, 160, 165, 166, 409, 414, 522], "has_zp": 44, "blob_siz": 44, "how": [44, 157, 166, 177, 187, 193, 199, 200, 205, 206, 215, 216, 248, 289, 290, 327, 414, 437, 438, 440, 442, 461, 462, 465, 466, 467, 473, 477, 478, 492, 493, 496, 497, 498, 500, 511, 512, 513, 517, 518, 520, 525, 527, 528, 529, 530], "mani": [44, 166, 357, 391, 414, 461, 475, 522, 528, 530], "element": [44, 166, 195, 196, 211, 229, 272, 300, 327, 353, 414, 432, 462, 474, 477, 517, 522, 525], "one": [44, 109, 110, 115, 157, 165, 166, 172, 193, 197, 202, 205, 206, 207, 209, 248, 258, 289, 297, 300, 304, 306, 327, 330, 331, 350, 353, 357, 414, 439, 442, 460, 465, 466, 467, 471, 474, 475, 477, 478, 479, 481, 482, 486, 487, 489, 491, 492, 495, 498, 499, 500, 503, 504, 505, 506, 508, 515, 516, 517, 519, 520, 522, 523, 525, 527, 528], "zp": [44, 166, 414, 525], "make_matmul_weight_only_nod": 44, "weight_shap": 44, "num_bit": [44, 113, 160, 165, 166, 414, 525], "k_block": 44, "q_weight": 44, "accuracy_level": 44, "matmulfpq4": 44, "shape": [44, 105, 148, 193, 234, 235, 244, 248, 277, 278, 286, 289, 300, 353, 441, 462, 471, 472, 478, 500, 501, 522, 525, 527], "accuraci": [44, 172, 211, 215, 216, 219, 220, 262, 263, 290, 295, 304, 319, 324, 332, 357, 358, 368, 391, 396, 410, 421, 429, 438, 441, 443, 444, 460, 461, 462, 464, 466, 467, 468, 469, 477, 478, 489, 498, 500, 507, 508, 511, 512, 515, 516, 517, 518, 519, 522, 523, 524, 525, 526, 529, 530, 531], "level": [44, 175, 191, 396, 410, 428, 436, 508, 525, 528], "unset": 44, "jbla": 44, "kernel": [44, 170, 215, 216, 442, 443, 528], "fp16": [44, 216, 346, 407, 520], "4": [44, 53, 149, 160, 165, 166, 172, 193, 202, 215, 216, 240, 243, 244, 248, 283, 286, 289, 297, 298, 300, 350, 351, 353, 409, 410, 414, 417, 436, 442, 444, 459, 467, 468, 471, 474, 475, 477, 478, 486, 506, 508, 512, 517, 520, 522, 525, 527, 528, 531], "matmulnbit": 44, "new_init": 44, "matmul_weight_only_nod": 44, "quant_tensor": 44, "32": [44, 149, 166, 189, 409, 414, 417, 467, 473, 522, 531], "ratio": [44, 143, 171, 193, 198, 211, 215, 216, 244, 248, 286, 289, 329, 462, 478, 501, 517, 527, 531], "group": [44, 166, 208, 314, 414, 441, 474, 517, 522, 526, 527, 528, 531], "clip": [44, 166, 414, 522, 525], "qdq_tensor": 44, "quant": [44, 148, 165, 166, 215, 216, 346, 407, 414, 438, 478, 520], "pad_tensor": 44, "rowi": 44, "so": [44, 105, 248, 289, 409, 438, 442, 464, 470, 474, 479, 484, 486, 502, 503, 504, 520, 521, 522, 525, 526, 527, 529], "divis": 44, "pade": 44, "rtn_quantiz": [44, 166, 414], "weight_config": [44, 149, 151, 164, 166, 412, 414], "round": [44, 143, 166, 171, 414, 417, 441, 518, 520, 522, 525], "nearst": [44, 166, 414], "method": [44, 141, 143, 155, 157, 165, 166, 175, 184, 208, 215, 216, 224, 229, 230, 231, 233, 240, 248, 251, 267, 272, 273, 274, 276, 283, 289, 310, 311, 312, 346, 407, 409, 414, 424, 425, 427, 428, 438, 439, 441, 460, 461, 462, 464, 465, 466, 477, 478, 516, 517, 520, 521, 522, 525, 527, 528], "modelproto": [44, 292, 358, 480], "onnxmodel": [44, 365, 384], "fc2": [44, 165, 166, 414], "rtn": [44, 165, 415, 417, 522], "get_weight_scal": 44, "apply_awq_scal": 44, "absorb_pair": 44, "output_dict": 44, "appli": [44, 113, 126, 127, 128, 131, 133, 137, 148, 160, 164, 177, 202, 204, 258, 298, 351, 412, 415, 436, 443, 444, 478, 481, 483, 489, 498, 502, 503, 508, 516, 517, 520, 521, 524, 525, 528, 529, 530], "salient": [44, 166, 517, 522], "apply_awq_clip": 44, "mse": [44, 165, 166, 215, 216, 296, 304, 338, 349, 357, 391, 399, 432, 464, 477, 503, 519, 522, 523], "prepare_input": 44, "n_sampl": [44, 149, 165, 166], "sampl": [44, 77, 165, 166, 215, 216, 224, 229, 231, 232, 233, 244, 248, 267, 272, 274, 275, 276, 286, 289, 304, 311, 336, 357, 395, 439, 461, 462, 468, 474, 499, 520, 522, 525, 527, 528, 530, 531], "session": [44, 148, 230, 273, 366, 478, 526], "awq_quant": [44, 166], "enable_auto_scal": [44, 166, 522], "enable_mse_search": [44, 166, 414, 417, 522], "awar": [44, 149, 152, 166, 177, 216, 258, 306, 327, 398, 421, 442, 443, 444, 460, 466, 467, 469, 474, 498, 508, 516, 518, 522, 528], "awq": [44, 166, 522], "enabl": [44, 109, 152, 166, 198, 215, 216, 329, 443, 444, 467, 475, 479, 481, 483, 486, 487, 489, 500, 502, 503, 505, 508, 517, 518, 522, 528], "gptq": [44, 166, 414, 417, 522], "w": [44, 151, 248, 289, 412, 517, 525, 527], "h": [44, 215, 216, 248, 289, 467, 506, 507, 511, 512, 513, 527], "blocksiz": 44, "percdamp": [44, 417, 522], "01": [44, 215, 216, 417, 478, 519, 522, 528, 530, 531], "actord": [44, 522], "perchannel": 44, "hessian": [44, 152, 398, 522, 528], "matrix": [44, 357, 391, 441, 489, 529], "percent": 44, "averag": [44, 301, 302, 304, 354, 355, 357, 477, 478, 522, 528, 531], "diagon": [44, 522], "dampen": 44, "rearrang": [44, 205, 517, 522], "consid": [44, 148, 304, 357, 436, 460, 465, 499, 528], "diag": 44, "error": [44, 105, 152, 157, 175, 304, 339, 357, 400, 428, 464, 477, 482, 503, 504, 507, 522, 525, 528], "gptq_quantiz": [44, 166], "get_ops_recurs": 45, "prefix": [45, 148, 150, 157, 158, 163, 165, 172, 481, 486, 526], "graph_info": 45, "templateadaptor": 45, "tampl": 45, "dictionari": [45, 67, 68, 70, 148, 150, 152, 157, 165, 184, 212, 213, 215, 216, 247, 288, 300, 307, 310, 312, 353, 420, 432], "yaml": [45, 211, 212, 213, 216, 219, 220, 231, 233, 249, 262, 263, 274, 276, 290, 295, 306, 307, 308, 310, 319, 324, 332, 333, 431, 432, 442, 444, 473, 477, 478, 515, 519, 526, 527], "file": [45, 105, 148, 155, 157, 158, 165, 169, 181, 207, 211, 212, 215, 216, 219, 220, 231, 232, 233, 236, 247, 248, 254, 257, 262, 263, 274, 275, 276, 279, 288, 289, 290, 295, 300, 306, 307, 308, 310, 319, 324, 328, 330, 332, 333, 353, 358, 368, 374, 375, 379, 391, 431, 432, 437, 439, 442, 443, 444, 467, 470, 473, 476, 477, 478, 480, 484, 493, 496, 497, 498, 499, 501, 502, 503, 504, 506, 507, 511, 512, 513, 515, 519, 520, 522, 526, 527], "pytorchadaptor": 45, "api": [45, 70, 75, 110, 151, 259, 295, 300, 332, 345, 346, 353, 357, 391, 406, 407, 410, 412, 432, 438, 445, 447, 451, 454, 457, 464, 469, 474, 478, 483, 487, 488, 489, 505, 506, 510, 523, 524, 528, 532], "pytorch_ipexadaptor": 45, "intel": [45, 180, 195, 196, 207, 252, 255, 291, 296, 303, 304, 327, 330, 338, 344, 349, 356, 357, 369, 391, 399, 405, 434, 436, 437, 439, 440, 442, 443, 444, 460, 462, 463, 465, 466, 468, 469, 471, 472, 476, 479, 480, 481, 486, 488, 489, 500, 501, 502, 503, 505, 506, 515, 516, 517, 518, 520, 521, 522, 523, 525, 526, 528, 529, 530], "extens": [45, 155, 157, 432, 439, 441, 442, 471, 474, 475, 478, 479, 480, 482, 487, 488, 489, 493, 496, 497, 501, 517, 518, 520, 522, 525, 528, 529, 530], "ipex": [45, 159, 165, 215, 216, 431, 474, 478, 479, 483, 487, 488, 525], "pytorch_fxadaptor": 45, "fx": [45, 165, 215, 340, 401, 474, 479, 487, 488, 502, 518, 520, 521], "graph": [45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 112, 113, 114, 117, 130, 132, 136, 139, 142, 143, 145, 146, 147, 148, 191, 230, 273, 295, 359, 366, 390, 438, 442, 462, 465, 467, 473, 480, 481, 500, 503, 520, 521, 526], "pytorchweightonlyadaptor": 45, "querybackendcap": [46, 442, 443], "tensorflowadaptor": 47, "stock": [47, 487, 525], "spr": 47, "tensorflow_itexadaptor": 47, "itex": [47, 109, 215, 216, 293, 479, 520, 525], "tensorflowqueri": [47, 442], "performance_onli": [47, 48, 49, 107, 131, 136, 147, 215, 478], "itex_mod": [47, 48, 89, 107, 131, 136], "quant_mod": [47, 346, 407, 443, 444], "graphconvert": 48, "qt_config": 48, "recip": [48, 191, 215, 216, 295, 332, 478, 522, 525, 528], "int8_sequ": 48, "fp32_op": [48, 50, 107], "bf16_op": [48, 50, 107, 443, 521], "data_load": [48, 49, 442], "calib_func": [48, 149, 165, 166, 391, 521], "fake_qu": [48, 88, 107, 131, 136], "qdq_enabl": 48, "new_api": [48, 49, 71, 72, 77, 79, 92, 99, 131, 136, 143], "use_bf16": [48, 49, 215, 519], "without": [49, 90, 148, 203, 248, 289, 329, 348, 409, 436, 465, 467, 478, 489, 500, 503, 517, 518, 519, 528, 529], "graphconverterwithoutcalib": 49, "recover_config": 49, "rewrit": [50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 106, 107, 108, 109, 188], "bf16convert": [50, 521], "biasadd": [52, 59, 64, 66, 109, 471], "convertaddtobiasaddoptim": 52, "conv2d": [52, 59, 60, 61, 65, 66, 71, 125, 135, 143, 151, 412, 443, 444, 464, 469, 471, 503, 525, 526, 528], "addv2": [52, 69, 471], "layout": 53, "convertlayoutoptim": 53, "convers": [53, 54, 216, 306, 437, 442, 443, 478, 479, 520, 521, 525], "optim": [53, 74, 75, 79, 80, 116, 118, 148, 179, 182, 183, 184, 186, 188, 191, 200, 205, 212, 215, 216, 252, 258, 295, 296, 312, 332, 336, 349, 395, 421, 422, 429, 432, 439, 441, 459, 464, 465, 466, 467, 471, 472, 474, 475, 478, 480, 481, 483, 485, 486, 489, 492, 500, 503, 504, 505, 507, 509, 518, 519, 520, 521, 522, 524, 525, 526, 528, 530], "nchw": [53, 244], "nhwc": [53, 244], "It": [53, 157, 177, 181, 193, 219, 220, 257, 262, 263, 302, 304, 311, 327, 332, 339, 355, 357, 358, 391, 396, 400, 421, 442, 443, 444, 460, 464, 465, 478, 484, 487, 492, 498, 499, 500, 501, 503, 504, 506, 517, 520, 522, 523, 524, 528, 530], "exist": [53, 172, 213, 249, 366, 432, 469, 477, 485, 528], "abov": [53, 442, 443, 444, 465, 500, 501, 503, 506, 517, 520, 525, 528], "graph_def": [53, 140, 141, 148, 293, 358, 366, 390, 391], "leakyrelu": [54, 525], "convertleakyreluoptim": 54, "below": [54, 66, 74, 215, 216, 333, 357, 391, 437, 438, 441, 442, 443, 444, 461, 464, 465, 467, 473, 477, 481, 483, 491, 492, 495, 498, 501, 506, 515, 516, 517, 519, 520, 522, 524, 525, 526, 528, 529], "subgraph": [54, 66, 105, 163, 528], "mul": [54, 65, 66, 69, 166, 170, 469, 522, 525], "maximum": [54, 193, 198, 215, 216, 231, 248, 274, 289, 298, 329, 336, 351, 366, 395, 444, 460, 462, 464, 478, 517, 520, 525, 527], "note": [54, 155, 197, 300, 340, 353, 401, 439, 441, 443, 444, 461, 464, 467, 469, 471, 475, 478, 483, 486, 491, 495, 498, 500, 504, 506, 508, 517, 520, 522, 525, 526, 528, 529, 530], "coeffici": [54, 208, 517], "less": [54, 148, 165, 215, 216, 432, 459, 465, 478, 505, 517], "than": [54, 148, 231, 248, 274, 289, 432, 439, 441, 459, 462, 473, 503, 511, 515, 516, 517, 520, 522, 524, 527, 528], "valid": [54, 67, 68, 105, 198, 201, 211, 215, 216, 233, 276, 300, 328, 329, 353, 366, 439, 441, 442, 462, 464, 465, 468, 471, 474, 476, 478, 489, 503, 517, 520, 522, 523], "nan": 55, "random": [55, 148, 184, 215, 216, 244, 248, 286, 289, 296, 312, 336, 338, 349, 395, 399, 432, 439, 478, 517, 519, 527, 530], "convertnantorandom": 55, "const": [55, 56, 63, 64, 67, 68, 70, 82, 98], "consist": [55, 63, 437, 438, 506, 525, 528], "placehold": [56, 229, 272], "convertplaceholdertoconst": 56, "rerewrit": 57, "dequantizecastoptim": 57, "b16": 57, "dilat": 58, "contract": 58, "dilatedcontract": 58, "spacetobatchnd": 58, "batchtospacend": 58, "pattern": [58, 59, 61, 78, 96, 107, 108, 109, 131, 136, 165, 184, 185, 186, 187, 188, 191, 192, 198, 199, 200, 201, 203, 205, 206, 208, 212, 215, 216, 233, 276, 296, 317, 318, 320, 325, 329, 346, 349, 407, 442, 462, 471, 474, 478, 499, 516, 519, 525, 528, 531], "inject": [59, 478], "dummi": [59, 191, 234, 235, 277, 278, 304, 357, 417, 441, 462, 472, 477, 478, 500], "injectdummybiasaddoptim": 59, "fusion": [59, 61, 70, 78, 109, 126, 127, 128, 131, 132, 133, 137, 438, 442, 471], "expanddim": 60, "expanddimsoptim": 60, "next": [60, 224, 267, 410, 439, 443, 444, 461, 519, 522, 528], "fetch": [61, 165, 169, 224, 267, 443, 462, 511, 512, 513], "reshap": [61, 67, 68, 73, 525], "fetchweightfromreshapeoptim": 61, "handl": [61, 148, 162, 170, 175, 428, 438, 440, 461, 506, 525], "fold": [62, 63, 165, 166, 294, 471, 522, 525], "foldbatchnormnodesoptim": 62, "graphfoldconstantoptim": 63, "sequenc": [63, 105, 192, 195, 196, 215, 216, 231, 247, 248, 274, 288, 289, 298, 302, 327, 351, 355, 442, 462, 471, 517, 522, 527], "self": [63, 165, 166, 191, 215, 216, 368, 442, 443, 461, 462, 474, 477, 500, 524, 526, 528], "supported_op_typ": 63, "fusebiasaddandaddoptim": 64, "second": [64, 157, 192, 215, 216, 231, 274, 396, 432, 464, 478, 491, 495, 499, 511, 512, 522, 525, 528, 530], "columnwis": 65, "fusecolumnwisemuloptim": 65, "depthwiseconv2dn": [65, 71, 125, 135, 471], "math": [66, 520], "fuseconvwithmathoptim": 66, "elimin": [66, 505], "sub": [66, 165, 172, 191, 249, 439, 528], "realdiv": [66, 69], "decompos": [67, 68], "fusedecomposedbnoptim": 67, "input_graph_def": [67, 68, 70], "node_name_from_input": [67, 68, 70], "node_nam": [67, 68, 70, 148, 366, 376, 443], "strip": [67, 68, 70, 83, 84, 148, 526], "port": [67, 68, 70, 500, 507], "other": [67, 68, 70, 155, 162, 170, 230, 273, 302, 355, 366, 436, 438, 443, 444, 464, 471, 474, 476, 478, 480, 501, 515, 517, 520, 525, 527, 528, 531], "underli": [67, 68, 70, 157], "node_from_map": [67, 68, 70], "node_map": [67, 68, 70], "pull": [67, 68, 70], "def": [67, 68, 70, 219, 220, 262, 263, 391, 410, 420, 421, 438, 442, 461, 462, 465, 466, 467, 477, 478, 520, 525, 526, 528], "entri": [67, 68, 70, 152, 180, 255, 295, 333, 415, 419, 432, 476], "index": [67, 68, 70, 105, 172, 211, 216, 224, 229, 233, 267, 272, 276, 311, 432, 462, 477, 499, 503, 522, 525], "everi": [67, 68, 70, 193, 196, 198, 215, 216, 327, 329, 442, 461, 486, 491, 495, 522, 528], "identifi": [67, 68, 70, 157, 300, 353, 366, 506, 517, 522], "want": [67, 68, 70, 191, 215, 216, 229, 231, 272, 274, 329, 396, 421, 438, 442, 461, 462, 467, 478, 486, 498, 499, 506, 515, 520, 524, 526, 528], "nodedef": [67, 68, 70], "rais": [67, 68, 70, 105, 155, 157, 165, 188, 194, 201, 211, 300, 327, 328, 329, 353, 358, 410, 441, 500, 517, 518], "valueerror": [67, 68, 70, 165, 300, 353, 410, 470], "If": [67, 68, 70, 74, 157, 166, 172, 215, 216, 219, 220, 233, 248, 262, 263, 276, 289, 328, 358, 391, 410, 414, 421, 437, 438, 443, 459, 461, 462, 467, 475, 476, 477, 478, 484, 492, 493, 496, 498, 504, 509, 515, 517, 520, 522, 524, 525, 526, 527, 528], "isn": [67, 68, 70], "t": [67, 68, 70, 143, 157, 171, 193, 215, 216, 248, 251, 289, 302, 355, 438, 442, 464, 465, 467, 478, 479, 499, 504, 517, 520, 522, 528, 530], "present": [67, 68, 70, 464, 506, 518, 522, 525], "values_from_const": [67, 68, 70], "node_def": [67, 68, 70], "extract": [67, 68, 70, 148, 191, 233, 276, 348, 409, 462], "ha": [67, 68, 70, 74, 151, 157, 197, 198, 249, 297, 327, 329, 350, 410, 412, 437, 439, 442, 443, 444, 461, 469, 474, 478, 479, 484, 498, 503, 504, 506, 509, 517, 519, 520, 521, 524, 525, 528], "access": [67, 68, 70, 212, 213, 216, 427, 432, 493, 496, 500], "valid_reshape_input": [67, 68], "reshape_in0_ndef": [67, 68], "reshape_in1_ndef": [67, 68], "ar": [67, 68, 105, 157, 165, 193, 198, 199, 200, 205, 206, 215, 216, 231, 248, 274, 289, 300, 304, 311, 327, 328, 329, 333, 335, 336, 353, 357, 392, 394, 395, 409, 410, 424, 431, 432, 436, 437, 438, 439, 442, 443, 461, 462, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 484, 486, 489, 492, 498, 500, 501, 503, 504, 505, 506, 509, 515, 516, 517, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530], "bypass_reshap": [67, 68], "input_node_map": [67, 68], "input_nam": [67, 68, 102, 142, 216, 293, 294, 469], "get_const_dim_count": [67, 68], "dimens": [67, 68, 105, 223, 248, 266, 289, 462, 465, 522, 527], "instancenorm": [68, 525], "fusedecomposedinoptim": 68, "gelu": 69, "fusegeluoptim": 69, "sqrt": [69, 464], "erf": 69, "layernorm": [70, 525], "fuselayernormoptim": 70, "remap": [70, 157], "smaller": [70, 248, 289, 465, 478, 517, 527], "case": [70, 74, 157, 166, 172, 216, 230, 247, 248, 249, 273, 288, 289, 295, 319, 324, 332, 368, 444, 461, 465, 466, 467, 471, 473, 477, 482, 486, 498, 499, 500, 503, 509, 512, 513, 515, 517, 518, 520, 522, 523, 527, 529, 530, 531], "fusedbatcnormv3": 70, "And": [70, 437, 438, 459, 478, 484, 525], "further": [70, 216, 436, 479, 480, 481, 483, 492, 498, 520], "restrict": [70, 157, 215, 216, 517, 524], "2d": [70, 525], "3d": [70, 518, 525], "kera": [70, 116, 180, 191, 211, 216, 233, 240, 255, 276, 283, 361, 366, 443, 461, 467, 480, 488, 489, 523], "fusepadwithconv2doptim": 71, "excluded_op_nam": [71, 72, 212, 215, 216, 478, 517], "cfg": [71, 72, 165, 212, 346, 407, 424, 443, 444], "itex_qdq_mod": [71, 72], "conv3d": [71, 125], "fusepadwithfp32conv2doptim": 72, "fusetransposereshapeoptim": 73, "cse": [74, 98], "graphcseoptim": 74, "introduc": [74, 442, 443, 444, 471, 478, 520, 522, 523, 525, 529], "ident": [74, 80, 192, 436, 465], "three": [74, 211, 231, 274, 335, 392, 394, 438, 442, 443, 460, 475, 479, 492, 506, 516, 520, 521, 524, 525, 526], "d": [74, 165, 465, 473, 499, 501, 507, 517, 531], "those": [74, 157, 339, 400, 432, 464, 465, 466, 473, 478, 479, 516, 517, 520, 528], "child": [74, 151, 158, 412, 526], "b1": 74, "c1c2": 74, "d1": [74, 432], "c1": 74, "c2": 74, "memori": [74, 165, 295, 319, 324, 332, 368, 432, 460, 461, 466, 478, 479, 481, 515, 517, 520, 522, 525, 528, 531], "bound": [74, 172, 185, 248, 289, 300, 336, 353, 395, 477, 527], "like": [74, 96, 98, 148, 157, 191, 211, 216, 219, 220, 221, 233, 262, 263, 264, 276, 295, 304, 329, 332, 333, 357, 366, 391, 421, 437, 438, 439, 442, 443, 464, 465, 466, 474, 486, 501, 503, 516, 517, 520, 522, 523, 525, 528], "relu": [74, 78, 109, 438, 471, 525, 526], "relu6": [74, 471], "updat": [74, 158, 165, 187, 193, 211, 329, 357, 391, 429, 470, 477, 478, 484, 489, 492, 508, 517, 522, 525, 528, 529], "graphdef": [74, 148, 366, 390, 480], "grappler": [75, 471], "grappleroptim": 75, "input_output_nam": 75, "opt_cfg": 75, "wrapper": [75, 102, 103, 104, 105, 122, 140, 150, 160, 164, 178, 188, 230, 248, 250, 251, 253, 254, 273, 289, 300, 304, 353, 357, 362, 366, 521], "leverag": [75, 427, 439, 441, 465, 469, 481, 498, 516, 520, 522, 528], "built": [75, 180, 202, 217, 218, 222, 227, 231, 232, 237, 239, 241, 242, 244, 245, 248, 253, 255, 260, 261, 265, 268, 270, 274, 275, 280, 282, 284, 285, 286, 287, 289, 333, 357, 360, 368, 391, 421, 439, 442, 462, 467, 478, 491, 495, 515, 520, 524, 527, 528, 530], "convert_add_to_biasadd": [76, 87, 111], "convert_layout": [76, 87, 111], "convert_leakyrelu": [76, 87, 111], "convert_nan_to_random": [76, 87, 111], "convert_placeholder_to_const": [76, 87, 111], "dequantize_cast_optim": [76, 87, 111], "dilated_contract": [76, 87, 111], "dummy_biasadd": [76, 87, 111], "expanddims_optim": [76, 87, 111], "fetch_weight_from_reshap": [76, 87, 111], "fold_batch_norm": [76, 87, 111], "fold_const": [76, 87, 111], "fuse_biasadd_add": [76, 87, 111], "fuse_column_wise_mul": [76, 87, 111], "fuse_conv_with_math": [76, 87, 111], "fuse_decomposed_bn": [76, 87, 111], "fuse_decomposed_in": [76, 87, 111], "fuse_gelu": [76, 87, 111], "fuse_layer_norm": [76, 87, 111], "fuse_pad_with_conv": [76, 87, 111], "fuse_pad_with_fp32_conv": [76, 87, 111], "fuse_reshape_transpos": [76, 87, 111], "graph_cse_optim": [76, 87, 111], "grappler_pass": [76, 87, 111], "insert_print_nod": [76, 87, 111], "move_squeeze_after_relu": [76, 87, 111], "pre_optim": [76, 87, 111], "remove_training_nod": [76, 87, 111], "rename_batch_norm": [76, 87, 111], "split_shared_input": [76, 87, 111], "strip_equivalent_nod": [76, 87, 111, 148], "strip_unused_nod": [76, 87, 111, 148], "switch_optim": [76, 87, 111], "insert": [77, 105, 107, 109, 113, 146, 162, 170, 438, 443, 461, 474, 478, 481, 517, 520, 521, 522, 525, 526], "print": [77, 151, 152, 191, 304, 357, 410, 412, 432, 467, 477, 478, 500, 501, 517, 525, 528], "insertprintminmaxnod": 77, "pre_node_nam": 77, "post_node_nam": 77, "pass": [77, 148, 155, 157, 172, 357, 391, 431, 432, 437, 438, 442, 459, 462, 465, 466, 467, 473, 477, 478, 499, 506, 517, 519, 520, 521, 525, 530], "move": [78, 157, 438, 504, 519, 522, 523], "squeez": [78, 438], "movesqueezeafterreluoptim": 78, "match": [78, 102, 157, 191, 300, 301, 353, 354, 465, 499, 522], "pre": [79, 116, 158, 191, 219, 220, 231, 262, 263, 274, 358, 391, 417, 421, 462, 465, 466, 478, 486, 503, 517, 518, 520, 522, 526, 528], "entranc": [79, 185, 222], "preoptim": 79, "removetrainingnodesoptim": 80, "protected_nod": 80, "types_to_splic": 80, "checknumer": 80, "stopgradi": 80, "renam": [81, 523], "fusedbatchnorm": 81, "fusedbatchnormv2": 81, "renamebatchnormoptim": 81, "splitsharedinputoptim": 82, "equival": [83, 164, 441, 518, 522, 525], "stripequivalentnodesoptim": 83, "output_node_nam": [83, 84, 131, 132, 136, 148], "same": [83, 141, 148, 166, 205, 216, 231, 248, 274, 289, 300, 353, 432, 442, 444, 459, 461, 462, 465, 467, 471, 478, 482, 486, 491, 495, 517, 519, 520, 522, 525, 526, 527, 528], "unus": [84, 148], "stripunusednodesoptim": 84, "input_node_nam": [84, 131, 136, 148], "switch": [85, 481, 526], "switchoptim": 85, "condit": [85, 231, 232, 233, 248, 274, 275, 276, 289, 335, 392, 394, 462, 476, 527, 528], "graphrewriterbas": 86, "abstract": [86, 177, 185, 248, 289, 290, 295, 332, 442, 444, 473], "freeze_fake_qu": [87, 95, 111], "freeze_valu": [87, 95, 111], "freeze_value_without_calib": [87, 95, 111], "fuse_conv_redundant_dequant": [87, 95, 111], "fuse_conv_requant": [87, 95, 111], "fuse_matmul_redundant_dequant": [87, 95, 111], "fuse_matmul_requant": [87, 95, 111], "meta_op_optim": [87, 95, 111], "post_hostconst_convert": [87, 95, 111], "post_quantized_op_cs": [87, 95, 111], "rnn_convert": [87, 95, 111], "scale_propag": [87, 95, 111], "onnx_graph": [87, 101, 111], "onnx_schema": [87, 101, 111], "tf2onnx_util": [87, 101, 111], "insert_qdq_pattern": [87, 106, 111], "merge_duplicated_qdq": [87, 106, 111], "share_qdq_y_pattern": [87, 106, 111], "freez": [88, 89, 90, 148, 481, 517], "fakequ": 88, "freezefakequantopoptim": 88, "follow": [88, 110, 192, 233, 276, 297, 300, 350, 353, 436, 437, 438, 439, 442, 443, 444, 461, 462, 465, 466, 467, 471, 475, 476, 477, 478, 479, 480, 481, 482, 483, 491, 495, 500, 502, 503, 506, 511, 516, 517, 519, 520, 522, 525, 526, 528], "freezevaluetransform": 89, "max_min_data": [89, 90], "postfix": [89, 90], "tensor_data": [89, 432, 433], "th": [89, 90], "gpu": [89, 90, 97, 157, 215, 216, 441, 459, 474, 478, 479, 483, 489, 498, 519, 520, 522], "freezevaluewithoutcalibtransform": 90, "95": [90, 304, 357, 477, 531], "quantizedconv": [91, 92], "quantizeddeconv": 91, "redund": [91, 93], "fuseconvredundantdequantizetransform": 91, "cpu": [91, 92, 93, 94, 151, 156, 157, 159, 165, 215, 216, 412, 427, 432, 441, 443, 459, 460, 474, 478, 479, 481, 483, 489, 498, 506, 518, 519, 520, 521, 522, 526], "_quantizedconv": 91, "_quantizeddeconv": 91, "successor": [91, 92, 93, 94], "requant": [92, 94, 526], "fuseconvrequantizetransform": 92, "quantizedmatmul": [93, 94], "fusematmulredundantdequantizetransform": 93, "_quantizedmatmul": [93, 94], "fusematmulrequantizedequantizetransform": 94, "quantizedmatmulwithbiasanddequant": 94, "fusematmulrequantizetransform": 94, "fusematmulrequantizedequantizenewapitransform": 94, "fusematmulrequantizenewapitransform": 94, "newapi": 94, "meta": [96, 518, 531], "metainfochangingmemopoptim": 96, "metaop": 96, "With": [96, 368, 438, 442, 444, 461, 478, 486, 491, 495, 499, 505, 515, 517, 518, 524, 525, 528, 531], "better": [96, 215, 216, 219, 220, 262, 263, 311, 358, 391, 421, 466, 477, 479, 517, 518, 520, 522, 524, 528], "perform": [96, 140, 172, 208, 215, 216, 231, 243, 244, 249, 274, 286, 295, 319, 324, 332, 339, 357, 368, 391, 396, 400, 437, 438, 439, 442, 443, 459, 462, 463, 464, 466, 468, 469, 474, 475, 477, 478, 479, 480, 481, 483, 487, 489, 492, 498, 504, 515, 516, 517, 518, 519, 520, 521, 522, 525, 526, 528, 530, 531], "hostconst": 97, "posthostconstconvert": 97, "just": [97, 221, 246, 248, 251, 253, 254, 256, 264, 289, 368, 439, 478, 488, 492, 498, 506, 516, 520, 525, 527, 528], "postcseoptim": 98, "duplic": [98, 108, 336, 395], "quantizev2": 98, "decreas": [98, 503, 517], "size": [98, 166, 195, 196, 223, 224, 230, 233, 239, 244, 248, 266, 267, 273, 276, 282, 286, 289, 327, 366, 368, 414, 432, 436, 443, 461, 462, 467, 470, 478, 498, 499, 515, 517, 522, 525, 527, 530, 531], "rnn": 99, "quantizedrnnconvert": 99, "calibration_data": [99, 107], "rnn_detail": 99, "scalepropagationtransform": 100, "direct": [100, 197, 327, 517], "export": [101, 216, 296, 300, 349, 353, 441, 472, 484, 499, 501, 526, 529], "onnxgraph": 102, "output_shap": 102, "extra_opset": 102, "output_nam": [102, 142, 216, 293, 294, 469], "is_subgraph": 102, "graph_nam": 102, "manipul": [102, 103], "onnxnod": 103, "skip_convers": 103, "schema": [104, 166, 414], "onnxopschema": 104, "domain": [104, 105, 215, 216, 517, 528], "since_vers": 104, "get_schema": 104, "max_inclusive_opset_vers": 104, "within": [104, 173, 199, 200, 205, 206, 295, 300, 332, 353, 366, 385, 390, 436, 438, 444, 460, 479, 491, 495, 498, 506, 517, 518, 525, 528], "get_max_supported_opset_vers": 104, "packag": [104, 442, 470, 475, 498, 499, 518, 523, 528], "set_nam": 105, "find_opset": 105, "assert_error": 105, "bool_val": 105, "error_msg": 105, "messag": [105, 146, 437, 506, 507, 511, 512, 513, 528], "map_numpy_to_onnx_dtyp": 105, "np_dtype": 105, "map_onnx_to_numpy_typ": 105, "onnx_typ": 105, "add_port_to_nam": 105, "nr": 105, "get_tensorflow_node_attr": 105, "pars": [105, 148, 165, 231, 232, 244, 248, 274, 275, 286, 289, 374, 375, 379, 443, 444, 527], "get_tensorflow_tensor_shap": 105, "get_tensorflow_node_shape_attr": 105, "attr": [105, 148, 191], "map_tensorflow_dtyp": 105, "get_tensorflow_tensor_data": 105, "convert_tensorflow_tensor_to_onnx": 105, "read_tensorflow_node_attr": 105, "read": [105, 148, 157, 236, 248, 279, 289, 328, 462, 521, 524], "infer_onnx_shape_dtyp": 105, "opset_vers": [105, 142, 216, 293, 294, 469], "input_shap": [105, 235, 278, 462], "input_dtyp": 105, "sometim": [105, 438, 464, 520], "make_onnx_shap": 105, "seqtyp": 105, "tensor_dtyp": 105, "around": 105, "signifi": 105, "make_onnx_inputs_output": 105, "elem_typ": 105, "text": [105, 207, 247, 248, 288, 289, 297, 302, 330, 350, 355, 469, 476, 487, 509, 512, 513, 517, 518, 522, 525, 527, 531], "datatyp": [105, 165, 521, 528, 531], "save_protobuf": 105, "path": [105, 140, 148, 158, 165, 191, 207, 211, 212, 231, 232, 233, 248, 274, 275, 276, 289, 290, 293, 294, 295, 306, 307, 308, 310, 319, 324, 328, 330, 332, 333, 346, 358, 366, 390, 391, 407, 427, 429, 432, 438, 439, 442, 462, 464, 467, 473, 477, 478, 479, 480, 484, 487, 498, 501, 503, 506, 511, 512, 513, 516, 522, 527, 530], "as_text": 105, "save": [105, 148, 156, 157, 188, 211, 215, 216, 233, 276, 293, 294, 333, 366, 391, 421, 422, 427, 432, 438, 442, 473, 478, 479, 480, 482, 486, 491, 495, 501, 506, 511, 512, 513, 516, 520, 522, 525], "protobuf": [105, 366, 501], "is_onnx_domain": 105, "is_list_or_tupl": 105, "are_shapes_equ": 105, "src": [105, 499], "dest": 105, "equal": [105, 143, 148, 171, 410, 432, 517, 522], "get_subgraphs_from_onnx": 105, "model_proto": 105, "over": [105, 157, 233, 276, 304, 357, 443, 468, 472, 474, 477, 489, 498, 504, 508, 517, 519, 525, 528], "df": 105, "initialize_name_count": 105, "avoid": [105, 157, 165, 166, 231, 274, 438, 526], "conflict": [105, 470], "counter": 105, "make_nam": 105, "get_index_from_strided_slice_of_shap": 105, "outputs_to_valu": 105, "stride": [105, 248, 289, 527], "slice": 105, "compute_const_folding_using_tf": 105, "g": [105, 157, 193, 215, 216, 437, 465, 468, 472, 481, 486, 517, 522, 523, 525, 528], "const_node_valu": 105, "graph_output": 105, "constant": [105, 294, 296, 336, 338, 344, 349, 395, 399, 405, 425, 461, 471, 501, 527], "tf": [105, 116, 141, 148, 191, 211, 230, 231, 232, 233, 248, 273, 274, 275, 276, 289, 364, 366, 467, 480, 518, 521, 523, 527], "generategraphwithqdqpattern": 107, "op_wise_config": [107, 131, 136, 443], "quantized_nod": 107, "llm_weight_minmax": 107, "dq": [107, 109, 131, 525], "pair": [107, 215, 216, 443, 461, 478, 479, 523], "befor": [107, 109, 151, 170, 184, 193, 198, 200, 205, 207, 209, 215, 216, 231, 274, 327, 329, 331, 412, 437, 444, 461, 462, 465, 466, 467, 470, 471, 475, 478, 493, 496, 502, 503, 520, 522, 524, 526, 528], "merg": [108, 223, 266, 346, 407, 493, 496, 526, 528], "mergeduplicatedqdqoptim": 108, "y": [109, 215, 216, 248, 289, 336, 395, 464, 470, 484, 525, 527], "shareqdqforitexypatternoptim": 109, "break": [109, 467, 478], "graphanalyz": 110, "extend_engin": 110, "analyz": [110, 191, 366, 524, 525, 526], "under": [110, 215, 216, 233, 276, 420, 427, 431, 437, 439, 441, 462, 476, 477, 478, 481, 486, 487, 498, 506, 516, 517, 518, 522, 526, 528], "singleton": [110, 432], "specifi": [110, 157, 165, 172, 211, 215, 216, 219, 220, 248, 249, 262, 263, 289, 295, 300, 304, 306, 307, 310, 319, 324, 332, 333, 353, 357, 358, 391, 410, 421, 431, 432, 443, 444, 467, 471, 477, 478, 486, 500, 506, 510, 511, 512, 513, 515, 517, 519, 522, 527, 528, 530], "graphrewriterhelp": 110, "encapsul": [110, 219, 220, 262, 263, 358, 391, 421, 480], "quantize_lay": [111, 112, 114], "fake_quant": [111, 112, 114], "quantize_config": [111, 112, 114, 443], "quantize_help": [111, 112, 114], "quantize_wrapp": [111, 112, 114], "fuse_qdq_bn": [111, 112, 130], "fuse_qdq_concatv2": [111, 112, 130], "fuse_qdq_conv": [111, 112, 130], "fuse_qdq_deconv": [111, 112, 130], "fuse_qdq_in": [111, 112, 130], "fuse_qdq_matmul": [111, 112, 130], "fuse_qdq_pool": [111, 112, 130], "optimize_qdq": [111, 112, 130], "optimize_lay": [112, 114, 117], "quantize_layer_add": [112, 114, 117], "quantize_layer_bas": [112, 114, 117], "quantize_layer_bn": [112, 114, 117], "fakequantizebas": 113, "abc": [113, 302, 355, 442, 526, 528], "fakequant": 113, "per_channel": [113, 443, 444, 471, 520, 530], "8": [113, 157, 166, 215, 216, 247, 288, 414, 438, 443, 460, 471, 475, 505, 506, 517, 518, 522, 525, 528, 531], "channel_axi": [113, 168, 171], "symmetr": [113, 427, 444, 520, 522, 527, 528], "narrow_rang": 113, "quantizeconfig": [115, 116], "custom": [115, 155, 165, 166, 172, 216, 333, 357, 368, 431, 459, 465, 466, 481, 504, 505, 506, 510, 512, 513, 517, 518, 522, 524], "There": [115, 333, 335, 392, 394, 464, 465, 471, 474, 478, 481, 503, 505, 506, 522, 525, 528, 530], "instanc": [115, 116, 172, 215, 216, 219, 220, 249, 262, 263, 301, 302, 304, 307, 310, 313, 314, 316, 317, 318, 336, 348, 354, 355, 357, 358, 391, 395, 409, 421, 429, 432, 436, 437, 438, 442, 459, 478, 483, 489, 522, 528, 530, 531], "global": [115, 193, 215, 216, 313, 314, 316, 317, 318, 327, 409, 432, 438, 478, 517, 519, 528], "class": [116, 155, 165, 188, 194, 201, 311, 358, 391, 438, 439, 443, 461, 462, 465, 477, 478, 489, 515, 516, 520, 523, 526, 528, 530], "init_quantize_config": 116, "quantize_recip": 116, "begin": [116, 199, 200, 205, 329, 461, 465, 466, 478, 517, 528], "process": [116, 140, 152, 172, 193, 198, 199, 200, 207, 209, 211, 215, 216, 219, 220, 231, 232, 233, 244, 248, 249, 262, 263, 274, 275, 276, 286, 289, 327, 329, 331, 335, 336, 358, 391, 392, 394, 395, 421, 431, 432, 439, 442, 443, 444, 460, 461, 462, 465, 466, 467, 469, 478, 482, 503, 505, 506, 508, 516, 517, 520, 522, 525, 526, 527, 530], "model_nam": [116, 215, 216], "special": [116, 157, 191, 368, 438, 461, 477, 478, 515, 517, 522, 529], "decid": [116, 215, 216, 298, 329, 351, 442, 443, 478, 520, 523, 528], "qat_clone_funct": 116, "leav": [116, 492], "quantizewrapp": [116, 122], "wrapped_lay": 116, "config_quantizable_lay": 118, "quantizelayeradd": 119, "quantizelay": 120, "quantizelayerbas": 120, "quantizelayerbatchnorm": 121, "quantizewrapperbas": 122, "fusedbatchnormv3": [123, 133], "fusenodestartwithfusedbatchnormv3": [123, 133], "_quantizedfusedbatchnorm": 123, "concatv2": [124, 134, 147, 471], "fusenodestartwithconcatv2": [124, 134], "quantizedconcatv2": [124, 134], "fusenodestartwithconv2d": [125, 135], "conv2dbackpropinput": 126, "conv3dbackpropinputv2": 126, "fusenodestartwithdeconv2d": 126, "fusedinstancenorm": 127, "fusenodestartwithfusedinstancenorm": 127, "batchmatmul": 128, "batchmatmulv2": 128, "fusenodestartwithmatmul": [128, 137], "avgpool": [129, 138, 471], "fusenodestartwithpool": [129, 138], "optimizeqdqgraph": 131, "input_graph": [131, 136, 143, 386, 390, 442], "op_wise_sequ": [131, 136], "quantizegraph": 132, "quantizegraphbas": 132, "quantizenodebas": 132, "quantizegraphforintel": 136, "common": [139, 155, 157, 184, 216, 246, 296, 306, 310, 311, 312, 349, 419, 424, 436, 462, 466, 467, 469, 473, 475, 478, 520, 525], "herlper": 139, "quantizegraphhelp": 139, "sever": [139, 209, 248, 289, 331, 333, 439, 464, 465, 466, 474, 478, 479, 491, 495, 506, 517, 519, 525, 527, 528, 530], "staticmethod": 139, "function": [139, 140, 155, 199, 200, 205, 215, 216, 219, 220, 232, 262, 263, 275, 307, 310, 319, 324, 437, 438, 439, 442, 443, 444, 459, 461, 465, 466, 469, 473, 474, 475, 477, 478, 479, 489, 499, 505, 506, 517, 520, 522, 523, 524, 525, 526, 528, 529], "smoothquantcalibr": 140, "dataset": [140, 141, 165, 207, 219, 220, 221, 223, 224, 228, 229, 230, 242, 251, 262, 263, 264, 266, 267, 271, 272, 273, 285, 296, 300, 301, 302, 304, 333, 349, 353, 354, 355, 357, 358, 391, 421, 424, 439, 441, 442, 443, 461, 467, 472, 477, 478, 486, 500, 501, 511, 517, 520, 522, 523, 525, 528, 530, 531], "outlier": [140, 443, 460, 464, 503, 522, 525], "ignor": [140, 432, 460, 462, 522, 525, 528], "smoothquantcalibrationllm": 140, "model_path": [140, 148, 166, 464, 511], "temp_path": 140, "weight_name_map": 140, "llm": [140, 141, 151, 206, 412, 441, 517, 518, 522, 525], "eval_func": [140, 219, 220, 262, 263, 333, 335, 336, 337, 339, 340, 341, 342, 358, 391, 392, 394, 395, 396, 397, 398, 400, 401, 402, 403, 410, 421, 438, 461, 462, 464, 465, 466, 467, 478, 501, 520, 521, 522, 528, 530], "temporari": [140, 165, 432, 436], "store": [140, 185, 187, 188, 191, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 210, 215, 216, 233, 276, 322, 329, 473], "median": 140, "autotrack": [140, 148], "smoothquantscal": 141, "alpha": [141, 156, 160, 170, 187, 208, 520, 528], "scales_per_op": 141, "individu": [141, 193, 327, 385, 390, 436, 506, 517, 525], "smoothquantscalerllm": 141, "tensorflowqdqtoonnxqdqconvert": 142, "shape_overrid": 142, "inputs_as_nchw": [142, 293], "default_opset_vers": 142, "bia": [143, 215, 216, 522, 526], "correct": [143, 171, 211, 215, 216, 300, 301, 302, 304, 328, 353, 354, 355, 357, 436, 481], "biascorrect": 143, "fp32_graph": 143, "weight_empir": 143, "Will": [143, 465, 474], "our": [143, 165, 215, 216, 439, 441, 469, 478, 499, 500, 503, 524, 529], "task": [143, 231, 238, 274, 281, 304, 357, 462, 465, 466, 469, 474, 477, 478, 501, 505, 508, 517, 522, 525, 531], "close": [143, 171, 460, 507], "w_int8": [143, 171], "u": [143, 171, 481, 500, 505], "w_fp32": [143, 171], "varianc": [143, 171, 464], "differ": [143, 167, 171, 173, 178, 184, 202, 215, 216, 224, 233, 248, 250, 267, 276, 289, 295, 304, 310, 312, 321, 332, 357, 368, 426, 436, 438, 439, 443, 461, 462, 464, 465, 467, 468, 473, 474, 477, 478, 480, 491, 495, 500, 503, 506, 515, 517, 520, 522, 525, 526, 527, 528], "wise": [143, 154, 156, 158, 166, 171, 215, 216, 336, 339, 395, 396, 400, 414, 443, 474, 503, 517, 526, 528, 530], "minim": [143, 171, 336, 395, 443, 444, 460, 465, 468, 477, 478, 491, 495, 517, 520, 528], "scale_c": [143, 171], "shift": [143, 171, 244, 286, 499, 527], "notic": [143, 171, 249, 476, 479, 501, 523], "first": [143, 157, 165, 171, 192, 213, 215, 216, 231, 274, 300, 346, 353, 396, 407, 432, 438, 439, 442, 443, 444, 462, 464, 475, 479, 483, 492, 493, 496, 499, 501, 502, 503, 519, 520, 521, 522, 524, 525, 526, 528, 530], "empir": [143, 171], "solut": [143, 171, 441, 442, 443, 470, 483, 487, 492, 518, 522, 523, 525, 528, 529], "don": [143, 171, 193, 215, 216, 438, 504, 517, 528], "min": [143, 166, 171, 185, 216, 414, 432, 464, 501, 503, 517, 520, 522, 525, 527, 528], "graphtransform": 144, "graphtransformbas": 144, "input_pb": [144, 146, 147], "log": [146, 172, 175, 191, 374, 375, 379, 428, 438, 489, 511, 512, 513, 524, 526, 528], "insertlog": 146, "node_name_list": 146, "show_nam": 146, "show_op": 146, "first_n": 146, "summar": [146, 465], "1024": [146, 233, 276, 484], "dump_fp32": 146, "rerang": 147, "rerangequantizedconcat": 147, "rerange_quant": 147, "version1_lt_version2": [148, 432], "version1": [148, 432], "version2": [148, 432], "version1_gt_version2": [148, 432], "greater": [148, 432, 511, 517, 528], "version1_eq_version2": [148, 432], "version1_gte_version2": [148, 432], "version1_lte_version2": [148, 432], "disable_random": 148, "seed": [148, 184, 215, 216, 312, 432, 478, 530], "disabl": [148, 215, 216, 436, 498, 503, 521, 522], "read_graph": 148, "in_graph": 148, "in_graph_is_binari": 148, "write_graph": 148, "out_graph_def": 148, "out_graph_fil": 148, "write": [148, 240, 283, 432, 467, 473, 478, 481, 526], "is_ckpt_format": 148, "ckpt": [148, 358, 366, 391, 531], "folder": [148, 233, 238, 276, 281, 358, 391, 431, 462, 486, 491, 495, 504, 511, 512, 513, 522, 526], "is_saved_model_format": 148, "saved_model": [148, 306, 522], "get_estimator_graph": 148, "estim": [148, 304, 357, 366, 528], "input_fn": [148, 366], "get_tensor_by_nam": 148, "try_cnt": 148, "import": [148, 172, 185, 215, 216, 306, 358, 368, 391, 410, 421, 432, 438, 439, 441, 444, 459, 461, 462, 464, 465, 466, 467, 469, 472, 477, 478, 479, 480, 481, 485, 487, 500, 501, 509, 515, 516, 517, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529], "scope": [148, 437, 443, 478], "onc": [148, 157, 180, 209, 255, 331, 335, 392, 394, 443, 444, 461, 498, 504, 517, 518, 528, 531], "both": [148, 216, 436, 439, 442, 466, 478, 482, 501, 503, 505, 517, 519, 520, 522, 525, 528], "compat": [148, 366, 437, 467, 480, 493, 496, 498, 517, 523], "v1": [148, 243, 244, 286, 301, 302, 304, 354, 355, 357, 366, 467, 469, 470, 477, 480, 502, 517, 523, 524, 525, 531], "suffix": 148, "time": [148, 157, 215, 216, 248, 289, 304, 336, 357, 368, 395, 432, 443, 461, 464, 467, 470, 478, 486, 488, 491, 495, 498, 499, 504, 507, 511, 512, 515, 517, 518, 520, 522, 524, 526, 527, 528], "got": [148, 443, 470, 526], "iterator_sess_run": 148, "sess": [148, 366], "iter_op": 148, "feed_dict": [148, 230, 273], "output_tensor": [148, 366], "measur": [148, 249, 358, 426, 439, 442, 459, 464, 465, 477, 478, 522, 526, 528, 531], "integr": [148, 178, 250, 442, 478, 499, 500, 505, 522], "makeiter": 148, "feed": [148, 230, 273, 465, 517], "end": [148, 198, 199, 200, 205, 215, 216, 231, 247, 248, 274, 288, 289, 329, 335, 392, 394, 442, 443, 444, 465, 466, 471, 475, 478, 492, 508, 515, 517, 526, 527, 528], "predict": [148, 248, 253, 289, 297, 301, 302, 304, 350, 354, 355, 357, 391, 439, 465, 477, 489, 522, 525, 526, 527], "pred": [148, 304, 357, 477], "collate_tf_pr": 148, "collat": [148, 165], "get_input_output_node_nam": 148, "fix_ref_type_of_graph_def": 148, "fix": [148, 203, 205, 231, 274, 329, 461, 462, 485, 517, 522, 525, 528], "strip_unused_lib": 148, "offici": [148, 297, 301, 302, 350, 354, 355, 436, 525], "r1": 148, "15": [148, 471, 475, 512], "branch": [148, 437], "get_graph_def": 148, "auto_input_output": 148, "get_model_input_shap": 148, "get_tensor_val_from_graph_nod": 148, "graph_node_name_map": 148, "kei": [148, 152, 157, 158, 162, 191, 202, 211, 213, 215, 216, 311, 328, 366, 410, 422, 424, 432, 441, 443, 500, 501, 507, 518, 522, 526, 528], "val": [148, 211, 233, 236, 276, 279, 328, 464, 478, 503], "tensor_v": 148, "int8_node_name_revers": 148, "revers": [148, 501], "tf_diagnosis_help": 148, "fp32_model": [148, 152, 165, 294, 432, 442, 522], "quan_model": 148, "save_path": [148, 293, 294, 442, 480], "diagnosi": [148, 215, 216, 478, 501, 502, 503, 518, 523, 529], "generate_feed_dict": 148, "input_tensor": [148, 366], "get_weight_from_input_tensor": 148, "input_tensor_nam": [148, 366], "associ": [148, 157, 300, 353], "search": [148, 151, 166, 184, 185, 191, 205, 212, 216, 219, 220, 262, 263, 295, 297, 307, 310, 311, 312, 332, 336, 350, 395, 412, 414, 432, 441, 474, 477, 481, 482, 492, 517, 518, 522, 526, 528, 529], "look": [148, 202, 442, 444, 471, 477, 500, 501, 503, 530], "sq_weight_tensor": 148, "sq_weights_nod": 148, "two": [148, 152, 157, 172, 192, 197, 204, 209, 233, 238, 249, 276, 281, 300, 327, 331, 333, 340, 353, 401, 432, 437, 438, 439, 461, 462, 465, 467, 469, 471, 478, 479, 505, 506, 508, 517, 520, 521, 522, 524, 525, 528, 530], "apply_inlin": 148, "func": [148, 165, 432, 520, 530], "inlin": [148, 481, 486, 489], "definit": [148, 160, 224, 229, 267, 272], "concret": [148, 528], "new_graph_def": 148, "construct_function_from_graph_def": 148, "frozen_func": 148, "rebuild": [148, 482, 491, 495], "reconstruct": [148, 518], "new_func": 148, "parse_saved_model": 148, "output_tensor_nam": [148, 366], "_saved_model": 148, "load": [148, 155, 157, 158, 231, 247, 248, 274, 288, 289, 358, 366, 391, 431, 432, 443, 461, 491, 495, 499, 501, 519, 520, 522, 525], "reconstruct_saved_model": 148, "trackabl": 148, "destin": [148, 292, 306], "actawareweightqu": 149, "example_input": [149, 159, 162, 164, 165, 166, 215, 216, 294, 431, 469], "data_typ": [149, 166, 348, 409, 414], "enable_full_rang": [149, 166, 414, 417, 427, 522], "algo": [149, 424], "torch": [150, 151, 152, 153, 154, 157, 158, 160, 161, 162, 163, 165, 166, 170, 188, 191, 192, 194, 202, 212, 215, 216, 294, 358, 391, 427, 431, 438, 441, 444, 445, 465, 467, 469, 478, 479, 480, 481, 486, 489, 501, 520, 522, 525, 526], "bf16modulewrapp": 150, "bf16modul": 150, "mix": [150, 159, 215, 216, 334, 346, 358, 393, 407, 441, 442, 449, 474, 481, 487, 488, 489, 529], "precis": [150, 159, 215, 216, 219, 220, 262, 263, 295, 302, 304, 305, 332, 334, 346, 355, 357, 358, 368, 393, 396, 407, 432, 441, 442, 443, 449, 459, 460, 466, 467, 471, 474, 481, 487, 488, 489, 518, 519, 520, 522, 525, 528, 529], "mixed_precision_model": 150, "bf16_symbolic_trac": 150, "fx_sub_module_list": 150, "trace": [150, 152, 163, 165, 191, 215, 216, 294, 398, 438, 488, 528], "_description_": 150, "is_leaf": [151, 412], "judg": [151, 412], "nn": [151, 158, 160, 162, 165, 166, 191, 192, 202, 215, 216, 294, 358, 391, 412, 414, 415, 419, 420, 427, 431, 438, 465, 478, 480, 522, 525, 526], "trace_gptq_target_block": [151, 412], "module_typ": [151, 412], "modulelist": [151, 412], "sequenti": [151, 229, 272, 333, 335, 392, 394, 412, 528], "stack": [151, 412], "structur": [151, 192, 203, 204, 215, 216, 329, 347, 408, 412, 432, 474, 497, 499, 502, 511, 517, 518, 520, 526, 529, 531], "critic": [151, 202, 412, 436], "gptq_related_block": [151, 412], "embed": [151, 165, 412, 460, 517], "transformers_pr": [151, 412], "todo": [151, 231, 234, 274, 277, 300, 346, 353, 407, 412], "transformers_nam": [151, 412], "find_lay": [151, 412], "conv1d": [151, 412, 444], "find_layers_nam": [151, 412], "log_quantizable_layers_per_transform": [151, 412], "transformer_block": [151, 412], "maxq": [151, 412], "gptquantiz": [151, 412], "nsampl": [151, 166, 412, 417, 522], "use_max_length": [151, 166, 412, 417], "pad_max_length": [151, 166, 412, 417], "layer_wis": [151, 166, 412, 417, 431, 522], "compress": [151, 296, 319, 324, 349, 368, 412, 421, 427, 434, 441, 449, 465, 474, 478, 498, 500, 515, 516, 517, 518, 520, 525, 529, 531], "pretrain": [151, 412, 427, 481, 487], "url": [151, 233, 276, 412, 437, 476, 509, 510, 517], "arxiv": [151, 187, 205, 206, 329, 412, 417, 441, 460, 517, 518, 522, 525], "org": [151, 187, 205, 206, 300, 329, 353, 412, 417, 438, 464, 475, 493, 496, 517], "2210": [151, 412, 417, 522], "17323": [151, 412, 417, 522], "node_collector": 152, "hook": [152, 177, 181, 202, 257, 258, 319, 324, 424, 465, 466, 478, 517, 525, 526], "record": [152, 165, 178, 181, 231, 232, 233, 239, 250, 257, 274, 275, 276, 282, 432, 462, 503, 522, 524, 526, 528], "hessiantrac": 152, "q_model": [152, 156, 216, 306, 391, 438, 441, 461, 462, 464, 467, 469, 472, 473, 477, 478, 480, 500, 501, 520, 521, 522], "criterion": [152, 177, 179, 180, 186, 187, 193, 198, 199, 200, 202, 205, 206, 210, 215, 216, 252, 255, 296, 349, 465, 466, 478, 517, 520, 525, 528, 530], "yao": 152, "zhewei": 152, "et": [152, 460, 522, 525], "al": [152, 460, 522, 525], "pyhessian": 152, "network": [152, 187, 193, 194, 329, 398, 439, 460, 465, 466, 469, 478, 500, 518, 520, 525, 528], "through": [152, 219, 220, 262, 263, 357, 358, 391, 441, 459, 471, 473, 474, 477, 484, 505, 515, 516, 517, 519, 520, 522, 525], "len": [152, 216, 248, 289, 462, 467, 527], "2020": 152, "ieee": [152, 479, 525], "intern": [152, 229, 272, 346, 407, 461, 462, 477, 517], "confer": [152, 517, 525], "big": [152, 464, 522], "dong": 152, "zhen": 152, "hawq": [152, 398, 528], "v2": [152, 398, 461, 467, 469, 470, 475, 487, 523, 525, 528, 529, 531], "advanc": [152, 215, 216, 436, 441, 443, 449, 517, 520, 530], "system": [152, 157, 172, 249, 432, 459, 484, 517, 531], "33": [152, 531], "18518": 152, "18529": 152, "openvinotoolkit": 152, "nncf": 152, "develop": [152, 368, 437, 438, 475, 478, 479, 481, 487, 498, 504, 517, 518, 521, 524], "hessian_trac": 152, "compare_weight": 152, "float_dict": 152, "ani": [152, 157, 300, 302, 345, 353, 355, 385, 390, 406, 410, 419, 429, 432, 436, 441, 444, 467, 481, 486, 499, 500, 504, 505, 517, 524, 528], "quantized_dict": 152, "compar": [152, 304, 357, 432, 466, 477, 501, 517, 520, 522, 524, 525, 526, 528], "being": [152, 300, 353, 444, 506], "wt_compare_dict": 152, "float_model": 152, "state_dict": [152, 467, 522, 526], "qmodel": 152, "compute_error": 152, "state": [152, 192, 444, 484, 517], "weight_dict": 152, "hawq_top": 152, "enable_act": 152, "modul": [153, 154, 188, 194, 201, 309, 315, 325, 326, 438, 461, 465, 474, 477, 478, 480, 517, 519, 521, 522, 526, 529], "portabl": 155, "serial": [155, 157], "see": [155, 248, 289, 297, 350, 436, 437, 438, 440, 476, 478, 491, 492, 495, 498, 499, 503, 504, 522, 525, 526, 528], "copyreg": 155, "mechan": [155, 187, 517, 524, 529], "pickler": 155, "pickletool": 155, "comment": [155, 436, 443, 462, 477, 478, 522, 527], "unpickl": [155, 157], "misc": [155, 476], "format_vers": 155, "compatible_format": 155, "except": [155, 157, 410, 432, 504, 520, 522], "pickleerror": 155, "pickl": [155, 157], "picklingerror": 155, "unpicklingerror": 155, "problem": [155, 231, 274, 304, 357, 477, 479, 499], "secur": [155, 441, 500, 518, 532], "violat": 155, "also": [155, 192, 230, 233, 248, 273, 276, 289, 297, 350, 357, 368, 391, 437, 439, 442, 443, 444, 461, 464, 468, 472, 474, 477, 478, 481, 486, 491, 492, 495, 498, 499, 500, 503, 504, 515, 517, 518, 520, 521, 522, 525, 528], "includ": [155, 178, 187, 191, 193, 208, 210, 215, 216, 231, 233, 240, 248, 250, 274, 276, 283, 289, 295, 305, 327, 332, 410, 432, 436, 442, 443, 444, 461, 462, 464, 475, 476, 477, 478, 481, 484, 487, 492, 504, 508, 511, 512, 513, 517, 520, 521, 522, 526, 528], "necessarili": 155, "limit": [155, 185, 336, 395, 432, 441, 464, 465, 522, 523, 526], "attributeerror": [155, 410], "eoferror": 155, "importerror": [155, 470], "indexerror": 155, "layerwisequ": 156, "pretrained_model_name_or_path": [156, 158], "op_cfg": 156, "output_dir": [156, 427, 478, 486, 487, 502, 503, 509, 512, 513], "5": [156, 170, 178, 215, 216, 235, 244, 250, 278, 286, 304, 357, 391, 442, 462, 469, 471, 477, 478, 503, 508, 511, 512, 517, 519, 520, 522, 525, 527, 528, 530, 531], "order": [156, 165, 297, 298, 333, 336, 339, 348, 350, 351, 395, 400, 409, 438, 464, 477, 501, 519, 522, 525, 526, 528], "memomeri": 156, "f": [157, 188, 465, 467, 520, 522, 525], "file_lik": 157, "map_loc": 157, "pickle_modul": [157, 188], "weights_onli": 157, "pickle_load_arg": 157, "facil": 157, "treat": [157, 461], "storag": [157, 441, 472, 477, 500, 503, 522, 525], "thei": [157, 249, 410, 436, 465, 471, 478, 486, 501, 504, 515], "deseri": 157, "were": [157, 304, 357, 484, 517], "fail": [157, 438, 461, 469, 507], "e": [157, 193, 215, 216, 436, 437, 465, 468, 472, 481, 486, 487, 491, 495, 517, 522, 525, 528], "becaus": [157, 197, 202, 248, 289, 327, 438, 503, 520, 525, 527, 528], "doesn": [157, 248, 289, 442, 467, 478, 479, 499, 530], "certain": [157, 523, 524], "howev": [157, 504, 517, 522, 525], "altern": [157, 215, 216, 391], "argument": [157, 216, 410, 419, 439, 464, 502, 503, 506, 509, 511, 512, 513, 522], "callabl": [157, 215, 216, 302, 355, 415, 419, 421, 461], "locat": [157, 167, 211, 248, 289, 467, 484, 491, 495, 498, 506, 520, 523, 527, 530], "resid": 157, "tag": [157, 366, 525, 526], "wa": [157, 215, 216, 442, 478, 503, 504, 507, 518, 528], "builtin": [157, 467], "cuda": [157, 211, 479, 481, 483, 517, 520], "device_id": 157, "either": [157, 216, 300, 353, 482, 486, 506, 516, 519, 520], "final": [157, 191, 198, 211, 329, 443, 478, 484, 515, 517, 520, 523, 528], "alreadi": [157, 172, 233, 247, 249, 276, 288, 442, 462, 474, 493, 496, 500, 509, 528], "right": [157, 244, 286, 300, 353, 436, 437, 438, 498, 504, 525, 527], "otherwis": [157, 233, 248, 276, 289, 432, 436, 443, 462, 493, 496, 519, 522, 527], "fall": [157, 165], "back": [157, 165, 248, 254, 289, 464, 498, 504], "behavior": [157, 436, 442, 443, 444, 471, 480, 522, 526, 528, 530], "wasn": 157, "indic": [157, 177, 215, 216, 224, 229, 231, 267, 272, 274, 290, 300, 311, 353, 438, 461, 470, 501, 506, 526], "appear": [157, 436, 492, 498, 500], "ones": [157, 300, 353, 517], "put": [157, 233, 276, 462, 465], "user": [157, 172, 180, 191, 203, 211, 215, 216, 219, 220, 233, 236, 240, 248, 249, 255, 262, 263, 276, 279, 283, 289, 295, 319, 324, 330, 332, 333, 357, 358, 368, 391, 396, 409, 421, 432, 438, 439, 441, 442, 443, 444, 449, 459, 461, 465, 466, 469, 471, 474, 477, 478, 479, 480, 481, 482, 483, 485, 486, 487, 489, 492, 498, 505, 506, 507, 508, 511, 512, 513, 515, 516, 517, 518, 520, 521, 523, 525, 526, 527, 528, 532], "register_packag": 157, "readlin": 157, "tell": [157, 357, 391, 519], "seek": [157, 522], "o": [157, 410, 475, 483, 501], "pathlik": 157, "metadata": 157, "primit": 157, "keyword": [157, 216], "unless": [157, 471], "implicitli": 157, "known": [157, 251, 336, 395, 478, 517, 526, 528], "insecur": [157, 500], "possibl": [157, 249, 464, 500, 516, 517, 521, 522, 528], "construct": [157, 231, 234, 235, 238, 246, 251, 253, 254, 256, 274, 277, 278, 281, 357, 362, 366, 409, 424, 436, 443, 444, 462, 467, 517, 528], "malici": 157, "arbitrari": [157, 478, 516], "code": [157, 191, 219, 220, 249, 262, 263, 306, 330, 333, 391, 421, 438, 441, 442, 443, 444, 462, 465, 466, 467, 473, 474, 476, 477, 481, 483, 485, 486, 487, 489, 492, 498, 502, 503, 505, 506, 507, 515, 516, 517, 518, 519, 520, 524, 525, 526, 527], "never": [157, 528], "could": [157, 162, 170, 193, 219, 220, 233, 262, 263, 276, 333, 358, 391, 421, 436, 438, 466, 478, 516, 517, 520, 522, 523, 525, 529], "come": [157, 528], "untrust": 157, "unsaf": 157, "tamper": 157, "trust": [157, 464, 500], "load_state_dict": 157, "ram": 157, "surg": 157, "checkpoint": [157, 366, 431, 480], "By": [157, 191, 215, 216, 297, 350, 443, 444, 477, 480, 491, 492, 495, 517, 518, 522, 528], "decod": [157, 243, 244, 286, 297, 350, 477, 527], "byte": 157, "utf": [157, 247, 288], "unicodedecodeerror": 157, "ascii": 157, "codec": 157, "0x": 157, "incorrect": 157, "extra": [157, 302, 355, 478], "encod": [157, 300, 353, 501, 527], "latin1": 157, "them": [157, 191, 231, 274, 438, 444, 461, 464, 469, 471, 473, 501, 504, 516, 517, 522, 528], "keep": [157, 202, 211, 328, 396, 438, 442, 497, 498, 523], "later": [157, 162, 170, 505, 506, 526], "byte_arrai": 157, "xdoctest": 157, "skip": [157, 526, 528], "undefin": [157, 211, 328], "filepath": [157, 432], "pt": [157, 431, 480, 502, 518, 520, 521, 522], "onto": 157, "lambda": [157, 522], "loc": 157, "bytesio": 157, "open": [157, 252, 296, 349, 424, 434, 436, 441, 469, 470, 478, 493, 496, 499, 500, 504, 505, 506, 518, 523], "rb": 157, "buffer": 157, "get_modul": [158, 162], "get_children": 158, "get_named_children": 158, "dowload_hf_model": 158, "repo_id": 158, "cache_dir": 158, "repo_typ": 158, "revis": 158, "download": [158, 233, 276, 462, 464, 475, 503, 509, 523], "hug": [158, 441, 505, 518], "face": [158, 436, 441, 449, 481, 485, 505, 507, 518, 523, 531], "hf": [158, 522, 525, 531], "hub": [158, 441, 468, 472, 489, 522], "load_empty_model": [158, 522], "automodelforcausallm": 158, "empti": [158, 215, 216, 484, 522], "get_super_module_by_nam": 158, "module_nam": [158, 187, 188, 198, 199, 200, 201, 203, 204, 205, 206, 208, 210, 329, 432], "father": [158, 191], "update_modul": 158, "new_modul": [158, 162, 165, 420], "load_layer_wise_quantized_model": 158, "load_tensor_from_shard": 158, "shard": 158, "load_tensor": 158, "ipex_mixed_precis": 159, "fakeaffinetensorquantfunct": 160, "affin": [160, 520], "teqlinearfakequ": 160, "orig_lay": 160, "mullinear": [160, 166], "input_scal": 160, "detector": 161, "transformerbasedmodelblockpatterndetector": 161, "pattern_lst": 161, "block_pattern": 161, "detect": [161, 165, 191, 215, 216, 300, 304, 353, 357, 362, 437, 438, 481, 488, 489, 517, 528], "ffn": [161, 202], "set_modul": [162, 165, 420], "torchsmoothqu": [162, 525], "q_func": [162, 219, 220, 262, 263, 335, 336, 337, 339, 340, 341, 342, 392, 394, 395, 396, 397, 398, 400, 401, 402, 403, 442, 443, 478, 528], "traced_model": [162, 163], "whose": [162, 170, 193, 328, 366, 473, 525, 528], "absorb": [162, 165, 166, 170, 522], "trace_and_fuse_sub_graph": 163, "is_qat": 163, "tequant": 164, "absorb_to_lay": [164, 165, 166], "extra_config": [164, 166], "trainabl": [164, 441, 518, 522], "move_input_devic": 165, "auto": [165, 189, 191, 215, 216, 334, 349, 393, 399, 432, 438, 460, 481, 484, 486, 488, 489, 517, 520, 522], "kind": [165, 478], "forward_wrapp": 165, "get_embedding_contigu": 165, "contigu": 165, "is_fused_modul": 165, "_propagate_qconfig_help": 165, "collate_torch_pr": 165, "collate_result": 165, "input2tupl": 165, "append_attr": 165, "fx_model": 165, "fx_white_list": 165, "append": [165, 333, 336, 395, 438, 466, 478, 516], "graphmodul": [165, 438, 521], "addit": [165, 216, 421, 443, 444, 465, 492, 500, 506, 522, 523, 528], "dir": [165, 231, 274, 427, 431, 462, 470, 473], "generate_activation_observ": 165, "smooth_quant_en": 165, "observ": [165, 444, 522, 524, 526, 528], "what": [165, 198, 229, 272, 357, 391, 421, 436, 518], "check_cfg_and_qconfig": 165, "op_infos_from_cfg": 165, "output_tensor_ids_op_nam": 165, "paser_cfg": 165, "ops_nam": 165, "get_quantizable_ops_from_cfg": 165, "input_tensor_ids_op_nam": 165, "update_sq_scal": 165, "ipex_config_path": 165, "smoothquant_scale_info": 165, "ipex_config": 165, "json": [165, 232, 248, 275, 289, 431, 462, 480, 499, 506, 507, 511, 512, 513, 522, 527], "auto_copi": 165, "fetch_modul": [165, 420], "op_nam": [165, 212, 215, 216, 347, 408, 420, 432, 433, 443, 478, 517, 526], "simple_infer": 165, "get_example_input": 165, "example_inp": 165, "get_fallback_ord": 165, "confidence_batch": [165, 528], "fallback": [165, 216, 339, 340, 398, 400, 401, 469, 479, 501, 521, 528], "requantize_cfg": 165, "confid": 165, "ordered_op": 165, "get_mse_order_per_fp32": 165, "influenc": [165, 517], "last": [165, 187, 211, 215, 216, 461, 479, 481, 483, 488, 492, 520, 522, 525], "fallback_ord": 165, "get_mse_order_per_int8": 165, "get_torch_vers": 165, "match_datatype_pattern": 165, "calculate_quant_min_max": 165, "unsign": [165, 348, 409, 444, 522], "qmin": 165, "qmax": 165, "get_depth": 165, "depth": [165, 465, 521], "get_dict_at_depth": 165, "target_depth": 165, "nest": [165, 213], "get_element_under_depth": 165, "ops_lst": 165, "get_op_type_by_nam": 165, "quantizable_op": 165, "collect_weight_info": 165, "fc": [165, 216, 517], "param": [165, 172, 180, 221, 249, 255, 264, 304, 336, 357, 395, 432, 442, 480, 528], "_type_": [165, 427], "get_module_input_output": 165, "module_hook_config": 165, "input_func": 165, "output_func": 165, "help": [165, 181, 257, 306, 480, 481, 487, 498, 506, 511, 512, 513, 522, 528, 529], "module_name_list": 165, "requir": [165, 166, 215, 216, 222, 333, 366, 390, 438, 442, 443, 459, 460, 461, 464, 466, 467, 471, 478, 479, 480, 482, 492, 498, 500, 505, 506, 509, 512, 513, 517, 520, 522, 523, 524, 525, 526, 528, 530], "fc1": [165, 166], "preprocess": [165, 215, 216, 231, 248, 274, 289, 409, 424, 467, 527], "usag": [165, 173, 230, 273, 300, 306, 333, 353, 410, 420, 443, 462, 467, 468, 481, 489, 500, 506, 511, 512, 513, 515, 519, 522, 527], "input_valu": 165, "output_valu": 165, "total_valu": 165, "get_absorb_lay": 165, "supported_lay": 165, "no_absorb_lay": 165, "allow": [165, 336, 395, 465, 467, 477, 478, 479, 500, 505, 517, 519, 522, 525, 528, 530], "absorpt": 165, "eg": [165, 213, 233, 276, 462, 519], "absorbed_1": 165, "xx": 165, "get_block_prefix": 165, "block_list": 165, "block_num": 165, "block_prefix": 165, "get_hidden_st": 165, "calib": [165, 443], "rest": [165, 505, 506, 511, 512, 513], "part": [165, 189, 198, 327, 329, 438, 475, 479, 493, 496, 506, 508, 517, 525, 529], "total_block_kwarg": 165, "total_block_arg": 165, "quantize_4bit": [166, 414], "quantil": [166, 414, 528], "nf4": [166, 414, 441, 522], "return_int": [166, 414, 417], "fp4": [166, 414, 441, 522], "q_tensor": [166, 414], "qdq_weight_asym": [166, 414], "choos": [166, 233, 276, 414, 427, 474, 486, 518, 523, 525, 528, 530], "qdq_weight_sym": [166, 414], "full_rang": [166, 414], "rang": [166, 234, 235, 248, 277, 278, 289, 410, 414, 421, 427, 441, 442, 444, 460, 462, 464, 465, 466, 467, 478, 501, 503, 516, 517, 520, 522, 525, 527], "amax": [166, 414], "qdq_weight_actor": [166, 414], "select": [166, 208, 211, 216, 231, 274, 414, 427, 438, 439, 460, 474, 475, 498, 517, 520, 522, 526, 528], "quant_weight": [166, 414], "search_clip": [166, 414], "best": [166, 177, 248, 289, 290, 295, 332, 339, 400, 414, 436, 439, 475, 481, 487, 498, 504, 515, 520, 522, 525, 527, 528], "num": [166, 414, 432], "best_clip_ratio": [166, 414], "group_dim": [166, 414, 417], "gptq_perm": [166, 414], "perm": [166, 248, 289, 414, 527], "int32": [166, 414, 427, 462, 522], "absorb_lay": 166, "absorb_dict": 166, "absorbed_lay": 166, "fc3": 166, "n_block": [166, 522], "oom": 166, "teq_quant": 166, "quant_weight_w_scal": 166, "algorithm_registri": 167, "algorithm_typ": 167, "registr": [167, 233, 240, 248, 276, 283, 289, 322], "algorithmschedul": 167, "conf": [167, 172, 177, 216, 219, 220, 249, 262, 263, 306, 313, 314, 316, 317, 318, 319, 324, 335, 336, 337, 339, 340, 341, 342, 346, 358, 368, 391, 392, 394, 395, 396, 397, 398, 400, 401, 402, 403, 407, 410, 421, 438, 439, 441, 444, 459, 465, 472, 473, 478, 479, 480, 500, 502, 503, 516, 520, 521, 522, 524, 525, 528], "control": [167, 215, 216, 438, 478, 504, 517, 528], "phase": [167, 439, 478, 517, 520, 521, 528], "fastbiascorrect": [168, 171], "fast_bias_correct": [169, 215, 216, 349, 520], "weight_correct": [169, 215, 216, 349, 520], "futur": [170, 219, 220, 251, 262, 263, 474, 478, 489, 511, 512, 513, 529], "weightcorrect": 171, "1e": [171, 525, 530], "05": [171, 216, 304, 357, 477, 525, 531], "evalu": [172, 177, 193, 215, 219, 220, 231, 249, 262, 263, 274, 290, 297, 300, 301, 302, 304, 306, 350, 353, 354, 355, 357, 358, 368, 391, 421, 424, 439, 442, 443, 462, 465, 466, 473, 474, 477, 478, 479, 481, 487, 489, 492, 498, 515, 517, 520, 524, 525, 526, 528, 530], "set_env_var": [172, 249], "env_var": [172, 249], "overwrite_exist": [172, 249], "env": [172, 249, 470, 511, 512, 513], "set_all_env_var": [172, 249], "physic": [172, 249, 436, 459, 506], "core": [172, 215, 216, 249, 437, 459, 476, 491, 495, 506, 531], "get_architectur": [172, 249], "architectur": [172, 249, 307, 310, 441, 459, 465, 478, 505, 517, 518, 522, 529], "get_threads_per_cor": [172, 249], "thread": [172, 215, 216, 249, 385, 390, 461, 508], "get_thread": [172, 249], "get_physical_id": [172, 249], "socket": [172, 249, 432, 506, 508, 531], "get_core_id": [172, 249], "id": [172, 247, 249, 288, 297, 299, 300, 301, 302, 350, 352, 353, 354, 355, 477, 506, 507, 511, 512, 513, 524, 528], "get_bounded_thread": [172, 249], "core_id": [172, 249], "bind": [172, 249], "run_inst": 172, "b_dataload": [172, 215, 216, 459, 478], "b_func": [172, 459], "benchmarkconfig": [172, 215, 216, 459, 464, 478], "goal": [172, 290, 295, 319, 324, 332, 358, 391, 443, 461, 516, 520, 528], "prefer": [172, 295, 332, 391, 517, 522], "space": [172, 184, 185, 199, 200, 205, 206, 215, 216, 219, 220, 262, 263, 295, 302, 307, 310, 311, 312, 332, 336, 339, 346, 355, 358, 391, 395, 400, 407, 436, 437, 439, 442, 443, 444, 517, 520, 530], "etc": [172, 177, 247, 288, 290, 295, 302, 319, 324, 332, 355, 358, 391, 431, 441, 465, 474, 500, 504, 517, 524, 528], "generate_prefix": 172, "core_list": 172, "command": [172, 249, 421, 464, 467, 481, 483, 486, 491, 495, 499, 500, 502, 503, 504, 506], "numactl": [172, 470, 484, 492], "call_on": 172, "cmd": 172, "log_fil": [172, 384, 389], "window": [172, 459, 498, 499], "config_inst": 172, "raw_cmd": 172, "multi": [172, 189, 191, 202, 300, 353, 357, 391, 439, 461, 462, 474, 478, 515, 517, 520, 528], "trigger": [172, 198, 329], "summary_benchmark": 172, "summari": [172, 421, 464, 493, 496, 526, 531], "profil": [172, 216, 349], "benchmark_with_raw_cmd": 172, "fit_with_raw_cmd": 172, "cores_per_inst": [172, 215, 216, 459, 478, 519], "num_of_inst": [172, 215, 216, 459, 478, 519], "test": [172, 215, 216, 248, 289, 437, 441, 464, 475, 506, 511, 531], "fit": [172, 193, 215, 216, 336, 358, 391, 395, 410, 421, 438, 441, 459, 461, 462, 464, 467, 472, 473, 477, 478, 479, 480, 500, 501, 517, 520, 521, 522], "pb": [172, 215, 216, 358, 366, 391, 441, 459, 467, 472, 478, 480, 500, 503, 511, 526, 531], "eval_dataload": [172, 215, 216, 219, 220, 262, 263, 333, 335, 336, 337, 339, 340, 341, 342, 358, 391, 392, 394, 395, 396, 397, 398, 400, 401, 402, 403, 421, 459, 473, 477, 478, 500, 520, 522, 528], "register_config": 173, "framework_nam": 173, "algo_nam": 173, "pytorch": [173, 178, 180, 181, 188, 191, 194, 197, 198, 201, 206, 207, 215, 216, 230, 231, 233, 236, 240, 248, 250, 255, 257, 273, 274, 276, 279, 283, 289, 294, 295, 304, 305, 325, 327, 330, 332, 340, 349, 357, 358, 367, 391, 401, 425, 432, 437, 438, 439, 441, 442, 443, 444, 460, 461, 465, 466, 468, 471, 474, 475, 478, 479, 480, 481, 483, 486, 487, 488, 489, 498, 500, 509, 512, 513, 517, 518, 519, 522, 523, 525, 528, 530], "examplealgorithm": 173, "examplealgorithmconfig": 173, "baseconfig": [173, 419], "composableconfig": 173, "logger": [174, 296, 325, 349, 422, 425, 432], "msg": [175, 428, 507, 511, 512], "debug": [175, 410, 428, 464, 491, 495, 499, 528, 529], "fatal": [175, 428], "warn": [175, 428], "alia": [175, 428, 432, 483, 488], "compon": [177, 290, 296, 333, 349, 438, 464, 467, 475, 476, 481, 498, 506, 516, 517], "quantizationawaretrainingcallback": 177, "pruningcallback": 177, "distillationcallback": 177, "basecallback": 177, "design": [177, 230, 253, 258, 273, 357, 396, 439, 441, 478, 486, 489, 517, 520, 529], "mainli": [177, 209, 258, 331, 441, 478, 517, 520], "prune": [177, 186, 187, 188, 189, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 215, 216, 258, 259, 296, 313, 314, 316, 317, 318, 322, 324, 325, 327, 328, 329, 331, 333, 349, 432, 441, 467, 468, 471, 472, 474, 516, 518, 529, 530], "distil": [177, 186, 215, 216, 250, 257, 258, 296, 349, 441, 468, 472, 474, 516, 529, 530], "In": [177, 195, 196, 197, 202, 203, 204, 208, 216, 230, 258, 273, 300, 327, 329, 353, 368, 436, 438, 439, 441, 442, 443, 461, 462, 464, 465, 466, 467, 477, 478, 488, 491, 492, 495, 501, 502, 503, 504, 511, 512, 513, 515, 516, 517, 520, 521, 522, 524, 525, 526, 527, 528, 529], "adaptor": [177, 215, 216, 348, 409, 424, 441, 444, 474, 521, 522, 523, 525, 526, 529], "deriv": [177, 187, 195, 196, 197, 203, 204, 205, 206, 207, 208, 209, 210, 290, 327, 329, 331, 417], "pipelin": [177, 290, 307, 308, 333, 437, 466, 478, 516], "knowledg": [177, 178, 215, 216, 250, 290, 466, 468, 472, 474, 478, 480, 530], "transfer": [177, 238, 281, 290, 462, 465, 466, 478, 525], "teacher": [177, 215, 216, 290, 465, 466, 478, 531], "student": [177, 181, 215, 216, 231, 257, 274, 290, 462, 465, 466, 531], "distillation_conf": [177, 212, 290], "_epoch_ran": [177, 290], "integ": [177, 197, 198, 215, 216, 290, 300, 304, 311, 327, 329, 353, 357, 410, 442, 444, 460, 520, 522, 525, 528], "much": [177, 187, 215, 216, 248, 289, 290, 465, 492, 525, 527], "epoch": [177, 199, 200, 205, 290, 329, 421, 461, 465, 466, 467, 478, 516, 517, 530], "ran": [177, 290], "eval_frequ": [177, 290], "frequenc": [177, 198, 215, 216, 290, 329, 478, 517, 530], "term": [177, 199, 200, 205, 206, 208, 290, 437, 460, 465, 476, 477, 515, 516, 528], "best_scor": [177, 290], "metric": [177, 215, 216, 219, 220, 252, 262, 263, 290, 295, 296, 311, 319, 324, 332, 333, 349, 358, 391, 421, 424, 439, 442, 443, 462, 464, 467, 478, 479, 500, 520, 524, 525, 526, 528, 529, 530, 531], "best_model": [177, 290, 431, 522], "found": [177, 290, 441, 465, 479, 486, 503, 507, 525, 528, 531], "critet": [178, 250], "tensorflowcrossentropyloss": [178, 250], "pytorchcrossentropyloss": [178, 250], "tensorflowsparsecategoricalcrossentropi": 178, "tensorflowknowledgedistillationloss": [178, 250], "pytorchknowledgedistillationloss": [178, 250, 478], "pytorchintermediatelayersknowledgedistillationloss": [178, 250], "tensorflowcriterion": [178, 250], "pytorchcriterion": [178, 250], "criterion_registri": [178, 250], "criterion_typ": [178, 250], "registry_criterion": [178, 250], "param_dict": [178, 180, 250, 255], "crossentropyloss": [178, 215, 216, 465, 478], "sparsecategoricalcrossentropyloss": 178, "knowledgedistillationframework": [178, 250], "student_model": [178, 216, 250, 478], "teacher_model": [178, 215, 216, 250, 465, 466, 478], "knowledgedistillationloss": [178, 250, 478, 530], "temperatur": [178, 215, 216, 250, 478, 530], "loss_typ": [178, 184, 215, 216, 250, 478, 530], "ce": [178, 215, 216, 250, 478, 530], "loss_weight": [178, 215, 216, 250, 478, 530], "pytorchknowledgedistillationlosswrapp": [178, 250], "tensorflowknowledgedistillationlosswrapp": 178, "tensorflowknowledgedistillationlossextern": [178, 250], "intermediatelayersknowledgedistillationloss": [178, 250], "layer_map": [178, 216, 250, 465], "add_origin_loss": [178, 216, 250], "pytorchintermediatelayersknowledgedistillationlosswrapp": [178, 250], "selfknowledgedistillationloss": [178, 250], "selfknowledg": [178, 250], "pytorchselfknowledgedistillationloss": 178, "pytorchselfknowledgedistillationlosswrapp": 178, "multipl": [180, 189, 217, 218, 222, 223, 231, 232, 234, 235, 236, 237, 238, 242, 245, 248, 255, 260, 261, 265, 266, 268, 274, 275, 277, 278, 279, 280, 281, 285, 287, 289, 305, 358, 359, 360, 362, 368, 459, 462, 469, 478, 505, 508, 516, 517, 524, 525, 528], "tensorflowoptim": [180, 255], "pytorchoptim": [180, 255], "optimizer_registri": [180, 255], "optimizer_typ": [180, 255], "cross": [180, 255, 304, 357, 473, 528], "tensorflowsgd": [180, 255], "sgd": [180, 215, 216, 255, 465, 478, 519, 530], "tensorflowadamw": [180, 255], "tensorflow_addon": [180, 255], "adamw": [180, 255], "tensorflowadam": 180, "adam": [180, 530], "pytorchsgd": [180, 255], "record_output": [181, 257], "output_process": [181, 257], "get_activ": [181, 257], "hyper": [182, 530], "sa_optim": [182, 186], "simul": [183, 444], "anneal": 183, "register_search": 184, "searcher": [184, 191, 216, 312], "registri": [184, 185, 187, 193, 198, 207, 208, 209, 210, 327, 329, 331, 439], "sure": [184, 193, 198, 207, 209, 327, 329, 331, 459, 500], "search_spac": [184, 212, 216, 307, 310, 311, 312], "gridsearch": [184, 312], "grid": [184, 216, 312, 439, 517], "whole": [184, 312, 444, 500, 520, 531], "exhaust": [184, 216, 296, 312, 338, 349, 399, 519], "randomsearch": [184, 312], "randomli": [184, 248, 289, 312, 336, 395, 439, 525, 527, 528], "bayesianoptimizationsearch": [184, 312], "42": [184, 216, 312, 531], "bayesian": [184, 216, 296, 312, 338, 349, 399, 439, 517, 519], "xgbsearcher": 184, "higher_is_bett": [184, 215, 216, 357, 391, 528, 530], "reg": [184, 186, 188, 199, 200, 205, 206, 216], "min_train_sampl": [184, 216], "10": [184, 215, 216, 233, 276, 336, 395, 412, 417, 441, 459, 462, 469, 475, 478, 500, 501, 517, 519, 527, 528, 531], "xgboost": [184, 517], "searchspac": 185, "factori": [185, 364, 371, 373, 378, 381, 383, 388], "actual": [185, 304, 357, 467], "interv": [185, 204, 517], "continu": [185, 196, 300, 327, 353, 439, 478, 499, 517, 529], "learning_r": [185, 215, 216, 478, 519, 530], "001": [185, 233, 276, 462, 467, 525, 530], "num_train_epoch": [185, 478, 517], "20": [185, 248, 289, 503, 506, 511, 512, 513, 517, 527, 530, 531], "weight_decai": [185, 478, 530], "register_searchspac": 185, "pruner": [185, 186, 296, 313, 314, 315, 316, 317, 319, 324, 325, 327, 330, 349, 478, 517, 530], "basesearchspac": 185, "discretesearchspac": 185, "continuoussearchspac": 185, "hpo": [186, 219, 262, 517], "model_slim": [186, 188, 202], "auto_slim": [186, 188, 190], "pattern_analyz": [186, 188, 190], "weight_slim": [186, 188, 190, 202], "mha": [186, 188, 194, 201, 517], "ninm": [186, 188, 194], "nxm": [186, 188, 194, 204, 215, 216, 323, 327, 517], "basic": [186, 188, 191, 193, 201, 215, 216, 247, 288, 296, 307, 327, 338, 342, 345, 349, 399, 403, 406, 421, 474, 475, 478, 500, 519, 524], "block_mask": [186, 187, 188, 201], "pattern_lock": [186, 188, 201, 215, 216, 296, 315, 349], "progress": [186, 188, 201, 233, 276, 492, 498, 500, 517, 520], "retrain_fre": [186, 187, 188, 201, 517], "criteria": [186, 188, 215, 216, 295, 319, 324, 327, 329, 332, 438, 498, 525], "schedul": [186, 188, 198, 199, 200, 205, 206, 208, 215, 216, 296, 325, 329, 349, 478, 505, 506, 508, 516], "tf_criteria": [186, 188], "callback": [186, 319, 324, 421, 424, 438, 478, 516, 517, 520], "register_criterion": [187, 210], "get_criterion": 187, "pruningcriterion": [187, 210], "about": [187, 210, 432, 436, 461, 478, 503, 504, 517, 521, 528, 529, 531], "score": [187, 193, 198, 202, 210, 215, 216, 297, 298, 300, 301, 302, 304, 329, 350, 351, 353, 354, 355, 357, 398, 424, 438, 477, 501, 515, 517, 524, 528], "magnitudecriterion": [187, 210], "magnitud": [187, 210, 215, 216, 296, 304, 315, 349, 357, 474, 517], "criterion_class": [187, 210], "determin": [187, 193, 198, 210, 215, 216, 426, 436, 438, 460, 517, 520, 525], "gradientcriterion": 187, "gradient": [187, 313, 441, 474, 478, 517, 518, 531], "absolut": [187, 215, 216, 304, 357, 477, 478, 517, 520, 528], "snipcriterion": 187, "snip": [187, 215, 216, 329, 474, 517, 531], "product": [187, 441, 474, 479, 481, 482, 498, 504, 518, 520, 524, 528], "singl": [187, 209, 215, 216, 224, 231, 248, 267, 274, 289, 300, 329, 331, 353, 357, 391, 438, 462, 464, 475, 504, 517, 522, 525], "shot": [187, 205, 206, 209, 258, 329, 331, 439, 474, 478, 517, 518, 522], "connect": [187, 329, 498, 500, 507, 517, 524], "sensit": [187, 313, 329, 474, 517], "1810": [187, 329], "02340": [187, 329], "snipmomentumcriterion": 187, "snip_momentum": [187, 215, 216, 478, 517], "momentum": [187, 329, 474, 478, 517, 530], "preserv": [187, 460, 517, 522], "step": [187, 197, 198, 199, 200, 204, 205, 209, 215, 216, 327, 329, 331, 421, 443, 444, 464, 465, 466, 467, 478, 493, 496, 498, 511, 512, 513, 516, 517, 519, 521, 522, 524, 525, 526, 528], "beta": 187, "blockmaskcriterion": 187, "9": [187, 215, 216, 438, 475, 478, 517, 519, 525, 528, 530, 531], "retrainfreecriterion": 187, "pickle_protocol": 188, "_use_new_zipfile_seri": 188, "prepare_prun": [188, 517], "loss_func": [188, 207], "assertionerror": [188, 194, 201, 211, 327, 328, 329, 358], "slim": [189, 190, 191, 300, 353, 364, 366, 480, 517], "round_multipli": 189, "spars": [189, 203, 329, 462, 518], "automat": [189, 191, 192, 215, 216, 233, 236, 243, 244, 276, 279, 286, 295, 305, 332, 438, 441, 459, 462, 474, 478, 479, 481, 483, 486, 487, 489, 491, 492, 493, 495, 496, 498, 505, 508, 516, 517, 520, 525, 527, 528], "model_slim_ffn2": 189, "some": [189, 191, 215, 216, 231, 274, 328, 443, 444, 462, 464, 469, 475, 477, 478, 500, 501, 502, 503, 506, 515, 517, 520, 521, 522, 525, 526, 528, 529, 531], "perman": [189, 436, 517], "obtain": [189, 191, 200, 205, 208, 211, 328, 438, 443, 506, 517, 524, 525, 528], "acceler": [189, 465, 478, 481, 489, 498, 501, 505, 517, 518, 521, 522, 525, 528], "directli": [189, 215, 216, 230, 273, 300, 304, 328, 353, 357, 477, 478, 485, 517, 519, 520, 526], "sprase": 189, "model_slim_mha": 189, "parse_auto_slim_config": [189, 517], "ffn2_sparsiti": [189, 517], "mha_spars": [189, 517], "generate_ffn2_pruning_config": 189, "consecut": [189, 191, 192, 517], "generate_mha_pruning_config": 189, "head": [189, 191, 195, 202, 211, 517, 531], "get_attribut": 191, "descent": [191, 441, 518], "get_common_modul": 191, "layer1": [191, 215, 216, 478, 517, 520], "layer2": [191, 478, 517, 520], "nearest": [191, 248, 289, 417, 522, 527], "print_iter": 191, "recipesearch": 191, "root": [191, 231, 232, 233, 236, 274, 275, 276, 279, 304, 357, 462, 467, 477, 478, 530], "levelwis": 191, "wai": [191, 232, 233, 236, 275, 276, 279, 439, 444, 461, 462, 464, 477, 478, 481, 484, 499, 500, 504, 505, 506, 516, 517, 520, 522, 525, 528, 530], "huggingfac": [191, 202, 231, 274, 427, 462, 468, 472, 486, 487, 488, 489, 509, 510, 512, 513, 522, 525, 531], "bert": [191, 216, 227, 230, 231, 248, 270, 273, 274, 289, 441, 462, 465, 477, 479, 486, 509, 512, 513, 517, 527, 531], "recipe_sampl": 191, "bertattent": 191, "dens": [191, 209, 215, 216, 331, 501, 517, 531], "searching_result": 191, "jitbasicsearch": 191, "placeholder_shap": 191, "placeholder_dtyp": 191, "jit": [191, 215, 481, 483, 488, 525, 526], "script": [191, 297, 298, 301, 302, 350, 351, 354, 355, 437, 467, 474, 481, 485, 488, 489, 492, 509, 511, 518], "static_graph": 191, "flatten_static_graph": 191, "target_lay": 191, "linear2linearsearch": 191, "target_op_lut": 191, "lookup": 191, "tabl": [191, 202, 432, 444, 464, 469, 501, 503, 531], "current_pattern": 191, "statu": [191, 429, 436, 461, 508, 511, 512, 513, 515, 517], "selfmhasearch": 191, "classifierheadsearch": 191, "classifi": [191, 211, 231, 274, 304, 357, 462, 465], "classifierheadsearchertf": 191, "squeezer": 192, "postcompressionutil": 192, "librari": [192, 252, 296, 349, 385, 434, 441, 475, 478, 479, 483, 492, 498, 518, 520], "relat": [192, 208, 290, 300, 319, 324, 327, 353, 409, 424, 444, 481, 505, 506, 517, 523, 530], "linearcompress": 192, "root_linear": 192, "target_linear": 192, "while": [192, 203, 211, 329, 336, 395, 442, 443, 462, 468, 474, 479, 481, 486, 498, 500, 517, 519, 520, 522, 525], "hidden": [192, 197, 327, 442], "layer_1": 192, "act_fn": 192, "layer_2": 192, "linearcompressioniter": 192, "linear_pattern": 192, "register_pattern": [193, 327], "basepattern": [193, 195, 197], "unit": [193, 327, 437, 506, 517], "4x1": [193, 215, 216, 323, 478, 517, 531], "is_glob": [193, 327], "local": [193, 215, 216, 327, 432, 491, 495, 500, 507, 508, 517, 524], "contrast": [193, 327, 527], "keep_mask_lay": 193, "invalid_lay": 193, "max_sparsity_ratio_per_op": [193, 198, 212, 215, 216, 478, 517], "sparsiti": [193, 195, 196, 198, 199, 200, 203, 205, 206, 209, 211, 215, 216, 329, 331, 432, 441, 462, 474, 478, 529, 531], "reach": [193, 209, 215, 216, 331, 437, 461, 500, 517, 528], "min_sparsity_ratio_per_op": [193, 212, 215, 216, 478, 517], "minimum": [193, 215, 216, 444, 460, 464, 478, 489, 517, 525, 528], "target_spars": [193, 212, 215, 216, 478, 517, 519, 530], "pytorchbasepattern": [193, 208], "kerasbasepattern": 193, "get_pattern": [194, 327], "patternmha": 195, "doc": [195, 196, 215, 216, 327, 345, 346, 357, 391, 406, 407, 410, 432, 477, 478, 493, 496, 504], "md": [195, 196, 215, 216, 327, 357, 391], "n": [195, 196, 215, 216, 232, 248, 275, 289, 298, 327, 351, 410, 444, 462, 464, 465, 506, 517, 520, 525, 527], "pytorchpatternninm": 196, "out": [196, 215, 216, 231, 232, 233, 274, 275, 276, 295, 327, 332, 437, 438, 441, 462, 481, 486, 491, 492, 493, 495, 496, 498, 504, 517, 519, 520, 522], "pytorchpatternnxm": 197, "kept": [197, 327], "block_siz": [197, 327, 417, 522], "height": [197, 244, 248, 286, 289, 327, 467, 527, 530], "width": [197, 244, 248, 286, 289, 327, 460, 467, 517, 520, 527, 530], "vertic": [197, 248, 289, 327, 527], "keraspatternnxm": 197, "register_prun": [198, 207, 329], "baseprun": [198, 203, 205, 207], "current_sparsity_ratio": [198, 329], "global_step": [198, 329], "total": [198, 248, 289, 304, 329, 357, 462, 464, 517, 522, 527, 531], "start_step": [198, 212, 215, 216, 329, 478, 517, 519], "end_step": [198, 212, 215, 216, 329, 478, 517, 519], "pruning_frequ": [198, 212, 215, 216, 478, 517], "target_sparsity_ratio": [198, 329], "show": [198, 432, 436, 465, 467, 478, 484, 499, 500, 501, 503, 506, 511, 512, 513, 525, 528, 529], "pytorchbaseprun": [198, 206], "kerasbaseprun": 198, "pytorchbasicprun": 199, "arrang": [199, 200, 205, 206, 232, 233, 236, 275, 276, 279, 462, 517], "proce": [199, 200, 205, 206], "regul": [199, 200, 205, 206], "kerasbasicprun": 199, "pytorchblockmaskprun": 200, "grad": [200, 205], "parse_valid_pruner_typ": 201, "get_prun": [201, 329], "pythonmultiheadattentionprun": 202, "mha_modul": 202, "partial": [202, 517, 520], "qkv": 202, "feedward": 202, "simultan": [202, 481, 505, 516, 519], "qkv_name": 202, "query_layer_nam": 202, "key_layer_nam": 202, "value_layer_nam": 202, "ffn_name": 202, "attention_ffn_nam": 202, "mha_nam": 202, "qkv_modul": 202, "ffn_modul": 202, "mha_compress": 202, "mhacompress": 202, "modifi": [202, 233, 276, 390, 409, 438, 444, 467, 471, 502, 503, 517, 530], "linear_lay": 202, "independ": [202, 385, 390, 444], "length": [202, 215, 216, 231, 248, 274, 289, 300, 353, 441, 462, 477, 518, 520, 522, 527], "4x": [202, 439, 520], "subsequ": [202, 443, 481, 498], "head_mask": 202, "mha_head_s": 202, "similar": [202, 212, 478, 502, 519, 525, 528, 530], "mha_scor": 202, "lock": [203, 317, 318, 474, 516, 517], "pytorchpatternlockprun": 203, "parent": [203, 204, 209, 323, 329, 331, 526], "pytorchprogressiveprun": 204, "basicprun": [204, 207], "interpol": [204, 248, 289, 477, 517, 527], "fine": [204, 231, 274, 462, 484, 517, 518, 520], "grain": [204, 517, 518, 528], "improv": [204, 437, 460, 478, 481, 498, 499, 501, 517, 518, 520, 521, 522, 528, 529, 531], "ad": [204, 231, 274, 297, 336, 350, 395, 443, 444, 464, 479, 481, 486, 489, 493, 496, 506, 517, 522, 526], "retrain": [205, 466], "pytorchretrainfreeprun": 205, "pruner_class": [205, 206], "fast": [205, 215, 216, 441, 517, 518, 522], "retrainfreeprun": [205, 207], "effect": [205, 441, 442, 517, 518], "2204": 205, "09656": 205, "sparsegptprun": [206, 207], "most": [206, 215, 216, 304, 357, 464, 478, 479, 517, 520, 522, 525, 528, 531], "sparsegpt": [206, 207, 517], "massiv": [206, 517], "One": [206, 444, 462, 467, 474, 503, 517, 518, 528], "2301": [206, 517], "00774": [206, 517], "opt": [207, 441, 486, 517, 525, 528, 531], "least": [207, 330, 437, 478, 517, 528], "templat": [207, 330, 478, 517], "tree": [207, 330, 346, 407, 506], "nlp": [207, 215, 216, 330, 486, 502, 517, 520], "huggingface_model": [207, 330, 502], "classif": [207, 231, 248, 274, 289, 304, 330, 357, 465, 469, 477, 487, 501, 509, 512, 513, 517, 518], "pytorch_prun": [207, 296, 349], "eager": [207, 330, 390, 467, 474, 520, 521, 526], "config_file_path": [207, 330], "pruner_info": [207, 330], "pruning_class": 207, "avail": [207, 215, 216, 362, 445, 447, 451, 454, 457, 468, 470, 472, 474, 491, 495, 500, 505, 506, 507, 511, 512, 513, 517, 528, 531], "regular": [208, 297, 328, 350], "register_reg": 208, "regulariz": 208, "get_reg_typ": 208, "get_reg": 208, "basereg": 208, "grouplasso": 208, "coeff": 208, "lasso": [208, 314, 474, 517], "reg_term": 208, "register_schedul": [209, 331], "get_schedul": [209, 331], "pruningschedul": 209, "gradual": [209, 331, 517], "oneshotschedul": [209, 331], "iterativeschedul": [209, 331], "get_tf_criterion": 210, "get_sparsity_ratio": 211, "elementwise_over_matmul_gemm_conv": 211, "elementwise_over_al": 211, "blockwise_over_matmul_gemm_conv": 211, "get_sparsity_ratio_tf": 211, "check_config": [211, 328], "prune_config": [211, 328], "everyth": [211, 328, 486], "reset_none_to_default": 211, "update_param": 211, "process_weight_config": 211, "global_config": [211, 313, 314, 316, 317, 318], "local_config": [211, 215, 216, 313, 314, 316, 317, 318], "default_config": 211, "pruners_info": 211, "process_yaml_config": 211, "check_key_valid": 211, "template_config": 211, "user_config": 211, "process_and_check_config": [211, 328], "process_config": [211, 328], "parse_last_linear": 211, "often": [211, 461, 465, 503, 516, 517], "act": [211, 229, 272, 436], "might": [211, 438, 500, 528], "caus": [211, 443, 461, 482, 501, 503, 517, 522], "drop": [211, 300, 328, 353, 437, 478, 479, 492, 517, 522, 525, 531], "parse_last_linear_tf": 211, "parse_to_prun": [211, 328], "parse_to_prune_tf": 211, "generate_pruner_config": 211, "dotdict": [211, 212, 216, 368, 432], "get_lay": 211, "collect_layer_input": 211, "layer_idx": 211, "layer_input": 211, "previou": [211, 443, 444, 478, 517, 523, 525, 526, 528, 529, 531], "prunerv2": 212, "pruning_typ": [212, 215, 216, 478, 517], "pruning_scop": [212, 215, 216, 478, 517], "sparsity_decay_typ": [212, 215, 216, 478, 517], "pruning_op_typ": [212, 215, 216, 478, 517], "reg_typ": 212, "criterion_reduce_typ": 212, "resume_from_pruned_checkpoint": 212, "cfg_fname": 212, "parser": 212, "quantization_conf": 212, "pruning_conf": 212, "graph_optimization_conf": [212, 295], "mixedprecision_conf": 212, "benchmark_conf": 212, "nasconfig": [212, 216, 308, 310, 439], "approach": [212, 215, 216, 307, 308, 310, 438, 439, 460, 462, 465, 474, 478, 486, 498, 501, 509, 511, 512, 513, 517, 518, 519, 522, 528, 530], "search_algorithm": [212, 216, 296, 309, 349, 439], "na": [212, 216, 296, 349, 362, 474, 531], "procedur": [212, 439, 517, 528], "defaultconf": 212, "instead": [212, 213, 216, 230, 273, 432, 484, 486, 489, 504, 517, 522], "notat": [212, 213, 216, 432], "deep_get": [213, 368], "dot": [213, 479, 520], "person": [213, 436, 518], "john": 213, "deep": [213, 441, 442, 443, 461, 474, 475, 478, 479, 481, 483, 486, 487, 489, 492, 498, 518, 520, 528, 529, 531], "deep_set": [213, 368], "sex": [213, 436], "male": 213, "pythonic_config": 214, "random_se": [215, 216, 336, 395, 478, 530], "1978": [215, 216], "workspac": [215, 216, 431, 432, 480, 506, 511, 512, 513], "default_workspac": [215, 216], "resume_from": [215, 216, 432], "tensorboard": [215, 216, 424, 432, 442, 478, 501], "set_random_se": [215, 216, 432], "set_workspac": [215, 216, 432], "set_resume_from": [215, 216, 432], "set_tensorboard": [215, 216, 432], "directori": [215, 216, 232, 233, 275, 276, 366, 427, 429, 431, 432, 462, 467, 470, 491, 493, 495, 496, 502, 504, 526], "histori": [215, 216, 431, 432, 498, 502, 528], "nc_workspac": [215, 216, 501, 502], "datetim": [215, 216], "now": [215, 216, 248, 289, 438, 439, 444, 462, 467, 489, 519, 527, 528], "strftime": [215, 216], "d_": [215, 216], "resum": [215, 216, 219, 220, 262, 263, 335, 337, 340, 341, 342, 392, 394, 395, 396, 397, 398, 400, 401, 402, 403], "flag": [215, 216, 298, 351, 464], "visual": [215, 216, 441, 489, 498, 524, 526, 528, 529], "displai": [215, 216, 345, 346, 406, 407, 432, 498, 501], "2022": [215, 216, 441, 476, 517, 522, 525, 531], "workspace_path": [215, 216], "accuracycriterion": [215, 216, 478, 528], "rel": [215, 216, 368, 478, 501, 519, 528, 530, 531], "tolerable_loss": [215, 216, 478, 528], "higher": [215, 216, 219, 220, 262, 263, 311, 358, 391, 421, 438, 464, 465, 469, 477, 501, 517, 520, 524], "accept": [215, 216, 410, 436, 459, 461, 500, 522], "accuracy_criterion": [215, 216, 368, 478, 502, 515, 519, 528, 530], "warmup": [215, 216, 459, 478, 519], "inter_num_of_thread": [215, 216, 385, 390, 478, 519], "intra_num_of_thread": [215, 216, 385, 390, 478, 519], "benchmark": [215, 216, 251, 296, 333, 349, 368, 432, 441, 449, 480, 481, 485, 489, 492, 498, 501, 528, 529, 530, 531], "onnxrt_trt_ep": [215, 216, 479, 520], "onnxrt_cuda_ep": [215, 216, 479, 520], "inter": [215, 216], "intra": [215, 216], "quantizationconfig": 215, "post_training_static_qu": [215, 462, 478, 519, 528], "calibration_sampling_s": [215, 216, 478, 503], "op_type_dict": [215, 216, 444, 519, 520, 522, 528], "op_name_dict": [215, 216, 464, 478, 501, 503, 520, 528], "strategy_kwarg": [215, 216, 524, 528], "timeout": [215, 216, 478, 519, 528, 530], "max_trial": [215, 216, 478, 528], "quant_level": [215, 216, 501, 522, 525, 528], "posttrainingquantconfig": [215, 216, 391, 438, 441, 444, 461, 464, 469, 472, 477, 478, 480, 500, 501, 502, 503, 520, 521, 522, 524, 525, 528], "quantizationawaretrainingconfig": [215, 216, 421, 438, 466, 469, 478, 520, 521, 528], "cv": [215, 216, 517], "object_detect": [215, 216, 300, 353], "recommendation_system": [215, 216], "explicitli": [215, 216, 473, 517], "overrid": [215, 216, 432], "quantiztaion": [215, 216], "smooth_quant_arg": [215, 216, 520, 525], "gemm_to_matmul": [215, 216, 520], "graph_optimization_level": [215, 216, 519, 520], "disable_al": [215, 216, 519], "enable_bas": [215, 216], "enable_extend": [215, 216], "enable_al": [215, 216], "first_conv_or_matmul_quant": [215, 216, 520], "last_conv_or_matmul_quant": [215, 216, 520], "pre_post_process_quant": [215, 216, 520], "postprocess": [215, 216, 242, 245, 248, 252, 289, 296, 349, 357, 391, 424, 442, 478, 526, 527], "dedic": [215, 216], "quant_format": [215, 216, 294, 469, 501], "constraint": [215, 216, 295, 332, 478, 517, 524, 528, 530], "conv1": [215, 216, 520, 530], "tuning_strategi": [215, 216], "guarante": [215, 216, 478], "models": [215, 216, 368, 478, 515, 519], "footprint": [215, 216, 295, 319, 324, 332, 368, 466, 478, 515, 517, 519, 522], "earli": [215, 216, 478, 520, 528, 530], "stop": [215, 216, 478, 528, 529, 530], "field": [215, 216, 233, 276, 300, 353, 438, 442, 444, 467, 478, 524, 528, 530], "exit": [215, 216, 335, 392, 394, 478, 506, 511, 512, 513, 530], "excluded_precis": [215, 216, 521], "exclud": [215, 216, 442, 460, 521], "conserv": [215, 216, 349, 399], "use_distributed_tun": 215, "weightpruningconfig": [215, 216, 478, 516, 517], "pruning_config": [215, 216, 478, 517], "98": [215, 216, 478, 517, 519, 531], "exp": [215, 216, 478, 517], "link": [215, 216, 231, 274, 357, 391, 460, 462, 469, 491, 495, 498, 522, 531], "90": [215, 216, 522, 530, 531], "magnitude_progress": [215, 216], "snip_progress": [215, 216], "snip_momentum_progress": [215, 216], "feasibl": [215, 216], "situat": [215, 216, 467, 517], "unstructur": [215, 216, 323, 474, 517, 531], "8x1": [215, 216], "channelx1": [215, 216, 517], "1xchannel": [215, 216, 517], "itrex": [215, 216], "start": [215, 216, 248, 289, 300, 353, 396, 475, 503, 518, 527, 528, 529, 532], "togeth": [215, 216, 248, 289, 465, 475, 485, 518, 526, 527], "sort": [215, 216, 339, 400, 464, 501, 522, 528], "sinc": [215, 216, 295, 297, 319, 324, 332, 350, 465, 469, 475, 477, 492, 498, 503, 516, 522, 523], "lead": [215, 216, 465, 478, 479, 503, 517, 522, 525], "increas": [215, 216, 463, 474, 481, 498, 503, 522, 528], "cube": [215, 216, 517], "6": [215, 216, 471, 520, 525, 528, 531], "update_config": [215, 216], "knowledgedistillationlossconfig": [215, 216, 465, 466, 478, 516], "hyperparamet": [215, 216, 345, 524, 525, 528], "entropi": [215, 216, 460, 528], "groundtruth": [215, 216, 300, 353], "label": [215, 216, 219, 220, 231, 233, 234, 235, 236, 239, 244, 248, 253, 262, 263, 274, 276, 277, 278, 279, 282, 286, 289, 297, 299, 304, 350, 352, 357, 358, 391, 421, 438, 461, 462, 464, 477, 478, 520, 527], "sum": [215, 216, 304, 357, 464, 465], "distillationconfig": [215, 216, 421, 465, 466, 478, 516], "prepare_compress": [215, 216, 421, 438, 465, 466, 478, 516, 517, 520], "criterion_conf": [215, 216], "d_conf": [215, 216, 466, 478, 516], "compression_manag": [215, 216, 421, 438, 465, 466, 478, 516, 517, 520], "featur": [215, 216, 231, 232, 244, 248, 274, 275, 286, 289, 437, 441, 459, 461, 463, 465, 478, 479, 480, 481, 485, 486, 489, 498, 500, 504, 517, 518, 523, 525, 527], "distil_loss": [215, 216, 478], "lr": [215, 216, 465, 467, 478], "ni_workload_nam": 216, "onnxrt_dnnl_ep": [216, 479, 520], "onnxrt_dml_ep": [216, 520], "tuningcriterion": [216, 478, 515, 524, 528], "tuning_criterion": [216, 478, 515, 524, 528], "npu": [216, 520], "xpu": [216, 489], "ptq": [216, 391, 438, 464, 467, 474, 478, 503, 520, 525, 526, 528], "tri": [216, 528], "meet": [216, 222, 333, 335, 392, 394, 438, 443, 515, 518, 519, 520, 522, 526, 528], "mse_v2": [216, 296, 338, 349, 399], "hawq_v2": [216, 349, 399], "docstr": [216, 410], "workload": [216, 429, 432, 500, 518], "insight": [216, 429, 441, 464, 518, 523, 528, 529], "copi": [216, 328, 432, 461, 504], "deepcopi": 216, "model_origin": [216, 391, 521], "qat_op_name_dict": 216, "low_memory_usag": 216, "hpoconfig": 216, "xgb": 216, "bo": 216, "intermediatelayersknowledgedistillationlossconfig": [216, 465], "relationship": [216, 500], "student_layer_nam": 216, "student_layer_output_process": 216, "teacher_layer_nam": 216, "teacher_layer_output_process": 216, "desir": [216, 244, 248, 286, 289, 443, 444, 517, 525, 527], "serv": [216, 366, 506, 511, 512, 513], "numer": [216, 304, 357, 444, 479, 518, 520, 522], "abbrevi": 216, "layer_nam": [216, 517], "l1": 216, "selfknowledgedistillationlossconfig": [216, 465, 478], "student1_layer_name1": 216, "teacher_layer_name1": 216, "student2_layer_name1": 216, "student1_layer_name2": 216, "teacher_layer_name2": 216, "student2_layer_name2": 216, "soft": 216, "l2": [216, 517], "hard": [216, 461, 464], "resblock": 216, "deepst": 216, "02": [216, 531], "mixedprecisionconfig": [216, 358, 410, 478, 479], "mixedprecis": [216, 305, 478], "won": [216, 520, 522], "work": [216, 295, 332, 440, 443, 461, 465, 493, 496, 504, 521, 522, 523, 525, 526], "mix_precis": [216, 349, 410, 478, 479], "converted_model": [216, 358, 478, 479], "exportconfig": 216, "14": [216, 293, 294, 469, 475, 513, 531], "dynamic_ax": [216, 294, 469], "qlinear": [216, 233, 240, 276, 283, 304, 357, 442, 488], "ax": [216, 294], "onnxqlinear2qdqconfig": 216, "onnxqlinear2qdq": 216, "torch2onnxconfig": [216, 469], "torch2onnx": [216, 291, 296, 349], "qdq_op_fp32_bia": 216, "qdq_op_int32_bia": 216, "qdq_op_fp32_bias_qdq": 216, "resnet50": [216, 441, 464, 467, 469, 479, 481, 485, 517, 520, 524, 531], "int8_onnx_config": [216, 469], "randn": [216, 469], "224": [216, 244, 286, 441, 462, 467, 469, 472, 478, 481, 500, 527, 530], "batch_siz": [216, 221, 223, 228, 229, 230, 231, 232, 251, 264, 266, 271, 272, 273, 274, 275, 294, 439, 461, 462, 467, 469, 473, 478, 481, 520], "tf2onnxconfig": [216, 469], "tf2onnx": [216, 291, 296, 349], "output_graph": 216, "dyna": [216, 296, 309, 349, 439, 474, 519], "sigopt": [217, 218, 260, 261, 296, 349, 518], "tpe": [217, 218, 260, 261, 296, 349], "sigopttunestrategi": [219, 262], "q_dataload": [219, 220, 262, 263, 335, 336, 337, 339, 340, 341, 342, 392, 394, 395, 396, 397, 398, 400, 401, 402, 403, 473, 528], "eval_metr": [219, 220, 358, 391, 392, 394, 395, 396, 397, 398, 400, 401, 402, 403, 421, 477, 500, 520], "q_hook": [219, 220, 262, 263, 335, 336, 337, 339, 340, 341, 342, 392, 394, 395, 396, 397, 398, 400, 401, 402, 403], "mandatori": [219, 220, 262, 263, 391, 478, 530], "yield": [219, 220, 229, 251, 262, 263, 272, 336, 358, 391, 395, 410, 421, 461, 520, 528], "_": [219, 220, 262, 263, 391, 438, 439, 441, 442, 443, 460, 464, 465, 467, 469, 471, 478, 479, 480, 481, 487, 491, 493, 495, 496, 503, 506, 507, 515, 517, 520, 522, 523, 524, 525, 526, 528, 530], "well": [219, 220, 262, 263, 358, 391, 421, 439, 441, 462, 517, 520, 523, 525, 530], "taken": [219, 220, 262, 263, 358, 391, 421, 520], "reserv": [219, 220, 262, 263], "abl": [219, 220, 262, 263, 358, 391, 421, 489, 498, 520], "tuner": [219, 220, 262, 263, 295, 332, 358, 391, 421, 520], "scalar": [219, 220, 262, 263, 358, 391, 421, 477, 520, 525, 528], "pseudo": [219, 220, 262, 263, 391, 421, 522, 526], "someth": [219, 220, 233, 262, 263, 276, 391, 421], "fefin": [220, 263], "tpetunestrategi": [220, 263], "basedatalod": [221, 264], "basedataload": [221, 226, 228, 264, 269, 271], "last_batch": [221, 223, 228, 230, 251, 264, 266, 271, 273, 461], "rollov": [221, 223, 228, 230, 251, 264, 266, 271, 273, 461], "collate_fn": [221, 223, 224, 228, 230, 251, 264, 266, 267, 271, 273, 461, 462], "sampler": [221, 223, 225, 228, 230, 251, 264, 266, 268, 271, 273, 285, 296, 345, 406, 461, 467], "batch_sampl": [221, 223, 228, 230, 251, 264, 266, 271, 273, 461], "num_work": [221, 223, 228, 230, 251, 264, 266, 271, 273, 461, 478, 520], "pin_memori": [221, 223, 228, 230, 251, 264, 266, 271, 273, 461], "shuffl": [221, 223, 228, 230, 251, 264, 266, 271, 273, 461, 478, 520], "_generate_dataload": [221, 264], "check_dataload": 222, "default_col": [223, 266], "outer": [223, 266], "defaultdataload": [223, 230, 266, 273], "style": [224, 238, 267, 281, 410, 437, 462, 473], "drop_last": [224, 229, 267, 272], "iterablefetch": [224, 267], "indexfetch": [224, 267], "base_dataload": [225, 268, 285, 296], "default_dataload": [225, 268, 285, 296], "fetcher": [225, 268, 285, 296], "mxnet_dataload": [225, 268, 285, 296], "onnxrt_dataload": [225, 268, 285, 296, 384], "pytorch_dataload": [225, 268, 285, 296], "tensorflow_dataload": [225, 268, 285, 296, 389], "mxnetdataload": [226, 269], "onnxrtbertdataload": [227, 270], "variant": [227, 270], "onnxrtdataload": [227, 270, 384], "pytorchdataload": [228, 271], "data_sourc": [229, 272, 424], "__iter__": [229, 233, 272, 276, 461, 462, 478], "matter": [229, 272, 521], "iterablesampl": [229, 272], "squential": [229, 272], "your": [229, 231, 272, 274, 437, 461, 462, 464, 467, 476, 478, 481, 484, 485, 486, 491, 492, 493, 495, 496, 498, 500, 504, 506, 511, 512, 513, 517, 518, 524, 526, 528, 529], "clear": [229, 272, 442, 471, 477, 478], "iterabledataset": [229, 233, 272, 276], "try": [229, 272, 438, 464, 501, 517, 520, 525, 528], "indexdataset": [229, 272], "__getitem__": [229, 233, 248, 272, 276, 289, 461, 462, 478], "__len__": [229, 233, 272, 276, 462], "retriev": [229, 272, 517], "sequentialsampl": [229, 272], "batchsampl": [229, 272], "tfdatadataload": [230, 273], "tensorflow1": [230, 273], "coupl": [230, 273], "satisfi": [230, 273, 464, 475, 504], "tf1": [230, 273, 480], "although": [230, 273, 524], "tensorflowbertdataload": [230, 273], "tensorflowmodelzoobertdataload": [230, 273], "zoo": [230, 248, 273, 289, 441, 468, 472, 531], "tensorflowdataload": [230, 273, 389], "pytorchbertdataset": [231, 274], "model_typ": [231, 274, 432, 462], "tensordataset": [231, 274, 462], "repo": [231, 274, 435, 437, 462, 468, 491, 493, 495, 496, 532], "easi": [231, 274, 332, 469, 478, 501, 505, 518, 520, 524], "squad": [231, 248, 274, 289, 301, 302, 304, 354, 355, 357, 462, 477, 517, 527, 531], "distilbert": [231, 274, 441, 462, 479, 518, 531], "xlnet": [231, 274, 462, 531], "xlm": [231, 274, 462, 531], "101": [231, 274, 304, 357, 477, 507, 525, 531], "2043": [231, 274], "2001": [231, 274], "onnxrtbertdataset": [231, 274], "data_dir": [231, 274, 462], "model_name_or_path": [231, 274, 462, 478, 486, 487, 502, 509, 512, 513, 522], "max_seq_length": [231, 248, 274, 289, 462, 527], "do_lower_cas": [231, 247, 248, 274, 288, 289, 462, 527], "mrpc": [231, 274, 304, 357, 462, 477, 486, 509, 512, 513, 517, 528, 531], "dynamic_length": [231, 274, 462], "shortcut": [231, 274, 462], "token": [231, 242, 245, 248, 274, 285, 287, 289, 296, 297, 298, 349, 350, 351, 427, 462, 477, 478, 500, 501, 522, 524, 525, 527, 528], "longer": [231, 248, 274, 289, 462, 527], "truncat": [231, 248, 274, 289, 462, 527], "shorter": [231, 248, 274, 289, 462, 527], "lowercas": [231, 274, 462], "choic": [231, 274, 442, 462, 477, 504, 525], "qqp": [231, 274, 462, 477, 531], "qnli": [231, 274, 462, 477, 531], "rte": [231, 274, 462, 477, 531], "st": [231, 274, 462, 477], "cola": [231, 274, 462, 477, 531], "mnli": [231, 274, 462, 477, 531], "wnli": [231, 274, 462, 477], "mobilebert": [231, 274, 462, 465, 531], "roberta": [231, 274, 462, 531], "uncas": [231, 248, 274, 289, 462, 527, 531], "load_and_cache_exampl": [231, 274], "cach": [231, 274, 470, 520, 522], "convert_examples_to_featur": [231, 248, 274, 289], "max_length": [231, 274], "label_list": [231, 274, 304, 357], "output_mod": [231, 274], "pad_token": [231, 274], "pad_token_segment_id": [231, 274], "mask_padding_with_zero": [231, 274], "inputfeatur": [231, 248, 274, 289], "properti": [231, 274, 409, 476], "input_id": [231, 248, 274, 289, 478], "vocabulari": [231, 247, 248, 274, 288, 289, 527], "attention_mask": [231, 274, 478], "usual": [231, 274, 443, 464, 465, 503, 516, 517, 520, 522, 525], "NOT": [231, 274, 471], "token_type_id": [231, 274, 478], "segment": [231, 274, 298, 300, 351, 353, 437], "portion": [231, 274], "regress": [231, 274, 437, 464], "seq_length": [231, 274], "tensorflowbertdataset": [231, 274], "label_fil": [231, 248, 274, 289, 462, 527], "tfrecord": [231, 232, 233, 274, 275, 276, 462], "guid": [231, 274, 438, 441, 462, 465, 475, 481, 489, 498, 532], "parsedecodebert": [231, 274], "tensorflowmodelzoobertdataset": [231, 232, 274, 275], "num_cor": [231, 232, 236, 274, 275, 279, 462], "28": [231, 232, 236, 274, 275, 279, 462, 531], "coco": [232, 239, 243, 275, 282, 300, 304, 353, 357, 477, 517], "parsedecodecoco": [232, 275], "cocorecorddataset": [232, 275], "interleav": [232, 275, 462], "parallel": [232, 275, 385, 390, 462, 478, 505, 508, 528], "cocoraw": [232, 275, 462], "img_dir": [232, 275, 462], "val2017": [232, 275, 462], "anno_dir": [232, 275, 462], "annot": [232, 275, 300, 353, 410, 443, 444, 462, 477, 517, 528], "instances_val2017": [232, 275, 462], "jpg": [232, 236, 238, 275, 279, 281, 441, 462], "imag": [232, 233, 236, 238, 244, 248, 275, 276, 279, 281, 286, 289, 300, 353, 462, 467, 469, 517, 519, 525, 526, 527, 531], "coconpi": [232, 275, 462], "npy_dir": [232, 275, 462], "npy": [232, 275, 462], "tensorflowdataset": [233, 276], "pytorchdataset": [233, 276], "mxnetdataset": [233, 276], "onnxrtqldataset": [233, 276], "onnxrtitdataset": [233, 276], "IT": [233, 240, 276, 283, 518], "pytorchmxnetwrapdataset": [233, 276], "datafunc": [233, 276], "pytorchmxnetwrapfunct": [233, 248, 276, 289], "framework_dataset": [233, 276], "convent": [233, 276, 300, 353, 465], "imageclassifi": [233, 276], "tensorflow_itex": [233, 236, 238, 240, 276, 279, 281, 283, 461, 519], "onnxrt_qdq": [233, 240, 276, 283, 519], "onnxrt_qlinearop": [233, 240, 248, 276, 283, 289, 519], "onnxrt_integerop": [233, 240, 248, 276, 283, 289, 519], "pytorch_ipex": [233, 240, 276, 283, 478, 519, 530], "pytorch_fx": [233, 240, 276, 283, 478, 519], "dataset_registri": [233, 276], "dataset_typ": [233, 276], "dataset_format": [233, 276], "data_format": [233, 244, 276, 286], "raw_imag": [233, 276], "overwrit": [233, 276, 491, 495], "download_url": [233, 276], "filenam": [233, 276, 432, 462, 504], "md5": [233, 276], "address": [233, 276, 436, 479, 500, 503, 506, 518], "gen_bar_updat": [233, 276], "bar": [233, 276, 498, 518], "check_integr": [233, 276], "fpath": [233, 276], "checksum": [233, 276], "calculate_md5": [233, 276], "chunk_siz": [233, 276], "cifar10": [233, 276, 462], "cifar100": [233, 276, 462], "databas": [233, 276, 506], "www": [233, 276, 462, 531], "toronto": [233, 276, 462], "kriz": [233, 276, 462], "cifar": [233, 276, 462, 531], "tar": [233, 276, 462, 464, 493, 496], "gz": [233, 276, 462, 464, 493, 496], "manual": [233, 276, 462, 481, 487, 489, 492, 506, 511, 512, 513, 517], "subset": [233, 236, 276, 279, 462, 503], "internet": [233, 276, 462, 500], "again": [233, 276, 462, 501, 503, 521], "pytorchcifar10": [233, 276], "mxnetcifar10": [233, 276], "tensorflowcifar10": [233, 276], "pytorchcifar100": [233, 276], "mxnetcifar100": [233, 276], "tensorflowcifar100": [233, 276], "mnist": [233, 276, 462, 467], "nation": [233, 276, 436], "institut": [233, 276], "standard": [233, 248, 276, 289, 437, 443, 464, 469, 477, 527, 528], "technologi": [233, 276, 478], "fashionmnist": [233, 276, 462], "npz": [233, 276, 462], "idx1": [233, 276, 462], "ubyt": [233, 276, 462], "idx3": [233, 276, 462], "t10k": [233, 276, 462], "pytorchmnist": [233, 276], "mxnetmnist": [233, 276], "tensorflowmnist": [233, 276], "pytorchfashionmnist": [233, 276], "mxnetfashionmnist": [233, 276], "tensorflowfashionmnist": [233, 276], "imagefold": [233, 276, 462, 467, 478], "expect": [233, 276, 436, 437, 470, 498, 520, 522, 528], "subfold": [233, 276, 501], "belong": [233, 276, 362, 520], "class_1": [233, 276, 462], "xxx": [233, 276, 462, 478], "png": [233, 276, 462], "xxy": [233, 276, 462], "xxz": [233, 276, 462], "class_n": [233, 276, 462], "123": [233, 276, 462, 527], "nsdf3": [233, 276, 462], "asd932_": [233, 276, 462], "categori": [233, 276, 299, 352, 459, 462, 488], "mxnetimagefold": [233, 276], "tensorflowtfrecorddataset": [233, 276], "tensorflowimagerecord": [233, 276], "imagenet": [233, 236, 244, 276, 279, 286, 439, 464, 478, 487, 503, 517, 526, 527, 530, 531], "000": [233, 276, 441, 462], "099": [233, 276, 462], "tensorflowvocrecord": [233, 276], "pascal": [233, 276], "voc": [233, 276, 304, 357], "2012": [233, 276], "00000": [233, 276], "00004": [233, 276], "00001": [233, 276], "00003": [233, 276], "dummydataset": [234, 235, 277, 278], "127": [234, 235, 277, 278, 462, 520, 525, 531], "float32": [234, 235, 248, 277, 278, 289, 300, 353, 427, 442, 459, 462, 478, 520, 522, 525, 527], "stand_norm": [234, 235, 277, 278, 462], "dummy_v2": [235, 278, 462], "sparse_dummy_v2": [235, 278, 462], "label_shap": [235, 278, 462], "sparsedummydataset": [235, 278], "dense_shap": [235, 278, 462], "sparse_ratio": [235, 278, 462], "imagenetraw": [236, 279, 462], "data_path": [236, 279, 462], "image_list": [236, 279, 462], "img1": [236, 279, 462], "img2": [236, 279, 462], "imgx": [236, 279, 462], "val_map": [236, 279, 462], "txt": [236, 279, 462, 464, 475, 500, 502, 503, 505, 506], "pytorchimagenetraw": [236, 279], "mxnetimagenetraw": [236, 279], "tensorflowimagenetraw": [236, 279], "inteltensorflow": [236, 238, 279, 281, 475], "tensorflowimagenetdataset": [236, 279], "onnxrtimagenetdataset": [236, 279], "bert_dataset": [237, 242, 280, 285, 296, 349], "coco_dataset": [237, 242, 280, 285, 296, 349], "dummy_dataset": [237, 242, 280, 285, 296, 349], "dummy_dataset_v2": [237, 242, 280, 285, 296, 349], "imagenet_dataset": [237, 242, 280, 285, 296, 349], "style_transfer_dataset": [237, 242, 280, 285, 296, 349], "styletransferdataset": [238, 281], "content_fold": [238, 281, 462], "style_fold": [238, 281, 462], "crop_ratio": [238, 281, 462], "resize_shap": [238, 281, 462], "256": [238, 244, 281, 286, 462, 467, 478, 527], "image_format": [238, 281, 462], "holder": [238, 281, 462], "labelbalancecocorecordfilt": [239, 282], "balanc": [239, 282, 522, 525], "labelbalancecocorawfilt": [239, 282], "tensorflowfilt": [240, 283], "onnxrtqlfilt": [240, 283], "onnxrtitfilt": [240, 283], "pytorchfilt": [240, 283], "mxnetfilt": [240, 283], "filter_registri": [240, 283], "filter_typ": [240, 283], "__call__": [240, 283], "coco_filt": [241, 242, 284, 285, 296, 349], "imagenet_transform": [242, 245, 285, 287, 296, 349], "parsedecodecocotransform": 243, "quantizedinput": [244, 286, 527], "labelshift": [244, 286, 527], "label_shift": [244, 286, 527], "parsedecodeimagenet": [244, 286, 527], "proto": [244, 248, 286, 289, 527], "parsedecodeimagenettransform": [244, 286], "tensorflowtransposelastchannel": 244, "tensorflowshiftrescal": 244, "rescal": [244, 248, 289, 527], "tensorflowresizecropimagenettransform": [244, 286], "random_crop": [244, 286, 527], "resize_sid": [244, 286, 527], "resize_method": [244, 286], "bilinear": [244, 248, 286, 289, 527], "random_flip_left_right": [244, 286, 527], "mean_valu": [244, 286, 527], "channels_last": [244, 286, 481], "subpixel": [244, 286], "rgb": [244, 286], "seri": [244, 286, 441, 475, 478, 527], "applic": [244, 286, 444, 469, 481, 498, 500, 506, 507, 511, 512, 518, 522, 525, 526, 527, 529], "crop": [244, 248, 286, 289, 462, 527], "flip": [244, 248, 286, 289, 527], "left": [244, 248, 286, 289, 492, 498, 525, 527], "std": [244, 248, 286, 289, 478, 527], "bilinearimagenettransform": [244, 286], "central_fract": [244, 286, 527], "875": [244, 286, 527], "fraction": [244, 286, 527], "onnxbilinearimagenettransform": [244, 286], "onnxresizecropimagenettransform": [244, 286], "std_valu": [244, 286], "229": [244, 286, 478], "225": [244, 286, 478], "resizewithaspectratio": [244, 286], "87": [244, 286, 531], "inter_pol": [244, 286], "cv2": [244, 286], "inter_area": [244, 286], "aspect": [244, 248, 286, 289, 527], "postprocess_cl": [246, 256, 478], "user_postprocess": [246, 256], "convert_to_unicod": [247, 288], "unicod": [247, 288], "assum": [247, 288, 300, 311, 353, 442, 471, 498], "load_vocab": [247, 288], "vocab_fil": [247, 248, 288, 289, 527], "convert_by_vocab": [247, 288], "vocab": [247, 288], "whitespace_token": [247, 288], "whitespac": [247, 288, 302, 355], "clean": [247, 288, 478], "piec": [247, 288, 297, 350, 477, 522], "fulltoken": [247, 288], "tokenzi": [247, 288], "basictoken": [247, 288], "punctuat": [247, 288, 297, 302, 350, 355], "lower": [247, 248, 288, 289, 302, 355, 396, 466, 517, 518, 520, 525, 527, 528], "wordpiecetoken": [247, 288], "unk_token": [247, 288], "unk": [247, 288], "max_input_chars_per_word": [247, 288], "200": [247, 288, 438, 507, 528], "wordpiec": [247, 248, 288, 289, 527], "concat_gener": [248, 289], "inc": [248, 289, 436, 443, 481, 488, 498, 500, 505, 518, 519, 523, 528], "tensorflowtransform": [248, 289], "mxnettransform": [248, 289], "pytorchtransform": [248, 289], "onnxrtqltransform": [248, 289], "onnxrtittransform": [248, 289], "transform_registri": [248, 289], "transform_typ": [248, 289], "basetransform": [248, 289], "tensorflowwrapfunct": [248, 289], "transform_func": [248, 289], "pytorchmxnettransform": [248, 289], "get_torchvision_map": [248, 289], "torchvis": [248, 289, 468, 472, 481, 487, 501], "composetransform": [248, 289], "transform_list": [248, 289, 527], "compos": [248, 289, 424, 527], "croptoboundingbox": [248, 289, 527], "offset_height": [248, 289, 527], "offset_width": [248, 289, 527], "target_height": [248, 289, 527], "target_width": [248, 289, 527], "box": [248, 289, 300, 304, 353, 357, 438, 477, 481, 492, 498, 526, 527, 528], "coordin": [248, 289, 336, 395, 505, 527, 528], "top": [248, 289, 295, 304, 319, 324, 332, 357, 437, 477, 498, 501, 503, 527], "corner": [248, 289, 437, 442, 444, 527], "horizont": [248, 289, 527], "mxnetcroptoboundingbox": [248, 289], "onnxrtcroptoboundingbox": [248, 289], "tensorflowcroptoboundingbox": [248, 289], "resizewithratio": [248, 289, 527], "min_dim": [248, 289, 527], "800": [248, 289, 527], "max_dim": [248, 289, 527], "1365": [248, 289, 527], "constant_valu": [248, 289], "longest": [248, 289, 527], "side": [248, 289, 462, 492, 527], "exce": [248, 289, 522, 527], "tensorflowresizewithratio": [248, 289], "permut": [248, 289, 527], "tensorflowtranspos": [248, 289], "mxnettranspos": [248, 289], "pytorchtranspos": [248, 289], "randomverticalflip": [248, 289, 527], "tensorflowrandomverticalflip": [248, 289], "randomhorizontalflip": [248, 289, 478, 527], "tensorflowrandomhorizontalflip": [248, 289], "toarrai": [248, 289, 527], "pil": [248, 289, 527], "casttftransform": [248, 289], "castonnxtransform": [248, 289], "castpytorchtransform": [248, 289], "centercroptftransform": [248, 289], "center": [248, 289, 440, 441, 475, 527, 528], "paddedcentercroptransform": [248, 289], "crop_pad": [248, 289], "resizetftransform": [248, 289], "bicub": [248, 289, 527], "resizepytorchtransform": [248, 289], "randomcroptftransform": [248, 289], "randomresizedcroppytorchtransform": [248, 289], "08": [248, 289, 527, 531], "randomresizedcropmxnettransform": [248, 289], "randomresizedcroptftransform": [248, 289], "normalizetftransform": [248, 289], "deviat": [248, 289, 464, 527], "broadcast": [248, 289, 467, 527], "rescalekeraspretraintransform": [248, 289], "rescaletftransform": [248, 289], "rescaletransform": [248, 289], "alignimagechanneltransform": [248, 289], "dim": [248, 289, 522, 525, 527], "align": [248, 289, 436, 522, 527], "must": [248, 289, 300, 353, 437, 438, 443, 459, 461, 475, 520, 527], "pytorchalignimagechannel": [248, 289], "tondarraytransform": [248, 289], "resizemxnettransform": [248, 289], "resizetransform": [248, 289], "cropresizetftransform": [248, 289], "boundari": [248, 289, 527], "area": [248, 289, 300, 353, 477, 527], "pytorchcropresizetransform": [248, 289], "mxnetcropresizetransform": [248, 289], "cropresizetransform": [248, 289], "centercroptransform": [248, 289], "mxnetnormalizetransform": [248, 289], "pytorchnormalizetransform": [248, 289], "normalizetransform": [248, 289], "randomcroptransform": [248, 289], "randomresizedcroptransform": [248, 289], "get_final_text": [248, 289], "pred_text": [248, 289], "orig_text": [248, 289], "project": [248, 289, 435, 436, 437, 504, 518, 524, 528, 532], "squadexampl": [248, 289], "qas_id": [248, 289], "question_text": [248, 289], "doc_token": [248, 289], "orig_answer_text": [248, 289], "start_posit": [248, 289], "end_posit": [248, 289], "is_imposs": [248, 289], "simpl": [248, 289, 475, 478, 517, 524, 525, 528], "answer": [248, 289, 301, 302, 354, 355, 436, 503, 517, 527, 531], "posit": [248, 289, 419, 436, 477, 481, 506, 511, 512, 513], "unique_id": [248, 289], "example_index": [248, 289], "doc_span_index": [248, 289], "token_to_orig_map": [248, 289], "token_is_max_context": [248, 289], "input_mask": [248, 289, 478], "segment_id": [248, 289, 478], "read_squad_exampl": [248, 289], "input_fil": [248, 289], "doc_strid": [248, 289, 527], "max_query_length": [248, 289, 527], "output_fn": [248, 289], "inputbatch": [248, 289], "collecttransform": [248, 289], "10833": [248, 289], "tfsquadv1posttransform": [248, 289], "n_best_siz": [248, 289, 527], "384": [248, 289, 527], "64": [248, 289, 439, 522, 525, 527, 531], "max_answer_length": [248, 289, 527], "30": [248, 289, 468, 472, 474, 527, 531], "nbest_predict": [248, 289, 527], "question": [248, 289, 301, 302, 354, 355, 436, 437, 441, 442, 475, 481, 505, 517, 525, 527, 531], "anoth": [248, 289, 297, 306, 350, 432, 464, 465, 491, 495, 527, 528], "long": [248, 289, 470, 522, 527], "document": [248, 289, 410, 443, 444, 449, 467, 479, 483, 493, 496, 497, 504, 505, 507, 517, 523, 527, 529], "chunk": [248, 289, 527], "tfmodelzoocollecttransform": [248, 289], "tfsquadv1modelzooposttransform": [248, 289], "squadv1": [248, 289, 527], "parsedecodevoctransform": [248, 289], "conf_fname_or_obj": [249, 258, 290, 295, 305, 306, 307, 308, 310, 319, 324, 332], "unnecessari": [249, 478], "setter": 251, "calib_dataload": [251, 333, 391, 438, 441, 461, 462, 464, 472, 473, 477, 478, 500, 501, 520, 521, 522], "reason": [251, 436, 443, 461, 503, 522, 526, 528], "know": [251, 467, 523], "metric_cl": [253, 357, 391, 478], "user_metr": [253, 357, 391], "alwai": [253, 300, 353, 357, 391, 464, 477, 478, 503, 522], "recommend": [253, 357, 442, 462, 471, 489, 492, 497, 499, 517, 519, 528], "set_backend": 254, "tensorflowimagefold": 276, "qlinear2qdq": [291, 296, 349], "qlinearop": [292, 464, 474, 489, 520, 531], "check_model": 292, "onnx_qlinear_to_qdq": 292, "input_name_to_nod": 292, "tf_to_fp32_onnx": 293, "tf_to_int8_onnx": 293, "int8_model": [293, 294, 442], "get_node_map": 294, "fp32_onnx_path": 294, "module_node_map": 294, "get_quantizable_onnx_op": 294, "quantize_nod": 294, "dynamic_quant_export": 294, "pt_fp32_model": 294, "pt_int8_model": 294, "weight_typ": 294, "s8": 294, "static_quant_export": 294, "_quantiz": 294, "torch_to_fp32_onnx": 294, "do_constant_fold": 294, "verbos": [294, 336, 395], "torch_to_int8_onnx": 294, "achiev": [295, 332, 469, 478, 501, 516, 517, 518, 520, 525, 526, 528], "across": [295, 305, 332, 358, 463, 478, 505, 508, 517, 522, 525, 528], "variou": [295, 305, 332, 358, 444, 474, 481, 508, 517, 519, 522], "dl": [295, 305, 319, 324, 332, 358, 464, 473, 485, 498, 518, 531], "bring": [295, 332, 492, 505, 525], "unifi": [295, 332, 442, 443, 444, 461, 473, 474, 477, 478, 480], "vari": [295, 319, 324, 332, 503, 517, 525, 531], "roc": [295, 304, 319, 324, 332, 357], "flexibl": [295, 319, 324, 332, 441, 465, 505, 517, 522], "via": [295, 319, 324, 332, 436, 441, 467, 474, 478, 481, 498, 517, 518], "popular": [296, 349, 434, 441, 442, 443, 460, 465, 468, 469, 472, 478, 517, 520, 522, 528, 529], "techniqu": [296, 349, 434, 441, 474, 478, 481, 500, 516, 517, 518, 519, 520, 529, 530, 531], "bleu": [296, 298, 303, 349, 351, 356, 477, 517], "bleu_util": [296, 303, 349, 356], "coco_label_map": [296, 303, 349, 356], "coco_tool": [296, 303, 349, 356], "evaluate_squad": [296, 303, 349, 356], "f1": [296, 301, 303, 304, 349, 354, 356, 357, 467, 477, 478, 501, 524, 531], "basic_na": [296, 309, 349], "nas_util": [296, 309, 349], "pruner_legaci": [296, 349], "gradient_sensit": [296, 315, 349], "group_lasso": [296, 315, 349], "pruning_recip": [296, 349], "tile_pattern": [296, 320, 321], "prune_util": [296, 325, 349], "tuning_sampl": [296, 338, 344, 349, 399, 405], "tuning_spac": [296, 338, 344, 345, 347, 349, 399, 405, 406, 408], "tuning_struct": [296, 338, 344, 345, 346, 349, 399, 405, 406, 407], "auto_mixed_precis": [296, 338, 349, 399], "graph_optim": [296, 349], "mixed_precis": [296, 349, 358, 478], "model_convers": [296, 349], "pruning_v2": [296, 349], "unicoderegex": [297, 350], "hoc": [297, 350], "hack": [297, 350], "recogn": [297, 350, 528], "nondigit_punct_r": [297, 350], "compil": [297, 350, 478], "express": [297, 350, 436], "preced": [297, 350, 525, 528], "digit": [297, 350, 432, 518], "punct_nondigit_r": [297, 350], "symbol_r": [297, 350], "bleu_token": [297, 350], "mose": [297, 350], "smt": [297, 350], "mosesdecod": [297, 350], "mteval": [297, 350], "v14": [297, 350], "pl": [297, 350], "l954": [297, 350], "l983": [297, 350], "bilingu": [297, 350], "understudi": [297, 350], "qualiti": [297, 350], "machin": [297, 350, 469, 475, 484, 498, 500, 506, 518, 525, 526], "translat": [297, 298, 350, 351, 517, 528], "natur": [297, 350, 469], "approxim": [297, 298, 350, 351, 443, 477, 522], "glue": [297, 304, 350, 357, 462, 477, 478, 487], "word": [297, 350, 477, 517, 522, 531], "ngram": [297, 350, 477], "breviti": [297, 298, 350, 351, 477], "penalti": [297, 298, 350, 351, 477], "doe": [297, 350, 409, 461, 462, 477, 478, 522, 523, 527], "beam": [297, 350, 477], "tensor2tensor": [298, 351], "bleu_hook": [298, 351], "compute_bleu": [298, 351], "reference_corpu": [298, 351], "translation_corpu": [298, 351], "max_ord": [298, 351], "use_bp": [298, 351], "against": [298, 351], "gram": [298, 351], "bleu_scor": [298, 351], "third": [300, 353, 437, 476], "parti": [300, 353, 437, 476, 520], "pycocotool": [300, 353, 470, 475], "noth": [300, 353, 528], "thu": [300, 353, 478, 517, 520], "cannot": [300, 353, 438, 470, 522, 526], "jonathanhuang": [300, 353], "image_id": [300, 353, 477], "invok": [300, 353, 443], "groundtruth_dict": [300, 353], "exportgroundtruthtococo": [300, 353], "groundtruth_boxes_list": [300, 353], "groundtruth_classes_list": [300, 353], "max_num_class": [300, 353], "output_path": [300, 353], "detections_list": [300, 353], "exportdetectionstococo": [300, 353], "detection_boxes_list": [300, 353], "detection_scores_list": [300, 353], "detection_classes_list": [300, 353], "cocowrapp": [300, 353], "loadannot": [300, 353], "cocoevalwrapp": [300, 353], "agnostic_mod": [300, 353], "computemetr": [300, 353], "detection_typ": [300, 353], "bbox": [300, 353, 438, 477], "hold": [300, 336, 353, 395, 462], "iou_typ": [300, 353], "iou_thr": [300, 304, 353, 357, 477], "map_point": [300, 304, 353, 357, 477], "cocoev": [300, 353], "mscoco": [300, 353], "Then": [300, 353, 443, 464, 491, 493, 495, 496, 503, 525, 528], "exportsingleimagegroundtruthtococo": [300, 353], "next_annotation_id": [300, 353], "category_id_set": [300, 353], "groundtruth_box": [300, 353], "groundtruth_class": [300, 353], "groundtruth_mask": [300, 353], "groundtruth_is_crowd": [300, 353], "ingest": [300, 353], "here": [300, 353, 410, 443, 462, 467, 468, 469, 471, 472, 477, 486, 493, 496, 498, 501, 504, 506, 520, 523, 524, 525, 531], "exportsingleimagedetectionstococo": [300, 353], "uniqu": [300, 333, 353, 520], "assign": [300, 353, 432, 467, 519, 528], "num_gt_box": [300, 353], "num_detect": [300, 304, 353, 357, 477, 478, 530], "image_height": [300, 353], "image_width": [300, 353], "detection_mask": [300, 353], "crowd": [300, 353], "insid": [300, 353, 465, 466, 499, 517, 522, 528], "exportsingleimagedetectionboxestococo": [300, 353], "detection_box": [300, 353, 478, 530], "detection_scor": [300, 353, 478, 530], "detection_class": [300, 353, 478, 530], "exporsingleimagedetectionboxestococo": [300, 353], "exportsingleimagedetectionmaskstococo": [300, 353], "allenai": [301, 302, 354, 355], "bi": [301, 302, 354, 355], "att": [301, 302, 354, 355], "flow": [301, 302, 354, 355, 438, 439, 478], "f1_score": [301, 302, 354, 355], "ground_truth": [301, 302, 354, 355], "ground": [301, 302, 354, 355], "truth": [301, 302, 354, 355], "metric_max_over_ground_truth": [301, 302, 354, 355], "metric_fn": [301, 302, 354, 355], "exact_match_scor": [301, 354], "exact": [301, 354], "articl": [301, 302, 354, 355], "paragraph": [301, 302, 354, 355], "qa": [301, 302, 354, 355, 441], "normalize_answ": [302, 355], "newlin": [302, 355, 432], "tab": [302, 355, 498, 526], "harmon": [302, 304, 355, 357], "recal": [302, 304, 355, 357], "answer_start": [302, 355], "177": [302, 355, 531], "denver": [302, 355], "bronco": [302, 355], "nfl": [302, 355], "team": [302, 355, 436, 521], "afc": [302, 355], "super": [302, 355, 439], "bowl": [302, 355], "50": [302, 355, 439, 443, 503, 517, 525, 531], "56be4db0acb8001400a502ec": [302, 355], "form": [302, 355, 464, 465, 498], "percentag": [302, 355, 460, 522, 530], "tensorflowmetr": [304, 357], "maintain": [304, 357, 436, 437, 480, 481, 493, 496, 500, 505, 506, 517, 522, 523], "pytorchmetr": [304, 357], "mxnetmetr": [304, 357], "onnxrtqlmetr": [304, 357], "onnxrtitmetr": [304, 357], "metric_registri": [304, 357], "metric_typ": [304, 357], "decorator_metr": [304, 357], "basemetr": [304, 357, 391], "single_output": [304, 357], "hvd": [304, 357, 467], "wrappytorchmetr": [304, 357], "wrapmxnetmetr": [304, 357], "wraponnxrtmetr": [304, 357], "proport": [304, 357], "pred_list": [304, 357], "pytorchloss": [304, 357], "mae": [304, 357, 477], "compare_label": [304, 357, 391, 477], "rmse": [304, 357, 477, 528], "squar": [304, 339, 357, 400, 464, 477, 503, 528], "tensorflowtopk": [304, 357], "k": [304, 357, 391, 477, 500, 517], "among": [304, 357, 492, 525], "outcom": [304, 357], "num_correct": [304, 357], "num_sampl": [304, 357], "generaltopk": [304, 357], "cocomapv2": [304, 357, 477], "anno_path": [304, 357, 477], "map_kei": [304, 357], "detectionboxes_precis": [304, 357], "output_index_map": [304, 357, 477], "tensorflowmap": [304, 357], "tensorflowcocomap": [304, 357], "tensorflowvocmap": [304, 357], "squadf1": [304, 357, 477], "miou": [304, 357], "num_class": [304, 357], "21": [304, 357, 486, 487, 509, 512, 513, 518, 525, 531], "iou": [304, 357], "intersect": [304, 357, 442, 477], "union": [304, 357, 421, 477, 509], "onnxrtglu": [304, 357], "dlrm": [304, 357], "modelconvers": 306, "typic": [306, 333, 439, 441, 466, 468, 472, 503, 517, 531], "basicna": 307, "model_build": [307, 310], "conf_fnam": 307, "nasbas": [310, 439], "nas_registri": 311, "nas_method": 311, "create_search_space_pool": 311, "idx": [311, 462], "enumer": [311, 417, 421, 442, 465, 466, 467, 478, 516, 517, 526], "find_pareto_front": 311, "pareto": [311, 439], "front": [311, 439], "n_point": 311, "n_metric": 311, "n_pareto_point": 311, "gradientsensitivityprun": 313, "pytorchmodel": [313, 314, 316, 317, 318, 367], "overwritten": [313, 314, 316, 317, 318, 486], "grouplassoprun": 314, "legaci": 315, "basicmagnitudeprun": 316, "patternlockprun": [317, 329], "pruner_registri": 318, "clase": 318, "pruningconf": [319, 324], "tfpruningcallback": [319, 324], "input_model": [319, 324, 480, 501, 502, 503, 526], "pure": [319, 324, 517], "pattern_registri": 322, "pattern_typ": 322, "patternbas": 322, "mask_shap": [322, 323], "is_contigu": 322, "tile": 323, "tilepatternbas": 323, "tilepattern_1x1": 323, "1x1": [323, 465, 478, 517], "tilepattern_2x2": 323, "2x2": [323, 525], "tilepattern_1x16": 323, "1x16": 323, "tilepattern_4x1": 323, "tilepattern_1x2": 323, "1x2": [323, 525], "patternnxm": 327, "patternninm": 327, "reset_non_value_to_default": 328, "parse_not_to_prun": 328, "update_frequency_on_step": [329, 519], "max_sparsity_ratio_per_lay": [329, 519], "magnitudeprun": 329, "snipprun": 329, "snipmomentumprun": 329, "moreoev": 329, "quantconf": 332, "separ": [333, 436, 473, 476, 506, 508, 516, 519], "opt_model": [333, 478], "fulli": [333, 478, 506, 520, 525], "train_func": [333, 421, 467, 478, 520], "automixedprecisiontunestrategi": [334, 393], "basictunestrategi": [335, 394], "stage": [335, 340, 392, 394, 401, 465, 517, 526, 528], "polici": [335, 339, 392, 394, 400, 436, 441, 530, 532], "bayesiantunestrategi": [336, 395], "acq_max": [336, 395], "ac": [336, 395], "gp": [336, 395], "y_max": [336, 395], "n_warmup": [336, 395], "10000": [336, 395, 517], "n_iter": [336, 395], "acquisit": [336, 395], "gaussian": [336, 395, 528], "relev": [336, 395, 443, 444, 503, 517], "acq": [336, 395], "randomst": [336, 395], "scipi": [336, 395], "x_max": [336, 395], "targetspac": [336, 395], "pbound": [336, 395], "9527": [336, 395, 478, 530], "bayesianoptim": [336, 395], "exhaustivetunestrategi": [337, 397], "msetunestrategi": [339, 400], "mse_v2tunestrategi": [340, 401], "revert": [340, 348, 401, 409, 528], "randomtunestrategi": [341, 402], "strategy_registri": [342, 403, 528], "tunestrategi": [342, 403, 528], "tuningsamplerregistri": 345, "tuningsampl": [345, 406], "tuningord": [345, 406], "Not": [345, 346, 406, 407, 432, 439], "tuningspac": [345, 346, 406, 407], "tuning_order_lst": [345, 406], "initial_op_tuning_cfg": [345, 406], "modelwisetuningsampl": [345, 406], "tuning_items_prior": [345, 406], "op_dtype_dict": [345, 406], "optuningconfig": [345, 346, 347, 406, 407, 408], "optypewisetuningsampl": [345, 406], "opwisetuningsampl": [345, 406], "fallbacktuningsampl": [345, 406], "op_dtyp": [345, 406], "accumul": [345, 406, 528], "skip_first": [345, 406], "smoothquantsampl": [345, 406], "tuningitem": [346, 407], "item_typ": [346, 407], "pattern_to_intern": [346, 407], "default_dtyp": [346, 407], "pattern_to_path": [346, 407], "quant_mode_from_pattern": [346, 407], "internal_pattern": [346, 407], "initial_tuning_cfg_with_quant_mod": [346, 407], "op_name_typ": [346, 407], "step1": [346, 407], "step2": [346, 407], "complet": [346, 407, 442, 443, 517, 520, 528, 530, 531], "step3": [346, 407], "step4": [346, 407], "step5": [346, 407], "op_quant_mod": [347, 408], "ordereddefaultdict": [348, 409], "extract_data_typ": [348, 409], "sign": [348, 409, 437, 441, 444, 460, 500, 518, 520, 522, 524], "reverted_data_typ": [348, 409], "signed_flag": [348, 409], "get_adaptor_nam": [348, 409], "experiment": [349, 439, 462, 466, 467, 469, 478, 517, 519, 520, 523, 527], "base_model": [349, 360], "keras_model": [349, 360], "mxnet_model": [349, 360], "nets_factori": [349, 360], "onnx_model": [349, 360, 384, 501], "tensorflow_model": [349, 360, 389, 503], "torch_model": [349, 360], "collect_layer_histogram": [349, 425], "create_obj_from_config": [349, 425], "kl_diverg": [349, 425], "load_huggingfac": [349, 425, 478], "neural_insights_util": [349, 425], "weights_detail": [349, 425], "sub_class": [357, 391], "register_customer_metr": 357, "topk": [357, 391, 467, 477, 478, 500, 520], "frozen": [358, 366, 391, 480], "savedmodel": [358, 366, 391, 531], "onnx_ml_pb2": [358, 480], "hybirdblock": [358, 391], "basemodel": 359, "plai": [359, 518, 522, 525], "role": [359, 522, 525], "kerasmodel": 361, "get_model_fwk_nam": 362, "fwk": 362, "mxnetmodel": 363, "net": 364, "tfslimnetsfactori": 364, "get_model_typ": 366, "validate_graph_nod": 366, "validate_and_inference_input_output": 366, "graph_sess": 366, "graph_def_sess": 366, "frozen_pb_sess": 366, "load_saved_model": 366, "saved_model_tag": 366, "signatur": 366, "metagraphdef": 366, "keras_sess": 366, "slim_sess": 366, "checkpoint_sess": 366, "estimator_sess": 366, "saved_model_sess": 366, "tensorflowbasemodel": [366, 389], "tensorflowsavedmodelmodel": 366, "tensorflowllmmodel": 366, "exceed": 366, "2gb": 366, "tensorflowqatmodel": 366, "tensorflowcheckpointmodel": 366, "tensorflowmodel": 366, "pytorchbasemodel": 367, "pytorchfxmodel": 367, "ipexmodel": 367, "driven": [368, 441, 478, 498, 515, 526], "objective_registri": 368, "objective_custom_registri": 368, "obj_cl": 368, "eural_compressor": 368, "objective_cl": 368, "user_object": 368, "__class__": 368, "__name__": 368, "objective_cfg": 368, "usr_cfg": 368, "user_obj_cfg": 368, "easili": [368, 442, 482, 486, 498, 515, 525], "peak": [368, 515], "multiobject": 368, "metric_criterion": 368, "metric_weight": 368, "obj_criterion": 368, "obj_weight": 368, "is_measur": 368, "parserfactori": 370, "onnxrtparserfactori": 372, "onnxprofilingpars": 374, "respons": [374, 375, 379, 511, 512, 513, 520], "profilingpars": 375, "profilingresult": 376, "total_execution_tim": 376, "accelerator_execution_tim": 376, "cpu_execution_tim": 376, "op_run": 376, "op_defin": 376, "tensorflowparserfactori": 377, "tensorflowprofilingpars": 379, "profilerfactori": [380, 382, 387], "create_onnx_config": 385, "ort": 385, "sessionopt": 385, "delete_assign": 390, "create_tf_config": 390, "tf_modul": 390, "configproto": 390, "set_eager_execut": 390, "entir": [391, 421, 438, 443, 444, 460, 505, 517, 525], "autotunestrategi": 392, "conservativetunestrategi": 396, "o0": [396, 528], "who": [396, 436], "hawq_v2tunestrategi": 398, "made": [398, 442, 520, 523, 528], "impact": [398, 517, 523, 528], "tunestrategymeta": 403, "metaclass": 403, "lowerbitssampl": 406, "blockfallbacktuningsampl": 406, "op_block_lst": 406, "target_dtyp": 406, "alpha_list": 406, "weightonlyquantsampl": 406, "quantopt": 409, "quant_typ": 409, "quant_opt": 409, "preprocess_user_cfg": 409, "op_user_cfg": 409, "op_user_cfg_modifi": 409, "build_slave_faker_model": 409, "slave": [409, 528], "virtual": [409, 518], "classregist": 409, "fun": 410, "attribute1": 410, "module_debug_level1": 410, "function1": 410, "param1": 410, "param2": 410, "parameter1": 410, "parameter2": 410, "function2": 410, "pep": 410, "484": [410, 531], "output_model": [410, 478, 501, 503, 526], "function3": 410, "section": [410, 444, 464, 465, 466, 498, 501, 504, 517, 519, 522, 530], "restructuredtext": 410, "liter": 410, "generator1": 410, "example_gener": 410, "exampleclass": 410, "param3": 410, "public": [410, 436, 493, 496], "attr1": 410, "attr2": 410, "attr5": 410, "api_doc_exampl": 411, "dataloader_len": [412, 417], "apply_gptq_quant": 412, "configs_map": [412, 415], "rtn_quantize_entri": 415, "rtnweightquantconfig": [415, 417, 420], "weight_dtyp": 417, "weight_bit": [417, 443], "weight_group_s": 417, "weight_sym": 417, "act_dtyp": 417, "get_default_rtn_config": 417, "gptqconfig": 417, "act_ord": 417, "get_default_gptq_config": 417, "dummyconfig": 417, "dummy_attr": 417, "get_default_dummy_config": 417, "quant_config": [419, 420], "base_config": 419, "run_fn": 419, "run_arg": 419, "register_algo": 420, "algos_map": 420, "example_algo": 420, "loop": [421, 438, 439, 443, 444, 471, 508, 524, 528], "compressionmanag": 421, "deal": 421, "pruningconfig": 421, "orchestr": [421, 441, 474, 529], "on_train_begin": [421, 438, 465, 466, 478, 516, 517, 520], "train_loop": [421, 478, 516], "on_epoch_begin": [421, 424, 465, 466, 478, 516], "on_step_begin": [421, 424, 465, 466, 478, 516, 517], "on_after_compute_loss": [421, 465, 466, 478, 516], "backward": [421, 465, 466, 467, 478, 516, 517, 520, 523], "on_before_optimizer_step": [421, 465, 466, 478, 516, 517], "on_step_end": [421, 424, 465, 466, 478, 516], "on_epoch_end": [421, 424, 465, 466, 478, 516], "on_train_end": [421, 465, 466, 478, 516, 517, 520], "path_to_sav": 421, "manag": [421, 424, 478, 481, 482, 492], "top1": [421, 477, 500, 517, 520, 531], "callbacks_list": 421, "layerhistogramcollector": 422, "layer_tensor": 422, "include_lay": 422, "get_func_from_config": 424, "func_dict": 424, "get_preprocess": 424, "get_metr": 424, "get_postprocess": 424, "get_algorithm": 424, "create_dataset": 424, "cfg_preprocess": 424, "cfg_filter": 424, "create_dataload": 424, "dataloader_cfg": 424, "create_eval_func": 424, "postprocess_cfg": 424, "fp32_baselin": [424, 442], "baselin": [424, 524, 526], "create_train_func": 424, "train_cfg": 424, "Their": 424, "auxiliari": 425, "optimizedmodel": 427, "from_pretrain": [427, 478], "save_for_huggingface_upstream": [427, 478], "export_compressed_model": [427, 522], "saved_dir": [427, 522], "use_hf_format": 427, "compression_dtyp": 427, "compression_dim": 427, "scale_dtyp": 427, "comoress": 427, "register_neural_insights_workload": 429, "workload_loc": [429, 432], "workload_mod": 429, "workload_nam": 429, "uuid": 429, "update_neural_insights_workload": 429, "workload_uuid": 429, "update_neural_insights_workload_accuracy_data": 429, "baseline_accuraci": 429, "optimized_accuraci": 429, "get_model_path": 429, "is_int8_model": 431, "load_weight_onli": 431, "checkpoint_dir": 431, "history_cfg": 431, "best_configur": 431, "best_model_weight": 431, "snapshot": [431, 502], "recover_model_from_json": 431, "json_file_path": 431, "cfg_from_fil": 432, "yaml_fil": [432, 462, 467], "lazyimport": 432, "lazi": 432, "till": [432, 528], "time_limit": 432, "get_siz": 432, "seen": [432, 442], "recurs": 432, "compute_spars": 432, "fault_tolerant_fil": 432, "equal_dict": 432, "d2": 432, "compare_kei": 432, "ignore_kei": 432, "cpuinfo": 432, "dump_elapsed_tim": [432, 442], "customized_msg": 432, "elaps": 432, "combine_histogram": 432, "old_hist": 432, "old": [432, 478, 523], "get_tensor_histogram": 432, "get_all_fp32_data": 432, "get_tuning_histori": 432, "tuning_history_path": 432, "offlin": [432, 436, 478, 520, 525], "str2arrai": 432, "dequantize_weight": 432, "weight_tensor": 432, "min_filter_tensor": 432, "max_filter_tensor": 432, "scale_info": 432, "captureoutputtofil": 432, "tmp_file_path": 432, "stream": [432, 531], "sy": [432, 484], "stderr": 432, "captur": 432, "statist": [432, 433], "header": [432, 470], "field_nam": 432, "output_handl": 432, "printer": 432, "global_st": 432, "load_data_from_pkl": 432, "pkl": [432, 502], "dump_data_to_loc": 432, "show_memory_info": 432, "hint": 432, "dump_class_attr": 432, "compare_object": 432, "obj1": 432, "obj2": 432, "ignore_attr": 432, "comparison": [432, 522, 523, 526], "alias_param": 432, "param_nam": 432, "param_alia": 432, "alias": 432, "print_tabl": 432, "column_map": 432, "table_entri": 432, "titl": [432, 476, 499, 528], "insert_newlin": 432, "prettyt": 432, "column": [432, 522, 525], "handler": [432, 528], "row": [432, 464, 501, 525], "decim": 432, "get_tensors_info": 432, "get_weights_detail": 432, "weightdetail": 432, "dump_tabl": 432, "file_typ": 432, "csv": [432, 439, 501, 502], "dump_table_to_csv": 432, "get_number_of_socket": 432, "platform": [432, 441, 474, 481, 489, 508, 518, 520], "opentri": 432, "activation_min": 432, "activation_max": 432, "print_op_list": 432, "get_op_list": 432, "minmax_file_path": 432, "input_model_tensor": 432, "optimized_model_tensor": 432, "activation_min_max": 432, "calculate_ms": 432, "mse_metric_gap": 432, "fp32_tensor": 432, "dequantize_tensor": 432, "euclidean": [432, 465], "distanc": [432, 465], "check_key_exist": 432, "weightsdetail": 433, "input_tensor_data": 433, "optimized_tensor_data": 433, "weightsstatist": 433, "welcom": [435, 436, 437, 441, 500, 507, 532], "interest": [436, 441, 500, 526], "foster": 436, "particip": [436, 508], "commun": [436, 500], "harass": 436, "experi": [436, 481, 503, 524, 525, 528], "everyon": 436, "regardless": 436, "ag": 436, "bodi": 436, "ethnic": 436, "characterist": 436, "gender": 436, "educ": 436, "socio": 436, "econom": 436, "race": 436, "religion": 436, "sexual": 436, "orient": 436, "contribut": [436, 441, 517], "inclus": 436, "Being": 436, "respect": [436, 471, 517, 525, 530], "viewpoint": 436, "gracefulli": 436, "focus": [436, 442], "empathi": 436, "toward": [436, 465], "member": [436, 442], "unaccept": 436, "imageri": 436, "unwelcom": 436, "troll": 436, "insult": 436, "derogatori": 436, "polit": 436, "attack": 436, "privat": 436, "publish": [436, 476, 479, 499, 525], "electron": 436, "explicit": 436, "permiss": 436, "inappropri": 436, "profession": 436, "clarifi": 436, "appropri": [436, 460, 525], "fair": 436, "action": [436, 493, 496], "edit": 436, "reject": 436, "commit": [436, 437], "wiki": 436, "issu": [436, 437, 440, 441, 475, 501, 503, 520, 526], "ban": 436, "temporarili": 436, "deem": 436, "threaten": 436, "offens": 436, "harm": 436, "mail": 436, "social": [436, 518], "media": [436, 518], "account": [436, 524, 528], "appoint": 436, "onlin": [436, 524], "event": [436, 526], "abus": 436, "report": [436, 437, 441, 508, 524], "contact": [436, 523, 524], "complaint": 436, "review": [436, 437, 441, 518], "investig": [436, 503], "circumst": [436, 519], "oblig": [436, 504], "confidenti": [436, 500], "regard": [436, 521], "incid": 436, "good": [436, 520, 528], "faith": 436, "repercuss": 436, "leadership": 436, "faq": [436, 441], "page": [436, 437, 500, 503, 504], "send": [437, 443], "view": [437, 441, 468, 489, 498, 504, 523], "star": 437, "repositori": [437, 493, 496], "button": [437, 474, 492, 498], "fork": [437, 493, 496], "clone": [437, 464, 475, 491, 495, 500, 502, 503, 505, 506], "pc": 437, "git": [437, 464, 470, 475, 500, 502, 503, 505, 506], "modif": [437, 442, 471, 486, 505], "checkout": 437, "my": 437, "push": [437, 517, 522, 525], "cover": [437, 469, 473, 518], "would": [437, 478, 502, 517, 520, 525], "adopt": [437, 481, 517, 518, 525], "certif": [437, 500], "agre": 437, "pr": [437, 461, 477, 493, 496, 523], "At": [437, 443, 504, 508, 528], "approv": 437, "solv": [437, 520, 523], "licens": 437, "azur": [437, 441, 518], "devop": 437, "ci": 437, "cloud": [437, 441, 508, 518], "deploi": [437, 465, 478, 504, 508, 522, 528], "e16": 437, "v5": 437, "scan": [437, 441], "pylint": 437, "bandit": 437, "copyright": [437, 476], "docstyl": 437, "spellcheck": 437, "dco": 437, "pytest": 437, "No": [437, 470, 478, 506, 507, 518], "failur": [437, 438], "fault": 437, "coverag": 437, "runtim": [437, 441, 442, 443, 445, 461, 464, 468, 471, 474, 479, 483, 488, 489, 519, 522, 523, 528], "submit": [437, 505, 508, 518], "bug": [437, 441], "intend": 437, "safe": 437, "collabor": [437, 441, 483, 489], "adher": 437, "toolkit": [438, 475, 481, 489, 518, 529], "tracer": 438, "resolv": [438, 440], "floatfunct": 438, "cat": [438, 469, 484, 511, 512, 513], "done": [438, 465, 466, 482, 498, 507, 511, 512, 517, 520], "10004": [438, 439, 442, 461, 465, 466, 467, 471, 474, 479, 516, 519, 522, 530], "neural_compressor": [438, 439, 441, 444, 459, 461, 462, 464, 465, 466, 467, 469, 472, 473, 477, 478, 479, 480, 500, 501, 515, 516, 517, 519, 520, 521, 522, 523, 524, 525, 527, 528, 530], "eval": [438, 461, 464, 481, 520, 526], "conduct": [438, 478, 486, 498, 528, 529], "imper": 438, "therefor": [438, 478, 501, 503, 517, 520, 522, 523, 525], "lot": [438, 503, 525], "As": [438, 443, 461, 465, 477, 478, 492, 503, 517, 522, 528], "successfulli": [438, 467, 507, 511, 512, 513, 518], "suggest": [438, 524], "traceabl": 438, "proxi": 438, "tutori": [438, 489, 518, 529], "prototyp": 438, "html": [438, 441, 443, 460, 467, 474, 493, 496, 499, 501, 507, 511, 520], "highlight": 438, "untrac": 438, "ssd": [438, 469, 531], "resnet34": [438, 531], "r34": 438, "bboxes_labels_scor": 438, "prob": 438, "45": [438, 531], "max_output": 438, "zip": [438, 507, 511, 512], "dbox": 438, "dlabel": 438, "dscore": 438, "decode_singl": 438, "autom": [439, 481, 498, 499, 518, 525], "artifici": 439, "ann": 439, "par": [439, 508], "outperform": 439, "hand": 439, "propos": [439, 442, 465, 479, 522, 525], "potenti": [439, 464, 523], "lie": [439, 460], "predictor": 439, "shown": [439, 461, 464, 465, 477, 478, 492, 501, 503, 515, 516, 517, 522, 525, 528], "figur": [439, 491, 492, 495, 522], "popul": 439, "inner": 439, "evolutionari": 439, "cycl": 439, "until": [439, 443, 528], "conclud": 439, "met": [439, 471, 520, 526], "yet": [439, 493, 496, 499, 506], "simplest": [439, 460, 484], "launcher": [439, 441, 465, 466, 489, 529], "agent": 439, "nsga2": 439, "supernet": 439, "ofa_mbv3_d234_e346_k357_w1": 439, "acc": [439, 508, 517, 526, 531], "mac": [439, 499], "num_ev": 439, "250": [439, 517], "results_csv_path": 439, "search_result": 439, "dataset_path": 439, "ilsvrc2012": 439, "aim": [439, 441, 481, 517, 525, 528, 529], "mobilenetv3": 439, "lt": [439, 462, 531], "wmt": 439, "en": 439, "de": 439, "guidelin": [440, 441], "mainstream": [441, 529], "learn": [441, 442, 443, 461, 462, 469, 473, 474, 475, 478, 479, 481, 483, 486, 487, 489, 492, 493, 496, 498, 517, 518, 520, 525, 526, 528, 529], "workflow": [441, 443, 444, 464, 465, 469, 475, 479, 493, 496, 500, 526, 529], "particular": [441, 517, 522], "wide": [441, 468, 479, 517, 520, 531], "hardwar": [441, 442, 465, 474, 478, 498, 517, 518, 519], "xeon": [441, 475, 476, 479, 518, 520, 521, 531], "scalabl": [441, 475, 479, 518, 520, 521], "processor": [441, 479, 506, 518, 520, 521], "flex": [441, 475], "amd": [441, 475, 531], "arm": [441, 474, 475, 531], "nvidia": [441, 460, 474, 475, 531], "llama2": 441, "llama": [441, 517, 518, 522, 525, 531], "mpt": [441, 517, 525, 531], "falcon": [441, 517, 525, 531], "gpt": [441, 502, 517, 525, 531], "j": [441, 502, 517, 525, 531], "bloom": [441, 517, 525, 531], "broad": [441, 474, 487, 529], "stabl": [441, 475, 517, 518], "diffus": [441, 518], "vision": [441, 469, 485, 525], "coder": [441, 474, 482, 483, 486, 489, 492, 505, 509, 518], "marketplac": [441, 499, 518], "googl": [441, 479, 518], "amazon": [441, 481, 489], "web": [441, 500, 506, 511, 512, 513, 526], "servic": [441, 498, 505, 518], "softwar": [441, 476, 517, 518, 523], "alibaba": [441, 488, 495, 496, 518], "tencent": [441, 518], "taco": [441, 518], "oliv": [441, 518], "ai": [441, 481, 518, 521, 529], "ecosystem": [441, 518], "lightn": [441, 488], "pip": [441, 464, 467, 470, 472, 475, 483, 486, 491, 493, 495, 496, 500, 501, 502, 503, 523], "wget": [441, 464, 470, 472, 500, 503], "googleapi": [441, 472, 500, 503], "v1_6": [441, 472, 500, 503], "mobilenet_v1_1": [441, 472, 500, 511], "0_224_frozen": [441, 472, 500, 511], "overview": [441, 528], "jupyterlab": [441, 481, 487, 489, 491, 495, 529], "studio": [441, 489, 498, 508, 529], "topic": 441, "int4": [441, 520, 531], "fp8": [441, 518], "innov": [441, 489, 518], "blog": [441, 518], "oct": [441, 518], "2023": [441, 513, 517, 522, 525, 531], "emnlp": [441, 518], "teq": [441, 518, 522], "sep": [441, 518], "neurip": [441, 518], "quala": [441, 518], "minilm": [441, 518, 531], "releas": [441, 475, 487, 489, 491, 495, 497, 509, 512, 513, 532], "legal": [441, 532], "request": [441, 506, 507, 508, 511, 512, 513, 520], "ask": [441, 475], "email": 441, "research": [441, 476, 525, 531], "idea": [441, 500, 517, 525, 528], "discord": 441, "join": [441, 501, 506, 511, 512], "technic": 441, "discuss": 441, "wechat": [441, 518], "img": 441, "bridg": [442, 443, 474], "vanilla": [442, 443, 474], "abcadaptor": 442, "__init__": [442, 461, 462, 477, 528], "query_fw_cap": [442, 444], "query_fused_pattern": 442, "he": 442, "besid": [442, 465, 503, 522], "describ": [442, 444, 464, 471, 500, 526], "past": [442, 522], "mainten": 442, "difficult": [442, 525], "abil": [442, 443, 462, 471, 525], "fragment": 442, "scenario": [442, 459, 465, 478, 517, 522], "granular": [442, 443, 444, 471, 474, 484, 520, 525, 530], "semant": [442, 471], "mla": [442, 479, 520], "becom": [442, 469, 517, 522], "explor": 442, "inspect_tensor": 442, "op_list": [442, 526], "iteration_list": 442, "inspect_typ": 442, "save_to_disk": 442, "quantization_cfg": 442, "set_tensor": 442, "tensor_dict": 442, "diagnosis_help": 442, "fw": 443, "outlin": [443, 444], "instruct": [443, 444, 465, 475, 479, 493, 496, 500, 501, 502, 503, 517, 518, 519, 520, 525, 531], "extend": [443, 444], "accommod": [443, 444], "incorpor": [443, 444, 466, 517, 528], "give": [443, 498, 528], "diagram": [443, 444, 464, 528], "illustr": [443, 444, 466, 528], "sequencediagram": [443, 444, 508], "autonumb": [443, 444], "query_framework_cap": 443, "opwis": 443, "optypewis": 443, "travers": [443, 444, 522, 528], "\u2776": 443, "\u2777": 443, "\u2778": 443, "\u2779": 443, "\u277a": 443, "\u277b": 443, "\u277c": 443, "These": [443, 474, 501], "chapter": 443, "node_op": 443, "confirm": 443, "chosen": [443, 460], "tune_config": 443, "int8_conv_config": 443, "optype_wise_": 443, "per_tensor": [443, 444, 471, 520, 530], "tuning_cfg_to_fw": 443, "Its": [443, 460, 517], "calib_iter": 443, "dispatch": [443, 474, 505, 508], "is_perchannel": 443, "is_asymmetr": 443, "convert_bf16": 443, "larger": [443, 517, 522, 525], "somewhat": 443, "distort": 443, "line": [443, 467, 474, 481, 486, 487, 506, 526], "explain": [444, 464, 525], "let": [444, 471, 486, 517, 519, 530], "overal": [444, 506, 530], "drive": 444, "uint4": 444, "asymmetr": [444, 520, 522, 528], "kullback": [444, 465], "leibler": [444, 465], "pytorch_cpu": 444, "1_11_capabl": 444, "cap_s8_1_11": 444, "cap_s8_1_11_conv1d": 444, "per_channel_symmetr": 444, "addition": [444, 467, 517, 528], "per_tensor_symmetr": 444, "due": [444, 469, 517, 520, 525, 526], "nativ": 444, "with_arg": 444, "qscheme": 444, "torch_dtyp": 444, "quant_min": 444, "quant_max": 444, "linux": [459, 470, 492, 498], "x86_64": 459, "aarch64": 459, "prove": [460, 522, 525], "benefici": 460, "uniform": [460, 522], "\u03b2": 460, "\u03b1": 460, "fundament": [460, 478], "primari": [460, 528], "focu": [460, 528], "essenti": [460, 470], "remaind": 460, "enhanc": [460, 481, 517, 518, 521], "resolut": 460, "extrem": 460, "still": [460, 478, 504, 518, 520, 521], "retain": 460, "noteworthi": 460, "vanhouck": 460, "vincent": 460, "andrew": 460, "senior": 460, "mark": 460, "mao": 460, "speed": [460, 478, 489, 517, 518, 520, 528], "2011": 460, "szymon": 460, "migacz": 460, "2017": 460, "mckinstri": 460, "jeffrei": 460, "l": [460, 465, 526, 528], "discov": [460, 526], "preprint": [460, 517, 522, 525], "1809": 460, "04191": 460, "2018": 460, "encount": 461, "consum": 461, "previous": 461, "lack": [461, 470], "faster": [461, 463, 469, 518, 528, 531], "Of": 461, "evenli": 461, "divid": [461, 508, 525, 528], "discard": 461, "throw": 461, "awai": 461, "draw": [461, 524, 528], "subprocess": 461, "pin": [461, 491, 495], "reshuffl": 461, "manner": [461, 465, 480], "newdataload": 461, "customis": [461, 462, 477], "ensp": [462, 527], "imagerecord": [462, 467, 530], "image_nam": 462, "cocorecord": 462, "gt": [462, 525, 527], "int64": 462, "offer": 462, "style_transf": 462, "content": [462, 506, 507, 511, 512, 513], "tfrecorddataset": 462, "labelbal": 462, "300": [462, 517, 531], "16": [462, 511, 522, 531], "helloworld": [462, 479, 527], "aid": 463, "deploy": [463, 481, 498, 518, 522, 525], "infrastructur": 463, "gap": [464, 480], "diagnos": 464, "gui": [464, 474, 503, 517], "termin": [464, 491, 492, 495, 501], "repeat": [464, 528], "durat": [464, 507, 511, 512, 524], "cd": [464, 467, 475, 500, 502, 503, 505, 506, 511, 512, 513], "setup": [464, 471, 475, 493, 496, 500, 502, 503, 505, 506, 517], "ilsvr2012": 464, "caff": 464, "berkeleyvis": 464, "caffe_ilsvrc12": 464, "xvzf": 464, "image_recognit": [464, 503, 526], "resnet50_torchvis": 464, "ptq_static": [464, 502], "resnet50_v1": [464, 467, 478], "dataset_loc": [464, 503, 511, 526], "label_path": 464, "quantiti": 464, "vec": 464, "mu": 464, "frac": [464, 525], "sigma": 464, "var": 464, "happen": 464, "dispers": [464, 501], "rule": [464, 481, 517], "v0": [464, 503, 525, 526], "cg": [464, 503, 526], "conv0": [464, 503, 526], "expens": [465, 478, 528], "power": [465, 478, 492, 518], "mobil": [465, 478, 531], "produc": 465, "logit": 465, "softmax": 465, "kd": 465, "patient": 465, "compact": [465, 478, 484, 517], "agnost": 465, "resourc": [465, 505, 508, 528], "convolut": [465, 518], "ia": 465, "attach": [465, 478, 525], "shallow": 465, "deepest": 465, "deeper": 465, "paper": [465, 517, 522, 525], "10006": [465, 466], "student_output": [465, 466], "student_loss": [465, 466], "training_func_for_nc": [465, 466], "distil_loss_conf": 465, "accordingli": [465, 489, 525], "promis": [466, 478, 517], "huge": [466, 503, 517, 522], "heavi": 466, "light": 466, "booster": 466, "degrad": [466, 517, 528], "novel": [466, 481, 492, 498], "place": [466, 475, 511, 517, 526, 528], "comb": 466, "distillation_criterion": [466, 478, 516], "q_conf": 466, "horovod": 467, "instal": [467, 470, 472, 481, 483, 486, 489, 493, 496, 498, 499, 501, 502, 503, 532], "program": [467, 476, 481, 498], "enable_eager_execut": 467, "yaml_file_path": 467, "pre_process": 467, "simpli": [467, 480, 481, 483, 486, 498, 506], "evaluation_result": 467, "evaluation_time_cost": 467, "partit": [467, 517], "distributedsampl": 467, "train_sampl": 467, "train_dataset": [467, 520], "num_replica": 467, "rank": 467, "train_load": 467, "train_kwarg": 467, "adadelta": 467, "distributedoptim": 467, "named_paramet": 467, "broadcast_paramet": 467, "root_rank": 467, "broadcast_optimizer_st": 467, "set_epoch": 467, "batch_idx": 467, "zero_grad": [467, 478, 517], "nll_loss": 467, "log_interv": 467, "0f": 467, "tloss": 467, "6f": 467, "dry_run": 467, "test_func": 467, "host": [467, 506, 508, 511, 512, 513], "num_of_process": 467, "002": 467, "ssh": [467, 498], "prompt": 467, "readm": [467, 511], "exactli": [467, 482], "recognit": [467, 469, 517, 526], "resizecropimagenet": [467, 527], "realiz": [467, 515, 521, 524], "tow": 467, "node1": [467, 511, 512], "node2": [467, 511, 512], "TO": [467, 483, 503], "your_node1_nam": 467, "your_node2_nam": 467, "resnet50_fp32_pretrained_model": 467, "nc_resnet50_v1": 467, "resnet": [467, 531], "varieti": [468, 519, 528], "demonstr": [468, 481, 511, 512, 513, 526], "10k": [468, 472], "speedup": [468, 474, 520], "2x": [468, 474], "vnni": [468, 474, 519, 520], "exchang": 469, "hope": 469, "inc_model": [469, 480], "fp32_onnx_config": 469, "verifi": 469, "vgg16": [469, 531], "mobilenet": [469, 524, 531], "rcnn": 469, "torchscript": [469, 522, 525], "unsupport": [469, 478, 517], "add_relu": 469, "conv1d_relu": 469, "conv2d_relu": 469, "group_norm": 469, "hardswish": 469, "instance_norm": 469, "layer_norm": 469, "leaky_relu": 469, "sigmoid": 469, "toolchain": [470, 518], "bare": 470, "metal": 470, "sudo": [470, 484], "apt": [470, 475, 484, 492], "python3": 470, "dev": [470, 491, 495], "distutil": 470, "libgl1": 470, "mesa": 470, "glx": 470, "libglib2": 470, "ln": 470, "sf": 470, "usr": 470, "incompat": 470, "88": [470, 524, 531], "80": [470, 522, 526, 531], "pyobject": 470, "reinstal": 470, "libgl": 470, "yum": [470, 475], "opencv": [470, 475, 492], "conda": [470, 475, 484, 492, 511, 512, 513, 523], "13": [470, 475, 500, 523, 525], "pend": [470, 507], "sqlalchemi": 470, "27": [470, 531], "alemb": 470, "forg": [470, 475], "quick": [471, 479, 517, 529, 530], "friendli": [471, 478, 518, 525, 529, 530], "dive": [471, 529], "purpos": [471, 479, 498, 500, 519, 520], "syntax": 471, "go": [471, 493, 496, 504, 519, 522, 527], "up1": 471, "up2": 471, "valid_mixed_precis": 471, "addn": 471, "grappler_optim": 471, "constfold": 471, "arithmet": 471, "debug_stripp": 471, "major": [473, 503, 520, 525], "concept": [473, 524, 529], "rather": 473, "custom_metr": 473, "refin": [473, 517], "420": 474, "geomean": 474, "snippet": 474, "upload": [474, 493, 496], "click": [474, 481, 482, 489, 492, 498, 503, 518, 526], "qintegerop": [474, 520], "plan": 474, "oneapi": [475, 518, 529], "analyt": [475, 518, 529], "success": [475, 500, 523], "11": [475, 477, 479, 500, 525, 528, 531], "frequent": 475, "pypi": [475, 493, 496], "nightli": 475, "headless": [475, 492], "fastai": 475, "consolid": 475, "latest": [475, 518, 523], "eas": [475, 483, 518], "along": [475, 517, 522], "streamlin": [475, 505, 518], "scienc": 475, "websit": 475, "anaconda": [475, 505, 506], "suit": [475, 499, 526], "esri": 475, "formerli": 475, "skylak": 475, "cascad": 475, "lake": [475, 479, 518], "cooper": [475, 479, 518], "ic": [475, 518], "sapphir": 475, "rapid": 475, "hbm": 475, "arctic": 475, "sound": 475, "pont": 475, "vecchio": 475, "cento": [475, 531], "ubuntu": 475, "22": [475, 531], "04": [475, 531], "fortensorflow": 475, "forpytorch": 475, "12": [475, 500, 531], "tf_enable_onednn_opt": 475, "onednn": [475, 479, 520], "newer": 475, "subject": 476, "accompani": [476, 528], "wish": 476, "bibtex": 476, "author": 476, "feng": 476, "tian": 476, "hanwen": 476, "haihao": [476, 517], "shen": [476, 517], "suyu": 476, "chen": 476, "howpublish": 476, "year": 476, "logo": 476, "atom": 476, "phi": 476, "pentium": 476, "vtune": 476, "corpor": 476, "subsidiari": 476, "brand": 476, "claim": 476, "popularli": 477, "industri": [477, 518], "label_map": 477, "decis": 477, "ap": 477, "curv": 477, "turn": [477, 492], "target_boxes_num": 477, "str_label": 477, "int_label": 477, "inturn": 477, "cocomap": 477, "vocmap": 477, "categor": 477, "multiclass": 477, "multilabel": 477, "newmetr": 477, "reset": 477, "reflect": [477, 527], "new_metr": 477, "deliv": [478, 518, 523], "conveni": [478, 505], "upgrad": 478, "veri": [478, 499, 503, 520, 522, 528, 529], "comprehens": [478, 529], "resort": 478, "automodelforsequenceclassif": 478, "autotoken": 478, "val_dataset": [478, 520], "val_dataload": [478, 520], "worker": [478, 508, 511, 512, 513, 520], "ping_memori": [478, 520], "formul": 478, "effort": 478, "written": 478, "onnxrt_integ": [478, 530], "onnxrt_qlinear": [478, 530], "image_tensor": [478, 530], "post_training_dynamic_qu": [478, 519, 528], "1000": [478, 507, 530], "2000": 478, "sampling_s": [478, 530], "model_wis": [478, 530], "op_dict": 478, "op_wis": [478, 526, 530], "sigopt_api_token": [478, 524, 528], "sigopt_project_id": [478, 524, 528], "sigopt_experiment_nam": [478, 524, 528], "demo": 478, "600": 478, "training_arg": 478, "emul": [478, 520], "trainer": [478, 489], "briefli": [478, 525], "maxim": [478, 517, 528], "pruning_func": 478, "train_dataload": [478, 517, 520], "n_gpu": 478, "gradient_accumulation_step": 478, "clip_grad_norm_": 478, "max_grad_norm": 478, "rate": [478, 517, 520], "start_epoch": [478, 519, 530], "end_epoch": [478, 519, 530], "97": [478, 531], "newli": [478, 517], "on_after_optimizer_step": [478, 517], "layer3": [478, 517], "lr_schedul": [478, 517], "0004": 478, "nesterov": [478, 530], "randomresizedcrop": [478, 527], "totensor": [478, 527], "485": 478, "456": [478, 531], "406": [478, 531], "nepoch": 478, "cnt": 478, "loss_sum": 478, "iter_bar": 478, "tqdm": 478, "desc": 478, "teacher_logit": 478, "train_fun": 478, "training_func": 478, "recent": [478, 479], "growth": [478, 479, 517], "complex": [478, 479, 517], "significantli": [478, 479, 501, 503, 517, 528], "bandwidth": [478, 479, 522], "exit_polici": [478, 530], "determinist": 478, "meaning": [478, 516], "reli": [478, 525], "prune_conf": 478, "quantization_aware_training_conf": 478, "aforement": 478, "inset": 478, "p_conf": [478, 516], "ssd_mobilenet_v1": 478, "benchmarkconf": 478, "half": [479, 489], "sixteen": 479, "launch": [479, 499, 504], "3rd": [479, 518, 520, 521], "gen": [479, 518, 520, 521], "codenam": 479, "boost": [479, 482, 498, 517, 518], "x86": 479, "avx512": [479, 520], "vcvtne2ps2bf16": 479, "vcvtneps2bf16": 479, "vdpbf16p": 479, "fbgemm": [479, 520], "tensorrtexecutionprovid": [479, 520], "cudaexecutionprovid": [479, 520], "dnnlexecutionprovid": [479, 520], "avx512_bf16": 479, "plu": 479, "resnet18": [479, 483, 531], "persist": 480, "brought": [480, 482, 489, 520], "tf2": 480, "h5": 480, "hybridblock": 480, "0000": 480, "saved_result": [480, 502, 522], "simplifi": [481, 492, 498, 517, 518], "acquir": 481, "analysi": [481, 498, 517, 524], "heurist": [481, 498], "great": 481, "facilit": 481, "autocast": 481, "my_model": 481, "no_grad": 481, "memory_format": 481, "112": 481, "rand": [481, 525], "plugin": [481, 499], "aw": [481, 489, 508, 518, 531], "sagemak": [481, 489], "neural_cod": [481, 483, 485, 486, 487, 489], "bench": 481, "superbench": 481, "enjoi": [482, 486, 489], "reload": [482, 499, 501, 504], "modern": [483, 522], "democrat": [483, 518], "programm": [483, 489, 498], "nano_bf16_channels_last": 483, "nano_bf16_ipex_channels_last": 483, "nano_bf16_ipex": 483, "nano_bf16": 483, "nano_fp32_channels_last": 483, "nano_fp32_ipex_channels_last": 483, "nano_fp32_ipex": 483, "nano_gpu_to_cpu": 483, "nano_int8": 483, "nano_jit_bf16_channels_last": 483, "nano_jit_bf16_ipex_channels_last": 483, "nano_jit_bf16_ipex": 483, "nano_jit_bf16": 483, "nano_jit_fp32_channels_last": 483, "nano_jit_fp32_ipex_channels_last": 483, "nano_jit_fp32_ipex": 483, "nano_jit_fp32": 483, "nano_onnxruntime_fp32": 483, "nano_onnxruntime_int8_qlinear": 483, "openvino": 483, "nano_openvino_fp32": 483, "nano_openvino_int8": 483, "bc": [484, 492], "conda_prefix": 484, "echo": 484, "tradit": [484, 517], "libjemalloc": 484, "libiomp5": 484, "home": 484, "lib": 484, "ld_preload": 484, "malloc_conf": 484, "oversize_threshold": 484, "background_thread": 484, "metadata_thp": 484, "dirty_decay_m": 484, "9000000000": 484, "muzzy_decay_m": 484, "kmp_affin": 484, "kmp_blocktim": 484, "dnnl_primitive_cache_capac": 484, "governor": 484, "cpufreq": 484, "scaling_governor": 484, "powersav": 484, "tee": 484, "pytorch_jit_script": [485, 488], "pytorch_channels_last": [485, 488], "run_bench": 485, "patch": [485, 498], "patch_path": 485, "your_patch_path": 485, "sweep": 485, "sweep_object": 485, "bench_config": 485, "bench_featur": 485, "sai": 486, "run_glu": [486, 487, 509, 512, 513], "requisit": 486, "task_nam": [486, 487, 509, 512, 513], "do_ev": [486, 487, 502, 509, 512, 513], "remain": 486, "itself": [486, 517], "run_glue_optim": 486, "static_ipex": 486, "auto_qu": 487, "v4": [487, 509, 512, 513, 531], "albert": [487, 531], "sst2": 487, "alexnet": [487, 531], "pytorch_amp": 488, "optimize_for_infer": 488, "pytorch_jit_trac": 488, "pytorch_jit_script_ofi": 488, "pytorch_jit_trace_ofi": 488, "torchdynamo": 488, "pytorch_torchdynamo_jit_script": 488, "pytorch_torchdynamo_jit_trac": 488, "pytorch_torchdynamo_jit_script_ofi": 488, "pytorch_torchdynamo_jit_trace_ofi": 488, "pytorch_inc_bf16": 488, "pytorch_inc_static_quant_fx": 488, "pytorch_inc_static_quant_ipex": 488, "pytorch_inc_dynamic_qu": 488, "pytorch_ipex_fp32": 488, "pytorch_ipex_bf16": 488, "pytorch_ipex_int8_static_qu": 488, "pytorch_ipex_int8_dynamic_qu": 488, "blade": 488, "disc": 488, "pytorch_aliblad": 488, "pytorch_lightning_bf16_cpu": 488, "tensorflow_amp": 488, "keras_amp": 488, "tensorflow_inc": 488, "keras_inc": 488, "onnx_inc_static_quant_qlinear": 488, "onnx_inc_static_quant_qdq": 488, "onnx_inc_dynamic_qu": 488, "optimum": [488, 489, 501], "pytorch_inc_huggingface_optimum_stat": 488, "pytorch_inc_huggingface_optimum_dynam": 488, "intel_extension_for_transform": 488, "bigdl": [488, 489], "nano": [488, 489], "nano_": 488, "inc_auto": 488, "delight": 489, "announc": 489, "v": [489, 498, 517, 528, 530], "500": [489, 507, 531], "jupyt": [489, 491, 492, 495], "isa": 489, "adjust": [489, 520, 525], "delta": 489, "acc_delta": 489, "int8_acc": 489, "fp32_acc": 489, "ext": [491, 493, 495, 496, 497], "lab": [491, 492, 493, 495, 496], "nodej": [491, 495], "jlpm": [491, 495], "yarn": [491, 495], "npm": [491, 492, 495], "lieu": [491, 495], "labextens": [491, 492, 495], "typescript": [491, 495], "watch": [491, 495, 504], "immedi": [491, 495, 517], "refresh": [491, 495], "browser": [491, 495, 500, 504], "wait": [491, 495, 498, 508], "rebuilt": [491, 495], "easier": [491, 495, 498, 500, 518], "symlink": [491, 495], "down": 492, "finish": [492, 508], "enter": [492, 498, 506], "blank": 492, "cell": 492, "gain": [492, 516, 518], "mkl": 492, "jemalloc": 492, "pip3": 492, "pyproject": [493, 496], "toml": [493, 496], "twine": [493, 496], "whl": [493, 496], "dist": [493, 496], "sdist": [493, 496], "bdist_wheel": [493, 496], "deprec": [493, 496, 523, 527], "frontend": [493, 496, 506], "login": [493, 496, 524], "cut": [493, 496], "admin_github_token": [493, 496], "pypi_token": [493, 496], "npm_token": [493, 496], "secret": [493, 496], "panel": [493, 496, 498], "draft": [493, 496], "changelog": [493, 496, 497], "pkg": [493, 496], "bot": [493, 496], "pick": [493, 496, 499], "feedstock": [493, 496], "hatch": 496, "notabl": 497, "vscode": [497, 499], "daili": 498, "advantag": [498, 517, 519, 528], "remot": 498, "server": [498, 500, 503, 506, 511, 512, 513], "re": [498, 504, 522], "market": 498, "uninstal": 498, "fill": [498, 524, 527, 528], "upper": 498, "sidebar": 498, "hover": 498, "track": [498, 524], "argpars": 498, "pop": [498, 508], "diff": 498, "manifest": 499, "declar": 499, "palett": 499, "registercommand": 499, "amodio": 499, "tsl": 499, "matcher": 499, "dbaeumer": 499, "eslint": [499, 504], "press": 499, "f5": 499, "ctrl": 499, "hello": 499, "world": 499, "breakpoint": 499, "consol": [499, 504], "relaunch": 499, "toolbar": 499, "node_modul": 499, "viewlet": 499, "dropdown": 499, "runner": [499, 504], "startup": 499, "bundl": 499, "neural_insight": [500, 502, 503], "tl": 500, "ui": 500, "5000": 500, "338174d13706855fc6924cec7b3a8ae8": 500, "listen": 500, "firewal": 500, "8080": 500, "cert": 500, "path_to_cert": 500, "crt": 500, "path_to_private_kei": 500, "encrypt": 500, "expos": 500, "forfeit": 500, "client": [500, 506, 513], "extern": 500, "threat": 500, "diagnost": 500, "skill": 500, "feel": [500, 504], "layoutlmv3": [501, 531], "seqev": 501, "sentencepiec": 501, "timm": 501, "fvcore": 501, "pillow": 501, "einop": 501, "textdist": 501, "setuptool": 501, "cli": 501, "hypjudi": 501, "finetun": [501, 517, 522, 531], "funsd": [501, 531], "calib_dataset": 501, "incdataset": 501, "eval_dataset": 501, "poor": [501, 526], "9049": 501, "2989": 501, "66": [501, 531], "9631": 501, "glob": 501, "panda": 501, "pd": 501, "set_opt": 501, "max_row": 501, "max_column": 501, "getmtim": 501, "activations_t": 501, "weights_tabl": [501, 502], "read_csv": 501, "nweight": 501, "descend": 501, "sorted_data": 501, "sort_valu": 501, "ascend": 501, "evid": 501, "tip": 501, "8981": 501, "7502": 501, "6b": [502, 525, 531], "run_clm": 502, "eleutherai": [502, 525, 531], "dataset_nam": 502, "wikitext": [502, 531], "dataset_config_nam": 502, "do_train": 502, "inspect_sav": 502, "inspect_result": 502, "quan": 502, "model_summari": 502, "incept": [503, 531], "v3": [503, 531], "inception_v3": [503, 526], "inceptionv3_fp32_pretrained_model": [503, 526], "bash": [503, 526], "prepare_dataset": 503, "sh": [503, 526], "raw_dir": 503, "img_raw": 503, "delet": [503, 517], "run_tun": 503, "nc_inception_v3": 503, "highest": [503, 509, 528], "satisfactori": 503, "webpag": 503, "spike": 503, "bottom": 503, "chart": [503, 520, 524, 526], "concentr": 503, "toler": 503, "But": 503, "bigger": 503, "bootstrap": 504, "localhost": [504, 506, 511, 512], "3000": 504, "lint": 504, "interact": [504, 524], "correctli": 504, "hash": [504, 507], "readi": [504, 517], "aren": 504, "transit": 504, "webpack": 504, "babel": 504, "tweak": 504, "ever": 504, "curat": 504, "suitabl": 504, "middl": [504, 525], "shouldn": 504, "understand": [504, 520, 526, 529], "wouldn": 504, "couldn": 504, "facebook": [504, 525, 531], "troubleshoot": 504, "effortlessli": 505, "grpc": [505, 506, 510, 511, 512, 514], "queue": 505, "seamlessli": [505, 517, 528], "mpi": [505, 506, 528], "neural_solut": [505, 506, 511, 512, 513], "task_monitor_port": [506, 511, 512, 513], "22222": [506, 511, 512, 513], "result_monitor_port": [506, 511, 512, 513], "33333": [506, 511, 512, 513], "restful_api_port": [506, 511, 512, 513], "hostfil": [506, 508, 511, 512, 513], "grpc_api_port": [506, 511, 512, 513], "api_typ": [506, 511, 512, 513], "conda_env": [506, 511, 512, 513], "upload_path": [506, 511, 512, 513], "8000": [506, 511, 512, 513], "monitor": [506, 511, 512, 513], "3333": [506, 511, 512, 513], "2222": [506, 511, 512, 513], "ns_workspac": [506, 511, 512, 513], "hf_model": [506, 510, 512], "curl": [506, 507, 511, 512], "task_id": [506, 511, 512, 513], "usernam": 506, "db": [506, 508], "serve_log": [506, 511, 512, 513], "frontend_grpc": 506, "task_log": 506, "task_bdf0bd1b2cc14bc19bce12d4f9b333c7": 506, "task_workspac": 506, "bdf0bd1b2cc14bc19bce12d4f9b333c7": 506, "aliv": 506, "properli": 506, "commonli": [506, 517], "hostnam": 506, "breakdown": 506, "ip": 506, "hous": 506, "host1": [506, 511, 512], "host2": [506, 511, 512], "query_id": 506, "oaa": 507, "host_ip": 507, "task_request": [507, 511, 512, 513], "tuning_info": [507, 511], "optimization_result": [507, 511], "result_path": [507, 511, 512], "closur": 507, "404": [507, 517, 531], "health": 507, "healthi": 507, "quantized_model": [507, 511, 512], "400": [507, 531], "alloc": 508, "incom": 508, "taskmonitor": 508, "cluster": [508, 511, 512, 528], "tasklaunch": 508, "resultmonitor": 508, "receiv": [508, 524], "p1": 508, "notif": 508, "p2": 508, "p3": 508, "mpirun": [508, 528], "perf": 508, "p4": 508, "four": [508, 526, 531], "classdiagram": 508, "taskdb": 508, "get_statu": 508, "update_statu": 508, "task_collect": 508, "append_task": 508, "get_all_pending_task": 508, "update_task_statu": 508, "task_db": 508, "wait_new_task": 508, "schedule_task": 508, "dispatch_task": 508, "launch_task": 508, "query_task_statu": 508, "node_list": 508, "reserve_resourc": 508, "get_node_statu": 508, "gcp": [508, 518], "script_url": [509, 511, 512, 513], "archiv": 509, "prioriti": 509, "tf_example1": [510, 511, 512], "hf_models_grpc": [510, 513], "00173": 511, "01024": 511, "task_request_distribut": 511, "custom_models_optim": 511, "7602cd63d4c849e7a686a8165a77f69d": [511, 512], "151": [511, 531], "8617": 511, "17": [511, 531], "8213": [511, 531], "number_of_socket": [511, 512], "number_of_thread": [511, 512], "cdf419910f9b4d2a8320d0e420ac1d0a": 512, "optimized_result": 512, "58": [512, 531], "3162": 512, "6488": [512, 531], "test_task_request": 513, "06": [513, 530, 531], "34": [513, 531], "55": [513, 531], "d3e10a49326449fb9d0d62f2bfc1cb43": 513, "fastapi": 514, "multi_object": 515, "benefit": 516, "instanti": 516, "neuron": 517, "art": 517, "grown": 517, "unpreced": 517, "increasingli": 517, "crucial": 517, "stand": [517, 528], "shrink": 517, "contextu": 517, "scene": 517, "haven": 517, "color": [517, 522], "lowest": [517, 528], "formula": [517, 525], "emsp": 517, "downstream": 517, "prone": 517, "co": 517, "discourag": 517, "penal": 517, "parameter": 517, "lightweight": 517, "perceptron": 517, "mlp": 517, "valuabl": [517, 526], "basi": 517, "billion": 517, "dolli": [517, 525, 531], "lm": [517, 531], "lamini": [517, 525], "worth": 517, "mention": [517, 522], "tend": 517, "exemplifi": 517, "complement": 517, "fortieth": 517, "miss": [517, 520], "pruner2": 517, "few": [517, 518, 528], "lm_head": 517, "yourself": 517, "uncertain": 517, "auto_config": 517, "quit": [517, 522], "straightforward": [517, 522, 525], "carri": 517, "pruning_pattern": 517, "pruning_start": 517, "pruning_end": 517, "sparse_gpt": 517, "embed_out": 517, "card": 517, "hesit": 517, "causal": 517, "clm": 517, "sst": [517, 531], "25": [517, 531], "63": [517, 531], "24": [517, 528, 531], "35": [517, 531], "flan": 517, "t5": [517, 531], "english": 517, "romanian": 517, "381": 517, "yolov5": 517, "75": [517, 531], "2x1": [517, 531], "801": 517, "7895": 517, "signific": [517, 518, 522, 525], "reduct": [517, 522, 530], "namhoon": 517, "lee": 517, "thalaiyasingam": 517, "ajanthan": 517, "philip": 517, "torr": 517, "2019": 517, "zafrir": 517, "ofir": 517, "ariel": 517, "larei": 517, "boudoukh": 517, "mosh": 517, "wasserblat": 517, "2111": 517, "05754": 517, "2021": 517, "kwon": 517, "kim": 517, "mahonei": 517, "hassoun": 517, "keutzer": 517, "gholami": 517, "pp": 517, "24101": 517, "24116": 517, "frantar": [517, 522], "alistarh": 517, "medium": 518, "aug": 518, "juli": 518, "onnxcommunitymeetup2023": 518, "chatbot": 518, "june": 518, "msft": 518, "netflix": 518, "apr": 518, "mlperf": [518, 531], "5x": 518, "heterogen": 518, "mar": 518, "jan": 518, "busi": 518, "amx": 518, "4th": [518, 520], "journei": 518, "dec": 518, "mleffici": 518, "deepen": 518, "foundat": 518, "intellig": 518, "vmware": 518, "applianc": 518, "bitnami": 518, "nov": 518, "sota": 518, "plug": 518, "twitter": 518, "linkedin": 518, "zone": 518, "land": 518, "pat": 518, "keynot": 518, "intelon": 518, "chines": 518, "purif": 518, "sacrif": 518, "jun": 518, "partner": 518, "feb": 518, "joint": 518, "bilibili": 518, "gestalt": 518, "ml": 518, "doubl": 518, "abound": 518, "lpot": [518, 523], "nextplatform": 518, "cern": 518, "gan": 518, "3dgan": 518, "iml": 518, "workshop": 518, "asplo": 518, "18": [518, 531], "highli": [518, 522], "intelcaff": 518, "aris": 519, "henc": 519, "onnxrt_qoper": 519, "quant_aware_train": 519, "weight_compress": [519, 530], "initial_spars": [519, 530], "prune_typ": [519, 530], "basic_magnitud": [519, 530], "update_frequ": 519, "prune_domain": 519, "tile_pattern_1x1": 519, "invent": 520, "cost": [520, 522], "On": [520, 531], "theoret": [520, 522], "zeropoint": 520, "255": [520, 525], "overflow": 520, "unseen": 520, "enough": 520, "peopl": 520, "mimic": 520, "fact": 520, "ultim": 520, "pain": 520, "lossi": 520, "philosophi": 520, "neither": 520, "nor": 520, "val_load": 520, "avg": 520, "themselv": 520, "dmlexecutionprovid": 520, "ON": 521, "forc": 521, "postposttrainingquantconfig": 521, "bf16wrapper": 521, "retrac": 521, "preval": 522, "grow": 522, "demand": 522, "w8a8": 522, "trade": 522, "bottleneck": 522, "roughli": 522, "speak": 522, "capac": [522, 524], "flop": 522, "famou": 522, "approx": 522, "bmm": 522, "100x": 522, "excel": 522, "stai": [522, 525], "quantif": [522, 525], "think": 522, "intuit": [522, 525], "uniformli": 522, "qlora": 522, "invers": 522, "restor": 522, "protect": 522, "greatli": 522, "inspir": 522, "normalfloat": 522, "e2m1": 522, "bnb": 522, "805": 522, "005": 522, "91": [522, 525, 531], "stabil": 522, "weightonlylinear": 522, "date": 522, "qweight": 522, "even": [522, 525], "rtn_arg": 522, "gptq_arg": 522, "use_full_length": 522, "awq_arg": 522, "compressed_model": 522, "meanwhil": 522, "substanti": 522, "pose": 522, "challeng": 522, "lwq": 522, "constrain": 522, "grei": 522, "blue": 522, "rectangl": 522, "10005": 522, "ouput_dir": 522, "omit": 522, "rtn_g32asym": 522, "gptq_g32asym": 522, "gptq_g32asym_disable_last_matmul": 522, "gptq_g128asym": 522, "awq_g32asym": 522, "xiao": [522, 525], "guangxuan": [522, 525], "2211": [522, 525], "10438": [522, 525], "wei": [522, 525], "xiui": [522, 525], "suppress": [522, 525], "2209": [522, 525], "13325": [522, 525], "lin": 522, "ji": 522, "2306": 522, "00978": 522, "elia": 522, "dettmer": 522, "tim": 522, "2305": 522, "14314": 522, "site": 523, "assist": 523, "experienc": 523, "18284": 523, "absenc": 523, "safe_mod": 523, "model_from_json": 523, "defici": 523, "hinder": 523, "sed": 523, "your_script": 523, "backbon": 524, "sigopt_experiment_id": 524, "nc": [524, 528], "suffici": 524, "ordinari": 524, "latenc": [524, 528], "8266": 524, "8372": 524, "2132": 524, "83": [524, 525, 531], "7495": 524, "8299": 524, "8294": 524, "85": [524, 525, 531], "0837": 524, "8291": 524, "4469": 524, "gigant": 525, "systemat": 525, "migrat": [525, 529], "difficulti": 525, "mathemat": 525, "allevi": 525, "coarsest": 525, "finer": [525, 528], "matric": 525, "similarli": 525, "finest": 525, "consumpt": 525, "why": [525, 526], "suppos": 525, "6839": 525, "4741": 525, "7451": 525, "9301": 525, "1742": 525, "6835": 525, "q_min": 525, "q_max": 525, "q_x": 525, "clamp_": 525, "round_": 525, "w_q": 525, "00296431384049356": 525, "59": [525, 531], "172": [525, 531], "192": 525, "w_dq": 525, "2220": 525, "1510": 525, "2420": 525, "2570": 525, "0500": 525, "1890": 525, "mseloss": 525, "1983354538679123": 525, "6848": 525, "4743": 525, "7440": 525, "9308": 525, "1749": 525, "385297635664756e": 525, "07": [525, 530, 531], "affect": 525, "quantize_per_channel": 525, "x_tmp": 525, "detach": 525, "keepdim": 525, "dequantize_per_channel": 525, "0029": [525, 531], "0036": 525, "162": [525, 531], "48": [525, 531], "72": [525, 531], "93": [525, 531], "207": 525, "139": [525, 531], "6837": 525, "4734": 525, "1751": 525, "6821": 525, "637690492221736e": 525, "6376e": 525, "3852e": 525, "cdot": 525, "quantize_per_tensor_absmax": 525, "n_bit": 525, "div_": 525, "0806": 525, "7589": 525, "6038": 525, "3815": 525, "5040": 525, "7174": 525, "5444": 525, "5826": 525, "7772": 525, "5555": 525, "3740": 525, "3253": 525, "0698": 525, "1381": 525, "5972": [525, 531], "0086": 525, "0737": 525, "8298": 525, "6883": 525, "2991": 525, "1601": 525, "6506": 525, "8246": 525, "3924": 525, "3845": 525, "8768": 525, "w_scale": 525, "x_q": 525, "x_scale": 525, "84": [525, 531], "120": 525, "0059755356051027775": 525, "89": [525, 531], "119": 525, "57": [525, 531], "006533813662827015": 525, "y_q": 525, "17509": 525, "7608": 525, "4055": 525, "16599": 525, "21020": 525, "10016": 525, "9860": 525, "22444": 525, "y_dq": 525, "6836": 525, "2970": 525, "1583": 525, "6481": 525, "8207": 525, "3911": 525, "3850": 525, "8763": 525, "though": 525, "simplic": 525, "denot": 525, "fp1": 525, "fp2": 525, "subsect": [525, 530], "x1": [525, 528], "x2": [525, 528], "herebi": 525, "sq": 525, "overhead": 525, "hardtanh": 525, "t5norm": 525, "llamanorm": 525, "groupnorm": 525, "lambada": 525, "openai": [525, 531], "sweet": 525, "spot": 525, "region": 525, "bigscienc": [525, 531], "560m": 525, "354": 525, "3542": 525, "1b7": 525, "4634": 525, "4936": 525, "3b": 525, "518": 525, "5185": 525, "7b1": [525, 531], "5764": [525, 531], "5977": 525, "bloomz": [525, 531], "3947": 525, "3930": 525, "4828": 525, "4906": 525, "5018": 525, "4980": 525, "5593": [525, 531], "5552": 525, "125m": 525, "379": 525, "3757": 525, "350m": 525, "4516": 525, "4533": 525, "5789": 525, "5742": 525, "7b": [525, 531], "6365": 525, "6404": 525, "6769": [525, 531], "6804": [525, 531], "13b": [525, 531], "6872": 525, "6814": 525, "30b": [525, 531], "7149": 525, "7128": 525, "66b": 525, "7398": 525, "7326": 525, "7361": [525, 531], "7357": 525, "7627": [525, 531], "7590": 525, "7759": [525, 531], "7840": 525, "65b": 525, "7908": 525, "7957": 525, "7392": [525, 531], "7335": [525, 531], "chat": [525, 531], "7058": [525, 531], "6994": 525, "7677": [525, 531], "7615": [525, 531], "6831": [525, 531], "mbzuai": 525, "124m": 525, "3804": 525, "3887": 525, "774m": 525, "5048": 525, "5057": 525, "5b": 525, "5443": [525, 531], "5436": 525, "mosaicml": [525, 531], "655": [525, 531], "6499": 525, "stabilityai": 525, "stablelm": 525, "4172": 525, "4149": 525, "togethercomput": 525, "redpajama": 525, "incit": 525, "6542": 525, "6735": 525, "6718": 525, "6740": [525, 531], "6569": 525, "6621": 525, "7143": 525, "7221": 525, "6895": 525, "6953": [525, 531], "databrick": [525, 531], "6866": [525, 531], "6297": 525, "6247": 525, "tiiuae": [525, 531], "6437": [525, 531], "6392": 525, "asterisk": 525, "arang": 525, "tolist": 525, "jason": 525, "emerg": 525, "transact": 525, "yvinec": 525, "edouard": 525, "proceed": 525, "cvf": 525, "winter": 525, "instrument": 526, "writer": 526, "_pre_eval_hook": 526, "_post_eval_hook": 526, "submodul": 526, "whitelist": 526, "_recordingobserv": 526, "output_tensors_dict": 526, "current_it": 526, "get_tensor_valu": 526, "_observer_forward_hook": 526, "activation_post_process": 526, "_add_observer_": 526, "named_children": 526, "leaf": 526, "add_modul": 526, "register_forward_hook": 526, "dump_tim": 526, "summarywrit": 526, "_acc": 526, "tune_": 526, "add_graph": 526, "get_observer_dict": 526, "observer_dict": 526, "is_quant": 526, "add_histogram": 526, "shell": 526, "bind_al": 526, "logdir_spec": 526, "tune_0_acc0": 526, "tune_1": 526, "tune_1_acc0": 526, "79": [526, 531], "baseline_acc_0": 526, "776": 526, "tune_1_acc_0": 526, "095": 526, "runs_v3": 526, "run_tuning_dump_tensor": 526, "inceptionv3": 526, "run_quant": 526, "topologi": 526, "nc_inceptionv3": 526, "inceptionv3_dump_tensor": 526, "eightbit": 526, "disappear": 526, "centercrop": 527, "randomcrop": 527, "cropres": 527, "decodeimag": 527, "jpeg": 527, "encodejp": 527, "alignimagechannel": 527, "68": [527, 531], "116": 527, "78": [527, 531], "103": 527, "94": [527, 531], "017": 527, "bilinearimagenet": [527, 530], "topilimag": 527, "padding_mod": 527, "border": 527, "pixel": 527, "edg": 527, "colorjitt": 527, "bright": 527, "satur": 527, "hue": 527, "jitter": 527, "tondarrai": 527, "quickli": [528, 529], "o1": 528, "human": 528, "aggress": 528, "classic": 528, "flowchart": 528, "htmllabel": 528, "td": 528, "classdef": 528, "itemstyl": 528, "cce5ff": 528, "stroke": 528, "99ccff": 528, "s1": 528, "s2": 528, "s3": 528, "s4": 528, "s5": 528, "s6": 528, "s7": 528, "nbsp": 528, "subgraphstyl": 528, "ffffff": 528, "attempt": 528, "post_training_auto_qu": 528, "trial": 528, "increment": 528, "ii": 528, "spent": 528, "hawq_v2_loss": 528, "model_loss": 528, "black": 528, "compli": 528, "posterior": 528, "short": 528, "loglevel": 528, "endlessli": 528, "perspect": 528, "smbo": 528, "appl": 528, "surrog": 528, "densiti": 528, "parzen": 528, "greatest": 528, "hour": 528, "dai": 528, "next_tune_cfg": 528, "overridden": 528, "replic": 528, "replica": 528, "fed": 528, "synchron": 528, "number_of_process": 528, "run_cmd": 528, "abctunestrategi": 528, "familiar": 529, "notebook": 529, "introduct": 529, "organ": 530, "logic": 530, "mobilenet_v1": 530, "40": [530, 531], "beta_1": 530, "beta_2": 530, "epsilon": 530, "sparsecategoricalcrossentropi": 530, "sum_over_batch_s": 530, "from_logit": 530, "54": [530, 531], "19": [530, 531], "09": 531, "1x": 531, "platinum": 531, "8480": 531, "8ghz": 531, "56": 531, "ht": 531, "turbo": 531, "256gb": 531, "16x16gb": 531, "ddr5": 531, "4800": 531, "mt": 531, "bio": 531, "3a14": 531, "tel2p1": 531, "microcod": 531, "0x2b0001b0": 531, "gcc": 531, "20210514": 531, "red": 531, "hat": 531, "visit": 531, "1s4c14ins1bsthroughput": 531, "sec": 531, "74": 531, "2914": 531, "621": 531, "69x": 531, "76": 531, "23": 531, "46": 531, "31": 531, "2160": 531, "545": 531, "47": 531, "96x": 531, "resnet101": 531, "77": 531, "37": 531, "1508": 531, "428": 531, "53x": 531, "70": 531, "44": 531, "69": 531, "3290": 531, "1229": 531, "68x": 531, "38": 531, "73": 531, "2404": 531, "1048": 531, "49": 531, "29x": 531, "71": 531, "1669": 531, "33x": 531, "1073": 531, "245": 531, "38x": 531, "374": 531, "52": 531, "18x": 531, "96": 531, "5478": 531, "1756": 531, "12x": 531, "4133": 531, "1748": 531, "36x": 531, "1534": 531, "236": 531, "62": 531, "49x": 531, "vgg19": 531, "1377": 531, "197": 531, "resnetv2": 531, "39": 531, "1125": 531, "656": 531, "71x": 531, "709": 531, "367": 531, "00": 531, "93x": 531, "152": 531, "03": 531, "497": 531, "265": 531, "87x": 531, "densenet": 531, "121": 531, "557": 531, "67": 531, "61": 531, "22x": 531, "161": 531, "29": 531, "353": 531, "235": 531, "50x": 531, "169": 531, "65": 531, "41": 531, "435": 531, "385": 531, "13x": 531, "efficientnet": 531, "b0": 531, "786": 531, "723": 531, "09x": 531, "130": 531, "23x": 531, "1291": 531, "683": 531, "89x": 531, "61x": 531, "1295": 531, "453": 531, "85x": 531, "242": 531, "31x": 531, "cnn": 531, "80x": 531, "43": 531, "81x": 531, "166": 531, "07x": 531, "16x": 531, "26": 531, "173": 531, "yolov3": 531, "82": 531, "230": 531, "92": 531, "36": 531, "37x": 531, "58x": 531, "86": 531, "416": 531, "35x": 531, "88x": 531, "51": 531, "17x": 531, "75552": 531, "50803": 531, "1s56c1ins1bsthroughput": 531, "60": 531, "64x": 531, "1673": 531, "653": 531, "56x": 531, "1170": 531, "329": 531, "55x": 531, "977": 531, "335": 531, "91x": 531, "resnest50": 531, "81": 531, "10x": 531, "resnext101_32x8d": 531, "562": 531, "109": 531, "efficientnet_b0": 531, "696": 531, "667": 531, "04x": 531, "efficientnet_b3": 531, "508": 531, "397": 531, "28x": 531, "efficientnet_b7": 531, "234": 531, "149": 531, "57x": 531, "peleenet": 531, "858": 531, "588": 531, "46x": 531, "se_resnext50_32x4d": 531, "739": 531, "283": 531, "yolo": 531, "141": 531, "99x": 531, "174": 531, "camembert": 531, "395": 531, "171": 531, "30x": 531, "53": 531, "795": 531, "341": 531, "744": 531, "343": 531, "163": 531, "funnel": 531, "182": 531, "65x": 531, "399": 531, "21x": 531, "407": 531, "412": 531, "stsb": 531, "413": 531, "39x": 531, "409": 531, "75x": 531, "401": 531, "70x": 531, "76x": 531, "reform": 531, "crime": 531, "punish": 531, "446": 531, "398": 531, "lvwerra": 531, "pegasu": 531, "samsum": 531, "102": 531, "770": 531, "450": 531, "14x": 531, "whisper": 531, "25x": 531, "abeja": 531, "neox": 531, "japanes": 531, "90x": 531, "1646": 531, "657": 531, "1098": 531, "322": 531, "41x": 531, "568": 531, "19x": 531, "1383": 531, "761": 531, "82x": 531, "32x": 531, "5701": 531, "1593": 531, "2090": 531, "685": 531, "05x": 531, "resnext101_32x16d_wsl": 531, "556": 531, "01x": 531, "86x": 531, "558": 531, "11x": 531, "lambada_openai": 531, "hellaswag": 531, "winogrand": 531, "piqa": 531, "word_perplex": 531, "4954": 531, "6409": 531, "7541": 531, "6434": 531, "8816": 531, "gptqw4g128asym": 531, "679": 531, "4895": 531, "6433": 531, "7476": 531, "6399": 531, "9945": 531, "0999": 531, "gptqw4g32asym": 531, "6829": 531, "4923": 531, "6401": 531, "7486": 531, "6410": 531, "9963": 531, "0141": 531, "gptqw4g128sym": 531, "4907": 531, "6361": 531, "7443": 531, "6390": 531, "9932": 531, "1498": 531, "gptqw4g32sym": 531, "6911": 531, "4899": 531, "6448": 531, "7497": 531, "6439": 531, "0008": 531, "0927": 531, "5049": 531, "6543": 531, "7628": 531, "6497": 531, "2862": 531, "4984": 531, "6535": 531, "7568": 531, "6473": 531, "9962": 531, "4193": 531, "6885": 531, "4973": 531, "753": 531, "6455": 531, "9935": 531, "4607": 531, "decapoda": 531, "5642": 531, "6709": 531, "7835": 531, "6887": 531, "4202": 531, "7244": 531, "5603": 531, "6614": 531, "6824": 531, "9909": 531, "5881": 531, "5911": 531, "7009": 531, "7878": 531, "7106": 531, "212": 531, "7518": 531, "5843": 531, "6961": 531, "7911": 531, "4319": 531, "7572": 531, "5898": 531, "7056": 531, "7894": 531, "7105": 531, "9998": 531, "3429": 531, "7596": 531, "5841": 531, "6977": 531, "7905": 531, "7080": 531, "4916": 531, "6266": 531, "7277": 531, "8096": 531, "7350": 531, "2384": 531, "778": 531, "624": 531, "7269": 531, "8047": 531, "7334": 531, "9979": 531, "4237": 531, "7706": 531, "6239": 531, "7285": 531, "8058": 531, "7322": 531, "4697": 531, "7836": 531, "6195": 531, "7337": 531, "9983": 531, "5604": 531, "5732": 531, "648": 531, "7715": 531, "6746": 531, "7107": 531, "6982": 531, "5637": 531, "6527": 531, "7704": 531, "6713": 531, "9950": 531, "9702": 531, "5682": 531, "6575": 531, "7758": 531, "6742": 531, "9994": 531, "9317": 531, "567": 531, "6902": 531, "7353": 531, "6622": 531, "7829": 531, "6862": 531, "9942": 531, "9635": 531, "7246": 531, "5617": 531, "6756": 531, "7797": 531, "6854": 531, "9931": 531, "2799": 531, "7312": 531, "6059": 531, "7103": 531, "7077": 531, "2213": 531, "7273": 531, "6018": 531, "7088": 531, "7742": 531, "7030": 531, "9934": 531, "2538": 531, "083": 531, "7283": 531, "6053": 531, "7024": 531, "7764": 531, "7031": 531, "1889": 531, "727": 531, "5997": 531, "7018": 531, "9916": 531, "2504": 531, "7122": 531, "8984": 531, "5933": 531, "689": 531, "7851": 531, "7075": 531, "1556": 531, "448": 531, "7675": 531, "5934": 531, "7856": 531, "7111": 531, "9984": 531, "1514": 531, "927": 531, "7566": 531, "5899": 531, "7032": 531, "9953": 531, "1374": 531, "728": 531, "4628": 531, "6456": 531, "6029": 531, "6438": 531, "5799": 531, "4542": 531, "6004": 531, "9957": 531, "0626": 531, "4789": 531, "6134": 531, "7432": 531, "5525": 531, "4731": 531, "6504": 531, "7617": 531, "6094": 531, "7828": 531, "5098": 531, "7622": 531, "6505": 531, "3242": 531, "6878": 531, "5058": 531, "6393": 531, "7633": 531, "6491": 531, "9978": 531, "5514": 531, "6864": 531, "5084": 531, "6519": 531, "6509": 531, "0006": 531, "4728": 531, "6876": 531, "5045": 531, "6474": 531, "9952": 531, "6379": 531, "5282": 531, "614": 531, "7448": 531, "6312": 531, "6377": 531, "5228": 531, "5991": 531, "6261": 531, "9919": 531, "4096": 531, "neo": 531, "6224": 531, "4271": 531, "577": 531, "722": 531, "5871": 531, "9359": 531, "6123": 531, "4227": 531, "5738": 531, "7203": 531, "5823": 531, "9917": 531, "3377": 531, "615": 531, "4259": 531, "5714": 531, "7247": 531, "9951": 531, "2083": 531, "6154": 531, "4208": 531, "5777": 531, "7198": 531, "5834": 531, "9937": 531, "3121": 531, "20b": 531, "7233": 531, "5359": 531, "7753": 531, "195": 531, "7186": 531, "5328": 531, "7699": 531, "6687": 531, "9922": 531, "3463": 531, "7268": 531, "533": 531, "659": 531, "6726": 531, "2897": 531, "5718": 531, "6859": 531, "7927": 531, "6890": 531, "9324": 531, "7006": 531, "5655": 531, "6803": 531, "7965": 531, "6857": 531, "1515": 531, "5752": 531, "6748": 531, "7845": 531, "6724": 531, "5951": 531, "6472": 531, "5716": 531, "6685": 531, "784": 531, "6678": 531, "8539": 531, "6918": 531, "5819": 531, "678": 531, "6861": 531, "8863": 531, "5765": 531, "6827": 531, "7873": 531, "6832": 531, "9958": 531, "1451": 531, "storywrit": 531, "693": 531, "5477": 531, "663": 531, "6719": 531, "9125": 531, "6661": 531, "7813": 531, "6693": 531, "9961": 531, "1137": 531, "rw": 531, "6604": 531, "5419": 531, "6598": 531, "6594": 531, "7616": 531, "6484": 531, "5369": 531, "7807": 531, "6559": 531, "9947": 531, "9411": 531, "6571": 531, "5398": 531, "6582": 531, "6579": 531, "8809": 531, "652": 531, "535": 531, "7682": 531, "6532": 531, "9906": 531, "0048": 531, "5177": 531, "6669": 531, "7824": 531, "5053": 531, "6301": 531, "5142": 531, "6654": 531, "6483": 531, "9933": 531, "8146": 531, "517": 531, "9941": 531, "1566": 531, "724": 531, "1567": 531, "716": 531, "1414": 531, "718": 531, "97x": 531, "1459": 531, "721": 531, "02x": 531, "1582": 531, "752": 531, "7139": 531, "4289": 531, "66x": 531, "4080": 531, "7236": 531, "4299": 531, "6842": 531, "4496": 531, "52x": 531, "591": 531, "178": 531, "183": 531, "590": 531, "179": 531, "42x": 531, "5703": 531, "2578": 531, "5610": 531, "2603": 531, "shufflenet": 531, "6689": 531, "3690": 531, "5692": 531, "3758": 531, "51x": 531, "googlenet": 531, "1792": 531, "1111": 531, "1821": 531, "1104": 531, "squeezenet": 531, "9472": 531, "5582": 531, "9861": 531, "5566": 531, "77x": 531, "caffenet": 531, "3348": 531, "1141": 531, "3509": 531, "1142": 531, "2426": 531, "987": 531, "2208": 531, "1016": 531, "zfnet": 531, "930": 531, "532": 531, "919": 531, "417": 531, "1880": 531, "1159": 531, "62x": 531, "1798": 531, "1151": 531, "2890": 531, "1380": 531, "2548": 531, "1362": 531, "507": 531, "94x": 531, "1286": 531, "904": 531, "1121": 531, "856": 531, "829": 531, "1044": 531, "790": 531, "849": 531, "627": 531, "79x": 531, "yolov4": 531, "duc": 531, "tini": 531, "1119": 531, "ultra": 531, "8537": 531, "1934": 531, "emot": 531, "ferplu": 531, "3568": 531, "arcfac": 531, "494": 531, "244": 531, "226": 531, "392": 531, "223": 531, "integerop": 531, "473": 531, "548": 531, "964": 531, "540": 531, "394": 531, "602": 531, "487": 531, "222": 531, "20x": 531, "189": 531, "146": 531, "125": 531, "bidaf": 531, "2757": 531, "2277": 531, "gpt2": 531, "360": 531, "213": 531, "490": 531, "304": 531, "214": 531, "347": 531, "272": 531, "216": 531, "26x": 531, "489": 531, "27x": 531, "l12": 531, "h384": 531, "1054": 531, "585": 531, "1072": 531, "890": 531, "746": 531, "268": 531, "211": 531, "l6": 531, "1958": 531, "1130": 531, "73x": 531, "electra": 531, "discrimin": 531, "1797": 531, "1077": 531, "67x": 531, "1930": 531, "1139": 531, "mini": 531, "5510": 531, "3334": 531, "5627": 531, "3365": 531, "108": 531, "110": 531, "bart": 531, "15x": 531, "deberta": 531, "168": 531, "145": 531, "spanbert": 531, "63x": 531, "multilingu": 531, "113": 531, "159": 531, "40x": 531, "distilgpt2": 531, "layoutlm": 531, "layoutlmv2": 531, "codebert": 531, "47x": 531, "fcn": 531, "perplex": 531, "2788": 531, "7002": 531, "4124": 531, "9921": 531, "3950": 531, "5711": 531, "9892": 531, "9163": 531, "7240": 531, "9902": 531, "0438": 531, "7634": 531, "1186": 531, "9944": 531, "1276": 531, "70b": 531, "7543": 531, "6181": 531, "rtnw4g32asym": 531, "6496": 531, "9967": 531, "7964": 531, "6612": 531, "rtnw4g32sym": 531, "7941": 531, "7243": 531, "9971": 531, "taskdataset": 531, "accuracyspars": 531, "ratiospars": 531, "commentsbalancedor": 531, "unbalanc": 531, "answeringsquad": 531, "87f1": 531, "momentumunbalanc": 531, "momentumbalanc": 531, "90f1": 531, "59f1": 531, "23f1": 531, "classificationmrpc": 531, "52f1": 531, "26f1": 531, "classificationsst": 531, "61accuraci": 531, "recognitionimagenet": 531, "95top1": 531, "v5s6": 531, "detectioncoco": 531, "ap0": 531, "6ap0": 531, "393": 531, "584": 531, "34f1": 531, "lassounbalanc": 531, "classificationmnli": 531, "mm": 531, "allbalanc": 531, "32accuraci": 531, "sensitivitybalanc": 531, "classificationqqp": 531, "classificationqnli": 531, "54accuraci": 531, "em": 531, "mobilenetv2": 531, "wideresnet40": 531, "9522": 531, "8178": 531, "0213": 531, "8235": 531, "027": 531, "5494": 531, "7153": 531, "5540": 531, "0046": 531, "5523": 531, "vgg": 531, "bn": 531, "7022": 531, "7415": 531, "7025": 531, "0003": 531, "6739": 531, "7399": 531, "6845": 531, "0106": 531, "blendcnn": 531, "7034": 531, "8382": 531, "bilstm": 531, "8314": 531, "9403": 531, "9048": 531, "0734": 531, "7323": 531, "8256": 531, "8084": 531, "8814": 531, "7442": 531, "8371": 531, "0119": 531, "0115": 531, "tinybert": 531, "8018": 531, "8044": 531, "8363": 531, "8411": 531, "8025": 531, "8074": 531, "0007": 531, "0030": 531, "8626": 531, "9091": 531, "8782": 531, "8684": 531, "8259": 531, "0058": 531, "distilroberta": 531, "6057": 531, "6187": 531, "0130": 531, "c6i": 531, "2xlarg": 531, "c6a": 531, "c6g": 531, "a100cuda": 531, "executionprovid": 531}, "objects": {"": [[0, 0, 0, "-", "block_mask"], [349, 0, 0, "-", "neural_compressor"]], "neural_compressor": [[2, 0, 0, "-", "adaptor"], [169, 0, 0, "-", "algorithm"], [172, 0, 0, "-", "benchmark"], [174, 0, 0, "-", "common"], [186, 0, 0, "-", "compression"], [214, 0, 0, "-", "conf"], [216, 0, 0, "-", "config"], [217, 0, 0, "-", "contrib"], [242, 0, 0, "-", "data"], [296, 0, 0, "-", "experimental"], [356, 0, 0, "-", "metric"], [358, 0, 0, "-", "mix_precision"], [360, 0, 0, "-", "model"], [368, 0, 0, "-", "objective"], [369, 0, 0, "-", "profiling"], [391, 0, 0, "-", "quantization"], [399, 0, 0, "-", "strategy"], [411, 0, 0, "-", "template"], [416, 0, 0, "-", "torch"], [421, 0, 0, "-", "training"], [425, 0, 0, "-", "utils"], [434, 0, 0, "-", "version"]], "neural_compressor.adaptor": [[1, 0, 0, "-", "adaptor"], [3, 0, 0, "-", "keras"], [7, 0, 0, "-", "keras_utils"], [11, 0, 0, "-", "mxnet"], [12, 0, 0, "-", "mxnet_utils"], [14, 0, 0, "-", "onnxrt"], [17, 0, 0, "-", "ox_utils"], [45, 0, 0, "-", "pytorch"], [46, 0, 0, "-", "query"], [47, 0, 0, "-", "tensorflow"], [111, 0, 0, "-", "tf_utils"], [153, 0, 0, "-", "torch_utils"]], "neural_compressor.adaptor.adaptor": [[1, 1, 1, "", "Adaptor"], [1, 2, 1, "", "adaptor_registry"]], "neural_compressor.adaptor.keras": [[3, 1, 1, "", "KerasAdaptor"], [3, 1, 1, "", "KerasQuery"]], "neural_compressor.adaptor.keras_utils": [[4, 0, 0, "-", "conv2d"], [5, 0, 0, "-", "dense"], [6, 0, 0, "-", "depthwise_conv2d"], [8, 0, 0, "-", "pool2d"], [9, 0, 0, "-", "quantizer"], [10, 0, 0, "-", "separable_conv2d"]], "neural_compressor.adaptor.mxnet": [[11, 1, 1, "", "MXNetQuery"], [11, 1, 1, "", "MxNetAdaptor"]], "neural_compressor.adaptor.mxnet_utils": [[13, 0, 0, "-", "util"]], "neural_compressor.adaptor.mxnet_utils.util": [[13, 1, 1, "", "CalibCollector"], [13, 1, 1, "", "CalibData"], [13, 1, 1, "", "CollectorBase"], [13, 1, 1, "", "DataIterLoader"], [13, 1, 1, "", "DataLoaderWrap"], [13, 1, 1, "", "NameCollector"], [13, 1, 1, "", "OpType"], [13, 1, 1, "", "TensorCollector"], [13, 2, 1, "", "amp_convert"], [13, 2, 1, "", "calib_model"], [13, 2, 1, "", "check_mx_version"], [13, 2, 1, "", "combine_capabilities"], [13, 2, 1, "", "create_data_example"], [13, 2, 1, "", "distribute_calib_tensors"], [13, 2, 1, "", "ensure_list"], [13, 2, 1, "", "fuse"], [13, 2, 1, "", "get_framework_name"], [13, 2, 1, "", "is_model_quantized"], [13, 2, 1, "", "isiterable"], [13, 2, 1, "", "make_module"], [13, 2, 1, "", "make_nc_model"], [13, 2, 1, "", "make_symbol_block"], [13, 2, 1, "", "ndarray_to_device"], [13, 2, 1, "", "parse_tune_config"], [13, 2, 1, "", "prepare_dataloader"], [13, 2, 1, "", "prepare_model"], [13, 2, 1, "", "prepare_model_data"], [13, 2, 1, "", "quantize_sym_model"], [13, 2, 1, "", "query_quantizable_nodes"], [13, 2, 1, "", "run_forward"]], "neural_compressor.adaptor.onnxrt": [[14, 1, 1, "", "ONNXRTQuery"], [14, 1, 1, "", "ONNXRT_IntegerOpsAdaptor"], [14, 1, 1, "", "ONNXRT_QDQAdaptor"], [14, 1, 1, "", "ONNXRT_QLinearOpsAdaptor"], [14, 1, 1, "", "ONNXRT_WeightOnlyAdaptor"], [14, 1, 1, "", "ONNXRUNTIMEAdaptor"]], "neural_compressor.adaptor.ox_utils": [[15, 0, 0, "-", "calibration"], [16, 0, 0, "-", "calibrator"], [29, 0, 0, "-", "operators"], [41, 0, 0, "-", "quantizer"], [42, 0, 0, "-", "smooth_quant"], [43, 0, 0, "-", "util"], [44, 0, 0, "-", "weight_only"]], "neural_compressor.adaptor.ox_utils.calibration": [[15, 1, 1, "", "ONNXRTAugment"]], "neural_compressor.adaptor.ox_utils.calibrator": [[16, 1, 1, "", "CalibratorBase"], [16, 1, 1, "", "HistogramCollector"], [16, 1, 1, "", "KLCalibrator"], [16, 1, 1, "", "MinMaxCalibrator"], [16, 1, 1, "", "PercentileCalibrator"], [16, 2, 1, "", "calib_registry"], [16, 2, 1, "", "smooth_distribution"]], "neural_compressor.adaptor.ox_utils.operators": [[18, 0, 0, "-", "activation"], [19, 0, 0, "-", "argmax"], [20, 0, 0, "-", "attention"], [21, 0, 0, "-", "binary_op"], [22, 0, 0, "-", "concat"], [23, 0, 0, "-", "conv"], [24, 0, 0, "-", "direct_q8"], [25, 0, 0, "-", "embed_layernorm"], [26, 0, 0, "-", "gather"], [27, 0, 0, "-", "gavgpool"], [28, 0, 0, "-", "gemm"], [30, 0, 0, "-", "lstm"], [31, 0, 0, "-", "matmul"], [32, 0, 0, "-", "maxpool"], [33, 0, 0, "-", "norm"], [34, 0, 0, "-", "ops"], [35, 0, 0, "-", "pad"], [36, 0, 0, "-", "pooling"], [37, 0, 0, "-", "reduce"], [38, 0, 0, "-", "resize"], [39, 0, 0, "-", "split"], [40, 0, 0, "-", "unary_op"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[18, 1, 1, "", "ActivationOperator"], [18, 1, 1, "", "Float16ActivationOperator"], [18, 1, 1, "", "QActivationOperator"], [18, 1, 1, "", "RemovableActivationOperator"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[19, 1, 1, "", "ArgMaxOperator"], [19, 1, 1, "", "QArgMaxOperator"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[20, 1, 1, "", "AttentionOperator"], [20, 1, 1, "", "QAttentionOperator"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[21, 1, 1, "", "BinaryDirect8BitOperator"], [21, 1, 1, "", "BinaryOperator"], [21, 1, 1, "", "Float16BinaryOperator"], [21, 1, 1, "", "QBinaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[22, 1, 1, "", "ConcatOperator"], [22, 1, 1, "", "QConcatOperator"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[23, 1, 1, "", "ConvOperator"], [23, 1, 1, "", "QConvOperator"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[24, 1, 1, "", "Direct8BitOperator"], [24, 1, 1, "", "QDirectOperator"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[25, 1, 1, "", "EmbedLayerNormalizationOperator"], [25, 1, 1, "", "QEmbedLayerNormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[26, 1, 1, "", "GatherOperator"], [26, 1, 1, "", "QGatherOperator"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[27, 1, 1, "", "GlobalAveragePoolOperator"], [27, 1, 1, "", "QGlobalAveragePoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[28, 1, 1, "", "GemmOperator"], [28, 1, 1, "", "QGemmOperator"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[30, 1, 1, "", "LSTMOperator"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[31, 1, 1, "", "FusedMatMulOperator"], [31, 1, 1, "", "MatMulOperator"], [31, 1, 1, "", "QMatMulOperator"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[32, 1, 1, "", "MaxPoolOperator"], [32, 1, 1, "", "QMaxPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.norm": [[33, 1, 1, "", "BatchNormalizationOperator"], [33, 1, 1, "", "NormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[34, 1, 1, "", "Operator"], [34, 1, 1, "", "QOperator"], [34, 2, 1, "", "op_registry"], [34, 2, 1, "", "qop_registry"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[35, 1, 1, "", "PadOperator"], [35, 1, 1, "", "QPadOperator"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[36, 1, 1, "", "PoolOperator"], [36, 1, 1, "", "QPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.reduce": [[37, 1, 1, "", "ReduceMinMaxOperator"], [37, 1, 1, "", "ReduceOperator"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[38, 1, 1, "", "QResizeOperator"], [38, 1, 1, "", "ResizeOperator"]], "neural_compressor.adaptor.ox_utils.operators.split": [[39, 1, 1, "", "QSplitOperator"], [39, 1, 1, "", "SplitOperator"]], "neural_compressor.adaptor.ox_utils.operators.unary_op": [[40, 1, 1, "", "UnaryDirect8BitOperator"], [40, 1, 1, "", "UnaryOperator"]], "neural_compressor.adaptor.ox_utils.quantizer": [[41, 1, 1, "", "Quantizer"]], "neural_compressor.adaptor.ox_utils.smooth_quant": [[42, 1, 1, "", "ORTSmoothQuant"], [42, 2, 1, "", "get_quant_dequant_output"], [42, 2, 1, "", "make_sub_graph"], [42, 2, 1, "", "quant_dequant_data"]], "neural_compressor.adaptor.ox_utils.util": [[43, 1, 1, "", "QuantFormat"], [43, 1, 1, "", "QuantType"], [43, 1, 1, "", "QuantizationMode"], [43, 1, 1, "", "QuantizedInitializer"], [43, 1, 1, "", "QuantizedValue"], [43, 1, 1, "", "QuantizedValueType"], [43, 1, 1, "", "ValueInfo"], [43, 2, 1, "", "attribute_to_kwarg"], [43, 2, 1, "", "calculate_scale_zp"], [43, 2, 1, "", "cast_tensor"], [43, 2, 1, "", "collate_preds"], [43, 2, 1, "", "dequantize_data"], [43, 2, 1, "", "dequantize_data_with_scale_zero"], [43, 2, 1, "", "dtype_to_name"], [43, 2, 1, "", "find_by_name"], [43, 2, 1, "", "float_to_bfloat16"], [43, 2, 1, "", "float_to_float16"], [43, 2, 1, "", "is_B_transposed"], [43, 2, 1, "", "make_dquant_node"], [43, 2, 1, "", "make_quant_node"], [43, 2, 1, "", "quantize_data"], [43, 2, 1, "", "quantize_data_per_channel"], [43, 2, 1, "", "quantize_data_with_scale_zero"], [43, 2, 1, "", "quantize_nparray"], [43, 2, 1, "", "remove_init_from_model_input"], [43, 2, 1, "", "split_shared_bias"], [43, 2, 1, "", "to_numpy"], [43, 2, 1, "", "trt_env_setup"]], "neural_compressor.adaptor.ox_utils.weight_only": [[44, 2, 1, "", "apply_awq_clip"], [44, 2, 1, "", "apply_awq_scale"], [44, 2, 1, "", "awq_quantize"], [44, 2, 1, "", "get_blob_size"], [44, 2, 1, "", "get_weight_scale"], [44, 2, 1, "", "gptq"], [44, 2, 1, "", "gptq_quantize"], [44, 2, 1, "", "make_matmul_weight_only_node"], [44, 2, 1, "", "pad_tensor"], [44, 2, 1, "", "prepare_inputs"], [44, 2, 1, "", "qdq_tensor"], [44, 2, 1, "", "quant_tensor"], [44, 2, 1, "", "rtn_quantize"]], "neural_compressor.adaptor.pytorch": [[45, 1, 1, "", "PyTorchAdaptor"], [45, 1, 1, "", "PyTorchWeightOnlyAdaptor"], [45, 1, 1, "", "PyTorch_FXAdaptor"], [45, 1, 1, "", "PyTorch_IPEXAdaptor"], [45, 1, 1, "", "TemplateAdaptor"], [45, 2, 1, "", "get_ops_recursively"]], "neural_compressor.adaptor.query": [[46, 1, 1, "", "QueryBackendCapability"]], "neural_compressor.adaptor.tensorflow": [[47, 1, 1, "", "TensorFlowAdaptor"], [47, 1, 1, "", "TensorflowQuery"], [47, 1, 1, "", "Tensorflow_ITEXAdaptor"]], "neural_compressor.adaptor.tf_utils": [[48, 0, 0, "-", "graph_converter"], [49, 0, 0, "-", "graph_converter_without_calib"], [87, 0, 0, "-", "graph_rewriter"], [110, 0, 0, "-", "graph_util"], [112, 0, 0, "-", "quantize_graph"], [139, 0, 0, "-", "quantize_graph_common"], [140, 0, 0, "-", "smooth_quant_calibration"], [141, 0, 0, "-", "smooth_quant_scaler"], [142, 0, 0, "-", "tf2onnx_converter"], [145, 0, 0, "-", "transform_graph"], [148, 0, 0, "-", "util"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[48, 1, 1, "", "GraphConverter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[49, 1, 1, "", "GraphConverterWithoutCalib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[51, 0, 0, "-", "bf16"], [76, 0, 0, "-", "generic"], [86, 0, 0, "-", "graph_base"], [95, 0, 0, "-", "int8"], [101, 0, 0, "-", "onnx"], [106, 0, 0, "-", "qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[50, 0, 0, "-", "bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[50, 1, 1, "", "BF16Convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[52, 0, 0, "-", "convert_add_to_biasadd"], [53, 0, 0, "-", "convert_layout"], [54, 0, 0, "-", "convert_leakyrelu"], [55, 0, 0, "-", "convert_nan_to_random"], [56, 0, 0, "-", "convert_placeholder_to_const"], [57, 0, 0, "-", "dequantize_cast_optimizer"], [58, 0, 0, "-", "dilated_contraction"], [59, 0, 0, "-", "dummy_biasadd"], [60, 0, 0, "-", "expanddims_optimizer"], [61, 0, 0, "-", "fetch_weight_from_reshape"], [62, 0, 0, "-", "fold_batch_norm"], [63, 0, 0, "-", "fold_constant"], [64, 0, 0, "-", "fuse_biasadd_add"], [65, 0, 0, "-", "fuse_column_wise_mul"], [66, 0, 0, "-", "fuse_conv_with_math"], [67, 0, 0, "-", "fuse_decomposed_bn"], [68, 0, 0, "-", "fuse_decomposed_in"], [69, 0, 0, "-", "fuse_gelu"], [70, 0, 0, "-", "fuse_layer_norm"], [71, 0, 0, "-", "fuse_pad_with_conv"], [72, 0, 0, "-", "fuse_pad_with_fp32_conv"], [73, 0, 0, "-", "fuse_reshape_transpose"], [74, 0, 0, "-", "graph_cse_optimizer"], [75, 0, 0, "-", "grappler_pass"], [77, 0, 0, "-", "insert_print_node"], [78, 0, 0, "-", "move_squeeze_after_relu"], [79, 0, 0, "-", "pre_optimize"], [80, 0, 0, "-", "remove_training_nodes"], [81, 0, 0, "-", "rename_batch_norm"], [82, 0, 0, "-", "split_shared_input"], [83, 0, 0, "-", "strip_equivalent_nodes"], [84, 0, 0, "-", "strip_unused_nodes"], [85, 0, 0, "-", "switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[52, 1, 1, "", "ConvertAddToBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[53, 1, 1, "", "ConvertLayoutOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[54, 1, 1, "", "ConvertLeakyReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[55, 1, 1, "", "ConvertNanToRandom"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[56, 1, 1, "", "ConvertPlaceholderToConst"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[57, 1, 1, "", "DequantizeCastOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[58, 1, 1, "", "DilatedContraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[59, 1, 1, "", "InjectDummyBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[60, 1, 1, "", "ExpandDimsOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[61, 1, 1, "", "FetchWeightFromReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[62, 1, 1, "", "FoldBatchNormNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[63, 1, 1, "", "GraphFoldConstantOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[64, 1, 1, "", "FuseBiasAddAndAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[65, 1, 1, "", "FuseColumnWiseMulOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[66, 1, 1, "", "FuseConvWithMathOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[67, 1, 1, "", "FuseDecomposedBNOptimizer"], [67, 2, 1, "", "bypass_reshape"], [67, 2, 1, "", "get_const_dim_count"], [67, 2, 1, "", "node_from_map"], [67, 2, 1, "", "node_name_from_input"], [67, 2, 1, "", "valid_reshape_inputs"], [67, 2, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[68, 1, 1, "", "FuseDecomposedINOptimizer"], [68, 2, 1, "", "bypass_reshape"], [68, 2, 1, "", "get_const_dim_count"], [68, 2, 1, "", "node_from_map"], [68, 2, 1, "", "node_name_from_input"], [68, 2, 1, "", "valid_reshape_inputs"], [68, 2, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[69, 1, 1, "", "FuseGeluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[70, 1, 1, "", "FuseLayerNormOptimizer"], [70, 2, 1, "", "node_from_map"], [70, 2, 1, "", "node_name_from_input"], [70, 2, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[71, 1, 1, "", "FusePadWithConv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[72, 1, 1, "", "FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[73, 1, 1, "", "FuseTransposeReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[74, 1, 1, "", "GraphCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[75, 1, 1, "", "GrapplerOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[77, 1, 1, "", "InsertPrintMinMaxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[78, 1, 1, "", "MoveSqueezeAfterReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[79, 1, 1, "", "PreOptimization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[80, 1, 1, "", "RemoveTrainingNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[81, 1, 1, "", "RenameBatchNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[82, 1, 1, "", "SplitSharedInputOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[83, 1, 1, "", "StripEquivalentNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[84, 1, 1, "", "StripUnusedNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[85, 1, 1, "", "SwitchOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[86, 1, 1, "", "GraphRewriterBase"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[88, 0, 0, "-", "freeze_fake_quant"], [89, 0, 0, "-", "freeze_value"], [90, 0, 0, "-", "freeze_value_without_calib"], [91, 0, 0, "-", "fuse_conv_redundant_dequantize"], [92, 0, 0, "-", "fuse_conv_requantize"], [93, 0, 0, "-", "fuse_matmul_redundant_dequantize"], [94, 0, 0, "-", "fuse_matmul_requantize"], [96, 0, 0, "-", "meta_op_optimizer"], [97, 0, 0, "-", "post_hostconst_converter"], [98, 0, 0, "-", "post_quantized_op_cse"], [99, 0, 0, "-", "rnn_convert"], [100, 0, 0, "-", "scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[88, 1, 1, "", "FreezeFakeQuantOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[89, 1, 1, "", "FreezeValueTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[90, 1, 1, "", "FreezeValueWithoutCalibTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[91, 1, 1, "", "FuseConvRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[92, 1, 1, "", "FuseConvRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[93, 1, 1, "", "FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[94, 1, 1, "", "FuseMatMulRequantizeDequantizeNewAPITransformer"], [94, 1, 1, "", "FuseMatMulRequantizeDequantizeTransformer"], [94, 1, 1, "", "FuseMatMulRequantizeNewAPITransformer"], [94, 1, 1, "", "FuseMatMulRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[96, 1, 1, "", "MetaInfoChangingMemOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[97, 1, 1, "", "PostHostConstConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[98, 1, 1, "", "PostCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[99, 1, 1, "", "QuantizedRNNConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[100, 1, 1, "", "ScaleProPagationTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[102, 0, 0, "-", "onnx_graph"], [103, 0, 0, "-", "onnx_node"], [104, 0, 0, "-", "onnx_schema"], [105, 0, 0, "-", "tf2onnx_utils"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[102, 1, 1, "", "OnnxGraph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[103, 1, 1, "", "OnnxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[104, 1, 1, "", "OnnxOpSchema"], [104, 2, 1, "", "get_max_supported_opset_version"], [104, 2, 1, "", "get_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[105, 1, 1, "", "SeqType"], [105, 2, 1, "", "add_port_to_name"], [105, 2, 1, "", "are_shapes_equal"], [105, 2, 1, "", "assert_error"], [105, 2, 1, "", "compute_const_folding_using_tf"], [105, 2, 1, "", "convert_tensorflow_tensor_to_onnx"], [105, 2, 1, "", "find_opset"], [105, 2, 1, "", "get_index_from_strided_slice_of_shape"], [105, 2, 1, "", "get_subgraphs_from_onnx"], [105, 2, 1, "", "get_tensorflow_node_attr"], [105, 2, 1, "", "get_tensorflow_node_shape_attr"], [105, 2, 1, "", "get_tensorflow_tensor_data"], [105, 2, 1, "", "get_tensorflow_tensor_shape"], [105, 2, 1, "", "infer_onnx_shape_dtype"], [105, 2, 1, "", "initialize_name_counter"], [105, 2, 1, "", "is_list_or_tuple"], [105, 2, 1, "", "is_onnx_domain"], [105, 2, 1, "", "make_onnx_inputs_outputs"], [105, 2, 1, "", "make_onnx_shape"], [105, 2, 1, "", "map_numpy_to_onnx_dtype"], [105, 2, 1, "", "map_onnx_to_numpy_type"], [105, 2, 1, "", "map_tensorflow_dtype"], [105, 2, 1, "", "read_tensorflow_node_attrs"], [105, 2, 1, "", "save_protobuf"], [105, 2, 1, "", "set_name"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[107, 0, 0, "-", "insert_qdq_pattern"], [108, 0, 0, "-", "merge_duplicated_qdq"], [109, 0, 0, "-", "share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[107, 1, 1, "", "GenerateGraphWithQDQPattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[108, 1, 1, "", "MergeDuplicatedQDQOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[109, 1, 1, "", "ShareQDQForItexYPatternOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_util": [[110, 1, 1, "", "GraphAnalyzer"], [110, 1, 1, "", "GraphRewriterHelper"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[114, 0, 0, "-", "qat"], [130, 0, 0, "-", "qdq"], [132, 0, 0, "-", "quantize_graph_base"], [133, 0, 0, "-", "quantize_graph_bn"], [134, 0, 0, "-", "quantize_graph_concatv2"], [135, 0, 0, "-", "quantize_graph_conv"], [136, 0, 0, "-", "quantize_graph_for_intel_cpu"], [137, 0, 0, "-", "quantize_graph_matmul"], [138, 0, 0, "-", "quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[113, 0, 0, "-", "fake_quantize"], [115, 0, 0, "-", "quantize_config"], [116, 0, 0, "-", "quantize_helper"], [117, 0, 0, "-", "quantize_layers"], [122, 0, 0, "-", "quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[113, 1, 1, "", "FakeQuantize"], [113, 1, 1, "", "FakeQuantizeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[115, 1, 1, "", "QuantizeConfig"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[116, 2, 1, "", "init_quantize_config"], [116, 2, 1, "", "qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[118, 0, 0, "-", "optimize_layer"], [119, 0, 0, "-", "quantize_layer_add"], [120, 0, 0, "-", "quantize_layer_base"], [121, 0, 0, "-", "quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[118, 2, 1, "", "config_quantizable_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[119, 1, 1, "", "QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[120, 1, 1, "", "QuantizeLayerBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[121, 1, 1, "", "QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[122, 1, 1, "", "QuantizeWrapper"], [122, 1, 1, "", "QuantizeWrapperBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[123, 0, 0, "-", "fuse_qdq_bn"], [124, 0, 0, "-", "fuse_qdq_concatv2"], [125, 0, 0, "-", "fuse_qdq_conv"], [126, 0, 0, "-", "fuse_qdq_deconv"], [127, 0, 0, "-", "fuse_qdq_in"], [128, 0, 0, "-", "fuse_qdq_matmul"], [129, 0, 0, "-", "fuse_qdq_pooling"], [131, 0, 0, "-", "optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[123, 1, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[124, 1, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[125, 1, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[126, 1, 1, "", "FuseNodeStartWithDeconv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[127, 1, 1, "", "FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[128, 1, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[129, 1, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[131, 1, 1, "", "OptimizeQDQGraph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[132, 1, 1, "", "QuantizeGraphBase"], [132, 1, 1, "", "QuantizeNodeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[133, 1, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[134, 1, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[135, 1, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[136, 1, 1, "", "QuantizeGraphForIntel"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[137, 1, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[138, 1, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[139, 1, 1, "", "QuantizeGraphHelper"]], "neural_compressor.adaptor.tf_utils.smooth_quant_calibration": [[140, 1, 1, "", "SmoothQuantCalibration"], [140, 1, 1, "", "SmoothQuantCalibrationLLM"]], "neural_compressor.adaptor.tf_utils.smooth_quant_scaler": [[141, 1, 1, "", "SmoothQuantScaler"], [141, 1, 1, "", "SmoothQuantScalerLLM"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[142, 1, 1, "", "TensorflowQDQToOnnxQDQConverter"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[143, 0, 0, "-", "bias_correction"], [144, 0, 0, "-", "graph_transform_base"], [146, 0, 0, "-", "insert_logging"], [147, 0, 0, "-", "rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[143, 1, 1, "", "BiasCorrection"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[144, 1, 1, "", "GraphTransformBase"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[146, 1, 1, "", "InsertLogging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[147, 1, 1, "", "RerangeQuantizedConcat"]], "neural_compressor.adaptor.tf_utils.util": [[148, 2, 1, "", "apply_inlining"], [148, 2, 1, "", "collate_tf_preds"], [148, 2, 1, "", "construct_function_from_graph_def"], [148, 2, 1, "", "disable_random"], [148, 2, 1, "", "fix_ref_type_of_graph_def"], [148, 2, 1, "", "generate_feed_dict"], [148, 2, 1, "", "get_estimator_graph"], [148, 2, 1, "", "get_graph_def"], [148, 2, 1, "", "get_input_output_node_names"], [148, 2, 1, "", "get_model_input_shape"], [148, 2, 1, "", "get_tensor_by_name"], [148, 2, 1, "", "get_tensor_val_from_graph_node"], [148, 2, 1, "", "get_weight_from_input_tensor"], [148, 2, 1, "", "int8_node_name_reverse"], [148, 2, 1, "", "is_ckpt_format"], [148, 2, 1, "", "is_saved_model_format"], [148, 2, 1, "", "iterator_sess_run"], [148, 2, 1, "", "parse_saved_model"], [148, 2, 1, "", "read_graph"], [148, 2, 1, "", "reconstruct_saved_model"], [148, 2, 1, "", "strip_equivalent_nodes"], [148, 2, 1, "", "strip_unused_nodes"], [148, 2, 1, "", "tf_diagnosis_helper"], [148, 2, 1, "", "version1_eq_version2"], [148, 2, 1, "", "version1_gt_version2"], [148, 2, 1, "", "version1_gte_version2"], [148, 2, 1, "", "version1_lt_version2"], [148, 2, 1, "", "version1_lte_version2"], [148, 2, 1, "", "write_graph"]], "neural_compressor.adaptor.torch_utils": [[149, 0, 0, "-", "awq"], [150, 0, 0, "-", "bf16_convert"], [151, 0, 0, "-", "gptq"], [152, 0, 0, "-", "hawq_metric"], [154, 0, 0, "-", "layer_wise_quant"], [159, 0, 0, "-", "mixed_precision"], [160, 0, 0, "-", "model_wrapper"], [161, 0, 0, "-", "pattern_detector"], [162, 0, 0, "-", "smooth_quant"], [163, 0, 0, "-", "symbolic_trace"], [164, 0, 0, "-", "teq"], [165, 0, 0, "-", "util"], [166, 0, 0, "-", "weight_only"]], "neural_compressor.adaptor.torch_utils.awq": [[149, 1, 1, "", "ActAwareWeightQuant"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[150, 1, 1, "", "BF16ModuleWrapper"], [150, 2, 1, "", "Convert"], [150, 2, 1, "", "bf16_symbolic_trace"]], "neural_compressor.adaptor.torch_utils.gptq": [[151, 1, 1, "", "GPTQ"], [151, 1, 1, "", "GPTQuantizer"], [151, 2, 1, "", "find_layers"], [151, 2, 1, "", "find_layers_name"], [151, 2, 1, "", "is_leaf"], [151, 2, 1, "", "log_quantizable_layers_per_transformer"], [151, 2, 1, "", "quantize"], [151, 2, 1, "", "trace_gptq_target_blocks"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[152, 1, 1, "", "HessianTrace"], [152, 1, 1, "", "Node_collector"], [152, 2, 1, "", "compare_weights"], [152, 2, 1, "", "hawq_top"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant": [[155, 0, 0, "-", "modified_pickle"], [156, 0, 0, "-", "quantize"], [157, 0, 0, "-", "torch_load"], [158, 0, 0, "-", "utils"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle": [[155, 3, 1, "", "PickleError"], [155, 3, 1, "", "PicklingError"], [155, 3, 1, "", "UnpicklingError"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize": [[156, 1, 1, "", "LayerWiseQuant"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load": [[157, 2, 1, "", "load"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils": [[158, 2, 1, "", "dowload_hf_model"], [158, 2, 1, "", "get_children"], [158, 2, 1, "", "get_module"], [158, 2, 1, "", "get_named_children"], [158, 2, 1, "", "get_super_module_by_name"], [158, 2, 1, "", "load_empty_model"], [158, 2, 1, "", "load_layer_wise_quantized_model"], [158, 2, 1, "", "load_tensor"], [158, 2, 1, "", "load_tensor_from_shard"], [158, 2, 1, "", "update_module"]], "neural_compressor.adaptor.torch_utils.mixed_precision": [[159, 2, 1, "", "ipex_mixed_precision"]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[160, 1, 1, "", "FakeAffineTensorQuantFunction"], [160, 1, 1, "", "MulLinear"], [160, 1, 1, "", "TEQLinearFakeQuant"]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[161, 1, 1, "", "TransformerBasedModelBlockPatternDetector"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[162, 1, 1, "", "TorchSmoothQuant"], [162, 2, 1, "", "get_module"], [162, 2, 1, "", "set_module"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[163, 2, 1, "", "symbolic_trace"], [163, 2, 1, "", "trace_and_fuse_sub_graph"]], "neural_compressor.adaptor.torch_utils.teq": [[164, 1, 1, "", "TEQuantizer"]], "neural_compressor.adaptor.torch_utils.util": [[165, 2, 1, "", "append_attr"], [165, 2, 1, "", "auto_copy"], [165, 2, 1, "", "calculate_quant_min_max"], [165, 2, 1, "", "calibration"], [165, 2, 1, "", "check_cfg_and_qconfig"], [165, 2, 1, "", "collate_torch_preds"], [165, 2, 1, "", "collect_weight_info"], [165, 2, 1, "", "fetch_module"], [165, 2, 1, "", "forward_wrapper"], [165, 2, 1, "", "generate_activation_observer"], [165, 2, 1, "", "get_absorb_layers"], [165, 2, 1, "", "get_block_prefix"], [165, 2, 1, "", "get_depth"], [165, 2, 1, "", "get_dict_at_depth"], [165, 2, 1, "", "get_element_under_depth"], [165, 2, 1, "", "get_embedding_contiguous"], [165, 2, 1, "", "get_example_input"], [165, 2, 1, "", "get_fallback_order"], [165, 2, 1, "", "get_hidden_states"], [165, 2, 1, "", "get_module_input_output"], [165, 2, 1, "", "get_mse_order_per_fp32"], [165, 2, 1, "", "get_mse_order_per_int8"], [165, 2, 1, "", "get_op_type_by_name"], [165, 2, 1, "", "get_quantizable_ops_from_cfgs"], [165, 2, 1, "", "get_torch_version"], [165, 2, 1, "", "input2tuple"], [165, 2, 1, "", "is_fused_module"], [165, 2, 1, "", "match_datatype_pattern"], [165, 2, 1, "", "move_input_device"], [165, 2, 1, "", "paser_cfgs"], [165, 2, 1, "", "set_module"], [165, 2, 1, "", "simple_inference"], [165, 2, 1, "", "update_sq_scale"]], "neural_compressor.adaptor.torch_utils.weight_only": [[166, 2, 1, "", "awq_quantize"], [166, 2, 1, "", "gptq_quantize"], [166, 2, 1, "", "qdq_weight_actor"], [166, 2, 1, "", "qdq_weight_asym"], [166, 2, 1, "", "qdq_weight_sym"], [166, 2, 1, "", "quant_weight"], [166, 2, 1, "", "quant_weight_w_scale"], [166, 2, 1, "", "quantize_4bit"], [166, 2, 1, "", "rtn_quantize"], [166, 2, 1, "", "search_clip"], [166, 2, 1, "", "teq_quantize"]], "neural_compressor.algorithm": [[167, 0, 0, "-", "algorithm"], [168, 0, 0, "-", "fast_bias_correction"], [170, 0, 0, "-", "smooth_quant"], [171, 0, 0, "-", "weight_correction"]], "neural_compressor.algorithm.algorithm": [[167, 1, 1, "", "ALGORITHMS"], [167, 1, 1, "", "Algorithm"], [167, 1, 1, "", "AlgorithmScheduler"], [167, 2, 1, "", "algorithm_registry"]], "neural_compressor.algorithm.fast_bias_correction": [[168, 1, 1, "", "FastBiasCorrection"]], "neural_compressor.algorithm.smooth_quant": [[170, 1, 1, "", "SmoothQuant"]], "neural_compressor.algorithm.weight_correction": [[171, 1, 1, "", "WeightCorrection"]], "neural_compressor.benchmark": [[172, 2, 1, "", "benchmark_with_raw_cmd"], [172, 2, 1, "", "call_one"], [172, 2, 1, "", "config_instance"], [172, 2, 1, "", "fit"], [172, 2, 1, "", "generate_prefix"], [172, 2, 1, "", "get_architecture"], [172, 2, 1, "", "get_bounded_threads"], [172, 2, 1, "", "get_core_ids"], [172, 2, 1, "", "get_physical_ids"], [172, 2, 1, "", "get_threads"], [172, 2, 1, "", "get_threads_per_core"], [172, 2, 1, "", "profile"], [172, 2, 1, "", "run_instance"], [172, 2, 1, "", "set_all_env_var"], [172, 2, 1, "", "set_env_var"], [172, 2, 1, "", "summary_benchmark"]], "neural_compressor.common": [[173, 0, 0, "-", "base_config"], [175, 0, 0, "-", "logger"], [176, 0, 0, "-", "utility"]], "neural_compressor.common.base_config": [[173, 1, 1, "", "BaseConfig"], [173, 1, 1, "", "ComposableConfig"], [173, 2, 1, "", "register_config"]], "neural_compressor.common.logger": [[175, 1, 1, "", "Logger"], [175, 2, 1, "", "debug"], [175, 2, 1, "", "error"], [175, 2, 1, "", "fatal"], [175, 2, 1, "", "info"], [175, 2, 1, "", "log"], [175, 2, 1, "", "warn"], [175, 2, 1, "", "warning"]], "neural_compressor.compression": [[177, 0, 0, "-", "callbacks"], [179, 0, 0, "-", "distillation"], [182, 0, 0, "-", "hpo"], [188, 0, 0, "-", "pruner"]], "neural_compressor.compression.callbacks": [[177, 1, 1, "", "BaseCallbacks"], [177, 1, 1, "", "DistillationCallbacks"], [177, 1, 1, "", "PruningCallbacks"], [177, 1, 1, "", "QuantizationAwareTrainingCallbacks"]], "neural_compressor.compression.callbacks.DistillationCallbacks": [[177, 4, 1, "", "_epoch_ran"], [177, 4, 1, "", "best_model"], [177, 4, 1, "", "best_score"], [177, 4, 1, "", "eval_frequency"]], "neural_compressor.compression.distillation": [[178, 0, 0, "-", "criterions"], [180, 0, 0, "-", "optimizers"], [181, 0, 0, "-", "utility"]], "neural_compressor.compression.distillation.criterions": [[178, 1, 1, "", "Criterions"], [178, 1, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [178, 1, 1, "", "KnowledgeDistillationFramework"], [178, 1, 1, "", "KnowledgeDistillationLoss"], [178, 1, 1, "", "PyTorchCriterions"], [178, 1, 1, "", "PyTorchCrossEntropyLoss"], [178, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [178, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [178, 1, 1, "", "PyTorchKnowledgeDistillationLoss"], [178, 1, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [178, 1, 1, "", "PyTorchSelfKnowledgeDistillationLoss"], [178, 1, 1, "", "PyTorchSelfKnowledgeDistillationLossWrapper"], [178, 1, 1, "", "SelfKnowledgeDistillationLoss"], [178, 1, 1, "", "TensorFlowCrossEntropyLoss"], [178, 1, 1, "", "TensorFlowSparseCategoricalCrossentropy"], [178, 1, 1, "", "TensorflowCriterions"], [178, 1, 1, "", "TensorflowKnowledgeDistillationLoss"], [178, 1, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [178, 1, 1, "", "TensorflowKnowledgeDistillationLossWrapper"], [178, 2, 1, "", "criterion_registry"]], "neural_compressor.compression.distillation.optimizers": [[180, 1, 1, "", "Optimizers"], [180, 1, 1, "", "PyTorchOptimizers"], [180, 1, 1, "", "PyTorchSGD"], [180, 1, 1, "", "TensorFlowAdam"], [180, 1, 1, "", "TensorFlowAdamW"], [180, 1, 1, "", "TensorFlowSGD"], [180, 1, 1, "", "TensorflowOptimizers"], [180, 2, 1, "", "optimizer_registry"]], "neural_compressor.compression.distillation.utility": [[181, 2, 1, "", "get_activation"], [181, 2, 1, "", "record_output"]], "neural_compressor.compression.hpo": [[183, 0, 0, "-", "sa_optimizer"], [184, 0, 0, "-", "search_algorithms"], [185, 0, 0, "-", "search_space"]], "neural_compressor.compression.hpo.search_algorithms": [[184, 1, 1, "", "BayesianOptimizationSearcher"], [184, 1, 1, "", "GridSearcher"], [184, 1, 1, "", "RandomSearcher"], [184, 1, 1, "", "Searcher"], [184, 1, 1, "", "XgbSearcher"], [184, 2, 1, "", "register_searcher"]], "neural_compressor.compression.hpo.search_space": [[185, 1, 1, "", "BaseSearchSpace"], [185, 1, 1, "", "ContinuousSearchSpace"], [185, 1, 1, "", "DiscreteSearchSpace"], [185, 1, 1, "", "SearchSpace"], [185, 2, 1, "", "register_searchspace"]], "neural_compressor.compression.pruner": [[187, 0, 0, "-", "criteria"], [190, 0, 0, "-", "model_slim"], [194, 0, 0, "-", "patterns"], [188, 2, 1, "", "prepare_pruning"], [201, 0, 0, "-", "pruners"], [207, 0, 0, "-", "pruning"], [208, 0, 0, "-", "regs"], [188, 2, 1, "", "save"], [209, 0, 0, "-", "schedulers"], [210, 0, 0, "-", "tf_criteria"], [211, 0, 0, "-", "utils"]], "neural_compressor.compression.pruner.criteria": [[187, 1, 1, "", "BlockMaskCriterion"], [187, 1, 1, "", "GradientCriterion"], [187, 1, 1, "", "MagnitudeCriterion"], [187, 1, 1, "", "PruningCriterion"], [187, 1, 1, "", "RetrainFreeCriterion"], [187, 1, 1, "", "SnipCriterion"], [187, 1, 1, "", "SnipMomentumCriterion"], [187, 2, 1, "", "get_criterion"], [187, 2, 1, "", "register_criterion"]], "neural_compressor.compression.pruner.criteria.BlockMaskCriterion": [[187, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.GradientCriterion": [[187, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.MagnitudeCriterion": [[187, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.PruningCriterion": [[187, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion": [[187, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipCriterion": [[187, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion": [[187, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.model_slim": [[189, 0, 0, "-", "auto_slim"], [191, 0, 0, "-", "pattern_analyzer"], [192, 0, 0, "-", "weight_slim"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[189, 2, 1, "", "generate_ffn2_pruning_config"], [189, 2, 1, "", "generate_mha_pruning_config"], [189, 2, 1, "", "model_slim"], [189, 2, 1, "", "model_slim_ffn2"], [189, 2, 1, "", "model_slim_mha"], [189, 2, 1, "", "parse_auto_slim_config"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[191, 1, 1, "", "ClassifierHeadSearcher"], [191, 1, 1, "", "ClassifierHeadSearcherTF"], [191, 1, 1, "", "JitBasicSearcher"], [191, 1, 1, "", "Linear2LinearSearcher"], [191, 1, 1, "", "RecipeSearcher"], [191, 1, 1, "", "SelfMHASearcher"], [191, 2, 1, "", "get_attributes"], [191, 2, 1, "", "get_common_module"], [191, 2, 1, "", "print_iterables"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher": [[191, 4, 1, "", "device"], [191, 4, 1, "", "flatten_static_graph"], [191, 4, 1, "", "model"], [191, 4, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF": [[191, 4, 1, "", "device"], [191, 4, 1, "", "flatten_static_graph"], [191, 4, 1, "", "model"], [191, 4, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher": [[191, 4, 1, "", "device"], [191, 4, 1, "", "flatten_static_graph"], [191, 4, 1, "", "model"], [191, 4, 1, "", "searching_results"], [191, 4, 1, "", "static_graph"], [191, 4, 1, "", "target_layers"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher": [[191, 4, 1, "", "current_pattern"], [191, 4, 1, "", "device"], [191, 4, 1, "", "flatten_static_graph"], [191, 4, 1, "", "model"], [191, 4, 1, "", "searching_results"], [191, 4, 1, "", "static_graph"], [191, 4, 1, "", "target_layers"], [191, 4, 1, "", "target_op_lut"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher": [[191, 4, 1, "", "model"], [191, 4, 1, "", "recipe"], [191, 4, 1, "", "searching_results"], [191, 4, 1, "", "targets"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher": [[191, 4, 1, "", "device"], [191, 4, 1, "", "flatten_static_graph"], [191, 4, 1, "", "model"], [191, 4, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[192, 1, 1, "", "LinearCompression"], [192, 1, 1, "", "LinearCompressionIterator"], [192, 1, 1, "", "PostCompressionUtils"]], "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression": [[192, 4, 1, "", "device"], [192, 4, 1, "", "layer_1"], [192, 4, 1, "", "layer_2"]], "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator": [[192, 4, 1, "", "linear_patterns"]], "neural_compressor.compression.pruner.patterns": [[193, 0, 0, "-", "base"], [194, 2, 1, "", "get_pattern"], [195, 0, 0, "-", "mha"], [196, 0, 0, "-", "ninm"], [197, 0, 0, "-", "nxm"]], "neural_compressor.compression.pruner.patterns.base": [[193, 1, 1, "", "BasePattern"], [193, 1, 1, "", "KerasBasePattern"], [193, 1, 1, "", "PytorchBasePattern"], [193, 2, 1, "", "register_pattern"]], "neural_compressor.compression.pruner.patterns.base.BasePattern": [[193, 4, 1, "", "config"], [193, 4, 1, "", "invalid_layers"], [193, 4, 1, "", "is_global"], [193, 4, 1, "", "keep_mask_layers"], [193, 4, 1, "", "max_sparsity_ratio_per_op"], [193, 4, 1, "", "min_sparsity_ratio_per_op"], [193, 4, 1, "", "modules"], [193, 4, 1, "", "pattern"], [193, 4, 1, "", "target_sparsity"]], "neural_compressor.compression.pruner.patterns.base.KerasBasePattern": [[193, 4, 1, "", "config"], [193, 4, 1, "", "invalid_layers"], [193, 4, 1, "", "is_global"], [193, 4, 1, "", "keep_mask_layers"], [193, 4, 1, "", "max_sparsity_ratio_per_op"], [193, 4, 1, "", "min_sparsity_ratio_per_op"], [193, 4, 1, "", "modules"], [193, 4, 1, "", "pattern"], [193, 4, 1, "", "target_sparsity"]], "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern": [[193, 4, 1, "", "config"], [193, 4, 1, "", "invalid_layers"], [193, 4, 1, "", "is_global"], [193, 4, 1, "", "keep_mask_layers"], [193, 4, 1, "", "max_sparsity_ratio_per_op"], [193, 4, 1, "", "min_sparsity_ratio_per_op"], [193, 4, 1, "", "modules"], [193, 4, 1, "", "pattern"], [193, 4, 1, "", "target_sparsity"]], "neural_compressor.compression.pruner.patterns.mha": [[195, 1, 1, "", "PatternMHA"]], "neural_compressor.compression.pruner.patterns.mha.PatternMHA": [[195, 4, 1, "", "M"], [195, 4, 1, "", "N"]], "neural_compressor.compression.pruner.patterns.ninm": [[196, 1, 1, "", "PytorchPatternNInM"]], "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM": [[196, 4, 1, "", "M"], [196, 4, 1, "", "N"]], "neural_compressor.compression.pruner.patterns.nxm": [[197, 1, 1, "", "KerasPatternNxM"], [197, 1, 1, "", "PytorchPatternNxM"]], "neural_compressor.compression.pruner.patterns.nxm.KerasPatternNxM": [[197, 4, 1, "", "block_size"]], "neural_compressor.compression.pruner.patterns.nxm.PytorchPatternNxM": [[197, 4, 1, "", "block_size"]], "neural_compressor.compression.pruner.pruners": [[198, 0, 0, "-", "base"], [199, 0, 0, "-", "basic"], [200, 0, 0, "-", "block_mask"], [201, 2, 1, "", "get_pruner"], [202, 0, 0, "-", "mha"], [201, 2, 1, "", "parse_valid_pruner_types"], [203, 0, 0, "-", "pattern_lock"], [204, 0, 0, "-", "progressive"], [205, 0, 0, "-", "retrain_free"], [206, 0, 0, "-", "sparse_gpt"]], "neural_compressor.compression.pruner.pruners.base": [[198, 1, 1, "", "BasePruner"], [198, 1, 1, "", "KerasBasePruner"], [198, 1, 1, "", "PytorchBasePruner"], [198, 2, 1, "", "register_pruner"]], "neural_compressor.compression.pruner.pruners.base.BasePruner": [[198, 4, 1, "", "config"], [198, 4, 1, "", "current_sparsity_ratio"], [198, 4, 1, "", "end_step"], [198, 4, 1, "", "global_step"], [198, 4, 1, "", "masks"], [198, 4, 1, "", "max_sparsity_ratio_per_op"], [198, 4, 1, "", "modules"], [198, 4, 1, "", "pattern"], [198, 4, 1, "", "pruning_frequency"], [198, 4, 1, "", "scheduler"], [198, 4, 1, "", "scores"], [198, 4, 1, "", "start_step"], [198, 4, 1, "", "target_sparsity_ratio"]], "neural_compressor.compression.pruner.pruners.base.KerasBasePruner": [[198, 4, 1, "", "config"], [198, 4, 1, "", "current_sparsity_ratio"], [198, 4, 1, "", "end_step"], [198, 4, 1, "", "global_step"], [198, 4, 1, "", "masks"], [198, 4, 1, "", "max_sparsity_ratio_per_op"], [198, 4, 1, "", "modules"], [198, 4, 1, "", "pattern"], [198, 4, 1, "", "pruning_frequency"], [198, 4, 1, "", "scheduler"], [198, 4, 1, "", "scores"], [198, 4, 1, "", "start_step"], [198, 4, 1, "", "target_sparsity_ratio"]], "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner": [[198, 4, 1, "", "config"], [198, 4, 1, "", "current_sparsity_ratio"], [198, 4, 1, "", "end_step"], [198, 4, 1, "", "global_step"], [198, 4, 1, "", "masks"], [198, 4, 1, "", "max_sparsity_ratio_per_op"], [198, 4, 1, "", "modules"], [198, 4, 1, "", "pattern"], [198, 4, 1, "", "pruning_frequency"], [198, 4, 1, "", "scheduler"], [198, 4, 1, "", "scores"], [198, 4, 1, "", "start_step"], [198, 4, 1, "", "target_sparsity_ratio"]], "neural_compressor.compression.pruner.pruners.basic": [[199, 1, 1, "", "KerasBasicPruner"], [199, 1, 1, "", "PytorchBasicPruner"]], "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner": [[199, 4, 1, "", "criterion"], [199, 4, 1, "", "pattern"], [199, 4, 1, "", "reg"], [199, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner": [[199, 4, 1, "", "criterion"], [199, 4, 1, "", "pattern"], [199, 4, 1, "", "reg"], [199, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.block_mask": [[200, 1, 1, "", "PytorchBlockMaskPruner"]], "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner": [[200, 4, 1, "", "criterion"], [200, 4, 1, "", "pattern"], [200, 4, 1, "", "reg"], [200, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.mha": [[202, 1, 1, "", "PythonMultiheadAttentionPruner"]], "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner": [[202, 4, 1, "", "head_masks"], [202, 4, 1, "", "linear_layers"], [202, 4, 1, "", "mha_compressions"], [202, 4, 1, "", "mha_scores"]], "neural_compressor.compression.pruner.pruners.pattern_lock": [[203, 1, 1, "", "PytorchPatternLockPruner"]], "neural_compressor.compression.pruner.pruners.progressive": [[204, 1, 1, "", "PytorchProgressivePruner"]], "neural_compressor.compression.pruner.pruners.retrain_free": [[205, 1, 1, "", "PytorchRetrainFreePruner"]], "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner": [[205, 4, 1, "", "criterion"], [205, 4, 1, "", "pattern"], [205, 4, 1, "", "reg"], [205, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.sparse_gpt": [[206, 1, 1, "", "SparseGPTPruner"]], "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner": [[206, 4, 1, "", "criterion"], [206, 4, 1, "", "pattern"], [206, 4, 1, "", "reg"], [206, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruning": [[207, 1, 1, "", "BasePruning"], [207, 1, 1, "", "BasicPruning"], [207, 1, 1, "", "RetrainFreePruning"], [207, 1, 1, "", "SparseGPTPruning"], [207, 2, 1, "", "register_pruning"]], "neural_compressor.compression.pruner.pruning.BasePruning": [[207, 4, 1, "", "config_file_path"], [207, 4, 1, "", "model"], [207, 4, 1, "", "pruner_info"], [207, 4, 1, "", "pruners"]], "neural_compressor.compression.pruner.pruning.BasicPruning": [[207, 4, 1, "", "config_file_path"], [207, 4, 1, "", "model"], [207, 4, 1, "", "pruner_info"], [207, 4, 1, "", "pruners"]], "neural_compressor.compression.pruner.pruning.RetrainFreePruning": [[207, 4, 1, "", "config_file_path"], [207, 4, 1, "", "model"], [207, 4, 1, "", "pruner_info"], [207, 4, 1, "", "pruners"]], "neural_compressor.compression.pruner.regs": [[208, 1, 1, "", "BaseReg"], [208, 1, 1, "", "GroupLasso"], [208, 2, 1, "", "get_reg"], [208, 2, 1, "", "get_reg_type"], [208, 2, 1, "", "register_reg"]], "neural_compressor.compression.pruner.regs.GroupLasso": [[208, 4, 1, "", "alpha"], [208, 4, 1, "", "reg_terms"]], "neural_compressor.compression.pruner.schedulers": [[209, 1, 1, "", "IterativeScheduler"], [209, 1, 1, "", "OneshotScheduler"], [209, 1, 1, "", "PruningScheduler"], [209, 2, 1, "", "get_scheduler"], [209, 2, 1, "", "register_scheduler"]], "neural_compressor.compression.pruner.schedulers.PruningScheduler": [[209, 4, 1, "", "config"]], "neural_compressor.compression.pruner.tf_criteria": [[210, 1, 1, "", "MagnitudeCriterion"], [210, 1, 1, "", "PruningCriterion"], [210, 2, 1, "", "get_tf_criterion"], [210, 2, 1, "", "register_criterion"]], "neural_compressor.compression.pruner.tf_criteria.MagnitudeCriterion": [[210, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.tf_criteria.PruningCriterion": [[210, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.utils": [[211, 2, 1, "", "check_config"], [211, 2, 1, "", "check_key_validity"], [211, 2, 1, "", "collect_layer_inputs"], [211, 2, 1, "", "generate_pruner_config"], [211, 2, 1, "", "get_layers"], [211, 2, 1, "", "get_sparsity_ratio"], [211, 2, 1, "", "get_sparsity_ratio_tf"], [211, 2, 1, "", "parse_last_linear"], [211, 2, 1, "", "parse_last_linear_tf"], [211, 2, 1, "", "parse_to_prune"], [211, 2, 1, "", "parse_to_prune_tf"], [211, 2, 1, "", "process_and_check_config"], [211, 2, 1, "", "process_config"], [211, 2, 1, "", "process_weight_config"], [211, 2, 1, "", "process_yaml_config"], [211, 2, 1, "", "reset_none_to_default"], [211, 2, 1, "", "update_params"]], "neural_compressor.conf": [[212, 0, 0, "-", "config"], [213, 0, 0, "-", "dotdict"], [215, 0, 0, "-", "pythonic_config"]], "neural_compressor.conf.config": [[212, 1, 1, "", "Benchmark_Conf"], [212, 1, 1, "", "Conf"], [212, 1, 1, "", "DefaultConf"], [212, 1, 1, "", "Distillation_Conf"], [212, 1, 1, "", "Graph_Optimization_Conf"], [212, 1, 1, "", "MixedPrecision_Conf"], [212, 1, 1, "", "NASConfig"], [212, 1, 1, "", "PrunerV2"], [212, 1, 1, "", "Pruning_Conf"], [212, 1, 1, "", "Quantization_Conf"]], "neural_compressor.conf.dotdict": [[213, 1, 1, "", "DotDict"], [213, 2, 1, "", "deep_get"], [213, 2, 1, "", "deep_set"]], "neural_compressor.conf.pythonic_config": [[215, 1, 1, "", "AccuracyCriterion"], [215, 1, 1, "", "BenchmarkConfig"], [215, 1, 1, "", "DistillationConfig"], [215, 1, 1, "", "KnowledgeDistillationLossConfig"], [215, 1, 1, "", "Options"], [215, 1, 1, "", "QuantizationConfig"], [215, 1, 1, "", "WeightPruningConfig"]], "neural_compressor.config": [[216, 1, 1, "", "AccuracyCriterion"], [216, 1, 1, "", "BenchmarkConfig"], [216, 1, 1, "", "DistillationConfig"], [216, 1, 1, "", "DotDict"], [216, 1, 1, "", "ExportConfig"], [216, 1, 1, "", "HPOConfig"], [216, 1, 1, "", "IntermediateLayersKnowledgeDistillationLossConfig"], [216, 1, 1, "", "Keras"], [216, 1, 1, "", "KnowledgeDistillationLossConfig"], [216, 1, 1, "", "MXNet"], [216, 1, 1, "", "MixedPrecisionConfig"], [216, 1, 1, "", "NASConfig"], [216, 1, 1, "", "ONNX"], [216, 1, 1, "", "ONNXQlinear2QDQConfig"], [216, 1, 1, "", "Options"], [216, 1, 1, "", "PostTrainingQuantConfig"], [216, 1, 1, "", "PyTorch"], [216, 1, 1, "", "QuantizationAwareTrainingConfig"], [216, 1, 1, "", "SelfKnowledgeDistillationLossConfig"], [216, 1, 1, "", "TF2ONNXConfig"], [216, 1, 1, "", "TensorFlow"], [216, 1, 1, "", "Torch2ONNXConfig"], [216, 1, 1, "", "TuningCriterion"], [216, 1, 1, "", "WeightPruningConfig"]], "neural_compressor.contrib": [[218, 0, 0, "-", "strategy"]], "neural_compressor.contrib.strategy": [[219, 0, 0, "-", "sigopt"], [220, 0, 0, "-", "tpe"]], "neural_compressor.contrib.strategy.sigopt": [[219, 1, 1, "", "SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[220, 1, 1, "", "TpeTuneStrategy"]], "neural_compressor.data": [[225, 0, 0, "-", "dataloaders"], [237, 0, 0, "-", "datasets"], [241, 0, 0, "-", "filters"], [245, 0, 0, "-", "transforms"]], "neural_compressor.data.dataloaders": [[221, 0, 0, "-", "base_dataloader"], [222, 0, 0, "-", "dataloader"], [223, 0, 0, "-", "default_dataloader"], [224, 0, 0, "-", "fetcher"], [226, 0, 0, "-", "mxnet_dataloader"], [227, 0, 0, "-", "onnxrt_dataloader"], [228, 0, 0, "-", "pytorch_dataloader"], [229, 0, 0, "-", "sampler"], [230, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.data.dataloaders.base_dataloader": [[221, 1, 1, "", "BaseDataLoader"]], "neural_compressor.data.dataloaders.dataloader": [[222, 1, 1, "", "DataLoader"], [222, 2, 1, "", "check_dataloader"]], "neural_compressor.data.dataloaders.default_dataloader": [[223, 1, 1, "", "DefaultDataLoader"], [223, 2, 1, "", "default_collate"]], "neural_compressor.data.dataloaders.fetcher": [[224, 1, 1, "", "Fetcher"], [224, 1, 1, "", "IndexFetcher"], [224, 1, 1, "", "IterableFetcher"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[226, 1, 1, "", "MXNetDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[227, 1, 1, "", "ONNXRTBertDataLoader"], [227, 1, 1, "", "ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[228, 1, 1, "", "PyTorchDataLoader"]], "neural_compressor.data.dataloaders.sampler": [[229, 1, 1, "", "BatchSampler"], [229, 1, 1, "", "IterableSampler"], [229, 1, 1, "", "Sampler"], [229, 1, 1, "", "SequentialSampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[230, 1, 1, "", "TFDataDataLoader"], [230, 1, 1, "", "TensorflowBertDataLoader"], [230, 1, 1, "", "TensorflowDataLoader"], [230, 1, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.data.datasets": [[231, 0, 0, "-", "bert_dataset"], [232, 0, 0, "-", "coco_dataset"], [233, 0, 0, "-", "dataset"], [234, 0, 0, "-", "dummy_dataset"], [235, 0, 0, "-", "dummy_dataset_v2"], [236, 0, 0, "-", "imagenet_dataset"], [238, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.data.datasets.bert_dataset": [[231, 1, 1, "", "InputFeatures"], [231, 1, 1, "", "ONNXRTBertDataset"], [231, 1, 1, "", "ParseDecodeBert"], [231, 1, 1, "", "PytorchBertDataset"], [231, 1, 1, "", "TensorflowBertDataset"], [231, 1, 1, "", "TensorflowModelZooBertDataset"], [231, 2, 1, "", "convert_examples_to_features"], [231, 2, 1, "", "load_and_cache_examples"]], "neural_compressor.data.datasets.coco_dataset": [[232, 1, 1, "", "COCONpy"], [232, 1, 1, "", "COCORaw"], [232, 1, 1, "", "COCORecordDataset"], [232, 1, 1, "", "ParseDecodeCoco"]], "neural_compressor.data.datasets.dataset": [[233, 1, 1, "", "CIFAR10"], [233, 1, 1, "", "CIFAR100"], [233, 1, 1, "", "Dataset"], [233, 1, 1, "", "Datasets"], [233, 1, 1, "", "FashionMNIST"], [233, 1, 1, "", "ImageFolder"], [233, 1, 1, "", "IterableDataset"], [233, 1, 1, "", "MNIST"], [233, 1, 1, "", "MXNetCIFAR10"], [233, 1, 1, "", "MXNetCIFAR100"], [233, 1, 1, "", "MXNetDatasets"], [233, 1, 1, "", "MXNetFashionMNIST"], [233, 1, 1, "", "MXNetImageFolder"], [233, 1, 1, "", "MXNetMNIST"], [233, 1, 1, "", "ONNXRTITDatasets"], [233, 1, 1, "", "ONNXRTQLDatasets"], [233, 1, 1, "", "PyTorchDatasets"], [233, 1, 1, "", "PytorchCIFAR10"], [233, 1, 1, "", "PytorchCIFAR100"], [233, 1, 1, "", "PytorchFashionMNIST"], [233, 1, 1, "", "PytorchMNIST"], [233, 1, 1, "", "PytorchMxnetWrapDataset"], [233, 1, 1, "", "PytorchMxnetWrapFunction"], [233, 1, 1, "", "Tensorflow"], [233, 1, 1, "", "TensorflowCIFAR10"], [233, 1, 1, "", "TensorflowCIFAR100"], [233, 1, 1, "", "TensorflowDatasets"], [233, 1, 1, "", "TensorflowFashionMNIST"], [233, 1, 1, "", "TensorflowImageRecord"], [233, 1, 1, "", "TensorflowMNIST"], [233, 1, 1, "", "TensorflowTFRecordDataset"], [233, 1, 1, "", "TensorflowVOCRecord"], [233, 2, 1, "", "calculate_md5"], [233, 2, 1, "", "check_integrity"], [233, 2, 1, "", "dataset_registry"], [233, 2, 1, "", "download_url"], [233, 5, 1, "", "framework_datasets"], [233, 2, 1, "", "gen_bar_updater"]], "neural_compressor.data.datasets.dummy_dataset": [[234, 1, 1, "", "DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[235, 1, 1, "", "DummyDataset"], [235, 1, 1, "", "SparseDummyDataset"]], "neural_compressor.data.datasets.imagenet_dataset": [[236, 1, 1, "", "ImagenetRaw"], [236, 1, 1, "", "MXNetImagenetRaw"], [236, 1, 1, "", "ONNXRTImagenetDataset"], [236, 1, 1, "", "PytorchImagenetRaw"], [236, 1, 1, "", "TensorflowImagenetDataset"], [236, 1, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.data.datasets.style_transfer_dataset": [[238, 1, 1, "", "StyleTransferDataset"]], "neural_compressor.data.filters": [[239, 0, 0, "-", "coco_filter"], [240, 0, 0, "-", "filter"]], "neural_compressor.data.filters.coco_filter": [[239, 1, 1, "", "LabelBalanceCOCORawFilter"], [239, 1, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.filter": [[240, 1, 1, "", "FILTERS"], [240, 1, 1, "", "Filter"], [240, 1, 1, "", "MXNetFilters"], [240, 1, 1, "", "ONNXRTITFilters"], [240, 1, 1, "", "ONNXRTQLFilters"], [240, 1, 1, "", "PyTorchFilters"], [240, 1, 1, "", "TensorflowFilters"], [240, 2, 1, "", "filter_registry"]], "neural_compressor.data.transforms": [[243, 0, 0, "-", "coco_transform"], [244, 0, 0, "-", "imagenet_transform"], [246, 0, 0, "-", "postprocess"], [247, 0, 0, "-", "tokenization"], [248, 0, 0, "-", "transform"]], "neural_compressor.data.transforms.coco_transform": [[243, 1, 1, "", "ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.imagenet_transform": [[244, 1, 1, "", "BilinearImagenetTransform"], [244, 1, 1, "", "LabelShift"], [244, 1, 1, "", "ONNXResizeCropImagenetTransform"], [244, 1, 1, "", "OnnxBilinearImagenetTransform"], [244, 1, 1, "", "ParseDecodeImagenet"], [244, 1, 1, "", "ParseDecodeImagenetTransform"], [244, 1, 1, "", "QuantizedInput"], [244, 1, 1, "", "ResizeWithAspectRatio"], [244, 1, 1, "", "TensorflowResizeCropImagenetTransform"], [244, 1, 1, "", "TensorflowShiftRescale"], [244, 1, 1, "", "TensorflowTransposeLastChannel"]], "neural_compressor.data.transforms.postprocess": [[246, 1, 1, "", "Postprocess"]], "neural_compressor.data.transforms.tokenization": [[247, 1, 1, "", "BasicTokenizer"], [247, 1, 1, "", "FullTokenizer"], [247, 1, 1, "", "WordpieceTokenizer"], [247, 2, 1, "", "convert_by_vocab"], [247, 2, 1, "", "convert_to_unicode"], [247, 2, 1, "", "load_vocab"], [247, 2, 1, "", "whitespace_tokenize"]], "neural_compressor.data.transforms.transform": [[248, 1, 1, "", "AlignImageChannelTransform"], [248, 1, 1, "", "BaseTransform"], [248, 1, 1, "", "CastONNXTransform"], [248, 1, 1, "", "CastPyTorchTransform"], [248, 1, 1, "", "CastTFTransform"], [248, 1, 1, "", "CenterCropTFTransform"], [248, 1, 1, "", "CenterCropTransform"], [248, 1, 1, "", "CollectTransform"], [248, 1, 1, "", "ComposeTransform"], [248, 1, 1, "", "CropResizeTFTransform"], [248, 1, 1, "", "CropResizeTransform"], [248, 1, 1, "", "CropToBoundingBox"], [248, 1, 1, "", "InputFeatures"], [248, 1, 1, "", "MXNetCropResizeTransform"], [248, 1, 1, "", "MXNetCropToBoundingBox"], [248, 1, 1, "", "MXNetNormalizeTransform"], [248, 1, 1, "", "MXNetTransforms"], [248, 1, 1, "", "MXNetTranspose"], [248, 1, 1, "", "NormalizeTFTransform"], [248, 1, 1, "", "NormalizeTransform"], [248, 1, 1, "", "ONNXRTCropToBoundingBox"], [248, 1, 1, "", "ONNXRTITTransforms"], [248, 1, 1, "", "ONNXRTQLTransforms"], [248, 1, 1, "", "PaddedCenterCropTransform"], [248, 1, 1, "", "ParseDecodeVocTransform"], [248, 1, 1, "", "PyTorchAlignImageChannel"], [248, 1, 1, "", "PyTorchCropResizeTransform"], [248, 1, 1, "", "PyTorchNormalizeTransform"], [248, 1, 1, "", "PyTorchTransforms"], [248, 1, 1, "", "PyTorchTranspose"], [248, 1, 1, "", "PytorchMxnetTransform"], [248, 1, 1, "", "PytorchMxnetWrapFunction"], [248, 1, 1, "", "RandomCropTFTransform"], [248, 1, 1, "", "RandomCropTransform"], [248, 1, 1, "", "RandomHorizontalFlip"], [248, 1, 1, "", "RandomResizedCropMXNetTransform"], [248, 1, 1, "", "RandomResizedCropPytorchTransform"], [248, 1, 1, "", "RandomResizedCropTFTransform"], [248, 1, 1, "", "RandomResizedCropTransform"], [248, 1, 1, "", "RandomVerticalFlip"], [248, 1, 1, "", "RescaleKerasPretrainTransform"], [248, 1, 1, "", "RescaleTFTransform"], [248, 1, 1, "", "RescaleTransform"], [248, 1, 1, "", "ResizeMXNetTransform"], [248, 1, 1, "", "ResizePytorchTransform"], [248, 1, 1, "", "ResizeTFTransform"], [248, 1, 1, "", "ResizeTransform"], [248, 1, 1, "", "ResizeWithRatio"], [248, 1, 1, "", "SquadExample"], [248, 1, 1, "", "TFModelZooCollectTransform"], [248, 1, 1, "", "TFSquadV1ModelZooPostTransform"], [248, 1, 1, "", "TFSquadV1PostTransform"], [248, 1, 1, "", "TRANSFORMS"], [248, 1, 1, "", "TensorflowCropToBoundingBox"], [248, 1, 1, "", "TensorflowRandomHorizontalFlip"], [248, 1, 1, "", "TensorflowRandomVerticalFlip"], [248, 1, 1, "", "TensorflowResizeWithRatio"], [248, 1, 1, "", "TensorflowTransform"], [248, 1, 1, "", "TensorflowTransforms"], [248, 1, 1, "", "TensorflowTranspose"], [248, 1, 1, "", "TensorflowWrapFunction"], [248, 1, 1, "", "ToArray"], [248, 1, 1, "", "ToNDArrayTransform"], [248, 1, 1, "", "Transforms"], [248, 1, 1, "", "Transpose"], [248, 2, 1, "", "convert_examples_to_features"], [248, 2, 1, "", "get_final_text"], [248, 2, 1, "", "get_torchvision_map"], [248, 2, 1, "", "read_squad_examples"], [248, 2, 1, "", "transform_registry"]], "neural_compressor.experimental": [[249, 0, 0, "-", "benchmark"], [252, 0, 0, "-", "common"], [258, 0, 0, "-", "component"], [259, 0, 0, "-", "compression"], [260, 0, 0, "-", "contrib"], [285, 0, 0, "-", "data"], [290, 0, 0, "-", "distillation"], [291, 0, 0, "-", "export"], [295, 0, 0, "-", "graph_optimization"], [303, 0, 0, "-", "metric"], [305, 0, 0, "-", "mixed_precision"], [306, 0, 0, "-", "model_conversion"], [309, 0, 0, "-", "nas"], [315, 0, 0, "-", "pruner_legacy"], [319, 0, 0, "-", "pruning"], [320, 0, 0, "-", "pruning_recipes"], [324, 0, 0, "-", "pruning_v2"], [325, 0, 0, "-", "pytorch_pruner"], [332, 0, 0, "-", "quantization"], [333, 0, 0, "-", "scheduler"], [338, 0, 0, "-", "strategy"]], "neural_compressor.experimental.benchmark": [[249, 1, 1, "", "Benchmark"], [249, 2, 1, "", "get_architecture"], [249, 2, 1, "", "get_bounded_threads"], [249, 2, 1, "", "get_core_ids"], [249, 2, 1, "", "get_physical_ids"], [249, 2, 1, "", "get_threads"], [249, 2, 1, "", "get_threads_per_core"], [249, 2, 1, "", "set_all_env_var"], [249, 2, 1, "", "set_env_var"]], "neural_compressor.experimental.common": [[250, 0, 0, "-", "criterion"], [251, 0, 0, "-", "dataloader"], [253, 0, 0, "-", "metric"], [254, 0, 0, "-", "model"], [255, 0, 0, "-", "optimizer"], [256, 0, 0, "-", "postprocess"], [257, 0, 0, "-", "torch_utils"]], "neural_compressor.experimental.common.criterion": [[250, 1, 1, "", "Criterions"], [250, 1, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [250, 1, 1, "", "KnowledgeDistillationFramework"], [250, 1, 1, "", "KnowledgeDistillationLoss"], [250, 1, 1, "", "PyTorchCriterions"], [250, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [250, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [250, 1, 1, "", "PyTorchKnowledgeDistillationLoss"], [250, 1, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [250, 1, 1, "", "SelfKnowledgeDistillationLoss"], [250, 1, 1, "", "TensorflowCriterions"], [250, 1, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [250, 2, 1, "", "criterion_registry"]], "neural_compressor.experimental.common.dataloader": [[251, 1, 1, "", "DataLoader"]], "neural_compressor.experimental.common.metric": [[253, 1, 1, "", "Metric"]], "neural_compressor.experimental.common.model": [[254, 1, 1, "", "Model"], [254, 2, 1, "", "set_backend"]], "neural_compressor.experimental.common.optimizer": [[255, 1, 1, "", "Optimizers"], [255, 1, 1, "", "PyTorchOptimizers"], [255, 1, 1, "", "PyTorchSGD"], [255, 1, 1, "", "TensorFlowAdamW"], [255, 1, 1, "", "TensorFlowSGD"], [255, 1, 1, "", "TensorflowOptimizers"], [255, 2, 1, "", "optimizer_registry"]], "neural_compressor.experimental.common.postprocess": [[256, 1, 1, "", "Postprocess"]], "neural_compressor.experimental.common.torch_utils": [[257, 2, 1, "", "get_activation"], [257, 2, 1, "", "record_output"]], "neural_compressor.experimental.component": [[258, 1, 1, "", "Component"]], "neural_compressor.experimental.contrib": [[261, 0, 0, "-", "strategy"]], "neural_compressor.experimental.contrib.strategy": [[262, 0, 0, "-", "sigopt"], [263, 0, 0, "-", "tpe"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[262, 1, 1, "", "SigOptTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.tpe": [[263, 1, 1, "", "TpeTuneStrategy"]], "neural_compressor.experimental.data": [[268, 0, 0, "-", "dataloaders"], [280, 0, 0, "-", "datasets"], [284, 0, 0, "-", "filters"], [287, 0, 0, "-", "transforms"]], "neural_compressor.experimental.data.dataloaders": [[264, 0, 0, "-", "base_dataloader"], [265, 0, 0, "-", "dataloader"], [266, 0, 0, "-", "default_dataloader"], [267, 0, 0, "-", "fetcher"], [269, 0, 0, "-", "mxnet_dataloader"], [270, 0, 0, "-", "onnxrt_dataloader"], [271, 0, 0, "-", "pytorch_dataloader"], [272, 0, 0, "-", "sampler"], [273, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[264, 1, 1, "", "BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[266, 1, 1, "", "DefaultDataLoader"], [266, 2, 1, "", "default_collate"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[267, 1, 1, "", "Fetcher"], [267, 1, 1, "", "IndexFetcher"], [267, 1, 1, "", "IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[269, 1, 1, "", "MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[270, 1, 1, "", "ONNXRTBertDataLoader"], [270, 1, 1, "", "ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[271, 1, 1, "", "PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[272, 1, 1, "", "BatchSampler"], [272, 1, 1, "", "IterableSampler"], [272, 1, 1, "", "Sampler"], [272, 1, 1, "", "SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[273, 1, 1, "", "TFDataDataLoader"], [273, 1, 1, "", "TensorflowBertDataLoader"], [273, 1, 1, "", "TensorflowDataLoader"], [273, 1, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.datasets": [[274, 0, 0, "-", "bert_dataset"], [275, 0, 0, "-", "coco_dataset"], [276, 0, 0, "-", "dataset"], [277, 0, 0, "-", "dummy_dataset"], [278, 0, 0, "-", "dummy_dataset_v2"], [279, 0, 0, "-", "imagenet_dataset"], [281, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[274, 1, 1, "", "InputFeatures"], [274, 1, 1, "", "ONNXRTBertDataset"], [274, 1, 1, "", "ParseDecodeBert"], [274, 1, 1, "", "PytorchBertDataset"], [274, 1, 1, "", "TensorflowBertDataset"], [274, 1, 1, "", "TensorflowModelZooBertDataset"], [274, 2, 1, "", "convert_examples_to_features"], [274, 2, 1, "", "load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[275, 1, 1, "", "COCONpy"], [275, 1, 1, "", "COCORaw"], [275, 1, 1, "", "COCORecordDataset"], [275, 1, 1, "", "ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.dataset": [[276, 1, 1, "", "CIFAR10"], [276, 1, 1, "", "CIFAR100"], [276, 1, 1, "", "Dataset"], [276, 1, 1, "", "Datasets"], [276, 1, 1, "", "FashionMNIST"], [276, 1, 1, "", "ImageFolder"], [276, 1, 1, "", "IterableDataset"], [276, 1, 1, "", "MNIST"], [276, 1, 1, "", "MXNetCIFAR10"], [276, 1, 1, "", "MXNetCIFAR100"], [276, 1, 1, "", "MXNetDatasets"], [276, 1, 1, "", "MXNetFashionMNIST"], [276, 1, 1, "", "MXNetImageFolder"], [276, 1, 1, "", "MXNetMNIST"], [276, 1, 1, "", "ONNXRTITDatasets"], [276, 1, 1, "", "ONNXRTQLDatasets"], [276, 1, 1, "", "PyTorchDatasets"], [276, 1, 1, "", "PytorchCIFAR10"], [276, 1, 1, "", "PytorchCIFAR100"], [276, 1, 1, "", "PytorchFashionMNIST"], [276, 1, 1, "", "PytorchMNIST"], [276, 1, 1, "", "PytorchMxnetWrapDataset"], [276, 1, 1, "", "PytorchMxnetWrapFunction"], [276, 1, 1, "", "TensorflowCIFAR10"], [276, 1, 1, "", "TensorflowCIFAR100"], [276, 1, 1, "", "TensorflowDatasets"], [276, 1, 1, "", "TensorflowFashionMNIST"], [276, 1, 1, "", "TensorflowImageFolder"], [276, 1, 1, "", "TensorflowImageRecord"], [276, 1, 1, "", "TensorflowMNIST"], [276, 1, 1, "", "TensorflowTFRecordDataset"], [276, 1, 1, "", "TensorflowVOCRecord"], [276, 2, 1, "", "calculate_md5"], [276, 2, 1, "", "check_integrity"], [276, 2, 1, "", "dataset_registry"], [276, 2, 1, "", "download_url"], [276, 5, 1, "", "framework_datasets"], [276, 2, 1, "", "gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[277, 1, 1, "", "DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[278, 1, 1, "", "DummyDataset"], [278, 1, 1, "", "SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[279, 1, 1, "", "ImagenetRaw"], [279, 1, 1, "", "MXNetImagenetRaw"], [279, 1, 1, "", "ONNXRTImagenetDataset"], [279, 1, 1, "", "PytorchImagenetRaw"], [279, 1, 1, "", "TensorflowImagenetDataset"], [279, 1, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[281, 1, 1, "", "StyleTransferDataset"]], "neural_compressor.experimental.data.filters": [[282, 0, 0, "-", "coco_filter"], [283, 0, 0, "-", "filter"]], "neural_compressor.experimental.data.filters.coco_filter": [[282, 1, 1, "", "LabelBalanceCOCORawFilter"], [282, 1, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.filter": [[283, 1, 1, "", "FILTERS"], [283, 1, 1, "", "Filter"], [283, 1, 1, "", "MXNetFilters"], [283, 1, 1, "", "ONNXRTITFilters"], [283, 1, 1, "", "ONNXRTQLFilters"], [283, 1, 1, "", "PyTorchFilters"], [283, 1, 1, "", "TensorflowFilters"], [283, 2, 1, "", "filter_registry"]], "neural_compressor.experimental.data.transforms": [[286, 0, 0, "-", "imagenet_transform"], [288, 0, 0, "-", "tokenization"], [289, 0, 0, "-", "transform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[286, 1, 1, "", "BilinearImagenetTransform"], [286, 1, 1, "", "LabelShift"], [286, 1, 1, "", "ONNXResizeCropImagenetTransform"], [286, 1, 1, "", "OnnxBilinearImagenetTransform"], [286, 1, 1, "", "ParseDecodeImagenet"], [286, 1, 1, "", "ParseDecodeImagenetTransform"], [286, 1, 1, "", "QuantizedInput"], [286, 1, 1, "", "ResizeWithAspectRatio"], [286, 1, 1, "", "TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.tokenization": [[288, 1, 1, "", "BasicTokenizer"], [288, 1, 1, "", "FullTokenizer"], [288, 1, 1, "", "WordpieceTokenizer"], [288, 2, 1, "", "convert_by_vocab"], [288, 2, 1, "", "convert_to_unicode"], [288, 2, 1, "", "load_vocab"], [288, 2, 1, "", "whitespace_tokenize"]], "neural_compressor.experimental.data.transforms.transform": [[289, 1, 1, "", "AlignImageChannelTransform"], [289, 1, 1, "", "BaseTransform"], [289, 1, 1, "", "CastONNXTransform"], [289, 1, 1, "", "CastPyTorchTransform"], [289, 1, 1, "", "CastTFTransform"], [289, 1, 1, "", "CenterCropTFTransform"], [289, 1, 1, "", "CenterCropTransform"], [289, 1, 1, "", "CollectTransform"], [289, 1, 1, "", "ComposeTransform"], [289, 1, 1, "", "CropResizeTFTransform"], [289, 1, 1, "", "CropResizeTransform"], [289, 1, 1, "", "CropToBoundingBox"], [289, 1, 1, "", "InputFeatures"], [289, 1, 1, "", "MXNetCropResizeTransform"], [289, 1, 1, "", "MXNetCropToBoundingBox"], [289, 1, 1, "", "MXNetNormalizeTransform"], [289, 1, 1, "", "MXNetTransforms"], [289, 1, 1, "", "MXNetTranspose"], [289, 1, 1, "", "NormalizeTFTransform"], [289, 1, 1, "", "NormalizeTransform"], [289, 1, 1, "", "ONNXRTCropToBoundingBox"], [289, 1, 1, "", "ONNXRTITTransforms"], [289, 1, 1, "", "ONNXRTQLTransforms"], [289, 1, 1, "", "PaddedCenterCropTransform"], [289, 1, 1, "", "ParseDecodeVocTransform"], [289, 1, 1, "", "PyTorchAlignImageChannel"], [289, 1, 1, "", "PyTorchCropResizeTransform"], [289, 1, 1, "", "PyTorchNormalizeTransform"], [289, 1, 1, "", "PyTorchTransforms"], [289, 1, 1, "", "PyTorchTranspose"], [289, 1, 1, "", "PytorchMxnetTransform"], [289, 1, 1, "", "PytorchMxnetWrapFunction"], [289, 1, 1, "", "RandomCropTFTransform"], [289, 1, 1, "", "RandomCropTransform"], [289, 1, 1, "", "RandomHorizontalFlip"], [289, 1, 1, "", "RandomResizedCropMXNetTransform"], [289, 1, 1, "", "RandomResizedCropPytorchTransform"], [289, 1, 1, "", "RandomResizedCropTFTransform"], [289, 1, 1, "", "RandomResizedCropTransform"], [289, 1, 1, "", "RandomVerticalFlip"], [289, 1, 1, "", "RescaleKerasPretrainTransform"], [289, 1, 1, "", "RescaleTFTransform"], [289, 1, 1, "", "RescaleTransform"], [289, 1, 1, "", "ResizeMXNetTransform"], [289, 1, 1, "", "ResizePytorchTransform"], [289, 1, 1, "", "ResizeTFTransform"], [289, 1, 1, "", "ResizeTransform"], [289, 1, 1, "", "ResizeWithRatio"], [289, 1, 1, "", "SquadExample"], [289, 1, 1, "", "TFModelZooCollectTransform"], [289, 1, 1, "", "TFSquadV1ModelZooPostTransform"], [289, 1, 1, "", "TFSquadV1PostTransform"], [289, 1, 1, "", "TRANSFORMS"], [289, 1, 1, "", "TensorflowCropToBoundingBox"], [289, 1, 1, "", "TensorflowRandomHorizontalFlip"], [289, 1, 1, "", "TensorflowRandomVerticalFlip"], [289, 1, 1, "", "TensorflowResizeWithRatio"], [289, 1, 1, "", "TensorflowTransform"], [289, 1, 1, "", "TensorflowTransforms"], [289, 1, 1, "", "TensorflowTranspose"], [289, 1, 1, "", "TensorflowWrapFunction"], [289, 1, 1, "", "ToArray"], [289, 1, 1, "", "ToNDArrayTransform"], [289, 1, 1, "", "Transforms"], [289, 1, 1, "", "Transpose"], [289, 2, 1, "", "convert_examples_to_features"], [289, 2, 1, "", "get_final_text"], [289, 2, 1, "", "get_torchvision_map"], [289, 2, 1, "", "read_squad_examples"], [289, 2, 1, "", "transform_registry"]], "neural_compressor.experimental.distillation": [[290, 1, 1, "", "Distillation"]], "neural_compressor.experimental.distillation.Distillation": [[290, 4, 1, "", "_epoch_ran"], [290, 4, 1, "", "best_model"], [290, 4, 1, "", "best_score"], [290, 4, 1, "", "eval_frequency"]], "neural_compressor.experimental.export": [[292, 0, 0, "-", "qlinear2qdq"], [293, 0, 0, "-", "tf2onnx"], [294, 0, 0, "-", "torch2onnx"]], "neural_compressor.experimental.export.qlinear2qdq": [[292, 2, 1, "", "check_model"], [292, 2, 1, "", "onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.tf2onnx": [[293, 2, 1, "", "tf_to_fp32_onnx"], [293, 2, 1, "", "tf_to_int8_onnx"]], "neural_compressor.experimental.export.torch2onnx": [[294, 2, 1, "", "dynamic_quant_export"], [294, 2, 1, "", "get_node_mapping"], [294, 2, 1, "", "get_quantizable_onnx_ops"], [294, 2, 1, "", "static_quant_export"], [294, 2, 1, "", "torch_to_fp32_onnx"], [294, 2, 1, "", "torch_to_int8_onnx"]], "neural_compressor.experimental.graph_optimization": [[295, 1, 1, "", "Graph_Optimization"]], "neural_compressor.experimental.metric": [[297, 0, 0, "-", "bleu"], [298, 0, 0, "-", "bleu_util"], [299, 0, 0, "-", "coco_label_map"], [300, 0, 0, "-", "coco_tools"], [301, 0, 0, "-", "evaluate_squad"], [302, 0, 0, "-", "f1"], [304, 0, 0, "-", "metric"]], "neural_compressor.experimental.metric.bleu": [[297, 1, 1, "", "BLEU"], [297, 1, 1, "", "UnicodeRegex"], [297, 2, 1, "", "bleu_tokenize"]], "neural_compressor.experimental.metric.bleu.BLEU": [[297, 4, 1, "", "labels"], [297, 4, 1, "", "predictions"]], "neural_compressor.experimental.metric.bleu.UnicodeRegex": [[297, 4, 1, "", "nondigit_punct_re"], [297, 4, 1, "", "punct_nondigit_re"], [297, 4, 1, "", "symbol_re"]], "neural_compressor.experimental.metric.bleu_util": [[298, 2, 1, "", "compute_bleu"]], "neural_compressor.experimental.metric.coco_tools": [[300, 1, 1, "", "COCOEvalWrapper"], [300, 1, 1, "", "COCOWrapper"], [300, 2, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [300, 2, 1, "", "ExportSingleImageDetectionMasksToCoco"], [300, 2, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.experimental.metric.coco_tools.COCOWrapper": [[300, 4, 1, "", "dataset"], [300, 4, 1, "", "detection_type"]], "neural_compressor.experimental.metric.evaluate_squad": [[301, 2, 1, "", "evaluate"], [301, 2, 1, "", "exact_match_score"], [301, 2, 1, "", "f1_score"], [301, 2, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[302, 2, 1, "", "evaluate"], [302, 2, 1, "", "f1_score"], [302, 2, 1, "", "metric_max_over_ground_truths"], [302, 2, 1, "", "normalize_answer"]], "neural_compressor.experimental.metric.metric": [[304, 1, 1, "", "Accuracy"], [304, 1, 1, "", "BaseMetric"], [304, 1, 1, "", "COCOmAPv2"], [304, 1, 1, "", "F1"], [304, 1, 1, "", "GeneralTopK"], [304, 1, 1, "", "Loss"], [304, 1, 1, "", "MAE"], [304, 1, 1, "", "METRICS"], [304, 1, 1, "", "MSE"], [304, 1, 1, "", "MXNetMetrics"], [304, 1, 1, "", "ONNXRTGLUE"], [304, 1, 1, "", "ONNXRTITMetrics"], [304, 1, 1, "", "ONNXRTQLMetrics"], [304, 1, 1, "", "PyTorchLoss"], [304, 1, 1, "", "PyTorchMetrics"], [304, 1, 1, "", "RMSE"], [304, 1, 1, "", "ROC"], [304, 1, 1, "", "SquadF1"], [304, 1, 1, "", "TensorflowCOCOMAP"], [304, 1, 1, "", "TensorflowMAP"], [304, 1, 1, "", "TensorflowMetrics"], [304, 1, 1, "", "TensorflowTopK"], [304, 1, 1, "", "TensorflowVOCMAP"], [304, 1, 1, "", "WrapMXNetMetric"], [304, 1, 1, "", "WrapONNXRTMetric"], [304, 1, 1, "", "WrapPyTorchMetric"], [304, 1, 1, "", "mIOU"], [304, 2, 1, "", "metric_registry"]], "neural_compressor.experimental.metric.metric.Accuracy": [[304, 4, 1, "", "label_list"], [304, 4, 1, "", "pred_list"], [304, 4, 1, "", "sample"]], "neural_compressor.experimental.metric.metric.GeneralTopK": [[304, 4, 1, "", "k"], [304, 4, 1, "", "num_correct"], [304, 4, 1, "", "num_sample"]], "neural_compressor.experimental.metric.metric.Loss": [[304, 4, 1, "", "sample"], [304, 4, 1, "", "sum"]], "neural_compressor.experimental.metric.metric.MAE": [[304, 4, 1, "", "compare_label"], [304, 4, 1, "", "label_list"], [304, 4, 1, "", "pred_list"]], "neural_compressor.experimental.metric.metric.METRICS": [[304, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.MSE": [[304, 4, 1, "", "compare_label"], [304, 4, 1, "", "label_list"], [304, 4, 1, "", "pred_list"]], "neural_compressor.experimental.metric.metric.MXNetMetrics": [[304, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTITMetrics": [[304, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics": [[304, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.PyTorchMetrics": [[304, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.RMSE": [[304, 4, 1, "", "mse"]], "neural_compressor.experimental.metric.metric.TensorflowMetrics": [[304, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.TensorflowTopK": [[304, 4, 1, "", "k"], [304, 4, 1, "", "num_correct"], [304, 4, 1, "", "num_sample"]], "neural_compressor.experimental.mixed_precision": [[305, 1, 1, "", "MixedPrecision"]], "neural_compressor.experimental.model_conversion": [[306, 1, 1, "", "ModelConversion"]], "neural_compressor.experimental.nas": [[307, 0, 0, "-", "basic_nas"], [308, 0, 0, "-", "dynas"], [310, 0, 0, "-", "nas"], [311, 0, 0, "-", "nas_utils"], [312, 0, 0, "-", "search_algorithms"]], "neural_compressor.experimental.nas.basic_nas": [[307, 1, 1, "", "BasicNAS"]], "neural_compressor.experimental.nas.dynas": [[308, 1, 1, "", "DyNAS"]], "neural_compressor.experimental.nas.nas": [[310, 1, 1, "", "NAS"], [310, 1, 1, "", "NASBase"]], "neural_compressor.experimental.nas.nas_utils": [[311, 2, 1, "", "create_search_space_pool"], [311, 2, 1, "", "find_pareto_front"], [311, 2, 1, "", "nas_registry"]], "neural_compressor.experimental.nas.search_algorithms": [[312, 1, 1, "", "BayesianOptimizationSearcher"], [312, 1, 1, "", "GridSearcher"], [312, 1, 1, "", "RandomSearcher"], [312, 1, 1, "", "Searcher"]], "neural_compressor.experimental.pruner_legacy": [[313, 0, 0, "-", "gradient_sensitivity"], [314, 0, 0, "-", "group_lasso"], [316, 0, 0, "-", "magnitude"], [317, 0, 0, "-", "pattern_lock"], [318, 0, 0, "-", "pruner"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[313, 1, 1, "", "GradientSensitivityPruner"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[314, 1, 1, "", "GroupLassoPruner"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[316, 1, 1, "", "BasicMagnitudePruner"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[317, 1, 1, "", "PatternLockPruner"]], "neural_compressor.experimental.pruner_legacy.pruner": [[318, 1, 1, "", "Pruner"], [318, 2, 1, "", "pruner_registry"]], "neural_compressor.experimental.pruning": [[319, 1, 1, "", "Pruning"], [319, 1, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning.Pruning": [[319, 4, 1, "", "conf"], [319, 4, 1, "", "pruners"]], "neural_compressor.experimental.pruning_recipes": [[321, 0, 0, "-", "patterns"]], "neural_compressor.experimental.pruning_recipes.patterns": [[322, 0, 0, "-", "pattern"], [323, 0, 0, "-", "tile_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[322, 1, 1, "", "PATTERNS"], [322, 1, 1, "", "PatternBase"], [322, 2, 1, "", "pattern_registry"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS": [[322, 4, 1, "", "patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[323, 1, 1, "", "TilePatternBase"], [323, 1, 1, "", "TilePattern_1x1"], [323, 1, 1, "", "TilePattern_1x16"], [323, 1, 1, "", "TilePattern_1x2"], [323, 1, 1, "", "TilePattern_2x2"], [323, 1, 1, "", "TilePattern_4x1"]], "neural_compressor.experimental.pruning_v2": [[324, 1, 1, "", "Pruning"], [324, 1, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning_v2.Pruning": [[324, 4, 1, "", "conf"], [324, 4, 1, "", "pruners"]], "neural_compressor.experimental.pytorch_pruner": [[326, 0, 0, "-", "logger"], [327, 0, 0, "-", "patterns"], [328, 0, 0, "-", "prune_utils"], [329, 0, 0, "-", "pruner"], [330, 0, 0, "-", "pruning"], [331, 0, 0, "-", "scheduler"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[327, 1, 1, "", "Pattern"], [327, 1, 1, "", "PatternNInM"], [327, 1, 1, "", "PatternNxM"], [327, 2, 1, "", "get_pattern"], [327, 2, 1, "", "register_pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.Pattern": [[327, 4, 1, "", "is_global"], [327, 4, 1, "", "pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM": [[327, 4, 1, "", "M"], [327, 4, 1, "", "N"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM": [[327, 4, 1, "", "block_size"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[328, 2, 1, "", "check_config"], [328, 2, 1, "", "parse_not_to_prune"], [328, 2, 1, "", "parse_to_prune"], [328, 2, 1, "", "process_and_check_config"], [328, 2, 1, "", "process_config"], [328, 2, 1, "", "reset_non_value_to_default"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[329, 1, 1, "", "MagnitudePruner"], [329, 1, 1, "", "PatternLockPruner"], [329, 1, 1, "", "Pruner"], [329, 1, 1, "", "SnipMomentumPruner"], [329, 1, 1, "", "SnipPruner"], [329, 2, 1, "", "get_pruner"], [329, 2, 1, "", "register_pruners"]], "neural_compressor.experimental.pytorch_pruner.pruner.Pruner": [[329, 4, 1, "", "config"], [329, 4, 1, "", "current_sparsity_ratio"], [329, 4, 1, "", "end_step"], [329, 4, 1, "", "global_step"], [329, 4, 1, "", "masks"], [329, 4, 1, "", "max_sparsity_ratio_per_layer"], [329, 4, 1, "", "modules"], [329, 4, 1, "", "pattern"], [329, 4, 1, "", "scheduler"], [329, 4, 1, "", "scores"], [329, 4, 1, "", "start_step"], [329, 4, 1, "", "target_sparsity_ratio"], [329, 4, 1, "", "update_frequency_on_step"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[330, 1, 1, "", "Pruning"]], "neural_compressor.experimental.pytorch_pruner.pruning.Pruning": [[330, 4, 1, "", "config_file_path"], [330, 4, 1, "", "model"], [330, 4, 1, "", "pruner_info"], [330, 4, 1, "", "pruners"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[331, 1, 1, "", "IterativeScheduler"], [331, 1, 1, "", "OneshotScheduler"], [331, 1, 1, "", "Scheduler"], [331, 2, 1, "", "get_scheduler"], [331, 2, 1, "", "register_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler": [[331, 4, 1, "", "config"]], "neural_compressor.experimental.quantization": [[332, 1, 1, "", "Quantization"]], "neural_compressor.experimental.scheduler": [[333, 1, 1, "", "Scheduler"]], "neural_compressor.experimental.strategy": [[334, 0, 0, "-", "auto_mixed_precision"], [335, 0, 0, "-", "basic"], [336, 0, 0, "-", "bayesian"], [337, 0, 0, "-", "exhaustive"], [339, 0, 0, "-", "mse"], [340, 0, 0, "-", "mse_v2"], [341, 0, 0, "-", "random"], [342, 0, 0, "-", "strategy"], [344, 0, 0, "-", "utils"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[334, 1, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.experimental.strategy.basic": [[335, 1, 1, "", "BasicTuneStrategy"]], "neural_compressor.experimental.strategy.bayesian": [[336, 1, 1, "", "BayesianOptimization"], [336, 1, 1, "", "BayesianTuneStrategy"], [336, 1, 1, "", "TargetSpace"], [336, 2, 1, "", "acq_max"]], "neural_compressor.experimental.strategy.exhaustive": [[337, 1, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.experimental.strategy.mse": [[339, 1, 1, "", "MSETuneStrategy"]], "neural_compressor.experimental.strategy.mse_v2": [[340, 1, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.experimental.strategy.random": [[341, 1, 1, "", "RandomTuneStrategy"]], "neural_compressor.experimental.strategy.strategy": [[342, 1, 1, "", "TuneStrategy"], [342, 2, 1, "", "strategy_registry"]], "neural_compressor.experimental.strategy.utils": [[343, 0, 0, "-", "constant"], [345, 0, 0, "-", "tuning_sampler"], [346, 0, 0, "-", "tuning_space"], [347, 0, 0, "-", "tuning_structs"], [348, 0, 0, "-", "utility"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[345, 1, 1, "", "FallbackTuningSampler"], [345, 1, 1, "", "ModelWiseTuningSampler"], [345, 1, 1, "", "OpTypeWiseTuningSampler"], [345, 1, 1, "", "OpWiseTuningSampler"], [345, 1, 1, "", "SmoothQuantSampler"], [345, 1, 1, "", "TuningOrder"], [345, 1, 1, "", "TuningSampler"], [345, 1, 1, "", "TuningSamplerRegistry"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[346, 1, 1, "", "TuningItem"], [346, 1, 1, "", "TuningSpace"], [346, 2, 1, "", "initial_tuning_cfg_with_quant_mode"], [346, 2, 1, "", "pattern_to_internal"], [346, 2, 1, "", "pattern_to_path"], [346, 2, 1, "", "quant_mode_from_pattern"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[347, 1, 1, "", "OpTuningConfig"]], "neural_compressor.experimental.strategy.utils.utility": [[348, 1, 1, "", "OrderedDefaultDict"], [348, 2, 1, "", "extract_data_type"], [348, 2, 1, "", "get_adaptor_name"], [348, 2, 1, "", "reverted_data_type"]], "neural_compressor.metric": [[350, 0, 0, "-", "bleu"], [351, 0, 0, "-", "bleu_util"], [352, 0, 0, "-", "coco_label_map"], [353, 0, 0, "-", "coco_tools"], [354, 0, 0, "-", "evaluate_squad"], [355, 0, 0, "-", "f1"], [357, 0, 0, "-", "metric"]], "neural_compressor.metric.bleu": [[350, 1, 1, "", "BLEU"], [350, 1, 1, "", "UnicodeRegex"], [350, 2, 1, "", "bleu_tokenize"]], "neural_compressor.metric.bleu.BLEU": [[350, 4, 1, "", "labels"], [350, 4, 1, "", "predictions"]], "neural_compressor.metric.bleu.UnicodeRegex": [[350, 4, 1, "", "nondigit_punct_re"], [350, 4, 1, "", "punct_nondigit_re"], [350, 4, 1, "", "symbol_re"]], "neural_compressor.metric.bleu_util": [[351, 2, 1, "", "compute_bleu"]], "neural_compressor.metric.coco_tools": [[353, 1, 1, "", "COCOEvalWrapper"], [353, 1, 1, "", "COCOWrapper"], [353, 2, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [353, 2, 1, "", "ExportSingleImageDetectionMasksToCoco"], [353, 2, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.metric.coco_tools.COCOWrapper": [[353, 4, 1, "", "dataset"], [353, 4, 1, "", "detection_type"]], "neural_compressor.metric.evaluate_squad": [[354, 2, 1, "", "evaluate"], [354, 2, 1, "", "exact_match_score"], [354, 2, 1, "", "f1_score"], [354, 2, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[355, 2, 1, "", "evaluate"], [355, 2, 1, "", "f1_score"], [355, 2, 1, "", "metric_max_over_ground_truths"], [355, 2, 1, "", "normalize_answer"]], "neural_compressor.metric.metric": [[357, 1, 1, "", "Accuracy"], [357, 1, 1, "", "BaseMetric"], [357, 1, 1, "", "COCOmAPv2"], [357, 1, 1, "", "F1"], [357, 1, 1, "", "GeneralTopK"], [357, 1, 1, "", "Loss"], [357, 1, 1, "", "MAE"], [357, 1, 1, "", "METRICS"], [357, 1, 1, "", "MSE"], [357, 1, 1, "", "MXNetMetrics"], [357, 1, 1, "", "Metric"], [357, 1, 1, "", "ONNXRTGLUE"], [357, 1, 1, "", "ONNXRTITMetrics"], [357, 1, 1, "", "ONNXRTQLMetrics"], [357, 1, 1, "", "PyTorchLoss"], [357, 1, 1, "", "PyTorchMetrics"], [357, 1, 1, "", "RMSE"], [357, 1, 1, "", "ROC"], [357, 1, 1, "", "SquadF1"], [357, 1, 1, "", "TensorflowCOCOMAP"], [357, 1, 1, "", "TensorflowMAP"], [357, 1, 1, "", "TensorflowMetrics"], [357, 1, 1, "", "TensorflowTopK"], [357, 1, 1, "", "TensorflowVOCMAP"], [357, 1, 1, "", "WrapMXNetMetric"], [357, 1, 1, "", "WrapONNXRTMetric"], [357, 1, 1, "", "WrapPyTorchMetric"], [357, 1, 1, "", "mIOU"], [357, 2, 1, "", "metric_registry"], [357, 2, 1, "", "register_customer_metric"]], "neural_compressor.metric.metric.Accuracy": [[357, 4, 1, "", "label_list"], [357, 4, 1, "", "pred_list"], [357, 4, 1, "", "sample"]], "neural_compressor.metric.metric.GeneralTopK": [[357, 4, 1, "", "k"], [357, 4, 1, "", "num_correct"], [357, 4, 1, "", "num_sample"]], "neural_compressor.metric.metric.Loss": [[357, 4, 1, "", "sample"], [357, 4, 1, "", "sum"]], "neural_compressor.metric.metric.MAE": [[357, 4, 1, "", "compare_label"], [357, 4, 1, "", "label_list"], [357, 4, 1, "", "pred_list"]], "neural_compressor.metric.metric.METRICS": [[357, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.MSE": [[357, 4, 1, "", "compare_label"], [357, 4, 1, "", "label_list"], [357, 4, 1, "", "pred_list"]], "neural_compressor.metric.metric.MXNetMetrics": [[357, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTITMetrics": [[357, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTQLMetrics": [[357, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.PyTorchMetrics": [[357, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.RMSE": [[357, 4, 1, "", "mse"]], "neural_compressor.metric.metric.TensorflowMetrics": [[357, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.TensorflowTopK": [[357, 4, 1, "", "k"], [357, 4, 1, "", "num_correct"], [357, 4, 1, "", "num_sample"]], "neural_compressor.mix_precision": [[358, 2, 1, "", "fit"]], "neural_compressor.model": [[359, 0, 0, "-", "base_model"], [361, 0, 0, "-", "keras_model"], [362, 0, 0, "-", "model"], [363, 0, 0, "-", "mxnet_model"], [364, 0, 0, "-", "nets_factory"], [365, 0, 0, "-", "onnx_model"], [366, 0, 0, "-", "tensorflow_model"], [367, 0, 0, "-", "torch_model"]], "neural_compressor.model.base_model": [[359, 1, 1, "", "BaseModel"]], "neural_compressor.model.keras_model": [[361, 1, 1, "", "KerasModel"]], "neural_compressor.model.model": [[362, 1, 1, "", "Model"], [362, 2, 1, "", "get_model_fwk_name"]], "neural_compressor.model.mxnet_model": [[363, 1, 1, "", "MXNetModel"]], "neural_compressor.model.nets_factory": [[364, 1, 1, "", "TFSlimNetsFactory"]], "neural_compressor.model.onnx_model": [[365, 1, 1, "", "ONNXModel"]], "neural_compressor.model.tensorflow_model": [[366, 1, 1, "", "TensorflowBaseModel"], [366, 1, 1, "", "TensorflowCheckpointModel"], [366, 1, 1, "", "TensorflowLLMModel"], [366, 1, 1, "", "TensorflowModel"], [366, 1, 1, "", "TensorflowQATModel"], [366, 1, 1, "", "TensorflowSavedModelModel"], [366, 2, 1, "", "checkpoint_session"], [366, 2, 1, "", "estimator_session"], [366, 2, 1, "", "frozen_pb_session"], [366, 2, 1, "", "get_model_type"], [366, 2, 1, "", "graph_def_session"], [366, 2, 1, "", "graph_session"], [366, 2, 1, "", "keras_session"], [366, 2, 1, "", "load_saved_model"], [366, 2, 1, "", "saved_model_session"], [366, 2, 1, "", "slim_session"], [366, 2, 1, "", "validate_and_inference_input_output"], [366, 2, 1, "", "validate_graph_node"]], "neural_compressor.model.torch_model": [[367, 1, 1, "", "IPEXModel"], [367, 1, 1, "", "PyTorchBaseModel"], [367, 1, 1, "", "PyTorchFXModel"], [367, 1, 1, "", "PyTorchModel"]], "neural_compressor.objective": [[368, 1, 1, "", "Accuracy"], [368, 1, 1, "", "Footprint"], [368, 1, 1, "", "ModelSize"], [368, 1, 1, "", "MultiObjective"], [368, 1, 1, "", "Objective"], [368, 1, 1, "", "Performance"], [368, 2, 1, "", "objective_custom_registry"], [368, 2, 1, "", "objective_registry"]], "neural_compressor.profiling": [[371, 0, 0, "-", "parser"], [381, 0, 0, "-", "profiler"]], "neural_compressor.profiling.parser": [[370, 0, 0, "-", "factory"], [373, 0, 0, "-", "onnx_parser"], [375, 0, 0, "-", "parser"], [376, 0, 0, "-", "result"], [378, 0, 0, "-", "tensorflow_parser"]], "neural_compressor.profiling.parser.factory": [[370, 1, 1, "", "ParserFactory"]], "neural_compressor.profiling.parser.onnx_parser": [[372, 0, 0, "-", "factory"], [374, 0, 0, "-", "parser"]], "neural_compressor.profiling.parser.onnx_parser.factory": [[372, 1, 1, "", "OnnxrtParserFactory"]], "neural_compressor.profiling.parser.onnx_parser.parser": [[374, 1, 1, "", "OnnxProfilingParser"]], "neural_compressor.profiling.parser.parser": [[375, 1, 1, "", "ProfilingParser"]], "neural_compressor.profiling.parser.result": [[376, 1, 1, "", "ProfilingResult"]], "neural_compressor.profiling.parser.tensorflow_parser": [[377, 0, 0, "-", "factory"], [379, 0, 0, "-", "parser"]], "neural_compressor.profiling.parser.tensorflow_parser.factory": [[377, 1, 1, "", "TensorFlowParserFactory"]], "neural_compressor.profiling.parser.tensorflow_parser.parser": [[379, 1, 1, "", "TensorFlowProfilingParser"]], "neural_compressor.profiling.profiler": [[380, 0, 0, "-", "factory"], [383, 0, 0, "-", "onnxrt_profiler"], [386, 0, 0, "-", "profiler"], [388, 0, 0, "-", "tensorflow_profiler"]], "neural_compressor.profiling.profiler.factory": [[380, 1, 1, "", "ProfilerFactory"]], "neural_compressor.profiling.profiler.onnxrt_profiler": [[382, 0, 0, "-", "factory"], [384, 0, 0, "-", "profiler"], [385, 0, 0, "-", "utils"]], "neural_compressor.profiling.profiler.onnxrt_profiler.factory": [[382, 1, 1, "", "ProfilerFactory"]], "neural_compressor.profiling.profiler.onnxrt_profiler.profiler": [[384, 1, 1, "", "Profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.utils": [[385, 2, 1, "", "create_onnx_config"]], "neural_compressor.profiling.profiler.profiler": [[386, 1, 1, "", "Profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler": [[387, 0, 0, "-", "factory"], [389, 0, 0, "-", "profiler"], [390, 0, 0, "-", "utils"]], "neural_compressor.profiling.profiler.tensorflow_profiler.factory": [[387, 1, 1, "", "ProfilerFactory"]], "neural_compressor.profiling.profiler.tensorflow_profiler.profiler": [[389, 1, 1, "", "Profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.utils": [[390, 2, 1, "", "create_tf_config"], [390, 2, 1, "", "delete_assign"], [390, 2, 1, "", "set_eager_execution"]], "neural_compressor.quantization": [[391, 2, 1, "", "fit"]], "neural_compressor.strategy": [[392, 0, 0, "-", "auto"], [393, 0, 0, "-", "auto_mixed_precision"], [394, 0, 0, "-", "basic"], [395, 0, 0, "-", "bayesian"], [396, 0, 0, "-", "conservative"], [397, 0, 0, "-", "exhaustive"], [398, 0, 0, "-", "hawq_v2"], [400, 0, 0, "-", "mse"], [401, 0, 0, "-", "mse_v2"], [402, 0, 0, "-", "random"], [403, 0, 0, "-", "strategy"], [405, 0, 0, "-", "utils"]], "neural_compressor.strategy.auto": [[392, 1, 1, "", "AutoTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[393, 1, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.basic": [[394, 1, 1, "", "BasicTuneStrategy"]], "neural_compressor.strategy.bayesian": [[395, 1, 1, "", "BayesianOptimization"], [395, 1, 1, "", "BayesianTuneStrategy"], [395, 1, 1, "", "TargetSpace"], [395, 2, 1, "", "acq_max"]], "neural_compressor.strategy.conservative": [[396, 1, 1, "", "ConservativeTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[397, 1, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[398, 1, 1, "", "HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.mse": [[400, 1, 1, "", "MSETuneStrategy"]], "neural_compressor.strategy.mse_v2": [[401, 1, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.strategy.random": [[402, 1, 1, "", "RandomTuneStrategy"]], "neural_compressor.strategy.strategy": [[403, 1, 1, "", "TuneStrategy"], [403, 1, 1, "", "TuneStrategyMeta"], [403, 2, 1, "", "strategy_registry"]], "neural_compressor.strategy.utils": [[404, 0, 0, "-", "constant"], [406, 0, 0, "-", "tuning_sampler"], [407, 0, 0, "-", "tuning_space"], [408, 0, 0, "-", "tuning_structs"], [409, 0, 0, "-", "utility"]], "neural_compressor.strategy.utils.tuning_sampler": [[406, 1, 1, "", "BlockFallbackTuningSampler"], [406, 1, 1, "", "FallbackTuningSampler"], [406, 1, 1, "", "LowerBitsSampler"], [406, 1, 1, "", "ModelWiseTuningSampler"], [406, 1, 1, "", "OpTypeWiseTuningSampler"], [406, 1, 1, "", "OpWiseTuningSampler"], [406, 1, 1, "", "SmoothQuantSampler"], [406, 1, 1, "", "TuningOrder"], [406, 1, 1, "", "TuningSampler"], [406, 1, 1, "", "WeightOnlyQuantSampler"]], "neural_compressor.strategy.utils.tuning_space": [[407, 1, 1, "", "TuningItem"], [407, 1, 1, "", "TuningSpace"], [407, 2, 1, "", "initial_tuning_cfg_with_quant_mode"], [407, 2, 1, "", "pattern_to_internal"], [407, 2, 1, "", "pattern_to_path"], [407, 2, 1, "", "quant_mode_from_pattern"]], "neural_compressor.strategy.utils.tuning_structs": [[408, 1, 1, "", "OpTuningConfig"]], "neural_compressor.strategy.utils.utility": [[409, 1, 1, "", "ClassRegister"], [409, 1, 1, "", "OrderedDefaultDict"], [409, 1, 1, "", "QuantOptions"], [409, 1, 1, "", "QuantType"], [409, 2, 1, "", "build_slave_faker_model"], [409, 2, 1, "", "extract_data_type"], [409, 2, 1, "", "get_adaptor_name"], [409, 2, 1, "", "preprocess_user_cfg"], [409, 2, 1, "", "reverted_data_type"]], "neural_compressor.template": [[410, 0, 0, "-", "api_doc_example"]], "neural_compressor.template.api_doc_example": [[410, 1, 1, "", "ExampleClass"], [410, 4, 1, "", "attribute1"], [410, 2, 1, "", "function1"], [410, 2, 1, "", "function2"], [410, 2, 1, "", "function3"], [410, 2, 1, "", "generator1"], [410, 5, 1, "", "module_debug_level1"]], "neural_compressor.template.api_doc_example.ExampleClass": [[410, 4, 1, "", "attr1"], [410, 4, 1, "", "attr2"], [410, 4, 1, "", "attr5"]], "neural_compressor.torch": [[413, 0, 0, "-", "algorithms"], [418, 0, 0, "-", "quantization"], [420, 0, 0, "-", "utils"]], "neural_compressor.torch.algorithms": [[412, 0, 0, "-", "gptq"], [414, 0, 0, "-", "rtn"], [415, 0, 0, "-", "weight_only_algos"]], "neural_compressor.torch.algorithms.gptq": [[412, 1, 1, "", "GPTQ"], [412, 1, 1, "", "GPTQuantizer"], [412, 2, 1, "", "apply_gptq_quantize"], [412, 2, 1, "", "find_layers"], [412, 2, 1, "", "find_layers_name"], [412, 2, 1, "", "is_leaf"], [412, 2, 1, "", "log_quantizable_layers_per_transformer"], [412, 2, 1, "", "quantize"], [412, 2, 1, "", "trace_gptq_target_blocks"]], "neural_compressor.torch.algorithms.rtn": [[414, 2, 1, "", "qdq_weight_actor"], [414, 2, 1, "", "qdq_weight_asym"], [414, 2, 1, "", "qdq_weight_sym"], [414, 2, 1, "", "quant_weight"], [414, 2, 1, "", "quantize_4bit"], [414, 2, 1, "", "rtn_quantize"], [414, 2, 1, "", "search_clip"]], "neural_compressor.torch.algorithms.weight_only_algos": [[415, 2, 1, "", "rtn_quantize_entry"]], "neural_compressor.torch.quantization": [[417, 0, 0, "-", "config"], [419, 0, 0, "-", "quantize"]], "neural_compressor.torch.quantization.config": [[417, 1, 1, "", "Backend"], [417, 1, 1, "", "DummyConfig"], [417, 1, 1, "", "GPTQConfig"], [417, 1, 1, "", "RTNWeightQuantConfig"], [417, 2, 1, "", "get_default_dummy_config"], [417, 2, 1, "", "get_default_gptq_config"], [417, 2, 1, "", "get_default_rtn_config"]], "neural_compressor.torch.quantization.quantize": [[419, 2, 1, "", "quantize"]], "neural_compressor.torch.utils": [[420, 2, 1, "", "fetch_module"], [420, 2, 1, "", "register_algo"], [420, 2, 1, "", "set_module"]], "neural_compressor.training": [[421, 1, 1, "", "CallBacks"], [421, 1, 1, "", "CompressionManager"], [421, 2, 1, "", "fit"], [421, 2, 1, "", "prepare_compression"]], "neural_compressor.utils": [[422, 0, 0, "-", "collect_layer_histogram"], [423, 0, 0, "-", "constant"], [424, 0, 0, "-", "create_obj_from_config"], [426, 0, 0, "-", "kl_divergence"], [427, 0, 0, "-", "load_huggingface"], [428, 0, 0, "-", "logger"], [429, 0, 0, "-", "neural_insights_utils"], [430, 0, 0, "-", "options"], [431, 0, 0, "-", "pytorch"], [432, 0, 0, "-", "utility"], [433, 0, 0, "-", "weights_details"]], "neural_compressor.utils.collect_layer_histogram": [[422, 1, 1, "", "LayerHistogramCollector"]], "neural_compressor.utils.create_obj_from_config": [[424, 2, 1, "", "create_dataloader"], [424, 2, 1, "", "create_dataset"], [424, 2, 1, "", "create_eval_func"], [424, 2, 1, "", "create_train_func"], [424, 2, 1, "", "get_algorithm"], [424, 2, 1, "", "get_func_from_config"], [424, 2, 1, "", "get_metrics"], [424, 2, 1, "", "get_postprocess"], [424, 2, 1, "", "get_preprocess"]], "neural_compressor.utils.kl_divergence": [[426, 1, 1, "", "KL_Divergence"]], "neural_compressor.utils.load_huggingface": [[427, 1, 1, "", "OptimizedModel"], [427, 2, 1, "", "export_compressed_model"], [427, 2, 1, "", "save_for_huggingface_upstream"]], "neural_compressor.utils.logger": [[428, 1, 1, "", "Logger"], [428, 2, 1, "", "debug"], [428, 2, 1, "", "error"], [428, 2, 1, "", "fatal"], [428, 2, 1, "", "info"], [428, 2, 1, "", "log"], [428, 2, 1, "", "warn"], [428, 2, 1, "", "warning"]], "neural_compressor.utils.neural_insights_utils": [[429, 2, 1, "", "get_model_path"], [429, 2, 1, "", "register_neural_insights_workload"], [429, 2, 1, "", "update_neural_insights_workload"], [429, 2, 1, "", "update_neural_insights_workload_accuracy_data"]], "neural_compressor.utils.options": [[430, 1, 1, "", "onnxrt"]], "neural_compressor.utils.pytorch": [[431, 2, 1, "", "is_int8_model"], [431, 2, 1, "", "load"], [431, 2, 1, "", "load_weight_only"], [431, 2, 1, "", "recover_model_from_json"]], "neural_compressor.utils.utility": [[432, 1, 1, "", "CaptureOutputToFile"], [432, 1, 1, "", "CpuInfo"], [432, 2, 1, "", "Dequantize"], [432, 1, 1, "", "DotDict"], [432, 1, 1, "", "GLOBAL_STATE"], [432, 1, 1, "", "LazyImport"], [432, 1, 1, "", "MODE"], [432, 1, 1, "", "OpEntry"], [432, 1, 1, "", "Statistics"], [432, 2, 1, "", "alias_param"], [432, 2, 1, "", "calculate_mse"], [432, 2, 1, "", "check_key_exist"], [432, 2, 1, "", "combine_histogram"], [432, 2, 1, "", "compare_objects"], [432, 2, 1, "", "compute_sparsity"], [432, 2, 1, "", "dequantize_weight"], [432, 2, 1, "", "dump_class_attrs"], [432, 2, 1, "", "dump_data_to_local"], [432, 2, 1, "", "dump_elapsed_time"], [432, 2, 1, "", "dump_table"], [432, 2, 1, "", "dump_table_to_csv"], [432, 2, 1, "", "equal_dicts"], [432, 2, 1, "", "fault_tolerant_file"], [432, 2, 1, "", "get_all_fp32_data"], [432, 2, 1, "", "get_number_of_sockets"], [432, 2, 1, "", "get_op_list"], [432, 2, 1, "", "get_size"], [432, 2, 1, "", "get_tensor_histogram"], [432, 2, 1, "", "get_tensors_info"], [432, 2, 1, "", "get_tuning_history"], [432, 2, 1, "", "get_weights_details"], [432, 2, 1, "", "load_data_from_pkl"], [432, 2, 1, "", "mse_metric_gap"], [432, 2, 1, "", "print_op_list"], [432, 2, 1, "", "print_table"], [432, 2, 1, "", "recover"], [432, 2, 1, "", "set_random_seed"], [432, 2, 1, "", "set_resume_from"], [432, 2, 1, "", "set_tensorboard"], [432, 2, 1, "", "set_workspace"], [432, 2, 1, "", "show_memory_info"], [432, 2, 1, "", "singleton"], [432, 2, 1, "", "str2array"], [432, 2, 1, "", "time_limit"], [432, 2, 1, "", "version1_eq_version2"], [432, 2, 1, "", "version1_gt_version2"], [432, 2, 1, "", "version1_gte_version2"], [432, 2, 1, "", "version1_lt_version2"], [432, 2, 1, "", "version1_lte_version2"]], "neural_compressor.utils.weights_details": [[433, 1, 1, "", "WeightsDetails"], [433, 1, 1, "", "WeightsStatistics"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:function", "3": "py:exception", "4": "py:attribute", "5": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "function", "Python function"], "3": ["py", "exception", "Python exception"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "data", "Python data"]}, "titleterms": {"block_mask": [0, 200], "neural_compressor": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434], "adaptor": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 442, 443, 445], "modul": [1, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 113, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 175, 177, 178, 180, 181, 184, 185, 187, 189, 191, 192, 193, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 243, 244, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 262, 263, 264, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 286, 288, 289, 290, 292, 293, 294, 295, 297, 298, 300, 301, 302, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 316, 317, 318, 319, 322, 323, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 345, 346, 347, 348, 350, 351, 353, 354, 355, 357, 358, 359, 361, 362, 363, 364, 365, 366, 367, 368, 370, 372, 374, 375, 376, 377, 379, 380, 382, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 406, 407, 408, 409, 410, 412, 414, 415, 417, 419, 420, 421, 422, 424, 426, 427, 428, 429, 430, 431, 432, 433], "content": [1, 2, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 113, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 177, 178, 180, 181, 184, 185, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 345, 346, 347, 348, 350, 351, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 372, 374, 375, 376, 377, 379, 380, 382, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 406, 407, 408, 409, 410, 412, 414, 415, 417, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 441, 508], "class": [1, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 113, 115, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 150, 151, 152, 156, 160, 161, 162, 164, 167, 168, 169, 170, 171, 173, 175, 177, 178, 180, 184, 185, 187, 191, 192, 193, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 215, 216, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 262, 263, 264, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 295, 296, 297, 300, 303, 304, 305, 306, 307, 308, 310, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 324, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 345, 346, 347, 348, 350, 353, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 372, 374, 375, 376, 377, 379, 380, 382, 384, 386, 387, 389, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 406, 407, 408, 409, 410, 412, 417, 421, 422, 425, 426, 427, 428, 430, 432, 433, 442, 508], "function": [1, 13, 16, 34, 42, 43, 44, 45, 67, 68, 70, 104, 105, 116, 118, 148, 150, 151, 152, 157, 158, 159, 162, 163, 165, 166, 167, 169, 172, 173, 175, 178, 180, 181, 184, 185, 187, 188, 189, 191, 193, 194, 198, 201, 207, 208, 209, 210, 211, 213, 222, 223, 231, 233, 237, 240, 241, 242, 245, 247, 248, 249, 250, 252, 254, 255, 257, 266, 274, 276, 280, 283, 284, 285, 287, 288, 289, 292, 293, 294, 297, 298, 300, 301, 302, 303, 304, 311, 318, 322, 327, 328, 329, 331, 336, 342, 346, 348, 350, 351, 353, 354, 355, 356, 357, 358, 362, 366, 368, 385, 390, 391, 395, 403, 407, 409, 410, 412, 414, 415, 417, 419, 420, 421, 424, 425, 427, 428, 429, 431, 432, 467], "subpackag": [2, 17, 87, 111, 112, 114, 153, 186, 188, 217, 242, 260, 285, 296, 320, 338, 349, 399], "submodul": [2, 12, 17, 29, 51, 76, 87, 95, 101, 106, 111, 112, 114, 117, 130, 145, 153, 154, 169, 174, 179, 182, 186, 188, 190, 194, 201, 214, 218, 225, 237, 241, 245, 252, 261, 268, 280, 284, 287, 291, 296, 303, 309, 315, 321, 325, 338, 344, 349, 356, 360, 371, 373, 378, 381, 383, 388, 399, 405, 411, 425], "packag": [2, 29, 169, 188, 194, 201, 225, 237, 241, 242, 245, 252, 268, 280, 284, 285, 287, 296, 303, 315, 320, 321, 338, 356, 360, 399, 425, 491, 493, 495, 496], "kera": 3, "keras_util": [4, 5, 6, 7, 8, 9, 10], "conv2d": 4, "dens": 5, "depthwise_conv2d": 6, "pool2d": 8, "quantiz": [9, 41, 156, 332, 391, 417, 418, 419, 438, 441, 443, 444, 456, 460, 464, 466, 469, 472, 475, 478, 479, 487, 498, 500, 501, 502, 503, 511, 512, 513, 519, 520, 521, 522, 525, 531], "separable_conv2d": 10, "mxnet": [11, 462, 477, 520, 527], "mxnet_util": [12, 13], "util": [13, 43, 148, 158, 165, 176, 181, 211, 343, 344, 345, 346, 347, 348, 385, 390, 404, 405, 406, 407, 408, 409, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 447], "onnxrt": [14, 462, 477, 527], "ox_util": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44], "calibr": [15, 16, 443, 460], "oper": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 443, 444], "activ": [18, 501], "argmax": 19, "attent": 20, "binary_op": 21, "concat": 22, "conv": 23, "direct_q8": 24, "embed_layernorm": 25, "gather": 26, "gavgpool": 27, "gemm": 28, "lstm": 30, "matmul": [31, 525], "maxpool": 32, "norm": 33, "op": [34, 469], "pad": 35, "pool": 36, "reduc": 37, "resiz": 38, "split": [39, 504], "unary_op": 40, "smooth_quant": [42, 162, 170], "weight_onli": [44, 166], "pytorch": [45, 431, 462, 467, 469, 477, 502, 520, 521, 526, 527, 531], "queri": [46, 442, 506, 511, 512, 513], "tensorflow": [47, 462, 467, 469, 477, 520, 521, 526, 527, 531], "tf_util": [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148], "graph_convert": 48, "graph_converter_without_calib": 49, "graph_rewrit": [50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109], "bf16": [50, 51, 479], "bf16_convert": [50, 150], "gener": [52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 443], "convert_add_to_biasadd": 52, "convert_layout": 53, "convert_leakyrelu": 54, "convert_nan_to_random": 55, "convert_placeholder_to_const": 56, "dequantize_cast_optim": 57, "dilated_contract": 58, "dummy_biasadd": 59, "expanddims_optim": 60, "fetch_weight_from_reshap": 61, "fold_batch_norm": 62, "fold_const": 63, "fuse_biasadd_add": 64, "fuse_column_wise_mul": 65, "fuse_conv_with_math": 66, "fuse_decomposed_bn": 67, "fuse_decomposed_in": 68, "fuse_gelu": 69, "fuse_layer_norm": 70, "fuse_pad_with_conv": 71, "fuse_pad_with_fp32_conv": 72, "fuse_reshape_transpos": 73, "graph_cse_optim": 74, "grappler_pass": 75, "insert_print_nod": 77, "move_squeeze_after_relu": 78, "pre_optim": 79, "remove_training_nod": 80, "rename_batch_norm": 81, "split_shared_input": 82, "strip_equivalent_nod": 83, "strip_unused_nod": 84, "switch_optim": 85, "graph_bas": 86, "int8": [88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 469, 531], "freeze_fake_qu": 88, "freeze_valu": 89, "freeze_value_without_calib": 90, "fuse_conv_redundant_dequant": 91, "fuse_conv_requant": 92, "fuse_matmul_redundant_dequant": 93, "fuse_matmul_requant": 94, "meta_op_optim": 96, "post_hostconst_convert": 97, "post_quantized_op_cs": 98, "rnn_convert": 99, "scale_propag": 100, "onnx": [101, 102, 103, 104, 105, 446, 475, 520, 531], "onnx_graph": 102, "onnx_nod": 103, "onnx_schema": 104, "tf2onnx_util": 105, "qdq": [106, 107, 108, 109, 123, 124, 125, 126, 127, 128, 129, 130, 131, 531], "insert_qdq_pattern": 107, "merge_duplicated_qdq": 108, "share_qdq_y_pattern": 109, "graph_util": 110, "quantize_graph": [112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138], "qat": [113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 531], "fake_quant": 113, "quantize_config": 115, "quantize_help": 116, "quantize_lay": [117, 118, 119, 120, 121], "optimize_lay": 118, "quantize_layer_add": 119, "quantize_layer_bas": 120, "quantize_layer_bn": 121, "quantize_wrapp": 122, "fuse_qdq_bn": 123, "fuse_qdq_concatv2": 124, "fuse_qdq_conv": 125, "fuse_qdq_deconv": 126, "fuse_qdq_in": 127, "fuse_qdq_matmul": 128, "fuse_qdq_pool": 129, "optimize_qdq": 131, "quantize_graph_bas": 132, "quantize_graph_bn": 133, "quantize_graph_concatv2": 134, "quantize_graph_conv": 135, "quantize_graph_for_intel_cpu": 136, "quantize_graph_matmul": 137, "quantize_graph_pool": 138, "quantize_graph_common": 139, "smooth_quant_calibr": 140, "smooth_quant_scal": 141, "tf2onnx_convert": 142, "transform_graph": [143, 144, 145, 146, 147], "bias_correct": 143, "graph_transform_bas": 144, "insert_log": 146, "rerange_quantized_concat": 147, "torch_util": [149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 257], "awq": 149, "gptq": [151, 412], "hawq_metr": 152, "layer_wise_qu": [154, 155, 156, 157, 158], "modified_pickl": 155, "torch_load": 157, "mixed_precis": [159, 305], "model_wrapp": 160, "pattern_detector": 161, "symbolic_trac": 163, "teq": 164, "algorithm": [167, 168, 169, 170, 171, 412, 413, 414, 415, 460, 522, 525, 528], "fast_bias_correct": 168, "weight_correct": 171, "benchmark": [172, 249, 450, 459, 464, 478, 519], "common": [173, 174, 175, 176, 250, 251, 252, 253, 254, 255, 256, 257, 438, 470], "base_config": 173, "logger": [175, 326, 428], "compress": [177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 259, 451, 522], "callback": 177, "distil": [178, 179, 180, 181, 290, 465, 466, 478, 519, 531], "criterion": [178, 250], "optim": [180, 255, 488, 498, 508, 511, 512, 513, 516, 517, 529], "hpo": [182, 183, 184, 185], "sa_optim": 183, "search_algorithm": [184, 312], "search_spac": 185, "pruner": [187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 318, 329], "criteria": [187, 437, 517, 528], "model_slim": [189, 190, 191, 192], "auto_slim": 189, "pattern_analyz": 191, "weight_slim": 192, "pattern": [193, 194, 195, 196, 197, 321, 322, 323, 327, 517], "base": [193, 198, 475, 507, 529], "mha": [195, 202], "ninm": 196, "nxm": 197, "basic": [199, 335, 394, 439, 528], "pattern_lock": [203, 317], "progress": [204, 504], "retrain_fre": 205, "sparse_gpt": 206, "prune": [207, 319, 330, 478, 517, 519, 531], "reg": 208, "schedul": [209, 331, 333, 517], "tf_criteria": 210, "conf": [212, 213, 214, 215], "config": [212, 216, 417, 452, 462, 515], "dotdict": 213, "pythonic_config": 215, "contrib": [217, 218, 219, 220, 260, 261, 262, 263], "strategi": [218, 219, 220, 261, 262, 263, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 457, 524, 528], "sigopt": [219, 262, 524, 528], "tpe": [220, 263, 528], "data": [221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 443, 444, 464, 468, 502], "dataload": [221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 251, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 461, 462], "base_dataload": [221, 264], "default_dataload": [223, 266], "fetcher": [224, 267], "attribut": [225, 233, 242, 276, 285, 296, 320, 360, 410, 425, 436], "mxnet_dataload": [226, 269], "onnxrt_dataload": [227, 270], "pytorch_dataload": [228, 271], "sampler": [229, 272], "tensorflow_dataload": [230, 273], "dataset": [231, 232, 233, 234, 235, 236, 237, 238, 274, 275, 276, 277, 278, 279, 280, 281, 462, 464, 473, 503], "bert_dataset": [231, 274], "coco_dataset": [232, 275], "dummy_dataset": [234, 277], "dummy_dataset_v2": [235, 278], "imagenet_dataset": [236, 279], "style_transfer_dataset": [238, 281], "filter": [239, 240, 241, 282, 283, 284], "coco_filt": [239, 282], "transform": [243, 244, 245, 246, 247, 248, 286, 287, 288, 289, 473, 527], "coco_transform": 243, "imagenet_transform": [244, 286], "postprocess": [246, 256], "token": [247, 288], "experiment": [249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348], "metric": [253, 297, 298, 299, 300, 301, 302, 303, 304, 350, 351, 352, 353, 354, 355, 356, 357, 473, 477], "model": [254, 359, 360, 361, 362, 363, 364, 365, 366, 367, 443, 454, 469, 472, 475, 478, 480, 487, 501, 502, 503, 511, 512, 513, 517, 522, 525, 531], "compon": 258, "export": [291, 292, 293, 294, 469, 522], "qlinear2qdq": 292, "tf2onnx": 293, "torch2onnx": 294, "graph_optim": 295, "bleu": [297, 350], "bleu_util": [298, 351], "coco_label_map": [299, 352], "coco_tool": [300, 353], "evaluate_squad": [301, 354], "f1": [302, 355], "model_convers": 306, "na": [307, 308, 309, 310, 311, 312, 439, 519], "basic_na": 307, "dyna": 308, "nas_util": 311, "pruner_legaci": [313, 314, 315, 316, 317, 318], "gradient_sensit": 313, "group_lasso": 314, "magnitud": 316, "pruning_recip": [320, 321, 322, 323], "tile_pattern": 323, "pruning_v2": 324, "pytorch_prun": [325, 326, 327, 328, 329, 330, 331], "prune_util": 328, "auto_mixed_precis": [334, 393], "bayesian": [336, 395, 528], "exhaust": [337, 397, 528], "mse": [339, 400, 528], "mse_v2": [340, 401, 528], "random": [341, 402, 528], "constant": [343, 404, 423], "tuning_sampl": [345, 406], "tuning_spac": [346, 407], "tuning_struct": [347, 408], "mix_precis": 358, "base_model": 359, "keras_model": 361, "mxnet_model": 363, "nets_factori": 364, "onnx_model": 365, "tensorflow_model": 366, "torch_model": 367, "object": [368, 455, 511, 512, 513, 515], "profil": [369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 464], "parser": [370, 371, 372, 373, 374, 375, 376, 377, 378, 379], "factori": [370, 372, 377, 380, 382, 387], "onnx_pars": [372, 373, 374], "result": [376, 501, 503, 511, 512, 513], "tensorflow_pars": [377, 378, 379], "onnxrt_profil": [382, 383, 384, 385], "tensorflow_profil": [387, 388, 389, 390], "auto": [392, 492, 498, 521, 525, 528], "conserv": [396, 528], "hawq_v2": [398, 528], "templat": [410, 411, 437], "api_doc_exampl": 410, "torch": [412, 413, 414, 415, 416, 417, 418, 419, 420, 447, 531], "rtn": 414, "weight_only_algo": 415, "train": [421, 438, 458, 467, 478, 517, 520], "collect_layer_histogram": 422, "create_obj_from_config": 424, "kl_diverg": 426, "load_huggingfac": 427, "neural_insights_util": 429, "option": [430, 467, 486], "weights_detail": 433, "version": 434, "intel": [435, 441, 461, 464, 474, 475, 477, 478, 484, 492, 498, 531, 532], "neural": [435, 438, 439, 441, 461, 464, 474, 475, 477, 478, 481, 485, 487, 492, 498, 500, 501, 502, 503, 505, 506, 507, 511, 512, 513, 517, 524, 529, 532], "compressor": [435, 438, 441, 461, 464, 474, 475, 477, 478, 492, 498, 524, 532], "document": [435, 441, 448, 532], "section": [435, 532], "contributor": [436, 437], "coven": [436, 437], "code": [436, 437, 439, 478, 499, 504, 522, 529], "conduct": [436, 437], "our": [436, 525], "pledg": 436, "standard": 436, "respons": [436, 507], "scope": [436, 517], "enforc": 436, "contribut": [437, 491, 495], "guidelin": 437, "creat": [437, 504], "pull": 437, "request": [437, 479, 509], "step": [437, 500, 501, 502, 503], "checklist": 437, "accept": 437, "statu": [437, 506, 507], "check": 437, "overview": [437, 508, 529], "support": [437, 438, 439, 442, 444, 459, 460, 461, 462, 464, 465, 466, 467, 469, 471, 474, 475, 477, 479, 480, 482, 483, 487, 488, 515, 516, 517, 519, 520, 522, 525, 526, 527, 530], "fx": 438, "introduct": [438, 439, 442, 443, 444, 459, 460, 461, 462, 464, 465, 466, 467, 469, 471, 474, 477, 479, 480, 498, 501, 502, 503, 515, 516, 517, 519, 520, 522, 524, 525, 526, 527, 528, 530], "mode": [438, 531], "matrix": [438, 439, 442, 459, 460, 461, 462, 464, 465, 466, 467, 469, 471, 474, 477, 479, 480, 483, 515, 516, 517, 519, 520, 522, 525, 526, 530], "get": [438, 439, 441, 442, 459, 461, 462, 464, 465, 466, 467, 471, 472, 477, 479, 481, 492, 499, 500, 504, 505, 506, 507, 515, 516, 517, 519, 520, 526, 530], "start": [438, 439, 441, 442, 459, 461, 462, 464, 465, 466, 467, 471, 472, 477, 479, 481, 482, 486, 492, 500, 504, 505, 506, 511, 512, 513, 515, 516, 517, 519, 520, 526, 530], "post": [438, 478, 507, 520], "static": [438, 520], "dynam": [438, 439, 520], "awar": [438, 478, 517, 520], "exampl": [438, 439, 442, 448, 459, 461, 462, 464, 465, 466, 467, 468, 469, 477, 478, 479, 480, 483, 487, 500, 501, 502, 503, 505, 510, 511, 512, 513, 515, 516, 517, 520, 522, 525, 526, 531], "note": [438, 523], "detail": 438, "problem": 438, "architectur": [439, 463, 474, 475], "search": [439, 498], "api": [439, 441, 442, 443, 448, 449, 459, 461, 462, 465, 466, 467, 472, 473, 477, 479, 481, 485, 499, 500, 507, 513, 515, 516, 517, 519, 529], "usag": [439, 487, 498, 507, 526, 528], "1": [439, 467, 470, 473, 478, 498, 505, 506, 531], "python": [439, 441, 461, 472, 477, 481, 485, 486, 493, 496, 500, 519, 529], "yaml": [439, 443, 462, 467, 471, 530], "2": [439, 467, 470, 473, 478, 498, 505, 506, 531], "onli": [439, 522], "advanc": [439, 504, 529], "custom": [439, 461, 477, 511, 528], "secur": [440, 467], "polici": [440, 528], "report": 440, "vulner": 440, "instal": [441, 464, 475, 482, 484, 491, 492, 495, 500, 505, 506], "from": [441, 443, 475, 478, 500, 505, 506], "pypi": [441, 487, 500], "select": [441, 492], "public": [441, 518], "event": [441, 518], "addit": 441, "commun": 441, "work": [442, 505, 520], "flow": [442, 520], "background": [442, 498], "ad": 442, "new": [442, 444, 493, 496, 528], "backend": [442, 520], "capabl": [442, 522], "implement": [442, 443], "onnxrtadaptor": 442, "how": [443, 444, 464, 501, 502, 503, 505], "add": [443, 506], "an": [443, 511, 512, 513], "list": [443, 468, 510, 527], "need": 443, "design": [443, 463, 508, 528], "framework": [443, 461, 462, 469, 471, 480, 519, 522, 525], "query_fw_cap": 443, "accord": [443, 444], "tune_cfg": 443, "prepar": [443, 464, 501, 502, 503, 524], "fp32": [443, 469], "graph": 443, "run": [443, 464, 499, 501, 502, 503, 504], "sampl": [443, 472], "iter": 443, "calcul": 443, "rang": 443, "type": [444, 517], "like": 444, "int4": 444, "few": 444, "line": 444, "chang": [444, 473, 497, 499, 523], "defin": [444, 467], "abil": 444, "specif": [444, 462], "invok": 444, "kernel": 444, "tune": [444, 520, 522, 525, 528], "configur": [444, 467, 471, 504, 519, 524, 530], "us": [444, 461, 477, 505, 506], "summari": [444, 501], "runtim": [446, 475, 520, 531], "mix": [453, 478, 479, 521], "precis": [453, 478, 479, 521], "refer": [460, 517, 520, 522, 525], "build": [461, 470, 477, 504, 505, 506], "file": [462, 471, 530], "user": [462, 467, 473, 519, 522, 529, 530], "workflow": [463, 508], "diagnosi": [464, 500], "featur": [464, 467, 471, 474, 487, 488, 492, 519, 520, 526, 530], "modifi": 464, "script": [464, 504], "see": 464, "do": [464, 481], "paramet": [464, 507], "descript": [464, 507, 509], "suggest": 464, "fallback": 464, "set": [464, 484, 498], "knowledg": [465, 531], "intermedi": 465, "layer": [465, 522, 525], "self": 465, "distribut": [467, 487, 528], "infer": 467, "evalu": 467, "pure": 467, "horovodrun": 467, "execut": 467, "releas": [468, 493, 496, 523], "appendix": 469, "frequent": 470, "ask": 470, "question": 470, "issu": [470, 523], "3": [470, 482, 498], "4": [470, 489, 498, 518], "quick": [472, 486], "valid": [472, 475, 525, 531], "incompat": [473, 523], "between": 473, "v1": 473, "face": [473, 512, 513], "built": [473, 475, 477], "infrastructur": 474, "linux": 475, "prerequisit": [475, 505, 506], "binari": 475, "sourc": [475, 500, 502, 503, 505, 506], "ai": 475, "kit": 475, "window": 475, "system": 475, "requir": [475, 491, 495, 501, 502, 503, 511], "hardwar": [475, 479, 531], "environ": [475, 484], "cpu": [475, 484, 531], "64": 475, "compat": 475, "processor": 475, "gpu": 475, "": [475, 499, 505], "xe": 475, "multipl": [475, 515, 531], "vendor": 475, "through": [475, 531], "softwar": [475, 479], "legal": 476, "inform": 476, "licens": 476, "citat": 476, "trademark": 476, "migrat": 478, "x": 478, "orchestr": [478, 516], "fp16": 479, "dure": [479, 521], "accuraci": [479, 501, 503, 520, 528], "driven": 479, "coder": [481, 485, 487, 498, 529], "what": [481, 499, 505], "we": 481, "offer": 481, "jupyt": [481, 482, 493, 496], "lab": [481, 482], "extens": [481, 491, 492, 495, 498, 499, 508, 531], "launcher": [481, 486], "contact": [481, 505], "aw": 482, "amazon": 482, "sagemak": 482, "For": 482, "studio": 482, "notebook": 482, "instanc": 482, "guid": [482, 529], "bigdl": 483, "nano": 483, "platform": [484, 524], "best": [484, 492], "perform": [484, 524], "mkl": 484, "openmp": 484, "jemalloc": 484, "numa": 484, "control": 484, "variabl": 484, "frequenc": 484, "govern": 484, "enabl": [485, 492, 498], "bench": 485, "superbench": 485, "argument": 486, "v0": 489, "highlight": 489, "other": 489, "changelog": [490, 494], "neural_compressor_ext_lab": [491, 493], "uninstal": [491, 495], "develop": [491, 495], "jupyterlab": 492, "Or": 492, "let": 492, "u": 492, "help": 492, "you": 492, "pre": 492, "requisit": 492, "make": [493, 496, 499, 504], "manual": [493, 496], "npm": [493, 496, 504], "autom": [493, 496], "publish": [493, 496], "conda": [493, 496], "forg": [493, 496], "neural_compressor_ext_lab_alibaba": [495, 496], "log": [497, 506, 507], "unreleas": 497, "vscode": 498, "open": [498, 503], "icon": 498, "5": 498, "welcom": 499, "your": 499, "v": 499, "folder": 499, "setup": 499, "up": 499, "straight": 499, "awai": 499, "explor": 499, "test": [499, 504], "go": 499, "further": 499, "insight": [500, 501, 502, 503], "tensor": [500, 525], "dump": [500, 502], "research": 500, "collabor": 500, "debug": [501, 503], "analyz": [501, 503, 504], "weight": [501, 502, 503, 522], "histogram": 503, "react": 504, "app": 504, "avail": 504, "eject": 504, "learn": [504, 505], "more": [504, 505], "bundl": 504, "size": 504, "web": 504, "deploy": [504, 517], "fail": 504, "minifi": 504, "solut": [505, 506, 507, 511, 512, 513], "why": 505, "doe": 505, "method": [505, 506], "pip": [505, 506], "end": [505, 511, 512, 513], "servic": [506, 508, 511, 512, 513], "submit": [506, 507, 511, 512, 513], "task": [506, 507, 509, 511, 512, 513], "stop": [506, 511, 512, 513], "inspect": 506, "manag": [506, 511, 512], "resourc": [506, 511, 512], "node": 506, "state": 506, "cluster": [506, 507], "remov": 506, "url": 507, "endpoint": 507, "task_id": 507, "websocket": 507, "screen": 507, "ping": 507, "download": [507, 511, 512], "doc": 508, "wip": 508, "oaa": 508, "definit": 508, "diagram": 508, "hug": [512, 513], "grpc": 513, "client": 514, "singl": 515, "One": 516, "shot": 516, "network": 517, "sparsiti": 517, "decai": 517, "regular": 517, "larg": 517, "languag": 517, "retrain": 517, "free": 517, "spars": 517, "hyperparamet": 517, "full": 518, "78": 518, "2023": 518, "24": 518, "2022": 518, "35": 518, "2021": 518, "15": [518, 531], "2018": 518, "2020": 518, "style": 519, "access": 519, "fundament": [520, 525], "scheme": 520, "ipex": 520, "approach": 520, "With": 520, "without": 520, "specifi": 520, "rule": 520, "recip": 520, "devic": 520, "turn": 521, "off": 521, "woq": [522, 531], "wise": [522, 525], "known": 523, "benefit": 524, "comparison": 524, "differ": 524, "smooth": 525, "quant": 525, "per": 525, "channel": 525, "limit": 525, "smoothquant": 525, "enhanc": 525, "alpha": 525, "engin": 525, "tensorboard": 526, "space": 528, "exit": 528, "process": 528, "zero": 529, "topic": 529, "innov": 529, "product": 529, "13": 531, "0": 531, "ptq": 531}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"block_mask": [[0, "module-block_mask"]], "neural_compressor.adaptor.adaptor": [[1, "module-neural_compressor.adaptor.adaptor"]], "Module Contents": [[1, "module-contents"], [3, "module-contents"], [11, "module-contents"], [13, "module-contents"], [14, "module-contents"], [15, "module-contents"], [16, "module-contents"], [18, "module-contents"], [19, "module-contents"], [20, "module-contents"], [21, "module-contents"], [22, "module-contents"], [23, "module-contents"], [24, "module-contents"], [25, "module-contents"], [26, "module-contents"], [27, "module-contents"], [28, "module-contents"], [30, "module-contents"], [31, "module-contents"], [32, "module-contents"], [33, "module-contents"], [34, "module-contents"], [35, "module-contents"], [36, "module-contents"], [37, "module-contents"], [38, "module-contents"], [39, "module-contents"], [40, "module-contents"], [41, "module-contents"], [42, "module-contents"], [43, "module-contents"], [44, "module-contents"], [45, "module-contents"], [46, "module-contents"], [47, "module-contents"], [48, "module-contents"], [49, "module-contents"], [50, "module-contents"], [52, "module-contents"], [53, "module-contents"], [54, "module-contents"], [55, "module-contents"], [56, "module-contents"], [57, "module-contents"], [58, "module-contents"], [59, "module-contents"], [60, "module-contents"], [61, "module-contents"], [62, "module-contents"], [63, "module-contents"], [64, "module-contents"], [65, "module-contents"], [66, "module-contents"], [67, "module-contents"], [68, "module-contents"], [69, "module-contents"], [70, "module-contents"], [71, "module-contents"], [72, "module-contents"], [73, "module-contents"], [74, "module-contents"], [75, "module-contents"], [77, "module-contents"], [78, "module-contents"], [79, "module-contents"], [80, "module-contents"], [81, "module-contents"], [82, "module-contents"], [83, "module-contents"], [84, "module-contents"], [85, "module-contents"], [86, "module-contents"], [88, "module-contents"], [89, "module-contents"], [90, "module-contents"], [91, "module-contents"], [92, "module-contents"], [93, "module-contents"], [94, "module-contents"], [96, "module-contents"], [97, "module-contents"], [98, "module-contents"], [99, "module-contents"], [100, "module-contents"], [102, "module-contents"], [103, "module-contents"], [104, "module-contents"], [105, "module-contents"], [107, "module-contents"], [108, "module-contents"], [109, "module-contents"], [110, "module-contents"], [113, "module-contents"], [115, "module-contents"], [116, "module-contents"], [118, "module-contents"], [119, "module-contents"], [120, "module-contents"], [121, "module-contents"], [122, "module-contents"], [123, "module-contents"], [124, "module-contents"], [125, "module-contents"], [126, "module-contents"], [127, "module-contents"], [128, "module-contents"], [129, "module-contents"], [131, "module-contents"], [132, "module-contents"], [133, "module-contents"], [134, "module-contents"], [135, "module-contents"], [136, "module-contents"], [137, "module-contents"], [138, "module-contents"], [139, "module-contents"], [140, "module-contents"], [141, "module-contents"], [142, "module-contents"], [143, "module-contents"], [144, "module-contents"], [146, "module-contents"], [147, "module-contents"], [148, "module-contents"], [149, "module-contents"], [150, "module-contents"], [151, "module-contents"], [152, "module-contents"], [155, "module-contents"], [156, "module-contents"], [157, "module-contents"], [158, "module-contents"], [159, "module-contents"], [160, "module-contents"], [161, "module-contents"], [162, "module-contents"], [163, "module-contents"], [164, "module-contents"], [165, "module-contents"], [166, "module-contents"], [167, "module-contents"], [168, "module-contents"], [170, "module-contents"], [171, "module-contents"], [172, "module-contents"], [173, "module-contents"], [175, "module-contents"], [177, "module-contents"], [178, "module-contents"], [180, "module-contents"], [181, "module-contents"], [184, "module-contents"], [185, "module-contents"], [187, "module-contents"], [189, "module-contents"], [191, "module-contents"], [192, "module-contents"], [193, "module-contents"], [195, "module-contents"], [196, "module-contents"], [197, "module-contents"], [198, "module-contents"], [199, "module-contents"], [200, "module-contents"], [202, "module-contents"], [203, "module-contents"], [204, "module-contents"], [205, "module-contents"], [206, "module-contents"], [207, "module-contents"], [208, "module-contents"], [209, "module-contents"], [210, "module-contents"], [211, "module-contents"], [212, "module-contents"], [213, "module-contents"], [215, "module-contents"], [216, "module-contents"], [219, "module-contents"], [220, "module-contents"], [221, "module-contents"], [222, "module-contents"], [223, "module-contents"], [224, "module-contents"], [226, "module-contents"], [227, "module-contents"], [228, "module-contents"], [229, "module-contents"], [230, "module-contents"], [231, "module-contents"], [232, "module-contents"], [233, "module-contents"], [234, "module-contents"], [235, "module-contents"], [236, "module-contents"], [238, "module-contents"], [239, "module-contents"], [240, "module-contents"], [243, "module-contents"], [244, "module-contents"], [246, "module-contents"], [247, "module-contents"], [248, "module-contents"], [249, "module-contents"], [250, "module-contents"], [251, "module-contents"], [253, "module-contents"], [254, "module-contents"], [255, "module-contents"], [256, "module-contents"], [257, "module-contents"], [258, "module-contents"], [262, "module-contents"], [263, "module-contents"], [264, "module-contents"], [266, "module-contents"], [267, "module-contents"], [269, "module-contents"], [270, "module-contents"], [271, "module-contents"], [272, "module-contents"], [273, "module-contents"], [274, "module-contents"], [275, "module-contents"], [276, "module-contents"], [277, "module-contents"], [278, "module-contents"], [279, "module-contents"], [281, "module-contents"], [282, "module-contents"], [283, "module-contents"], [286, "module-contents"], [288, "module-contents"], [289, "module-contents"], [290, "module-contents"], [292, "module-contents"], [293, "module-contents"], [294, "module-contents"], [295, "module-contents"], [297, "module-contents"], [298, "module-contents"], [300, "module-contents"], [301, "module-contents"], [302, "module-contents"], [304, "module-contents"], [305, "module-contents"], [306, "module-contents"], [307, "module-contents"], [308, "module-contents"], [310, "module-contents"], [311, "module-contents"], [312, "module-contents"], [313, "module-contents"], [314, "module-contents"], [316, "module-contents"], [317, "module-contents"], [318, "module-contents"], [319, "module-contents"], [322, "module-contents"], [323, "module-contents"], [324, "module-contents"], [327, "module-contents"], [328, "module-contents"], [329, "module-contents"], [330, "module-contents"], [331, "module-contents"], [332, "module-contents"], [333, "module-contents"], [334, "module-contents"], [335, "module-contents"], [336, "module-contents"], [337, "module-contents"], [339, "module-contents"], [340, "module-contents"], [341, "module-contents"], [342, "module-contents"], [345, "module-contents"], [346, "module-contents"], [347, "module-contents"], [348, "module-contents"], [350, "module-contents"], [351, "module-contents"], [353, "module-contents"], [354, "module-contents"], [355, "module-contents"], [357, "module-contents"], [358, "module-contents"], [359, "module-contents"], [361, "module-contents"], [362, "module-contents"], [363, "module-contents"], [364, "module-contents"], [365, "module-contents"], [366, "module-contents"], [367, "module-contents"], [368, "module-contents"], [370, "module-contents"], [372, "module-contents"], [374, "module-contents"], [375, "module-contents"], [376, "module-contents"], [377, "module-contents"], [379, "module-contents"], [380, "module-contents"], [382, "module-contents"], [384, "module-contents"], [385, "module-contents"], [386, "module-contents"], [387, "module-contents"], [389, "module-contents"], [390, "module-contents"], [391, "module-contents"], [392, "module-contents"], [393, "module-contents"], [394, "module-contents"], [395, "module-contents"], [396, "module-contents"], [397, "module-contents"], [398, "module-contents"], [400, "module-contents"], [401, "module-contents"], [402, "module-contents"], [403, "module-contents"], [406, "module-contents"], [407, "module-contents"], [408, "module-contents"], [409, "module-contents"], [410, "module-contents"], [412, "module-contents"], [414, "module-contents"], [415, "module-contents"], [417, "module-contents"], [419, "module-contents"], [420, "module-contents"], [421, "module-contents"], [422, "module-contents"], [424, "module-contents"], [426, "module-contents"], [427, "module-contents"], [428, "module-contents"], [429, "module-contents"], [430, "module-contents"], [431, "module-contents"], [432, "module-contents"], [433, "module-contents"]], "Classes": [[1, "classes"], [3, "classes"], [11, "classes"], [13, "classes"], [14, "classes"], [15, "classes"], [16, "classes"], [18, "classes"], [19, "classes"], [20, "classes"], [21, "classes"], [22, "classes"], [23, "classes"], [24, "classes"], [25, "classes"], [26, "classes"], [27, "classes"], [28, "classes"], [30, "classes"], [31, "classes"], [32, "classes"], [33, "classes"], [34, "classes"], [35, "classes"], [36, "classes"], [37, "classes"], [38, "classes"], [39, "classes"], [40, "classes"], [41, "classes"], [42, "classes"], [43, "classes"], [45, "classes"], [46, "classes"], [47, "classes"], [48, "classes"], [49, "classes"], [50, "classes"], [52, "classes"], [53, "classes"], [54, "classes"], [55, "classes"], [56, "classes"], [57, "classes"], [58, "classes"], [59, "classes"], [60, "classes"], [61, "classes"], [62, "classes"], [63, "classes"], [64, "classes"], [65, "classes"], [66, "classes"], [67, "classes"], [68, "classes"], [69, "classes"], [70, "classes"], [71, "classes"], [72, "classes"], [73, "classes"], [74, "classes"], [75, "classes"], [77, "classes"], [78, "classes"], [79, "classes"], [80, "classes"], [81, "classes"], [82, "classes"], [83, "classes"], [84, "classes"], [85, "classes"], [86, "classes"], [88, "classes"], [89, "classes"], [90, "classes"], [91, "classes"], [92, "classes"], [93, "classes"], [94, "classes"], [96, "classes"], [97, "classes"], [98, "classes"], [99, "classes"], [100, "classes"], [102, "classes"], [103, "classes"], [104, "classes"], [105, "classes"], [107, "classes"], [108, "classes"], [109, "classes"], [110, "classes"], [113, "classes"], [115, "classes"], [119, "classes"], [120, "classes"], [121, "classes"], [122, "classes"], [123, "classes"], [124, "classes"], [125, "classes"], [126, "classes"], [127, "classes"], [128, "classes"], [129, "classes"], [131, "classes"], [132, "classes"], [133, "classes"], [134, "classes"], [135, "classes"], [136, "classes"], [137, "classes"], [138, "classes"], [139, "classes"], [140, "classes"], [141, "classes"], [142, "classes"], [143, "classes"], [144, "classes"], [146, "classes"], [147, "classes"], [149, "classes"], [150, "classes"], [151, "classes"], [152, "classes"], [156, "classes"], [160, "classes"], [161, "classes"], [162, "classes"], [164, "classes"], [167, "classes"], [168, "classes"], [169, "classes"], [170, "classes"], [171, "classes"], [173, "classes"], [175, "classes"], [177, "classes"], [178, "classes"], [180, "classes"], [184, "classes"], [185, "classes"], [187, "classes"], [191, "classes"], [192, "classes"], [193, "classes"], [195, "classes"], [196, "classes"], [197, "classes"], [198, "classes"], [199, "classes"], [200, "classes"], [202, "classes"], [203, "classes"], [204, "classes"], [205, "classes"], [206, "classes"], [207, "classes"], [208, "classes"], [209, "classes"], [210, "classes"], [212, "classes"], [213, "classes"], [215, "classes"], [216, "classes"], [219, "classes"], [220, "classes"], [221, "classes"], [222, "classes"], [223, "classes"], [224, "classes"], [225, "classes"], [226, "classes"], [227, "classes"], [228, "classes"], [229, "classes"], [230, "classes"], [231, "classes"], [232, "classes"], [233, "classes"], [234, "classes"], [235, "classes"], [236, "classes"], [237, "classes"], [238, "classes"], [239, "classes"], [240, "classes"], [241, "classes"], [242, "classes"], [243, "classes"], [244, "classes"], [245, "classes"], [246, "classes"], [247, "classes"], [248, "classes"], [249, "classes"], [250, "classes"], [251, "classes"], [252, "classes"], [253, "classes"], [254, "classes"], [255, "classes"], [256, "classes"], [258, "classes"], [262, "classes"], [263, "classes"], [264, "classes"], [266, "classes"], [267, "classes"], [269, "classes"], [270, "classes"], [271, "classes"], [272, "classes"], [273, "classes"], [274, "classes"], [275, "classes"], [276, "classes"], [277, "classes"], [278, "classes"], [279, "classes"], [280, "classes"], [281, "classes"], [282, "classes"], [283, "classes"], [284, "classes"], [285, "classes"], [286, "classes"], [287, "classes"], [288, "classes"], [289, "classes"], [290, "classes"], [295, "classes"], [296, "classes"], [297, "classes"], [300, "classes"], [303, "classes"], [304, "classes"], [305, "classes"], [306, "classes"], [307, "classes"], [308, "classes"], [310, "classes"], [312, "classes"], [313, "classes"], [314, "classes"], [316, "classes"], [317, "classes"], [318, "classes"], [319, "classes"], [320, "classes"], [321, "classes"], [322, "classes"], [323, "classes"], [324, "classes"], [327, "classes"], [329, "classes"], [330, "classes"], [331, "classes"], [332, "classes"], [333, "classes"], [334, "classes"], [335, "classes"], [336, "classes"], [337, "classes"], [339, "classes"], [340, "classes"], [341, "classes"], [342, "classes"], [345, "classes"], [346, "classes"], [347, "classes"], [348, "classes"], [350, "classes"], [353, "classes"], [356, "classes"], [357, "classes"], [359, "classes"], [360, "classes"], [361, "classes"], [362, "classes"], [363, "classes"], [364, "classes"], [365, "classes"], [366, "classes"], [367, "classes"], [368, "classes"], [370, "classes"], [372, "classes"], [374, "classes"], [375, "classes"], [376, "classes"], [377, "classes"], [379, "classes"], [380, "classes"], [382, "classes"], [384, "classes"], [386, "classes"], [387, "classes"], [389, "classes"], [392, "classes"], [393, "classes"], [394, "classes"], [395, "classes"], [396, "classes"], [397, "classes"], [398, "classes"], [400, "classes"], [401, "classes"], [402, "classes"], [403, "classes"], [406, "classes"], [407, "classes"], [408, "classes"], [409, "classes"], [410, "classes"], [412, "classes"], [417, "classes"], [421, "classes"], [422, "classes"], [425, "classes"], [426, "classes"], [427, "classes"], [428, "classes"], [430, "classes"], [432, "classes"], [433, "classes"]], "Functions": [[1, "functions"], [13, "functions"], [16, "functions"], [34, "functions"], [42, "functions"], [43, "functions"], [44, "functions"], [45, "functions"], [67, "functions"], [68, "functions"], [70, "functions"], [104, "functions"], [105, "functions"], [116, "functions"], [118, "functions"], [148, "functions"], [150, "functions"], [151, "functions"], [152, "functions"], [157, "functions"], [158, "functions"], [159, "functions"], [162, "functions"], [163, "functions"], [165, "functions"], [166, "functions"], [167, "functions"], [169, "functions"], [172, "functions"], [173, "functions"], [175, "functions"], [178, "functions"], [180, "functions"], [181, "functions"], [184, "functions"], [185, "functions"], [187, "functions"], [188, "functions"], [189, "functions"], [191, "functions"], [193, "functions"], [194, "functions"], [198, "functions"], [201, "functions"], [207, "functions"], [208, "functions"], [209, "functions"], [210, "functions"], [211, "functions"], [213, "functions"], [222, "functions"], [223, "functions"], [231, "functions"], [233, "functions"], [237, "functions"], [240, "functions"], [241, "functions"], [242, "functions"], [245, "functions"], [247, "functions"], [248, "functions"], [249, "functions"], [250, "functions"], [252, "functions"], [254, "functions"], [255, "functions"], [257, "functions"], [266, "functions"], [274, "functions"], [276, "functions"], [280, "functions"], [283, "functions"], [284, "functions"], [285, "functions"], [287, "functions"], [288, "functions"], [289, "functions"], [292, "functions"], [293, "functions"], [294, "functions"], [297, "functions"], [298, "functions"], [300, "functions"], [301, "functions"], [302, "functions"], [303, "functions"], [304, "functions"], [311, "functions"], [318, "functions"], [322, "functions"], [327, "functions"], [328, "functions"], [329, "functions"], [331, "functions"], [336, "functions"], [342, "functions"], [346, "functions"], [348, "functions"], [350, "functions"], [351, "functions"], [353, "functions"], [354, "functions"], [355, "functions"], [356, "functions"], [357, "functions"], [358, "functions"], [362, "functions"], [366, "functions"], [368, "functions"], [385, "functions"], [390, "functions"], [391, "functions"], [395, "functions"], [403, "functions"], [407, "functions"], [409, "functions"], [410, "functions"], [412, "functions"], [414, "functions"], [415, "functions"], [417, "functions"], [419, "functions"], [420, "functions"], [421, "functions"], [424, "functions"], [425, "functions"], [427, "functions"], [428, "functions"], [429, "functions"], [431, "functions"], [432, "functions"]], "neural_compressor.adaptor": [[2, "module-neural_compressor.adaptor"]], "Subpackages": [[2, "subpackages"], [17, "subpackages"], [87, "subpackages"], [111, "subpackages"], [112, "subpackages"], [114, "subpackages"], [153, "subpackages"], [186, "subpackages"], [188, "subpackages"], [217, "subpackages"], [242, "subpackages"], [260, "subpackages"], [285, "subpackages"], [296, "subpackages"], [320, "subpackages"], [338, "subpackages"], [349, "subpackages"], [399, "subpackages"]], "Submodules": [[2, "submodules"], [12, "submodules"], [17, "submodules"], [29, "submodules"], [51, "submodules"], [76, "submodules"], [87, "submodules"], [95, "submodules"], [101, "submodules"], [106, "submodules"], [111, "submodules"], [112, "submodules"], [114, "submodules"], [117, "submodules"], [130, "submodules"], [145, "submodules"], [153, "submodules"], [154, "submodules"], [169, "submodules"], [174, "submodules"], [179, "submodules"], [182, "submodules"], [186, "submodules"], [188, "submodules"], [190, "submodules"], [194, "submodules"], [201, "submodules"], [214, "submodules"], [218, "submodules"], [225, "submodules"], [237, "submodules"], [241, "submodules"], [245, "submodules"], [252, "submodules"], [261, "submodules"], [268, "submodules"], [280, "submodules"], [284, "submodules"], [287, "submodules"], [291, "submodules"], [296, "submodules"], [303, "submodules"], [309, "submodules"], [315, "submodules"], [321, "submodules"], [325, "submodules"], [338, "submodules"], [344, "submodules"], [349, "submodules"], [356, "submodules"], [360, "submodules"], [371, "submodules"], [373, "submodules"], [378, "submodules"], [381, "submodules"], [383, "submodules"], [388, "submodules"], [399, "submodules"], [405, "submodules"], [411, "submodules"], [425, "submodules"]], "Package Contents": [[2, "package-contents"], [29, "package-contents"], [169, "package-contents"], [188, "package-contents"], [194, "package-contents"], [201, "package-contents"], [225, "package-contents"], [237, "package-contents"], [241, "package-contents"], [242, "package-contents"], [245, "package-contents"], [252, "package-contents"], [268, "package-contents"], [280, "package-contents"], [284, "package-contents"], [285, "package-contents"], [287, "package-contents"], [296, "package-contents"], [303, "package-contents"], [315, "package-contents"], [320, "package-contents"], [321, "package-contents"], [338, "package-contents"], [356, "package-contents"], [360, "package-contents"], [399, "package-contents"], [425, "package-contents"]], "neural_compressor.adaptor.keras": [[3, "module-neural_compressor.adaptor.keras"]], "neural_compressor.adaptor.keras_utils.conv2d": [[4, "module-neural_compressor.adaptor.keras_utils.conv2d"]], "neural_compressor.adaptor.keras_utils.dense": [[5, "module-neural_compressor.adaptor.keras_utils.dense"]], "neural_compressor.adaptor.keras_utils.depthwise_conv2d": [[6, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"]], "neural_compressor.adaptor.keras_utils": [[7, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.pool2d": [[8, "module-neural_compressor.adaptor.keras_utils.pool2d"]], "neural_compressor.adaptor.keras_utils.quantizer": [[9, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "neural_compressor.adaptor.keras_utils.separable_conv2d": [[10, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"]], "neural_compressor.adaptor.mxnet": [[11, "module-neural_compressor.adaptor.mxnet"]], "neural_compressor.adaptor.mxnet_utils": [[12, "module-neural_compressor.adaptor.mxnet_utils"]], "neural_compressor.adaptor.mxnet_utils.util": [[13, "module-neural_compressor.adaptor.mxnet_utils.util"]], "neural_compressor.adaptor.onnxrt": [[14, "module-neural_compressor.adaptor.onnxrt"]], "neural_compressor.adaptor.ox_utils.calibration": [[15, "module-neural_compressor.adaptor.ox_utils.calibration"]], "neural_compressor.adaptor.ox_utils.calibrator": [[16, "module-neural_compressor.adaptor.ox_utils.calibrator"]], "neural_compressor.adaptor.ox_utils": [[17, "module-neural_compressor.adaptor.ox_utils"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[18, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[19, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[20, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[21, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[22, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[23, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[24, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[25, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[26, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[27, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[28, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[29, "module-neural_compressor.adaptor.ox_utils.operators"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[30, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[31, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[32, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "neural_compressor.adaptor.ox_utils.operators.norm": [[33, "module-neural_compressor.adaptor.ox_utils.operators.norm"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[34, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[35, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[36, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "neural_compressor.adaptor.ox_utils.operators.reduce": [[37, "module-neural_compressor.adaptor.ox_utils.operators.reduce"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[38, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "neural_compressor.adaptor.ox_utils.operators.split": [[39, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "neural_compressor.adaptor.ox_utils.operators.unary_op": [[40, "module-neural_compressor.adaptor.ox_utils.operators.unary_op"]], "neural_compressor.adaptor.ox_utils.quantizer": [[41, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "neural_compressor.adaptor.ox_utils.smooth_quant": [[42, "module-neural_compressor.adaptor.ox_utils.smooth_quant"]], "neural_compressor.adaptor.ox_utils.util": [[43, "module-neural_compressor.adaptor.ox_utils.util"]], "neural_compressor.adaptor.ox_utils.weight_only": [[44, "module-neural_compressor.adaptor.ox_utils.weight_only"]], "neural_compressor.adaptor.pytorch": [[45, "module-neural_compressor.adaptor.pytorch"]], "neural_compressor.adaptor.query": [[46, "module-neural_compressor.adaptor.query"]], "neural_compressor.adaptor.tensorflow": [[47, "module-neural_compressor.adaptor.tensorflow"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[48, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[49, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[109, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_util": [[110, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "neural_compressor.adaptor.tf_utils": [[111, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[112, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[138, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[139, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "neural_compressor.adaptor.tf_utils.smooth_quant_calibration": [[140, "module-neural_compressor.adaptor.tf_utils.smooth_quant_calibration"]], "neural_compressor.adaptor.tf_utils.smooth_quant_scaler": [[141, "module-neural_compressor.adaptor.tf_utils.smooth_quant_scaler"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[142, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[143, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[144, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[145, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[146, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[147, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.util": [[148, "module-neural_compressor.adaptor.tf_utils.util"]], "neural_compressor.adaptor.torch_utils.awq": [[149, "module-neural_compressor.adaptor.torch_utils.awq"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[150, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "neural_compressor.adaptor.torch_utils.gptq": [[151, "module-neural_compressor.adaptor.torch_utils.gptq"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[152, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[153, "module-neural_compressor.adaptor.torch_utils"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant": [[154, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle": [[155, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize": [[156, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load": [[157, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils": [[158, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.utils"]], "neural_compressor.adaptor.torch_utils.mixed_precision": [[159, "module-neural_compressor.adaptor.torch_utils.mixed_precision"]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[160, "module-neural_compressor.adaptor.torch_utils.model_wrapper"]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[161, "module-neural_compressor.adaptor.torch_utils.pattern_detector"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[162, "module-neural_compressor.adaptor.torch_utils.smooth_quant"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[163, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "neural_compressor.adaptor.torch_utils.teq": [[164, "module-neural_compressor.adaptor.torch_utils.teq"]], "neural_compressor.adaptor.torch_utils.util": [[165, "module-neural_compressor.adaptor.torch_utils.util"]], "}": [[165, "id3"]], "neural_compressor.adaptor.torch_utils.weight_only": [[166, "module-neural_compressor.adaptor.torch_utils.weight_only"]], "neural_compressor.algorithm.algorithm": [[167, "module-neural_compressor.algorithm.algorithm"]], "neural_compressor.algorithm.fast_bias_correction": [[168, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[169, "module-neural_compressor.algorithm"]], "neural_compressor.algorithm.smooth_quant": [[170, "module-neural_compressor.algorithm.smooth_quant"]], "neural_compressor.algorithm.weight_correction": [[171, "module-neural_compressor.algorithm.weight_correction"]], "neural_compressor.benchmark": [[172, "module-neural_compressor.benchmark"]], "neural_compressor.common.base_config": [[173, "module-neural_compressor.common.base_config"]], "neural_compressor.common": [[174, "module-neural_compressor.common"]], "neural_compressor.common.logger": [[175, "module-neural_compressor.common.logger"]], "neural_compressor.common.utility": [[176, "module-neural_compressor.common.utility"]], "neural_compressor.compression.callbacks": [[177, "module-neural_compressor.compression.callbacks"]], "neural_compressor.compression.distillation.criterions": [[178, "module-neural_compressor.compression.distillation.criterions"]], "neural_compressor.compression.distillation": [[179, "module-neural_compressor.compression.distillation"]], "neural_compressor.compression.distillation.optimizers": [[180, "module-neural_compressor.compression.distillation.optimizers"]], "neural_compressor.compression.distillation.utility": [[181, "module-neural_compressor.compression.distillation.utility"]], "neural_compressor.compression.hpo": [[182, "module-neural_compressor.compression.hpo"]], "neural_compressor.compression.hpo.sa_optimizer": [[183, "module-neural_compressor.compression.hpo.sa_optimizer"]], "neural_compressor.compression.hpo.search_algorithms": [[184, "module-neural_compressor.compression.hpo.search_algorithms"]], "neural_compressor.compression.hpo.search_space": [[185, "module-neural_compressor.compression.hpo.search_space"]], "neural_compressor.compression": [[186, "module-neural_compressor.compression"]], "neural_compressor.compression.pruner.criteria": [[187, "module-neural_compressor.compression.pruner.criteria"]], "neural_compressor.compression.pruner": [[188, "module-neural_compressor.compression.pruner"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[189, "module-neural_compressor.compression.pruner.model_slim.auto_slim"]], "neural_compressor.compression.pruner.model_slim": [[190, "module-neural_compressor.compression.pruner.model_slim"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[191, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[192, "module-neural_compressor.compression.pruner.model_slim.weight_slim"]], "neural_compressor.compression.pruner.patterns.base": [[193, "module-neural_compressor.compression.pruner.patterns.base"]], "neural_compressor.compression.pruner.patterns": [[194, "module-neural_compressor.compression.pruner.patterns"]], "neural_compressor.compression.pruner.patterns.mha": [[195, "module-neural_compressor.compression.pruner.patterns.mha"]], "neural_compressor.compression.pruner.patterns.ninm": [[196, "module-neural_compressor.compression.pruner.patterns.ninm"]], "neural_compressor.compression.pruner.patterns.nxm": [[197, "module-neural_compressor.compression.pruner.patterns.nxm"]], "neural_compressor.compression.pruner.pruners.base": [[198, "module-neural_compressor.compression.pruner.pruners.base"]], "neural_compressor.compression.pruner.pruners.basic": [[199, "module-neural_compressor.compression.pruner.pruners.basic"]], "neural_compressor.compression.pruner.pruners.block_mask": [[200, "module-neural_compressor.compression.pruner.pruners.block_mask"]], "neural_compressor.compression.pruner.pruners": [[201, "module-neural_compressor.compression.pruner.pruners"]], "neural_compressor.compression.pruner.pruners.mha": [[202, "module-neural_compressor.compression.pruner.pruners.mha"]], "neural_compressor.compression.pruner.pruners.pattern_lock": [[203, "module-neural_compressor.compression.pruner.pruners.pattern_lock"]], "neural_compressor.compression.pruner.pruners.progressive": [[204, "module-neural_compressor.compression.pruner.pruners.progressive"]], "neural_compressor.compression.pruner.pruners.retrain_free": [[205, "module-neural_compressor.compression.pruner.pruners.retrain_free"]], "neural_compressor.compression.pruner.pruners.sparse_gpt": [[206, "module-neural_compressor.compression.pruner.pruners.sparse_gpt"]], "neural_compressor.compression.pruner.pruning": [[207, "module-neural_compressor.compression.pruner.pruning"]], "neural_compressor.compression.pruner.regs": [[208, "module-neural_compressor.compression.pruner.regs"]], "neural_compressor.compression.pruner.schedulers": [[209, "module-neural_compressor.compression.pruner.schedulers"]], "neural_compressor.compression.pruner.tf_criteria": [[210, "module-neural_compressor.compression.pruner.tf_criteria"]], "neural_compressor.compression.pruner.utils": [[211, "module-neural_compressor.compression.pruner.utils"]], "neural_compressor.conf.config": [[212, "module-neural_compressor.conf.config"]], "neural_compressor.conf.dotdict": [[213, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[214, "module-neural_compressor.conf"]], "neural_compressor.conf.pythonic_config": [[215, "module-neural_compressor.conf.pythonic_config"]], "neural_compressor.config": [[216, "module-neural_compressor.config"]], "neural_compressor.contrib": [[217, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[218, "module-neural_compressor.contrib.strategy"]], "neural_compressor.contrib.strategy.sigopt": [[219, "module-neural_compressor.contrib.strategy.sigopt"]], "neural_compressor.contrib.strategy.tpe": [[220, "module-neural_compressor.contrib.strategy.tpe"]], "neural_compressor.data.dataloaders.base_dataloader": [[221, "module-neural_compressor.data.dataloaders.base_dataloader"]], "neural_compressor.data.dataloaders.dataloader": [[222, "module-neural_compressor.data.dataloaders.dataloader"]], "neural_compressor.data.dataloaders.default_dataloader": [[223, "module-neural_compressor.data.dataloaders.default_dataloader"]], "neural_compressor.data.dataloaders.fetcher": [[224, "module-neural_compressor.data.dataloaders.fetcher"]], "neural_compressor.data.dataloaders": [[225, "module-neural_compressor.data.dataloaders"]], "Attributes": [[225, "attributes"], [233, "attributes"], [242, "attributes"], [276, "attributes"], [285, "attributes"], [296, "attributes"], [320, "attributes"], [360, "attributes"], [410, "attributes"], [425, "attributes"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[226, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[227, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[228, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "neural_compressor.data.dataloaders.sampler": [[229, "module-neural_compressor.data.dataloaders.sampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[230, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.data.datasets.bert_dataset": [[231, "module-neural_compressor.data.datasets.bert_dataset"]], "neural_compressor.data.datasets.coco_dataset": [[232, "module-neural_compressor.data.datasets.coco_dataset"]], "neural_compressor.data.datasets.dataset": [[233, "module-neural_compressor.data.datasets.dataset"]], "neural_compressor.data.datasets.dummy_dataset": [[234, "module-neural_compressor.data.datasets.dummy_dataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[235, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "neural_compressor.data.datasets.imagenet_dataset": [[236, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[237, "module-neural_compressor.data.datasets"]], "neural_compressor.data.datasets.style_transfer_dataset": [[238, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "neural_compressor.data.filters.coco_filter": [[239, "module-neural_compressor.data.filters.coco_filter"]], "neural_compressor.data.filters.filter": [[240, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[241, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[242, "module-neural_compressor.data"]], "neural_compressor.data.transforms.coco_transform": [[243, "module-neural_compressor.data.transforms.coco_transform"]], "neural_compressor.data.transforms.imagenet_transform": [[244, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[245, "module-neural_compressor.data.transforms"]], "neural_compressor.data.transforms.postprocess": [[246, "module-neural_compressor.data.transforms.postprocess"]], "neural_compressor.data.transforms.tokenization": [[247, "module-neural_compressor.data.transforms.tokenization"]], "neural_compressor.data.transforms.transform": [[248, "module-neural_compressor.data.transforms.transform"]], "neural_compressor.experimental.benchmark": [[249, "module-neural_compressor.experimental.benchmark"]], "neural_compressor.experimental.common.criterion": [[250, "module-neural_compressor.experimental.common.criterion"]], "neural_compressor.experimental.common.dataloader": [[251, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[252, "module-neural_compressor.experimental.common"]], "neural_compressor.experimental.common.metric": [[253, "module-neural_compressor.experimental.common.metric"]], "neural_compressor.experimental.common.model": [[254, "module-neural_compressor.experimental.common.model"]], "neural_compressor.experimental.common.optimizer": [[255, "module-neural_compressor.experimental.common.optimizer"]], "neural_compressor.experimental.common.postprocess": [[256, "module-neural_compressor.experimental.common.postprocess"]], "neural_compressor.experimental.common.torch_utils": [[257, "module-neural_compressor.experimental.common.torch_utils"]], "neural_compressor.experimental.component": [[258, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.compression": [[259, "module-neural_compressor.experimental.compression"]], "neural_compressor.experimental.contrib": [[260, "module-neural_compressor.experimental.contrib"]], "neural_compressor.experimental.contrib.strategy": [[261, "module-neural_compressor.experimental.contrib.strategy"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[262, "module-neural_compressor.experimental.contrib.strategy.sigopt"]], "neural_compressor.experimental.contrib.strategy.tpe": [[263, "module-neural_compressor.experimental.contrib.strategy.tpe"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[264, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[265, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[266, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[267, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[268, "module-neural_compressor.experimental.data.dataloaders"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[269, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[270, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[271, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[272, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[273, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[274, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[275, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "neural_compressor.experimental.data.datasets.dataset": [[276, "module-neural_compressor.experimental.data.datasets.dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[277, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[278, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[279, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[280, "module-neural_compressor.experimental.data.datasets"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[281, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "neural_compressor.experimental.data.filters.coco_filter": [[282, "module-neural_compressor.experimental.data.filters.coco_filter"]], "neural_compressor.experimental.data.filters.filter": [[283, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[284, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[285, "module-neural_compressor.experimental.data"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[286, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[287, "module-neural_compressor.experimental.data.transforms"]], "neural_compressor.experimental.data.transforms.tokenization": [[288, "module-neural_compressor.experimental.data.transforms.tokenization"]], "neural_compressor.experimental.data.transforms.transform": [[289, "module-neural_compressor.experimental.data.transforms.transform"]], "neural_compressor.experimental.distillation": [[290, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[291, "module-neural_compressor.experimental.export"]], "neural_compressor.experimental.export.qlinear2qdq": [[292, "module-neural_compressor.experimental.export.qlinear2qdq"]], "neural_compressor.experimental.export.tf2onnx": [[293, "module-neural_compressor.experimental.export.tf2onnx"]], "neural_compressor.experimental.export.torch2onnx": [[294, "module-neural_compressor.experimental.export.torch2onnx"]], "neural_compressor.experimental.graph_optimization": [[295, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[296, "module-neural_compressor.experimental"]], "neural_compressor.experimental.metric.bleu": [[297, "module-neural_compressor.experimental.metric.bleu"]], "neural_compressor.experimental.metric.bleu_util": [[298, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[299, "module-neural_compressor.experimental.metric.coco_label_map"]], "neural_compressor.experimental.metric.coco_tools": [[300, "module-neural_compressor.experimental.metric.coco_tools"]], "neural_compressor.experimental.metric.evaluate_squad": [[301, "module-neural_compressor.experimental.metric.evaluate_squad"]], "neural_compressor.experimental.metric.f1": [[302, "module-neural_compressor.experimental.metric.f1"]], "neural_compressor.experimental.metric": [[303, "module-neural_compressor.experimental.metric"]], "neural_compressor.experimental.metric.metric": [[304, "module-neural_compressor.experimental.metric.metric"]], "neural_compressor.experimental.mixed_precision": [[305, "module-neural_compressor.experimental.mixed_precision"]], "neural_compressor.experimental.model_conversion": [[306, "module-neural_compressor.experimental.model_conversion"]], "neural_compressor.experimental.nas.basic_nas": [[307, "module-neural_compressor.experimental.nas.basic_nas"]], "neural_compressor.experimental.nas.dynas": [[308, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas": [[309, "module-neural_compressor.experimental.nas"]], "neural_compressor.experimental.nas.nas": [[310, "module-neural_compressor.experimental.nas.nas"]], "neural_compressor.experimental.nas.nas_utils": [[311, "module-neural_compressor.experimental.nas.nas_utils"]], "neural_compressor.experimental.nas.search_algorithms": [[312, "module-neural_compressor.experimental.nas.search_algorithms"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[313, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[314, "module-neural_compressor.experimental.pruner_legacy.group_lasso"]], "neural_compressor.experimental.pruner_legacy": [[315, "module-neural_compressor.experimental.pruner_legacy"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[316, "module-neural_compressor.experimental.pruner_legacy.magnitude"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[317, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"]], "neural_compressor.experimental.pruner_legacy.pruner": [[318, "module-neural_compressor.experimental.pruner_legacy.pruner"]], "neural_compressor.experimental.pruning": [[319, "module-neural_compressor.experimental.pruning"]], "neural_compressor.experimental.pruning_recipes": [[320, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[321, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[322, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[323, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "neural_compressor.experimental.pruning_v2": [[324, "module-neural_compressor.experimental.pruning_v2"]], "neural_compressor.experimental.pytorch_pruner": [[325, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[326, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[327, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[328, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[329, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[330, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[331, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "neural_compressor.experimental.quantization": [[332, "module-neural_compressor.experimental.quantization"]], "neural_compressor.experimental.scheduler": [[333, "module-neural_compressor.experimental.scheduler"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[334, "module-neural_compressor.experimental.strategy.auto_mixed_precision"]], "neural_compressor.experimental.strategy.basic": [[335, "module-neural_compressor.experimental.strategy.basic"]], "neural_compressor.experimental.strategy.bayesian": [[336, "module-neural_compressor.experimental.strategy.bayesian"]], "neural_compressor.experimental.strategy.exhaustive": [[337, "module-neural_compressor.experimental.strategy.exhaustive"]], "neural_compressor.experimental.strategy": [[338, "module-neural_compressor.experimental.strategy"]], "neural_compressor.experimental.strategy.mse": [[339, "module-neural_compressor.experimental.strategy.mse"]], "neural_compressor.experimental.strategy.mse_v2": [[340, "module-neural_compressor.experimental.strategy.mse_v2"]], "neural_compressor.experimental.strategy.random": [[341, "module-neural_compressor.experimental.strategy.random"]], "neural_compressor.experimental.strategy.strategy": [[342, "module-neural_compressor.experimental.strategy.strategy"]], "neural_compressor.experimental.strategy.utils.constant": [[343, "module-neural_compressor.experimental.strategy.utils.constant"]], "neural_compressor.experimental.strategy.utils": [[344, "module-neural_compressor.experimental.strategy.utils"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[345, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[346, "module-neural_compressor.experimental.strategy.utils.tuning_space"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[347, "module-neural_compressor.experimental.strategy.utils.tuning_structs"]], "neural_compressor.experimental.strategy.utils.utility": [[348, "module-neural_compressor.experimental.strategy.utils.utility"]], "neural_compressor": [[349, "module-neural_compressor"]], "neural_compressor.metric.bleu": [[350, "module-neural_compressor.metric.bleu"]], "neural_compressor.metric.bleu_util": [[351, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[352, "module-neural_compressor.metric.coco_label_map"]], "neural_compressor.metric.coco_tools": [[353, "module-neural_compressor.metric.coco_tools"]], "neural_compressor.metric.evaluate_squad": [[354, "module-neural_compressor.metric.evaluate_squad"]], "neural_compressor.metric.f1": [[355, "module-neural_compressor.metric.f1"]], "neural_compressor.metric": [[356, "module-neural_compressor.metric"]], "neural_compressor.metric.metric": [[357, "module-neural_compressor.metric.metric"]], "neural_compressor.mix_precision": [[358, "module-neural_compressor.mix_precision"]], "neural_compressor.model.base_model": [[359, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[360, "module-neural_compressor.model"]], "neural_compressor.model.keras_model": [[361, "module-neural_compressor.model.keras_model"]], "neural_compressor.model.model": [[362, "module-neural_compressor.model.model"]], "neural_compressor.model.mxnet_model": [[363, "module-neural_compressor.model.mxnet_model"]], "neural_compressor.model.nets_factory": [[364, "module-neural_compressor.model.nets_factory"]], "neural_compressor.model.onnx_model": [[365, "module-neural_compressor.model.onnx_model"]], "neural_compressor.model.tensorflow_model": [[366, "module-neural_compressor.model.tensorflow_model"]], "neural_compressor.model.torch_model": [[367, "module-neural_compressor.model.torch_model"]], "neural_compressor.objective": [[368, "module-neural_compressor.objective"]], "neural_compressor.profiling": [[369, "module-neural_compressor.profiling"]], "neural_compressor.profiling.parser.factory": [[370, "module-neural_compressor.profiling.parser.factory"]], "neural_compressor.profiling.parser": [[371, "module-neural_compressor.profiling.parser"]], "neural_compressor.profiling.parser.onnx_parser.factory": [[372, "module-neural_compressor.profiling.parser.onnx_parser.factory"]], "neural_compressor.profiling.parser.onnx_parser": [[373, "module-neural_compressor.profiling.parser.onnx_parser"]], "neural_compressor.profiling.parser.onnx_parser.parser": [[374, "module-neural_compressor.profiling.parser.onnx_parser.parser"]], "neural_compressor.profiling.parser.parser": [[375, "module-neural_compressor.profiling.parser.parser"]], "neural_compressor.profiling.parser.result": [[376, "module-neural_compressor.profiling.parser.result"]], "neural_compressor.profiling.parser.tensorflow_parser.factory": [[377, "module-neural_compressor.profiling.parser.tensorflow_parser.factory"]], "neural_compressor.profiling.parser.tensorflow_parser": [[378, "module-neural_compressor.profiling.parser.tensorflow_parser"]], "neural_compressor.profiling.parser.tensorflow_parser.parser": [[379, "module-neural_compressor.profiling.parser.tensorflow_parser.parser"]], "neural_compressor.profiling.profiler.factory": [[380, "module-neural_compressor.profiling.profiler.factory"]], "neural_compressor.profiling.profiler": [[381, "module-neural_compressor.profiling.profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.factory": [[382, "module-neural_compressor.profiling.profiler.onnxrt_profiler.factory"]], "neural_compressor.profiling.profiler.onnxrt_profiler": [[383, "module-neural_compressor.profiling.profiler.onnxrt_profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.profiler": [[384, "module-neural_compressor.profiling.profiler.onnxrt_profiler.profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.utils": [[385, "module-neural_compressor.profiling.profiler.onnxrt_profiler.utils"]], "neural_compressor.profiling.profiler.profiler": [[386, "module-neural_compressor.profiling.profiler.profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.factory": [[387, "module-neural_compressor.profiling.profiler.tensorflow_profiler.factory"]], "neural_compressor.profiling.profiler.tensorflow_profiler": [[388, "module-neural_compressor.profiling.profiler.tensorflow_profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.profiler": [[389, "module-neural_compressor.profiling.profiler.tensorflow_profiler.profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.utils": [[390, "module-neural_compressor.profiling.profiler.tensorflow_profiler.utils"]], "neural_compressor.quantization": [[391, "module-neural_compressor.quantization"]], "neural_compressor.strategy.auto": [[392, "module-neural_compressor.strategy.auto"]], "neural_compressor.strategy.auto_mixed_precision": [[393, "module-neural_compressor.strategy.auto_mixed_precision"]], "neural_compressor.strategy.basic": [[394, "module-neural_compressor.strategy.basic"]], "neural_compressor.strategy.bayesian": [[395, "module-neural_compressor.strategy.bayesian"]], "neural_compressor.strategy.conservative": [[396, "module-neural_compressor.strategy.conservative"]], "neural_compressor.strategy.exhaustive": [[397, "module-neural_compressor.strategy.exhaustive"]], "neural_compressor.strategy.hawq_v2": [[398, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[399, "module-neural_compressor.strategy"]], "neural_compressor.strategy.mse": [[400, "module-neural_compressor.strategy.mse"]], "neural_compressor.strategy.mse_v2": [[401, "module-neural_compressor.strategy.mse_v2"]], "neural_compressor.strategy.random": [[402, "module-neural_compressor.strategy.random"]], "neural_compressor.strategy.strategy": [[403, "module-neural_compressor.strategy.strategy"]], "neural_compressor.strategy.utils.constant": [[404, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[405, "module-neural_compressor.strategy.utils"]], "neural_compressor.strategy.utils.tuning_sampler": [[406, "module-neural_compressor.strategy.utils.tuning_sampler"]], "neural_compressor.strategy.utils.tuning_space": [[407, "module-neural_compressor.strategy.utils.tuning_space"]], "neural_compressor.strategy.utils.tuning_structs": [[408, "module-neural_compressor.strategy.utils.tuning_structs"]], "neural_compressor.strategy.utils.utility": [[409, "module-neural_compressor.strategy.utils.utility"]], "neural_compressor.template.api_doc_example": [[410, "module-neural_compressor.template.api_doc_example"]], "neural_compressor.template": [[411, "module-neural_compressor.template"]], "neural_compressor.torch.algorithms.gptq": [[412, "module-neural_compressor.torch.algorithms.gptq"]], "neural_compressor.torch.algorithms": [[413, "module-neural_compressor.torch.algorithms"]], "neural_compressor.torch.algorithms.rtn": [[414, "module-neural_compressor.torch.algorithms.rtn"]], "neural_compressor.torch.algorithms.weight_only_algos": [[415, "module-neural_compressor.torch.algorithms.weight_only_algos"]], "neural_compressor.torch": [[416, "module-neural_compressor.torch"]], "neural_compressor.torch.quantization.config": [[417, "module-neural_compressor.torch.quantization.config"]], "neural_compressor.torch.quantization": [[418, "module-neural_compressor.torch.quantization"]], "neural_compressor.torch.quantization.quantize": [[419, "module-neural_compressor.torch.quantization.quantize"]], "neural_compressor.torch.utils": [[420, "module-neural_compressor.torch.utils"]], "neural_compressor.training": [[421, "module-neural_compressor.training"]], "neural_compressor.utils.collect_layer_histogram": [[422, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[423, "module-neural_compressor.utils.constant"]], "neural_compressor.utils.create_obj_from_config": [[424, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[425, "module-neural_compressor.utils"]], "neural_compressor.utils.kl_divergence": [[426, "module-neural_compressor.utils.kl_divergence"]], "neural_compressor.utils.load_huggingface": [[427, "module-neural_compressor.utils.load_huggingface"]], "neural_compressor.utils.logger": [[428, "module-neural_compressor.utils.logger"]], "neural_compressor.utils.neural_insights_utils": [[429, "module-neural_compressor.utils.neural_insights_utils"]], "neural_compressor.utils.options": [[430, "module-neural_compressor.utils.options"]], "neural_compressor.utils.pytorch": [[431, "module-neural_compressor.utils.pytorch"]], "neural_compressor.utils.utility": [[432, "module-neural_compressor.utils.utility"]], "neural_compressor.utils.weights_details": [[433, "module-neural_compressor.utils.weights_details"]], "neural_compressor.version": [[434, "module-neural_compressor.version"]], "Intel\u00ae Neural Compressor Documentation": [[435, "intel-neural-compressor-documentation"], [532, "intel-neural-compressor-documentation"]], "Sections": [[435, "sections"], [532, "sections"]], "Contributor Covenant Code of Conduct": [[436, "contributor-covenant-code-of-conduct"], [437, "contributor-covenant-code-of-conduct"]], "Our Pledge": [[436, "our-pledge"]], "Our Standards": [[436, "our-standards"]], "Our Responsibilities": [[436, "our-responsibilities"]], "Scope": [[436, "scope"]], "Enforcement": [[436, "enforcement"]], "Attribution": [[436, "attribution"]], "Contribution Guidelines": [[437, "contribution-guidelines"]], "Create Pull Request": [[437, "create-pull-request"]], "Step-by-Step guidelines": [[437, "step-by-step-guidelines"]], "Pull Request Checklist": [[437, "pull-request-checklist"]], "Pull Request Template": [[437, "pull-request-template"]], "Pull Request Acceptance Criteria": [[437, "pull-request-acceptance-criteria"]], "Pull Request Status Checks Overview": [[437, "pull-request-status-checks-overview"]], "Support": [[437, "support"]], "FX": [[438, "fx"]], "Introduction": [[438, "introduction"], [439, "introduction"], [442, "introduction"], [443, "introduction"], [444, "introduction"], [459, "introduction"], [460, "introduction"], [461, "introduction"], [462, "introduction"], [465, "introduction"], [466, "introduction"], [467, "introduction"], [469, "introduction"], [471, "introduction"], [474, "introduction"], [477, "introduction"], [479, "introduction"], [480, "introduction"], [501, "introduction"], [502, "introduction"], [503, "introduction"], [515, "introduction"], [516, "introduction"], [517, "introduction"], [519, "introduction"], [522, "introduction"], [524, "introduction"], [525, "introduction"], [526, "introduction"], [527, "introduction"], [528, "introduction"], [530, "introduction"]], "FX Mode Support Matrix in Neural Compressor": [[438, "fx-mode-support-matrix-in-neural-compressor"]], "Get Started": [[438, "get-started"], [464, "get-started"], [505, "get-started"], [520, "get-started"]], "Post Training Static Quantization": [[438, "post-training-static-quantization"], [520, "post-training-static-quantization"]], "Post Training Dynamic Quantization": [[438, "post-training-dynamic-quantization"], [520, "post-training-dynamic-quantization"]], "Quantization-Aware Training": [[438, "quantization-aware-training"]], "Examples": [[438, "examples"], [439, "examples"], [459, "examples"], [461, "examples"], [462, "examples"], [465, "examples"], [466, "examples"], [467, "examples"], [468, "examples"], [469, "examples"], [478, "examples"], [479, "examples"], [480, "examples"], [516, "examples"], [517, "examples"], [520, "examples"], [522, "examples"], [526, "examples"]], "Note": [[438, "note"]], "Details": [[438, "details"]], "Common Problem": [[438, "common-problem"]], "Dynamic Quantization": [[438, "dynamic-quantization"]], "Static Quantization & Quantization Aware Training": [[438, "static-quantization-quantization-aware-training"]], "Neural Architecture Search": [[439, "neural-architecture-search"]], "Basic NAS": [[439, "basic-nas"]], "Dynamic NAS": [[439, "dynamic-nas"]], "NAS Support Matrix": [[439, "nas-support-matrix"]], "Get Started with NAS API": [[439, "get-started-with-nas-api"]], "Basic Usage": [[439, "basic-usage"]], "1. Python code + YAML": [[439, "python-code-yaml"]], "2. Python code only": [[439, "python-code-only"]], "Advanced Usage (Custom NAS)": [[439, "advanced-usage-custom-nas"]], "Security Policy": [[440, "security-policy"]], "Report a Vulnerability": [[440, "report-a-vulnerability"]], "Intel\u00ae Neural Compressor": [[441, "intel-neural-compressor"], [498, "intel-neural-compressor"]], "Installation": [[441, "installation"], [475, "installation"], [492, "installation"], [500, "installation"], [505, "installation"]], "Install from pypi": [[441, "install-from-pypi"], [500, "install-from-pypi"]], "Getting Started": [[441, "getting-started"], [472, "getting-started"], [500, "getting-started"]], "Quantization with Python API": [[441, "quantization-with-python-api"], [472, "quantization-with-python-api"], [500, "quantization-with-python-api"]], "Documentation": [[441, "documentation"]], "Selected Publications/Events": [[441, "selected-publications-events"]], "Additional Content": [[441, "additional-content"]], "Communication": [[441, "communication"]], "Adaptor": [[442, "adaptor"], [445, "adaptor"]], "Adaptor Support Matrix": [[442, "adaptor-support-matrix"]], "Working Flow": [[442, "working-flow"], [520, "working-flow"]], "Get Started with Adaptor API": [[442, "get-started-with-adaptor-api"]], "Query API": [[442, "query-api"]], "Background": [[442, "background"]], "Query API Introduction": [[442, "query-api-introduction"]], "Example of Adding a New Backend Support": [[442, "example-of-adding-a-new-backend-support"]], "Capability": [[442, "capability"]], "Implement ONNXRTAdaptor Class": [[442, "implement-onnxrtadaptor-class"]], "How to Add An Adaptor": [[443, "how-to-add-an-adaptor"]], "API List that Need to Implement": [[443, "api-list-that-need-to-implement"]], "Design the framework YAML": [[443, "design-the-framework-yaml"]], "Add query_fw_capability to Adaptor": [[443, "add-query-fw-capability-to-adaptor"]], "Add quantize API according to tune_cfg": [[443, "add-quantize-api-according-to-tune-cfg"]], "Prepare calibration model from fp32 graph": [[443, "prepare-calibration-model-from-fp32-graph"]], "Run sampling iterations of the fp32 graph to calibrate quantizable operators.": [[443, "run-sampling-iterations-of-the-fp32-graph-to-calibrate-quantizable-operators"]], "Calculate the data range and generate quantized model": [[443, "calculate-the-data-range-and-generate-quantized-model"]], "How to Support New Data Type, Like Int4, with a Few Line Changes": [[444, "how-to-support-new-data-type-like-int4-with-a-few-line-changes"]], "Define the Quantization Ability of the Specific Operator": [[444, "define-the-quantization-ability-of-the-specific-operator"]], "Invoke the Operator Kernel According to the Tuning Configuration": [[444, "invoke-the-operator-kernel-according-to-the-tuning-configuration"]], "Use the New Data Type": [[444, "use-the-new-data-type"]], "Summary": [[444, "summary"]], "ONNX Runtime": [[446, "onnx-runtime"]], "Torch Utils": [[447, "torch-utils"]], "API Document Example": [[448, "api-document-example"]], "APIs": [[449, "apis"]], "Benchmark": [[450, "benchmark"], [478, "benchmark"], [519, "benchmark"]], "Compression": [[451, "compression"]], "Config": [[452, "config"]], "Mix Precision": [[453, "mix-precision"], [478, "mix-precision"]], "Model": [[454, "model"], [480, "model"], [501, "model"], [503, "model"]], "Objective": [[455, "objective"], [511, "objective"], [512, "objective"], [513, "objective"], [515, "objective"]], "Quantization": [[456, "quantization"], [519, "quantization"], [520, "quantization"]], "Strategy": [[457, "strategy"]], "Training": [[458, "training"]], "Benchmarking": [[459, "benchmarking"]], "Benchmark Support Matrix": [[459, "benchmark-support-matrix"]], "Get Started with Benchmark API": [[459, "get-started-with-benchmark-api"]], "Calibration Algorithms in Quantization": [[460, "calibration-algorithms-in-quantization"]], "Calibration Algorithms": [[460, "calibration-algorithms"]], "Support Matrix": [[460, "support-matrix"], [483, "support-matrix"]], "Reference": [[460, "reference"], [517, "reference"], [520, "reference"], [522, "reference"], [525, "reference"]], "DataLoader": [[461, "dataloader"]], "Supported Framework Dataloader Matrix": [[461, "supported-framework-dataloader-matrix"]], "Get Started with DataLoader": [[461, "get-started-with-dataloader"]], "Use Intel\u00ae Neural Compressor DataLoader API": [[461, "use-intel-neural-compressor-dataloader-api"]], "Build Custom Dataloader with Python API": [[461, "build-custom-dataloader-with-python-api"]], "Dataset": [[462, "dataset"]], "Supported Framework Dataset Matrix": [[462, "supported-framework-dataset-matrix"]], "TensorFlow": [[462, "tensorflow"], [477, "tensorflow"], [527, "tensorflow"]], "PyTorch": [[462, "pytorch"], [477, "pytorch"], [521, "pytorch"]], "MXNet": [[462, "mxnet"], [477, "mxnet"], [527, "mxnet"]], "ONNXRT": [[462, "onnxrt"], [477, "onnxrt"], [527, "onnxrt"]], "Get start with Dataset API": [[462, "get-start-with-dataset-api"]], "Config dataloader in a yaml file": [[462, "config-dataloader-in-a-yaml-file"]], "User-specific dataset": [[462, "user-specific-dataset"]], "Design": [[463, "design"], [528, "design"], [528, "id1"], [528, "id3"], [528, "id5"], [528, "id7"], [528, "id9"], [528, "id11"], [528, "id13"], [528, "id15"], [528, "id17"], [528, "id19"], [528, "id21"]], "Architecture": [[463, "architecture"], [474, "architecture"]], "Workflow": [[463, "workflow"]], "Diagnosis": [[464, "diagnosis"]], "Diagnosis Introduction": [[464, "diagnosis-introduction"]], "Supported Feature Matrix": [[464, "supported-feature-matrix"], [467, "supported-feature-matrix"], [471, "supported-feature-matrix"], [474, "supported-feature-matrix"], [519, "supported-feature-matrix"], [520, "supported-feature-matrix"], [526, "supported-feature-matrix"], [530, "supported-feature-matrix"]], "Install Intel\u00ae Neural Compressor": [[464, "install-intel-neural-compressor"]], "Modify script": [[464, "modify-script"]], "Quantization diagnosis": [[464, "quantization-diagnosis"]], "Benchmark diagnosis": [[464, "benchmark-diagnosis"]], "Example": [[464, "example"], [477, "example"], [483, "example"], [487, "example"], [515, "example"], [522, "example"], [525, "example"]], "Prepare dataset": [[464, "prepare-dataset"]], "Run quantization script": [[464, "run-quantization-script"]], "Run benchmark script": [[464, "run-benchmark-script"]], "See quantization data": [[464, "see-quantization-data"]], "How to do diagnosis": [[464, "how-to-do-diagnosis"]], "Parameter description": [[464, "parameter-description"]], "Diagnosis suggestions": [[464, "diagnosis-suggestions"]], "Fallback setting example": [[464, "fallback-setting-example"]], "See profiling data": [[464, "see-profiling-data"]], "Distillation": [[465, "distillation"], [478, "distillation"], [519, "distillation"]], "Knowledge Distillation": [[465, "knowledge-distillation"]], "Intermediate Layer Knowledge Distillation": [[465, "intermediate-layer-knowledge-distillation"]], "Self Distillation": [[465, "self-distillation"]], "Distillation Support Matrix": [[465, "distillation-support-matrix"]], "Get Started with Distillation API": [[465, "get-started-with-distillation-api"]], "Distillation for Quantization": [[466, "distillation-for-quantization"]], "Distillation for Quantization Support Matrix": [[466, "distillation-for-quantization-support-matrix"]], "Get Started with Distillation for Quantization API": [[466, "get-started-with-distillation-for-quantization-api"]], "Distributed Training and Inference (Evaluation)": [[467, "distributed-training-and-inference-evaluation"]], "Get Started with Distributed Training and Inference API": [[467, "get-started-with-distributed-training-and-inference-api"]], "Option 1: Pure Yaml Configuration": [[467, "option-1-pure-yaml-configuration"]], "Option 2: User Defined Training Function": [[467, "option-2-user-defined-training-function"]], "Horovodrun Execution": [[467, "horovodrun-execution"]], "Security": [[467, "security"]], "PyTorch Examples:": [[467, "pytorch-examples"]], "TensorFlow Examples:": [[467, "tensorflow-examples"]], "Example List": [[468, "example-list"]], "Release Data": [[468, "release-data"]], "Export": [[469, "export"]], "Supported Framework Model Matrix": [[469, "supported-framework-model-matrix"], [480, "supported-framework-model-matrix"], [522, "supported-framework-model-matrix"]], "PyTorch Model": [[469, "pytorch-model"]], "FP32 Model Export": [[469, "fp32-model-export"], [469, "id1"]], "INT8 Model Export": [[469, "int8-model-export"], [469, "id2"]], "Tensorflow Model": [[469, "tensorflow-model"]], "Appendix": [[469, "appendix"]], "Supported quantized ops": [[469, "supported-quantized-ops"]], "Frequently Asked Questions": [[470, "frequently-asked-questions"]], "Common Build Issues": [[470, "common-build-issues"]], "Issue 1:": [[470, "issue-1"]], "Issue 2:": [[470, "issue-2"]], "Issue 3:": [[470, "issue-3"]], "Issue 4:": [[470, "issue-4"]], "Framework YAML Configuration Files": [[471, "framework-yaml-configuration-files"]], "Get started with Framework YAML Files": [[471, "get-started-with-framework-yaml-files"]], "Quick Samples": [[472, "quick-samples"]], "Validated Models": [[472, "validated-models"], [525, "validated-models"], [531, "validated-models"]], "Incompatible changes between v1.2 and v1.1": [[473, "incompatible-changes-between-v1-2-and-v1-1"]], "User-facing APIs": [[473, "user-facing-apis"]], "Built-in transform/dataset/metric APIs": [[473, "built-in-transform-dataset-metric-apis"]], "Infrastructure of Intel\u00ae Neural Compressor": [[474, "infrastructure-of-intel-neural-compressor"]], "Linux Installation": [[475, "linux-installation"]], "Prerequisites": [[475, "prerequisites"], [475, "id1"], [505, "prerequisites"], [506, "prerequisites"]], "Install from Binary": [[475, "install-from-binary"], [475, "id2"]], "Install from Source": [[475, "install-from-source"], [475, "id3"], [500, "install-from-source"]], "Install from AI Kit": [[475, "install-from-ai-kit"]], "Windows Installation": [[475, "windows-installation"]], "System Requirements": [[475, "system-requirements"]], "Validated Hardware Environment": [[475, "validated-hardware-environment"]], "Intel\u00ae Neural Compressor supports CPUs based on Intel 64 architecture or compatible processors:": [[475, "intel-neural-compressor-supports-cpus-based-on-intel-64-architecture-or-compatible-processors"]], "Intel\u00ae Neural Compressor supports GPUs built on Intel\u2019s Xe architecture:": [[475, "intel-neural-compressor-supports-gpus-built-on-intel-s-xe-architecture"]], "Intel\u00ae Neural Compressor quantized ONNX models support multiple hardware vendors through ONNX Runtime:": [[475, "intel-neural-compressor-quantized-onnx-models-support-multiple-hardware-vendors-through-onnx-runtime"]], "Validated Software Environment": [[475, "validated-software-environment"]], "Legal Information": [[476, "legal-information"]], "License": [[476, "license"]], "Citation": [[476, "citation"]], "Trademarks": [[476, "trademarks"]], "Metrics": [[477, "metrics"]], "Supported Built-in Metric Matrix": [[477, "supported-built-in-metric-matrix"]], "Get Started with Metric": [[477, "get-started-with-metric"]], "Use Intel\u00ae Neural Compressor Metric API": [[477, "use-intel-neural-compressor-metric-api"]], "Build Custom Metric with Python API": [[477, "build-custom-metric-with-python-api"]], "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X": [[478, "code-migration-from-intel-neural-compressor-1-x-to-intel-neural-compressor-2-x"]], "Model Quantization": [[478, "model-quantization"]], "Post-training Quantization": [[478, "post-training-quantization"]], "Quantization Aware Training": [[478, "quantization-aware-training"], [520, "quantization-aware-training"], [520, "id1"]], "Pruning": [[478, "pruning"], [517, "pruning"], [519, "pruning"]], "Orchestration": [[478, "orchestration"]], "Mixed Precision": [[479, "mixed-precision"]], "Mixed Precision Support Matrix": [[479, "mixed-precision-support-matrix"]], "Hardware and Software requests for BF16": [[479, "hardware-and-software-requests-for-bf16"]], "Hardware and Software requests for FP16": [[479, "hardware-and-software-requests-for-fp16"]], "During quantization mixed precision": [[479, "during-quantization-mixed-precision"]], "Accuracy-driven mixed precision": [[479, "accuracy-driven-mixed-precision"]], "Get Started with Mixed Precision API": [[479, "get-started-with-mixed-precision-api"]], "Neural Coder": [[481, "neural-coder"], [498, "neural-coder"], [498, "id1"]], "What do we offer?": [[481, "what-do-we-offer"]], "Getting Started!": [[481, "getting-started"], [492, "getting-started"]], "Jupyter Lab Extension": [[481, "jupyter-lab-extension"]], "Python Launcher": [[481, "python-launcher"], [486, "python-launcher"]], "Python API": [[481, "python-api"]], "Contact": [[481, "contact"], [505, "contact"]], "AWS Amazon SageMaker Support": [[482, "aws-amazon-sagemaker-support"]], "Start Jupyter Lab 3": [[482, "start-jupyter-lab-3"]], "For SageMaker Studio": [[482, "for-sagemaker-studio"]], "For SageMaker Notebook instance": [[482, "for-sagemaker-notebook-instance"]], "Installation Guide": [[482, "installation-guide"]], "BigDL Nano Support": [[483, "bigdl-nano-support"]], "Intel CPU Platforms: Best Performance Setting": [[484, "intel-cpu-platforms-best-performance-setting"]], "Install MKL, OpenMP and JEMALLOC": [[484, "install-mkl-openmp-and-jemalloc"]], "Install NUMA Controller": [[484, "install-numa-controller"]], "Environment Variables": [[484, "environment-variables"]], "Frequency Governers": [[484, "frequency-governers"]], "Neural Coder as Python API": [[485, "neural-coder-as-python-api"]], "Enable": [[485, "enable"]], "Bench": [[485, "bench"]], "SuperBench": [[485, "superbench"]], "Quick-Start": [[486, "quick-start"]], "Launcher Arguments (Optional)": [[486, "launcher-arguments-optional"]], "Neural Coder for Quantization": [[487, "neural-coder-for-quantization"]], "Features Supported": [[487, "features-supported"]], "Models Supported": [[487, "models-supported"]], "Usage": [[487, "usage"], [507, "usage"], [507, "id2"], [507, "id6"], [507, "id9"], [507, "id16"], [507, "id19"], [507, "id22"], [507, "id25"], [526, "usage"], [526, "id1"], [528, "usage"], [528, "id2"], [528, "id4"], [528, "id6"], [528, "id8"], [528, "id10"], [528, "id12"], [528, "id14"], [528, "id16"], [528, "id18"], [528, "id20"], [528, "id22"]], "PyPI distribution:": [[487, "pypi-distribution"]], "Supported Optimization Features": [[488, "supported-optimization-features"]], "v0.4": [[489, "v0-4"]], "Highlights": [[489, "highlights"]], "Others": [[489, "others"]], "Changelog": [[490, "changelog"], [494, "changelog"]], "neural_compressor_ext_lab": [[491, "neural-compressor-ext-lab"]], "Requirements": [[491, "requirements"], [495, "requirements"], [501, "requirements"], [502, "requirements"], [503, "requirements"], [511, "requirements"]], "Install": [[491, "install"], [495, "install"]], "Uninstall": [[491, "uninstall"], [495, "uninstall"]], "Contributing": [[491, "contributing"], [495, "contributing"]], "Development install": [[491, "development-install"], [495, "development-install"]], "Development uninstall": [[491, "development-uninstall"], [495, "development-uninstall"]], "Packaging the extension": [[491, "packaging-the-extension"], [495, "packaging-the-extension"]], "Intel\u00ae Neural Compressor as JupyterLab Extension": [[492, "intel-neural-compressor-as-jupyterlab-extension"]], "Auto-enable a feature": [[492, "auto-enable-a-feature"]], "Or let us help you auto-select the best feature": [[492, "or-let-us-help-you-auto-select-the-best-feature"]], "Pre-requisites": [[492, "pre-requisites"]], "Making a new release of neural_compressor_ext_lab": [[493, "making-a-new-release-of-neural-compressor-ext-lab"]], "Manual release": [[493, "manual-release"], [496, "manual-release"]], "Python package": [[493, "python-package"], [496, "python-package"]], "NPM package": [[493, "npm-package"], [496, "npm-package"]], "Automated releases with the Jupyter Releaser": [[493, "automated-releases-with-the-jupyter-releaser"], [496, "automated-releases-with-the-jupyter-releaser"]], "Publishing to conda-forge": [[493, "publishing-to-conda-forge"], [496, "publishing-to-conda-forge"]], "neural_compressor_ext_lab_alibaba": [[495, "neural-compressor-ext-lab-alibaba"]], "Making a new release of neural_compressor_ext_lab_alibaba": [[496, "making-a-new-release-of-neural-compressor-ext-lab-alibaba"]], "Change Log": [[497, "change-log"]], "[Unreleased]": [[497, "unreleased"]], "Background Introduction": [[498, "background-introduction"]], "Neural Coder Extension in VSCode": [[498, "neural-coder-extension-in-vscode"]], "Neural Coder Extension Usage": [[498, "neural-coder-extension-usage"]], "1. Open": [[498, "open"]], "2. Search": [[498, "search"]], "3. Setting": [[498, "setting"]], "4. Icon": [[498, "icon"]], "5. optimization (quantization)": [[498, "optimization-quantization"]], "5.1 Enable": [[498, "enable"]], "5.2 Auto": [[498, "auto"]], "Welcome to your VS Code Extension": [[499, "welcome-to-your-vs-code-extension"]], "What\u2019s in the folder": [[499, "what-s-in-the-folder"]], "Setup": [[499, "setup"]], "Get up and running straight away": [[499, "get-up-and-running-straight-away"]], "Make changes": [[499, "make-changes"]], "Explore the API": [[499, "explore-the-api"]], "Run tests": [[499, "run-tests"]], "Go further": [[499, "go-further"]], "Neural Insights": [[500, "neural-insights"]], "Start the Neural Insights": [[500, "start-the-neural-insights"]], "Tensor dump examples": [[500, "tensor-dump-examples"]], "Step by Step Diagnosis Example": [[500, "step-by-step-diagnosis-example"]], "Research Collaborations": [[500, "research-collaborations"]], "Step by step example how to debug accuracy with Neural Insights": [[501, "step-by-step-example-how-to-debug-accuracy-with-neural-insights"], [503, "step-by-step-example-how-to-debug-accuracy-with-neural-insights"]], "Preparation": [[501, "preparation"], [502, "preparation"], [503, "preparation"], [524, "preparation"]], "Running the quantization": [[501, "running-the-quantization"], [502, "running-the-quantization"], [503, "running-the-quantization"]], "Analyzing the result of quantization": [[501, "analyzing-the-result-of-quantization"], [503, "analyzing-the-result-of-quantization"]], "Weights summary": [[501, "weights-summary"]], "Activations summary": [[501, "activations-summary"]], "Step by step example how to dump weights data for PyTorch model with Neural Insights": [[502, "step-by-step-example-how-to-dump-weights-data-for-pytorch-model-with-neural-insights"]], "Source": [[502, "source"], [503, "source"]], "Prepare the dataset": [[503, "prepare-the-dataset"]], "Analyzing weight histograms": [[503, "analyzing-weight-histograms"]], "Open Neural Insights": [[503, "open-neural-insights"]], "Getting Started with Create React App": [[504, "getting-started-with-create-react-app"]], "Available Scripts": [[504, "available-scripts"]], "npm start": [[504, "npm-start"]], "npm test": [[504, "npm-test"]], "npm run build": [[504, "npm-run-build"]], "npm run eject": [[504, "npm-run-eject"]], "Learn More": [[504, "learn-more"], [505, "learn-more"]], "Code Splitting": [[504, "code-splitting"]], "Analyzing the Bundle Size": [[504, "analyzing-the-bundle-size"]], "Making a Progressive Web App": [[504, "making-a-progressive-web-app"]], "Advanced Configuration": [[504, "advanced-configuration"]], "Deployment": [[504, "deployment"]], "npm run build fails to minify": [[504, "npm-run-build-fails-to-minify"]], "What\u2019s Neural Solution?": [[505, "what-s-neural-solution"]], "Why Neural Solution?": [[505, "why-neural-solution"]], "How does Neural Solution Work?": [[505, "how-does-neural-solution-work"]], "Method 1. Using pip:": [[505, "method-1-using-pip"]], "Method 2. Building from source:": [[505, "method-2-building-from-source"]], "End-to-end examples": [[505, "end-to-end-examples"]], "Get started": [[506, "get-started"]], "Install Neural Solution": [[506, "install-neural-solution"]], "Method 1. Using pip": [[506, "method-1-using-pip"]], "Method 2. Building from source": [[506, "method-2-building-from-source"]], "Start service": [[506, "start-service"]], "Submit task": [[506, "submit-task"]], "Query task status": [[506, "query-task-status"]], "Stop service": [[506, "stop-service"]], "Inspect logs": [[506, "inspect-logs"]], "Manage resource": [[506, "manage-resource"], [511, "manage-resource"], [512, "manage-resource"]], "Node States": [[506, "node-states"]], "Query cluster": [[506, "query-cluster"]], "Add node": [[506, "add-node"]], "Remove node": [[506, "remove-node"]], "Neural Solution API": [[507, "neural-solution-api"]], "Base URL": [[507, "base-url"]], "Endpoints": [[507, "endpoints"]], "GET /": [[507, "get"]], "Description": [[507, "description"], [507, "id1"], [507, "id4"], [507, "id8"], [507, "id12"], [507, "id15"], [507, "id18"], [507, "id21"], [507, "id24"]], "Responses": [[507, "responses"], [507, "id3"], [507, "id7"], [507, "id11"], [507, "id14"], [507, "id17"], [507, "id20"], [507, "id23"], [507, "id26"]], "POST /task/submit": [[507, "post-task-submit"]], "Parameters": [[507, "parameters"], [507, "id5"], [507, "id10"], [507, "id13"]], "GET /task/status/{task_id}": [[507, "get-task-status-task-id"]], "GET /task/log/{task_id}": [[507, "get-task-log-task-id"]], "WebSocket /task/screen/{task_id}": [[507, "websocket-task-screen-task-id"]], "GET /ping": [[507, "get-ping"]], "GET /cluster": [[507, "get-cluster"]], "GET /download/{task_id}": [[507, "get-download-task-id"]], "GET /description": [[507, "get-description"]], "Design Doc for Optimization as a Service [WIP]": [[508, "design-doc-for-optimization-as-a-service-wip"]], "Contents": [[508, "contents"]], "Overview": [[508, "overview"], [529, "overview"]], "Workflow of OaaS": [[508, "workflow-of-oaas"]], "Class definition diagram": [[508, "class-definition-diagram"]], "Extensibility": [[508, "extensibility"]], "Task request description": [[509, "task-request-description"]], "Examples List": [[510, "examples-list"]], "An end-to-end example: quantize a custom model with Neural Solution": [[511, "an-end-to-end-example-quantize-a-custom-model-with-neural-solution"]], "Start the Neural Solution Service": [[511, "start-the-neural-solution-service"], [512, "start-the-neural-solution-service"], [513, "start-the-neural-solution-service"]], "Submit optimization task": [[511, "submit-optimization-task"], [512, "submit-optimization-task"], [513, "submit-optimization-task"]], "Query optimization result": [[511, "query-optimization-result"], [512, "query-optimization-result"], [513, "query-optimization-result"]], "Download optimized model": [[511, "download-optimized-model"], [512, "download-optimized-model"]], "Stop the service": [[511, "stop-the-service"], [512, "stop-the-service"], [513, "stop-the-service"]], "An end-to-end example: quantize a Hugging Face model with Neural Solution": [[512, "an-end-to-end-example-quantize-a-hugging-face-model-with-neural-solution"]], "An end-to-end example: quantize a Hugging Face model with Neural Solution gRPC API": [[513, "an-end-to-end-example-quantize-a-hugging-face-model-with-neural-solution-grpc-api"]], "Client": [[514, "client"]], "Single Objective": [[515, "single-objective"]], "Multiple Objectives": [[515, "multiple-objectives"]], "Objective Support Matrix": [[515, "objective-support-matrix"]], "Get Started with Objective API": [[515, "get-started-with-objective-api"]], "Config Single Objective": [[515, "config-single-objective"]], "Config Multiple Objectives": [[515, "config-multiple-objectives"]], "Optimization Orchestration": [[516, "optimization-orchestration"]], "One-shot": [[516, "one-shot"]], "Orchestration Support Matrix": [[516, "orchestration-support-matrix"]], "Get Started with Orchestration API": [[516, "get-started-with-orchestration-api"]], "Neural Network Pruning": [[517, "neural-network-pruning"]], "Pruning Patterns": [[517, "pruning-patterns"]], "Pruning Criteria": [[517, "pruning-criteria"]], "Pruning Types": [[517, "pruning-types"]], "Pruning Schedules": [[517, "pruning-schedules"]], "Pruning Scope": [[517, "pruning-scope"]], "Sparsity Decay Types": [[517, "sparsity-decay-types"]], "Regularization": [[517, "regularization"]], "Large Language Model Pruning": [[517, "large-language-model-pruning"]], "Pruning Support Matrix": [[517, "pruning-support-matrix"]], "Get Started with Pruning API": [[517, "get-started-with-pruning-api"]], "Training-aware pruning API": [[517, "training-aware-pruning-api"]], "Retrain-free Pruning API": [[517, "retrain-free-pruning-api"]], "Sparse Model Deployment": [[517, "sparse-model-deployment"]], "Pruning with Hyperparameter Optimization": [[517, "pruning-with-hyperparameter-optimization"]], "Full Publications/Events (78)": [[518, "full-publications-events-78"]], "2023 (24)": [[518, "id1"]], "2022 (35)": [[518, "id2"]], "2021 (15)": [[518, "id3"]], "2018 - 2020 (4)": [[518, "id4"]], "Pythonic Style Access for Configurations": [[519, "pythonic-style-access-for-configurations"]], "Pythonic API for User Configurations": [[519, "pythonic-api-for-user-configurations"], [519, "id1"]], "Pythonic API for Framework Configurations": [[519, "pythonic-api-for-framework-configurations"], [519, "id2"]], "Get Started with Pythonic API for Configurations": [[519, "get-started-with-pythonic-api-for-configurations"]], "NAS": [[519, "nas"]], "Quantization Introduction": [[520, "quantization-introduction"]], "Quantization Fundamentals": [[520, "quantization-fundamentals"], [525, "quantization-fundamentals"]], "Quantization Support Matrix": [[520, "quantization-support-matrix"]], "Quantization Scheme in TensorFlow": [[520, "quantization-scheme-in-tensorflow"]], "Quantization Scheme in PyTorch": [[520, "quantization-scheme-in-pytorch"]], "Quantization Scheme in IPEX": [[520, "quantization-scheme-in-ipex"]], "Quantization Scheme in MXNet": [[520, "quantization-scheme-in-mxnet"]], "Quantization Scheme in ONNX Runtime": [[520, "quantization-scheme-in-onnx-runtime"]], "Quantization Approaches": [[520, "quantization-approaches"]], "With or Without Accuracy Aware Tuning": [[520, "with-or-without-accuracy-aware-tuning"]], "Post Training Quantization": [[520, "post-training-quantization"]], "Specify Quantization Rules": [[520, "specify-quantization-rules"]], "Specify Quantization Recipes": [[520, "specify-quantization-recipes"]], "Specify Quantization Backend and Device": [[520, "specify-quantization-backend-and-device"]], "Turn OFF Auto Mixed Precision during Quantization": [[521, "turn-off-auto-mixed-precision-during-quantization"]], "Tensorflow": [[521, "tensorflow"]], "Weight Only Quantization (WOQ)": [[522, "weight-only-quantization-woq"]], "Quantization Capability": [[522, "quantization-capability"]], "Export Compressed Model": [[522, "export-compressed-model"]], "User Code Example": [[522, "user-code-example"]], "Layer Wise Quantization": [[522, "layer-wise-quantization"]], "Supported Matrix": [[522, "supported-matrix"]], "WOQ Algorithms Tuning": [[522, "woq-algorithms-tuning"]], "User code example": [[522, "id1"]], "Release": [[523, "release"]], "Release Notes": [[523, "release-notes"]], "Known Issues": [[523, "known-issues"]], "Incompatible Changes": [[523, "incompatible-changes"]], "SigOpt Strategy": [[524, "sigopt-strategy"]], "SigOpt Platform": [[524, "sigopt-platform"]], "Neural Compressor Configuration": [[524, "neural-compressor-configuration"]], "Performance": [[524, "performance"]], "Benefit of SigOpt Strategy": [[524, "benefit-of-sigopt-strategy"]], "Performance Comparison of Different Strategies": [[524, "performance-comparison-of-different-strategies"]], "Smooth Quant": [[525, "smooth-quant"]], "Per-tensor & Per-channel": [[525, "per-tensor-per-channel"]], "Per-tensor example": [[525, "per-tensor-example"]], "Per-channel example": [[525, "per-channel-example"]], "Matmul quantization example": [[525, "matmul-quantization-example"]], "Per-channel limitation": [[525, "per-channel-limitation"]], "SmoothQuant and Our Enhancement": [[525, "smoothquant-and-our-enhancement"]], "SmoothQuant": [[525, "smoothquant"]], "Our enhancement:": [[525, "our-enhancement"]], "Algorithm: Layer-wise Auto-tuning of $\\alpha$.": [[525, "algorithm-layer-wise-auto-tuning-of-alpha"]], "Engineering": [[525, "engineering"]], "Supported Framework Matrix": [[525, "supported-framework-matrix"]], "TensorBoard": [[526, "tensorboard"]], "Get Started with TensorBoard": [[526, "get-started-with-tensorboard"]], "PyTorch TensorBoard": [[526, "pytorch-tensorboard"]], "TensorFlow Tensorboard": [[526, "tensorflow-tensorboard"]], "PyTorch Examples": [[526, "pytorch-examples"]], "TensorFlow Examples": [[526, "tensorflow-examples"]], "Transform": [[527, "transform"]], "Transform Support List": [[527, "transform-support-list"]], "Pytorch": [[527, "pytorch"]], "Tuning Strategies": [[528, "tuning-strategies"]], "Strategy Design": [[528, "strategy-design"]], "Tuning Space": [[528, "tuning-space"]], "Exit Policy": [[528, "exit-policy"]], "Accuracy Criteria": [[528, "accuracy-criteria"]], "Tuning Process": [[528, "tuning-process"]], "Tuning Algorithms": [[528, "tuning-algorithms"]], "Auto": [[528, "auto"]], "Conservative Tuning": [[528, "conservative-tuning"]], "Basic": [[528, "basic"]], "MSE": [[528, "mse"]], "MSE_V2": [[528, "mse-v2"]], "HAWQ_V2": [[528, "hawq-v2"]], "Bayesian": [[528, "bayesian"]], "Exhaustive": [[528, "exhaustive"]], "Random": [[528, "random"]], "SigOpt": [[528, "sigopt"]], "TPE": [[528, "tpe"]], "Distributed Tuning": [[528, "distributed-tuning"]], "Customize a New Tuning Strategy": [[528, "customize-a-new-tuning-strategy"]], "User Guide": [[529, "user-guide"]], "Python-based APIs": [[529, "python-based-apis"]], "Neural Coder (Zero-code Optimization)": [[529, "neural-coder-zero-code-optimization"]], "Advanced Topics": [[529, "advanced-topics"]], "Innovations for Productivity": [[529, "innovations-for-productivity"]], "User YAML Configuration Files": [[530, "user-yaml-configuration-files"]], "Get started with User YAML Files": [[530, "get-started-with-user-yaml-files"]], "Validated Quantization Examples": [[531, "validated-quantization-examples"]], "TensorFlow Models with Intel TensorFlow 2.13.0": [[531, "tensorflow-models-with-intel-tensorflow-2-13-0"]], "PyTorch Models with Torch 2.0.1+cpu in PTQ Mode": [[531, "pytorch-models-with-torch-2-0-1-cpu-in-ptq-mode"]], "PyTorch Models with Torch 2.0.1+cpu in QAT Mode": [[531, "pytorch-models-with-torch-2-0-1-cpu-in-qat-mode"]], "PyTorch Models with Intel\u00ae Extension for PyTorch* 2.0.1+cpu": [[531, "pytorch-models-with-intel-extension-for-pytorch-2-0-1-cpu"]], "PyTorch Models with Torch 2.0.1+cpu in WOQ Mode": [[531, "pytorch-models-with-torch-2-0-1-cpu-in-woq-mode"]], "ONNX Models with ONNX Runtime 1.15.1": [[531, "onnx-models-with-onnx-runtime-1-15-1"]], "ONNX Models with ONNX Runtime 1.15.0 in WOQ Mode": [[531, "onnx-models-with-onnx-runtime-1-15-0-in-woq-mode"]], "Validated Pruning Examples": [[531, "validated-pruning-examples"]], "Validated Knowledge Distillation Examples": [[531, "validated-knowledge-distillation-examples"]], "Validated ONNX QDQ INT8 Models on Multiple Hardware through ONNX Runtime": [[531, "validated-onnx-qdq-int8-models-on-multiple-hardware-through-onnx-runtime"]]}, "indexentries": {"block_mask": [[0, "module-block_mask"]], "module": [[0, "module-block_mask"], [1, "module-neural_compressor.adaptor.adaptor"], [2, "module-neural_compressor.adaptor"], [3, "module-neural_compressor.adaptor.keras"], [4, "module-neural_compressor.adaptor.keras_utils.conv2d"], [5, "module-neural_compressor.adaptor.keras_utils.dense"], [6, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"], [7, "module-neural_compressor.adaptor.keras_utils"], [8, "module-neural_compressor.adaptor.keras_utils.pool2d"], [9, "module-neural_compressor.adaptor.keras_utils.quantizer"], [10, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"], [11, "module-neural_compressor.adaptor.mxnet"], [12, "module-neural_compressor.adaptor.mxnet_utils"], [13, "module-neural_compressor.adaptor.mxnet_utils.util"], [14, "module-neural_compressor.adaptor.onnxrt"], [15, "module-neural_compressor.adaptor.ox_utils.calibration"], [16, "module-neural_compressor.adaptor.ox_utils.calibrator"], [17, "module-neural_compressor.adaptor.ox_utils"], [18, "module-neural_compressor.adaptor.ox_utils.operators.activation"], [19, "module-neural_compressor.adaptor.ox_utils.operators.argmax"], [20, "module-neural_compressor.adaptor.ox_utils.operators.attention"], [21, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"], [22, "module-neural_compressor.adaptor.ox_utils.operators.concat"], [23, "module-neural_compressor.adaptor.ox_utils.operators.conv"], [24, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"], [25, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"], [26, "module-neural_compressor.adaptor.ox_utils.operators.gather"], [27, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"], [28, "module-neural_compressor.adaptor.ox_utils.operators.gemm"], [29, "module-neural_compressor.adaptor.ox_utils.operators"], [30, "module-neural_compressor.adaptor.ox_utils.operators.lstm"], [31, "module-neural_compressor.adaptor.ox_utils.operators.matmul"], [32, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"], [33, "module-neural_compressor.adaptor.ox_utils.operators.norm"], [34, "module-neural_compressor.adaptor.ox_utils.operators.ops"], [35, "module-neural_compressor.adaptor.ox_utils.operators.pad"], [36, "module-neural_compressor.adaptor.ox_utils.operators.pooling"], [37, "module-neural_compressor.adaptor.ox_utils.operators.reduce"], [38, "module-neural_compressor.adaptor.ox_utils.operators.resize"], [39, "module-neural_compressor.adaptor.ox_utils.operators.split"], [40, "module-neural_compressor.adaptor.ox_utils.operators.unary_op"], [41, "module-neural_compressor.adaptor.ox_utils.quantizer"], [42, "module-neural_compressor.adaptor.ox_utils.smooth_quant"], [43, "module-neural_compressor.adaptor.ox_utils.util"], [44, "module-neural_compressor.adaptor.ox_utils.weight_only"], [45, "module-neural_compressor.adaptor.pytorch"], [46, "module-neural_compressor.adaptor.query"], [47, "module-neural_compressor.adaptor.tensorflow"], [48, "module-neural_compressor.adaptor.tf_utils.graph_converter"], [49, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"], [50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"], [51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"], [52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"], [53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"], [54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"], [55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"], [56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"], [57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"], [58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"], [59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"], [60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"], [61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"], [62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"], [63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"], [64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"], [65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"], [66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"], [67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"], [68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"], [69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"], [70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"], [71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"], [72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"], [73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"], [74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"], [75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"], [76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"], [77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"], [78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"], [79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"], [80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"], [81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"], [82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"], [83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"], [84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"], [85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"], [86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"], [87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"], [88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"], [89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"], [90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"], [91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"], [92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"], [93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"], [94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"], [95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"], [96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"], [97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"], [98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"], [99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"], [100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"], [101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"], [102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"], [103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"], [104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"], [105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"], [106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"], [107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"], [108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"], [109, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"], [110, "module-neural_compressor.adaptor.tf_utils.graph_util"], [111, "module-neural_compressor.adaptor.tf_utils"], [112, "module-neural_compressor.adaptor.tf_utils.quantize_graph"], [113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"], [114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"], [115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"], [116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"], [117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"], [118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"], [119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"], [120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"], [121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"], [122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"], [123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"], [124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"], [125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"], [126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"], [127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"], [128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"], [129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"], [130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"], [131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"], [132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"], [133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"], [134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"], [135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"], [136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"], [137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"], [138, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"], [139, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"], [140, "module-neural_compressor.adaptor.tf_utils.smooth_quant_calibration"], [141, "module-neural_compressor.adaptor.tf_utils.smooth_quant_scaler"], [142, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"], [143, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"], [144, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"], [145, "module-neural_compressor.adaptor.tf_utils.transform_graph"], [146, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"], [147, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"], [148, "module-neural_compressor.adaptor.tf_utils.util"], [149, "module-neural_compressor.adaptor.torch_utils.awq"], [150, "module-neural_compressor.adaptor.torch_utils.bf16_convert"], [151, "module-neural_compressor.adaptor.torch_utils.gptq"], [152, "module-neural_compressor.adaptor.torch_utils.hawq_metric"], [153, "module-neural_compressor.adaptor.torch_utils"], [154, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant"], [155, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle"], [156, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize"], [157, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load"], [158, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.utils"], [159, "module-neural_compressor.adaptor.torch_utils.mixed_precision"], [160, "module-neural_compressor.adaptor.torch_utils.model_wrapper"], [161, "module-neural_compressor.adaptor.torch_utils.pattern_detector"], [162, "module-neural_compressor.adaptor.torch_utils.smooth_quant"], [163, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"], [164, "module-neural_compressor.adaptor.torch_utils.teq"], [165, "module-neural_compressor.adaptor.torch_utils.util"], [166, "module-neural_compressor.adaptor.torch_utils.weight_only"], [167, "module-neural_compressor.algorithm.algorithm"], [168, "module-neural_compressor.algorithm.fast_bias_correction"], [169, "module-neural_compressor.algorithm"], [170, "module-neural_compressor.algorithm.smooth_quant"], [171, "module-neural_compressor.algorithm.weight_correction"], [172, "module-neural_compressor.benchmark"], [173, "module-neural_compressor.common.base_config"], [174, "module-neural_compressor.common"], [175, "module-neural_compressor.common.logger"], [176, "module-neural_compressor.common.utility"], [177, "module-neural_compressor.compression.callbacks"], [178, "module-neural_compressor.compression.distillation.criterions"], [179, "module-neural_compressor.compression.distillation"], [180, "module-neural_compressor.compression.distillation.optimizers"], [181, "module-neural_compressor.compression.distillation.utility"], [182, "module-neural_compressor.compression.hpo"], [183, "module-neural_compressor.compression.hpo.sa_optimizer"], [184, "module-neural_compressor.compression.hpo.search_algorithms"], [185, "module-neural_compressor.compression.hpo.search_space"], [186, "module-neural_compressor.compression"], [187, "module-neural_compressor.compression.pruner.criteria"], [188, "module-neural_compressor.compression.pruner"], [189, "module-neural_compressor.compression.pruner.model_slim.auto_slim"], [190, "module-neural_compressor.compression.pruner.model_slim"], [191, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"], [192, "module-neural_compressor.compression.pruner.model_slim.weight_slim"], [193, "module-neural_compressor.compression.pruner.patterns.base"], [194, "module-neural_compressor.compression.pruner.patterns"], [195, "module-neural_compressor.compression.pruner.patterns.mha"], [196, "module-neural_compressor.compression.pruner.patterns.ninm"], [197, "module-neural_compressor.compression.pruner.patterns.nxm"], [198, "module-neural_compressor.compression.pruner.pruners.base"], [199, "module-neural_compressor.compression.pruner.pruners.basic"], [200, "module-neural_compressor.compression.pruner.pruners.block_mask"], [201, "module-neural_compressor.compression.pruner.pruners"], [202, "module-neural_compressor.compression.pruner.pruners.mha"], [203, "module-neural_compressor.compression.pruner.pruners.pattern_lock"], [204, "module-neural_compressor.compression.pruner.pruners.progressive"], [205, "module-neural_compressor.compression.pruner.pruners.retrain_free"], [206, "module-neural_compressor.compression.pruner.pruners.sparse_gpt"], [207, "module-neural_compressor.compression.pruner.pruning"], [208, "module-neural_compressor.compression.pruner.regs"], [209, "module-neural_compressor.compression.pruner.schedulers"], [210, "module-neural_compressor.compression.pruner.tf_criteria"], [211, "module-neural_compressor.compression.pruner.utils"], [212, "module-neural_compressor.conf.config"], [213, "module-neural_compressor.conf.dotdict"], [214, "module-neural_compressor.conf"], [215, "module-neural_compressor.conf.pythonic_config"], [216, "module-neural_compressor.config"], [217, "module-neural_compressor.contrib"], [218, "module-neural_compressor.contrib.strategy"], [219, "module-neural_compressor.contrib.strategy.sigopt"], [220, "module-neural_compressor.contrib.strategy.tpe"], [221, "module-neural_compressor.data.dataloaders.base_dataloader"], [222, "module-neural_compressor.data.dataloaders.dataloader"], [223, "module-neural_compressor.data.dataloaders.default_dataloader"], [224, "module-neural_compressor.data.dataloaders.fetcher"], [225, "module-neural_compressor.data.dataloaders"], [226, "module-neural_compressor.data.dataloaders.mxnet_dataloader"], [227, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"], [228, "module-neural_compressor.data.dataloaders.pytorch_dataloader"], [229, "module-neural_compressor.data.dataloaders.sampler"], [230, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"], [231, "module-neural_compressor.data.datasets.bert_dataset"], [232, "module-neural_compressor.data.datasets.coco_dataset"], [233, "module-neural_compressor.data.datasets.dataset"], [234, "module-neural_compressor.data.datasets.dummy_dataset"], [235, "module-neural_compressor.data.datasets.dummy_dataset_v2"], [236, "module-neural_compressor.data.datasets.imagenet_dataset"], [237, "module-neural_compressor.data.datasets"], [238, "module-neural_compressor.data.datasets.style_transfer_dataset"], [239, "module-neural_compressor.data.filters.coco_filter"], [240, "module-neural_compressor.data.filters.filter"], [241, "module-neural_compressor.data.filters"], [242, "module-neural_compressor.data"], [243, "module-neural_compressor.data.transforms.coco_transform"], [244, "module-neural_compressor.data.transforms.imagenet_transform"], [245, "module-neural_compressor.data.transforms"], [246, "module-neural_compressor.data.transforms.postprocess"], [247, "module-neural_compressor.data.transforms.tokenization"], [248, "module-neural_compressor.data.transforms.transform"], [249, "module-neural_compressor.experimental.benchmark"], [250, "module-neural_compressor.experimental.common.criterion"], [251, "module-neural_compressor.experimental.common.dataloader"], [252, "module-neural_compressor.experimental.common"], [253, "module-neural_compressor.experimental.common.metric"], [254, "module-neural_compressor.experimental.common.model"], [255, "module-neural_compressor.experimental.common.optimizer"], [256, "module-neural_compressor.experimental.common.postprocess"], [257, "module-neural_compressor.experimental.common.torch_utils"], [258, "module-neural_compressor.experimental.component"], [259, "module-neural_compressor.experimental.compression"], [260, "module-neural_compressor.experimental.contrib"], [261, "module-neural_compressor.experimental.contrib.strategy"], [262, "module-neural_compressor.experimental.contrib.strategy.sigopt"], [263, "module-neural_compressor.experimental.contrib.strategy.tpe"], [264, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"], [265, "module-neural_compressor.experimental.data.dataloaders.dataloader"], [266, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"], [267, "module-neural_compressor.experimental.data.dataloaders.fetcher"], [268, "module-neural_compressor.experimental.data.dataloaders"], [269, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"], [270, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"], [271, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"], [272, "module-neural_compressor.experimental.data.dataloaders.sampler"], [273, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"], [274, "module-neural_compressor.experimental.data.datasets.bert_dataset"], [275, "module-neural_compressor.experimental.data.datasets.coco_dataset"], [276, "module-neural_compressor.experimental.data.datasets.dataset"], [277, "module-neural_compressor.experimental.data.datasets.dummy_dataset"], [278, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"], [279, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"], [280, "module-neural_compressor.experimental.data.datasets"], [281, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"], [282, "module-neural_compressor.experimental.data.filters.coco_filter"], [283, "module-neural_compressor.experimental.data.filters.filter"], [284, "module-neural_compressor.experimental.data.filters"], [285, "module-neural_compressor.experimental.data"], [286, "module-neural_compressor.experimental.data.transforms.imagenet_transform"], [287, "module-neural_compressor.experimental.data.transforms"], [288, "module-neural_compressor.experimental.data.transforms.tokenization"], [289, "module-neural_compressor.experimental.data.transforms.transform"], [290, "module-neural_compressor.experimental.distillation"], [291, "module-neural_compressor.experimental.export"], [292, "module-neural_compressor.experimental.export.qlinear2qdq"], [293, "module-neural_compressor.experimental.export.tf2onnx"], [294, "module-neural_compressor.experimental.export.torch2onnx"], [295, "module-neural_compressor.experimental.graph_optimization"], [296, "module-neural_compressor.experimental"], [297, "module-neural_compressor.experimental.metric.bleu"], [298, "module-neural_compressor.experimental.metric.bleu_util"], [299, "module-neural_compressor.experimental.metric.coco_label_map"], [300, "module-neural_compressor.experimental.metric.coco_tools"], [301, "module-neural_compressor.experimental.metric.evaluate_squad"], [302, "module-neural_compressor.experimental.metric.f1"], [303, "module-neural_compressor.experimental.metric"], [304, "module-neural_compressor.experimental.metric.metric"], [305, "module-neural_compressor.experimental.mixed_precision"], [306, "module-neural_compressor.experimental.model_conversion"], [307, "module-neural_compressor.experimental.nas.basic_nas"], [308, "module-neural_compressor.experimental.nas.dynas"], [309, "module-neural_compressor.experimental.nas"], [310, "module-neural_compressor.experimental.nas.nas"], [311, "module-neural_compressor.experimental.nas.nas_utils"], [312, "module-neural_compressor.experimental.nas.search_algorithms"], [313, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"], [314, "module-neural_compressor.experimental.pruner_legacy.group_lasso"], [315, "module-neural_compressor.experimental.pruner_legacy"], [316, "module-neural_compressor.experimental.pruner_legacy.magnitude"], [317, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"], [318, "module-neural_compressor.experimental.pruner_legacy.pruner"], [319, "module-neural_compressor.experimental.pruning"], [320, "module-neural_compressor.experimental.pruning_recipes"], [321, "module-neural_compressor.experimental.pruning_recipes.patterns"], [322, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"], [323, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"], [324, "module-neural_compressor.experimental.pruning_v2"], [325, "module-neural_compressor.experimental.pytorch_pruner"], [326, "module-neural_compressor.experimental.pytorch_pruner.logger"], [327, "module-neural_compressor.experimental.pytorch_pruner.patterns"], [328, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"], [329, "module-neural_compressor.experimental.pytorch_pruner.pruner"], [330, "module-neural_compressor.experimental.pytorch_pruner.pruning"], [331, "module-neural_compressor.experimental.pytorch_pruner.scheduler"], [332, "module-neural_compressor.experimental.quantization"], [333, "module-neural_compressor.experimental.scheduler"], [334, "module-neural_compressor.experimental.strategy.auto_mixed_precision"], [335, "module-neural_compressor.experimental.strategy.basic"], [336, "module-neural_compressor.experimental.strategy.bayesian"], [337, "module-neural_compressor.experimental.strategy.exhaustive"], [338, "module-neural_compressor.experimental.strategy"], [339, "module-neural_compressor.experimental.strategy.mse"], [340, "module-neural_compressor.experimental.strategy.mse_v2"], [341, "module-neural_compressor.experimental.strategy.random"], [342, "module-neural_compressor.experimental.strategy.strategy"], [343, "module-neural_compressor.experimental.strategy.utils.constant"], [344, "module-neural_compressor.experimental.strategy.utils"], [345, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"], [346, "module-neural_compressor.experimental.strategy.utils.tuning_space"], [347, "module-neural_compressor.experimental.strategy.utils.tuning_structs"], [348, "module-neural_compressor.experimental.strategy.utils.utility"], [349, "module-neural_compressor"], [350, "module-neural_compressor.metric.bleu"], [351, "module-neural_compressor.metric.bleu_util"], [352, "module-neural_compressor.metric.coco_label_map"], [353, "module-neural_compressor.metric.coco_tools"], [354, "module-neural_compressor.metric.evaluate_squad"], [355, "module-neural_compressor.metric.f1"], [356, "module-neural_compressor.metric"], [357, "module-neural_compressor.metric.metric"], [358, "module-neural_compressor.mix_precision"], [359, "module-neural_compressor.model.base_model"], [360, "module-neural_compressor.model"], [361, "module-neural_compressor.model.keras_model"], [362, "module-neural_compressor.model.model"], [363, "module-neural_compressor.model.mxnet_model"], [364, "module-neural_compressor.model.nets_factory"], [365, "module-neural_compressor.model.onnx_model"], [366, "module-neural_compressor.model.tensorflow_model"], [367, "module-neural_compressor.model.torch_model"], [368, "module-neural_compressor.objective"], [369, "module-neural_compressor.profiling"], [370, "module-neural_compressor.profiling.parser.factory"], [371, "module-neural_compressor.profiling.parser"], [372, "module-neural_compressor.profiling.parser.onnx_parser.factory"], [373, "module-neural_compressor.profiling.parser.onnx_parser"], [374, "module-neural_compressor.profiling.parser.onnx_parser.parser"], [375, "module-neural_compressor.profiling.parser.parser"], [376, "module-neural_compressor.profiling.parser.result"], [377, "module-neural_compressor.profiling.parser.tensorflow_parser.factory"], [378, "module-neural_compressor.profiling.parser.tensorflow_parser"], [379, "module-neural_compressor.profiling.parser.tensorflow_parser.parser"], [380, "module-neural_compressor.profiling.profiler.factory"], [381, "module-neural_compressor.profiling.profiler"], [382, "module-neural_compressor.profiling.profiler.onnxrt_profiler.factory"], [383, "module-neural_compressor.profiling.profiler.onnxrt_profiler"], [384, "module-neural_compressor.profiling.profiler.onnxrt_profiler.profiler"], [385, "module-neural_compressor.profiling.profiler.onnxrt_profiler.utils"], [386, "module-neural_compressor.profiling.profiler.profiler"], [387, "module-neural_compressor.profiling.profiler.tensorflow_profiler.factory"], [388, "module-neural_compressor.profiling.profiler.tensorflow_profiler"], [389, "module-neural_compressor.profiling.profiler.tensorflow_profiler.profiler"], [390, "module-neural_compressor.profiling.profiler.tensorflow_profiler.utils"], [391, "module-neural_compressor.quantization"], [392, "module-neural_compressor.strategy.auto"], [393, "module-neural_compressor.strategy.auto_mixed_precision"], [394, "module-neural_compressor.strategy.basic"], [395, "module-neural_compressor.strategy.bayesian"], [396, "module-neural_compressor.strategy.conservative"], [397, "module-neural_compressor.strategy.exhaustive"], [398, "module-neural_compressor.strategy.hawq_v2"], [399, "module-neural_compressor.strategy"], [400, "module-neural_compressor.strategy.mse"], [401, "module-neural_compressor.strategy.mse_v2"], [402, "module-neural_compressor.strategy.random"], [403, "module-neural_compressor.strategy.strategy"], [404, "module-neural_compressor.strategy.utils.constant"], [405, "module-neural_compressor.strategy.utils"], [406, "module-neural_compressor.strategy.utils.tuning_sampler"], [407, "module-neural_compressor.strategy.utils.tuning_space"], [408, "module-neural_compressor.strategy.utils.tuning_structs"], [409, "module-neural_compressor.strategy.utils.utility"], [410, "module-neural_compressor.template.api_doc_example"], [411, "module-neural_compressor.template"], [412, "module-neural_compressor.torch.algorithms.gptq"], [413, "module-neural_compressor.torch.algorithms"], [414, "module-neural_compressor.torch.algorithms.rtn"], [415, "module-neural_compressor.torch.algorithms.weight_only_algos"], [416, "module-neural_compressor.torch"], [417, "module-neural_compressor.torch.quantization.config"], [418, "module-neural_compressor.torch.quantization"], [419, "module-neural_compressor.torch.quantization.quantize"], [420, "module-neural_compressor.torch.utils"], [421, "module-neural_compressor.training"], [422, "module-neural_compressor.utils.collect_layer_histogram"], [423, "module-neural_compressor.utils.constant"], [424, "module-neural_compressor.utils.create_obj_from_config"], [425, "module-neural_compressor.utils"], [426, "module-neural_compressor.utils.kl_divergence"], [427, "module-neural_compressor.utils.load_huggingface"], [428, "module-neural_compressor.utils.logger"], [429, "module-neural_compressor.utils.neural_insights_utils"], [430, "module-neural_compressor.utils.options"], [431, "module-neural_compressor.utils.pytorch"], [432, "module-neural_compressor.utils.utility"], [433, "module-neural_compressor.utils.weights_details"], [434, "module-neural_compressor.version"]], "adaptor (class in neural_compressor.adaptor.adaptor)": [[1, "neural_compressor.adaptor.adaptor.Adaptor"]], "adaptor_registry() (in module neural_compressor.adaptor.adaptor)": [[1, "neural_compressor.adaptor.adaptor.adaptor_registry"]], "neural_compressor.adaptor.adaptor": [[1, "module-neural_compressor.adaptor.adaptor"]], "neural_compressor.adaptor": [[2, "module-neural_compressor.adaptor"]], "kerasadaptor (class in neural_compressor.adaptor.keras)": [[3, "neural_compressor.adaptor.keras.KerasAdaptor"]], "kerasquery (class in neural_compressor.adaptor.keras)": [[3, "neural_compressor.adaptor.keras.KerasQuery"]], "neural_compressor.adaptor.keras": [[3, "module-neural_compressor.adaptor.keras"]], "neural_compressor.adaptor.keras_utils.conv2d": [[4, "module-neural_compressor.adaptor.keras_utils.conv2d"]], "neural_compressor.adaptor.keras_utils.dense": [[5, "module-neural_compressor.adaptor.keras_utils.dense"]], "neural_compressor.adaptor.keras_utils.depthwise_conv2d": [[6, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"]], "neural_compressor.adaptor.keras_utils": [[7, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.pool2d": [[8, "module-neural_compressor.adaptor.keras_utils.pool2d"]], "neural_compressor.adaptor.keras_utils.quantizer": [[9, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "neural_compressor.adaptor.keras_utils.separable_conv2d": [[10, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"]], "mxnetquery (class in neural_compressor.adaptor.mxnet)": [[11, "neural_compressor.adaptor.mxnet.MXNetQuery"]], "mxnetadaptor (class in neural_compressor.adaptor.mxnet)": [[11, "neural_compressor.adaptor.mxnet.MxNetAdaptor"]], "neural_compressor.adaptor.mxnet": [[11, "module-neural_compressor.adaptor.mxnet"]], "neural_compressor.adaptor.mxnet_utils": [[12, "module-neural_compressor.adaptor.mxnet_utils"]], "calibcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CalibCollector"]], "calibdata (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CalibData"]], "collectorbase (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CollectorBase"]], "dataiterloader (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.DataIterLoader"]], "dataloaderwrap (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.DataLoaderWrap"]], "namecollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.NameCollector"]], "optype (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.OpType"]], "tensorcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.TensorCollector"]], "amp_convert() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.amp_convert"]], "calib_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.calib_model"]], "check_mx_version() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.check_mx_version"]], "combine_capabilities() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.combine_capabilities"]], "create_data_example() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.create_data_example"]], "distribute_calib_tensors() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.distribute_calib_tensors"]], "ensure_list() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.ensure_list"]], "fuse() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.fuse"]], "get_framework_name() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.get_framework_name"]], "is_model_quantized() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.is_model_quantized"]], "isiterable() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.isiterable"]], "make_module() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.make_module"]], "make_nc_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.make_nc_model"]], "make_symbol_block() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.make_symbol_block"]], "ndarray_to_device() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.ndarray_to_device"]], "neural_compressor.adaptor.mxnet_utils.util": [[13, "module-neural_compressor.adaptor.mxnet_utils.util"]], "parse_tune_config() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.parse_tune_config"]], "prepare_dataloader() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.prepare_dataloader"]], "prepare_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.prepare_model"]], "prepare_model_data() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.prepare_model_data"]], "quantize_sym_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.quantize_sym_model"]], "query_quantizable_nodes() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.query_quantizable_nodes"]], "run_forward() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.run_forward"]], "onnxrtquery (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRTQuery"]], "onnxrt_integeropsadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_IntegerOpsAdaptor"]], "onnxrt_qdqadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_QDQAdaptor"]], "onnxrt_qlinearopsadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_QLinearOpsAdaptor"]], "onnxrt_weightonlyadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_WeightOnlyAdaptor"]], "onnxruntimeadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor"]], "neural_compressor.adaptor.onnxrt": [[14, "module-neural_compressor.adaptor.onnxrt"]], "onnxrtaugment (class in neural_compressor.adaptor.ox_utils.calibration)": [[15, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment"]], "neural_compressor.adaptor.ox_utils.calibration": [[15, "module-neural_compressor.adaptor.ox_utils.calibration"]], "calibratorbase (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.CalibratorBase"]], "histogramcollector (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.HistogramCollector"]], "klcalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.KLCalibrator"]], "minmaxcalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.MinMaxCalibrator"]], "percentilecalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.PercentileCalibrator"]], "calib_registry() (in module neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.calib_registry"]], "neural_compressor.adaptor.ox_utils.calibrator": [[16, "module-neural_compressor.adaptor.ox_utils.calibrator"]], "smooth_distribution() (in module neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.smooth_distribution"]], "neural_compressor.adaptor.ox_utils": [[17, "module-neural_compressor.adaptor.ox_utils"]], "activationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator"]], "float16activationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.Float16ActivationOperator"]], "qactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.QActivationOperator"]], "removableactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.RemovableActivationOperator"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[18, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "argmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[19, "neural_compressor.adaptor.ox_utils.operators.argmax.ArgMaxOperator"]], "qargmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[19, "neural_compressor.adaptor.ox_utils.operators.argmax.QArgMaxOperator"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[19, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "attentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[20, "neural_compressor.adaptor.ox_utils.operators.attention.AttentionOperator"]], "qattentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[20, "neural_compressor.adaptor.ox_utils.operators.attention.QAttentionOperator"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[20, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "binarydirect8bitoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[21, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryDirect8BitOperator"]], "binaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[21, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator"]], "float16binaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[21, "neural_compressor.adaptor.ox_utils.operators.binary_op.Float16BinaryOperator"]], "qbinaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[21, "neural_compressor.adaptor.ox_utils.operators.binary_op.QBinaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[21, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "concatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[22, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator"]], "qconcatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[22, "neural_compressor.adaptor.ox_utils.operators.concat.QConcatOperator"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[22, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "convoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[23, "neural_compressor.adaptor.ox_utils.operators.conv.ConvOperator"]], "qconvoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[23, "neural_compressor.adaptor.ox_utils.operators.conv.QConvOperator"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[23, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "direct8bitoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[24, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator"]], "qdirectoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[24, "neural_compressor.adaptor.ox_utils.operators.direct_q8.QDirectOperator"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[24, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "embedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[25, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.EmbedLayerNormalizationOperator"]], "qembedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[25, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.QEmbedLayerNormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[25, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "gatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[26, "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator"]], "qgatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[26, "neural_compressor.adaptor.ox_utils.operators.gather.QGatherOperator"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[26, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "globalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[27, "neural_compressor.adaptor.ox_utils.operators.gavgpool.GlobalAveragePoolOperator"]], "qglobalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[27, "neural_compressor.adaptor.ox_utils.operators.gavgpool.QGlobalAveragePoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[27, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "gemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[28, "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator"]], "qgemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[28, "neural_compressor.adaptor.ox_utils.operators.gemm.QGemmOperator"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[28, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[29, "module-neural_compressor.adaptor.ox_utils.operators"]], "lstmoperator (class in neural_compressor.adaptor.ox_utils.operators.lstm)": [[30, "neural_compressor.adaptor.ox_utils.operators.lstm.LSTMOperator"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[30, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "fusedmatmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[31, "neural_compressor.adaptor.ox_utils.operators.matmul.FusedMatMulOperator"]], "matmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[31, "neural_compressor.adaptor.ox_utils.operators.matmul.MatMulOperator"]], "qmatmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[31, "neural_compressor.adaptor.ox_utils.operators.matmul.QMatMulOperator"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[31, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "maxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[32, "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator"]], "qmaxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[32, "neural_compressor.adaptor.ox_utils.operators.maxpool.QMaxPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[32, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "batchnormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.norm)": [[33, "neural_compressor.adaptor.ox_utils.operators.norm.BatchNormalizationOperator"]], "normalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.norm)": [[33, "neural_compressor.adaptor.ox_utils.operators.norm.NormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.norm": [[33, "module-neural_compressor.adaptor.ox_utils.operators.norm"]], "operator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.Operator"]], "qoperator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.QOperator"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[34, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "op_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.op_registry"]], "qop_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.qop_registry"]], "padoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[35, "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator"]], "qpadoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[35, "neural_compressor.adaptor.ox_utils.operators.pad.QPadOperator"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[35, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "pooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[36, "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator"]], "qpooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[36, "neural_compressor.adaptor.ox_utils.operators.pooling.QPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[36, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "reduceminmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.reduce)": [[37, "neural_compressor.adaptor.ox_utils.operators.reduce.ReduceMinMaxOperator"]], "reduceoperator (class in neural_compressor.adaptor.ox_utils.operators.reduce)": [[37, "neural_compressor.adaptor.ox_utils.operators.reduce.ReduceOperator"]], "neural_compressor.adaptor.ox_utils.operators.reduce": [[37, "module-neural_compressor.adaptor.ox_utils.operators.reduce"]], "qresizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[38, "neural_compressor.adaptor.ox_utils.operators.resize.QResizeOperator"]], "resizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[38, "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[38, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "qsplitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[39, "neural_compressor.adaptor.ox_utils.operators.split.QSplitOperator"]], "splitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[39, "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator"]], "neural_compressor.adaptor.ox_utils.operators.split": [[39, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "unarydirect8bitoperator (class in neural_compressor.adaptor.ox_utils.operators.unary_op)": [[40, "neural_compressor.adaptor.ox_utils.operators.unary_op.UnaryDirect8BitOperator"]], "unaryoperator (class in neural_compressor.adaptor.ox_utils.operators.unary_op)": [[40, "neural_compressor.adaptor.ox_utils.operators.unary_op.UnaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.unary_op": [[40, "module-neural_compressor.adaptor.ox_utils.operators.unary_op"]], "quantizer (class in neural_compressor.adaptor.ox_utils.quantizer)": [[41, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer"]], "neural_compressor.adaptor.ox_utils.quantizer": [[41, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "ortsmoothquant (class in neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.ORTSmoothQuant"]], "get_quant_dequant_output() (in module neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.get_quant_dequant_output"]], "make_sub_graph() (in module neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.make_sub_graph"]], "neural_compressor.adaptor.ox_utils.smooth_quant": [[42, "module-neural_compressor.adaptor.ox_utils.smooth_quant"]], "quant_dequant_data() (in module neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.quant_dequant_data"]], "quantformat (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantFormat"]], "quanttype (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantType"]], "quantizationmode (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizationMode"]], "quantizedinitializer (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizedInitializer"]], "quantizedvalue (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizedValue"]], "quantizedvaluetype (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizedValueType"]], "valueinfo (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.ValueInfo"]], "attribute_to_kwarg() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.attribute_to_kwarg"]], "calculate_scale_zp() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.calculate_scale_zp"]], "cast_tensor() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.cast_tensor"]], "collate_preds() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.collate_preds"]], "dequantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.dequantize_data"]], "dequantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.dequantize_data_with_scale_zero"]], "dtype_to_name() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.dtype_to_name"]], "find_by_name() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.find_by_name"]], "float_to_bfloat16() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.float_to_bfloat16"]], "float_to_float16() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.float_to_float16"]], "is_b_transposed() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.is_B_transposed"]], "make_dquant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.make_dquant_node"]], "make_quant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.make_quant_node"]], "neural_compressor.adaptor.ox_utils.util": [[43, "module-neural_compressor.adaptor.ox_utils.util"]], "quantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_data"]], "quantize_data_per_channel() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_data_per_channel"]], "quantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_data_with_scale_zero"]], "quantize_nparray() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_nparray"]], "remove_init_from_model_input() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.remove_init_from_model_input"]], "split_shared_bias() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.split_shared_bias"]], "to_numpy() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.to_numpy"]], "trt_env_setup() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.trt_env_setup"]], "apply_awq_clip() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.apply_awq_clip"]], "apply_awq_scale() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.apply_awq_scale"]], "awq_quantize() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.awq_quantize"]], "get_blob_size() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.get_blob_size"]], "get_weight_scale() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.get_weight_scale"]], "gptq() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.gptq"]], "gptq_quantize() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.gptq_quantize"]], "make_matmul_weight_only_node() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.make_matmul_weight_only_node"]], "neural_compressor.adaptor.ox_utils.weight_only": [[44, "module-neural_compressor.adaptor.ox_utils.weight_only"]], "pad_tensor() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.pad_tensor"]], "prepare_inputs() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.prepare_inputs"]], "qdq_tensor() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.qdq_tensor"]], "quant_tensor() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.quant_tensor"]], "rtn_quantize() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.rtn_quantize"]], "pytorchadaptor (class in neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.PyTorchAdaptor"]], "pytorchweightonlyadaptor (class in neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.PyTorchWeightOnlyAdaptor"]], "pytorch_fxadaptor (class in neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor"]], "pytorch_ipexadaptor (class in neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor"]], "templateadaptor (class in neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.TemplateAdaptor"]], "get_ops_recursively() (in module neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.get_ops_recursively"]], "neural_compressor.adaptor.pytorch": [[45, "module-neural_compressor.adaptor.pytorch"]], "querybackendcapability (class in neural_compressor.adaptor.query)": [[46, "neural_compressor.adaptor.query.QueryBackendCapability"]], "neural_compressor.adaptor.query": [[46, "module-neural_compressor.adaptor.query"]], "tensorflowadaptor (class in neural_compressor.adaptor.tensorflow)": [[47, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor"]], "tensorflowquery (class in neural_compressor.adaptor.tensorflow)": [[47, "neural_compressor.adaptor.tensorflow.TensorflowQuery"]], "tensorflow_itexadaptor (class in neural_compressor.adaptor.tensorflow)": [[47, "neural_compressor.adaptor.tensorflow.Tensorflow_ITEXAdaptor"]], "neural_compressor.adaptor.tensorflow": [[47, "module-neural_compressor.adaptor.tensorflow"]], "graphconverter (class in neural_compressor.adaptor.tf_utils.graph_converter)": [[48, "neural_compressor.adaptor.tf_utils.graph_converter.GraphConverter"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[48, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "graphconverterwithoutcalib (class in neural_compressor.adaptor.tf_utils.graph_converter_without_calib)": [[49, "neural_compressor.adaptor.tf_utils.graph_converter_without_calib.GraphConverterWithoutCalib"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[49, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "bf16convert (class in neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert)": [[50, "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.BF16Convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "convertaddtobiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd)": [[52, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "convertlayoutoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout)": [[53, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "convertleakyreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu)": [[54, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "convertnantorandom (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random)": [[55, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "convertplaceholdertoconst (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const)": [[56, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "dequantizecastoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer)": [[57, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.DequantizeCastOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"]], "dilatedcontraction (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction)": [[58, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.DilatedContraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "injectdummybiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd)": [[59, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "expanddimsoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer)": [[60, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "fetchweightfromreshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape)": [[61, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "foldbatchnormnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm)": [[62, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "graphfoldconstantoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant)": [[63, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "fusebiasaddandaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add)": [[64, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "fusecolumnwisemuloptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul)": [[65, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "fuseconvwithmathoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "fusedecomposedbnoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.FuseDecomposedBNOptimizer"]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.bypass_reshape"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.values_from_const"]], "fusedecomposedinoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.FuseDecomposedINOptimizer"]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.bypass_reshape"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.values_from_const"]], "fusegeluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu)": [[69, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "fuselayernormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_name_from_input"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.values_from_const"]], "fusepadwithconv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv)": [[71, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "fusepadwithfp32conv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv)": [[72, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "fusetransposereshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose)": [[73, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "graphcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer)": [[74, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "grappleroptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass)": [[75, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "insertprintminmaxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node)": [[77, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "movesqueezeafterreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu)": [[78, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "preoptimization (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize)": [[79, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.PreOptimization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "removetrainingnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes)": [[80, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "renamebatchnormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm)": [[81, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "splitsharedinputoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input)": [[82, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "stripequivalentnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes)": [[83, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "stripunusednodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes)": [[84, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "switchoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer)": [[85, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "graphrewriterbase (class in neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base)": [[86, "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "freezefakequantopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "freezevaluetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value)": [[89, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "freezevaluewithoutcalibtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "fuseconvredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "fuseconvrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize)": [[92, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "fusematmulredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "fusematmulrequantizedequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer"]], "fusematmulrequantizedequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer"]], "fusematmulrequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer"]], "fusematmulrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "metainfochangingmemopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "posthostconstconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "postcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "quantizedrnnconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "scalepropagationtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"]], "onnxgraph (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph)": [[102, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"]], "onnxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"]], "onnxopschema (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.OnnxOpSchema"]], "get_max_supported_opset_version() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.get_max_supported_opset_version"]], "get_schema() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.get_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"]], "seqtype (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.SeqType"]], "add_port_to_name() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.add_port_to_name"]], "are_shapes_equal() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.are_shapes_equal"]], "assert_error() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.assert_error"]], "compute_const_folding_using_tf() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.compute_const_folding_using_tf"]], "convert_tensorflow_tensor_to_onnx() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.convert_tensorflow_tensor_to_onnx"]], "find_opset() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.find_opset"]], "get_index_from_strided_slice_of_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_index_from_strided_slice_of_shape"]], "get_subgraphs_from_onnx() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_subgraphs_from_onnx"]], "get_tensorflow_node_attr() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_node_attr"]], "get_tensorflow_node_shape_attr() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_node_shape_attr"]], "get_tensorflow_tensor_data() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_tensor_data"]], "get_tensorflow_tensor_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_tensor_shape"]], "infer_onnx_shape_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.infer_onnx_shape_dtype"]], "initialize_name_counter() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.initialize_name_counter"]], "is_list_or_tuple() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.is_list_or_tuple"]], "is_onnx_domain() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.is_onnx_domain"]], "make_onnx_inputs_outputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.make_onnx_inputs_outputs"]], "make_onnx_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.make_onnx_shape"]], "map_numpy_to_onnx_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_numpy_to_onnx_dtype"]], "map_onnx_to_numpy_type() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_onnx_to_numpy_type"]], "map_tensorflow_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_tensorflow_dtype"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"]], "read_tensorflow_node_attrs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.read_tensorflow_node_attrs"]], "save_protobuf() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.save_protobuf"]], "set_name() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.set_name"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "generategraphwithqdqpattern (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern)": [[107, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "mergeduplicatedqdqoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq)": [[108, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "shareqdqforitexypatternoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern)": [[109, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[109, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "graphanalyzer (class in neural_compressor.adaptor.tf_utils.graph_util)": [[110, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer"]], "graphrewriterhelper (class in neural_compressor.adaptor.tf_utils.graph_util)": [[110, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper"]], "neural_compressor.adaptor.tf_utils.graph_util": [[110, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "neural_compressor.adaptor.tf_utils": [[111, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[112, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "fakequantize (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[113, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantize"]], "fakequantizebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[113, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "quantizeconfig (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config)": [[115, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "init_quantize_config() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[116, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.init_quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "qat_clone_function() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[116, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "config_quantizable_layers() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer)": [[118, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer.config_quantizable_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "quantizelayeradd (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add)": [[119, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add.QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "quantizelayerbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base)": [[120, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base.QuantizeLayerBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "quantizelayerbatchnormalization (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn.QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "quantizewrapper (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper"]], "quantizewrapperbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn)": [[123, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2)": [[124, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv)": [[125, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "fusenodestartwithdeconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv)": [[126, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "fusenodestartwithfusedinstancenorm (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in)": [[127, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul)": [[128, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling)": [[129, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "optimizeqdqgraph (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq)": [[131, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "quantizegraphbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[132, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase"]], "quantizenodebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[132, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2)": [[134, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "quantizegraphforintel (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu)": [[136, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul)": [[137, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling)": [[138, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[138, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "quantizegraphhelper (class in neural_compressor.adaptor.tf_utils.quantize_graph_common)": [[139, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[139, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "smoothquantcalibration (class in neural_compressor.adaptor.tf_utils.smooth_quant_calibration)": [[140, "neural_compressor.adaptor.tf_utils.smooth_quant_calibration.SmoothQuantCalibration"]], "smoothquantcalibrationllm (class in neural_compressor.adaptor.tf_utils.smooth_quant_calibration)": [[140, "neural_compressor.adaptor.tf_utils.smooth_quant_calibration.SmoothQuantCalibrationLLM"]], "neural_compressor.adaptor.tf_utils.smooth_quant_calibration": [[140, "module-neural_compressor.adaptor.tf_utils.smooth_quant_calibration"]], "smoothquantscaler (class in neural_compressor.adaptor.tf_utils.smooth_quant_scaler)": [[141, "neural_compressor.adaptor.tf_utils.smooth_quant_scaler.SmoothQuantScaler"]], "smoothquantscalerllm (class in neural_compressor.adaptor.tf_utils.smooth_quant_scaler)": [[141, "neural_compressor.adaptor.tf_utils.smooth_quant_scaler.SmoothQuantScalerLLM"]], "neural_compressor.adaptor.tf_utils.smooth_quant_scaler": [[141, "module-neural_compressor.adaptor.tf_utils.smooth_quant_scaler"]], "tensorflowqdqtoonnxqdqconverter (class in neural_compressor.adaptor.tf_utils.tf2onnx_converter)": [[142, "neural_compressor.adaptor.tf_utils.tf2onnx_converter.TensorflowQDQToOnnxQDQConverter"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[142, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"]], "biascorrection (class in neural_compressor.adaptor.tf_utils.transform_graph.bias_correction)": [[143, "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.BiasCorrection"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[143, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "graphtransformbase (class in neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base)": [[144, "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[144, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[145, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "insertlogging (class in neural_compressor.adaptor.tf_utils.transform_graph.insert_logging)": [[146, "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.InsertLogging"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[146, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "rerangequantizedconcat (class in neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat)": [[147, "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[147, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "apply_inlining() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.apply_inlining"]], "collate_tf_preds() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.collate_tf_preds"]], "construct_function_from_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.construct_function_from_graph_def"]], "disable_random() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.disable_random"]], "fix_ref_type_of_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.fix_ref_type_of_graph_def"]], "generate_feed_dict() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.generate_feed_dict"]], "get_estimator_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_estimator_graph"]], "get_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_graph_def"]], "get_input_output_node_names() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_input_output_node_names"]], "get_model_input_shape() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_model_input_shape"]], "get_tensor_by_name() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_tensor_by_name"]], "get_tensor_val_from_graph_node() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_tensor_val_from_graph_node"]], "get_weight_from_input_tensor() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_weight_from_input_tensor"]], "int8_node_name_reverse() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.int8_node_name_reverse"]], "is_ckpt_format() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.is_ckpt_format"]], "is_saved_model_format() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.is_saved_model_format"]], "iterator_sess_run() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.iterator_sess_run"]], "neural_compressor.adaptor.tf_utils.util": [[148, "module-neural_compressor.adaptor.tf_utils.util"]], "parse_saved_model() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.parse_saved_model"]], "read_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.read_graph"]], "reconstruct_saved_model() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.reconstruct_saved_model"]], "strip_equivalent_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.strip_equivalent_nodes"]], "strip_unused_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.strip_unused_nodes"]], "tf_diagnosis_helper() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.tf_diagnosis_helper"]], "version1_eq_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.version1_lte_version2"]], "write_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.write_graph"]], "actawareweightquant (class in neural_compressor.adaptor.torch_utils.awq)": [[149, "neural_compressor.adaptor.torch_utils.awq.ActAwareWeightQuant"]], "neural_compressor.adaptor.torch_utils.awq": [[149, "module-neural_compressor.adaptor.torch_utils.awq"]], "bf16modulewrapper (class in neural_compressor.adaptor.torch_utils.bf16_convert)": [[150, "neural_compressor.adaptor.torch_utils.bf16_convert.BF16ModuleWrapper"]], "convert() (in module neural_compressor.adaptor.torch_utils.bf16_convert)": [[150, "neural_compressor.adaptor.torch_utils.bf16_convert.Convert"]], "bf16_symbolic_trace() (in module neural_compressor.adaptor.torch_utils.bf16_convert)": [[150, "neural_compressor.adaptor.torch_utils.bf16_convert.bf16_symbolic_trace"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[150, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "gptq (class in neural_compressor.adaptor.torch_utils.gptq)": [[151, "neural_compressor.adaptor.torch_utils.gptq.GPTQ"]], "gptquantizer (class in neural_compressor.adaptor.torch_utils.gptq)": [[151, "neural_compressor.adaptor.torch_utils.gptq.GPTQuantizer"]], "find_layers() (in module neural_compressor.adaptor.torch_utils.gptq)": [[151, "neural_compressor.adaptor.torch_utils.gptq.find_layers"]], "find_layers_name() (in module neural_compressor.adaptor.torch_utils.gptq)": [[151, "neural_compressor.adaptor.torch_utils.gptq.find_layers_name"]], "is_leaf() (in module neural_compressor.adaptor.torch_utils.gptq)": [[151, "neural_compressor.adaptor.torch_utils.gptq.is_leaf"]], "log_quantizable_layers_per_transformer() (in module neural_compressor.adaptor.torch_utils.gptq)": [[151, "neural_compressor.adaptor.torch_utils.gptq.log_quantizable_layers_per_transformer"]], "neural_compressor.adaptor.torch_utils.gptq": [[151, "module-neural_compressor.adaptor.torch_utils.gptq"]], "quantize() (in module neural_compressor.adaptor.torch_utils.gptq)": [[151, "neural_compressor.adaptor.torch_utils.gptq.quantize"]], "trace_gptq_target_blocks() (in module neural_compressor.adaptor.torch_utils.gptq)": [[151, "neural_compressor.adaptor.torch_utils.gptq.trace_gptq_target_blocks"]], "hessiantrace (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[152, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace"]], "node_collector (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[152, "neural_compressor.adaptor.torch_utils.hawq_metric.Node_collector"]], "compare_weights() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[152, "neural_compressor.adaptor.torch_utils.hawq_metric.compare_weights"]], "hawq_top() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[152, "neural_compressor.adaptor.torch_utils.hawq_metric.hawq_top"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[152, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[153, "module-neural_compressor.adaptor.torch_utils"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant": [[154, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant"]], "pickleerror": [[155, "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle.PickleError"]], "picklingerror": [[155, "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle.PicklingError"]], "unpicklingerror": [[155, "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle.UnpicklingError"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle": [[155, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle"]], "layerwisequant (class in neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize)": [[156, "neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize.LayerWiseQuant"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize": [[156, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize"]], "load() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load)": [[157, "neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load.load"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load": [[157, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load"]], "dowload_hf_model() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[158, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.dowload_hf_model"]], "get_children() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[158, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.get_children"]], "get_module() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[158, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.get_module"]], "get_named_children() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[158, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.get_named_children"]], "get_super_module_by_name() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[158, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.get_super_module_by_name"]], "load_empty_model() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[158, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.load_empty_model"]], "load_layer_wise_quantized_model() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[158, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.load_layer_wise_quantized_model"]], "load_tensor() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[158, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.load_tensor"]], "load_tensor_from_shard() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[158, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.load_tensor_from_shard"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils": [[158, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.utils"]], "update_module() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[158, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.update_module"]], "ipex_mixed_precision() (in module neural_compressor.adaptor.torch_utils.mixed_precision)": [[159, "neural_compressor.adaptor.torch_utils.mixed_precision.ipex_mixed_precision"]], "neural_compressor.adaptor.torch_utils.mixed_precision": [[159, "module-neural_compressor.adaptor.torch_utils.mixed_precision"]], "fakeaffinetensorquantfunction (class in neural_compressor.adaptor.torch_utils.model_wrapper)": [[160, "neural_compressor.adaptor.torch_utils.model_wrapper.FakeAffineTensorQuantFunction"]], "mullinear (class in neural_compressor.adaptor.torch_utils.model_wrapper)": [[160, "neural_compressor.adaptor.torch_utils.model_wrapper.MulLinear"]], "teqlinearfakequant (class in neural_compressor.adaptor.torch_utils.model_wrapper)": [[160, "neural_compressor.adaptor.torch_utils.model_wrapper.TEQLinearFakeQuant"]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[160, "module-neural_compressor.adaptor.torch_utils.model_wrapper"]], "transformerbasedmodelblockpatterndetector (class in neural_compressor.adaptor.torch_utils.pattern_detector)": [[161, "neural_compressor.adaptor.torch_utils.pattern_detector.TransformerBasedModelBlockPatternDetector"]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[161, "module-neural_compressor.adaptor.torch_utils.pattern_detector"]], "torchsmoothquant (class in neural_compressor.adaptor.torch_utils.smooth_quant)": [[162, "neural_compressor.adaptor.torch_utils.smooth_quant.TorchSmoothQuant"]], "get_module() (in module neural_compressor.adaptor.torch_utils.smooth_quant)": [[162, "neural_compressor.adaptor.torch_utils.smooth_quant.get_module"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[162, "module-neural_compressor.adaptor.torch_utils.smooth_quant"]], "set_module() (in module neural_compressor.adaptor.torch_utils.smooth_quant)": [[162, "neural_compressor.adaptor.torch_utils.smooth_quant.set_module"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[163, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "symbolic_trace() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[163, "neural_compressor.adaptor.torch_utils.symbolic_trace.symbolic_trace"]], "trace_and_fuse_sub_graph() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[163, "neural_compressor.adaptor.torch_utils.symbolic_trace.trace_and_fuse_sub_graph"]], "tequantizer (class in neural_compressor.adaptor.torch_utils.teq)": [[164, "neural_compressor.adaptor.torch_utils.teq.TEQuantizer"]], "neural_compressor.adaptor.torch_utils.teq": [[164, "module-neural_compressor.adaptor.torch_utils.teq"]], "append_attr() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.append_attr"]], "auto_copy() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.auto_copy"]], "calculate_quant_min_max() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.calculate_quant_min_max"]], "calibration() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.calibration"]], "check_cfg_and_qconfig() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.check_cfg_and_qconfig"]], "collate_torch_preds() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.collate_torch_preds"]], "collect_weight_info() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.collect_weight_info"]], "fetch_module() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.fetch_module"]], "forward_wrapper() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.forward_wrapper"]], "generate_activation_observer() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.generate_activation_observer"]], "get_absorb_layers() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.get_absorb_layers"]], "get_block_prefix() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.get_block_prefix"]], "get_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.get_depth"]], "get_dict_at_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.get_dict_at_depth"]], "get_element_under_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.get_element_under_depth"]], "get_embedding_contiguous() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.get_embedding_contiguous"]], "get_example_input() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.get_example_input"]], "get_fallback_order() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.get_fallback_order"]], "get_hidden_states() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.get_hidden_states"]], "get_module_input_output() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.get_module_input_output"]], "get_mse_order_per_fp32() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_fp32"]], "get_mse_order_per_int8() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_int8"]], "get_op_type_by_name() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.get_op_type_by_name"]], "get_quantizable_ops_from_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.get_quantizable_ops_from_cfgs"]], "get_torch_version() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.get_torch_version"]], "input2tuple() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.input2tuple"]], "is_fused_module() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.is_fused_module"]], "match_datatype_pattern() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.match_datatype_pattern"]], "move_input_device() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.move_input_device"]], "neural_compressor.adaptor.torch_utils.util": [[165, "module-neural_compressor.adaptor.torch_utils.util"]], "paser_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.paser_cfgs"]], "set_module() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.set_module"]], "simple_inference() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.simple_inference"]], "update_sq_scale() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.update_sq_scale"]], "awq_quantize() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[166, "neural_compressor.adaptor.torch_utils.weight_only.awq_quantize"]], "gptq_quantize() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[166, "neural_compressor.adaptor.torch_utils.weight_only.gptq_quantize"]], "neural_compressor.adaptor.torch_utils.weight_only": [[166, "module-neural_compressor.adaptor.torch_utils.weight_only"]], "qdq_weight_actor() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[166, "neural_compressor.adaptor.torch_utils.weight_only.qdq_weight_actor"]], "qdq_weight_asym() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[166, "neural_compressor.adaptor.torch_utils.weight_only.qdq_weight_asym"]], "qdq_weight_sym() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[166, "neural_compressor.adaptor.torch_utils.weight_only.qdq_weight_sym"]], "quant_weight() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[166, "neural_compressor.adaptor.torch_utils.weight_only.quant_weight"]], "quant_weight_w_scale() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[166, "neural_compressor.adaptor.torch_utils.weight_only.quant_weight_w_scale"]], "quantize_4bit() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[166, "neural_compressor.adaptor.torch_utils.weight_only.quantize_4bit"]], "rtn_quantize() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[166, "neural_compressor.adaptor.torch_utils.weight_only.rtn_quantize"]], "search_clip() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[166, "neural_compressor.adaptor.torch_utils.weight_only.search_clip"]], "teq_quantize() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[166, "neural_compressor.adaptor.torch_utils.weight_only.teq_quantize"]], "algorithms (class in neural_compressor.algorithm.algorithm)": [[167, "neural_compressor.algorithm.algorithm.ALGORITHMS"]], "algorithm (class in neural_compressor.algorithm.algorithm)": [[167, "neural_compressor.algorithm.algorithm.Algorithm"]], "algorithmscheduler (class in neural_compressor.algorithm.algorithm)": [[167, "neural_compressor.algorithm.algorithm.AlgorithmScheduler"]], "algorithm_registry() (in module neural_compressor.algorithm.algorithm)": [[167, "neural_compressor.algorithm.algorithm.algorithm_registry"]], "neural_compressor.algorithm.algorithm": [[167, "module-neural_compressor.algorithm.algorithm"]], "fastbiascorrection (class in neural_compressor.algorithm.fast_bias_correction)": [[168, "neural_compressor.algorithm.fast_bias_correction.FastBiasCorrection"]], "neural_compressor.algorithm.fast_bias_correction": [[168, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[169, "module-neural_compressor.algorithm"]], "smoothquant (class in neural_compressor.algorithm.smooth_quant)": [[170, "neural_compressor.algorithm.smooth_quant.SmoothQuant"]], "neural_compressor.algorithm.smooth_quant": [[170, "module-neural_compressor.algorithm.smooth_quant"]], "weightcorrection (class in neural_compressor.algorithm.weight_correction)": [[171, "neural_compressor.algorithm.weight_correction.WeightCorrection"]], "neural_compressor.algorithm.weight_correction": [[171, "module-neural_compressor.algorithm.weight_correction"]], "benchmark_with_raw_cmd() (in module neural_compressor.benchmark)": [[172, "neural_compressor.benchmark.benchmark_with_raw_cmd"]], "call_one() (in module neural_compressor.benchmark)": [[172, "neural_compressor.benchmark.call_one"]], "config_instance() (in module neural_compressor.benchmark)": [[172, "neural_compressor.benchmark.config_instance"]], "fit() (in module neural_compressor.benchmark)": [[172, "neural_compressor.benchmark.fit"]], "generate_prefix() (in module neural_compressor.benchmark)": [[172, "neural_compressor.benchmark.generate_prefix"]], "get_architecture() (in module neural_compressor.benchmark)": [[172, "neural_compressor.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.benchmark)": [[172, "neural_compressor.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.benchmark)": [[172, "neural_compressor.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.benchmark)": [[172, "neural_compressor.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.benchmark)": [[172, "neural_compressor.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.benchmark)": [[172, "neural_compressor.benchmark.get_threads_per_core"]], "neural_compressor.benchmark": [[172, "module-neural_compressor.benchmark"]], "profile() (in module neural_compressor.benchmark)": [[172, "neural_compressor.benchmark.profile"]], "run_instance() (in module neural_compressor.benchmark)": [[172, "neural_compressor.benchmark.run_instance"]], "set_all_env_var() (in module neural_compressor.benchmark)": [[172, "neural_compressor.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.benchmark)": [[172, "neural_compressor.benchmark.set_env_var"]], "summary_benchmark() (in module neural_compressor.benchmark)": [[172, "neural_compressor.benchmark.summary_benchmark"]], "baseconfig (class in neural_compressor.common.base_config)": [[173, "neural_compressor.common.base_config.BaseConfig"]], "composableconfig (class in neural_compressor.common.base_config)": [[173, "neural_compressor.common.base_config.ComposableConfig"]], "neural_compressor.common.base_config": [[173, "module-neural_compressor.common.base_config"]], "register_config() (in module neural_compressor.common.base_config)": [[173, "neural_compressor.common.base_config.register_config"]], "neural_compressor.common": [[174, "module-neural_compressor.common"]], "logger (class in neural_compressor.common.logger)": [[175, "neural_compressor.common.logger.Logger"]], "debug() (in module neural_compressor.common.logger)": [[175, "neural_compressor.common.logger.debug"]], "error() (in module neural_compressor.common.logger)": [[175, "neural_compressor.common.logger.error"]], "fatal() (in module neural_compressor.common.logger)": [[175, "neural_compressor.common.logger.fatal"]], "info() (in module neural_compressor.common.logger)": [[175, "neural_compressor.common.logger.info"]], "log() (in module neural_compressor.common.logger)": [[175, "neural_compressor.common.logger.log"]], "neural_compressor.common.logger": [[175, "module-neural_compressor.common.logger"]], "warn() (in module neural_compressor.common.logger)": [[175, "neural_compressor.common.logger.warn"]], "warning() (in module neural_compressor.common.logger)": [[175, "neural_compressor.common.logger.warning"]], "neural_compressor.common.utility": [[176, "module-neural_compressor.common.utility"]], "basecallbacks (class in neural_compressor.compression.callbacks)": [[177, "neural_compressor.compression.callbacks.BaseCallbacks"]], "distillationcallbacks (class in neural_compressor.compression.callbacks)": [[177, "neural_compressor.compression.callbacks.DistillationCallbacks"]], "pruningcallbacks (class in neural_compressor.compression.callbacks)": [[177, "neural_compressor.compression.callbacks.PruningCallbacks"]], "quantizationawaretrainingcallbacks (class in neural_compressor.compression.callbacks)": [[177, "neural_compressor.compression.callbacks.QuantizationAwareTrainingCallbacks"]], "_epoch_ran (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[177, "neural_compressor.compression.callbacks.DistillationCallbacks._epoch_ran"]], "best_model (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[177, "neural_compressor.compression.callbacks.DistillationCallbacks.best_model"]], "best_score (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[177, "neural_compressor.compression.callbacks.DistillationCallbacks.best_score"]], "eval_frequency (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[177, "neural_compressor.compression.callbacks.DistillationCallbacks.eval_frequency"]], "neural_compressor.compression.callbacks": [[177, "module-neural_compressor.compression.callbacks"]], "criterions (class in neural_compressor.compression.distillation.criterions)": [[178, "neural_compressor.compression.distillation.criterions.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[178, "neural_compressor.compression.distillation.criterions.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.compression.distillation.criterions)": [[178, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[178, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationLoss"]], "pytorchcriterions (class in neural_compressor.compression.distillation.criterions)": [[178, "neural_compressor.compression.distillation.criterions.PyTorchCriterions"]], "pytorchcrossentropyloss (class in neural_compressor.compression.distillation.criterions)": [[178, "neural_compressor.compression.distillation.criterions.PyTorchCrossEntropyLoss"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[178, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[178, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[178, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[178, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLossWrapper"]], "pytorchselfknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[178, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLoss"]], "pytorchselfknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[178, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[178, "neural_compressor.compression.distillation.criterions.SelfKnowledgeDistillationLoss"]], "tensorflowcrossentropyloss (class in neural_compressor.compression.distillation.criterions)": [[178, "neural_compressor.compression.distillation.criterions.TensorFlowCrossEntropyLoss"]], "tensorflowsparsecategoricalcrossentropy (class in neural_compressor.compression.distillation.criterions)": [[178, "neural_compressor.compression.distillation.criterions.TensorFlowSparseCategoricalCrossentropy"]], "tensorflowcriterions (class in neural_compressor.compression.distillation.criterions)": [[178, "neural_compressor.compression.distillation.criterions.TensorflowCriterions"]], "tensorflowknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[178, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLoss"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.compression.distillation.criterions)": [[178, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossExternal"]], "tensorflowknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[178, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossWrapper"]], "criterion_registry() (in module neural_compressor.compression.distillation.criterions)": [[178, "neural_compressor.compression.distillation.criterions.criterion_registry"]], "neural_compressor.compression.distillation.criterions": [[178, "module-neural_compressor.compression.distillation.criterions"]], "neural_compressor.compression.distillation": [[179, "module-neural_compressor.compression.distillation"]], "optimizers (class in neural_compressor.compression.distillation.optimizers)": [[180, "neural_compressor.compression.distillation.optimizers.Optimizers"]], "pytorchoptimizers (class in neural_compressor.compression.distillation.optimizers)": [[180, "neural_compressor.compression.distillation.optimizers.PyTorchOptimizers"]], "pytorchsgd (class in neural_compressor.compression.distillation.optimizers)": [[180, "neural_compressor.compression.distillation.optimizers.PyTorchSGD"]], "tensorflowadam (class in neural_compressor.compression.distillation.optimizers)": [[180, "neural_compressor.compression.distillation.optimizers.TensorFlowAdam"]], "tensorflowadamw (class in neural_compressor.compression.distillation.optimizers)": [[180, "neural_compressor.compression.distillation.optimizers.TensorFlowAdamW"]], "tensorflowsgd (class in neural_compressor.compression.distillation.optimizers)": [[180, "neural_compressor.compression.distillation.optimizers.TensorFlowSGD"]], "tensorflowoptimizers (class in neural_compressor.compression.distillation.optimizers)": [[180, "neural_compressor.compression.distillation.optimizers.TensorflowOptimizers"]], "neural_compressor.compression.distillation.optimizers": [[180, "module-neural_compressor.compression.distillation.optimizers"]], "optimizer_registry() (in module neural_compressor.compression.distillation.optimizers)": [[180, "neural_compressor.compression.distillation.optimizers.optimizer_registry"]], "get_activation() (in module neural_compressor.compression.distillation.utility)": [[181, "neural_compressor.compression.distillation.utility.get_activation"]], "neural_compressor.compression.distillation.utility": [[181, "module-neural_compressor.compression.distillation.utility"]], "record_output() (in module neural_compressor.compression.distillation.utility)": [[181, "neural_compressor.compression.distillation.utility.record_output"]], "neural_compressor.compression.hpo": [[182, "module-neural_compressor.compression.hpo"]], "neural_compressor.compression.hpo.sa_optimizer": [[183, "module-neural_compressor.compression.hpo.sa_optimizer"]], "bayesianoptimizationsearcher (class in neural_compressor.compression.hpo.search_algorithms)": [[184, "neural_compressor.compression.hpo.search_algorithms.BayesianOptimizationSearcher"]], "gridsearcher (class in neural_compressor.compression.hpo.search_algorithms)": [[184, "neural_compressor.compression.hpo.search_algorithms.GridSearcher"]], "randomsearcher (class in neural_compressor.compression.hpo.search_algorithms)": [[184, "neural_compressor.compression.hpo.search_algorithms.RandomSearcher"]], "searcher (class in neural_compressor.compression.hpo.search_algorithms)": [[184, "neural_compressor.compression.hpo.search_algorithms.Searcher"]], "xgbsearcher (class in neural_compressor.compression.hpo.search_algorithms)": [[184, "neural_compressor.compression.hpo.search_algorithms.XgbSearcher"]], "neural_compressor.compression.hpo.search_algorithms": [[184, "module-neural_compressor.compression.hpo.search_algorithms"]], "register_searcher() (in module neural_compressor.compression.hpo.search_algorithms)": [[184, "neural_compressor.compression.hpo.search_algorithms.register_searcher"]], "basesearchspace (class in neural_compressor.compression.hpo.search_space)": [[185, "neural_compressor.compression.hpo.search_space.BaseSearchSpace"]], "continuoussearchspace (class in neural_compressor.compression.hpo.search_space)": [[185, "neural_compressor.compression.hpo.search_space.ContinuousSearchSpace"]], "discretesearchspace (class in neural_compressor.compression.hpo.search_space)": [[185, "neural_compressor.compression.hpo.search_space.DiscreteSearchSpace"]], "searchspace (class in neural_compressor.compression.hpo.search_space)": [[185, "neural_compressor.compression.hpo.search_space.SearchSpace"]], "neural_compressor.compression.hpo.search_space": [[185, "module-neural_compressor.compression.hpo.search_space"]], "register_searchspace() (in module neural_compressor.compression.hpo.search_space)": [[185, "neural_compressor.compression.hpo.search_space.register_searchspace"]], "neural_compressor.compression": [[186, "module-neural_compressor.compression"]], "blockmaskcriterion (class in neural_compressor.compression.pruner.criteria)": [[187, "neural_compressor.compression.pruner.criteria.BlockMaskCriterion"]], "gradientcriterion (class in neural_compressor.compression.pruner.criteria)": [[187, "neural_compressor.compression.pruner.criteria.GradientCriterion"]], "magnitudecriterion (class in neural_compressor.compression.pruner.criteria)": [[187, "neural_compressor.compression.pruner.criteria.MagnitudeCriterion"]], "pruningcriterion (class in neural_compressor.compression.pruner.criteria)": [[187, "neural_compressor.compression.pruner.criteria.PruningCriterion"]], "retrainfreecriterion (class in neural_compressor.compression.pruner.criteria)": [[187, "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion"]], "snipcriterion (class in neural_compressor.compression.pruner.criteria)": [[187, "neural_compressor.compression.pruner.criteria.SnipCriterion"]], "snipmomentumcriterion (class in neural_compressor.compression.pruner.criteria)": [[187, "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion"]], "get_criterion() (in module neural_compressor.compression.pruner.criteria)": [[187, "neural_compressor.compression.pruner.criteria.get_criterion"]], "neural_compressor.compression.pruner.criteria": [[187, "module-neural_compressor.compression.pruner.criteria"]], "register_criterion() (in module neural_compressor.compression.pruner.criteria)": [[187, "neural_compressor.compression.pruner.criteria.register_criterion"]], "scores (neural_compressor.compression.pruner.criteria.blockmaskcriterion attribute)": [[187, "neural_compressor.compression.pruner.criteria.BlockMaskCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.gradientcriterion attribute)": [[187, "neural_compressor.compression.pruner.criteria.GradientCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.magnitudecriterion attribute)": [[187, "neural_compressor.compression.pruner.criteria.MagnitudeCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.pruningcriterion attribute)": [[187, "neural_compressor.compression.pruner.criteria.PruningCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.retrainfreecriterion attribute)": [[187, "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.snipcriterion attribute)": [[187, "neural_compressor.compression.pruner.criteria.SnipCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.snipmomentumcriterion attribute)": [[187, "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion.scores"]], "neural_compressor.compression.pruner": [[188, "module-neural_compressor.compression.pruner"]], "prepare_pruning() (in module neural_compressor.compression.pruner)": [[188, "neural_compressor.compression.pruner.prepare_pruning"]], "save() (in module neural_compressor.compression.pruner)": [[188, "neural_compressor.compression.pruner.save"]], "generate_ffn2_pruning_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[189, "neural_compressor.compression.pruner.model_slim.auto_slim.generate_ffn2_pruning_config"]], "generate_mha_pruning_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[189, "neural_compressor.compression.pruner.model_slim.auto_slim.generate_mha_pruning_config"]], "model_slim() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[189, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim"]], "model_slim_ffn2() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[189, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim_ffn2"]], "model_slim_mha() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[189, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim_mha"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[189, "module-neural_compressor.compression.pruner.model_slim.auto_slim"]], "parse_auto_slim_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[189, "neural_compressor.compression.pruner.model_slim.auto_slim.parse_auto_slim_config"]], "neural_compressor.compression.pruner.model_slim": [[190, "module-neural_compressor.compression.pruner.model_slim"]], "classifierheadsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[191, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher"]], "classifierheadsearchertf (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[191, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF"]], "jitbasicsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[191, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher"]], "linear2linearsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[191, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher"]], "recipesearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[191, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher"]], "selfmhasearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[191, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher"]], "current_pattern (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[191, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.current_pattern"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[191, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[191, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[191, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[191, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[191, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.device"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[191, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[191, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[191, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[191, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[191, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.flatten_static_graph"]], "get_attributes() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[191, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.get_attributes"]], "get_common_module() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[191, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.get_common_module"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[191, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[191, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[191, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[191, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[191, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[191, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.model"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[191, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"]], "print_iterables() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[191, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.print_iterables"]], "recipe (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[191, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.recipe"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[191, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.searching_results"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[191, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.searching_results"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[191, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.searching_results"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[191, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[191, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[191, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[191, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[191, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.static_graph"]], "target_layers (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[191, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.target_layers"]], "target_layers (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[191, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.target_layers"]], "target_op_lut (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[191, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.target_op_lut"]], "targets (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[191, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.targets"]], "linearcompression (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[192, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression"]], "linearcompressioniterator (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[192, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator"]], "postcompressionutils (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[192, "neural_compressor.compression.pruner.model_slim.weight_slim.PostCompressionUtils"]], "device (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[192, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.device"]], "layer_1 (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[192, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.layer_1"]], "layer_2 (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[192, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.layer_2"]], "linear_patterns (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompressioniterator attribute)": [[192, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator.linear_patterns"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[192, "module-neural_compressor.compression.pruner.model_slim.weight_slim"]], "basepattern (class in neural_compressor.compression.pruner.patterns.base)": [[193, "neural_compressor.compression.pruner.patterns.base.BasePattern"]], "kerasbasepattern (class in neural_compressor.compression.pruner.patterns.base)": [[193, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern"]], "pytorchbasepattern (class in neural_compressor.compression.pruner.patterns.base)": [[193, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern"]], "config (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[193, "neural_compressor.compression.pruner.patterns.base.BasePattern.config"]], "config (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[193, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.config"]], "config (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[193, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.config"]], "invalid_layers (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[193, "neural_compressor.compression.pruner.patterns.base.BasePattern.invalid_layers"]], "invalid_layers (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[193, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.invalid_layers"]], "invalid_layers (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[193, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.invalid_layers"]], "is_global (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[193, "neural_compressor.compression.pruner.patterns.base.BasePattern.is_global"]], "is_global (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[193, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.is_global"]], "is_global (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[193, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.is_global"]], "keep_mask_layers (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[193, "neural_compressor.compression.pruner.patterns.base.BasePattern.keep_mask_layers"]], "keep_mask_layers (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[193, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.keep_mask_layers"]], "keep_mask_layers (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[193, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.keep_mask_layers"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[193, "neural_compressor.compression.pruner.patterns.base.BasePattern.max_sparsity_ratio_per_op"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[193, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.max_sparsity_ratio_per_op"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[193, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.max_sparsity_ratio_per_op"]], "min_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[193, "neural_compressor.compression.pruner.patterns.base.BasePattern.min_sparsity_ratio_per_op"]], "min_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[193, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.min_sparsity_ratio_per_op"]], "min_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[193, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.min_sparsity_ratio_per_op"]], "modules (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[193, "neural_compressor.compression.pruner.patterns.base.BasePattern.modules"]], "modules (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[193, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.modules"]], "modules (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[193, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.modules"]], "neural_compressor.compression.pruner.patterns.base": [[193, "module-neural_compressor.compression.pruner.patterns.base"]], "pattern (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[193, "neural_compressor.compression.pruner.patterns.base.BasePattern.pattern"]], "pattern (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[193, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.pattern"]], "pattern (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[193, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.pattern"]], "register_pattern() (in module neural_compressor.compression.pruner.patterns.base)": [[193, "neural_compressor.compression.pruner.patterns.base.register_pattern"]], "target_sparsity (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[193, "neural_compressor.compression.pruner.patterns.base.BasePattern.target_sparsity"]], "target_sparsity (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[193, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.target_sparsity"]], "target_sparsity (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[193, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.target_sparsity"]], "get_pattern() (in module neural_compressor.compression.pruner.patterns)": [[194, "neural_compressor.compression.pruner.patterns.get_pattern"]], "neural_compressor.compression.pruner.patterns": [[194, "module-neural_compressor.compression.pruner.patterns"]], "m (neural_compressor.compression.pruner.patterns.mha.patternmha attribute)": [[195, "neural_compressor.compression.pruner.patterns.mha.PatternMHA.M"]], "n (neural_compressor.compression.pruner.patterns.mha.patternmha attribute)": [[195, "neural_compressor.compression.pruner.patterns.mha.PatternMHA.N"]], "patternmha (class in neural_compressor.compression.pruner.patterns.mha)": [[195, "neural_compressor.compression.pruner.patterns.mha.PatternMHA"]], "neural_compressor.compression.pruner.patterns.mha": [[195, "module-neural_compressor.compression.pruner.patterns.mha"]], "m (neural_compressor.compression.pruner.patterns.ninm.pytorchpatternninm attribute)": [[196, "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM.M"]], "n (neural_compressor.compression.pruner.patterns.ninm.pytorchpatternninm attribute)": [[196, "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM.N"]], "pytorchpatternninm (class in neural_compressor.compression.pruner.patterns.ninm)": [[196, "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM"]], "neural_compressor.compression.pruner.patterns.ninm": [[196, "module-neural_compressor.compression.pruner.patterns.ninm"]], "keraspatternnxm (class in neural_compressor.compression.pruner.patterns.nxm)": [[197, "neural_compressor.compression.pruner.patterns.nxm.KerasPatternNxM"]], "pytorchpatternnxm (class in neural_compressor.compression.pruner.patterns.nxm)": [[197, "neural_compressor.compression.pruner.patterns.nxm.PytorchPatternNxM"]], "block_size (neural_compressor.compression.pruner.patterns.nxm.keraspatternnxm attribute)": [[197, "neural_compressor.compression.pruner.patterns.nxm.KerasPatternNxM.block_size"]], "block_size (neural_compressor.compression.pruner.patterns.nxm.pytorchpatternnxm attribute)": [[197, "neural_compressor.compression.pruner.patterns.nxm.PytorchPatternNxM.block_size"]], "neural_compressor.compression.pruner.patterns.nxm": [[197, "module-neural_compressor.compression.pruner.patterns.nxm"]], "basepruner (class in neural_compressor.compression.pruner.pruners.base)": [[198, "neural_compressor.compression.pruner.pruners.base.BasePruner"]], "kerasbasepruner (class in neural_compressor.compression.pruner.pruners.base)": [[198, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner"]], "pytorchbasepruner (class in neural_compressor.compression.pruner.pruners.base)": [[198, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner"]], "config (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[198, "neural_compressor.compression.pruner.pruners.base.BasePruner.config"]], "config (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[198, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.config"]], "config (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[198, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.config"]], "current_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[198, "neural_compressor.compression.pruner.pruners.base.BasePruner.current_sparsity_ratio"]], "current_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[198, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.current_sparsity_ratio"]], "current_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[198, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.current_sparsity_ratio"]], "end_step (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[198, "neural_compressor.compression.pruner.pruners.base.BasePruner.end_step"]], "end_step (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[198, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.end_step"]], "end_step (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[198, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.end_step"]], "global_step (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[198, "neural_compressor.compression.pruner.pruners.base.BasePruner.global_step"]], "global_step (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[198, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.global_step"]], "global_step (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[198, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.global_step"]], "masks (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[198, "neural_compressor.compression.pruner.pruners.base.BasePruner.masks"]], "masks (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[198, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.masks"]], "masks (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[198, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.masks"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[198, "neural_compressor.compression.pruner.pruners.base.BasePruner.max_sparsity_ratio_per_op"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[198, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.max_sparsity_ratio_per_op"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[198, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.max_sparsity_ratio_per_op"]], "modules (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[198, "neural_compressor.compression.pruner.pruners.base.BasePruner.modules"]], "modules (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[198, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.modules"]], "modules (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[198, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.modules"]], "neural_compressor.compression.pruner.pruners.base": [[198, "module-neural_compressor.compression.pruner.pruners.base"]], "pattern (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[198, "neural_compressor.compression.pruner.pruners.base.BasePruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[198, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[198, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.pattern"]], "pruning_frequency (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[198, "neural_compressor.compression.pruner.pruners.base.BasePruner.pruning_frequency"]], "pruning_frequency (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[198, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.pruning_frequency"]], "pruning_frequency (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[198, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.pruning_frequency"]], "register_pruner() (in module neural_compressor.compression.pruner.pruners.base)": [[198, "neural_compressor.compression.pruner.pruners.base.register_pruner"]], "scheduler (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[198, "neural_compressor.compression.pruner.pruners.base.BasePruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[198, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[198, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.scheduler"]], "scores (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[198, "neural_compressor.compression.pruner.pruners.base.BasePruner.scores"]], "scores (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[198, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.scores"]], "scores (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[198, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.scores"]], "start_step (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[198, "neural_compressor.compression.pruner.pruners.base.BasePruner.start_step"]], "start_step (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[198, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.start_step"]], "start_step (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[198, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.start_step"]], "target_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[198, "neural_compressor.compression.pruner.pruners.base.BasePruner.target_sparsity_ratio"]], "target_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[198, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.target_sparsity_ratio"]], "target_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[198, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.target_sparsity_ratio"]], "kerasbasicpruner (class in neural_compressor.compression.pruner.pruners.basic)": [[199, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner"]], "pytorchbasicpruner (class in neural_compressor.compression.pruner.pruners.basic)": [[199, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner"]], "criterion (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[199, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.criterion"]], "criterion (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[199, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.criterion"]], "neural_compressor.compression.pruner.pruners.basic": [[199, "module-neural_compressor.compression.pruner.pruners.basic"]], "pattern (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[199, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[199, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.pattern"]], "reg (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[199, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.reg"]], "reg (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[199, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.reg"]], "scheduler (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[199, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[199, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.scheduler"]], "pytorchblockmaskpruner (class in neural_compressor.compression.pruner.pruners.block_mask)": [[200, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner"]], "criterion (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[200, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.criterion"]], "neural_compressor.compression.pruner.pruners.block_mask": [[200, "module-neural_compressor.compression.pruner.pruners.block_mask"]], "pattern (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[200, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.pattern"]], "reg (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[200, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.reg"]], "scheduler (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[200, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.scheduler"]], "get_pruner() (in module neural_compressor.compression.pruner.pruners)": [[201, "neural_compressor.compression.pruner.pruners.get_pruner"]], "neural_compressor.compression.pruner.pruners": [[201, "module-neural_compressor.compression.pruner.pruners"]], "parse_valid_pruner_types() (in module neural_compressor.compression.pruner.pruners)": [[201, "neural_compressor.compression.pruner.pruners.parse_valid_pruner_types"]], "pythonmultiheadattentionpruner (class in neural_compressor.compression.pruner.pruners.mha)": [[202, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner"]], "head_masks (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[202, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.head_masks"]], "linear_layers (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[202, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.linear_layers"]], "mha_compressions (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[202, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.mha_compressions"]], "mha_scores (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[202, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.mha_scores"]], "neural_compressor.compression.pruner.pruners.mha": [[202, "module-neural_compressor.compression.pruner.pruners.mha"]], "pytorchpatternlockpruner (class in neural_compressor.compression.pruner.pruners.pattern_lock)": [[203, "neural_compressor.compression.pruner.pruners.pattern_lock.PytorchPatternLockPruner"]], "neural_compressor.compression.pruner.pruners.pattern_lock": [[203, "module-neural_compressor.compression.pruner.pruners.pattern_lock"]], "pytorchprogressivepruner (class in neural_compressor.compression.pruner.pruners.progressive)": [[204, "neural_compressor.compression.pruner.pruners.progressive.PytorchProgressivePruner"]], "neural_compressor.compression.pruner.pruners.progressive": [[204, "module-neural_compressor.compression.pruner.pruners.progressive"]], "pytorchretrainfreepruner (class in neural_compressor.compression.pruner.pruners.retrain_free)": [[205, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner"]], "criterion (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[205, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.criterion"]], "neural_compressor.compression.pruner.pruners.retrain_free": [[205, "module-neural_compressor.compression.pruner.pruners.retrain_free"]], "pattern (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[205, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.pattern"]], "reg (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[205, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.reg"]], "scheduler (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[205, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.scheduler"]], "sparsegptpruner (class in neural_compressor.compression.pruner.pruners.sparse_gpt)": [[206, "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner"]], "criterion (neural_compressor.compression.pruner.pruners.sparse_gpt.sparsegptpruner attribute)": [[206, "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner.criterion"]], "neural_compressor.compression.pruner.pruners.sparse_gpt": [[206, "module-neural_compressor.compression.pruner.pruners.sparse_gpt"]], "pattern (neural_compressor.compression.pruner.pruners.sparse_gpt.sparsegptpruner attribute)": [[206, "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner.pattern"]], "reg (neural_compressor.compression.pruner.pruners.sparse_gpt.sparsegptpruner attribute)": [[206, "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner.reg"]], "scheduler (neural_compressor.compression.pruner.pruners.sparse_gpt.sparsegptpruner attribute)": [[206, "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner.scheduler"]], "basepruning (class in neural_compressor.compression.pruner.pruning)": [[207, "neural_compressor.compression.pruner.pruning.BasePruning"]], "basicpruning (class in neural_compressor.compression.pruner.pruning)": [[207, "neural_compressor.compression.pruner.pruning.BasicPruning"]], "retrainfreepruning (class in neural_compressor.compression.pruner.pruning)": [[207, "neural_compressor.compression.pruner.pruning.RetrainFreePruning"]], "sparsegptpruning (class in neural_compressor.compression.pruner.pruning)": [[207, "neural_compressor.compression.pruner.pruning.SparseGPTPruning"]], "config_file_path (neural_compressor.compression.pruner.pruning.basepruning attribute)": [[207, "neural_compressor.compression.pruner.pruning.BasePruning.config_file_path"]], "config_file_path (neural_compressor.compression.pruner.pruning.basicpruning attribute)": [[207, "neural_compressor.compression.pruner.pruning.BasicPruning.config_file_path"]], "config_file_path (neural_compressor.compression.pruner.pruning.retrainfreepruning attribute)": [[207, "neural_compressor.compression.pruner.pruning.RetrainFreePruning.config_file_path"]], "model (neural_compressor.compression.pruner.pruning.basepruning attribute)": [[207, "neural_compressor.compression.pruner.pruning.BasePruning.model"]], "model (neural_compressor.compression.pruner.pruning.basicpruning attribute)": [[207, "neural_compressor.compression.pruner.pruning.BasicPruning.model"]], "model (neural_compressor.compression.pruner.pruning.retrainfreepruning attribute)": [[207, "neural_compressor.compression.pruner.pruning.RetrainFreePruning.model"]], "neural_compressor.compression.pruner.pruning": [[207, "module-neural_compressor.compression.pruner.pruning"]], "pruner_info (neural_compressor.compression.pruner.pruning.basepruning attribute)": [[207, "neural_compressor.compression.pruner.pruning.BasePruning.pruner_info"]], "pruner_info (neural_compressor.compression.pruner.pruning.basicpruning attribute)": [[207, "neural_compressor.compression.pruner.pruning.BasicPruning.pruner_info"]], "pruner_info (neural_compressor.compression.pruner.pruning.retrainfreepruning attribute)": [[207, "neural_compressor.compression.pruner.pruning.RetrainFreePruning.pruner_info"]], "pruners (neural_compressor.compression.pruner.pruning.basepruning attribute)": [[207, "neural_compressor.compression.pruner.pruning.BasePruning.pruners"]], "pruners (neural_compressor.compression.pruner.pruning.basicpruning attribute)": [[207, "neural_compressor.compression.pruner.pruning.BasicPruning.pruners"]], "pruners (neural_compressor.compression.pruner.pruning.retrainfreepruning attribute)": [[207, "neural_compressor.compression.pruner.pruning.RetrainFreePruning.pruners"]], "register_pruning() (in module neural_compressor.compression.pruner.pruning)": [[207, "neural_compressor.compression.pruner.pruning.register_pruning"]], "basereg (class in neural_compressor.compression.pruner.regs)": [[208, "neural_compressor.compression.pruner.regs.BaseReg"]], "grouplasso (class in neural_compressor.compression.pruner.regs)": [[208, "neural_compressor.compression.pruner.regs.GroupLasso"]], "alpha (neural_compressor.compression.pruner.regs.grouplasso attribute)": [[208, "neural_compressor.compression.pruner.regs.GroupLasso.alpha"]], "get_reg() (in module neural_compressor.compression.pruner.regs)": [[208, "neural_compressor.compression.pruner.regs.get_reg"]], "get_reg_type() (in module neural_compressor.compression.pruner.regs)": [[208, "neural_compressor.compression.pruner.regs.get_reg_type"]], "neural_compressor.compression.pruner.regs": [[208, "module-neural_compressor.compression.pruner.regs"]], "reg_terms (neural_compressor.compression.pruner.regs.grouplasso attribute)": [[208, "neural_compressor.compression.pruner.regs.GroupLasso.reg_terms"]], "register_reg() (in module neural_compressor.compression.pruner.regs)": [[208, "neural_compressor.compression.pruner.regs.register_reg"]], "iterativescheduler (class in neural_compressor.compression.pruner.schedulers)": [[209, "neural_compressor.compression.pruner.schedulers.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.compression.pruner.schedulers)": [[209, "neural_compressor.compression.pruner.schedulers.OneshotScheduler"]], "pruningscheduler (class in neural_compressor.compression.pruner.schedulers)": [[209, "neural_compressor.compression.pruner.schedulers.PruningScheduler"]], "config (neural_compressor.compression.pruner.schedulers.pruningscheduler attribute)": [[209, "neural_compressor.compression.pruner.schedulers.PruningScheduler.config"]], "get_scheduler() (in module neural_compressor.compression.pruner.schedulers)": [[209, "neural_compressor.compression.pruner.schedulers.get_scheduler"]], "neural_compressor.compression.pruner.schedulers": [[209, "module-neural_compressor.compression.pruner.schedulers"]], "register_scheduler() (in module neural_compressor.compression.pruner.schedulers)": [[209, "neural_compressor.compression.pruner.schedulers.register_scheduler"]], "magnitudecriterion (class in neural_compressor.compression.pruner.tf_criteria)": [[210, "neural_compressor.compression.pruner.tf_criteria.MagnitudeCriterion"]], "pruningcriterion (class in neural_compressor.compression.pruner.tf_criteria)": [[210, "neural_compressor.compression.pruner.tf_criteria.PruningCriterion"]], "get_tf_criterion() (in module neural_compressor.compression.pruner.tf_criteria)": [[210, "neural_compressor.compression.pruner.tf_criteria.get_tf_criterion"]], "neural_compressor.compression.pruner.tf_criteria": [[210, "module-neural_compressor.compression.pruner.tf_criteria"]], "register_criterion() (in module neural_compressor.compression.pruner.tf_criteria)": [[210, "neural_compressor.compression.pruner.tf_criteria.register_criterion"]], "scores (neural_compressor.compression.pruner.tf_criteria.magnitudecriterion attribute)": [[210, "neural_compressor.compression.pruner.tf_criteria.MagnitudeCriterion.scores"]], "scores (neural_compressor.compression.pruner.tf_criteria.pruningcriterion attribute)": [[210, "neural_compressor.compression.pruner.tf_criteria.PruningCriterion.scores"]], "check_config() (in module neural_compressor.compression.pruner.utils)": [[211, "neural_compressor.compression.pruner.utils.check_config"]], "check_key_validity() (in module neural_compressor.compression.pruner.utils)": [[211, "neural_compressor.compression.pruner.utils.check_key_validity"]], "collect_layer_inputs() (in module neural_compressor.compression.pruner.utils)": [[211, "neural_compressor.compression.pruner.utils.collect_layer_inputs"]], "generate_pruner_config() (in module neural_compressor.compression.pruner.utils)": [[211, "neural_compressor.compression.pruner.utils.generate_pruner_config"]], "get_layers() (in module neural_compressor.compression.pruner.utils)": [[211, "neural_compressor.compression.pruner.utils.get_layers"]], "get_sparsity_ratio() (in module neural_compressor.compression.pruner.utils)": [[211, "neural_compressor.compression.pruner.utils.get_sparsity_ratio"]], "get_sparsity_ratio_tf() (in module neural_compressor.compression.pruner.utils)": [[211, "neural_compressor.compression.pruner.utils.get_sparsity_ratio_tf"]], "neural_compressor.compression.pruner.utils": [[211, "module-neural_compressor.compression.pruner.utils"]], "parse_last_linear() (in module neural_compressor.compression.pruner.utils)": [[211, "neural_compressor.compression.pruner.utils.parse_last_linear"]], "parse_last_linear_tf() (in module neural_compressor.compression.pruner.utils)": [[211, "neural_compressor.compression.pruner.utils.parse_last_linear_tf"]], "parse_to_prune() (in module neural_compressor.compression.pruner.utils)": [[211, "neural_compressor.compression.pruner.utils.parse_to_prune"]], "parse_to_prune_tf() (in module neural_compressor.compression.pruner.utils)": [[211, "neural_compressor.compression.pruner.utils.parse_to_prune_tf"]], "process_and_check_config() (in module neural_compressor.compression.pruner.utils)": [[211, "neural_compressor.compression.pruner.utils.process_and_check_config"]], "process_config() (in module neural_compressor.compression.pruner.utils)": [[211, "neural_compressor.compression.pruner.utils.process_config"]], "process_weight_config() (in module neural_compressor.compression.pruner.utils)": [[211, "neural_compressor.compression.pruner.utils.process_weight_config"]], "process_yaml_config() (in module neural_compressor.compression.pruner.utils)": [[211, "neural_compressor.compression.pruner.utils.process_yaml_config"]], "reset_none_to_default() (in module neural_compressor.compression.pruner.utils)": [[211, "neural_compressor.compression.pruner.utils.reset_none_to_default"]], "update_params() (in module neural_compressor.compression.pruner.utils)": [[211, "neural_compressor.compression.pruner.utils.update_params"]], "benchmark_conf (class in neural_compressor.conf.config)": [[212, "neural_compressor.conf.config.Benchmark_Conf"]], "conf (class in neural_compressor.conf.config)": [[212, "neural_compressor.conf.config.Conf"]], "defaultconf (class in neural_compressor.conf.config)": [[212, "neural_compressor.conf.config.DefaultConf"]], "distillation_conf (class in neural_compressor.conf.config)": [[212, "neural_compressor.conf.config.Distillation_Conf"]], "graph_optimization_conf (class in neural_compressor.conf.config)": [[212, "neural_compressor.conf.config.Graph_Optimization_Conf"]], "mixedprecision_conf (class in neural_compressor.conf.config)": [[212, "neural_compressor.conf.config.MixedPrecision_Conf"]], "nasconfig (class in neural_compressor.conf.config)": [[212, "neural_compressor.conf.config.NASConfig"]], "prunerv2 (class in neural_compressor.conf.config)": [[212, "neural_compressor.conf.config.PrunerV2"]], "pruning_conf (class in neural_compressor.conf.config)": [[212, "neural_compressor.conf.config.Pruning_Conf"]], "quantization_conf (class in neural_compressor.conf.config)": [[212, "neural_compressor.conf.config.Quantization_Conf"]], "neural_compressor.conf.config": [[212, "module-neural_compressor.conf.config"]], "dotdict (class in neural_compressor.conf.dotdict)": [[213, "neural_compressor.conf.dotdict.DotDict"]], "deep_get() (in module neural_compressor.conf.dotdict)": [[213, "neural_compressor.conf.dotdict.deep_get"]], "deep_set() (in module neural_compressor.conf.dotdict)": [[213, "neural_compressor.conf.dotdict.deep_set"]], "neural_compressor.conf.dotdict": [[213, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[214, "module-neural_compressor.conf"]], "accuracycriterion (class in neural_compressor.conf.pythonic_config)": [[215, "neural_compressor.conf.pythonic_config.AccuracyCriterion"]], "benchmarkconfig (class in neural_compressor.conf.pythonic_config)": [[215, "neural_compressor.conf.pythonic_config.BenchmarkConfig"]], "distillationconfig (class in neural_compressor.conf.pythonic_config)": [[215, "neural_compressor.conf.pythonic_config.DistillationConfig"]], "knowledgedistillationlossconfig (class in neural_compressor.conf.pythonic_config)": [[215, "neural_compressor.conf.pythonic_config.KnowledgeDistillationLossConfig"]], "options (class in neural_compressor.conf.pythonic_config)": [[215, "neural_compressor.conf.pythonic_config.Options"]], "quantizationconfig (class in neural_compressor.conf.pythonic_config)": [[215, "neural_compressor.conf.pythonic_config.QuantizationConfig"]], "weightpruningconfig (class in neural_compressor.conf.pythonic_config)": [[215, "neural_compressor.conf.pythonic_config.WeightPruningConfig"]], "neural_compressor.conf.pythonic_config": [[215, "module-neural_compressor.conf.pythonic_config"]], "accuracycriterion (class in neural_compressor.config)": [[216, "neural_compressor.config.AccuracyCriterion"]], "benchmarkconfig (class in neural_compressor.config)": [[216, "neural_compressor.config.BenchmarkConfig"]], "distillationconfig (class in neural_compressor.config)": [[216, "neural_compressor.config.DistillationConfig"]], "dotdict (class in neural_compressor.config)": [[216, "neural_compressor.config.DotDict"]], "exportconfig (class in neural_compressor.config)": [[216, "neural_compressor.config.ExportConfig"]], "hpoconfig (class in neural_compressor.config)": [[216, "neural_compressor.config.HPOConfig"]], "intermediatelayersknowledgedistillationlossconfig (class in neural_compressor.config)": [[216, "neural_compressor.config.IntermediateLayersKnowledgeDistillationLossConfig"]], "keras (class in neural_compressor.config)": [[216, "neural_compressor.config.Keras"]], "knowledgedistillationlossconfig (class in neural_compressor.config)": [[216, "neural_compressor.config.KnowledgeDistillationLossConfig"]], "mxnet (class in neural_compressor.config)": [[216, "neural_compressor.config.MXNet"]], "mixedprecisionconfig (class in neural_compressor.config)": [[216, "neural_compressor.config.MixedPrecisionConfig"]], "nasconfig (class in neural_compressor.config)": [[216, "neural_compressor.config.NASConfig"]], "onnx (class in neural_compressor.config)": [[216, "neural_compressor.config.ONNX"]], "onnxqlinear2qdqconfig (class in neural_compressor.config)": [[216, "neural_compressor.config.ONNXQlinear2QDQConfig"]], "options (class in neural_compressor.config)": [[216, "neural_compressor.config.Options"]], "posttrainingquantconfig (class in neural_compressor.config)": [[216, "neural_compressor.config.PostTrainingQuantConfig"]], "pytorch (class in neural_compressor.config)": [[216, "neural_compressor.config.PyTorch"]], "quantizationawaretrainingconfig (class in neural_compressor.config)": [[216, "neural_compressor.config.QuantizationAwareTrainingConfig"]], "selfknowledgedistillationlossconfig (class in neural_compressor.config)": [[216, "neural_compressor.config.SelfKnowledgeDistillationLossConfig"]], "tf2onnxconfig (class in neural_compressor.config)": [[216, "neural_compressor.config.TF2ONNXConfig"]], "tensorflow (class in neural_compressor.config)": [[216, "neural_compressor.config.TensorFlow"]], "torch2onnxconfig (class in neural_compressor.config)": [[216, "neural_compressor.config.Torch2ONNXConfig"]], "tuningcriterion (class in neural_compressor.config)": [[216, "neural_compressor.config.TuningCriterion"]], "weightpruningconfig (class in neural_compressor.config)": [[216, "neural_compressor.config.WeightPruningConfig"]], "neural_compressor.config": [[216, "module-neural_compressor.config"]], "neural_compressor.contrib": [[217, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[218, "module-neural_compressor.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.contrib.strategy.sigopt)": [[219, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.sigopt": [[219, "module-neural_compressor.contrib.strategy.sigopt"]], "tpetunestrategy (class in neural_compressor.contrib.strategy.tpe)": [[220, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[220, "module-neural_compressor.contrib.strategy.tpe"]], "basedataloader (class in neural_compressor.data.dataloaders.base_dataloader)": [[221, "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader"]], "neural_compressor.data.dataloaders.base_dataloader": [[221, "module-neural_compressor.data.dataloaders.base_dataloader"]], "dataloader (class in neural_compressor.data.dataloaders.dataloader)": [[222, "neural_compressor.data.dataloaders.dataloader.DataLoader"]], "check_dataloader() (in module neural_compressor.data.dataloaders.dataloader)": [[222, "neural_compressor.data.dataloaders.dataloader.check_dataloader"]], "neural_compressor.data.dataloaders.dataloader": [[222, "module-neural_compressor.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.data.dataloaders.default_dataloader)": [[223, "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader"]], "default_collate() (in module neural_compressor.data.dataloaders.default_dataloader)": [[223, "neural_compressor.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.data.dataloaders.default_dataloader": [[223, "module-neural_compressor.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.data.dataloaders.fetcher)": [[224, "neural_compressor.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.data.dataloaders.fetcher)": [[224, "neural_compressor.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.data.dataloaders.fetcher)": [[224, "neural_compressor.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.data.dataloaders.fetcher": [[224, "module-neural_compressor.data.dataloaders.fetcher"]], "neural_compressor.data.dataloaders": [[225, "module-neural_compressor.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.data.dataloaders.mxnet_dataloader)": [[226, "neural_compressor.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[226, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[227, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[227, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[227, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.data.dataloaders.pytorch_dataloader)": [[228, "neural_compressor.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[228, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.data.dataloaders.sampler)": [[229, "neural_compressor.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.data.dataloaders.sampler)": [[229, "neural_compressor.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.data.dataloaders.sampler)": [[229, "neural_compressor.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.data.dataloaders.sampler)": [[229, "neural_compressor.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.data.dataloaders.sampler": [[229, "module-neural_compressor.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[230, "neural_compressor.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[230, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[230, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[230, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[230, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.data.datasets.bert_dataset)": [[231, "neural_compressor.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[231, "neural_compressor.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.data.datasets.bert_dataset)": [[231, "neural_compressor.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[231, "neural_compressor.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[231, "neural_compressor.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[231, "neural_compressor.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.data.datasets.bert_dataset)": [[231, "neural_compressor.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.data.datasets.bert_dataset)": [[231, "neural_compressor.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.data.datasets.bert_dataset": [[231, "module-neural_compressor.data.datasets.bert_dataset"]], "coconpy (class in neural_compressor.data.datasets.coco_dataset)": [[232, "neural_compressor.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.data.datasets.coco_dataset)": [[232, "neural_compressor.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.data.datasets.coco_dataset)": [[232, "neural_compressor.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.data.datasets.coco_dataset)": [[232, "neural_compressor.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.data.datasets.coco_dataset": [[232, "module-neural_compressor.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.data.datasets.dataset)": [[233, "neural_compressor.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.data.datasets.dataset)": [[233, "neural_compressor.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.data.datasets.dataset)": [[233, "neural_compressor.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.data.datasets.dataset)": [[233, "neural_compressor.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.data.datasets.dataset)": [[233, "neural_compressor.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.data.datasets.dataset)": [[233, "neural_compressor.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.data.datasets.dataset)": [[233, "neural_compressor.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.data.datasets.dataset)": [[233, "neural_compressor.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.data.datasets.dataset)": [[233, "neural_compressor.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.data.datasets.dataset)": [[233, "neural_compressor.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.data.datasets.dataset)": [[233, "neural_compressor.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.data.datasets.dataset)": [[233, "neural_compressor.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.data.datasets.dataset)": [[233, "neural_compressor.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.data.datasets.dataset)": [[233, "neural_compressor.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.data.datasets.dataset)": [[233, "neural_compressor.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.data.datasets.dataset)": [[233, "neural_compressor.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.data.datasets.dataset)": [[233, "neural_compressor.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.data.datasets.dataset)": [[233, "neural_compressor.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.data.datasets.dataset)": [[233, "neural_compressor.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.data.datasets.dataset)": [[233, "neural_compressor.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.data.datasets.dataset)": [[233, "neural_compressor.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.data.datasets.dataset)": [[233, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.datasets.dataset)": [[233, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflow (class in neural_compressor.data.datasets.dataset)": [[233, "neural_compressor.data.datasets.dataset.Tensorflow"]], "tensorflowcifar10 (class in neural_compressor.data.datasets.dataset)": [[233, "neural_compressor.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.data.datasets.dataset)": [[233, "neural_compressor.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.data.datasets.dataset)": [[233, "neural_compressor.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.data.datasets.dataset)": [[233, "neural_compressor.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagerecord (class in neural_compressor.data.datasets.dataset)": [[233, "neural_compressor.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.data.datasets.dataset)": [[233, "neural_compressor.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.data.datasets.dataset)": [[233, "neural_compressor.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.data.datasets.dataset)": [[233, "neural_compressor.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.data.datasets.dataset)": [[233, "neural_compressor.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.data.datasets.dataset)": [[233, "neural_compressor.data.datasets.dataset.check_integrity"]], "dataset_registry() (in module neural_compressor.data.datasets.dataset)": [[233, "neural_compressor.data.datasets.dataset.dataset_registry"]], "download_url() (in module neural_compressor.data.datasets.dataset)": [[233, "neural_compressor.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.data.datasets.dataset)": [[233, "neural_compressor.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.data.datasets.dataset)": [[233, "neural_compressor.data.datasets.dataset.gen_bar_updater"]], "neural_compressor.data.datasets.dataset": [[233, "module-neural_compressor.data.datasets.dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset)": [[234, "neural_compressor.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset": [[234, "module-neural_compressor.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[235, "neural_compressor.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[235, "neural_compressor.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[235, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[236, "neural_compressor.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[236, "neural_compressor.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[236, "neural_compressor.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[236, "neural_compressor.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[236, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[236, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.data.datasets.imagenet_dataset": [[236, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[237, "module-neural_compressor.data.datasets"]], "styletransferdataset (class in neural_compressor.data.datasets.style_transfer_dataset)": [[238, "neural_compressor.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.data.datasets.style_transfer_dataset": [[238, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.data.filters.coco_filter)": [[239, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.data.filters.coco_filter)": [[239, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.coco_filter": [[239, "module-neural_compressor.data.filters.coco_filter"]], "filters (class in neural_compressor.data.filters.filter)": [[240, "neural_compressor.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.data.filters.filter)": [[240, "neural_compressor.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.data.filters.filter)": [[240, "neural_compressor.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.data.filters.filter)": [[240, "neural_compressor.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.data.filters.filter)": [[240, "neural_compressor.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.data.filters.filter)": [[240, "neural_compressor.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.data.filters.filter)": [[240, "neural_compressor.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.data.filters.filter)": [[240, "neural_compressor.data.filters.filter.filter_registry"]], "neural_compressor.data.filters.filter": [[240, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[241, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[242, "module-neural_compressor.data"]], "parsedecodecocotransform (class in neural_compressor.data.transforms.coco_transform)": [[243, "neural_compressor.data.transforms.coco_transform.ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.coco_transform": [[243, "module-neural_compressor.data.transforms.coco_transform"]], "bilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[244, "neural_compressor.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.data.transforms.imagenet_transform)": [[244, "neural_compressor.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[244, "neural_compressor.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[244, "neural_compressor.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.data.transforms.imagenet_transform)": [[244, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[244, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.data.transforms.imagenet_transform)": [[244, "neural_compressor.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.data.transforms.imagenet_transform)": [[244, "neural_compressor.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[244, "neural_compressor.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "tensorflowshiftrescale (class in neural_compressor.data.transforms.imagenet_transform)": [[244, "neural_compressor.data.transforms.imagenet_transform.TensorflowShiftRescale"]], "tensorflowtransposelastchannel (class in neural_compressor.data.transforms.imagenet_transform)": [[244, "neural_compressor.data.transforms.imagenet_transform.TensorflowTransposeLastChannel"]], "neural_compressor.data.transforms.imagenet_transform": [[244, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[245, "module-neural_compressor.data.transforms"]], "postprocess (class in neural_compressor.data.transforms.postprocess)": [[246, "neural_compressor.data.transforms.postprocess.Postprocess"]], "neural_compressor.data.transforms.postprocess": [[246, "module-neural_compressor.data.transforms.postprocess"]], "basictokenizer (class in neural_compressor.data.transforms.tokenization)": [[247, "neural_compressor.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.data.transforms.tokenization)": [[247, "neural_compressor.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.data.transforms.tokenization)": [[247, "neural_compressor.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.data.transforms.tokenization)": [[247, "neural_compressor.data.transforms.tokenization.convert_by_vocab"]], "convert_to_unicode() (in module neural_compressor.data.transforms.tokenization)": [[247, "neural_compressor.data.transforms.tokenization.convert_to_unicode"]], "load_vocab() (in module neural_compressor.data.transforms.tokenization)": [[247, "neural_compressor.data.transforms.tokenization.load_vocab"]], "neural_compressor.data.transforms.tokenization": [[247, "module-neural_compressor.data.transforms.tokenization"]], "whitespace_tokenize() (in module neural_compressor.data.transforms.tokenization)": [[247, "neural_compressor.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.data.transforms.transform)": [[248, "neural_compressor.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.data.transforms.transform)": [[248, "neural_compressor.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.data.transforms.transform)": [[248, "neural_compressor.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.data.transforms.transform)": [[248, "neural_compressor.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.data.transforms.transform)": [[248, "neural_compressor.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.data.transforms.transform)": [[248, "neural_compressor.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.data.transforms.transform)": [[248, "neural_compressor.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.data.transforms.transform)": [[248, "neural_compressor.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.data.transforms.transform)": [[248, "neural_compressor.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.data.transforms.transform)": [[248, "neural_compressor.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.data.transforms.transform)": [[248, "neural_compressor.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.data.transforms.transform)": [[248, "neural_compressor.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.data.transforms.transform)": [[248, "neural_compressor.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.data.transforms.transform)": [[248, "neural_compressor.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[248, "neural_compressor.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.data.transforms.transform)": [[248, "neural_compressor.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.data.transforms.transform)": [[248, "neural_compressor.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.data.transforms.transform)": [[248, "neural_compressor.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.data.transforms.transform)": [[248, "neural_compressor.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.data.transforms.transform)": [[248, "neural_compressor.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[248, "neural_compressor.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.data.transforms.transform)": [[248, "neural_compressor.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.data.transforms.transform)": [[248, "neural_compressor.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.data.transforms.transform)": [[248, "neural_compressor.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.data.transforms.transform)": [[248, "neural_compressor.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.data.transforms.transform)": [[248, "neural_compressor.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.data.transforms.transform)": [[248, "neural_compressor.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.data.transforms.transform)": [[248, "neural_compressor.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.data.transforms.transform)": [[248, "neural_compressor.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.data.transforms.transform)": [[248, "neural_compressor.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.data.transforms.transform)": [[248, "neural_compressor.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.transforms.transform)": [[248, "neural_compressor.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.data.transforms.transform)": [[248, "neural_compressor.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.data.transforms.transform)": [[248, "neural_compressor.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[248, "neural_compressor.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.data.transforms.transform)": [[248, "neural_compressor.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.data.transforms.transform)": [[248, "neural_compressor.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.data.transforms.transform)": [[248, "neural_compressor.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.data.transforms.transform)": [[248, "neural_compressor.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.data.transforms.transform)": [[248, "neural_compressor.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.data.transforms.transform)": [[248, "neural_compressor.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.data.transforms.transform)": [[248, "neural_compressor.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.data.transforms.transform)": [[248, "neural_compressor.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.data.transforms.transform)": [[248, "neural_compressor.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.data.transforms.transform)": [[248, "neural_compressor.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.data.transforms.transform)": [[248, "neural_compressor.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.data.transforms.transform)": [[248, "neural_compressor.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.data.transforms.transform)": [[248, "neural_compressor.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.data.transforms.transform)": [[248, "neural_compressor.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.data.transforms.transform)": [[248, "neural_compressor.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.data.transforms.transform)": [[248, "neural_compressor.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.data.transforms.transform)": [[248, "neural_compressor.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.data.transforms.transform)": [[248, "neural_compressor.data.transforms.transform.TRANSFORMS"], [248, "neural_compressor.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[248, "neural_compressor.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[248, "neural_compressor.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.data.transforms.transform)": [[248, "neural_compressor.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.data.transforms.transform)": [[248, "neural_compressor.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.data.transforms.transform)": [[248, "neural_compressor.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.data.transforms.transform)": [[248, "neural_compressor.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.data.transforms.transform)": [[248, "neural_compressor.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.data.transforms.transform)": [[248, "neural_compressor.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.data.transforms.transform)": [[248, "neural_compressor.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.data.transforms.transform)": [[248, "neural_compressor.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.data.transforms.transform)": [[248, "neural_compressor.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.data.transforms.transform)": [[248, "neural_compressor.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.data.transforms.transform)": [[248, "neural_compressor.data.transforms.transform.get_final_text"]], "get_torchvision_map() (in module neural_compressor.data.transforms.transform)": [[248, "neural_compressor.data.transforms.transform.get_torchvision_map"]], "neural_compressor.data.transforms.transform": [[248, "module-neural_compressor.data.transforms.transform"]], "read_squad_examples() (in module neural_compressor.data.transforms.transform)": [[248, "neural_compressor.data.transforms.transform.read_squad_examples"]], "transform_registry() (in module neural_compressor.data.transforms.transform)": [[248, "neural_compressor.data.transforms.transform.transform_registry"]], "benchmark (class in neural_compressor.experimental.benchmark)": [[249, "neural_compressor.experimental.benchmark.Benchmark"]], "get_architecture() (in module neural_compressor.experimental.benchmark)": [[249, "neural_compressor.experimental.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.experimental.benchmark)": [[249, "neural_compressor.experimental.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.experimental.benchmark)": [[249, "neural_compressor.experimental.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.experimental.benchmark)": [[249, "neural_compressor.experimental.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.experimental.benchmark)": [[249, "neural_compressor.experimental.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.experimental.benchmark)": [[249, "neural_compressor.experimental.benchmark.get_threads_per_core"]], "neural_compressor.experimental.benchmark": [[249, "module-neural_compressor.experimental.benchmark"]], "set_all_env_var() (in module neural_compressor.experimental.benchmark)": [[249, "neural_compressor.experimental.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.experimental.benchmark)": [[249, "neural_compressor.experimental.benchmark.set_env_var"]], "criterions (class in neural_compressor.experimental.common.criterion)": [[250, "neural_compressor.experimental.common.criterion.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[250, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.experimental.common.criterion)": [[250, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[250, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss"]], "pytorchcriterions (class in neural_compressor.experimental.common.criterion)": [[250, "neural_compressor.experimental.common.criterion.PyTorchCriterions"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[250, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[250, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[250, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[250, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[250, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss"]], "tensorflowcriterions (class in neural_compressor.experimental.common.criterion)": [[250, "neural_compressor.experimental.common.criterion.TensorflowCriterions"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.experimental.common.criterion)": [[250, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal"]], "criterion_registry() (in module neural_compressor.experimental.common.criterion)": [[250, "neural_compressor.experimental.common.criterion.criterion_registry"]], "neural_compressor.experimental.common.criterion": [[250, "module-neural_compressor.experimental.common.criterion"]], "dataloader (class in neural_compressor.experimental.common.dataloader)": [[251, "neural_compressor.experimental.common.dataloader.DataLoader"]], "neural_compressor.experimental.common.dataloader": [[251, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[252, "module-neural_compressor.experimental.common"]], "metric (class in neural_compressor.experimental.common.metric)": [[253, "neural_compressor.experimental.common.metric.Metric"]], "neural_compressor.experimental.common.metric": [[253, "module-neural_compressor.experimental.common.metric"]], "model (class in neural_compressor.experimental.common.model)": [[254, "neural_compressor.experimental.common.model.Model"]], "neural_compressor.experimental.common.model": [[254, "module-neural_compressor.experimental.common.model"]], "set_backend() (in module neural_compressor.experimental.common.model)": [[254, "neural_compressor.experimental.common.model.set_backend"]], "optimizers (class in neural_compressor.experimental.common.optimizer)": [[255, "neural_compressor.experimental.common.optimizer.Optimizers"]], "pytorchoptimizers (class in neural_compressor.experimental.common.optimizer)": [[255, "neural_compressor.experimental.common.optimizer.PyTorchOptimizers"]], "pytorchsgd (class in neural_compressor.experimental.common.optimizer)": [[255, "neural_compressor.experimental.common.optimizer.PyTorchSGD"]], "tensorflowadamw (class in neural_compressor.experimental.common.optimizer)": [[255, "neural_compressor.experimental.common.optimizer.TensorFlowAdamW"]], "tensorflowsgd (class in neural_compressor.experimental.common.optimizer)": [[255, "neural_compressor.experimental.common.optimizer.TensorFlowSGD"]], "tensorflowoptimizers (class in neural_compressor.experimental.common.optimizer)": [[255, "neural_compressor.experimental.common.optimizer.TensorflowOptimizers"]], "neural_compressor.experimental.common.optimizer": [[255, "module-neural_compressor.experimental.common.optimizer"]], "optimizer_registry() (in module neural_compressor.experimental.common.optimizer)": [[255, "neural_compressor.experimental.common.optimizer.optimizer_registry"]], "postprocess (class in neural_compressor.experimental.common.postprocess)": [[256, "neural_compressor.experimental.common.postprocess.Postprocess"]], "neural_compressor.experimental.common.postprocess": [[256, "module-neural_compressor.experimental.common.postprocess"]], "get_activation() (in module neural_compressor.experimental.common.torch_utils)": [[257, "neural_compressor.experimental.common.torch_utils.get_activation"]], "neural_compressor.experimental.common.torch_utils": [[257, "module-neural_compressor.experimental.common.torch_utils"]], "record_output() (in module neural_compressor.experimental.common.torch_utils)": [[257, "neural_compressor.experimental.common.torch_utils.record_output"]], "component (class in neural_compressor.experimental.component)": [[258, "neural_compressor.experimental.component.Component"]], "neural_compressor.experimental.component": [[258, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.compression": [[259, "module-neural_compressor.experimental.compression"]], "neural_compressor.experimental.contrib": [[260, "module-neural_compressor.experimental.contrib"]], "neural_compressor.experimental.contrib.strategy": [[261, "module-neural_compressor.experimental.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.experimental.contrib.strategy.sigopt)": [[262, "neural_compressor.experimental.contrib.strategy.sigopt.SigOptTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[262, "module-neural_compressor.experimental.contrib.strategy.sigopt"]], "tpetunestrategy (class in neural_compressor.experimental.contrib.strategy.tpe)": [[263, "neural_compressor.experimental.contrib.strategy.tpe.TpeTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.tpe": [[263, "module-neural_compressor.experimental.contrib.strategy.tpe"]], "basedataloader (class in neural_compressor.experimental.data.dataloaders.base_dataloader)": [[264, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[264, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[265, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.experimental.data.dataloaders.default_dataloader)": [[266, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader"]], "default_collate() (in module neural_compressor.experimental.data.dataloaders.default_dataloader)": [[266, "neural_compressor.experimental.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[266, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[267, "neural_compressor.experimental.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[267, "neural_compressor.experimental.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[267, "neural_compressor.experimental.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[267, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[268, "module-neural_compressor.experimental.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.experimental.data.dataloaders.mxnet_dataloader)": [[269, "neural_compressor.experimental.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[269, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[270, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[270, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[270, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.experimental.data.dataloaders.pytorch_dataloader)": [[271, "neural_compressor.experimental.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[271, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[272, "neural_compressor.experimental.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[272, "neural_compressor.experimental.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[272, "neural_compressor.experimental.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[272, "neural_compressor.experimental.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.sampler": [[272, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[273, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[273, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[273, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[273, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[273, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[274, "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[274, "neural_compressor.experimental.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[274, "neural_compressor.experimental.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[274, "neural_compressor.experimental.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[274, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[274, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[274, "neural_compressor.experimental.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[274, "neural_compressor.experimental.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[274, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "coconpy (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[275, "neural_compressor.experimental.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[275, "neural_compressor.experimental.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[275, "neural_compressor.experimental.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[275, "neural_compressor.experimental.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[275, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[276, "neural_compressor.experimental.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[276, "neural_compressor.experimental.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.experimental.data.datasets.dataset)": [[276, "neural_compressor.experimental.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.experimental.data.datasets.dataset)": [[276, "neural_compressor.experimental.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[276, "neural_compressor.experimental.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[276, "neural_compressor.experimental.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.experimental.data.datasets.dataset)": [[276, "neural_compressor.experimental.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.experimental.data.datasets.dataset)": [[276, "neural_compressor.experimental.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[276, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[276, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[276, "neural_compressor.experimental.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[276, "neural_compressor.experimental.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[276, "neural_compressor.experimental.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[276, "neural_compressor.experimental.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[276, "neural_compressor.experimental.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[276, "neural_compressor.experimental.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[276, "neural_compressor.experimental.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[276, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[276, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[276, "neural_compressor.experimental.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[276, "neural_compressor.experimental.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.experimental.data.datasets.dataset)": [[276, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.datasets.dataset)": [[276, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflowcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[276, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[276, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[276, "neural_compressor.experimental.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[276, "neural_compressor.experimental.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[276, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageFolder"]], "tensorflowimagerecord (class in neural_compressor.experimental.data.datasets.dataset)": [[276, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[276, "neural_compressor.experimental.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.experimental.data.datasets.dataset)": [[276, "neural_compressor.experimental.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.experimental.data.datasets.dataset)": [[276, "neural_compressor.experimental.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.experimental.data.datasets.dataset)": [[276, "neural_compressor.experimental.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.experimental.data.datasets.dataset)": [[276, "neural_compressor.experimental.data.datasets.dataset.check_integrity"]], "dataset_registry() (in module neural_compressor.experimental.data.datasets.dataset)": [[276, "neural_compressor.experimental.data.datasets.dataset.dataset_registry"]], "download_url() (in module neural_compressor.experimental.data.datasets.dataset)": [[276, "neural_compressor.experimental.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.experimental.data.datasets.dataset)": [[276, "neural_compressor.experimental.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.experimental.data.datasets.dataset)": [[276, "neural_compressor.experimental.data.datasets.dataset.gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dataset": [[276, "module-neural_compressor.experimental.data.datasets.dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset)": [[277, "neural_compressor.experimental.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[277, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[278, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[278, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[278, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[279, "neural_compressor.experimental.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[279, "neural_compressor.experimental.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[279, "neural_compressor.experimental.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[279, "neural_compressor.experimental.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[279, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[279, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[279, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[280, "module-neural_compressor.experimental.data.datasets"]], "styletransferdataset (class in neural_compressor.experimental.data.datasets.style_transfer_dataset)": [[281, "neural_compressor.experimental.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[281, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[282, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[282, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.coco_filter": [[282, "module-neural_compressor.experimental.data.filters.coco_filter"]], "filters (class in neural_compressor.experimental.data.filters.filter)": [[283, "neural_compressor.experimental.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.experimental.data.filters.filter)": [[283, "neural_compressor.experimental.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.experimental.data.filters.filter)": [[283, "neural_compressor.experimental.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.experimental.data.filters.filter)": [[283, "neural_compressor.experimental.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.experimental.data.filters.filter)": [[283, "neural_compressor.experimental.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.experimental.data.filters.filter)": [[283, "neural_compressor.experimental.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.experimental.data.filters.filter)": [[283, "neural_compressor.experimental.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.experimental.data.filters.filter)": [[283, "neural_compressor.experimental.data.filters.filter.filter_registry"]], "neural_compressor.experimental.data.filters.filter": [[283, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[284, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[285, "module-neural_compressor.experimental.data"]], "bilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[286, "neural_compressor.experimental.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[286, "neural_compressor.experimental.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[286, "neural_compressor.experimental.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[286, "neural_compressor.experimental.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[286, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[286, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[286, "neural_compressor.experimental.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[286, "neural_compressor.experimental.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[286, "neural_compressor.experimental.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[286, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[287, "module-neural_compressor.experimental.data.transforms"]], "basictokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[288, "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[288, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[288, "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[288, "neural_compressor.experimental.data.transforms.tokenization.convert_by_vocab"]], "convert_to_unicode() (in module neural_compressor.experimental.data.transforms.tokenization)": [[288, "neural_compressor.experimental.data.transforms.tokenization.convert_to_unicode"]], "load_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[288, "neural_compressor.experimental.data.transforms.tokenization.load_vocab"]], "neural_compressor.experimental.data.transforms.tokenization": [[288, "module-neural_compressor.experimental.data.transforms.tokenization"]], "whitespace_tokenize() (in module neural_compressor.experimental.data.transforms.tokenization)": [[288, "neural_compressor.experimental.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.experimental.data.transforms.transform)": [[289, "neural_compressor.experimental.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.experimental.data.transforms.transform)": [[289, "neural_compressor.experimental.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.experimental.data.transforms.transform)": [[289, "neural_compressor.experimental.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[289, "neural_compressor.experimental.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.experimental.data.transforms.transform)": [[289, "neural_compressor.experimental.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[289, "neural_compressor.experimental.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[289, "neural_compressor.experimental.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[289, "neural_compressor.experimental.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.experimental.data.transforms.transform)": [[289, "neural_compressor.experimental.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[289, "neural_compressor.experimental.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[289, "neural_compressor.experimental.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[289, "neural_compressor.experimental.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.experimental.data.transforms.transform)": [[289, "neural_compressor.experimental.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[289, "neural_compressor.experimental.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[289, "neural_compressor.experimental.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[289, "neural_compressor.experimental.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.experimental.data.transforms.transform)": [[289, "neural_compressor.experimental.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.experimental.data.transforms.transform)": [[289, "neural_compressor.experimental.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[289, "neural_compressor.experimental.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[289, "neural_compressor.experimental.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[289, "neural_compressor.experimental.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.experimental.data.transforms.transform)": [[289, "neural_compressor.experimental.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.experimental.data.transforms.transform)": [[289, "neural_compressor.experimental.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[289, "neural_compressor.experimental.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.experimental.data.transforms.transform)": [[289, "neural_compressor.experimental.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.experimental.data.transforms.transform)": [[289, "neural_compressor.experimental.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[289, "neural_compressor.experimental.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[289, "neural_compressor.experimental.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[289, "neural_compressor.experimental.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[289, "neural_compressor.experimental.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[289, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[289, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[289, "neural_compressor.experimental.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[289, "neural_compressor.experimental.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[289, "neural_compressor.experimental.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[289, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[289, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[289, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[289, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[289, "neural_compressor.experimental.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.experimental.data.transforms.transform)": [[289, "neural_compressor.experimental.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.experimental.data.transforms.transform)": [[289, "neural_compressor.experimental.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.experimental.data.transforms.transform)": [[289, "neural_compressor.experimental.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[289, "neural_compressor.experimental.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[289, "neural_compressor.experimental.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[289, "neural_compressor.experimental.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[289, "neural_compressor.experimental.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[289, "neural_compressor.experimental.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.experimental.data.transforms.transform)": [[289, "neural_compressor.experimental.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[289, "neural_compressor.experimental.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.experimental.data.transforms.transform)": [[289, "neural_compressor.experimental.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.experimental.data.transforms.transform)": [[289, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.experimental.data.transforms.transform)": [[289, "neural_compressor.experimental.data.transforms.transform.TRANSFORMS"], [289, "neural_compressor.experimental.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[289, "neural_compressor.experimental.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[289, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[289, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[289, "neural_compressor.experimental.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.experimental.data.transforms.transform)": [[289, "neural_compressor.experimental.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[289, "neural_compressor.experimental.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[289, "neural_compressor.experimental.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[289, "neural_compressor.experimental.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.experimental.data.transforms.transform)": [[289, "neural_compressor.experimental.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.experimental.data.transforms.transform)": [[289, "neural_compressor.experimental.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.experimental.data.transforms.transform)": [[289, "neural_compressor.experimental.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.transforms.transform)": [[289, "neural_compressor.experimental.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.experimental.data.transforms.transform)": [[289, "neural_compressor.experimental.data.transforms.transform.get_final_text"]], "get_torchvision_map() (in module neural_compressor.experimental.data.transforms.transform)": [[289, "neural_compressor.experimental.data.transforms.transform.get_torchvision_map"]], "neural_compressor.experimental.data.transforms.transform": [[289, "module-neural_compressor.experimental.data.transforms.transform"]], "read_squad_examples() (in module neural_compressor.experimental.data.transforms.transform)": [[289, "neural_compressor.experimental.data.transforms.transform.read_squad_examples"]], "transform_registry() (in module neural_compressor.experimental.data.transforms.transform)": [[289, "neural_compressor.experimental.data.transforms.transform.transform_registry"]], "distillation (class in neural_compressor.experimental.distillation)": [[290, "neural_compressor.experimental.distillation.Distillation"]], "_epoch_ran (neural_compressor.experimental.distillation.distillation attribute)": [[290, "neural_compressor.experimental.distillation.Distillation._epoch_ran"]], "best_model (neural_compressor.experimental.distillation.distillation attribute)": [[290, "neural_compressor.experimental.distillation.Distillation.best_model"]], "best_score (neural_compressor.experimental.distillation.distillation attribute)": [[290, "neural_compressor.experimental.distillation.Distillation.best_score"]], "eval_frequency (neural_compressor.experimental.distillation.distillation attribute)": [[290, "neural_compressor.experimental.distillation.Distillation.eval_frequency"]], "neural_compressor.experimental.distillation": [[290, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[291, "module-neural_compressor.experimental.export"]], "check_model() (in module neural_compressor.experimental.export.qlinear2qdq)": [[292, "neural_compressor.experimental.export.qlinear2qdq.check_model"]], "neural_compressor.experimental.export.qlinear2qdq": [[292, "module-neural_compressor.experimental.export.qlinear2qdq"]], "onnx_qlinear_to_qdq() (in module neural_compressor.experimental.export.qlinear2qdq)": [[292, "neural_compressor.experimental.export.qlinear2qdq.onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.tf2onnx": [[293, "module-neural_compressor.experimental.export.tf2onnx"]], "tf_to_fp32_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[293, "neural_compressor.experimental.export.tf2onnx.tf_to_fp32_onnx"]], "tf_to_int8_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[293, "neural_compressor.experimental.export.tf2onnx.tf_to_int8_onnx"]], "dynamic_quant_export() (in module neural_compressor.experimental.export.torch2onnx)": [[294, "neural_compressor.experimental.export.torch2onnx.dynamic_quant_export"]], "get_node_mapping() (in module neural_compressor.experimental.export.torch2onnx)": [[294, "neural_compressor.experimental.export.torch2onnx.get_node_mapping"]], "get_quantizable_onnx_ops() (in module neural_compressor.experimental.export.torch2onnx)": [[294, "neural_compressor.experimental.export.torch2onnx.get_quantizable_onnx_ops"]], "neural_compressor.experimental.export.torch2onnx": [[294, "module-neural_compressor.experimental.export.torch2onnx"]], "static_quant_export() (in module neural_compressor.experimental.export.torch2onnx)": [[294, "neural_compressor.experimental.export.torch2onnx.static_quant_export"]], "torch_to_fp32_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[294, "neural_compressor.experimental.export.torch2onnx.torch_to_fp32_onnx"]], "torch_to_int8_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[294, "neural_compressor.experimental.export.torch2onnx.torch_to_int8_onnx"]], "graph_optimization (class in neural_compressor.experimental.graph_optimization)": [[295, "neural_compressor.experimental.graph_optimization.Graph_Optimization"]], "neural_compressor.experimental.graph_optimization": [[295, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[296, "module-neural_compressor.experimental"]], "bleu (class in neural_compressor.experimental.metric.bleu)": [[297, "neural_compressor.experimental.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.experimental.metric.bleu)": [[297, "neural_compressor.experimental.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.experimental.metric.bleu)": [[297, "neural_compressor.experimental.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.experimental.metric.bleu.bleu attribute)": [[297, "neural_compressor.experimental.metric.bleu.BLEU.labels"]], "neural_compressor.experimental.metric.bleu": [[297, "module-neural_compressor.experimental.metric.bleu"]], "nondigit_punct_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[297, "neural_compressor.experimental.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.experimental.metric.bleu.bleu attribute)": [[297, "neural_compressor.experimental.metric.bleu.BLEU.predictions"]], "punct_nondigit_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[297, "neural_compressor.experimental.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[297, "neural_compressor.experimental.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.experimental.metric.bleu_util)": [[298, "neural_compressor.experimental.metric.bleu_util.compute_bleu"]], "neural_compressor.experimental.metric.bleu_util": [[298, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[299, "module-neural_compressor.experimental.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.experimental.metric.coco_tools)": [[300, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.experimental.metric.coco_tools)": [[300, "neural_compressor.experimental.metric.coco_tools.COCOWrapper"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.experimental.metric.coco_tools)": [[300, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.experimental.metric.coco_tools)": [[300, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.experimental.metric.coco_tools)": [[300, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "dataset (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[300, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[300, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.experimental.metric.coco_tools": [[300, "module-neural_compressor.experimental.metric.coco_tools"]], "evaluate() (in module neural_compressor.experimental.metric.evaluate_squad)": [[301, "neural_compressor.experimental.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[301, "neural_compressor.experimental.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[301, "neural_compressor.experimental.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.evaluate_squad)": [[301, "neural_compressor.experimental.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.evaluate_squad": [[301, "module-neural_compressor.experimental.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.experimental.metric.f1)": [[302, "neural_compressor.experimental.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.experimental.metric.f1)": [[302, "neural_compressor.experimental.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.f1)": [[302, "neural_compressor.experimental.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[302, "module-neural_compressor.experimental.metric.f1"]], "normalize_answer() (in module neural_compressor.experimental.metric.f1)": [[302, "neural_compressor.experimental.metric.f1.normalize_answer"]], "neural_compressor.experimental.metric": [[303, "module-neural_compressor.experimental.metric"]], "accuracy (class in neural_compressor.experimental.metric.metric)": [[304, "neural_compressor.experimental.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.experimental.metric.metric)": [[304, "neural_compressor.experimental.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.experimental.metric.metric)": [[304, "neural_compressor.experimental.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.experimental.metric.metric)": [[304, "neural_compressor.experimental.metric.metric.F1"]], "generaltopk (class in neural_compressor.experimental.metric.metric)": [[304, "neural_compressor.experimental.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.experimental.metric.metric)": [[304, "neural_compressor.experimental.metric.metric.Loss"]], "mae (class in neural_compressor.experimental.metric.metric)": [[304, "neural_compressor.experimental.metric.metric.MAE"]], "metrics (class in neural_compressor.experimental.metric.metric)": [[304, "neural_compressor.experimental.metric.metric.METRICS"]], "mse (class in neural_compressor.experimental.metric.metric)": [[304, "neural_compressor.experimental.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.experimental.metric.metric)": [[304, "neural_compressor.experimental.metric.metric.MXNetMetrics"]], "onnxrtglue (class in neural_compressor.experimental.metric.metric)": [[304, "neural_compressor.experimental.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.experimental.metric.metric)": [[304, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.experimental.metric.metric)": [[304, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.experimental.metric.metric)": [[304, "neural_compressor.experimental.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.experimental.metric.metric)": [[304, "neural_compressor.experimental.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.experimental.metric.metric)": [[304, "neural_compressor.experimental.metric.metric.RMSE"]], "roc (class in neural_compressor.experimental.metric.metric)": [[304, "neural_compressor.experimental.metric.metric.ROC"]], "squadf1 (class in neural_compressor.experimental.metric.metric)": [[304, "neural_compressor.experimental.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.experimental.metric.metric)": [[304, "neural_compressor.experimental.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.experimental.metric.metric)": [[304, "neural_compressor.experimental.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.experimental.metric.metric)": [[304, "neural_compressor.experimental.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.experimental.metric.metric)": [[304, "neural_compressor.experimental.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.experimental.metric.metric)": [[304, "neural_compressor.experimental.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.experimental.metric.metric)": [[304, "neural_compressor.experimental.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.experimental.metric.metric)": [[304, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.experimental.metric.metric)": [[304, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.experimental.metric.metric.mae attribute)": [[304, "neural_compressor.experimental.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.experimental.metric.metric.mse attribute)": [[304, "neural_compressor.experimental.metric.metric.MSE.compare_label"]], "k (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[304, "neural_compressor.experimental.metric.metric.GeneralTopK.k"]], "k (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[304, "neural_compressor.experimental.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[304, "neural_compressor.experimental.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mae attribute)": [[304, "neural_compressor.experimental.metric.metric.MAE.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mse attribute)": [[304, "neural_compressor.experimental.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.experimental.metric.metric)": [[304, "neural_compressor.experimental.metric.metric.mIOU"]], "metric_registry() (in module neural_compressor.experimental.metric.metric)": [[304, "neural_compressor.experimental.metric.metric.metric_registry"]], "metrics (neural_compressor.experimental.metric.metric.metrics attribute)": [[304, "neural_compressor.experimental.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.experimental.metric.metric.mxnetmetrics attribute)": [[304, "neural_compressor.experimental.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtitmetrics attribute)": [[304, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtqlmetrics attribute)": [[304, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.pytorchmetrics attribute)": [[304, "neural_compressor.experimental.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.tensorflowmetrics attribute)": [[304, "neural_compressor.experimental.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.experimental.metric.metric.rmse attribute)": [[304, "neural_compressor.experimental.metric.metric.RMSE.mse"]], "neural_compressor.experimental.metric.metric": [[304, "module-neural_compressor.experimental.metric.metric"]], "num_correct (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[304, "neural_compressor.experimental.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[304, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[304, "neural_compressor.experimental.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[304, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[304, "neural_compressor.experimental.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mae attribute)": [[304, "neural_compressor.experimental.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mse attribute)": [[304, "neural_compressor.experimental.metric.metric.MSE.pred_list"]], "sample (neural_compressor.experimental.metric.metric.accuracy attribute)": [[304, "neural_compressor.experimental.metric.metric.Accuracy.sample"]], "sample (neural_compressor.experimental.metric.metric.loss attribute)": [[304, "neural_compressor.experimental.metric.metric.Loss.sample"]], "sum (neural_compressor.experimental.metric.metric.loss attribute)": [[304, "neural_compressor.experimental.metric.metric.Loss.sum"]], "mixedprecision (class in neural_compressor.experimental.mixed_precision)": [[305, "neural_compressor.experimental.mixed_precision.MixedPrecision"]], "neural_compressor.experimental.mixed_precision": [[305, "module-neural_compressor.experimental.mixed_precision"]], "modelconversion (class in neural_compressor.experimental.model_conversion)": [[306, "neural_compressor.experimental.model_conversion.ModelConversion"]], "neural_compressor.experimental.model_conversion": [[306, "module-neural_compressor.experimental.model_conversion"]], "basicnas (class in neural_compressor.experimental.nas.basic_nas)": [[307, "neural_compressor.experimental.nas.basic_nas.BasicNAS"]], "neural_compressor.experimental.nas.basic_nas": [[307, "module-neural_compressor.experimental.nas.basic_nas"]], "dynas (class in neural_compressor.experimental.nas.dynas)": [[308, "neural_compressor.experimental.nas.dynas.DyNAS"]], "neural_compressor.experimental.nas.dynas": [[308, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas": [[309, "module-neural_compressor.experimental.nas"]], "nas (class in neural_compressor.experimental.nas.nas)": [[310, "neural_compressor.experimental.nas.nas.NAS"]], "nasbase (class in neural_compressor.experimental.nas.nas)": [[310, "neural_compressor.experimental.nas.nas.NASBase"]], "neural_compressor.experimental.nas.nas": [[310, "module-neural_compressor.experimental.nas.nas"]], "create_search_space_pool() (in module neural_compressor.experimental.nas.nas_utils)": [[311, "neural_compressor.experimental.nas.nas_utils.create_search_space_pool"]], "find_pareto_front() (in module neural_compressor.experimental.nas.nas_utils)": [[311, "neural_compressor.experimental.nas.nas_utils.find_pareto_front"]], "nas_registry() (in module neural_compressor.experimental.nas.nas_utils)": [[311, "neural_compressor.experimental.nas.nas_utils.nas_registry"]], "neural_compressor.experimental.nas.nas_utils": [[311, "module-neural_compressor.experimental.nas.nas_utils"]], "bayesianoptimizationsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[312, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher"]], "gridsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[312, "neural_compressor.experimental.nas.search_algorithms.GridSearcher"]], "randomsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[312, "neural_compressor.experimental.nas.search_algorithms.RandomSearcher"]], "searcher (class in neural_compressor.experimental.nas.search_algorithms)": [[312, "neural_compressor.experimental.nas.search_algorithms.Searcher"]], "neural_compressor.experimental.nas.search_algorithms": [[312, "module-neural_compressor.experimental.nas.search_algorithms"]], "gradientsensitivitypruner (class in neural_compressor.experimental.pruner_legacy.gradient_sensitivity)": [[313, "neural_compressor.experimental.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[313, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"]], "grouplassopruner (class in neural_compressor.experimental.pruner_legacy.group_lasso)": [[314, "neural_compressor.experimental.pruner_legacy.group_lasso.GroupLassoPruner"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[314, "module-neural_compressor.experimental.pruner_legacy.group_lasso"]], "neural_compressor.experimental.pruner_legacy": [[315, "module-neural_compressor.experimental.pruner_legacy"]], "basicmagnitudepruner (class in neural_compressor.experimental.pruner_legacy.magnitude)": [[316, "neural_compressor.experimental.pruner_legacy.magnitude.BasicMagnitudePruner"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[316, "module-neural_compressor.experimental.pruner_legacy.magnitude"]], "patternlockpruner (class in neural_compressor.experimental.pruner_legacy.pattern_lock)": [[317, "neural_compressor.experimental.pruner_legacy.pattern_lock.PatternLockPruner"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[317, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"]], "pruner (class in neural_compressor.experimental.pruner_legacy.pruner)": [[318, "neural_compressor.experimental.pruner_legacy.pruner.Pruner"]], "neural_compressor.experimental.pruner_legacy.pruner": [[318, "module-neural_compressor.experimental.pruner_legacy.pruner"]], "pruner_registry() (in module neural_compressor.experimental.pruner_legacy.pruner)": [[318, "neural_compressor.experimental.pruner_legacy.pruner.pruner_registry"]], "pruning (class in neural_compressor.experimental.pruning)": [[319, "neural_compressor.experimental.pruning.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning)": [[319, "neural_compressor.experimental.pruning.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning.pruning attribute)": [[319, "neural_compressor.experimental.pruning.Pruning.conf"]], "neural_compressor.experimental.pruning": [[319, "module-neural_compressor.experimental.pruning"]], "pruners (neural_compressor.experimental.pruning.pruning attribute)": [[319, "neural_compressor.experimental.pruning.Pruning.pruners"]], "neural_compressor.experimental.pruning_recipes": [[320, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[321, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "patterns (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[322, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS"]], "patternbase (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[322, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[322, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "pattern_registry() (in module neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[322, "neural_compressor.experimental.pruning_recipes.patterns.pattern.pattern_registry"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns.pattern.patterns attribute)": [[322, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS.patterns"]], "tilepatternbase (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[323, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase"]], "tilepattern_1x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[323, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x1"]], "tilepattern_1x16 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[323, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x16"]], "tilepattern_1x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[323, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x2"]], "tilepattern_2x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[323, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_2x2"]], "tilepattern_4x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[323, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_4x1"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[323, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "pruning (class in neural_compressor.experimental.pruning_v2)": [[324, "neural_compressor.experimental.pruning_v2.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning_v2)": [[324, "neural_compressor.experimental.pruning_v2.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning_v2.pruning attribute)": [[324, "neural_compressor.experimental.pruning_v2.Pruning.conf"]], "neural_compressor.experimental.pruning_v2": [[324, "module-neural_compressor.experimental.pruning_v2"]], "pruners (neural_compressor.experimental.pruning_v2.pruning attribute)": [[324, "neural_compressor.experimental.pruning_v2.Pruning.pruners"]], "neural_compressor.experimental.pytorch_pruner": [[325, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[326, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "m (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[327, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.M"]], "n (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[327, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.N"]], "pattern (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[327, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern"]], "patternninm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[327, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM"]], "patternnxm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[327, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM"]], "block_size (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm attribute)": [[327, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.block_size"]], "get_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[327, "neural_compressor.experimental.pytorch_pruner.patterns.get_pattern"]], "is_global (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[327, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.is_global"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[327, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "pattern (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[327, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.pattern"]], "register_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[327, "neural_compressor.experimental.pytorch_pruner.patterns.register_pattern"]], "check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[328, "neural_compressor.experimental.pytorch_pruner.prune_utils.check_config"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[328, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "parse_not_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[328, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_not_to_prune"]], "parse_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[328, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_to_prune"]], "process_and_check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[328, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_and_check_config"]], "process_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[328, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_config"]], "reset_non_value_to_default() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[328, "neural_compressor.experimental.pytorch_pruner.prune_utils.reset_non_value_to_default"]], "magnitudepruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[329, "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner"]], "patternlockpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[329, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner"]], "pruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[329, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner"]], "snipmomentumpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[329, "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner"]], "snippruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[329, "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner"]], "config (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[329, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.config"]], "current_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[329, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.current_sparsity_ratio"]], "end_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[329, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.end_step"]], "get_pruner() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[329, "neural_compressor.experimental.pytorch_pruner.pruner.get_pruner"]], "global_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[329, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.global_step"]], "masks (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[329, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.masks"]], "max_sparsity_ratio_per_layer (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[329, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.max_sparsity_ratio_per_layer"]], "modules (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[329, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.modules"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[329, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "pattern (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[329, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.pattern"]], "register_pruners() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[329, "neural_compressor.experimental.pytorch_pruner.pruner.register_pruners"]], "scheduler (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[329, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scheduler"]], "scores (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[329, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scores"]], "start_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[329, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.start_step"]], "target_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[329, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.target_sparsity_ratio"]], "update_frequency_on_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[329, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.update_frequency_on_step"]], "pruning (class in neural_compressor.experimental.pytorch_pruner.pruning)": [[330, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning"]], "config_file_path (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[330, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.config_file_path"]], "model (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[330, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.model"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[330, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "pruner_info (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[330, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruner_info"]], "pruners (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[330, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruners"]], "iterativescheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[331, "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[331, "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler"]], "scheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[331, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler"]], "config (neural_compressor.experimental.pytorch_pruner.scheduler.scheduler attribute)": [[331, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler.config"]], "get_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[331, "neural_compressor.experimental.pytorch_pruner.scheduler.get_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[331, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "register_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[331, "neural_compressor.experimental.pytorch_pruner.scheduler.register_scheduler"]], "quantization (class in neural_compressor.experimental.quantization)": [[332, "neural_compressor.experimental.quantization.Quantization"]], "neural_compressor.experimental.quantization": [[332, "module-neural_compressor.experimental.quantization"]], "scheduler (class in neural_compressor.experimental.scheduler)": [[333, "neural_compressor.experimental.scheduler.Scheduler"]], "neural_compressor.experimental.scheduler": [[333, "module-neural_compressor.experimental.scheduler"]], "automixedprecisiontunestrategy (class in neural_compressor.experimental.strategy.auto_mixed_precision)": [[334, "neural_compressor.experimental.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[334, "module-neural_compressor.experimental.strategy.auto_mixed_precision"]], "basictunestrategy (class in neural_compressor.experimental.strategy.basic)": [[335, "neural_compressor.experimental.strategy.basic.BasicTuneStrategy"]], "neural_compressor.experimental.strategy.basic": [[335, "module-neural_compressor.experimental.strategy.basic"]], "bayesianoptimization (class in neural_compressor.experimental.strategy.bayesian)": [[336, "neural_compressor.experimental.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.experimental.strategy.bayesian)": [[336, "neural_compressor.experimental.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.experimental.strategy.bayesian)": [[336, "neural_compressor.experimental.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.experimental.strategy.bayesian)": [[336, "neural_compressor.experimental.strategy.bayesian.acq_max"]], "neural_compressor.experimental.strategy.bayesian": [[336, "module-neural_compressor.experimental.strategy.bayesian"]], "exhaustivetunestrategy (class in neural_compressor.experimental.strategy.exhaustive)": [[337, "neural_compressor.experimental.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.experimental.strategy.exhaustive": [[337, "module-neural_compressor.experimental.strategy.exhaustive"]], "neural_compressor.experimental.strategy": [[338, "module-neural_compressor.experimental.strategy"]], "msetunestrategy (class in neural_compressor.experimental.strategy.mse)": [[339, "neural_compressor.experimental.strategy.mse.MSETuneStrategy"]], "neural_compressor.experimental.strategy.mse": [[339, "module-neural_compressor.experimental.strategy.mse"]], "mse_v2tunestrategy (class in neural_compressor.experimental.strategy.mse_v2)": [[340, "neural_compressor.experimental.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.experimental.strategy.mse_v2": [[340, "module-neural_compressor.experimental.strategy.mse_v2"]], "randomtunestrategy (class in neural_compressor.experimental.strategy.random)": [[341, "neural_compressor.experimental.strategy.random.RandomTuneStrategy"]], "neural_compressor.experimental.strategy.random": [[341, "module-neural_compressor.experimental.strategy.random"]], "tunestrategy (class in neural_compressor.experimental.strategy.strategy)": [[342, "neural_compressor.experimental.strategy.strategy.TuneStrategy"]], "neural_compressor.experimental.strategy.strategy": [[342, "module-neural_compressor.experimental.strategy.strategy"]], "strategy_registry() (in module neural_compressor.experimental.strategy.strategy)": [[342, "neural_compressor.experimental.strategy.strategy.strategy_registry"]], "neural_compressor.experimental.strategy.utils.constant": [[343, "module-neural_compressor.experimental.strategy.utils.constant"]], "neural_compressor.experimental.strategy.utils": [[344, "module-neural_compressor.experimental.strategy.utils"]], "fallbacktuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[345, "neural_compressor.experimental.strategy.utils.tuning_sampler.FallbackTuningSampler"]], "modelwisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[345, "neural_compressor.experimental.strategy.utils.tuning_sampler.ModelWiseTuningSampler"]], "optypewisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[345, "neural_compressor.experimental.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler"]], "opwisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[345, "neural_compressor.experimental.strategy.utils.tuning_sampler.OpWiseTuningSampler"]], "smoothquantsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[345, "neural_compressor.experimental.strategy.utils.tuning_sampler.SmoothQuantSampler"]], "tuningorder (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[345, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningOrder"]], "tuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[345, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningSampler"]], "tuningsamplerregistry (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[345, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningSamplerRegistry"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[345, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"]], "tuningitem (class in neural_compressor.experimental.strategy.utils.tuning_space)": [[346, "neural_compressor.experimental.strategy.utils.tuning_space.TuningItem"]], "tuningspace (class in neural_compressor.experimental.strategy.utils.tuning_space)": [[346, "neural_compressor.experimental.strategy.utils.tuning_space.TuningSpace"]], "initial_tuning_cfg_with_quant_mode() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[346, "neural_compressor.experimental.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[346, "module-neural_compressor.experimental.strategy.utils.tuning_space"]], "pattern_to_internal() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[346, "neural_compressor.experimental.strategy.utils.tuning_space.pattern_to_internal"]], "pattern_to_path() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[346, "neural_compressor.experimental.strategy.utils.tuning_space.pattern_to_path"]], "quant_mode_from_pattern() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[346, "neural_compressor.experimental.strategy.utils.tuning_space.quant_mode_from_pattern"]], "optuningconfig (class in neural_compressor.experimental.strategy.utils.tuning_structs)": [[347, "neural_compressor.experimental.strategy.utils.tuning_structs.OpTuningConfig"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[347, "module-neural_compressor.experimental.strategy.utils.tuning_structs"]], "ordereddefaultdict (class in neural_compressor.experimental.strategy.utils.utility)": [[348, "neural_compressor.experimental.strategy.utils.utility.OrderedDefaultDict"]], "extract_data_type() (in module neural_compressor.experimental.strategy.utils.utility)": [[348, "neural_compressor.experimental.strategy.utils.utility.extract_data_type"]], "get_adaptor_name() (in module neural_compressor.experimental.strategy.utils.utility)": [[348, "neural_compressor.experimental.strategy.utils.utility.get_adaptor_name"]], "neural_compressor.experimental.strategy.utils.utility": [[348, "module-neural_compressor.experimental.strategy.utils.utility"]], "reverted_data_type() (in module neural_compressor.experimental.strategy.utils.utility)": [[348, "neural_compressor.experimental.strategy.utils.utility.reverted_data_type"]], "neural_compressor": [[349, "module-neural_compressor"]], "bleu (class in neural_compressor.metric.bleu)": [[350, "neural_compressor.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.metric.bleu)": [[350, "neural_compressor.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.metric.bleu)": [[350, "neural_compressor.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.metric.bleu.bleu attribute)": [[350, "neural_compressor.metric.bleu.BLEU.labels"]], "neural_compressor.metric.bleu": [[350, "module-neural_compressor.metric.bleu"]], "nondigit_punct_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[350, "neural_compressor.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.metric.bleu.bleu attribute)": [[350, "neural_compressor.metric.bleu.BLEU.predictions"]], "punct_nondigit_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[350, "neural_compressor.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[350, "neural_compressor.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.metric.bleu_util)": [[351, "neural_compressor.metric.bleu_util.compute_bleu"]], "neural_compressor.metric.bleu_util": [[351, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[352, "module-neural_compressor.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.metric.coco_tools)": [[353, "neural_compressor.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.metric.coco_tools)": [[353, "neural_compressor.metric.coco_tools.COCOWrapper"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.metric.coco_tools)": [[353, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.metric.coco_tools)": [[353, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.metric.coco_tools)": [[353, "neural_compressor.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "dataset (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[353, "neural_compressor.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[353, "neural_compressor.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.metric.coco_tools": [[353, "module-neural_compressor.metric.coco_tools"]], "evaluate() (in module neural_compressor.metric.evaluate_squad)": [[354, "neural_compressor.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.metric.evaluate_squad)": [[354, "neural_compressor.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.metric.evaluate_squad)": [[354, "neural_compressor.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.evaluate_squad)": [[354, "neural_compressor.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.metric.evaluate_squad": [[354, "module-neural_compressor.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.metric.f1)": [[355, "neural_compressor.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.metric.f1)": [[355, "neural_compressor.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.f1)": [[355, "neural_compressor.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[355, "module-neural_compressor.metric.f1"]], "normalize_answer() (in module neural_compressor.metric.f1)": [[355, "neural_compressor.metric.f1.normalize_answer"]], "neural_compressor.metric": [[356, "module-neural_compressor.metric"]], "accuracy (class in neural_compressor.metric.metric)": [[357, "neural_compressor.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.metric.metric)": [[357, "neural_compressor.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.metric.metric)": [[357, "neural_compressor.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.metric.metric)": [[357, "neural_compressor.metric.metric.F1"]], "generaltopk (class in neural_compressor.metric.metric)": [[357, "neural_compressor.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.metric.metric)": [[357, "neural_compressor.metric.metric.Loss"]], "mae (class in neural_compressor.metric.metric)": [[357, "neural_compressor.metric.metric.MAE"]], "metrics (class in neural_compressor.metric.metric)": [[357, "neural_compressor.metric.metric.METRICS"]], "mse (class in neural_compressor.metric.metric)": [[357, "neural_compressor.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.metric.metric)": [[357, "neural_compressor.metric.metric.MXNetMetrics"]], "metric (class in neural_compressor.metric.metric)": [[357, "neural_compressor.metric.metric.Metric"]], "onnxrtglue (class in neural_compressor.metric.metric)": [[357, "neural_compressor.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.metric.metric)": [[357, "neural_compressor.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.metric.metric)": [[357, "neural_compressor.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.metric.metric)": [[357, "neural_compressor.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.metric.metric)": [[357, "neural_compressor.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.metric.metric)": [[357, "neural_compressor.metric.metric.RMSE"]], "roc (class in neural_compressor.metric.metric)": [[357, "neural_compressor.metric.metric.ROC"]], "squadf1 (class in neural_compressor.metric.metric)": [[357, "neural_compressor.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.metric.metric)": [[357, "neural_compressor.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.metric.metric)": [[357, "neural_compressor.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.metric.metric)": [[357, "neural_compressor.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.metric.metric)": [[357, "neural_compressor.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.metric.metric)": [[357, "neural_compressor.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.metric.metric)": [[357, "neural_compressor.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.metric.metric)": [[357, "neural_compressor.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.metric.metric)": [[357, "neural_compressor.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.metric.metric.mae attribute)": [[357, "neural_compressor.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.metric.metric.mse attribute)": [[357, "neural_compressor.metric.metric.MSE.compare_label"]], "k (neural_compressor.metric.metric.generaltopk attribute)": [[357, "neural_compressor.metric.metric.GeneralTopK.k"]], "k (neural_compressor.metric.metric.tensorflowtopk attribute)": [[357, "neural_compressor.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.metric.metric.accuracy attribute)": [[357, "neural_compressor.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.metric.metric.mae attribute)": [[357, "neural_compressor.metric.metric.MAE.label_list"]], "label_list (neural_compressor.metric.metric.mse attribute)": [[357, "neural_compressor.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.metric.metric)": [[357, "neural_compressor.metric.metric.mIOU"]], "metric_registry() (in module neural_compressor.metric.metric)": [[357, "neural_compressor.metric.metric.metric_registry"]], "metrics (neural_compressor.metric.metric.metrics attribute)": [[357, "neural_compressor.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.metric.metric.mxnetmetrics attribute)": [[357, "neural_compressor.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtitmetrics attribute)": [[357, "neural_compressor.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtqlmetrics attribute)": [[357, "neural_compressor.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.metric.metric.pytorchmetrics attribute)": [[357, "neural_compressor.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.metric.metric.tensorflowmetrics attribute)": [[357, "neural_compressor.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.metric.metric.rmse attribute)": [[357, "neural_compressor.metric.metric.RMSE.mse"]], "neural_compressor.metric.metric": [[357, "module-neural_compressor.metric.metric"]], "num_correct (neural_compressor.metric.metric.generaltopk attribute)": [[357, "neural_compressor.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.metric.metric.tensorflowtopk attribute)": [[357, "neural_compressor.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.metric.metric.generaltopk attribute)": [[357, "neural_compressor.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.metric.metric.tensorflowtopk attribute)": [[357, "neural_compressor.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.metric.metric.accuracy attribute)": [[357, "neural_compressor.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.metric.metric.mae attribute)": [[357, "neural_compressor.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.metric.metric.mse attribute)": [[357, "neural_compressor.metric.metric.MSE.pred_list"]], "register_customer_metric() (in module neural_compressor.metric.metric)": [[357, "neural_compressor.metric.metric.register_customer_metric"]], "sample (neural_compressor.metric.metric.accuracy attribute)": [[357, "neural_compressor.metric.metric.Accuracy.sample"]], "sample (neural_compressor.metric.metric.loss attribute)": [[357, "neural_compressor.metric.metric.Loss.sample"]], "sum (neural_compressor.metric.metric.loss attribute)": [[357, "neural_compressor.metric.metric.Loss.sum"]], "fit() (in module neural_compressor.mix_precision)": [[358, "neural_compressor.mix_precision.fit"]], "neural_compressor.mix_precision": [[358, "module-neural_compressor.mix_precision"]], "basemodel (class in neural_compressor.model.base_model)": [[359, "neural_compressor.model.base_model.BaseModel"]], "neural_compressor.model.base_model": [[359, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[360, "module-neural_compressor.model"]], "kerasmodel (class in neural_compressor.model.keras_model)": [[361, "neural_compressor.model.keras_model.KerasModel"]], "neural_compressor.model.keras_model": [[361, "module-neural_compressor.model.keras_model"]], "model (class in neural_compressor.model.model)": [[362, "neural_compressor.model.model.Model"]], "get_model_fwk_name() (in module neural_compressor.model.model)": [[362, "neural_compressor.model.model.get_model_fwk_name"]], "neural_compressor.model.model": [[362, "module-neural_compressor.model.model"]], "mxnetmodel (class in neural_compressor.model.mxnet_model)": [[363, "neural_compressor.model.mxnet_model.MXNetModel"]], "neural_compressor.model.mxnet_model": [[363, "module-neural_compressor.model.mxnet_model"]], "tfslimnetsfactory (class in neural_compressor.model.nets_factory)": [[364, "neural_compressor.model.nets_factory.TFSlimNetsFactory"]], "neural_compressor.model.nets_factory": [[364, "module-neural_compressor.model.nets_factory"]], "onnxmodel (class in neural_compressor.model.onnx_model)": [[365, "neural_compressor.model.onnx_model.ONNXModel"]], "neural_compressor.model.onnx_model": [[365, "module-neural_compressor.model.onnx_model"]], "tensorflowbasemodel (class in neural_compressor.model.tensorflow_model)": [[366, "neural_compressor.model.tensorflow_model.TensorflowBaseModel"]], "tensorflowcheckpointmodel (class in neural_compressor.model.tensorflow_model)": [[366, "neural_compressor.model.tensorflow_model.TensorflowCheckpointModel"]], "tensorflowllmmodel (class in neural_compressor.model.tensorflow_model)": [[366, "neural_compressor.model.tensorflow_model.TensorflowLLMModel"]], "tensorflowmodel (class in neural_compressor.model.tensorflow_model)": [[366, "neural_compressor.model.tensorflow_model.TensorflowModel"]], "tensorflowqatmodel (class in neural_compressor.model.tensorflow_model)": [[366, "neural_compressor.model.tensorflow_model.TensorflowQATModel"]], "tensorflowsavedmodelmodel (class in neural_compressor.model.tensorflow_model)": [[366, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel"]], "checkpoint_session() (in module neural_compressor.model.tensorflow_model)": [[366, "neural_compressor.model.tensorflow_model.checkpoint_session"]], "estimator_session() (in module neural_compressor.model.tensorflow_model)": [[366, "neural_compressor.model.tensorflow_model.estimator_session"]], "frozen_pb_session() (in module neural_compressor.model.tensorflow_model)": [[366, "neural_compressor.model.tensorflow_model.frozen_pb_session"]], "get_model_type() (in module neural_compressor.model.tensorflow_model)": [[366, "neural_compressor.model.tensorflow_model.get_model_type"]], "graph_def_session() (in module neural_compressor.model.tensorflow_model)": [[366, "neural_compressor.model.tensorflow_model.graph_def_session"]], "graph_session() (in module neural_compressor.model.tensorflow_model)": [[366, "neural_compressor.model.tensorflow_model.graph_session"]], "keras_session() (in module neural_compressor.model.tensorflow_model)": [[366, "neural_compressor.model.tensorflow_model.keras_session"]], "load_saved_model() (in module neural_compressor.model.tensorflow_model)": [[366, "neural_compressor.model.tensorflow_model.load_saved_model"]], "neural_compressor.model.tensorflow_model": [[366, "module-neural_compressor.model.tensorflow_model"]], "saved_model_session() (in module neural_compressor.model.tensorflow_model)": [[366, "neural_compressor.model.tensorflow_model.saved_model_session"]], "slim_session() (in module neural_compressor.model.tensorflow_model)": [[366, "neural_compressor.model.tensorflow_model.slim_session"]], "validate_and_inference_input_output() (in module neural_compressor.model.tensorflow_model)": [[366, "neural_compressor.model.tensorflow_model.validate_and_inference_input_output"]], "validate_graph_node() (in module neural_compressor.model.tensorflow_model)": [[366, "neural_compressor.model.tensorflow_model.validate_graph_node"]], "ipexmodel (class in neural_compressor.model.torch_model)": [[367, "neural_compressor.model.torch_model.IPEXModel"]], "pytorchbasemodel (class in neural_compressor.model.torch_model)": [[367, "neural_compressor.model.torch_model.PyTorchBaseModel"]], "pytorchfxmodel (class in neural_compressor.model.torch_model)": [[367, "neural_compressor.model.torch_model.PyTorchFXModel"]], "pytorchmodel (class in neural_compressor.model.torch_model)": [[367, "neural_compressor.model.torch_model.PyTorchModel"]], "neural_compressor.model.torch_model": [[367, "module-neural_compressor.model.torch_model"]], "accuracy (class in neural_compressor.objective)": [[368, "neural_compressor.objective.Accuracy"]], "footprint (class in neural_compressor.objective)": [[368, "neural_compressor.objective.Footprint"]], "modelsize (class in neural_compressor.objective)": [[368, "neural_compressor.objective.ModelSize"]], "multiobjective (class in neural_compressor.objective)": [[368, "neural_compressor.objective.MultiObjective"]], "objective (class in neural_compressor.objective)": [[368, "neural_compressor.objective.Objective"]], "performance (class in neural_compressor.objective)": [[368, "neural_compressor.objective.Performance"]], "neural_compressor.objective": [[368, "module-neural_compressor.objective"]], "objective_custom_registry() (in module neural_compressor.objective)": [[368, "neural_compressor.objective.objective_custom_registry"]], "objective_registry() (in module neural_compressor.objective)": [[368, "neural_compressor.objective.objective_registry"]], "neural_compressor.profiling": [[369, "module-neural_compressor.profiling"]], "parserfactory (class in neural_compressor.profiling.parser.factory)": [[370, "neural_compressor.profiling.parser.factory.ParserFactory"]], "neural_compressor.profiling.parser.factory": [[370, "module-neural_compressor.profiling.parser.factory"]], "neural_compressor.profiling.parser": [[371, "module-neural_compressor.profiling.parser"]], "onnxrtparserfactory (class in neural_compressor.profiling.parser.onnx_parser.factory)": [[372, "neural_compressor.profiling.parser.onnx_parser.factory.OnnxrtParserFactory"]], "neural_compressor.profiling.parser.onnx_parser.factory": [[372, "module-neural_compressor.profiling.parser.onnx_parser.factory"]], "neural_compressor.profiling.parser.onnx_parser": [[373, "module-neural_compressor.profiling.parser.onnx_parser"]], "onnxprofilingparser (class in neural_compressor.profiling.parser.onnx_parser.parser)": [[374, "neural_compressor.profiling.parser.onnx_parser.parser.OnnxProfilingParser"]], "neural_compressor.profiling.parser.onnx_parser.parser": [[374, "module-neural_compressor.profiling.parser.onnx_parser.parser"]], "profilingparser (class in neural_compressor.profiling.parser.parser)": [[375, "neural_compressor.profiling.parser.parser.ProfilingParser"]], "neural_compressor.profiling.parser.parser": [[375, "module-neural_compressor.profiling.parser.parser"]], "profilingresult (class in neural_compressor.profiling.parser.result)": [[376, "neural_compressor.profiling.parser.result.ProfilingResult"]], "neural_compressor.profiling.parser.result": [[376, "module-neural_compressor.profiling.parser.result"]], "tensorflowparserfactory (class in neural_compressor.profiling.parser.tensorflow_parser.factory)": [[377, "neural_compressor.profiling.parser.tensorflow_parser.factory.TensorFlowParserFactory"]], "neural_compressor.profiling.parser.tensorflow_parser.factory": [[377, "module-neural_compressor.profiling.parser.tensorflow_parser.factory"]], "neural_compressor.profiling.parser.tensorflow_parser": [[378, "module-neural_compressor.profiling.parser.tensorflow_parser"]], "tensorflowprofilingparser (class in neural_compressor.profiling.parser.tensorflow_parser.parser)": [[379, "neural_compressor.profiling.parser.tensorflow_parser.parser.TensorFlowProfilingParser"]], "neural_compressor.profiling.parser.tensorflow_parser.parser": [[379, "module-neural_compressor.profiling.parser.tensorflow_parser.parser"]], "profilerfactory (class in neural_compressor.profiling.profiler.factory)": [[380, "neural_compressor.profiling.profiler.factory.ProfilerFactory"]], "neural_compressor.profiling.profiler.factory": [[380, "module-neural_compressor.profiling.profiler.factory"]], "neural_compressor.profiling.profiler": [[381, "module-neural_compressor.profiling.profiler"]], "profilerfactory (class in neural_compressor.profiling.profiler.onnxrt_profiler.factory)": [[382, "neural_compressor.profiling.profiler.onnxrt_profiler.factory.ProfilerFactory"]], "neural_compressor.profiling.profiler.onnxrt_profiler.factory": [[382, "module-neural_compressor.profiling.profiler.onnxrt_profiler.factory"]], "neural_compressor.profiling.profiler.onnxrt_profiler": [[383, "module-neural_compressor.profiling.profiler.onnxrt_profiler"]], "profiler (class in neural_compressor.profiling.profiler.onnxrt_profiler.profiler)": [[384, "neural_compressor.profiling.profiler.onnxrt_profiler.profiler.Profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.profiler": [[384, "module-neural_compressor.profiling.profiler.onnxrt_profiler.profiler"]], "create_onnx_config() (in module neural_compressor.profiling.profiler.onnxrt_profiler.utils)": [[385, "neural_compressor.profiling.profiler.onnxrt_profiler.utils.create_onnx_config"]], "neural_compressor.profiling.profiler.onnxrt_profiler.utils": [[385, "module-neural_compressor.profiling.profiler.onnxrt_profiler.utils"]], "profiler (class in neural_compressor.profiling.profiler.profiler)": [[386, "neural_compressor.profiling.profiler.profiler.Profiler"]], "neural_compressor.profiling.profiler.profiler": [[386, "module-neural_compressor.profiling.profiler.profiler"]], "profilerfactory (class in neural_compressor.profiling.profiler.tensorflow_profiler.factory)": [[387, "neural_compressor.profiling.profiler.tensorflow_profiler.factory.ProfilerFactory"]], "neural_compressor.profiling.profiler.tensorflow_profiler.factory": [[387, "module-neural_compressor.profiling.profiler.tensorflow_profiler.factory"]], "neural_compressor.profiling.profiler.tensorflow_profiler": [[388, "module-neural_compressor.profiling.profiler.tensorflow_profiler"]], "profiler (class in neural_compressor.profiling.profiler.tensorflow_profiler.profiler)": [[389, "neural_compressor.profiling.profiler.tensorflow_profiler.profiler.Profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.profiler": [[389, "module-neural_compressor.profiling.profiler.tensorflow_profiler.profiler"]], "create_tf_config() (in module neural_compressor.profiling.profiler.tensorflow_profiler.utils)": [[390, "neural_compressor.profiling.profiler.tensorflow_profiler.utils.create_tf_config"]], "delete_assign() (in module neural_compressor.profiling.profiler.tensorflow_profiler.utils)": [[390, "neural_compressor.profiling.profiler.tensorflow_profiler.utils.delete_assign"]], "neural_compressor.profiling.profiler.tensorflow_profiler.utils": [[390, "module-neural_compressor.profiling.profiler.tensorflow_profiler.utils"]], "set_eager_execution() (in module neural_compressor.profiling.profiler.tensorflow_profiler.utils)": [[390, "neural_compressor.profiling.profiler.tensorflow_profiler.utils.set_eager_execution"]], "fit() (in module neural_compressor.quantization)": [[391, "neural_compressor.quantization.fit"]], "neural_compressor.quantization": [[391, "module-neural_compressor.quantization"]], "autotunestrategy (class in neural_compressor.strategy.auto)": [[392, "neural_compressor.strategy.auto.AutoTuneStrategy"]], "neural_compressor.strategy.auto": [[392, "module-neural_compressor.strategy.auto"]], "automixedprecisiontunestrategy (class in neural_compressor.strategy.auto_mixed_precision)": [[393, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[393, "module-neural_compressor.strategy.auto_mixed_precision"]], "basictunestrategy (class in neural_compressor.strategy.basic)": [[394, "neural_compressor.strategy.basic.BasicTuneStrategy"]], "neural_compressor.strategy.basic": [[394, "module-neural_compressor.strategy.basic"]], "bayesianoptimization (class in neural_compressor.strategy.bayesian)": [[395, "neural_compressor.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.strategy.bayesian)": [[395, "neural_compressor.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.strategy.bayesian)": [[395, "neural_compressor.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.strategy.bayesian)": [[395, "neural_compressor.strategy.bayesian.acq_max"]], "neural_compressor.strategy.bayesian": [[395, "module-neural_compressor.strategy.bayesian"]], "conservativetunestrategy (class in neural_compressor.strategy.conservative)": [[396, "neural_compressor.strategy.conservative.ConservativeTuneStrategy"]], "neural_compressor.strategy.conservative": [[396, "module-neural_compressor.strategy.conservative"]], "exhaustivetunestrategy (class in neural_compressor.strategy.exhaustive)": [[397, "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[397, "module-neural_compressor.strategy.exhaustive"]], "hawq_v2tunestrategy (class in neural_compressor.strategy.hawq_v2)": [[398, "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[398, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[399, "module-neural_compressor.strategy"]], "msetunestrategy (class in neural_compressor.strategy.mse)": [[400, "neural_compressor.strategy.mse.MSETuneStrategy"]], "neural_compressor.strategy.mse": [[400, "module-neural_compressor.strategy.mse"]], "mse_v2tunestrategy (class in neural_compressor.strategy.mse_v2)": [[401, "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.strategy.mse_v2": [[401, "module-neural_compressor.strategy.mse_v2"]], "randomtunestrategy (class in neural_compressor.strategy.random)": [[402, "neural_compressor.strategy.random.RandomTuneStrategy"]], "neural_compressor.strategy.random": [[402, "module-neural_compressor.strategy.random"]], "tunestrategy (class in neural_compressor.strategy.strategy)": [[403, "neural_compressor.strategy.strategy.TuneStrategy"]], "tunestrategymeta (class in neural_compressor.strategy.strategy)": [[403, "neural_compressor.strategy.strategy.TuneStrategyMeta"]], "neural_compressor.strategy.strategy": [[403, "module-neural_compressor.strategy.strategy"]], "strategy_registry() (in module neural_compressor.strategy.strategy)": [[403, "neural_compressor.strategy.strategy.strategy_registry"]], "neural_compressor.strategy.utils.constant": [[404, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[405, "module-neural_compressor.strategy.utils"]], "blockfallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[406, "neural_compressor.strategy.utils.tuning_sampler.BlockFallbackTuningSampler"]], "fallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[406, "neural_compressor.strategy.utils.tuning_sampler.FallbackTuningSampler"]], "lowerbitssampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[406, "neural_compressor.strategy.utils.tuning_sampler.LowerBitsSampler"]], "modelwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[406, "neural_compressor.strategy.utils.tuning_sampler.ModelWiseTuningSampler"]], "optypewisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[406, "neural_compressor.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler"]], "opwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[406, "neural_compressor.strategy.utils.tuning_sampler.OpWiseTuningSampler"]], "smoothquantsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[406, "neural_compressor.strategy.utils.tuning_sampler.SmoothQuantSampler"]], "tuningorder (class in neural_compressor.strategy.utils.tuning_sampler)": [[406, "neural_compressor.strategy.utils.tuning_sampler.TuningOrder"]], "tuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[406, "neural_compressor.strategy.utils.tuning_sampler.TuningSampler"]], "weightonlyquantsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[406, "neural_compressor.strategy.utils.tuning_sampler.WeightOnlyQuantSampler"]], "neural_compressor.strategy.utils.tuning_sampler": [[406, "module-neural_compressor.strategy.utils.tuning_sampler"]], "tuningitem (class in neural_compressor.strategy.utils.tuning_space)": [[407, "neural_compressor.strategy.utils.tuning_space.TuningItem"]], "tuningspace (class in neural_compressor.strategy.utils.tuning_space)": [[407, "neural_compressor.strategy.utils.tuning_space.TuningSpace"]], "initial_tuning_cfg_with_quant_mode() (in module neural_compressor.strategy.utils.tuning_space)": [[407, "neural_compressor.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode"]], "neural_compressor.strategy.utils.tuning_space": [[407, "module-neural_compressor.strategy.utils.tuning_space"]], "pattern_to_internal() (in module neural_compressor.strategy.utils.tuning_space)": [[407, "neural_compressor.strategy.utils.tuning_space.pattern_to_internal"]], "pattern_to_path() (in module neural_compressor.strategy.utils.tuning_space)": [[407, "neural_compressor.strategy.utils.tuning_space.pattern_to_path"]], "quant_mode_from_pattern() (in module neural_compressor.strategy.utils.tuning_space)": [[407, "neural_compressor.strategy.utils.tuning_space.quant_mode_from_pattern"]], "optuningconfig (class in neural_compressor.strategy.utils.tuning_structs)": [[408, "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig"]], "neural_compressor.strategy.utils.tuning_structs": [[408, "module-neural_compressor.strategy.utils.tuning_structs"]], "classregister (class in neural_compressor.strategy.utils.utility)": [[409, "neural_compressor.strategy.utils.utility.ClassRegister"]], "ordereddefaultdict (class in neural_compressor.strategy.utils.utility)": [[409, "neural_compressor.strategy.utils.utility.OrderedDefaultDict"]], "quantoptions (class in neural_compressor.strategy.utils.utility)": [[409, "neural_compressor.strategy.utils.utility.QuantOptions"]], "quanttype (class in neural_compressor.strategy.utils.utility)": [[409, "neural_compressor.strategy.utils.utility.QuantType"]], "build_slave_faker_model() (in module neural_compressor.strategy.utils.utility)": [[409, "neural_compressor.strategy.utils.utility.build_slave_faker_model"]], "extract_data_type() (in module neural_compressor.strategy.utils.utility)": [[409, "neural_compressor.strategy.utils.utility.extract_data_type"]], "get_adaptor_name() (in module neural_compressor.strategy.utils.utility)": [[409, "neural_compressor.strategy.utils.utility.get_adaptor_name"]], "neural_compressor.strategy.utils.utility": [[409, "module-neural_compressor.strategy.utils.utility"]], "preprocess_user_cfg() (in module neural_compressor.strategy.utils.utility)": [[409, "neural_compressor.strategy.utils.utility.preprocess_user_cfg"]], "reverted_data_type() (in module neural_compressor.strategy.utils.utility)": [[409, "neural_compressor.strategy.utils.utility.reverted_data_type"]], "exampleclass (class in neural_compressor.template.api_doc_example)": [[410, "neural_compressor.template.api_doc_example.ExampleClass"]], "attr1 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[410, "neural_compressor.template.api_doc_example.ExampleClass.attr1"]], "attr2 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[410, "neural_compressor.template.api_doc_example.ExampleClass.attr2"]], "attr5 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[410, "neural_compressor.template.api_doc_example.ExampleClass.attr5"]], "attribute1 (in module neural_compressor.template.api_doc_example)": [[410, "neural_compressor.template.api_doc_example.attribute1"]], "function1() (in module neural_compressor.template.api_doc_example)": [[410, "neural_compressor.template.api_doc_example.function1"]], "function2() (in module neural_compressor.template.api_doc_example)": [[410, "neural_compressor.template.api_doc_example.function2"]], "function3() (in module neural_compressor.template.api_doc_example)": [[410, "neural_compressor.template.api_doc_example.function3"]], "generator1() (in module neural_compressor.template.api_doc_example)": [[410, "neural_compressor.template.api_doc_example.generator1"]], "module_debug_level1 (in module neural_compressor.template.api_doc_example)": [[410, "neural_compressor.template.api_doc_example.module_debug_level1"]], "neural_compressor.template.api_doc_example": [[410, "module-neural_compressor.template.api_doc_example"]], "neural_compressor.template": [[411, "module-neural_compressor.template"]], "gptq (class in neural_compressor.torch.algorithms.gptq)": [[412, "neural_compressor.torch.algorithms.gptq.GPTQ"]], "gptquantizer (class in neural_compressor.torch.algorithms.gptq)": [[412, "neural_compressor.torch.algorithms.gptq.GPTQuantizer"]], "apply_gptq_quantize() (in module neural_compressor.torch.algorithms.gptq)": [[412, "neural_compressor.torch.algorithms.gptq.apply_gptq_quantize"]], "find_layers() (in module neural_compressor.torch.algorithms.gptq)": [[412, "neural_compressor.torch.algorithms.gptq.find_layers"]], "find_layers_name() (in module neural_compressor.torch.algorithms.gptq)": [[412, "neural_compressor.torch.algorithms.gptq.find_layers_name"]], "is_leaf() (in module neural_compressor.torch.algorithms.gptq)": [[412, "neural_compressor.torch.algorithms.gptq.is_leaf"]], "log_quantizable_layers_per_transformer() (in module neural_compressor.torch.algorithms.gptq)": [[412, "neural_compressor.torch.algorithms.gptq.log_quantizable_layers_per_transformer"]], "neural_compressor.torch.algorithms.gptq": [[412, "module-neural_compressor.torch.algorithms.gptq"]], "quantize() (in module neural_compressor.torch.algorithms.gptq)": [[412, "neural_compressor.torch.algorithms.gptq.quantize"]], "trace_gptq_target_blocks() (in module neural_compressor.torch.algorithms.gptq)": [[412, "neural_compressor.torch.algorithms.gptq.trace_gptq_target_blocks"]], "neural_compressor.torch.algorithms": [[413, "module-neural_compressor.torch.algorithms"]], "neural_compressor.torch.algorithms.rtn": [[414, "module-neural_compressor.torch.algorithms.rtn"]], "qdq_weight_actor() (in module neural_compressor.torch.algorithms.rtn)": [[414, "neural_compressor.torch.algorithms.rtn.qdq_weight_actor"]], "qdq_weight_asym() (in module neural_compressor.torch.algorithms.rtn)": [[414, "neural_compressor.torch.algorithms.rtn.qdq_weight_asym"]], "qdq_weight_sym() (in module neural_compressor.torch.algorithms.rtn)": [[414, "neural_compressor.torch.algorithms.rtn.qdq_weight_sym"]], "quant_weight() (in module neural_compressor.torch.algorithms.rtn)": [[414, "neural_compressor.torch.algorithms.rtn.quant_weight"]], "quantize_4bit() (in module neural_compressor.torch.algorithms.rtn)": [[414, "neural_compressor.torch.algorithms.rtn.quantize_4bit"]], "rtn_quantize() (in module neural_compressor.torch.algorithms.rtn)": [[414, "neural_compressor.torch.algorithms.rtn.rtn_quantize"]], "search_clip() (in module neural_compressor.torch.algorithms.rtn)": [[414, "neural_compressor.torch.algorithms.rtn.search_clip"]], "neural_compressor.torch.algorithms.weight_only_algos": [[415, "module-neural_compressor.torch.algorithms.weight_only_algos"]], "rtn_quantize_entry() (in module neural_compressor.torch.algorithms.weight_only_algos)": [[415, "neural_compressor.torch.algorithms.weight_only_algos.rtn_quantize_entry"]], "neural_compressor.torch": [[416, "module-neural_compressor.torch"]], "backend (class in neural_compressor.torch.quantization.config)": [[417, "neural_compressor.torch.quantization.config.Backend"]], "dummyconfig (class in neural_compressor.torch.quantization.config)": [[417, "neural_compressor.torch.quantization.config.DummyConfig"]], "gptqconfig (class in neural_compressor.torch.quantization.config)": [[417, "neural_compressor.torch.quantization.config.GPTQConfig"]], "rtnweightquantconfig (class in neural_compressor.torch.quantization.config)": [[417, "neural_compressor.torch.quantization.config.RTNWeightQuantConfig"]], "get_default_dummy_config() (in module neural_compressor.torch.quantization.config)": [[417, "neural_compressor.torch.quantization.config.get_default_dummy_config"]], "get_default_gptq_config() (in module neural_compressor.torch.quantization.config)": [[417, "neural_compressor.torch.quantization.config.get_default_gptq_config"]], "get_default_rtn_config() (in module neural_compressor.torch.quantization.config)": [[417, "neural_compressor.torch.quantization.config.get_default_rtn_config"]], "neural_compressor.torch.quantization.config": [[417, "module-neural_compressor.torch.quantization.config"]], "neural_compressor.torch.quantization": [[418, "module-neural_compressor.torch.quantization"]], "neural_compressor.torch.quantization.quantize": [[419, "module-neural_compressor.torch.quantization.quantize"]], "quantize() (in module neural_compressor.torch.quantization.quantize)": [[419, "neural_compressor.torch.quantization.quantize.quantize"]], "fetch_module() (in module neural_compressor.torch.utils)": [[420, "neural_compressor.torch.utils.fetch_module"]], "neural_compressor.torch.utils": [[420, "module-neural_compressor.torch.utils"]], "register_algo() (in module neural_compressor.torch.utils)": [[420, "neural_compressor.torch.utils.register_algo"]], "set_module() (in module neural_compressor.torch.utils)": [[420, "neural_compressor.torch.utils.set_module"]], "callbacks (class in neural_compressor.training)": [[421, "neural_compressor.training.CallBacks"]], "compressionmanager (class in neural_compressor.training)": [[421, "neural_compressor.training.CompressionManager"]], "fit() (in module neural_compressor.training)": [[421, "neural_compressor.training.fit"]], "neural_compressor.training": [[421, "module-neural_compressor.training"]], "prepare_compression() (in module neural_compressor.training)": [[421, "neural_compressor.training.prepare_compression"]], "layerhistogramcollector (class in neural_compressor.utils.collect_layer_histogram)": [[422, "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector"]], "neural_compressor.utils.collect_layer_histogram": [[422, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[423, "module-neural_compressor.utils.constant"]], "create_dataloader() (in module neural_compressor.utils.create_obj_from_config)": [[424, "neural_compressor.utils.create_obj_from_config.create_dataloader"]], "create_dataset() (in module neural_compressor.utils.create_obj_from_config)": [[424, "neural_compressor.utils.create_obj_from_config.create_dataset"]], "create_eval_func() (in module neural_compressor.utils.create_obj_from_config)": [[424, "neural_compressor.utils.create_obj_from_config.create_eval_func"]], "create_train_func() (in module neural_compressor.utils.create_obj_from_config)": [[424, "neural_compressor.utils.create_obj_from_config.create_train_func"]], "get_algorithm() (in module neural_compressor.utils.create_obj_from_config)": [[424, "neural_compressor.utils.create_obj_from_config.get_algorithm"]], "get_func_from_config() (in module neural_compressor.utils.create_obj_from_config)": [[424, "neural_compressor.utils.create_obj_from_config.get_func_from_config"]], "get_metrics() (in module neural_compressor.utils.create_obj_from_config)": [[424, "neural_compressor.utils.create_obj_from_config.get_metrics"]], "get_postprocess() (in module neural_compressor.utils.create_obj_from_config)": [[424, "neural_compressor.utils.create_obj_from_config.get_postprocess"]], "get_preprocess() (in module neural_compressor.utils.create_obj_from_config)": [[424, "neural_compressor.utils.create_obj_from_config.get_preprocess"]], "neural_compressor.utils.create_obj_from_config": [[424, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[425, "module-neural_compressor.utils"]], "kl_divergence (class in neural_compressor.utils.kl_divergence)": [[426, "neural_compressor.utils.kl_divergence.KL_Divergence"]], "neural_compressor.utils.kl_divergence": [[426, "module-neural_compressor.utils.kl_divergence"]], "optimizedmodel (class in neural_compressor.utils.load_huggingface)": [[427, "neural_compressor.utils.load_huggingface.OptimizedModel"]], "export_compressed_model() (in module neural_compressor.utils.load_huggingface)": [[427, "neural_compressor.utils.load_huggingface.export_compressed_model"]], "neural_compressor.utils.load_huggingface": [[427, "module-neural_compressor.utils.load_huggingface"]], "save_for_huggingface_upstream() (in module neural_compressor.utils.load_huggingface)": [[427, "neural_compressor.utils.load_huggingface.save_for_huggingface_upstream"]], "logger (class in neural_compressor.utils.logger)": [[428, "neural_compressor.utils.logger.Logger"]], "debug() (in module neural_compressor.utils.logger)": [[428, "neural_compressor.utils.logger.debug"]], "error() (in module neural_compressor.utils.logger)": [[428, "neural_compressor.utils.logger.error"]], "fatal() (in module neural_compressor.utils.logger)": [[428, "neural_compressor.utils.logger.fatal"]], "info() (in module neural_compressor.utils.logger)": [[428, "neural_compressor.utils.logger.info"]], "log() (in module neural_compressor.utils.logger)": [[428, "neural_compressor.utils.logger.log"]], "neural_compressor.utils.logger": [[428, "module-neural_compressor.utils.logger"]], "warn() (in module neural_compressor.utils.logger)": [[428, "neural_compressor.utils.logger.warn"]], "warning() (in module neural_compressor.utils.logger)": [[428, "neural_compressor.utils.logger.warning"]], "get_model_path() (in module neural_compressor.utils.neural_insights_utils)": [[429, "neural_compressor.utils.neural_insights_utils.get_model_path"]], "neural_compressor.utils.neural_insights_utils": [[429, "module-neural_compressor.utils.neural_insights_utils"]], "register_neural_insights_workload() (in module neural_compressor.utils.neural_insights_utils)": [[429, "neural_compressor.utils.neural_insights_utils.register_neural_insights_workload"]], "update_neural_insights_workload() (in module neural_compressor.utils.neural_insights_utils)": [[429, "neural_compressor.utils.neural_insights_utils.update_neural_insights_workload"]], "update_neural_insights_workload_accuracy_data() (in module neural_compressor.utils.neural_insights_utils)": [[429, "neural_compressor.utils.neural_insights_utils.update_neural_insights_workload_accuracy_data"]], "neural_compressor.utils.options": [[430, "module-neural_compressor.utils.options"]], "onnxrt (class in neural_compressor.utils.options)": [[430, "neural_compressor.utils.options.onnxrt"]], "is_int8_model() (in module neural_compressor.utils.pytorch)": [[431, "neural_compressor.utils.pytorch.is_int8_model"]], "load() (in module neural_compressor.utils.pytorch)": [[431, "neural_compressor.utils.pytorch.load"]], "load_weight_only() (in module neural_compressor.utils.pytorch)": [[431, "neural_compressor.utils.pytorch.load_weight_only"]], "neural_compressor.utils.pytorch": [[431, "module-neural_compressor.utils.pytorch"]], "recover_model_from_json() (in module neural_compressor.utils.pytorch)": [[431, "neural_compressor.utils.pytorch.recover_model_from_json"]], "captureoutputtofile (class in neural_compressor.utils.utility)": [[432, "neural_compressor.utils.utility.CaptureOutputToFile"]], "cpuinfo (class in neural_compressor.utils.utility)": [[432, "neural_compressor.utils.utility.CpuInfo"]], "dequantize() (in module neural_compressor.utils.utility)": [[432, "neural_compressor.utils.utility.Dequantize"]], "dotdict (class in neural_compressor.utils.utility)": [[432, "neural_compressor.utils.utility.DotDict"]], "global_state (class in neural_compressor.utils.utility)": [[432, "neural_compressor.utils.utility.GLOBAL_STATE"]], "lazyimport (class in neural_compressor.utils.utility)": [[432, "neural_compressor.utils.utility.LazyImport"]], "mode (class in neural_compressor.utils.utility)": [[432, "neural_compressor.utils.utility.MODE"]], "opentry (class in neural_compressor.utils.utility)": [[432, "neural_compressor.utils.utility.OpEntry"]], "statistics (class in neural_compressor.utils.utility)": [[432, "neural_compressor.utils.utility.Statistics"]], "alias_param() (in module neural_compressor.utils.utility)": [[432, "neural_compressor.utils.utility.alias_param"]], "calculate_mse() (in module neural_compressor.utils.utility)": [[432, "neural_compressor.utils.utility.calculate_mse"]], "check_key_exist() (in module neural_compressor.utils.utility)": [[432, "neural_compressor.utils.utility.check_key_exist"]], "combine_histogram() (in module neural_compressor.utils.utility)": [[432, "neural_compressor.utils.utility.combine_histogram"]], "compare_objects() (in module neural_compressor.utils.utility)": [[432, "neural_compressor.utils.utility.compare_objects"]], "compute_sparsity() (in module neural_compressor.utils.utility)": [[432, "neural_compressor.utils.utility.compute_sparsity"]], "dequantize_weight() (in module neural_compressor.utils.utility)": [[432, "neural_compressor.utils.utility.dequantize_weight"]], "dump_class_attrs() (in module neural_compressor.utils.utility)": [[432, "neural_compressor.utils.utility.dump_class_attrs"]], "dump_data_to_local() (in module neural_compressor.utils.utility)": [[432, "neural_compressor.utils.utility.dump_data_to_local"]], "dump_elapsed_time() (in module neural_compressor.utils.utility)": [[432, "neural_compressor.utils.utility.dump_elapsed_time"]], "dump_table() (in module neural_compressor.utils.utility)": [[432, "neural_compressor.utils.utility.dump_table"]], "dump_table_to_csv() (in module neural_compressor.utils.utility)": [[432, "neural_compressor.utils.utility.dump_table_to_csv"]], "equal_dicts() (in module neural_compressor.utils.utility)": [[432, "neural_compressor.utils.utility.equal_dicts"]], "fault_tolerant_file() (in module neural_compressor.utils.utility)": [[432, "neural_compressor.utils.utility.fault_tolerant_file"]], "get_all_fp32_data() (in module neural_compressor.utils.utility)": [[432, "neural_compressor.utils.utility.get_all_fp32_data"]], "get_number_of_sockets() (in module neural_compressor.utils.utility)": [[432, "neural_compressor.utils.utility.get_number_of_sockets"]], "get_op_list() (in module neural_compressor.utils.utility)": [[432, "neural_compressor.utils.utility.get_op_list"]], "get_size() (in module neural_compressor.utils.utility)": [[432, "neural_compressor.utils.utility.get_size"]], "get_tensor_histogram() (in module neural_compressor.utils.utility)": [[432, "neural_compressor.utils.utility.get_tensor_histogram"]], "get_tensors_info() (in module neural_compressor.utils.utility)": [[432, "neural_compressor.utils.utility.get_tensors_info"]], "get_tuning_history() (in module neural_compressor.utils.utility)": [[432, "neural_compressor.utils.utility.get_tuning_history"]], "get_weights_details() (in module neural_compressor.utils.utility)": [[432, "neural_compressor.utils.utility.get_weights_details"]], "load_data_from_pkl() (in module neural_compressor.utils.utility)": [[432, "neural_compressor.utils.utility.load_data_from_pkl"]], "mse_metric_gap() (in module neural_compressor.utils.utility)": [[432, "neural_compressor.utils.utility.mse_metric_gap"]], "neural_compressor.utils.utility": [[432, "module-neural_compressor.utils.utility"]], "print_op_list() (in module neural_compressor.utils.utility)": [[432, "neural_compressor.utils.utility.print_op_list"]], "print_table() (in module neural_compressor.utils.utility)": [[432, "neural_compressor.utils.utility.print_table"]], "recover() (in module neural_compressor.utils.utility)": [[432, "neural_compressor.utils.utility.recover"]], "set_random_seed() (in module neural_compressor.utils.utility)": [[432, "neural_compressor.utils.utility.set_random_seed"]], "set_resume_from() (in module neural_compressor.utils.utility)": [[432, "neural_compressor.utils.utility.set_resume_from"]], "set_tensorboard() (in module neural_compressor.utils.utility)": [[432, "neural_compressor.utils.utility.set_tensorboard"]], "set_workspace() (in module neural_compressor.utils.utility)": [[432, "neural_compressor.utils.utility.set_workspace"]], "show_memory_info() (in module neural_compressor.utils.utility)": [[432, "neural_compressor.utils.utility.show_memory_info"]], "singleton() (in module neural_compressor.utils.utility)": [[432, "neural_compressor.utils.utility.singleton"]], "str2array() (in module neural_compressor.utils.utility)": [[432, "neural_compressor.utils.utility.str2array"]], "time_limit() (in module neural_compressor.utils.utility)": [[432, "neural_compressor.utils.utility.time_limit"]], "version1_eq_version2() (in module neural_compressor.utils.utility)": [[432, "neural_compressor.utils.utility.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.utils.utility)": [[432, "neural_compressor.utils.utility.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.utils.utility)": [[432, "neural_compressor.utils.utility.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.utils.utility)": [[432, "neural_compressor.utils.utility.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.utils.utility)": [[432, "neural_compressor.utils.utility.version1_lte_version2"]], "weightsdetails (class in neural_compressor.utils.weights_details)": [[433, "neural_compressor.utils.weights_details.WeightsDetails"]], "weightsstatistics (class in neural_compressor.utils.weights_details)": [[433, "neural_compressor.utils.weights_details.WeightsStatistics"]], "neural_compressor.utils.weights_details": [[433, "module-neural_compressor.utils.weights_details"]], "neural_compressor.version": [[434, "module-neural_compressor.version"]]}})