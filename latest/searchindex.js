Search.setIndex({"docnames": ["autoapi/neural_compressor/algorithm/algorithm/index", "autoapi/neural_compressor/algorithm/fast_bias_correction/index", "autoapi/neural_compressor/algorithm/index", "autoapi/neural_compressor/algorithm/smooth_quant/index", "autoapi/neural_compressor/algorithm/weight_correction/index", "autoapi/neural_compressor/benchmark/index", "autoapi/neural_compressor/common/base_config/index", "autoapi/neural_compressor/common/base_tuning/index", "autoapi/neural_compressor/common/index", "autoapi/neural_compressor/common/tuning_param/index", "autoapi/neural_compressor/common/utils/constants/index", "autoapi/neural_compressor/common/utils/index", "autoapi/neural_compressor/common/utils/logger/index", "autoapi/neural_compressor/common/utils/save_load/index", "autoapi/neural_compressor/common/utils/utility/index", "autoapi/neural_compressor/config/index", "autoapi/neural_compressor/contrib/index", "autoapi/neural_compressor/contrib/strategy/index", "autoapi/neural_compressor/contrib/strategy/sigopt/index", "autoapi/neural_compressor/contrib/strategy/tpe/index", "autoapi/neural_compressor/data/datasets/bert_dataset/index", "autoapi/neural_compressor/data/datasets/coco_dataset/index", "autoapi/neural_compressor/data/datasets/dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/data/datasets/index", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/data/filters/coco_filter/index", "autoapi/neural_compressor/data/filters/filter/index", "autoapi/neural_compressor/data/filters/index", "autoapi/neural_compressor/data/index", "autoapi/neural_compressor/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/data/transforms/index", "autoapi/neural_compressor/data/transforms/postprocess/index", "autoapi/neural_compressor/data/transforms/tokenization/index", "autoapi/neural_compressor/data/transforms/transform/index", "autoapi/neural_compressor/index", "autoapi/neural_compressor/metric/bleu/index", "autoapi/neural_compressor/metric/bleu_util/index", "autoapi/neural_compressor/metric/coco_label_map/index", "autoapi/neural_compressor/metric/coco_tools/index", "autoapi/neural_compressor/metric/evaluate_squad/index", "autoapi/neural_compressor/metric/f1/index", "autoapi/neural_compressor/metric/index", "autoapi/neural_compressor/metric/metric/index", "autoapi/neural_compressor/mix_precision/index", "autoapi/neural_compressor/model/base_model/index", "autoapi/neural_compressor/model/index", "autoapi/neural_compressor/model/keras_model/index", "autoapi/neural_compressor/model/model/index", "autoapi/neural_compressor/model/mxnet_model/index", "autoapi/neural_compressor/model/nets_factory/index", "autoapi/neural_compressor/model/onnx_model/index", "autoapi/neural_compressor/model/tensorflow_model/index", "autoapi/neural_compressor/model/torch_model/index", "autoapi/neural_compressor/objective/index", "autoapi/neural_compressor/profiling/index", "autoapi/neural_compressor/quantization/index", "autoapi/neural_compressor/strategy/auto/index", "autoapi/neural_compressor/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/strategy/basic/index", "autoapi/neural_compressor/strategy/bayesian/index", "autoapi/neural_compressor/strategy/conservative/index", "autoapi/neural_compressor/strategy/exhaustive/index", "autoapi/neural_compressor/strategy/hawq_v2/index", "autoapi/neural_compressor/strategy/index", "autoapi/neural_compressor/strategy/mse/index", "autoapi/neural_compressor/strategy/mse_v2/index", "autoapi/neural_compressor/strategy/random/index", "autoapi/neural_compressor/strategy/strategy/index", "autoapi/neural_compressor/strategy/utils/constant/index", "autoapi/neural_compressor/strategy/utils/index", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/strategy/utils/tuning_space/index", "autoapi/neural_compressor/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/strategy/utils/utility/index", "autoapi/neural_compressor/tensorflow/index", "autoapi/neural_compressor/tensorflow/quantization/autotune/index", "autoapi/neural_compressor/tensorflow/quantization/config/index", "autoapi/neural_compressor/tensorflow/quantization/index", "autoapi/neural_compressor/tensorflow/quantization/quantize/index", "autoapi/neural_compressor/torch/export/index", "autoapi/neural_compressor/torch/export/pt2e_export/index", "autoapi/neural_compressor/torch/index", "autoapi/neural_compressor/torch/quantization/autotune/index", "autoapi/neural_compressor/torch/quantization/config/index", "autoapi/neural_compressor/torch/quantization/index", "autoapi/neural_compressor/torch/quantization/quantize/index", "autoapi/neural_compressor/training/index", "autoapi/neural_compressor/utils/collect_layer_histogram/index", "autoapi/neural_compressor/utils/constant/index", "autoapi/neural_compressor/utils/create_obj_from_config/index", "autoapi/neural_compressor/utils/export/index", "autoapi/neural_compressor/utils/export/qlinear2qdq/index", "autoapi/neural_compressor/utils/export/tf2onnx/index", "autoapi/neural_compressor/utils/export/torch2onnx/index", "autoapi/neural_compressor/utils/index", "autoapi/neural_compressor/utils/kl_divergence/index", "autoapi/neural_compressor/utils/load_huggingface/index", "autoapi/neural_compressor/utils/logger/index", "autoapi/neural_compressor/utils/options/index", "autoapi/neural_compressor/utils/pytorch/index", "autoapi/neural_compressor/utils/utility/index", "autoapi/neural_compressor/utils/weights_details/index", "autoapi/neural_compressor/version/index", "docs/build_docs/source/index", "docs/source/2x_user_guide", "docs/source/3x/PT_DynamicQuant", "docs/source/3x/PT_MXQuant", "docs/source/3x/PT_MixedPrecision", "docs/source/3x/PT_SmoothQuant", "docs/source/3x/PT_StaticQuant", "docs/source/3x/PT_WeightOnlyQuant", "docs/source/3x/PyTorch", "docs/source/3x/TF_Quant", "docs/source/3x/TF_SQ", "docs/source/3x/TensorFlow", "docs/source/3x/autotune", "docs/source/3x/benchmark", "docs/source/3x/client_quant", "docs/source/3x/design", "docs/source/3x/llm_recipes", "docs/source/3x/quantization", "docs/source/CODE_OF_CONDUCT", "docs/source/CONTRIBUTING", "docs/source/FX", "docs/source/SECURITY", "docs/source/Welcome", "docs/source/adaptor", "docs/source/add_new_adaptor", "docs/source/add_new_data_type", "docs/source/api-doc/adaptor", "docs/source/api-doc/adaptor/onnxrt", "docs/source/api-doc/adaptor/torch_utils", "docs/source/api-doc/api_2", "docs/source/api-doc/api_3", "docs/source/api-doc/api_doc_example", "docs/source/api-doc/apis", "docs/source/api-doc/benchmark", "docs/source/api-doc/compression", "docs/source/api-doc/config", "docs/source/api-doc/mix_precision", "docs/source/api-doc/model", "docs/source/api-doc/objective", "docs/source/api-doc/quantization", "docs/source/api-doc/strategy", "docs/source/api-doc/tf_quantization_autotune", "docs/source/api-doc/tf_quantization_common", "docs/source/api-doc/tf_quantization_config", "docs/source/api-doc/torch_quantization_autotune", "docs/source/api-doc/torch_quantization_common", "docs/source/api-doc/torch_quantization_config", "docs/source/api-doc/training", "docs/source/benchmark", "docs/source/calibration", "docs/source/coding_style", "docs/source/dataloader", "docs/source/design", "docs/source/distillation_quantization", "docs/source/distributed", "docs/source/examples_readme", "docs/source/export", "docs/source/faq", "docs/source/framework_yaml", "docs/source/get_started", "docs/source/incompatible_changes", "docs/source/infrastructure", "docs/source/installation_guide", "docs/source/legal_information", "docs/source/llm_recipes", "docs/source/metric", "docs/source/migration", "docs/source/mixed_precision", "docs/source/model", "docs/source/mx_quantization", "docs/source/objective", "docs/source/orchestration", "docs/source/pruning", "docs/source/publication_list", "docs/source/quantization", "docs/source/quantization_layer_wise", "docs/source/quantization_mixed_precision", "docs/source/quantization_weight_only", "docs/source/releases_info", "docs/source/sigopt_strategy", "docs/source/smooth_quant", "docs/source/transform", "docs/source/tuning_strategies", "docs/source/validated_model_list", "index"], "filenames": ["autoapi/neural_compressor/algorithm/algorithm/index.rst", "autoapi/neural_compressor/algorithm/fast_bias_correction/index.rst", "autoapi/neural_compressor/algorithm/index.rst", "autoapi/neural_compressor/algorithm/smooth_quant/index.rst", "autoapi/neural_compressor/algorithm/weight_correction/index.rst", "autoapi/neural_compressor/benchmark/index.rst", "autoapi/neural_compressor/common/base_config/index.rst", "autoapi/neural_compressor/common/base_tuning/index.rst", "autoapi/neural_compressor/common/index.rst", "autoapi/neural_compressor/common/tuning_param/index.rst", "autoapi/neural_compressor/common/utils/constants/index.rst", "autoapi/neural_compressor/common/utils/index.rst", "autoapi/neural_compressor/common/utils/logger/index.rst", "autoapi/neural_compressor/common/utils/save_load/index.rst", "autoapi/neural_compressor/common/utils/utility/index.rst", "autoapi/neural_compressor/config/index.rst", "autoapi/neural_compressor/contrib/index.rst", "autoapi/neural_compressor/contrib/strategy/index.rst", "autoapi/neural_compressor/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/data/datasets/index.rst", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/data/filters/filter/index.rst", "autoapi/neural_compressor/data/filters/index.rst", "autoapi/neural_compressor/data/index.rst", "autoapi/neural_compressor/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/data/transforms/index.rst", "autoapi/neural_compressor/data/transforms/postprocess/index.rst", "autoapi/neural_compressor/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/data/transforms/transform/index.rst", "autoapi/neural_compressor/index.rst", "autoapi/neural_compressor/metric/bleu/index.rst", "autoapi/neural_compressor/metric/bleu_util/index.rst", "autoapi/neural_compressor/metric/coco_label_map/index.rst", "autoapi/neural_compressor/metric/coco_tools/index.rst", "autoapi/neural_compressor/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/metric/f1/index.rst", "autoapi/neural_compressor/metric/index.rst", "autoapi/neural_compressor/metric/metric/index.rst", "autoapi/neural_compressor/mix_precision/index.rst", "autoapi/neural_compressor/model/base_model/index.rst", "autoapi/neural_compressor/model/index.rst", "autoapi/neural_compressor/model/keras_model/index.rst", "autoapi/neural_compressor/model/model/index.rst", "autoapi/neural_compressor/model/mxnet_model/index.rst", "autoapi/neural_compressor/model/nets_factory/index.rst", "autoapi/neural_compressor/model/onnx_model/index.rst", "autoapi/neural_compressor/model/tensorflow_model/index.rst", "autoapi/neural_compressor/model/torch_model/index.rst", "autoapi/neural_compressor/objective/index.rst", "autoapi/neural_compressor/profiling/index.rst", "autoapi/neural_compressor/quantization/index.rst", "autoapi/neural_compressor/strategy/auto/index.rst", "autoapi/neural_compressor/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/strategy/basic/index.rst", "autoapi/neural_compressor/strategy/bayesian/index.rst", "autoapi/neural_compressor/strategy/conservative/index.rst", "autoapi/neural_compressor/strategy/exhaustive/index.rst", "autoapi/neural_compressor/strategy/hawq_v2/index.rst", "autoapi/neural_compressor/strategy/index.rst", "autoapi/neural_compressor/strategy/mse/index.rst", "autoapi/neural_compressor/strategy/mse_v2/index.rst", "autoapi/neural_compressor/strategy/random/index.rst", "autoapi/neural_compressor/strategy/strategy/index.rst", "autoapi/neural_compressor/strategy/utils/constant/index.rst", "autoapi/neural_compressor/strategy/utils/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/strategy/utils/utility/index.rst", "autoapi/neural_compressor/tensorflow/index.rst", "autoapi/neural_compressor/tensorflow/quantization/autotune/index.rst", "autoapi/neural_compressor/tensorflow/quantization/config/index.rst", "autoapi/neural_compressor/tensorflow/quantization/index.rst", "autoapi/neural_compressor/tensorflow/quantization/quantize/index.rst", "autoapi/neural_compressor/torch/export/index.rst", "autoapi/neural_compressor/torch/export/pt2e_export/index.rst", "autoapi/neural_compressor/torch/index.rst", "autoapi/neural_compressor/torch/quantization/autotune/index.rst", "autoapi/neural_compressor/torch/quantization/config/index.rst", "autoapi/neural_compressor/torch/quantization/index.rst", "autoapi/neural_compressor/torch/quantization/quantize/index.rst", "autoapi/neural_compressor/training/index.rst", "autoapi/neural_compressor/utils/collect_layer_histogram/index.rst", "autoapi/neural_compressor/utils/constant/index.rst", "autoapi/neural_compressor/utils/create_obj_from_config/index.rst", "autoapi/neural_compressor/utils/export/index.rst", "autoapi/neural_compressor/utils/export/qlinear2qdq/index.rst", "autoapi/neural_compressor/utils/export/tf2onnx/index.rst", "autoapi/neural_compressor/utils/export/torch2onnx/index.rst", "autoapi/neural_compressor/utils/index.rst", "autoapi/neural_compressor/utils/kl_divergence/index.rst", "autoapi/neural_compressor/utils/load_huggingface/index.rst", "autoapi/neural_compressor/utils/logger/index.rst", "autoapi/neural_compressor/utils/options/index.rst", "autoapi/neural_compressor/utils/pytorch/index.rst", "autoapi/neural_compressor/utils/utility/index.rst", "autoapi/neural_compressor/utils/weights_details/index.rst", "autoapi/neural_compressor/version/index.rst", "docs/build_docs/source/index.rst", "docs/source/2x_user_guide.md", "docs/source/3x/PT_DynamicQuant.md", "docs/source/3x/PT_MXQuant.md", "docs/source/3x/PT_MixedPrecision.md", "docs/source/3x/PT_SmoothQuant.md", "docs/source/3x/PT_StaticQuant.md", "docs/source/3x/PT_WeightOnlyQuant.md", "docs/source/3x/PyTorch.md", "docs/source/3x/TF_Quant.md", "docs/source/3x/TF_SQ.md", "docs/source/3x/TensorFlow.md", "docs/source/3x/autotune.md", "docs/source/3x/benchmark.md", "docs/source/3x/client_quant.md", "docs/source/3x/design.md", "docs/source/3x/llm_recipes.md", "docs/source/3x/quantization.md", "docs/source/CODE_OF_CONDUCT.md", "docs/source/CONTRIBUTING.md", "docs/source/FX.md", "docs/source/SECURITY.md", "docs/source/Welcome.md", "docs/source/adaptor.md", "docs/source/add_new_adaptor.md", "docs/source/add_new_data_type.md", "docs/source/api-doc/adaptor.rst", "docs/source/api-doc/adaptor/onnxrt.rst", "docs/source/api-doc/adaptor/torch_utils.rst", "docs/source/api-doc/api_2.rst", "docs/source/api-doc/api_3.rst", "docs/source/api-doc/api_doc_example.rst", "docs/source/api-doc/apis.rst", "docs/source/api-doc/benchmark.rst", "docs/source/api-doc/compression.rst", "docs/source/api-doc/config.rst", "docs/source/api-doc/mix_precision.rst", "docs/source/api-doc/model.rst", "docs/source/api-doc/objective.rst", "docs/source/api-doc/quantization.rst", "docs/source/api-doc/strategy.rst", "docs/source/api-doc/tf_quantization_autotune.rst", "docs/source/api-doc/tf_quantization_common.rst", "docs/source/api-doc/tf_quantization_config.rst", "docs/source/api-doc/torch_quantization_autotune.rst", "docs/source/api-doc/torch_quantization_common.rst", "docs/source/api-doc/torch_quantization_config.rst", "docs/source/api-doc/training.rst", "docs/source/benchmark.md", "docs/source/calibration.md", "docs/source/coding_style.md", "docs/source/dataloader.md", "docs/source/design.md", "docs/source/distillation_quantization.md", "docs/source/distributed.md", "docs/source/examples_readme.md", "docs/source/export.md", "docs/source/faq.md", "docs/source/framework_yaml.md", "docs/source/get_started.md", "docs/source/incompatible_changes.md", "docs/source/infrastructure.md", "docs/source/installation_guide.md", "docs/source/legal_information.md", "docs/source/llm_recipes.md", "docs/source/metric.md", "docs/source/migration.md", "docs/source/mixed_precision.md", "docs/source/model.md", "docs/source/mx_quantization.md", "docs/source/objective.md", "docs/source/orchestration.md", "docs/source/pruning.md", "docs/source/publication_list.md", "docs/source/quantization.md", "docs/source/quantization_layer_wise.md", "docs/source/quantization_mixed_precision.md", "docs/source/quantization_weight_only.md", "docs/source/releases_info.md", "docs/source/sigopt_strategy.md", "docs/source/smooth_quant.md", "docs/source/transform.md", "docs/source/tuning_strategies.md", "docs/source/validated_model_list.md", "index.rst"], "titles": ["neural_compressor.algorithm.algorithm", "neural_compressor.algorithm.fast_bias_correction", "neural_compressor.algorithm", "neural_compressor.algorithm.smooth_quant", "neural_compressor.algorithm.weight_correction", "neural_compressor.benchmark", "neural_compressor.common.base_config", "neural_compressor.common.base_tuning", "neural_compressor.common", "neural_compressor.common.tuning_param", "neural_compressor.common.utils.constants", "neural_compressor.common.utils", "neural_compressor.common.utils.logger", "neural_compressor.common.utils.save_load", "neural_compressor.common.utils.utility", "neural_compressor.config", "neural_compressor.contrib", "neural_compressor.contrib.strategy", "neural_compressor.contrib.strategy.sigopt", "neural_compressor.contrib.strategy.tpe", "neural_compressor.data.datasets.bert_dataset", "neural_compressor.data.datasets.coco_dataset", "neural_compressor.data.datasets.dataset", "neural_compressor.data.datasets.dummy_dataset", "neural_compressor.data.datasets.dummy_dataset_v2", "neural_compressor.data.datasets.imagenet_dataset", "neural_compressor.data.datasets", "neural_compressor.data.datasets.style_transfer_dataset", "neural_compressor.data.filters.coco_filter", "neural_compressor.data.filters.filter", "neural_compressor.data.filters", "neural_compressor.data", "neural_compressor.data.transforms.imagenet_transform", "neural_compressor.data.transforms", "neural_compressor.data.transforms.postprocess", "neural_compressor.data.transforms.tokenization", "neural_compressor.data.transforms.transform", "neural_compressor", "neural_compressor.metric.bleu", "neural_compressor.metric.bleu_util", "neural_compressor.metric.coco_label_map", "neural_compressor.metric.coco_tools", "neural_compressor.metric.evaluate_squad", "neural_compressor.metric.f1", "neural_compressor.metric", "neural_compressor.metric.metric", "neural_compressor.mix_precision", "neural_compressor.model.base_model", "neural_compressor.model", "neural_compressor.model.keras_model", "neural_compressor.model.model", "neural_compressor.model.mxnet_model", "neural_compressor.model.nets_factory", "neural_compressor.model.onnx_model", "neural_compressor.model.tensorflow_model", "neural_compressor.model.torch_model", "neural_compressor.objective", "neural_compressor.profiling", "neural_compressor.quantization", "neural_compressor.strategy.auto", "neural_compressor.strategy.auto_mixed_precision", "neural_compressor.strategy.basic", "neural_compressor.strategy.bayesian", "neural_compressor.strategy.conservative", "neural_compressor.strategy.exhaustive", "neural_compressor.strategy.hawq_v2", "neural_compressor.strategy", "neural_compressor.strategy.mse", "neural_compressor.strategy.mse_v2", "neural_compressor.strategy.random", "neural_compressor.strategy.strategy", "neural_compressor.strategy.utils.constant", "neural_compressor.strategy.utils", "neural_compressor.strategy.utils.tuning_sampler", "neural_compressor.strategy.utils.tuning_space", "neural_compressor.strategy.utils.tuning_structs", "neural_compressor.strategy.utils.utility", "neural_compressor.tensorflow", "neural_compressor.tensorflow.quantization.autotune", "neural_compressor.tensorflow.quantization.config", "neural_compressor.tensorflow.quantization", "neural_compressor.tensorflow.quantization.quantize", "neural_compressor.torch.export", "neural_compressor.torch.export.pt2e_export", "neural_compressor.torch", "neural_compressor.torch.quantization.autotune", "neural_compressor.torch.quantization.config", "neural_compressor.torch.quantization", "neural_compressor.torch.quantization.quantize", "neural_compressor.training", "neural_compressor.utils.collect_layer_histogram", "neural_compressor.utils.constant", "neural_compressor.utils.create_obj_from_config", "neural_compressor.utils.export", "neural_compressor.utils.export.qlinear2qdq", "neural_compressor.utils.export.tf2onnx", "neural_compressor.utils.export.torch2onnx", "neural_compressor.utils", "neural_compressor.utils.kl_divergence", "neural_compressor.utils.load_huggingface", "neural_compressor.utils.logger", "neural_compressor.utils.options", "neural_compressor.utils.pytorch", "neural_compressor.utils.utility", "neural_compressor.utils.weights_details", "neural_compressor.version", "Intel\u00ae Neural Compressor Documentation", "2.X API User Guide", "Dynamic Quantization", "Microscaling Quantization", "PyTorch Mixed Precision", "PyTorch Smooth Quantization", "PyTorch Static Quantization", "PyTorch Weight Only Quantization", "Torch", "TensorFlow Quantization", "Smooth Quant", "TensorFlow", "AutoTune", "Benchmark", "Quantization on Client", "Design", "&lt;no title&gt;", "Quantization", "Contributor Covenant Code of Conduct", "Contribution Guidelines", "FX", "Security Policy", "Intel\u00ae Neural Compressor", "Adaptor", "How to Add An Adaptor", "How to Support New Data Type, Like Int4, with a Few Line Changes", "Adaptor", "ONNX Runtime", "Torch Utils", "2.0 API", "3.0 API", "API Document Example", "APIs", "Benchmark", "Compression", "Config", "Mix Precision", "Model", "Objective", "Quantization", "Strategy", "Tensorflow Quantization AutoTune", "Tensorflow Quantization Base API", "Tensorflow Quantization Config", "Pytorch Quantization AutoTune", "Pytorch Quantization Base API", "Pytorch Quantization Config", "Training", "Benchmarking", "Calibration Algorithms in Quantization", "INC Coding Conventions", "DataLoader", "Design", "Distillation for Quantization", "Distributed Training and Inference (Evaluation)", "Examples", "Export", "Frequently Asked Questions", "Framework YAML Configuration Files", "Getting Started", "Incompatible changes between v1.2 and v1.1", "Infrastructure of Intel\u00ae Neural Compressor", "Installation", "Legal Information", "LLMs Quantization Recipes", "Metrics", "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X", "Mixed Precision", "Model", "Microscaling Quantization", "Objective", "Optimization Orchestration", "Pruning", "Full Publications/Events (82)", "Quantization", "Layer Wise Quantization (LWQ)", "Turn OFF Auto Mixed Precision during Quantization", "Weight Only Quantization (WOQ)", "Release", "SigOpt Strategy", "Smooth Quant", "Transform", "Tuning Strategies", "Validated Models", "Intel\u00ae Neural Compressor Documentation"], "terms": {"regist": [0, 6, 22, 29, 36, 45, 56, 70, 76, 129, 156, 160, 171, 172, 176, 186, 188], "algorithm_registri": 0, "algorithm_typ": 0, "locat": [0, 36, 112, 117, 160, 180, 184, 187], "sourc": [0, 1, 3, 4, 5, 6, 7, 9, 10, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 32, 34, 35, 36, 37, 38, 39, 41, 42, 43, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 73, 74, 75, 76, 78, 79, 81, 83, 85, 86, 88, 89, 90, 92, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 126, 128, 169, 172, 179], "decor": [0, 6, 14, 36, 45, 56, 70, 103, 126, 129, 188], "all": [0, 2, 5, 6, 10, 15, 22, 29, 36, 38, 41, 43, 45, 47, 56, 70, 76, 85, 92, 96, 103, 111, 114, 117, 118, 120, 123, 124, 125, 128, 129, 130, 131, 156, 157, 160, 164, 168, 172, 177, 178, 179, 180, 182, 183, 186, 187, 188], "subclass": [0, 22, 29, 36, 45, 56, 70, 129], "paramet": [0, 5, 6, 7, 9, 13, 14, 15, 18, 19, 20, 22, 29, 32, 36, 38, 39, 41, 42, 43, 45, 46, 50, 54, 56, 58, 62, 70, 74, 76, 81, 83, 85, 86, 88, 89, 92, 94, 95, 96, 99, 100, 102, 103, 109, 111, 112, 113, 116, 117, 119, 123, 126, 130, 157, 160, 167, 171, 172, 175, 178, 180, 181, 183, 185, 186, 187, 188], "cl": [0, 14, 22, 29, 36, 45, 56, 70, 103, 156], "The": [0, 5, 6, 7, 8, 9, 11, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 28, 29, 36, 38, 39, 40, 42, 43, 45, 46, 54, 56, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 74, 76, 78, 81, 83, 85, 86, 88, 89, 90, 92, 98, 99, 102, 103, 104, 107, 108, 109, 110, 112, 113, 114, 116, 117, 118, 123, 124, 126, 129, 130, 131, 132, 134, 140, 143, 146, 154, 155, 156, 157, 160, 162, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189], "str": [0, 6, 9, 13, 14, 15, 20, 21, 22, 29, 32, 36, 38, 39, 41, 43, 45, 73, 76, 78, 79, 81, 83, 86, 92, 95, 96, 99, 103, 104, 113, 114, 117, 156, 157, 171, 187], "registr": [0, 22, 29, 36], "name": [0, 5, 6, 7, 9, 13, 15, 20, 21, 22, 25, 29, 34, 36, 40, 45, 50, 54, 56, 58, 74, 76, 90, 92, 94, 95, 96, 103, 109, 112, 113, 114, 115, 125, 126, 131, 156, 160, 162, 164, 169, 171, 172, 174, 175, 178, 180, 184, 185, 188, 189], "call": [0, 14, 41, 117, 120, 123, 126, 129, 157, 166, 178, 180, 186, 187], "return": [0, 5, 6, 13, 14, 18, 19, 22, 29, 32, 36, 38, 39, 41, 42, 43, 45, 46, 50, 54, 56, 58, 62, 70, 74, 76, 79, 81, 83, 85, 86, 88, 89, 92, 96, 102, 103, 110, 114, 115, 118, 123, 126, 130, 131, 157, 160, 171, 174, 176, 178, 180, 183, 186, 188], "type": [0, 6, 7, 9, 13, 14, 15, 20, 22, 29, 36, 38, 39, 41, 45, 54, 56, 62, 63, 70, 74, 76, 81, 83, 85, 86, 96, 102, 103, 107, 109, 110, 111, 112, 113, 114, 115, 117, 120, 129, 130, 160, 162, 164, 167, 172, 173, 175, 180, 181, 183, 185, 187, 188], "build": [0, 1, 3, 4, 49, 51, 53, 54, 55, 117, 129, 130, 131, 168, 174, 179, 188], "dict": [0, 5, 13, 15, 18, 19, 40, 41, 42, 43, 45, 46, 54, 58, 73, 76, 79, 83, 85, 86, 88, 89, 90, 92, 94, 96, 102, 103, 113, 114, 115, 120, 126, 130, 156, 162, 171, 178, 180, 186, 188], "algorithmschedul": 0, "conf": [0, 5, 15, 18, 19, 46, 56, 58, 59, 61, 62, 63, 67, 70, 74, 89, 126, 128, 131, 154, 166, 172, 173, 174, 177, 180, 181, 182, 183, 185, 186, 188], "control": [0, 15, 126, 172, 178, 188], "differ": [0, 4, 6, 9, 10, 15, 22, 36, 45, 54, 56, 98, 113, 114, 117, 120, 123, 124, 126, 130, 157, 160, 161, 165, 166, 167, 171, 172, 174, 176, 178, 180, 183, 186, 187, 188], "phase": [0, 117, 123, 172, 178, 180, 182, 188], "base": [0, 6, 7, 14, 15, 20, 22, 29, 36, 45, 47, 54, 55, 56, 67, 70, 74, 81, 86, 88, 108, 110, 111, 113, 114, 118, 120, 123, 129, 130, 131, 136, 156, 159, 160, 164, 172, 173, 178, 179, 180, 183, 185, 186, 188, 189], "fastbiascorrect": [1, 4], "threshold": [1, 90, 98, 171], "2": [1, 3, 5, 7, 15, 21, 41, 43, 45, 56, 62, 103, 108, 109, 111, 112, 113, 115, 116, 117, 118, 119, 120, 123, 126, 128, 129, 138, 155, 157, 164, 165, 167, 168, 169, 170, 171, 173, 175, 176, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188], "0": [1, 3, 6, 7, 15, 20, 23, 24, 27, 32, 36, 45, 56, 58, 63, 79, 86, 96, 99, 109, 110, 111, 113, 116, 118, 119, 123, 126, 128, 138, 156, 157, 160, 162, 163, 164, 165, 168, 169, 170, 171, 172, 173, 175, 178, 180, 181, 183, 184, 185, 186, 187, 188], "channel_axi": [1, 4], "1": [1, 3, 4, 5, 7, 15, 20, 21, 23, 24, 27, 28, 32, 36, 41, 42, 43, 45, 56, 58, 76, 86, 92, 99, 103, 107, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 123, 124, 126, 128, 129, 131, 155, 157, 162, 164, 168, 170, 171, 173, 175, 176, 177, 178, 180, 181, 183, 184, 185, 186, 187, 188], "fetch": [2, 130], "file": [2, 13, 15, 18, 19, 20, 21, 22, 25, 35, 36, 41, 46, 56, 58, 102, 103, 113, 119, 125, 129, 130, 131, 160, 163, 166, 169, 171, 172, 174, 176, 180, 183, 187], "init": [2, 171, 188], "fast_bias_correct": [2, 15, 180], "smooth_quant": [2, 15, 156, 180, 186], "weight_correct": [2, 15, 180], "smoothquant": [3, 86, 107, 111, 113, 114, 116, 123, 170, 179, 183], "alpha": [3, 79, 86, 123, 156, 180, 188], "5": [3, 7, 15, 24, 32, 45, 58, 79, 86, 111, 113, 116, 123, 129, 162, 164, 168, 171, 172, 178, 180, 183, 186, 187, 188, 189], "fake": [3, 9, 76, 113, 123, 172, 180, 183, 186], "input": [3, 15, 18, 19, 20, 21, 22, 24, 32, 35, 36, 45, 46, 50, 54, 58, 83, 88, 89, 94, 95, 96, 99, 102, 103, 108, 112, 113, 114, 123, 129, 130, 154, 155, 157, 159, 160, 162, 164, 166, 171, 172, 173, 174, 178, 180, 183, 186, 187], "channel": [3, 4, 15, 32, 36, 99, 109, 111, 113, 128, 129, 131, 167, 168, 175, 178, 183, 187, 189], "quantiz": [3, 5, 7, 10, 12, 14, 15, 18, 19, 32, 37, 63, 65, 67, 76, 77, 82, 83, 84, 89, 90, 96, 98, 99, 102, 103, 107, 110, 116, 118, 121, 129, 135, 136, 156, 157, 160, 161, 164, 165, 166, 167, 171, 174, 177, 179, 184, 187, 188], "more": [3, 9, 36, 86, 107, 109, 110, 111, 113, 114, 117, 123, 127, 128, 130, 155, 156, 160, 162, 167, 168, 170, 172, 173, 175, 176, 177, 178, 182, 183, 186, 188, 189], "detail": [3, 6, 36, 86, 103, 104, 107, 110, 111, 113, 114, 115, 116, 117, 123, 124, 128, 130, 131, 155, 156, 164, 166, 170, 171, 172, 173, 178, 183, 184, 185, 186, 188], "pleas": [3, 15, 20, 21, 22, 25, 45, 58, 107, 110, 111, 112, 113, 114, 115, 116, 123, 126, 127, 128, 129, 154, 155, 159, 160, 162, 168, 170, 171, 173, 178, 180, 182, 183, 184, 185, 186, 188], "refer": [3, 15, 20, 38, 39, 45, 58, 86, 110, 111, 112, 114, 115, 116, 117, 126, 128, 129, 130, 154, 157, 159, 160, 162, 166, 168, 169, 171, 172, 173, 176, 181, 184, 187, 188], "accur": [3, 86, 112, 113, 123, 178, 183, 186], "effici": [3, 112, 120, 123, 128, 155, 157, 177, 178, 179, 183, 186, 188], "post": [3, 15, 18, 19, 58, 86, 109, 111, 112, 113, 114, 116, 118, 123, 124, 128, 129, 130, 159, 160, 162, 167, 168, 175, 178, 179, 181, 183, 186, 188], "train": [3, 15, 18, 19, 20, 22, 36, 37, 58, 86, 92, 109, 110, 111, 112, 113, 114, 116, 118, 128, 129, 130, 135, 159, 162, 165, 167, 173, 175, 177, 179, 181, 183, 185, 186, 188], "larg": [3, 109, 111, 113, 114, 116, 117, 123, 128, 157, 172, 175, 179, 181, 183, 186, 189], "languag": [3, 38, 109, 111, 113, 114, 116, 117, 123, 124, 128, 162, 175, 179, 181, 183, 186], "model": [3, 5, 7, 9, 15, 18, 19, 20, 22, 36, 37, 45, 46, 56, 58, 59, 61, 62, 63, 67, 70, 76, 78, 81, 83, 85, 88, 89, 94, 95, 96, 99, 102, 103, 105, 107, 108, 109, 110, 113, 114, 115, 116, 117, 120, 123, 125, 126, 128, 129, 131, 135, 154, 155, 156, 157, 159, 160, 161, 165, 166, 167, 169, 171, 173, 176, 177, 179, 180, 184, 185, 187, 188], "spiq": [3, 123, 186], "data": [3, 14, 15, 18, 19, 37, 46, 58, 62, 74, 76, 81, 89, 92, 96, 103, 107, 108, 109, 110, 112, 113, 114, 117, 123, 128, 129, 155, 157, 160, 164, 168, 171, 172, 173, 175, 180, 182, 183, 184, 185, 186, 187, 188], "free": [3, 18, 19, 58, 111, 116, 123, 124, 176, 185, 186], "per": [3, 5, 15, 98, 109, 111, 113, 119, 129, 131, 157, 175, 178, 182, 183, 189], "static": [3, 15, 58, 74, 79, 86, 88, 96, 114, 129, 130, 131, 162, 165, 167, 172, 181, 186, 188, 189], "For": [3, 7, 9, 13, 15, 22, 36, 42, 43, 45, 46, 58, 86, 103, 111, 113, 114, 115, 116, 120, 123, 124, 126, 127, 129, 131, 159, 160, 162, 164, 165, 167, 178, 182, 183, 186, 188, 189], "torch": [3, 7, 13, 15, 37, 46, 58, 96, 99, 102, 108, 109, 110, 111, 112, 113, 118, 120, 123, 126, 128, 131, 132, 160, 162, 165, 172, 173, 174, 175, 180, 183, 186], "backend": [3, 15, 16, 17, 20, 21, 23, 24, 25, 26, 27, 31, 33, 36, 46, 47, 48, 50, 68, 86, 110, 113, 114, 126, 131, 160, 166, 167, 172, 173, 183, 187, 188], "we": [3, 4, 5, 7, 15, 38, 41, 65, 107, 108, 111, 112, 113, 114, 116, 117, 118, 119, 120, 123, 124, 126, 128, 129, 130, 131, 156, 157, 160, 162, 164, 165, 170, 171, 172, 176, 177, 178, 180, 181, 183, 184, 185, 186, 188], "onli": [3, 4, 5, 15, 20, 58, 68, 76, 86, 96, 103, 107, 110, 114, 118, 119, 129, 130, 131, 154, 155, 156, 157, 160, 163, 164, 165, 170, 172, 173, 178, 179, 180, 181, 186, 188], "handl": [3, 12, 100, 126, 127, 156, 157, 186], "layer": [3, 15, 90, 92, 103, 107, 111, 112, 114, 123, 129, 130, 131, 159, 167, 178, 183, 184], "whose": [3, 54, 166, 186, 188], "smooth": [3, 15, 79, 86, 114, 128, 156, 165, 178, 188], "scale": [3, 4, 32, 36, 108, 109, 111, 112, 113, 117, 123, 175, 180, 183, 185, 186, 187, 188], "could": [3, 18, 19, 22, 46, 58, 89, 107, 110, 112, 113, 115, 117, 123, 124, 126, 159, 172, 177, 178, 180, 183, 186], "absorb": [3, 113, 183], "support": [3, 6, 15, 18, 19, 20, 22, 29, 32, 36, 37, 45, 46, 50, 56, 58, 68, 74, 89, 92, 98, 99, 103, 105, 107, 108, 112, 115, 118, 123, 128, 130, 156, 165, 170, 172, 179, 182, 185, 188], "other": [3, 43, 54, 109, 114, 117, 123, 124, 126, 128, 130, 131, 136, 156, 164, 165, 167, 169, 172, 174, 175, 176, 178, 180, 186, 187, 188, 189], "later": [3, 108, 156], "onnx": [3, 15, 46, 53, 94, 95, 96, 101, 125, 128, 129, 130, 132, 157, 161, 162, 164, 167, 173, 174, 175, 179, 183, 186, 188], "insert": [3, 88, 112, 113, 114, 116, 123, 126, 130, 157, 167, 172, 178, 180, 182, 183, 186], "mul": [3, 113, 162, 183, 186], "befor": [3, 15, 20, 113, 123, 125, 131, 157, 159, 160, 163, 164, 172, 180, 183, 185, 188], "conv": [3, 15, 126, 130, 131, 172, 178, 180, 188], "linear": [3, 15, 111, 112, 113, 123, 126, 162, 172, 178, 183, 186, 188], "op": [3, 15, 63, 65, 67, 74, 75, 76, 94, 96, 98, 103, 110, 111, 114, 123, 128, 129, 130, 131, 164, 172, 173, 178, 180, 182, 184, 186, 188], "fuse": [3, 126, 186], "kernel": [3, 15, 113, 129, 130, 188], "futur": [3, 7, 18, 19, 107, 114, 167, 170, 172], "weightcorrect": 4, "ep": [4, 173], "1e": [4, 123, 186], "05": [4, 15, 45, 171, 186, 189], "correct": [4, 15, 41, 42, 43, 45, 124], "int8": [4, 5, 15, 32, 74, 76, 79, 86, 94, 95, 96, 102, 103, 109, 111, 113, 114, 115, 117, 123, 125, 126, 129, 130, 131, 154, 159, 164, 170, 172, 173, 175, 179, 180, 182, 183, 184, 185, 186, 187], "weight": [4, 7, 15, 45, 58, 65, 74, 76, 86, 96, 103, 104, 107, 108, 111, 112, 114, 115, 116, 117, 118, 129, 130, 131, 155, 159, 164, 165, 166, 170, 172, 176, 178, 179, 180, 181, 186, 188], "distribut": [4, 15, 98, 107, 113, 117, 123, 130, 157, 168, 179, 180, 183, 184, 186, 189], "close": [4, 155], "fp32": [4, 15, 18, 19, 45, 63, 67, 74, 81, 92, 95, 96, 99, 102, 103, 110, 111, 112, 113, 114, 115, 117, 123, 125, 129, 131, 164, 170, 171, 172, 173, 180, 182, 183, 184, 185, 186, 188, 189], "r": [4, 111, 112, 113, 115, 117, 119, 123, 168, 180, 189], "w_int8": 4, "u": 4, "w_fp32": 4, "i": [4, 5, 7, 9, 14, 15, 18, 19, 20, 21, 22, 23, 24, 27, 29, 32, 36, 38, 41, 43, 45, 46, 56, 58, 63, 68, 76, 83, 86, 89, 99, 102, 103, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 123, 124, 125, 126, 128, 129, 130, 131, 132, 134, 140, 143, 146, 154, 155, 156, 157, 159, 160, 162, 163, 164, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189], "varianc": 4, "ratio": [4, 15, 32, 36, 170, 172, 178, 187, 189], "between": [4, 15, 36, 42, 45, 103, 109, 113, 114, 117, 123, 126, 129, 130, 131, 155, 167, 171, 172, 175, 180, 183, 184, 185, 186, 187, 188], "wise": [4, 15, 62, 63, 67, 107, 130, 167, 178, 183, 186, 188], "": [4, 6, 15, 22, 35, 36, 43, 45, 46, 50, 58, 103, 107, 108, 110, 111, 112, 113, 115, 117, 119, 123, 124, 125, 130, 131, 156, 160, 162, 164, 165, 167, 172, 173, 177, 178, 179, 180, 183, 184, 185, 186, 188, 189], "equal": [4, 103, 109, 175, 178, 183], "minim": [4, 62, 112, 113, 117, 123, 130, 131, 155, 161, 171, 172, 178, 180, 188], "round": [4, 86, 108, 113, 114, 123, 128, 179, 180, 183, 186], "scale_c": 4, "shift": [4, 32, 187], "notic": [4, 110, 113, 169, 173, 184], "can": [4, 15, 18, 19, 22, 36, 41, 43, 45, 46, 56, 58, 88, 89, 103, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 123, 126, 128, 129, 130, 131, 154, 156, 157, 159, 160, 162, 164, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 185, 186, 187, 188, 189], "chang": [4, 15, 65, 88, 103, 114, 125, 130, 157, 160, 163, 169, 172, 178, 187, 188], "first": [4, 6, 15, 20, 41, 63, 74, 103, 109, 110, 113, 119, 123, 126, 128, 129, 130, 131, 168, 173, 175, 180, 182, 183, 185, 186, 188], "an": [4, 15, 22, 36, 37, 38, 42, 43, 46, 58, 89, 103, 105, 109, 110, 111, 112, 113, 114, 116, 117, 118, 123, 124, 126, 128, 129, 131, 155, 157, 158, 162, 170, 171, 172, 173, 175, 176, 178, 179, 180, 183, 185, 186, 187, 188], "empir": 4, "solut": [4, 111, 113, 116, 123, 128, 129, 130, 163, 179, 183, 184, 186, 188], "make": [4, 103, 110, 111, 113, 116, 123, 124, 129, 130, 154, 156, 157, 164, 171, 172, 178, 180, 181, 182, 183, 185, 186, 188], "thi": [4, 6, 7, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 27, 36, 38, 41, 42, 43, 45, 46, 56, 58, 62, 67, 76, 89, 102, 103, 107, 110, 111, 112, 113, 115, 116, 117, 118, 123, 124, 125, 126, 129, 130, 131, 155, 156, 157, 159, 160, 162, 163, 164, 167, 168, 169, 170, 171, 172, 173, 174, 178, 180, 182, 183, 184, 185, 186, 187, 188], "don": [4, 15, 111, 112, 126, 178, 188], "t": [4, 15, 36, 43, 110, 111, 112, 117, 119, 126, 129, 156, 160, 172, 173, 178, 180, 183, 188], "min": [4, 15, 103, 109, 113, 117, 123, 175, 178, 180, 183, 186, 187, 188], "max": [4, 15, 36, 42, 43, 62, 86, 103, 109, 113, 117, 123, 128, 168, 172, 175, 178, 180, 183, 186, 187, 188], "valu": [4, 5, 15, 18, 19, 20, 23, 24, 32, 36, 41, 45, 46, 58, 62, 67, 74, 76, 89, 90, 92, 103, 108, 109, 110, 111, 113, 116, 117, 123, 126, 130, 131, 155, 164, 171, 172, 173, 175, 176, 178, 180, 183, 186, 187, 188], "us": [5, 6, 14, 15, 18, 19, 20, 21, 22, 23, 24, 27, 35, 36, 38, 39, 41, 45, 56, 58, 62, 65, 67, 70, 74, 76, 81, 85, 88, 89, 90, 91, 92, 95, 96, 97, 99, 103, 109, 110, 111, 112, 113, 114, 115, 117, 118, 120, 123, 124, 125, 126, 128, 129, 130, 154, 155, 156, 159, 160, 162, 164, 165, 166, 168, 169, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189], "evalu": [5, 7, 18, 19, 20, 38, 41, 42, 43, 45, 46, 56, 58, 85, 89, 92, 114, 116, 117, 118, 123, 129, 130, 156, 159, 166, 167, 170, 171, 172, 173, 176, 178, 180, 185, 186, 188], "perform": [5, 15, 20, 32, 45, 56, 58, 63, 67, 108, 110, 112, 113, 115, 117, 118, 119, 120, 123, 125, 126, 128, 129, 130, 154, 158, 159, 161, 162, 165, 167, 168, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 186, 188, 189], "set_env_var": 5, "env_var": 5, "overwrite_exist": 5, "fals": [5, 15, 20, 22, 32, 36, 41, 45, 56, 58, 79, 86, 92, 99, 102, 103, 111, 113, 115, 117, 118, 119, 129, 130, 157, 164, 171, 172, 180, 183, 186, 187, 188], "set": [5, 6, 7, 14, 15, 18, 19, 20, 22, 25, 36, 41, 45, 46, 54, 58, 85, 86, 89, 103, 110, 111, 113, 114, 115, 116, 118, 119, 120, 123, 124, 128, 130, 154, 157, 160, 162, 164, 166, 167, 171, 172, 173, 178, 180, 183, 185, 186, 188], "specifi": [5, 9, 15, 18, 19, 36, 41, 45, 46, 58, 86, 89, 102, 103, 120, 123, 130, 131, 160, 164, 171, 172, 176, 178, 183, 187, 188], "environ": [5, 110, 114, 120, 124, 128, 154, 188], "variabl": [5, 15, 22, 62, 76, 110, 120, 178, 188], "new": [5, 14, 22, 36, 56, 107, 110, 111, 112, 113, 123, 125, 130, 160, 172, 173, 178, 179, 180, 183, 184, 185, 187], "env": [5, 163], "two": [5, 22, 27, 41, 68, 103, 109, 110, 112, 113, 116, 118, 121, 123, 125, 126, 156, 157, 160, 162, 164, 172, 173, 175, 178, 180, 182, 183, 185, 186, 188], "case": [5, 15, 35, 36, 56, 107, 113, 117, 123, 131, 156, 157, 159, 160, 164, 166, 171, 176, 178, 179, 180, 183, 184, 186, 187, 189], "exist": [5, 54, 103, 110, 114, 162, 171, 188], "alreadi": [5, 22, 35, 110, 114, 129, 167, 188], "param": [5, 9, 45, 62, 103, 129, 174, 188], "true": [5, 7, 15, 20, 22, 23, 35, 36, 39, 45, 56, 58, 73, 79, 86, 88, 92, 96, 99, 102, 103, 108, 111, 112, 113, 114, 115, 117, 118, 119, 123, 128, 130, 157, 160, 164, 171, 172, 180, 181, 183, 186, 187, 188], "set_all_env_var": 5, "configur": [5, 6, 7, 14, 15, 18, 19, 22, 25, 45, 46, 56, 58, 67, 76, 81, 86, 88, 89, 91, 92, 96, 101, 102, 114, 118, 120, 126, 129, 130, 172, 176, 178, 180, 183, 184, 186, 187, 188, 189], "neural": [5, 15, 32, 33, 36, 37, 44, 45, 46, 50, 57, 58, 65, 66, 72, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 93, 105, 107, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 121, 123, 125, 129, 130, 131, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 169, 170, 173, 174, 175, 176, 177, 179, 180, 183, 184, 186, 187, 188, 189], "compressor": [5, 15, 32, 33, 36, 37, 44, 45, 46, 50, 57, 58, 66, 72, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 93, 105, 107, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 121, 123, 125, 129, 130, 131, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 169, 170, 173, 174, 175, 176, 177, 178, 179, 180, 183, 184, 186, 187, 188, 189], "physic": [5, 124, 154], "core": [5, 15, 113, 119, 120, 125, 128, 154, 168, 169, 189], "get_architectur": 5, "get": [5, 14, 15, 36, 45, 54, 58, 67, 74, 76, 86, 92, 96, 99, 103, 107, 111, 114, 119, 123, 130, 155, 163, 167, 168, 170, 172, 179, 183, 186, 188, 190], "architectur": [5, 107, 110, 113, 120, 123, 128, 154, 165, 172, 178, 179, 183], "system": [5, 103, 109, 110, 120, 154, 175, 178, 189], "get_threads_per_cor": 5, "thread": [5, 15, 157], "get_thread": 5, "list": [5, 6, 7, 9, 15, 18, 19, 20, 32, 36, 38, 39, 41, 42, 43, 45, 46, 54, 58, 73, 79, 81, 85, 86, 89, 90, 95, 96, 103, 111, 114, 116, 117, 126, 128, 129, 162, 164, 168, 170, 172, 176, 178, 180, 182, 186, 188], "get_physical_id": 5, "socket": [5, 103, 189], "get_core_id": 5, "id": [5, 35, 38, 40, 41, 42, 43, 171, 185, 188], "get_bounded_thread": 5, "core_id": 5, "bind": [5, 120], "instanc": [5, 15, 18, 19, 42, 43, 45, 46, 58, 62, 76, 89, 103, 113, 119, 124, 125, 126, 129, 154, 165, 172, 183, 188, 189], "run_inst": 5, "b_dataload": [5, 15, 154, 172], "none": [5, 6, 7, 9, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 27, 32, 36, 41, 45, 46, 56, 58, 59, 61, 62, 63, 67, 70, 74, 78, 79, 81, 83, 85, 86, 88, 89, 90, 92, 95, 96, 99, 102, 103, 109, 113, 114, 117, 119, 128, 129, 130, 157, 171, 175, 180, 183, 187, 188], "b_func": [5, 154], "run": [5, 15, 18, 19, 35, 46, 58, 62, 89, 110, 113, 114, 117, 119, 120, 123, 128, 129, 154, 160, 163, 164, 172, 179, 180, 183, 184, 185, 188], "object": [5, 7, 13, 15, 18, 19, 20, 21, 22, 36, 37, 41, 45, 46, 54, 55, 58, 62, 76, 89, 92, 102, 103, 107, 112, 114, 117, 126, 130, 135, 154, 156, 157, 163, 171, 172, 174, 177, 178, 180, 187, 188, 189], "benchmarkconfig": [5, 15, 154, 172], "contain": [5, 15, 18, 19, 20, 21, 22, 41, 42, 43, 46, 58, 89, 92, 96, 102, 107, 113, 117, 128, 155, 167, 171, 178, 183, 188], "accuraci": [5, 7, 15, 18, 19, 45, 46, 56, 58, 63, 89, 109, 111, 112, 113, 117, 118, 120, 126, 128, 130, 131, 155, 157, 159, 160, 161, 162, 165, 171, 172, 175, 176, 177, 178, 179, 183, 184, 185, 186, 189], "goal": [5, 46, 58, 118, 123, 130, 157, 177, 180, 188], "tune": [5, 6, 7, 9, 12, 15, 18, 19, 20, 22, 46, 56, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 73, 74, 75, 76, 78, 85, 86, 89, 103, 110, 111, 112, 113, 114, 118, 121, 128, 129, 130, 155, 156, 157, 160, 165, 167, 169, 172, 173, 176, 178, 179, 182, 184, 185], "prefer": [5, 58, 113, 123, 178, 183], "calibr": [5, 15, 18, 19, 58, 81, 85, 88, 98, 107, 112, 113, 114, 117, 123, 129, 131, 166, 167, 178, 180, 183, 188], "space": [5, 15, 18, 19, 43, 46, 58, 62, 67, 74, 114, 118, 123, 124, 125, 129, 130, 131, 156, 178, 180, 186], "etc": [5, 35, 43, 46, 58, 102, 128, 167, 178, 185, 188], "dataload": [5, 18, 19, 20, 31, 58, 89, 92, 107, 117, 126, 128, 129, 130, 159, 160, 166, 172, 173, 177, 178, 180, 181, 182, 183, 186, 187], "framework": [5, 6, 10, 16, 17, 20, 21, 22, 23, 24, 25, 26, 27, 29, 31, 33, 36, 45, 46, 47, 48, 50, 68, 74, 92, 107, 110, 112, 117, 118, 123, 128, 129, 131, 155, 156, 160, 161, 165, 166, 167, 168, 171, 172, 173, 178, 179, 180, 187, 188, 189], "custom": [5, 45, 56, 102, 114, 118, 123, 154, 159, 178, 179, 183, 185], "If": [5, 7, 9, 15, 18, 19, 22, 36, 46, 58, 83, 89, 114, 117, 123, 125, 126, 130, 154, 156, 157, 160, 168, 169, 171, 172, 176, 178, 180, 183, 185, 186, 187, 188], "user": [5, 15, 18, 19, 22, 25, 29, 36, 45, 46, 56, 58, 63, 76, 86, 89, 103, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 123, 126, 129, 130, 131, 135, 154, 156, 157, 159, 162, 164, 167, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 186, 187, 188], "pass": [5, 14, 45, 58, 102, 103, 113, 123, 125, 126, 129, 154, 159, 160, 166, 171, 172, 178, 180, 182, 186], "need": [5, 9, 15, 18, 19, 22, 29, 36, 45, 46, 56, 58, 67, 89, 96, 102, 103, 113, 116, 118, 120, 123, 126, 129, 156, 157, 160, 167, 172, 178, 180, 181, 182, 183, 184, 186, 187, 188], "generate_prefix": 5, "core_list": 5, "gener": [5, 7, 14, 18, 19, 22, 23, 24, 25, 36, 38, 46, 58, 62, 79, 85, 86, 89, 109, 110, 111, 113, 114, 115, 120, 123, 125, 126, 129, 131, 157, 171, 172, 173, 175, 176, 178, 179, 180, 182, 183, 186, 187, 188], "command": [5, 89, 119, 120, 160], "prefix": 5, "numactl": [5, 163], "index": [5, 15, 22, 103, 123, 171, 183, 186], "bound": [5, 36, 41, 62, 171, 187], "specif": [5, 6, 15, 20, 21, 22, 23, 27, 29, 45, 58, 109, 110, 112, 113, 114, 117, 120, 124, 129, 130, 155, 156, 157, 164, 166, 170, 171, 172, 173, 174, 175, 176, 178, 183, 188], "call_on": 5, "cmd": [5, 168], "log_fil": 5, "execut": [5, 10, 15, 58, 59, 61, 89, 92, 102, 103, 112, 113, 123, 159, 172, 173, 177, 178, 180, 183, 185, 188, 189], "one": [5, 36, 38, 41, 45, 110, 113, 114, 117, 118, 119, 123, 129, 155, 159, 160, 164, 167, 168, 171, 172, 173, 176, 177, 178, 180, 181, 183, 184, 186, 187, 188], "dump": [5, 96, 103, 117, 123, 125, 180], "log": [5, 12, 14, 100, 119, 126, 185, 188], "window": [5, 119, 120, 154, 168], "config_inst": 5, "raw_cmd": 5, "multi": [5, 41, 45, 58, 119, 157, 167, 172, 176, 178, 180, 188], "trigger": [5, 119], "sub": [5, 156, 188], "process": [5, 7, 12, 14, 15, 18, 19, 20, 21, 22, 32, 36, 46, 58, 59, 61, 62, 89, 102, 103, 108, 109, 112, 113, 116, 117, 118, 120, 123, 129, 130, 131, 155, 157, 159, 160, 162, 172, 175, 177, 178, 180, 181, 183, 186, 187], "raw": [5, 21, 25, 28, 67, 171, 188], "summary_benchmark": 5, "summari": [5, 89, 189], "profil": [5, 15, 37], "benchmark_with_raw_cmd": 5, "string": [5, 14, 15, 22, 38, 41, 50, 54, 92, 103, 117, 171, 187], "exampl": [5, 6, 7, 9, 13, 15, 20, 21, 22, 32, 36, 41, 42, 43, 45, 46, 56, 58, 76, 83, 89, 102, 103, 107, 111, 117, 118, 120, 124, 128, 130, 131, 135, 165, 166, 167, 182, 184, 187, 188, 190], "accord": [5, 15, 20, 21, 22, 36, 65, 67, 92, 117, 118, 123, 129, 160, 178, 182, 186, 187, 188], "config": [5, 6, 7, 9, 13, 14, 18, 19, 20, 37, 46, 74, 75, 76, 80, 81, 85, 87, 88, 89, 92, 102, 103, 108, 110, 112, 113, 114, 115, 128, 130, 131, 135, 136, 154, 156, 157, 159, 160, 162, 167, 171, 172, 173, 174, 177, 178, 180, 182, 183, 185, 188], "from": [5, 6, 7, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 27, 32, 38, 41, 42, 43, 46, 54, 56, 58, 74, 76, 89, 92, 94, 95, 96, 99, 102, 103, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 123, 124, 125, 126, 129, 131, 154, 156, 157, 159, 160, 161, 162, 163, 165, 167, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188], "import": [5, 7, 14, 15, 46, 56, 58, 89, 103, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 123, 126, 128, 131, 154, 157, 159, 160, 162, 165, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 184, 185, 186, 187, 188], "fit_with_raw_cmd": 5, "iter": [5, 15, 18, 19, 22, 23, 46, 58, 81, 86, 89, 92, 113, 117, 118, 126, 129, 154, 157, 172, 178, 180, 186, 188], "100": [5, 6, 7, 15, 22, 78, 81, 117, 123, 154, 160, 166, 168, 172, 180, 187, 188, 189], "cores_per_inst": [5, 15, 154, 172], "4": [5, 15, 29, 32, 36, 38, 39, 41, 76, 86, 108, 109, 111, 112, 113, 114, 119, 123, 124, 128, 129, 131, 154, 160, 161, 164, 167, 168, 171, 172, 175, 178, 180, 183, 186, 187, 188, 189], "num_of_inst": [5, 15, 154, 172], "7": [5, 15, 56, 111, 113, 116, 123, 131, 154, 163, 164, 172, 178, 180, 184, 186, 188, 189], "test": [5, 15, 36, 125, 128, 189], "py": [5, 15, 39, 41, 42, 43, 115, 119, 120, 126, 129, 156, 160, 168, 172, 180, 184], "fit": [5, 15, 46, 58, 62, 89, 126, 128, 154, 157, 160, 166, 171, 172, 173, 174, 178, 180, 181, 182, 183], "pb": [5, 15, 46, 54, 58, 117, 154, 160, 172, 174, 189], "eval_dataload": [5, 15, 18, 19, 46, 58, 59, 61, 62, 63, 67, 70, 89, 154, 166, 171, 172, 180, 181, 188], "configregistri": [6, 13], "A": [6, 7, 12, 14, 15, 22, 36, 38, 41, 42, 43, 45, 46, 50, 54, 62, 89, 103, 111, 113, 114, 123, 125, 130, 156, 157, 161, 164, 170, 171, 172, 174, 178, 179, 180, 183, 186, 187, 188], "registri": 6, "manag": [6, 89, 92, 172], "algorithm": [6, 9, 15, 37, 38, 45, 86, 92, 98, 113, 114, 117, 118, 120, 123, 128, 129, 130, 131, 156, 159, 164, 165, 167, 170, 178, 180], "within": [6, 7, 41, 54, 110, 124, 126, 131, 155, 173, 178, 179, 183, 186, 188], "register_config": [6, 156], "framework_nam": [6, 156], "algo_nam": [6, 156], "prioriti": [6, 156], "float": [6, 15, 20, 32, 39, 41, 42, 43, 73, 79, 86, 88, 103, 108, 109, 110, 111, 112, 113, 115, 116, 118, 123, 156, 171, 175, 180, 186, 187], "int": [6, 9, 14, 15, 20, 21, 32, 36, 39, 41, 45, 76, 78, 81, 86, 95, 96, 99, 103, 113, 117, 128, 156, 157, 171, 172, 183, 187], "usag": [6, 7, 9, 41, 114, 115, 120, 123, 130, 160, 161, 176, 183, 187], "examplealgorithm": 6, "examplealgorithmconfig": 6, "larger": [6, 113, 123, 130, 178, 183, 186], "number": [6, 7, 14, 15, 21, 32, 36, 42, 43, 45, 62, 92, 103, 108, 113, 118, 119, 123, 154, 157, 160, 171, 178, 180, 183, 185, 186, 187, 188], "indic": [6, 15, 20, 41, 117, 126, 157, 163], "higher": [6, 15, 18, 19, 46, 58, 89, 120, 123, 126, 162, 171, 178, 180, 183, 185], "which": [6, 15, 20, 21, 22, 32, 38, 43, 45, 50, 56, 58, 62, 103, 107, 110, 112, 113, 114, 115, 117, 118, 123, 124, 126, 128, 129, 130, 131, 155, 157, 160, 163, 164, 167, 171, 172, 173, 174, 177, 178, 180, 181, 182, 183, 184, 186, 187, 188], "tri": [6, 15, 156, 188], "auto": [6, 7, 15, 60, 66, 78, 85, 86, 103, 111, 114, 121, 126, 128, 155, 165, 178, 180, 183], "stage": [6, 14, 59, 61, 68, 178, 188], "default": [6, 9, 14, 15, 18, 19, 20, 21, 22, 32, 36, 38, 45, 54, 76, 79, 83, 85, 86, 88, 92, 95, 96, 99, 103, 109, 110, 111, 113, 114, 117, 118, 119, 120, 126, 129, 156, 157, 164, 167, 171, 172, 173, 175, 176, 178, 180, 182, 183, 185, 186, 187, 188], "baseconfig": [6, 7, 9, 81, 85, 88, 114, 117, 156], "white_list": [6, 79, 86], "util": [6, 7, 8, 15, 37, 39, 66, 78, 81, 86, 107, 117, 120, 130, 131, 132, 155, 156, 160, 172, 178, 180, 188], "op_name_or_module_typ": [6, 79, 86], "default_white_list": [6, 79, 86], "params_list": [6, 9], "tunabl": [6, 9], "composableconfig": [6, 156], "repres": [6, 7, 9, 10, 22, 27, 41, 43, 45, 112, 113, 117, 123, 124, 131, 155, 162, 178, 180, 181, 188], "compos": [6, 36, 92, 187], "allow": [6, 62, 110, 112, 113, 118, 160, 171, 172, 173, 178, 183, 186, 188], "multipl": [6, 16, 17, 20, 21, 23, 24, 25, 26, 27, 31, 33, 36, 46, 47, 48, 50, 56, 117, 154, 162, 165, 172, 177, 178, 185, 186, 188], "togeth": [6, 15, 36, 168, 179, 187], "oper": [6, 9, 15, 32, 108, 110, 111, 112, 113, 114, 115, 116, 123, 126, 154, 157, 162, 178, 180, 183, 186, 187, 188], "config_list": [6, 7], "get_all_config_set_from_config_registri": [6, 156], "fwk_name": [6, 156], "retriev": [6, 12, 178], "given": [6, 36, 41, 58, 88, 114, 118, 131, 178, 186, 187], "union": [6, 45, 83, 85, 86, 89, 114, 117, 171], "register_supported_configs_for_fwk": 6, "evaluationfuncwrapp": 7, "eval_fn": [7, 78, 85, 110, 114, 115, 116, 117, 118], "callabl": [7, 15, 43, 78, 81, 85, 86, 88, 89, 114, 117, 156, 157], "eval_arg": [7, 78, 85, 110, 114, 115, 117], "wrapper": [7, 36, 41, 45, 50, 54, 117, 182], "collect": [7, 34, 36, 43, 45, 90, 103, 117, 123, 130, 180, 188], "note": [7, 41, 68, 107, 108, 110, 111, 112, 113, 116, 119, 123, 128, 130, 131, 156, 157, 160, 162, 164, 165, 168, 170, 172, 178, 180, 183, 186, 188], "deprec": [7, 156, 184, 187], "def": [7, 18, 19, 58, 89, 110, 111, 114, 115, 117, 118, 123, 126, 129, 156, 157, 159, 160, 171, 172, 180, 186, 188], "eval_acc": 7, "eval_perf": 7, "mold": 7, "user_eval_fns1": 7, "user_eval_fns2": 7, "user_eval_fns3": 7, "user_eval_fns4": 7, "configset": 7, "base_config": [7, 8, 79, 81, 85, 88], "sampler": [7, 73, 86, 113, 118, 157, 160], "config_sourc": 7, "sequentialsampl": 7, "size": [7, 22, 28, 32, 36, 54, 56, 103, 109, 112, 113, 123, 124, 130, 157, 160, 163, 172, 175, 176, 178, 180, 181, 183, 186, 187, 189], "sampl": [7, 15, 20, 21, 22, 32, 36, 45, 62, 113, 117, 118, 119, 123, 157, 161, 167, 180, 183, 186, 187, 188, 189], "element": [7, 41, 103, 109, 113, 123, 167, 171, 175, 178, 183, 186], "sequenti": [7, 59, 61, 118, 188], "alwai": [7, 41, 45, 58, 118, 171, 172, 183], "same": [7, 15, 20, 36, 41, 103, 109, 113, 118, 119, 123, 129, 131, 154, 157, 160, 164, 172, 175, 178, 180, 183, 186, 187, 188], "order": [7, 38, 39, 62, 67, 76, 113, 118, 123, 126, 171, 183, 186, 188], "_configset": 7, "configload": 7, "config_set": [7, 110, 115, 116, 117, 118], "default_sampl": [7, 118], "skip_verified_config": 7, "bool": [7, 14, 15, 20, 22, 32, 36, 39, 45, 73, 79, 86, 88, 96, 99, 102, 103, 113, 114, 157, 171, 187], "yield": [7, 18, 19, 46, 58, 62, 89, 123, 157, 180, 188], "tuningconfig": [7, 78, 85, 110, 114, 115, 116, 117, 118], "tolerable_loss": [7, 15, 118, 172, 188], "01": [7, 15, 86, 113, 172, 183, 188, 189], "max_trial": [7, 15, 110, 118, 172, 188], "pipelin": [7, 125, 159, 172, 177], "tune_config": [7, 78, 85, 110, 114, 115, 116, 117, 118, 130], "config1": 7, "config2": 7, "3": [7, 15, 22, 36, 41, 103, 109, 110, 112, 113, 115, 117, 118, 119, 123, 126, 128, 138, 155, 156, 157, 160, 162, 164, 165, 168, 171, 172, 173, 175, 176, 178, 180, 183, 184, 185, 186, 187, 188, 189], "stop": [7, 15, 107, 118, 172, 188], "when": [7, 15, 20, 21, 29, 36, 39, 58, 81, 89, 112, 113, 117, 118, 119, 120, 123, 124, 130, 156, 157, 172, 178, 180, 183, 186, 187, 188], "either": [7, 15, 41, 112, 117, 118, 120, 123, 177, 180], "follow": [7, 22, 38, 41, 109, 110, 111, 116, 119, 120, 123, 124, 125, 126, 128, 129, 130, 131, 156, 157, 159, 160, 164, 168, 169, 171, 172, 173, 174, 175, 177, 178, 180, 183, 186, 188], "condit": [7, 20, 21, 22, 36, 59, 61, 118, 169, 187, 188], "met": [7, 118, 123, 164, 180], "trial": [7, 118, 188], "reach": [7, 15, 125, 157, 178, 188], "maximum": [7, 15, 20, 36, 39, 54, 62, 113, 123, 131, 155, 172, 178, 180, 186, 187], "metric": [7, 15, 18, 19, 37, 46, 58, 89, 92, 107, 116, 129, 130, 160, 172, 173, 180, 185, 186, 188, 189], "loss": [7, 15, 45, 89, 110, 112, 113, 117, 123, 155, 159, 160, 161, 170, 171, 172, 173, 177, 178, 179, 180, 183, 186, 188], "toler": [7, 117], "calcul": [7, 15, 23, 24, 42, 43, 67, 90, 103, 111, 113, 117, 123, 155, 171, 172, 176, 178, 180, 183, 185, 186, 188], "relative_loss": 7, "fp32_baselin": [7, 92, 129], "eval_result_of_q_model": 7, "99": [7, 79, 170, 189], "so": [7, 36, 76, 88, 107, 109, 113, 114, 117, 123, 126, 129, 163, 167, 173, 175, 180, 182, 183, 186, 187], "tuningmonitor": 7, "tuning_config": 7, "monitor": [7, 88, 114], "init_tun": 7, "tupl": [7, 15, 18, 19, 32, 36, 46, 58, 73, 78, 83, 85, 86, 88, 89, 96, 102, 114, 117, 130, 156, 171, 172, 180, 187], "tuninglogg": [7, 12], "initi": [7, 18, 19, 20, 58, 74, 89, 114, 117, 123, 131, 171, 178, 180, 186, 188], "modul": [8, 11, 82, 107, 110, 113, 114, 118, 126, 128, 136, 156, 157, 165, 167, 171, 172, 174, 178, 182, 183], "base_tun": [8, 78, 85, 115, 117], "tuning_param": 8, "paramlevel": 9, "enumer": [9, 10, 14, 89, 109, 129, 159, 160, 172, 175, 177, 178], "level": [9, 63, 100, 109, 123, 124, 175, 186, 188], "op_level": 9, "op_type_level": 9, "model_level": 9, "tuningparam": 9, "default_v": 9, "ani": [9, 41, 43, 73, 78, 83, 88, 103, 114, 117, 124, 128, 131, 156, 160, 178, 185, 188], "tunable_typ": 9, "option": [9, 14, 15, 18, 19, 20, 36, 41, 45, 46, 58, 74, 76, 83, 85, 86, 88, 89, 95, 96, 97, 99, 103, 113, 114, 117, 123, 130, 131, 156, 157, 164, 168, 172, 178, 180, 183, 185, 186, 187, 188], "defin": [9, 14, 15, 18, 19, 46, 58, 89, 102, 115, 117, 118, 123, 124, 129, 130, 157, 159, 164, 167, 171, 172, 177, 178, 180, 183, 185, 186, 188], "fakealgoconfig": 9, "algo": [9, 92], "simpl": [9, 36, 117, 123, 172, 178, 185, 186, 188], "like": [9, 15, 18, 19, 22, 45, 54, 58, 89, 110, 113, 117, 123, 125, 126, 128, 129, 130, 159, 167, 177, 178, 180, 183, 184, 186, 188], "give": [9, 130, 188], "enough": [9, 117, 123, 180], "creat": [9, 15, 20, 22, 41, 74, 76, 92, 107, 123, 124, 129, 174, 178, 180, 185, 188], "implicitli": 9, "simple_attr": 9, "complex": [9, 110, 156, 172, 173, 178], "develop": [9, 56, 109, 110, 125, 126, 156, 168, 172, 173, 175, 178, 179, 182, 185], "explicitli": [9, 15, 112, 120, 166, 178], "complex_attr": 9, "model_attr": 9, "todo": [9, 20, 23, 41, 74], "explain": [9, 123, 131, 186], "agnost": [10, 114], "mode": [10, 14, 29, 41, 54, 74, 88, 102, 103, 113, 114, 129, 130, 167, 180, 182, 183, 188], "constant": [11, 62, 72, 96, 97, 156, 157, 164, 187], "logger": [11, 14, 90, 97, 103], "save_load": 11, "function": [12, 15, 18, 19, 21, 97, 107, 110, 112, 113, 114, 117, 123, 125, 126, 129, 130, 131, 154, 157, 159, 162, 166, 167, 170, 171, 172, 173, 178, 180, 183, 185, 186, 188], "unifi": [12, 83, 129, 130, 131, 157, 166, 167, 171, 172, 174], "It": [12, 18, 19, 43, 45, 46, 58, 63, 67, 88, 89, 109, 112, 113, 114, 115, 117, 118, 123, 129, 130, 131, 155, 165, 172, 175, 178, 180, 183, 185, 188], "assist": [12, 184], "valid": [12, 15, 22, 41, 54, 128, 129, 161, 164, 167, 169, 172, 178, 180, 183, 184], "team": [12, 43, 124, 182], "save": [13, 15, 22, 54, 58, 89, 90, 95, 96, 99, 103, 114, 115, 123, 126, 129, 166, 172, 173, 174, 177, 180, 181, 183, 186], "load": [13, 20, 35, 36, 46, 54, 58, 102, 103, 117, 130, 157, 180, 181, 186], "save_config_map": 13, "config_map": 13, "qconfig_file_path": 13, "map": [13, 15, 36, 40, 42, 43, 45, 94, 96, 113, 123, 156, 160, 171, 172, 178, 180, 183], "json": [13, 21, 36, 102, 113, 174, 183, 187], "path": [13, 20, 21, 22, 36, 46, 54, 58, 74, 88, 95, 96, 99, 103, 112, 113, 114, 120, 126, 129, 160, 166, 171, 172, 173, 174, 177, 183, 187], "load_config_map": 13, "config_name_map": 13, "reload": 13, "get_all_config": 13, "singleton": [14, 103], "lazyimport": [14, 103], "module_nam": [14, 103], "lazi": [14, 103], "python": [14, 22, 37, 103, 105, 120, 126, 128, 156, 160, 163, 168, 172, 178, 179, 187], "till": [14, 103, 188], "cpuinfo": [14, 103], "cpu": [14, 15, 99, 103, 110, 112, 117, 119, 128, 130, 154, 155, 167, 172, 173, 179, 180, 181, 182, 183], "info": [14, 34, 50, 99, 100, 103, 126, 156, 174], "dump_elapsed_tim": [14, 103, 129], "customized_msg": [14, 103], "elaps": [14, 103], "time": [14, 15, 36, 45, 56, 62, 103, 112, 113, 114, 116, 118, 120, 123, 130, 157, 160, 163, 172, 176, 178, 179, 180, 183, 185, 186, 187, 188], "set_random_se": [14, 15, 103], "seed": [14, 15, 86, 103, 113, 172], "random": [14, 15, 32, 36, 62, 66, 103, 113, 172, 178, 187], "set_workspac": [14, 15, 103], "workspac": [14, 15, 102, 103, 174], "get_workspac": 14, "set_resume_from": [14, 15, 103], "resume_from": [14, 15, 103], "set_tensorboard": [14, 15, 103], "tensorboard": [14, 15, 92, 103, 129, 172], "log_process": 14, "call_count": 14, "func": [14, 103, 180], "keep": [14, 63, 126, 129, 156, 184], "track": [14, 185], "processortyp": [14, 86], "deriv": 14, "detect_processor_type_based_on_hw": 14, "detect": [14, 15, 41, 45, 50, 114, 125, 126, 178, 188], "processor": [14, 86, 110, 120, 123, 128, 170, 173, 179, 180, 182], "hardwar": [14, 109, 112, 120, 128, 129, 167, 172, 175, 178, 179], "server": [14, 120], "client": [14, 128], "statist": [14, 103, 104], "header": [14, 103, 163], "field_nam": [14, 103], "output_handl": [14, 103], "printer": [14, 103], "x": [15, 36, 62, 118, 123, 128, 155, 156, 160, 165, 168, 173, 174, 180, 181, 186, 187], "dotdict": [15, 56, 103], "access": [15, 99, 103], "yaml": [15, 18, 19, 20, 22, 102, 103, 129, 131, 166, 171, 172, 176, 187], "attribut": [15, 103, 129, 157, 164, 166, 172], "instead": [15, 103, 112, 178, 183], "dictionari": [15, 35, 41, 103], "notat": [15, 103], "random_se": [15, 62, 172], "1978": 15, "default_workspac": 15, "global": [15, 76, 103, 113, 114, 115, 126, 172, 178, 188], "you": [15, 20, 45, 58, 107, 125, 126, 130, 156, 157, 160, 168, 169, 171, 173, 178, 180, 183, 184, 185, 186], "want": [15, 20, 63, 89, 126, 129, 157, 160, 172, 176, 180, 183, 185, 188], "should": [15, 18, 19, 20, 22, 36, 39, 45, 46, 58, 81, 89, 96, 103, 112, 114, 115, 116, 117, 119, 123, 126, 129, 130, 131, 160, 171, 172, 176, 178, 180, 183, 187, 188], "directori": [15, 21, 22, 54, 99, 102, 103, 160, 163], "where": [15, 41, 45, 76, 103, 123, 131, 155, 186], "intermedi": [15, 123, 126, 167, 180], "histori": [15, 102, 103, 188], "ar": [15, 20, 36, 41, 45, 59, 61, 62, 76, 92, 102, 103, 108, 109, 110, 112, 113, 114, 116, 117, 120, 123, 124, 125, 126, 129, 130, 156, 157, 159, 160, 161, 162, 164, 166, 167, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188], "store": [15, 22, 166], "nc_workspac": 15, "format": [15, 20, 21, 22, 41, 74, 96, 99, 109, 110, 112, 114, 117, 119, 123, 128, 130, 131, 156, 160, 162, 171, 172, 173, 174, 175, 179, 180, 183], "datetim": 15, "now": [15, 36, 126, 131, 160, 187, 188], "strftime": 15, "y": [15, 36, 62, 123, 156, 163, 186, 187], "m": [15, 119, 125, 168, 178, 189], "d_": 15, "h": [15, 36, 160, 187], "resum": [15, 18, 19, 59, 61, 62, 63, 67, 70], "wa": [15, 109, 111, 129, 172, 175, 179, 188], "automat": [15, 22, 25, 32, 114, 117, 119, 120, 126, 128, 154, 167, 172, 173, 177, 178, 180, 186, 187, 188], "dure": [15, 56, 88, 103, 111, 112, 114, 117, 123, 128, 130, 165, 172, 174, 176, 177, 178, 180, 186], "last": [15, 110, 111, 113, 157, 173, 180, 183, 186], "flag": [15, 39], "whether": [15, 20, 32, 36, 39, 41, 45, 92, 99, 102, 103, 113, 119, 129, 171, 180, 183, 186, 187], "each": [15, 22, 25, 32, 36, 39, 41, 42, 43, 67, 103, 107, 113, 116, 119, 123, 125, 129, 130, 131, 156, 159, 164, 172, 176, 178, 181, 183, 185, 187, 188], "visual": [15, 185, 188], "displai": [15, 73, 74, 103], "2022": [15, 113, 123, 169, 178, 183, 186], "workspace_path": 15, "output": [15, 18, 19, 38, 45, 46, 54, 58, 88, 89, 95, 96, 99, 100, 103, 113, 114, 115, 123, 126, 129, 130, 159, 160, 162, 164, 166, 171, 172, 174, 177, 178, 180, 183, 186, 187, 188], "devic": [15, 86, 99, 110, 113, 114, 120, 123, 128, 130, 157, 172, 173, 178, 181, 183], "warmup": [15, 154, 172], "model_nam": [15, 128], "inter_num_of_thread": [15, 172], "intra_num_of_thread": [15, 172], "ni_workload_nam": 15, "benchmark": [15, 37, 56, 103, 107, 128, 135, 136, 165, 174, 188, 189], "empti": [15, 113, 114, 181], "includ": [15, 20, 22, 29, 36, 103, 113, 114, 117, 118, 120, 124, 129, 130, 131, 157, 168, 169, 170, 171, 172, 178, 180, 182, 183, 188], "itex": [15, 95, 117, 173, 180, 186], "ipex": [15, 102, 110, 111, 167, 170, 172, 173, 186], "onnxrt_trt_ep": [15, 173, 180], "onnxrt_cuda_ep": [15, 173, 180], "onnxrt_dnnl_ep": [15, 173, 180], "onnxrt_dml_ep": [15, 180], "inter": 15, "intra": 15, "accuracycriterion": [15, 172, 188], "higher_is_bett": [15, 45, 58, 188], "criterion": [15, 159, 172, 178, 180, 186, 188], "rel": [15, 56, 172, 188, 189], "better": [15, 18, 19, 46, 58, 89, 110, 113, 123, 156, 159, 171, 173, 178, 179, 180, 183, 185, 186, 188], "absolut": [15, 45, 109, 123, 171, 172, 175, 178, 180, 188], "how": [15, 36, 107, 110, 112, 113, 114, 115, 116, 117, 123, 125, 126, 127, 129, 157, 159, 160, 166, 171, 172, 178, 179, 180, 186, 187, 188], "much": [15, 36, 123, 186, 187], "accept": [15, 118, 124, 154, 156, 157, 183], "accuracy_criterion": [15, 56, 172, 176, 188], "avail": [15, 50, 110, 113, 114, 120, 128, 132, 134, 140, 143, 146, 156, 161, 163, 165, 167, 178, 188, 189], "tuningcriterion": [15, 172, 176, 185, 188], "strategi": [15, 16, 22, 37, 107, 118, 123, 128, 129, 130, 131, 135, 155, 156, 157, 160, 167, 172, 179, 180, 182, 183, 184], "basic": [15, 35, 66, 70, 73, 89, 109, 167, 172, 175, 185], "strategy_kwarg": [15, 185, 188], "timeout": [15, 172, 188], "doc": [15, 45, 58, 73, 74, 103, 171, 172], "tuning_strategi": 15, "md": [15, 45, 58], "constraint": [15, 172, 178, 185, 188], "guarante": [15, 172], "models": [15, 56, 172, 176], "footprint": [15, 56, 159, 172, 176, 178, 181], "second": [15, 20, 63, 103, 113, 120, 123, 172, 183, 186, 188], "mean": [15, 32, 36, 43, 45, 67, 113, 115, 123, 126, 130, 131, 157, 160, 164, 171, 172, 178, 180, 181, 183, 186, 187, 188, 189], "earli": [15, 123, 172, 180, 188], "combin": [15, 18, 19, 32, 46, 58, 89, 103, 113, 116, 126, 129, 167, 172, 177, 179, 180, 182, 183, 187, 188], "field": [15, 22, 41, 109, 126, 129, 131, 160, 172, 175, 185, 188], "decid": [15, 39, 117, 119, 129, 130, 172, 180, 184, 188], "exit": [15, 59, 61, 118, 172], "tuning_criterion": [15, 172, 176, 185, 188], "posttrainingquantconfig": [15, 58, 126, 128, 131, 157, 162, 171, 172, 174, 180, 181, 182, 183, 185, 186, 188], "domain": [15, 178, 188], "recip": [15, 109, 118, 128, 165, 172, 175, 181, 183, 186, 188], "quant_format": [15, 96, 162], "approach": [15, 86, 112, 113, 123, 126, 128, 155, 167, 172, 178, 179, 181, 183, 188], "calibration_sampling_s": [15, 172], "op_type_dict": [15, 112, 128, 131, 180, 183, 188], "op_name_dict": [15, 112, 172, 180, 188], "reduce_rang": [15, 131], "example_input": [15, 83, 85, 88, 96, 102, 108, 111, 112, 113, 114, 162], "excluded_precis": [15, 86, 182], "quant_level": [15, 183, 186, 188], "gpu": [15, 113, 117, 128, 154, 167, 172, 173, 180, 181], "npu": [15, 180], "xpu": [15, 117, 180], "cv": [15, 112, 114, 117, 178], "object_detect": [15, 41], "nlp": [15, 110, 114, 117, 123, 178, 180], "recommendation_system": 15, "adaptor": [15, 76, 92, 107, 128, 131, 167, 181, 182, 184, 186], "overrid": [15, 103, 156], "quantiztaion": 15, "below": [15, 45, 58, 107, 109, 111, 113, 114, 117, 118, 123, 125, 126, 128, 129, 130, 131, 157, 160, 165, 166, 171, 175, 176, 177, 178, 180, 183, 185, 186, 188], "do": [15, 20, 38, 41, 96, 102, 114, 124, 130, 156, 160, 164, 167, 171, 172, 178, 182, 184, 186, 188], "quant": [15, 74, 79, 85, 86, 113, 123, 126, 156, 170, 172, 180], "smooth_quant_arg": [15, 180, 186], "layer_wise_qu": [15, 181], "fast": [15, 113, 117, 178, 179, 183], "bia": [15, 183], "gemm_to_matmul": [15, 180], "convert": [15, 20, 32, 35, 36, 41, 74, 88, 95, 108, 109, 110, 111, 112, 113, 114, 116, 120, 123, 126, 130, 165, 172, 173, 180, 182, 183, 186, 187, 188], "gemm": 15, "matmul": [15, 79, 164, 183, 188], "add": [15, 20, 22, 74, 103, 107, 111, 125, 126, 128, 131, 157, 160, 162, 164, 171, 172, 185, 186, 188], "graph_optimization_level": [15, 180], "disable_al": 15, "enable_bas": 15, "enable_extend": 15, "enable_al": 15, "first_conv_or_matmul_quant": [15, 180], "last_conv_or_matmul_quant": [15, 180], "pre_post_process_quant": [15, 180], "preprocess": [15, 20, 36, 76, 92, 160, 187], "postprocess": [15, 33, 36, 45, 58, 92, 129, 172, 187], "add_qdq_pair_to_weight": [15, 180], "qdq": [15, 94, 95, 96, 116, 129, 162, 167, 180, 186], "pair": [15, 110, 112, 130, 157, 172, 173], "optypes_to_exclude_output_qu": [15, 180], "optyp": [15, 94, 130], "dedicated_qdq_pair": [15, 180], "dedic": 15, "qoper": [15, 162], "requir": [15, 54, 110, 112, 113, 117, 123, 126, 129, 130, 154, 155, 157, 159, 160, 164, 172, 173, 174, 178, 180, 183, 184, 185, 186, 188], "onnxruntim": [15, 22, 29, 129, 155, 157, 167, 168, 173], "tensorflow": [15, 20, 21, 22, 25, 27, 29, 36, 37, 39, 41, 45, 46, 54, 58, 68, 95, 96, 103, 116, 125, 128, 129, 130, 136, 155, 156, 157, 159, 161, 164, 165, 167, 168, 172, 173, 174, 175, 178, 179, 185, 186, 188], "method": [15, 20, 22, 29, 36, 74, 76, 92, 97, 99, 100, 113, 114, 115, 117, 123, 126, 128, 155, 156, 157, 159, 171, 172, 177, 178, 180, 182, 183, 186, 187, 188], "dynam": [15, 74, 83, 86, 96, 113, 114, 128, 129, 157, 162, 165, 167, 172, 179, 188, 189], "weight_onli": [15, 86, 102, 109, 128, 156, 175, 181, 183], "ptq": [15, 58, 111, 112, 116, 117, 126, 160, 167, 172, 180, 186, 188], "both": [15, 112, 113, 115, 120, 123, 124, 129, 159, 172, 178, 180, 183, 186, 188], "meet": [15, 59, 61, 113, 115, 117, 118, 123, 126, 130, 176, 179, 180, 183, 188], "criteria": [15, 118, 126, 186], "bayesian": [15, 66, 178], "mse": [15, 45, 58, 66, 103, 113, 123, 171, 183, 184], "mse_v2": [15, 66], "hawq_v2": [15, 66], "exhaust": [15, 66], "els": [15, 56, 183], "advanc": [15, 109, 110, 113, 115, 117, 123, 124, 130, 135, 170, 175, 178, 180, 183], "reduc": [15, 86, 110, 111, 112, 113, 116, 117, 123, 129, 155, 159, 172, 173, 178, 179, 180, 181, 182, 183, 186, 188], "dtype": [15, 23, 24, 32, 36, 86, 99, 110, 113, 114, 123, 128, 130, 131, 162, 164, 180, 183, 186, 187], "activ": [15, 74, 76, 86, 108, 111, 112, 113, 116, 117, 123, 129, 130, 131, 155, 159, 164, 172, 180, 183, 186], "layer1": [15, 172, 178, 180], "conv1": [15, 115, 180], "bit": [15, 76, 86, 108, 109, 110, 113, 114, 123, 128, 131, 155, 159, 173, 175, 179, 180, 183, 186], "precis": [15, 18, 19, 43, 45, 46, 56, 60, 63, 74, 86, 103, 107, 109, 112, 113, 114, 117, 118, 123, 128, 129, 130, 135, 154, 155, 159, 160, 164, 165, 167, 175, 179, 180, 183, 186, 188], "exclud": [15, 129, 155, 182], "enabl": [15, 110, 112, 113, 130, 131, 160, 173, 178, 179, 186, 188], "mix": [15, 46, 60, 74, 86, 107, 114, 128, 129, 135, 165, 167], "bf16": [15, 74, 129, 130, 164, 172, 182, 188, 189], "disabl": [15, 124, 182, 183, 186], "conserv": [15, 66], "In": [15, 41, 56, 107, 113, 114, 117, 123, 124, 126, 128, 129, 130, 157, 159, 160, 171, 172, 176, 177, 178, 180, 182, 183, 185, 186, 187, 188], "docstr": 15, "quantizationawaretrainingconfig": [15, 89, 126, 159, 162, 172, 180, 182, 188], "awar": [15, 65, 86, 89, 113, 114, 118, 129, 130, 131, 155, 159, 160, 162, 167, 177, 179, 183, 188], "qat": [15, 54, 128, 159, 160, 165, 167, 172, 180], "copi": [15, 103, 157], "deepcopi": 15, "model_origin": [15, 58, 182], "qat_op_name_dict": 15, "compression_manag": [15, 89, 126, 159, 172, 177, 178, 180], "prepare_compress": [15, 89, 126, 159, 172, 177, 178, 180], "weightpruningconfig": [15, 172, 177, 178], "pruning_config": [15, 172, 178], "target_spars": [15, 172, 178], "9": [15, 111, 119, 126, 168, 172, 178, 186, 188, 189], "pruning_typ": [15, 172, 178], "snip_momentum": [15, 172, 178], "pattern": [15, 22, 74, 108, 112, 116, 119, 129, 156, 164, 167, 172, 177, 186, 188, 189], "4x1": [15, 172, 178, 189], "op_nam": [15, 75, 103, 104, 112, 130, 172, 178], "excluded_op_nam": [15, 172, 178], "start_step": [15, 172, 178], "end_step": [15, 172, 178], "pruning_scop": [15, 172, 178], "pruning_frequ": [15, 172, 178], "min_sparsity_ratio_per_op": [15, 172, 178], "max_sparsity_ratio_per_op": [15, 172, 178], "98": [15, 172, 178, 189], "sparsity_decay_typ": [15, 172, 178], "exp": [15, 109, 172, 175, 178], "pruning_op_typ": [15, 172, 178], "low_memory_usag": 15, "kwarg": [15, 22, 34, 36, 45, 46, 47, 49, 51, 53, 54, 55, 58, 73, 75, 89, 99, 100, 102, 103, 157], "prune": [15, 103, 107, 128, 160, 161, 164, 165, 167, 177, 179], "singl": [15, 20, 36, 41, 45, 58, 81, 113, 126, 168, 178, 181, 186], "sequenc": [15, 20, 35, 36, 39, 43, 113, 123, 129, 164, 178, 183, 187], "local": [15, 103, 113, 115, 178, 185], "link": [15, 20, 45, 58, 114, 155, 162, 183, 189], "out": [15, 20, 21, 22, 113, 115, 117, 123, 125, 126, 128, 178, 180, 183], "By": [15, 38, 113, 120, 130, 131, 171, 174, 178, 179, 183, 188], "correspond": [15, 20, 38, 41, 45, 92, 103, 114, 123, 129, 164, 172, 178, 180, 185, 188], "sparsiti": [15, 103, 107, 113, 128, 167, 172, 189], "after": [15, 20, 32, 36, 63, 99, 103, 108, 112, 113, 116, 123, 128, 130, 159, 162, 167, 171, 172, 176, 177, 178, 180, 182, 183, 185, 186, 187, 188], "90": [15, 170, 181, 189], "magnitud": [15, 45, 167, 178], "snip": [15, 167, 178, 189], "magnitude_progress": 15, "snip_progress": 15, "snip_momentum_progress": 15, "pattern_lock": 15, "most": [15, 45, 110, 113, 117, 123, 172, 173, 178, 180, 183, 186, 188, 189], "feasibl": 15, "under": [15, 22, 99, 102, 118, 125, 128, 169, 171, 172, 177, 178, 179, 181, 183, 188], "situat": [15, 160, 178], "structur": [15, 75, 103, 107, 114, 123, 167, 178, 179, 180, 189], "unstructur": [15, 167, 178, 189], "nxm": [15, 178], "e": [15, 113, 120, 123, 124, 125, 128, 161, 178, 183, 186, 188], "g": [15, 113, 120, 123, 125, 161, 178, 183, 184, 186, 188], "8x1": 15, "channelx1": [15, 178], "1xchannel": [15, 178], "n": [15, 21, 36, 39, 123, 131, 156, 170, 178, 180, 186, 187], "directli": [15, 41, 45, 115, 128, 171, 172, 178, 180], "our": [15, 109, 128, 162, 172, 175, 185], "itrex": [15, 111, 186], "some": [15, 20, 113, 123, 128, 130, 131, 156, 162, 165, 168, 171, 172, 176, 178, 180, 182, 183, 186, 188], "step": [15, 89, 108, 111, 112, 113, 123, 130, 131, 159, 160, 172, 177, 178, 182, 183, 185, 186, 188], "start": [15, 36, 41, 63, 107, 168, 179, 187, 188, 190], "integ": [15, 41, 45, 111, 113, 116, 123, 129, 131, 155, 180, 183, 186, 188], "end": [15, 20, 35, 36, 59, 61, 129, 130, 131, 159, 164, 168, 172, 176, 178, 183, 187, 188], "determin": [15, 98, 108, 112, 118, 120, 124, 126, 155, 178, 180], "score": [15, 38, 39, 41, 42, 43, 45, 65, 92, 126, 171, 176, 178, 185, 188], "gather": 15, "sort": [15, 67, 113, 183, 188], "sinc": [15, 38, 113, 123, 162, 171, 177, 183], "lead": [15, 110, 113, 117, 123, 156, 172, 173, 178, 183, 186], "less": [15, 103, 154, 172, 178], "frequenc": [15, 172, 178], "minimum": [15, 109, 131, 155, 172, 175, 178, 186, 188], "restrict": [15, 178, 185], "everi": [15, 113, 129, 157, 181, 183, 188], "schedul": [15, 113, 172, 177], "increas": [15, 109, 113, 158, 167, 175, 183, 188], "cube": [15, 178], "current": [15, 62, 68, 103, 112, 113, 114, 118, 126, 128, 129, 131, 155, 156, 160, 164, 165, 172, 176, 178, 180, 183, 186, 188], "local_config": 15, "6": [15, 109, 111, 113, 116, 123, 164, 175, 180, 186, 188, 189], "queri": [15, 123, 130, 131, 180], "kei": [15, 54, 90, 92, 103, 113, 123, 128, 130, 179, 183, 188], "self": [15, 56, 114, 129, 130, 157, 167, 171, 185, 188], "attent": [15, 20, 124, 178], "dens": [15, 178, 189], "8": [15, 35, 86, 108, 109, 111, 113, 114, 123, 126, 130, 155, 156, 164, 168, 175, 178, 179, 183, 186, 188, 189], "update_config": 15, "10": [15, 22, 62, 118, 119, 128, 154, 162, 168, 172, 178, 187, 188, 189], "hpoconfig": 15, "search_spac": 15, "searcher": 15, "xgb": 15, "loss_typ": [15, 172], "reg": 15, "min_train_sampl": 15, "42": [15, 86, 113, 189], "hyperparamet": [15, 123, 185, 186, 188], "optim": [15, 62, 86, 89, 90, 103, 107, 112, 113, 116, 117, 118, 120, 123, 128, 154, 156, 159, 160, 164, 167, 168, 170, 172, 174, 179, 180, 182, 183, 185, 186, 188], "search": [15, 18, 19, 38, 62, 103, 107, 113, 114, 116, 128, 156, 167, 171, 178, 179, 183, 186, 188], "grid": [15, 178], "bo": 15, "knowledgedistillationlossconfig": [15, 159, 172, 177], "temperatur": [15, 172], "ce": [15, 172], "loss_weight": [15, 172], "knowledg": [15, 116, 159, 161, 167, 172, 174], "distil": [15, 107, 128, 161, 165, 167, 177], "entropi": [15, 155, 188], "probabl": [15, 98, 113, 123, 183], "length": [15, 20, 36, 41, 113, 123, 171, 179, 180, 183, 187], "item": [15, 35, 74, 103, 123, 155, 160, 178, 186, 188], "student": [15, 20, 159, 189], "groundtruth": [15, 41], "label": [15, 18, 19, 20, 22, 23, 24, 25, 28, 32, 36, 38, 40, 45, 46, 58, 89, 117, 126, 157, 171, 172, 180, 187], "teacher": [15, 159, 172, 189], "kl": [15, 86, 90, 98, 130, 131, 155, 164, 172, 188], "sum": [15, 45], "multipli": [15, 108, 109, 113, 175, 183], "distillationconfig": [15, 89, 159, 172, 177], "criterion_conf": 15, "d_conf": [15, 159, 172, 177], "teacher_model": [15, 159, 172], "intermediatelayersknowledgedistillationlossconfig": 15, "layer_map": 15, "add_origin_loss": 15, "relationship": 15, "student_layer_nam": 15, "student_layer_output_process": 15, "teacher_layer_nam": 15, "teacher_layer_output_process": 15, "bert": [15, 20, 36, 128, 171, 173, 178, 187, 189], "desir": [15, 32, 36, 111, 130, 131, 178, 186, 187], "its": [15, 22, 36, 39, 40, 62, 94, 110, 113, 118, 123, 124, 169, 171, 173, 178, 183, 185, 187, 188], "take": [15, 18, 19, 36, 45, 46, 58, 62, 89, 110, 113, 117, 120, 124, 126, 157, 164, 172, 178, 180, 182, 183, 187, 188], "serv": [15, 54, 123], "numer": [15, 45, 109, 110, 113, 117, 131, 173, 175, 179, 180, 183], "abbrevi": 15, "further": [15, 110, 123, 124, 128, 173, 174, 180], "layer_nam": [15, 178], "student_model": [15, 172], "l1": 15, "len": [15, 36, 160, 187], "origin": [15, 20, 36, 63, 76, 88, 99, 103, 113, 114, 115, 117, 123, 125, 178, 180, 183, 187, 188], "selfknowledgedistillationlossconfig": [15, 172], "student1_layer_name1": 15, "teacher_layer_name1": 15, "student2_layer_name1": 15, "student1_layer_name2": 15, "teacher_layer_name2": 15, "student2_layer_name2": 15, "soft": 15, "l2": [15, 178], "hard": [15, 157], "resblock": 15, "featur": [15, 20, 21, 32, 36, 110, 115, 123, 125, 128, 154, 157, 158, 172, 173, 174, 178, 179, 184, 187], "deepst": 15, "fc": [15, 178], "02": [15, 170, 189], "nn": [15, 46, 58, 83, 85, 88, 96, 99, 102, 113, 114, 123, 126, 172, 174, 183, 186], "crossentropyloss": [15, 172], "sgd": [15, 172], "lr": [15, 86, 113, 160, 172], "0001": [15, 172], "learning_r": [15, 172], "altern": [15, 58], "distil_loss": [15, 172], "mixedprecisionconfig": [15, 46, 86, 110, 172, 173], "mixedprecis": [15, 172], "target": [15, 62, 99, 114, 160, 172, 178, 187, 188], "convers": [15, 110, 111, 123, 125, 129, 130, 172, 173, 180, 182, 186], "fp16": [15, 74, 86, 123, 180], "fallback": [15, 65, 67, 68, 110, 111, 112, 162, 173, 182, 188], "won": [15, 180, 183], "work": [15, 81, 114, 117, 119, 120, 123, 127, 130, 156, 157, 182, 183, 184, 186], "tensor": [15, 36, 54, 67, 85, 88, 94, 96, 99, 102, 103, 108, 109, 114, 117, 126, 131, 156, 157, 175, 178, 180, 184, 187, 188], "trace": [15, 65, 85, 88, 96, 112, 114, 126, 188], "mix_precis": [15, 37, 172, 173], "converted_model": [15, 46, 172, 173], "exportconfig": 15, "opset_vers": [15, 95, 96, 162], "14": [15, 95, 96, 128, 162, 168, 170, 189], "input_nam": [15, 54, 95, 96, 162], "output_nam": [15, 54, 95, 96, 162], "dynamic_ax": [15, 96, 162], "common": [15, 34, 37, 78, 79, 81, 85, 86, 88, 92, 111, 115, 116, 117, 124, 156, 159, 160, 162, 165, 166, 168, 172, 180, 186], "export": [15, 41, 84, 97, 107, 108, 110, 112], "select": [15, 20, 99, 113, 123, 126, 155, 167, 168, 178, 180, 183, 188], "opset": [15, 95, 96, 162], "version": [15, 37, 95, 96, 107, 111, 124, 126, 129, 156, 164, 168, 169, 172, 179, 186, 188], "qlinear": [15, 22, 29, 45, 94, 129], "ax": [15, 96], "inform": [15, 18, 19, 45, 103, 109, 111, 113, 117, 119, 120, 124, 125, 127, 128, 129, 130, 131, 132, 134, 140, 143, 146, 155, 156, 164, 172, 174, 175, 178, 182, 183, 184, 186, 189, 190], "onnxqlinear2qdqconfig": 15, "onnxqlinear2qdq": 15, "torch2onnxconfig": [15, 162], "torch2onnx": [15, 93], "qdq_op_fp32_bia": 15, "qdq_op_int32_bia": 15, "qdq_op_fp32_bias_qdq": 15, "resnet50": [15, 115, 128, 160, 162, 173, 178, 180, 185, 189], "int8_onnx_config": [15, 162], "randn": [15, 162], "224": [15, 32, 128, 160, 162, 172, 187], "batch_siz": [15, 20, 21, 86, 96, 113, 157, 160, 162, 166, 172, 180], "q_model": [15, 58, 81, 108, 111, 112, 116, 118, 126, 157, 160, 162, 166, 171, 172, 174, 180, 181, 182, 183], "tf2onnxconfig": [15, 162], "tf2onnx": [15, 93], "axi": 15, "addit": [15, 89, 113, 130, 131, 183, 184, 188], "keyword": 15, "argument": [15, 85, 88, 114, 117, 118, 183], "output_graph": 15, "nasconfig": 15, "search_algorithm": 15, "dyna": 15, "na": [15, 50, 167, 189], "mxnet": [15, 22, 25, 29, 36, 45, 46, 51, 58, 125, 128, 129, 130, 155, 157, 161, 164, 167, 172, 173, 174, 188], "kera": [15, 22, 29, 49, 54, 78, 81, 115, 117, 130, 157, 160, 174], "pytorch": [15, 20, 22, 25, 29, 36, 45, 46, 55, 58, 68, 79, 83, 84, 85, 86, 87, 88, 96, 97, 103, 109, 114, 125, 126, 128, 129, 130, 131, 136, 155, 156, 157, 159, 161, 164, 165, 167, 168, 170, 172, 173, 174, 175, 178, 179, 183, 184, 186, 188], "built": [16, 17, 20, 21, 26, 28, 30, 31, 32, 33, 36, 45, 48, 56, 58, 81, 89, 117, 118, 129, 160, 172, 176, 180, 185, 187, 188], "sigopt": [17, 179], "tpe": 17, "provid": [18, 19, 36, 41, 46, 58, 89, 97, 99, 107, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 128, 129, 130, 131, 154, 157, 159, 160, 161, 165, 167, 168, 170, 171, 172, 173, 174, 178, 180, 183, 186, 188, 189], "sigopttunestrategi": 18, "q_dataload": [18, 19, 59, 61, 62, 63, 67, 70, 166, 188], "q_func": [18, 19, 59, 61, 62, 63, 67, 70, 129, 130, 172, 188], "eval_func": [18, 19, 46, 58, 59, 61, 62, 63, 67, 70, 89, 126, 157, 159, 160, 172, 180, 181, 182, 183, 188], "eval_metr": [18, 19, 46, 58, 59, 61, 62, 63, 67, 70, 89, 171, 180], "q_hook": [18, 19, 59, 61, 62, 63, 67, 70], "hpo": [18, 178], "low": [18, 19, 23, 24, 46, 110, 113, 118, 123, 129, 130, 154, 155, 160, 172, 173, 179, 180, 183, 186, 188], "loader": [18, 19, 46, 58, 81, 89, 99, 157, 180], "mandatori": [18, 19, 58, 172], "dataset": [18, 19, 31, 41, 42, 43, 45, 46, 58, 89, 92, 111, 113, 115, 116, 117, 123, 128, 129, 130, 157, 160, 171, 172, 178, 180, 183, 184, 186, 188, 189], "_": [18, 19, 58, 110, 111, 113, 114, 117, 119, 123, 126, 129, 130, 155, 160, 162, 164, 172, 173, 174, 176, 178, 180, 183, 184, 185, 186, 188], "depend": [18, 19, 46, 58, 89, 125, 128, 163, 164, 168, 180, 188], "implement": [18, 19, 20, 22, 38, 46, 56, 58, 65, 89, 113, 131, 157, 171, 172, 178, 180, 183, 184, 188], "well": [18, 19, 46, 58, 89, 109, 123, 128, 156, 175, 178, 180, 184, 186], "taken": [18, 19, 46, 58, 89, 180], "reserv": [18, 19], "abl": [18, 19, 46, 58, 89, 117, 123, 180], "pre": [18, 19, 20, 46, 58, 86, 89, 112, 113, 118, 123, 156, 159, 172, 178, 179, 180, 183, 188], "through": [18, 19, 45, 46, 58, 112, 113, 114, 123, 128, 154, 164, 166, 167, 171, 176, 177, 178, 180, 183], "tuner": [18, 19, 46, 58, 89, 180], "encapsul": [18, 19, 46, 58, 89, 174], "scalar": [18, 19, 46, 58, 89, 171, 180, 188], "pseudo": [18, 19, 58, 89, 113, 183], "code": [18, 19, 58, 86, 89, 107, 110, 113, 115, 126, 128, 129, 130, 131, 159, 160, 166, 167, 169, 171, 176, 177, 178, 179, 180, 185, 186, 187], "someth": [18, 19, 22, 58, 89], "fefin": 19, "tpetunestrategi": 19, "pytorchbertdataset": 20, "task": [20, 27, 45, 111, 113, 120, 123, 159, 162, 167, 171, 172, 178, 181, 183, 186, 189], "model_typ": [20, 103], "transform": [20, 21, 22, 23, 24, 25, 27, 29, 31, 86, 111, 112, 113, 116, 123, 126, 128, 155, 159, 160, 161, 165, 170, 172, 178, 179, 182, 183, 186, 188], "filter": [20, 21, 22, 23, 24, 25, 27, 31, 103, 131, 167, 178], "construct": [20, 23, 24, 27, 34, 45, 50, 54, 76, 92, 118, 124, 130, 131, 160, 178, 188], "tensordataset": 20, "full": [20, 21, 22, 99, 103, 113, 128, 155, 163, 169, 178, 183, 184], "repo": [20, 106, 125, 161, 190], "http": [20, 22, 38, 39, 41, 42, 43, 45, 58, 86, 113, 126, 168, 169, 172, 178, 184], "github": [20, 38, 39, 42, 43, 45, 58, 86, 113, 125, 128, 161, 168, 169, 172, 184], "com": [20, 38, 39, 42, 43, 45, 58, 86, 124, 156, 168, 169, 172, 184, 185, 189], "huggingfac": [20, 99, 109, 161, 175, 186, 189], "your": [20, 107, 112, 125, 128, 156, 157, 160, 169, 172, 178, 179, 185, 188], "easi": [20, 112, 114, 117, 162, 172, 179, 180, 183, 185], "ad": [20, 38, 62, 108, 110, 113, 130, 131, 173, 178, 183], "arg": [20, 21, 22, 62, 99, 100, 109, 114, 160, 172, 175, 178, 180, 183, 186, 187], "classifi": [20, 45], "squad": [20, 36, 42, 43, 45, 171, 178, 187, 189], "distilbert": [20, 173, 179, 189], "xlnet": 20, "xlm": [20, 189], "101": [20, 45, 123, 171, 186, 189], "2043": 20, "2001": 20, "onnxrtbertdataset": 20, "data_dir": 20, "model_name_or_path": [20, 172, 181], "max_seq_length": [20, 36, 187], "128": [20, 23, 24, 36, 86, 113, 118, 123, 172, 180, 183, 187, 189], "do_lower_cas": [20, 35, 36, 187], "mrpc": [20, 45, 171, 178, 188, 189], "dynamic_length": 20, "onnxrt": [20, 22, 29, 36, 45, 101, 129, 173, 180, 189], "dir": [20, 99, 102, 163, 166], "shortcut": 20, "token": [20, 33, 36, 38, 39, 99, 111, 113, 123, 128, 171, 172, 183, 185, 186, 187, 188], "longer": [20, 36, 120, 187], "than": [20, 36, 103, 109, 113, 123, 128, 154, 166, 175, 176, 177, 178, 180, 183, 185, 187, 188], "truncat": [20, 36, 187], "shorter": [20, 36, 187], "pad": [20, 36, 187], "lowercas": 20, "fine": [20, 114, 156, 178, 179, 180], "choic": [20, 113, 117, 123, 129, 171, 186], "qqp": [20, 171, 189], "qnli": [20, 171, 189], "rte": [20, 171, 189], "st": [20, 171], "b": [20, 103, 113, 123, 125, 155, 171, 178, 183, 186, 188], "cola": [20, 171, 189], "mnli": [20, 171, 189], "wnli": [20, 171], "mobilebert": 20, "roberta": [20, 189], "fix": [20, 113, 157, 178, 180, 183, 188], "uncas": [20, 36, 187, 189], "load_and_cache_exampl": 20, "cach": [20, 113, 123, 163, 180, 183], "helper": [20, 21, 22, 35, 54, 94, 95, 96, 101], "convert_examples_to_featur": [20, 36], "max_length": 20, "label_list": [20, 45], "output_mod": 20, "classif": [20, 36, 45, 162, 171, 178, 179], "pad_token": 20, "pad_token_segment_id": 20, "mask_padding_with_zero": 20, "inputfeatur": [20, 36], "properti": [20, 76, 169], "input_id": [20, 36, 172], "vocabulari": [20, 35, 36, 187], "attention_mask": [20, 172], "mask": [20, 41, 178, 189], "avoid": [20, 119, 126, 156], "usual": [20, 117, 123, 130, 177, 178, 180, 181, 186], "NOT": [20, 164], "token_type_id": [20, 172], "segment": [20, 39, 41, 125], "portion": 20, "them": [20, 113, 114, 123, 126, 131, 157, 162, 164, 166, 168, 177, 178, 183, 188], "problem": [20, 45, 110, 171, 173], "regress": [20, 125], "seq_length": 20, "tensorflowbertdataset": 20, "root": [20, 21, 22, 25, 45, 160, 171, 172], "label_fil": [20, 36, 187], "tfrecord": [20, 21, 22], "guid": [20, 110, 117, 126, 128, 156, 168], "parsedecodebert": 20, "tensorflowmodelzoobertdataset": [20, 21], "pars": [20, 21, 32, 36, 130, 131, 187], "num_cor": [20, 21, 25], "28": [20, 21, 25, 189], "three": [20, 59, 61, 110, 114, 118, 123, 126, 129, 130, 155, 168, 173, 177, 180, 182, 185, 186], "tf": [20, 21, 22, 36, 52, 54, 79, 81, 115, 117, 128, 156, 160, 168, 174, 179, 182, 187], "record": [20, 21, 22, 28, 103, 118, 183, 185, 188], "resiz": [20, 21, 32, 36, 187], "coco": [21, 28, 41, 45, 171, 178], "parsedecodecoco": 21, "cocorecorddataset": 21, "interleav": 21, "parallel": [21, 172, 188], "cocoraw": 21, "img_dir": 21, "val2017": 21, "anno_dir": 21, "annot": [21, 41, 130, 131, 171, 178, 188], "instances_val2017": 21, "arrang": [21, 22, 25, 178], "wai": [21, 22, 25, 54, 113, 116, 123, 131, 157, 171, 172, 177, 178, 180, 183, 186, 188], "jpg": [21, 25, 27], "imag": [21, 22, 25, 27, 32, 36, 41, 110, 123, 128, 160, 162, 178, 186, 187, 189], "coconpi": 21, "npy_dir": 21, "npy": 21, "tensorflowdataset": 22, "pytorchdataset": 22, "mxnetdataset": 22, "onnxrtqldataset": 22, "onnxrtitdataset": 22, "IT": [22, 29, 179], "pytorchmxnetwrapdataset": 22, "datafunc": 22, "pytorchmxnetwrapfunct": [22, 36], "framework_dataset": 22, "convent": [22, 41, 109, 125, 175], "imageclassifi": 22, "choos": [22, 99, 114, 123, 167, 179, 184, 186, 188], "tensorflow_itex": [22, 25, 27, 29, 157], "onnxrt_qdq": [22, 29], "onnxrt_qlinearop": [22, 29, 36], "onnxrt_integerop": [22, 29, 36], "pytorch_ipex": [22, 29, 172], "pytorch_fx": [22, 29, 172], "dataset_registri": 22, "dataset_typ": 22, "dataset_format": 22, "data_format": [22, 32], "eg": 22, "raw_imag": 22, "overwrit": 22, "__getitem__": [22, 36, 157, 172], "__len__": 22, "iterabledataset": 22, "also": [22, 36, 38, 45, 56, 58, 110, 113, 114, 115, 116, 123, 125, 129, 130, 131, 157, 161, 165, 167, 171, 172, 176, 178, 179, 180, 182, 183, 186, 188], "__iter__": [22, 157, 172], "over": [22, 45, 130, 161, 167, 171, 178, 186, 188], "download_url": 22, "url": [22, 125, 169, 178], "filenam": [22, 103], "md5": 22, "download": [22, 168, 184], "address": [22, 110, 113, 118, 124, 156, 173, 179], "gen_bar_updat": 22, "progress": [22, 178, 180], "bar": [22, 179], "check_integr": 22, "fpath": 22, "check": [22, 94, 102, 103, 117, 119, 128, 160, 168, 184], "checksum": 22, "calculate_md5": 22, "chunk_siz": 22, "1024": 22, "cifar10": 22, "cifar100": 22, "databas": 22, "extract": [22, 76], "otherwis": [22, 36, 103, 113, 124, 130, 183, 187], "www": [22, 189], "c": [22, 103, 113, 119, 123, 163, 183, 188], "toronto": 22, "edu": 22, "kriz": 22, "cifar": [22, 189], "tar": 22, "gz": 22, "manual": [22, 178], "subset": [22, 25], "internet": 22, "put": 22, "again": [22, 182], "pytorchcifar10": 22, "mxnetcifar10": 22, "tensorflowcifar10": 22, "pytorchcifar100": 22, "mxnetcifar100": 22, "tensorflowcifar100": 22, "mnist": [22, 160], "modifi": [22, 76, 126, 131, 160, 164, 178], "nation": [22, 124], "institut": 22, "standard": [22, 36, 125, 130, 156, 162, 171, 187, 188], "technologi": [22, 109, 170, 172, 175], "fashionmnist": 22, "npz": 22, "idx1": 22, "ubyt": 22, "idx3": 22, "t10k": 22, "pytorchmnist": 22, "mxnetmnist": 22, "tensorflowmnist": 22, "pytorchfashionmnist": 22, "mxnetfashionmnist": 22, "tensorflowfashionmnist": 22, "imagefold": [22, 160, 172], "expect": [22, 113, 115, 123, 124, 125, 163, 170, 180, 183, 188], "folder": [22, 27, 46, 58, 102, 113, 114, 183], "subfold": 22, "belong": [22, 50, 180], "class_1": 22, "xxx": [22, 172], "png": 22, "xxy": 22, "xxz": 22, "class_n": 22, "123": [22, 187], "nsdf3": 22, "asd932_": 22, "categori": [22, 40, 154], "mxnetimagefold": 22, "tensorflowtfrecorddataset": 22, "tensorflowimagerecord": 22, "imagenet": [22, 25, 32, 115, 172, 178, 187, 189], "000": [22, 128], "001": [22, 123, 160, 186], "099": 22, "tensorflowvocrecord": 22, "pascal": 22, "voc": [22, 45], "2012": 22, "val": [22, 25, 172], "00000": 22, "00004": 22, "00001": 22, "00003": 22, "dummi": [23, 24, 45, 117, 128, 171, 172], "dummydataset": [23, 24, 117], "shape": [23, 24, 32, 36, 41, 83, 113, 117, 123, 128, 164, 172, 183, 186, 187], "high": [23, 24, 117, 168, 179, 188], "127": [23, 24, 123, 180, 186], "float32": [23, 24, 36, 41, 99, 113, 123, 129, 154, 172, 180, 183, 186, 187], "rang": [23, 24, 36, 89, 99, 108, 109, 110, 113, 114, 117, 119, 123, 128, 129, 131, 155, 159, 160, 172, 175, 177, 178, 180, 183, 186, 187], "stand_norm": [23, 24], "real": [23, 123, 130, 155, 160, 179, 180], "dummy_v2": 24, "sparse_dummy_v2": 24, "input_shap": 24, "label_shap": 24, "sparsedummydataset": 24, "dense_shap": 24, "sparse_ratio": 24, "imagenetraw": 25, "data_path": 25, "image_list": 25, "img1": 25, "img2": 25, "imgx": 25, "read": [25, 36, 182, 185], "val_map": 25, "txt": [25, 168], "pytorchimagenetraw": 25, "mxnetimagenetraw": 25, "tensorflowimagenetraw": 25, "inteltensorflow": [25, 27], "tensorflowimagenetdataset": 25, "onnxrtimagenetdataset": 25, "class": [26, 46, 58, 81, 113, 114, 115, 117, 118, 126, 130, 156, 157, 171, 172, 176, 177, 180, 184, 188], "bert_dataset": 26, "coco_dataset": 26, "dummy_dataset": 26, "dummy_dataset_v2": 26, "imagenet_dataset": 26, "style_transfer_dataset": 26, "style": [27, 156, 166], "transfer": [27, 123, 159, 172, 186], "styletransferdataset": 27, "content_fold": 27, "style_fold": 27, "crop_ratio": 27, "resize_shap": 27, "256": [27, 32, 86, 160, 172, 187], "image_format": 27, "holder": 27, "labelbalancecocorecordfilt": 28, "balanc": [28, 109, 111, 113, 117, 123, 175, 183, 186], "labelbalancecocorawfilt": 28, "tensorflowfilt": 29, "onnxrtqlfilt": 29, "onnxrtitfilt": 29, "pytorchfilt": 29, "mxnetfilt": 29, "filter_registri": 29, "filter_typ": 29, "__call__": 29, "write": [29, 103, 160, 166, 172], "coco_filt": 30, "quantizedinput": [32, 187], "uint8": [32, 41, 76, 86, 117, 123, 129, 164, 180, 187], "point": [32, 42, 43, 62, 103, 108, 109, 110, 111, 112, 113, 116, 123, 171, 175, 180, 183, 186, 187, 188], "labelshift": [32, 187], "label_shift": [32, 187], "parsedecodeimagenet": [32, 187], "proto": [32, 36, 187], "parsedecodeimagenettransform": 32, "decod": [32, 38, 171, 187], "v1": [32, 42, 43, 45, 54, 111, 160, 162, 163, 171, 174, 178, 184, 185, 186, 189], "tensorflowtransposelastchannel": 32, "transpos": [32, 36, 95, 183, 187], "nhwc": 32, "nchw": 32, "tensorflowshiftrescal": 32, "rescal": [32, 36, 187], "tensorflowresizecropimagenettransform": 32, "height": [32, 36, 160, 187], "width": [32, 36, 123, 155, 160, 178, 180, 187], "random_crop": [32, 187], "resize_sid": [32, 187], "resize_method": 32, "bilinear": [32, 36, 187], "random_flip_left_right": [32, 187], "mean_valu": [32, 187], "channels_last": 32, "subpixel": 32, "rgb": 32, "seri": [32, 128, 168, 172, 187], "applic": [32, 113, 115, 123, 131, 162, 179, 183, 186, 187], "result": [32, 36, 38, 41, 42, 43, 45, 58, 65, 89, 102, 103, 107, 108, 111, 113, 116, 118, 119, 123, 124, 128, 157, 160, 167, 169, 171, 172, 176, 178, 179, 180, 183, 185, 186, 187, 188, 189], "crop": [32, 36, 187], "flip": [32, 36, 187], "left": [32, 36, 123, 186, 187], "right": [32, 41, 123, 124, 125, 126, 186, 187], "std": [32, 36, 172, 187], "bilinearimagenettransform": 32, "central_fract": [32, 187], "875": [32, 187], "fraction": [32, 187], "onnxbilinearimagenettransform": 32, "onnxresizecropimagenettransform": 32, "std_valu": 32, "229": [32, 172], "225": [32, 172, 189], "resizewithaspectratio": 32, "87": [32, 189], "inter_pol": 32, "cv2": 32, "inter_area": 32, "aspect": [32, 36, 187], "imagenet_transform": 33, "postprocess_cl": [34, 172], "user_postprocess": 34, "just": [34, 36, 56, 112, 117, 123, 172, 177, 180, 186, 187, 188], "convert_to_unicod": 35, "text": [35, 36, 38, 43, 109, 111, 113, 123, 162, 169, 175, 178, 179, 183, 186, 187, 189], "unicod": 35, "assum": [35, 41, 129, 164], "utf": 35, "load_vocab": 35, "vocab_fil": [35, 36, 187], "convert_by_vocab": 35, "vocab": 35, "whitespace_token": 35, "whitespac": [35, 43], "clean": [35, 172], "split": [35, 36, 123, 126, 181, 183, 186, 187], "piec": [35, 38, 113, 123, 171, 183], "fulltoken": 35, "tokenzi": 35, "basictoken": 35, "punctuat": [35, 38, 43], "lower": [35, 36, 43, 63, 108, 109, 112, 117, 123, 159, 175, 178, 179, 180, 186, 187, 188], "wordpiecetoken": 35, "unk_token": 35, "unk": 35, "max_input_chars_per_word": 35, "200": [35, 86, 113, 126, 188], "wordpiec": [35, 36, 187], "concat_gener": 36, "inc": [36, 81, 114, 117, 118, 124, 128, 130, 170, 179, 184, 188], "abstract": [36, 129, 131, 166], "own": [36, 56, 107, 123, 130, 157, 167, 171, 176, 183, 185], "inherit": [36, 129, 130], "tensorflowtransform": 36, "mxnettransform": 36, "pytorchtransform": 36, "onnxrtqltransform": 36, "onnxrtittransform": 36, "transform_registri": 36, "transform_typ": 36, "basetransform": 36, "tensorflowwrapfunct": 36, "transform_func": 36, "pytorchmxnettransform": 36, "get_torchvision_map": 36, "interpol": [36, 171, 178, 187], "torchvis": [36, 128, 161], "composetransform": 36, "transform_list": [36, 187], "sever": [36, 109, 110, 120, 123, 159, 167, 172, 173, 175, 178, 181, 186, 187, 188], "croptoboundingbox": [36, 187], "offset_height": [36, 187], "offset_width": [36, 187], "target_height": [36, 187], "target_width": [36, 187], "box": [36, 41, 45, 126, 171, 187, 188], "vertic": [36, 187], "coordin": [36, 62, 187, 188], "top": [36, 45, 125, 171, 187], "corner": [36, 125, 129, 131, 187], "horizont": [36, 187], "mxnetcroptoboundingbox": 36, "onnxrtcroptoboundingbox": 36, "tensorflowcroptoboundingbox": 36, "resizewithratio": [36, 187], "min_dim": [36, 187], "800": [36, 187], "max_dim": [36, 187], "1365": [36, 187], "constant_valu": 36, "np": [36, 62, 160, 186, 187, 188], "arrai": [36, 41, 103, 187], "smaller": [36, 109, 172, 175, 178, 187], "dimens": [36, 113, 183, 187], "ensur": [36, 62, 112, 115, 160, 180, 187], "longest": [36, 187], "side": [36, 128, 187], "doesn": [36, 110, 117, 129, 160, 172, 173], "exce": [36, 183, 187], "zero": [36, 103, 109, 112, 113, 123, 175, 178, 180, 183, 186, 187, 188], "tensorflowresizewithratio": 36, "perm": [36, 187], "permut": [36, 187], "tensorflowtranspos": 36, "mxnettranspos": 36, "pytorchtranspos": 36, "randomverticalflip": [36, 187], "randomli": [36, 62, 123, 186, 187, 188], "tensorflowrandomverticalflip": 36, "randomhorizontalflip": [36, 172, 187], "tensorflowrandomhorizontalflip": 36, "toarrai": [36, 187], "pil": [36, 187], "ndarrai": [36, 90, 163, 187], "numpi": [36, 41, 163, 186, 187], "casttftransform": 36, "castonnxtransform": 36, "castpytorchtransform": 36, "centercroptftransform": 36, "center": [36, 127, 128, 168, 187, 188], "paddedcentercroptransform": 36, "crop_pad": 36, "resizetftransform": 36, "nearest": [36, 86, 113, 114, 123, 183, 187], "bicub": [36, 187], "resizepytorchtransform": 36, "randomcroptftransform": 36, "randomresizedcroppytorchtransform": 36, "08": [36, 187, 189], "randomresizedcropmxnettransform": 36, "randomresizedcroptftransform": 36, "normalizetftransform": 36, "normal": [36, 43, 113, 123, 172, 176, 183, 186, 187], "deviat": [36, 187], "broadcast": [36, 160, 187], "rescalekeraspretraintransform": 36, "rescaletftransform": 36, "rescaletransform": 36, "alignimagechanneltransform": 36, "dim": [36, 123, 186, 187], "align": [36, 124, 183, 187], "w": [36, 111, 123, 178, 186, 187], "must": [36, 41, 125, 126, 130, 154, 157, 168, 180, 187], "pytorchalignimagechannel": 36, "tondarraytransform": 36, "resizemxnettransform": 36, "resizetransform": 36, "cropresizetftransform": 36, "boundari": [36, 187], "area": [36, 41, 109, 171, 175, 187], "pytorchcropresizetransform": 36, "mxnetcropresizetransform": 36, "cropresizetransform": 36, "centercroptransform": 36, "mxnetnormalizetransform": 36, "pytorchnormalizetransform": 36, "normalizetransform": 36, "randomcroptransform": 36, "randomresizedcroptransform": 36, "get_final_text": 36, "pred_text": 36, "orig_text": 36, "project": [36, 106, 124, 125, 179, 185, 188, 190], "predict": [36, 38, 42, 43, 45, 58, 113, 123, 171, 183, 186, 187], "back": 36, "squadexampl": 36, "qas_id": 36, "question_text": 36, "doc_token": 36, "orig_answer_text": 36, "start_posit": 36, "end_posit": 36, "is_imposs": 36, "without": [36, 76, 109, 123, 124, 160, 172, 175, 178, 179, 180, 188], "answer": [36, 42, 43, 124, 178, 187, 189], "posit": [36, 88, 124, 171], "unique_id": 36, "example_index": 36, "doc_span_index": 36, "token_to_orig_map": 36, "token_is_max_context": 36, "input_mask": [36, 172], "segment_id": [36, 172], "read_squad_exampl": 36, "input_fil": 36, "doc_strid": [36, 187], "max_query_length": [36, 187], "output_fn": 36, "inputbatch": 36, "collecttransform": 36, "10833": 36, "tfsquadv1posttransform": 36, "n_best_siz": [36, 187], "20": [36, 178, 187, 189], "384": [36, 187], "64": [36, 86, 110, 118, 123, 170, 183, 186, 187, 189], "max_answer_length": [36, 187], "30": [36, 161, 167, 187, 189], "total": [36, 45, 113, 178, 183, 187, 189], "best": [36, 67, 113, 114, 115, 116, 118, 124, 128, 156, 168, 176, 180, 183, 186, 187, 188], "nbest_predict": [36, 187], "question": [36, 42, 43, 123, 124, 125, 128, 129, 168, 178, 186, 187, 189], "becaus": [36, 116, 123, 126, 180, 186, 187, 188], "anoth": [36, 38, 103, 187, 188], "up": [36, 123, 128, 160, 161, 164, 167, 178, 179, 180, 185, 187, 188], "long": [36, 113, 156, 163, 183, 187], "document": [36, 107, 110, 115, 116, 123, 130, 131, 135, 160, 170, 173, 178, 184, 187], "chunk": [36, 187], "stride": [36, 187], "tfmodelzoocollecttransform": 36, "zoo": [36, 128, 161, 189], "tfsquadv1modelzooposttransform": 36, "squadv1": [36, 187], "see": [36, 38, 113, 123, 124, 125, 126, 127, 156, 169, 172, 183, 186, 188], "parsedecodevoctransform": 36, "intel": [37, 44, 45, 57, 58, 66, 72, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 93, 105, 107, 110, 111, 112, 113, 114, 115, 117, 118, 119, 121, 123, 124, 125, 127, 129, 130, 131, 155, 158, 159, 161, 162, 164, 165, 169, 170, 173, 174, 176, 177, 178, 179, 180, 182, 183, 184, 186, 188, 189], "open": [37, 92, 105, 124, 128, 162, 163, 172, 179], "librari": [37, 105, 110, 117, 128, 168, 172, 173, 179, 180], "popular": [37, 105, 107, 114, 118, 123, 128, 129, 130, 155, 161, 162, 170, 172, 178, 180, 183, 188], "compress": [37, 56, 86, 89, 99, 105, 107, 111, 113, 114, 116, 118, 123, 128, 135, 165, 167, 172, 176, 177, 178, 179, 180, 186, 189], "techniqu": [37, 105, 107, 112, 117, 118, 123, 128, 165, 167, 172, 177, 178, 179, 180, 189], "contrib": 37, "script": [38, 39, 42, 43, 125, 128, 160, 167, 179], "unicoderegex": 38, "hoc": 38, "hack": 38, "recogn": [38, 188], "symbol": [38, 46, 58, 126, 174], "nondigit_punct_r": 38, "compil": [38, 108, 112, 172], "regular": 38, "express": [38, 124], "preced": [38, 123, 186, 188], "digit": [38, 103, 179], "punct_nondigit_r": 38, "symbol_r": 38, "bleu_token": 38, "offici": [38, 42, 43, 124, 186], "mose": 38, "smt": 38, "mosesdecod": 38, "blob": [38, 39, 42, 43, 45, 58, 172], "master": [38, 39, 42, 43, 45, 58, 172, 188], "mteval": 38, "v14": 38, "pl": 38, "l954": 38, "l983": 38, "comput": [38, 39, 42, 43, 45, 89, 103, 109, 110, 112, 113, 123, 155, 157, 159, 162, 171, 172, 173, 175, 178, 179, 180, 183, 186, 188], "bilingu": 38, "understudi": 38, "qualiti": [38, 156], "ha": [38, 110, 115, 117, 123, 125, 129, 130, 131, 157, 162, 167, 172, 173, 178, 180, 182, 185, 186, 188], "been": [38, 110, 113, 117, 123, 131, 156, 172, 173, 183, 186], "machin": [38, 113, 120, 162, 168, 179, 186], "translat": [38, 39, 109, 175, 178, 188], "natur": [38, 113, 162], "approxim": [38, 39, 113, 130, 171, 183], "glue": [38, 45, 171, 172], "word": [38, 113, 123, 156, 171, 178, 183, 189], "ngram": [38, 171], "breviti": [38, 39, 171], "penalti": [38, 39, 171], "doe": [38, 76, 81, 112, 113, 117, 156, 157, 171, 172, 183, 184, 187], "have": [38, 41, 45, 58, 76, 109, 110, 111, 113, 118, 123, 124, 125, 130, 131, 156, 157, 160, 164, 169, 171, 172, 173, 175, 176, 178, 180, 181, 183, 186, 188], "beam": [38, 171], "bleu": [39, 44, 171, 178], "tensor2tensor": 39, "bleu_hook": 39, "compute_bleu": 39, "reference_corpu": 39, "translation_corpu": 39, "max_ord": 39, "use_bp": 39, "against": 39, "gram": 39, "appli": [39, 107, 109, 112, 116, 117, 118, 123, 124, 130, 131, 172, 175, 177, 178, 180, 182, 185, 186, 188], "bleu_scor": 39, "third": [41, 125, 169], "parti": [41, 123, 125, 169, 180], "pycocotool": [41, 163], "noth": [41, 188], "relat": [41, 76, 92, 131, 165, 178, 183], "thu": [41, 123, 172, 178, 180], "cannot": [41, 113, 126, 156, 163, 183], "slim": [41, 52, 54, 174, 178], "jonathanhuang": 41, "wrap": [41, 81, 126, 160], "image_id": [41, 171], "encod": [41, 187], "invok": [41, 130], "groundtruth_dict": 41, "exportgroundtruthtococo": 41, "groundtruth_boxes_list": 41, "groundtruth_classes_list": 41, "max_num_class": 41, "output_path": 41, "detections_list": 41, "exportdetectionstococo": 41, "detection_boxes_list": 41, "detection_scores_list": 41, "detection_classes_list": 41, "cocowrapp": 41, "loadannot": 41, "cocoevalwrapp": 41, "agnostic_mod": 41, "computemetr": 41, "detection_typ": 41, "bbox": [41, 126, 171], "hold": [41, 62], "being": [41, 131], "iou_typ": 41, "iou_thr": [41, 45, 171], "map_point": [41, 45, 171], "cocoev": 41, "To": [41, 56, 109, 110, 111, 112, 113, 116, 118, 119, 123, 125, 128, 130, 131, 156, 160, 173, 175, 178, 182, 183, 184, 186, 188], "mscoco": 41, "org": [41, 86, 126, 178], "Then": [41, 123, 130, 186, 188], "exportsingleimagegroundtruthtococo": 41, "next_annotation_id": 41, "category_id_set": 41, "groundtruth_box": 41, "groundtruth_class": 41, "groundtruth_mask": 41, "groundtruth_is_crowd": 41, "ingest": 41, "api": [41, 45, 58, 73, 74, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 103, 111, 113, 118, 123, 126, 128, 132, 134, 140, 143, 146, 162, 165, 167, 168, 172, 184, 185, 188, 190], "here": [41, 111, 112, 113, 116, 117, 120, 123, 130, 160, 161, 162, 164, 170, 171, 180, 184, 185, 186, 189], "match": [41, 42, 112, 119, 128, 183], "ones": [41, 178], "exportsingleimagedetectionstococo": 41, "associ": 41, "uniqu": [41, 123, 180], "identifi": [41, 54, 118, 178, 183], "assign": [41, 103, 160, 188], "continu": [41, 113, 170, 172, 178], "drop": [41, 110, 111, 113, 123, 125, 172, 173, 178, 183, 186, 189], "num_gt_box": 41, "num_detect": [41, 45, 171, 172], "image_height": 41, "image_width": 41, "detection_mask": 41, "crowd": 41, "rais": [41, 46, 83, 128, 156, 178, 179], "valueerror": [41, 163], "insid": [41, 113, 159, 178, 181, 188], "exportsingleimagedetectionboxestococo": 41, "detection_box": [41, 172], "detection_scor": [41, 172], "detection_class": [41, 172], "exporsingleimagedetectionboxestococo": 41, "exportsingleimagedetectionmaskstococo": 41, "allenai": [42, 43], "bi": [42, 43], "att": [42, 43], "flow": [42, 43, 123, 126, 172], "f1_score": [42, 43], "ground_truth": [42, 43], "f1": [42, 44, 45, 160, 171, 172, 185, 189], "ground": [42, 43], "truth": [42, 43], "metric_max_over_ground_truth": [42, 43], "metric_fn": [42, 43], "exact_match_scor": 42, "exact": 42, "averag": [42, 43, 45, 113, 171, 172, 183, 188, 189], "articl": [42, 43], "paragraph": [42, 43], "qa": [42, 43, 128], "normalize_answ": 43, "remov": [43, 124, 172, 178], "extra": [43, 113, 172, 183], "replac": [43, 108, 109, 112, 156, 160, 172, 175, 184], "newlin": [43, 103], "tab": 43, "abc": [43, 129, 188], "harmon": [43, 45], "recal": [43, 45], "equat": [43, 45, 123, 180, 186], "answer_start": 43, "177": [43, 189], "denver": 43, "bronco": 43, "nfl": 43, "afc": 43, "super": 43, "bowl": 43, "50": [43, 123, 130, 178, 186, 189], "56be4db0acb8001400a502ec": 43, "form": 43, "percentag": [43, 113, 155, 183], "bleu_util": 44, "coco_label_map": 44, "coco_tool": 44, "evaluate_squad": 44, "user_metr": [45, 58], "metric_cl": [45, 58, 172], "recommend": [45, 110, 120, 128, 129, 164, 165, 178, 188], "design": [45, 63, 107, 112, 114, 117, 172, 178, 180], "sub_class": [45, 58], "basemetr": [45, 58], "tensorflowmetr": 45, "maintain": [45, 112, 113, 117, 123, 124, 125, 156, 174, 178, 183, 184], "pytorchmetr": 45, "mxnetmetr": 45, "onnxrtqlmetr": 45, "onnxrtitmetr": 45, "metric_registri": 45, "metric_typ": 45, "cross": [45, 119, 166, 188], "decorator_metr": 45, "single_output": 45, "hvd": [45, 160], "wrappytorchmetr": 45, "wrapmxnetmetr": 45, "wraponnxrtmetr": 45, "binari": [45, 163, 171, 184], "proport": 45, "were": [45, 178], "pred_list": 45, "pytorchloss": 45, "print": [45, 103, 119, 123, 160, 171, 172, 178, 186, 188], "mae": [45, 171], "compare_label": [45, 58, 171], "error": [45, 67, 100, 113, 123, 171, 183, 186, 188], "actual": [45, 112, 160], "compar": [45, 103, 109, 112, 113, 118, 123, 159, 171, 175, 178, 180, 183, 185, 188], "pred": [45, 171], "rmse": [45, 171, 188], "squar": [45, 67, 113, 171, 188], "estim": [45, 54, 188], "tensorflowtopk": 45, "k": [45, 58, 171, 178], "among": [45, 109, 123, 175, 186], "outcom": 45, "consid": [45, 124, 155, 156, 188], "find": [45, 62, 103, 118, 129, 170, 178, 183, 185, 186, 188], "num_correct": 45, "num_sampl": 45, "generaltopk": 45, "cocomapv2": [45, 171], "anno_path": [45, 171], "95": [45, 170, 171, 189], "map_kei": 45, "detectionboxes_precis": 45, "output_index_map": [45, 171], "tensorflowmap": 45, "tensorflowcocomap": 45, "tensorflowvocmap": 45, "squadf1": [45, 171], "miou": 45, "num_class": 45, "21": [45, 123, 170, 179, 186, 189], "iou": 45, "intersect": [45, 129, 171], "onnxrtglu": 45, "roc": 45, "dlrm": 45, "register_customer_metr": 45, "mani": [45, 58, 113, 117, 123, 156, 157, 168, 183, 188], "tell": [45, 58], "what": [45, 58, 89, 117, 124, 179], "topk": [45, 58, 160, 171, 172, 180], "matrix": [45, 58, 116, 123], "updat": [45, 58, 107, 113, 163, 170, 171, 172, 178, 183, 186, 188], "across": [46, 109, 118, 158, 165, 172, 175, 178, 181, 186, 188], "frozen": [46, 54, 58, 174], "graph_def": [46, 54, 58, 95], "ckpt": [46, 54, 58, 189], "savedmodel": [46, 54, 58], "onnx_ml_pb2": [46, 174], "modelproto": [46, 94, 174], "gluon": [46, 58, 174], "hybirdblock": [46, 58], "mixed_precis": [46, 172], "obj": [46, 56, 58, 89, 92, 103], "measur": [46, 98, 113, 117, 123, 129, 154, 165, 171, 172, 183, 188], "variou": [46, 109, 112, 114, 117, 131, 167, 175, 178, 181], "dl": [46, 110, 166, 179, 189], "assertionerror": [46, 83], "basemodel": [47, 78, 81, 117], "plai": [47, 113, 123, 179, 183, 186], "graph": [47, 54, 108, 112, 123, 126, 129, 160, 166, 174, 180, 181, 182], "role": [47, 113, 123, 183, 186], "base_model": 48, "keras_model": 48, "mxnet_model": 48, "nets_factori": 48, "onnx_model": 48, "tensorflow_model": 48, "torch_model": 48, "kerasmodel": 49, "get_model_fwk_nam": 50, "fwk": 50, "mxnetmodel": 51, "net": [52, 128], "factori": 52, "tfslimnetsfactori": 52, "onnxmodel": 53, "get_model_typ": 54, "validate_graph_nod": 54, "node_nam": [54, 130], "node": [54, 94, 96, 119, 129, 160, 181, 188, 189], "compat": [54, 125, 160, 174, 178, 184], "graphdef": [54, 174], "validate_and_inference_input_output": 54, "input_tensor_nam": 54, "output_tensor_nam": 54, "infer": [54, 56, 58, 81, 89, 110, 111, 112, 113, 116, 117, 123, 128, 129, 130, 155, 159, 165, 172, 173, 176, 178, 179, 180, 183, 186, 188], "graph_sess": 54, "session": [54, 172], "sess": 54, "graph_def_sess": 54, "frozen_pb_sess": 54, "load_saved_model": 54, "saved_model_tag": 54, "signatur": 54, "tag": [54, 123, 186], "metagraphdef": 54, "analyz": [54, 185, 186], "input_tensor": 54, "output_tensor": 54, "try_loading_kera": 54, "try": [54, 117, 123, 126, 128, 178, 180, 186, 188], "keras_sess": 54, "slim_sess": 54, "checkpoint_sess": 54, "estimator_sess": 54, "input_fn": 54, "saved_model_sess": 54, "tensorflowbasemodel": 54, "tensorflowsavedmodelmodel": 54, "tensorflowllmmodel": 54, "exceed": 54, "protobuf": 54, "2gb": 54, "tensorflowqatmodel": 54, "tensorflowcheckpointmodel": 54, "checkpoint": [54, 102, 174], "tensorflowmodel": 54, "pytorchbasemodel": 55, "pytorchmodel": 55, "pytorchfxmodel": 55, "ipexmodel": 55, "driven": [56, 128, 165, 172, 176], "objective_registri": 56, "objective_custom_registri": 56, "obj_cl": 56, "eural_compressor": 56, "objective_cl": 56, "user_object": 56, "__class__": 56, "__name__": 56, "objective_cfg": 56, "deep_get": [56, 103], "usr_cfg": 56, "deep_set": [56, 103], "user_obj_cfg": 56, "With": [56, 117, 123, 126, 129, 131, 157, 168, 172, 176, 178, 179, 180, 185, 186, 188, 189], "easili": [56, 118, 123, 129, 176, 186], "special": [56, 114, 126, 157, 171, 172, 176, 178, 183], "peak": [56, 119, 176], "memori": [56, 103, 109, 110, 111, 113, 116, 119, 123, 155, 157, 159, 172, 173, 175, 176, 178, 180, 181, 183, 186, 188, 189], "block": [56, 109, 113, 167, 175, 176, 178, 183, 188], "multiobject": 56, "metric_criterion": 56, "metric_weight": 56, "obj_criterion": 56, "obj_weight": 56, "is_measur": 56, "calib_dataload": [58, 78, 81, 115, 116, 117, 118, 126, 128, 157, 166, 171, 172, 180, 181, 182, 183], "calib_func": [58, 78, 81, 117, 182], "entir": [58, 89, 111, 113, 116, 126, 130, 131, 155, 178], "autotunestrategi": 59, "There": [59, 61, 108, 112, 116, 123, 156, 164, 167, 172, 183, 186, 188], "onc": [59, 61, 130, 131, 157, 178, 179, 188, 189], "polici": [59, 61, 67, 118, 124, 128, 190], "automixedprecisiontunestrategi": 60, "basictunestrategi": 61, "bayesiantunestrategi": 62, "acq_max": 62, "ac": 62, "gp": 62, "y_max": 62, "n_warmup": 62, "10000": [62, 178], "n_iter": 62, "acquisit": 62, "gaussian": [62, 188], "relev": [62, 130, 131, 156, 178], "known": [62, 109, 172, 175, 178, 180, 188], "limit": [62, 103, 109, 113, 114, 117, 128, 170, 175, 180, 183], "acq": 62, "randomst": 62, "scipi": 62, "x_max": 62, "targetspac": 62, "pbound": 62, "9527": [62, 172], "append": [62, 126, 159, 172, 177], "while": [62, 110, 112, 113, 117, 123, 129, 130, 161, 167, 173, 178, 180, 183, 186], "duplic": 62, "bayesianoptim": 62, "verbos": [62, 96], "conservativetunestrategi": 63, "o0": [63, 188], "who": [63, 124], "exhaustivetunestrategi": 64, "hawq_v2tunestrategi": 65, "hawq": [65, 188], "v2": [65, 111, 157, 160, 162, 163, 170, 184, 186, 188, 189], "hessian": [65, 113, 183, 188], "network": [65, 86, 109, 110, 123, 155, 159, 162, 172, 175, 179, 180, 186, 188], "made": [65, 123, 129, 180, 184, 188], "small": [65, 113, 123, 178, 183, 188, 189], "impact": [65, 178, 184, 188], "auto_mixed_precis": 66, "msetunestrategi": 67, "those": [67, 103, 112, 117, 123, 159, 166, 172, 173, 177, 178, 180, 188], "mse_v2tunestrategi": 68, "revert": [68, 76, 188], "fx": [68, 83, 108, 110, 112, 167, 173, 179, 180, 182], "randomtunestrategi": 69, "strategy_registri": [70, 188], "tunestrategi": [70, 188], "tunestrategymeta": 70, "metaclass": 70, "tuning_sampl": 72, "tuning_spac": [72, 73, 75], "tuning_struct": [72, 73, 74], "tuningord": 73, "Not": [73, 74, 103, 156], "tuningsampl": 73, "tuningspac": [73, 74], "tuning_order_lst": 73, "initial_op_tuning_cfg": 73, "modelwisetuningsampl": 73, "tuning_items_prior": 73, "op_dtype_dict": 73, "optuningconfig": [73, 74, 75], "optypewisetuningsampl": 73, "opwisetuningsampl": 73, "fallbacktuningsampl": 73, "op_dtyp": 73, "accumul": [73, 109, 113, 175, 188], "skip_first": 73, "lowerbitssampl": 73, "blockfallbacktuningsampl": 73, "op_block_lst": 73, "target_dtyp": 73, "smoothquantsampl": 73, "alpha_list": 73, "weightonlyquantsampl": 73, "tuningitem": 74, "item_typ": 74, "capabl": [74, 110, 113, 123, 130, 131, 154, 164, 172, 173, 178, 180, 188], "intern": [74, 157, 171, 178], "merg": [74, 119, 188], "tree": 74, "pattern_to_intern": 74, "default_dtyp": 74, "pattern_to_path": 74, "quant_mode_from_pattern": 74, "internal_pattern": 74, "initial_tuning_cfg_with_quant_mod": 74, "op_name_typ": 74, "quant_mod": [74, 130, 131], "cfg": [74, 92, 130, 131], "step1": 74, "step2": 74, "complet": [74, 129, 130, 178, 180, 188, 189], "step3": 74, "step4": 74, "step5": 74, "op_typ": [75, 79, 111, 112], "op_quant_mod": 75, "quanttyp": 76, "quantopt": 76, "quant_typ": 76, "quant_opt": 76, "preprocess_user_cfg": 76, "op_user_cfg": 76, "op_user_cfg_modifi": 76, "group_siz": [76, 86, 113, 118, 183], "32": [76, 86, 109, 110, 117, 118, 160, 166, 175, 183, 189], "ordereddefaultdict": 76, "extract_data_typ": 76, "data_typ": 76, "sign": [76, 86, 113, 123, 125, 128, 131, 155, 179, 180, 183, 185], "unsign": [76, 131, 183], "reverted_data_typ": 76, "signed_flag": 76, "get_adaptor_nam": 76, "build_slave_faker_model": 76, "slave": [76, 188], "virtual": [76, 179], "classregist": 76, "calib_iter": [78, 81, 117, 130], "main": [78, 81, 85, 88, 113, 114, 115, 117, 119, 120, 123, 126, 157, 160, 172, 178, 180, 183], "entri": [78, 81, 85, 88, 103, 114, 156, 169], "staticquantconfig": [79, 86, 112, 115, 116, 117, 118], "weight_dtyp": [79, 115], "weight_sym": [79, 115, 117, 118], "weight_granular": [79, 115], "per_tensor": [79, 86, 115, 130, 131, 164, 180], "weight_algorithm": 79, "minmax": [79, 86, 112, 130, 131, 155, 164, 180], "act_dtyp": [79, 86, 109, 111, 112, 115, 175], "act_sym": [79, 86, 112, 115, 117, 118], "act_granular": [79, 86, 115], "act_algorithm": 79, "get_default_static_quant_config": 79, "smoothquantconfig": [79, 86, 111, 116, 117], "fold": [79, 86, 96, 111, 113, 164, 183, 186], "percentil": [79, 155], "999": 79, "conv2d": [79, 130, 131, 162, 164, 186, 188], "scales_per_op": 79, "record_max_info": 79, "weight_clip": 79, "auto_alpha_arg": [79, 86, 186], "default_sq_alpha_arg": 79, "get_default_sq_config": [79, 86], "rtn": [79, 85, 86, 114, 120, 123, 156, 181, 183], "autotun": [80, 87, 115, 116, 117, 123, 136, 156], "quantize_model": [81, 115, 116, 117, 123], "quant_config": [81, 88, 108, 109, 111, 112, 113, 114, 115, 116, 117, 120, 165, 175], "substitut": [81, 117], "quantize_model_with_single_config": 81, "pt2e_export": 82, "export_model_for_pt2e_qu": 83, "dynamic_shap": 83, "graph_modul": 83, "graphmodul": [83, 126, 182], "eager": [83, 108, 112, 113, 114, 128, 160, 167, 180, 182], "pt2e": 83, "get_rtn_double_quant_config_set": 85, "rtnconfig": [85, 86, 113, 114, 118, 165], "doubl": [85, 86, 113, 179], "get_all_config_set": 85, "run_fn": [85, 88, 111, 112, 113, 114], "run_arg": [85, 88, 114], "_description_": [85, 86, 114], "operatorconfig": 86, "torchbaseconfig": 86, "use_sym": [86, 113, 118], "group_dim": [86, 113, 183], "use_full_rang": [86, 113], "use_mse_search": [86, 113], "use_layer_wis": [86, 113], "model_path": [86, 113], "use_double_qu": [86, 113], "double_quant_dtyp": [86, 113], "double_quant_bit": [86, 113], "double_quant_use_sym": [86, 113], "double_quant_group_s": [86, 113], "quant_lm_head": [86, 113], "get_default_rtn_config": [86, 120], "processor_typ": [86, 120], "torch_util": [86, 128, 181, 186], "get_default_double_quant_config": 86, "bnb_nf4": 86, "gptqconfig": [86, 113, 118], "act_ord": [86, 113], "percdamp": [86, 113, 183], "block_siz": [86, 113, 183], "2048": [86, 103, 113, 128, 183], "static_group": [86, 113, 183], "gptq": [86, 114, 120, 123, 156, 170, 181, 183], "arxiv": [86, 109, 113, 123, 128, 155, 175, 178, 179, 183, 186], "ab": [86, 117, 123, 178, 180, 186], "2210": [86, 113, 123, 183], "17323": [86, 113, 123, 183], "awqconfig": [86, 113], "use_auto_scal": [86, 113], "use_auto_clip": [86, 113], "absorb_layer_dict": 86, "awq": [86, 114, 123, 181, 183], "llm": [86, 109, 111, 112, 113, 116, 123, 165, 175, 178, 179, 181, 183, 186], "acceler": [86, 110, 111, 113, 116, 123, 128, 168, 172, 178, 179, 182, 183, 186, 188], "2306": [86, 113, 123, 183], "00978": [86, 113, 123, 183], "get_default_awq_config": 86, "teqconfig": [86, 113], "absorb_to_lay": 86, "teq": [86, 114, 128, 179, 181, 183], "get_default_teq_config": 86, "autoroundconfig": [86, 113], "act_bit": 86, "act_group_s": 86, "act_dynam": 86, "enable_full_rang": [86, 99, 113, 181, 183], "lr_schedul": [86, 113, 172, 178], "enable_quanted_input": [86, 113], "enable_minmax_tun": [86, 113], "minmax_lr": [86, 113], "low_gpu_mem_usag": [86, 113], "seqlen": [86, 113, 128], "nsampl": [86, 183], "rand": [86, 113, 123, 186], "nblock": 86, "gradient_accumulate_step": [86, 113], "not_use_best_ms": [86, 113], "dynamic_max_gap": [86, 113], "scale_dtyp": [86, 99, 113, 183], "quant_block_list": 86, "autoround": [86, 114, 123, 128, 170], "via": [86, 113, 123, 124, 128, 160, 167, 172, 178, 179], "gradient": [86, 113, 123, 128, 167, 172, 178, 179, 189], "descent": [86, 113, 123, 128, 179], "2309": [86, 113, 123], "05516": [86, 113, 123], "mxquantconfig": [86, 109, 175], "w_dtype": [86, 109, 111, 112, 175], "out_dtyp": 86, "bfloat16": [86, 110, 173, 182], "blocksiz": [86, 109, 175], "round_method": 86, "mx": [86, 109, 114, 128, 165, 175], "get_default_mx_config": 86, "dynamicquantconfig": [86, 108], "w_sym": 86, "w_granular": 86, "w_algo": 86, "act_algo": [86, 112], "get_default_dynamic_config": 86, "per_channel": [86, 130, 131, 164, 180], "model_info": 86, "get_default_static_config": 86, "scale_shar": 86, "init_alpha": 86, "alpha_min": [86, 186], "alpha_max": [86, 186], "alpha_step": [86, 186], "shared_criterion": [86, 186], "do_blockwis": [86, 186], "hqqconfig": [86, 113], "quant_zero": [86, 113], "quant_scal": [86, 113], "scale_quant_group_s": [86, 113], "half": [86, 110, 113, 173], "quadrat": [86, 113], "hqq": [86, 114, 128], "blog": [86, 128, 179], "mobiusml": [86, 113], "io": [86, 113], "hqq_blog": [86, 113], "get_default_hqq_config": 86, "fp8config": 86, "fp8_e4m3": 86, "w_observ": 86, "minmax_per_channel": 86, "act_observ": 86, "hpu": 86, "fp8": [86, 109, 114, 128, 175, 179], "get_default_fp8_config": 86, "get_default_fp8_config_set": 86, "get_default_mixed_precision_config": 86, "get_default_mixed_precision_config_set": 86, "get_woq_tuning_config": [86, 118], "woq": [86, 109, 128, 170, 175], "inplac": [88, 114], "prepar": [88, 108, 109, 111, 112, 113, 114, 117, 120, 123, 126, 160, 165, 178, 180], "observ": [88, 108, 112, 113, 114, 131, 183, 185, 188], "place": [88, 114, 159, 168, 178, 188], "loop": [89, 126, 130, 131, 164, 185, 188], "compressionmanag": 89, "deal": 89, "pruningconfig": 89, "orchestr": [89, 107, 167], "callback": [89, 92, 126, 172, 177, 178, 180], "on_train_begin": [89, 126, 159, 172, 177, 178, 180], "train_loop": [89, 172, 177], "epoch": [89, 157, 159, 160, 172, 177, 178], "on_epoch_begin": [89, 92, 159, 172, 177], "batch": [89, 113, 157, 159, 172, 177, 178, 180, 186, 187, 188, 189], "on_step_begin": [89, 92, 159, 172, 177, 178], "on_after_compute_loss": [89, 159, 172, 177], "backward": [89, 123, 159, 160, 172, 177, 178, 180, 184], "on_before_optimizer_step": [89, 159, 172, 177, 178], "on_step_end": [89, 92, 159, 172, 177], "on_epoch_end": [89, 92, 159, 172, 177], "on_train_end": [89, 159, 172, 177, 178, 180], "path_to_sav": 89, "train_func": [89, 160, 172, 180], "top1": [89, 171, 178, 180, 189], "callbacks_list": 89, "layerhistogramcollector": 90, "histogram": [90, 103], "num_bin": 90, "8001": 90, "layer_tensor": 90, "include_lay": 90, "collector": 90, "diverg": [90, 98, 131, 155, 188], "get_func_from_config": 92, "func_dict": 92, "get_preprocess": 92, "get_metr": 92, "get_postprocess": 92, "get_algorithm": 92, "create_dataset": 92, "data_sourc": 92, "cfg_preprocess": 92, "cfg_filter": 92, "create_dataload": 92, "dataloader_cfg": 92, "create_eval_func": 92, "postprocess_cfg": 92, "interfac": [92, 110, 112, 114, 117, 123, 167, 172, 180, 184], "baselin": [92, 118, 185, 186], "create_train_func": 92, "train_cfg": 92, "hook": [92, 159, 172, 178, 186], "Their": 92, "qlinear2qdq": 93, "check_model": 94, "onnx_qlinear_to_qdq": 94, "input_name_to_nod": 94, "qlinearop": [94, 167, 180, 189], "destin": 94, "tf_to_fp32_onnx": 95, "save_path": [95, 96, 129, 174], "inputs_as_nchw": 95, "tool": [95, 103, 123, 128, 129, 172, 178, 179, 180], "tf_to_int8_onnx": 95, "int8_model": [95, 96], "get_node_map": 96, "fp32_model": [96, 103, 111, 112, 116, 117, 181, 183], "fp32_onnx_path": 96, "module_node_map": 96, "get_quantizable_onnx_op": 96, "quantize_nod": 96, "dynamic_quant_export": 96, "pt_fp32_model": 96, "pt_int8_model": 96, "q_config": [96, 129], "weight_typ": 96, "s8": 96, "static_quant_export": 96, "_quantiz": 96, "torch_to_fp32_onnx": 96, "do_constant_fold": 96, "torch_to_int8_onnx": 96, "auxiliari": 97, "collect_layer_histogram": 97, "create_obj_from_config": 97, "kl_diverg": 97, "load_huggingfac": [97, 172], "weights_detail": 97, "pretrain": 99, "optimizedmodel": 99, "from_pretrain": [99, 128, 165, 172], "save_for_huggingface_upstream": [99, 172], "output_dir": [99, 114, 172], "export_compressed_model": [99, 183], "saved_dir": [99, 183], "use_optimum_format": [99, 183], "compression_dtyp": [99, 183], "int32": [99, 113, 183], "compression_dim": [99, 183], "_type_": 99, "leverag": [99, 108, 112, 115, 118, 123, 128, 162, 177, 180, 183, 188], "symmetr": [99, 117, 131, 180, 183, 187, 188], "comoress": 99, "float16": [99, 113, 183], "msg": 100, "debug": [100, 188], "fatal": 100, "warn": [100, 156], "alia": [100, 103], "is_int8_model": 102, "load_weight_onli": 102, "checkpoint_dir": 102, "layer_wis": [102, 181], "qconfig": [102, 113, 183], "best_model": [102, 110, 115, 116, 117, 118, 183], "pt": [102, 113, 128, 165, 168, 174, 179, 180, 182, 183], "history_cfg": 102, "best_configur": 102, "best_model_weight": 102, "snapshot": 102, "recover_model_from_json": 102, "json_file_path": 102, "recov": [102, 103, 129, 159], "cfg_from_fil": 103, "yaml_fil": [103, 160], "version1_lt_version2": 103, "version1": 103, "version2": 103, "version1_gt_version2": 103, "greater": [103, 117, 178, 188], "version1_eq_version2": 103, "version1_gte_version2": 103, "version1_lte_version2": 103, "time_limit": 103, "context": [103, 113, 123, 183], "get_siz": 103, "seen": [103, 129], "recurs": 103, "compute_spars": 103, "non": [103, 110, 113, 126, 183, 188], "fault_tolerant_fil": 103, "temporari": [103, 124], "equal_dict": 103, "d1": 103, "d2": 103, "compare_kei": 103, "ignore_kei": 103, "except": [103, 113, 156, 180, 181], "ignor": [103, 113, 123, 155, 183, 186, 188], "combine_histogram": 103, "old_hist": 103, "arr": 103, "old": [103, 111, 172, 184], "get_tensor_histogram": 103, "tensor_data": [103, 104], "bin": [103, 163], "get_all_fp32_data": 103, "get_tuning_histori": 103, "tuning_history_path": 103, "num": 103, "offlin": [103, 111, 116, 117, 123, 124, 172, 180, 186], "str2arrai": 103, "dequantize_weight": 103, "weight_tensor": 103, "min_filter_tensor": 103, "max_filter_tensor": 103, "dequant": [103, 123, 126, 130, 186], "scale_info": 103, "captureoutputtofil": 103, "tmp_file_path": 103, "stream": [103, 189], "sy": [103, 156], "stderr": 103, "captur": [103, 112, 113], "global_st": 103, "load_data_from_pkl": 103, "pkl": 103, "dump_data_to_loc": 103, "show_memory_info": 103, "hint": 103, "show": [103, 109, 123, 124, 160, 172, 175, 186, 188], "dump_class_attr": 103, "dot": [103, 110, 123, 173, 180], "nest": 103, "person": [103, 124, 179], "john": 103, "deep": [103, 107, 109, 110, 114, 117, 123, 128, 129, 130, 157, 167, 168, 172, 173, 175, 179, 180, 188], "sex": [103, 124], "male": 103, "compare_object": 103, "obj1": 103, "obj2": 103, "ignore_attr": 103, "comparison": [103, 183, 184], "alias_param": 103, "param_nam": 103, "param_alia": 103, "alias": [103, 156], "print_tabl": 103, "column_map": 103, "table_entri": 103, "titl": [103, 169, 188], "insert_newlin": 103, "tabl": [103, 109, 131, 162, 165, 175, 189], "prettyt": 103, "column": [103, 113, 123, 183, 186], "handler": [103, 188], "row": [103, 123, 186], "decim": 103, "get_tensors_info": 103, "workload_loc": 103, "about": [103, 107, 124, 156, 157, 172, 178, 182, 188, 189], "workload": [103, 110, 179], "get_weights_detail": 103, "weightdetail": 103, "dump_tabl": 103, "filepath": [103, 156], "file_typ": 103, "csv": 103, "extens": [103, 110, 111, 112, 114, 123, 128, 129, 136, 156, 164, 165, 167, 168, 170, 172, 173, 174, 178, 179, 180, 183, 186, 188], "dump_table_to_csv": 103, "get_number_of_socket": 103, "platform": [103, 119, 123, 128, 167, 179, 180], "opentri": 103, "activation_min": 103, "activation_max": 103, "print_op_list": 103, "get_op_list": 103, "minmax_file_path": 103, "input_model_tensor": 103, "optimized_model_tensor": 103, "activation_min_max": 103, "calculate_ms": 103, "mse_metric_gap": 103, "fp32_tensor": 103, "dequantize_tensor": 103, "euclidean": 103, "distanc": 103, "check_key_exist": 103, "weightsdetail": 104, "input_tensor_data": 104, "optimized_tensor_data": 104, "weightsstatist": 104, "welcom": [106, 124, 125, 128, 190], "aim": [107, 118, 128, 165, 170, 178, 186, 188], "help": [107, 118, 123, 156, 170, 174, 183, 188], "familiar": 107, "concept": [107, 166, 185], "learn": [107, 109, 110, 113, 114, 117, 123, 128, 129, 130, 157, 162, 166, 167, 168, 172, 173, 175, 178, 179, 180, 186, 188], "conduct": [107, 126, 172, 188], "mainstream": [107, 128], "part": [107, 110, 123, 126, 168, 173, 178, 181, 186], "quick": [107, 120, 164, 173, 178], "understand": [107, 123, 180], "workflow": [107, 109, 128, 130, 131, 162, 165, 168, 173, 175], "broad": [107, 128, 167], "notebook": 107, "oneapi": [107, 110, 168, 179], "ai": [107, 109, 110, 128, 175, 179, 182], "analyt": [107, 168, 179], "toolkit": [107, 126, 168, 179], "introduc": [107, 113, 123, 129, 130, 131, 164, 172, 180, 183, 184, 186], "mechan": [107, 178, 185], "tutori": [107, 126, 179], "comprehens": [107, 114, 117, 172], "migrat": [107, 111, 116, 123, 186], "previou": [107, 114, 123, 130, 131, 172, 178, 184, 186, 188, 189], "veri": [107, 113, 123, 172, 180, 183, 188], "introduct": 107, "dive": [107, 164], "bitwidth": 108, "factor": [108, 111, 113, 117, 123, 183, 186, 189], "whole": [108, 123, 131, 180, 189], "runtim": [108, 123, 125, 128, 129, 130, 132, 157, 161, 164, 167, 173, 175, 183, 188], "w8a8": [108, 112, 113, 123, 181, 183], "x86inductorquant": 108, "four": [108, 112, 118, 189], "neural_compressor": [108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 126, 128, 131, 154, 156, 157, 159, 160, 162, 165, 166, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 184, 185, 186, 187, 188], "userfloatmodel": [108, 112], "exported_model": [108, 112], "prepared_model": [108, 111, 112, 113, 120, 165], "q": [108, 112, 114, 123, 183, 186], "dq": [108, 112, 114, 123, 186], "_inductor": [108, 112], "freez": [108, 112, 178], "opt_model": [108, 112, 172], "set_loc": [108, 111, 112, 113, 114, 115], "releas": [108, 112, 128, 165, 168, 190], "breakthrough": [109, 175], "emerg": [109, 175, 186], "analysi": [109, 175, 178, 185], "chatbot": [109, 175, 179], "fuel": [109, 175], "nevertheless": [109, 175], "power": [109, 117, 172, 175, 179], "come": [109, 170, 175, 188], "challeng": [109, 113, 175, 181], "explos": [109, 175], "growth": [109, 110, 172, 173, 175, 178], "pose": [109, 175, 181], "obstacl": [109, 175], "practic": [109, 175], "preserv": [109, 113, 155, 175, 178, 183], "promot": [109, 113, 175], "microsoft": [109, 128, 129, 175], "msfp": [109, 175], "mxfp8": [109, 175], "e5m2": [109, 175], "e8m0": [109, 175], "e4m3": [109, 175], "mxfp6": [109, 175], "fp6": [109, 175], "e3m2": [109, 175], "e2m3": [109, 175], "mxfp4": [109, 175], "fp4": [109, 113, 175, 183], "e2m1": [109, 113, 175, 183], "mxint8": [109, 175], "At": [109, 125, 130, 175, 188], "equival": [109, 111, 113, 116, 123, 128, 175, 179, 183, 186], "demonstr": [109, 113, 118, 120, 128, 161, 175], "abil": [109, 129, 130, 164, 175, 186], "occupi": [109, 175], "incur": [109, 175], "energi": [109, 175], "cost": [109, 113, 123, 175, 180, 183], "silicon": [109, 175], "seamlessli": [109, 175, 178, 188], "offer": [109, 113, 117, 175], "meticul": [109, 175], "craft": [109, 175], "empow": [109, 175], "sacrif": [109, 175, 179], "shown": [109, 111, 123, 157, 171, 172, 175, 176, 177, 178, 181, 186, 188], "explor": [109, 129, 175], "focus": [109, 113, 117, 124, 129, 165, 175], "distinct": [109, 175], "friendli": [109, 123, 164, 172, 175, 179, 186], "adapt": [109, 124, 130, 175, 179], "granular": [109, 123, 129, 130, 131, 164, 167, 175, 180, 186], "fall": [109, 175], "consumpt": [109, 113, 123, 175, 186], "frac": [109, 123, 175, 186], "amax": [109, 175], "expon": [109, 175], "floor": [109, 175], "log2": [109, 175], "represent": [109, 113, 123, 124, 126, 155, 159, 175, 178, 180], "rmin": [109, 117, 123, 175, 180], "user_model": [109, 165, 175], "darvish": [109, 175], "rouhani": [109, 175], "bita": [109, 175], "et": [109, 113, 123, 155, 175, 183, 186], "al": [109, 113, 123, 128, 155, 168, 175, 183, 186], "push": [109, 113, 123, 125, 175, 178, 183, 186], "narrow": [109, 175], "inferenc": [109, 175], "cloud": [109, 125, 128, 175, 179], "33": [109, 170, 175, 189], "2020": [109, 175], "10271": [109, 175], "10281": [109, 175], "ocp": [109, 175], "preprint": [109, 113, 123, 155, 175, 178, 183, 186], "2310": [109, 175], "10537": [109, 175], "2023": [109, 113, 123, 128, 175, 178, 183, 186], "recent": [110, 172, 173], "significantli": [110, 113, 172, 173, 178, 188], "propos": [110, 113, 123, 129, 173, 183, 186], "googl": [110, 128, 156, 173, 179], "ieee": [110, 123, 173, 186], "wide": [110, 113, 123, 128, 161, 173, 178, 180], "sixteen": [110, 173], "bandwidth": [110, 113, 123, 172, 173, 183], "3rd": [110, 123, 173, 179, 180, 182], "gen": [110, 123, 170, 173, 179, 180, 182], "xeon": [110, 119, 123, 128, 168, 169, 170, 173, 179, 180, 182, 189], "scalabl": [110, 117, 123, 128, 168, 170, 173, 179, 180, 182], "codenam": [110, 170, 173], "cooper": [110, 168, 173, 179], "lake": [110, 168, 173, 179], "boost": [110, 128, 173, 178, 179], "purpos": [110, 111, 112, 113, 115, 164, 173, 180], "x86": [110, 173], "instruct": [110, 111, 123, 130, 131, 168, 173, 178, 179, 180, 186, 189], "avx512": [110, 123, 173, 180], "vcvtne2ps2bf16": [110, 173], "vcvtneps2bf16": [110, 173], "vdpbf16p": [110, 173], "product": [110, 123, 167, 173, 179, 180, 185, 188], "found": [110, 128, 156, 170, 173, 186, 188, 189], "publish": [110, 124, 169, 170, 173, 186], "4th": [110, 123, 170, 179, 180], "isa": 110, "vector": 110, "512": [110, 113], "avx": 110, "16": [110, 168, 183, 189], "754": 110, "complement": [110, 178], "latest": [110, 114, 128, 168, 179, 184], "deliv": [110, 113, 172, 179, 184], "flexibl": [110, 113, 117, 128, 178, 183], "amx": [110, 179], "improv": [110, 112, 113, 123, 125, 128, 155, 156, 172, 178, 179, 180, 182, 183, 188, 189], "ideal": 110, "recognit": [110, 160, 162, 178], "advantag": [110, 178, 188], "thei": [110, 124, 156, 164, 172, 176], "integr": [110, 114, 117, 123, 129, 172, 183], "onednn": [110, 117, 173, 180], "engin": 110, "fbgemm": [110, 173, 180], "10004": [110, 113, 114, 119, 126, 129, 157, 159, 160, 164, 167, 173, 175, 177, 181, 183], "avx512_bf16": [110, 173], "11": [110, 123, 168, 171, 173, 186, 188, 189], "avx512_fp16": 110, "onednn_max_cpu_isa": 110, "avx512_core_amx_fp16": 110, "mai": [110, 113, 116, 123, 124, 125, 130, 155, 156, 162, 163, 169, 173, 179, 180, 183, 186, 188], "eval_acc_fn": [110, 115, 117], "acc": [110, 115, 170, 178, 189], "might": [110, 126, 156, 188], "custom_tune_config": [110, 115, 116, 117, 118], "build_torch_model": 110, "gigant": [111, 116, 186], "systemat": [111, 116, 186], "outlier": [111, 113, 116, 123, 130, 155, 183, 186], "quantif": [111, 113, 116, 183, 186], "difficult": [111, 116, 118, 123, 129, 186], "difficulti": [111, 116, 123, 186], "mathemat": [111, 116, 123, 186], "descript": [111, 126, 130, 131, 157, 186], "stai": [111, 113, 114, 183, 186], "achiev": [111, 112, 113, 114, 115, 118, 120, 123, 162, 170, 172, 177, 178, 179, 180, 186, 188], "abov": [111, 112, 113, 115, 123, 129, 130, 131, 178, 180, 186, 188], "lambada": [111, 186], "openai": [111, 186], "sweet": [111, 186], "spot": [111, 186], "region": [111, 186], "paper": [111, 113, 123, 178, 183, 186], "bigscienc": [111, 170, 186, 189], "bloom": [111, 123, 128, 170, 178, 186, 189], "560m": [111, 186], "354": [111, 186], "3542": [111, 186], "1b7": [111, 170, 186], "4634": [111, 186], "4936": [111, 186], "3b": [111, 170, 186], "518": [111, 186], "5185": [111, 186], "7b1": [111, 186, 189], "5764": [111, 186, 189], "5977": [111, 186], "bloomz": [111, 186, 189], "3947": [111, 186], "3930": [111, 186], "4828": [111, 186], "4906": [111, 186], "5018": [111, 186], "4980": [111, 186], "5593": [111, 186, 189], "5552": [111, 186], "facebook": [111, 170, 186, 189], "opt": [111, 123, 128, 170, 178, 186, 188, 189], "125m": [111, 128, 165, 186], "379": [111, 186], "3757": [111, 186], "350m": [111, 186], "4516": [111, 186], "4533": [111, 186], "5789": [111, 186], "5742": [111, 186], "7b": [111, 120, 170, 186, 189], "6365": [111, 186], "6404": [111, 186], "6769": [111, 186, 189], "6804": [111, 186, 189], "13b": [111, 170, 186, 189], "6872": [111, 186], "6814": [111, 186], "30b": [111, 170, 186, 189], "7149": [111, 186], "7128": [111, 186], "66b": [111, 186], "7398": [111, 186], "7326": [111, 186], "llama": [111, 120, 128, 170, 178, 179, 181, 183, 186, 189], "7361": [111, 186, 189], "7357": [111, 186], "7627": [111, 186, 189], "7590": [111, 186], "7759": [111, 186, 189], "7840": [111, 186], "65b": [111, 186], "7908": [111, 186], "7957": [111, 186], "eleutherai": [111, 128, 165, 170, 186, 189], "gpt": [111, 128, 165, 170, 178, 186, 189], "j": [111, 123, 128, 170, 178, 186, 189], "6b": [111, 170, 186, 189], "6831": [111, 186, 189], "6821": [111, 123, 186], "mbzuai": [111, 186], "lamini": [111, 178, 186], "124m": [111, 186], "3804": [111, 186], "3887": [111, 186], "774m": [111, 186], "5048": [111, 186], "5057": [111, 186], "5b": [111, 186], "5443": [111, 186, 189], "5436": [111, 186], "mosaicml": [111, 186, 189], "mpt": [111, 178, 186, 189], "chat": [111, 120, 170, 186, 189], "655": [111, 186, 189], "6499": [111, 186], "stabilityai": [111, 186], "stablelm": [111, 186], "4172": [111, 186], "4149": [111, 186], "togethercomput": [111, 186], "redpajama": [111, 186], "incit": [111, 186], "6542": [111, 186], "6735": [111, 186], "6718": [111, 186], "6740": [111, 186, 189], "6569": [111, 186], "6621": [111, 186], "v0": [111, 170, 186], "7143": [111, 186], "7221": [111, 186], "6895": [111, 186], "6953": [111, 186, 189], "databrick": [111, 170, 186, 189], "dolli": [111, 170, 178, 186, 189], "6866": [111, 186, 189], "6297": [111, 186], "6247": [111, 186], "tiiuae": [111, 170, 186, 189], "falcon": [111, 128, 170, 178, 186, 189], "6437": [111, 186, 189], "6392": [111, 186], "asterisk": [111, 186], "gt": [111, 113, 186, 187], "retrain": [112, 159], "involv": 112, "philosophi": [112, 117, 180], "request": [112, 128, 180], "would": [112, 123, 125, 172, 178, 180, 186], "appropri": [112, 118, 120, 123, 124, 155, 186], "crucial": [112, 178], "occur": 112, "jit": [112, 186], "effect": [112, 113, 129, 178, 179], "intel_extension_for_pytorch": 112, "begin": [112, 156, 157, 159, 172, 178, 188], "program": [112, 128, 160, 169], "fc1": 112, "dynamo": [112, 114], "qd": 112, "final": [112, 123, 130, 172, 176, 178, 180, 184, 188], "As": [113, 123, 126, 130, 157, 171, 172, 178, 183, 188], "becom": [113, 123, 129, 162, 178, 183], "preval": [113, 123, 183], "grow": [113, 123, 183], "demand": [113, 123, 183], "modern": [113, 123, 183], "trade": [113, 123, 183], "off": [113, 123, 125, 183], "bottleneck": [113, 123, 183], "deploi": [113, 118, 123, 125, 172, 183, 188], "roughli": [113, 123, 183], "speak": [113, 123, 183], "move": [113, 123, 126, 183, 184], "count": [113, 123, 183], "p": [113, 120, 123, 183], "theoret": [113, 123, 180, 183], "capac": [113, 123, 183, 185], "flop": [113, 123, 183], "forward": [113, 123, 130, 172, 178, 180, 183, 186], "f": [113, 123, 156, 160, 180, 183, 186], "famou": [113, 123, 183], "next": [113, 123, 130, 131, 157, 183, 188], "scenario": [113, 114, 123, 129, 154, 172, 178, 183], "approx": [113, 123, 183], "bmm": [113, 123, 183], "past": [113, 123, 129, 183], "howev": [113, 120, 123, 178, 183, 186], "100x": [113, 123, 183], "besid": [113, 123, 129, 183], "mention": [113, 123, 178, 183], "reason": [113, 123, 124, 130, 157, 183, 188], "caus": [113, 123, 130, 157, 178, 183], "straightforward": [113, 117, 123, 178, 183, 186], "group": [113, 123, 128, 167, 178, 183, 187, 188, 189], "think": [113, 183], "intuit": [113, 123, 183, 186], "uniformli": [113, 183], "qlora": [113, 123, 183], "uniform": [113, 155, 183], "nf4": [113, 183], "prove": [113, 123, 155, 183, 186], "shot": [113, 117, 167, 172, 178, 179, 183], "highli": [113, 179, 183], "invers": [113, 183], "share": [113, 123, 163, 164, 183, 186, 188], "restor": [113, 183], "tailor": [113, 120], "consist": [113, 125, 126, 156, 186, 188], "often": [113, 157, 177, 178], "outperform": 113, "signround": 113, "protect": [113, 183], "salient": [113, 178, 183], "greatli": [113, 181, 183], "big": [113, 183], "trainabl": [113, 128, 179, 183], "inspir": [113, 183], "rather": [113, 166, 183], "addition": [113, 131, 160, 178, 188], "incorpor": [113, 130, 131, 159, 178, 188], "l": [113, 119, 155, 188], "norm": 113, "hyper": 113, "laplacian": 113, "heavi": [113, 159], "tail": 113, "nuanc": 113, "weightonlyqu": 113, "c_": [113, 183], "along": [113, 168, 178, 183], "normalfloat": [113, 183], "bnb": [113, 183], "lm": [113, 178], "head": [113, 178], "emb": 113, "rtn_arg": [113, 181, 183], "comment": [113, 119, 124, 130, 171, 172, 183, 187], "state_dict": [113, 160, 183], "gptq_arg": [113, 183], "diagon": [113, 183], "rearrang": [113, 178, 183], "stabil": [113, 183], "c_out": 113, "mitig": [113, 183], "actord": [113, 183], "autoround_arg": 113, "rate": [113, 123, 172, 178, 180], "n_sampl": 113, "n_block": [113, 183], "gap": [113, 174], "awq_arg": [113, 183], "clip": [113, 123, 183, 186], "teq_arg": 113, "train_fn": 113, "hqq_arg": 113, "lm_head": [113, 178, 183], "lm_head_config": 113, "quantit": 113, "weightonlylinear": [113, 183], "storag": [113, 123, 171, 183, 186], "date": [113, 183], "saved_result": [113, 114, 174, 183], "orig_model": 113, "yourmodel": 113, "loaded_model": 113, "original_model": 113, "card": [113, 178], "ram": [113, 120], "impract": 113, "lwq": 113, "diagram": [113, 130, 131, 188], "illustr": [113, 130, 131, 159, 188], "figur": [113, 181], "color": [113, 178, 181], "grei": [113, 181], "blue": [113, 181], "rectangl": [113, 181], "load_empty_model": [113, 120, 181], "model_state_dict_path": [113, 120], "state": [113, 120, 131, 178], "float_model": [113, 120, 128], "quantized_model": [113, 120, 128, 165], "overhead": [113, 186], "xiao": [113, 123, 183, 186], "guangxuan": [113, 123, 183, 186], "2211": [113, 123, 183, 186], "10438": [113, 123, 183, 186], "wei": [113, 123, 183, 186], "xiui": [113, 123, 183, 186], "suppress": [113, 123, 183, 186], "2209": [113, 123, 183, 186, 189], "13325": [113, 123, 183, 186], "lin": [113, 123, 183], "ji": [113, 123, 183], "frantar": [113, 123, 178, 183], "elia": [113, 123, 183], "cheng": [113, 123], "wenhua": [113, 123], "badri": 113, "hicham": 113, "shaji": 113, "appu": 113, "onlin": [113, 124, 185], "dettmer": [113, 123, 183], "tim": [113, 123, 183], "finetun": [113, 123, 178, 183], "2305": [113, 123, 183], "14314": [113, 123, 183], "grain": [114, 178, 179, 188], "varieti": [114, 118, 161, 188], "classic": [114, 188], "research": [114, 128, 169, 186, 189], "simul": [114, 131], "emul": [114, 123, 172, 180], "term": [114, 117, 125, 155, 169, 171, 176, 177, 188], "eas": [114, 117, 168, 179], "commit": [114, 117, 124, 125], "extend": [114, 130, 131, 165], "hand": [114, 117], "reus": 114, "conveni": [114, 172], "discuss": [114, 128], "far": 114, "still": [114, 116, 123, 155, 172, 179, 180, 182], "reli": [114, 172, 186], "plan": [114, 167], "arbitrari": [114, 172, 177], "deploy": [114, 158, 179, 181, 186], "One": [114, 131, 156, 160, 167, 178, 179, 188], "scope": [114, 125, 130, 172], "direct": [114, 178], "renam": [114, 184], "orig_sav": 114, "suggest": [114, 126, 156, 185], "statu": [114, 119, 124, 157, 175, 176, 178], "trane": 114, "torchdynamo": 114, "microsc": 114, "pytorchdynamo": 114, "logic": 114, "torchimport": 114, "operator_name_or_list": 114, "demo": [114, 172], "mlp": [114, 178], "conv1d": [114, 131], "fundament": [115, 116, 155, 172], "fulli": [115, 172, 180, 186], "respons": [115, 180], "val_dataset": [115, 172, 180], "val_dataload": [115, 172, 180], "mydataload": [115, 117, 118], "qmodel": [115, 117], "good": [115, 124, 180, 188], "static_qu": [115, 156], "from_dict": 115, "conv2d_config": 115, "output_graph_def": 116, "sq_config": 116, "static_config": 116, "fusion": [116, 126, 129, 164], "look": [116, 129, 131, 164, 171, 186], "eval_fn_wrapp": 116, "consider": [116, 186], "amount": [116, 186], "saved_model": [117, 181], "experi": [117, 124, 185, 186, 188], "rule": [117, 178], "partial": [117, 178, 180], "particularli": 117, "critic": [117, 124], "And": [117, 123, 125, 126, 154, 156, 172, 186], "supplement": 117, "baseline_model": [117, 118], "asymmetr": [117, 131, 180, 183, 188], "rmax": [117, 123, 180], "sq": [117, 170, 186], "unseen": [117, 123, 180], "zeropoint": [117, 123, 180], "unlik": 117, "tradit": [117, 178], "signific": [117, 123, 178, 179, 181, 186], "refin": [117, 166, 178], "instal": [117, 160, 163, 165, 190], "quickli": [118, 170, 188], "despit": 118, "consum": [118, 157], "certain": [118, 185], "predefin": 118, "primari": [118, 155, 188], "travers": [118, 130, 131, 183, 188], "compon": [118, 126, 156, 160, 168, 169, 177, 178], "incbench": 119, "launch": [119, 173], "numa": 119, "therefor": [119, 123, 126, 172, 178, 180, 181, 184, 186], "linux": [119, 120, 154, 163], "num_inst": 119, "num_cores_per_inst": 119, "num_cores_on_numa": 119, "visibl": 119, "cross_memori": 119, "alloc": 119, "insuffici": 119, "num_i": 119, "num_c": 119, "24": [119, 178, 188, 189], "47": [119, 170, 189], "messag": [119, 125, 188], "throughput_pattern": 119, "hroughput": 119, "za": 119, "z": [119, 123, 155, 156, 186], "latency_pattern": 119, "atenc": 119, "3f": 119, "sec": [119, 189], "lightweight": [120, 178], "enhanc": [120, 155, 178, 179, 182], "tip": 120, "omp_num_thread": 120, "hybrid": 120, "taskset": 120, "finish": 120, "ten": 120, "gb": 120, "meta": [120, 128, 170, 179, 189], "hf": [120, 170, 186, 189], "invent": [123, 180], "speed": [123, 155, 172, 178, 179, 180, 188], "int4": [123, 128, 170, 180, 189], "mainli": [123, 128, 165, 172, 178, 180], "miss": [123, 178, 180], "On": [123, 180, 189], "4x": [123, 180], "speedup": [123, 161, 167, 180], "255": [123, 180, 186], "math": [123, 180], "sometim": [123, 126, 180], "overflow": [123, 180], "issu": [123, 124, 125, 127, 128, 168, 180], "due": [123, 131, 162, 178, 180, 186], "vnni": [123, 161, 167, 180], "solv": [123, 125, 180, 184], "coarsest": [123, 186], "finer": [123, 186, 188], "2d": [123, 186], "matric": [123, 186], "3d": [123, 179, 186], "similarli": [123, 186], "finest": [123, 186], "individu": [123, 124, 178, 186], "adopt": [123, 125, 178, 179, 186], "bring": [123, 186], "why": [123, 186], "suppos": [123, 186], "6839": [123, 186], "4741": [123, 186], "7451": [123, 186], "9301": [123, 186], "1742": [123, 186], "6835": [123, 186], "formula": [123, 178, 186], "num_bit": [123, 186], "q_min": [123, 186], "q_max": [123, 186], "zp": [123, 186], "q_x": [123, 186], "clamp_": [123, 186], "round_": [123, 186], "w_q": [123, 186], "00296431384049356": [123, 186], "59": [123, 170, 186, 189], "172": [123, 186, 189], "192": [123, 186], "w_dq": [123, 186], "2220": [123, 186], "1510": [123, 186], "2420": [123, 186], "2570": [123, 186], "0500": [123, 186], "1890": [123, 186], "mseloss": [123, 186], "1983354538679123": [123, 186], "6848": [123, 186], "4743": [123, 186], "7440": [123, 186], "9308": [123, 186], "1749": [123, 186], "385297635664756e": [123, 186], "07": [123, 128, 170, 186, 189], "affect": [123, 186], "quantize_per_channel": [123, 186], "x_tmp": [123, 186], "detach": [123, 186], "reshap": [123, 186], "keepdim": [123, 186], "divid": [123, 157, 186, 188], "dequantize_per_channel": [123, 186], "0029": [123, 186, 189], "0036": [123, 186], "162": [123, 186, 189], "48": [123, 186, 189], "72": [123, 170, 186, 189], "93": [123, 170, 186, 189], "207": [123, 186, 189], "139": [123, 186, 189], "6837": [123, 186], "4734": [123, 186], "1751": [123, 186], "637690492221736e": [123, 186], "6376e": [123, 186], "3852e": [123, 186], "cdot": [123, 186], "quantize_per_tensor_absmax": [123, 186], "n_bit": [123, 186], "div_": [123, 186], "0806": [123, 186], "7589": [123, 186], "6038": [123, 186], "3815": [123, 186], "5040": [123, 186], "7174": [123, 186], "5444": [123, 186], "5826": [123, 186], "7772": [123, 186], "5555": [123, 186], "3740": [123, 186], "3253": [123, 186], "0698": [123, 186], "1381": [123, 186], "5972": [123, 186, 189], "0086": [123, 186], "0737": [123, 186], "8298": [123, 186], "6883": [123, 186], "2991": [123, 186], "1601": [123, 186], "6506": [123, 186], "8246": [123, 186], "3924": [123, 186], "3845": [123, 186], "8768": [123, 186], "w_scale": [123, 186], "x_q": [123, 186], "x_scale": [123, 186], "13": [123, 163, 168, 186, 189], "84": [123, 170, 186, 189], "120": [123, 186], "0059755356051027775": [123, 186], "83": [123, 185, 186, 189], "89": [123, 170, 186, 189], "119": [123, 186], "85": [123, 185, 186, 189], "57": [123, 170, 186, 189], "91": [123, 183, 186, 189], "006533813662827015": [123, 186], "y_q": [123, 186], "17509": [123, 186], "7608": [123, 186], "4055": [123, 186], "16599": [123, 186], "21020": [123, 186], "10016": [123, 186], "9860": [123, 186], "22444": [123, 186], "y_dq": [123, 186], "6836": [123, 186], "2970": [123, 186], "1583": [123, 186], "6481": [123, 186], "8207": [123, 186], "3911": [123, 186], "3850": [123, 186], "8763": [123, 186], "major": [123, 166, 180, 186], "peopl": [123, 180], "though": [123, 186], "simplic": [123, 186], "present": [123, 179, 186], "1x2": [123, 186], "2x2": [123, 186], "obtain": [123, 126, 130, 178, 185, 186, 188], "middl": [123, 186], "denot": [123, 186], "fp1": [123, 186], "fp2": [123, 186], "subsect": [123, 186], "even": [123, 181, 183, 186], "lot": [123, 126, 186], "briefli": [123, 172, 186], "similar": [123, 172, 186, 188], "idea": [123, 128, 178, 186, 188], "attach": [123, 172, 186], "x1": [123, 186, 188], "x2": [123, 186, 188], "layernorm": [123, 186], "excel": [123, 183], "mimic": [123, 180], "done": [123, 126, 159, 178, 180], "adjust": [123, 180, 186], "fact": [123, 180], "ultim": [123, 180], "pain": [123, 180], "brought": [123, 174, 180], "lossi": [123, 180], "respect": [123, 124, 164, 178, 186], "chart": [123, 180, 185], "yvinec": [123, 186], "edouard": [123, 186], "proceed": [123, 186], "cvf": [123, 186], "winter": [123, 186], "confer": [123, 178, 186], "vision": [123, 128, 162, 186], "interest": [124, 128], "foster": 124, "particip": 124, "commun": 124, "harass": 124, "everyon": 124, "regardless": 124, "ag": 124, "bodi": 124, "ethnic": 124, "characterist": 124, "gender": 124, "ident": 124, "educ": 124, "socio": 124, "econom": 124, "appear": 124, "race": 124, "religion": 124, "sexual": 124, "orient": 124, "behavior": [124, 129, 130, 131, 164, 174, 183, 188], "contribut": [124, 128, 178], "inclus": 124, "Being": 124, "viewpoint": 124, "gracefulli": 124, "empathi": 124, "toward": 124, "member": [124, 129], "unaccept": 124, "imageri": 124, "unwelcom": 124, "troll": 124, "insult": 124, "derogatori": 124, "polit": 124, "attack": 124, "public": 124, "privat": 124, "electron": 124, "explicit": 124, "permiss": 124, "inappropri": 124, "profession": 124, "clarifi": 124, "fair": 124, "action": 124, "edit": 124, "reject": 124, "wiki": 124, "ban": 124, "temporarili": 124, "perman": [124, 178], "deem": 124, "threaten": 124, "offens": 124, "harm": 124, "mail": 124, "social": [124, 179], "media": [124, 179], "account": [124, 185, 188], "act": 124, "appoint": 124, "event": 124, "abus": 124, "report": [124, 125, 128, 185], "contact": [124, 184, 185], "complaint": 124, "review": [124, 125, 128, 179], "investig": [124, 156], "necessari": [124, 130, 174, 178, 185, 188], "circumst": 124, "oblig": 124, "confidenti": 124, "regard": [124, 182], "incid": 124, "separ": [124, 156, 166, 168, 169, 177], "faith": 124, "face": [124, 128, 135, 179, 184, 189], "repercuss": 124, "leadership": 124, "faq": [124, 128], "page": [124, 125], "send": [125, 130], "view": [125, 128, 161, 184], "star": 125, "repositori": 125, "button": [125, 167], "fork": 125, "clone": [125, 168], "pc": 125, "git": [125, 163, 168], "branch": 125, "modif": [125, 129, 164], "checkout": 125, "my": 125, "unit": [125, 178], "cover": [125, 162, 166, 179], "certif": 125, "agre": 125, "pr": [125, 157, 171, 184], "least": [125, 172, 178, 188], "approv": 125, "licens": 125, "azur": [125, 128, 179], "devop": 125, "ci": 125, "e16": 125, "v5": 125, "scan": [125, 128], "pylint": 125, "bandit": 125, "copyright": [125, 169], "docstyl": 125, "spellcheck": 125, "dco": 125, "pytest": 125, "No": [125, 156, 163, 172, 179], "failur": [125, 126], "fault": 125, "coverag": 125, "submit": [125, 179], "bug": [125, 128], "intend": 125, "safe": 125, "collabor": [125, 128], "adher": 125, "tracer": 126, "resolv": [126, 127], "floatfunct": 126, "cat": [126, 162], "relu": [126, 164, 186], "batchnorm": [126, 186], "eval": [126, 156, 157, 180], "fail": [126, 157, 162], "imper": 126, "successfulli": [126, 128, 160, 179], "traceabl": 126, "proxi": 126, "prototyp": 126, "html": [126, 130, 155, 160, 167, 180], "highlight": 126, "untrac": 126, "ssd": [126, 162, 189], "resnet34": [126, 189], "r34": 126, "bboxes_labels_scor": 126, "prob": 126, "45": [126, 170, 189], "max_output": 126, "zip": 126, "squeez": 126, "dbox": 126, "dlabel": 126, "dscore": 126, "decode_singl": 126, "guidelin": [127, 128], "particular": [128, 178, 183], "typic": [128, 159, 161, 178, 189], "gaudi": [128, 168], "ultra": [128, 168, 189], "flex": [128, 168], "amd": [128, 168, 189], "arm": [128, 167, 168, 189], "nvidia": [128, 155, 167, 168, 189], "llama2": 128, "stabl": [128, 178, 179], "diffus": [128, 179], "hub": [128, 161], "hug": [128, 179], "marketplac": [128, 179], "amazon": 128, "web": 128, "servic": [128, 179], "softwar": [128, 169, 178, 179, 184], "alibaba": [128, 179], "tencent": [128, 179], "taco": [128, 179], "oliv": [128, 179], "ecosystem": [128, 179], "lightn": 128, "2024": [128, 189], "usabl": 128, "pip": [128, 160, 163, 165, 168, 184], "34": [128, 170, 189], "packag": [128, 129, 156, 163, 168, 179, 184, 188], "gaudi2": [128, 168], "docker": 128, "stack": 128, "setup": [128, 164, 168, 178], "interact": [128, 185], "shell": 128, "habana": 128, "habana_visible_devic": 128, "ompi_mca_btl_vader_single_copy_mechan": 128, "cap": 128, "sys_nic": 128, "host": [128, 160], "ipc": 128, "vault": 128, "ubuntu22": 128, "04": [128, 168, 189], "habanalab": 128, "optimum": [128, 183], "upgrad": [128, 172], "auto_round": 128, "automodel": 128, "autotoken": [128, 172], "get_dataload": 128, "neo": [128, 165, 189], "trust_remote_cod": 128, "woq_conf": 128, "resnet18": [128, 173, 189], "static_quant_conf": 128, "overview": [128, 165, 188], "june": [128, 179], "qwen2": [128, 179], "apr": [128, 179], "emnlp": [128, 179], "sep": [128, 179], "legal": [128, 190], "secur": [128, 179, 190], "ask": [128, 168], "email": 128, "discord": 128, "join": 128, "technic": 128, "wechat": [128, 179], "bridg": [129, 130, 167], "vanilla": [129, 130, 167], "adaptor_registri": 129, "abcadaptor": 129, "__init__": [129, 156, 157, 171, 188], "framework_specific_info": 129, "tune_cfg": [129, 131, 188], "query_fw_cap": [129, 131], "query_fused_pattern": 129, "he": 129, "describ": [129, 131, 156, 164], "hidden": 129, "mainten": 129, "clear": [129, 164, 171, 172], "fragment": 129, "scheme": [129, 130, 131, 157, 164, 183, 188], "semant": [129, 164], "querybackendcap": [129, 130], "tensorflowqueri": 129, "mla": [129, 173, 180], "qtype": 129, "onnxrt_qlinearopsadaptor": 129, "data_load": 129, "inspect_tensor": 129, "op_list": 129, "iteration_list": 129, "inspect_typ": 129, "save_to_disk": 129, "quantization_cfg": 129, "set_tensor": 129, "tensor_dict": 129, "input_graph": 129, "fw": 130, "outlin": [130, 131], "accommod": [130, 131], "sequencediagram": [130, 131], "autonumb": [130, 131], "query_framework_cap": 130, "opwis": 130, "optypewis": 130, "\u2776": 130, "\u2777": 130, "\u2778": 130, "\u2779": 130, "\u277a": 130, "\u277b": 130, "\u277c": 130, "These": [130, 167], "chapter": 130, "node_op": 130, "confirm": 130, "chosen": [130, 155], "int8_conv_config": 130, "optype_wise_": 130, "sym": [130, 131, 164, 180, 183], "tuning_cfg_to_fw": 130, "Its": [130, 155, 178], "quantize_config": 130, "op_wise_config": 130, "dispatch": [130, 167], "is_perchannel": 130, "is_asymmetr": 130, "weight_bit": 130, "bf16_op": [130, 182], "convert_bf16": 130, "got": [130, 163], "subsequ": 130, "calib": 130, "somewhat": 130, "distort": 130, "line": [130, 156, 160, 167], "until": [130, 188], "let": [131, 164, 178], "overal": [131, 183], "drive": 131, "section": [131, 156, 159, 178, 183], "uint4": 131, "asym": [131, 164, 183], "independ": 131, "kullback": 131, "leibler": 131, "pytorch_cpu": 131, "1_11_capabl": 131, "cap_s8_1_11": 131, "cap_s8_1_11_conv1d": 131, "per_channel_symmetr": 131, "per_tensor_symmetr": 131, "nativ": 131, "with_arg": 131, "qscheme": 131, "torch_dtyp": 131, "quant_min": 131, "quant_max": 131, "x86_64": 154, "aarch64": 154, "sure": 154, "benefici": 155, "\u03b2": 155, "\u03b1": 155, "lie": 155, "simplest": 155, "focu": [155, 188], "essenti": [155, 163], "remaind": 155, "resolut": 155, "extrem": 155, "retain": 155, "noteworthi": 155, "vanhouck": 155, "vincent": 155, "andrew": 155, "senior": 155, "mark": 155, "mao": 155, "2011": 155, "szymon": 155, "migacz": 155, "tensorrt": [155, 173, 180], "2017": 155, "mckinstri": 155, "jeffrei": 155, "discov": 155, "embed": [155, 178], "1809": 155, "04191": 155, "2018": 155, "mostli": 156, "summar": 156, "conflict": [156, 163], "overli": 156, "argu": 156, "decis": [156, 171], "pep": 156, "tile": 156, "o": [156, 168], "sub_modul": 156, "namespac": 156, "pollut": 156, "subprocess": [156, 157], "popen": 156, "statement": 156, "pipe": 156, "long_str": 156, "extran": 156, "__version__": 156, "placehold": 156, "pager": 156, "getenv": 156, "readabl": 156, "seem": 156, "worth": [156, 178], "4f": 156, "65421": 156, "sentenc": 156, "eval_result": 156, "declar": 156, "typealia": 156, "_lossandgradi": 156, "complextfmap": 156, "xx_func": 156, "ordereddict": 156, "pylanc": 156, "cheeseshopaddress": 156, "chees": 156, "shop": 156, "outofcheeseerror": 156, "crbug": 156, "192795": 156, "cpufreq": 156, "facilit": 156, "__all__": 156, "know": [156, 160, 184], "algorithm_entri": 156, "snippet": [156, 167], "register_algo": 156, "rtn_algo_entri": 156, "smooth_quant_entri": 156, "vscode": 156, "settings_recommend": 156, "encount": 157, "previous": 157, "lack": [157, 163], "faster": [157, 158, 162, 179, 188, 189], "treat": 157, "Of": 157, "collate_fn": 157, "last_batch": 157, "evenli": 157, "discard": 157, "throw": 157, "awai": 157, "rollov": 157, "draw": [157, 185, 188], "batch_sampl": 157, "num_work": [157, 172, 180], "pin_memori": 157, "pin": 157, "shuffl": [157, 172, 180], "reshuffl": 157, "manner": [157, 174], "newdataload": 157, "input_data": 157, "customis": [157, 171], "aid": 158, "infrastructur": 158, "promis": [159, 172, 178], "huge": [159, 178, 181], "light": 159, "booster": 159, "degrad": [159, 178, 188], "novel": 159, "10006": 159, "student_output": 159, "student_loss": 159, "training_func_for_nc": 159, "launcher": 159, "experiment": [159, 160, 162, 172, 178, 180, 184, 187], "comb": 159, "distillation_criterion": [159, 172, 177], "q_conf": 159, "horovod": 160, "builtin": 160, "enable_eager_execut": 160, "yaml_file_path": 160, "pre_process": 160, "simpli": [160, 174], "evaluation_result": 160, "evaluation_time_cost": 160, "partit": [160, 178], "distributedsampl": 160, "train_sampl": 160, "train_dataset": [160, 180], "num_replica": 160, "rank": 160, "train_load": 160, "train_kwarg": 160, "adadelta": 160, "distributedoptim": 160, "named_paramet": 160, "broadcast_paramet": 160, "root_rank": 160, "broadcast_optimizer_st": 160, "set_epoch": 160, "batch_idx": 160, "zero_grad": [160, 172, 178], "nll_loss": 160, "log_interv": 160, "0f": 160, "tloss": 160, "6f": 160, "dry_run": 160, "break": [160, 172], "test_func": 160, "num_of_process": 160, "002": 160, "ssh": 160, "prompt": 160, "readm": 160, "exactli": 160, "cd": [160, 168], "resnet50_v1": [160, 172], "imagerecord": 160, "resizecropimagenet": [160, 187], "realiz": [160, 176, 182, 185], "tow": 160, "node1": 160, "node2": 160, "TO": 160, "your_node1_nam": 160, "your_node2_nam": 160, "resnet50_fp32_pretrained_model": 160, "nc_resnet50_v1": 160, "resnet": [160, 189], "10k": 161, "2x": [161, 167], "exchang": 162, "hope": 162, "inc_model": [162, 174], "fp32_onnx_config": 162, "verifi": [162, 170], "vgg16": [162, 189], "mobilenet": [162, 185, 189], "rcnn": 162, "torchscript": [162, 181, 186], "unsupport": [162, 172, 178], "add_relu": 162, "conv1d_relu": 162, "conv2d_relu": 162, "group_norm": 162, "hardswish": 162, "instance_norm": 162, "layer_norm": 162, "leaky_relu": 162, "sigmoid": 162, "toolchain": [163, 179], "bare": 163, "metal": 163, "sudo": 163, "apt": [163, 168], "python3": 163, "dev": 163, "distutil": 163, "libgl1": 163, "mesa": 163, "glx": 163, "libglib2": 163, "wget": 163, "ln": 163, "sf": 163, "usr": 163, "incompat": 163, "88": [163, 185, 189], "80": [163, 170, 181, 189], "pyobject": 163, "reinstal": 163, "importerror": 163, "libgl": 163, "yum": [163, 168], "opencv": 163, "conda": [163, 184], "pend": 163, "sqlalchemi": 163, "27": [163, 170, 189], "alemb": 163, "forg": 163, "unless": 164, "syntax": 164, "go": [164, 183, 187], "15": [164, 168], "up1": 164, "up2": 164, "valid_mixed_precis": 164, "concatv2": 164, "maxpool": 164, "avgpool": 164, "depthwiseconv2dn": 164, "relu6": 164, "biasadd": 164, "addn": 164, "addv2": 164, "grappler": 164, "grappler_optim": 164, "constfold": 164, "arithmet": 164, "debug_stripp": 164, "automodelforcausallm": 165, "especi": 165, "benefit": [165, 177], "d": [166, 178], "custom_metr": 166, "420": 167, "geomean": 167, "coder": [167, 179], "gui": [167, 178], "upload": 167, "click": [167, 179], "qintegerop": [167, 180], "lock": [167, 177, 178], "momentum": [167, 172, 178], "sensit": [167, 178], "lasso": [167, 178], "Will": 167, "satisfi": 168, "success": 168, "frequent": 168, "pypi": 168, "requirements_pt": 168, "requirements_tf": 168, "consolid": 168, "streamlin": [168, 179], "scienc": 168, "websit": 168, "anaconda": 168, "suit": 168, "skylak": 168, "cascad": 168, "ic": [168, 179], "sapphir": [168, 170], "rapid": [168, 170], "hbm": 168, "meteor": 168, "arctic": 168, "sound": 168, "pont": 168, "vecchio": 168, "cento": [168, 189], "ubuntu": 168, "22": [168, 170, 189], "maco": 168, "ventura": 168, "fortensorflow": 168, "forpytorch": 168, "18": [168, 170, 179, 189], "17": 168, "apach": 169, "subject": 169, "accompani": [169, 188], "wish": 169, "bibtex": 169, "misc": 169, "author": 169, "feng": 169, "tian": 169, "hanwen": 169, "haihao": [169, 178], "shen": [169, 178], "suyu": 169, "chen": 169, "howpublish": 169, "year": 169, "logo": 169, "atom": 169, "phi": 169, "pentium": 169, "vtune": 169, "corpor": 169, "subsidiari": 169, "brand": 169, "claim": 169, "70b": [170, 189], "40b": 170, "baichuan": 170, "baichuan2": 170, "12b": 170, "neox": [170, 189], "20b": [170, 189], "mistralai": 170, "mistral": 170, "thudm": 170, "chatglm2": 170, "chatglm3": 170, "wip": 170, "soon": 170, "lambada_openai": [170, 189], "67": [170, 189], "69": [170, 189], "0222": 170, "55": [170, 189], "9997": 170, "68": [170, 187, 189], "12": [170, 189], "0081": 170, "66": [170, 189], "9905": 170, "71": [170, 189], "51": [170, 189], "75": [170, 178, 189], "0568": 170, "0008": [170, 189], "70": [170, 189], "81": [170, 189], "9902": [170, 189], "06": [170, 189], "0058": [170, 189], "61": [170, 189], "9991": 170, "0034": 170, "46": [170, 189], "0356": 170, "9972": 170, "0121": 170, "35": [170, 178, 189], "63": [170, 178, 189], "92": [170, 189], "9933": [170, 189], "31": [170, 189], "9994": [170, 189], "0006": [170, 189], "9958": [170, 189], "29": [170, 189], "74": [170, 189], "9918": 170, "9964": 170, "58": [170, 189], "0040": 170, "26": [170, 189], "0064": 170, "49": [170, 189], "78": [170, 187, 189], "0041": 170, "53": [170, 189], "0014": 170, "0043": 170, "76": [170, 189], "77": [170, 189], "25": [170, 178, 189], "9932": [170, 189], "0016": 170, "0116": 170, "60": [170, 189], "9978": [170, 189], "79": [170, 189], "9937": [170, 189], "62": [170, 189], "09": [170, 189], "0057": 170, "0005": 170, "73": [170, 189], "9936": 170, "9989": 170, "9987": 170, "0046": [170, 189], "9979": [170, 189], "23": [170, 189], "52": [170, 189], "86": [170, 189], "9930": 170, "00": [170, 189], "9957": [170, 189], "9938": 170, "9942": [170, 189], "03": [170, 189], "9990": 170, "9965": 170, "9995": 170, "82": [170, 189], "0078": 170, "0262": 170, "0052": 170, "9910": 170, "popularli": 171, "industri": [171, 179], "label_map": 171, "ap": 171, "curv": 171, "turn": [171, 181], "target_boxes_num": 171, "str_label": 171, "int_label": 171, "inturn": 171, "cocomap": 171, "vocmap": 171, "categor": 171, "multiclass": 171, "multilabel": 171, "newmetr": 171, "reset": 171, "reflect": [171, 187], "new_metr": 171, "kind": 172, "resort": 172, "inject": 172, "automodelforsequenceclassif": 172, "worker": [172, 180], "ping_memori": [172, 180], "formul": 172, "templat": [172, 178], "effort": 172, "written": 172, "onnxrt_integ": 172, "onnxrt_qlinear": 172, "image_tensor": 172, "post_training_static_qu": [172, 188], "post_training_dynamic_qu": [172, 188], "1000": 172, "2000": 172, "sampling_s": 172, "model_wis": 172, "op_dict": 172, "op_wis": 172, "sigopt_api_token": [172, 185, 188], "sigopt_project_id": [172, 185, 188], "sigopt_experiment_nam": [172, 185, 188], "performance_onli": 172, "600": [172, 189], "training_arg": 172, "trainer": 172, "compact": [172, 178], "maxim": [172, 178, 188], "pruning_func": 172, "num_train_epoch": [172, 178], "train_dataload": [172, 178, 180], "n_gpu": 172, "gradient_accumulation_step": 172, "clip_grad_norm_": 172, "max_grad_norm": 172, "start_epoch": 172, "end_epoch": 172, "97": [172, 189], "pruner": [172, 178], "newli": [172, 178], "on_after_optimizer_step": [172, 178], "layer3": [172, 178], "layer2": [172, 178, 180], "1x1": [172, 178], "expens": [172, 188], "mobil": [172, 189], "knowledgedistillationloss": 172, "weight_decai": 172, "0004": 172, "nesterov": 172, "randomresizedcrop": [172, 187], "totensor": [172, 187], "485": 172, "456": 172, "406": [172, 189], "nepoch": 172, "cnt": 172, "loss_sum": 172, "iter_bar": 172, "tqdm": 172, "desc": 172, "teacher_logit": 172, "pytorchknowledgedistillationloss": 172, "unnecessari": 172, "train_fun": 172, "training_func": 172, "output_model": 172, "exit_polici": 172, "determinist": 172, "meaning": [172, 177], "prune_conf": 172, "quantization_aware_training_conf": 172, "aforement": 172, "inset": 172, "p_conf": [172, 177], "ssd_mobilenet_v1": 172, "benchmarkconf": 172, "cpuexecutionprovid": [173, 180], "tensorrtexecutionprovid": [173, 180], "cudaexecutionprovid": [173, 180], "cuda": [173, 178, 180], "dnnlexecutionprovid": [173, 180], "plu": 173, "helloworld": [173, 187], "persist": 174, "tf1": 174, "tf2": 174, "h5": 174, "hybridblock": 174, "0000": 174, "input_model": 174, "10005": [175, 181], "multi_object": 176, "simultan": 177, "gain": [177, 179], "possibl": [177, 178, 181, 182, 188], "instanti": 177, "neuron": 178, "art": 178, "grown": 178, "unpreced": 178, "increasingli": 178, "stand": [178, 188], "delet": 178, "consecut": 178, "commonli": 178, "shrink": 178, "feed": 178, "influenc": 178, "decreas": 178, "contextu": 178, "vari": [178, 186, 189], "scene": 178, "haven": 178, "lowest": [178, 188], "interv": 178, "gradual": 178, "emsp": 178, "immedi": 178, "pure": 178, "downstream": 178, "simplifi": [178, 179], "procedur": [178, 188], "prone": 178, "co": 178, "discourag": 178, "connect": [178, 185], "penal": 178, "parameter": 178, "coeffici": 178, "sparsegpt": 178, "perceptron": 178, "valuabl": 178, "basi": 178, "mha": 178, "billion": 178, "tend": 178, "exemplifi": 178, "250": 178, "fortieth": 178, "pruner2": 178, "prepare_prun": 178, "retrain_fre": 178, "300": 178, "few": [178, 179, 186, 188], "yourself": 178, "uncertain": 178, "parse_auto_slim_config": 178, "auto_config": 178, "ffn2_sparsiti": 178, "mha_spars": 178, "itself": 178, "quit": 178, "carri": 178, "pruning_pattern": 178, "pruning_start": 178, "pruning_end": 178, "sparse_gpt": 178, "embed_out": 178, "readi": 178, "hesit": 178, "causal": 178, "clm": 178, "sst": [178, 189], "v": [178, 188], "flan": 178, "t5": 178, "english": 178, "romanian": 178, "404": [178, 189], "381": 178, "yolov5": 178, "2x1": [178, 189], "801": 178, "7895": 178, "reduct": [178, 181], "xgboost": 178, "namhoon": 178, "lee": 178, "thalaiyasingam": 178, "ajanthan": 178, "philip": 178, "torr": 178, "2019": 178, "zafrir": 178, "ofir": 178, "ariel": 178, "larei": 178, "boudoukh": 178, "mosh": 178, "wasserblat": 178, "2111": 178, "05754": 178, "2021": 178, "kwon": 178, "kim": 178, "mahonei": 178, "hassoun": 178, "keutzer": 178, "gholami": 178, "pp": 178, "24101": 178, "24116": 178, "alistarh": 178, "massiv": 178, "2301": 178, "00774": 178, "oct": 179, "medium": 179, "diagnosi": 179, "insight": [179, 184, 188], "aug": 179, "juli": 179, "onnxcommunitymeetup2023": 179, "msft": 179, "autom": [179, 186], "netflix": 179, "mlperf": [179, 189], "5x": 179, "\u96c6\u6210\u82f1\u7279\u5c14": 179, "\u817e\u8baf\u4e91taco": 179, "kit\u4e3aai\u5e94\u7528\u5e26\u6765\u9ad8\u6548\u5f02\u6784\u52a0\u901f\u670d\u52a1": 179, "mar": 179, "heterogen": 179, "jan": 179, "busi": 179, "innov": 179, "journei": 179, "dec": 179, "mleffici": 179, "deepen": 179, "foundat": 179, "intellig": 179, "vmware": 179, "applianc": 179, "bitnami": 179, "nov": 179, "sota": 179, "neurip": 179, "quala": 179, "minilm": [179, 189], "plug": 179, "twitter": 179, "linkedin": 179, "zone": 179, "land": 179, "gcp": 179, "aw": [179, 189], "pat": 179, "keynot": 179, "intelon": 179, "chines": 179, "purif": 179, "jun": 179, "partner": 179, "democrat": 179, "feb": 179, "joint": 179, "bilibili": 179, "gestalt": 179, "ml": 179, "spars": 179, "easier": 179, "youtub": 179, "reconstruct": 179, "abound": 179, "lpot": [179, 184], "nextplatform": 179, "cern": 179, "gan": 179, "3dgan": 179, "iml": 179, "workshop": 179, "asplo": 179, "convolut": 179, "intelcaff": 179, "affin": 180, "neither": 180, "nor": 180, "val_load": 180, "avg": 180, "themselv": 180, "dmlexecutionprovid": 180, "yet": 180, "meanwhil": 181, "substanti": 181, "constrain": 181, "subgraph": [181, 188], "lambda": 181, "ouput_dir": 181, "fp32_model_path": 181, "int8_model_path": 181, "ON": 182, "forc": 182, "postposttrainingquantconfig": 182, "datatyp": [182, 188, 189], "cast": [182, 187], "bf16convert": 182, "depth": 182, "matter": 182, "bf16wrapper": 182, "retrac": 182, "enable_mse_search": 183, "805": 183, "005": 183, "return_int": 183, "enable_auto_scal": 183, "pad_max_length": 183, "use_max_length": 183, "true_sequenti": 183, "slower": 183, "sym_full_rang": 183, "qweight_config_path": 183, "gptq_config_path": 183, "gptq_config": 183, "re": 183, "use_full_length": 183, "compressed_model": 183, "seek": 183, "omit": 183, "rtn_g32asym": 183, "gptq_g32asym": 183, "gptq_g32asym_disable_last_matmul": 183, "amp": 183, "gptq_g128asym": 183, "awq_g32asym": 183, "site": 184, "inspect": 184, "sed": 184, "your_script": 184, "backbon": 185, "fill": [185, 187, 188], "sigopt_experiment_id": 185, "nc": [185, 188], "login": 185, "although": 185, "suffici": 185, "ordinari": 185, "receiv": 185, "latenc": [185, 188], "durat": 185, "8266": 185, "8372": 185, "2132": 185, "7495": 185, "8299": 185, "8294": 185, "0837": 185, "8291": 185, "4469": 185, "allevi": 186, "herebi": 186, "optdecoderlay": 186, "blockwis": 186, "accordingli": 186, "waq": 186, "torchsmoothqu": 186, "leakyrelu": 186, "hardtanh": 186, "instancenorm": 186, "t5norm": 186, "llamanorm": 186, "groupnorm": 186, "7392": [186, 189], "7335": 186, "7058": [186, 189], "6994": 186, "7677": [186, 189], "7615": [186, 189], "7332": 186, "7632": 186, "stock": 186, "arang": 186, "tolist": 186, "default_alpha": 186, "step_siz": 186, "jason": 186, "transact": 186, "ensp": 187, "centercrop": 187, "randomcrop": 187, "cropres": 187, "decodeimag": 187, "jpeg": 187, "encodejp": 187, "alignimagechannel": 187, "116": 187, "103": [187, 189], "94": [187, 189], "017": 187, "bilinearimagenet": 187, "topilimag": 187, "padding_mod": 187, "border": 187, "pixel": 187, "edg": 187, "colorjitt": 187, "bright": 187, "contrast": 187, "satur": 187, "hue": 187, "jitter": 187, "tondarrai": 187, "o1": 188, "human": 188, "concret": 188, "aggress": 188, "flowchart": 188, "htmllabel": 188, "td": 188, "classdef": 188, "itemstyl": 188, "cce5ff": 188, "stroke": 188, "99ccff": 188, "s1": 188, "s2": 188, "s3": 188, "s4": 188, "s5": 188, "s6": 188, "s7": 188, "nbsp": [188, 189], "subgraphstyl": 188, "ffffff": 188, "skip": 188, "attempt": 188, "post_training_auto_qu": 188, "increment": 188, "ii": 188, "highest": 188, "confidence_batch": 188, "spent": 188, "hawq_v2_loss": 188, "model_loss": 188, "black": 188, "discret": 188, "compli": 188, "prior": 188, "posterior": 188, "short": 188, "never": 188, "loglevel": 188, "endlessli": 188, "perspect": 188, "smbo": 188, "appl": 188, "surrog": 188, "repeat": 188, "quantil": 188, "densiti": 188, "parzen": 188, "greatest": 188, "hour": 188, "dai": 188, "next_tune_cfg": 188, "overridden": 188, "cluster": 188, "mpi": 188, "replic": 188, "replica": 188, "fed": 188, "synchron": 188, "resourc": 188, "mpirun": 188, "number_of_process": 188, "run_cmd": 188, "abctunestrategi": 188, "1x": 189, "platinum": 189, "8480": 189, "8ghz": 189, "56": 189, "ht": 189, "turbo": 189, "256gb": 189, "16x16gb": 189, "ddr5": 189, "4800": 189, "mt": 189, "bio": 189, "3a14": 189, "tel2p1": 189, "microcod": 189, "0x2b0001b0": 189, "gcc": 189, "20210514": 189, "red": 189, "hat": 189, "visit": 189, "1s4c14ins1bsthroughput": 189, "1720": 189, "582": 189, "95x": 189, "1517": 189, "38": 189, "570": 189, "65": 189, "66x": 189, "resnet101": 189, "41": 189, "1058": 189, "382": 189, "96": 189, "77x": 189, "incept": 189, "2080": 189, "951": 189, "19x": 189, "1587": 189, "863": 189, "37": 189, "84x": 189, "v3": 189, "1052": 189, "434": 189, "42x": 189, "v4": 189, "707": 189, "234": 189, "02x": 189, "40": 189, "320": 189, "179": 189, "79x": 189, "4312": 189, "1512": 189, "85x": 189, "2287": 189, "1406": 189, "63x": 189, "1367": 189, "59x": 189, "vgg19": 189, "1244": 189, "176": 189, "04x": 189, "resnetv2": 189, "780": 189, "34x": 189, "494": 189, "43": 189, "329": 189, "50x": 189, "152": 189, "349": 189, "235": 189, "48x": 189, "densenet": 189, "161": 189, "282": 189, "223": 189, "19": 189, "26x": 189, "1284": 189, "756": 189, "70x": 189, "1280": 189, "530": 189, "cnn": 189, "39": 189, "178": 189, "13x": 189, "yolov3": 189, "249": 189, "44": 189, "64x": 189, "54": 189, "28x": 189, "36": 189, "05x": 189, "390": 189, "212": 189, "83x": 189, "vit": 189, "230": 189, "142": 189, "62x": 189, "1989": 189, "31x": 189, "1165": 189, "303": 189, "953": 189, "302": 189, "15x": 189, "resnest50": 189, "365": 189, "21x": 189, "resnext101_32x8d": 189, "548": 189, "104": 189, "27x": 189, "efficientnet_b0": 189, "636": 189, "566": 189, "12x": 189, "efficientnet_b3": 189, "471": 189, "358": 189, "32x": 189, "peleenet": 189, "790": 189, "504": 189, "57x": 189, "yolo": 189, "137": 189, "88x": 189, "175": 189, "23x": 189, "camembert": 189, "393": 189, "174": 189, "783": 189, "344": 189, "684": 189, "99x": 189, "albert": 189, "312": 189, "155": 189, "01x": 189, "funnel": 189, "281": 189, "395": 189, "173": 189, "373": 189, "405": 189, "30x": 189, "stsb": 189, "396": 189, "136": 189, "377": 189, "17x": 189, "391": 189, "25x": 189, "135": 189, "61x": 189, "117": 189, "93x": 189, "lvwerra": 189, "pegasu": 189, "samsum": 189, "1981": 189, "598": 189, "1095": 189, "298": 189, "67x": 189, "549": 189, "29x": 189, "375": 189, "hellaswag": 189, "winogrand": 189, "piqa": 189, "wikitext": 189, "word_perplex": 189, "4954": 189, "6409": 189, "7541": 189, "6434": 189, "8816": 189, "gptqw4g128asym": 189, "679": 189, "4895": 189, "6433": 189, "7476": 189, "6399": 189, "9945": 189, "0999": 189, "gptqw4g32asym": 189, "6829": 189, "4923": 189, "6401": 189, "7486": 189, "6410": 189, "9963": 189, "0141": 189, "gptqw4g128sym": 189, "685": 189, "4907": 189, "6361": 189, "7443": 189, "6390": 189, "1498": 189, "gptqw4g32sym": 189, "6911": 189, "4899": 189, "6448": 189, "7497": 189, "6439": 189, "0927": 189, "5049": 189, "6543": 189, "7628": 189, "6497": 189, "2862": 189, "4984": 189, "6535": 189, "7568": 189, "6473": 189, "9962": 189, "4193": 189, "6885": 189, "4973": 189, "753": 189, "6455": 189, "9935": 189, "4607": 189, "decapoda": 189, "5642": 189, "6709": 189, "7835": 189, "6887": 189, "4202": 189, "7244": 189, "5603": 189, "6614": 189, "6824": 189, "9909": 189, "5881": 189, "5911": 189, "7009": 189, "7878": 189, "7106": 189, "7518": 189, "5843": 189, "6961": 189, "7911": 189, "4319": 189, "7572": 189, "5898": 189, "7056": 189, "7894": 189, "7105": 189, "9998": 189, "3429": 189, "7596": 189, "5841": 189, "6977": 189, "7905": 189, "7080": 189, "4916": 189, "6266": 189, "7277": 189, "8096": 189, "7350": 189, "2384": 189, "778": 189, "624": 189, "7269": 189, "8047": 189, "7334": 189, "4237": 189, "7706": 189, "6239": 189, "7285": 189, "8058": 189, "7322": 189, "4697": 189, "7836": 189, "6195": 189, "7337": 189, "9983": 189, "5604": 189, "5732": 189, "648": 189, "7715": 189, "6746": 189, "7107": 189, "6982": 189, "5637": 189, "6527": 189, "7704": 189, "6713": 189, "9950": 189, "9702": 189, "5682": 189, "6575": 189, "7758": 189, "6742": 189, "9317": 189, "567": 189, "6902": 189, "7353": 189, "6622": 189, "7829": 189, "6862": 189, "9635": 189, "7246": 189, "5617": 189, "6756": 189, "7797": 189, "6854": 189, "9931": 189, "2799": 189, "7312": 189, "6059": 189, "7103": 189, "7077": 189, "2213": 189, "7273": 189, "6018": 189, "7088": 189, "7742": 189, "7030": 189, "9934": 189, "2538": 189, "083": 189, "7283": 189, "6053": 189, "7024": 189, "7764": 189, "7031": 189, "1889": 189, "374": 189, "727": 189, "5997": 189, "7018": 189, "9916": 189, "2504": 189, "497": 189, "7122": 189, "8984": 189, "5933": 189, "689": 189, "7851": 189, "7075": 189, "1556": 189, "448": 189, "7675": 189, "5934": 189, "7856": 189, "7111": 189, "9984": 189, "1514": 189, "927": 189, "7566": 189, "5899": 189, "7032": 189, "9953": 189, "1374": 189, "728": 189, "4628": 189, "6456": 189, "6029": 189, "6438": 189, "5799": 189, "4542": 189, "6004": 189, "0626": 189, "4789": 189, "6134": 189, "7432": 189, "5525": 189, "4731": 189, "6504": 189, "7617": 189, "6094": 189, "7828": 189, "5098": 189, "7622": 189, "6505": 189, "3242": 189, "6878": 189, "5058": 189, "6393": 189, "7633": 189, "6491": 189, "5514": 189, "6864": 189, "5084": 189, "6519": 189, "6509": 189, "4728": 189, "6876": 189, "5045": 189, "6474": 189, "9952": 189, "6379": 189, "5282": 189, "614": 189, "7448": 189, "6312": 189, "6377": 189, "5228": 189, "5991": 189, "6261": 189, "9919": 189, "4096": 189, "6224": 189, "4271": 189, "577": 189, "722": 189, "5871": 189, "9359": 189, "6123": 189, "4227": 189, "5738": 189, "7203": 189, "5823": 189, "9917": 189, "3377": 189, "615": 189, "4259": 189, "5714": 189, "7247": 189, "9951": 189, "2083": 189, "6154": 189, "4208": 189, "5777": 189, "7198": 189, "5834": 189, "3121": 189, "7233": 189, "5359": 189, "7753": 189, "195": 189, "7186": 189, "5328": 189, "7699": 189, "6687": 189, "9922": 189, "3463": 189, "7268": 189, "533": 189, "659": 189, "6726": 189, "2897": 189, "5718": 189, "6859": 189, "7927": 189, "6890": 189, "9324": 189, "7006": 189, "5655": 189, "6803": 189, "7965": 189, "6857": 189, "1515": 189, "5752": 189, "6748": 189, "7845": 189, "6724": 189, "5951": 189, "6472": 189, "5716": 189, "6685": 189, "784": 189, "6678": 189, "8539": 189, "6918": 189, "5819": 189, "678": 189, "6861": 189, "8863": 189, "5765": 189, "6827": 189, "7873": 189, "6832": 189, "1451": 189, "storywrit": 189, "693": 189, "5477": 189, "663": 189, "6719": 189, "9125": 189, "6661": 189, "7813": 189, "6693": 189, "9961": 189, "1137": 189, "rw": 189, "6604": 189, "5419": 189, "6598": 189, "6594": 189, "7616": 189, "6484": 189, "5369": 189, "7807": 189, "6559": 189, "9947": 189, "9411": 189, "6571": 189, "5398": 189, "6582": 189, "6579": 189, "8809": 189, "652": 189, "535": 189, "7682": 189, "6532": 189, "9906": 189, "0048": 189, "5177": 189, "6669": 189, "7824": 189, "5053": 189, "6301": 189, "5142": 189, "6654": 189, "6483": 189, "8146": 189, "517": 189, "6488": 189, "9941": 189, "1666": 189, "734": 189, "1658": 189, "1495": 189, "733": 189, "1661": 189, "732": 189, "1713": 189, "767": 189, "1747": 189, "770": 189, "7519": 189, "4430": 189, "4413": 189, "72x": 189, "7190": 189, "4019": 189, "613": 189, "170": 189, "611": 189, "186": 189, "619": 189, "184": 189, "36x": 189, "623": 189, "5711": 189, "2584": 189, "6136": 189, "2630": 189, "33x": 189, "shufflenet": 189, "6820": 189, "3686": 189, "googlenet": 189, "1971": 189, "1120": 189, "76x": 189, "1838": 189, "1142": 189, "squeezenet": 189, "10163": 189, "5771": 189, "10339": 189, "6002": 189, "caffenet": 189, "2805": 189, "1077": 189, "60x": 189, "4351": 189, "822": 189, "alexnet": 189, "2169": 189, "893": 189, "43x": 189, "2232": 189, "841": 189, "65x": 189, "zfnet": 189, "921": 189, "525": 189, "75x": 189, "925": 189, "534": 189, "73x": 189, "1862": 189, "1161": 189, "1956": 189, "1262": 189, "55x": 189, "efficientnet": 189, "2793": 189, "1383": 189, "beit": 189, "206": 189, "91x": 189, "duc": 189, "74x": 189, "8780": 189, "1920": 189, "emot": 189, "ferplu": 189, "6360": 189, "3067": 189, "07x": 189, "arcfac": 189, "449": 189, "511": 189, "484": 189, "222": 189, "18x": 189, "integerop": 189, "635": 189, "1324": 189, "244": 189, "47x": 189, "440": 189, "214": 189, "06x": 189, "715": 189, "201": 189, "03x": 189, "714": 189, "213": 189, "339": 189, "58x": 189, "215": 189, "89x": 189, "712": 189, "217": 189, "l12": 189, "h384": 189, "1209": 189, "588": 189, "1268": 189, "16x": 189, "1253": 189, "399": 189, "14x": 189, "l6": 189, "1139": 189, "94x": 189, "2365": 189, "08x": 189, "718": 189, "35x": 189, "electra": 189, "discrimin": 189, "1951": 189, "71x": 189, "2198": 189, "1129": 189, "mini": 189, "5814": 189, "3388": 189, "6396": 189, "3445": 189, "86x": 189, "bart": 189, "126": 189, "spanbert": 189, "multilingu": 189, "82x": 189, "118": 189, "46x": 189, "layoutlmv3": 189, "funsd": 189, "layoutlmv2": 189, "perplex": 189, "2788": 189, "7002": 189, "4124": 189, "9921": 189, "3950": 189, "9892": 189, "9163": 189, "7240": 189, "0438": 189, "7634": 189, "1186": 189, "9944": 189, "1276": 189, "7543": 189, "6181": 189, "rtnw4g32asym": 189, "6496": 189, "9967": 189, "7964": 189, "6612": 189, "rtnw4g32sym": 189, "7941": 189, "7243": 189, "9971": 189, "taskdataset": 189, "accuracyspars": 189, "ratiospars": 189, "commentsbalancedor": 189, "unbalanc": 189, "answeringsquad": 189, "87f1": 189, "momentumunbalanc": 189, "momentumbalanc": 189, "90f1": 189, "59f1": 189, "23f1": 189, "classificationmrpc": 189, "52f1": 189, "26f1": 189, "classificationsst": 189, "61accuraci": 189, "recognitionimagenet": 189, "95top1": 189, "v5s6": 189, "detectioncoco": 189, "ap0": 189, "6ap0": 189, "584": 189, "34f1": 189, "lassounbalanc": 189, "classificationmnli": 189, "mm": 189, "allbalanc": 189, "32accuraci": 189, "sensitivitybalanc": 189, "classificationqqp": 189, "classificationqnli": 189, "54accuraci": 189, "em": 189, "mobilenetv2": 189, "wideresnet40": 189, "9522": 189, "8178": 189, "0213": 189, "8235": 189, "027": 189, "5494": 189, "7153": 189, "5540": 189, "5523": 189, "vgg": 189, "bn": 189, "7022": 189, "7415": 189, "7025": 189, "0003": 189, "6739": 189, "7399": 189, "6845": 189, "0106": 189, "blendcnn": 189, "7034": 189, "8382": 189, "bilstm": 189, "8314": 189, "9403": 189, "9048": 189, "0734": 189, "7323": 189, "8256": 189, "8084": 189, "8814": 189, "7442": 189, "8371": 189, "0119": 189, "0115": 189, "tinybert": 189, "8018": 189, "8044": 189, "8363": 189, "8411": 189, "8025": 189, "8074": 189, "0007": 189, "0030": 189, "8626": 189, "8213": 189, "9091": 189, "8782": 189, "8684": 189, "8259": 189, "distilroberta": 189, "6057": 189, "6187": 189, "0130": 189, "c6i": 189, "2xlarg": 189, "c6a": 189, "c6g": 189, "a100cuda": 189, "executionprovid": 189}, "objects": {"": [[37, 0, 0, "-", "neural_compressor"]], "neural_compressor": [[2, 0, 0, "-", "algorithm"], [5, 0, 0, "-", "benchmark"], [8, 0, 0, "-", "common"], [15, 0, 0, "-", "config"], [16, 0, 0, "-", "contrib"], [31, 0, 0, "-", "data"], [44, 0, 0, "-", "metric"], [46, 0, 0, "-", "mix_precision"], [48, 0, 0, "-", "model"], [56, 0, 0, "-", "objective"], [57, 0, 0, "-", "profiling"], [58, 0, 0, "-", "quantization"], [66, 0, 0, "-", "strategy"], [77, 0, 0, "-", "tensorflow"], [84, 0, 0, "-", "torch"], [89, 0, 0, "-", "training"], [97, 0, 0, "-", "utils"], [105, 0, 0, "-", "version"]], "neural_compressor.algorithm": [[0, 0, 0, "-", "algorithm"], [1, 0, 0, "-", "fast_bias_correction"], [3, 0, 0, "-", "smooth_quant"], [4, 0, 0, "-", "weight_correction"]], "neural_compressor.algorithm.algorithm": [[0, 1, 1, "", "ALGORITHMS"], [0, 1, 1, "", "Algorithm"], [0, 1, 1, "", "AlgorithmScheduler"], [0, 2, 1, "", "algorithm_registry"]], "neural_compressor.algorithm.fast_bias_correction": [[1, 1, 1, "", "FastBiasCorrection"]], "neural_compressor.algorithm.smooth_quant": [[3, 1, 1, "", "SmoothQuant"]], "neural_compressor.algorithm.weight_correction": [[4, 1, 1, "", "WeightCorrection"]], "neural_compressor.benchmark": [[5, 2, 1, "", "benchmark_with_raw_cmd"], [5, 2, 1, "", "call_one"], [5, 2, 1, "", "config_instance"], [5, 2, 1, "", "fit"], [5, 2, 1, "", "generate_prefix"], [5, 2, 1, "", "get_architecture"], [5, 2, 1, "", "get_bounded_threads"], [5, 2, 1, "", "get_core_ids"], [5, 2, 1, "", "get_physical_ids"], [5, 2, 1, "", "get_threads"], [5, 2, 1, "", "get_threads_per_core"], [5, 2, 1, "", "profile"], [5, 2, 1, "", "run_instance"], [5, 2, 1, "", "set_all_env_var"], [5, 2, 1, "", "set_env_var"], [5, 2, 1, "", "summary_benchmark"]], "neural_compressor.common": [[6, 0, 0, "-", "base_config"], [7, 0, 0, "-", "base_tuning"], [9, 0, 0, "-", "tuning_param"], [11, 0, 0, "-", "utils"]], "neural_compressor.common.base_config": [[6, 1, 1, "", "BaseConfig"], [6, 1, 1, "", "ComposableConfig"], [6, 1, 1, "", "ConfigRegistry"], [6, 2, 1, "", "get_all_config_set_from_config_registry"], [6, 2, 1, "", "register_config"], [6, 2, 1, "", "register_supported_configs_for_fwk"]], "neural_compressor.common.base_config.BaseConfig": [[6, 3, 1, "", "name"], [6, 3, 1, "", "params_list"]], "neural_compressor.common.base_config.ComposableConfig": [[6, 3, 1, "", "config_list"]], "neural_compressor.common.base_tuning": [[7, 1, 1, "", "ConfigLoader"], [7, 1, 1, "", "ConfigSet"], [7, 1, 1, "", "EvaluationFuncWrapper"], [7, 1, 1, "", "Evaluator"], [7, 1, 1, "", "Sampler"], [7, 1, 1, "", "SequentialSampler"], [7, 1, 1, "", "TuningConfig"], [7, 1, 1, "", "TuningMonitor"], [7, 2, 1, "", "init_tuning"]], "neural_compressor.common.base_tuning.ConfigSet": [[7, 3, 1, "", "config_list"]], "neural_compressor.common.tuning_param": [[9, 1, 1, "", "ParamLevel"], [9, 1, 1, "", "TuningParam"]], "neural_compressor.common.tuning_param.ParamLevel": [[9, 3, 1, "", "MODEL_LEVEL"], [9, 3, 1, "", "OP_LEVEL"], [9, 3, 1, "", "OP_TYPE_LEVEL"]], "neural_compressor.common.utils": [[10, 0, 0, "-", "constants"], [12, 0, 0, "-", "logger"], [13, 0, 0, "-", "save_load"], [14, 0, 0, "-", "utility"]], "neural_compressor.common.utils.constants": [[10, 1, 1, "", "Mode"]], "neural_compressor.common.utils.logger": [[12, 1, 1, "", "Logger"], [12, 1, 1, "", "TuningLogger"]], "neural_compressor.common.utils.save_load": [[13, 2, 1, "", "load_config_mapping"], [13, 2, 1, "", "save_config_mapping"]], "neural_compressor.common.utils.utility": [[14, 1, 1, "", "CpuInfo"], [14, 1, 1, "", "LazyImport"], [14, 1, 1, "", "ProcessorType"], [14, 1, 1, "", "Statistics"], [14, 2, 1, "", "call_counter"], [14, 2, 1, "", "detect_processor_type_based_on_hw"], [14, 2, 1, "", "dump_elapsed_time"], [14, 2, 1, "", "get_workspace"], [14, 2, 1, "", "log_process"], [14, 2, 1, "", "set_random_seed"], [14, 2, 1, "", "set_resume_from"], [14, 2, 1, "", "set_tensorboard"], [14, 2, 1, "", "set_workspace"], [14, 2, 1, "", "singleton"]], "neural_compressor.config": [[15, 1, 1, "", "AccuracyCriterion"], [15, 1, 1, "", "BenchmarkConfig"], [15, 1, 1, "", "DistillationConfig"], [15, 1, 1, "", "DotDict"], [15, 1, 1, "", "ExportConfig"], [15, 1, 1, "", "HPOConfig"], [15, 1, 1, "", "IntermediateLayersKnowledgeDistillationLossConfig"], [15, 1, 1, "", "Keras"], [15, 1, 1, "", "KnowledgeDistillationLossConfig"], [15, 1, 1, "", "MXNet"], [15, 1, 1, "", "MixedPrecisionConfig"], [15, 1, 1, "", "NASConfig"], [15, 1, 1, "", "ONNX"], [15, 1, 1, "", "ONNXQlinear2QDQConfig"], [15, 1, 1, "", "Options"], [15, 1, 1, "", "PostTrainingQuantConfig"], [15, 1, 1, "", "PyTorch"], [15, 1, 1, "", "QuantizationAwareTrainingConfig"], [15, 1, 1, "", "SelfKnowledgeDistillationLossConfig"], [15, 1, 1, "", "TF2ONNXConfig"], [15, 1, 1, "", "TensorFlow"], [15, 1, 1, "", "Torch2ONNXConfig"], [15, 1, 1, "", "TuningCriterion"], [15, 1, 1, "", "WeightPruningConfig"]], "neural_compressor.contrib": [[17, 0, 0, "-", "strategy"]], "neural_compressor.contrib.strategy": [[18, 0, 0, "-", "sigopt"], [19, 0, 0, "-", "tpe"]], "neural_compressor.contrib.strategy.sigopt": [[18, 1, 1, "", "SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[19, 1, 1, "", "TpeTuneStrategy"]], "neural_compressor.data": [[26, 0, 0, "-", "datasets"], [30, 0, 0, "-", "filters"], [33, 0, 0, "-", "transforms"]], "neural_compressor.data.datasets": [[20, 0, 0, "-", "bert_dataset"], [21, 0, 0, "-", "coco_dataset"], [22, 0, 0, "-", "dataset"], [23, 0, 0, "-", "dummy_dataset"], [24, 0, 0, "-", "dummy_dataset_v2"], [25, 0, 0, "-", "imagenet_dataset"], [27, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.data.datasets.bert_dataset": [[20, 1, 1, "", "InputFeatures"], [20, 1, 1, "", "ONNXRTBertDataset"], [20, 1, 1, "", "ParseDecodeBert"], [20, 1, 1, "", "PytorchBertDataset"], [20, 1, 1, "", "TensorflowBertDataset"], [20, 1, 1, "", "TensorflowModelZooBertDataset"], [20, 2, 1, "", "convert_examples_to_features"], [20, 2, 1, "", "load_and_cache_examples"]], "neural_compressor.data.datasets.coco_dataset": [[21, 1, 1, "", "COCONpy"], [21, 1, 1, "", "COCORaw"], [21, 1, 1, "", "COCORecordDataset"], [21, 1, 1, "", "ParseDecodeCoco"]], "neural_compressor.data.datasets.dataset": [[22, 1, 1, "", "CIFAR10"], [22, 1, 1, "", "CIFAR100"], [22, 1, 1, "", "Dataset"], [22, 1, 1, "", "Datasets"], [22, 1, 1, "", "FashionMNIST"], [22, 1, 1, "", "ImageFolder"], [22, 1, 1, "", "IterableDataset"], [22, 1, 1, "", "MNIST"], [22, 1, 1, "", "MXNetCIFAR10"], [22, 1, 1, "", "MXNetCIFAR100"], [22, 1, 1, "", "MXNetDatasets"], [22, 1, 1, "", "MXNetFashionMNIST"], [22, 1, 1, "", "MXNetImageFolder"], [22, 1, 1, "", "MXNetMNIST"], [22, 1, 1, "", "ONNXRTITDatasets"], [22, 1, 1, "", "ONNXRTQLDatasets"], [22, 1, 1, "", "PyTorchDatasets"], [22, 1, 1, "", "PytorchCIFAR10"], [22, 1, 1, "", "PytorchCIFAR100"], [22, 1, 1, "", "PytorchFashionMNIST"], [22, 1, 1, "", "PytorchMNIST"], [22, 1, 1, "", "PytorchMxnetWrapDataset"], [22, 1, 1, "", "PytorchMxnetWrapFunction"], [22, 1, 1, "", "Tensorflow"], [22, 1, 1, "", "TensorflowCIFAR10"], [22, 1, 1, "", "TensorflowCIFAR100"], [22, 1, 1, "", "TensorflowDatasets"], [22, 1, 1, "", "TensorflowFashionMNIST"], [22, 1, 1, "", "TensorflowImageRecord"], [22, 1, 1, "", "TensorflowMNIST"], [22, 1, 1, "", "TensorflowTFRecordDataset"], [22, 1, 1, "", "TensorflowVOCRecord"], [22, 2, 1, "", "calculate_md5"], [22, 2, 1, "", "check_integrity"], [22, 2, 1, "", "dataset_registry"], [22, 2, 1, "", "download_url"], [22, 4, 1, "", "framework_datasets"], [22, 2, 1, "", "gen_bar_updater"]], "neural_compressor.data.datasets.dummy_dataset": [[23, 1, 1, "", "DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[24, 1, 1, "", "DummyDataset"], [24, 1, 1, "", "SparseDummyDataset"]], "neural_compressor.data.datasets.imagenet_dataset": [[25, 1, 1, "", "ImagenetRaw"], [25, 1, 1, "", "MXNetImagenetRaw"], [25, 1, 1, "", "ONNXRTImagenetDataset"], [25, 1, 1, "", "PytorchImagenetRaw"], [25, 1, 1, "", "TensorflowImagenetDataset"], [25, 1, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.data.datasets.style_transfer_dataset": [[27, 1, 1, "", "StyleTransferDataset"]], "neural_compressor.data.filters": [[28, 0, 0, "-", "coco_filter"], [29, 0, 0, "-", "filter"]], "neural_compressor.data.filters.coco_filter": [[28, 1, 1, "", "LabelBalanceCOCORawFilter"], [28, 1, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.filter": [[29, 1, 1, "", "FILTERS"], [29, 1, 1, "", "Filter"], [29, 1, 1, "", "MXNetFilters"], [29, 1, 1, "", "ONNXRTITFilters"], [29, 1, 1, "", "ONNXRTQLFilters"], [29, 1, 1, "", "PyTorchFilters"], [29, 1, 1, "", "TensorflowFilters"], [29, 2, 1, "", "filter_registry"]], "neural_compressor.data.transforms": [[32, 0, 0, "-", "imagenet_transform"], [34, 0, 0, "-", "postprocess"], [35, 0, 0, "-", "tokenization"], [36, 0, 0, "-", "transform"]], "neural_compressor.data.transforms.imagenet_transform": [[32, 1, 1, "", "BilinearImagenetTransform"], [32, 1, 1, "", "LabelShift"], [32, 1, 1, "", "ONNXResizeCropImagenetTransform"], [32, 1, 1, "", "OnnxBilinearImagenetTransform"], [32, 1, 1, "", "ParseDecodeImagenet"], [32, 1, 1, "", "ParseDecodeImagenetTransform"], [32, 1, 1, "", "QuantizedInput"], [32, 1, 1, "", "ResizeWithAspectRatio"], [32, 1, 1, "", "TensorflowResizeCropImagenetTransform"], [32, 1, 1, "", "TensorflowShiftRescale"], [32, 1, 1, "", "TensorflowTransposeLastChannel"]], "neural_compressor.data.transforms.postprocess": [[34, 1, 1, "", "Postprocess"]], "neural_compressor.data.transforms.tokenization": [[35, 1, 1, "", "BasicTokenizer"], [35, 1, 1, "", "FullTokenizer"], [35, 1, 1, "", "WordpieceTokenizer"], [35, 2, 1, "", "convert_by_vocab"], [35, 2, 1, "", "convert_to_unicode"], [35, 2, 1, "", "load_vocab"], [35, 2, 1, "", "whitespace_tokenize"]], "neural_compressor.data.transforms.transform": [[36, 1, 1, "", "AlignImageChannelTransform"], [36, 1, 1, "", "BaseTransform"], [36, 1, 1, "", "CastONNXTransform"], [36, 1, 1, "", "CastPyTorchTransform"], [36, 1, 1, "", "CastTFTransform"], [36, 1, 1, "", "CenterCropTFTransform"], [36, 1, 1, "", "CenterCropTransform"], [36, 1, 1, "", "CollectTransform"], [36, 1, 1, "", "ComposeTransform"], [36, 1, 1, "", "CropResizeTFTransform"], [36, 1, 1, "", "CropResizeTransform"], [36, 1, 1, "", "CropToBoundingBox"], [36, 1, 1, "", "InputFeatures"], [36, 1, 1, "", "MXNetCropResizeTransform"], [36, 1, 1, "", "MXNetCropToBoundingBox"], [36, 1, 1, "", "MXNetNormalizeTransform"], [36, 1, 1, "", "MXNetTransforms"], [36, 1, 1, "", "MXNetTranspose"], [36, 1, 1, "", "NormalizeTFTransform"], [36, 1, 1, "", "NormalizeTransform"], [36, 1, 1, "", "ONNXRTCropToBoundingBox"], [36, 1, 1, "", "ONNXRTITTransforms"], [36, 1, 1, "", "ONNXRTQLTransforms"], [36, 1, 1, "", "PaddedCenterCropTransform"], [36, 1, 1, "", "ParseDecodeVocTransform"], [36, 1, 1, "", "PyTorchAlignImageChannel"], [36, 1, 1, "", "PyTorchCropResizeTransform"], [36, 1, 1, "", "PyTorchNormalizeTransform"], [36, 1, 1, "", "PyTorchTransforms"], [36, 1, 1, "", "PyTorchTranspose"], [36, 1, 1, "", "PytorchMxnetTransform"], [36, 1, 1, "", "PytorchMxnetWrapFunction"], [36, 1, 1, "", "RandomCropTFTransform"], [36, 1, 1, "", "RandomCropTransform"], [36, 1, 1, "", "RandomHorizontalFlip"], [36, 1, 1, "", "RandomResizedCropMXNetTransform"], [36, 1, 1, "", "RandomResizedCropPytorchTransform"], [36, 1, 1, "", "RandomResizedCropTFTransform"], [36, 1, 1, "", "RandomResizedCropTransform"], [36, 1, 1, "", "RandomVerticalFlip"], [36, 1, 1, "", "RescaleKerasPretrainTransform"], [36, 1, 1, "", "RescaleTFTransform"], [36, 1, 1, "", "RescaleTransform"], [36, 1, 1, "", "ResizeMXNetTransform"], [36, 1, 1, "", "ResizePytorchTransform"], [36, 1, 1, "", "ResizeTFTransform"], [36, 1, 1, "", "ResizeTransform"], [36, 1, 1, "", "ResizeWithRatio"], [36, 1, 1, "", "SquadExample"], [36, 1, 1, "", "TFModelZooCollectTransform"], [36, 1, 1, "", "TFSquadV1ModelZooPostTransform"], [36, 1, 1, "", "TFSquadV1PostTransform"], [36, 1, 1, "", "TRANSFORMS"], [36, 1, 1, "", "TensorflowCropToBoundingBox"], [36, 1, 1, "", "TensorflowRandomHorizontalFlip"], [36, 1, 1, "", "TensorflowRandomVerticalFlip"], [36, 1, 1, "", "TensorflowResizeWithRatio"], [36, 1, 1, "", "TensorflowTransform"], [36, 1, 1, "", "TensorflowTransforms"], [36, 1, 1, "", "TensorflowTranspose"], [36, 1, 1, "", "TensorflowWrapFunction"], [36, 1, 1, "", "ToArray"], [36, 1, 1, "", "ToNDArrayTransform"], [36, 1, 1, "", "Transforms"], [36, 1, 1, "", "Transpose"], [36, 2, 1, "", "convert_examples_to_features"], [36, 2, 1, "", "get_final_text"], [36, 2, 1, "", "get_torchvision_map"], [36, 2, 1, "", "read_squad_examples"], [36, 2, 1, "", "transform_registry"]], "neural_compressor.metric": [[38, 0, 0, "-", "bleu"], [39, 0, 0, "-", "bleu_util"], [40, 0, 0, "-", "coco_label_map"], [41, 0, 0, "-", "coco_tools"], [42, 0, 0, "-", "evaluate_squad"], [43, 0, 0, "-", "f1"], [45, 0, 0, "-", "metric"]], "neural_compressor.metric.bleu": [[38, 1, 1, "", "BLEU"], [38, 1, 1, "", "UnicodeRegex"], [38, 2, 1, "", "bleu_tokenize"]], "neural_compressor.metric.bleu.BLEU": [[38, 3, 1, "", "labels"], [38, 3, 1, "", "predictions"]], "neural_compressor.metric.bleu.UnicodeRegex": [[38, 3, 1, "", "nondigit_punct_re"], [38, 3, 1, "", "punct_nondigit_re"], [38, 3, 1, "", "symbol_re"]], "neural_compressor.metric.bleu_util": [[39, 2, 1, "", "compute_bleu"]], "neural_compressor.metric.coco_tools": [[41, 1, 1, "", "COCOEvalWrapper"], [41, 1, 1, "", "COCOWrapper"], [41, 2, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [41, 2, 1, "", "ExportSingleImageDetectionMasksToCoco"], [41, 2, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.metric.coco_tools.COCOWrapper": [[41, 3, 1, "", "dataset"], [41, 3, 1, "", "detection_type"]], "neural_compressor.metric.evaluate_squad": [[42, 2, 1, "", "evaluate"], [42, 2, 1, "", "exact_match_score"], [42, 2, 1, "", "f1_score"], [42, 2, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[43, 2, 1, "", "evaluate"], [43, 2, 1, "", "f1_score"], [43, 2, 1, "", "metric_max_over_ground_truths"], [43, 2, 1, "", "normalize_answer"]], "neural_compressor.metric.metric": [[45, 1, 1, "", "Accuracy"], [45, 1, 1, "", "BaseMetric"], [45, 1, 1, "", "COCOmAPv2"], [45, 1, 1, "", "F1"], [45, 1, 1, "", "GeneralTopK"], [45, 1, 1, "", "Loss"], [45, 1, 1, "", "MAE"], [45, 1, 1, "", "METRICS"], [45, 1, 1, "", "MSE"], [45, 1, 1, "", "MXNetMetrics"], [45, 1, 1, "", "Metric"], [45, 1, 1, "", "ONNXRTGLUE"], [45, 1, 1, "", "ONNXRTITMetrics"], [45, 1, 1, "", "ONNXRTQLMetrics"], [45, 1, 1, "", "PyTorchLoss"], [45, 1, 1, "", "PyTorchMetrics"], [45, 1, 1, "", "RMSE"], [45, 1, 1, "", "ROC"], [45, 1, 1, "", "SquadF1"], [45, 1, 1, "", "TensorflowCOCOMAP"], [45, 1, 1, "", "TensorflowMAP"], [45, 1, 1, "", "TensorflowMetrics"], [45, 1, 1, "", "TensorflowTopK"], [45, 1, 1, "", "TensorflowVOCMAP"], [45, 1, 1, "", "WrapMXNetMetric"], [45, 1, 1, "", "WrapONNXRTMetric"], [45, 1, 1, "", "WrapPyTorchMetric"], [45, 1, 1, "", "mIOU"], [45, 2, 1, "", "metric_registry"], [45, 2, 1, "", "register_customer_metric"]], "neural_compressor.metric.metric.Accuracy": [[45, 3, 1, "", "label_list"], [45, 3, 1, "", "pred_list"], [45, 3, 1, "", "sample"]], "neural_compressor.metric.metric.GeneralTopK": [[45, 3, 1, "", "k"], [45, 3, 1, "", "num_correct"], [45, 3, 1, "", "num_sample"]], "neural_compressor.metric.metric.Loss": [[45, 3, 1, "", "sample"], [45, 3, 1, "", "sum"]], "neural_compressor.metric.metric.MAE": [[45, 3, 1, "", "compare_label"], [45, 3, 1, "", "label_list"], [45, 3, 1, "", "pred_list"]], "neural_compressor.metric.metric.METRICS": [[45, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.MSE": [[45, 3, 1, "", "compare_label"], [45, 3, 1, "", "label_list"], [45, 3, 1, "", "pred_list"]], "neural_compressor.metric.metric.MXNetMetrics": [[45, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTITMetrics": [[45, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTQLMetrics": [[45, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.PyTorchMetrics": [[45, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.RMSE": [[45, 3, 1, "", "mse"]], "neural_compressor.metric.metric.TensorflowMetrics": [[45, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.TensorflowTopK": [[45, 3, 1, "", "k"], [45, 3, 1, "", "num_correct"], [45, 3, 1, "", "num_sample"]], "neural_compressor.mix_precision": [[46, 2, 1, "", "fit"]], "neural_compressor.model": [[47, 0, 0, "-", "base_model"], [49, 0, 0, "-", "keras_model"], [50, 0, 0, "-", "model"], [51, 0, 0, "-", "mxnet_model"], [52, 0, 0, "-", "nets_factory"], [53, 0, 0, "-", "onnx_model"], [54, 0, 0, "-", "tensorflow_model"], [55, 0, 0, "-", "torch_model"]], "neural_compressor.model.base_model": [[47, 1, 1, "", "BaseModel"]], "neural_compressor.model.keras_model": [[49, 1, 1, "", "KerasModel"]], "neural_compressor.model.model": [[50, 1, 1, "", "Model"], [50, 2, 1, "", "get_model_fwk_name"]], "neural_compressor.model.mxnet_model": [[51, 1, 1, "", "MXNetModel"]], "neural_compressor.model.nets_factory": [[52, 1, 1, "", "TFSlimNetsFactory"]], "neural_compressor.model.onnx_model": [[53, 1, 1, "", "ONNXModel"]], "neural_compressor.model.tensorflow_model": [[54, 1, 1, "", "TensorflowBaseModel"], [54, 1, 1, "", "TensorflowCheckpointModel"], [54, 1, 1, "", "TensorflowLLMModel"], [54, 1, 1, "", "TensorflowModel"], [54, 1, 1, "", "TensorflowQATModel"], [54, 1, 1, "", "TensorflowSavedModelModel"], [54, 2, 1, "", "checkpoint_session"], [54, 2, 1, "", "estimator_session"], [54, 2, 1, "", "frozen_pb_session"], [54, 2, 1, "", "get_model_type"], [54, 2, 1, "", "graph_def_session"], [54, 2, 1, "", "graph_session"], [54, 2, 1, "", "keras_session"], [54, 2, 1, "", "load_saved_model"], [54, 2, 1, "", "saved_model_session"], [54, 2, 1, "", "slim_session"], [54, 2, 1, "", "try_loading_keras"], [54, 2, 1, "", "validate_and_inference_input_output"], [54, 2, 1, "", "validate_graph_node"]], "neural_compressor.model.torch_model": [[55, 1, 1, "", "IPEXModel"], [55, 1, 1, "", "PyTorchBaseModel"], [55, 1, 1, "", "PyTorchFXModel"], [55, 1, 1, "", "PyTorchModel"]], "neural_compressor.objective": [[56, 1, 1, "", "Accuracy"], [56, 1, 1, "", "Footprint"], [56, 1, 1, "", "ModelSize"], [56, 1, 1, "", "MultiObjective"], [56, 1, 1, "", "Objective"], [56, 1, 1, "", "Performance"], [56, 2, 1, "", "objective_custom_registry"], [56, 2, 1, "", "objective_registry"]], "neural_compressor.quantization": [[58, 2, 1, "", "fit"]], "neural_compressor.strategy": [[59, 0, 0, "-", "auto"], [60, 0, 0, "-", "auto_mixed_precision"], [61, 0, 0, "-", "basic"], [62, 0, 0, "-", "bayesian"], [63, 0, 0, "-", "conservative"], [64, 0, 0, "-", "exhaustive"], [65, 0, 0, "-", "hawq_v2"], [67, 0, 0, "-", "mse"], [68, 0, 0, "-", "mse_v2"], [69, 0, 0, "-", "random"], [70, 0, 0, "-", "strategy"], [72, 0, 0, "-", "utils"]], "neural_compressor.strategy.auto": [[59, 1, 1, "", "AutoTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[60, 1, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.basic": [[61, 1, 1, "", "BasicTuneStrategy"]], "neural_compressor.strategy.bayesian": [[62, 1, 1, "", "BayesianOptimization"], [62, 1, 1, "", "BayesianTuneStrategy"], [62, 1, 1, "", "TargetSpace"], [62, 2, 1, "", "acq_max"]], "neural_compressor.strategy.conservative": [[63, 1, 1, "", "ConservativeTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[64, 1, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[65, 1, 1, "", "HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.mse": [[67, 1, 1, "", "MSETuneStrategy"]], "neural_compressor.strategy.mse_v2": [[68, 1, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.strategy.random": [[69, 1, 1, "", "RandomTuneStrategy"]], "neural_compressor.strategy.strategy": [[70, 1, 1, "", "TuneStrategy"], [70, 1, 1, "", "TuneStrategyMeta"], [70, 2, 1, "", "strategy_registry"]], "neural_compressor.strategy.utils": [[71, 0, 0, "-", "constant"], [73, 0, 0, "-", "tuning_sampler"], [74, 0, 0, "-", "tuning_space"], [75, 0, 0, "-", "tuning_structs"], [76, 0, 0, "-", "utility"]], "neural_compressor.strategy.utils.tuning_sampler": [[73, 1, 1, "", "BlockFallbackTuningSampler"], [73, 1, 1, "", "FallbackTuningSampler"], [73, 1, 1, "", "LowerBitsSampler"], [73, 1, 1, "", "ModelWiseTuningSampler"], [73, 1, 1, "", "OpTypeWiseTuningSampler"], [73, 1, 1, "", "OpWiseTuningSampler"], [73, 1, 1, "", "SmoothQuantSampler"], [73, 1, 1, "", "TuningOrder"], [73, 1, 1, "", "TuningSampler"], [73, 1, 1, "", "WeightOnlyQuantSampler"]], "neural_compressor.strategy.utils.tuning_space": [[74, 1, 1, "", "TuningItem"], [74, 1, 1, "", "TuningSpace"], [74, 2, 1, "", "initial_tuning_cfg_with_quant_mode"], [74, 2, 1, "", "pattern_to_internal"], [74, 2, 1, "", "pattern_to_path"], [74, 2, 1, "", "quant_mode_from_pattern"]], "neural_compressor.strategy.utils.tuning_structs": [[75, 1, 1, "", "OpTuningConfig"]], "neural_compressor.strategy.utils.utility": [[76, 1, 1, "", "ClassRegister"], [76, 1, 1, "", "OrderedDefaultDict"], [76, 1, 1, "", "QuantOptions"], [76, 1, 1, "", "QuantType"], [76, 2, 1, "", "build_slave_faker_model"], [76, 2, 1, "", "extract_data_type"], [76, 2, 1, "", "get_adaptor_name"], [76, 2, 1, "", "preprocess_user_cfg"], [76, 2, 1, "", "reverted_data_type"]], "neural_compressor.tensorflow": [[80, 0, 0, "-", "quantization"]], "neural_compressor.tensorflow.quantization": [[78, 0, 0, "-", "autotune"], [79, 0, 0, "-", "config"], [81, 0, 0, "-", "quantize"]], "neural_compressor.tensorflow.quantization.autotune": [[78, 2, 1, "", "autotune"]], "neural_compressor.tensorflow.quantization.config": [[79, 1, 1, "", "SmoothQuantConfig"], [79, 1, 1, "", "StaticQuantConfig"], [79, 2, 1, "", "get_default_sq_config"], [79, 2, 1, "", "get_default_static_quant_config"]], "neural_compressor.tensorflow.quantization.quantize": [[81, 2, 1, "", "quantize_model"], [81, 2, 1, "", "quantize_model_with_single_config"]], "neural_compressor.torch": [[82, 0, 0, "-", "export"], [87, 0, 0, "-", "quantization"]], "neural_compressor.torch.export": [[83, 0, 0, "-", "pt2e_export"]], "neural_compressor.torch.export.pt2e_export": [[83, 2, 1, "", "export"], [83, 2, 1, "", "export_model_for_pt2e_quant"]], "neural_compressor.torch.quantization": [[85, 0, 0, "-", "autotune"], [86, 0, 0, "-", "config"], [88, 0, 0, "-", "quantize"]], "neural_compressor.torch.quantization.autotune": [[85, 2, 1, "", "autotune"], [85, 2, 1, "", "get_all_config_set"], [85, 2, 1, "", "get_rtn_double_quant_config_set"]], "neural_compressor.torch.quantization.config": [[86, 1, 1, "", "AWQConfig"], [86, 1, 1, "", "AutoRoundConfig"], [86, 1, 1, "", "DynamicQuantConfig"], [86, 1, 1, "", "FP8Config"], [86, 1, 1, "", "GPTQConfig"], [86, 1, 1, "", "HQQConfig"], [86, 1, 1, "", "MXQuantConfig"], [86, 1, 1, "", "MixedPrecisionConfig"], [86, 1, 1, "", "OperatorConfig"], [86, 1, 1, "", "RTNConfig"], [86, 1, 1, "", "SmoothQuantConfig"], [86, 1, 1, "", "StaticQuantConfig"], [86, 1, 1, "", "TEQConfig"], [86, 1, 1, "", "TorchBaseConfig"], [86, 2, 1, "", "get_default_awq_config"], [86, 2, 1, "", "get_default_double_quant_config"], [86, 2, 1, "", "get_default_dynamic_config"], [86, 2, 1, "", "get_default_fp8_config"], [86, 2, 1, "", "get_default_fp8_config_set"], [86, 2, 1, "", "get_default_hqq_config"], [86, 2, 1, "", "get_default_mixed_precision_config"], [86, 2, 1, "", "get_default_mixed_precision_config_set"], [86, 2, 1, "", "get_default_mx_config"], [86, 2, 1, "", "get_default_rtn_config"], [86, 2, 1, "", "get_default_sq_config"], [86, 2, 1, "", "get_default_static_config"], [86, 2, 1, "", "get_default_teq_config"], [86, 2, 1, "", "get_woq_tuning_config"]], "neural_compressor.torch.quantization.quantize": [[88, 2, 1, "", "convert"], [88, 2, 1, "", "prepare"], [88, 2, 1, "", "quantize"]], "neural_compressor.training": [[89, 1, 1, "", "CallBacks"], [89, 1, 1, "", "CompressionManager"], [89, 2, 1, "", "fit"], [89, 2, 1, "", "prepare_compression"]], "neural_compressor.utils": [[90, 0, 0, "-", "collect_layer_histogram"], [91, 0, 0, "-", "constant"], [92, 0, 0, "-", "create_obj_from_config"], [93, 0, 0, "-", "export"], [98, 0, 0, "-", "kl_divergence"], [99, 0, 0, "-", "load_huggingface"], [100, 0, 0, "-", "logger"], [101, 0, 0, "-", "options"], [102, 0, 0, "-", "pytorch"], [103, 0, 0, "-", "utility"], [104, 0, 0, "-", "weights_details"]], "neural_compressor.utils.collect_layer_histogram": [[90, 1, 1, "", "LayerHistogramCollector"]], "neural_compressor.utils.create_obj_from_config": [[92, 2, 1, "", "create_dataloader"], [92, 2, 1, "", "create_dataset"], [92, 2, 1, "", "create_eval_func"], [92, 2, 1, "", "create_train_func"], [92, 2, 1, "", "get_algorithm"], [92, 2, 1, "", "get_func_from_config"], [92, 2, 1, "", "get_metrics"], [92, 2, 1, "", "get_postprocess"], [92, 2, 1, "", "get_preprocess"]], "neural_compressor.utils.export": [[94, 0, 0, "-", "qlinear2qdq"], [95, 0, 0, "-", "tf2onnx"], [96, 0, 0, "-", "torch2onnx"]], "neural_compressor.utils.export.qlinear2qdq": [[94, 2, 1, "", "check_model"], [94, 2, 1, "", "onnx_qlinear_to_qdq"]], "neural_compressor.utils.export.tf2onnx": [[95, 2, 1, "", "tf_to_fp32_onnx"], [95, 2, 1, "", "tf_to_int8_onnx"]], "neural_compressor.utils.export.torch2onnx": [[96, 2, 1, "", "dynamic_quant_export"], [96, 2, 1, "", "get_node_mapping"], [96, 2, 1, "", "get_quantizable_onnx_ops"], [96, 2, 1, "", "static_quant_export"], [96, 2, 1, "", "torch_to_fp32_onnx"], [96, 2, 1, "", "torch_to_int8_onnx"]], "neural_compressor.utils.kl_divergence": [[98, 1, 1, "", "KL_Divergence"]], "neural_compressor.utils.load_huggingface": [[99, 1, 1, "", "OptimizedModel"], [99, 2, 1, "", "export_compressed_model"], [99, 2, 1, "", "save_for_huggingface_upstream"]], "neural_compressor.utils.logger": [[100, 1, 1, "", "Logger"], [100, 2, 1, "", "debug"], [100, 2, 1, "", "error"], [100, 2, 1, "", "fatal"], [100, 2, 1, "", "info"], [100, 2, 1, "", "log"], [100, 2, 1, "", "warn"], [100, 2, 1, "", "warning"]], "neural_compressor.utils.options": [[101, 1, 1, "", "onnxrt"]], "neural_compressor.utils.pytorch": [[102, 2, 1, "", "is_int8_model"], [102, 2, 1, "", "load"], [102, 2, 1, "", "load_weight_only"], [102, 2, 1, "", "recover_model_from_json"]], "neural_compressor.utils.utility": [[103, 1, 1, "", "CaptureOutputToFile"], [103, 1, 1, "", "CpuInfo"], [103, 2, 1, "", "Dequantize"], [103, 1, 1, "", "DotDict"], [103, 1, 1, "", "GLOBAL_STATE"], [103, 1, 1, "", "LazyImport"], [103, 1, 1, "", "MODE"], [103, 1, 1, "", "OpEntry"], [103, 1, 1, "", "Statistics"], [103, 2, 1, "", "alias_param"], [103, 2, 1, "", "calculate_mse"], [103, 2, 1, "", "check_key_exist"], [103, 2, 1, "", "combine_histogram"], [103, 2, 1, "", "compare_objects"], [103, 2, 1, "", "compute_sparsity"], [103, 2, 1, "", "deep_get"], [103, 2, 1, "", "deep_set"], [103, 2, 1, "", "dequantize_weight"], [103, 2, 1, "", "dump_class_attrs"], [103, 2, 1, "", "dump_data_to_local"], [103, 2, 1, "", "dump_elapsed_time"], [103, 2, 1, "", "dump_table"], [103, 2, 1, "", "dump_table_to_csv"], [103, 2, 1, "", "equal_dicts"], [103, 2, 1, "", "fault_tolerant_file"], [103, 2, 1, "", "get_all_fp32_data"], [103, 2, 1, "", "get_number_of_sockets"], [103, 2, 1, "", "get_op_list"], [103, 2, 1, "", "get_size"], [103, 2, 1, "", "get_tensor_histogram"], [103, 2, 1, "", "get_tensors_info"], [103, 2, 1, "", "get_tuning_history"], [103, 2, 1, "", "get_weights_details"], [103, 2, 1, "", "load_data_from_pkl"], [103, 2, 1, "", "mse_metric_gap"], [103, 2, 1, "", "print_op_list"], [103, 2, 1, "", "print_table"], [103, 2, 1, "", "recover"], [103, 2, 1, "", "set_random_seed"], [103, 2, 1, "", "set_resume_from"], [103, 2, 1, "", "set_tensorboard"], [103, 2, 1, "", "set_workspace"], [103, 2, 1, "", "show_memory_info"], [103, 2, 1, "", "singleton"], [103, 2, 1, "", "str2array"], [103, 2, 1, "", "time_limit"], [103, 2, 1, "", "version1_eq_version2"], [103, 2, 1, "", "version1_gt_version2"], [103, 2, 1, "", "version1_gte_version2"], [103, 2, 1, "", "version1_lt_version2"], [103, 2, 1, "", "version1_lte_version2"]], "neural_compressor.utils.weights_details": [[104, 1, 1, "", "WeightsDetails"], [104, 1, 1, "", "WeightsStatistics"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:function", "3": "py:attribute", "4": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "function", "Python function"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "data", "Python data"]}, "titleterms": {"neural_compressor": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105], "algorithm": [0, 1, 2, 3, 4, 155, 183, 186, 188], "class": [0, 1, 3, 4, 6, 7, 9, 10, 12, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 32, 34, 35, 36, 38, 41, 45, 47, 49, 50, 51, 52, 53, 54, 55, 56, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 73, 74, 75, 76, 79, 86, 89, 90, 98, 99, 100, 101, 103, 104, 129], "function": [0, 5, 6, 7, 13, 14, 20, 22, 29, 35, 36, 38, 39, 41, 42, 43, 45, 46, 50, 54, 56, 58, 62, 70, 74, 76, 78, 79, 81, 83, 85, 86, 88, 89, 92, 94, 95, 96, 99, 100, 102, 103, 160], "modul": [0, 1, 3, 4, 5, 6, 7, 9, 10, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 32, 34, 35, 36, 38, 39, 41, 42, 43, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 73, 74, 75, 76, 78, 79, 81, 83, 85, 86, 88, 89, 90, 92, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104], "content": [0, 1, 3, 4, 5, 6, 7, 9, 10, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 32, 34, 35, 36, 38, 39, 41, 42, 43, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 73, 74, 75, 76, 78, 79, 81, 83, 85, 86, 88, 89, 90, 92, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 128], "fast_bias_correct": 1, "submodul": [2, 8, 11, 17, 26, 30, 33, 37, 44, 48, 66, 72, 80, 82, 87, 93, 97], "smooth_quant": 3, "weight_correct": 4, "benchmark": [5, 119, 139, 154, 172], "common": [6, 7, 8, 9, 10, 11, 12, 13, 14, 113, 114, 126, 163], "base_config": 6, "base_tun": 7, "subpackag": [8, 16, 31, 37, 66, 77, 84, 97], "tuning_param": 9, "util": [10, 11, 12, 13, 14, 71, 72, 73, 74, 75, 76, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 134], "constant": [10, 71, 91], "logger": [12, 100, 156], "save_load": 13, "config": [15, 79, 86, 141, 149, 152, 176], "contrib": [16, 17, 18, 19], "strategi": [17, 18, 19, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 146, 185, 188], "sigopt": [18, 185, 188], "tpe": [19, 188], "data": [20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 130, 131, 161], "dataset": [20, 21, 22, 23, 24, 25, 26, 27, 166], "bert_dataset": 20, "coco_dataset": 21, "attribut": [22, 124], "dummy_dataset": 23, "dummy_dataset_v2": 24, "imagenet_dataset": 25, "style_transfer_dataset": 27, "filter": [28, 29, 30], "coco_filt": 28, "transform": [32, 33, 34, 35, 36, 166, 187], "imagenet_transform": 32, "postprocess": 34, "token": 35, "metric": [38, 39, 40, 41, 42, 43, 44, 45, 166, 171], "bleu": 38, "bleu_util": 39, "coco_label_map": 40, "coco_tool": 41, "evaluate_squad": 42, "f1": 43, "mix_precis": 46, "model": [47, 48, 49, 50, 51, 52, 53, 54, 55, 111, 112, 118, 130, 143, 162, 168, 170, 172, 174, 175, 178, 181, 183, 186, 189], "base_model": 47, "keras_model": 49, "mxnet_model": 51, "nets_factori": 52, "onnx_model": 53, "tensorflow_model": 54, "torch_model": 55, "object": [56, 144, 176], "profil": 57, "quantiz": [58, 78, 79, 80, 81, 85, 86, 87, 88, 108, 109, 111, 112, 113, 114, 115, 117, 120, 123, 126, 128, 130, 131, 145, 147, 148, 149, 150, 151, 152, 155, 159, 162, 168, 170, 172, 173, 175, 180, 181, 182, 183, 186, 189], "auto": [59, 116, 182, 186, 188], "auto_mixed_precis": 60, "basic": [61, 188], "bayesian": [62, 188], "conserv": [63, 188], "exhaust": [64, 188], "hawq_v2": [65, 188], "mse": [67, 188], "mse_v2": [68, 188], "random": [69, 188], "tuning_sampl": 73, "tuning_spac": 74, "tuning_struct": 75, "tensorflow": [77, 78, 79, 80, 81, 115, 117, 118, 123, 147, 148, 149, 160, 162, 171, 180, 182, 187, 189], "autotun": [78, 85, 110, 114, 118, 147, 150], "torch": [82, 83, 84, 85, 86, 87, 88, 114, 134, 189], "export": [82, 83, 93, 94, 95, 96, 162, 183], "pt2e_export": 83, "train": [89, 117, 123, 126, 153, 160, 172, 178, 180], "collect_layer_histogram": 90, "create_obj_from_config": 92, "qlinear2qdq": 94, "tf2onnx": 95, "torch2onnx": 96, "kl_diverg": 98, "load_huggingfac": 99, "option": [101, 160], "pytorch": [102, 110, 111, 112, 113, 118, 123, 150, 151, 152, 160, 162, 171, 180, 181, 182, 187, 189], "weights_detail": 104, "version": 105, "intel": [106, 128, 157, 167, 168, 171, 172, 190], "neural": [106, 126, 128, 157, 167, 168, 171, 172, 178, 185, 190], "compressor": [106, 126, 128, 157, 167, 168, 171, 172, 185, 190], "document": [106, 128, 137, 190], "section": [106, 190], "2": [107, 135, 160, 163, 166, 172, 189], "x": [107, 172], "api": [107, 109, 110, 114, 117, 129, 130, 135, 136, 137, 138, 148, 151, 154, 157, 159, 160, 166, 171, 173, 175, 176, 177, 178], "user": [107, 160, 166, 183], "guid": 107, "overview": [107, 118, 125], "python": [107, 157, 171], "base": [107, 148, 151, 168], "advanc": 107, "topic": 107, "dynam": [108, 123, 126, 180], "introduct": [108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 123, 126, 129, 130, 131, 154, 155, 157, 159, 160, 162, 164, 167, 171, 173, 174, 175, 176, 177, 178, 180, 181, 183, 185, 186, 187, 188], "get": [108, 109, 110, 112, 113, 115, 120, 126, 128, 129, 154, 157, 159, 160, 164, 165, 171, 173, 175, 176, 177, 178, 180], "start": [108, 109, 110, 112, 113, 115, 120, 126, 128, 129, 154, 157, 159, 160, 164, 165, 171, 173, 175, 176, 177, 178, 180], "exampl": [108, 109, 110, 112, 113, 115, 116, 123, 126, 129, 137, 154, 157, 159, 160, 161, 162, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 183, 186, 189], "microsc": [109, 175], "refer": [109, 113, 123, 155, 156, 175, 178, 180, 183, 186], "mix": [110, 142, 172, 173, 182], "precis": [110, 142, 172, 173, 182], "support": [110, 111, 113, 114, 117, 119, 125, 126, 129, 131, 154, 155, 157, 159, 160, 162, 164, 167, 168, 171, 173, 174, 175, 176, 177, 178, 180, 181, 183, 186, 187], "matrix": [110, 111, 113, 114, 117, 119, 126, 129, 154, 155, 157, 159, 160, 162, 164, 165, 167, 171, 173, 174, 175, 176, 177, 178, 180, 181, 183, 186], "hardwar": [110, 168, 173, 189], "softwar": [110, 168, 173], "request": [110, 125, 173], "bf16": [110, 173], "fp16": [110, 173], "accuraci": [110, 115, 123, 170, 173, 180, 188], "driven": [110, 173], "smooth": [111, 116, 117, 123, 186], "usag": [111, 112, 113, 116, 119, 186, 188], "fix": [111, 116, 186], "alpha": [111, 116, 186], "specifi": [111, 112, 113, 115, 180], "rule": [111, 112, 113, 115, 156, 180], "valid": [111, 168, 186, 189], "framework": [111, 130, 157, 162, 164, 174, 175, 181, 183, 186], "static": [112, 117, 123, 126, 128, 180], "ipex": [112, 123, 180], "backend": [112, 117, 129, 180], "sampl": [112, 130, 165], "pt2e": 112, "weight": [113, 123, 128, 183], "onli": [113, 123, 128, 183], "argument": 113, "rtn": 113, "gptq": 113, "autoround": 113, "awq": 113, "teq": 113, "hqq": 113, "save": 113, "load": [113, 114], "layer": [113, 181, 186], "wise": [113, 181], "effici": 113, "client": [113, 120], "side": 113, "like": [114, 131], "problem": [114, 126], "without": 115, "awar": [115, 123, 126, 172, 178, 180], "tune": [115, 116, 123, 131, 180, 183, 186, 188], "With": 115, "quant": [116, 186], "us": [116, 119, 131, 157, 171, 186], "determin": [116, 186], "through": [116, 168, 186, 189], "scheme": [117, 123, 180], "approach": [117, 180], "post": [117, 126, 172, 180], "devic": [117, 180], "how": [118, 130, 131], "work": [118, 129, 180], "gener": [119, 130], "case": 119, "dump": 119, "throughput": 119, "latenc": 119, "summari": [119, 131], "demo": 119, "design": [121, 130, 158, 188], "architectur": [121, 158, 167, 168], "workflow": [121, 158], "fundament": [123, 180, 186], "symmetr": 123, "asymmetr": 123, "per": [123, 186], "tensor": [123, 186], "channel": [123, 186], "matmul": [123, 186], "limit": [123, 186], "contributor": [124, 125], "coven": [124, 125], "code": [124, 125, 156, 172, 183], "conduct": [124, 125], "our": [124, 186], "pledg": 124, "standard": 124, "respons": 124, "scope": [124, 178], "enforc": 124, "contribut": 125, "guidelin": 125, "creat": 125, "pull": 125, "step": 125, "checklist": 125, "templat": 125, "accept": 125, "criteria": [125, 178, 188], "statu": 125, "check": 125, "fx": 126, "mode": [126, 189], "note": [126, 184], "detail": 126, "secur": [127, 160], "polici": [127, 188], "report": 127, "vulner": 127, "what": 128, "": [128, 168], "new": [128, 129, 131, 188], "instal": [128, 168], "from": [128, 130, 168, 172], "pypi": 128, "llm": [128, 170], "non": 128, "select": 128, "public": [128, 156, 179], "event": [128, 179], "addit": 128, "commun": 128, "adaptor": [129, 130, 132], "flow": [129, 180], "queri": 129, "background": [129, 156], "ad": 129, "capabl": [129, 183], "implement": [129, 130], "onnxrtadaptor": 129, "add": 130, "an": 130, "list": [130, 161, 187], "need": 130, "yaml": [130, 160, 164], "query_fw_cap": 130, "accord": [130, 131], "tune_cfg": 130, "prepar": [130, 185], "calibr": [130, 155], "fp32": [130, 162], "graph": 130, "run": 130, "iter": 130, "oper": [130, 131], "calcul": 130, "rang": 130, "type": [131, 156, 178], "int4": 131, "few": 131, "line": 131, "chang": [131, 166, 184], "defin": [131, 160], "abil": 131, "specif": 131, "invok": 131, "kernel": 131, "configur": [131, 160, 164, 185], "onnx": [133, 168, 180, 181, 189], "runtim": [133, 168, 180, 181, 189], "0": [135, 136, 189], "3": [136, 163, 179], "compress": [140, 183], "inc": 156, "convent": 156, "import": 156, "string": 156, "annot": 156, "comment": 156, "todo": 156, "intern": 156, "interfac": 156, "folder": 156, "structur": 156, "recommend": 156, "v": 156, "set": 156, "json": 156, "dataload": 157, "build": [157, 163, 171], "custom": [157, 171, 188], "distil": [159, 172, 189], "distribut": [160, 188], "infer": 160, "evalu": 160, "featur": [160, 164, 165, 167, 180], "1": [160, 163, 166, 172, 189], "pure": 160, "horovodrun": 160, "execut": 160, "releas": [161, 184], "int8": [162, 189], "appendix": 162, "op": 162, "frequent": 163, "ask": 163, "question": 163, "issu": [163, 184], "4": [163, 179], "file": 164, "quick": 165, "incompat": [166, 184], "between": 166, "v1": 166, "face": 166, "built": [166, 168, 171], "infrastructur": 167, "prerequisit": 168, "binari": 168, "sourc": 168, "ai": 168, "kit": 168, "system": 168, "requir": 168, "environ": 168, "hpu": 168, "heterogen": 168, "two": 168, "comput": 168, "engin": [168, 186], "mme": 168, "tpc": 168, "cpu": [168, 189], "64": 168, "compat": 168, "processor": 168, "gpu": 168, "xe": 168, "multipl": [168, 176, 189], "vendor": 168, "legal": 169, "inform": 169, "licens": 169, "citat": 169, "trademark": 169, "recip": [170, 180], "larg": [170, 178], "languag": [170, 178], "mxnet": [171, 180, 187], "onnxrt": [171, 187], "migrat": 172, "prune": [172, 178, 189], "orchestr": [172, 177], "dure": [173, 182], "singl": 176, "optim": [177, 178], "One": 177, "shot": 177, "network": 178, "pattern": 178, "schedul": 178, "sparsiti": 178, "decai": 178, "regular": 178, "retrain": 178, "free": 178, "spars": 178, "deploy": 178, "hyperparamet": 178, "full": 179, "82": 179, "2024": 179, "2023": 179, "25": 179, "2022": 179, "35": 179, "2021": 179, "15": [179, 189], "2018": 179, "2020": 179, "lwq": 181, "turn": 182, "off": 182, "woq": [183, 189], "known": 184, "platform": 185, "perform": 185, "benefit": 185, "comparison": 185, "differ": 185, "smoothquant": 186, "enhanc": 186, "entir": 186, "each": 186, "block": 186, "space": 188, "exit": 188, "process": 188, "ptq": 189, "qat": 189, "17": 189, "knowledg": 189, "qdq": 189}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"neural_compressor.algorithm.algorithm": [[0, "module-neural_compressor.algorithm.algorithm"]], "Classes": [[0, "classes"], [1, "classes"], [3, "classes"], [4, "classes"], [6, "classes"], [7, "classes"], [9, "classes"], [10, "classes"], [12, "classes"], [14, "classes"], [15, "classes"], [18, "classes"], [19, "classes"], [20, "classes"], [21, "classes"], [22, "classes"], [23, "classes"], [24, "classes"], [25, "classes"], [27, "classes"], [28, "classes"], [29, "classes"], [32, "classes"], [34, "classes"], [35, "classes"], [36, "classes"], [38, "classes"], [41, "classes"], [45, "classes"], [47, "classes"], [49, "classes"], [50, "classes"], [51, "classes"], [52, "classes"], [53, "classes"], [54, "classes"], [55, "classes"], [56, "classes"], [59, "classes"], [60, "classes"], [61, "classes"], [62, "classes"], [63, "classes"], [64, "classes"], [65, "classes"], [67, "classes"], [68, "classes"], [69, "classes"], [70, "classes"], [73, "classes"], [74, "classes"], [75, "classes"], [76, "classes"], [79, "classes"], [86, "classes"], [89, "classes"], [90, "classes"], [98, "classes"], [99, "classes"], [100, "classes"], [101, "classes"], [103, "classes"], [104, "classes"]], "Functions": [[0, "functions"], [5, "functions"], [6, "functions"], [7, "functions"], [13, "functions"], [14, "functions"], [20, "functions"], [22, "functions"], [29, "functions"], [35, "functions"], [36, "functions"], [38, "functions"], [39, "functions"], [41, "functions"], [42, "functions"], [43, "functions"], [45, "functions"], [46, "functions"], [50, "functions"], [54, "functions"], [56, "functions"], [58, "functions"], [62, "functions"], [70, "functions"], [74, "functions"], [76, "functions"], [78, "functions"], [79, "functions"], [81, "functions"], [83, "functions"], [85, "functions"], [86, "functions"], [88, "functions"], [89, "functions"], [92, "functions"], [94, "functions"], [95, "functions"], [96, "functions"], [99, "functions"], [100, "functions"], [102, "functions"], [103, "functions"]], "Module Contents": [[0, "module-contents"], [1, "module-contents"], [3, "module-contents"], [4, "module-contents"], [5, "module-contents"], [6, "module-contents"], [7, "module-contents"], [9, "module-contents"], [10, "module-contents"], [12, "module-contents"], [13, "module-contents"], [14, "module-contents"], [15, "module-contents"], [18, "module-contents"], [19, "module-contents"], [20, "module-contents"], [21, "module-contents"], [22, "module-contents"], [23, "module-contents"], [24, "module-contents"], [25, "module-contents"], [27, "module-contents"], [28, "module-contents"], [29, "module-contents"], [32, "module-contents"], [34, "module-contents"], [35, "module-contents"], [36, "module-contents"], [38, "module-contents"], [39, "module-contents"], [41, "module-contents"], [42, "module-contents"], [43, "module-contents"], [45, "module-contents"], [46, "module-contents"], [47, "module-contents"], [49, "module-contents"], [50, "module-contents"], [51, "module-contents"], [52, "module-contents"], [53, "module-contents"], [54, "module-contents"], [55, "module-contents"], [56, "module-contents"], [58, "module-contents"], [59, "module-contents"], [60, "module-contents"], [61, "module-contents"], [62, "module-contents"], [63, "module-contents"], [64, "module-contents"], [65, "module-contents"], [67, "module-contents"], [68, "module-contents"], [69, "module-contents"], [70, "module-contents"], [73, "module-contents"], [74, "module-contents"], [75, "module-contents"], [76, "module-contents"], [78, "module-contents"], [79, "module-contents"], [81, "module-contents"], [83, "module-contents"], [85, "module-contents"], [86, "module-contents"], [88, "module-contents"], [89, "module-contents"], [90, "module-contents"], [92, "module-contents"], [94, "module-contents"], [95, "module-contents"], [96, "module-contents"], [98, "module-contents"], [99, "module-contents"], [100, "module-contents"], [101, "module-contents"], [102, "module-contents"], [103, "module-contents"], [104, "module-contents"]], "neural_compressor.algorithm.fast_bias_correction": [[1, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[2, "module-neural_compressor.algorithm"]], "Submodules": [[2, "submodules"], [8, "submodules"], [11, "submodules"], [17, "submodules"], [26, "submodules"], [30, "submodules"], [33, "submodules"], [37, "submodules"], [44, "submodules"], [48, "submodules"], [66, "submodules"], [72, "submodules"], [80, "submodules"], [82, "submodules"], [87, "submodules"], [93, "submodules"], [97, "submodules"]], "neural_compressor.algorithm.smooth_quant": [[3, "module-neural_compressor.algorithm.smooth_quant"]], "neural_compressor.algorithm.weight_correction": [[4, "module-neural_compressor.algorithm.weight_correction"]], "neural_compressor.benchmark": [[5, "module-neural_compressor.benchmark"]], "neural_compressor.common.base_config": [[6, "module-neural_compressor.common.base_config"]], "neural_compressor.common.base_tuning": [[7, "module-neural_compressor.common.base_tuning"]], "neural_compressor.common": [[8, "module-neural_compressor.common"]], "Subpackages": [[8, "subpackages"], [16, "subpackages"], [31, "subpackages"], [37, "subpackages"], [66, "subpackages"], [77, "subpackages"], [84, "subpackages"], [97, "subpackages"]], "neural_compressor.common.tuning_param": [[9, "module-neural_compressor.common.tuning_param"]], "neural_compressor.common.utils.constants": [[10, "module-neural_compressor.common.utils.constants"]], "neural_compressor.common.utils": [[11, "module-neural_compressor.common.utils"]], "neural_compressor.common.utils.logger": [[12, "module-neural_compressor.common.utils.logger"]], "neural_compressor.common.utils.save_load": [[13, "module-neural_compressor.common.utils.save_load"]], "neural_compressor.common.utils.utility": [[14, "module-neural_compressor.common.utils.utility"]], "neural_compressor.config": [[15, "module-neural_compressor.config"]], "neural_compressor.contrib": [[16, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[17, "module-neural_compressor.contrib.strategy"]], "neural_compressor.contrib.strategy.sigopt": [[18, "module-neural_compressor.contrib.strategy.sigopt"]], "neural_compressor.contrib.strategy.tpe": [[19, "module-neural_compressor.contrib.strategy.tpe"]], "neural_compressor.data.datasets.bert_dataset": [[20, "module-neural_compressor.data.datasets.bert_dataset"]], "neural_compressor.data.datasets.coco_dataset": [[21, "module-neural_compressor.data.datasets.coco_dataset"]], "neural_compressor.data.datasets.dataset": [[22, "module-neural_compressor.data.datasets.dataset"]], "Attributes": [[22, "attributes"]], "neural_compressor.data.datasets.dummy_dataset": [[23, "module-neural_compressor.data.datasets.dummy_dataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[24, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "neural_compressor.data.datasets.imagenet_dataset": [[25, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[26, "module-neural_compressor.data.datasets"]], "neural_compressor.data.datasets.style_transfer_dataset": [[27, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "neural_compressor.data.filters.coco_filter": [[28, "module-neural_compressor.data.filters.coco_filter"]], "neural_compressor.data.filters.filter": [[29, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[30, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[31, "module-neural_compressor.data"]], "neural_compressor.data.transforms.imagenet_transform": [[32, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[33, "module-neural_compressor.data.transforms"]], "neural_compressor.data.transforms.postprocess": [[34, "module-neural_compressor.data.transforms.postprocess"]], "neural_compressor.data.transforms.tokenization": [[35, "module-neural_compressor.data.transforms.tokenization"]], "neural_compressor.data.transforms.transform": [[36, "module-neural_compressor.data.transforms.transform"]], "neural_compressor": [[37, "module-neural_compressor"]], "neural_compressor.metric.bleu": [[38, "module-neural_compressor.metric.bleu"]], "neural_compressor.metric.bleu_util": [[39, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[40, "module-neural_compressor.metric.coco_label_map"]], "neural_compressor.metric.coco_tools": [[41, "module-neural_compressor.metric.coco_tools"]], "neural_compressor.metric.evaluate_squad": [[42, "module-neural_compressor.metric.evaluate_squad"]], "neural_compressor.metric.f1": [[43, "module-neural_compressor.metric.f1"]], "neural_compressor.metric": [[44, "module-neural_compressor.metric"]], "neural_compressor.metric.metric": [[45, "module-neural_compressor.metric.metric"]], "neural_compressor.mix_precision": [[46, "module-neural_compressor.mix_precision"]], "neural_compressor.model.base_model": [[47, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[48, "module-neural_compressor.model"]], "neural_compressor.model.keras_model": [[49, "module-neural_compressor.model.keras_model"]], "neural_compressor.model.model": [[50, "module-neural_compressor.model.model"]], "neural_compressor.model.mxnet_model": [[51, "module-neural_compressor.model.mxnet_model"]], "neural_compressor.model.nets_factory": [[52, "module-neural_compressor.model.nets_factory"]], "neural_compressor.model.onnx_model": [[53, "module-neural_compressor.model.onnx_model"]], "neural_compressor.model.tensorflow_model": [[54, "module-neural_compressor.model.tensorflow_model"]], "neural_compressor.model.torch_model": [[55, "module-neural_compressor.model.torch_model"]], "neural_compressor.objective": [[56, "module-neural_compressor.objective"]], "neural_compressor.profiling": [[57, "module-neural_compressor.profiling"]], "neural_compressor.quantization": [[58, "module-neural_compressor.quantization"]], "neural_compressor.strategy.auto": [[59, "module-neural_compressor.strategy.auto"]], "neural_compressor.strategy.auto_mixed_precision": [[60, "module-neural_compressor.strategy.auto_mixed_precision"]], "neural_compressor.strategy.basic": [[61, "module-neural_compressor.strategy.basic"]], "neural_compressor.strategy.bayesian": [[62, "module-neural_compressor.strategy.bayesian"]], "neural_compressor.strategy.conservative": [[63, "module-neural_compressor.strategy.conservative"]], "neural_compressor.strategy.exhaustive": [[64, "module-neural_compressor.strategy.exhaustive"]], "neural_compressor.strategy.hawq_v2": [[65, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[66, "module-neural_compressor.strategy"]], "neural_compressor.strategy.mse": [[67, "module-neural_compressor.strategy.mse"]], "neural_compressor.strategy.mse_v2": [[68, "module-neural_compressor.strategy.mse_v2"]], "neural_compressor.strategy.random": [[69, "module-neural_compressor.strategy.random"]], "neural_compressor.strategy.strategy": [[70, "module-neural_compressor.strategy.strategy"]], "neural_compressor.strategy.utils.constant": [[71, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[72, "module-neural_compressor.strategy.utils"]], "neural_compressor.strategy.utils.tuning_sampler": [[73, "module-neural_compressor.strategy.utils.tuning_sampler"]], "neural_compressor.strategy.utils.tuning_space": [[74, "module-neural_compressor.strategy.utils.tuning_space"]], "neural_compressor.strategy.utils.tuning_structs": [[75, "module-neural_compressor.strategy.utils.tuning_structs"]], "neural_compressor.strategy.utils.utility": [[76, "module-neural_compressor.strategy.utils.utility"]], "neural_compressor.tensorflow": [[77, "module-neural_compressor.tensorflow"]], "neural_compressor.tensorflow.quantization.autotune": [[78, "module-neural_compressor.tensorflow.quantization.autotune"]], "neural_compressor.tensorflow.quantization.config": [[79, "module-neural_compressor.tensorflow.quantization.config"]], "neural_compressor.tensorflow.quantization": [[80, "module-neural_compressor.tensorflow.quantization"]], "neural_compressor.tensorflow.quantization.quantize": [[81, "module-neural_compressor.tensorflow.quantization.quantize"]], "neural_compressor.torch.export": [[82, "module-neural_compressor.torch.export"]], "neural_compressor.torch.export.pt2e_export": [[83, "module-neural_compressor.torch.export.pt2e_export"]], "neural_compressor.torch": [[84, "module-neural_compressor.torch"]], "neural_compressor.torch.quantization.autotune": [[85, "module-neural_compressor.torch.quantization.autotune"]], "neural_compressor.torch.quantization.config": [[86, "module-neural_compressor.torch.quantization.config"]], "neural_compressor.torch.quantization": [[87, "module-neural_compressor.torch.quantization"]], "neural_compressor.torch.quantization.quantize": [[88, "module-neural_compressor.torch.quantization.quantize"]], "neural_compressor.training": [[89, "module-neural_compressor.training"]], "neural_compressor.utils.collect_layer_histogram": [[90, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[91, "module-neural_compressor.utils.constant"]], "neural_compressor.utils.create_obj_from_config": [[92, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils.export": [[93, "module-neural_compressor.utils.export"]], "neural_compressor.utils.export.qlinear2qdq": [[94, "module-neural_compressor.utils.export.qlinear2qdq"]], "neural_compressor.utils.export.tf2onnx": [[95, "module-neural_compressor.utils.export.tf2onnx"]], "neural_compressor.utils.export.torch2onnx": [[96, "module-neural_compressor.utils.export.torch2onnx"]], "neural_compressor.utils": [[97, "module-neural_compressor.utils"]], "neural_compressor.utils.kl_divergence": [[98, "module-neural_compressor.utils.kl_divergence"]], "neural_compressor.utils.load_huggingface": [[99, "module-neural_compressor.utils.load_huggingface"]], "neural_compressor.utils.logger": [[100, "module-neural_compressor.utils.logger"]], "neural_compressor.utils.options": [[101, "module-neural_compressor.utils.options"]], "neural_compressor.utils.pytorch": [[102, "module-neural_compressor.utils.pytorch"]], "neural_compressor.utils.utility": [[103, "module-neural_compressor.utils.utility"]], "neural_compressor.utils.weights_details": [[104, "module-neural_compressor.utils.weights_details"]], "neural_compressor.version": [[105, "module-neural_compressor.version"]], "Intel\u00ae Neural Compressor Documentation": [[106, "intel-neural-compressor-documentation"], [190, "intel-neural-compressor-documentation"]], "Sections": [[106, "sections"], [190, "sections"]], "2.X API User Guide": [[107, "x-api-user-guide"]], "Overview": [[107, "overview"], [118, "overview"]], "Python-based APIs": [[107, "python-based-apis"]], "Advanced Topics": [[107, "advanced-topics"]], "Dynamic Quantization": [[108, "dynamic-quantization"], [123, "dynamic-quantization"], [126, "dynamic-quantization"]], "Introduction": [[108, "introduction"], [109, "introduction"], [110, "introduction"], [111, "introduction"], [112, "introduction"], [113, "introduction"], [114, "introduction"], [115, "introduction"], [116, "introduction"], [117, "introduction"], [119, "introduction"], [120, "introduction"], [123, "introduction"], [126, "introduction"], [129, "introduction"], [130, "introduction"], [131, "introduction"], [154, "introduction"], [155, "introduction"], [157, "introduction"], [159, "introduction"], [160, "introduction"], [162, "introduction"], [164, "introduction"], [167, "introduction"], [171, "introduction"], [173, "introduction"], [174, "introduction"], [175, "introduction"], [176, "introduction"], [177, "introduction"], [178, "introduction"], [181, "introduction"], [183, "introduction"], [185, "introduction"], [186, "introduction"], [187, "introduction"], [188, "introduction"]], "Getting Started with Dynamic Quantization": [[108, "getting-started-with-dynamic-quantization"]], "Examples": [[108, "examples"], [109, "examples"], [110, "examples"], [113, "examples"], [115, "examples"], [116, "examples"], [126, "examples"], [154, "examples"], [157, "examples"], [159, "examples"], [160, "examples"], [161, "examples"], [162, "examples"], [172, "examples"], [173, "examples"], [174, "examples"], [175, "examples"], [177, "examples"], [178, "examples"], [180, "examples"], [181, "examples"], [183, "examples"]], "Microscaling Quantization": [[109, "microscaling-quantization"], [175, "microscaling-quantization"]], "Get Started with Microscaling Quantization API": [[109, "get-started-with-microscaling-quantization-api"], [175, "get-started-with-microscaling-quantization-api"]], "Reference": [[109, "reference"], [113, "reference"], [123, "reference"], [155, "reference"], [156, "reference"], [175, "reference"], [178, "reference"], [180, "reference"], [183, "reference"], [186, "reference"]], "PyTorch Mixed Precision": [[110, "pytorch-mixed-precision"]], "Mixed Precision Support Matrix": [[110, "mixed-precision-support-matrix"], [173, "mixed-precision-support-matrix"]], "Hardware and Software requests for BF16": [[110, "hardware-and-software-requests-for-bf16"], [173, "hardware-and-software-requests-for-bf16"]], "Hardware and Software requests for FP16": [[110, "hardware-and-software-requests-for-fp16"], [173, "hardware-and-software-requests-for-fp16"]], "Accuracy-driven mixed precision": [[110, "accuracy-driven-mixed-precision"], [173, "accuracy-driven-mixed-precision"]], "Get Started with autotune API": [[110, "get-started-with-autotune-api"]], "PyTorch Smooth Quantization": [[111, "pytorch-smooth-quantization"]], "Usage": [[111, "usage"], [113, "usage"], [116, "usage"], [119, "usage"], [186, "usage"], [188, "usage"], [188, "id2"], [188, "id4"], [188, "id6"], [188, "id8"], [188, "id10"], [188, "id12"], [188, "id14"], [188, "id16"], [188, "id18"], [188, "id20"], [188, "id22"]], "Fixed Alpha": [[111, "fixed-alpha"]], "Specify Quantization Rules": [[111, "specify-quantization-rules"], [112, "specify-quantization-rules"], [113, "specify-quantization-rules"], [115, "specify-quantization-rules"], [180, "specify-quantization-rules"]], "Validated Models": [[111, "validated-models"], [186, "validated-models"], [189, "validated-models"]], "Supported Framework Matrix": [[111, "supported-framework-matrix"], [186, "supported-framework-matrix"]], "PyTorch Static Quantization": [[112, "pytorch-static-quantization"]], "Get Started": [[112, "get-started"], [113, "get-started"], [115, "get-started"], [120, "get-started"], [126, "get-started"], [180, "get-started"]], "Static Quantization with IPEX Backend": [[112, "static-quantization-with-ipex-backend"]], "Usage Sample with IPEX": [[112, "usage-sample-with-ipex"]], "Model Examples": [[112, "model-examples"]], "Static Quantization with PT2E Backend": [[112, "static-quantization-with-pt2e-backend"]], "Usage Sample with PT2E": [[112, "usage-sample-with-pt2e"]], "Model Examples with PT2E": [[112, "model-examples-with-pt2e"]], "PyTorch Weight Only Quantization": [[113, "pytorch-weight-only-quantization"]], "Supported Matrix": [[113, "supported-matrix"], [114, "supported-matrix"], [119, "supported-matrix"]], "Common arguments": [[113, "common-arguments"]], "RTN": [[113, "rtn"]], "GPTQ": [[113, "gptq"]], "AutoRound": [[113, "autoround"]], "AWQ": [[113, "awq"]], "TEQ": [[113, "teq"]], "HQQ": [[113, "hqq"]], "Saving and Loading": [[113, "saving-and-loading"]], "Layer Wise Quantization": [[113, "layer-wise-quantization"]], "Efficient Usage on Client-Side": [[113, "efficient-usage-on-client-side"]], "Torch": [[114, "torch"]], "Torch-like APIs": [[114, "torch-like-apis"]], "Quantization APIs": [[114, "quantization-apis"]], "Autotune API": [[114, "autotune-api"]], "Load API": [[114, "load-api"]], "Common Problems": [[114, "common-problems"]], "TensorFlow Quantization": [[115, "tensorflow-quantization"]], "Without Accuracy Aware Tuning": [[115, "without-accuracy-aware-tuning"]], "With Accuracy Aware Tuning": [[115, "with-accuracy-aware-tuning"]], "Smooth Quant": [[116, "smooth-quant"], [186, "smooth-quant"]], "Using a Fixed alpha": [[116, "using-a-fixed-alpha"]], "Determining the alpha through auto-tuning": [[116, "determining-the-alpha-through-auto-tuning"], [186, "determining-the-alpha-through-auto-tuning"]], "TensorFlow": [[117, "tensorflow"], [171, "tensorflow"], [187, "tensorflow"]], "API for TensorFlow": [[117, "api-for-tensorflow"]], "Support Matrix": [[117, "support-matrix"], [155, "support-matrix"]], "Quantization Scheme": [[117, "quantization-scheme"]], "Quantization Approaches": [[117, "quantization-approaches"], [180, "quantization-approaches"]], "Post Training Static Quantization": [[117, "post-training-static-quantization"], [126, "post-training-static-quantization"], [180, "post-training-static-quantization"]], "Smooth Quantization": [[117, "smooth-quantization"], [123, "smooth-quantization"]], "Backend and Device": [[117, "backend-and-device"]], "AutoTune": [[118, "autotune"]], "How it Works": [[118, "how-it-works"]], "Working with Autotune": [[118, "working-with-autotune"]], "Working with PyTorch Model": [[118, "working-with-pytorch-model"]], "Working with Tensorflow Model": [[118, "working-with-tensorflow-model"]], "Benchmark": [[119, "benchmark"], [139, "benchmark"], [172, "benchmark"]], "General Use Cases": [[119, "general-use-cases"]], "Dump Throughput and Latency Summary": [[119, "dump-throughput-and-latency-summary"]], "Demo usage": [[119, "demo-usage"]], "Quantization on Client": [[120, "quantization-on-client"]], "Design": [[121, "design"], [158, "design"], [188, "design"], [188, "id1"], [188, "id3"], [188, "id5"], [188, "id7"], [188, "id9"], [188, "id11"], [188, "id13"], [188, "id15"], [188, "id17"], [188, "id19"], [188, "id21"]], "Architecture": [[121, "architecture"], [158, "architecture"], [167, "architecture"]], "Workflows": [[121, "workflows"]], "Quantization": [[123, "quantization"], [145, "quantization"], [180, "quantization"]], "Quantization Fundamentals": [[123, "quantization-fundamentals"], [180, "quantization-fundamentals"], [186, "quantization-fundamentals"]], "Symmetric & Asymmetric": [[123, "symmetric-asymmetric"]], "Quantization Scheme in TensorFlow": [[123, "quantization-scheme-in-tensorflow"], [180, "quantization-scheme-in-tensorflow"]], "Quantization Scheme in PyTorch": [[123, "quantization-scheme-in-pytorch"], [180, "quantization-scheme-in-pytorch"]], "Quantization Scheme in IPEX": [[123, "quantization-scheme-in-ipex"], [180, "quantization-scheme-in-ipex"]], "Per-tensor & Per-channel": [[123, "per-tensor-per-channel"], [186, "per-tensor-per-channel"]], "Per-tensor example": [[123, "per-tensor-example"], [186, "per-tensor-example"]], "Per-channel example": [[123, "per-channel-example"], [186, "per-channel-example"]], "Matmul quantization example": [[123, "matmul-quantization-example"], [186, "matmul-quantization-example"]], "Static Quantization": [[123, "static-quantization"]], "Per-channel limitation": [[123, "per-channel-limitation"], [186, "per-channel-limitation"]], "Weight Only Quantization": [[123, "weight-only-quantization"]], "Quantization Aware Training": [[123, "quantization-aware-training"], [172, "quantization-aware-training"], [180, "quantization-aware-training"], [180, "id1"]], "Accuracy Aware Tuning": [[123, "accuracy-aware-tuning"], [180, "accuracy-aware-tuning"]], "Contributor Covenant Code of Conduct": [[124, "contributor-covenant-code-of-conduct"], [125, "contributor-covenant-code-of-conduct"]], "Our Pledge": [[124, "our-pledge"]], "Our Standards": [[124, "our-standards"]], "Our Responsibilities": [[124, "our-responsibilities"]], "Scope": [[124, "scope"]], "Enforcement": [[124, "enforcement"]], "Attribution": [[124, "attribution"]], "Contribution Guidelines": [[125, "contribution-guidelines"]], "Create Pull Request": [[125, "create-pull-request"]], "Step-by-Step guidelines": [[125, "step-by-step-guidelines"]], "Pull Request Checklist": [[125, "pull-request-checklist"]], "Pull Request Template": [[125, "pull-request-template"]], "Pull Request Acceptance Criteria": [[125, "pull-request-acceptance-criteria"]], "Pull Request Status Checks Overview": [[125, "pull-request-status-checks-overview"]], "Support": [[125, "support"]], "FX": [[126, "fx"]], "FX Mode Support Matrix in Neural Compressor": [[126, "fx-mode-support-matrix-in-neural-compressor"]], "Post Training Dynamic Quantization": [[126, "post-training-dynamic-quantization"], [180, "post-training-dynamic-quantization"]], "Quantization-Aware Training": [[126, "quantization-aware-training"]], "Note": [[126, "note"]], "Details": [[126, "details"]], "Common Problem": [[126, "common-problem"]], "Static Quantization & Quantization Aware Training": [[126, "static-quantization-quantization-aware-training"]], "Security Policy": [[127, "security-policy"]], "Report a Vulnerability": [[127, "report-a-vulnerability"]], "Intel\u00ae Neural Compressor": [[128, "intel-neural-compressor"]], "What\u2019s New": [[128, "what-s-new"]], "Installation": [[128, "installation"], [168, "installation"], [168, "id1"]], "Install from pypi": [[128, "install-from-pypi"]], "Getting Started": [[128, "getting-started"], [165, "getting-started"]], "Weight-Only Quantization (LLMs)": [[128, "weight-only-quantization-llms"]], "Static Quantization (Non-LLMs)": [[128, "static-quantization-non-llms"]], "Documentation": [[128, "documentation"]], "Selected Publications/Events": [[128, "selected-publications-events"]], "Additional Content": [[128, "additional-content"]], "Communication": [[128, "communication"]], "Adaptor": [[129, "adaptor"], [132, "adaptor"]], "Adaptor Support Matrix": [[129, "adaptor-support-matrix"]], "Working Flow": [[129, "working-flow"], [180, "working-flow"]], "Get Started with Adaptor API": [[129, "get-started-with-adaptor-api"]], "Query API": [[129, "query-api"]], "Background": [[129, "background"], [156, "background"]], "Query API Introduction": [[129, "query-api-introduction"]], "Example of Adding a New Backend Support": [[129, "example-of-adding-a-new-backend-support"]], "Capability": [[129, "capability"]], "Implement ONNXRTAdaptor Class": [[129, "implement-onnxrtadaptor-class"]], "How to Add An Adaptor": [[130, "how-to-add-an-adaptor"]], "API List that Need to Implement": [[130, "api-list-that-need-to-implement"]], "Design the framework YAML": [[130, "design-the-framework-yaml"]], "Add query_fw_capability to Adaptor": [[130, "add-query-fw-capability-to-adaptor"]], "Add quantize API according to tune_cfg": [[130, "add-quantize-api-according-to-tune-cfg"]], "Prepare calibration model from fp32 graph": [[130, "prepare-calibration-model-from-fp32-graph"]], "Run sampling iterations of the fp32 graph to calibrate quantizable operators.": [[130, "run-sampling-iterations-of-the-fp32-graph-to-calibrate-quantizable-operators"]], "Calculate the data range and generate quantized model": [[130, "calculate-the-data-range-and-generate-quantized-model"]], "How to Support New Data Type, Like Int4, with a Few Line Changes": [[131, "how-to-support-new-data-type-like-int4-with-a-few-line-changes"]], "Define the Quantization Ability of the Specific Operator": [[131, "define-the-quantization-ability-of-the-specific-operator"]], "Invoke the Operator Kernel According to the Tuning Configuration": [[131, "invoke-the-operator-kernel-according-to-the-tuning-configuration"]], "Use the New Data Type": [[131, "use-the-new-data-type"]], "Summary": [[131, "summary"]], "ONNX Runtime": [[133, "onnx-runtime"]], "Torch Utils": [[134, "torch-utils"]], "2.0 API": [[135, "api"]], "3.0 API": [[136, "api"]], "API Document Example": [[137, "api-document-example"]], "APIs": [[138, "apis"]], "Compression": [[140, "compression"]], "Config": [[141, "config"]], "Mix Precision": [[142, "mix-precision"], [172, "mix-precision"]], "Model": [[143, "model"], [174, "model"]], "Objective": [[144, "objective"], [176, "objective"]], "Strategy": [[146, "strategy"]], "Tensorflow Quantization AutoTune": [[147, "tensorflow-quantization-autotune"]], "Tensorflow Quantization Base API": [[148, "tensorflow-quantization-base-api"]], "Tensorflow Quantization Config": [[149, "tensorflow-quantization-config"]], "Pytorch Quantization AutoTune": [[150, "pytorch-quantization-autotune"]], "Pytorch Quantization Base API": [[151, "pytorch-quantization-base-api"]], "Pytorch Quantization Config": [[152, "pytorch-quantization-config"]], "Training": [[153, "training"]], "Benchmarking": [[154, "benchmarking"]], "Benchmark Support Matrix": [[154, "benchmark-support-matrix"]], "Get Started with Benchmark API": [[154, "get-started-with-benchmark-api"]], "Calibration Algorithms in Quantization": [[155, "calibration-algorithms-in-quantization"]], "Calibration Algorithms": [[155, "calibration-algorithms"]], "INC Coding Conventions": [[156, "inc-coding-conventions"]], "Rules": [[156, "rules"]], "Imports": [[156, "imports"]], "Strings": [[156, "strings"]], "Logger": [[156, "logger"]], "Type Annotations": [[156, "type-annotations"]], "Comments": [[156, "comments"]], "TODO Comments": [[156, "todo-comments"]], "Public and Internal Interfaces": [[156, "public-and-internal-interfaces"]], "Folder structure": [[156, "folder-structure"]], "Recommend VS Code settings.json": [[156, "recommend-vs-code-settings-json"]], "DataLoader": [[157, "dataloader"]], "Supported Framework Dataloader Matrix": [[157, "supported-framework-dataloader-matrix"]], "Get Started with DataLoader": [[157, "get-started-with-dataloader"]], "Use Intel\u00ae Neural Compressor DataLoader API": [[157, "use-intel-neural-compressor-dataloader-api"]], "Build Custom Dataloader with Python API": [[157, "build-custom-dataloader-with-python-api"]], "Workflow": [[158, "workflow"]], "Distillation for Quantization": [[159, "distillation-for-quantization"]], "Distillation for Quantization Support Matrix": [[159, "distillation-for-quantization-support-matrix"]], "Get Started with Distillation for Quantization API": [[159, "get-started-with-distillation-for-quantization-api"]], "Distributed Training and Inference (Evaluation)": [[160, "distributed-training-and-inference-evaluation"]], "Supported Feature Matrix": [[160, "supported-feature-matrix"], [164, "supported-feature-matrix"], [167, "supported-feature-matrix"], [180, "supported-feature-matrix"]], "Get Started with Distributed Training and Inference API": [[160, "get-started-with-distributed-training-and-inference-api"]], "Option 1: Pure Yaml Configuration": [[160, "option-1-pure-yaml-configuration"]], "Option 2: User Defined Training Function": [[160, "option-2-user-defined-training-function"]], "Horovodrun Execution": [[160, "horovodrun-execution"]], "Security": [[160, "security"]], "PyTorch Examples:": [[160, "pytorch-examples"]], "TensorFlow Examples:": [[160, "tensorflow-examples"]], "Example List": [[161, "example-list"]], "Release Data": [[161, "release-data"]], "Export": [[162, "export"]], "Supported Framework Model Matrix": [[162, "supported-framework-model-matrix"], [174, "supported-framework-model-matrix"], [175, "supported-framework-model-matrix"], [181, "supported-framework-model-matrix"], [183, "supported-framework-model-matrix"]], "PyTorch Model": [[162, "pytorch-model"]], "FP32 Model Export": [[162, "fp32-model-export"], [162, "id1"]], "INT8 Model Export": [[162, "int8-model-export"], [162, "id2"]], "Tensorflow Model": [[162, "tensorflow-model"]], "Appendix": [[162, "appendix"]], "Supported quantized ops": [[162, "supported-quantized-ops"]], "Frequently Asked Questions": [[163, "frequently-asked-questions"]], "Common Build Issues": [[163, "common-build-issues"]], "Issue 1:": [[163, "issue-1"]], "Issue 2:": [[163, "issue-2"]], "Issue 3:": [[163, "issue-3"]], "Issue 4:": [[163, "issue-4"]], "Framework YAML Configuration Files": [[164, "framework-yaml-configuration-files"]], "Get started with Framework YAML Files": [[164, "get-started-with-framework-yaml-files"]], "Quick Samples": [[165, "quick-samples"]], "Feature Matrix": [[165, "feature-matrix"]], "Incompatible changes between v1.2 and v1.1": [[166, "incompatible-changes-between-v1-2-and-v1-1"]], "User-facing APIs": [[166, "user-facing-apis"]], "Built-in transform/dataset/metric APIs": [[166, "built-in-transform-dataset-metric-apis"]], "Infrastructure of Intel\u00ae Neural Compressor": [[167, "infrastructure-of-intel-neural-compressor"]], "Prerequisites": [[168, "prerequisites"]], "Install from Binary": [[168, "install-from-binary"]], "Install from Source": [[168, "install-from-source"]], "Install from AI Kit": [[168, "install-from-ai-kit"]], "System Requirements": [[168, "system-requirements"]], "Validated Hardware Environment": [[168, "validated-hardware-environment"]], "Intel\u00ae Neural Compressor supports HPUs based on heterogeneous architecture with two compute engines (MME and TPC):": [[168, "intel-neural-compressor-supports-hpus-based-on-heterogeneous-architecture-with-two-compute-engines-mme-and-tpc"]], "Intel\u00ae Neural Compressor supports CPUs based on Intel 64 architecture or compatible processors:": [[168, "intel-neural-compressor-supports-cpus-based-on-intel-64-architecture-or-compatible-processors"]], "Intel\u00ae Neural Compressor supports GPUs built on Intel\u2019s Xe architecture:": [[168, "intel-neural-compressor-supports-gpus-built-on-intel-s-xe-architecture"]], "Intel\u00ae Neural Compressor quantized ONNX models support multiple hardware vendors through ONNX Runtime:": [[168, "intel-neural-compressor-quantized-onnx-models-support-multiple-hardware-vendors-through-onnx-runtime"]], "Validated Software Environment": [[168, "validated-software-environment"]], "Legal Information": [[169, "legal-information"]], "License": [[169, "license"]], "Citation": [[169, "citation"]], "Trademarks": [[169, "trademarks"]], "LLMs Quantization Recipes": [[170, "llms-quantization-recipes"]], "Large Language Models Recipes": [[170, "large-language-models-recipes"]], "Large Language Models Accuracy": [[170, "large-language-models-accuracy"]], "Metrics": [[171, "metrics"]], "Supported Built-in Metric Matrix": [[171, "supported-built-in-metric-matrix"]], "PyTorch": [[171, "pytorch"], [182, "pytorch"]], "MXNet": [[171, "mxnet"], [187, "mxnet"]], "ONNXRT": [[171, "onnxrt"], [187, "onnxrt"]], "Get Started with Metric": [[171, "get-started-with-metric"]], "Use Intel\u00ae Neural Compressor Metric API": [[171, "use-intel-neural-compressor-metric-api"]], "Build Custom Metric with Python API": [[171, "build-custom-metric-with-python-api"]], "Example": [[171, "example"], [176, "example"]], "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X": [[172, "code-migration-from-intel-neural-compressor-1-x-to-intel-neural-compressor-2-x"]], "Model Quantization": [[172, "model-quantization"]], "Post-training Quantization": [[172, "post-training-quantization"]], "Pruning": [[172, "pruning"], [178, "pruning"]], "Distillation": [[172, "distillation"]], "Orchestration": [[172, "orchestration"]], "Mixed Precision": [[173, "mixed-precision"]], "During quantization mixed precision": [[173, "during-quantization-mixed-precision"]], "Get Started with Mixed Precision API": [[173, "get-started-with-mixed-precision-api"]], "Single Objective": [[176, "single-objective"]], "Multiple Objectives": [[176, "multiple-objectives"]], "Objective Support Matrix": [[176, "objective-support-matrix"]], "Get Started with Objective API": [[176, "get-started-with-objective-api"]], "Config Single Objective": [[176, "config-single-objective"]], "Config Multiple Objectives": [[176, "config-multiple-objectives"]], "Optimization Orchestration": [[177, "optimization-orchestration"]], "One-shot": [[177, "one-shot"]], "Orchestration Support Matrix": [[177, "orchestration-support-matrix"]], "Get Started with Orchestration API": [[177, "get-started-with-orchestration-api"]], "Neural Network Pruning": [[178, "neural-network-pruning"]], "Pruning Patterns": [[178, "pruning-patterns"]], "Pruning Criteria": [[178, "pruning-criteria"]], "Pruning Types": [[178, "pruning-types"]], "Pruning Schedules": [[178, "pruning-schedules"]], "Pruning Scope": [[178, "pruning-scope"]], "Sparsity Decay Types": [[178, "sparsity-decay-types"]], "Regularization": [[178, "regularization"]], "Large Language Model Pruning": [[178, "large-language-model-pruning"]], "Pruning Support Matrix": [[178, "pruning-support-matrix"]], "Get Started with Pruning API": [[178, "get-started-with-pruning-api"]], "Training-aware pruning API": [[178, "training-aware-pruning-api"]], "Retrain-free Pruning API": [[178, "retrain-free-pruning-api"]], "Sparse Model Deployment": [[178, "sparse-model-deployment"]], "Pruning with Hyperparameter Optimization": [[178, "pruning-with-hyperparameter-optimization"]], "Full Publications/Events (82)": [[179, "full-publications-events-82"]], "2024 (3)": [[179, "id1"]], "2023 (25)": [[179, "id2"]], "2022 (35)": [[179, "id3"]], "2021 (15)": [[179, "id4"]], "2018 - 2020 (4)": [[179, "id5"]], "Quantization Introduction": [[180, "quantization-introduction"]], "Quantization Support Matrix": [[180, "quantization-support-matrix"]], "Quantization Scheme in MXNet": [[180, "quantization-scheme-in-mxnet"]], "Quantization Scheme in ONNX Runtime": [[180, "quantization-scheme-in-onnx-runtime"]], "Post Training Quantization": [[180, "post-training-quantization"]], "Specify Quantization Recipes": [[180, "specify-quantization-recipes"]], "Specify Quantization Backend and Device": [[180, "specify-quantization-backend-and-device"]], "Layer Wise Quantization (LWQ)": [[181, "layer-wise-quantization-lwq"]], "PyTorch framework example": [[181, "pytorch-framework-example"]], "ONNX Runtime framework example": [[181, "onnx-runtime-framework-example"]], "Turn OFF Auto Mixed Precision during Quantization": [[182, "turn-off-auto-mixed-precision-during-quantization"]], "Tensorflow": [[182, "tensorflow"]], "Weight Only Quantization (WOQ)": [[183, "weight-only-quantization-woq"]], "Quantization Capability": [[183, "quantization-capability"]], "Export Compressed Model": [[183, "export-compressed-model"]], "User Code Example": [[183, "user-code-example"]], "WOQ Algorithms Tuning": [[183, "woq-algorithms-tuning"]], "User code example": [[183, "id1"]], "Release": [[184, "release"]], "Release Notes": [[184, "release-notes"]], "Known Issues": [[184, "known-issues"]], "Incompatible Changes": [[184, "incompatible-changes"]], "SigOpt Strategy": [[185, "sigopt-strategy"]], "Preparation": [[185, "preparation"]], "SigOpt Platform": [[185, "sigopt-platform"]], "Neural Compressor Configuration": [[185, "neural-compressor-configuration"]], "Performance": [[185, "performance"]], "Benefit of SigOpt Strategy": [[185, "benefit-of-sigopt-strategy"]], "Performance Comparison of Different Strategies": [[185, "performance-comparison-of-different-strategies"]], "SmoothQuant and Our Enhancement": [[186, "smoothquant-and-our-enhancement"]], "SmoothQuant": [[186, "smoothquant"]], "Our enhancement:": [[186, "our-enhancement"]], "Algorithm: Auto-tuning of $\\alpha$.": [[186, "algorithm-auto-tuning-of-alpha"]], "Engineering": [[186, "engineering"]], "Using a fixed alpha": [[186, "using-a-fixed-alpha"]], "Auto-tune the alpha for the entire model": [[186, "auto-tune-the-alpha-for-the-entire-model"]], "Auto-tune the alpha for each layer/block": [[186, "auto-tune-the-alpha-for-each-layer-block"]], "Transform": [[187, "transform"]], "Transform Support List": [[187, "transform-support-list"]], "Pytorch": [[187, "pytorch"]], "Tuning Strategies": [[188, "tuning-strategies"]], "Strategy Design": [[188, "strategy-design"]], "Tuning Space": [[188, "tuning-space"]], "Exit Policy": [[188, "exit-policy"]], "Accuracy Criteria": [[188, "accuracy-criteria"]], "Tuning Process": [[188, "tuning-process"]], "Tuning Algorithms": [[188, "tuning-algorithms"]], "Auto": [[188, "auto"]], "Conservative Tuning": [[188, "conservative-tuning"]], "Basic": [[188, "basic"]], "MSE": [[188, "mse"]], "MSE_V2": [[188, "mse-v2"]], "HAWQ_V2": [[188, "hawq-v2"]], "Bayesian": [[188, "bayesian"]], "Exhaustive": [[188, "exhaustive"]], "Random": [[188, "random"]], "SigOpt": [[188, "sigopt"]], "TPE": [[188, "tpe"]], "Distributed Tuning": [[188, "distributed-tuning"]], "Customize a New Tuning Strategy": [[188, "customize-a-new-tuning-strategy"]], "Validated Quantization Examples": [[189, "validated-quantization-examples"]], "TensorFlow Models with TensorFlow 2.15.0": [[189, "tensorflow-models-with-tensorflow-2-15-0"]], "PyTorch Models with Torch 2.2.1+cpu in PTQ Mode": [[189, "pytorch-models-with-torch-2-2-1-cpu-in-ptq-mode"]], "PyTorch Models with Torch 2.2.1+cpu in QAT Mode": [[189, "pytorch-models-with-torch-2-2-1-cpu-in-qat-mode"]], "PyTorch Models with Torch 2.0.1+cpu in WOQ Mode": [[189, "pytorch-models-with-torch-2-0-1-cpu-in-woq-mode"]], "ONNX Models with ONNX Runtime 1.17.1": [[189, "onnx-models-with-onnx-runtime-1-17-1"]], "ONNX Models with ONNX Runtime 1.15.0 in WOQ Mode": [[189, "onnx-models-with-onnx-runtime-1-15-0-in-woq-mode"]], "Validated Pruning Examples": [[189, "validated-pruning-examples"]], "Validated Knowledge Distillation Examples": [[189, "validated-knowledge-distillation-examples"]], "Validated ONNX QDQ INT8 Models on Multiple Hardware through ONNX Runtime": [[189, "validated-onnx-qdq-int8-models-on-multiple-hardware-through-onnx-runtime"]]}, "indexentries": {"algorithms (class in neural_compressor.algorithm.algorithm)": [[0, "neural_compressor.algorithm.algorithm.ALGORITHMS"]], "algorithm (class in neural_compressor.algorithm.algorithm)": [[0, "neural_compressor.algorithm.algorithm.Algorithm"]], "algorithmscheduler (class in neural_compressor.algorithm.algorithm)": [[0, "neural_compressor.algorithm.algorithm.AlgorithmScheduler"]], "algorithm_registry() (in module neural_compressor.algorithm.algorithm)": [[0, "neural_compressor.algorithm.algorithm.algorithm_registry"]], "module": [[0, "module-neural_compressor.algorithm.algorithm"], [1, "module-neural_compressor.algorithm.fast_bias_correction"], [2, "module-neural_compressor.algorithm"], [3, "module-neural_compressor.algorithm.smooth_quant"], [4, "module-neural_compressor.algorithm.weight_correction"], [5, "module-neural_compressor.benchmark"], [6, "module-neural_compressor.common.base_config"], [7, "module-neural_compressor.common.base_tuning"], [8, "module-neural_compressor.common"], [9, "module-neural_compressor.common.tuning_param"], [10, "module-neural_compressor.common.utils.constants"], [11, "module-neural_compressor.common.utils"], [12, "module-neural_compressor.common.utils.logger"], [13, "module-neural_compressor.common.utils.save_load"], [14, "module-neural_compressor.common.utils.utility"], [15, "module-neural_compressor.config"], [16, "module-neural_compressor.contrib"], [17, "module-neural_compressor.contrib.strategy"], [18, "module-neural_compressor.contrib.strategy.sigopt"], [19, "module-neural_compressor.contrib.strategy.tpe"], [20, "module-neural_compressor.data.datasets.bert_dataset"], [21, "module-neural_compressor.data.datasets.coco_dataset"], [22, "module-neural_compressor.data.datasets.dataset"], [23, "module-neural_compressor.data.datasets.dummy_dataset"], [24, "module-neural_compressor.data.datasets.dummy_dataset_v2"], [25, "module-neural_compressor.data.datasets.imagenet_dataset"], [26, "module-neural_compressor.data.datasets"], [27, "module-neural_compressor.data.datasets.style_transfer_dataset"], [28, "module-neural_compressor.data.filters.coco_filter"], [29, "module-neural_compressor.data.filters.filter"], [30, "module-neural_compressor.data.filters"], [31, "module-neural_compressor.data"], [32, "module-neural_compressor.data.transforms.imagenet_transform"], [33, "module-neural_compressor.data.transforms"], [34, "module-neural_compressor.data.transforms.postprocess"], [35, "module-neural_compressor.data.transforms.tokenization"], [36, "module-neural_compressor.data.transforms.transform"], [37, "module-neural_compressor"], [38, "module-neural_compressor.metric.bleu"], [39, "module-neural_compressor.metric.bleu_util"], [40, "module-neural_compressor.metric.coco_label_map"], [41, "module-neural_compressor.metric.coco_tools"], [42, "module-neural_compressor.metric.evaluate_squad"], [43, "module-neural_compressor.metric.f1"], [44, "module-neural_compressor.metric"], [45, "module-neural_compressor.metric.metric"], [46, "module-neural_compressor.mix_precision"], [47, "module-neural_compressor.model.base_model"], [48, "module-neural_compressor.model"], [49, "module-neural_compressor.model.keras_model"], [50, "module-neural_compressor.model.model"], [51, "module-neural_compressor.model.mxnet_model"], [52, "module-neural_compressor.model.nets_factory"], [53, "module-neural_compressor.model.onnx_model"], [54, "module-neural_compressor.model.tensorflow_model"], [55, "module-neural_compressor.model.torch_model"], [56, "module-neural_compressor.objective"], [57, "module-neural_compressor.profiling"], [58, "module-neural_compressor.quantization"], [59, "module-neural_compressor.strategy.auto"], [60, "module-neural_compressor.strategy.auto_mixed_precision"], [61, "module-neural_compressor.strategy.basic"], [62, "module-neural_compressor.strategy.bayesian"], [63, "module-neural_compressor.strategy.conservative"], [64, "module-neural_compressor.strategy.exhaustive"], [65, "module-neural_compressor.strategy.hawq_v2"], [66, "module-neural_compressor.strategy"], [67, "module-neural_compressor.strategy.mse"], [68, "module-neural_compressor.strategy.mse_v2"], [69, "module-neural_compressor.strategy.random"], [70, "module-neural_compressor.strategy.strategy"], [71, "module-neural_compressor.strategy.utils.constant"], [72, "module-neural_compressor.strategy.utils"], [73, "module-neural_compressor.strategy.utils.tuning_sampler"], [74, "module-neural_compressor.strategy.utils.tuning_space"], [75, "module-neural_compressor.strategy.utils.tuning_structs"], [76, "module-neural_compressor.strategy.utils.utility"], [77, "module-neural_compressor.tensorflow"], [78, "module-neural_compressor.tensorflow.quantization.autotune"], [79, "module-neural_compressor.tensorflow.quantization.config"], [80, "module-neural_compressor.tensorflow.quantization"], [81, "module-neural_compressor.tensorflow.quantization.quantize"], [82, "module-neural_compressor.torch.export"], [83, "module-neural_compressor.torch.export.pt2e_export"], [84, "module-neural_compressor.torch"], [85, "module-neural_compressor.torch.quantization.autotune"], [86, "module-neural_compressor.torch.quantization.config"], [87, "module-neural_compressor.torch.quantization"], [88, "module-neural_compressor.torch.quantization.quantize"], [89, "module-neural_compressor.training"], [90, "module-neural_compressor.utils.collect_layer_histogram"], [91, "module-neural_compressor.utils.constant"], [92, "module-neural_compressor.utils.create_obj_from_config"], [93, "module-neural_compressor.utils.export"], [94, "module-neural_compressor.utils.export.qlinear2qdq"], [95, "module-neural_compressor.utils.export.tf2onnx"], [96, "module-neural_compressor.utils.export.torch2onnx"], [97, "module-neural_compressor.utils"], [98, "module-neural_compressor.utils.kl_divergence"], [99, "module-neural_compressor.utils.load_huggingface"], [100, "module-neural_compressor.utils.logger"], [101, "module-neural_compressor.utils.options"], [102, "module-neural_compressor.utils.pytorch"], [103, "module-neural_compressor.utils.utility"], [104, "module-neural_compressor.utils.weights_details"], [105, "module-neural_compressor.version"]], "neural_compressor.algorithm.algorithm": [[0, "module-neural_compressor.algorithm.algorithm"]], "fastbiascorrection (class in neural_compressor.algorithm.fast_bias_correction)": [[1, "neural_compressor.algorithm.fast_bias_correction.FastBiasCorrection"]], "neural_compressor.algorithm.fast_bias_correction": [[1, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[2, "module-neural_compressor.algorithm"]], "smoothquant (class in neural_compressor.algorithm.smooth_quant)": [[3, "neural_compressor.algorithm.smooth_quant.SmoothQuant"]], "neural_compressor.algorithm.smooth_quant": [[3, "module-neural_compressor.algorithm.smooth_quant"]], "weightcorrection (class in neural_compressor.algorithm.weight_correction)": [[4, "neural_compressor.algorithm.weight_correction.WeightCorrection"]], "neural_compressor.algorithm.weight_correction": [[4, "module-neural_compressor.algorithm.weight_correction"]], "benchmark_with_raw_cmd() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.benchmark_with_raw_cmd"]], "call_one() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.call_one"]], "config_instance() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.config_instance"]], "fit() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.fit"]], "generate_prefix() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.generate_prefix"]], "get_architecture() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.get_threads_per_core"]], "neural_compressor.benchmark": [[5, "module-neural_compressor.benchmark"]], "profile() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.profile"]], "run_instance() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.run_instance"]], "set_all_env_var() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.set_env_var"]], "summary_benchmark() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.summary_benchmark"]], "baseconfig (class in neural_compressor.common.base_config)": [[6, "neural_compressor.common.base_config.BaseConfig"]], "composableconfig (class in neural_compressor.common.base_config)": [[6, "neural_compressor.common.base_config.ComposableConfig"]], "configregistry (class in neural_compressor.common.base_config)": [[6, "neural_compressor.common.base_config.ConfigRegistry"]], "config_list (neural_compressor.common.base_config.composableconfig attribute)": [[6, "neural_compressor.common.base_config.ComposableConfig.config_list"]], "get_all_config_set_from_config_registry() (in module neural_compressor.common.base_config)": [[6, "neural_compressor.common.base_config.get_all_config_set_from_config_registry"]], "name (neural_compressor.common.base_config.baseconfig attribute)": [[6, "neural_compressor.common.base_config.BaseConfig.name"]], "neural_compressor.common.base_config": [[6, "module-neural_compressor.common.base_config"]], "params_list (neural_compressor.common.base_config.baseconfig attribute)": [[6, "neural_compressor.common.base_config.BaseConfig.params_list"]], "register_config() (in module neural_compressor.common.base_config)": [[6, "neural_compressor.common.base_config.register_config"]], "register_supported_configs_for_fwk() (in module neural_compressor.common.base_config)": [[6, "neural_compressor.common.base_config.register_supported_configs_for_fwk"]], "configloader (class in neural_compressor.common.base_tuning)": [[7, "neural_compressor.common.base_tuning.ConfigLoader"]], "configset (class in neural_compressor.common.base_tuning)": [[7, "neural_compressor.common.base_tuning.ConfigSet"]], "evaluationfuncwrapper (class in neural_compressor.common.base_tuning)": [[7, "neural_compressor.common.base_tuning.EvaluationFuncWrapper"]], "evaluator (class in neural_compressor.common.base_tuning)": [[7, "neural_compressor.common.base_tuning.Evaluator"]], "sampler (class in neural_compressor.common.base_tuning)": [[7, "neural_compressor.common.base_tuning.Sampler"]], "sequentialsampler (class in neural_compressor.common.base_tuning)": [[7, "neural_compressor.common.base_tuning.SequentialSampler"]], "tuningconfig (class in neural_compressor.common.base_tuning)": [[7, "neural_compressor.common.base_tuning.TuningConfig"]], "tuningmonitor (class in neural_compressor.common.base_tuning)": [[7, "neural_compressor.common.base_tuning.TuningMonitor"]], "config_list (neural_compressor.common.base_tuning.configset attribute)": [[7, "neural_compressor.common.base_tuning.ConfigSet.config_list"]], "init_tuning() (in module neural_compressor.common.base_tuning)": [[7, "neural_compressor.common.base_tuning.init_tuning"]], "neural_compressor.common.base_tuning": [[7, "module-neural_compressor.common.base_tuning"]], "neural_compressor.common": [[8, "module-neural_compressor.common"]], "model_level (neural_compressor.common.tuning_param.paramlevel attribute)": [[9, "neural_compressor.common.tuning_param.ParamLevel.MODEL_LEVEL"]], "op_level (neural_compressor.common.tuning_param.paramlevel attribute)": [[9, "neural_compressor.common.tuning_param.ParamLevel.OP_LEVEL"]], "op_type_level (neural_compressor.common.tuning_param.paramlevel attribute)": [[9, "neural_compressor.common.tuning_param.ParamLevel.OP_TYPE_LEVEL"]], "paramlevel (class in neural_compressor.common.tuning_param)": [[9, "neural_compressor.common.tuning_param.ParamLevel"]], "tuningparam (class in neural_compressor.common.tuning_param)": [[9, "neural_compressor.common.tuning_param.TuningParam"]], "neural_compressor.common.tuning_param": [[9, "module-neural_compressor.common.tuning_param"]], "mode (class in neural_compressor.common.utils.constants)": [[10, "neural_compressor.common.utils.constants.Mode"]], "neural_compressor.common.utils.constants": [[10, "module-neural_compressor.common.utils.constants"]], "neural_compressor.common.utils": [[11, "module-neural_compressor.common.utils"]], "logger (class in neural_compressor.common.utils.logger)": [[12, "neural_compressor.common.utils.logger.Logger"]], "tuninglogger (class in neural_compressor.common.utils.logger)": [[12, "neural_compressor.common.utils.logger.TuningLogger"]], "neural_compressor.common.utils.logger": [[12, "module-neural_compressor.common.utils.logger"]], "load_config_mapping() (in module neural_compressor.common.utils.save_load)": [[13, "neural_compressor.common.utils.save_load.load_config_mapping"]], "neural_compressor.common.utils.save_load": [[13, "module-neural_compressor.common.utils.save_load"]], "save_config_mapping() (in module neural_compressor.common.utils.save_load)": [[13, "neural_compressor.common.utils.save_load.save_config_mapping"]], "cpuinfo (class in neural_compressor.common.utils.utility)": [[14, "neural_compressor.common.utils.utility.CpuInfo"]], "lazyimport (class in neural_compressor.common.utils.utility)": [[14, "neural_compressor.common.utils.utility.LazyImport"]], "processortype (class in neural_compressor.common.utils.utility)": [[14, "neural_compressor.common.utils.utility.ProcessorType"]], "statistics (class in neural_compressor.common.utils.utility)": [[14, "neural_compressor.common.utils.utility.Statistics"]], "call_counter() (in module neural_compressor.common.utils.utility)": [[14, "neural_compressor.common.utils.utility.call_counter"]], "detect_processor_type_based_on_hw() (in module neural_compressor.common.utils.utility)": [[14, "neural_compressor.common.utils.utility.detect_processor_type_based_on_hw"]], "dump_elapsed_time() (in module neural_compressor.common.utils.utility)": [[14, "neural_compressor.common.utils.utility.dump_elapsed_time"]], "get_workspace() (in module neural_compressor.common.utils.utility)": [[14, "neural_compressor.common.utils.utility.get_workspace"]], "log_process() (in module neural_compressor.common.utils.utility)": [[14, "neural_compressor.common.utils.utility.log_process"]], "neural_compressor.common.utils.utility": [[14, "module-neural_compressor.common.utils.utility"]], "set_random_seed() (in module neural_compressor.common.utils.utility)": [[14, "neural_compressor.common.utils.utility.set_random_seed"]], "set_resume_from() (in module neural_compressor.common.utils.utility)": [[14, "neural_compressor.common.utils.utility.set_resume_from"]], "set_tensorboard() (in module neural_compressor.common.utils.utility)": [[14, "neural_compressor.common.utils.utility.set_tensorboard"]], "set_workspace() (in module neural_compressor.common.utils.utility)": [[14, "neural_compressor.common.utils.utility.set_workspace"]], "singleton() (in module neural_compressor.common.utils.utility)": [[14, "neural_compressor.common.utils.utility.singleton"]], "accuracycriterion (class in neural_compressor.config)": [[15, "neural_compressor.config.AccuracyCriterion"]], "benchmarkconfig (class in neural_compressor.config)": [[15, "neural_compressor.config.BenchmarkConfig"]], "distillationconfig (class in neural_compressor.config)": [[15, "neural_compressor.config.DistillationConfig"]], "dotdict (class in neural_compressor.config)": [[15, "neural_compressor.config.DotDict"]], "exportconfig (class in neural_compressor.config)": [[15, "neural_compressor.config.ExportConfig"]], "hpoconfig (class in neural_compressor.config)": [[15, "neural_compressor.config.HPOConfig"]], "intermediatelayersknowledgedistillationlossconfig (class in neural_compressor.config)": [[15, "neural_compressor.config.IntermediateLayersKnowledgeDistillationLossConfig"]], "keras (class in neural_compressor.config)": [[15, "neural_compressor.config.Keras"]], "knowledgedistillationlossconfig (class in neural_compressor.config)": [[15, "neural_compressor.config.KnowledgeDistillationLossConfig"]], "mxnet (class in neural_compressor.config)": [[15, "neural_compressor.config.MXNet"]], "mixedprecisionconfig (class in neural_compressor.config)": [[15, "neural_compressor.config.MixedPrecisionConfig"]], "nasconfig (class in neural_compressor.config)": [[15, "neural_compressor.config.NASConfig"]], "onnx (class in neural_compressor.config)": [[15, "neural_compressor.config.ONNX"]], "onnxqlinear2qdqconfig (class in neural_compressor.config)": [[15, "neural_compressor.config.ONNXQlinear2QDQConfig"]], "options (class in neural_compressor.config)": [[15, "neural_compressor.config.Options"]], "posttrainingquantconfig (class in neural_compressor.config)": [[15, "neural_compressor.config.PostTrainingQuantConfig"]], "pytorch (class in neural_compressor.config)": [[15, "neural_compressor.config.PyTorch"]], "quantizationawaretrainingconfig (class in neural_compressor.config)": [[15, "neural_compressor.config.QuantizationAwareTrainingConfig"]], "selfknowledgedistillationlossconfig (class in neural_compressor.config)": [[15, "neural_compressor.config.SelfKnowledgeDistillationLossConfig"]], "tf2onnxconfig (class in neural_compressor.config)": [[15, "neural_compressor.config.TF2ONNXConfig"]], "tensorflow (class in neural_compressor.config)": [[15, "neural_compressor.config.TensorFlow"]], "torch2onnxconfig (class in neural_compressor.config)": [[15, "neural_compressor.config.Torch2ONNXConfig"]], "tuningcriterion (class in neural_compressor.config)": [[15, "neural_compressor.config.TuningCriterion"]], "weightpruningconfig (class in neural_compressor.config)": [[15, "neural_compressor.config.WeightPruningConfig"]], "neural_compressor.config": [[15, "module-neural_compressor.config"]], "neural_compressor.contrib": [[16, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[17, "module-neural_compressor.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.contrib.strategy.sigopt)": [[18, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.sigopt": [[18, "module-neural_compressor.contrib.strategy.sigopt"]], "tpetunestrategy (class in neural_compressor.contrib.strategy.tpe)": [[19, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[19, "module-neural_compressor.contrib.strategy.tpe"]], "inputfeatures (class in neural_compressor.data.datasets.bert_dataset)": [[20, "neural_compressor.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[20, "neural_compressor.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.data.datasets.bert_dataset)": [[20, "neural_compressor.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[20, "neural_compressor.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[20, "neural_compressor.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[20, "neural_compressor.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.data.datasets.bert_dataset)": [[20, "neural_compressor.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.data.datasets.bert_dataset)": [[20, "neural_compressor.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.data.datasets.bert_dataset": [[20, "module-neural_compressor.data.datasets.bert_dataset"]], "coconpy (class in neural_compressor.data.datasets.coco_dataset)": [[21, "neural_compressor.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.data.datasets.coco_dataset)": [[21, "neural_compressor.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.data.datasets.coco_dataset)": [[21, "neural_compressor.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.data.datasets.coco_dataset)": [[21, "neural_compressor.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.data.datasets.coco_dataset": [[21, "module-neural_compressor.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflow (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.Tensorflow"]], "tensorflowcifar10 (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagerecord (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.check_integrity"]], "dataset_registry() (in module neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.dataset_registry"]], "download_url() (in module neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.gen_bar_updater"]], "neural_compressor.data.datasets.dataset": [[22, "module-neural_compressor.data.datasets.dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset)": [[23, "neural_compressor.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset": [[23, "module-neural_compressor.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[24, "neural_compressor.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[24, "neural_compressor.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[24, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[25, "neural_compressor.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[25, "neural_compressor.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[25, "neural_compressor.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[25, "neural_compressor.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[25, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[25, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.data.datasets.imagenet_dataset": [[25, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[26, "module-neural_compressor.data.datasets"]], "styletransferdataset (class in neural_compressor.data.datasets.style_transfer_dataset)": [[27, "neural_compressor.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.data.datasets.style_transfer_dataset": [[27, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.data.filters.coco_filter)": [[28, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.data.filters.coco_filter)": [[28, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.coco_filter": [[28, "module-neural_compressor.data.filters.coco_filter"]], "filters (class in neural_compressor.data.filters.filter)": [[29, "neural_compressor.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.data.filters.filter)": [[29, "neural_compressor.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.data.filters.filter)": [[29, "neural_compressor.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.data.filters.filter)": [[29, "neural_compressor.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.data.filters.filter)": [[29, "neural_compressor.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.data.filters.filter)": [[29, "neural_compressor.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.data.filters.filter)": [[29, "neural_compressor.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.data.filters.filter)": [[29, "neural_compressor.data.filters.filter.filter_registry"]], "neural_compressor.data.filters.filter": [[29, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[30, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[31, "module-neural_compressor.data"]], "bilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[32, "neural_compressor.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.data.transforms.imagenet_transform)": [[32, "neural_compressor.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[32, "neural_compressor.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[32, "neural_compressor.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.data.transforms.imagenet_transform)": [[32, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[32, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.data.transforms.imagenet_transform)": [[32, "neural_compressor.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.data.transforms.imagenet_transform)": [[32, "neural_compressor.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[32, "neural_compressor.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "tensorflowshiftrescale (class in neural_compressor.data.transforms.imagenet_transform)": [[32, "neural_compressor.data.transforms.imagenet_transform.TensorflowShiftRescale"]], "tensorflowtransposelastchannel (class in neural_compressor.data.transforms.imagenet_transform)": [[32, "neural_compressor.data.transforms.imagenet_transform.TensorflowTransposeLastChannel"]], "neural_compressor.data.transforms.imagenet_transform": [[32, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[33, "module-neural_compressor.data.transforms"]], "postprocess (class in neural_compressor.data.transforms.postprocess)": [[34, "neural_compressor.data.transforms.postprocess.Postprocess"]], "neural_compressor.data.transforms.postprocess": [[34, "module-neural_compressor.data.transforms.postprocess"]], "basictokenizer (class in neural_compressor.data.transforms.tokenization)": [[35, "neural_compressor.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.data.transforms.tokenization)": [[35, "neural_compressor.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.data.transforms.tokenization)": [[35, "neural_compressor.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.data.transforms.tokenization)": [[35, "neural_compressor.data.transforms.tokenization.convert_by_vocab"]], "convert_to_unicode() (in module neural_compressor.data.transforms.tokenization)": [[35, "neural_compressor.data.transforms.tokenization.convert_to_unicode"]], "load_vocab() (in module neural_compressor.data.transforms.tokenization)": [[35, "neural_compressor.data.transforms.tokenization.load_vocab"]], "neural_compressor.data.transforms.tokenization": [[35, "module-neural_compressor.data.transforms.tokenization"]], "whitespace_tokenize() (in module neural_compressor.data.transforms.tokenization)": [[35, "neural_compressor.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.TRANSFORMS"], [36, "neural_compressor.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.get_final_text"]], "get_torchvision_map() (in module neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.get_torchvision_map"]], "neural_compressor.data.transforms.transform": [[36, "module-neural_compressor.data.transforms.transform"]], "read_squad_examples() (in module neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.read_squad_examples"]], "transform_registry() (in module neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.transform_registry"]], "neural_compressor": [[37, "module-neural_compressor"]], "bleu (class in neural_compressor.metric.bleu)": [[38, "neural_compressor.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.metric.bleu)": [[38, "neural_compressor.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.metric.bleu)": [[38, "neural_compressor.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.metric.bleu.bleu attribute)": [[38, "neural_compressor.metric.bleu.BLEU.labels"]], "neural_compressor.metric.bleu": [[38, "module-neural_compressor.metric.bleu"]], "nondigit_punct_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[38, "neural_compressor.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.metric.bleu.bleu attribute)": [[38, "neural_compressor.metric.bleu.BLEU.predictions"]], "punct_nondigit_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[38, "neural_compressor.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[38, "neural_compressor.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.metric.bleu_util)": [[39, "neural_compressor.metric.bleu_util.compute_bleu"]], "neural_compressor.metric.bleu_util": [[39, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[40, "module-neural_compressor.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.metric.coco_tools)": [[41, "neural_compressor.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.metric.coco_tools)": [[41, "neural_compressor.metric.coco_tools.COCOWrapper"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.metric.coco_tools)": [[41, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.metric.coco_tools)": [[41, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.metric.coco_tools)": [[41, "neural_compressor.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "dataset (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[41, "neural_compressor.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[41, "neural_compressor.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.metric.coco_tools": [[41, "module-neural_compressor.metric.coco_tools"]], "evaluate() (in module neural_compressor.metric.evaluate_squad)": [[42, "neural_compressor.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.metric.evaluate_squad)": [[42, "neural_compressor.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.metric.evaluate_squad)": [[42, "neural_compressor.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.evaluate_squad)": [[42, "neural_compressor.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.metric.evaluate_squad": [[42, "module-neural_compressor.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.metric.f1)": [[43, "neural_compressor.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.metric.f1)": [[43, "neural_compressor.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.f1)": [[43, "neural_compressor.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[43, "module-neural_compressor.metric.f1"]], "normalize_answer() (in module neural_compressor.metric.f1)": [[43, "neural_compressor.metric.f1.normalize_answer"]], "neural_compressor.metric": [[44, "module-neural_compressor.metric"]], "accuracy (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.F1"]], "generaltopk (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.Loss"]], "mae (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.MAE"]], "metrics (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.METRICS"]], "mse (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.MXNetMetrics"]], "metric (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.Metric"]], "onnxrtglue (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.RMSE"]], "roc (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.ROC"]], "squadf1 (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.metric.metric.mae attribute)": [[45, "neural_compressor.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.metric.metric.mse attribute)": [[45, "neural_compressor.metric.metric.MSE.compare_label"]], "k (neural_compressor.metric.metric.generaltopk attribute)": [[45, "neural_compressor.metric.metric.GeneralTopK.k"]], "k (neural_compressor.metric.metric.tensorflowtopk attribute)": [[45, "neural_compressor.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.metric.metric.accuracy attribute)": [[45, "neural_compressor.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.metric.metric.mae attribute)": [[45, "neural_compressor.metric.metric.MAE.label_list"]], "label_list (neural_compressor.metric.metric.mse attribute)": [[45, "neural_compressor.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.mIOU"]], "metric_registry() (in module neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.metric_registry"]], "metrics (neural_compressor.metric.metric.metrics attribute)": [[45, "neural_compressor.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.metric.metric.mxnetmetrics attribute)": [[45, "neural_compressor.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtitmetrics attribute)": [[45, "neural_compressor.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtqlmetrics attribute)": [[45, "neural_compressor.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.metric.metric.pytorchmetrics attribute)": [[45, "neural_compressor.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.metric.metric.tensorflowmetrics attribute)": [[45, "neural_compressor.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.metric.metric.rmse attribute)": [[45, "neural_compressor.metric.metric.RMSE.mse"]], "neural_compressor.metric.metric": [[45, "module-neural_compressor.metric.metric"]], "num_correct (neural_compressor.metric.metric.generaltopk attribute)": [[45, "neural_compressor.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.metric.metric.tensorflowtopk attribute)": [[45, "neural_compressor.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.metric.metric.generaltopk attribute)": [[45, "neural_compressor.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.metric.metric.tensorflowtopk attribute)": [[45, "neural_compressor.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.metric.metric.accuracy attribute)": [[45, "neural_compressor.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.metric.metric.mae attribute)": [[45, "neural_compressor.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.metric.metric.mse attribute)": [[45, "neural_compressor.metric.metric.MSE.pred_list"]], "register_customer_metric() (in module neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.register_customer_metric"]], "sample (neural_compressor.metric.metric.accuracy attribute)": [[45, "neural_compressor.metric.metric.Accuracy.sample"]], "sample (neural_compressor.metric.metric.loss attribute)": [[45, "neural_compressor.metric.metric.Loss.sample"]], "sum (neural_compressor.metric.metric.loss attribute)": [[45, "neural_compressor.metric.metric.Loss.sum"]], "fit() (in module neural_compressor.mix_precision)": [[46, "neural_compressor.mix_precision.fit"]], "neural_compressor.mix_precision": [[46, "module-neural_compressor.mix_precision"]], "basemodel (class in neural_compressor.model.base_model)": [[47, "neural_compressor.model.base_model.BaseModel"]], "neural_compressor.model.base_model": [[47, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[48, "module-neural_compressor.model"]], "kerasmodel (class in neural_compressor.model.keras_model)": [[49, "neural_compressor.model.keras_model.KerasModel"]], "neural_compressor.model.keras_model": [[49, "module-neural_compressor.model.keras_model"]], "model (class in neural_compressor.model.model)": [[50, "neural_compressor.model.model.Model"]], "get_model_fwk_name() (in module neural_compressor.model.model)": [[50, "neural_compressor.model.model.get_model_fwk_name"]], "neural_compressor.model.model": [[50, "module-neural_compressor.model.model"]], "mxnetmodel (class in neural_compressor.model.mxnet_model)": [[51, "neural_compressor.model.mxnet_model.MXNetModel"]], "neural_compressor.model.mxnet_model": [[51, "module-neural_compressor.model.mxnet_model"]], "tfslimnetsfactory (class in neural_compressor.model.nets_factory)": [[52, "neural_compressor.model.nets_factory.TFSlimNetsFactory"]], "neural_compressor.model.nets_factory": [[52, "module-neural_compressor.model.nets_factory"]], "onnxmodel (class in neural_compressor.model.onnx_model)": [[53, "neural_compressor.model.onnx_model.ONNXModel"]], "neural_compressor.model.onnx_model": [[53, "module-neural_compressor.model.onnx_model"]], "tensorflowbasemodel (class in neural_compressor.model.tensorflow_model)": [[54, "neural_compressor.model.tensorflow_model.TensorflowBaseModel"]], "tensorflowcheckpointmodel (class in neural_compressor.model.tensorflow_model)": [[54, "neural_compressor.model.tensorflow_model.TensorflowCheckpointModel"]], "tensorflowllmmodel (class in neural_compressor.model.tensorflow_model)": [[54, "neural_compressor.model.tensorflow_model.TensorflowLLMModel"]], "tensorflowmodel (class in neural_compressor.model.tensorflow_model)": [[54, "neural_compressor.model.tensorflow_model.TensorflowModel"]], "tensorflowqatmodel (class in neural_compressor.model.tensorflow_model)": [[54, "neural_compressor.model.tensorflow_model.TensorflowQATModel"]], "tensorflowsavedmodelmodel (class in neural_compressor.model.tensorflow_model)": [[54, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel"]], "checkpoint_session() (in module neural_compressor.model.tensorflow_model)": [[54, "neural_compressor.model.tensorflow_model.checkpoint_session"]], "estimator_session() (in module neural_compressor.model.tensorflow_model)": [[54, "neural_compressor.model.tensorflow_model.estimator_session"]], "frozen_pb_session() (in module neural_compressor.model.tensorflow_model)": [[54, "neural_compressor.model.tensorflow_model.frozen_pb_session"]], "get_model_type() (in module neural_compressor.model.tensorflow_model)": [[54, "neural_compressor.model.tensorflow_model.get_model_type"]], "graph_def_session() (in module neural_compressor.model.tensorflow_model)": [[54, "neural_compressor.model.tensorflow_model.graph_def_session"]], "graph_session() (in module neural_compressor.model.tensorflow_model)": [[54, "neural_compressor.model.tensorflow_model.graph_session"]], "keras_session() (in module neural_compressor.model.tensorflow_model)": [[54, "neural_compressor.model.tensorflow_model.keras_session"]], "load_saved_model() (in module neural_compressor.model.tensorflow_model)": [[54, "neural_compressor.model.tensorflow_model.load_saved_model"]], "neural_compressor.model.tensorflow_model": [[54, "module-neural_compressor.model.tensorflow_model"]], "saved_model_session() (in module neural_compressor.model.tensorflow_model)": [[54, "neural_compressor.model.tensorflow_model.saved_model_session"]], "slim_session() (in module neural_compressor.model.tensorflow_model)": [[54, "neural_compressor.model.tensorflow_model.slim_session"]], "try_loading_keras() (in module neural_compressor.model.tensorflow_model)": [[54, "neural_compressor.model.tensorflow_model.try_loading_keras"]], "validate_and_inference_input_output() (in module neural_compressor.model.tensorflow_model)": [[54, "neural_compressor.model.tensorflow_model.validate_and_inference_input_output"]], "validate_graph_node() (in module neural_compressor.model.tensorflow_model)": [[54, "neural_compressor.model.tensorflow_model.validate_graph_node"]], "ipexmodel (class in neural_compressor.model.torch_model)": [[55, "neural_compressor.model.torch_model.IPEXModel"]], "pytorchbasemodel (class in neural_compressor.model.torch_model)": [[55, "neural_compressor.model.torch_model.PyTorchBaseModel"]], "pytorchfxmodel (class in neural_compressor.model.torch_model)": [[55, "neural_compressor.model.torch_model.PyTorchFXModel"]], "pytorchmodel (class in neural_compressor.model.torch_model)": [[55, "neural_compressor.model.torch_model.PyTorchModel"]], "neural_compressor.model.torch_model": [[55, "module-neural_compressor.model.torch_model"]], "accuracy (class in neural_compressor.objective)": [[56, "neural_compressor.objective.Accuracy"]], "footprint (class in neural_compressor.objective)": [[56, "neural_compressor.objective.Footprint"]], "modelsize (class in neural_compressor.objective)": [[56, "neural_compressor.objective.ModelSize"]], "multiobjective (class in neural_compressor.objective)": [[56, "neural_compressor.objective.MultiObjective"]], "objective (class in neural_compressor.objective)": [[56, "neural_compressor.objective.Objective"]], "performance (class in neural_compressor.objective)": [[56, "neural_compressor.objective.Performance"]], "neural_compressor.objective": [[56, "module-neural_compressor.objective"]], "objective_custom_registry() (in module neural_compressor.objective)": [[56, "neural_compressor.objective.objective_custom_registry"]], "objective_registry() (in module neural_compressor.objective)": [[56, "neural_compressor.objective.objective_registry"]], "neural_compressor.profiling": [[57, "module-neural_compressor.profiling"]], "fit() (in module neural_compressor.quantization)": [[58, "neural_compressor.quantization.fit"]], "neural_compressor.quantization": [[58, "module-neural_compressor.quantization"]], "autotunestrategy (class in neural_compressor.strategy.auto)": [[59, "neural_compressor.strategy.auto.AutoTuneStrategy"]], "neural_compressor.strategy.auto": [[59, "module-neural_compressor.strategy.auto"]], "automixedprecisiontunestrategy (class in neural_compressor.strategy.auto_mixed_precision)": [[60, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[60, "module-neural_compressor.strategy.auto_mixed_precision"]], "basictunestrategy (class in neural_compressor.strategy.basic)": [[61, "neural_compressor.strategy.basic.BasicTuneStrategy"]], "neural_compressor.strategy.basic": [[61, "module-neural_compressor.strategy.basic"]], "bayesianoptimization (class in neural_compressor.strategy.bayesian)": [[62, "neural_compressor.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.strategy.bayesian)": [[62, "neural_compressor.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.strategy.bayesian)": [[62, "neural_compressor.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.strategy.bayesian)": [[62, "neural_compressor.strategy.bayesian.acq_max"]], "neural_compressor.strategy.bayesian": [[62, "module-neural_compressor.strategy.bayesian"]], "conservativetunestrategy (class in neural_compressor.strategy.conservative)": [[63, "neural_compressor.strategy.conservative.ConservativeTuneStrategy"]], "neural_compressor.strategy.conservative": [[63, "module-neural_compressor.strategy.conservative"]], "exhaustivetunestrategy (class in neural_compressor.strategy.exhaustive)": [[64, "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[64, "module-neural_compressor.strategy.exhaustive"]], "hawq_v2tunestrategy (class in neural_compressor.strategy.hawq_v2)": [[65, "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[65, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[66, "module-neural_compressor.strategy"]], "msetunestrategy (class in neural_compressor.strategy.mse)": [[67, "neural_compressor.strategy.mse.MSETuneStrategy"]], "neural_compressor.strategy.mse": [[67, "module-neural_compressor.strategy.mse"]], "mse_v2tunestrategy (class in neural_compressor.strategy.mse_v2)": [[68, "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.strategy.mse_v2": [[68, "module-neural_compressor.strategy.mse_v2"]], "randomtunestrategy (class in neural_compressor.strategy.random)": [[69, "neural_compressor.strategy.random.RandomTuneStrategy"]], "neural_compressor.strategy.random": [[69, "module-neural_compressor.strategy.random"]], "tunestrategy (class in neural_compressor.strategy.strategy)": [[70, "neural_compressor.strategy.strategy.TuneStrategy"]], "tunestrategymeta (class in neural_compressor.strategy.strategy)": [[70, "neural_compressor.strategy.strategy.TuneStrategyMeta"]], "neural_compressor.strategy.strategy": [[70, "module-neural_compressor.strategy.strategy"]], "strategy_registry() (in module neural_compressor.strategy.strategy)": [[70, "neural_compressor.strategy.strategy.strategy_registry"]], "neural_compressor.strategy.utils.constant": [[71, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[72, "module-neural_compressor.strategy.utils"]], "blockfallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[73, "neural_compressor.strategy.utils.tuning_sampler.BlockFallbackTuningSampler"]], "fallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[73, "neural_compressor.strategy.utils.tuning_sampler.FallbackTuningSampler"]], "lowerbitssampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[73, "neural_compressor.strategy.utils.tuning_sampler.LowerBitsSampler"]], "modelwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[73, "neural_compressor.strategy.utils.tuning_sampler.ModelWiseTuningSampler"]], "optypewisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[73, "neural_compressor.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler"]], "opwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[73, "neural_compressor.strategy.utils.tuning_sampler.OpWiseTuningSampler"]], "smoothquantsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[73, "neural_compressor.strategy.utils.tuning_sampler.SmoothQuantSampler"]], "tuningorder (class in neural_compressor.strategy.utils.tuning_sampler)": [[73, "neural_compressor.strategy.utils.tuning_sampler.TuningOrder"]], "tuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[73, "neural_compressor.strategy.utils.tuning_sampler.TuningSampler"]], "weightonlyquantsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[73, "neural_compressor.strategy.utils.tuning_sampler.WeightOnlyQuantSampler"]], "neural_compressor.strategy.utils.tuning_sampler": [[73, "module-neural_compressor.strategy.utils.tuning_sampler"]], "tuningitem (class in neural_compressor.strategy.utils.tuning_space)": [[74, "neural_compressor.strategy.utils.tuning_space.TuningItem"]], "tuningspace (class in neural_compressor.strategy.utils.tuning_space)": [[74, "neural_compressor.strategy.utils.tuning_space.TuningSpace"]], "initial_tuning_cfg_with_quant_mode() (in module neural_compressor.strategy.utils.tuning_space)": [[74, "neural_compressor.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode"]], "neural_compressor.strategy.utils.tuning_space": [[74, "module-neural_compressor.strategy.utils.tuning_space"]], "pattern_to_internal() (in module neural_compressor.strategy.utils.tuning_space)": [[74, "neural_compressor.strategy.utils.tuning_space.pattern_to_internal"]], "pattern_to_path() (in module neural_compressor.strategy.utils.tuning_space)": [[74, "neural_compressor.strategy.utils.tuning_space.pattern_to_path"]], "quant_mode_from_pattern() (in module neural_compressor.strategy.utils.tuning_space)": [[74, "neural_compressor.strategy.utils.tuning_space.quant_mode_from_pattern"]], "optuningconfig (class in neural_compressor.strategy.utils.tuning_structs)": [[75, "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig"]], "neural_compressor.strategy.utils.tuning_structs": [[75, "module-neural_compressor.strategy.utils.tuning_structs"]], "classregister (class in neural_compressor.strategy.utils.utility)": [[76, "neural_compressor.strategy.utils.utility.ClassRegister"]], "ordereddefaultdict (class in neural_compressor.strategy.utils.utility)": [[76, "neural_compressor.strategy.utils.utility.OrderedDefaultDict"]], "quantoptions (class in neural_compressor.strategy.utils.utility)": [[76, "neural_compressor.strategy.utils.utility.QuantOptions"]], "quanttype (class in neural_compressor.strategy.utils.utility)": [[76, "neural_compressor.strategy.utils.utility.QuantType"]], "build_slave_faker_model() (in module neural_compressor.strategy.utils.utility)": [[76, "neural_compressor.strategy.utils.utility.build_slave_faker_model"]], "extract_data_type() (in module neural_compressor.strategy.utils.utility)": [[76, "neural_compressor.strategy.utils.utility.extract_data_type"]], "get_adaptor_name() (in module neural_compressor.strategy.utils.utility)": [[76, "neural_compressor.strategy.utils.utility.get_adaptor_name"]], "neural_compressor.strategy.utils.utility": [[76, "module-neural_compressor.strategy.utils.utility"]], "preprocess_user_cfg() (in module neural_compressor.strategy.utils.utility)": [[76, "neural_compressor.strategy.utils.utility.preprocess_user_cfg"]], "reverted_data_type() (in module neural_compressor.strategy.utils.utility)": [[76, "neural_compressor.strategy.utils.utility.reverted_data_type"]], "neural_compressor.tensorflow": [[77, "module-neural_compressor.tensorflow"]], "autotune() (in module neural_compressor.tensorflow.quantization.autotune)": [[78, "neural_compressor.tensorflow.quantization.autotune.autotune"]], "neural_compressor.tensorflow.quantization.autotune": [[78, "module-neural_compressor.tensorflow.quantization.autotune"]], "smoothquantconfig (class in neural_compressor.tensorflow.quantization.config)": [[79, "neural_compressor.tensorflow.quantization.config.SmoothQuantConfig"]], "staticquantconfig (class in neural_compressor.tensorflow.quantization.config)": [[79, "neural_compressor.tensorflow.quantization.config.StaticQuantConfig"]], "get_default_sq_config() (in module neural_compressor.tensorflow.quantization.config)": [[79, "neural_compressor.tensorflow.quantization.config.get_default_sq_config"]], "get_default_static_quant_config() (in module neural_compressor.tensorflow.quantization.config)": [[79, "neural_compressor.tensorflow.quantization.config.get_default_static_quant_config"]], "neural_compressor.tensorflow.quantization.config": [[79, "module-neural_compressor.tensorflow.quantization.config"]], "neural_compressor.tensorflow.quantization": [[80, "module-neural_compressor.tensorflow.quantization"]], "neural_compressor.tensorflow.quantization.quantize": [[81, "module-neural_compressor.tensorflow.quantization.quantize"]], "quantize_model() (in module neural_compressor.tensorflow.quantization.quantize)": [[81, "neural_compressor.tensorflow.quantization.quantize.quantize_model"]], "quantize_model_with_single_config() (in module neural_compressor.tensorflow.quantization.quantize)": [[81, "neural_compressor.tensorflow.quantization.quantize.quantize_model_with_single_config"]], "neural_compressor.torch.export": [[82, "module-neural_compressor.torch.export"]], "export() (in module neural_compressor.torch.export.pt2e_export)": [[83, "neural_compressor.torch.export.pt2e_export.export"]], "export_model_for_pt2e_quant() (in module neural_compressor.torch.export.pt2e_export)": [[83, "neural_compressor.torch.export.pt2e_export.export_model_for_pt2e_quant"]], "neural_compressor.torch.export.pt2e_export": [[83, "module-neural_compressor.torch.export.pt2e_export"]], "neural_compressor.torch": [[84, "module-neural_compressor.torch"]], "autotune() (in module neural_compressor.torch.quantization.autotune)": [[85, "neural_compressor.torch.quantization.autotune.autotune"]], "get_all_config_set() (in module neural_compressor.torch.quantization.autotune)": [[85, "neural_compressor.torch.quantization.autotune.get_all_config_set"]], "get_rtn_double_quant_config_set() (in module neural_compressor.torch.quantization.autotune)": [[85, "neural_compressor.torch.quantization.autotune.get_rtn_double_quant_config_set"]], "neural_compressor.torch.quantization.autotune": [[85, "module-neural_compressor.torch.quantization.autotune"]], "awqconfig (class in neural_compressor.torch.quantization.config)": [[86, "neural_compressor.torch.quantization.config.AWQConfig"]], "autoroundconfig (class in neural_compressor.torch.quantization.config)": [[86, "neural_compressor.torch.quantization.config.AutoRoundConfig"]], "dynamicquantconfig (class in neural_compressor.torch.quantization.config)": [[86, "neural_compressor.torch.quantization.config.DynamicQuantConfig"]], "fp8config (class in neural_compressor.torch.quantization.config)": [[86, "neural_compressor.torch.quantization.config.FP8Config"]], "gptqconfig (class in neural_compressor.torch.quantization.config)": [[86, "neural_compressor.torch.quantization.config.GPTQConfig"]], "hqqconfig (class in neural_compressor.torch.quantization.config)": [[86, "neural_compressor.torch.quantization.config.HQQConfig"]], "mxquantconfig (class in neural_compressor.torch.quantization.config)": [[86, "neural_compressor.torch.quantization.config.MXQuantConfig"]], "mixedprecisionconfig (class in neural_compressor.torch.quantization.config)": [[86, "neural_compressor.torch.quantization.config.MixedPrecisionConfig"]], "operatorconfig (class in neural_compressor.torch.quantization.config)": [[86, "neural_compressor.torch.quantization.config.OperatorConfig"]], "rtnconfig (class in neural_compressor.torch.quantization.config)": [[86, "neural_compressor.torch.quantization.config.RTNConfig"]], "smoothquantconfig (class in neural_compressor.torch.quantization.config)": [[86, "neural_compressor.torch.quantization.config.SmoothQuantConfig"]], "staticquantconfig (class in neural_compressor.torch.quantization.config)": [[86, "neural_compressor.torch.quantization.config.StaticQuantConfig"]], "teqconfig (class in neural_compressor.torch.quantization.config)": [[86, "neural_compressor.torch.quantization.config.TEQConfig"]], "torchbaseconfig (class in neural_compressor.torch.quantization.config)": [[86, "neural_compressor.torch.quantization.config.TorchBaseConfig"]], "get_default_awq_config() (in module neural_compressor.torch.quantization.config)": [[86, "neural_compressor.torch.quantization.config.get_default_awq_config"]], "get_default_double_quant_config() (in module neural_compressor.torch.quantization.config)": [[86, "neural_compressor.torch.quantization.config.get_default_double_quant_config"]], "get_default_dynamic_config() (in module neural_compressor.torch.quantization.config)": [[86, "neural_compressor.torch.quantization.config.get_default_dynamic_config"]], "get_default_fp8_config() (in module neural_compressor.torch.quantization.config)": [[86, "neural_compressor.torch.quantization.config.get_default_fp8_config"]], "get_default_fp8_config_set() (in module neural_compressor.torch.quantization.config)": [[86, "neural_compressor.torch.quantization.config.get_default_fp8_config_set"]], "get_default_hqq_config() (in module neural_compressor.torch.quantization.config)": [[86, "neural_compressor.torch.quantization.config.get_default_hqq_config"]], "get_default_mixed_precision_config() (in module neural_compressor.torch.quantization.config)": [[86, "neural_compressor.torch.quantization.config.get_default_mixed_precision_config"]], "get_default_mixed_precision_config_set() (in module neural_compressor.torch.quantization.config)": [[86, "neural_compressor.torch.quantization.config.get_default_mixed_precision_config_set"]], "get_default_mx_config() (in module neural_compressor.torch.quantization.config)": [[86, "neural_compressor.torch.quantization.config.get_default_mx_config"]], "get_default_rtn_config() (in module neural_compressor.torch.quantization.config)": [[86, "neural_compressor.torch.quantization.config.get_default_rtn_config"]], "get_default_sq_config() (in module neural_compressor.torch.quantization.config)": [[86, "neural_compressor.torch.quantization.config.get_default_sq_config"]], "get_default_static_config() (in module neural_compressor.torch.quantization.config)": [[86, "neural_compressor.torch.quantization.config.get_default_static_config"]], "get_default_teq_config() (in module neural_compressor.torch.quantization.config)": [[86, "neural_compressor.torch.quantization.config.get_default_teq_config"]], "get_woq_tuning_config() (in module neural_compressor.torch.quantization.config)": [[86, "neural_compressor.torch.quantization.config.get_woq_tuning_config"]], "neural_compressor.torch.quantization.config": [[86, "module-neural_compressor.torch.quantization.config"]], "neural_compressor.torch.quantization": [[87, "module-neural_compressor.torch.quantization"]], "convert() (in module neural_compressor.torch.quantization.quantize)": [[88, "neural_compressor.torch.quantization.quantize.convert"]], "neural_compressor.torch.quantization.quantize": [[88, "module-neural_compressor.torch.quantization.quantize"]], "prepare() (in module neural_compressor.torch.quantization.quantize)": [[88, "neural_compressor.torch.quantization.quantize.prepare"]], "quantize() (in module neural_compressor.torch.quantization.quantize)": [[88, "neural_compressor.torch.quantization.quantize.quantize"]], "callbacks (class in neural_compressor.training)": [[89, "neural_compressor.training.CallBacks"]], "compressionmanager (class in neural_compressor.training)": [[89, "neural_compressor.training.CompressionManager"]], "fit() (in module neural_compressor.training)": [[89, "neural_compressor.training.fit"]], "neural_compressor.training": [[89, "module-neural_compressor.training"]], "prepare_compression() (in module neural_compressor.training)": [[89, "neural_compressor.training.prepare_compression"]], "layerhistogramcollector (class in neural_compressor.utils.collect_layer_histogram)": [[90, "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector"]], "neural_compressor.utils.collect_layer_histogram": [[90, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[91, "module-neural_compressor.utils.constant"]], "create_dataloader() (in module neural_compressor.utils.create_obj_from_config)": [[92, "neural_compressor.utils.create_obj_from_config.create_dataloader"]], "create_dataset() (in module neural_compressor.utils.create_obj_from_config)": [[92, "neural_compressor.utils.create_obj_from_config.create_dataset"]], "create_eval_func() (in module neural_compressor.utils.create_obj_from_config)": [[92, "neural_compressor.utils.create_obj_from_config.create_eval_func"]], "create_train_func() (in module neural_compressor.utils.create_obj_from_config)": [[92, "neural_compressor.utils.create_obj_from_config.create_train_func"]], "get_algorithm() (in module neural_compressor.utils.create_obj_from_config)": [[92, "neural_compressor.utils.create_obj_from_config.get_algorithm"]], "get_func_from_config() (in module neural_compressor.utils.create_obj_from_config)": [[92, "neural_compressor.utils.create_obj_from_config.get_func_from_config"]], "get_metrics() (in module neural_compressor.utils.create_obj_from_config)": [[92, "neural_compressor.utils.create_obj_from_config.get_metrics"]], "get_postprocess() (in module neural_compressor.utils.create_obj_from_config)": [[92, "neural_compressor.utils.create_obj_from_config.get_postprocess"]], "get_preprocess() (in module neural_compressor.utils.create_obj_from_config)": [[92, "neural_compressor.utils.create_obj_from_config.get_preprocess"]], "neural_compressor.utils.create_obj_from_config": [[92, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils.export": [[93, "module-neural_compressor.utils.export"]], "check_model() (in module neural_compressor.utils.export.qlinear2qdq)": [[94, "neural_compressor.utils.export.qlinear2qdq.check_model"]], "neural_compressor.utils.export.qlinear2qdq": [[94, "module-neural_compressor.utils.export.qlinear2qdq"]], "onnx_qlinear_to_qdq() (in module neural_compressor.utils.export.qlinear2qdq)": [[94, "neural_compressor.utils.export.qlinear2qdq.onnx_qlinear_to_qdq"]], "neural_compressor.utils.export.tf2onnx": [[95, "module-neural_compressor.utils.export.tf2onnx"]], "tf_to_fp32_onnx() (in module neural_compressor.utils.export.tf2onnx)": [[95, "neural_compressor.utils.export.tf2onnx.tf_to_fp32_onnx"]], "tf_to_int8_onnx() (in module neural_compressor.utils.export.tf2onnx)": [[95, "neural_compressor.utils.export.tf2onnx.tf_to_int8_onnx"]], "dynamic_quant_export() (in module neural_compressor.utils.export.torch2onnx)": [[96, "neural_compressor.utils.export.torch2onnx.dynamic_quant_export"]], "get_node_mapping() (in module neural_compressor.utils.export.torch2onnx)": [[96, "neural_compressor.utils.export.torch2onnx.get_node_mapping"]], "get_quantizable_onnx_ops() (in module neural_compressor.utils.export.torch2onnx)": [[96, "neural_compressor.utils.export.torch2onnx.get_quantizable_onnx_ops"]], "neural_compressor.utils.export.torch2onnx": [[96, "module-neural_compressor.utils.export.torch2onnx"]], "static_quant_export() (in module neural_compressor.utils.export.torch2onnx)": [[96, "neural_compressor.utils.export.torch2onnx.static_quant_export"]], "torch_to_fp32_onnx() (in module neural_compressor.utils.export.torch2onnx)": [[96, "neural_compressor.utils.export.torch2onnx.torch_to_fp32_onnx"]], "torch_to_int8_onnx() (in module neural_compressor.utils.export.torch2onnx)": [[96, "neural_compressor.utils.export.torch2onnx.torch_to_int8_onnx"]], "neural_compressor.utils": [[97, "module-neural_compressor.utils"]], "kl_divergence (class in neural_compressor.utils.kl_divergence)": [[98, "neural_compressor.utils.kl_divergence.KL_Divergence"]], "neural_compressor.utils.kl_divergence": [[98, "module-neural_compressor.utils.kl_divergence"]], "optimizedmodel (class in neural_compressor.utils.load_huggingface)": [[99, "neural_compressor.utils.load_huggingface.OptimizedModel"]], "export_compressed_model() (in module neural_compressor.utils.load_huggingface)": [[99, "neural_compressor.utils.load_huggingface.export_compressed_model"]], "neural_compressor.utils.load_huggingface": [[99, "module-neural_compressor.utils.load_huggingface"]], "save_for_huggingface_upstream() (in module neural_compressor.utils.load_huggingface)": [[99, "neural_compressor.utils.load_huggingface.save_for_huggingface_upstream"]], "logger (class in neural_compressor.utils.logger)": [[100, "neural_compressor.utils.logger.Logger"]], "debug() (in module neural_compressor.utils.logger)": [[100, "neural_compressor.utils.logger.debug"]], "error() (in module neural_compressor.utils.logger)": [[100, "neural_compressor.utils.logger.error"]], "fatal() (in module neural_compressor.utils.logger)": [[100, "neural_compressor.utils.logger.fatal"]], "info() (in module neural_compressor.utils.logger)": [[100, "neural_compressor.utils.logger.info"]], "log() (in module neural_compressor.utils.logger)": [[100, "neural_compressor.utils.logger.log"]], "neural_compressor.utils.logger": [[100, "module-neural_compressor.utils.logger"]], "warn() (in module neural_compressor.utils.logger)": [[100, "neural_compressor.utils.logger.warn"]], "warning() (in module neural_compressor.utils.logger)": [[100, "neural_compressor.utils.logger.warning"]], "neural_compressor.utils.options": [[101, "module-neural_compressor.utils.options"]], "onnxrt (class in neural_compressor.utils.options)": [[101, "neural_compressor.utils.options.onnxrt"]], "is_int8_model() (in module neural_compressor.utils.pytorch)": [[102, "neural_compressor.utils.pytorch.is_int8_model"]], "load() (in module neural_compressor.utils.pytorch)": [[102, "neural_compressor.utils.pytorch.load"]], "load_weight_only() (in module neural_compressor.utils.pytorch)": [[102, "neural_compressor.utils.pytorch.load_weight_only"]], "neural_compressor.utils.pytorch": [[102, "module-neural_compressor.utils.pytorch"]], "recover_model_from_json() (in module neural_compressor.utils.pytorch)": [[102, "neural_compressor.utils.pytorch.recover_model_from_json"]], "captureoutputtofile (class in neural_compressor.utils.utility)": [[103, "neural_compressor.utils.utility.CaptureOutputToFile"]], "cpuinfo (class in neural_compressor.utils.utility)": [[103, "neural_compressor.utils.utility.CpuInfo"]], "dequantize() (in module neural_compressor.utils.utility)": [[103, "neural_compressor.utils.utility.Dequantize"]], "dotdict (class in neural_compressor.utils.utility)": [[103, "neural_compressor.utils.utility.DotDict"]], "global_state (class in neural_compressor.utils.utility)": [[103, "neural_compressor.utils.utility.GLOBAL_STATE"]], "lazyimport (class in neural_compressor.utils.utility)": [[103, "neural_compressor.utils.utility.LazyImport"]], "mode (class in neural_compressor.utils.utility)": [[103, "neural_compressor.utils.utility.MODE"]], "opentry (class in neural_compressor.utils.utility)": [[103, "neural_compressor.utils.utility.OpEntry"]], "statistics (class in neural_compressor.utils.utility)": [[103, "neural_compressor.utils.utility.Statistics"]], "alias_param() (in module neural_compressor.utils.utility)": [[103, "neural_compressor.utils.utility.alias_param"]], "calculate_mse() (in module neural_compressor.utils.utility)": [[103, "neural_compressor.utils.utility.calculate_mse"]], "check_key_exist() (in module neural_compressor.utils.utility)": [[103, "neural_compressor.utils.utility.check_key_exist"]], "combine_histogram() (in module neural_compressor.utils.utility)": [[103, "neural_compressor.utils.utility.combine_histogram"]], "compare_objects() (in module neural_compressor.utils.utility)": [[103, "neural_compressor.utils.utility.compare_objects"]], "compute_sparsity() (in module neural_compressor.utils.utility)": [[103, "neural_compressor.utils.utility.compute_sparsity"]], "deep_get() (in module neural_compressor.utils.utility)": [[103, "neural_compressor.utils.utility.deep_get"]], "deep_set() (in module neural_compressor.utils.utility)": [[103, "neural_compressor.utils.utility.deep_set"]], "dequantize_weight() (in module neural_compressor.utils.utility)": [[103, "neural_compressor.utils.utility.dequantize_weight"]], "dump_class_attrs() (in module neural_compressor.utils.utility)": [[103, "neural_compressor.utils.utility.dump_class_attrs"]], "dump_data_to_local() (in module neural_compressor.utils.utility)": [[103, "neural_compressor.utils.utility.dump_data_to_local"]], "dump_elapsed_time() (in module neural_compressor.utils.utility)": [[103, "neural_compressor.utils.utility.dump_elapsed_time"]], "dump_table() (in module neural_compressor.utils.utility)": [[103, "neural_compressor.utils.utility.dump_table"]], "dump_table_to_csv() (in module neural_compressor.utils.utility)": [[103, "neural_compressor.utils.utility.dump_table_to_csv"]], "equal_dicts() (in module neural_compressor.utils.utility)": [[103, "neural_compressor.utils.utility.equal_dicts"]], "fault_tolerant_file() (in module neural_compressor.utils.utility)": [[103, "neural_compressor.utils.utility.fault_tolerant_file"]], "get_all_fp32_data() (in module neural_compressor.utils.utility)": [[103, "neural_compressor.utils.utility.get_all_fp32_data"]], "get_number_of_sockets() (in module neural_compressor.utils.utility)": [[103, "neural_compressor.utils.utility.get_number_of_sockets"]], "get_op_list() (in module neural_compressor.utils.utility)": [[103, "neural_compressor.utils.utility.get_op_list"]], "get_size() (in module neural_compressor.utils.utility)": [[103, "neural_compressor.utils.utility.get_size"]], "get_tensor_histogram() (in module neural_compressor.utils.utility)": [[103, "neural_compressor.utils.utility.get_tensor_histogram"]], "get_tensors_info() (in module neural_compressor.utils.utility)": [[103, "neural_compressor.utils.utility.get_tensors_info"]], "get_tuning_history() (in module neural_compressor.utils.utility)": [[103, "neural_compressor.utils.utility.get_tuning_history"]], "get_weights_details() (in module neural_compressor.utils.utility)": [[103, "neural_compressor.utils.utility.get_weights_details"]], "load_data_from_pkl() (in module neural_compressor.utils.utility)": [[103, "neural_compressor.utils.utility.load_data_from_pkl"]], "mse_metric_gap() (in module neural_compressor.utils.utility)": [[103, "neural_compressor.utils.utility.mse_metric_gap"]], "neural_compressor.utils.utility": [[103, "module-neural_compressor.utils.utility"]], "print_op_list() (in module neural_compressor.utils.utility)": [[103, "neural_compressor.utils.utility.print_op_list"]], "print_table() (in module neural_compressor.utils.utility)": [[103, "neural_compressor.utils.utility.print_table"]], "recover() (in module neural_compressor.utils.utility)": [[103, "neural_compressor.utils.utility.recover"]], "set_random_seed() (in module neural_compressor.utils.utility)": [[103, "neural_compressor.utils.utility.set_random_seed"]], "set_resume_from() (in module neural_compressor.utils.utility)": [[103, "neural_compressor.utils.utility.set_resume_from"]], "set_tensorboard() (in module neural_compressor.utils.utility)": [[103, "neural_compressor.utils.utility.set_tensorboard"]], "set_workspace() (in module neural_compressor.utils.utility)": [[103, "neural_compressor.utils.utility.set_workspace"]], "show_memory_info() (in module neural_compressor.utils.utility)": [[103, "neural_compressor.utils.utility.show_memory_info"]], "singleton() (in module neural_compressor.utils.utility)": [[103, "neural_compressor.utils.utility.singleton"]], "str2array() (in module neural_compressor.utils.utility)": [[103, "neural_compressor.utils.utility.str2array"]], "time_limit() (in module neural_compressor.utils.utility)": [[103, "neural_compressor.utils.utility.time_limit"]], "version1_eq_version2() (in module neural_compressor.utils.utility)": [[103, "neural_compressor.utils.utility.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.utils.utility)": [[103, "neural_compressor.utils.utility.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.utils.utility)": [[103, "neural_compressor.utils.utility.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.utils.utility)": [[103, "neural_compressor.utils.utility.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.utils.utility)": [[103, "neural_compressor.utils.utility.version1_lte_version2"]], "weightsdetails (class in neural_compressor.utils.weights_details)": [[104, "neural_compressor.utils.weights_details.WeightsDetails"]], "weightsstatistics (class in neural_compressor.utils.weights_details)": [[104, "neural_compressor.utils.weights_details.WeightsStatistics"]], "neural_compressor.utils.weights_details": [[104, "module-neural_compressor.utils.weights_details"]], "neural_compressor.version": [[105, "module-neural_compressor.version"]]}})