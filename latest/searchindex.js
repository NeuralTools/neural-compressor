Search.setIndex({"docnames": ["autoapi/block_mask/index", "autoapi/neural_compressor/adaptor/adaptor/index", "autoapi/neural_compressor/adaptor/index", "autoapi/neural_compressor/adaptor/keras/index", "autoapi/neural_compressor/adaptor/keras_utils/conv2d/index", "autoapi/neural_compressor/adaptor/keras_utils/dense/index", "autoapi/neural_compressor/adaptor/keras_utils/depthwise_conv2d/index", "autoapi/neural_compressor/adaptor/keras_utils/index", "autoapi/neural_compressor/adaptor/keras_utils/pool2d/index", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index", "autoapi/neural_compressor/adaptor/keras_utils/separable_conv2d/index", "autoapi/neural_compressor/adaptor/mxnet/index", "autoapi/neural_compressor/adaptor/mxnet_utils/index", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index", "autoapi/neural_compressor/adaptor/onnxrt/index", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index", "autoapi/neural_compressor/adaptor/ox_utils/calibrator/index", "autoapi/neural_compressor/adaptor/ox_utils/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/norm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/reduce/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/unary_op/index", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index", "autoapi/neural_compressor/adaptor/ox_utils/smooth_quant/index", "autoapi/neural_compressor/adaptor/ox_utils/util/index", "autoapi/neural_compressor/adaptor/ox_utils/weight_only/index", "autoapi/neural_compressor/adaptor/pytorch/index", "autoapi/neural_compressor/adaptor/query/index", "autoapi/neural_compressor/adaptor/tensorflow/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/dequantize_cast_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_schema/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/tf2onnx_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index", "autoapi/neural_compressor/adaptor/tf_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_calibration/index", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_scaler/index", "autoapi/neural_compressor/adaptor/tf_utils/tf2onnx_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index", "autoapi/neural_compressor/adaptor/tf_utils/util/index", "autoapi/neural_compressor/adaptor/torch_utils/autoround/autoround/index", "autoapi/neural_compressor/adaptor/torch_utils/autoround/export/index", "autoapi/neural_compressor/adaptor/torch_utils/autoround/index", "autoapi/neural_compressor/adaptor/torch_utils/autoround/model_wrapper/index", "autoapi/neural_compressor/adaptor/torch_utils/autoround/sign_sgd/index", "autoapi/neural_compressor/adaptor/torch_utils/awq/index", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index", "autoapi/neural_compressor/adaptor/torch_utils/gptq/index", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index", "autoapi/neural_compressor/adaptor/torch_utils/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/modified_pickle/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/quantize/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/torch_load/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/utils/index", "autoapi/neural_compressor/adaptor/torch_utils/mixed_precision/index", "autoapi/neural_compressor/adaptor/torch_utils/model_wrapper/index", "autoapi/neural_compressor/adaptor/torch_utils/pattern_detector/index", "autoapi/neural_compressor/adaptor/torch_utils/smooth_quant/index", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index", "autoapi/neural_compressor/adaptor/torch_utils/teq/index", "autoapi/neural_compressor/adaptor/torch_utils/util/index", "autoapi/neural_compressor/adaptor/torch_utils/weight_only/index", "autoapi/neural_compressor/algorithm/algorithm/index", "autoapi/neural_compressor/algorithm/fast_bias_correction/index", "autoapi/neural_compressor/algorithm/index", "autoapi/neural_compressor/algorithm/smooth_quant/index", "autoapi/neural_compressor/algorithm/weight_correction/index", "autoapi/neural_compressor/benchmark/index", "autoapi/neural_compressor/common/base_config/index", "autoapi/neural_compressor/common/base_tuning/index", "autoapi/neural_compressor/common/index", "autoapi/neural_compressor/common/tuning_param/index", "autoapi/neural_compressor/common/utils/constants/index", "autoapi/neural_compressor/common/utils/index", "autoapi/neural_compressor/common/utils/logger/index", "autoapi/neural_compressor/common/utils/utility/index", "autoapi/neural_compressor/compression/callbacks/index", "autoapi/neural_compressor/compression/distillation/criterions/index", "autoapi/neural_compressor/compression/distillation/index", "autoapi/neural_compressor/compression/distillation/optimizers/index", "autoapi/neural_compressor/compression/distillation/utility/index", "autoapi/neural_compressor/compression/hpo/index", "autoapi/neural_compressor/compression/hpo/sa_optimizer/index", "autoapi/neural_compressor/compression/hpo/search_algorithms/index", "autoapi/neural_compressor/compression/hpo/search_space/index", "autoapi/neural_compressor/compression/index", "autoapi/neural_compressor/compression/pruner/criteria/index", "autoapi/neural_compressor/compression/pruner/dsnot/index", "autoapi/neural_compressor/compression/pruner/index", "autoapi/neural_compressor/compression/pruner/model_slim/auto_slim/index", "autoapi/neural_compressor/compression/pruner/model_slim/index", "autoapi/neural_compressor/compression/pruner/model_slim/pattern_analyzer/index", "autoapi/neural_compressor/compression/pruner/model_slim/weight_slim/index", "autoapi/neural_compressor/compression/pruner/patterns/base/index", "autoapi/neural_compressor/compression/pruner/patterns/index", "autoapi/neural_compressor/compression/pruner/patterns/mha/index", "autoapi/neural_compressor/compression/pruner/patterns/ninm/index", "autoapi/neural_compressor/compression/pruner/patterns/nxm/index", "autoapi/neural_compressor/compression/pruner/pruners/base/index", "autoapi/neural_compressor/compression/pruner/pruners/basic/index", "autoapi/neural_compressor/compression/pruner/pruners/block_mask/index", "autoapi/neural_compressor/compression/pruner/pruners/index", "autoapi/neural_compressor/compression/pruner/pruners/mha/index", "autoapi/neural_compressor/compression/pruner/pruners/pattern_lock/index", "autoapi/neural_compressor/compression/pruner/pruners/progressive/index", "autoapi/neural_compressor/compression/pruner/pruners/retrain_free/index", "autoapi/neural_compressor/compression/pruner/pruners/sparse_gpt/index", "autoapi/neural_compressor/compression/pruner/pruning/index", "autoapi/neural_compressor/compression/pruner/regs/index", "autoapi/neural_compressor/compression/pruner/schedulers/index", "autoapi/neural_compressor/compression/pruner/tf_criteria/index", "autoapi/neural_compressor/compression/pruner/utils/index", "autoapi/neural_compressor/compression/pruner/wanda/index", "autoapi/neural_compressor/compression/pruner/wanda/prune/index", "autoapi/neural_compressor/compression/pruner/wanda/utils/index", "autoapi/neural_compressor/compression/pruner/wanda/wrapper/index", "autoapi/neural_compressor/conf/config/index", "autoapi/neural_compressor/conf/dotdict/index", "autoapi/neural_compressor/conf/index", "autoapi/neural_compressor/conf/pythonic_config/index", "autoapi/neural_compressor/config/index", "autoapi/neural_compressor/contrib/index", "autoapi/neural_compressor/contrib/strategy/index", "autoapi/neural_compressor/contrib/strategy/sigopt/index", "autoapi/neural_compressor/contrib/strategy/tpe/index", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/data/dataloaders/dataloader/index", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/data/dataloaders/fetcher/index", "autoapi/neural_compressor/data/dataloaders/index", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/data/dataloaders/sampler/index", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/data/datasets/bert_dataset/index", "autoapi/neural_compressor/data/datasets/coco_dataset/index", "autoapi/neural_compressor/data/datasets/dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/data/datasets/index", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/data/filters/coco_filter/index", "autoapi/neural_compressor/data/filters/filter/index", "autoapi/neural_compressor/data/filters/index", "autoapi/neural_compressor/data/index", "autoapi/neural_compressor/data/transforms/coco_transform/index", "autoapi/neural_compressor/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/data/transforms/index", "autoapi/neural_compressor/data/transforms/postprocess/index", "autoapi/neural_compressor/data/transforms/tokenization/index", "autoapi/neural_compressor/data/transforms/transform/index", "autoapi/neural_compressor/experimental/benchmark/index", "autoapi/neural_compressor/experimental/common/criterion/index", "autoapi/neural_compressor/experimental/common/dataloader/index", "autoapi/neural_compressor/experimental/common/index", "autoapi/neural_compressor/experimental/common/metric/index", "autoapi/neural_compressor/experimental/common/model/index", "autoapi/neural_compressor/experimental/common/optimizer/index", "autoapi/neural_compressor/experimental/common/postprocess/index", "autoapi/neural_compressor/experimental/common/torch_utils/index", "autoapi/neural_compressor/experimental/component/index", "autoapi/neural_compressor/experimental/compression/index", "autoapi/neural_compressor/experimental/contrib/index", "autoapi/neural_compressor/experimental/contrib/strategy/index", "autoapi/neural_compressor/experimental/contrib/strategy/sigopt/index", "autoapi/neural_compressor/experimental/contrib/strategy/tpe/index", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index", "autoapi/neural_compressor/experimental/data/dataloaders/index", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/index", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index", "autoapi/neural_compressor/experimental/data/filters/filter/index", "autoapi/neural_compressor/experimental/data/filters/index", "autoapi/neural_compressor/experimental/data/index", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/experimental/data/transforms/index", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index", "autoapi/neural_compressor/experimental/data/transforms/transform/index", "autoapi/neural_compressor/experimental/distillation/index", "autoapi/neural_compressor/experimental/export/index", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index", "autoapi/neural_compressor/experimental/export/tf2onnx/index", "autoapi/neural_compressor/experimental/export/torch2onnx/index", "autoapi/neural_compressor/experimental/graph_optimization/index", "autoapi/neural_compressor/experimental/index", "autoapi/neural_compressor/experimental/metric/bleu/index", "autoapi/neural_compressor/experimental/metric/bleu_util/index", "autoapi/neural_compressor/experimental/metric/coco_label_map/index", "autoapi/neural_compressor/experimental/metric/coco_tools/index", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index", "autoapi/neural_compressor/experimental/metric/f1/index", "autoapi/neural_compressor/experimental/metric/index", "autoapi/neural_compressor/experimental/metric/metric/index", "autoapi/neural_compressor/experimental/mixed_precision/index", "autoapi/neural_compressor/experimental/model_conversion/index", "autoapi/neural_compressor/experimental/nas/basic_nas/index", "autoapi/neural_compressor/experimental/nas/dynas/index", "autoapi/neural_compressor/experimental/nas/index", "autoapi/neural_compressor/experimental/nas/nas/index", "autoapi/neural_compressor/experimental/nas/nas_utils/index", "autoapi/neural_compressor/experimental/nas/search_algorithms/index", "autoapi/neural_compressor/experimental/pruner_legacy/gradient_sensitivity/index", "autoapi/neural_compressor/experimental/pruner_legacy/group_lasso/index", "autoapi/neural_compressor/experimental/pruner_legacy/index", "autoapi/neural_compressor/experimental/pruner_legacy/magnitude/index", "autoapi/neural_compressor/experimental/pruner_legacy/pattern_lock/index", "autoapi/neural_compressor/experimental/pruner_legacy/pruner/index", "autoapi/neural_compressor/experimental/pruning/index", "autoapi/neural_compressor/experimental/pruning_recipes/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index", "autoapi/neural_compressor/experimental/pruning_v2/index", "autoapi/neural_compressor/experimental/pytorch_pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index", "autoapi/neural_compressor/experimental/quantization/index", "autoapi/neural_compressor/experimental/scheduler/index", "autoapi/neural_compressor/experimental/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/experimental/strategy/basic/index", "autoapi/neural_compressor/experimental/strategy/bayesian/index", "autoapi/neural_compressor/experimental/strategy/exhaustive/index", "autoapi/neural_compressor/experimental/strategy/index", "autoapi/neural_compressor/experimental/strategy/mse/index", "autoapi/neural_compressor/experimental/strategy/mse_v2/index", "autoapi/neural_compressor/experimental/strategy/random/index", "autoapi/neural_compressor/experimental/strategy/strategy/index", "autoapi/neural_compressor/experimental/strategy/utils/constant/index", "autoapi/neural_compressor/experimental/strategy/utils/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_space/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/experimental/strategy/utils/utility/index", "autoapi/neural_compressor/index", "autoapi/neural_compressor/metric/bleu/index", "autoapi/neural_compressor/metric/bleu_util/index", "autoapi/neural_compressor/metric/coco_label_map/index", "autoapi/neural_compressor/metric/coco_tools/index", "autoapi/neural_compressor/metric/evaluate_squad/index", "autoapi/neural_compressor/metric/f1/index", "autoapi/neural_compressor/metric/index", "autoapi/neural_compressor/metric/metric/index", "autoapi/neural_compressor/mix_precision/index", "autoapi/neural_compressor/model/base_model/index", "autoapi/neural_compressor/model/index", "autoapi/neural_compressor/model/keras_model/index", "autoapi/neural_compressor/model/model/index", "autoapi/neural_compressor/model/mxnet_model/index", "autoapi/neural_compressor/model/nets_factory/index", "autoapi/neural_compressor/model/onnx_model/index", "autoapi/neural_compressor/model/tensorflow_model/index", "autoapi/neural_compressor/model/torch_model/index", "autoapi/neural_compressor/objective/index", "autoapi/neural_compressor/onnxrt/algorithms/index", "autoapi/neural_compressor/onnxrt/algorithms/smoother/calibrator/index", "autoapi/neural_compressor/onnxrt/algorithms/smoother/core/index", "autoapi/neural_compressor/onnxrt/algorithms/smoother/index", "autoapi/neural_compressor/onnxrt/algorithms/weight_only/awq/index", "autoapi/neural_compressor/onnxrt/algorithms/weight_only/gptq/index", "autoapi/neural_compressor/onnxrt/algorithms/weight_only/index", "autoapi/neural_compressor/onnxrt/algorithms/weight_only/rtn/index", "autoapi/neural_compressor/onnxrt/algorithms/weight_only/utility/index", "autoapi/neural_compressor/onnxrt/index", "autoapi/neural_compressor/onnxrt/quantization/algorithm_entry/index", "autoapi/neural_compressor/onnxrt/quantization/autotune/index", "autoapi/neural_compressor/onnxrt/quantization/calibrate/index", "autoapi/neural_compressor/onnxrt/quantization/config/index", "autoapi/neural_compressor/onnxrt/quantization/index", "autoapi/neural_compressor/onnxrt/quantization/quantize/index", "autoapi/neural_compressor/onnxrt/utils/index", "autoapi/neural_compressor/onnxrt/utils/onnx_model/index", "autoapi/neural_compressor/onnxrt/utils/utility/index", "autoapi/neural_compressor/profiling/index", "autoapi/neural_compressor/profiling/parser/factory/index", "autoapi/neural_compressor/profiling/parser/index", "autoapi/neural_compressor/profiling/parser/onnx_parser/factory/index", "autoapi/neural_compressor/profiling/parser/onnx_parser/index", "autoapi/neural_compressor/profiling/parser/onnx_parser/parser/index", "autoapi/neural_compressor/profiling/parser/parser/index", "autoapi/neural_compressor/profiling/parser/result/index", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/factory/index", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/index", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/parser/index", "autoapi/neural_compressor/profiling/profiler/factory/index", "autoapi/neural_compressor/profiling/profiler/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/factory/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/profiler/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/utils/index", "autoapi/neural_compressor/profiling/profiler/profiler/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/factory/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/profiler/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/utils/index", "autoapi/neural_compressor/quantization/index", "autoapi/neural_compressor/strategy/auto/index", "autoapi/neural_compressor/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/strategy/basic/index", "autoapi/neural_compressor/strategy/bayesian/index", "autoapi/neural_compressor/strategy/conservative/index", "autoapi/neural_compressor/strategy/exhaustive/index", "autoapi/neural_compressor/strategy/hawq_v2/index", "autoapi/neural_compressor/strategy/index", "autoapi/neural_compressor/strategy/mse/index", "autoapi/neural_compressor/strategy/mse_v2/index", "autoapi/neural_compressor/strategy/random/index", "autoapi/neural_compressor/strategy/strategy/index", "autoapi/neural_compressor/strategy/utils/constant/index", "autoapi/neural_compressor/strategy/utils/index", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/strategy/utils/tuning_space/index", "autoapi/neural_compressor/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/strategy/utils/utility/index", "autoapi/neural_compressor/template/api_doc_example/index", "autoapi/neural_compressor/template/index", "autoapi/neural_compressor/tensorflow/algorithms/index", "autoapi/neural_compressor/tensorflow/algorithms/smoother/calibration/index", "autoapi/neural_compressor/tensorflow/algorithms/smoother/core/index", "autoapi/neural_compressor/tensorflow/algorithms/smoother/index", "autoapi/neural_compressor/tensorflow/algorithms/smoother/scaler/index", "autoapi/neural_compressor/tensorflow/algorithms/static_quant/index", "autoapi/neural_compressor/tensorflow/algorithms/static_quant/keras/index", "autoapi/neural_compressor/tensorflow/algorithms/static_quant/tensorflow/index", "autoapi/neural_compressor/tensorflow/index", "autoapi/neural_compressor/tensorflow/keras/index", "autoapi/neural_compressor/tensorflow/keras/layers/conv2d/index", "autoapi/neural_compressor/tensorflow/keras/layers/dense/index", "autoapi/neural_compressor/tensorflow/keras/layers/depthwise_conv2d/index", "autoapi/neural_compressor/tensorflow/keras/layers/index", "autoapi/neural_compressor/tensorflow/keras/layers/pool2d/index", "autoapi/neural_compressor/tensorflow/keras/layers/quantizer/index", "autoapi/neural_compressor/tensorflow/keras/layers/separable_conv2d/index", "autoapi/neural_compressor/tensorflow/keras/quantization/config/index", "autoapi/neural_compressor/tensorflow/keras/quantization/index", "autoapi/neural_compressor/tensorflow/quantization/algorithm_entry/index", "autoapi/neural_compressor/tensorflow/quantization/autotune/index", "autoapi/neural_compressor/tensorflow/quantization/config/index", "autoapi/neural_compressor/tensorflow/quantization/index", "autoapi/neural_compressor/tensorflow/quantization/quantize/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_converter/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_converter_without_calib/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/bf16/bf16_convert/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/bf16/dequantize_cast_optimizer/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/bf16/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_add_to_biasadd/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_layout/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_leakyrelu/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_nan_to_random/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_placeholder_to_const/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/dilated_contraction/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/dummy_biasadd/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/expanddims_optimizer/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fetch_weight_from_reshape/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fold_batch_norm/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fold_constant/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_biasadd_add/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_column_wise_mul/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_conv_with_math/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_decomposed_bn/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_decomposed_in/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_gelu/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_layer_norm/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_pad_with_conv/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_reshape_transpose/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/graph_cse_optimizer/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/grappler_pass/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/insert_print_node/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/move_squeeze_after_relu/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/pre_optimize/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/remove_training_nodes/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/rename_batch_norm/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/split_shared_input/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/strip_equivalent_nodes/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/strip_unused_nodes/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/switch_optimizer/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/graph_base/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/freeze_fake_quant/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/freeze_value/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/freeze_value_without_calib/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/fuse_conv_requantize/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/fuse_matmul_requantize/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/meta_op_optimizer/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/post_hostconst_converter/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/post_quantized_op_cse/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/rnn_convert/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/scale_propagation/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/qdq/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/qdq/insert_qdq_pattern/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/qdq/merge_duplicated_qdq/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/qdq/share_qdq_y_pattern/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_util/index", "autoapi/neural_compressor/tensorflow/quantization/utils/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/fake_quantize/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_config/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_helper/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_layers/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_layers/optimize_layer/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_wrapper/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_bn/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_concatv2/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_conv/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_deconv/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_in/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_matmul/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_pooling/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/optimize_qdq/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_base/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_bn/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_concatv2/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_conv/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_for_intel_cpu/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_matmul/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_pooling/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph_common/index", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/bias_correction/index", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/graph_transform_base/index", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/index", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/insert_logging/index", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/rerange_quantized_concat/index", "autoapi/neural_compressor/tensorflow/quantization/utils/utility/index", "autoapi/neural_compressor/tensorflow/utils/constants/index", "autoapi/neural_compressor/tensorflow/utils/data/index", "autoapi/neural_compressor/tensorflow/utils/index", "autoapi/neural_compressor/tensorflow/utils/model/index", "autoapi/neural_compressor/tensorflow/utils/model_wrappers/index", "autoapi/neural_compressor/tensorflow/utils/nets_factory/index", "autoapi/neural_compressor/tensorflow/utils/utility/index", "autoapi/neural_compressor/torch/algorithms/habana_fp8/fp8_quant/index", "autoapi/neural_compressor/torch/algorithms/habana_fp8/index", "autoapi/neural_compressor/torch/algorithms/habana_fp8/modules/index", "autoapi/neural_compressor/torch/algorithms/habana_fp8/observer/index", "autoapi/neural_compressor/torch/algorithms/index", "autoapi/neural_compressor/torch/algorithms/layer_wise/index", "autoapi/neural_compressor/torch/algorithms/layer_wise/load/index", "autoapi/neural_compressor/torch/algorithms/layer_wise/modified_pickle/index", "autoapi/neural_compressor/torch/algorithms/layer_wise/utils/index", "autoapi/neural_compressor/torch/algorithms/static_quant/index", "autoapi/neural_compressor/torch/algorithms/static_quant/static_quant/index", "autoapi/neural_compressor/torch/algorithms/static_quant/utility/index", "autoapi/neural_compressor/torch/algorithms/weight_only/awq/index", "autoapi/neural_compressor/torch/algorithms/weight_only/gptq/index", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/auto_accelerator/index", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/bitpack/index", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/config/index", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/core/index", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/index", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/optimizer/index", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/qtensor/index", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/quant_api/index", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/quantizer/index", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/utility/index", "autoapi/neural_compressor/torch/algorithms/weight_only/index", "autoapi/neural_compressor/torch/algorithms/weight_only/modules/index", "autoapi/neural_compressor/torch/algorithms/weight_only/rtn/index", "autoapi/neural_compressor/torch/algorithms/weight_only/teq/index", "autoapi/neural_compressor/torch/algorithms/weight_only/utility/index", "autoapi/neural_compressor/torch/amp/autocast/index", "autoapi/neural_compressor/torch/amp/fp8/functions/index", "autoapi/neural_compressor/torch/amp/fp8/index", "autoapi/neural_compressor/torch/amp/index", "autoapi/neural_compressor/torch/index", "autoapi/neural_compressor/torch/quantization/algorithm_entry/index", "autoapi/neural_compressor/torch/quantization/autotune/index", "autoapi/neural_compressor/torch/quantization/config/index", "autoapi/neural_compressor/torch/quantization/index", "autoapi/neural_compressor/torch/quantization/modules/index", "autoapi/neural_compressor/torch/quantization/quantize/index", "autoapi/neural_compressor/torch/utils/constants/index", "autoapi/neural_compressor/torch/utils/environ/index", "autoapi/neural_compressor/torch/utils/index", "autoapi/neural_compressor/torch/utils/utility/index", "autoapi/neural_compressor/training/index", "autoapi/neural_compressor/utils/collect_layer_histogram/index", "autoapi/neural_compressor/utils/constant/index", "autoapi/neural_compressor/utils/create_obj_from_config/index", "autoapi/neural_compressor/utils/index", "autoapi/neural_compressor/utils/kl_divergence/index", "autoapi/neural_compressor/utils/load_huggingface/index", "autoapi/neural_compressor/utils/logger/index", "autoapi/neural_compressor/utils/neural_insights_utils/index", "autoapi/neural_compressor/utils/options/index", "autoapi/neural_compressor/utils/pytorch/index", "autoapi/neural_compressor/utils/utility/index", "autoapi/neural_compressor/utils/weights_details/index", "autoapi/neural_compressor/version/index", "docs/build_docs/source/index", "docs/source/CODE_OF_CONDUCT", "docs/source/CONTRIBUTING", "docs/source/FX", "docs/source/NAS", "docs/source/SECURITY", "docs/source/Welcome", "docs/source/adaptor", "docs/source/add_new_adaptor", "docs/source/add_new_data_type", "docs/source/api-doc/adaptor", "docs/source/api-doc/adaptor/onnxrt", "docs/source/api-doc/adaptor/torch_utils", "docs/source/api-doc/api_doc_example", "docs/source/api-doc/apis", "docs/source/api-doc/benchmark", "docs/source/api-doc/compression", "docs/source/api-doc/config", "docs/source/api-doc/mix_precision", "docs/source/api-doc/model", "docs/source/api-doc/objective", "docs/source/api-doc/quantization", "docs/source/api-doc/strategy", "docs/source/api-doc/training", "docs/source/benchmark", "docs/source/calibration", "docs/source/coding_style", "docs/source/dataloader", "docs/source/dataset", "docs/source/design", "docs/source/diagnosis", "docs/source/distillation", "docs/source/distillation_quantization", "docs/source/distributed", "docs/source/examples_readme", "docs/source/export", "docs/source/faq", "docs/source/framework_yaml", "docs/source/get_started", "docs/source/incompatible_changes", "docs/source/infrastructure", "docs/source/installation_guide", "docs/source/legal_information", "docs/source/llm_recipes", "docs/source/metric", "docs/source/migration", "docs/source/mixed_precision", "docs/source/model", "docs/source/neural_coder/README", "docs/source/neural_coder/docs/AWSSageMakerSupport", "docs/source/neural_coder/docs/BigDLNanoSupport", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting", "docs/source/neural_coder/docs/PythonAPI", "docs/source/neural_coder/docs/PythonLauncher", "docs/source/neural_coder/docs/Quantization", "docs/source/neural_coder/docs/SupportMatrix", "docs/source/neural_coder/docs/release_notes/v0.4", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart", "docs/source/neural_insights/README", "docs/source/neural_insights/docs/source/onnx_accuracy_debug", "docs/source/neural_insights/docs/source/pytorch_nlp_cli_mode", "docs/source/neural_insights/docs/source/tf_accuracy_debug", "docs/source/neural_insights/gui/README", "docs/source/neural_solution/README", "docs/source/neural_solution/docs/source/README", "docs/source/neural_solution/docs/source/description_api", "docs/source/neural_solution/docs/source/ns_design_doc", "docs/source/neural_solution/docs/source/template/task_request_description", "docs/source/neural_solution/examples/README", "docs/source/neural_solution/examples/custom_models_optimized/tf_example1/README", "docs/source/neural_solution/examples/hf_models/README", "docs/source/neural_solution/examples/hf_models_grpc/README", "docs/source/neural_solution/frontend/README", "docs/source/objective", "docs/source/orchestration", "docs/source/pruning", "docs/source/publication_list", "docs/source/pythonic_style", "docs/source/quantization", "docs/source/quantization_layer_wise", "docs/source/quantization_mixed_precision", "docs/source/quantization_weight_only", "docs/source/releases_info", "docs/source/sigopt_strategy", "docs/source/smooth_quant", "docs/source/tensorboard", "docs/source/transform", "docs/source/tuning_strategies", "docs/source/user_guide", "docs/source/user_yaml", "docs/source/validated_model_list", "index"], "filenames": ["autoapi/block_mask/index.rst", "autoapi/neural_compressor/adaptor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/keras/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/conv2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/dense/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/depthwise_conv2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/pool2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/separable_conv2d/index.rst", "autoapi/neural_compressor/adaptor/mxnet/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index.rst", "autoapi/neural_compressor/adaptor/onnxrt/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibrator/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/norm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/reduce/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/unary_op/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/smooth_quant/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/util/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/weight_only/index.rst", "autoapi/neural_compressor/adaptor/pytorch/index.rst", "autoapi/neural_compressor/adaptor/query/index.rst", "autoapi/neural_compressor/adaptor/tensorflow/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/dequantize_cast_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_schema/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/tf2onnx_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_calibration/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_scaler/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/tf2onnx_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/util/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/autoround/autoround/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/autoround/export/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/autoround/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/autoround/model_wrapper/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/autoround/sign_sgd/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/awq/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/gptq/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/modified_pickle/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/quantize/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/torch_load/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/utils/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/mixed_precision/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/model_wrapper/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/pattern_detector/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/smooth_quant/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/teq/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/util/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/weight_only/index.rst", "autoapi/neural_compressor/algorithm/algorithm/index.rst", "autoapi/neural_compressor/algorithm/fast_bias_correction/index.rst", "autoapi/neural_compressor/algorithm/index.rst", "autoapi/neural_compressor/algorithm/smooth_quant/index.rst", "autoapi/neural_compressor/algorithm/weight_correction/index.rst", "autoapi/neural_compressor/benchmark/index.rst", "autoapi/neural_compressor/common/base_config/index.rst", "autoapi/neural_compressor/common/base_tuning/index.rst", "autoapi/neural_compressor/common/index.rst", "autoapi/neural_compressor/common/tuning_param/index.rst", "autoapi/neural_compressor/common/utils/constants/index.rst", "autoapi/neural_compressor/common/utils/index.rst", "autoapi/neural_compressor/common/utils/logger/index.rst", "autoapi/neural_compressor/common/utils/utility/index.rst", "autoapi/neural_compressor/compression/callbacks/index.rst", "autoapi/neural_compressor/compression/distillation/criterions/index.rst", "autoapi/neural_compressor/compression/distillation/index.rst", "autoapi/neural_compressor/compression/distillation/optimizers/index.rst", "autoapi/neural_compressor/compression/distillation/utility/index.rst", "autoapi/neural_compressor/compression/hpo/index.rst", "autoapi/neural_compressor/compression/hpo/sa_optimizer/index.rst", "autoapi/neural_compressor/compression/hpo/search_algorithms/index.rst", "autoapi/neural_compressor/compression/hpo/search_space/index.rst", "autoapi/neural_compressor/compression/index.rst", "autoapi/neural_compressor/compression/pruner/criteria/index.rst", "autoapi/neural_compressor/compression/pruner/dsnot/index.rst", "autoapi/neural_compressor/compression/pruner/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/auto_slim/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/pattern_analyzer/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/weight_slim/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/base/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/mha/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/ninm/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/nxm/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/base/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/basic/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/block_mask/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/mha/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/pattern_lock/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/progressive/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/retrain_free/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/sparse_gpt/index.rst", "autoapi/neural_compressor/compression/pruner/pruning/index.rst", "autoapi/neural_compressor/compression/pruner/regs/index.rst", "autoapi/neural_compressor/compression/pruner/schedulers/index.rst", "autoapi/neural_compressor/compression/pruner/tf_criteria/index.rst", "autoapi/neural_compressor/compression/pruner/utils/index.rst", "autoapi/neural_compressor/compression/pruner/wanda/index.rst", "autoapi/neural_compressor/compression/pruner/wanda/prune/index.rst", "autoapi/neural_compressor/compression/pruner/wanda/utils/index.rst", "autoapi/neural_compressor/compression/pruner/wanda/wrapper/index.rst", "autoapi/neural_compressor/conf/config/index.rst", "autoapi/neural_compressor/conf/dotdict/index.rst", "autoapi/neural_compressor/conf/index.rst", "autoapi/neural_compressor/conf/pythonic_config/index.rst", "autoapi/neural_compressor/config/index.rst", "autoapi/neural_compressor/contrib/index.rst", "autoapi/neural_compressor/contrib/strategy/index.rst", "autoapi/neural_compressor/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/data/dataloaders/index.rst", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/data/datasets/index.rst", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/data/filters/filter/index.rst", "autoapi/neural_compressor/data/filters/index.rst", "autoapi/neural_compressor/data/index.rst", "autoapi/neural_compressor/data/transforms/coco_transform/index.rst", "autoapi/neural_compressor/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/data/transforms/index.rst", "autoapi/neural_compressor/data/transforms/postprocess/index.rst", "autoapi/neural_compressor/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/benchmark/index.rst", "autoapi/neural_compressor/experimental/common/criterion/index.rst", "autoapi/neural_compressor/experimental/common/dataloader/index.rst", "autoapi/neural_compressor/experimental/common/index.rst", "autoapi/neural_compressor/experimental/common/metric/index.rst", "autoapi/neural_compressor/experimental/common/model/index.rst", "autoapi/neural_compressor/experimental/common/optimizer/index.rst", "autoapi/neural_compressor/experimental/common/postprocess/index.rst", "autoapi/neural_compressor/experimental/common/torch_utils/index.rst", "autoapi/neural_compressor/experimental/component/index.rst", "autoapi/neural_compressor/experimental/compression/index.rst", "autoapi/neural_compressor/experimental/contrib/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/index.rst", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/index.rst", "autoapi/neural_compressor/experimental/data/index.rst", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/experimental/data/transforms/index.rst", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/experimental/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/distillation/index.rst", "autoapi/neural_compressor/experimental/export/index.rst", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index.rst", "autoapi/neural_compressor/experimental/export/tf2onnx/index.rst", "autoapi/neural_compressor/experimental/export/torch2onnx/index.rst", "autoapi/neural_compressor/experimental/graph_optimization/index.rst", "autoapi/neural_compressor/experimental/index.rst", "autoapi/neural_compressor/experimental/metric/bleu/index.rst", "autoapi/neural_compressor/experimental/metric/bleu_util/index.rst", "autoapi/neural_compressor/experimental/metric/coco_label_map/index.rst", "autoapi/neural_compressor/experimental/metric/coco_tools/index.rst", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/experimental/metric/f1/index.rst", "autoapi/neural_compressor/experimental/metric/index.rst", "autoapi/neural_compressor/experimental/metric/metric/index.rst", "autoapi/neural_compressor/experimental/mixed_precision/index.rst", "autoapi/neural_compressor/experimental/model_conversion/index.rst", "autoapi/neural_compressor/experimental/nas/basic_nas/index.rst", "autoapi/neural_compressor/experimental/nas/dynas/index.rst", "autoapi/neural_compressor/experimental/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas_utils/index.rst", "autoapi/neural_compressor/experimental/nas/search_algorithms/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/gradient_sensitivity/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/group_lasso/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/magnitude/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/pattern_lock/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/pruner/index.rst", "autoapi/neural_compressor/experimental/pruning/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_v2/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index.rst", "autoapi/neural_compressor/experimental/quantization/index.rst", "autoapi/neural_compressor/experimental/scheduler/index.rst", "autoapi/neural_compressor/experimental/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/experimental/strategy/basic/index.rst", "autoapi/neural_compressor/experimental/strategy/bayesian/index.rst", "autoapi/neural_compressor/experimental/strategy/exhaustive/index.rst", "autoapi/neural_compressor/experimental/strategy/index.rst", "autoapi/neural_compressor/experimental/strategy/mse/index.rst", "autoapi/neural_compressor/experimental/strategy/mse_v2/index.rst", "autoapi/neural_compressor/experimental/strategy/random/index.rst", "autoapi/neural_compressor/experimental/strategy/strategy/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/constant/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/utility/index.rst", "autoapi/neural_compressor/index.rst", "autoapi/neural_compressor/metric/bleu/index.rst", "autoapi/neural_compressor/metric/bleu_util/index.rst", "autoapi/neural_compressor/metric/coco_label_map/index.rst", "autoapi/neural_compressor/metric/coco_tools/index.rst", "autoapi/neural_compressor/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/metric/f1/index.rst", "autoapi/neural_compressor/metric/index.rst", "autoapi/neural_compressor/metric/metric/index.rst", "autoapi/neural_compressor/mix_precision/index.rst", "autoapi/neural_compressor/model/base_model/index.rst", "autoapi/neural_compressor/model/index.rst", "autoapi/neural_compressor/model/keras_model/index.rst", "autoapi/neural_compressor/model/model/index.rst", "autoapi/neural_compressor/model/mxnet_model/index.rst", "autoapi/neural_compressor/model/nets_factory/index.rst", "autoapi/neural_compressor/model/onnx_model/index.rst", "autoapi/neural_compressor/model/tensorflow_model/index.rst", "autoapi/neural_compressor/model/torch_model/index.rst", "autoapi/neural_compressor/objective/index.rst", "autoapi/neural_compressor/onnxrt/algorithms/index.rst", "autoapi/neural_compressor/onnxrt/algorithms/smoother/calibrator/index.rst", "autoapi/neural_compressor/onnxrt/algorithms/smoother/core/index.rst", "autoapi/neural_compressor/onnxrt/algorithms/smoother/index.rst", "autoapi/neural_compressor/onnxrt/algorithms/weight_only/awq/index.rst", "autoapi/neural_compressor/onnxrt/algorithms/weight_only/gptq/index.rst", "autoapi/neural_compressor/onnxrt/algorithms/weight_only/index.rst", "autoapi/neural_compressor/onnxrt/algorithms/weight_only/rtn/index.rst", "autoapi/neural_compressor/onnxrt/algorithms/weight_only/utility/index.rst", "autoapi/neural_compressor/onnxrt/index.rst", "autoapi/neural_compressor/onnxrt/quantization/algorithm_entry/index.rst", "autoapi/neural_compressor/onnxrt/quantization/autotune/index.rst", "autoapi/neural_compressor/onnxrt/quantization/calibrate/index.rst", "autoapi/neural_compressor/onnxrt/quantization/config/index.rst", "autoapi/neural_compressor/onnxrt/quantization/index.rst", "autoapi/neural_compressor/onnxrt/quantization/quantize/index.rst", "autoapi/neural_compressor/onnxrt/utils/index.rst", "autoapi/neural_compressor/onnxrt/utils/onnx_model/index.rst", "autoapi/neural_compressor/onnxrt/utils/utility/index.rst", "autoapi/neural_compressor/profiling/index.rst", "autoapi/neural_compressor/profiling/parser/factory/index.rst", "autoapi/neural_compressor/profiling/parser/index.rst", "autoapi/neural_compressor/profiling/parser/onnx_parser/factory/index.rst", "autoapi/neural_compressor/profiling/parser/onnx_parser/index.rst", "autoapi/neural_compressor/profiling/parser/onnx_parser/parser/index.rst", "autoapi/neural_compressor/profiling/parser/parser/index.rst", "autoapi/neural_compressor/profiling/parser/result/index.rst", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/factory/index.rst", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/index.rst", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/parser/index.rst", "autoapi/neural_compressor/profiling/profiler/factory/index.rst", "autoapi/neural_compressor/profiling/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/factory/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/utils/index.rst", "autoapi/neural_compressor/profiling/profiler/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/factory/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/utils/index.rst", "autoapi/neural_compressor/quantization/index.rst", "autoapi/neural_compressor/strategy/auto/index.rst", "autoapi/neural_compressor/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/strategy/basic/index.rst", "autoapi/neural_compressor/strategy/bayesian/index.rst", "autoapi/neural_compressor/strategy/conservative/index.rst", "autoapi/neural_compressor/strategy/exhaustive/index.rst", "autoapi/neural_compressor/strategy/hawq_v2/index.rst", "autoapi/neural_compressor/strategy/index.rst", "autoapi/neural_compressor/strategy/mse/index.rst", "autoapi/neural_compressor/strategy/mse_v2/index.rst", "autoapi/neural_compressor/strategy/random/index.rst", "autoapi/neural_compressor/strategy/strategy/index.rst", "autoapi/neural_compressor/strategy/utils/constant/index.rst", "autoapi/neural_compressor/strategy/utils/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/strategy/utils/utility/index.rst", "autoapi/neural_compressor/template/api_doc_example/index.rst", "autoapi/neural_compressor/template/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/smoother/calibration/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/smoother/core/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/smoother/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/smoother/scaler/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/static_quant/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/static_quant/keras/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/static_quant/tensorflow/index.rst", "autoapi/neural_compressor/tensorflow/index.rst", "autoapi/neural_compressor/tensorflow/keras/index.rst", "autoapi/neural_compressor/tensorflow/keras/layers/conv2d/index.rst", "autoapi/neural_compressor/tensorflow/keras/layers/dense/index.rst", "autoapi/neural_compressor/tensorflow/keras/layers/depthwise_conv2d/index.rst", "autoapi/neural_compressor/tensorflow/keras/layers/index.rst", "autoapi/neural_compressor/tensorflow/keras/layers/pool2d/index.rst", "autoapi/neural_compressor/tensorflow/keras/layers/quantizer/index.rst", "autoapi/neural_compressor/tensorflow/keras/layers/separable_conv2d/index.rst", "autoapi/neural_compressor/tensorflow/keras/quantization/config/index.rst", "autoapi/neural_compressor/tensorflow/keras/quantization/index.rst", "autoapi/neural_compressor/tensorflow/quantization/algorithm_entry/index.rst", "autoapi/neural_compressor/tensorflow/quantization/autotune/index.rst", "autoapi/neural_compressor/tensorflow/quantization/config/index.rst", "autoapi/neural_compressor/tensorflow/quantization/index.rst", "autoapi/neural_compressor/tensorflow/quantization/quantize/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_converter/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_converter_without_calib/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/bf16/bf16_convert/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/bf16/dequantize_cast_optimizer/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/bf16/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_add_to_biasadd/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_layout/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_leakyrelu/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_nan_to_random/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_placeholder_to_const/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/dilated_contraction/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/dummy_biasadd/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/expanddims_optimizer/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fetch_weight_from_reshape/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fold_batch_norm/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fold_constant/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_biasadd_add/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_column_wise_mul/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_conv_with_math/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_decomposed_bn/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_decomposed_in/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_gelu/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_layer_norm/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_pad_with_conv/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_reshape_transpose/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/graph_cse_optimizer/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/grappler_pass/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/insert_print_node/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/move_squeeze_after_relu/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/pre_optimize/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/remove_training_nodes/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/rename_batch_norm/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/split_shared_input/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/strip_equivalent_nodes/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/strip_unused_nodes/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/switch_optimizer/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/graph_base/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/freeze_fake_quant/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/freeze_value/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/freeze_value_without_calib/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/fuse_conv_requantize/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/fuse_matmul_requantize/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/meta_op_optimizer/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/post_hostconst_converter/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/post_quantized_op_cse/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/rnn_convert/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/scale_propagation/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/qdq/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/qdq/insert_qdq_pattern/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/qdq/merge_duplicated_qdq/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/qdq/share_qdq_y_pattern/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_util/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/fake_quantize/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_config/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_helper/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_layers/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_layers/optimize_layer/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_wrapper/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_bn/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_concatv2/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_conv/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_deconv/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_in/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_matmul/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_pooling/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/optimize_qdq/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_base/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_bn/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_concatv2/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_conv/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_for_intel_cpu/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_matmul/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_pooling/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph_common/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/bias_correction/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/graph_transform_base/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/insert_logging/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/rerange_quantized_concat/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/utility/index.rst", "autoapi/neural_compressor/tensorflow/utils/constants/index.rst", "autoapi/neural_compressor/tensorflow/utils/data/index.rst", "autoapi/neural_compressor/tensorflow/utils/index.rst", "autoapi/neural_compressor/tensorflow/utils/model/index.rst", "autoapi/neural_compressor/tensorflow/utils/model_wrappers/index.rst", "autoapi/neural_compressor/tensorflow/utils/nets_factory/index.rst", "autoapi/neural_compressor/tensorflow/utils/utility/index.rst", "autoapi/neural_compressor/torch/algorithms/habana_fp8/fp8_quant/index.rst", "autoapi/neural_compressor/torch/algorithms/habana_fp8/index.rst", "autoapi/neural_compressor/torch/algorithms/habana_fp8/modules/index.rst", "autoapi/neural_compressor/torch/algorithms/habana_fp8/observer/index.rst", "autoapi/neural_compressor/torch/algorithms/index.rst", "autoapi/neural_compressor/torch/algorithms/layer_wise/index.rst", "autoapi/neural_compressor/torch/algorithms/layer_wise/load/index.rst", "autoapi/neural_compressor/torch/algorithms/layer_wise/modified_pickle/index.rst", "autoapi/neural_compressor/torch/algorithms/layer_wise/utils/index.rst", "autoapi/neural_compressor/torch/algorithms/static_quant/index.rst", "autoapi/neural_compressor/torch/algorithms/static_quant/static_quant/index.rst", "autoapi/neural_compressor/torch/algorithms/static_quant/utility/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/awq/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/gptq/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/auto_accelerator/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/bitpack/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/config/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/core/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/optimizer/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/qtensor/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/quant_api/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/quantizer/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/utility/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/modules/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/rtn/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/teq/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/utility/index.rst", "autoapi/neural_compressor/torch/amp/autocast/index.rst", "autoapi/neural_compressor/torch/amp/fp8/functions/index.rst", "autoapi/neural_compressor/torch/amp/fp8/index.rst", "autoapi/neural_compressor/torch/amp/index.rst", "autoapi/neural_compressor/torch/index.rst", "autoapi/neural_compressor/torch/quantization/algorithm_entry/index.rst", "autoapi/neural_compressor/torch/quantization/autotune/index.rst", "autoapi/neural_compressor/torch/quantization/config/index.rst", "autoapi/neural_compressor/torch/quantization/index.rst", "autoapi/neural_compressor/torch/quantization/modules/index.rst", "autoapi/neural_compressor/torch/quantization/quantize/index.rst", "autoapi/neural_compressor/torch/utils/constants/index.rst", "autoapi/neural_compressor/torch/utils/environ/index.rst", "autoapi/neural_compressor/torch/utils/index.rst", "autoapi/neural_compressor/torch/utils/utility/index.rst", "autoapi/neural_compressor/training/index.rst", "autoapi/neural_compressor/utils/collect_layer_histogram/index.rst", "autoapi/neural_compressor/utils/constant/index.rst", "autoapi/neural_compressor/utils/create_obj_from_config/index.rst", "autoapi/neural_compressor/utils/index.rst", "autoapi/neural_compressor/utils/kl_divergence/index.rst", "autoapi/neural_compressor/utils/load_huggingface/index.rst", "autoapi/neural_compressor/utils/logger/index.rst", "autoapi/neural_compressor/utils/neural_insights_utils/index.rst", "autoapi/neural_compressor/utils/options/index.rst", "autoapi/neural_compressor/utils/pytorch/index.rst", "autoapi/neural_compressor/utils/utility/index.rst", "autoapi/neural_compressor/utils/weights_details/index.rst", "autoapi/neural_compressor/version/index.rst", "docs/build_docs/source/index.rst", "docs/source/CODE_OF_CONDUCT.md", "docs/source/CONTRIBUTING.md", "docs/source/FX.md", "docs/source/NAS.md", "docs/source/SECURITY.md", "docs/source/Welcome.md", "docs/source/adaptor.md", "docs/source/add_new_adaptor.md", "docs/source/add_new_data_type.md", "docs/source/api-doc/adaptor.rst", "docs/source/api-doc/adaptor/onnxrt.rst", "docs/source/api-doc/adaptor/torch_utils.rst", "docs/source/api-doc/api_doc_example.rst", "docs/source/api-doc/apis.rst", "docs/source/api-doc/benchmark.rst", "docs/source/api-doc/compression.rst", "docs/source/api-doc/config.rst", "docs/source/api-doc/mix_precision.rst", "docs/source/api-doc/model.rst", "docs/source/api-doc/objective.rst", "docs/source/api-doc/quantization.rst", "docs/source/api-doc/strategy.rst", "docs/source/api-doc/training.rst", "docs/source/benchmark.md", "docs/source/calibration.md", "docs/source/coding_style.md", "docs/source/dataloader.md", "docs/source/dataset.md", "docs/source/design.md", "docs/source/diagnosis.md", "docs/source/distillation.md", "docs/source/distillation_quantization.md", "docs/source/distributed.md", "docs/source/examples_readme.md", "docs/source/export.md", "docs/source/faq.md", "docs/source/framework_yaml.md", "docs/source/get_started.md", "docs/source/incompatible_changes.md", "docs/source/infrastructure.md", "docs/source/installation_guide.md", "docs/source/legal_information.md", "docs/source/llm_recipes.md", "docs/source/metric.md", "docs/source/migration.md", "docs/source/mixed_precision.md", "docs/source/model.md", "docs/source/neural_coder/README.md", "docs/source/neural_coder/docs/AWSSageMakerSupport.md", "docs/source/neural_coder/docs/BigDLNanoSupport.md", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting.md", "docs/source/neural_coder/docs/PythonAPI.md", "docs/source/neural_coder/docs/PythonLauncher.md", "docs/source/neural_coder/docs/Quantization.md", "docs/source/neural_coder/docs/SupportMatrix.md", "docs/source/neural_coder/docs/release_notes/v0.4.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart.md", "docs/source/neural_insights/README.md", "docs/source/neural_insights/docs/source/onnx_accuracy_debug.md", "docs/source/neural_insights/docs/source/pytorch_nlp_cli_mode.md", "docs/source/neural_insights/docs/source/tf_accuracy_debug.md", "docs/source/neural_insights/gui/README.md", "docs/source/neural_solution/README.md", "docs/source/neural_solution/docs/source/README.md", "docs/source/neural_solution/docs/source/description_api.md", "docs/source/neural_solution/docs/source/ns_design_doc.md", "docs/source/neural_solution/docs/source/template/task_request_description.md", "docs/source/neural_solution/examples/README.md", "docs/source/neural_solution/examples/custom_models_optimized/tf_example1/README.md", "docs/source/neural_solution/examples/hf_models/README.md", "docs/source/neural_solution/examples/hf_models_grpc/README.md", "docs/source/neural_solution/frontend/README.md", "docs/source/objective.md", "docs/source/orchestration.md", "docs/source/pruning.md", "docs/source/publication_list.md", "docs/source/pythonic_style.md", "docs/source/quantization.md", "docs/source/quantization_layer_wise.md", "docs/source/quantization_mixed_precision.md", "docs/source/quantization_weight_only.md", "docs/source/releases_info.md", "docs/source/sigopt_strategy.md", "docs/source/smooth_quant.md", "docs/source/tensorboard.md", "docs/source/transform.md", "docs/source/tuning_strategies.md", "docs/source/user_guide.md", "docs/source/user_yaml.md", "docs/source/validated_model_list.md", "index.rst"], "titles": ["<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">block_mask</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.dense</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.depthwise_conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.pool2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.separable_conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.onnxrt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.calibration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.calibrator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.activation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.argmax</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.attention</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.binary_op</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.direct_q8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.embed_layernorm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gather</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gavgpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gemm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.lstm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.maxpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.ops</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.reduce</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.resize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.split</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.unary_op</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.weight_only</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.query</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph_common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.smooth_quant_calibration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.smooth_quant_scaler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.tf2onnx_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.insert_logging</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.autoround.autoround</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.autoround.export</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.autoround</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.autoround.model_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.autoround.sign_sgd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.awq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.gptq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.hawq_metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.layer_wise_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.layer_wise_quant.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.model_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.pattern_detector</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.symbolic_trace</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.teq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.weight_only</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.fast_bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.weight_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.common.base_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.common.base_tuning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.common.tuning_param</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.common.utils.constants</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.common.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.common.utils.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.common.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.callbacks</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation.criterions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation.optimizers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.hpo</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.hpo.sa_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.hpo.search_algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.hpo.search_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.criteria</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.dsnot</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.auto_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.pattern_analyzer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.weight_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns.base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns.mha</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns.ninm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns.nxm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.block_mask</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.mha</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.pattern_lock</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.progressive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.retrain_free</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.sparse_gpt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.regs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.schedulers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.tf_criteria</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.wanda</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.wanda.prune</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.wanda.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.wanda.wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.dotdict</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.pythonic_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.sigopt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.tpe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.coco_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.criterion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.component</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.compression</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib.strategy.sigopt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib.strategy.tpe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.distillation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.qlinear2qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.tf2onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.torch2onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.model_conversion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.basic_nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.search_algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.gradient_sensitivity</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.group_lasso</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.magnitude</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.pattern_lock</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.tile_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.prune_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.auto_mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.bayesian</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.exhaustive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.mse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.mse_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.tuning_sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.tuning_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.tuning_structs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.mix_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.base_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.keras_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.mxnet_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.nets_factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.onnx_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.tensorflow_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.torch_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.objective</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.algorithms.smoother.calibrator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.algorithms.smoother.core</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.algorithms.smoother</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.algorithms.weight_only.awq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.algorithms.weight_only.gptq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.algorithms.weight_only</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.algorithms.weight_only.rtn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.algorithms.weight_only.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.quantization.algorithm_entry</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.quantization.autotune</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.quantization.calibrate</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.quantization.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.quantization.quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.utils.onnx_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.onnx_parser.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.onnx_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.onnx_parser.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.tensorflow_parser.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.tensorflow_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.tensorflow_parser.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.auto</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.auto_mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.bayesian</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.conservative</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.exhaustive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.hawq_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_structs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.template.api_doc_example</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.template</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.smoother.calibration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.smoother.core</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.smoother</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.smoother.scaler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.static_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.static_quant.keras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.static_quant.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.keras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.keras.layers.conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.keras.layers.dense</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.keras.layers.depthwise_conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.keras.layers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.keras.layers.pool2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.keras.layers.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.keras.layers.separable_conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.keras.quantization.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.keras.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.algorithm_entry</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.autotune</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_converter_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.dequantize_cast_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_fake_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.meta_op_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_hostconst_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_quantized_op_cse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.rnn_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.scale_propagation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.insert_qdq_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.merge_duplicated_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.share_qdq_y_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.fake_quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.qat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_helper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.optimize_layer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_deconv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.optimize_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_for_intel_cpu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph_common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.transform_graph.bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.transform_graph.graph_transform_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.transform_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.transform_graph.insert_logging</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.transform_graph.rerange_quantized_concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.utils.constants</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.utils.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.utils.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.utils.model_wrappers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.utils.nets_factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.habana_fp8.fp8_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.habana_fp8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.habana_fp8.modules</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.habana_fp8.observer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.layer_wise</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.layer_wise.load</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.layer_wise.modified_pickle</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.layer_wise.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.static_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.static_quant.static_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.static_quant.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only.awq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only.gptq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only.hqq.auto_accelerator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only.hqq.bitpack</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only.hqq.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only.hqq.core</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only.hqq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only.hqq.optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only.hqq.qtensor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only.hqq.quant_api</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only.hqq.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only.hqq.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only.modules</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only.rtn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only.teq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.amp.autocast</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.amp.fp8.functions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.amp.fp8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.amp</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.quantization.algorithm_entry</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.quantization.autotune</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.quantization.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.quantization.modules</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.quantization.quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.utils.constants</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.utils.environ</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.training</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.collect_layer_histogram</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.create_obj_from_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.kl_divergence</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.load_huggingface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.neural_insights_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.options</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.weights_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.version</span></code>", "Intel\u00ae Neural Compressor Documentation", "Contributor Covenant Code of Conduct", "Contribution Guidelines", "FX", "Neural Architecture Search", "Security Policy", "Intel\u00ae Neural Compressor", "Adaptor", "How to Add An Adaptor", "How to Support New Data Type, Like Int4, with a Few Line Changes", "Adaptor", "ONNX Runtime", "Torch Utils", "API Document Example", "APIs", "Benchmark", "Compression", "Config", "Mix Precision", "Model", "Objective", "Quantization", "Strategy", "Training", "Benchmarking", "Calibration Algorithms in Quantization", "INC Coding Conventions", "DataLoader", "Dataset", "Design", "Diagnosis", "Distillation", "Distillation for Quantization", "Distributed Training and Inference (Evaluation)", "Examples", "Export", "Frequently Asked Questions", "Framework YAML Configuration Files", "Getting Started", "Incompatible changes between v1.2 and v1.1", "Infrastructure of Intel\u00ae Neural Compressor", "Installation", "Legal Information", "LLMs Quantization Recipes", "Metrics", "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X", "Mixed Precision", "Model", "Neural Coder", "AWS Amazon SageMaker Support", "BigDL Nano Support", "Intel CPU Platforms: Best Performance Setting", "Neural Coder as Python API", "Python Launcher", "Neural Coder for Quantization", "Supported Optimization Features", "v0.4", "Changelog", "neural_compressor_ext_lab", "Intel\u00ae Neural Compressor as JupyterLab Extension", "Making a new release of neural_compressor_ext_lab", "Changelog", "neural_compressor_ext_lab_alibaba", "Making a new release of neural_compressor_ext_lab_alibaba", "Change Log", "Neural Coder", "Welcome to your VS Code Extension", "Neural Insights", "Step by step example how to debug accuracy with Neural Insights", "Step by step example how to dump weights data for PyTorch model with Neural Insights", "Step by step example how to debug accuracy with Neural Insights", "Getting Started with Create React App", "What\u2019s Neural Solution?", "Get started", "Neural Solution API", "Design Doc for Optimization as a Service [WIP]", "Task request description", "Examples List", "An end-to-end example: quantize a custom model with Neural Solution", "An end-to-end example: quantize a Hugging Face model with Neural Solution", "An end-to-end example: quantize a Hugging Face model with Neural Solution gRPC API", "Client", "Objective", "Optimization Orchestration", "Pruning", "Full Publications/Events (79)", "Pythonic Style Access for Configurations", "Quantization", "Layer Wise Quantization (LWQ)", "Turn OFF Auto Mixed Precision during Quantization", "Weight Only Quantization (WOQ)", "Release", "SigOpt Strategy", "Smooth Quant", "TensorBoard", "Transform", "Tuning Strategies", "User Guide", "User YAML Configuration Files", "Validated Models", "Intel\u00ae Neural Compressor Documentation"], "terms": {"block": [0, 44, 149, 166, 170, 171, 196, 207, 210, 215, 221, 341, 382, 388, 391, 443, 580, 581, 597, 667, 709, 711, 717, 723], "mask": [0, 196, 203, 205, 208, 210, 214, 215, 245, 288, 314, 343, 367, 711, 726], "adaptor_registri": [1, 634], "cl": [1, 163, 172, 187, 189, 193, 194, 203, 208, 217, 218, 219, 247, 254, 262, 264, 269, 290, 297, 303, 325, 332, 336, 341, 343, 345, 356, 371, 382, 436, 568, 577, 624, 653], "sourc": [1, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 113, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 181, 184, 185, 186, 187, 189, 190, 193, 194, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 229, 230, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 276, 277, 278, 280, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 297, 300, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 330, 331, 332, 333, 336, 337, 338, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 371, 372, 373, 375, 376, 377, 378, 379, 380, 381, 382, 384, 385, 387, 388, 390, 391, 393, 394, 395, 396, 400, 401, 403, 405, 407, 408, 409, 410, 412, 413, 415, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 439, 440, 441, 442, 443, 446, 447, 449, 451, 452, 462, 464, 465, 466, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 523, 524, 525, 526, 529, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 559, 560, 561, 563, 565, 566, 567, 568, 575, 576, 577, 579, 580, 581, 582, 583, 585, 592, 594, 595, 596, 597, 598, 603, 604, 605, 608, 612, 613, 614, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 630, 633, 669, 672, 685, 687, 689, 690, 692, 712], "The": [1, 3, 11, 14, 16, 34, 54, 74, 113, 119, 121, 140, 148, 149, 150, 153, 162, 164, 170, 172, 177, 178, 179, 181, 185, 186, 187, 189, 193, 194, 196, 197, 201, 203, 205, 206, 208, 209, 210, 215, 216, 217, 218, 219, 220, 221, 226, 227, 229, 230, 233, 234, 235, 245, 246, 247, 248, 249, 253, 254, 262, 264, 267, 269, 272, 276, 277, 278, 288, 289, 290, 291, 292, 296, 297, 303, 304, 309, 311, 312, 313, 315, 316, 318, 320, 321, 322, 324, 325, 327, 328, 330, 331, 332, 333, 336, 338, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 360, 362, 364, 365, 366, 368, 369, 371, 372, 380, 382, 393, 394, 401, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 440, 442, 443, 446, 447, 451, 464, 465, 468, 475, 495, 529, 535, 537, 561, 563, 566, 568, 575, 580, 592, 598, 603, 604, 608, 612, 613, 614, 616, 618, 619, 623, 624, 625, 628, 630, 631, 634, 635, 636, 637, 639, 643, 646, 649, 651, 652, 653, 654, 655, 657, 658, 660, 662, 664, 666, 667, 668, 670, 671, 672, 673, 674, 677, 678, 680, 683, 685, 686, 687, 689, 690, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 705, 709, 710, 711, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726], "decor": [1, 16, 34, 67, 68, 70, 148, 172, 178, 185, 189, 193, 194, 203, 208, 217, 219, 262, 269, 303, 318, 325, 332, 336, 341, 343, 345, 356, 359, 371, 382, 401, 436, 488, 489, 491, 561, 568, 592, 598, 612, 624, 630, 631, 634, 723], "us": [1, 13, 16, 34, 42, 43, 44, 48, 49, 70, 103, 105, 116, 141, 149, 150, 153, 157, 162, 164, 170, 171, 177, 187, 189, 193, 194, 196, 201, 203, 208, 212, 213, 217, 219, 220, 223, 227, 229, 230, 233, 234, 243, 244, 245, 246, 247, 248, 249, 252, 261, 262, 263, 264, 269, 276, 277, 286, 287, 288, 289, 290, 291, 292, 295, 302, 303, 307, 308, 309, 311, 312, 314, 318, 319, 320, 325, 332, 333, 336, 338, 341, 343, 344, 345, 346, 347, 350, 353, 356, 359, 360, 364, 365, 367, 371, 382, 387, 388, 390, 391, 401, 418, 423, 424, 428, 431, 433, 436, 440, 442, 443, 449, 451, 452, 468, 469, 470, 491, 532, 563, 568, 575, 579, 580, 581, 583, 595, 597, 598, 608, 612, 613, 614, 615, 616, 617, 619, 624, 628, 629, 630, 631, 634, 635, 651, 652, 653, 655, 657, 658, 659, 660, 662, 664, 666, 668, 669, 672, 673, 674, 675, 676, 677, 679, 680, 683, 685, 687, 689, 690, 692, 694, 695, 696, 697, 698, 705, 706, 707, 709, 711, 712, 713, 714, 715, 716, 717, 718, 719, 721, 722, 723, 725, 726], "regist": [1, 16, 34, 160, 162, 172, 178, 187, 189, 193, 194, 196, 198, 203, 204, 208, 211, 217, 218, 219, 220, 247, 254, 262, 264, 269, 290, 297, 303, 318, 325, 332, 336, 341, 343, 345, 356, 359, 371, 382, 401, 436, 442, 462, 568, 575, 576, 583, 612, 621, 631, 634, 653, 655, 660, 671, 672, 693, 709, 720, 723], "all": [1, 13, 16, 34, 44, 45, 63, 97, 156, 162, 163, 170, 171, 172, 174, 177, 178, 186, 189, 194, 198, 203, 211, 221, 229, 230, 235, 236, 243, 247, 254, 262, 263, 269, 272, 278, 286, 290, 297, 303, 308, 311, 314, 316, 318, 325, 332, 336, 337, 341, 347, 356, 359, 364, 367, 369, 371, 373, 382, 436, 442, 462, 484, 518, 563, 566, 568, 575, 577, 580, 581, 582, 616, 624, 628, 629, 633, 634, 635, 636, 653, 654, 655, 660, 664, 668, 672, 675, 683, 686, 687, 690, 691, 692, 693, 694, 697, 698, 700, 701, 705, 706, 707, 710, 711, 712, 714, 716, 717, 720, 722, 723], "subclass": [1, 16, 34, 172, 189, 193, 194, 203, 208, 217, 219, 240, 244, 247, 254, 262, 269, 283, 287, 290, 297, 303, 318, 325, 332, 336, 341, 343, 345, 356, 359, 371, 382, 436, 634], "paramet": [1, 11, 13, 14, 16, 42, 43, 44, 45, 67, 68, 70, 86, 105, 116, 132, 140, 141, 148, 149, 150, 153, 155, 156, 157, 162, 163, 167, 168, 170, 171, 172, 177, 178, 179, 181, 185, 186, 187, 189, 191, 193, 194, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 224, 226, 227, 229, 230, 233, 234, 244, 245, 247, 254, 258, 262, 264, 269, 276, 277, 287, 288, 290, 297, 300, 303, 304, 306, 307, 308, 309, 311, 312, 314, 315, 316, 318, 320, 321, 322, 324, 325, 326, 327, 328, 330, 331, 332, 333, 336, 338, 341, 342, 343, 344, 345, 346, 350, 356, 360, 362, 364, 365, 367, 368, 369, 371, 372, 376, 380, 382, 387, 388, 390, 391, 394, 401, 418, 423, 424, 428, 436, 440, 442, 443, 446, 449, 464, 468, 488, 489, 491, 507, 532, 548, 561, 566, 568, 575, 577, 579, 580, 581, 582, 583, 592, 595, 597, 598, 608, 612, 613, 616, 619, 620, 621, 623, 624, 630, 635, 654, 655, 658, 660, 667, 671, 672, 686, 692, 693, 694, 695, 700, 705, 706, 711, 714, 715, 717, 719, 720, 722, 723, 725], "framework_specific_info": [1, 3, 11, 14, 45, 47, 451, 452, 634], "base": [1, 11, 13, 14, 16, 34, 46, 47, 86, 105, 116, 120, 122, 132, 144, 149, 153, 157, 160, 166, 170, 172, 178, 179, 186, 193, 194, 195, 196, 198, 204, 211, 218, 220, 230, 235, 238, 243, 245, 247, 254, 262, 272, 278, 281, 286, 288, 290, 297, 303, 318, 324, 326, 332, 333, 336, 338, 343, 353, 356, 360, 371, 373, 380, 381, 382, 387, 395, 433, 436, 440, 452, 507, 532, 536, 538, 548, 557, 563, 566, 576, 580, 631, 633, 634, 635, 636, 653, 655, 659, 660, 664, 672, 673, 680, 681, 683, 692, 695, 700, 703, 706, 707, 711, 712, 714, 717, 719, 720, 721, 723, 726], "framework": [1, 3, 11, 13, 14, 45, 153, 177, 178, 187, 189, 198, 204, 208, 211, 215, 216, 217, 231, 232, 236, 237, 241, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 256, 259, 262, 264, 265, 269, 274, 275, 279, 280, 282, 284, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 299, 301, 303, 309, 318, 319, 346, 354, 360, 371, 372, 373, 374, 376, 434, 440, 451, 462, 616, 633, 634, 636, 652, 653, 657, 660, 661, 665, 666, 667, 668, 671, 672, 673, 694, 695, 711, 712, 714, 718, 721, 722, 723, 724, 725, 726], "layer": [1, 3, 11, 14, 46, 47, 116, 117, 118, 119, 121, 122, 149, 156, 159, 161, 163, 167, 171, 175, 187, 190, 199, 201, 202, 203, 207, 212, 221, 224, 225, 229, 230, 264, 271, 341, 342, 451, 452, 532, 533, 534, 535, 537, 538, 568, 574, 577, 582, 595, 614, 616, 624, 633, 634, 635, 636, 659, 667, 695, 711, 717, 718, 724], "mxnet_util": 2, "util": [2, 12, 17, 105, 110, 111, 139, 142, 155, 157, 158, 159, 168, 178, 188, 195, 198, 222, 229, 230, 271, 310, 312, 342, 352, 363, 365, 384, 385, 387, 388, 390, 396, 416, 421, 432, 464, 465, 468, 573, 574, 605, 635, 636, 637, 652, 653, 660, 672, 675, 695, 711, 714, 723, 724], "ox_util": 2, "oper": [2, 17, 43, 104, 110, 140, 148, 201, 202, 207, 225, 229, 230, 258, 300, 341, 418, 423, 446, 526, 561, 630, 651, 654, 657, 662, 692, 698, 711, 714, 717, 720, 722, 723], "activ": [2, 17, 29, 44, 141, 154, 170, 171, 190, 229, 230, 271, 360, 387, 440, 442, 449, 581, 634, 635, 636, 652, 657, 659, 664, 672, 693, 694, 697, 705, 706, 707, 713, 714, 717, 720, 721, 725], "argmax": [2, 17, 29], "attent": [2, 17, 29, 166, 199, 201, 212, 229, 230, 245, 288, 580, 628, 658, 711], "binary_op": [2, 17, 29], "concat": [2, 17, 29, 147, 560], "conv": [2, 17, 29, 58, 62, 66, 71, 72, 73, 92, 109, 175, 229, 230, 396, 479, 483, 487, 492, 493, 494, 513, 525, 630, 635, 636, 672, 711, 713, 714, 723], "direct_q8": [2, 17, 29], "embed_layernorm": [2, 17, 29], "gather": [2, 13, 17, 29, 229, 230, 341], "gavgpool": [2, 17, 29], "gemm": [2, 17, 29, 229, 230, 396], "lstm": [2, 17, 29], "matmul": [2, 17, 29, 44, 53, 59, 65, 73, 94, 109, 128, 137, 207, 229, 230, 341, 387, 388, 390, 391, 396, 466, 474, 480, 486, 494, 515, 525, 544, 553, 664, 695, 717, 723], "maxpool": [2, 17, 29, 129, 138, 545, 554, 664], "norm": [2, 17, 29], "op": [2, 13, 17, 29, 45, 51, 53, 65, 66, 67, 68, 69, 70, 71, 72, 74, 78, 81, 85, 88, 91, 92, 93, 94, 96, 105, 107, 109, 123, 124, 125, 131, 133, 134, 135, 136, 141, 143, 146, 148, 155, 157, 168, 170, 171, 175, 201, 229, 230, 308, 353, 360, 361, 418, 423, 429, 431, 433, 440, 441, 442, 449, 472, 474, 486, 487, 488, 489, 490, 491, 492, 493, 495, 499, 502, 506, 509, 512, 513, 514, 515, 517, 523, 525, 539, 540, 541, 547, 549, 550, 551, 552, 556, 559, 561, 579, 580, 597, 598, 612, 618, 624, 634, 635, 636, 657, 664, 672, 673, 696, 697, 711, 714, 716, 718, 720, 721, 723, 725], "pad": [2, 17, 29, 44, 71, 72, 245, 262, 288, 303, 391, 492, 493, 655, 722], "pool": [2, 17, 29, 702], "reduc": [2, 17, 29, 229, 230, 634, 652, 659, 672, 673, 692, 693, 711, 712, 714, 715, 716, 717, 720, 723, 725], "resiz": [2, 17, 29, 245, 246, 258, 262, 288, 289, 300, 303, 655, 722], "split": [2, 17, 29, 43, 82, 149, 171, 261, 262, 302, 303, 503, 581, 595, 630, 715, 717, 720, 722], "unary_op": [2, 17, 29], "calibr": [2, 11, 13, 14, 17, 44, 49, 89, 90, 140, 170, 171, 177, 229, 230, 233, 234, 276, 277, 309, 346, 385, 386, 387, 388, 391, 393, 394, 424, 448, 464, 468, 470, 510, 511, 579, 581, 597, 608, 618, 634, 636, 655, 666, 667, 711, 714, 717, 723, 724, 725], "quantiz": [2, 11, 13, 14, 16, 17, 42, 43, 44, 48, 49, 88, 92, 94, 96, 99, 107, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 149, 150, 154, 155, 156, 157, 158, 159, 163, 164, 165, 167, 169, 170, 171, 175, 177, 179, 184, 186, 229, 230, 233, 234, 258, 265, 272, 276, 277, 300, 308, 309, 310, 320, 347, 353, 359, 363, 384, 385, 387, 388, 390, 391, 401, 429, 431, 433, 442, 446, 447, 449, 451, 452, 574, 577, 579, 580, 581, 582, 590, 594, 595, 596, 597, 613, 614, 618, 619, 623, 624, 634, 641, 653, 654, 655, 660, 661, 664, 666, 667, 671, 674, 675, 680, 682, 683, 686, 699, 701, 702, 704, 710, 712, 718, 721, 722, 723, 724, 725], "smooth_quant": [2, 17, 161, 170, 174, 229, 230, 363, 653, 714, 720], "weight_onli": [2, 17, 230, 623, 653, 715, 717], "tf_util": 2, "graph_rewrit": [2, 111], "bf16": [2, 44, 87, 111, 155, 229, 230, 360, 387, 388, 390, 391, 440, 508, 634, 635, 664, 672, 677, 682, 686, 692, 716, 723, 726], "gener": [2, 13, 48, 49, 87, 111, 122, 148, 156, 170, 177, 181, 201, 221, 233, 234, 235, 244, 247, 248, 249, 250, 262, 276, 277, 278, 287, 290, 291, 292, 293, 303, 311, 319, 350, 364, 372, 396, 419, 424, 428, 443, 462, 466, 469, 470, 508, 538, 561, 563, 582, 605, 613, 629, 630, 634, 636, 654, 658, 671, 672, 673, 675, 680, 685, 687, 689, 690, 692, 694, 695, 709, 711, 712, 714, 716, 717, 720, 721, 722, 723], "int8": [2, 18, 19, 43, 44, 87, 111, 123, 124, 125, 131, 133, 134, 135, 136, 143, 148, 171, 176, 177, 229, 230, 258, 300, 306, 307, 308, 360, 362, 387, 388, 390, 391, 401, 440, 442, 462, 466, 508, 539, 540, 541, 547, 549, 550, 551, 552, 556, 561, 597, 623, 624, 629, 630, 633, 634, 635, 636, 651, 655, 659, 664, 670, 672, 673, 677, 680, 682, 683, 686, 692, 695, 697, 712, 713, 714, 716, 717, 718, 719, 720, 721, 722, 725], "onnx": [2, 14, 15, 16, 29, 41, 43, 44, 87, 111, 142, 175, 229, 230, 241, 284, 306, 307, 308, 372, 379, 385, 387, 388, 390, 391, 393, 394, 400, 401, 418, 622, 629, 633, 634, 635, 637, 654, 657, 661, 662, 664, 665, 667, 673, 674, 677, 682, 683, 695, 712, 713, 717, 718, 720, 723], "qdq": [2, 42, 87, 111, 112, 113, 142, 170, 171, 229, 230, 306, 307, 308, 508, 527, 528, 529, 597, 634, 657, 662, 667, 682, 683, 714, 718, 720], "graph_bas": [2, 87, 111, 508], "quantize_graph": [2, 111, 527], "qat": [2, 111, 112, 168, 230, 320, 380, 527, 528, 566, 659, 660, 667, 672, 714], "quantize_graph_bas": [2, 111, 112, 527, 528], "quantize_graph_bn": [2, 111, 112, 527, 528], "quantize_graph_concatv2": [2, 111, 112, 527, 528], "quantize_graph_conv": [2, 111, 112, 527, 528], "quantize_graph_for_intel_cpu": [2, 111, 112, 527, 528], "quantize_graph_matmul": [2, 111, 112, 527, 528], "quantize_graph_pool": [2, 111, 112, 527, 528], "transform_graph": [2, 111, 527], "bias_correct": [2, 111, 145, 527, 558], "graph_transform_bas": [2, 111, 145, 527, 558], "insert_log": [2, 111, 145, 527, 558], "rerange_quantized_concat": [2, 111, 145, 527, 558], "graph_convert": [2, 111, 527], "graph_converter_without_calib": [2, 111, 527], "graph_util": [2, 111, 527], "quantize_graph_common": [2, 111, 527], "smooth_quant_calibr": [2, 111], "smooth_quant_scal": [2, 111], "tf2onnx_convert": [2, 111], "torch_util": [2, 266, 310, 363, 715, 720], "layer_wise_qu": [2, 158, 230, 715], "modified_pickl": [2, 158, 159, 573, 574], "torch_load": [2, 158, 159], "bf16_convert": [2, 52, 87, 111, 158, 473, 508], "hawq_metr": [2, 158], "model_wrapp": [2, 15, 151, 158, 564], "pattern_detector": [2, 158], "symbolic_trac": [2, 158], "tensorflow": [2, 52, 54, 75, 76, 77, 87, 95, 101, 102, 103, 104, 105, 106, 110, 111, 112, 114, 117, 130, 140, 141, 142, 145, 148, 187, 189, 220, 229, 230, 244, 245, 246, 247, 250, 252, 254, 262, 269, 287, 288, 289, 290, 293, 295, 297, 303, 307, 308, 309, 312, 314, 318, 319, 320, 346, 354, 365, 367, 371, 372, 380, 417, 418, 422, 423, 424, 434, 624, 629, 631, 633, 634, 635, 652, 653, 654, 657, 658, 659, 661, 664, 665, 667, 668, 672, 673, 674, 682, 683, 694, 697, 711, 712, 713, 719, 720, 723, 725], "kerasadaptor": [3, 451], "mxnetadaptor": 11, "do": [11, 14, 153, 156, 186, 217, 229, 230, 244, 245, 287, 288, 304, 308, 311, 314, 344, 364, 367, 582, 623, 628, 635, 653, 655, 660, 664, 667, 671, 672, 687, 690, 711, 716, 718, 720, 723], "inspect": [11, 14, 718, 721], "tensor": [11, 13, 14, 15, 16, 43, 44, 70, 105, 140, 148, 149, 150, 153, 157, 162, 163, 170, 171, 196, 198, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 220, 230, 262, 303, 306, 308, 341, 343, 353, 380, 391, 433, 446, 491, 561, 566, 568, 575, 577, 580, 597, 598, 619, 623, 624, 630, 636, 653, 654, 655, 657, 711, 714, 718, 721, 722, 723], "dict": [11, 13, 14, 44, 45, 116, 148, 149, 150, 153, 155, 156, 157, 162, 170, 171, 172, 177, 189, 193, 196, 198, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 224, 227, 229, 230, 233, 234, 244, 263, 269, 276, 277, 287, 306, 308, 313, 314, 315, 316, 318, 321, 324, 325, 326, 333, 336, 338, 341, 342, 343, 344, 345, 350, 353, 359, 362, 366, 367, 368, 369, 371, 372, 380, 387, 388, 390, 394, 396, 424, 439, 442, 443, 452, 462, 465, 466, 532, 561, 566, 568, 575, 580, 581, 582, 595, 597, 603, 604, 613, 614, 616, 623, 624, 630, 635, 653, 662, 671, 711, 713, 714, 720, 721, 723], "specif": [11, 14, 42, 46, 104, 116, 153, 171, 177, 178, 189, 221, 225, 229, 230, 245, 246, 247, 248, 252, 254, 269, 288, 289, 290, 291, 295, 297, 327, 328, 330, 331, 332, 371, 424, 532, 563, 595, 598, 621, 628, 631, 634, 635, 652, 653, 654, 657, 658, 664, 666, 670, 671, 672, 673, 674, 675, 679, 680, 682, 686, 692, 694, 700, 709, 711, 713, 717, 723, 725], "configur": [11, 13, 14, 45, 118, 149, 155, 170, 171, 177, 178, 221, 226, 229, 230, 233, 234, 236, 247, 250, 263, 268, 276, 277, 290, 293, 304, 308, 309, 320, 321, 322, 324, 333, 338, 342, 346, 347, 353, 371, 372, 382, 424, 433, 442, 464, 468, 534, 580, 595, 608, 613, 615, 616, 622, 623, 630, 631, 634, 635, 655, 657, 672, 679, 693, 700, 705, 706, 707, 709, 711, 714, 717, 718, 720, 722, 723, 726], "mxnetqueri": 11, "local_config_fil": [11, 14, 47, 451, 452], "defin": [11, 14, 46, 86, 153, 157, 181, 193, 194, 201, 203, 208, 209, 210, 215, 216, 217, 218, 219, 229, 230, 233, 234, 276, 277, 321, 322, 324, 325, 326, 333, 338, 341, 342, 343, 345, 372, 395, 424, 507, 613, 623, 628, 631, 634, 635, 654, 655, 658, 659, 664, 667, 671, 672, 693, 710, 711, 714, 717, 719, 720, 721, 723, 725], "queri": [11, 13, 14, 47, 148, 170, 201, 212, 229, 230, 451, 452, 561, 580, 635, 636, 702, 714], "interfac": [11, 14, 46, 86, 113, 226, 309, 333, 338, 346, 347, 507, 529, 616, 667, 672, 683, 701, 714, 718], "each": [11, 14, 46, 141, 148, 157, 162, 170, 171, 221, 229, 230, 243, 247, 250, 258, 262, 286, 290, 293, 300, 303, 312, 314, 315, 316, 353, 365, 367, 368, 369, 433, 449, 561, 575, 597, 624, 629, 634, 635, 636, 653, 655, 657, 658, 659, 664, 672, 677, 683, 686, 692, 700, 702, 709, 711, 715, 717, 719, 721, 722, 723, 724], "adapt": [11, 14, 46, 149, 628, 633, 635, 655, 683, 712], "should": [11, 14, 46, 55, 115, 116, 162, 186, 199, 201, 212, 229, 230, 233, 234, 243, 245, 247, 262, 267, 276, 277, 286, 288, 290, 303, 308, 312, 365, 371, 372, 424, 443, 476, 531, 532, 575, 598, 613, 624, 630, 631, 634, 635, 636, 655, 658, 660, 671, 672, 678, 687, 690, 692, 694, 695, 709, 711, 714, 717, 722, 723, 725], "implement": [11, 14, 46, 110, 143, 147, 153, 154, 162, 233, 234, 240, 243, 244, 245, 247, 276, 277, 283, 286, 287, 288, 290, 311, 364, 372, 382, 424, 431, 526, 556, 560, 575, 581, 613, 636, 654, 655, 671, 672, 683, 693, 711, 714, 717, 718, 721, 723, 725], "inherit": [11, 14, 46, 186, 187, 213, 214, 219, 229, 242, 262, 264, 272, 285, 303, 343, 345, 583, 631, 634, 635, 655], "backend": [11, 14, 15, 41, 42, 46, 175, 189, 229, 230, 231, 232, 236, 237, 241, 245, 246, 248, 249, 250, 251, 252, 256, 259, 262, 268, 269, 274, 275, 279, 280, 282, 284, 288, 289, 291, 292, 293, 294, 295, 299, 301, 303, 319, 354, 372, 373, 374, 376, 434, 630, 636, 657, 660, 666, 667, 672, 673, 681, 700, 705, 706, 707, 713, 717, 722, 723, 725], "own": [11, 14, 46, 74, 162, 243, 262, 286, 303, 382, 495, 575, 631, 635, 654, 655, 667, 671, 694, 698, 709, 717, 719, 724], "mxnet": [12, 13, 16, 230, 240, 244, 247, 250, 254, 262, 283, 287, 290, 293, 297, 303, 309, 318, 346, 371, 372, 377, 424, 629, 633, 634, 635, 652, 654, 661, 664, 667, 668, 672, 673, 674, 713, 723, 725], "init": [12, 17, 42, 174, 188, 198, 200, 222, 655, 671, 723], "optyp": [13, 229, 230, 306, 635], "enum": 13, "type": [13, 16, 42, 43, 44, 45, 74, 96, 105, 116, 122, 132, 140, 148, 149, 155, 156, 157, 162, 170, 171, 172, 181, 187, 189, 193, 194, 197, 201, 202, 203, 208, 217, 218, 219, 221, 224, 227, 229, 230, 243, 245, 247, 254, 262, 264, 269, 286, 288, 290, 297, 303, 308, 311, 312, 314, 318, 325, 332, 336, 341, 343, 345, 350, 356, 360, 362, 364, 365, 367, 371, 380, 382, 387, 388, 390, 391, 401, 428, 429, 436, 440, 442, 443, 446, 464, 468, 495, 517, 532, 538, 548, 561, 566, 568, 575, 580, 581, 582, 595, 597, 598, 612, 623, 624, 634, 635, 655, 657, 660, 662, 664, 667, 672, 673, 693, 695, 700, 701, 705, 706, 714, 715, 717, 719, 722, 723, 724, 725], "isiter": 13, "obj": [13, 105, 198, 221, 244, 287, 304, 309, 320, 321, 322, 324, 333, 338, 342, 346, 372, 382, 424, 613, 616, 624], "bool": [13, 42, 43, 44, 141, 148, 149, 150, 153, 156, 162, 168, 170, 171, 185, 197, 203, 229, 230, 245, 247, 258, 262, 288, 290, 300, 303, 308, 312, 318, 341, 359, 365, 371, 387, 388, 396, 401, 439, 443, 449, 462, 466, 561, 575, 581, 582, 595, 597, 598, 605, 608, 619, 623, 624, 654, 655, 671, 703, 713, 722], "check": [13, 44, 67, 68, 105, 148, 149, 170, 171, 221, 236, 247, 290, 306, 342, 488, 489, 561, 568, 581, 623, 624, 633, 657, 660, 668, 676, 678, 680, 687, 690, 691, 695, 698, 701, 702, 718], "whether": [13, 43, 44, 105, 116, 148, 149, 150, 153, 156, 162, 170, 171, 203, 229, 230, 243, 245, 258, 262, 286, 288, 300, 303, 312, 314, 318, 341, 365, 367, 371, 387, 388, 390, 401, 532, 561, 568, 575, 579, 581, 582, 595, 597, 598, 616, 619, 623, 624, 634, 655, 671, 714, 717, 720, 722], "object": [13, 42, 43, 44, 45, 74, 86, 105, 116, 132, 148, 149, 153, 155, 157, 160, 162, 168, 170, 177, 186, 196, 198, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 226, 227, 229, 230, 233, 234, 235, 245, 246, 247, 262, 263, 265, 276, 277, 278, 288, 289, 290, 303, 304, 309, 314, 322, 324, 327, 328, 330, 331, 332, 333, 338, 341, 342, 343, 344, 345, 346, 350, 363, 367, 371, 372, 380, 381, 418, 423, 424, 428, 442, 495, 507, 532, 548, 561, 563, 566, 568, 575, 576, 580, 585, 597, 612, 613, 616, 623, 624, 630, 631, 635, 641, 651, 653, 654, 655, 663, 671, 672, 674, 710, 711, 713, 714, 722, 723, 724, 726], "i": [13, 43, 44, 45, 48, 49, 51, 54, 55, 60, 64, 70, 82, 85, 105, 132, 143, 148, 149, 150, 153, 156, 157, 160, 162, 164, 168, 170, 171, 176, 177, 179, 181, 186, 189, 190, 196, 197, 201, 202, 208, 213, 214, 215, 216, 217, 218, 220, 221, 229, 230, 233, 234, 235, 243, 244, 245, 246, 247, 248, 249, 252, 254, 258, 262, 263, 265, 269, 271, 272, 276, 277, 278, 286, 287, 288, 289, 290, 291, 292, 295, 297, 300, 303, 311, 314, 316, 318, 320, 325, 333, 338, 342, 343, 347, 354, 364, 367, 369, 371, 372, 382, 391, 394, 401, 407, 408, 412, 424, 429, 434, 442, 443, 469, 470, 472, 475, 476, 481, 485, 491, 503, 506, 548, 556, 561, 563, 568, 575, 576, 580, 581, 582, 585, 595, 597, 598, 613, 619, 623, 624, 628, 629, 630, 631, 634, 635, 636, 637, 639, 643, 646, 649, 651, 652, 653, 654, 655, 657, 658, 659, 660, 662, 663, 664, 667, 668, 669, 671, 672, 673, 674, 675, 676, 677, 678, 680, 681, 683, 685, 686, 687, 689, 690, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 705, 707, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 725, 726], "iter": [13, 15, 105, 140, 148, 149, 153, 170, 171, 177, 202, 208, 215, 219, 229, 230, 233, 234, 238, 243, 247, 248, 265, 276, 277, 281, 286, 290, 291, 343, 345, 372, 384, 424, 446, 464, 468, 561, 563, 580, 581, 585, 597, 613, 616, 630, 631, 634, 651, 654, 655, 672, 711, 713, 714, 720, 721, 723, 725], "return": [13, 16, 44, 45, 54, 67, 68, 70, 74, 105, 116, 148, 149, 153, 155, 156, 157, 162, 168, 170, 171, 172, 177, 187, 189, 193, 194, 197, 198, 201, 203, 204, 208, 211, 217, 218, 219, 221, 224, 227, 233, 234, 247, 254, 258, 262, 263, 264, 269, 276, 277, 290, 297, 300, 303, 308, 311, 312, 314, 315, 316, 318, 324, 325, 332, 336, 341, 342, 343, 345, 350, 356, 360, 362, 364, 365, 367, 368, 369, 371, 372, 376, 380, 382, 387, 388, 390, 391, 396, 401, 418, 423, 424, 428, 436, 440, 442, 443, 462, 464, 466, 468, 475, 488, 489, 491, 495, 532, 561, 566, 568, 575, 579, 580, 581, 582, 585, 595, 597, 605, 608, 612, 613, 616, 621, 623, 624, 630, 631, 635, 636, 654, 655, 660, 671, 674, 705, 706, 707, 709, 711, 714, 717, 720, 721, 723], "true": [13, 43, 44, 85, 113, 146, 148, 149, 150, 156, 162, 171, 177, 193, 197, 229, 230, 243, 245, 247, 248, 261, 262, 263, 286, 288, 290, 291, 302, 303, 308, 312, 318, 336, 359, 365, 371, 382, 387, 388, 390, 396, 424, 439, 443, 462, 466, 506, 529, 559, 561, 563, 575, 579, 581, 582, 595, 596, 597, 598, 605, 608, 616, 619, 623, 624, 635, 654, 655, 657, 660, 664, 671, 672, 675, 678, 679, 694, 695, 696, 697, 703, 705, 713, 714, 715, 717, 720, 721, 722, 723, 725], "els": [13, 148, 153, 171, 230, 243, 286, 382, 561, 597, 621, 680, 717, 721], "fals": [13, 14, 15, 41, 42, 43, 44, 47, 48, 49, 71, 72, 89, 92, 99, 102, 103, 105, 113, 131, 136, 143, 146, 147, 148, 149, 150, 153, 154, 156, 161, 162, 168, 170, 171, 177, 187, 190, 223, 229, 230, 235, 237, 242, 244, 245, 247, 258, 262, 263, 264, 265, 271, 278, 280, 285, 287, 288, 290, 300, 303, 314, 318, 367, 371, 382, 388, 396, 401, 424, 443, 452, 466, 469, 470, 492, 493, 510, 513, 520, 529, 547, 552, 556, 559, 560, 561, 563, 575, 581, 582, 595, 597, 605, 616, 619, 623, 624, 634, 635, 654, 655, 664, 671, 672, 685, 689, 695, 703, 706, 707, 713, 714, 717, 720, 721, 722, 723, 725], "boolean": [13, 149], "ensure_list": 13, "x": [13, 55, 74, 149, 156, 202, 229, 230, 244, 262, 287, 303, 350, 428, 443, 476, 495, 582, 652, 653, 657, 660, 673, 674, 700, 701, 705, 706, 708, 714, 715, 720, 721, 722, 724], "ensur": [13, 262, 303, 350, 428, 660, 714, 722], "list": [13, 42, 43, 44, 54, 105, 140, 148, 149, 153, 155, 156, 157, 166, 170, 177, 178, 179, 181, 194, 201, 202, 207, 212, 217, 221, 224, 229, 230, 233, 234, 238, 245, 258, 262, 263, 276, 277, 281, 288, 300, 303, 307, 308, 311, 312, 314, 315, 316, 318, 325, 333, 338, 341, 344, 359, 364, 365, 367, 368, 369, 371, 372, 380, 384, 385, 387, 388, 390, 391, 394, 396, 401, 407, 408, 412, 424, 439, 443, 446, 462, 465, 466, 468, 475, 561, 566, 580, 582, 597, 604, 605, 613, 614, 624, 630, 633, 634, 655, 662, 664, 668, 670, 672, 675, 680, 682, 685, 686, 689, 697, 700, 702, 703, 709, 711, 713, 714, 716, 720, 721, 723], "input": [13, 15, 42, 43, 44, 45, 54, 60, 64, 67, 68, 70, 71, 72, 74, 82, 83, 85, 86, 105, 109, 110, 116, 122, 141, 148, 149, 150, 153, 155, 165, 167, 168, 169, 170, 171, 175, 201, 202, 221, 229, 230, 233, 234, 245, 246, 247, 249, 258, 261, 262, 267, 276, 277, 288, 289, 290, 292, 300, 302, 303, 306, 307, 308, 371, 372, 376, 380, 385, 391, 394, 424, 449, 475, 481, 485, 488, 489, 491, 492, 493, 495, 503, 504, 506, 507, 525, 526, 532, 538, 561, 563, 566, 580, 594, 595, 596, 597, 598, 612, 613, 619, 621, 623, 624, 631, 634, 635, 651, 652, 654, 655, 657, 658, 659, 660, 662, 664, 666, 671, 672, 673, 674, 675, 680, 711, 713, 714, 717, 720, 721, 722, 725], "check_mx_vers": 13, "version": [13, 54, 104, 149, 153, 165, 170, 201, 230, 307, 308, 363, 475, 594, 628, 630, 634, 653, 664, 668, 669, 672, 685, 687, 689, 690, 712, 720, 723, 724], "str": [13, 42, 43, 44, 140, 149, 150, 155, 157, 162, 163, 166, 167, 168, 170, 171, 172, 178, 181, 185, 187, 189, 198, 201, 224, 229, 230, 245, 246, 247, 254, 258, 262, 264, 268, 269, 288, 289, 290, 297, 300, 303, 307, 308, 311, 312, 314, 316, 318, 325, 336, 359, 362, 364, 365, 367, 369, 371, 384, 385, 387, 388, 390, 391, 393, 394, 396, 401, 409, 417, 419, 422, 423, 439, 442, 443, 446, 462, 465, 466, 468, 568, 575, 577, 580, 583, 595, 597, 598, 603, 605, 612, 616, 619, 621, 624, 625, 653, 654, 655, 671, 703, 713, 721, 722], "mx": 13, "__version__": [13, 160, 576, 653], "combine_cap": 13, "current": [13, 70, 104, 167, 171, 196, 198, 201, 204, 208, 211, 229, 230, 320, 327, 328, 330, 331, 332, 341, 343, 350, 354, 428, 434, 491, 597, 624, 630, 631, 634, 636, 652, 653, 660, 664, 672, 675, 679, 692, 700, 709, 711, 714, 717, 720, 723], "new": [13, 16, 44, 148, 149, 167, 177, 181, 235, 247, 262, 263, 278, 290, 303, 342, 382, 391, 561, 563, 583, 597, 598, 629, 633, 635, 660, 672, 673, 686, 692, 693, 694, 695, 701, 702, 705, 706, 711, 712, 714, 717, 718, 719, 722, 724, 725], "combin": [13, 170, 179, 229, 230, 233, 234, 258, 272, 276, 277, 300, 372, 424, 568, 580, 613, 624, 630, 634, 667, 672, 710, 712, 714, 716, 717, 722, 723], "capabl": [13, 47, 360, 440, 452, 635, 636, 651, 664, 672, 673, 683, 694, 699, 711, 713, 714, 723, 725], "contain": [13, 67, 68, 70, 74, 139, 148, 149, 157, 162, 170, 171, 177, 186, 198, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 221, 229, 230, 233, 234, 245, 246, 247, 276, 277, 288, 289, 290, 304, 308, 309, 314, 315, 316, 320, 333, 336, 338, 341, 342, 343, 344, 345, 346, 367, 368, 369, 372, 424, 488, 489, 491, 495, 555, 561, 575, 581, 613, 616, 623, 652, 655, 658, 667, 671, 693, 700, 705, 706, 707, 711, 717, 721, 723, 724], "make_nc_model": 13, "target": [13, 42, 43, 102, 149, 150, 153, 156, 170, 201, 219, 221, 230, 342, 345, 350, 428, 582, 619, 655, 660, 672, 711, 721, 722, 723, 725], "sym_model": 13, "ctx": 13, "input_desc": 13, "convert": [13, 43, 48, 49, 50, 53, 54, 55, 56, 57, 66, 74, 86, 99, 100, 102, 103, 104, 105, 131, 136, 140, 142, 150, 155, 170, 201, 229, 230, 245, 258, 261, 262, 288, 300, 302, 303, 307, 314, 320, 342, 360, 367, 440, 443, 446, 451, 452, 469, 470, 471, 474, 475, 476, 477, 478, 487, 495, 507, 520, 521, 547, 552, 630, 635, 672, 673, 677, 714, 716, 717, 720, 722, 723], "symbol": [13, 43, 155, 168, 170, 311, 364, 372, 424, 630, 674], "model": [13, 15, 16, 29, 41, 42, 43, 44, 45, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 116, 118, 140, 141, 142, 148, 149, 150, 153, 154, 155, 156, 157, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 175, 177, 179, 186, 193, 198, 199, 201, 208, 209, 210, 213, 215, 216, 217, 219, 221, 223, 229, 230, 233, 234, 241, 244, 245, 247, 262, 263, 266, 267, 276, 277, 284, 287, 288, 290, 303, 304, 306, 307, 308, 309, 310, 318, 319, 320, 321, 324, 327, 328, 330, 331, 332, 333, 338, 342, 343, 344, 345, 346, 347, 350, 351, 353, 354, 355, 356, 363, 371, 372, 382, 384, 385, 387, 388, 390, 391, 393, 394, 400, 401, 417, 422, 423, 424, 425, 428, 429, 430, 431, 433, 434, 435, 436, 442, 443, 446, 449, 464, 465, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 490, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 523, 524, 525, 532, 534, 561, 566, 568, 575, 577, 579, 580, 581, 582, 595, 596, 597, 598, 603, 604, 608, 612, 613, 619, 621, 623, 624, 626, 629, 630, 631, 633, 634, 636, 641, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 666, 667, 669, 671, 673, 675, 680, 682, 683, 686, 692, 694, 699, 701, 702, 703, 704, 709, 710, 712, 714, 718, 719, 721, 722, 723, 724, 725], "an": [13, 67, 68, 70, 105, 141, 143, 148, 149, 153, 157, 160, 162, 170, 171, 176, 190, 208, 229, 230, 238, 243, 247, 262, 266, 271, 281, 286, 290, 303, 310, 311, 315, 316, 324, 325, 347, 363, 364, 368, 369, 372, 418, 423, 424, 443, 449, 488, 489, 491, 556, 561, 575, 576, 583, 585, 597, 598, 613, 624, 626, 628, 630, 631, 633, 634, 636, 652, 654, 655, 656, 657, 662, 670, 671, 672, 673, 675, 679, 680, 683, 692, 695, 696, 697, 700, 703, 709, 711, 712, 714, 717, 719, 720, 721, 722, 723], "neural": [13, 157, 177, 186, 189, 203, 204, 205, 206, 217, 229, 230, 257, 258, 259, 262, 263, 266, 269, 272, 300, 301, 303, 305, 310, 317, 318, 320, 333, 338, 341, 344, 346, 347, 352, 358, 363, 370, 371, 372, 376, 402, 424, 431, 432, 438, 565, 621, 626, 629, 634, 635, 636, 651, 652, 653, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 669, 670, 673, 674, 676, 677, 680, 682, 683, 685, 687, 689, 690, 691, 703, 709, 710, 712, 714, 717, 718, 720, 721, 722, 723, 725, 726], "compressor": [13, 177, 186, 189, 205, 206, 217, 229, 230, 257, 258, 259, 262, 263, 266, 269, 272, 300, 301, 303, 305, 310, 317, 318, 320, 341, 344, 346, 347, 352, 358, 363, 370, 371, 372, 376, 402, 424, 432, 438, 565, 621, 626, 629, 631, 634, 635, 636, 651, 652, 653, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 669, 670, 673, 674, 675, 676, 680, 682, 683, 685, 687, 689, 690, 691, 694, 695, 696, 697, 699, 700, 707, 709, 710, 711, 712, 714, 717, 718, 720, 721, 722, 723, 724, 725, 726], "tupl": [13, 105, 148, 170, 194, 230, 233, 234, 258, 262, 276, 277, 300, 303, 308, 359, 372, 391, 424, 439, 561, 580, 585, 603, 613, 623, 635, 653, 655, 671, 672, 714, 722], "symnet": 13, "arg": [13, 54, 105, 149, 170, 245, 246, 247, 288, 289, 290, 341, 350, 393, 428, 443, 475, 582, 597, 603, 619, 620, 655, 660, 672, 681, 711, 714, 717, 720, 721, 722], "aux": 13, "data": [13, 42, 43, 44, 56, 105, 140, 148, 149, 157, 162, 167, 170, 171, 175, 201, 229, 230, 233, 234, 263, 265, 276, 277, 308, 310, 350, 360, 362, 363, 372, 385, 391, 395, 401, 417, 422, 424, 428, 440, 442, 446, 464, 468, 477, 561, 564, 568, 575, 580, 597, 613, 616, 621, 624, 633, 634, 652, 654, 655, 660, 664, 665, 668, 671, 672, 673, 694, 695, 697, 700, 705, 706, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724], "descript": [13, 132, 197, 443, 548, 630, 635, 636, 654, 700, 704, 720], "ncmodel": 13, "fuse": [13, 58, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 91, 92, 93, 94, 96, 131, 136, 168, 170, 175, 479, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 512, 513, 514, 515, 517, 547, 552, 580, 630, 720, 721], "suppli": 13, "get_framework_nam": 13, "get": [13, 42, 43, 44, 45, 67, 68, 70, 104, 105, 148, 149, 156, 163, 167, 170, 177, 185, 189, 190, 194, 196, 198, 199, 201, 204, 211, 218, 219, 220, 221, 227, 230, 238, 262, 263, 269, 271, 281, 303, 308, 341, 343, 345, 353, 360, 362, 371, 380, 388, 395, 401, 424, 433, 440, 442, 462, 488, 489, 491, 561, 566, 568, 577, 580, 582, 592, 597, 612, 616, 619, 621, 624, 635, 652, 663, 667, 668, 670, 672, 678, 695, 697, 705, 706, 712, 717, 720, 723, 724, 727], "name": [13, 43, 45, 54, 67, 68, 70, 104, 105, 110, 116, 140, 148, 149, 150, 155, 156, 157, 162, 163, 167, 168, 170, 172, 177, 178, 179, 181, 190, 193, 194, 196, 201, 203, 208, 211, 212, 217, 218, 219, 220, 221, 224, 227, 229, 230, 245, 246, 247, 250, 254, 260, 262, 263, 267, 270, 271, 288, 289, 290, 293, 297, 303, 306, 307, 308, 313, 318, 336, 341, 343, 345, 360, 362, 366, 371, 376, 380, 382, 394, 401, 424, 440, 442, 446, 475, 488, 489, 491, 526, 532, 561, 566, 568, 575, 577, 580, 582, 583, 597, 612, 614, 616, 621, 624, 629, 630, 636, 653, 655, 657, 660, 662, 664, 669, 671, 672, 674, 678, 685, 689, 693, 694, 700, 711, 714, 718, 719, 721, 723, 725, 726], "context": [13, 598, 624, 713, 717], "prepare_model_data": 13, "nc_model": [13, 333, 338], "data_x": 13, "prepar": [13, 44, 170, 391, 630, 633, 655, 660, 665, 694, 705, 706, 707, 711, 714], "dataload": [13, 15, 42, 44, 140, 141, 149, 154, 156, 157, 167, 170, 171, 177, 198, 199, 201, 217, 221, 223, 233, 234, 245, 256, 266, 276, 277, 288, 299, 304, 310, 333, 338, 347, 363, 384, 385, 387, 388, 394, 417, 422, 424, 446, 449, 563, 581, 582, 596, 597, 613, 616, 630, 633, 634, 635, 657, 658, 659, 660, 665, 666, 672, 673, 694, 695, 710, 711, 714, 715, 716, 717, 720, 721, 722, 724, 725], "need": [13, 42, 105, 109, 150, 167, 171, 177, 181, 201, 217, 230, 233, 234, 235, 243, 244, 247, 254, 262, 265, 267, 268, 276, 277, 278, 286, 287, 290, 297, 303, 308, 347, 353, 371, 372, 382, 385, 424, 433, 525, 563, 581, 613, 623, 624, 630, 634, 653, 654, 655, 657, 658, 660, 667, 672, 675, 677, 678, 681, 685, 686, 687, 689, 690, 692, 693, 694, 695, 696, 697, 699, 703, 705, 711, 713, 714, 715, 716, 717, 718, 720, 722, 723, 725], "run": [13, 140, 148, 162, 171, 177, 208, 221, 229, 230, 233, 234, 244, 261, 263, 276, 277, 287, 302, 342, 343, 350, 372, 424, 428, 446, 561, 575, 582, 596, 598, 613, 634, 651, 660, 663, 664, 672, 675, 677, 679, 680, 681, 683, 685, 686, 687, 689, 690, 692, 700, 701, 702, 703, 705, 706, 707, 712, 714, 717, 718, 719, 721, 723, 725], "loader": [13, 140, 233, 234, 276, 277, 372, 424, 446, 464, 468, 613, 619, 654, 714], "dataloaderwrap": 13, "prepare_model": 13, "create_data_exampl": 13, "creat": [13, 16, 105, 160, 181, 229, 230, 235, 245, 247, 265, 278, 288, 290, 314, 324, 325, 360, 367, 394, 418, 423, 440, 442, 443, 563, 576, 583, 616, 628, 631, 634, 655, 674, 685, 687, 689, 690, 693, 705, 706, 707, 711, 714, 719, 721, 723, 724], "exampl": [13, 44, 149, 153, 157, 162, 170, 171, 177, 178, 179, 181, 194, 201, 202, 217, 229, 230, 245, 246, 247, 258, 262, 288, 289, 290, 300, 303, 314, 315, 316, 318, 344, 367, 368, 369, 371, 372, 382, 387, 388, 390, 401, 424, 442, 443, 568, 575, 581, 583, 595, 597, 612, 613, 623, 624, 628, 633, 635, 636, 641, 666, 667, 675, 678, 679, 680, 683, 700, 703, 716, 718, 722, 723, 724, 727], "prepare_dataload": 13, "io": [13, 162, 575, 698], "ndarray_to_devic": 13, "ndarrai": [13, 42, 43, 67, 68, 70, 262, 303, 488, 489, 491, 614, 663, 722], "devic": [13, 79, 89, 90, 91, 92, 93, 94, 97, 107, 131, 136, 147, 149, 150, 156, 161, 162, 164, 170, 171, 198, 201, 202, 217, 221, 223, 229, 230, 500, 510, 511, 512, 513, 514, 515, 518, 523, 547, 552, 560, 575, 582, 598, 619, 635, 654, 658, 672, 673, 675, 678, 683, 692, 711, 713, 715, 717], "is_model_quant": 13, "query_quantizable_nod": 13, "node": [13, 42, 43, 44, 50, 54, 55, 56, 57, 60, 62, 64, 67, 68, 70, 74, 77, 80, 82, 83, 84, 98, 102, 103, 105, 110, 132, 140, 148, 201, 306, 308, 380, 391, 401, 423, 446, 471, 475, 476, 477, 478, 481, 483, 485, 488, 489, 491, 495, 498, 501, 503, 504, 505, 519, 526, 548, 561, 566, 634, 657, 660, 695, 699, 702, 705, 706, 707, 715, 721, 723, 726], "given": [13, 16, 43, 67, 68, 70, 104, 105, 116, 148, 149, 163, 170, 224, 262, 303, 314, 367, 424, 488, 489, 491, 532, 561, 577, 585, 597, 612, 631, 636, 711, 720, 722], "map": [13, 43, 105, 148, 162, 170, 230, 262, 303, 306, 308, 309, 313, 315, 316, 318, 333, 338, 343, 346, 366, 368, 369, 371, 561, 575, 653, 655, 660, 671, 672, 685, 689, 697, 711, 714, 717], "quantize_sym_model": 13, "qconfig": [13, 150, 170, 623, 717, 721], "accord": [13, 122, 170, 177, 229, 230, 245, 246, 247, 262, 288, 289, 290, 303, 353, 431, 433, 538, 616, 631, 634, 655, 660, 695, 700, 705, 706, 707, 711, 716, 720, 722, 723], "run_forward": 13, "b_filter": 13, "collector": [13, 157, 614], "none": [13, 14, 41, 43, 44, 45, 47, 48, 49, 63, 89, 102, 104, 105, 110, 116, 142, 148, 149, 153, 154, 156, 157, 161, 162, 163, 164, 165, 167, 169, 170, 171, 177, 178, 179, 181, 185, 186, 187, 194, 196, 198, 199, 201, 205, 217, 221, 223, 225, 226, 227, 229, 230, 233, 234, 235, 237, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 258, 262, 263, 264, 265, 272, 276, 277, 278, 280, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 300, 303, 304, 307, 308, 309, 314, 318, 319, 320, 321, 324, 333, 338, 342, 346, 350, 351, 353, 354, 355, 356, 360, 367, 371, 372, 382, 394, 417, 422, 423, 424, 425, 428, 429, 430, 431, 433, 434, 435, 436, 440, 443, 451, 452, 462, 464, 465, 466, 468, 469, 470, 484, 510, 526, 532, 561, 563, 568, 575, 577, 580, 581, 582, 592, 594, 596, 597, 598, 604, 605, 608, 613, 614, 616, 619, 621, 623, 624, 634, 635, 654, 655, 671, 695, 714, 717, 721, 722, 723], "pre_batch": 13, "post_batch": 13, "forward": [13, 149, 170, 221, 598, 635, 672, 694, 711, 713, 714, 717, 720, 721], "propag": [13, 100, 521], "filter": [13, 245, 246, 247, 248, 249, 250, 252, 256, 288, 289, 290, 291, 292, 293, 295, 299, 310, 363, 563, 568, 624, 636, 655, 667, 711, 721], "which": [13, 42, 56, 83, 110, 149, 153, 156, 157, 162, 167, 171, 178, 196, 201, 202, 204, 208, 209, 210, 212, 215, 216, 217, 219, 221, 229, 230, 245, 246, 247, 258, 263, 288, 289, 290, 300, 311, 316, 325, 327, 328, 330, 331, 332, 336, 341, 342, 343, 345, 350, 364, 369, 371, 376, 382, 385, 388, 401, 424, 428, 477, 504, 526, 568, 575, 581, 582, 612, 624, 628, 630, 631, 634, 635, 636, 652, 654, 655, 657, 658, 660, 663, 664, 667, 671, 672, 673, 674, 676, 680, 683, 686, 692, 693, 694, 697, 700, 705, 706, 707, 710, 711, 713, 714, 715, 716, 717, 718, 720, 721, 722, 723, 724, 725], "batch": [13, 149, 170, 235, 237, 238, 243, 244, 265, 278, 280, 281, 286, 287, 563, 597, 613, 654, 658, 659, 672, 710, 711, 714, 720, 722, 723, 726], "infer": [13, 43, 105, 140, 150, 170, 171, 201, 309, 346, 380, 382, 424, 446, 566, 580, 581, 597, 598, 613, 634, 635, 652, 658, 659, 672, 673, 692, 709, 711, 712, 714, 717, 720, 721, 723], "collect": [13, 16, 43, 149, 170, 179, 260, 262, 265, 267, 268, 270, 303, 316, 318, 369, 371, 568, 614, 624, 635, 714, 721, 723], "inform": [13, 149, 157, 196, 198, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 230, 233, 234, 265, 267, 268, 276, 277, 341, 343, 344, 345, 347, 371, 384, 624, 628, 629, 632, 633, 634, 635, 636, 637, 639, 643, 646, 649, 652, 653, 658, 664, 672, 674, 687, 690, 693, 694, 697, 698, 700, 701, 705, 706, 711, 716, 717, 718, 720, 721, 725, 726, 727], "dure": [13, 160, 162, 203, 207, 219, 229, 230, 341, 345, 382, 394, 575, 576, 624, 635, 657, 672, 674, 699, 709, 710, 711, 714, 720, 721, 725], "call": [13, 42, 162, 167, 172, 201, 209, 210, 215, 314, 343, 367, 385, 575, 598, 630, 631, 634, 654, 666, 681, 683, 693, 711, 714, 720, 721, 722], "prior": [13, 88, 509, 723], "after": [13, 78, 148, 150, 170, 199, 203, 208, 210, 215, 229, 230, 245, 258, 262, 265, 288, 300, 303, 343, 429, 443, 499, 561, 619, 624, 631, 635, 655, 657, 658, 659, 662, 667, 671, 672, 685, 686, 689, 693, 697, 709, 710, 711, 714, 716, 717, 719, 720, 721, 722, 723], "count": [13, 631, 655, 717], "int": [13, 16, 42, 43, 44, 105, 140, 148, 149, 150, 154, 166, 170, 171, 181, 185, 199, 229, 230, 244, 245, 246, 258, 262, 287, 288, 289, 300, 303, 307, 308, 312, 314, 318, 325, 365, 367, 371, 384, 387, 388, 390, 391, 396, 401, 409, 418, 423, 442, 443, 446, 447, 451, 464, 465, 468, 561, 580, 581, 595, 597, 605, 619, 624, 653, 654, 655, 671, 672, 703, 713, 717, 722], "make_symbol_block": 13, "gluon": [13, 372, 424, 674], "symbolblock": 13, "make_modul": 13, "parse_tune_config": 13, "tune_cfg": [13, 148, 155, 170, 561, 579, 580, 634, 636, 723], "quantizable_nod": 13, "strategi": [13, 170, 215, 229, 230, 231, 247, 274, 290, 310, 363, 633, 634, 635, 636, 641, 652, 653, 654, 660, 667, 672, 680, 692, 697, 712, 713, 714, 716, 717, 718, 724, 725], "config": [13, 44, 115, 116, 118, 122, 170, 177, 178, 179, 181, 185, 196, 198, 199, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 229, 233, 234, 245, 276, 277, 288, 327, 328, 330, 331, 332, 333, 338, 341, 342, 343, 344, 345, 360, 361, 363, 372, 387, 388, 390, 393, 394, 418, 423, 440, 441, 442, 443, 447, 451, 452, 468, 531, 532, 534, 538, 579, 580, 613, 616, 623, 624, 631, 633, 635, 636, 641, 651, 653, 654, 657, 658, 659, 660, 662, 665, 667, 671, 672, 673, 674, 694, 695, 710, 711, 713, 714, 716, 717, 719, 721, 723], "tune": [13, 45, 149, 177, 178, 179, 184, 229, 230, 233, 234, 245, 247, 276, 277, 288, 290, 309, 346, 348, 349, 350, 351, 353, 354, 355, 356, 359, 360, 361, 362, 372, 382, 394, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 439, 440, 441, 442, 465, 604, 613, 624, 634, 635, 652, 653, 654, 655, 657, 660, 667, 669, 672, 673, 692, 696, 699, 701, 702, 709, 711, 712, 716, 718, 719, 721, 725], "from": [13, 43, 45, 61, 67, 68, 70, 105, 148, 149, 150, 153, 162, 163, 167, 170, 171, 177, 179, 181, 186, 187, 194, 196, 198, 204, 205, 206, 207, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 229, 230, 233, 234, 235, 238, 242, 245, 246, 247, 248, 249, 250, 252, 257, 258, 264, 265, 268, 276, 277, 278, 281, 285, 288, 289, 290, 291, 292, 293, 295, 300, 304, 306, 307, 308, 311, 314, 315, 316, 320, 325, 341, 342, 343, 345, 360, 362, 364, 367, 368, 369, 372, 380, 382, 387, 401, 424, 440, 442, 443, 451, 482, 488, 489, 491, 561, 563, 566, 568, 575, 577, 580, 585, 595, 597, 613, 616, 619, 623, 624, 628, 629, 630, 631, 634, 636, 651, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 665, 667, 670, 671, 673, 674, 675, 679, 680, 681, 683, 693, 695, 697, 698, 702, 705, 706, 707, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724], "distribute_calib_tensor": 13, "calib_tensor": 13, "calib_cfg": 13, "tensor_to_nod": 13, "distribut": [13, 16, 143, 176, 229, 230, 235, 237, 238, 242, 243, 244, 265, 278, 280, 281, 285, 286, 287, 387, 556, 563, 618, 633, 635, 654, 658, 668, 687, 690, 694, 697, 705, 712, 714, 717, 718, 720, 724, 726], "depend": [13, 233, 234, 263, 276, 277, 372, 424, 613, 629, 663, 664, 698, 713, 714, 723], "algorithm": [13, 44, 153, 156, 170, 178, 181, 193, 226, 230, 311, 318, 326, 363, 364, 371, 394, 401, 568, 612, 616, 618, 631, 634, 635, 636, 653, 658, 659, 664, 667, 670, 681, 686, 711, 714, 721, 725], "set": [13, 43, 51, 96, 105, 115, 148, 149, 162, 167, 170, 177, 179, 185, 189, 221, 227, 229, 230, 233, 234, 235, 245, 247, 250, 262, 263, 268, 269, 276, 277, 278, 288, 290, 293, 303, 314, 320, 333, 338, 342, 347, 367, 371, 372, 380, 423, 424, 443, 451, 472, 517, 531, 561, 563, 566, 575, 597, 612, 613, 621, 624, 628, 631, 635, 651, 654, 655, 658, 660, 662, 664, 666, 667, 668, 671, 672, 673, 675, 677, 679, 693, 694, 695, 696, 697, 698, 702, 705, 711, 713, 714, 717, 719, 720, 723, 725], "kl": [13, 16, 229, 230, 614, 618, 635, 636, 652, 664, 672, 723, 725], "minmax": [13, 16, 466, 635, 636, 652, 664, 714, 725], "calib_model": 13, "qsym_model": 13, "calib_data": [13, 161], "calibdata": 13, "threshold": [13, 173, 197, 614, 618, 671], "amp_convert": 13, "amp_cfg": 13, "support": [13, 42, 43, 44, 97, 104, 149, 167, 175, 178, 187, 189, 198, 204, 211, 215, 216, 229, 230, 233, 234, 244, 245, 247, 254, 258, 262, 264, 265, 266, 269, 276, 277, 287, 288, 290, 297, 300, 303, 310, 318, 320, 325, 341, 343, 347, 354, 360, 363, 371, 372, 376, 382, 385, 387, 388, 390, 391, 394, 401, 424, 434, 440, 443, 518, 613, 616, 618, 619, 624, 626, 633, 635, 653, 670, 672, 675, 680, 683, 686, 692, 699, 700, 703, 712, 716, 719, 723, 724], "amp": [13, 149, 675, 682, 701, 717], "wrap": [13, 105, 116, 149, 187, 225, 264, 314, 367, 468, 532, 598, 630, 660, 687, 690], "dataiterload": 13, "data_it": [13, 201], "collectorbas": 13, "calibcollector": 13, "include_tensors_kl": 13, "include_tensors_minmax": 13, "num_bin": [13, 16, 614], "8001": [13, 614, 700, 705, 706, 707], "tensorcollector": 13, "include_nod": 13, "qtensor_to_tensor": 13, "build": [13, 42, 44, 115, 172, 173, 175, 176, 321, 324, 375, 377, 379, 380, 381, 391, 400, 531, 566, 634, 635, 636, 668, 674, 685, 687, 689, 690, 693, 712, 723], "up": [13, 100, 212, 262, 303, 342, 521, 580, 660, 661, 664, 667, 683, 687, 690, 692, 711, 712, 713, 714, 719, 722, 723, 725], "namecollector": 13, "cache_kl": 13, "cache_minmax": 13, "tensors_kl": 13, "tensors_minmax": 13, "onnxruntimeadaptor": 14, "rt": 14, "onnxrt_weightonlyadaptor": 14, "onnxrt_qlinearopsadaptor": [14, 634], "onnxrt_integeropsadaptor": 14, "onnxrt_qdqadaptor": 14, "onnxrtqueri": 14, "dynam": [14, 149, 162, 230, 235, 278, 308, 360, 440, 563, 575, 634, 654, 658, 662, 667, 672, 675, 680, 681, 682, 683, 686, 692, 712, 723, 726], "static": [14, 41, 42, 47, 167, 175, 201, 230, 308, 360, 385, 424, 440, 451, 452, 462, 464, 466, 608, 634, 635, 636, 657, 662, 667, 672, 675, 680, 681, 682, 683, 686, 692, 695, 703, 705, 706, 707, 715, 720, 723, 726], "format": [14, 18, 43, 54, 148, 150, 170, 229, 230, 245, 246, 247, 288, 289, 290, 308, 314, 320, 360, 367, 440, 443, 451, 452, 475, 561, 619, 633, 635, 636, 653, 655, 660, 662, 671, 672, 673, 674, 675, 697, 700, 712, 714, 717, 718], "onnxrtaug": 15, "dump_op_typ": 15, "black_nod": 15, "white_nod": 15, "cpuexecutionprovid": [15, 41, 42, 44, 384, 385, 387, 388, 390, 396, 673, 714], "reduce_rang": [15, 41, 42, 229, 230, 401, 636, 713], "kwarg": [15, 43, 105, 122, 123, 124, 125, 126, 127, 128, 129, 132, 133, 135, 137, 138, 149, 163, 170, 171, 199, 229, 230, 247, 260, 262, 267, 270, 290, 303, 359, 361, 371, 372, 373, 375, 377, 379, 380, 381, 384, 393, 396, 400, 424, 439, 441, 443, 538, 539, 540, 541, 542, 543, 544, 545, 548, 549, 551, 553, 554, 566, 577, 582, 595, 597, 603, 613, 619, 620, 623, 624, 654], "augment": 15, "dump": [15, 160, 170, 177, 308, 384, 568, 576, 580, 624, 629, 697, 714, 718, 721], "calib_registri": 16, "calib_method": 16, "calibratorbas": 16, "minmaxcalibr": 16, "percentilecalibr": 16, "2048": [16, 149, 156, 171, 568, 582, 605, 624, 717], "percentil": [16, 44, 140, 171, 390, 391, 446, 466, 595, 597, 652], "99": [16, 179, 466, 726], "999": [16, 466, 725], "option": [16, 44, 105, 149, 150, 153, 162, 170, 171, 181, 185, 203, 229, 230, 233, 234, 245, 262, 276, 277, 288, 303, 307, 308, 314, 320, 341, 347, 360, 363, 367, 371, 372, 387, 388, 390, 391, 401, 424, 440, 442, 443, 568, 575, 581, 592, 595, 597, 598, 613, 617, 619, 624, 635, 636, 653, 654, 655, 664, 668, 672, 686, 700, 703, 705, 706, 707, 711, 714, 717, 719, 720, 722, 723, 725], "number": [16, 44, 67, 68, 105, 140, 149, 150, 170, 171, 178, 194, 197, 199, 205, 206, 229, 230, 243, 246, 258, 262, 286, 289, 300, 303, 315, 316, 318, 341, 350, 368, 369, 371, 387, 388, 390, 391, 418, 423, 428, 443, 446, 488, 489, 581, 583, 597, 616, 624, 651, 654, 655, 660, 671, 700, 702, 711, 714, 717, 719, 720, 722, 723], "bin": [16, 162, 163, 568, 575, 577, 624, 663], "histogram": [16, 568, 614, 624, 694, 721], "valu": [16, 43, 44, 56, 67, 68, 70, 89, 90, 105, 143, 148, 149, 162, 170, 176, 177, 179, 194, 196, 201, 202, 212, 220, 221, 227, 229, 230, 233, 234, 245, 248, 249, 258, 262, 263, 276, 277, 288, 291, 292, 300, 303, 314, 318, 342, 350, 353, 360, 367, 371, 372, 388, 401, 424, 428, 433, 440, 442, 443, 477, 488, 489, 491, 510, 511, 556, 561, 563, 575, 580, 585, 598, 613, 614, 616, 624, 630, 635, 636, 652, 655, 657, 664, 671, 672, 673, 678, 695, 697, 703, 709, 711, 713, 714, 717, 718, 720, 722, 723, 725], "default": [16, 44, 97, 148, 149, 150, 153, 162, 170, 171, 178, 179, 181, 185, 197, 221, 227, 229, 230, 233, 234, 237, 245, 246, 247, 258, 262, 276, 277, 280, 288, 289, 290, 300, 303, 307, 308, 311, 320, 342, 362, 364, 371, 380, 387, 388, 390, 391, 396, 401, 442, 462, 466, 518, 561, 566, 568, 575, 581, 592, 595, 597, 598, 605, 608, 616, 619, 624, 630, 634, 653, 654, 655, 664, 667, 668, 671, 672, 673, 680, 683, 685, 689, 697, 700, 705, 706, 707, 709, 711, 713, 714, 716, 717, 719, 720, 722, 723, 725], "float": [16, 43, 44, 140, 141, 149, 153, 157, 171, 179, 197, 203, 208, 218, 221, 229, 230, 245, 258, 288, 300, 312, 314, 315, 316, 343, 365, 367, 368, 369, 388, 391, 396, 439, 443, 446, 449, 466, 579, 583, 595, 597, 605, 608, 621, 624, 653, 655, 671, 713, 714, 720, 722], "A": [16, 55, 74, 75, 103, 116, 140, 141, 148, 149, 160, 170, 178, 179, 184, 186, 193, 194, 196, 198, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 229, 230, 247, 262, 265, 267, 268, 290, 303, 304, 311, 314, 315, 316, 318, 321, 324, 325, 326, 333, 336, 338, 341, 342, 343, 344, 345, 350, 364, 367, 368, 369, 371, 372, 376, 380, 428, 446, 449, 476, 495, 496, 532, 561, 565, 566, 568, 576, 579, 583, 597, 613, 624, 629, 635, 653, 654, 655, 661, 664, 671, 672, 674, 685, 686, 689, 692, 700, 711, 712, 714, 717, 720, 722, 723, 725], "between": [16, 42, 143, 176, 214, 229, 230, 262, 303, 315, 318, 368, 371, 418, 423, 556, 624, 630, 634, 635, 636, 652, 657, 658, 667, 671, 672, 683, 714, 717, 718, 719, 720, 722, 723], "0": [16, 43, 44, 54, 90, 105, 148, 149, 150, 153, 161, 162, 170, 171, 173, 175, 178, 179, 187, 194, 196, 197, 199, 221, 223, 225, 229, 230, 235, 237, 242, 244, 245, 248, 249, 252, 258, 262, 264, 265, 278, 280, 285, 287, 288, 291, 292, 295, 300, 303, 308, 309, 318, 325, 333, 338, 346, 371, 382, 387, 388, 390, 391, 394, 396, 401, 424, 429, 443, 466, 475, 511, 561, 563, 575, 580, 583, 595, 597, 605, 619, 630, 653, 654, 655, 658, 660, 662, 663, 664, 668, 669, 671, 672, 673, 678, 680, 685, 689, 695, 705, 706, 711, 713, 714, 715, 717, 718, 719, 720, 721, 722, 723, 725], "100": [16, 177, 178, 179, 194, 197, 229, 230, 247, 290, 396, 443, 464, 465, 468, 583, 651, 655, 660, 666, 672, 697, 713, 714, 722, 723, 725, 726], "klcalibr": 16, "128": [16, 44, 149, 154, 156, 170, 171, 223, 245, 248, 249, 262, 288, 291, 292, 303, 388, 396, 563, 581, 582, 597, 655, 672, 714, 717, 722, 726], "num_quantized_bin": 16, "histogramcollector": 16, "collctor": 16, "smooth_distribut": 16, "p": [16, 153, 693, 694, 717], "ep": [16, 176, 673], "0001": [16, 194, 229, 230, 658, 672, 713], "smooth": [16, 140, 141, 148, 167, 175, 229, 230, 359, 384, 393, 396, 446, 447, 449, 466, 561, 653, 711, 723], "discret": [16, 194, 723], "mai": [16, 148, 160, 162, 327, 328, 330, 331, 332, 443, 561, 575, 576, 598, 628, 629, 635, 652, 653, 657, 662, 663, 669, 673, 685, 689, 695, 698, 700, 712, 714, 717, 720, 723], "have": [16, 74, 83, 141, 148, 162, 198, 202, 204, 211, 243, 265, 286, 311, 314, 341, 343, 364, 367, 371, 424, 442, 443, 449, 495, 504, 561, 575, 628, 629, 635, 636, 653, 654, 655, 657, 660, 664, 669, 671, 672, 673, 675, 692, 695, 698, 700, 705, 706, 707, 709, 711, 714, 715, 717, 720, 723, 724], "been": [16, 149, 162, 198, 204, 211, 311, 341, 343, 364, 568, 575, 631, 636, 653, 658, 672, 673, 692, 717, 720], "normal": [16, 33, 262, 303, 316, 369, 672, 701, 709, 717, 720, 722], "1": [16, 42, 43, 44, 55, 74, 89, 105, 109, 113, 146, 148, 149, 150, 153, 162, 165, 167, 170, 171, 173, 175, 176, 177, 179, 187, 194, 196, 197, 209, 210, 212, 229, 230, 235, 237, 242, 244, 245, 246, 248, 249, 252, 253, 258, 262, 263, 264, 265, 278, 280, 285, 287, 288, 289, 291, 292, 295, 296, 300, 303, 309, 314, 315, 316, 318, 333, 338, 343, 346, 347, 367, 368, 369, 371, 382, 385, 387, 388, 390, 391, 394, 401, 424, 442, 443, 447, 476, 495, 510, 525, 529, 559, 561, 563, 568, 575, 580, 581, 594, 595, 597, 605, 616, 619, 624, 628, 630, 633, 634, 636, 652, 654, 655, 657, 658, 662, 664, 665, 668, 670, 671, 673, 676, 678, 694, 695, 702, 703, 705, 706, 707, 709, 710, 711, 713, 714, 715, 717, 718, 719, 720, 721, 722, 723, 724, 725], "replac": [16, 149, 163, 167, 170, 171, 316, 369, 577, 581, 597, 653, 660, 672, 683, 718], "zero": [16, 43, 44, 149, 150, 156, 171, 208, 221, 262, 303, 343, 388, 391, 401, 582, 597, 624, 633, 697, 711, 714, 717, 720, 722, 723], "multipli": [16, 229, 230, 717], "scale": [16, 43, 44, 100, 141, 143, 149, 156, 165, 167, 169, 170, 171, 175, 176, 258, 262, 300, 303, 387, 388, 391, 401, 449, 521, 556, 581, 582, 594, 595, 596, 597, 714, 717, 719, 720, 722, 723], "factor": [16, 141, 153, 449, 717, 720, 726], "take": [16, 203, 230, 233, 234, 238, 262, 267, 276, 277, 281, 303, 341, 350, 371, 372, 424, 428, 613, 628, 630, 631, 654, 657, 658, 664, 672, 692, 711, 714, 716, 717, 722, 723, 725], "correspond": [16, 157, 201, 212, 229, 230, 245, 288, 311, 314, 318, 364, 367, 371, 598, 616, 624, 634, 664, 672, 711, 713, 714, 719, 723], "amount": [16, 720], "off": [16, 67, 68, 70, 488, 489, 491, 629, 717], "non": [16, 342, 624, 630, 657, 717, 723], "ref": [16, 148, 561], "http": [16, 156, 157, 196, 197, 205, 206, 215, 216, 217, 223, 245, 247, 288, 290, 311, 312, 314, 315, 316, 341, 343, 344, 364, 365, 367, 368, 369, 371, 395, 424, 582, 605, 630, 633, 655, 657, 665, 668, 669, 672, 681, 687, 690, 694, 696, 697, 698, 699, 700, 703, 705, 706, 707, 711, 718], "hanj": 16, "c": [16, 74, 247, 290, 495, 624, 655, 663, 668, 717, 723], "illinoi": 16, "edu": [16, 247, 290, 655], "cs412": 16, "bk3": 16, "diverg": [16, 614, 618, 636, 652, 658, 723], "pdf": [16, 197, 223], "github": [16, 157, 205, 206, 217, 245, 288, 311, 312, 315, 316, 341, 344, 364, 365, 368, 369, 371, 395, 424, 629, 633, 655, 657, 661, 668, 669, 672, 681, 687, 690, 694, 696, 697, 698, 699, 700, 703, 706, 707, 718], "com": [16, 157, 205, 206, 217, 245, 288, 311, 312, 315, 316, 341, 344, 364, 365, 368, 369, 371, 395, 424, 628, 633, 653, 655, 657, 665, 668, 669, 672, 675, 681, 694, 696, 697, 699, 700, 703, 706, 707, 718, 719, 726], "apach": [16, 669], "incub": 16, "blob": [16, 157, 205, 206, 311, 312, 315, 316, 341, 364, 365, 368, 369, 371, 395, 424, 672, 681, 703, 706, 707], "master": [16, 205, 206, 217, 311, 312, 315, 316, 341, 344, 364, 365, 368, 369, 371, 424, 672, 723], "python": [16, 75, 148, 160, 162, 247, 266, 290, 310, 363, 395, 443, 496, 561, 568, 575, 576, 624, 626, 630, 653, 655, 657, 660, 663, 668, 672, 677, 683, 686, 692, 696, 697, 699, 700, 702, 705, 707, 711, 712, 722], "contrib": [16, 310, 363], "py": [16, 148, 157, 177, 208, 229, 230, 312, 314, 315, 316, 343, 365, 367, 368, 369, 395, 443, 561, 630, 634, 653, 657, 660, 668, 672, 677, 679, 680, 681, 687, 690, 694, 696, 697, 699, 700, 702, 703, 705, 706, 707, 714, 718, 721], "microsoft": [16, 395, 633, 634], "onnxruntim": [16, 229, 230, 241, 247, 254, 284, 290, 297, 319, 395, 418, 634, 652, 654, 667, 668, 673, 695, 713], "main": [16, 156, 189, 194, 212, 217, 269, 344, 393, 394, 395, 464, 465, 468, 582, 603, 604, 608, 630, 654, 657, 660, 672, 679, 681, 693, 702, 711, 714, 717], "tool": [16, 148, 307, 395, 561, 624, 633, 634, 672, 685, 689, 695, 698, 699, 700, 711, 712, 714], "arrai": [16, 43, 44, 148, 162, 262, 303, 314, 325, 367, 391, 401, 561, 575, 624, 722], "small": [16, 67, 68, 69, 70, 431, 488, 489, 490, 491, 631, 697, 698, 711, 717, 723, 726], "probabl": [16, 229, 230, 618, 717], "activationoper": 18, "onnx_quant": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40], "onnx_nod": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 87, 101, 111], "removableactivationoper": 18, "remov": [18, 43, 51, 57, 60, 74, 80, 83, 84, 85, 96, 98, 140, 199, 212, 316, 369, 446, 472, 478, 481, 495, 501, 504, 505, 506, 517, 519, 628, 672, 685, 689, 698, 705, 706, 711, 721], "qactivationoper": 18, "children": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 34, 35, 36, 38, 39, 163, 577], "initi": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 34, 35, 36, 38, 39, 42, 43, 44, 105, 116, 148, 153, 162, 187, 208, 233, 234, 242, 245, 264, 276, 277, 285, 288, 342, 343, 360, 391, 424, 440, 532, 561, 575, 585, 613, 631, 636, 655, 671, 691, 711, 714, 720, 723], "qoper": [18, 34, 229, 230, 662, 695], "float16activationoper": 18, "float16": [18, 21, 43, 149, 150, 598, 619, 655, 717], "argmaxoper": 19, "qargmaxoper": 19, "attentionoper": 20, "qattentionoper": 20, "qattent": 20, "binari": [21, 148, 318, 371, 561, 663, 671, 687, 690, 718], "binaryoper": 21, "binarydirect8bitoper": 21, "qbinaryoper": 21, "qbinari": 21, "float16binaryoper": 21, "concatoper": 22, "qconcatoper": 22, "qconcat": 22, "convoper": 23, "qconvoper": 23, "qlinearconv": 23, "direct8bit": 24, "direct8bitoper": 24, "qdirectoper": 24, "qdirect": 24, "embedlayernorm": 25, "embedlayernormalizationoper": 25, "qembedlayernormalizationoper": 25, "qembedlayernorm": 25, "gatheroper": 26, "qgatheroper": 26, "qgather": 26, "globalaveragepool": 27, "globalaveragepooloper": 27, "qglobalaveragepooloper": 27, "qlinearglobalaveragepool": 27, "gemmoper": 28, "qgemmoper": 28, "qgemm": 28, "lstmoper": 30, "matmuloper": 31, "qmatmuloper": 31, "qlinearmatmul": 31, "fusedmatmuloper": 31, "fusedmatmul": 31, "maxpooloper": 32, "qmaxpooloper": 32, "qmaxpool": 32, "batchnormalizationoper": 33, "batchnorm": [33, 62, 67, 121, 483, 488, 537, 630, 720], "normalizationoper": 33, "op_registri": 34, "op_typ": [34, 140, 141, 148, 224, 361, 396, 441, 446, 449, 466, 561, 580], "qop_registri": 34, "padoper": 35, "qpadoper": 35, "qpad": 35, "averagepool": 36, "pooloper": 36, "qpooloper": 36, "qlinearaveragepool": 36, "reduceoper": 37, "reduceminmaxoper": 37, "reducemin": 37, "reducemax": 37, "resizeoper": 38, "qresizeoper": 38, "qresiz": 38, "splitoper": 39, "qsplitoper": 39, "qsplit": 39, "unari": 40, "unaryoper": 40, "unarydirect8bitoper": 40, "q_config": [41, 170, 308, 634], "mode": [41, 42, 43, 45, 110, 162, 167, 254, 297, 314, 360, 367, 380, 385, 401, 440, 526, 566, 575, 608, 621, 623, 624, 634, 635, 657, 667, 685, 689, 697, 698, 714, 716, 717, 723], "quantization_param": 41, "op_types_to_quant": 41, "fallback_list": 41, "fp32": [41, 42, 44, 79, 131, 136, 143, 170, 171, 176, 229, 230, 233, 234, 276, 277, 307, 308, 318, 353, 360, 371, 387, 388, 390, 391, 396, 429, 433, 440, 464, 468, 500, 547, 552, 556, 568, 581, 595, 597, 616, 619, 623, 624, 629, 633, 634, 636, 657, 664, 665, 671, 672, 673, 682, 694, 695, 696, 697, 713, 714, 716, 717, 718, 719, 720, 721, 723, 725, 726], "add_qdq_pair_to_weight": [41, 229, 230, 714], "optypes_to_exclude_output_qu": [41, 229, 230, 714], "dedicated_qdq_pair": [41, 229, 230, 714], "smoothquant": [42, 167, 170, 175, 385, 447, 633, 670, 712, 717, 724], "onnxrt": [42, 43, 44, 245, 247, 254, 262, 288, 290, 297, 303, 318, 371, 417, 622, 634, 657, 673, 694, 714, 726], "get_quant_dequant_output": 42, "input_data": [42, 654], "output_data": 42, "loss": [42, 179, 187, 229, 230, 264, 309, 318, 333, 338, 346, 371, 598, 613, 652, 657, 658, 659, 660, 661, 670, 671, 672, 673, 683, 695, 697, 710, 711, 712, 714, 717, 720, 723, 725], "output": [42, 43, 44, 51, 54, 59, 74, 98, 105, 110, 148, 149, 150, 170, 171, 190, 201, 202, 207, 221, 227, 229, 230, 233, 234, 267, 271, 276, 277, 307, 308, 311, 341, 364, 371, 372, 380, 391, 424, 472, 475, 480, 495, 519, 526, 561, 566, 568, 580, 595, 597, 598, 613, 619, 620, 624, 630, 634, 635, 658, 659, 660, 662, 664, 666, 671, 672, 674, 683, 692, 693, 695, 700, 701, 705, 706, 707, 710, 711, 713, 714, 717, 718, 720, 721, 722, 723, 725], "numpi": [42, 43, 67, 68, 70, 105, 148, 262, 303, 314, 325, 367, 391, 488, 489, 491, 561, 663, 720, 722], "7": [42, 171, 177, 197, 229, 230, 382, 396, 401, 597, 636, 651, 663, 664, 672, 711, 714, 718, 720, 723, 726], "bit": [42, 44, 149, 154, 170, 171, 229, 230, 387, 388, 390, 391, 401, 442, 581, 595, 597, 605, 636, 652, 659, 673, 712, 714, 717, 720], "execut": [42, 43, 54, 156, 162, 177, 208, 209, 210, 229, 230, 343, 347, 349, 388, 423, 424, 425, 427, 475, 575, 579, 582, 613, 616, 623, 624, 657, 658, 659, 672, 673, 677, 678, 685, 686, 692, 693, 694, 695, 699, 702, 710, 711, 714, 717, 719, 723, 726], "provid": [42, 43, 44, 102, 105, 110, 149, 201, 233, 234, 262, 276, 277, 303, 309, 314, 333, 338, 346, 347, 367, 372, 384, 385, 387, 388, 390, 391, 396, 424, 526, 583, 613, 617, 619, 631, 633, 634, 635, 636, 651, 654, 657, 659, 660, 661, 667, 668, 670, 671, 672, 673, 674, 675, 679, 683, 686, 692, 693, 694, 700, 701, 711, 713, 714, 717, 720, 721, 723, 724, 725, 726], "make_sub_graph": 42, "opset": [42, 102, 104, 105, 230, 307, 308, 662], "ir_vers": 42, "thi": [42, 45, 86, 110, 132, 139, 143, 147, 149, 153, 157, 160, 162, 170, 171, 176, 179, 181, 186, 190, 193, 199, 201, 203, 205, 206, 207, 208, 212, 213, 214, 215, 217, 218, 219, 225, 229, 230, 233, 234, 244, 245, 246, 247, 248, 249, 250, 252, 262, 265, 271, 272, 276, 277, 287, 288, 289, 290, 291, 292, 293, 295, 303, 311, 314, 315, 316, 318, 327, 328, 330, 331, 332, 333, 338, 341, 343, 345, 346, 347, 350, 353, 364, 367, 368, 369, 371, 372, 382, 424, 428, 433, 442, 443, 507, 526, 548, 555, 556, 560, 563, 575, 576, 580, 581, 598, 613, 623, 624, 628, 629, 630, 631, 634, 635, 636, 652, 653, 654, 655, 658, 659, 660, 662, 663, 664, 667, 669, 670, 671, 672, 673, 674, 675, 677, 678, 680, 681, 683, 685, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 705, 706, 707, 711, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724], "quant_dequant_data": 42, "qtype": [42, 43, 401, 634], "3": [42, 44, 148, 149, 150, 162, 179, 197, 210, 230, 247, 262, 290, 303, 314, 367, 387, 388, 390, 391, 396, 443, 561, 575, 624, 630, 631, 633, 652, 653, 654, 655, 658, 660, 662, 664, 665, 668, 671, 672, 673, 675, 679, 683, 685, 689, 694, 699, 700, 702, 703, 705, 709, 711, 713, 714, 717, 718, 719, 720, 722, 723, 726], "scheme": [42, 43, 44, 149, 154, 165, 170, 171, 387, 388, 390, 391, 401, 581, 594, 595, 597, 634, 635, 636, 654, 664, 683, 717, 723, 725], "sym": [42, 43, 44, 149, 150, 171, 401, 581, 595, 597, 635, 636, 664, 714, 717, 725], "dequant": [42, 43, 44, 51, 88, 91, 92, 93, 94, 96, 149, 157, 170, 171, 391, 472, 509, 512, 513, 514, 515, 517, 568, 597, 624, 630, 635, 720, 721], "asym": [42, 43, 44, 149, 154, 165, 170, 171, 387, 388, 390, 391, 401, 581, 594, 595, 597, 636, 664, 717, 725], "ortsmoothqu": 42, "fake": [42, 44, 113, 165, 167, 171, 175, 181, 385, 442, 529, 581, 594, 595, 597, 672, 714, 717, 720], "channel": [42, 43, 44, 143, 150, 167, 171, 175, 176, 199, 202, 207, 229, 230, 258, 262, 300, 303, 341, 385, 388, 556, 595, 597, 619, 633, 634, 636, 667, 668, 675, 677, 682, 697, 711, 717, 722, 726], "For": [42, 44, 149, 170, 171, 175, 181, 197, 201, 202, 205, 206, 217, 230, 247, 262, 290, 303, 315, 316, 318, 341, 344, 368, 369, 371, 372, 385, 387, 388, 390, 424, 581, 595, 597, 628, 630, 632, 634, 636, 658, 659, 660, 662, 664, 667, 675, 677, 678, 680, 683, 694, 695, 700, 711, 716, 717, 720, 721, 723, 725, 726], "more": [42, 148, 149, 167, 175, 179, 181, 205, 206, 262, 303, 341, 385, 561, 598, 631, 632, 633, 635, 652, 653, 655, 658, 660, 662, 665, 667, 668, 670, 672, 673, 675, 683, 687, 690, 695, 700, 709, 710, 711, 716, 717, 720, 723, 724, 726], "detail": [42, 153, 167, 175, 178, 179, 201, 262, 303, 385, 624, 625, 628, 633, 635, 636, 652, 653, 658, 664, 665, 666, 670, 671, 672, 673, 675, 683, 692, 700, 701, 711, 717, 718, 719, 720, 721, 723, 724], "pleas": [42, 149, 156, 157, 167, 175, 196, 205, 206, 207, 215, 216, 217, 229, 230, 245, 246, 247, 250, 288, 289, 290, 293, 341, 343, 344, 371, 385, 424, 443, 582, 630, 631, 632, 633, 634, 651, 652, 655, 659, 660, 662, 668, 670, 671, 673, 675, 676, 680, 683, 699, 700, 701, 711, 714, 716, 717, 718, 719, 720, 723, 724], "refer": [42, 149, 156, 157, 167, 175, 196, 205, 206, 207, 215, 216, 217, 221, 229, 230, 245, 288, 311, 312, 318, 341, 343, 344, 364, 365, 371, 385, 424, 443, 582, 630, 634, 635, 651, 654, 655, 657, 659, 660, 662, 666, 668, 669, 671, 672, 673, 675, 680, 683, 694, 695, 697, 699, 700, 701, 709, 713, 715, 718, 722, 723], "accur": [42, 156, 167, 175, 216, 385, 582, 605, 711, 717, 720], "effici": [42, 167, 175, 385, 631, 633, 652, 654, 658, 675, 700, 710, 711, 712, 717, 720, 723], "post": [42, 97, 98, 156, 167, 175, 215, 230, 233, 234, 276, 277, 385, 424, 518, 519, 582, 605, 628, 633, 634, 635, 657, 659, 660, 662, 667, 668, 675, 681, 692, 702, 711, 712, 715, 717, 720, 721, 723], "train": [42, 57, 80, 149, 156, 167, 175, 186, 209, 210, 213, 215, 216, 229, 230, 233, 234, 245, 247, 262, 272, 276, 277, 288, 290, 303, 304, 320, 343, 363, 385, 424, 478, 501, 582, 605, 616, 631, 633, 634, 635, 641, 655, 657, 658, 659, 662, 667, 673, 675, 681, 692, 697, 705, 710, 712, 715, 717, 719, 720, 723, 725], "larg": [42, 43, 167, 175, 216, 385, 633, 654, 658, 670, 672, 712, 715, 717, 720, 726], "languag": [42, 167, 175, 216, 311, 364, 385, 628, 633, 662, 670, 696, 712, 715, 717, 720], "2": [42, 43, 44, 54, 74, 105, 109, 149, 150, 162, 167, 171, 173, 175, 177, 179, 197, 203, 209, 210, 223, 229, 230, 246, 263, 289, 314, 316, 318, 343, 350, 367, 369, 371, 382, 385, 387, 388, 390, 391, 401, 428, 443, 475, 495, 525, 575, 581, 595, 597, 624, 630, 634, 652, 654, 655, 657, 658, 664, 667, 668, 669, 670, 671, 673, 696, 702, 703, 705, 706, 707, 709, 711, 712, 714, 715, 717, 718, 719, 720, 722, 723, 724], "spiq": [42, 167, 175, 385, 720], "free": [42, 167, 175, 215, 233, 234, 276, 277, 385, 424, 628, 681, 686, 694, 702, 709, 719, 720], "per": [42, 43, 44, 167, 171, 175, 177, 229, 230, 263, 385, 388, 391, 597, 598, 618, 634, 636, 654, 700, 711, 716, 717, 726], "we": [42, 43, 67, 68, 70, 74, 86, 143, 150, 162, 167, 175, 176, 177, 179, 201, 205, 212, 229, 230, 244, 263, 265, 287, 311, 314, 364, 367, 385, 395, 401, 431, 488, 489, 491, 495, 507, 556, 575, 628, 630, 634, 635, 636, 653, 654, 657, 660, 662, 664, 670, 671, 672, 679, 680, 683, 687, 690, 692, 693, 695, 698, 705, 706, 707, 709, 710, 711, 713, 714, 715, 717, 718, 719, 720, 721, 723, 724], "onli": [42, 44, 54, 63, 70, 86, 109, 115, 143, 162, 167, 169, 171, 175, 176, 177, 189, 194, 198, 204, 211, 229, 230, 245, 263, 265, 269, 288, 308, 320, 341, 343, 354, 385, 391, 394, 396, 424, 434, 442, 443, 475, 484, 491, 507, 525, 531, 556, 575, 582, 596, 598, 605, 624, 633, 634, 635, 636, 651, 652, 654, 657, 658, 660, 663, 664, 670, 672, 673, 680, 693, 711, 712, 713, 714, 715, 720, 721, 723, 724, 725], "inplac": [42, 167, 385, 579, 595, 608], "mean": [42, 44, 149, 167, 171, 203, 212, 229, 230, 258, 262, 300, 303, 316, 318, 341, 353, 369, 371, 385, 433, 595, 630, 635, 636, 654, 657, 660, 664, 671, 672, 678, 697, 711, 714, 715, 717, 720, 722, 723, 725, 726], "weight": [42, 43, 44, 60, 61, 122, 140, 141, 143, 148, 149, 150, 153, 154, 157, 167, 169, 170, 171, 176, 179, 196, 198, 202, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 218, 220, 229, 230, 308, 341, 343, 360, 371, 385, 387, 388, 390, 391, 394, 396, 401, 424, 431, 440, 442, 446, 449, 481, 482, 538, 556, 561, 568, 581, 582, 596, 597, 598, 605, 624, 625, 633, 634, 635, 636, 652, 657, 659, 664, 666, 670, 672, 694, 705, 709, 711, 712, 713, 714, 715, 720, 721, 723, 724, 725], "chang": [42, 96, 143, 149, 150, 167, 176, 209, 210, 212, 213, 215, 216, 219, 229, 230, 343, 345, 385, 431, 517, 556, 624, 629, 635, 654, 660, 663, 669, 672, 675, 685, 686, 689, 692, 698, 711, 721, 722, 723], "you": [42, 162, 167, 229, 230, 243, 245, 286, 288, 343, 371, 385, 424, 575, 598, 629, 630, 635, 653, 654, 655, 657, 660, 668, 669, 671, 673, 675, 677, 678, 680, 685, 689, 692, 693, 694, 695, 696, 697, 698, 700, 711, 714, 717, 718, 719, 720, 721, 724], "can": [42, 43, 44, 143, 153, 157, 162, 167, 176, 179, 193, 201, 202, 203, 208, 216, 217, 219, 229, 230, 233, 234, 244, 247, 262, 263, 265, 276, 277, 287, 290, 303, 314, 316, 318, 341, 343, 345, 367, 369, 371, 372, 382, 385, 391, 401, 424, 556, 575, 598, 613, 624, 630, 631, 633, 634, 635, 636, 651, 653, 654, 655, 657, 658, 659, 660, 662, 664, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 679, 680, 681, 683, 685, 686, 687, 689, 690, 692, 693, 695, 697, 698, 699, 700, 702, 709, 710, 711, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 725, 726], "recov": [42, 167, 385, 623, 624, 634, 659], "helper": [43, 45, 110, 116, 148, 170, 245, 246, 247, 261, 288, 289, 290, 302, 306, 307, 308, 380, 401, 526, 532, 561, 566, 583, 622], "get_node_original_nam": 43, "origin": [43, 44, 140, 148, 149, 163, 167, 170, 197, 201, 213, 221, 223, 230, 245, 262, 263, 288, 303, 327, 328, 330, 331, 332, 342, 343, 362, 391, 401, 429, 442, 446, 561, 577, 597, 619, 624, 629, 655, 680, 711, 714, 722, 723, 725], "simple_progress_bar": [43, 401], "total": [43, 208, 262, 303, 318, 343, 371, 401, 655, 657, 711, 717, 722, 726], "progress": [43, 195, 198, 211, 247, 290, 401, 686, 692, 694, 711, 714], "bar": [43, 247, 290, 401, 692, 712], "case": [43, 70, 74, 153, 162, 171, 177, 179, 230, 244, 261, 262, 263, 287, 302, 303, 309, 333, 338, 346, 382, 401, 491, 495, 575, 581, 636, 653, 654, 658, 659, 660, 664, 666, 671, 676, 680, 692, 693, 694, 697, 703, 706, 707, 709, 711, 712, 714, 717, 718, 720, 722, 724, 725, 726], "where": [43, 153, 162, 229, 230, 314, 318, 367, 371, 401, 442, 575, 624, 636, 652, 657, 658, 685, 689, 693, 720, 721], "tqdm": [43, 401, 672], "t": [43, 67, 68, 70, 143, 153, 162, 176, 203, 229, 230, 262, 265, 303, 316, 369, 401, 488, 489, 491, 556, 575, 630, 634, 653, 657, 658, 660, 672, 673, 693, 698, 711, 714, 717, 723, 725], "dtype_to_nam": 43, "dtype_map": 43, "dtype": [43, 44, 102, 105, 150, 229, 230, 248, 249, 258, 262, 291, 292, 300, 303, 391, 563, 595, 597, 598, 605, 619, 635, 636, 655, 657, 662, 664, 675, 697, 713, 714, 717, 720, 721, 722, 725], "its": [43, 60, 96, 148, 157, 201, 210, 213, 215, 221, 230, 241, 247, 262, 284, 290, 303, 306, 312, 313, 343, 350, 365, 366, 428, 481, 517, 561, 628, 655, 658, 669, 671, 673, 683, 685, 689, 692, 693, 711, 717, 719, 722, 723], "string": [43, 45, 116, 148, 149, 156, 160, 162, 177, 185, 187, 189, 193, 194, 201, 203, 208, 217, 218, 219, 221, 226, 229, 230, 247, 264, 269, 290, 304, 309, 311, 314, 320, 321, 322, 324, 325, 333, 338, 341, 342, 343, 344, 345, 346, 364, 367, 376, 380, 401, 532, 561, 566, 568, 575, 576, 582, 592, 616, 621, 624, 671, 722], "represent": [43, 160, 576, 628, 630, 652, 659, 711, 714], "quanttyp": [43, 442], "repres": [43, 203, 207, 208, 217, 218, 221, 247, 252, 290, 295, 314, 316, 318, 367, 369, 371, 387, 388, 390, 391, 628, 636, 652, 655, 662, 700, 711, 714, 715, 723], "make_quant_nod": 43, "make": [43, 105, 143, 176, 193, 203, 208, 217, 219, 243, 286, 341, 343, 345, 556, 624, 628, 634, 635, 651, 653, 654, 664, 671, 672, 680, 685, 689, 692, 694, 711, 714, 715, 716, 717, 719, 720, 723], "quantizelinear": 43, "make_dquant_nod": 43, "axi": [43, 230], "dequantizelinear": 43, "is_b_transpos": [43, 401], "inuput": [43, 401], "b": [43, 74, 149, 153, 245, 288, 401, 495, 624, 629, 652, 655, 671, 711, 717, 720, 723], "transpos": [43, 73, 150, 207, 258, 262, 303, 307, 341, 401, 494, 717, 722], "split_shared_bia": 43, "share": [43, 44, 82, 98, 109, 141, 149, 171, 391, 449, 503, 519, 525, 581, 595, 597, 663, 664, 717, 720, 723], "float_to_float16": 43, "float_to_bfloat16": 43, "bfloat16": [43, 598, 673, 675, 683, 716], "cast_tensor": 43, "is_large_model": 43, "tensorproto": [43, 105], "raw": [43, 177, 246, 250, 253, 289, 293, 296, 353, 433, 671, 696, 723], "remove_init_from_model_input": 43, "collate_pr": 43, "result": [43, 148, 157, 170, 179, 258, 262, 300, 303, 311, 314, 315, 316, 318, 364, 367, 368, 369, 371, 404, 424, 431, 561, 580, 613, 623, 624, 628, 631, 633, 654, 657, 658, 660, 667, 669, 671, 672, 680, 681, 692, 693, 696, 700, 701, 702, 703, 709, 711, 712, 714, 717, 719, 720, 721, 722, 723, 724, 726], "quantize_data_with_scale_zero": 43, "zero_point": [43, 44, 391], "point": [43, 44, 149, 171, 258, 300, 315, 316, 325, 350, 368, 369, 388, 391, 401, 428, 597, 624, 671, 692, 697, 698, 714, 717, 720, 722, 723], "To": [43, 314, 367, 382, 401, 629, 635, 636, 653, 655, 657, 660, 673, 676, 679, 685, 687, 689, 690, 694, 698, 711, 713, 716, 717, 718, 720, 723, 725], "pack": [43, 61, 401, 482], "comput": [43, 44, 105, 149, 153, 157, 170, 311, 312, 315, 316, 318, 364, 365, 368, 369, 371, 387, 388, 390, 391, 401, 598, 613, 624, 652, 654, 659, 662, 671, 672, 673, 675, 686, 695, 711, 712, 714, 717, 720, 723], "linear": [43, 149, 150, 156, 165, 169, 170, 171, 175, 199, 201, 202, 207, 212, 221, 224, 229, 230, 341, 401, 582, 594, 596, 597, 630, 658, 662, 672, 711, 717, 720, 723], "transform": [43, 50, 143, 145, 146, 147, 149, 156, 166, 169, 215, 245, 246, 247, 248, 249, 250, 252, 254, 256, 288, 289, 290, 291, 292, 293, 295, 297, 299, 310, 363, 401, 471, 556, 558, 559, 560, 563, 579, 580, 582, 596, 605, 630, 631, 633, 652, 655, 658, 659, 660, 661, 665, 670, 672, 675, 680, 681, 682, 683, 695, 703, 706, 707, 711, 712, 716, 717, 720, 721, 723, 725, 726], "when": [43, 54, 64, 70, 148, 160, 162, 179, 202, 208, 213, 221, 229, 230, 245, 246, 254, 262, 288, 289, 297, 303, 312, 342, 343, 365, 401, 424, 475, 485, 491, 561, 575, 576, 598, 613, 628, 631, 635, 653, 654, 655, 672, 683, 685, 686, 689, 693, 694, 697, 698, 699, 701, 705, 711, 714, 717, 720, 722, 723], "uint8": [43, 171, 258, 300, 314, 362, 367, 401, 442, 597, 634, 655, 664, 713, 714, 722, 725], "rmin": [43, 401, 714], "rmax": [43, 401, 714], "m": [43, 157, 171, 205, 206, 229, 230, 341, 401, 597, 629, 658, 668, 675, 677, 680, 683, 687, 690, 700, 711, 726], "max": [43, 104, 143, 149, 171, 176, 179, 194, 197, 229, 230, 262, 303, 315, 316, 350, 368, 369, 401, 428, 556, 568, 597, 624, 633, 657, 668, 672, 695, 697, 711, 714, 717, 720, 722, 723], "ab": [43, 156, 171, 196, 215, 216, 343, 401, 582, 597, 605, 711, 714, 720], "np": [43, 262, 303, 350, 391, 428, 660, 702, 720, 722, 723], "calculate_scale_zp": 43, "quantize_rang": [43, 401], "calcul": [43, 60, 170, 196, 205, 221, 230, 248, 249, 291, 292, 315, 316, 341, 343, 353, 368, 369, 433, 481, 563, 614, 624, 652, 655, 671, 672, 683, 695, 709, 711, 714, 717, 719, 720, 723, 725], "quantize_data": [43, 401], "add": [43, 53, 64, 109, 119, 148, 189, 221, 229, 230, 245, 247, 269, 288, 290, 342, 360, 401, 440, 474, 485, 525, 535, 561, 624, 629, 630, 636, 654, 655, 660, 662, 664, 671, 672, 687, 690, 694, 695, 702, 705, 706, 719, 720, 721, 723, 724], "necessari": [43, 217, 401, 628, 631, 635, 674, 693, 711, 719, 723], "intermedi": [43, 157, 187, 229, 230, 264, 401, 630, 667, 714], "full": [43, 149, 150, 245, 246, 247, 288, 289, 290, 401, 619, 624, 633, 652, 655, 657, 663, 669, 693, 698, 711, 717, 718], "equat": [43, 316, 318, 369, 371, 401, 714, 720], "r": [43, 143, 176, 401, 556, 657, 668, 693, 694, 696, 697, 699, 700, 714, 726], "": [43, 44, 105, 143, 148, 162, 176, 201, 202, 203, 207, 208, 209, 210, 213, 215, 216, 221, 224, 226, 227, 229, 230, 244, 247, 261, 262, 263, 265, 267, 287, 290, 302, 303, 316, 341, 343, 369, 371, 372, 376, 388, 401, 424, 556, 561, 568, 575, 585, 597, 598, 621, 624, 628, 629, 631, 635, 636, 653, 657, 658, 660, 662, 664, 667, 672, 673, 680, 683, 685, 689, 692, 695, 697, 700, 710, 711, 712, 713, 714, 717, 718, 719, 720, 723, 724, 725, 726], "q": [43, 44, 107, 109, 131, 401, 523, 525, 547, 717, 720], "z": [43, 401, 652, 653, 658, 720], "real": [43, 248, 265, 291, 401, 563, 635, 652, 660, 694, 701, 712, 714], "quantize_data_per_channel": 43, "dequantize_data_with_scale_zero": 43, "tensor_valu": 43, "scale_valu": 43, "zo_valu": 43, "dequantize_data": 43, "valueinfo": 43, "tensor_nam": [43, 148, 162, 163, 561, 575, 577], "new_dtyp": 43, "cast": [43, 51, 472, 716, 722], "info": [43, 170, 171, 205, 206, 221, 260, 265, 270, 341, 376, 568, 580, 581, 619, 620, 624, 630, 653, 657, 674, 702, 707], "quantizedvalu": 43, "new_quantized_nam": 43, "scale_nam": 43, "zero_point_nam": 43, "quantized_value_typ": 43, "quint8": 43, "linearli": 43, "quantizediniti": 43, "quantized_data": 43, "quantizationmod": 43, "quantizedvaluetyp": 43, "quantformat": 43, "quantize_nparrai": 43, "arr": [43, 568, 624], "low": [43, 149, 150, 233, 234, 248, 249, 276, 277, 291, 292, 309, 319, 346, 372, 563, 634, 635, 651, 652, 655, 660, 672, 673, 697, 712, 714, 717, 720, 723], "high": [43, 248, 249, 291, 292, 563, 655, 657, 668, 697, 712, 723], "attribute_to_kwarg": 43, "attribut": [43, 83, 104, 105, 148, 170, 201, 212, 227, 230, 504, 561, 598, 624, 634, 654, 664, 666, 672, 713, 725], "make_nod": 43, "find_by_nam": [43, 401], "item_list": [43, 401], "find": [43, 67, 68, 70, 105, 148, 224, 318, 325, 350, 371, 401, 428, 488, 489, 491, 561, 624, 634, 657, 670, 678, 685, 689, 692, 693, 695, 697, 711, 717, 719, 720, 721, 723], "item": [43, 221, 227, 229, 230, 261, 302, 342, 360, 401, 440, 568, 585, 652, 660, 711, 720, 723], "trt_env_setup": 43, "environ": [43, 177, 263, 628, 651, 685, 689, 692, 700, 703, 705, 706, 707, 723], "variabl": [43, 160, 177, 218, 229, 230, 247, 263, 290, 350, 428, 442, 576, 668, 711, 723], "tensorrt": [43, 652, 673, 714], "to_numpi": 43, "infer_shap": 43, "in_mp": 43, "int_max": 43, "31": [43, 726], "auto_merg": 43, "guess_output_rank": 43, "verbos": [43, 308, 350, 428], "base_dir": 43, "shape": [43, 44, 105, 148, 149, 203, 248, 249, 258, 262, 291, 292, 300, 303, 314, 367, 391, 561, 563, 633, 655, 664, 665, 672, 694, 695, 717, 720, 722], "weightonli": 44, "get_blob_s": 44, "group_siz": [44, 149, 154, 165, 170, 171, 387, 388, 390, 391, 442, 581, 594, 595, 597, 605, 717], "has_zp": 44, "blob_siz": 44, "how": [44, 149, 162, 171, 179, 186, 196, 203, 209, 210, 215, 216, 229, 230, 262, 303, 304, 341, 391, 575, 595, 597, 629, 630, 632, 634, 654, 655, 658, 659, 660, 666, 671, 672, 686, 687, 690, 691, 692, 694, 705, 706, 707, 711, 712, 714, 720, 722, 723, 724, 725], "mani": [44, 149, 171, 371, 391, 424, 595, 597, 653, 654, 668, 717, 723, 725], "element": [44, 149, 171, 179, 205, 206, 221, 243, 286, 314, 341, 367, 391, 595, 597, 624, 655, 667, 671, 711, 717, 720], "one": [44, 109, 110, 115, 149, 150, 162, 170, 171, 177, 203, 207, 212, 215, 216, 217, 219, 262, 272, 303, 311, 314, 318, 320, 341, 344, 345, 364, 367, 371, 391, 525, 526, 531, 575, 580, 595, 597, 598, 631, 634, 652, 658, 659, 660, 664, 667, 668, 671, 672, 673, 675, 676, 680, 681, 683, 685, 686, 689, 692, 693, 694, 697, 698, 699, 700, 702, 709, 710, 711, 713, 714, 715, 717, 718, 720, 722, 723], "zp": [44, 149, 171, 391, 595, 597, 720], "make_matmul_weight_only_nod": [44, 391], "weight_shap": [44, 391], "num_bit": [44, 113, 149, 165, 170, 171, 387, 388, 390, 391, 529, 594, 720], "k_block": [44, 391], "q_weight": [44, 391], "accuracy_level": [44, 387, 388, 390, 391, 396], "matmulfpq4": [44, 391], "accuraci": [44, 177, 179, 221, 229, 230, 233, 234, 276, 277, 304, 309, 318, 333, 338, 346, 371, 372, 382, 387, 388, 390, 391, 394, 424, 429, 443, 598, 613, 621, 630, 633, 635, 636, 652, 654, 655, 657, 659, 660, 661, 662, 670, 671, 672, 683, 692, 694, 701, 702, 705, 706, 709, 710, 711, 712, 713, 717, 718, 719, 720, 721, 724, 725, 726], "level": [44, 181, 201, 387, 388, 390, 391, 429, 443, 620, 628, 702, 720, 723], "unset": [44, 387, 388, 390, 391], "jbla": [44, 387, 388, 390, 391], "kernel": [44, 175, 229, 230, 387, 388, 390, 391, 634, 635, 723], "fp16": [44, 230, 360, 387, 388, 390, 391, 440, 714], "4": [44, 54, 149, 150, 154, 165, 170, 171, 177, 197, 203, 212, 229, 230, 254, 257, 258, 262, 297, 300, 303, 311, 312, 314, 364, 365, 367, 387, 388, 390, 391, 394, 396, 442, 443, 475, 581, 594, 595, 597, 605, 628, 634, 636, 651, 660, 661, 664, 667, 668, 671, 672, 680, 700, 702, 706, 711, 714, 717, 720, 722, 723, 726], "matmulnbit": [44, 391], "new_init": [44, 391], "matmul_weight_only_nod": [44, 391], "quant_tensor": [44, 391, 597], "32": [44, 149, 154, 171, 199, 387, 388, 390, 391, 396, 442, 581, 595, 597, 605, 660, 666, 717, 726], "ratio": [44, 143, 176, 203, 208, 221, 229, 230, 258, 262, 300, 303, 343, 390, 391, 556, 655, 672, 695, 711, 722, 726], "group": [44, 149, 150, 153, 171, 218, 328, 387, 388, 390, 391, 597, 633, 667, 711, 717, 721, 722, 723, 726], "clip": [44, 171, 387, 390, 391, 581, 595, 597, 717, 720], "qdq_tensor": [44, 391], "quant": [44, 148, 149, 170, 171, 229, 230, 360, 384, 387, 388, 391, 393, 396, 440, 451, 452, 462, 466, 561, 581, 595, 597, 630, 653, 670, 672, 714], "pad_tensor": [44, 391], "rowi": [44, 391], "so": [44, 105, 262, 303, 391, 442, 630, 634, 657, 663, 667, 673, 678, 680, 696, 697, 698, 714, 716, 717, 720, 721, 722, 724], "divis": [44, 391], "pade": [44, 391], "rtn_quantiz": [44, 171, 390, 595], "weight_config": [44, 149, 150, 154, 156, 169, 171, 387, 388, 390, 581, 582, 595, 596], "round": [44, 143, 149, 171, 176, 390, 396, 556, 595, 605, 633, 712, 714, 717, 720], "nearst": [44, 171, 390], "method": [44, 141, 143, 149, 160, 162, 170, 171, 193, 218, 229, 230, 238, 243, 244, 245, 247, 254, 262, 265, 281, 286, 287, 288, 290, 297, 303, 324, 325, 326, 360, 387, 388, 390, 440, 442, 449, 556, 575, 576, 581, 595, 598, 616, 617, 619, 620, 630, 631, 633, 652, 653, 654, 655, 657, 658, 659, 671, 672, 710, 711, 714, 716, 717, 720, 722, 723], "modelproto": [44, 306, 372, 385, 387, 388, 390, 391, 393, 394, 401, 674], "onnxmodel": [44, 379, 384, 385, 387, 388, 390, 391, 400, 417], "fc2": [44, 170, 171, 387, 388, 390, 581, 595, 597], "rtn": [44, 170, 393, 396, 466, 603, 605, 653, 715, 717], "get_weight_scal": 44, "apply_awq_scal": 44, "absorb_pair": 44, "output_dict": 44, "appli": [44, 113, 126, 127, 128, 131, 133, 137, 148, 149, 165, 169, 186, 212, 214, 272, 312, 365, 387, 388, 390, 393, 464, 529, 542, 543, 544, 547, 549, 553, 561, 594, 596, 603, 628, 635, 636, 672, 675, 677, 683, 692, 696, 697, 702, 710, 711, 714, 716, 719, 720, 723, 724, 725], "salient": [44, 171, 581, 711, 717], "apply_awq_clip": 44, "mse": [44, 170, 171, 229, 230, 310, 318, 352, 363, 371, 388, 396, 424, 432, 581, 624, 657, 671, 697, 713, 717, 718], "prepare_input": [44, 391], "n_sampl": [44, 149, 154, 170, 171, 581, 597], "sampl": [44, 77, 149, 170, 171, 179, 229, 230, 238, 243, 245, 246, 247, 258, 262, 281, 286, 288, 289, 290, 300, 303, 318, 325, 350, 371, 428, 498, 581, 597, 631, 654, 655, 661, 667, 693, 714, 717, 720, 722, 723, 725, 726], "session": [44, 148, 244, 287, 380, 391, 561, 566, 672, 721], "awq_quant": [44, 171, 387, 581], "enable_auto_scal": [44, 171, 387, 396, 717], "enable_mse_search": [44, 171, 387, 396, 717], "awar": [44, 154, 157, 171, 186, 230, 272, 320, 341, 387, 431, 581, 613, 634, 635, 636, 652, 659, 660, 662, 667, 692, 702, 710, 712, 717, 723], "awq": [44, 171, 393, 396, 715, 717], "enabl": [44, 109, 149, 153, 157, 171, 208, 229, 230, 343, 525, 581, 598, 635, 636, 660, 668, 673, 675, 677, 680, 681, 683, 694, 696, 697, 699, 702, 711, 712, 720, 723], "gptq": [44, 171, 393, 396, 605, 653, 715, 717], "w": [44, 156, 262, 303, 582, 711, 720, 722], "h": [44, 229, 230, 262, 303, 660, 700, 701, 705, 706, 707, 722], "blocksiz": [44, 388, 396], "percdamp": [44, 388, 396, 605, 717], "01": [44, 149, 179, 229, 230, 387, 388, 396, 605, 672, 713, 717, 723, 725, 726], "actord": [44, 388, 396, 717], "perchannel": [44, 388, 396], "hessian": [44, 157, 388, 431, 717, 723], "matrix": [44, 371, 424, 633, 683, 724], "percent": 44, "averag": [44, 315, 316, 318, 368, 369, 371, 388, 671, 672, 717, 723, 726], "diagon": [44, 388, 717], "dampen": [44, 153], "rearrang": [44, 215, 388, 711, 717], "consid": [44, 148, 153, 318, 371, 561, 628, 652, 653, 658, 693, 723], "diag": 44, "error": [44, 105, 149, 157, 162, 318, 353, 371, 388, 433, 575, 620, 657, 671, 676, 697, 698, 701, 717, 720, 723], "gptq_quantiz": [44, 171, 388, 582], "get_ops_recurs": 45, "prefix": [45, 148, 155, 162, 163, 168, 170, 177, 561, 575, 577, 597, 675, 680, 721], "graph_info": 45, "templateadaptor": 45, "tampl": 45, "dictionari": [45, 67, 68, 70, 148, 149, 155, 157, 162, 170, 193, 224, 227, 229, 230, 261, 302, 314, 321, 324, 326, 367, 401, 488, 489, 491, 561, 568, 575, 580, 612, 624], "yaml": [45, 221, 227, 230, 233, 234, 245, 247, 263, 276, 277, 288, 290, 304, 309, 320, 321, 322, 324, 333, 338, 346, 347, 451, 623, 624, 634, 636, 666, 671, 672, 709, 713, 721, 722], "file": [45, 105, 148, 160, 162, 163, 170, 174, 190, 217, 221, 226, 229, 230, 233, 234, 245, 246, 247, 250, 261, 262, 268, 271, 276, 277, 288, 289, 290, 293, 302, 303, 304, 309, 314, 320, 321, 322, 324, 333, 338, 342, 344, 346, 347, 367, 372, 382, 407, 408, 412, 424, 561, 568, 575, 576, 577, 623, 624, 629, 631, 634, 635, 636, 660, 663, 666, 669, 671, 672, 674, 678, 687, 690, 691, 692, 693, 695, 696, 697, 698, 700, 701, 705, 706, 707, 709, 713, 714, 717, 721, 722], "pytorchadaptor": 45, "api": [45, 70, 75, 110, 153, 156, 273, 309, 314, 346, 359, 360, 367, 371, 424, 439, 440, 443, 491, 496, 526, 568, 582, 590, 624, 630, 637, 639, 643, 646, 649, 657, 662, 667, 668, 672, 677, 681, 682, 683, 699, 700, 704, 718, 719, 723, 727], "pytorch_ipexadaptor": 45, "intel": [45, 189, 205, 206, 217, 266, 269, 305, 310, 317, 318, 341, 344, 352, 358, 363, 370, 371, 402, 424, 432, 438, 568, 626, 628, 629, 631, 632, 634, 635, 636, 652, 655, 656, 658, 659, 661, 662, 664, 665, 669, 670, 673, 674, 675, 680, 682, 683, 694, 695, 696, 697, 699, 700, 709, 710, 711, 712, 714, 716, 717, 718, 720, 721, 723, 724, 725], "extens": [45, 160, 162, 568, 575, 576, 624, 631, 633, 634, 664, 667, 668, 670, 672, 673, 674, 676, 681, 682, 683, 687, 690, 691, 695, 711, 712, 714, 717, 720, 723, 724, 725], "ipex": [45, 164, 170, 229, 230, 580, 623, 667, 672, 673, 677, 681, 682, 720], "pytorch_fxadaptor": 45, "fx": [45, 170, 229, 354, 434, 667, 673, 681, 682, 696, 712, 714, 716], "graph": [45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 112, 113, 114, 117, 130, 132, 136, 139, 142, 143, 145, 146, 147, 148, 201, 244, 287, 309, 373, 380, 423, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 533, 546, 548, 552, 555, 556, 558, 559, 560, 561, 566, 630, 634, 655, 658, 660, 666, 674, 675, 694, 697, 714, 715, 716, 721], "pytorchweightonlyadaptor": 45, "querybackendcap": [46, 634, 635], "tensorflowadaptor": [47, 452], "stock": [47, 452, 681, 720], "spr": [47, 452], "tensorflow_itexadaptor": [47, 452], "itex": [47, 109, 229, 230, 307, 452, 525, 673, 714, 720], "tensorflowqueri": [47, 452, 634], "performance_onli": [47, 48, 49, 107, 131, 136, 147, 229, 452, 469, 470, 523, 547, 552, 560, 672], "itex_mod": [47, 48, 89, 107, 131, 136, 452, 469, 510, 523, 547, 552], "quant_mod": [47, 360, 440, 452, 635, 636], "graphconvert": [48, 469], "qt_config": [48, 469], "recip": [48, 201, 229, 230, 309, 346, 469, 633, 672, 715, 717, 720, 723], "int8_sequ": [48, 469], "fp32_op": [48, 50, 107, 469, 471, 523], "bf16_op": [48, 50, 107, 469, 471, 523, 635, 716], "data_load": [48, 49, 469, 470, 634], "calib_func": [48, 154, 170, 171, 424, 469, 581, 596, 597, 716], "fake_qu": [48, 88, 107, 131, 136, 469, 509, 523, 547, 552], "qdq_enabl": [48, 469], "new_api": [48, 49, 71, 72, 77, 79, 92, 99, 131, 136, 143, 469, 470, 492, 493, 498, 500, 513, 520, 547, 552, 556], "use_bf16": [48, 49, 229, 469, 470, 713], "without": [49, 90, 148, 197, 213, 262, 303, 343, 362, 442, 470, 511, 561, 628, 658, 660, 672, 683, 694, 697, 711, 712, 713, 723, 724], "graphconverterwithoutcalib": [49, 470], "recover_config": [49, 470], "rewrit": [50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 106, 107, 108, 109, 198, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525], "bf16convert": [50, 471, 716], "rerewrit": [51, 472], "dequantizecastoptim": [51, 472], "b16": [51, 472], "dequantize_cast_optim": [52, 87, 111, 473, 508], "biasadd": [53, 59, 64, 66, 109, 474, 480, 485, 487, 525, 664], "convertaddtobiasaddoptim": [53, 474], "conv2d": [53, 59, 60, 61, 65, 66, 71, 125, 135, 143, 156, 466, 474, 480, 481, 482, 486, 487, 492, 541, 551, 556, 582, 635, 636, 657, 662, 664, 697, 720, 721, 723], "addv2": [53, 69, 474, 490, 664], "layout": [54, 475], "convertlayoutoptim": [54, 475], "convers": [54, 55, 230, 320, 475, 476, 629, 634, 635, 672, 673, 714, 716, 720], "optim": [54, 74, 75, 79, 80, 116, 118, 148, 149, 153, 188, 191, 192, 193, 195, 198, 201, 210, 215, 226, 229, 230, 266, 272, 309, 310, 326, 346, 350, 363, 428, 475, 495, 496, 500, 501, 532, 534, 561, 613, 614, 621, 624, 631, 633, 651, 653, 657, 658, 659, 660, 664, 665, 667, 668, 670, 672, 674, 675, 677, 679, 680, 683, 686, 694, 697, 698, 699, 701, 703, 712, 713, 714, 716, 717, 719, 720, 721, 723, 725], "nchw": [54, 258, 475], "nhwc": [54, 258, 475], "It": [54, 162, 171, 184, 186, 190, 203, 233, 234, 271, 276, 277, 316, 318, 325, 341, 346, 353, 369, 371, 372, 424, 429, 433, 475, 575, 597, 613, 634, 635, 636, 652, 657, 658, 672, 678, 681, 686, 692, 693, 694, 695, 697, 698, 700, 711, 714, 717, 718, 719, 723, 725], "exist": [54, 177, 227, 263, 380, 475, 566, 568, 624, 662, 671, 679, 723], "abov": [54, 475, 634, 635, 636, 658, 694, 695, 697, 700, 711, 714, 720, 723], "graph_def": [54, 140, 141, 148, 307, 372, 380, 423, 424, 446, 449, 475, 561, 566], "leakyrelu": [55, 476, 720], "convertleakyreluoptim": [55, 476], "below": [55, 66, 74, 229, 230, 347, 371, 395, 424, 476, 487, 495, 629, 630, 633, 634, 635, 636, 654, 657, 658, 660, 666, 671, 675, 677, 685, 686, 689, 692, 695, 700, 709, 710, 711, 713, 714, 717, 719, 720, 721, 723, 724], "subgraph": [55, 66, 105, 168, 476, 487, 715, 723], "mul": [55, 65, 66, 69, 171, 175, 476, 486, 487, 490, 581, 662, 717, 720], "maximum": [55, 149, 179, 203, 208, 229, 230, 245, 262, 288, 303, 312, 343, 350, 365, 380, 428, 476, 566, 636, 652, 655, 657, 672, 711, 714, 720, 722], "note": [55, 160, 207, 314, 354, 367, 434, 476, 576, 631, 633, 635, 636, 653, 654, 657, 660, 662, 664, 668, 670, 672, 677, 680, 685, 689, 692, 694, 698, 700, 702, 711, 714, 717, 720, 721, 723, 724, 725], "coeffici": [55, 149, 218, 476, 711], "less": [55, 148, 170, 229, 230, 476, 568, 597, 624, 651, 658, 672, 699, 711], "than": [55, 148, 245, 262, 288, 303, 476, 568, 598, 624, 631, 633, 651, 655, 666, 697, 705, 709, 710, 711, 714, 717, 719, 722, 723], "valid": [55, 67, 68, 105, 184, 208, 211, 221, 229, 230, 247, 290, 314, 342, 343, 367, 380, 476, 488, 489, 566, 631, 633, 634, 655, 657, 658, 661, 664, 667, 669, 672, 683, 697, 711, 714, 717, 718], "nan": [56, 477], "random": [56, 148, 149, 185, 193, 229, 230, 258, 262, 300, 303, 310, 326, 350, 352, 363, 428, 432, 477, 561, 568, 624, 631, 672, 711, 713, 722, 725], "convertnantorandom": [56, 477], "const": [56, 57, 63, 64, 67, 68, 70, 82, 98, 477, 478, 484, 485, 488, 489, 491, 503, 519], "consist": [56, 63, 477, 484, 629, 630, 653, 700, 720, 723], "placehold": [57, 243, 286, 478, 653], "convertplaceholdertoconst": [57, 478], "dilat": [58, 479], "contract": [58, 479], "dilatedcontract": [58, 479], "spacetobatchnd": [58, 479], "batchtospacend": [58, 479], "pattern": [58, 59, 61, 78, 96, 107, 108, 109, 131, 136, 170, 193, 194, 195, 196, 198, 201, 202, 208, 209, 210, 211, 213, 215, 216, 218, 226, 229, 230, 247, 290, 310, 331, 332, 334, 339, 343, 360, 363, 440, 479, 480, 482, 499, 517, 523, 524, 525, 547, 552, 634, 653, 655, 664, 667, 672, 693, 710, 713, 720, 723, 726], "inject": [59, 480, 672], "dummi": [59, 201, 248, 249, 291, 292, 318, 371, 480, 563, 633, 655, 665, 671, 672, 694], "injectdummybiasaddoptim": [59, 480], "fusion": [59, 61, 70, 78, 109, 126, 127, 128, 131, 132, 133, 137, 480, 482, 491, 499, 525, 542, 543, 544, 547, 548, 549, 553, 630, 634, 664], "expanddim": [60, 481], "expanddimsoptim": [60, 481], "next": [60, 238, 281, 443, 481, 631, 635, 636, 654, 713, 717, 723], "fetch": [61, 170, 174, 238, 281, 482, 635, 655, 705, 706, 707], "reshap": [61, 67, 68, 73, 482, 488, 489, 494, 720], "fetchweightfromreshapeoptim": [61, 482], "handl": [61, 148, 167, 175, 184, 482, 561, 620, 630, 632, 653, 654, 700, 720], "fold": [62, 63, 170, 171, 308, 396, 466, 483, 484, 581, 596, 597, 664, 717, 720], "foldbatchnormnodesoptim": [62, 483], "graphfoldconstantoptim": [63, 484], "sequenc": [63, 105, 149, 202, 205, 206, 229, 230, 245, 261, 262, 288, 302, 303, 312, 316, 341, 365, 369, 484, 585, 634, 655, 664, 711, 717, 722], "self": [63, 170, 171, 201, 229, 230, 382, 484, 581, 597, 598, 634, 635, 654, 655, 667, 671, 694, 719, 721, 723], "supported_op_typ": [63, 484], "fusebiasaddandaddoptim": [64, 485], "second": [64, 162, 202, 229, 230, 245, 288, 429, 485, 575, 624, 657, 672, 685, 689, 693, 705, 706, 717, 720, 723, 725], "columnwis": [65, 486], "fusecolumnwisemuloptim": [65, 486], "depthwiseconv2dn": [65, 71, 125, 135, 486, 492, 541, 551, 664], "math": [66, 487, 714], "fuseconvwithmathoptim": [66, 487], "elimin": [66, 487, 699], "sub": [66, 170, 177, 201, 263, 487, 580, 631, 653, 723], "realdiv": [66, 69, 487, 490], "decompos": [67, 68, 488, 489], "fusedecomposedbnoptim": [67, 488], "input_graph_def": [67, 68, 70, 488, 489, 491], "node_name_from_input": [67, 68, 70, 488, 489, 491], "node_nam": [67, 68, 70, 148, 380, 409, 488, 489, 491, 561, 566, 635], "strip": [67, 68, 70, 83, 84, 148, 488, 489, 491, 504, 505, 561, 721], "port": [67, 68, 70, 488, 489, 491, 694, 701], "other": [67, 68, 70, 149, 153, 160, 167, 175, 244, 287, 316, 369, 380, 488, 489, 491, 566, 576, 628, 630, 635, 636, 653, 657, 664, 667, 669, 672, 674, 695, 709, 711, 714, 720, 722, 723, 726], "underli": [67, 68, 70, 162, 488, 489, 491, 575], "node_from_map": [67, 68, 70, 488, 489, 491], "node_map": [67, 68, 70, 488, 489, 491], "pull": [67, 68, 70, 488, 489, 491], "def": [67, 68, 70, 179, 233, 234, 276, 277, 401, 424, 443, 488, 489, 491, 568, 598, 612, 613, 630, 634, 653, 654, 655, 658, 659, 660, 671, 672, 714, 720, 721, 723], "entri": [67, 68, 70, 157, 189, 269, 309, 347, 393, 394, 464, 465, 468, 488, 489, 491, 603, 604, 608, 624, 653, 669], "index": [67, 68, 70, 105, 177, 221, 230, 238, 243, 247, 281, 286, 290, 325, 488, 489, 491, 624, 655, 671, 693, 697, 717, 720], "everi": [67, 68, 70, 203, 206, 208, 229, 230, 341, 343, 488, 489, 491, 634, 654, 680, 685, 689, 715, 717, 723], "identifi": [67, 68, 70, 162, 314, 367, 380, 488, 489, 491, 566, 575, 700, 711, 717], "want": [67, 68, 70, 201, 229, 230, 243, 245, 286, 288, 343, 429, 488, 489, 491, 598, 613, 630, 634, 654, 655, 660, 672, 680, 692, 693, 700, 709, 714, 717, 719, 721, 723], "nodedef": [67, 68, 70, 488, 489, 491], "rais": [67, 68, 70, 105, 160, 162, 170, 198, 204, 211, 221, 314, 341, 342, 343, 367, 372, 443, 488, 489, 491, 575, 576, 597, 633, 653, 694, 711, 712], "valueerror": [67, 68, 70, 170, 314, 367, 443, 488, 489, 491, 597, 663], "If": [67, 68, 70, 74, 162, 171, 177, 181, 229, 230, 233, 234, 247, 262, 276, 277, 290, 303, 342, 372, 424, 443, 488, 489, 491, 495, 575, 585, 597, 598, 613, 629, 630, 635, 651, 653, 654, 655, 660, 668, 669, 671, 672, 678, 686, 687, 690, 692, 698, 703, 709, 711, 714, 717, 719, 720, 721, 722, 723], "isn": [67, 68, 70, 488, 489, 491], "present": [67, 68, 70, 488, 489, 491, 657, 700, 712, 720], "values_from_const": [67, 68, 70, 488, 489, 491], "node_def": [67, 68, 70, 488, 489, 491], "extract": [67, 68, 70, 148, 201, 247, 290, 362, 442, 488, 489, 491, 561, 655], "ha": [67, 68, 70, 74, 149, 156, 162, 207, 208, 263, 311, 341, 343, 364, 443, 488, 489, 491, 495, 568, 575, 582, 629, 631, 634, 635, 636, 654, 662, 667, 672, 673, 678, 692, 697, 698, 700, 703, 711, 713, 714, 716, 719, 720, 723], "access": [67, 68, 70, 227, 230, 488, 489, 491, 619, 624, 687, 690, 694], "valid_reshape_input": [67, 68, 488, 489], "reshape_in0_ndef": [67, 68, 488, 489], "reshape_in1_ndef": [67, 68, 488, 489], "ar": [67, 68, 105, 150, 162, 170, 203, 208, 209, 210, 215, 216, 229, 230, 245, 262, 288, 303, 314, 318, 325, 341, 342, 343, 347, 349, 350, 367, 371, 387, 388, 390, 394, 425, 427, 428, 442, 443, 488, 489, 575, 580, 598, 616, 623, 624, 628, 629, 630, 631, 634, 635, 653, 654, 655, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 678, 680, 683, 686, 692, 694, 695, 697, 698, 699, 700, 703, 709, 710, 711, 712, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725], "bypass_reshap": [67, 68, 488, 489], "input_node_map": [67, 68, 488, 489], "input_nam": [67, 68, 102, 142, 230, 307, 308, 488, 489, 662], "get_const_dim_count": [67, 68, 488, 489], "dimens": [67, 68, 105, 149, 237, 262, 280, 303, 488, 489, 655, 658, 717, 722], "instancenorm": [68, 489, 720], "fusedecomposedinoptim": [68, 489], "gelu": [69, 490], "fusegeluoptim": [69, 490], "sqrt": [69, 490, 657], "erf": [69, 490], "layernorm": [70, 491, 720], "fuselayernormoptim": [70, 491], "remap": [70, 162, 491, 575], "smaller": [70, 262, 303, 491, 658, 672, 711, 722], "fusedbatcnormv3": [70, 491], "And": [70, 491, 629, 630, 651, 653, 672, 678, 720], "further": [70, 230, 491, 628, 673, 674, 675, 677, 686, 692, 714], "restrict": [70, 162, 229, 230, 491, 575, 711, 719], "2d": [70, 491, 720], "3d": [70, 491, 712, 720], "kera": [70, 116, 189, 201, 221, 230, 247, 254, 269, 290, 297, 375, 380, 465, 468, 491, 532, 566, 568, 635, 654, 660, 674, 682, 683], "fusepadwithconv2doptim": [71, 492], "excluded_op_nam": [71, 72, 226, 229, 230, 492, 493, 672, 711], "cfg": [71, 72, 170, 226, 360, 440, 492, 493, 580, 616, 635, 636], "itex_qdq_mod": [71, 72, 492, 493], "conv3d": [71, 125, 492, 541], "fusepadwithfp32conv2doptim": [72, 493], "fusetransposereshapeoptim": [73, 494], "cse": [74, 98, 495, 519], "graphcseoptim": [74, 495], "introduc": [74, 495, 634, 635, 636, 664, 672, 714, 717, 718, 720, 724], "ident": [74, 80, 202, 495, 501, 628, 658], "three": [74, 221, 245, 288, 349, 425, 427, 495, 630, 634, 635, 652, 668, 673, 686, 700, 710, 714, 716, 719, 720, 721], "d": [74, 170, 495, 580, 658, 666, 693, 695, 701, 711, 726], "those": [74, 162, 353, 433, 495, 575, 624, 657, 658, 659, 666, 672, 673, 710, 711, 714, 723], "child": [74, 156, 163, 495, 577, 582, 721], "b1": [74, 495], "c1c2": [74, 495], "d1": [74, 495, 624], "c1": [74, 495], "c2": [74, 495], "memori": [74, 149, 150, 170, 309, 333, 338, 346, 382, 495, 597, 624, 652, 654, 659, 672, 673, 675, 709, 711, 714, 715, 717, 720, 723, 726], "bound": [74, 177, 194, 262, 303, 314, 350, 367, 428, 495, 671, 722], "like": [74, 96, 98, 148, 149, 162, 181, 201, 221, 230, 233, 234, 235, 247, 276, 277, 278, 290, 309, 318, 343, 346, 347, 371, 380, 394, 424, 495, 517, 519, 561, 563, 566, 575, 613, 629, 630, 631, 634, 635, 657, 658, 659, 667, 680, 695, 697, 710, 711, 714, 717, 718, 720, 723], "relu": [74, 78, 109, 495, 499, 525, 630, 664, 720, 721], "relu6": [74, 495, 664], "updat": [74, 153, 163, 170, 196, 197, 203, 221, 343, 371, 424, 495, 577, 621, 663, 670, 671, 672, 678, 683, 686, 702, 711, 717, 720, 723, 724], "graphdef": [74, 148, 380, 423, 495, 561, 566, 674], "grappler": [75, 496, 664], "grappleroptim": [75, 496], "input_output_nam": [75, 496], "opt_cfg": [75, 496], "wrapper": [75, 102, 103, 104, 105, 122, 140, 149, 155, 165, 169, 187, 198, 244, 262, 264, 265, 267, 268, 287, 303, 314, 318, 367, 371, 376, 380, 446, 496, 538, 565, 566, 594, 596, 716], "leverag": [75, 150, 496, 619, 631, 633, 658, 662, 675, 692, 710, 714, 717, 723], "built": [75, 189, 212, 231, 232, 236, 241, 245, 246, 251, 253, 255, 256, 258, 259, 262, 267, 269, 274, 275, 279, 282, 284, 288, 289, 294, 296, 298, 299, 300, 301, 303, 347, 371, 374, 382, 424, 496, 585, 613, 631, 634, 655, 660, 672, 685, 689, 709, 714, 719, 722, 723, 725], "convert_add_to_biasadd": [76, 87, 111, 497, 508], "convert_layout": [76, 87, 111, 497, 508], "convert_leakyrelu": [76, 87, 111, 497, 508], "convert_nan_to_random": [76, 87, 111, 497, 508], "convert_placeholder_to_const": [76, 87, 111, 497, 508], "dilated_contract": [76, 87, 111, 497, 508], "dummy_biasadd": [76, 87, 111, 497, 508], "expanddims_optim": [76, 87, 111, 497, 508], "fetch_weight_from_reshap": [76, 87, 111, 497, 508], "fold_batch_norm": [76, 87, 111, 497, 508], "fold_const": [76, 87, 111, 497, 508], "fuse_biasadd_add": [76, 87, 111, 497, 508], "fuse_column_wise_mul": [76, 87, 111, 497, 508], "fuse_conv_with_math": [76, 87, 111, 497, 508], "fuse_decomposed_bn": [76, 87, 111, 497, 508], "fuse_decomposed_in": [76, 87, 111, 497, 508], "fuse_gelu": [76, 87, 111, 497, 508], "fuse_layer_norm": [76, 87, 111, 497, 508], "fuse_pad_with_conv": [76, 87, 111, 497, 508], "fuse_pad_with_fp32_conv": [76, 87, 111, 497, 508], "fuse_reshape_transpos": [76, 87, 111, 497, 508], "graph_cse_optim": [76, 87, 111, 497, 508], "grappler_pass": [76, 87, 111, 497, 508], "insert_print_nod": [76, 87, 111, 497, 508], "move_squeeze_after_relu": [76, 87, 111, 497, 508], "pre_optim": [76, 87, 111, 497, 508], "remove_training_nod": [76, 87, 111, 497, 508], "rename_batch_norm": [76, 87, 111, 497, 508], "split_shared_input": [76, 87, 111, 497, 508], "strip_equivalent_nod": [76, 87, 111, 148, 497, 508, 561], "strip_unused_nod": [76, 87, 111, 148, 497, 508, 561], "switch_optim": [76, 87, 111, 497, 508], "insert": [77, 105, 107, 109, 113, 146, 149, 167, 175, 498, 523, 525, 529, 559, 597, 630, 635, 654, 667, 672, 675, 711, 714, 716, 717, 720, 721], "print": [77, 156, 157, 201, 318, 371, 443, 498, 582, 624, 660, 671, 672, 694, 695, 711, 720, 723], "insertprintminmaxnod": [77, 498], "pre_node_nam": [77, 498], "post_node_nam": [77, 498], "pass": [77, 148, 149, 160, 162, 177, 185, 371, 394, 424, 498, 561, 568, 575, 576, 592, 598, 623, 624, 629, 630, 634, 651, 655, 658, 659, 660, 666, 671, 672, 693, 700, 711, 713, 714, 716, 720, 725], "move": [78, 149, 162, 499, 575, 630, 698, 713, 717, 718], "squeez": [78, 499, 630], "movesqueezeafterreluoptim": [78, 499], "match": [78, 102, 162, 201, 314, 315, 367, 368, 499, 575, 658, 693, 717], "pre": [79, 116, 163, 201, 233, 234, 245, 276, 277, 288, 372, 424, 500, 532, 577, 605, 613, 653, 655, 658, 659, 672, 680, 697, 711, 712, 714, 717, 721, 723], "entranc": [79, 194, 236, 500], "preoptim": [79, 500], "removetrainingnodesoptim": [80, 501], "protected_nod": [80, 501], "types_to_splic": [80, 501], "checknumer": [80, 501], "stopgradi": [80, 501], "renam": [81, 502, 718], "fusedbatchnorm": [81, 502], "fusedbatchnormv2": [81, 502], "renamebatchnormoptim": [81, 502], "splitsharedinputoptim": [82, 503], "equival": [83, 169, 504, 596, 633, 712, 717, 720], "stripequivalentnodesoptim": [83, 504], "output_node_nam": [83, 84, 131, 132, 136, 148, 504, 505, 547, 548, 552, 561], "same": [83, 141, 148, 150, 171, 179, 197, 215, 230, 245, 262, 288, 303, 314, 367, 449, 504, 561, 581, 585, 598, 624, 634, 636, 651, 654, 655, 658, 660, 664, 672, 676, 680, 685, 689, 711, 713, 714, 717, 720, 721, 722, 723], "unus": [84, 148, 505, 561], "stripunusednodesoptim": [84, 505], "input_node_nam": [84, 131, 136, 148, 505, 547, 552, 561], "switch": [85, 506, 675, 721], "switchoptim": [85, 506], "condit": [85, 245, 246, 247, 262, 288, 289, 290, 303, 349, 425, 427, 506, 655, 669, 722, 723], "graphrewriterbas": [86, 507], "abstract": [86, 186, 194, 262, 303, 304, 309, 346, 507, 634, 636, 666], "freeze_fake_qu": [87, 95, 111, 508, 516], "freeze_valu": [87, 95, 111, 508, 516], "freeze_value_without_calib": [87, 95, 111, 508, 516], "fuse_conv_redundant_dequant": [87, 95, 111, 508, 516], "fuse_conv_requant": [87, 95, 111, 508, 516], "fuse_matmul_redundant_dequant": [87, 95, 111, 508, 516], "fuse_matmul_requant": [87, 95, 111, 508, 516], "meta_op_optim": [87, 95, 111, 508, 516], "post_hostconst_convert": [87, 95, 111, 508, 516], "post_quantized_op_cs": [87, 95, 111, 508, 516], "rnn_convert": [87, 95, 111, 508, 516], "scale_propag": [87, 95, 111, 508, 516], "onnx_graph": [87, 101, 111], "onnx_schema": [87, 101, 111], "tf2onnx_util": [87, 101, 111], "insert_qdq_pattern": [87, 106, 111, 508, 522], "merge_duplicated_qdq": [87, 106, 111, 508, 522], "share_qdq_y_pattern": [87, 106, 111, 508, 522], "freez": [88, 89, 90, 148, 509, 510, 511, 561, 675, 711], "fakequ": [88, 509], "freezefakequantopoptim": [88, 509], "follow": [88, 110, 179, 202, 247, 290, 311, 314, 364, 367, 509, 526, 628, 629, 630, 631, 634, 635, 636, 653, 654, 655, 658, 659, 660, 664, 668, 669, 671, 672, 673, 674, 675, 676, 677, 685, 689, 694, 696, 697, 700, 705, 710, 711, 713, 714, 717, 720, 721, 723], "freezevaluetransform": [89, 510], "max_min_data": [89, 90, 510, 511], "postfix": [89, 90, 510, 511], "tensor_data": [89, 510, 568, 624, 625], "th": [89, 90, 510, 511], "gpu": [89, 90, 97, 149, 162, 229, 230, 510, 511, 518, 575, 598, 633, 651, 667, 672, 673, 677, 683, 692, 713, 714, 715], "freezevaluewithoutcalibtransform": [90, 511], "95": [90, 318, 371, 511, 671, 726], "quantizedconv": [91, 92, 512, 513], "quantizeddeconv": [91, 512], "redund": [91, 93, 512, 514], "fuseconvredundantdequantizetransform": [91, 512], "cpu": [91, 92, 93, 94, 149, 150, 156, 161, 162, 164, 170, 229, 230, 512, 513, 514, 515, 568, 575, 582, 598, 619, 624, 633, 635, 651, 652, 667, 672, 673, 675, 677, 683, 692, 700, 712, 713, 714, 715, 716, 717, 721], "_quantizedconv": [91, 512], "_quantizeddeconv": [91, 512], "successor": [91, 92, 93, 94, 512, 513, 514, 515], "requant": [92, 94, 513, 515, 721], "fuseconvrequantizetransform": [92, 513], "quantizedmatmul": [93, 94, 514, 515], "fusematmulredundantdequantizetransform": [93, 514], "_quantizedmatmul": [93, 94, 514, 515], "fusematmulrequantizedequantizetransform": [94, 515], "quantizedmatmulwithbiasanddequant": [94, 515], "fusematmulrequantizetransform": [94, 515], "fusematmulrequantizedequantizenewapitransform": [94, 515], "fusematmulrequantizenewapitransform": [94, 515], "newapi": [94, 515], "meta": [96, 517, 670, 712, 726], "metainfochangingmemopoptim": [96, 517], "metaop": [96, 517], "With": [96, 382, 517, 630, 634, 636, 654, 672, 680, 685, 689, 693, 699, 709, 711, 712, 719, 720, 723, 726], "better": [96, 229, 230, 233, 234, 276, 277, 325, 372, 424, 517, 613, 653, 659, 671, 673, 711, 712, 714, 717, 719, 720, 723], "perform": [96, 140, 149, 153, 177, 218, 229, 230, 245, 257, 258, 263, 288, 300, 309, 333, 338, 346, 353, 371, 382, 424, 429, 433, 446, 447, 517, 598, 629, 630, 631, 634, 635, 651, 655, 656, 657, 659, 661, 662, 667, 668, 671, 672, 673, 674, 675, 677, 681, 683, 686, 692, 698, 709, 710, 711, 712, 713, 714, 715, 716, 717, 720, 721, 723, 725, 726], "hostconst": [97, 518], "posthostconstconvert": [97, 518], "just": [97, 235, 260, 262, 265, 267, 268, 270, 278, 303, 382, 518, 563, 631, 672, 682, 686, 692, 700, 710, 714, 720, 722, 723], "postcseoptim": [98, 519], "duplic": [98, 108, 350, 428, 519, 524], "quantizev2": [98, 519], "decreas": [98, 519, 697, 711], "size": [98, 149, 171, 179, 205, 206, 237, 238, 244, 247, 253, 258, 262, 280, 281, 287, 290, 296, 300, 303, 341, 380, 382, 387, 388, 390, 519, 566, 597, 624, 628, 635, 654, 655, 660, 663, 672, 692, 693, 709, 711, 714, 715, 717, 720, 722, 725, 726], "rnn": [99, 520], "quantizedrnnconvert": [99, 520], "calibration_data": [99, 107, 520, 523], "rnn_detail": [99, 520], "scalepropagationtransform": [100, 521], "direct": [100, 207, 341, 521, 711], "export": [101, 230, 310, 314, 363, 367, 633, 665, 678, 693, 695, 721, 724], "onnxgraph": 102, "output_shap": 102, "extra_opset": 102, "output_nam": [102, 142, 230, 307, 308, 662], "is_subgraph": 102, "graph_nam": 102, "manipul": [102, 103], "onnxnod": 103, "skip_convers": 103, "schema": [104, 171, 597], "onnxopschema": 104, "domain": [104, 105, 229, 230, 711, 723], "since_vers": 104, "get_schema": 104, "max_inclusive_opset_vers": 104, "within": [104, 178, 209, 210, 215, 216, 224, 309, 314, 346, 367, 380, 418, 423, 566, 628, 630, 636, 652, 673, 685, 689, 692, 700, 711, 712, 720, 723], "get_max_supported_opset_vers": 104, "packag": [104, 634, 663, 668, 692, 693, 712, 718, 723], "set_nam": 105, "find_opset": 105, "assert_error": 105, "bool_val": 105, "error_msg": 105, "messag": [105, 146, 559, 629, 700, 701, 705, 706, 707, 723], "map_numpy_to_onnx_dtyp": 105, "np_dtype": 105, "map_onnx_to_numpy_typ": 105, "onnx_typ": 105, "add_port_to_nam": 105, "nr": 105, "get_tensorflow_node_attr": 105, "pars": [105, 148, 170, 245, 246, 258, 262, 288, 289, 300, 303, 407, 408, 412, 561, 580, 635, 636, 722], "get_tensorflow_tensor_shap": 105, "get_tensorflow_node_shape_attr": 105, "attr": [105, 148, 201, 561], "map_tensorflow_dtyp": 105, "get_tensorflow_tensor_data": 105, "convert_tensorflow_tensor_to_onnx": 105, "read_tensorflow_node_attr": 105, "read": [105, 148, 162, 250, 262, 293, 303, 342, 561, 575, 655, 716, 719], "infer_onnx_shape_dtyp": 105, "opset_vers": [105, 142, 230, 307, 308, 662], "input_shap": [105, 249, 292, 563, 655], "input_dtyp": 105, "sometim": [105, 630, 657, 714], "make_onnx_shap": 105, "seqtyp": 105, "tensor_dtyp": 105, "around": 105, "signifi": 105, "make_onnx_inputs_output": 105, "elem_typ": 105, "text": [105, 149, 153, 217, 261, 262, 302, 303, 311, 316, 344, 364, 369, 662, 669, 681, 703, 706, 707, 711, 712, 717, 720, 722, 726], "datatyp": [105, 170, 716, 723, 726], "save_protobuf": 105, "path": [105, 140, 148, 150, 163, 170, 201, 217, 221, 226, 245, 246, 247, 262, 288, 289, 290, 303, 304, 307, 308, 309, 320, 321, 322, 324, 333, 338, 342, 344, 346, 347, 360, 372, 380, 385, 387, 388, 390, 393, 394, 401, 423, 424, 440, 446, 561, 566, 568, 577, 619, 621, 624, 630, 631, 634, 655, 657, 660, 666, 671, 672, 673, 674, 678, 681, 692, 695, 697, 700, 705, 706, 707, 710, 717, 722, 725], "as_text": 105, "save": [105, 148, 161, 162, 198, 221, 229, 230, 247, 290, 307, 308, 347, 380, 424, 561, 566, 568, 575, 613, 614, 619, 624, 630, 634, 666, 672, 673, 674, 676, 680, 685, 689, 695, 700, 705, 706, 707, 710, 714, 715, 717, 720], "protobuf": [105, 380, 566, 695], "is_onnx_domain": 105, "is_list_or_tupl": 105, "are_shapes_equ": 105, "src": [105, 693], "dest": 105, "equal": [105, 143, 148, 176, 443, 556, 568, 624, 711, 717], "get_subgraphs_from_onnx": 105, "model_proto": 105, "over": [105, 162, 247, 290, 318, 371, 575, 635, 661, 665, 667, 671, 683, 692, 698, 702, 711, 713, 720, 723], "df": 105, "initialize_name_count": 105, "avoid": [105, 162, 170, 171, 245, 288, 575, 581, 597, 630, 653, 721], "conflict": [105, 653, 663], "counter": 105, "make_nam": 105, "get_index_from_strided_slice_of_shap": 105, "outputs_to_valu": 105, "stride": [105, 262, 303, 722], "slice": 105, "compute_const_folding_using_tf": 105, "g": [105, 149, 153, 162, 203, 229, 230, 575, 598, 629, 658, 661, 665, 675, 680, 711, 717, 718, 720, 723], "const_node_valu": 105, "graph_output": 105, "constant": [105, 308, 310, 350, 352, 358, 363, 428, 432, 438, 617, 653, 654, 664, 695, 722], "tf": [105, 116, 141, 148, 201, 221, 244, 245, 246, 247, 262, 287, 288, 289, 290, 303, 378, 380, 449, 466, 468, 532, 561, 565, 566, 567, 568, 653, 660, 668, 674, 712, 716, 722], "generategraphwithqdqpattern": [107, 523], "op_wise_config": [107, 131, 136, 523, 547, 552, 635], "quantized_nod": [107, 523], "llm_weight_minmax": [107, 523], "dq": [107, 109, 131, 523, 525, 547, 720], "pair": [107, 229, 230, 523, 635, 654, 672, 673, 718], "befor": [107, 109, 150, 156, 175, 193, 203, 208, 210, 215, 217, 219, 229, 230, 245, 288, 341, 343, 345, 523, 525, 582, 629, 636, 654, 655, 658, 659, 660, 663, 664, 668, 672, 687, 690, 696, 697, 714, 717, 719, 721, 723], "merg": [108, 237, 280, 360, 440, 524, 687, 690, 721, 723], "mergeduplicatedqdqoptim": [108, 524], "y": [109, 229, 230, 262, 303, 350, 428, 525, 653, 657, 663, 678, 720, 722], "shareqdqforitexypatternoptim": [109, 525], "break": [109, 525, 660, 672], "graphanalyz": [110, 526], "extend_engin": [110, 526], "analyz": [110, 201, 380, 526, 566, 719, 720, 721], "under": [110, 150, 229, 230, 247, 290, 401, 526, 568, 598, 612, 619, 623, 629, 631, 633, 655, 669, 671, 672, 675, 680, 681, 692, 700, 710, 711, 712, 715, 717, 721, 723], "singleton": [110, 526, 568, 624], "specifi": [110, 149, 162, 170, 177, 181, 221, 229, 230, 233, 234, 262, 263, 276, 277, 303, 309, 314, 318, 320, 321, 324, 333, 338, 346, 347, 367, 371, 372, 424, 443, 526, 575, 579, 580, 585, 613, 623, 624, 635, 636, 660, 664, 671, 672, 680, 694, 700, 704, 705, 706, 707, 709, 711, 713, 717, 722, 723, 725], "graphrewriterhelp": [110, 526], "encapsul": [110, 233, 234, 276, 277, 372, 424, 526, 613, 674], "quantize_lay": [111, 112, 114, 527, 528, 530], "fake_quant": [111, 112, 114, 527, 528, 530], "quantize_config": [111, 112, 114, 527, 528, 530, 635], "quantize_help": [111, 112, 114, 527, 528, 530], "quantize_wrapp": [111, 112, 114, 527, 528, 530], "fuse_qdq_bn": [111, 112, 130, 527, 528, 546], "fuse_qdq_concatv2": [111, 112, 130, 527, 528, 546], "fuse_qdq_conv": [111, 112, 130, 527, 528, 546], "fuse_qdq_deconv": [111, 112, 130, 527, 528, 546], "fuse_qdq_in": [111, 112, 130, 527, 528, 546], "fuse_qdq_matmul": [111, 112, 130, 527, 528, 546], "fuse_qdq_pool": [111, 112, 130, 527, 528, 546], "optimize_qdq": [111, 112, 130, 527, 528, 546], "optimize_lay": [112, 114, 117, 528, 530, 533], "quantize_layer_add": [112, 114, 117, 528, 530, 533], "quantize_layer_bas": [112, 114, 117, 528, 530, 533], "quantize_layer_bn": [112, 114, 117, 528, 530, 533], "fakequantizebas": [113, 529], "abc": [113, 316, 369, 529, 583, 634, 721, 723], "fakequant": [113, 529], "per_channel": [113, 529, 635, 636, 664, 714, 725], "8": [113, 149, 162, 171, 229, 230, 261, 302, 394, 529, 575, 597, 605, 630, 635, 652, 653, 664, 668, 699, 700, 711, 712, 717, 720, 723, 726], "channel_axi": [113, 173, 176, 529], "symmetr": [113, 149, 150, 387, 388, 390, 529, 619, 636, 714, 717, 722, 723], "narrow_rang": [113, 529], "quantizeconfig": [115, 116, 531, 532], "custom": [115, 149, 160, 170, 171, 177, 230, 347, 371, 382, 531, 576, 581, 597, 623, 651, 658, 659, 675, 698, 699, 700, 704, 706, 707, 711, 712, 717, 719], "There": [115, 347, 349, 425, 427, 531, 653, 657, 658, 664, 667, 672, 675, 697, 699, 700, 717, 720, 723, 725], "instanc": [115, 116, 177, 197, 229, 230, 233, 234, 263, 276, 277, 315, 316, 318, 321, 324, 327, 328, 330, 331, 332, 350, 362, 368, 369, 371, 372, 424, 428, 442, 531, 532, 598, 613, 621, 624, 628, 629, 630, 634, 651, 672, 677, 683, 717, 723, 725, 726], "global": [115, 203, 229, 230, 327, 328, 330, 331, 332, 341, 442, 531, 624, 630, 672, 711, 713, 723], "class": [116, 152, 160, 170, 198, 204, 211, 325, 372, 424, 468, 532, 576, 607, 630, 631, 635, 653, 654, 655, 658, 671, 672, 683, 709, 710, 714, 718, 721, 723, 725], "init_quantize_config": [116, 532], "quantize_recip": [116, 532], "begin": [116, 153, 209, 210, 215, 343, 532, 653, 654, 658, 659, 672, 711, 723], "process": [116, 140, 149, 157, 177, 184, 203, 208, 209, 210, 217, 219, 221, 229, 230, 233, 234, 245, 246, 247, 258, 262, 263, 276, 277, 288, 289, 290, 300, 303, 341, 343, 345, 349, 350, 372, 424, 425, 427, 428, 446, 532, 579, 598, 613, 623, 624, 631, 634, 635, 636, 652, 654, 655, 658, 659, 660, 662, 672, 676, 697, 699, 700, 702, 710, 711, 714, 715, 717, 720, 721, 722, 725], "model_nam": [116, 229, 230, 532], "special": [116, 162, 201, 382, 532, 575, 630, 654, 671, 672, 709, 711, 717, 724], "decid": [116, 179, 229, 230, 312, 343, 365, 532, 634, 635, 672, 714, 718, 723], "qat_clone_funct": [116, 532], "leav": [116, 532, 686], "quantizewrapp": [116, 122, 532, 538], "wrapped_lay": [116, 197, 532], "config_quantizable_lay": [118, 534], "quantizelayeradd": [119, 535], "quantizelay": [120, 536], "quantizelayerbas": [120, 536], "quantizelayerbatchnorm": [121, 537], "quantizewrapperbas": [122, 538], "fusedbatchnormv3": [123, 133, 539, 549], "fusenodestartwithfusedbatchnormv3": [123, 133, 539, 549], "_quantizedfusedbatchnorm": [123, 539], "concatv2": [124, 134, 147, 540, 550, 560, 664], "fusenodestartwithconcatv2": [124, 134, 540, 550], "quantizedconcatv2": [124, 134, 540, 550], "fusenodestartwithconv2d": [125, 135, 541, 551], "conv2dbackpropinput": [126, 542], "conv3dbackpropinputv2": [126, 542], "fusenodestartwithdeconv2d": [126, 542], "fusedinstancenorm": [127, 543], "fusenodestartwithfusedinstancenorm": [127, 543], "batchmatmul": [128, 544], "batchmatmulv2": [128, 544], "fusenodestartwithmatmul": [128, 137, 544, 553], "avgpool": [129, 138, 545, 554, 664], "fusenodestartwithpool": [129, 138, 545, 554], "optimizeqdqgraph": [131, 547], "input_graph": [131, 136, 143, 419, 423, 547, 552, 556, 634], "op_wise_sequ": [131, 136, 547, 552], "quantizegraph": [132, 548], "quantizegraphbas": [132, 548], "quantizenodebas": [132, 548], "quantizegraphforintel": [136, 552], "common": [139, 160, 162, 193, 230, 260, 310, 320, 324, 325, 326, 363, 394, 396, 462, 464, 465, 466, 468, 555, 575, 576, 604, 605, 608, 616, 628, 653, 655, 659, 660, 662, 666, 668, 672, 714, 720], "herlper": [139, 555], "quantizegraphhelp": [139, 555], "sever": [139, 219, 262, 303, 345, 347, 555, 631, 657, 658, 659, 667, 672, 673, 685, 689, 700, 711, 713, 715, 720, 722, 723, 725], "staticmethod": [139, 555], "function": [139, 140, 160, 184, 209, 210, 215, 229, 230, 233, 234, 246, 276, 277, 289, 321, 324, 333, 338, 385, 446, 555, 576, 629, 630, 631, 634, 635, 636, 651, 654, 658, 659, 662, 666, 667, 668, 670, 671, 672, 673, 683, 693, 699, 700, 711, 714, 717, 718, 719, 720, 721, 723, 724], "smoothquantcalibr": [140, 446], "dataset": [140, 141, 149, 170, 217, 233, 234, 235, 237, 238, 242, 243, 244, 256, 265, 276, 277, 278, 280, 281, 285, 286, 287, 299, 310, 314, 315, 316, 318, 347, 363, 367, 368, 369, 371, 372, 424, 446, 449, 563, 597, 613, 616, 631, 633, 634, 635, 654, 660, 665, 671, 672, 680, 694, 695, 705, 711, 714, 717, 718, 720, 723, 725, 726], "outlier": [140, 446, 635, 652, 657, 697, 717, 720], "smoothquantcalibrationllm": [140, 446], "model_path": [140, 148, 171, 446, 561, 582, 605, 657, 705], "temp_path": [140, 446], "weight_name_map": [140, 446], "llm": [140, 141, 149, 156, 216, 446, 449, 582, 633, 711, 712, 715, 717, 720], "eval_func": [140, 233, 234, 276, 277, 347, 350, 351, 353, 354, 355, 356, 372, 424, 425, 428, 429, 430, 431, 433, 434, 435, 436, 443, 446, 613, 630, 654, 655, 657, 658, 659, 660, 672, 695, 714, 715, 716, 717, 723, 725], "temporari": [140, 170, 446, 624, 628], "store": [140, 194, 196, 198, 201, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 220, 229, 230, 247, 290, 336, 343, 446, 666], "median": [140, 446], "autotrack": [140, 148, 446, 561], "smoothquantscal": [141, 449], "alpha": [141, 161, 165, 175, 196, 218, 396, 449, 466, 594, 653, 714, 723], "scales_per_op": [141, 396, 449, 466], "individu": [141, 203, 341, 418, 423, 449, 628, 700, 711, 720], "smoothquantscalerllm": [141, 449], "tensorflowqdqtoonnxqdqconvert": 142, "shape_overrid": 142, "inputs_as_nchw": [142, 307], "default_opset_vers": 142, "bia": [143, 229, 230, 556, 717, 721], "correct": [143, 176, 221, 229, 230, 314, 315, 316, 318, 342, 367, 368, 369, 371, 556, 628, 675], "biascorrect": [143, 556], "fp32_graph": [143, 556], "weight_empir": [143, 556], "Will": [143, 556, 658, 667], "our": [143, 170, 229, 230, 395, 556, 631, 633, 662, 672, 693, 694, 697, 719, 724], "task": [143, 245, 252, 288, 295, 318, 371, 556, 655, 658, 659, 662, 667, 671, 672, 695, 699, 702, 711, 715, 717, 720, 726], "close": [143, 176, 556, 652, 701], "w_int8": [143, 176, 556], "u": [143, 176, 556, 675, 694, 699], "w_fp32": [143, 176, 556], "varianc": [143, 176, 197, 556, 657], "differ": [143, 153, 172, 176, 178, 181, 187, 193, 212, 229, 230, 238, 247, 262, 264, 281, 290, 303, 309, 318, 324, 326, 335, 346, 371, 382, 556, 618, 628, 630, 631, 635, 654, 655, 657, 658, 660, 661, 666, 667, 671, 672, 674, 685, 689, 694, 697, 700, 709, 711, 714, 717, 720, 721, 722, 723], "wise": [143, 159, 161, 163, 171, 176, 229, 230, 350, 353, 388, 428, 429, 433, 556, 574, 577, 595, 633, 635, 667, 697, 711, 717, 720, 721, 723, 724, 725], "minim": [143, 153, 176, 350, 428, 556, 635, 636, 652, 658, 661, 671, 672, 685, 689, 711, 714, 723], "scale_c": [143, 176, 556], "shift": [143, 176, 258, 300, 556, 693, 722], "notic": [143, 176, 263, 556, 669, 673, 695, 718], "first": [143, 149, 162, 170, 176, 178, 202, 227, 229, 230, 245, 288, 314, 360, 367, 429, 440, 556, 568, 575, 597, 624, 630, 631, 634, 635, 636, 655, 657, 668, 673, 677, 686, 687, 690, 693, 695, 696, 697, 713, 714, 716, 717, 719, 720, 721, 723, 725], "empir": [143, 176, 556], "solut": [143, 176, 556, 633, 634, 635, 663, 677, 681, 686, 712, 717, 718, 720, 723, 724], "don": [143, 176, 203, 229, 230, 556, 630, 698, 711, 723], "min": [143, 149, 171, 176, 194, 230, 396, 556, 568, 597, 624, 657, 695, 697, 711, 714, 717, 720, 722, 723], "graphtransform": [144, 557], "graphtransformbas": [144, 557], "input_pb": [144, 146, 147, 557, 559, 560], "log": [146, 177, 184, 201, 407, 408, 412, 559, 620, 630, 683, 705, 706, 707, 719, 721, 723], "insertlog": [146, 559], "node_name_list": [146, 559], "show_nam": [146, 559], "show_op": [146, 559], "first_n": [146, 559], "summar": [146, 559, 653, 658], "1024": [146, 247, 290, 559, 678], "dump_fp32": [146, 559], "rerang": [147, 560], "rerangequantizedconcat": [147, 560], "rerange_quant": [147, 560], "version1_lt_version2": [148, 568, 624], "version1": [148, 568, 624], "version2": [148, 568, 624], "version1_gt_version2": [148, 568, 624], "greater": [148, 568, 624, 705, 711, 723], "version1_eq_version2": [148, 568, 624], "version1_gte_version2": [148, 568, 624], "version1_lte_version2": [148, 568, 624], "disable_random": [148, 561, 568], "seed": [148, 149, 185, 193, 229, 230, 326, 561, 568, 624, 672, 725], "disabl": [148, 229, 230, 561, 568, 628, 692, 697, 716, 717, 720], "read_graph": [148, 561], "in_graph": [148, 561], "in_graph_is_binari": [148, 561], "write_graph": [148, 561], "out_graph_def": [148, 561], "out_graph_fil": [148, 561], "write": [148, 254, 297, 561, 624, 660, 666, 672, 675, 721], "is_ckpt_format": [148, 561], "ckpt": [148, 372, 380, 424, 561, 566, 726], "folder": [148, 247, 252, 290, 295, 372, 424, 561, 623, 655, 680, 685, 689, 698, 705, 706, 707, 717, 721], "is_saved_model_format": [148, 561], "saved_model": [148, 320, 561, 715], "get_estimator_graph": 148, "estim": [148, 149, 318, 371, 380, 566, 723], "input_fn": [148, 380, 566], "get_tensor_by_nam": [148, 561], "try_cnt": [148, 561], "import": [148, 153, 177, 179, 194, 229, 230, 320, 372, 382, 424, 443, 561, 568, 613, 624, 630, 631, 633, 636, 651, 654, 655, 657, 658, 659, 660, 662, 665, 671, 672, 673, 674, 675, 679, 681, 694, 695, 703, 709, 710, 711, 713, 714, 715, 716, 718, 719, 720, 721, 722, 723, 724], "scope": [148, 561, 629, 635, 672], "onc": [148, 162, 189, 219, 269, 345, 349, 425, 427, 561, 575, 635, 636, 654, 692, 698, 711, 712, 723, 726], "both": [148, 150, 179, 230, 561, 628, 631, 634, 659, 672, 676, 695, 697, 699, 711, 713, 714, 717, 720, 723], "compat": [148, 380, 561, 566, 629, 660, 674, 687, 690, 692, 711, 718], "v1": [148, 257, 258, 300, 315, 316, 318, 368, 369, 371, 380, 561, 566, 660, 662, 663, 671, 674, 696, 711, 718, 719, 720, 726], "suffix": [148, 561], "time": [148, 162, 179, 185, 197, 229, 230, 262, 303, 318, 350, 371, 382, 428, 561, 568, 575, 592, 624, 635, 654, 657, 660, 663, 672, 680, 682, 685, 689, 692, 693, 698, 701, 705, 706, 709, 711, 712, 714, 717, 719, 720, 721, 722, 723], "got": [148, 561, 635, 663, 721], "iterator_sess_run": [148, 561], "sess": [148, 380, 561, 566], "iter_op": [148, 561], "feed_dict": [148, 244, 287, 561], "output_tensor": [148, 380, 561, 566], "measur": [148, 263, 372, 561, 618, 631, 634, 651, 657, 658, 671, 672, 717, 721, 723, 726], "integr": [148, 187, 264, 561, 634, 672, 693, 694, 699, 717], "makeiter": [148, 561], "feed": [148, 244, 287, 561, 658, 711], "end": [148, 153, 208, 209, 210, 215, 229, 230, 245, 261, 262, 288, 302, 303, 343, 349, 425, 427, 561, 634, 635, 636, 658, 659, 664, 668, 672, 686, 702, 709, 711, 721, 722, 723], "predict": [148, 262, 267, 303, 311, 315, 316, 318, 364, 368, 369, 371, 424, 561, 631, 658, 671, 683, 717, 720, 721, 722], "pred": [148, 318, 371, 561, 671], "collate_tf_pr": [148, 561], "collat": [148, 170, 561], "get_input_output_node_nam": [148, 561], "fix_ref_type_of_graph_def": [148, 561], "fix": [148, 213, 215, 245, 288, 343, 561, 654, 655, 679, 711, 714, 717, 723], "strip_unused_lib": [148, 561], "offici": [148, 311, 315, 316, 364, 368, 369, 561, 628, 720], "r1": [148, 561], "15": [148, 561, 664, 668, 706], "branch": [148, 561, 629], "get_graph_def": [148, 561], "auto_input_output": [148, 561], "get_model_input_shap": [148, 561], "get_tensor_val_from_graph_nod": [148, 561], "graph_node_name_map": [148, 561], "kei": [148, 149, 157, 162, 163, 167, 201, 212, 221, 227, 229, 230, 325, 342, 380, 443, 561, 566, 568, 575, 577, 597, 614, 616, 624, 633, 635, 694, 695, 701, 712, 717, 721, 723], "val": [148, 221, 247, 250, 290, 293, 342, 561, 657, 672, 697], "tensor_v": [148, 561], "int8_node_name_revers": [148, 561], "revers": [148, 561, 695], "tf_diagnosis_help": [148, 561], "fp32_model": [148, 157, 170, 308, 561, 624, 634, 715, 717], "quan_model": [148, 561], "save_path": [148, 307, 308, 561, 634, 674], "diagnosi": [148, 229, 230, 561, 672, 695, 696, 697, 712, 718, 724], "generate_feed_dict": [148, 561], "input_tensor": [148, 197, 380, 561, 566], "get_weight_from_input_tensor": [148, 561], "input_tensor_nam": [148, 380, 561, 566], "associ": [148, 162, 314, 367, 561, 575], "search": [148, 156, 171, 193, 194, 201, 215, 226, 230, 233, 234, 276, 277, 309, 311, 321, 324, 325, 326, 346, 350, 364, 387, 428, 561, 582, 595, 597, 624, 633, 653, 667, 671, 675, 676, 686, 711, 712, 717, 720, 721, 723, 724], "look": [148, 212, 561, 634, 636, 664, 671, 694, 695, 697, 720, 725], "sq_weight_tensor": [148, 561], "sq_weights_nod": [148, 561], "two": [148, 157, 162, 177, 202, 207, 214, 219, 247, 252, 263, 290, 295, 314, 341, 345, 347, 354, 367, 434, 561, 575, 624, 629, 630, 631, 653, 654, 655, 658, 660, 662, 664, 672, 673, 699, 700, 702, 711, 714, 716, 717, 719, 720, 723, 725], "apply_inlin": [148, 561], "func": [148, 170, 561, 597, 624, 714, 725], "inlin": [148, 561, 675, 680, 683], "definit": [148, 152, 165, 238, 243, 281, 286, 561, 594, 607], "concret": [148, 561, 723], "new_graph_def": [148, 561], "construct_function_from_graph_def": [148, 561], "frozen_func": [148, 561], "rebuild": [148, 561, 676, 685, 689], "reconstruct": [148, 561, 712], "new_func": [148, 561], "parse_saved_model": [148, 561], "output_tensor_nam": [148, 380, 561, 566], "_saved_model": [148, 561], "load": [148, 160, 162, 163, 245, 261, 262, 288, 302, 303, 372, 380, 424, 561, 566, 568, 573, 574, 576, 577, 623, 624, 635, 654, 685, 689, 693, 695, 713, 714, 715, 720], "reconstruct_saved_model": [148, 561], "trackabl": [148, 561], "destin": [148, 306, 320, 561], "quant_weight_asym": 149, "v": [149, 153, 683, 692, 711, 723, 725], "min_scal": 149, "max_scal": 149, "asymmetr": [149, 636, 714, 717, 723], "e": [149, 162, 203, 229, 230, 575, 598, 628, 629, 658, 661, 665, 675, 680, 681, 685, 689, 711, 717, 720, 723], "perturb": 149, "minimum": [149, 203, 229, 230, 636, 652, 657, 672, 683, 711, 720, 723], "quant_weight_sym": 149, "quant_weight_actor": 149, "quant_weight": [149, 171], "hand": [149, 631], "issu": [149, 628, 629, 632, 633, 668, 695, 697, 714, 721], "quant_weight_w_scal": [149, 171, 597], "round_st": 149, "torch": [149, 150, 152, 153, 155, 156, 157, 158, 159, 162, 163, 165, 166, 167, 168, 170, 171, 175, 198, 201, 202, 204, 212, 226, 229, 230, 308, 372, 424, 619, 623, 630, 633, 636, 637, 658, 660, 662, 672, 673, 674, 675, 680, 683, 695, 714, 717, 720, 721], "straight": 149, "through": [149, 157, 233, 234, 276, 277, 371, 372, 424, 633, 651, 664, 666, 667, 671, 678, 699, 709, 710, 711, 713, 714, 717], "omniqu": 149, "saveinput": 149, "seqlen": 149, "256": [149, 252, 258, 295, 300, 605, 655, 660, 672, 722], "block_nam": 149, "cach": [149, 245, 288, 598, 663, 714, 717], "get_modul": [149, 163, 167, 577, 597], "nn": [149, 152, 156, 163, 165, 167, 170, 171, 201, 202, 212, 224, 229, 230, 308, 372, 424, 577, 580, 581, 582, 594, 597, 598, 603, 604, 607, 608, 612, 619, 623, 630, 658, 672, 674, 717, 720, 721], "set_modul": [149, 167, 170, 597, 612], "new_modul": [149, 163, 167, 170, 577, 597, 612], "get_scale_shap": 149, "wrapper_block": 149, "enable_minmax_tun": 149, "conv1d": [149, 156, 224, 582, 636], "indic": [149, 162, 178, 179, 186, 197, 229, 230, 238, 243, 245, 281, 286, 288, 304, 314, 325, 367, 387, 388, 390, 575, 583, 630, 654, 663, 695, 700, 721], "unwrapper_block": 149, "unwrap": 149, "wrapperlinear": 149, "wrappertransformerconv1d": 149, "sampling_input": 149, "input_id": [149, 245, 262, 288, 303, 672], "input_oth": 149, "length": [149, 212, 229, 230, 245, 262, 288, 303, 314, 367, 633, 655, 671, 712, 714, 717, 722], "id": [149, 177, 261, 263, 302, 311, 313, 314, 315, 316, 364, 366, 367, 368, 369, 671, 700, 701, 705, 706, 707, 719, 723], "current_input_id": 149, "current_input_oth": 149, "move_input_to_devic": 149, "check_is_cpu": 149, "otherwis": [149, 162, 247, 262, 290, 303, 575, 624, 628, 635, 655, 687, 690, 713, 717, 722], "block_forward": 149, "amp_dtyp": 149, "automat": [149, 199, 201, 202, 229, 230, 247, 250, 257, 258, 290, 293, 300, 309, 319, 346, 630, 633, 651, 655, 667, 672, 673, 675, 677, 680, 681, 683, 685, 686, 687, 689, 690, 692, 699, 702, 710, 711, 714, 720, 722, 723], "mix": [149, 155, 164, 229, 230, 348, 360, 372, 426, 440, 598, 633, 634, 641, 667, 675, 681, 682, 683, 724], "precis": [149, 155, 164, 229, 230, 233, 234, 276, 277, 309, 316, 318, 319, 346, 348, 360, 369, 371, 372, 382, 426, 429, 440, 452, 598, 624, 633, 634, 635, 641, 651, 652, 659, 660, 664, 667, 675, 681, 682, 683, 712, 713, 714, 717, 720, 723, 724], "collect_round_v": 149, "collect_minmax_scal": 149, "get_batch_dim": 149, "posit": [149, 179, 197, 262, 303, 608, 628, 671, 675, 700, 705, 706, 707], "dim": [149, 262, 303, 720, 722], "wrappermultiblock": 149, "module_list": 149, "act": [149, 221, 243, 286, 628], "singl": [149, 179, 196, 219, 229, 230, 238, 245, 262, 281, 288, 303, 314, 343, 345, 367, 371, 394, 424, 468, 630, 655, 657, 668, 698, 711, 715, 720], "get_block_nam": 149, "network": [149, 157, 196, 203, 204, 343, 431, 598, 631, 652, 658, 659, 662, 672, 694, 712, 714, 720, 723], "get_tokenizer_funct": 149, "token": [149, 245, 256, 259, 262, 288, 299, 301, 303, 310, 311, 312, 363, 364, 365, 619, 655, 671, 672, 694, 695, 717, 719, 720, 722, 723], "truncat": [149, 245, 262, 288, 303, 655, 722], "field": [149, 179, 229, 230, 247, 290, 314, 367, 630, 634, 636, 660, 672, 719, 723, 725], "get_dataload": 149, "data_nam": 149, "neelnanda": 149, "pile": 149, "10k": [149, 661, 665], "42": [149, 193, 230, 326, 726], "test": [149, 177, 229, 230, 262, 303, 629, 633, 657, 668, 700, 705, 726], "shuffl": [149, 235, 237, 242, 244, 265, 278, 280, 285, 287, 563, 654, 672, 714], "enable_full_rang": [149, 150, 154, 171, 597, 619, 715, 717], "cuda": [149, 162, 221, 575, 583, 598, 673, 675, 677, 711, 714], "lr_schedul": [149, 672, 711], "dataset_nam": [149, 696], "dataset_split": 149, "use_quant_input": 149, "lr": [149, 153, 229, 230, 658, 660, 672], "005": [149, 717], "minmax_lr": 149, "low_gpu_mem_usag": 149, "200": [149, 261, 302, 630, 701, 723], "512": 149, "sampler": [149, 179, 235, 237, 239, 242, 244, 265, 278, 280, 282, 285, 287, 299, 310, 359, 439, 563, 654, 660], "rand": [149, 675, 720], "n_block": [149, 171, 581, 717], "gradient_accumulate_step": 149, "not_use_ms": 149, "dynamic_max_gap": 149, "data_typ": [149, 154, 171, 362, 442, 581], "signround": 149, "advanc": [149, 157, 229, 230, 628, 633, 635, 641, 670, 711, 714, 717, 725], "cheng": 149, "wenhua": 149, "et": [149, 153, 157, 652, 717, 720], "al": [149, 153, 157, 652, 717, 720], "via": [149, 309, 333, 338, 346, 628, 633, 660, 667, 672, 675, 692, 711, 712], "sign": [149, 197, 362, 442, 629, 633, 636, 652, 694, 712, 714, 717, 719], "gradient": [149, 153, 196, 327, 633, 667, 672, 711, 712, 726], "descent": [149, 153, 201, 633, 712], "arxiv": [149, 156, 196, 197, 215, 216, 223, 343, 582, 605, 633, 652, 711, 712, 717, 720], "preprint": [149, 652, 711, 717, 720], "2309": 149, "05516": 149, "2023": [149, 633, 707, 711, 717, 720, 726], "pytorch": [149, 187, 189, 190, 198, 201, 204, 207, 208, 211, 216, 217, 224, 229, 230, 244, 245, 247, 250, 254, 262, 264, 269, 271, 287, 288, 290, 293, 297, 303, 308, 309, 318, 319, 339, 341, 344, 346, 354, 363, 371, 372, 381, 424, 434, 617, 624, 629, 630, 631, 633, 634, 635, 636, 652, 653, 654, 658, 659, 661, 664, 667, 668, 670, 672, 673, 674, 675, 677, 680, 681, 682, 683, 692, 694, 703, 706, 707, 711, 712, 713, 717, 718, 720, 723, 725], "empti": [149, 163, 179, 229, 230, 577, 585, 678, 715], "layer1": [149, 201, 229, 230, 672, 711, 714], "layer_nam": [149, 225, 230, 711], "rang": [149, 150, 171, 248, 249, 262, 291, 292, 303, 387, 401, 443, 563, 581, 595, 597, 613, 619, 633, 634, 636, 652, 655, 657, 658, 659, 660, 672, 695, 697, 710, 711, 714, 717, 720, 722], "learn": [149, 153, 633, 634, 635, 654, 655, 662, 666, 667, 668, 672, 673, 675, 677, 680, 681, 683, 686, 687, 690, 692, 711, 712, 714, 720, 721, 723, 724], "rate": [149, 153, 672, 711, 714], "schedul": [149, 195, 198, 208, 209, 210, 215, 216, 218, 229, 230, 310, 339, 343, 363, 672, 699, 700, 702, 710], "futur": [149, 175, 233, 234, 265, 276, 277, 667, 670, 672, 683, 705, 706, 707, 724], "accumul": [149, 359, 439, 723], "step": [149, 153, 196, 207, 208, 209, 210, 214, 215, 219, 229, 230, 341, 343, 345, 613, 635, 636, 657, 658, 659, 660, 672, 687, 690, 692, 705, 706, 707, 710, 711, 713, 716, 717, 719, 720, 721, 723], "squar": [149, 318, 353, 371, 433, 657, 671, 697, 723], "gap": [149, 657, 674], "addit": [149, 170, 230, 613, 635, 636, 658, 686, 694, 700, 717, 718, 723], "keyword": [149, 162, 230, 575], "argument": [149, 162, 230, 443, 575, 585, 608, 631, 657, 696, 697, 700, 703, 705, 706, 707, 717], "autooptround": 149, "adamw": [149, 189, 269], "autoadamround": 149, "export_compressed_model": [150, 582, 595, 605, 619, 717], "compression_dtyp": [150, 619, 717], "int32": [150, 171, 581, 595, 619, 655, 717], "compression_dim": [150, 619, 717], "scale_dtyp": [150, 619, 717], "float32": [150, 248, 249, 262, 291, 292, 303, 314, 367, 563, 619, 634, 651, 655, 672, 714, 717, 720, 722], "use_optimum_format": [150, 619, 717], "weightonlylinear": [150, 717], "json": [150, 170, 246, 262, 289, 303, 623, 655, 674, 693, 700, 701, 705, 706, 707, 717, 722], "compress": [150, 156, 310, 333, 338, 363, 382, 582, 613, 619, 626, 633, 641, 658, 667, 672, 692, 694, 709, 710, 711, 712, 714, 720, 724, 726], "comoress": [150, 619], "select": [150, 171, 218, 221, 230, 245, 288, 595, 597, 619, 630, 631, 652, 667, 668, 692, 711, 714, 717, 721, 723], "choos": [150, 171, 247, 290, 581, 595, 597, 619, 667, 680, 712, 718, 720, 723, 725], "popular": [150, 310, 363, 626, 633, 634, 635, 652, 658, 661, 662, 665, 670, 672, 711, 714, 717, 723, 724], "huggingfac": [150, 201, 212, 245, 288, 619, 655, 661, 665, 680, 681, 682, 683, 703, 704, 706, 707, 720, 726], "why": [150, 720, 721], "g_idx": 150, "instead": [150, 153, 227, 230, 244, 287, 624, 678, 680, 683, 698, 711, 717], "record": [150, 157, 170, 187, 190, 245, 246, 247, 253, 264, 271, 288, 289, 290, 296, 597, 624, 655, 697, 717, 719, 721, 723], "order": [150, 161, 170, 179, 197, 311, 312, 347, 350, 353, 362, 364, 365, 388, 428, 433, 442, 630, 657, 671, 695, 713, 717, 720, 721, 723], "packed_weight": 150, "qweight": 150, "5": [150, 161, 175, 179, 187, 197, 229, 230, 249, 258, 264, 292, 300, 318, 371, 394, 396, 424, 466, 634, 655, 662, 664, 668, 671, 672, 697, 702, 705, 706, 711, 713, 714, 717, 720, 722, 723, 725, 726], "alwai": [150, 179, 267, 314, 367, 371, 424, 657, 671, 672, 697, 717], "even": [150, 715, 717, 720], "modul": [152, 158, 159, 198, 204, 211, 323, 329, 339, 340, 574, 593, 606, 630, 653, 654, 658, 667, 671, 672, 674, 711, 713, 716, 717, 721, 724], "sgd": [153, 189, 229, 230, 269, 658, 672, 713, 725], "param": [153, 170, 177, 181, 189, 235, 263, 269, 278, 318, 350, 371, 428, 563, 624, 634, 674, 723], "requir": [153, 170, 171, 229, 230, 236, 347, 380, 423, 566, 581, 597, 598, 630, 634, 635, 651, 652, 654, 657, 659, 660, 664, 672, 673, 674, 676, 686, 692, 694, 699, 700, 703, 706, 707, 711, 714, 717, 718, 719, 720, 721, 723, 725], "momentum": [153, 196, 343, 667, 672, 711, 725], "weight_decai": [153, 194, 672, 725], "nesterov": [153, 672, 725], "maxim": [153, 672, 711, 723], "foreach": 153, "differenti": 153, "stochast": 153, "align": [153, 262, 303, 628, 717, 722], "rule": [153, 657, 675, 711], "110mm": 153, "4pt": 153, "textbf": 153, "gamma": 153, "theta_0": 153, "f": [153, 162, 198, 575, 653, 658, 660, 714, 717, 720], "theta": 153, "lambda": [153, 162, 575, 715], "decai": 153, "hspace": 153, "13mm": 153, "mu": [153, 657], "tau": 153, "textit": 153, "ex": 153, "ldot": 153, "5mm": 153, "g_t": 153, "leftarrow": 153, "nabla_": 153, "f_t": 153, "theta_": 153, "neq": 153, "10mm": 153, "15mm": 153, "_t": 153, "_": [153, 233, 234, 276, 277, 424, 630, 631, 633, 634, 635, 652, 657, 658, 660, 662, 664, 672, 673, 674, 675, 681, 685, 687, 689, 690, 697, 700, 701, 709, 711, 714, 717, 718, 719, 720, 721, 723, 725], "g_": 153, "theta_t": 153, "bf": 153, "formula": [153, 711, 720], "On": [153, 714, 726], "deep": [153, 227, 568, 633, 634, 635, 654, 667, 668, 672, 673, 675, 677, 680, 681, 683, 686, 692, 712, 714, 723, 724, 726], "l2": [153, 230, 711], "penalti": [153, 311, 312, 364, 365, 671], "xdoctest": [153, 162, 575], "skip": [153, 162, 575, 721, 723], "9": [153, 196, 229, 230, 630, 668, 672, 711, 713, 720, 723, 725, 726], "zero_grad": [153, 660, 672, 711], "loss_fn": 153, "backward": [153, 598, 613, 658, 659, 660, 672, 710, 711, 714, 718], "subtli": 153, "sutskev": 153, "some": [153, 199, 201, 229, 230, 245, 288, 342, 635, 636, 653, 655, 657, 662, 668, 671, 672, 694, 695, 696, 697, 700, 709, 711, 714, 716, 717, 720, 721, 723, 724, 726], "written": [153, 672], "v_": 153, "p_": 153, "denot": [153, 720], "veloc": 153, "respect": [153, 628, 664, 711, 720, 725], "contrast": [153, 203, 341, 722], "emploi": 153, "form": [153, 316, 369, 657, 658, 692], "analog": 153, "modifi": [153, 212, 247, 290, 423, 442, 630, 636, 660, 664, 696, 697, 711, 725], "d_p_list": 153, "momentum_buffer_list": 153, "has_sparse_grad": 153, "see": [153, 160, 197, 223, 262, 303, 311, 364, 576, 598, 628, 629, 630, 632, 653, 669, 672, 685, 686, 689, 692, 693, 697, 698, 717, 720, 721, 723], "actawareweightqu": [154, 581], "example_input": [154, 164, 167, 169, 170, 171, 229, 230, 308, 579, 580, 581, 596, 597, 608, 623, 662], "algo": [154, 181, 451, 452, 581, 616], "bf16modulewrapp": 155, "bf16modul": 155, "mixed_precision_model": 155, "bf16_symbolic_trac": 155, "fx_sub_module_list": 155, "trace": [155, 157, 168, 170, 201, 229, 230, 308, 431, 579, 580, 608, 630, 682, 723], "_description_": 155, "is_leaf": [156, 582], "judg": [156, 582], "trace_gptq_target_block": [156, 582], "module_typ": [156, 582], "modulelist": [156, 582], "sequenti": [156, 179, 243, 286, 347, 349, 425, 427, 582, 723], "stack": [156, 582], "structur": [156, 202, 213, 214, 229, 230, 343, 361, 441, 582, 624, 667, 691, 693, 696, 705, 711, 712, 714, 721, 724, 726], "critic": [156, 212, 582, 628], "gptq_related_block": [156, 582], "embed": [156, 170, 582, 652, 711], "transformers_pr": [156, 582], "todo": [156, 179, 181, 245, 248, 288, 291, 314, 360, 367, 440, 563, 582], "transformers_nam": [156, 582], "find_lay": [156, 224, 582], "find_layers_nam": [156, 582], "log_quantizable_layers_per_transform": [156, 582], "transformer_block": [156, 582], "maxq": [156, 582], "gptquantiz": [156, 582], "nsampl": [156, 171, 223, 582, 717], "use_max_length": [156, 171, 582, 717], "pad_max_length": [156, 171, 717], "layer_wis": [156, 171, 573, 623, 715], "pretrain": [156, 582, 619, 675, 681], "url": [156, 247, 290, 582, 629, 669, 703, 704, 711], "org": [156, 196, 197, 215, 216, 223, 314, 343, 367, 582, 605, 630, 657, 668, 687, 690, 711], "2210": [156, 582, 605, 717], "17323": [156, 582, 605, 717], "node_collector": 157, "hook": [157, 186, 190, 212, 271, 272, 333, 338, 616, 658, 659, 672, 711, 720, 721], "hessiantrac": 157, "q_model": [157, 161, 230, 320, 424, 464, 468, 580, 630, 633, 654, 655, 657, 660, 662, 665, 666, 671, 672, 674, 694, 695, 714, 715, 716, 717], "criterion": [157, 179, 186, 188, 189, 195, 196, 203, 208, 209, 210, 212, 215, 216, 220, 229, 230, 266, 269, 310, 363, 658, 659, 672, 711, 714, 720, 723, 725], "yao": 157, "zhewei": 157, "pyhessian": 157, "len": [157, 230, 262, 303, 655, 660, 722], "2020": 157, "ieee": [157, 673, 720], "intern": [157, 243, 286, 360, 440, 654, 655, 671, 711], "confer": [157, 711, 720], "big": [157, 657, 717], "dong": 157, "zhen": 157, "hawq": [157, 431, 723], "v2": [157, 431, 654, 660, 662, 663, 668, 681, 718, 720, 723, 724, 726], "system": [157, 162, 177, 263, 575, 624, 651, 678, 711, 726], "33": [157, 726], "18518": 157, "18529": 157, "openvinotoolkit": 157, "nncf": 157, "develop": [157, 181, 382, 629, 630, 653, 668, 672, 673, 675, 681, 692, 698, 711, 712, 716, 719], "hessian_trac": 157, "compare_weight": 157, "float_dict": 157, "ani": [157, 162, 181, 314, 316, 359, 367, 369, 418, 423, 439, 443, 575, 583, 598, 608, 621, 624, 628, 633, 636, 653, 660, 675, 680, 693, 694, 698, 699, 711, 719, 723], "quantized_dict": 157, "compar": [157, 318, 371, 624, 659, 671, 695, 711, 714, 717, 719, 721, 723], "being": [157, 314, 367, 636, 700], "wt_compare_dict": 157, "float_model": 157, "state_dict": [157, 660, 717, 721], "qmodel": 157, "compute_error": 157, "state": [157, 202, 598, 636, 678, 711], "weight_dict": 157, "hawq_top": 157, "enable_act": 157, "portabl": [160, 576], "serial": [160, 162, 575, 576], "copyreg": [160, 576], "mechan": [160, 196, 576, 711, 719, 724], "pickler": [160, 576], "pickletool": [160, 576], "comment": [160, 576, 628, 635, 655, 671, 672, 717, 722], "unpickl": [160, 162, 575, 576], "misc": [160, 576, 669], "format_vers": [160, 576], "compatible_format": [160, 576], "except": [160, 162, 443, 575, 576, 624, 653, 698, 714, 715], "pickleerror": [160, 576], "pickl": [160, 162, 575, 576], "picklingerror": [160, 576], "unpicklingerror": [160, 576], "problem": [160, 245, 288, 318, 371, 576, 671, 673, 693], "secur": [160, 576, 633, 694, 712, 727], "violat": [160, 576], "also": [160, 202, 244, 247, 262, 287, 290, 303, 311, 364, 371, 382, 424, 576, 598, 629, 631, 634, 635, 636, 654, 657, 661, 665, 667, 671, 672, 675, 680, 685, 686, 689, 692, 693, 694, 697, 698, 709, 711, 712, 714, 716, 717, 720, 723], "includ": [160, 187, 196, 201, 203, 218, 220, 229, 230, 245, 247, 254, 262, 264, 288, 290, 297, 303, 309, 319, 341, 346, 443, 576, 598, 624, 628, 634, 635, 636, 654, 655, 657, 668, 669, 670, 671, 672, 675, 678, 681, 686, 698, 702, 705, 706, 707, 711, 714, 716, 717, 721, 723], "necessarili": [160, 576], "limit": [160, 194, 350, 428, 576, 624, 633, 657, 658, 670, 714, 717, 718, 721], "attributeerror": [160, 443, 576], "eoferror": [160, 576], "importerror": [160, 576, 663], "indexerror": [160, 576], "layerwisequ": 161, "pretrained_model_name_or_path": [161, 163, 577], "op_cfg": 161, "output_dir": [161, 619, 672, 680, 681, 696, 697, 703, 706, 707], "memomeri": 161, "file_lik": [162, 575], "map_loc": [162, 575], "pickle_modul": [162, 198, 575], "weights_onli": [162, 575], "pickle_load_arg": [162, 575], "facil": [162, 575], "treat": [162, 575, 654], "storag": [162, 575, 633, 665, 671, 694, 697, 717, 720], "thei": [162, 263, 443, 575, 628, 653, 658, 664, 672, 680, 695, 698, 709], "deseri": [162, 575], "were": [162, 318, 371, 575, 678, 711], "fail": [162, 575, 630, 654, 662, 701], "becaus": [162, 179, 207, 212, 262, 303, 341, 575, 630, 697, 714, 720, 722, 723], "doesn": [162, 262, 303, 575, 634, 660, 672, 673, 693, 725], "certain": [162, 224, 575, 719], "howev": [162, 575, 698, 711, 717, 720], "altern": [162, 229, 230, 424, 575], "callabl": [162, 229, 230, 316, 369, 394, 447, 464, 465, 468, 575, 583, 603, 608, 613, 653, 654], "locat": [162, 172, 221, 262, 303, 575, 660, 678, 685, 689, 692, 700, 714, 718, 722, 725], "resid": [162, 575], "tag": [162, 380, 566, 575, 720, 721], "wa": [162, 229, 230, 575, 634, 672, 697, 698, 701, 712, 723], "builtin": [162, 575, 660], "device_id": [162, 575], "either": [162, 230, 314, 367, 575, 676, 680, 700, 710, 713, 714], "final": [162, 201, 208, 221, 343, 575, 635, 672, 678, 709, 711, 714, 718, 723], "alreadi": [162, 177, 247, 261, 263, 290, 302, 575, 634, 655, 667, 687, 690, 694, 703, 723], "right": [162, 258, 300, 314, 367, 575, 628, 629, 630, 692, 698, 720, 722], "fall": [162, 170, 575], "back": [162, 170, 262, 268, 303, 575, 657, 692, 698], "behavior": [162, 575, 628, 634, 635, 636, 664, 674, 717, 721, 723, 725], "wasn": [162, 575], "appear": [162, 575, 628, 686, 692, 694], "ones": [162, 314, 367, 575, 711], "put": [162, 247, 290, 575, 655, 658], "user": [162, 177, 189, 201, 213, 221, 229, 230, 233, 234, 247, 250, 254, 262, 263, 269, 276, 277, 290, 293, 297, 303, 309, 333, 338, 344, 346, 347, 371, 372, 382, 424, 429, 442, 575, 580, 613, 624, 630, 631, 633, 634, 635, 636, 641, 651, 653, 654, 658, 659, 662, 664, 667, 670, 671, 672, 673, 674, 675, 676, 677, 679, 680, 681, 683, 686, 692, 699, 700, 701, 702, 705, 706, 707, 709, 710, 711, 712, 714, 715, 716, 718, 720, 721, 722, 723, 727], "register_packag": [162, 575], "readlin": [162, 575], "tell": [162, 371, 424, 575, 713], "seek": [162, 575, 717], "o": [162, 443, 575, 653, 668, 677, 695], "pathlik": [162, 575], "metadata": [162, 575], "primit": [162, 575], "unless": [162, 575, 664], "implicitli": [162, 181, 575], "known": [162, 265, 350, 428, 575, 672, 711, 714, 721, 723], "insecur": [162, 575, 694], "possibl": [162, 263, 575, 598, 657, 694, 710, 711, 715, 716, 723], "construct": [162, 245, 248, 249, 252, 260, 265, 267, 268, 270, 288, 291, 292, 295, 371, 376, 380, 442, 563, 565, 566, 575, 616, 628, 635, 636, 655, 660, 711, 723], "malici": [162, 575], "arbitrari": [162, 575, 672, 710], "code": [162, 201, 233, 234, 263, 276, 277, 320, 344, 347, 424, 575, 613, 630, 633, 634, 635, 636, 655, 658, 659, 660, 666, 667, 669, 671, 675, 677, 679, 680, 681, 683, 686, 692, 696, 697, 699, 700, 701, 709, 710, 711, 712, 713, 714, 719, 720, 721, 722], "never": [162, 575, 723], "could": [162, 167, 175, 203, 233, 234, 247, 276, 277, 290, 347, 372, 424, 575, 613, 628, 630, 659, 672, 710, 711, 714, 717, 720, 724], "come": [162, 575, 670, 723], "untrust": [162, 575], "unsaf": [162, 575], "tamper": [162, 575], "trust": [162, 575, 657, 694], "load_state_dict": [162, 575], "ram": [162, 575], "surg": [162, 575], "checkpoint": [162, 380, 566, 575, 623, 674], "By": [162, 201, 229, 230, 311, 364, 575, 635, 636, 671, 674, 685, 686, 689, 711, 712, 717, 723], "decod": [162, 257, 258, 300, 311, 364, 575, 671, 722], "byte": [162, 575], "utf": [162, 261, 302, 575], "unicodedecodeerror": [162, 575], "ascii": [162, 575], "codec": [162, 575], "0x": [162, 575], "incorrect": [162, 575], "extra": [162, 316, 369, 575, 672, 717], "encod": [162, 314, 367, 575, 695, 722], "latin1": [162, 575], "them": [162, 201, 245, 288, 575, 630, 636, 654, 657, 662, 664, 666, 695, 698, 710, 711, 717, 723], "keep": [162, 212, 221, 342, 429, 575, 630, 634, 653, 691, 692, 718], "later": [162, 167, 175, 575, 653, 699, 700, 721], "byte_arrai": [162, 575], "undefin": [162, 221, 342, 575], "filepath": [162, 575, 624, 653], "pt": [162, 575, 623, 668, 674, 696, 712, 714, 716, 717], "onto": [162, 575], "loc": [162, 575], "bytesio": [162, 575], "open": [162, 266, 310, 363, 575, 616, 626, 628, 633, 662, 663, 672, 687, 690, 693, 694, 698, 699, 700, 712], "rb": [162, 575], "buffer": [162, 575], "get_children": [163, 577], "get_named_children": [163, 577], "dowload_hf_model": [163, 577], "repo_id": [163, 577], "cache_dir": [163, 577], "repo_typ": [163, 577], "revis": [163, 577], "download": [163, 247, 290, 577, 655, 657, 668, 697, 703, 718], "hug": [163, 577, 633, 699, 712], "face": [163, 577, 628, 633, 641, 675, 679, 699, 701, 712, 718, 726], "hf": [163, 577, 670, 720, 726], "hub": [163, 577, 633, 661, 665, 683], "load_empty_model": [163, 577, 715], "automodelforcausallm": [163, 577], "get_super_module_by_nam": [163, 577], "module_nam": [163, 196, 198, 208, 209, 210, 211, 213, 214, 215, 216, 218, 220, 343, 568, 577, 624], "father": [163, 201, 577], "update_modul": [163, 577], "load_layer_wise_quantized_model": [163, 577], "load_tensor_from_shard": [163, 577], "shard": [163, 577], "load_tensor": [163, 577], "ipex_mixed_precis": 164, "fakeaffinetensorquantfunct": [165, 594], "affin": [165, 594, 714], "teqlinearfakequ": [165, 594], "orig_lay": [165, 594], "mullinear": [165, 171, 581, 594], "input_scal": [165, 594], "detector": 166, "transformerbasedmodelblockpatterndetector": [166, 580], "pattern_lst": [166, 580], "block_pattern": [166, 580], "detect": [166, 170, 201, 229, 230, 314, 318, 367, 371, 376, 580, 629, 630, 675, 682, 683, 711, 723], "ffn": [166, 212, 580], "torchsmoothqu": [167, 720], "q_func": [167, 233, 234, 276, 277, 350, 351, 353, 354, 355, 356, 425, 428, 429, 430, 431, 433, 434, 435, 436, 634, 635, 672, 723], "traced_model": [167, 168], "whose": [167, 175, 203, 342, 380, 566, 666, 720, 723], "absorb": [167, 170, 171, 175, 581, 597, 717], "trace_and_fuse_sub_graph": 168, "is_qat": 168, "tequant": [169, 596], "absorb_to_lay": [169, 170, 171, 596, 597], "extra_config": [169, 171], "trainabl": [169, 596, 633, 712, 717], "move_input_devic": 170, "auto": [170, 178, 199, 201, 229, 230, 348, 363, 394, 426, 432, 465, 604, 624, 630, 652, 675, 678, 680, 682, 683, 711, 714, 717], "kind": [170, 672], "forward_wrapp": 170, "get_embedding_contigu": 170, "contigu": 170, "is_fused_modul": 170, "_propagate_qconfig_help": 170, "collate_torch_pr": 170, "collate_result": 170, "input2tupl": 170, "append_attr": 170, "fx_model": 170, "fx_white_list": 170, "append": [170, 347, 350, 428, 630, 659, 672, 710], "graphmodul": [170, 630, 716], "dir": [170, 245, 288, 619, 623, 655, 663, 666], "generate_activation_observ": 170, "smooth_quant_en": 170, "observ": [170, 636, 717, 719, 721, 723], "what": [170, 208, 243, 286, 371, 424, 613, 628, 712], "check_cfg_and_qconfig": 170, "op_infos_from_cfg": [170, 580], "output_tensor_ids_op_nam": [170, 580], "paser_cfg": [170, 580], "ops_nam": [170, 580], "get_quantizable_ops_from_cfg": [170, 580], "input_tensor_ids_op_nam": [170, 580], "update_sq_scal": 170, "ipex_config_path": 170, "smoothquant_scale_info": 170, "ipex_config": 170, "auto_copi": 170, "fetch_modul": [170, 597, 612], "op_nam": [170, 226, 229, 230, 361, 441, 580, 597, 612, 624, 625, 635, 672, 711, 721], "simple_infer": [170, 580], "get_example_input": [170, 597], "example_inp": [170, 597], "get_fallback_ord": 170, "confidence_batch": [170, 723], "fallback": [170, 230, 353, 354, 431, 433, 434, 662, 673, 695, 716, 723], "requantize_cfg": 170, "confid": 170, "ordered_op": 170, "get_mse_order_per_fp32": 170, "influenc": [170, 711], "last": [170, 196, 221, 229, 230, 654, 673, 675, 677, 682, 686, 714, 717, 720], "fallback_ord": 170, "get_mse_order_per_int8": 170, "get_torch_vers": 170, "match_datatype_pattern": 170, "calculate_quant_min_max": 170, "unsign": [170, 362, 442, 636, 717], "qmin": 170, "qmax": 170, "get_depth": [170, 580], "depth": [170, 580, 658, 716], "get_dict_at_depth": [170, 580], "target_depth": [170, 580], "nest": [170, 227, 568, 580], "get_element_under_depth": [170, 580], "ops_lst": [170, 580], "get_op_type_by_nam": 170, "quantizable_op": [170, 580], "collect_weight_info": 170, "fc": [170, 230, 711], "_type_": [170, 619], "get_module_input_output": [170, 597], "module_hook_config": [170, 597], "input_func": [170, 597], "output_func": [170, 597], "help": [170, 190, 271, 320, 597, 653, 670, 674, 675, 681, 692, 700, 705, 706, 707, 717, 723, 724], "module_name_list": [170, 597], "fc1": [170, 171, 581, 597], "preprocess": [170, 229, 230, 245, 262, 288, 303, 442, 597, 616, 660, 722], "usag": [170, 178, 179, 181, 244, 287, 314, 320, 347, 367, 401, 443, 568, 583, 597, 612, 635, 655, 660, 661, 675, 683, 694, 700, 705, 706, 707, 709, 713, 717, 722], "input_valu": [170, 597], "output_valu": [170, 597], "total_valu": [170, 597], "get_absorb_lay": [170, 597], "supported_lay": [170, 597], "no_absorb_lay": [170, 597], "allow": [170, 350, 428, 597, 598, 658, 660, 671, 672, 673, 694, 699, 711, 713, 717, 720, 723, 725], "absorpt": [170, 597], "eg": [170, 227, 247, 290, 568, 597, 655, 713], "absorbed_1": [170, 597], "xx": [170, 597], "get_block_prefix": [170, 597], "block_list": [170, 597], "block_num": [170, 597], "block_prefix": [170, 597], "get_hidden_st": [170, 597], "calib": [170, 597, 635], "rest": [170, 597, 699, 700, 705, 706, 707], "part": [170, 199, 208, 341, 343, 597, 630, 668, 673, 687, 690, 700, 702, 711, 715, 720, 724], "total_block_kwarg": [170, 597], "total_block_arg": [170, 597], "quantize_4bit": [171, 597], "quantil": [171, 595, 597, 723], "nf4": [171, 595, 597, 633, 717], "return_int": [171, 581, 597, 717], "fp4": [171, 595, 597, 633, 717], "q_tensor": [171, 597], "qdq_weight_asym": [171, 597], "qdq_weight_sym": [171, 597], "full_rang": [171, 597], "amax": [171, 597], "qdq_weight_actor": [171, 597], "place": [171, 579, 597, 659, 668, 705, 711, 721, 723], "search_clip": [171, 597], "best": [171, 179, 186, 262, 303, 304, 309, 346, 353, 387, 433, 597, 628, 631, 653, 668, 675, 681, 692, 698, 709, 714, 717, 720, 722, 723], "num": [171, 595, 597, 624], "best_clip_ratio": [171, 597], "group_dim": [171, 595, 605, 717], "gptq_perm": 171, "perm": [171, 262, 303, 722], "absorb_lay": [171, 581], "absorb_dict": [171, 581], "absorbed_lay": [171, 581], "fc3": [171, 581], "oom": [171, 581], "teq_quant": [171, 596], "algorithm_registri": 172, "algorithm_typ": 172, "registr": [172, 247, 254, 262, 290, 297, 303, 336], "algorithmschedul": 172, "conf": [172, 177, 186, 230, 233, 234, 263, 276, 277, 320, 327, 328, 330, 331, 332, 333, 338, 350, 351, 353, 354, 355, 356, 360, 372, 382, 424, 425, 428, 429, 430, 431, 433, 434, 435, 436, 440, 443, 613, 630, 631, 633, 636, 651, 658, 665, 666, 672, 673, 674, 694, 696, 697, 710, 714, 715, 716, 717, 719, 720, 723], "control": [172, 229, 230, 630, 672, 698, 711, 723], "phase": [172, 631, 672, 711, 714, 716, 723], "fastbiascorrect": [173, 176], "fast_bias_correct": [174, 229, 230, 363, 714], "weight_correct": [174, 229, 230, 363, 714], "weightcorrect": 176, "1e": [176, 720, 725], "05": [176, 230, 318, 371, 396, 671, 720, 726], "evalu": [177, 179, 186, 203, 229, 233, 234, 245, 263, 276, 277, 288, 304, 311, 314, 315, 316, 318, 320, 364, 367, 368, 369, 371, 372, 382, 394, 424, 613, 616, 631, 634, 635, 653, 655, 658, 659, 666, 667, 670, 671, 672, 673, 675, 681, 683, 686, 692, 709, 711, 714, 719, 720, 721, 723, 725], "set_env_var": [177, 263], "env_var": [177, 263], "overwrite_exist": [177, 263], "env": [177, 263, 663, 705, 706, 707], "set_all_env_var": [177, 263], "physic": [177, 263, 628, 651, 700], "core": [177, 229, 230, 263, 386, 629, 651, 669, 685, 689, 700, 726], "get_architectur": [177, 263], "architectur": [177, 263, 321, 324, 633, 651, 658, 672, 699, 711, 712, 717, 724], "get_threads_per_cor": [177, 263], "thread": [177, 229, 230, 263, 418, 423, 598, 654, 702], "get_thread": [177, 263], "get_physical_id": [177, 263], "socket": [177, 263, 624, 700, 702, 726], "get_core_id": [177, 263], "get_bounded_thread": [177, 263], "core_id": [177, 263], "bind": [177, 263], "run_inst": 177, "b_dataload": [177, 229, 230, 651, 672], "b_func": [177, 651], "benchmarkconfig": [177, 229, 230, 651, 657, 672], "goal": [177, 179, 304, 309, 333, 338, 346, 372, 424, 635, 654, 710, 714, 723], "prefer": [177, 309, 346, 424, 711, 717], "space": [177, 193, 194, 209, 210, 215, 216, 229, 230, 233, 234, 276, 277, 309, 316, 321, 324, 325, 326, 346, 350, 353, 360, 369, 372, 424, 428, 433, 440, 628, 629, 631, 634, 635, 636, 653, 711, 714, 720, 725], "etc": [177, 186, 261, 302, 304, 309, 316, 333, 338, 346, 369, 372, 424, 623, 633, 658, 667, 694, 698, 711, 719, 723], "generate_prefix": 177, "core_list": 177, "command": [177, 263, 613, 657, 660, 675, 677, 680, 685, 689, 693, 694, 696, 697, 698, 700], "numactl": [177, 663, 678, 686], "call_on": 177, "cmd": 177, "log_fil": [177, 417, 422], "window": [177, 651, 668, 692, 693], "config_inst": 177, "raw_cmd": 177, "multi": [177, 199, 201, 212, 314, 367, 371, 424, 631, 654, 655, 667, 672, 709, 711, 714, 723], "trigger": [177, 208, 343], "summary_benchmark": 177, "summari": [177, 613, 657, 687, 690, 721, 726], "profil": [177, 230, 363], "benchmark_with_raw_cmd": 177, "fit_with_raw_cmd": 177, "cores_per_inst": [177, 229, 230, 651, 672, 713], "num_of_inst": [177, 229, 230, 651, 672, 713], "fit": [177, 203, 229, 230, 350, 372, 424, 428, 443, 613, 630, 633, 651, 654, 655, 657, 660, 665, 666, 671, 672, 673, 674, 694, 695, 711, 714, 715, 716, 717], "pb": [177, 229, 230, 372, 380, 424, 566, 633, 651, 660, 665, 672, 674, 694, 697, 705, 721, 726], "eval_dataload": [177, 229, 230, 233, 234, 276, 277, 347, 350, 351, 353, 354, 355, 356, 372, 424, 425, 428, 429, 430, 431, 433, 434, 435, 436, 613, 651, 666, 671, 672, 694, 714, 715, 723], "register_config": [178, 653], "framework_nam": [178, 653], "algo_nam": [178, 653], "prioriti": [178, 583, 653, 703], "examplealgorithm": 178, "examplealgorithmconfig": 178, "larger": [178, 583, 635, 711, 717, 720], "higher": [178, 229, 230, 233, 234, 276, 277, 325, 372, 424, 583, 613, 630, 657, 658, 662, 671, 695, 711, 714, 719], "tri": [178, 230, 653, 723], "stage": [178, 349, 354, 425, 427, 434, 658, 711, 721, 723], "baseconfig": [178, 181, 462, 464, 468, 608, 653], "white_list": [178, 396, 462, 466, 605], "op_name_or_module_typ": [178, 396, 462, 466, 605], "default_white_list": [178, 396, 462, 466, 605], "composableconfig": [178, 653], "register_supported_configs_for_fwk": 178, "fwk_name": [178, 653], "eval_acc": [179, 394], "eval_perf": [179, 394], "mold": 179, "user_eval_fns1": 179, "user_eval_fns2": 179, "eval_fn": [179, 394, 465, 604], "user_eval_fns3": 179, "user_eval_fns4": 179, "sequentialsampl": [179, 243, 286], "config_sourc": 179, "_configset": 179, "tuningconfig": [179, 394, 465, 604], "config_set": [179, 394], "max_trial": [179, 229, 230, 672, 723], "default_sampl": 179, "tolerable_loss": [179, 229, 230, 672, 723], "found": [179, 186, 304, 633, 653, 658, 670, 673, 680, 697, 701, 720, 723, 726], "from_fwk_config": 179, "configset": 179, "timeout": [179, 229, 230, 672, 713, 723, 725], "exit": [179, 229, 230, 349, 425, 427, 672, 700, 705, 706, 707, 725], "much": [179, 186, 196, 229, 230, 262, 303, 304, 658, 686, 720, 722], "metric": [179, 186, 229, 230, 233, 234, 266, 276, 277, 304, 309, 310, 325, 333, 338, 346, 347, 363, 372, 424, 613, 616, 631, 634, 635, 655, 657, 660, 672, 673, 694, 714, 719, 720, 721, 723, 724, 725, 726], "accept": [179, 229, 230, 443, 628, 651, 653, 654, 694, 717], "rel": [179, 197, 229, 230, 382, 672, 695, 713, 723, 725, 726], "neg": [179, 197], "refin": [179, 666, 711], "tune_config": [179, 394, 465, 604, 635], "config1": 179, "config2": 179, "toler": [179, 697], "fp32_baselin": [179, 616, 634], "config1_metr": 179, "config2_metr": 179, "98": [179, 229, 230, 672, 711, 713, 726], "trial": [179, 723], "config3_metr": 179, "97": [179, 672, 726], "Not": [179, 359, 360, 439, 440, 568, 624, 631, 653], "achiev": [179, 309, 346, 662, 670, 672, 695, 710, 711, 712, 714, 720, 721, 723], "config_metr": 179, "reach": [179, 203, 219, 229, 230, 345, 629, 654, 694, 711, 723], "paramlevel": 181, "enumer": [181, 325, 613, 634, 658, 659, 660, 672, 710, 711, 721], "deriv": [181, 186, 196, 205, 206, 207, 213, 214, 215, 216, 217, 218, 219, 220, 304, 341, 343, 345], "tuningparam": 181, "default_v": 181, "tunable_typ": 181, "op_level": 181, "tunabl": 181, "fakealgoconfig": 181, "params_list": [181, 394], "simpl": [181, 262, 303, 668, 672, 711, 719, 720, 723], "give": [181, 635, 692, 723], "enough": [181, 714], "simple_attr": 181, "complex": [181, 653, 672, 673, 711], "explicitli": [181, 229, 230, 666, 711], "complex_attr": 181, "model_attr": 181, "model_level": 181, "explain": [181, 636, 657, 720], "logger": [183, 310, 339, 363, 568, 580, 614, 617, 624], "tuninglogg": 184, "unifi": [184, 309, 346, 634, 635, 636, 654, 666, 667, 671, 672, 674], "assist": [184, 718], "team": [184, 316, 369, 628, 716], "retriev": [184, 243, 286, 711], "dump_elapsed_tim": [185, 568, 592, 624, 634], "customized_msg": [185, 568, 592, 624], "elaps": [185, 568, 592, 624], "set_random_se": [185, 229, 230, 624], "set_workspac": [185, 229, 230, 624], "workspac": [185, 229, 230, 623, 624, 674, 700, 705, 706, 707], "set_resume_from": [185, 229, 230, 624], "resume_from": [185, 229, 230, 624], "set_tensorboard": [185, 229, 230, 624], "tensorboard": [185, 229, 230, 616, 624, 634, 672, 695], "compon": [186, 304, 310, 347, 363, 630, 653, 657, 660, 668, 669, 675, 692, 700, 710, 711], "quantizationawaretrainingcallback": 186, "pruningcallback": 186, "distillationcallback": 186, "basecallback": 186, "design": [186, 244, 267, 272, 287, 371, 429, 631, 633, 672, 680, 683, 711, 714, 724], "mainli": [186, 219, 272, 345, 633, 672, 711, 714], "prune": [186, 195, 196, 198, 199, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 229, 230, 272, 273, 310, 327, 328, 330, 331, 332, 336, 338, 339, 341, 342, 343, 345, 347, 363, 624, 633, 660, 661, 664, 665, 667, 710, 712, 724, 725], "distil": [186, 195, 229, 230, 264, 271, 272, 310, 363, 633, 661, 665, 667, 710, 724, 725], "In": [186, 205, 206, 207, 212, 213, 214, 218, 230, 244, 272, 287, 314, 341, 343, 367, 382, 598, 628, 630, 631, 633, 634, 635, 654, 655, 657, 658, 659, 660, 671, 672, 682, 685, 686, 689, 695, 696, 697, 698, 705, 706, 707, 709, 710, 711, 714, 716, 717, 719, 720, 721, 722, 723, 724], "adaptor": [186, 229, 230, 362, 442, 451, 452, 616, 633, 636, 667, 715, 716, 718, 720, 721, 724], "pipelin": [186, 304, 321, 322, 347, 629, 659, 672, 710], "knowledg": [186, 187, 229, 230, 264, 304, 659, 661, 665, 667, 672, 674, 725], "transfer": [186, 252, 295, 304, 655, 658, 659, 672, 720], "teacher": [186, 229, 230, 304, 658, 659, 672, 726], "student": [186, 190, 229, 230, 245, 271, 288, 304, 655, 658, 659, 726], "distillation_conf": [186, 226, 304], "_epoch_ran": [186, 304], "integ": [186, 207, 208, 229, 230, 304, 314, 318, 325, 341, 343, 367, 371, 443, 634, 636, 652, 714, 717, 720, 723], "epoch": [186, 209, 210, 215, 304, 343, 613, 654, 658, 659, 660, 672, 710, 711, 725], "ran": [186, 304], "eval_frequ": [186, 304], "frequenc": [186, 208, 229, 230, 304, 343, 672, 711, 725], "term": [186, 209, 210, 215, 216, 218, 304, 629, 652, 658, 669, 671, 709, 710, 723], "best_scor": [186, 304], "best_model": [186, 304, 623, 717], "critet": [187, 264], "tensorflowcrossentropyloss": [187, 264], "pytorchcrossentropyloss": [187, 264], "tensorflowsparsecategoricalcrossentropi": 187, "tensorflowknowledgedistillationloss": [187, 264], "pytorchknowledgedistillationloss": [187, 264, 672], "pytorchintermediatelayersknowledgedistillationloss": [187, 264], "tensorflowcriterion": [187, 264], "pytorchcriterion": [187, 264], "criterion_registri": [187, 264], "criterion_typ": [187, 264], "registry_criterion": [187, 264], "param_dict": [187, 189, 264, 269], "crossentropyloss": [187, 229, 230, 658, 672], "sparsecategoricalcrossentropyloss": 187, "knowledgedistillationframework": [187, 264], "student_model": [187, 230, 264, 672], "teacher_model": [187, 229, 230, 264, 658, 659, 672], "knowledgedistillationloss": [187, 264, 672, 725], "temperatur": [187, 229, 230, 264, 672, 725], "loss_typ": [187, 193, 229, 230, 264, 672, 725], "ce": [187, 229, 230, 264, 672, 725], "loss_weight": [187, 229, 230, 264, 672, 725], "pytorchknowledgedistillationlosswrapp": [187, 264], "tensorflowknowledgedistillationlosswrapp": 187, "tensorflowknowledgedistillationlossextern": [187, 264], "intermediatelayersknowledgedistillationloss": [187, 264], "layer_map": [187, 230, 264, 658], "add_origin_loss": [187, 230, 264], "pytorchintermediatelayersknowledgedistillationlosswrapp": [187, 264], "selfknowledgedistillationloss": [187, 264], "selfknowledg": [187, 264], "pytorchselfknowledgedistillationloss": 187, "pytorchselfknowledgedistillationlosswrapp": 187, "multipl": [189, 199, 231, 232, 236, 237, 245, 246, 248, 249, 250, 251, 252, 256, 259, 262, 269, 274, 275, 279, 280, 282, 288, 289, 291, 292, 293, 294, 295, 299, 301, 303, 319, 372, 373, 374, 376, 382, 598, 651, 655, 662, 672, 699, 702, 710, 711, 719, 720, 723], "tensorflowoptim": [189, 269], "pytorchoptim": [189, 269], "optimizer_registri": [189, 269], "optimizer_typ": [189, 269], "cross": [189, 269, 318, 371, 666, 723], "tensorflowsgd": [189, 269], "tensorflowadamw": [189, 269], "tensorflow_addon": [189, 269], "tensorflowadam": 189, "adam": [189, 725], "pytorchsgd": [189, 269], "record_output": [190, 271], "output_process": [190, 271], "get_activ": [190, 271], "hyper": [191, 725], "sa_optim": [191, 195], "simul": [192, 636], "anneal": 192, "register_search": 193, "searcher": [193, 201, 230, 326], "registri": [193, 194, 196, 203, 208, 217, 218, 219, 220, 341, 343, 345, 631], "sure": [193, 203, 208, 217, 219, 341, 343, 345, 651, 694], "search_spac": [193, 226, 230, 321, 324, 325, 326], "gridsearch": [193, 326], "grid": [193, 230, 326, 631, 711], "whole": [193, 326, 636, 694, 714, 726], "exhaust": [193, 230, 310, 326, 352, 363, 432, 713], "randomsearch": [193, 326], "randomli": [193, 262, 303, 326, 350, 428, 631, 720, 722, 723], "bayesianoptimizationsearch": [193, 326], "bayesian": [193, 230, 310, 326, 352, 363, 432, 631, 711, 713], "xgbsearcher": 193, "higher_is_bett": [193, 229, 230, 371, 424, 723, 725], "reg": [193, 195, 198, 209, 210, 215, 216, 230], "min_train_sampl": [193, 230], "10": [193, 229, 230, 247, 290, 350, 428, 633, 651, 655, 662, 668, 672, 694, 695, 711, 713, 722, 723, 726], "xgboost": [193, 711], "searchspac": 194, "factori": [194, 378, 404, 406, 411, 414, 416, 421, 567], "actual": [194, 318, 371, 660], "interv": [194, 214, 711], "continu": [194, 206, 314, 341, 367, 631, 670, 672, 693, 711, 724], "learning_r": [194, 229, 230, 672, 713, 725], "001": [194, 247, 290, 655, 660, 720, 725], "num_train_epoch": [194, 672, 711], "20": [194, 262, 303, 697, 700, 705, 706, 707, 711, 722, 725, 726], "register_searchspac": 194, "pruner": [194, 195, 310, 327, 328, 329, 330, 331, 333, 338, 339, 341, 344, 363, 672, 711, 725], "basesearchspac": 194, "discretesearchspac": 194, "continuoussearchspac": 194, "hpo": [195, 233, 276, 711], "model_slim": [195, 198, 212], "auto_slim": [195, 198, 200], "pattern_analyz": [195, 198, 200], "weight_slim": [195, 198, 200, 212], "mha": [195, 198, 204, 211, 711], "ninm": [195, 198, 204], "nxm": [195, 198, 204, 214, 229, 230, 337, 341, 711], "basic": [195, 198, 201, 203, 211, 229, 230, 261, 302, 310, 321, 341, 352, 356, 359, 363, 432, 436, 439, 613, 667, 668, 672, 694, 713, 719], "block_mask": [195, 196, 198, 211], "pattern_lock": [195, 198, 211, 229, 230, 310, 329, 363], "retrain_fre": [195, 196, 198, 211, 711], "wanda": [195, 198], "criteria": [195, 198, 229, 230, 309, 333, 338, 341, 343, 346, 630, 692, 720], "tf_criteria": [195, 198], "callback": [195, 333, 338, 613, 616, 630, 672, 710, 711, 714], "register_criterion": [196, 220], "get_criterion": 196, "pruningcriterion": [196, 220], "about": [196, 220, 624, 628, 653, 654, 672, 697, 698, 711, 716, 723, 724, 726], "score": [196, 203, 208, 212, 220, 229, 230, 311, 312, 314, 315, 316, 318, 343, 364, 365, 367, 368, 369, 371, 431, 616, 630, 671, 695, 709, 711, 719, 723], "magnitudecriterion": [196, 220], "magnitud": [196, 220, 229, 230, 310, 318, 329, 363, 371, 667, 711], "criterion_class": [196, 220], "determin": [196, 203, 208, 220, 229, 230, 618, 628, 630, 652, 711, 714], "gradientcriterion": 196, "absolut": [196, 229, 230, 318, 371, 671, 672, 711, 714, 723], "snipcriterion": 196, "snip": [196, 229, 230, 343, 667, 711, 726], "product": [196, 633, 667, 673, 675, 676, 692, 698, 712, 714, 719, 723], "shot": [196, 215, 216, 219, 272, 343, 345, 631, 667, 672, 711, 712, 717], "connect": [196, 343, 692, 694, 701, 711, 719], "sensit": [196, 327, 343, 667, 711], "1810": [196, 343], "02340": [196, 343], "snipmomentumcriterion": 196, "snip_momentum": [196, 229, 230, 672, 711], "preserv": [196, 652, 711, 717], "beta": 196, "blockmaskcriterion": 196, "retrainfreecriterion": 196, "return_reorder_indic": 197, "6": [197, 229, 230, 664, 714, 720, 723, 726], "remain": [197, 680], "unchang": 197, "flip": [197, 258, 262, 300, 303, 722], "initial_metr": 197, "sparsity_ratio": [197, 223], "prune_n": [197, 223], "prune_m": [197, 223], "pow_of_var_regrow": 197, "max_cycle_tim": 197, "without_same_sign": 197, "update_threshold": 197, "power": [197, 658, 672, 686, 712], "cycl": [197, 631], "paper": [197, 223, 658, 711, 717, 720], "2310": 197, "08915": 197, "pickle_protocol": 198, "_use_new_zipfile_seri": 198, "prepare_prun": [198, 711], "loss_func": [198, 217], "assertionerror": [198, 204, 211, 221, 341, 342, 343, 372], "slim": [199, 200, 201, 314, 367, 378, 380, 566, 567, 674, 711], "round_multipli": 199, "spars": [199, 213, 343, 655, 712], "model_slim_ffn2": 199, "perman": [199, 628, 711], "obtain": [199, 201, 210, 215, 218, 221, 342, 598, 630, 635, 700, 711, 719, 720, 723], "acceler": [199, 583, 658, 672, 675, 683, 692, 695, 699, 711, 712, 716, 717, 720, 723], "directli": [199, 229, 230, 244, 287, 314, 318, 342, 367, 371, 671, 672, 679, 711, 713, 714, 721], "sprase": 199, "model_slim_mha": 199, "parse_auto_slim_config": [199, 711], "ffn2_sparsiti": [199, 711], "mha_spars": [199, 711], "generate_ffn2_pruning_config": 199, "consecut": [199, 201, 202, 711], "generate_mha_pruning_config": 199, "head": [199, 201, 205, 212, 221, 711, 726], "get_attribut": 201, "get_common_modul": 201, "layer2": [201, 672, 711, 714], "nearest": [201, 262, 303, 396, 595, 605, 717, 722], "print_iter": 201, "recipesearch": 201, "root": [201, 245, 246, 247, 250, 288, 289, 290, 293, 318, 371, 655, 660, 671, 672, 725], "levelwis": 201, "wai": [201, 246, 247, 250, 289, 290, 293, 583, 631, 636, 654, 655, 657, 671, 672, 675, 678, 693, 694, 698, 699, 700, 710, 711, 714, 717, 720, 723, 725], "bert": [201, 230, 241, 244, 245, 262, 284, 287, 288, 303, 633, 655, 658, 671, 673, 680, 703, 706, 707, 711, 722, 726], "recipe_sampl": 201, "bertattent": 201, "dens": [201, 219, 229, 230, 345, 695, 711, 726], "searching_result": 201, "jitbasicsearch": 201, "placeholder_shap": 201, "placeholder_dtyp": 201, "jit": [201, 229, 675, 677, 682, 720, 721], "script": [201, 311, 312, 315, 316, 364, 365, 368, 369, 598, 629, 660, 667, 675, 679, 682, 683, 686, 703, 705, 712], "static_graph": 201, "flatten_static_graph": 201, "target_lay": 201, "linear2linearsearch": 201, "target_op_lut": 201, "lookup": 201, "tabl": [201, 212, 624, 636, 657, 662, 695, 697, 726], "current_pattern": 201, "statu": [201, 621, 628, 654, 702, 705, 706, 707, 709, 711], "selfmhasearch": 201, "classifierheadsearch": 201, "classifi": [201, 221, 245, 288, 318, 371, 655, 658], "classifierheadsearchertf": 201, "squeezer": 202, "postcompressionutil": 202, "librari": [202, 266, 310, 363, 418, 626, 633, 668, 672, 673, 677, 686, 692, 712, 714], "relat": [202, 218, 304, 314, 333, 338, 341, 367, 442, 616, 636, 675, 699, 700, 711, 725], "linearcompress": 202, "root_linear": 202, "target_linear": 202, "while": [202, 213, 221, 343, 350, 428, 598, 634, 635, 655, 661, 667, 673, 675, 680, 692, 694, 711, 713, 714, 717, 720], "hidden": [202, 207, 341, 634], "layer_1": 202, "act_fn": 202, "layer_2": 202, "linearcompressioniter": 202, "linear_pattern": 202, "register_pattern": [203, 341], "basepattern": [203, 205, 207], "unit": [203, 341, 629, 700, 711], "4x1": [203, 229, 230, 337, 672, 711, 726], "is_glob": [203, 341], "local": [203, 229, 230, 341, 568, 598, 624, 653, 685, 689, 694, 701, 702, 711, 719], "keep_mask_lay": 203, "invalid_lay": 203, "max_sparsity_ratio_per_op": [203, 208, 226, 229, 230, 672, 711], "sparsiti": [203, 205, 206, 208, 209, 210, 213, 215, 216, 219, 221, 229, 230, 343, 345, 624, 633, 655, 667, 672, 724, 726], "min_sparsity_ratio_per_op": [203, 226, 229, 230, 672, 711], "target_spars": [203, 226, 229, 230, 672, 711, 713, 725], "pytorchbasepattern": [203, 218], "kerasbasepattern": 203, "get_pattern": [204, 341], "patternmha": 205, "doc": [205, 206, 229, 230, 341, 359, 360, 371, 424, 439, 440, 443, 568, 624, 671, 672, 687, 690, 698], "md": [205, 206, 229, 230, 341, 371, 424], "n": [205, 206, 229, 230, 246, 262, 289, 303, 312, 341, 365, 443, 636, 653, 655, 657, 658, 700, 711, 714, 720, 722], "pytorchpatternninm": 206, "out": [206, 229, 230, 245, 246, 247, 288, 289, 290, 309, 341, 346, 579, 629, 630, 633, 655, 675, 680, 685, 686, 687, 689, 690, 692, 698, 711, 713, 714, 717], "pytorchpatternnxm": 207, "kept": [207, 341], "block_siz": [207, 341, 605, 717], "height": [207, 258, 262, 300, 303, 341, 660, 722, 725], "width": [207, 258, 262, 300, 303, 341, 652, 660, 711, 714, 722, 725], "vertic": [207, 262, 303, 341, 722], "keraspatternnxm": 207, "register_prun": [208, 217, 343], "baseprun": [208, 213, 215, 217], "current_sparsity_ratio": [208, 343], "global_step": [208, 343], "start_step": [208, 226, 229, 230, 343, 672, 711, 713], "end_step": [208, 226, 229, 230, 343, 672, 711, 713], "pruning_frequ": [208, 226, 229, 230, 672, 711], "target_sparsity_ratio": [208, 343], "show": [208, 624, 628, 658, 660, 672, 678, 693, 694, 695, 697, 700, 705, 706, 707, 720, 723, 724], "pytorchbaseprun": [208, 216], "kerasbaseprun": 208, "pytorchbasicprun": 209, "arrang": [209, 210, 215, 216, 246, 247, 250, 289, 290, 293, 655, 711], "proce": [209, 210, 215, 216], "regul": [209, 210, 215, 216], "kerasbasicprun": 209, "pytorchblockmaskprun": 210, "grad": [210, 215], "parse_valid_pruner_typ": 211, "get_prun": [211, 343], "pythonmultiheadattentionprun": 212, "mha_modul": 212, "partial": [212, 711, 714], "qkv": 212, "feedward": 212, "simultan": [212, 675, 699, 710, 713], "qkv_name": 212, "query_layer_nam": 212, "key_layer_nam": 212, "value_layer_nam": 212, "ffn_name": 212, "attention_ffn_nam": 212, "mha_nam": 212, "qkv_modul": 212, "ffn_modul": 212, "mha_compress": 212, "mhacompress": 212, "linear_lay": 212, "independ": [212, 418, 423, 636], "4x": [212, 631, 714], "subsequ": [212, 635, 675, 692], "head_mask": 212, "mha_head_s": 212, "similar": [212, 226, 672, 696, 713, 720, 723, 725], "mha_scor": 212, "lock": [213, 331, 332, 667, 710, 711], "pytorchpatternlockprun": 213, "parent": [213, 214, 219, 337, 343, 345, 721], "pytorchprogressiveprun": 214, "basicprun": [214, 217], "interpol": [214, 262, 303, 671, 711, 722], "fine": [214, 245, 288, 653, 655, 678, 711, 712, 714], "grain": [214, 711, 712, 723], "improv": [214, 598, 629, 652, 653, 672, 675, 692, 693, 695, 711, 712, 714, 716, 717, 723, 724, 726], "ad": [214, 245, 288, 311, 350, 364, 388, 428, 635, 636, 657, 673, 675, 680, 683, 687, 690, 700, 711, 717, 721], "retrain": [215, 659], "pytorchretrainfreeprun": 215, "pruner_class": [215, 216], "fast": [215, 229, 230, 633, 711, 712, 717], "retrainfreeprun": [215, 217], "effect": [215, 633, 634, 711, 712], "2204": 215, "09656": 215, "sparsegptprun": [216, 217], "most": [216, 229, 230, 318, 371, 657, 672, 673, 711, 714, 717, 720, 723, 726], "sparsegpt": [216, 217, 711], "massiv": [216, 711], "One": [216, 636, 653, 655, 660, 667, 697, 711, 712, 723], "2301": [216, 711], "00774": [216, 711], "opt": [217, 633, 670, 680, 711, 720, 723, 726], "least": [217, 344, 629, 672, 711, 723], "templat": [217, 344, 672, 711], "tree": [217, 344, 360, 440, 700], "nlp": [217, 229, 230, 344, 680, 696, 711, 714], "huggingface_model": [217, 344, 696], "classif": [217, 245, 262, 288, 303, 318, 344, 371, 658, 662, 671, 681, 695, 703, 706, 707, 711, 712], "pytorch_prun": [217, 310, 363], "eager": [217, 344, 423, 660, 667, 714, 716, 721], "config_file_path": [217, 344], "pruner_info": [217, 344], "pruning_class": 217, "avail": [217, 229, 230, 376, 637, 639, 643, 646, 649, 653, 661, 663, 665, 667, 685, 689, 694, 699, 700, 701, 705, 706, 707, 711, 723, 726], "regular": [218, 311, 342, 364], "register_reg": 218, "regulariz": 218, "get_reg_typ": 218, "get_reg": 218, "basereg": 218, "grouplasso": 218, "coeff": 218, "lasso": [218, 328, 667, 711], "reg_term": 218, "register_schedul": [219, 345], "get_schedul": [219, 345], "pruningschedul": 219, "gradual": [219, 345, 711], "oneshotschedul": [219, 345], "iterativeschedul": [219, 345], "get_tf_criterion": 220, "get_sparsity_ratio": 221, "elementwise_over_matmul_gemm_conv": 221, "elementwise_over_al": 221, "blockwise_over_matmul_gemm_conv": 221, "get_sparsity_ratio_tf": 221, "check_config": [221, 342], "prune_config": [221, 342], "everyth": [221, 342, 680], "reset_none_to_default": 221, "update_param": 221, "process_weight_config": 221, "global_config": [221, 327, 328, 330, 331, 332], "local_config": [221, 229, 230, 327, 328, 330, 331, 332], "default_config": 221, "pruners_info": 221, "process_yaml_config": 221, "check_key_valid": 221, "template_config": 221, "user_config": 221, "process_and_check_config": [221, 342], "process_config": [221, 342], "parse_last_linear": 221, "often": [221, 654, 658, 697, 710, 711], "might": [221, 630, 653, 694, 723], "caus": [221, 635, 654, 676, 695, 697, 711, 717], "drop": [221, 314, 342, 367, 629, 672, 673, 686, 711, 717, 720, 726], "parse_last_linear_tf": 221, "parse_to_prun": [221, 342], "parse_to_prune_tf": 221, "generate_pruner_config": 221, "dotdict": [221, 226, 230, 382, 624], "get_lay": 221, "collect_layer_input": 221, "layer_idx": 221, "layer_input": 221, "previou": [221, 635, 636, 672, 711, 718, 720, 721, 723, 724, 726], "prune_wanda": 223, "use_vari": 223, "low_mem_usag": 223, "dsnot": 223, "sij": 223, "wij": 223, "xj": 223, "2306": [223, 717], "11695": 223, "recurs": [224, 624], "wrappedgpt": 225, "layer_id": 225, "gpt": [225, 633, 670, 696, 711, 720, 726], "prunerv2": 226, "pruning_typ": [226, 229, 230, 672, 711], "pruning_scop": [226, 229, 230, 672, 711], "sparsity_decay_typ": [226, 229, 230, 672, 711], "pruning_op_typ": [226, 229, 230, 672, 711], "reg_typ": 226, "criterion_reduce_typ": 226, "resume_from_pruned_checkpoint": 226, "cfg_fname": 226, "parser": 226, "quantization_conf": 226, "pruning_conf": 226, "graph_optimization_conf": [226, 309], "mixedprecision_conf": 226, "benchmark_conf": 226, "nasconfig": [226, 230, 322, 324, 631], "approach": [226, 229, 230, 321, 322, 324, 630, 631, 652, 655, 658, 667, 672, 680, 692, 695, 703, 705, 706, 707, 711, 712, 713, 715, 717, 723, 725], "search_algorithm": [226, 230, 310, 323, 363, 631], "na": [226, 230, 310, 363, 376, 667, 726], "procedur": [226, 631, 711, 723], "deep_get": [227, 382, 568], "dot": [227, 568, 673, 714], "person": [227, 568, 628, 712], "john": [227, 568], "deep_set": [227, 382], "sex": [227, 628], "male": 227, "notat": [227, 230, 624], "pythonic_config": 228, "random_se": [229, 230, 350, 428, 672, 725], "1978": [229, 230], "default_workspac": [229, 230], "directori": [229, 230, 246, 247, 289, 290, 380, 566, 568, 619, 621, 623, 624, 655, 660, 663, 685, 687, 689, 690, 696, 698, 721], "histori": [229, 230, 623, 624, 692, 696, 723], "nc_workspac": [229, 230, 695, 696], "datetim": [229, 230], "now": [229, 230, 262, 303, 630, 631, 636, 655, 660, 683, 713, 722, 723], "strftime": [229, 230], "d_": [229, 230], "resum": [229, 230, 233, 234, 276, 277, 351, 354, 355, 356, 425, 428, 429, 430, 431, 433, 434, 435, 436], "flag": [229, 230, 312, 365, 657], "visual": [229, 230, 633, 683, 692, 719, 721, 723, 724], "displai": [229, 230, 359, 360, 439, 440, 568, 624, 692, 695], "2022": [229, 230, 633, 669, 711, 717, 720, 726], "workspace_path": [229, 230], "accuracycriterion": [229, 230, 672, 723], "accuracy_criterion": [229, 230, 382, 672, 696, 709, 713, 723, 725], "warmup": [229, 230, 651, 672, 713], "inter_num_of_thread": [229, 230, 418, 423, 672, 713], "intra_num_of_thread": [229, 230, 418, 423, 672, 713], "benchmark": [229, 230, 265, 310, 347, 363, 382, 624, 633, 641, 674, 675, 679, 683, 686, 692, 695, 723, 724, 725, 726], "onnxrt_trt_ep": [229, 230, 673, 714], "onnxrt_cuda_ep": [229, 230, 673, 714], "inter": [229, 230], "intra": [229, 230], "quantizationconfig": 229, "post_training_static_qu": [229, 655, 672, 713, 723], "calibration_sampling_s": [229, 230, 672, 697], "op_type_dict": [229, 230, 636, 713, 714, 717, 723], "op_name_dict": [229, 230, 657, 672, 695, 697, 714, 723], "strategy_kwarg": [229, 230, 719, 723], "quant_level": [229, 230, 695, 717, 720, 723], "posttrainingquantconfig": [229, 230, 424, 630, 633, 636, 654, 657, 662, 665, 671, 672, 674, 694, 695, 696, 697, 714, 715, 716, 717, 719, 720, 723], "quantizationawaretrainingconfig": [229, 230, 613, 630, 659, 662, 672, 714, 716, 723], "cv": [229, 230, 711], "object_detect": [229, 230, 314, 367], "recommendation_system": [229, 230], "overrid": [229, 230, 624, 653], "quantiztaion": [229, 230], "smooth_quant_arg": [229, 230, 714, 720], "gemm_to_matmul": [229, 230, 714], "graph_optimization_level": [229, 230, 713, 714], "disable_al": [229, 230, 713], "enable_bas": [229, 230], "enable_extend": [229, 230], "enable_al": [229, 230], "first_conv_or_matmul_quant": [229, 230, 714], "last_conv_or_matmul_quant": [229, 230, 714], "pre_post_process_quant": [229, 230, 714], "postprocess": [229, 230, 256, 259, 262, 266, 303, 310, 363, 371, 424, 616, 634, 672, 721, 722], "dedic": [229, 230], "quant_format": [229, 230, 308, 662, 695], "constraint": [229, 230, 309, 346, 672, 711, 719, 723, 725], "conv1": [229, 230, 714, 725], "tuning_strategi": [229, 230], "guarante": [229, 230, 672], "models": [229, 230, 382, 672, 709, 713], "footprint": [229, 230, 309, 333, 338, 346, 382, 659, 672, 709, 711, 713, 715], "earli": [229, 230, 672, 714, 723, 725], "stop": [229, 230, 672, 723, 724, 725], "excluded_precis": [229, 230, 716], "exclud": [229, 230, 634, 652, 716], "conserv": [229, 230, 363, 432], "use_distributed_tun": 229, "weightpruningconfig": [229, 230, 672, 710, 711], "pruning_config": [229, 230, 672, 711], "exp": [229, 230, 672, 711], "link": [229, 230, 245, 288, 371, 395, 424, 652, 655, 662, 685, 689, 692, 717, 726], "90": [229, 230, 715, 725, 726], "magnitude_progress": [229, 230], "snip_progress": [229, 230], "snip_momentum_progress": [229, 230], "feasibl": [229, 230], "situat": [229, 230, 660, 711], "unstructur": [229, 230, 337, 667, 711, 726], "8x1": [229, 230], "channelx1": [229, 230, 711], "1xchannel": [229, 230, 711], "itrex": [229, 230, 720], "start": [229, 230, 262, 303, 314, 367, 429, 668, 697, 712, 722, 723, 724, 727], "togeth": [229, 230, 262, 303, 658, 668, 679, 712, 721, 722], "sort": [229, 230, 353, 388, 433, 657, 695, 717, 723], "sinc": [229, 230, 309, 311, 333, 338, 346, 364, 658, 662, 668, 671, 686, 692, 697, 710, 717, 718], "lead": [229, 230, 653, 658, 672, 673, 697, 711, 717, 720], "increas": [229, 230, 388, 656, 667, 675, 692, 697, 717, 723], "cube": [229, 230, 711], "update_config": [229, 230], "knowledgedistillationlossconfig": [229, 230, 658, 659, 672, 710], "hyperparamet": [229, 230, 359, 719, 720, 723], "entropi": [229, 230, 652, 723], "groundtruth": [229, 230, 314, 367], "label": [229, 230, 233, 234, 245, 247, 248, 249, 250, 253, 258, 262, 267, 276, 277, 288, 290, 291, 292, 293, 296, 300, 303, 311, 313, 318, 364, 366, 371, 372, 424, 563, 613, 630, 654, 655, 657, 671, 672, 714, 722], "sum": [229, 230, 318, 371, 657, 658], "distillationconfig": [229, 230, 613, 658, 659, 672, 710], "prepare_compress": [229, 230, 613, 630, 658, 659, 672, 710, 711, 714], "criterion_conf": [229, 230], "d_conf": [229, 230, 659, 672, 710], "compression_manag": [229, 230, 613, 630, 658, 659, 672, 710, 711, 714], "featur": [229, 230, 245, 246, 258, 262, 288, 289, 300, 303, 629, 633, 651, 654, 656, 658, 672, 673, 674, 675, 679, 680, 683, 692, 694, 698, 711, 712, 718, 722], "distil_loss": [229, 230, 672], "ni_workload_nam": 230, "onnxrt_dnnl_ep": [230, 673, 714], "onnxrt_dml_ep": [230, 714], "tuningcriterion": [230, 672, 709, 719, 723], "tuning_criterion": [230, 672, 709, 719, 723], "npu": [230, 714], "xpu": [230, 598, 683, 714], "ptq": [230, 424, 630, 657, 660, 667, 672, 697, 714, 720, 721, 723], "meet": [230, 236, 347, 349, 425, 427, 630, 635, 709, 712, 713, 714, 717, 721, 723], "mse_v2": [230, 310, 352, 363, 432], "hawq_v2": [230, 363, 432], "docstr": [230, 443], "workload": [230, 621, 624, 694, 712], "insight": [230, 621, 633, 657, 712, 718, 723, 724], "copi": [230, 342, 624, 653, 654, 698], "deepcopi": [230, 653], "model_origin": [230, 424, 716], "qat_op_name_dict": 230, "low_memory_usag": 230, "hpoconfig": 230, "xgb": 230, "bo": 230, "intermediatelayersknowledgedistillationlossconfig": [230, 658], "relationship": [230, 694], "student_layer_nam": 230, "student_layer_output_process": 230, "teacher_layer_nam": 230, "teacher_layer_output_process": 230, "desir": [230, 258, 262, 300, 303, 635, 636, 711, 720, 722], "serv": [230, 380, 566, 598, 700, 705, 706, 707], "numer": [230, 318, 371, 388, 636, 673, 712, 714, 717], "abbrevi": 230, "l1": 230, "selfknowledgedistillationlossconfig": [230, 658, 672], "student1_layer_name1": 230, "teacher_layer_name1": 230, "student2_layer_name1": 230, "student1_layer_name2": 230, "teacher_layer_name2": 230, "student2_layer_name2": 230, "soft": 230, "hard": [230, 654, 657], "resblock": 230, "deepst": 230, "02": [230, 726], "mixedprecisionconfig": [230, 372, 443, 672, 673], "mixedprecis": [230, 319, 672], "won": [230, 714, 717], "work": [230, 309, 346, 598, 632, 635, 653, 654, 658, 687, 690, 698, 716, 717, 718, 720, 721], "mix_precis": [230, 363, 443, 672, 673], "converted_model": [230, 372, 672, 673], "exportconfig": 230, "14": [230, 307, 308, 662, 668, 707, 726], "dynamic_ax": [230, 308, 662], "qlinear": [230, 247, 254, 290, 297, 318, 371, 634, 682], "ax": [230, 308], "onnxqlinear2qdqconfig": 230, "onnxqlinear2qdq": 230, "torch2onnxconfig": [230, 662], "torch2onnx": [230, 305, 310, 363], "qdq_op_fp32_bia": 230, "qdq_op_int32_bia": 230, "qdq_op_fp32_bias_qdq": 230, "resnet50": [230, 633, 657, 660, 662, 673, 675, 679, 711, 714, 719, 726], "int8_onnx_config": [230, 662], "randn": [230, 662], "224": [230, 258, 300, 633, 655, 660, 662, 665, 672, 675, 694, 722, 725], "batch_siz": [230, 235, 237, 242, 243, 244, 245, 246, 265, 278, 280, 285, 286, 287, 288, 289, 308, 563, 631, 654, 655, 660, 662, 666, 672, 675, 714], "tf2onnxconfig": [230, 662], "tf2onnx": [230, 305, 310, 363], "output_graph": 230, "dyna": [230, 310, 323, 363, 631, 667, 713], "sigopt": [231, 232, 274, 275, 310, 363, 712], "tpe": [231, 232, 274, 275, 310, 363], "sigopttunestrategi": [233, 276], "q_dataload": [233, 234, 276, 277, 350, 351, 353, 354, 355, 356, 425, 428, 429, 430, 431, 433, 434, 435, 436, 666, 723], "eval_metr": [233, 234, 372, 424, 425, 428, 429, 430, 431, 433, 434, 435, 436, 613, 671, 694, 714], "q_hook": [233, 234, 276, 277, 350, 351, 353, 354, 355, 356, 425, 428, 429, 430, 431, 433, 434, 435, 436], "mandatori": [233, 234, 276, 277, 424, 672, 725], "yield": [233, 234, 243, 265, 276, 277, 286, 350, 372, 424, 428, 443, 613, 654, 714, 723], "well": [233, 234, 276, 277, 372, 424, 613, 631, 633, 653, 655, 711, 714, 718, 720, 725], "taken": [233, 234, 276, 277, 372, 424, 613, 714], "reserv": [233, 234, 276, 277], "abl": [233, 234, 276, 277, 372, 424, 613, 683, 692, 714], "tuner": [233, 234, 276, 277, 309, 346, 372, 424, 613, 714], "scalar": [233, 234, 276, 277, 372, 424, 613, 671, 714, 723], "pseudo": [233, 234, 276, 277, 424, 613, 717, 721], "someth": [233, 234, 247, 276, 277, 290, 424, 613], "fefin": [234, 277], "tpetunestrategi": [234, 277], "basedatalod": [235, 278, 563], "basedataload": [235, 240, 242, 278, 283, 285, 563], "last_batch": [235, 237, 242, 244, 265, 278, 280, 285, 287, 563, 654], "rollov": [235, 237, 242, 244, 265, 278, 280, 285, 287, 563, 654], "collate_fn": [235, 237, 238, 242, 244, 265, 278, 280, 281, 285, 287, 563, 654, 655], "batch_sampl": [235, 237, 242, 244, 265, 278, 280, 285, 287, 563, 654], "num_work": [235, 237, 242, 244, 265, 278, 280, 285, 287, 563, 654, 672, 714], "pin_memori": [235, 237, 242, 244, 265, 278, 280, 285, 287, 563, 654], "_generate_dataload": [235, 278, 563], "check_dataload": 236, "default_col": [237, 280], "outer": [237, 280], "defaultdataload": [237, 244, 280, 287], "style": [238, 252, 281, 295, 443, 653, 655, 666], "drop_last": [238, 243, 281, 286], "iterablefetch": [238, 281], "indexfetch": [238, 281], "base_dataload": [239, 282, 299, 310], "default_dataload": [239, 282, 299, 310], "fetcher": [239, 282, 299, 310], "mxnet_dataload": [239, 282, 299, 310], "onnxrt_dataload": [239, 282, 299, 310, 417], "pytorch_dataload": [239, 282, 299, 310], "tensorflow_dataload": [239, 282, 299, 310, 422], "mxnetdataload": [240, 283], "onnxrtbertdataload": [241, 284], "variant": [241, 284], "onnxrtdataload": [241, 284, 417], "pytorchdataload": [242, 285], "data_sourc": [243, 286, 616], "__iter__": [243, 247, 286, 290, 654, 655, 672], "matter": [243, 286, 716], "iterablesampl": [243, 286], "squential": [243, 286], "your": [243, 245, 286, 288, 598, 629, 653, 654, 655, 657, 660, 669, 672, 675, 678, 679, 680, 685, 686, 687, 689, 690, 692, 694, 698, 700, 705, 706, 707, 711, 712, 719, 721, 723, 724], "clear": [243, 286, 634, 664, 671, 672], "iterabledataset": [243, 247, 286, 290], "try": [243, 286, 630, 657, 695, 711, 714, 720, 723], "indexdataset": [243, 286], "__getitem__": [243, 247, 262, 286, 290, 303, 654, 655, 672], "__len__": [243, 247, 286, 290, 655], "batchsampl": [243, 286], "tfdatadataload": [244, 287], "tensorflow1": [244, 287], "coupl": [244, 287], "satisfi": [244, 287, 657, 668, 698], "tf1": [244, 287, 674], "although": [244, 287, 719], "tensorflowbertdataload": [244, 287], "tensorflowmodelzoobertdataload": [244, 287], "zoo": [244, 262, 287, 303, 633, 661, 665, 726], "tensorflowdataload": [244, 287, 422], "pytorchbertdataset": [245, 288], "model_typ": [245, 288, 624, 655], "tensordataset": [245, 288, 655], "repo": [245, 288, 627, 629, 655, 661, 685, 687, 689, 690, 727], "easi": [245, 288, 346, 662, 672, 695, 699, 712, 714, 717, 719], "squad": [245, 262, 288, 303, 315, 316, 318, 368, 369, 371, 655, 671, 711, 722, 726], "distilbert": [245, 288, 633, 655, 673, 712, 726], "xlnet": [245, 288, 655, 726], "xlm": [245, 288, 655, 726], "101": [245, 288, 318, 371, 671, 701, 720, 726], "2043": [245, 288], "2001": [245, 288], "onnxrtbertdataset": [245, 288], "data_dir": [245, 288, 655], "model_name_or_path": [245, 288, 655, 672, 680, 681, 696, 703, 706, 707, 715], "max_seq_length": [245, 262, 288, 303, 582, 655, 722], "do_lower_cas": [245, 261, 262, 288, 302, 303, 655, 722], "mrpc": [245, 288, 318, 371, 655, 671, 680, 703, 706, 707, 711, 723, 726], "dynamic_length": [245, 288, 655], "shortcut": [245, 288, 655], "longer": [245, 262, 288, 303, 655, 722], "shorter": [245, 262, 288, 303, 655, 722], "lowercas": [245, 288, 655], "choic": [245, 288, 634, 655, 671, 698, 720], "qqp": [245, 288, 655, 671, 726], "qnli": [245, 288, 655, 671, 726], "rte": [245, 288, 655, 671, 726], "st": [245, 288, 655, 671], "cola": [245, 288, 655, 671, 726], "mnli": [245, 288, 655, 671, 726], "wnli": [245, 288, 655, 671], "mobilebert": [245, 288, 655, 658, 726], "roberta": [245, 288, 655, 726], "uncas": [245, 262, 288, 303, 655, 722, 726], "load_and_cache_exampl": [245, 288], "convert_examples_to_featur": [245, 262, 288, 303], "max_length": [245, 288], "label_list": [245, 288, 318, 371], "output_mod": [245, 288], "pad_token": [245, 288], "pad_token_segment_id": [245, 288], "mask_padding_with_zero": [245, 288], "inputfeatur": [245, 262, 288, 303], "properti": [245, 288, 442, 669], "vocabulari": [245, 261, 262, 288, 302, 303, 722], "attention_mask": [245, 288, 672], "usual": [245, 288, 635, 657, 658, 697, 710, 711, 714, 715, 720], "NOT": [245, 288, 664], "token_type_id": [245, 288, 672], "segment": [245, 288, 312, 314, 365, 367, 629], "portion": [245, 288], "regress": [245, 288, 629, 657], "seq_length": [245, 288], "tensorflowbertdataset": [245, 288], "label_fil": [245, 262, 288, 303, 655, 722], "tfrecord": [245, 246, 247, 288, 289, 290, 655], "guid": [245, 288, 630, 633, 653, 655, 658, 668, 675, 683, 692, 727], "parsedecodebert": [245, 288], "tensorflowmodelzoobertdataset": [245, 246, 288, 289], "num_cor": [245, 246, 250, 288, 289, 293, 655], "28": [245, 246, 250, 288, 289, 293, 655, 726], "coco": [246, 253, 257, 289, 296, 314, 318, 367, 371, 671, 711], "parsedecodecoco": [246, 289], "cocorecorddataset": [246, 289], "interleav": [246, 289, 655], "parallel": [246, 289, 418, 423, 598, 655, 672, 699, 702, 723], "cocoraw": [246, 289, 655], "img_dir": [246, 289, 655], "val2017": [246, 289, 655], "anno_dir": [246, 289, 655], "annot": [246, 289, 314, 367, 443, 635, 636, 655, 671, 711, 723], "instances_val2017": [246, 289, 655], "jpg": [246, 250, 252, 289, 293, 295, 633, 655], "imag": [246, 247, 250, 252, 258, 262, 289, 290, 293, 295, 300, 303, 314, 367, 655, 660, 662, 711, 713, 720, 721, 722, 726], "coconpi": [246, 289, 655], "npy_dir": [246, 289, 655], "npy": [246, 289, 655], "tensorflowdataset": [247, 290], "pytorchdataset": [247, 290], "mxnetdataset": [247, 290], "onnxrtqldataset": [247, 290], "onnxrtitdataset": [247, 290], "IT": [247, 254, 290, 297, 712], "pytorchmxnetwrapdataset": [247, 290], "datafunc": [247, 290], "pytorchmxnetwrapfunct": [247, 262, 290, 303], "framework_dataset": [247, 290], "convent": [247, 290, 314, 367, 629, 658], "imageclassifi": [247, 290], "tensorflow_itex": [247, 250, 252, 254, 290, 293, 295, 297, 654, 713], "onnxrt_qdq": [247, 254, 290, 297, 713], "onnxrt_qlinearop": [247, 254, 262, 290, 297, 303, 713], "onnxrt_integerop": [247, 254, 262, 290, 297, 303, 713], "pytorch_ipex": [247, 254, 290, 297, 672, 713, 725], "pytorch_fx": [247, 254, 290, 297, 672, 713], "dataset_registri": [247, 290], "dataset_typ": [247, 290], "dataset_format": [247, 290], "data_format": [247, 258, 290, 300], "raw_imag": [247, 290], "overwrit": [247, 290, 685, 689], "download_url": [247, 290], "filenam": [247, 290, 568, 624, 655, 698], "md5": [247, 290], "address": [247, 290, 628, 653, 673, 694, 697, 700, 712], "gen_bar_updat": [247, 290], "check_integr": [247, 290], "fpath": [247, 290], "checksum": [247, 290], "calculate_md5": [247, 290], "chunk_siz": [247, 290], "cifar10": [247, 290, 655], "cifar100": [247, 290, 655], "databas": [247, 290, 700], "www": [247, 290, 655, 726], "toronto": [247, 290, 655], "kriz": [247, 290, 655], "cifar": [247, 290, 655, 726], "tar": [247, 290, 655, 657, 687, 690], "gz": [247, 290, 655, 657, 687, 690], "manual": [247, 290, 655, 675, 681, 683, 686, 700, 705, 706, 707, 711], "subset": [247, 250, 290, 293, 655, 697], "internet": [247, 290, 655, 694], "again": [247, 290, 655, 695, 697, 716], "pytorchcifar10": [247, 290], "mxnetcifar10": [247, 290], "tensorflowcifar10": [247, 290], "pytorchcifar100": [247, 290], "mxnetcifar100": [247, 290], "tensorflowcifar100": [247, 290], "mnist": [247, 290, 655, 660], "nation": [247, 290, 628], "institut": [247, 290], "standard": [247, 262, 290, 303, 583, 629, 635, 653, 657, 662, 671, 722, 723], "technologi": [247, 290, 670, 672], "fashionmnist": [247, 290, 655], "npz": [247, 290, 655], "idx1": [247, 290, 655], "ubyt": [247, 290, 655], "idx3": [247, 290, 655], "t10k": [247, 290, 655], "pytorchmnist": [247, 290], "mxnetmnist": [247, 290], "tensorflowmnist": [247, 290], "pytorchfashionmnist": [247, 290], "mxnetfashionmnist": [247, 290], "tensorflowfashionmnist": [247, 290], "imagefold": [247, 290, 655, 660, 672], "expect": [247, 290, 628, 629, 663, 670, 692, 714, 717, 723], "subfold": [247, 290, 695], "belong": [247, 290, 376, 714], "class_1": [247, 290, 655], "xxx": [247, 290, 655, 672], "png": [247, 290, 655], "xxy": [247, 290, 655], "xxz": [247, 290, 655], "class_n": [247, 290, 655], "123": [247, 290, 655, 722], "nsdf3": [247, 290, 655], "asd932_": [247, 290, 655], "categori": [247, 290, 313, 366, 651, 655, 682], "mxnetimagefold": [247, 290], "tensorflowtfrecorddataset": [247, 290], "tensorflowimagerecord": [247, 290], "imagenet": [247, 250, 258, 290, 293, 300, 631, 657, 672, 681, 697, 711, 721, 722, 725, 726], "000": [247, 290, 633, 655], "099": [247, 290, 655], "tensorflowvocrecord": [247, 290], "pascal": [247, 290], "voc": [247, 290, 318, 371], "2012": [247, 290], "00000": [247, 290], "00004": [247, 290], "00001": [247, 290], "00003": [247, 290], "dummydataset": [248, 249, 291, 292, 563], "127": [248, 249, 291, 292, 563, 655, 714, 720, 726], "stand_norm": [248, 249, 291, 292, 563, 655], "dummy_v2": [249, 292, 563, 655], "sparse_dummy_v2": [249, 292, 655], "label_shap": [249, 292, 563, 655], "sparsedummydataset": [249, 292], "dense_shap": [249, 292, 655], "sparse_ratio": [249, 292, 655], "imagenetraw": [250, 293, 655], "data_path": [250, 293, 655], "image_list": [250, 293, 655], "img1": [250, 293, 655], "img2": [250, 293, 655], "imgx": [250, 293, 655], "val_map": [250, 293, 655], "txt": [250, 293, 655, 657, 668, 694, 696, 697, 699, 700], "pytorchimagenetraw": [250, 293], "mxnetimagenetraw": [250, 293], "tensorflowimagenetraw": [250, 293], "inteltensorflow": [250, 252, 293, 295, 668], "tensorflowimagenetdataset": [250, 293], "onnxrtimagenetdataset": [250, 293], "bert_dataset": [251, 256, 294, 299, 310, 363], "coco_dataset": [251, 256, 294, 299, 310, 363], "dummy_dataset": [251, 256, 294, 299, 310, 363], "dummy_dataset_v2": [251, 256, 294, 299, 310, 363], "imagenet_dataset": [251, 256, 294, 299, 310, 363], "style_transfer_dataset": [251, 256, 294, 299, 310, 363], "styletransferdataset": [252, 295], "content_fold": [252, 295, 655], "style_fold": [252, 295, 655], "crop_ratio": [252, 295, 655], "resize_shap": [252, 295, 655], "image_format": [252, 295, 655], "holder": [252, 295, 655], "labelbalancecocorecordfilt": [253, 296], "balanc": [253, 296, 717, 720], "labelbalancecocorawfilt": [253, 296], "tensorflowfilt": [254, 297], "onnxrtqlfilt": [254, 297], "onnxrtitfilt": [254, 297], "pytorchfilt": [254, 297], "mxnetfilt": [254, 297], "filter_registri": [254, 297], "filter_typ": [254, 297], "__call__": [254, 297], "coco_filt": [255, 256, 298, 299, 310, 363], "imagenet_transform": [256, 259, 299, 301, 310, 363], "parsedecodecocotransform": 257, "quantizedinput": [258, 300, 722], "labelshift": [258, 300, 722], "label_shift": [258, 300, 722], "parsedecodeimagenet": [258, 300, 722], "proto": [258, 262, 300, 303, 722], "parsedecodeimagenettransform": [258, 300], "tensorflowtransposelastchannel": 258, "tensorflowshiftrescal": 258, "rescal": [258, 262, 303, 722], "tensorflowresizecropimagenettransform": [258, 300], "random_crop": [258, 300, 722], "resize_sid": [258, 300, 722], "resize_method": [258, 300], "bilinear": [258, 262, 300, 303, 722], "random_flip_left_right": [258, 300, 722], "mean_valu": [258, 300, 722], "channels_last": [258, 300, 675], "subpixel": [258, 300], "rgb": [258, 300], "seri": [258, 300, 633, 668, 672, 722], "applic": [258, 300, 636, 662, 675, 692, 694, 700, 701, 705, 706, 712, 717, 720, 721, 722, 724], "crop": [258, 262, 300, 303, 655, 722], "left": [258, 262, 300, 303, 686, 692, 720, 722], "std": [258, 262, 300, 303, 672, 722], "bilinearimagenettransform": [258, 300], "central_fract": [258, 300, 722], "875": [258, 300, 722], "fraction": [258, 300, 722], "onnxbilinearimagenettransform": [258, 300], "onnxresizecropimagenettransform": [258, 300], "std_valu": [258, 300], "229": [258, 300, 672], "225": [258, 300, 672], "resizewithaspectratio": [258, 300], "87": [258, 300, 726], "inter_pol": [258, 300], "cv2": [258, 300], "inter_area": [258, 300], "aspect": [258, 262, 300, 303, 722], "postprocess_cl": [260, 270, 672], "user_postprocess": [260, 270], "convert_to_unicod": [261, 302], "unicod": [261, 302], "assum": [261, 302, 314, 325, 367, 634, 664, 692], "load_vocab": [261, 302], "vocab_fil": [261, 262, 302, 303, 722], "convert_by_vocab": [261, 302], "vocab": [261, 302], "whitespace_token": [261, 302], "whitespac": [261, 302, 316, 369], "clean": [261, 302, 672], "piec": [261, 302, 311, 364, 671, 717], "fulltoken": [261, 302], "tokenzi": [261, 302], "basictoken": [261, 302], "punctuat": [261, 302, 311, 316, 364, 369], "lower": [261, 262, 302, 303, 316, 369, 429, 659, 711, 712, 714, 720, 722, 723], "wordpiecetoken": [261, 302], "unk_token": [261, 302], "unk": [261, 302], "max_input_chars_per_word": [261, 302], "wordpiec": [261, 262, 302, 303, 722], "concat_gener": [262, 303], "inc": [262, 303, 468, 628, 635, 675, 682, 692, 694, 699, 712, 713, 718, 723], "tensorflowtransform": [262, 303], "mxnettransform": [262, 303], "pytorchtransform": [262, 303], "onnxrtqltransform": [262, 303], "onnxrtittransform": [262, 303], "transform_registri": [262, 303], "transform_typ": [262, 303], "basetransform": [262, 303], "tensorflowwrapfunct": [262, 303], "transform_func": [262, 303], "pytorchmxnettransform": [262, 303], "get_torchvision_map": [262, 303], "torchvis": [262, 303, 661, 665, 675, 681, 695], "composetransform": [262, 303], "transform_list": [262, 303, 722], "compos": [262, 303, 616, 722], "croptoboundingbox": [262, 303, 722], "offset_height": [262, 303, 722], "offset_width": [262, 303, 722], "target_height": [262, 303, 722], "target_width": [262, 303, 722], "box": [262, 303, 314, 318, 367, 371, 630, 671, 675, 686, 692, 721, 722, 723], "coordin": [262, 303, 350, 428, 699, 722, 723], "top": [262, 303, 309, 318, 333, 338, 346, 371, 629, 671, 692, 695, 697, 722], "corner": [262, 303, 629, 634, 636, 722], "horizont": [262, 303, 722], "mxnetcroptoboundingbox": [262, 303], "onnxrtcroptoboundingbox": [262, 303], "tensorflowcroptoboundingbox": [262, 303], "resizewithratio": [262, 303, 722], "min_dim": [262, 303, 722], "800": [262, 303, 722], "max_dim": [262, 303, 722], "1365": [262, 303, 722], "constant_valu": [262, 303], "longest": [262, 303, 722], "side": [262, 303, 655, 686, 722], "exce": [262, 303, 717, 722], "tensorflowresizewithratio": [262, 303], "permut": [262, 303, 722], "tensorflowtranspos": [262, 303], "mxnettranspos": [262, 303], "pytorchtranspos": [262, 303], "randomverticalflip": [262, 303, 722], "tensorflowrandomverticalflip": [262, 303], "randomhorizontalflip": [262, 303, 672, 722], "tensorflowrandomhorizontalflip": [262, 303], "toarrai": [262, 303, 722], "pil": [262, 303, 722], "casttftransform": [262, 303], "castonnxtransform": [262, 303], "castpytorchtransform": [262, 303], "centercroptftransform": [262, 303], "center": [262, 303, 632, 633, 668, 722, 723], "paddedcentercroptransform": [262, 303], "crop_pad": [262, 303], "resizetftransform": [262, 303], "bicub": [262, 303, 722], "resizepytorchtransform": [262, 303], "randomcroptftransform": [262, 303], "randomresizedcroppytorchtransform": [262, 303], "08": [262, 303, 722, 726], "randomresizedcropmxnettransform": [262, 303], "randomresizedcroptftransform": [262, 303], "normalizetftransform": [262, 303], "deviat": [262, 303, 657, 722], "broadcast": [262, 303, 660, 722], "rescalekeraspretraintransform": [262, 303], "rescaletftransform": [262, 303], "rescaletransform": [262, 303], "alignimagechanneltransform": [262, 303], "must": [262, 303, 314, 367, 598, 629, 630, 635, 651, 654, 668, 714, 722], "pytorchalignimagechannel": [262, 303], "tondarraytransform": [262, 303], "resizemxnettransform": [262, 303], "resizetransform": [262, 303], "cropresizetftransform": [262, 303], "boundari": [262, 303, 722], "area": [262, 303, 314, 367, 671, 722], "pytorchcropresizetransform": [262, 303], "mxnetcropresizetransform": [262, 303], "cropresizetransform": [262, 303], "centercroptransform": [262, 303], "mxnetnormalizetransform": [262, 303], "pytorchnormalizetransform": [262, 303], "normalizetransform": [262, 303], "randomcroptransform": [262, 303], "randomresizedcroptransform": [262, 303], "get_final_text": [262, 303], "pred_text": [262, 303], "orig_text": [262, 303], "project": [262, 303, 627, 628, 629, 698, 712, 719, 723, 727], "squadexampl": [262, 303], "qas_id": [262, 303], "question_text": [262, 303], "doc_token": [262, 303], "orig_answer_text": [262, 303], "start_posit": [262, 303], "end_posit": [262, 303], "is_imposs": [262, 303], "answer": [262, 303, 315, 316, 368, 369, 628, 697, 711, 722, 726], "unique_id": [262, 303], "example_index": [262, 303], "doc_span_index": [262, 303], "token_to_orig_map": [262, 303], "token_is_max_context": [262, 303], "input_mask": [262, 303, 672], "segment_id": [262, 303, 672], "read_squad_exampl": [262, 303], "input_fil": [262, 303], "doc_strid": [262, 303, 722], "max_query_length": [262, 303, 722], "output_fn": [262, 303], "inputbatch": [262, 303], "collecttransform": [262, 303], "10833": [262, 303], "tfsquadv1posttransform": [262, 303], "n_best_siz": [262, 303, 722], "384": [262, 303, 722], "64": [262, 303, 631, 717, 720, 722, 726], "max_answer_length": [262, 303, 722], "30": [262, 303, 661, 665, 667, 722, 726], "nbest_predict": [262, 303, 722], "question": [262, 303, 315, 316, 368, 369, 628, 629, 633, 634, 668, 675, 699, 711, 720, 722, 726], "anoth": [262, 303, 311, 320, 364, 624, 657, 658, 685, 689, 722, 723], "long": [262, 303, 653, 663, 717, 722], "document": [262, 303, 443, 635, 636, 641, 660, 670, 673, 677, 687, 690, 691, 698, 699, 701, 711, 718, 722, 724], "chunk": [262, 303, 722], "tfmodelzoocollecttransform": [262, 303], "tfsquadv1modelzooposttransform": [262, 303], "squadv1": [262, 303, 722], "parsedecodevoctransform": [262, 303], "conf_fname_or_obj": [263, 272, 304, 309, 319, 320, 321, 322, 324, 333, 338, 346], "unnecessari": [263, 672], "setter": 265, "calib_dataload": [265, 347, 424, 447, 464, 465, 468, 630, 633, 654, 655, 657, 665, 666, 671, 672, 694, 695, 714, 715, 716, 717], "reason": [265, 628, 635, 654, 697, 717, 721, 723], "know": [265, 653, 660, 718], "metric_cl": [267, 371, 424, 672], "user_metr": [267, 371, 424], "recommend": [267, 371, 598, 634, 655, 664, 683, 686, 691, 693, 711, 713, 723], "set_backend": 268, "tensorflowimagefold": 290, "qlinear2qdq": [305, 310, 363], "qlinearop": [306, 657, 667, 683, 714, 726], "check_model": 306, "onnx_qlinear_to_qdq": 306, "input_name_to_nod": 306, "tf_to_fp32_onnx": 307, "tf_to_int8_onnx": 307, "int8_model": [307, 308, 634], "get_node_map": 308, "fp32_onnx_path": 308, "module_node_map": 308, "get_quantizable_onnx_op": 308, "quantize_nod": 308, "dynamic_quant_export": 308, "pt_fp32_model": 308, "pt_int8_model": 308, "weight_typ": 308, "s8": 308, "static_quant_export": 308, "_quantiz": [308, 391], "torch_to_fp32_onnx": 308, "do_constant_fold": 308, "torch_to_int8_onnx": 308, "across": [309, 319, 346, 372, 656, 672, 699, 702, 711, 715, 720, 723], "variou": [309, 319, 346, 372, 636, 667, 675, 702, 711, 713, 715], "dl": [309, 319, 333, 338, 346, 372, 657, 666, 679, 692, 712, 726], "bring": [309, 346, 686, 699, 720], "vari": [309, 333, 338, 346, 697, 711, 720, 726], "roc": [309, 318, 333, 338, 346, 371], "flexibl": [309, 333, 338, 346, 633, 658, 699, 711, 717], "techniqu": [310, 363, 626, 633, 667, 672, 675, 694, 710, 711, 712, 713, 714, 724, 725, 726], "bleu": [310, 312, 317, 363, 365, 370, 671, 711], "bleu_util": [310, 317, 363, 370], "coco_label_map": [310, 317, 363, 370], "coco_tool": [310, 317, 363, 370], "evaluate_squad": [310, 317, 363, 370], "f1": [310, 315, 317, 318, 363, 368, 370, 371, 660, 671, 672, 695, 719, 726], "basic_na": [310, 323, 363], "nas_util": [310, 323, 363], "pruner_legaci": [310, 363], "gradient_sensit": [310, 329, 363], "group_lasso": [310, 329, 363], "pruning_recip": [310, 363], "tile_pattern": [310, 334, 335], "prune_util": [310, 339, 363], "tuning_sampl": [310, 352, 358, 363, 432, 438], "tuning_spac": [310, 352, 358, 359, 361, 363, 432, 438, 439, 441], "tuning_struct": [310, 352, 358, 359, 360, 363, 432, 438, 439, 440], "auto_mixed_precis": [310, 352, 363, 432], "graph_optim": [310, 363], "mixed_precis": [310, 363, 372, 672], "model_convers": [310, 363], "pruning_v2": [310, 363], "unicoderegex": [311, 364], "hoc": [311, 364], "hack": [311, 364], "recogn": [311, 364, 723], "nondigit_punct_r": [311, 364], "compil": [311, 364, 672], "express": [311, 364, 628], "preced": [311, 364, 720, 723], "digit": [311, 364, 624, 712], "punct_nondigit_r": [311, 364], "symbol_r": [311, 364], "bleu_token": [311, 364], "mose": [311, 364], "smt": [311, 364], "mosesdecod": [311, 364], "mteval": [311, 364], "v14": [311, 364], "pl": [311, 364], "l954": [311, 364], "l983": [311, 364], "bilingu": [311, 364], "understudi": [311, 364], "qualiti": [311, 364, 653], "machin": [311, 364, 662, 668, 678, 692, 694, 700, 712, 720, 721], "translat": [311, 312, 364, 365, 711, 723], "natur": [311, 364, 662], "approxim": [311, 312, 364, 365, 635, 671, 717], "glue": [311, 318, 364, 371, 655, 671, 672, 681], "word": [311, 364, 653, 671, 711, 717, 726], "ngram": [311, 364, 671], "breviti": [311, 312, 364, 365, 671], "doe": [311, 364, 442, 653, 654, 655, 671, 672, 717, 718, 722], "beam": [311, 364, 671], "tensor2tensor": [312, 365], "bleu_hook": [312, 365], "compute_bleu": [312, 365], "reference_corpu": [312, 365], "translation_corpu": [312, 365], "max_ord": [312, 365], "use_bp": [312, 365], "against": [312, 365], "gram": [312, 365], "bleu_scor": [312, 365], "third": [314, 367, 629, 669], "parti": [314, 367, 629, 669, 714], "pycocotool": [314, 367, 663, 668], "noth": [314, 367, 723], "thu": [314, 367, 598, 672, 711, 714], "cannot": [314, 367, 630, 653, 663, 717, 721], "jonathanhuang": [314, 367], "image_id": [314, 367, 671], "invok": [314, 367, 598, 635], "groundtruth_dict": [314, 367], "exportgroundtruthtococo": [314, 367], "groundtruth_boxes_list": [314, 367], "groundtruth_classes_list": [314, 367], "max_num_class": [314, 367], "output_path": [314, 367], "detections_list": [314, 367], "exportdetectionstococo": [314, 367], "detection_boxes_list": [314, 367], "detection_scores_list": [314, 367], "detection_classes_list": [314, 367], "cocowrapp": [314, 367], "loadannot": [314, 367], "cocoevalwrapp": [314, 367], "agnostic_mod": [314, 367], "computemetr": [314, 367], "detection_typ": [314, 367], "bbox": [314, 367, 630, 671], "hold": [314, 350, 367, 428, 655], "iou_typ": [314, 367], "iou_thr": [314, 318, 367, 371, 671], "map_point": [314, 318, 367, 371, 671], "cocoev": [314, 367], "mscoco": [314, 367], "Then": [314, 367, 635, 657, 685, 687, 689, 690, 697, 720, 723], "exportsingleimagegroundtruthtococo": [314, 367], "next_annotation_id": [314, 367], "category_id_set": [314, 367], "groundtruth_box": [314, 367], "groundtruth_class": [314, 367], "groundtruth_mask": [314, 367], "groundtruth_is_crowd": [314, 367], "ingest": [314, 367], "here": [314, 367, 443, 635, 655, 660, 661, 662, 664, 665, 670, 671, 680, 687, 690, 692, 695, 698, 700, 714, 718, 719, 720, 726], "exportsingleimagedetectionstococo": [314, 367], "uniqu": [314, 347, 367, 714], "assign": [314, 367, 624, 660, 713, 723], "num_gt_box": [314, 367], "num_detect": [314, 318, 367, 371, 671, 672, 725], "image_height": [314, 367], "image_width": [314, 367], "detection_mask": [314, 367], "crowd": [314, 367], "insid": [314, 367, 598, 658, 659, 693, 711, 715, 723], "exportsingleimagedetectionboxestococo": [314, 367], "detection_box": [314, 367, 672, 725], "detection_scor": [314, 367, 672, 725], "detection_class": [314, 367, 672, 725], "exporsingleimagedetectionboxestococo": [314, 367], "exportsingleimagedetectionmaskstococo": [314, 367], "allenai": [315, 316, 368, 369], "bi": [315, 316, 368, 369], "att": [315, 316, 368, 369], "flow": [315, 316, 368, 369, 630, 631, 672], "f1_score": [315, 316, 368, 369], "ground_truth": [315, 316, 368, 369], "ground": [315, 316, 368, 369], "truth": [315, 316, 368, 369], "metric_max_over_ground_truth": [315, 316, 368, 369], "metric_fn": [315, 316, 368, 369], "exact_match_scor": [315, 368], "exact": [315, 368], "articl": [315, 316, 368, 369], "paragraph": [315, 316, 368, 369], "qa": [315, 316, 368, 369, 633], "normalize_answ": [316, 369], "newlin": [316, 369, 624], "tab": [316, 369, 692, 721], "harmon": [316, 318, 369, 371], "recal": [316, 318, 369, 371], "answer_start": [316, 369], "177": [316, 369, 726], "denver": [316, 369], "bronco": [316, 369], "nfl": [316, 369], "afc": [316, 369], "super": [316, 369, 631], "bowl": [316, 369], "50": [316, 369, 631, 635, 697, 711, 720, 726], "56be4db0acb8001400a502ec": [316, 369], "percentag": [316, 369, 388, 652, 717, 725], "tensorflowmetr": [318, 371], "maintain": [318, 371, 598, 628, 629, 653, 674, 675, 687, 690, 694, 699, 700, 711, 717, 718], "pytorchmetr": [318, 371], "mxnetmetr": [318, 371], "onnxrtqlmetr": [318, 371], "onnxrtitmetr": [318, 371], "metric_registri": [318, 371], "metric_typ": [318, 371], "decorator_metr": [318, 371], "basemetr": [318, 371, 424], "single_output": [318, 371], "hvd": [318, 371, 660], "wrappytorchmetr": [318, 371], "wrapmxnetmetr": [318, 371], "wraponnxrtmetr": [318, 371], "proport": [318, 371], "pred_list": [318, 371], "pytorchloss": [318, 371], "mae": [318, 371, 671], "compare_label": [318, 371, 424, 671], "rmse": [318, 371, 671, 723], "tensorflowtopk": [318, 371], "k": [318, 371, 424, 671, 694, 711], "among": [318, 371, 686, 720], "outcom": [318, 371], "num_correct": [318, 371], "num_sampl": [318, 371], "generaltopk": [318, 371], "cocomapv2": [318, 371, 671], "anno_path": [318, 371, 671], "map_kei": [318, 371], "detectionboxes_precis": [318, 371], "output_index_map": [318, 371, 671], "tensorflowmap": [318, 371], "tensorflowcocomap": [318, 371], "tensorflowvocmap": [318, 371], "squadf1": [318, 371, 671], "miou": [318, 371], "num_class": [318, 371], "21": [318, 371, 680, 681, 703, 706, 707, 712, 720, 726], "iou": [318, 371], "intersect": [318, 371, 634, 671], "union": [318, 371, 387, 388, 390, 394, 401, 613, 671, 703], "onnxrtglu": [318, 371], "dlrm": [318, 371], "modelconvers": 320, "typic": [320, 347, 631, 633, 659, 661, 665, 697, 711, 726], "basicna": 321, "model_build": [321, 324], "conf_fnam": 321, "nasbas": [324, 631], "nas_registri": 325, "nas_method": 325, "create_search_space_pool": 325, "idx": [325, 655], "find_pareto_front": 325, "pareto": [325, 631], "front": [325, 631], "n_point": 325, "n_metric": 325, "n_pareto_point": 325, "gradientsensitivityprun": 327, "pytorchmodel": [327, 328, 330, 331, 332, 381], "overwritten": [327, 328, 330, 331, 332, 680], "grouplassoprun": 328, "legaci": 329, "basicmagnitudeprun": 330, "patternlockprun": [331, 343], "pruner_registri": 332, "clase": 332, "pruningconf": [333, 338], "tfpruningcallback": [333, 338], "input_model": [333, 338, 674, 695, 696, 697, 721], "pure": [333, 338, 711], "pattern_registri": 336, "pattern_typ": 336, "patternbas": 336, "mask_shap": [336, 337], "is_contigu": 336, "tile": [337, 653], "tilepatternbas": 337, "tilepattern_1x1": 337, "1x1": [337, 658, 672, 711], "tilepattern_2x2": 337, "2x2": [337, 720], "tilepattern_1x16": 337, "1x16": 337, "tilepattern_4x1": 337, "tilepattern_1x2": 337, "1x2": [337, 720], "patternnxm": 341, "patternninm": 341, "reset_non_value_to_default": 342, "parse_not_to_prun": 342, "update_frequency_on_step": [343, 713], "max_sparsity_ratio_per_lay": [343, 713], "magnitudeprun": 343, "snipprun": 343, "snipmomentumprun": 343, "moreoev": 343, "quantconf": 346, "separ": [347, 628, 653, 666, 669, 700, 702, 710, 713], "opt_model": [347, 672], "fulli": [347, 672, 700, 714, 720], "train_func": [347, 613, 660, 672, 714], "automixedprecisiontunestrategi": [348, 426], "basictunestrategi": [349, 427], "polici": [349, 353, 425, 427, 433, 628, 633, 725, 727], "bayesiantunestrategi": [350, 428], "acq_max": [350, 428], "ac": [350, 428], "gp": [350, 428], "y_max": [350, 428], "n_warmup": [350, 428], "10000": [350, 428, 711], "n_iter": [350, 428], "acquisit": [350, 428], "gaussian": [350, 428, 723], "relev": [350, 428, 635, 636, 653, 697, 711], "acq": [350, 428], "randomst": [350, 428], "scipi": [350, 428], "x_max": [350, 428], "targetspac": [350, 428], "pbound": [350, 428], "9527": [350, 428, 672, 725], "bayesianoptim": [350, 428], "exhaustivetunestrategi": [351, 430], "msetunestrategi": [353, 433], "mse_v2tunestrategi": [354, 434], "revert": [354, 362, 434, 442, 723], "randomtunestrategi": [355, 435], "strategy_registri": [356, 436, 723], "tunestrategi": [356, 436, 723], "tuningsamplerregistri": 359, "tuningsampl": [359, 439], "tuningord": [359, 439], "tuningspac": [359, 360, 439, 440], "tuning_order_lst": [359, 439], "initial_op_tuning_cfg": [359, 439], "modelwisetuningsampl": [359, 439], "tuning_items_prior": [359, 439], "op_dtype_dict": [359, 439], "optuningconfig": [359, 360, 361, 439, 440, 441], "optypewisetuningsampl": [359, 439], "opwisetuningsampl": [359, 439], "fallbacktuningsampl": [359, 439], "op_dtyp": [359, 439], "skip_first": [359, 439], "smoothquantsampl": [359, 439], "tuningitem": [360, 440], "item_typ": [360, 440], "pattern_to_intern": [360, 440], "default_dtyp": [360, 440], "pattern_to_path": [360, 440], "quant_mode_from_pattern": [360, 440], "internal_pattern": [360, 440], "initial_tuning_cfg_with_quant_mod": [360, 440], "op_name_typ": [360, 440], "step1": [360, 440], "step2": [360, 440], "complet": [360, 440, 634, 635, 711, 714, 723, 725, 726], "step3": [360, 440], "step4": [360, 440], "step5": [360, 440], "op_quant_mod": [361, 441], "ordereddefaultdict": [362, 442], "extract_data_typ": [362, 442], "reverted_data_typ": [362, 442], "signed_flag": [362, 442], "get_adaptor_nam": [362, 442], "experiment": [363, 631, 655, 659, 660, 662, 668, 672, 711, 713, 714, 718, 722], "base_model": [363, 374], "keras_model": [363, 374], "mxnet_model": [363, 374], "nets_factori": [363, 374, 564], "onnx_model": [363, 374, 384, 385, 387, 388, 390, 399, 417, 695], "tensorflow_model": [363, 374, 422, 697], "torch_model": [363, 374], "collect_layer_histogram": [363, 617], "create_obj_from_config": [363, 617], "kl_diverg": [363, 617], "load_huggingfac": [363, 617, 672], "neural_insights_util": [363, 617], "weights_detail": [363, 617], "sub_class": [371, 424], "register_customer_metr": 371, "topk": [371, 424, 660, 671, 672, 694, 714], "frozen": [372, 380, 424, 566, 674], "savedmodel": [372, 380, 424, 566, 726], "onnx_ml_pb2": [372, 674], "hybirdblock": [372, 424], "basemodel": [373, 464, 465, 468, 566], "plai": [373, 566, 712, 717, 720], "role": [373, 566, 717, 720], "kerasmodel": [375, 566], "get_model_fwk_nam": 376, "fwk": 376, "mxnetmodel": 377, "net": [378, 567], "tfslimnetsfactori": [378, 567], "get_model_typ": [380, 566], "validate_graph_nod": [380, 566], "validate_and_inference_input_output": [380, 566], "graph_sess": [380, 566], "graph_def_sess": [380, 566], "frozen_pb_sess": [380, 566], "load_saved_model": [380, 566], "saved_model_tag": [380, 566], "signatur": [380, 566], "metagraphdef": [380, 566], "keras_sess": [380, 566], "slim_sess": [380, 566], "checkpoint_sess": [380, 566], "estimator_sess": [380, 566], "saved_model_sess": [380, 566], "tensorflowbasemodel": [380, 422, 566], "tensorflowsavedmodelmodel": [380, 566], "tensorflowllmmodel": [380, 566], "exceed": [380, 566], "2gb": [380, 566], "tensorflowqatmodel": [380, 566], "tensorflowcheckpointmodel": [380, 566], "tensorflowmodel": [380, 566], "pytorchbasemodel": 381, "pytorchfxmodel": 381, "ipexmodel": 381, "driven": [382, 633, 672, 692, 709, 721], "objective_registri": 382, "objective_custom_registri": 382, "obj_cl": 382, "eural_compressor": 382, "objective_cl": 382, "user_object": 382, "__class__": 382, "__name__": 382, "objective_cfg": 382, "usr_cfg": 382, "user_obj_cfg": 382, "easili": [382, 634, 676, 680, 692, 709, 720], "peak": [382, 709], "multiobject": 382, "metric_criterion": 382, "metric_weight": 382, "obj_criterion": 382, "obj_weight": 382, "is_measur": 382, "calibrationdataread": [384, 385, 387, 388, 391, 393, 394, 395], "pathlib": [385, 387, 388, 390, 393, 394], "weight_dtyp": [387, 388, 390, 396, 462, 466], "weight_bit": [387, 388, 390, 394, 396, 635], "weight_group_s": [387, 388, 390, 396], "weight_sym": [387, 388, 390, 396, 462, 466], "91": [387, 717, 720, 726], "apply_awq_on_model": 387, "quant_config": [387, 388, 390, 393, 401, 451, 452, 464, 468, 568, 608, 612], "calibration_data_read": [387, 388, 393, 394], "nnx": 387, "stabil": [388, 717], "apply_gptq_on_model": 388, "apply_rtn_on_model": 390, "nodeproto": 391, "data_read": 391, "reader": 391, "smooth_quant_entri": [393, 653], "smoohquantconfig": [393, 396], "rtn_quantize_entri": 393, "rtnconfig": [393, 394, 396, 401, 603, 605, 612], "gptq_quantize_entri": 393, "gptqconfig": [393, 394, 396, 605], "awq_quantize_entri": 393, "awqconfig": [393, 396], "model_input": 394, "base_tun": [394, 465, 604], "expand": 394, "eatch": 394, "eval": [394, 630, 653, 654, 657, 675, 714, 721], "l139": 395, "act_dtyp": [396, 462, 466], "get_default_rtn_config": [396, 605], "get_default_gptq_config": [396, 605], "get_default_awq_config": 396, "fusedconv": 396, "calib_it": 396, "auto_alpha_arg": [396, 466, 720], "alpha_min": [396, 720], "alpha_max": [396, 720], "alpha_step": [396, 720], "attn_method": 396, "get_default_sq_config": [396, 466], "register_algo": [401, 568, 612, 653], "algos_map": [401, 568, 612], "example_algo": [401, 568, 612], "get_qrange_for_qtyp": 401, "parserfactori": 403, "onnxrtparserfactori": 405, "onnxprofilingpars": 407, "respons": [407, 408, 412, 705, 706, 707, 714], "profilingpars": 408, "profilingresult": 409, "total_execution_tim": 409, "accelerator_execution_tim": 409, "cpu_execution_tim": 409, "op_run": 409, "op_defin": 409, "tensorflowparserfactori": 410, "tensorflowprofilingpars": 412, "profilerfactori": [413, 415, 420], "create_onnx_config": 418, "ort": 418, "sessionopt": 418, "delete_assign": 423, "create_tf_config": 423, "tf_modul": 423, "configproto": 423, "set_eager_execut": 423, "entir": [424, 613, 630, 635, 636, 652, 699, 711], "autotunestrategi": 425, "conservativetunestrategi": 429, "o0": [429, 723], "who": [429, 628], "hawq_v2tunestrategi": 431, "made": [431, 634, 714, 718, 723], "impact": [431, 711, 718, 723], "tunestrategymeta": 436, "metaclass": 436, "lowerbitssampl": 439, "blockfallbacktuningsampl": 439, "op_block_lst": 439, "target_dtyp": 439, "alpha_list": 439, "weightonlyquantsampl": 439, "quantopt": 442, "quant_typ": 442, "quant_opt": 442, "preprocess_user_cfg": 442, "op_user_cfg": 442, "op_user_cfg_modifi": 442, "build_slave_faker_model": 442, "slave": [442, 723], "virtual": [442, 712], "classregist": 442, "fun": 443, "attribute1": 443, "module_debug_level1": 443, "debug": [443, 620, 657, 685, 689, 693, 723, 724], "function1": 443, "param1": 443, "param2": 443, "parameter1": 443, "parameter2": 443, "function2": 443, "pep": [443, 653], "484": [443, 726], "output_model": [443, 672, 695, 697, 721], "function3": 443, "section": [443, 636, 653, 657, 658, 659, 692, 695, 698, 711, 713, 717, 725], "restructuredtext": 443, "liter": 443, "generator1": 443, "example_gener": 443, "exampleclass": 443, "param3": 443, "public": [443, 628, 687, 690], "attr1": 443, "attr2": 443, "attr5": 443, "api_doc_exampl": 444, "smoothquantconfig": [447, 466], "calib_iter": [447, 451, 464, 465, 468, 635], "scaler": 448, "kerasqueri": 451, "kerasconfigconvert": 451, "staticquantconfig": [451, 452, 462, 466, 568], "tensorflowconfig": 452, "tensorflowconfigconvert": 452, "weight_granular": [462, 466], "per_tensor": [462, 466, 635, 636, 664, 714, 725], "act_sym": [462, 466], "act_granular": [462, 466], "base_config": [462, 464, 466, 468, 608], "get_all_registered_config": 462, "get_default_static_quant_config": [462, 466], "static_quant_entri": 464, "weight_algorithm": 466, "act_algorithm": 466, "record_max_info": 466, "weight_clip": 466, "default_sq_alpha_arg": 466, "quantize_model": 468, "quantize_model_with_single_config": 468, "dummydatasetv2": 563, "itex_instal": 568, "instal": [568, 660, 663, 665, 675, 677, 680, 683, 687, 690, 692, 693, 695, 696, 697, 727], "combine_histogram": [568, 624], "old_hist": [568, 624], "old": [568, 624, 672, 718], "get_all_fp32_data": [568, 624], "get_tensor_histogram": [568, 624], "scale_info": [568, 624], "dequantize_weight": [568, 624], "weight_tensor": [568, 624], "min_filter_tensor": [568, 624], "max_filter_tensor": [568, 624], "dump_data_to_loc": [568, 624], "pkl": [568, 624, 696], "load_data_from_pkl": [568, 624], "cpuinfo": [568, 624], "statist": [568, 580, 624, 625], "header": [568, 580, 624, 663], "field_nam": [568, 580, 624], "output_handl": [568, 580, 624], "printer": [568, 580, 624], "captureoutputtofil": [568, 624], "tmp_file_path": [568, 624], "stream": [568, 624, 726], "sy": [568, 624, 653, 678], "stderr": [568, 624], "captur": [568, 624], "lazyimport": [568, 624], "lazi": [568, 624], "till": [568, 624, 723], "static_quant": 579, "run_fn": [579, 582, 604, 608], "carri": [579, 711], "warm": 580, "dump_model_op_stat": 580, "get_quantizable_ops_recurs": 580, "use_full_rang": [581, 595, 605], "use_auto_scal": 581, "use_mse_search": [581, 595, 605], "use_layer_wis": [582, 605], "run_arg": [582, 604, 608], "register_acceler": 583, "ellipsi": 583, "cuda_acceler": 583, "cpu_acceler": 583, "hqqmoduleconfig": 585, "immut": 585, "constructor": 585, "quant_api": 587, "device_typ": 598, "_dtype": 598, "cache_en": 598, "manag": [598, 613, 616, 672, 675, 676, 686], "region": [598, 720], "chosen": [598, 635, 652], "enter": [598, 686, 692, 700], "half": [598, 673, 683], "hpu": 598, "float8_e4m3fn": 598, "autocastmodel": 598, "affect": [598, 720], "dataparallel": 598, "distributeddataparallel": 598, "torch_dtyp": [598, 636], "rtn_entri": 603, "configs_map": 603, "use_sym": 605, "use_double_qu": 605, "double_quant_dtyp": 605, "double_quant_bit": 605, "double_quant_use_sym": 605, "double_quant_group_s": 605, "act_ord": 605, "static_group": [605, 717], "get_default_hqq_config": 605, "hqqconfig": 605, "hqq": 605, "loop": [613, 630, 631, 635, 636, 664, 702, 719, 723], "compressionmanag": 613, "deal": 613, "pruningconfig": 613, "orchestr": [613, 633, 667, 724], "on_train_begin": [613, 630, 658, 659, 672, 710, 711, 714], "train_loop": [613, 672, 710], "on_epoch_begin": [613, 616, 658, 659, 672, 710], "on_step_begin": [613, 616, 658, 659, 672, 710, 711], "on_after_compute_loss": [613, 658, 659, 672, 710], "on_before_optimizer_step": [613, 658, 659, 672, 710, 711], "on_step_end": [613, 616, 658, 659, 672, 710], "on_epoch_end": [613, 616, 658, 659, 672, 710], "on_train_end": [613, 658, 659, 672, 710, 711, 714], "path_to_sav": 613, "top1": [613, 671, 694, 711, 714, 726], "callbacks_list": 613, "layerhistogramcollector": 614, "layer_tensor": 614, "include_lay": 614, "get_func_from_config": 616, "func_dict": 616, "get_preprocess": 616, "get_metr": 616, "get_postprocess": 616, "get_algorithm": 616, "create_dataset": 616, "cfg_preprocess": 616, "cfg_filter": 616, "create_dataload": 616, "dataloader_cfg": 616, "create_eval_func": 616, "postprocess_cfg": 616, "baselin": [616, 719, 720, 721], "create_train_func": 616, "train_cfg": 616, "Their": 616, "auxiliari": 617, "optimizedmodel": 619, "from_pretrain": [619, 672], "save_for_huggingface_upstream": [619, 672], "saved_dir": [619, 717], "msg": [620, 701, 705, 706], "fatal": 620, "warn": [620, 653], "alia": [620, 624, 677, 682], "register_neural_insights_workload": 621, "workload_loc": [621, 624], "workload_mod": 621, "workload_nam": 621, "uuid": 621, "update_neural_insights_workload": 621, "workload_uuid": 621, "update_neural_insights_workload_accuracy_data": 621, "baseline_accuraci": 621, "optimized_accuraci": 621, "get_model_path": 621, "is_int8_model": 623, "load_weight_onli": 623, "checkpoint_dir": 623, "history_cfg": 623, "best_configur": 623, "best_model_weight": 623, "snapshot": [623, 696], "recover_model_from_json": 623, "json_file_path": 623, "cfg_from_fil": 624, "yaml_fil": [624, 655, 660], "time_limit": 624, "get_siz": 624, "seen": [624, 634], "compute_spars": 624, "fault_tolerant_fil": 624, "equal_dict": 624, "d2": 624, "compare_kei": 624, "ignore_kei": 624, "ignor": [624, 652, 655, 717, 720, 723], "get_tuning_histori": 624, "tuning_history_path": 624, "offlin": [624, 628, 672, 714, 720], "str2arrai": 624, "global_st": 624, "show_memory_info": 624, "hint": 624, "dump_class_attr": 624, "compare_object": 624, "obj1": 624, "obj2": 624, "ignore_attr": 624, "comparison": [624, 717, 718, 721], "alias_param": 624, "param_nam": 624, "param_alia": 624, "alias": [624, 653], "print_tabl": 624, "column_map": 624, "table_entri": 624, "titl": [624, 669, 693, 723], "insert_newlin": 624, "prettyt": 624, "column": [624, 717, 720], "handler": [624, 723], "row": [624, 657, 695, 720], "decim": 624, "get_tensors_info": 624, "get_weights_detail": 624, "weightdetail": 624, "dump_tabl": 624, "file_typ": 624, "csv": [624, 631, 695, 696], "dump_table_to_csv": 624, "get_number_of_socket": 624, "platform": [624, 633, 667, 675, 683, 702, 712, 714], "opentri": 624, "activation_min": 624, "activation_max": 624, "print_op_list": 624, "get_op_list": 624, "minmax_file_path": 624, "input_model_tensor": 624, "optimized_model_tensor": 624, "activation_min_max": 624, "calculate_ms": 624, "mse_metric_gap": 624, "fp32_tensor": 624, "dequantize_tensor": 624, "euclidean": [624, 658], "distanc": [624, 658], "check_key_exist": 624, "weightsdetail": 625, "input_tensor_data": 625, "optimized_tensor_data": 625, "weightsstatist": 625, "welcom": [627, 628, 629, 633, 694, 701, 727], "interest": [628, 633, 694, 721], "foster": 628, "particip": [628, 702], "commun": [628, 694], "harass": 628, "experi": [628, 675, 697, 719, 720, 723], "everyon": 628, "regardless": 628, "ag": 628, "bodi": 628, "ethnic": 628, "characterist": 628, "gender": 628, "educ": 628, "socio": 628, "econom": 628, "race": 628, "religion": 628, "sexual": 628, "orient": 628, "contribut": [628, 633, 711], "inclus": 628, "Being": 628, "viewpoint": 628, "gracefulli": 628, "focus": [628, 634], "empathi": 628, "toward": [628, 658], "member": [628, 634], "unaccept": 628, "imageri": 628, "unwelcom": 628, "troll": 628, "insult": 628, "derogatori": 628, "polit": 628, "attack": 628, "privat": 628, "publish": [628, 669, 670, 673, 693, 720], "electron": 628, "explicit": 628, "permiss": 628, "inappropri": 628, "profession": 628, "clarifi": 628, "appropri": [628, 652, 720], "fair": 628, "action": [628, 687, 690], "edit": 628, "reject": 628, "commit": [628, 629], "wiki": 628, "ban": 628, "temporarili": 628, "deem": 628, "threaten": 628, "offens": 628, "harm": 628, "mail": 628, "social": [628, 712], "media": [628, 712], "account": [628, 719, 723], "appoint": 628, "onlin": [628, 719], "event": [628, 721], "abus": 628, "report": [628, 629, 633, 702, 719], "contact": [628, 718, 719], "complaint": 628, "review": [628, 629, 633, 712], "investig": [628, 653, 697], "circumst": [628, 713], "oblig": [628, 698], "confidenti": [628, 694], "regard": [628, 716], "incid": 628, "good": [628, 714, 723], "faith": 628, "repercuss": 628, "leadership": 628, "faq": [628, 633], "page": [628, 629, 694, 697, 698], "send": [629, 635], "view": [629, 633, 661, 683, 692, 698, 718], "star": 629, "repositori": [629, 687, 690], "button": [629, 667, 686, 692], "fork": [629, 687, 690], "clone": [629, 657, 668, 685, 689, 694, 696, 697, 699, 700], "pc": 629, "git": [629, 657, 663, 668, 694, 696, 697, 699, 700], "modif": [629, 634, 664, 680, 699], "checkout": 629, "my": 629, "push": [629, 711, 717, 720], "cover": [629, 662, 666, 712], "would": [629, 672, 696, 711, 714, 720], "adopt": [629, 675, 711, 712, 720], "certif": [629, 694], "agre": 629, "pr": [629, 654, 671, 687, 690, 718], "At": [629, 635, 698, 702, 723], "approv": 629, "solv": [629, 714, 718], "licens": 629, "azur": [629, 633, 712], "devop": 629, "ci": 629, "cloud": [629, 633, 702, 712], "deploi": [629, 658, 672, 698, 702, 717, 723], "e16": 629, "v5": 629, "scan": [629, 633], "pylint": 629, "bandit": 629, "copyright": [629, 669], "docstyl": 629, "spellcheck": 629, "dco": 629, "pytest": 629, "No": [629, 653, 663, 672, 700, 701, 712], "failur": [629, 630], "fault": 629, "coverag": 629, "runtim": [629, 633, 634, 635, 637, 654, 657, 661, 664, 667, 673, 677, 682, 683, 713, 717, 718, 723], "submit": [629, 699, 702, 712], "bug": [629, 633], "intend": 629, "safe": 629, "collabor": [629, 633, 677, 683], "adher": 629, "toolkit": [630, 668, 675, 683, 712, 724], "tracer": 630, "resolv": [630, 632], "floatfunct": 630, "cat": [630, 662, 678, 705, 706, 707], "done": [630, 658, 659, 676, 692, 701, 705, 706, 711, 714], "10004": [630, 631, 634, 654, 658, 659, 660, 664, 667, 673, 710, 713, 715, 717, 725], "neural_compressor": [630, 631, 633, 636, 651, 653, 654, 655, 657, 658, 659, 660, 662, 665, 666, 671, 672, 673, 674, 694, 695, 709, 710, 711, 713, 714, 715, 716, 718, 719, 720, 722, 723, 725], "conduct": [630, 672, 680, 692, 723, 724], "imper": 630, "therefor": [630, 672, 695, 697, 711, 714, 715, 718, 720], "lot": [630, 697, 720], "As": [630, 635, 654, 658, 671, 672, 686, 697, 711, 717, 723], "successfulli": [630, 660, 701, 705, 706, 707, 712], "suggest": [630, 653, 719], "traceabl": 630, "proxi": 630, "tutori": [630, 683, 712, 724], "prototyp": 630, "html": [630, 633, 635, 652, 660, 667, 687, 690, 693, 695, 701, 705, 714], "highlight": 630, "untrac": 630, "ssd": [630, 662, 726], "resnet34": [630, 726], "r34": 630, "bboxes_labels_scor": 630, "prob": 630, "45": [630, 726], "max_output": 630, "zip": [630, 701, 705, 706], "dbox": 630, "dlabel": 630, "dscore": 630, "decode_singl": 630, "autom": [631, 675, 692, 693, 712, 720], "artifici": 631, "ann": 631, "par": [631, 702], "outperform": 631, "propos": [631, 634, 658, 673, 717, 720], "potenti": [631, 657], "lie": [631, 652], "predictor": 631, "shown": [631, 654, 657, 658, 671, 672, 686, 695, 697, 709, 710, 711, 715, 720, 723], "figur": [631, 685, 686, 689, 715], "popul": 631, "inner": 631, "evolutionari": 631, "until": [631, 635, 723], "conclud": 631, "met": [631, 664, 714, 721], "yet": [631, 687, 690, 693, 700, 714], "simplest": [631, 652, 678], "launcher": [631, 633, 658, 659, 683, 724], "agent": 631, "nsga2": 631, "supernet": 631, "ofa_mbv3_d234_e346_k357_w1": 631, "acc": [631, 702, 711, 721, 726], "mac": [631, 693], "num_ev": 631, "250": [631, 711], "results_csv_path": 631, "search_result": 631, "dataset_path": 631, "ilsvrc2012": 631, "aim": [631, 633, 670, 675, 711, 720, 723, 724], "mobilenetv3": 631, "lt": [631, 655, 726], "wmt": 631, "en": 631, "de": 631, "guidelin": [632, 633], "mainstream": [633, 724], "workflow": [633, 635, 636, 657, 658, 662, 668, 673, 687, 690, 694, 721, 724], "particular": [633, 711, 717], "wide": [633, 661, 673, 711, 714, 726], "hardwar": [633, 634, 658, 667, 672, 692, 711, 712, 713], "xeon": [633, 668, 669, 670, 673, 712, 714, 716, 726], "scalabl": [633, 668, 670, 673, 712, 714, 716], "processor": [633, 670, 673, 700, 712, 714, 716], "flex": [633, 668], "amd": [633, 668, 726], "arm": [633, 667, 668, 726], "nvidia": [633, 652, 667, 668, 726], "llama2": 633, "falcon": [633, 670, 711, 720, 726], "j": [633, 670, 696, 711, 720, 726], "bloom": [633, 711, 720, 726], "broad": [633, 667, 681, 724], "stabl": [633, 668, 711, 712], "diffus": [633, 712], "vision": [633, 662, 679, 720], "coder": [633, 667, 676, 677, 680, 683, 686, 699, 703, 712], "marketplac": [633, 693, 712], "googl": [633, 653, 673, 712], "amazon": [633, 675, 683], "web": [633, 694, 700, 705, 706, 707, 721], "servic": [633, 692, 699, 712], "softwar": [633, 669, 711, 712, 718], "alibaba": [633, 682, 689, 690, 712], "tencent": [633, 712], "taco": [633, 712], "oliv": [633, 712], "ai": [633, 675, 712, 716, 724], "ecosystem": [633, 712], "lightn": [633, 682], "pip": [633, 657, 660, 663, 665, 668, 677, 680, 685, 687, 689, 690, 694, 695, 696, 697, 718], "wget": [633, 657, 663, 665, 694, 697], "googleapi": [633, 665, 694, 697], "v1_6": [633, 665, 694, 697], "mobilenet_v1_1": [633, 665, 694, 705], "0_224_frozen": [633, 665, 694, 705], "overview": [633, 723], "jupyterlab": [633, 675, 681, 683, 685, 689, 724], "studio": [633, 683, 692, 702, 724], "topic": 633, "int4": [633, 670, 714, 726], "fp8": [633, 712], "innov": [633, 683, 712], "blog": [633, 712], "oct": [633, 712], "emnlp": [633, 712], "teq": [633, 712, 715, 717], "sep": [633, 712], "neurip": [633, 712], "quala": [633, 712], "minilm": [633, 712, 726], "releas": [633, 668, 681, 683, 685, 689, 691, 703, 706, 707, 727], "legal": [633, 727], "request": [633, 700, 701, 702, 705, 706, 707, 714], "ask": [633, 668], "email": 633, "research": [633, 669, 720, 726], "idea": [633, 694, 711, 720, 723], "discord": 633, "join": [633, 695, 700, 705, 706], "technic": 633, "discuss": 633, "wechat": [633, 712], "img": 633, "bridg": [634, 635, 667], "vanilla": [634, 635, 667], "abcadaptor": 634, "__init__": [634, 653, 654, 655, 671, 723], "query_fw_cap": [634, 636], "query_fused_pattern": 634, "he": 634, "besid": [634, 658, 697, 717], "describ": [634, 636, 653, 657, 664, 694, 721], "past": [634, 717], "mainten": 634, "difficult": [634, 720], "abil": [634, 635, 655, 664, 720], "fragment": 634, "scenario": [634, 651, 658, 672, 711, 717], "granular": [634, 635, 636, 664, 667, 678, 714, 720, 725], "semant": [634, 664], "mla": [634, 673, 714], "becom": [634, 662, 711, 717], "explor": 634, "inspect_tensor": 634, "op_list": [634, 721], "iteration_list": 634, "inspect_typ": 634, "save_to_disk": 634, "quantization_cfg": 634, "set_tensor": 634, "tensor_dict": 634, "diagnosis_help": 634, "fw": 635, "outlin": [635, 636], "instruct": [635, 636, 658, 668, 673, 687, 690, 694, 695, 696, 697, 711, 712, 713, 714, 720, 726], "extend": [635, 636], "accommod": [635, 636], "incorpor": [635, 636, 659, 711, 723], "diagram": [635, 636, 657, 723], "illustr": [635, 636, 659, 723], "sequencediagram": [635, 636, 702], "autonumb": [635, 636], "query_framework_cap": 635, "opwis": 635, "optypewis": 635, "travers": [635, 636, 717, 723], "\u2776": 635, "\u2777": 635, "\u2778": 635, "\u2779": 635, "\u277a": 635, "\u277b": 635, "\u277c": 635, "These": [635, 667, 695], "chapter": 635, "node_op": 635, "confirm": 635, "int8_conv_config": 635, "optype_wise_": 635, "tuning_cfg_to_fw": 635, "Its": [635, 652, 711], "dispatch": [635, 667, 699, 702], "is_perchannel": 635, "is_asymmetr": 635, "convert_bf16": 635, "somewhat": 635, "distort": 635, "line": [635, 653, 660, 667, 675, 680, 681, 700, 721], "let": [636, 664, 680, 711, 713, 725], "overal": [636, 700, 725], "drive": 636, "uint4": 636, "kullback": [636, 658], "leibler": [636, 658], "pytorch_cpu": 636, "1_11_capabl": 636, "cap_s8_1_11": 636, "cap_s8_1_11_conv1d": 636, "per_channel_symmetr": 636, "addition": [636, 660, 711, 723], "per_tensor_symmetr": 636, "due": [636, 662, 711, 714, 720, 721], "nativ": 636, "with_arg": 636, "qscheme": 636, "quant_min": 636, "quant_max": 636, "linux": [651, 663, 668, 686, 692], "x86_64": 651, "aarch64": 651, "prove": [652, 717, 720], "benefici": 652, "uniform": [652, 717], "\u03b2": 652, "\u03b1": 652, "fundament": [652, 672], "primari": [652, 723], "focu": [652, 723], "essenti": [652, 663], "remaind": 652, "enhanc": [652, 675, 711, 712, 716], "resolut": 652, "extrem": 652, "still": [652, 672, 698, 712, 714, 716], "retain": 652, "noteworthi": 652, "vanhouck": 652, "vincent": 652, "andrew": 652, "senior": 652, "mark": 652, "mao": 652, "speed": [652, 672, 683, 711, 712, 714, 723], "2011": 652, "szymon": 652, "migacz": 652, "2017": 652, "mckinstri": 652, "jeffrei": 652, "l": [652, 658, 721, 723], "discov": [652, 721], "1809": 652, "04191": 652, "2018": 652, "mostli": 653, "overli": 653, "argu": 653, "decis": [653, 671], "subprocess": [653, 654], "popen": 653, "pipe": 653, "sub_modul": 653, "namespac": 653, "pollut": 653, "long_str": 653, "extran": 653, "pager": 653, "getenv": 653, "readabl": 653, "seem": 653, "worth": [653, 711], "4f": 653, "65421": 653, "sentenc": 653, "eval_result": 653, "declar": [653, 693], "typealia": 653, "_lossandgradi": 653, "complextfmap": 653, "xx_func": 653, "ordereddict": 653, "plug": [653, 712], "pylanc": 653, "cheeseshopaddress": 653, "chees": 653, "shop": 653, "outofcheeseerror": 653, "crbug": 653, "192795": 653, "cpufreq": [653, 678], "deprec": [653, 687, 690, 718, 722], "facilit": [653, 675], "__all__": 653, "get_all_config_set_from_config_registri": 653, "algorithm_entri": 653, "autotun": 653, "static_qu": 653, "snippet": [653, 667], "rtn_algo_entri": 653, "vscode": [653, 691, 693], "settings_recommend": 653, "encount": 654, "consum": 654, "previous": 654, "lack": [654, 663], "faster": [654, 656, 662, 712, 723, 726], "Of": 654, "evenli": 654, "divid": [654, 702, 720, 723], "discard": 654, "throw": 654, "awai": 654, "draw": [654, 719, 723], "pin": [654, 685, 689], "reshuffl": 654, "manner": [654, 658, 674], "newdataload": 654, "customis": [654, 655, 671], "ensp": [655, 722], "imagerecord": [655, 660, 725], "image_nam": 655, "cocorecord": 655, "gt": [655, 720, 722], "int64": 655, "offer": 655, "style_transf": 655, "content": [655, 700, 701, 705, 706, 707], "tfrecorddataset": 655, "labelbal": 655, "300": [655, 711, 726], "16": [655, 668, 705, 717, 726], "helloworld": [655, 673, 722], "aid": 656, "deploy": [656, 675, 692, 712, 715, 720], "infrastructur": 656, "diagnos": 657, "gui": [657, 667, 697, 711], "termin": [657, 685, 686, 689, 695], "repeat": [657, 723], "durat": [657, 701, 705, 706, 719], "cd": [657, 660, 668, 694, 696, 697, 699, 700, 705, 706, 707], "setup": [657, 664, 668, 687, 690, 694, 696, 697, 699, 700, 711], "ilsvr2012": 657, "caff": 657, "berkeleyvis": 657, "caffe_ilsvrc12": 657, "xvzf": 657, "image_recognit": [657, 697, 721], "resnet50_torchvis": 657, "ptq_static": [657, 696], "resnet50_v1": [657, 660, 672], "dataset_loc": [657, 697, 705, 721], "label_path": 657, "quantiti": 657, "vec": 657, "frac": [657, 720], "sigma": 657, "var": 657, "happen": 657, "dispers": [657, 695], "v0": [657, 697, 720, 721], "cg": [657, 697, 721], "conv0": [657, 697, 721], "expens": [658, 672, 723], "mobil": [658, 672, 726], "produc": 658, "logit": 658, "softmax": 658, "kd": 658, "patient": 658, "compact": [658, 672, 678, 711], "agnost": 658, "resourc": [658, 699, 702, 723], "convolut": [658, 712], "ia": 658, "attach": [658, 672, 720], "shallow": 658, "deepest": 658, "deeper": 658, "10006": [658, 659], "student_output": [658, 659], "student_loss": [658, 659], "training_func_for_nc": [658, 659], "distil_loss_conf": 658, "accordingli": [658, 683, 720], "promis": [659, 672, 711], "huge": [659, 697, 711, 715], "heavi": 659, "light": 659, "booster": 659, "degrad": [659, 711, 723], "novel": [659, 675, 686, 692], "comb": 659, "distillation_criterion": [659, 672, 710], "q_conf": 659, "horovod": 660, "program": [660, 669, 675, 692], "enable_eager_execut": 660, "yaml_file_path": 660, "pre_process": 660, "simpli": [660, 674, 675, 677, 680, 692, 700], "evaluation_result": 660, "evaluation_time_cost": 660, "partit": [660, 711], "distributedsampl": 660, "train_sampl": 660, "train_dataset": [660, 714], "num_replica": 660, "rank": 660, "train_load": 660, "train_kwarg": 660, "adadelta": 660, "distributedoptim": 660, "named_paramet": 660, "broadcast_paramet": 660, "root_rank": 660, "broadcast_optimizer_st": 660, "set_epoch": 660, "batch_idx": 660, "nll_loss": 660, "log_interv": 660, "0f": 660, "tloss": 660, "6f": 660, "dry_run": 660, "test_func": 660, "host": [660, 700, 702, 705, 706, 707], "num_of_process": 660, "002": 660, "ssh": [660, 692], "prompt": 660, "readm": [660, 705], "exactli": [660, 676], "recognit": [660, 662, 711, 721], "resizecropimagenet": [660, 722], "realiz": [660, 709, 716, 719], "tow": 660, "node1": [660, 705, 706], "node2": [660, 705, 706], "TO": [660, 677, 697], "your_node1_nam": 660, "your_node2_nam": 660, "resnet50_fp32_pretrained_model": 660, "nc_resnet50_v1": 660, "resnet": [660, 726], "varieti": [661, 713, 723], "demonstr": [661, 675, 705, 706, 707, 721], "speedup": [661, 667, 714], "2x": [661, 667], "vnni": [661, 667, 713, 714], "exchang": 662, "hope": 662, "inc_model": [662, 674], "fp32_onnx_config": 662, "verifi": [662, 670], "vgg16": [662, 726], "mobilenet": [662, 719, 726], "rcnn": 662, "torchscript": [662, 715, 720], "unsupport": [662, 672, 711], "add_relu": 662, "conv1d_relu": 662, "conv2d_relu": 662, "group_norm": 662, "hardswish": 662, "instance_norm": 662, "layer_norm": 662, "leaky_relu": 662, "sigmoid": 662, "toolchain": [663, 712], "bare": 663, "metal": 663, "sudo": [663, 678], "apt": [663, 668, 678, 686], "python3": 663, "dev": [663, 685, 689], "distutil": 663, "libgl1": 663, "mesa": 663, "glx": 663, "libglib2": 663, "ln": 663, "sf": 663, "usr": 663, "incompat": 663, "88": [663, 719, 726], "80": [663, 715, 721, 726], "pyobject": 663, "reinstal": 663, "libgl": 663, "yum": [663, 668], "opencv": [663, 668, 686], "conda": [663, 668, 678, 686, 705, 706, 707, 718], "13": [663, 668, 694, 718, 720], "pend": [663, 701], "sqlalchemi": 663, "27": [663, 726], "alemb": 663, "forg": [663, 668], "quick": [664, 673, 711, 724, 725], "friendli": [664, 672, 712, 720, 724, 725], "dive": [664, 724], "purpos": [664, 673, 692, 694, 713, 714], "syntax": 664, "go": [664, 687, 690, 698, 713, 717, 722], "up1": 664, "up2": 664, "valid_mixed_precis": 664, "addn": 664, "grappler_optim": 664, "constfold": 664, "arithmet": 664, "debug_stripp": 664, "major": [666, 697, 714, 720], "concept": [666, 719, 724], "rather": [666, 717], "custom_metr": 666, "420": 667, "geomean": 667, "upload": [667, 687, 690], "click": [667, 675, 676, 683, 686, 692, 697, 712, 721], "qintegerop": [667, 714], "plan": 667, "oneapi": [668, 712, 724], "analyt": [668, 712, 724], "success": [668, 694], "11": [668, 671, 673, 694, 720, 723, 726], "frequent": 668, "pypi": [668, 687, 690], "nightli": 668, "headless": [668, 686], "fastai": 668, "esri": 668, "consolid": 668, "latest": [668, 712, 718], "eas": [668, 677, 712], "along": [668, 711, 717], "streamlin": [668, 699, 712], "scienc": 668, "websit": 668, "anaconda": [668, 699, 700], "suit": [668, 693, 721], "formerli": 668, "skylak": 668, "cascad": 668, "lake": [668, 673, 712], "cooper": [668, 673, 712], "ic": [668, 712], "sapphir": [668, 670], "rapid": [668, 670], "hbm": 668, "arctic": 668, "sound": 668, "pont": 668, "vecchio": 668, "cento": [668, 726], "ubuntu": 668, "22": [668, 726], "04": [668, 726], "maco": 668, "ventura": 668, "fortensorflow": 668, "forpytorch": 668, "12": [668, 694, 726], "tf_enable_onednn_opt": 668, "onednn": [668, 673, 714], "newer": 668, "subject": 669, "accompani": [669, 723], "wish": 669, "bibtex": 669, "author": 669, "feng": 669, "tian": 669, "hanwen": 669, "haihao": [669, 711], "shen": [669, 711], "suyu": 669, "chen": 669, "howpublish": 669, "year": 669, "logo": 669, "atom": 669, "phi": 669, "pentium": 669, "vtune": 669, "corpor": 669, "subsidiari": 669, "brand": 669, "claim": 669, "sq": [670, 720], "woq": 670, "4th": [670, 712, 714], "gen": [670, 673, 712, 714, 716], "codenam": [670, 673], "quickli": [670, 723, 724], "eleutherai": [670, 696, 720, 726], "6b": [670, 696, 720, 726], "facebook": [670, 698, 720, 726], "3b": [670, 720], "30b": [670, 720, 726], "llama": [670, 711, 712, 715, 717, 720, 726], "7b": [670, 720, 726], "13b": [670, 720, 726], "70b": [670, 726], "tiiuae": [670, 720, 726], "40b": 670, "soon": 670, "popularli": 671, "industri": [671, 712], "label_map": 671, "ap": 671, "curv": 671, "turn": [671, 686, 715], "target_boxes_num": 671, "str_label": 671, "int_label": 671, "inturn": 671, "cocomap": 671, "vocmap": 671, "categor": 671, "multiclass": 671, "multilabel": 671, "newmetr": 671, "reset": 671, "reflect": [671, 722], "new_metr": 671, "deliv": [672, 712, 718], "conveni": [672, 699], "upgrad": 672, "veri": [672, 693, 697, 714, 717, 723, 724], "comprehens": [672, 724], "resort": 672, "automodelforsequenceclassif": 672, "autotoken": 672, "val_dataset": [672, 714], "val_dataload": [672, 714], "worker": [672, 702, 705, 706, 707, 714], "ping_memori": [672, 714], "formul": 672, "effort": 672, "onnxrt_integ": [672, 725], "onnxrt_qlinear": [672, 725], "image_tensor": [672, 725], "post_training_dynamic_qu": [672, 713, 723], "1000": [672, 701, 725], "2000": 672, "sampling_s": [672, 725], "model_wis": [672, 725], "op_dict": 672, "op_wis": [672, 721, 725], "sigopt_api_token": [672, 719, 723], "sigopt_project_id": [672, 719, 723], "sigopt_experiment_nam": [672, 719, 723], "demo": 672, "600": 672, "training_arg": 672, "emul": [672, 714], "trainer": [672, 683], "briefli": [672, 720], "pruning_func": 672, "train_dataload": [672, 711, 714], "n_gpu": 672, "gradient_accumulation_step": 672, "clip_grad_norm_": 672, "max_grad_norm": 672, "start_epoch": [672, 713, 725], "end_epoch": [672, 713, 725], "newli": [672, 711], "on_after_optimizer_step": [672, 711], "layer3": [672, 711], "0004": 672, "randomresizedcrop": [672, 722], "totensor": [672, 722], "485": 672, "456": [672, 726], "406": [672, 726], "nepoch": 672, "cnt": 672, "loss_sum": 672, "iter_bar": 672, "desc": 672, "teacher_logit": 672, "train_fun": 672, "training_func": 672, "recent": [672, 673], "growth": [672, 673, 711], "significantli": [672, 673, 695, 697, 711, 723], "bandwidth": [672, 673, 717], "exit_polici": [672, 725], "determinist": 672, "meaning": [672, 710], "reli": [672, 720], "prune_conf": 672, "quantization_aware_training_conf": 672, "aforement": 672, "inset": 672, "p_conf": [672, 710], "ssd_mobilenet_v1": 672, "benchmarkconf": 672, "sixteen": 673, "launch": [673, 693, 698], "3rd": [673, 712, 714, 716], "boost": [673, 676, 692, 711, 712], "x86": 673, "avx512": [673, 714], "vcvtne2ps2bf16": 673, "vcvtneps2bf16": 673, "vdpbf16p": 673, "fbgemm": [673, 714], "tensorrtexecutionprovid": [673, 714], "cudaexecutionprovid": [673, 714], "dnnlexecutionprovid": [673, 714], "avx512_bf16": 673, "plu": 673, "resnet18": [673, 677, 726], "persist": 674, "brought": [674, 676, 683, 714], "tf2": 674, "h5": 674, "hybridblock": 674, "0000": 674, "saved_result": [674, 696, 717], "simplifi": [675, 686, 692, 711, 712], "acquir": 675, "analysi": [675, 692, 711, 719], "heurist": [675, 692], "great": 675, "autocast": 675, "my_model": 675, "no_grad": 675, "memory_format": 675, "112": 675, "plugin": [675, 693], "aw": [675, 683, 702, 712, 726], "sagemak": [675, 683], "neural_cod": [675, 677, 679, 680, 681, 683], "bench": 675, "superbench": 675, "enjoi": [676, 680, 683], "reload": [676, 693, 695, 698], "modern": [677, 717], "democrat": [677, 712], "programm": [677, 683, 692], "nano_bf16_channels_last": 677, "nano_bf16_ipex_channels_last": 677, "nano_bf16_ipex": 677, "nano_bf16": 677, "nano_fp32_channels_last": 677, "nano_fp32_ipex_channels_last": 677, "nano_fp32_ipex": 677, "nano_gpu_to_cpu": 677, "nano_int8": 677, "nano_jit_bf16_channels_last": 677, "nano_jit_bf16_ipex_channels_last": 677, "nano_jit_bf16_ipex": 677, "nano_jit_bf16": 677, "nano_jit_fp32_channels_last": 677, "nano_jit_fp32_ipex_channels_last": 677, "nano_jit_fp32_ipex": 677, "nano_jit_fp32": 677, "nano_onnxruntime_fp32": 677, "nano_onnxruntime_int8_qlinear": 677, "openvino": 677, "nano_openvino_fp32": 677, "nano_openvino_int8": 677, "bc": [678, 686], "conda_prefix": 678, "echo": 678, "tradit": [678, 711], "libjemalloc": 678, "libiomp5": 678, "home": 678, "lib": 678, "ld_preload": 678, "malloc_conf": 678, "oversize_threshold": 678, "background_thread": 678, "metadata_thp": 678, "dirty_decay_m": 678, "9000000000": 678, "muzzy_decay_m": 678, "kmp_affin": 678, "kmp_blocktim": 678, "dnnl_primitive_cache_capac": 678, "governor": 678, "scaling_governor": 678, "powersav": 678, "tee": 678, "pytorch_jit_script": [679, 682], "pytorch_channels_last": [679, 682], "run_bench": 679, "patch": [679, 692], "patch_path": 679, "your_patch_path": 679, "sweep": 679, "sweep_object": 679, "bench_config": 679, "bench_featur": 679, "sai": 680, "run_glu": [680, 681, 703, 706, 707], "requisit": 680, "task_nam": [680, 681, 703, 706, 707], "do_ev": [680, 681, 696, 703, 706, 707], "itself": [680, 711], "run_glue_optim": 680, "static_ipex": 680, "auto_qu": 681, "v4": [681, 703, 706, 707, 726], "albert": [681, 726], "sst2": 681, "alexnet": [681, 726], "pytorch_amp": 682, "optimize_for_infer": 682, "pytorch_jit_trac": 682, "pytorch_jit_script_ofi": 682, "pytorch_jit_trace_ofi": 682, "torchdynamo": 682, "pytorch_torchdynamo_jit_script": 682, "pytorch_torchdynamo_jit_trac": 682, "pytorch_torchdynamo_jit_script_ofi": 682, "pytorch_torchdynamo_jit_trace_ofi": 682, "pytorch_inc_bf16": 682, "pytorch_inc_static_quant_fx": 682, "pytorch_inc_static_quant_ipex": 682, "pytorch_inc_static_quant_ipex_xpu": 682, "pytorch_inc_dynamic_qu": 682, "pytorch_ipex_fp32": 682, "pytorch_ipex_bf16": 682, "pytorch_ipex_int8_static_qu": 682, "pytorch_ipex_int8_dynamic_qu": 682, "blade": 682, "disc": 682, "pytorch_aliblad": 682, "pytorch_lightning_bf16_cpu": 682, "tensorflow_amp": 682, "keras_amp": 682, "tensorflow_inc": 682, "keras_inc": 682, "onnx_inc_static_quant_qlinear": 682, "onnx_inc_static_quant_qdq": 682, "onnx_inc_dynamic_qu": 682, "optimum": [682, 683, 695, 717], "pytorch_inc_huggingface_optimum_stat": 682, "pytorch_inc_huggingface_optimum_dynam": 682, "intel_extension_for_transform": 682, "bigdl": [682, 683], "nano": [682, 683], "nano_": 682, "inc_auto": 682, "delight": 683, "announc": 683, "500": [683, 701, 726], "jupyt": [683, 685, 686, 689], "isa": 683, "adjust": [683, 714, 720], "delta": 683, "acc_delta": 683, "int8_acc": 683, "fp32_acc": 683, "ext": [685, 687, 689, 690, 691], "lab": [685, 686, 687, 689, 690], "nodej": [685, 689], "jlpm": [685, 689], "yarn": [685, 689], "npm": [685, 686, 689], "lieu": [685, 689], "labextens": [685, 686, 689], "typescript": [685, 689], "watch": [685, 689, 698], "immedi": [685, 689, 711], "refresh": [685, 689], "browser": [685, 689, 694, 698], "wait": [685, 689, 692, 702], "rebuilt": [685, 689], "easier": [685, 689, 692, 694, 712], "symlink": [685, 689], "down": 686, "finish": [686, 702], "blank": 686, "cell": 686, "gain": [686, 710, 712], "mkl": 686, "jemalloc": 686, "pip3": 686, "pyproject": [687, 690], "toml": [687, 690], "twine": [687, 690], "whl": [687, 690], "dist": [687, 690], "sdist": [687, 690], "bdist_wheel": [687, 690], "frontend": [687, 690, 700, 707], "login": [687, 690, 719], "cut": [687, 690], "admin_github_token": [687, 690], "pypi_token": [687, 690], "npm_token": [687, 690], "secret": [687, 690], "panel": [687, 690, 692], "draft": [687, 690], "changelog": [687, 690, 691], "pkg": [687, 690], "bot": [687, 690], "pick": [687, 690, 693], "feedstock": [687, 690], "hatch": 690, "notabl": 691, "daili": 692, "advantag": [692, 711, 713, 723], "remot": 692, "server": [692, 694, 697, 700, 705, 706, 707], "re": [692, 698, 717], "market": 692, "uninstal": 692, "fill": [692, 719, 722, 723], "upper": 692, "sidebar": 692, "hover": 692, "track": [692, 719], "argpars": 692, "pop": [692, 702], "diff": 692, "manifest": 693, "palett": 693, "registercommand": 693, "amodio": 693, "tsl": 693, "matcher": 693, "dbaeumer": 693, "eslint": [693, 698], "press": 693, "f5": 693, "ctrl": 693, "hello": 693, "world": 693, "breakpoint": 693, "consol": [693, 698], "relaunch": 693, "toolbar": 693, "node_modul": 693, "viewlet": 693, "dropdown": 693, "runner": [693, 698], "startup": 693, "bundl": 693, "neural_insight": [694, 696, 697], "tl": 694, "ui": 694, "5000": 694, "338174d13706855fc6924cec7b3a8ae8": 694, "listen": 694, "firewal": 694, "8080": 694, "cert": 694, "path_to_cert": 694, "crt": 694, "path_to_private_kei": 694, "encrypt": 694, "expos": 694, "forfeit": 694, "client": [694, 700, 707], "extern": 694, "threat": 694, "diagnost": 694, "skill": 694, "feel": [694, 698], "layoutlmv3": [695, 726], "seqev": 695, "sentencepiec": 695, "timm": 695, "fvcore": 695, "pillow": 695, "einop": 695, "textdist": 695, "setuptool": 695, "cli": 695, "hypjudi": 695, "finetun": [695, 711, 717, 726], "funsd": [695, 726], "calib_dataset": 695, "incdataset": 695, "eval_dataset": 695, "poor": [695, 721], "9049": 695, "2989": 695, "66": [695, 726], "9631": 695, "glob": 695, "panda": 695, "pd": 695, "set_opt": 695, "max_row": 695, "max_column": 695, "getmtim": 695, "activations_t": 695, "weights_tabl": [695, 696], "read_csv": 695, "nweight": 695, "descend": 695, "sorted_data": 695, "sort_valu": 695, "ascend": 695, "evid": 695, "tip": 695, "8981": 695, "7502": 695, "run_clm": 696, "wikitext": [696, 726], "dataset_config_nam": 696, "do_train": 696, "inspect_sav": 696, "inspect_result": 696, "quan": 696, "model_summari": 696, "incept": [697, 726], "v3": [697, 726], "inception_v3": [697, 721], "inceptionv3_fp32_pretrained_model": [697, 721], "bash": [697, 721], "prepare_dataset": 697, "sh": [697, 721], "raw_dir": 697, "img_raw": 697, "delet": [697, 711], "run_tun": 697, "nc_inception_v3": 697, "highest": [697, 703, 723], "satisfactori": 697, "webpag": 697, "spike": 697, "bottom": 697, "chart": [697, 714, 719, 721], "concentr": 697, "But": 697, "bigger": 697, "bootstrap": 698, "localhost": [698, 700, 705, 706], "3000": 698, "lint": 698, "interact": [698, 719], "correctli": 698, "hash": [698, 701], "readi": [698, 711], "aren": 698, "transit": 698, "webpack": 698, "babel": 698, "tweak": 698, "ever": 698, "curat": 698, "suitabl": 698, "middl": [698, 720], "shouldn": 698, "understand": [698, 714, 721, 724], "wouldn": 698, "couldn": 698, "troubleshoot": 698, "effortlessli": 699, "grpc": [699, 700, 704, 705, 706, 708], "queue": 699, "seamlessli": [699, 711, 723], "mpi": [699, 700, 723], "neural_solut": [699, 700, 705, 706, 707], "task_monitor_port": [700, 705, 706, 707], "22222": [700, 705, 706, 707], "result_monitor_port": [700, 705, 706, 707], "33333": [700, 705, 706, 707], "restful_api_port": [700, 705, 706, 707], "hostfil": [700, 702, 705, 706, 707], "grpc_api_port": [700, 705, 706, 707], "api_typ": [700, 705, 706, 707], "conda_env": [700, 705, 706, 707], "upload_path": [700, 705, 706, 707], "8000": [700, 705, 706, 707], "monitor": [700, 705, 706, 707], "3333": [700, 705, 706, 707], "2222": [700, 705, 706, 707], "ns_workspac": [700, 705, 706, 707], "hf_model": [700, 704, 706, 707], "curl": [700, 701, 705, 706], "task_id": [700, 705, 706, 707], "usernam": 700, "db": [700, 702], "serve_log": [700, 705, 706, 707], "frontend_grpc": 700, "task_log": 700, "task_bdf0bd1b2cc14bc19bce12d4f9b333c7": 700, "task_workspac": 700, "bdf0bd1b2cc14bc19bce12d4f9b333c7": 700, "aliv": 700, "properli": 700, "commonli": [700, 711], "hostnam": 700, "breakdown": 700, "ip": 700, "hous": 700, "host1": [700, 705, 706], "host2": [700, 705, 706], "query_id": 700, "oaa": 701, "host_ip": 701, "task_request": [701, 705, 706, 707], "tuning_info": [701, 705], "optimization_result": [701, 705], "result_path": [701, 705, 706], "closur": 701, "404": [701, 711, 726], "health": 701, "healthi": 701, "quantized_model": [701, 705, 706], "400": [701, 726], "alloc": 702, "incom": 702, "taskmonitor": 702, "cluster": [702, 705, 706, 723], "tasklaunch": 702, "resultmonitor": 702, "receiv": [702, 719], "p1": 702, "notif": 702, "p2": 702, "p3": 702, "mpirun": [702, 723], "perf": 702, "p4": 702, "four": [702, 721, 726], "classdiagram": 702, "taskdb": 702, "get_statu": 702, "update_statu": 702, "task_collect": 702, "append_task": 702, "get_all_pending_task": 702, "update_task_statu": 702, "task_db": 702, "wait_new_task": 702, "schedule_task": 702, "dispatch_task": 702, "launch_task": 702, "query_task_statu": 702, "node_list": 702, "reserve_resourc": 702, "get_node_statu": 702, "gcp": [702, 712], "script_url": [703, 705, 706, 707], "archiv": 703, "tf_example1": [704, 705, 706], "hf_models_grpc": [704, 707], "00173": 705, "01024": 705, "task_request_distribut": 705, "custom_models_optim": 705, "7602cd63d4c849e7a686a8165a77f69d": [705, 706], "151": [705, 726], "8617": 705, "17": [705, 726], "8213": [705, 726], "number_of_socket": [705, 706], "number_of_thread": [705, 706], "cdf419910f9b4d2a8320d0e420ac1d0a": 706, "optimized_result": 706, "58": [706, 726], "3162": 706, "6488": [706, 726], "06": [707, 725, 726], "34": [707, 726], "55": [707, 726], "d3e10a49326449fb9d0d62f2bfc1cb43": 707, "fastapi": 708, "multi_object": 709, "benefit": 710, "instanti": 710, "neuron": 711, "art": 711, "grown": 711, "unpreced": 711, "increasingli": 711, "crucial": 711, "stand": [711, 723], "shrink": 711, "contextu": 711, "scene": 711, "haven": 711, "color": [711, 715], "lowest": [711, 723], "emsp": 711, "downstream": 711, "prone": 711, "co": 711, "discourag": 711, "penal": 711, "parameter": 711, "lightweight": 711, "perceptron": 711, "mlp": 711, "valuabl": [711, 721], "basi": 711, "billion": 711, "dolli": [711, 720, 726], "mpt": [711, 720, 726], "lm": [711, 726], "lamini": [711, 720], "mention": [711, 717], "tend": 711, "exemplifi": 711, "complement": 711, "fortieth": 711, "miss": [711, 714], "pruner2": 711, "few": [711, 712, 720, 723], "lm_head": 711, "yourself": 711, "uncertain": 711, "auto_config": 711, "quit": 711, "straightforward": [711, 717, 720], "pruning_pattern": 711, "pruning_start": 711, "pruning_end": 711, "sparse_gpt": 711, "embed_out": 711, "card": 711, "hesit": 711, "causal": 711, "clm": 711, "sst": [711, 726], "25": [711, 726], "63": [711, 726], "24": [711, 723, 726], "35": [711, 726], "flan": 711, "t5": [711, 726], "english": 711, "romanian": 711, "381": 711, "yolov5": 711, "75": [711, 726], "2x1": [711, 726], "801": 711, "7895": 711, "signific": [711, 712, 715, 720], "reduct": [711, 715, 725], "namhoon": 711, "lee": 711, "thalaiyasingam": 711, "ajanthan": 711, "philip": 711, "torr": 711, "2019": 711, "zafrir": 711, "ofir": 711, "ariel": 711, "larei": 711, "boudoukh": 711, "mosh": 711, "wasserblat": 711, "2111": 711, "05754": 711, "2021": 711, "kwon": 711, "kim": 711, "mahonei": 711, "hassoun": 711, "keutzer": 711, "gholami": 711, "pp": 711, "24101": 711, "24116": 711, "frantar": [711, 717], "alistarh": 711, "medium": 712, "aug": 712, "juli": 712, "onnxcommunitymeetup2023": 712, "chatbot": 712, "june": 712, "msft": 712, "netflix": 712, "apr": 712, "mlperf": [712, 726], "5x": 712, "\u96c6\u6210\u82f1\u7279\u5c14": 712, "\u817e\u8baf\u4e91taco": 712, "kit\u4e3aai\u5e94\u7528\u5e26\u6765\u9ad8\u6548\u5f02\u6784\u52a0\u901f\u670d\u52a1": 712, "mar": 712, "heterogen": 712, "jan": 712, "busi": 712, "amx": 712, "journei": 712, "dec": 712, "mleffici": 712, "deepen": 712, "foundat": 712, "intellig": 712, "vmware": 712, "applianc": 712, "bitnami": 712, "nov": 712, "sota": 712, "twitter": 712, "linkedin": 712, "zone": 712, "land": 712, "pat": 712, "keynot": 712, "intelon": 712, "chines": 712, "purif": 712, "sacrif": 712, "jun": 712, "partner": 712, "feb": 712, "joint": 712, "bilibili": 712, "gestalt": 712, "ml": 712, "doubl": 712, "abound": 712, "lpot": [712, 718], "nextplatform": 712, "cern": 712, "gan": 712, "3dgan": 712, "iml": 712, "workshop": 712, "asplo": 712, "18": [712, 726], "highli": [712, 717], "intelcaff": 712, "aris": 713, "henc": 713, "onnxrt_qoper": 713, "quant_aware_train": 713, "weight_compress": [713, 725], "initial_spars": [713, 725], "prune_typ": [713, 725], "basic_magnitud": [713, 725], "update_frequ": 713, "prune_domain": 713, "tile_pattern_1x1": 713, "invent": 714, "cost": [714, 717], "theoret": [714, 717], "zeropoint": 714, "255": [714, 720], "overflow": 714, "unseen": 714, "peopl": 714, "mimic": 714, "fact": 714, "ultim": 714, "pain": 714, "lossi": 714, "philosophi": 714, "neither": 714, "nor": 714, "val_load": 714, "avg": 714, "themselv": 714, "dmlexecutionprovid": 714, "meanwhil": 715, "substanti": 715, "pose": 715, "challeng": 715, "greatli": [715, 717], "constrain": 715, "grei": 715, "blue": 715, "rectangl": 715, "w8a8": [715, 717], "10005": 715, "rtn_arg": [715, 717], "ouput_dir": 715, "fp32_model_path": 715, "int8_model_path": 715, "ON": 716, "forc": 716, "postposttrainingquantconfig": 716, "bf16wrapper": 716, "retrac": 716, "preval": 717, "grow": 717, "demand": 717, "trade": 717, "bottleneck": 717, "roughli": 717, "speak": 717, "capac": [717, 719], "flop": 717, "famou": 717, "approx": 717, "bmm": 717, "100x": 717, "excel": 717, "stai": [717, 720], "quantif": [717, 720], "think": 717, "intuit": [717, 720], "uniformli": 717, "qlora": 717, "invers": 717, "restor": 717, "protect": 717, "inspir": 717, "c_": 717, "normalfloat": 717, "e2m1": 717, "bnb": 717, "805": 717, "awq_arg": 717, "gptq_arg": 717, "mitig": 717, "date": 717, "sym_full_rang": 717, "qweight_config_path": 717, "gptq_config_path": 717, "gptq_config": 717, "use_full_length": 717, "compressed_model": 717, "omit": 717, "rtn_g32asym": 717, "gptq_g32asym": 717, "gptq_g32asym_disable_last_matmul": 717, "gptq_g128asym": 717, "awq_g32asym": 717, "xiao": [717, 720], "guangxuan": [717, 720], "2211": [717, 720], "10438": [717, 720], "wei": [717, 720], "xiui": [717, 720], "suppress": [717, 720], "2209": [717, 720], "13325": [717, 720], "lin": 717, "ji": 717, "00978": 717, "elia": 717, "dettmer": 717, "tim": 717, "2305": 717, "14314": 717, "site": 718, "sed": 718, "your_script": 718, "backbon": 719, "sigopt_experiment_id": 719, "nc": [719, 723], "suffici": 719, "ordinari": 719, "latenc": [719, 723], "8266": 719, "8372": 719, "2132": 719, "83": [719, 720, 726], "7495": 719, "8299": 719, "8294": 719, "85": [719, 720, 726], "0837": 719, "8291": 719, "4469": 719, "gigant": 720, "systemat": 720, "migrat": [720, 724], "difficulti": 720, "mathemat": 720, "allevi": 720, "coarsest": 720, "finer": [720, 723], "matric": 720, "similarli": 720, "finest": 720, "consumpt": 720, "suppos": 720, "6839": 720, "4741": 720, "7451": 720, "9301": 720, "1742": 720, "6835": 720, "q_min": 720, "q_max": 720, "q_x": 720, "clamp_": 720, "round_": 720, "w_q": 720, "00296431384049356": 720, "59": [720, 726], "172": [720, 726], "192": 720, "w_dq": 720, "2220": 720, "1510": 720, "2420": 720, "2570": 720, "0500": 720, "1890": 720, "mseloss": 720, "1983354538679123": 720, "6848": 720, "4743": 720, "7440": 720, "9308": 720, "1749": 720, "385297635664756e": 720, "07": [720, 725, 726], "quantize_per_channel": 720, "x_tmp": 720, "detach": 720, "keepdim": 720, "dequantize_per_channel": 720, "0029": [720, 726], "0036": 720, "162": [720, 726], "48": [720, 726], "72": [720, 726], "93": [720, 726], "207": 720, "139": [720, 726], "6837": 720, "4734": 720, "1751": 720, "6821": 720, "637690492221736e": 720, "6376e": 720, "3852e": 720, "cdot": 720, "quantize_per_tensor_absmax": 720, "n_bit": 720, "div_": 720, "0806": 720, "7589": 720, "6038": 720, "3815": 720, "5040": 720, "7174": 720, "5444": 720, "5826": 720, "7772": 720, "5555": 720, "3740": 720, "3253": 720, "0698": 720, "1381": 720, "5972": [720, 726], "0086": 720, "0737": 720, "8298": 720, "6883": 720, "2991": 720, "1601": 720, "6506": 720, "8246": 720, "3924": 720, "3845": 720, "8768": 720, "w_scale": 720, "x_q": 720, "x_scale": 720, "84": [720, 726], "120": 720, "0059755356051027775": 720, "89": [720, 726], "119": 720, "57": [720, 726], "006533813662827015": 720, "y_q": 720, "17509": 720, "7608": 720, "4055": 720, "16599": 720, "21020": 720, "10016": 720, "9860": 720, "22444": 720, "y_dq": 720, "6836": 720, "2970": 720, "1583": 720, "6481": 720, "8207": 720, "3911": 720, "3850": 720, "8763": 720, "though": 720, "simplic": 720, "fp1": 720, "fp2": 720, "subsect": [720, 725], "x1": [720, 723], "x2": [720, 723], "herebi": 720, "optdecoderlay": 720, "blockwis": 720, "overhead": 720, "hardtanh": 720, "t5norm": 720, "llamanorm": 720, "groupnorm": 720, "lambada": 720, "openai": [720, 726], "sweet": 720, "spot": 720, "bigscienc": [720, 726], "560m": 720, "354": 720, "3542": 720, "1b7": 720, "4634": 720, "4936": 720, "518": 720, "5185": 720, "7b1": [720, 726], "5764": [720, 726], "5977": 720, "bloomz": [720, 726], "3947": 720, "3930": 720, "4828": 720, "4906": 720, "5018": 720, "4980": 720, "5593": [720, 726], "5552": 720, "125m": 720, "379": 720, "3757": 720, "350m": 720, "4516": 720, "4533": 720, "5789": 720, "5742": 720, "6365": 720, "6404": 720, "6769": [720, 726], "6804": [720, 726], "6872": 720, "6814": 720, "7149": 720, "7128": 720, "66b": 720, "7398": 720, "7326": 720, "7361": [720, 726], "7357": 720, "7627": [720, 726], "7590": 720, "7759": [720, 726], "7840": 720, "65b": 720, "7908": 720, "7957": 720, "7392": [720, 726], "7335": [720, 726], "chat": [720, 726], "7058": [720, 726], "6994": 720, "7677": [720, 726], "7615": [720, 726], "6831": [720, 726], "mbzuai": 720, "124m": 720, "3804": 720, "3887": 720, "774m": 720, "5048": 720, "5057": 720, "5b": 720, "5443": [720, 726], "5436": 720, "mosaicml": [720, 726], "655": [720, 726], "6499": 720, "stabilityai": 720, "stablelm": 720, "4172": 720, "4149": 720, "togethercomput": 720, "redpajama": 720, "incit": 720, "6542": 720, "6735": 720, "6718": 720, "6740": [720, 726], "6569": 720, "6621": 720, "7143": 720, "7221": 720, "6895": 720, "6953": [720, 726], "databrick": [720, 726], "6866": [720, 726], "6297": 720, "6247": 720, "6437": [720, 726], "6392": 720, "7332": 720, "7632": 720, "asterisk": 720, "consider": 720, "arang": 720, "tolist": 720, "default_alpha": 720, "step_siz": 720, "shared_criterion": 720, "do_blockwis": 720, "jason": 720, "emerg": 720, "transact": 720, "yvinec": 720, "edouard": 720, "proceed": 720, "cvf": 720, "winter": 720, "instrument": 721, "writer": 721, "_pre_eval_hook": 721, "_post_eval_hook": 721, "submodul": 721, "whitelist": 721, "_recordingobserv": 721, "output_tensors_dict": 721, "current_it": 721, "get_tensor_valu": 721, "_observer_forward_hook": 721, "activation_post_process": 721, "_add_observer_": 721, "named_children": 721, "leaf": 721, "add_modul": 721, "register_forward_hook": 721, "dump_tim": 721, "summarywrit": 721, "_acc": 721, "tune_": 721, "add_graph": 721, "get_observer_dict": 721, "observer_dict": 721, "is_quant": 721, "add_histogram": 721, "shell": 721, "bind_al": 721, "logdir_spec": 721, "tune_0_acc0": 721, "tune_1": 721, "tune_1_acc0": 721, "79": [721, 726], "baseline_acc_0": 721, "776": 721, "tune_1_acc_0": 721, "095": 721, "runs_v3": 721, "run_tuning_dump_tensor": 721, "inceptionv3": 721, "run_quant": 721, "topologi": 721, "nc_inceptionv3": 721, "inceptionv3_dump_tensor": 721, "eightbit": 721, "disappear": 721, "centercrop": 722, "randomcrop": 722, "cropres": 722, "decodeimag": 722, "jpeg": 722, "encodejp": 722, "alignimagechannel": 722, "68": [722, 726], "116": 722, "78": [722, 726], "103": 722, "94": [722, 726], "017": 722, "bilinearimagenet": [722, 725], "topilimag": 722, "padding_mod": 722, "border": 722, "pixel": 722, "edg": 722, "colorjitt": 722, "bright": 722, "satur": 722, "hue": 722, "jitter": 722, "tondarrai": 722, "o1": 723, "human": 723, "aggress": 723, "classic": 723, "flowchart": 723, "htmllabel": 723, "td": 723, "classdef": 723, "itemstyl": 723, "cce5ff": 723, "stroke": 723, "99ccff": 723, "s1": 723, "s2": 723, "s3": 723, "s4": 723, "s5": 723, "s6": 723, "s7": 723, "nbsp": 723, "subgraphstyl": 723, "ffffff": 723, "attempt": 723, "post_training_auto_qu": 723, "increment": 723, "ii": 723, "spent": 723, "hawq_v2_loss": 723, "model_loss": 723, "black": 723, "compli": 723, "posterior": 723, "short": 723, "loglevel": 723, "endlessli": 723, "perspect": 723, "smbo": 723, "appl": 723, "surrog": 723, "densiti": 723, "parzen": 723, "greatest": 723, "hour": 723, "dai": 723, "next_tune_cfg": 723, "overridden": 723, "replic": 723, "replica": 723, "fed": 723, "synchron": 723, "number_of_process": 723, "run_cmd": 723, "abctunestrategi": 723, "familiar": 724, "notebook": 724, "introduct": 724, "organ": 725, "logic": 725, "mobilenet_v1": 725, "40": [725, 726], "beta_1": 725, "beta_2": 725, "epsilon": 725, "sparsecategoricalcrossentropi": 725, "sum_over_batch_s": 725, "from_logit": 725, "54": [725, 726], "19": [725, 726], "09": 726, "1x": 726, "platinum": 726, "8480": 726, "8ghz": 726, "56": 726, "ht": 726, "turbo": 726, "256gb": 726, "16x16gb": 726, "ddr5": 726, "4800": 726, "mt": 726, "bio": 726, "3a14": 726, "tel2p1": 726, "microcod": 726, "0x2b0001b0": 726, "gcc": 726, "20210514": 726, "red": 726, "hat": 726, "visit": 726, "1s4c14ins1bsthroughput": 726, "sec": 726, "74": 726, "2914": 726, "621": 726, "69x": 726, "76": 726, "23": 726, "46": 726, "2160": 726, "545": 726, "47": 726, "96x": 726, "resnet101": 726, "77": 726, "37": 726, "1508": 726, "428": 726, "53x": 726, "70": 726, "44": 726, "69": 726, "3290": 726, "1229": 726, "68x": 726, "38": 726, "73": 726, "2404": 726, "1048": 726, "49": 726, "29x": 726, "71": 726, "1669": 726, "33x": 726, "1073": 726, "245": 726, "38x": 726, "374": 726, "52": 726, "18x": 726, "96": 726, "5478": 726, "1756": 726, "12x": 726, "4133": 726, "1748": 726, "36x": 726, "1534": 726, "236": 726, "62": 726, "49x": 726, "vgg19": 726, "1377": 726, "197": 726, "resnetv2": 726, "39": 726, "1125": 726, "656": 726, "71x": 726, "709": 726, "367": 726, "00": 726, "93x": 726, "152": 726, "03": 726, "497": 726, "265": 726, "87x": 726, "densenet": 726, "121": 726, "557": 726, "67": 726, "61": 726, "22x": 726, "161": 726, "29": 726, "353": 726, "235": 726, "50x": 726, "169": 726, "65": 726, "41": 726, "435": 726, "385": 726, "13x": 726, "efficientnet": 726, "b0": 726, "786": 726, "723": 726, "09x": 726, "130": 726, "23x": 726, "1291": 726, "683": 726, "89x": 726, "61x": 726, "1295": 726, "453": 726, "85x": 726, "242": 726, "31x": 726, "cnn": 726, "80x": 726, "43": 726, "81x": 726, "166": 726, "07x": 726, "16x": 726, "26": 726, "173": 726, "yolov3": 726, "82": 726, "230": 726, "92": 726, "36": 726, "37x": 726, "58x": 726, "86": 726, "416": 726, "35x": 726, "88x": 726, "51": 726, "17x": 726, "75552": 726, "50803": 726, "1s56c1ins1bsthroughput": 726, "60": 726, "64x": 726, "1673": 726, "653": 726, "56x": 726, "1170": 726, "329": 726, "55x": 726, "977": 726, "335": 726, "91x": 726, "resnest50": 726, "81": 726, "10x": 726, "resnext101_32x8d": 726, "562": 726, "109": 726, "efficientnet_b0": 726, "696": 726, "667": 726, "04x": 726, "efficientnet_b3": 726, "508": 726, "397": 726, "28x": 726, "efficientnet_b7": 726, "234": 726, "149": 726, "57x": 726, "peleenet": 726, "858": 726, "588": 726, "46x": 726, "se_resnext50_32x4d": 726, "739": 726, "283": 726, "yolo": 726, "141": 726, "99x": 726, "174": 726, "camembert": 726, "395": 726, "171": 726, "30x": 726, "53": 726, "795": 726, "341": 726, "744": 726, "343": 726, "163": 726, "funnel": 726, "182": 726, "65x": 726, "399": 726, "21x": 726, "407": 726, "412": 726, "stsb": 726, "413": 726, "39x": 726, "409": 726, "75x": 726, "401": 726, "70x": 726, "76x": 726, "reform": 726, "crime": 726, "punish": 726, "446": 726, "398": 726, "lvwerra": 726, "pegasu": 726, "samsum": 726, "102": 726, "770": 726, "450": 726, "14x": 726, "whisper": 726, "25x": 726, "abeja": 726, "neox": 726, "japanes": 726, "90x": 726, "1646": 726, "657": 726, "1098": 726, "322": 726, "41x": 726, "568": 726, "19x": 726, "1383": 726, "761": 726, "82x": 726, "32x": 726, "5701": 726, "1593": 726, "2090": 726, "685": 726, "05x": 726, "resnext101_32x16d_wsl": 726, "556": 726, "01x": 726, "86x": 726, "558": 726, "11x": 726, "lambada_openai": 726, "hellaswag": 726, "winogrand": 726, "piqa": 726, "word_perplex": 726, "4954": 726, "6409": 726, "7541": 726, "6434": 726, "8816": 726, "gptqw4g128asym": 726, "679": 726, "4895": 726, "6433": 726, "7476": 726, "6399": 726, "9945": 726, "0999": 726, "gptqw4g32asym": 726, "6829": 726, "4923": 726, "6401": 726, "7486": 726, "6410": 726, "9963": 726, "0141": 726, "gptqw4g128sym": 726, "4907": 726, "6361": 726, "7443": 726, "6390": 726, "9932": 726, "1498": 726, "gptqw4g32sym": 726, "6911": 726, "4899": 726, "6448": 726, "7497": 726, "6439": 726, "0008": 726, "0927": 726, "5049": 726, "6543": 726, "7628": 726, "6497": 726, "2862": 726, "4984": 726, "6535": 726, "7568": 726, "6473": 726, "9962": 726, "4193": 726, "6885": 726, "4973": 726, "753": 726, "6455": 726, "9935": 726, "4607": 726, "decapoda": 726, "5642": 726, "6709": 726, "7835": 726, "6887": 726, "4202": 726, "7244": 726, "5603": 726, "6614": 726, "6824": 726, "9909": 726, "5881": 726, "5911": 726, "7009": 726, "7878": 726, "7106": 726, "212": 726, "7518": 726, "5843": 726, "6961": 726, "7911": 726, "4319": 726, "7572": 726, "5898": 726, "7056": 726, "7894": 726, "7105": 726, "9998": 726, "3429": 726, "7596": 726, "5841": 726, "6977": 726, "7905": 726, "7080": 726, "4916": 726, "6266": 726, "7277": 726, "8096": 726, "7350": 726, "2384": 726, "778": 726, "624": 726, "7269": 726, "8047": 726, "7334": 726, "9979": 726, "4237": 726, "7706": 726, "6239": 726, "7285": 726, "8058": 726, "7322": 726, "4697": 726, "7836": 726, "6195": 726, "7337": 726, "9983": 726, "5604": 726, "5732": 726, "648": 726, "7715": 726, "6746": 726, "7107": 726, "6982": 726, "5637": 726, "6527": 726, "7704": 726, "6713": 726, "9950": 726, "9702": 726, "5682": 726, "6575": 726, "7758": 726, "6742": 726, "9994": 726, "9317": 726, "567": 726, "6902": 726, "7353": 726, "6622": 726, "7829": 726, "6862": 726, "9942": 726, "9635": 726, "7246": 726, "5617": 726, "6756": 726, "7797": 726, "6854": 726, "9931": 726, "2799": 726, "7312": 726, "6059": 726, "7103": 726, "7077": 726, "2213": 726, "7273": 726, "6018": 726, "7088": 726, "7742": 726, "7030": 726, "9934": 726, "2538": 726, "083": 726, "7283": 726, "6053": 726, "7024": 726, "7764": 726, "7031": 726, "1889": 726, "727": 726, "5997": 726, "7018": 726, "9916": 726, "2504": 726, "7122": 726, "8984": 726, "5933": 726, "689": 726, "7851": 726, "7075": 726, "1556": 726, "448": 726, "7675": 726, "5934": 726, "7856": 726, "7111": 726, "9984": 726, "1514": 726, "927": 726, "7566": 726, "5899": 726, "7032": 726, "9953": 726, "1374": 726, "728": 726, "4628": 726, "6456": 726, "6029": 726, "6438": 726, "5799": 726, "4542": 726, "6004": 726, "9957": 726, "0626": 726, "4789": 726, "6134": 726, "7432": 726, "5525": 726, "4731": 726, "6504": 726, "7617": 726, "6094": 726, "7828": 726, "5098": 726, "7622": 726, "6505": 726, "3242": 726, "6878": 726, "5058": 726, "6393": 726, "7633": 726, "6491": 726, "9978": 726, "5514": 726, "6864": 726, "5084": 726, "6519": 726, "6509": 726, "0006": 726, "4728": 726, "6876": 726, "5045": 726, "6474": 726, "9952": 726, "6379": 726, "5282": 726, "614": 726, "7448": 726, "6312": 726, "6377": 726, "5228": 726, "5991": 726, "6261": 726, "9919": 726, "4096": 726, "neo": 726, "6224": 726, "4271": 726, "577": 726, "722": 726, "5871": 726, "9359": 726, "6123": 726, "4227": 726, "5738": 726, "7203": 726, "5823": 726, "9917": 726, "3377": 726, "615": 726, "4259": 726, "5714": 726, "7247": 726, "9951": 726, "2083": 726, "6154": 726, "4208": 726, "5777": 726, "7198": 726, "5834": 726, "9937": 726, "3121": 726, "20b": 726, "7233": 726, "5359": 726, "7753": 726, "195": 726, "7186": 726, "5328": 726, "7699": 726, "6687": 726, "9922": 726, "3463": 726, "7268": 726, "533": 726, "659": 726, "6726": 726, "2897": 726, "5718": 726, "6859": 726, "7927": 726, "6890": 726, "9324": 726, "7006": 726, "5655": 726, "6803": 726, "7965": 726, "6857": 726, "1515": 726, "5752": 726, "6748": 726, "7845": 726, "6724": 726, "5951": 726, "6472": 726, "5716": 726, "6685": 726, "784": 726, "6678": 726, "8539": 726, "6918": 726, "5819": 726, "678": 726, "6861": 726, "8863": 726, "5765": 726, "6827": 726, "7873": 726, "6832": 726, "9958": 726, "1451": 726, "storywrit": 726, "693": 726, "5477": 726, "663": 726, "6719": 726, "9125": 726, "6661": 726, "7813": 726, "6693": 726, "9961": 726, "1137": 726, "rw": 726, "6604": 726, "5419": 726, "6598": 726, "6594": 726, "7616": 726, "6484": 726, "5369": 726, "7807": 726, "6559": 726, "9947": 726, "9411": 726, "6571": 726, "5398": 726, "6582": 726, "6579": 726, "8809": 726, "652": 726, "535": 726, "7682": 726, "6532": 726, "9906": 726, "0048": 726, "5177": 726, "6669": 726, "7824": 726, "5053": 726, "6301": 726, "5142": 726, "6654": 726, "6483": 726, "9933": 726, "8146": 726, "517": 726, "9941": 726, "1566": 726, "724": 726, "1567": 726, "716": 726, "1414": 726, "718": 726, "97x": 726, "1459": 726, "721": 726, "02x": 726, "1582": 726, "752": 726, "7139": 726, "4289": 726, "66x": 726, "4080": 726, "7236": 726, "4299": 726, "6842": 726, "4496": 726, "52x": 726, "591": 726, "178": 726, "183": 726, "590": 726, "179": 726, "42x": 726, "5703": 726, "2578": 726, "5610": 726, "2603": 726, "shufflenet": 726, "6689": 726, "3690": 726, "5692": 726, "3758": 726, "51x": 726, "googlenet": 726, "1792": 726, "1111": 726, "1821": 726, "1104": 726, "squeezenet": 726, "9472": 726, "5582": 726, "9861": 726, "5566": 726, "77x": 726, "caffenet": 726, "3348": 726, "1141": 726, "3509": 726, "1142": 726, "2426": 726, "987": 726, "2208": 726, "1016": 726, "zfnet": 726, "930": 726, "532": 726, "919": 726, "417": 726, "1880": 726, "1159": 726, "62x": 726, "1798": 726, "1151": 726, "2890": 726, "1380": 726, "2548": 726, "1362": 726, "507": 726, "94x": 726, "1286": 726, "904": 726, "1121": 726, "856": 726, "829": 726, "1044": 726, "790": 726, "849": 726, "627": 726, "79x": 726, "yolov4": 726, "duc": 726, "tini": 726, "1119": 726, "ultra": 726, "8537": 726, "1934": 726, "emot": 726, "ferplu": 726, "3568": 726, "arcfac": 726, "494": 726, "244": 726, "226": 726, "392": 726, "223": 726, "integerop": 726, "473": 726, "548": 726, "964": 726, "540": 726, "394": 726, "602": 726, "487": 726, "222": 726, "20x": 726, "189": 726, "146": 726, "125": 726, "bidaf": 726, "2757": 726, "2277": 726, "gpt2": 726, "360": 726, "213": 726, "490": 726, "304": 726, "214": 726, "347": 726, "272": 726, "216": 726, "26x": 726, "489": 726, "27x": 726, "l12": 726, "h384": 726, "1054": 726, "585": 726, "1072": 726, "890": 726, "746": 726, "268": 726, "211": 726, "l6": 726, "1958": 726, "1130": 726, "73x": 726, "electra": 726, "discrimin": 726, "1797": 726, "1077": 726, "67x": 726, "1930": 726, "1139": 726, "mini": 726, "5510": 726, "3334": 726, "5627": 726, "3365": 726, "108": 726, "110": 726, "bart": 726, "15x": 726, "deberta": 726, "168": 726, "145": 726, "spanbert": 726, "63x": 726, "multilingu": 726, "113": 726, "159": 726, "40x": 726, "distilgpt2": 726, "layoutlm": 726, "layoutlmv2": 726, "codebert": 726, "47x": 726, "fcn": 726, "perplex": 726, "2788": 726, "7002": 726, "4124": 726, "9921": 726, "3950": 726, "5711": 726, "9892": 726, "9163": 726, "7240": 726, "9902": 726, "0438": 726, "7634": 726, "1186": 726, "9944": 726, "1276": 726, "7543": 726, "6181": 726, "rtnw4g32asym": 726, "6496": 726, "9967": 726, "7964": 726, "6612": 726, "rtnw4g32sym": 726, "7941": 726, "7243": 726, "9971": 726, "taskdataset": 726, "accuracyspars": 726, "ratiospars": 726, "commentsbalancedor": 726, "unbalanc": 726, "answeringsquad": 726, "87f1": 726, "momentumunbalanc": 726, "momentumbalanc": 726, "90f1": 726, "59f1": 726, "23f1": 726, "classificationmrpc": 726, "52f1": 726, "26f1": 726, "classificationsst": 726, "61accuraci": 726, "recognitionimagenet": 726, "95top1": 726, "v5s6": 726, "detectioncoco": 726, "ap0": 726, "6ap0": 726, "393": 726, "584": 726, "34f1": 726, "lassounbalanc": 726, "classificationmnli": 726, "mm": 726, "allbalanc": 726, "32accuraci": 726, "sensitivitybalanc": 726, "classificationqqp": 726, "classificationqnli": 726, "54accuraci": 726, "em": 726, "mobilenetv2": 726, "wideresnet40": 726, "9522": 726, "8178": 726, "0213": 726, "8235": 726, "027": 726, "5494": 726, "7153": 726, "5540": 726, "0046": 726, "5523": 726, "vgg": 726, "bn": 726, "7022": 726, "7415": 726, "7025": 726, "0003": 726, "6739": 726, "7399": 726, "6845": 726, "0106": 726, "blendcnn": 726, "7034": 726, "8382": 726, "bilstm": 726, "8314": 726, "9403": 726, "9048": 726, "0734": 726, "7323": 726, "8256": 726, "8084": 726, "8814": 726, "7442": 726, "8371": 726, "0119": 726, "0115": 726, "tinybert": 726, "8018": 726, "8044": 726, "8363": 726, "8411": 726, "8025": 726, "8074": 726, "0007": 726, "0030": 726, "8626": 726, "9091": 726, "8782": 726, "8684": 726, "8259": 726, "0058": 726, "distilroberta": 726, "6057": 726, "6187": 726, "0130": 726, "c6i": 726, "2xlarg": 726, "c6a": 726, "c6g": 726, "a100cuda": 726, "executionprovid": 726}, "objects": {"": [[0, 0, 0, "-", "block_mask"], [363, 0, 0, "-", "neural_compressor"]], "neural_compressor": [[2, 0, 0, "-", "adaptor"], [174, 0, 0, "-", "algorithm"], [177, 0, 0, "-", "benchmark"], [180, 0, 0, "-", "common"], [195, 0, 0, "-", "compression"], [228, 0, 0, "-", "conf"], [230, 0, 0, "-", "config"], [231, 0, 0, "-", "contrib"], [256, 0, 0, "-", "data"], [310, 0, 0, "-", "experimental"], [370, 0, 0, "-", "metric"], [372, 0, 0, "-", "mix_precision"], [374, 0, 0, "-", "model"], [382, 0, 0, "-", "objective"], [392, 0, 0, "-", "onnxrt"], [402, 0, 0, "-", "profiling"], [424, 0, 0, "-", "quantization"], [432, 0, 0, "-", "strategy"], [444, 0, 0, "-", "template"], [453, 0, 0, "-", "tensorflow"], [602, 0, 0, "-", "torch"], [613, 0, 0, "-", "training"], [617, 0, 0, "-", "utils"], [626, 0, 0, "-", "version"]], "neural_compressor.adaptor": [[1, 0, 0, "-", "adaptor"], [3, 0, 0, "-", "keras"], [7, 0, 0, "-", "keras_utils"], [11, 0, 0, "-", "mxnet"], [12, 0, 0, "-", "mxnet_utils"], [14, 0, 0, "-", "onnxrt"], [17, 0, 0, "-", "ox_utils"], [45, 0, 0, "-", "pytorch"], [46, 0, 0, "-", "query"], [47, 0, 0, "-", "tensorflow"], [111, 0, 0, "-", "tf_utils"], [158, 0, 0, "-", "torch_utils"]], "neural_compressor.adaptor.adaptor": [[1, 1, 1, "", "Adaptor"], [1, 2, 1, "", "adaptor_registry"]], "neural_compressor.adaptor.keras": [[3, 1, 1, "", "KerasAdaptor"]], "neural_compressor.adaptor.keras_utils": [[4, 0, 0, "-", "conv2d"], [5, 0, 0, "-", "dense"], [6, 0, 0, "-", "depthwise_conv2d"], [8, 0, 0, "-", "pool2d"], [9, 0, 0, "-", "quantizer"], [10, 0, 0, "-", "separable_conv2d"]], "neural_compressor.adaptor.mxnet": [[11, 1, 1, "", "MXNetQuery"], [11, 1, 1, "", "MxNetAdaptor"]], "neural_compressor.adaptor.mxnet_utils": [[13, 0, 0, "-", "util"]], "neural_compressor.adaptor.mxnet_utils.util": [[13, 1, 1, "", "CalibCollector"], [13, 1, 1, "", "CalibData"], [13, 1, 1, "", "CollectorBase"], [13, 1, 1, "", "DataIterLoader"], [13, 1, 1, "", "DataLoaderWrap"], [13, 1, 1, "", "NameCollector"], [13, 1, 1, "", "OpType"], [13, 1, 1, "", "TensorCollector"], [13, 2, 1, "", "amp_convert"], [13, 2, 1, "", "calib_model"], [13, 2, 1, "", "check_mx_version"], [13, 2, 1, "", "combine_capabilities"], [13, 2, 1, "", "create_data_example"], [13, 2, 1, "", "distribute_calib_tensors"], [13, 2, 1, "", "ensure_list"], [13, 2, 1, "", "fuse"], [13, 2, 1, "", "get_framework_name"], [13, 2, 1, "", "is_model_quantized"], [13, 2, 1, "", "isiterable"], [13, 2, 1, "", "make_module"], [13, 2, 1, "", "make_nc_model"], [13, 2, 1, "", "make_symbol_block"], [13, 2, 1, "", "ndarray_to_device"], [13, 2, 1, "", "parse_tune_config"], [13, 2, 1, "", "prepare_dataloader"], [13, 2, 1, "", "prepare_model"], [13, 2, 1, "", "prepare_model_data"], [13, 2, 1, "", "quantize_sym_model"], [13, 2, 1, "", "query_quantizable_nodes"], [13, 2, 1, "", "run_forward"]], "neural_compressor.adaptor.onnxrt": [[14, 1, 1, "", "ONNXRTQuery"], [14, 1, 1, "", "ONNXRT_IntegerOpsAdaptor"], [14, 1, 1, "", "ONNXRT_QDQAdaptor"], [14, 1, 1, "", "ONNXRT_QLinearOpsAdaptor"], [14, 1, 1, "", "ONNXRT_WeightOnlyAdaptor"], [14, 1, 1, "", "ONNXRUNTIMEAdaptor"]], "neural_compressor.adaptor.ox_utils": [[15, 0, 0, "-", "calibration"], [16, 0, 0, "-", "calibrator"], [29, 0, 0, "-", "operators"], [41, 0, 0, "-", "quantizer"], [42, 0, 0, "-", "smooth_quant"], [43, 0, 0, "-", "util"], [44, 0, 0, "-", "weight_only"]], "neural_compressor.adaptor.ox_utils.calibration": [[15, 1, 1, "", "ONNXRTAugment"]], "neural_compressor.adaptor.ox_utils.calibrator": [[16, 1, 1, "", "CalibratorBase"], [16, 1, 1, "", "HistogramCollector"], [16, 1, 1, "", "KLCalibrator"], [16, 1, 1, "", "MinMaxCalibrator"], [16, 1, 1, "", "PercentileCalibrator"], [16, 2, 1, "", "calib_registry"], [16, 2, 1, "", "smooth_distribution"]], "neural_compressor.adaptor.ox_utils.operators": [[18, 0, 0, "-", "activation"], [19, 0, 0, "-", "argmax"], [20, 0, 0, "-", "attention"], [21, 0, 0, "-", "binary_op"], [22, 0, 0, "-", "concat"], [23, 0, 0, "-", "conv"], [24, 0, 0, "-", "direct_q8"], [25, 0, 0, "-", "embed_layernorm"], [26, 0, 0, "-", "gather"], [27, 0, 0, "-", "gavgpool"], [28, 0, 0, "-", "gemm"], [30, 0, 0, "-", "lstm"], [31, 0, 0, "-", "matmul"], [32, 0, 0, "-", "maxpool"], [33, 0, 0, "-", "norm"], [34, 0, 0, "-", "ops"], [35, 0, 0, "-", "pad"], [36, 0, 0, "-", "pooling"], [37, 0, 0, "-", "reduce"], [38, 0, 0, "-", "resize"], [39, 0, 0, "-", "split"], [40, 0, 0, "-", "unary_op"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[18, 1, 1, "", "ActivationOperator"], [18, 1, 1, "", "Float16ActivationOperator"], [18, 1, 1, "", "QActivationOperator"], [18, 1, 1, "", "RemovableActivationOperator"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[19, 1, 1, "", "ArgMaxOperator"], [19, 1, 1, "", "QArgMaxOperator"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[20, 1, 1, "", "AttentionOperator"], [20, 1, 1, "", "QAttentionOperator"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[21, 1, 1, "", "BinaryDirect8BitOperator"], [21, 1, 1, "", "BinaryOperator"], [21, 1, 1, "", "Float16BinaryOperator"], [21, 1, 1, "", "QBinaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[22, 1, 1, "", "ConcatOperator"], [22, 1, 1, "", "QConcatOperator"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[23, 1, 1, "", "ConvOperator"], [23, 1, 1, "", "QConvOperator"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[24, 1, 1, "", "Direct8BitOperator"], [24, 1, 1, "", "QDirectOperator"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[25, 1, 1, "", "EmbedLayerNormalizationOperator"], [25, 1, 1, "", "QEmbedLayerNormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[26, 1, 1, "", "GatherOperator"], [26, 1, 1, "", "QGatherOperator"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[27, 1, 1, "", "GlobalAveragePoolOperator"], [27, 1, 1, "", "QGlobalAveragePoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[28, 1, 1, "", "GemmOperator"], [28, 1, 1, "", "QGemmOperator"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[30, 1, 1, "", "LSTMOperator"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[31, 1, 1, "", "FusedMatMulOperator"], [31, 1, 1, "", "MatMulOperator"], [31, 1, 1, "", "QMatMulOperator"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[32, 1, 1, "", "MaxPoolOperator"], [32, 1, 1, "", "QMaxPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.norm": [[33, 1, 1, "", "BatchNormalizationOperator"], [33, 1, 1, "", "NormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[34, 1, 1, "", "Operator"], [34, 1, 1, "", "QOperator"], [34, 2, 1, "", "op_registry"], [34, 2, 1, "", "qop_registry"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[35, 1, 1, "", "PadOperator"], [35, 1, 1, "", "QPadOperator"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[36, 1, 1, "", "PoolOperator"], [36, 1, 1, "", "QPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.reduce": [[37, 1, 1, "", "ReduceMinMaxOperator"], [37, 1, 1, "", "ReduceOperator"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[38, 1, 1, "", "QResizeOperator"], [38, 1, 1, "", "ResizeOperator"]], "neural_compressor.adaptor.ox_utils.operators.split": [[39, 1, 1, "", "QSplitOperator"], [39, 1, 1, "", "SplitOperator"]], "neural_compressor.adaptor.ox_utils.operators.unary_op": [[40, 1, 1, "", "UnaryDirect8BitOperator"], [40, 1, 1, "", "UnaryOperator"]], "neural_compressor.adaptor.ox_utils.quantizer": [[41, 1, 1, "", "Quantizer"]], "neural_compressor.adaptor.ox_utils.smooth_quant": [[42, 1, 1, "", "ORTSmoothQuant"], [42, 2, 1, "", "get_quant_dequant_output"], [42, 2, 1, "", "make_sub_graph"], [42, 2, 1, "", "quant_dequant_data"]], "neural_compressor.adaptor.ox_utils.util": [[43, 1, 1, "", "QuantFormat"], [43, 1, 1, "", "QuantType"], [43, 1, 1, "", "QuantizationMode"], [43, 1, 1, "", "QuantizedInitializer"], [43, 1, 1, "", "QuantizedValue"], [43, 1, 1, "", "QuantizedValueType"], [43, 1, 1, "", "ValueInfo"], [43, 2, 1, "", "attribute_to_kwarg"], [43, 2, 1, "", "calculate_scale_zp"], [43, 2, 1, "", "cast_tensor"], [43, 2, 1, "", "collate_preds"], [43, 2, 1, "", "dequantize_data"], [43, 2, 1, "", "dequantize_data_with_scale_zero"], [43, 2, 1, "", "dtype_to_name"], [43, 2, 1, "", "find_by_name"], [43, 2, 1, "", "float_to_bfloat16"], [43, 2, 1, "", "float_to_float16"], [43, 2, 1, "", "get_node_original_name"], [43, 2, 1, "", "infer_shapes"], [43, 2, 1, "", "is_B_transposed"], [43, 2, 1, "", "make_dquant_node"], [43, 2, 1, "", "make_quant_node"], [43, 2, 1, "", "quantize_data"], [43, 2, 1, "", "quantize_data_per_channel"], [43, 2, 1, "", "quantize_data_with_scale_zero"], [43, 2, 1, "", "quantize_nparray"], [43, 2, 1, "", "remove_init_from_model_input"], [43, 2, 1, "", "simple_progress_bar"], [43, 2, 1, "", "split_shared_bias"], [43, 2, 1, "", "to_numpy"], [43, 2, 1, "", "trt_env_setup"]], "neural_compressor.adaptor.ox_utils.weight_only": [[44, 2, 1, "", "apply_awq_clip"], [44, 2, 1, "", "apply_awq_scale"], [44, 2, 1, "", "awq_quantize"], [44, 2, 1, "", "get_blob_size"], [44, 2, 1, "", "get_weight_scale"], [44, 2, 1, "", "gptq"], [44, 2, 1, "", "gptq_quantize"], [44, 2, 1, "", "make_matmul_weight_only_node"], [44, 2, 1, "", "pad_tensor"], [44, 2, 1, "", "prepare_inputs"], [44, 2, 1, "", "qdq_tensor"], [44, 2, 1, "", "quant_tensor"], [44, 2, 1, "", "rtn_quantize"]], "neural_compressor.adaptor.pytorch": [[45, 1, 1, "", "PyTorchAdaptor"], [45, 1, 1, "", "PyTorchWeightOnlyAdaptor"], [45, 1, 1, "", "PyTorch_FXAdaptor"], [45, 1, 1, "", "PyTorch_IPEXAdaptor"], [45, 1, 1, "", "TemplateAdaptor"], [45, 2, 1, "", "get_ops_recursively"]], "neural_compressor.adaptor.query": [[46, 1, 1, "", "QueryBackendCapability"]], "neural_compressor.adaptor.tensorflow": [[47, 1, 1, "", "TensorFlowAdaptor"], [47, 1, 1, "", "TensorflowQuery"], [47, 1, 1, "", "Tensorflow_ITEXAdaptor"]], "neural_compressor.adaptor.tf_utils": [[48, 0, 0, "-", "graph_converter"], [49, 0, 0, "-", "graph_converter_without_calib"], [87, 0, 0, "-", "graph_rewriter"], [110, 0, 0, "-", "graph_util"], [112, 0, 0, "-", "quantize_graph"], [139, 0, 0, "-", "quantize_graph_common"], [140, 0, 0, "-", "smooth_quant_calibration"], [141, 0, 0, "-", "smooth_quant_scaler"], [142, 0, 0, "-", "tf2onnx_converter"], [145, 0, 0, "-", "transform_graph"], [148, 0, 0, "-", "util"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[48, 1, 1, "", "GraphConverter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[49, 1, 1, "", "GraphConverterWithoutCalib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[52, 0, 0, "-", "bf16"], [76, 0, 0, "-", "generic"], [86, 0, 0, "-", "graph_base"], [95, 0, 0, "-", "int8"], [101, 0, 0, "-", "onnx"], [106, 0, 0, "-", "qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[50, 0, 0, "-", "bf16_convert"], [51, 0, 0, "-", "dequantize_cast_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[50, 1, 1, "", "BF16Convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer": [[51, 1, 1, "", "DequantizeCastOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[53, 0, 0, "-", "convert_add_to_biasadd"], [54, 0, 0, "-", "convert_layout"], [55, 0, 0, "-", "convert_leakyrelu"], [56, 0, 0, "-", "convert_nan_to_random"], [57, 0, 0, "-", "convert_placeholder_to_const"], [58, 0, 0, "-", "dilated_contraction"], [59, 0, 0, "-", "dummy_biasadd"], [60, 0, 0, "-", "expanddims_optimizer"], [61, 0, 0, "-", "fetch_weight_from_reshape"], [62, 0, 0, "-", "fold_batch_norm"], [63, 0, 0, "-", "fold_constant"], [64, 0, 0, "-", "fuse_biasadd_add"], [65, 0, 0, "-", "fuse_column_wise_mul"], [66, 0, 0, "-", "fuse_conv_with_math"], [67, 0, 0, "-", "fuse_decomposed_bn"], [68, 0, 0, "-", "fuse_decomposed_in"], [69, 0, 0, "-", "fuse_gelu"], [70, 0, 0, "-", "fuse_layer_norm"], [71, 0, 0, "-", "fuse_pad_with_conv"], [72, 0, 0, "-", "fuse_pad_with_fp32_conv"], [73, 0, 0, "-", "fuse_reshape_transpose"], [74, 0, 0, "-", "graph_cse_optimizer"], [75, 0, 0, "-", "grappler_pass"], [77, 0, 0, "-", "insert_print_node"], [78, 0, 0, "-", "move_squeeze_after_relu"], [79, 0, 0, "-", "pre_optimize"], [80, 0, 0, "-", "remove_training_nodes"], [81, 0, 0, "-", "rename_batch_norm"], [82, 0, 0, "-", "split_shared_input"], [83, 0, 0, "-", "strip_equivalent_nodes"], [84, 0, 0, "-", "strip_unused_nodes"], [85, 0, 0, "-", "switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[53, 1, 1, "", "ConvertAddToBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[54, 1, 1, "", "ConvertLayoutOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[55, 1, 1, "", "ConvertLeakyReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[56, 1, 1, "", "ConvertNanToRandom"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[57, 1, 1, "", "ConvertPlaceholderToConst"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[58, 1, 1, "", "DilatedContraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[59, 1, 1, "", "InjectDummyBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[60, 1, 1, "", "ExpandDimsOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[61, 1, 1, "", "FetchWeightFromReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[62, 1, 1, "", "FoldBatchNormNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[63, 1, 1, "", "GraphFoldConstantOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[64, 1, 1, "", "FuseBiasAddAndAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[65, 1, 1, "", "FuseColumnWiseMulOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[66, 1, 1, "", "FuseConvWithMathOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[67, 1, 1, "", "FuseDecomposedBNOptimizer"], [67, 2, 1, "", "bypass_reshape"], [67, 2, 1, "", "get_const_dim_count"], [67, 2, 1, "", "node_from_map"], [67, 2, 1, "", "node_name_from_input"], [67, 2, 1, "", "valid_reshape_inputs"], [67, 2, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[68, 1, 1, "", "FuseDecomposedINOptimizer"], [68, 2, 1, "", "bypass_reshape"], [68, 2, 1, "", "get_const_dim_count"], [68, 2, 1, "", "node_from_map"], [68, 2, 1, "", "node_name_from_input"], [68, 2, 1, "", "valid_reshape_inputs"], [68, 2, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[69, 1, 1, "", "FuseGeluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[70, 1, 1, "", "FuseLayerNormOptimizer"], [70, 2, 1, "", "node_from_map"], [70, 2, 1, "", "node_name_from_input"], [70, 2, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[71, 1, 1, "", "FusePadWithConv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[72, 1, 1, "", "FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[73, 1, 1, "", "FuseTransposeReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[74, 1, 1, "", "GraphCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[75, 1, 1, "", "GrapplerOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[77, 1, 1, "", "InsertPrintMinMaxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[78, 1, 1, "", "MoveSqueezeAfterReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[79, 1, 1, "", "PreOptimization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[80, 1, 1, "", "RemoveTrainingNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[81, 1, 1, "", "RenameBatchNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[82, 1, 1, "", "SplitSharedInputOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[83, 1, 1, "", "StripEquivalentNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[84, 1, 1, "", "StripUnusedNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[85, 1, 1, "", "SwitchOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[86, 1, 1, "", "GraphRewriterBase"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[88, 0, 0, "-", "freeze_fake_quant"], [89, 0, 0, "-", "freeze_value"], [90, 0, 0, "-", "freeze_value_without_calib"], [91, 0, 0, "-", "fuse_conv_redundant_dequantize"], [92, 0, 0, "-", "fuse_conv_requantize"], [93, 0, 0, "-", "fuse_matmul_redundant_dequantize"], [94, 0, 0, "-", "fuse_matmul_requantize"], [96, 0, 0, "-", "meta_op_optimizer"], [97, 0, 0, "-", "post_hostconst_converter"], [98, 0, 0, "-", "post_quantized_op_cse"], [99, 0, 0, "-", "rnn_convert"], [100, 0, 0, "-", "scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[88, 1, 1, "", "FreezeFakeQuantOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[89, 1, 1, "", "FreezeValueTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[90, 1, 1, "", "FreezeValueWithoutCalibTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[91, 1, 1, "", "FuseConvRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[92, 1, 1, "", "FuseConvRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[93, 1, 1, "", "FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[94, 1, 1, "", "FuseMatMulRequantizeDequantizeNewAPITransformer"], [94, 1, 1, "", "FuseMatMulRequantizeDequantizeTransformer"], [94, 1, 1, "", "FuseMatMulRequantizeNewAPITransformer"], [94, 1, 1, "", "FuseMatMulRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[96, 1, 1, "", "MetaInfoChangingMemOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[97, 1, 1, "", "PostHostConstConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[98, 1, 1, "", "PostCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[99, 1, 1, "", "QuantizedRNNConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[100, 1, 1, "", "ScaleProPagationTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[102, 0, 0, "-", "onnx_graph"], [103, 0, 0, "-", "onnx_node"], [104, 0, 0, "-", "onnx_schema"], [105, 0, 0, "-", "tf2onnx_utils"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[102, 1, 1, "", "OnnxGraph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[103, 1, 1, "", "OnnxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[104, 1, 1, "", "OnnxOpSchema"], [104, 2, 1, "", "get_max_supported_opset_version"], [104, 2, 1, "", "get_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[105, 1, 1, "", "SeqType"], [105, 2, 1, "", "add_port_to_name"], [105, 2, 1, "", "are_shapes_equal"], [105, 2, 1, "", "assert_error"], [105, 2, 1, "", "compute_const_folding_using_tf"], [105, 2, 1, "", "convert_tensorflow_tensor_to_onnx"], [105, 2, 1, "", "find_opset"], [105, 2, 1, "", "get_index_from_strided_slice_of_shape"], [105, 2, 1, "", "get_subgraphs_from_onnx"], [105, 2, 1, "", "get_tensorflow_node_attr"], [105, 2, 1, "", "get_tensorflow_node_shape_attr"], [105, 2, 1, "", "get_tensorflow_tensor_data"], [105, 2, 1, "", "get_tensorflow_tensor_shape"], [105, 2, 1, "", "infer_onnx_shape_dtype"], [105, 2, 1, "", "initialize_name_counter"], [105, 2, 1, "", "is_list_or_tuple"], [105, 2, 1, "", "is_onnx_domain"], [105, 2, 1, "", "make_onnx_inputs_outputs"], [105, 2, 1, "", "make_onnx_shape"], [105, 2, 1, "", "map_numpy_to_onnx_dtype"], [105, 2, 1, "", "map_onnx_to_numpy_type"], [105, 2, 1, "", "map_tensorflow_dtype"], [105, 2, 1, "", "read_tensorflow_node_attrs"], [105, 2, 1, "", "save_protobuf"], [105, 2, 1, "", "set_name"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[107, 0, 0, "-", "insert_qdq_pattern"], [108, 0, 0, "-", "merge_duplicated_qdq"], [109, 0, 0, "-", "share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[107, 1, 1, "", "GenerateGraphWithQDQPattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[108, 1, 1, "", "MergeDuplicatedQDQOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[109, 1, 1, "", "ShareQDQForItexYPatternOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_util": [[110, 1, 1, "", "GraphAnalyzer"], [110, 1, 1, "", "GraphRewriterHelper"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[114, 0, 0, "-", "qat"], [130, 0, 0, "-", "qdq"], [132, 0, 0, "-", "quantize_graph_base"], [133, 0, 0, "-", "quantize_graph_bn"], [134, 0, 0, "-", "quantize_graph_concatv2"], [135, 0, 0, "-", "quantize_graph_conv"], [136, 0, 0, "-", "quantize_graph_for_intel_cpu"], [137, 0, 0, "-", "quantize_graph_matmul"], [138, 0, 0, "-", "quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[113, 0, 0, "-", "fake_quantize"], [115, 0, 0, "-", "quantize_config"], [116, 0, 0, "-", "quantize_helper"], [117, 0, 0, "-", "quantize_layers"], [122, 0, 0, "-", "quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[113, 1, 1, "", "FakeQuantize"], [113, 1, 1, "", "FakeQuantizeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[115, 1, 1, "", "QuantizeConfig"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[116, 2, 1, "", "init_quantize_config"], [116, 2, 1, "", "qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[118, 0, 0, "-", "optimize_layer"], [119, 0, 0, "-", "quantize_layer_add"], [120, 0, 0, "-", "quantize_layer_base"], [121, 0, 0, "-", "quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[118, 2, 1, "", "config_quantizable_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[119, 1, 1, "", "QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[120, 1, 1, "", "QuantizeLayerBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[121, 1, 1, "", "QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[122, 1, 1, "", "QuantizeWrapper"], [122, 1, 1, "", "QuantizeWrapperBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[123, 0, 0, "-", "fuse_qdq_bn"], [124, 0, 0, "-", "fuse_qdq_concatv2"], [125, 0, 0, "-", "fuse_qdq_conv"], [126, 0, 0, "-", "fuse_qdq_deconv"], [127, 0, 0, "-", "fuse_qdq_in"], [128, 0, 0, "-", "fuse_qdq_matmul"], [129, 0, 0, "-", "fuse_qdq_pooling"], [131, 0, 0, "-", "optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[123, 1, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[124, 1, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[125, 1, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[126, 1, 1, "", "FuseNodeStartWithDeconv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[127, 1, 1, "", "FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[128, 1, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[129, 1, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[131, 1, 1, "", "OptimizeQDQGraph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[132, 1, 1, "", "QuantizeGraphBase"], [132, 1, 1, "", "QuantizeNodeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[133, 1, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[134, 1, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[135, 1, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[136, 1, 1, "", "QuantizeGraphForIntel"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[137, 1, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[138, 1, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[139, 1, 1, "", "QuantizeGraphHelper"]], "neural_compressor.adaptor.tf_utils.smooth_quant_calibration": [[140, 1, 1, "", "SmoothQuantCalibration"], [140, 1, 1, "", "SmoothQuantCalibrationLLM"]], "neural_compressor.adaptor.tf_utils.smooth_quant_scaler": [[141, 1, 1, "", "SmoothQuantScaler"], [141, 1, 1, "", "SmoothQuantScalerLLM"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[142, 1, 1, "", "TensorflowQDQToOnnxQDQConverter"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[143, 0, 0, "-", "bias_correction"], [144, 0, 0, "-", "graph_transform_base"], [146, 0, 0, "-", "insert_logging"], [147, 0, 0, "-", "rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[143, 1, 1, "", "BiasCorrection"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[144, 1, 1, "", "GraphTransformBase"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[146, 1, 1, "", "InsertLogging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[147, 1, 1, "", "RerangeQuantizedConcat"]], "neural_compressor.adaptor.tf_utils.util": [[148, 2, 1, "", "apply_inlining"], [148, 2, 1, "", "collate_tf_preds"], [148, 2, 1, "", "construct_function_from_graph_def"], [148, 2, 1, "", "disable_random"], [148, 2, 1, "", "fix_ref_type_of_graph_def"], [148, 2, 1, "", "generate_feed_dict"], [148, 2, 1, "", "get_estimator_graph"], [148, 2, 1, "", "get_graph_def"], [148, 2, 1, "", "get_input_output_node_names"], [148, 2, 1, "", "get_model_input_shape"], [148, 2, 1, "", "get_tensor_by_name"], [148, 2, 1, "", "get_tensor_val_from_graph_node"], [148, 2, 1, "", "get_weight_from_input_tensor"], [148, 2, 1, "", "int8_node_name_reverse"], [148, 2, 1, "", "is_ckpt_format"], [148, 2, 1, "", "is_saved_model_format"], [148, 2, 1, "", "iterator_sess_run"], [148, 2, 1, "", "parse_saved_model"], [148, 2, 1, "", "read_graph"], [148, 2, 1, "", "reconstruct_saved_model"], [148, 2, 1, "", "strip_equivalent_nodes"], [148, 2, 1, "", "strip_unused_nodes"], [148, 2, 1, "", "tf_diagnosis_helper"], [148, 2, 1, "", "version1_eq_version2"], [148, 2, 1, "", "version1_gt_version2"], [148, 2, 1, "", "version1_gte_version2"], [148, 2, 1, "", "version1_lt_version2"], [148, 2, 1, "", "version1_lte_version2"], [148, 2, 1, "", "write_graph"]], "neural_compressor.adaptor.torch_utils": [[151, 0, 0, "-", "autoround"], [154, 0, 0, "-", "awq"], [155, 0, 0, "-", "bf16_convert"], [156, 0, 0, "-", "gptq"], [157, 0, 0, "-", "hawq_metric"], [159, 0, 0, "-", "layer_wise_quant"], [164, 0, 0, "-", "mixed_precision"], [165, 0, 0, "-", "model_wrapper"], [166, 0, 0, "-", "pattern_detector"], [167, 0, 0, "-", "smooth_quant"], [168, 0, 0, "-", "symbolic_trace"], [169, 0, 0, "-", "teq"], [170, 0, 0, "-", "util"], [171, 0, 0, "-", "weight_only"]], "neural_compressor.adaptor.torch_utils.autoround": [[149, 0, 0, "-", "autoround"], [150, 0, 0, "-", "export"], [152, 0, 0, "-", "model_wrapper"], [153, 0, 0, "-", "sign_sgd"]], "neural_compressor.adaptor.torch_utils.autoround.autoround": [[149, 1, 1, "", "AutoAdamRound"], [149, 1, 1, "", "AutoOPTRound"], [149, 1, 1, "", "AutoRound"], [149, 1, 1, "", "SaveInputs"], [149, 1, 1, "", "WrapperMultiblock"], [149, 2, 1, "", "block_forward"], [149, 2, 1, "", "check_is_cpu"], [149, 2, 1, "", "collect_minmax_scale"], [149, 2, 1, "", "collect_round_v"], [149, 2, 1, "", "get_batch_dim"], [149, 2, 1, "", "get_block_names"], [149, 2, 1, "", "get_dataloader"], [149, 2, 1, "", "get_module"], [149, 2, 1, "", "get_scale_shape"], [149, 2, 1, "", "get_tokenizer_function"], [149, 2, 1, "", "move_input_to_device"], [149, 2, 1, "", "quant_weight"], [149, 2, 1, "", "quant_weight_actor"], [149, 2, 1, "", "quant_weight_asym"], [149, 2, 1, "", "quant_weight_sym"], [149, 2, 1, "", "quant_weight_w_scale"], [149, 2, 1, "", "round_ste"], [149, 2, 1, "", "sampling_inputs"], [149, 2, 1, "", "set_module"], [149, 2, 1, "", "unwrapper_block"], [149, 2, 1, "", "wrapper_block"]], "neural_compressor.adaptor.torch_utils.autoround.export": [[150, 2, 1, "", "export_compressed_model"]], "neural_compressor.adaptor.torch_utils.autoround.sign_sgd": [[153, 1, 1, "", "SGD"], [153, 2, 1, "", "sgd"]], "neural_compressor.adaptor.torch_utils.awq": [[154, 1, 1, "", "ActAwareWeightQuant"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[155, 1, 1, "", "BF16ModuleWrapper"], [155, 2, 1, "", "Convert"], [155, 2, 1, "", "bf16_symbolic_trace"]], "neural_compressor.adaptor.torch_utils.gptq": [[156, 1, 1, "", "GPTQ"], [156, 1, 1, "", "GPTQuantizer"], [156, 2, 1, "", "find_layers"], [156, 2, 1, "", "find_layers_name"], [156, 2, 1, "", "is_leaf"], [156, 2, 1, "", "log_quantizable_layers_per_transformer"], [156, 2, 1, "", "quantize"], [156, 2, 1, "", "trace_gptq_target_blocks"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[157, 1, 1, "", "HessianTrace"], [157, 1, 1, "", "Node_collector"], [157, 2, 1, "", "compare_weights"], [157, 2, 1, "", "hawq_top"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant": [[160, 0, 0, "-", "modified_pickle"], [161, 0, 0, "-", "quantize"], [162, 0, 0, "-", "torch_load"], [163, 0, 0, "-", "utils"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle": [[160, 3, 1, "", "PickleError"], [160, 3, 1, "", "PicklingError"], [160, 3, 1, "", "UnpicklingError"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize": [[161, 1, 1, "", "LayerWiseQuant"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load": [[162, 2, 1, "", "load"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils": [[163, 2, 1, "", "dowload_hf_model"], [163, 2, 1, "", "get_children"], [163, 2, 1, "", "get_module"], [163, 2, 1, "", "get_named_children"], [163, 2, 1, "", "get_super_module_by_name"], [163, 2, 1, "", "load_empty_model"], [163, 2, 1, "", "load_layer_wise_quantized_model"], [163, 2, 1, "", "load_tensor"], [163, 2, 1, "", "load_tensor_from_shard"], [163, 2, 1, "", "update_module"]], "neural_compressor.adaptor.torch_utils.mixed_precision": [[164, 2, 1, "", "ipex_mixed_precision"]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[165, 1, 1, "", "FakeAffineTensorQuantFunction"], [165, 1, 1, "", "MulLinear"], [165, 1, 1, "", "TEQLinearFakeQuant"]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[166, 1, 1, "", "TransformerBasedModelBlockPatternDetector"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[167, 1, 1, "", "TorchSmoothQuant"], [167, 2, 1, "", "get_module"], [167, 2, 1, "", "set_module"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[168, 2, 1, "", "symbolic_trace"], [168, 2, 1, "", "trace_and_fuse_sub_graph"]], "neural_compressor.adaptor.torch_utils.teq": [[169, 1, 1, "", "TEQuantizer"]], "neural_compressor.adaptor.torch_utils.util": [[170, 2, 1, "", "append_attr"], [170, 2, 1, "", "auto_copy"], [170, 2, 1, "", "calculate_quant_min_max"], [170, 2, 1, "", "calibration"], [170, 2, 1, "", "check_cfg_and_qconfig"], [170, 2, 1, "", "collate_torch_preds"], [170, 2, 1, "", "collect_weight_info"], [170, 2, 1, "", "fetch_module"], [170, 2, 1, "", "forward_wrapper"], [170, 2, 1, "", "generate_activation_observer"], [170, 2, 1, "", "get_absorb_layers"], [170, 2, 1, "", "get_block_prefix"], [170, 2, 1, "", "get_depth"], [170, 2, 1, "", "get_dict_at_depth"], [170, 2, 1, "", "get_element_under_depth"], [170, 2, 1, "", "get_embedding_contiguous"], [170, 2, 1, "", "get_example_input"], [170, 2, 1, "", "get_fallback_order"], [170, 2, 1, "", "get_hidden_states"], [170, 2, 1, "", "get_module_input_output"], [170, 2, 1, "", "get_mse_order_per_fp32"], [170, 2, 1, "", "get_mse_order_per_int8"], [170, 2, 1, "", "get_op_type_by_name"], [170, 2, 1, "", "get_quantizable_ops_from_cfgs"], [170, 2, 1, "", "get_torch_version"], [170, 2, 1, "", "input2tuple"], [170, 2, 1, "", "is_fused_module"], [170, 2, 1, "", "match_datatype_pattern"], [170, 2, 1, "", "move_input_device"], [170, 2, 1, "", "paser_cfgs"], [170, 2, 1, "", "set_module"], [170, 2, 1, "", "simple_inference"], [170, 2, 1, "", "update_sq_scale"]], "neural_compressor.adaptor.torch_utils.weight_only": [[171, 2, 1, "", "awq_quantize"], [171, 2, 1, "", "gptq_quantize"], [171, 2, 1, "", "qdq_weight_actor"], [171, 2, 1, "", "qdq_weight_asym"], [171, 2, 1, "", "qdq_weight_sym"], [171, 2, 1, "", "quant_weight"], [171, 2, 1, "", "quant_weight_w_scale"], [171, 2, 1, "", "quantize_4bit"], [171, 2, 1, "", "rtn_quantize"], [171, 2, 1, "", "search_clip"], [171, 2, 1, "", "teq_quantize"]], "neural_compressor.algorithm": [[172, 0, 0, "-", "algorithm"], [173, 0, 0, "-", "fast_bias_correction"], [175, 0, 0, "-", "smooth_quant"], [176, 0, 0, "-", "weight_correction"]], "neural_compressor.algorithm.algorithm": [[172, 1, 1, "", "ALGORITHMS"], [172, 1, 1, "", "Algorithm"], [172, 1, 1, "", "AlgorithmScheduler"], [172, 2, 1, "", "algorithm_registry"]], "neural_compressor.algorithm.fast_bias_correction": [[173, 1, 1, "", "FastBiasCorrection"]], "neural_compressor.algorithm.smooth_quant": [[175, 1, 1, "", "SmoothQuant"]], "neural_compressor.algorithm.weight_correction": [[176, 1, 1, "", "WeightCorrection"]], "neural_compressor.benchmark": [[177, 2, 1, "", "benchmark_with_raw_cmd"], [177, 2, 1, "", "call_one"], [177, 2, 1, "", "config_instance"], [177, 2, 1, "", "fit"], [177, 2, 1, "", "generate_prefix"], [177, 2, 1, "", "get_architecture"], [177, 2, 1, "", "get_bounded_threads"], [177, 2, 1, "", "get_core_ids"], [177, 2, 1, "", "get_physical_ids"], [177, 2, 1, "", "get_threads"], [177, 2, 1, "", "get_threads_per_core"], [177, 2, 1, "", "profile"], [177, 2, 1, "", "run_instance"], [177, 2, 1, "", "set_all_env_var"], [177, 2, 1, "", "set_env_var"], [177, 2, 1, "", "summary_benchmark"]], "neural_compressor.common": [[178, 0, 0, "-", "base_config"], [179, 0, 0, "-", "base_tuning"], [181, 0, 0, "-", "tuning_param"], [183, 0, 0, "-", "utils"]], "neural_compressor.common.base_config": [[178, 1, 1, "", "BaseConfig"], [178, 1, 1, "", "ComposableConfig"], [178, 2, 1, "", "register_config"], [178, 2, 1, "", "register_supported_configs_for_fwk"]], "neural_compressor.common.base_tuning": [[179, 1, 1, "", "Evaluator"], [179, 1, 1, "", "SequentialSampler"], [179, 1, 1, "", "TuningConfig"]], "neural_compressor.common.tuning_param": [[181, 1, 1, "", "ParamLevel"], [181, 1, 1, "", "TuningParam"]], "neural_compressor.common.utils": [[182, 0, 0, "-", "constants"], [184, 0, 0, "-", "logger"], [185, 0, 0, "-", "utility"]], "neural_compressor.common.utils.logger": [[184, 1, 1, "", "Logger"], [184, 1, 1, "", "TuningLogger"]], "neural_compressor.common.utils.utility": [[185, 2, 1, "", "dump_elapsed_time"], [185, 2, 1, "", "set_random_seed"], [185, 2, 1, "", "set_resume_from"], [185, 2, 1, "", "set_tensorboard"], [185, 2, 1, "", "set_workspace"]], "neural_compressor.compression": [[186, 0, 0, "-", "callbacks"], [188, 0, 0, "-", "distillation"], [191, 0, 0, "-", "hpo"], [198, 0, 0, "-", "pruner"]], "neural_compressor.compression.callbacks": [[186, 1, 1, "", "BaseCallbacks"], [186, 1, 1, "", "DistillationCallbacks"], [186, 1, 1, "", "PruningCallbacks"], [186, 1, 1, "", "QuantizationAwareTrainingCallbacks"]], "neural_compressor.compression.callbacks.DistillationCallbacks": [[186, 4, 1, "", "_epoch_ran"], [186, 4, 1, "", "best_model"], [186, 4, 1, "", "best_score"], [186, 4, 1, "", "eval_frequency"]], "neural_compressor.compression.distillation": [[187, 0, 0, "-", "criterions"], [189, 0, 0, "-", "optimizers"], [190, 0, 0, "-", "utility"]], "neural_compressor.compression.distillation.criterions": [[187, 1, 1, "", "Criterions"], [187, 1, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [187, 1, 1, "", "KnowledgeDistillationFramework"], [187, 1, 1, "", "KnowledgeDistillationLoss"], [187, 1, 1, "", "PyTorchCriterions"], [187, 1, 1, "", "PyTorchCrossEntropyLoss"], [187, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [187, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [187, 1, 1, "", "PyTorchKnowledgeDistillationLoss"], [187, 1, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [187, 1, 1, "", "PyTorchSelfKnowledgeDistillationLoss"], [187, 1, 1, "", "PyTorchSelfKnowledgeDistillationLossWrapper"], [187, 1, 1, "", "SelfKnowledgeDistillationLoss"], [187, 1, 1, "", "TensorFlowCrossEntropyLoss"], [187, 1, 1, "", "TensorFlowSparseCategoricalCrossentropy"], [187, 1, 1, "", "TensorflowCriterions"], [187, 1, 1, "", "TensorflowKnowledgeDistillationLoss"], [187, 1, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [187, 1, 1, "", "TensorflowKnowledgeDistillationLossWrapper"], [187, 2, 1, "", "criterion_registry"]], "neural_compressor.compression.distillation.optimizers": [[189, 1, 1, "", "Optimizers"], [189, 1, 1, "", "PyTorchOptimizers"], [189, 1, 1, "", "PyTorchSGD"], [189, 1, 1, "", "TensorFlowAdam"], [189, 1, 1, "", "TensorFlowAdamW"], [189, 1, 1, "", "TensorFlowSGD"], [189, 1, 1, "", "TensorflowOptimizers"], [189, 2, 1, "", "optimizer_registry"]], "neural_compressor.compression.distillation.utility": [[190, 2, 1, "", "get_activation"], [190, 2, 1, "", "record_output"]], "neural_compressor.compression.hpo": [[192, 0, 0, "-", "sa_optimizer"], [193, 0, 0, "-", "search_algorithms"], [194, 0, 0, "-", "search_space"]], "neural_compressor.compression.hpo.search_algorithms": [[193, 1, 1, "", "BayesianOptimizationSearcher"], [193, 1, 1, "", "GridSearcher"], [193, 1, 1, "", "RandomSearcher"], [193, 1, 1, "", "Searcher"], [193, 1, 1, "", "XgbSearcher"], [193, 2, 1, "", "register_searcher"]], "neural_compressor.compression.hpo.search_space": [[194, 1, 1, "", "BaseSearchSpace"], [194, 1, 1, "", "ContinuousSearchSpace"], [194, 1, 1, "", "DiscreteSearchSpace"], [194, 1, 1, "", "SearchSpace"], [194, 2, 1, "", "register_searchspace"]], "neural_compressor.compression.pruner": [[196, 0, 0, "-", "criteria"], [197, 0, 0, "-", "dsnot"], [200, 0, 0, "-", "model_slim"], [204, 0, 0, "-", "patterns"], [198, 2, 1, "", "prepare_pruning"], [211, 0, 0, "-", "pruners"], [217, 0, 0, "-", "pruning"], [218, 0, 0, "-", "regs"], [198, 2, 1, "", "save"], [219, 0, 0, "-", "schedulers"], [220, 0, 0, "-", "tf_criteria"], [221, 0, 0, "-", "utils"], [222, 0, 0, "-", "wanda"]], "neural_compressor.compression.pruner.criteria": [[196, 1, 1, "", "BlockMaskCriterion"], [196, 1, 1, "", "GradientCriterion"], [196, 1, 1, "", "MagnitudeCriterion"], [196, 1, 1, "", "PruningCriterion"], [196, 1, 1, "", "RetrainFreeCriterion"], [196, 1, 1, "", "SnipCriterion"], [196, 1, 1, "", "SnipMomentumCriterion"], [196, 2, 1, "", "get_criterion"], [196, 2, 1, "", "register_criterion"]], "neural_compressor.compression.pruner.criteria.BlockMaskCriterion": [[196, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.GradientCriterion": [[196, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.MagnitudeCriterion": [[196, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.PruningCriterion": [[196, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion": [[196, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipCriterion": [[196, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion": [[196, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.dsnot": [[197, 2, 1, "", "DSnoT"], [197, 2, 1, "", "return_reorder_indice"]], "neural_compressor.compression.pruner.model_slim": [[199, 0, 0, "-", "auto_slim"], [201, 0, 0, "-", "pattern_analyzer"], [202, 0, 0, "-", "weight_slim"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[199, 2, 1, "", "generate_ffn2_pruning_config"], [199, 2, 1, "", "generate_mha_pruning_config"], [199, 2, 1, "", "model_slim"], [199, 2, 1, "", "model_slim_ffn2"], [199, 2, 1, "", "model_slim_mha"], [199, 2, 1, "", "parse_auto_slim_config"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[201, 1, 1, "", "ClassifierHeadSearcher"], [201, 1, 1, "", "ClassifierHeadSearcherTF"], [201, 1, 1, "", "JitBasicSearcher"], [201, 1, 1, "", "Linear2LinearSearcher"], [201, 1, 1, "", "RecipeSearcher"], [201, 1, 1, "", "SelfMHASearcher"], [201, 2, 1, "", "get_attributes"], [201, 2, 1, "", "get_common_module"], [201, 2, 1, "", "print_iterables"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher": [[201, 4, 1, "", "device"], [201, 4, 1, "", "flatten_static_graph"], [201, 4, 1, "", "model"], [201, 4, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF": [[201, 4, 1, "", "device"], [201, 4, 1, "", "flatten_static_graph"], [201, 4, 1, "", "model"], [201, 4, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher": [[201, 4, 1, "", "device"], [201, 4, 1, "", "flatten_static_graph"], [201, 4, 1, "", "model"], [201, 4, 1, "", "searching_results"], [201, 4, 1, "", "static_graph"], [201, 4, 1, "", "target_layers"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher": [[201, 4, 1, "", "current_pattern"], [201, 4, 1, "", "device"], [201, 4, 1, "", "flatten_static_graph"], [201, 4, 1, "", "model"], [201, 4, 1, "", "searching_results"], [201, 4, 1, "", "static_graph"], [201, 4, 1, "", "target_layers"], [201, 4, 1, "", "target_op_lut"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher": [[201, 4, 1, "", "model"], [201, 4, 1, "", "recipe"], [201, 4, 1, "", "searching_results"], [201, 4, 1, "", "targets"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher": [[201, 4, 1, "", "device"], [201, 4, 1, "", "flatten_static_graph"], [201, 4, 1, "", "model"], [201, 4, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[202, 1, 1, "", "LinearCompression"], [202, 1, 1, "", "LinearCompressionIterator"], [202, 1, 1, "", "PostCompressionUtils"]], "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression": [[202, 4, 1, "", "device"], [202, 4, 1, "", "layer_1"], [202, 4, 1, "", "layer_2"]], "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator": [[202, 4, 1, "", "linear_patterns"]], "neural_compressor.compression.pruner.patterns": [[203, 0, 0, "-", "base"], [204, 2, 1, "", "get_pattern"], [205, 0, 0, "-", "mha"], [206, 0, 0, "-", "ninm"], [207, 0, 0, "-", "nxm"]], "neural_compressor.compression.pruner.patterns.base": [[203, 1, 1, "", "BasePattern"], [203, 1, 1, "", "KerasBasePattern"], [203, 1, 1, "", "PytorchBasePattern"], [203, 2, 1, "", "register_pattern"]], "neural_compressor.compression.pruner.patterns.base.BasePattern": [[203, 4, 1, "", "config"], [203, 4, 1, "", "invalid_layers"], [203, 4, 1, "", "is_global"], [203, 4, 1, "", "keep_mask_layers"], [203, 4, 1, "", "max_sparsity_ratio_per_op"], [203, 4, 1, "", "min_sparsity_ratio_per_op"], [203, 4, 1, "", "modules"], [203, 4, 1, "", "pattern"], [203, 4, 1, "", "target_sparsity"]], "neural_compressor.compression.pruner.patterns.base.KerasBasePattern": [[203, 4, 1, "", "config"], [203, 4, 1, "", "invalid_layers"], [203, 4, 1, "", "is_global"], [203, 4, 1, "", "keep_mask_layers"], [203, 4, 1, "", "max_sparsity_ratio_per_op"], [203, 4, 1, "", "min_sparsity_ratio_per_op"], [203, 4, 1, "", "modules"], [203, 4, 1, "", "pattern"], [203, 4, 1, "", "target_sparsity"]], "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern": [[203, 4, 1, "", "config"], [203, 4, 1, "", "invalid_layers"], [203, 4, 1, "", "is_global"], [203, 4, 1, "", "keep_mask_layers"], [203, 4, 1, "", "max_sparsity_ratio_per_op"], [203, 4, 1, "", "min_sparsity_ratio_per_op"], [203, 4, 1, "", "modules"], [203, 4, 1, "", "pattern"], [203, 4, 1, "", "target_sparsity"]], "neural_compressor.compression.pruner.patterns.mha": [[205, 1, 1, "", "PatternMHA"]], "neural_compressor.compression.pruner.patterns.mha.PatternMHA": [[205, 4, 1, "", "M"], [205, 4, 1, "", "N"]], "neural_compressor.compression.pruner.patterns.ninm": [[206, 1, 1, "", "PytorchPatternNInM"]], "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM": [[206, 4, 1, "", "M"], [206, 4, 1, "", "N"]], "neural_compressor.compression.pruner.patterns.nxm": [[207, 1, 1, "", "KerasPatternNxM"], [207, 1, 1, "", "PytorchPatternNxM"]], "neural_compressor.compression.pruner.patterns.nxm.KerasPatternNxM": [[207, 4, 1, "", "block_size"]], "neural_compressor.compression.pruner.patterns.nxm.PytorchPatternNxM": [[207, 4, 1, "", "block_size"]], "neural_compressor.compression.pruner.pruners": [[208, 0, 0, "-", "base"], [209, 0, 0, "-", "basic"], [210, 0, 0, "-", "block_mask"], [211, 2, 1, "", "get_pruner"], [212, 0, 0, "-", "mha"], [211, 2, 1, "", "parse_valid_pruner_types"], [213, 0, 0, "-", "pattern_lock"], [214, 0, 0, "-", "progressive"], [215, 0, 0, "-", "retrain_free"], [216, 0, 0, "-", "sparse_gpt"]], "neural_compressor.compression.pruner.pruners.base": [[208, 1, 1, "", "BasePruner"], [208, 1, 1, "", "KerasBasePruner"], [208, 1, 1, "", "PytorchBasePruner"], [208, 2, 1, "", "register_pruner"]], "neural_compressor.compression.pruner.pruners.base.BasePruner": [[208, 4, 1, "", "config"], [208, 4, 1, "", "current_sparsity_ratio"], [208, 4, 1, "", "end_step"], [208, 4, 1, "", "global_step"], [208, 4, 1, "", "masks"], [208, 4, 1, "", "max_sparsity_ratio_per_op"], [208, 4, 1, "", "modules"], [208, 4, 1, "", "pattern"], [208, 4, 1, "", "pruning_frequency"], [208, 4, 1, "", "scheduler"], [208, 4, 1, "", "scores"], [208, 4, 1, "", "start_step"], [208, 4, 1, "", "target_sparsity_ratio"]], "neural_compressor.compression.pruner.pruners.base.KerasBasePruner": [[208, 4, 1, "", "config"], [208, 4, 1, "", "current_sparsity_ratio"], [208, 4, 1, "", "end_step"], [208, 4, 1, "", "global_step"], [208, 4, 1, "", "masks"], [208, 4, 1, "", "max_sparsity_ratio_per_op"], [208, 4, 1, "", "modules"], [208, 4, 1, "", "pattern"], [208, 4, 1, "", "pruning_frequency"], [208, 4, 1, "", "scheduler"], [208, 4, 1, "", "scores"], [208, 4, 1, "", "start_step"], [208, 4, 1, "", "target_sparsity_ratio"]], "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner": [[208, 4, 1, "", "config"], [208, 4, 1, "", "current_sparsity_ratio"], [208, 4, 1, "", "end_step"], [208, 4, 1, "", "global_step"], [208, 4, 1, "", "masks"], [208, 4, 1, "", "max_sparsity_ratio_per_op"], [208, 4, 1, "", "modules"], [208, 4, 1, "", "pattern"], [208, 4, 1, "", "pruning_frequency"], [208, 4, 1, "", "scheduler"], [208, 4, 1, "", "scores"], [208, 4, 1, "", "start_step"], [208, 4, 1, "", "target_sparsity_ratio"]], "neural_compressor.compression.pruner.pruners.basic": [[209, 1, 1, "", "KerasBasicPruner"], [209, 1, 1, "", "PytorchBasicPruner"]], "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner": [[209, 4, 1, "", "criterion"], [209, 4, 1, "", "pattern"], [209, 4, 1, "", "reg"], [209, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner": [[209, 4, 1, "", "criterion"], [209, 4, 1, "", "pattern"], [209, 4, 1, "", "reg"], [209, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.block_mask": [[210, 1, 1, "", "PytorchBlockMaskPruner"]], "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner": [[210, 4, 1, "", "criterion"], [210, 4, 1, "", "pattern"], [210, 4, 1, "", "reg"], [210, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.mha": [[212, 1, 1, "", "PythonMultiheadAttentionPruner"]], "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner": [[212, 4, 1, "", "head_masks"], [212, 4, 1, "", "linear_layers"], [212, 4, 1, "", "mha_compressions"], [212, 4, 1, "", "mha_scores"]], "neural_compressor.compression.pruner.pruners.pattern_lock": [[213, 1, 1, "", "PytorchPatternLockPruner"]], "neural_compressor.compression.pruner.pruners.progressive": [[214, 1, 1, "", "PytorchProgressivePruner"]], "neural_compressor.compression.pruner.pruners.retrain_free": [[215, 1, 1, "", "PytorchRetrainFreePruner"]], "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner": [[215, 4, 1, "", "criterion"], [215, 4, 1, "", "pattern"], [215, 4, 1, "", "reg"], [215, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.sparse_gpt": [[216, 1, 1, "", "SparseGPTPruner"]], "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner": [[216, 4, 1, "", "criterion"], [216, 4, 1, "", "pattern"], [216, 4, 1, "", "reg"], [216, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruning": [[217, 1, 1, "", "BasePruning"], [217, 1, 1, "", "BasicPruning"], [217, 1, 1, "", "RetrainFreePruning"], [217, 1, 1, "", "SparseGPTPruning"], [217, 2, 1, "", "register_pruning"]], "neural_compressor.compression.pruner.pruning.BasePruning": [[217, 4, 1, "", "config_file_path"], [217, 4, 1, "", "model"], [217, 4, 1, "", "pruner_info"], [217, 4, 1, "", "pruners"]], "neural_compressor.compression.pruner.pruning.BasicPruning": [[217, 4, 1, "", "config_file_path"], [217, 4, 1, "", "model"], [217, 4, 1, "", "pruner_info"], [217, 4, 1, "", "pruners"]], "neural_compressor.compression.pruner.pruning.RetrainFreePruning": [[217, 4, 1, "", "config_file_path"], [217, 4, 1, "", "model"], [217, 4, 1, "", "pruner_info"], [217, 4, 1, "", "pruners"]], "neural_compressor.compression.pruner.regs": [[218, 1, 1, "", "BaseReg"], [218, 1, 1, "", "GroupLasso"], [218, 2, 1, "", "get_reg"], [218, 2, 1, "", "get_reg_type"], [218, 2, 1, "", "register_reg"]], "neural_compressor.compression.pruner.regs.GroupLasso": [[218, 4, 1, "", "alpha"], [218, 4, 1, "", "reg_terms"]], "neural_compressor.compression.pruner.schedulers": [[219, 1, 1, "", "IterativeScheduler"], [219, 1, 1, "", "OneshotScheduler"], [219, 1, 1, "", "PruningScheduler"], [219, 2, 1, "", "get_scheduler"], [219, 2, 1, "", "register_scheduler"]], "neural_compressor.compression.pruner.schedulers.PruningScheduler": [[219, 4, 1, "", "config"]], "neural_compressor.compression.pruner.tf_criteria": [[220, 1, 1, "", "MagnitudeCriterion"], [220, 1, 1, "", "PruningCriterion"], [220, 2, 1, "", "get_tf_criterion"], [220, 2, 1, "", "register_criterion"]], "neural_compressor.compression.pruner.tf_criteria.MagnitudeCriterion": [[220, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.tf_criteria.PruningCriterion": [[220, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.utils": [[221, 2, 1, "", "check_config"], [221, 2, 1, "", "check_key_validity"], [221, 2, 1, "", "collect_layer_inputs"], [221, 2, 1, "", "generate_pruner_config"], [221, 2, 1, "", "get_layers"], [221, 2, 1, "", "get_sparsity_ratio"], [221, 2, 1, "", "get_sparsity_ratio_tf"], [221, 2, 1, "", "parse_last_linear"], [221, 2, 1, "", "parse_last_linear_tf"], [221, 2, 1, "", "parse_to_prune"], [221, 2, 1, "", "parse_to_prune_tf"], [221, 2, 1, "", "process_and_check_config"], [221, 2, 1, "", "process_config"], [221, 2, 1, "", "process_weight_config"], [221, 2, 1, "", "process_yaml_config"], [221, 2, 1, "", "reset_none_to_default"], [221, 2, 1, "", "update_params"]], "neural_compressor.compression.pruner.wanda": [[223, 0, 0, "-", "prune"], [224, 0, 0, "-", "utils"], [225, 0, 0, "-", "wrapper"]], "neural_compressor.compression.pruner.wanda.prune": [[223, 2, 1, "", "prune_wanda"]], "neural_compressor.compression.pruner.wanda.utils": [[224, 2, 1, "", "find_layers"]], "neural_compressor.compression.pruner.wanda.wrapper": [[225, 1, 1, "", "WrappedGPT"]], "neural_compressor.conf": [[226, 0, 0, "-", "config"], [227, 0, 0, "-", "dotdict"], [229, 0, 0, "-", "pythonic_config"]], "neural_compressor.conf.config": [[226, 1, 1, "", "Benchmark_Conf"], [226, 1, 1, "", "Conf"], [226, 1, 1, "", "Distillation_Conf"], [226, 1, 1, "", "Graph_Optimization_Conf"], [226, 1, 1, "", "MixedPrecision_Conf"], [226, 1, 1, "", "NASConfig"], [226, 1, 1, "", "PrunerV2"], [226, 1, 1, "", "Pruning_Conf"], [226, 1, 1, "", "Quantization_Conf"]], "neural_compressor.conf.dotdict": [[227, 1, 1, "", "DotDict"], [227, 2, 1, "", "deep_get"], [227, 2, 1, "", "deep_set"]], "neural_compressor.conf.pythonic_config": [[229, 1, 1, "", "AccuracyCriterion"], [229, 1, 1, "", "BenchmarkConfig"], [229, 1, 1, "", "DistillationConfig"], [229, 1, 1, "", "KnowledgeDistillationLossConfig"], [229, 1, 1, "", "Options"], [229, 1, 1, "", "QuantizationConfig"], [229, 1, 1, "", "WeightPruningConfig"]], "neural_compressor.config": [[230, 1, 1, "", "AccuracyCriterion"], [230, 1, 1, "", "BenchmarkConfig"], [230, 1, 1, "", "DistillationConfig"], [230, 1, 1, "", "DotDict"], [230, 1, 1, "", "ExportConfig"], [230, 1, 1, "", "HPOConfig"], [230, 1, 1, "", "IntermediateLayersKnowledgeDistillationLossConfig"], [230, 1, 1, "", "Keras"], [230, 1, 1, "", "KnowledgeDistillationLossConfig"], [230, 1, 1, "", "MXNet"], [230, 1, 1, "", "MixedPrecisionConfig"], [230, 1, 1, "", "NASConfig"], [230, 1, 1, "", "ONNX"], [230, 1, 1, "", "ONNXQlinear2QDQConfig"], [230, 1, 1, "", "Options"], [230, 1, 1, "", "PostTrainingQuantConfig"], [230, 1, 1, "", "PyTorch"], [230, 1, 1, "", "QuantizationAwareTrainingConfig"], [230, 1, 1, "", "SelfKnowledgeDistillationLossConfig"], [230, 1, 1, "", "TF2ONNXConfig"], [230, 1, 1, "", "TensorFlow"], [230, 1, 1, "", "Torch2ONNXConfig"], [230, 1, 1, "", "TuningCriterion"], [230, 1, 1, "", "WeightPruningConfig"]], "neural_compressor.contrib": [[232, 0, 0, "-", "strategy"]], "neural_compressor.contrib.strategy": [[233, 0, 0, "-", "sigopt"], [234, 0, 0, "-", "tpe"]], "neural_compressor.contrib.strategy.sigopt": [[233, 1, 1, "", "SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[234, 1, 1, "", "TpeTuneStrategy"]], "neural_compressor.data": [[239, 0, 0, "-", "dataloaders"], [251, 0, 0, "-", "datasets"], [255, 0, 0, "-", "filters"], [259, 0, 0, "-", "transforms"]], "neural_compressor.data.dataloaders": [[235, 0, 0, "-", "base_dataloader"], [236, 0, 0, "-", "dataloader"], [237, 0, 0, "-", "default_dataloader"], [238, 0, 0, "-", "fetcher"], [240, 0, 0, "-", "mxnet_dataloader"], [241, 0, 0, "-", "onnxrt_dataloader"], [242, 0, 0, "-", "pytorch_dataloader"], [243, 0, 0, "-", "sampler"], [244, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.data.dataloaders.base_dataloader": [[235, 1, 1, "", "BaseDataLoader"]], "neural_compressor.data.dataloaders.dataloader": [[236, 1, 1, "", "DataLoader"], [236, 2, 1, "", "check_dataloader"]], "neural_compressor.data.dataloaders.default_dataloader": [[237, 1, 1, "", "DefaultDataLoader"], [237, 2, 1, "", "default_collate"]], "neural_compressor.data.dataloaders.fetcher": [[238, 1, 1, "", "Fetcher"], [238, 1, 1, "", "IndexFetcher"], [238, 1, 1, "", "IterableFetcher"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[240, 1, 1, "", "MXNetDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[241, 1, 1, "", "ONNXRTBertDataLoader"], [241, 1, 1, "", "ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[242, 1, 1, "", "PyTorchDataLoader"]], "neural_compressor.data.dataloaders.sampler": [[243, 1, 1, "", "BatchSampler"], [243, 1, 1, "", "IterableSampler"], [243, 1, 1, "", "Sampler"], [243, 1, 1, "", "SequentialSampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[244, 1, 1, "", "TFDataDataLoader"], [244, 1, 1, "", "TensorflowBertDataLoader"], [244, 1, 1, "", "TensorflowDataLoader"], [244, 1, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.data.datasets": [[245, 0, 0, "-", "bert_dataset"], [246, 0, 0, "-", "coco_dataset"], [247, 0, 0, "-", "dataset"], [248, 0, 0, "-", "dummy_dataset"], [249, 0, 0, "-", "dummy_dataset_v2"], [250, 0, 0, "-", "imagenet_dataset"], [252, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.data.datasets.bert_dataset": [[245, 1, 1, "", "InputFeatures"], [245, 1, 1, "", "ONNXRTBertDataset"], [245, 1, 1, "", "ParseDecodeBert"], [245, 1, 1, "", "PytorchBertDataset"], [245, 1, 1, "", "TensorflowBertDataset"], [245, 1, 1, "", "TensorflowModelZooBertDataset"], [245, 2, 1, "", "convert_examples_to_features"], [245, 2, 1, "", "load_and_cache_examples"]], "neural_compressor.data.datasets.coco_dataset": [[246, 1, 1, "", "COCONpy"], [246, 1, 1, "", "COCORaw"], [246, 1, 1, "", "COCORecordDataset"], [246, 1, 1, "", "ParseDecodeCoco"]], "neural_compressor.data.datasets.dataset": [[247, 1, 1, "", "CIFAR10"], [247, 1, 1, "", "CIFAR100"], [247, 1, 1, "", "Dataset"], [247, 1, 1, "", "Datasets"], [247, 1, 1, "", "FashionMNIST"], [247, 1, 1, "", "ImageFolder"], [247, 1, 1, "", "IterableDataset"], [247, 1, 1, "", "MNIST"], [247, 1, 1, "", "MXNetCIFAR10"], [247, 1, 1, "", "MXNetCIFAR100"], [247, 1, 1, "", "MXNetDatasets"], [247, 1, 1, "", "MXNetFashionMNIST"], [247, 1, 1, "", "MXNetImageFolder"], [247, 1, 1, "", "MXNetMNIST"], [247, 1, 1, "", "ONNXRTITDatasets"], [247, 1, 1, "", "ONNXRTQLDatasets"], [247, 1, 1, "", "PyTorchDatasets"], [247, 1, 1, "", "PytorchCIFAR10"], [247, 1, 1, "", "PytorchCIFAR100"], [247, 1, 1, "", "PytorchFashionMNIST"], [247, 1, 1, "", "PytorchMNIST"], [247, 1, 1, "", "PytorchMxnetWrapDataset"], [247, 1, 1, "", "PytorchMxnetWrapFunction"], [247, 1, 1, "", "Tensorflow"], [247, 1, 1, "", "TensorflowCIFAR10"], [247, 1, 1, "", "TensorflowCIFAR100"], [247, 1, 1, "", "TensorflowDatasets"], [247, 1, 1, "", "TensorflowFashionMNIST"], [247, 1, 1, "", "TensorflowImageRecord"], [247, 1, 1, "", "TensorflowMNIST"], [247, 1, 1, "", "TensorflowTFRecordDataset"], [247, 1, 1, "", "TensorflowVOCRecord"], [247, 2, 1, "", "calculate_md5"], [247, 2, 1, "", "check_integrity"], [247, 2, 1, "", "dataset_registry"], [247, 2, 1, "", "download_url"], [247, 5, 1, "", "framework_datasets"], [247, 2, 1, "", "gen_bar_updater"]], "neural_compressor.data.datasets.dummy_dataset": [[248, 1, 1, "", "DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[249, 1, 1, "", "DummyDataset"], [249, 1, 1, "", "SparseDummyDataset"]], "neural_compressor.data.datasets.imagenet_dataset": [[250, 1, 1, "", "ImagenetRaw"], [250, 1, 1, "", "MXNetImagenetRaw"], [250, 1, 1, "", "ONNXRTImagenetDataset"], [250, 1, 1, "", "PytorchImagenetRaw"], [250, 1, 1, "", "TensorflowImagenetDataset"], [250, 1, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.data.datasets.style_transfer_dataset": [[252, 1, 1, "", "StyleTransferDataset"]], "neural_compressor.data.filters": [[253, 0, 0, "-", "coco_filter"], [254, 0, 0, "-", "filter"]], "neural_compressor.data.filters.coco_filter": [[253, 1, 1, "", "LabelBalanceCOCORawFilter"], [253, 1, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.filter": [[254, 1, 1, "", "FILTERS"], [254, 1, 1, "", "Filter"], [254, 1, 1, "", "MXNetFilters"], [254, 1, 1, "", "ONNXRTITFilters"], [254, 1, 1, "", "ONNXRTQLFilters"], [254, 1, 1, "", "PyTorchFilters"], [254, 1, 1, "", "TensorflowFilters"], [254, 2, 1, "", "filter_registry"]], "neural_compressor.data.transforms": [[257, 0, 0, "-", "coco_transform"], [258, 0, 0, "-", "imagenet_transform"], [260, 0, 0, "-", "postprocess"], [261, 0, 0, "-", "tokenization"], [262, 0, 0, "-", "transform"]], "neural_compressor.data.transforms.coco_transform": [[257, 1, 1, "", "ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.imagenet_transform": [[258, 1, 1, "", "BilinearImagenetTransform"], [258, 1, 1, "", "LabelShift"], [258, 1, 1, "", "ONNXResizeCropImagenetTransform"], [258, 1, 1, "", "OnnxBilinearImagenetTransform"], [258, 1, 1, "", "ParseDecodeImagenet"], [258, 1, 1, "", "ParseDecodeImagenetTransform"], [258, 1, 1, "", "QuantizedInput"], [258, 1, 1, "", "ResizeWithAspectRatio"], [258, 1, 1, "", "TensorflowResizeCropImagenetTransform"], [258, 1, 1, "", "TensorflowShiftRescale"], [258, 1, 1, "", "TensorflowTransposeLastChannel"]], "neural_compressor.data.transforms.postprocess": [[260, 1, 1, "", "Postprocess"]], "neural_compressor.data.transforms.tokenization": [[261, 1, 1, "", "BasicTokenizer"], [261, 1, 1, "", "FullTokenizer"], [261, 1, 1, "", "WordpieceTokenizer"], [261, 2, 1, "", "convert_by_vocab"], [261, 2, 1, "", "convert_to_unicode"], [261, 2, 1, "", "load_vocab"], [261, 2, 1, "", "whitespace_tokenize"]], "neural_compressor.data.transforms.transform": [[262, 1, 1, "", "AlignImageChannelTransform"], [262, 1, 1, "", "BaseTransform"], [262, 1, 1, "", "CastONNXTransform"], [262, 1, 1, "", "CastPyTorchTransform"], [262, 1, 1, "", "CastTFTransform"], [262, 1, 1, "", "CenterCropTFTransform"], [262, 1, 1, "", "CenterCropTransform"], [262, 1, 1, "", "CollectTransform"], [262, 1, 1, "", "ComposeTransform"], [262, 1, 1, "", "CropResizeTFTransform"], [262, 1, 1, "", "CropResizeTransform"], [262, 1, 1, "", "CropToBoundingBox"], [262, 1, 1, "", "InputFeatures"], [262, 1, 1, "", "MXNetCropResizeTransform"], [262, 1, 1, "", "MXNetCropToBoundingBox"], [262, 1, 1, "", "MXNetNormalizeTransform"], [262, 1, 1, "", "MXNetTransforms"], [262, 1, 1, "", "MXNetTranspose"], [262, 1, 1, "", "NormalizeTFTransform"], [262, 1, 1, "", "NormalizeTransform"], [262, 1, 1, "", "ONNXRTCropToBoundingBox"], [262, 1, 1, "", "ONNXRTITTransforms"], [262, 1, 1, "", "ONNXRTQLTransforms"], [262, 1, 1, "", "PaddedCenterCropTransform"], [262, 1, 1, "", "ParseDecodeVocTransform"], [262, 1, 1, "", "PyTorchAlignImageChannel"], [262, 1, 1, "", "PyTorchCropResizeTransform"], [262, 1, 1, "", "PyTorchNormalizeTransform"], [262, 1, 1, "", "PyTorchTransforms"], [262, 1, 1, "", "PyTorchTranspose"], [262, 1, 1, "", "PytorchMxnetTransform"], [262, 1, 1, "", "PytorchMxnetWrapFunction"], [262, 1, 1, "", "RandomCropTFTransform"], [262, 1, 1, "", "RandomCropTransform"], [262, 1, 1, "", "RandomHorizontalFlip"], [262, 1, 1, "", "RandomResizedCropMXNetTransform"], [262, 1, 1, "", "RandomResizedCropPytorchTransform"], [262, 1, 1, "", "RandomResizedCropTFTransform"], [262, 1, 1, "", "RandomResizedCropTransform"], [262, 1, 1, "", "RandomVerticalFlip"], [262, 1, 1, "", "RescaleKerasPretrainTransform"], [262, 1, 1, "", "RescaleTFTransform"], [262, 1, 1, "", "RescaleTransform"], [262, 1, 1, "", "ResizeMXNetTransform"], [262, 1, 1, "", "ResizePytorchTransform"], [262, 1, 1, "", "ResizeTFTransform"], [262, 1, 1, "", "ResizeTransform"], [262, 1, 1, "", "ResizeWithRatio"], [262, 1, 1, "", "SquadExample"], [262, 1, 1, "", "TFModelZooCollectTransform"], [262, 1, 1, "", "TFSquadV1ModelZooPostTransform"], [262, 1, 1, "", "TFSquadV1PostTransform"], [262, 1, 1, "", "TRANSFORMS"], [262, 1, 1, "", "TensorflowCropToBoundingBox"], [262, 1, 1, "", "TensorflowRandomHorizontalFlip"], [262, 1, 1, "", "TensorflowRandomVerticalFlip"], [262, 1, 1, "", "TensorflowResizeWithRatio"], [262, 1, 1, "", "TensorflowTransform"], [262, 1, 1, "", "TensorflowTransforms"], [262, 1, 1, "", "TensorflowTranspose"], [262, 1, 1, "", "TensorflowWrapFunction"], [262, 1, 1, "", "ToArray"], [262, 1, 1, "", "ToNDArrayTransform"], [262, 1, 1, "", "Transforms"], [262, 1, 1, "", "Transpose"], [262, 2, 1, "", "convert_examples_to_features"], [262, 2, 1, "", "get_final_text"], [262, 2, 1, "", "get_torchvision_map"], [262, 2, 1, "", "read_squad_examples"], [262, 2, 1, "", "transform_registry"]], "neural_compressor.experimental": [[263, 0, 0, "-", "benchmark"], [266, 0, 0, "-", "common"], [272, 0, 0, "-", "component"], [273, 0, 0, "-", "compression"], [274, 0, 0, "-", "contrib"], [299, 0, 0, "-", "data"], [304, 0, 0, "-", "distillation"], [305, 0, 0, "-", "export"], [309, 0, 0, "-", "graph_optimization"], [317, 0, 0, "-", "metric"], [319, 0, 0, "-", "mixed_precision"], [320, 0, 0, "-", "model_conversion"], [323, 0, 0, "-", "nas"], [329, 0, 0, "-", "pruner_legacy"], [333, 0, 0, "-", "pruning"], [334, 0, 0, "-", "pruning_recipes"], [338, 0, 0, "-", "pruning_v2"], [339, 0, 0, "-", "pytorch_pruner"], [346, 0, 0, "-", "quantization"], [347, 0, 0, "-", "scheduler"], [352, 0, 0, "-", "strategy"]], "neural_compressor.experimental.benchmark": [[263, 1, 1, "", "Benchmark"], [263, 2, 1, "", "get_architecture"], [263, 2, 1, "", "get_bounded_threads"], [263, 2, 1, "", "get_core_ids"], [263, 2, 1, "", "get_physical_ids"], [263, 2, 1, "", "get_threads"], [263, 2, 1, "", "get_threads_per_core"], [263, 2, 1, "", "set_all_env_var"], [263, 2, 1, "", "set_env_var"]], "neural_compressor.experimental.common": [[264, 0, 0, "-", "criterion"], [265, 0, 0, "-", "dataloader"], [267, 0, 0, "-", "metric"], [268, 0, 0, "-", "model"], [269, 0, 0, "-", "optimizer"], [270, 0, 0, "-", "postprocess"], [271, 0, 0, "-", "torch_utils"]], "neural_compressor.experimental.common.criterion": [[264, 1, 1, "", "Criterions"], [264, 1, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [264, 1, 1, "", "KnowledgeDistillationFramework"], [264, 1, 1, "", "KnowledgeDistillationLoss"], [264, 1, 1, "", "PyTorchCriterions"], [264, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [264, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [264, 1, 1, "", "PyTorchKnowledgeDistillationLoss"], [264, 1, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [264, 1, 1, "", "SelfKnowledgeDistillationLoss"], [264, 1, 1, "", "TensorflowCriterions"], [264, 1, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [264, 2, 1, "", "criterion_registry"]], "neural_compressor.experimental.common.dataloader": [[265, 1, 1, "", "DataLoader"]], "neural_compressor.experimental.common.metric": [[267, 1, 1, "", "Metric"]], "neural_compressor.experimental.common.model": [[268, 1, 1, "", "Model"], [268, 2, 1, "", "set_backend"]], "neural_compressor.experimental.common.optimizer": [[269, 1, 1, "", "Optimizers"], [269, 1, 1, "", "PyTorchOptimizers"], [269, 1, 1, "", "PyTorchSGD"], [269, 1, 1, "", "TensorFlowAdamW"], [269, 1, 1, "", "TensorFlowSGD"], [269, 1, 1, "", "TensorflowOptimizers"], [269, 2, 1, "", "optimizer_registry"]], "neural_compressor.experimental.common.postprocess": [[270, 1, 1, "", "Postprocess"]], "neural_compressor.experimental.common.torch_utils": [[271, 2, 1, "", "get_activation"], [271, 2, 1, "", "record_output"]], "neural_compressor.experimental.component": [[272, 1, 1, "", "Component"]], "neural_compressor.experimental.contrib": [[275, 0, 0, "-", "strategy"]], "neural_compressor.experimental.contrib.strategy": [[276, 0, 0, "-", "sigopt"], [277, 0, 0, "-", "tpe"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[276, 1, 1, "", "SigOptTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.tpe": [[277, 1, 1, "", "TpeTuneStrategy"]], "neural_compressor.experimental.data": [[282, 0, 0, "-", "dataloaders"], [294, 0, 0, "-", "datasets"], [298, 0, 0, "-", "filters"], [301, 0, 0, "-", "transforms"]], "neural_compressor.experimental.data.dataloaders": [[278, 0, 0, "-", "base_dataloader"], [279, 0, 0, "-", "dataloader"], [280, 0, 0, "-", "default_dataloader"], [281, 0, 0, "-", "fetcher"], [283, 0, 0, "-", "mxnet_dataloader"], [284, 0, 0, "-", "onnxrt_dataloader"], [285, 0, 0, "-", "pytorch_dataloader"], [286, 0, 0, "-", "sampler"], [287, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[278, 1, 1, "", "BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[280, 1, 1, "", "DefaultDataLoader"], [280, 2, 1, "", "default_collate"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[281, 1, 1, "", "Fetcher"], [281, 1, 1, "", "IndexFetcher"], [281, 1, 1, "", "IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[283, 1, 1, "", "MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[284, 1, 1, "", "ONNXRTBertDataLoader"], [284, 1, 1, "", "ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[285, 1, 1, "", "PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[286, 1, 1, "", "BatchSampler"], [286, 1, 1, "", "IterableSampler"], [286, 1, 1, "", "Sampler"], [286, 1, 1, "", "SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[287, 1, 1, "", "TFDataDataLoader"], [287, 1, 1, "", "TensorflowBertDataLoader"], [287, 1, 1, "", "TensorflowDataLoader"], [287, 1, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.datasets": [[288, 0, 0, "-", "bert_dataset"], [289, 0, 0, "-", "coco_dataset"], [290, 0, 0, "-", "dataset"], [291, 0, 0, "-", "dummy_dataset"], [292, 0, 0, "-", "dummy_dataset_v2"], [293, 0, 0, "-", "imagenet_dataset"], [295, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[288, 1, 1, "", "InputFeatures"], [288, 1, 1, "", "ONNXRTBertDataset"], [288, 1, 1, "", "ParseDecodeBert"], [288, 1, 1, "", "PytorchBertDataset"], [288, 1, 1, "", "TensorflowBertDataset"], [288, 1, 1, "", "TensorflowModelZooBertDataset"], [288, 2, 1, "", "convert_examples_to_features"], [288, 2, 1, "", "load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[289, 1, 1, "", "COCONpy"], [289, 1, 1, "", "COCORaw"], [289, 1, 1, "", "COCORecordDataset"], [289, 1, 1, "", "ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.dataset": [[290, 1, 1, "", "CIFAR10"], [290, 1, 1, "", "CIFAR100"], [290, 1, 1, "", "Dataset"], [290, 1, 1, "", "Datasets"], [290, 1, 1, "", "FashionMNIST"], [290, 1, 1, "", "ImageFolder"], [290, 1, 1, "", "IterableDataset"], [290, 1, 1, "", "MNIST"], [290, 1, 1, "", "MXNetCIFAR10"], [290, 1, 1, "", "MXNetCIFAR100"], [290, 1, 1, "", "MXNetDatasets"], [290, 1, 1, "", "MXNetFashionMNIST"], [290, 1, 1, "", "MXNetImageFolder"], [290, 1, 1, "", "MXNetMNIST"], [290, 1, 1, "", "ONNXRTITDatasets"], [290, 1, 1, "", "ONNXRTQLDatasets"], [290, 1, 1, "", "PyTorchDatasets"], [290, 1, 1, "", "PytorchCIFAR10"], [290, 1, 1, "", "PytorchCIFAR100"], [290, 1, 1, "", "PytorchFashionMNIST"], [290, 1, 1, "", "PytorchMNIST"], [290, 1, 1, "", "PytorchMxnetWrapDataset"], [290, 1, 1, "", "PytorchMxnetWrapFunction"], [290, 1, 1, "", "TensorflowCIFAR10"], [290, 1, 1, "", "TensorflowCIFAR100"], [290, 1, 1, "", "TensorflowDatasets"], [290, 1, 1, "", "TensorflowFashionMNIST"], [290, 1, 1, "", "TensorflowImageFolder"], [290, 1, 1, "", "TensorflowImageRecord"], [290, 1, 1, "", "TensorflowMNIST"], [290, 1, 1, "", "TensorflowTFRecordDataset"], [290, 1, 1, "", "TensorflowVOCRecord"], [290, 2, 1, "", "calculate_md5"], [290, 2, 1, "", "check_integrity"], [290, 2, 1, "", "dataset_registry"], [290, 2, 1, "", "download_url"], [290, 5, 1, "", "framework_datasets"], [290, 2, 1, "", "gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[291, 1, 1, "", "DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[292, 1, 1, "", "DummyDataset"], [292, 1, 1, "", "SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[293, 1, 1, "", "ImagenetRaw"], [293, 1, 1, "", "MXNetImagenetRaw"], [293, 1, 1, "", "ONNXRTImagenetDataset"], [293, 1, 1, "", "PytorchImagenetRaw"], [293, 1, 1, "", "TensorflowImagenetDataset"], [293, 1, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[295, 1, 1, "", "StyleTransferDataset"]], "neural_compressor.experimental.data.filters": [[296, 0, 0, "-", "coco_filter"], [297, 0, 0, "-", "filter"]], "neural_compressor.experimental.data.filters.coco_filter": [[296, 1, 1, "", "LabelBalanceCOCORawFilter"], [296, 1, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.filter": [[297, 1, 1, "", "FILTERS"], [297, 1, 1, "", "Filter"], [297, 1, 1, "", "MXNetFilters"], [297, 1, 1, "", "ONNXRTITFilters"], [297, 1, 1, "", "ONNXRTQLFilters"], [297, 1, 1, "", "PyTorchFilters"], [297, 1, 1, "", "TensorflowFilters"], [297, 2, 1, "", "filter_registry"]], "neural_compressor.experimental.data.transforms": [[300, 0, 0, "-", "imagenet_transform"], [302, 0, 0, "-", "tokenization"], [303, 0, 0, "-", "transform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[300, 1, 1, "", "BilinearImagenetTransform"], [300, 1, 1, "", "LabelShift"], [300, 1, 1, "", "ONNXResizeCropImagenetTransform"], [300, 1, 1, "", "OnnxBilinearImagenetTransform"], [300, 1, 1, "", "ParseDecodeImagenet"], [300, 1, 1, "", "ParseDecodeImagenetTransform"], [300, 1, 1, "", "QuantizedInput"], [300, 1, 1, "", "ResizeWithAspectRatio"], [300, 1, 1, "", "TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.tokenization": [[302, 1, 1, "", "BasicTokenizer"], [302, 1, 1, "", "FullTokenizer"], [302, 1, 1, "", "WordpieceTokenizer"], [302, 2, 1, "", "convert_by_vocab"], [302, 2, 1, "", "convert_to_unicode"], [302, 2, 1, "", "load_vocab"], [302, 2, 1, "", "whitespace_tokenize"]], "neural_compressor.experimental.data.transforms.transform": [[303, 1, 1, "", "AlignImageChannelTransform"], [303, 1, 1, "", "BaseTransform"], [303, 1, 1, "", "CastONNXTransform"], [303, 1, 1, "", "CastPyTorchTransform"], [303, 1, 1, "", "CastTFTransform"], [303, 1, 1, "", "CenterCropTFTransform"], [303, 1, 1, "", "CenterCropTransform"], [303, 1, 1, "", "CollectTransform"], [303, 1, 1, "", "ComposeTransform"], [303, 1, 1, "", "CropResizeTFTransform"], [303, 1, 1, "", "CropResizeTransform"], [303, 1, 1, "", "CropToBoundingBox"], [303, 1, 1, "", "InputFeatures"], [303, 1, 1, "", "MXNetCropResizeTransform"], [303, 1, 1, "", "MXNetCropToBoundingBox"], [303, 1, 1, "", "MXNetNormalizeTransform"], [303, 1, 1, "", "MXNetTransforms"], [303, 1, 1, "", "MXNetTranspose"], [303, 1, 1, "", "NormalizeTFTransform"], [303, 1, 1, "", "NormalizeTransform"], [303, 1, 1, "", "ONNXRTCropToBoundingBox"], [303, 1, 1, "", "ONNXRTITTransforms"], [303, 1, 1, "", "ONNXRTQLTransforms"], [303, 1, 1, "", "PaddedCenterCropTransform"], [303, 1, 1, "", "ParseDecodeVocTransform"], [303, 1, 1, "", "PyTorchAlignImageChannel"], [303, 1, 1, "", "PyTorchCropResizeTransform"], [303, 1, 1, "", "PyTorchNormalizeTransform"], [303, 1, 1, "", "PyTorchTransforms"], [303, 1, 1, "", "PyTorchTranspose"], [303, 1, 1, "", "PytorchMxnetTransform"], [303, 1, 1, "", "PytorchMxnetWrapFunction"], [303, 1, 1, "", "RandomCropTFTransform"], [303, 1, 1, "", "RandomCropTransform"], [303, 1, 1, "", "RandomHorizontalFlip"], [303, 1, 1, "", "RandomResizedCropMXNetTransform"], [303, 1, 1, "", "RandomResizedCropPytorchTransform"], [303, 1, 1, "", "RandomResizedCropTFTransform"], [303, 1, 1, "", "RandomResizedCropTransform"], [303, 1, 1, "", "RandomVerticalFlip"], [303, 1, 1, "", "RescaleKerasPretrainTransform"], [303, 1, 1, "", "RescaleTFTransform"], [303, 1, 1, "", "RescaleTransform"], [303, 1, 1, "", "ResizeMXNetTransform"], [303, 1, 1, "", "ResizePytorchTransform"], [303, 1, 1, "", "ResizeTFTransform"], [303, 1, 1, "", "ResizeTransform"], [303, 1, 1, "", "ResizeWithRatio"], [303, 1, 1, "", "SquadExample"], [303, 1, 1, "", "TFModelZooCollectTransform"], [303, 1, 1, "", "TFSquadV1ModelZooPostTransform"], [303, 1, 1, "", "TFSquadV1PostTransform"], [303, 1, 1, "", "TRANSFORMS"], [303, 1, 1, "", "TensorflowCropToBoundingBox"], [303, 1, 1, "", "TensorflowRandomHorizontalFlip"], [303, 1, 1, "", "TensorflowRandomVerticalFlip"], [303, 1, 1, "", "TensorflowResizeWithRatio"], [303, 1, 1, "", "TensorflowTransform"], [303, 1, 1, "", "TensorflowTransforms"], [303, 1, 1, "", "TensorflowTranspose"], [303, 1, 1, "", "TensorflowWrapFunction"], [303, 1, 1, "", "ToArray"], [303, 1, 1, "", "ToNDArrayTransform"], [303, 1, 1, "", "Transforms"], [303, 1, 1, "", "Transpose"], [303, 2, 1, "", "convert_examples_to_features"], [303, 2, 1, "", "get_final_text"], [303, 2, 1, "", "get_torchvision_map"], [303, 2, 1, "", "read_squad_examples"], [303, 2, 1, "", "transform_registry"]], "neural_compressor.experimental.distillation": [[304, 1, 1, "", "Distillation"]], "neural_compressor.experimental.distillation.Distillation": [[304, 4, 1, "", "_epoch_ran"], [304, 4, 1, "", "best_model"], [304, 4, 1, "", "best_score"], [304, 4, 1, "", "eval_frequency"]], "neural_compressor.experimental.export": [[306, 0, 0, "-", "qlinear2qdq"], [307, 0, 0, "-", "tf2onnx"], [308, 0, 0, "-", "torch2onnx"]], "neural_compressor.experimental.export.qlinear2qdq": [[306, 2, 1, "", "check_model"], [306, 2, 1, "", "onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.tf2onnx": [[307, 2, 1, "", "tf_to_fp32_onnx"], [307, 2, 1, "", "tf_to_int8_onnx"]], "neural_compressor.experimental.export.torch2onnx": [[308, 2, 1, "", "dynamic_quant_export"], [308, 2, 1, "", "get_node_mapping"], [308, 2, 1, "", "get_quantizable_onnx_ops"], [308, 2, 1, "", "static_quant_export"], [308, 2, 1, "", "torch_to_fp32_onnx"], [308, 2, 1, "", "torch_to_int8_onnx"]], "neural_compressor.experimental.graph_optimization": [[309, 1, 1, "", "Graph_Optimization"]], "neural_compressor.experimental.metric": [[311, 0, 0, "-", "bleu"], [312, 0, 0, "-", "bleu_util"], [313, 0, 0, "-", "coco_label_map"], [314, 0, 0, "-", "coco_tools"], [315, 0, 0, "-", "evaluate_squad"], [316, 0, 0, "-", "f1"], [318, 0, 0, "-", "metric"]], "neural_compressor.experimental.metric.bleu": [[311, 1, 1, "", "BLEU"], [311, 1, 1, "", "UnicodeRegex"], [311, 2, 1, "", "bleu_tokenize"]], "neural_compressor.experimental.metric.bleu.BLEU": [[311, 4, 1, "", "labels"], [311, 4, 1, "", "predictions"]], "neural_compressor.experimental.metric.bleu.UnicodeRegex": [[311, 4, 1, "", "nondigit_punct_re"], [311, 4, 1, "", "punct_nondigit_re"], [311, 4, 1, "", "symbol_re"]], "neural_compressor.experimental.metric.bleu_util": [[312, 2, 1, "", "compute_bleu"]], "neural_compressor.experimental.metric.coco_tools": [[314, 1, 1, "", "COCOEvalWrapper"], [314, 1, 1, "", "COCOWrapper"], [314, 2, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [314, 2, 1, "", "ExportSingleImageDetectionMasksToCoco"], [314, 2, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.experimental.metric.coco_tools.COCOWrapper": [[314, 4, 1, "", "dataset"], [314, 4, 1, "", "detection_type"]], "neural_compressor.experimental.metric.evaluate_squad": [[315, 2, 1, "", "evaluate"], [315, 2, 1, "", "exact_match_score"], [315, 2, 1, "", "f1_score"], [315, 2, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[316, 2, 1, "", "evaluate"], [316, 2, 1, "", "f1_score"], [316, 2, 1, "", "metric_max_over_ground_truths"], [316, 2, 1, "", "normalize_answer"]], "neural_compressor.experimental.metric.metric": [[318, 1, 1, "", "Accuracy"], [318, 1, 1, "", "BaseMetric"], [318, 1, 1, "", "COCOmAPv2"], [318, 1, 1, "", "F1"], [318, 1, 1, "", "GeneralTopK"], [318, 1, 1, "", "Loss"], [318, 1, 1, "", "MAE"], [318, 1, 1, "", "METRICS"], [318, 1, 1, "", "MSE"], [318, 1, 1, "", "MXNetMetrics"], [318, 1, 1, "", "ONNXRTGLUE"], [318, 1, 1, "", "ONNXRTITMetrics"], [318, 1, 1, "", "ONNXRTQLMetrics"], [318, 1, 1, "", "PyTorchLoss"], [318, 1, 1, "", "PyTorchMetrics"], [318, 1, 1, "", "RMSE"], [318, 1, 1, "", "ROC"], [318, 1, 1, "", "SquadF1"], [318, 1, 1, "", "TensorflowCOCOMAP"], [318, 1, 1, "", "TensorflowMAP"], [318, 1, 1, "", "TensorflowMetrics"], [318, 1, 1, "", "TensorflowTopK"], [318, 1, 1, "", "TensorflowVOCMAP"], [318, 1, 1, "", "WrapMXNetMetric"], [318, 1, 1, "", "WrapONNXRTMetric"], [318, 1, 1, "", "WrapPyTorchMetric"], [318, 1, 1, "", "mIOU"], [318, 2, 1, "", "metric_registry"]], "neural_compressor.experimental.metric.metric.Accuracy": [[318, 4, 1, "", "label_list"], [318, 4, 1, "", "pred_list"], [318, 4, 1, "", "sample"]], "neural_compressor.experimental.metric.metric.GeneralTopK": [[318, 4, 1, "", "k"], [318, 4, 1, "", "num_correct"], [318, 4, 1, "", "num_sample"]], "neural_compressor.experimental.metric.metric.Loss": [[318, 4, 1, "", "sample"], [318, 4, 1, "", "sum"]], "neural_compressor.experimental.metric.metric.MAE": [[318, 4, 1, "", "compare_label"], [318, 4, 1, "", "label_list"], [318, 4, 1, "", "pred_list"]], "neural_compressor.experimental.metric.metric.METRICS": [[318, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.MSE": [[318, 4, 1, "", "compare_label"], [318, 4, 1, "", "label_list"], [318, 4, 1, "", "pred_list"]], "neural_compressor.experimental.metric.metric.MXNetMetrics": [[318, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTITMetrics": [[318, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics": [[318, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.PyTorchMetrics": [[318, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.RMSE": [[318, 4, 1, "", "mse"]], "neural_compressor.experimental.metric.metric.TensorflowMetrics": [[318, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.TensorflowTopK": [[318, 4, 1, "", "k"], [318, 4, 1, "", "num_correct"], [318, 4, 1, "", "num_sample"]], "neural_compressor.experimental.mixed_precision": [[319, 1, 1, "", "MixedPrecision"]], "neural_compressor.experimental.model_conversion": [[320, 1, 1, "", "ModelConversion"]], "neural_compressor.experimental.nas": [[321, 0, 0, "-", "basic_nas"], [322, 0, 0, "-", "dynas"], [324, 0, 0, "-", "nas"], [325, 0, 0, "-", "nas_utils"], [326, 0, 0, "-", "search_algorithms"]], "neural_compressor.experimental.nas.basic_nas": [[321, 1, 1, "", "BasicNAS"]], "neural_compressor.experimental.nas.dynas": [[322, 1, 1, "", "DyNAS"]], "neural_compressor.experimental.nas.nas": [[324, 1, 1, "", "NAS"], [324, 1, 1, "", "NASBase"]], "neural_compressor.experimental.nas.nas_utils": [[325, 2, 1, "", "create_search_space_pool"], [325, 2, 1, "", "find_pareto_front"], [325, 2, 1, "", "nas_registry"]], "neural_compressor.experimental.nas.search_algorithms": [[326, 1, 1, "", "BayesianOptimizationSearcher"], [326, 1, 1, "", "GridSearcher"], [326, 1, 1, "", "RandomSearcher"], [326, 1, 1, "", "Searcher"]], "neural_compressor.experimental.pruner_legacy": [[327, 0, 0, "-", "gradient_sensitivity"], [328, 0, 0, "-", "group_lasso"], [330, 0, 0, "-", "magnitude"], [331, 0, 0, "-", "pattern_lock"], [332, 0, 0, "-", "pruner"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[327, 1, 1, "", "GradientSensitivityPruner"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[328, 1, 1, "", "GroupLassoPruner"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[330, 1, 1, "", "BasicMagnitudePruner"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[331, 1, 1, "", "PatternLockPruner"]], "neural_compressor.experimental.pruner_legacy.pruner": [[332, 1, 1, "", "Pruner"], [332, 2, 1, "", "pruner_registry"]], "neural_compressor.experimental.pruning": [[333, 1, 1, "", "Pruning"], [333, 1, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning.Pruning": [[333, 4, 1, "", "conf"], [333, 4, 1, "", "pruners"]], "neural_compressor.experimental.pruning_recipes": [[335, 0, 0, "-", "patterns"]], "neural_compressor.experimental.pruning_recipes.patterns": [[336, 0, 0, "-", "pattern"], [337, 0, 0, "-", "tile_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[336, 1, 1, "", "PATTERNS"], [336, 1, 1, "", "PatternBase"], [336, 2, 1, "", "pattern_registry"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS": [[336, 4, 1, "", "patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[337, 1, 1, "", "TilePatternBase"], [337, 1, 1, "", "TilePattern_1x1"], [337, 1, 1, "", "TilePattern_1x16"], [337, 1, 1, "", "TilePattern_1x2"], [337, 1, 1, "", "TilePattern_2x2"], [337, 1, 1, "", "TilePattern_4x1"]], "neural_compressor.experimental.pruning_v2": [[338, 1, 1, "", "Pruning"], [338, 1, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning_v2.Pruning": [[338, 4, 1, "", "conf"], [338, 4, 1, "", "pruners"]], "neural_compressor.experimental.pytorch_pruner": [[340, 0, 0, "-", "logger"], [341, 0, 0, "-", "patterns"], [342, 0, 0, "-", "prune_utils"], [343, 0, 0, "-", "pruner"], [344, 0, 0, "-", "pruning"], [345, 0, 0, "-", "scheduler"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[341, 1, 1, "", "Pattern"], [341, 1, 1, "", "PatternNInM"], [341, 1, 1, "", "PatternNxM"], [341, 2, 1, "", "get_pattern"], [341, 2, 1, "", "register_pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.Pattern": [[341, 4, 1, "", "is_global"], [341, 4, 1, "", "pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM": [[341, 4, 1, "", "M"], [341, 4, 1, "", "N"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM": [[341, 4, 1, "", "block_size"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[342, 2, 1, "", "check_config"], [342, 2, 1, "", "parse_not_to_prune"], [342, 2, 1, "", "parse_to_prune"], [342, 2, 1, "", "process_and_check_config"], [342, 2, 1, "", "process_config"], [342, 2, 1, "", "reset_non_value_to_default"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[343, 1, 1, "", "MagnitudePruner"], [343, 1, 1, "", "PatternLockPruner"], [343, 1, 1, "", "Pruner"], [343, 1, 1, "", "SnipMomentumPruner"], [343, 1, 1, "", "SnipPruner"], [343, 2, 1, "", "get_pruner"], [343, 2, 1, "", "register_pruners"]], "neural_compressor.experimental.pytorch_pruner.pruner.Pruner": [[343, 4, 1, "", "config"], [343, 4, 1, "", "current_sparsity_ratio"], [343, 4, 1, "", "end_step"], [343, 4, 1, "", "global_step"], [343, 4, 1, "", "masks"], [343, 4, 1, "", "max_sparsity_ratio_per_layer"], [343, 4, 1, "", "modules"], [343, 4, 1, "", "pattern"], [343, 4, 1, "", "scheduler"], [343, 4, 1, "", "scores"], [343, 4, 1, "", "start_step"], [343, 4, 1, "", "target_sparsity_ratio"], [343, 4, 1, "", "update_frequency_on_step"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[344, 1, 1, "", "Pruning"]], "neural_compressor.experimental.pytorch_pruner.pruning.Pruning": [[344, 4, 1, "", "config_file_path"], [344, 4, 1, "", "model"], [344, 4, 1, "", "pruner_info"], [344, 4, 1, "", "pruners"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[345, 1, 1, "", "IterativeScheduler"], [345, 1, 1, "", "OneshotScheduler"], [345, 1, 1, "", "Scheduler"], [345, 2, 1, "", "get_scheduler"], [345, 2, 1, "", "register_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler": [[345, 4, 1, "", "config"]], "neural_compressor.experimental.quantization": [[346, 1, 1, "", "Quantization"]], "neural_compressor.experimental.scheduler": [[347, 1, 1, "", "Scheduler"]], "neural_compressor.experimental.strategy": [[348, 0, 0, "-", "auto_mixed_precision"], [349, 0, 0, "-", "basic"], [350, 0, 0, "-", "bayesian"], [351, 0, 0, "-", "exhaustive"], [353, 0, 0, "-", "mse"], [354, 0, 0, "-", "mse_v2"], [355, 0, 0, "-", "random"], [356, 0, 0, "-", "strategy"], [358, 0, 0, "-", "utils"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[348, 1, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.experimental.strategy.basic": [[349, 1, 1, "", "BasicTuneStrategy"]], "neural_compressor.experimental.strategy.bayesian": [[350, 1, 1, "", "BayesianOptimization"], [350, 1, 1, "", "BayesianTuneStrategy"], [350, 1, 1, "", "TargetSpace"], [350, 2, 1, "", "acq_max"]], "neural_compressor.experimental.strategy.exhaustive": [[351, 1, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.experimental.strategy.mse": [[353, 1, 1, "", "MSETuneStrategy"]], "neural_compressor.experimental.strategy.mse_v2": [[354, 1, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.experimental.strategy.random": [[355, 1, 1, "", "RandomTuneStrategy"]], "neural_compressor.experimental.strategy.strategy": [[356, 1, 1, "", "TuneStrategy"], [356, 2, 1, "", "strategy_registry"]], "neural_compressor.experimental.strategy.utils": [[357, 0, 0, "-", "constant"], [359, 0, 0, "-", "tuning_sampler"], [360, 0, 0, "-", "tuning_space"], [361, 0, 0, "-", "tuning_structs"], [362, 0, 0, "-", "utility"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[359, 1, 1, "", "FallbackTuningSampler"], [359, 1, 1, "", "ModelWiseTuningSampler"], [359, 1, 1, "", "OpTypeWiseTuningSampler"], [359, 1, 1, "", "OpWiseTuningSampler"], [359, 1, 1, "", "SmoothQuantSampler"], [359, 1, 1, "", "TuningOrder"], [359, 1, 1, "", "TuningSampler"], [359, 1, 1, "", "TuningSamplerRegistry"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[360, 1, 1, "", "TuningItem"], [360, 1, 1, "", "TuningSpace"], [360, 2, 1, "", "initial_tuning_cfg_with_quant_mode"], [360, 2, 1, "", "pattern_to_internal"], [360, 2, 1, "", "pattern_to_path"], [360, 2, 1, "", "quant_mode_from_pattern"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[361, 1, 1, "", "OpTuningConfig"]], "neural_compressor.experimental.strategy.utils.utility": [[362, 1, 1, "", "OrderedDefaultDict"], [362, 2, 1, "", "extract_data_type"], [362, 2, 1, "", "get_adaptor_name"], [362, 2, 1, "", "reverted_data_type"]], "neural_compressor.metric": [[364, 0, 0, "-", "bleu"], [365, 0, 0, "-", "bleu_util"], [366, 0, 0, "-", "coco_label_map"], [367, 0, 0, "-", "coco_tools"], [368, 0, 0, "-", "evaluate_squad"], [369, 0, 0, "-", "f1"], [371, 0, 0, "-", "metric"]], "neural_compressor.metric.bleu": [[364, 1, 1, "", "BLEU"], [364, 1, 1, "", "UnicodeRegex"], [364, 2, 1, "", "bleu_tokenize"]], "neural_compressor.metric.bleu.BLEU": [[364, 4, 1, "", "labels"], [364, 4, 1, "", "predictions"]], "neural_compressor.metric.bleu.UnicodeRegex": [[364, 4, 1, "", "nondigit_punct_re"], [364, 4, 1, "", "punct_nondigit_re"], [364, 4, 1, "", "symbol_re"]], "neural_compressor.metric.bleu_util": [[365, 2, 1, "", "compute_bleu"]], "neural_compressor.metric.coco_tools": [[367, 1, 1, "", "COCOEvalWrapper"], [367, 1, 1, "", "COCOWrapper"], [367, 2, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [367, 2, 1, "", "ExportSingleImageDetectionMasksToCoco"], [367, 2, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.metric.coco_tools.COCOWrapper": [[367, 4, 1, "", "dataset"], [367, 4, 1, "", "detection_type"]], "neural_compressor.metric.evaluate_squad": [[368, 2, 1, "", "evaluate"], [368, 2, 1, "", "exact_match_score"], [368, 2, 1, "", "f1_score"], [368, 2, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[369, 2, 1, "", "evaluate"], [369, 2, 1, "", "f1_score"], [369, 2, 1, "", "metric_max_over_ground_truths"], [369, 2, 1, "", "normalize_answer"]], "neural_compressor.metric.metric": [[371, 1, 1, "", "Accuracy"], [371, 1, 1, "", "BaseMetric"], [371, 1, 1, "", "COCOmAPv2"], [371, 1, 1, "", "F1"], [371, 1, 1, "", "GeneralTopK"], [371, 1, 1, "", "Loss"], [371, 1, 1, "", "MAE"], [371, 1, 1, "", "METRICS"], [371, 1, 1, "", "MSE"], [371, 1, 1, "", "MXNetMetrics"], [371, 1, 1, "", "Metric"], [371, 1, 1, "", "ONNXRTGLUE"], [371, 1, 1, "", "ONNXRTITMetrics"], [371, 1, 1, "", "ONNXRTQLMetrics"], [371, 1, 1, "", "PyTorchLoss"], [371, 1, 1, "", "PyTorchMetrics"], [371, 1, 1, "", "RMSE"], [371, 1, 1, "", "ROC"], [371, 1, 1, "", "SquadF1"], [371, 1, 1, "", "TensorflowCOCOMAP"], [371, 1, 1, "", "TensorflowMAP"], [371, 1, 1, "", "TensorflowMetrics"], [371, 1, 1, "", "TensorflowTopK"], [371, 1, 1, "", "TensorflowVOCMAP"], [371, 1, 1, "", "WrapMXNetMetric"], [371, 1, 1, "", "WrapONNXRTMetric"], [371, 1, 1, "", "WrapPyTorchMetric"], [371, 1, 1, "", "mIOU"], [371, 2, 1, "", "metric_registry"], [371, 2, 1, "", "register_customer_metric"]], "neural_compressor.metric.metric.Accuracy": [[371, 4, 1, "", "label_list"], [371, 4, 1, "", "pred_list"], [371, 4, 1, "", "sample"]], "neural_compressor.metric.metric.GeneralTopK": [[371, 4, 1, "", "k"], [371, 4, 1, "", "num_correct"], [371, 4, 1, "", "num_sample"]], "neural_compressor.metric.metric.Loss": [[371, 4, 1, "", "sample"], [371, 4, 1, "", "sum"]], "neural_compressor.metric.metric.MAE": [[371, 4, 1, "", "compare_label"], [371, 4, 1, "", "label_list"], [371, 4, 1, "", "pred_list"]], "neural_compressor.metric.metric.METRICS": [[371, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.MSE": [[371, 4, 1, "", "compare_label"], [371, 4, 1, "", "label_list"], [371, 4, 1, "", "pred_list"]], "neural_compressor.metric.metric.MXNetMetrics": [[371, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTITMetrics": [[371, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTQLMetrics": [[371, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.PyTorchMetrics": [[371, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.RMSE": [[371, 4, 1, "", "mse"]], "neural_compressor.metric.metric.TensorflowMetrics": [[371, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.TensorflowTopK": [[371, 4, 1, "", "k"], [371, 4, 1, "", "num_correct"], [371, 4, 1, "", "num_sample"]], "neural_compressor.mix_precision": [[372, 2, 1, "", "fit"]], "neural_compressor.model": [[373, 0, 0, "-", "base_model"], [375, 0, 0, "-", "keras_model"], [376, 0, 0, "-", "model"], [377, 0, 0, "-", "mxnet_model"], [378, 0, 0, "-", "nets_factory"], [379, 0, 0, "-", "onnx_model"], [380, 0, 0, "-", "tensorflow_model"], [381, 0, 0, "-", "torch_model"]], "neural_compressor.model.base_model": [[373, 1, 1, "", "BaseModel"]], "neural_compressor.model.keras_model": [[375, 1, 1, "", "KerasModel"]], "neural_compressor.model.model": [[376, 1, 1, "", "Model"], [376, 2, 1, "", "get_model_fwk_name"]], "neural_compressor.model.mxnet_model": [[377, 1, 1, "", "MXNetModel"]], "neural_compressor.model.nets_factory": [[378, 1, 1, "", "TFSlimNetsFactory"]], "neural_compressor.model.onnx_model": [[379, 1, 1, "", "ONNXModel"]], "neural_compressor.model.tensorflow_model": [[380, 1, 1, "", "TensorflowBaseModel"], [380, 1, 1, "", "TensorflowCheckpointModel"], [380, 1, 1, "", "TensorflowLLMModel"], [380, 1, 1, "", "TensorflowModel"], [380, 1, 1, "", "TensorflowQATModel"], [380, 1, 1, "", "TensorflowSavedModelModel"], [380, 2, 1, "", "checkpoint_session"], [380, 2, 1, "", "estimator_session"], [380, 2, 1, "", "frozen_pb_session"], [380, 2, 1, "", "get_model_type"], [380, 2, 1, "", "graph_def_session"], [380, 2, 1, "", "graph_session"], [380, 2, 1, "", "keras_session"], [380, 2, 1, "", "load_saved_model"], [380, 2, 1, "", "saved_model_session"], [380, 2, 1, "", "slim_session"], [380, 2, 1, "", "validate_and_inference_input_output"], [380, 2, 1, "", "validate_graph_node"]], "neural_compressor.model.torch_model": [[381, 1, 1, "", "IPEXModel"], [381, 1, 1, "", "PyTorchBaseModel"], [381, 1, 1, "", "PyTorchFXModel"], [381, 1, 1, "", "PyTorchModel"]], "neural_compressor.objective": [[382, 1, 1, "", "Accuracy"], [382, 1, 1, "", "Footprint"], [382, 1, 1, "", "ModelSize"], [382, 1, 1, "", "MultiObjective"], [382, 1, 1, "", "Objective"], [382, 1, 1, "", "Performance"], [382, 2, 1, "", "objective_custom_registry"], [382, 2, 1, "", "objective_registry"]], "neural_compressor.onnxrt": [[383, 0, 0, "-", "algorithms"], [397, 0, 0, "-", "quantization"], [399, 0, 0, "-", "utils"]], "neural_compressor.onnxrt.algorithms": [[386, 0, 0, "-", "smoother"], [389, 0, 0, "-", "weight_only"]], "neural_compressor.onnxrt.algorithms.smoother": [[384, 0, 0, "-", "calibrator"], [385, 0, 0, "-", "core"]], "neural_compressor.onnxrt.algorithms.smoother.calibrator": [[384, 1, 1, "", "Calibrator"]], "neural_compressor.onnxrt.algorithms.smoother.core": [[385, 1, 1, "", "Smoother"]], "neural_compressor.onnxrt.algorithms.weight_only": [[387, 0, 0, "-", "awq"], [388, 0, 0, "-", "gptq"], [390, 0, 0, "-", "rtn"], [391, 0, 0, "-", "utility"]], "neural_compressor.onnxrt.algorithms.weight_only.awq": [[387, 2, 1, "", "apply_awq_on_model"], [387, 2, 1, "", "awq_quantize"]], "neural_compressor.onnxrt.algorithms.weight_only.gptq": [[388, 2, 1, "", "apply_gptq_on_model"], [388, 2, 1, "", "gptq_quantize"]], "neural_compressor.onnxrt.algorithms.weight_only.rtn": [[390, 2, 1, "", "apply_rtn_on_model"], [390, 2, 1, "", "rtn_quantize"]], "neural_compressor.onnxrt.algorithms.weight_only.utility": [[391, 2, 1, "", "make_matmul_weight_only_node"], [391, 2, 1, "", "pad_tensor"], [391, 2, 1, "", "prepare_inputs"], [391, 2, 1, "", "qdq_tensor"], [391, 2, 1, "", "quant_tensor"]], "neural_compressor.onnxrt.quantization": [[393, 0, 0, "-", "algorithm_entry"], [394, 0, 0, "-", "autotune"], [395, 0, 0, "-", "calibrate"], [396, 0, 0, "-", "config"], [398, 0, 0, "-", "quantize"]], "neural_compressor.onnxrt.quantization.algorithm_entry": [[393, 2, 1, "", "awq_quantize_entry"], [393, 2, 1, "", "gptq_quantize_entry"], [393, 2, 1, "", "rtn_quantize_entry"], [393, 2, 1, "", "smooth_quant_entry"]], "neural_compressor.onnxrt.quantization.autotune": [[394, 2, 1, "", "autotune"]], "neural_compressor.onnxrt.quantization.calibrate": [[395, 1, 1, "", "CalibrationDataReader"]], "neural_compressor.onnxrt.quantization.config": [[396, 1, 1, "", "AWQConfig"], [396, 1, 1, "", "GPTQConfig"], [396, 1, 1, "", "RTNConfig"], [396, 1, 1, "", "SmoohQuantConfig"], [396, 2, 1, "", "get_default_awq_config"], [396, 2, 1, "", "get_default_gptq_config"], [396, 2, 1, "", "get_default_rtn_config"], [396, 2, 1, "", "get_default_sq_config"]], "neural_compressor.onnxrt.utils": [[400, 0, 0, "-", "onnx_model"], [401, 0, 0, "-", "utility"]], "neural_compressor.onnxrt.utils.onnx_model": [[400, 1, 1, "", "ONNXModel"]], "neural_compressor.onnxrt.utils.utility": [[401, 2, 1, "", "find_by_name"], [401, 2, 1, "", "get_qrange_for_qType"], [401, 2, 1, "", "is_B_transposed"], [401, 2, 1, "", "quantize_data"], [401, 2, 1, "", "register_algo"], [401, 2, 1, "", "simple_progress_bar"]], "neural_compressor.profiling": [[404, 0, 0, "-", "parser"], [414, 0, 0, "-", "profiler"]], "neural_compressor.profiling.parser": [[403, 0, 0, "-", "factory"], [406, 0, 0, "-", "onnx_parser"], [408, 0, 0, "-", "parser"], [409, 0, 0, "-", "result"], [411, 0, 0, "-", "tensorflow_parser"]], "neural_compressor.profiling.parser.factory": [[403, 1, 1, "", "ParserFactory"]], "neural_compressor.profiling.parser.onnx_parser": [[405, 0, 0, "-", "factory"], [407, 0, 0, "-", "parser"]], "neural_compressor.profiling.parser.onnx_parser.factory": [[405, 1, 1, "", "OnnxrtParserFactory"]], "neural_compressor.profiling.parser.onnx_parser.parser": [[407, 1, 1, "", "OnnxProfilingParser"]], "neural_compressor.profiling.parser.parser": [[408, 1, 1, "", "ProfilingParser"]], "neural_compressor.profiling.parser.result": [[409, 1, 1, "", "ProfilingResult"]], "neural_compressor.profiling.parser.tensorflow_parser": [[410, 0, 0, "-", "factory"], [412, 0, 0, "-", "parser"]], "neural_compressor.profiling.parser.tensorflow_parser.factory": [[410, 1, 1, "", "TensorFlowParserFactory"]], "neural_compressor.profiling.parser.tensorflow_parser.parser": [[412, 1, 1, "", "TensorFlowProfilingParser"]], "neural_compressor.profiling.profiler": [[413, 0, 0, "-", "factory"], [416, 0, 0, "-", "onnxrt_profiler"], [419, 0, 0, "-", "profiler"], [421, 0, 0, "-", "tensorflow_profiler"]], "neural_compressor.profiling.profiler.factory": [[413, 1, 1, "", "ProfilerFactory"]], "neural_compressor.profiling.profiler.onnxrt_profiler": [[415, 0, 0, "-", "factory"], [417, 0, 0, "-", "profiler"], [418, 0, 0, "-", "utils"]], "neural_compressor.profiling.profiler.onnxrt_profiler.factory": [[415, 1, 1, "", "ProfilerFactory"]], "neural_compressor.profiling.profiler.onnxrt_profiler.profiler": [[417, 1, 1, "", "Profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.utils": [[418, 2, 1, "", "create_onnx_config"]], "neural_compressor.profiling.profiler.profiler": [[419, 1, 1, "", "Profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler": [[420, 0, 0, "-", "factory"], [422, 0, 0, "-", "profiler"], [423, 0, 0, "-", "utils"]], "neural_compressor.profiling.profiler.tensorflow_profiler.factory": [[420, 1, 1, "", "ProfilerFactory"]], "neural_compressor.profiling.profiler.tensorflow_profiler.profiler": [[422, 1, 1, "", "Profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.utils": [[423, 2, 1, "", "create_tf_config"], [423, 2, 1, "", "delete_assign"], [423, 2, 1, "", "set_eager_execution"]], "neural_compressor.quantization": [[424, 2, 1, "", "fit"]], "neural_compressor.strategy": [[425, 0, 0, "-", "auto"], [426, 0, 0, "-", "auto_mixed_precision"], [427, 0, 0, "-", "basic"], [428, 0, 0, "-", "bayesian"], [429, 0, 0, "-", "conservative"], [430, 0, 0, "-", "exhaustive"], [431, 0, 0, "-", "hawq_v2"], [433, 0, 0, "-", "mse"], [434, 0, 0, "-", "mse_v2"], [435, 0, 0, "-", "random"], [436, 0, 0, "-", "strategy"], [438, 0, 0, "-", "utils"]], "neural_compressor.strategy.auto": [[425, 1, 1, "", "AutoTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[426, 1, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.basic": [[427, 1, 1, "", "BasicTuneStrategy"]], "neural_compressor.strategy.bayesian": [[428, 1, 1, "", "BayesianOptimization"], [428, 1, 1, "", "BayesianTuneStrategy"], [428, 1, 1, "", "TargetSpace"], [428, 2, 1, "", "acq_max"]], "neural_compressor.strategy.conservative": [[429, 1, 1, "", "ConservativeTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[430, 1, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[431, 1, 1, "", "HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.mse": [[433, 1, 1, "", "MSETuneStrategy"]], "neural_compressor.strategy.mse_v2": [[434, 1, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.strategy.random": [[435, 1, 1, "", "RandomTuneStrategy"]], "neural_compressor.strategy.strategy": [[436, 1, 1, "", "TuneStrategy"], [436, 1, 1, "", "TuneStrategyMeta"], [436, 2, 1, "", "strategy_registry"]], "neural_compressor.strategy.utils": [[437, 0, 0, "-", "constant"], [439, 0, 0, "-", "tuning_sampler"], [440, 0, 0, "-", "tuning_space"], [441, 0, 0, "-", "tuning_structs"], [442, 0, 0, "-", "utility"]], "neural_compressor.strategy.utils.tuning_sampler": [[439, 1, 1, "", "BlockFallbackTuningSampler"], [439, 1, 1, "", "FallbackTuningSampler"], [439, 1, 1, "", "LowerBitsSampler"], [439, 1, 1, "", "ModelWiseTuningSampler"], [439, 1, 1, "", "OpTypeWiseTuningSampler"], [439, 1, 1, "", "OpWiseTuningSampler"], [439, 1, 1, "", "SmoothQuantSampler"], [439, 1, 1, "", "TuningOrder"], [439, 1, 1, "", "TuningSampler"], [439, 1, 1, "", "WeightOnlyQuantSampler"]], "neural_compressor.strategy.utils.tuning_space": [[440, 1, 1, "", "TuningItem"], [440, 1, 1, "", "TuningSpace"], [440, 2, 1, "", "initial_tuning_cfg_with_quant_mode"], [440, 2, 1, "", "pattern_to_internal"], [440, 2, 1, "", "pattern_to_path"], [440, 2, 1, "", "quant_mode_from_pattern"]], "neural_compressor.strategy.utils.tuning_structs": [[441, 1, 1, "", "OpTuningConfig"]], "neural_compressor.strategy.utils.utility": [[442, 1, 1, "", "ClassRegister"], [442, 1, 1, "", "OrderedDefaultDict"], [442, 1, 1, "", "QuantOptions"], [442, 1, 1, "", "QuantType"], [442, 2, 1, "", "build_slave_faker_model"], [442, 2, 1, "", "extract_data_type"], [442, 2, 1, "", "get_adaptor_name"], [442, 2, 1, "", "preprocess_user_cfg"], [442, 2, 1, "", "reverted_data_type"]], "neural_compressor.template": [[443, 0, 0, "-", "api_doc_example"]], "neural_compressor.template.api_doc_example": [[443, 1, 1, "", "ExampleClass"], [443, 4, 1, "", "attribute1"], [443, 2, 1, "", "function1"], [443, 2, 1, "", "function2"], [443, 2, 1, "", "function3"], [443, 2, 1, "", "generator1"], [443, 5, 1, "", "module_debug_level1"]], "neural_compressor.template.api_doc_example.ExampleClass": [[443, 4, 1, "", "attr1"], [443, 4, 1, "", "attr2"], [443, 4, 1, "", "attr5"]], "neural_compressor.tensorflow": [[445, 0, 0, "-", "algorithms"], [454, 0, 0, "-", "keras"], [467, 0, 0, "-", "quantization"], [564, 0, 0, "-", "utils"]], "neural_compressor.tensorflow.algorithms": [[448, 0, 0, "-", "smoother"], [450, 0, 0, "-", "static_quant"]], "neural_compressor.tensorflow.algorithms.smoother": [[446, 0, 0, "-", "calibration"], [447, 0, 0, "-", "core"], [449, 0, 0, "-", "scaler"]], "neural_compressor.tensorflow.algorithms.smoother.calibration": [[446, 1, 1, "", "SmoothQuantCalibration"], [446, 1, 1, "", "SmoothQuantCalibrationLLM"]], "neural_compressor.tensorflow.algorithms.smoother.core": [[447, 1, 1, "", "SmoothQuant"]], "neural_compressor.tensorflow.algorithms.smoother.scaler": [[449, 1, 1, "", "SmoothQuantScaler"], [449, 1, 1, "", "SmoothQuantScalerLLM"]], "neural_compressor.tensorflow.algorithms.static_quant": [[451, 0, 0, "-", "keras"], [452, 0, 0, "-", "tensorflow"]], "neural_compressor.tensorflow.algorithms.static_quant.keras": [[451, 1, 1, "", "KerasAdaptor"], [451, 1, 1, "", "KerasConfigConverter"], [451, 1, 1, "", "KerasQuery"]], "neural_compressor.tensorflow.algorithms.static_quant.tensorflow": [[452, 1, 1, "", "TensorFlowAdaptor"], [452, 1, 1, "", "TensorFlowConfig"], [452, 1, 1, "", "TensorflowConfigConverter"], [452, 1, 1, "", "TensorflowQuery"], [452, 1, 1, "", "Tensorflow_ITEXAdaptor"]], "neural_compressor.tensorflow.keras": [[458, 0, 0, "-", "layers"], [463, 0, 0, "-", "quantization"]], "neural_compressor.tensorflow.keras.layers": [[455, 0, 0, "-", "conv2d"], [456, 0, 0, "-", "dense"], [457, 0, 0, "-", "depthwise_conv2d"], [459, 0, 0, "-", "pool2d"], [460, 0, 0, "-", "quantizer"], [461, 0, 0, "-", "separable_conv2d"]], "neural_compressor.tensorflow.keras.quantization": [[462, 0, 0, "-", "config"]], "neural_compressor.tensorflow.keras.quantization.config": [[462, 1, 1, "", "StaticQuantConfig"], [462, 2, 1, "", "get_all_registered_configs"], [462, 2, 1, "", "get_default_static_quant_config"]], "neural_compressor.tensorflow.quantization": [[464, 0, 0, "-", "algorithm_entry"], [465, 0, 0, "-", "autotune"], [466, 0, 0, "-", "config"], [468, 0, 0, "-", "quantize"], [527, 0, 0, "-", "utils"]], "neural_compressor.tensorflow.quantization.algorithm_entry": [[464, 2, 1, "", "static_quant_entry"]], "neural_compressor.tensorflow.quantization.autotune": [[465, 2, 1, "", "autotune"]], "neural_compressor.tensorflow.quantization.config": [[466, 1, 1, "", "SmoothQuantConfig"], [466, 1, 1, "", "StaticQuantConfig"], [466, 2, 1, "", "get_default_sq_config"], [466, 2, 1, "", "get_default_static_quant_config"]], "neural_compressor.tensorflow.quantization.quantize": [[468, 2, 1, "", "quantize_model"], [468, 2, 1, "", "quantize_model_with_single_config"]], "neural_compressor.tensorflow.quantization.utils": [[469, 0, 0, "-", "graph_converter"], [470, 0, 0, "-", "graph_converter_without_calib"], [508, 0, 0, "-", "graph_rewriter"], [526, 0, 0, "-", "graph_util"], [528, 0, 0, "-", "quantize_graph"], [555, 0, 0, "-", "quantize_graph_common"], [558, 0, 0, "-", "transform_graph"], [561, 0, 0, "-", "utility"]], "neural_compressor.tensorflow.quantization.utils.graph_converter": [[469, 1, 1, "", "GraphConverter"]], "neural_compressor.tensorflow.quantization.utils.graph_converter_without_calib": [[470, 1, 1, "", "GraphConverterWithoutCalib"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter": [[473, 0, 0, "-", "bf16"], [497, 0, 0, "-", "generic"], [507, 0, 0, "-", "graph_base"], [516, 0, 0, "-", "int8"], [522, 0, 0, "-", "qdq"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16": [[471, 0, 0, "-", "bf16_convert"], [472, 0, 0, "-", "dequantize_cast_optimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.bf16_convert": [[471, 1, 1, "", "BF16Convert"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.dequantize_cast_optimizer": [[472, 1, 1, "", "DequantizeCastOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic": [[474, 0, 0, "-", "convert_add_to_biasadd"], [475, 0, 0, "-", "convert_layout"], [476, 0, 0, "-", "convert_leakyrelu"], [477, 0, 0, "-", "convert_nan_to_random"], [478, 0, 0, "-", "convert_placeholder_to_const"], [479, 0, 0, "-", "dilated_contraction"], [480, 0, 0, "-", "dummy_biasadd"], [481, 0, 0, "-", "expanddims_optimizer"], [482, 0, 0, "-", "fetch_weight_from_reshape"], [483, 0, 0, "-", "fold_batch_norm"], [484, 0, 0, "-", "fold_constant"], [485, 0, 0, "-", "fuse_biasadd_add"], [486, 0, 0, "-", "fuse_column_wise_mul"], [487, 0, 0, "-", "fuse_conv_with_math"], [488, 0, 0, "-", "fuse_decomposed_bn"], [489, 0, 0, "-", "fuse_decomposed_in"], [490, 0, 0, "-", "fuse_gelu"], [491, 0, 0, "-", "fuse_layer_norm"], [492, 0, 0, "-", "fuse_pad_with_conv"], [493, 0, 0, "-", "fuse_pad_with_fp32_conv"], [494, 0, 0, "-", "fuse_reshape_transpose"], [495, 0, 0, "-", "graph_cse_optimizer"], [496, 0, 0, "-", "grappler_pass"], [498, 0, 0, "-", "insert_print_node"], [499, 0, 0, "-", "move_squeeze_after_relu"], [500, 0, 0, "-", "pre_optimize"], [501, 0, 0, "-", "remove_training_nodes"], [502, 0, 0, "-", "rename_batch_norm"], [503, 0, 0, "-", "split_shared_input"], [504, 0, 0, "-", "strip_equivalent_nodes"], [505, 0, 0, "-", "strip_unused_nodes"], [506, 0, 0, "-", "switch_optimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd": [[474, 1, 1, "", "ConvertAddToBiasAddOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout": [[475, 1, 1, "", "ConvertLayoutOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu": [[476, 1, 1, "", "ConvertLeakyReluOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random": [[477, 1, 1, "", "ConvertNanToRandom"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const": [[478, 1, 1, "", "ConvertPlaceholderToConst"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction": [[479, 1, 1, "", "DilatedContraction"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd": [[480, 1, 1, "", "InjectDummyBiasAddOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer": [[481, 1, 1, "", "ExpandDimsOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape": [[482, 1, 1, "", "FetchWeightFromReshapeOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm": [[483, 1, 1, "", "FoldBatchNormNodesOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant": [[484, 1, 1, "", "GraphFoldConstantOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add": [[485, 1, 1, "", "FuseBiasAddAndAddOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul": [[486, 1, 1, "", "FuseColumnWiseMulOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math": [[487, 1, 1, "", "FuseConvWithMathOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn": [[488, 1, 1, "", "FuseDecomposedBNOptimizer"], [488, 2, 1, "", "bypass_reshape"], [488, 2, 1, "", "get_const_dim_count"], [488, 2, 1, "", "node_from_map"], [488, 2, 1, "", "node_name_from_input"], [488, 2, 1, "", "valid_reshape_inputs"], [488, 2, 1, "", "values_from_const"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in": [[489, 1, 1, "", "FuseDecomposedINOptimizer"], [489, 2, 1, "", "bypass_reshape"], [489, 2, 1, "", "get_const_dim_count"], [489, 2, 1, "", "node_from_map"], [489, 2, 1, "", "node_name_from_input"], [489, 2, 1, "", "valid_reshape_inputs"], [489, 2, 1, "", "values_from_const"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu": [[490, 1, 1, "", "FuseGeluOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm": [[491, 1, 1, "", "FuseLayerNormOptimizer"], [491, 2, 1, "", "node_from_map"], [491, 2, 1, "", "node_name_from_input"], [491, 2, 1, "", "values_from_const"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv": [[492, 1, 1, "", "FusePadWithConv2DOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[493, 1, 1, "", "FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose": [[494, 1, 1, "", "FuseTransposeReshapeOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer": [[495, 1, 1, "", "GraphCseOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass": [[496, 1, 1, "", "GrapplerOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node": [[498, 1, 1, "", "InsertPrintMinMaxNode"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu": [[499, 1, 1, "", "MoveSqueezeAfterReluOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize": [[500, 1, 1, "", "PreOptimization"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes": [[501, 1, 1, "", "RemoveTrainingNodesOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm": [[502, 1, 1, "", "RenameBatchNormOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input": [[503, 1, 1, "", "SplitSharedInputOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes": [[504, 1, 1, "", "StripEquivalentNodesOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes": [[505, 1, 1, "", "StripUnusedNodesOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer": [[506, 1, 1, "", "SwitchOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base": [[507, 1, 1, "", "GraphRewriterBase"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8": [[509, 0, 0, "-", "freeze_fake_quant"], [510, 0, 0, "-", "freeze_value"], [511, 0, 0, "-", "freeze_value_without_calib"], [512, 0, 0, "-", "fuse_conv_redundant_dequantize"], [513, 0, 0, "-", "fuse_conv_requantize"], [514, 0, 0, "-", "fuse_matmul_redundant_dequantize"], [515, 0, 0, "-", "fuse_matmul_requantize"], [517, 0, 0, "-", "meta_op_optimizer"], [518, 0, 0, "-", "post_hostconst_converter"], [519, 0, 0, "-", "post_quantized_op_cse"], [520, 0, 0, "-", "rnn_convert"], [521, 0, 0, "-", "scale_propagation"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_fake_quant": [[509, 1, 1, "", "FreezeFakeQuantOpOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value": [[510, 1, 1, "", "FreezeValueTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value_without_calib": [[511, 1, 1, "", "FreezeValueWithoutCalibTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[512, 1, 1, "", "FuseConvRedundantDequantizeTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_requantize": [[513, 1, 1, "", "FuseConvRequantizeTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[514, 1, 1, "", "FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize": [[515, 1, 1, "", "FuseMatMulRequantizeDequantizeNewAPITransformer"], [515, 1, 1, "", "FuseMatMulRequantizeDequantizeTransformer"], [515, 1, 1, "", "FuseMatMulRequantizeNewAPITransformer"], [515, 1, 1, "", "FuseMatMulRequantizeTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.meta_op_optimizer": [[517, 1, 1, "", "MetaInfoChangingMemOpOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_hostconst_converter": [[518, 1, 1, "", "PostHostConstConverter"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_quantized_op_cse": [[519, 1, 1, "", "PostCseOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.rnn_convert": [[520, 1, 1, "", "QuantizedRNNConverter"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.scale_propagation": [[521, 1, 1, "", "ScaleProPagationTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq": [[523, 0, 0, "-", "insert_qdq_pattern"], [524, 0, 0, "-", "merge_duplicated_qdq"], [525, 0, 0, "-", "share_qdq_y_pattern"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.insert_qdq_pattern": [[523, 1, 1, "", "GenerateGraphWithQDQPattern"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.merge_duplicated_qdq": [[524, 1, 1, "", "MergeDuplicatedQDQOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.share_qdq_y_pattern": [[525, 1, 1, "", "ShareQDQForItexYPatternOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_util": [[526, 1, 1, "", "GraphAnalyzer"], [526, 1, 1, "", "GraphRewriterHelper"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph": [[530, 0, 0, "-", "qat"], [546, 0, 0, "-", "qdq"], [548, 0, 0, "-", "quantize_graph_base"], [549, 0, 0, "-", "quantize_graph_bn"], [550, 0, 0, "-", "quantize_graph_concatv2"], [551, 0, 0, "-", "quantize_graph_conv"], [552, 0, 0, "-", "quantize_graph_for_intel_cpu"], [553, 0, 0, "-", "quantize_graph_matmul"], [554, 0, 0, "-", "quantize_graph_pooling"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat": [[529, 0, 0, "-", "fake_quantize"], [531, 0, 0, "-", "quantize_config"], [532, 0, 0, "-", "quantize_helper"], [533, 0, 0, "-", "quantize_layers"], [538, 0, 0, "-", "quantize_wrapper"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.fake_quantize": [[529, 1, 1, "", "FakeQuantize"], [529, 1, 1, "", "FakeQuantizeBase"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_config": [[531, 1, 1, "", "QuantizeConfig"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_helper": [[532, 2, 1, "", "init_quantize_config"], [532, 2, 1, "", "qat_clone_function"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers": [[534, 0, 0, "-", "optimize_layer"], [535, 0, 0, "-", "quantize_layer_add"], [536, 0, 0, "-", "quantize_layer_base"], [537, 0, 0, "-", "quantize_layer_bn"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.optimize_layer": [[534, 2, 1, "", "config_quantizable_layers"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[535, 1, 1, "", "QuantizeLayerAdd"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[536, 1, 1, "", "QuantizeLayerBase"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[537, 1, 1, "", "QuantizeLayerBatchNormalization"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_wrapper": [[538, 1, 1, "", "QuantizeWrapper"], [538, 1, 1, "", "QuantizeWrapperBase"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq": [[539, 0, 0, "-", "fuse_qdq_bn"], [540, 0, 0, "-", "fuse_qdq_concatv2"], [541, 0, 0, "-", "fuse_qdq_conv"], [542, 0, 0, "-", "fuse_qdq_deconv"], [543, 0, 0, "-", "fuse_qdq_in"], [544, 0, 0, "-", "fuse_qdq_matmul"], [545, 0, 0, "-", "fuse_qdq_pooling"], [547, 0, 0, "-", "optimize_qdq"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_bn": [[539, 1, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_concatv2": [[540, 1, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_conv": [[541, 1, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_deconv": [[542, 1, 1, "", "FuseNodeStartWithDeconv2d"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_in": [[543, 1, 1, "", "FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_matmul": [[544, 1, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_pooling": [[545, 1, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.optimize_qdq": [[547, 1, 1, "", "OptimizeQDQGraph"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base": [[548, 1, 1, "", "QuantizeGraphBase"], [548, 1, 1, "", "QuantizeNodeBase"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_bn": [[549, 1, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_concatv2": [[550, 1, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_conv": [[551, 1, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_for_intel_cpu": [[552, 1, 1, "", "QuantizeGraphForIntel"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_matmul": [[553, 1, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_pooling": [[554, 1, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph_common": [[555, 1, 1, "", "QuantizeGraphHelper"]], "neural_compressor.tensorflow.quantization.utils.transform_graph": [[556, 0, 0, "-", "bias_correction"], [557, 0, 0, "-", "graph_transform_base"], [559, 0, 0, "-", "insert_logging"], [560, 0, 0, "-", "rerange_quantized_concat"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.bias_correction": [[556, 1, 1, "", "BiasCorrection"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.graph_transform_base": [[557, 1, 1, "", "GraphTransformBase"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.insert_logging": [[559, 1, 1, "", "InsertLogging"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.rerange_quantized_concat": [[560, 1, 1, "", "RerangeQuantizedConcat"]], "neural_compressor.tensorflow.quantization.utils.utility": [[561, 2, 1, "", "apply_inlining"], [561, 2, 1, "", "collate_tf_preds"], [561, 2, 1, "", "construct_function_from_graph_def"], [561, 2, 1, "", "disable_random"], [561, 2, 1, "", "fix_ref_type_of_graph_def"], [561, 2, 1, "", "generate_feed_dict"], [561, 2, 1, "", "get_graph_def"], [561, 2, 1, "", "get_input_output_node_names"], [561, 2, 1, "", "get_model_input_shape"], [561, 2, 1, "", "get_tensor_by_name"], [561, 2, 1, "", "get_tensor_val_from_graph_node"], [561, 2, 1, "", "get_weight_from_input_tensor"], [561, 2, 1, "", "int8_node_name_reverse"], [561, 2, 1, "", "is_ckpt_format"], [561, 2, 1, "", "is_saved_model_format"], [561, 2, 1, "", "iterator_sess_run"], [561, 2, 1, "", "parse_saved_model"], [561, 2, 1, "", "read_graph"], [561, 2, 1, "", "reconstruct_saved_model"], [561, 2, 1, "", "strip_equivalent_nodes"], [561, 2, 1, "", "strip_unused_nodes"], [561, 2, 1, "", "tf_diagnosis_helper"], [561, 2, 1, "", "write_graph"]], "neural_compressor.tensorflow.utils": [[562, 0, 0, "-", "constants"], [563, 0, 0, "-", "data"], [565, 0, 0, "-", "model"], [566, 0, 0, "-", "model_wrappers"], [567, 0, 0, "-", "nets_factory"], [568, 0, 0, "-", "utility"]], "neural_compressor.tensorflow.utils.data": [[563, 1, 1, "", "BaseDataLoader"], [563, 1, 1, "", "DummyDataset"], [563, 1, 1, "", "DummyDatasetV2"]], "neural_compressor.tensorflow.utils.model": [[565, 1, 1, "", "Model"]], "neural_compressor.tensorflow.utils.model_wrappers": [[566, 1, 1, "", "BaseModel"], [566, 1, 1, "", "KerasModel"], [566, 1, 1, "", "TensorflowBaseModel"], [566, 1, 1, "", "TensorflowCheckpointModel"], [566, 1, 1, "", "TensorflowLLMModel"], [566, 1, 1, "", "TensorflowModel"], [566, 1, 1, "", "TensorflowQATModel"], [566, 1, 1, "", "TensorflowSavedModelModel"], [566, 2, 1, "", "checkpoint_session"], [566, 2, 1, "", "estimator_session"], [566, 2, 1, "", "frozen_pb_session"], [566, 2, 1, "", "get_model_type"], [566, 2, 1, "", "graph_def_session"], [566, 2, 1, "", "graph_session"], [566, 2, 1, "", "keras_session"], [566, 2, 1, "", "load_saved_model"], [566, 2, 1, "", "saved_model_session"], [566, 2, 1, "", "slim_session"], [566, 2, 1, "", "validate_and_inference_input_output"], [566, 2, 1, "", "validate_graph_node"]], "neural_compressor.tensorflow.utils.nets_factory": [[567, 1, 1, "", "TFSlimNetsFactory"]], "neural_compressor.tensorflow.utils.utility": [[568, 1, 1, "", "CaptureOutputToFile"], [568, 1, 1, "", "CpuInfo"], [568, 2, 1, "", "Dequantize"], [568, 1, 1, "", "LazyImport"], [568, 1, 1, "", "Statistics"], [568, 2, 1, "", "combine_histogram"], [568, 2, 1, "", "deep_get"], [568, 2, 1, "", "dequantize_weight"], [568, 2, 1, "", "disable_random"], [568, 2, 1, "", "dump_data_to_local"], [568, 2, 1, "", "dump_elapsed_time"], [568, 2, 1, "", "get_all_fp32_data"], [568, 2, 1, "", "get_tensor_histogram"], [568, 2, 1, "", "itex_installed"], [568, 2, 1, "", "load_data_from_pkl"], [568, 2, 1, "", "register_algo"], [568, 2, 1, "", "singleton"], [568, 2, 1, "", "version1_eq_version2"], [568, 2, 1, "", "version1_gt_version2"], [568, 2, 1, "", "version1_gte_version2"], [568, 2, 1, "", "version1_lt_version2"], [568, 2, 1, "", "version1_lte_version2"]], "neural_compressor.torch": [[573, 0, 0, "-", "algorithms"], [601, 0, 0, "-", "amp"], [606, 0, 0, "-", "quantization"], [611, 0, 0, "-", "utils"]], "neural_compressor.torch.algorithms": [[570, 0, 0, "-", "habana_fp8"], [574, 0, 0, "-", "layer_wise"], [578, 0, 0, "-", "static_quant"], [593, 0, 0, "-", "weight_only"]], "neural_compressor.torch.algorithms.habana_fp8": [[569, 0, 0, "-", "fp8_quant"], [571, 0, 0, "-", "modules"], [572, 0, 0, "-", "observer"]], "neural_compressor.torch.algorithms.layer_wise": [[575, 0, 0, "-", "load"], [576, 0, 0, "-", "modified_pickle"], [577, 0, 0, "-", "utils"]], "neural_compressor.torch.algorithms.layer_wise.load": [[575, 2, 1, "", "load"]], "neural_compressor.torch.algorithms.layer_wise.modified_pickle": [[576, 3, 1, "", "PickleError"], [576, 3, 1, "", "PicklingError"], [576, 3, 1, "", "UnpicklingError"]], "neural_compressor.torch.algorithms.layer_wise.utils": [[577, 2, 1, "", "dowload_hf_model"], [577, 2, 1, "", "get_children"], [577, 2, 1, "", "get_module"], [577, 2, 1, "", "get_named_children"], [577, 2, 1, "", "get_super_module_by_name"], [577, 2, 1, "", "load_empty_model"], [577, 2, 1, "", "load_layer_wise_quantized_model"], [577, 2, 1, "", "load_tensor"], [577, 2, 1, "", "load_tensor_from_shard"], [577, 2, 1, "", "update_module"]], "neural_compressor.torch.algorithms.static_quant": [[579, 0, 0, "-", "static_quant"], [580, 0, 0, "-", "utility"]], "neural_compressor.torch.algorithms.static_quant.static_quant": [[579, 2, 1, "", "static_quantize"]], "neural_compressor.torch.algorithms.static_quant.utility": [[580, 1, 1, "", "Statistics"], [580, 1, 1, "", "TransformerBasedModelBlockPatternDetector"], [580, 2, 1, "", "dump_model_op_stats"], [580, 2, 1, "", "get_depth"], [580, 2, 1, "", "get_dict_at_depth"], [580, 2, 1, "", "get_element_under_depth"], [580, 2, 1, "", "get_quantizable_ops_from_cfgs"], [580, 2, 1, "", "get_quantizable_ops_recursively"], [580, 2, 1, "", "paser_cfgs"], [580, 2, 1, "", "simple_inference"]], "neural_compressor.torch.algorithms.weight_only": [[581, 0, 0, "-", "awq"], [582, 0, 0, "-", "gptq"], [587, 0, 0, "-", "hqq"], [594, 0, 0, "-", "modules"], [595, 0, 0, "-", "rtn"], [596, 0, 0, "-", "teq"], [597, 0, 0, "-", "utility"]], "neural_compressor.torch.algorithms.weight_only.awq": [[581, 1, 1, "", "ActAwareWeightQuant"], [581, 2, 1, "", "awq_quantize"]], "neural_compressor.torch.algorithms.weight_only.gptq": [[582, 1, 1, "", "GPTQ"], [582, 1, 1, "", "GPTQuantizer"], [582, 2, 1, "", "find_layers"], [582, 2, 1, "", "find_layers_name"], [582, 2, 1, "", "gptq_quantize"], [582, 2, 1, "", "is_leaf"], [582, 2, 1, "", "log_quantizable_layers_per_transformer"], [582, 2, 1, "", "quantize"], [582, 2, 1, "", "trace_gptq_target_blocks"]], "neural_compressor.torch.algorithms.weight_only.hqq": [[583, 0, 0, "-", "auto_accelerator"], [584, 0, 0, "-", "bitpack"], [585, 0, 0, "-", "config"], [586, 0, 0, "-", "core"], [588, 0, 0, "-", "optimizer"], [589, 0, 0, "-", "qtensor"], [590, 0, 0, "-", "quant_api"], [591, 0, 0, "-", "quantizer"], [592, 0, 0, "-", "utility"]], "neural_compressor.torch.algorithms.weight_only.hqq.auto_accelerator": [[583, 1, 1, "", "Auto_Accelerator"], [583, 1, 1, "", "CPU_Accelerator"], [583, 1, 1, "", "CUDA_Accelerator"], [583, 2, 1, "", "register_accelerator"]], "neural_compressor.torch.algorithms.weight_only.hqq.config": [[585, 1, 1, "", "HQQModuleConfig"]], "neural_compressor.torch.algorithms.weight_only.hqq.utility": [[592, 2, 1, "", "dump_elapsed_time"]], "neural_compressor.torch.algorithms.weight_only.modules": [[594, 1, 1, "", "FakeAffineTensorQuantFunction"], [594, 1, 1, "", "MulLinear"], [594, 1, 1, "", "TEQLinearFakeQuant"]], "neural_compressor.torch.algorithms.weight_only.rtn": [[595, 2, 1, "", "rtn_quantize"]], "neural_compressor.torch.algorithms.weight_only.teq": [[596, 1, 1, "", "TEQuantizer"], [596, 2, 1, "", "teq_quantize"]], "neural_compressor.torch.algorithms.weight_only.utility": [[597, 2, 1, "", "calibration"], [597, 2, 1, "", "fetch_module"], [597, 2, 1, "", "get_absorb_layers"], [597, 2, 1, "", "get_block_prefix"], [597, 2, 1, "", "get_example_input"], [597, 2, 1, "", "get_hidden_states"], [597, 2, 1, "", "get_module"], [597, 2, 1, "", "get_module_input_output"], [597, 2, 1, "", "qdq_weight_actor"], [597, 2, 1, "", "qdq_weight_asym"], [597, 2, 1, "", "qdq_weight_sym"], [597, 2, 1, "", "quant_tensor"], [597, 2, 1, "", "quant_weight_w_scale"], [597, 2, 1, "", "quantize_4bit"], [597, 2, 1, "", "search_clip"], [597, 2, 1, "", "set_module"]], "neural_compressor.torch.amp": [[598, 0, 0, "-", "autocast"], [600, 0, 0, "-", "fp8"]], "neural_compressor.torch.amp.autocast": [[598, 1, 1, "", "autocast"]], "neural_compressor.torch.amp.fp8": [[599, 0, 0, "-", "functions"]], "neural_compressor.torch.quantization": [[603, 0, 0, "-", "algorithm_entry"], [604, 0, 0, "-", "autotune"], [605, 0, 0, "-", "config"], [607, 0, 0, "-", "modules"], [608, 0, 0, "-", "quantize"]], "neural_compressor.torch.quantization.algorithm_entry": [[603, 2, 1, "", "rtn_entry"]], "neural_compressor.torch.quantization.autotune": [[604, 2, 1, "", "autotune"]], "neural_compressor.torch.quantization.config": [[605, 1, 1, "", "GPTQConfig"], [605, 1, 1, "", "RTNConfig"], [605, 2, 1, "", "get_default_gptq_config"], [605, 2, 1, "", "get_default_hqq_config"], [605, 2, 1, "", "get_default_rtn_config"]], "neural_compressor.torch.quantization.quantize": [[608, 2, 1, "", "quantize"]], "neural_compressor.torch.utils": [[609, 0, 0, "-", "constants"], [610, 0, 0, "-", "environ"], [612, 0, 0, "-", "utility"]], "neural_compressor.torch.utils.utility": [[612, 2, 1, "", "fetch_module"], [612, 2, 1, "", "register_algo"], [612, 2, 1, "", "set_module"]], "neural_compressor.training": [[613, 1, 1, "", "CallBacks"], [613, 1, 1, "", "CompressionManager"], [613, 2, 1, "", "fit"], [613, 2, 1, "", "prepare_compression"]], "neural_compressor.utils": [[614, 0, 0, "-", "collect_layer_histogram"], [615, 0, 0, "-", "constant"], [616, 0, 0, "-", "create_obj_from_config"], [618, 0, 0, "-", "kl_divergence"], [619, 0, 0, "-", "load_huggingface"], [620, 0, 0, "-", "logger"], [621, 0, 0, "-", "neural_insights_utils"], [622, 0, 0, "-", "options"], [623, 0, 0, "-", "pytorch"], [624, 0, 0, "-", "utility"], [625, 0, 0, "-", "weights_details"]], "neural_compressor.utils.collect_layer_histogram": [[614, 1, 1, "", "LayerHistogramCollector"]], "neural_compressor.utils.create_obj_from_config": [[616, 2, 1, "", "create_dataloader"], [616, 2, 1, "", "create_dataset"], [616, 2, 1, "", "create_eval_func"], [616, 2, 1, "", "create_train_func"], [616, 2, 1, "", "get_algorithm"], [616, 2, 1, "", "get_func_from_config"], [616, 2, 1, "", "get_metrics"], [616, 2, 1, "", "get_postprocess"], [616, 2, 1, "", "get_preprocess"]], "neural_compressor.utils.kl_divergence": [[618, 1, 1, "", "KL_Divergence"]], "neural_compressor.utils.load_huggingface": [[619, 1, 1, "", "OptimizedModel"], [619, 2, 1, "", "export_compressed_model"], [619, 2, 1, "", "save_for_huggingface_upstream"]], "neural_compressor.utils.logger": [[620, 1, 1, "", "Logger"], [620, 2, 1, "", "debug"], [620, 2, 1, "", "error"], [620, 2, 1, "", "fatal"], [620, 2, 1, "", "info"], [620, 2, 1, "", "log"], [620, 2, 1, "", "warn"], [620, 2, 1, "", "warning"]], "neural_compressor.utils.neural_insights_utils": [[621, 2, 1, "", "get_model_path"], [621, 2, 1, "", "register_neural_insights_workload"], [621, 2, 1, "", "update_neural_insights_workload"], [621, 2, 1, "", "update_neural_insights_workload_accuracy_data"]], "neural_compressor.utils.options": [[622, 1, 1, "", "onnxrt"]], "neural_compressor.utils.pytorch": [[623, 2, 1, "", "is_int8_model"], [623, 2, 1, "", "load"], [623, 2, 1, "", "load_weight_only"], [623, 2, 1, "", "recover_model_from_json"]], "neural_compressor.utils.utility": [[624, 1, 1, "", "CaptureOutputToFile"], [624, 1, 1, "", "CpuInfo"], [624, 2, 1, "", "Dequantize"], [624, 1, 1, "", "DotDict"], [624, 1, 1, "", "GLOBAL_STATE"], [624, 1, 1, "", "LazyImport"], [624, 1, 1, "", "MODE"], [624, 1, 1, "", "OpEntry"], [624, 1, 1, "", "Statistics"], [624, 2, 1, "", "alias_param"], [624, 2, 1, "", "calculate_mse"], [624, 2, 1, "", "check_key_exist"], [624, 2, 1, "", "combine_histogram"], [624, 2, 1, "", "compare_objects"], [624, 2, 1, "", "compute_sparsity"], [624, 2, 1, "", "dequantize_weight"], [624, 2, 1, "", "dump_class_attrs"], [624, 2, 1, "", "dump_data_to_local"], [624, 2, 1, "", "dump_elapsed_time"], [624, 2, 1, "", "dump_table"], [624, 2, 1, "", "dump_table_to_csv"], [624, 2, 1, "", "equal_dicts"], [624, 2, 1, "", "fault_tolerant_file"], [624, 2, 1, "", "get_all_fp32_data"], [624, 2, 1, "", "get_number_of_sockets"], [624, 2, 1, "", "get_op_list"], [624, 2, 1, "", "get_size"], [624, 2, 1, "", "get_tensor_histogram"], [624, 2, 1, "", "get_tensors_info"], [624, 2, 1, "", "get_tuning_history"], [624, 2, 1, "", "get_weights_details"], [624, 2, 1, "", "load_data_from_pkl"], [624, 2, 1, "", "mse_metric_gap"], [624, 2, 1, "", "print_op_list"], [624, 2, 1, "", "print_table"], [624, 2, 1, "", "recover"], [624, 2, 1, "", "set_random_seed"], [624, 2, 1, "", "set_resume_from"], [624, 2, 1, "", "set_tensorboard"], [624, 2, 1, "", "set_workspace"], [624, 2, 1, "", "show_memory_info"], [624, 2, 1, "", "singleton"], [624, 2, 1, "", "str2array"], [624, 2, 1, "", "time_limit"], [624, 2, 1, "", "version1_eq_version2"], [624, 2, 1, "", "version1_gt_version2"], [624, 2, 1, "", "version1_gte_version2"], [624, 2, 1, "", "version1_lt_version2"], [624, 2, 1, "", "version1_lte_version2"]], "neural_compressor.utils.weights_details": [[625, 1, 1, "", "WeightsDetails"], [625, 1, 1, "", "WeightsStatistics"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:function", "3": "py:exception", "4": "py:attribute", "5": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "function", "Python function"], "3": ["py", "exception", "Python exception"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "data", "Python data"]}, "titleterms": {"block_mask": [0, 210], "neural_compressor": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626], "adaptor": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 634, 635, 637], "modul": [1, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 113, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 181, 184, 185, 186, 187, 189, 190, 193, 194, 196, 197, 199, 201, 202, 203, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 229, 230, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 257, 258, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 276, 277, 278, 280, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 297, 300, 302, 303, 304, 306, 307, 308, 309, 311, 312, 314, 315, 316, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 330, 331, 332, 333, 336, 337, 338, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 359, 360, 361, 362, 364, 365, 367, 368, 369, 371, 372, 373, 375, 376, 377, 378, 379, 380, 381, 382, 384, 385, 387, 388, 390, 391, 393, 394, 395, 396, 400, 401, 403, 405, 407, 408, 409, 410, 412, 413, 415, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 439, 440, 441, 442, 443, 446, 447, 449, 451, 452, 462, 464, 465, 466, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 523, 524, 525, 526, 529, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 559, 560, 561, 563, 565, 566, 567, 568, 571, 575, 576, 577, 579, 580, 581, 582, 583, 584, 585, 586, 589, 590, 592, 594, 595, 596, 597, 598, 603, 604, 605, 607, 608, 612, 613, 614, 616, 618, 619, 620, 621, 622, 623, 624, 625], "content": [1, 2, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 113, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 184, 185, 186, 187, 189, 190, 193, 194, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 229, 230, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 359, 360, 361, 362, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 403, 405, 407, 408, 409, 410, 412, 413, 415, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 439, 440, 441, 442, 443, 446, 447, 449, 451, 452, 462, 464, 465, 466, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 523, 524, 525, 526, 529, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 559, 560, 561, 563, 565, 566, 567, 568, 575, 576, 577, 579, 580, 581, 582, 583, 584, 585, 586, 589, 590, 592, 594, 595, 596, 597, 598, 603, 604, 605, 608, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 633, 702], "class": [1, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 113, 115, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 153, 154, 155, 156, 157, 161, 165, 166, 167, 169, 172, 173, 174, 175, 176, 178, 179, 180, 181, 184, 186, 187, 189, 193, 194, 196, 201, 202, 203, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 225, 226, 227, 229, 230, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 272, 276, 277, 278, 280, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 309, 310, 311, 314, 317, 318, 319, 320, 321, 322, 324, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 359, 360, 361, 362, 364, 367, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 392, 395, 396, 397, 399, 400, 403, 405, 407, 408, 409, 410, 412, 413, 415, 417, 419, 420, 422, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 439, 440, 441, 442, 443, 446, 447, 449, 451, 452, 462, 466, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 523, 524, 525, 526, 529, 531, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 559, 560, 563, 565, 566, 567, 568, 580, 581, 582, 583, 584, 585, 586, 589, 594, 596, 597, 598, 605, 613, 614, 617, 618, 619, 620, 622, 624, 625, 634, 702], "function": [1, 13, 16, 34, 42, 43, 44, 45, 67, 68, 70, 104, 105, 116, 118, 148, 149, 150, 153, 155, 156, 157, 162, 163, 164, 167, 168, 170, 171, 172, 174, 177, 178, 179, 180, 185, 187, 189, 190, 193, 194, 196, 197, 198, 199, 201, 203, 204, 208, 211, 217, 218, 219, 220, 221, 223, 224, 227, 236, 237, 245, 247, 251, 254, 255, 256, 259, 261, 262, 263, 264, 266, 268, 269, 271, 280, 288, 290, 294, 297, 298, 299, 301, 302, 303, 306, 307, 308, 311, 312, 314, 315, 316, 317, 318, 325, 332, 336, 341, 342, 343, 345, 350, 356, 360, 362, 364, 365, 367, 368, 369, 370, 371, 372, 376, 380, 382, 383, 387, 388, 390, 391, 392, 393, 394, 396, 397, 401, 418, 423, 424, 428, 436, 440, 442, 443, 462, 464, 465, 466, 468, 488, 489, 491, 532, 534, 561, 566, 568, 575, 577, 579, 580, 581, 582, 583, 590, 592, 595, 596, 597, 599, 603, 604, 605, 608, 612, 613, 616, 617, 619, 620, 621, 623, 624, 660], "subpackag": [2, 17, 87, 111, 112, 114, 158, 195, 198, 231, 256, 274, 299, 310, 334, 352, 363, 432, 508, 527, 528, 530, 573], "submodul": [2, 12, 17, 29, 52, 76, 87, 95, 101, 106, 111, 112, 114, 117, 130, 145, 151, 158, 159, 174, 183, 188, 191, 195, 198, 200, 204, 211, 222, 228, 232, 239, 251, 255, 259, 266, 275, 282, 294, 298, 301, 305, 310, 317, 323, 329, 335, 339, 352, 358, 363, 370, 374, 386, 399, 404, 406, 411, 414, 416, 421, 432, 438, 444, 448, 450, 473, 497, 508, 516, 522, 527, 528, 530, 533, 546, 558, 564, 574, 587, 593, 606, 617], "packag": [2, 29, 174, 180, 198, 204, 211, 239, 251, 255, 256, 259, 266, 282, 294, 298, 299, 301, 310, 317, 329, 334, 335, 352, 370, 374, 383, 386, 392, 397, 399, 432, 617, 685, 687, 689, 690], "kera": [3, 451, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463], "keras_util": [4, 5, 6, 7, 8, 9, 10], "conv2d": [4, 455], "dens": [5, 456], "depthwise_conv2d": [6, 457], "pool2d": [8, 459], "quantiz": [9, 41, 161, 346, 393, 394, 395, 396, 397, 398, 424, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 591, 603, 604, 605, 606, 607, 608, 630, 633, 635, 636, 648, 652, 657, 659, 662, 665, 668, 670, 672, 673, 681, 692, 694, 695, 696, 697, 705, 706, 707, 713, 714, 715, 716, 717, 720, 726], "separable_conv2d": [10, 461], "mxnet": [11, 655, 671, 714, 722], "mxnet_util": [12, 13], "util": [13, 43, 148, 163, 170, 182, 183, 184, 185, 190, 221, 224, 357, 358, 359, 360, 361, 362, 391, 399, 400, 401, 418, 423, 437, 438, 439, 440, 441, 442, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 577, 580, 592, 597, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 639], "onnxrt": [14, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 655, 671, 722], "ox_util": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44], "calibr": [15, 16, 384, 395, 446, 635, 652], "oper": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 635, 636], "activ": [18, 695], "argmax": 19, "attent": 20, "binary_op": 21, "concat": 22, "conv": 23, "direct_q8": 24, "embed_layernorm": 25, "gather": 26, "gavgpool": 27, "gemm": 28, "lstm": 30, "matmul": [31, 720], "maxpool": 32, "norm": 33, "op": [34, 662], "pad": 35, "pool": 36, "reduc": 37, "resiz": 38, "split": [39, 698], "unary_op": 40, "smooth_quant": [42, 167, 175], "weight_onli": [44, 171, 387, 388, 389, 390, 391, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597], "pytorch": [45, 623, 655, 660, 662, 671, 696, 714, 715, 716, 721, 722, 726], "queri": [46, 634, 700, 705, 706, 707], "tensorflow": [47, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 655, 660, 662, 671, 714, 716, 721, 722, 726], "tf_util": [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148], "graph_convert": [48, 469], "graph_converter_without_calib": [49, 470], "graph_rewrit": [50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525], "bf16": [50, 51, 52, 471, 472, 473, 673], "bf16_convert": [50, 155, 471], "dequantize_cast_optim": [51, 472], "gener": [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 635], "convert_add_to_biasadd": [53, 474], "convert_layout": [54, 475], "convert_leakyrelu": [55, 476], "convert_nan_to_random": [56, 477], "convert_placeholder_to_const": [57, 478], "dilated_contract": [58, 479], "dummy_biasadd": [59, 480], "expanddims_optim": [60, 481], "fetch_weight_from_reshap": [61, 482], "fold_batch_norm": [62, 483], "fold_const": [63, 484], "fuse_biasadd_add": [64, 485], "fuse_column_wise_mul": [65, 486], "fuse_conv_with_math": [66, 487], "fuse_decomposed_bn": [67, 488], "fuse_decomposed_in": [68, 489], "fuse_gelu": [69, 490], "fuse_layer_norm": [70, 491], "fuse_pad_with_conv": [71, 492], "fuse_pad_with_fp32_conv": [72, 493], "fuse_reshape_transpos": [73, 494], "graph_cse_optim": [74, 495], "grappler_pass": [75, 496], "insert_print_nod": [77, 498], "move_squeeze_after_relu": [78, 499], "pre_optim": [79, 500], "remove_training_nod": [80, 501], "rename_batch_norm": [81, 502], "split_shared_input": [82, 503], "strip_equivalent_nod": [83, 504], "strip_unused_nod": [84, 505], "switch_optim": [85, 506], "graph_bas": [86, 507], "int8": [88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 662, 726], "freeze_fake_qu": [88, 509], "freeze_valu": [89, 510], "freeze_value_without_calib": [90, 511], "fuse_conv_redundant_dequant": [91, 512], "fuse_conv_requant": [92, 513], "fuse_matmul_redundant_dequant": [93, 514], "fuse_matmul_requant": [94, 515], "meta_op_optim": [96, 517], "post_hostconst_convert": [97, 518], "post_quantized_op_cs": [98, 519], "rnn_convert": [99, 520], "scale_propag": [100, 521], "onnx": [101, 102, 103, 104, 105, 638, 668, 714, 715, 726], "onnx_graph": 102, "onnx_nod": 103, "onnx_schema": 104, "tf2onnx_util": 105, "qdq": [106, 107, 108, 109, 123, 124, 125, 126, 127, 128, 129, 130, 131, 522, 523, 524, 525, 539, 540, 541, 542, 543, 544, 545, 546, 547, 726], "insert_qdq_pattern": [107, 523], "merge_duplicated_qdq": [108, 524], "share_qdq_y_pattern": [109, 525], "graph_util": [110, 526], "quantize_graph": [112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554], "qat": [113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 726], "fake_quant": [113, 529], "quantize_config": [115, 531], "quantize_help": [116, 532], "quantize_lay": [117, 118, 119, 120, 121, 533, 534, 535, 536, 537], "optimize_lay": [118, 534], "quantize_layer_add": [119, 535], "quantize_layer_bas": [120, 536], "quantize_layer_bn": [121, 537], "quantize_wrapp": [122, 538], "fuse_qdq_bn": [123, 539], "fuse_qdq_concatv2": [124, 540], "fuse_qdq_conv": [125, 541], "fuse_qdq_deconv": [126, 542], "fuse_qdq_in": [127, 543], "fuse_qdq_matmul": [128, 544], "fuse_qdq_pool": [129, 545], "optimize_qdq": [131, 547], "quantize_graph_bas": [132, 548], "quantize_graph_bn": [133, 549], "quantize_graph_concatv2": [134, 550], "quantize_graph_conv": [135, 551], "quantize_graph_for_intel_cpu": [136, 552], "quantize_graph_matmul": [137, 553], "quantize_graph_pool": [138, 554], "quantize_graph_common": [139, 555], "smooth_quant_calibr": 140, "smooth_quant_scal": 141, "tf2onnx_convert": 142, "transform_graph": [143, 144, 145, 146, 147, 556, 557, 558, 559, 560], "bias_correct": [143, 556], "graph_transform_bas": [144, 557], "insert_log": [146, 559], "rerange_quantized_concat": [147, 560], "torch_util": [149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 271], "autoround": [149, 150, 151, 152, 153], "export": [150, 305, 306, 307, 308, 662, 717], "model_wrapp": [152, 165, 566], "sign_sgd": 153, "awq": [154, 387, 581], "gptq": [156, 388, 582], "hawq_metr": 157, "layer_wise_qu": [159, 160, 161, 162, 163], "modified_pickl": [160, 576], "torch_load": 162, "mixed_precis": [164, 319], "pattern_detector": 166, "symbolic_trac": 168, "teq": [169, 596], "algorithm": [172, 173, 174, 175, 176, 383, 384, 385, 386, 387, 388, 389, 390, 391, 445, 446, 447, 448, 449, 450, 451, 452, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 652, 717, 720, 723], "fast_bias_correct": 173, "weight_correct": 176, "benchmark": [177, 263, 642, 651, 657, 672, 713], "common": [178, 179, 180, 181, 182, 183, 184, 185, 264, 265, 266, 267, 268, 269, 270, 271, 630, 663], "base_config": 178, "attribut": [178, 179, 180, 184, 239, 247, 256, 290, 299, 310, 334, 374, 396, 399, 401, 443, 585, 597, 617, 628], "base_tun": 179, "tuning_param": 181, "constant": [182, 357, 437, 562, 609, 615], "logger": [184, 340, 620, 653], "compress": [186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 273, 643, 717], "callback": 186, "distil": [187, 188, 189, 190, 304, 658, 659, 672, 713, 726], "criterion": [187, 264], "optim": [189, 269, 588, 682, 692, 702, 705, 706, 707, 710, 711, 724], "hpo": [191, 192, 193, 194], "sa_optim": 192, "search_algorithm": [193, 326], "search_spac": 194, "pruner": [196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 332, 343], "criteria": [196, 629, 711, 723], "dsnot": 197, "model_slim": [199, 200, 201, 202], "auto_slim": 199, "pattern_analyz": 201, "weight_slim": 202, "pattern": [203, 204, 205, 206, 207, 335, 336, 337, 341, 711], "base": [203, 208, 668, 701, 724], "mha": [205, 212], "ninm": 206, "nxm": 207, "basic": [209, 349, 427, 631, 723], "pattern_lock": [213, 331], "progress": [214, 698], "retrain_fre": 215, "sparse_gpt": 216, "prune": [217, 223, 333, 344, 672, 711, 713, 726], "reg": 218, "schedul": [219, 345, 347, 711], "tf_criteria": 220, "wanda": [222, 223, 224, 225], "wrapper": 225, "conf": [226, 227, 228, 229], "config": [226, 230, 396, 462, 466, 585, 605, 644, 655, 709], "dotdict": 227, "pythonic_config": 229, "contrib": [231, 232, 233, 234, 274, 275, 276, 277], "strategi": [232, 233, 234, 275, 276, 277, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 649, 719, 723], "sigopt": [233, 276, 719, 723], "tpe": [234, 277, 723], "data": [235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 563, 635, 636, 657, 661, 696], "dataload": [235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 265, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 654, 655], "base_dataload": [235, 278], "default_dataload": [237, 280], "fetcher": [238, 281], "mxnet_dataload": [240, 283], "onnxrt_dataload": [241, 284], "pytorch_dataload": [242, 285], "sampler": [243, 286], "tensorflow_dataload": [244, 287], "dataset": [245, 246, 247, 248, 249, 250, 251, 252, 288, 289, 290, 291, 292, 293, 294, 295, 655, 657, 666, 697], "bert_dataset": [245, 288], "coco_dataset": [246, 289], "dummy_dataset": [248, 291], "dummy_dataset_v2": [249, 292], "imagenet_dataset": [250, 293], "style_transfer_dataset": [252, 295], "filter": [253, 254, 255, 296, 297, 298], "coco_filt": [253, 296], "transform": [257, 258, 259, 260, 261, 262, 300, 301, 302, 303, 666, 722], "coco_transform": 257, "imagenet_transform": [258, 300], "postprocess": [260, 270], "token": [261, 302], "experiment": [263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362], "metric": [267, 311, 312, 313, 314, 315, 316, 317, 318, 364, 365, 366, 367, 368, 369, 370, 371, 666, 671], "model": [268, 373, 374, 375, 376, 377, 378, 379, 380, 381, 565, 635, 646, 662, 665, 668, 670, 672, 674, 681, 695, 696, 697, 705, 706, 707, 711, 715, 717, 720, 726], "compon": 272, "qlinear2qdq": 306, "tf2onnx": 307, "torch2onnx": 308, "graph_optim": 309, "bleu": [311, 364], "bleu_util": [312, 365], "coco_label_map": [313, 366], "coco_tool": [314, 367], "evaluate_squad": [315, 368], "f1": [316, 369], "model_convers": 320, "na": [321, 322, 323, 324, 325, 326, 631, 713], "basic_na": 321, "dyna": 322, "nas_util": 325, "pruner_legaci": [327, 328, 329, 330, 331, 332], "gradient_sensit": 327, "group_lasso": 328, "magnitud": 330, "pruning_recip": [334, 335, 336, 337], "tile_pattern": 337, "pruning_v2": 338, "pytorch_prun": [339, 340, 341, 342, 343, 344, 345], "prune_util": 342, "auto_mixed_precis": [348, 426], "bayesian": [350, 428, 723], "exhaust": [351, 430, 723], "mse": [353, 433, 723], "mse_v2": [354, 434, 723], "random": [355, 435, 723], "tuning_sampl": [359, 439], "tuning_spac": [360, 440], "tuning_struct": [361, 441], "mix_precis": 372, "base_model": 373, "keras_model": 375, "mxnet_model": 377, "nets_factori": [378, 567], "onnx_model": [379, 400], "tensorflow_model": 380, "torch_model": 381, "object": [382, 647, 705, 706, 707, 709], "smoother": [384, 385, 386, 446, 447, 448, 449], "core": [385, 447, 586], "rtn": [390, 595], "algorithm_entri": [393, 464, 603], "autotun": [394, 465, 604], "profil": [402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 657], "parser": [403, 404, 405, 406, 407, 408, 409, 410, 411, 412], "factori": [403, 405, 410, 413, 415, 420], "onnx_pars": [405, 406, 407], "result": [409, 695, 697, 705, 706, 707], "tensorflow_pars": [410, 411, 412], "onnxrt_profil": [415, 416, 417, 418], "tensorflow_profil": [420, 421, 422, 423], "auto": [425, 686, 692, 716, 720, 723], "conserv": [429, 723], "hawq_v2": [431, 723], "templat": [443, 444, 629], "api_doc_exampl": 443, "scaler": 449, "static_qu": [450, 451, 452, 578, 579, 580], "layer": [455, 456, 457, 458, 459, 460, 461, 658, 715, 720], "torch": [569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 639, 726], "habana_fp8": [569, 570, 571, 572], "fp8_quant": 569, "observ": 572, "layer_wis": [574, 575, 576, 577], "load": 575, "hqq": [583, 584, 585, 586, 587, 588, 589, 590, 591, 592], "auto_acceler": 583, "bitpack": 584, "qtensor": 589, "quant_api": 590, "amp": [598, 599, 600, 601], "autocast": 598, "fp8": [599, 600], "environ": [610, 668, 678], "train": [613, 630, 650, 660, 672, 711, 714], "collect_layer_histogram": 614, "create_obj_from_config": 616, "kl_diverg": 618, "load_huggingfac": 619, "neural_insights_util": 621, "option": [622, 660, 680], "weights_detail": 625, "version": 626, "intel": [627, 633, 654, 657, 667, 668, 671, 672, 678, 686, 692, 726, 727], "neural": [627, 630, 631, 633, 654, 657, 667, 668, 671, 672, 675, 679, 681, 686, 692, 694, 695, 696, 697, 699, 700, 701, 705, 706, 707, 711, 719, 724, 727], "compressor": [627, 630, 633, 654, 657, 667, 668, 671, 672, 686, 692, 719, 727], "document": [627, 633, 640, 727], "section": [627, 727], "contributor": [628, 629], "coven": [628, 629], "code": [628, 629, 631, 653, 672, 693, 698, 717, 724], "conduct": [628, 629], "our": [628, 720], "pledg": 628, "standard": 628, "respons": [628, 701], "scope": [628, 711], "enforc": 628, "contribut": [629, 685, 689], "guidelin": 629, "creat": [629, 698], "pull": 629, "request": [629, 673, 703], "step": [629, 694, 695, 696, 697], "checklist": 629, "accept": 629, "statu": [629, 700, 701], "check": 629, "overview": [629, 702, 724], "support": [629, 630, 631, 634, 636, 651, 652, 654, 655, 657, 658, 659, 660, 662, 664, 667, 668, 671, 673, 674, 676, 677, 681, 682, 709, 710, 711, 713, 714, 715, 717, 720, 721, 722, 725], "fx": 630, "introduct": [630, 631, 634, 635, 636, 651, 652, 654, 655, 657, 658, 659, 660, 662, 664, 667, 671, 673, 674, 692, 695, 696, 697, 709, 710, 711, 713, 714, 715, 717, 719, 720, 721, 722, 723, 725], "mode": [630, 726], "matrix": [630, 631, 634, 651, 652, 654, 655, 657, 658, 659, 660, 662, 664, 667, 671, 673, 674, 677, 709, 710, 711, 713, 714, 715, 717, 720, 721, 725], "get": [630, 631, 633, 634, 651, 654, 655, 657, 658, 659, 660, 664, 665, 671, 673, 675, 686, 693, 694, 698, 699, 700, 701, 709, 710, 711, 713, 714, 721, 725], "start": [630, 631, 633, 634, 651, 654, 655, 657, 658, 659, 660, 664, 665, 671, 673, 675, 676, 680, 686, 694, 698, 699, 700, 705, 706, 707, 709, 710, 711, 713, 714, 721, 725], "post": [630, 672, 701, 714], "static": [630, 714], "dynam": [630, 631, 714], "awar": [630, 672, 711, 714], "exampl": [630, 631, 634, 640, 651, 654, 655, 657, 658, 659, 660, 661, 662, 671, 672, 673, 674, 677, 681, 694, 695, 696, 697, 699, 704, 705, 706, 707, 709, 710, 711, 714, 715, 717, 720, 721, 726], "note": [630, 718], "detail": 630, "problem": 630, "architectur": [631, 656, 667, 668], "search": [631, 692], "api": [631, 633, 634, 635, 640, 641, 651, 654, 655, 658, 659, 660, 665, 666, 671, 673, 675, 679, 693, 694, 701, 707, 709, 710, 711, 713, 724], "usag": [631, 681, 692, 701, 720, 721, 723], "1": [631, 660, 663, 666, 672, 692, 699, 700, 726], "python": [631, 633, 654, 665, 671, 675, 679, 680, 687, 690, 694, 713, 724], "yaml": [631, 635, 655, 660, 664, 725], "2": [631, 660, 663, 666, 672, 692, 699, 700, 726], "onli": [631, 717], "advanc": [631, 698, 724], "custom": [631, 654, 671, 705, 723], "secur": [632, 660], "polici": [632, 723], "report": 632, "vulner": 632, "instal": [633, 657, 668, 676, 678, 685, 686, 689, 694, 699, 700], "from": [633, 635, 668, 672, 694, 699, 700], "pypi": [633, 681, 694], "select": [633, 686], "public": [633, 653, 712], "event": [633, 712], "addit": 633, "commun": 633, "work": [634, 699, 714], "flow": [634, 714], "background": [634, 653, 692], "ad": 634, "new": [634, 636, 687, 690, 723], "backend": [634, 714], "capabl": [634, 717], "implement": [634, 635], "onnxrtadaptor": 634, "how": [635, 636, 657, 695, 696, 697, 699], "add": [635, 700], "an": [635, 705, 706, 707], "list": [635, 661, 704, 722], "need": 635, "design": [635, 656, 702, 723], "framework": [635, 654, 655, 662, 664, 674, 713, 715, 717, 720], "query_fw_cap": 635, "accord": [635, 636], "tune_cfg": 635, "prepar": [635, 657, 695, 696, 697, 719], "fp32": [635, 662], "graph": 635, "run": [635, 657, 693, 695, 696, 697, 698], "sampl": [635, 665], "iter": 635, "calcul": 635, "rang": 635, "type": [636, 653, 711], "like": 636, "int4": 636, "few": 636, "line": 636, "chang": [636, 666, 691, 693, 718], "defin": [636, 660], "abil": 636, "specif": [636, 655], "invok": 636, "kernel": 636, "tune": [636, 714, 717, 720, 723], "configur": [636, 660, 664, 698, 713, 719, 725], "us": [636, 654, 671, 699, 700, 720], "summari": [636, 695], "runtim": [638, 668, 714, 715, 726], "mix": [645, 672, 673, 716], "precis": [645, 672, 673, 716], "refer": [652, 653, 711, 714, 717, 720], "inc": 653, "convent": 653, "rule": [653, 714], "import": 653, "string": 653, "annot": 653, "comment": 653, "todo": 653, "intern": 653, "interfac": 653, "folder": [653, 693], "structur": 653, "recommend": 653, "v": [653, 693], "set": [653, 657, 678, 692], "json": 653, "build": [654, 663, 671, 698, 699, 700], "file": [655, 664, 725], "user": [655, 660, 666, 713, 717, 724, 725], "workflow": [656, 702], "diagnosi": [657, 694], "featur": [657, 660, 664, 667, 681, 682, 686, 713, 714, 721, 725], "modifi": 657, "script": [657, 698], "see": 657, "do": [657, 675], "paramet": [657, 701], "descript": [657, 701, 703], "suggest": 657, "fallback": 657, "knowledg": [658, 726], "intermedi": 658, "self": 658, "distribut": [660, 681, 723], "infer": 660, "evalu": 660, "pure": 660, "horovodrun": 660, "execut": 660, "releas": [661, 687, 690, 718], "appendix": 662, "frequent": 663, "ask": 663, "question": 663, "issu": [663, 718], "3": [663, 676, 692], "4": [663, 683, 692, 712], "quick": [665, 680], "valid": [665, 668, 720, 726], "incompat": [666, 718], "between": 666, "v1": 666, "face": [666, 706, 707], "built": [666, 668, 671], "infrastructur": 667, "prerequisit": [668, 699, 700], "binari": 668, "sourc": [668, 694, 696, 697, 699, 700], "ai": 668, "kit": 668, "system": 668, "requir": [668, 685, 689, 695, 696, 697, 705], "hardwar": [668, 673, 726], "cpu": [668, 678, 726], "64": 668, "compat": 668, "processor": 668, "gpu": 668, "": [668, 693, 699], "xe": 668, "multipl": [668, 709, 726], "vendor": 668, "through": [668, 720, 726], "softwar": [668, 673], "legal": 669, "inform": 669, "licens": 669, "citat": 669, "trademark": 669, "llm": 670, "recip": [670, 714], "ipex": [670, 714], "kei": 670, "migrat": 672, "x": 672, "orchestr": [672, 710], "fp16": 673, "dure": [673, 716], "accuraci": [673, 695, 697, 714, 723], "driven": 673, "coder": [675, 679, 681, 692, 724], "what": [675, 693, 699], "we": 675, "offer": 675, "jupyt": [675, 676, 687, 690], "lab": [675, 676], "extens": [675, 685, 686, 689, 692, 693, 702, 726], "launcher": [675, 680], "contact": [675, 699], "aw": 676, "amazon": 676, "sagemak": 676, "For": 676, "studio": 676, "notebook": 676, "instanc": 676, "guid": [676, 724], "bigdl": 677, "nano": 677, "platform": [678, 719], "best": [678, 686], "perform": [678, 719], "mkl": 678, "openmp": 678, "jemalloc": 678, "numa": 678, "control": 678, "variabl": 678, "frequenc": 678, "govern": 678, "enabl": [679, 686, 692], "bench": 679, "superbench": 679, "argument": 680, "v0": 683, "highlight": 683, "other": 683, "changelog": [684, 688], "neural_compressor_ext_lab": [685, 687], "uninstal": [685, 689], "develop": [685, 689], "jupyterlab": 686, "Or": 686, "let": 686, "u": 686, "help": 686, "you": 686, "pre": 686, "requisit": 686, "make": [687, 690, 693, 698], "manual": [687, 690], "npm": [687, 690, 698], "autom": [687, 690], "publish": [687, 690], "conda": [687, 690], "forg": [687, 690], "neural_compressor_ext_lab_alibaba": [689, 690], "log": [691, 700, 701], "unreleas": 691, "vscode": 692, "open": [692, 697], "icon": 692, "5": 692, "welcom": 693, "your": 693, "setup": 693, "up": 693, "straight": 693, "awai": 693, "explor": 693, "test": [693, 698], "go": 693, "further": 693, "insight": [694, 695, 696, 697], "tensor": [694, 720], "dump": [694, 696], "research": 694, "collabor": 694, "debug": [695, 697], "analyz": [695, 697, 698], "weight": [695, 696, 697, 717], "histogram": 697, "react": 698, "app": 698, "avail": 698, "eject": 698, "learn": [698, 699], "more": [698, 699], "bundl": 698, "size": 698, "web": 698, "deploy": [698, 711], "fail": 698, "minifi": 698, "solut": [699, 700, 701, 705, 706, 707], "why": 699, "doe": 699, "method": [699, 700], "pip": [699, 700], "end": [699, 705, 706, 707], "servic": [700, 702, 705, 706, 707], "submit": [700, 701, 705, 706, 707], "task": [700, 701, 703, 705, 706, 707], "stop": [700, 705, 706, 707], "inspect": 700, "manag": [700, 705, 706], "resourc": [700, 705, 706], "node": 700, "state": 700, "cluster": [700, 701], "remov": 700, "url": 701, "endpoint": 701, "task_id": 701, "websocket": 701, "screen": 701, "ping": 701, "download": [701, 705, 706], "doc": 702, "wip": 702, "oaa": 702, "definit": 702, "diagram": 702, "hug": [706, 707], "grpc": 707, "client": 708, "singl": 709, "One": 710, "shot": 710, "network": 711, "sparsiti": 711, "decai": 711, "regular": 711, "larg": 711, "languag": 711, "retrain": 711, "free": 711, "spars": 711, "hyperparamet": 711, "full": 712, "79": 712, "2023": 712, "25": 712, "2022": 712, "35": 712, "2021": 712, "15": [712, 726], "2018": 712, "2020": 712, "style": 713, "access": 713, "fundament": [714, 720], "scheme": 714, "approach": 714, "With": 714, "without": 714, "specifi": 714, "devic": 714, "wise": 715, "lwq": 715, "turn": 716, "off": 716, "woq": [717, 726], "known": 718, "benefit": 719, "comparison": 719, "differ": 719, "smooth": 720, "quant": 720, "per": 720, "channel": 720, "limit": 720, "smoothquant": 720, "enhanc": 720, "alpha": 720, "engin": 720, "fix": 720, "determin": 720, "entir": 720, "each": 720, "block": 720, "tensorboard": 721, "space": 723, "exit": 723, "process": 723, "zero": 724, "topic": 724, "innov": 724, "product": 724, "13": 726, "0": 726, "ptq": 726}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"block_mask": [[0, "module-block_mask"]], "neural_compressor.adaptor.adaptor": [[1, "module-neural_compressor.adaptor.adaptor"]], "Module Contents": [[1, "module-contents"], [3, "module-contents"], [11, "module-contents"], [13, "module-contents"], [14, "module-contents"], [15, "module-contents"], [16, "module-contents"], [18, "module-contents"], [19, "module-contents"], [20, "module-contents"], [21, "module-contents"], [22, "module-contents"], [23, "module-contents"], [24, "module-contents"], [25, "module-contents"], [26, "module-contents"], [27, "module-contents"], [28, "module-contents"], [30, "module-contents"], [31, "module-contents"], [32, "module-contents"], [33, "module-contents"], [34, "module-contents"], [35, "module-contents"], [36, "module-contents"], [37, "module-contents"], [38, "module-contents"], [39, "module-contents"], [40, "module-contents"], [41, "module-contents"], [42, "module-contents"], [43, "module-contents"], [44, "module-contents"], [45, "module-contents"], [46, "module-contents"], [47, "module-contents"], [48, "module-contents"], [49, "module-contents"], [50, "module-contents"], [51, "module-contents"], [53, "module-contents"], [54, "module-contents"], [55, "module-contents"], [56, "module-contents"], [57, "module-contents"], [58, "module-contents"], [59, "module-contents"], [60, "module-contents"], [61, "module-contents"], [62, "module-contents"], [63, "module-contents"], [64, "module-contents"], [65, "module-contents"], [66, "module-contents"], [67, "module-contents"], [68, "module-contents"], [69, "module-contents"], [70, "module-contents"], [71, "module-contents"], [72, "module-contents"], [73, "module-contents"], [74, "module-contents"], [75, "module-contents"], [77, "module-contents"], [78, "module-contents"], [79, "module-contents"], [80, "module-contents"], [81, "module-contents"], [82, "module-contents"], [83, "module-contents"], [84, "module-contents"], [85, "module-contents"], [86, "module-contents"], [88, "module-contents"], [89, "module-contents"], [90, "module-contents"], [91, "module-contents"], [92, "module-contents"], [93, "module-contents"], [94, "module-contents"], [96, "module-contents"], [97, "module-contents"], [98, "module-contents"], [99, "module-contents"], [100, "module-contents"], [102, "module-contents"], [103, "module-contents"], [104, "module-contents"], [105, "module-contents"], [107, "module-contents"], [108, "module-contents"], [109, "module-contents"], [110, "module-contents"], [113, "module-contents"], [115, "module-contents"], [116, "module-contents"], [118, "module-contents"], [119, "module-contents"], [120, "module-contents"], [121, "module-contents"], [122, "module-contents"], [123, "module-contents"], [124, "module-contents"], [125, "module-contents"], [126, "module-contents"], [127, "module-contents"], [128, "module-contents"], [129, "module-contents"], [131, "module-contents"], [132, "module-contents"], [133, "module-contents"], [134, "module-contents"], [135, "module-contents"], [136, "module-contents"], [137, "module-contents"], [138, "module-contents"], [139, "module-contents"], [140, "module-contents"], [141, "module-contents"], [142, "module-contents"], [143, "module-contents"], [144, "module-contents"], [146, "module-contents"], [147, "module-contents"], [148, "module-contents"], [149, "module-contents"], [150, "module-contents"], [153, "module-contents"], [154, "module-contents"], [155, "module-contents"], [156, "module-contents"], [157, "module-contents"], [160, "module-contents"], [161, "module-contents"], [162, "module-contents"], [163, "module-contents"], [164, "module-contents"], [165, "module-contents"], [166, "module-contents"], [167, "module-contents"], [168, "module-contents"], [169, "module-contents"], [170, "module-contents"], [171, "module-contents"], [172, "module-contents"], [173, "module-contents"], [175, "module-contents"], [176, "module-contents"], [177, "module-contents"], [178, "module-contents"], [179, "module-contents"], [181, "module-contents"], [184, "module-contents"], [185, "module-contents"], [186, "module-contents"], [187, "module-contents"], [189, "module-contents"], [190, "module-contents"], [193, "module-contents"], [194, "module-contents"], [196, "module-contents"], [197, "module-contents"], [199, "module-contents"], [201, "module-contents"], [202, "module-contents"], [203, "module-contents"], [205, "module-contents"], [206, "module-contents"], [207, "module-contents"], [208, "module-contents"], [209, "module-contents"], [210, "module-contents"], [212, "module-contents"], [213, "module-contents"], [214, "module-contents"], [215, "module-contents"], [216, "module-contents"], [217, "module-contents"], [218, "module-contents"], [219, "module-contents"], [220, "module-contents"], [221, "module-contents"], [223, "module-contents"], [224, "module-contents"], [225, "module-contents"], [226, "module-contents"], [227, "module-contents"], [229, "module-contents"], [230, "module-contents"], [233, "module-contents"], [234, "module-contents"], [235, "module-contents"], [236, "module-contents"], [237, "module-contents"], [238, "module-contents"], [240, "module-contents"], [241, "module-contents"], [242, "module-contents"], [243, "module-contents"], [244, "module-contents"], [245, "module-contents"], [246, "module-contents"], [247, "module-contents"], [248, "module-contents"], [249, "module-contents"], [250, "module-contents"], [252, "module-contents"], [253, "module-contents"], [254, "module-contents"], [257, "module-contents"], [258, "module-contents"], [260, "module-contents"], [261, "module-contents"], [262, "module-contents"], [263, "module-contents"], [264, "module-contents"], [265, "module-contents"], [267, "module-contents"], [268, "module-contents"], [269, "module-contents"], [270, "module-contents"], [271, "module-contents"], [272, "module-contents"], [276, "module-contents"], [277, "module-contents"], [278, "module-contents"], [280, "module-contents"], [281, "module-contents"], [283, "module-contents"], [284, "module-contents"], [285, "module-contents"], [286, "module-contents"], [287, "module-contents"], [288, "module-contents"], [289, "module-contents"], [290, "module-contents"], [291, "module-contents"], [292, "module-contents"], [293, "module-contents"], [295, "module-contents"], [296, "module-contents"], [297, "module-contents"], [300, "module-contents"], [302, "module-contents"], [303, "module-contents"], [304, "module-contents"], [306, "module-contents"], [307, "module-contents"], [308, "module-contents"], [309, "module-contents"], [311, "module-contents"], [312, "module-contents"], [314, "module-contents"], [315, "module-contents"], [316, "module-contents"], [318, "module-contents"], [319, "module-contents"], [320, "module-contents"], [321, "module-contents"], [322, "module-contents"], [324, "module-contents"], [325, "module-contents"], [326, "module-contents"], [327, "module-contents"], [328, "module-contents"], [330, "module-contents"], [331, "module-contents"], [332, "module-contents"], [333, "module-contents"], [336, "module-contents"], [337, "module-contents"], [338, "module-contents"], [341, "module-contents"], [342, "module-contents"], [343, "module-contents"], [344, "module-contents"], [345, "module-contents"], [346, "module-contents"], [347, "module-contents"], [348, "module-contents"], [349, "module-contents"], [350, "module-contents"], [351, "module-contents"], [353, "module-contents"], [354, "module-contents"], [355, "module-contents"], [356, "module-contents"], [359, "module-contents"], [360, "module-contents"], [361, "module-contents"], [362, "module-contents"], [364, "module-contents"], [365, "module-contents"], [367, "module-contents"], [368, "module-contents"], [369, "module-contents"], [371, "module-contents"], [372, "module-contents"], [373, "module-contents"], [375, "module-contents"], [376, "module-contents"], [377, "module-contents"], [378, "module-contents"], [379, "module-contents"], [380, "module-contents"], [381, "module-contents"], [382, "module-contents"], [384, "module-contents"], [385, "module-contents"], [387, "module-contents"], [388, "module-contents"], [390, "module-contents"], [391, "module-contents"], [393, "module-contents"], [394, "module-contents"], [395, "module-contents"], [396, "module-contents"], [400, "module-contents"], [401, "module-contents"], [403, "module-contents"], [405, "module-contents"], [407, "module-contents"], [408, "module-contents"], [409, "module-contents"], [410, "module-contents"], [412, "module-contents"], [413, "module-contents"], [415, "module-contents"], [417, "module-contents"], [418, "module-contents"], [419, "module-contents"], [420, "module-contents"], [422, "module-contents"], [423, "module-contents"], [424, "module-contents"], [425, "module-contents"], [426, "module-contents"], [427, "module-contents"], [428, "module-contents"], [429, "module-contents"], [430, "module-contents"], [431, "module-contents"], [433, "module-contents"], [434, "module-contents"], [435, "module-contents"], [436, "module-contents"], [439, "module-contents"], [440, "module-contents"], [441, "module-contents"], [442, "module-contents"], [443, "module-contents"], [446, "module-contents"], [447, "module-contents"], [449, "module-contents"], [451, "module-contents"], [452, "module-contents"], [462, "module-contents"], [464, "module-contents"], [465, "module-contents"], [466, "module-contents"], [468, "module-contents"], [469, "module-contents"], [470, "module-contents"], [471, "module-contents"], [472, "module-contents"], [474, "module-contents"], [475, "module-contents"], [476, "module-contents"], [477, "module-contents"], [478, "module-contents"], [479, "module-contents"], [480, "module-contents"], [481, "module-contents"], [482, "module-contents"], [483, "module-contents"], [484, "module-contents"], [485, "module-contents"], [486, "module-contents"], [487, "module-contents"], [488, "module-contents"], [489, "module-contents"], [490, "module-contents"], [491, "module-contents"], [492, "module-contents"], [493, "module-contents"], [494, "module-contents"], [495, "module-contents"], [496, "module-contents"], [498, "module-contents"], [499, "module-contents"], [500, "module-contents"], [501, "module-contents"], [502, "module-contents"], [503, "module-contents"], [504, "module-contents"], [505, "module-contents"], [506, "module-contents"], [507, "module-contents"], [509, "module-contents"], [510, "module-contents"], [511, "module-contents"], [512, "module-contents"], [513, "module-contents"], [514, "module-contents"], [515, "module-contents"], [517, "module-contents"], [518, "module-contents"], [519, "module-contents"], [520, "module-contents"], [521, "module-contents"], [523, "module-contents"], [524, "module-contents"], [525, "module-contents"], [526, "module-contents"], [529, "module-contents"], [531, "module-contents"], [532, "module-contents"], [534, "module-contents"], [535, "module-contents"], [536, "module-contents"], [537, "module-contents"], [538, "module-contents"], [539, "module-contents"], [540, "module-contents"], [541, "module-contents"], [542, "module-contents"], [543, "module-contents"], [544, "module-contents"], [545, "module-contents"], [547, "module-contents"], [548, "module-contents"], [549, "module-contents"], [550, "module-contents"], [551, "module-contents"], [552, "module-contents"], [553, "module-contents"], [554, "module-contents"], [555, "module-contents"], [556, "module-contents"], [557, "module-contents"], [559, "module-contents"], [560, "module-contents"], [561, "module-contents"], [563, "module-contents"], [565, "module-contents"], [566, "module-contents"], [567, "module-contents"], [568, "module-contents"], [575, "module-contents"], [576, "module-contents"], [577, "module-contents"], [579, "module-contents"], [580, "module-contents"], [581, "module-contents"], [582, "module-contents"], [583, "module-contents"], [584, "module-contents"], [585, "module-contents"], [586, "module-contents"], [589, "module-contents"], [590, "module-contents"], [592, "module-contents"], [594, "module-contents"], [595, "module-contents"], [596, "module-contents"], [597, "module-contents"], [598, "module-contents"], [603, "module-contents"], [604, "module-contents"], [605, "module-contents"], [608, "module-contents"], [612, "module-contents"], [613, "module-contents"], [614, "module-contents"], [616, "module-contents"], [618, "module-contents"], [619, "module-contents"], [620, "module-contents"], [621, "module-contents"], [622, "module-contents"], [623, "module-contents"], [624, "module-contents"], [625, "module-contents"]], "Classes": [[1, "classes"], [3, "classes"], [11, "classes"], [13, "classes"], [14, "classes"], [15, "classes"], [16, "classes"], [18, "classes"], [19, "classes"], [20, "classes"], [21, "classes"], [22, "classes"], [23, "classes"], [24, "classes"], [25, "classes"], [26, "classes"], [27, "classes"], [28, "classes"], [30, "classes"], [31, "classes"], [32, "classes"], [33, "classes"], [34, "classes"], [35, "classes"], [36, "classes"], [37, "classes"], [38, "classes"], [39, "classes"], [40, "classes"], [41, "classes"], [42, "classes"], [43, "classes"], [45, "classes"], [46, "classes"], [47, "classes"], [48, "classes"], [49, "classes"], [50, "classes"], [51, "classes"], [53, "classes"], [54, "classes"], [55, "classes"], [56, "classes"], [57, "classes"], [58, "classes"], [59, "classes"], [60, "classes"], [61, "classes"], [62, "classes"], [63, "classes"], [64, "classes"], [65, "classes"], [66, "classes"], [67, "classes"], [68, "classes"], [69, "classes"], [70, "classes"], [71, "classes"], [72, "classes"], [73, "classes"], [74, "classes"], [75, "classes"], [77, "classes"], [78, "classes"], [79, "classes"], [80, "classes"], [81, "classes"], [82, "classes"], [83, "classes"], [84, "classes"], [85, "classes"], [86, "classes"], [88, "classes"], [89, "classes"], [90, "classes"], [91, "classes"], [92, "classes"], [93, "classes"], [94, "classes"], [96, "classes"], [97, "classes"], [98, "classes"], [99, "classes"], [100, "classes"], [102, "classes"], [103, "classes"], [104, "classes"], [105, "classes"], [107, "classes"], [108, "classes"], [109, "classes"], [110, "classes"], [113, "classes"], [115, "classes"], [119, "classes"], [120, "classes"], [121, "classes"], [122, "classes"], [123, "classes"], [124, "classes"], [125, "classes"], [126, "classes"], [127, "classes"], [128, "classes"], [129, "classes"], [131, "classes"], [132, "classes"], [133, "classes"], [134, "classes"], [135, "classes"], [136, "classes"], [137, "classes"], [138, "classes"], [139, "classes"], [140, "classes"], [141, "classes"], [142, "classes"], [143, "classes"], [144, "classes"], [146, "classes"], [147, "classes"], [149, "classes"], [153, "classes"], [154, "classes"], [155, "classes"], [156, "classes"], [157, "classes"], [161, "classes"], [165, "classes"], [166, "classes"], [167, "classes"], [169, "classes"], [172, "classes"], [173, "classes"], [174, "classes"], [175, "classes"], [176, "classes"], [178, "classes"], [179, "classes"], [180, "classes"], [181, "classes"], [184, "classes"], [186, "classes"], [187, "classes"], [189, "classes"], [193, "classes"], [194, "classes"], [196, "classes"], [201, "classes"], [202, "classes"], [203, "classes"], [205, "classes"], [206, "classes"], [207, "classes"], [208, "classes"], [209, "classes"], [210, "classes"], [212, "classes"], [213, "classes"], [214, "classes"], [215, "classes"], [216, "classes"], [217, "classes"], [218, "classes"], [219, "classes"], [220, "classes"], [225, "classes"], [226, "classes"], [227, "classes"], [229, "classes"], [230, "classes"], [233, "classes"], [234, "classes"], [235, "classes"], [236, "classes"], [237, "classes"], [238, "classes"], [239, "classes"], [240, "classes"], [241, "classes"], [242, "classes"], [243, "classes"], [244, "classes"], [245, "classes"], [246, "classes"], [247, "classes"], [248, "classes"], [249, "classes"], [250, "classes"], [251, "classes"], [252, "classes"], [253, "classes"], [254, "classes"], [255, "classes"], [256, "classes"], [257, "classes"], [258, "classes"], [259, "classes"], [260, "classes"], [261, "classes"], [262, "classes"], [263, "classes"], [264, "classes"], [265, "classes"], [266, "classes"], [267, "classes"], [268, "classes"], [269, "classes"], [270, "classes"], [272, "classes"], [276, "classes"], [277, "classes"], [278, "classes"], [280, "classes"], [281, "classes"], [283, "classes"], [284, "classes"], [285, "classes"], [286, "classes"], [287, "classes"], [288, "classes"], [289, "classes"], [290, "classes"], [291, "classes"], [292, "classes"], [293, "classes"], [294, "classes"], [295, "classes"], [296, "classes"], [297, "classes"], [298, "classes"], [299, "classes"], [300, "classes"], [301, "classes"], [302, "classes"], [303, "classes"], [304, "classes"], [309, "classes"], [310, "classes"], [311, "classes"], [314, "classes"], [317, "classes"], [318, "classes"], [319, "classes"], [320, "classes"], [321, "classes"], [322, "classes"], [324, "classes"], [326, "classes"], [327, "classes"], [328, "classes"], [330, "classes"], [331, "classes"], [332, "classes"], [333, "classes"], [334, "classes"], [335, "classes"], [336, "classes"], [337, "classes"], [338, "classes"], [341, "classes"], [343, "classes"], [344, "classes"], [345, "classes"], [346, "classes"], [347, "classes"], [348, "classes"], [349, "classes"], [350, "classes"], [351, "classes"], [353, "classes"], [354, "classes"], [355, "classes"], [356, "classes"], [359, "classes"], [360, "classes"], [361, "classes"], [362, "classes"], [364, "classes"], [367, "classes"], [370, "classes"], [371, "classes"], [373, "classes"], [374, "classes"], [375, "classes"], [376, "classes"], [377, "classes"], [378, "classes"], [379, "classes"], [380, "classes"], [381, "classes"], [382, "classes"], [383, "classes"], [384, "classes"], [385, "classes"], [386, "classes"], [392, "classes"], [395, "classes"], [396, "classes"], [397, "classes"], [399, "classes"], [400, "classes"], [403, "classes"], [405, "classes"], [407, "classes"], [408, "classes"], [409, "classes"], [410, "classes"], [412, "classes"], [413, "classes"], [415, "classes"], [417, "classes"], [419, "classes"], [420, "classes"], [422, "classes"], [425, "classes"], [426, "classes"], [427, "classes"], [428, "classes"], [429, "classes"], [430, "classes"], [431, "classes"], [433, "classes"], [434, "classes"], [435, "classes"], [436, "classes"], [439, "classes"], [440, "classes"], [441, "classes"], [442, "classes"], [443, "classes"], [446, "classes"], [447, "classes"], [449, "classes"], [451, "classes"], [452, "classes"], [462, "classes"], [466, "classes"], [469, "classes"], [470, "classes"], [471, "classes"], [472, "classes"], [474, "classes"], [475, "classes"], [476, "classes"], [477, "classes"], [478, "classes"], [479, "classes"], [480, "classes"], [481, "classes"], [482, "classes"], [483, "classes"], [484, "classes"], [485, "classes"], [486, "classes"], [487, "classes"], [488, "classes"], [489, "classes"], [490, "classes"], [491, "classes"], [492, "classes"], [493, "classes"], [494, "classes"], [495, "classes"], [496, "classes"], [498, "classes"], [499, "classes"], [500, "classes"], [501, "classes"], [502, "classes"], [503, "classes"], [504, "classes"], [505, "classes"], [506, "classes"], [507, "classes"], [509, "classes"], [510, "classes"], [511, "classes"], [512, "classes"], [513, "classes"], [514, "classes"], [515, "classes"], [517, "classes"], [518, "classes"], [519, "classes"], [520, "classes"], [521, "classes"], [523, "classes"], [524, "classes"], [525, "classes"], [526, "classes"], [529, "classes"], [531, "classes"], [535, "classes"], [536, "classes"], [537, "classes"], [538, "classes"], [539, "classes"], [540, "classes"], [541, "classes"], [542, "classes"], [543, "classes"], [544, "classes"], [545, "classes"], [547, "classes"], [548, "classes"], [549, "classes"], [550, "classes"], [551, "classes"], [552, "classes"], [553, "classes"], [554, "classes"], [555, "classes"], [556, "classes"], [557, "classes"], [559, "classes"], [560, "classes"], [563, "classes"], [565, "classes"], [566, "classes"], [567, "classes"], [568, "classes"], [580, "classes"], [581, "classes"], [582, "classes"], [583, "classes"], [584, "classes"], [585, "classes"], [586, "classes"], [589, "classes"], [594, "classes"], [596, "classes"], [597, "classes"], [598, "classes"], [605, "classes"], [613, "classes"], [614, "classes"], [617, "classes"], [618, "classes"], [619, "classes"], [620, "classes"], [622, "classes"], [624, "classes"], [625, "classes"]], "Functions": [[1, "functions"], [13, "functions"], [16, "functions"], [34, "functions"], [42, "functions"], [43, "functions"], [44, "functions"], [45, "functions"], [67, "functions"], [68, "functions"], [70, "functions"], [104, "functions"], [105, "functions"], [116, "functions"], [118, "functions"], [148, "functions"], [149, "functions"], [150, "functions"], [153, "functions"], [155, "functions"], [156, "functions"], [157, "functions"], [162, "functions"], [163, "functions"], [164, "functions"], [167, "functions"], [168, "functions"], [170, "functions"], [171, "functions"], [172, "functions"], [174, "functions"], [177, "functions"], [178, "functions"], [179, "functions"], [180, "functions"], [185, "functions"], [187, "functions"], [189, "functions"], [190, "functions"], [193, "functions"], [194, "functions"], [196, "functions"], [197, "functions"], [198, "functions"], [199, "functions"], [201, "functions"], [203, "functions"], [204, "functions"], [208, "functions"], [211, "functions"], [217, "functions"], [218, "functions"], [219, "functions"], [220, "functions"], [221, "functions"], [223, "functions"], [224, "functions"], [227, "functions"], [236, "functions"], [237, "functions"], [245, "functions"], [247, "functions"], [251, "functions"], [254, "functions"], [255, "functions"], [256, "functions"], [259, "functions"], [261, "functions"], [262, "functions"], [263, "functions"], [264, "functions"], [266, "functions"], [268, "functions"], [269, "functions"], [271, "functions"], [280, "functions"], [288, "functions"], [290, "functions"], [294, "functions"], [297, "functions"], [298, "functions"], [299, "functions"], [301, "functions"], [302, "functions"], [303, "functions"], [306, "functions"], [307, "functions"], [308, "functions"], [311, "functions"], [312, "functions"], [314, "functions"], [315, "functions"], [316, "functions"], [317, "functions"], [318, "functions"], [325, "functions"], [332, "functions"], [336, "functions"], [341, "functions"], [342, "functions"], [343, "functions"], [345, "functions"], [350, "functions"], [356, "functions"], [360, "functions"], [362, "functions"], [364, "functions"], [365, "functions"], [367, "functions"], [368, "functions"], [369, "functions"], [370, "functions"], [371, "functions"], [372, "functions"], [376, "functions"], [380, "functions"], [382, "functions"], [383, "functions"], [387, "functions"], [388, "functions"], [390, "functions"], [391, "functions"], [392, "functions"], [393, "functions"], [394, "functions"], [396, "functions"], [397, "functions"], [401, "functions"], [418, "functions"], [423, "functions"], [424, "functions"], [428, "functions"], [436, "functions"], [440, "functions"], [442, "functions"], [443, "functions"], [462, "functions"], [464, "functions"], [465, "functions"], [466, "functions"], [468, "functions"], [488, "functions"], [489, "functions"], [491, "functions"], [532, "functions"], [534, "functions"], [561, "functions"], [566, "functions"], [568, "functions"], [575, "functions"], [577, "functions"], [579, "functions"], [580, "functions"], [581, "functions"], [582, "functions"], [583, "functions"], [590, "functions"], [592, "functions"], [595, "functions"], [596, "functions"], [597, "functions"], [603, "functions"], [604, "functions"], [605, "functions"], [608, "functions"], [612, "functions"], [613, "functions"], [616, "functions"], [617, "functions"], [619, "functions"], [620, "functions"], [621, "functions"], [623, "functions"], [624, "functions"]], "neural_compressor.adaptor": [[2, "module-neural_compressor.adaptor"]], "Subpackages": [[2, "subpackages"], [17, "subpackages"], [87, "subpackages"], [111, "subpackages"], [112, "subpackages"], [114, "subpackages"], [158, "subpackages"], [195, "subpackages"], [198, "subpackages"], [231, "subpackages"], [256, "subpackages"], [274, "subpackages"], [299, "subpackages"], [310, "subpackages"], [334, "subpackages"], [352, "subpackages"], [363, "subpackages"], [432, "subpackages"], [508, "subpackages"], [527, "subpackages"], [528, "subpackages"], [530, "subpackages"], [573, "subpackages"]], "Submodules": [[2, "submodules"], [12, "submodules"], [17, "submodules"], [29, "submodules"], [52, "submodules"], [76, "submodules"], [87, "submodules"], [95, "submodules"], [101, "submodules"], [106, "submodules"], [111, "submodules"], [112, "submodules"], [114, "submodules"], [117, "submodules"], [130, "submodules"], [145, "submodules"], [151, "submodules"], [158, "submodules"], [159, "submodules"], [174, "submodules"], [183, "submodules"], [188, "submodules"], [191, "submodules"], [195, "submodules"], [198, "submodules"], [200, "submodules"], [204, "submodules"], [211, "submodules"], [222, "submodules"], [228, "submodules"], [232, "submodules"], [239, "submodules"], [251, "submodules"], [255, "submodules"], [259, "submodules"], [266, "submodules"], [275, "submodules"], [282, "submodules"], [294, "submodules"], [298, "submodules"], [301, "submodules"], [305, "submodules"], [310, "submodules"], [317, "submodules"], [323, "submodules"], [329, "submodules"], [335, "submodules"], [339, "submodules"], [352, "submodules"], [358, "submodules"], [363, "submodules"], [370, "submodules"], [374, "submodules"], [386, "submodules"], [399, "submodules"], [404, "submodules"], [406, "submodules"], [411, "submodules"], [414, "submodules"], [416, "submodules"], [421, "submodules"], [432, "submodules"], [438, "submodules"], [444, "submodules"], [448, "submodules"], [450, "submodules"], [473, "submodules"], [497, "submodules"], [508, "submodules"], [516, "submodules"], [522, "submodules"], [527, "submodules"], [528, "submodules"], [530, "submodules"], [533, "submodules"], [546, "submodules"], [558, "submodules"], [564, "submodules"], [574, "submodules"], [587, "submodules"], [593, "submodules"], [606, "submodules"], [617, "submodules"]], "Package Contents": [[2, "package-contents"], [29, "package-contents"], [174, "package-contents"], [180, "package-contents"], [198, "package-contents"], [204, "package-contents"], [211, "package-contents"], [239, "package-contents"], [251, "package-contents"], [255, "package-contents"], [256, "package-contents"], [259, "package-contents"], [266, "package-contents"], [282, "package-contents"], [294, "package-contents"], [298, "package-contents"], [299, "package-contents"], [301, "package-contents"], [310, "package-contents"], [317, "package-contents"], [329, "package-contents"], [334, "package-contents"], [335, "package-contents"], [352, "package-contents"], [370, "package-contents"], [374, "package-contents"], [383, "package-contents"], [386, "package-contents"], [392, "package-contents"], [397, "package-contents"], [399, "package-contents"], [432, "package-contents"], [617, "package-contents"]], "neural_compressor.adaptor.keras": [[3, "module-neural_compressor.adaptor.keras"]], "neural_compressor.adaptor.keras_utils.conv2d": [[4, "module-neural_compressor.adaptor.keras_utils.conv2d"]], "neural_compressor.adaptor.keras_utils.dense": [[5, "module-neural_compressor.adaptor.keras_utils.dense"]], "neural_compressor.adaptor.keras_utils.depthwise_conv2d": [[6, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"]], "neural_compressor.adaptor.keras_utils": [[7, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.pool2d": [[8, "module-neural_compressor.adaptor.keras_utils.pool2d"]], "neural_compressor.adaptor.keras_utils.quantizer": [[9, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "neural_compressor.adaptor.keras_utils.separable_conv2d": [[10, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"]], "neural_compressor.adaptor.mxnet": [[11, "module-neural_compressor.adaptor.mxnet"]], "neural_compressor.adaptor.mxnet_utils": [[12, "module-neural_compressor.adaptor.mxnet_utils"]], "neural_compressor.adaptor.mxnet_utils.util": [[13, "module-neural_compressor.adaptor.mxnet_utils.util"]], "neural_compressor.adaptor.onnxrt": [[14, "module-neural_compressor.adaptor.onnxrt"]], "neural_compressor.adaptor.ox_utils.calibration": [[15, "module-neural_compressor.adaptor.ox_utils.calibration"]], "neural_compressor.adaptor.ox_utils.calibrator": [[16, "module-neural_compressor.adaptor.ox_utils.calibrator"]], "neural_compressor.adaptor.ox_utils": [[17, "module-neural_compressor.adaptor.ox_utils"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[18, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[19, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[20, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[21, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[22, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[23, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[24, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[25, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[26, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[27, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[28, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[29, "module-neural_compressor.adaptor.ox_utils.operators"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[30, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[31, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[32, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "neural_compressor.adaptor.ox_utils.operators.norm": [[33, "module-neural_compressor.adaptor.ox_utils.operators.norm"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[34, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[35, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[36, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "neural_compressor.adaptor.ox_utils.operators.reduce": [[37, "module-neural_compressor.adaptor.ox_utils.operators.reduce"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[38, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "neural_compressor.adaptor.ox_utils.operators.split": [[39, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "neural_compressor.adaptor.ox_utils.operators.unary_op": [[40, "module-neural_compressor.adaptor.ox_utils.operators.unary_op"]], "neural_compressor.adaptor.ox_utils.quantizer": [[41, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "neural_compressor.adaptor.ox_utils.smooth_quant": [[42, "module-neural_compressor.adaptor.ox_utils.smooth_quant"]], "neural_compressor.adaptor.ox_utils.util": [[43, "module-neural_compressor.adaptor.ox_utils.util"]], "neural_compressor.adaptor.ox_utils.weight_only": [[44, "module-neural_compressor.adaptor.ox_utils.weight_only"]], "neural_compressor.adaptor.pytorch": [[45, "module-neural_compressor.adaptor.pytorch"]], "neural_compressor.adaptor.query": [[46, "module-neural_compressor.adaptor.query"]], "neural_compressor.adaptor.tensorflow": [[47, "module-neural_compressor.adaptor.tensorflow"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[48, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[49, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer": [[51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[109, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_util": [[110, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "neural_compressor.adaptor.tf_utils": [[111, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[112, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[138, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[139, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "neural_compressor.adaptor.tf_utils.smooth_quant_calibration": [[140, "module-neural_compressor.adaptor.tf_utils.smooth_quant_calibration"]], "neural_compressor.adaptor.tf_utils.smooth_quant_scaler": [[141, "module-neural_compressor.adaptor.tf_utils.smooth_quant_scaler"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[142, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[143, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[144, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[145, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[146, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[147, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.util": [[148, "module-neural_compressor.adaptor.tf_utils.util"]], "neural_compressor.adaptor.torch_utils.autoround.autoround": [[149, "module-neural_compressor.adaptor.torch_utils.autoround.autoround"]], "neural_compressor.adaptor.torch_utils.autoround.export": [[150, "module-neural_compressor.adaptor.torch_utils.autoround.export"]], "neural_compressor.adaptor.torch_utils.autoround": [[151, "module-neural_compressor.adaptor.torch_utils.autoround"]], "neural_compressor.adaptor.torch_utils.autoround.model_wrapper": [[152, "module-neural_compressor.adaptor.torch_utils.autoround.model_wrapper"]], "neural_compressor.adaptor.torch_utils.autoround.sign_sgd": [[153, "module-neural_compressor.adaptor.torch_utils.autoround.sign_sgd"]], "neural_compressor.adaptor.torch_utils.awq": [[154, "module-neural_compressor.adaptor.torch_utils.awq"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[155, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "neural_compressor.adaptor.torch_utils.gptq": [[156, "module-neural_compressor.adaptor.torch_utils.gptq"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[157, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[158, "module-neural_compressor.adaptor.torch_utils"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant": [[159, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle": [[160, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize": [[161, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load": [[162, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils": [[163, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.utils"]], "neural_compressor.adaptor.torch_utils.mixed_precision": [[164, "module-neural_compressor.adaptor.torch_utils.mixed_precision"]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[165, "module-neural_compressor.adaptor.torch_utils.model_wrapper"]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[166, "module-neural_compressor.adaptor.torch_utils.pattern_detector"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[167, "module-neural_compressor.adaptor.torch_utils.smooth_quant"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[168, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "neural_compressor.adaptor.torch_utils.teq": [[169, "module-neural_compressor.adaptor.torch_utils.teq"]], "neural_compressor.adaptor.torch_utils.util": [[170, "module-neural_compressor.adaptor.torch_utils.util"]], "}": [[170, "id3"]], "neural_compressor.adaptor.torch_utils.weight_only": [[171, "module-neural_compressor.adaptor.torch_utils.weight_only"]], "neural_compressor.algorithm.algorithm": [[172, "module-neural_compressor.algorithm.algorithm"]], "neural_compressor.algorithm.fast_bias_correction": [[173, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[174, "module-neural_compressor.algorithm"]], "neural_compressor.algorithm.smooth_quant": [[175, "module-neural_compressor.algorithm.smooth_quant"]], "neural_compressor.algorithm.weight_correction": [[176, "module-neural_compressor.algorithm.weight_correction"]], "neural_compressor.benchmark": [[177, "module-neural_compressor.benchmark"]], "neural_compressor.common.base_config": [[178, "module-neural_compressor.common.base_config"]], "Attributes": [[178, "attributes"], [179, "attributes"], [180, "attributes"], [184, "attributes"], [239, "attributes"], [247, "attributes"], [256, "attributes"], [290, "attributes"], [299, "attributes"], [310, "attributes"], [334, "attributes"], [374, "attributes"], [396, "attributes"], [399, "attributes"], [401, "attributes"], [443, "attributes"], [585, "attributes"], [597, "attributes"], [617, "attributes"]], "neural_compressor.common.base_tuning": [[179, "module-neural_compressor.common.base_tuning"]], "neural_compressor.common": [[180, "module-neural_compressor.common"]], "neural_compressor.common.tuning_param": [[181, "module-neural_compressor.common.tuning_param"]], "neural_compressor.common.utils.constants": [[182, "module-neural_compressor.common.utils.constants"]], "neural_compressor.common.utils": [[183, "module-neural_compressor.common.utils"]], "neural_compressor.common.utils.logger": [[184, "module-neural_compressor.common.utils.logger"]], "neural_compressor.common.utils.utility": [[185, "module-neural_compressor.common.utils.utility"]], "neural_compressor.compression.callbacks": [[186, "module-neural_compressor.compression.callbacks"]], "neural_compressor.compression.distillation.criterions": [[187, "module-neural_compressor.compression.distillation.criterions"]], "neural_compressor.compression.distillation": [[188, "module-neural_compressor.compression.distillation"]], "neural_compressor.compression.distillation.optimizers": [[189, "module-neural_compressor.compression.distillation.optimizers"]], "neural_compressor.compression.distillation.utility": [[190, "module-neural_compressor.compression.distillation.utility"]], "neural_compressor.compression.hpo": [[191, "module-neural_compressor.compression.hpo"]], "neural_compressor.compression.hpo.sa_optimizer": [[192, "module-neural_compressor.compression.hpo.sa_optimizer"]], "neural_compressor.compression.hpo.search_algorithms": [[193, "module-neural_compressor.compression.hpo.search_algorithms"]], "neural_compressor.compression.hpo.search_space": [[194, "module-neural_compressor.compression.hpo.search_space"]], "neural_compressor.compression": [[195, "module-neural_compressor.compression"]], "neural_compressor.compression.pruner.criteria": [[196, "module-neural_compressor.compression.pruner.criteria"]], "neural_compressor.compression.pruner.dsnot": [[197, "module-neural_compressor.compression.pruner.dsnot"]], "neural_compressor.compression.pruner": [[198, "module-neural_compressor.compression.pruner"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[199, "module-neural_compressor.compression.pruner.model_slim.auto_slim"]], "neural_compressor.compression.pruner.model_slim": [[200, "module-neural_compressor.compression.pruner.model_slim"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[201, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[202, "module-neural_compressor.compression.pruner.model_slim.weight_slim"]], "neural_compressor.compression.pruner.patterns.base": [[203, "module-neural_compressor.compression.pruner.patterns.base"]], "neural_compressor.compression.pruner.patterns": [[204, "module-neural_compressor.compression.pruner.patterns"]], "neural_compressor.compression.pruner.patterns.mha": [[205, "module-neural_compressor.compression.pruner.patterns.mha"]], "neural_compressor.compression.pruner.patterns.ninm": [[206, "module-neural_compressor.compression.pruner.patterns.ninm"]], "neural_compressor.compression.pruner.patterns.nxm": [[207, "module-neural_compressor.compression.pruner.patterns.nxm"]], "neural_compressor.compression.pruner.pruners.base": [[208, "module-neural_compressor.compression.pruner.pruners.base"]], "neural_compressor.compression.pruner.pruners.basic": [[209, "module-neural_compressor.compression.pruner.pruners.basic"]], "neural_compressor.compression.pruner.pruners.block_mask": [[210, "module-neural_compressor.compression.pruner.pruners.block_mask"]], "neural_compressor.compression.pruner.pruners": [[211, "module-neural_compressor.compression.pruner.pruners"]], "neural_compressor.compression.pruner.pruners.mha": [[212, "module-neural_compressor.compression.pruner.pruners.mha"]], "neural_compressor.compression.pruner.pruners.pattern_lock": [[213, "module-neural_compressor.compression.pruner.pruners.pattern_lock"]], "neural_compressor.compression.pruner.pruners.progressive": [[214, "module-neural_compressor.compression.pruner.pruners.progressive"]], "neural_compressor.compression.pruner.pruners.retrain_free": [[215, "module-neural_compressor.compression.pruner.pruners.retrain_free"]], "neural_compressor.compression.pruner.pruners.sparse_gpt": [[216, "module-neural_compressor.compression.pruner.pruners.sparse_gpt"]], "neural_compressor.compression.pruner.pruning": [[217, "module-neural_compressor.compression.pruner.pruning"]], "neural_compressor.compression.pruner.regs": [[218, "module-neural_compressor.compression.pruner.regs"]], "neural_compressor.compression.pruner.schedulers": [[219, "module-neural_compressor.compression.pruner.schedulers"]], "neural_compressor.compression.pruner.tf_criteria": [[220, "module-neural_compressor.compression.pruner.tf_criteria"]], "neural_compressor.compression.pruner.utils": [[221, "module-neural_compressor.compression.pruner.utils"]], "neural_compressor.compression.pruner.wanda": [[222, "module-neural_compressor.compression.pruner.wanda"]], "neural_compressor.compression.pruner.wanda.prune": [[223, "module-neural_compressor.compression.pruner.wanda.prune"]], "neural_compressor.compression.pruner.wanda.utils": [[224, "module-neural_compressor.compression.pruner.wanda.utils"]], "neural_compressor.compression.pruner.wanda.wrapper": [[225, "module-neural_compressor.compression.pruner.wanda.wrapper"]], "neural_compressor.conf.config": [[226, "module-neural_compressor.conf.config"]], "neural_compressor.conf.dotdict": [[227, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[228, "module-neural_compressor.conf"]], "neural_compressor.conf.pythonic_config": [[229, "module-neural_compressor.conf.pythonic_config"]], "neural_compressor.config": [[230, "module-neural_compressor.config"]], "neural_compressor.contrib": [[231, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[232, "module-neural_compressor.contrib.strategy"]], "neural_compressor.contrib.strategy.sigopt": [[233, "module-neural_compressor.contrib.strategy.sigopt"]], "neural_compressor.contrib.strategy.tpe": [[234, "module-neural_compressor.contrib.strategy.tpe"]], "neural_compressor.data.dataloaders.base_dataloader": [[235, "module-neural_compressor.data.dataloaders.base_dataloader"]], "neural_compressor.data.dataloaders.dataloader": [[236, "module-neural_compressor.data.dataloaders.dataloader"]], "neural_compressor.data.dataloaders.default_dataloader": [[237, "module-neural_compressor.data.dataloaders.default_dataloader"]], "neural_compressor.data.dataloaders.fetcher": [[238, "module-neural_compressor.data.dataloaders.fetcher"]], "neural_compressor.data.dataloaders": [[239, "module-neural_compressor.data.dataloaders"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[240, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[241, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[242, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "neural_compressor.data.dataloaders.sampler": [[243, "module-neural_compressor.data.dataloaders.sampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[244, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.data.datasets.bert_dataset": [[245, "module-neural_compressor.data.datasets.bert_dataset"]], "neural_compressor.data.datasets.coco_dataset": [[246, "module-neural_compressor.data.datasets.coco_dataset"]], "neural_compressor.data.datasets.dataset": [[247, "module-neural_compressor.data.datasets.dataset"]], "neural_compressor.data.datasets.dummy_dataset": [[248, "module-neural_compressor.data.datasets.dummy_dataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[249, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "neural_compressor.data.datasets.imagenet_dataset": [[250, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[251, "module-neural_compressor.data.datasets"]], "neural_compressor.data.datasets.style_transfer_dataset": [[252, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "neural_compressor.data.filters.coco_filter": [[253, "module-neural_compressor.data.filters.coco_filter"]], "neural_compressor.data.filters.filter": [[254, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[255, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[256, "module-neural_compressor.data"]], "neural_compressor.data.transforms.coco_transform": [[257, "module-neural_compressor.data.transforms.coco_transform"]], "neural_compressor.data.transforms.imagenet_transform": [[258, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[259, "module-neural_compressor.data.transforms"]], "neural_compressor.data.transforms.postprocess": [[260, "module-neural_compressor.data.transforms.postprocess"]], "neural_compressor.data.transforms.tokenization": [[261, "module-neural_compressor.data.transforms.tokenization"]], "neural_compressor.data.transforms.transform": [[262, "module-neural_compressor.data.transforms.transform"]], "neural_compressor.experimental.benchmark": [[263, "module-neural_compressor.experimental.benchmark"]], "neural_compressor.experimental.common.criterion": [[264, "module-neural_compressor.experimental.common.criterion"]], "neural_compressor.experimental.common.dataloader": [[265, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[266, "module-neural_compressor.experimental.common"]], "neural_compressor.experimental.common.metric": [[267, "module-neural_compressor.experimental.common.metric"]], "neural_compressor.experimental.common.model": [[268, "module-neural_compressor.experimental.common.model"]], "neural_compressor.experimental.common.optimizer": [[269, "module-neural_compressor.experimental.common.optimizer"]], "neural_compressor.experimental.common.postprocess": [[270, "module-neural_compressor.experimental.common.postprocess"]], "neural_compressor.experimental.common.torch_utils": [[271, "module-neural_compressor.experimental.common.torch_utils"]], "neural_compressor.experimental.component": [[272, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.compression": [[273, "module-neural_compressor.experimental.compression"]], "neural_compressor.experimental.contrib": [[274, "module-neural_compressor.experimental.contrib"]], "neural_compressor.experimental.contrib.strategy": [[275, "module-neural_compressor.experimental.contrib.strategy"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[276, "module-neural_compressor.experimental.contrib.strategy.sigopt"]], "neural_compressor.experimental.contrib.strategy.tpe": [[277, "module-neural_compressor.experimental.contrib.strategy.tpe"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[278, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[279, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[280, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[281, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[282, "module-neural_compressor.experimental.data.dataloaders"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[283, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[284, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[285, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[286, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[287, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[288, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[289, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "neural_compressor.experimental.data.datasets.dataset": [[290, "module-neural_compressor.experimental.data.datasets.dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[291, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[292, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[293, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[294, "module-neural_compressor.experimental.data.datasets"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[295, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "neural_compressor.experimental.data.filters.coco_filter": [[296, "module-neural_compressor.experimental.data.filters.coco_filter"]], "neural_compressor.experimental.data.filters.filter": [[297, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[298, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[299, "module-neural_compressor.experimental.data"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[300, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[301, "module-neural_compressor.experimental.data.transforms"]], "neural_compressor.experimental.data.transforms.tokenization": [[302, "module-neural_compressor.experimental.data.transforms.tokenization"]], "neural_compressor.experimental.data.transforms.transform": [[303, "module-neural_compressor.experimental.data.transforms.transform"]], "neural_compressor.experimental.distillation": [[304, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[305, "module-neural_compressor.experimental.export"]], "neural_compressor.experimental.export.qlinear2qdq": [[306, "module-neural_compressor.experimental.export.qlinear2qdq"]], "neural_compressor.experimental.export.tf2onnx": [[307, "module-neural_compressor.experimental.export.tf2onnx"]], "neural_compressor.experimental.export.torch2onnx": [[308, "module-neural_compressor.experimental.export.torch2onnx"]], "neural_compressor.experimental.graph_optimization": [[309, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[310, "module-neural_compressor.experimental"]], "neural_compressor.experimental.metric.bleu": [[311, "module-neural_compressor.experimental.metric.bleu"]], "neural_compressor.experimental.metric.bleu_util": [[312, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[313, "module-neural_compressor.experimental.metric.coco_label_map"]], "neural_compressor.experimental.metric.coco_tools": [[314, "module-neural_compressor.experimental.metric.coco_tools"]], "neural_compressor.experimental.metric.evaluate_squad": [[315, "module-neural_compressor.experimental.metric.evaluate_squad"]], "neural_compressor.experimental.metric.f1": [[316, "module-neural_compressor.experimental.metric.f1"]], "neural_compressor.experimental.metric": [[317, "module-neural_compressor.experimental.metric"]], "neural_compressor.experimental.metric.metric": [[318, "module-neural_compressor.experimental.metric.metric"]], "neural_compressor.experimental.mixed_precision": [[319, "module-neural_compressor.experimental.mixed_precision"]], "neural_compressor.experimental.model_conversion": [[320, "module-neural_compressor.experimental.model_conversion"]], "neural_compressor.experimental.nas.basic_nas": [[321, "module-neural_compressor.experimental.nas.basic_nas"]], "neural_compressor.experimental.nas.dynas": [[322, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas": [[323, "module-neural_compressor.experimental.nas"]], "neural_compressor.experimental.nas.nas": [[324, "module-neural_compressor.experimental.nas.nas"]], "neural_compressor.experimental.nas.nas_utils": [[325, "module-neural_compressor.experimental.nas.nas_utils"]], "neural_compressor.experimental.nas.search_algorithms": [[326, "module-neural_compressor.experimental.nas.search_algorithms"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[327, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[328, "module-neural_compressor.experimental.pruner_legacy.group_lasso"]], "neural_compressor.experimental.pruner_legacy": [[329, "module-neural_compressor.experimental.pruner_legacy"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[330, "module-neural_compressor.experimental.pruner_legacy.magnitude"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[331, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"]], "neural_compressor.experimental.pruner_legacy.pruner": [[332, "module-neural_compressor.experimental.pruner_legacy.pruner"]], "neural_compressor.experimental.pruning": [[333, "module-neural_compressor.experimental.pruning"]], "neural_compressor.experimental.pruning_recipes": [[334, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[335, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[336, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[337, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "neural_compressor.experimental.pruning_v2": [[338, "module-neural_compressor.experimental.pruning_v2"]], "neural_compressor.experimental.pytorch_pruner": [[339, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[340, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[341, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[342, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[343, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[344, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[345, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "neural_compressor.experimental.quantization": [[346, "module-neural_compressor.experimental.quantization"]], "neural_compressor.experimental.scheduler": [[347, "module-neural_compressor.experimental.scheduler"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[348, "module-neural_compressor.experimental.strategy.auto_mixed_precision"]], "neural_compressor.experimental.strategy.basic": [[349, "module-neural_compressor.experimental.strategy.basic"]], "neural_compressor.experimental.strategy.bayesian": [[350, "module-neural_compressor.experimental.strategy.bayesian"]], "neural_compressor.experimental.strategy.exhaustive": [[351, "module-neural_compressor.experimental.strategy.exhaustive"]], "neural_compressor.experimental.strategy": [[352, "module-neural_compressor.experimental.strategy"]], "neural_compressor.experimental.strategy.mse": [[353, "module-neural_compressor.experimental.strategy.mse"]], "neural_compressor.experimental.strategy.mse_v2": [[354, "module-neural_compressor.experimental.strategy.mse_v2"]], "neural_compressor.experimental.strategy.random": [[355, "module-neural_compressor.experimental.strategy.random"]], "neural_compressor.experimental.strategy.strategy": [[356, "module-neural_compressor.experimental.strategy.strategy"]], "neural_compressor.experimental.strategy.utils.constant": [[357, "module-neural_compressor.experimental.strategy.utils.constant"]], "neural_compressor.experimental.strategy.utils": [[358, "module-neural_compressor.experimental.strategy.utils"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[359, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[360, "module-neural_compressor.experimental.strategy.utils.tuning_space"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[361, "module-neural_compressor.experimental.strategy.utils.tuning_structs"]], "neural_compressor.experimental.strategy.utils.utility": [[362, "module-neural_compressor.experimental.strategy.utils.utility"]], "neural_compressor": [[363, "module-neural_compressor"]], "neural_compressor.metric.bleu": [[364, "module-neural_compressor.metric.bleu"]], "neural_compressor.metric.bleu_util": [[365, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[366, "module-neural_compressor.metric.coco_label_map"]], "neural_compressor.metric.coco_tools": [[367, "module-neural_compressor.metric.coco_tools"]], "neural_compressor.metric.evaluate_squad": [[368, "module-neural_compressor.metric.evaluate_squad"]], "neural_compressor.metric.f1": [[369, "module-neural_compressor.metric.f1"]], "neural_compressor.metric": [[370, "module-neural_compressor.metric"]], "neural_compressor.metric.metric": [[371, "module-neural_compressor.metric.metric"]], "neural_compressor.mix_precision": [[372, "module-neural_compressor.mix_precision"]], "neural_compressor.model.base_model": [[373, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[374, "module-neural_compressor.model"]], "neural_compressor.model.keras_model": [[375, "module-neural_compressor.model.keras_model"]], "neural_compressor.model.model": [[376, "module-neural_compressor.model.model"]], "neural_compressor.model.mxnet_model": [[377, "module-neural_compressor.model.mxnet_model"]], "neural_compressor.model.nets_factory": [[378, "module-neural_compressor.model.nets_factory"]], "neural_compressor.model.onnx_model": [[379, "module-neural_compressor.model.onnx_model"]], "neural_compressor.model.tensorflow_model": [[380, "module-neural_compressor.model.tensorflow_model"]], "neural_compressor.model.torch_model": [[381, "module-neural_compressor.model.torch_model"]], "neural_compressor.objective": [[382, "module-neural_compressor.objective"]], "neural_compressor.onnxrt.algorithms": [[383, "module-neural_compressor.onnxrt.algorithms"]], "neural_compressor.onnxrt.algorithms.smoother.calibrator": [[384, "module-neural_compressor.onnxrt.algorithms.smoother.calibrator"]], "neural_compressor.onnxrt.algorithms.smoother.core": [[385, "module-neural_compressor.onnxrt.algorithms.smoother.core"]], "neural_compressor.onnxrt.algorithms.smoother": [[386, "module-neural_compressor.onnxrt.algorithms.smoother"]], "neural_compressor.onnxrt.algorithms.weight_only.awq": [[387, "module-neural_compressor.onnxrt.algorithms.weight_only.awq"]], "neural_compressor.onnxrt.algorithms.weight_only.gptq": [[388, "module-neural_compressor.onnxrt.algorithms.weight_only.gptq"]], "neural_compressor.onnxrt.algorithms.weight_only": [[389, "module-neural_compressor.onnxrt.algorithms.weight_only"]], "neural_compressor.onnxrt.algorithms.weight_only.rtn": [[390, "module-neural_compressor.onnxrt.algorithms.weight_only.rtn"]], "neural_compressor.onnxrt.algorithms.weight_only.utility": [[391, "module-neural_compressor.onnxrt.algorithms.weight_only.utility"]], "neural_compressor.onnxrt": [[392, "module-neural_compressor.onnxrt"]], "neural_compressor.onnxrt.quantization.algorithm_entry": [[393, "module-neural_compressor.onnxrt.quantization.algorithm_entry"]], "neural_compressor.onnxrt.quantization.autotune": [[394, "module-neural_compressor.onnxrt.quantization.autotune"]], "neural_compressor.onnxrt.quantization.calibrate": [[395, "module-neural_compressor.onnxrt.quantization.calibrate"]], "neural_compressor.onnxrt.quantization.config": [[396, "module-neural_compressor.onnxrt.quantization.config"]], "neural_compressor.onnxrt.quantization": [[397, "module-neural_compressor.onnxrt.quantization"]], "neural_compressor.onnxrt.quantization.quantize": [[398, "module-neural_compressor.onnxrt.quantization.quantize"]], "neural_compressor.onnxrt.utils": [[399, "module-neural_compressor.onnxrt.utils"]], "neural_compressor.onnxrt.utils.onnx_model": [[400, "module-neural_compressor.onnxrt.utils.onnx_model"]], "neural_compressor.onnxrt.utils.utility": [[401, "module-neural_compressor.onnxrt.utils.utility"]], "neural_compressor.profiling": [[402, "module-neural_compressor.profiling"]], "neural_compressor.profiling.parser.factory": [[403, "module-neural_compressor.profiling.parser.factory"]], "neural_compressor.profiling.parser": [[404, "module-neural_compressor.profiling.parser"]], "neural_compressor.profiling.parser.onnx_parser.factory": [[405, "module-neural_compressor.profiling.parser.onnx_parser.factory"]], "neural_compressor.profiling.parser.onnx_parser": [[406, "module-neural_compressor.profiling.parser.onnx_parser"]], "neural_compressor.profiling.parser.onnx_parser.parser": [[407, "module-neural_compressor.profiling.parser.onnx_parser.parser"]], "neural_compressor.profiling.parser.parser": [[408, "module-neural_compressor.profiling.parser.parser"]], "neural_compressor.profiling.parser.result": [[409, "module-neural_compressor.profiling.parser.result"]], "neural_compressor.profiling.parser.tensorflow_parser.factory": [[410, "module-neural_compressor.profiling.parser.tensorflow_parser.factory"]], "neural_compressor.profiling.parser.tensorflow_parser": [[411, "module-neural_compressor.profiling.parser.tensorflow_parser"]], "neural_compressor.profiling.parser.tensorflow_parser.parser": [[412, "module-neural_compressor.profiling.parser.tensorflow_parser.parser"]], "neural_compressor.profiling.profiler.factory": [[413, "module-neural_compressor.profiling.profiler.factory"]], "neural_compressor.profiling.profiler": [[414, "module-neural_compressor.profiling.profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.factory": [[415, "module-neural_compressor.profiling.profiler.onnxrt_profiler.factory"]], "neural_compressor.profiling.profiler.onnxrt_profiler": [[416, "module-neural_compressor.profiling.profiler.onnxrt_profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.profiler": [[417, "module-neural_compressor.profiling.profiler.onnxrt_profiler.profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.utils": [[418, "module-neural_compressor.profiling.profiler.onnxrt_profiler.utils"]], "neural_compressor.profiling.profiler.profiler": [[419, "module-neural_compressor.profiling.profiler.profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.factory": [[420, "module-neural_compressor.profiling.profiler.tensorflow_profiler.factory"]], "neural_compressor.profiling.profiler.tensorflow_profiler": [[421, "module-neural_compressor.profiling.profiler.tensorflow_profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.profiler": [[422, "module-neural_compressor.profiling.profiler.tensorflow_profiler.profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.utils": [[423, "module-neural_compressor.profiling.profiler.tensorflow_profiler.utils"]], "neural_compressor.quantization": [[424, "module-neural_compressor.quantization"]], "neural_compressor.strategy.auto": [[425, "module-neural_compressor.strategy.auto"]], "neural_compressor.strategy.auto_mixed_precision": [[426, "module-neural_compressor.strategy.auto_mixed_precision"]], "neural_compressor.strategy.basic": [[427, "module-neural_compressor.strategy.basic"]], "neural_compressor.strategy.bayesian": [[428, "module-neural_compressor.strategy.bayesian"]], "neural_compressor.strategy.conservative": [[429, "module-neural_compressor.strategy.conservative"]], "neural_compressor.strategy.exhaustive": [[430, "module-neural_compressor.strategy.exhaustive"]], "neural_compressor.strategy.hawq_v2": [[431, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[432, "module-neural_compressor.strategy"]], "neural_compressor.strategy.mse": [[433, "module-neural_compressor.strategy.mse"]], "neural_compressor.strategy.mse_v2": [[434, "module-neural_compressor.strategy.mse_v2"]], "neural_compressor.strategy.random": [[435, "module-neural_compressor.strategy.random"]], "neural_compressor.strategy.strategy": [[436, "module-neural_compressor.strategy.strategy"]], "neural_compressor.strategy.utils.constant": [[437, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[438, "module-neural_compressor.strategy.utils"]], "neural_compressor.strategy.utils.tuning_sampler": [[439, "module-neural_compressor.strategy.utils.tuning_sampler"]], "neural_compressor.strategy.utils.tuning_space": [[440, "module-neural_compressor.strategy.utils.tuning_space"]], "neural_compressor.strategy.utils.tuning_structs": [[441, "module-neural_compressor.strategy.utils.tuning_structs"]], "neural_compressor.strategy.utils.utility": [[442, "module-neural_compressor.strategy.utils.utility"]], "neural_compressor.template.api_doc_example": [[443, "module-neural_compressor.template.api_doc_example"]], "neural_compressor.template": [[444, "module-neural_compressor.template"]], "neural_compressor.tensorflow.algorithms": [[445, "module-neural_compressor.tensorflow.algorithms"]], "neural_compressor.tensorflow.algorithms.smoother.calibration": [[446, "module-neural_compressor.tensorflow.algorithms.smoother.calibration"]], "neural_compressor.tensorflow.algorithms.smoother.core": [[447, "module-neural_compressor.tensorflow.algorithms.smoother.core"]], "neural_compressor.tensorflow.algorithms.smoother": [[448, "module-neural_compressor.tensorflow.algorithms.smoother"]], "neural_compressor.tensorflow.algorithms.smoother.scaler": [[449, "module-neural_compressor.tensorflow.algorithms.smoother.scaler"]], "neural_compressor.tensorflow.algorithms.static_quant": [[450, "module-neural_compressor.tensorflow.algorithms.static_quant"]], "neural_compressor.tensorflow.algorithms.static_quant.keras": [[451, "module-neural_compressor.tensorflow.algorithms.static_quant.keras"]], "neural_compressor.tensorflow.algorithms.static_quant.tensorflow": [[452, "module-neural_compressor.tensorflow.algorithms.static_quant.tensorflow"]], "neural_compressor.tensorflow": [[453, "module-neural_compressor.tensorflow"]], "neural_compressor.tensorflow.keras": [[454, "module-neural_compressor.tensorflow.keras"]], "neural_compressor.tensorflow.keras.layers.conv2d": [[455, "module-neural_compressor.tensorflow.keras.layers.conv2d"]], "neural_compressor.tensorflow.keras.layers.dense": [[456, "module-neural_compressor.tensorflow.keras.layers.dense"]], "neural_compressor.tensorflow.keras.layers.depthwise_conv2d": [[457, "module-neural_compressor.tensorflow.keras.layers.depthwise_conv2d"]], "neural_compressor.tensorflow.keras.layers": [[458, "module-neural_compressor.tensorflow.keras.layers"]], "neural_compressor.tensorflow.keras.layers.pool2d": [[459, "module-neural_compressor.tensorflow.keras.layers.pool2d"]], "neural_compressor.tensorflow.keras.layers.quantizer": [[460, "module-neural_compressor.tensorflow.keras.layers.quantizer"]], "neural_compressor.tensorflow.keras.layers.separable_conv2d": [[461, "module-neural_compressor.tensorflow.keras.layers.separable_conv2d"]], "neural_compressor.tensorflow.keras.quantization.config": [[462, "module-neural_compressor.tensorflow.keras.quantization.config"]], "neural_compressor.tensorflow.keras.quantization": [[463, "module-neural_compressor.tensorflow.keras.quantization"]], "neural_compressor.tensorflow.quantization.algorithm_entry": [[464, "module-neural_compressor.tensorflow.quantization.algorithm_entry"]], "neural_compressor.tensorflow.quantization.autotune": [[465, "module-neural_compressor.tensorflow.quantization.autotune"]], "neural_compressor.tensorflow.quantization.config": [[466, "module-neural_compressor.tensorflow.quantization.config"]], "neural_compressor.tensorflow.quantization": [[467, "module-neural_compressor.tensorflow.quantization"]], "neural_compressor.tensorflow.quantization.quantize": [[468, "module-neural_compressor.tensorflow.quantization.quantize"]], "neural_compressor.tensorflow.quantization.utils.graph_converter": [[469, "module-neural_compressor.tensorflow.quantization.utils.graph_converter"]], "neural_compressor.tensorflow.quantization.utils.graph_converter_without_calib": [[470, "module-neural_compressor.tensorflow.quantization.utils.graph_converter_without_calib"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.bf16_convert": [[471, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.dequantize_cast_optimizer": [[472, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.dequantize_cast_optimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16": [[473, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd": [[474, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout": [[475, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu": [[476, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random": [[477, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const": [[478, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction": [[479, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd": [[480, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer": [[481, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape": [[482, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm": [[483, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant": [[484, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add": [[485, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul": [[486, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math": [[487, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn": [[488, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in": [[489, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu": [[490, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm": [[491, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv": [[492, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[493, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose": [[494, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer": [[495, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass": [[496, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic": [[497, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node": [[498, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu": [[499, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize": [[500, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes": [[501, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm": [[502, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input": [[503, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes": [[504, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes": [[505, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer": [[506, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base": [[507, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter": [[508, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_fake_quant": [[509, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_fake_quant"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value": [[510, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value_without_calib": [[511, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value_without_calib"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[512, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_requantize": [[513, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_requantize"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[514, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize": [[515, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8": [[516, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.meta_op_optimizer": [[517, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.meta_op_optimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_hostconst_converter": [[518, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_hostconst_converter"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_quantized_op_cse": [[519, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_quantized_op_cse"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.rnn_convert": [[520, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.rnn_convert"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.scale_propagation": [[521, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq": [[522, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.insert_qdq_pattern": [[523, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.insert_qdq_pattern"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.merge_duplicated_qdq": [[524, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.share_qdq_y_pattern": [[525, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "neural_compressor.tensorflow.quantization.utils.graph_util": [[526, "module-neural_compressor.tensorflow.quantization.utils.graph_util"]], "neural_compressor.tensorflow.quantization.utils": [[527, "module-neural_compressor.tensorflow.quantization.utils"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph": [[528, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.fake_quantize": [[529, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat": [[530, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_config": [[531, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_config"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_helper": [[532, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_helper"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers": [[533, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.optimize_layer": [[534, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[535, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[536, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[537, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_wrapper": [[538, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_wrapper"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_bn": [[539, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_bn"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_concatv2": [[540, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_conv": [[541, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_conv"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_deconv": [[542, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_deconv"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_in": [[543, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_in"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_matmul": [[544, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_matmul"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_pooling": [[545, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq": [[546, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.optimize_qdq": [[547, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.optimize_qdq"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base": [[548, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_bn": [[549, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_bn"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_concatv2": [[550, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_concatv2"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_conv": [[551, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_conv"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_for_intel_cpu": [[552, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_for_intel_cpu"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_matmul": [[553, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_matmul"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_pooling": [[554, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_pooling"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph_common": [[555, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph_common"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.bias_correction": [[556, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.bias_correction"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.graph_transform_base": [[557, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.graph_transform_base"]], "neural_compressor.tensorflow.quantization.utils.transform_graph": [[558, "module-neural_compressor.tensorflow.quantization.utils.transform_graph"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.insert_logging": [[559, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.insert_logging"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.rerange_quantized_concat": [[560, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.rerange_quantized_concat"]], "neural_compressor.tensorflow.quantization.utils.utility": [[561, "module-neural_compressor.tensorflow.quantization.utils.utility"]], "neural_compressor.tensorflow.utils.constants": [[562, "module-neural_compressor.tensorflow.utils.constants"]], "neural_compressor.tensorflow.utils.data": [[563, "module-neural_compressor.tensorflow.utils.data"]], "neural_compressor.tensorflow.utils": [[564, "module-neural_compressor.tensorflow.utils"]], "neural_compressor.tensorflow.utils.model": [[565, "module-neural_compressor.tensorflow.utils.model"]], "neural_compressor.tensorflow.utils.model_wrappers": [[566, "module-neural_compressor.tensorflow.utils.model_wrappers"]], "neural_compressor.tensorflow.utils.nets_factory": [[567, "module-neural_compressor.tensorflow.utils.nets_factory"]], "neural_compressor.tensorflow.utils.utility": [[568, "module-neural_compressor.tensorflow.utils.utility"]], "neural_compressor.torch.algorithms.habana_fp8.fp8_quant": [[569, "module-neural_compressor.torch.algorithms.habana_fp8.fp8_quant"]], "neural_compressor.torch.algorithms.habana_fp8": [[570, "module-neural_compressor.torch.algorithms.habana_fp8"]], "neural_compressor.torch.algorithms.habana_fp8.modules": [[571, "module-neural_compressor.torch.algorithms.habana_fp8.modules"]], "neural_compressor.torch.algorithms.habana_fp8.observer": [[572, "module-neural_compressor.torch.algorithms.habana_fp8.observer"]], "neural_compressor.torch.algorithms": [[573, "module-neural_compressor.torch.algorithms"]], "neural_compressor.torch.algorithms.layer_wise": [[574, "module-neural_compressor.torch.algorithms.layer_wise"]], "neural_compressor.torch.algorithms.layer_wise.load": [[575, "module-neural_compressor.torch.algorithms.layer_wise.load"]], "neural_compressor.torch.algorithms.layer_wise.modified_pickle": [[576, "module-neural_compressor.torch.algorithms.layer_wise.modified_pickle"]], "neural_compressor.torch.algorithms.layer_wise.utils": [[577, "module-neural_compressor.torch.algorithms.layer_wise.utils"]], "neural_compressor.torch.algorithms.static_quant": [[578, "module-neural_compressor.torch.algorithms.static_quant"]], "neural_compressor.torch.algorithms.static_quant.static_quant": [[579, "module-neural_compressor.torch.algorithms.static_quant.static_quant"]], "neural_compressor.torch.algorithms.static_quant.utility": [[580, "module-neural_compressor.torch.algorithms.static_quant.utility"]], "neural_compressor.torch.algorithms.weight_only.awq": [[581, "module-neural_compressor.torch.algorithms.weight_only.awq"]], "neural_compressor.torch.algorithms.weight_only.gptq": [[582, "module-neural_compressor.torch.algorithms.weight_only.gptq"]], "neural_compressor.torch.algorithms.weight_only.hqq.auto_accelerator": [[583, "module-neural_compressor.torch.algorithms.weight_only.hqq.auto_accelerator"]], "neural_compressor.torch.algorithms.weight_only.hqq.bitpack": [[584, "module-neural_compressor.torch.algorithms.weight_only.hqq.bitpack"]], "neural_compressor.torch.algorithms.weight_only.hqq.config": [[585, "module-neural_compressor.torch.algorithms.weight_only.hqq.config"]], "neural_compressor.torch.algorithms.weight_only.hqq.core": [[586, "module-neural_compressor.torch.algorithms.weight_only.hqq.core"]], "neural_compressor.torch.algorithms.weight_only.hqq": [[587, "module-neural_compressor.torch.algorithms.weight_only.hqq"]], "neural_compressor.torch.algorithms.weight_only.hqq.optimizer": [[588, "module-neural_compressor.torch.algorithms.weight_only.hqq.optimizer"]], "neural_compressor.torch.algorithms.weight_only.hqq.qtensor": [[589, "module-neural_compressor.torch.algorithms.weight_only.hqq.qtensor"]], "neural_compressor.torch.algorithms.weight_only.hqq.quant_api": [[590, "module-neural_compressor.torch.algorithms.weight_only.hqq.quant_api"]], "neural_compressor.torch.algorithms.weight_only.hqq.quantizer": [[591, "module-neural_compressor.torch.algorithms.weight_only.hqq.quantizer"]], "neural_compressor.torch.algorithms.weight_only.hqq.utility": [[592, "module-neural_compressor.torch.algorithms.weight_only.hqq.utility"]], "neural_compressor.torch.algorithms.weight_only": [[593, "module-neural_compressor.torch.algorithms.weight_only"]], "neural_compressor.torch.algorithms.weight_only.modules": [[594, "module-neural_compressor.torch.algorithms.weight_only.modules"]], "neural_compressor.torch.algorithms.weight_only.rtn": [[595, "module-neural_compressor.torch.algorithms.weight_only.rtn"]], "neural_compressor.torch.algorithms.weight_only.teq": [[596, "module-neural_compressor.torch.algorithms.weight_only.teq"]], "neural_compressor.torch.algorithms.weight_only.utility": [[597, "module-neural_compressor.torch.algorithms.weight_only.utility"]], "neural_compressor.torch.amp.autocast": [[598, "module-neural_compressor.torch.amp.autocast"]], "neural_compressor.torch.amp.fp8.functions": [[599, "module-neural_compressor.torch.amp.fp8.functions"]], "neural_compressor.torch.amp.fp8": [[600, "module-neural_compressor.torch.amp.fp8"]], "neural_compressor.torch.amp": [[601, "module-neural_compressor.torch.amp"]], "neural_compressor.torch": [[602, "module-neural_compressor.torch"]], "neural_compressor.torch.quantization.algorithm_entry": [[603, "module-neural_compressor.torch.quantization.algorithm_entry"]], "neural_compressor.torch.quantization.autotune": [[604, "module-neural_compressor.torch.quantization.autotune"]], "neural_compressor.torch.quantization.config": [[605, "module-neural_compressor.torch.quantization.config"]], "neural_compressor.torch.quantization": [[606, "module-neural_compressor.torch.quantization"]], "neural_compressor.torch.quantization.modules": [[607, "module-neural_compressor.torch.quantization.modules"]], "neural_compressor.torch.quantization.quantize": [[608, "module-neural_compressor.torch.quantization.quantize"]], "neural_compressor.torch.utils.constants": [[609, "module-neural_compressor.torch.utils.constants"]], "neural_compressor.torch.utils.environ": [[610, "module-neural_compressor.torch.utils.environ"]], "neural_compressor.torch.utils": [[611, "module-neural_compressor.torch.utils"]], "neural_compressor.torch.utils.utility": [[612, "module-neural_compressor.torch.utils.utility"]], "neural_compressor.training": [[613, "module-neural_compressor.training"]], "neural_compressor.utils.collect_layer_histogram": [[614, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[615, "module-neural_compressor.utils.constant"]], "neural_compressor.utils.create_obj_from_config": [[616, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[617, "module-neural_compressor.utils"]], "neural_compressor.utils.kl_divergence": [[618, "module-neural_compressor.utils.kl_divergence"]], "neural_compressor.utils.load_huggingface": [[619, "module-neural_compressor.utils.load_huggingface"]], "neural_compressor.utils.logger": [[620, "module-neural_compressor.utils.logger"]], "neural_compressor.utils.neural_insights_utils": [[621, "module-neural_compressor.utils.neural_insights_utils"]], "neural_compressor.utils.options": [[622, "module-neural_compressor.utils.options"]], "neural_compressor.utils.pytorch": [[623, "module-neural_compressor.utils.pytorch"]], "neural_compressor.utils.utility": [[624, "module-neural_compressor.utils.utility"]], "neural_compressor.utils.weights_details": [[625, "module-neural_compressor.utils.weights_details"]], "neural_compressor.version": [[626, "module-neural_compressor.version"]], "Intel\u00ae Neural Compressor Documentation": [[627, "intel-neural-compressor-documentation"], [727, "intel-neural-compressor-documentation"]], "Sections": [[627, "sections"], [727, "sections"]], "Contributor Covenant Code of Conduct": [[628, "contributor-covenant-code-of-conduct"], [629, "contributor-covenant-code-of-conduct"]], "Our Pledge": [[628, "our-pledge"]], "Our Standards": [[628, "our-standards"]], "Our Responsibilities": [[628, "our-responsibilities"]], "Scope": [[628, "scope"]], "Enforcement": [[628, "enforcement"]], "Attribution": [[628, "attribution"]], "Contribution Guidelines": [[629, "contribution-guidelines"]], "Create Pull Request": [[629, "create-pull-request"]], "Step-by-Step guidelines": [[629, "step-by-step-guidelines"]], "Pull Request Checklist": [[629, "pull-request-checklist"]], "Pull Request Template": [[629, "pull-request-template"]], "Pull Request Acceptance Criteria": [[629, "pull-request-acceptance-criteria"]], "Pull Request Status Checks Overview": [[629, "pull-request-status-checks-overview"]], "Support": [[629, "support"]], "FX": [[630, "fx"]], "Introduction": [[630, "introduction"], [631, "introduction"], [634, "introduction"], [635, "introduction"], [636, "introduction"], [651, "introduction"], [652, "introduction"], [654, "introduction"], [655, "introduction"], [658, "introduction"], [659, "introduction"], [660, "introduction"], [662, "introduction"], [664, "introduction"], [667, "introduction"], [671, "introduction"], [673, "introduction"], [674, "introduction"], [695, "introduction"], [696, "introduction"], [697, "introduction"], [709, "introduction"], [710, "introduction"], [711, "introduction"], [713, "introduction"], [715, "introduction"], [717, "introduction"], [719, "introduction"], [720, "introduction"], [721, "introduction"], [722, "introduction"], [723, "introduction"], [725, "introduction"]], "FX Mode Support Matrix in Neural Compressor": [[630, "fx-mode-support-matrix-in-neural-compressor"]], "Get Started": [[630, "get-started"], [657, "get-started"], [699, "get-started"], [714, "get-started"]], "Post Training Static Quantization": [[630, "post-training-static-quantization"], [714, "post-training-static-quantization"]], "Post Training Dynamic Quantization": [[630, "post-training-dynamic-quantization"], [714, "post-training-dynamic-quantization"]], "Quantization-Aware Training": [[630, "quantization-aware-training"]], "Examples": [[630, "examples"], [631, "examples"], [651, "examples"], [654, "examples"], [655, "examples"], [658, "examples"], [659, "examples"], [660, "examples"], [661, "examples"], [662, "examples"], [672, "examples"], [673, "examples"], [674, "examples"], [710, "examples"], [711, "examples"], [714, "examples"], [715, "examples"], [717, "examples"], [721, "examples"]], "Note": [[630, "note"]], "Details": [[630, "details"]], "Common Problem": [[630, "common-problem"]], "Dynamic Quantization": [[630, "dynamic-quantization"]], "Static Quantization & Quantization Aware Training": [[630, "static-quantization-quantization-aware-training"]], "Neural Architecture Search": [[631, "neural-architecture-search"]], "Basic NAS": [[631, "basic-nas"]], "Dynamic NAS": [[631, "dynamic-nas"]], "NAS Support Matrix": [[631, "nas-support-matrix"]], "Get Started with NAS API": [[631, "get-started-with-nas-api"]], "Basic Usage": [[631, "basic-usage"]], "1. Python code + YAML": [[631, "python-code-yaml"]], "2. Python code only": [[631, "python-code-only"]], "Advanced Usage (Custom NAS)": [[631, "advanced-usage-custom-nas"]], "Security Policy": [[632, "security-policy"]], "Report a Vulnerability": [[632, "report-a-vulnerability"]], "Intel\u00ae Neural Compressor": [[633, "intel-neural-compressor"], [692, "intel-neural-compressor"]], "Installation": [[633, "installation"], [668, "installation"], [668, "id1"], [686, "installation"], [694, "installation"], [699, "installation"]], "Install from pypi": [[633, "install-from-pypi"], [694, "install-from-pypi"]], "Getting Started": [[633, "getting-started"], [665, "getting-started"], [694, "getting-started"]], "Quantization with Python API": [[633, "quantization-with-python-api"], [665, "quantization-with-python-api"], [694, "quantization-with-python-api"]], "Documentation": [[633, "documentation"]], "Selected Publications/Events": [[633, "selected-publications-events"]], "Additional Content": [[633, "additional-content"]], "Communication": [[633, "communication"]], "Adaptor": [[634, "adaptor"], [637, "adaptor"]], "Adaptor Support Matrix": [[634, "adaptor-support-matrix"]], "Working Flow": [[634, "working-flow"], [714, "working-flow"]], "Get Started with Adaptor API": [[634, "get-started-with-adaptor-api"]], "Query API": [[634, "query-api"]], "Background": [[634, "background"], [653, "background"]], "Query API Introduction": [[634, "query-api-introduction"]], "Example of Adding a New Backend Support": [[634, "example-of-adding-a-new-backend-support"]], "Capability": [[634, "capability"]], "Implement ONNXRTAdaptor Class": [[634, "implement-onnxrtadaptor-class"]], "How to Add An Adaptor": [[635, "how-to-add-an-adaptor"]], "API List that Need to Implement": [[635, "api-list-that-need-to-implement"]], "Design the framework YAML": [[635, "design-the-framework-yaml"]], "Add query_fw_capability to Adaptor": [[635, "add-query-fw-capability-to-adaptor"]], "Add quantize API according to tune_cfg": [[635, "add-quantize-api-according-to-tune-cfg"]], "Prepare calibration model from fp32 graph": [[635, "prepare-calibration-model-from-fp32-graph"]], "Run sampling iterations of the fp32 graph to calibrate quantizable operators.": [[635, "run-sampling-iterations-of-the-fp32-graph-to-calibrate-quantizable-operators"]], "Calculate the data range and generate quantized model": [[635, "calculate-the-data-range-and-generate-quantized-model"]], "How to Support New Data Type, Like Int4, with a Few Line Changes": [[636, "how-to-support-new-data-type-like-int4-with-a-few-line-changes"]], "Define the Quantization Ability of the Specific Operator": [[636, "define-the-quantization-ability-of-the-specific-operator"]], "Invoke the Operator Kernel According to the Tuning Configuration": [[636, "invoke-the-operator-kernel-according-to-the-tuning-configuration"]], "Use the New Data Type": [[636, "use-the-new-data-type"]], "Summary": [[636, "summary"]], "ONNX Runtime": [[638, "onnx-runtime"]], "Torch Utils": [[639, "torch-utils"]], "API Document Example": [[640, "api-document-example"]], "APIs": [[641, "apis"]], "Benchmark": [[642, "benchmark"], [672, "benchmark"], [713, "benchmark"]], "Compression": [[643, "compression"]], "Config": [[644, "config"]], "Mix Precision": [[645, "mix-precision"], [672, "mix-precision"]], "Model": [[646, "model"], [674, "model"], [695, "model"], [697, "model"]], "Objective": [[647, "objective"], [705, "objective"], [706, "objective"], [707, "objective"], [709, "objective"]], "Quantization": [[648, "quantization"], [713, "quantization"], [714, "quantization"]], "Strategy": [[649, "strategy"]], "Training": [[650, "training"]], "Benchmarking": [[651, "benchmarking"]], "Benchmark Support Matrix": [[651, "benchmark-support-matrix"]], "Get Started with Benchmark API": [[651, "get-started-with-benchmark-api"]], "Calibration Algorithms in Quantization": [[652, "calibration-algorithms-in-quantization"]], "Calibration Algorithms": [[652, "calibration-algorithms"]], "Support Matrix": [[652, "support-matrix"], [677, "support-matrix"]], "Reference": [[652, "reference"], [653, "reference"], [711, "reference"], [714, "reference"], [717, "reference"], [720, "reference"]], "INC Coding Conventions": [[653, "inc-coding-conventions"]], "Rules": [[653, "rules"]], "Imports": [[653, "imports"]], "Strings": [[653, "strings"]], "Logger": [[653, "logger"]], "Type Annotations": [[653, "type-annotations"]], "Comments": [[653, "comments"]], "TODO Comments": [[653, "todo-comments"]], "Public and Internal Interfaces": [[653, "public-and-internal-interfaces"]], "Folder structure": [[653, "folder-structure"]], "Recommend VS Code settings.json": [[653, "recommend-vs-code-settings-json"]], "DataLoader": [[654, "dataloader"]], "Supported Framework Dataloader Matrix": [[654, "supported-framework-dataloader-matrix"]], "Get Started with DataLoader": [[654, "get-started-with-dataloader"]], "Use Intel\u00ae Neural Compressor DataLoader API": [[654, "use-intel-neural-compressor-dataloader-api"]], "Build Custom Dataloader with Python API": [[654, "build-custom-dataloader-with-python-api"]], "Dataset": [[655, "dataset"]], "Supported Framework Dataset Matrix": [[655, "supported-framework-dataset-matrix"]], "TensorFlow": [[655, "tensorflow"], [671, "tensorflow"], [722, "tensorflow"]], "PyTorch": [[655, "pytorch"], [671, "pytorch"], [716, "pytorch"]], "MXNet": [[655, "mxnet"], [671, "mxnet"], [722, "mxnet"]], "ONNXRT": [[655, "onnxrt"], [671, "onnxrt"], [722, "onnxrt"]], "Get start with Dataset API": [[655, "get-start-with-dataset-api"]], "Config dataloader in a yaml file": [[655, "config-dataloader-in-a-yaml-file"]], "User-specific dataset": [[655, "user-specific-dataset"]], "Design": [[656, "design"], [723, "design"], [723, "id1"], [723, "id3"], [723, "id5"], [723, "id7"], [723, "id9"], [723, "id11"], [723, "id13"], [723, "id15"], [723, "id17"], [723, "id19"], [723, "id21"]], "Architecture": [[656, "architecture"], [667, "architecture"]], "Workflow": [[656, "workflow"]], "Diagnosis": [[657, "diagnosis"]], "Diagnosis Introduction": [[657, "diagnosis-introduction"]], "Supported Feature Matrix": [[657, "supported-feature-matrix"], [660, "supported-feature-matrix"], [664, "supported-feature-matrix"], [667, "supported-feature-matrix"], [713, "supported-feature-matrix"], [714, "supported-feature-matrix"], [721, "supported-feature-matrix"], [725, "supported-feature-matrix"]], "Install Intel\u00ae Neural Compressor": [[657, "install-intel-neural-compressor"]], "Modify script": [[657, "modify-script"]], "Quantization diagnosis": [[657, "quantization-diagnosis"]], "Benchmark diagnosis": [[657, "benchmark-diagnosis"]], "Example": [[657, "example"], [671, "example"], [677, "example"], [681, "example"], [709, "example"]], "Prepare dataset": [[657, "prepare-dataset"]], "Run quantization script": [[657, "run-quantization-script"]], "Run benchmark script": [[657, "run-benchmark-script"]], "See quantization data": [[657, "see-quantization-data"]], "How to do diagnosis": [[657, "how-to-do-diagnosis"]], "Parameter description": [[657, "parameter-description"]], "Diagnosis suggestions": [[657, "diagnosis-suggestions"]], "Fallback setting example": [[657, "fallback-setting-example"]], "See profiling data": [[657, "see-profiling-data"]], "Distillation": [[658, "distillation"], [672, "distillation"], [713, "distillation"]], "Knowledge Distillation": [[658, "knowledge-distillation"]], "Intermediate Layer Knowledge Distillation": [[658, "intermediate-layer-knowledge-distillation"]], "Self Distillation": [[658, "self-distillation"]], "Distillation Support Matrix": [[658, "distillation-support-matrix"]], "Get Started with Distillation API": [[658, "get-started-with-distillation-api"]], "Distillation for Quantization": [[659, "distillation-for-quantization"]], "Distillation for Quantization Support Matrix": [[659, "distillation-for-quantization-support-matrix"]], "Get Started with Distillation for Quantization API": [[659, "get-started-with-distillation-for-quantization-api"]], "Distributed Training and Inference (Evaluation)": [[660, "distributed-training-and-inference-evaluation"]], "Get Started with Distributed Training and Inference API": [[660, "get-started-with-distributed-training-and-inference-api"]], "Option 1: Pure Yaml Configuration": [[660, "option-1-pure-yaml-configuration"]], "Option 2: User Defined Training Function": [[660, "option-2-user-defined-training-function"]], "Horovodrun Execution": [[660, "horovodrun-execution"]], "Security": [[660, "security"]], "PyTorch Examples:": [[660, "pytorch-examples"]], "TensorFlow Examples:": [[660, "tensorflow-examples"]], "Example List": [[661, "example-list"]], "Release Data": [[661, "release-data"]], "Export": [[662, "export"]], "Supported Framework Model Matrix": [[662, "supported-framework-model-matrix"], [674, "supported-framework-model-matrix"], [715, "supported-framework-model-matrix"], [717, "supported-framework-model-matrix"]], "PyTorch Model": [[662, "pytorch-model"]], "FP32 Model Export": [[662, "fp32-model-export"], [662, "id1"]], "INT8 Model Export": [[662, "int8-model-export"], [662, "id2"]], "Tensorflow Model": [[662, "tensorflow-model"]], "Appendix": [[662, "appendix"]], "Supported quantized ops": [[662, "supported-quantized-ops"]], "Frequently Asked Questions": [[663, "frequently-asked-questions"]], "Common Build Issues": [[663, "common-build-issues"]], "Issue 1:": [[663, "issue-1"]], "Issue 2:": [[663, "issue-2"]], "Issue 3:": [[663, "issue-3"]], "Issue 4:": [[663, "issue-4"]], "Framework YAML Configuration Files": [[664, "framework-yaml-configuration-files"]], "Get started with Framework YAML Files": [[664, "get-started-with-framework-yaml-files"]], "Quick Samples": [[665, "quick-samples"]], "Validated Models": [[665, "validated-models"], [720, "validated-models"], [726, "validated-models"]], "Incompatible changes between v1.2 and v1.1": [[666, "incompatible-changes-between-v1-2-and-v1-1"]], "User-facing APIs": [[666, "user-facing-apis"]], "Built-in transform/dataset/metric APIs": [[666, "built-in-transform-dataset-metric-apis"]], "Infrastructure of Intel\u00ae Neural Compressor": [[667, "infrastructure-of-intel-neural-compressor"]], "Prerequisites": [[668, "prerequisites"], [699, "prerequisites"], [700, "prerequisites"]], "Install from Binary": [[668, "install-from-binary"]], "Install from Source": [[668, "install-from-source"], [694, "install-from-source"]], "Install from AI Kit": [[668, "install-from-ai-kit"]], "System Requirements": [[668, "system-requirements"]], "Validated Hardware Environment": [[668, "validated-hardware-environment"]], "Intel\u00ae Neural Compressor supports CPUs based on Intel 64 architecture or compatible processors:": [[668, "intel-neural-compressor-supports-cpus-based-on-intel-64-architecture-or-compatible-processors"]], "Intel\u00ae Neural Compressor supports GPUs built on Intel\u2019s Xe architecture:": [[668, "intel-neural-compressor-supports-gpus-built-on-intel-s-xe-architecture"]], "Intel\u00ae Neural Compressor quantized ONNX models support multiple hardware vendors through ONNX Runtime:": [[668, "intel-neural-compressor-quantized-onnx-models-support-multiple-hardware-vendors-through-onnx-runtime"]], "Validated Software Environment": [[668, "validated-software-environment"]], "Legal Information": [[669, "legal-information"]], "License": [[669, "license"]], "Citation": [[669, "citation"]], "Trademarks": [[669, "trademarks"]], "LLMs Quantization Recipes": [[670, "llms-quantization-recipes"]], "IPEX key models": [[670, "ipex-key-models"]], "Metrics": [[671, "metrics"]], "Supported Built-in Metric Matrix": [[671, "supported-built-in-metric-matrix"]], "Get Started with Metric": [[671, "get-started-with-metric"]], "Use Intel\u00ae Neural Compressor Metric API": [[671, "use-intel-neural-compressor-metric-api"]], "Build Custom Metric with Python API": [[671, "build-custom-metric-with-python-api"]], "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X": [[672, "code-migration-from-intel-neural-compressor-1-x-to-intel-neural-compressor-2-x"]], "Model Quantization": [[672, "model-quantization"]], "Post-training Quantization": [[672, "post-training-quantization"]], "Quantization Aware Training": [[672, "quantization-aware-training"], [714, "quantization-aware-training"], [714, "id1"]], "Pruning": [[672, "pruning"], [711, "pruning"], [713, "pruning"]], "Orchestration": [[672, "orchestration"]], "Mixed Precision": [[673, "mixed-precision"]], "Mixed Precision Support Matrix": [[673, "mixed-precision-support-matrix"]], "Hardware and Software requests for BF16": [[673, "hardware-and-software-requests-for-bf16"]], "Hardware and Software requests for FP16": [[673, "hardware-and-software-requests-for-fp16"]], "During quantization mixed precision": [[673, "during-quantization-mixed-precision"]], "Accuracy-driven mixed precision": [[673, "accuracy-driven-mixed-precision"]], "Get Started with Mixed Precision API": [[673, "get-started-with-mixed-precision-api"]], "Neural Coder": [[675, "neural-coder"], [692, "neural-coder"], [692, "id1"]], "What do we offer?": [[675, "what-do-we-offer"]], "Getting Started!": [[675, "getting-started"], [686, "getting-started"]], "Jupyter Lab Extension": [[675, "jupyter-lab-extension"]], "Python Launcher": [[675, "python-launcher"], [680, "python-launcher"]], "Python API": [[675, "python-api"]], "Contact": [[675, "contact"], [699, "contact"]], "AWS Amazon SageMaker Support": [[676, "aws-amazon-sagemaker-support"]], "Start Jupyter Lab 3": [[676, "start-jupyter-lab-3"]], "For SageMaker Studio": [[676, "for-sagemaker-studio"]], "For SageMaker Notebook instance": [[676, "for-sagemaker-notebook-instance"]], "Installation Guide": [[676, "installation-guide"]], "BigDL Nano Support": [[677, "bigdl-nano-support"]], "Intel CPU Platforms: Best Performance Setting": [[678, "intel-cpu-platforms-best-performance-setting"]], "Install MKL, OpenMP and JEMALLOC": [[678, "install-mkl-openmp-and-jemalloc"]], "Install NUMA Controller": [[678, "install-numa-controller"]], "Environment Variables": [[678, "environment-variables"]], "Frequency Governers": [[678, "frequency-governers"]], "Neural Coder as Python API": [[679, "neural-coder-as-python-api"]], "Enable": [[679, "enable"]], "Bench": [[679, "bench"]], "SuperBench": [[679, "superbench"]], "Quick-Start": [[680, "quick-start"]], "Launcher Arguments (Optional)": [[680, "launcher-arguments-optional"]], "Neural Coder for Quantization": [[681, "neural-coder-for-quantization"]], "Features Supported": [[681, "features-supported"]], "Models Supported": [[681, "models-supported"]], "Usage": [[681, "usage"], [701, "usage"], [701, "id2"], [701, "id6"], [701, "id9"], [701, "id16"], [701, "id19"], [701, "id22"], [701, "id25"], [720, "usage"], [721, "usage"], [721, "id1"], [723, "usage"], [723, "id2"], [723, "id4"], [723, "id6"], [723, "id8"], [723, "id10"], [723, "id12"], [723, "id14"], [723, "id16"], [723, "id18"], [723, "id20"], [723, "id22"]], "PyPI distribution:": [[681, "pypi-distribution"]], "Supported Optimization Features": [[682, "supported-optimization-features"]], "v0.4": [[683, "v0-4"]], "Highlights": [[683, "highlights"]], "Others": [[683, "others"]], "Changelog": [[684, "changelog"], [688, "changelog"]], "neural_compressor_ext_lab": [[685, "neural-compressor-ext-lab"]], "Requirements": [[685, "requirements"], [689, "requirements"], [695, "requirements"], [696, "requirements"], [697, "requirements"], [705, "requirements"]], "Install": [[685, "install"]], "Uninstall": [[685, "uninstall"]], "Contributing": [[685, "contributing"], [689, "contributing"]], "Development install": [[685, "development-install"], [689, "development-install"]], "Development uninstall": [[685, "development-uninstall"], [689, "development-uninstall"]], "Packaging the extension": [[685, "packaging-the-extension"], [689, "packaging-the-extension"]], "Intel\u00ae Neural Compressor as JupyterLab Extension": [[686, "intel-neural-compressor-as-jupyterlab-extension"]], "Auto-enable a feature": [[686, "auto-enable-a-feature"]], "Or let us help you auto-select the best feature": [[686, "or-let-us-help-you-auto-select-the-best-feature"]], "Pre-requisites": [[686, "pre-requisites"]], "Making a new release of neural_compressor_ext_lab": [[687, "making-a-new-release-of-neural-compressor-ext-lab"]], "Manual release": [[687, "manual-release"], [690, "manual-release"]], "Python package": [[687, "python-package"], [690, "python-package"]], "NPM package": [[687, "npm-package"], [690, "npm-package"]], "Automated releases with the Jupyter Releaser": [[687, "automated-releases-with-the-jupyter-releaser"], [690, "automated-releases-with-the-jupyter-releaser"]], "Publishing to conda-forge": [[687, "publishing-to-conda-forge"], [690, "publishing-to-conda-forge"]], "neural_compressor_ext_lab_alibaba": [[689, "neural-compressor-ext-lab-alibaba"]], "Making a new release of neural_compressor_ext_lab_alibaba": [[690, "making-a-new-release-of-neural-compressor-ext-lab-alibaba"]], "Change Log": [[691, "change-log"]], "[Unreleased]": [[691, "unreleased"]], "Background Introduction": [[692, "background-introduction"]], "Neural Coder Extension in VSCode": [[692, "neural-coder-extension-in-vscode"]], "Neural Coder Extension Usage": [[692, "neural-coder-extension-usage"]], "1. Open": [[692, "open"]], "2. Search": [[692, "search"]], "3. Setting": [[692, "setting"]], "4. Icon": [[692, "icon"]], "5. optimization (quantization)": [[692, "optimization-quantization"]], "5.1 Enable": [[692, "enable"]], "5.2 Auto": [[692, "auto"]], "Welcome to your VS Code Extension": [[693, "welcome-to-your-vs-code-extension"]], "What\u2019s in the folder": [[693, "what-s-in-the-folder"]], "Setup": [[693, "setup"]], "Get up and running straight away": [[693, "get-up-and-running-straight-away"]], "Make changes": [[693, "make-changes"]], "Explore the API": [[693, "explore-the-api"]], "Run tests": [[693, "run-tests"]], "Go further": [[693, "go-further"]], "Neural Insights": [[694, "neural-insights"]], "Start the Neural Insights": [[694, "start-the-neural-insights"]], "Tensor dump examples": [[694, "tensor-dump-examples"]], "Step by Step Diagnosis Example": [[694, "step-by-step-diagnosis-example"]], "Research Collaborations": [[694, "research-collaborations"]], "Step by step example how to debug accuracy with Neural Insights": [[695, "step-by-step-example-how-to-debug-accuracy-with-neural-insights"], [697, "step-by-step-example-how-to-debug-accuracy-with-neural-insights"]], "Preparation": [[695, "preparation"], [696, "preparation"], [697, "preparation"], [719, "preparation"]], "Running the quantization": [[695, "running-the-quantization"], [696, "running-the-quantization"], [697, "running-the-quantization"]], "Analyzing the result of quantization": [[695, "analyzing-the-result-of-quantization"], [697, "analyzing-the-result-of-quantization"]], "Weights summary": [[695, "weights-summary"]], "Activations summary": [[695, "activations-summary"]], "Step by step example how to dump weights data for PyTorch model with Neural Insights": [[696, "step-by-step-example-how-to-dump-weights-data-for-pytorch-model-with-neural-insights"]], "Source": [[696, "source"], [697, "source"]], "Prepare the dataset": [[697, "prepare-the-dataset"]], "Analyzing weight histograms": [[697, "analyzing-weight-histograms"]], "Open Neural Insights": [[697, "open-neural-insights"]], "Getting Started with Create React App": [[698, "getting-started-with-create-react-app"]], "Available Scripts": [[698, "available-scripts"]], "npm start": [[698, "npm-start"]], "npm test": [[698, "npm-test"]], "npm run build": [[698, "npm-run-build"]], "npm run eject": [[698, "npm-run-eject"]], "Learn More": [[698, "learn-more"], [699, "learn-more"]], "Code Splitting": [[698, "code-splitting"]], "Analyzing the Bundle Size": [[698, "analyzing-the-bundle-size"]], "Making a Progressive Web App": [[698, "making-a-progressive-web-app"]], "Advanced Configuration": [[698, "advanced-configuration"]], "Deployment": [[698, "deployment"]], "npm run build fails to minify": [[698, "npm-run-build-fails-to-minify"]], "What\u2019s Neural Solution?": [[699, "what-s-neural-solution"]], "Why Neural Solution?": [[699, "why-neural-solution"]], "How does Neural Solution Work?": [[699, "how-does-neural-solution-work"]], "Method 1. Using pip:": [[699, "method-1-using-pip"]], "Method 2. Building from source:": [[699, "method-2-building-from-source"]], "End-to-end examples": [[699, "end-to-end-examples"]], "Get started": [[700, "get-started"]], "Install Neural Solution": [[700, "install-neural-solution"]], "Method 1. Using pip": [[700, "method-1-using-pip"]], "Method 2. Building from source": [[700, "method-2-building-from-source"]], "Start service": [[700, "start-service"]], "Submit task": [[700, "submit-task"]], "Query task status": [[700, "query-task-status"]], "Stop service": [[700, "stop-service"]], "Inspect logs": [[700, "inspect-logs"]], "Manage resource": [[700, "manage-resource"], [705, "manage-resource"], [706, "manage-resource"]], "Node States": [[700, "node-states"]], "Query cluster": [[700, "query-cluster"]], "Add node": [[700, "add-node"]], "Remove node": [[700, "remove-node"]], "Neural Solution API": [[701, "neural-solution-api"]], "Base URL": [[701, "base-url"]], "Endpoints": [[701, "endpoints"]], "GET /": [[701, "get"]], "Description": [[701, "description"], [701, "id1"], [701, "id4"], [701, "id8"], [701, "id12"], [701, "id15"], [701, "id18"], [701, "id21"], [701, "id24"]], "Responses": [[701, "responses"], [701, "id3"], [701, "id7"], [701, "id11"], [701, "id14"], [701, "id17"], [701, "id20"], [701, "id23"], [701, "id26"]], "POST /task/submit": [[701, "post-task-submit"]], "Parameters": [[701, "parameters"], [701, "id5"], [701, "id10"], [701, "id13"]], "GET /task/status/{task_id}": [[701, "get-task-status-task-id"]], "GET /task/log/{task_id}": [[701, "get-task-log-task-id"]], "WebSocket /task/screen/{task_id}": [[701, "websocket-task-screen-task-id"]], "GET /ping": [[701, "get-ping"]], "GET /cluster": [[701, "get-cluster"]], "GET /download/{task_id}": [[701, "get-download-task-id"]], "GET /description": [[701, "get-description"]], "Design Doc for Optimization as a Service [WIP]": [[702, "design-doc-for-optimization-as-a-service-wip"]], "Contents": [[702, "contents"]], "Overview": [[702, "overview"], [724, "overview"]], "Workflow of OaaS": [[702, "workflow-of-oaas"]], "Class definition diagram": [[702, "class-definition-diagram"]], "Extensibility": [[702, "extensibility"]], "Task request description": [[703, "task-request-description"]], "Examples List": [[704, "examples-list"]], "An end-to-end example: quantize a custom model with Neural Solution": [[705, "an-end-to-end-example-quantize-a-custom-model-with-neural-solution"]], "Start the Neural Solution Service": [[705, "start-the-neural-solution-service"], [706, "start-the-neural-solution-service"], [707, "start-the-neural-solution-service"]], "Submit optimization task": [[705, "submit-optimization-task"], [706, "submit-optimization-task"], [707, "submit-optimization-task"]], "Query optimization result": [[705, "query-optimization-result"], [706, "query-optimization-result"], [707, "query-optimization-result"]], "Download optimized model": [[705, "download-optimized-model"], [706, "download-optimized-model"]], "Stop the service": [[705, "stop-the-service"], [706, "stop-the-service"], [707, "stop-the-service"]], "An end-to-end example: quantize a Hugging Face model with Neural Solution": [[706, "an-end-to-end-example-quantize-a-hugging-face-model-with-neural-solution"]], "An end-to-end example: quantize a Hugging Face model with Neural Solution gRPC API": [[707, "an-end-to-end-example-quantize-a-hugging-face-model-with-neural-solution-grpc-api"]], "Client": [[708, "client"]], "Single Objective": [[709, "single-objective"]], "Multiple Objectives": [[709, "multiple-objectives"]], "Objective Support Matrix": [[709, "objective-support-matrix"]], "Get Started with Objective API": [[709, "get-started-with-objective-api"]], "Config Single Objective": [[709, "config-single-objective"]], "Config Multiple Objectives": [[709, "config-multiple-objectives"]], "Optimization Orchestration": [[710, "optimization-orchestration"]], "One-shot": [[710, "one-shot"]], "Orchestration Support Matrix": [[710, "orchestration-support-matrix"]], "Get Started with Orchestration API": [[710, "get-started-with-orchestration-api"]], "Neural Network Pruning": [[711, "neural-network-pruning"]], "Pruning Patterns": [[711, "pruning-patterns"]], "Pruning Criteria": [[711, "pruning-criteria"]], "Pruning Types": [[711, "pruning-types"]], "Pruning Schedules": [[711, "pruning-schedules"]], "Pruning Scope": [[711, "pruning-scope"]], "Sparsity Decay Types": [[711, "sparsity-decay-types"]], "Regularization": [[711, "regularization"]], "Large Language Model Pruning": [[711, "large-language-model-pruning"]], "Pruning Support Matrix": [[711, "pruning-support-matrix"]], "Get Started with Pruning API": [[711, "get-started-with-pruning-api"]], "Training-aware pruning API": [[711, "training-aware-pruning-api"]], "Retrain-free Pruning API": [[711, "retrain-free-pruning-api"]], "Sparse Model Deployment": [[711, "sparse-model-deployment"]], "Pruning with Hyperparameter Optimization": [[711, "pruning-with-hyperparameter-optimization"]], "Full Publications/Events (79)": [[712, "full-publications-events-79"]], "2023 (25)": [[712, "id1"]], "2022 (35)": [[712, "id2"]], "2021 (15)": [[712, "id3"]], "2018 - 2020 (4)": [[712, "id4"]], "Pythonic Style Access for Configurations": [[713, "pythonic-style-access-for-configurations"]], "Pythonic API for User Configurations": [[713, "pythonic-api-for-user-configurations"], [713, "id1"]], "Pythonic API for Framework Configurations": [[713, "pythonic-api-for-framework-configurations"], [713, "id2"]], "Get Started with Pythonic API for Configurations": [[713, "get-started-with-pythonic-api-for-configurations"]], "NAS": [[713, "nas"]], "Quantization Introduction": [[714, "quantization-introduction"]], "Quantization Fundamentals": [[714, "quantization-fundamentals"], [720, "quantization-fundamentals"]], "Quantization Support Matrix": [[714, "quantization-support-matrix"]], "Quantization Scheme in TensorFlow": [[714, "quantization-scheme-in-tensorflow"]], "Quantization Scheme in PyTorch": [[714, "quantization-scheme-in-pytorch"]], "Quantization Scheme in IPEX": [[714, "quantization-scheme-in-ipex"]], "Quantization Scheme in MXNet": [[714, "quantization-scheme-in-mxnet"]], "Quantization Scheme in ONNX Runtime": [[714, "quantization-scheme-in-onnx-runtime"]], "Quantization Approaches": [[714, "quantization-approaches"]], "With or Without Accuracy Aware Tuning": [[714, "with-or-without-accuracy-aware-tuning"]], "Post Training Quantization": [[714, "post-training-quantization"]], "Specify Quantization Rules": [[714, "specify-quantization-rules"]], "Specify Quantization Recipes": [[714, "specify-quantization-recipes"]], "Specify Quantization Backend and Device": [[714, "specify-quantization-backend-and-device"]], "Layer Wise Quantization (LWQ)": [[715, "layer-wise-quantization-lwq"]], "PyTorch framework example": [[715, "pytorch-framework-example"]], "ONNX Runtime framework example": [[715, "onnx-runtime-framework-example"]], "Turn OFF Auto Mixed Precision during Quantization": [[716, "turn-off-auto-mixed-precision-during-quantization"]], "Tensorflow": [[716, "tensorflow"]], "Weight Only Quantization (WOQ)": [[717, "weight-only-quantization-woq"]], "Quantization Capability": [[717, "quantization-capability"]], "Export Compressed Model": [[717, "export-compressed-model"]], "User Code Example": [[717, "user-code-example"]], "WOQ Algorithms Tuning": [[717, "woq-algorithms-tuning"]], "User code example": [[717, "id1"]], "Release": [[718, "release"]], "Release Notes": [[718, "release-notes"]], "Known Issues": [[718, "known-issues"]], "Incompatible Changes": [[718, "incompatible-changes"]], "SigOpt Strategy": [[719, "sigopt-strategy"]], "SigOpt Platform": [[719, "sigopt-platform"]], "Neural Compressor Configuration": [[719, "neural-compressor-configuration"]], "Performance": [[719, "performance"]], "Benefit of SigOpt Strategy": [[719, "benefit-of-sigopt-strategy"]], "Performance Comparison of Different Strategies": [[719, "performance-comparison-of-different-strategies"]], "Smooth Quant": [[720, "smooth-quant"]], "Per-tensor & Per-channel": [[720, "per-tensor-per-channel"]], "Per-tensor example": [[720, "per-tensor-example"]], "Per-channel example": [[720, "per-channel-example"]], "Matmul quantization example": [[720, "matmul-quantization-example"]], "Per-channel limitation": [[720, "per-channel-limitation"]], "SmoothQuant and Our Enhancement": [[720, "smoothquant-and-our-enhancement"]], "SmoothQuant": [[720, "smoothquant"]], "Our enhancement:": [[720, "our-enhancement"]], "Algorithm: Auto-tuning of $\\alpha$.": [[720, "algorithm-auto-tuning-of-alpha"]], "Engineering": [[720, "engineering"]], "Using a fixed alpha": [[720, "using-a-fixed-alpha"]], "Determining the alpha through auto-tuning": [[720, "determining-the-alpha-through-auto-tuning"]], "Auto-tune the alpha for the entire model": [[720, "auto-tune-the-alpha-for-the-entire-model"]], "Auto-tune the alpha for each layer/block": [[720, "auto-tune-the-alpha-for-each-layer-block"]], "Supported Framework Matrix": [[720, "supported-framework-matrix"]], "TensorBoard": [[721, "tensorboard"]], "Get Started with TensorBoard": [[721, "get-started-with-tensorboard"]], "PyTorch TensorBoard": [[721, "pytorch-tensorboard"]], "TensorFlow Tensorboard": [[721, "tensorflow-tensorboard"]], "PyTorch Examples": [[721, "pytorch-examples"]], "TensorFlow Examples": [[721, "tensorflow-examples"]], "Transform": [[722, "transform"]], "Transform Support List": [[722, "transform-support-list"]], "Pytorch": [[722, "pytorch"]], "Tuning Strategies": [[723, "tuning-strategies"]], "Strategy Design": [[723, "strategy-design"]], "Tuning Space": [[723, "tuning-space"]], "Exit Policy": [[723, "exit-policy"]], "Accuracy Criteria": [[723, "accuracy-criteria"]], "Tuning Process": [[723, "tuning-process"]], "Tuning Algorithms": [[723, "tuning-algorithms"]], "Auto": [[723, "auto"]], "Conservative Tuning": [[723, "conservative-tuning"]], "Basic": [[723, "basic"]], "MSE": [[723, "mse"]], "MSE_V2": [[723, "mse-v2"]], "HAWQ_V2": [[723, "hawq-v2"]], "Bayesian": [[723, "bayesian"]], "Exhaustive": [[723, "exhaustive"]], "Random": [[723, "random"]], "SigOpt": [[723, "sigopt"]], "TPE": [[723, "tpe"]], "Distributed Tuning": [[723, "distributed-tuning"]], "Customize a New Tuning Strategy": [[723, "customize-a-new-tuning-strategy"]], "User Guide": [[724, "user-guide"]], "Python-based APIs": [[724, "python-based-apis"]], "Neural Coder (Zero-code Optimization)": [[724, "neural-coder-zero-code-optimization"]], "Advanced Topics": [[724, "advanced-topics"]], "Innovations for Productivity": [[724, "innovations-for-productivity"]], "User YAML Configuration Files": [[725, "user-yaml-configuration-files"]], "Get started with User YAML Files": [[725, "get-started-with-user-yaml-files"]], "Validated Quantization Examples": [[726, "validated-quantization-examples"]], "TensorFlow Models with Intel TensorFlow 2.13.0": [[726, "tensorflow-models-with-intel-tensorflow-2-13-0"]], "PyTorch Models with Torch 2.0.1+cpu in PTQ Mode": [[726, "pytorch-models-with-torch-2-0-1-cpu-in-ptq-mode"]], "PyTorch Models with Torch 2.0.1+cpu in QAT Mode": [[726, "pytorch-models-with-torch-2-0-1-cpu-in-qat-mode"]], "PyTorch Models with Intel\u00ae Extension for PyTorch* 2.0.1+cpu": [[726, "pytorch-models-with-intel-extension-for-pytorch-2-0-1-cpu"]], "PyTorch Models with Torch 2.0.1+cpu in WOQ Mode": [[726, "pytorch-models-with-torch-2-0-1-cpu-in-woq-mode"]], "ONNX Models with ONNX Runtime 1.15.1": [[726, "onnx-models-with-onnx-runtime-1-15-1"]], "ONNX Models with ONNX Runtime 1.15.0 in WOQ Mode": [[726, "onnx-models-with-onnx-runtime-1-15-0-in-woq-mode"]], "Validated Pruning Examples": [[726, "validated-pruning-examples"]], "Validated Knowledge Distillation Examples": [[726, "validated-knowledge-distillation-examples"]], "Validated ONNX QDQ INT8 Models on Multiple Hardware through ONNX Runtime": [[726, "validated-onnx-qdq-int8-models-on-multiple-hardware-through-onnx-runtime"]]}, "indexentries": {"block_mask": [[0, "module-block_mask"]], "module": [[0, "module-block_mask"], [1, "module-neural_compressor.adaptor.adaptor"], [2, "module-neural_compressor.adaptor"], [3, "module-neural_compressor.adaptor.keras"], [4, "module-neural_compressor.adaptor.keras_utils.conv2d"], [5, "module-neural_compressor.adaptor.keras_utils.dense"], [6, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"], [7, "module-neural_compressor.adaptor.keras_utils"], [8, "module-neural_compressor.adaptor.keras_utils.pool2d"], [9, "module-neural_compressor.adaptor.keras_utils.quantizer"], [10, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"], [11, "module-neural_compressor.adaptor.mxnet"], [12, "module-neural_compressor.adaptor.mxnet_utils"], [13, "module-neural_compressor.adaptor.mxnet_utils.util"], [14, "module-neural_compressor.adaptor.onnxrt"], [15, "module-neural_compressor.adaptor.ox_utils.calibration"], [16, "module-neural_compressor.adaptor.ox_utils.calibrator"], [17, "module-neural_compressor.adaptor.ox_utils"], [18, "module-neural_compressor.adaptor.ox_utils.operators.activation"], [19, "module-neural_compressor.adaptor.ox_utils.operators.argmax"], [20, "module-neural_compressor.adaptor.ox_utils.operators.attention"], [21, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"], [22, "module-neural_compressor.adaptor.ox_utils.operators.concat"], [23, "module-neural_compressor.adaptor.ox_utils.operators.conv"], [24, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"], [25, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"], [26, "module-neural_compressor.adaptor.ox_utils.operators.gather"], [27, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"], [28, "module-neural_compressor.adaptor.ox_utils.operators.gemm"], [29, "module-neural_compressor.adaptor.ox_utils.operators"], [30, "module-neural_compressor.adaptor.ox_utils.operators.lstm"], [31, "module-neural_compressor.adaptor.ox_utils.operators.matmul"], [32, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"], [33, "module-neural_compressor.adaptor.ox_utils.operators.norm"], [34, "module-neural_compressor.adaptor.ox_utils.operators.ops"], [35, "module-neural_compressor.adaptor.ox_utils.operators.pad"], [36, "module-neural_compressor.adaptor.ox_utils.operators.pooling"], [37, "module-neural_compressor.adaptor.ox_utils.operators.reduce"], [38, "module-neural_compressor.adaptor.ox_utils.operators.resize"], [39, "module-neural_compressor.adaptor.ox_utils.operators.split"], [40, "module-neural_compressor.adaptor.ox_utils.operators.unary_op"], [41, "module-neural_compressor.adaptor.ox_utils.quantizer"], [42, "module-neural_compressor.adaptor.ox_utils.smooth_quant"], [43, "module-neural_compressor.adaptor.ox_utils.util"], [44, "module-neural_compressor.adaptor.ox_utils.weight_only"], [45, "module-neural_compressor.adaptor.pytorch"], [46, "module-neural_compressor.adaptor.query"], [47, "module-neural_compressor.adaptor.tensorflow"], [48, "module-neural_compressor.adaptor.tf_utils.graph_converter"], [49, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"], [50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"], [51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer"], [52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"], [53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"], [54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"], [55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"], [56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"], [57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"], [58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"], [59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"], [60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"], [61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"], [62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"], [63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"], [64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"], [65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"], [66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"], [67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"], [68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"], [69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"], [70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"], [71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"], [72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"], [73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"], [74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"], [75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"], [76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"], [77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"], [78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"], [79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"], [80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"], [81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"], [82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"], [83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"], [84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"], [85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"], [86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"], [87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"], [88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"], [89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"], [90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"], [91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"], [92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"], [93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"], [94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"], [95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"], [96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"], [97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"], [98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"], [99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"], [100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"], [101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"], [102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"], [103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"], [104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"], [105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"], [106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"], [107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"], [108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"], [109, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"], [110, "module-neural_compressor.adaptor.tf_utils.graph_util"], [111, "module-neural_compressor.adaptor.tf_utils"], [112, "module-neural_compressor.adaptor.tf_utils.quantize_graph"], [113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"], [114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"], [115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"], [116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"], [117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"], [118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"], [119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"], [120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"], [121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"], [122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"], [123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"], [124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"], [125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"], [126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"], [127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"], [128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"], [129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"], [130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"], [131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"], [132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"], [133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"], [134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"], [135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"], [136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"], [137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"], [138, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"], [139, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"], [140, "module-neural_compressor.adaptor.tf_utils.smooth_quant_calibration"], [141, "module-neural_compressor.adaptor.tf_utils.smooth_quant_scaler"], [142, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"], [143, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"], [144, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"], [145, "module-neural_compressor.adaptor.tf_utils.transform_graph"], [146, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"], [147, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"], [148, "module-neural_compressor.adaptor.tf_utils.util"], [149, "module-neural_compressor.adaptor.torch_utils.autoround.autoround"], [150, "module-neural_compressor.adaptor.torch_utils.autoround.export"], [151, "module-neural_compressor.adaptor.torch_utils.autoround"], [152, "module-neural_compressor.adaptor.torch_utils.autoround.model_wrapper"], [153, "module-neural_compressor.adaptor.torch_utils.autoround.sign_sgd"], [154, "module-neural_compressor.adaptor.torch_utils.awq"], [155, "module-neural_compressor.adaptor.torch_utils.bf16_convert"], [156, "module-neural_compressor.adaptor.torch_utils.gptq"], [157, "module-neural_compressor.adaptor.torch_utils.hawq_metric"], [158, "module-neural_compressor.adaptor.torch_utils"], [159, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant"], [160, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle"], [161, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize"], [162, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load"], [163, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.utils"], [164, "module-neural_compressor.adaptor.torch_utils.mixed_precision"], [165, "module-neural_compressor.adaptor.torch_utils.model_wrapper"], [166, "module-neural_compressor.adaptor.torch_utils.pattern_detector"], [167, "module-neural_compressor.adaptor.torch_utils.smooth_quant"], [168, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"], [169, "module-neural_compressor.adaptor.torch_utils.teq"], [170, "module-neural_compressor.adaptor.torch_utils.util"], [171, "module-neural_compressor.adaptor.torch_utils.weight_only"], [172, "module-neural_compressor.algorithm.algorithm"], [173, "module-neural_compressor.algorithm.fast_bias_correction"], [174, "module-neural_compressor.algorithm"], [175, "module-neural_compressor.algorithm.smooth_quant"], [176, "module-neural_compressor.algorithm.weight_correction"], [177, "module-neural_compressor.benchmark"], [178, "module-neural_compressor.common.base_config"], [179, "module-neural_compressor.common.base_tuning"], [180, "module-neural_compressor.common"], [181, "module-neural_compressor.common.tuning_param"], [182, "module-neural_compressor.common.utils.constants"], [183, "module-neural_compressor.common.utils"], [184, "module-neural_compressor.common.utils.logger"], [185, "module-neural_compressor.common.utils.utility"], [186, "module-neural_compressor.compression.callbacks"], [187, "module-neural_compressor.compression.distillation.criterions"], [188, "module-neural_compressor.compression.distillation"], [189, "module-neural_compressor.compression.distillation.optimizers"], [190, "module-neural_compressor.compression.distillation.utility"], [191, "module-neural_compressor.compression.hpo"], [192, "module-neural_compressor.compression.hpo.sa_optimizer"], [193, "module-neural_compressor.compression.hpo.search_algorithms"], [194, "module-neural_compressor.compression.hpo.search_space"], [195, "module-neural_compressor.compression"], [196, "module-neural_compressor.compression.pruner.criteria"], [197, "module-neural_compressor.compression.pruner.dsnot"], [198, "module-neural_compressor.compression.pruner"], [199, "module-neural_compressor.compression.pruner.model_slim.auto_slim"], [200, "module-neural_compressor.compression.pruner.model_slim"], [201, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"], [202, "module-neural_compressor.compression.pruner.model_slim.weight_slim"], [203, "module-neural_compressor.compression.pruner.patterns.base"], [204, "module-neural_compressor.compression.pruner.patterns"], [205, "module-neural_compressor.compression.pruner.patterns.mha"], [206, "module-neural_compressor.compression.pruner.patterns.ninm"], [207, "module-neural_compressor.compression.pruner.patterns.nxm"], [208, "module-neural_compressor.compression.pruner.pruners.base"], [209, "module-neural_compressor.compression.pruner.pruners.basic"], [210, "module-neural_compressor.compression.pruner.pruners.block_mask"], [211, "module-neural_compressor.compression.pruner.pruners"], [212, "module-neural_compressor.compression.pruner.pruners.mha"], [213, "module-neural_compressor.compression.pruner.pruners.pattern_lock"], [214, "module-neural_compressor.compression.pruner.pruners.progressive"], [215, "module-neural_compressor.compression.pruner.pruners.retrain_free"], [216, "module-neural_compressor.compression.pruner.pruners.sparse_gpt"], [217, "module-neural_compressor.compression.pruner.pruning"], [218, "module-neural_compressor.compression.pruner.regs"], [219, "module-neural_compressor.compression.pruner.schedulers"], [220, "module-neural_compressor.compression.pruner.tf_criteria"], [221, "module-neural_compressor.compression.pruner.utils"], [222, "module-neural_compressor.compression.pruner.wanda"], [223, "module-neural_compressor.compression.pruner.wanda.prune"], [224, "module-neural_compressor.compression.pruner.wanda.utils"], [225, "module-neural_compressor.compression.pruner.wanda.wrapper"], [226, "module-neural_compressor.conf.config"], [227, "module-neural_compressor.conf.dotdict"], [228, "module-neural_compressor.conf"], [229, "module-neural_compressor.conf.pythonic_config"], [230, "module-neural_compressor.config"], [231, "module-neural_compressor.contrib"], [232, "module-neural_compressor.contrib.strategy"], [233, "module-neural_compressor.contrib.strategy.sigopt"], [234, "module-neural_compressor.contrib.strategy.tpe"], [235, "module-neural_compressor.data.dataloaders.base_dataloader"], [236, "module-neural_compressor.data.dataloaders.dataloader"], [237, "module-neural_compressor.data.dataloaders.default_dataloader"], [238, "module-neural_compressor.data.dataloaders.fetcher"], [239, "module-neural_compressor.data.dataloaders"], [240, "module-neural_compressor.data.dataloaders.mxnet_dataloader"], [241, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"], [242, "module-neural_compressor.data.dataloaders.pytorch_dataloader"], [243, "module-neural_compressor.data.dataloaders.sampler"], [244, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"], [245, "module-neural_compressor.data.datasets.bert_dataset"], [246, "module-neural_compressor.data.datasets.coco_dataset"], [247, "module-neural_compressor.data.datasets.dataset"], [248, "module-neural_compressor.data.datasets.dummy_dataset"], [249, "module-neural_compressor.data.datasets.dummy_dataset_v2"], [250, "module-neural_compressor.data.datasets.imagenet_dataset"], [251, "module-neural_compressor.data.datasets"], [252, "module-neural_compressor.data.datasets.style_transfer_dataset"], [253, "module-neural_compressor.data.filters.coco_filter"], [254, "module-neural_compressor.data.filters.filter"], [255, "module-neural_compressor.data.filters"], [256, "module-neural_compressor.data"], [257, "module-neural_compressor.data.transforms.coco_transform"], [258, "module-neural_compressor.data.transforms.imagenet_transform"], [259, "module-neural_compressor.data.transforms"], [260, "module-neural_compressor.data.transforms.postprocess"], [261, "module-neural_compressor.data.transforms.tokenization"], [262, "module-neural_compressor.data.transforms.transform"], [263, "module-neural_compressor.experimental.benchmark"], [264, "module-neural_compressor.experimental.common.criterion"], [265, "module-neural_compressor.experimental.common.dataloader"], [266, "module-neural_compressor.experimental.common"], [267, "module-neural_compressor.experimental.common.metric"], [268, "module-neural_compressor.experimental.common.model"], [269, "module-neural_compressor.experimental.common.optimizer"], [270, "module-neural_compressor.experimental.common.postprocess"], [271, "module-neural_compressor.experimental.common.torch_utils"], [272, "module-neural_compressor.experimental.component"], [273, "module-neural_compressor.experimental.compression"], [274, "module-neural_compressor.experimental.contrib"], [275, "module-neural_compressor.experimental.contrib.strategy"], [276, "module-neural_compressor.experimental.contrib.strategy.sigopt"], [277, "module-neural_compressor.experimental.contrib.strategy.tpe"], [278, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"], [279, "module-neural_compressor.experimental.data.dataloaders.dataloader"], [280, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"], [281, "module-neural_compressor.experimental.data.dataloaders.fetcher"], [282, "module-neural_compressor.experimental.data.dataloaders"], [283, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"], [284, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"], [285, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"], [286, "module-neural_compressor.experimental.data.dataloaders.sampler"], [287, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"], [288, "module-neural_compressor.experimental.data.datasets.bert_dataset"], [289, "module-neural_compressor.experimental.data.datasets.coco_dataset"], [290, "module-neural_compressor.experimental.data.datasets.dataset"], [291, "module-neural_compressor.experimental.data.datasets.dummy_dataset"], [292, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"], [293, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"], [294, "module-neural_compressor.experimental.data.datasets"], [295, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"], [296, "module-neural_compressor.experimental.data.filters.coco_filter"], [297, "module-neural_compressor.experimental.data.filters.filter"], [298, "module-neural_compressor.experimental.data.filters"], [299, "module-neural_compressor.experimental.data"], [300, "module-neural_compressor.experimental.data.transforms.imagenet_transform"], [301, "module-neural_compressor.experimental.data.transforms"], [302, "module-neural_compressor.experimental.data.transforms.tokenization"], [303, "module-neural_compressor.experimental.data.transforms.transform"], [304, "module-neural_compressor.experimental.distillation"], [305, "module-neural_compressor.experimental.export"], [306, "module-neural_compressor.experimental.export.qlinear2qdq"], [307, "module-neural_compressor.experimental.export.tf2onnx"], [308, "module-neural_compressor.experimental.export.torch2onnx"], [309, "module-neural_compressor.experimental.graph_optimization"], [310, "module-neural_compressor.experimental"], [311, "module-neural_compressor.experimental.metric.bleu"], [312, "module-neural_compressor.experimental.metric.bleu_util"], [313, "module-neural_compressor.experimental.metric.coco_label_map"], [314, "module-neural_compressor.experimental.metric.coco_tools"], [315, "module-neural_compressor.experimental.metric.evaluate_squad"], [316, "module-neural_compressor.experimental.metric.f1"], [317, "module-neural_compressor.experimental.metric"], [318, "module-neural_compressor.experimental.metric.metric"], [319, "module-neural_compressor.experimental.mixed_precision"], [320, "module-neural_compressor.experimental.model_conversion"], [321, "module-neural_compressor.experimental.nas.basic_nas"], [322, "module-neural_compressor.experimental.nas.dynas"], [323, "module-neural_compressor.experimental.nas"], [324, "module-neural_compressor.experimental.nas.nas"], [325, "module-neural_compressor.experimental.nas.nas_utils"], [326, "module-neural_compressor.experimental.nas.search_algorithms"], [327, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"], [328, "module-neural_compressor.experimental.pruner_legacy.group_lasso"], [329, "module-neural_compressor.experimental.pruner_legacy"], [330, "module-neural_compressor.experimental.pruner_legacy.magnitude"], [331, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"], [332, "module-neural_compressor.experimental.pruner_legacy.pruner"], [333, "module-neural_compressor.experimental.pruning"], [334, "module-neural_compressor.experimental.pruning_recipes"], [335, "module-neural_compressor.experimental.pruning_recipes.patterns"], [336, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"], [337, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"], [338, "module-neural_compressor.experimental.pruning_v2"], [339, "module-neural_compressor.experimental.pytorch_pruner"], [340, "module-neural_compressor.experimental.pytorch_pruner.logger"], [341, "module-neural_compressor.experimental.pytorch_pruner.patterns"], [342, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"], [343, "module-neural_compressor.experimental.pytorch_pruner.pruner"], [344, "module-neural_compressor.experimental.pytorch_pruner.pruning"], [345, "module-neural_compressor.experimental.pytorch_pruner.scheduler"], [346, "module-neural_compressor.experimental.quantization"], [347, "module-neural_compressor.experimental.scheduler"], [348, "module-neural_compressor.experimental.strategy.auto_mixed_precision"], [349, "module-neural_compressor.experimental.strategy.basic"], [350, "module-neural_compressor.experimental.strategy.bayesian"], [351, "module-neural_compressor.experimental.strategy.exhaustive"], [352, "module-neural_compressor.experimental.strategy"], [353, "module-neural_compressor.experimental.strategy.mse"], [354, "module-neural_compressor.experimental.strategy.mse_v2"], [355, "module-neural_compressor.experimental.strategy.random"], [356, "module-neural_compressor.experimental.strategy.strategy"], [357, "module-neural_compressor.experimental.strategy.utils.constant"], [358, "module-neural_compressor.experimental.strategy.utils"], [359, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"], [360, "module-neural_compressor.experimental.strategy.utils.tuning_space"], [361, "module-neural_compressor.experimental.strategy.utils.tuning_structs"], [362, "module-neural_compressor.experimental.strategy.utils.utility"], [363, "module-neural_compressor"], [364, "module-neural_compressor.metric.bleu"], [365, "module-neural_compressor.metric.bleu_util"], [366, "module-neural_compressor.metric.coco_label_map"], [367, "module-neural_compressor.metric.coco_tools"], [368, "module-neural_compressor.metric.evaluate_squad"], [369, "module-neural_compressor.metric.f1"], [370, "module-neural_compressor.metric"], [371, "module-neural_compressor.metric.metric"], [372, "module-neural_compressor.mix_precision"], [373, "module-neural_compressor.model.base_model"], [374, "module-neural_compressor.model"], [375, "module-neural_compressor.model.keras_model"], [376, "module-neural_compressor.model.model"], [377, "module-neural_compressor.model.mxnet_model"], [378, "module-neural_compressor.model.nets_factory"], [379, "module-neural_compressor.model.onnx_model"], [380, "module-neural_compressor.model.tensorflow_model"], [381, "module-neural_compressor.model.torch_model"], [382, "module-neural_compressor.objective"], [383, "module-neural_compressor.onnxrt.algorithms"], [384, "module-neural_compressor.onnxrt.algorithms.smoother.calibrator"], [385, "module-neural_compressor.onnxrt.algorithms.smoother.core"], [386, "module-neural_compressor.onnxrt.algorithms.smoother"], [387, "module-neural_compressor.onnxrt.algorithms.weight_only.awq"], [388, "module-neural_compressor.onnxrt.algorithms.weight_only.gptq"], [389, "module-neural_compressor.onnxrt.algorithms.weight_only"], [390, "module-neural_compressor.onnxrt.algorithms.weight_only.rtn"], [391, "module-neural_compressor.onnxrt.algorithms.weight_only.utility"], [392, "module-neural_compressor.onnxrt"], [393, "module-neural_compressor.onnxrt.quantization.algorithm_entry"], [394, "module-neural_compressor.onnxrt.quantization.autotune"], [395, "module-neural_compressor.onnxrt.quantization.calibrate"], [396, "module-neural_compressor.onnxrt.quantization.config"], [397, "module-neural_compressor.onnxrt.quantization"], [398, "module-neural_compressor.onnxrt.quantization.quantize"], [399, "module-neural_compressor.onnxrt.utils"], [400, "module-neural_compressor.onnxrt.utils.onnx_model"], [401, "module-neural_compressor.onnxrt.utils.utility"], [402, "module-neural_compressor.profiling"], [403, "module-neural_compressor.profiling.parser.factory"], [404, "module-neural_compressor.profiling.parser"], [405, "module-neural_compressor.profiling.parser.onnx_parser.factory"], [406, "module-neural_compressor.profiling.parser.onnx_parser"], [407, "module-neural_compressor.profiling.parser.onnx_parser.parser"], [408, "module-neural_compressor.profiling.parser.parser"], [409, "module-neural_compressor.profiling.parser.result"], [410, "module-neural_compressor.profiling.parser.tensorflow_parser.factory"], [411, "module-neural_compressor.profiling.parser.tensorflow_parser"], [412, "module-neural_compressor.profiling.parser.tensorflow_parser.parser"], [413, "module-neural_compressor.profiling.profiler.factory"], [414, "module-neural_compressor.profiling.profiler"], [415, "module-neural_compressor.profiling.profiler.onnxrt_profiler.factory"], [416, "module-neural_compressor.profiling.profiler.onnxrt_profiler"], [417, "module-neural_compressor.profiling.profiler.onnxrt_profiler.profiler"], [418, "module-neural_compressor.profiling.profiler.onnxrt_profiler.utils"], [419, "module-neural_compressor.profiling.profiler.profiler"], [420, "module-neural_compressor.profiling.profiler.tensorflow_profiler.factory"], [421, "module-neural_compressor.profiling.profiler.tensorflow_profiler"], [422, "module-neural_compressor.profiling.profiler.tensorflow_profiler.profiler"], [423, "module-neural_compressor.profiling.profiler.tensorflow_profiler.utils"], [424, "module-neural_compressor.quantization"], [425, "module-neural_compressor.strategy.auto"], [426, "module-neural_compressor.strategy.auto_mixed_precision"], [427, "module-neural_compressor.strategy.basic"], [428, "module-neural_compressor.strategy.bayesian"], [429, "module-neural_compressor.strategy.conservative"], [430, "module-neural_compressor.strategy.exhaustive"], [431, "module-neural_compressor.strategy.hawq_v2"], [432, "module-neural_compressor.strategy"], [433, "module-neural_compressor.strategy.mse"], [434, "module-neural_compressor.strategy.mse_v2"], [435, "module-neural_compressor.strategy.random"], [436, "module-neural_compressor.strategy.strategy"], [437, "module-neural_compressor.strategy.utils.constant"], [438, "module-neural_compressor.strategy.utils"], [439, "module-neural_compressor.strategy.utils.tuning_sampler"], [440, "module-neural_compressor.strategy.utils.tuning_space"], [441, "module-neural_compressor.strategy.utils.tuning_structs"], [442, "module-neural_compressor.strategy.utils.utility"], [443, "module-neural_compressor.template.api_doc_example"], [444, "module-neural_compressor.template"], [445, "module-neural_compressor.tensorflow.algorithms"], [446, "module-neural_compressor.tensorflow.algorithms.smoother.calibration"], [447, "module-neural_compressor.tensorflow.algorithms.smoother.core"], [448, "module-neural_compressor.tensorflow.algorithms.smoother"], [449, "module-neural_compressor.tensorflow.algorithms.smoother.scaler"], [450, "module-neural_compressor.tensorflow.algorithms.static_quant"], [451, "module-neural_compressor.tensorflow.algorithms.static_quant.keras"], [452, "module-neural_compressor.tensorflow.algorithms.static_quant.tensorflow"], [453, "module-neural_compressor.tensorflow"], [454, "module-neural_compressor.tensorflow.keras"], [455, "module-neural_compressor.tensorflow.keras.layers.conv2d"], [456, "module-neural_compressor.tensorflow.keras.layers.dense"], [457, "module-neural_compressor.tensorflow.keras.layers.depthwise_conv2d"], [458, "module-neural_compressor.tensorflow.keras.layers"], [459, "module-neural_compressor.tensorflow.keras.layers.pool2d"], [460, "module-neural_compressor.tensorflow.keras.layers.quantizer"], [461, "module-neural_compressor.tensorflow.keras.layers.separable_conv2d"], [462, "module-neural_compressor.tensorflow.keras.quantization.config"], [463, "module-neural_compressor.tensorflow.keras.quantization"], [464, "module-neural_compressor.tensorflow.quantization.algorithm_entry"], [465, "module-neural_compressor.tensorflow.quantization.autotune"], [466, "module-neural_compressor.tensorflow.quantization.config"], [467, "module-neural_compressor.tensorflow.quantization"], [468, "module-neural_compressor.tensorflow.quantization.quantize"], [469, "module-neural_compressor.tensorflow.quantization.utils.graph_converter"], [470, "module-neural_compressor.tensorflow.quantization.utils.graph_converter_without_calib"], [471, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.bf16_convert"], [472, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.dequantize_cast_optimizer"], [473, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16"], [474, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd"], [475, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout"], [476, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu"], [477, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random"], [478, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const"], [479, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction"], [480, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd"], [481, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer"], [482, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape"], [483, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm"], [484, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant"], [485, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add"], [486, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul"], [487, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math"], [488, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn"], [489, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in"], [490, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu"], [491, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm"], [492, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv"], [493, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"], [494, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose"], [495, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer"], [496, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass"], [497, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic"], [498, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node"], [499, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu"], [500, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize"], [501, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes"], [502, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm"], [503, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input"], [504, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes"], [505, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes"], [506, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer"], [507, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base"], [508, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter"], [509, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_fake_quant"], [510, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value"], [511, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value_without_calib"], [512, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"], [513, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_requantize"], [514, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"], [515, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize"], [516, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8"], [517, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.meta_op_optimizer"], [518, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_hostconst_converter"], [519, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_quantized_op_cse"], [520, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.rnn_convert"], [521, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.scale_propagation"], [522, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq"], [523, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.insert_qdq_pattern"], [524, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.merge_duplicated_qdq"], [525, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.share_qdq_y_pattern"], [526, "module-neural_compressor.tensorflow.quantization.utils.graph_util"], [527, "module-neural_compressor.tensorflow.quantization.utils"], [528, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph"], [529, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.fake_quantize"], [530, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat"], [531, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_config"], [532, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_helper"], [533, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers"], [534, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.optimize_layer"], [535, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_add"], [536, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_base"], [537, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"], [538, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_wrapper"], [539, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_bn"], [540, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_concatv2"], [541, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_conv"], [542, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_deconv"], [543, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_in"], [544, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_matmul"], [545, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_pooling"], [546, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq"], [547, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.optimize_qdq"], [548, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base"], [549, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_bn"], [550, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_concatv2"], [551, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_conv"], [552, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_for_intel_cpu"], [553, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_matmul"], [554, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_pooling"], [555, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph_common"], [556, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.bias_correction"], [557, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.graph_transform_base"], [558, "module-neural_compressor.tensorflow.quantization.utils.transform_graph"], [559, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.insert_logging"], [560, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.rerange_quantized_concat"], [561, "module-neural_compressor.tensorflow.quantization.utils.utility"], [562, "module-neural_compressor.tensorflow.utils.constants"], [563, "module-neural_compressor.tensorflow.utils.data"], [564, "module-neural_compressor.tensorflow.utils"], [565, "module-neural_compressor.tensorflow.utils.model"], [566, "module-neural_compressor.tensorflow.utils.model_wrappers"], [567, "module-neural_compressor.tensorflow.utils.nets_factory"], [568, "module-neural_compressor.tensorflow.utils.utility"], [569, "module-neural_compressor.torch.algorithms.habana_fp8.fp8_quant"], [570, "module-neural_compressor.torch.algorithms.habana_fp8"], [571, "module-neural_compressor.torch.algorithms.habana_fp8.modules"], [572, "module-neural_compressor.torch.algorithms.habana_fp8.observer"], [573, "module-neural_compressor.torch.algorithms"], [574, "module-neural_compressor.torch.algorithms.layer_wise"], [575, "module-neural_compressor.torch.algorithms.layer_wise.load"], [576, "module-neural_compressor.torch.algorithms.layer_wise.modified_pickle"], [577, "module-neural_compressor.torch.algorithms.layer_wise.utils"], [578, "module-neural_compressor.torch.algorithms.static_quant"], [579, "module-neural_compressor.torch.algorithms.static_quant.static_quant"], [580, "module-neural_compressor.torch.algorithms.static_quant.utility"], [581, "module-neural_compressor.torch.algorithms.weight_only.awq"], [582, "module-neural_compressor.torch.algorithms.weight_only.gptq"], [583, "module-neural_compressor.torch.algorithms.weight_only.hqq.auto_accelerator"], [584, "module-neural_compressor.torch.algorithms.weight_only.hqq.bitpack"], [585, "module-neural_compressor.torch.algorithms.weight_only.hqq.config"], [586, "module-neural_compressor.torch.algorithms.weight_only.hqq.core"], [587, "module-neural_compressor.torch.algorithms.weight_only.hqq"], [588, "module-neural_compressor.torch.algorithms.weight_only.hqq.optimizer"], [589, "module-neural_compressor.torch.algorithms.weight_only.hqq.qtensor"], [590, "module-neural_compressor.torch.algorithms.weight_only.hqq.quant_api"], [591, "module-neural_compressor.torch.algorithms.weight_only.hqq.quantizer"], [592, "module-neural_compressor.torch.algorithms.weight_only.hqq.utility"], [593, "module-neural_compressor.torch.algorithms.weight_only"], [594, "module-neural_compressor.torch.algorithms.weight_only.modules"], [595, "module-neural_compressor.torch.algorithms.weight_only.rtn"], [596, "module-neural_compressor.torch.algorithms.weight_only.teq"], [597, "module-neural_compressor.torch.algorithms.weight_only.utility"], [598, "module-neural_compressor.torch.amp.autocast"], [599, "module-neural_compressor.torch.amp.fp8.functions"], [600, "module-neural_compressor.torch.amp.fp8"], [601, "module-neural_compressor.torch.amp"], [602, "module-neural_compressor.torch"], [603, "module-neural_compressor.torch.quantization.algorithm_entry"], [604, "module-neural_compressor.torch.quantization.autotune"], [605, "module-neural_compressor.torch.quantization.config"], [606, "module-neural_compressor.torch.quantization"], [607, "module-neural_compressor.torch.quantization.modules"], [608, "module-neural_compressor.torch.quantization.quantize"], [609, "module-neural_compressor.torch.utils.constants"], [610, "module-neural_compressor.torch.utils.environ"], [611, "module-neural_compressor.torch.utils"], [612, "module-neural_compressor.torch.utils.utility"], [613, "module-neural_compressor.training"], [614, "module-neural_compressor.utils.collect_layer_histogram"], [615, "module-neural_compressor.utils.constant"], [616, "module-neural_compressor.utils.create_obj_from_config"], [617, "module-neural_compressor.utils"], [618, "module-neural_compressor.utils.kl_divergence"], [619, "module-neural_compressor.utils.load_huggingface"], [620, "module-neural_compressor.utils.logger"], [621, "module-neural_compressor.utils.neural_insights_utils"], [622, "module-neural_compressor.utils.options"], [623, "module-neural_compressor.utils.pytorch"], [624, "module-neural_compressor.utils.utility"], [625, "module-neural_compressor.utils.weights_details"], [626, "module-neural_compressor.version"]], "adaptor (class in neural_compressor.adaptor.adaptor)": [[1, "neural_compressor.adaptor.adaptor.Adaptor"]], "adaptor_registry() (in module neural_compressor.adaptor.adaptor)": [[1, "neural_compressor.adaptor.adaptor.adaptor_registry"]], "neural_compressor.adaptor.adaptor": [[1, "module-neural_compressor.adaptor.adaptor"]], "neural_compressor.adaptor": [[2, "module-neural_compressor.adaptor"]], "kerasadaptor (class in neural_compressor.adaptor.keras)": [[3, "neural_compressor.adaptor.keras.KerasAdaptor"]], "neural_compressor.adaptor.keras": [[3, "module-neural_compressor.adaptor.keras"]], "neural_compressor.adaptor.keras_utils.conv2d": [[4, "module-neural_compressor.adaptor.keras_utils.conv2d"]], "neural_compressor.adaptor.keras_utils.dense": [[5, "module-neural_compressor.adaptor.keras_utils.dense"]], "neural_compressor.adaptor.keras_utils.depthwise_conv2d": [[6, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"]], "neural_compressor.adaptor.keras_utils": [[7, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.pool2d": [[8, "module-neural_compressor.adaptor.keras_utils.pool2d"]], "neural_compressor.adaptor.keras_utils.quantizer": [[9, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "neural_compressor.adaptor.keras_utils.separable_conv2d": [[10, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"]], "mxnetquery (class in neural_compressor.adaptor.mxnet)": [[11, "neural_compressor.adaptor.mxnet.MXNetQuery"]], "mxnetadaptor (class in neural_compressor.adaptor.mxnet)": [[11, "neural_compressor.adaptor.mxnet.MxNetAdaptor"]], "neural_compressor.adaptor.mxnet": [[11, "module-neural_compressor.adaptor.mxnet"]], "neural_compressor.adaptor.mxnet_utils": [[12, "module-neural_compressor.adaptor.mxnet_utils"]], "calibcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CalibCollector"]], "calibdata (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CalibData"]], "collectorbase (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CollectorBase"]], "dataiterloader (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.DataIterLoader"]], "dataloaderwrap (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.DataLoaderWrap"]], "namecollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.NameCollector"]], "optype (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.OpType"]], "tensorcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.TensorCollector"]], "amp_convert() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.amp_convert"]], "calib_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.calib_model"]], "check_mx_version() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.check_mx_version"]], "combine_capabilities() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.combine_capabilities"]], "create_data_example() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.create_data_example"]], "distribute_calib_tensors() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.distribute_calib_tensors"]], "ensure_list() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.ensure_list"]], "fuse() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.fuse"]], "get_framework_name() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.get_framework_name"]], "is_model_quantized() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.is_model_quantized"]], "isiterable() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.isiterable"]], "make_module() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.make_module"]], "make_nc_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.make_nc_model"]], "make_symbol_block() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.make_symbol_block"]], "ndarray_to_device() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.ndarray_to_device"]], "neural_compressor.adaptor.mxnet_utils.util": [[13, "module-neural_compressor.adaptor.mxnet_utils.util"]], "parse_tune_config() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.parse_tune_config"]], "prepare_dataloader() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.prepare_dataloader"]], "prepare_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.prepare_model"]], "prepare_model_data() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.prepare_model_data"]], "quantize_sym_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.quantize_sym_model"]], "query_quantizable_nodes() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.query_quantizable_nodes"]], "run_forward() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.run_forward"]], "onnxrtquery (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRTQuery"]], "onnxrt_integeropsadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_IntegerOpsAdaptor"]], "onnxrt_qdqadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_QDQAdaptor"]], "onnxrt_qlinearopsadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_QLinearOpsAdaptor"]], "onnxrt_weightonlyadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_WeightOnlyAdaptor"]], "onnxruntimeadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor"]], "neural_compressor.adaptor.onnxrt": [[14, "module-neural_compressor.adaptor.onnxrt"]], "onnxrtaugment (class in neural_compressor.adaptor.ox_utils.calibration)": [[15, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment"]], "neural_compressor.adaptor.ox_utils.calibration": [[15, "module-neural_compressor.adaptor.ox_utils.calibration"]], "calibratorbase (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.CalibratorBase"]], "histogramcollector (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.HistogramCollector"]], "klcalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.KLCalibrator"]], "minmaxcalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.MinMaxCalibrator"]], "percentilecalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.PercentileCalibrator"]], "calib_registry() (in module neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.calib_registry"]], "neural_compressor.adaptor.ox_utils.calibrator": [[16, "module-neural_compressor.adaptor.ox_utils.calibrator"]], "smooth_distribution() (in module neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.smooth_distribution"]], "neural_compressor.adaptor.ox_utils": [[17, "module-neural_compressor.adaptor.ox_utils"]], "activationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator"]], "float16activationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.Float16ActivationOperator"]], "qactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.QActivationOperator"]], "removableactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.RemovableActivationOperator"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[18, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "argmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[19, "neural_compressor.adaptor.ox_utils.operators.argmax.ArgMaxOperator"]], "qargmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[19, "neural_compressor.adaptor.ox_utils.operators.argmax.QArgMaxOperator"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[19, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "attentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[20, "neural_compressor.adaptor.ox_utils.operators.attention.AttentionOperator"]], "qattentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[20, "neural_compressor.adaptor.ox_utils.operators.attention.QAttentionOperator"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[20, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "binarydirect8bitoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[21, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryDirect8BitOperator"]], "binaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[21, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator"]], "float16binaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[21, "neural_compressor.adaptor.ox_utils.operators.binary_op.Float16BinaryOperator"]], "qbinaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[21, "neural_compressor.adaptor.ox_utils.operators.binary_op.QBinaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[21, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "concatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[22, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator"]], "qconcatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[22, "neural_compressor.adaptor.ox_utils.operators.concat.QConcatOperator"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[22, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "convoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[23, "neural_compressor.adaptor.ox_utils.operators.conv.ConvOperator"]], "qconvoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[23, "neural_compressor.adaptor.ox_utils.operators.conv.QConvOperator"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[23, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "direct8bitoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[24, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator"]], "qdirectoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[24, "neural_compressor.adaptor.ox_utils.operators.direct_q8.QDirectOperator"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[24, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "embedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[25, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.EmbedLayerNormalizationOperator"]], "qembedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[25, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.QEmbedLayerNormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[25, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "gatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[26, "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator"]], "qgatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[26, "neural_compressor.adaptor.ox_utils.operators.gather.QGatherOperator"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[26, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "globalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[27, "neural_compressor.adaptor.ox_utils.operators.gavgpool.GlobalAveragePoolOperator"]], "qglobalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[27, "neural_compressor.adaptor.ox_utils.operators.gavgpool.QGlobalAveragePoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[27, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "gemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[28, "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator"]], "qgemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[28, "neural_compressor.adaptor.ox_utils.operators.gemm.QGemmOperator"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[28, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[29, "module-neural_compressor.adaptor.ox_utils.operators"]], "lstmoperator (class in neural_compressor.adaptor.ox_utils.operators.lstm)": [[30, "neural_compressor.adaptor.ox_utils.operators.lstm.LSTMOperator"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[30, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "fusedmatmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[31, "neural_compressor.adaptor.ox_utils.operators.matmul.FusedMatMulOperator"]], "matmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[31, "neural_compressor.adaptor.ox_utils.operators.matmul.MatMulOperator"]], "qmatmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[31, "neural_compressor.adaptor.ox_utils.operators.matmul.QMatMulOperator"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[31, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "maxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[32, "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator"]], "qmaxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[32, "neural_compressor.adaptor.ox_utils.operators.maxpool.QMaxPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[32, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "batchnormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.norm)": [[33, "neural_compressor.adaptor.ox_utils.operators.norm.BatchNormalizationOperator"]], "normalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.norm)": [[33, "neural_compressor.adaptor.ox_utils.operators.norm.NormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.norm": [[33, "module-neural_compressor.adaptor.ox_utils.operators.norm"]], "operator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.Operator"]], "qoperator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.QOperator"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[34, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "op_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.op_registry"]], "qop_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.qop_registry"]], "padoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[35, "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator"]], "qpadoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[35, "neural_compressor.adaptor.ox_utils.operators.pad.QPadOperator"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[35, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "pooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[36, "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator"]], "qpooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[36, "neural_compressor.adaptor.ox_utils.operators.pooling.QPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[36, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "reduceminmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.reduce)": [[37, "neural_compressor.adaptor.ox_utils.operators.reduce.ReduceMinMaxOperator"]], "reduceoperator (class in neural_compressor.adaptor.ox_utils.operators.reduce)": [[37, "neural_compressor.adaptor.ox_utils.operators.reduce.ReduceOperator"]], "neural_compressor.adaptor.ox_utils.operators.reduce": [[37, "module-neural_compressor.adaptor.ox_utils.operators.reduce"]], "qresizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[38, "neural_compressor.adaptor.ox_utils.operators.resize.QResizeOperator"]], "resizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[38, "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[38, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "qsplitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[39, "neural_compressor.adaptor.ox_utils.operators.split.QSplitOperator"]], "splitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[39, "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator"]], "neural_compressor.adaptor.ox_utils.operators.split": [[39, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "unarydirect8bitoperator (class in neural_compressor.adaptor.ox_utils.operators.unary_op)": [[40, "neural_compressor.adaptor.ox_utils.operators.unary_op.UnaryDirect8BitOperator"]], "unaryoperator (class in neural_compressor.adaptor.ox_utils.operators.unary_op)": [[40, "neural_compressor.adaptor.ox_utils.operators.unary_op.UnaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.unary_op": [[40, "module-neural_compressor.adaptor.ox_utils.operators.unary_op"]], "quantizer (class in neural_compressor.adaptor.ox_utils.quantizer)": [[41, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer"]], "neural_compressor.adaptor.ox_utils.quantizer": [[41, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "ortsmoothquant (class in neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.ORTSmoothQuant"]], "get_quant_dequant_output() (in module neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.get_quant_dequant_output"]], "make_sub_graph() (in module neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.make_sub_graph"]], "neural_compressor.adaptor.ox_utils.smooth_quant": [[42, "module-neural_compressor.adaptor.ox_utils.smooth_quant"]], "quant_dequant_data() (in module neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.quant_dequant_data"]], "quantformat (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantFormat"]], "quanttype (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantType"]], "quantizationmode (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizationMode"]], "quantizedinitializer (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizedInitializer"]], "quantizedvalue (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizedValue"]], "quantizedvaluetype (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizedValueType"]], "valueinfo (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.ValueInfo"]], "attribute_to_kwarg() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.attribute_to_kwarg"]], "calculate_scale_zp() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.calculate_scale_zp"]], "cast_tensor() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.cast_tensor"]], "collate_preds() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.collate_preds"]], "dequantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.dequantize_data"]], "dequantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.dequantize_data_with_scale_zero"]], "dtype_to_name() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.dtype_to_name"]], "find_by_name() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.find_by_name"]], "float_to_bfloat16() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.float_to_bfloat16"]], "float_to_float16() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.float_to_float16"]], "get_node_original_name() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.get_node_original_name"]], "infer_shapes() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.infer_shapes"]], "is_b_transposed() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.is_B_transposed"]], "make_dquant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.make_dquant_node"]], "make_quant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.make_quant_node"]], "neural_compressor.adaptor.ox_utils.util": [[43, "module-neural_compressor.adaptor.ox_utils.util"]], "quantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_data"]], "quantize_data_per_channel() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_data_per_channel"]], "quantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_data_with_scale_zero"]], "quantize_nparray() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_nparray"]], "remove_init_from_model_input() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.remove_init_from_model_input"]], "simple_progress_bar() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.simple_progress_bar"]], "split_shared_bias() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.split_shared_bias"]], "to_numpy() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.to_numpy"]], "trt_env_setup() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.trt_env_setup"]], "apply_awq_clip() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.apply_awq_clip"]], "apply_awq_scale() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.apply_awq_scale"]], "awq_quantize() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.awq_quantize"]], "get_blob_size() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.get_blob_size"]], "get_weight_scale() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.get_weight_scale"]], "gptq() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.gptq"]], "gptq_quantize() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.gptq_quantize"]], "make_matmul_weight_only_node() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.make_matmul_weight_only_node"]], "neural_compressor.adaptor.ox_utils.weight_only": [[44, "module-neural_compressor.adaptor.ox_utils.weight_only"]], "pad_tensor() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.pad_tensor"]], "prepare_inputs() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.prepare_inputs"]], "qdq_tensor() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.qdq_tensor"]], "quant_tensor() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.quant_tensor"]], "rtn_quantize() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.rtn_quantize"]], "pytorchadaptor (class in neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.PyTorchAdaptor"]], "pytorchweightonlyadaptor (class in neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.PyTorchWeightOnlyAdaptor"]], "pytorch_fxadaptor (class in neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor"]], "pytorch_ipexadaptor (class in neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor"]], "templateadaptor (class in neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.TemplateAdaptor"]], "get_ops_recursively() (in module neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.get_ops_recursively"]], "neural_compressor.adaptor.pytorch": [[45, "module-neural_compressor.adaptor.pytorch"]], "querybackendcapability (class in neural_compressor.adaptor.query)": [[46, "neural_compressor.adaptor.query.QueryBackendCapability"]], "neural_compressor.adaptor.query": [[46, "module-neural_compressor.adaptor.query"]], "tensorflowadaptor (class in neural_compressor.adaptor.tensorflow)": [[47, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor"]], "tensorflowquery (class in neural_compressor.adaptor.tensorflow)": [[47, "neural_compressor.adaptor.tensorflow.TensorflowQuery"]], "tensorflow_itexadaptor (class in neural_compressor.adaptor.tensorflow)": [[47, "neural_compressor.adaptor.tensorflow.Tensorflow_ITEXAdaptor"]], "neural_compressor.adaptor.tensorflow": [[47, "module-neural_compressor.adaptor.tensorflow"]], "graphconverter (class in neural_compressor.adaptor.tf_utils.graph_converter)": [[48, "neural_compressor.adaptor.tf_utils.graph_converter.GraphConverter"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[48, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "graphconverterwithoutcalib (class in neural_compressor.adaptor.tf_utils.graph_converter_without_calib)": [[49, "neural_compressor.adaptor.tf_utils.graph_converter_without_calib.GraphConverterWithoutCalib"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[49, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "bf16convert (class in neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert)": [[50, "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.BF16Convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "dequantizecastoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer)": [[51, "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer.DequantizeCastOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer": [[51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "convertaddtobiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd)": [[53, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "convertlayoutoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout)": [[54, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "convertleakyreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu)": [[55, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "convertnantorandom (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random)": [[56, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "convertplaceholdertoconst (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const)": [[57, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "dilatedcontraction (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction)": [[58, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.DilatedContraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "injectdummybiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd)": [[59, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "expanddimsoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer)": [[60, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "fetchweightfromreshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape)": [[61, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "foldbatchnormnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm)": [[62, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "graphfoldconstantoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant)": [[63, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "fusebiasaddandaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add)": [[64, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "fusecolumnwisemuloptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul)": [[65, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "fuseconvwithmathoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "fusedecomposedbnoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.FuseDecomposedBNOptimizer"]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.bypass_reshape"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.values_from_const"]], "fusedecomposedinoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.FuseDecomposedINOptimizer"]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.bypass_reshape"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.values_from_const"]], "fusegeluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu)": [[69, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "fuselayernormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_name_from_input"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.values_from_const"]], "fusepadwithconv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv)": [[71, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "fusepadwithfp32conv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv)": [[72, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "fusetransposereshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose)": [[73, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "graphcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer)": [[74, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "grappleroptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass)": [[75, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "insertprintminmaxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node)": [[77, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "movesqueezeafterreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu)": [[78, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "preoptimization (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize)": [[79, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.PreOptimization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "removetrainingnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes)": [[80, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "renamebatchnormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm)": [[81, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "splitsharedinputoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input)": [[82, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "stripequivalentnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes)": [[83, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "stripunusednodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes)": [[84, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "switchoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer)": [[85, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "graphrewriterbase (class in neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base)": [[86, "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "freezefakequantopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "freezevaluetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value)": [[89, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "freezevaluewithoutcalibtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "fuseconvredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "fuseconvrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize)": [[92, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "fusematmulredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "fusematmulrequantizedequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer"]], "fusematmulrequantizedequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer"]], "fusematmulrequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer"]], "fusematmulrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "metainfochangingmemopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "posthostconstconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "postcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "quantizedrnnconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "scalepropagationtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"]], "onnxgraph (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph)": [[102, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"]], "onnxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"]], "onnxopschema (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.OnnxOpSchema"]], "get_max_supported_opset_version() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.get_max_supported_opset_version"]], "get_schema() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.get_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"]], "seqtype (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.SeqType"]], "add_port_to_name() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.add_port_to_name"]], "are_shapes_equal() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.are_shapes_equal"]], "assert_error() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.assert_error"]], "compute_const_folding_using_tf() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.compute_const_folding_using_tf"]], "convert_tensorflow_tensor_to_onnx() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.convert_tensorflow_tensor_to_onnx"]], "find_opset() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.find_opset"]], "get_index_from_strided_slice_of_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_index_from_strided_slice_of_shape"]], "get_subgraphs_from_onnx() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_subgraphs_from_onnx"]], "get_tensorflow_node_attr() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_node_attr"]], "get_tensorflow_node_shape_attr() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_node_shape_attr"]], "get_tensorflow_tensor_data() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_tensor_data"]], "get_tensorflow_tensor_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_tensor_shape"]], "infer_onnx_shape_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.infer_onnx_shape_dtype"]], "initialize_name_counter() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.initialize_name_counter"]], "is_list_or_tuple() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.is_list_or_tuple"]], "is_onnx_domain() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.is_onnx_domain"]], "make_onnx_inputs_outputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.make_onnx_inputs_outputs"]], "make_onnx_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.make_onnx_shape"]], "map_numpy_to_onnx_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_numpy_to_onnx_dtype"]], "map_onnx_to_numpy_type() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_onnx_to_numpy_type"]], "map_tensorflow_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_tensorflow_dtype"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"]], "read_tensorflow_node_attrs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.read_tensorflow_node_attrs"]], "save_protobuf() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.save_protobuf"]], "set_name() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.set_name"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "generategraphwithqdqpattern (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern)": [[107, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "mergeduplicatedqdqoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq)": [[108, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "shareqdqforitexypatternoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern)": [[109, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[109, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "graphanalyzer (class in neural_compressor.adaptor.tf_utils.graph_util)": [[110, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer"]], "graphrewriterhelper (class in neural_compressor.adaptor.tf_utils.graph_util)": [[110, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper"]], "neural_compressor.adaptor.tf_utils.graph_util": [[110, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "neural_compressor.adaptor.tf_utils": [[111, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[112, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "fakequantize (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[113, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantize"]], "fakequantizebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[113, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "quantizeconfig (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config)": [[115, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "init_quantize_config() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[116, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.init_quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "qat_clone_function() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[116, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "config_quantizable_layers() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer)": [[118, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer.config_quantizable_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "quantizelayeradd (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add)": [[119, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add.QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "quantizelayerbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base)": [[120, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base.QuantizeLayerBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "quantizelayerbatchnormalization (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn.QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "quantizewrapper (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper"]], "quantizewrapperbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn)": [[123, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2)": [[124, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv)": [[125, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "fusenodestartwithdeconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv)": [[126, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "fusenodestartwithfusedinstancenorm (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in)": [[127, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul)": [[128, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling)": [[129, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "optimizeqdqgraph (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq)": [[131, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "quantizegraphbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[132, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase"]], "quantizenodebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[132, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2)": [[134, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "quantizegraphforintel (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu)": [[136, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul)": [[137, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling)": [[138, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[138, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "quantizegraphhelper (class in neural_compressor.adaptor.tf_utils.quantize_graph_common)": [[139, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[139, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "smoothquantcalibration (class in neural_compressor.adaptor.tf_utils.smooth_quant_calibration)": [[140, "neural_compressor.adaptor.tf_utils.smooth_quant_calibration.SmoothQuantCalibration"]], "smoothquantcalibrationllm (class in neural_compressor.adaptor.tf_utils.smooth_quant_calibration)": [[140, "neural_compressor.adaptor.tf_utils.smooth_quant_calibration.SmoothQuantCalibrationLLM"]], "neural_compressor.adaptor.tf_utils.smooth_quant_calibration": [[140, "module-neural_compressor.adaptor.tf_utils.smooth_quant_calibration"]], "smoothquantscaler (class in neural_compressor.adaptor.tf_utils.smooth_quant_scaler)": [[141, "neural_compressor.adaptor.tf_utils.smooth_quant_scaler.SmoothQuantScaler"]], "smoothquantscalerllm (class in neural_compressor.adaptor.tf_utils.smooth_quant_scaler)": [[141, "neural_compressor.adaptor.tf_utils.smooth_quant_scaler.SmoothQuantScalerLLM"]], "neural_compressor.adaptor.tf_utils.smooth_quant_scaler": [[141, "module-neural_compressor.adaptor.tf_utils.smooth_quant_scaler"]], "tensorflowqdqtoonnxqdqconverter (class in neural_compressor.adaptor.tf_utils.tf2onnx_converter)": [[142, "neural_compressor.adaptor.tf_utils.tf2onnx_converter.TensorflowQDQToOnnxQDQConverter"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[142, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"]], "biascorrection (class in neural_compressor.adaptor.tf_utils.transform_graph.bias_correction)": [[143, "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.BiasCorrection"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[143, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "graphtransformbase (class in neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base)": [[144, "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[144, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[145, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "insertlogging (class in neural_compressor.adaptor.tf_utils.transform_graph.insert_logging)": [[146, "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.InsertLogging"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[146, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "rerangequantizedconcat (class in neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat)": [[147, "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[147, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "apply_inlining() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.apply_inlining"]], "collate_tf_preds() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.collate_tf_preds"]], "construct_function_from_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.construct_function_from_graph_def"]], "disable_random() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.disable_random"]], "fix_ref_type_of_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.fix_ref_type_of_graph_def"]], "generate_feed_dict() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.generate_feed_dict"]], "get_estimator_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_estimator_graph"]], "get_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_graph_def"]], "get_input_output_node_names() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_input_output_node_names"]], "get_model_input_shape() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_model_input_shape"]], "get_tensor_by_name() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_tensor_by_name"]], "get_tensor_val_from_graph_node() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_tensor_val_from_graph_node"]], "get_weight_from_input_tensor() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_weight_from_input_tensor"]], "int8_node_name_reverse() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.int8_node_name_reverse"]], "is_ckpt_format() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.is_ckpt_format"]], "is_saved_model_format() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.is_saved_model_format"]], "iterator_sess_run() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.iterator_sess_run"]], "neural_compressor.adaptor.tf_utils.util": [[148, "module-neural_compressor.adaptor.tf_utils.util"]], "parse_saved_model() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.parse_saved_model"]], "read_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.read_graph"]], "reconstruct_saved_model() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.reconstruct_saved_model"]], "strip_equivalent_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.strip_equivalent_nodes"]], "strip_unused_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.strip_unused_nodes"]], "tf_diagnosis_helper() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.tf_diagnosis_helper"]], "version1_eq_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.version1_lte_version2"]], "write_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.write_graph"]], "autoadamround (class in neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.AutoAdamRound"]], "autooptround (class in neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.AutoOPTRound"]], "autoround (class in neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.AutoRound"]], "saveinputs (class in neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.SaveInputs"]], "wrappermultiblock (class in neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.WrapperMultiblock"]], "block_forward() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.block_forward"]], "check_is_cpu() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.check_is_cpu"]], "collect_minmax_scale() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.collect_minmax_scale"]], "collect_round_v() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.collect_round_v"]], "get_batch_dim() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.get_batch_dim"]], "get_block_names() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.get_block_names"]], "get_dataloader() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.get_dataloader"]], "get_module() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.get_module"]], "get_scale_shape() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.get_scale_shape"]], "get_tokenizer_function() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.get_tokenizer_function"]], "move_input_to_device() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.move_input_to_device"]], "neural_compressor.adaptor.torch_utils.autoround.autoround": [[149, "module-neural_compressor.adaptor.torch_utils.autoround.autoround"]], "quant_weight() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.quant_weight"]], "quant_weight_actor() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.quant_weight_actor"]], "quant_weight_asym() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.quant_weight_asym"]], "quant_weight_sym() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.quant_weight_sym"]], "quant_weight_w_scale() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.quant_weight_w_scale"]], "round_ste() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.round_ste"]], "sampling_inputs() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.sampling_inputs"]], "set_module() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.set_module"]], "unwrapper_block() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.unwrapper_block"]], "wrapper_block() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.wrapper_block"]], "export_compressed_model() (in module neural_compressor.adaptor.torch_utils.autoround.export)": [[150, "neural_compressor.adaptor.torch_utils.autoround.export.export_compressed_model"]], "neural_compressor.adaptor.torch_utils.autoround.export": [[150, "module-neural_compressor.adaptor.torch_utils.autoround.export"]], "neural_compressor.adaptor.torch_utils.autoround": [[151, "module-neural_compressor.adaptor.torch_utils.autoround"]], "neural_compressor.adaptor.torch_utils.autoround.model_wrapper": [[152, "module-neural_compressor.adaptor.torch_utils.autoround.model_wrapper"]], "sgd (class in neural_compressor.adaptor.torch_utils.autoround.sign_sgd)": [[153, "neural_compressor.adaptor.torch_utils.autoround.sign_sgd.SGD"]], "neural_compressor.adaptor.torch_utils.autoround.sign_sgd": [[153, "module-neural_compressor.adaptor.torch_utils.autoround.sign_sgd"]], "sgd() (in module neural_compressor.adaptor.torch_utils.autoround.sign_sgd)": [[153, "neural_compressor.adaptor.torch_utils.autoround.sign_sgd.sgd"]], "actawareweightquant (class in neural_compressor.adaptor.torch_utils.awq)": [[154, "neural_compressor.adaptor.torch_utils.awq.ActAwareWeightQuant"]], "neural_compressor.adaptor.torch_utils.awq": [[154, "module-neural_compressor.adaptor.torch_utils.awq"]], "bf16modulewrapper (class in neural_compressor.adaptor.torch_utils.bf16_convert)": [[155, "neural_compressor.adaptor.torch_utils.bf16_convert.BF16ModuleWrapper"]], "convert() (in module neural_compressor.adaptor.torch_utils.bf16_convert)": [[155, "neural_compressor.adaptor.torch_utils.bf16_convert.Convert"]], "bf16_symbolic_trace() (in module neural_compressor.adaptor.torch_utils.bf16_convert)": [[155, "neural_compressor.adaptor.torch_utils.bf16_convert.bf16_symbolic_trace"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[155, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "gptq (class in neural_compressor.adaptor.torch_utils.gptq)": [[156, "neural_compressor.adaptor.torch_utils.gptq.GPTQ"]], "gptquantizer (class in neural_compressor.adaptor.torch_utils.gptq)": [[156, "neural_compressor.adaptor.torch_utils.gptq.GPTQuantizer"]], "find_layers() (in module neural_compressor.adaptor.torch_utils.gptq)": [[156, "neural_compressor.adaptor.torch_utils.gptq.find_layers"]], "find_layers_name() (in module neural_compressor.adaptor.torch_utils.gptq)": [[156, "neural_compressor.adaptor.torch_utils.gptq.find_layers_name"]], "is_leaf() (in module neural_compressor.adaptor.torch_utils.gptq)": [[156, "neural_compressor.adaptor.torch_utils.gptq.is_leaf"]], "log_quantizable_layers_per_transformer() (in module neural_compressor.adaptor.torch_utils.gptq)": [[156, "neural_compressor.adaptor.torch_utils.gptq.log_quantizable_layers_per_transformer"]], "neural_compressor.adaptor.torch_utils.gptq": [[156, "module-neural_compressor.adaptor.torch_utils.gptq"]], "quantize() (in module neural_compressor.adaptor.torch_utils.gptq)": [[156, "neural_compressor.adaptor.torch_utils.gptq.quantize"]], "trace_gptq_target_blocks() (in module neural_compressor.adaptor.torch_utils.gptq)": [[156, "neural_compressor.adaptor.torch_utils.gptq.trace_gptq_target_blocks"]], "hessiantrace (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[157, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace"]], "node_collector (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[157, "neural_compressor.adaptor.torch_utils.hawq_metric.Node_collector"]], "compare_weights() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[157, "neural_compressor.adaptor.torch_utils.hawq_metric.compare_weights"]], "hawq_top() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[157, "neural_compressor.adaptor.torch_utils.hawq_metric.hawq_top"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[157, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[158, "module-neural_compressor.adaptor.torch_utils"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant": [[159, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant"]], "pickleerror": [[160, "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle.PickleError"], [576, "neural_compressor.torch.algorithms.layer_wise.modified_pickle.PickleError"]], "picklingerror": [[160, "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle.PicklingError"], [576, "neural_compressor.torch.algorithms.layer_wise.modified_pickle.PicklingError"]], "unpicklingerror": [[160, "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle.UnpicklingError"], [576, "neural_compressor.torch.algorithms.layer_wise.modified_pickle.UnpicklingError"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle": [[160, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle"]], "layerwisequant (class in neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize)": [[161, "neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize.LayerWiseQuant"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize": [[161, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize"]], "load() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load)": [[162, "neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load.load"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load": [[162, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load"]], "dowload_hf_model() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[163, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.dowload_hf_model"]], "get_children() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[163, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.get_children"]], "get_module() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[163, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.get_module"]], "get_named_children() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[163, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.get_named_children"]], "get_super_module_by_name() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[163, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.get_super_module_by_name"]], "load_empty_model() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[163, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.load_empty_model"]], "load_layer_wise_quantized_model() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[163, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.load_layer_wise_quantized_model"]], "load_tensor() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[163, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.load_tensor"]], "load_tensor_from_shard() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[163, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.load_tensor_from_shard"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils": [[163, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.utils"]], "update_module() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[163, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.update_module"]], "ipex_mixed_precision() (in module neural_compressor.adaptor.torch_utils.mixed_precision)": [[164, "neural_compressor.adaptor.torch_utils.mixed_precision.ipex_mixed_precision"]], "neural_compressor.adaptor.torch_utils.mixed_precision": [[164, "module-neural_compressor.adaptor.torch_utils.mixed_precision"]], "fakeaffinetensorquantfunction (class in neural_compressor.adaptor.torch_utils.model_wrapper)": [[165, "neural_compressor.adaptor.torch_utils.model_wrapper.FakeAffineTensorQuantFunction"]], "mullinear (class in neural_compressor.adaptor.torch_utils.model_wrapper)": [[165, "neural_compressor.adaptor.torch_utils.model_wrapper.MulLinear"]], "teqlinearfakequant (class in neural_compressor.adaptor.torch_utils.model_wrapper)": [[165, "neural_compressor.adaptor.torch_utils.model_wrapper.TEQLinearFakeQuant"]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[165, "module-neural_compressor.adaptor.torch_utils.model_wrapper"]], "transformerbasedmodelblockpatterndetector (class in neural_compressor.adaptor.torch_utils.pattern_detector)": [[166, "neural_compressor.adaptor.torch_utils.pattern_detector.TransformerBasedModelBlockPatternDetector"]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[166, "module-neural_compressor.adaptor.torch_utils.pattern_detector"]], "torchsmoothquant (class in neural_compressor.adaptor.torch_utils.smooth_quant)": [[167, "neural_compressor.adaptor.torch_utils.smooth_quant.TorchSmoothQuant"]], "get_module() (in module neural_compressor.adaptor.torch_utils.smooth_quant)": [[167, "neural_compressor.adaptor.torch_utils.smooth_quant.get_module"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[167, "module-neural_compressor.adaptor.torch_utils.smooth_quant"]], "set_module() (in module neural_compressor.adaptor.torch_utils.smooth_quant)": [[167, "neural_compressor.adaptor.torch_utils.smooth_quant.set_module"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[168, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "symbolic_trace() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[168, "neural_compressor.adaptor.torch_utils.symbolic_trace.symbolic_trace"]], "trace_and_fuse_sub_graph() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[168, "neural_compressor.adaptor.torch_utils.symbolic_trace.trace_and_fuse_sub_graph"]], "tequantizer (class in neural_compressor.adaptor.torch_utils.teq)": [[169, "neural_compressor.adaptor.torch_utils.teq.TEQuantizer"]], "neural_compressor.adaptor.torch_utils.teq": [[169, "module-neural_compressor.adaptor.torch_utils.teq"]], "append_attr() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.append_attr"]], "auto_copy() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.auto_copy"]], "calculate_quant_min_max() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.calculate_quant_min_max"]], "calibration() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.calibration"]], "check_cfg_and_qconfig() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.check_cfg_and_qconfig"]], "collate_torch_preds() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.collate_torch_preds"]], "collect_weight_info() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.collect_weight_info"]], "fetch_module() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.fetch_module"]], "forward_wrapper() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.forward_wrapper"]], "generate_activation_observer() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.generate_activation_observer"]], "get_absorb_layers() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_absorb_layers"]], "get_block_prefix() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_block_prefix"]], "get_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_depth"]], "get_dict_at_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_dict_at_depth"]], "get_element_under_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_element_under_depth"]], "get_embedding_contiguous() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_embedding_contiguous"]], "get_example_input() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_example_input"]], "get_fallback_order() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_fallback_order"]], "get_hidden_states() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_hidden_states"]], "get_module_input_output() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_module_input_output"]], "get_mse_order_per_fp32() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_fp32"]], "get_mse_order_per_int8() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_int8"]], "get_op_type_by_name() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_op_type_by_name"]], "get_quantizable_ops_from_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_quantizable_ops_from_cfgs"]], "get_torch_version() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_torch_version"]], "input2tuple() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.input2tuple"]], "is_fused_module() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.is_fused_module"]], "match_datatype_pattern() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.match_datatype_pattern"]], "move_input_device() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.move_input_device"]], "neural_compressor.adaptor.torch_utils.util": [[170, "module-neural_compressor.adaptor.torch_utils.util"]], "paser_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.paser_cfgs"]], "set_module() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.set_module"]], "simple_inference() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.simple_inference"]], "update_sq_scale() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.update_sq_scale"]], "awq_quantize() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[171, "neural_compressor.adaptor.torch_utils.weight_only.awq_quantize"]], "gptq_quantize() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[171, "neural_compressor.adaptor.torch_utils.weight_only.gptq_quantize"]], "neural_compressor.adaptor.torch_utils.weight_only": [[171, "module-neural_compressor.adaptor.torch_utils.weight_only"]], "qdq_weight_actor() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[171, "neural_compressor.adaptor.torch_utils.weight_only.qdq_weight_actor"]], "qdq_weight_asym() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[171, "neural_compressor.adaptor.torch_utils.weight_only.qdq_weight_asym"]], "qdq_weight_sym() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[171, "neural_compressor.adaptor.torch_utils.weight_only.qdq_weight_sym"]], "quant_weight() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[171, "neural_compressor.adaptor.torch_utils.weight_only.quant_weight"]], "quant_weight_w_scale() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[171, "neural_compressor.adaptor.torch_utils.weight_only.quant_weight_w_scale"]], "quantize_4bit() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[171, "neural_compressor.adaptor.torch_utils.weight_only.quantize_4bit"]], "rtn_quantize() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[171, "neural_compressor.adaptor.torch_utils.weight_only.rtn_quantize"]], "search_clip() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[171, "neural_compressor.adaptor.torch_utils.weight_only.search_clip"]], "teq_quantize() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[171, "neural_compressor.adaptor.torch_utils.weight_only.teq_quantize"]], "algorithms (class in neural_compressor.algorithm.algorithm)": [[172, "neural_compressor.algorithm.algorithm.ALGORITHMS"]], "algorithm (class in neural_compressor.algorithm.algorithm)": [[172, "neural_compressor.algorithm.algorithm.Algorithm"]], "algorithmscheduler (class in neural_compressor.algorithm.algorithm)": [[172, "neural_compressor.algorithm.algorithm.AlgorithmScheduler"]], "algorithm_registry() (in module neural_compressor.algorithm.algorithm)": [[172, "neural_compressor.algorithm.algorithm.algorithm_registry"]], "neural_compressor.algorithm.algorithm": [[172, "module-neural_compressor.algorithm.algorithm"]], "fastbiascorrection (class in neural_compressor.algorithm.fast_bias_correction)": [[173, "neural_compressor.algorithm.fast_bias_correction.FastBiasCorrection"]], "neural_compressor.algorithm.fast_bias_correction": [[173, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[174, "module-neural_compressor.algorithm"]], "smoothquant (class in neural_compressor.algorithm.smooth_quant)": [[175, "neural_compressor.algorithm.smooth_quant.SmoothQuant"]], "neural_compressor.algorithm.smooth_quant": [[175, "module-neural_compressor.algorithm.smooth_quant"]], "weightcorrection (class in neural_compressor.algorithm.weight_correction)": [[176, "neural_compressor.algorithm.weight_correction.WeightCorrection"]], "neural_compressor.algorithm.weight_correction": [[176, "module-neural_compressor.algorithm.weight_correction"]], "benchmark_with_raw_cmd() (in module neural_compressor.benchmark)": [[177, "neural_compressor.benchmark.benchmark_with_raw_cmd"]], "call_one() (in module neural_compressor.benchmark)": [[177, "neural_compressor.benchmark.call_one"]], "config_instance() (in module neural_compressor.benchmark)": [[177, "neural_compressor.benchmark.config_instance"]], "fit() (in module neural_compressor.benchmark)": [[177, "neural_compressor.benchmark.fit"]], "generate_prefix() (in module neural_compressor.benchmark)": [[177, "neural_compressor.benchmark.generate_prefix"]], "get_architecture() (in module neural_compressor.benchmark)": [[177, "neural_compressor.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.benchmark)": [[177, "neural_compressor.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.benchmark)": [[177, "neural_compressor.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.benchmark)": [[177, "neural_compressor.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.benchmark)": [[177, "neural_compressor.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.benchmark)": [[177, "neural_compressor.benchmark.get_threads_per_core"]], "neural_compressor.benchmark": [[177, "module-neural_compressor.benchmark"]], "profile() (in module neural_compressor.benchmark)": [[177, "neural_compressor.benchmark.profile"]], "run_instance() (in module neural_compressor.benchmark)": [[177, "neural_compressor.benchmark.run_instance"]], "set_all_env_var() (in module neural_compressor.benchmark)": [[177, "neural_compressor.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.benchmark)": [[177, "neural_compressor.benchmark.set_env_var"]], "summary_benchmark() (in module neural_compressor.benchmark)": [[177, "neural_compressor.benchmark.summary_benchmark"]], "baseconfig (class in neural_compressor.common.base_config)": [[178, "neural_compressor.common.base_config.BaseConfig"]], "composableconfig (class in neural_compressor.common.base_config)": [[178, "neural_compressor.common.base_config.ComposableConfig"]], "neural_compressor.common.base_config": [[178, "module-neural_compressor.common.base_config"]], "register_config() (in module neural_compressor.common.base_config)": [[178, "neural_compressor.common.base_config.register_config"]], "register_supported_configs_for_fwk() (in module neural_compressor.common.base_config)": [[178, "neural_compressor.common.base_config.register_supported_configs_for_fwk"]], "evaluator (class in neural_compressor.common.base_tuning)": [[179, "neural_compressor.common.base_tuning.Evaluator"]], "sequentialsampler (class in neural_compressor.common.base_tuning)": [[179, "neural_compressor.common.base_tuning.SequentialSampler"]], "tuningconfig (class in neural_compressor.common.base_tuning)": [[179, "neural_compressor.common.base_tuning.TuningConfig"]], "neural_compressor.common.base_tuning": [[179, "module-neural_compressor.common.base_tuning"]], "neural_compressor.common": [[180, "module-neural_compressor.common"]], "paramlevel (class in neural_compressor.common.tuning_param)": [[181, "neural_compressor.common.tuning_param.ParamLevel"]], "tuningparam (class in neural_compressor.common.tuning_param)": [[181, "neural_compressor.common.tuning_param.TuningParam"]], "neural_compressor.common.tuning_param": [[181, "module-neural_compressor.common.tuning_param"]], "neural_compressor.common.utils.constants": [[182, "module-neural_compressor.common.utils.constants"]], "neural_compressor.common.utils": [[183, "module-neural_compressor.common.utils"]], "logger (class in neural_compressor.common.utils.logger)": [[184, "neural_compressor.common.utils.logger.Logger"]], "tuninglogger (class in neural_compressor.common.utils.logger)": [[184, "neural_compressor.common.utils.logger.TuningLogger"]], "neural_compressor.common.utils.logger": [[184, "module-neural_compressor.common.utils.logger"]], "dump_elapsed_time() (in module neural_compressor.common.utils.utility)": [[185, "neural_compressor.common.utils.utility.dump_elapsed_time"]], "neural_compressor.common.utils.utility": [[185, "module-neural_compressor.common.utils.utility"]], "set_random_seed() (in module neural_compressor.common.utils.utility)": [[185, "neural_compressor.common.utils.utility.set_random_seed"]], "set_resume_from() (in module neural_compressor.common.utils.utility)": [[185, "neural_compressor.common.utils.utility.set_resume_from"]], "set_tensorboard() (in module neural_compressor.common.utils.utility)": [[185, "neural_compressor.common.utils.utility.set_tensorboard"]], "set_workspace() (in module neural_compressor.common.utils.utility)": [[185, "neural_compressor.common.utils.utility.set_workspace"]], "basecallbacks (class in neural_compressor.compression.callbacks)": [[186, "neural_compressor.compression.callbacks.BaseCallbacks"]], "distillationcallbacks (class in neural_compressor.compression.callbacks)": [[186, "neural_compressor.compression.callbacks.DistillationCallbacks"]], "pruningcallbacks (class in neural_compressor.compression.callbacks)": [[186, "neural_compressor.compression.callbacks.PruningCallbacks"]], "quantizationawaretrainingcallbacks (class in neural_compressor.compression.callbacks)": [[186, "neural_compressor.compression.callbacks.QuantizationAwareTrainingCallbacks"]], "_epoch_ran (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[186, "neural_compressor.compression.callbacks.DistillationCallbacks._epoch_ran"]], "best_model (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[186, "neural_compressor.compression.callbacks.DistillationCallbacks.best_model"]], "best_score (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[186, "neural_compressor.compression.callbacks.DistillationCallbacks.best_score"]], "eval_frequency (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[186, "neural_compressor.compression.callbacks.DistillationCallbacks.eval_frequency"]], "neural_compressor.compression.callbacks": [[186, "module-neural_compressor.compression.callbacks"]], "criterions (class in neural_compressor.compression.distillation.criterions)": [[187, "neural_compressor.compression.distillation.criterions.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[187, "neural_compressor.compression.distillation.criterions.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.compression.distillation.criterions)": [[187, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[187, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationLoss"]], "pytorchcriterions (class in neural_compressor.compression.distillation.criterions)": [[187, "neural_compressor.compression.distillation.criterions.PyTorchCriterions"]], "pytorchcrossentropyloss (class in neural_compressor.compression.distillation.criterions)": [[187, "neural_compressor.compression.distillation.criterions.PyTorchCrossEntropyLoss"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[187, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[187, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[187, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[187, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLossWrapper"]], "pytorchselfknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[187, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLoss"]], "pytorchselfknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[187, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[187, "neural_compressor.compression.distillation.criterions.SelfKnowledgeDistillationLoss"]], "tensorflowcrossentropyloss (class in neural_compressor.compression.distillation.criterions)": [[187, "neural_compressor.compression.distillation.criterions.TensorFlowCrossEntropyLoss"]], "tensorflowsparsecategoricalcrossentropy (class in neural_compressor.compression.distillation.criterions)": [[187, "neural_compressor.compression.distillation.criterions.TensorFlowSparseCategoricalCrossentropy"]], "tensorflowcriterions (class in neural_compressor.compression.distillation.criterions)": [[187, "neural_compressor.compression.distillation.criterions.TensorflowCriterions"]], "tensorflowknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[187, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLoss"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.compression.distillation.criterions)": [[187, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossExternal"]], "tensorflowknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[187, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossWrapper"]], "criterion_registry() (in module neural_compressor.compression.distillation.criterions)": [[187, "neural_compressor.compression.distillation.criterions.criterion_registry"]], "neural_compressor.compression.distillation.criterions": [[187, "module-neural_compressor.compression.distillation.criterions"]], "neural_compressor.compression.distillation": [[188, "module-neural_compressor.compression.distillation"]], "optimizers (class in neural_compressor.compression.distillation.optimizers)": [[189, "neural_compressor.compression.distillation.optimizers.Optimizers"]], "pytorchoptimizers (class in neural_compressor.compression.distillation.optimizers)": [[189, "neural_compressor.compression.distillation.optimizers.PyTorchOptimizers"]], "pytorchsgd (class in neural_compressor.compression.distillation.optimizers)": [[189, "neural_compressor.compression.distillation.optimizers.PyTorchSGD"]], "tensorflowadam (class in neural_compressor.compression.distillation.optimizers)": [[189, "neural_compressor.compression.distillation.optimizers.TensorFlowAdam"]], "tensorflowadamw (class in neural_compressor.compression.distillation.optimizers)": [[189, "neural_compressor.compression.distillation.optimizers.TensorFlowAdamW"]], "tensorflowsgd (class in neural_compressor.compression.distillation.optimizers)": [[189, "neural_compressor.compression.distillation.optimizers.TensorFlowSGD"]], "tensorflowoptimizers (class in neural_compressor.compression.distillation.optimizers)": [[189, "neural_compressor.compression.distillation.optimizers.TensorflowOptimizers"]], "neural_compressor.compression.distillation.optimizers": [[189, "module-neural_compressor.compression.distillation.optimizers"]], "optimizer_registry() (in module neural_compressor.compression.distillation.optimizers)": [[189, "neural_compressor.compression.distillation.optimizers.optimizer_registry"]], "get_activation() (in module neural_compressor.compression.distillation.utility)": [[190, "neural_compressor.compression.distillation.utility.get_activation"]], "neural_compressor.compression.distillation.utility": [[190, "module-neural_compressor.compression.distillation.utility"]], "record_output() (in module neural_compressor.compression.distillation.utility)": [[190, "neural_compressor.compression.distillation.utility.record_output"]], "neural_compressor.compression.hpo": [[191, "module-neural_compressor.compression.hpo"]], "neural_compressor.compression.hpo.sa_optimizer": [[192, "module-neural_compressor.compression.hpo.sa_optimizer"]], "bayesianoptimizationsearcher (class in neural_compressor.compression.hpo.search_algorithms)": [[193, "neural_compressor.compression.hpo.search_algorithms.BayesianOptimizationSearcher"]], "gridsearcher (class in neural_compressor.compression.hpo.search_algorithms)": [[193, "neural_compressor.compression.hpo.search_algorithms.GridSearcher"]], "randomsearcher (class in neural_compressor.compression.hpo.search_algorithms)": [[193, "neural_compressor.compression.hpo.search_algorithms.RandomSearcher"]], "searcher (class in neural_compressor.compression.hpo.search_algorithms)": [[193, "neural_compressor.compression.hpo.search_algorithms.Searcher"]], "xgbsearcher (class in neural_compressor.compression.hpo.search_algorithms)": [[193, "neural_compressor.compression.hpo.search_algorithms.XgbSearcher"]], "neural_compressor.compression.hpo.search_algorithms": [[193, "module-neural_compressor.compression.hpo.search_algorithms"]], "register_searcher() (in module neural_compressor.compression.hpo.search_algorithms)": [[193, "neural_compressor.compression.hpo.search_algorithms.register_searcher"]], "basesearchspace (class in neural_compressor.compression.hpo.search_space)": [[194, "neural_compressor.compression.hpo.search_space.BaseSearchSpace"]], "continuoussearchspace (class in neural_compressor.compression.hpo.search_space)": [[194, "neural_compressor.compression.hpo.search_space.ContinuousSearchSpace"]], "discretesearchspace (class in neural_compressor.compression.hpo.search_space)": [[194, "neural_compressor.compression.hpo.search_space.DiscreteSearchSpace"]], "searchspace (class in neural_compressor.compression.hpo.search_space)": [[194, "neural_compressor.compression.hpo.search_space.SearchSpace"]], "neural_compressor.compression.hpo.search_space": [[194, "module-neural_compressor.compression.hpo.search_space"]], "register_searchspace() (in module neural_compressor.compression.hpo.search_space)": [[194, "neural_compressor.compression.hpo.search_space.register_searchspace"]], "neural_compressor.compression": [[195, "module-neural_compressor.compression"]], "blockmaskcriterion (class in neural_compressor.compression.pruner.criteria)": [[196, "neural_compressor.compression.pruner.criteria.BlockMaskCriterion"]], "gradientcriterion (class in neural_compressor.compression.pruner.criteria)": [[196, "neural_compressor.compression.pruner.criteria.GradientCriterion"]], "magnitudecriterion (class in neural_compressor.compression.pruner.criteria)": [[196, "neural_compressor.compression.pruner.criteria.MagnitudeCriterion"]], "pruningcriterion (class in neural_compressor.compression.pruner.criteria)": [[196, "neural_compressor.compression.pruner.criteria.PruningCriterion"]], "retrainfreecriterion (class in neural_compressor.compression.pruner.criteria)": [[196, "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion"]], "snipcriterion (class in neural_compressor.compression.pruner.criteria)": [[196, "neural_compressor.compression.pruner.criteria.SnipCriterion"]], "snipmomentumcriterion (class in neural_compressor.compression.pruner.criteria)": [[196, "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion"]], "get_criterion() (in module neural_compressor.compression.pruner.criteria)": [[196, "neural_compressor.compression.pruner.criteria.get_criterion"]], "neural_compressor.compression.pruner.criteria": [[196, "module-neural_compressor.compression.pruner.criteria"]], "register_criterion() (in module neural_compressor.compression.pruner.criteria)": [[196, "neural_compressor.compression.pruner.criteria.register_criterion"]], "scores (neural_compressor.compression.pruner.criteria.blockmaskcriterion attribute)": [[196, "neural_compressor.compression.pruner.criteria.BlockMaskCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.gradientcriterion attribute)": [[196, "neural_compressor.compression.pruner.criteria.GradientCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.magnitudecriterion attribute)": [[196, "neural_compressor.compression.pruner.criteria.MagnitudeCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.pruningcriterion attribute)": [[196, "neural_compressor.compression.pruner.criteria.PruningCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.retrainfreecriterion attribute)": [[196, "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.snipcriterion attribute)": [[196, "neural_compressor.compression.pruner.criteria.SnipCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.snipmomentumcriterion attribute)": [[196, "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion.scores"]], "dsnot() (in module neural_compressor.compression.pruner.dsnot)": [[197, "neural_compressor.compression.pruner.dsnot.DSnoT"]], "neural_compressor.compression.pruner.dsnot": [[197, "module-neural_compressor.compression.pruner.dsnot"]], "return_reorder_indice() (in module neural_compressor.compression.pruner.dsnot)": [[197, "neural_compressor.compression.pruner.dsnot.return_reorder_indice"]], "neural_compressor.compression.pruner": [[198, "module-neural_compressor.compression.pruner"]], "prepare_pruning() (in module neural_compressor.compression.pruner)": [[198, "neural_compressor.compression.pruner.prepare_pruning"]], "save() (in module neural_compressor.compression.pruner)": [[198, "neural_compressor.compression.pruner.save"]], "generate_ffn2_pruning_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[199, "neural_compressor.compression.pruner.model_slim.auto_slim.generate_ffn2_pruning_config"]], "generate_mha_pruning_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[199, "neural_compressor.compression.pruner.model_slim.auto_slim.generate_mha_pruning_config"]], "model_slim() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[199, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim"]], "model_slim_ffn2() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[199, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim_ffn2"]], "model_slim_mha() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[199, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim_mha"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[199, "module-neural_compressor.compression.pruner.model_slim.auto_slim"]], "parse_auto_slim_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[199, "neural_compressor.compression.pruner.model_slim.auto_slim.parse_auto_slim_config"]], "neural_compressor.compression.pruner.model_slim": [[200, "module-neural_compressor.compression.pruner.model_slim"]], "classifierheadsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[201, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher"]], "classifierheadsearchertf (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[201, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF"]], "jitbasicsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[201, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher"]], "linear2linearsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[201, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher"]], "recipesearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[201, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher"]], "selfmhasearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[201, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher"]], "current_pattern (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[201, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.current_pattern"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[201, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[201, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[201, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[201, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[201, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.device"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[201, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[201, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[201, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[201, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[201, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.flatten_static_graph"]], "get_attributes() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[201, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.get_attributes"]], "get_common_module() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[201, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.get_common_module"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[201, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[201, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[201, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[201, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[201, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[201, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.model"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[201, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"]], "print_iterables() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[201, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.print_iterables"]], "recipe (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[201, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.recipe"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[201, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.searching_results"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[201, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.searching_results"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[201, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.searching_results"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[201, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[201, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[201, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[201, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[201, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.static_graph"]], "target_layers (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[201, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.target_layers"]], "target_layers (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[201, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.target_layers"]], "target_op_lut (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[201, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.target_op_lut"]], "targets (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[201, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.targets"]], "linearcompression (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[202, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression"]], "linearcompressioniterator (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[202, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator"]], "postcompressionutils (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[202, "neural_compressor.compression.pruner.model_slim.weight_slim.PostCompressionUtils"]], "device (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[202, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.device"]], "layer_1 (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[202, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.layer_1"]], "layer_2 (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[202, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.layer_2"]], "linear_patterns (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompressioniterator attribute)": [[202, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator.linear_patterns"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[202, "module-neural_compressor.compression.pruner.model_slim.weight_slim"]], "basepattern (class in neural_compressor.compression.pruner.patterns.base)": [[203, "neural_compressor.compression.pruner.patterns.base.BasePattern"]], "kerasbasepattern (class in neural_compressor.compression.pruner.patterns.base)": [[203, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern"]], "pytorchbasepattern (class in neural_compressor.compression.pruner.patterns.base)": [[203, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern"]], "config (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[203, "neural_compressor.compression.pruner.patterns.base.BasePattern.config"]], "config (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[203, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.config"]], "config (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[203, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.config"]], "invalid_layers (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[203, "neural_compressor.compression.pruner.patterns.base.BasePattern.invalid_layers"]], "invalid_layers (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[203, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.invalid_layers"]], "invalid_layers (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[203, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.invalid_layers"]], "is_global (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[203, "neural_compressor.compression.pruner.patterns.base.BasePattern.is_global"]], "is_global (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[203, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.is_global"]], "is_global (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[203, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.is_global"]], "keep_mask_layers (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[203, "neural_compressor.compression.pruner.patterns.base.BasePattern.keep_mask_layers"]], "keep_mask_layers (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[203, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.keep_mask_layers"]], "keep_mask_layers (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[203, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.keep_mask_layers"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[203, "neural_compressor.compression.pruner.patterns.base.BasePattern.max_sparsity_ratio_per_op"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[203, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.max_sparsity_ratio_per_op"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[203, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.max_sparsity_ratio_per_op"]], "min_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[203, "neural_compressor.compression.pruner.patterns.base.BasePattern.min_sparsity_ratio_per_op"]], "min_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[203, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.min_sparsity_ratio_per_op"]], "min_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[203, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.min_sparsity_ratio_per_op"]], "modules (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[203, "neural_compressor.compression.pruner.patterns.base.BasePattern.modules"]], "modules (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[203, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.modules"]], "modules (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[203, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.modules"]], "neural_compressor.compression.pruner.patterns.base": [[203, "module-neural_compressor.compression.pruner.patterns.base"]], "pattern (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[203, "neural_compressor.compression.pruner.patterns.base.BasePattern.pattern"]], "pattern (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[203, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.pattern"]], "pattern (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[203, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.pattern"]], "register_pattern() (in module neural_compressor.compression.pruner.patterns.base)": [[203, "neural_compressor.compression.pruner.patterns.base.register_pattern"]], "target_sparsity (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[203, "neural_compressor.compression.pruner.patterns.base.BasePattern.target_sparsity"]], "target_sparsity (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[203, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.target_sparsity"]], "target_sparsity (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[203, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.target_sparsity"]], "get_pattern() (in module neural_compressor.compression.pruner.patterns)": [[204, "neural_compressor.compression.pruner.patterns.get_pattern"]], "neural_compressor.compression.pruner.patterns": [[204, "module-neural_compressor.compression.pruner.patterns"]], "m (neural_compressor.compression.pruner.patterns.mha.patternmha attribute)": [[205, "neural_compressor.compression.pruner.patterns.mha.PatternMHA.M"]], "n (neural_compressor.compression.pruner.patterns.mha.patternmha attribute)": [[205, "neural_compressor.compression.pruner.patterns.mha.PatternMHA.N"]], "patternmha (class in neural_compressor.compression.pruner.patterns.mha)": [[205, "neural_compressor.compression.pruner.patterns.mha.PatternMHA"]], "neural_compressor.compression.pruner.patterns.mha": [[205, "module-neural_compressor.compression.pruner.patterns.mha"]], "m (neural_compressor.compression.pruner.patterns.ninm.pytorchpatternninm attribute)": [[206, "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM.M"]], "n (neural_compressor.compression.pruner.patterns.ninm.pytorchpatternninm attribute)": [[206, "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM.N"]], "pytorchpatternninm (class in neural_compressor.compression.pruner.patterns.ninm)": [[206, "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM"]], "neural_compressor.compression.pruner.patterns.ninm": [[206, "module-neural_compressor.compression.pruner.patterns.ninm"]], "keraspatternnxm (class in neural_compressor.compression.pruner.patterns.nxm)": [[207, "neural_compressor.compression.pruner.patterns.nxm.KerasPatternNxM"]], "pytorchpatternnxm (class in neural_compressor.compression.pruner.patterns.nxm)": [[207, "neural_compressor.compression.pruner.patterns.nxm.PytorchPatternNxM"]], "block_size (neural_compressor.compression.pruner.patterns.nxm.keraspatternnxm attribute)": [[207, "neural_compressor.compression.pruner.patterns.nxm.KerasPatternNxM.block_size"]], "block_size (neural_compressor.compression.pruner.patterns.nxm.pytorchpatternnxm attribute)": [[207, "neural_compressor.compression.pruner.patterns.nxm.PytorchPatternNxM.block_size"]], "neural_compressor.compression.pruner.patterns.nxm": [[207, "module-neural_compressor.compression.pruner.patterns.nxm"]], "basepruner (class in neural_compressor.compression.pruner.pruners.base)": [[208, "neural_compressor.compression.pruner.pruners.base.BasePruner"]], "kerasbasepruner (class in neural_compressor.compression.pruner.pruners.base)": [[208, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner"]], "pytorchbasepruner (class in neural_compressor.compression.pruner.pruners.base)": [[208, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner"]], "config (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[208, "neural_compressor.compression.pruner.pruners.base.BasePruner.config"]], "config (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[208, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.config"]], "config (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[208, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.config"]], "current_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[208, "neural_compressor.compression.pruner.pruners.base.BasePruner.current_sparsity_ratio"]], "current_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[208, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.current_sparsity_ratio"]], "current_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[208, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.current_sparsity_ratio"]], "end_step (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[208, "neural_compressor.compression.pruner.pruners.base.BasePruner.end_step"]], "end_step (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[208, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.end_step"]], "end_step (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[208, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.end_step"]], "global_step (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[208, "neural_compressor.compression.pruner.pruners.base.BasePruner.global_step"]], "global_step (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[208, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.global_step"]], "global_step (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[208, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.global_step"]], "masks (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[208, "neural_compressor.compression.pruner.pruners.base.BasePruner.masks"]], "masks (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[208, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.masks"]], "masks (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[208, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.masks"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[208, "neural_compressor.compression.pruner.pruners.base.BasePruner.max_sparsity_ratio_per_op"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[208, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.max_sparsity_ratio_per_op"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[208, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.max_sparsity_ratio_per_op"]], "modules (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[208, "neural_compressor.compression.pruner.pruners.base.BasePruner.modules"]], "modules (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[208, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.modules"]], "modules (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[208, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.modules"]], "neural_compressor.compression.pruner.pruners.base": [[208, "module-neural_compressor.compression.pruner.pruners.base"]], "pattern (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[208, "neural_compressor.compression.pruner.pruners.base.BasePruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[208, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[208, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.pattern"]], "pruning_frequency (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[208, "neural_compressor.compression.pruner.pruners.base.BasePruner.pruning_frequency"]], "pruning_frequency (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[208, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.pruning_frequency"]], "pruning_frequency (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[208, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.pruning_frequency"]], "register_pruner() (in module neural_compressor.compression.pruner.pruners.base)": [[208, "neural_compressor.compression.pruner.pruners.base.register_pruner"]], "scheduler (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[208, "neural_compressor.compression.pruner.pruners.base.BasePruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[208, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[208, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.scheduler"]], "scores (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[208, "neural_compressor.compression.pruner.pruners.base.BasePruner.scores"]], "scores (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[208, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.scores"]], "scores (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[208, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.scores"]], "start_step (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[208, "neural_compressor.compression.pruner.pruners.base.BasePruner.start_step"]], "start_step (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[208, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.start_step"]], "start_step (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[208, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.start_step"]], "target_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[208, "neural_compressor.compression.pruner.pruners.base.BasePruner.target_sparsity_ratio"]], "target_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[208, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.target_sparsity_ratio"]], "target_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[208, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.target_sparsity_ratio"]], "kerasbasicpruner (class in neural_compressor.compression.pruner.pruners.basic)": [[209, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner"]], "pytorchbasicpruner (class in neural_compressor.compression.pruner.pruners.basic)": [[209, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner"]], "criterion (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[209, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.criterion"]], "criterion (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[209, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.criterion"]], "neural_compressor.compression.pruner.pruners.basic": [[209, "module-neural_compressor.compression.pruner.pruners.basic"]], "pattern (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[209, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[209, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.pattern"]], "reg (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[209, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.reg"]], "reg (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[209, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.reg"]], "scheduler (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[209, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[209, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.scheduler"]], "pytorchblockmaskpruner (class in neural_compressor.compression.pruner.pruners.block_mask)": [[210, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner"]], "criterion (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[210, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.criterion"]], "neural_compressor.compression.pruner.pruners.block_mask": [[210, "module-neural_compressor.compression.pruner.pruners.block_mask"]], "pattern (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[210, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.pattern"]], "reg (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[210, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.reg"]], "scheduler (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[210, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.scheduler"]], "get_pruner() (in module neural_compressor.compression.pruner.pruners)": [[211, "neural_compressor.compression.pruner.pruners.get_pruner"]], "neural_compressor.compression.pruner.pruners": [[211, "module-neural_compressor.compression.pruner.pruners"]], "parse_valid_pruner_types() (in module neural_compressor.compression.pruner.pruners)": [[211, "neural_compressor.compression.pruner.pruners.parse_valid_pruner_types"]], "pythonmultiheadattentionpruner (class in neural_compressor.compression.pruner.pruners.mha)": [[212, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner"]], "head_masks (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[212, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.head_masks"]], "linear_layers (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[212, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.linear_layers"]], "mha_compressions (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[212, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.mha_compressions"]], "mha_scores (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[212, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.mha_scores"]], "neural_compressor.compression.pruner.pruners.mha": [[212, "module-neural_compressor.compression.pruner.pruners.mha"]], "pytorchpatternlockpruner (class in neural_compressor.compression.pruner.pruners.pattern_lock)": [[213, "neural_compressor.compression.pruner.pruners.pattern_lock.PytorchPatternLockPruner"]], "neural_compressor.compression.pruner.pruners.pattern_lock": [[213, "module-neural_compressor.compression.pruner.pruners.pattern_lock"]], "pytorchprogressivepruner (class in neural_compressor.compression.pruner.pruners.progressive)": [[214, "neural_compressor.compression.pruner.pruners.progressive.PytorchProgressivePruner"]], "neural_compressor.compression.pruner.pruners.progressive": [[214, "module-neural_compressor.compression.pruner.pruners.progressive"]], "pytorchretrainfreepruner (class in neural_compressor.compression.pruner.pruners.retrain_free)": [[215, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner"]], "criterion (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[215, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.criterion"]], "neural_compressor.compression.pruner.pruners.retrain_free": [[215, "module-neural_compressor.compression.pruner.pruners.retrain_free"]], "pattern (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[215, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.pattern"]], "reg (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[215, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.reg"]], "scheduler (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[215, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.scheduler"]], "sparsegptpruner (class in neural_compressor.compression.pruner.pruners.sparse_gpt)": [[216, "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner"]], "criterion (neural_compressor.compression.pruner.pruners.sparse_gpt.sparsegptpruner attribute)": [[216, "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner.criterion"]], "neural_compressor.compression.pruner.pruners.sparse_gpt": [[216, "module-neural_compressor.compression.pruner.pruners.sparse_gpt"]], "pattern (neural_compressor.compression.pruner.pruners.sparse_gpt.sparsegptpruner attribute)": [[216, "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner.pattern"]], "reg (neural_compressor.compression.pruner.pruners.sparse_gpt.sparsegptpruner attribute)": [[216, "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner.reg"]], "scheduler (neural_compressor.compression.pruner.pruners.sparse_gpt.sparsegptpruner attribute)": [[216, "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner.scheduler"]], "basepruning (class in neural_compressor.compression.pruner.pruning)": [[217, "neural_compressor.compression.pruner.pruning.BasePruning"]], "basicpruning (class in neural_compressor.compression.pruner.pruning)": [[217, "neural_compressor.compression.pruner.pruning.BasicPruning"]], "retrainfreepruning (class in neural_compressor.compression.pruner.pruning)": [[217, "neural_compressor.compression.pruner.pruning.RetrainFreePruning"]], "sparsegptpruning (class in neural_compressor.compression.pruner.pruning)": [[217, "neural_compressor.compression.pruner.pruning.SparseGPTPruning"]], "config_file_path (neural_compressor.compression.pruner.pruning.basepruning attribute)": [[217, "neural_compressor.compression.pruner.pruning.BasePruning.config_file_path"]], "config_file_path (neural_compressor.compression.pruner.pruning.basicpruning attribute)": [[217, "neural_compressor.compression.pruner.pruning.BasicPruning.config_file_path"]], "config_file_path (neural_compressor.compression.pruner.pruning.retrainfreepruning attribute)": [[217, "neural_compressor.compression.pruner.pruning.RetrainFreePruning.config_file_path"]], "model (neural_compressor.compression.pruner.pruning.basepruning attribute)": [[217, "neural_compressor.compression.pruner.pruning.BasePruning.model"]], "model (neural_compressor.compression.pruner.pruning.basicpruning attribute)": [[217, "neural_compressor.compression.pruner.pruning.BasicPruning.model"]], "model (neural_compressor.compression.pruner.pruning.retrainfreepruning attribute)": [[217, "neural_compressor.compression.pruner.pruning.RetrainFreePruning.model"]], "neural_compressor.compression.pruner.pruning": [[217, "module-neural_compressor.compression.pruner.pruning"]], "pruner_info (neural_compressor.compression.pruner.pruning.basepruning attribute)": [[217, "neural_compressor.compression.pruner.pruning.BasePruning.pruner_info"]], "pruner_info (neural_compressor.compression.pruner.pruning.basicpruning attribute)": [[217, "neural_compressor.compression.pruner.pruning.BasicPruning.pruner_info"]], "pruner_info (neural_compressor.compression.pruner.pruning.retrainfreepruning attribute)": [[217, "neural_compressor.compression.pruner.pruning.RetrainFreePruning.pruner_info"]], "pruners (neural_compressor.compression.pruner.pruning.basepruning attribute)": [[217, "neural_compressor.compression.pruner.pruning.BasePruning.pruners"]], "pruners (neural_compressor.compression.pruner.pruning.basicpruning attribute)": [[217, "neural_compressor.compression.pruner.pruning.BasicPruning.pruners"]], "pruners (neural_compressor.compression.pruner.pruning.retrainfreepruning attribute)": [[217, "neural_compressor.compression.pruner.pruning.RetrainFreePruning.pruners"]], "register_pruning() (in module neural_compressor.compression.pruner.pruning)": [[217, "neural_compressor.compression.pruner.pruning.register_pruning"]], "basereg (class in neural_compressor.compression.pruner.regs)": [[218, "neural_compressor.compression.pruner.regs.BaseReg"]], "grouplasso (class in neural_compressor.compression.pruner.regs)": [[218, "neural_compressor.compression.pruner.regs.GroupLasso"]], "alpha (neural_compressor.compression.pruner.regs.grouplasso attribute)": [[218, "neural_compressor.compression.pruner.regs.GroupLasso.alpha"]], "get_reg() (in module neural_compressor.compression.pruner.regs)": [[218, "neural_compressor.compression.pruner.regs.get_reg"]], "get_reg_type() (in module neural_compressor.compression.pruner.regs)": [[218, "neural_compressor.compression.pruner.regs.get_reg_type"]], "neural_compressor.compression.pruner.regs": [[218, "module-neural_compressor.compression.pruner.regs"]], "reg_terms (neural_compressor.compression.pruner.regs.grouplasso attribute)": [[218, "neural_compressor.compression.pruner.regs.GroupLasso.reg_terms"]], "register_reg() (in module neural_compressor.compression.pruner.regs)": [[218, "neural_compressor.compression.pruner.regs.register_reg"]], "iterativescheduler (class in neural_compressor.compression.pruner.schedulers)": [[219, "neural_compressor.compression.pruner.schedulers.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.compression.pruner.schedulers)": [[219, "neural_compressor.compression.pruner.schedulers.OneshotScheduler"]], "pruningscheduler (class in neural_compressor.compression.pruner.schedulers)": [[219, "neural_compressor.compression.pruner.schedulers.PruningScheduler"]], "config (neural_compressor.compression.pruner.schedulers.pruningscheduler attribute)": [[219, "neural_compressor.compression.pruner.schedulers.PruningScheduler.config"]], "get_scheduler() (in module neural_compressor.compression.pruner.schedulers)": [[219, "neural_compressor.compression.pruner.schedulers.get_scheduler"]], "neural_compressor.compression.pruner.schedulers": [[219, "module-neural_compressor.compression.pruner.schedulers"]], "register_scheduler() (in module neural_compressor.compression.pruner.schedulers)": [[219, "neural_compressor.compression.pruner.schedulers.register_scheduler"]], "magnitudecriterion (class in neural_compressor.compression.pruner.tf_criteria)": [[220, "neural_compressor.compression.pruner.tf_criteria.MagnitudeCriterion"]], "pruningcriterion (class in neural_compressor.compression.pruner.tf_criteria)": [[220, "neural_compressor.compression.pruner.tf_criteria.PruningCriterion"]], "get_tf_criterion() (in module neural_compressor.compression.pruner.tf_criteria)": [[220, "neural_compressor.compression.pruner.tf_criteria.get_tf_criterion"]], "neural_compressor.compression.pruner.tf_criteria": [[220, "module-neural_compressor.compression.pruner.tf_criteria"]], "register_criterion() (in module neural_compressor.compression.pruner.tf_criteria)": [[220, "neural_compressor.compression.pruner.tf_criteria.register_criterion"]], "scores (neural_compressor.compression.pruner.tf_criteria.magnitudecriterion attribute)": [[220, "neural_compressor.compression.pruner.tf_criteria.MagnitudeCriterion.scores"]], "scores (neural_compressor.compression.pruner.tf_criteria.pruningcriterion attribute)": [[220, "neural_compressor.compression.pruner.tf_criteria.PruningCriterion.scores"]], "check_config() (in module neural_compressor.compression.pruner.utils)": [[221, "neural_compressor.compression.pruner.utils.check_config"]], "check_key_validity() (in module neural_compressor.compression.pruner.utils)": [[221, "neural_compressor.compression.pruner.utils.check_key_validity"]], "collect_layer_inputs() (in module neural_compressor.compression.pruner.utils)": [[221, "neural_compressor.compression.pruner.utils.collect_layer_inputs"]], "generate_pruner_config() (in module neural_compressor.compression.pruner.utils)": [[221, "neural_compressor.compression.pruner.utils.generate_pruner_config"]], "get_layers() (in module neural_compressor.compression.pruner.utils)": [[221, "neural_compressor.compression.pruner.utils.get_layers"]], "get_sparsity_ratio() (in module neural_compressor.compression.pruner.utils)": [[221, "neural_compressor.compression.pruner.utils.get_sparsity_ratio"]], "get_sparsity_ratio_tf() (in module neural_compressor.compression.pruner.utils)": [[221, "neural_compressor.compression.pruner.utils.get_sparsity_ratio_tf"]], "neural_compressor.compression.pruner.utils": [[221, "module-neural_compressor.compression.pruner.utils"]], "parse_last_linear() (in module neural_compressor.compression.pruner.utils)": [[221, "neural_compressor.compression.pruner.utils.parse_last_linear"]], "parse_last_linear_tf() (in module neural_compressor.compression.pruner.utils)": [[221, "neural_compressor.compression.pruner.utils.parse_last_linear_tf"]], "parse_to_prune() (in module neural_compressor.compression.pruner.utils)": [[221, "neural_compressor.compression.pruner.utils.parse_to_prune"]], "parse_to_prune_tf() (in module neural_compressor.compression.pruner.utils)": [[221, "neural_compressor.compression.pruner.utils.parse_to_prune_tf"]], "process_and_check_config() (in module neural_compressor.compression.pruner.utils)": [[221, "neural_compressor.compression.pruner.utils.process_and_check_config"]], "process_config() (in module neural_compressor.compression.pruner.utils)": [[221, "neural_compressor.compression.pruner.utils.process_config"]], "process_weight_config() (in module neural_compressor.compression.pruner.utils)": [[221, "neural_compressor.compression.pruner.utils.process_weight_config"]], "process_yaml_config() (in module neural_compressor.compression.pruner.utils)": [[221, "neural_compressor.compression.pruner.utils.process_yaml_config"]], "reset_none_to_default() (in module neural_compressor.compression.pruner.utils)": [[221, "neural_compressor.compression.pruner.utils.reset_none_to_default"]], "update_params() (in module neural_compressor.compression.pruner.utils)": [[221, "neural_compressor.compression.pruner.utils.update_params"]], "neural_compressor.compression.pruner.wanda": [[222, "module-neural_compressor.compression.pruner.wanda"]], "neural_compressor.compression.pruner.wanda.prune": [[223, "module-neural_compressor.compression.pruner.wanda.prune"]], "prune_wanda() (in module neural_compressor.compression.pruner.wanda.prune)": [[223, "neural_compressor.compression.pruner.wanda.prune.prune_wanda"]], "find_layers() (in module neural_compressor.compression.pruner.wanda.utils)": [[224, "neural_compressor.compression.pruner.wanda.utils.find_layers"]], "neural_compressor.compression.pruner.wanda.utils": [[224, "module-neural_compressor.compression.pruner.wanda.utils"]], "wrappedgpt (class in neural_compressor.compression.pruner.wanda.wrapper)": [[225, "neural_compressor.compression.pruner.wanda.wrapper.WrappedGPT"]], "neural_compressor.compression.pruner.wanda.wrapper": [[225, "module-neural_compressor.compression.pruner.wanda.wrapper"]], "benchmark_conf (class in neural_compressor.conf.config)": [[226, "neural_compressor.conf.config.Benchmark_Conf"]], "conf (class in neural_compressor.conf.config)": [[226, "neural_compressor.conf.config.Conf"]], "distillation_conf (class in neural_compressor.conf.config)": [[226, "neural_compressor.conf.config.Distillation_Conf"]], "graph_optimization_conf (class in neural_compressor.conf.config)": [[226, "neural_compressor.conf.config.Graph_Optimization_Conf"]], "mixedprecision_conf (class in neural_compressor.conf.config)": [[226, "neural_compressor.conf.config.MixedPrecision_Conf"]], "nasconfig (class in neural_compressor.conf.config)": [[226, "neural_compressor.conf.config.NASConfig"]], "prunerv2 (class in neural_compressor.conf.config)": [[226, "neural_compressor.conf.config.PrunerV2"]], "pruning_conf (class in neural_compressor.conf.config)": [[226, "neural_compressor.conf.config.Pruning_Conf"]], "quantization_conf (class in neural_compressor.conf.config)": [[226, "neural_compressor.conf.config.Quantization_Conf"]], "neural_compressor.conf.config": [[226, "module-neural_compressor.conf.config"]], "dotdict (class in neural_compressor.conf.dotdict)": [[227, "neural_compressor.conf.dotdict.DotDict"]], "deep_get() (in module neural_compressor.conf.dotdict)": [[227, "neural_compressor.conf.dotdict.deep_get"]], "deep_set() (in module neural_compressor.conf.dotdict)": [[227, "neural_compressor.conf.dotdict.deep_set"]], "neural_compressor.conf.dotdict": [[227, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[228, "module-neural_compressor.conf"]], "accuracycriterion (class in neural_compressor.conf.pythonic_config)": [[229, "neural_compressor.conf.pythonic_config.AccuracyCriterion"]], "benchmarkconfig (class in neural_compressor.conf.pythonic_config)": [[229, "neural_compressor.conf.pythonic_config.BenchmarkConfig"]], "distillationconfig (class in neural_compressor.conf.pythonic_config)": [[229, "neural_compressor.conf.pythonic_config.DistillationConfig"]], "knowledgedistillationlossconfig (class in neural_compressor.conf.pythonic_config)": [[229, "neural_compressor.conf.pythonic_config.KnowledgeDistillationLossConfig"]], "options (class in neural_compressor.conf.pythonic_config)": [[229, "neural_compressor.conf.pythonic_config.Options"]], "quantizationconfig (class in neural_compressor.conf.pythonic_config)": [[229, "neural_compressor.conf.pythonic_config.QuantizationConfig"]], "weightpruningconfig (class in neural_compressor.conf.pythonic_config)": [[229, "neural_compressor.conf.pythonic_config.WeightPruningConfig"]], "neural_compressor.conf.pythonic_config": [[229, "module-neural_compressor.conf.pythonic_config"]], "accuracycriterion (class in neural_compressor.config)": [[230, "neural_compressor.config.AccuracyCriterion"]], "benchmarkconfig (class in neural_compressor.config)": [[230, "neural_compressor.config.BenchmarkConfig"]], "distillationconfig (class in neural_compressor.config)": [[230, "neural_compressor.config.DistillationConfig"]], "dotdict (class in neural_compressor.config)": [[230, "neural_compressor.config.DotDict"]], "exportconfig (class in neural_compressor.config)": [[230, "neural_compressor.config.ExportConfig"]], "hpoconfig (class in neural_compressor.config)": [[230, "neural_compressor.config.HPOConfig"]], "intermediatelayersknowledgedistillationlossconfig (class in neural_compressor.config)": [[230, "neural_compressor.config.IntermediateLayersKnowledgeDistillationLossConfig"]], "keras (class in neural_compressor.config)": [[230, "neural_compressor.config.Keras"]], "knowledgedistillationlossconfig (class in neural_compressor.config)": [[230, "neural_compressor.config.KnowledgeDistillationLossConfig"]], "mxnet (class in neural_compressor.config)": [[230, "neural_compressor.config.MXNet"]], "mixedprecisionconfig (class in neural_compressor.config)": [[230, "neural_compressor.config.MixedPrecisionConfig"]], "nasconfig (class in neural_compressor.config)": [[230, "neural_compressor.config.NASConfig"]], "onnx (class in neural_compressor.config)": [[230, "neural_compressor.config.ONNX"]], "onnxqlinear2qdqconfig (class in neural_compressor.config)": [[230, "neural_compressor.config.ONNXQlinear2QDQConfig"]], "options (class in neural_compressor.config)": [[230, "neural_compressor.config.Options"]], "posttrainingquantconfig (class in neural_compressor.config)": [[230, "neural_compressor.config.PostTrainingQuantConfig"]], "pytorch (class in neural_compressor.config)": [[230, "neural_compressor.config.PyTorch"]], "quantizationawaretrainingconfig (class in neural_compressor.config)": [[230, "neural_compressor.config.QuantizationAwareTrainingConfig"]], "selfknowledgedistillationlossconfig (class in neural_compressor.config)": [[230, "neural_compressor.config.SelfKnowledgeDistillationLossConfig"]], "tf2onnxconfig (class in neural_compressor.config)": [[230, "neural_compressor.config.TF2ONNXConfig"]], "tensorflow (class in neural_compressor.config)": [[230, "neural_compressor.config.TensorFlow"]], "torch2onnxconfig (class in neural_compressor.config)": [[230, "neural_compressor.config.Torch2ONNXConfig"]], "tuningcriterion (class in neural_compressor.config)": [[230, "neural_compressor.config.TuningCriterion"]], "weightpruningconfig (class in neural_compressor.config)": [[230, "neural_compressor.config.WeightPruningConfig"]], "neural_compressor.config": [[230, "module-neural_compressor.config"]], "neural_compressor.contrib": [[231, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[232, "module-neural_compressor.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.contrib.strategy.sigopt)": [[233, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.sigopt": [[233, "module-neural_compressor.contrib.strategy.sigopt"]], "tpetunestrategy (class in neural_compressor.contrib.strategy.tpe)": [[234, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[234, "module-neural_compressor.contrib.strategy.tpe"]], "basedataloader (class in neural_compressor.data.dataloaders.base_dataloader)": [[235, "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader"]], "neural_compressor.data.dataloaders.base_dataloader": [[235, "module-neural_compressor.data.dataloaders.base_dataloader"]], "dataloader (class in neural_compressor.data.dataloaders.dataloader)": [[236, "neural_compressor.data.dataloaders.dataloader.DataLoader"]], "check_dataloader() (in module neural_compressor.data.dataloaders.dataloader)": [[236, "neural_compressor.data.dataloaders.dataloader.check_dataloader"]], "neural_compressor.data.dataloaders.dataloader": [[236, "module-neural_compressor.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.data.dataloaders.default_dataloader)": [[237, "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader"]], "default_collate() (in module neural_compressor.data.dataloaders.default_dataloader)": [[237, "neural_compressor.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.data.dataloaders.default_dataloader": [[237, "module-neural_compressor.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.data.dataloaders.fetcher)": [[238, "neural_compressor.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.data.dataloaders.fetcher)": [[238, "neural_compressor.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.data.dataloaders.fetcher)": [[238, "neural_compressor.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.data.dataloaders.fetcher": [[238, "module-neural_compressor.data.dataloaders.fetcher"]], "neural_compressor.data.dataloaders": [[239, "module-neural_compressor.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.data.dataloaders.mxnet_dataloader)": [[240, "neural_compressor.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[240, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[241, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[241, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[241, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.data.dataloaders.pytorch_dataloader)": [[242, "neural_compressor.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[242, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.data.dataloaders.sampler)": [[243, "neural_compressor.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.data.dataloaders.sampler)": [[243, "neural_compressor.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.data.dataloaders.sampler)": [[243, "neural_compressor.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.data.dataloaders.sampler)": [[243, "neural_compressor.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.data.dataloaders.sampler": [[243, "module-neural_compressor.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[244, "neural_compressor.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[244, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[244, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[244, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[244, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.data.datasets.bert_dataset)": [[245, "neural_compressor.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[245, "neural_compressor.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.data.datasets.bert_dataset)": [[245, "neural_compressor.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[245, "neural_compressor.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[245, "neural_compressor.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[245, "neural_compressor.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.data.datasets.bert_dataset)": [[245, "neural_compressor.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.data.datasets.bert_dataset)": [[245, "neural_compressor.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.data.datasets.bert_dataset": [[245, "module-neural_compressor.data.datasets.bert_dataset"]], "coconpy (class in neural_compressor.data.datasets.coco_dataset)": [[246, "neural_compressor.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.data.datasets.coco_dataset)": [[246, "neural_compressor.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.data.datasets.coco_dataset)": [[246, "neural_compressor.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.data.datasets.coco_dataset)": [[246, "neural_compressor.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.data.datasets.coco_dataset": [[246, "module-neural_compressor.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.data.datasets.dataset)": [[247, "neural_compressor.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.data.datasets.dataset)": [[247, "neural_compressor.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.data.datasets.dataset)": [[247, "neural_compressor.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.data.datasets.dataset)": [[247, "neural_compressor.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.data.datasets.dataset)": [[247, "neural_compressor.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.data.datasets.dataset)": [[247, "neural_compressor.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.data.datasets.dataset)": [[247, "neural_compressor.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.data.datasets.dataset)": [[247, "neural_compressor.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.data.datasets.dataset)": [[247, "neural_compressor.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.data.datasets.dataset)": [[247, "neural_compressor.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.data.datasets.dataset)": [[247, "neural_compressor.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.data.datasets.dataset)": [[247, "neural_compressor.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.data.datasets.dataset)": [[247, "neural_compressor.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.data.datasets.dataset)": [[247, "neural_compressor.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.data.datasets.dataset)": [[247, "neural_compressor.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.data.datasets.dataset)": [[247, "neural_compressor.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.data.datasets.dataset)": [[247, "neural_compressor.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.data.datasets.dataset)": [[247, "neural_compressor.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.data.datasets.dataset)": [[247, "neural_compressor.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.data.datasets.dataset)": [[247, "neural_compressor.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.data.datasets.dataset)": [[247, "neural_compressor.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.data.datasets.dataset)": [[247, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.datasets.dataset)": [[247, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflow (class in neural_compressor.data.datasets.dataset)": [[247, "neural_compressor.data.datasets.dataset.Tensorflow"]], "tensorflowcifar10 (class in neural_compressor.data.datasets.dataset)": [[247, "neural_compressor.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.data.datasets.dataset)": [[247, "neural_compressor.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.data.datasets.dataset)": [[247, "neural_compressor.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.data.datasets.dataset)": [[247, "neural_compressor.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagerecord (class in neural_compressor.data.datasets.dataset)": [[247, "neural_compressor.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.data.datasets.dataset)": [[247, "neural_compressor.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.data.datasets.dataset)": [[247, "neural_compressor.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.data.datasets.dataset)": [[247, "neural_compressor.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.data.datasets.dataset)": [[247, "neural_compressor.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.data.datasets.dataset)": [[247, "neural_compressor.data.datasets.dataset.check_integrity"]], "dataset_registry() (in module neural_compressor.data.datasets.dataset)": [[247, "neural_compressor.data.datasets.dataset.dataset_registry"]], "download_url() (in module neural_compressor.data.datasets.dataset)": [[247, "neural_compressor.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.data.datasets.dataset)": [[247, "neural_compressor.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.data.datasets.dataset)": [[247, "neural_compressor.data.datasets.dataset.gen_bar_updater"]], "neural_compressor.data.datasets.dataset": [[247, "module-neural_compressor.data.datasets.dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset)": [[248, "neural_compressor.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset": [[248, "module-neural_compressor.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[249, "neural_compressor.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[249, "neural_compressor.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[249, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[250, "neural_compressor.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[250, "neural_compressor.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[250, "neural_compressor.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[250, "neural_compressor.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[250, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[250, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.data.datasets.imagenet_dataset": [[250, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[251, "module-neural_compressor.data.datasets"]], "styletransferdataset (class in neural_compressor.data.datasets.style_transfer_dataset)": [[252, "neural_compressor.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.data.datasets.style_transfer_dataset": [[252, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.data.filters.coco_filter)": [[253, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.data.filters.coco_filter)": [[253, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.coco_filter": [[253, "module-neural_compressor.data.filters.coco_filter"]], "filters (class in neural_compressor.data.filters.filter)": [[254, "neural_compressor.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.data.filters.filter)": [[254, "neural_compressor.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.data.filters.filter)": [[254, "neural_compressor.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.data.filters.filter)": [[254, "neural_compressor.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.data.filters.filter)": [[254, "neural_compressor.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.data.filters.filter)": [[254, "neural_compressor.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.data.filters.filter)": [[254, "neural_compressor.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.data.filters.filter)": [[254, "neural_compressor.data.filters.filter.filter_registry"]], "neural_compressor.data.filters.filter": [[254, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[255, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[256, "module-neural_compressor.data"]], "parsedecodecocotransform (class in neural_compressor.data.transforms.coco_transform)": [[257, "neural_compressor.data.transforms.coco_transform.ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.coco_transform": [[257, "module-neural_compressor.data.transforms.coco_transform"]], "bilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[258, "neural_compressor.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.data.transforms.imagenet_transform)": [[258, "neural_compressor.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[258, "neural_compressor.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[258, "neural_compressor.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.data.transforms.imagenet_transform)": [[258, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[258, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.data.transforms.imagenet_transform)": [[258, "neural_compressor.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.data.transforms.imagenet_transform)": [[258, "neural_compressor.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[258, "neural_compressor.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "tensorflowshiftrescale (class in neural_compressor.data.transforms.imagenet_transform)": [[258, "neural_compressor.data.transforms.imagenet_transform.TensorflowShiftRescale"]], "tensorflowtransposelastchannel (class in neural_compressor.data.transforms.imagenet_transform)": [[258, "neural_compressor.data.transforms.imagenet_transform.TensorflowTransposeLastChannel"]], "neural_compressor.data.transforms.imagenet_transform": [[258, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[259, "module-neural_compressor.data.transforms"]], "postprocess (class in neural_compressor.data.transforms.postprocess)": [[260, "neural_compressor.data.transforms.postprocess.Postprocess"]], "neural_compressor.data.transforms.postprocess": [[260, "module-neural_compressor.data.transforms.postprocess"]], "basictokenizer (class in neural_compressor.data.transforms.tokenization)": [[261, "neural_compressor.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.data.transforms.tokenization)": [[261, "neural_compressor.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.data.transforms.tokenization)": [[261, "neural_compressor.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.data.transforms.tokenization)": [[261, "neural_compressor.data.transforms.tokenization.convert_by_vocab"]], "convert_to_unicode() (in module neural_compressor.data.transforms.tokenization)": [[261, "neural_compressor.data.transforms.tokenization.convert_to_unicode"]], "load_vocab() (in module neural_compressor.data.transforms.tokenization)": [[261, "neural_compressor.data.transforms.tokenization.load_vocab"]], "neural_compressor.data.transforms.tokenization": [[261, "module-neural_compressor.data.transforms.tokenization"]], "whitespace_tokenize() (in module neural_compressor.data.transforms.tokenization)": [[261, "neural_compressor.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.data.transforms.transform)": [[262, "neural_compressor.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.data.transforms.transform)": [[262, "neural_compressor.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.data.transforms.transform)": [[262, "neural_compressor.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.data.transforms.transform)": [[262, "neural_compressor.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.data.transforms.transform)": [[262, "neural_compressor.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.data.transforms.transform)": [[262, "neural_compressor.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.data.transforms.transform)": [[262, "neural_compressor.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.data.transforms.transform)": [[262, "neural_compressor.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.data.transforms.transform)": [[262, "neural_compressor.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.data.transforms.transform)": [[262, "neural_compressor.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.data.transforms.transform)": [[262, "neural_compressor.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.data.transforms.transform)": [[262, "neural_compressor.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.data.transforms.transform)": [[262, "neural_compressor.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.data.transforms.transform)": [[262, "neural_compressor.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[262, "neural_compressor.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.data.transforms.transform)": [[262, "neural_compressor.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.data.transforms.transform)": [[262, "neural_compressor.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.data.transforms.transform)": [[262, "neural_compressor.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.data.transforms.transform)": [[262, "neural_compressor.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.data.transforms.transform)": [[262, "neural_compressor.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[262, "neural_compressor.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.data.transforms.transform)": [[262, "neural_compressor.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.data.transforms.transform)": [[262, "neural_compressor.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.data.transforms.transform)": [[262, "neural_compressor.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.data.transforms.transform)": [[262, "neural_compressor.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.data.transforms.transform)": [[262, "neural_compressor.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.data.transforms.transform)": [[262, "neural_compressor.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.data.transforms.transform)": [[262, "neural_compressor.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.data.transforms.transform)": [[262, "neural_compressor.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.data.transforms.transform)": [[262, "neural_compressor.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.data.transforms.transform)": [[262, "neural_compressor.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.transforms.transform)": [[262, "neural_compressor.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.data.transforms.transform)": [[262, "neural_compressor.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.data.transforms.transform)": [[262, "neural_compressor.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[262, "neural_compressor.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.data.transforms.transform)": [[262, "neural_compressor.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.data.transforms.transform)": [[262, "neural_compressor.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.data.transforms.transform)": [[262, "neural_compressor.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.data.transforms.transform)": [[262, "neural_compressor.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.data.transforms.transform)": [[262, "neural_compressor.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.data.transforms.transform)": [[262, "neural_compressor.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.data.transforms.transform)": [[262, "neural_compressor.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.data.transforms.transform)": [[262, "neural_compressor.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.data.transforms.transform)": [[262, "neural_compressor.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.data.transforms.transform)": [[262, "neural_compressor.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.data.transforms.transform)": [[262, "neural_compressor.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.data.transforms.transform)": [[262, "neural_compressor.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.data.transforms.transform)": [[262, "neural_compressor.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.data.transforms.transform)": [[262, "neural_compressor.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.data.transforms.transform)": [[262, "neural_compressor.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.data.transforms.transform)": [[262, "neural_compressor.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.data.transforms.transform)": [[262, "neural_compressor.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.data.transforms.transform)": [[262, "neural_compressor.data.transforms.transform.TRANSFORMS"], [262, "neural_compressor.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[262, "neural_compressor.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[262, "neural_compressor.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.data.transforms.transform)": [[262, "neural_compressor.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.data.transforms.transform)": [[262, "neural_compressor.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.data.transforms.transform)": [[262, "neural_compressor.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.data.transforms.transform)": [[262, "neural_compressor.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.data.transforms.transform)": [[262, "neural_compressor.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.data.transforms.transform)": [[262, "neural_compressor.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.data.transforms.transform)": [[262, "neural_compressor.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.data.transforms.transform)": [[262, "neural_compressor.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.data.transforms.transform)": [[262, "neural_compressor.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.data.transforms.transform)": [[262, "neural_compressor.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.data.transforms.transform)": [[262, "neural_compressor.data.transforms.transform.get_final_text"]], "get_torchvision_map() (in module neural_compressor.data.transforms.transform)": [[262, "neural_compressor.data.transforms.transform.get_torchvision_map"]], "neural_compressor.data.transforms.transform": [[262, "module-neural_compressor.data.transforms.transform"]], "read_squad_examples() (in module neural_compressor.data.transforms.transform)": [[262, "neural_compressor.data.transforms.transform.read_squad_examples"]], "transform_registry() (in module neural_compressor.data.transforms.transform)": [[262, "neural_compressor.data.transforms.transform.transform_registry"]], "benchmark (class in neural_compressor.experimental.benchmark)": [[263, "neural_compressor.experimental.benchmark.Benchmark"]], "get_architecture() (in module neural_compressor.experimental.benchmark)": [[263, "neural_compressor.experimental.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.experimental.benchmark)": [[263, "neural_compressor.experimental.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.experimental.benchmark)": [[263, "neural_compressor.experimental.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.experimental.benchmark)": [[263, "neural_compressor.experimental.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.experimental.benchmark)": [[263, "neural_compressor.experimental.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.experimental.benchmark)": [[263, "neural_compressor.experimental.benchmark.get_threads_per_core"]], "neural_compressor.experimental.benchmark": [[263, "module-neural_compressor.experimental.benchmark"]], "set_all_env_var() (in module neural_compressor.experimental.benchmark)": [[263, "neural_compressor.experimental.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.experimental.benchmark)": [[263, "neural_compressor.experimental.benchmark.set_env_var"]], "criterions (class in neural_compressor.experimental.common.criterion)": [[264, "neural_compressor.experimental.common.criterion.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[264, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.experimental.common.criterion)": [[264, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[264, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss"]], "pytorchcriterions (class in neural_compressor.experimental.common.criterion)": [[264, "neural_compressor.experimental.common.criterion.PyTorchCriterions"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[264, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[264, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[264, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[264, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[264, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss"]], "tensorflowcriterions (class in neural_compressor.experimental.common.criterion)": [[264, "neural_compressor.experimental.common.criterion.TensorflowCriterions"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.experimental.common.criterion)": [[264, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal"]], "criterion_registry() (in module neural_compressor.experimental.common.criterion)": [[264, "neural_compressor.experimental.common.criterion.criterion_registry"]], "neural_compressor.experimental.common.criterion": [[264, "module-neural_compressor.experimental.common.criterion"]], "dataloader (class in neural_compressor.experimental.common.dataloader)": [[265, "neural_compressor.experimental.common.dataloader.DataLoader"]], "neural_compressor.experimental.common.dataloader": [[265, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[266, "module-neural_compressor.experimental.common"]], "metric (class in neural_compressor.experimental.common.metric)": [[267, "neural_compressor.experimental.common.metric.Metric"]], "neural_compressor.experimental.common.metric": [[267, "module-neural_compressor.experimental.common.metric"]], "model (class in neural_compressor.experimental.common.model)": [[268, "neural_compressor.experimental.common.model.Model"]], "neural_compressor.experimental.common.model": [[268, "module-neural_compressor.experimental.common.model"]], "set_backend() (in module neural_compressor.experimental.common.model)": [[268, "neural_compressor.experimental.common.model.set_backend"]], "optimizers (class in neural_compressor.experimental.common.optimizer)": [[269, "neural_compressor.experimental.common.optimizer.Optimizers"]], "pytorchoptimizers (class in neural_compressor.experimental.common.optimizer)": [[269, "neural_compressor.experimental.common.optimizer.PyTorchOptimizers"]], "pytorchsgd (class in neural_compressor.experimental.common.optimizer)": [[269, "neural_compressor.experimental.common.optimizer.PyTorchSGD"]], "tensorflowadamw (class in neural_compressor.experimental.common.optimizer)": [[269, "neural_compressor.experimental.common.optimizer.TensorFlowAdamW"]], "tensorflowsgd (class in neural_compressor.experimental.common.optimizer)": [[269, "neural_compressor.experimental.common.optimizer.TensorFlowSGD"]], "tensorflowoptimizers (class in neural_compressor.experimental.common.optimizer)": [[269, "neural_compressor.experimental.common.optimizer.TensorflowOptimizers"]], "neural_compressor.experimental.common.optimizer": [[269, "module-neural_compressor.experimental.common.optimizer"]], "optimizer_registry() (in module neural_compressor.experimental.common.optimizer)": [[269, "neural_compressor.experimental.common.optimizer.optimizer_registry"]], "postprocess (class in neural_compressor.experimental.common.postprocess)": [[270, "neural_compressor.experimental.common.postprocess.Postprocess"]], "neural_compressor.experimental.common.postprocess": [[270, "module-neural_compressor.experimental.common.postprocess"]], "get_activation() (in module neural_compressor.experimental.common.torch_utils)": [[271, "neural_compressor.experimental.common.torch_utils.get_activation"]], "neural_compressor.experimental.common.torch_utils": [[271, "module-neural_compressor.experimental.common.torch_utils"]], "record_output() (in module neural_compressor.experimental.common.torch_utils)": [[271, "neural_compressor.experimental.common.torch_utils.record_output"]], "component (class in neural_compressor.experimental.component)": [[272, "neural_compressor.experimental.component.Component"]], "neural_compressor.experimental.component": [[272, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.compression": [[273, "module-neural_compressor.experimental.compression"]], "neural_compressor.experimental.contrib": [[274, "module-neural_compressor.experimental.contrib"]], "neural_compressor.experimental.contrib.strategy": [[275, "module-neural_compressor.experimental.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.experimental.contrib.strategy.sigopt)": [[276, "neural_compressor.experimental.contrib.strategy.sigopt.SigOptTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[276, "module-neural_compressor.experimental.contrib.strategy.sigopt"]], "tpetunestrategy (class in neural_compressor.experimental.contrib.strategy.tpe)": [[277, "neural_compressor.experimental.contrib.strategy.tpe.TpeTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.tpe": [[277, "module-neural_compressor.experimental.contrib.strategy.tpe"]], "basedataloader (class in neural_compressor.experimental.data.dataloaders.base_dataloader)": [[278, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[278, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[279, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.experimental.data.dataloaders.default_dataloader)": [[280, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader"]], "default_collate() (in module neural_compressor.experimental.data.dataloaders.default_dataloader)": [[280, "neural_compressor.experimental.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[280, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[281, "neural_compressor.experimental.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[281, "neural_compressor.experimental.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[281, "neural_compressor.experimental.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[281, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[282, "module-neural_compressor.experimental.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.experimental.data.dataloaders.mxnet_dataloader)": [[283, "neural_compressor.experimental.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[283, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[284, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[284, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[284, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.experimental.data.dataloaders.pytorch_dataloader)": [[285, "neural_compressor.experimental.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[285, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[286, "neural_compressor.experimental.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[286, "neural_compressor.experimental.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[286, "neural_compressor.experimental.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[286, "neural_compressor.experimental.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.sampler": [[286, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[287, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[287, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[287, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[287, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[287, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[288, "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[288, "neural_compressor.experimental.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[288, "neural_compressor.experimental.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[288, "neural_compressor.experimental.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[288, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[288, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[288, "neural_compressor.experimental.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[288, "neural_compressor.experimental.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[288, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "coconpy (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[289, "neural_compressor.experimental.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[289, "neural_compressor.experimental.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[289, "neural_compressor.experimental.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[289, "neural_compressor.experimental.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[289, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[290, "neural_compressor.experimental.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[290, "neural_compressor.experimental.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.experimental.data.datasets.dataset)": [[290, "neural_compressor.experimental.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.experimental.data.datasets.dataset)": [[290, "neural_compressor.experimental.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[290, "neural_compressor.experimental.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[290, "neural_compressor.experimental.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.experimental.data.datasets.dataset)": [[290, "neural_compressor.experimental.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.experimental.data.datasets.dataset)": [[290, "neural_compressor.experimental.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[290, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[290, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[290, "neural_compressor.experimental.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[290, "neural_compressor.experimental.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[290, "neural_compressor.experimental.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[290, "neural_compressor.experimental.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[290, "neural_compressor.experimental.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[290, "neural_compressor.experimental.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[290, "neural_compressor.experimental.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[290, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[290, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[290, "neural_compressor.experimental.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[290, "neural_compressor.experimental.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.experimental.data.datasets.dataset)": [[290, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.datasets.dataset)": [[290, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflowcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[290, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[290, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[290, "neural_compressor.experimental.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[290, "neural_compressor.experimental.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[290, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageFolder"]], "tensorflowimagerecord (class in neural_compressor.experimental.data.datasets.dataset)": [[290, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[290, "neural_compressor.experimental.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.experimental.data.datasets.dataset)": [[290, "neural_compressor.experimental.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.experimental.data.datasets.dataset)": [[290, "neural_compressor.experimental.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.experimental.data.datasets.dataset)": [[290, "neural_compressor.experimental.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.experimental.data.datasets.dataset)": [[290, "neural_compressor.experimental.data.datasets.dataset.check_integrity"]], "dataset_registry() (in module neural_compressor.experimental.data.datasets.dataset)": [[290, "neural_compressor.experimental.data.datasets.dataset.dataset_registry"]], "download_url() (in module neural_compressor.experimental.data.datasets.dataset)": [[290, "neural_compressor.experimental.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.experimental.data.datasets.dataset)": [[290, "neural_compressor.experimental.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.experimental.data.datasets.dataset)": [[290, "neural_compressor.experimental.data.datasets.dataset.gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dataset": [[290, "module-neural_compressor.experimental.data.datasets.dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset)": [[291, "neural_compressor.experimental.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[291, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[292, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[292, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[292, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[293, "neural_compressor.experimental.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[293, "neural_compressor.experimental.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[293, "neural_compressor.experimental.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[293, "neural_compressor.experimental.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[293, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[293, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[293, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[294, "module-neural_compressor.experimental.data.datasets"]], "styletransferdataset (class in neural_compressor.experimental.data.datasets.style_transfer_dataset)": [[295, "neural_compressor.experimental.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[295, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[296, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[296, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.coco_filter": [[296, "module-neural_compressor.experimental.data.filters.coco_filter"]], "filters (class in neural_compressor.experimental.data.filters.filter)": [[297, "neural_compressor.experimental.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.experimental.data.filters.filter)": [[297, "neural_compressor.experimental.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.experimental.data.filters.filter)": [[297, "neural_compressor.experimental.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.experimental.data.filters.filter)": [[297, "neural_compressor.experimental.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.experimental.data.filters.filter)": [[297, "neural_compressor.experimental.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.experimental.data.filters.filter)": [[297, "neural_compressor.experimental.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.experimental.data.filters.filter)": [[297, "neural_compressor.experimental.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.experimental.data.filters.filter)": [[297, "neural_compressor.experimental.data.filters.filter.filter_registry"]], "neural_compressor.experimental.data.filters.filter": [[297, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[298, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[299, "module-neural_compressor.experimental.data"]], "bilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[300, "neural_compressor.experimental.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[300, "neural_compressor.experimental.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[300, "neural_compressor.experimental.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[300, "neural_compressor.experimental.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[300, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[300, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[300, "neural_compressor.experimental.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[300, "neural_compressor.experimental.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[300, "neural_compressor.experimental.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[300, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[301, "module-neural_compressor.experimental.data.transforms"]], "basictokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[302, "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[302, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[302, "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[302, "neural_compressor.experimental.data.transforms.tokenization.convert_by_vocab"]], "convert_to_unicode() (in module neural_compressor.experimental.data.transforms.tokenization)": [[302, "neural_compressor.experimental.data.transforms.tokenization.convert_to_unicode"]], "load_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[302, "neural_compressor.experimental.data.transforms.tokenization.load_vocab"]], "neural_compressor.experimental.data.transforms.tokenization": [[302, "module-neural_compressor.experimental.data.transforms.tokenization"]], "whitespace_tokenize() (in module neural_compressor.experimental.data.transforms.tokenization)": [[302, "neural_compressor.experimental.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.experimental.data.transforms.transform)": [[303, "neural_compressor.experimental.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.experimental.data.transforms.transform)": [[303, "neural_compressor.experimental.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.experimental.data.transforms.transform)": [[303, "neural_compressor.experimental.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[303, "neural_compressor.experimental.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.experimental.data.transforms.transform)": [[303, "neural_compressor.experimental.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[303, "neural_compressor.experimental.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[303, "neural_compressor.experimental.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[303, "neural_compressor.experimental.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.experimental.data.transforms.transform)": [[303, "neural_compressor.experimental.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[303, "neural_compressor.experimental.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[303, "neural_compressor.experimental.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[303, "neural_compressor.experimental.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.experimental.data.transforms.transform)": [[303, "neural_compressor.experimental.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[303, "neural_compressor.experimental.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[303, "neural_compressor.experimental.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[303, "neural_compressor.experimental.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.experimental.data.transforms.transform)": [[303, "neural_compressor.experimental.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.experimental.data.transforms.transform)": [[303, "neural_compressor.experimental.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[303, "neural_compressor.experimental.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[303, "neural_compressor.experimental.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[303, "neural_compressor.experimental.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.experimental.data.transforms.transform)": [[303, "neural_compressor.experimental.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.experimental.data.transforms.transform)": [[303, "neural_compressor.experimental.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[303, "neural_compressor.experimental.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.experimental.data.transforms.transform)": [[303, "neural_compressor.experimental.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.experimental.data.transforms.transform)": [[303, "neural_compressor.experimental.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[303, "neural_compressor.experimental.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[303, "neural_compressor.experimental.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[303, "neural_compressor.experimental.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[303, "neural_compressor.experimental.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[303, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[303, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[303, "neural_compressor.experimental.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[303, "neural_compressor.experimental.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[303, "neural_compressor.experimental.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[303, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[303, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[303, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[303, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[303, "neural_compressor.experimental.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.experimental.data.transforms.transform)": [[303, "neural_compressor.experimental.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.experimental.data.transforms.transform)": [[303, "neural_compressor.experimental.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.experimental.data.transforms.transform)": [[303, "neural_compressor.experimental.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[303, "neural_compressor.experimental.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[303, "neural_compressor.experimental.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[303, "neural_compressor.experimental.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[303, "neural_compressor.experimental.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[303, "neural_compressor.experimental.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.experimental.data.transforms.transform)": [[303, "neural_compressor.experimental.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[303, "neural_compressor.experimental.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.experimental.data.transforms.transform)": [[303, "neural_compressor.experimental.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.experimental.data.transforms.transform)": [[303, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.experimental.data.transforms.transform)": [[303, "neural_compressor.experimental.data.transforms.transform.TRANSFORMS"], [303, "neural_compressor.experimental.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[303, "neural_compressor.experimental.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[303, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[303, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[303, "neural_compressor.experimental.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.experimental.data.transforms.transform)": [[303, "neural_compressor.experimental.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[303, "neural_compressor.experimental.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[303, "neural_compressor.experimental.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[303, "neural_compressor.experimental.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.experimental.data.transforms.transform)": [[303, "neural_compressor.experimental.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.experimental.data.transforms.transform)": [[303, "neural_compressor.experimental.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.experimental.data.transforms.transform)": [[303, "neural_compressor.experimental.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.transforms.transform)": [[303, "neural_compressor.experimental.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.experimental.data.transforms.transform)": [[303, "neural_compressor.experimental.data.transforms.transform.get_final_text"]], "get_torchvision_map() (in module neural_compressor.experimental.data.transforms.transform)": [[303, "neural_compressor.experimental.data.transforms.transform.get_torchvision_map"]], "neural_compressor.experimental.data.transforms.transform": [[303, "module-neural_compressor.experimental.data.transforms.transform"]], "read_squad_examples() (in module neural_compressor.experimental.data.transforms.transform)": [[303, "neural_compressor.experimental.data.transforms.transform.read_squad_examples"]], "transform_registry() (in module neural_compressor.experimental.data.transforms.transform)": [[303, "neural_compressor.experimental.data.transforms.transform.transform_registry"]], "distillation (class in neural_compressor.experimental.distillation)": [[304, "neural_compressor.experimental.distillation.Distillation"]], "_epoch_ran (neural_compressor.experimental.distillation.distillation attribute)": [[304, "neural_compressor.experimental.distillation.Distillation._epoch_ran"]], "best_model (neural_compressor.experimental.distillation.distillation attribute)": [[304, "neural_compressor.experimental.distillation.Distillation.best_model"]], "best_score (neural_compressor.experimental.distillation.distillation attribute)": [[304, "neural_compressor.experimental.distillation.Distillation.best_score"]], "eval_frequency (neural_compressor.experimental.distillation.distillation attribute)": [[304, "neural_compressor.experimental.distillation.Distillation.eval_frequency"]], "neural_compressor.experimental.distillation": [[304, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[305, "module-neural_compressor.experimental.export"]], "check_model() (in module neural_compressor.experimental.export.qlinear2qdq)": [[306, "neural_compressor.experimental.export.qlinear2qdq.check_model"]], "neural_compressor.experimental.export.qlinear2qdq": [[306, "module-neural_compressor.experimental.export.qlinear2qdq"]], "onnx_qlinear_to_qdq() (in module neural_compressor.experimental.export.qlinear2qdq)": [[306, "neural_compressor.experimental.export.qlinear2qdq.onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.tf2onnx": [[307, "module-neural_compressor.experimental.export.tf2onnx"]], "tf_to_fp32_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[307, "neural_compressor.experimental.export.tf2onnx.tf_to_fp32_onnx"]], "tf_to_int8_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[307, "neural_compressor.experimental.export.tf2onnx.tf_to_int8_onnx"]], "dynamic_quant_export() (in module neural_compressor.experimental.export.torch2onnx)": [[308, "neural_compressor.experimental.export.torch2onnx.dynamic_quant_export"]], "get_node_mapping() (in module neural_compressor.experimental.export.torch2onnx)": [[308, "neural_compressor.experimental.export.torch2onnx.get_node_mapping"]], "get_quantizable_onnx_ops() (in module neural_compressor.experimental.export.torch2onnx)": [[308, "neural_compressor.experimental.export.torch2onnx.get_quantizable_onnx_ops"]], "neural_compressor.experimental.export.torch2onnx": [[308, "module-neural_compressor.experimental.export.torch2onnx"]], "static_quant_export() (in module neural_compressor.experimental.export.torch2onnx)": [[308, "neural_compressor.experimental.export.torch2onnx.static_quant_export"]], "torch_to_fp32_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[308, "neural_compressor.experimental.export.torch2onnx.torch_to_fp32_onnx"]], "torch_to_int8_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[308, "neural_compressor.experimental.export.torch2onnx.torch_to_int8_onnx"]], "graph_optimization (class in neural_compressor.experimental.graph_optimization)": [[309, "neural_compressor.experimental.graph_optimization.Graph_Optimization"]], "neural_compressor.experimental.graph_optimization": [[309, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[310, "module-neural_compressor.experimental"]], "bleu (class in neural_compressor.experimental.metric.bleu)": [[311, "neural_compressor.experimental.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.experimental.metric.bleu)": [[311, "neural_compressor.experimental.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.experimental.metric.bleu)": [[311, "neural_compressor.experimental.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.experimental.metric.bleu.bleu attribute)": [[311, "neural_compressor.experimental.metric.bleu.BLEU.labels"]], "neural_compressor.experimental.metric.bleu": [[311, "module-neural_compressor.experimental.metric.bleu"]], "nondigit_punct_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[311, "neural_compressor.experimental.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.experimental.metric.bleu.bleu attribute)": [[311, "neural_compressor.experimental.metric.bleu.BLEU.predictions"]], "punct_nondigit_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[311, "neural_compressor.experimental.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[311, "neural_compressor.experimental.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.experimental.metric.bleu_util)": [[312, "neural_compressor.experimental.metric.bleu_util.compute_bleu"]], "neural_compressor.experimental.metric.bleu_util": [[312, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[313, "module-neural_compressor.experimental.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.experimental.metric.coco_tools)": [[314, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.experimental.metric.coco_tools)": [[314, "neural_compressor.experimental.metric.coco_tools.COCOWrapper"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.experimental.metric.coco_tools)": [[314, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.experimental.metric.coco_tools)": [[314, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.experimental.metric.coco_tools)": [[314, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "dataset (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[314, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[314, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.experimental.metric.coco_tools": [[314, "module-neural_compressor.experimental.metric.coco_tools"]], "evaluate() (in module neural_compressor.experimental.metric.evaluate_squad)": [[315, "neural_compressor.experimental.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[315, "neural_compressor.experimental.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[315, "neural_compressor.experimental.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.evaluate_squad)": [[315, "neural_compressor.experimental.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.evaluate_squad": [[315, "module-neural_compressor.experimental.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.experimental.metric.f1)": [[316, "neural_compressor.experimental.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.experimental.metric.f1)": [[316, "neural_compressor.experimental.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.f1)": [[316, "neural_compressor.experimental.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[316, "module-neural_compressor.experimental.metric.f1"]], "normalize_answer() (in module neural_compressor.experimental.metric.f1)": [[316, "neural_compressor.experimental.metric.f1.normalize_answer"]], "neural_compressor.experimental.metric": [[317, "module-neural_compressor.experimental.metric"]], "accuracy (class in neural_compressor.experimental.metric.metric)": [[318, "neural_compressor.experimental.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.experimental.metric.metric)": [[318, "neural_compressor.experimental.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.experimental.metric.metric)": [[318, "neural_compressor.experimental.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.experimental.metric.metric)": [[318, "neural_compressor.experimental.metric.metric.F1"]], "generaltopk (class in neural_compressor.experimental.metric.metric)": [[318, "neural_compressor.experimental.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.experimental.metric.metric)": [[318, "neural_compressor.experimental.metric.metric.Loss"]], "mae (class in neural_compressor.experimental.metric.metric)": [[318, "neural_compressor.experimental.metric.metric.MAE"]], "metrics (class in neural_compressor.experimental.metric.metric)": [[318, "neural_compressor.experimental.metric.metric.METRICS"]], "mse (class in neural_compressor.experimental.metric.metric)": [[318, "neural_compressor.experimental.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.experimental.metric.metric)": [[318, "neural_compressor.experimental.metric.metric.MXNetMetrics"]], "onnxrtglue (class in neural_compressor.experimental.metric.metric)": [[318, "neural_compressor.experimental.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.experimental.metric.metric)": [[318, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.experimental.metric.metric)": [[318, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.experimental.metric.metric)": [[318, "neural_compressor.experimental.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.experimental.metric.metric)": [[318, "neural_compressor.experimental.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.experimental.metric.metric)": [[318, "neural_compressor.experimental.metric.metric.RMSE"]], "roc (class in neural_compressor.experimental.metric.metric)": [[318, "neural_compressor.experimental.metric.metric.ROC"]], "squadf1 (class in neural_compressor.experimental.metric.metric)": [[318, "neural_compressor.experimental.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.experimental.metric.metric)": [[318, "neural_compressor.experimental.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.experimental.metric.metric)": [[318, "neural_compressor.experimental.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.experimental.metric.metric)": [[318, "neural_compressor.experimental.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.experimental.metric.metric)": [[318, "neural_compressor.experimental.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.experimental.metric.metric)": [[318, "neural_compressor.experimental.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.experimental.metric.metric)": [[318, "neural_compressor.experimental.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.experimental.metric.metric)": [[318, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.experimental.metric.metric)": [[318, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.experimental.metric.metric.mae attribute)": [[318, "neural_compressor.experimental.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.experimental.metric.metric.mse attribute)": [[318, "neural_compressor.experimental.metric.metric.MSE.compare_label"]], "k (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[318, "neural_compressor.experimental.metric.metric.GeneralTopK.k"]], "k (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[318, "neural_compressor.experimental.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[318, "neural_compressor.experimental.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mae attribute)": [[318, "neural_compressor.experimental.metric.metric.MAE.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mse attribute)": [[318, "neural_compressor.experimental.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.experimental.metric.metric)": [[318, "neural_compressor.experimental.metric.metric.mIOU"]], "metric_registry() (in module neural_compressor.experimental.metric.metric)": [[318, "neural_compressor.experimental.metric.metric.metric_registry"]], "metrics (neural_compressor.experimental.metric.metric.metrics attribute)": [[318, "neural_compressor.experimental.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.experimental.metric.metric.mxnetmetrics attribute)": [[318, "neural_compressor.experimental.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtitmetrics attribute)": [[318, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtqlmetrics attribute)": [[318, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.pytorchmetrics attribute)": [[318, "neural_compressor.experimental.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.tensorflowmetrics attribute)": [[318, "neural_compressor.experimental.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.experimental.metric.metric.rmse attribute)": [[318, "neural_compressor.experimental.metric.metric.RMSE.mse"]], "neural_compressor.experimental.metric.metric": [[318, "module-neural_compressor.experimental.metric.metric"]], "num_correct (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[318, "neural_compressor.experimental.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[318, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[318, "neural_compressor.experimental.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[318, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[318, "neural_compressor.experimental.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mae attribute)": [[318, "neural_compressor.experimental.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mse attribute)": [[318, "neural_compressor.experimental.metric.metric.MSE.pred_list"]], "sample (neural_compressor.experimental.metric.metric.accuracy attribute)": [[318, "neural_compressor.experimental.metric.metric.Accuracy.sample"]], "sample (neural_compressor.experimental.metric.metric.loss attribute)": [[318, "neural_compressor.experimental.metric.metric.Loss.sample"]], "sum (neural_compressor.experimental.metric.metric.loss attribute)": [[318, "neural_compressor.experimental.metric.metric.Loss.sum"]], "mixedprecision (class in neural_compressor.experimental.mixed_precision)": [[319, "neural_compressor.experimental.mixed_precision.MixedPrecision"]], "neural_compressor.experimental.mixed_precision": [[319, "module-neural_compressor.experimental.mixed_precision"]], "modelconversion (class in neural_compressor.experimental.model_conversion)": [[320, "neural_compressor.experimental.model_conversion.ModelConversion"]], "neural_compressor.experimental.model_conversion": [[320, "module-neural_compressor.experimental.model_conversion"]], "basicnas (class in neural_compressor.experimental.nas.basic_nas)": [[321, "neural_compressor.experimental.nas.basic_nas.BasicNAS"]], "neural_compressor.experimental.nas.basic_nas": [[321, "module-neural_compressor.experimental.nas.basic_nas"]], "dynas (class in neural_compressor.experimental.nas.dynas)": [[322, "neural_compressor.experimental.nas.dynas.DyNAS"]], "neural_compressor.experimental.nas.dynas": [[322, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas": [[323, "module-neural_compressor.experimental.nas"]], "nas (class in neural_compressor.experimental.nas.nas)": [[324, "neural_compressor.experimental.nas.nas.NAS"]], "nasbase (class in neural_compressor.experimental.nas.nas)": [[324, "neural_compressor.experimental.nas.nas.NASBase"]], "neural_compressor.experimental.nas.nas": [[324, "module-neural_compressor.experimental.nas.nas"]], "create_search_space_pool() (in module neural_compressor.experimental.nas.nas_utils)": [[325, "neural_compressor.experimental.nas.nas_utils.create_search_space_pool"]], "find_pareto_front() (in module neural_compressor.experimental.nas.nas_utils)": [[325, "neural_compressor.experimental.nas.nas_utils.find_pareto_front"]], "nas_registry() (in module neural_compressor.experimental.nas.nas_utils)": [[325, "neural_compressor.experimental.nas.nas_utils.nas_registry"]], "neural_compressor.experimental.nas.nas_utils": [[325, "module-neural_compressor.experimental.nas.nas_utils"]], "bayesianoptimizationsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[326, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher"]], "gridsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[326, "neural_compressor.experimental.nas.search_algorithms.GridSearcher"]], "randomsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[326, "neural_compressor.experimental.nas.search_algorithms.RandomSearcher"]], "searcher (class in neural_compressor.experimental.nas.search_algorithms)": [[326, "neural_compressor.experimental.nas.search_algorithms.Searcher"]], "neural_compressor.experimental.nas.search_algorithms": [[326, "module-neural_compressor.experimental.nas.search_algorithms"]], "gradientsensitivitypruner (class in neural_compressor.experimental.pruner_legacy.gradient_sensitivity)": [[327, "neural_compressor.experimental.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[327, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"]], "grouplassopruner (class in neural_compressor.experimental.pruner_legacy.group_lasso)": [[328, "neural_compressor.experimental.pruner_legacy.group_lasso.GroupLassoPruner"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[328, "module-neural_compressor.experimental.pruner_legacy.group_lasso"]], "neural_compressor.experimental.pruner_legacy": [[329, "module-neural_compressor.experimental.pruner_legacy"]], "basicmagnitudepruner (class in neural_compressor.experimental.pruner_legacy.magnitude)": [[330, "neural_compressor.experimental.pruner_legacy.magnitude.BasicMagnitudePruner"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[330, "module-neural_compressor.experimental.pruner_legacy.magnitude"]], "patternlockpruner (class in neural_compressor.experimental.pruner_legacy.pattern_lock)": [[331, "neural_compressor.experimental.pruner_legacy.pattern_lock.PatternLockPruner"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[331, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"]], "pruner (class in neural_compressor.experimental.pruner_legacy.pruner)": [[332, "neural_compressor.experimental.pruner_legacy.pruner.Pruner"]], "neural_compressor.experimental.pruner_legacy.pruner": [[332, "module-neural_compressor.experimental.pruner_legacy.pruner"]], "pruner_registry() (in module neural_compressor.experimental.pruner_legacy.pruner)": [[332, "neural_compressor.experimental.pruner_legacy.pruner.pruner_registry"]], "pruning (class in neural_compressor.experimental.pruning)": [[333, "neural_compressor.experimental.pruning.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning)": [[333, "neural_compressor.experimental.pruning.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning.pruning attribute)": [[333, "neural_compressor.experimental.pruning.Pruning.conf"]], "neural_compressor.experimental.pruning": [[333, "module-neural_compressor.experimental.pruning"]], "pruners (neural_compressor.experimental.pruning.pruning attribute)": [[333, "neural_compressor.experimental.pruning.Pruning.pruners"]], "neural_compressor.experimental.pruning_recipes": [[334, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[335, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "patterns (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[336, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS"]], "patternbase (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[336, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[336, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "pattern_registry() (in module neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[336, "neural_compressor.experimental.pruning_recipes.patterns.pattern.pattern_registry"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns.pattern.patterns attribute)": [[336, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS.patterns"]], "tilepatternbase (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[337, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase"]], "tilepattern_1x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[337, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x1"]], "tilepattern_1x16 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[337, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x16"]], "tilepattern_1x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[337, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x2"]], "tilepattern_2x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[337, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_2x2"]], "tilepattern_4x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[337, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_4x1"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[337, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "pruning (class in neural_compressor.experimental.pruning_v2)": [[338, "neural_compressor.experimental.pruning_v2.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning_v2)": [[338, "neural_compressor.experimental.pruning_v2.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning_v2.pruning attribute)": [[338, "neural_compressor.experimental.pruning_v2.Pruning.conf"]], "neural_compressor.experimental.pruning_v2": [[338, "module-neural_compressor.experimental.pruning_v2"]], "pruners (neural_compressor.experimental.pruning_v2.pruning attribute)": [[338, "neural_compressor.experimental.pruning_v2.Pruning.pruners"]], "neural_compressor.experimental.pytorch_pruner": [[339, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[340, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "m (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[341, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.M"]], "n (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[341, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.N"]], "pattern (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[341, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern"]], "patternninm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[341, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM"]], "patternnxm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[341, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM"]], "block_size (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm attribute)": [[341, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.block_size"]], "get_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[341, "neural_compressor.experimental.pytorch_pruner.patterns.get_pattern"]], "is_global (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[341, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.is_global"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[341, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "pattern (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[341, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.pattern"]], "register_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[341, "neural_compressor.experimental.pytorch_pruner.patterns.register_pattern"]], "check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[342, "neural_compressor.experimental.pytorch_pruner.prune_utils.check_config"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[342, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "parse_not_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[342, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_not_to_prune"]], "parse_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[342, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_to_prune"]], "process_and_check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[342, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_and_check_config"]], "process_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[342, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_config"]], "reset_non_value_to_default() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[342, "neural_compressor.experimental.pytorch_pruner.prune_utils.reset_non_value_to_default"]], "magnitudepruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[343, "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner"]], "patternlockpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[343, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner"]], "pruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[343, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner"]], "snipmomentumpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[343, "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner"]], "snippruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[343, "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner"]], "config (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[343, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.config"]], "current_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[343, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.current_sparsity_ratio"]], "end_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[343, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.end_step"]], "get_pruner() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[343, "neural_compressor.experimental.pytorch_pruner.pruner.get_pruner"]], "global_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[343, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.global_step"]], "masks (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[343, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.masks"]], "max_sparsity_ratio_per_layer (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[343, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.max_sparsity_ratio_per_layer"]], "modules (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[343, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.modules"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[343, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "pattern (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[343, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.pattern"]], "register_pruners() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[343, "neural_compressor.experimental.pytorch_pruner.pruner.register_pruners"]], "scheduler (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[343, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scheduler"]], "scores (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[343, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scores"]], "start_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[343, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.start_step"]], "target_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[343, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.target_sparsity_ratio"]], "update_frequency_on_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[343, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.update_frequency_on_step"]], "pruning (class in neural_compressor.experimental.pytorch_pruner.pruning)": [[344, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning"]], "config_file_path (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[344, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.config_file_path"]], "model (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[344, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.model"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[344, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "pruner_info (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[344, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruner_info"]], "pruners (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[344, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruners"]], "iterativescheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[345, "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[345, "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler"]], "scheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[345, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler"]], "config (neural_compressor.experimental.pytorch_pruner.scheduler.scheduler attribute)": [[345, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler.config"]], "get_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[345, "neural_compressor.experimental.pytorch_pruner.scheduler.get_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[345, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "register_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[345, "neural_compressor.experimental.pytorch_pruner.scheduler.register_scheduler"]], "quantization (class in neural_compressor.experimental.quantization)": [[346, "neural_compressor.experimental.quantization.Quantization"]], "neural_compressor.experimental.quantization": [[346, "module-neural_compressor.experimental.quantization"]], "scheduler (class in neural_compressor.experimental.scheduler)": [[347, "neural_compressor.experimental.scheduler.Scheduler"]], "neural_compressor.experimental.scheduler": [[347, "module-neural_compressor.experimental.scheduler"]], "automixedprecisiontunestrategy (class in neural_compressor.experimental.strategy.auto_mixed_precision)": [[348, "neural_compressor.experimental.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[348, "module-neural_compressor.experimental.strategy.auto_mixed_precision"]], "basictunestrategy (class in neural_compressor.experimental.strategy.basic)": [[349, "neural_compressor.experimental.strategy.basic.BasicTuneStrategy"]], "neural_compressor.experimental.strategy.basic": [[349, "module-neural_compressor.experimental.strategy.basic"]], "bayesianoptimization (class in neural_compressor.experimental.strategy.bayesian)": [[350, "neural_compressor.experimental.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.experimental.strategy.bayesian)": [[350, "neural_compressor.experimental.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.experimental.strategy.bayesian)": [[350, "neural_compressor.experimental.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.experimental.strategy.bayesian)": [[350, "neural_compressor.experimental.strategy.bayesian.acq_max"]], "neural_compressor.experimental.strategy.bayesian": [[350, "module-neural_compressor.experimental.strategy.bayesian"]], "exhaustivetunestrategy (class in neural_compressor.experimental.strategy.exhaustive)": [[351, "neural_compressor.experimental.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.experimental.strategy.exhaustive": [[351, "module-neural_compressor.experimental.strategy.exhaustive"]], "neural_compressor.experimental.strategy": [[352, "module-neural_compressor.experimental.strategy"]], "msetunestrategy (class in neural_compressor.experimental.strategy.mse)": [[353, "neural_compressor.experimental.strategy.mse.MSETuneStrategy"]], "neural_compressor.experimental.strategy.mse": [[353, "module-neural_compressor.experimental.strategy.mse"]], "mse_v2tunestrategy (class in neural_compressor.experimental.strategy.mse_v2)": [[354, "neural_compressor.experimental.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.experimental.strategy.mse_v2": [[354, "module-neural_compressor.experimental.strategy.mse_v2"]], "randomtunestrategy (class in neural_compressor.experimental.strategy.random)": [[355, "neural_compressor.experimental.strategy.random.RandomTuneStrategy"]], "neural_compressor.experimental.strategy.random": [[355, "module-neural_compressor.experimental.strategy.random"]], "tunestrategy (class in neural_compressor.experimental.strategy.strategy)": [[356, "neural_compressor.experimental.strategy.strategy.TuneStrategy"]], "neural_compressor.experimental.strategy.strategy": [[356, "module-neural_compressor.experimental.strategy.strategy"]], "strategy_registry() (in module neural_compressor.experimental.strategy.strategy)": [[356, "neural_compressor.experimental.strategy.strategy.strategy_registry"]], "neural_compressor.experimental.strategy.utils.constant": [[357, "module-neural_compressor.experimental.strategy.utils.constant"]], "neural_compressor.experimental.strategy.utils": [[358, "module-neural_compressor.experimental.strategy.utils"]], "fallbacktuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[359, "neural_compressor.experimental.strategy.utils.tuning_sampler.FallbackTuningSampler"]], "modelwisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[359, "neural_compressor.experimental.strategy.utils.tuning_sampler.ModelWiseTuningSampler"]], "optypewisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[359, "neural_compressor.experimental.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler"]], "opwisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[359, "neural_compressor.experimental.strategy.utils.tuning_sampler.OpWiseTuningSampler"]], "smoothquantsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[359, "neural_compressor.experimental.strategy.utils.tuning_sampler.SmoothQuantSampler"]], "tuningorder (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[359, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningOrder"]], "tuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[359, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningSampler"]], "tuningsamplerregistry (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[359, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningSamplerRegistry"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[359, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"]], "tuningitem (class in neural_compressor.experimental.strategy.utils.tuning_space)": [[360, "neural_compressor.experimental.strategy.utils.tuning_space.TuningItem"]], "tuningspace (class in neural_compressor.experimental.strategy.utils.tuning_space)": [[360, "neural_compressor.experimental.strategy.utils.tuning_space.TuningSpace"]], "initial_tuning_cfg_with_quant_mode() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[360, "neural_compressor.experimental.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[360, "module-neural_compressor.experimental.strategy.utils.tuning_space"]], "pattern_to_internal() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[360, "neural_compressor.experimental.strategy.utils.tuning_space.pattern_to_internal"]], "pattern_to_path() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[360, "neural_compressor.experimental.strategy.utils.tuning_space.pattern_to_path"]], "quant_mode_from_pattern() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[360, "neural_compressor.experimental.strategy.utils.tuning_space.quant_mode_from_pattern"]], "optuningconfig (class in neural_compressor.experimental.strategy.utils.tuning_structs)": [[361, "neural_compressor.experimental.strategy.utils.tuning_structs.OpTuningConfig"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[361, "module-neural_compressor.experimental.strategy.utils.tuning_structs"]], "ordereddefaultdict (class in neural_compressor.experimental.strategy.utils.utility)": [[362, "neural_compressor.experimental.strategy.utils.utility.OrderedDefaultDict"]], "extract_data_type() (in module neural_compressor.experimental.strategy.utils.utility)": [[362, "neural_compressor.experimental.strategy.utils.utility.extract_data_type"]], "get_adaptor_name() (in module neural_compressor.experimental.strategy.utils.utility)": [[362, "neural_compressor.experimental.strategy.utils.utility.get_adaptor_name"]], "neural_compressor.experimental.strategy.utils.utility": [[362, "module-neural_compressor.experimental.strategy.utils.utility"]], "reverted_data_type() (in module neural_compressor.experimental.strategy.utils.utility)": [[362, "neural_compressor.experimental.strategy.utils.utility.reverted_data_type"]], "neural_compressor": [[363, "module-neural_compressor"]], "bleu (class in neural_compressor.metric.bleu)": [[364, "neural_compressor.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.metric.bleu)": [[364, "neural_compressor.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.metric.bleu)": [[364, "neural_compressor.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.metric.bleu.bleu attribute)": [[364, "neural_compressor.metric.bleu.BLEU.labels"]], "neural_compressor.metric.bleu": [[364, "module-neural_compressor.metric.bleu"]], "nondigit_punct_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[364, "neural_compressor.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.metric.bleu.bleu attribute)": [[364, "neural_compressor.metric.bleu.BLEU.predictions"]], "punct_nondigit_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[364, "neural_compressor.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[364, "neural_compressor.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.metric.bleu_util)": [[365, "neural_compressor.metric.bleu_util.compute_bleu"]], "neural_compressor.metric.bleu_util": [[365, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[366, "module-neural_compressor.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.metric.coco_tools)": [[367, "neural_compressor.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.metric.coco_tools)": [[367, "neural_compressor.metric.coco_tools.COCOWrapper"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.metric.coco_tools)": [[367, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.metric.coco_tools)": [[367, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.metric.coco_tools)": [[367, "neural_compressor.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "dataset (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[367, "neural_compressor.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[367, "neural_compressor.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.metric.coco_tools": [[367, "module-neural_compressor.metric.coco_tools"]], "evaluate() (in module neural_compressor.metric.evaluate_squad)": [[368, "neural_compressor.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.metric.evaluate_squad)": [[368, "neural_compressor.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.metric.evaluate_squad)": [[368, "neural_compressor.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.evaluate_squad)": [[368, "neural_compressor.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.metric.evaluate_squad": [[368, "module-neural_compressor.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.metric.f1)": [[369, "neural_compressor.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.metric.f1)": [[369, "neural_compressor.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.f1)": [[369, "neural_compressor.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[369, "module-neural_compressor.metric.f1"]], "normalize_answer() (in module neural_compressor.metric.f1)": [[369, "neural_compressor.metric.f1.normalize_answer"]], "neural_compressor.metric": [[370, "module-neural_compressor.metric"]], "accuracy (class in neural_compressor.metric.metric)": [[371, "neural_compressor.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.metric.metric)": [[371, "neural_compressor.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.metric.metric)": [[371, "neural_compressor.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.metric.metric)": [[371, "neural_compressor.metric.metric.F1"]], "generaltopk (class in neural_compressor.metric.metric)": [[371, "neural_compressor.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.metric.metric)": [[371, "neural_compressor.metric.metric.Loss"]], "mae (class in neural_compressor.metric.metric)": [[371, "neural_compressor.metric.metric.MAE"]], "metrics (class in neural_compressor.metric.metric)": [[371, "neural_compressor.metric.metric.METRICS"]], "mse (class in neural_compressor.metric.metric)": [[371, "neural_compressor.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.metric.metric)": [[371, "neural_compressor.metric.metric.MXNetMetrics"]], "metric (class in neural_compressor.metric.metric)": [[371, "neural_compressor.metric.metric.Metric"]], "onnxrtglue (class in neural_compressor.metric.metric)": [[371, "neural_compressor.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.metric.metric)": [[371, "neural_compressor.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.metric.metric)": [[371, "neural_compressor.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.metric.metric)": [[371, "neural_compressor.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.metric.metric)": [[371, "neural_compressor.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.metric.metric)": [[371, "neural_compressor.metric.metric.RMSE"]], "roc (class in neural_compressor.metric.metric)": [[371, "neural_compressor.metric.metric.ROC"]], "squadf1 (class in neural_compressor.metric.metric)": [[371, "neural_compressor.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.metric.metric)": [[371, "neural_compressor.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.metric.metric)": [[371, "neural_compressor.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.metric.metric)": [[371, "neural_compressor.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.metric.metric)": [[371, "neural_compressor.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.metric.metric)": [[371, "neural_compressor.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.metric.metric)": [[371, "neural_compressor.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.metric.metric)": [[371, "neural_compressor.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.metric.metric)": [[371, "neural_compressor.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.metric.metric.mae attribute)": [[371, "neural_compressor.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.metric.metric.mse attribute)": [[371, "neural_compressor.metric.metric.MSE.compare_label"]], "k (neural_compressor.metric.metric.generaltopk attribute)": [[371, "neural_compressor.metric.metric.GeneralTopK.k"]], "k (neural_compressor.metric.metric.tensorflowtopk attribute)": [[371, "neural_compressor.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.metric.metric.accuracy attribute)": [[371, "neural_compressor.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.metric.metric.mae attribute)": [[371, "neural_compressor.metric.metric.MAE.label_list"]], "label_list (neural_compressor.metric.metric.mse attribute)": [[371, "neural_compressor.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.metric.metric)": [[371, "neural_compressor.metric.metric.mIOU"]], "metric_registry() (in module neural_compressor.metric.metric)": [[371, "neural_compressor.metric.metric.metric_registry"]], "metrics (neural_compressor.metric.metric.metrics attribute)": [[371, "neural_compressor.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.metric.metric.mxnetmetrics attribute)": [[371, "neural_compressor.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtitmetrics attribute)": [[371, "neural_compressor.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtqlmetrics attribute)": [[371, "neural_compressor.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.metric.metric.pytorchmetrics attribute)": [[371, "neural_compressor.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.metric.metric.tensorflowmetrics attribute)": [[371, "neural_compressor.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.metric.metric.rmse attribute)": [[371, "neural_compressor.metric.metric.RMSE.mse"]], "neural_compressor.metric.metric": [[371, "module-neural_compressor.metric.metric"]], "num_correct (neural_compressor.metric.metric.generaltopk attribute)": [[371, "neural_compressor.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.metric.metric.tensorflowtopk attribute)": [[371, "neural_compressor.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.metric.metric.generaltopk attribute)": [[371, "neural_compressor.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.metric.metric.tensorflowtopk attribute)": [[371, "neural_compressor.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.metric.metric.accuracy attribute)": [[371, "neural_compressor.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.metric.metric.mae attribute)": [[371, "neural_compressor.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.metric.metric.mse attribute)": [[371, "neural_compressor.metric.metric.MSE.pred_list"]], "register_customer_metric() (in module neural_compressor.metric.metric)": [[371, "neural_compressor.metric.metric.register_customer_metric"]], "sample (neural_compressor.metric.metric.accuracy attribute)": [[371, "neural_compressor.metric.metric.Accuracy.sample"]], "sample (neural_compressor.metric.metric.loss attribute)": [[371, "neural_compressor.metric.metric.Loss.sample"]], "sum (neural_compressor.metric.metric.loss attribute)": [[371, "neural_compressor.metric.metric.Loss.sum"]], "fit() (in module neural_compressor.mix_precision)": [[372, "neural_compressor.mix_precision.fit"]], "neural_compressor.mix_precision": [[372, "module-neural_compressor.mix_precision"]], "basemodel (class in neural_compressor.model.base_model)": [[373, "neural_compressor.model.base_model.BaseModel"]], "neural_compressor.model.base_model": [[373, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[374, "module-neural_compressor.model"]], "kerasmodel (class in neural_compressor.model.keras_model)": [[375, "neural_compressor.model.keras_model.KerasModel"]], "neural_compressor.model.keras_model": [[375, "module-neural_compressor.model.keras_model"]], "model (class in neural_compressor.model.model)": [[376, "neural_compressor.model.model.Model"]], "get_model_fwk_name() (in module neural_compressor.model.model)": [[376, "neural_compressor.model.model.get_model_fwk_name"]], "neural_compressor.model.model": [[376, "module-neural_compressor.model.model"]], "mxnetmodel (class in neural_compressor.model.mxnet_model)": [[377, "neural_compressor.model.mxnet_model.MXNetModel"]], "neural_compressor.model.mxnet_model": [[377, "module-neural_compressor.model.mxnet_model"]], "tfslimnetsfactory (class in neural_compressor.model.nets_factory)": [[378, "neural_compressor.model.nets_factory.TFSlimNetsFactory"]], "neural_compressor.model.nets_factory": [[378, "module-neural_compressor.model.nets_factory"]], "onnxmodel (class in neural_compressor.model.onnx_model)": [[379, "neural_compressor.model.onnx_model.ONNXModel"]], "neural_compressor.model.onnx_model": [[379, "module-neural_compressor.model.onnx_model"]], "tensorflowbasemodel (class in neural_compressor.model.tensorflow_model)": [[380, "neural_compressor.model.tensorflow_model.TensorflowBaseModel"]], "tensorflowcheckpointmodel (class in neural_compressor.model.tensorflow_model)": [[380, "neural_compressor.model.tensorflow_model.TensorflowCheckpointModel"]], "tensorflowllmmodel (class in neural_compressor.model.tensorflow_model)": [[380, "neural_compressor.model.tensorflow_model.TensorflowLLMModel"]], "tensorflowmodel (class in neural_compressor.model.tensorflow_model)": [[380, "neural_compressor.model.tensorflow_model.TensorflowModel"]], "tensorflowqatmodel (class in neural_compressor.model.tensorflow_model)": [[380, "neural_compressor.model.tensorflow_model.TensorflowQATModel"]], "tensorflowsavedmodelmodel (class in neural_compressor.model.tensorflow_model)": [[380, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel"]], "checkpoint_session() (in module neural_compressor.model.tensorflow_model)": [[380, "neural_compressor.model.tensorflow_model.checkpoint_session"]], "estimator_session() (in module neural_compressor.model.tensorflow_model)": [[380, "neural_compressor.model.tensorflow_model.estimator_session"]], "frozen_pb_session() (in module neural_compressor.model.tensorflow_model)": [[380, "neural_compressor.model.tensorflow_model.frozen_pb_session"]], "get_model_type() (in module neural_compressor.model.tensorflow_model)": [[380, "neural_compressor.model.tensorflow_model.get_model_type"]], "graph_def_session() (in module neural_compressor.model.tensorflow_model)": [[380, "neural_compressor.model.tensorflow_model.graph_def_session"]], "graph_session() (in module neural_compressor.model.tensorflow_model)": [[380, "neural_compressor.model.tensorflow_model.graph_session"]], "keras_session() (in module neural_compressor.model.tensorflow_model)": [[380, "neural_compressor.model.tensorflow_model.keras_session"]], "load_saved_model() (in module neural_compressor.model.tensorflow_model)": [[380, "neural_compressor.model.tensorflow_model.load_saved_model"]], "neural_compressor.model.tensorflow_model": [[380, "module-neural_compressor.model.tensorflow_model"]], "saved_model_session() (in module neural_compressor.model.tensorflow_model)": [[380, "neural_compressor.model.tensorflow_model.saved_model_session"]], "slim_session() (in module neural_compressor.model.tensorflow_model)": [[380, "neural_compressor.model.tensorflow_model.slim_session"]], "validate_and_inference_input_output() (in module neural_compressor.model.tensorflow_model)": [[380, "neural_compressor.model.tensorflow_model.validate_and_inference_input_output"]], "validate_graph_node() (in module neural_compressor.model.tensorflow_model)": [[380, "neural_compressor.model.tensorflow_model.validate_graph_node"]], "ipexmodel (class in neural_compressor.model.torch_model)": [[381, "neural_compressor.model.torch_model.IPEXModel"]], "pytorchbasemodel (class in neural_compressor.model.torch_model)": [[381, "neural_compressor.model.torch_model.PyTorchBaseModel"]], "pytorchfxmodel (class in neural_compressor.model.torch_model)": [[381, "neural_compressor.model.torch_model.PyTorchFXModel"]], "pytorchmodel (class in neural_compressor.model.torch_model)": [[381, "neural_compressor.model.torch_model.PyTorchModel"]], "neural_compressor.model.torch_model": [[381, "module-neural_compressor.model.torch_model"]], "accuracy (class in neural_compressor.objective)": [[382, "neural_compressor.objective.Accuracy"]], "footprint (class in neural_compressor.objective)": [[382, "neural_compressor.objective.Footprint"]], "modelsize (class in neural_compressor.objective)": [[382, "neural_compressor.objective.ModelSize"]], "multiobjective (class in neural_compressor.objective)": [[382, "neural_compressor.objective.MultiObjective"]], "objective (class in neural_compressor.objective)": [[382, "neural_compressor.objective.Objective"]], "performance (class in neural_compressor.objective)": [[382, "neural_compressor.objective.Performance"]], "neural_compressor.objective": [[382, "module-neural_compressor.objective"]], "objective_custom_registry() (in module neural_compressor.objective)": [[382, "neural_compressor.objective.objective_custom_registry"]], "objective_registry() (in module neural_compressor.objective)": [[382, "neural_compressor.objective.objective_registry"]], "neural_compressor.onnxrt.algorithms": [[383, "module-neural_compressor.onnxrt.algorithms"]], "calibrator (class in neural_compressor.onnxrt.algorithms.smoother.calibrator)": [[384, "neural_compressor.onnxrt.algorithms.smoother.calibrator.Calibrator"]], "neural_compressor.onnxrt.algorithms.smoother.calibrator": [[384, "module-neural_compressor.onnxrt.algorithms.smoother.calibrator"]], "smoother (class in neural_compressor.onnxrt.algorithms.smoother.core)": [[385, "neural_compressor.onnxrt.algorithms.smoother.core.Smoother"]], "neural_compressor.onnxrt.algorithms.smoother.core": [[385, "module-neural_compressor.onnxrt.algorithms.smoother.core"]], "neural_compressor.onnxrt.algorithms.smoother": [[386, "module-neural_compressor.onnxrt.algorithms.smoother"]], "apply_awq_on_model() (in module neural_compressor.onnxrt.algorithms.weight_only.awq)": [[387, "neural_compressor.onnxrt.algorithms.weight_only.awq.apply_awq_on_model"]], "awq_quantize() (in module neural_compressor.onnxrt.algorithms.weight_only.awq)": [[387, "neural_compressor.onnxrt.algorithms.weight_only.awq.awq_quantize"]], "neural_compressor.onnxrt.algorithms.weight_only.awq": [[387, "module-neural_compressor.onnxrt.algorithms.weight_only.awq"]], "apply_gptq_on_model() (in module neural_compressor.onnxrt.algorithms.weight_only.gptq)": [[388, "neural_compressor.onnxrt.algorithms.weight_only.gptq.apply_gptq_on_model"]], "gptq_quantize() (in module neural_compressor.onnxrt.algorithms.weight_only.gptq)": [[388, "neural_compressor.onnxrt.algorithms.weight_only.gptq.gptq_quantize"]], "neural_compressor.onnxrt.algorithms.weight_only.gptq": [[388, "module-neural_compressor.onnxrt.algorithms.weight_only.gptq"]], "neural_compressor.onnxrt.algorithms.weight_only": [[389, "module-neural_compressor.onnxrt.algorithms.weight_only"]], "apply_rtn_on_model() (in module neural_compressor.onnxrt.algorithms.weight_only.rtn)": [[390, "neural_compressor.onnxrt.algorithms.weight_only.rtn.apply_rtn_on_model"]], "neural_compressor.onnxrt.algorithms.weight_only.rtn": [[390, "module-neural_compressor.onnxrt.algorithms.weight_only.rtn"]], "rtn_quantize() (in module neural_compressor.onnxrt.algorithms.weight_only.rtn)": [[390, "neural_compressor.onnxrt.algorithms.weight_only.rtn.rtn_quantize"]], "make_matmul_weight_only_node() (in module neural_compressor.onnxrt.algorithms.weight_only.utility)": [[391, "neural_compressor.onnxrt.algorithms.weight_only.utility.make_matmul_weight_only_node"]], "neural_compressor.onnxrt.algorithms.weight_only.utility": [[391, "module-neural_compressor.onnxrt.algorithms.weight_only.utility"]], "pad_tensor() (in module neural_compressor.onnxrt.algorithms.weight_only.utility)": [[391, "neural_compressor.onnxrt.algorithms.weight_only.utility.pad_tensor"]], "prepare_inputs() (in module neural_compressor.onnxrt.algorithms.weight_only.utility)": [[391, "neural_compressor.onnxrt.algorithms.weight_only.utility.prepare_inputs"]], "qdq_tensor() (in module neural_compressor.onnxrt.algorithms.weight_only.utility)": [[391, "neural_compressor.onnxrt.algorithms.weight_only.utility.qdq_tensor"]], "quant_tensor() (in module neural_compressor.onnxrt.algorithms.weight_only.utility)": [[391, "neural_compressor.onnxrt.algorithms.weight_only.utility.quant_tensor"]], "neural_compressor.onnxrt": [[392, "module-neural_compressor.onnxrt"]], "awq_quantize_entry() (in module neural_compressor.onnxrt.quantization.algorithm_entry)": [[393, "neural_compressor.onnxrt.quantization.algorithm_entry.awq_quantize_entry"]], "gptq_quantize_entry() (in module neural_compressor.onnxrt.quantization.algorithm_entry)": [[393, "neural_compressor.onnxrt.quantization.algorithm_entry.gptq_quantize_entry"]], "neural_compressor.onnxrt.quantization.algorithm_entry": [[393, "module-neural_compressor.onnxrt.quantization.algorithm_entry"]], "rtn_quantize_entry() (in module neural_compressor.onnxrt.quantization.algorithm_entry)": [[393, "neural_compressor.onnxrt.quantization.algorithm_entry.rtn_quantize_entry"]], "smooth_quant_entry() (in module neural_compressor.onnxrt.quantization.algorithm_entry)": [[393, "neural_compressor.onnxrt.quantization.algorithm_entry.smooth_quant_entry"]], "autotune() (in module neural_compressor.onnxrt.quantization.autotune)": [[394, "neural_compressor.onnxrt.quantization.autotune.autotune"]], "neural_compressor.onnxrt.quantization.autotune": [[394, "module-neural_compressor.onnxrt.quantization.autotune"]], "calibrationdatareader (class in neural_compressor.onnxrt.quantization.calibrate)": [[395, "neural_compressor.onnxrt.quantization.calibrate.CalibrationDataReader"]], "neural_compressor.onnxrt.quantization.calibrate": [[395, "module-neural_compressor.onnxrt.quantization.calibrate"]], "awqconfig (class in neural_compressor.onnxrt.quantization.config)": [[396, "neural_compressor.onnxrt.quantization.config.AWQConfig"]], "gptqconfig (class in neural_compressor.onnxrt.quantization.config)": [[396, "neural_compressor.onnxrt.quantization.config.GPTQConfig"]], "rtnconfig (class in neural_compressor.onnxrt.quantization.config)": [[396, "neural_compressor.onnxrt.quantization.config.RTNConfig"]], "smoohquantconfig (class in neural_compressor.onnxrt.quantization.config)": [[396, "neural_compressor.onnxrt.quantization.config.SmoohQuantConfig"]], "get_default_awq_config() (in module neural_compressor.onnxrt.quantization.config)": [[396, "neural_compressor.onnxrt.quantization.config.get_default_awq_config"]], "get_default_gptq_config() (in module neural_compressor.onnxrt.quantization.config)": [[396, "neural_compressor.onnxrt.quantization.config.get_default_gptq_config"]], "get_default_rtn_config() (in module neural_compressor.onnxrt.quantization.config)": [[396, "neural_compressor.onnxrt.quantization.config.get_default_rtn_config"]], "get_default_sq_config() (in module neural_compressor.onnxrt.quantization.config)": [[396, "neural_compressor.onnxrt.quantization.config.get_default_sq_config"]], "neural_compressor.onnxrt.quantization.config": [[396, "module-neural_compressor.onnxrt.quantization.config"]], "neural_compressor.onnxrt.quantization": [[397, "module-neural_compressor.onnxrt.quantization"]], "neural_compressor.onnxrt.quantization.quantize": [[398, "module-neural_compressor.onnxrt.quantization.quantize"]], "neural_compressor.onnxrt.utils": [[399, "module-neural_compressor.onnxrt.utils"]], "onnxmodel (class in neural_compressor.onnxrt.utils.onnx_model)": [[400, "neural_compressor.onnxrt.utils.onnx_model.ONNXModel"]], "neural_compressor.onnxrt.utils.onnx_model": [[400, "module-neural_compressor.onnxrt.utils.onnx_model"]], "find_by_name() (in module neural_compressor.onnxrt.utils.utility)": [[401, "neural_compressor.onnxrt.utils.utility.find_by_name"]], "get_qrange_for_qtype() (in module neural_compressor.onnxrt.utils.utility)": [[401, "neural_compressor.onnxrt.utils.utility.get_qrange_for_qType"]], "is_b_transposed() (in module neural_compressor.onnxrt.utils.utility)": [[401, "neural_compressor.onnxrt.utils.utility.is_B_transposed"]], "neural_compressor.onnxrt.utils.utility": [[401, "module-neural_compressor.onnxrt.utils.utility"]], "quantize_data() (in module neural_compressor.onnxrt.utils.utility)": [[401, "neural_compressor.onnxrt.utils.utility.quantize_data"]], "register_algo() (in module neural_compressor.onnxrt.utils.utility)": [[401, "neural_compressor.onnxrt.utils.utility.register_algo"]], "simple_progress_bar() (in module neural_compressor.onnxrt.utils.utility)": [[401, "neural_compressor.onnxrt.utils.utility.simple_progress_bar"]], "neural_compressor.profiling": [[402, "module-neural_compressor.profiling"]], "parserfactory (class in neural_compressor.profiling.parser.factory)": [[403, "neural_compressor.profiling.parser.factory.ParserFactory"]], "neural_compressor.profiling.parser.factory": [[403, "module-neural_compressor.profiling.parser.factory"]], "neural_compressor.profiling.parser": [[404, "module-neural_compressor.profiling.parser"]], "onnxrtparserfactory (class in neural_compressor.profiling.parser.onnx_parser.factory)": [[405, "neural_compressor.profiling.parser.onnx_parser.factory.OnnxrtParserFactory"]], "neural_compressor.profiling.parser.onnx_parser.factory": [[405, "module-neural_compressor.profiling.parser.onnx_parser.factory"]], "neural_compressor.profiling.parser.onnx_parser": [[406, "module-neural_compressor.profiling.parser.onnx_parser"]], "onnxprofilingparser (class in neural_compressor.profiling.parser.onnx_parser.parser)": [[407, "neural_compressor.profiling.parser.onnx_parser.parser.OnnxProfilingParser"]], "neural_compressor.profiling.parser.onnx_parser.parser": [[407, "module-neural_compressor.profiling.parser.onnx_parser.parser"]], "profilingparser (class in neural_compressor.profiling.parser.parser)": [[408, "neural_compressor.profiling.parser.parser.ProfilingParser"]], "neural_compressor.profiling.parser.parser": [[408, "module-neural_compressor.profiling.parser.parser"]], "profilingresult (class in neural_compressor.profiling.parser.result)": [[409, "neural_compressor.profiling.parser.result.ProfilingResult"]], "neural_compressor.profiling.parser.result": [[409, "module-neural_compressor.profiling.parser.result"]], "tensorflowparserfactory (class in neural_compressor.profiling.parser.tensorflow_parser.factory)": [[410, "neural_compressor.profiling.parser.tensorflow_parser.factory.TensorFlowParserFactory"]], "neural_compressor.profiling.parser.tensorflow_parser.factory": [[410, "module-neural_compressor.profiling.parser.tensorflow_parser.factory"]], "neural_compressor.profiling.parser.tensorflow_parser": [[411, "module-neural_compressor.profiling.parser.tensorflow_parser"]], "tensorflowprofilingparser (class in neural_compressor.profiling.parser.tensorflow_parser.parser)": [[412, "neural_compressor.profiling.parser.tensorflow_parser.parser.TensorFlowProfilingParser"]], "neural_compressor.profiling.parser.tensorflow_parser.parser": [[412, "module-neural_compressor.profiling.parser.tensorflow_parser.parser"]], "profilerfactory (class in neural_compressor.profiling.profiler.factory)": [[413, "neural_compressor.profiling.profiler.factory.ProfilerFactory"]], "neural_compressor.profiling.profiler.factory": [[413, "module-neural_compressor.profiling.profiler.factory"]], "neural_compressor.profiling.profiler": [[414, "module-neural_compressor.profiling.profiler"]], "profilerfactory (class in neural_compressor.profiling.profiler.onnxrt_profiler.factory)": [[415, "neural_compressor.profiling.profiler.onnxrt_profiler.factory.ProfilerFactory"]], "neural_compressor.profiling.profiler.onnxrt_profiler.factory": [[415, "module-neural_compressor.profiling.profiler.onnxrt_profiler.factory"]], "neural_compressor.profiling.profiler.onnxrt_profiler": [[416, "module-neural_compressor.profiling.profiler.onnxrt_profiler"]], "profiler (class in neural_compressor.profiling.profiler.onnxrt_profiler.profiler)": [[417, "neural_compressor.profiling.profiler.onnxrt_profiler.profiler.Profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.profiler": [[417, "module-neural_compressor.profiling.profiler.onnxrt_profiler.profiler"]], "create_onnx_config() (in module neural_compressor.profiling.profiler.onnxrt_profiler.utils)": [[418, "neural_compressor.profiling.profiler.onnxrt_profiler.utils.create_onnx_config"]], "neural_compressor.profiling.profiler.onnxrt_profiler.utils": [[418, "module-neural_compressor.profiling.profiler.onnxrt_profiler.utils"]], "profiler (class in neural_compressor.profiling.profiler.profiler)": [[419, "neural_compressor.profiling.profiler.profiler.Profiler"]], "neural_compressor.profiling.profiler.profiler": [[419, "module-neural_compressor.profiling.profiler.profiler"]], "profilerfactory (class in neural_compressor.profiling.profiler.tensorflow_profiler.factory)": [[420, "neural_compressor.profiling.profiler.tensorflow_profiler.factory.ProfilerFactory"]], "neural_compressor.profiling.profiler.tensorflow_profiler.factory": [[420, "module-neural_compressor.profiling.profiler.tensorflow_profiler.factory"]], "neural_compressor.profiling.profiler.tensorflow_profiler": [[421, "module-neural_compressor.profiling.profiler.tensorflow_profiler"]], "profiler (class in neural_compressor.profiling.profiler.tensorflow_profiler.profiler)": [[422, "neural_compressor.profiling.profiler.tensorflow_profiler.profiler.Profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.profiler": [[422, "module-neural_compressor.profiling.profiler.tensorflow_profiler.profiler"]], "create_tf_config() (in module neural_compressor.profiling.profiler.tensorflow_profiler.utils)": [[423, "neural_compressor.profiling.profiler.tensorflow_profiler.utils.create_tf_config"]], "delete_assign() (in module neural_compressor.profiling.profiler.tensorflow_profiler.utils)": [[423, "neural_compressor.profiling.profiler.tensorflow_profiler.utils.delete_assign"]], "neural_compressor.profiling.profiler.tensorflow_profiler.utils": [[423, "module-neural_compressor.profiling.profiler.tensorflow_profiler.utils"]], "set_eager_execution() (in module neural_compressor.profiling.profiler.tensorflow_profiler.utils)": [[423, "neural_compressor.profiling.profiler.tensorflow_profiler.utils.set_eager_execution"]], "fit() (in module neural_compressor.quantization)": [[424, "neural_compressor.quantization.fit"]], "neural_compressor.quantization": [[424, "module-neural_compressor.quantization"]], "autotunestrategy (class in neural_compressor.strategy.auto)": [[425, "neural_compressor.strategy.auto.AutoTuneStrategy"]], "neural_compressor.strategy.auto": [[425, "module-neural_compressor.strategy.auto"]], "automixedprecisiontunestrategy (class in neural_compressor.strategy.auto_mixed_precision)": [[426, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[426, "module-neural_compressor.strategy.auto_mixed_precision"]], "basictunestrategy (class in neural_compressor.strategy.basic)": [[427, "neural_compressor.strategy.basic.BasicTuneStrategy"]], "neural_compressor.strategy.basic": [[427, "module-neural_compressor.strategy.basic"]], "bayesianoptimization (class in neural_compressor.strategy.bayesian)": [[428, "neural_compressor.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.strategy.bayesian)": [[428, "neural_compressor.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.strategy.bayesian)": [[428, "neural_compressor.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.strategy.bayesian)": [[428, "neural_compressor.strategy.bayesian.acq_max"]], "neural_compressor.strategy.bayesian": [[428, "module-neural_compressor.strategy.bayesian"]], "conservativetunestrategy (class in neural_compressor.strategy.conservative)": [[429, "neural_compressor.strategy.conservative.ConservativeTuneStrategy"]], "neural_compressor.strategy.conservative": [[429, "module-neural_compressor.strategy.conservative"]], "exhaustivetunestrategy (class in neural_compressor.strategy.exhaustive)": [[430, "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[430, "module-neural_compressor.strategy.exhaustive"]], "hawq_v2tunestrategy (class in neural_compressor.strategy.hawq_v2)": [[431, "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[431, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[432, "module-neural_compressor.strategy"]], "msetunestrategy (class in neural_compressor.strategy.mse)": [[433, "neural_compressor.strategy.mse.MSETuneStrategy"]], "neural_compressor.strategy.mse": [[433, "module-neural_compressor.strategy.mse"]], "mse_v2tunestrategy (class in neural_compressor.strategy.mse_v2)": [[434, "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.strategy.mse_v2": [[434, "module-neural_compressor.strategy.mse_v2"]], "randomtunestrategy (class in neural_compressor.strategy.random)": [[435, "neural_compressor.strategy.random.RandomTuneStrategy"]], "neural_compressor.strategy.random": [[435, "module-neural_compressor.strategy.random"]], "tunestrategy (class in neural_compressor.strategy.strategy)": [[436, "neural_compressor.strategy.strategy.TuneStrategy"]], "tunestrategymeta (class in neural_compressor.strategy.strategy)": [[436, "neural_compressor.strategy.strategy.TuneStrategyMeta"]], "neural_compressor.strategy.strategy": [[436, "module-neural_compressor.strategy.strategy"]], "strategy_registry() (in module neural_compressor.strategy.strategy)": [[436, "neural_compressor.strategy.strategy.strategy_registry"]], "neural_compressor.strategy.utils.constant": [[437, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[438, "module-neural_compressor.strategy.utils"]], "blockfallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[439, "neural_compressor.strategy.utils.tuning_sampler.BlockFallbackTuningSampler"]], "fallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[439, "neural_compressor.strategy.utils.tuning_sampler.FallbackTuningSampler"]], "lowerbitssampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[439, "neural_compressor.strategy.utils.tuning_sampler.LowerBitsSampler"]], "modelwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[439, "neural_compressor.strategy.utils.tuning_sampler.ModelWiseTuningSampler"]], "optypewisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[439, "neural_compressor.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler"]], "opwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[439, "neural_compressor.strategy.utils.tuning_sampler.OpWiseTuningSampler"]], "smoothquantsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[439, "neural_compressor.strategy.utils.tuning_sampler.SmoothQuantSampler"]], "tuningorder (class in neural_compressor.strategy.utils.tuning_sampler)": [[439, "neural_compressor.strategy.utils.tuning_sampler.TuningOrder"]], "tuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[439, "neural_compressor.strategy.utils.tuning_sampler.TuningSampler"]], "weightonlyquantsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[439, "neural_compressor.strategy.utils.tuning_sampler.WeightOnlyQuantSampler"]], "neural_compressor.strategy.utils.tuning_sampler": [[439, "module-neural_compressor.strategy.utils.tuning_sampler"]], "tuningitem (class in neural_compressor.strategy.utils.tuning_space)": [[440, "neural_compressor.strategy.utils.tuning_space.TuningItem"]], "tuningspace (class in neural_compressor.strategy.utils.tuning_space)": [[440, "neural_compressor.strategy.utils.tuning_space.TuningSpace"]], "initial_tuning_cfg_with_quant_mode() (in module neural_compressor.strategy.utils.tuning_space)": [[440, "neural_compressor.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode"]], "neural_compressor.strategy.utils.tuning_space": [[440, "module-neural_compressor.strategy.utils.tuning_space"]], "pattern_to_internal() (in module neural_compressor.strategy.utils.tuning_space)": [[440, "neural_compressor.strategy.utils.tuning_space.pattern_to_internal"]], "pattern_to_path() (in module neural_compressor.strategy.utils.tuning_space)": [[440, "neural_compressor.strategy.utils.tuning_space.pattern_to_path"]], "quant_mode_from_pattern() (in module neural_compressor.strategy.utils.tuning_space)": [[440, "neural_compressor.strategy.utils.tuning_space.quant_mode_from_pattern"]], "optuningconfig (class in neural_compressor.strategy.utils.tuning_structs)": [[441, "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig"]], "neural_compressor.strategy.utils.tuning_structs": [[441, "module-neural_compressor.strategy.utils.tuning_structs"]], "classregister (class in neural_compressor.strategy.utils.utility)": [[442, "neural_compressor.strategy.utils.utility.ClassRegister"]], "ordereddefaultdict (class in neural_compressor.strategy.utils.utility)": [[442, "neural_compressor.strategy.utils.utility.OrderedDefaultDict"]], "quantoptions (class in neural_compressor.strategy.utils.utility)": [[442, "neural_compressor.strategy.utils.utility.QuantOptions"]], "quanttype (class in neural_compressor.strategy.utils.utility)": [[442, "neural_compressor.strategy.utils.utility.QuantType"]], "build_slave_faker_model() (in module neural_compressor.strategy.utils.utility)": [[442, "neural_compressor.strategy.utils.utility.build_slave_faker_model"]], "extract_data_type() (in module neural_compressor.strategy.utils.utility)": [[442, "neural_compressor.strategy.utils.utility.extract_data_type"]], "get_adaptor_name() (in module neural_compressor.strategy.utils.utility)": [[442, "neural_compressor.strategy.utils.utility.get_adaptor_name"]], "neural_compressor.strategy.utils.utility": [[442, "module-neural_compressor.strategy.utils.utility"]], "preprocess_user_cfg() (in module neural_compressor.strategy.utils.utility)": [[442, "neural_compressor.strategy.utils.utility.preprocess_user_cfg"]], "reverted_data_type() (in module neural_compressor.strategy.utils.utility)": [[442, "neural_compressor.strategy.utils.utility.reverted_data_type"]], "exampleclass (class in neural_compressor.template.api_doc_example)": [[443, "neural_compressor.template.api_doc_example.ExampleClass"]], "attr1 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[443, "neural_compressor.template.api_doc_example.ExampleClass.attr1"]], "attr2 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[443, "neural_compressor.template.api_doc_example.ExampleClass.attr2"]], "attr5 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[443, "neural_compressor.template.api_doc_example.ExampleClass.attr5"]], "attribute1 (in module neural_compressor.template.api_doc_example)": [[443, "neural_compressor.template.api_doc_example.attribute1"]], "function1() (in module neural_compressor.template.api_doc_example)": [[443, "neural_compressor.template.api_doc_example.function1"]], "function2() (in module neural_compressor.template.api_doc_example)": [[443, "neural_compressor.template.api_doc_example.function2"]], "function3() (in module neural_compressor.template.api_doc_example)": [[443, "neural_compressor.template.api_doc_example.function3"]], "generator1() (in module neural_compressor.template.api_doc_example)": [[443, "neural_compressor.template.api_doc_example.generator1"]], "module_debug_level1 (in module neural_compressor.template.api_doc_example)": [[443, "neural_compressor.template.api_doc_example.module_debug_level1"]], "neural_compressor.template.api_doc_example": [[443, "module-neural_compressor.template.api_doc_example"]], "neural_compressor.template": [[444, "module-neural_compressor.template"]], "neural_compressor.tensorflow.algorithms": [[445, "module-neural_compressor.tensorflow.algorithms"]], "smoothquantcalibration (class in neural_compressor.tensorflow.algorithms.smoother.calibration)": [[446, "neural_compressor.tensorflow.algorithms.smoother.calibration.SmoothQuantCalibration"]], "smoothquantcalibrationllm (class in neural_compressor.tensorflow.algorithms.smoother.calibration)": [[446, "neural_compressor.tensorflow.algorithms.smoother.calibration.SmoothQuantCalibrationLLM"]], "neural_compressor.tensorflow.algorithms.smoother.calibration": [[446, "module-neural_compressor.tensorflow.algorithms.smoother.calibration"]], "smoothquant (class in neural_compressor.tensorflow.algorithms.smoother.core)": [[447, "neural_compressor.tensorflow.algorithms.smoother.core.SmoothQuant"]], "neural_compressor.tensorflow.algorithms.smoother.core": [[447, "module-neural_compressor.tensorflow.algorithms.smoother.core"]], "neural_compressor.tensorflow.algorithms.smoother": [[448, "module-neural_compressor.tensorflow.algorithms.smoother"]], "smoothquantscaler (class in neural_compressor.tensorflow.algorithms.smoother.scaler)": [[449, "neural_compressor.tensorflow.algorithms.smoother.scaler.SmoothQuantScaler"]], "smoothquantscalerllm (class in neural_compressor.tensorflow.algorithms.smoother.scaler)": [[449, "neural_compressor.tensorflow.algorithms.smoother.scaler.SmoothQuantScalerLLM"]], "neural_compressor.tensorflow.algorithms.smoother.scaler": [[449, "module-neural_compressor.tensorflow.algorithms.smoother.scaler"]], "neural_compressor.tensorflow.algorithms.static_quant": [[450, "module-neural_compressor.tensorflow.algorithms.static_quant"]], "kerasadaptor (class in neural_compressor.tensorflow.algorithms.static_quant.keras)": [[451, "neural_compressor.tensorflow.algorithms.static_quant.keras.KerasAdaptor"]], "kerasconfigconverter (class in neural_compressor.tensorflow.algorithms.static_quant.keras)": [[451, "neural_compressor.tensorflow.algorithms.static_quant.keras.KerasConfigConverter"]], "kerasquery (class in neural_compressor.tensorflow.algorithms.static_quant.keras)": [[451, "neural_compressor.tensorflow.algorithms.static_quant.keras.KerasQuery"]], "neural_compressor.tensorflow.algorithms.static_quant.keras": [[451, "module-neural_compressor.tensorflow.algorithms.static_quant.keras"]], "tensorflowadaptor (class in neural_compressor.tensorflow.algorithms.static_quant.tensorflow)": [[452, "neural_compressor.tensorflow.algorithms.static_quant.tensorflow.TensorFlowAdaptor"]], "tensorflowconfig (class in neural_compressor.tensorflow.algorithms.static_quant.tensorflow)": [[452, "neural_compressor.tensorflow.algorithms.static_quant.tensorflow.TensorFlowConfig"]], "tensorflowconfigconverter (class in neural_compressor.tensorflow.algorithms.static_quant.tensorflow)": [[452, "neural_compressor.tensorflow.algorithms.static_quant.tensorflow.TensorflowConfigConverter"]], "tensorflowquery (class in neural_compressor.tensorflow.algorithms.static_quant.tensorflow)": [[452, "neural_compressor.tensorflow.algorithms.static_quant.tensorflow.TensorflowQuery"]], "tensorflow_itexadaptor (class in neural_compressor.tensorflow.algorithms.static_quant.tensorflow)": [[452, "neural_compressor.tensorflow.algorithms.static_quant.tensorflow.Tensorflow_ITEXAdaptor"]], "neural_compressor.tensorflow.algorithms.static_quant.tensorflow": [[452, "module-neural_compressor.tensorflow.algorithms.static_quant.tensorflow"]], "neural_compressor.tensorflow": [[453, "module-neural_compressor.tensorflow"]], "neural_compressor.tensorflow.keras": [[454, "module-neural_compressor.tensorflow.keras"]], "neural_compressor.tensorflow.keras.layers.conv2d": [[455, "module-neural_compressor.tensorflow.keras.layers.conv2d"]], "neural_compressor.tensorflow.keras.layers.dense": [[456, "module-neural_compressor.tensorflow.keras.layers.dense"]], "neural_compressor.tensorflow.keras.layers.depthwise_conv2d": [[457, "module-neural_compressor.tensorflow.keras.layers.depthwise_conv2d"]], "neural_compressor.tensorflow.keras.layers": [[458, "module-neural_compressor.tensorflow.keras.layers"]], "neural_compressor.tensorflow.keras.layers.pool2d": [[459, "module-neural_compressor.tensorflow.keras.layers.pool2d"]], "neural_compressor.tensorflow.keras.layers.quantizer": [[460, "module-neural_compressor.tensorflow.keras.layers.quantizer"]], "neural_compressor.tensorflow.keras.layers.separable_conv2d": [[461, "module-neural_compressor.tensorflow.keras.layers.separable_conv2d"]], "staticquantconfig (class in neural_compressor.tensorflow.keras.quantization.config)": [[462, "neural_compressor.tensorflow.keras.quantization.config.StaticQuantConfig"]], "get_all_registered_configs() (in module neural_compressor.tensorflow.keras.quantization.config)": [[462, "neural_compressor.tensorflow.keras.quantization.config.get_all_registered_configs"]], "get_default_static_quant_config() (in module neural_compressor.tensorflow.keras.quantization.config)": [[462, "neural_compressor.tensorflow.keras.quantization.config.get_default_static_quant_config"]], "neural_compressor.tensorflow.keras.quantization.config": [[462, "module-neural_compressor.tensorflow.keras.quantization.config"]], "neural_compressor.tensorflow.keras.quantization": [[463, "module-neural_compressor.tensorflow.keras.quantization"]], "neural_compressor.tensorflow.quantization.algorithm_entry": [[464, "module-neural_compressor.tensorflow.quantization.algorithm_entry"]], "static_quant_entry() (in module neural_compressor.tensorflow.quantization.algorithm_entry)": [[464, "neural_compressor.tensorflow.quantization.algorithm_entry.static_quant_entry"]], "autotune() (in module neural_compressor.tensorflow.quantization.autotune)": [[465, "neural_compressor.tensorflow.quantization.autotune.autotune"]], "neural_compressor.tensorflow.quantization.autotune": [[465, "module-neural_compressor.tensorflow.quantization.autotune"]], "smoothquantconfig (class in neural_compressor.tensorflow.quantization.config)": [[466, "neural_compressor.tensorflow.quantization.config.SmoothQuantConfig"]], "staticquantconfig (class in neural_compressor.tensorflow.quantization.config)": [[466, "neural_compressor.tensorflow.quantization.config.StaticQuantConfig"]], "get_default_sq_config() (in module neural_compressor.tensorflow.quantization.config)": [[466, "neural_compressor.tensorflow.quantization.config.get_default_sq_config"]], "get_default_static_quant_config() (in module neural_compressor.tensorflow.quantization.config)": [[466, "neural_compressor.tensorflow.quantization.config.get_default_static_quant_config"]], "neural_compressor.tensorflow.quantization.config": [[466, "module-neural_compressor.tensorflow.quantization.config"]], "neural_compressor.tensorflow.quantization": [[467, "module-neural_compressor.tensorflow.quantization"]], "neural_compressor.tensorflow.quantization.quantize": [[468, "module-neural_compressor.tensorflow.quantization.quantize"]], "quantize_model() (in module neural_compressor.tensorflow.quantization.quantize)": [[468, "neural_compressor.tensorflow.quantization.quantize.quantize_model"]], "quantize_model_with_single_config() (in module neural_compressor.tensorflow.quantization.quantize)": [[468, "neural_compressor.tensorflow.quantization.quantize.quantize_model_with_single_config"]], "graphconverter (class in neural_compressor.tensorflow.quantization.utils.graph_converter)": [[469, "neural_compressor.tensorflow.quantization.utils.graph_converter.GraphConverter"]], "neural_compressor.tensorflow.quantization.utils.graph_converter": [[469, "module-neural_compressor.tensorflow.quantization.utils.graph_converter"]], "graphconverterwithoutcalib (class in neural_compressor.tensorflow.quantization.utils.graph_converter_without_calib)": [[470, "neural_compressor.tensorflow.quantization.utils.graph_converter_without_calib.GraphConverterWithoutCalib"]], "neural_compressor.tensorflow.quantization.utils.graph_converter_without_calib": [[470, "module-neural_compressor.tensorflow.quantization.utils.graph_converter_without_calib"]], "bf16convert (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.bf16_convert)": [[471, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.bf16_convert.BF16Convert"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.bf16_convert": [[471, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.bf16_convert"]], "dequantizecastoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.dequantize_cast_optimizer)": [[472, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.dequantize_cast_optimizer.DequantizeCastOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.dequantize_cast_optimizer": [[472, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.dequantize_cast_optimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16": [[473, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16"]], "convertaddtobiasaddoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd)": [[474, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd": [[474, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd"]], "convertlayoutoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout)": [[475, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout": [[475, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout"]], "convertleakyreluoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu)": [[476, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu": [[476, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu"]], "convertnantorandom (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random)": [[477, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random": [[477, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random"]], "convertplaceholdertoconst (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const)": [[478, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const": [[478, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const"]], "dilatedcontraction (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction)": [[479, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction.DilatedContraction"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction": [[479, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction"]], "injectdummybiasaddoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd)": [[480, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd": [[480, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd"]], "expanddimsoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer)": [[481, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer": [[481, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer"]], "fetchweightfromreshapeoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape)": [[482, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape": [[482, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "foldbatchnormnodesoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm)": [[483, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm": [[483, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm"]], "graphfoldconstantoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant)": [[484, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant": [[484, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant"]], "fusebiasaddandaddoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add)": [[485, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add": [[485, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add"]], "fusecolumnwisemuloptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul)": [[486, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul": [[486, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul"]], "fuseconvwithmathoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math)": [[487, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math": [[487, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math"]], "fusedecomposedbnoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn)": [[488, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn.FuseDecomposedBNOptimizer"]], "bypass_reshape() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn)": [[488, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn.bypass_reshape"]], "get_const_dim_count() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn)": [[488, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn.get_const_dim_count"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn": [[488, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn"]], "node_from_map() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn)": [[488, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn.node_from_map"]], "node_name_from_input() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn)": [[488, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn)": [[488, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn)": [[488, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn.values_from_const"]], "fusedecomposedinoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in)": [[489, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in.FuseDecomposedINOptimizer"]], "bypass_reshape() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in)": [[489, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in.bypass_reshape"]], "get_const_dim_count() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in)": [[489, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in.get_const_dim_count"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in": [[489, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in"]], "node_from_map() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in)": [[489, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in.node_from_map"]], "node_name_from_input() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in)": [[489, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in)": [[489, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in)": [[489, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in.values_from_const"]], "fusegeluoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu)": [[490, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu": [[490, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu"]], "fuselayernormoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm)": [[491, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm": [[491, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm"]], "node_from_map() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm)": [[491, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm.node_from_map"]], "node_name_from_input() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm)": [[491, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm.node_name_from_input"]], "values_from_const() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm)": [[491, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm.values_from_const"]], "fusepadwithconv2doptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv)": [[492, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv": [[492, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv"]], "fusepadwithfp32conv2doptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv)": [[493, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[493, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "fusetransposereshapeoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose)": [[494, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose": [[494, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose"]], "graphcseoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer)": [[495, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer": [[495, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer"]], "grappleroptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass)": [[496, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass": [[496, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic": [[497, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic"]], "insertprintminmaxnode (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node)": [[498, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node": [[498, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node"]], "movesqueezeafterreluoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu)": [[499, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu": [[499, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu"]], "preoptimization (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize)": [[500, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize.PreOptimization"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize": [[500, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize"]], "removetrainingnodesoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes)": [[501, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes": [[501, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes"]], "renamebatchnormoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm)": [[502, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm": [[502, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm"]], "splitsharedinputoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input)": [[503, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input": [[503, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input"]], "stripequivalentnodesoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes)": [[504, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes": [[504, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes"]], "stripunusednodesoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes)": [[505, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes": [[505, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes"]], "switchoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer)": [[506, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer": [[506, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer"]], "graphrewriterbase (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base)": [[507, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base.GraphRewriterBase"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base": [[507, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter": [[508, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter"]], "freezefakequantopoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_fake_quant)": [[509, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_fake_quant": [[509, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_fake_quant"]], "freezevaluetransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value)": [[510, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value": [[510, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value"]], "freezevaluewithoutcalibtransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value_without_calib)": [[511, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value_without_calib": [[511, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value_without_calib"]], "fuseconvredundantdequantizetransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_redundant_dequantize)": [[512, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[512, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "fuseconvrequantizetransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_requantize)": [[513, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_requantize": [[513, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_requantize"]], "fusematmulredundantdequantizetransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize)": [[514, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[514, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "fusematmulrequantizedequantizenewapitransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize)": [[515, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer"]], "fusematmulrequantizedequantizetransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize)": [[515, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer"]], "fusematmulrequantizenewapitransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize)": [[515, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer"]], "fusematmulrequantizetransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize)": [[515, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize": [[515, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8": [[516, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8"]], "metainfochangingmemopoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.meta_op_optimizer)": [[517, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.meta_op_optimizer": [[517, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.meta_op_optimizer"]], "posthostconstconverter (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_hostconst_converter)": [[518, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_hostconst_converter": [[518, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_hostconst_converter"]], "postcseoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_quantized_op_cse)": [[519, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_quantized_op_cse": [[519, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_quantized_op_cse"]], "quantizedrnnconverter (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.rnn_convert)": [[520, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.rnn_convert": [[520, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.rnn_convert"]], "scalepropagationtransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.scale_propagation)": [[521, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.scale_propagation": [[521, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq": [[522, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq"]], "generategraphwithqdqpattern (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.insert_qdq_pattern)": [[523, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.insert_qdq_pattern": [[523, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.insert_qdq_pattern"]], "mergeduplicatedqdqoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.merge_duplicated_qdq)": [[524, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.merge_duplicated_qdq": [[524, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "shareqdqforitexypatternoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.share_qdq_y_pattern)": [[525, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.share_qdq_y_pattern": [[525, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "graphanalyzer (class in neural_compressor.tensorflow.quantization.utils.graph_util)": [[526, "neural_compressor.tensorflow.quantization.utils.graph_util.GraphAnalyzer"]], "graphrewriterhelper (class in neural_compressor.tensorflow.quantization.utils.graph_util)": [[526, "neural_compressor.tensorflow.quantization.utils.graph_util.GraphRewriterHelper"]], "neural_compressor.tensorflow.quantization.utils.graph_util": [[526, "module-neural_compressor.tensorflow.quantization.utils.graph_util"]], "neural_compressor.tensorflow.quantization.utils": [[527, "module-neural_compressor.tensorflow.quantization.utils"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph": [[528, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph"]], "fakequantize (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.fake_quantize)": [[529, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.fake_quantize.FakeQuantize"]], "fakequantizebase (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.fake_quantize)": [[529, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.fake_quantize": [[529, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat": [[530, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat"]], "quantizeconfig (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_config)": [[531, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_config.QuantizeConfig"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_config": [[531, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_config"]], "init_quantize_config() (in module neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_helper)": [[532, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_helper.init_quantize_config"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_helper": [[532, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_helper"]], "qat_clone_function() (in module neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_helper)": [[532, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_helper.qat_clone_function"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers": [[533, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers"]], "config_quantizable_layers() (in module neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.optimize_layer)": [[534, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.optimize_layer.config_quantizable_layers"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.optimize_layer": [[534, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "quantizelayeradd (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_add)": [[535, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_add.QuantizeLayerAdd"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[535, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "quantizelayerbase (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_base)": [[536, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_base.QuantizeLayerBase"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[536, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "quantizelayerbatchnormalization (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_bn)": [[537, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_bn.QuantizeLayerBatchNormalization"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[537, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "quantizewrapper (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_wrapper)": [[538, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper"]], "quantizewrapperbase (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_wrapper)": [[538, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_wrapper": [[538, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_wrapper"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_bn)": [[539, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_bn": [[539, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_concatv2)": [[540, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_concatv2": [[540, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_conv)": [[541, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_conv": [[541, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_conv"]], "fusenodestartwithdeconv2d (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_deconv)": [[542, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_deconv": [[542, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_deconv"]], "fusenodestartwithfusedinstancenorm (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_in)": [[543, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_in": [[543, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_in"]], "fusenodestartwithmatmul (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_matmul)": [[544, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_matmul": [[544, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_matmul"]], "fusenodestartwithpooling (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_pooling)": [[545, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_pooling": [[545, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq": [[546, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq"]], "optimizeqdqgraph (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.optimize_qdq)": [[547, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.optimize_qdq": [[547, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.optimize_qdq"]], "quantizegraphbase (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base)": [[548, "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base.QuantizeGraphBase"]], "quantizenodebase (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base)": [[548, "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base.QuantizeNodeBase"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base": [[548, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_bn)": [[549, "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_bn": [[549, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_concatv2)": [[550, "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_concatv2": [[550, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_conv)": [[551, "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_conv": [[551, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_conv"]], "quantizegraphforintel (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_for_intel_cpu)": [[552, "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_for_intel_cpu": [[552, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_for_intel_cpu"]], "fusenodestartwithmatmul (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_matmul)": [[553, "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_matmul": [[553, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_matmul"]], "fusenodestartwithpooling (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_pooling)": [[554, "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_pooling": [[554, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_pooling"]], "quantizegraphhelper (class in neural_compressor.tensorflow.quantization.utils.quantize_graph_common)": [[555, "neural_compressor.tensorflow.quantization.utils.quantize_graph_common.QuantizeGraphHelper"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph_common": [[555, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph_common"]], "biascorrection (class in neural_compressor.tensorflow.quantization.utils.transform_graph.bias_correction)": [[556, "neural_compressor.tensorflow.quantization.utils.transform_graph.bias_correction.BiasCorrection"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.bias_correction": [[556, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.bias_correction"]], "graphtransformbase (class in neural_compressor.tensorflow.quantization.utils.transform_graph.graph_transform_base)": [[557, "neural_compressor.tensorflow.quantization.utils.transform_graph.graph_transform_base.GraphTransformBase"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.graph_transform_base": [[557, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.graph_transform_base"]], "neural_compressor.tensorflow.quantization.utils.transform_graph": [[558, "module-neural_compressor.tensorflow.quantization.utils.transform_graph"]], "insertlogging (class in neural_compressor.tensorflow.quantization.utils.transform_graph.insert_logging)": [[559, "neural_compressor.tensorflow.quantization.utils.transform_graph.insert_logging.InsertLogging"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.insert_logging": [[559, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.insert_logging"]], "rerangequantizedconcat (class in neural_compressor.tensorflow.quantization.utils.transform_graph.rerange_quantized_concat)": [[560, "neural_compressor.tensorflow.quantization.utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.rerange_quantized_concat": [[560, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.rerange_quantized_concat"]], "apply_inlining() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[561, "neural_compressor.tensorflow.quantization.utils.utility.apply_inlining"]], "collate_tf_preds() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[561, "neural_compressor.tensorflow.quantization.utils.utility.collate_tf_preds"]], "construct_function_from_graph_def() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[561, "neural_compressor.tensorflow.quantization.utils.utility.construct_function_from_graph_def"]], "disable_random() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[561, "neural_compressor.tensorflow.quantization.utils.utility.disable_random"]], "fix_ref_type_of_graph_def() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[561, "neural_compressor.tensorflow.quantization.utils.utility.fix_ref_type_of_graph_def"]], "generate_feed_dict() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[561, "neural_compressor.tensorflow.quantization.utils.utility.generate_feed_dict"]], "get_graph_def() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[561, "neural_compressor.tensorflow.quantization.utils.utility.get_graph_def"]], "get_input_output_node_names() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[561, "neural_compressor.tensorflow.quantization.utils.utility.get_input_output_node_names"]], "get_model_input_shape() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[561, "neural_compressor.tensorflow.quantization.utils.utility.get_model_input_shape"]], "get_tensor_by_name() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[561, "neural_compressor.tensorflow.quantization.utils.utility.get_tensor_by_name"]], "get_tensor_val_from_graph_node() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[561, "neural_compressor.tensorflow.quantization.utils.utility.get_tensor_val_from_graph_node"]], "get_weight_from_input_tensor() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[561, "neural_compressor.tensorflow.quantization.utils.utility.get_weight_from_input_tensor"]], "int8_node_name_reverse() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[561, "neural_compressor.tensorflow.quantization.utils.utility.int8_node_name_reverse"]], "is_ckpt_format() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[561, "neural_compressor.tensorflow.quantization.utils.utility.is_ckpt_format"]], "is_saved_model_format() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[561, "neural_compressor.tensorflow.quantization.utils.utility.is_saved_model_format"]], "iterator_sess_run() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[561, "neural_compressor.tensorflow.quantization.utils.utility.iterator_sess_run"]], "neural_compressor.tensorflow.quantization.utils.utility": [[561, "module-neural_compressor.tensorflow.quantization.utils.utility"]], "parse_saved_model() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[561, "neural_compressor.tensorflow.quantization.utils.utility.parse_saved_model"]], "read_graph() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[561, "neural_compressor.tensorflow.quantization.utils.utility.read_graph"]], "reconstruct_saved_model() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[561, "neural_compressor.tensorflow.quantization.utils.utility.reconstruct_saved_model"]], "strip_equivalent_nodes() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[561, "neural_compressor.tensorflow.quantization.utils.utility.strip_equivalent_nodes"]], "strip_unused_nodes() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[561, "neural_compressor.tensorflow.quantization.utils.utility.strip_unused_nodes"]], "tf_diagnosis_helper() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[561, "neural_compressor.tensorflow.quantization.utils.utility.tf_diagnosis_helper"]], "write_graph() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[561, "neural_compressor.tensorflow.quantization.utils.utility.write_graph"]], "neural_compressor.tensorflow.utils.constants": [[562, "module-neural_compressor.tensorflow.utils.constants"]], "basedataloader (class in neural_compressor.tensorflow.utils.data)": [[563, "neural_compressor.tensorflow.utils.data.BaseDataLoader"]], "dummydataset (class in neural_compressor.tensorflow.utils.data)": [[563, "neural_compressor.tensorflow.utils.data.DummyDataset"]], "dummydatasetv2 (class in neural_compressor.tensorflow.utils.data)": [[563, "neural_compressor.tensorflow.utils.data.DummyDatasetV2"]], "neural_compressor.tensorflow.utils.data": [[563, "module-neural_compressor.tensorflow.utils.data"]], "neural_compressor.tensorflow.utils": [[564, "module-neural_compressor.tensorflow.utils"]], "model (class in neural_compressor.tensorflow.utils.model)": [[565, "neural_compressor.tensorflow.utils.model.Model"]], "neural_compressor.tensorflow.utils.model": [[565, "module-neural_compressor.tensorflow.utils.model"]], "basemodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[566, "neural_compressor.tensorflow.utils.model_wrappers.BaseModel"]], "kerasmodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[566, "neural_compressor.tensorflow.utils.model_wrappers.KerasModel"]], "tensorflowbasemodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[566, "neural_compressor.tensorflow.utils.model_wrappers.TensorflowBaseModel"]], "tensorflowcheckpointmodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[566, "neural_compressor.tensorflow.utils.model_wrappers.TensorflowCheckpointModel"]], "tensorflowllmmodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[566, "neural_compressor.tensorflow.utils.model_wrappers.TensorflowLLMModel"]], "tensorflowmodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[566, "neural_compressor.tensorflow.utils.model_wrappers.TensorflowModel"]], "tensorflowqatmodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[566, "neural_compressor.tensorflow.utils.model_wrappers.TensorflowQATModel"]], "tensorflowsavedmodelmodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[566, "neural_compressor.tensorflow.utils.model_wrappers.TensorflowSavedModelModel"]], "checkpoint_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[566, "neural_compressor.tensorflow.utils.model_wrappers.checkpoint_session"]], "estimator_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[566, "neural_compressor.tensorflow.utils.model_wrappers.estimator_session"]], "frozen_pb_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[566, "neural_compressor.tensorflow.utils.model_wrappers.frozen_pb_session"]], "get_model_type() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[566, "neural_compressor.tensorflow.utils.model_wrappers.get_model_type"]], "graph_def_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[566, "neural_compressor.tensorflow.utils.model_wrappers.graph_def_session"]], "graph_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[566, "neural_compressor.tensorflow.utils.model_wrappers.graph_session"]], "keras_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[566, "neural_compressor.tensorflow.utils.model_wrappers.keras_session"]], "load_saved_model() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[566, "neural_compressor.tensorflow.utils.model_wrappers.load_saved_model"]], "neural_compressor.tensorflow.utils.model_wrappers": [[566, "module-neural_compressor.tensorflow.utils.model_wrappers"]], "saved_model_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[566, "neural_compressor.tensorflow.utils.model_wrappers.saved_model_session"]], "slim_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[566, "neural_compressor.tensorflow.utils.model_wrappers.slim_session"]], "validate_and_inference_input_output() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[566, "neural_compressor.tensorflow.utils.model_wrappers.validate_and_inference_input_output"]], "validate_graph_node() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[566, "neural_compressor.tensorflow.utils.model_wrappers.validate_graph_node"]], "tfslimnetsfactory (class in neural_compressor.tensorflow.utils.nets_factory)": [[567, "neural_compressor.tensorflow.utils.nets_factory.TFSlimNetsFactory"]], "neural_compressor.tensorflow.utils.nets_factory": [[567, "module-neural_compressor.tensorflow.utils.nets_factory"]], "captureoutputtofile (class in neural_compressor.tensorflow.utils.utility)": [[568, "neural_compressor.tensorflow.utils.utility.CaptureOutputToFile"]], "cpuinfo (class in neural_compressor.tensorflow.utils.utility)": [[568, "neural_compressor.tensorflow.utils.utility.CpuInfo"]], "dequantize() (in module neural_compressor.tensorflow.utils.utility)": [[568, "neural_compressor.tensorflow.utils.utility.Dequantize"]], "lazyimport (class in neural_compressor.tensorflow.utils.utility)": [[568, "neural_compressor.tensorflow.utils.utility.LazyImport"]], "statistics (class in neural_compressor.tensorflow.utils.utility)": [[568, "neural_compressor.tensorflow.utils.utility.Statistics"]], "combine_histogram() (in module neural_compressor.tensorflow.utils.utility)": [[568, "neural_compressor.tensorflow.utils.utility.combine_histogram"]], "deep_get() (in module neural_compressor.tensorflow.utils.utility)": [[568, "neural_compressor.tensorflow.utils.utility.deep_get"]], "dequantize_weight() (in module neural_compressor.tensorflow.utils.utility)": [[568, "neural_compressor.tensorflow.utils.utility.dequantize_weight"]], "disable_random() (in module neural_compressor.tensorflow.utils.utility)": [[568, "neural_compressor.tensorflow.utils.utility.disable_random"]], "dump_data_to_local() (in module neural_compressor.tensorflow.utils.utility)": [[568, "neural_compressor.tensorflow.utils.utility.dump_data_to_local"]], "dump_elapsed_time() (in module neural_compressor.tensorflow.utils.utility)": [[568, "neural_compressor.tensorflow.utils.utility.dump_elapsed_time"]], "get_all_fp32_data() (in module neural_compressor.tensorflow.utils.utility)": [[568, "neural_compressor.tensorflow.utils.utility.get_all_fp32_data"]], "get_tensor_histogram() (in module neural_compressor.tensorflow.utils.utility)": [[568, "neural_compressor.tensorflow.utils.utility.get_tensor_histogram"]], "itex_installed() (in module neural_compressor.tensorflow.utils.utility)": [[568, "neural_compressor.tensorflow.utils.utility.itex_installed"]], "load_data_from_pkl() (in module neural_compressor.tensorflow.utils.utility)": [[568, "neural_compressor.tensorflow.utils.utility.load_data_from_pkl"]], "neural_compressor.tensorflow.utils.utility": [[568, "module-neural_compressor.tensorflow.utils.utility"]], "register_algo() (in module neural_compressor.tensorflow.utils.utility)": [[568, "neural_compressor.tensorflow.utils.utility.register_algo"]], "singleton() (in module neural_compressor.tensorflow.utils.utility)": [[568, "neural_compressor.tensorflow.utils.utility.singleton"]], "version1_eq_version2() (in module neural_compressor.tensorflow.utils.utility)": [[568, "neural_compressor.tensorflow.utils.utility.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.tensorflow.utils.utility)": [[568, "neural_compressor.tensorflow.utils.utility.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.tensorflow.utils.utility)": [[568, "neural_compressor.tensorflow.utils.utility.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.tensorflow.utils.utility)": [[568, "neural_compressor.tensorflow.utils.utility.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.tensorflow.utils.utility)": [[568, "neural_compressor.tensorflow.utils.utility.version1_lte_version2"]], "neural_compressor.torch.algorithms.habana_fp8.fp8_quant": [[569, "module-neural_compressor.torch.algorithms.habana_fp8.fp8_quant"]], "neural_compressor.torch.algorithms.habana_fp8": [[570, "module-neural_compressor.torch.algorithms.habana_fp8"]], "neural_compressor.torch.algorithms.habana_fp8.modules": [[571, "module-neural_compressor.torch.algorithms.habana_fp8.modules"]], "neural_compressor.torch.algorithms.habana_fp8.observer": [[572, "module-neural_compressor.torch.algorithms.habana_fp8.observer"]], "neural_compressor.torch.algorithms": [[573, "module-neural_compressor.torch.algorithms"]], "neural_compressor.torch.algorithms.layer_wise": [[574, "module-neural_compressor.torch.algorithms.layer_wise"]], "load() (in module neural_compressor.torch.algorithms.layer_wise.load)": [[575, "neural_compressor.torch.algorithms.layer_wise.load.load"]], "neural_compressor.torch.algorithms.layer_wise.load": [[575, "module-neural_compressor.torch.algorithms.layer_wise.load"]], "neural_compressor.torch.algorithms.layer_wise.modified_pickle": [[576, "module-neural_compressor.torch.algorithms.layer_wise.modified_pickle"]], "dowload_hf_model() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[577, "neural_compressor.torch.algorithms.layer_wise.utils.dowload_hf_model"]], "get_children() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[577, "neural_compressor.torch.algorithms.layer_wise.utils.get_children"]], "get_module() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[577, "neural_compressor.torch.algorithms.layer_wise.utils.get_module"]], "get_named_children() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[577, "neural_compressor.torch.algorithms.layer_wise.utils.get_named_children"]], "get_super_module_by_name() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[577, "neural_compressor.torch.algorithms.layer_wise.utils.get_super_module_by_name"]], "load_empty_model() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[577, "neural_compressor.torch.algorithms.layer_wise.utils.load_empty_model"]], "load_layer_wise_quantized_model() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[577, "neural_compressor.torch.algorithms.layer_wise.utils.load_layer_wise_quantized_model"]], "load_tensor() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[577, "neural_compressor.torch.algorithms.layer_wise.utils.load_tensor"]], "load_tensor_from_shard() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[577, "neural_compressor.torch.algorithms.layer_wise.utils.load_tensor_from_shard"]], "neural_compressor.torch.algorithms.layer_wise.utils": [[577, "module-neural_compressor.torch.algorithms.layer_wise.utils"]], "update_module() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[577, "neural_compressor.torch.algorithms.layer_wise.utils.update_module"]], "neural_compressor.torch.algorithms.static_quant": [[578, "module-neural_compressor.torch.algorithms.static_quant"]], "neural_compressor.torch.algorithms.static_quant.static_quant": [[579, "module-neural_compressor.torch.algorithms.static_quant.static_quant"]], "static_quantize() (in module neural_compressor.torch.algorithms.static_quant.static_quant)": [[579, "neural_compressor.torch.algorithms.static_quant.static_quant.static_quantize"]], "statistics (class in neural_compressor.torch.algorithms.static_quant.utility)": [[580, "neural_compressor.torch.algorithms.static_quant.utility.Statistics"]], "transformerbasedmodelblockpatterndetector (class in neural_compressor.torch.algorithms.static_quant.utility)": [[580, "neural_compressor.torch.algorithms.static_quant.utility.TransformerBasedModelBlockPatternDetector"]], "dump_model_op_stats() (in module neural_compressor.torch.algorithms.static_quant.utility)": [[580, "neural_compressor.torch.algorithms.static_quant.utility.dump_model_op_stats"]], "get_depth() (in module neural_compressor.torch.algorithms.static_quant.utility)": [[580, "neural_compressor.torch.algorithms.static_quant.utility.get_depth"]], "get_dict_at_depth() (in module neural_compressor.torch.algorithms.static_quant.utility)": [[580, "neural_compressor.torch.algorithms.static_quant.utility.get_dict_at_depth"]], "get_element_under_depth() (in module neural_compressor.torch.algorithms.static_quant.utility)": [[580, "neural_compressor.torch.algorithms.static_quant.utility.get_element_under_depth"]], "get_quantizable_ops_from_cfgs() (in module neural_compressor.torch.algorithms.static_quant.utility)": [[580, "neural_compressor.torch.algorithms.static_quant.utility.get_quantizable_ops_from_cfgs"]], "get_quantizable_ops_recursively() (in module neural_compressor.torch.algorithms.static_quant.utility)": [[580, "neural_compressor.torch.algorithms.static_quant.utility.get_quantizable_ops_recursively"]], "neural_compressor.torch.algorithms.static_quant.utility": [[580, "module-neural_compressor.torch.algorithms.static_quant.utility"]], "paser_cfgs() (in module neural_compressor.torch.algorithms.static_quant.utility)": [[580, "neural_compressor.torch.algorithms.static_quant.utility.paser_cfgs"]], "simple_inference() (in module neural_compressor.torch.algorithms.static_quant.utility)": [[580, "neural_compressor.torch.algorithms.static_quant.utility.simple_inference"]], "actawareweightquant (class in neural_compressor.torch.algorithms.weight_only.awq)": [[581, "neural_compressor.torch.algorithms.weight_only.awq.ActAwareWeightQuant"]], "awq_quantize() (in module neural_compressor.torch.algorithms.weight_only.awq)": [[581, "neural_compressor.torch.algorithms.weight_only.awq.awq_quantize"]], "neural_compressor.torch.algorithms.weight_only.awq": [[581, "module-neural_compressor.torch.algorithms.weight_only.awq"]], "gptq (class in neural_compressor.torch.algorithms.weight_only.gptq)": [[582, "neural_compressor.torch.algorithms.weight_only.gptq.GPTQ"]], "gptquantizer (class in neural_compressor.torch.algorithms.weight_only.gptq)": [[582, "neural_compressor.torch.algorithms.weight_only.gptq.GPTQuantizer"]], "find_layers() (in module neural_compressor.torch.algorithms.weight_only.gptq)": [[582, "neural_compressor.torch.algorithms.weight_only.gptq.find_layers"]], "find_layers_name() (in module neural_compressor.torch.algorithms.weight_only.gptq)": [[582, "neural_compressor.torch.algorithms.weight_only.gptq.find_layers_name"]], "gptq_quantize() (in module neural_compressor.torch.algorithms.weight_only.gptq)": [[582, "neural_compressor.torch.algorithms.weight_only.gptq.gptq_quantize"]], "is_leaf() (in module neural_compressor.torch.algorithms.weight_only.gptq)": [[582, "neural_compressor.torch.algorithms.weight_only.gptq.is_leaf"]], "log_quantizable_layers_per_transformer() (in module neural_compressor.torch.algorithms.weight_only.gptq)": [[582, "neural_compressor.torch.algorithms.weight_only.gptq.log_quantizable_layers_per_transformer"]], "neural_compressor.torch.algorithms.weight_only.gptq": [[582, "module-neural_compressor.torch.algorithms.weight_only.gptq"]], "quantize() (in module neural_compressor.torch.algorithms.weight_only.gptq)": [[582, "neural_compressor.torch.algorithms.weight_only.gptq.quantize"]], "trace_gptq_target_blocks() (in module neural_compressor.torch.algorithms.weight_only.gptq)": [[582, "neural_compressor.torch.algorithms.weight_only.gptq.trace_gptq_target_blocks"]], "auto_accelerator (class in neural_compressor.torch.algorithms.weight_only.hqq.auto_accelerator)": [[583, "neural_compressor.torch.algorithms.weight_only.hqq.auto_accelerator.Auto_Accelerator"]], "cpu_accelerator (class in neural_compressor.torch.algorithms.weight_only.hqq.auto_accelerator)": [[583, "neural_compressor.torch.algorithms.weight_only.hqq.auto_accelerator.CPU_Accelerator"]], "cuda_accelerator (class in neural_compressor.torch.algorithms.weight_only.hqq.auto_accelerator)": [[583, "neural_compressor.torch.algorithms.weight_only.hqq.auto_accelerator.CUDA_Accelerator"]], "neural_compressor.torch.algorithms.weight_only.hqq.auto_accelerator": [[583, "module-neural_compressor.torch.algorithms.weight_only.hqq.auto_accelerator"]], "register_accelerator() (in module neural_compressor.torch.algorithms.weight_only.hqq.auto_accelerator)": [[583, "neural_compressor.torch.algorithms.weight_only.hqq.auto_accelerator.register_accelerator"]], "neural_compressor.torch.algorithms.weight_only.hqq.bitpack": [[584, "module-neural_compressor.torch.algorithms.weight_only.hqq.bitpack"]], "hqqmoduleconfig (class in neural_compressor.torch.algorithms.weight_only.hqq.config)": [[585, "neural_compressor.torch.algorithms.weight_only.hqq.config.HQQModuleConfig"]], "neural_compressor.torch.algorithms.weight_only.hqq.config": [[585, "module-neural_compressor.torch.algorithms.weight_only.hqq.config"]], "neural_compressor.torch.algorithms.weight_only.hqq.core": [[586, "module-neural_compressor.torch.algorithms.weight_only.hqq.core"]], "neural_compressor.torch.algorithms.weight_only.hqq": [[587, "module-neural_compressor.torch.algorithms.weight_only.hqq"]], "neural_compressor.torch.algorithms.weight_only.hqq.optimizer": [[588, "module-neural_compressor.torch.algorithms.weight_only.hqq.optimizer"]], "neural_compressor.torch.algorithms.weight_only.hqq.qtensor": [[589, "module-neural_compressor.torch.algorithms.weight_only.hqq.qtensor"]], "neural_compressor.torch.algorithms.weight_only.hqq.quant_api": [[590, "module-neural_compressor.torch.algorithms.weight_only.hqq.quant_api"]], "neural_compressor.torch.algorithms.weight_only.hqq.quantizer": [[591, "module-neural_compressor.torch.algorithms.weight_only.hqq.quantizer"]], "dump_elapsed_time() (in module neural_compressor.torch.algorithms.weight_only.hqq.utility)": [[592, "neural_compressor.torch.algorithms.weight_only.hqq.utility.dump_elapsed_time"]], "neural_compressor.torch.algorithms.weight_only.hqq.utility": [[592, "module-neural_compressor.torch.algorithms.weight_only.hqq.utility"]], "neural_compressor.torch.algorithms.weight_only": [[593, "module-neural_compressor.torch.algorithms.weight_only"]], "fakeaffinetensorquantfunction (class in neural_compressor.torch.algorithms.weight_only.modules)": [[594, "neural_compressor.torch.algorithms.weight_only.modules.FakeAffineTensorQuantFunction"]], "mullinear (class in neural_compressor.torch.algorithms.weight_only.modules)": [[594, "neural_compressor.torch.algorithms.weight_only.modules.MulLinear"]], "teqlinearfakequant (class in neural_compressor.torch.algorithms.weight_only.modules)": [[594, "neural_compressor.torch.algorithms.weight_only.modules.TEQLinearFakeQuant"]], "neural_compressor.torch.algorithms.weight_only.modules": [[594, "module-neural_compressor.torch.algorithms.weight_only.modules"]], "neural_compressor.torch.algorithms.weight_only.rtn": [[595, "module-neural_compressor.torch.algorithms.weight_only.rtn"]], "rtn_quantize() (in module neural_compressor.torch.algorithms.weight_only.rtn)": [[595, "neural_compressor.torch.algorithms.weight_only.rtn.rtn_quantize"]], "tequantizer (class in neural_compressor.torch.algorithms.weight_only.teq)": [[596, "neural_compressor.torch.algorithms.weight_only.teq.TEQuantizer"]], "neural_compressor.torch.algorithms.weight_only.teq": [[596, "module-neural_compressor.torch.algorithms.weight_only.teq"]], "teq_quantize() (in module neural_compressor.torch.algorithms.weight_only.teq)": [[596, "neural_compressor.torch.algorithms.weight_only.teq.teq_quantize"]], "calibration() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[597, "neural_compressor.torch.algorithms.weight_only.utility.calibration"]], "fetch_module() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[597, "neural_compressor.torch.algorithms.weight_only.utility.fetch_module"]], "get_absorb_layers() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[597, "neural_compressor.torch.algorithms.weight_only.utility.get_absorb_layers"]], "get_block_prefix() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[597, "neural_compressor.torch.algorithms.weight_only.utility.get_block_prefix"]], "get_example_input() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[597, "neural_compressor.torch.algorithms.weight_only.utility.get_example_input"]], "get_hidden_states() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[597, "neural_compressor.torch.algorithms.weight_only.utility.get_hidden_states"]], "get_module() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[597, "neural_compressor.torch.algorithms.weight_only.utility.get_module"]], "get_module_input_output() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[597, "neural_compressor.torch.algorithms.weight_only.utility.get_module_input_output"]], "neural_compressor.torch.algorithms.weight_only.utility": [[597, "module-neural_compressor.torch.algorithms.weight_only.utility"]], "qdq_weight_actor() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[597, "neural_compressor.torch.algorithms.weight_only.utility.qdq_weight_actor"]], "qdq_weight_asym() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[597, "neural_compressor.torch.algorithms.weight_only.utility.qdq_weight_asym"]], "qdq_weight_sym() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[597, "neural_compressor.torch.algorithms.weight_only.utility.qdq_weight_sym"]], "quant_tensor() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[597, "neural_compressor.torch.algorithms.weight_only.utility.quant_tensor"]], "quant_weight_w_scale() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[597, "neural_compressor.torch.algorithms.weight_only.utility.quant_weight_w_scale"]], "quantize_4bit() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[597, "neural_compressor.torch.algorithms.weight_only.utility.quantize_4bit"]], "search_clip() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[597, "neural_compressor.torch.algorithms.weight_only.utility.search_clip"]], "set_module() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[597, "neural_compressor.torch.algorithms.weight_only.utility.set_module"]], "autocast (class in neural_compressor.torch.amp.autocast)": [[598, "neural_compressor.torch.amp.autocast.autocast"]], "neural_compressor.torch.amp.autocast": [[598, "module-neural_compressor.torch.amp.autocast"]], "neural_compressor.torch.amp.fp8.functions": [[599, "module-neural_compressor.torch.amp.fp8.functions"]], "neural_compressor.torch.amp.fp8": [[600, "module-neural_compressor.torch.amp.fp8"]], "neural_compressor.torch.amp": [[601, "module-neural_compressor.torch.amp"]], "neural_compressor.torch": [[602, "module-neural_compressor.torch"]], "neural_compressor.torch.quantization.algorithm_entry": [[603, "module-neural_compressor.torch.quantization.algorithm_entry"]], "rtn_entry() (in module neural_compressor.torch.quantization.algorithm_entry)": [[603, "neural_compressor.torch.quantization.algorithm_entry.rtn_entry"]], "autotune() (in module neural_compressor.torch.quantization.autotune)": [[604, "neural_compressor.torch.quantization.autotune.autotune"]], "neural_compressor.torch.quantization.autotune": [[604, "module-neural_compressor.torch.quantization.autotune"]], "gptqconfig (class in neural_compressor.torch.quantization.config)": [[605, "neural_compressor.torch.quantization.config.GPTQConfig"]], "rtnconfig (class in neural_compressor.torch.quantization.config)": [[605, "neural_compressor.torch.quantization.config.RTNConfig"]], "get_default_gptq_config() (in module neural_compressor.torch.quantization.config)": [[605, "neural_compressor.torch.quantization.config.get_default_gptq_config"]], "get_default_hqq_config() (in module neural_compressor.torch.quantization.config)": [[605, "neural_compressor.torch.quantization.config.get_default_hqq_config"]], "get_default_rtn_config() (in module neural_compressor.torch.quantization.config)": [[605, "neural_compressor.torch.quantization.config.get_default_rtn_config"]], "neural_compressor.torch.quantization.config": [[605, "module-neural_compressor.torch.quantization.config"]], "neural_compressor.torch.quantization": [[606, "module-neural_compressor.torch.quantization"]], "neural_compressor.torch.quantization.modules": [[607, "module-neural_compressor.torch.quantization.modules"]], "neural_compressor.torch.quantization.quantize": [[608, "module-neural_compressor.torch.quantization.quantize"]], "quantize() (in module neural_compressor.torch.quantization.quantize)": [[608, "neural_compressor.torch.quantization.quantize.quantize"]], "neural_compressor.torch.utils.constants": [[609, "module-neural_compressor.torch.utils.constants"]], "neural_compressor.torch.utils.environ": [[610, "module-neural_compressor.torch.utils.environ"]], "neural_compressor.torch.utils": [[611, "module-neural_compressor.torch.utils"]], "fetch_module() (in module neural_compressor.torch.utils.utility)": [[612, "neural_compressor.torch.utils.utility.fetch_module"]], "neural_compressor.torch.utils.utility": [[612, "module-neural_compressor.torch.utils.utility"]], "register_algo() (in module neural_compressor.torch.utils.utility)": [[612, "neural_compressor.torch.utils.utility.register_algo"]], "set_module() (in module neural_compressor.torch.utils.utility)": [[612, "neural_compressor.torch.utils.utility.set_module"]], "callbacks (class in neural_compressor.training)": [[613, "neural_compressor.training.CallBacks"]], "compressionmanager (class in neural_compressor.training)": [[613, "neural_compressor.training.CompressionManager"]], "fit() (in module neural_compressor.training)": [[613, "neural_compressor.training.fit"]], "neural_compressor.training": [[613, "module-neural_compressor.training"]], "prepare_compression() (in module neural_compressor.training)": [[613, "neural_compressor.training.prepare_compression"]], "layerhistogramcollector (class in neural_compressor.utils.collect_layer_histogram)": [[614, "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector"]], "neural_compressor.utils.collect_layer_histogram": [[614, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[615, "module-neural_compressor.utils.constant"]], "create_dataloader() (in module neural_compressor.utils.create_obj_from_config)": [[616, "neural_compressor.utils.create_obj_from_config.create_dataloader"]], "create_dataset() (in module neural_compressor.utils.create_obj_from_config)": [[616, "neural_compressor.utils.create_obj_from_config.create_dataset"]], "create_eval_func() (in module neural_compressor.utils.create_obj_from_config)": [[616, "neural_compressor.utils.create_obj_from_config.create_eval_func"]], "create_train_func() (in module neural_compressor.utils.create_obj_from_config)": [[616, "neural_compressor.utils.create_obj_from_config.create_train_func"]], "get_algorithm() (in module neural_compressor.utils.create_obj_from_config)": [[616, "neural_compressor.utils.create_obj_from_config.get_algorithm"]], "get_func_from_config() (in module neural_compressor.utils.create_obj_from_config)": [[616, "neural_compressor.utils.create_obj_from_config.get_func_from_config"]], "get_metrics() (in module neural_compressor.utils.create_obj_from_config)": [[616, "neural_compressor.utils.create_obj_from_config.get_metrics"]], "get_postprocess() (in module neural_compressor.utils.create_obj_from_config)": [[616, "neural_compressor.utils.create_obj_from_config.get_postprocess"]], "get_preprocess() (in module neural_compressor.utils.create_obj_from_config)": [[616, "neural_compressor.utils.create_obj_from_config.get_preprocess"]], "neural_compressor.utils.create_obj_from_config": [[616, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[617, "module-neural_compressor.utils"]], "kl_divergence (class in neural_compressor.utils.kl_divergence)": [[618, "neural_compressor.utils.kl_divergence.KL_Divergence"]], "neural_compressor.utils.kl_divergence": [[618, "module-neural_compressor.utils.kl_divergence"]], "optimizedmodel (class in neural_compressor.utils.load_huggingface)": [[619, "neural_compressor.utils.load_huggingface.OptimizedModel"]], "export_compressed_model() (in module neural_compressor.utils.load_huggingface)": [[619, "neural_compressor.utils.load_huggingface.export_compressed_model"]], "neural_compressor.utils.load_huggingface": [[619, "module-neural_compressor.utils.load_huggingface"]], "save_for_huggingface_upstream() (in module neural_compressor.utils.load_huggingface)": [[619, "neural_compressor.utils.load_huggingface.save_for_huggingface_upstream"]], "logger (class in neural_compressor.utils.logger)": [[620, "neural_compressor.utils.logger.Logger"]], "debug() (in module neural_compressor.utils.logger)": [[620, "neural_compressor.utils.logger.debug"]], "error() (in module neural_compressor.utils.logger)": [[620, "neural_compressor.utils.logger.error"]], "fatal() (in module neural_compressor.utils.logger)": [[620, "neural_compressor.utils.logger.fatal"]], "info() (in module neural_compressor.utils.logger)": [[620, "neural_compressor.utils.logger.info"]], "log() (in module neural_compressor.utils.logger)": [[620, "neural_compressor.utils.logger.log"]], "neural_compressor.utils.logger": [[620, "module-neural_compressor.utils.logger"]], "warn() (in module neural_compressor.utils.logger)": [[620, "neural_compressor.utils.logger.warn"]], "warning() (in module neural_compressor.utils.logger)": [[620, "neural_compressor.utils.logger.warning"]], "get_model_path() (in module neural_compressor.utils.neural_insights_utils)": [[621, "neural_compressor.utils.neural_insights_utils.get_model_path"]], "neural_compressor.utils.neural_insights_utils": [[621, "module-neural_compressor.utils.neural_insights_utils"]], "register_neural_insights_workload() (in module neural_compressor.utils.neural_insights_utils)": [[621, "neural_compressor.utils.neural_insights_utils.register_neural_insights_workload"]], "update_neural_insights_workload() (in module neural_compressor.utils.neural_insights_utils)": [[621, "neural_compressor.utils.neural_insights_utils.update_neural_insights_workload"]], "update_neural_insights_workload_accuracy_data() (in module neural_compressor.utils.neural_insights_utils)": [[621, "neural_compressor.utils.neural_insights_utils.update_neural_insights_workload_accuracy_data"]], "neural_compressor.utils.options": [[622, "module-neural_compressor.utils.options"]], "onnxrt (class in neural_compressor.utils.options)": [[622, "neural_compressor.utils.options.onnxrt"]], "is_int8_model() (in module neural_compressor.utils.pytorch)": [[623, "neural_compressor.utils.pytorch.is_int8_model"]], "load() (in module neural_compressor.utils.pytorch)": [[623, "neural_compressor.utils.pytorch.load"]], "load_weight_only() (in module neural_compressor.utils.pytorch)": [[623, "neural_compressor.utils.pytorch.load_weight_only"]], "neural_compressor.utils.pytorch": [[623, "module-neural_compressor.utils.pytorch"]], "recover_model_from_json() (in module neural_compressor.utils.pytorch)": [[623, "neural_compressor.utils.pytorch.recover_model_from_json"]], "captureoutputtofile (class in neural_compressor.utils.utility)": [[624, "neural_compressor.utils.utility.CaptureOutputToFile"]], "cpuinfo (class in neural_compressor.utils.utility)": [[624, "neural_compressor.utils.utility.CpuInfo"]], "dequantize() (in module neural_compressor.utils.utility)": [[624, "neural_compressor.utils.utility.Dequantize"]], "dotdict (class in neural_compressor.utils.utility)": [[624, "neural_compressor.utils.utility.DotDict"]], "global_state (class in neural_compressor.utils.utility)": [[624, "neural_compressor.utils.utility.GLOBAL_STATE"]], "lazyimport (class in neural_compressor.utils.utility)": [[624, "neural_compressor.utils.utility.LazyImport"]], "mode (class in neural_compressor.utils.utility)": [[624, "neural_compressor.utils.utility.MODE"]], "opentry (class in neural_compressor.utils.utility)": [[624, "neural_compressor.utils.utility.OpEntry"]], "statistics (class in neural_compressor.utils.utility)": [[624, "neural_compressor.utils.utility.Statistics"]], "alias_param() (in module neural_compressor.utils.utility)": [[624, "neural_compressor.utils.utility.alias_param"]], "calculate_mse() (in module neural_compressor.utils.utility)": [[624, "neural_compressor.utils.utility.calculate_mse"]], "check_key_exist() (in module neural_compressor.utils.utility)": [[624, "neural_compressor.utils.utility.check_key_exist"]], "combine_histogram() (in module neural_compressor.utils.utility)": [[624, "neural_compressor.utils.utility.combine_histogram"]], "compare_objects() (in module neural_compressor.utils.utility)": [[624, "neural_compressor.utils.utility.compare_objects"]], "compute_sparsity() (in module neural_compressor.utils.utility)": [[624, "neural_compressor.utils.utility.compute_sparsity"]], "dequantize_weight() (in module neural_compressor.utils.utility)": [[624, "neural_compressor.utils.utility.dequantize_weight"]], "dump_class_attrs() (in module neural_compressor.utils.utility)": [[624, "neural_compressor.utils.utility.dump_class_attrs"]], "dump_data_to_local() (in module neural_compressor.utils.utility)": [[624, "neural_compressor.utils.utility.dump_data_to_local"]], "dump_elapsed_time() (in module neural_compressor.utils.utility)": [[624, "neural_compressor.utils.utility.dump_elapsed_time"]], "dump_table() (in module neural_compressor.utils.utility)": [[624, "neural_compressor.utils.utility.dump_table"]], "dump_table_to_csv() (in module neural_compressor.utils.utility)": [[624, "neural_compressor.utils.utility.dump_table_to_csv"]], "equal_dicts() (in module neural_compressor.utils.utility)": [[624, "neural_compressor.utils.utility.equal_dicts"]], "fault_tolerant_file() (in module neural_compressor.utils.utility)": [[624, "neural_compressor.utils.utility.fault_tolerant_file"]], "get_all_fp32_data() (in module neural_compressor.utils.utility)": [[624, "neural_compressor.utils.utility.get_all_fp32_data"]], "get_number_of_sockets() (in module neural_compressor.utils.utility)": [[624, "neural_compressor.utils.utility.get_number_of_sockets"]], "get_op_list() (in module neural_compressor.utils.utility)": [[624, "neural_compressor.utils.utility.get_op_list"]], "get_size() (in module neural_compressor.utils.utility)": [[624, "neural_compressor.utils.utility.get_size"]], "get_tensor_histogram() (in module neural_compressor.utils.utility)": [[624, "neural_compressor.utils.utility.get_tensor_histogram"]], "get_tensors_info() (in module neural_compressor.utils.utility)": [[624, "neural_compressor.utils.utility.get_tensors_info"]], "get_tuning_history() (in module neural_compressor.utils.utility)": [[624, "neural_compressor.utils.utility.get_tuning_history"]], "get_weights_details() (in module neural_compressor.utils.utility)": [[624, "neural_compressor.utils.utility.get_weights_details"]], "load_data_from_pkl() (in module neural_compressor.utils.utility)": [[624, "neural_compressor.utils.utility.load_data_from_pkl"]], "mse_metric_gap() (in module neural_compressor.utils.utility)": [[624, "neural_compressor.utils.utility.mse_metric_gap"]], "neural_compressor.utils.utility": [[624, "module-neural_compressor.utils.utility"]], "print_op_list() (in module neural_compressor.utils.utility)": [[624, "neural_compressor.utils.utility.print_op_list"]], "print_table() (in module neural_compressor.utils.utility)": [[624, "neural_compressor.utils.utility.print_table"]], "recover() (in module neural_compressor.utils.utility)": [[624, "neural_compressor.utils.utility.recover"]], "set_random_seed() (in module neural_compressor.utils.utility)": [[624, "neural_compressor.utils.utility.set_random_seed"]], "set_resume_from() (in module neural_compressor.utils.utility)": [[624, "neural_compressor.utils.utility.set_resume_from"]], "set_tensorboard() (in module neural_compressor.utils.utility)": [[624, "neural_compressor.utils.utility.set_tensorboard"]], "set_workspace() (in module neural_compressor.utils.utility)": [[624, "neural_compressor.utils.utility.set_workspace"]], "show_memory_info() (in module neural_compressor.utils.utility)": [[624, "neural_compressor.utils.utility.show_memory_info"]], "singleton() (in module neural_compressor.utils.utility)": [[624, "neural_compressor.utils.utility.singleton"]], "str2array() (in module neural_compressor.utils.utility)": [[624, "neural_compressor.utils.utility.str2array"]], "time_limit() (in module neural_compressor.utils.utility)": [[624, "neural_compressor.utils.utility.time_limit"]], "version1_eq_version2() (in module neural_compressor.utils.utility)": [[624, "neural_compressor.utils.utility.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.utils.utility)": [[624, "neural_compressor.utils.utility.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.utils.utility)": [[624, "neural_compressor.utils.utility.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.utils.utility)": [[624, "neural_compressor.utils.utility.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.utils.utility)": [[624, "neural_compressor.utils.utility.version1_lte_version2"]], "weightsdetails (class in neural_compressor.utils.weights_details)": [[625, "neural_compressor.utils.weights_details.WeightsDetails"]], "weightsstatistics (class in neural_compressor.utils.weights_details)": [[625, "neural_compressor.utils.weights_details.WeightsStatistics"]], "neural_compressor.utils.weights_details": [[625, "module-neural_compressor.utils.weights_details"]], "neural_compressor.version": [[626, "module-neural_compressor.version"]]}})